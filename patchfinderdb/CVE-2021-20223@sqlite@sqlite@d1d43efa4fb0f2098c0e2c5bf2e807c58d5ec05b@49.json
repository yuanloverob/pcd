{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fe7046044cb94686eaba8291c24267d17d1357b7",
      "candidate_info": {
        "commit_hash": "fe7046044cb94686eaba8291c24267d17d1357b7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fe7046044cb94686eaba8291c24267d17d1357b7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c"
        ],
        "message": "Allow non-deterministic function in CHECK constraints.  It turns out that PostgreSQL, MySQL, and SQLServer all allow this.  We should be the the exception.  Ticket [830277d9db6c3ba1]\n\nFossilOrigin-Name: 8c8ce526adb60b8061e55151599ca8b11f1ec2e968d3bacc73a2a249e9e95ee1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cca437788e092b21ed1784dd94d4b1c7204ff1717538d276a10880d1345904bd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "868:           ExprSetProperty(pExpr,EP_ConstFunc);",
          "869:         }",
          "870:         if( (pDef->funcFlags & SQLITE_FUNC_CONSTANT)==0 ){",
          "874:           sqlite3ResolveNotValid(pParse, pNC, \"non-deterministic functions\",",
          "876:         }else{",
          "878:           pExpr->op2 = pNC->ncFlags & NC_SelfRef;",
          "",
          "[Removed Lines]",
          "875:                                  NC_SelfRef, 0);",
          "",
          "[Added Lines]",
          "878:                                  NC_IdxExpr|NC_PartIdx|NC_GenCol, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d346fe0ab52e8169ab8c91114617bb244ad2d457",
      "candidate_info": {
        "commit_hash": "d346fe0ab52e8169ab8c91114617bb244ad2d457",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d346fe0ab52e8169ab8c91114617bb244ad2d457",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbemem.c"
        ],
        "message": "Remove an invalid assert() on the debugging logic that checks to ensure that register values are not used after they go stale.  Ticket [d165ad781b39d574].\n\nFossilOrigin-Name: bd94d7d052734460904c687756231f8aa243a2252f07f742dd1e437aa940f536",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cc99447ac923166104e8a7c75088ed95279f4491b30cfa37dc3ee5e005dd9fac",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "970:       mFlags = pMem->flags & pX->flags & pX->mScopyFlags;",
          "971:       assert( (mFlags&(MEM_Int|MEM_IntReal))==0 || pMem->u.i==pX->u.i );",
          "",
          "[Removed Lines]",
          "975:       assert( (mFlags&(MEM_Str|MEM_Blob))==0",
          "976:               || (pMem->n==pX->n && pMem->z==pX->z) );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0897c3c05683488b11c909417eecf686a80d12bb",
      "candidate_info": {
        "commit_hash": "0897c3c05683488b11c909417eecf686a80d12bb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0897c3c05683488b11c909417eecf686a80d12bb",
        "files": [
          "ext/misc/csv.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "In the CSV extension, use SQLITE_TRANSIENT rather than SQLITE_STATIC on return values that can in fact change.\n\nFossilOrigin-Name: 54b54f02c66c5aeaa3504c52a04614e2fb4d7260da8367840d5ea5a71cdc2fda",
        "before_after_code_files": [
          "ext/misc/csv.c||ext/misc/csv.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/csv.c||ext/misc/csv.c": [
          "File: ext/misc/csv.c -> ext/misc/csv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "776:   CsvCursor *pCur = (CsvCursor*)cur;",
          "777:   CsvTable *pTab = (CsvTable*)cur->pVtab;",
          "778:   if( i>=0 && i<pTab->nCol && pCur->azVal[i]!=0 ){",
          "780:   }",
          "781:   return SQLITE_OK;",
          "782: }",
          "",
          "[Removed Lines]",
          "779:     sqlite3_result_text(ctx, pCur->azVal[i], -1, SQLITE_STATIC);",
          "",
          "[Added Lines]",
          "779:     sqlite3_result_text(ctx, pCur->azVal[i], -1, SQLITE_TRANSIENT);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 64782463be62b72b5cd0bfaa7c9b69aa487d807c5fe0e65a272080b7739fd21b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ccb37816731acf41cb60648c0eb73ced069a8915",
      "candidate_info": {
        "commit_hash": "ccb37816731acf41cb60648c0eb73ced069a8915",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ccb37816731acf41cb60648c0eb73ced069a8915",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "test/shell1.test",
          "test/shell5.test"
        ],
        "message": "Enhancements to the \".import\" command of the CLI.\n\nFossilOrigin-Name: cab1834cfc71f71bfed3c5170a0ba40a39385c3b2c50b7c6b6f09cc830dd1b1e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "test/shell1.test||test/shell1.test",
          "test/shell5.test||test/shell5.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 86465c08f4d629a296332a7985937326ac43ea2822c5651bf03862cd79d370fc",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3575:   \".headers on|off          Turn display of headers on or off\",",
          "3576:   \".help ?-all? ?PATTERN?   Show help text for PATTERN\",",
          "3577:   \".import FILE TABLE       Import data from FILE into TABLE\",",
          "3578: #ifndef SQLITE_OMIT_TEST_CONTROL",
          "3579:   \".imposter INDEX TABLE    Create imposter table TABLE on index INDEX\",",
          "3580: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3578:   \"   Options:\",",
          "3579:   \"     --ascii               Use \\\\037 and \\\\036 as column and row separators\",",
          "3580:   \"     --csv                 Use , and \\\\n as column and row separators\",",
          "3581:   \"     --skip N              Skip the first N rows of input\",",
          "3582:   \"     -v                    \\\"Verbose\\\" - increase auxiliary output\",",
          "3583:   \"   Notes:\",",
          "3584:   \"     *  If TABLE does not exist, it is created.  The first row of input\",",
          "3585:   \"        determines the column names.\",",
          "3586:   \"     *  If neither --csv or --ascii are used, the input mode is derived\",",
          "3587:   \"        from the \\\".mode\\\" output mode\",",
          "3588:   \"     *  If FILE begins with \\\"|\\\" then it is a command that generates the\",",
          "3589:   \"        input text.\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7646:     memset(&sCtx, 0, sizeof(sCtx));",
          "7653:     }",
          "7658:     }",
          "7663:     }",
          "7670:       nSep = strlen30(p->rowSeparator);",
          "7676:     }",
          "7677:     sCtx.zFile = zFile;",
          "7678:     sCtx.nLine = 1;",
          "7679:     if( sCtx.zFile[0]=='|' ){",
          "7680: #ifdef SQLITE_OMIT_POPEN",
          "7681:       raw_printf(stderr, \"Error: pipes are not supported in this OS\\n\");",
          "7683: #else",
          "7684:       sCtx.in = popen(sCtx.zFile+1, \"r\");",
          "7685:       sCtx.zFile = \"<pipe>\";",
          "",
          "[Removed Lines]",
          "7639:     if( nArg!=3 ){",
          "7640:       raw_printf(stderr, \"Usage: .import FILE TABLE\\n\");",
          "7641:       goto meta_command_exit;",
          "7642:     }",
          "7643:     zFile = azArg[1];",
          "7644:     zTable = azArg[2];",
          "7645:     seenInterrupt = 0;",
          "7647:     open_db(p, 0);",
          "7648:     nSep = strlen30(p->colSeparator);",
          "7649:     if( nSep==0 ){",
          "7650:       raw_printf(stderr,",
          "7651:                  \"Error: non-null column separator required for import\\n\");",
          "7652:       return 1;",
          "7654:     if( nSep>1 ){",
          "7655:       raw_printf(stderr, \"Error: multi-character column separators not allowed\"",
          "7656:                       \" for import\\n\");",
          "7657:       return 1;",
          "7659:     nSep = strlen30(p->rowSeparator);",
          "7660:     if( nSep==0 ){",
          "7661:       raw_printf(stderr, \"Error: non-null row separator required for import\\n\");",
          "7662:       return 1;",
          "7664:     if( nSep==2 && p->mode==MODE_Csv && strcmp(p->rowSeparator, SEP_CrLf)==0 ){",
          "7669:       sqlite3_snprintf(sizeof(p->rowSeparator), p->rowSeparator, SEP_Row);",
          "7671:     }",
          "7672:     if( nSep>1 ){",
          "7673:       raw_printf(stderr, \"Error: multi-character row separators not allowed\"",
          "7674:                       \" for import\\n\");",
          "7675:       return 1;",
          "7682:       return 1;",
          "",
          "[Added Lines]",
          "7657:     if( p->mode==MODE_Ascii ){",
          "7658:       xRead = ascii_read_one_field;",
          "7659:     }else{",
          "7660:       xRead = csv_read_one_field;",
          "7662:     for(i=1; i<nArg; i++){",
          "7663:       char *z = azArg[i];",
          "7664:       if( z[0]=='-' && z[1]=='-' ) z++;",
          "7665:       if( z[0]!='-' ){",
          "7666:         if( zFile==0 ){",
          "7667:           zFile = z;",
          "7668:         }else if( zTable==0 ){",
          "7669:           zTable = z;",
          "7670:         }else{",
          "7671:           utf8_printf(p->out, \"ERROR: extra argument: \\\"%s\\\".  Usage:\\n\", z);",
          "7672:           showHelp(p->out, \"import\");",
          "7673:           rc = 1;",
          "7674:           goto meta_command_exit;",
          "7675:         }",
          "7676:       }else if( strcmp(z,\"-v\")==0 ){",
          "7677:         eVerbose++;",
          "7678:       }else if( strcmp(z,\"-skip\")==0 && i<nArg-1 ){",
          "7679:         nSkip = integerValue(azArg[++i]);",
          "7680:       }else if( strcmp(z,\"-ascii\")==0 ){",
          "7681:         sCtx.cColSep = SEP_Unit[0];",
          "7682:         sCtx.cRowSep = SEP_Record[0];",
          "7683:         xRead = ascii_read_one_field;",
          "7684:         useOutputMode = 0;",
          "7685:       }else if( strcmp(z,\"-csv\")==0 ){",
          "7686:         sCtx.cColSep = ',';",
          "7687:         sCtx.cRowSep = '\\n';",
          "7688:         xRead = csv_read_one_field;",
          "7689:         useOutputMode = 0;",
          "7690:       }else{",
          "7691:         utf8_printf(p->out, \"ERROR: unknown option: \\\"%s\\\".  Usage:\\n\", z);",
          "7692:         showHelp(p->out, \"import\");",
          "7693:         rc = 1;",
          "7694:         goto meta_command_exit;",
          "7695:       }",
          "7697:     if( zTable==0 ){",
          "7698:       utf8_printf(p->out, \"ERROR: missing %s argument. Usage:\\n\",",
          "7699:                   zFile==0 ? \"FILE\" : \"TABLE\");",
          "7700:       showHelp(p->out, \"import\");",
          "7701:       rc = 1;",
          "7702:       goto meta_command_exit;",
          "7704:     seenInterrupt = 0;",
          "7705:     open_db(p, 0);",
          "7706:     if( useOutputMode ){",
          "7709:       nSep = strlen30(p->colSeparator);",
          "7710:       if( nSep==0 ){",
          "7711:         raw_printf(stderr,",
          "7712:                    \"Error: non-null column separator required for import\\n\");",
          "7713:         rc = 1;",
          "7714:         goto meta_command_exit;",
          "7715:       }",
          "7716:       if( nSep>1 ){",
          "7717:         raw_printf(stderr,",
          "7718:               \"Error: multi-character column separators not allowed\"",
          "7719:               \" for import\\n\");",
          "7720:         rc = 1;",
          "7721:         goto meta_command_exit;",
          "7722:       }",
          "7724:       if( nSep==0 ){",
          "7725:         raw_printf(stderr,",
          "7726:             \"Error: non-null row separator required for import\\n\");",
          "7727:         rc = 1;",
          "7728:         goto meta_command_exit;",
          "7729:       }",
          "7730:       if( nSep==2 && p->mode==MODE_Csv && strcmp(p->rowSeparator,SEP_CrLf)==0 ){",
          "7735:         sqlite3_snprintf(sizeof(p->rowSeparator), p->rowSeparator, SEP_Row);",
          "7736:         nSep = strlen30(p->rowSeparator);",
          "7737:       }",
          "7738:       if( nSep>1 ){",
          "7739:         raw_printf(stderr, \"Error: multi-character row separators not allowed\"",
          "7740:                            \" for import\\n\");",
          "7741:         rc = 1;",
          "7742:         goto meta_command_exit;",
          "7743:       }",
          "7744:       sCtx.cColSep = p->colSeparator[0];",
          "7745:       sCtx.cRowSep = p->rowSeparator[0];",
          "7752:       rc = 1;",
          "7753:       goto meta_command_exit;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7689:       sCtx.in = fopen(sCtx.zFile, \"rb\");",
          "7690:       xCloser = fclose;",
          "7691:     }",
          "7697:     if( sCtx.in==0 ){",
          "7698:       utf8_printf(stderr, \"Error: cannot open \\\"%s\\\"\\n\", zFile);",
          "7700:     }",
          "7703:     zSql = sqlite3_mprintf(\"SELECT * FROM %s\", zTable);",
          "7704:     if( zSql==0 ){",
          "7705:       xCloser(sCtx.in);",
          "",
          "[Removed Lines]",
          "7692:     if( p->mode==MODE_Ascii ){",
          "7693:       xRead = ascii_read_one_field;",
          "7694:     }else{",
          "7695:       xRead = csv_read_one_field;",
          "7696:     }",
          "7699:       return 1;",
          "7701:     sCtx.cColSep = p->colSeparator[0];",
          "7702:     sCtx.cRowSep = p->rowSeparator[0];",
          "",
          "[Added Lines]",
          "7765:       rc = 1;",
          "7766:       goto meta_command_exit;",
          "7767:     }",
          "7768:     if( eVerbose>=2 || (eVerbose>=1 && useOutputMode) ){",
          "7769:       char zSep[2];",
          "7770:       zSep[1] = 0;",
          "7771:       zSep[0] = sCtx.cColSep;",
          "7772:       utf8_printf(p->out, \"Column separator \");",
          "7773:       output_c_string(p->out, zSep);",
          "7774:       utf8_printf(p->out, \", row separator \");",
          "7775:       zSep[0] = sCtx.cRowSep;",
          "7776:       output_c_string(p->out, zSep);",
          "7777:       utf8_printf(p->out, \"\\n\");",
          "7778:     }",
          "7779:     while( (nSkip--)>0 ){",
          "7780:       while( xRead(&sCtx) && sCtx.cTerm==sCtx.cColSep ){}",
          "7781:       sCtx.nLine++;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7721:         sqlite3_free(sCtx.z);",
          "7722:         xCloser(sCtx.in);",
          "7723:         utf8_printf(stderr,\"%s: empty file\\n\", sCtx.zFile);",
          "7725:       }",
          "7726:       zCreate = sqlite3_mprintf(\"%z\\n)\", zCreate);",
          "7727:       rc = sqlite3_exec(p->db, zCreate, 0, 0, 0);",
          "7728:       sqlite3_free(zCreate);",
          "7729:       if( rc ){",
          "",
          "[Removed Lines]",
          "7724:         return 1;",
          "",
          "[Added Lines]",
          "7804:         rc = 1;",
          "7805:         goto meta_command_exit;",
          "7808:       if( eVerbose>=1 ){",
          "7809:         utf8_printf(p->out, \"%s\\n\", zCreate);",
          "7810:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7731:                 sqlite3_errmsg(p->db));",
          "7732:         sqlite3_free(sCtx.z);",
          "7733:         xCloser(sCtx.in);",
          "7735:       }",
          "7736:       rc = sqlite3_prepare_v2(p->db, zSql, -1, &pStmt, 0);",
          "7737:     }",
          "",
          "[Removed Lines]",
          "7734:         return 1;",
          "",
          "[Added Lines]",
          "7818:         rc = 1;",
          "7819:         goto meta_command_exit;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "7740:       if (pStmt) sqlite3_finalize(pStmt);",
          "7741:       utf8_printf(stderr,\"Error: %s\\n\", sqlite3_errmsg(p->db));",
          "7742:       xCloser(sCtx.in);",
          "7744:     }",
          "7745:     nCol = sqlite3_column_count(pStmt);",
          "7746:     sqlite3_finalize(pStmt);",
          "",
          "[Removed Lines]",
          "7743:       return 1;",
          "",
          "[Added Lines]",
          "7828:       rc = 1;",
          "7829:       goto meta_command_exit;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "7759:     }",
          "7760:     zSql[j++] = ')';",
          "7761:     zSql[j] = 0;",
          "7762:     rc = sqlite3_prepare_v2(p->db, zSql, -1, &pStmt, 0);",
          "7763:     sqlite3_free(zSql);",
          "7764:     if( rc ){",
          "7765:       utf8_printf(stderr, \"Error: %s\\n\", sqlite3_errmsg(p->db));",
          "7766:       if (pStmt) sqlite3_finalize(pStmt);",
          "7767:       xCloser(sCtx.in);",
          "7769:     }",
          "7770:     needCommit = sqlite3_get_autocommit(p->db);",
          "7771:     if( needCommit ) sqlite3_exec(p->db, \"BEGIN\", 0, 0, 0);",
          "",
          "[Removed Lines]",
          "7768:       return 1;",
          "",
          "[Added Lines]",
          "7848:     if( eVerbose>=2 ){",
          "7849:       utf8_printf(p->out, \"Insert using: %s\\n\", zSql);",
          "7850:     }",
          "7857:       rc = 1;",
          "7858:       goto meta_command_exit;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "7808:         if( rc!=SQLITE_OK ){",
          "7809:           utf8_printf(stderr, \"%s:%d: INSERT failed: %s\\n\", sCtx.zFile,",
          "7810:                       startLine, sqlite3_errmsg(p->db));",
          "7811:         }",
          "7812:       }",
          "7813:     }while( sCtx.cTerm!=EOF );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7901:           sCtx.nErr++;",
          "7902:         }else{",
          "7903:           sCtx.nRow++;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "7816:     sqlite3_free(sCtx.z);",
          "7817:     sqlite3_finalize(pStmt);",
          "7818:     if( needCommit ) sqlite3_exec(p->db, \"COMMIT\", 0, 0, 0);",
          "7819:   }else",
          "7821: #ifndef SQLITE_UNTESTABLE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7912:     if( eVerbose>0 ){",
          "7913:       utf8_printf(p->out,",
          "7914:           \"Added %d rows with %d errors using %d lines of input\\n\",",
          "7915:           sCtx.nRow, sCtx.nErr, sCtx.nLine-1);",
          "7916:     }",
          "",
          "---------------"
        ],
        "test/shell1.test||test/shell1.test": [
          "File: test/shell1.test -> test/shell1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "388: # .import FILE TABLE     Import data from FILE into TABLE",
          "389: do_test shell1-3.11.1 {",
          "390:   catchcmd \"test.db\" \".import\"",
          "392: do_test shell1-3.11.2 {",
          "393:   catchcmd \"test.db\" \".import FOO\"",
          "398: do_test shell1-3.11.3 {",
          "399:   # too many arguments",
          "400:   catchcmd \"test.db\" \".import FOO BAR BAD\"",
          "403: # .indexes ?TABLE?       Show names of all indexes",
          "404: #                          If TABLE specified, only show indexes for tables",
          "",
          "[Removed Lines]",
          "391: } {1 {Usage: .import FILE TABLE}}",
          "394: } {1 {Usage: .import FILE TABLE}}",
          "395: #do_test shell1-3.11.2 {",
          "396: #  catchcmd \"test.db\" \".import FOO BAR\"",
          "397: #} {1 {Error: no such table: BAR}}",
          "401: } {1 {Usage: .import FILE TABLE}}",
          "",
          "[Added Lines]",
          "391: } {/1 .ERROR: missing FILE argument.*/}",
          "394: } {/1 .ERROR: missing TABLE argument.*/}",
          "398: } {/1 .ERROR: extra argument: \"BAD\".*./}",
          "",
          "---------------"
        ],
        "test/shell5.test||test/shell5.test": [
          "File: test/shell5.test -> test/shell5.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: # .import FILE TABLE     Import data from FILE into TABLE",
          "33: do_test shell5-1.1.1 {",
          "34:   catchcmd \"test.db\" \".import\"",
          "36: do_test shell5-1.1.2 {",
          "37:   catchcmd \"test.db\" \".import FOO\"",
          "42: do_test shell5-1.1.3 {",
          "43:   # too many arguments",
          "44:   catchcmd \"test.db\" \".import FOO BAR BAD\"",
          "47: # .separator STRING      Change separator used by output mode and .import",
          "48: do_test shell5-1.2.1 {",
          "",
          "[Removed Lines]",
          "35: } {1 {Usage: .import FILE TABLE}}",
          "38: } {1 {Usage: .import FILE TABLE}}",
          "39: #do_test shell5-1.1.2 {",
          "40: #  catchcmd \"test.db\" \".import FOO BAR\"",
          "41: #} {1 {Error: no such table: BAR}}",
          "45: } {1 {Usage: .import FILE TABLE}}",
          "",
          "[Added Lines]",
          "35: } {/1 .ERROR: missing FILE argument.*/}",
          "38: } {/1 .ERROR: missing TABLE argument.*/}",
          "42: } {/1 .ERROR: extra argument.*/}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2811ea6be7f4d63d5cc0992c78db3b1b73112a93",
      "candidate_info": {
        "commit_hash": "2811ea6be7f4d63d5cc0992c78db3b1b73112a93",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2811ea6be7f4d63d5cc0992c78db3b1b73112a93",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/wherecode.c",
          "src/whereexpr.c",
          "test/window1.test"
        ],
        "message": "For expressions like (x, y) IN (SELECT ...) where the SELECT uses window-functions, require that all columns on the LHS be indexed before an index can be used. Fix for [d9ed4ebe].\n\nFossilOrigin-Name: 0b1dbd60f5db3abe2097dbc0b6de9671685ca5eaf7d3fc8e3f87ff5065a9d114",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/wherecode.c||src/wherecode.c",
          "src/whereexpr.c||src/whereexpr.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bff38e2b5318ed032aaf1d350903c3494b4531f2dc59a6997144ec8e23defef4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3808:   pOrig = p->apCsr[pOp->p2];",
          "3811:   pCx = allocateCursor(p, pOp->p1, pOrig->nField, -1, CURTYPE_BTREE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3809:   assert( pOrig );",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "416: ){",
          "417:   sqlite3 *db = pParse->db;",
          "418:   Expr *pNew;",
          "436:   pNew = sqlite3ExprDup(db, pX, 0);",
          "437:   if( db->mallocFailed==0 ){",
          "",
          "[Removed Lines]",
          "419: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "434:   if( sqlite3WindowRewrite(pParse, pX->x.pSelect) ) return 0;",
          "435: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1360:   if( pWC->op==TK_AND && pExpr->op==TK_IN && pTerm->iField==0",
          "1361:    && pExpr->pLeft->op==TK_VECTOR",
          "1362:    && pExpr->x.pSelect->pPrior==0",
          "1363:   ){",
          "1364:     int i;",
          "1365:     for(i=0; i<sqlite3ExprVectorSize(pExpr->pLeft); i++){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1364: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "1365:    && pExpr->x.pSelect->pWin==0",
          "1366: #endif",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1347:   SELECT COUNT(*) FROM t0, t1 WHERE (SELECT AVG(1) FILTER(WHERE t1.c1));",
          "1348: } {1}",
          "1350: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1350: reset_db",
          "1351: do_execsql_test 39.1 {",
          "1352:   CREATE TABLE t0(c0 UNIQUE);",
          "1353: }",
          "1354: do_execsql_test 39.2 {",
          "1355:   SELECT FIRST_VALUE(0) OVER();",
          "1356: } {0}",
          "1357: do_execsql_test 39.3 {",
          "1358:   SELECT * FROM t0 WHERE(c0, 0) IN(SELECT FIRST_VALUE(0) OVER(), 0);",
          "1359: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}