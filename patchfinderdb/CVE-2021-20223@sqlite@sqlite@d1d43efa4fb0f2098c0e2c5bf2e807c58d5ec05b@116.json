{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d35bdd6c090ddc4d85213dc0bf8cb432966eb38a",
      "candidate_info": {
        "commit_hash": "d35bdd6c090ddc4d85213dc0bf8cb432966eb38a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d35bdd6c090ddc4d85213dc0bf8cb432966eb38a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/insert.c",
          "test/conflict.test"
        ],
        "message": "Ensure that all ON CONFLICT REPLACE indexes are sorted to the end of the list of indexes for a table, even for weird cases where the same UNIQUE constraint occurs twice with the ON CONFLICT REPLACE clause only on the second one.  This avoids an out-of-order contraint processing problem that can arise due to the optimization of check-in [469a62ca33081854].\n\nFossilOrigin-Name: 1e3918ca2f2c1cfcfa44249b1d7b847d52cbb8d302a8d4a335c090cfdf22d7a1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/insert.c||src/insert.c",
          "test/conflict.test||test/conflict.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 672e749aef7351de3c69b365c1f80c756fda4e261b5d2ac1faa01d3a7d5a4c49",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3921:       sqlite3VdbeJumpHere(v, pIndex->tnum);",
          "3922:     }",
          "3923:   }",
          "3931:   if( db->init.busy || pTblName==0 ){",
          "3944:     pIndex = 0;",
          "3945:   }",
          "3946:   else if( IN_RENAME_OBJECT ){",
          "",
          "[Removed Lines]",
          "3932:     if( onError!=OE_Replace || pTab->pIndex==0",
          "3933:          || pTab->pIndex->onError==OE_Replace){",
          "3934:       pIndex->pNext = pTab->pIndex;",
          "3935:       pTab->pIndex = pIndex;",
          "3936:     }else{",
          "3937:       Index *pOther = pTab->pIndex;",
          "3938:       while( pOther->pNext && pOther->pNext->onError!=OE_Replace ){",
          "3939:         pOther = pOther->pNext;",
          "3940:       }",
          "3941:       pIndex->pNext = pOther->pNext;",
          "3942:       pOther->pNext = pIndex;",
          "3943:     }",
          "",
          "[Added Lines]",
          "3925:     pIndex->pNext = pTab->pIndex;",
          "3926:     pTab->pIndex = pIndex;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3953: exit_create_index:",
          "3954:   if( pIndex ) sqlite3FreeIndex(db, pIndex);",
          "3955:   sqlite3ExprDelete(db, pPIWhere);",
          "3956:   sqlite3ExprListDelete(db, pList);",
          "3957:   sqlite3SrcListDelete(db, pTblName);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3939:     Index **ppFrom = &pTab->pIndex;",
          "3940:     Index *pThis;",
          "3941:     for(ppFrom=&pTab->pIndex; (pThis = *ppFrom)!=0; ppFrom=&pThis->pNext){",
          "3942:       Index *pNext;",
          "3943:       if( pThis->onError!=OE_Replace ) continue;",
          "3944:       while( (pNext = pThis->pNext)!=0 && pNext->onError!=OE_Replace ){",
          "3946:         pThis->pNext = pNext->pNext;",
          "3947:         pNext->pNext = pThis;",
          "3948:         ppFrom = &pNext->pNext;",
          "3949:       }",
          "3950:       break;",
          "3951:     }",
          "3952:   }",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2250:   assert( v!=0 );",
          "2252:   for(i=0, pIdx=pTab->pIndex; pIdx; pIdx=pIdx->pNext, i++){",
          "2253:     if( aRegIdx[i]==0 ) continue;",
          "2254:     if( pIdx->pPartIdxWhere ){",
          "2255:       sqlite3VdbeAddOp2(v, OP_IsNull, aRegIdx[i], sqlite3VdbeCurrentAddr(v)+2);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2254:     assert( pIdx->onError!=OE_Replace",
          "2255:          || pIdx->pNext==0",
          "2256:          || pIdx->pNext->onError==OE_Replace );",
          "",
          "---------------"
        ],
        "test/conflict.test||test/conflict.test": [
          "File: test/conflict.test -> test/conflict.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "834:   REPLACE INTO t1 DEFAULT VALUES;",
          "835: } {1 {NOT NULL constraint failed: t1.x}}",
          "838: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "837: # 2019-12-15 gramfuzz1 find",
          "838: # Three UNIQUE constraints, where the third would is a duplicate except",
          "839: # that it adds ON CONFLICT REPLACE.  Verify that the indexes end up",
          "840: # sorted in the correct order (REPLACE last) so that constraint processing",
          "841: # works correctly.",
          "842: #",
          "843: reset_db",
          "844: do_execsql_test conflict-15.10 {",
          "845:   CREATE TABLE t1(",
          "846:     x PRIMARY KEY,",
          "847:     UNIQUE(x,x),",
          "848:     UNIQUE(x,x) ON CONFLICT REPLACE",
          "849:   );",
          "850:   INSERT INTO t1(x) VALUES(1);",
          "851:   SELECT * FROM t1;",
          "852: } {1}",
          "853: do_catchsql_test conflict-15.20 {",
          "854:   INSERT INTO t1(x) VALUES(1);",
          "855: } {1 {UNIQUE constraint failed: t1.x}}",
          "856: do_execsql_test conflict-15.30 {",
          "857:   SELECT * FROM t1;",
          "858: } {1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "920cf596e67ecccecb497cfa60cc65945048f866",
      "candidate_info": {
        "commit_hash": "920cf596e67ecccecb497cfa60cc65945048f866",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/920cf596e67ecccecb497cfa60cc65945048f866",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/analyze.c",
          "src/attach.c",
          "src/expr.c",
          "src/vdbe.c",
          "src/vdbe.h",
          "src/vdbeaux.c"
        ],
        "message": "Simplify the bytecode generation for SQL function calls such that the OP_Function or OP_PureFunc opcodes are coded directly, rather than using the intermediate OP_Function0 or OP_PureFunc0 - opcodes that are now removed.\n\nFossilOrigin-Name: 84e02d773d60cffe619104991d21d7f0c68616c0f6bb99686bf54f5306c756d0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/analyze.c||src/analyze.c",
          "src/attach.c||src/attach.c",
          "src/expr.c||src/expr.c",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbe.h||src/vdbe.h",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 13fe6978b7de208d2e27460d824f7fc778cf6ea0aabfe566b32bb410b8816f63",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/analyze.c||src/analyze.c": [
          "File: src/analyze.c -> src/analyze.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "916:   {0}",
          "917: };",
          "921: #ifdef SQLITE_ENABLE_STAT4",
          "923: #elif SQLITE_DEBUG",
          "924:   assert( iParam==STAT_GET_STAT1 );",
          "925: #else",
          "926:   UNUSED_PARAMETER( iParam );",
          "927: #endif",
          "931: }",
          "",
          "[Removed Lines]",
          "919: static void callStatGet(Vdbe *v, int regStat4, int iParam, int regOut){",
          "920:   assert( regOut!=regStat4 && regOut!=regStat4+1 );",
          "922:   sqlite3VdbeAddOp2(v, OP_Integer, iParam, regStat4+1);",
          "928:   sqlite3VdbeAddOp4(v, OP_Function0, 0, regStat4, regOut,",
          "929:                     (char*)&statGetFuncdef, P4_FUNCDEF);",
          "930:   sqlite3VdbeChangeP5(v, 1 + IsStat4);",
          "",
          "[Added Lines]",
          "919: static void callStatGet(Parse *pParse, int regStat4, int iParam, int regOut){",
          "921:   sqlite3VdbeAddOp2(pParse->pVdbe, OP_Integer, iParam, regStat4+1);",
          "927:   assert( regOut!=regStat4 && regOut!=regStat4+1 );",
          "928:   sqlite3VdbeAddFunctionCall(pParse, 0, regStat4, regOut, 1+IsStat4,",
          "929:                              &statGetFuncdef, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1095: #endif",
          "1096:     sqlite3VdbeAddOp2(v, OP_Integer, nCol, regStat4+1);",
          "1097:     sqlite3VdbeAddOp2(v, OP_Integer, pIdx->nKeyCol, regStat4+2);",
          "",
          "[Removed Lines]",
          "1098:     sqlite3VdbeAddOp4(v, OP_Function0, 0, regStat4+1, regStat4,",
          "1099:                      (char*)&statInitFuncdef, P4_FUNCDEF);",
          "1100:     sqlite3VdbeChangeP5(v, 2+IsStat4);",
          "",
          "[Added Lines]",
          "1097:     sqlite3VdbeAddFunctionCall(pParse, 0, regStat4+1, regStat4, 2+IsStat4,",
          "1098:                                &statInitFuncdef, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1192:     }",
          "1193: #endif",
          "1194:     assert( regChng==(regStat4+1) );",
          "1198:     sqlite3VdbeAddOp2(v, OP_Next, iIdxCur, addrNextRow); VdbeCoverage(v);",
          "1202:     assert( \"BBB\"[0]==SQLITE_AFF_TEXT );",
          "1203:     sqlite3VdbeAddOp4(v, OP_MakeRecord, regTabname, 3, regTemp, \"BBB\", 0);",
          "1204:     sqlite3VdbeAddOp2(v, OP_NewRowid, iStatCur, regNewRowid);",
          "",
          "[Removed Lines]",
          "1195:     sqlite3VdbeAddOp4(v, OP_Function0, 1, regStat4, regTemp,",
          "1196:                      (char*)&statPushFuncdef, P4_FUNCDEF);",
          "1197:     sqlite3VdbeChangeP5(v, 2+IsStat4);",
          "1201:     callStatGet(v, regStat4, STAT_GET_STAT1, regStat1);",
          "",
          "[Added Lines]",
          "1193:     sqlite3VdbeAddFunctionCall(pParse, 1, regStat4, regTemp, 2+IsStat4,",
          "1194:                                &statPushFuncdef, 0);",
          "1198:     callStatGet(pParse, regStat4, STAT_GET_STAT1, regStat1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1224:       pParse->nMem = MAX(pParse->nMem, regCol+nCol);",
          "1226:       addrNext = sqlite3VdbeCurrentAddr(v);",
          "1228:       addrIsNull = sqlite3VdbeAddOp1(v, OP_IsNull, regSampleRowid);",
          "1229:       VdbeCoverage(v);",
          "1233:       sqlite3VdbeAddOp4Int(v, seekOp, iTabCur, addrNext, regSampleRowid, 0);",
          "1234:       VdbeCoverage(v);",
          "1235:       for(i=0; i<nCol; i++){",
          "",
          "[Removed Lines]",
          "1227:       callStatGet(v, regStat4, STAT_GET_ROWID, regSampleRowid);",
          "1230:       callStatGet(v, regStat4, STAT_GET_NEQ, regEq);",
          "1231:       callStatGet(v, regStat4, STAT_GET_NLT, regLt);",
          "1232:       callStatGet(v, regStat4, STAT_GET_NDLT, regDLt);",
          "",
          "[Added Lines]",
          "1224:       callStatGet(pParse, regStat4, STAT_GET_ROWID, regSampleRowid);",
          "1227:       callStatGet(pParse, regStat4, STAT_GET_NEQ, regEq);",
          "1228:       callStatGet(pParse, regStat4, STAT_GET_NLT, regLt);",
          "1229:       callStatGet(pParse, regStat4, STAT_GET_NDLT, regDLt);",
          "",
          "---------------"
        ],
        "src/attach.c||src/attach.c": [
          "File: src/attach.c -> src/attach.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "402:   assert( v || db->mallocFailed );",
          "403:   if( v ){",
          "",
          "[Removed Lines]",
          "404:     sqlite3VdbeAddOp4(v, OP_Function0, 0, regArgs+3-pFunc->nArg, regArgs+3,",
          "405:                       (char *)pFunc, P4_FUNCDEF);",
          "406:     assert( pFunc->nArg==-1 || (pFunc->nArg&0xff)==pFunc->nArg );",
          "407:     sqlite3VdbeChangeP5(v, (u8)(pFunc->nArg));",
          "",
          "[Added Lines]",
          "404:     sqlite3VdbeAddFunctionCall(pParse, 0, regArgs+3-pFunc->nArg, regArgs+3,",
          "405:                                pFunc->nArg, pFunc, 0);",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4032:       }else",
          "4033: #endif",
          "4034:       {",
          "4038:       }",
          "4039:       if( nFarg && constMask==0 ){",
          "4040:         sqlite3ReleaseTempRange(pParse, r1, nFarg);",
          "",
          "[Removed Lines]",
          "4035:         sqlite3VdbeAddOp4(v, pParse->iSelfTab ? OP_PureFunc0 : OP_Function0,",
          "4036:                           constMask, r1, target, (char*)pDef, P4_FUNCDEF);",
          "4037:         sqlite3VdbeChangeP5(v, (u8)nFarg);",
          "",
          "[Added Lines]",
          "4035:         sqlite3VdbeAddFunctionCall(pParse, constMask, r1, target, nFarg,",
          "4036:                                    pDef, pParse->iSelfTab);",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7513:   int i;",
          "",
          "[Removed Lines]",
          "7488:   int n;",
          "7489:   sqlite3_context *pCtx;",
          "7491:   assert( pOp->p4type==P4_FUNCDEF );",
          "7492:   n = pOp->p5;",
          "7493:   assert( pOp->p3>0 && pOp->p3<=(p->nMem+1 - p->nCursor) );",
          "7494:   assert( n==0 || (pOp->p2>0 && pOp->p2+n<=(p->nMem+1 - p->nCursor)+1) );",
          "7495:   assert( pOp->p3<pOp->p2 || pOp->p3>=pOp->p2+n );",
          "7496:   pCtx = sqlite3DbMallocRawNN(db, sizeof(*pCtx) + (n-1)*sizeof(sqlite3_value*));",
          "7497:   if( pCtx==0 ) goto no_mem;",
          "7498:   pCtx->pOut = 0;",
          "7499:   pCtx->pFunc = pOp->p4.pFunc;",
          "7500:   pCtx->iOp = (int)(pOp - aOp);",
          "7501:   pCtx->pVdbe = p;",
          "7502:   pCtx->isError = 0;",
          "7503:   pCtx->argc = n;",
          "7504:   pOp->p4type = P4_FUNCCTX;",
          "7505:   pOp->p4.pCtx = pCtx;",
          "7506:   assert( OP_PureFunc == OP_PureFunc0+2 );",
          "7507:   assert( OP_Function == OP_Function0+2 );",
          "7508:   pOp->opcode += 2;",
          "7510: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7523:   pOut = &aMem[pOp->p3];",
          "7524:   if( pCtx->pOut != pOut ){",
          "7525:     pCtx->pOut = pOut;",
          "7526:     for(i=pCtx->argc-1; i>=0; i--) pCtx->argv[i] = &aMem[pOp->p2+i];",
          "7527:   }",
          "7529:   memAboutToChange(p, pOut);",
          "7530: #ifdef SQLITE_DEBUG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7505:     pCtx->pVdbe = p;",
          "7509:   assert( pCtx->pVdbe==p );",
          "",
          "---------------"
        ],
        "src/vdbe.h||src/vdbe.h": [
          "File: src/vdbe.h -> src/vdbe.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "190: int sqlite3VdbeAddOp4(Vdbe*,int,int,int,int,const char *zP4,int);",
          "191: int sqlite3VdbeAddOp4Dup8(Vdbe*,int,int,int,int,const u8*,int);",
          "192: int sqlite3VdbeAddOp4Int(Vdbe*,int,int,int,int,int);",
          "193: void sqlite3VdbeEndCoroutine(Vdbe*,int);",
          "194: #if defined(SQLITE_DEBUG) && !defined(SQLITE_TEST_REALLOC_STRESS)",
          "195:   void sqlite3VdbeVerifyNoMallocRequired(Vdbe *p, int N);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "193: int sqlite3VdbeAddFunctionCall(Parse*,int,int,int,int,const FuncDef*,int);",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: #include \"sqliteInt.h\"",
          "16: #include \"vdbeInt.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: static void freeEphemeralFunction(sqlite3 *db, FuncDef *pDef);",
          "20: static void vdbeFreeOpArray(sqlite3 *, Op *, int);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "328:   return addr;",
          "329: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "345: int sqlite3VdbeAddFunctionCall(",
          "353: ){",
          "354:   Vdbe *v = pParse->pVdbe;",
          "355:   int nByte;",
          "356:   int addr;",
          "357:   sqlite3_context *pCtx;",
          "358:   assert( v );",
          "359:   nByte = sizeof(*pCtx) + (nArg-1)*sizeof(sqlite3_value*);",
          "360:   pCtx = sqlite3DbMallocRawNN(pParse->db, nByte);",
          "361:   if( pCtx==0 ){",
          "362:     assert( pParse->db->mallocFailed );",
          "363:     freeEphemeralFunction(pParse->db, (FuncDef*)pFunc);",
          "364:     return 0;",
          "365:   }",
          "366:   pCtx->pOut = 0;",
          "367:   pCtx->pFunc = (FuncDef*)pFunc;",
          "368:   pCtx->pVdbe = v;",
          "369:   pCtx->isError = 0;",
          "370:   pCtx->argc = nArg;",
          "371:   addr = sqlite3VdbeAddOp4(v, eCallCtx ? OP_PureFunc : OP_Function,",
          "372:                            p1, p2, p3, (char*)pCtx, P4_FUNCCTX);",
          "373:   pCtx->iOp = addr;",
          "374:   return addr;",
          "375: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1020:   }",
          "1021: }",
          "",
          "[Removed Lines]",
          "1023: static void vdbeFreeOpArray(sqlite3 *, Op *, int);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1031: }",
          "1032: static SQLITE_NOINLINE void freeP4FuncCtx(sqlite3 *db, sqlite3_context *p){",
          "1033:   freeEphemeralFunction(db, p->pFunc);",
          "1035: }",
          "1036: static void freeP4(sqlite3 *db, int p4type, void *p4){",
          "1037:   assert( db );",
          "",
          "[Removed Lines]",
          "1034:  sqlite3DbFreeNN(db, p);",
          "",
          "[Added Lines]",
          "1078:   sqlite3DbFreeNN(db, p);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1537:       sqlite3_str_appendf(&x, \"%s(%d)\", pDef->zName, pDef->nArg);",
          "1538:       break;",
          "1539:     }",
          "1541:     case P4_FUNCCTX: {",
          "1542:       FuncDef *pDef = pOp->p4.pCtx->pFunc;",
          "1543:       sqlite3_str_appendf(&x, \"%s(%d)\", pDef->zName, pDef->nArg);",
          "1544:       break;",
          "1545:     }",
          "1547:     case P4_INT64: {",
          "1548:       sqlite3_str_appendf(&x, \"%lld\", *pOp->p4.pI64);",
          "1549:       break;",
          "",
          "[Removed Lines]",
          "1540: #if defined(SQLITE_DEBUG) || defined(VDBE_PROFILE)",
          "1546: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4961:   if( pCtx->pVdbe==0 ) return 1;",
          "4962: #endif",
          "4963:   if( pCtx->pVdbe->aOp[pCtx->iOp].opcode==OP_PureFunc ){",
          "4964:     sqlite3_result_error(pCtx,",
          "4965:        \"non-deterministic function in index expression or CHECK constraint\",",
          "4966:        -1);",
          "4967:     return 0;",
          "4968:   }",
          "4969:   return 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5006: #if 0",
          "5007:     char *zMsg = sqlite3_mprintf(",
          "5008:        \"non-deterministic use of %s() in an index, CHECK constraint, \"",
          "5009:        \"or generated column\", pCtx->pFunc->zName);",
          "5010:     sqlite3_result_error(pCtx, zMsg, -1);",
          "5011:     sqlite3_free(zMsg);",
          "5012: #else",
          "5016: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b28f44eba257b89a1809b33b2892abe9aa1b7515",
      "candidate_info": {
        "commit_hash": "b28f44eba257b89a1809b33b2892abe9aa1b7515",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b28f44eba257b89a1809b33b2892abe9aa1b7515",
        "files": [
          "main.mk",
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/main.c",
          "src/os_unix.c",
          "src/pager.c",
          "src/pager.h",
          "src/sqlite.h.in",
          "src/sqliteInt.h",
          "src/wal.c",
          "src/wal.h",
          "test/wal.test",
          "test/walsetlk.test"
        ],
        "message": "Changes to avoid deadlock in SQLITE_ENABLE_SETLK_TIMEOUT builds.\n\nFossilOrigin-Name: 652e4b23fffbff128b177697d7217b7d5aad8baf2364df1646b268ce6774e0fb",
        "before_after_code_files": [
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/main.c||src/main.c",
          "src/os_unix.c||src/os_unix.c",
          "src/pager.c||src/pager.c",
          "src/pager.h||src/pager.h",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/wal.c||src/wal.c",
          "src/wal.h||src/wal.h",
          "test/wal.test||test/wal.test",
          "test/walsetlk.test||test/walsetlk.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "423:   $(TOP)/src/vdbeaux.c \\",
          "424:   $(TOP)/src/vdbe.c \\",
          "425:   $(TOP)/src/vdbemem.c \\",
          "426:   $(TOP)/src/where.c \\",
          "427:   $(TOP)/src/wherecode.c \\",
          "428:   $(TOP)/src/whereexpr.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "426:   $(TOP)/src/vdbevtab.c \\",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 99749d4fd4930ccf15227f67c732266af9e09dd3cabdc0834fb450ef98196441",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2304:   BtShared *pBt = (BtShared*)pArg;",
          "2305:   assert( pBt->db );",
          "2306:   assert( sqlite3_mutex_held(pBt->db->mutex) );",
          "2309: }",
          "",
          "[Removed Lines]",
          "2307:   return sqlite3InvokeBusyHandler(&pBt->db->busyHandler,",
          "2308:                                   sqlite3PagerFile(pBt->pPager));",
          "",
          "[Added Lines]",
          "2307:   return sqlite3InvokeBusyHandler(&pBt->db->busyHandler);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3373: int sqlite3BtreeBeginTrans(Btree *p, int wrflag, int *pSchemaVersion){",
          "3374:   BtShared *pBt = p->pBt;",
          "3375:   int rc = SQLITE_OK;",
          "3377:   sqlite3BtreeEnter(p);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3374:   Pager *pPager = pBt->pPager;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3387:   assert( pBt->inTransaction==TRANS_WRITE || IfNotOmitAV(pBt->bDoTruncate)==0 );",
          "3389:   if( (p->db->flags & SQLITE_ResetDatabase)",
          "3391:   ){",
          "3392:     pBt->btsFlags &= ~BTS_READ_ONLY;",
          "3393:   }",
          "",
          "[Removed Lines]",
          "3390:    && sqlite3PagerIsreadonly(pBt->pPager)==0",
          "",
          "[Added Lines]",
          "3390:    && sqlite3PagerIsreadonly(pPager)==0",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3435:   pBt->btsFlags &= ~BTS_INITIALLY_EMPTY;",
          "3436:   if( pBt->nPage==0 ) pBt->btsFlags |= BTS_INITIALLY_EMPTY;",
          "3437:   do {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3438:     sqlite3PagerWalDb(pPager, p->db);",
          "3440: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "3443:     if( pBt->pPage1==0 && wrflag ){",
          "3444:       assert( pBt->inTransaction==TRANS_NONE );",
          "3445:       rc = sqlite3PagerWalWriteLock(pPager, 1);",
          "3446:       if( rc!=SQLITE_BUSY && rc!=SQLITE_OK ) break;",
          "3447:     }",
          "3448: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3448:       if( (pBt->btsFlags & BTS_READ_ONLY)!=0 ){",
          "3449:         rc = SQLITE_READONLY;",
          "3450:       }else{",
          "3452:         if( rc==SQLITE_OK ){",
          "3453:           rc = newDatabase(pBt);",
          "3454:         }else if( rc==SQLITE_BUSY_SNAPSHOT && pBt->inTransaction==TRANS_NONE ){",
          "",
          "[Removed Lines]",
          "3451:         rc = sqlite3PagerBegin(pBt->pPager,wrflag>1,sqlite3TempInMemory(p->db));",
          "",
          "[Added Lines]",
          "3463:         rc = sqlite3PagerBegin(pPager, wrflag>1, sqlite3TempInMemory(p->db));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3461:     }",
          "3463:     if( rc!=SQLITE_OK ){",
          "3464:       unlockBtreeIfUnused(pBt);",
          "3465:     }",
          "3466:   }while( (rc&0xFF)==SQLITE_BUSY && pBt->inTransaction==TRANS_NONE &&",
          "3467:           btreeInvokeBusyHandler(pBt) );",
          "3470:   if( rc==SQLITE_OK ){",
          "3471:     if( p->inTrans==TRANS_NONE ){",
          "",
          "[Removed Lines]",
          "3468:   sqlite3PagerResetLockTimeout(pBt->pPager);",
          "",
          "[Added Lines]",
          "3476:       (void)sqlite3PagerWalWriteLock(pPager, 0);",
          "3481:   sqlite3PagerWalDb(pPager, 0);",
          "3482: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "3483:   if( rc==SQLITE_BUSY_TIMEOUT ) rc = SQLITE_BUSY;",
          "3484: #endif",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3521:     }",
          "3522:   }",
          "",
          "[Removed Lines]",
          "3520:       rc = sqlite3PagerOpenSavepoint(pBt->pPager, p->db->nSavepoint);",
          "",
          "[Added Lines]",
          "3536:       rc = sqlite3PagerOpenSavepoint(pPager, p->db->nSavepoint);",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1629:   int tmout = db->busyTimeout;",
          "1630:   int delay, prior;",
          "1657:   assert( count>=0 );",
          "1658:   if( count < NDELAY ){",
          "1659:     delay = delays[count];",
          "",
          "[Removed Lines]",
          "1632: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "1633:   if( sqlite3OsFileControl(pFile,SQLITE_FCNTL_LOCK_TIMEOUT,&tmout)==SQLITE_OK ){",
          "1634:     if( count ){",
          "1645:       if( tmout ){",
          "1646:         tmout = 0;",
          "1647:         sqlite3OsFileControl(pFile, SQLITE_FCNTL_LOCK_TIMEOUT, &tmout);",
          "1648:         return 0;",
          "1649:       }",
          "1650:     }else{",
          "1651:       return 1;",
          "1652:     }",
          "1653:   }",
          "1654: #else",
          "1655:   UNUSED_PARAMETER(pFile);",
          "1656: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1674:   sqlite3 *db = (sqlite3 *)ptr;",
          "1675:   int tmout = ((sqlite3 *)ptr)->busyTimeout;",
          "1677:   if( (count+1)*1000 > tmout ){",
          "1678:     return 0;",
          "1679:   }",
          "",
          "[Removed Lines]",
          "1676:   UNUSED_PARAMETER(pFile);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1695:   int rc;",
          "1696:   if( p->xBusyHandler==0 || p->nBusy<0 ) return 0;",
          "1707:   if( rc==0 ){",
          "1708:     p->nBusy = -1;",
          "1709:   }else{",
          "",
          "[Removed Lines]",
          "1694: int sqlite3InvokeBusyHandler(BusyHandler *p, sqlite3_file *pFile){",
          "1697:   if( p->bExtraFileArg ){",
          "1700:     int (*xTra)(void*,int,sqlite3_file*);",
          "1701:     xTra = (int(*)(void*,int,sqlite3_file*))p->xBusyHandler;",
          "1702:     rc = xTra(p->pBusyArg, p->nBusy, pFile);",
          "1703:   }else{",
          "1705:     rc = p->xBusyHandler(p->pBusyArg, p->nBusy);",
          "1706:   }",
          "",
          "[Added Lines]",
          "1667: int sqlite3InvokeBusyHandler(BusyHandler *p){",
          "1670:   rc = p->xBusyHandler(p->pBusyArg, p->nBusy);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1728:   db->busyHandler.xBusyHandler = xBusy;",
          "1729:   db->busyHandler.pBusyArg = pArg;",
          "1730:   db->busyHandler.nBusy = 0;",
          "1732:   db->busyTimeout = 0;",
          "1733:   sqlite3_mutex_leave(db->mutex);",
          "1734:   return SQLITE_OK;",
          "",
          "[Removed Lines]",
          "1731:   db->busyHandler.bExtraFileArg = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1779:     sqlite3_busy_handler(db, (int(*)(void*,int))sqliteDefaultBusyCallback,",
          "1780:                              (void*)db);",
          "1781:     db->busyTimeout = ms;",
          "1783:   }else{",
          "1784:     sqlite3_busy_handler(db, 0, 0);",
          "1785:   }",
          "",
          "[Removed Lines]",
          "1782:     db->busyHandler.bExtraFileArg = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/os_unix.c||src/os_unix.c": [
          "File: src/os_unix.c -> src/os_unix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1567: ){",
          "1568:   int rc = osFcntl(h,F_SETLK,pLock);",
          "",
          "[Removed Lines]",
          "1569:   while( rc<0 && pFile->iBusyTimeout>0 ){",
          "",
          "[Added Lines]",
          "1568:   int tm = pFile->iBusyTimeout;",
          "1570:   while( rc<0 && tm>0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1575:     usleep(1000);",
          "1576:     rc = osFcntl(h,F_SETLK,pLock);",
          "1578:   }",
          "1579:   return rc;",
          "1580: }",
          "",
          "[Removed Lines]",
          "1577:     pFile->iBusyTimeout--;",
          "",
          "[Added Lines]",
          "1578:     tm--;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4316:   assert( n>=1 && n<=SQLITE_SHM_NLOCK );",
          "4318:   if( pShmNode->hShm>=0 ){",
          "4320:     f.l_type = lockType;",
          "4321:     f.l_whence = SEEK_SET;",
          "4322:     f.l_start = ofst;",
          "4323:     f.l_len = n;",
          "4326:   }",
          "",
          "[Removed Lines]",
          "4324:     rc = osSetPosixAdvisoryLock(pShmNode->hShm, &f, pFile);",
          "4325:     rc = (rc!=(-1)) ? SQLITE_OK : SQLITE_BUSY;",
          "",
          "[Added Lines]",
          "4320:     int res;",
          "4326:     res = osSetPosixAdvisoryLock(pShmNode->hShm, &f, pFile);",
          "4327:     if( res==-1 ){",
          "4328: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "4329:       rc = (pFile->iBusyTimeout ? SQLITE_BUSY_TIMEOUT : SQLITE_BUSY);",
          "4330: #else",
          "4331:       rc = SQLITE_BUSY;",
          "4332: #endif",
          "4333:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4819:   assert( pShmNode->hShm>=0 || pDbFd->pInode->bProcessLock==1 );",
          "4820:   assert( pShmNode->hShm<0 || pDbFd->pInode->bProcessLock==0 );",
          "4833: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "4838: #endif",
          "4840:   mask = (1<<(ofst+n)) - (1<<ofst);",
          "",
          "[Removed Lines]",
          "4834:   assert( pDbFd->iBusyTimeout==0",
          "4835:        || (flags & SQLITE_SHM_UNLOCK) || ofst==0",
          "4836:        || ((p->exclMask|p->sharedMask)&~((1<<ofst)-2))==0",
          "4837:   );",
          "",
          "[Added Lines]",
          "4841:   assert( (flags & SQLITE_SHM_UNLOCK) || pDbFd->iBusyTimeout==0 || (",
          "4843:       && (ofst!=1 || (p->exclMask|p->sharedMask)==0)",
          "4844:       && (ofst!=0 || (p->exclMask|p->sharedMask)<3)",
          "4845:       && (ofst<3  || (p->exclMask|p->sharedMask)<(1<<ofst))",
          "4846:   ));",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5705:   assert( pPg->pgno==1 );",
          "5707:   pPager = pPg->pPager;",
          "5709:   sqlite3PcacheRelease(pPg);",
          "5710:   pagerUnlockIfUnused(pPager);",
          "5711: }",
          "",
          "[Removed Lines]",
          "5708:   sqlite3PagerResetLockTimeout(pPager);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6998:   return pPager->fd;",
          "6999: }",
          "",
          "[Removed Lines]",
          "7001: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "7005: void sqlite3PagerResetLockTimeout(Pager *pPager){",
          "7006:   int x = 0;",
          "7007:   sqlite3OsFileControl(pPager->fd, SQLITE_FCNTL_LOCK_TIMEOUT, &x);",
          "7008: }",
          "7009: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7421:         pPager->walSyncFlags, pPager->pageSize, (u8 *)pPager->pTmpSpace,",
          "7422:         pnLog, pnCkpt",
          "7423:     );",
          "7425:   }",
          "7426:   return rc;",
          "7427: }",
          "",
          "[Removed Lines]",
          "7424:     sqlite3PagerResetLockTimeout(pPager);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7586:   return rc;",
          "7587: }",
          "7591: #ifdef SQLITE_ENABLE_SNAPSHOT",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7577: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "7584: int sqlite3PagerWalWriteLock(Pager *pPager, int bLock){",
          "7585:   int rc = SQLITE_OK;",
          "7586:   if( pagerUseWal(pPager) && pPager->exclusiveMode==0 ){",
          "7587:     rc = sqlite3WalWriteLock(pPager->pWal, bLock);",
          "7588:   }",
          "7589:   return rc;",
          "7590: }",
          "7596: void sqlite3PagerWalDb(Pager *pPager, sqlite3 *db){",
          "7597:   if( pagerUseWal(pPager) ){",
          "7598:     sqlite3WalDb(pPager->pWal, db);",
          "7599:   }",
          "7600: }",
          "7601: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7610:   int rc = SQLITE_OK;",
          "7611:   if( pPager->pWal ){",
          "7612:     sqlite3WalSnapshotOpen(pPager->pWal, pSnapshot);",
          "",
          "[Removed Lines]",
          "7609: int sqlite3PagerSnapshotOpen(Pager *pPager, sqlite3_snapshot *pSnapshot){",
          "",
          "[Added Lines]",
          "7621: int sqlite3PagerSnapshotOpen(",
          "7622:   Pager *pPager,",
          "7623:   sqlite3_snapshot *pSnapshot",
          "7624: ){",
          "",
          "---------------"
        ],
        "src/pager.h||src/pager.h": [
          "File: src/pager.h -> src/pager.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:   int sqlite3PagerOpenWal(Pager *pPager, int *pisOpen);",
          "178:   int sqlite3PagerCloseWal(Pager *pPager, sqlite3*);",
          "179: # ifdef SQLITE_ENABLE_SNAPSHOT",
          "182:   int sqlite3PagerSnapshotRecover(Pager *pPager);",
          "183:   int sqlite3PagerSnapshotCheck(Pager *pPager, sqlite3_snapshot *pSnapshot);",
          "184:   void sqlite3PagerSnapshotUnlock(Pager *pPager);",
          "185: # endif",
          "186: #endif",
          "188: #ifdef SQLITE_DIRECT_OVERFLOW_READ",
          "189:   int sqlite3PagerDirectReadOk(Pager *pPager, Pgno pgno);",
          "190: #endif",
          "",
          "[Removed Lines]",
          "180:   int sqlite3PagerSnapshotGet(Pager *pPager, sqlite3_snapshot **ppSnapshot);",
          "181:   int sqlite3PagerSnapshotOpen(Pager *pPager, sqlite3_snapshot *pSnapshot);",
          "",
          "[Added Lines]",
          "180:   int sqlite3PagerSnapshotGet(Pager*, sqlite3_snapshot **ppSnapshot);",
          "181:   int sqlite3PagerSnapshotOpen(Pager*, sqlite3_snapshot *pSnapshot);",
          "188: #if !defined(SQLITE_OMIT_WAL) && defined(SQLITE_ENABLE_SETLK_TIMEOUT)",
          "189:   int sqlite3PagerWalWriteLock(Pager*, int);",
          "190:   void sqlite3PagerWalDb(Pager*, sqlite3*);",
          "191: #else",
          "192: # define sqlite3PagerWalWriteLock(y,z) SQLITE_OK",
          "193: # define sqlite3PagerWalDb(x,y)",
          "194: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "210: void sqlite3PagerCacheStat(Pager *, int, int, int *);",
          "211: void sqlite3PagerClearCache(Pager*);",
          "212: int sqlite3SectorSize(sqlite3_file *);",
          "220: void sqlite3PagerTruncateImage(Pager*,Pgno);",
          "",
          "[Removed Lines]",
          "213: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "214: void sqlite3PagerResetLockTimeout(Pager *pPager);",
          "215: #else",
          "216: # define sqlite3PagerResetLockTimeout(X)",
          "217: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "508: #define SQLITE_LOCKED_VTAB             (SQLITE_LOCKED |  (2<<8))",
          "509: #define SQLITE_BUSY_RECOVERY           (SQLITE_BUSY   |  (1<<8))",
          "510: #define SQLITE_BUSY_SNAPSHOT           (SQLITE_BUSY   |  (2<<8))",
          "511: #define SQLITE_CANTOPEN_NOTEMPDIR      (SQLITE_CANTOPEN | (1<<8))",
          "512: #define SQLITE_CANTOPEN_ISDIR          (SQLITE_CANTOPEN | (2<<8))",
          "513: #define SQLITE_CANTOPEN_FULLPATH       (SQLITE_CANTOPEN | (3<<8))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "511: #define SQLITE_BUSY_TIMEOUT            (SQLITE_BUSY   |  (3<<8))",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4585: CollSeq *sqlite3GetCollSeq(Parse*, u8, CollSeq *, const char*);",
          "4586: char sqlite3AffinityType(const char*, Column*);",
          "4587: void sqlite3Analyze(Parse*, Token*, Token*);",
          "4589: int sqlite3FindDb(sqlite3*, Token*);",
          "4590: int sqlite3FindDbName(sqlite3 *, const char *);",
          "4591: int sqlite3AnalysisLoad(sqlite3*,int iDB);",
          "",
          "[Removed Lines]",
          "4588: int sqlite3InvokeBusyHandler(BusyHandler*, sqlite3_file*);",
          "",
          "[Added Lines]",
          "4587: int sqlite3InvokeBusyHandler(BusyHandler*);",
          "",
          "---------------"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "467: #ifdef SQLITE_ENABLE_SNAPSHOT",
          "469: #endif",
          "470: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "470: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "471:   sqlite3 *db;",
          "472: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "840:                         SQLITE_SHM_LOCK | SQLITE_SHM_SHARED);",
          "841:   WALTRACE((\"WAL%p: acquire SHARED-%s %s\\n\", pWal,",
          "842:             walLockName(lockIdx), rc ? \"failed\" : \"ok\"));",
          "844:   return rc;",
          "845: }",
          "846: static void walUnlockShared(Wal *pWal, int lockIdx){",
          "",
          "[Removed Lines]",
          "843:   VVA_ONLY( pWal->lockError = (u8)(rc!=SQLITE_OK && rc!=SQLITE_BUSY); )",
          "",
          "[Added Lines]",
          "846:   VVA_ONLY( pWal->lockError = (u8)(rc!=SQLITE_OK && (rc&0xFF)!=SQLITE_BUSY); )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "856:                         SQLITE_SHM_LOCK | SQLITE_SHM_EXCLUSIVE);",
          "857:   WALTRACE((\"WAL%p: acquire EXCLUSIVE-%s cnt=%d %s\\n\", pWal,",
          "858:             walLockName(lockIdx), n, rc ? \"failed\" : \"ok\"));",
          "860:   return rc;",
          "861: }",
          "862: static void walUnlockExclusive(Wal *pWal, int lockIdx, int n){",
          "",
          "[Removed Lines]",
          "859:   VVA_ONLY( pWal->lockError = (u8)(rc!=SQLITE_OK && rc!=SQLITE_BUSY); )",
          "",
          "[Added Lines]",
          "862:   VVA_ONLY( pWal->lockError = (u8)(rc!=SQLITE_OK && (rc&0xFF)!=SQLITE_BUSY); )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1128:   u32 aFrameCksum[2] = {0, 0};",
          "",
          "[Removed Lines]",
          "1131: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "1132:   int tmout = 0;",
          "1133:   sqlite3OsFileControl(pWal->pDbFd, SQLITE_FCNTL_LOCK_TIMEOUT, (void*)&tmout);",
          "1134: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1681:   return rc;",
          "1682: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1682: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "1689: static int walEnableBlocking(Wal *pWal){",
          "1690:   int res = 0;",
          "1691:   if( pWal->db ){",
          "1692:     int tmout = pWal->db->busyTimeout;",
          "1693:     if( tmout ){",
          "1694:       int rc;",
          "1695:       rc = sqlite3OsFileControl(",
          "1696:           pWal->pDbFd, SQLITE_FCNTL_LOCK_TIMEOUT, (void*)&tmout",
          "1697:       );",
          "1698:       res = (rc==SQLITE_OK);",
          "1699:     }",
          "1700:   }",
          "1701:   return res;",
          "1702: }",
          "1707: static void walDisableBlocking(Wal *pWal){",
          "1708:   int tmout = 0;",
          "1709:   sqlite3OsFileControl(pWal->pDbFd, SQLITE_FCNTL_LOCK_TIMEOUT, (void*)&tmout);",
          "1710: }",
          "1721: int sqlite3WalWriteLock(Wal *pWal, int bLock){",
          "1722:   int rc = SQLITE_OK;",
          "1723:   assert( pWal->readLock<0 || bLock==0 );",
          "1724:   if( bLock ){",
          "1725:     assert( pWal->db );",
          "1726:     if( walEnableBlocking(pWal) ){",
          "1727:       rc = walLockExclusive(pWal, WAL_WRITE_LOCK, 1);",
          "1728:       if( rc==SQLITE_OK ){",
          "1729:         pWal->writeLock = 1;",
          "1730:       }",
          "1731:       walDisableBlocking(pWal);",
          "1732:     }",
          "1733:   }else if( pWal->writeLock ){",
          "1734:     walUnlockExclusive(pWal, WAL_WRITE_LOCK, 1);",
          "1735:     pWal->writeLock = 0;",
          "1736:   }",
          "1737:   return rc;",
          "1738: }",
          "1743: void sqlite3WalDb(Wal *pWal, sqlite3 *db){",
          "1744:   pWal->db = db;",
          "1745: }",
          "1750: static int walLockWriter(Wal *pWal){",
          "1751:   int rc;",
          "1752:   walEnableBlocking(pWal);",
          "1753:   rc = walLockExclusive(pWal, WAL_WRITE_LOCK, 1);",
          "1754:   walDisableBlocking(pWal);",
          "1755:   return rc;",
          "1756: }",
          "1757: #else",
          "1758: # define walEnableBlocking(x) 0",
          "1759: # define walDisableBlocking(x)",
          "1760: # define walLockWriter(pWal) walLockExclusive((pWal), WAL_WRITE_LOCK, 1)",
          "1761: # define sqlite3WalDb(pWal, db)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1698:   do {",
          "1699:     rc = walLockExclusive(pWal, lockIdx, n);",
          "1700:   }while( xBusy && rc==SQLITE_BUSY && xBusy(pBusyArg) );",
          "1701:   return rc;",
          "1702: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1782: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "1783:   if( rc==SQLITE_BUSY_TIMEOUT ){",
          "1784:     walDisableBlocking(pWal);",
          "1785:     rc = SQLITE_BUSY;",
          "1786:   }",
          "1787: #endif",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2181:   if( badHdr ){",
          "2182:     if( pWal->bShmUnreliable==0 && (pWal->readOnly & WAL_SHM_RDONLY) ){",
          "2183:       if( SQLITE_OK==(rc = walLockShared(pWal, WAL_WRITE_LOCK)) ){",
          "2184:         walUnlockShared(pWal, WAL_WRITE_LOCK);",
          "2185:         rc = SQLITE_READONLY_RECOVERY;",
          "2186:       }",
          "2198:         }",
          "2199:       }",
          "2202:     }",
          "2203:   }",
          "",
          "[Removed Lines]",
          "2180:   assert( badHdr==0 || pWal->writeLock==0 );",
          "2187:     }else if( SQLITE_OK==(rc = walLockExclusive(pWal, WAL_WRITE_LOCK, 1)) ){",
          "2188:       pWal->writeLock = 1;",
          "2189:       if( SQLITE_OK==(rc = walIndexPage(pWal, 0, &page0)) ){",
          "2190:         badHdr = walIndexTryHdr(pWal, pChanged);",
          "2191:         if( badHdr ){",
          "2196:           rc = walIndexRecover(pWal);",
          "2200:       pWal->writeLock = 0;",
          "2201:       walUnlockExclusive(pWal, WAL_WRITE_LOCK, 1);",
          "",
          "[Added Lines]",
          "2273:     }else{",
          "2274:       int bWriteLock = pWal->writeLock;",
          "2275:       if( bWriteLock || SQLITE_OK==(rc = walLockWriter(pWal)) ){",
          "2276:         pWal->writeLock = 1;",
          "2277:         if( SQLITE_OK==(rc = walIndexPage(pWal, 0, &page0)) ){",
          "2278:           badHdr = walIndexTryHdr(pWal, pChanged);",
          "2279:           if( badHdr ){",
          "2284:             rc = walIndexRecover(pWal);",
          "2286:           }",
          "2287:         }",
          "2288:         if( bWriteLock==0 ){",
          "2289:           pWal->writeLock = 0;",
          "2290:           walUnlockExclusive(pWal, WAL_WRITE_LOCK, 1);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2750: int sqlite3WalBeginReadTransaction(Wal *pWal, int *pChanged){",
          "2757: #ifdef SQLITE_ENABLE_SNAPSHOT",
          "2758:   int bChanged = 0;",
          "2759:   WalIndexHdr *pSnapshot = pWal->pSnapshot;",
          "2769: #endif",
          "2771:   do{",
          "",
          "[Removed Lines]",
          "2753: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "2754:   int tmout = 0;",
          "2755: #endif",
          "2760:   if( pSnapshot && memcmp(pSnapshot, &pWal->hdr, sizeof(WalIndexHdr))!=0 ){",
          "2761:     bChanged = 1;",
          "2762:   }",
          "2763: #endif",
          "2765: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "2768:   sqlite3OsFileControl(pWal->pDbFd, SQLITE_FCNTL_LOCK_TIMEOUT, (void*)&tmout);",
          "",
          "[Added Lines]",
          "2845:   assert( pWal->ckptLock==0 );",
          "2850:   if( pSnapshot ){",
          "2851:     if( memcmp(pSnapshot, &pWal->hdr, sizeof(WalIndexHdr))!=0 ){",
          "2852:       bChanged = 1;",
          "2853:     }",
          "2863:     (void)walEnableBlocking(pWal);",
          "2864:     rc = walLockShared(pWal, WAL_CKPT_LOCK);",
          "2865:     walDisableBlocking(pWal);",
          "2867:     if( rc!=SQLITE_OK ){",
          "2868:       return rc;",
          "2869:     }",
          "2870:     pWal->ckptLock = 1;",
          "2871:   }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2776:   testcase( rc==SQLITE_PROTOCOL );",
          "2777:   testcase( rc==SQLITE_OK );",
          "2789: #ifdef SQLITE_ENABLE_SNAPSHOT",
          "2790:   if( rc==SQLITE_OK ){",
          "2791:     if( pSnapshot && memcmp(pSnapshot, &pWal->hdr, sizeof(WalIndexHdr))!=0 ){",
          "",
          "[Removed Lines]",
          "2779: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "2784:   if( rc==SQLITE_OK ){",
          "2785:     sqlite3OsFileControl(pWal->pDbFd, SQLITE_FCNTL_LOCK_TIMEOUT, (void*)&tmout);",
          "2786:   }",
          "2787: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2807:       assert( pWal->readLock>0 || pWal->hdr.mxFrame==0 );",
          "2808:       assert( pInfo->aReadMark[pWal->readLock]<=pSnapshot->mxFrame );",
          "2844:       }",
          "2847:       if( rc!=SQLITE_OK ){",
          "2848:         sqlite3WalEndReadTransaction(pWal);",
          "2849:       }",
          "2850:     }",
          "2851:   }",
          "2852: #endif",
          "2853:   return rc;",
          "2854: }",
          "",
          "[Removed Lines]",
          "2822:       rc = walLockShared(pWal, WAL_CKPT_LOCK);",
          "2824:       if( rc==SQLITE_OK ){",
          "2831:         if( !memcmp(pSnapshot->aSalt, pWal->hdr.aSalt, sizeof(pWal->hdr.aSalt))",
          "2832:          && pSnapshot->mxFrame>=pInfo->nBackfillAttempted",
          "2833:         ){",
          "2834:           assert( pWal->readLock>0 );",
          "2835:           memcpy(&pWal->hdr, pSnapshot, sizeof(WalIndexHdr));",
          "2837:         }else{",
          "2838:           rc = SQLITE_ERROR_SNAPSHOT;",
          "2839:         }",
          "2842:         walUnlockShared(pWal, WAL_CKPT_LOCK);",
          "2843:         pWal->minFrame = 1;",
          "",
          "[Added Lines]",
          "2909:       if( !memcmp(pSnapshot->aSalt, pWal->hdr.aSalt, sizeof(pWal->hdr.aSalt))",
          "2910:        && pSnapshot->mxFrame>=pInfo->nBackfillAttempted",
          "2911:       ){",
          "2912:         assert( pWal->readLock>0 );",
          "2913:         memcpy(&pWal->hdr, pSnapshot, sizeof(WalIndexHdr));",
          "2915:       }else{",
          "2916:         rc = SQLITE_ERROR_SNAPSHOT;",
          "2925:       pWal->minFrame = 1;",
          "2934:   if( pWal->ckptLock ){",
          "2935:     assert( pSnapshot );",
          "2936:     walUnlockShared(pWal, WAL_CKPT_LOCK);",
          "2937:     pWal->ckptLock = 0;",
          "2938:   }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3019: int sqlite3WalBeginWriteTransaction(Wal *pWal){",
          "3020:   int rc;",
          "3024:   assert( pWal->readLock>=0 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3109: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "3113:   if( pWal->writeLock ){",
          "3114:     assert( !memcmp(&pWal->hdr,(void *)walIndexHdr(pWal),sizeof(WalIndexHdr)) );",
          "3115:     return SQLITE_OK;",
          "3116:   }",
          "3117: #endif",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3595:   if( pWal->readOnly ) return SQLITE_READONLY;",
          "3596:   WALTRACE((\"WAL%p: checkpoint begins\\n\", pWal));",
          "3600:   rc = walLockExclusive(pWal, WAL_CKPT_LOCK, 1);",
          "3631:     }",
          "3632:   }",
          "3635:   if( rc==SQLITE_OK ){",
          "3636:     rc = walIndexReadHdr(pWal, &isChanged);",
          "3637:     if( isChanged && pWal->pDbFd->pMethods->iVersion>=3 ){",
          "3638:       sqlite3OsUnfetch(pWal->pDbFd, 0, 0);",
          "3639:     }",
          "",
          "[Removed Lines]",
          "3601:   if( rc ){",
          "3608:     testcase( rc==SQLITE_BUSY );",
          "3609:     testcase( xBusy!=0 );",
          "3610:     return rc;",
          "3611:   }",
          "3612:   pWal->ckptLock = 1;",
          "3623:   if( eMode!=SQLITE_CHECKPOINT_PASSIVE ){",
          "3624:     rc = walBusyLock(pWal, xBusy, pBusyArg, WAL_WRITE_LOCK, 1);",
          "3625:     if( rc==SQLITE_OK ){",
          "3626:       pWal->writeLock = 1;",
          "3627:     }else if( rc==SQLITE_BUSY ){",
          "3628:       eMode2 = SQLITE_CHECKPOINT_PASSIVE;",
          "3629:       xBusy2 = 0;",
          "3630:       rc = SQLITE_OK;",
          "",
          "[Added Lines]",
          "3697:   sqlite3WalDb(pWal, db);",
          "3698:   (void)walEnableBlocking(pWal);",
          "3709:   testcase( rc==SQLITE_BUSY );",
          "3710:   testcase( rc!=SQLITE_OK && xBusy2!=0 );",
          "3711:   if( rc==SQLITE_OK ){",
          "3712:     pWal->ckptLock = 1;",
          "3723:     if( eMode!=SQLITE_CHECKPOINT_PASSIVE ){",
          "3724:       rc = walBusyLock(pWal, xBusy2, pBusyArg, WAL_WRITE_LOCK, 1);",
          "3725:       if( rc==SQLITE_OK ){",
          "3726:         pWal->writeLock = 1;",
          "3727:       }else if( rc==SQLITE_BUSY ){",
          "3728:         eMode2 = SQLITE_CHECKPOINT_PASSIVE;",
          "3729:         xBusy2 = 0;",
          "3730:         rc = SQLITE_OK;",
          "3731:       }",
          "3738:     walDisableBlocking(pWal);",
          "3740:     (void)walEnableBlocking(pWal);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3665:     memset(&pWal->hdr, 0, sizeof(WalIndexHdr));",
          "3666:   }",
          "3669:   sqlite3WalEndWriteTransaction(pWal);",
          "3672:   WALTRACE((\"WAL%p: checkpoint %s\\n\", pWal, rc ? \"failed\" : \"ok\"));",
          "3673:   return (rc==SQLITE_OK && eMode!=eMode2 ? SQLITE_BUSY : rc);",
          "3674: }",
          "",
          "[Removed Lines]",
          "3670:   walUnlockExclusive(pWal, WAL_CKPT_LOCK, 1);",
          "3671:   pWal->ckptLock = 0;",
          "",
          "[Added Lines]",
          "3772:   walDisableBlocking(pWal);",
          "3773:   sqlite3WalDb(pWal, 0);",
          "3777:   if( pWal->ckptLock ){",
          "3778:     walUnlockExclusive(pWal, WAL_CKPT_LOCK, 1);",
          "3779:     pWal->ckptLock = 0;",
          "3780:   }",
          "3782: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "3783:   if( rc==SQLITE_BUSY_TIMEOUT ) rc = SQLITE_BUSY;",
          "3784: #endif",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3790:   pWal->pSnapshot = (WalIndexHdr*)pSnapshot;",
          "3791: }",
          "",
          "[Removed Lines]",
          "3789: void sqlite3WalSnapshotOpen(Wal *pWal, sqlite3_snapshot *pSnapshot){",
          "",
          "[Added Lines]",
          "3901: void sqlite3WalSnapshotOpen(",
          "3902:   Wal *pWal,",
          "3903:   sqlite3_snapshot *pSnapshot",
          "3904: ){",
          "",
          "---------------"
        ],
        "src/wal.h||src/wal.h": [
          "File: src/wal.h -> src/wal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "147: sqlite3_file *sqlite3WalFile(Wal *pWal);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "150: int sqlite3WalWriteLock(Wal *pWal, int bLock);",
          "151: void sqlite3WalDb(Wal *pWal, sqlite3 *db);",
          "152: #endif",
          "",
          "---------------"
        ],
        "test/wal.test||test/wal.test": [
          "File: test/wal.test -> test/wal.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:   [lindex $args 0] eval { PRAGMA journal_mode = wal }",
          "44:   [lindex $args 0] eval { PRAGMA synchronous = normal }",
          "45:   [lindex $args 0] function blob blob",
          "46: }",
          "48: proc log_deleted {logfile} {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:   db timeout 1000",
          "",
          "---------------"
        ],
        "test/walsetlk.test||test/walsetlk.test": [
          "File: test/walsetlk.test -> test/walsetlk.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2020 May 06",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "13: set testdir [file dirname $argv0]",
          "14: source $testdir/tester.tcl",
          "15: source $testdir/lock_common.tcl",
          "16: set testprefix walsetlk",
          "18: ifcapable !wal {finish_test ; return }",
          "19: db timeout 1000",
          "21: #-------------------------------------------------------------------------",
          "22: # 1.*: Test that nothing goes wrong if recovery is forced while opening",
          "23: #      a write transaction or performing a checkpoint with blocking locks.",
          "24: #",
          "26: do_execsql_test 1.0 {",
          "27:   CREATE TABLE t1(x, y);",
          "28:   PRAGMA journal_mode = wal;",
          "29:   INSERT INTO t1 VALUES(1, 2);",
          "30:   INSERT INTO t1 VALUES(3, 4);",
          "31:   INSERT INTO t1 VALUES(5, 6);",
          "32:   INSERT INTO t1 VALUES(7, 8);",
          "33: } {wal}",
          "35: sqlite3 db2 test.db",
          "36: db2 timeout 1000",
          "38: do_execsql_test -db db2 1.1 {",
          "39:   SELECT * FROM t1",
          "40: } {1 2 3 4 5 6 7 8}",
          "42: set fd [open test.db-shm r+]",
          "43: puts $fd \"blahblahblahblah\"",
          "44: flush $fd",
          "46: do_execsql_test 1.2 {",
          "47:   BEGIN;",
          "48:     INSERT INTO t1 VALUES(9, 10);",
          "49: }",
          "51: do_execsql_test -db db2 1.3 {",
          "52:   SELECT * FROM t1",
          "53: } {1 2 3 4 5 6 7 8}",
          "55: do_test 1.4 {",
          "56:   list [catch {db2 eval { BEGIN EXCLUSIVE }} msg] $msg",
          "57: } {1 {database is locked}}",
          "59: do_execsql_test 1.5 { COMMIT }",
          "60: do_execsql_test -db db2 1.6 {",
          "61:   SELECT * FROM t1",
          "62: } {1 2 3 4 5 6 7 8 9 10}",
          "64: puts $fd \"blahblahblahblah\"",
          "65: flush $fd",
          "67: do_execsql_test -db db2 1.7 {",
          "68:   PRAGMA wal_checkpoint = TRUNCATE",
          "69: } {0 0 0}",
          "71: do_test 1.8 {",
          "72:   file size test.db-wal",
          "73: } 0",
          "75: close $fd",
          "76: db close",
          "77: db2 close",
          "78: #-------------------------------------------------------------------------",
          "80: do_multiclient_test tn {",
          "81:   do_test 2.$tn.1 {",
          "82:     sql1 {",
          "83:       PRAGMA journal_mode = wal;",
          "84:       CREATE TABLE t1(s, v);",
          "85:       INSERT INTO t1 VALUES(1, 2);",
          "86:       INSERT INTO t1 VALUES(3, 4);",
          "87:       INSERT INTO t1 VALUES(5, 6);",
          "88:     }",
          "89:     code1 { db timeout 2000 }",
          "90:   } {}",
          "92:   do_test 2.$tn.2 {",
          "93:     sql2 {",
          "94:       BEGIN;",
          "95:         INSERT INTO t1 VALUES(7, 8);",
          "96:     }",
          "97:   } {}",
          "99:   do_test 2.$tn.3 {",
          "100:     set us [lindex [time { catch {db eval \"BEGIN EXCLUSIVE\"} }] 0]",
          "101:     expr $us>1000000 && $us<4000000",
          "102:   } {1}",
          "104:   do_test 2.$tn.4 {",
          "105:     sql2 { COMMIT }",
          "106:     sql1 { SELECT * FROM t1 }",
          "107:   } {1 2 3 4 5 6 7 8}",
          "109:   do_test 2.$tn.5 {",
          "110:     sql2 {",
          "111:       BEGIN;",
          "112:         INSERT INTO t1 VALUES(9, 10);",
          "113:     }",
          "114:   } {}",
          "116:   do_test 2.$tn.6 {",
          "117:     set us [lindex [time { catch {db eval \"PRAGMA wal_checkpoint=RESTART\"} }] 0]",
          "118:     expr $us>1000000 && $us<4000000",
          "119:   } {1}",
          "121:   do_test 2.$tn.7 {",
          "122:     sql2 {",
          "123:       COMMIT;",
          "124:       BEGIN;",
          "125:         SELECT * FROM t1;",
          "126:     }",
          "127:   } {1 2 3 4 5 6 7 8 9 10}",
          "129:   do_test 2.$tn.8 {",
          "130:     set us [lindex [time { catch {db eval \"PRAGMA wal_checkpoint=RESTART\"} }] 0]",
          "131:     expr $us>1000000 && $us<4000000",
          "132:   } {1}",
          "134:   do_test 2.$tn.9 {",
          "135:     sql3 {",
          "136:       INSERT INTO t1 VALUES(11, 12);",
          "137:     }",
          "138:     sql2 {",
          "139:       COMMIT;",
          "140:       BEGIN;",
          "141:         SELECT * FROM t1;",
          "142:     }",
          "143:     sql3 {",
          "144:       INSERT INTO t1 VALUES(13, 14);",
          "145:     }",
          "146:   } {}",
          "148:   do_test 2.$tn.10 {",
          "149:     set us [lindex [time { catch {db eval \"PRAGMA wal_checkpoint=RESTART\"} }] 0]",
          "150:     expr $us>1000000 && $us<4000000",
          "151:   } {1}",
          "153:   do_test 2.$tn.11 {",
          "154:     sql3 {",
          "155:       BEGIN;",
          "156:         SELECT * FROM t1;",
          "157:     }",
          "158:     sql1 { INSERT INTO t1 VALUES(15, 16); }",
          "159:   } {}",
          "161:   do_test 2.$tn.12 {",
          "162:     set us [lindex [time { catch {db eval \"PRAGMA wal_checkpoint=RESTART\"} }] 0]",
          "163:     expr $us>1000000 && $us<4000000",
          "164:   } {1}",
          "166:   do_test 2.$tn.13 {",
          "167:     sql2 {",
          "168:       COMMIT;",
          "169:       BEGIN;",
          "170:         SELECT * FROM t1;",
          "171:     }",
          "172:     sql1 { INSERT INTO t1 VALUES(17, 18); }",
          "173:   } {}",
          "175:   do_test 2.$tn.14 {",
          "176:     set us [lindex [time { catch {db eval \"PRAGMA wal_checkpoint=RESTART\"} }] 0]",
          "177:     expr $us>1000000 && $us<4000000",
          "178:   } {1}",
          "180: }",
          "182: #-------------------------------------------------------------------------",
          "183: reset_db",
          "184: sqlite3 db2 test.db",
          "185: db2 timeout 1000",
          "186: do_execsql_test 3.0 {",
          "187:   PRAGMA journal_mode = wal;",
          "188:   CREATE TABLE x1(x, y);",
          "189:   BEGIN;",
          "190:     INSERT INTO x1 VALUES(1, 2);",
          "191: } {wal}",
          "193: do_test 3.1 {",
          "194:   list [catch { db2 eval {BEGIN EXCLUSIVE} } msg] $msg",
          "195: } {1 {database is locked}}",
          "197: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "97ccc1bd1150177ead9129d322241c0e1d71a665",
      "candidate_info": {
        "commit_hash": "97ccc1bd1150177ead9129d322241c0e1d71a665",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/97ccc1bd1150177ead9129d322241c0e1d71a665",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/os_unix.c",
          "src/sqlite.h.in",
          "src/wal.c"
        ],
        "message": "Modifications to the way blocking locks are used in SQLITE_ENABLE_SETLK_TIMEOUT builds so that multiple processes or threads may not deadlock when operating on a single database.\n\nFossilOrigin-Name: c516027d5fd876b7d0bf566435667d554db29ded30ad6fc1165caa4a93d015a0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/os_unix.c||src/os_unix.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/wal.c||src/wal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 27936e6884e77093533719c7955a17f051cfb359872e51a6d1481152e6256443",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1569: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "1570:   if( sqlite3OsFileControl(pFile,SQLITE_FCNTL_LOCK_TIMEOUT,&tmout)==SQLITE_OK ){",
          "1571:     if( count ){",
          "1575:     }else{",
          "1576:       return 1;",
          "1577:     }",
          "",
          "[Removed Lines]",
          "1572:       tmout = 0;",
          "1573:       sqlite3OsFileControl(pFile, SQLITE_FCNTL_LOCK_TIMEOUT, &tmout);",
          "1574:       return 0;",
          "",
          "[Added Lines]",
          "1582:       if( tmout ){",
          "1583:         tmout = 0;",
          "1584:         sqlite3OsFileControl(pFile, SQLITE_FCNTL_LOCK_TIMEOUT, &tmout);",
          "1585:         return 0;",
          "1586:       }",
          "",
          "---------------"
        ],
        "src/os_unix.c||src/os_unix.c": [
          "File: src/os_unix.c -> src/os_unix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3995:     }",
          "3996: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "3997:     case SQLITE_FCNTL_LOCK_TIMEOUT: {",
          "3998:       pFile->iBusyTimeout = *(int*)pArg;",
          "3999:       return SQLITE_OK;",
          "4000:     }",
          "4001: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3998:       int iOld = pFile->iBusyTimeout;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4817:   assert( pShmNode->hShm>=0 || pDbFd->pInode->bProcessLock==1 );",
          "4818:   assert( pShmNode->hShm<0 || pDbFd->pInode->bProcessLock==0 );",
          "4820:   mask = (1<<(ofst+n)) - (1<<ofst);",
          "4821:   assert( n>1 || mask==(1<<ofst) );",
          "4822:   sqlite3_mutex_enter(pShmNode->pShmMutex);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4833: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "4834:   assert( pDbFd->iBusyTimeout==0",
          "4835:        || (flags & SQLITE_SHM_UNLOCK) || ofst==0",
          "4836:        || ((p->exclMask|p->sharedMask)&~((1<<ofst)-2))==0",
          "4837:   );",
          "4838: #endif",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1140:   u32 aFrameCksum[2] = {0, 0};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1143: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "1144:   int tmout = 0;",
          "1145:   sqlite3OsFileControl(pWal->pDbFd, SQLITE_FCNTL_LOCK_TIMEOUT, (void*)&tmout);",
          "1146: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2758: int sqlite3WalBeginReadTransaction(Wal *pWal, int *pChanged){",
          "2762: #ifdef SQLITE_ENABLE_SNAPSHOT",
          "2763:   int bChanged = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2766: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "2767:   int tmout = 0;",
          "2768: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2767:   }",
          "2768: #endif",
          "2770:   do{",
          "2771:     rc = walTryBeginRead(pWal, pChanged, 0, ++cnt);",
          "2772:   }while( rc==WAL_RETRY );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2778: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "2781:   sqlite3OsFileControl(pWal->pDbFd, SQLITE_FCNTL_LOCK_TIMEOUT, (void*)&tmout);",
          "2782: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2775:   testcase( rc==SQLITE_PROTOCOL );",
          "2776:   testcase( rc==SQLITE_OK );",
          "2778: #ifdef SQLITE_ENABLE_SNAPSHOT",
          "2779:   if( rc==SQLITE_OK ){",
          "2780:     if( pSnapshot && memcmp(pSnapshot, &pWal->hdr, sizeof(WalIndexHdr))!=0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2792: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "2797:   if( rc==SQLITE_OK ){",
          "2798:     sqlite3OsFileControl(pWal->pDbFd, SQLITE_FCNTL_LOCK_TIMEOUT, (void*)&tmout);",
          "2799:   }",
          "2800: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9e10f9ab054cfad50f5ce41c715d27017e981b75",
      "candidate_info": {
        "commit_hash": "9e10f9ab054cfad50f5ce41c715d27017e981b75",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9e10f9ab054cfad50f5ce41c715d27017e981b75",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/distinct.test"
        ],
        "message": "Ensure the SF_Aggregate flag on a SELECT statement is set if a DISTINCT is transformed to a GROUP BY. Ticket [9c944882].\n\nFossilOrigin-Name: 1409758f72c0206cc48f9f7e789382472949523b7056ea46f8dcb93fd3ea60c6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/distinct.test||test/distinct.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 46f8ef70fb8b3ae00cc081b280f3dff38b1d0f1b52a8f4477ec89dec32e4d813",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6104:   ){",
          "6105:     p->selFlags &= ~SF_Distinct;",
          "6106:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6107:     p->selFlags |= SF_Aggregate;",
          "",
          "---------------"
        ],
        "test/distinct.test||test/distinct.test": [
          "File: test/distinct.test -> test/distinct.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "268:     FROM sqlite_master;",
          "269: } {mmm}",
          "272: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "271: #-------------------------------------------------------------------------",
          "272: # Ticket [9c944882]",
          "273: #",
          "274: reset_db",
          "275: do_execsql_test 7.0 {",
          "276:   CREATE TABLE t1(a INTEGER PRIMARY KEY);",
          "277:   CREATE TABLE t3(a INTEGER PRIMARY KEY);",
          "279:   CREATE TABLE t4(x);",
          "280:   CREATE TABLE t5(y);",
          "282:   INSERT INTO t5 VALUES(1), (2), (2);",
          "283:   INSERT INTO t1 VALUES(2);",
          "284:   INSERT INTO t3 VALUES(2);",
          "285:   INSERT INTO t4 VALUES(2);",
          "286: }",
          "288: do_execsql_test 7.1 {",
          "289:   WITH t2(b) AS (",
          "290:     SELECT DISTINCT y FROM t5 ORDER BY y",
          "291:   )",
          "292:   SELECT * FROM",
          "293:     t4 CROSS JOIN t3 CROSS JOIN t1",
          "294:   WHERE (t1.a=t3.a) AND (SELECT count(*) FROM t2 AS y WHERE t4.x!='abc')=t1.a",
          "295: } {2 2 2}",
          "",
          "---------------"
        ]
      }
    }
  ]
}