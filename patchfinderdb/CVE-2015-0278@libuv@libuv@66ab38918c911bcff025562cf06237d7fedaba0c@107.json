{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "90874cc4de3a2f04a636c44da4abd471ede2fa17",
      "candidate_info": {
        "commit_hash": "90874cc4de3a2f04a636c44da4abd471ede2fa17",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/90874cc4de3a2f04a636c44da4abd471ede2fa17",
        "files": [
          "ChangeLog",
          "src/version.c"
        ],
        "message": "Now working on v0.11.12",
        "before_after_code_files": [
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #define UV_VERSION_MAJOR 0",
          "33: #define UV_VERSION_MINOR 11",
          "38: #define UV_VERSION  ((UV_VERSION_MAJOR << 16) | \\",
          "",
          "[Removed Lines]",
          "34: #define UV_VERSION_PATCH 11",
          "35: #define UV_VERSION_IS_RELEASE 1",
          "",
          "[Added Lines]",
          "34: #define UV_VERSION_PATCH 12",
          "35: #define UV_VERSION_IS_RELEASE 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e3a657c662a67997e7131f48fff386fa90a9fae9",
      "candidate_info": {
        "commit_hash": "e3a657c662a67997e7131f48fff386fa90a9fae9",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/e3a657c662a67997e7131f48fff386fa90a9fae9",
        "files": [
          "include/uv.h",
          "src/unix/darwin.c",
          "src/unix/freebsd.c",
          "src/unix/linux-core.c",
          "src/unix/netbsd.c",
          "src/unix/openbsd.c",
          "src/unix/sunos.c",
          "src/win/util.c",
          "test/test-platform-output.c"
        ],
        "message": "unix, windows: add MAC to uv_interface_addresses()\n\nMake uv_interface_addresses() return the MAC address as a 48 bits\nbinary value in the phys_addr field of the uv_interface_address_t\nstruct.",
        "before_after_code_files": [
          "include/uv.h||include/uv.h",
          "src/unix/darwin.c||src/unix/darwin.c",
          "src/unix/freebsd.c||src/unix/freebsd.c",
          "src/unix/linux-core.c||src/unix/linux-core.c",
          "src/unix/netbsd.c||src/unix/netbsd.c",
          "src/unix/openbsd.c||src/unix/openbsd.c",
          "src/unix/sunos.c||src/unix/sunos.c",
          "src/win/util.c||src/win/util.c",
          "test/test-platform-output.c||test/test-platform-output.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1527: struct uv_interface_address_s {",
          "1528:   char* name;",
          "1529:   int is_internal;",
          "1530:   union {",
          "1531:     struct sockaddr_in address4;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1529:   char phys_addr[6];",
          "",
          "---------------"
        ],
        "src/unix/darwin.c||src/unix/darwin.c": [
          "File: src/unix/darwin.c -> src/unix/darwin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include <ifaddrs.h>",
          "29: #include <net/if.h>",
          "31: #include <CoreFoundation/CFRunLoop.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: #include <net/if_dl.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "355: int uv_interface_addresses(uv_interface_address_t** addresses, int* count) {",
          "356:   struct ifaddrs *addrs, *ent;",
          "357:   uv_interface_address_t* address;",
          "359:   if (getifaddrs(&addrs))",
          "360:     return -errno;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "359:   int i;",
          "360:   struct sockaddr_dl *sa_addr;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "365:   for (ent = addrs; ent != NULL; ent = ent->ifa_next) {",
          "367:         (ent->ifa_addr == NULL) ||",
          "368:         (ent->ifa_addr->sa_family == AF_LINK)) {",
          "369:       continue;",
          "",
          "[Removed Lines]",
          "366:     if (!(ent->ifa_flags & IFF_UP && ent->ifa_flags & IFF_RUNNING) ||",
          "",
          "[Added Lines]",
          "369:     if (!((ent->ifa_flags & IFF_UP) && (ent->ifa_flags & IFF_RUNNING)) ||",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "379:   address = *addresses;",
          "381:   for (ent = addrs; ent != NULL; ent = ent->ifa_next) {",
          "383:       continue;",
          "387:       continue;",
          "395:       continue;",
          "398:     address->name = strdup(ent->ifa_name);",
          "",
          "[Removed Lines]",
          "382:     if (!(ent->ifa_flags & IFF_UP && ent->ifa_flags & IFF_RUNNING)) {",
          "384:     }",
          "386:     if (ent->ifa_addr == NULL) {",
          "388:     }",
          "394:     if (ent->ifa_addr->sa_family == AF_LINK) {",
          "396:     }",
          "",
          "[Added Lines]",
          "385:     if (!((ent->ifa_flags & IFF_UP) && (ent->ifa_flags & IFF_RUNNING)))",
          "388:     if (ent->ifa_addr == NULL)",
          "395:     if (ent->ifa_addr->sa_family == AF_LINK)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "409:       address->netmask.netmask4 = *((struct sockaddr_in*) ent->ifa_netmask);",
          "410:     }",
          "414:     address++;",
          "415:   }",
          "417:   freeifaddrs(addrs);",
          "419:   return 0;",
          "",
          "[Removed Lines]",
          "412:     address->is_internal = ent->ifa_flags & IFF_LOOPBACK ? 1 : 0;",
          "",
          "[Added Lines]",
          "412:     address->is_internal = !!(ent->ifa_flags & IFF_LOOPBACK);",
          "418:   for (ent = addrs; ent != NULL; ent = ent->ifa_next) {",
          "419:     if (!((ent->ifa_flags & IFF_UP) && (ent->ifa_flags & IFF_RUNNING)) ||",
          "420:         (ent->ifa_addr == NULL) ||",
          "421:         (ent->ifa_addr->sa_family != AF_LINK)) {",
          "422:       continue;",
          "423:     }",
          "425:     address = *addresses;",
          "427:     for (i = 0; i < (*count); i++) {",
          "428:       if (strcmp(address->name, ent->ifa_name) == 0) {",
          "429:         sa_addr = (struct sockaddr_dl*)(ent->ifa_addr);",
          "430:         memcpy(address->phys_addr, LLADDR(sa_addr), sizeof(address->phys_addr));",
          "431:       }",
          "432:       address++;",
          "433:     }",
          "434:   }",
          "",
          "---------------"
        ],
        "src/unix/freebsd.c||src/unix/freebsd.c": [
          "File: src/unix/freebsd.c -> src/unix/freebsd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include <string.h>",
          "26: #include <errno.h>",
          "28: #include <kvm.h>",
          "29: #include <paths.h>",
          "30: #include <sys/user.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #include <ifaddrs.h>",
          "29: #include <net/if.h>",
          "30: #include <net/if_dl.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "324: int uv_interface_addresses(uv_interface_address_t** addresses, int* count) {",
          "328:   return 0;",
          "329: }",
          "332: void uv_free_interface_addresses(uv_interface_address_t* addresses,",
          "333:   int count) {",
          "334: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329:   struct ifaddrs *addrs, *ent;",
          "330:   uv_interface_address_t* address;",
          "331:   int i;",
          "332:   struct sockaddr_dl *sa_addr;",
          "334:   if (getifaddrs(&addrs))",
          "335:     return -errno;",
          "340:   for (ent = addrs; ent != NULL; ent = ent->ifa_next) {",
          "341:     if (!((ent->ifa_flags & IFF_UP) && (ent->ifa_flags & IFF_RUNNING)) ||",
          "342:         (ent->ifa_addr == NULL) ||",
          "343:         (ent->ifa_addr->sa_family == AF_LINK)) {",
          "344:       continue;",
          "345:     }",
          "347:     (*count)++;",
          "348:   }",
          "351:   if (!(*addresses))",
          "352:     return -ENOMEM;",
          "354:   address = *addresses;",
          "356:   for (ent = addrs; ent != NULL; ent = ent->ifa_next) {",
          "357:     if (!((ent->ifa_flags & IFF_UP) && (ent->ifa_flags & IFF_RUNNING)))",
          "358:       continue;",
          "360:     if (ent->ifa_addr == NULL)",
          "361:       continue;",
          "367:     if (ent->ifa_addr->sa_family == AF_LINK)",
          "368:       continue;",
          "370:     address->name = strdup(ent->ifa_name);",
          "372:     if (ent->ifa_addr->sa_family == AF_INET6) {",
          "373:       address->address.address6 = *((struct sockaddr_in6*) ent->ifa_addr);",
          "374:     } else {",
          "375:       address->address.address4 = *((struct sockaddr_in*) ent->ifa_addr);",
          "376:     }",
          "378:     if (ent->ifa_netmask->sa_family == AF_INET6) {",
          "379:       address->netmask.netmask6 = *((struct sockaddr_in6*) ent->ifa_netmask);",
          "380:     } else {",
          "381:       address->netmask.netmask4 = *((struct sockaddr_in*) ent->ifa_netmask);",
          "382:     }",
          "384:     address->is_internal = !!(ent->ifa_flags & IFF_LOOPBACK);",
          "386:     address++;",
          "387:   }",
          "390:   for (ent = addrs; ent != NULL; ent = ent->ifa_next) {",
          "391:     if (!((ent->ifa_flags & IFF_UP) && (ent->ifa_flags & IFF_RUNNING)) ||",
          "392:         (ent->ifa_addr == NULL) ||",
          "393:         (ent->ifa_addr->sa_family != AF_LINK)) {",
          "394:       continue;",
          "395:     }",
          "397:     address = *addresses;",
          "399:     for (i = 0; i < (*count); i++) {",
          "400:       if (strcmp(address->name, ent->ifa_name) == 0) {",
          "401:         sa_addr = (struct sockaddr_dl*)(ent->ifa_addr);",
          "402:         memcpy(address->phys_addr, LLADDR(sa_addr), sizeof(address->phys_addr));",
          "403:       }",
          "404:       address++;",
          "405:     }",
          "406:   }",
          "408:   freeifaddrs(addrs);",
          "416:   int i;",
          "418:   for (i = 0; i < count; i++) {",
          "419:     free(addresses[i].name);",
          "420:   }",
          "422:   free(addresses);",
          "",
          "---------------"
        ],
        "src/unix/linux-core.c||src/unix/linux-core.c": [
          "File: src/unix/linux-core.c -> src/unix/linux-core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: #endif",
          "48: #ifdef HAVE_IFADDRS_H",
          "49: # include <ifaddrs.h>",
          "50: #endif",
          "52: #undef NANOSEC",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: # include <sys/socket.h>",
          "51: # include <net/ethernet.h>",
          "52: # include <linux/if_packet.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "624:   return -ENOSYS;",
          "625: #else",
          "626:   struct ifaddrs *addrs, *ent;",
          "628:   uv_interface_address_t* address;",
          "630:   if (getifaddrs(&addrs))",
          "631:     return -errno;",
          "",
          "[Removed Lines]",
          "627:   char ip[INET6_ADDRSTRLEN];",
          "",
          "[Added Lines]",
          "631:   int i;",
          "632:   struct sockaddr_ll *sll;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "636:   for (ent = addrs; ent != NULL; ent = ent->ifa_next) {",
          "638:         (ent->ifa_addr == NULL) ||",
          "639:         (ent->ifa_addr->sa_family == PF_PACKET)) {",
          "640:       continue;",
          "",
          "[Removed Lines]",
          "637:     if (!(ent->ifa_flags & IFF_UP && ent->ifa_flags & IFF_RUNNING) ||",
          "",
          "[Added Lines]",
          "641:     if (!((ent->ifa_flags & IFF_UP) && (ent->ifa_flags & IFF_RUNNING)) ||",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "650:   address = *addresses;",
          "652:   for (ent = addrs; ent != NULL; ent = ent->ifa_next) {",
          "655:       continue;",
          "659:       continue;",
          "667:       continue;",
          "670:     address->name = strdup(ent->ifa_name);",
          "",
          "[Removed Lines]",
          "653:     bzero(&ip, sizeof (ip));",
          "654:     if (!(ent->ifa_flags & IFF_UP && ent->ifa_flags & IFF_RUNNING)) {",
          "656:     }",
          "658:     if (ent->ifa_addr == NULL) {",
          "660:     }",
          "666:     if (ent->ifa_addr->sa_family == PF_PACKET) {",
          "668:     }",
          "",
          "[Added Lines]",
          "657:     if (!((ent->ifa_flags & IFF_UP) && (ent->ifa_flags & IFF_RUNNING)))",
          "660:     if (ent->ifa_addr == NULL)",
          "667:     if (ent->ifa_addr->sa_family == PF_PACKET)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "681:       address->netmask.netmask4 = *((struct sockaddr_in*) ent->ifa_netmask);",
          "682:     }",
          "686:     address++;",
          "687:   }",
          "689:   freeifaddrs(addrs);",
          "691:   return 0;",
          "",
          "[Removed Lines]",
          "684:     address->is_internal = ent->ifa_flags & IFF_LOOPBACK ? 1 : 0;",
          "",
          "[Added Lines]",
          "684:     address->is_internal = !!(ent->ifa_flags & IFF_LOOPBACK);",
          "690:   for (ent = addrs; ent != NULL; ent = ent->ifa_next) {",
          "691:     if (!((ent->ifa_flags & IFF_UP) && (ent->ifa_flags & IFF_RUNNING)) ||",
          "692:         (ent->ifa_addr == NULL) ||",
          "693:         (ent->ifa_addr->sa_family != PF_PACKET)) {",
          "694:       continue;",
          "695:     }",
          "697:     address = *addresses;",
          "699:     for (i = 0; i < (*count); i++) {",
          "700:       if (strcmp(address->name, ent->ifa_name) == 0) {",
          "701:         sll = (struct sockaddr_ll*)ent->ifa_addr;",
          "702:         memcpy(address->phys_addr, sll->sll_addr, sizeof(address->phys_addr));",
          "703:       }",
          "704:       address++;",
          "705:     }",
          "706:   }",
          "",
          "---------------"
        ],
        "src/unix/netbsd.c||src/unix/netbsd.c": [
          "File: src/unix/netbsd.c -> src/unix/netbsd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: #include <fcntl.h>",
          "36: #include <net/if.h>",
          "37: #include <sys/resource.h>",
          "38: #include <sys/types.h>",
          "39: #include <sys/sysctl.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: #include <net/if_dl.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "276: int uv_interface_addresses(uv_interface_address_t** addresses, int* count) {",
          "279:   uv_interface_address_t* address;",
          "281:   if (getifaddrs(&addrs))",
          "282:     return -errno;",
          "",
          "[Removed Lines]",
          "277:   struct ifaddrs *addrs;",
          "278:   struct ifaddrs *ent;",
          "",
          "[Added Lines]",
          "278:   struct ifaddrs *addrs, *ent;",
          "280:   int i;",
          "281:   struct sockaddr_dl *sa_addr;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "287:   for (ent = addrs; ent != NULL; ent = ent->ifa_next) {",
          "289:         (ent->ifa_addr == NULL) ||",
          "290:         (ent->ifa_addr->sa_family != PF_INET)) {",
          "291:       continue;",
          "",
          "[Removed Lines]",
          "288:     if (!(ent->ifa_flags & IFF_UP && ent->ifa_flags & IFF_RUNNING) ||",
          "",
          "[Added Lines]",
          "290:     if (!((ent->ifa_flags & IFF_UP) && (ent->ifa_flags & IFF_RUNNING)) ||",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "301:   address = *addresses;",
          "303:   for (ent = addrs; ent != NULL; ent = ent->ifa_next) {",
          "305:       continue;",
          "309:       continue;",
          "313:       continue;",
          "316:     address->name = strdup(ent->ifa_name);",
          "",
          "[Removed Lines]",
          "304:     if (!(ent->ifa_flags & IFF_UP && ent->ifa_flags & IFF_RUNNING)) {",
          "306:     }",
          "308:     if (ent->ifa_addr == NULL) {",
          "310:     }",
          "312:     if (ent->ifa_addr->sa_family != PF_INET) {",
          "314:     }",
          "",
          "[Added Lines]",
          "306:     if (!((ent->ifa_flags & IFF_UP) && (ent->ifa_flags & IFF_RUNNING)))",
          "309:     if (ent->ifa_addr == NULL)",
          "312:     if (ent->ifa_addr->sa_family != PF_INET)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "327:       address->netmask.netmask4 = *((struct sockaddr_in*) ent->ifa_netmask);",
          "328:     }",
          "332:     address++;",
          "333:   }",
          "335:   freeifaddrs(addrs);",
          "337:   return 0;",
          "",
          "[Removed Lines]",
          "330:     address->is_internal = !!(ent->ifa_flags & IFF_LOOPBACK) ? 1 : 0;",
          "",
          "[Added Lines]",
          "329:     address->is_internal = !!(ent->ifa_flags & IFF_LOOPBACK);",
          "335:   for (ent = addrs; ent != NULL; ent = ent->ifa_next) {",
          "336:     if (!((ent->ifa_flags & IFF_UP) && (ent->ifa_flags & IFF_RUNNING)) ||",
          "337:         (ent->ifa_addr == NULL) ||",
          "338:         (ent->ifa_addr->sa_family != AF_LINK)) {",
          "339:       continue;",
          "340:     }",
          "342:     address = *addresses;",
          "344:     for (i = 0; i < (*count); i++) {",
          "345:       if (strcmp(address->name, ent->ifa_name) == 0) {",
          "346:         sa_addr = (struct sockaddr_dl*)(ent->ifa_addr);",
          "347:         memcpy(address->phys_addr, LLADDR(sa_addr), sizeof(address->phys_addr));",
          "348:       }",
          "349:       address++;",
          "350:     }",
          "351:   }",
          "",
          "---------------"
        ],
        "src/unix/openbsd.c||src/unix/openbsd.c": [
          "File: src/unix/openbsd.c -> src/unix/openbsd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include <sys/time.h>",
          "29: #include <sys/sysctl.h>",
          "31: #include <errno.h>",
          "32: #include <fcntl.h>",
          "33: #include <kvm.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: #include <ifaddrs.h>",
          "32: #include <net/if.h>",
          "33: #include <net/if_dl.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "292: int uv_interface_addresses(uv_interface_address_t** addresses,",
          "293:   int* count) {",
          "297:   return 0;",
          "298: }",
          "301: void uv_free_interface_addresses(uv_interface_address_t* addresses,",
          "302:   int count) {",
          "303: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "298:   struct ifaddrs *addrs, *ent;",
          "299:   uv_interface_address_t* address;",
          "300:   int i;",
          "301:   struct sockaddr_dl *sa_addr;",
          "303:   if (getifaddrs(&addrs) != 0)",
          "304:     return -errno;",
          "309:   for (ent = addrs; ent != NULL; ent = ent->ifa_next) {",
          "310:     if (!((ent->ifa_flags & IFF_UP) && (ent->ifa_flags & IFF_RUNNING)) ||",
          "311:         (ent->ifa_addr == NULL) ||",
          "312:         (ent->ifa_addr->sa_family != PF_INET)) {",
          "313:       continue;",
          "314:     }",
          "315:     (*count)++;",
          "316:   }",
          "320:   if (!(*addresses))",
          "321:     return -ENOMEM;",
          "323:   address = *addresses;",
          "325:   for (ent = addrs; ent != NULL; ent = ent->ifa_next) {",
          "326:     if (!((ent->ifa_flags & IFF_UP) && (ent->ifa_flags & IFF_RUNNING)))",
          "327:       continue;",
          "329:     if (ent->ifa_addr == NULL)",
          "330:       continue;",
          "332:     if (ent->ifa_addr->sa_family != PF_INET)",
          "333:       continue;",
          "335:     address->name = strdup(ent->ifa_name);",
          "337:     if (ent->ifa_addr->sa_family == AF_INET6) {",
          "338:       address->address.address6 = *((struct sockaddr_in6*) ent->ifa_addr);",
          "339:     } else {",
          "340:       address->address.address4 = *((struct sockaddr_in*) ent->ifa_addr);",
          "341:     }",
          "343:     if (ent->ifa_netmask->sa_family == AF_INET6) {",
          "344:       address->netmask.netmask6 = *((struct sockaddr_in6*) ent->ifa_netmask);",
          "345:     } else {",
          "346:       address->netmask.netmask4 = *((struct sockaddr_in*) ent->ifa_netmask);",
          "347:     }",
          "349:     address->is_internal = !!(ent->ifa_flags & IFF_LOOPBACK);",
          "351:     address++;",
          "352:   }",
          "355:   for (ent = addrs; ent != NULL; ent = ent->ifa_next) {",
          "356:     if (!((ent->ifa_flags & IFF_UP) && (ent->ifa_flags & IFF_RUNNING)) ||",
          "357:         (ent->ifa_addr == NULL) ||",
          "358:         (ent->ifa_addr->sa_family != AF_LINK)) {",
          "359:       continue;",
          "360:     }",
          "362:     address = *addresses;",
          "364:     for (i = 0; i < (*count); i++) {",
          "365:       if (strcmp(address->name, ent->ifa_name) == 0) {",
          "366:         sa_addr = (struct sockaddr_dl*)(ent->ifa_addr);",
          "367:         memcpy(address->phys_addr, LLADDR(sa_addr), sizeof(address->phys_addr));",
          "368:       }",
          "369:       address++;",
          "370:     }",
          "371:   }",
          "373:   freeifaddrs(addrs);",
          "381:   int i;",
          "383:   for (i = 0; i < count; i++) {",
          "384:     free(addresses[i].name);",
          "385:   }",
          "387:   free(addresses);",
          "",
          "---------------"
        ],
        "src/unix/sunos.c||src/unix/sunos.c": [
          "File: src/unix/sunos.c -> src/unix/sunos.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: # include <ifaddrs.h>",
          "33: #endif",
          "34: #include <net/if.h>",
          "36: #include <sys/loadavg.h>",
          "37: #include <sys/time.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: #include <net/if_dl.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "580:   return -ENOSYS;",
          "581: #else",
          "582:   struct ifaddrs *addrs, *ent;",
          "584:   uv_interface_address_t* address;",
          "586:   if (getifaddrs(&addrs))",
          "",
          "[Removed Lines]",
          "583:   char ip[INET6_ADDRSTRLEN];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "592:   for (ent = addrs; ent != NULL; ent = ent->ifa_next) {",
          "594:         (ent->ifa_addr == NULL) ||",
          "595:         (ent->ifa_addr->sa_family == PF_PACKET)) {",
          "596:       continue;",
          "",
          "[Removed Lines]",
          "593:     if (!(ent->ifa_flags & IFF_UP && ent->ifa_flags & IFF_RUNNING) ||",
          "",
          "[Added Lines]",
          "593:     if (!((ent->ifa_flags & IFF_UP) && (ent->ifa_flags & IFF_RUNNING)) ||",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "606:   address = *addresses;",
          "608:   for (ent = addrs; ent != NULL; ent = ent->ifa_next) {",
          "612:       continue;",
          "616:       continue;",
          "619:     address->name = strdup(ent->ifa_name);",
          "",
          "[Removed Lines]",
          "609:     memset(&ip, 0, sizeof(ip));",
          "611:     if (!(ent->ifa_flags & IFF_UP && ent->ifa_flags & IFF_RUNNING)) {",
          "613:     }",
          "615:     if (ent->ifa_addr == NULL) {",
          "617:     }",
          "",
          "[Added Lines]",
          "609:     if (!((ent->ifa_flags & IFF_UP) && (ent->ifa_flags & IFF_RUNNING)))",
          "612:     if (ent->ifa_addr == NULL)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "630:       address->netmask.netmask4 = *((struct sockaddr_in*) ent->ifa_netmask);",
          "631:     }",
          "636:     address++;",
          "637:   }",
          "639:   freeifaddrs(addrs);",
          "641:   return 0;",
          "",
          "[Removed Lines]",
          "633:     address->is_internal = ent->ifa_flags & IFF_PRIVATE || ent->ifa_flags &",
          "634:  IFF_LOOPBACK ? 1 : 0;",
          "",
          "[Added Lines]",
          "629:     address->is_internal = !!((ent->ifa_flags & IFF_PRIVATE) ||",
          "630:                            (ent->ifa_flags & IFF_LOOPBACK));",
          "636:   for (ent = addrs; ent != NULL; ent = ent->ifa_next) {",
          "637:     if (!((ent->ifa_flags & IFF_UP) && (ent->ifa_flags & IFF_RUNNING)) ||",
          "638:         (ent->ifa_addr == NULL) ||",
          "639:         (ent->ifa_addr->sa_family != AF_LINK)) {",
          "640:       continue;",
          "641:     }",
          "643:     address = *addresses;",
          "645:     for (i = 0; i < (*count); i++) {",
          "646:       if (strcmp(address->name, ent->ifa_name) == 0) {",
          "647:         sa_addr = (struct sockaddr_dl*)(ent->ifa_addr);",
          "648:         memcpy(address->phys_addr, LLADDR(sa_addr), sizeof(address->phys_addr));",
          "649:       }",
          "650:       address++;",
          "651:     }",
          "652:   }",
          "",
          "---------------"
        ],
        "src/win/util.c||src/win/util.c": [
          "File: src/win/util.c -> src/win/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "940:       memset(uv_address, 0, sizeof *uv_address);",
          "942:       uv_address->name = name_buf;",
          "943:       uv_address->is_internal =",
          "944:           (win_address->IfType == IF_TYPE_SOFTWARE_LOOPBACK);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "944:       if (win_address->PhysicalAddressLength == sizeof(uv_address->phys_addr)) {",
          "945:         memcpy(uv_address->phys_addr,",
          "946:                win_address->PhysicalAddress,",
          "947:                sizeof(uv_address->phys_addr));",
          "948:       }",
          "",
          "---------------"
        ],
        "test/test-platform-output.c||test/test-platform-output.c": [
          "File: test/test-platform-output.c -> test/test-platform-output.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:   for (i = 0; i < count; i++) {",
          "73:     printf(\"  name: %s\\n\", interfaces[i].name);",
          "74:     printf(\"  internal: %d\\n\", interfaces[i].is_internal);",
          "76:     if (interfaces[i].address.address4.sin_family == AF_INET) {",
          "77:       uv_ip4_name(&interfaces[i].address.address4, buffer, sizeof(buffer));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75:     printf(\"  physical address: \");",
          "76:     printf(\"%02x:%02x:%02x:%02x:%02x:%02x\\n\",",
          "77:            (unsigned char)interfaces[i].phys_addr[0],",
          "78:            (unsigned char)interfaces[i].phys_addr[1],",
          "79:            (unsigned char)interfaces[i].phys_addr[2],",
          "80:            (unsigned char)interfaces[i].phys_addr[3],",
          "81:            (unsigned char)interfaces[i].phys_addr[4],",
          "82:            (unsigned char)interfaces[i].phys_addr[5]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "66ae0ff56281e8f60a38c0ddea48fa8d7bc8d4a2",
      "candidate_info": {
        "commit_hash": "66ae0ff56281e8f60a38c0ddea48fa8d7bc8d4a2",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/66ae0ff56281e8f60a38c0ddea48fa8d7bc8d4a2",
        "files": [
          "include/uv.h",
          "src/win/process.c",
          "test/benchmark-spawn.c",
          "test/test-ipc.c",
          "test/test-spawn.c",
          "test/test-stdio-over-pipes.c"
        ],
        "message": "process: make the 'status' parameter for exit_cb an int64_t\n\nThis means we no longer have to strip the high bit from the process exit\ncode on Windows, which is problematic because an unhandled SEH exception\ncan make a process exit with a status code that has the high bit set.",
        "before_after_code_files": [
          "include/uv.h||include/uv.h",
          "src/win/process.c||src/win/process.c",
          "test/benchmark-spawn.c||test/benchmark-spawn.c",
          "test/test-ipc.c||test/test-ipc.c",
          "test/test-spawn.c||test/test-spawn.c",
          "test/test-stdio-over-pipes.c||test/test-stdio-over-pipes.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "384: typedef void (*uv_prepare_cb)(uv_prepare_t* handle, int status);",
          "385: typedef void (*uv_check_cb)(uv_check_t* handle, int status);",
          "386: typedef void (*uv_idle_cb)(uv_idle_t* handle, int status);",
          "388: typedef void (*uv_walk_cb)(uv_handle_t* handle, void* arg);",
          "389: typedef void (*uv_fs_cb)(uv_fs_t* req);",
          "390: typedef void (*uv_work_cb)(uv_work_t* req);",
          "",
          "[Removed Lines]",
          "387: typedef void (*uv_exit_cb)(uv_process_t*, int exit_status, int term_signal);",
          "",
          "[Added Lines]",
          "387: typedef void (*uv_exit_cb)(uv_process_t*, int64_t exit_status, int term_signal);",
          "",
          "---------------"
        ],
        "src/win/process.c||src/win/process.c": [
          "File: src/win/process.c -> src/win/process.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "758:   } else if (!GetExitCodeProcess(handle->process_handle, &status)) {",
          "760:     exit_code = uv_translate_sys_error(GetLastError());",
          "764:   }",
          "",
          "[Removed Lines]",
          "761:   } else {",
          "763:     exit_code = status & INT_MAX;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/benchmark-spawn.c||test/benchmark-spawn.c": [
          "File: test/benchmark-spawn.c -> test/benchmark-spawn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: }",
          "68:   ASSERT(exit_status == 42);",
          "69:   ASSERT(term_signal == 0);",
          "70:   uv_close((uv_handle_t*)process, process_close_cb);",
          "",
          "[Removed Lines]",
          "67: static void exit_cb(uv_process_t* process, int exit_status, int term_signal) {",
          "",
          "[Added Lines]",
          "67: static void exit_cb(uv_process_t* process,",
          "68:                     int64_t exit_status,",
          "69:                     int term_signal) {",
          "",
          "---------------"
        ],
        "test/test-ipc.c||test/test-ipc.c": [
          "File: test/test-ipc.c -> test/test-ipc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "84: }",
          "88:   printf(\"exit_cb\\n\");",
          "89:   exit_cb_called++;",
          "90:   ASSERT(exit_status == 0);",
          "",
          "[Removed Lines]",
          "87: static void exit_cb(uv_process_t* process, int exit_status, int term_signal) {",
          "",
          "[Added Lines]",
          "87: static void exit_cb(uv_process_t* process,",
          "88:                     int64_t exit_status,",
          "89:                     int term_signal) {",
          "",
          "---------------"
        ],
        "test/test-spawn.c||test/test-spawn.c": [
          "File: test/test-spawn.c -> test/test-spawn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: }",
          "56:   printf(\"exit_cb\\n\");",
          "57:   exit_cb_called++;",
          "58:   ASSERT(exit_status == 1);",
          "",
          "[Removed Lines]",
          "55: static void exit_cb(uv_process_t* process, int exit_status, int term_signal) {",
          "",
          "[Added Lines]",
          "55: static void exit_cb(uv_process_t* process,",
          "56:                     int64_t exit_status,",
          "57:                     int term_signal) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64: static void expect(uv_process_t* process,",
          "66:                    int term_signal,",
          "67:                    int err) {",
          "68:   printf(\"exit_cb\\n\");",
          "",
          "[Removed Lines]",
          "65:                    int exit_status,",
          "",
          "[Added Lines]",
          "67:                    int64_t exit_status,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "76: static void exit_cb_expect_enoent(uv_process_t* process,",
          "78:                                  int term_signal) {",
          "79:   expect(process, exit_status, term_signal, UV_ENOENT);",
          "80: }",
          "83: static void exit_cb_expect_eperm(uv_process_t* process,",
          "85:                                  int term_signal) {",
          "86:   expect(process, exit_status, term_signal, UV_EPERM);",
          "87: }",
          "91:   int err;",
          "93:   printf(\"exit_cb\\n\");",
          "",
          "[Removed Lines]",
          "77:                                  int exit_status,",
          "84:                                  int exit_status,",
          "90: static void kill_cb(uv_process_t* process, int exit_status, int term_signal) {",
          "",
          "[Added Lines]",
          "79:                                  int64_t exit_status,",
          "86:                                  int64_t exit_status,",
          "92: static void kill_cb(uv_process_t* process,",
          "93:                     int64_t exit_status,",
          "94:                     int term_signal) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "109:   ASSERT(err == UV_ESRCH);",
          "110: }",
          "113:   printf(\"detach_cb\\n\");",
          "114:   exit_cb_called++;",
          "115: }",
          "",
          "[Removed Lines]",
          "112: static void detach_failure_cb(uv_process_t* process, int exit_status, int term_signal) {",
          "",
          "[Added Lines]",
          "116: static void detach_failure_cb(uv_process_t* process, int64_t exit_status, int term_signal) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "886: #ifdef _WIN32",
          "888: static void exit_cb_unexpected(uv_process_t* process,",
          "890:                                int term_signal) {",
          "891:   ASSERT(0 && \"should not have been called\");",
          "892: }",
          "",
          "[Removed Lines]",
          "889:                                int exit_status,",
          "",
          "[Added Lines]",
          "893:                                int64_t exit_status,",
          "",
          "---------------"
        ],
        "test/test-stdio-over-pipes.c||test/test-stdio-over-pipes.c": [
          "File: test/test-stdio-over-pipes.c -> test/test-stdio-over-pipes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: }",
          "52:   printf(\"exit_cb\\n\");",
          "53:   exit_cb_called++;",
          "54:   ASSERT(exit_status == 0);",
          "",
          "[Removed Lines]",
          "51: static void exit_cb(uv_process_t* process, int exit_status, int term_signal) {",
          "",
          "[Added Lines]",
          "51: static void exit_cb(uv_process_t* process,",
          "52:                     int64_t exit_status,",
          "53:                     int term_signal) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a057466c723b2b01579092f939196b9c38f0a62d",
      "candidate_info": {
        "commit_hash": "a057466c723b2b01579092f939196b9c38f0a62d",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/a057466c723b2b01579092f939196b9c38f0a62d",
        "files": [
          "src/unix/core.c"
        ],
        "message": "unix: fix setting written size on uv_wd",
        "before_after_code_files": [
          "src/unix/core.c||src/unix/core.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/core.c||src/unix/core.c": [
          "File: src/unix/core.c -> src/unix/core.c"
        ]
      }
    },
    {
      "candidate_hash": "ab157df5eebdf923588f3c8b58583a2ebf8fdccf",
      "candidate_info": {
        "commit_hash": "ab157df5eebdf923588f3c8b58583a2ebf8fdccf",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/ab157df5eebdf923588f3c8b58583a2ebf8fdccf",
        "files": [
          "ChangeLog",
          "src/version.c"
        ],
        "message": "Now working on v0.11.3",
        "before_after_code_files": [
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #define UV_VERSION_MAJOR 0",
          "31: #define UV_VERSION_MINOR 11",
          "36: #define UV_VERSION  ((UV_VERSION_MAJOR << 16) | \\",
          "",
          "[Removed Lines]",
          "32: #define UV_VERSION_PATCH 2",
          "33: #define UV_VERSION_IS_RELEASE 1",
          "",
          "[Added Lines]",
          "32: #define UV_VERSION_PATCH 3",
          "33: #define UV_VERSION_IS_RELEASE 0",
          "",
          "---------------"
        ]
      }
    }
  ]
}