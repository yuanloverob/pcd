{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ed9d12dbc216d6eac10e186b756582bf1c3ff18d",
      "candidate_info": {
        "commit_hash": "ed9d12dbc216d6eac10e186b756582bf1c3ff18d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ed9d12dbc216d6eac10e186b756582bf1c3ff18d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "src/whereInt.h",
          "test/distinct2.test"
        ],
        "message": "When using an index for both DISTINCT and ORDER BY, do not confuse the number of columns required for distinctness with the number required to get the correct sort order. Fix for [6749cb3c].\n\nFossilOrigin-Name: 6ac0f822450b26c7d67c33cdb2a90189cd3cf65a052af8497b795c3f71a23813",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "src/whereInt.h||src/whereInt.h",
          "test/distinct2.test||test/distinct2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2b221bb15fd2b9f6a426e5eb439f7dbabbe3c4cab010c49b87dae3bb1f16c081",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3695:     if( pLoop->wsFlags & WHERE_VIRTUALTABLE ){",
          "3696:       if( pLoop->u.vtab.isOrdered ) obSat = obDone;",
          "3697:       break;",
          "3700:     }",
          "3701:     iCur = pWInfo->pTabList->a[pLoop->iTab].iCursor;",
          "",
          "[Removed Lines]",
          "3698:     }else{",
          "3699:       pLoop->u.btree.nIdxCol = 0;",
          "",
          "[Added Lines]",
          "3698:     }else if( wctrlFlags & WHERE_DISTINCTBY ){",
          "3699:       pLoop->u.btree.nDistinctCol = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3838:             pColl = sqlite3ExprNNCollSeq(pWInfo->pParse, pOrderBy->a[i].pExpr);",
          "3839:             if( sqlite3StrICmp(pColl->zName, pIndex->azColl[j])!=0 ) continue;",
          "3840:           }",
          "3842:           isMatch = 1;",
          "3843:           break;",
          "3844:         }",
          "",
          "[Removed Lines]",
          "3841:           pLoop->u.btree.nIdxCol = j+1;",
          "",
          "[Added Lines]",
          "3841:           if( wctrlFlags & WHERE_DISTINCTBY ){",
          "3842:             pLoop->u.btree.nDistinctCol = j+1;",
          "3843:           }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5160:        && (pLoop->wsFlags & WHERE_INDEXED)!=0",
          "5161:        && (pIdx = pLoop->u.btree.pIndex)->hasStat1",
          "5163:        && pIdx->aiRowLogEst[n]>=36",
          "5164:       ){",
          "5165:         int r1 = pParse->nMem+1;",
          "",
          "[Removed Lines]",
          "5162:        && (n = pLoop->u.btree.nIdxCol)>0",
          "",
          "[Added Lines]",
          "5164:        && (n = pLoop->u.btree.nDistinctCol)>0",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h"
        ],
        "test/distinct2.test||test/distinct2.test": [
          "File: test/distinct2.test -> test/distinct2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "229:   SELECT DISTINCT a FROM t1, t2 WHERE x=b;",
          "230: } {1 1}",
          "233: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232: #-------------------------------------------------------------------------",
          "233: reset_db",
          "235: do_execsql_test 2000 {",
          "236:   CREATE TABLE t0 (c0, c1, c2, PRIMARY KEY (c0, c1));",
          "237:   CREATE TABLE t1 (c2);",
          "238:   INSERT INTO t0(c2) VALUES (0),(1),(3),(4),(5),(6),(7),(8),(9),(10),(11);",
          "239:   INSERT INTO t0(c1) VALUES ('a');",
          "240:   INSERT INTO t1(c2) VALUES (0);",
          "241: }",
          "242: do_execsql_test 2010 {",
          "243:   SELECT DISTINCT t0.c0, t1._rowid_, t0.c1 FROM t1 CROSS JOIN t0 ORDER BY t0.c0;",
          "244: } {{} 1 {} {} 1 a}",
          "245: do_execsql_test 1.2 {",
          "246:   ANALYZE;",
          "247: }",
          "248: do_execsql_test 2020 {",
          "249:   SELECT DISTINCT t0.c0, t1._rowid_, t0.c1 FROM t1 CROSS JOIN t0 ORDER BY t0.c0;",
          "250: } {{} 1 {} {} 1 a}",
          "253: do_execsql_test 2030 {",
          "254:   CREATE TABLE t2(a, b, c);",
          "255:   CREATE INDEX t2ab ON t2(a, b);",
          "257:   WITH c(i) AS (SELECT 1 UNION ALL SELECT i+1 FROM c WHERE i<64)",
          "258:     INSERT INTO t2 SELECT 'one', i%2, 'one' FROM c;",
          "260:   WITH c(i) AS (SELECT 1 UNION ALL SELECT i+1 FROM c WHERE i<64)",
          "261:     INSERT INTO t2 SELECT 'two', i%2, 'two' FROM c;",
          "263:   CREATE TABLE t3(x INTEGER PRIMARY KEY);",
          "264:   INSERT INTO t3 VALUES(1);",
          "266:   ANALYZE;",
          "267: }",
          "268: do_execsql_test 2040 {",
          "269:   SELECT DISTINCT a, b, x FROM t3 CROSS JOIN t2 ORDER BY a;",
          "270: } {",
          "271:   one 0 1",
          "272:   one 1 1",
          "273:   two 0 1",
          "274:   two 1 1",
          "275: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0ad7aa818283c82c550cdf18c7f897341b66f39f",
      "candidate_info": {
        "commit_hash": "0ad7aa818283c82c550cdf18c7f897341b66f39f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0ad7aa818283c82c550cdf18c7f897341b66f39f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/join.test",
          "test/with1.test"
        ],
        "message": "Limit the size of SrcList objects to 200 entries (compile-time configurable using -DSQLITE_MAX_SRCLIST=n).  The maximum number of tables in a join has always been 64, so this is not a real constraint on capability.  Limiting the size of a SrcList prevents DOS attacks (discovered by OSSFuzz) using crazy nexted CTE joins.\n\nFossilOrigin-Name: 7cac614d5df55eb092b863163483b6782b942b21bd15fd787576fef5619fa849",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/join.test||test/join.test",
          "test/with1.test||test/with1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9a425051e7ba59e797636f5cf32b5f6efafdb21c8d5300e099b8008b829c1439",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3823:   return -1;",
          "3824: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3834: #ifndef SQLITE_MAX_SRCLIST",
          "3835: # define SQLITE_MAX_SRCLIST 200",
          "3836: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3861:     SrcList *pNew;",
          "3862:     int nAlloc = pSrc->nSrc*2+nExtra;",
          "3863:     int nGot;",
          "3864:     pNew = sqlite3DbRealloc(db, pSrc,",
          "3865:                sizeof(*pSrc) + (nAlloc-1)*sizeof(pSrc->a[0]) );",
          "3866:     if( pNew==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3877:     if( pSrc->nSrc+nExtra>=SQLITE_MAX_SRCLIST ){",
          "3883:       sqlite3OomFault(db);",
          "3884:       return pSrc;",
          "3885:     }",
          "3886:     if( nAlloc>SQLITE_MAX_SRCLIST ) nAlloc = SQLITE_MAX_SRCLIST;",
          "",
          "---------------"
        ],
        "test/join.test||test/join.test": [
          "File: test/join.test -> test/join.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "671: jointest join-12.6 66 {1 {at most 64 tables in a join}}",
          "672: jointest join-12.7 127 {1 {at most 64 tables in a join}}",
          "673: jointest join-12.8 128 {1 {at most 64 tables in a join}}",
          "690: #-------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "674: jointest join-12.9 1000 {1 {at most 64 tables in a join}}",
          "676: # If SQLite is built with SQLITE_MEMDEBUG, then the huge number of realloc()",
          "677: # calls made by the following test cases are too time consuming to run.",
          "678: # Without SQLITE_MEMDEBUG, realloc() is fast enough that these are not",
          "679: # a problem.",
          "680: ifcapable pragma&&compileoption_diags {",
          "681:   if {[lsearch [db eval {PRAGMA compile_options}] MEMDEBUG]<0} {",
          "682:     jointest join-12.10 65534 {1 {at most 64 tables in a join}}",
          "683:     jointest join-12.11 65535 {1 {too many references to \"t14\": max 65535}}",
          "684:     jointest join-12.12 65536 {1 {too many references to \"t14\": max 65535}}",
          "685:     jointest join-12.13 65537 {1 {too many references to \"t14\": max 65535}}",
          "686:   }",
          "687: }",
          "",
          "[Added Lines]",
          "675: # As of 2019-01-17, the number of elements in a SrcList is limited",
          "676: # to 200.  The following tests still run, but the answer is now",
          "677: # an SQLITE_NOMEM error.",
          "678: #",
          "679: # jointest join-12.9 1000 {1 {at most 64 tables in a join}}",
          "680: #",
          "681: #  If SQLite is built with SQLITE_MEMDEBUG, then the huge number of realloc()",
          "682: #  calls made by the following test cases are too time consuming to run.",
          "683: #  Without SQLITE_MEMDEBUG, realloc() is fast enough that these are not",
          "684: #  a problem.",
          "685: #",
          "686: # ifcapable pragma&&compileoption_diags {",
          "687: #    if {[lsearch [db eval {PRAGMA compile_options}] MEMDEBUG]<0} {",
          "688: #     jointest join-12.10 65534 {1 {at most 64 tables in a join}}",
          "689: #     jointest join-12.11 65535 {1 {too many references to \"t14\": max 65535}}",
          "690: #     jointest join-12.12 65536 {1 {too many references to \"t14\": max 65535}}",
          "691: #     jointest join-12.13 65537 {1 {too many references to \"t14\": max 65535}}",
          "692: #   }",
          "693: # }",
          "",
          "---------------"
        ],
        "test/with1.test||test/with1.test": [
          "File: test/with1.test -> test/with1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1071:              SELECT * FROM Table0  NATURAL JOIN  Table0));",
          "1072: } {{}}",
          "1074: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1074: # 2019-01-17",
          "1075: # Make sure crazy nexted CTE joins terminate with an error quickly.",
          "1076: #",
          "1077: do_catchsql_test 22.1 {",
          "1078:   WITH RECURSIVE c AS (",
          "1079:      WITH RECURSIVE c AS (",
          "1080:         WITH RECURSIVE c AS (",
          "1081:            WITH RECURSIVE c AS (",
          "1082:                WITH  c AS (VALUES(0))",
          "1083:                SELECT 1 FROM c LEFT JOIN c ON ltrim(1)",
          "1084:            )",
          "1085:            SELECT 1 FROM c,c,c,c,c,c,c,c,c",
          "1086:         )",
          "1087:         SELECT  2 FROM c,c,c,c,c,c,c,c,c",
          "1088:      )",
          "1089:      SELECT 3 FROM c,c,c,c,c,c,c,c,c",
          "1090:   )",
          "1091:   SELECT 4 FROM c,c,c,c,c,c,c,c,c;",
          "1092: } {1 {out of memory}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c930b405f0717d5f8626dd846f3ab1d2a7243195",
      "candidate_info": {
        "commit_hash": "c930b405f0717d5f8626dd846f3ab1d2a7243195",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c930b405f0717d5f8626dd846f3ab1d2a7243195",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/func.c"
        ],
        "message": "Performance improvement on the instr() function, especially for large haystacks.\n\nFossilOrigin-Name: ce51f1a2b6a1789a5876e01cf829e45d84f3851d135a2fa5c44a56f948673a60",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/func.c||src/func.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 63eb803dbc27077007dbee8def659d1523724eb73f1def1cdb68027e5c20843a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/func.c||src/func.c": [
          "File: src/func.c -> src/func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "201:   int typeHaystack, typeNeedle;",
          "202:   int N = 1;",
          "203:   int isText;",
          "205:   UNUSED_PARAMETER(argc);",
          "206:   typeHaystack = sqlite3_value_type(argv[0]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204:   unsigned char firstChar;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "219:       isText = 1;",
          "220:     }",
          "221:     if( zNeedle==0 || (nHaystack && zHaystack==0) ) return;",
          "223:       N++;",
          "224:       do{",
          "225:         nHaystack--;",
          "",
          "[Removed Lines]",
          "222:     while( nNeedle<=nHaystack && memcmp(zHaystack, zNeedle, nNeedle)!=0 ){",
          "",
          "[Added Lines]",
          "223:     firstChar = zNeedle[0];",
          "224:     while( nNeedle<=nHaystack",
          "225:        && (zHaystack[0]!=firstChar || memcmp(zHaystack, zNeedle, nNeedle)!=0)",
          "226:     ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "09ea1256ecc31185dbc61ef61ee6be8fad5c9e02",
      "candidate_info": {
        "commit_hash": "09ea1256ecc31185dbc61ef61ee6be8fad5c9e02",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/09ea1256ecc31185dbc61ef61ee6be8fad5c9e02",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "src/test1.c"
        ],
        "message": "Improvement to the hexdb interpreter built into the CLI and into the TCL test harness: Round the \"size\" up to the next multiple of the \"pagesize\".\n\nFossilOrigin-Name: 9ec92939cb2d2c96ae15bc496feed233ce31424c25a6bf86ace7e0ef3eedec5b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "src/test1.c||src/test1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7ef7b23cbb1b9ace9f853238d9133320c153e6c3417e6823ab6394ee1fe56358",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3891:   rc = sscanf(zLine, \"| size %d pagesize %d\", &n, &pgsz);",
          "3892:   if( rc!=2 ) goto readHexDb_error;",
          "3893:   if( n<0 ) goto readHexDb_error;",
          "3894:   a = sqlite3_malloc( n ? n : 1 );",
          "3895:   if( a==0 ){",
          "3896:     utf8_printf(stderr, \"Out of memory!\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3894:   if( pgsz<512 || pgsz>65536 || (pgsz&(pgsz-1))!=0 ) goto readHexDb_error;",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7740:       int pgsz;",
          "7741:       rc = sscanf(zIn+i, \"| size %d pagesize %d\", &n, &pgsz);",
          "7742:       if( rc!=2 ) continue;",
          "7743:       if( n<512 ){",
          "7744:         Tcl_AppendResult(interp, \"bad 'size' field\", (void*)0);",
          "7745:         return TCL_ERROR;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7743:       if( pgsz<512 || pgsz>65536 || (pgsz&(pgsz-1))!=0 ){",
          "7744:         Tcl_AppendResult(interp, \"bad 'pagesize' field\", (void*)0);",
          "7745:         return TCL_ERROR;",
          "7746:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b182588c8e0cdbafc5987df0a919d29021d1ba58",
      "candidate_info": {
        "commit_hash": "b182588c8e0cdbafc5987df0a919d29021d1ba58",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b182588c8e0cdbafc5987df0a919d29021d1ba58",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Have \".recover\" handle \"\\r\" and \"\\n\" in the same way as \".dump\".\n\nFossilOrigin-Name: f95f0f02ab6c6cf45f25b613c7ab57f68249689d0a9eddf4c9518ddf0edad365",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8dcc1d89d955bf58c80a8c30a37960f0cf95719953951a92626cc332cc75ec60",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3934: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3950: static void shellEscapeCrnl(",
          "3951:   sqlite3_context *context,",
          "3952:   int argc,",
          "3953:   sqlite3_value **argv",
          "3954: ){",
          "3955:   const char *zText = (const char*)sqlite3_value_text(argv[0]);",
          "3956:   if( zText[0]=='\\'' ){",
          "3957:     int nText = sqlite3_value_bytes(argv[0]);",
          "3958:     int i;",
          "3959:     char zBuf1[20];",
          "3960:     char zBuf2[20];",
          "3961:     const char *zNL = 0;",
          "3962:     const char *zCR = 0;",
          "3963:     int nCR = 0;",
          "3964:     int nNL = 0;",
          "3966:     for(i=0; zText[i]; i++){",
          "3967:       if( zNL==0 && zText[i]=='\\n' ){",
          "3968:         zNL = unused_string(zText, \"\\\\n\", \"\\\\012\", zBuf1);",
          "3969:         nNL = (int)strlen(zNL);",
          "3970:       }",
          "3971:       if( zCR==0 && zText[i]=='\\r' ){",
          "3972:         zCR = unused_string(zText, \"\\\\r\", \"\\\\015\", zBuf2);",
          "3973:         nCR = (int)strlen(zCR);",
          "3974:       }",
          "3975:     }",
          "3977:     if( zNL || zCR ){",
          "3978:       int iOut = 0;",
          "3979:       i64 nMax = (nNL > nCR) ? nNL : nCR;",
          "3980:       i64 nAlloc = nMax * nText + (nMax+12)*2;",
          "3981:       char *zOut = (char*)sqlite3_malloc64(nAlloc);",
          "3982:       if( zOut==0 ){",
          "3983:         sqlite3_result_error_nomem(context);",
          "3984:         return;",
          "3985:       }",
          "3987:       if( zNL && zCR ){",
          "3988:         memcpy(&zOut[iOut], \"replace(replace(\", 16);",
          "3989:         iOut += 16;",
          "3990:       }else{",
          "3991:         memcpy(&zOut[iOut], \"replace(\", 8);",
          "3992:         iOut += 8;",
          "3993:       }",
          "3994:       for(i=0; zText[i]; i++){",
          "3995:         if( zText[i]=='\\n' ){",
          "3996:           memcpy(&zOut[iOut], zNL, nNL);",
          "3997:           iOut += nNL;",
          "3998:         }else if( zText[i]=='\\r' ){",
          "3999:           memcpy(&zOut[iOut], zCR, nCR);",
          "4000:           iOut += nCR;",
          "4001:         }else{",
          "4002:           zOut[iOut] = zText[i];",
          "4003:           iOut++;",
          "4004:         }",
          "4005:       }",
          "4007:       if( zNL ){",
          "4008:         memcpy(&zOut[iOut], \",'\", 2); iOut += 2;",
          "4009:         memcpy(&zOut[iOut], zNL, nNL); iOut += nNL;",
          "4010:         memcpy(&zOut[iOut], \"', char(10))\", 12); iOut += 12;",
          "4011:       }",
          "4012:       if( zCR ){",
          "4013:         memcpy(&zOut[iOut], \",'\", 2); iOut += 2;",
          "4014:         memcpy(&zOut[iOut], zCR, nCR); iOut += nCR;",
          "4015:         memcpy(&zOut[iOut], \"', char(13))\", 12); iOut += 12;",
          "4016:       }",
          "4018:       sqlite3_result_text(context, zOut, iOut, SQLITE_TRANSIENT);",
          "4019:       sqlite3_free(zOut);",
          "4020:       return;",
          "4021:     }",
          "4022:   }",
          "4024:   sqlite3_result_value(context, argv[0]);",
          "4025: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4013:                             shellModuleSchema, 0, 0);",
          "4014:     sqlite3_create_function(p->db, \"shell_putsnl\", 1, SQLITE_UTF8, p,",
          "4015:                             shellPutsFunc, 0, 0);",
          "4016: #ifndef SQLITE_NOHAVE_SYSTEM",
          "4017:     sqlite3_create_function(p->db, \"edit\", 1, SQLITE_UTF8, 0,",
          "4018:                             editFunc, 0, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4106:     sqlite3_create_function(p->db, \"shell_escape_crnl\", 1, SQLITE_UTF8, 0,",
          "4107:                             shellEscapeCrnl, 0, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6349:     \"GROUP BY pgno, cell;\"",
          "6350:   );",
          "6364:   if( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "6352: #if 0",
          "6353:   zSql = \"SELECT type ||','|| name ||','|| tbl_name ||','|| rootpage ||','|| sql FROM recovery.schema;\";",
          "6354:   shellPrepare(pState->db, &rc, zSql, &pLoop);",
          "6355:   while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pLoop) ){",
          "6356:     raw_printf(pState->out, \"%s\\n\", (const char*)sqlite3_column_text(pLoop, 0));",
          "6357:   }",
          "6358:   shellFinalize(&rc, pLoop);",
          "6359:   return rc;",
          "6360: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6398:         raw_printf(pState->out, \"DELETE FROM sqlite_sequence;\\n\");",
          "6399:       }",
          "6400:       shellPreparePrintf(pState->db, &rc, &pData,",
          "6402:         \"FROM sqlite_dbdata WHERE pgno IN (\"",
          "6403:         \"  SELECT pgno FROM recovery.map WHERE root=%d\"",
          "6404:         \")\"",
          "",
          "[Removed Lines]",
          "6401:         \"SELECT max(field), group_concat(quote(value), ', ') \"",
          "",
          "[Added Lines]",
          "6483:         \"SELECT max(field), group_concat(shell_escape_crnl(quote(value)),', ')\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6423:     sqlite3_stmt *pStmt = 0;",
          "6424:     shellPrepare(pState->db, &rc,",
          "6425:         \"SELECT sql, name FROM recovery.schema \"",
          "6427:     );",
          "6428:     while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){",
          "6429:       const char *zSql = (const char*)sqlite3_column_text(pStmt, 0);",
          "",
          "[Removed Lines]",
          "6426:         \"WHERE (type='table' AND sql LIKE 'create table%') IS NOT TRUE\", &pStmt",
          "",
          "[Added Lines]",
          "6508:         \"WHERE sql NOT LIKE 'create table%'\", &pStmt",
          "",
          "---------------"
        ]
      }
    }
  ]
}