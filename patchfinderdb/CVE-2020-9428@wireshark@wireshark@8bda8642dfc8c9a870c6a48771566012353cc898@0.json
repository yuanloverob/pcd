{
  "cve_id": "CVE-2020-9428",
  "cve_desc": "In Wireshark 3.2.0 to 3.2.1, 3.0.0 to 3.0.8, and 2.6.0 to 2.6.14, the EAP dissector could crash. This was addressed in epan/dissectors/packet-eap.c by using more careful sscanf parsing.",
  "repo": "wireshark/wireshark",
  "patch_hash": "8bda8642dfc8c9a870c6a48771566012353cc898",
  "patch_info": {
    "commit_hash": "8bda8642dfc8c9a870c6a48771566012353cc898",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/8bda8642dfc8c9a870c6a48771566012353cc898",
    "files": [
      "epan/dissectors/packet-eap.c"
    ],
    "message": "EAP: Remove a couple of string length assumptions.\n\nDon't assume our MNC and MCC string lengths are > 3.\n\nBug: 16397\nChange-Id: I0759dcb9d0c5f078cf3a98e9323d9cb741e15dd4\nReviewed-on: https://code.wireshark.org/review/36146\nReviewed-by: Gerald Combs <gerald@wireshark.org>\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-eap.c||epan/dissectors/packet-eap.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-eap.c||epan/dissectors/packet-eap.c": [
      "File: epan/dissectors/packet-eap.c -> epan/dissectors/packet-eap.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "612:   }",
      "616:     ret = FALSE;",
      "617:     goto end;",
      "618:   }",
      "",
      "[Removed Lines]",
      "615:   if (!sscanf(tokens[2] + 3, \"%u\", &mnc) || !sscanf(tokens[3] + 3, \"%u\", &mcc)) {",
      "",
      "[Added Lines]",
      "616:   if (!sscanf(tokens[2], \"%*3c%u\", &mnc) || !sscanf(tokens[3], \"%*3c%u\", &mcc)) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "79769da3b5ab8d64077b46fafb2f8b6a6d68982d",
      "candidate_info": {
        "commit_hash": "79769da3b5ab8d64077b46fafb2f8b6a6d68982d",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/79769da3b5ab8d64077b46fafb2f8b6a6d68982d",
        "files": [
          "epan/dissectors/packet-eap.c"
        ],
        "message": "EAP: Remove a couple of string length assumptions.\n\nDon't assume our MNC and MCC string lengths are > 3.\n\nBug: 16397\nChange-Id: I0759dcb9d0c5f078cf3a98e9323d9cb741e15dd4\nReviewed-on: https://code.wireshark.org/review/36146\nReviewed-by: Gerald Combs <gerald@wireshark.org>\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 8bda8642dfc8c9a870c6a48771566012353cc898)\nReviewed-on: https://code.wireshark.org/review/36171",
        "before_after_code_files": [
          "epan/dissectors/packet-eap.c||epan/dissectors/packet-eap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-eap.c||epan/dissectors/packet-eap.c"
          ],
          "candidate": [
            "epan/dissectors/packet-eap.c||epan/dissectors/packet-eap.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-eap.c||epan/dissectors/packet-eap.c": [
          "File: epan/dissectors/packet-eap.c -> epan/dissectors/packet-eap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "611:   }",
          "615:     ret = FALSE;",
          "616:     goto end;",
          "617:   }",
          "",
          "[Removed Lines]",
          "614:   if (!sscanf(tokens[2] + 3, \"%u\", &mnc) || !sscanf(tokens[3] + 3, \"%u\", &mcc)) {",
          "",
          "[Added Lines]",
          "615:   if (!sscanf(tokens[2], \"%*3c%u\", &mnc) || !sscanf(tokens[3], \"%*3c%u\", &mcc)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9fe2de783dbcbe74144678d60a4e3923367044b2",
      "candidate_info": {
        "commit_hash": "9fe2de783dbcbe74144678d60a4e3923367044b2",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/9fe2de783dbcbe74144678d60a4e3923367044b2",
        "files": [
          "epan/dissectors/packet-eap.c"
        ],
        "message": "EAP: Remove a couple of string length assumptions.\n\nDon't assume our MNC and MCC string lengths are > 3.\n\nBug: 16397\nChange-Id: I0759dcb9d0c5f078cf3a98e9323d9cb741e15dd4\nReviewed-on: https://code.wireshark.org/review/36146\nReviewed-by: Gerald Combs <gerald@wireshark.org>\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 8bda8642dfc8c9a870c6a48771566012353cc898)\nReviewed-on: https://code.wireshark.org/review/36173",
        "before_after_code_files": [
          "epan/dissectors/packet-eap.c||epan/dissectors/packet-eap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-eap.c||epan/dissectors/packet-eap.c"
          ],
          "candidate": [
            "epan/dissectors/packet-eap.c||epan/dissectors/packet-eap.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-eap.c||epan/dissectors/packet-eap.c": [
          "File: epan/dissectors/packet-eap.c -> epan/dissectors/packet-eap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "594:   }",
          "598:     ret = FALSE;",
          "599:     goto end;",
          "600:   }",
          "",
          "[Removed Lines]",
          "597:   if (!sscanf(tokens[2] + 3, \"%u\", &mnc) || !sscanf(tokens[3] + 3, \"%u\", &mcc)) {",
          "",
          "[Added Lines]",
          "598:   if (!sscanf(tokens[2], \"%*3c%u\", &mnc) || !sscanf(tokens[3], \"%*3c%u\", &mcc)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "924ae4d09185b1e6ff8f9fcae0977209bff33858",
      "candidate_info": {
        "commit_hash": "924ae4d09185b1e6ff8f9fcae0977209bff33858",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/924ae4d09185b1e6ff8f9fcae0977209bff33858",
        "files": [
          "epan/dissectors/packet-eap.c"
        ],
        "message": "EAP: Remove a couple of string length assumptions.\n\nDon't assume our MNC and MCC string lengths are > 3.\n\nBug: 16397\nChange-Id: I0759dcb9d0c5f078cf3a98e9323d9cb741e15dd4\nReviewed-on: https://code.wireshark.org/review/36146\nReviewed-by: Gerald Combs <gerald@wireshark.org>\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 8bda8642dfc8c9a870c6a48771566012353cc898)\nReviewed-on: https://code.wireshark.org/review/36172",
        "before_after_code_files": [
          "epan/dissectors/packet-eap.c||epan/dissectors/packet-eap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-eap.c||epan/dissectors/packet-eap.c"
          ],
          "candidate": [
            "epan/dissectors/packet-eap.c||epan/dissectors/packet-eap.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-eap.c||epan/dissectors/packet-eap.c": [
          "File: epan/dissectors/packet-eap.c -> epan/dissectors/packet-eap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "594:   }",
          "598:     ret = FALSE;",
          "599:     goto end;",
          "600:   }",
          "",
          "[Removed Lines]",
          "597:   if (!sscanf(tokens[2] + 3, \"%u\", &mnc) || !sscanf(tokens[3] + 3, \"%u\", &mcc)) {",
          "",
          "[Added Lines]",
          "598:   if (!sscanf(tokens[2], \"%*3c%u\", &mnc) || !sscanf(tokens[3], \"%*3c%u\", &mcc)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e312d073677232e63d3603d6e990b263da87ceef",
      "candidate_info": {
        "commit_hash": "e312d073677232e63d3603d6e990b263da87ceef",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/e312d073677232e63d3603d6e990b263da87ceef",
        "files": [
          "epan/dissectors/packet-eap.c"
        ],
        "message": "EAP: Handling Identities with Periods\n\nFixing EAP WLAN identity dissection to account for\nidentities that contain periods. Also fixed an issue\nwith the identity unknown data field where it would\nincorrectly calculate the number of remaining bytes\nin identity messages.  In that same vein, renamed the\nfield from hf_eap_identity_unknown_data to\nhf_eap_identity_padding as it is only null bytes appended\nto the end of identity strings. Lastly, I corrected\nthe EAP WLAN identity MCC and MNC lookup logic.  It\nwrongly assumed that NAI Realm MCC and MNCs should only\nexist or dissect with permanent EAP identities which\nis not the case.  The algorithm used to perform lookups\nwould also not resolve all MCC/MNC pairs for the MNC value.\n\nBug: 16524\nChange-Id: I1d9955618dab0c70de9fcd88088a4390989653c7\nReviewed-on: https://code.wireshark.org/review/37250\nPetri-Dish: Dario Lombardo <lomato@gmail.com>\nTested-by: Petri Dish Buildbot\nPetri-Dish: Alexis La Goutte <alexis.lagoutte@gmail.com>\nReviewed-by: Dario Lombardo <lomato@gmail.com>\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-eap.c||epan/dissectors/packet-eap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-eap.c||epan/dissectors/packet-eap.c"
          ],
          "candidate": [
            "epan/dissectors/packet-eap.c||epan/dissectors/packet-eap.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-eap.c||epan/dissectors/packet-eap.c": [
          "File: epan/dissectors/packet-eap.c -> epan/dissectors/packet-eap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: static int hf_eap_identity_wlan_mcc = -1;",
          "45: static int hf_eap_identity_wlan_mcc_mnc_2digits = -1;",
          "46: static int hf_eap_identity_wlan_mcc_mnc_3digits = -1;",
          "49: static int hf_eap_notification = -1;",
          "",
          "[Removed Lines]",
          "47: static int hf_eap_identity_unknown_data = -1;",
          "",
          "[Added Lines]",
          "47: static int hf_eap_identity_padding = -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "601:   guint8      eap_identity_prefix = 0;",
          "602:   guint8*     identity = NULL;",
          "603:   gchar**     tokens = NULL;",
          "604:   guint       ntokens = 0;",
          "605:   gboolean    ret = TRUE;",
          "606:   int         hf_eap_identity_wlan_mcc_mnc;",
          "607:   proto_item* item;",
          "609:   identity = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, size, ENC_ASCII);",
          "613:   while(tokens[ntokens])",
          "614:     ntokens++;",
          "617:      <imsi>@wlan.mnc<mnc>.mcc<mcc>.3gppnetwork.org",
          "618:      If not, we don't have a wlan identity",
          "623:     ret = FALSE;",
          "624:     goto end;",
          "625:   }",
          "",
          "[Removed Lines]",
          "611:   tokens = g_strsplit_set(identity, \"@.\", -1);",
          "620:   if (ntokens != 6 || g_ascii_strncasecmp(tokens[1], \"wlan\", 4) ||",
          "621:       g_ascii_strncasecmp(tokens[4], \"3gppnetwork\", 11) ||",
          "622:       g_ascii_strncasecmp(tokens[5], \"org\", 3)) {",
          "",
          "[Added Lines]",
          "604:   gchar**     realm_tokens = NULL;",
          "606:   guint       nrealm_tokens = 0;",
          "614:   tokens = g_strsplit_set(identity, \"@\", -1);",
          "620:   if (ntokens != 2) {",
          "621:     ret = FALSE;",
          "622:     proto_tree_add_item(tree, hf_eap_identity, tvb, offset, size, ENC_ASCII|ENC_NA);",
          "623:     goto end;",
          "624:   }",
          "626:   realm_tokens = g_strsplit_set(tokens[1], \".\", -1);",
          "628:   while(realm_tokens[nrealm_tokens])",
          "629:     nrealm_tokens++;",
          "635:   if (ntokens != 2 || nrealm_tokens != 5 || g_ascii_strncasecmp(realm_tokens[0], \"wlan\", 4) ||",
          "636:       g_ascii_strncasecmp(realm_tokens[3], \"3gppnetwork\", 11) ||",
          "637:       g_ascii_strncasecmp(realm_tokens[4], \"org\", 3)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "651:       expert_add_info(pinfo, item, &ei_eap_identity_invalid);",
          "652:   }",
          "657:     ret = FALSE;",
          "658:     goto end;",
          "659:   }",
          "662:     mcc_mnc = 1000 * mcc + mnc;",
          "663:     hf_eap_identity_wlan_mcc_mnc = hf_eap_identity_wlan_mcc_mnc_3digits;",
          "664:   } else {",
          "665:     mcc_mnc = 100 * mcc + mnc;",
          "666:     hf_eap_identity_wlan_mcc_mnc = hf_eap_identity_wlan_mcc_mnc_2digits;",
          "667:   }",
          "669:   proto_tree_add_uint(eap_identity_tree, hf_eap_identity_wlan_mcc_mnc,",
          "670:     tvb, offset + (guint)strlen(tokens[0]) + (guint)strlen(\"@wlan.\") +",
          "672:     mcc_mnc);",
          "678: end:",
          "679:   g_strfreev(tokens);",
          "685:   return ret;",
          "686: }",
          "",
          "[Removed Lines]",
          "656:   if (!sscanf(tokens[2], \"%*3c%u\", &mnc) || !sscanf(tokens[3], \"%*3c%u\", &mcc)) {",
          "661:   if (!g_ascii_strncasecmp(tokens[0], tokens[2] + 3, 3)) {",
          "671:     (guint)strlen(\"mnc\"), (guint)strlen(tokens[2]) - (guint)strlen(\"mnc\"),",
          "674:   proto_tree_add_uint(eap_identity_tree, hf_eap_identity_wlan_mcc,",
          "675:     tvb, offset + (guint)(strlen(tokens[0]) + strlen(\"@wlan.\") +",
          "676:     strlen(tokens[2]) + 1 + strlen(\"mcc\")),",
          "677:     (guint)(strlen(tokens[3]) - strlen(\"mcc\")), mcc);",
          "681:   if(tvb_captured_length_remaining(tvb, offset + size) != 0){",
          "682:       proto_tree_add_item(tree, hf_eap_identity_unknown_data, tvb, offset + size,",
          "683:         tvb_captured_length_remaining(tvb, offset + size), ENC_NA);",
          "684:   }",
          "",
          "[Added Lines]",
          "672:   if (!sscanf(realm_tokens[1] + 3, \"%u\", &mnc) || !sscanf(realm_tokens[2] + 3, \"%u\", &mcc)) {",
          "677:   if (!try_val_to_str_ext(mcc * 100 + mnc, &mcc_mnc_2digits_codes_ext)) {",
          "692:   proto_tree_add_uint(eap_identity_tree, hf_eap_identity_wlan_mcc,",
          "693:     tvb, offset + (guint)(strlen(tokens[0]) + strlen(\"@wlan.\") +",
          "694:     strlen(realm_tokens[1]) + 1 + strlen(\"mcc\")),",
          "695:     (guint)(strlen(realm_tokens[2]) - strlen(\"mcc\")), mcc);",
          "699:     (guint)strlen(\"mnc\"), (guint)strlen(realm_tokens[1]) - (guint)strlen(\"mnc\"),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "713:   while (left >= 2) {",
          "714:     guint8      type, length;",
          "715:     proto_item *pi;",
          "716:     proto_tree *attr_tree;",
          "717:     int         aoffset;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "735:     gint        padding;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "743:       case AT_IDENTITY:",
          "744:         proto_tree_add_item(attr_tree, hf_eap_identity_actual_len, tvb, aoffset, 2, ENC_BIG_ENDIAN);",
          "745:         dissect_eap_identity(tvb, pinfo, attr_tree, aoffset + 2, tvb_get_ntohs(tvb, aoffset));",
          "746:         break;",
          "747:       case AT_NOTIFICATION:",
          "748:         proto_tree_add_item(attr_tree, hf_eap_sim_notification_type, tvb, aoffset, 2, ENC_BIG_ENDIAN);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "771:         padding = ((length - 1) * 4) - tvb_get_ntohs(tvb, aoffset);",
          "772:         if (padding != 0) {",
          "773:           proto_tree_add_item(attr_tree, hf_eap_identity_padding, tvb,",
          "774:             aoffset + 2 + tvb_get_ntohs(tvb, aoffset), padding, ENC_NA);",
          "775:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "778:   while (left >= 2) {",
          "779:     guint8       type, length;",
          "780:     proto_item  *pi;",
          "781:     proto_tree  *attr_tree;",
          "782:     int          aoffset;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "811:     gint         padding;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "808:       case AT_IDENTITY:",
          "809:         proto_tree_add_item(attr_tree, hf_eap_identity_actual_len, tvb, aoffset, 2, ENC_BIG_ENDIAN);",
          "810:         dissect_eap_identity(tvb, pinfo, attr_tree, aoffset + 2, tvb_get_ntohs(tvb, aoffset));",
          "811:         break;",
          "812:       case AT_NOTIFICATION:",
          "813:         proto_tree_add_item(attr_tree, hf_eap_aka_notification_type, tvb, aoffset, 2, ENC_BIG_ENDIAN);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "847:         padding = ((length - 1) * 4) - tvb_get_ntohs(tvb, aoffset);",
          "848:         if (padding != 0) {",
          "849:           proto_tree_add_item(attr_tree, hf_eap_identity_padding, tvb,",
          "850:             aoffset + 2 + tvb_get_ntohs(tvb, aoffset), padding, ENC_NA);",
          "851:         }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "840:   proto_tree     *eap_tree;",
          "841:   proto_tree     *eap_tls_flags_tree;",
          "842:   proto_item     *eap_type_item;",
          "845:   col_set_str(pinfo->cinfo, COL_PROTOCOL, \"EAP\");",
          "846:   col_clear(pinfo->cinfo, COL_INFO);",
          "",
          "[Removed Lines]",
          "843:   proto_item     *eap_identity_item;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "971:       case EAP_TYPE_ID:",
          "972:         if (size > 0) {",
          "975:         }",
          "976:         if (conversation_state && !PINFO_FD_VISITED(pinfo)) {",
          "977:           conversation_state->leap_state  =  0;",
          "",
          "[Removed Lines]",
          "973:           eap_identity_item = proto_tree_add_item(eap_tree, hf_eap_identity, tvb, offset, size, ENC_ASCII|ENC_NA);",
          "974:           dissect_eap_identity(tvb, pinfo, eap_identity_item, offset, size);",
          "",
          "[Added Lines]",
          "1013:           dissect_eap_identity(tvb, pinfo, eap_tree, offset, size);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1485:       \"WLAN Identity Mobile Network Code\", \"eap.identity.wlan.mnc\",",
          "1486:       FT_UINT16, BASE_DEC|BASE_EXT_STRING, &mcc_mnc_3digits_codes_ext, 0x0, NULL, HFILL }},",
          "1490:       FT_BYTES, BASE_NONE, NULL, 0x0,",
          "1491:       NULL, HFILL }},",
          "",
          "[Removed Lines]",
          "1488:     { &hf_eap_identity_unknown_data, {",
          "1489:       \"Unknown Data\", \"eap.identity.data_unk\",",
          "",
          "[Added Lines]",
          "1527:     { &hf_eap_identity_padding, {",
          "1528:       \"Padding\", \"eap.identity.padding\",",
          "",
          "---------------"
        ]
      }
    }
  ]
}