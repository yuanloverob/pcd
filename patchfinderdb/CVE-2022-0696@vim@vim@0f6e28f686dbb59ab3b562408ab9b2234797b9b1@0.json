{
  "cve_id": "CVE-2022-0696",
  "cve_desc": "NULL Pointer Dereference in GitHub repository vim/vim prior to 8.2.4428.",
  "repo": "vim/vim",
  "patch_hash": "0f6e28f686dbb59ab3b562408ab9b2234797b9b1",
  "patch_info": {
    "commit_hash": "0f6e28f686dbb59ab3b562408ab9b2234797b9b1",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/0f6e28f686dbb59ab3b562408ab9b2234797b9b1",
    "files": [
      "src/evalvars.c",
      "src/proto/window.pro",
      "src/usercmd.c",
      "src/version.c",
      "src/window.c"
    ],
    "message": "patch 8.2.4428: crash when switching tabpage while in the cmdline window\n\nProblem:    Crash when switching tabpage while in the cmdline window.\nSolution:   Disallow switching tabpage when in the cmdline window.",
    "before_after_code_files": [
      "src/evalvars.c||src/evalvars.c",
      "src/proto/window.pro||src/proto/window.pro",
      "src/usercmd.c||src/usercmd.c",
      "src/version.c||src/version.c",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "src/evalvars.c||src/evalvars.c": [
      "File: src/evalvars.c -> src/evalvars.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2199:     }",
      "2208:     if (bdone < ht->ht_used)",
      "2209:     {",
      "2210:  if (bdone++ == 0)",
      "",
      "[Removed Lines]",
      "2202:     ht =",
      "2203: #ifdef FEAT_CMDWIN",
      "2205:  is_in_cmdwin() ? &prevwin->w_buffer->b_vars->dv_hashtab :",
      "2206: #endif",
      "2207:  &curbuf->b_vars->dv_hashtab;",
      "",
      "[Added Lines]",
      "2202:     ht = &prevwin_curwin()->w_buffer->b_vars->dv_hashtab;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2217:     }",
      "2226:     if (wdone < ht->ht_used)",
      "2227:     {",
      "2228:  if (wdone++ == 0)",
      "",
      "[Removed Lines]",
      "2220:     ht =",
      "2221: #ifdef FEAT_CMDWIN",
      "2223:  is_in_cmdwin() ? &prevwin->w_vars->dv_hashtab :",
      "2224: #endif",
      "2225:  &curwin->w_vars->dv_hashtab;",
      "",
      "[Added Lines]",
      "2215:     ht = &prevwin_curwin()->w_vars->dv_hashtab;",
      "",
      "---------------"
    ],
    "src/proto/window.pro||src/proto/window.pro": [
      "File: src/proto/window.pro -> src/proto/window.pro",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: void do_window(int nchar, long Prenum, int xchar);",
      "3: void get_wincmd_addr_type(char_u *arg, exarg_T *eap);",
      "4: int win_split(int size, int flags);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2: win_T *prevwin_curwin(void);",
      "",
      "---------------"
    ],
    "src/usercmd.c||src/usercmd.c": [
      "File: src/usercmd.c -> src/usercmd.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:     for (;;)",
      "150:     {",
      "151:  for (j = 0; j < gap->ga_len; ++j)",
      "",
      "[Removed Lines]",
      "144:     gap =",
      "145: #ifdef FEAT_CMDWIN",
      "146:  is_in_cmdwin() ? &prevwin->w_buffer->b_ucmds :",
      "147: #endif",
      "148:  &curbuf->b_ucmds;",
      "",
      "[Added Lines]",
      "144:     gap = &prevwin_curwin()->w_buffer->b_ucmds;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "358: get_user_commands(expand_T *xp UNUSED, int idx)",
      "359: {",
      "367:     if (idx < buf->b_ucmds.ga_len)",
      "368:  return USER_CMD_GA(&buf->b_ucmds, idx)->uc_name;",
      "",
      "[Removed Lines]",
      "361:     buf_T *buf =",
      "362: #ifdef FEAT_CMDWIN",
      "363:  is_in_cmdwin() ? prevwin->w_buffer :",
      "364: #endif",
      "365:  curbuf;",
      "",
      "[Added Lines]",
      "357:     buf_T *buf = prevwin_curwin()->w_buffer;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "386:     if (cmdidx == CMD_USER_BUF)",
      "387:     {",
      "395:  if (idx < buf->b_ucmds.ga_len)",
      "396:      return USER_CMD_GA(&buf->b_ucmds, idx)->uc_name;",
      "",
      "[Removed Lines]",
      "389:  buf_T *buf =",
      "390: #ifdef FEAT_CMDWIN",
      "391:       is_in_cmdwin() ? prevwin->w_buffer :",
      "392: #endif",
      "393:       curbuf;",
      "",
      "[Added Lines]",
      "381:  buf_T *buf = prevwin_curwin()->w_buffer;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "478:     garray_T *gap;",
      "486:     for (;;)",
      "487:     {",
      "488:  for (i = 0; i < gap->ga_len; ++i)",
      "",
      "[Removed Lines]",
      "481:     gap =",
      "482: #ifdef FEAT_CMDWIN",
      "483:      is_in_cmdwin() ? &prevwin->w_buffer->b_ucmds :",
      "484: #endif",
      "485:      &curbuf->b_ucmds;",
      "",
      "[Added Lines]",
      "469:     gap = &prevwin_curwin()->w_buffer->b_ucmds;",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "751: static int included_patches[] =",
      "754:     4427,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "754:     4428,",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "110: }",
      "111: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "117:     win_T *",
      "118: prevwin_curwin(void)",
      "119: {",
      "120:     return",
      "121: #ifdef FEAT_CMDWIN",
      "123:  is_in_cmdwin() && prevwin != NULL ? prevwin :",
      "124: #endif",
      "125:  curwin;",
      "126: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3927:     tabpage_T *newtp;",
      "3928:     int  n;",
      "3930:     newtp = alloc_tabpage();",
      "3931:     if (newtp == NULL)",
      "3932:  return FAIL;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3945: #ifdef FEAT_CMDWIN",
      "3946:     if (cmdwin_type != 0)",
      "3947:     {",
      "3948:  emsg(_(e_invalid_in_cmdline_window));",
      "3949:  return FAIL;",
      "3950:     }",
      "3951: #endif",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "4301:  text_locked_msg();",
      "4302:  return;",
      "4303:     }",
      "4306:     if (first_tabpage->tp_next == NULL)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4327:     CHECK_CMDWIN;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "4368:     int  trigger_enter_autocmds,",
      "4369:     int  trigger_leave_autocmds)",
      "4370: {",
      "4372:     set_keep_msg(NULL, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4395:     CHECK_CMDWIN;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a1198124370a366ff02811a43845a631b5c6e7f0",
      "candidate_info": {
        "commit_hash": "a1198124370a366ff02811a43845a631b5c6e7f0",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/a1198124370a366ff02811a43845a631b5c6e7f0",
        "files": [
          "src/evalvars.c",
          "src/ex_getln.c",
          "src/proto/ex_getln.pro",
          "src/testdir/test_ins_complete.vim",
          "src/usercmd.c",
          "src/version.c"
        ],
        "message": "patch 8.2.3629: command completion in cmdline window uses global commands\n\nProblem:    Command completion in cmdline window uses global user commands,\n            not local commands for the window where it was opened from.\nSolution:   Use local commands. (closes #9168)",
        "before_after_code_files": [
          "src/evalvars.c||src/evalvars.c",
          "src/ex_getln.c||src/ex_getln.c",
          "src/proto/ex_getln.pro||src/proto/ex_getln.pro",
          "src/testdir/test_ins_complete.vim||src/testdir/test_ins_complete.vim",
          "src/usercmd.c||src/usercmd.c",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/evalvars.c||src/evalvars.c",
            "src/usercmd.c||src/usercmd.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/evalvars.c||src/evalvars.c",
            "src/usercmd.c||src/usercmd.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/evalvars.c||src/evalvars.c": [
          "File: src/evalvars.c -> src/evalvars.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2074:     ht =",
          "2075: #ifdef FEAT_CMDWIN",
          "2079: #endif",
          "2080:  &curbuf->b_vars->dv_hashtab;",
          "2081:     if (bdone < ht->ht_used)",
          "",
          "[Removed Lines]",
          "2077:  (cmdwin_type != 0 && get_cmdline_type() == NUL) ?",
          "2078:  &prevwin->w_buffer->b_vars->dv_hashtab :",
          "",
          "[Added Lines]",
          "2077:  is_in_cmdwin() ? &prevwin->w_buffer->b_vars->dv_hashtab :",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2093:     ht =",
          "2094: #ifdef FEAT_CMDWIN",
          "2098: #endif",
          "2099:  &curwin->w_vars->dv_hashtab;",
          "2100:     if (wdone < ht->ht_used)",
          "",
          "[Removed Lines]",
          "2096:  (cmdwin_type != 0 && get_cmdline_type() == NUL) ?",
          "2097:  &prevwin->w_vars->dv_hashtab :",
          "",
          "[Added Lines]",
          "2095:  is_in_cmdwin() ? &prevwin->w_vars->dv_hashtab :",
          "",
          "---------------"
        ],
        "src/ex_getln.c||src/ex_getln.c": [
          "File: src/ex_getln.c -> src/ex_getln.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4486:     return cmdwin_result;",
          "4487: }",
          "4488: #endif // FEAT_CMDWIN",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4492:     int",
          "4493: is_in_cmdwin(void)",
          "4494: {",
          "4495:     return cmdwin_type != 0 && get_cmdline_type() == NUL;",
          "4496: }",
          "",
          "---------------"
        ],
        "src/proto/ex_getln.pro||src/proto/ex_getln.pro": [
          "File: src/proto/ex_getln.pro -> src/proto/ex_getln.pro",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: int get_cmdline_firstc(void);",
          "39: int get_list_range(char_u **str, int *num1, int *num2);",
          "40: char *check_cedit(void);",
          "41: char_u *script_get(exarg_T *eap, char_u *cmd);",
          "42: void get_user_input(typval_T *argvars, typval_T *rettv, int inputdialog, int secret);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: int is_in_cmdwin(void);",
          "",
          "---------------"
        ],
        "src/testdir/test_ins_complete.vim||src/testdir/test_ins_complete.vim": [
          "File: src/testdir/test_ins_complete.vim -> src/testdir/test_ins_complete.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "373:   set completeopt&",
          "374: endfunc",
          "376: func Test_compl_in_cmdwin()",
          "377:   CheckFeature cmdwin",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "376: func s:ComplInCmdwin_GlobalCompletion(a, l, p)",
          "377:   return 'global'",
          "378: endfunc",
          "380: func s:ComplInCmdwin_LocalCompletion(a, l, p)",
          "381:   return 'local'",
          "382: endfunc",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "411:   call feedkeys(\"q::GetInput b:test_\\<Tab>\\<CR>:q\\<CR>\", 'tx!')",
          "412:   call assert_equal('b:test_', input)",
          "414:   delcom TestCommand",
          "415:   delcom GetInput",
          "416:   unlet w:test_winvar",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "423:   \" Argument completion of buffer-local command",
          "424:   func s:ComplInCmdwin_GlobalCompletionList(a, l, p)",
          "425:     return ['global']",
          "426:   endfunc",
          "428:   func s:ComplInCmdwin_LocalCompletionList(a, l, p)",
          "429:     return ['local']",
          "430:   endfunc",
          "432:   func s:ComplInCmdwin_CheckCompletion(arg)",
          "433:     call assert_equal('local', a:arg)",
          "434:   endfunc",
          "436:   com! -nargs=1 -complete=custom,<SID>ComplInCmdwin_GlobalCompletion",
          "437:        \\ TestCommand call s:ComplInCmdwin_CheckCompletion(<q-args>)",
          "438:   com! -buffer -nargs=1 -complete=custom,<SID>ComplInCmdwin_LocalCompletion",
          "439:        \\ TestCommand call s:ComplInCmdwin_CheckCompletion(<q-args>)",
          "440:   call feedkeys(\"q:iTestCommand \\<Tab>\\<CR>\", 'tx!')",
          "442:   com! -nargs=1 -complete=customlist,<SID>ComplInCmdwin_GlobalCompletionList",
          "443:        \\ TestCommand call s:ComplInCmdwin_CheckCompletion(<q-args>)",
          "444:   com! -buffer -nargs=1 -complete=customlist,<SID>ComplInCmdwin_LocalCompletionList",
          "445:        \\ TestCommand call s:ComplInCmdwin_CheckCompletion(<q-args>)",
          "447:   call feedkeys(\"q:iTestCommand \\<Tab>\\<CR>\", 'tx!')",
          "449:   func! s:ComplInCmdwin_CheckCompletion(arg)",
          "450:     call assert_equal('global', a:arg)",
          "451:   endfunc",
          "452:   new",
          "453:   call feedkeys(\"q:iTestCommand \\<Tab>\\<CR>\", 'tx!')",
          "454:   quit",
          "456:   delfunc s:ComplInCmdwin_GlobalCompletion",
          "457:   delfunc s:ComplInCmdwin_LocalCompletion",
          "458:   delfunc s:ComplInCmdwin_GlobalCompletionList",
          "459:   delfunc s:ComplInCmdwin_LocalCompletionList",
          "460:   delfunc s:ComplInCmdwin_CheckCompletion",
          "462:   delcom -buffer TestCommand",
          "",
          "---------------"
        ],
        "src/usercmd.c||src/usercmd.c": [
          "File: src/usercmd.c -> src/usercmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:     for (;;)",
          "146:     {",
          "147:  for (j = 0; j < gap->ga_len; ++j)",
          "",
          "[Removed Lines]",
          "144:     gap = &curbuf->b_ucmds;",
          "",
          "[Added Lines]",
          "144:     gap =",
          "145: #ifdef FEAT_CMDWIN",
          "146:  is_in_cmdwin() ? &prevwin->w_buffer->b_ucmds :",
          "147: #endif",
          "148:  &curbuf->b_ucmds;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "304:     buf_T *buf =",
          "305: #ifdef FEAT_CMDWIN",
          "307: #endif",
          "308:  curbuf;",
          "",
          "[Removed Lines]",
          "306:  (cmdwin_type != 0 && get_cmdline_type() == NUL) ? prevwin->w_buffer :",
          "",
          "[Added Lines]",
          "310:  is_in_cmdwin() ? prevwin->w_buffer :",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "331:  buf_T *buf =",
          "332: #ifdef FEAT_CMDWIN",
          "335: #endif",
          "338:  if (idx < buf->b_ucmds.ga_len)",
          "339:      return USER_CMD_GA(&buf->b_ucmds, idx)->uc_name;",
          "",
          "[Removed Lines]",
          "333:       (cmdwin_type != 0 && get_cmdline_type() == NUL)",
          "334:          ? prevwin->w_buffer :",
          "336:      curbuf;",
          "",
          "[Added Lines]",
          "337:       is_in_cmdwin() ? prevwin->w_buffer :",
          "339:       curbuf;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "421:     gap =",
          "422: #ifdef FEAT_CMDWIN",
          "425: #endif",
          "427:     for (;;)",
          "428:     {",
          "429:  for (i = 0; i < gap->ga_len; ++i)",
          "",
          "[Removed Lines]",
          "423:  (cmdwin_type != 0 && get_cmdline_type() == NUL) ?",
          "424:  &prevwin->w_buffer->b_ucmds :",
          "426:  &curbuf->b_ucmds;",
          "",
          "[Added Lines]",
          "426:      is_in_cmdwin() ? &prevwin->w_buffer->b_ucmds :",
          "428:      &curbuf->b_ucmds;",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "758: static int included_patches[] =",
          "761:     3628,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "761:     3629,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "592f6250017c31c8996325403e511f4502077ba5",
      "candidate_info": {
        "commit_hash": "592f6250017c31c8996325403e511f4502077ba5",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/592f6250017c31c8996325403e511f4502077ba5",
        "files": [
          "src/version.c",
          "src/window.c"
        ],
        "message": "patch 8.2.4432: cannot use settabvar() while the cmdline window is open\n\nProblem:    Cannot use settabvar() while the cmdline window is open.\nSolution:   Only give an error when actually switching tabpage.\n            (closes #9813)",
        "before_after_code_files": [
          "src/version.c||src/version.c",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/version.c||src/version.c",
            "src/window.c||src/window.c"
          ],
          "candidate": [
            "src/version.c||src/version.c",
            "src/window.c||src/window.c"
          ]
        }
      },
      "candidate_diff": {
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "751: static int included_patches[] =",
          "754:     4431,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "754:     4432,",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4392:     int  trigger_enter_autocmds,",
          "4393:     int  trigger_leave_autocmds)",
          "4394: {",
          "4398:     set_keep_msg(NULL, 0);",
          "",
          "[Removed Lines]",
          "4395:     CHECK_CMDWIN;",
          "",
          "[Added Lines]",
          "4395:     if (trigger_enter_autocmds || trigger_leave_autocmds)",
          "4396:  CHECK_CMDWIN;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "80c88eac5a81dd9f1a96fc80cb8aab6c84fe7b86",
      "candidate_info": {
        "commit_hash": "80c88eac5a81dd9f1a96fc80cb8aab6c84fe7b86",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/80c88eac5a81dd9f1a96fc80cb8aab6c84fe7b86",
        "files": [
          "src/ex_docmd.c",
          "src/proto/usercmd.pro",
          "src/testdir/test_cmdline.vim",
          "src/usercmd.c",
          "src/version.c"
        ],
        "message": "patch 8.2.3414: fullcommand() gives wrong name with buffer-local user command\n\nProblem:    fullcommand() gives the wrong name if there is a buffer-local user\n            command. (Naohiro Ono)\nSolution:   Use a separate function to get the user command name.\n            (closes #8840)",
        "before_after_code_files": [
          "src/ex_docmd.c||src/ex_docmd.c",
          "src/proto/usercmd.pro||src/proto/usercmd.pro",
          "src/testdir/test_cmdline.vim||src/testdir/test_cmdline.vim",
          "src/usercmd.c||src/usercmd.c",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/usercmd.c||src/usercmd.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/usercmd.c||src/usercmd.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/ex_docmd.c||src/ex_docmd.c": [
          "File: src/ex_docmd.c -> src/ex_docmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3895:     }",
          "3897:     rettv->vval.v_string = vim_strsave(IS_USER_CMDIDX(ea.cmdidx)",
          "3900: }",
          "3901: #endif",
          "",
          "[Removed Lines]",
          "3898:         ? get_user_commands(NULL, ea.useridx)",
          "3899:         : cmdnames[ea.cmdidx].cmd_name);",
          "",
          "[Added Lines]",
          "3898:      ? get_user_command_name(ea.useridx, ea.cmdidx)",
          "3899:      : cmdnames[ea.cmdidx].cmd_name);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5519: get_command_name(expand_T *xp UNUSED, int idx)",
          "5520: {",
          "5521:     if (idx >= (int)CMD_SIZE)",
          "5523:     return cmdnames[idx].cmd_name;",
          "5524: }",
          "",
          "[Removed Lines]",
          "5522:  return get_user_command_name(idx);",
          "",
          "[Added Lines]",
          "5522:  return expand_user_command_name(idx);",
          "",
          "---------------"
        ],
        "src/proto/usercmd.pro||src/proto/usercmd.pro": [
          "File: src/proto/usercmd.pro -> src/proto/usercmd.pro",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: char_u *find_ucmd(exarg_T *eap, char_u *p, int *full, expand_T *xp, int *complp);",
          "3: char_u *set_context_in_user_cmd(expand_T *xp, char_u *arg_in);",
          "5: char_u *get_user_commands(expand_T *xp, int idx);",
          "6: char_u *get_user_cmd_addr_type(expand_T *xp, int idx);",
          "7: char_u *get_user_cmd_flags(expand_T *xp, int idx);",
          "8: char_u *get_user_cmd_nargs(expand_T *xp, int idx);",
          "",
          "[Removed Lines]",
          "4: char_u *get_user_command_name(int idx);",
          "",
          "[Added Lines]",
          "4: char_u *expand_user_command_name(int idx);",
          "6: char_u *get_user_command_name(int idx, int cmdidx);",
          "",
          "---------------"
        ],
        "src/testdir/test_cmdline.vim||src/testdir/test_cmdline.vim": [
          "File: src/testdir/test_cmdline.vim -> src/testdir/test_cmdline.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "482:   call assert_equal('', fullcommand(test_null_string()))",
          "484:   call assert_equal('syntax', 'syn'->fullcommand())",
          "485: endfunc",
          "487: func Test_shellcmd_completion()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "486:   command -buffer BufferLocalCommand :",
          "487:   command GlobalCommand :",
          "488:   call assert_equal('GlobalCommand', fullcommand('GlobalCom'))",
          "489:   call assert_equal('BufferLocalCommand', fullcommand('BufferL'))",
          "490:   delcommand BufferLocalCommand",
          "491:   delcommand GlobalCommand",
          "",
          "---------------"
        ],
        "src/usercmd.c||src/usercmd.c": [
          "File: src/usercmd.c -> src/usercmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "289: }",
          "291:     char_u *",
          "293: {",
          "294:     return get_user_commands(NULL, idx - (int)CMD_SIZE);",
          "295: }",
          "",
          "[Removed Lines]",
          "292: get_user_command_name(int idx)",
          "",
          "[Added Lines]",
          "292: expand_user_command_name(int idx)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "315:     return NULL;",
          "316: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "323:     char_u *",
          "324: get_user_command_name(int idx, int cmdidx)",
          "325: {",
          "326:     if (cmdidx == CMD_USER && idx < ucmds.ga_len)",
          "327:  return USER_CMD(idx)->uc_name;",
          "328:     if (cmdidx == CMD_USER_BUF)",
          "329:     {",
          "331:  buf_T *buf =",
          "332: #ifdef FEAT_CMDWIN",
          "333:       (cmdwin_type != 0 && get_cmdline_type() == NUL)",
          "334:          ? prevwin->w_buffer :",
          "335: #endif",
          "336:      curbuf;",
          "338:  if (idx < buf->b_ucmds.ga_len)",
          "339:      return USER_CMD_GA(&buf->b_ucmds, idx)->uc_name;",
          "340:     }",
          "341:     return NULL;",
          "342: }",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "756: static int included_patches[] =",
          "759:     3413,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "759:     3414,",
          "",
          "---------------"
        ]
      }
    }
  ]
}