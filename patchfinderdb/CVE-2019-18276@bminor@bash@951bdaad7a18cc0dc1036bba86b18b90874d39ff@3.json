{
  "cve_id": "CVE-2019-18276",
  "cve_desc": "An issue was discovered in disable_priv_mode in shell.c in GNU Bash through 5.0 patch 11. By default, if Bash is run with its effective UID not equal to its real UID, it will drop privileges by setting its effective UID to its real UID. However, it does so incorrectly. On Linux and other systems that support \"saved UID\" functionality, the saved UID is not dropped. An attacker with command execution in the shell can use \"enable -f\" for runtime loading of a new builtin, which can be a shared object that calls setuid() and therefore regains privileges. However, binaries running with an effective UID of 0 are unaffected.",
  "repo": "bminor/bash",
  "patch_hash": "951bdaad7a18cc0dc1036bba86b18b90874d39ff",
  "patch_info": {
    "commit_hash": "951bdaad7a18cc0dc1036bba86b18b90874d39ff",
    "repo": "bminor/bash",
    "commit_url": "https://github.com/bminor/bash/commit/951bdaad7a18cc0dc1036bba86b18b90874d39ff",
    "files": [
      "CWRU/CWRU.chlog",
      "MANIFEST",
      "bashline.c",
      "builtins/help.def",
      "config.h.in",
      "configure",
      "configure.ac",
      "doc/bash.1",
      "doc/bashref.texi",
      "lib/glob/glob.c",
      "pathexp.c",
      "shell.c",
      "tests/glob.tests",
      "tests/glob6.sub",
      "tests/glob7.sub"
    ],
    "message": "commit bash-20190628 snapshot",
    "before_after_code_files": [
      "CWRU/CWRU.chlog||CWRU/CWRU.chlog",
      "bashline.c||bashline.c",
      "builtins/help.def||builtins/help.def",
      "config.h.in||config.h.in",
      "configure.ac||configure.ac",
      "lib/glob/glob.c||lib/glob/glob.c",
      "pathexp.c||pathexp.c",
      "shell.c||shell.c",
      "tests/glob.tests||tests/glob.tests",
      "tests/glob6.sub||tests/glob6.sub",
      "tests/glob7.sub||tests/glob7.sub"
    ]
  },
  "patch_diff": {
    "CWRU/CWRU.chlog||CWRU/CWRU.chlog": [
      "File: CWRU/CWRU.chlog -> CWRU/CWRU.chlog",
      "--- Hunk 1 ---",
      "[Context before]",
      "6167:  - pathname expansion: note that under some circumstances the shell",
      "6168:    will invoke the matching engine for words with unquoted backslashes",
      "6169:  - posixglob: document the new shell option and its effects",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6171:        6/27",
      "6172:        ----",
      "6173: {config.h.in,configure.ac}",
      "6174:  - setresuid,setresgid: check and set HAVE_{DECL,}_SETRES[UG]ID as",
      "6175:    appropriate",
      "6177: shell.c",
      "6178:  - disable_priv_mode: if we have setres[ug]id, use them over",
      "6179:    set[ug]id, which only set the save user-id and group-id if the",
      "6180:    process is running as root. From Ian Eldred Pudney",
      "6181:    in https://savannah.gnu.org/patch/?9822",
      "6183:        6/28",
      "6184:        ----",
      "6185: lib/glob/glob.c",
      "6186:  - glob_vector: don't bother trying to read the directory if the filename",
      "6187:    pattern doesn't have any globbing characters except backslash; just",
      "6188:    dequote the pattern and try to lstat(2) it as if there were no",
      "6189:    globbing characters at all. From an austingroup-bugs discussion",
      "6190:    message from Stephane Chazelas <stephane.chazelas@gmail.com>",
      "6192: bashline.c",
      "6193:  - completion_glob_pattern: just call glob_pattern_p and make sure it",
      "6194:    returns 1 (non-backslash globbing characters)",
      "6196: builtins/help.def",
      "6197:  - help_builtin: don't try pattern matching the help topic argument",
      "6198:    unless glob_pattern_p returns 1",
      "6200: pathexp.c",
      "6201:  - unquoted_glob_pattern_p: when in a bracket expression (open > 0),",
      "6202:    don't allow an unquoted slash as part of the bracket expression.",
      "6203:    Report from Stephane Chazelas <stephane.chazelas@gmail.com>",
      "",
      "---------------"
    ],
    "bashline.c||bashline.c": [
      "File: bashline.c -> bashline.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3846: completion_glob_pattern (string)",
      "3847:      char *string;",
      "3848: {",
      "3898: }",
      "3900: static char *globtext;",
      "",
      "[Removed Lines]",
      "3849:   register int c;",
      "3850:   char *send;",
      "3851:   int open;",
      "3853:   DECLARE_MBSTATE;",
      "3855:   open = 0;",
      "3856:   send = string + strlen (string);",
      "3858:   while (c = *string++)",
      "3859:     {",
      "3860:       switch (c)",
      "3861:  {",
      "3862:  case '?':",
      "3863:  case '*':",
      "3864:    return (1);",
      "3866:  case '[':",
      "3867:    open++;",
      "3868:    continue;",
      "3870:  case ']':",
      "3871:    if (open)",
      "3872:      return (1);",
      "3873:    continue;",
      "3875:  case '+':",
      "3876:  case '@':",
      "3877:  case '!':",
      "3879:      return (1);",
      "3880:    continue;",
      "3882:  case '\\\\':",
      "3883:    if (*string++ == 0)",
      "3884:      return (0);",
      "3885:  }",
      "3889: #ifdef HANDLE_MULTIBYTE",
      "3890:       string--;",
      "3891:       ADVANCE_CHAR_P (string, send - string);",
      "3892:       string++;",
      "3893: #else",
      "3894:       ADVANCE_CHAR_P (string, send - string);",
      "3895: #endif",
      "3896:     }",
      "3897:   return (0);",
      "",
      "[Added Lines]",
      "3849:   return (glob_pattern_p (string) == 1);",
      "",
      "---------------"
    ],
    "builtins/help.def||builtins/help.def": [
      "File: builtins/help.def -> builtins/help.def",
      "--- Hunk 1 ---",
      "[Context before]",
      "132:     {",
      "133:       printf (\"%s\", ngettext (\"Shell commands matching keyword `\", \"Shell commands matching keywords `\", (list->next ? 2 : 1)));",
      "134:       print_word_list (list, \", \");",
      "",
      "[Removed Lines]",
      "131:   if (glob_pattern_p (list->word->word))",
      "",
      "[Added Lines]",
      "131:   if (glob_pattern_p (list->word->word) == 1)",
      "",
      "---------------"
    ],
    "config.h.in||config.h.in": [
      "File: config.h.in -> config.h.in",
      "--- Hunk 1 ---",
      "[Context before]",
      "813: #undef HAVE_SETREGID",
      "814: #undef HAVE_DECL_SETREGID",
      "817: #undef HAVE_SETVBUF",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "817: #undef HAVE_SETRESGID",
      "818: #undef HAVE_DECL_SETRESGID",
      "821: #undef HAVE_SETRESUID",
      "822: #undef HAVE_DECL_SETRESUID",
      "",
      "---------------"
    ],
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "21: #   You should have received a copy of the GNU General Public License",
      "22: #   along with this program.  If not, see <http://www.gnu.org/licenses/>.",
      "26: define(bashvers, 5.0)",
      "27: define(relstatus, maint)",
      "",
      "[Removed Lines]",
      "24: AC_REVISION([for Bash 5.0, version 5.010])dnl",
      "",
      "[Added Lines]",
      "24: AC_REVISION([for Bash 5.0, version 5.011])dnl",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "850: AC_CHECK_DECLS([printf])",
      "851: AC_CHECK_DECLS([sbrk])",
      "852: AC_CHECK_DECLS([setregid])",
      "853: AC_CHECK_DECLS([strcpy])",
      "854: AC_CHECK_DECLS([strsignal])",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "853: AC_CHECK_DECLS[(setresuid, setresgid])",
      "",
      "---------------"
    ],
    "lib/glob/glob.c||lib/glob/glob.c": [
      "File: lib/glob/glob.c -> lib/glob/glob.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "675:   patlen = (pat && *pat) ? strlen (pat) : 0;",
      "678:      we can dispense with reading the directory, and just see if there is",
      "679:      a filename `DIR/PAT'.  If there is, and we can access it, just make the",
      "682:     {",
      "683:       int dirlen;",
      "684:       struct stat finfo;",
      "",
      "[Removed Lines]",
      "681:   if (skip == 0 && glob_pattern_p (pat) == 0)",
      "",
      "[Added Lines]",
      "679:      or contains a pattern with only backslash escapes (hasglob == 2),",
      "683:   hasglob = 0;",
      "684:   if (skip == 0 && (hasglob = glob_pattern_p (pat)) == 0 || hasglob == 2)",
      "",
      "---------------"
    ],
    "pathexp.c||pathexp.c": [
      "File: pathexp.c -> pathexp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "62: int posix_glob_backslash = 1;",
      "65: int",
      "66: unquoted_glob_pattern_p (string)",
      "67:      register char *string;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "65:    This is supposed to be called when pathname expansion is performed, so",
      "66:    it implements the rules in Posix 2.13.3, specifically that an unquoted",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "88:    continue;",
      "90:  case ']':",
      "92:      return (1);",
      "93:    continue;",
      "95:  case '+':",
      "96:  case '@':",
      "97:  case '!':",
      "",
      "[Removed Lines]",
      "91:    if (open)",
      "",
      "[Added Lines]",
      "98:  case '/':",
      "99:    if (open)",
      "100:      open = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "109:        string++;",
      "110:        continue;",
      "111:      }",
      "112:    else if (*string == 0)",
      "113:      return (0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "119:    else if (open && *string == '/')",
      "120:      {",
      "122:        continue;",
      "123:      }",
      "",
      "---------------"
    ],
    "shell.c||shell.c": [
      "File: shell.c -> shell.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1293: {",
      "1294:   int e;",
      "1296:   if (setuid (current_user.uid) < 0)",
      "1297:     {",
      "1298:       e = errno;",
      "1299:       sys_error (_(\"cannot set uid to %d: effective uid %d\"), current_user.uid, current_user.euid);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1296: #if HAVE_DECL_SETRESUID",
      "1297:   if (setresuid (current_user.uid, current_user.uid, current_user.uid) < 0)",
      "1298: #else",
      "1300: #endif",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1302:  exit (e);",
      "1303: #endif",
      "1304:     }",
      "1305:   if (setgid (current_user.gid) < 0)",
      "1306:     sys_error (_(\"cannot set gid to %d: effective gid %d\"), current_user.gid, current_user.egid);",
      "1308:   current_user.euid = current_user.uid;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1309: #if HAVE_DECL_SETRESGID",
      "1310:   if (setresgid (current_user.gid, current_user.gid, current_user.gid) < 0)",
      "1311: #else",
      "1313: #endif",
      "",
      "---------------"
    ],
    "tests/glob.tests||tests/glob.tests": [
      "File: tests/glob.tests -> tests/glob.tests",
      "--- Hunk 1 ---",
      "[Context before]",
      "13: ${THIS_SH} ./glob3.sub",
      "14: ${THIS_SH} ./glob4.sub",
      "15: ${THIS_SH} ./glob5.sub",
      "17: MYDIR=$PWD # save where we are",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "16: ${THIS_SH} ./glob6.sub",
      "17: ${THIS_SH} ./glob7.sub",
      "",
      "---------------"
    ],
    "tests/glob6.sub||tests/glob6.sub": [
      "File: tests/glob6.sub -> tests/glob6.sub",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: # tests of the backslash-in-glob-patterns discussion on the austin-group ML",
      "3: : ${TMPDIR:=/var/tmp}",
      "5: ORIG=$PWD",
      "6: GLOBDIR=$TMPDIR/bash-glob-$$",
      "7: mkdir $GLOBDIR && cd $GLOBDIR",
      "9: # does the pattern matcher allow backslashes as escape characters and remove",
      "10: # them as part of matching?",
      "11: touch abcdefg",
      "12: pat='ab\\cd*'",
      "13: printf '<%s>\\n' $pat",
      "14: pat='\\.'",
      "15: printf '<%s>\\n' $pat",
      "16: rm abcdefg",
      "18: # how about when escaping pattern characters?",
      "19: touch '*abc.c'",
      "20: a='\\**.c'",
      "21: printf '%s\\n' $a",
      "22: rm -f '*abc.c'",
      "24: # how about when making the distinction between readable and searchable path",
      "25: # components?",
      "26: mkdir -m a=x searchable",
      "27: mkdir -m a=r readable",
      "29: p='searchable/\\.'",
      "30: printf \"%s\\n\" $p",
      "32: p='searchable/\\./.'",
      "33: printf \"%s\\n\" $p",
      "35: p='readable/\\.'",
      "36: printf \"%s\\n\" $p",
      "38: p='readable/\\./.'",
      "39: printf \"%s\\n\" $p",
      "41: printf \"%s\\n\" 'searchable/\\.'",
      "42: printf \"%s\\n\" 'readable/\\.'",
      "44: echo */.",
      "46: p='*/\\.'",
      "47: echo $p",
      "49: echo */'.'",
      "51: rmdir searchable readable",
      "53: cd $ORIG",
      "54: rmdir $GLOBDIR",
      "",
      "---------------"
    ],
    "tests/glob7.sub||tests/glob7.sub": [
      "File: tests/glob7.sub -> tests/glob7.sub",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: # according to Posix 2.13.3, a slash in a bracket expression renders that",
      "2: # bracket expression invalid",
      "3: shopt -s nullglob",
      "5: echo 1: [qwe/qwe]",
      "6: echo 2: [qwe/",
      "7: echo 3: [qwe/]",
      "9: echo 4: [qwe\\/qwe]",
      "10: echo 5: [qwe\\/",
      "11: echo 6: [qwe\\/]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "aa99ef520f943369c826b02f3398fa8eab7bfdfb",
      "candidate_info": {
        "commit_hash": "aa99ef520f943369c826b02f3398fa8eab7bfdfb",
        "repo": "bminor/bash",
        "commit_url": "https://github.com/bminor/bash/commit/aa99ef520f943369c826b02f3398fa8eab7bfdfb",
        "files": [
          "CWRU/CWRU.chlog",
          "execute_cmd.c",
          "execute_cmd.h",
          "include/shmbutil.h",
          "lib/glob/glob.c",
          "lib/glob/sm_loop.c",
          "lib/glob/smatch.c",
          "lib/sh/shmatch.c",
          "pathexp.c",
          "subst.c",
          "tests/glob.right",
          "tests/glob3.sub"
        ],
        "message": "commit bash-20191009 snapshot",
        "before_after_code_files": [
          "CWRU/CWRU.chlog||CWRU/CWRU.chlog",
          "execute_cmd.c||execute_cmd.c",
          "execute_cmd.h||execute_cmd.h",
          "include/shmbutil.h||include/shmbutil.h",
          "lib/glob/glob.c||lib/glob/glob.c",
          "lib/glob/sm_loop.c||lib/glob/sm_loop.c",
          "lib/glob/smatch.c||lib/glob/smatch.c",
          "lib/sh/shmatch.c||lib/sh/shmatch.c",
          "pathexp.c||pathexp.c",
          "subst.c||subst.c",
          "tests/glob.right||tests/glob.right",
          "tests/glob3.sub||tests/glob3.sub"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "CWRU/CWRU.chlog||CWRU/CWRU.chlog",
            "lib/glob/glob.c||lib/glob/glob.c",
            "pathexp.c||pathexp.c"
          ],
          "candidate": [
            "CWRU/CWRU.chlog||CWRU/CWRU.chlog",
            "lib/glob/glob.c||lib/glob/glob.c",
            "pathexp.c||pathexp.c"
          ]
        }
      },
      "candidate_diff": {
        "CWRU/CWRU.chlog||CWRU/CWRU.chlog": [
          "File: CWRU/CWRU.chlog -> CWRU/CWRU.chlog",
          "--- Hunk 1 ---",
          "[Context before]",
          "6726: subst.c",
          "6727:  - glob_expand_word_list: call shell_glob_filename with QGLOB_CTLESC",
          "6728:    because quote removal hasn't been performed yet",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6730:        10/7",
          "6731:        ----",
          "6732: pathexp.c",
          "6733:  - quote_string_for_globbing: if we have an unquoted backslash followed",
          "6734:    by a CTLESC-quoted character (not CTLESC-CTLESC), just perform the",
          "6735:    usual CTLESC-to-backslash conversion instead of skipping over it.",
          "6736:    Fixes issue raised in austin-group discussion about globbing by",
          "6737:    Geoff Clare <gwc@opengroup.org> (austin-group issue 1234), though",
          "6738:    it's still inherently ambiguous",
          "6740:        10/8",
          "6741:        ----",
          "6742: include/shmbutil.h",
          "6743:  - xwcsrtombs: extern declaration, to match other functions in that file",
          "6745: lib/glob/glob.c",
          "6746:  - wcdequote_pathname: new function, actual backslash quote removal code",
          "6747:    from wdequote_pathname; wdequote_pathname calls it",
          "6749: lib/glob/glob.c",
          "6750:  - {udequote,wcdequote}_pathname: now public void functions",
          "6752: lib/glob/smatch.c",
          "6753:  - DEQUOTE_PATHNAME: defined appropriately to udequote_pathname or",
          "6754:    wcdequote_pathname",
          "6756: lib/glob/sm_loop.c",
          "6757:  - DEQUOTE_PATHNAME: appropriate extern declaration",
          "6758:  - BRACKMATCH: call DEQUOTE_PATHNAME to dequote a character class name",
          "6759:    in a bracket expression. This is the result of a discussion on the",
          "6760:    austin-group mailing list, from Geoff Clare <gwc@opengroup.org> and",
          "6761:    Robert Elz <kre@bmunnari.oz.au>",
          "6763:        10/10",
          "6764:        -----",
          "6765: execute_cmd.[ch]",
          "6766:  - async_redirect_stdin: now a global function",
          "6768: subst.c",
          "6769:  - process_substitute: call async_redirect_stdin in the child to keep",
          "6770:    it from having stdin connected to the terminal, since it's not a",
          "6771:    job control process",
          "6773:        10/11",
          "6774:        -----",
          "6775: subst.c",
          "6776:  - process_substitute: in the child process, set interactive = 0, since",
          "6777:    an asynchronous process substitution process is not interactive.",
          "6778:    Seems to fix issue reported by Grisha Levit <grishalevit@gmail.com>",
          "6780: lib/sh/shmatch.c",
          "6781:  - sh_regmatch: implement a suggestion from Grisha Levit",
          "6782:    <grishalevit@gmail.com> and don't allow nocaseglob to enable case-",
          "6783:    insensitive regexp matching. It hasn't been documented that way",
          "6784:    in years",
          "",
          "---------------"
        ],
        "execute_cmd.c||execute_cmd.c": [
          "File: execute_cmd.c -> execute_cmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "126: static int restore_signal_mask PARAMS((sigset_t *));",
          "127: #endif",
          "131: static int builtin_status PARAMS((int));",
          "133: static int execute_for_command PARAMS((FOR_COM *));",
          "",
          "[Removed Lines]",
          "129: static void async_redirect_stdin PARAMS((void));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "521: }",
          "522: #endif",
          "525: async_redirect_stdin ()",
          "526: {",
          "527:   int fd;",
          "",
          "[Removed Lines]",
          "524: static void",
          "",
          "[Added Lines]",
          "522: void",
          "",
          "---------------"
        ],
        "execute_cmd.h||execute_cmd.h": [
          "File: execute_cmd.h -> execute_cmd.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "77: extern int execute_command_internal __P((COMMAND *, int, int, int, struct fd_bitmap *));",
          "78: extern int shell_execve __P((char *, char **, char **));",
          "79: extern void setup_async_signals __P((void));",
          "81: extern void undo_partial_redirects __P((void));",
          "82: extern void dispose_partial_redirects __P((void));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80: extern void async_redirect_stdin __P((void));",
          "",
          "---------------"
        ],
        "include/shmbutil.h||include/shmbutil.h": [
          "File: include/shmbutil.h -> include/shmbutil.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #if defined (HANDLE_MULTIBYTE)",
          "30: #include \"shmbchar.h\"",
          "",
          "[Removed Lines]",
          "32: extern size_t xmbsrtowcs __P((wchar_t *, const char **, size_t, mbstate_t *));",
          "33: extern size_t xdupmbstowcs __P((wchar_t **, char ***, const char *));",
          "35: extern size_t mbstrlen __P((const char *));",
          "37: extern char *xstrchr __P((const char *, int));",
          "",
          "[Added Lines]",
          "32: extern size_t xwcsrtombs PARAMS((char *, const wchar_t **, size_t, mbstate_t *));",
          "33: extern size_t xmbsrtowcs PARAMS((wchar_t *, const char **, size_t, mbstate_t *));",
          "34: extern size_t xdupmbstowcs PARAMS((wchar_t **, char ***, const char *));",
          "36: extern size_t mbstrlen PARAMS((const char *));",
          "38: extern char *xstrchr PARAMS((const char *, int));",
          "",
          "---------------"
        ],
        "lib/glob/glob.c||lib/glob/glob.c": [
          "File: lib/glob/glob.c -> lib/glob/glob.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "115: #if HANDLE_MULTIBYTE",
          "116: static int mbskipname __P((char *, char *, int));",
          "117: #endif",
          "118: #if HANDLE_MULTIBYTE",
          "120: static void wdequote_pathname __P((char *));",
          "121: #else",
          "122: #  define dequote_pathname udequote_pathname",
          "",
          "[Removed Lines]",
          "119: static void udequote_pathname __P((char *));",
          "",
          "[Added Lines]",
          "118: void udequote_pathname __P((char *));",
          "120: void wcdequote_pathname __P((wchar_t *));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "413: udequote_pathname (pathname)",
          "414:      char *pathname;",
          "415: {",
          "",
          "[Removed Lines]",
          "412: static void",
          "",
          "[Added Lines]",
          "413: void",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "432: #if HANDLE_MULTIBYTE",
          "434: static void",
          "435: wdequote_pathname (pathname)",
          "436:      char *pathname;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "435: void",
          "436: wcdequote_pathname (wpathname)",
          "437:      wchar_t *wpathname;",
          "438: {",
          "439:   int i, j;",
          "441:   for (i = j = 0; wpathname && wpathname[i]; )",
          "442:     {",
          "443:       if (wpathname[i] == L'\\\\')",
          "444:  i++;",
          "446:       wpathname[j++] = wpathname[i++];",
          "448:       if (wpathname[i - 1] == L'\\0')",
          "449:  break;",
          "450:     }",
          "451:   if (wpathname)",
          "452:     wpathname[j] = L'\\0';",
          "453: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "458:     }",
          "459:   orig_wpathname = wpathname;",
          "475:   memset (&ps, '\\0', sizeof(mbstate_t));",
          "",
          "[Removed Lines]",
          "461:   for (i = j = 0; wpathname && wpathname[i]; )",
          "462:     {",
          "463:       if (wpathname[i] == L'\\\\')",
          "464:  i++;",
          "466:       wpathname[j++] = wpathname[i++];",
          "468:       if (wpathname[i - 1] == L'\\0')",
          "469:  break;",
          "470:     }",
          "471:   if (wpathname)",
          "472:     wpathname[j] = L'\\0';",
          "",
          "[Added Lines]",
          "482:   wcdequote_pathname (wpathname);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "686:      a filename `DIR/PAT'.  If there is, and we can access it, just make the",
          "688:   hasglob = 0;",
          "690:     {",
          "691:       int dirlen;",
          "692:       struct stat finfo;",
          "",
          "[Removed Lines]",
          "689:   if (skip == 0 && (hasglob = glob_pattern_p (pat)) == 0 || hasglob == 2)",
          "",
          "[Added Lines]",
          "699:   if (skip == 0 && ((hasglob = glob_pattern_p (pat)) == 0 || hasglob == 2))",
          "",
          "---------------"
        ],
        "lib/glob/sm_loop.c||lib/glob/sm_loop.c": [
          "File: lib/glob/sm_loop.c -> lib/glob/sm_loop.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: static CHAR *BRACKMATCH __P((CHAR *, U_CHAR, int));",
          "30: static int EXTMATCH __P((INT, CHAR *, CHAR *, CHAR *, CHAR *, int));",
          "34: int",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: extern void DEQUOTE_PATHNAME __P((CHAR *));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "456:   {",
          "457:     bcopy (p + 1, ccname, (close - p - 1) * sizeof (CHAR));",
          "459:     pc = IS_CCLASS (orig_test, (XCHAR *)ccname);",
          "460:   }",
          "461:        if (pc == -1)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "463:     DEQUOTE_PATHNAME (ccname);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "929: #undef PATSCAN",
          "930: #undef STRCOMPARE",
          "931: #undef EXTMATCH",
          "932: #undef STRUCT",
          "933: #undef BRACKMATCH",
          "934: #undef STRCHR",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "937: #undef DEQUOTE_PATHNAME",
          "",
          "---------------"
        ],
        "lib/glob/smatch.c||lib/glob/smatch.c": [
          "File: lib/glob/smatch.c -> lib/glob/smatch.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "260: #define PATSCAN   glob_patscan",
          "261: #define STRCOMPARE  strcompare",
          "262: #define EXTMATCH  extmatch",
          "263: #define STRUCT   smat_struct",
          "264: #define STRCHR(S, C)  strchr((S), (C))",
          "265: #define MEMCHR(S, C, N)  memchr((S), (C), (N))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "263: #define DEQUOTE_PATHNAME udequote_pathname",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "500: #define PATSCAN   glob_patscan_wc",
          "501: #define STRCOMPARE  wscompare",
          "502: #define EXTMATCH  extmatch_wc",
          "503: #define STRUCT   wcsmat_struct",
          "504: #define STRCHR(S, C)  wcschr((S), (C))",
          "505: #define MEMCHR(S, C, N)  wmemchr((S), (C), (N))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "504: #define DEQUOTE_PATHNAME wcdequote_pathname",
          "",
          "---------------"
        ],
        "lib/sh/shmatch.c||lib/sh/shmatch.c": [
          "File: lib/sh/shmatch.c -> lib/sh/shmatch.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: #endif",
          "66:   rflags = REG_EXTENDED;",
          "68:     rflags |= REG_ICASE;",
          "69: #if !defined (ARRAY_VARS)",
          "70:   rflags |= REG_NOSUB;",
          "",
          "[Removed Lines]",
          "67:   if (glob_ignore_case || match_ignore_case)",
          "",
          "[Added Lines]",
          "67:   if (match_ignore_case)",
          "",
          "---------------"
        ],
        "pathexp.c||pathexp.c": [
          "File: pathexp.c -> pathexp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "243:  }",
          "244:       else if (pathname[i] == CTLESC)",
          "245:  {",
          "246:    if ((qflags & QGLOB_FILENAME) && pathname[i+1] == '/')",
          "247:      continue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "246: convert_to_backslash:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "359:    if ((qflags & QGLOB_CTLESC) && pathname[i] == CTLESC && (pathname[i+1] == CTLESC || pathname[i+1] == CTLNUL))",
          "361:  }",
          "362:       else if (pathname[i] == '\\\\' && (qflags & QGLOB_REGEXP))",
          "363:         last_was_backslash = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "362:    else if ((qflags & QGLOB_CTLESC) && pathname[i] == CTLESC)",
          "364:         pattern and we are handling quoted characters in the pattern,",
          "365:         convert the CTLESC to backslash and add the next character on",
          "366:         the theory that the backslash will quote the next character",
          "367:         but it would be inconsistent not to replace the CTLESC with",
          "368:         another backslash here. We can't tell at this point whether the",
          "369:         CTLESC comes from a backslash or other form of quoting in the",
          "371:      goto convert_to_backslash;",
          "",
          "---------------"
        ],
        "subst.c||subst.c": [
          "File: subst.c -> subst.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5898:   pid = make_child ((char *)NULL, 1);",
          "5899:   if (pid == 0)",
          "5900:     {",
          "5902:       free_pushed_string_input ();",
          "5906:       setup_async_signals ();",
          "5907:       subshell_environment |= SUBSHELL_COMSUB|SUBSHELL_PROCSUB;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5901: interactive = 0;",
          "5908:       if (open_for_read_in_child == 0)",
          "5909:  async_redirect_stdin ();",
          "",
          "---------------"
        ],
        "tests/glob.right||tests/glob.right": [
          "File: tests/glob.right -> tests/glob.right",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: [a",
          "21: [[:alpha:]",
          "22: ok 2",
          "23: ok 3",
          "24: == LANG=en_US.UTF-8 ==",
          "25: [[:alpha:]",
          "26: ok 1",
          "27: [a",
          "28: [[:alpha:]",
          "29: ok 2",
          "30: ok 3",
          "31: invalid character class",
          "32: == LANG=C ==",
          "33: ok 1",
          "34: ok 2",
          "35: ok 3",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: ok 2.1",
          "25: ok 4",
          "32: ok 2.1",
          "34: ok 4",
          "37: p",
          "38: p",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37: ok 5",
          "38: ok 6",
          "39: == LANG=en_US.UTF-8 ==",
          "40: ok 1",
          "41: ok 2",
          "42: ok 3",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: p",
          "47: p",
          "",
          "---------------"
        ],
        "tests/glob3.sub||tests/glob3.sub": [
          "File: tests/glob3.sub -> tests/glob3.sub",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #   along with this program.  If not, see <http://www.gnu.org/licenses/>.",
          "13: #",
          "14: : ${TMPDIR:=/var/tmp}",
          "17: matchfunc()",
          "18: {",
          "",
          "[Removed Lines]",
          "15: cd $TMPDIR",
          "",
          "[Added Lines]",
          "16: TESTDIR=${TMPDIR}/glob-test-$$",
          "17: mkdir ${TESTDIR}",
          "18: cd $TESTDIR ||  {",
          "19:         echo \"$TESTDIR: cannot cd\" >&2",
          "20:         exit 1",
          "21: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:  esac",
          "41:  case [x in",
          "42:  [[:alpha:]) echo bad 3;;",
          "44:  esac",
          "45: }",
          "47: echo invalid bracket expression",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:  case x in",
          "48:  [[:aeioux:]) echo bad 2.1 ;;",
          "50:  esac",
          "57:  # unclosed bracket char class expression just matches against \":alpha\"",
          "58:  case a in",
          "59:  [[:alpha]) echo ok 4;;",
          "61:  esac",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "57: {",
          "58:  echo == LANG=$LANG ==",
          "60:  case a] in",
          "61:  [[:aleph:]]) echo bad 1;;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:  touch p",
          "78:  # quoted character classes work as if they were unquoted now",
          "79:  echo [[:alpha:]]",
          "80:  echo [[:\"alpha\":]]",
          "81:  rm -f p",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "73:  esac",
          "78:  esac",
          "80:  case a in",
          "",
          "[Removed Lines]",
          "75:  case a in",
          "76:  [[:\"alpha\":]]) echo bad 4;;",
          "",
          "[Added Lines]",
          "98:  # Posix says quoted character class names work now",
          "99:  case x in",
          "100:  [[:\"alpha\":]]) echo ok 4;;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "135: export LANG=en_US.UTF-8",
          "136: matchfunc",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "162: cd $OLDPWD",
          "163: rm -rf $TESTDIR",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "605528a7c0bb69456703fa4a9bef5b5bcc63d3f7",
      "candidate_info": {
        "commit_hash": "605528a7c0bb69456703fa4a9bef5b5bcc63d3f7",
        "repo": "bminor/bash",
        "commit_url": "https://github.com/bminor/bash/commit/605528a7c0bb69456703fa4a9bef5b5bcc63d3f7",
        "files": [
          "CWRU/CWRU.chlog",
          "arrayfunc.c",
          "bashline.c",
          "builtins/declare.def",
          "builtins/return.def",
          "examples/loadables/push.c",
          "execute_cmd.c",
          "lib/glob/glob_loop.c",
          "subst.c",
          "test.c",
          "tests/glob.right",
          "tests/glob4.sub"
        ],
        "message": "commit bash-20190109 snapshot",
        "before_after_code_files": [
          "CWRU/CWRU.chlog||CWRU/CWRU.chlog",
          "arrayfunc.c||arrayfunc.c",
          "bashline.c||bashline.c",
          "builtins/declare.def||builtins/declare.def",
          "builtins/return.def||builtins/return.def",
          "examples/loadables/push.c||examples/loadables/push.c",
          "execute_cmd.c||execute_cmd.c",
          "lib/glob/glob_loop.c||lib/glob/glob_loop.c",
          "subst.c||subst.c",
          "test.c||test.c",
          "tests/glob.right||tests/glob.right",
          "tests/glob4.sub||tests/glob4.sub"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "CWRU/CWRU.chlog||CWRU/CWRU.chlog",
            "bashline.c||bashline.c"
          ],
          "candidate": [
            "CWRU/CWRU.chlog||CWRU/CWRU.chlog",
            "bashline.c||bashline.c"
          ]
        }
      },
      "candidate_diff": {
        "CWRU/CWRU.chlog||CWRU/CWRU.chlog": [
          "File: CWRU/CWRU.chlog -> CWRU/CWRU.chlog",
          "--- Hunk 1 ---",
          "[Context before]",
          "4971:      1/6/2019",
          "4972:      --------",
          "4980: examples/loadables/basename.c",
          "4981:  - make sure to include bashgetopt.h. Reported by Angel",
          "",
          "[Removed Lines]",
          "4973: execute_cmd.c",
          "4974:  - execute_simple_command: catch all non-zero special builtin errors",
          "4975:    (e.g. return not in a function) and make sure a non-interactive",
          "4976:    posix-mode shell exits. Old code expected builtins to signal",
          "4977:    internal fatal errors with code > 256. Fixes bug reported by",
          "4978:    Robert Hailey <bash@osndok.com>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4993:  - u32toutf16: correct the second argument to be wchar_t *, and treat",
          "4994:    it as such, even though it doesn't make a difference in practice.",
          "4995:    Report and fix from Eduardo Bustamante <dualbus@gmail.com>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4991:         1/8",
          "4992:         ---",
          "4994: builtins/return.def",
          "4995:  - return_builtin: return EX_USAGE if we're not executing a shell",
          "4996:    function or sourcing a script, so a posix-mode shell exits. Fixes",
          "4997:    bug reported by Robert Hailey <bash@osndok.com>",
          "4999: builtins/declare.def",
          "5000:  - declare_internal: don't let `declare -f +f' turn off the function",
          "5001:    attribute. Fix from Grisha Levit <grishalevit@gmail.com>",
          "5002:  - declare_internal: reject attempts to add the -A or -a attributes",
          "5003:    to functions. Report from Grisha Levit <grishalevit@gmail.com>",
          "5005:         1/9",
          "5006:         ---",
          "5007: bashline.c",
          "5008:  - completion_glob_pattern: new function, returns true if the passed",
          "5009:    string contains a glob pattern that should be process by the glob",
          "5010:    completion code. Completion glob patterns don't pay attention to",
          "5011:    backslashes unless they're the last character in the string. This",
          "5012:    is a different, more self-contained, fix for the problem reported",
          "5013:    by Tom Ryder <tom@sanctum.geek.nz>",
          "5015: lib/glob/glob_loop.c",
          "5016:  - INTERNAL_GLOB_PATTERN_P: restore change from 4/27 and make this",
          "5017:    function return non-zero if it encounters a backslash in the string.",
          "5018:    It needs to match pathexp.c:unquoted_glob_pattern_p(). Adds fix",
          "5019:    back for issue reported by axel@freakout.de",
          "5021: test.c",
          "5022:  - arithcomp: when calling evalexp, make sure to call it with the",
          "5023:    EXP_EXPANDED flag, since all arguments here have been evaluated",
          "5024:    already",
          "5026: arrayfunc.c",
          "5027:  - array_expand_index: call evalexp with EXP_EXPANDED flag, since we",
          "5028:    have run the string through expand_arith_string already",
          "",
          "---------------"
        ],
        "arrayfunc.c||arrayfunc.c": [
          "File: arrayfunc.c -> arrayfunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "964:   savecmd = this_command_name;",
          "965:   this_command_name = (char *)NULL;",
          "967:   this_command_name = savecmd;",
          "968:   if (t != exp)",
          "969:     free (t);",
          "",
          "[Removed Lines]",
          "966:   val = evalexp (t, 0, &expok);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "bashline.c||bashline.c": [
          "File: bashline.c -> bashline.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "231: static int bash_complete_command __P((int, int));",
          "232: static int bash_possible_command_completions __P((int, int));",
          "234: static char *glob_complete_word __P((const char *, int));",
          "235: static int bash_glob_completion_internal __P((int));",
          "236: static int bash_glob_complete_word __P((int, int));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "234: static int completion_glob_pattern __P((const char *));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1745:     {",
          "1746:       matches = rl_completion_matches (text, glob_complete_word);",
          "",
          "[Removed Lines]",
          "1744:   if (!matches && glob_pattern_p (text))",
          "",
          "[Added Lines]",
          "1745:   if (!matches && completion_glob_pattern (text))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1850:    glob_matches = (char **)NULL;",
          "1851:  }",
          "1856:   aliases, reserved words, functions or builtins.  We must check",
          "",
          "[Removed Lines]",
          "1853:       globpat = glob_pattern_p (hint_text);",
          "",
          "[Added Lines]",
          "1854:       globpat = completion_glob_pattern (hint_text);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3713:   return bash_specific_completion (what_to_do, command_word_completion_function);",
          "3714: }",
          "3716: static char *globtext;",
          "3717: static char *globorig;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3717: static int",
          "3718: completion_glob_pattern (string)",
          "3719:      const char *string;",
          "3720: {",
          "3721:   register int c;",
          "3722:   char *send;",
          "3723:   int open;",
          "3725:   DECLARE_MBSTATE;",
          "3727:   open = 0;",
          "3728:   send = string + strlen (string);",
          "3730:   while (c = *string++)",
          "3731:     {",
          "3732:       switch (c)",
          "3733:  {",
          "3734:  case '?':",
          "3735:  case '*':",
          "3736:    return (1);",
          "3738:  case '[':",
          "3739:    open++;",
          "3740:    continue;",
          "3742:  case ']':",
          "3743:    if (open)",
          "3744:      return (1);",
          "3745:    continue;",
          "3747:  case '+':",
          "3748:  case '@':",
          "3749:  case '!':",
          "3751:      return (1);",
          "3752:    continue;",
          "3754:  case '\\\\':",
          "3755:    if (*string == 0)",
          "3756:      return (0);",
          "3757:  }",
          "3761: #ifdef HANDLE_MULTIBYTE",
          "3762:       string--;",
          "3763:       ADVANCE_CHAR_P (string, send - string);",
          "3764:       string++;",
          "3765: #else",
          "3766:       ADVANCE_CHAR_P (string, send - string);",
          "3767: #endif",
          "3768:     }",
          "3769:   return (0);",
          "3770: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3877:       t = substring (rl_line_buffer, p, rl_point);",
          "3878:     }",
          "3882:   FREE (t);",
          "",
          "[Removed Lines]",
          "3880:   if (t && glob_pattern_p (t) == 0)",
          "",
          "[Added Lines]",
          "3936:   if (t && completion_glob_pattern (t) == 0)",
          "",
          "---------------"
        ],
        "builtins/declare.def||builtins/declare.def": [
          "File: builtins/declare.def -> builtins/declare.def",
          "--- Hunk 1 ---",
          "[Context before]",
          "533:         any_failed++;",
          "534:         NEXT_VARIABLE ();",
          "535:       }",
          "538:     if (flags_on == att_function && flags_off == 0)",
          "539:       {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "536:     else if (flags_on & (att_array|att_assoc))",
          "537:       {",
          "538:         sh_invalidopt ((flags_on & att_array) ? \"-a\" : \"-A\");",
          "539:         any_failed++;",
          "540:         NEXT_VARIABLE ();",
          "541:       }",
          "",
          "---------------"
        ],
        "builtins/return.def||builtins/return.def": [
          "File: builtins/return.def -> builtins/return.def",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:   else",
          "67:     {",
          "68:       builtin_error (_(\"can only `return' from a function or sourced script\"));",
          "70:     }",
          "71: }",
          "",
          "[Removed Lines]",
          "69:       return (EXECUTION_FAILURE);",
          "",
          "[Added Lines]",
          "69:       return (EX_USAGE);",
          "",
          "---------------"
        ],
        "examples/loadables/push.c||examples/loadables/push.c": [
          "File: examples/loadables/push.c -> examples/loadables/push.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: extern int errno;",
          "36: #endif",
          "39: extern int last_command_exit_value;",
          "41: int",
          "",
          "[Removed Lines]",
          "38: extern int dollar_dollar_pid;",
          "",
          "[Added Lines]",
          "38: extern pid_t dollar_dollar_pid;",
          "",
          "---------------"
        ],
        "execute_cmd.c||execute_cmd.c": [
          "File: execute_cmd.c -> execute_cmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4504:     if (builtin_is_special)",
          "4506:   }",
          "4511:    a special builtin, they persist after the builtin",
          "",
          "[Removed Lines]",
          "4507:        else",
          "4508:   special_builtin_failed = builtin_is_special && result != EXECUTION_SUCCESS;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/glob/glob_loop.c||lib/glob/glob_loop.c": [
          "File: lib/glob/glob_loop.c -> lib/glob/glob_loop.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:  continue;",
          "56:       case L('\\\\'):",
          "59:     if the pattern ends in a backslash anyway), but otherwise return 1,",
          "60:     since the matching engine uses backslash as an escape character",
          "62:  return (*p != L('\\0'));",
          "68:       }",
          "70:   return 0;",
          "",
          "[Removed Lines]",
          "57: #if 0",
          "63: #else",
          "65:  if (*p++ == L('\\0'))",
          "66:    return 0;",
          "67: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "subst.c||subst.c": [
          "File: subst.c -> subst.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3568:       td.word = savestring (string);",
          "3569:       list = call_expand_word_internal (&td, quoted, 0, (int *)NULL, (int *)NULL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3569:       if (quoted & Q_ARRAYSUB)",
          "3570:  td.flags |= W_NOCOMSUB;",
          "3571: #endif",
          "",
          "---------------"
        ],
        "test.c||test.c": [
          "File: test.c -> test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "345:   if (flags & TEST_ARITHEXP)",
          "346:     {",
          "348:       if (expok == 0)",
          "351:       if (expok == 0)",
          "353:     }",
          "",
          "[Removed Lines]",
          "347:       l = evalexp (s, 0, &expok);",
          "350:       r = evalexp (t, 0, &expok);",
          "",
          "[Added Lines]",
          "347:       l = evalexp (s, EXP_EXPANDED, &expok);",
          "350:       r = evalexp (t, EXP_EXPANDED, &expok);",
          "",
          "---------------"
        ],
        "tests/glob.right||tests/glob.right": [
          "File: tests/glob.right -> tests/glob.right",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: argv[1] = <a\\?>",
          "62: a?",
          "63: aa",
          "64: argv[1] = <a>",
          "65: argv[2] = <abc>",
          "66: argv[3] = <abd>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64: <define\\/\\",
          "65: />",
          "",
          "---------------"
        ],
        "tests/glob4.sub||tests/glob4.sub": [
          "File: tests/glob4.sub -> tests/glob4.sub",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: var='a\\a'",
          "13: printf \"%s\\n\" ${var}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: # shell's idea of a glob pattern and libglob's idea of a glob pattern have to",
          "16: # be identical",
          "17: PRE='\\/'",
          "18: printf '<%s>\\n' 'define'${PRE}'\\",
          "19: /'",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fc94d47412833d9c3f0f9b243e1ac233e8846685",
      "candidate_info": {
        "commit_hash": "fc94d47412833d9c3f0f9b243e1ac233e8846685",
        "repo": "bminor/bash",
        "commit_url": "https://github.com/bminor/bash/commit/fc94d47412833d9c3f0f9b243e1ac233e8846685",
        "files": [
          "CWRU/CWRU.chlog",
          "MANIFEST",
          "bashline.c",
          "builtins/fc.def",
          "configure",
          "configure.ac",
          "doc/bash.1",
          "doc/bashref.texi",
          "doc/version.texi",
          "execute_cmd.c",
          "hashlib.c",
          "lib/readline/doc/hsuser.texi",
          "lib/readline/doc/readline.3",
          "lib/readline/doc/rluser.texi",
          "lib/readline/doc/version.texi",
          "lib/readline/emacs_keymap.c",
          "lib/readline/funmap.c",
          "lib/readline/misc.c",
          "lib/readline/readline.c",
          "lib/readline/readline.h",
          "lib/readline/rlprivate.h",
          "shell.c",
          "support/config.guess",
          "support/config.guess.20181116",
          "support/config.sub",
          "support/config.sub.20181116",
          "tests/RUN-ONE-TEST",
          "tests/history.right",
          "tests/history.tests",
          "tests/history5.sub"
        ],
        "message": "commit bash-20200504 snapshot",
        "before_after_code_files": [
          "CWRU/CWRU.chlog||CWRU/CWRU.chlog",
          "bashline.c||bashline.c",
          "builtins/fc.def||builtins/fc.def",
          "configure.ac||configure.ac",
          "execute_cmd.c||execute_cmd.c",
          "hashlib.c||hashlib.c",
          "lib/readline/emacs_keymap.c||lib/readline/emacs_keymap.c",
          "lib/readline/funmap.c||lib/readline/funmap.c",
          "lib/readline/misc.c||lib/readline/misc.c",
          "lib/readline/readline.c||lib/readline/readline.c",
          "lib/readline/readline.h||lib/readline/readline.h",
          "lib/readline/rlprivate.h||lib/readline/rlprivate.h",
          "shell.c||shell.c",
          "support/config.guess||support/config.guess",
          "support/config.guess.20181116||support/config.guess.20181116",
          "support/config.sub||support/config.sub",
          "support/config.sub.20181116||support/config.sub.20181116",
          "tests/history.right||tests/history.right",
          "tests/history.tests||tests/history.tests",
          "tests/history5.sub||tests/history5.sub"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "CWRU/CWRU.chlog||CWRU/CWRU.chlog",
            "bashline.c||bashline.c",
            "configure.ac||configure.ac",
            "shell.c||shell.c"
          ],
          "candidate": [
            "CWRU/CWRU.chlog||CWRU/CWRU.chlog",
            "bashline.c||bashline.c",
            "configure.ac||configure.ac",
            "shell.c||shell.c"
          ]
        }
      },
      "candidate_diff": {
        "CWRU/CWRU.chlog||CWRU/CWRU.chlog": [
          "File: CWRU/CWRU.chlog -> CWRU/CWRU.chlog",
          "--- Hunk 1 ---",
          "[Context before]",
          "8288:    terminal's process group, remove the code that tries to clean up",
          "8289:    after that",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8291:         5/4",
          "8292:         ---",
          "8293: doc/bash.1",
          "8294:  - make sure to mention /etc/inputrc as the ultimate default readline",
          "8295:    init file, like other documentation does. Update from",
          "8296:    Greg Price <gnprice@gmail.com>",
          "8298: lib/readline/readline.c",
          "8299:  - if the private startup hook function variable _rl_internal_startup_hook",
          "8300:    is set, execute that after any user-specified startup hook",
          "8302: lib/readline/rlprivate.h",
          "8303:  - _rl_internal_startup_hook: new extern declaration",
          "8305: bashline.c,lib/readline/{misc.c,readline.h}",
          "8306:  - operate_and_get_next: moved to rl_operate_and_get_next so it's",
          "8307:    available to all readline programs, uses _rl_internal_startup_hook.",
          "8308:    Based on patch from Greg Price <gnprice@gmail.com>",
          "8310: lib/readline/funmap.c",
          "8311:  - \"operate-and-get-next\": now a bindable readline command",
          "8313: lib/readline/emacs_keymap.c",
          "8314:  - rl_operate_and_get_next: bound to ^O in emacs mode by default",
          "8316: doc/bash.1,lib/readline/{readline.3,rluser.texi}",
          "8317:  - operate-and-get-next: move to readline section of the manuals, out of",
          "8318:    bash-specific functions section",
          "8320:         5/5",
          "8321:         ---",
          "8322: hashlib.c",
          "8323:  - hash_string: use a series of shifts and adds to avoid a multiply by",
          "8324:    FNV_PRIME. From Landon Curt Noll's FNV web page",
          "8326: builtins/fc.def",
          "8327:  - fc_gethist,fc_gethnum: now take an additional argument indicating the",
          "8328:    operating mode: if the arg is 1, fc is listing commands; if it is 0,",
          "8329:    fc is executing commands. Affects how -0 is handled (fc_gethnum",
          "8330:    returns -1). Changed callers to handle the return value appropriately.",
          "8331:    Report from Jason Franklin <jason.franklin@quoininc.com> about",
          "8332:    seg fault and core dump",
          "8333:  - fc_builtin: if fc_gethnum returns < 0 when setting histbeg or histend,",
          "8334:    report a range error",
          "8336: doc/bash.1,lib/readline/doc/hsuser.texi",
          "8337:  - fc: document how 0 and -0 are treated for listing and executing",
          "8339: shell.c",
          "8340:  - run_one_command: call parse_and_execute with SEVAL_RESETLINE so the",
          "8341:    line number gets set to 1. Reported by Rob Landley <rob@landley.net>",
          "8343:         5/8",
          "8344:         ---",
          "8345: support/config.{guess,sub}",
          "8346:  - update to latest versions",
          "8348: configure.ac",
          "8349:  - add support for `genode' from Emery Hemingway <ehmry@posteo.net>",
          "",
          "---------------"
        ],
        "bashline.c||bashline.c": [
          "File: bashline.c -> bashline.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "119: static int shell_expand_line PARAMS((int, int));",
          "120: static int display_shell_version PARAMS((int, int));",
          "123: static int bash_ignore_filenames PARAMS((char **));",
          "124: static int bash_ignore_everything PARAMS((char **));",
          "",
          "[Removed Lines]",
          "121: static int operate_and_get_next PARAMS((int, int));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "480:   rl_add_defun (\"insert-last-argument\", rl_yank_last_arg, -1);",
          "483:   rl_add_defun (\"display-shell-version\", display_shell_version, -1);",
          "484:   rl_add_defun (\"edit-and-execute-command\", emacs_edit_and_execute_command, -1);",
          "",
          "[Removed Lines]",
          "482:   rl_add_defun (\"operate-and-get-next\", operate_and_get_next, -1);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "517:   rl_bind_key_if_unbound_in_map ('^', history_expand_line, emacs_meta_keymap);",
          "518: #endif",
          "521:   rl_bind_key_if_unbound_in_map (CTRL ('V'), display_shell_version, emacs_ctlx_keymap);",
          "",
          "[Removed Lines]",
          "520:   rl_bind_key_if_unbound_in_map (CTRL ('O'), operate_and_get_next, emacs_standard_keymap);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "920:   return (result);",
          "921: }",
          "961:    command being entered (if no explicit argument is given), otherwise on",
          "",
          "[Removed Lines]",
          "925: static int saved_history_logical_offset = -1;",
          "927: #define HISTORY_FULL() (history_is_stifled () && history_length >= history_max_entries)",
          "929: static int",
          "930: set_saved_history ()",
          "931: {",
          "932:   int absolute_offset, count;",
          "934:   if (saved_history_logical_offset >= 0)",
          "935:     {",
          "936:       absolute_offset = saved_history_logical_offset - history_base;",
          "937:       count = where_history () - absolute_offset;",
          "938:       rl_get_previous_history (count, 0);",
          "939:     }",
          "940:   saved_history_logical_offset = -1;",
          "941:   rl_startup_hook = old_rl_startup_hook;",
          "942:   return (0);",
          "943: }",
          "945: static int",
          "946: operate_and_get_next (count, c)",
          "947:      int count, c;",
          "948: {",
          "950:   rl_newline (1, c);",
          "952:   saved_history_logical_offset = rl_explicit_arg ? count : where_history () + history_base + 1;",
          "954:   old_rl_startup_hook = rl_startup_hook;",
          "955:   rl_startup_hook = set_saved_history;",
          "957:   return 0;",
          "958: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "builtins/fc.def||builtins/fc.def": [
          "File: builtins/fc.def -> builtins/fc.def",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:  } while (0)",
          "149: static char *fc_dosubs PARAMS((char *, REPL *));",
          "152: static int fc_number PARAMS((WORD_LIST *));",
          "153: static void fc_replhist PARAMS((char *));",
          "154: #ifdef INCLUDE_UNUSED",
          "",
          "[Removed Lines]",
          "150: static char *fc_gethist PARAMS((char *, HIST_ENTRY **));",
          "151: static int fc_gethnum PARAMS((char *, HIST_ENTRY **));",
          "",
          "[Added Lines]",
          "150: static char *fc_gethist PARAMS((char *, HIST_ENTRY **, int));",
          "151: static int fc_gethnum PARAMS((char *, HIST_ENTRY **, int));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "265:       if (command == NULL)",
          "266:  {",
          "",
          "[Removed Lines]",
          "263:       command = fc_gethist (list ? list->word->word : (char *)NULL, hlist);",
          "",
          "[Added Lines]",
          "263:       command = fc_gethist (list ? list->word->word : (char *)NULL, hlist, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "329:   if (list)",
          "330:     {",
          "332:       list = list->next;",
          "334:       if (list)",
          "336:       else if (histbeg == real_last)",
          "337:  histend = listing ? real_last : histbeg;",
          "338:       else",
          "",
          "[Removed Lines]",
          "331:       histbeg = fc_gethnum (list->word->word, hlist);",
          "335:  histend = fc_gethnum (list->word->word, hlist);",
          "",
          "[Added Lines]",
          "331:       histbeg = fc_gethnum (list->word->word, hlist, listing);",
          "335:  histend = fc_gethnum (list->word->word, hlist, listing);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "353:  histbeg = histend = last_hist;",
          "354:     }",
          "358:   if (listing == 0 && hist_last_line_added)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "357:   if ((histbeg < 0) || (histend < 0))",
          "358:     {",
          "359:       sh_erange ((char *)NULL, _(\"history specification\"));",
          "360:       return (EXECUTION_FAILURE);",
          "361:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "501:    COMMAND is a number, then it was specified in relative terms.  If it",
          "503: static int",
          "505:      char *command;",
          "506:      HIST_ENTRY **hlist;",
          "507: {",
          "508:   int sign, n, clen, rh;",
          "509:   register int i, j, last_hist, real_last;",
          "",
          "[Removed Lines]",
          "504: fc_gethnum (command, hlist)",
          "",
          "[Added Lines]",
          "509:    is a string, then it is the start of a command line present in HLIST.",
          "512: fc_gethnum (command, hlist, mode)",
          "515:      int mode;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "569:    return (n < 0 ? 0 : n);",
          "570:  }",
          "571:       else if (n == 0)",
          "573:       else",
          "574:  {",
          "575:    n -= history_base;",
          "",
          "[Removed Lines]",
          "572:  return ((sign == -1) ? real_last : i);",
          "",
          "[Added Lines]",
          "581:  return ((sign == -1) ? (mode ? real_last : -1) : i);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "587: }",
          "591: static char *",
          "593:      char *command;",
          "594:      HIST_ENTRY **hlist;",
          "595: {",
          "596:   int i;",
          "598:   if (hlist == 0)",
          "599:     return ((char *)NULL);",
          "603:   if (i >= 0)",
          "604:     return (savestring (histline (i)));",
          "",
          "[Removed Lines]",
          "592: fc_gethist (command, hlist)",
          "601:   i = fc_gethnum (command, hlist);",
          "",
          "[Added Lines]",
          "599:    COMMAND in HLIST, and return a malloc()'ed copy of it.",
          "602: fc_gethist (command, hlist, mode)",
          "605:      int mode;",
          "612:   i = fc_gethnum (command, hlist, mode);",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: dnl",
          "6: dnl Process this file with autoconf to produce a configure script.",
          "10: #",
          "11: #   This program is free software: you can redistribute it and/or modify",
          "",
          "[Removed Lines]",
          "8: # Copyright (C) 1987-2019 Free Software Foundation, Inc.",
          "",
          "[Added Lines]",
          "8: # Copyright (C) 1987-2020 Free Software Foundation, Inc.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21: #   You should have received a copy of the GNU General Public License",
          "22: #   along with this program.  If not, see <http://www.gnu.org/licenses/>.",
          "26: define(bashvers, 5.0)",
          "27: define(relstatus, maint)",
          "",
          "[Removed Lines]",
          "24: AC_REVISION([for Bash 5.0, version 5.014])dnl",
          "",
          "[Added Lines]",
          "24: AC_REVISION([for Bash 5.0, version 5.015])dnl",
          "",
          "---------------"
        ],
        "execute_cmd.c||execute_cmd.c": [
          "File: execute_cmd.c -> execute_cmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4289:      result = last_command_exit_value;",
          "4290:    close_pipes (pipe_in, pipe_out);",
          "4295:    return (result);",
          "4296:  }",
          "4297:     }",
          "",
          "[Removed Lines]",
          "4292: #if 0",
          "4293:    bind_lastarg ((char *)NULL);",
          "4294: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hashlib.c||hashlib.c": [
          "File: hashlib.c -> hashlib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "220:   for (i = FNV_OFFSET; *s; s++)",
          "221:     {",
          "223:       i ^= *s;",
          "224:     }",
          "",
          "[Removed Lines]",
          "222:       i *= FNV_PRIME;",
          "",
          "[Added Lines]",
          "225:       i += (i<<1) + (i<<4) + (i<<7) + (i<<8) + (i<<24);",
          "",
          "---------------"
        ],
        "lib/readline/emacs_keymap.c||lib/readline/emacs_keymap.c": [
          "File: lib/readline/emacs_keymap.c -> lib/readline/emacs_keymap.c"
        ],
        "lib/readline/funmap.c||lib/readline/funmap.c": [
          "File: lib/readline/funmap.c -> lib/readline/funmap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:   { \"non-incremental-forward-search-history-again\", rl_noninc_forward_search_again },",
          "118:   { \"non-incremental-reverse-search-history-again\", rl_noninc_reverse_search_again },",
          "119:   { \"old-menu-complete\", rl_old_menu_complete },",
          "120:   { \"overwrite-mode\", rl_overwrite_mode },",
          "121: #if defined (_WIN32)",
          "122:   { \"paste-from-clipboard\", rl_paste_from_clipboard },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120:   { \"operate-and-get-next\", rl_operate_and_get_next },",
          "",
          "---------------"
        ],
        "lib/readline/misc.c||lib/readline/misc.c": [
          "File: lib/readline/misc.c -> lib/readline/misc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "637:   return 0;",
          "638: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "644: static rl_hook_func_t *_rl_saved_internal_startup_hook = 0;",
          "645: static int saved_history_logical_offset = -1;",
          "647: #define HISTORY_FULL() (history_is_stifled () && history_length >= history_max_entries)",
          "649: static int",
          "650: set_saved_history ()",
          "651: {",
          "652:   int absolute_offset, count;",
          "654:   if (saved_history_logical_offset >= 0)",
          "655:     {",
          "656:       absolute_offset = saved_history_logical_offset - history_base;",
          "657:       count = where_history () - absolute_offset;",
          "658:       rl_get_previous_history (count, 0);",
          "659:     }",
          "660:   saved_history_logical_offset = -1;",
          "661:   _rl_internal_startup_hook = _rl_saved_internal_startup_hook;",
          "663:   return (0);",
          "664: }",
          "666: int",
          "667: rl_operate_and_get_next (count, c)",
          "668:      int count, c;",
          "669: {",
          "671:   rl_newline (1, c);",
          "673:   saved_history_logical_offset = rl_explicit_arg ? count : where_history () + history_base + 1;",
          "676:   _rl_saved_internal_startup_hook = _rl_internal_startup_hook;",
          "677:   _rl_internal_startup_hook = set_saved_history;",
          "679:   return 0;",
          "680: }",
          "",
          "---------------"
        ],
        "lib/readline/readline.c||lib/readline/readline.c": [
          "File: lib/readline/readline.c -> lib/readline/readline.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "200: rl_hook_func_t *rl_startup_hook = (rl_hook_func_t *)NULL;",
          "203:    readline_internal_setup () returns and readline_internal starts",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204: rl_hook_func_t *_rl_internal_startup_hook = (rl_hook_func_t *)NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "420:   if (rl_startup_hook)",
          "421:     (*rl_startup_hook) ();",
          "423:   rl_deactivate_mark ();",
          "425: #if defined (VI_MODE)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "427:   if (_rl_internal_startup_hook)",
          "428:     (*_rl_internal_startup_hook) ();",
          "",
          "---------------"
        ],
        "lib/readline/readline.h||lib/readline/readline.h": [
          "File: lib/readline/readline.h -> lib/readline/readline.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "133: extern int rl_end_of_history PARAMS((int, int));",
          "134: extern int rl_get_next_history PARAMS((int, int));",
          "135: extern int rl_get_previous_history PARAMS((int, int));",
          "138: extern int rl_set_mark PARAMS((int, int));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136: extern int rl_operate_and_get_next PARAMS((int, int));",
          "",
          "---------------"
        ],
        "lib/readline/rlprivate.h||lib/readline/rlprivate.h": [
          "File: lib/readline/rlprivate.h -> lib/readline/rlprivate.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "546: extern int _rl_executing_keyseq_size;",
          "549: extern _rl_search_cxt *_rl_nscxt;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "548: extern rl_hook_func_t *_rl_internal_startup_hook;",
          "",
          "---------------"
        ],
        "shell.c||shell.c": [
          "File: shell.c -> shell.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1434:    command_error (\"run_one_command\", CMDERR_BADJUMP, code, 0);",
          "1435:  }",
          "1436:     }",
          "1438: }",
          "",
          "[Removed Lines]",
          "1437:    return (parse_and_execute (savestring (command), \"-c\", SEVAL_NOHIST));",
          "",
          "[Added Lines]",
          "1437:    return (parse_and_execute (savestring (command), \"-c\", SEVAL_NOHIST|SEVAL_RESETLINE));",
          "",
          "---------------"
        ],
        "support/config.guess||support/config.guess": [
          "File: support/config.guess -> support/config.guess",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #! /bin/sh",
          "2: # Attempt to guess a canonical system name.",
          "7: # This file is free software; you can redistribute it and/or modify it",
          "8: # under the terms of the GNU General Public License as published by",
          "",
          "[Removed Lines]",
          "3: #   Copyright 1992-2018 Free Software Foundation, Inc.",
          "5: timestamp='2018-08-29'",
          "",
          "[Added Lines]",
          "3: #   Copyright 1992-2020 Free Software Foundation, Inc.",
          "5: timestamp='2020-04-26'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50: GNU config.guess ($timestamp)",
          "52: Originally written by Per Bothner.",
          "55: This is free software; see the source for copying conditions.  There is NO",
          "56: warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"",
          "",
          "[Removed Lines]",
          "53: Copyright 1992-2018 Free Software Foundation, Inc.",
          "",
          "[Added Lines]",
          "53: Copyright 1992-2020 Free Software Foundation, Inc.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97: tmp=",
          "98: # shellcheck disable=SC2172",
          "102: set_cc_for_build() {",
          "103:     : \"${TMPDIR=/tmp}\"",
          "104:     # shellcheck disable=SC2039",
          "105:     { tmp=`(umask 077 && mktemp -d \"$TMPDIR/cgXXXXXX\") 2>/dev/null` && test -n \"$tmp\" && test -d \"$tmp\" ; } ||",
          "",
          "[Removed Lines]",
          "99: trap 'test -z \"$tmp\" || rm -fr \"$tmp\"' 1 2 13 15",
          "100: trap 'exitcode=$?; test -z \"$tmp\" || rm -fr \"$tmp\"; exit $exitcode' 0",
          "",
          "[Added Lines]",
          "99: trap 'test -z \"$tmp\" || rm -fr \"$tmp\"' 0 1 2 13 15",
          "102:     # prevent multiple calls if $tmp is already set",
          "103:     test \"$tmp\" && return 0",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "264:  echo \"$UNAME_MACHINE\"-unknown-solidbsd\"$UNAME_RELEASE\"",
          "265:  exit ;;",
          "266:     macppc:MirBSD:*:*)",
          "267:  echo powerpc-unknown-mirbsd\"$UNAME_RELEASE\"",
          "268:  exit ;;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "268:  echo \"$UNAME_MACHINE\"-unknown-os108_\"$UNAME_RELEASE\"",
          "269:  exit ;;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "273:  echo \"$UNAME_MACHINE\"-unknown-sortix",
          "274:  exit ;;",
          "276:  echo \"$UNAME_MACHINE\"-unknown-redox",
          "277:  exit ;;",
          "278:     mips:OSF1:*.*)",
          "281:     alpha:OSF1:*:*)",
          "282:  case $UNAME_RELEASE in",
          "",
          "[Removed Lines]",
          "279:         echo mips-dec-osf1",
          "280:         exit ;;",
          "",
          "[Added Lines]",
          "280:  echo \"$UNAME_MACHINE\"-unknown-twizzler",
          "281:  exit ;;",
          "286:  echo mips-dec-osf1",
          "287:  exit ;;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "392:  echo i386-pc-auroraux\"$UNAME_RELEASE\"",
          "393:  exit ;;",
          "394:     i86pc:SunOS:5.*:* | i86xen:SunOS:5.*:*)",
          "404:  exit ;;",
          "405:     sun4*:SunOS:6*:*)",
          "406:  # According to config.sub, this is the proper way to canonicalize",
          "",
          "[Removed Lines]",
          "395:  UNAME_REL=\"`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\"",
          "396:  case `isainfo -b` in",
          "397:      32)",
          "398:   echo i386-pc-solaris2\"$UNAME_REL\"",
          "399:   ;;",
          "400:      64)",
          "401:   echo x86_64-pc-solaris2\"$UNAME_REL\"",
          "402:   ;;",
          "403:  esac",
          "",
          "[Added Lines]",
          "402:  set_cc_for_build",
          "403:  SUN_ARCH=i386",
          "404:  # If there is a compiler, see if it is configured for 64-bit objects.",
          "405:  # Note that the Sun cc does not turn __LP64__ into 1 like gcc does.",
          "406:  # This test works for both compilers.",
          "407:  if [ \"$CC_FOR_BUILD\" != no_compiler_found ]; then",
          "408:      if (echo '#ifdef __amd64'; echo IS_64BIT_ARCH; echo '#endif') | \\",
          "409:   (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\",
          "410:   grep IS_64BIT_ARCH >/dev/null",
          "411:      then",
          "412:   SUN_ARCH=x86_64",
          "413:      fi",
          "414:  fi",
          "415:  echo \"$SUN_ARCH\"-pc-solaris2\"`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*//'`\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "914:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "915:  exit ;;",
          "916:     alpha:Linux:*:*)",
          "918:    EV5)   UNAME_MACHINE=alphaev5 ;;",
          "919:    EV56)  UNAME_MACHINE=alphaev56 ;;",
          "920:    PCA56) UNAME_MACHINE=alphapca56 ;;",
          "",
          "[Removed Lines]",
          "917:  case `sed -n '/^cpu model/s/^.*: \\(.*\\)/\\1/p' < /proc/cpuinfo` in",
          "",
          "[Added Lines]",
          "929:  case `sed -n '/^cpu model/s/^.*: \\(.*\\)/\\1/p' /proc/cpuinfo 2>/dev/null` in",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "981:  exit ;;",
          "982:     mips:Linux:*:* | mips64:Linux:*:*)",
          "983:  set_cc_for_build",
          "984:  sed 's/^ //' << EOF > \"$dummy.c\"",
          "985:  #undef CPU",
          "988:  #if defined(__MIPSEL__) || defined(__MIPSEL) || defined(_MIPSEL) || defined(MIPSEL)",
          "990:  #else",
          "991:  #if defined(__MIPSEB__) || defined(__MIPSEB) || defined(_MIPSEB) || defined(MIPSEB)",
          "993:  #else",
          "995:  #endif",
          "996:  #endif",
          "997: EOF",
          "1000:  ;;",
          "1001:     mips64el:Linux:*:*)",
          "1002:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "",
          "[Removed Lines]",
          "986:  #undef ${UNAME_MACHINE}",
          "987:  #undef ${UNAME_MACHINE}el",
          "989:  CPU=${UNAME_MACHINE}el",
          "992:  CPU=${UNAME_MACHINE}",
          "994:  CPU=",
          "998:  eval \"`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^CPU'`\"",
          "999:  test \"x$CPU\" != x && { echo \"$CPU-unknown-linux-$LIBC\"; exit; }",
          "",
          "[Added Lines]",
          "996:  IS_GLIBC=0",
          "997:  test x\"${LIBC}\" = xgnu && IS_GLIBC=1",
          "1000:  #undef mips",
          "1001:  #undef mipsel",
          "1002:  #undef mips64",
          "1003:  #undef mips64el",
          "1004:  #if ${IS_GLIBC} && defined(_ABI64)",
          "1005:  LIBCABI=gnuabi64",
          "1006:  #else",
          "1007:  #if ${IS_GLIBC} && defined(_ABIN32)",
          "1008:  LIBCABI=gnuabin32",
          "1009:  #else",
          "1010:  LIBCABI=${LIBC}",
          "1011:  #endif",
          "1012:  #endif",
          "1014:  #if ${IS_GLIBC} && defined(__mips64) && defined(__mips_isa_rev) && __mips_isa_rev>=6",
          "1015:  CPU=mipsisa64r6",
          "1016:  #else",
          "1017:  #if ${IS_GLIBC} && !defined(__mips64) && defined(__mips_isa_rev) && __mips_isa_rev>=6",
          "1018:  CPU=mipsisa32r6",
          "1019:  #else",
          "1020:  #if defined(__mips64)",
          "1021:  CPU=mips64",
          "1022:  #else",
          "1023:  CPU=mips",
          "1024:  #endif",
          "1025:  #endif",
          "1026:  #endif",
          "1029:  MIPS_ENDIAN=el",
          "1032:  MIPS_ENDIAN=",
          "1034:  MIPS_ENDIAN=",
          "1038:  eval \"`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^CPU\\|^MIPS_ENDIAN\\|^LIBCABI'`\"",
          "1039:  test \"x$CPU\" != x && { echo \"$CPU${MIPS_ENDIAN}-unknown-linux-$LIBCABI\"; exit; }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1111:  esac",
          "1113:  exit ;;",
          "1114:     i*86:*:3.2:*)",
          "1115:  if test -f /usr/options/cb.name; then",
          "",
          "[Removed Lines]",
          "1112:  echo \"$UNAME_MACHINE-unknown-sysv${UNAME_RELEASE}${UNAME_SYSTEM}{$UNAME_VERSION}\"",
          "",
          "[Added Lines]",
          "1152:  echo \"$UNAME_MACHINE-unknown-sysv${UNAME_RELEASE}${UNAME_SYSTEM}${UNAME_VERSION}\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1293:  echo \"$UNAME_MACHINE\"-apple-rhapsody\"$UNAME_RELEASE\"",
          "1294:  exit ;;",
          "1300:  fi",
          "1319:      fi",
          "1320:  elif test \"$UNAME_PROCESSOR\" = i386 ; then",
          "1328:  fi",
          "1329:  echo \"$UNAME_PROCESSOR\"-apple-darwin\"$UNAME_RELEASE\"",
          "1330:  exit ;;",
          "",
          "[Removed Lines]",
          "1296:  UNAME_PROCESSOR=`uname -p` || UNAME_PROCESSOR=unknown",
          "1297:  set_cc_for_build",
          "1298:  if test \"$UNAME_PROCESSOR\" = unknown ; then",
          "1299:      UNAME_PROCESSOR=powerpc",
          "1301:  if test \"`echo \"$UNAME_RELEASE\" | sed -e 's/\\..*//'`\" -le 10 ; then",
          "1302:      if [ \"$CC_FOR_BUILD\" != no_compiler_found ]; then",
          "1303:   if (echo '#ifdef __LP64__'; echo IS_64BIT_ARCH; echo '#endif') | \\",
          "1304:          (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\",
          "1305:          grep IS_64BIT_ARCH >/dev/null",
          "1306:   then",
          "1307:       case $UNAME_PROCESSOR in",
          "1308:    i386) UNAME_PROCESSOR=x86_64 ;;",
          "1309:    powerpc) UNAME_PROCESSOR=powerpc64 ;;",
          "1310:       esac",
          "1311:   fi",
          "1312:   # On 10.4-10.6 one might compile for PowerPC via gcc -arch ppc",
          "1313:   if (echo '#ifdef __POWERPC__'; echo IS_PPC; echo '#endif') | \\",
          "1314:          (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\",
          "1315:          grep IS_PPC >/dev/null",
          "1316:   then",
          "1317:       UNAME_PROCESSOR=powerpc",
          "1318:   fi",
          "1321:      # Avoid executing cc on OS X 10.9, as it ships with a stub",
          "1322:      # that puts up a graphical alert prompting to install",
          "1323:      # developer tools.  Any system running Mac OS X 10.7 or",
          "1324:      # later (Darwin 11 and later) is required to have a 64-bit",
          "1325:      # processor. This is not true of the ARM version of Darwin",
          "1326:      # that Apple uses in portable devices.",
          "1327:      UNAME_PROCESSOR=x86_64",
          "",
          "[Added Lines]",
          "1336:  UNAME_PROCESSOR=`uname -p`",
          "1337:  case $UNAME_PROCESSOR in",
          "1338:      unknown) UNAME_PROCESSOR=powerpc ;;",
          "1339:  esac",
          "1340:  if command -v xcode-select > /dev/null 2> /dev/null && \\",
          "1341:   ! xcode-select --print-path > /dev/null 2> /dev/null ; then",
          "1342:      # Avoid executing cc if there is no toolchain installed as",
          "1343:      # cc will be a stub that puts up a graphical alert",
          "1344:      # prompting the user to install developer tools.",
          "1345:      CC_FOR_BUILD=no_compiler_found",
          "1346:  else",
          "1347:      set_cc_for_build",
          "1349:  if [ \"$CC_FOR_BUILD\" != no_compiler_found ]; then",
          "1350:      if (echo '#ifdef __LP64__'; echo IS_64BIT_ARCH; echo '#endif') | \\",
          "1351:      (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\",
          "1352:      grep IS_64BIT_ARCH >/dev/null",
          "1353:      then",
          "1354:   case $UNAME_PROCESSOR in",
          "1355:       i386) UNAME_PROCESSOR=x86_64 ;;",
          "1356:       powerpc) UNAME_PROCESSOR=powerpc64 ;;",
          "1357:   esac",
          "1358:      fi",
          "1359:      # On 10.4-10.6 one might compile for PowerPC via gcc -arch ppc",
          "1360:      if (echo '#ifdef __POWERPC__'; echo IS_PPC; echo '#endif') | \\",
          "1361:      (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\",
          "1362:      grep IS_PPC >/dev/null",
          "1363:      then",
          "1364:   UNAME_PROCESSOR=powerpc",
          "1367:      # uname -m returns i386 or x86_64",
          "1368:      UNAME_PROCESSOR=$UNAME_MACHINE",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1424:     amd64:Isilon\\ OneFS:*:*)",
          "1425:  echo x86_64-unknown-onefs",
          "1426:  exit ;;",
          "1427: esac",
          "1429: echo \"$0: unable to guess system type\" >&2",
          "1431: case \"$UNAME_MACHINE:$UNAME_SYSTEM\" in",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1469:  echo \"$UNAME_MACHINE\"-unknown-unleashed\"$UNAME_RELEASE\"",
          "1470:  exit ;;",
          "1473: # No uname command or uname output not recognized.",
          "1474: set_cc_for_build",
          "1475: cat > \"$dummy.c\" <<EOF",
          "1476: #ifdef _SEQUENT_",
          "1477: #include <sys/types.h>",
          "1478: #include <sys/utsname.h>",
          "1479: #endif",
          "1480: #if defined(ultrix) || defined(_ultrix) || defined(__ultrix) || defined(__ultrix__)",
          "1481: #if defined (vax) || defined (__vax) || defined (__vax__) || defined(mips) || defined(__mips) || defined(__mips__) || defined(MIPS) || defined(__MIPS__)",
          "1482: #include <signal.h>",
          "1483: #if defined(_SIZE_T_) || defined(SIGLOST)",
          "1484: #include <sys/utsname.h>",
          "1485: #endif",
          "1486: #endif",
          "1487: #endif",
          "1488: main ()",
          "1489: {",
          "1490: #if defined (sony)",
          "1491: #if defined (MIPSEB)",
          "1494:   printf (\"mips-sony-bsd\\n\"); exit (0);",
          "1495: #else",
          "1496: #include <sys/param.h>",
          "1497:   printf (\"m68k-sony-newsos%s\\n\",",
          "1498: #ifdef NEWSOS4",
          "1499:   \"4\"",
          "1500: #else",
          "1501:   \"\"",
          "1502: #endif",
          "1503:   ); exit (0);",
          "1504: #endif",
          "1505: #endif",
          "1507: #if defined (NeXT)",
          "1508: #if !defined (__ARCHITECTURE__)",
          "1509: #define __ARCHITECTURE__ \"m68k\"",
          "1510: #endif",
          "1511:   int version;",
          "1512:   version=`(hostinfo | sed -n 's/.*NeXT Mach \\([0-9]*\\).*/\\1/p') 2>/dev/null`;",
          "1513:   if (version < 4)",
          "1514:     printf (\"%s-next-nextstep%d\\n\", __ARCHITECTURE__, version);",
          "1515:   else",
          "1516:     printf (\"%s-next-openstep%d\\n\", __ARCHITECTURE__, version);",
          "1517:   exit (0);",
          "1518: #endif",
          "1520: #if defined (MULTIMAX) || defined (n16)",
          "1521: #if defined (UMAXV)",
          "1522:   printf (\"ns32k-encore-sysv\\n\"); exit (0);",
          "1523: #else",
          "1524: #if defined (CMU)",
          "1525:   printf (\"ns32k-encore-mach\\n\"); exit (0);",
          "1526: #else",
          "1527:   printf (\"ns32k-encore-bsd\\n\"); exit (0);",
          "1528: #endif",
          "1529: #endif",
          "1530: #endif",
          "1532: #if defined (__386BSD__)",
          "1533:   printf (\"i386-pc-bsd\\n\"); exit (0);",
          "1534: #endif",
          "1536: #if defined (sequent)",
          "1537: #if defined (i386)",
          "1538:   printf (\"i386-sequent-dynix\\n\"); exit (0);",
          "1539: #endif",
          "1540: #if defined (ns32000)",
          "1541:   printf (\"ns32k-sequent-dynix\\n\"); exit (0);",
          "1542: #endif",
          "1543: #endif",
          "1545: #if defined (_SEQUENT_)",
          "1546:   struct utsname un;",
          "1548:   uname(&un);",
          "1549:   if (strncmp(un.version, \"V2\", 2) == 0) {",
          "1550:     printf (\"i386-sequent-ptx2\\n\"); exit (0);",
          "1551:   }",
          "1553:     printf (\"i386-sequent-ptx1\\n\"); exit (0);",
          "1554:   }",
          "1555:   printf (\"i386-sequent-ptx\\n\"); exit (0);",
          "1556: #endif",
          "1558: #if defined (vax)",
          "1559: #if !defined (ultrix)",
          "1560: #include <sys/param.h>",
          "1561: #if defined (BSD)",
          "1562: #if BSD == 43",
          "1563:   printf (\"vax-dec-bsd4.3\\n\"); exit (0);",
          "1564: #else",
          "1565: #if BSD == 199006",
          "1566:   printf (\"vax-dec-bsd4.3reno\\n\"); exit (0);",
          "1567: #else",
          "1568:   printf (\"vax-dec-bsd\\n\"); exit (0);",
          "1569: #endif",
          "1570: #endif",
          "1571: #else",
          "1572:   printf (\"vax-dec-bsd\\n\"); exit (0);",
          "1573: #endif",
          "1574: #else",
          "1575: #if defined(_SIZE_T_) || defined(SIGLOST)",
          "1576:   struct utsname un;",
          "1577:   uname (&un);",
          "1578:   printf (\"vax-dec-ultrix%s\\n\", un.release); exit (0);",
          "1579: #else",
          "1580:   printf (\"vax-dec-ultrix\\n\"); exit (0);",
          "1581: #endif",
          "1582: #endif",
          "1583: #endif",
          "1584: #if defined(ultrix) || defined(_ultrix) || defined(__ultrix) || defined(__ultrix__)",
          "1585: #if defined(mips) || defined(__mips) || defined(__mips__) || defined(MIPS) || defined(__MIPS__)",
          "1586: #if defined(_SIZE_T_) || defined(SIGLOST)",
          "1587:   struct utsname *un;",
          "1588:   uname (&un);",
          "1589:   printf (\"mips-dec-ultrix%s\\n\", un.release); exit (0);",
          "1590: #else",
          "1591:   printf (\"mips-dec-ultrix\\n\"); exit (0);",
          "1592: #endif",
          "1593: #endif",
          "1594: #endif",
          "1596: #if defined (alliant) && defined (i860)",
          "1597:   printf (\"i860-alliant-bsd\\n\"); exit (0);",
          "1598: #endif",
          "1600:   exit (1);",
          "1601: }",
          "1602: EOF",
          "1604: $CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" 2>/dev/null && SYSTEM_NAME=`$dummy` &&",
          "1605:  { echo \"$SYSTEM_NAME\"; exit; }",
          "1607: # Apollos put the system type in the environment.",
          "1608: test -d /usr/apollo && { echo \"$ISP-apollo-$SYSTYPE\"; exit; }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1448:   https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess",
          "1449: and",
          "1450:   https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub",
          "1452: If $0 has already been updated, send the following data and any",
          "1453: information you think might be pertinent to config-patches@gnu.org to",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1632: EOF",
          "1634: year=`echo $timestamp | sed 's,-.*,,'`",
          "1635: # shellcheck disable=SC2003",
          "1636: if test \"`expr \"\\`date +%Y\\`\" - \"$year\"`\" -lt 3 ; then",
          "1637:    cat >&2 <<EOF",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1475: UNAME_SYSTEM  = \"$UNAME_SYSTEM\"",
          "1476: UNAME_VERSION = \"$UNAME_VERSION\"",
          "1477: EOF",
          "1479: exit 1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1665: fi",
          "",
          "---------------"
        ],
        "support/config.guess.20181116||support/config.guess.20181116": [
          "File: support/config.guess.20181116 -> support/config.guess.20181116",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #! /bin/sh",
          "2: # Attempt to guess a canonical system name.",
          "3: #   Copyright 1992-2018 Free Software Foundation, Inc.",
          "5: timestamp='2018-08-29'",
          "7: # This file is free software; you can redistribute it and/or modify it",
          "8: # under the terms of the GNU General Public License as published by",
          "9: # the Free Software Foundation; either version 3 of the License, or",
          "10: # (at your option) any later version.",
          "11: #",
          "12: # This program is distributed in the hope that it will be useful, but",
          "13: # WITHOUT ANY WARRANTY; without even the implied warranty of",
          "14: # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU",
          "15: # General Public License for more details.",
          "16: #",
          "17: # You should have received a copy of the GNU General Public License",
          "18: # along with this program; if not, see <https://www.gnu.org/licenses/>.",
          "19: #",
          "20: # As a special exception to the GNU General Public License, if you",
          "21: # distribute this file as part of a program that contains a",
          "22: # configuration script generated by Autoconf, you may include it under",
          "23: # the same distribution terms that you use for the rest of that",
          "24: # program.  This Exception is an additional permission under section 7",
          "25: # of the GNU General Public License, version 3 (\"GPLv3\").",
          "26: #",
          "27: # Originally written by Per Bothner; maintained since 2000 by Ben Elliston.",
          "28: #",
          "29: # You can get the latest version of this script from:",
          "30: # https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess",
          "31: #",
          "32: # Please send patches to <config-patches@gnu.org>.",
          "35: me=`echo \"$0\" | sed -e 's,.*/,,'`",
          "37: usage=\"\\",
          "38: Usage: $0 [OPTION]",
          "40: Output the configuration name of the system \\`$me' is run on.",
          "42: Options:",
          "43:   -h, --help         print this help, then exit",
          "44:   -t, --time-stamp   print date of last modification, then exit",
          "45:   -v, --version      print version number, then exit",
          "47: Report bugs and patches to <config-patches@gnu.org>.\"",
          "49: version=\"\\",
          "50: GNU config.guess ($timestamp)",
          "52: Originally written by Per Bothner.",
          "53: Copyright 1992-2018 Free Software Foundation, Inc.",
          "55: This is free software; see the source for copying conditions.  There is NO",
          "56: warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"",
          "58: help=\"",
          "59: Try \\`$me --help' for more information.\"",
          "61: # Parse command line",
          "62: while test $# -gt 0 ; do",
          "63:   case $1 in",
          "64:     --time-stamp | --time* | -t )",
          "65:        echo \"$timestamp\" ; exit ;;",
          "66:     --version | -v )",
          "67:        echo \"$version\" ; exit ;;",
          "68:     --help | --h* | -h )",
          "69:        echo \"$usage\"; exit ;;",
          "70:     -- )     # Stop option processing",
          "71:        shift; break ;;",
          "72:     - ) # Use stdin as input.",
          "73:        break ;;",
          "74:     -* )",
          "75:        echo \"$me: invalid option $1$help\" >&2",
          "76:        exit 1 ;;",
          "78:        break ;;",
          "79:   esac",
          "80: done",
          "82: if test $# != 0; then",
          "83:   echo \"$me: too many arguments$help\" >&2",
          "84:   exit 1",
          "85: fi",
          "87: # CC_FOR_BUILD -- compiler used by this script. Note that the use of a",
          "88: # compiler to aid in system detection is discouraged as it requires",
          "89: # temporary files to be created and, as you can see below, it is a",
          "90: # headache to deal with in a portable fashion.",
          "92: # Historically, `CC_FOR_BUILD' used to be named `HOST_CC'. We still",
          "93: # use `HOST_CC' if defined, but it is deprecated.",
          "95: # Portable tmp directory creation inspired by the Autoconf team.",
          "97: tmp=",
          "98: # shellcheck disable=SC2172",
          "99: trap 'test -z \"$tmp\" || rm -fr \"$tmp\"' 1 2 13 15",
          "100: trap 'exitcode=$?; test -z \"$tmp\" || rm -fr \"$tmp\"; exit $exitcode' 0",
          "102: set_cc_for_build() {",
          "103:     : \"${TMPDIR=/tmp}\"",
          "104:     # shellcheck disable=SC2039",
          "105:     { tmp=`(umask 077 && mktemp -d \"$TMPDIR/cgXXXXXX\") 2>/dev/null` && test -n \"$tmp\" && test -d \"$tmp\" ; } ||",
          "106:  { test -n \"$RANDOM\" && tmp=$TMPDIR/cg$$-$RANDOM && (umask 077 && mkdir \"$tmp\" 2>/dev/null) ; } ||",
          "107:  { tmp=$TMPDIR/cg-$$ && (umask 077 && mkdir \"$tmp\" 2>/dev/null) && echo \"Warning: creating insecure temp directory\" >&2 ; } ||",
          "108:  { echo \"$me: cannot create a temporary directory in $TMPDIR\" >&2 ; exit 1 ; }",
          "109:     dummy=$tmp/dummy",
          "110:     case ${CC_FOR_BUILD-},${HOST_CC-},${CC-} in",
          "111:  ,,)    echo \"int x;\" > \"$dummy.c\"",
          "112:         for driver in cc gcc c89 c99 ; do",
          "113:      if ($driver -c -o \"$dummy.o\" \"$dummy.c\") >/dev/null 2>&1 ; then",
          "114:          CC_FOR_BUILD=\"$driver\"",
          "115:          break",
          "116:      fi",
          "117:         done",
          "118:         if test x\"$CC_FOR_BUILD\" = x ; then",
          "119:      CC_FOR_BUILD=no_compiler_found",
          "120:         fi",
          "121:         ;;",
          "122:  ,,*)   CC_FOR_BUILD=$CC ;;",
          "123:  ,*,*)  CC_FOR_BUILD=$HOST_CC ;;",
          "124:     esac",
          "125: }",
          "127: # This is needed to find uname on a Pyramid OSx when run in the BSD universe.",
          "128: # (ghazi@noc.rutgers.edu 1994-08-24)",
          "129: if test -f /.attbin/uname ; then",
          "130:  PATH=$PATH:/.attbin ; export PATH",
          "131: fi",
          "133: UNAME_MACHINE=`(uname -m) 2>/dev/null` || UNAME_MACHINE=unknown",
          "134: UNAME_RELEASE=`(uname -r) 2>/dev/null` || UNAME_RELEASE=unknown",
          "135: UNAME_SYSTEM=`(uname -s) 2>/dev/null`  || UNAME_SYSTEM=unknown",
          "136: UNAME_VERSION=`(uname -v) 2>/dev/null` || UNAME_VERSION=unknown",
          "138: case \"$UNAME_SYSTEM\" in",
          "139: Linux|GNU|GNU/*)",
          "140:  # If the system lacks a compiler, then just pick glibc.",
          "141:  # We could probably try harder.",
          "142:  LIBC=gnu",
          "144:  set_cc_for_build",
          "145:  cat <<-EOF > \"$dummy.c\"",
          "146:  #include <features.h>",
          "147:  #if defined(__UCLIBC__)",
          "148:  LIBC=uclibc",
          "149:  #elif defined(__dietlibc__)",
          "150:  LIBC=dietlibc",
          "151:  #else",
          "152:  LIBC=gnu",
          "153:  #endif",
          "154:  EOF",
          "155:  eval \"`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^LIBC' | sed 's, ,,g'`\"",
          "157:  # If ldd exists, use it to detect musl libc.",
          "158:  if command -v ldd >/dev/null && \\",
          "159:   ldd --version 2>&1 | grep -q ^musl",
          "160:  then",
          "161:      LIBC=musl",
          "162:  fi",
          "163:  ;;",
          "164: esac",
          "166: # Note: order is significant - the case branches are not exclusive.",
          "168: case \"$UNAME_MACHINE:$UNAME_SYSTEM:$UNAME_RELEASE:$UNAME_VERSION\" in",
          "170:  # NetBSD (nbsd) targets should (where applicable) match one or",
          "171:  # more of the tuples: *-*-netbsdelf*, *-*-netbsdaout*,",
          "172:  # *-*-netbsdecoff* and *-*-netbsd*.  For targets that recently",
          "173:  # switched to ELF, *-*-netbsd* would select the old",
          "174:  # object file format.  This provides both forward",
          "175:  # compatibility and a consistent mechanism for selecting the",
          "176:  # object file format.",
          "177:  #",
          "178:  # Note: NetBSD doesn't particularly care about the vendor",
          "179:  # portion of the name.  We always set it to \"unknown\".",
          "180:  sysctl=\"sysctl -n hw.machine_arch\"",
          "181:  UNAME_MACHINE_ARCH=`(uname -p 2>/dev/null || \\",
          "182:      \"/sbin/$sysctl\" 2>/dev/null || \\",
          "183:      \"/usr/sbin/$sysctl\" 2>/dev/null || \\",
          "184:      echo unknown)`",
          "185:  case \"$UNAME_MACHINE_ARCH\" in",
          "186:      armeb) machine=armeb-unknown ;;",
          "187:      arm*) machine=arm-unknown ;;",
          "188:      sh3el) machine=shl-unknown ;;",
          "189:      sh3eb) machine=sh-unknown ;;",
          "190:      sh5el) machine=sh5le-unknown ;;",
          "191:      earmv*)",
          "192:   arch=`echo \"$UNAME_MACHINE_ARCH\" | sed -e 's,^e\\(armv[0-9]\\).*$,\\1,'`",
          "193:   endian=`echo \"$UNAME_MACHINE_ARCH\" | sed -ne 's,^.*\\(eb\\)$,\\1,p'`",
          "194:   machine=\"${arch}${endian}\"-unknown",
          "195:   ;;",
          "197:  esac",
          "198:  # The Operating System including object format, if it has switched",
          "199:  # to ELF recently (or will in the future) and ABI.",
          "200:  case \"$UNAME_MACHINE_ARCH\" in",
          "201:      earm*)",
          "202:   os=netbsdelf",
          "203:   ;;",
          "204:      arm*|i386|m68k|ns32k|sh3*|sparc|vax)",
          "205:   set_cc_for_build",
          "206:   if echo __ELF__ | $CC_FOR_BUILD -E - 2>/dev/null \\",
          "207:    | grep -q __ELF__",
          "208:   then",
          "209:       # Once all utilities can be ECOFF (netbsdecoff) or a.out (netbsdaout).",
          "210:       # Return netbsd for either.  FIX?",
          "211:       os=netbsd",
          "212:   else",
          "213:       os=netbsdelf",
          "214:   fi",
          "215:   ;;",
          "217:   os=netbsd",
          "218:   ;;",
          "219:  esac",
          "220:  # Determine ABI tags.",
          "221:  case \"$UNAME_MACHINE_ARCH\" in",
          "222:      earm*)",
          "223:   expr='s/^earmv[0-9]/-eabi/;s/eb$//'",
          "224:   abi=`echo \"$UNAME_MACHINE_ARCH\" | sed -e \"$expr\"`",
          "225:   ;;",
          "226:  esac",
          "227:  # The OS release",
          "228:  # Debian GNU/NetBSD machines have a different userland, and",
          "229:  # thus, need a distinct triplet. However, they do not need",
          "230:  # kernel version information, so it can be replaced with a",
          "231:  # suitable tag, in the style of linux-gnu.",
          "232:  case \"$UNAME_VERSION\" in",
          "233:      Debian*)",
          "234:   release='-gnu'",
          "235:   ;;",
          "237:   release=`echo \"$UNAME_RELEASE\" | sed -e 's/[-_].*//' | cut -d. -f1,2`",
          "238:   ;;",
          "239:  esac",
          "240:  # Since CPU_TYPE-MANUFACTURER-KERNEL-OPERATING_SYSTEM:",
          "241:  # contains redundant information, the shorter form:",
          "242:  # CPU_TYPE-MANUFACTURER-OPERATING_SYSTEM is used.",
          "243:  echo \"$machine-${os}${release}${abi-}\"",
          "244:  exit ;;",
          "246:  UNAME_MACHINE_ARCH=`arch | sed 's/Bitrig.//'`",
          "247:  echo \"$UNAME_MACHINE_ARCH\"-unknown-bitrig\"$UNAME_RELEASE\"",
          "248:  exit ;;",
          "250:  UNAME_MACHINE_ARCH=`arch | sed 's/OpenBSD.//'`",
          "251:  echo \"$UNAME_MACHINE_ARCH\"-unknown-openbsd\"$UNAME_RELEASE\"",
          "252:  exit ;;",
          "254:  UNAME_MACHINE_ARCH=`arch | sed 's/^.*BSD\\.//'`",
          "255:  echo \"$UNAME_MACHINE_ARCH\"-unknown-libertybsd\"$UNAME_RELEASE\"",
          "256:  exit ;;",
          "258:  echo \"$UNAME_MACHINE\"-unknown-midnightbsd\"$UNAME_RELEASE\"",
          "259:  exit ;;",
          "261:  echo \"$UNAME_MACHINE\"-unknown-ekkobsd\"$UNAME_RELEASE\"",
          "262:  exit ;;",
          "264:  echo \"$UNAME_MACHINE\"-unknown-solidbsd\"$UNAME_RELEASE\"",
          "265:  exit ;;",
          "266:     macppc:MirBSD:*:*)",
          "267:  echo powerpc-unknown-mirbsd\"$UNAME_RELEASE\"",
          "268:  exit ;;",
          "270:  echo \"$UNAME_MACHINE\"-unknown-mirbsd\"$UNAME_RELEASE\"",
          "271:  exit ;;",
          "273:  echo \"$UNAME_MACHINE\"-unknown-sortix",
          "274:  exit ;;",
          "276:  echo \"$UNAME_MACHINE\"-unknown-redox",
          "277:  exit ;;",
          "278:     mips:OSF1:*.*)",
          "279:         echo mips-dec-osf1",
          "280:         exit ;;",
          "281:     alpha:OSF1:*:*)",
          "282:  case $UNAME_RELEASE in",
          "284:   UNAME_RELEASE=`/usr/sbin/sizer -v | awk '{print $3}'`",
          "285:   ;;",
          "287:   UNAME_RELEASE=`/usr/sbin/sizer -v | awk '{print $4}'`",
          "288:   ;;",
          "289:  esac",
          "290:  # According to Compaq, /usr/sbin/psrinfo has been available on",
          "291:  # OSF/1 and Tru64 systems produced since 1995.  I hope that",
          "292:  # covers most systems running today.  This code pipes the CPU",
          "293:  # types through head -n 1, so we only detect the type of CPU 0.",
          "294:  ALPHA_CPU_TYPE=`/usr/sbin/psrinfo -v | sed -n -e 's/^  The alpha \\(.*\\) processor.*$/\\1/p' | head -n 1`",
          "295:  case \"$ALPHA_CPU_TYPE\" in",
          "296:      \"EV4 (21064)\")",
          "297:   UNAME_MACHINE=alpha ;;",
          "298:      \"EV4.5 (21064)\")",
          "299:   UNAME_MACHINE=alpha ;;",
          "300:      \"LCA4 (21066/21068)\")",
          "301:   UNAME_MACHINE=alpha ;;",
          "302:      \"EV5 (21164)\")",
          "303:   UNAME_MACHINE=alphaev5 ;;",
          "304:      \"EV5.6 (21164A)\")",
          "305:   UNAME_MACHINE=alphaev56 ;;",
          "306:      \"EV5.6 (21164PC)\")",
          "307:   UNAME_MACHINE=alphapca56 ;;",
          "308:      \"EV5.7 (21164PC)\")",
          "309:   UNAME_MACHINE=alphapca57 ;;",
          "310:      \"EV6 (21264)\")",
          "311:   UNAME_MACHINE=alphaev6 ;;",
          "312:      \"EV6.7 (21264A)\")",
          "313:   UNAME_MACHINE=alphaev67 ;;",
          "314:      \"EV6.8CB (21264C)\")",
          "315:   UNAME_MACHINE=alphaev68 ;;",
          "316:      \"EV6.8AL (21264B)\")",
          "317:   UNAME_MACHINE=alphaev68 ;;",
          "318:      \"EV6.8CX (21264D)\")",
          "319:   UNAME_MACHINE=alphaev68 ;;",
          "320:      \"EV6.9A (21264/EV69A)\")",
          "321:   UNAME_MACHINE=alphaev69 ;;",
          "322:      \"EV7 (21364)\")",
          "323:   UNAME_MACHINE=alphaev7 ;;",
          "324:      \"EV7.9 (21364A)\")",
          "325:   UNAME_MACHINE=alphaev79 ;;",
          "326:  esac",
          "327:  # A Pn.n version is a patched version.",
          "328:  # A Vn.n version is a released version.",
          "329:  # A Tn.n version is a released field test version.",
          "330:  # A Xn.n version is an unreleased experimental baselevel.",
          "331:  # 1.2 uses \"1.2\" for uname -r.",
          "332:  echo \"$UNAME_MACHINE\"-dec-osf\"`echo \"$UNAME_RELEASE\" | sed -e 's/^[PVTX]//' | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz`\"",
          "333:  # Reset EXIT trap before exiting to avoid spurious non-zero exit code.",
          "334:  exitcode=$?",
          "335:  trap '' 0",
          "336:  exit $exitcode ;;",
          "337:     Amiga*:UNIX_System_V:4.0:*)",
          "338:  echo m68k-unknown-sysv4",
          "339:  exit ;;",
          "341:  echo \"$UNAME_MACHINE\"-unknown-amigaos",
          "342:  exit ;;",
          "344:  echo \"$UNAME_MACHINE\"-unknown-morphos",
          "345:  exit ;;",
          "347:  echo i370-ibm-openedition",
          "348:  exit ;;",
          "350:  echo s390-ibm-zvmoe",
          "351:  exit ;;",
          "353:  echo powerpc-ibm-os400",
          "354:  exit ;;",
          "355:     arm:RISC*:1.[012]*:*|arm:riscix:1.[012]*:*)",
          "356:  echo arm-acorn-riscix\"$UNAME_RELEASE\"",
          "357:  exit ;;",
          "358:     arm*:riscos:*:*|arm*:RISCOS:*:*)",
          "359:  echo arm-unknown-riscos",
          "360:  exit ;;",
          "361:     SR2?01:HI-UX/MPP:*:* | SR8000:HI-UX/MPP:*:*)",
          "362:  echo hppa1.1-hitachi-hiuxmpp",
          "363:  exit ;;",
          "364:     Pyramid*:OSx*:*:* | MIS*:OSx*:*:* | MIS*:SMP_DC-OSx*:*:*)",
          "365:  # akee@wpdis03.wpafb.af.mil (Earle F. Ake) contributed MIS and NILE.",
          "366:  if test \"`(/bin/universe) 2>/dev/null`\" = att ; then",
          "367:   echo pyramid-pyramid-sysv3",
          "368:  else",
          "369:   echo pyramid-pyramid-bsd",
          "370:  fi",
          "371:  exit ;;",
          "372:     NILE*:*:*:dcosx)",
          "373:  echo pyramid-pyramid-svr4",
          "374:  exit ;;",
          "375:     DRS?6000:unix:4.0:6*)",
          "376:  echo sparc-icl-nx6",
          "377:  exit ;;",
          "378:     DRS?6000:UNIX_SV:4.2*:7* | DRS?6000:isis:4.2*:7*)",
          "379:  case `/usr/bin/uname -p` in",
          "380:      sparc) echo sparc-icl-nx7; exit ;;",
          "381:  esac ;;",
          "382:     s390x:SunOS:*:*)",
          "383:  echo \"$UNAME_MACHINE\"-ibm-solaris2\"`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\"",
          "384:  exit ;;",
          "385:     sun4H:SunOS:5.*:*)",
          "386:  echo sparc-hal-solaris2\"`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*//'`\"",
          "387:  exit ;;",
          "388:     sun4*:SunOS:5.*:* | tadpole*:SunOS:5.*:*)",
          "389:  echo sparc-sun-solaris2\"`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\"",
          "390:  exit ;;",
          "391:     i86pc:AuroraUX:5.*:* | i86xen:AuroraUX:5.*:*)",
          "392:  echo i386-pc-auroraux\"$UNAME_RELEASE\"",
          "393:  exit ;;",
          "394:     i86pc:SunOS:5.*:* | i86xen:SunOS:5.*:*)",
          "395:  UNAME_REL=\"`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\"",
          "396:  case `isainfo -b` in",
          "397:      32)",
          "398:   echo i386-pc-solaris2\"$UNAME_REL\"",
          "399:   ;;",
          "400:      64)",
          "401:   echo x86_64-pc-solaris2\"$UNAME_REL\"",
          "402:   ;;",
          "403:  esac",
          "404:  exit ;;",
          "405:     sun4*:SunOS:6*:*)",
          "406:  # According to config.sub, this is the proper way to canonicalize",
          "407:  # SunOS6.  Hard to guess exactly what SunOS6 will be like, but",
          "408:  # it's likely to be more like Solaris than SunOS4.",
          "409:  echo sparc-sun-solaris3\"`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*//'`\"",
          "410:  exit ;;",
          "411:     sun4*:SunOS:*:*)",
          "412:  case \"`/usr/bin/arch -k`\" in",
          "413:      Series*|S4*)",
          "414:   UNAME_RELEASE=`uname -v`",
          "415:   ;;",
          "416:  esac",
          "417:  # Japanese Language versions have a version number like `4.1.3-JL'.",
          "418:  echo sparc-sun-sunos\"`echo \"$UNAME_RELEASE\"|sed -e 's/-/_/'`\"",
          "419:  exit ;;",
          "420:     sun3*:SunOS:*:*)",
          "421:  echo m68k-sun-sunos\"$UNAME_RELEASE\"",
          "422:  exit ;;",
          "423:     sun*:*:4.2BSD:*)",
          "424:  UNAME_RELEASE=`(sed 1q /etc/motd | awk '{print substr($5,1,3)}') 2>/dev/null`",
          "425:  test \"x$UNAME_RELEASE\" = x && UNAME_RELEASE=3",
          "426:  case \"`/bin/arch`\" in",
          "427:      sun3)",
          "428:   echo m68k-sun-sunos\"$UNAME_RELEASE\"",
          "429:   ;;",
          "430:      sun4)",
          "431:   echo sparc-sun-sunos\"$UNAME_RELEASE\"",
          "432:   ;;",
          "433:  esac",
          "434:  exit ;;",
          "435:     aushp:SunOS:*:*)",
          "436:  echo sparc-auspex-sunos\"$UNAME_RELEASE\"",
          "437:  exit ;;",
          "438:     # The situation for MiNT is a little confusing.  The machine name",
          "439:     # can be virtually everything (everything which is not",
          "440:     # \"atarist\" or \"atariste\" at least should have a processor",
          "441:     # > m68000).  The system name ranges from \"MiNT\" over \"FreeMiNT\"",
          "442:     # to the lowercase version \"mint\" (or \"freemint\").  Finally",
          "443:     # the system name \"TOS\" denotes a system which is actually not",
          "444:     # MiNT.  But MiNT is downward compatible to TOS, so this should",
          "445:     # be no problem.",
          "446:     atarist[e]:*MiNT:*:* | atarist[e]:*mint:*:* | atarist[e]:*TOS:*:*)",
          "447:  echo m68k-atari-mint\"$UNAME_RELEASE\"",
          "448:  exit ;;",
          "449:     atari*:*MiNT:*:* | atari*:*mint:*:* | atarist[e]:*TOS:*:*)",
          "450:  echo m68k-atari-mint\"$UNAME_RELEASE\"",
          "451:  exit ;;",
          "453:  echo m68k-atari-mint\"$UNAME_RELEASE\"",
          "454:  exit ;;",
          "455:     milan*:*MiNT:*:* | milan*:*mint:*:* | *milan*:*TOS:*:*)",
          "456:  echo m68k-milan-mint\"$UNAME_RELEASE\"",
          "457:  exit ;;",
          "458:     hades*:*MiNT:*:* | hades*:*mint:*:* | *hades*:*TOS:*:*)",
          "459:  echo m68k-hades-mint\"$UNAME_RELEASE\"",
          "460:  exit ;;",
          "462:  echo m68k-unknown-mint\"$UNAME_RELEASE\"",
          "463:  exit ;;",
          "464:     m68k:machten:*:*)",
          "465:  echo m68k-apple-machten\"$UNAME_RELEASE\"",
          "466:  exit ;;",
          "467:     powerpc:machten:*:*)",
          "468:  echo powerpc-apple-machten\"$UNAME_RELEASE\"",
          "469:  exit ;;",
          "470:     RISC*:Mach:*:*)",
          "471:  echo mips-dec-mach_bsd4.3",
          "472:  exit ;;",
          "473:     RISC*:ULTRIX:*:*)",
          "474:  echo mips-dec-ultrix\"$UNAME_RELEASE\"",
          "475:  exit ;;",
          "476:     VAX*:ULTRIX*:*:*)",
          "477:  echo vax-dec-ultrix\"$UNAME_RELEASE\"",
          "478:  exit ;;",
          "479:     2020:CLIX:*:* | 2430:CLIX:*:*)",
          "480:  echo clipper-intergraph-clix\"$UNAME_RELEASE\"",
          "481:  exit ;;",
          "482:     mips:*:*:UMIPS | mips:*:*:RISCos)",
          "483:  set_cc_for_build",
          "484:  sed 's/^ //' << EOF > \"$dummy.c\"",
          "485: #ifdef __cplusplus",
          "487:  int main (int argc, char *argv[]) {",
          "488: #else",
          "489:  int main (argc, argv) int argc; char *argv[]; {",
          "490: #endif",
          "491:  #if defined (host_mips) && defined (MIPSEB)",
          "492:  #if defined (SYSTYPE_SYSV)",
          "493:    printf (\"mips-mips-riscos%ssysv\\\\n\", argv[1]); exit (0);",
          "494:  #endif",
          "495:  #if defined (SYSTYPE_SVR4)",
          "496:    printf (\"mips-mips-riscos%ssvr4\\\\n\", argv[1]); exit (0);",
          "497:  #endif",
          "498:  #if defined (SYSTYPE_BSD43) || defined(SYSTYPE_BSD)",
          "499:    printf (\"mips-mips-riscos%sbsd\\\\n\", argv[1]); exit (0);",
          "500:  #endif",
          "501:  #endif",
          "502:    exit (-1);",
          "503:  }",
          "504: EOF",
          "505:  $CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" &&",
          "506:    dummyarg=`echo \"$UNAME_RELEASE\" | sed -n 's/\\([0-9]*\\).*/\\1/p'` &&",
          "507:    SYSTEM_NAME=`\"$dummy\" \"$dummyarg\"` &&",
          "508:      { echo \"$SYSTEM_NAME\"; exit; }",
          "509:  echo mips-mips-riscos\"$UNAME_RELEASE\"",
          "510:  exit ;;",
          "511:     Motorola:PowerMAX_OS:*:*)",
          "512:  echo powerpc-motorola-powermax",
          "513:  exit ;;",
          "514:     Motorola:*:4.3:PL8-*)",
          "515:  echo powerpc-harris-powermax",
          "516:  exit ;;",
          "517:     Night_Hawk:*:*:PowerMAX_OS | Synergy:PowerMAX_OS:*:*)",
          "518:  echo powerpc-harris-powermax",
          "519:  exit ;;",
          "520:     Night_Hawk:Power_UNIX:*:*)",
          "521:  echo powerpc-harris-powerunix",
          "522:  exit ;;",
          "523:     m88k:CX/UX:7*:*)",
          "524:  echo m88k-harris-cxux7",
          "525:  exit ;;",
          "526:     m88k:*:4*:R4*)",
          "527:  echo m88k-motorola-sysv4",
          "528:  exit ;;",
          "529:     m88k:*:3*:R3*)",
          "530:  echo m88k-motorola-sysv3",
          "531:  exit ;;",
          "532:     AViiON:dgux:*:*)",
          "533:  # DG/UX returns AViiON for all architectures",
          "534:  UNAME_PROCESSOR=`/usr/bin/uname -p`",
          "535:  if [ \"$UNAME_PROCESSOR\" = mc88100 ] || [ \"$UNAME_PROCESSOR\" = mc88110 ]",
          "536:  then",
          "537:      if [ \"$TARGET_BINARY_INTERFACE\"x = m88kdguxelfx ] || \\",
          "538:         [ \"$TARGET_BINARY_INTERFACE\"x = x ]",
          "539:      then",
          "540:   echo m88k-dg-dgux\"$UNAME_RELEASE\"",
          "541:      else",
          "542:   echo m88k-dg-dguxbcs\"$UNAME_RELEASE\"",
          "543:      fi",
          "544:  else",
          "545:      echo i586-dg-dgux\"$UNAME_RELEASE\"",
          "546:  fi",
          "547:  exit ;;",
          "548:     M88*:DolphinOS:*:*) # DolphinOS (SVR3)",
          "549:  echo m88k-dolphin-sysv3",
          "550:  exit ;;",
          "551:     M88*:*:R3*:*)",
          "552:  # Delta 88k system running SVR3",
          "553:  echo m88k-motorola-sysv3",
          "554:  exit ;;",
          "555:     XD88*:*:*:*) # Tektronix XD88 system running UTekV (SVR3)",
          "556:  echo m88k-tektronix-sysv3",
          "557:  exit ;;",
          "558:     Tek43[0-9][0-9]:UTek:*:*) # Tektronix 4300 system running UTek (BSD)",
          "559:  echo m68k-tektronix-bsd",
          "560:  exit ;;",
          "562:  echo mips-sgi-irix\"`echo \"$UNAME_RELEASE\"|sed -e 's/-/_/g'`\"",
          "563:  exit ;;",
          "564:     ????????:AIX?:[12].1:2)   # AIX 2.2.1 or AIX 2.1.1 is RT/PC AIX.",
          "565:  echo romp-ibm-aix     # uname -m gives an 8 hex-code CPU id",
          "566:  exit ;;               # Note that: echo \"'`uname -s`'\" gives 'AIX '",
          "567:     i*86:AIX:*:*)",
          "568:  echo i386-ibm-aix",
          "569:  exit ;;",
          "570:     ia64:AIX:*:*)",
          "571:  if [ -x /usr/bin/oslevel ] ; then",
          "572:   IBM_REV=`/usr/bin/oslevel`",
          "573:  else",
          "574:   IBM_REV=\"$UNAME_VERSION.$UNAME_RELEASE\"",
          "575:  fi",
          "576:  echo \"$UNAME_MACHINE\"-ibm-aix\"$IBM_REV\"",
          "577:  exit ;;",
          "579:  if grep bos325 /usr/include/stdio.h >/dev/null 2>&1; then",
          "580:   set_cc_for_build",
          "581:   sed 's/^  //' << EOF > \"$dummy.c\"",
          "582:   #include <sys/systemcfg.h>",
          "584:   main()",
          "585:    {",
          "586:    if (!__power_pc())",
          "587:     exit(1);",
          "588:    puts(\"powerpc-ibm-aix3.2.5\");",
          "589:    exit(0);",
          "590:    }",
          "591: EOF",
          "592:   if $CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" && SYSTEM_NAME=`\"$dummy\"`",
          "593:   then",
          "594:    echo \"$SYSTEM_NAME\"",
          "595:   else",
          "596:    echo rs6000-ibm-aix3.2.5",
          "597:   fi",
          "598:  elif grep bos324 /usr/include/stdio.h >/dev/null 2>&1; then",
          "599:   echo rs6000-ibm-aix3.2.4",
          "600:  else",
          "601:   echo rs6000-ibm-aix3.2",
          "602:  fi",
          "603:  exit ;;",
          "605:  IBM_CPU_ID=`/usr/sbin/lsdev -C -c processor -S available | sed 1q | awk '{ print $1 }'`",
          "606:  if /usr/sbin/lsattr -El \"$IBM_CPU_ID\" | grep ' POWER' >/dev/null 2>&1; then",
          "607:   IBM_ARCH=rs6000",
          "608:  else",
          "609:   IBM_ARCH=powerpc",
          "610:  fi",
          "611:  if [ -x /usr/bin/lslpp ] ; then",
          "612:   IBM_REV=`/usr/bin/lslpp -Lqc bos.rte.libc |",
          "613:       awk -F: '{ print $3 }' | sed s/[0-9]*$/0/`",
          "614:  else",
          "615:   IBM_REV=\"$UNAME_VERSION.$UNAME_RELEASE\"",
          "616:  fi",
          "617:  echo \"$IBM_ARCH\"-ibm-aix\"$IBM_REV\"",
          "618:  exit ;;",
          "620:  echo rs6000-ibm-aix",
          "621:  exit ;;",
          "622:     ibmrt:4.4BSD:*|romp-ibm:4.4BSD:*)",
          "623:  echo romp-ibm-bsd4.4",
          "624:  exit ;;",
          "625:     ibmrt:*BSD:*|romp-ibm:BSD:*)            # covers RT/PC BSD and",
          "626:  echo romp-ibm-bsd\"$UNAME_RELEASE\"   # 4.3 with uname added to",
          "627:  exit ;;                             # report: romp-ibm BSD 4.3",
          "629:  echo rs6000-bull-bosx",
          "630:  exit ;;",
          "631:     DPX/2?00:B.O.S.:*:*)",
          "632:  echo m68k-bull-sysv3",
          "633:  exit ;;",
          "634:     9000/[34]??:4.3bsd:1.*:*)",
          "635:  echo m68k-hp-bsd",
          "636:  exit ;;",
          "637:     hp300:4.4BSD:*:* | 9000/[34]??:4.3bsd:2.*:*)",
          "638:  echo m68k-hp-bsd4.4",
          "639:  exit ;;",
          "640:     9000/[34678]??:HP-UX:*:*)",
          "641:  HPUX_REV=`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*.[0B]*//'`",
          "642:  case \"$UNAME_MACHINE\" in",
          "643:      9000/31?)            HP_ARCH=m68000 ;;",
          "644:      9000/[34]??)         HP_ARCH=m68k ;;",
          "645:      9000/[678][0-9][0-9])",
          "646:   if [ -x /usr/bin/getconf ]; then",
          "647:       sc_cpu_version=`/usr/bin/getconf SC_CPU_VERSION 2>/dev/null`",
          "648:       sc_kernel_bits=`/usr/bin/getconf SC_KERNEL_BITS 2>/dev/null`",
          "649:       case \"$sc_cpu_version\" in",
          "650:         523) HP_ARCH=hppa1.0 ;; # CPU_PA_RISC1_0",
          "651:         528) HP_ARCH=hppa1.1 ;; # CPU_PA_RISC1_1",
          "652:         532)                      # CPU_PA_RISC2_0",
          "653:    case \"$sc_kernel_bits\" in",
          "654:      32) HP_ARCH=hppa2.0n ;;",
          "655:      64) HP_ARCH=hppa2.0w ;;",
          "656:      '') HP_ARCH=hppa2.0 ;;   # HP-UX 10.20",
          "657:    esac ;;",
          "658:       esac",
          "659:   fi",
          "660:   if [ \"$HP_ARCH\" = \"\" ]; then",
          "661:       set_cc_for_build",
          "662:       sed 's/^  //' << EOF > \"$dummy.c\"",
          "664:   #define _HPUX_SOURCE",
          "665:   #include <stdlib.h>",
          "666:   #include <unistd.h>",
          "668:   int main ()",
          "669:   {",
          "670:   #if defined(_SC_KERNEL_BITS)",
          "671:       long bits = sysconf(_SC_KERNEL_BITS);",
          "672:   #endif",
          "673:       long cpu  = sysconf (_SC_CPU_VERSION);",
          "675:       switch (cpu)",
          "676:    {",
          "677:    case CPU_PA_RISC1_0: puts (\"hppa1.0\"); break;",
          "678:    case CPU_PA_RISC1_1: puts (\"hppa1.1\"); break;",
          "679:    case CPU_PA_RISC2_0:",
          "680:   #if defined(_SC_KERNEL_BITS)",
          "681:        switch (bits)",
          "682:     {",
          "683:     case 64: puts (\"hppa2.0w\"); break;",
          "684:     case 32: puts (\"hppa2.0n\"); break;",
          "685:     default: puts (\"hppa2.0\"); break;",
          "686:     } break;",
          "688:        puts (\"hppa2.0\"); break;",
          "689:   #endif",
          "690:    default: puts (\"hppa1.0\"); break;",
          "691:    }",
          "692:       exit (0);",
          "693:   }",
          "694: EOF",
          "695:       (CCOPTS=\"\" $CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" 2>/dev/null) && HP_ARCH=`\"$dummy\"`",
          "696:       test -z \"$HP_ARCH\" && HP_ARCH=hppa",
          "697:   fi ;;",
          "698:  esac",
          "699:  if [ \"$HP_ARCH\" = hppa2.0w ]",
          "700:  then",
          "701:      set_cc_for_build",
          "703:      # hppa2.0w-hp-hpux* has a 64-bit kernel and a compiler generating",
          "704:      # 32-bit code.  hppa64-hp-hpux* has the same kernel and a compiler",
          "705:      # generating 64-bit code.  GNU and HP use different nomenclature:",
          "706:      #",
          "707:      # $ CC_FOR_BUILD=cc ./config.guess",
          "708:      # => hppa2.0w-hp-hpux11.23",
          "709:      # $ CC_FOR_BUILD=\"cc +DA2.0w\" ./config.guess",
          "710:      # => hppa64-hp-hpux11.23",
          "712:      if echo __LP64__ | (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) |",
          "713:   grep -q __LP64__",
          "714:      then",
          "715:   HP_ARCH=hppa2.0w",
          "716:      else",
          "717:   HP_ARCH=hppa64",
          "718:      fi",
          "719:  fi",
          "720:  echo \"$HP_ARCH\"-hp-hpux\"$HPUX_REV\"",
          "721:  exit ;;",
          "722:     ia64:HP-UX:*:*)",
          "723:  HPUX_REV=`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*.[0B]*//'`",
          "724:  echo ia64-hp-hpux\"$HPUX_REV\"",
          "725:  exit ;;",
          "726:     3050*:HI-UX:*:*)",
          "727:  set_cc_for_build",
          "728:  sed 's/^ //' << EOF > \"$dummy.c\"",
          "729:  #include <unistd.h>",
          "730:  int",
          "731:  main ()",
          "732:  {",
          "733:    long cpu = sysconf (_SC_CPU_VERSION);",
          "735:       true for CPU_PA_RISC1_0.  CPU_IS_PA_RISC returns correct",
          "737:    if (CPU_IS_PA_RISC (cpu))",
          "738:      {",
          "739:        switch (cpu)",
          "740:   {",
          "741:     case CPU_PA_RISC1_0: puts (\"hppa1.0-hitachi-hiuxwe2\"); break;",
          "742:     case CPU_PA_RISC1_1: puts (\"hppa1.1-hitachi-hiuxwe2\"); break;",
          "743:     case CPU_PA_RISC2_0: puts (\"hppa2.0-hitachi-hiuxwe2\"); break;",
          "744:     default: puts (\"hppa-hitachi-hiuxwe2\"); break;",
          "745:   }",
          "746:      }",
          "747:    else if (CPU_IS_HP_MC68K (cpu))",
          "748:      puts (\"m68k-hitachi-hiuxwe2\");",
          "749:    else puts (\"unknown-hitachi-hiuxwe2\");",
          "750:    exit (0);",
          "751:  }",
          "752: EOF",
          "753:  $CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" && SYSTEM_NAME=`\"$dummy\"` &&",
          "754:   { echo \"$SYSTEM_NAME\"; exit; }",
          "755:  echo unknown-hitachi-hiuxwe2",
          "756:  exit ;;",
          "757:     9000/7??:4.3bsd:*:* | 9000/8?[79]:4.3bsd:*:*)",
          "758:  echo hppa1.1-hp-bsd",
          "759:  exit ;;",
          "760:     9000/8??:4.3bsd:*:*)",
          "761:  echo hppa1.0-hp-bsd",
          "762:  exit ;;",
          "764:  echo hppa1.0-hp-mpeix",
          "765:  exit ;;",
          "766:     hp7??:OSF1:*:* | hp8?[79]:OSF1:*:*)",
          "767:  echo hppa1.1-hp-osf",
          "768:  exit ;;",
          "769:     hp8??:OSF1:*:*)",
          "770:  echo hppa1.0-hp-osf",
          "771:  exit ;;",
          "772:     i*86:OSF1:*:*)",
          "773:  if [ -x /usr/sbin/sysversion ] ; then",
          "774:      echo \"$UNAME_MACHINE\"-unknown-osf1mk",
          "775:  else",
          "776:      echo \"$UNAME_MACHINE\"-unknown-osf1",
          "777:  fi",
          "778:  exit ;;",
          "779:     parisc*:Lites*:*:*)",
          "780:  echo hppa1.1-hp-lites",
          "781:  exit ;;",
          "782:     C1*:ConvexOS:*:* | convex:ConvexOS:C1*:*)",
          "783:  echo c1-convex-bsd",
          "784:  exit ;;",
          "785:     C2*:ConvexOS:*:* | convex:ConvexOS:C2*:*)",
          "786:  if getsysinfo -f scalar_acc",
          "787:  then echo c32-convex-bsd",
          "788:  else echo c2-convex-bsd",
          "789:  fi",
          "790:  exit ;;",
          "791:     C34*:ConvexOS:*:* | convex:ConvexOS:C34*:*)",
          "792:  echo c34-convex-bsd",
          "793:  exit ;;",
          "794:     C38*:ConvexOS:*:* | convex:ConvexOS:C38*:*)",
          "795:  echo c38-convex-bsd",
          "796:  exit ;;",
          "797:     C4*:ConvexOS:*:* | convex:ConvexOS:C4*:*)",
          "798:  echo c4-convex-bsd",
          "799:  exit ;;",
          "800:     CRAY*Y-MP:*:*:*)",
          "801:  echo ymp-cray-unicos\"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'",
          "802:  exit ;;",
          "803:     CRAY*[A-Z]90:*:*:*)",
          "804:  echo \"$UNAME_MACHINE\"-cray-unicos\"$UNAME_RELEASE\" \\",
          "805:  | sed -e 's/CRAY.*\\([A-Z]90\\)/\\1/' \\",
          "806:        -e y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/ \\",
          "807:        -e 's/\\.[^.]*$/.X/'",
          "808:  exit ;;",
          "809:     CRAY*TS:*:*:*)",
          "810:  echo t90-cray-unicos\"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'",
          "811:  exit ;;",
          "812:     CRAY*T3E:*:*:*)",
          "813:  echo alphaev5-cray-unicosmk\"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'",
          "814:  exit ;;",
          "815:     CRAY*SV1:*:*:*)",
          "816:  echo sv1-cray-unicos\"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'",
          "817:  exit ;;",
          "819:  echo craynv-cray-unicosmp\"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'",
          "820:  exit ;;",
          "821:     F30[01]:UNIX_System_V:*:* | F700:UNIX_System_V:*:*)",
          "822:  FUJITSU_PROC=`uname -m | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz`",
          "823:  FUJITSU_SYS=`uname -p | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/\\///'`",
          "824:  FUJITSU_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/ /_/'`",
          "825:  echo \"${FUJITSU_PROC}-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\"",
          "826:  exit ;;",
          "827:     5000:UNIX_System_V:4.*:*)",
          "828:  FUJITSU_SYS=`uname -p | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/\\///'`",
          "829:  FUJITSU_REL=`echo \"$UNAME_RELEASE\" | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/ /_/'`",
          "830:  echo \"sparc-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\"",
          "831:  exit ;;",
          "832:     i*86:BSD/386:*:* | i*86:BSD/OS:*:* | *:Ascend\\ Embedded/OS:*:*)",
          "833:  echo \"$UNAME_MACHINE\"-pc-bsdi\"$UNAME_RELEASE\"",
          "834:  exit ;;",
          "835:     sparc*:BSD/OS:*:*)",
          "836:  echo sparc-unknown-bsdi\"$UNAME_RELEASE\"",
          "837:  exit ;;",
          "839:  echo \"$UNAME_MACHINE\"-unknown-bsdi\"$UNAME_RELEASE\"",
          "840:  exit ;;",
          "841:     arm:FreeBSD:*:*)",
          "842:  UNAME_PROCESSOR=`uname -p`",
          "843:  set_cc_for_build",
          "844:  if echo __ARM_PCS_VFP | $CC_FOR_BUILD -E - 2>/dev/null \\",
          "845:      | grep -q __ARM_PCS_VFP",
          "846:  then",
          "847:      echo \"${UNAME_PROCESSOR}\"-unknown-freebsd\"`echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'`\"-gnueabi",
          "848:  else",
          "849:      echo \"${UNAME_PROCESSOR}\"-unknown-freebsd\"`echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'`\"-gnueabihf",
          "850:  fi",
          "851:  exit ;;",
          "853:  UNAME_PROCESSOR=`/usr/bin/uname -p`",
          "854:  case \"$UNAME_PROCESSOR\" in",
          "855:      amd64)",
          "856:   UNAME_PROCESSOR=x86_64 ;;",
          "857:      i386)",
          "858:   UNAME_PROCESSOR=i586 ;;",
          "859:  esac",
          "860:  echo \"$UNAME_PROCESSOR\"-unknown-freebsd\"`echo \"$UNAME_RELEASE\"|sed -e 's/[-(].*//'`\"",
          "861:  exit ;;",
          "862:     i*:CYGWIN*:*)",
          "863:  echo \"$UNAME_MACHINE\"-pc-cygwin",
          "864:  exit ;;",
          "866:  echo \"$UNAME_MACHINE\"-pc-mingw64",
          "867:  exit ;;",
          "869:  echo \"$UNAME_MACHINE\"-pc-mingw32",
          "870:  exit ;;",
          "872:  echo \"$UNAME_MACHINE\"-pc-msys",
          "873:  exit ;;",
          "874:     i*:PW*:*)",
          "875:  echo \"$UNAME_MACHINE\"-pc-pw32",
          "876:  exit ;;",
          "878:  case \"$UNAME_MACHINE\" in",
          "879:      x86)",
          "880:   echo i586-pc-interix\"$UNAME_RELEASE\"",
          "881:   exit ;;",
          "882:      authenticamd | genuineintel | EM64T)",
          "883:   echo x86_64-unknown-interix\"$UNAME_RELEASE\"",
          "884:   exit ;;",
          "885:      IA64)",
          "886:   echo ia64-unknown-interix\"$UNAME_RELEASE\"",
          "887:   exit ;;",
          "888:  esac ;;",
          "889:     i*:UWIN*:*)",
          "890:  echo \"$UNAME_MACHINE\"-pc-uwin",
          "891:  exit ;;",
          "892:     amd64:CYGWIN*:*:* | x86_64:CYGWIN*:*:*)",
          "893:  echo x86_64-pc-cygwin",
          "894:  exit ;;",
          "895:     prep*:SunOS:5.*:*)",
          "896:  echo powerpcle-unknown-solaris2\"`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*//'`\"",
          "897:  exit ;;",
          "899:  # the GNU system",
          "900:  echo \"`echo \"$UNAME_MACHINE\"|sed -e 's,[-/].*$,,'`-unknown-$LIBC`echo \"$UNAME_RELEASE\"|sed -e 's,/.*$,,'`\"",
          "901:  exit ;;",
          "903:  # other systems with GNU libc and userland",
          "904:  echo \"$UNAME_MACHINE-unknown-`echo \"$UNAME_SYSTEM\" | sed 's,^[^/]*/,,' | tr \"[:upper:]\" \"[:lower:]\"``echo \"$UNAME_RELEASE\"|sed -e 's/[-(].*//'`-$LIBC\"",
          "905:  exit ;;",
          "907:  echo \"$UNAME_MACHINE\"-unknown-minix",
          "908:  exit ;;",
          "909:     aarch64:Linux:*:*)",
          "910:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "911:  exit ;;",
          "912:     aarch64_be:Linux:*:*)",
          "913:  UNAME_MACHINE=aarch64_be",
          "914:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "915:  exit ;;",
          "916:     alpha:Linux:*:*)",
          "917:  case `sed -n '/^cpu model/s/^.*: \\(.*\\)/\\1/p' < /proc/cpuinfo` in",
          "918:    EV5)   UNAME_MACHINE=alphaev5 ;;",
          "919:    EV56)  UNAME_MACHINE=alphaev56 ;;",
          "920:    PCA56) UNAME_MACHINE=alphapca56 ;;",
          "921:    PCA57) UNAME_MACHINE=alphapca56 ;;",
          "922:    EV6)   UNAME_MACHINE=alphaev6 ;;",
          "923:    EV67)  UNAME_MACHINE=alphaev67 ;;",
          "924:    EV68*) UNAME_MACHINE=alphaev68 ;;",
          "925:  esac",
          "926:  objdump --private-headers /bin/sh | grep -q ld.so.1",
          "927:  if test \"$?\" = 0 ; then LIBC=gnulibc1 ; fi",
          "928:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "929:  exit ;;",
          "930:     arc:Linux:*:* | arceb:Linux:*:*)",
          "931:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "932:  exit ;;",
          "933:     arm*:Linux:*:*)",
          "934:  set_cc_for_build",
          "935:  if echo __ARM_EABI__ | $CC_FOR_BUILD -E - 2>/dev/null \\",
          "936:      | grep -q __ARM_EABI__",
          "937:  then",
          "938:      echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "939:  else",
          "940:      if echo __ARM_PCS_VFP | $CC_FOR_BUILD -E - 2>/dev/null \\",
          "941:   | grep -q __ARM_PCS_VFP",
          "942:      then",
          "943:   echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"eabi",
          "944:      else",
          "945:   echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"eabihf",
          "946:      fi",
          "947:  fi",
          "948:  exit ;;",
          "949:     avr32*:Linux:*:*)",
          "950:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "951:  exit ;;",
          "952:     cris:Linux:*:*)",
          "953:  echo \"$UNAME_MACHINE\"-axis-linux-\"$LIBC\"",
          "954:  exit ;;",
          "955:     crisv32:Linux:*:*)",
          "956:  echo \"$UNAME_MACHINE\"-axis-linux-\"$LIBC\"",
          "957:  exit ;;",
          "958:     e2k:Linux:*:*)",
          "959:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "960:  exit ;;",
          "961:     frv:Linux:*:*)",
          "962:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "963:  exit ;;",
          "964:     hexagon:Linux:*:*)",
          "965:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "966:  exit ;;",
          "967:     i*86:Linux:*:*)",
          "968:  echo \"$UNAME_MACHINE\"-pc-linux-\"$LIBC\"",
          "969:  exit ;;",
          "970:     ia64:Linux:*:*)",
          "971:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "972:  exit ;;",
          "973:     k1om:Linux:*:*)",
          "974:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "975:  exit ;;",
          "976:     m32r*:Linux:*:*)",
          "977:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "978:  exit ;;",
          "979:     m68*:Linux:*:*)",
          "980:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "981:  exit ;;",
          "982:     mips:Linux:*:* | mips64:Linux:*:*)",
          "983:  set_cc_for_build",
          "984:  sed 's/^ //' << EOF > \"$dummy.c\"",
          "985:  #undef CPU",
          "986:  #undef ${UNAME_MACHINE}",
          "987:  #undef ${UNAME_MACHINE}el",
          "988:  #if defined(__MIPSEL__) || defined(__MIPSEL) || defined(_MIPSEL) || defined(MIPSEL)",
          "989:  CPU=${UNAME_MACHINE}el",
          "990:  #else",
          "991:  #if defined(__MIPSEB__) || defined(__MIPSEB) || defined(_MIPSEB) || defined(MIPSEB)",
          "992:  CPU=${UNAME_MACHINE}",
          "993:  #else",
          "994:  CPU=",
          "995:  #endif",
          "996:  #endif",
          "997: EOF",
          "998:  eval \"`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^CPU'`\"",
          "999:  test \"x$CPU\" != x && { echo \"$CPU-unknown-linux-$LIBC\"; exit; }",
          "1000:  ;;",
          "1001:     mips64el:Linux:*:*)",
          "1002:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "1003:  exit ;;",
          "1004:     openrisc*:Linux:*:*)",
          "1005:  echo or1k-unknown-linux-\"$LIBC\"",
          "1006:  exit ;;",
          "1007:     or32:Linux:*:* | or1k*:Linux:*:*)",
          "1008:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "1009:  exit ;;",
          "1010:     padre:Linux:*:*)",
          "1011:  echo sparc-unknown-linux-\"$LIBC\"",
          "1012:  exit ;;",
          "1013:     parisc64:Linux:*:* | hppa64:Linux:*:*)",
          "1014:  echo hppa64-unknown-linux-\"$LIBC\"",
          "1015:  exit ;;",
          "1016:     parisc:Linux:*:* | hppa:Linux:*:*)",
          "1017:  # Look for CPU level",
          "1018:  case `grep '^cpu[^a-z]*:' /proc/cpuinfo 2>/dev/null | cut -d' ' -f2` in",
          "1019:    PA7*) echo hppa1.1-unknown-linux-\"$LIBC\" ;;",
          "1020:    PA8*) echo hppa2.0-unknown-linux-\"$LIBC\" ;;",
          "1022:  esac",
          "1023:  exit ;;",
          "1024:     ppc64:Linux:*:*)",
          "1025:  echo powerpc64-unknown-linux-\"$LIBC\"",
          "1026:  exit ;;",
          "1027:     ppc:Linux:*:*)",
          "1028:  echo powerpc-unknown-linux-\"$LIBC\"",
          "1029:  exit ;;",
          "1030:     ppc64le:Linux:*:*)",
          "1031:  echo powerpc64le-unknown-linux-\"$LIBC\"",
          "1032:  exit ;;",
          "1033:     ppcle:Linux:*:*)",
          "1034:  echo powerpcle-unknown-linux-\"$LIBC\"",
          "1035:  exit ;;",
          "1036:     riscv32:Linux:*:* | riscv64:Linux:*:*)",
          "1037:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "1038:  exit ;;",
          "1039:     s390:Linux:*:* | s390x:Linux:*:*)",
          "1040:  echo \"$UNAME_MACHINE\"-ibm-linux-\"$LIBC\"",
          "1041:  exit ;;",
          "1042:     sh64*:Linux:*:*)",
          "1043:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "1044:  exit ;;",
          "1045:     sh*:Linux:*:*)",
          "1046:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "1047:  exit ;;",
          "1048:     sparc:Linux:*:* | sparc64:Linux:*:*)",
          "1049:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "1050:  exit ;;",
          "1051:     tile*:Linux:*:*)",
          "1052:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "1053:  exit ;;",
          "1054:     vax:Linux:*:*)",
          "1055:  echo \"$UNAME_MACHINE\"-dec-linux-\"$LIBC\"",
          "1056:  exit ;;",
          "1057:     x86_64:Linux:*:*)",
          "1058:  echo \"$UNAME_MACHINE\"-pc-linux-\"$LIBC\"",
          "1059:  exit ;;",
          "1060:     xtensa*:Linux:*:*)",
          "1061:  echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"",
          "1062:  exit ;;",
          "1063:     i*86:DYNIX/ptx:4*:*)",
          "1064:  # ptx 4.0 does uname -s correctly, with DYNIX/ptx in there.",
          "1065:  # earlier versions are messed up and put the nodename in both",
          "1066:  # sysname and nodename.",
          "1067:  echo i386-sequent-sysv4",
          "1068:  exit ;;",
          "1069:     i*86:UNIX_SV:4.2MP:2.*)",
          "1070:  # Unixware is an offshoot of SVR4, but it has its own version",
          "1071:  # number series starting with 2...",
          "1072:  # I am not positive that other SVR4 systems won't match this,",
          "1073:  # I just have to hope.  -- rms.",
          "1074:  # Use sysv4.2uw... so that sysv4* matches it.",
          "1075:  echo \"$UNAME_MACHINE\"-pc-sysv4.2uw\"$UNAME_VERSION\"",
          "1076:  exit ;;",
          "1077:     i*86:OS/2:*:*)",
          "1078:  # If we were able to find `uname', then EMX Unix compatibility",
          "1079:  # is probably installed.",
          "1080:  echo \"$UNAME_MACHINE\"-pc-os2-emx",
          "1081:  exit ;;",
          "1082:     i*86:XTS-300:*:STOP)",
          "1083:  echo \"$UNAME_MACHINE\"-unknown-stop",
          "1084:  exit ;;",
          "1085:     i*86:atheos:*:*)",
          "1086:  echo \"$UNAME_MACHINE\"-unknown-atheos",
          "1087:  exit ;;",
          "1088:     i*86:syllable:*:*)",
          "1089:  echo \"$UNAME_MACHINE\"-pc-syllable",
          "1090:  exit ;;",
          "1091:     i*86:LynxOS:2.*:* | i*86:LynxOS:3.[01]*:* | i*86:LynxOS:4.[02]*:*)",
          "1092:  echo i386-unknown-lynxos\"$UNAME_RELEASE\"",
          "1093:  exit ;;",
          "1094:     i*86:*DOS:*:*)",
          "1095:  echo \"$UNAME_MACHINE\"-pc-msdosdjgpp",
          "1096:  exit ;;",
          "1097:     i*86:*:4.*:*)",
          "1098:  UNAME_REL=`echo \"$UNAME_RELEASE\" | sed 's/\\/MP$//'`",
          "1099:  if grep Novell /usr/include/link.h >/dev/null 2>/dev/null; then",
          "1100:   echo \"$UNAME_MACHINE\"-univel-sysv\"$UNAME_REL\"",
          "1101:  else",
          "1102:   echo \"$UNAME_MACHINE\"-pc-sysv\"$UNAME_REL\"",
          "1103:  fi",
          "1104:  exit ;;",
          "1105:     i*86:*:5:[678]*)",
          "1106:  # UnixWare 7.x, OpenUNIX and OpenServer 6.",
          "1107:  case `/bin/uname -X | grep \"^Machine\"` in",
          "1111:  esac",
          "1112:  echo \"$UNAME_MACHINE-unknown-sysv${UNAME_RELEASE}${UNAME_SYSTEM}{$UNAME_VERSION}\"",
          "1113:  exit ;;",
          "1114:     i*86:*:3.2:*)",
          "1115:  if test -f /usr/options/cb.name; then",
          "1116:   UNAME_REL=`sed -n 's/.*Version //p' </usr/options/cb.name`",
          "1117:   echo \"$UNAME_MACHINE\"-pc-isc\"$UNAME_REL\"",
          "1118:  elif /bin/uname -X 2>/dev/null >/dev/null ; then",
          "1119:   UNAME_REL=`(/bin/uname -X|grep Release|sed -e 's/.*= //')`",
          "1120:   (/bin/uname -X|grep i80486 >/dev/null) && UNAME_MACHINE=i486",
          "1121:   (/bin/uname -X|grep '^Machine.*Pentium' >/dev/null) \\",
          "1122:    && UNAME_MACHINE=i586",
          "1123:   (/bin/uname -X|grep '^Machine.*Pent *II' >/dev/null) \\",
          "1124:    && UNAME_MACHINE=i686",
          "1125:   (/bin/uname -X|grep '^Machine.*Pentium Pro' >/dev/null) \\",
          "1126:    && UNAME_MACHINE=i686",
          "1127:   echo \"$UNAME_MACHINE\"-pc-sco\"$UNAME_REL\"",
          "1128:  else",
          "1129:   echo \"$UNAME_MACHINE\"-pc-sysv32",
          "1130:  fi",
          "1131:  exit ;;",
          "1132:     pc:*:*:*)",
          "1133:  # Left here for compatibility:",
          "1134:  # uname -m prints for DJGPP always 'pc', but it prints nothing about",
          "1135:  # the processor, so we play safe by assuming i586.",
          "1136:  # Note: whatever this is, it MUST be the same as what config.sub",
          "1137:  # prints for the \"djgpp\" host, or else GDB configure will decide that",
          "1138:  # this is a cross-build.",
          "1139:  echo i586-pc-msdosdjgpp",
          "1140:  exit ;;",
          "1141:     Intel:Mach:3*:*)",
          "1142:  echo i386-pc-mach3",
          "1143:  exit ;;",
          "1144:     paragon:*:*:*)",
          "1145:  echo i860-intel-osf1",
          "1146:  exit ;;",
          "1147:     i860:*:4.*:*) # i860-SVR4",
          "1148:  if grep Stardent /usr/include/sys/uadmin.h >/dev/null 2>&1 ; then",
          "1149:    echo i860-stardent-sysv\"$UNAME_RELEASE\" # Stardent Vistra i860-SVR4",
          "1150:  else # Add other i860-SVR4 vendors below as they are discovered.",
          "1151:    echo i860-unknown-sysv\"$UNAME_RELEASE\"  # Unknown i860-SVR4",
          "1152:  fi",
          "1153:  exit ;;",
          "1154:     mini*:CTIX:SYS*5:*)",
          "1155:  # \"miniframe\"",
          "1156:  echo m68010-convergent-sysv",
          "1157:  exit ;;",
          "1158:     mc68k:UNIX:SYSTEM5:3.51m)",
          "1159:  echo m68k-convergent-sysv",
          "1160:  exit ;;",
          "1161:     M680?0:D-NIX:5.3:*)",
          "1162:  echo m68k-diab-dnix",
          "1163:  exit ;;",
          "1164:     M68*:*:R3V[5678]*:*)",
          "1165:  test -r /sysV68 && { echo 'm68k-motorola-sysv'; exit; } ;;",
          "1166:     3[345]??:*:4.0:3.0 | 3[34]??A:*:4.0:3.0 | 3[34]??,*:*:4.0:3.0 | 3[34]??/*:*:4.0:3.0 | 4400:*:4.0:3.0 | 4850:*:4.0:3.0 | SKA40:*:4.0:3.0 | SDS2:*:4.0:3.0 | SHG2:*:4.0:3.0 | S7501*:*:4.0:3.0)",
          "1167:  OS_REL=''",
          "1168:  test -r /etc/.relid \\",
          "1169:  && OS_REL=.`sed -n 's/[^ ]* [^ ]* \\([0-9][0-9]\\).*/\\1/p' < /etc/.relid`",
          "1170:  /bin/uname -p 2>/dev/null | grep 86 >/dev/null \\",
          "1171:    && { echo i486-ncr-sysv4.3\"$OS_REL\"; exit; }",
          "1172:  /bin/uname -p 2>/dev/null | /bin/grep entium >/dev/null \\",
          "1173:    && { echo i586-ncr-sysv4.3\"$OS_REL\"; exit; } ;;",
          "1174:     3[34]??:*:4.0:* | 3[34]??,*:*:4.0:*)",
          "1175:  /bin/uname -p 2>/dev/null | grep 86 >/dev/null \\",
          "1176:    && { echo i486-ncr-sysv4; exit; } ;;",
          "1177:     NCR*:*:4.2:* | MPRAS*:*:4.2:*)",
          "1178:  OS_REL='.3'",
          "1179:  test -r /etc/.relid \\",
          "1180:      && OS_REL=.`sed -n 's/[^ ]* [^ ]* \\([0-9][0-9]\\).*/\\1/p' < /etc/.relid`",
          "1181:  /bin/uname -p 2>/dev/null | grep 86 >/dev/null \\",
          "1182:      && { echo i486-ncr-sysv4.3\"$OS_REL\"; exit; }",
          "1183:  /bin/uname -p 2>/dev/null | /bin/grep entium >/dev/null \\",
          "1184:      && { echo i586-ncr-sysv4.3\"$OS_REL\"; exit; }",
          "1185:  /bin/uname -p 2>/dev/null | /bin/grep pteron >/dev/null \\",
          "1186:      && { echo i586-ncr-sysv4.3\"$OS_REL\"; exit; } ;;",
          "1187:     m68*:LynxOS:2.*:* | m68*:LynxOS:3.0*:*)",
          "1188:  echo m68k-unknown-lynxos\"$UNAME_RELEASE\"",
          "1189:  exit ;;",
          "1190:     mc68030:UNIX_System_V:4.*:*)",
          "1191:  echo m68k-atari-sysv4",
          "1192:  exit ;;",
          "1193:     TSUNAMI:LynxOS:2.*:*)",
          "1194:  echo sparc-unknown-lynxos\"$UNAME_RELEASE\"",
          "1195:  exit ;;",
          "1196:     rs6000:LynxOS:2.*:*)",
          "1197:  echo rs6000-unknown-lynxos\"$UNAME_RELEASE\"",
          "1198:  exit ;;",
          "1199:     PowerPC:LynxOS:2.*:* | PowerPC:LynxOS:3.[01]*:* | PowerPC:LynxOS:4.[02]*:*)",
          "1200:  echo powerpc-unknown-lynxos\"$UNAME_RELEASE\"",
          "1201:  exit ;;",
          "1202:     SM[BE]S:UNIX_SV:*:*)",
          "1203:  echo mips-dde-sysv\"$UNAME_RELEASE\"",
          "1204:  exit ;;",
          "1205:     RM*:ReliantUNIX-*:*:*)",
          "1206:  echo mips-sni-sysv4",
          "1207:  exit ;;",
          "1208:     RM*:SINIX-*:*:*)",
          "1209:  echo mips-sni-sysv4",
          "1210:  exit ;;",
          "1212:  if uname -p 2>/dev/null >/dev/null ; then",
          "1213:   UNAME_MACHINE=`(uname -p) 2>/dev/null`",
          "1214:   echo \"$UNAME_MACHINE\"-sni-sysv4",
          "1215:  else",
          "1216:   echo ns32k-sni-sysv",
          "1217:  fi",
          "1218:  exit ;;",
          "1219:     PENTIUM:*:4.0*:*) # Unisys `ClearPath HMP IX 4000' SVR4/MP effort",
          "1220:    # says <Richard.M.Bartel@ccMail.Census.GOV>",
          "1221:  echo i586-unisys-sysv4",
          "1222:  exit ;;",
          "1224:  # From Gerald Hewes <hewes@openmarket.com>.",
          "1225:  # How about differentiating between stratus architectures? -djm",
          "1226:  echo hppa1.1-stratus-sysv4",
          "1227:  exit ;;",
          "1229:  # From seanf@swdc.stratus.com.",
          "1230:  echo i860-stratus-sysv4",
          "1231:  exit ;;",
          "1232:     i*86:VOS:*:*)",
          "1233:  # From Paul.Green@stratus.com.",
          "1234:  echo \"$UNAME_MACHINE\"-stratus-vos",
          "1235:  exit ;;",
          "1237:  # From Paul.Green@stratus.com.",
          "1238:  echo hppa1.1-stratus-vos",
          "1239:  exit ;;",
          "1240:     mc68*:A/UX:*:*)",
          "1241:  echo m68k-apple-aux\"$UNAME_RELEASE\"",
          "1242:  exit ;;",
          "1243:     news*:NEWS-OS:6*:*)",
          "1244:  echo mips-sony-newsos6",
          "1245:  exit ;;",
          "1246:     R[34]000:*System_V*:*:* | R4000:UNIX_SYSV:*:* | R*000:UNIX_SV:*:*)",
          "1247:  if [ -d /usr/nec ]; then",
          "1248:   echo mips-nec-sysv\"$UNAME_RELEASE\"",
          "1249:  else",
          "1250:   echo mips-unknown-sysv\"$UNAME_RELEASE\"",
          "1251:  fi",
          "1252:  exit ;;",
          "1253:     BeBox:BeOS:*:*) # BeOS running on hardware made by Be, PPC only.",
          "1254:  echo powerpc-be-beos",
          "1255:  exit ;;",
          "1256:     BeMac:BeOS:*:*) # BeOS running on Mac or Mac clone, PPC only.",
          "1257:  echo powerpc-apple-beos",
          "1258:  exit ;;",
          "1259:     BePC:BeOS:*:*) # BeOS running on Intel PC compatible.",
          "1260:  echo i586-pc-beos",
          "1261:  exit ;;",
          "1262:     BePC:Haiku:*:*) # Haiku running on Intel PC compatible.",
          "1263:  echo i586-pc-haiku",
          "1264:  exit ;;",
          "1265:     x86_64:Haiku:*:*)",
          "1266:  echo x86_64-unknown-haiku",
          "1267:  exit ;;",
          "1268:     SX-4:SUPER-UX:*:*)",
          "1269:  echo sx4-nec-superux\"$UNAME_RELEASE\"",
          "1270:  exit ;;",
          "1271:     SX-5:SUPER-UX:*:*)",
          "1272:  echo sx5-nec-superux\"$UNAME_RELEASE\"",
          "1273:  exit ;;",
          "1274:     SX-6:SUPER-UX:*:*)",
          "1275:  echo sx6-nec-superux\"$UNAME_RELEASE\"",
          "1276:  exit ;;",
          "1277:     SX-7:SUPER-UX:*:*)",
          "1278:  echo sx7-nec-superux\"$UNAME_RELEASE\"",
          "1279:  exit ;;",
          "1280:     SX-8:SUPER-UX:*:*)",
          "1281:  echo sx8-nec-superux\"$UNAME_RELEASE\"",
          "1282:  exit ;;",
          "1283:     SX-8R:SUPER-UX:*:*)",
          "1284:  echo sx8r-nec-superux\"$UNAME_RELEASE\"",
          "1285:  exit ;;",
          "1286:     SX-ACE:SUPER-UX:*:*)",
          "1287:  echo sxace-nec-superux\"$UNAME_RELEASE\"",
          "1288:  exit ;;",
          "1289:     Power*:Rhapsody:*:*)",
          "1290:  echo powerpc-apple-rhapsody\"$UNAME_RELEASE\"",
          "1291:  exit ;;",
          "1293:  echo \"$UNAME_MACHINE\"-apple-rhapsody\"$UNAME_RELEASE\"",
          "1294:  exit ;;",
          "1296:  UNAME_PROCESSOR=`uname -p` || UNAME_PROCESSOR=unknown",
          "1297:  set_cc_for_build",
          "1298:  if test \"$UNAME_PROCESSOR\" = unknown ; then",
          "1299:      UNAME_PROCESSOR=powerpc",
          "1300:  fi",
          "1301:  if test \"`echo \"$UNAME_RELEASE\" | sed -e 's/\\..*//'`\" -le 10 ; then",
          "1302:      if [ \"$CC_FOR_BUILD\" != no_compiler_found ]; then",
          "1303:   if (echo '#ifdef __LP64__'; echo IS_64BIT_ARCH; echo '#endif') | \\",
          "1304:          (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\",
          "1305:          grep IS_64BIT_ARCH >/dev/null",
          "1306:   then",
          "1307:       case $UNAME_PROCESSOR in",
          "1308:    i386) UNAME_PROCESSOR=x86_64 ;;",
          "1309:    powerpc) UNAME_PROCESSOR=powerpc64 ;;",
          "1310:       esac",
          "1311:   fi",
          "1312:   # On 10.4-10.6 one might compile for PowerPC via gcc -arch ppc",
          "1313:   if (echo '#ifdef __POWERPC__'; echo IS_PPC; echo '#endif') | \\",
          "1314:          (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\",
          "1315:          grep IS_PPC >/dev/null",
          "1316:   then",
          "1317:       UNAME_PROCESSOR=powerpc",
          "1318:   fi",
          "1319:      fi",
          "1320:  elif test \"$UNAME_PROCESSOR\" = i386 ; then",
          "1321:      # Avoid executing cc on OS X 10.9, as it ships with a stub",
          "1322:      # that puts up a graphical alert prompting to install",
          "1323:      # developer tools.  Any system running Mac OS X 10.7 or",
          "1324:      # later (Darwin 11 and later) is required to have a 64-bit",
          "1325:      # processor. This is not true of the ARM version of Darwin",
          "1326:      # that Apple uses in portable devices.",
          "1327:      UNAME_PROCESSOR=x86_64",
          "1328:  fi",
          "1329:  echo \"$UNAME_PROCESSOR\"-apple-darwin\"$UNAME_RELEASE\"",
          "1330:  exit ;;",
          "1332:  UNAME_PROCESSOR=`uname -p`",
          "1333:  if test \"$UNAME_PROCESSOR\" = x86; then",
          "1334:   UNAME_PROCESSOR=i386",
          "1335:   UNAME_MACHINE=pc",
          "1336:  fi",
          "1337:  echo \"$UNAME_PROCESSOR\"-\"$UNAME_MACHINE\"-nto-qnx\"$UNAME_RELEASE\"",
          "1338:  exit ;;",
          "1340:  echo i386-pc-qnx",
          "1341:  exit ;;",
          "1342:     NEO-*:NONSTOP_KERNEL:*:*)",
          "1343:  echo neo-tandem-nsk\"$UNAME_RELEASE\"",
          "1344:  exit ;;",
          "1345:     NSE-*:NONSTOP_KERNEL:*:*)",
          "1346:  echo nse-tandem-nsk\"$UNAME_RELEASE\"",
          "1347:  exit ;;",
          "1348:     NSR-*:NONSTOP_KERNEL:*:*)",
          "1349:  echo nsr-tandem-nsk\"$UNAME_RELEASE\"",
          "1350:  exit ;;",
          "1351:     NSV-*:NONSTOP_KERNEL:*:*)",
          "1352:  echo nsv-tandem-nsk\"$UNAME_RELEASE\"",
          "1353:  exit ;;",
          "1354:     NSX-*:NONSTOP_KERNEL:*:*)",
          "1355:  echo nsx-tandem-nsk\"$UNAME_RELEASE\"",
          "1356:  exit ;;",
          "1358:  echo mips-compaq-nonstopux",
          "1359:  exit ;;",
          "1360:     BS2000:POSIX*:*:*)",
          "1361:  echo bs2000-siemens-sysv",
          "1362:  exit ;;",
          "1363:     DS/*:UNIX_System_V:*:*)",
          "1364:  echo \"$UNAME_MACHINE\"-\"$UNAME_SYSTEM\"-\"$UNAME_RELEASE\"",
          "1365:  exit ;;",
          "1367:  # \"uname -m\" is not consistent, so use $cputype instead. 386",
          "1368:  # is converted to i386 for consistency with other x86",
          "1369:  # operating systems.",
          "1370:  # shellcheck disable=SC2154",
          "1371:  if test \"$cputype\" = 386; then",
          "1372:      UNAME_MACHINE=i386",
          "1373:  else",
          "1374:      UNAME_MACHINE=\"$cputype\"",
          "1375:  fi",
          "1376:  echo \"$UNAME_MACHINE\"-unknown-plan9",
          "1377:  exit ;;",
          "1379:  echo pdp10-unknown-tops10",
          "1380:  exit ;;",
          "1382:  echo pdp10-unknown-tenex",
          "1383:  exit ;;",
          "1384:     KS10:TOPS-20:*:* | KL10:TOPS-20:*:* | TYPE4:TOPS-20:*:*)",
          "1385:  echo pdp10-dec-tops20",
          "1386:  exit ;;",
          "1387:     XKL-1:TOPS-20:*:* | TYPE5:TOPS-20:*:*)",
          "1388:  echo pdp10-xkl-tops20",
          "1389:  exit ;;",
          "1391:  echo pdp10-unknown-tops20",
          "1392:  exit ;;",
          "1394:  echo pdp10-unknown-its",
          "1395:  exit ;;",
          "1396:     SEI:*:*:SEIUX)",
          "1397:  echo mips-sei-seiux\"$UNAME_RELEASE\"",
          "1398:  exit ;;",
          "1400:  echo \"$UNAME_MACHINE\"-unknown-dragonfly\"`echo \"$UNAME_RELEASE\"|sed -e 's/[-(].*//'`\"",
          "1401:  exit ;;",
          "1403:  UNAME_MACHINE=`(uname -p) 2>/dev/null`",
          "1404:  case \"$UNAME_MACHINE\" in",
          "1405:      A*) echo alpha-dec-vms ; exit ;;",
          "1406:      I*) echo ia64-dec-vms ; exit ;;",
          "1407:      V*) echo vax-dec-vms ; exit ;;",
          "1408:  esac ;;",
          "1410:  echo i386-pc-xenix",
          "1411:  exit ;;",
          "1412:     i*86:skyos:*:*)",
          "1413:  echo \"$UNAME_MACHINE\"-pc-skyos\"`echo \"$UNAME_RELEASE\" | sed -e 's/ .*$//'`\"",
          "1414:  exit ;;",
          "1415:     i*86:rdos:*:*)",
          "1416:  echo \"$UNAME_MACHINE\"-pc-rdos",
          "1417:  exit ;;",
          "1418:     i*86:AROS:*:*)",
          "1419:  echo \"$UNAME_MACHINE\"-pc-aros",
          "1420:  exit ;;",
          "1421:     x86_64:VMkernel:*:*)",
          "1422:  echo \"$UNAME_MACHINE\"-unknown-esx",
          "1423:  exit ;;",
          "1424:     amd64:Isilon\\ OneFS:*:*)",
          "1425:  echo x86_64-unknown-onefs",
          "1426:  exit ;;",
          "1427: esac",
          "1429: echo \"$0: unable to guess system type\" >&2",
          "1431: case \"$UNAME_MACHINE:$UNAME_SYSTEM\" in",
          "1432:     mips:Linux | mips64:Linux)",
          "1433:  # If we got here on MIPS GNU/Linux, output extra information.",
          "1434:  cat >&2 <<EOF",
          "1436: NOTE: MIPS GNU/Linux systems require a C compiler to fully recognize",
          "1437: the system type. Please install a C compiler and try again.",
          "1438: EOF",
          "1439:  ;;",
          "1440: esac",
          "1442: cat >&2 <<EOF",
          "1444: This script (version $timestamp), has failed to recognize the",
          "1445: operating system you are using. If your script is old, overwrite *all*",
          "1446: copies of config.guess and config.sub with the latest versions from:",
          "1448:   https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess",
          "1449: and",
          "1450:   https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub",
          "1452: If $0 has already been updated, send the following data and any",
          "1453: information you think might be pertinent to config-patches@gnu.org to",
          "1454: provide the necessary information to handle your system.",
          "1456: config.guess timestamp = $timestamp",
          "1458: uname -m = `(uname -m) 2>/dev/null || echo unknown`",
          "1459: uname -r = `(uname -r) 2>/dev/null || echo unknown`",
          "1460: uname -s = `(uname -s) 2>/dev/null || echo unknown`",
          "1461: uname -v = `(uname -v) 2>/dev/null || echo unknown`",
          "1463: /usr/bin/uname -p = `(/usr/bin/uname -p) 2>/dev/null`",
          "1464: /bin/uname -X     = `(/bin/uname -X) 2>/dev/null`",
          "1466: hostinfo               = `(hostinfo) 2>/dev/null`",
          "1467: /bin/universe          = `(/bin/universe) 2>/dev/null`",
          "1468: /usr/bin/arch -k       = `(/usr/bin/arch -k) 2>/dev/null`",
          "1469: /bin/arch              = `(/bin/arch) 2>/dev/null`",
          "1470: /usr/bin/oslevel       = `(/usr/bin/oslevel) 2>/dev/null`",
          "1471: /usr/convex/getsysinfo = `(/usr/convex/getsysinfo) 2>/dev/null`",
          "1473: UNAME_MACHINE = \"$UNAME_MACHINE\"",
          "1474: UNAME_RELEASE = \"$UNAME_RELEASE\"",
          "1475: UNAME_SYSTEM  = \"$UNAME_SYSTEM\"",
          "1476: UNAME_VERSION = \"$UNAME_VERSION\"",
          "1477: EOF",
          "1479: exit 1",
          "1481: # Local variables:",
          "1482: # eval: (add-hook 'before-save-hook 'time-stamp)",
          "1483: # time-stamp-start: \"timestamp='\"",
          "1484: # time-stamp-format: \"%:y-%02m-%02d\"",
          "1485: # time-stamp-end: \"'\"",
          "1486: # End:",
          "",
          "---------------"
        ],
        "support/config.sub||support/config.sub": [
          "File: support/config.sub -> support/config.sub",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #! /bin/sh",
          "2: # Configuration validation subroutine script.",
          "7: # This file is free software; you can redistribute it and/or modify it",
          "8: # under the terms of the GNU General Public License as published by",
          "",
          "[Removed Lines]",
          "3: #   Copyright 1992-2018 Free Software Foundation, Inc.",
          "5: timestamp='2018-08-29'",
          "",
          "[Added Lines]",
          "3: #   Copyright 1992-2020 Free Software Foundation, Inc.",
          "5: timestamp='2020-05-04'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67: version=\"\\",
          "68: GNU config.sub ($timestamp)",
          "72: This is free software; see the source for copying conditions.  There is NO",
          "73: warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"",
          "",
          "[Removed Lines]",
          "70: Copyright 1992-2018 Free Software Foundation, Inc.",
          "",
          "[Added Lines]",
          "70: Copyright 1992-2020 Free Software Foundation, Inc.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "111: esac",
          "113: # Split fields of configuration type",
          "115: $1",
          "116: EOF",
          "",
          "[Removed Lines]",
          "114: IFS=\"-\" read -r field1 field2 field3 field4 <<EOF",
          "",
          "[Added Lines]",
          "114: # shellcheck disable=SC2162",
          "115: IFS=\"-\" read field1 field2 field3 field4 <<EOF",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "336:     basic_machine=m88k-harris",
          "337:     os=sysv3",
          "338:     ;;",
          "340:     basic_machine=m68k-hp",
          "341:     ;;",
          "342:    hp300bsd)",
          "343:     basic_machine=m68k-hp",
          "344:     os=bsd",
          "345:     ;;",
          "350:    hppaosf)",
          "351:     basic_machine=hppa1.1-hp",
          "352:     os=osf",
          "",
          "[Removed Lines]",
          "339:    hp300)",
          "346:    hp300hpux)",
          "347:     basic_machine=m68k-hp",
          "348:     os=hpux",
          "349:     ;;",
          "",
          "[Added Lines]",
          "340:    hp300 | hp300hpux)",
          "342:     os=hpux",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "359:     basic_machine=i386-mach",
          "360:     os=mach",
          "361:     ;;",
          "366:    isi68 | isi)",
          "367:     basic_machine=m68k-isi",
          "368:     os=sysv",
          "",
          "[Removed Lines]",
          "362:    vsta)",
          "363:     basic_machine=i386-pc",
          "364:     os=vsta",
          "365:     ;;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "611:     basic_machine=vax-dec",
          "612:     os=vms",
          "613:     ;;",
          "614:    vxworks960)",
          "615:     basic_machine=i960-wrs",
          "616:     os=vxworks",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "608:    vsta)",
          "609:     basic_machine=i386-pc",
          "610:     os=vsta",
          "611:     ;;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "821:   cpu=m68k",
          "822:   vendor=next",
          "823:   case $os in",
          "825:    ;;",
          "826:       ns2*)",
          "827:         os=nextstep2",
          "",
          "[Removed Lines]",
          "824:       nextstep* )",
          "",
          "[Added Lines]",
          "822:       openstep*)",
          "823:           ;;",
          "824:       nextstep*)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "918:   ;;",
          "922: $basic_machine",
          "923: EOF",
          "924:   ;;",
          "",
          "[Removed Lines]",
          "921:   IFS=\"-\" read -r cpu vendor <<EOF",
          "",
          "[Added Lines]",
          "921:   # shellcheck disable=SC2162",
          "922:   IFS=\"-\" read cpu vendor <<EOF",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1161:    | alpha64 | alpha64ev[4-8] | alpha64ev56 | alpha64ev6[78] \\",
          "1162:    | alphapca5[67] | alpha64pca5[67] \\",
          "1163:    | am33_2.0 \\",
          "1164:    | arc | arceb \\",
          "1165:    | arm  | arm[lb]e | arme[lb] | armv* \\",
          "1166:    | avr | avr32 \\",
          "1167:    | asmjs \\",
          "1168:    | ba \\",
          "1169:    | be32 | be64 \\",
          "1171:    | c[123]* | c30 | [cjt]90 | c4x \\",
          "1172:    | c8051 | clipper | craynv | csky | cydra \\",
          "1173:    | d10v | d30v | dlx | dsp16xx \\",
          "",
          "[Removed Lines]",
          "1170:    | bfin | bs2000 \\",
          "",
          "[Added Lines]",
          "1165:    | amdgcn \\",
          "1172:    | bfin | bpf | bs2000 \\",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1182:    | le32 | le64 \\",
          "1183:    | lm32 \\",
          "1184:    | m32c | m32r | m32rle \\",
          "1187:    | m88110 | m88k | maxq | mb | mcore | mep | metag \\",
          "1188:    | microblaze | microblazeel \\",
          "1189:    | mips | mipsbe | mipseb | mipsel | mipsle \\",
          "1190:    | mips16 \\",
          "1192:    | mips64octeon | mips64octeonel \\",
          "1193:    | mips64orion | mips64orionel \\",
          "1194:    | mips64r5900 | mips64r5900el \\",
          "",
          "[Removed Lines]",
          "1185:    | m5200 | m68000 | m680[012346]0 | m68360 | m683?2 | m68k | v70 | w65 \\",
          "1186:    | m6811 | m68hc11 | m6812 | m68hc12 | m68hcs12x | nvptx | picochip \\",
          "1191:    | mips64 | mips64el \\",
          "",
          "[Added Lines]",
          "1187:    | m5200 | m68000 | m680[012346]0 | m68360 | m683?2 | m68k \\",
          "1188:    | m6811 | m68hc11 | m6812 | m68hc12 | m68hcs12x \\",
          "1193:    | mips64 | mips64eb | mips64el \\",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1215:    | nds32 | nds32le | nds32be \\",
          "1216:    | nfp \\",
          "1217:    | nios | nios2 | nios2eb | nios2el \\",
          "1219:    | open8 \\",
          "1220:    | or1k* \\",
          "1221:    | or32 \\",
          "1222:    | orion \\",
          "1223:    | pdp10 | pdp11 | pj | pjl | pn | power \\",
          "1224:    | powerpc | powerpc64 | powerpc64le | powerpcle | powerpcspe \\",
          "1225:    | pru \\",
          "",
          "[Removed Lines]",
          "1218:    | none | np1 | ns16k | ns32k \\",
          "",
          "[Added Lines]",
          "1220:    | none | np1 | ns16k | ns32k | nvptx \\",
          "1225:    | picochip \\",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1227:    | riscv | riscv32 | riscv64 \\",
          "1228:    | rl78 | romp | rs6000 | rx \\",
          "1229:    | score \\",
          "1231:    | sh[1234]e[lb] |  sh[12345][lb]e | sh[23]ele | sh64 | sh64le \\",
          "1232:    | sparc | sparc64 | sparc64b | sparc64v | sparc86x | sparclet \\",
          "1233:    | sparclite \\",
          "",
          "[Removed Lines]",
          "1230:    | sh | sh[1234] | sh[24]a | sh[24]ae[lb] | sh[23]e | she[lb] | sh[lb]e \\",
          "",
          "[Added Lines]",
          "1233:    | sh | shl \\",
          "1234:    | sh[1234] | sh[24]a | sh[24]ae[lb] | sh[23]e | she[lb] | sh[lb]e \\",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1237:    | tic30 | tic4x | tic54x | tic55x | tic6x | tic80 \\",
          "1238:    | tron \\",
          "1239:    | ubicom32 \\",
          "1241:    | vax \\",
          "1242:    | visium \\",
          "1244:    | we32k \\",
          "1245:    | x86 | x86_64 | xc16x | xgate | xps100 \\",
          "1246:    | xstormy16 | xtensa* \\",
          "",
          "[Removed Lines]",
          "1240:    | v850 | v850e | v850e1 | v850es | v850e2 | v850e2v3 \\",
          "1243:    | wasm32 \\",
          "",
          "[Added Lines]",
          "1244:    | v70 | v850 | v850e | v850e1 | v850es | v850e2 | v850e2v3 \\",
          "1247:    | w65 \\",
          "1248:    | wasm32 | wasm64 \\",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1338:       | hpux* | unos* | osf* | luna* | dgux* | auroraux* | solaris* \\",
          "1339:       | sym* | kopensolaris* | plan9* \\",
          "1340:       | amigaos* | amigados* | msdos* | newsos* | unicos* | aof* \\",
          "1342:       | nindy* | vxsim* | vxworks* | ebmon* | hms* | mvs* \\",
          "1343:       | clix* | riscos* | uniplus* | iris* | isc* | rtu* | xenix* \\",
          "1344:       | knetbsd* | mirbsd* | netbsd* \\",
          "1346:       | ekkobsd* | kfreebsd* | freebsd* | riscix* | lynxos* \\",
          "1347:       | bosx* | nextstep* | cxux* | aout* | elf* | oabi* \\",
          "1348:       | ptx* | coff* | ecoff* | winnt* | domain* | vsta* \\",
          "",
          "[Removed Lines]",
          "1341:       | aos* | aros* | cloudabi* | sortix* \\",
          "1345:       | bitrig* | openbsd* | solidbsd* | libertybsd* \\",
          "",
          "[Added Lines]",
          "1346:       | aos* | aros* | cloudabi* | sortix* | twizzler* \\",
          "1350:       | bitrig* | openbsd* | solidbsd* | libertybsd* | os108* \\",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1360:       | powermax* | dnix* | nx6 | nx7 | sei* | dragonfly* \\",
          "1361:       | skyos* | haiku* | rdos* | toppers* | drops* | es* \\",
          "1362:       | onefs* | tirtos* | phoenix* | fuchsia* | redox* | bme* \\",
          "1364:  # Remember, each alternative MUST END IN *, to match a version number.",
          "1365:   ;;",
          "1366:  qnx*)",
          "",
          "[Removed Lines]",
          "1363:       | midnightbsd*)",
          "",
          "[Added Lines]",
          "1368:       | midnightbsd* | amdhsa* | unleashed* | emscripten* | wasi* \\",
          "1369:       | nsk* | powerunix* | genode*)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1444:  ns2)",
          "1445:   os=nextstep2",
          "1446:   ;;",
          "1450:  # Preserve the version number of sinix5.",
          "1451:  sinix5.*)",
          "1452:   os=`echo $os | sed -e 's|sinix|sysv|'`",
          "",
          "[Removed Lines]",
          "1447:  nsk*)",
          "1448:   os=nsk",
          "1449:   ;;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "support/config.sub.20181116||support/config.sub.20181116": [
          "File: support/config.sub.20181116 -> support/config.sub.20181116",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #! /bin/sh",
          "2: # Configuration validation subroutine script.",
          "3: #   Copyright 1992-2018 Free Software Foundation, Inc.",
          "5: timestamp='2018-08-29'",
          "7: # This file is free software; you can redistribute it and/or modify it",
          "8: # under the terms of the GNU General Public License as published by",
          "9: # the Free Software Foundation; either version 3 of the License, or",
          "10: # (at your option) any later version.",
          "11: #",
          "12: # This program is distributed in the hope that it will be useful, but",
          "13: # WITHOUT ANY WARRANTY; without even the implied warranty of",
          "14: # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU",
          "15: # General Public License for more details.",
          "16: #",
          "17: # You should have received a copy of the GNU General Public License",
          "18: # along with this program; if not, see <https://www.gnu.org/licenses/>.",
          "19: #",
          "20: # As a special exception to the GNU General Public License, if you",
          "21: # distribute this file as part of a program that contains a",
          "22: # configuration script generated by Autoconf, you may include it under",
          "23: # the same distribution terms that you use for the rest of that",
          "24: # program.  This Exception is an additional permission under section 7",
          "25: # of the GNU General Public License, version 3 (\"GPLv3\").",
          "28: # Please send patches to <config-patches@gnu.org>.",
          "29: #",
          "30: # Configuration subroutine to validate and canonicalize a configuration type.",
          "31: # Supply the specified configuration type as an argument.",
          "32: # If it is invalid, we print an error message on stderr and exit with code 1.",
          "33: # Otherwise, we print the canonical config type on stdout and succeed.",
          "35: # You can get the latest version of this script from:",
          "36: # https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub",
          "38: # This file is supposed to be the same for all GNU packages",
          "39: # and recognize all the CPU types, system types and aliases",
          "40: # that are meaningful with *any* GNU software.",
          "41: # Each package is responsible for reporting which valid configurations",
          "42: # it does not support.  The user should be able to distinguish",
          "43: # a failure to support a valid configuration from a meaningless",
          "44: # configuration.",
          "46: # The goal of this file is to map all the various variations of a given",
          "47: # machine specification into a single specification in the form:",
          "48: # CPU_TYPE-MANUFACTURER-OPERATING_SYSTEM",
          "49: # or in some cases, the newer four-part form:",
          "50: # CPU_TYPE-MANUFACTURER-KERNEL-OPERATING_SYSTEM",
          "51: # It is wrong to echo any other type of specification.",
          "53: me=`echo \"$0\" | sed -e 's,.*/,,'`",
          "55: usage=\"\\",
          "56: Usage: $0 [OPTION] CPU-MFR-OPSYS or ALIAS",
          "58: Canonicalize a configuration name.",
          "60: Options:",
          "61:   -h, --help         print this help, then exit",
          "62:   -t, --time-stamp   print date of last modification, then exit",
          "63:   -v, --version      print version number, then exit",
          "65: Report bugs and patches to <config-patches@gnu.org>.\"",
          "67: version=\"\\",
          "68: GNU config.sub ($timestamp)",
          "70: Copyright 1992-2018 Free Software Foundation, Inc.",
          "72: This is free software; see the source for copying conditions.  There is NO",
          "73: warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"",
          "75: help=\"",
          "76: Try \\`$me --help' for more information.\"",
          "78: # Parse command line",
          "79: while test $# -gt 0 ; do",
          "80:   case $1 in",
          "81:     --time-stamp | --time* | -t )",
          "82:        echo \"$timestamp\" ; exit ;;",
          "83:     --version | -v )",
          "84:        echo \"$version\" ; exit ;;",
          "85:     --help | --h* | -h )",
          "86:        echo \"$usage\"; exit ;;",
          "87:     -- )     # Stop option processing",
          "88:        shift; break ;;",
          "89:     - ) # Use stdin as input.",
          "90:        break ;;",
          "91:     -* )",
          "92:        echo \"$me: invalid option $1$help\" >&2",
          "93:        exit 1 ;;",
          "96:        # First pass through any local machine types.",
          "97:        echo \"$1\"",
          "98:        exit ;;",
          "101:        break ;;",
          "102:   esac",
          "103: done",
          "105: case $# in",
          "106:  0) echo \"$me: missing argument$help\" >&2",
          "107:     exit 1;;",
          "108:  1) ;;",
          "110:     exit 1;;",
          "111: esac",
          "113: # Split fields of configuration type",
          "114: IFS=\"-\" read -r field1 field2 field3 field4 <<EOF",
          "115: $1",
          "116: EOF",
          "118: # Separate into logical components for further validation",
          "119: case $1 in",
          "121:   echo Invalid configuration \\`\"$1\"\\': more than four components >&2",
          "122:   exit 1",
          "123:   ;;",
          "125:   basic_machine=$field1-$field2",
          "126:   os=$field3-$field4",
          "127:   ;;",
          "129:   # Ambiguous whether COMPANY is present, or skipped and KERNEL-OS is two",
          "130:   # parts",
          "131:   maybe_os=$field2-$field3",
          "132:   case $maybe_os in",
          "133:    nto-qnx* | linux-gnu* | linux-android* | linux-dietlibc \\",
          "134:    | linux-newlib* | linux-musl* | linux-uclibc* | uclinux-uclibc* \\",
          "135:    | uclinux-gnu* | kfreebsd*-gnu* | knetbsd*-gnu* | netbsd*-gnu* \\",
          "136:    | netbsd*-eabi* | kopensolaris*-gnu* | cloudabi*-eabi* \\",
          "137:    | storm-chaos* | os2-emx* | rtmk-nova*)",
          "138:     basic_machine=$field1",
          "139:     os=$maybe_os",
          "140:     ;;",
          "141:    android-linux)",
          "142:     basic_machine=$field1-unknown",
          "143:     os=linux-android",
          "144:     ;;",
          "146:     basic_machine=$field1-$field2",
          "147:     os=$field3",
          "148:     ;;",
          "149:   esac",
          "150:   ;;",
          "152:   # A lone config we happen to match not fitting any pattern",
          "153:   case $field1-$field2 in",
          "154:    decstation-3100)",
          "155:     basic_machine=mips-dec",
          "156:     os=",
          "157:     ;;",
          "159:     # Second component is usually, but not always the OS",
          "160:     case $field2 in",
          "161:      # Prevent following clause from handling this valid os",
          "162:      sun*os*)",
          "163:       basic_machine=$field1",
          "164:       os=$field2",
          "165:       ;;",
          "166:      # Manufacturers",
          "167:      dec* | mips* | sequent* | encore* | pc533* | sgi* | sony* \\",
          "168:      | att* | 7300* | 3300* | delta* | motorola* | sun[234]* \\",
          "169:      | unicom* | ibm* | next | hp | isi* | apollo | altos* \\",
          "170:      | convergent* | ncr* | news | 32* | 3600* | 3100* \\",
          "171:      | hitachi* | c[123]* | convex* | sun | crds | omron* | dg \\",
          "172:      | ultra | tti* | harris | dolphin | highlevel | gould \\",
          "173:      | cbm | ns | masscomp | apple | axis | knuth | cray \\",
          "174:      | microblaze* | sim | cisco \\",
          "175:      | oki | wec | wrs | winbond)",
          "176:       basic_machine=$field1-$field2",
          "177:       os=",
          "178:       ;;",
          "180:       basic_machine=$field1",
          "181:       os=$field2",
          "182:       ;;",
          "183:     esac",
          "184:    ;;",
          "185:   esac",
          "186:   ;;",
          "188:   # Convert single-component short-hands not valid as part of",
          "189:   # multi-component configurations.",
          "190:   case $field1 in",
          "191:    386bsd)",
          "192:     basic_machine=i386-pc",
          "193:     os=bsd",
          "194:     ;;",
          "195:    a29khif)",
          "196:     basic_machine=a29k-amd",
          "197:     os=udi",
          "198:     ;;",
          "199:    adobe68k)",
          "200:     basic_machine=m68010-adobe",
          "201:     os=scout",
          "202:     ;;",
          "203:    alliant)",
          "204:     basic_machine=fx80-alliant",
          "205:     os=",
          "206:     ;;",
          "207:    altos | altos3068)",
          "208:     basic_machine=m68k-altos",
          "209:     os=",
          "210:     ;;",
          "211:    am29k)",
          "212:     basic_machine=a29k-none",
          "213:     os=bsd",
          "214:     ;;",
          "215:    amdahl)",
          "216:     basic_machine=580-amdahl",
          "217:     os=sysv",
          "218:     ;;",
          "219:    amiga)",
          "220:     basic_machine=m68k-unknown",
          "221:     os=",
          "222:     ;;",
          "223:    amigaos | amigados)",
          "224:     basic_machine=m68k-unknown",
          "225:     os=amigaos",
          "226:     ;;",
          "227:    amigaunix | amix)",
          "228:     basic_machine=m68k-unknown",
          "229:     os=sysv4",
          "230:     ;;",
          "231:    apollo68)",
          "232:     basic_machine=m68k-apollo",
          "233:     os=sysv",
          "234:     ;;",
          "235:    apollo68bsd)",
          "236:     basic_machine=m68k-apollo",
          "237:     os=bsd",
          "238:     ;;",
          "239:    aros)",
          "240:     basic_machine=i386-pc",
          "241:     os=aros",
          "242:     ;;",
          "243:    aux)",
          "244:     basic_machine=m68k-apple",
          "245:     os=aux",
          "246:     ;;",
          "247:    balance)",
          "248:     basic_machine=ns32k-sequent",
          "249:     os=dynix",
          "250:     ;;",
          "251:    blackfin)",
          "252:     basic_machine=bfin-unknown",
          "253:     os=linux",
          "254:     ;;",
          "255:    cegcc)",
          "256:     basic_machine=arm-unknown",
          "257:     os=cegcc",
          "258:     ;;",
          "259:    convex-c1)",
          "260:     basic_machine=c1-convex",
          "261:     os=bsd",
          "262:     ;;",
          "263:    convex-c2)",
          "264:     basic_machine=c2-convex",
          "265:     os=bsd",
          "266:     ;;",
          "267:    convex-c32)",
          "268:     basic_machine=c32-convex",
          "269:     os=bsd",
          "270:     ;;",
          "271:    convex-c34)",
          "272:     basic_machine=c34-convex",
          "273:     os=bsd",
          "274:     ;;",
          "275:    convex-c38)",
          "276:     basic_machine=c38-convex",
          "277:     os=bsd",
          "278:     ;;",
          "279:    cray)",
          "280:     basic_machine=j90-cray",
          "281:     os=unicos",
          "282:     ;;",
          "283:    crds | unos)",
          "284:     basic_machine=m68k-crds",
          "285:     os=",
          "286:     ;;",
          "287:    da30)",
          "288:     basic_machine=m68k-da30",
          "289:     os=",
          "290:     ;;",
          "291:    decstation | pmax | pmin | dec3100 | decstatn)",
          "292:     basic_machine=mips-dec",
          "293:     os=",
          "294:     ;;",
          "295:    delta88)",
          "296:     basic_machine=m88k-motorola",
          "297:     os=sysv3",
          "298:     ;;",
          "299:    dicos)",
          "300:     basic_machine=i686-pc",
          "301:     os=dicos",
          "302:     ;;",
          "303:    djgpp)",
          "304:     basic_machine=i586-pc",
          "305:     os=msdosdjgpp",
          "306:     ;;",
          "307:    ebmon29k)",
          "308:     basic_machine=a29k-amd",
          "309:     os=ebmon",
          "310:     ;;",
          "311:    es1800 | OSE68k | ose68k | ose | OSE)",
          "312:     basic_machine=m68k-ericsson",
          "313:     os=ose",
          "314:     ;;",
          "315:    gmicro)",
          "316:     basic_machine=tron-gmicro",
          "317:     os=sysv",
          "318:     ;;",
          "319:    go32)",
          "320:     basic_machine=i386-pc",
          "321:     os=go32",
          "322:     ;;",
          "323:    h8300hms)",
          "324:     basic_machine=h8300-hitachi",
          "325:     os=hms",
          "326:     ;;",
          "327:    h8300xray)",
          "328:     basic_machine=h8300-hitachi",
          "329:     os=xray",
          "330:     ;;",
          "331:    h8500hms)",
          "332:     basic_machine=h8500-hitachi",
          "333:     os=hms",
          "334:     ;;",
          "335:    harris)",
          "336:     basic_machine=m88k-harris",
          "337:     os=sysv3",
          "338:     ;;",
          "339:    hp300)",
          "340:     basic_machine=m68k-hp",
          "341:     ;;",
          "342:    hp300bsd)",
          "343:     basic_machine=m68k-hp",
          "344:     os=bsd",
          "345:     ;;",
          "346:    hp300hpux)",
          "347:     basic_machine=m68k-hp",
          "348:     os=hpux",
          "349:     ;;",
          "350:    hppaosf)",
          "351:     basic_machine=hppa1.1-hp",
          "352:     os=osf",
          "353:     ;;",
          "354:    hppro)",
          "355:     basic_machine=hppa1.1-hp",
          "356:     os=proelf",
          "357:     ;;",
          "358:    i386mach)",
          "359:     basic_machine=i386-mach",
          "360:     os=mach",
          "361:     ;;",
          "362:    vsta)",
          "363:     basic_machine=i386-pc",
          "364:     os=vsta",
          "365:     ;;",
          "366:    isi68 | isi)",
          "367:     basic_machine=m68k-isi",
          "368:     os=sysv",
          "369:     ;;",
          "370:    m68knommu)",
          "371:     basic_machine=m68k-unknown",
          "372:     os=linux",
          "373:     ;;",
          "374:    magnum | m3230)",
          "375:     basic_machine=mips-mips",
          "376:     os=sysv",
          "377:     ;;",
          "378:    merlin)",
          "379:     basic_machine=ns32k-utek",
          "380:     os=sysv",
          "381:     ;;",
          "382:    mingw64)",
          "383:     basic_machine=x86_64-pc",
          "384:     os=mingw64",
          "385:     ;;",
          "386:    mingw32)",
          "387:     basic_machine=i686-pc",
          "388:     os=mingw32",
          "389:     ;;",
          "390:    mingw32ce)",
          "391:     basic_machine=arm-unknown",
          "392:     os=mingw32ce",
          "393:     ;;",
          "394:    monitor)",
          "395:     basic_machine=m68k-rom68k",
          "396:     os=coff",
          "397:     ;;",
          "398:    morphos)",
          "399:     basic_machine=powerpc-unknown",
          "400:     os=morphos",
          "401:     ;;",
          "402:    moxiebox)",
          "403:     basic_machine=moxie-unknown",
          "404:     os=moxiebox",
          "405:     ;;",
          "406:    msdos)",
          "407:     basic_machine=i386-pc",
          "408:     os=msdos",
          "409:     ;;",
          "410:    msys)",
          "411:     basic_machine=i686-pc",
          "412:     os=msys",
          "413:     ;;",
          "414:    mvs)",
          "415:     basic_machine=i370-ibm",
          "416:     os=mvs",
          "417:     ;;",
          "418:    nacl)",
          "419:     basic_machine=le32-unknown",
          "420:     os=nacl",
          "421:     ;;",
          "422:    ncr3000)",
          "423:     basic_machine=i486-ncr",
          "424:     os=sysv4",
          "425:     ;;",
          "426:    netbsd386)",
          "427:     basic_machine=i386-pc",
          "428:     os=netbsd",
          "429:     ;;",
          "430:    netwinder)",
          "431:     basic_machine=armv4l-rebel",
          "432:     os=linux",
          "433:     ;;",
          "434:    news | news700 | news800 | news900)",
          "435:     basic_machine=m68k-sony",
          "436:     os=newsos",
          "437:     ;;",
          "438:    news1000)",
          "439:     basic_machine=m68030-sony",
          "440:     os=newsos",
          "441:     ;;",
          "442:    necv70)",
          "443:     basic_machine=v70-nec",
          "444:     os=sysv",
          "445:     ;;",
          "446:    nh3000)",
          "447:     basic_machine=m68k-harris",
          "448:     os=cxux",
          "449:     ;;",
          "450:    nh[45]000)",
          "451:     basic_machine=m88k-harris",
          "452:     os=cxux",
          "453:     ;;",
          "454:    nindy960)",
          "455:     basic_machine=i960-intel",
          "456:     os=nindy",
          "457:     ;;",
          "458:    mon960)",
          "459:     basic_machine=i960-intel",
          "460:     os=mon960",
          "461:     ;;",
          "462:    nonstopux)",
          "463:     basic_machine=mips-compaq",
          "464:     os=nonstopux",
          "465:     ;;",
          "466:    os400)",
          "467:     basic_machine=powerpc-ibm",
          "468:     os=os400",
          "469:     ;;",
          "470:    OSE68000 | ose68000)",
          "471:     basic_machine=m68000-ericsson",
          "472:     os=ose",
          "473:     ;;",
          "474:    os68k)",
          "475:     basic_machine=m68k-none",
          "476:     os=os68k",
          "477:     ;;",
          "478:    paragon)",
          "479:     basic_machine=i860-intel",
          "480:     os=osf",
          "481:     ;;",
          "482:    parisc)",
          "483:     basic_machine=hppa-unknown",
          "484:     os=linux",
          "485:     ;;",
          "486:    pw32)",
          "487:     basic_machine=i586-unknown",
          "488:     os=pw32",
          "489:     ;;",
          "490:    rdos | rdos64)",
          "491:     basic_machine=x86_64-pc",
          "492:     os=rdos",
          "493:     ;;",
          "494:    rdos32)",
          "495:     basic_machine=i386-pc",
          "496:     os=rdos",
          "497:     ;;",
          "498:    rom68k)",
          "499:     basic_machine=m68k-rom68k",
          "500:     os=coff",
          "501:     ;;",
          "502:    sa29200)",
          "503:     basic_machine=a29k-amd",
          "504:     os=udi",
          "505:     ;;",
          "506:    sei)",
          "507:     basic_machine=mips-sei",
          "508:     os=seiux",
          "509:     ;;",
          "510:    sequent)",
          "511:     basic_machine=i386-sequent",
          "512:     os=",
          "513:     ;;",
          "514:    sps7)",
          "515:     basic_machine=m68k-bull",
          "516:     os=sysv2",
          "517:     ;;",
          "518:    st2000)",
          "519:     basic_machine=m68k-tandem",
          "520:     os=",
          "521:     ;;",
          "522:    stratus)",
          "523:     basic_machine=i860-stratus",
          "524:     os=sysv4",
          "525:     ;;",
          "526:    sun2)",
          "527:     basic_machine=m68000-sun",
          "528:     os=",
          "529:     ;;",
          "530:    sun2os3)",
          "531:     basic_machine=m68000-sun",
          "532:     os=sunos3",
          "533:     ;;",
          "534:    sun2os4)",
          "535:     basic_machine=m68000-sun",
          "536:     os=sunos4",
          "537:     ;;",
          "538:    sun3)",
          "539:     basic_machine=m68k-sun",
          "540:     os=",
          "541:     ;;",
          "542:    sun3os3)",
          "543:     basic_machine=m68k-sun",
          "544:     os=sunos3",
          "545:     ;;",
          "546:    sun3os4)",
          "547:     basic_machine=m68k-sun",
          "548:     os=sunos4",
          "549:     ;;",
          "550:    sun4)",
          "551:     basic_machine=sparc-sun",
          "552:     os=",
          "553:     ;;",
          "554:    sun4os3)",
          "555:     basic_machine=sparc-sun",
          "556:     os=sunos3",
          "557:     ;;",
          "558:    sun4os4)",
          "559:     basic_machine=sparc-sun",
          "560:     os=sunos4",
          "561:     ;;",
          "562:    sun4sol2)",
          "563:     basic_machine=sparc-sun",
          "564:     os=solaris2",
          "565:     ;;",
          "566:    sun386 | sun386i | roadrunner)",
          "567:     basic_machine=i386-sun",
          "568:     os=",
          "569:     ;;",
          "570:    sv1)",
          "571:     basic_machine=sv1-cray",
          "572:     os=unicos",
          "573:     ;;",
          "574:    symmetry)",
          "575:     basic_machine=i386-sequent",
          "576:     os=dynix",
          "577:     ;;",
          "578:    t3e)",
          "579:     basic_machine=alphaev5-cray",
          "580:     os=unicos",
          "581:     ;;",
          "582:    t90)",
          "583:     basic_machine=t90-cray",
          "584:     os=unicos",
          "585:     ;;",
          "586:    toad1)",
          "587:     basic_machine=pdp10-xkl",
          "588:     os=tops20",
          "589:     ;;",
          "590:    tpf)",
          "591:     basic_machine=s390x-ibm",
          "592:     os=tpf",
          "593:     ;;",
          "594:    udi29k)",
          "595:     basic_machine=a29k-amd",
          "596:     os=udi",
          "597:     ;;",
          "598:    ultra3)",
          "599:     basic_machine=a29k-nyu",
          "600:     os=sym1",
          "601:     ;;",
          "602:    v810 | necv810)",
          "603:     basic_machine=v810-nec",
          "604:     os=none",
          "605:     ;;",
          "606:    vaxv)",
          "607:     basic_machine=vax-dec",
          "608:     os=sysv",
          "609:     ;;",
          "610:    vms)",
          "611:     basic_machine=vax-dec",
          "612:     os=vms",
          "613:     ;;",
          "614:    vxworks960)",
          "615:     basic_machine=i960-wrs",
          "616:     os=vxworks",
          "617:     ;;",
          "618:    vxworks68)",
          "619:     basic_machine=m68k-wrs",
          "620:     os=vxworks",
          "621:     ;;",
          "622:    vxworks29k)",
          "623:     basic_machine=a29k-wrs",
          "624:     os=vxworks",
          "625:     ;;",
          "626:    xbox)",
          "627:     basic_machine=i686-pc",
          "628:     os=mingw32",
          "629:     ;;",
          "630:    ymp)",
          "631:     basic_machine=ymp-cray",
          "632:     os=unicos",
          "633:     ;;",
          "635:     basic_machine=$1",
          "636:     os=",
          "637:     ;;",
          "638:   esac",
          "639:   ;;",
          "640: esac",
          "642: # Decode 1-component or ad-hoc basic machines",
          "643: case $basic_machine in",
          "644:  # Here we handle the default manufacturer of certain CPU types.  It is in",
          "645:  # some cases the only manufacturer, in others, it is the most popular.",
          "646:  w89k)",
          "647:   cpu=hppa1.1",
          "648:   vendor=winbond",
          "649:   ;;",
          "650:  op50n)",
          "651:   cpu=hppa1.1",
          "652:   vendor=oki",
          "653:   ;;",
          "654:  op60c)",
          "655:   cpu=hppa1.1",
          "656:   vendor=oki",
          "657:   ;;",
          "658:  ibm*)",
          "659:   cpu=i370",
          "660:   vendor=ibm",
          "661:   ;;",
          "662:  orion105)",
          "663:   cpu=clipper",
          "664:   vendor=highlevel",
          "665:   ;;",
          "666:  mac | mpw | mac-mpw)",
          "667:   cpu=m68k",
          "668:   vendor=apple",
          "669:   ;;",
          "670:  pmac | pmac-mpw)",
          "671:   cpu=powerpc",
          "672:   vendor=apple",
          "673:   ;;",
          "675:  # Recognize the various machine names and aliases which stand",
          "676:  # for a CPU type and a company and sometimes even an OS.",
          "677:  3b1 | 7300 | 7300-att | att-7300 | pc7300 | safari | unixpc)",
          "678:   cpu=m68000",
          "679:   vendor=att",
          "680:   ;;",
          "681:  3b*)",
          "682:   cpu=we32k",
          "683:   vendor=att",
          "684:   ;;",
          "685:  bluegene*)",
          "686:   cpu=powerpc",
          "687:   vendor=ibm",
          "688:   os=cnk",
          "689:   ;;",
          "690:  decsystem10* | dec10*)",
          "691:   cpu=pdp10",
          "692:   vendor=dec",
          "693:   os=tops10",
          "694:   ;;",
          "695:  decsystem20* | dec20*)",
          "696:   cpu=pdp10",
          "697:   vendor=dec",
          "698:   os=tops20",
          "699:   ;;",
          "700:  delta | 3300 | motorola-3300 | motorola-delta \\",
          "701:        | 3300-motorola | delta-motorola)",
          "702:   cpu=m68k",
          "703:   vendor=motorola",
          "704:   ;;",
          "705:  dpx2*)",
          "706:   cpu=m68k",
          "707:   vendor=bull",
          "708:   os=sysv3",
          "709:   ;;",
          "710:  encore | umax | mmax)",
          "711:   cpu=ns32k",
          "712:   vendor=encore",
          "713:   ;;",
          "714:  elxsi)",
          "715:   cpu=elxsi",
          "716:   vendor=elxsi",
          "717:   os=${os:-bsd}",
          "718:   ;;",
          "719:  fx2800)",
          "720:   cpu=i860",
          "721:   vendor=alliant",
          "722:   ;;",
          "723:  genix)",
          "724:   cpu=ns32k",
          "725:   vendor=ns",
          "726:   ;;",
          "727:  h3050r* | hiux*)",
          "728:   cpu=hppa1.1",
          "729:   vendor=hitachi",
          "730:   os=hiuxwe2",
          "731:   ;;",
          "732:  hp3k9[0-9][0-9] | hp9[0-9][0-9])",
          "733:   cpu=hppa1.0",
          "734:   vendor=hp",
          "735:   ;;",
          "736:  hp9k2[0-9][0-9] | hp9k31[0-9])",
          "737:   cpu=m68000",
          "738:   vendor=hp",
          "739:   ;;",
          "740:  hp9k3[2-9][0-9])",
          "741:   cpu=m68k",
          "742:   vendor=hp",
          "743:   ;;",
          "744:  hp9k6[0-9][0-9] | hp6[0-9][0-9])",
          "745:   cpu=hppa1.0",
          "746:   vendor=hp",
          "747:   ;;",
          "748:  hp9k7[0-79][0-9] | hp7[0-79][0-9])",
          "749:   cpu=hppa1.1",
          "750:   vendor=hp",
          "751:   ;;",
          "752:  hp9k78[0-9] | hp78[0-9])",
          "753:   # FIXME: really hppa2.0-hp",
          "754:   cpu=hppa1.1",
          "755:   vendor=hp",
          "756:   ;;",
          "757:  hp9k8[67]1 | hp8[67]1 | hp9k80[24] | hp80[24] | hp9k8[78]9 | hp8[78]9 | hp9k893 | hp893)",
          "758:   # FIXME: really hppa2.0-hp",
          "759:   cpu=hppa1.1",
          "760:   vendor=hp",
          "761:   ;;",
          "762:  hp9k8[0-9][13679] | hp8[0-9][13679])",
          "763:   cpu=hppa1.1",
          "764:   vendor=hp",
          "765:   ;;",
          "766:  hp9k8[0-9][0-9] | hp8[0-9][0-9])",
          "767:   cpu=hppa1.0",
          "768:   vendor=hp",
          "769:   ;;",
          "770:  i*86v32)",
          "771:   cpu=`echo \"$1\" | sed -e 's/86.*/86/'`",
          "772:   vendor=pc",
          "773:   os=sysv32",
          "774:   ;;",
          "775:  i*86v4*)",
          "776:   cpu=`echo \"$1\" | sed -e 's/86.*/86/'`",
          "777:   vendor=pc",
          "778:   os=sysv4",
          "779:   ;;",
          "780:  i*86v)",
          "781:   cpu=`echo \"$1\" | sed -e 's/86.*/86/'`",
          "782:   vendor=pc",
          "783:   os=sysv",
          "784:   ;;",
          "785:  i*86sol2)",
          "786:   cpu=`echo \"$1\" | sed -e 's/86.*/86/'`",
          "787:   vendor=pc",
          "788:   os=solaris2",
          "789:   ;;",
          "790:  j90 | j90-cray)",
          "791:   cpu=j90",
          "792:   vendor=cray",
          "793:   os=${os:-unicos}",
          "794:   ;;",
          "795:  iris | iris4d)",
          "796:   cpu=mips",
          "797:   vendor=sgi",
          "798:   case $os in",
          "799:       irix*)",
          "800:    ;;",
          "802:    os=irix4",
          "803:    ;;",
          "804:   esac",
          "805:   ;;",
          "806:  miniframe)",
          "807:   cpu=m68000",
          "808:   vendor=convergent",
          "809:   ;;",
          "811:   cpu=m68k",
          "812:   vendor=atari",
          "813:   os=mint",
          "814:   ;;",
          "815:  news-3600 | risc-news)",
          "816:   cpu=mips",
          "817:   vendor=sony",
          "818:   os=newsos",
          "819:   ;;",
          "820:  next | m*-next)",
          "821:   cpu=m68k",
          "822:   vendor=next",
          "823:   case $os in",
          "824:       nextstep* )",
          "825:    ;;",
          "826:       ns2*)",
          "827:         os=nextstep2",
          "828:    ;;",
          "830:         os=nextstep3",
          "831:    ;;",
          "832:   esac",
          "833:   ;;",
          "834:  np1)",
          "835:   cpu=np1",
          "836:   vendor=gould",
          "837:   ;;",
          "838:  op50n-* | op60c-*)",
          "839:   cpu=hppa1.1",
          "840:   vendor=oki",
          "841:   os=proelf",
          "842:   ;;",
          "843:  pa-hitachi)",
          "844:   cpu=hppa1.1",
          "845:   vendor=hitachi",
          "846:   os=hiuxwe2",
          "847:   ;;",
          "848:  pbd)",
          "849:   cpu=sparc",
          "850:   vendor=tti",
          "851:   ;;",
          "852:  pbb)",
          "853:   cpu=m68k",
          "854:   vendor=tti",
          "855:   ;;",
          "856:  pc532)",
          "857:   cpu=ns32k",
          "858:   vendor=pc532",
          "859:   ;;",
          "860:  pn)",
          "861:   cpu=pn",
          "862:   vendor=gould",
          "863:   ;;",
          "864:  power)",
          "865:   cpu=power",
          "866:   vendor=ibm",
          "867:   ;;",
          "868:  ps2)",
          "869:   cpu=i386",
          "870:   vendor=ibm",
          "871:   ;;",
          "872:  rm[46]00)",
          "873:   cpu=mips",
          "874:   vendor=siemens",
          "875:   ;;",
          "876:  rtpc | rtpc-*)",
          "877:   cpu=romp",
          "878:   vendor=ibm",
          "879:   ;;",
          "880:  sde)",
          "881:   cpu=mipsisa32",
          "882:   vendor=sde",
          "883:   os=${os:-elf}",
          "884:   ;;",
          "885:  simso-wrs)",
          "886:   cpu=sparclite",
          "887:   vendor=wrs",
          "888:   os=vxworks",
          "889:   ;;",
          "890:  tower | tower-32)",
          "891:   cpu=m68k",
          "892:   vendor=ncr",
          "893:   ;;",
          "894:  vpp*|vx|vx-*)",
          "895:   cpu=f301",
          "896:   vendor=fujitsu",
          "897:   ;;",
          "898:  w65)",
          "899:   cpu=w65",
          "900:   vendor=wdc",
          "901:   ;;",
          "902:  w89k-*)",
          "903:   cpu=hppa1.1",
          "904:   vendor=winbond",
          "905:   os=proelf",
          "906:   ;;",
          "907:  none)",
          "908:   cpu=none",
          "909:   vendor=none",
          "910:   ;;",
          "911:  leon|leon[3-9])",
          "912:   cpu=sparc",
          "913:   vendor=$basic_machine",
          "914:   ;;",
          "915:  leon-*|leon[3-9]-*)",
          "916:   cpu=sparc",
          "917:   vendor=`echo \"$basic_machine\" | sed 's/-.*//'`",
          "918:   ;;",
          "921:   IFS=\"-\" read -r cpu vendor <<EOF",
          "922: $basic_machine",
          "923: EOF",
          "924:   ;;",
          "925:  # We use `pc' rather than `unknown'",
          "926:  # because (1) that's what they normally are, and",
          "927:  # (2) the word \"unknown\" tends to confuse beginning users.",
          "928:  i*86 | x86_64)",
          "929:   cpu=$basic_machine",
          "930:   vendor=pc",
          "931:   ;;",
          "932:  # These rules are duplicated from below for sake of the special case above;",
          "933:  # i.e. things that normalized to x86 arches should also default to \"pc\"",
          "934:  pc98)",
          "935:   cpu=i386",
          "936:   vendor=pc",
          "937:   ;;",
          "938:  x64 | amd64)",
          "939:   cpu=x86_64",
          "940:   vendor=pc",
          "941:   ;;",
          "942:  # Recognize the basic CPU types without company name.",
          "944:   cpu=$basic_machine",
          "945:   vendor=unknown",
          "946:   ;;",
          "947: esac",
          "949: unset -v basic_machine",
          "951: # Decode basic machines in the full and proper CPU-Company form.",
          "952: case $cpu-$vendor in",
          "953:  # Here we handle the default manufacturer of certain CPU types in canonical form. It is in",
          "954:  # some cases the only manufacturer, in others, it is the most popular.",
          "955:  craynv-unknown)",
          "956:   vendor=cray",
          "957:   os=${os:-unicosmp}",
          "958:   ;;",
          "959:  c90-unknown | c90-cray)",
          "960:   vendor=cray",
          "961:   os=${os:-unicos}",
          "962:   ;;",
          "963:  fx80-unknown)",
          "964:   vendor=alliant",
          "965:   ;;",
          "966:  romp-unknown)",
          "967:   vendor=ibm",
          "968:   ;;",
          "969:  mmix-unknown)",
          "970:   vendor=knuth",
          "971:   ;;",
          "972:  microblaze-unknown | microblazeel-unknown)",
          "973:   vendor=xilinx",
          "974:   ;;",
          "975:  rs6000-unknown)",
          "976:   vendor=ibm",
          "977:   ;;",
          "978:  vax-unknown)",
          "979:   vendor=dec",
          "980:   ;;",
          "981:  pdp11-unknown)",
          "982:   vendor=dec",
          "983:   ;;",
          "984:  we32k-unknown)",
          "985:   vendor=att",
          "986:   ;;",
          "987:  cydra-unknown)",
          "988:   vendor=cydrome",
          "989:   ;;",
          "990:  i370-ibm*)",
          "991:   vendor=ibm",
          "992:   ;;",
          "993:  orion-unknown)",
          "994:   vendor=highlevel",
          "995:   ;;",
          "996:  xps-unknown | xps100-unknown)",
          "997:   cpu=xps100",
          "998:   vendor=honeywell",
          "999:   ;;",
          "1001:  # Here we normalize CPU types with a missing or matching vendor",
          "1002:  dpx20-unknown | dpx20-bull)",
          "1003:   cpu=rs6000",
          "1004:   vendor=bull",
          "1005:   os=${os:-bosx}",
          "1006:   ;;",
          "1008:  # Here we normalize CPU types irrespective of the vendor",
          "1009:  amd64-*)",
          "1010:   cpu=x86_64",
          "1011:   ;;",
          "1012:  blackfin-*)",
          "1013:   cpu=bfin",
          "1014:   os=linux",
          "1015:   ;;",
          "1016:  c54x-*)",
          "1017:   cpu=tic54x",
          "1018:   ;;",
          "1019:  c55x-*)",
          "1020:   cpu=tic55x",
          "1021:   ;;",
          "1022:  c6x-*)",
          "1023:   cpu=tic6x",
          "1024:   ;;",
          "1025:  e500v[12]-*)",
          "1026:   cpu=powerpc",
          "1027:   os=$os\"spe\"",
          "1028:   ;;",
          "1029:  mips3*-*)",
          "1030:   cpu=mips64",
          "1031:   ;;",
          "1032:  ms1-*)",
          "1033:   cpu=mt",
          "1034:   ;;",
          "1035:  m68knommu-*)",
          "1036:   cpu=m68k",
          "1037:   os=linux",
          "1038:   ;;",
          "1039:  m9s12z-* | m68hcs12z-* | hcs12z-* | s12z-*)",
          "1040:   cpu=s12z",
          "1041:   ;;",
          "1042:  openrisc-*)",
          "1043:   cpu=or32",
          "1044:   ;;",
          "1045:  parisc-*)",
          "1046:   cpu=hppa",
          "1047:   os=linux",
          "1048:   ;;",
          "1049:  pentium-* | p5-* | k5-* | k6-* | nexgen-* | viac3-*)",
          "1050:   cpu=i586",
          "1051:   ;;",
          "1052:  pentiumpro-* | p6-* | 6x86-* | athlon-* | athalon_*-*)",
          "1053:   cpu=i686",
          "1054:   ;;",
          "1055:  pentiumii-* | pentium2-* | pentiumiii-* | pentium3-*)",
          "1056:   cpu=i686",
          "1057:   ;;",
          "1058:  pentium4-*)",
          "1059:   cpu=i786",
          "1060:   ;;",
          "1061:  pc98-*)",
          "1062:   cpu=i386",
          "1063:   ;;",
          "1064:  ppc-* | ppcbe-*)",
          "1065:   cpu=powerpc",
          "1066:   ;;",
          "1067:  ppcle-* | powerpclittle-*)",
          "1068:   cpu=powerpcle",
          "1069:   ;;",
          "1070:  ppc64-*)",
          "1071:   cpu=powerpc64",
          "1072:   ;;",
          "1073:  ppc64le-* | powerpc64little-*)",
          "1074:   cpu=powerpc64le",
          "1075:   ;;",
          "1076:  sb1-*)",
          "1077:   cpu=mipsisa64sb1",
          "1078:   ;;",
          "1079:  sb1el-*)",
          "1080:   cpu=mipsisa64sb1el",
          "1081:   ;;",
          "1082:  sh5e[lb]-*)",
          "1083:   cpu=`echo \"$cpu\" | sed 's/^\\(sh.\\)e\\(.\\)$/\\1\\2e/'`",
          "1084:   ;;",
          "1085:  spur-*)",
          "1086:   cpu=spur",
          "1087:   ;;",
          "1088:  strongarm-* | thumb-*)",
          "1089:   cpu=arm",
          "1090:   ;;",
          "1091:  tx39-*)",
          "1092:   cpu=mipstx39",
          "1093:   ;;",
          "1094:  tx39el-*)",
          "1095:   cpu=mipstx39el",
          "1096:   ;;",
          "1097:  x64-*)",
          "1098:   cpu=x86_64",
          "1099:   ;;",
          "1100:  xscale-* | xscalee[bl]-*)",
          "1101:   cpu=`echo \"$cpu\" | sed 's/^xscale/arm/'`",
          "1102:   ;;",
          "1104:  # Recognize the canonical CPU Types that limit and/or modify the",
          "1105:  # company names they are paired with.",
          "1106:  cr16-*)",
          "1107:   os=${os:-elf}",
          "1108:   ;;",
          "1109:  crisv32-* | etraxfs*-*)",
          "1110:   cpu=crisv32",
          "1111:   vendor=axis",
          "1112:   ;;",
          "1113:  cris-* | etrax*-*)",
          "1114:   cpu=cris",
          "1115:   vendor=axis",
          "1116:   ;;",
          "1117:  crx-*)",
          "1118:   os=${os:-elf}",
          "1119:   ;;",
          "1120:  neo-tandem)",
          "1121:   cpu=neo",
          "1122:   vendor=tandem",
          "1123:   ;;",
          "1124:  nse-tandem)",
          "1125:   cpu=nse",
          "1126:   vendor=tandem",
          "1127:   ;;",
          "1128:  nsr-tandem)",
          "1129:   cpu=nsr",
          "1130:   vendor=tandem",
          "1131:   ;;",
          "1132:  nsv-tandem)",
          "1133:   cpu=nsv",
          "1134:   vendor=tandem",
          "1135:   ;;",
          "1136:  nsx-tandem)",
          "1137:   cpu=nsx",
          "1138:   vendor=tandem",
          "1139:   ;;",
          "1140:  s390-*)",
          "1141:   cpu=s390",
          "1142:   vendor=ibm",
          "1143:   ;;",
          "1144:  s390x-*)",
          "1145:   cpu=s390x",
          "1146:   vendor=ibm",
          "1147:   ;;",
          "1148:  tile*-*)",
          "1149:   os=${os:-linux-gnu}",
          "1150:   ;;",
          "1153:   # Recognize the canonical CPU types that are allowed with any",
          "1154:   # company name.",
          "1155:   case $cpu in",
          "1156:    1750a | 580 \\",
          "1157:    | a29k \\",
          "1158:    | aarch64 | aarch64_be \\",
          "1159:    | abacus \\",
          "1160:    | alpha | alphaev[4-8] | alphaev56 | alphaev6[78] \\",
          "1161:    | alpha64 | alpha64ev[4-8] | alpha64ev56 | alpha64ev6[78] \\",
          "1162:    | alphapca5[67] | alpha64pca5[67] \\",
          "1163:    | am33_2.0 \\",
          "1164:    | arc | arceb \\",
          "1165:    | arm  | arm[lb]e | arme[lb] | armv* \\",
          "1166:    | avr | avr32 \\",
          "1167:    | asmjs \\",
          "1168:    | ba \\",
          "1169:    | be32 | be64 \\",
          "1170:    | bfin | bs2000 \\",
          "1171:    | c[123]* | c30 | [cjt]90 | c4x \\",
          "1172:    | c8051 | clipper | craynv | csky | cydra \\",
          "1173:    | d10v | d30v | dlx | dsp16xx \\",
          "1174:    | e2k | elxsi | epiphany \\",
          "1175:    | f30[01] | f700 | fido | fr30 | frv | ft32 | fx80 \\",
          "1176:    | h8300 | h8500 \\",
          "1177:    | hppa | hppa1.[01] | hppa2.0 | hppa2.0[nw] | hppa64 \\",
          "1178:    | hexagon \\",
          "1179:    | i370 | i*86 | i860 | i960 | ia16 | ia64 \\",
          "1180:    | ip2k | iq2000 \\",
          "1181:    | k1om \\",
          "1182:    | le32 | le64 \\",
          "1183:    | lm32 \\",
          "1184:    | m32c | m32r | m32rle \\",
          "1185:    | m5200 | m68000 | m680[012346]0 | m68360 | m683?2 | m68k | v70 | w65 \\",
          "1186:    | m6811 | m68hc11 | m6812 | m68hc12 | m68hcs12x | nvptx | picochip \\",
          "1187:    | m88110 | m88k | maxq | mb | mcore | mep | metag \\",
          "1188:    | microblaze | microblazeel \\",
          "1189:    | mips | mipsbe | mipseb | mipsel | mipsle \\",
          "1190:    | mips16 \\",
          "1191:    | mips64 | mips64el \\",
          "1192:    | mips64octeon | mips64octeonel \\",
          "1193:    | mips64orion | mips64orionel \\",
          "1194:    | mips64r5900 | mips64r5900el \\",
          "1195:    | mips64vr | mips64vrel \\",
          "1196:    | mips64vr4100 | mips64vr4100el \\",
          "1197:    | mips64vr4300 | mips64vr4300el \\",
          "1198:    | mips64vr5000 | mips64vr5000el \\",
          "1199:    | mips64vr5900 | mips64vr5900el \\",
          "1200:    | mipsisa32 | mipsisa32el \\",
          "1201:    | mipsisa32r2 | mipsisa32r2el \\",
          "1202:    | mipsisa32r6 | mipsisa32r6el \\",
          "1203:    | mipsisa64 | mipsisa64el \\",
          "1204:    | mipsisa64r2 | mipsisa64r2el \\",
          "1205:    | mipsisa64r6 | mipsisa64r6el \\",
          "1206:    | mipsisa64sb1 | mipsisa64sb1el \\",
          "1207:    | mipsisa64sr71k | mipsisa64sr71kel \\",
          "1208:    | mipsr5900 | mipsr5900el \\",
          "1209:    | mipstx39 | mipstx39el \\",
          "1210:    | mmix \\",
          "1211:    | mn10200 | mn10300 \\",
          "1212:    | moxie \\",
          "1213:    | mt \\",
          "1214:    | msp430 \\",
          "1215:    | nds32 | nds32le | nds32be \\",
          "1216:    | nfp \\",
          "1217:    | nios | nios2 | nios2eb | nios2el \\",
          "1218:    | none | np1 | ns16k | ns32k \\",
          "1219:    | open8 \\",
          "1220:    | or1k* \\",
          "1221:    | or32 \\",
          "1222:    | orion \\",
          "1223:    | pdp10 | pdp11 | pj | pjl | pn | power \\",
          "1224:    | powerpc | powerpc64 | powerpc64le | powerpcle | powerpcspe \\",
          "1225:    | pru \\",
          "1226:    | pyramid \\",
          "1227:    | riscv | riscv32 | riscv64 \\",
          "1228:    | rl78 | romp | rs6000 | rx \\",
          "1229:    | score \\",
          "1230:    | sh | sh[1234] | sh[24]a | sh[24]ae[lb] | sh[23]e | she[lb] | sh[lb]e \\",
          "1231:    | sh[1234]e[lb] |  sh[12345][lb]e | sh[23]ele | sh64 | sh64le \\",
          "1232:    | sparc | sparc64 | sparc64b | sparc64v | sparc86x | sparclet \\",
          "1233:    | sparclite \\",
          "1234:    | sparcv8 | sparcv9 | sparcv9b | sparcv9v | sv1 | sx* \\",
          "1235:    | spu \\",
          "1236:    | tahoe \\",
          "1237:    | tic30 | tic4x | tic54x | tic55x | tic6x | tic80 \\",
          "1238:    | tron \\",
          "1239:    | ubicom32 \\",
          "1240:    | v850 | v850e | v850e1 | v850es | v850e2 | v850e2v3 \\",
          "1241:    | vax \\",
          "1242:    | visium \\",
          "1243:    | wasm32 \\",
          "1244:    | we32k \\",
          "1245:    | x86 | x86_64 | xc16x | xgate | xps100 \\",
          "1246:    | xstormy16 | xtensa* \\",
          "1247:    | ymp \\",
          "1248:    | z8k | z80)",
          "1249:     ;;",
          "1252:     echo Invalid configuration \\`\"$1\"\\': machine \\`\"$cpu-$vendor\"\\' not recognized 1>&2",
          "1253:     exit 1",
          "1254:     ;;",
          "1255:   esac",
          "1256:   ;;",
          "1257: esac",
          "1259: # Here we canonicalize certain aliases for manufacturers.",
          "1260: case $vendor in",
          "1261:  digital*)",
          "1262:   vendor=dec",
          "1263:   ;;",
          "1264:  commodore*)",
          "1265:   vendor=cbm",
          "1266:   ;;",
          "1268:   ;;",
          "1269: esac",
          "1271: # Decode manufacturer-specific aliases for certain operating systems.",
          "1273: if [ x$os != x ]",
          "1274: then",
          "1275: case $os in",
          "1276:  # First match some system type aliases that might get confused",
          "1277:  # with valid system types.",
          "1278:  # solaris* is a basic system type, with this one exception.",
          "1279:  auroraux)",
          "1280:   os=auroraux",
          "1281:   ;;",
          "1282:  bluegene*)",
          "1283:   os=cnk",
          "1284:   ;;",
          "1285:  solaris1 | solaris1.*)",
          "1286:   os=`echo $os | sed -e 's|solaris1|sunos4|'`",
          "1287:   ;;",
          "1288:  solaris)",
          "1289:   os=solaris2",
          "1290:   ;;",
          "1291:  unixware*)",
          "1292:   os=sysv4.2uw",
          "1293:   ;;",
          "1294:  gnu/linux*)",
          "1295:   os=`echo $os | sed -e 's|gnu/linux|linux-gnu|'`",
          "1296:   ;;",
          "1297:  # es1800 is here to avoid being matched by es* (a different OS)",
          "1298:  es1800*)",
          "1299:   os=ose",
          "1300:   ;;",
          "1301:  # Some version numbers need modification",
          "1302:  chorusos*)",
          "1303:   os=chorusos",
          "1304:   ;;",
          "1305:  isc)",
          "1306:   os=isc2.2",
          "1307:   ;;",
          "1308:  sco6)",
          "1309:   os=sco5v6",
          "1310:   ;;",
          "1311:  sco5)",
          "1312:   os=sco3.2v5",
          "1313:   ;;",
          "1314:  sco4)",
          "1315:   os=sco3.2v4",
          "1316:   ;;",
          "1317:  sco3.2.[4-9]*)",
          "1318:   os=`echo $os | sed -e 's/sco3.2./sco3.2v/'`",
          "1319:   ;;",
          "1320:  sco3.2v[4-9]* | sco5v6*)",
          "1321:   # Don't forget version if it is 3.2v4 or newer.",
          "1322:   ;;",
          "1323:  scout)",
          "1324:   # Don't match below",
          "1325:   ;;",
          "1326:  sco*)",
          "1327:   os=sco3.2v2",
          "1328:   ;;",
          "1329:  psos*)",
          "1330:   os=psos",
          "1331:   ;;",
          "1332:  # Now accept the basic system types.",
          "1333:  # The portable systems comes first.",
          "1334:  # Each alternative MUST end in a * to match a version number.",
          "1335:  # sysv* is not here because it comes later, after sysvr4.",
          "1336:  gnu* | bsd* | mach* | minix* | genix* | ultrix* | irix* \\",
          "1337:       | *vms* | esix* | aix* | cnk* | sunos | sunos[34]*\\",
          "1338:       | hpux* | unos* | osf* | luna* | dgux* | auroraux* | solaris* \\",
          "1339:       | sym* | kopensolaris* | plan9* \\",
          "1340:       | amigaos* | amigados* | msdos* | newsos* | unicos* | aof* \\",
          "1341:       | aos* | aros* | cloudabi* | sortix* \\",
          "1342:       | nindy* | vxsim* | vxworks* | ebmon* | hms* | mvs* \\",
          "1343:       | clix* | riscos* | uniplus* | iris* | isc* | rtu* | xenix* \\",
          "1344:       | knetbsd* | mirbsd* | netbsd* \\",
          "1345:       | bitrig* | openbsd* | solidbsd* | libertybsd* \\",
          "1346:       | ekkobsd* | kfreebsd* | freebsd* | riscix* | lynxos* \\",
          "1347:       | bosx* | nextstep* | cxux* | aout* | elf* | oabi* \\",
          "1348:       | ptx* | coff* | ecoff* | winnt* | domain* | vsta* \\",
          "1349:       | udi* | eabi* | lites* | ieee* | go32* | aux* | hcos* \\",
          "1350:       | chorusrdb* | cegcc* | glidix* \\",
          "1351:       | cygwin* | msys* | pe* | moss* | proelf* | rtems* \\",
          "1352:       | midipix* | mingw32* | mingw64* | linux-gnu* | linux-android* \\",
          "1353:       | linux-newlib* | linux-musl* | linux-uclibc* \\",
          "1354:       | uxpv* | beos* | mpeix* | udk* | moxiebox* \\",
          "1355:       | interix* | uwin* | mks* | rhapsody* | darwin* \\",
          "1356:       | openstep* | oskit* | conix* | pw32* | nonstopux* \\",
          "1357:       | storm-chaos* | tops10* | tenex* | tops20* | its* \\",
          "1358:       | os2* | vos* | palmos* | uclinux* | nucleus* \\",
          "1359:       | morphos* | superux* | rtmk* | windiss* \\",
          "1360:       | powermax* | dnix* | nx6 | nx7 | sei* | dragonfly* \\",
          "1361:       | skyos* | haiku* | rdos* | toppers* | drops* | es* \\",
          "1362:       | onefs* | tirtos* | phoenix* | fuchsia* | redox* | bme* \\",
          "1363:       | midnightbsd*)",
          "1364:  # Remember, each alternative MUST END IN *, to match a version number.",
          "1365:   ;;",
          "1366:  qnx*)",
          "1367:   case $cpu in",
          "1368:       x86 | i*86)",
          "1369:    ;;",
          "1371:    os=nto-$os",
          "1372:    ;;",
          "1373:   esac",
          "1374:   ;;",
          "1375:  hiux*)",
          "1376:   os=hiuxwe2",
          "1377:   ;;",
          "1378:  nto-qnx*)",
          "1379:   ;;",
          "1380:  nto*)",
          "1381:   os=`echo $os | sed -e 's|nto|nto-qnx|'`",
          "1382:   ;;",
          "1383:  sim | xray | os68k* | v88r* \\",
          "1384:      | windows* | osx | abug | netware* | os9* \\",
          "1385:      | macos* | mpw* | magic* | mmixware* | mon960* | lnews*)",
          "1386:   ;;",
          "1387:  linux-dietlibc)",
          "1388:   os=linux-dietlibc",
          "1389:   ;;",
          "1390:  linux*)",
          "1391:   os=`echo $os | sed -e 's|linux|linux-gnu|'`",
          "1392:   ;;",
          "1393:  lynx*178)",
          "1394:   os=lynxos178",
          "1395:   ;;",
          "1396:  lynx*5)",
          "1397:   os=lynxos5",
          "1398:   ;;",
          "1399:  lynx*)",
          "1400:   os=lynxos",
          "1401:   ;;",
          "1402:  mac*)",
          "1403:   os=`echo \"$os\" | sed -e 's|mac|macos|'`",
          "1404:   ;;",
          "1405:  opened*)",
          "1406:   os=openedition",
          "1407:   ;;",
          "1408:  os400*)",
          "1409:   os=os400",
          "1410:   ;;",
          "1411:  sunos5*)",
          "1412:   os=`echo \"$os\" | sed -e 's|sunos5|solaris2|'`",
          "1413:   ;;",
          "1414:  sunos6*)",
          "1415:   os=`echo \"$os\" | sed -e 's|sunos6|solaris3|'`",
          "1416:   ;;",
          "1417:  wince*)",
          "1418:   os=wince",
          "1419:   ;;",
          "1420:  utek*)",
          "1421:   os=bsd",
          "1422:   ;;",
          "1423:  dynix*)",
          "1424:   os=bsd",
          "1425:   ;;",
          "1426:  acis*)",
          "1427:   os=aos",
          "1428:   ;;",
          "1429:  atheos*)",
          "1430:   os=atheos",
          "1431:   ;;",
          "1432:  syllable*)",
          "1433:   os=syllable",
          "1434:   ;;",
          "1435:  386bsd)",
          "1436:   os=bsd",
          "1437:   ;;",
          "1438:  ctix* | uts*)",
          "1439:   os=sysv",
          "1440:   ;;",
          "1441:  nova*)",
          "1442:   os=rtmk-nova",
          "1443:   ;;",
          "1444:  ns2)",
          "1445:   os=nextstep2",
          "1446:   ;;",
          "1447:  nsk*)",
          "1448:   os=nsk",
          "1449:   ;;",
          "1450:  # Preserve the version number of sinix5.",
          "1451:  sinix5.*)",
          "1452:   os=`echo $os | sed -e 's|sinix|sysv|'`",
          "1453:   ;;",
          "1454:  sinix*)",
          "1455:   os=sysv4",
          "1456:   ;;",
          "1457:  tpf*)",
          "1458:   os=tpf",
          "1459:   ;;",
          "1460:  triton*)",
          "1461:   os=sysv3",
          "1462:   ;;",
          "1463:  oss*)",
          "1464:   os=sysv3",
          "1465:   ;;",
          "1466:  svr4*)",
          "1467:   os=sysv4",
          "1468:   ;;",
          "1469:  svr3)",
          "1470:   os=sysv3",
          "1471:   ;;",
          "1472:  sysvr4)",
          "1473:   os=sysv4",
          "1474:   ;;",
          "1475:  # This must come after sysvr4.",
          "1476:  sysv*)",
          "1477:   ;;",
          "1478:  ose*)",
          "1479:   os=ose",
          "1480:   ;;",
          "1482:   os=mint",
          "1483:   ;;",
          "1484:  zvmoe)",
          "1485:   os=zvmoe",
          "1486:   ;;",
          "1487:  dicos*)",
          "1488:   os=dicos",
          "1489:   ;;",
          "1490:  pikeos*)",
          "1491:   # Until real need of OS specific support for",
          "1492:   # particular features comes up, bare metal",
          "1493:   # configurations are quite functional.",
          "1494:   case $cpu in",
          "1495:       arm*)",
          "1496:    os=eabi",
          "1497:    ;;",
          "1499:    os=elf",
          "1500:    ;;",
          "1501:   esac",
          "1502:   ;;",
          "1503:  nacl*)",
          "1504:   ;;",
          "1505:  ios)",
          "1506:   ;;",
          "1507:  none)",
          "1508:   ;;",
          "1510:   ;;",
          "1512:   echo Invalid configuration \\`\"$1\"\\': system \\`\"$os\"\\' not recognized 1>&2",
          "1513:   exit 1",
          "1514:   ;;",
          "1515: esac",
          "1516: else",
          "1518: # Here we handle the default operating systems that come with various machines.",
          "1519: # The value should be what the vendor currently ships out the door with their",
          "1520: # machine or put another way, the most popular os provided with the machine.",
          "1522: # Note that if you're going to try to match \"-MANUFACTURER\" here (say,",
          "1523: # \"-sun\"), then you have to tell the case statement up towards the top",
          "1524: # that MANUFACTURER isn't an operating system.  Otherwise, code above",
          "1525: # will signal an error saying that MANUFACTURER isn't an operating",
          "1526: # system, and we'll never get to this point.",
          "1528: case $cpu-$vendor in",
          "1529:  score-*)",
          "1530:   os=elf",
          "1531:   ;;",
          "1532:  spu-*)",
          "1533:   os=elf",
          "1534:   ;;",
          "1536:   os=riscix1.2",
          "1537:   ;;",
          "1538:  arm*-rebel)",
          "1539:   os=linux",
          "1540:   ;;",
          "1541:  arm*-semi)",
          "1542:   os=aout",
          "1543:   ;;",
          "1544:  c4x-* | tic4x-*)",
          "1545:   os=coff",
          "1546:   ;;",
          "1547:  c8051-*)",
          "1548:   os=elf",
          "1549:   ;;",
          "1550:  clipper-intergraph)",
          "1551:   os=clix",
          "1552:   ;;",
          "1553:  hexagon-*)",
          "1554:   os=elf",
          "1555:   ;;",
          "1556:  tic54x-*)",
          "1557:   os=coff",
          "1558:   ;;",
          "1559:  tic55x-*)",
          "1560:   os=coff",
          "1561:   ;;",
          "1562:  tic6x-*)",
          "1563:   os=coff",
          "1564:   ;;",
          "1565:  # This must come before the *-dec entry.",
          "1566:  pdp10-*)",
          "1567:   os=tops20",
          "1568:   ;;",
          "1569:  pdp11-*)",
          "1570:   os=none",
          "1571:   ;;",
          "1573:   os=ultrix4.2",
          "1574:   ;;",
          "1575:  m68*-apollo)",
          "1576:   os=domain",
          "1577:   ;;",
          "1578:  i386-sun)",
          "1579:   os=sunos4.0.2",
          "1580:   ;;",
          "1581:  m68000-sun)",
          "1582:   os=sunos3",
          "1583:   ;;",
          "1584:  m68*-cisco)",
          "1585:   os=aout",
          "1586:   ;;",
          "1587:  mep-*)",
          "1588:   os=elf",
          "1589:   ;;",
          "1590:  mips*-cisco)",
          "1591:   os=elf",
          "1592:   ;;",
          "1593:  mips*-*)",
          "1594:   os=elf",
          "1595:   ;;",
          "1596:  or32-*)",
          "1597:   os=coff",
          "1598:   ;;",
          "1600:   os=sysv3",
          "1601:   ;;",
          "1602:  sparc-* | *-sun)",
          "1603:   os=sunos4.1.1",
          "1604:   ;;",
          "1605:  pru-*)",
          "1606:   os=elf",
          "1607:   ;;",
          "1609:   os=beos",
          "1610:   ;;",
          "1612:   os=aix",
          "1613:   ;;",
          "1615:   os=mmixware",
          "1616:   ;;",
          "1618:   os=proelf",
          "1619:   ;;",
          "1621:   os=proelf",
          "1622:   ;;",
          "1624:   os=proelf",
          "1625:   ;;",
          "1627:   os=hpux",
          "1628:   ;;",
          "1630:   os=hiux",
          "1631:   ;;",
          "1632:  i860-* | *-att | *-ncr | *-altos | *-motorola | *-convergent)",
          "1633:   os=sysv",
          "1634:   ;;",
          "1636:   os=amigaos",
          "1637:   ;;",
          "1639:   os=dgux",
          "1640:   ;;",
          "1642:   os=sysv3",
          "1643:   ;;",
          "1644:  m68k-ccur)",
          "1645:   os=rtu",
          "1646:   ;;",
          "1647:  m88k-omron*)",
          "1648:   os=luna",
          "1649:   ;;",
          "1651:   os=nextstep",
          "1652:   ;;",
          "1654:   os=ptx",
          "1655:   ;;",
          "1657:   os=unos",
          "1658:   ;;",
          "1660:   os=genix",
          "1661:   ;;",
          "1662:  i370-*)",
          "1663:   os=mvs",
          "1664:   ;;",
          "1666:   os=sysv",
          "1667:   ;;",
          "1669:   os=bsd",
          "1670:   ;;",
          "1672:   os=bsd",
          "1673:   ;;",
          "1675:   os=irix",
          "1676:   ;;",
          "1678:   os=sysv4",
          "1679:   ;;",
          "1681:   os=rtu",
          "1682:   ;;",
          "1683:  f30[01]-fujitsu | f700-fujitsu)",
          "1684:   os=uxpv",
          "1685:   ;;",
          "1687:   os=coff",
          "1688:   ;;",
          "1690:   os=coff",
          "1691:   ;;",
          "1693:   os=macos",
          "1694:   ;;",
          "1696:   os=mint",
          "1697:   ;;",
          "1699:   os=vxworks",
          "1700:   ;;",
          "1702:   os=none",
          "1703:   ;;",
          "1704: esac",
          "1705: fi",
          "1707: # Here we handle the case where we know the os, and the CPU type, but not the",
          "1708: # manufacturer.  We pick the logical manufacturer.",
          "1709: case $vendor in",
          "1710:  unknown)",
          "1711:   case $os in",
          "1712:    riscix*)",
          "1713:     vendor=acorn",
          "1714:     ;;",
          "1715:    sunos*)",
          "1716:     vendor=sun",
          "1717:     ;;",
          "1718:    cnk*|-aix*)",
          "1719:     vendor=ibm",
          "1720:     ;;",
          "1721:    beos*)",
          "1722:     vendor=be",
          "1723:     ;;",
          "1724:    hpux*)",
          "1725:     vendor=hp",
          "1726:     ;;",
          "1727:    mpeix*)",
          "1728:     vendor=hp",
          "1729:     ;;",
          "1730:    hiux*)",
          "1731:     vendor=hitachi",
          "1732:     ;;",
          "1733:    unos*)",
          "1734:     vendor=crds",
          "1735:     ;;",
          "1736:    dgux*)",
          "1737:     vendor=dg",
          "1738:     ;;",
          "1739:    luna*)",
          "1740:     vendor=omron",
          "1741:     ;;",
          "1742:    genix*)",
          "1743:     vendor=ns",
          "1744:     ;;",
          "1745:    clix*)",
          "1746:     vendor=intergraph",
          "1747:     ;;",
          "1748:    mvs* | opened*)",
          "1749:     vendor=ibm",
          "1750:     ;;",
          "1751:    os400*)",
          "1752:     vendor=ibm",
          "1753:     ;;",
          "1754:    ptx*)",
          "1755:     vendor=sequent",
          "1756:     ;;",
          "1757:    tpf*)",
          "1758:     vendor=ibm",
          "1759:     ;;",
          "1760:    vxsim* | vxworks* | windiss*)",
          "1761:     vendor=wrs",
          "1762:     ;;",
          "1763:    aux*)",
          "1764:     vendor=apple",
          "1765:     ;;",
          "1766:    hms*)",
          "1767:     vendor=hitachi",
          "1768:     ;;",
          "1769:    mpw* | macos*)",
          "1770:     vendor=apple",
          "1771:     ;;",
          "1773:     vendor=atari",
          "1774:     ;;",
          "1775:    vos*)",
          "1776:     vendor=stratus",
          "1777:     ;;",
          "1778:   esac",
          "1779:   ;;",
          "1780: esac",
          "1782: echo \"$cpu-$vendor-$os\"",
          "1783: exit",
          "1785: # Local variables:",
          "1786: # eval: (add-hook 'before-save-hook 'time-stamp)",
          "1787: # time-stamp-start: \"timestamp='\"",
          "1788: # time-stamp-format: \"%:y-%02m-%02d\"",
          "1789: # time-stamp-end: \"'\"",
          "1790: # End:",
          "",
          "---------------"
        ],
        "tests/history.right||tests/history.right": [
          "File: tests/history.right -> tests/history.right",
          "--- Hunk 1 ---",
          "[Context before]",
          "227: right)",
          "228: A",
          "229: B",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "230: a",
          "231: b",
          "232: ./history5.sub: line 24: fc: history specification out of range",
          "233: ./history5.sub: line 25: fc: no command found",
          "234: 1  echo a",
          "235: 2  echo b",
          "236: 3  fc -0 # error",
          "237: 4  fc -s -0 # error",
          "238: c",
          "239: 6  echo c",
          "240: 8  fc -l -0",
          "241: d",
          "242: echo d",
          "243: d",
          "",
          "---------------"
        ],
        "tests/history.tests||tests/history.tests": [
          "File: tests/history.tests -> tests/history.tests",
          "--- Hunk 1 ---",
          "[Context before]",
          "128: ${THIS_SH} ./history2.sub",
          "129: ${THIS_SH} ./history3.sub",
          "130: ${THIS_SH} ./history4.sub",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131: ${THIS_SH} ./history5.sub",
          "",
          "---------------"
        ],
        "tests/history5.sub||tests/history5.sub": [
          "File: tests/history5.sub -> tests/history5.sub",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #   This program is free software: you can redistribute it and/or modify",
          "2: #   it under the terms of the GNU General Public License as published by",
          "3: #   the Free Software Foundation, either version 3 of the License, or",
          "4: #   (at your option) any later version.",
          "5: #",
          "6: #   This program is distributed in the hope that it will be useful,",
          "7: #   but WITHOUT ANY WARRANTY; without even the implied warranty of",
          "8: #   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
          "9: #   GNU General Public License for more details.",
          "10: #",
          "11: #   You should have received a copy of the GNU General Public License",
          "12: #   along with this program.  If not, see <http://www.gnu.org/licenses/>.",
          "13: #",
          "15: trap 'rm -f $HISTFILE' 0 1 2 3 6 15",
          "17: HISTFILE=$TMPDIR/foohist-$$",
          "18: unset HISTIGNORE HISTCONTROL",
          "19: set -o history",
          "21: echo a",
          "22: echo b",
          "24: fc -0 # error",
          "25: fc -s -0 # error",
          "27: fc -l",
          "29: echo c",
          "30: fc -l 0",
          "31: fc -l -0",
          "33: echo d",
          "34: fc -s 0",
          "",
          "---------------"
        ]
      }
    }
  ]
}