{
  "cve_id": "CVE-2019-19880",
  "cve_desc": "exprListAppendList in window.c in SQLite 3.30.1 allows attackers to trigger an invalid pointer dereference because constant integer values in ORDER BY clauses of window definitions are mishandled.",
  "repo": "sqlite/sqlite",
  "patch_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
  "patch_info": {
    "commit_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/window.c"
    ],
    "message": "When processing constant integer values in ORDER BY clauses of window definitions (see check-in [7e4809eadfe99ebf]) be sure to fully disable the constant value to avoid an invalid pointer dereference if the expression is ever duplicated. This fixes a crash report from Yongheng and Rui.\n\nFossilOrigin-Name: 1ca0bd982ab1183bbafce0d260e4dceda5eb766ed2e7793374a88d1ae0bdd2ca",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8223e79f987feda5c8e51ec52cec6798cca16d070b10558939e2888ca1a25b8e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "895:     int nInit = pList ? pList->nExpr : 0;",
      "896:     for(i=0; i<pAppend->nExpr; i++){",
      "897:       Expr *pDup = sqlite3ExprDup(pParse->db, pAppend->a[i].pExpr, 0);",
      "898:       if( bIntToNull && pDup && pDup->op==TK_INTEGER ){",
      "899:         pDup->op = TK_NULL;",
      "900:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
      "901:       }",
      "902:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
      "903:       if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "898:       assert( pDup==0 || !ExprHasProperty(pDup, EP_MemToken) );",
      "902:         pDup->u.zToken = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "51755a78a95e122963dcd8c74525aed965837da0",
      "candidate_info": {
        "commit_hash": "51755a78a95e122963dcd8c74525aed965837da0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/51755a78a95e122963dcd8c74525aed965837da0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/os.c",
          "src/resolve.c",
          "src/shell.c.in"
        ],
        "message": "Fix harmless compiler warnings.\n\nFossilOrigin-Name: 1eef4ddea9a2a8c97b97183402c774caa40ef906ea9cccade307381b29a9785d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/os.c||src/os.c",
          "src/resolve.c||src/resolve.c",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f1cd234c9888142e0ac542d866d7fb55a81fb7edd0a5cd810191b4e0395ffc7d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/os.c||src/os.c": [
          "File: src/os.c -> src/os.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "260: int sqlite3OsRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){",
          "261:   if( sqlite3Config.iPrngSeed ){",
          "262:     memset(zBufOut, 0, nByte);",
          "264:     memcpy(zBufOut, &sqlite3Config.iPrngSeed, nByte);",
          "265:     return SQLITE_OK;",
          "266:   }else{",
          "",
          "[Removed Lines]",
          "263:     if( ALWAYS(nByte>sizeof(unsigned)) ) nByte = sizeof(unsigned int);",
          "",
          "[Added Lines]",
          "263:     if( ALWAYS(nByte>(signed)sizeof(unsigned)) ) nByte = sizeof(unsigned int);",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1305: static int resolveRemoveWindowsCb(Walker *pWalker, Expr *pExpr){",
          "1306:   if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "1307:     Window *pWin = pExpr->y.pWin;",
          "1308:     sqlite3WindowUnlinkFromSelect(pWin);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1306:   UNUSED_PARAMETER(pWalker);",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3987:   sqlite3_value **argv",
          "3988: ){",
          "3989:   const char *zName = (const char*)sqlite3_value_text(argv[0]);",
          "3990:   if( zName ){",
          "3991:     char *z = sqlite3_mprintf(\"\\\"%w\\\"\", zName);",
          "3992:     sqlite3_result_text(context, z, -1, sqlite3_free);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3990:   UNUSED_PARAMETER(argc);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9262:         case SQLITE_TESTCTRL_PRNG_SEED:",
          "9263:           if( nArg==3 || nArg==4 ){",
          "9265:             sqlite3 *db;",
          "9266:             if( nArg==3 ){",
          "9267:               db = 0;",
          "",
          "[Removed Lines]",
          "9264:             int i = (int)integerValue(azArg[2]);",
          "",
          "[Added Lines]",
          "9265:             int ii = (int)integerValue(azArg[2]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "9271:               sqlite3_table_column_metadata(db, 0, \"x\", 0, 0, 0, 0, 0, 0);",
          "9272:             }",
          "9274:             isOk = 3;",
          "9275:           }",
          "9276:           break;",
          "",
          "[Removed Lines]",
          "9273:             rc2 = sqlite3_test_control(testctrl, i, db);",
          "",
          "[Added Lines]",
          "9274:             rc2 = sqlite3_test_control(testctrl, ii, db);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "698c86f40de408b954381c7a42f0417704e491a9",
      "candidate_info": {
        "commit_hash": "698c86f40de408b954381c7a42f0417704e491a9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/698c86f40de408b954381c7a42f0417704e491a9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/util.c"
        ],
        "message": "Small performance improvement on the variable-length integer decoder: sqlite3GetVarint().\n\nFossilOrigin-Name: 5df2bf62fcd4dfdaa195062dddbd5ce5420bc239b2649ac8f547e0db34e7f0bb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/util.c||src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7ac500fb5abfe1ad60f2ffdcc8fbe5ccc1c641bbeed53f00940e9ff78788e53d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "918: u8 sqlite3GetVarint(const unsigned char *p, u64 *v){",
          "919:   u32 a,b,s;",
          "926:     return 1;",
          "927:   }",
          "938:     return 2;",
          "939:   }",
          "",
          "[Removed Lines]",
          "921:   a = *p;",
          "923:   if (!(a&0x80))",
          "924:   {",
          "929:   p++;",
          "930:   b = *p;",
          "932:   if (!(b&0x80))",
          "933:   {",
          "934:     a &= 0x7f;",
          "935:     a = a<<7;",
          "936:     a |= b;",
          "",
          "[Added Lines]",
          "921:   if( ((signed char*)p)[0]>=0 ){",
          "925:   if( ((signed char*)p)[1]>=0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "942:   assert( SLOT_2_0 == ((0x7f<<14) | (0x7f)) );",
          "943:   assert( SLOT_4_2_0 == ((0xfU<<28) | (0x7f<<14) | (0x7f)) );",
          "947:   a |= *p;",
          "949:   if (!(a&0x80))",
          "",
          "[Removed Lines]",
          "945:   p++;",
          "946:   a = a<<14;",
          "",
          "[Added Lines]",
          "934:   a = ((u32)p[0])<<14;",
          "935:   b = p[1];",
          "936:   p += 2;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8b20e4a3ebc5e7a1f9df1037ac8c1839b55435f4",
      "candidate_info": {
        "commit_hash": "8b20e4a3ebc5e7a1f9df1037ac8c1839b55435f4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8b20e4a3ebc5e7a1f9df1037ac8c1839b55435f4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/altertab2.test"
        ],
        "message": "Fix a problem with fix [b4b57413].\n\nFossilOrigin-Name: ca7b7aaed010ec67bec5355a9ac1d7f229d6d5f2ba2d796b76f5e908b1267688",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/altertab2.test||test/altertab2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 24ed5fb6aea30b098d2faf3cf9d638933e518657217e903239ffaa1e25d34f66",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1163:           if( IN_RENAME_OBJECT ){",
          "1164:             if( iCol>0 ){",
          "1165:               pItem->done = 1;",
          "1167:             }",
          "1168:           }else{",
          "1169:             sqlite3ExprDelete(db, pDup);",
          "",
          "[Removed Lines]",
          "1166:               break;",
          "",
          "[Added Lines]",
          "1166:               continue;",
          "",
          "---------------"
        ],
        "test/altertab2.test||test/altertab2.test": [
          "File: test/altertab2.test -> test/altertab2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "263:   END}",
          "264: }",
          "266: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "266: #-------------------------------------------------------------------------",
          "267: reset_db",
          "269: do_execsql_test 7.0 {",
          "270:   CREATE TABLE t1(a,b,c,d,e,f);",
          "271:   INSERT INTO t1 VALUES(1,2,3,4,5,6);",
          "272:   CREATE TABLE t2(x,y,z);",
          "273: }",
          "275: do_execsql_test 7.1 {",
          "276:   SELECT a,b,c FROM t1 UNION SELECT d,e,f FROM t1 ORDER BY b,c;",
          "277: } {1 2 3 4 5 6}",
          "279: do_execsql_test 7.2 {",
          "280:   CREATE TRIGGER r1 AFTER INSERT ON t1 BEGIN",
          "281:     INSERT INTO t2",
          "282:     SELECT a,b,c FROM t1 UNION SELECT d,e,f FROM t1 ORDER BY b,c;",
          "283:   END;",
          "284:   INSERT INTO t1 VALUES(2,3,4,5,6,7);",
          "285:   SELECT * FROM t2;",
          "286: } {1 2 3  2 3 4  4 5 6  5 6 7}",
          "288: do_execsql_test 7.3 {",
          "289:   ALTER TABLE t1 RENAME TO xyzzy;",
          "290:   SELECT sql FROM sqlite_master WHERE name='r1'",
          "291: } {",
          "292:   {CREATE TRIGGER r1 AFTER INSERT ON \"xyzzy\" BEGIN",
          "293:     INSERT INTO t2",
          "294:     SELECT a,b,c FROM \"xyzzy\" UNION SELECT d,e,f FROM \"xyzzy\" ORDER BY b,c;",
          "295:   END}",
          "296: }",
          "298: do_execsql_test 7.3 {",
          "299:   ALTER TABLE xyzzy RENAME c TO ccc;",
          "300:   SELECT sql FROM sqlite_master WHERE name='r1'",
          "301: } {",
          "302:   {CREATE TRIGGER r1 AFTER INSERT ON \"xyzzy\" BEGIN",
          "303:     INSERT INTO t2",
          "304:     SELECT a,b,ccc FROM \"xyzzy\" UNION SELECT d,e,f FROM \"xyzzy\" ORDER BY b,ccc;",
          "305:   END}",
          "306: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "45cb2aa98cb1a082b90b4ff7f880a9b07050a09b",
      "candidate_info": {
        "commit_hash": "45cb2aa98cb1a082b90b4ff7f880a9b07050a09b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/45cb2aa98cb1a082b90b4ff7f880a9b07050a09b",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/releasetest_data.tcl",
          "test/wapptest.tcl"
        ],
        "message": "Update \"releasetest_data.tcl\" so that it is a standalone script that generates sh or batch scripts to run each tcl test run at release time. Update wapptest.tcl to use it.\n\nFossilOrigin-Name: 559c2dd6724b2fc238760863d4be7132b591457e72ca5758fdd4002fbf7df4bc",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/releasetest_data.tcl||test/releasetest_data.tcl",
          "test/wapptest.tcl||test/wapptest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6e92d71c24c6039e7116f02fc5f39b2b87efcd3674ea828077c03d760bf49c45",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/releasetest_data.tcl||test/releasetest_data.tcl": [
          "File: test/releasetest_data.tcl -> test/releasetest_data.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: # This file contains Configuration data used by \"wapptest.tcl\" and",
          "3: # \"releasetest.tcl\".",
          "4: #",
          "6: # Omit comments (text between # and \\n) in a long multi-line string.",
          "7: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: set USAGE {",
          "6: $argv0 configurations",
          "7:     List available configurations.",
          "9: $argv0 script ?-msvc? CONFIGURATION TARGET",
          "10:     Given a configuration and make target, return a bash (or, if -msvc",
          "11:     is specified, batch) script to execute the test. The first argument",
          "12:     passed to the script must be a directory containing SQLite source code.",
          "14: $argv0 platforms",
          "15:     List available platforms.",
          "17: $argv0 tests ?-nodebug? PLATFORM",
          "18:     List tests in a specified platform. If the -nodebug switch is",
          "19:     specified, synthetic debug/ndebug configurations are omitted.",
          "20: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "158:     -DHAVE_LOCALTIME_R=1",
          "159:     -DHAVE_PREAD=1",
          "160:     -DHAVE_PWRITE=1",
          "163:     -DHAVE_UTIME=1",
          "164:     -DSQLITE_DEFAULT_CACHE_SIZE=1000",
          "165:     -DSQLITE_DEFAULT_CKPTFULLFSYNC=1",
          "",
          "[Removed Lines]",
          "161:     -DHAVE_USLEEP=1",
          "162:     -DHAVE_USLEEP=1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "172:     -DSQLITE_ENABLE_FTS3=1",
          "173:     -DSQLITE_ENABLE_FTS3_PARENTHESIS=1",
          "174:     -DSQLITE_ENABLE_FTS3_TOKENIZER=1",
          "176:     -DSQLITE_ENABLE_PERSIST_WAL=1",
          "177:     -DSQLITE_ENABLE_PURGEABLE_PCACHE=1",
          "178:     -DSQLITE_ENABLE_RTREE=1",
          "",
          "[Removed Lines]",
          "175:     if:os==\"Darwin\" -DSQLITE_ENABLE_LOCKING_STYLE=1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "212:   \"No-lookaside\" {",
          "213:     -DSQLITE_TEST_REALLOC_STRESS=1",
          "214:     -DSQLITE_OMIT_LOOKASIDE=1",
          "216:   }",
          "217:   \"Valgrind\" {",
          "218:     -DSQLITE_ENABLE_STAT4",
          "",
          "[Removed Lines]",
          "215:     -DHAVE_USLEEP=1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "234:   FuzzFail1 {-O0}",
          "235:   FuzzFail2 {-O0}",
          "236: }]",
          "238: array set ::Platforms [strip_comments {",
          "239:   Linux-x86_64 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "249: if {$tcl_platform(os)==\"Darwin\"} {",
          "250:   lappend Configs(Apple -DSQLITE_ENABLE_LOCKING_STYLE=1",
          "251: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "299:   }",
          "300: }]",
          "308:   #",
          "320:       continue",
          "321:     }",
          "352:         }",
          "353:       }",
          "365:       }",
          "367:     }",
          "375:   #",
          "377:     lappend opts -DHAVE_USLEEP=1",
          "378:   }",
          "399: }",
          "409:     }",
          "410:   }",
          "411: }",
          "",
          "[Removed Lines]",
          "302: proc make_test_suite {msvc withtcl name testtarget config} {",
          "304:   # Tcl variable $opts is used to build up the value used to set the",
          "305:   # OPTS Makefile variable. Variable $cflags holds the value for",
          "306:   # CFLAGS. The makefile will pass OPTS to both gcc and lemon, but",
          "307:   # CFLAGS is only passed to gcc.",
          "309:   set makeOpts \"\"",
          "310:   set cflags [expr {$msvc ? \"-Zi\" : \"-g\"}]",
          "311:   set opts \"\"",
          "312:   set title ${name}($testtarget)",
          "313:   set configOpts $withtcl",
          "314:   set skip 0",
          "316:   regsub -all {#[^\\n]*\\n} $config \\n config",
          "317:   foreach arg $config {",
          "318:     if {$skip} {",
          "319:       set skip 0",
          "322:     if {[regexp {^-[UD]} $arg]} {",
          "323:       lappend opts $arg",
          "324:     } elseif {[regexp {^[A-Z]+=} $arg]} {",
          "325:       lappend testtarget $arg",
          "326:     } elseif {[regexp {^if:([a-z]+)(.*)} $arg all key tail]} {",
          "327:       # Arguments of the form 'if:os==\"Linux\"' will cause the subsequent",
          "328:       # argument to be skipped if the $tcl_platform(os) is not \"Linux\", for",
          "329:       # example...",
          "330:       set skip [expr !(\\$::tcl_platform($key)$tail)]",
          "331:     } elseif {[regexp {^--(enable|disable)-} $arg]} {",
          "332:       if {$msvc} {",
          "333:         if {$arg eq \"--disable-amalgamation\"} {",
          "334:           lappend makeOpts USE_AMALGAMATION=0",
          "335:           continue",
          "336:         }",
          "337:         if {$arg eq \"--disable-shared\"} {",
          "338:           lappend makeOpts USE_CRT_DLL=0 DYNAMIC_SHELL=0",
          "339:           continue",
          "340:         }",
          "341:         if {$arg eq \"--enable-fts5\"} {",
          "342:           lappend opts -DSQLITE_ENABLE_FTS5",
          "343:           continue",
          "344:         }",
          "345:         if {$arg eq \"--enable-json1\"} {",
          "346:           lappend opts -DSQLITE_ENABLE_JSON1",
          "347:           continue",
          "348:         }",
          "349:         if {$arg eq \"--enable-shared\"} {",
          "350:           lappend makeOpts USE_CRT_DLL=1 DYNAMIC_SHELL=1",
          "351:           continue",
          "354:       lappend configOpts $arg",
          "355:     } else {",
          "356:       if {$msvc} {",
          "357:         if {$arg eq \"-g\"} {",
          "358:           lappend cflags -Zi",
          "359:           continue",
          "360:         }",
          "361:         if {[regexp -- {^-O(\\d+)$} $arg all level]} then {",
          "362:           lappend makeOpts OPTIMIZATIONS=$level",
          "363:           continue",
          "364:         }",
          "366:       lappend cflags $arg",
          "368:   }",
          "370:   # Disable sync to make testing faster.",
          "371:   #",
          "372:   lappend opts -DSQLITE_NO_SYNC=1",
          "374:   # Some configurations already set HAVE_USLEEP; in that case, skip it.",
          "376:   if {[lsearch -regexp $opts {^-DHAVE_USLEEP(?:=|$)}]==-1} {",
          "380:   # Add the define for this platform.",
          "381:   #",
          "382:   if {$::tcl_platform(platform)==\"windows\"} {",
          "383:     lappend opts -DSQLITE_OS_WIN=1",
          "384:   } else {",
          "385:     lappend opts -DSQLITE_OS_UNIX=1",
          "386:   }",
          "388:   # Set the sub-directory to use.",
          "389:   #",
          "390:   set dir [string tolower [string map {- _ \" \" _ \"(\" _ \")\" _} $name]]",
          "392:   # Join option lists into strings, using space as delimiter.",
          "393:   #",
          "394:   set makeOpts [join $makeOpts \" \"]",
          "395:   set cflags   [join $cflags \" \"]",
          "396:   set opts     [join $opts \" \"]",
          "398:   return [list $title $dir $configOpts $testtarget $makeOpts $cflags $opts]",
          "401: # Configuration verification: Check that each entry in the list of configs",
          "402: # specified for each platforms exists.",
          "403: #",
          "404: foreach {key value} [array get ::Platforms] {",
          "405:   foreach {v t} $value {",
          "406:     if {0==[info exists ::Configs($v)]} {",
          "407:       puts stderr \"No such configuration: \\\"$v\\\"\"",
          "408:       exit -1",
          "",
          "[Added Lines]",
          "317: # Configuration verification: Check that each entry in the list of configs",
          "318: # specified for each platforms exists.",
          "319: #",
          "320: foreach {key value} [array get ::Platforms] {",
          "321:   foreach {v t} $value {",
          "322:     if {0==[info exists ::Configs($v)]} {",
          "323:       puts stderr \"No such configuration: \\\"$v\\\"\"",
          "324:       exit -1",
          "325:     }",
          "326:   }",
          "327: }",
          "329: proc usage {} {",
          "330:   global argv0",
          "331:   puts stderr [subst $::USAGE]",
          "332:   exit 1",
          "333: }",
          "335: proc is_prefix {p str min} {",
          "336:   set n [string length $p]",
          "337:   if {$n<$min} { return 0 }",
          "338:   if {[string range $str 0 [expr $n-1]]!=$p} { return 0 }",
          "339:   return 1",
          "340: }",
          "342: proc main_configurations {} {",
          "343:   foreach k [lsort [array names ::Configs]] {",
          "344:     puts $k",
          "345:   }",
          "346: }",
          "348: proc main_platforms {} {",
          "349:   foreach k [lsort [array names ::Platforms]] {",
          "350:     puts \"\\\"$k\\\"\"",
          "351:   }",
          "352: }",
          "354: proc main_script {args} {",
          "355:   set bMsvc 0",
          "356:   set nArg [llength $args]",
          "357:   if {$nArg==3} {",
          "358:     if {![is_prefix [lindex $args 0] -msvc 2]} usage",
          "359:     set bMsvc 1",
          "360:   } elseif {$nArg<2 || $nArg>3} {",
          "361:     usage",
          "362:   }",
          "363:   set config [lindex $args end-1]",
          "364:   set target [lindex $args end]",
          "366:   set opts       [list]                         ;# OPTS value",
          "367:   set cflags     [expr {$bMsvc ? \"-Zi\" : \"-g\"}] ;# CFLAGS value",
          "368:   set makeOpts   [list]                         ;# Extra args for [make]",
          "369:   set configOpts [list]                         ;# Extra args for [configure]",
          "371:   if {$::tcl_platform(platform)==\"windows\"} {",
          "372:     lappend opts -DSQLITE_OS_WIN=1",
          "373:   } else {",
          "374:     lappend opts -DSQLITE_OS_UNIX=1",
          "375:   }",
          "377:   # Figure out if this is a synthetic ndebug or debug configuration.",
          "378:   #",
          "379:   set bRemoveDebug 0",
          "380:   if {[string match *-ndebug $config]} {",
          "381:     set bRemoveDebug 1",
          "382:     set config [string range $config 0 end-7]",
          "383:   }",
          "384:   if {[string match *-debug $config]} {",
          "385:     lappend opts -DSQLITE_DEBUG",
          "386:     lappend opts -DSQLITE_EXTRA_IFNULLROW",
          "387:     set config [string range $config 0 end-6]",
          "388:   }",
          "390:   # Ensure that the named configuration exists.",
          "391:   #",
          "392:   if {![info exists ::Configs($config)]} {",
          "393:     puts stderr \"No such config: $config\"",
          "394:     exit 1",
          "395:   }",
          "397:   # Loop through the parameters of the nominated configuration, updating",
          "398:   # $opts, $cflags, $makeOpts and $configOpts along the way. Rules are as",
          "399:   # follows:",
          "400:   #",
          "401:   #   1. If $bRemoveDebug is set and the parameter is -DSQLITE_DEBUG or",
          "402:   #      -DSQLITE_DEBUG=1, discard it.",
          "403:   #",
          "404:   #   2. If the parameter begins with \"-D\", add it to $opts.",
          "405:   #",
          "406:   #   3. If the parameter begins with \"--\" add it to $configOpts. Unless",
          "407:   #      this command is preparing a script for MSVC - then add an",
          "408:   #      equivalent to $makeOpts or $opts.",
          "409:   #",
          "410:   #   4. If the parameter begins with \"-\" add it to $cflags. If in MSVC",
          "411:   #      mode and the parameter is an -O<integer> option, instead add",
          "412:   #      an OPTIMIZATIONS=<integer> switch to $makeOpts.",
          "414:   #   5. If none of the above apply, add the parameter to $makeOpts",
          "415:   #",
          "416:   foreach param $::Configs($config) {",
          "417:     if {$bRemoveDebug} {",
          "418:       if {$param==\"-DSQLITE_DEBUG\" || $param==\"-DSQLITE_DEBUG=1\"",
          "419:        || $param==\"-DSQLITE_MEMDEBUG\" || $param==\"-DSQLITE_MEMDEBUG=1\"",
          "420:       } {",
          "421:         continue",
          "422:       }",
          "423:     }",
          "425:     if {[string range $param 0 1]==\"-D\"} {",
          "426:       lappend opts $param",
          "430:     if {[string range $param 0 1]==\"--\"} {",
          "431:       if {$bMsvc} {",
          "432:         switch -- $param {",
          "433:           --disable-amalgamation {",
          "434:             lappend makeOpts USE_AMALGAMATION=0",
          "435:           }",
          "436:           --disable-shared {",
          "437:             lappend makeOpts USE_CRT_DLL=0 DYNAMIC_SHELL=0",
          "438:           }",
          "439:           --enable-fts5 {",
          "440:             lappend opts -DSQLITE_ENABLE_FTS5",
          "441:           }",
          "442:           --enable-json1 {",
          "443:             lappend opts -DSQLITE_ENABLE_JSON1",
          "444:           }",
          "445:           --enable-shared {",
          "446:             lappend makeOpts USE_CRT_DLL=1 DYNAMIC_SHELL=1",
          "447:           }",
          "448:           --enable-session {",
          "449:             lappend opts -DSQLITE_ENABLE_PREUPDATE_HOOK",
          "450:             lappend opts -DSQLITE_ENABLE_SESSION",
          "451:           }",
          "452:           default {",
          "453:             error \"Cannot translate $param for MSVC\"",
          "454:           }",
          "456:       } else {",
          "457:         lappend configOpts $param",
          "460:       continue",
          "461:     }",
          "463:     if {[string range $param 0 0]==\"-\"} {",
          "464:       if {$bMsvc && [regexp -- {^-O(\\d+)$} $param -> level]} {",
          "465:         lappend makeOpts OPTIMIZATIONS=$level",
          "466:       } else {",
          "467:         lappend cflags $param",
          "469:       continue",
          "472:     lappend makeOpts $param",
          "473:   }",
          "475:   # Some configurations specify -DHAVE_USLEEP=0. For all others, add",
          "476:   # -DHAVE_USLEEP=1.",
          "478:   if {[lsearch $opts \"-DHAVE_USLEEP=0\"]<0} {",
          "482:   if {$bMsvc==0} {",
          "483:     puts {set -e}",
          "484:     puts {}",
          "485:     puts {if [ \"$#\" -ne 1 ] ; then}",
          "486:     puts {  echo \"Usage: $0 <sqlite-src-dir>\" }",
          "487:     puts {  exit -1 }",
          "488:     puts {fi }",
          "489:     puts {SRCDIR=$1}",
          "490:     puts {}",
          "491:     puts \"TCL=\\\"[::tcl::pkgconfig get libdir,install]\\\"\"",
          "493:     puts \"\\$SRCDIR/configure --with-tcl=\\$TCL $configOpts\"",
          "494:     puts {}",
          "495:     puts {OPTS=\"      -DSQLITE_NO_SYNC=1\"}",
          "496:     foreach o $opts {",
          "497:       puts \"OPTS=\\\"\\$OPTS $o\\\"\"",
          "498:     }",
          "499:     puts {}",
          "500:     puts \"CFLAGS=\\\"$cflags\\\"\"",
          "501:     puts {}",
          "502:     puts \"make $target \\\"CFLAGS=\\$CFLAGS\\\" \\\"OPTS=\\$OPTS\\\" $makeOpts\"",
          "503:   } else {",
          "505:     puts {set SRCDIR=%1}",
          "506:     set makecmd    \"nmake /f %SRCDIR%\\\\Makefile.msc TOP=%SRCDIR% $target \"",
          "507:     append makecmd \"\\\"CFLAGS=$cflags\\\" \\\"OPTS=$opts\\\" $makeOpts\"",
          "509:     puts $makecmd",
          "510:   }",
          "513: proc main_tests {args} {",
          "514:   set bNodebug 0",
          "515:   set nArg [llength $args]",
          "516:   if {$nArg==2} {",
          "517:     if {[is_prefix [lindex $args 0] -nodebug 2]} {",
          "518:       set bNodebug 1",
          "519:     } elseif {[is_prefix [lindex $args 0] -debug 2]} {",
          "520:       set bNodebug 0",
          "521:     } else usage",
          "522:   } elseif {$nArg==0 || $nArg>2} {",
          "523:     usage",
          "524:   }",
          "525:   set p [lindex $args end]",
          "526:   if {![info exists ::Platforms($p)]} {",
          "527:     puts stderr \"No such platform: $p\"",
          "528:     exit 1",
          "529:   }",
          "531:   foreach {config target} $::Platforms($p) {",
          "532:     puts \"$config \\\"$target\\\"\"",
          "533:     if {$bNodebug==0} {",
          "534:       if {$target!=\"checksymbols\" && $target!=\"valgrindtest\"",
          "535:        && $target!=\"fuzzoomtest\"",
          "536:       } {",
          "537:         set iHas [string first SQLITE_DEBUG $::Configs($config)]",
          "538:         if {$iHas>=0} {",
          "539:           puts \"$config-ndebug \\\"test\\\"\"",
          "540:         } else {",
          "541:           puts \"$config-debug \\\"test\\\"\"",
          "542:         }",
          "543:       }",
          "548: if {[llength $argv]==0} { usage }",
          "549: set cmd [lindex $argv 0]",
          "550: set n [expr [llength $argv]-1]",
          "551: if {[string match ${cmd}* configurations] && $n==0} {",
          "552:   main_configurations",
          "553: } elseif {[string match ${cmd}* script]} {",
          "554:   main_script {*}[lrange $argv 1 end]",
          "555: } elseif {[string match ${cmd}* platforms] && $n==0} {",
          "556:   main_platforms",
          "557: } elseif {[string match ${cmd}* tests]} {",
          "558:   main_tests {*}[lrange $argv 1 end]",
          "559: } else {",
          "560:   usage",
          "561: }",
          "",
          "---------------"
        ],
        "test/wapptest.tcl||test/wapptest.tcl": [
          "File: test/wapptest.tcl -> test/wapptest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: # package required wapp",
          "6: source [file join [file dirname [info script]] wapp.tcl]",
          "12: # Variables set by the \"control\" form:",
          "13: #",
          "14: #   G(platform) - User selected platform.",
          "",
          "[Removed Lines]",
          "8: # Read the data from the releasetest_data.tcl script.",
          "9: #",
          "10: source [file join [file dirname [info script]] releasetest_data.tcl]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:   wapptest_output [string repeat * 70]",
          "70: }",
          "72: # Generate the text for the box at the top of the UI. The current SQLite",
          "73: # version, according to fossil, along with a warning if there are",
          "74: # uncommitted changes in the checkout.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68: proc releasetest_data {args} {",
          "69:   global G",
          "70:   set rtd [file join $G(srcdir) test releasetest_data.tcl]",
          "71:   set fd [open \"|[info nameofexecutable] $rtd $args\" r+]",
          "72:   set ret [read $fd]",
          "73:   close $fd",
          "74:   return $ret",
          "75: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "108:   global G",
          "109:   if { $G(state)==\"config\" } {",
          "110:     set G(test_array) [list]",
          "113:       # If using MSVC, do not run sanitize or valgrind tests. Or the",
          "114:       # checksymbols test.",
          "",
          "[Removed Lines]",
          "111:     foreach {config target} $::Platforms($G(platform)) {",
          "",
          "[Added Lines]",
          "116:     set debug \"-debug\"",
          "117:     if {$G(debug)==0} { set debug \"-nodebug\"}",
          "118:     foreach {config target} [releasetest_data tests $debug $G(platform)] {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "136:       }",
          "138:       lappend G(test_array) [dict create config $config target $target]",
          "155:     }",
          "156:   }",
          "157: }",
          "",
          "[Removed Lines]",
          "140:       set exclude [list checksymbols valgrindtest fuzzoomtest]",
          "141:       if {$G(debug) && !($target in $exclude)} {",
          "142:         set debug_idx [lsearch -glob $::Configs($config) -DSQLITE_DEBUG*]",
          "143:         set xtarget $target",
          "144:         regsub -all {fulltest[a-z]*} $xtarget test xtarget",
          "145:         if {$debug_idx<0} {",
          "146:           lappend G(test_array) [",
          "147:             dict create config $config-(Debug) target $xtarget",
          "148:           ]",
          "149:         } else {",
          "150:           lappend G(test_array) [",
          "151:             dict create config $config-(NDebug) target $xtarget",
          "152:           ]",
          "153:         }",
          "154:       }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "322: #",
          "323: proc wapptest_slave_script {} {",
          "324:   global G",
          "348:   }",
          "352:   set res",
          "353: }",
          "356: # Launch a slave process to run a test.",
          "357: #",
          "361:   global G",
          "363:   catch { file mkdir $dir } msg",
          "",
          "[Removed Lines]",
          "325:   set res {",
          "326:     proc readfile {filename} {",
          "327:       set fd [open $filename]",
          "328:       set data [read $fd]",
          "329:       close $fd",
          "330:       return $data",
          "331:     }",
          "332:   }",
          "334:   if {$G(msvc)==0} {",
          "335:     append res {",
          "336:       set cfg  [readfile wapptest_configure.sh]",
          "337:       set rc [catch { exec {*}$cfg >& test.log } msg]",
          "338:       if {$rc==0} {",
          "339:         set make [readfile wapptest_make.sh]",
          "340:         set rc [catch { exec {*}$make >>& test.log }]",
          "341:       }",
          "342:     }",
          "343:   } else {",
          "344:     append res {",
          "345:       set make [readfile wapptest_make.sh]",
          "346:       set rc [catch { exec {*}$make >>& test.log }]",
          "347:     }",
          "350:   append res { exit $rc }",
          "358: proc slave_launch {",
          "359:   name wtcl title dir configOpts testtarget makeOpts cflags opts",
          "360: } {",
          "",
          "[Added Lines]",
          "316:   if {$G(msvc)==0} {",
          "317:     set dir [file join .. $G(srcdir)]",
          "318:     set res [subst -nocommands {",
          "319:       set rc [catch \"exec sh wapptest_cmd.sh {$dir} >>& test.log\" ]",
          "320:       exit [set rc]",
          "321:     }]",
          "322:   } else {",
          "323:     set dir [file nativename [file normalize $G(srcdir)]]",
          "324:     set dir [string map [list \"\\\\\" \"\\\\\\\\\"] $dir]",
          "325:     set res [subst -nocommands {",
          "326:       set rc [catch \"exec wapptest_cmd.bat {$dir} >>& test.log\" ]",
          "327:       exit [set rc]",
          "328:     }]",
          "337: proc slave_launch {name target dir} {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "366:   }",
          "367:   set G(test.$name.dir) $dir",
          "371:   #",
          "375:   }",
          "376:   close $fd1",
          "391:   # Write the wapptest_run.tcl script to the test directory. To run the",
          "392:   # commands in the other two files.",
          "393:   #",
          "",
          "[Removed Lines]",
          "369:   # Write the configure command to wapptest_configure.sh. This file",
          "370:   # is empty if using MSVC - MSVC does not use configure.",
          "372:   set fd1 [open [file join $dir wapptest_configure.sh] w]",
          "373:   if {$G(msvc)==0} {",
          "374:     puts $fd1 \"[file join .. $G(srcdir) configure] $wtcl $configOpts\"",
          "378:   # Write the make command to wapptest_make.sh. Using nmake for MSVC and",
          "379:   # make for all other systems.",
          "380:   #",
          "381:   set makecmd \"make\"",
          "382:   if {$G(msvc)} {",
          "383:     set nativedir [file nativename $G(srcdir)]",
          "384:     set nativedir [string map [list \"\\\\\" \"\\\\\\\\\"] $nativedir]",
          "385:     set makecmd \"nmake /f [file join $nativedir Makefile.msc] TOP=$nativedir\"",
          "386:   }",
          "387:   set fd2 [open [file join $dir wapptest_make.sh] w]",
          "388:   puts $fd2 \"$makecmd $makeOpts $testtarget \\\"CFLAGS=$cflags\\\" \\\"OPTS=$opts\\\"\"",
          "389:   close $fd2",
          "",
          "[Added Lines]",
          "346:   # Write the test command to wapptest_cmd.sh|bat.",
          "348:   set ext sh",
          "349:   if {$G(msvc)} { set ext bat }",
          "350:   set fd1 [open [file join $dir wapptest_cmd.$ext] w]",
          "351:   if {$G(msvc)} {",
          "352:     puts $fd1 [releasetest_data script -msvc $name $target]",
          "353:   } else {",
          "354:     puts $fd1 [releasetest_data script $name $target]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "448:       } {",
          "450:         set target [dict get $j target]",
          "451:         set G(test.$name.start) [clock seconds]",
          "475:         incr nLaunch -1",
          "476:       }",
          "477:     }",
          "",
          "[Removed Lines]",
          "452:         set wtcl \"\"",
          "453:         if {$G(tcl)!=\"\"} { set wtcl \"--with-tcl=$G(tcl)\" }",
          "455:         # If this configuration is named <name>-(Debug) or <name>-(NDebug),",
          "456:         # then add or remove the SQLITE_DEBUG option from the base",
          "457:         # configuration before running the test.",
          "458:         if {[regexp -- {(.*)-(\\(.*\\))} $name -> head tail]} {",
          "459:           set opts $::Configs($head)",
          "460:           if {$tail==\"(Debug)\"} {",
          "461:             append opts \" -DSQLITE_DEBUG=1 -DSQLITE_EXTRA_IFNULLROW=1\"",
          "462:           } else {",
          "463:             regsub { *-DSQLITE_MEMDEBUG[^ ]* *} $opts { } opts",
          "464:             regsub { *-DSQLITE_DEBUG[^ ]* *} $opts { } opts",
          "465:           }",
          "466:         } else {",
          "467:           set opts $::Configs($name)",
          "468:         }",
          "470:         set L [make_test_suite $G(msvc) $wtcl $name $target $opts]",
          "471:         set G(test.$name.log) [file join [lindex $L 1] test.log]",
          "472:         slave_launch $name $wtcl {*}$L",
          "474:         set G(test.$name.log) [file join [lindex $L 1] test.log]",
          "",
          "[Added Lines]",
          "418:         set dir [string tolower [string map {\" \" _ \"-\" _} $name]]",
          "420:         set G(test.$name.log) [file join $dir test.log]",
          "422:         slave_launch $name $target $dir",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "517:   }",
          "519:   # Build the \"platform\" select widget.",
          "521:   generate_select_widget Platform control_platform $lOpt $G(platform)",
          "523:   # Build the \"test\" select widget.",
          "",
          "[Removed Lines]",
          "520:   set lOpt [array names ::Platforms]",
          "",
          "[Added Lines]",
          "469:   set lOpt [releasetest_data platforms]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "886:       if {$i==[llength $lTestArg]-1} { wapptest_usage }",
          "887:       incr i",
          "888:       set arg [lindex $lTestArg $i]",
          "890:       if {[lsearch $lPlatform $arg]<0} {",
          "891:         puts stderr \"No such platform: $arg. Platforms are: $lPlatform\"",
          "892:         exit -1",
          "",
          "[Removed Lines]",
          "889:       set lPlatform [array names ::Platforms]",
          "",
          "[Added Lines]",
          "838:       set lPlatform [releasetest_data platforms]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b65e801e5f2123803ae9604c5cd53df7060b9995",
      "candidate_info": {
        "commit_hash": "b65e801e5f2123803ae9604c5cd53df7060b9995",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b65e801e5f2123803ae9604c5cd53df7060b9995",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "New test cases added to test/fuzzdata8.db\n\nFossilOrigin-Name: 049e9926202317f58c54b6351ff120fb69bf821f409909b1a1c5e335c0396707",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4e1b005e8b397a22161a6b89cbd3f17bda70a6e0a86d8abdc61856edf2a74da4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}