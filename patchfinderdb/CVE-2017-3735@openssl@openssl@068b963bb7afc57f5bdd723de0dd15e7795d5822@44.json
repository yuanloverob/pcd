{
  "cve_id": "CVE-2017-3735",
  "cve_desc": "While parsing an IPAddressFamily extension in an X.509 certificate, it is possible to do a one-byte overread. This would result in an incorrect text display of the certificate. This bug has been present since 2006 and is present in all versions of OpenSSL before 1.0.2m and 1.1.0g.",
  "repo": "openssl/openssl",
  "patch_hash": "068b963bb7afc57f5bdd723de0dd15e7795d5822",
  "patch_info": {
    "commit_hash": "068b963bb7afc57f5bdd723de0dd15e7795d5822",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/068b963bb7afc57f5bdd723de0dd15e7795d5822",
    "files": [
      "crypto/x509v3/v3_addr.c"
    ],
    "message": "Avoid out-of-bounds read\n\nFixes CVE 2017-3735\n\nReviewed-by: Kurt Roeckx <kurt@roeckx.be>\n(Merged from https://github.com/openssl/openssl/pull/4276)\n\n(cherry picked from commit b23171744b01e473ebbfd6edad70c1c3825ffbcd)",
    "before_after_code_files": [
      "crypto/x509v3/v3_addr.c||crypto/x509v3/v3_addr.c"
    ]
  },
  "patch_diff": {
    "crypto/x509v3/v3_addr.c||crypto/x509v3/v3_addr.c": [
      "File: crypto/x509v3/v3_addr.c -> crypto/x509v3/v3_addr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "85: unsigned int X509v3_addr_get_afi(const IPAddressFamily *f)",
      "86: {",
      "91: }",
      "",
      "[Removed Lines]",
      "87:     return ((f != NULL &&",
      "88:              f->addressFamily != NULL && f->addressFamily->data != NULL)",
      "89:             ? ((f->addressFamily->data[0] << 8) | (f->addressFamily->data[1]))",
      "90:             : 0);",
      "",
      "[Added Lines]",
      "87:     if (f == NULL",
      "88:             || f->addressFamily == NULL",
      "89:             || f->addressFamily->data == NULL",
      "90:             || f->addressFamily->length < 2)",
      "91:         return 0;",
      "92:     return (f->addressFamily->data[0] << 8) | f->addressFamily->data[1];",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1ec7eff1b2d761592df564d7ee92f65e08da4cd6",
      "candidate_info": {
        "commit_hash": "1ec7eff1b2d761592df564d7ee92f65e08da4cd6",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/1ec7eff1b2d761592df564d7ee92f65e08da4cd6",
        "files": [
          "crypto/lhash/lh_stats.c",
          "crypto/lhash/lhash.c",
          "crypto/lhash/lhash_lcl.h",
          "crypto/objects/o_names.c"
        ],
        "message": "Add a lock around the OBJ_NAME table\n\nVarious initialization functions modify this table, which can cause heap\ncorruption in the absence of external synchronization.\n\nSome stats are modified from OPENSSL_LH_retrieve, where callers aren't\nexpecting to have to take out an exclusive lock. Switch to using atomic\noperations for those stats.\n\nReviewed-by: Matt Caswell <matt@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3525)\n(cherry picked from commit be606c013d31847718ceb5d97c567988a771c2e5)",
        "before_after_code_files": [
          "crypto/lhash/lh_stats.c||crypto/lhash/lh_stats.c",
          "crypto/lhash/lhash.c||crypto/lhash/lhash.c",
          "crypto/lhash/lhash_lcl.h||crypto/lhash/lhash_lcl.h",
          "crypto/objects/o_names.c||crypto/objects/o_names.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/lhash/lh_stats.c||crypto/lhash/lh_stats.c": [
          "File: crypto/lhash/lh_stats.c -> crypto/lhash/lh_stats.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "62: void OPENSSL_LH_stats_bio(const OPENSSL_LHASH *lh, BIO *out)",
          "63: {",
          "64:     BIO_printf(out, \"num_items             = %lu\\n\", lh->num_items);",
          "65:     BIO_printf(out, \"num_nodes             = %u\\n\", lh->num_nodes);",
          "66:     BIO_printf(out, \"num_alloc_nodes       = %u\\n\", lh->num_alloc_nodes);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:     OPENSSL_LHASH *lh_mut = (OPENSSL_LHASH *) lh;",
          "65:     int ret;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:     BIO_printf(out, \"num_contracts         = %lu\\n\", lh->num_contracts);",
          "70:     BIO_printf(out, \"num_contract_reallocs = %lu\\n\",",
          "71:                lh->num_contract_reallocs);",
          "74:     BIO_printf(out, \"num_insert            = %lu\\n\", lh->num_insert);",
          "75:     BIO_printf(out, \"num_replace           = %lu\\n\", lh->num_replace);",
          "76:     BIO_printf(out, \"num_delete            = %lu\\n\", lh->num_delete);",
          "77:     BIO_printf(out, \"num_no_delete         = %lu\\n\", lh->num_no_delete);",
          "81: }",
          "83: void OPENSSL_LH_node_stats_bio(const OPENSSL_LHASH *lh, BIO *out)",
          "",
          "[Removed Lines]",
          "72:     BIO_printf(out, \"num_hash_calls        = %lu\\n\", lh->num_hash_calls);",
          "73:     BIO_printf(out, \"num_comp_calls        = %lu\\n\", lh->num_comp_calls);",
          "78:     BIO_printf(out, \"num_retrieve          = %lu\\n\", lh->num_retrieve);",
          "79:     BIO_printf(out, \"num_retrieve_miss     = %lu\\n\", lh->num_retrieve_miss);",
          "80:     BIO_printf(out, \"num_hash_comps        = %lu\\n\", lh->num_hash_comps);",
          "",
          "[Added Lines]",
          "75:     CRYPTO_atomic_add(&lh_mut->num_hash_calls, 0, &ret,",
          "76:                       lh->retrieve_stats_lock);",
          "77:     BIO_printf(out, \"num_hash_calls        = %d\\n\", ret);",
          "78:     CRYPTO_atomic_add(&lh_mut->num_comp_calls, 0, &ret,",
          "79:                       lh->retrieve_stats_lock);",
          "80:     BIO_printf(out, \"num_comp_calls        = %d\\n\", ret);",
          "85:     CRYPTO_atomic_add(&lh_mut->num_retrieve, 0, &ret, lh->retrieve_stats_lock);",
          "86:     BIO_printf(out, \"num_retrieve          = %d\\n\", ret);",
          "87:     CRYPTO_atomic_add(&lh_mut->num_retrieve_miss, 0, &ret,",
          "88:                       lh->retrieve_stats_lock);",
          "89:     BIO_printf(out, \"num_retrieve_miss     = %d\\n\", ret);",
          "90:     CRYPTO_atomic_add(&lh_mut->num_hash_comps, 0, &ret,",
          "91:                       lh->retrieve_stats_lock);",
          "92:     BIO_printf(out, \"num_hash_comps        = %d\\n\", ret);",
          "",
          "---------------"
        ],
        "crypto/lhash/lhash.c||crypto/lhash/lhash.c": [
          "File: crypto/lhash/lhash.c -> crypto/lhash/lhash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:     OPENSSL_LHASH *ret;",
          "31:     if ((ret = OPENSSL_zalloc(sizeof(*ret))) == NULL)",
          "33:     if ((ret->b = OPENSSL_zalloc(sizeof(*ret->b) * MIN_NODES)) == NULL)",
          "35:     ret->comp = ((c == NULL) ? (OPENSSL_LH_COMPFUNC)strcmp : c);",
          "36:     ret->hash = ((h == NULL) ? (OPENSSL_LH_HASHFUNC)OPENSSL_LH_strhash : h);",
          "37:     ret->num_nodes = MIN_NODES / 2;",
          "",
          "[Removed Lines]",
          "32:         goto err0;",
          "34:         goto err1;",
          "",
          "[Added Lines]",
          "32:         return NULL;",
          "34:         goto err;",
          "35:     if ((ret->retrieve_stats_lock = CRYPTO_THREAD_lock_new()) == NULL)",
          "36:         goto err;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:     ret->down_load = DOWN_LOAD;",
          "42:     return (ret);",
          "45:     OPENSSL_free(ret);",
          "48: }",
          "50: void OPENSSL_LH_free(OPENSSL_LHASH *lh)",
          "",
          "[Removed Lines]",
          "44:  err1:",
          "46:  err0:",
          "47:     return (NULL);",
          "",
          "[Added Lines]",
          "46: err:",
          "47:     OPENSSL_free(ret->b);",
          "49:     return NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63:             n = nn;",
          "64:         }",
          "65:     }",
          "66:     OPENSSL_free(lh->b);",
          "67:     OPENSSL_free(lh);",
          "68: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:     CRYPTO_THREAD_lock_free(lh->retrieve_stats_lock);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "133:     unsigned long hash;",
          "134:     OPENSSL_LH_NODE **rn;",
          "135:     void *ret;",
          "137:     lh->error = 0;",
          "138:     rn = getrn(lh, data, &hash);",
          "140:     if (*rn == NULL) {",
          "143:     } else {",
          "144:         ret = (*rn)->data;",
          "146:     }",
          "148: }",
          "150: static void doall_util_fn(OPENSSL_LHASH *lh, int use_arg,",
          "",
          "[Removed Lines]",
          "141:         lh->num_retrieve_miss++;",
          "142:         return (NULL);",
          "145:         lh->num_retrieve++;",
          "147:     return (ret);",
          "",
          "[Added Lines]",
          "139:     int scratch;",
          "145:         CRYPTO_atomic_add(&lh->num_retrieve_miss, 1, &scratch, lh->retrieve_stats_lock);",
          "146:         return NULL;",
          "149:         CRYPTO_atomic_add(&lh->num_retrieve, 1, &scratch, lh->retrieve_stats_lock);",
          "151:     return ret;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "270:     OPENSSL_LH_NODE **ret, *n1;",
          "271:     unsigned long hash, nn;",
          "272:     OPENSSL_LH_COMPFUNC cf;",
          "274:     hash = (*(lh->hash)) (data);",
          "278:     nn = hash % lh->pmax;",
          "",
          "[Removed Lines]",
          "275:     lh->num_hash_calls++;",
          "",
          "[Added Lines]",
          "277:     int scratch;",
          "280:     CRYPTO_atomic_add(&lh->num_hash_calls, 1, &scratch, lh->retrieve_stats_lock);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "282:     cf = lh->comp;",
          "283:     ret = &(lh->b[(int)nn]);",
          "284:     for (n1 = *ret; n1 != NULL; n1 = n1->next) {",
          "286:         if (n1->hash != hash) {",
          "287:             ret = &(n1->next);",
          "288:             continue;",
          "289:         }",
          "291:         if (cf(n1->data, data) == 0)",
          "292:             break;",
          "293:         ret = &(n1->next);",
          "",
          "[Removed Lines]",
          "285:         lh->num_hash_comps++;",
          "290:         lh->num_comp_calls++;",
          "",
          "[Added Lines]",
          "290:         CRYPTO_atomic_add(&lh->num_hash_comps, 1, &scratch, lh->retrieve_stats_lock);",
          "295:         CRYPTO_atomic_add(&lh->num_comp_calls, 1, &scratch, lh->retrieve_stats_lock);",
          "",
          "---------------"
        ],
        "crypto/lhash/lhash_lcl.h||crypto/lhash/lhash_lcl.h": [
          "File: crypto/lhash/lhash_lcl.h -> crypto/lhash/lhash_lcl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: struct lhash_node_st {",
          "12:     void *data;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: #include <openssl/crypto.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18:     OPENSSL_LH_NODE **b;",
          "19:     OPENSSL_LH_COMPFUNC comp;",
          "20:     OPENSSL_LH_HASHFUNC hash;",
          "21:     unsigned int num_nodes;",
          "22:     unsigned int num_alloc_nodes;",
          "23:     unsigned int p;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27:     CRYPTO_RWLOCK *retrieve_stats_lock;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "29:     unsigned long num_expand_reallocs;",
          "30:     unsigned long num_contracts;",
          "31:     unsigned long num_contract_reallocs;",
          "34:     unsigned long num_insert;",
          "35:     unsigned long num_replace;",
          "36:     unsigned long num_delete;",
          "37:     unsigned long num_no_delete;",
          "41:     int error;",
          "42: };",
          "",
          "[Removed Lines]",
          "32:     unsigned long num_hash_calls;",
          "33:     unsigned long num_comp_calls;",
          "38:     unsigned long num_retrieve;",
          "39:     unsigned long num_retrieve_miss;",
          "40:     unsigned long num_hash_comps;",
          "",
          "[Added Lines]",
          "39:     int num_hash_calls;",
          "40:     int num_comp_calls;",
          "45:     int num_retrieve;",
          "46:     int num_retrieve_miss;",
          "47:     int num_hash_comps;",
          "",
          "---------------"
        ],
        "crypto/objects/o_names.c||crypto/objects/o_names.c": [
          "File: crypto/objects/o_names.c -> crypto/objects/o_names.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include <openssl/objects.h>",
          "17: #include <openssl/safestack.h>",
          "18: #include <openssl/e_os2.h>",
          "19: #include \"obj_lcl.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #include <internal/thread_once.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: static LHASH_OF(OBJ_NAME) *names_lh = NULL;",
          "46: static int names_type_num = OBJ_NAME_TYPE_NUM;",
          "48: struct name_funcs_st {",
          "49:     unsigned long (*hash_func) (const char *name);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: static CRYPTO_RWLOCK *lock = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62: static unsigned long obj_name_hash(const OBJ_NAME *a);",
          "63: static int obj_name_cmp(const OBJ_NAME *a, const OBJ_NAME *b);",
          "66: {",
          "69:     CRYPTO_mem_ctrl(CRYPTO_MEM_CHECK_DISABLE);",
          "70:     names_lh = lh_OBJ_NAME_new(obj_name_hash, obj_name_cmp);",
          "71:     CRYPTO_mem_ctrl(CRYPTO_MEM_CHECK_ENABLE);",
          "73: }",
          "75: int OBJ_NAME_new_index(unsigned long (*hash_func) (const char *),",
          "76:                        int (*cmp_func) (const char *, const char *),",
          "77:                        void (*free_func) (const char *, int, const char *))",
          "78: {",
          "80:     NAME_FUNCS *name_funcs;",
          "82:     if (name_funcs_stack == NULL) {",
          "83:         CRYPTO_mem_ctrl(CRYPTO_MEM_CHECK_DISABLE);",
          "84:         name_funcs_stack = sk_NAME_FUNCS_new_null();",
          "",
          "[Removed Lines]",
          "65: int OBJ_NAME_init(void)",
          "67:     if (names_lh != NULL)",
          "68:         return (1);",
          "72:     return (names_lh != NULL);",
          "79:     int ret, i, push;",
          "",
          "[Added Lines]",
          "67: static CRYPTO_ONCE init = CRYPTO_ONCE_STATIC_INIT;",
          "68: DEFINE_RUN_ONCE_STATIC(o_names_init)",
          "72:     lock = CRYPTO_THREAD_lock_new();",
          "74:     return names_lh != NULL && lock != NULL;",
          "75: }",
          "77: int OBJ_NAME_init(void)",
          "78: {",
          "79:     return RUN_ONCE(&init, o_names_init);",
          "86:     int ret = 0, i, push;",
          "89:     if (!OBJ_NAME_init())",
          "90:         return 0;",
          "92:     CRYPTO_THREAD_write_lock(lock);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "86:     }",
          "87:     if (name_funcs_stack == NULL) {",
          "90:     }",
          "91:     ret = names_type_num;",
          "92:     names_type_num++;",
          "",
          "[Removed Lines]",
          "89:         return (0);",
          "",
          "[Added Lines]",
          "101:         goto out;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "96:         CRYPTO_mem_ctrl(CRYPTO_MEM_CHECK_ENABLE);",
          "97:         if (name_funcs == NULL) {",
          "98:             OBJerr(OBJ_F_OBJ_NAME_NEW_INDEX, ERR_R_MALLOC_FAILURE);",
          "100:         }",
          "101:         name_funcs->hash_func = OPENSSL_LH_strhash;",
          "102:         name_funcs->cmp_func = obj_strcmp;",
          "",
          "[Removed Lines]",
          "99:             return (0);",
          "",
          "[Added Lines]",
          "111:             ret = 0;",
          "112:             goto out;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "108:         if (!push) {",
          "109:             OBJerr(OBJ_F_OBJ_NAME_NEW_INDEX, ERR_R_MALLOC_FAILURE);",
          "110:             OPENSSL_free(name_funcs);",
          "112:         }",
          "113:     }",
          "114:     name_funcs = sk_NAME_FUNCS_value(name_funcs_stack, ret);",
          "",
          "[Removed Lines]",
          "111:             return 0;",
          "",
          "[Added Lines]",
          "124:             ret = 0;",
          "125:             goto out;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "118:         name_funcs->cmp_func = cmp_func;",
          "119:     if (free_func != NULL)",
          "120:         name_funcs->free_func = free_func;",
          "122: }",
          "124: static int obj_name_cmp(const OBJ_NAME *a, const OBJ_NAME *b)",
          "",
          "[Removed Lines]",
          "121:     return (ret);",
          "",
          "[Added Lines]",
          "136: out:",
          "137:     CRYPTO_THREAD_unlock(lock);",
          "138:     return ret;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "134:         } else",
          "135:             ret = strcmp(a->name, b->name);",
          "136:     }",
          "138: }",
          "140: static unsigned long obj_name_hash(const OBJ_NAME *a)",
          "",
          "[Removed Lines]",
          "137:     return (ret);",
          "",
          "[Added Lines]",
          "154:     return ret;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "150:         ret = OPENSSL_LH_strhash(a->name);",
          "151:     }",
          "152:     ret ^= a->type;",
          "154: }",
          "156: const char *OBJ_NAME_get(const char *name, int type)",
          "157: {",
          "158:     OBJ_NAME on, *ret;",
          "159:     int num = 0, alias;",
          "161:     if (name == NULL)",
          "166:     alias = type & OBJ_NAME_ALIAS;",
          "167:     type &= ~OBJ_NAME_ALIAS;",
          "",
          "[Removed Lines]",
          "153:     return (ret);",
          "162:         return (NULL);",
          "163:     if ((names_lh == NULL) && !OBJ_NAME_init())",
          "164:         return (NULL);",
          "",
          "[Added Lines]",
          "170:     return ret;",
          "177:     const char *value = NULL;",
          "180:         return NULL;",
          "181:     if (!OBJ_NAME_init())",
          "182:         return NULL;",
          "183:     CRYPTO_THREAD_read_lock(lock);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "172:     for (;;) {",
          "173:         ret = lh_OBJ_NAME_retrieve(names_lh, &on);",
          "174:         if (ret == NULL)",
          "176:         if ((ret->alias) && !alias) {",
          "177:             if (++num > 10)",
          "179:             on.name = ret->data;",
          "180:         } else {",
          "182:         }",
          "183:     }",
          "184: }",
          "186: int OBJ_NAME_add(const char *name, int type, const char *data)",
          "187: {",
          "188:     OBJ_NAME *onp, *ret;",
          "194:     alias = type & OBJ_NAME_ALIAS;",
          "195:     type &= ~OBJ_NAME_ALIAS;",
          "",
          "[Removed Lines]",
          "175:             return (NULL);",
          "178:                 return (NULL);",
          "181:             return (ret->data);",
          "189:     int alias;",
          "191:     if ((names_lh == NULL) && !OBJ_NAME_init())",
          "192:         return (0);",
          "",
          "[Added Lines]",
          "194:             break;",
          "197:                 break;",
          "200:             value = ret->data;",
          "201:             break;",
          "205:     CRYPTO_THREAD_unlock(lock);",
          "206:     return value;",
          "212:     int alias, ok = 0;",
          "214:     if (!OBJ_NAME_init())",
          "215:         return 0;",
          "217:     CRYPTO_THREAD_write_lock(lock);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "197:     onp = OPENSSL_malloc(sizeof(*onp));",
          "198:     if (onp == NULL) {",
          "201:     }",
          "203:     onp->name = name;",
          "",
          "[Removed Lines]",
          "200:         return 0;",
          "",
          "[Added Lines]",
          "225:         goto unlock;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "223:         if (lh_OBJ_NAME_error(names_lh)) {",
          "225:             OPENSSL_free(onp);",
          "227:         }",
          "228:     }",
          "230: }",
          "232: int OBJ_NAME_remove(const char *name, int type)",
          "233: {",
          "234:     OBJ_NAME on, *ret;",
          "239:     type &= ~OBJ_NAME_ALIAS;",
          "240:     on.name = name;",
          "",
          "[Removed Lines]",
          "226:             return 0;",
          "229:     return 1;",
          "236:     if (names_lh == NULL)",
          "237:         return (0);",
          "",
          "[Added Lines]",
          "251:             goto unlock;",
          "255:     ok = 1;",
          "257: unlock:",
          "258:     CRYPTO_THREAD_unlock(lock);",
          "259:     return ok;",
          "265:     int ok = 0;",
          "267:     if (!OBJ_NAME_init())",
          "268:         return 0;",
          "270:     CRYPTO_THREAD_write_lock(lock);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "253:                                                       ret->data);",
          "254:         }",
          "255:         OPENSSL_free(ret);",
          "259: }",
          "261: typedef struct {",
          "",
          "[Removed Lines]",
          "256:         return (1);",
          "257:     } else",
          "258:         return (0);",
          "",
          "[Added Lines]",
          "289:         ok = 1;",
          "290:     }",
          "292:     CRYPTO_THREAD_unlock(lock);",
          "293:     return ok;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "363:     if (type < 0) {",
          "364:         lh_OBJ_NAME_free(names_lh);",
          "365:         sk_NAME_FUNCS_pop_free(name_funcs_stack, name_funcs_free);",
          "366:         names_lh = NULL;",
          "367:         name_funcs_stack = NULL;",
          "368:     } else",
          "369:         lh_OBJ_NAME_set_down_load(names_lh, down_load);",
          "370: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "401:         CRYPTO_THREAD_lock_free(lock);",
          "404:         lock = NULL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ad74ff046bea5b1f77ff7425598802b91924652d",
      "candidate_info": {
        "commit_hash": "ad74ff046bea5b1f77ff7425598802b91924652d",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/ad74ff046bea5b1f77ff7425598802b91924652d",
        "files": [
          "ssl/ssl_init.c"
        ],
        "message": "In OPENSSL_init_ssl(), run the base ssl init before OPENSSL_init_crypto()\n\nIF OPENSSL_init_ssl() is called with the option flag\nOPENSSL_INIT_LOAD_CONFIG, any SSL config will be handled wrongly\n(i.e. there will be an attempt to load libssl_conf.so or whatever\ncorresponds to that on non-Unix platforms).  Therefore, at least\nSSL_add_ssl_module() MUST be called before OPENSSL_init_crypto() is\ncalled.  The base ssl init does that, plus adds all kinds of ciphers\nand digests, which is harmless.\n\nFixes #4788\n\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/4792)\n\n(cherry picked from commit 0a90a6831e02e00d9043ada635421cfd3da5ffe2)",
        "before_after_code_files": [
          "ssl/ssl_init.c||ssl/ssl_init.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/ssl_init.c||ssl/ssl_init.c": [
          "File: ssl/ssl_init.c -> ssl/ssl_init.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:         return 0;",
          "192:     }",
          "196:         return 0;",
          "199:         return 0;",
          "201:     if ((opts & OPENSSL_INIT_NO_LOAD_SSL_STRINGS)",
          "",
          "[Removed Lines]",
          "194:     if (!OPENSSL_init_crypto(opts | OPENSSL_INIT_ADD_ALL_CIPHERS",
          "195:                              | OPENSSL_INIT_ADD_ALL_DIGESTS, settings))",
          "198:     if (!RUN_ONCE(&ssl_base, ossl_init_ssl_base))",
          "",
          "[Added Lines]",
          "194:     if (!RUN_ONCE(&ssl_base, ossl_init_ssl_base))",
          "197:     if (!OPENSSL_init_crypto(opts | OPENSSL_INIT_ADD_ALL_CIPHERS",
          "198:                              | OPENSSL_INIT_ADD_ALL_DIGESTS, settings))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ea4e868a3c6872f4944dd5469518f8b10ee3432c",
      "candidate_info": {
        "commit_hash": "ea4e868a3c6872f4944dd5469518f8b10ee3432c",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/ea4e868a3c6872f4944dd5469518f8b10ee3432c",
        "files": [
          "apps/openssl.c"
        ],
        "message": "In apps_startup(), call OPENSSL_init_ssl() rather than OPENSSL_init_crypto()\n\nOtherwise, any command that relies on ssl modules may fail, because\nSSL_add_ssl_module() will be called after the config file has already\nbeen loaded.\n\nFixes #4788\n\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/4792)\n\n(cherry picked from commit 0488c0bbbe87eee3a800797b91350c653e9f1711)",
        "before_after_code_files": [
          "apps/openssl.c||apps/openssl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/openssl.c||apps/openssl.c": [
          "File: apps/openssl.c -> apps/openssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: #endif",
          "74:         return 0;",
          "76: #ifndef OPENSSL_NO_UI",
          "",
          "[Removed Lines]",
          "72:     if (!OPENSSL_init_crypto(OPENSSL_INIT_ENGINE_ALL_BUILTIN",
          "73:                              | OPENSSL_INIT_LOAD_CONFIG, NULL))",
          "",
          "[Added Lines]",
          "72:     if (!OPENSSL_init_ssl(OPENSSL_INIT_ENGINE_ALL_BUILTIN",
          "73:                           | OPENSSL_INIT_LOAD_CONFIG, NULL))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b9377bd080108beba7231eeb5ea21bb50a20f651",
      "candidate_info": {
        "commit_hash": "b9377bd080108beba7231eeb5ea21bb50a20f651",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/b9377bd080108beba7231eeb5ea21bb50a20f651",
        "files": [
          "doc/crypto/SSL_CTX_set_tlsext_use_srtp.pod",
          "include/openssl/srtp.h"
        ],
        "message": "Add documentation for SRTP functions\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/4205)\n\n(cherry picked from commit 3733ce61a2a0933bf7b04d9a14bfe3ac22bb8a0d)",
        "before_after_code_files": [
          "include/openssl/srtp.h||include/openssl/srtp.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/openssl/srtp.h||include/openssl/srtp.h": [
          "File: include/openssl/srtp.h -> include/openssl/srtp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: # ifndef OPENSSL_NO_SRTP",
          "38: __owur int SSL_CTX_set_tlsext_use_srtp(SSL_CTX *ctx, const char *profiles);",
          "41: __owur STACK_OF(SRTP_PROTECTION_PROFILE) *SSL_get_srtp_profiles(SSL *ssl);",
          "42: __owur SRTP_PROTECTION_PROFILE *SSL_get_selected_srtp_profile(SSL *s);",
          "",
          "[Removed Lines]",
          "39: __owur int SSL_set_tlsext_use_srtp(SSL *ctx, const char *profiles);",
          "",
          "[Added Lines]",
          "39: __owur int SSL_set_tlsext_use_srtp(SSL *ssl, const char *profiles);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "465766c432e3f3af3114199b7b82bc6b41f7cf78",
      "candidate_info": {
        "commit_hash": "465766c432e3f3af3114199b7b82bc6b41f7cf78",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/465766c432e3f3af3114199b7b82bc6b41f7cf78",
        "files": [
          "crypto/aes/asm/aes-s390x.pl"
        ],
        "message": "crypto/aes/asm/aes-s390x.pl: fix $softonly=1 code path.\n\nSigned-off-by: Patrick Steuer <patrick.steuer@de.ibm.com>\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/4501)\n\n(cherry picked from commit 4c5100ce7d66ccff48d6435c1761b5e3281de61f)",
        "before_after_code_files": [
          "crypto/aes/asm/aes-s390x.pl||crypto/aes/asm/aes-s390x.pl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/aes/asm/aes-s390x.pl||crypto/aes/asm/aes-s390x.pl": [
          "File: crypto/aes/asm/aes-s390x.pl -> crypto/aes/asm/aes-s390x.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "1440: .Lctr32_hw_switch:",
          "1441: ___",
          "1443:  larl $s0,OPENSSL_s390xcap_P",
          "1444:  lg $s0,8($s0)",
          "1445:  tmhh $s0,0x0004 # check for message_security-assist-4",
          "",
          "[Removed Lines]",
          "1442: $code.=<<___ if (0); ######### kmctr code was measured to be ~12% slower",
          "",
          "[Added Lines]",
          "1442: $code.=<<___ if (!$softonly && 0);# kmctr code was measured to be ~12% slower",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1488:  br $ra",
          "1489: .align 16",
          "1490: ___",
          "1492: .Lctr32_km_loop:",
          "1493:  la $s2,16($sp)",
          "1494:  lgr $s3,$fp",
          "",
          "[Removed Lines]",
          "1491: $code.=<<___;",
          "",
          "[Added Lines]",
          "1491: $code.=<<___ if (!$softonly);",
          "",
          "---------------"
        ]
      }
    }
  ]
}