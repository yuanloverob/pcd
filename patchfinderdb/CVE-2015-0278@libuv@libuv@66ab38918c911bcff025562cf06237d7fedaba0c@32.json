{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "263da5196786fc50a05dcd5f4a3fbc264afa143e",
      "candidate_info": {
        "commit_hash": "263da5196786fc50a05dcd5f4a3fbc264afa143e",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/263da5196786fc50a05dcd5f4a3fbc264afa143e",
        "files": [
          "include/uv-unix.h",
          "include/uv.h",
          "src/unix/udp.c",
          "src/uv-common.c",
          "src/uv-common.h",
          "src/win/udp.c",
          "test/benchmark-udp-pummel.c",
          "test/echo-server.c",
          "test/test-getsockname.c",
          "test/test-ref.c",
          "test/test-udp-dgram-too-big.c",
          "test/test-udp-ipv6.c",
          "test/test-udp-multicast-join.c",
          "test/test-udp-multicast-ttl.c",
          "test/test-udp-open.c",
          "test/test-udp-send-and-recv.c"
        ],
        "message": "include: uv_udp_send{6} now takes sockaddr_in*\n\nPassing or returning structs as values makes life hard for people that\nwork with libuv through a foreign function interface. Switch to a\npointer-based approach.\n\nFixes #684.",
        "before_after_code_files": [
          "include/uv-unix.h||include/uv-unix.h",
          "include/uv.h||include/uv.h",
          "src/unix/udp.c||src/unix/udp.c",
          "src/uv-common.c||src/uv-common.c",
          "src/uv-common.h||src/uv-common.h",
          "src/win/udp.c||src/win/udp.c",
          "test/benchmark-udp-pummel.c||test/benchmark-udp-pummel.c",
          "test/echo-server.c||test/echo-server.c",
          "test/test-getsockname.c||test/test-getsockname.c",
          "test/test-ref.c||test/test-ref.c",
          "test/test-udp-dgram-too-big.c||test/test-udp-dgram-too-big.c",
          "test/test-udp-ipv6.c||test/test-udp-ipv6.c",
          "test/test-udp-multicast-join.c||test/test-udp-multicast-join.c",
          "test/test-udp-multicast-ttl.c||test/test-udp-multicast-ttl.c",
          "test/test-udp-open.c||test/test-udp-open.c",
          "test/test-udp-send-and-recv.c||test/test-udp-send-and-recv.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv-unix.h||include/uv-unix.h": [
          "File: include/uv-unix.h -> include/uv-unix.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "213: #define UV_UDP_SEND_PRIVATE_FIELDS                                            \\",
          "214:   void* queue[2];                                                             \\",
          "215:   struct sockaddr_in6 addr;                                                   \\",
          "217:   uv_buf_t* bufs;                                                             \\",
          "218:   ssize_t status;                                                             \\",
          "219:   uv_udp_send_cb send_cb;                                                     \\",
          "",
          "[Removed Lines]",
          "216:   int bufcnt;                                                                 \\",
          "",
          "[Added Lines]",
          "216:   unsigned int nbufs;                                                         \\",
          "",
          "---------------"
        ],
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1001: UV_EXTERN int uv_udp_send(uv_udp_send_t* req, uv_udp_t* handle,",
          "1002:     uv_buf_t bufs[], int bufcnt, struct sockaddr_in addr,",
          "1003:     uv_udp_send_cb send_cb);",
          "",
          "[Added Lines]",
          "1001: UV_EXTERN int uv_udp_send(uv_udp_send_t* req,",
          "1002:                           uv_udp_t* handle,",
          "1003:                           const uv_buf_t bufs[],",
          "1004:                           unsigned int nbufs,",
          "1005:                           const struct sockaddr_in* addr,",
          "1006:                           uv_udp_send_cb send_cb);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1020: UV_EXTERN int uv_udp_send6(uv_udp_send_t* req, uv_udp_t* handle,",
          "1021:     uv_buf_t bufs[], int bufcnt, struct sockaddr_in6 addr,",
          "1022:     uv_udp_send_cb send_cb);",
          "",
          "[Added Lines]",
          "1023: UV_EXTERN int uv_udp_send6(uv_udp_send_t* req,",
          "1024:                            uv_udp_t* handle,",
          "1025:                            const uv_buf_t bufs[],",
          "1026:                            unsigned int nbufs,",
          "1027:                            const struct sockaddr_in6* addr,",
          "1028:                            uv_udp_send_cb send_cb);",
          "",
          "---------------"
        ],
        "src/unix/udp.c||src/unix/udp.c": [
          "File: src/unix/udp.c -> src/unix/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: static void uv__udp_recvmsg(uv_loop_t* loop, uv__io_t* w, unsigned int revents);",
          "36: static void uv__udp_sendmsg(uv_loop_t* loop, uv__io_t* w, unsigned int revents);",
          "37: static int uv__udp_maybe_deferred_bind(uv_udp_t* handle, int domain);",
          "47: void uv__udp_close(uv_udp_t* handle) {",
          "",
          "[Removed Lines]",
          "38: static int uv__send(uv_udp_send_t* req,",
          "39:                     uv_udp_t* handle,",
          "40:                     uv_buf_t bufs[],",
          "41:                     int bufcnt,",
          "42:                     struct sockaddr* addr,",
          "43:                     socklen_t addrlen,",
          "44:                     uv_udp_send_cb send_cb);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:     h.msg_name = &req->addr;",
          "101:     h.msg_namelen = (req->addr.sin6_family == AF_INET6 ?",
          "102:       sizeof(struct sockaddr_in6) : sizeof(struct sockaddr_in));",
          "106:     do {",
          "107:       size = sendmsg(handle->io_watcher.fd, &h, 0);",
          "",
          "[Removed Lines]",
          "103:     h.msg_iov = (struct iovec*)req->bufs;",
          "104:     h.msg_iovlen = req->bufcnt;",
          "",
          "[Added Lines]",
          "96:     h.msg_iov = (struct iovec*) req->bufs;",
          "97:     h.msg_iovlen = req->nbufs;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "117:     req->status = (size == -1 ? -errno : size);",
          "",
          "[Removed Lines]",
          "119: #ifndef NDEBUG",
          "121:     if (size != -1) {",
          "122:       ssize_t nbytes;",
          "123:       int i;",
          "125:       for (nbytes = i = 0; i < req->bufcnt; i++)",
          "126:         nbytes += req->bufs[i].len;",
          "128:       assert(size == nbytes);",
          "129:     }",
          "130: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "400: }",
          "410:   int err;",
          "414:   err = uv__udp_maybe_deferred_bind(handle, addr->sa_family);",
          "415:   if (err)",
          "",
          "[Removed Lines]",
          "403: static int uv__send(uv_udp_send_t* req,",
          "404:                     uv_udp_t* handle,",
          "405:                     uv_buf_t bufs[],",
          "406:                     int bufcnt,",
          "407:                     struct sockaddr* addr,",
          "408:                     socklen_t addrlen,",
          "409:                     uv_udp_send_cb send_cb) {",
          "412:   assert(bufcnt > 0);",
          "",
          "[Added Lines]",
          "383: int uv__udp_send(uv_udp_send_t* req,",
          "384:                  uv_udp_t* handle,",
          "385:                  const uv_buf_t bufs[],",
          "386:                  unsigned int nbufs,",
          "387:                  const struct sockaddr* addr,",
          "388:                  unsigned int addrlen,",
          "389:                  uv_udp_send_cb send_cb) {",
          "392:   assert(nbufs > 0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "421:   memcpy(&req->addr, addr, addrlen);",
          "422:   req->send_cb = send_cb;",
          "423:   req->handle = handle;",
          "431:   if (req->bufs == NULL)",
          "432:     return -ENOMEM;",
          "435:   QUEUE_INSERT_TAIL(&handle->write_queue, &req->queue);",
          "436:   uv__io_start(handle->loop, &handle->io_watcher, UV__POLLOUT);",
          "437:   uv__handle_start(handle);",
          "",
          "[Removed Lines]",
          "424:   req->bufcnt = bufcnt;",
          "426:   if (bufcnt <= (int) ARRAY_SIZE(req->bufsml))",
          "427:     req->bufs = req->bufsml;",
          "428:   else",
          "429:     req->bufs = malloc(bufcnt * sizeof(*bufs));",
          "434:   memcpy(req->bufs, bufs, bufcnt * sizeof(bufs[0]));",
          "",
          "[Added Lines]",
          "404:   req->nbufs = nbufs;",
          "406:   req->bufs = req->bufsml;",
          "407:   if (nbufs > ARRAY_SIZE(req->bufsml))",
          "408:     req->bufs = malloc(nbufs * sizeof(bufs[0]));",
          "413:   memcpy(req->bufs, bufs, nbufs * sizeof(bufs[0]));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "575: }",
          "610: int uv__udp_recv_start(uv_udp_t* handle,",
          "611:                        uv_alloc_cb alloc_cb,",
          "612:                        uv_udp_recv_cb recv_cb) {",
          "",
          "[Removed Lines]",
          "578: int uv__udp_send(uv_udp_send_t* req,",
          "579:                  uv_udp_t* handle,",
          "580:                  uv_buf_t bufs[],",
          "581:                  int bufcnt,",
          "582:                  struct sockaddr_in addr,",
          "583:                  uv_udp_send_cb send_cb) {",
          "584:   return uv__send(req,",
          "585:                   handle,",
          "586:                   bufs,",
          "587:                   bufcnt,",
          "588:                   (struct sockaddr*)&addr,",
          "589:                   sizeof addr,",
          "590:                   send_cb);",
          "591: }",
          "594: int uv__udp_send6(uv_udp_send_t* req,",
          "595:                   uv_udp_t* handle,",
          "596:                   uv_buf_t bufs[],",
          "597:                   int bufcnt,",
          "598:                   struct sockaddr_in6 addr,",
          "599:                   uv_udp_send_cb send_cb) {",
          "600:   return uv__send(req,",
          "601:                   handle,",
          "602:                   bufs,",
          "603:                   bufcnt,",
          "604:                   (struct sockaddr*)&addr,",
          "605:                   sizeof addr,",
          "606:                   send_cb);",
          "607: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/uv-common.c||src/uv-common.c": [
          "File: src/uv-common.c -> src/uv-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "259: int uv_udp_send(uv_udp_send_t* req,",
          "260:                 uv_udp_t* handle,",
          "264:                 uv_udp_send_cb send_cb) {",
          "269: }",
          "272: int uv_udp_send6(uv_udp_send_t* req,",
          "273:                  uv_udp_t* handle,",
          "277:                  uv_udp_send_cb send_cb) {",
          "282: }",
          "",
          "[Removed Lines]",
          "261:                 uv_buf_t bufs[],",
          "262:                 int bufcnt,",
          "263:                 struct sockaddr_in addr,",
          "265:   if (handle->type != UV_UDP || addr.sin_family != AF_INET)",
          "266:     return UV_EINVAL;",
          "267:   else",
          "268:     return uv__udp_send(req, handle, bufs, bufcnt, addr, send_cb);",
          "274:                  uv_buf_t bufs[],",
          "275:                  int bufcnt,",
          "276:                  struct sockaddr_in6 addr,",
          "278:   if (handle->type != UV_UDP || addr.sin6_family != AF_INET6)",
          "279:     return UV_EINVAL;",
          "280:   else",
          "281:     return uv__udp_send6(req, handle, bufs, bufcnt, addr, send_cb);",
          "",
          "[Added Lines]",
          "261:                 const uv_buf_t bufs[],",
          "262:                 unsigned int nbufs,",
          "263:                 const struct sockaddr_in* addr,",
          "265:   if (handle->type == UV_UDP && addr->sin_family == AF_INET) {",
          "266:     return uv__udp_send(req,",
          "267:                         handle,",
          "268:                         bufs,",
          "269:                         nbufs,",
          "270:                         (const struct sockaddr*) addr,",
          "271:                         sizeof(*addr),",
          "272:                         send_cb);",
          "273:   }",
          "274:   return UV_EINVAL;",
          "280:                  const uv_buf_t bufs[],",
          "281:                  unsigned int nbufs,",
          "282:                  const struct sockaddr_in6* addr,",
          "284:   if (handle->type == UV_UDP && addr->sin6_family == AF_INET6) {",
          "285:     return uv__udp_send(req,",
          "286:                         handle,",
          "287:                         bufs,",
          "288:                         nbufs,",
          "289:                         (const struct sockaddr*) addr,",
          "290:                         sizeof(*addr),",
          "291:                         send_cb);",
          "292:   }",
          "293:   return UV_EINVAL;",
          "",
          "---------------"
        ],
        "src/uv-common.h||src/uv-common.h": [
          "File: src/uv-common.h -> src/uv-common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "77: int uv__udp_send(uv_udp_send_t* req,",
          "78:                  uv_udp_t* handle,",
          "82:                  uv_udp_send_cb send_cb);",
          "91: int uv__udp_recv_start(uv_udp_t* handle, uv_alloc_cb alloccb,",
          "92:                        uv_udp_recv_cb recv_cb);",
          "",
          "[Removed Lines]",
          "79:                  uv_buf_t bufs[],",
          "80:                  int bufcnt,",
          "81:                  struct sockaddr_in addr,",
          "84: int uv__udp_send6(uv_udp_send_t* req,",
          "85:                   uv_udp_t* handle,",
          "86:                   uv_buf_t bufs[],",
          "87:                   int bufcnt,",
          "88:                   struct sockaddr_in6 addr,",
          "89:                   uv_udp_send_cb send_cb);",
          "",
          "[Added Lines]",
          "79:                  const uv_buf_t bufs[],",
          "80:                  unsigned int nbufs,",
          "81:                  const struct sockaddr* addr,",
          "82:                  unsigned int addrlen,",
          "",
          "---------------"
        ],
        "src/win/udp.c||src/win/udp.c": [
          "File: src/win/udp.c -> src/win/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "359: }",
          "364:   uv_loop_t* loop = handle->loop;",
          "365:   DWORD result, bytes;",
          "",
          "[Removed Lines]",
          "362: static int uv__send(uv_udp_send_t* req, uv_udp_t* handle, uv_buf_t bufs[],",
          "363:     int bufcnt, struct sockaddr* addr, int addr_len, uv_udp_send_cb cb) {",
          "",
          "[Added Lines]",
          "362: static int uv__send(uv_udp_send_t* req,",
          "363:                     uv_udp_t* handle,",
          "364:                     const uv_buf_t bufs[],",
          "365:                     unsigned int nbufs,",
          "366:                     const struct sockaddr* addr,",
          "367:                     unsigned int addrlen,",
          "368:                     uv_udp_send_cb cb) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "373:   result = WSASendTo(handle->socket,",
          "374:                      (WSABUF*)bufs,",
          "376:                      &bytes,",
          "377:                      0,",
          "378:                      addr,",
          "380:                      &req->overlapped,",
          "381:                      NULL);",
          "",
          "[Removed Lines]",
          "375:                      bufcnt,",
          "379:                      addr_len,",
          "",
          "[Added Lines]",
          "380:                      nbufs,",
          "384:                      addrlen,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "388:     uv_insert_pending_req(loop, (uv_req_t*)req);",
          "389:   } else if (UV_SUCCEEDED_WITH_IOCP(result == 0)) {",
          "392:     handle->reqs_pending++;",
          "393:     REGISTER_HANDLE_REQ(loop, handle, req);",
          "394:   } else {",
          "",
          "[Removed Lines]",
          "391:     req->queued_bytes = uv_count_bufs(bufs, bufcnt);",
          "",
          "[Added Lines]",
          "396:     req->queued_bytes = uv_count_bufs(bufs, nbufs);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "400: }",
          "449: void uv_process_udp_recv_req(uv_loop_t* loop, uv_udp_t* handle,",
          "450:     uv_req_t* req) {",
          "451:   uv_buf_t buf;",
          "",
          "[Removed Lines]",
          "403: int uv__udp_send(uv_udp_send_t* req, uv_udp_t* handle, uv_buf_t bufs[],",
          "404:     int bufcnt, struct sockaddr_in addr, uv_udp_send_cb cb) {",
          "405:   int err;",
          "407:   if (!(handle->flags & UV_HANDLE_BOUND)) {",
          "408:     err = uv_udp_try_bind(handle,",
          "409:                           (const struct sockaddr*) &uv_addr_ip4_any_,",
          "410:                           sizeof(uv_addr_ip4_any_),",
          "411:                           0);",
          "412:     if (err)",
          "413:       return err;",
          "414:   }",
          "416:   return uv__send(req,",
          "417:                   handle,",
          "418:                   bufs,",
          "419:                   bufcnt,",
          "420:                   (struct sockaddr*) &addr,",
          "421:                   sizeof addr,",
          "422:                   cb);",
          "423: }",
          "426: int uv__udp_send6(uv_udp_send_t* req, uv_udp_t* handle, uv_buf_t bufs[],",
          "427:     int bufcnt, struct sockaddr_in6 addr, uv_udp_send_cb cb) {",
          "428:   int err;",
          "430:   if (!(handle->flags & UV_HANDLE_BOUND)) {",
          "431:     err = uv_udp_try_bind(handle,",
          "432:                           (const struct sockaddr*) &uv_addr_ip6_any_,",
          "433:                           sizeof(uv_addr_ip6_any_),",
          "434:                           0);",
          "435:     if (err)",
          "436:       return err;",
          "437:   }",
          "439:   return uv__send(req,",
          "440:                   handle,",
          "441:                   bufs,",
          "442:                   bufcnt,",
          "443:                   (struct sockaddr*) &addr,",
          "444:                   sizeof addr,",
          "445:                   cb);",
          "446: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "754:   return 0;",
          "755: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "720: int uv__udp_send(uv_udp_send_t* req,",
          "721:                  uv_udp_t* handle,",
          "722:                  const uv_buf_t bufs[],",
          "723:                  unsigned int nbufs,",
          "724:                  const struct sockaddr* addr,",
          "725:                  unsigned int addrlen,",
          "726:                  uv_udp_send_cb send_cb) {",
          "727:   const struct sockaddr* bind_addr;",
          "728:   int err;",
          "730:   if (!(handle->flags & UV_HANDLE_BOUND)) {",
          "731:     if (addrlen == sizeof(uv_addr_ip4_any_)) {",
          "732:       bind_addr = (const struct sockaddr*) &uv_addr_ip4_any_;",
          "733:     } else if (addrlen == sizeof(uv_addr_ip6_any_)) {",
          "734:       bind_addr = (const struct sockaddr*) &uv_addr_ip6_any_;",
          "735:     } else {",
          "736:       abort();",
          "737:     }",
          "738:     err = uv_udp_try_bind(handle, bind_addr, addrlen, 0);",
          "739:     if (err)",
          "740:       return uv_translate_sys_error(err);",
          "741:   }",
          "743:   err = uv__send(req, handle, bufs, nbufs, addr, addrlen, send_cb);",
          "744:   if (err)",
          "745:     return uv_translate_sys_error(err);",
          "747:   return 0;",
          "748: }",
          "",
          "---------------"
        ],
        "test/benchmark-udp-pummel.c||test/benchmark-udp-pummel.c": [
          "File: test/benchmark-udp-pummel.c -> test/benchmark-udp-pummel.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:                           &s->udp_handle,",
          "101:                           bufs,",
          "102:                           ARRAY_SIZE(bufs),",
          "104:                           send_cb));",
          "105:   send_cb_called++;",
          "106: }",
          "",
          "[Removed Lines]",
          "103:                           s->addr,",
          "",
          "[Added Lines]",
          "103:                           &s->addr,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "195:                             &s->udp_handle,",
          "196:                             bufs,",
          "197:                             ARRAY_SIZE(bufs),",
          "199:                             send_cb));",
          "200:   }",
          "",
          "[Removed Lines]",
          "198:                             s->addr,",
          "",
          "[Added Lines]",
          "198:                             &s->addr,",
          "",
          "---------------"
        ],
        "test/echo-server.c||test/echo-server.c": [
          "File: test/echo-server.c -> test/echo-server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "208:                   handle,",
          "209:                   &sndbuf,",
          "210:                   1,",
          "212:                   on_send);",
          "213:   ASSERT(r == 0);",
          "214: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "211:                   (const struct sockaddr_in*) addr,",
          "",
          "---------------"
        ],
        "test/test-getsockname.c||test/test-getsockname.c": [
          "File: test/test-getsockname.c -> test/test-getsockname.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "310:   buf = uv_buf_init(\"PING\", 4);",
          "311:   ASSERT(0 == uv_ip4_addr(\"127.0.0.1\", server_port, &server_addr));",
          "314:   ASSERT(!r);",
          "315: }",
          "",
          "[Removed Lines]",
          "313:   r = uv_udp_send(&send_req, &udp, &buf, 1, server_addr, udp_send);",
          "",
          "[Added Lines]",
          "313:   r = uv_udp_send(&send_req, &udp, &buf, 1, &server_addr, udp_send);",
          "",
          "---------------"
        ],
        "test/test-ref.c||test/test-ref.c": [
          "File: test/test-ref.c -> test/test-ref.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "321:   ASSERT(0 == uv_ip4_addr(\"127.0.0.1\", TEST_PORT, &addr));",
          "322:   uv_udp_init(uv_default_loop(), &h);",
          "324:   uv_unref((uv_handle_t*)&h);",
          "325:   uv_run(uv_default_loop(), UV_RUN_DEFAULT);",
          "326:   ASSERT(req_cb_called == 1);",
          "",
          "[Removed Lines]",
          "323:   uv_udp_send(&req, &h, &buf, 1, addr, (uv_udp_send_cb)req_cb);",
          "",
          "[Added Lines]",
          "323:   uv_udp_send(&req, &h, &buf, 1, &addr, (uv_udp_send_cb)req_cb);",
          "",
          "---------------"
        ],
        "test/test-udp-dgram-too-big.c||test/test-udp-dgram-too-big.c": [
          "File: test/test-udp-dgram-too-big.c -> test/test-udp-dgram-too-big.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:   buf = uv_buf_init(dgram, sizeof dgram);",
          "71:   ASSERT(0 == uv_ip4_addr(\"127.0.0.1\", TEST_PORT, &addr));",
          "74:   ASSERT(r == 0);",
          "76:   ASSERT(close_cb_called == 0);",
          "",
          "[Removed Lines]",
          "73:   r = uv_udp_send(&req_, &handle_, &buf, 1, addr, send_cb);",
          "",
          "[Added Lines]",
          "73:   r = uv_udp_send(&req_, &handle_, &buf, 1, &addr, send_cb);",
          "",
          "---------------"
        ],
        "test/test-udp-ipv6.c||test/test-udp-ipv6.c": [
          "File: test/test-udp-ipv6.c -> test/test-udp-ipv6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:   buf = uv_buf_init(\"PING\", 4);",
          "121:   ASSERT(0 == uv_ip4_addr(\"127.0.0.1\", TEST_PORT, &addr));",
          "124:   ASSERT(r == 0);",
          "126:   r = uv_timer_init(uv_default_loop(), &timeout);",
          "",
          "[Removed Lines]",
          "123:   r = uv_udp_send(&req_, &client, &buf, 1, addr, send_cb);",
          "",
          "[Added Lines]",
          "123:   r = uv_udp_send(&req_, &client, &buf, 1, &addr, send_cb);",
          "",
          "---------------"
        ],
        "test/test-udp-multicast-join.c||test/test-udp-multicast-join.c": [
          "File: test/test-udp-multicast-join.c -> test/test-udp-multicast-join.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:   buf = uv_buf_init(\"PING\", 4);",
          "128:   ASSERT(r == 0);",
          "130:   ASSERT(close_cb_called == 0);",
          "",
          "[Removed Lines]",
          "127:   r = uv_udp_send(&req, &server, &buf, 1, addr, sv_send_cb);",
          "",
          "[Added Lines]",
          "127:   r = uv_udp_send(&req, &server, &buf, 1, &addr, sv_send_cb);",
          "",
          "---------------"
        ],
        "test/test-udp-multicast-ttl.c||test/test-udp-multicast-ttl.c": [
          "File: test/test-udp-multicast-ttl.c -> test/test-udp-multicast-ttl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:   buf = uv_buf_init(\"PING\", 4);",
          "74:   ASSERT(0 == uv_ip4_addr(\"239.255.0.1\", TEST_PORT, &addr));",
          "76:   ASSERT(r == 0);",
          "78:   ASSERT(close_cb_called == 0);",
          "",
          "[Removed Lines]",
          "75:   r = uv_udp_send(&req, &server, &buf, 1, addr, sv_send_cb);",
          "",
          "[Added Lines]",
          "75:   r = uv_udp_send(&req, &server, &buf, 1, &addr, sv_send_cb);",
          "",
          "---------------"
        ],
        "test/test-udp-open.c||test/test-udp-open.c": [
          "File: test/test-udp-open.c -> test/test-udp-open.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "146:   r = uv_udp_recv_start(&client, alloc_cb, recv_cb);",
          "147:   ASSERT(r == 0);",
          "150:   ASSERT(r == 0);",
          "152:   uv_run(uv_default_loop(), UV_RUN_DEFAULT);",
          "",
          "[Removed Lines]",
          "149:   r = uv_udp_send(&send_req, &client, &buf, 1, addr, send_cb);",
          "",
          "[Added Lines]",
          "149:   r = uv_udp_send(&send_req, &client, &buf, 1, &addr, send_cb);",
          "",
          "---------------"
        ],
        "test/test-udp-send-and-recv.c||test/test-udp-send-and-recv.c": [
          "File: test/test-udp-send-and-recv.c -> test/test-udp-send-and-recv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:                   handle,",
          "157:                   &sndbuf,",
          "158:                   1,",
          "160:                   sv_send_cb);",
          "161:   ASSERT(r == 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159:                   (const struct sockaddr_in*) addr,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "190:   buf = uv_buf_init(\"PING\", 4);",
          "193:   ASSERT(r == 0);",
          "195:   ASSERT(close_cb_called == 0);",
          "",
          "[Removed Lines]",
          "192:   r = uv_udp_send(&req, &client, &buf, 1, addr, cl_send_cb);",
          "",
          "[Added Lines]",
          "192:   r = uv_udp_send(&req, &client, &buf, 1, &addr, cl_send_cb);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d0be852cb17fee8e3da232dc56d4b465b7792714",
      "candidate_info": {
        "commit_hash": "d0be852cb17fee8e3da232dc56d4b465b7792714",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/d0be852cb17fee8e3da232dc56d4b465b7792714",
        "files": [
          "test/test-fs.c"
        ],
        "message": "test: fix fs_chown when running as root\n\nchown(2) to root is expected to fail - unless you're root, of course.",
        "before_after_code_files": [
          "test/test-fs.c||test/test-fs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/test-fs.c||test/test-fs.c": [
          "File: test/test-fs.c -> test/test-fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "197:   ASSERT(req->result == 0);",
          "198: #else",
          "202: #endif",
          "203:   chown_cb_count++;",
          "204:   uv_fs_req_cleanup(req);",
          "",
          "[Removed Lines]",
          "200:   ASSERT(req->result == -1);",
          "201:   ASSERT(req->errorno == UV_EPERM);",
          "",
          "[Added Lines]",
          "202:   if (geteuid() == 0) {",
          "203:     ASSERT(req->result == 0);",
          "204:   }",
          "205:   else {",
          "206:     ASSERT(req->result == -1);",
          "207:     ASSERT(req->errorno == UV_EPERM);",
          "208:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f70b3fae8b03db9a7ce101b77c756549b3010ff1",
      "candidate_info": {
        "commit_hash": "f70b3fae8b03db9a7ce101b77c756549b3010ff1",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/f70b3fae8b03db9a7ce101b77c756549b3010ff1",
        "files": [
          "docs/src/conf.py",
          "include/uv-version.h",
          "src/version.c"
        ],
        "message": "version: add ability to specify a version suffix",
        "before_after_code_files": [
          "include/uv-version.h||include/uv-version.h",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv-version.h||include/uv-version.h": [
          "File: include/uv-version.h -> include/uv-version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: #define UV_VERSION_MINOR 0",
          "35: #define UV_VERSION_PATCH 0",
          "36: #define UV_VERSION_IS_RELEASE 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: #define UV_VERSION_SUFFIX \"dev\"",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #if UV_VERSION_IS_RELEASE",
          "36: # define UV_VERSION_STRING  UV_VERSION_STRING_BASE",
          "37: #else",
          "39: #endif",
          "",
          "[Removed Lines]",
          "38: # define UV_VERSION_STRING  UV_VERSION_STRING_BASE \"-pre\"",
          "",
          "[Added Lines]",
          "38: # define UV_VERSION_STRING  UV_VERSION_STRING_BASE \"-\" UV_VERSION_SUFFIX",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e7fdab1fd946cb76d5db5fb3bc34077fff137cd7",
      "candidate_info": {
        "commit_hash": "e7fdab1fd946cb76d5db5fb3bc34077fff137cd7",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/e7fdab1fd946cb76d5db5fb3bc34077fff137cd7",
        "files": [
          "test/test-udp-multicast-interface6.c"
        ],
        "message": "test: remove debug statement",
        "before_after_code_files": [
          "test/test-udp-multicast-interface6.c||test/test-udp-multicast-interface6.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/test-udp-multicast-interface6.c||test/test-udp-multicast-interface6.c": [
          "File: test/test-udp-multicast-interface6.c -> test/test-udp-multicast-interface6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: static void sv_send_cb(uv_udp_send_t* req, int status) {",
          "46:   ASSERT(req != NULL);",
          "48:   ASSERT(status == 0);",
          "49:   CHECK_HANDLE(req->handle);",
          "",
          "[Removed Lines]",
          "47:   printf(\"-- sv_send_cb: %s (%d): %s\\n\", uv_err_name(status), status, uv_strerror(status));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "837c62c71b5dbb3d97287fcca772327241afa32b",
      "candidate_info": {
        "commit_hash": "837c62c71b5dbb3d97287fcca772327241afa32b",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/837c62c71b5dbb3d97287fcca772327241afa32b",
        "files": [
          "include/uv-win.h",
          "src/win/internal.h",
          "src/win/pipe.c",
          "src/win/stream.c",
          "src/win/winapi.c",
          "src/win/winapi.h",
          "test/test-list.h",
          "test/test-pipe-getsockname.c"
        ],
        "message": "windows: make uv_read_stop immediately stop reading\n\nThis implements locking around the blocking call to ReadFile to get\naround a Windows kernel bug where a blocking ReadFile operation on a\nstream can deadlock the thread. This allows uv_read_stop to immediately\ncancel a pending IO operation, and allows uv_pipe_getsockname to\n\"pause\" any pending read (from libuv) while it retrieves the\nsockname information.\n\nIf unsupported by the OS (pre-Vista), this reverts to the old\n(e.g. deadlock-prone) behavior\n\nCloses #1313",
        "before_after_code_files": [
          "include/uv-win.h||include/uv-win.h",
          "src/win/internal.h||src/win/internal.h",
          "src/win/pipe.c||src/win/pipe.c",
          "src/win/stream.c||src/win/stream.c",
          "src/win/winapi.c||src/win/winapi.c",
          "src/win/winapi.h||src/win/winapi.h",
          "test/test-list.h||test/test-list.h",
          "test/test-pipe-getsockname.c||test/test-pipe-getsockname.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv-win.h||include/uv-win.h": [
          "File: include/uv-win.h -> include/uv-win.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "443:     int queue_len;                                                            \\",
          "444:   } pending_ipc_info;                                                         \\",
          "445:   uv_write_t* non_overlapped_writes_tail;                                     \\",
          "446:   void* reserved;",
          "448: #define UV_PIPE_PRIVATE_FIELDS                                                \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "446:   uv_mutex_t readfile_mutex;                                                  \\",
          "447:   volatile HANDLE readfile_thread;                                            \\",
          "",
          "---------------"
        ],
        "src/win/internal.h||src/win/internal.h": [
          "File: src/win/internal.h -> src/win/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "101: #define UV_HANDLE_NON_OVERLAPPED_PIPE           0x01000000",
          "102: #define UV_HANDLE_PIPESERVER                    0x02000000",
          "105: #define UV_HANDLE_TTY_READABLE                  0x01000000",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "103: #define UV_HANDLE_PIPE_READ_CANCELABLE          0x04000000",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "181: int uv_pipe_write2(uv_loop_t* loop, uv_write_t* req, uv_pipe_t* handle,",
          "182:     const uv_buf_t bufs[], unsigned int nbufs, uv_stream_t* send_handle,",
          "183:     uv_write_cb cb);",
          "185: void uv_process_pipe_read_req(uv_loop_t* loop, uv_pipe_t* handle,",
          "186:     uv_req_t* req);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185: void uv__pipe_pause_read(uv_pipe_t* handle);",
          "186: void uv__pipe_unpause_read(uv_pipe_t* handle);",
          "187: void uv__pipe_stop_read(uv_pipe_t* handle);",
          "",
          "---------------"
        ],
        "src/win/pipe.c||src/win/pipe.c": [
          "File: src/win/pipe.c -> src/win/pipe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:   handle->pending_ipc_info.queue_len = 0;",
          "102:   handle->ipc = ipc;",
          "103:   handle->non_overlapped_writes_tail = NULL;",
          "105:   uv_req_init(loop, (uv_req_t*) &handle->ipc_header_write_req);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104:   handle->readfile_thread = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112:   uv_connection_init((uv_stream_t*) handle);",
          "113:   handle->read_req.data = handle;",
          "114:   handle->eof_timer = NULL;",
          "115: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116:   assert(!(handle->flags & UV_HANDLE_PIPESERVER));",
          "117:   if (pCancelSynchronousIo &&",
          "118:       handle->flags & UV_HANDLE_NON_OVERLAPPED_PIPE) {",
          "119:       uv_mutex_init(&handle->readfile_mutex);",
          "120:       handle->flags |= UV_HANDLE_PIPE_READ_CANCELABLE;",
          "121:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "321:   FILE_PIPE_LOCAL_INFORMATION pipe_info;",
          "322:   uv__ipc_queue_item_t* item;",
          "324:   if ((handle->flags & UV_HANDLE_CONNECTION) &&",
          "325:       handle->shutdown_req != NULL &&",
          "326:       handle->write_reqs_pending == 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "331:   if (handle->flags & UV_HANDLE_PIPE_READ_CANCELABLE) {",
          "332:     handle->flags &= ~UV_HANDLE_PIPE_READ_CANCELABLE;",
          "333:     uv_mutex_destroy(&handle->readfile_mutex);",
          "334:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "658: }",
          "663: void uv_pipe_cleanup(uv_loop_t* loop, uv_pipe_t* handle) {",
          "664:   int i;",
          "665:   HANDLE pipeHandle;",
          "667:   if (handle->name) {",
          "668:     free(handle->name);",
          "669:     handle->name = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "673: void uv__pipe_pause_read(uv_pipe_t* handle) {",
          "674:   if (handle->flags & UV_HANDLE_PIPE_READ_CANCELABLE) {",
          "676:          around the Windows kernel bug that causes",
          "677:          any access to a NamedPipe to deadlock if",
          "679:       HANDLE h;",
          "680:       uv_mutex_lock(&handle->readfile_mutex);",
          "681:       h = handle->readfile_thread;",
          "682:       while (h) {",
          "684:            or we are probably about to deadlock anyways",
          "686:         pCancelSynchronousIo(h);",
          "688:         h = handle->readfile_thread;",
          "689:       }",
          "690:   }",
          "691: }",
          "694: void uv__pipe_unpause_read(uv_pipe_t* handle) {",
          "695:   if (handle->flags & UV_HANDLE_PIPE_READ_CANCELABLE) {",
          "696:     uv_mutex_unlock(&handle->readfile_mutex);",
          "697:   }",
          "698: }",
          "701: void uv__pipe_stop_read(uv_pipe_t* handle) {",
          "702:   handle->flags &= ~UV_HANDLE_READING;",
          "703:   uv__pipe_pause_read((uv_pipe_t*)handle);",
          "704:   uv__pipe_unpause_read((uv_pipe_t*)handle);",
          "705: }",
          "714:   uv__pipe_stop_read(handle);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "867:   uv_read_t* req = (uv_read_t*) parameter;",
          "868:   uv_pipe_t* handle = (uv_pipe_t*) req->data;",
          "869:   uv_loop_t* loop = handle->loop;",
          "871:   assert(req != NULL);",
          "872:   assert(req->type == UV_READ);",
          "873:   assert(handle->type == UV_NAMED_PIPE);",
          "875:   result = ReadFile(handle->handle,",
          "876:                     &uv_zero_,",
          "877:                     0,",
          "878:                     &bytes,",
          "879:                     NULL);",
          "881:   if (!result) {",
          "883:   }",
          "885:   POST_COMPLETION_FOR_REQ(loop, req);",
          "",
          "[Removed Lines]",
          "882:     SET_REQ_ERROR(req, GetLastError());",
          "",
          "[Added Lines]",
          "920:   HANDLE hThread = NULL;",
          "921:   DWORD err;",
          "922:   uv_mutex_t *m = &handle->readfile_mutex;",
          "928:   if (handle->flags & UV_HANDLE_PIPE_READ_CANCELABLE) {",
          "930:     if (DuplicateHandle(GetCurrentProcess(), GetCurrentThread(),",
          "931:                         GetCurrentProcess(), &hThread,",
          "932:                         0, TRUE, DUPLICATE_SAME_ACCESS)) {",
          "933:       handle->readfile_thread = hThread;",
          "934:     } else {",
          "935:       hThread = NULL;",
          "936:     }",
          "937:     uv_mutex_unlock(m);",
          "938:   }",
          "939: restart_readfile:",
          "945:   if (!result) {",
          "946:     err = GetLastError();",
          "947:     if (err == ERROR_OPERATION_ABORTED &&",
          "948:         handle->flags & UV_HANDLE_PIPE_READ_CANCELABLE) {",
          "949:       if (handle->flags & UV_HANDLE_READING) {",
          "951:         handle->readfile_thread = NULL;",
          "953:         uv_mutex_lock(m);",
          "954:         handle->readfile_thread = hThread;",
          "955:         uv_mutex_unlock(m);",
          "956:         goto restart_readfile;",
          "957:       } else {",
          "959:       }",
          "960:     }",
          "961:   }",
          "962:   if (hThread) {",
          "963:     assert(hThread == handle->readfile_thread);",
          "965:     handle->readfile_thread = NULL;",
          "966:     uv_mutex_lock(m);",
          "969:     CloseHandle(hThread);",
          "970:     uv_mutex_unlock(m);",
          "971:   }",
          "974:     SET_REQ_ERROR(req, err);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1846:     name_info = malloc(name_size);",
          "1847:     if (!name_info) {",
          "1850:     }",
          "1852:     nt_status = pNtQueryInformationFile(handle->handle,",
          "",
          "[Removed Lines]",
          "1849:       return UV_ENOMEM;",
          "",
          "[Added Lines]",
          "1943:       err = UV_ENOMEM;",
          "1944:       goto cleanup;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1918:   buf[addrlen++] = '\\0';",
          "1923: error:",
          "1924:   free(name_info);",
          "1925:   return err;",
          "1926: }",
          "",
          "[Removed Lines]",
          "1921:   return 0;",
          "",
          "[Added Lines]",
          "2016:   err = 0;",
          "2017:   goto cleanup;",
          "2022: cleanup:",
          "",
          "---------------"
        ],
        "src/win/stream.c||src/win/stream.c": [
          "File: src/win/stream.c -> src/win/stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:   if (handle->type == UV_TTY) {",
          "107:     err = uv_tty_read_stop((uv_tty_t*) handle);",
          "108:   } else {",
          "110:     DECREASE_ACTIVE_COUNT(handle->loop, handle);",
          "111:   }",
          "",
          "[Removed Lines]",
          "109:     handle->flags &= ~UV_HANDLE_READING;",
          "",
          "[Added Lines]",
          "109:     if (handle->type == UV_NAMED_PIPE) {",
          "110:       uv__pipe_stop_read((uv_pipe_t*) handle);",
          "111:     } else {",
          "112:       handle->flags &= ~UV_HANDLE_READING;",
          "113:     }",
          "",
          "---------------"
        ],
        "src/win/winapi.c||src/win/winapi.c": [
          "File: src/win/winapi.c -> src/win/winapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: sSleepConditionVariableSRW pSleepConditionVariableSRW;",
          "52: sWakeAllConditionVariable pWakeAllConditionVariable;",
          "53: sWakeConditionVariable pWakeConditionVariable;",
          "56: void uv_winapi_init() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54: sCancelSynchronousIo pCancelSynchronousIo;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157:   pWakeConditionVariable = (sWakeConditionVariable)",
          "158:     GetProcAddress(kernel32_module, \"WakeConditionVariable\");",
          "159: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161:   pCancelSynchronousIo = (sCancelSynchronousIo)",
          "162:     GetProcAddress(kernel32_module, \"CancelSynchronousIo\");",
          "",
          "---------------"
        ],
        "src/win/winapi.h||src/win/winapi.h": [
          "File: src/win/winapi.h -> src/win/winapi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4617: typedef VOID (WINAPI* sWakeConditionVariable)",
          "4618:              (PCONDITION_VARIABLE ConditionVariable);",
          "4622: extern sRtlNtStatusToDosError pRtlNtStatusToDosError;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4620: typedef BOOL (WINAPI* sCancelSynchronousIo)",
          "4621:              (HANDLE hThread);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4644: extern sSleepConditionVariableSRW pSleepConditionVariableSRW;",
          "4645: extern sWakeAllConditionVariable pWakeAllConditionVariable;",
          "4646: extern sWakeConditionVariable pWakeConditionVariable;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4649: extern sCancelSynchronousIo pCancelSynchronousIo;",
          "",
          "---------------"
        ],
        "test/test-list.h||test/test-list.h": [
          "File: test/test-list.h -> test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "109: TEST_DECLARE   (pipe_connect_to_file)",
          "110: TEST_DECLARE   (pipe_getsockname)",
          "111: TEST_DECLARE   (pipe_getsockname_abstract)",
          "112: TEST_DECLARE   (pipe_sendmsg)",
          "113: TEST_DECLARE   (pipe_server_close)",
          "114: TEST_DECLARE   (connection_fail)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112: TEST_DECLARE   (pipe_getsockname_blocking)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "402:   TEST_ENTRY  (pipe_listen_without_bind)",
          "403:   TEST_ENTRY  (pipe_getsockname)",
          "404:   TEST_ENTRY  (pipe_getsockname_abstract)",
          "405:   TEST_ENTRY  (pipe_sendmsg)",
          "407:   TEST_ENTRY  (connection_fail)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "406:   TEST_ENTRY  (pipe_getsockname_blocking)",
          "",
          "---------------"
        ],
        "test/test-pipe-getsockname.c||test/test-pipe-getsockname.c": [
          "File: test/test-pipe-getsockname.c -> test/test-pipe-getsockname.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #ifndef _WIN32",
          "35: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: #else",
          "36: # include <fcntl.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120: #endif",
          "121: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "125: TEST_IMPL(pipe_getsockname_blocking) {",
          "126: #ifdef _WIN32",
          "127:   uv_pipe_t reader;",
          "128:   HANDLE readh, writeh;",
          "129:   int readfd;",
          "130:   char buf1[1024], buf2[1024];",
          "131:   size_t len1, len2;",
          "132:   int r;",
          "134:   r = CreatePipe(&readh, &writeh, NULL, 65536);",
          "135:   ASSERT(r != 0);",
          "137:   r = uv_pipe_init(uv_default_loop(), &reader, 0);",
          "138:   ASSERT(r == 0);",
          "139:   readfd = _open_osfhandle((intptr_t)readh, _O_RDONLY);",
          "140:   ASSERT(r != -1);",
          "141:   r = uv_pipe_open(&reader, readfd);",
          "142:   ASSERT(r == 0);",
          "143:   r = uv_read_start((uv_stream_t*)&reader, NULL, NULL);",
          "144:   ASSERT(r == 0);",
          "145:   Sleep(100);",
          "146:   r = uv_read_stop((uv_stream_t*)&reader);",
          "147:   ASSERT(r == 0);",
          "149:   len1 = sizeof buf1;",
          "150:   r = uv_pipe_getsockname(&reader, buf1, &len1);",
          "151:   ASSERT(r == 0);",
          "153:   r = uv_read_start((uv_stream_t*)&reader, NULL, NULL);",
          "154:   ASSERT(r == 0);",
          "155:   Sleep(100);",
          "157:   len2 = sizeof buf2;",
          "158:   r = uv_pipe_getsockname(&reader, buf2, &len2);",
          "159:   ASSERT(r == 0);",
          "161:   r = uv_read_stop((uv_stream_t*)&reader);",
          "162:   ASSERT(r == 0);",
          "164:   ASSERT(len1 == len2);",
          "165:   ASSERT(memcmp(buf1, buf2, len1) == 0);",
          "167:   close_cb_called = 0;",
          "168:   uv_close((uv_handle_t*)&reader, close_cb);",
          "170:   uv_run(uv_default_loop(), UV_RUN_DEFAULT);",
          "172:   ASSERT(close_cb_called == 1);",
          "174:   _close(readfd);",
          "175:   CloseHandle(writeh);",
          "176: #endif",
          "178:   MAKE_VALGRIND_HAPPY();",
          "179:   return 0;",
          "180: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}