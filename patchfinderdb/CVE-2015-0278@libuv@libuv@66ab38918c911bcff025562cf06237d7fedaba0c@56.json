{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a03ea239db412f05f6f408dd187d6dfd80c7c8cb",
      "candidate_info": {
        "commit_hash": "a03ea239db412f05f6f408dd187d6dfd80c7c8cb",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/a03ea239db412f05f6f408dd187d6dfd80c7c8cb",
        "files": [
          "include/uv-unix.h",
          "include/uv-win.h",
          "include/uv.h",
          "src/unix/fs.c",
          "src/unix/linux-syscalls.c",
          "src/unix/linux-syscalls.h",
          "src/win/fs.c",
          "test/test-fs-event.c",
          "test/test-fs.c",
          "test/test-spawn.c"
        ],
        "message": "Revert \"fs: vectored IO API for filesystem read/write\"\n\nThis reverts commit 7df24583e5ea77086e765a4bf0773407f0ec190d.",
        "before_after_code_files": [
          "include/uv-unix.h||include/uv-unix.h",
          "include/uv-win.h||include/uv-win.h",
          "include/uv.h||include/uv.h",
          "src/unix/fs.c||src/unix/fs.c",
          "src/unix/linux-syscalls.c||src/unix/linux-syscalls.c",
          "src/unix/linux-syscalls.h||src/unix/linux-syscalls.h",
          "src/win/fs.c||src/win/fs.c",
          "test/test-fs-event.c||test/test-fs-event.c",
          "test/test-fs.c||test/test-fs.c",
          "test/test-spawn.c||test/test-spawn.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv-unix.h||include/uv-unix.h": [
          "File: include/uv-unix.h -> include/uv-unix.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "295:   uv_file file;                                                               \\",
          "296:   int flags;                                                                  \\",
          "297:   mode_t mode;                                                                \\",
          "300:   off_t off;                                                                  \\",
          "301:   uv_uid_t uid;                                                               \\",
          "302:   uv_gid_t gid;                                                               \\",
          "303:   double atime;                                                               \\",
          "304:   double mtime;                                                               \\",
          "305:   struct uv__work work_req;                                                   \\",
          "308: #define UV_WORK_PRIVATE_FIELDS                                                \\",
          "309:   struct uv__work work_req;",
          "",
          "[Removed Lines]",
          "298:   unsigned int nbufs;                                                         \\",
          "299:   uv_buf_t* bufs;                                                             \\",
          "306:   uv_buf_t bufsml[4];                                                         \\",
          "",
          "[Added Lines]",
          "298:   void* buf;                                                                  \\",
          "299:   size_t len;                                                                 \\",
          "",
          "---------------"
        ],
        "include/uv-win.h||include/uv-win.h": [
          "File: include/uv-win.h -> include/uv-win.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "552:       WCHAR* new_pathw;                                                       \\",
          "553:       int file_flags;                                                         \\",
          "554:       int fd_out;                                                             \\",
          "557:       int64_t offset;                                                         \\",
          "559:     };                                                                        \\",
          "560:     struct {                                                                  \\",
          "561:       double atime;                                                           \\",
          "",
          "[Removed Lines]",
          "555:       unsigned int nbufs;                                                     \\",
          "556:       uv_buf_t* bufs;                                                         \\",
          "558:       uv_buf_t bufsml[4];                                                     \\",
          "",
          "[Added Lines]",
          "555:       void* buf;                                                              \\",
          "556:       size_t length;                                                          \\",
          "",
          "---------------"
        ],
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1729:     int flags, int mode, uv_fs_cb cb);",
          "1731: UV_EXTERN int uv_fs_read(uv_loop_t* loop, uv_fs_t* req, uv_file file,",
          "1734: UV_EXTERN int uv_fs_unlink(uv_loop_t* loop, uv_fs_t* req, const char* path,",
          "1735:     uv_fs_cb cb);",
          "1737: UV_EXTERN int uv_fs_write(uv_loop_t* loop, uv_fs_t* req, uv_file file,",
          "1740: UV_EXTERN int uv_fs_mkdir(uv_loop_t* loop, uv_fs_t* req, const char* path,",
          "1741:     int mode, uv_fs_cb cb);",
          "",
          "[Removed Lines]",
          "1732:     const uv_buf_t bufs[], unsigned int nbufs, int64_t offset, uv_fs_cb cb);",
          "1738:     const uv_buf_t bufs[], unsigned int nbufs, int64_t offset, uv_fs_cb cb);",
          "",
          "[Added Lines]",
          "1732:     void* buf, size_t length, int64_t offset, uv_fs_cb cb);",
          "1738:     const void* buf, size_t length, int64_t offset, uv_fs_cb cb);",
          "",
          "---------------"
        ],
        "src/unix/fs.c||src/unix/fs.c": [
          "File: src/unix/fs.c -> src/unix/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: #include <utime.h>",
          "45: #include <poll.h>",
          "56: #if defined(__linux__) || defined(__sun)",
          "57: # include <sys/sendfile.h>",
          "58: #elif defined(__APPLE__) || defined(__FreeBSD__)",
          "59: # include <sys/socket.h>",
          "63: # include <sys/uio.h>",
          "64: #endif",
          "",
          "[Removed Lines]",
          "47: #if defined(__DragonFly__)  ||                                            \\",
          "48:     defined(__FreeBSD__)    ||                                            \\",
          "49:     defined(__OpenBSD__)    ||                                            \\",
          "50:     defined(__NetBSD__)",
          "51: # define HAVE_PREADV 1",
          "52: #else",
          "53: # define HAVE_PREADV 0",
          "54: #endif",
          "60: #endif",
          "62: #if HAVE_PREADV || defined(__APPLE__)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "205: static ssize_t uv__fs_read(uv_fs_t* req) {",
          "208:   if (req->off < 0)",
          "259: }",
          "",
          "[Removed Lines]",
          "206:   ssize_t result;",
          "209:     result = readv(req->file, (struct iovec*) req->bufs, req->nbufs);",
          "210:   else {",
          "211: #if HAVE_PREADV",
          "212:     result = preadv(req->file, (struct iovec*) req->bufs, req->nbufs, req->off);",
          "213: #else",
          "214: # if defined(__linux__)",
          "215:     static int no_preadv;",
          "216:     if (no_preadv)",
          "217: # endif",
          "218:     {",
          "219:       off_t nread;",
          "220:       size_t index;",
          "222: # if defined(__linux__)",
          "223:     retry:",
          "224: # endif",
          "225:       nread = 0;",
          "226:       index = 0;",
          "227:       result = 1;",
          "228:       do {",
          "229:         if (req->bufs[index].len > 0) {",
          "230:           result = pread(req->file,",
          "231:                          req->bufs[index].base,",
          "232:                          req->bufs[index].len,",
          "233:                          req->off + nread);",
          "234:           if (result > 0)",
          "235:             nread += result;",
          "236:         }",
          "237:         index++;",
          "238:       } while (index < req->nbufs && result > 0);",
          "239:       if (nread > 0)",
          "240:         result = nread;",
          "241:     }",
          "242: # if defined(__linux__)",
          "243:     else {",
          "244:       result = uv__preadv(req->file,",
          "245:                           (struct iovec*)req->bufs,",
          "246:                           req->nbufs,",
          "247:                           req->off);",
          "248:       if (result == -1 && errno == ENOSYS) {",
          "249:         no_preadv = 1;",
          "250:         goto retry;",
          "251:       }",
          "252:     }",
          "253: # endif",
          "254: #endif",
          "255:   }",
          "256:   if (req->bufs != req->bufsml)",
          "257:     free(req->bufs);",
          "258:   return result;",
          "",
          "[Added Lines]",
          "195:     return read(req->file, req->buf, req->len);",
          "196:   else",
          "197:     return pread(req->file, req->buf, req->len, req->off);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "367:   int out_fd;",
          "368:   char buf[8192];",
          "371:   in_fd = req->flags;",
          "372:   out_fd = req->file;",
          "373:   offset = req->off;",
          "",
          "[Removed Lines]",
          "370:   len = req->bufsml[0].len;",
          "",
          "[Added Lines]",
          "309:   len = req->len;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "480:     ssize_t r;",
          "482:     off = req->off;",
          "",
          "[Removed Lines]",
          "483:     r = sendfile(out_fd, in_fd, &off, req->bufsml[0].len);",
          "",
          "[Added Lines]",
          "422:     r = sendfile(out_fd, in_fd, &off, req->len);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "515: #if defined(__FreeBSD__)",
          "516:     len = 0;",
          "518: #else",
          "522:     r = sendfile(in_fd, out_fd, req->off, &len, NULL, 0);",
          "523: #endif",
          "",
          "[Removed Lines]",
          "517:     r = sendfile(in_fd, out_fd, req->off, req->bufsml[0].len, NULL, &len, 0);",
          "521:     len = req->bufsml[0].len;",
          "",
          "[Added Lines]",
          "456:     r = sendfile(in_fd, out_fd, req->off, req->len, NULL, &len, 0);",
          "460:     len = req->len;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "568: #endif",
          "570:   if (req->off < 0)",
          "619: #if defined(__APPLE__)",
          "620:   pthread_mutex_unlock(&lock);",
          "621: #endif",
          "626:   return r;",
          "627: }",
          "",
          "[Removed Lines]",
          "571:     r = writev(req->file, (struct iovec*) req->bufs, req->nbufs);",
          "572:   else {",
          "573: #if HAVE_PREADV",
          "574:     r = pwritev(req->file, (struct iovec*) req->bufs, req->nbufs, req->off);",
          "575: #else",
          "576: # if defined(__linux__)",
          "577:     static int no_pwritev;",
          "578:     if (no_pwritev)",
          "579: # endif",
          "580:     {",
          "581:       off_t written;",
          "582:       size_t index;",
          "584: # if defined(__linux__)",
          "585:     retry:",
          "586: # endif",
          "587:       written = 0;",
          "588:       index = 0;",
          "589:       r = 1;",
          "590:       do {",
          "591:         if (req->bufs[index].len > 0) {",
          "592:           r = pwrite(req->file,",
          "593:                      req->bufs[index].base,",
          "594:                      req->bufs[index].len,",
          "595:                      req->off + written);",
          "596:           if (r > 0)",
          "597:             written += r;",
          "598:         }",
          "599:         index++;",
          "600:       } while (index < req->nbufs && r > 0);",
          "601:       if (written > 0)",
          "602:         r = written;",
          "603:     }",
          "604: # if defined(__linux__)",
          "605:     else {",
          "606:       r = uv__pwritev(req->file,",
          "607:                       (struct iovec*) req->bufs,",
          "608:                       req->nbufs,",
          "609:                       req->off);",
          "610:       if (r == -1 && errno == ENOSYS) {",
          "611:         no_pwritev = 1;",
          "612:         goto retry;",
          "613:       }",
          "614:     }",
          "615: # endif",
          "616: #endif",
          "617:   }",
          "623:   if (req->bufs != req->bufsml)",
          "624:     free(req->bufs);",
          "",
          "[Added Lines]",
          "510:     r = write(req->file, req->buf, req->len);",
          "511:   else",
          "512:     r = pwrite(req->file, req->buf, req->len, req->off);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "974: int uv_fs_read(uv_loop_t* loop, uv_fs_t* req,",
          "975:                uv_file file,",
          "978:                int64_t off,",
          "979:                uv_fs_cb cb) {",
          "980:   INIT(READ);",
          "981:   req->file = file;",
          "993:   req->off = off;",
          "994:   POST;",
          "995: }",
          "",
          "[Removed Lines]",
          "976:                const uv_buf_t bufs[],",
          "977:                unsigned int nbufs,",
          "983:   req->nbufs = nbufs;",
          "984:   req->bufs = req->bufsml;",
          "985:   if (nbufs > ARRAY_SIZE(req->bufsml))",
          "986:     req->bufs = malloc(nbufs * sizeof(*bufs));",
          "988:   if (req->bufs == NULL)",
          "989:     return -ENOMEM;",
          "991:   memcpy(req->bufs, bufs, nbufs * sizeof(*bufs));",
          "",
          "[Added Lines]",
          "868:                void* buf,",
          "869:                size_t len,",
          "874:   req->buf = buf;",
          "875:   req->len = len;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1047:   req->file = out_fd;",
          "1048:   req->off = off;",
          "1050:   POST;",
          "1051: }",
          "",
          "[Removed Lines]",
          "1049:   req->bufsml[0].len = len;",
          "",
          "[Added Lines]",
          "932:   req->len = len;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1095: int uv_fs_write(uv_loop_t* loop,",
          "1096:                 uv_fs_t* req,",
          "1097:                 uv_file file,",
          "1100:                 int64_t off,",
          "1101:                 uv_fs_cb cb) {",
          "1102:   INIT(WRITE);",
          "1103:   req->file = file;",
          "1115:   req->off = off;",
          "1116:   POST;",
          "1117: }",
          "",
          "[Removed Lines]",
          "1098:                 const uv_buf_t bufs[],",
          "1099:                 unsigned int nbufs,",
          "1105:   req->nbufs = nbufs;",
          "1106:   req->bufs = req->bufsml;",
          "1107:   if (nbufs > ARRAY_SIZE(req->bufsml))",
          "1108:     req->bufs = malloc(nbufs * sizeof(*bufs));",
          "1110:   if (req->bufs == NULL)",
          "1111:     return -ENOMEM;",
          "1113:   memcpy(req->bufs, bufs, nbufs * sizeof(*bufs));",
          "",
          "[Added Lines]",
          "981:                 const void* buf,",
          "982:                 size_t len,",
          "987:   req->buf = (void*) buf;",
          "988:   req->len = len;",
          "",
          "---------------"
        ],
        "src/unix/linux-syscalls.c||src/unix/linux-syscalls.c": [
          "File: src/unix/linux-syscalls.c -> src/unix/linux-syscalls.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "199: # endif",
          "223: int uv__accept4(int fd, struct sockaddr* addr, socklen_t* addrlen, int flags) {",
          "224: #if defined(__i386__)",
          "",
          "[Removed Lines]",
          "202: #ifndef __NR_preadv",
          "203: # if defined(__x86_64__)",
          "204: #  define __NR_preadv 295",
          "205: # elif defined(__i386__)",
          "206: #  define __NR_preadv 333",
          "207: # elif defined(__arm__)",
          "208: #  define __NR_preadv (UV_SYSCALL_BASE + 361)",
          "209: # endif",
          "212: #ifndef __NR_pwritev",
          "213: # if defined(__x86_64__)",
          "214: #  define __NR_pwritev 296",
          "215: # elif defined(__i386__)",
          "216: #  define __NR_pwritev 334",
          "217: # elif defined(__arm__)",
          "218: #  define __NR_pwritev (UV_SYSCALL_BASE + 362)",
          "219: # endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "406:   return errno = ENOSYS, -1;",
          "407: #endif",
          "408: }",
          "",
          "[Removed Lines]",
          "410: ssize_t uv__preadv(int fd, const struct iovec *iov, int iovcnt, off_t offset) {",
          "411: #if defined(__NR_preadv)",
          "412:   return syscall(__NR_preadv, fd, iov, iovcnt, offset);",
          "413: #else",
          "414:   return errno = ENOSYS, -1;",
          "415: #endif",
          "416: }",
          "418: ssize_t uv__pwritev(int fd, const struct iovec *iov, int iovcnt, off_t offset) {",
          "419: #if defined(__NR_pwritev)",
          "420:   return syscall(__NR_pwritev, fd, iov, iovcnt, offset);",
          "421: #else",
          "422:   return errno = ENOSYS, -1;",
          "423: #endif",
          "424: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/unix/linux-syscalls.h||src/unix/linux-syscalls.h": [
          "File: src/unix/linux-syscalls.h -> src/unix/linux-syscalls.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:                  const char* path,",
          "148:                  const struct timespec times[2],",
          "149:                  int flags);",
          "",
          "[Removed Lines]",
          "150: ssize_t uv__preadv(int fd, const struct iovec *iov, int iovcnt, off_t offset);",
          "151: ssize_t uv__pwritev(int fd, const struct iovec *iov, int iovcnt, off_t offset);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/win/fs.c||src/win/fs.c": [
          "File: src/win/fs.c -> src/win/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "546:   LARGE_INTEGER offset_;",
          "547:   DWORD bytes;",
          "548:   DWORD error;",
          "552:   VERIFY_FD(fd, req);",
          "",
          "[Removed Lines]",
          "549:   int result;",
          "550:   unsigned int index;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "575:     overlapped_ptr = NULL;",
          "576:   }",
          "592:     SET_REQ_RESULT(req, bytes);",
          "593:   } else {",
          "594:     error = GetLastError();",
          "",
          "[Removed Lines]",
          "578:   index = 0;",
          "579:   bytes = 0;",
          "580:   do {",
          "581:     DWORD incremental_bytes;",
          "582:     result = ReadFile(handle,",
          "583:                       req->bufs[index].base,",
          "584:                       req->bufs[index].len,",
          "585:                       &incremental_bytes,",
          "586:                       overlapped_ptr);",
          "587:     bytes += incremental_bytes;",
          "588:     ++index;",
          "589:   } while (result && index < req->nbufs);",
          "591:   if (result || bytes > 0) {",
          "",
          "[Added Lines]",
          "576:   if (ReadFile(handle, req->buf, req->length, &bytes, overlapped_ptr)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "609:   OVERLAPPED overlapped, *overlapped_ptr;",
          "610:   LARGE_INTEGER offset_;",
          "611:   DWORD bytes;",
          "615:   VERIFY_FD(fd, req);",
          "",
          "[Removed Lines]",
          "612:   int result;",
          "613:   unsigned int index;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "637:     overlapped_ptr = NULL;",
          "638:   }",
          "654:     SET_REQ_RESULT(req, bytes);",
          "655:   } else {",
          "656:     SET_REQ_WIN32_ERROR(req, GetLastError());",
          "",
          "[Removed Lines]",
          "640:   index = 0;",
          "641:   bytes = 0;",
          "642:   do {",
          "643:     DWORD incremental_bytes;",
          "644:     result = WriteFile(handle,",
          "645:                        req->bufs[index].base,",
          "646:                        req->bufs[index].len,",
          "647:                        &incremental_bytes,",
          "648:                        overlapped_ptr);",
          "649:     bytes += incremental_bytes;",
          "650:     ++index;",
          "651:   } while (result && index < req->nbufs);",
          "653:   if (result || bytes > 0) {",
          "",
          "[Added Lines]",
          "623:   if (WriteFile(handle, req->buf, length, &bytes, overlapped_ptr)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1599: }",
          "1609:   uv_fs_req_init(loop, req, UV_FS_READ, cb);",
          "1611:   req->fd = fd;",
          "1623:   req->offset = offset;",
          "1625:   if (cb) {",
          "",
          "[Removed Lines]",
          "1602: int uv_fs_read(uv_loop_t* loop,",
          "1603:                uv_fs_t* req,",
          "1604:                uv_file fd,",
          "1605:                const uv_buf_t bufs[],",
          "1606:                unsigned int nbufs,",
          "1607:                int64_t offset,",
          "1608:                uv_fs_cb cb) {",
          "1613:   req->nbufs = nbufs;",
          "1614:   req->bufs = req->bufsml;",
          "1615:   if (nbufs > ARRAY_SIZE(req->bufsml))",
          "1616:     req->bufs = malloc(nbufs * sizeof(*bufs));",
          "1618:   if (req->bufs == NULL)",
          "1619:     return UV_ENOMEM;",
          "1621:   memcpy(req->bufs, bufs, nbufs * sizeof(*bufs));",
          "",
          "[Added Lines]",
          "1572: int uv_fs_read(uv_loop_t* loop, uv_fs_t* req, uv_file fd, void* buf,",
          "1573:     size_t length, int64_t offset, uv_fs_cb cb) {",
          "1577:   req->buf = buf;",
          "1578:   req->length = length;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1637:   uv_fs_req_init(loop, req, UV_FS_WRITE, cb);",
          "1639:   req->fd = fd;",
          "1651:   req->offset = offset;",
          "1653:   if (cb) {",
          "",
          "[Removed Lines]",
          "1641:   req->nbufs = nbufs;",
          "1642:   req->bufs = req->bufsml;",
          "1643:   if (nbufs > ARRAY_SIZE(req->bufsml))",
          "1644:     req->bufs = malloc(nbufs * sizeof(*bufs));",
          "1646:   if (req->bufs == NULL)",
          "1647:     return UV_ENOMEM;",
          "1649:   memcpy(req->bufs, bufs, nbufs * sizeof(*bufs));",
          "",
          "[Added Lines]",
          "1596:   req->buf = (void*) buf;",
          "1597:   req->length = length;",
          "",
          "---------------"
        ],
        "test/test-fs-event.c||test/test-fs-event.c": [
          "File: test/test-fs-event.c -> test/test-fs-event.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:   int r;",
          "80:   uv_file file;",
          "81:   uv_fs_t req;",
          "84:   r = uv_fs_open(loop, &req, name, O_RDWR, 0, NULL);",
          "85:   ASSERT(r >= 0);",
          "86:   file = r;",
          "87:   uv_fs_req_cleanup(&req);",
          "91:   ASSERT(r >= 0);",
          "92:   uv_fs_req_cleanup(&req);",
          "",
          "[Removed Lines]",
          "82:   uv_buf_t buf;",
          "89:   buf = uv_buf_init(\"foo\", 4);",
          "90:   r = uv_fs_write(loop, &req, file, &buf, 1, -1, NULL);",
          "",
          "[Added Lines]",
          "88:   r = uv_fs_write(loop, &req, file, \"foo\", 4, -1, NULL);",
          "",
          "---------------"
        ],
        "test/test-fs.c||test/test-fs.c": [
          "File: test/test-fs.c -> test/test-fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "103: static char buf[32];",
          "104: static char test_buf[] = \"test-buffer\\n\";",
          "107: static void check_permission(const char* filename, unsigned int mode) {",
          "108:   int r;",
          "",
          "[Removed Lines]",
          "105: static uv_buf_t iov;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "284:   ASSERT(memcmp(req->path, \"test_file2\\0\", 11) == 0);",
          "285:   uv_fs_req_cleanup(req);",
          "286:   memset(buf, 0, sizeof(buf));",
          "289:       read_cb);",
          "290:   ASSERT(r == 0);",
          "291: }",
          "",
          "[Removed Lines]",
          "287:   iov = uv_buf_init(buf, sizeof(buf));",
          "288:   r = uv_fs_read(loop, &read_req, open_req1.result, &iov, 1, -1,",
          "",
          "[Added Lines]",
          "287:   r = uv_fs_read(loop, &read_req, open_req1.result, buf, sizeof(buf), -1,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "346:   ASSERT(req->result >= 0);",
          "347:   create_cb_count++;",
          "348:   uv_fs_req_cleanup(req);",
          "351:   ASSERT(r == 0);",
          "352: }",
          "",
          "[Removed Lines]",
          "349:   iov = uv_buf_init(test_buf, sizeof(test_buf));",
          "350:   r = uv_fs_write(loop, &write_req, req->result, &iov, 1, -1, write_cb);",
          "",
          "[Added Lines]",
          "348:   r = uv_fs_write(loop, &write_req, req->result, test_buf, sizeof(test_buf),",
          "349:       -1, write_cb);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "664:   ASSERT(open_req1.result >= 0);",
          "665:   uv_fs_req_cleanup(&open_req1);",
          "669:   ASSERT(r >= 0);",
          "670:   ASSERT(write_req.result >= 0);",
          "671:   uv_fs_req_cleanup(&write_req);",
          "",
          "[Removed Lines]",
          "667:   iov = uv_buf_init(test_buf, sizeof(test_buf));",
          "668:   r = uv_fs_write(loop, &write_req, open_req1.result, &iov, 1, -1, NULL);",
          "",
          "[Added Lines]",
          "666:   r = uv_fs_write(loop, &write_req, open_req1.result, test_buf,",
          "667:       sizeof(test_buf), -1, NULL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "680:   ASSERT(open_req1.result >= 0);",
          "681:   uv_fs_req_cleanup(&open_req1);",
          "685:   ASSERT(r >= 0);",
          "686:   ASSERT(read_req.result >= 0);",
          "687:   ASSERT(strcmp(buf, test_buf) == 0);",
          "",
          "[Removed Lines]",
          "683:   iov = uv_buf_init(buf, sizeof(buf));",
          "684:   r = uv_fs_read(loop, &read_req, open_req1.result, &iov, 1, -1, NULL);",
          "",
          "[Added Lines]",
          "682:   r = uv_fs_read(loop, &read_req, open_req1.result, buf, sizeof(buf), -1,",
          "683:       NULL);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "708:   uv_fs_req_cleanup(&open_req1);",
          "710:   memset(buf, 0, sizeof(buf));",
          "713:       NULL);",
          "714:   ASSERT(r >= 0);",
          "715:   ASSERT(read_req.result >= 0);",
          "",
          "[Removed Lines]",
          "711:   iov = uv_buf_init(buf, sizeof(buf));",
          "712:   r = uv_fs_read(loop, &read_req, open_req1.result, &iov, 1, -1,",
          "",
          "[Added Lines]",
          "710:   r = uv_fs_read(loop, &read_req, open_req1.result, buf, sizeof(buf), -1,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "912:   file = req.result;",
          "913:   uv_fs_req_cleanup(&req);",
          "917:   ASSERT(r == sizeof(test_buf));",
          "918:   ASSERT(req.result == sizeof(test_buf));",
          "919:   uv_fs_req_cleanup(&req);",
          "",
          "[Removed Lines]",
          "915:   iov = uv_buf_init(test_buf, sizeof(test_buf));",
          "916:   r = uv_fs_write(loop, &req, file, &iov, 1, -1, NULL);",
          "",
          "[Added Lines]",
          "913:   r = uv_fs_write(loop, &req, file, test_buf, sizeof(test_buf), -1, NULL);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1023:   file = req.result;",
          "1024:   uv_fs_req_cleanup(&req);",
          "1028:   ASSERT(r == sizeof(test_buf));",
          "1029:   ASSERT(req.result == sizeof(test_buf));",
          "1030:   uv_fs_req_cleanup(&req);",
          "",
          "[Removed Lines]",
          "1026:   iov = uv_buf_init(test_buf, sizeof(test_buf));",
          "1027:   r = uv_fs_write(loop, &req, file, &iov, 1, -1, NULL);",
          "",
          "[Added Lines]",
          "1023:   r = uv_fs_write(loop, &req, file, test_buf, sizeof(test_buf), -1, NULL);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1187:   file = req.result;",
          "1188:   uv_fs_req_cleanup(&req);",
          "1192:   ASSERT(r == sizeof(test_buf));",
          "1193:   ASSERT(req.result == sizeof(test_buf));",
          "1194:   uv_fs_req_cleanup(&req);",
          "",
          "[Removed Lines]",
          "1190:   iov = uv_buf_init(test_buf, sizeof(test_buf));",
          "1191:   r = uv_fs_write(loop, &req, file, &iov, 1, -1, NULL);",
          "",
          "[Added Lines]",
          "1186:   r = uv_fs_write(loop, &req, file, test_buf, sizeof(test_buf), -1, NULL);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1208:   uv_fs_req_cleanup(&req);",
          "1210:   memset(buf, 0, sizeof(buf));",
          "1213:   ASSERT(r >= 0);",
          "1214:   ASSERT(req.result >= 0);",
          "1215:   ASSERT(strcmp(buf, test_buf) == 0);",
          "",
          "[Removed Lines]",
          "1211:   iov = uv_buf_init(buf, sizeof(buf));",
          "1212:   r = uv_fs_read(loop, &req, link, &iov, 1, 0, NULL);",
          "",
          "[Added Lines]",
          "1206:   r = uv_fs_read(loop, &req, link, buf, sizeof(buf), 0, NULL);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1229:   uv_fs_req_cleanup(&req);",
          "1231:   memset(buf, 0, sizeof(buf));",
          "1234:   ASSERT(r >= 0);",
          "1235:   ASSERT(req.result >= 0);",
          "1236:   ASSERT(strcmp(buf, test_buf) == 0);",
          "",
          "[Removed Lines]",
          "1232:   iov = uv_buf_init(buf, sizeof(buf));",
          "1233:   r = uv_fs_read(loop, &req, link, &iov, 1, 0, NULL);",
          "",
          "[Added Lines]",
          "1226:   r = uv_fs_read(loop, &req, link, buf, sizeof(buf), 0, NULL);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1296:   file = req.result;",
          "1297:   uv_fs_req_cleanup(&req);",
          "1301:   ASSERT(r == sizeof(test_buf));",
          "1302:   ASSERT(req.result == sizeof(test_buf));",
          "1303:   uv_fs_req_cleanup(&req);",
          "",
          "[Removed Lines]",
          "1299:   iov = uv_buf_init(test_buf, sizeof(test_buf));",
          "1300:   r = uv_fs_write(loop, &req, file, &iov, 1, -1, NULL);",
          "",
          "[Added Lines]",
          "1292:   r = uv_fs_write(loop, &req, file, test_buf, sizeof(test_buf), -1, NULL);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1334:   uv_fs_req_cleanup(&req);",
          "1336:   memset(buf, 0, sizeof(buf));",
          "1339:   ASSERT(r >= 0);",
          "1340:   ASSERT(req.result >= 0);",
          "1341:   ASSERT(strcmp(buf, test_buf) == 0);",
          "",
          "[Removed Lines]",
          "1337:   iov = uv_buf_init(buf, sizeof(buf));",
          "1338:   r = uv_fs_read(loop, &req, link, &iov, 1, 0, NULL);",
          "",
          "[Added Lines]",
          "1329:   r = uv_fs_read(loop, &req, link, buf, sizeof(buf), 0, NULL);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1374:   uv_fs_req_cleanup(&req);",
          "1376:   memset(buf, 0, sizeof(buf));",
          "1379:   ASSERT(r >= 0);",
          "1380:   ASSERT(req.result >= 0);",
          "1381:   ASSERT(strcmp(buf, test_buf) == 0);",
          "",
          "[Removed Lines]",
          "1377:   iov = uv_buf_init(buf, sizeof(buf));",
          "1378:   r = uv_fs_read(loop, &req, link, &iov, 1, 0, NULL);",
          "",
          "[Added Lines]",
          "1368:   r = uv_fs_read(loop, &req, link, buf, sizeof(buf), 0, NULL);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1784:   ASSERT(open_req1.result >= 0);",
          "1785:   uv_fs_req_cleanup(&open_req1);",
          "1789:   ASSERT(r >= 0);",
          "1790:   ASSERT(write_req.result >= 0);",
          "1791:   uv_fs_req_cleanup(&write_req);",
          "",
          "[Removed Lines]",
          "1787:   iov = uv_buf_init(test_buf, sizeof(test_buf));",
          "1788:   r = uv_fs_write(loop, &write_req, open_req1.result, &iov, 1, -1, NULL);",
          "",
          "[Added Lines]",
          "1777:   r = uv_fs_write(loop, &write_req, open_req1.result, test_buf,",
          "1778:       sizeof(test_buf), -1, NULL);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1800:   ASSERT(open_req1.result >= 0);",
          "1801:   uv_fs_req_cleanup(&open_req1);",
          "1805:   ASSERT(r >= 0);",
          "1806:   ASSERT(write_req.result >= 0);",
          "1807:   uv_fs_req_cleanup(&write_req);",
          "",
          "[Removed Lines]",
          "1803:   iov = uv_buf_init(test_buf, sizeof(test_buf));",
          "1804:   r = uv_fs_write(loop, &write_req, open_req1.result, &iov, 1, -1, NULL);",
          "",
          "[Added Lines]",
          "1793:   r = uv_fs_write(loop, &write_req, open_req1.result, test_buf,",
          "1794:       sizeof(test_buf), -1, NULL);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1816:   ASSERT(open_req1.result >= 0);",
          "1817:   uv_fs_req_cleanup(&open_req1);",
          "1821:       NULL);",
          "1822:   printf(\"read = %d\\n\", r);",
          "1823:   ASSERT(r == 26);",
          "",
          "[Removed Lines]",
          "1819:   iov = uv_buf_init(buf, sizeof(buf));",
          "1820:   r = uv_fs_read(loop, &read_req, open_req1.result, &iov, 1, -1,",
          "",
          "[Added Lines]",
          "1809:   r = uv_fs_read(loop, &read_req, open_req1.result, buf, sizeof(buf), -1,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1855:   ASSERT(open_req1.result >= 0);",
          "1856:   uv_fs_req_cleanup(&open_req1);",
          "1860:   ASSERT(r >= 0);",
          "1861:   ASSERT(write_req.result >= 0);",
          "1862:   uv_fs_req_cleanup(&write_req);",
          "",
          "[Removed Lines]",
          "1858:   iov = uv_buf_init(test_buf, sizeof(test_buf));",
          "1859:   r = uv_fs_write(loop, &write_req, open_req1.result, &iov, 1, -1, NULL);",
          "",
          "[Added Lines]",
          "1847:   r = uv_fs_write(loop, &write_req, open_req1.result, test_buf,",
          "1848:       sizeof(test_buf), -1, NULL);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1888:   uv_fs_req_cleanup(&open_req1);",
          "1890:   memset(buf, 0, sizeof(buf));",
          "1893:       NULL);",
          "1894:   ASSERT(r >= 0);",
          "1895:   ASSERT(read_req.result >= 0);",
          "",
          "[Removed Lines]",
          "1891:   iov = uv_buf_init(buf, sizeof(buf));",
          "1892:   r = uv_fs_read(loop, &read_req, open_req1.result, &iov, 1, -1,",
          "",
          "[Added Lines]",
          "1880:   r = uv_fs_read(loop, &read_req, open_req1.result, buf, sizeof(buf), -1,",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1924:   ASSERT(open_req1.result >= 0);",
          "1925:   uv_fs_req_cleanup(&open_req1);",
          "1929:   ASSERT(r >= 0);",
          "1930:   ASSERT(write_req.result >= 0);",
          "1931:   uv_fs_req_cleanup(&write_req);",
          "",
          "[Removed Lines]",
          "1927:   iov = uv_buf_init(test_buf, sizeof(test_buf));",
          "1928:   r = uv_fs_write(loop, &write_req, open_req1.result, &iov, 1, -1, NULL);",
          "",
          "[Added Lines]",
          "1915:   r = uv_fs_write(loop, &write_req, open_req1.result, test_buf,",
          "1916:       sizeof(test_buf), -1, NULL);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1941:   uv_fs_req_cleanup(&open_req1);",
          "1943:   memset(buf, 0, sizeof(buf));",
          "1946:   ASSERT(r >= 0);",
          "1947:   ASSERT(read_req.result >= 0);",
          "1948:   ASSERT(strcmp(buf, test_buf) == 0);",
          "1949:   uv_fs_req_cleanup(&read_req);",
          "1954:   ASSERT(r == 0);",
          "1955:   ASSERT(read_req.result == 0);",
          "1956:   uv_fs_req_cleanup(&read_req);",
          "",
          "[Removed Lines]",
          "1944:   iov = uv_buf_init(buf, sizeof(buf));",
          "1945:   r = uv_fs_read(loop, &read_req, open_req1.result, &iov, 1, -1, NULL);",
          "1951:   iov = uv_buf_init(buf, sizeof(buf));",
          "1952:   r = uv_fs_read(loop, &read_req, open_req1.result, &iov, 1,",
          "1953:                  read_req.result, NULL);",
          "",
          "[Added Lines]",
          "1932:   r = uv_fs_read(loop, &read_req, open_req1.result, buf, sizeof(buf), -1,",
          "1933:       NULL);",
          "1939:   r = uv_fs_read(loop, &read_req, open_req1.result, buf, sizeof(buf),",
          "1940:       read_req.result, NULL);",
          "",
          "---------------"
        ],
        "test/test-spawn.c||test/test-spawn.c": [
          "File: test/test-spawn.c -> test/test-spawn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "218:   uv_file file;",
          "219:   uv_fs_t fs_req;",
          "220:   uv_stdio_container_t stdio[2];",
          "224:   unlink(\"stdout_file\");",
          "",
          "[Removed Lines]",
          "221:   uv_buf_t buf;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "247:   ASSERT(exit_cb_called == 1);",
          "248:   ASSERT(close_cb_called == 1);",
          "252:   ASSERT(r == 12);",
          "253:   uv_fs_req_cleanup(&fs_req);",
          "",
          "[Removed Lines]",
          "250:   buf = uv_buf_init(output, sizeof(output));",
          "251:   r = uv_fs_read(uv_default_loop(), &fs_req, file, &buf, 1, 0, NULL);",
          "",
          "[Added Lines]",
          "249:   r = uv_fs_read(uv_default_loop(), &fs_req, file, output, sizeof(output),",
          "250:       0, NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "272:   uv_file file;",
          "273:   uv_fs_t fs_req;",
          "274:   uv_stdio_container_t stdio[3];",
          "278:   unlink(\"stdout_file\");",
          "",
          "[Removed Lines]",
          "275:   uv_buf_t buf;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "303:   ASSERT(exit_cb_called == 1);",
          "304:   ASSERT(close_cb_called == 1);",
          "308:   ASSERT(r == 27);",
          "309:   uv_fs_req_cleanup(&fs_req);",
          "",
          "[Removed Lines]",
          "306:   buf = uv_buf_init(output, sizeof(output));",
          "307:   r = uv_fs_read(uv_default_loop(), &fs_req, file, &buf, 1, 0, NULL);",
          "",
          "[Added Lines]",
          "304:   r = uv_fs_read(uv_default_loop(), &fs_req, file, output, sizeof(output),",
          "305:       0, NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "422d2810b37d1ec8a12f967089d04039800c2b44",
      "candidate_info": {
        "commit_hash": "422d2810b37d1ec8a12f967089d04039800c2b44",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/422d2810b37d1ec8a12f967089d04039800c2b44",
        "files": [
          "include/uv.h",
          "src/unix/core.c",
          "src/win/util.c",
          "test/test-cwd-and-chdir.c",
          "test/test-fs.c"
        ],
        "message": "unix, windows: make uv_cwd be consistent with uv_exepath\n\nFixes #446",
        "before_after_code_files": [
          "include/uv.h||include/uv.h",
          "src/unix/core.c||src/unix/core.c",
          "src/win/util.c||src/win/util.c",
          "test/test-cwd-and-chdir.c||test/test-cwd-and-chdir.c",
          "test/test-fs.c||test/test-fs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2076: UV_EXTERN int uv_exepath(char* buffer, size_t* size);",
          "2082: UV_EXTERN int uv_chdir(const char* dir);",
          "",
          "[Removed Lines]",
          "2079: UV_EXTERN int uv_cwd(char* buffer, size_t size);",
          "",
          "[Added Lines]",
          "2079: UV_EXTERN int uv_cwd(char* buffer, size_t* size);",
          "",
          "---------------"
        ],
        "src/unix/core.c||src/unix/core.c": [
          "File: src/unix/core.c -> src/unix/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "589: }",
          "594:     return -EINVAL;",
          "600:     return -errno;",
          "602:   return 0;",
          "603: }",
          "",
          "[Removed Lines]",
          "592: int uv_cwd(char* buffer, size_t size) {",
          "593:   if (buffer == NULL)",
          "596:   if (size == 0)",
          "597:     return -EINVAL;",
          "599:   if (getcwd(buffer, size) == NULL)",
          "",
          "[Added Lines]",
          "592: int uv_cwd(char* buffer, size_t* size) {",
          "593:   if (buffer == NULL || size == NULL)",
          "596:   if (getcwd(buffer, *size) == NULL)",
          "",
          "---------------"
        ],
        "src/win/util.c||src/win/util.c": [
          "File: src/win/util.c -> src/win/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "163: }",
          "167:   DWORD utf16_len;",
          "168:   WCHAR utf16_buffer[MAX_PATH];",
          "169:   int r;",
          "172:     return UV_EINVAL;",
          "173:   }",
          "",
          "[Removed Lines]",
          "166: int uv_cwd(char* buffer, size_t size) {",
          "171:   if (buffer == NULL || size == 0) {",
          "",
          "[Added Lines]",
          "166: int uv_cwd(char* buffer, size_t* size) {",
          "171:   if (buffer == NULL || size == NULL) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "192:     utf16_buffer[utf16_len] = L'\\0';",
          "193:   }",
          "196:   r = WideCharToMultiByte(CP_UTF8,",
          "197:                           0,",
          "198:                           utf16_buffer,",
          "199:                           -1,",
          "200:                           buffer,",
          "202:                           NULL,",
          "203:                           NULL);",
          "204:   if (r == 0) {",
          "205:     return uv_translate_sys_error(GetLastError());",
          "206:   }",
          "208:   return 0;",
          "209: }",
          "",
          "[Removed Lines]",
          "201:                           size > INT_MAX ? INT_MAX : (int) size,",
          "",
          "[Added Lines]",
          "196:   r = WideCharToMultiByte(CP_UTF8,",
          "197:                           0,",
          "198:                           utf16_buffer,",
          "199:                           -1,",
          "200:                           NULL,",
          "201:                           0,",
          "202:                           NULL,",
          "203:                           NULL);",
          "204:   if (r == 0) {",
          "205:     return uv_translate_sys_error(GetLastError());",
          "206:   } else if (r > (int) *size) {",
          "208:     return UV_ENOBUFS;",
          "209:   }",
          "",
          "---------------"
        ],
        "test/test-cwd-and-chdir.c||test/test-cwd-and-chdir.c": [
          "File: test/test-cwd-and-chdir.c -> test/test-cwd-and-chdir.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:   char* last_slash;",
          "34:   int err;",
          "38:   ASSERT(err == 0);",
          "",
          "[Removed Lines]",
          "36:   size = sizeof(buffer_orig) / sizeof(buffer_orig[0]);",
          "37:   err = uv_cwd(buffer_orig, size);",
          "",
          "[Added Lines]",
          "36:   size = sizeof(buffer_orig);",
          "37:   err = uv_cwd(buffer_orig, &size);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:   err = uv_chdir(buffer_orig);",
          "56:   ASSERT(err == 0);",
          "59:   ASSERT(err == 0);",
          "61:   ASSERT(strcmp(buffer_orig, buffer_new) == 0);",
          "",
          "[Removed Lines]",
          "58:   err = uv_cwd(buffer_new, size);",
          "",
          "[Added Lines]",
          "58:   err = uv_cwd(buffer_new, &size);",
          "",
          "---------------"
        ],
        "test/test-fs.c||test/test-fs.c": [
          "File: test/test-fs.c -> test/test-fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1465: #ifdef _WIN32",
          "1466:   {",
          "1467:     static char src_path_buf[PATHMAX];",
          "1468:     strcpy(src_path_buf, \"\\\\\\\\?\\\\\");",
          "1470:     strcat(src_path_buf, \"\\\\test_dir\\\\\");",
          "1471:     test_dir = src_path_buf;",
          "1472:   }",
          "",
          "[Removed Lines]",
          "1469:     uv_cwd(src_path_buf + 4, sizeof(src_path_buf));",
          "",
          "[Added Lines]",
          "1468:     size_t size;",
          "1469:     size = sizeof(src_path_buf);",
          "1471:     uv_cwd(src_path_buf + 4, &size);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "409c7b37c123627604f719c489d1cf2def312942",
      "candidate_info": {
        "commit_hash": "409c7b37c123627604f719c489d1cf2def312942",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/409c7b37c123627604f719c489d1cf2def312942",
        "files": [
          "libuv.pc.in"
        ],
        "message": "build: add required libraries to libuv.pc.in",
        "before_after_code_files": [
          "libuv.pc.in||libuv.pc.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libuv.pc.in||libuv.pc.in": [
          "File: libuv.pc.in -> libuv.pc.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: Version: @PACKAGE_VERSION@",
          "8: Description: multi-platform support library with a focus on asynchronous I/O.",
          "11: Cflags: -I${includedir}",
          "",
          "[Removed Lines]",
          "10: Libs: -L${libdir} -luv",
          "",
          "[Added Lines]",
          "10: Libs: -L${libdir} -luv @LIBS@",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "43bef41031791b16ca94a58c33d6464e3e543e40",
      "candidate_info": {
        "commit_hash": "43bef41031791b16ca94a58c33d6464e3e543e40",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/43bef41031791b16ca94a58c33d6464e3e543e40",
        "files": [
          "include/uv-darwin.h",
          "src/unix/fsevents.c"
        ],
        "message": "fsevents: report errors to user",
        "before_after_code_files": [
          "include/uv-darwin.h||include/uv-darwin.h",
          "src/unix/fsevents.c||src/unix/fsevents.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv-darwin.h||include/uv-darwin.h": [
          "File: include/uv-darwin.h -> include/uv-darwin.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:   char* realpath;                                                             \\",
          "48:   int realpath_len;                                                           \\",
          "49:   int cf_flags;                                                               \\",
          "51:   uv_async_t* cf_cb;                                                          \\",
          "52:   void* cf_member[2];                                                         \\",
          "54:   uv_mutex_t cf_mutex;                                                        \\",
          "56: #define UV_STREAM_PRIVATE_PLATFORM_FIELDS                                     \\",
          "",
          "[Removed Lines]",
          "50:   void* cf_event;                                                             \\",
          "53:   uv_sem_t _cf_reserved;                                                      \\",
          "",
          "[Added Lines]",
          "51:   void* cf_events[2];                                                         \\",
          "53:   int cf_error;                                                               \\",
          "",
          "---------------"
        ],
        "src/unix/fsevents.c||src/unix/fsevents.c": [
          "File: src/unix/fsevents.c -> src/unix/fsevents.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: typedef struct uv__cf_loop_signal_s uv__cf_loop_signal_t;",
          "74: typedef struct uv__cf_loop_state_s uv__cf_loop_state_t;",
          "87: struct uv__cf_loop_signal_s {",
          "88:   QUEUE member;",
          "89:   uv_fs_event_t* handle;",
          "90: };",
          "92: struct uv__fsevents_event_s {",
          "93:   int events;",
          "95:   char path[1];",
          "96: };",
          "99: static void uv__cf_loop_cb(void* arg);",
          "100: static void* uv__cf_loop_runner(void* arg);",
          "",
          "[Removed Lines]",
          "76: struct uv__cf_loop_state_s {",
          "77:   CFRunLoopRef loop;",
          "78:   CFRunLoopSourceRef signal_source;",
          "79:   int fsevent_need_reschedule;",
          "80:   FSEventStreamRef fsevent_stream;",
          "81:   uv_sem_t fsevent_sem;",
          "82:   uv_mutex_t fsevent_mutex;",
          "83:   void* fsevent_handles[2];",
          "84:   int fsevent_handle_count;",
          "85: };",
          "94:   void* next;",
          "",
          "[Added Lines]",
          "82:   QUEUE member;",
          "87: struct uv__cf_loop_state_s {",
          "88:   CFRunLoopRef loop;",
          "89:   CFRunLoopSourceRef signal_source;",
          "90:   int fsevent_need_reschedule;",
          "91:   FSEventStreamRef fsevent_stream;",
          "92:   uv_sem_t fsevent_sem;",
          "93:   uv_mutex_t fsevent_mutex;",
          "94:   void* fsevent_handles[2];",
          "95:   unsigned int fsevent_handle_count;",
          "96: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144: #define UV__FSEVENTS_PROCESS(handle, block)                                   \\",
          "145:     do {                                                                      \\",
          "146:       uv__fsevents_event_t* event;                                            \\",
          "148:       uv_mutex_lock(&(handle)->cf_mutex);                                     \\",
          "151:       uv_mutex_unlock(&(handle)->cf_mutex);                                   \\",
          "156:           block                                                               \\",
          "159:         free(event);                                                          \\",
          "161:       }                                                                       \\",
          "162:     } while (0)",
          "",
          "[Removed Lines]",
          "147:       uv__fsevents_event_t* next;                                             \\",
          "149:       event = (handle)->cf_event;                                             \\",
          "150:       (handle)->cf_event = NULL;                                              \\",
          "152:       while (event != NULL) {                                                 \\",
          "155:         if (!uv__is_closing((handle)))                                        \\",
          "158:         next = event->next;                                                   \\",
          "160:         event = next;                                                         \\",
          "",
          "[Added Lines]",
          "146:       QUEUE events;                                                           \\",
          "147:       QUEUE* q;                                                               \\",
          "149:       int err;                                                                \\",
          "152:       QUEUE_INIT(&events);                                                    \\",
          "153:       if (!QUEUE_EMPTY(&(handle)->cf_events)) {                               \\",
          "154:         q = QUEUE_HEAD(&(handle)->cf_events);                                 \\",
          "155:         QUEUE_SPLIT(&(handle)->cf_events, q, &events);                        \\",
          "156:       }                                                                       \\",
          "158:       err = (handle)->cf_error;                                               \\",
          "159:       (handle)->cf_error = 0;                                                 \\",
          "162:       while (!QUEUE_EMPTY(&events)) {                                         \\",
          "163:         q = QUEUE_HEAD(&events);                                              \\",
          "164:         event = QUEUE_DATA(q, uv__fsevents_event_t, member);                  \\",
          "165:         QUEUE_REMOVE(q);                                                      \\",
          "169:         if (!uv__is_closing((handle)) && uv__is_active((handle)))             \\",
          "174:       if (err != 0 && !uv__is_closing((handle)) && uv__is_active((handle)))   \\",
          "175:         (handle)->cb((handle), NULL, 0, err);                                 \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "169:   handle = cb->data;",
          "171:   UV__FSEVENTS_PROCESS(handle, {",
          "174:   });",
          "178: }",
          "",
          "[Removed Lines]",
          "172:     if (handle->event_watcher.fd != -1)",
          "173:       handle->cb(handle, event->path[0] ? event->path : NULL, event->events, 0);",
          "176:   if (!uv__is_closing(handle) && handle->event_watcher.fd == -1)",
          "177:     uv__fsevents_close(handle);",
          "",
          "[Added Lines]",
          "186:     handle->cb(handle, event->path[0] ? event->path : NULL, event->events, 0);",
          "188: }",
          "192: static void uv__fsevents_push_event(uv_fs_event_t* handle,",
          "193:                                     QUEUE* events,",
          "194:                                     int err) {",
          "195:   assert(events != NULL || err != 0);",
          "196:   uv_mutex_lock(&handle->cf_mutex);",
          "199:   if (events != NULL)",
          "200:     QUEUE_ADD(&handle->cf_events, events);",
          "203:   if (err != 0)",
          "204:     handle->cf_error = err;",
          "205:   uv_mutex_unlock(&handle->cf_mutex);",
          "207:   uv_async_send(handle->cf_cb);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "195:   uv_loop_t* loop;",
          "196:   uv__cf_loop_state_t* state;",
          "197:   uv__fsevents_event_t* event;",
          "200:   loop = info;",
          "201:   state = loop->cf_state;",
          "",
          "[Removed Lines]",
          "198:   uv__fsevents_event_t* tail;",
          "",
          "[Added Lines]",
          "228:   QUEUE head;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "203:   paths = eventPaths;",
          "206:   QUEUE_FOREACH(q, &state->fsevent_handles) {",
          "207:     handle = QUEUE_DATA(q, uv_fs_event_t, cf_member);",
          "211:     for (i = 0; i < numEvents; i++) {",
          "",
          "[Removed Lines]",
          "208:     tail = NULL;",
          "",
          "[Added Lines]",
          "236:   uv_mutex_lock(&state->fsevent_mutex);",
          "239:     QUEUE_INIT(&head);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "260:       else",
          "261:         event->events = UV_RENAME;",
          "266:     }",
          "276:   }",
          "277: }",
          "282:   uv__cf_loop_state_t* state;",
          "283:   FSEventStreamContext ctx;",
          "284:   FSEventStreamRef ref;",
          "",
          "[Removed Lines]",
          "263:       if (tail != NULL)",
          "264:         tail->next = event;",
          "265:       tail = event;",
          "268:     if (tail != NULL) {",
          "269:       uv_mutex_lock(&handle->cf_mutex);",
          "270:       tail->next = handle->cf_event;",
          "271:       handle->cf_event = tail;",
          "272:       uv_mutex_unlock(&handle->cf_mutex);",
          "274:       uv_async_send(handle->cf_cb);",
          "275:     }",
          "281: static void uv__fsevents_create_stream(uv_loop_t* loop, CFArrayRef paths) {",
          "",
          "[Added Lines]",
          "294:       QUEUE_INSERT_TAIL(&head, &event->member);",
          "297:     if (!QUEUE_EMPTY(&head))",
          "298:       uv__fsevents_push_event(handle, &head, 0);",
          "300:   uv_mutex_unlock(&state->fsevent_mutex);",
          "305: static int uv__fsevents_create_stream(uv_loop_t* loop, CFArrayRef paths) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "316:   pFSEventStreamScheduleWithRunLoop(ref,",
          "317:                                     state->loop,",
          "322:   state->fsevent_stream = ref;",
          "323: }",
          "",
          "[Removed Lines]",
          "319:   if (!pFSEventStreamStart(ref))",
          "320:     abort();",
          "",
          "[Added Lines]",
          "343:   if (!pFSEventStreamStart(ref)) {",
          "344:     pFSEventStreamInvalidate(ref);",
          "345:     pFSEventStreamRelease(ref);",
          "346:     return -EMFILE;",
          "347:   }",
          "350:   return 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "352:   uv_fs_event_t* curr;",
          "353:   CFArrayRef cf_paths;",
          "354:   CFStringRef* paths;",
          "358:   state = handle->loop->cf_state;",
          "",
          "[Removed Lines]",
          "355:   int i;",
          "356:   int path_count;",
          "",
          "[Added Lines]",
          "383:   unsigned int i;",
          "384:   int err;",
          "385:   unsigned int path_count;",
          "388:   paths = NULL;",
          "389:   cf_paths = NULL;",
          "390:   err = 0;",
          "392:   i = 0;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "372:   uv__fsevents_destroy_stream(handle->loop);",
          "375:   uv_mutex_lock(&state->fsevent_mutex);",
          "376:   path_count = state->fsevent_handle_count;",
          "377:   if (path_count != 0) {",
          "378:     paths = malloc(sizeof(*paths) * path_count);",
          "382:     q = &state->fsevent_handles;",
          "384:       q = QUEUE_NEXT(q);",
          "385:       assert(q != &state->fsevent_handles);",
          "386:       curr = QUEUE_DATA(q, uv_fs_event_t, cf_member);",
          "",
          "[Removed Lines]",
          "379:     if (paths == NULL)",
          "380:       abort();",
          "383:     for (i = 0; i < path_count; i++) {",
          "",
          "[Added Lines]",
          "409:   err = -ENOMEM;",
          "416:     if (paths == NULL) {",
          "417:       uv_mutex_unlock(&state->fsevent_mutex);",
          "418:       goto final;",
          "419:     }",
          "422:     for (; i < path_count; i++) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "389:       paths[i] = pCFStringCreateWithCString(NULL,",
          "390:                                             curr->realpath,",
          "391:                                             pCFStringGetSystemEncoding());",
          "394:     }",
          "395:   }",
          "396:   uv_mutex_unlock(&state->fsevent_mutex);",
          "398:   if (path_count != 0) {",
          "400:     cf_paths = pCFArrayCreate(NULL, (const void**) paths, path_count, NULL);",
          "404:   }",
          "406: final:",
          "",
          "[Removed Lines]",
          "392:       if (paths[i] == NULL)",
          "393:         abort();",
          "401:     if (cf_paths == NULL)",
          "402:       abort();",
          "403:     uv__fsevents_create_stream(handle->loop, cf_paths);",
          "",
          "[Added Lines]",
          "431:       if (paths[i] == NULL) {",
          "432:         uv_mutex_unlock(&state->fsevent_mutex);",
          "433:         goto final;",
          "434:       }",
          "438:   err = 0;",
          "443:     if (cf_paths == NULL) {",
          "444:       err = -ENOMEM;",
          "445:       goto final;",
          "446:     }",
          "447:     err = uv__fsevents_create_stream(handle->loop, cf_paths);",
          "452:   if (err != 0) {",
          "453:     if (cf_paths == NULL) {",
          "454:       while (i != 0)",
          "455:         pCFRelease(paths[--i]);",
          "456:       free(paths);",
          "457:     } else {",
          "459:       pCFRelease(cf_paths);",
          "460:     }",
          "463:     uv_mutex_lock(&state->fsevent_mutex);",
          "464:     QUEUE_FOREACH(q, &state->fsevent_handles) {",
          "465:       curr = QUEUE_DATA(q, uv_fs_event_t, cf_member);",
          "466:       uv__fsevents_push_event(curr, NULL, err);",
          "467:     }",
          "468:     uv_mutex_unlock(&state->fsevent_mutex);",
          "469:   }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "722:     return -errno;",
          "723:   handle->realpath_len = strlen(handle->realpath);",
          "",
          "[Removed Lines]",
          "726:   handle->cf_event = NULL;",
          "",
          "[Added Lines]",
          "790:   QUEUE_INIT(&handle->cf_events);",
          "791:   handle->cf_error = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d667653f77729b03fd63978d7e032e3c2b5f607c",
      "candidate_info": {
        "commit_hash": "d667653f77729b03fd63978d7e032e3c2b5f607c",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/d667653f77729b03fd63978d7e032e3c2b5f607c",
        "files": [
          "src/win/process.c"
        ],
        "message": "windows: report uv_process_t exit code correctly\n\nA stupid oversight in 66ae0ff would cause a random value to be reported\nas the exit code for a 'normally exited' child process.",
        "before_after_code_files": [
          "src/win/process.c||src/win/process.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/process.c||src/win/process.c": [
          "File: src/win/process.c -> src/win/process.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "731: void uv_process_proc_exit(uv_loop_t* loop, uv_process_t* handle) {",
          "733:   DWORD status;",
          "735:   assert(handle->exit_cb_pending);",
          "",
          "[Removed Lines]",
          "732:   int exit_code;",
          "",
          "[Added Lines]",
          "732:   int64_t exit_code;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "755:   if (handle->spawn_error) {",
          "757:     exit_code = uv_translate_sys_error(handle->spawn_error);",
          "760:     exit_code = uv_translate_sys_error(GetLastError());",
          "761:   }",
          "",
          "[Removed Lines]",
          "758:   } else if (!GetExitCodeProcess(handle->process_handle, &status)) {",
          "",
          "[Added Lines]",
          "758:   } else if (GetExitCodeProcess(handle->process_handle, &status)) {",
          "759:     exit_code = status;",
          "760:   } else {",
          "",
          "---------------"
        ]
      }
    }
  ]
}