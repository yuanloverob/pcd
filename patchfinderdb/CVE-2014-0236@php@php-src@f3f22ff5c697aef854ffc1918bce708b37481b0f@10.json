{
  "cve_id": "CVE-2014-0236",
  "cve_desc": "file before 5.18, as used in the Fileinfo component in PHP before 5.6.0, allows remote attackers to cause a denial of service (NULL pointer dereference and application crash) via a zero root_storage value in a CDF file, related to cdf.c and readcdf.c.",
  "repo": "php/php-src",
  "patch_hash": "f3f22ff5c697aef854ffc1918bce708b37481b0f",
  "patch_info": {
    "commit_hash": "f3f22ff5c697aef854ffc1918bce708b37481b0f",
    "repo": "php/php-src",
    "commit_url": "https://github.com/php/php-src/commit/f3f22ff5c697aef854ffc1918bce708b37481b0f",
    "files": [
      "NEWS",
      "ext/fileinfo/libmagic/cdf.c",
      "ext/fileinfo/libmagic/cdf.h",
      "ext/fileinfo/libmagic/readcdf.c"
    ],
    "message": "Fixed bug #67329 fileinfo: NULL pointer deference flaw by processing certain CDF files",
    "before_after_code_files": [
      "ext/fileinfo/libmagic/cdf.c||ext/fileinfo/libmagic/cdf.c",
      "ext/fileinfo/libmagic/cdf.h||ext/fileinfo/libmagic/cdf.h",
      "ext/fileinfo/libmagic/readcdf.c||ext/fileinfo/libmagic/readcdf.c"
    ]
  },
  "patch_diff": {
    "ext/fileinfo/libmagic/cdf.c||ext/fileinfo/libmagic/cdf.c": [
      "File: ext/fileinfo/libmagic/cdf.c -> ext/fileinfo/libmagic/cdf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: #include \"file.h\"",
      "37: #ifndef lint",
      "39: #endif",
      "41: #include <assert.h>",
      "",
      "[Removed Lines]",
      "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.53 2013/02/26 16:20:42 christos Exp $\")",
      "",
      "[Added Lines]",
      "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.55 2014/02/27 23:26:17 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "689: int",
      "690: cdf_read_short_stream(const cdf_info_t *info, const cdf_header_t *h,",
      "692: {",
      "693:  size_t i;",
      "694:  const cdf_directory_t *d;",
      "696:  for (i = 0; i < dir->dir_len; i++)",
      "697:   if (dir->dir_tab[i].d_type == CDF_DIR_TYPE_ROOT_STORAGE)",
      "698:    break;",
      "",
      "[Removed Lines]",
      "691:     const cdf_sat_t *sat, const cdf_dir_t *dir, cdf_stream_t *scn)",
      "",
      "[Added Lines]",
      "691:     const cdf_sat_t *sat, const cdf_dir_t *dir, cdf_stream_t *scn,",
      "692:     const cdf_directory_t **root)",
      "",
      "---------------"
    ],
    "ext/fileinfo/libmagic/cdf.h||ext/fileinfo/libmagic/cdf.h": [
      "File: ext/fileinfo/libmagic/cdf.h -> ext/fileinfo/libmagic/cdf.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "300: int cdf_read_ssat(const cdf_info_t *, const cdf_header_t *, const cdf_sat_t *,",
      "301:     cdf_sat_t *);",
      "302: int cdf_read_short_stream(const cdf_info_t *, const cdf_header_t *,",
      "304: int cdf_read_property_info(const cdf_stream_t *, const cdf_header_t *, uint32_t,",
      "305:     cdf_property_info_t **, size_t *, size_t *);",
      "306: int cdf_read_summary_info(const cdf_info_t *, const cdf_header_t *,",
      "",
      "[Removed Lines]",
      "303:     const cdf_sat_t *, const cdf_dir_t *, cdf_stream_t *);",
      "",
      "[Added Lines]",
      "303:     const cdf_sat_t *, const cdf_dir_t *, cdf_stream_t *,",
      "304:     const cdf_directory_t **);",
      "",
      "---------------"
    ],
    "ext/fileinfo/libmagic/readcdf.c||ext/fileinfo/libmagic/readcdf.c": [
      "File: ext/fileinfo/libmagic/readcdf.c -> ext/fileinfo/libmagic/readcdf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: #include \"file.h\"",
      "28: #ifndef lint",
      "30: #endif",
      "32: #include <stdlib.h>",
      "",
      "[Removed Lines]",
      "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.37 2014/01/06 13:41:18 rrt Exp $\")",
      "",
      "[Added Lines]",
      "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.40 2014/03/06 15:23:33 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "77: # define strcasestr strstr",
      "78: #endif",
      "80: private const char *",
      "81: cdf_app_to_mime(const char *vbuf, const struct nv *nv)",
      "82: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "80: static const struct cv {",
      "81:  uint64_t clsid[2];",
      "82:  const char *mime;",
      "83: } clsid2mime[] = {",
      "84:  {",
      "85: #ifdef PHP_WIN32",
      "86:   { 0x00000000000c1084ui64, 0x46000000000000c0ui64 },",
      "87: #else",
      "88:   { 0x00000000000c1084LLU, 0x46000000000000c0LLU },",
      "89: #endif",
      "90:   \"x-msi\",",
      "91:  }",
      "92: }, clsid2desc[] = {",
      "93:  {",
      "94: #ifdef PHP_WIN32",
      "95:   { 0x00000000000c1084ui64, 0x46000000000000c0ui64 },",
      "96: #else",
      "97:   { 0x00000000000c1084LLU, 0x46000000000000c0LLU },",
      "98: #endif",
      "99:   \"MSI Installer\",",
      "100:  },",
      "101: };",
      "103: private const char *",
      "104: cdf_clsid_to_mime(const uint64_t clsid[2], const struct cv *cv)",
      "105: {",
      "106:  size_t i;",
      "107:  for (i = 0; cv[i].mime != NULL; i++) {",
      "108:   if (clsid[0] == cv[i].clsid[0] && clsid[1] == cv[i].clsid[1])",
      "109:    return cv[i].mime;",
      "110:  }",
      "111:  return NULL;",
      "112: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96: private int",
      "97: cdf_file_property_info(struct magic_set *ms, const cdf_property_info_t *info,",
      "99: {",
      "100:         size_t i;",
      "101:         cdf_timestamp_t tp;",
      "",
      "[Removed Lines]",
      "98:     size_t count)",
      "",
      "[Added Lines]",
      "132:     size_t count, const cdf_directory_t *root_storage)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "108:  memset(&ts, 0, sizeof(ts));",
      "110:         for (i = 0; i < count; i++) {",
      "111:                 cdf_print_property_name(buf, sizeof(buf), info[i].pi_id);",
      "112:                 switch (info[i].pi_type) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "144:         if (!NOTMIME(ms) && root_storage)",
      "145:   str = cdf_clsid_to_mime(root_storage->d_storage_uuid, clsid2mime);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "163:                                                     buf, vbuf) == -1)",
      "164:                                                         return -1;",
      "165:                                         }",
      "167:         CDF_PROPERTY_NAME_OF_APPLICATION) {",
      "168:      str = cdf_app_to_mime(vbuf, app2mime);",
      "169:     }",
      "",
      "[Removed Lines]",
      "166:                                 } else if (info[i].pi_id ==",
      "",
      "[Added Lines]",
      "203:                                 } else if (str == NULL && info[i].pi_id ==",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "218: private int",
      "219: cdf_file_summary_info(struct magic_set *ms, const cdf_header_t *h,",
      "221: {",
      "222:         cdf_summary_info_header_t si;",
      "223:         cdf_property_info_t *info;",
      "",
      "[Removed Lines]",
      "220:     const cdf_stream_t *sst)",
      "",
      "[Added Lines]",
      "257:     const cdf_stream_t *sst, const cdf_directory_t *root_storage)",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "228:                 return -1;",
      "230:         if (NOTMIME(ms)) {",
      "231:                 if (file_printf(ms, \"Composite Document File V2 Document\")",
      "232:       == -1)",
      "233:                         return -1;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "268:   const char *str;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "255:                                 return -2;",
      "256:                         break;",
      "257:                 }",
      "261:         free(info);",
      "263:         return m == -1 ? -2 : m;",
      "",
      "[Removed Lines]",
      "258:         }",
      "260:         m = cdf_file_property_info(ms, info, count);",
      "",
      "[Added Lines]",
      "297:   if (root_storage) {",
      "298:    str = cdf_clsid_to_mime(root_storage->d_storage_uuid, clsid2desc);",
      "299:    if (str)",
      "300:     if (file_printf(ms, \", %s\", str) == -1)",
      "301:      return -2;",
      "302:    }",
      "303:   }",
      "305:         m = cdf_file_property_info(ms, info, count, root_storage);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "275:         int i;",
      "276:         const char *expn = \"\";",
      "277:         const char *corrupt = \"corrupt: \";",
      "279:         info.i_fd = fd;",
      "280:         info.i_buf = buf;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "323:         const cdf_directory_t *root_storage;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "308:                 goto out2;",
      "309:         }",
      "312:                 expn = \"Cannot read short stream\";",
      "313:                 goto out3;",
      "314:         }",
      "",
      "[Removed Lines]",
      "311:         if ((i = cdf_read_short_stream(&info, &h, &sat, &dir, &sst)) == -1) {",
      "",
      "[Added Lines]",
      "357:         if ((i = cdf_read_short_stream(&info, &h, &sat, &dir, &sst,",
      "358:      &root_storage)) == -1) {",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "329: #ifdef CDF_DEBUG",
      "330:         cdf_dump_summary_info(&h, &scn);",
      "331: #endif",
      "334:  if (i == 0) {",
      "335:   const char *str = NULL;",
      "336:   cdf_directory_t *d;",
      "337:   char name[__arraycount(d->d_name)];",
      "338:   size_t j, k;",
      "340:    d = &dir.dir_tab[j];",
      "341:    for (k = 0; k < sizeof(name); k++)",
      "342:     name[k] = (char)cdf_tole2(d->d_name[k]);",
      "349:   }",
      "350:   if (NOTMIME(ms)) {",
      "351:    if (str != NULL) {",
      "",
      "[Removed Lines]",
      "332:         if ((i = cdf_file_summary_info(ms, &h, &scn)) < 0)",
      "333:                 expn = \"Can't expand summary_info\";",
      "339:   for (j = 0; j < dir.dir_len; j++) {",
      "343:    if (NOTMIME(ms))",
      "344:     str = cdf_app_to_mime(name, name2desc);",
      "345:    else",
      "346:     str = cdf_app_to_mime(name, name2mime);",
      "347:    if (str != NULL)",
      "348:     break;",
      "",
      "[Added Lines]",
      "379:         if ((i = cdf_file_summary_info(ms, &h, &scn, root_storage)) < 0)",
      "380:             expn = \"Can't expand summary_info\";",
      "388:   for (j = 0; str == NULL && j < dir.dir_len; j++) {",
      "392:    str = cdf_app_to_mime(name,",
      "393:        NOTMIME(ms) ? name2desc : name2mime);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "181323eecd6799ff7b64764e7fff94a0db33cca8",
      "candidate_info": {
        "commit_hash": "181323eecd6799ff7b64764e7fff94a0db33cca8",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/181323eecd6799ff7b64764e7fff94a0db33cca8",
        "files": [
          ".travis.yml",
          "travis/ci.sh"
        ],
        "message": "Check for all phpdbg compitble php versions",
        "before_after_code_files": [
          "travis/ci.sh||travis/ci.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "travis/ci.sh||travis/ci.sh": [
          "File: travis/ci.sh -> travis/ci.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/usr/bin/env sh",
          "2: git clone https://github.com/php/php-src",
          "3: cd php-src/sapi",
          "4: rm -rf phpdbg",
          "5: git clone https://github.com/krakjoe/phpdbg.git",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: git checkout $PHP",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7: ./buildconf --force",
          "8: ./configure --disable-all --enable-phpdbg --enable-maintainer-zts",
          "9: make",
          "",
          "[Removed Lines]",
          "10: make test-phpdbg",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5bdfa4d1c6042f7ba9d9492bea805db025e6995a",
      "candidate_info": {
        "commit_hash": "5bdfa4d1c6042f7ba9d9492bea805db025e6995a",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/5bdfa4d1c6042f7ba9d9492bea805db025e6995a",
        "files": [
          "ext/standard/php_fopen_wrapper.c"
        ],
        "message": "remove useless indirection\n\nthe stream was initialized within the ops\nin a prior version of the slim_post_data patch",
        "before_after_code_files": [
          "ext/standard/php_fopen_wrapper.c||ext/standard/php_fopen_wrapper.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ext/standard/php_fopen_wrapper.c||ext/standard/php_fopen_wrapper.c": [
          "File: ext/standard/php_fopen_wrapper.c -> ext/standard/php_fopen_wrapper.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: };",
          "68:  off_t position;",
          "69: } php_stream_input_t;",
          "",
          "[Removed Lines]",
          "67:  php_stream **body_ptr;",
          "",
          "[Added Lines]",
          "67:  php_stream *body;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:   int read_bytes = sapi_read_post_block(buf, count TSRMLS_CC);",
          "87:   if (read_bytes > 0) {",
          "90:   }",
          "91:  }",
          "96:  if (!read || read == (size_t) -1) {",
          "97:   stream->eof = 1;",
          "",
          "[Removed Lines]",
          "88:    php_stream_seek(*input->body_ptr, 0, SEEK_END);",
          "89:    php_stream_write(*input->body_ptr, buf, read_bytes);",
          "93:  php_stream_seek(*input->body_ptr, input->position, SEEK_SET);",
          "94:  read = php_stream_read(*input->body_ptr, buf, count);",
          "",
          "[Added Lines]",
          "88:    php_stream_seek(input->body, 0, SEEK_END);",
          "89:    php_stream_write(input->body, buf, read_bytes);",
          "93:  php_stream_seek(input->body, input->position, SEEK_SET);",
          "94:  read = php_stream_read(input->body, buf, count);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "122: {",
          "123:  php_stream_input_t *input = stream->abstract;",
          "128:   return sought;",
          "129:  }",
          "",
          "[Removed Lines]",
          "125:  if (*input->body_ptr) {",
          "126:   int sought = php_stream_seek(*input->body_ptr, offset, whence);",
          "",
          "[Added Lines]",
          "125:  if (input->body) {",
          "126:   int sought = php_stream_seek(input->body, offset, whence);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "228:   }",
          "230:   input = ecalloc(1, sizeof(*input));",
          "233:   } else {",
          "235:   }",
          "237:   return php_stream_alloc(&php_stream_input_ops, input, 0, \"rb\");",
          "",
          "[Removed Lines]",
          "231:   if (*(input->body_ptr = &SG(request_info).request_body)) {",
          "232:    php_stream_rewind(*input->body_ptr);",
          "",
          "[Added Lines]",
          "231:   if ((input->body = SG(request_info).request_body)) {",
          "232:    php_stream_rewind(input->body);",
          "234:    input->body = php_stream_temp_create(TEMP_STREAM_DEFAULT, SAPI_POST_BLOCK_SIZE);",
          "235:    SG(request_info).request_body = input->body;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ac89660306fe0e0a94173ce5b065b71e94ac525",
      "candidate_info": {
        "commit_hash": "4ac89660306fe0e0a94173ce5b065b71e94ac525",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/4ac89660306fe0e0a94173ce5b065b71e94ac525",
        "files": [
          "phpdbg_help.c"
        ],
        "message": "Fix typo in `finish` help\n\nFixes #96",
        "before_after_code_files": [
          "phpdbg_help.c||phpdbg_help.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "phpdbg_help.c||phpdbg_help.c": [
          "File: phpdbg_help.c -> phpdbg_help.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "613: {\"finish\",",
          "614: \"The **finish** command causes control to be passed back to the vm, continuing execution.  Any \"",
          "615: \"breakpoints that are encountered within the current stack frame will be skipped.  Execution \"",
          "617: \"completion of the script\" CR CR",
          "619: \"Note when **step**ping is enabled, any opcode steps within the current stack frame are also \"",
          "",
          "[Removed Lines]",
          "616: \"will then continue until the next breakpoint after leaving the stack frame or unitil \"",
          "",
          "[Added Lines]",
          "616: \"will then continue until the next breakpoint after leaving the stack frame or until \"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "844a046945c6cf2e44f8cd612d48321c9f799bef",
      "candidate_info": {
        "commit_hash": "844a046945c6cf2e44f8cd612d48321c9f799bef",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/844a046945c6cf2e44f8cd612d48321c9f799bef",
        "files": [
          "ext/intl/locale/locale_methods.c",
          "ext/intl/tests/locale_parse_locale2.phpt"
        ],
        "message": "Fix bug #67349: Locale::parseLocale Double Free",
        "before_after_code_files": [
          "ext/intl/locale/locale_methods.c||ext/intl/locale/locale_methods.c",
          "ext/intl/tests/locale_parse_locale2.phpt||ext/intl/tests/locale_parse_locale2.phpt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ext/intl/locale/locale_methods.c||ext/intl/locale/locale_methods.c": [
          "File: ext/intl/locale/locale_methods.c -> ext/intl/locale/locale_methods.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "269:   grOffset =  findOffset( LOC_GRANDFATHERED , loc_name );",
          "270:   if( grOffset >= 0 ){",
          "271:    if( strcmp(tag_name , LOC_LANG_TAG)==0 ){",
          "274:    } else {",
          "276:     return NULL;",
          "",
          "[Removed Lines]",
          "272:     tag_value = estrdup(loc_name);",
          "273:     return tag_value;",
          "",
          "[Added Lines]",
          "272:     return estrdup(loc_name);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "280:  if( fromParseLocale==1 ){",
          "282:   if( strcmp(tag_name , LOC_LANG_TAG)==0 ){",
          "285:    }",
          "286:   }",
          "",
          "[Removed Lines]",
          "283:    if( strlen(loc_name)>1 && (isIDPrefix(loc_name) ==1 ) ){",
          "284:     return (char *)loc_name;",
          "",
          "[Added Lines]",
          "282:    if( strlen(loc_name)>1 && (isIDPrefix(loc_name) == 1) ){",
          "283:     return estrdup(loc_name);",
          "",
          "---------------"
        ],
        "ext/intl/tests/locale_parse_locale2.phpt||ext/intl/tests/locale_parse_locale2.phpt": [
          "File: ext/intl/tests/locale_parse_locale2.phpt -> ext/intl/tests/locale_parse_locale2.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:         'de-419-DE',",
          "65:         'a-DE',",
          "67:     );",
          "",
          "[Removed Lines]",
          "66:         'ar-a-aaa-b-bbb-a-ccc'",
          "",
          "[Added Lines]",
          "66:         'ar-a-aaa-b-bbb-a-ccc',",
          "67:  'x-AAAAAA',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "201: ---------------------",
          "202: ar-a-aaa-b-bbb-a-ccc:",
          "203: language : 'ar' ,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205: ---------------------",
          "206: x-AAAAAA:",
          "207: private0 : 'AAAAAA' ,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3ad8616aff458a11b5f4121139734907e5431f0e",
      "candidate_info": {
        "commit_hash": "3ad8616aff458a11b5f4121139734907e5431f0e",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/3ad8616aff458a11b5f4121139734907e5431f0e",
        "files": [
          "sapi/phpdbg/phpdbg.c"
        ],
        "message": "Added stdion/stdout/stderr constsnts and their php:// wrappers Fixes issue #85",
        "before_after_code_files": [
          "sapi/phpdbg/phpdbg.c||sapi/phpdbg/phpdbg.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "sapi/phpdbg/phpdbg.c||sapi/phpdbg/phpdbg.c": [
          "File: sapi/phpdbg/phpdbg.c -> sapi/phpdbg/phpdbg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "533:  fflush(PHPDBG_G(io)[PHPDBG_STDOUT]);",
          "538: static sapi_module_struct phpdbg_sapi_module = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "538: {",
          "539:  zval *zin, *zout, *zerr;",
          "540:  php_stream *s_in, *s_out, *s_err;",
          "541:  php_stream_context *sc_in=NULL, *sc_out=NULL, *sc_err=NULL;",
          "542:  zend_constant ic, oc, ec;",
          "544:  MAKE_STD_ZVAL(zin);",
          "545:  MAKE_STD_ZVAL(zout);",
          "546:  MAKE_STD_ZVAL(zerr);",
          "548:  s_in  = php_stream_open_wrapper_ex(\"php://stdin\",  \"rb\", 0, NULL, sc_in);",
          "549:  s_out = php_stream_open_wrapper_ex(\"php://stdout\", \"wb\", 0, NULL, sc_out);",
          "550:  s_err = php_stream_open_wrapper_ex(\"php://stderr\", \"wb\", 0, NULL, sc_err);",
          "552:  if (s_in==NULL || s_out==NULL || s_err==NULL) {",
          "553:   FREE_ZVAL(zin);",
          "554:   FREE_ZVAL(zout);",
          "555:   FREE_ZVAL(zerr);",
          "556:   if (s_in) php_stream_close(s_in);",
          "557:   if (s_out) php_stream_close(s_out);",
          "558:   if (s_err) php_stream_close(s_err);",
          "559:   return;",
          "560:  }",
          "562: #if PHP_DEBUG",
          "564:  s_out->flags |= PHP_STREAM_FLAG_NO_CLOSE;",
          "565:  s_err->flags |= PHP_STREAM_FLAG_NO_CLOSE;",
          "566: #endif",
          "568:  php_stream_to_zval(s_in,  zin);",
          "569:  php_stream_to_zval(s_out, zout);",
          "570:  php_stream_to_zval(s_err, zerr);",
          "572:  ic.value = *zin;",
          "573:  ic.flags = CONST_CS;",
          "574:  ic.name = zend_strndup(ZEND_STRL(\"STDIN\"));",
          "575:  ic.name_len = sizeof(\"STDIN\");",
          "576:  ic.module_number = 0;",
          "577:  zend_register_constant(&ic TSRMLS_CC);",
          "579:  oc.value = *zout;",
          "580:  oc.flags = CONST_CS;",
          "581:  oc.name = zend_strndup(ZEND_STRL(\"STDOUT\"));",
          "582:  oc.name_len = sizeof(\"STDOUT\");",
          "583:  oc.module_number = 0;",
          "584:  zend_register_constant(&oc TSRMLS_CC);",
          "586:  ec.value = *zerr;",
          "587:  ec.flags = CONST_CS;",
          "588:  ec.name = zend_strndup(ZEND_STRL(\"STDERR\"));",
          "589:  ec.name_len = sizeof(\"STDERR\");",
          "590:  ec.module_number = 0;",
          "591:  zend_register_constant(&ec TSRMLS_CC);",
          "593:  FREE_ZVAL(zin);",
          "594:  FREE_ZVAL(zout);",
          "595:  FREE_ZVAL(zerr);",
          "596: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1263:   phpdbg_set_prompt(PROMPT TSRMLS_CC);",
          "1265:   if (show_banner) {",
          "1267:    phpdbg_welcome((cleaning > 0) TSRMLS_CC);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1329:   phpdbg_register_file_handles(TSRMLS_C);",
          "",
          "---------------"
        ]
      }
    }
  ]
}