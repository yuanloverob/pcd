{
  "cve_id": "CVE-2020-15174",
  "cve_desc": "In Electron before versions 11.0.0-beta.1, 10.0.1, 9.3.0 or 8.5.1 the `will-navigate` event that apps use to prevent navigations to unexpected destinations as per our security recommendations can be bypassed when a sub-frame performs a top-frame navigation across sites. The issue is patched in versions 11.0.0-beta.1, 10.0.1, 9.3.0 or 8.5.1 As a workaround sandbox all your iframes using the sandbox attribute. This will prevent them creating top-frame navigations and is good practice anyway.",
  "repo": "electron/electron",
  "patch_hash": "18613925610ba319da7f497b6deed85ad712c59b",
  "patch_info": {
    "commit_hash": "18613925610ba319da7f497b6deed85ad712c59b",
    "repo": "electron/electron",
    "commit_url": "https://github.com/electron/electron/commit/18613925610ba319da7f497b6deed85ad712c59b",
    "files": [
      "shell/browser/api/electron_api_web_contents.cc",
      "shell/browser/electron_navigation_throttle.cc",
      "shell/browser/electron_navigation_throttle.h",
      "spec-main/api-browser-window-spec.ts"
    ],
    "message": "refactor: wire will-navigate up to a navigation throttle instead of OpenURL (#25108)\n\n* refactor: wire will-navigate up to a navigation throttle instead of OpenURL (#25065)\n\n* refactor: wire will-navigate up to a navigation throttle instead of OpenURL\n\n* spec: add test for x-site _top navigation\n\n* chore: old code be old",
    "before_after_code_files": [
      "shell/browser/api/electron_api_web_contents.cc||shell/browser/api/electron_api_web_contents.cc",
      "shell/browser/electron_navigation_throttle.cc||shell/browser/electron_navigation_throttle.cc",
      "shell/browser/electron_navigation_throttle.h||shell/browser/electron_navigation_throttle.h",
      "spec-main/api-browser-window-spec.ts||spec-main/api-browser-window-spec.ts"
    ]
  },
  "patch_diff": {
    "shell/browser/api/electron_api_web_contents.cc||shell/browser/api/electron_api_web_contents.cc": [
      "File: shell/browser/api/electron_api_web_contents.cc -> shell/browser/api/electron_api_web_contents.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "743:     return nullptr;",
      "744:   }",
      "752:   if (IsDestroyed())",
      "753:     return nullptr;",
      "",
      "[Removed Lines]",
      "747:   if (Emit(\"will-navigate\", params.url))",
      "748:     return nullptr;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "shell/browser/electron_navigation_throttle.cc||shell/browser/electron_navigation_throttle.cc": [
      "File: shell/browser/electron_navigation_throttle.cc -> shell/browser/electron_navigation_throttle.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "19:   return \"ElectronNavigationThrottle\";",
      "20: }",
      "22: content::NavigationThrottle::ThrottleCheckResult",
      "23: ElectronNavigationThrottle::WillRedirectRequest() {",
      "24:   auto* handle = navigation_handle();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: content::NavigationThrottle::ThrottleCheckResult",
      "23: ElectronNavigationThrottle::WillStartRequest() {",
      "24:   auto* handle = navigation_handle();",
      "25:   auto* contents = handle->GetWebContents();",
      "26:   if (!contents) {",
      "27:     NOTREACHED();",
      "28:     return PROCEED;",
      "29:   }",
      "31:   v8::Isolate* isolate = v8::Isolate::GetCurrent();",
      "32:   v8::HandleScope scope(isolate);",
      "33:   auto api_contents = electron::api::WebContents::From(isolate, contents);",
      "34:   if (api_contents.IsEmpty()) {",
      "36:     return PROCEED;",
      "37:   }",
      "39:   if (handle->IsRendererInitiated() && handle->IsInMainFrame() &&",
      "40:       api_contents->EmitNavigationEvent(\"will-navigate\", handle)) {",
      "41:     return CANCEL;",
      "42:   }",
      "43:   return PROCEED;",
      "44: }",
      "",
      "---------------"
    ],
    "shell/browser/electron_navigation_throttle.h||shell/browser/electron_navigation_throttle.h": [
      "File: shell/browser/electron_navigation_throttle.h -> shell/browser/electron_navigation_throttle.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "14:   explicit ElectronNavigationThrottle(content::NavigationHandle* handle);",
      "15:   ~ElectronNavigationThrottle() override;",
      "17:   ElectronNavigationThrottle::ThrottleCheckResult WillRedirectRequest()",
      "18:       override;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17:   ElectronNavigationThrottle::ThrottleCheckResult WillStartRequest() override;",
      "",
      "---------------"
    ],
    "spec-main/api-browser-window-spec.ts||spec-main/api-browser-window-spec.ts": [
      "File: spec-main/api-browser-window-spec.ts -> spec-main/api-browser-window-spec.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "442:         let server = null as unknown as http.Server;",
      "443:         let url = null as unknown as string;",
      "444:         before((done) => {",
      "446:           server.listen(0, '127.0.0.1', () => {",
      "447:             url = `http://127.0.0.1:${(server.address() as AddressInfo).port}/`;",
      "448:             done();",
      "",
      "[Removed Lines]",
      "445:           server = http.createServer((req, res) => { res.end(''); });",
      "",
      "[Added Lines]",
      "445:           server = http.createServer((req, res) => {",
      "446:             if (req.url === '/navigate-top') {",
      "447:               res.end('<a target=_top href=\"/\">navigate _top</a>');",
      "448:             } else {",
      "449:               res.end('');",
      "450:             }",
      "451:           });",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "506:           expect(navigatedTo).to.equal(url);",
      "507:           expect(w.webContents.getURL()).to.equal('about:blank');",
      "508:         });",
      "509:       });",
      "511:       describe('will-redirect event', () => {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "516:         it('is triggered when a cross-origin iframe navigates _top', async () => {",
      "517:           await w.loadURL(`data:text/html,<iframe src=\"http://127.0.0.1:${(server.address() as AddressInfo).port}/navigate-top\"></iframe>`);",
      "518:           await delay(1000);",
      "519:           w.webContents.debugger.attach('1.1');",
      "520:           const targets = await w.webContents.debugger.sendCommand('Target.getTargets');",
      "521:           const iframeTarget = targets.targetInfos.find((t: any) => t.type === 'iframe');",
      "522:           const { sessionId } = await w.webContents.debugger.sendCommand('Target.attachToTarget', {",
      "523:             targetId: iframeTarget.targetId,",
      "524:             flatten: true",
      "525:           });",
      "526:           await w.webContents.debugger.sendCommand('Input.dispatchMouseEvent', {",
      "527:             type: 'mousePressed',",
      "528:             x: 10,",
      "529:             y: 10,",
      "530:             clickCount: 1,",
      "531:             button: 'left'",
      "532:           }, sessionId);",
      "533:           await w.webContents.debugger.sendCommand('Input.dispatchMouseEvent', {",
      "534:             type: 'mouseReleased',",
      "535:             x: 10,",
      "536:             y: 10,",
      "537:             clickCount: 1,",
      "538:             button: 'left'",
      "539:           }, sessionId);",
      "540:           let willNavigateEmitted = false;",
      "541:           w.webContents.on('will-navigate', () => {",
      "542:             willNavigateEmitted = true;",
      "543:           });",
      "544:           await emittedOnce(w.webContents, 'did-navigate');",
      "545:           expect(willNavigateEmitted).to.be.true();",
      "546:         });",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a25d7fa440603020512222c54dd6862d37b02f63",
      "candidate_info": {
        "commit_hash": "a25d7fa440603020512222c54dd6862d37b02f63",
        "repo": "electron/electron",
        "commit_url": "https://github.com/electron/electron/commit/a25d7fa440603020512222c54dd6862d37b02f63",
        "files": [
          "shell/browser/common_web_contents_delegate.cc",
          "shell/renderer/electron_sandboxed_renderer_client.cc",
          "shell/renderer/electron_sandboxed_renderer_client.h",
          "spec-main/api-browser-window-spec.ts",
          "spec/fixtures/pages/will-navigate.html"
        ],
        "message": "fix: emit will-navigate for sandboxed contents (#22188)",
        "before_after_code_files": [
          "shell/browser/common_web_contents_delegate.cc||shell/browser/common_web_contents_delegate.cc",
          "shell/renderer/electron_sandboxed_renderer_client.cc||shell/renderer/electron_sandboxed_renderer_client.cc",
          "shell/renderer/electron_sandboxed_renderer_client.h||shell/renderer/electron_sandboxed_renderer_client.h",
          "spec-main/api-browser-window-spec.ts||spec-main/api-browser-window-spec.ts",
          "spec/fixtures/pages/will-navigate.html||spec/fixtures/pages/will-navigate.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "spec-main/api-browser-window-spec.ts||spec-main/api-browser-window-spec.ts"
          ],
          "candidate": [
            "spec-main/api-browser-window-spec.ts||spec-main/api-browser-window-spec.ts"
          ]
        }
      },
      "candidate_diff": {
        "shell/browser/common_web_contents_delegate.cc||shell/browser/common_web_contents_delegate.cc": [
          "File: shell/browser/common_web_contents_delegate.cc -> shell/browser/common_web_contents_delegate.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "292:   load_url_params.should_replace_current_entry =",
          "293:       params.should_replace_current_entry;",
          "294:   load_url_params.is_renderer_initiated = params.is_renderer_initiated;",
          "295:   load_url_params.initiator_origin = params.initiator_origin;",
          "298:   source->GetController().LoadURLWithParams(load_url_params);",
          "299:   return source;",
          "",
          "[Removed Lines]",
          "296:   load_url_params.should_clear_history_list = true;",
          "",
          "[Added Lines]",
          "295:   load_url_params.started_from_context_menu = params.started_from_context_menu;",
          "297:   load_url_params.source_site_instance = params.source_site_instance;",
          "298:   load_url_params.frame_tree_node_id = params.frame_tree_node_id;",
          "299:   load_url_params.redirect_chain = params.redirect_chain;",
          "300:   load_url_params.has_user_gesture = params.user_gesture;",
          "301:   load_url_params.blob_url_loader_factory = params.blob_url_loader_factory;",
          "302:   load_url_params.href_translate = params.href_translate;",
          "303:   load_url_params.reload_type = params.reload_type;",
          "305:   if (params.post_data) {",
          "306:     load_url_params.load_type =",
          "307:         content::NavigationController::LOAD_TYPE_HTTP_POST;",
          "308:     load_url_params.post_data = params.post_data;",
          "309:   }",
          "",
          "---------------"
        ],
        "shell/renderer/electron_sandboxed_renderer_client.cc||shell/renderer/electron_sandboxed_renderer_client.cc": [
          "File: shell/renderer/electron_sandboxed_renderer_client.cc -> shell/renderer/electron_sandboxed_renderer_client.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "291:   InvokeHiddenCallback(context, kLifecycleKey, \"onExit\");",
          "292: }",
          "294: }  // namespace electron",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "294: bool ElectronSandboxedRendererClient::ShouldFork(blink::WebLocalFrame* frame,",
          "295:                                                  const GURL& url,",
          "296:                                                  const std::string& http_method,",
          "297:                                                  bool is_initial_navigation,",
          "298:                                                  bool is_server_redirect) {",
          "299:   return true;",
          "300: }",
          "",
          "---------------"
        ],
        "shell/renderer/electron_sandboxed_renderer_client.h||shell/renderer/electron_sandboxed_renderer_client.h": [
          "File: shell/renderer/electron_sandboxed_renderer_client.h -> shell/renderer/electron_sandboxed_renderer_client.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:   void RenderViewCreated(content::RenderView*) override;",
          "38:   void RunScriptsAtDocumentStart(content::RenderFrame* render_frame) override;",
          "39:   void RunScriptsAtDocumentEnd(content::RenderFrame* render_frame) override;",
          "41:  private:",
          "42:   std::unique_ptr<base::ProcessMetrics> metrics_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40:   bool ShouldFork(blink::WebLocalFrame* frame,",
          "41:                   const GURL& url,",
          "42:                   const std::string& http_method,",
          "43:                   bool is_initial_navigation,",
          "44:                   bool is_server_redirect) override;",
          "",
          "---------------"
        ],
        "spec-main/api-browser-window-spec.ts||spec-main/api-browser-window-spec.ts": [
          "File: spec-main/api-browser-window-spec.ts -> spec-main/api-browser-window-spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "434:     })",
          "435:   })",
          "452:         })",
          "471:         })",
          "475:         })",
          "484:         })",
          "492:         })",
          "496:         })",
          "504:         })",
          "508:         })",
          "516:         })",
          "526:         })",
          "533:         })",
          "536:         })",
          "538:       })",
          "539:     })",
          "542:   describe('focus and visibility', () => {",
          "543:     let w = null as unknown as BrowserWindow",
          "",
          "[Removed Lines]",
          "437:   describe('navigation events', () => {",
          "438:     let w = null as unknown as BrowserWindow",
          "439:     beforeEach(() => {",
          "440:       w = new BrowserWindow({ show: false, webPreferences: { nodeIntegration: true } })",
          "441:     })",
          "442:     afterEach(async () => {",
          "443:       await closeWindow(w)",
          "444:       w = null as unknown as BrowserWindow",
          "445:     })",
          "447:     describe('will-navigate event', () => {",
          "448:       it('allows the window to be closed from the event listener', (done) => {",
          "449:         w.webContents.once('will-navigate', () => {",
          "450:           w.close()",
          "451:           done()",
          "453:         w.loadFile(path.join(fixtures, 'pages', 'will-navigate.html'))",
          "454:       })",
          "455:     })",
          "457:     describe('will-redirect event', () => {",
          "458:       let server = null as unknown as http.Server",
          "459:       let url = null as unknown as string",
          "460:       before((done) => {",
          "461:         server = http.createServer((req, res) => {",
          "462:           if (req.url === '/302') {",
          "463:             res.setHeader('Location', '/200')",
          "464:             res.statusCode = 302",
          "465:             res.end()",
          "466:           } else if (req.url === '/navigate-302') {",
          "467:             res.end(`<html><body><script>window.location='${url}/302'</script></body></html>`)",
          "468:           } else {",
          "469:             res.end()",
          "470:           }",
          "472:         server.listen(0, '127.0.0.1', () => {",
          "473:           url = `http://127.0.0.1:${(server.address() as AddressInfo).port}`",
          "474:           done()",
          "476:       })",
          "478:       after(() => {",
          "479:         server.close()",
          "480:       })",
          "481:       it('is emitted on redirects', (done) => {",
          "482:         w.webContents.on('will-redirect', () => {",
          "483:           done()",
          "485:         w.loadURL(`${url}/302`)",
          "486:       })",
          "488:       it('is emitted after will-navigate on redirects', (done) => {",
          "489:         let navigateCalled = false",
          "490:         w.webContents.on('will-navigate', () => {",
          "491:           navigateCalled = true",
          "493:         w.webContents.on('will-redirect', () => {",
          "494:           expect(navigateCalled).to.equal(true, 'should have called will-navigate first')",
          "495:           done()",
          "497:         w.loadURL(`${url}/navigate-302`)",
          "498:       })",
          "500:       it('is emitted before did-stop-loading on redirects', (done) => {",
          "501:         let stopCalled = false",
          "502:         w.webContents.on('did-stop-loading', () => {",
          "503:           stopCalled = true",
          "505:         w.webContents.on('will-redirect', () => {",
          "506:           expect(stopCalled).to.equal(false, 'should not have called did-stop-loading first')",
          "507:           done()",
          "509:         w.loadURL(`${url}/302`)",
          "510:       })",
          "512:       it('allows the window to be closed from the event listener', (done) => {",
          "513:         w.webContents.once('will-redirect', () => {",
          "514:           w.close()",
          "515:           done()",
          "517:         w.loadURL(`${url}/302`)",
          "518:       })",
          "520:       it('can be prevented', (done) => {",
          "521:         w.webContents.once('will-redirect', (event) => {",
          "522:           event.preventDefault()",
          "523:         })",
          "524:         w.webContents.on('will-navigate', (e, u) => {",
          "525:           expect(u).to.equal(`${url}/302`)",
          "527:         w.webContents.on('did-stop-loading', () => {",
          "528:           expect(w.webContents.getURL()).to.equal(",
          "529:             `${url}/navigate-302`,",
          "530:             'url should not have changed after navigation event'",
          "531:           )",
          "532:           done()",
          "534:         w.webContents.on('will-redirect', (e, u) => {",
          "535:           expect(u).to.equal(`${url}/200`)",
          "537:         w.loadURL(`${url}/navigate-302`)",
          "540:   })",
          "",
          "[Added Lines]",
          "437:   for (const sandbox of [false, true]) {",
          "438:     describe(`navigation events${sandbox ? ' with sandbox' : ''}`, () => {",
          "439:       let w = null as unknown as BrowserWindow",
          "440:       beforeEach(() => {",
          "441:         w = new BrowserWindow({ show: false, webPreferences: { nodeIntegration: false, sandbox } })",
          "442:       })",
          "443:       afterEach(async () => {",
          "444:         await closeWindow(w)",
          "445:         w = null as unknown as BrowserWindow",
          "446:       })",
          "448:       describe('will-navigate event', () => {",
          "449:         let server = null as unknown as http.Server",
          "450:         let url = null as unknown as string",
          "451:         before((done) => {",
          "452:           server = http.createServer((req, res) => { res.end('') })",
          "453:           server.listen(0, '127.0.0.1', () => {",
          "454:             url = `http://127.0.0.1:${(server.address() as AddressInfo).port}/`",
          "455:             done()",
          "456:           })",
          "459:         after(() => {",
          "460:           server.close()",
          "463:         it('allows the window to be closed from the event listener', (done) => {",
          "464:           w.webContents.once('will-navigate', () => {",
          "465:             w.close()",
          "466:             done()",
          "467:           })",
          "468:           w.loadFile(path.join(fixtures, 'pages', 'will-navigate.html'))",
          "471:         it('can be prevented', (done) => {",
          "472:           let willNavigate = false",
          "473:           w.webContents.once('will-navigate', (e) => {",
          "474:             willNavigate = true",
          "475:             e.preventDefault()",
          "476:           })",
          "477:           w.webContents.on('did-stop-loading', () => {",
          "478:             if (willNavigate) {",
          "480:               expect(w.webContents.getURL().endsWith('will-navigate.html')).to.be.true()",
          "481:               done()",
          "482:             }",
          "483:           })",
          "484:           w.loadFile(path.join(fixtures, 'pages', 'will-navigate.html'))",
          "487:         it('is triggered when navigating from file: to http:', async () => {",
          "488:           await w.loadFile(path.join(fixtures, 'api', 'blank.html'))",
          "489:           w.webContents.executeJavaScript(`location.href = ${JSON.stringify(url)}`)",
          "490:           const navigatedTo = await new Promise(resolve => {",
          "491:             w.webContents.once('will-navigate', (e, url) => {",
          "492:               e.preventDefault()",
          "493:               resolve(url)",
          "494:             })",
          "495:           })",
          "496:           expect(navigatedTo).to.equal(url)",
          "497:           expect(w.webContents.getURL()).to.match(/^file:/)",
          "500:         it('is triggered when navigating from about:blank to http:', async () => {",
          "501:           await w.loadURL('about:blank')",
          "502:           w.webContents.executeJavaScript(`location.href = ${JSON.stringify(url)}`)",
          "503:           const navigatedTo = await new Promise(resolve => {",
          "504:             w.webContents.once('will-navigate', (e, url) => {",
          "505:               e.preventDefault()",
          "506:               resolve(url)",
          "507:             })",
          "508:           })",
          "509:           expect(navigatedTo).to.equal(url)",
          "510:           expect(w.webContents.getURL()).to.equal('about:blank')",
          "511:         })",
          "512:       })",
          "514:       describe('will-redirect event', () => {",
          "515:         let server = null as unknown as http.Server",
          "516:         let url = null as unknown as string",
          "517:         before((done) => {",
          "518:           server = http.createServer((req, res) => {",
          "519:             if (req.url === '/302') {",
          "520:               res.setHeader('Location', '/200')",
          "521:               res.statusCode = 302",
          "522:               res.end()",
          "523:             } else if (req.url === '/navigate-302') {",
          "524:               res.end(`<html><body><script>window.location='${url}/302'</script></body></html>`)",
          "525:             } else {",
          "526:               res.end()",
          "527:             }",
          "528:           })",
          "529:           server.listen(0, '127.0.0.1', () => {",
          "530:             url = `http://127.0.0.1:${(server.address() as AddressInfo).port}`",
          "531:             done()",
          "532:           })",
          "535:         after(() => {",
          "536:           server.close()",
          "538:         it('is emitted on redirects', (done) => {",
          "539:           w.webContents.on('will-redirect', () => {",
          "540:             done()",
          "541:           })",
          "542:           w.loadURL(`${url}/302`)",
          "545:         it('is emitted after will-navigate on redirects', (done) => {",
          "546:           let navigateCalled = false",
          "547:           w.webContents.on('will-navigate', () => {",
          "548:             navigateCalled = true",
          "549:           })",
          "550:           w.webContents.on('will-redirect', () => {",
          "551:             expect(navigateCalled).to.equal(true, 'should have called will-navigate first')",
          "552:             done()",
          "553:           })",
          "554:           w.loadURL(`${url}/navigate-302`)",
          "557:         it('is emitted before did-stop-loading on redirects', (done) => {",
          "558:           let stopCalled = false",
          "559:           w.webContents.on('did-stop-loading', () => {",
          "560:             stopCalled = true",
          "561:           })",
          "562:           w.webContents.on('will-redirect', () => {",
          "563:             expect(stopCalled).to.equal(false, 'should not have called did-stop-loading first')",
          "564:             done()",
          "565:           })",
          "566:           w.loadURL(`${url}/302`)",
          "569:         it('allows the window to be closed from the event listener', (done) => {",
          "570:           w.webContents.once('will-redirect', () => {",
          "571:             w.close()",
          "572:             done()",
          "573:           })",
          "574:           w.loadURL(`${url}/302`)",
          "577:         it('can be prevented', (done) => {",
          "578:           w.webContents.once('will-redirect', (event) => {",
          "579:             event.preventDefault()",
          "580:           })",
          "581:           w.webContents.on('will-navigate', (e, u) => {",
          "582:             expect(u).to.equal(`${url}/302`)",
          "583:           })",
          "584:           w.webContents.on('did-stop-loading', () => {",
          "585:             expect(w.webContents.getURL()).to.equal(",
          "586:               `${url}/navigate-302`,",
          "587:               'url should not have changed after navigation event'",
          "588:             )",
          "589:             done()",
          "590:           })",
          "591:           w.webContents.on('will-redirect', (e, u) => {",
          "592:             expect(u).to.equal(`${url}/200`)",
          "593:           })",
          "594:           w.loadURL(`${url}/navigate-302`)",
          "598:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2088:             'did-finish-load',",
          "2089:             'did-frame-finish-load',",
          "2090:             'did-navigate-in-page',",
          "2093:             'did-start-loading',",
          "2094:             'did-stop-loading',",
          "2095:             'did-frame-finish-load',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2149:             'will-navigate',",
          "",
          "---------------"
        ],
        "spec/fixtures/pages/will-navigate.html||spec/fixtures/pages/will-navigate.html": [
          "File: spec/fixtures/pages/will-navigate.html -> spec/fixtures/pages/will-navigate.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <html>",
          "2: <body>",
          "3: <script type=\"text/javascript\" charset=\"utf-8\">",
          "5: </script>",
          "6: </body>",
          "7: </html>",
          "",
          "[Removed Lines]",
          "4:   location.reload();",
          "",
          "[Added Lines]",
          "4:   location.href += '?navigated'",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b1e2185c5ef7692765a3044d366f3c00409ee784",
      "candidate_info": {
        "commit_hash": "b1e2185c5ef7692765a3044d366f3c00409ee784",
        "repo": "electron/electron",
        "commit_url": "https://github.com/electron/electron/commit/b1e2185c5ef7692765a3044d366f3c00409ee784",
        "files": [
          "shell/browser/api/electron_api_web_contents.cc",
          "shell/browser/electron_navigation_throttle.cc",
          "shell/browser/electron_navigation_throttle.h",
          "spec-main/api-browser-window-spec.ts"
        ],
        "message": "refactor: wire will-navigate up to a navigation throttle instead of OpenURL (#25065)\n\n* refactor: wire will-navigate up to a navigation throttle instead of OpenURL\n\n* spec: add test for x-site _top navigation",
        "before_after_code_files": [
          "shell/browser/api/electron_api_web_contents.cc||shell/browser/api/electron_api_web_contents.cc",
          "shell/browser/electron_navigation_throttle.cc||shell/browser/electron_navigation_throttle.cc",
          "shell/browser/electron_navigation_throttle.h||shell/browser/electron_navigation_throttle.h",
          "spec-main/api-browser-window-spec.ts||spec-main/api-browser-window-spec.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "shell/browser/api/electron_api_web_contents.cc||shell/browser/api/electron_api_web_contents.cc",
            "shell/browser/electron_navigation_throttle.cc||shell/browser/electron_navigation_throttle.cc",
            "shell/browser/electron_navigation_throttle.h||shell/browser/electron_navigation_throttle.h",
            "spec-main/api-browser-window-spec.ts||spec-main/api-browser-window-spec.ts"
          ],
          "candidate": [
            "shell/browser/api/electron_api_web_contents.cc||shell/browser/api/electron_api_web_contents.cc",
            "shell/browser/electron_navigation_throttle.cc||shell/browser/electron_navigation_throttle.cc",
            "shell/browser/electron_navigation_throttle.h||shell/browser/electron_navigation_throttle.h",
            "spec-main/api-browser-window-spec.ts||spec-main/api-browser-window-spec.ts"
          ]
        }
      },
      "candidate_diff": {
        "shell/browser/api/electron_api_web_contents.cc||shell/browser/api/electron_api_web_contents.cc": [
          "File: shell/browser/api/electron_api_web_contents.cc -> shell/browser/api/electron_api_web_contents.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "769:          params.post_data);",
          "770:     return nullptr;",
          "771:   }",
          "778:   if (!weak_this)",
          "779:     return nullptr;",
          "",
          "[Removed Lines]",
          "772:   if (!weak_this)",
          "773:     return nullptr;",
          "776:   if (Emit(\"will-navigate\", params.url))",
          "777:     return nullptr;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "shell/browser/electron_navigation_throttle.cc||shell/browser/electron_navigation_throttle.cc": [
          "File: shell/browser/electron_navigation_throttle.cc -> shell/browser/electron_navigation_throttle.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:   return \"ElectronNavigationThrottle\";",
          "21: }",
          "23: content::NavigationThrottle::ThrottleCheckResult",
          "24: ElectronNavigationThrottle::WillRedirectRequest() {",
          "25:   auto* handle = navigation_handle();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: content::NavigationThrottle::ThrottleCheckResult",
          "24: ElectronNavigationThrottle::WillStartRequest() {",
          "25:   auto* handle = navigation_handle();",
          "26:   auto* contents = handle->GetWebContents();",
          "27:   if (!contents) {",
          "28:     NOTREACHED();",
          "29:     return PROCEED;",
          "30:   }",
          "32:   v8::Isolate* isolate = JavascriptEnvironment::GetIsolate();",
          "33:   v8::HandleScope scope(isolate);",
          "34:   api::WebContents* api_contents = api::WebContents::From(contents);",
          "35:   if (!api_contents) {",
          "37:     return PROCEED;",
          "38:   }",
          "40:   if (handle->IsRendererInitiated() && handle->IsInMainFrame() &&",
          "41:       api_contents->EmitNavigationEvent(\"will-navigate\", handle)) {",
          "42:     return CANCEL;",
          "43:   }",
          "44:   return PROCEED;",
          "45: }",
          "",
          "---------------"
        ],
        "shell/browser/electron_navigation_throttle.h||shell/browser/electron_navigation_throttle.h": [
          "File: shell/browser/electron_navigation_throttle.h -> shell/browser/electron_navigation_throttle.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:   explicit ElectronNavigationThrottle(content::NavigationHandle* handle);",
          "15:   ~ElectronNavigationThrottle() override;",
          "17:   ElectronNavigationThrottle::ThrottleCheckResult WillRedirectRequest()",
          "18:       override;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17:   ElectronNavigationThrottle::ThrottleCheckResult WillStartRequest() override;",
          "",
          "---------------"
        ],
        "spec-main/api-browser-window-spec.ts||spec-main/api-browser-window-spec.ts": [
          "File: spec-main/api-browser-window-spec.ts -> spec-main/api-browser-window-spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "451:         let server = null as unknown as http.Server;",
          "452:         let url = null as unknown as string;",
          "453:         before((done) => {",
          "455:           server.listen(0, '127.0.0.1', () => {",
          "456:             url = `http://127.0.0.1:${(server.address() as AddressInfo).port}/`;",
          "457:             done();",
          "",
          "[Removed Lines]",
          "454:           server = http.createServer((req, res) => { res.end(''); });",
          "",
          "[Added Lines]",
          "454:           server = http.createServer((req, res) => {",
          "455:             if (req.url === '/navigate-top') {",
          "456:               res.end('<a target=_top href=\"/\">navigate _top</a>');",
          "457:             } else {",
          "458:               res.end('');",
          "459:             }",
          "460:           });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "515:           expect(navigatedTo).to.equal(url);",
          "516:           expect(w.webContents.getURL()).to.equal('about:blank');",
          "517:         });",
          "518:       });",
          "520:       describe('will-redirect event', () => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "525:         it('is triggered when a cross-origin iframe navigates _top', async () => {",
          "526:           await w.loadURL(`data:text/html,<iframe src=\"http://127.0.0.1:${(server.address() as AddressInfo).port}/navigate-top\"></iframe>`);",
          "527:           await delay(1000);",
          "528:           w.webContents.debugger.attach('1.1');",
          "529:           const targets = await w.webContents.debugger.sendCommand('Target.getTargets');",
          "530:           const iframeTarget = targets.targetInfos.find((t: any) => t.type === 'iframe');",
          "531:           const { sessionId } = await w.webContents.debugger.sendCommand('Target.attachToTarget', {",
          "532:             targetId: iframeTarget.targetId,",
          "533:             flatten: true",
          "534:           });",
          "535:           await w.webContents.debugger.sendCommand('Input.dispatchMouseEvent', {",
          "536:             type: 'mousePressed',",
          "537:             x: 10,",
          "538:             y: 10,",
          "539:             clickCount: 1,",
          "540:             button: 'left'",
          "541:           }, sessionId);",
          "542:           await w.webContents.debugger.sendCommand('Input.dispatchMouseEvent', {",
          "543:             type: 'mouseReleased',",
          "544:             x: 10,",
          "545:             y: 10,",
          "546:             clickCount: 1,",
          "547:             button: 'left'",
          "548:           }, sessionId);",
          "549:           let willNavigateEmitted = false;",
          "550:           w.webContents.on('will-navigate', () => {",
          "551:             willNavigateEmitted = true;",
          "552:           });",
          "553:           await emittedOnce(w.webContents, 'did-navigate');",
          "554:           expect(willNavigateEmitted).to.be.true();",
          "555:         });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "945defd47ea2ec626c16c6954d37bde98f43a0d3",
      "candidate_info": {
        "commit_hash": "945defd47ea2ec626c16c6954d37bde98f43a0d3",
        "repo": "electron/electron",
        "commit_url": "https://github.com/electron/electron/commit/945defd47ea2ec626c16c6954d37bde98f43a0d3",
        "files": [
          "shell/browser/api/electron_api_web_contents.cc",
          "shell/browser/electron_navigation_throttle.cc",
          "shell/browser/electron_navigation_throttle.h",
          "spec-main/api-browser-window-spec.ts"
        ],
        "message": "refactor: wire will-navigate up to a navigation throttle instead of OpenURL (#25109)\n\n* refactor: wire will-navigate up to a navigation throttle instead of OpenURL (#25065)\n\n* refactor: wire will-navigate up to a navigation throttle instead of OpenURL\n\n* spec: add test for x-site _top navigation\n\n* chore: old code be old",
        "before_after_code_files": [
          "shell/browser/api/electron_api_web_contents.cc||shell/browser/api/electron_api_web_contents.cc",
          "shell/browser/electron_navigation_throttle.cc||shell/browser/electron_navigation_throttle.cc",
          "shell/browser/electron_navigation_throttle.h||shell/browser/electron_navigation_throttle.h",
          "spec-main/api-browser-window-spec.ts||spec-main/api-browser-window-spec.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "shell/browser/api/electron_api_web_contents.cc||shell/browser/api/electron_api_web_contents.cc",
            "shell/browser/electron_navigation_throttle.cc||shell/browser/electron_navigation_throttle.cc",
            "shell/browser/electron_navigation_throttle.h||shell/browser/electron_navigation_throttle.h",
            "spec-main/api-browser-window-spec.ts||spec-main/api-browser-window-spec.ts"
          ],
          "candidate": [
            "shell/browser/api/electron_api_web_contents.cc||shell/browser/api/electron_api_web_contents.cc",
            "shell/browser/electron_navigation_throttle.cc||shell/browser/electron_navigation_throttle.cc",
            "shell/browser/electron_navigation_throttle.h||shell/browser/electron_navigation_throttle.h",
            "spec-main/api-browser-window-spec.ts||spec-main/api-browser-window-spec.ts"
          ]
        }
      },
      "candidate_diff": {
        "shell/browser/api/electron_api_web_contents.cc||shell/browser/api/electron_api_web_contents.cc": [
          "File: shell/browser/api/electron_api_web_contents.cc -> shell/browser/api/electron_api_web_contents.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "741:     return nullptr;",
          "742:   }",
          "750:   if (IsDestroyed())",
          "751:     return nullptr;",
          "",
          "[Removed Lines]",
          "745:   if (Emit(\"will-navigate\", params.url))",
          "746:     return nullptr;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "shell/browser/electron_navigation_throttle.cc||shell/browser/electron_navigation_throttle.cc": [
          "File: shell/browser/electron_navigation_throttle.cc -> shell/browser/electron_navigation_throttle.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:   return \"ElectronNavigationThrottle\";",
          "20: }",
          "22: content::NavigationThrottle::ThrottleCheckResult",
          "23: ElectronNavigationThrottle::WillRedirectRequest() {",
          "24:   auto* handle = navigation_handle();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: content::NavigationThrottle::ThrottleCheckResult",
          "23: ElectronNavigationThrottle::WillStartRequest() {",
          "24:   auto* handle = navigation_handle();",
          "25:   auto* contents = handle->GetWebContents();",
          "26:   if (!contents) {",
          "27:     NOTREACHED();",
          "28:     return PROCEED;",
          "29:   }",
          "31:   v8::Isolate* isolate = v8::Isolate::GetCurrent();",
          "32:   v8::HandleScope scope(isolate);",
          "33:   auto api_contents = electron::api::WebContents::From(isolate, contents);",
          "34:   if (api_contents.IsEmpty()) {",
          "36:     return PROCEED;",
          "37:   }",
          "39:   if (handle->IsRendererInitiated() && handle->IsInMainFrame() &&",
          "40:       api_contents->EmitNavigationEvent(\"will-navigate\", handle)) {",
          "41:     return CANCEL;",
          "42:   }",
          "43:   return PROCEED;",
          "44: }",
          "",
          "---------------"
        ],
        "shell/browser/electron_navigation_throttle.h||shell/browser/electron_navigation_throttle.h": [
          "File: shell/browser/electron_navigation_throttle.h -> shell/browser/electron_navigation_throttle.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:   explicit ElectronNavigationThrottle(content::NavigationHandle* handle);",
          "15:   ~ElectronNavigationThrottle() override;",
          "17:   ElectronNavigationThrottle::ThrottleCheckResult WillRedirectRequest()",
          "18:       override;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17:   ElectronNavigationThrottle::ThrottleCheckResult WillStartRequest() override;",
          "",
          "---------------"
        ],
        "spec-main/api-browser-window-spec.ts||spec-main/api-browser-window-spec.ts": [
          "File: spec-main/api-browser-window-spec.ts -> spec-main/api-browser-window-spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import { app, BrowserWindow, BrowserView, ipcMain, OnBeforeSendHeadersListenerDetails, protocol, screen, webContents, session, WebContents } from 'electron';",
          "10: import { emittedOnce } from './events-helpers';",
          "12: import { closeWindow } from './window-helpers';",
          "14: const features = process.electronBinding('features');",
          "",
          "[Removed Lines]",
          "11: import { ifit, ifdescribe } from './spec-helpers';",
          "",
          "[Added Lines]",
          "11: import { delay, ifit, ifdescribe } from './spec-helpers';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "434:         let server = null as unknown as http.Server;",
          "435:         let url = null as unknown as string;",
          "436:         before((done) => {",
          "438:           server.listen(0, '127.0.0.1', () => {",
          "439:             url = `http://127.0.0.1:${(server.address() as AddressInfo).port}/`;",
          "440:             done();",
          "",
          "[Removed Lines]",
          "437:           server = http.createServer((req, res) => { res.end(''); });",
          "",
          "[Added Lines]",
          "437:           server = http.createServer((req, res) => {",
          "438:             if (req.url === '/navigate-top') {",
          "439:               res.end('<a target=_top href=\"/\">navigate _top</a>');",
          "440:             } else {",
          "441:               res.end('');",
          "442:             }",
          "443:           });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "494:           expect(navigatedTo).to.equal(url);",
          "495:           expect(w.webContents.getURL()).to.equal('about:blank');",
          "496:         });",
          "497:       });",
          "499:       describe('will-redirect event', () => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "504:         it('is triggered when a cross-origin iframe navigates _top', async () => {",
          "505:           await w.loadURL(`data:text/html,<iframe src=\"http://127.0.0.1:${(server.address() as AddressInfo).port}/navigate-top\"></iframe>`);",
          "506:           await delay(1000);",
          "507:           w.webContents.debugger.attach('1.1');",
          "508:           const targets = await w.webContents.debugger.sendCommand('Target.getTargets');",
          "509:           const iframeTarget = targets.targetInfos.find((t: any) => t.type === 'iframe');",
          "510:           const { sessionId } = await w.webContents.debugger.sendCommand('Target.attachToTarget', {",
          "511:             targetId: iframeTarget.targetId,",
          "512:             flatten: true",
          "513:           });",
          "514:           await w.webContents.debugger.sendCommand('Input.dispatchMouseEvent', {",
          "515:             type: 'mousePressed',",
          "516:             x: 10,",
          "517:             y: 10,",
          "518:             clickCount: 1,",
          "519:             button: 'left'",
          "520:           }, sessionId);",
          "521:           await w.webContents.debugger.sendCommand('Input.dispatchMouseEvent', {",
          "522:             type: 'mouseReleased',",
          "523:             x: 10,",
          "524:             y: 10,",
          "525:             clickCount: 1,",
          "526:             button: 'left'",
          "527:           }, sessionId);",
          "528:           let willNavigateEmitted = false;",
          "529:           w.webContents.on('will-navigate', () => {",
          "530:             willNavigateEmitted = true;",
          "531:           });",
          "532:           await emittedOnce(w.webContents, 'did-navigate');",
          "533:           expect(willNavigateEmitted).to.be.true();",
          "534:         });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9f1b24de95d38f7d1a4c7937dc0d9d40d08e81f5",
      "candidate_info": {
        "commit_hash": "9f1b24de95d38f7d1a4c7937dc0d9d40d08e81f5",
        "repo": "electron/electron",
        "commit_url": "https://github.com/electron/electron/commit/9f1b24de95d38f7d1a4c7937dc0d9d40d08e81f5",
        "files": [
          "shell/browser/api/electron_api_web_contents.cc",
          "shell/browser/electron_navigation_throttle.cc",
          "shell/browser/electron_navigation_throttle.h",
          "spec-main/api-browser-window-spec.ts"
        ],
        "message": "refactor: wire will-navigate up to a navigation throttle instead of OpenURL (#25110)\n\n* refactor: wire will-navigate up to a navigation throttle instead of OpenURL (#25065)\n\n* refactor: wire will-navigate up to a navigation throttle instead of OpenURL\n\n* spec: add test for x-site _top navigation\n\n* chore: old code be old\n\n* Update api-browser-window-spec.ts",
        "before_after_code_files": [
          "shell/browser/api/electron_api_web_contents.cc||shell/browser/api/electron_api_web_contents.cc",
          "shell/browser/electron_navigation_throttle.cc||shell/browser/electron_navigation_throttle.cc",
          "shell/browser/electron_navigation_throttle.h||shell/browser/electron_navigation_throttle.h",
          "spec-main/api-browser-window-spec.ts||spec-main/api-browser-window-spec.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "shell/browser/api/electron_api_web_contents.cc||shell/browser/api/electron_api_web_contents.cc",
            "shell/browser/electron_navigation_throttle.cc||shell/browser/electron_navigation_throttle.cc",
            "shell/browser/electron_navigation_throttle.h||shell/browser/electron_navigation_throttle.h",
            "spec-main/api-browser-window-spec.ts||spec-main/api-browser-window-spec.ts"
          ],
          "candidate": [
            "shell/browser/api/electron_api_web_contents.cc||shell/browser/api/electron_api_web_contents.cc",
            "shell/browser/electron_navigation_throttle.cc||shell/browser/electron_navigation_throttle.cc",
            "shell/browser/electron_navigation_throttle.h||shell/browser/electron_navigation_throttle.h",
            "spec-main/api-browser-window-spec.ts||spec-main/api-browser-window-spec.ts"
          ]
        }
      },
      "candidate_diff": {
        "shell/browser/api/electron_api_web_contents.cc||shell/browser/api/electron_api_web_contents.cc": [
          "File: shell/browser/api/electron_api_web_contents.cc -> shell/browser/api/electron_api_web_contents.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "723:     return nullptr;",
          "724:   }",
          "732:   if (IsDestroyed())",
          "733:     return nullptr;",
          "",
          "[Removed Lines]",
          "727:   if (Emit(\"will-navigate\", params.url))",
          "728:     return nullptr;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "shell/browser/electron_navigation_throttle.cc||shell/browser/electron_navigation_throttle.cc": [
          "File: shell/browser/electron_navigation_throttle.cc -> shell/browser/electron_navigation_throttle.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:   return \"ElectronNavigationThrottle\";",
          "20: }",
          "22: content::NavigationThrottle::ThrottleCheckResult",
          "23: ElectronNavigationThrottle::WillRedirectRequest() {",
          "24:   auto* handle = navigation_handle();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: content::NavigationThrottle::ThrottleCheckResult",
          "23: ElectronNavigationThrottle::WillStartRequest() {",
          "24:   auto* handle = navigation_handle();",
          "25:   auto* contents = handle->GetWebContents();",
          "26:   if (!contents) {",
          "27:     NOTREACHED();",
          "28:     return PROCEED;",
          "29:   }",
          "31:   v8::Isolate* isolate = v8::Isolate::GetCurrent();",
          "32:   v8::HandleScope scope(isolate);",
          "33:   auto api_contents = electron::api::WebContents::From(isolate, contents);",
          "34:   if (api_contents.IsEmpty()) {",
          "36:     return PROCEED;",
          "37:   }",
          "39:   if (handle->IsRendererInitiated() && handle->IsInMainFrame() &&",
          "40:       api_contents->EmitNavigationEvent(\"will-navigate\", handle)) {",
          "41:     return CANCEL;",
          "42:   }",
          "43:   return PROCEED;",
          "44: }",
          "",
          "---------------"
        ],
        "shell/browser/electron_navigation_throttle.h||shell/browser/electron_navigation_throttle.h": [
          "File: shell/browser/electron_navigation_throttle.h -> shell/browser/electron_navigation_throttle.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:   explicit ElectronNavigationThrottle(content::NavigationHandle* handle);",
          "15:   ~ElectronNavigationThrottle() override;",
          "17:   ElectronNavigationThrottle::ThrottleCheckResult WillRedirectRequest()",
          "18:       override;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17:   ElectronNavigationThrottle::ThrottleCheckResult WillStartRequest() override;",
          "",
          "---------------"
        ],
        "spec-main/api-browser-window-spec.ts||spec-main/api-browser-window-spec.ts": [
          "File: spec-main/api-browser-window-spec.ts -> spec-main/api-browser-window-spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: import { app, BrowserWindow, BrowserView, ipcMain, OnBeforeSendHeadersListenerDetails, protocol, screen, webContents, session, WebContents } from 'electron'",
          "12: import { emittedOnce } from './events-helpers'",
          "14: import { closeWindow } from './window-helpers'",
          "16: const { expect } = chai",
          "",
          "[Removed Lines]",
          "13: import { ifit, ifdescribe } from './spec-helpers'",
          "",
          "[Added Lines]",
          "13: import { delay, ifit, ifdescribe } from './spec-helpers'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "435:         let server = null as unknown as http.Server",
          "436:         let url = null as unknown as string",
          "437:         before((done) => {",
          "439:           server.listen(0, '127.0.0.1', () => {",
          "440:             url = `http://127.0.0.1:${(server.address() as AddressInfo).port}/`",
          "441:             done()",
          "",
          "[Removed Lines]",
          "438:           server = http.createServer((req, res) => { res.end('') })",
          "",
          "[Added Lines]",
          "438:           server = http.createServer((req, res) => {",
          "439:             if (req.url === '/navigate-top') {",
          "440:               res.end('<a target=_top href=\"/\">navigate _top</a>');",
          "441:             } else {",
          "442:               res.end('');",
          "443:             }",
          "444:           });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "495:           expect(navigatedTo).to.equal(url)",
          "496:           expect(w.webContents.getURL()).to.equal('about:blank')",
          "497:         })",
          "500:       describe('will-redirect event', () => {",
          "501:         let server = null as unknown as http.Server",
          "",
          "[Removed Lines]",
          "498:       })",
          "",
          "[Added Lines]",
          "505:         it('is triggered when a cross-origin iframe navigates _top', async () => {",
          "506:           await w.loadURL(`data:text/html,<iframe src=\"http://127.0.0.1:${(server.address() as AddressInfo).port}/navigate-top\"></iframe>`);",
          "507:           await delay(1000);",
          "508:           w.webContents.debugger.attach('1.1');",
          "509:           const targets = await w.webContents.debugger.sendCommand('Target.getTargets');",
          "510:           const iframeTarget = targets.targetInfos.find((t: any) => t.type === 'iframe');",
          "511:           const { sessionId } = await w.webContents.debugger.sendCommand('Target.attachToTarget', {",
          "512:             targetId: iframeTarget.targetId,",
          "513:             flatten: true",
          "514:           });",
          "515:           await w.webContents.debugger.sendCommand('Input.dispatchMouseEvent', {",
          "516:             type: 'mousePressed',",
          "517:             x: 10,",
          "518:             y: 10,",
          "519:             clickCount: 1,",
          "520:             button: 'left'",
          "521:           }, sessionId);",
          "522:           await w.webContents.debugger.sendCommand('Input.dispatchMouseEvent', {",
          "523:             type: 'mouseReleased',",
          "524:             x: 10,",
          "525:             y: 10,",
          "526:             clickCount: 1,",
          "527:             button: 'left'",
          "528:           }, sessionId);",
          "529:           let willNavigateEmitted = false;",
          "530:           w.webContents.on('will-navigate', () => {",
          "531:             willNavigateEmitted = true;",
          "532:           });",
          "533:           await emittedOnce(w.webContents, 'did-navigate');",
          "534:           expect(willNavigateEmitted).to.be.true();",
          "535:         });",
          "536:       });",
          "",
          "---------------"
        ]
      }
    }
  ]
}