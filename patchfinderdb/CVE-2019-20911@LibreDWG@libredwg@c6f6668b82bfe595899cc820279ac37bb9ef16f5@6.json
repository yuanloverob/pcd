{
  "cve_id": "CVE-2019-20911",
  "cve_desc": "An issue was discovered in GNU LibreDWG through 0.9.3. Crafted input will lead to denial of service in bit_calc_CRC in bits.c, related to a for loop.",
  "repo": "LibreDWG/libredwg",
  "patch_hash": "c6f6668b82bfe595899cc820279ac37bb9ef16f5",
  "patch_info": {
    "commit_hash": "c6f6668b82bfe595899cc820279ac37bb9ef16f5",
    "repo": "LibreDWG/libredwg",
    "commit_url": "https://github.com/LibreDWG/libredwg/commit/c6f6668b82bfe595899cc820279ac37bb9ef16f5",
    "files": [
      "include/dwg.h",
      "src/decode.c",
      "src/encode.c",
      "src/free.c"
    ],
    "message": "cleanup tio.unknown\n\nnot needed anymore, we only have UNKNOWN_OBJ or UNKNOWN_ENT with full common\nentity_data.\nFixes GH #178 heap_overflow2",
    "before_after_code_files": [
      "include/dwg.h||include/dwg.h",
      "src/decode.c||src/decode.c",
      "src/encode.c||src/encode.c",
      "src/free.c||src/free.c"
    ]
  },
  "patch_diff": {
    "include/dwg.h||include/dwg.h": [
      "File: include/dwg.h -> include/dwg.h"
    ],
    "src/decode.c||src/decode.c": [
      "File: src/decode.c -> src/decode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "5013:           bit_set_position (dat, restartpos);",
      "5019:           if (i >= 0 && i < (int)dwg->num_classes)",
      "5020:             {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5014:           obj->supertype = DWG_SUPERTYPE_UNKNOWN;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "5032:                   LOG_ERROR (\"Invalid class index %d >%d\", i,",
      "5033:                              (int)dwg->num_classes);",
      "5034:                 }",
      "5036:               obj->type = 0;",
      "5038:               return error | DWG_ERR_VALUEOUTOFBOUNDS;",
      "5039:             }",
      "5096:         }",
      "5097:     }",
      "",
      "[Removed Lines]",
      "5035:               obj->supertype = DWG_SUPERTYPE_UNKNOWN;",
      "5041:           if (klass && !is_entity)",
      "5042:             {",
      "5043:               int err = dwg_decode_UNKNOWN_OBJ (dat, obj);",
      "5044:               error |= err;",
      "5045:               obj->supertype = DWG_SUPERTYPE_UNKNOWN;",
      "5046:               if (!dat)",
      "5047:                 return error;",
      "5048:               if (err >= DWG_ERR_CRITICAL)",
      "5050:             }",
      "5051:           else if (klass) // is_entity",
      "5052:             {",
      "5053:               int err;",
      "5054: #if 0 && !defined(IS_RELEASE)",
      "5055:               if (strEQc(klass->dxfname, \"MULTILEADER\")) { //debug CED",
      "5056:                 char *mleader = bit_read_TF(dat, obj->size);",
      "5057:                 LOG_INSANE_TF(mleader, (int)obj->size)",
      "5058:                 bit_set_position(dat, restartpos);",
      "5059:                 free (mleader);",
      "5060:               }",
      "5061: #endif",
      "5062:               err = dwg_decode_UNKNOWN_ENT (dat, obj);",
      "5063:               error |= err;",
      "5064:               obj->supertype = DWG_SUPERTYPE_UNKNOWN;",
      "5065:               if (!dat)",
      "5066:                 return error;",
      "5067:               if (err >= DWG_ERR_CRITICAL)",
      "5069:             }",
      "5070:           else // not a class",
      "5071:             {",
      "5072:               LOG_WARN (\"Unknown object, skipping eed/reactors/xdic\");",
      "5073:               SINCE (R_2000)",
      "5074:               {",
      "5075:                 obj->bitsize = bit_read_RL (dat);",
      "5076:                 LOG_TRACE (\"bitsize: \" FORMAT_RL \" [RL] @%lu.%u\\n\",",
      "5077:                            obj->bitsize, dat->byte-2, dat->bit);",
      "5078:                 if (obj->bitsize > obj->size * 8)",
      "5079:                   {",
      "5080:                     LOG_ERROR (\"Invalid bitsize \" FORMAT_RL \" => \" FORMAT_RL,",
      "5081:                                obj->bitsize, obj->size * 8);",
      "5082:                     obj->bitsize = obj->size * 8;",
      "5083:                     error |= DWG_ERR_VALUEOUTOFBOUNDS;",
      "5084:                   }",
      "5085:               }",
      "5086:               if (!bit_read_H (dat, &obj->handle))",
      "5087:                 {",
      "5088:                   LOG_TRACE (\"handle: \" FORMAT_H \" [H 5]\\n\",",
      "5089:                              ARGS_H (obj->handle));",
      "5090:                 }",
      "5091:               restartpos = dat->byte;",
      "5092:               obj->supertype = DWG_SUPERTYPE_UNKNOWN;",
      "5093:               obj->tio.unknown = bit_read_TF (dat, obj->size);",
      "5094:               dat->byte = restartpos;",
      "5095:             }",
      "",
      "[Added Lines]",
      "5037:           if (is_entity)",
      "5038:               error |= dwg_decode_UNKNOWN_ENT (dat, obj);",
      "5039:           else",
      "5040:               error |= dwg_decode_UNKNOWN_OBJ (dat, obj);",
      "5042:           if (!dat)",
      "5043:             return error;",
      "5044:           if (error >= DWG_ERR_CRITICAL)",
      "",
      "---------------"
    ],
    "src/encode.c||src/encode.c": [
      "File: src/encode.c -> src/encode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1970:           else",
      "1971:             is_entity = obj->supertype == DWG_SUPERTYPE_ENTITY;",
      "1976:             error = dwg_encode_UNKNOWN_ENT (dat, obj);",
      "1993:         }",
      "1994:     }",
      "",
      "[Removed Lines]",
      "1973:           if (klass && !is_entity)",
      "1974:             error = dwg_encode_UNKNOWN_OBJ (dat, obj);",
      "1975:           else if (klass)",
      "1977:           else // not a class",
      "1978:             {",
      "1979:               LOG_WARN (\"Unknown object, skipping eed/reactors/xdic\");",
      "1980:               error = DWG_ERR_UNHANDLEDCLASS;",
      "1981:               SINCE (R_2000)",
      "1982:               {",
      "1983:                 bit_write_RL (dat, obj->bitsize);",
      "1984:                 LOG_INFO (\"bitsize: \" FORMAT_RL \" [RL] (@%lu.%u)\\n\", obj->bitsize,",
      "1985:                           dat->byte - 4, dat->bit);",
      "1986:               }",
      "1987:               bit_write_H (dat, &obj->handle);",
      "1988:               LOG_INFO (\"handle: \" FORMAT_H \" [H 5]\\n\", ARGS_H (obj->handle));",
      "1991:               bit_write_TF (dat, obj->tio.unknown, obj->size);",
      "1992:             }",
      "",
      "[Added Lines]",
      "1973:           if (is_entity)",
      "1975:           else",
      "1976:             error = dwg_encode_UNKNOWN_OBJ (dat, obj);",
      "",
      "---------------"
    ],
    "src/free.c||src/free.c": [
      "File: src/free.c -> src/free.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "731:       else if ((error = dwg_free_variable_type (obj->parent, obj))",
      "732:                & DWG_ERR_UNHANDLEDCLASS)",
      "733:         {",
      "738:         unhandled:",
      "753:               dwg_free_UNKNOWN_ENT (dat, obj);",
      "761:               dwg_free_UNKNOWN_OBJ (dat, obj);",
      "771:         }",
      "772:     }",
      "",
      "[Removed Lines]",
      "734:           int is_entity;",
      "735:           int i;",
      "736:           Dwg_Class *klass;",
      "739:           is_entity = 0;",
      "740:           i = obj->type - 500;",
      "741:           klass = NULL;",
      "743:           dwg = obj->parent;",
      "744:           if (dwg->dwg_class && i >= 0 && i < (int)dwg->num_classes)",
      "745:             {",
      "746:               klass = &dwg->dwg_class[i];",
      "747:               is_entity = klass ? dwg_class_is_entity (klass) : 0;",
      "748:             }",
      "750:           if (obj->fixedtype == DWG_TYPE_TABLE)",
      "751:             {",
      "754:             }",
      "755:           else if (obj->fixedtype == DWG_TYPE_DATATABLE)",
      "756:             {",
      "757:               dwg_free_UNKNOWN_OBJ (dat, obj);",
      "758:             }",
      "759:           else if (klass && !is_entity)",
      "760:             {",
      "762:             }",
      "763:           else if (klass && is_entity)",
      "764:             {",
      "765:               dwg_free_UNKNOWN_ENT (dat, obj);",
      "766:             }",
      "767:           else // not a class",
      "768:             {",
      "769:               FREE_IF (obj->tio.unknown);",
      "770:             }",
      "",
      "[Added Lines]",
      "735:           if (obj->fixedtype == DWG_TYPE_UNKNOWN_ENT)",
      "737:           else if (obj->fixedtype == DWG_TYPE_UNKNOWN_OBJ)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "44848dea2eb3474351db09ada2c155d9b9a24486",
      "candidate_info": {
        "commit_hash": "44848dea2eb3474351db09ada2c155d9b9a24486",
        "repo": "LibreDWG/libredwg",
        "commit_url": "https://github.com/LibreDWG/libredwg/commit/44848dea2eb3474351db09ada2c155d9b9a24486",
        "files": [
          "src/encode.c"
        ],
        "message": "dwg_encode_add_object: lookup class by name\n\nsame as in dwg_encode_variable_type().\nThis fixes DEBUGGING objects, like CELLSTYLEMAP.",
        "before_after_code_files": [
          "src/encode.c||src/encode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/encode.c||src/encode.c"
          ],
          "candidate": [
            "src/encode.c||src/encode.c"
          ]
        }
      },
      "candidate_diff": {
        "src/encode.c||src/encode.c": [
          "File: src/encode.c -> src/encode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1260: #include \"dwg.spec\"",
          "1268: {",
          "1274:   if (obj->dxfname) // search class by name, not offset",
          "1275:     {",
          "",
          "[Removed Lines]",
          "1266: static int",
          "1267: dwg_encode_variable_type (Dwg_Data *dwg, Bit_Chain *dat, Dwg_Object *obj)",
          "1269:   int i, error = 0;",
          "1270:   int is_entity;",
          "1271:   Dwg_Class *klass = NULL;",
          "",
          "[Added Lines]",
          "1262: static Dwg_Class*",
          "1263: dwg_encode_get_class (Dwg_Data *dwg, Dwg_Object *obj)",
          "1265:   int i;",
          "1266:   Dwg_Class* klass = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1284:           else",
          "1285:             klass = NULL; // inefficient",
          "1286:         }",
          "1289:     }",
          "1290:   else // search by index",
          "1291:     {",
          "",
          "[Removed Lines]",
          "1287:       if (!klass)",
          "1288:         return DWG_ERR_INTERNALERROR;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1294:         {",
          "1295:           LOG_WARN (\"Invalid object type %d, only %u classes\", obj->type,",
          "1296:                     dwg->num_classes);",
          "1298:         }",
          "1300:       klass = &dwg->dwg_class[i];",
          "1301:       if (!klass || !klass->dxfname)",
          "1303:       obj->dxfname = klass->dxfname;",
          "1304:     }",
          "1306:   is_entity = dwg_class_is_entity (klass);",
          "1310:   LOG_WARN (\"Unknown Class %s %d %s (0x%x%s)\", is_entity ? \"entity\" : \"object\",",
          "1311:             klass->number, klass->dxfname, klass->proxyflag,",
          "",
          "[Removed Lines]",
          "1297:           return DWG_ERR_INVALIDTYPE;",
          "1302:         return DWG_ERR_INTERNALERROR;",
          "1308: #include \"classes.inc\"",
          "",
          "[Added Lines]",
          "1289:           return NULL;",
          "1294:         return NULL;",
          "1297:   return klass;",
          "1298: }",
          "1304: static int",
          "1305: dwg_encode_variable_type (Dwg_Data *dwg, Bit_Chain *dat, Dwg_Object *obj)",
          "1306: {",
          "1307:   int error = 0;",
          "1308:   int is_entity;",
          "1309:   Dwg_Class *klass = dwg_encode_get_class (dwg, obj);",
          "1311:   if (!klass)",
          "1312:     return DWG_ERR_INTERNALERROR;",
          "1315:   #include \"classes.inc\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1598:           Dwg_Data *dwg = obj->parent;",
          "1599:           int is_entity;",
          "1600:           int i = obj->type - 500;",
          "1603:           dat->byte = address; // restart and write into the UNKNOWN_OBJ object",
          "1604:           dat->bit = 0;",
          "1605:           bit_write_MS (dat, obj->size); // unknown blobs have a known size",
          "1606:           bit_write_BS (dat, obj->type); // type",
          "1614:           if (klass && !is_entity)",
          "1618:           else if (klass)",
          "1622:           else // not a class",
          "1623:             {",
          "1624:               LOG_WARN (\"Unknown object, skipping eed/reactors/xdic\");",
          "",
          "[Removed Lines]",
          "1601:           Dwg_Class *klass = NULL;",
          "1608:           if (i <= (int)dwg->num_classes)",
          "1609:             {",
          "1610:               klass = &dwg->dwg_class[i];",
          "1611:               is_entity = dwg_class_is_entity (klass);",
          "1612:             }",
          "1615:             {",
          "1616:               error = dwg_encode_UNKNOWN_OBJ (dat, obj);",
          "1617:             }",
          "1619:             {",
          "1620:               error = dwg_encode_UNKNOWN_ENT (dat, obj);",
          "1621:             }",
          "",
          "[Added Lines]",
          "1608:           Dwg_Class *klass = dwg_encode_get_class (dwg, obj);",
          "1615:           if (klass && obj->supertype == DWG_SUPERTYPE_UNKNOWN)",
          "1616:             is_entity = dwg_class_is_entity (klass);",
          "1617:           else",
          "1618:             is_entity = obj->supertype == DWG_SUPERTYPE_ENTITY;",
          "1621:             error = dwg_encode_UNKNOWN_OBJ (dat, obj);",
          "1623:             error = dwg_encode_UNKNOWN_ENT (dat, obj);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e30533cd33d88cef8ec73d2f230771ddcd11da01",
      "candidate_info": {
        "commit_hash": "e30533cd33d88cef8ec73d2f230771ddcd11da01",
        "repo": "LibreDWG/libredwg",
        "commit_url": "https://github.com/LibreDWG/libredwg/commit/e30533cd33d88cef8ec73d2f230771ddcd11da01",
        "files": [
          "programs/dxf2dwg.c",
          "src/classes.inc",
          "src/decode.c",
          "src/encode.c"
        ],
        "message": "encode: support dwg_encode_get_class aliases\n\nthough it's still very stupid to do it twice.\nclasses.inc should be enough for a linear search for dxfnames.\nset the proper obj->dxfname.\n\nAvoid writing to dat->chain[0] on empty obj->bitsize_pos",
        "before_after_code_files": [
          "programs/dxf2dwg.c||programs/dxf2dwg.c",
          "src/classes.inc||src/classes.inc",
          "src/decode.c||src/decode.c",
          "src/encode.c||src/encode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/decode.c||src/decode.c",
            "src/encode.c||src/encode.c"
          ],
          "candidate": [
            "src/decode.c||src/decode.c",
            "src/encode.c||src/encode.c"
          ]
        }
      },
      "candidate_diff": {
        "programs/dxf2dwg.c||programs/dxf2dwg.c": [
          "File: programs/dxf2dwg.c -> programs/dxf2dwg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "253:           continue;",
          "254:         }",
          "256:       printf (\"Writing DWG file %s\", filename_out);",
          "257:       if (version)",
          "258:         {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "256:       dwg.opts = opts;",
          "",
          "---------------"
        ],
        "src/classes.inc||src/classes.inc": [
          "File: src/classes.inc -> src/classes.inc",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: #endif",
          "48: #define DISALLOW_DXF(action, _name) \\",
          "50: #define ALLOW_DXF(action, _name)",
          "52: #ifdef DEBUG_CLASSES",
          "",
          "[Removed Lines]",
          "49:   (!strcmp(_STR(action), \"dxf\")) ? DWG_ERR_NOTYETSUPPORTED :",
          "",
          "[Added Lines]",
          "49:   (strEQc (_STR(action), \"dxf\")) ? DWG_ERR_NOTYETSUPPORTED :",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65: #define STABLE_CLASS(action, _name) \\",
          "67:     { \\",
          "69:         obj->name = (char*) #_name; \\",
          "70:         obj->dxfname = (char*) #_name; \\",
          "71:         obj->fixedtype = DWG_TYPE_##_name; \\",
          "",
          "[Removed Lines]",
          "66:   if (!strcmp(klass->dxfname, #_name)) \\",
          "68:       if (!strcmp(_STR(action), \"decode\") || !memcmp(_STR(action), \"in\", 2)) { \\",
          "",
          "[Added Lines]",
          "66:   if (strEQc (klass->dxfname, #_name)) \\",
          "68:       if (strEQc (_STR(action), \"decode\") || !memcmp(_STR(action), \"in\", 2)) { \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:       return DWG_FUNC_N(action,_name)(dat, obj); \\",
          "74:     }",
          "75: #define STABLE_CLASS_DXF(action, _name, _dxfname) \\",
          "77:     { \\",
          "79:         obj->name = (char*) #_name; \\",
          "80:         obj->dxfname = (char*) #_dxfname; \\",
          "81:         obj->fixedtype = DWG_TYPE_##_name; \\",
          "",
          "[Removed Lines]",
          "76:   if (!strcmp(klass->dxfname, #_dxfname)) \\",
          "78:       if (!strcmp(_STR(action), \"decode\") || !memcmp(_STR(action), \"in\", 2)) { \\",
          "",
          "[Added Lines]",
          "76:   if (strEQc (klass->dxfname, #_dxfname)) \\",
          "78:       if (strEQc (_STR(action), \"decode\") || !memcmp(_STR(action), \"in\", 2)) { \\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "83:       return DWG_FUNC_N(action,_name)(dat, obj); \\",
          "84:     }",
          "85: #define STABLE_CLASS_CPP(action, _name, _cppname) \\",
          "87:     { \\",
          "89:         obj->name = (char*) #_name; \\",
          "90:         obj->dxfname = (char*) #_name; \\",
          "91:         obj->fixedtype = DWG_TYPE_##_name; \\",
          "",
          "[Removed Lines]",
          "86:   if (!strcmp(klass->cppname, #_name)) \\",
          "88:       if (!strcmp(_STR(action), \"decode\") || !memcmp(_STR(action), \"in\", 2)) { \\",
          "",
          "[Added Lines]",
          "86:   if (strEQc (klass->cppname, #_name)) \\",
          "88:       if (strEQc (_STR(action), \"decode\") || !memcmp(_STR(action), \"in\", 2)) { \\",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "93:       return DWG_FUNC_N(action,_name)(dat, obj); \\",
          "94:     }",
          "95: #define UNSTABLE_CLASS(action, _name) \\",
          "97:     { \\",
          "98:       WARN_UNSTABLE_CLASS; \\",
          "100:         obj->name = (char*) #_name; \\",
          "101:         obj->dxfname = (char*) #_name; \\",
          "102:         obj->fixedtype = DWG_TYPE_##_name; \\",
          "",
          "[Removed Lines]",
          "96:   if (!strcmp(klass->dxfname, #_name)) \\",
          "99:       if (!strcmp(_STR(action), \"decode\") || !memcmp(_STR(action), \"in\", 2)) { \\",
          "",
          "[Added Lines]",
          "96:   if (strEQc (klass->dxfname, #_name)) \\",
          "99:       if (strEQc (_STR(action), \"decode\") || !memcmp(_STR(action), \"in\", 2)) { \\",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "104:       return DEBUGGING_DXF(action, name) DWG_FUNC_N(action,_name)(dat, obj); \\",
          "105:     }",
          "106: #define UNSTABLE_CLASS_DXF(action, _name, _dxfname) \\",
          "108:     { \\",
          "109:       WARN_UNSTABLE_CLASS; \\",
          "111:         obj->name = (char*) #_name; \\",
          "112:         obj->dxfname = (char*) #_dxfname; \\",
          "113:         obj->fixedtype = DWG_TYPE_##_name; \\",
          "",
          "[Removed Lines]",
          "107:   if (!strcmp(klass->dxfname, #_dxfname)) \\",
          "110:       if (!strcmp(_STR(action), \"decode\") || !memcmp(_STR(action), \"in\", 2)) { \\",
          "",
          "[Added Lines]",
          "107:   if (strEQc (klass->dxfname, #_dxfname)) \\",
          "110:       if (strEQc (_STR(action), \"decode\") || !memcmp(_STR(action), \"in\", 2)) { \\",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "115:       return DEBUGGING_DXF(action, name) DWG_FUNC_N(action,_name)(dat, obj); \\",
          "116:     }",
          "117: #define UNSTABLE_CLASS_CPP(action, _name, _cppname) \\",
          "119:     { \\",
          "120:       WARN_UNSTABLE_CLASS; \\",
          "122:         obj->name = (char*) #_name; \\",
          "123:         obj->dxfname = (char*) #_name; \\",
          "124:         obj->fixedtype = DWG_TYPE_##_name; \\",
          "",
          "[Removed Lines]",
          "118:   if (!strcmp(klass->cppname, #_cppname)) \\",
          "121:       if (!strcmp(_STR(action), \"decode\") || !memcmp(_STR(action), \"in\", 2)) { \\",
          "",
          "[Added Lines]",
          "118:   if (strEQc (klass->cppname, #_cppname)) \\",
          "121:       if (strEQc (_STR(action), \"decode\") || !memcmp(_STR(action), \"in\", 2)) { \\",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "126:       return DEBUGGING_DXF(action, name) DWG_FUNC_N(action,_name)(dat, obj); \\",
          "127:     }",
          "128: #define UNHANDLED_CLASS(action, _name) \\",
          "130:     { \\",
          "131:       WARN_UNHANDLED_CLASS; \\",
          "133:         obj->name = (char*) #_name; \\",
          "134:         obj->dxfname = (char*) #_name; \\",
          "",
          "[Removed Lines]",
          "129:   if (!strcmp(klass->dxfname, #_name)) \\",
          "132:       if (!strcmp(_STR(action), \"decode\") || !memcmp(_STR(action), \"in\", 2)) { \\",
          "",
          "[Added Lines]",
          "129:   if (strEQc (klass->dxfname, #_name)) \\",
          "132:       if (strEQc (_STR(action), \"decode\") || !memcmp(_STR(action), \"in\", 2)) { \\",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "138:       return DWG_ERR_UNHANDLEDCLASS; \\",
          "139:     }",
          "140: #define UNHANDLED_CLASS_DXF(action, _name, _dxfname) \\",
          "142:     { \\",
          "143:       WARN_UNHANDLED_CLASS; \\",
          "145:         obj->name = (char*) #_name; \\",
          "146:         obj->dxfname = (char*) #_dxfname; \\",
          "",
          "[Removed Lines]",
          "141:   if (!strcmp(klass->dxfname, #_dxfname)) \\",
          "144:       if (!strcmp(_STR(action), \"decode\") || !memcmp(_STR(action), \"in\", 2)) { \\",
          "",
          "[Added Lines]",
          "141:   if (strEQc (klass->dxfname, #_dxfname)) \\",
          "144:       if (strEQc (_STR(action), \"decode\") || !memcmp(_STR(action), \"in\", 2)) { \\",
          "",
          "---------------"
        ],
        "src/decode.c||src/decode.c": [
          "File: src/decode.c -> src/decode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4170:   is_entity = dwg_class_is_entity (klass);",
          "4175:   LOG_WARN (\"Unknown Class %s %d %s (0x%x%s)\", is_entity ? \"entity\" : \"object\",",
          "4176:             klass->number, klass->dxfname, klass->proxyflag,",
          "",
          "[Removed Lines]",
          "4173: #include \"classes.inc\"",
          "",
          "[Added Lines]",
          "4173:   #include \"classes.inc\"",
          "",
          "---------------"
        ],
        "src/encode.c||src/encode.c": [
          "File: src/encode.c -> src/encode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1044:       obj = &dwg->object[index];",
          "1046:       obj->address = dat->byte;",
          "1047:       error |= dwg_encode_add_object (obj, dat, dat->byte);",
          "1049:       end_address = obj->address + (unsigned long)obj->size; // from RL",
          "1050:       if (end_address > dat->size)",
          "1051:         {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1047:       assert (dat->byte);",
          "1050:       if (dwg->header.version >= R_1_2)",
          "1051:         {",
          "1052:           assert (dat->chain[0] == 'A');",
          "1053:           assert (dat->chain[1] == 'C');",
          "1054:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1101:         {",
          "1102:           ckr_missing = 0;",
          "1103:           sekcisize = dat->byte - pvzadr;",
          "1104:           dat->chain[pvzadr] = sekcisize >> 8;",
          "1105:           dat->chain[pvzadr + 1] = sekcisize & 0xFF;",
          "1106:           bit_write_CRC (dat, pvzadr, 0xC0C1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1110:           assert (pvzadr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1120:       dat->chain[pvzadr + 1] = sekcisize & 0xFF;",
          "1121:       bit_write_CRC (dat, pvzadr, 0xC0C1);",
          "1122:     }",
          "1123:   pvzadr = dat->byte;",
          "1124:   bit_write_RC (dat, 0);",
          "1125:   bit_write_RC (dat, 2);",
          "1126:   bit_write_CRC (dat, pvzadr, 0xC0C1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1130:   if (dwg->header.version >= R_1_2)",
          "1131:     {",
          "1132:       assert (dat->chain[0] == 'A');",
          "1133:       assert (dat->chain[1] == 'C');",
          "1134:     }",
          "1136:   assert (pvzadr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1141:     Dwg_Object *obj = NULL;",
          "1142:     BITCODE_BL vcount;",
          "1144:     if (!_obj->address)",
          "1145:       _obj->address = dat->byte;",
          "1146:     dwg->header.section[SECTION_2NDHEADER_R13].number = 3;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1157:     assert (dat->byte);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1341: #include \"dwg.spec\"",
          "1343: static Dwg_Class*",
          "1344: dwg_encode_get_class (Dwg_Data *dwg, Dwg_Object *obj)",
          "1345: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1358: static const char *",
          "1359: dxf_encode_alias (char *name)",
          "1360: {",
          "1361:   if (strEQc (name, \"DICTIONARYWDFLT\"))",
          "1362:     return \"ACDBDICTIONARYWDFLT\";",
          "1363:   else if (strEQc (name, \"SECTIONVIEWSTYLE\"))",
          "1364:     return \"ACDBSECTIONVIEWSTYLE\";",
          "1365:   else if (strEQc (name, \"PLACEHOLDER\"))",
          "1366:     return \"ACDBPLACEHOLDER\";",
          "1367:   else if (strEQc (name, \"DETAILVIEWSTYLE\"))",
          "1368:     return \"ACDBDETAILVIEWSTYLE\";",
          "1369:   else if (strEQc (name, \"ASSOCPERSSUBENTMANAGER\"))",
          "1370:     return \"ACDBASSOCPERSSUBENTMANAGER\";",
          "1371:   else if (strEQc (name, \"EVALUATION_GRAPH\"))",
          "1372:     return \"ACAD_EVALUATION_GRAPH\";",
          "1373:   else if (strEQc (name, \"ASSOCACTION\"))",
          "1374:     return \"ACDBASSOCACTION\";",
          "1375:   else if (strEQc (name, \"ASSOCALIGNEDDIMACTIONBODY\"))",
          "1376:     return \"ACDBASSOCALIGNEDDIMACTIONBODY\";",
          "1377:   else if (strEQc (name, \"ASSOCOSNAPPOINTREFACTIONPARAM\"))",
          "1378:     return \"ACDBASSOCOSNAPPOINTREFACTIONPARAM\";",
          "1379:   else if (strEQc (name, \"ASSOCVERTEXACTIONPARAM\"))",
          "1380:     return \"ACDBASSOCVERTEXACTIONPARAM\";",
          "1381:   else if (strEQc (name, \"ASSOCGEOMDEPENDENCY\"))",
          "1382:     return \"ACDBASSOCGEOMDEPENDENCY\";",
          "1383:   else if (strEQc (name, \"ASSOCDEPENDENCY\"))",
          "1384:     return \"ACDBASSOCDEPENDENCY\";",
          "1385:   else if (strEQc (name, \"TABLE\"))",
          "1386:     return \"ACAD_TABLE\";",
          "1387:   else",
          "1388:     return NULL;",
          "1389: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1357:               break;",
          "1358:             }",
          "1359:           else",
          "1361:         }",
          "1362:     }",
          "1363:   else // search by index",
          "",
          "[Removed Lines]",
          "1360:             klass = NULL; // inefficient",
          "",
          "[Added Lines]",
          "1408:             {",
          "1410:               const char *alias = dxf_encode_alias (obj->dxfname);",
          "1411:               if (alias && strEQ (alias, klass->dxfname))",
          "1412:                 {",
          "1413:                   obj->dxfname = alias;",
          "1414:                   obj->type = 500 + i;",
          "1415:                   break;",
          "1416:                 }",
          "1417:               klass = NULL; // inefficient",
          "1418:             }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1399:             klass->number, klass->dxfname, klass->proxyflag,",
          "1400:             klass->wasazombie ? \" was proxy\" : \"\")",
          "1405:   return DWG_ERR_UNHANDLEDCLASS;",
          "1406: }",
          "",
          "[Removed Lines]",
          "1402: #undef WARN_UNHANDLED_CLASS",
          "1403: #undef WARN_UNSTABLE_CLASS",
          "",
          "[Added Lines]",
          "1460:   #undef WARN_UNHANDLED_CLASS",
          "1461:   #undef WARN_UNSTABLE_CLASS",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1416:   previous_address = dat->byte;",
          "1417:   previous_bit = dat->bit;",
          "1418:   dat->byte = address;",
          "1419:   dat->bit = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1476:   assert (address);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1688:           int i = obj->type - 500;",
          "1689:           Dwg_Class *klass = dwg_encode_get_class (dwg, obj);",
          "1691:           dat->byte = address; // restart and write into the UNKNOWN_OBJ object",
          "1692:           dat->bit = 0;",
          "1693:           bit_write_MS (dat, obj->size); // unknown blobs have a known size",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1750:           assert (address);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1725:   if (!obj->size)",
          "1726:     {",
          "1727:       BITCODE_BL pos = bit_position (dat);",
          "1728:       obj->size = dat->byte - previous_address;",
          "1729:       if (dat->bit)",
          "1730:         obj->size++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1788:       assert (previous_address);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1741:           bit_write_UMC (dat, obj->handlestream_size);",
          "1742:           LOG_TRACE (\"handlestream_size: %lu\\n\", obj->handlestream_size);",
          "1743:         }",
          "1748:       bit_set_position (dat, pos);",
          "1749:     }",
          "",
          "[Removed Lines]",
          "1744:       bit_set_position (dat, obj->bitsize_pos);",
          "1745:       bit_write_RL (dat, obj->bitsize);",
          "1746:       LOG_TRACE (\"bitsize: %u [RL] @%u.%u\\n\", obj->bitsize,",
          "1747:                  pos / 8, pos %8);",
          "",
          "[Added Lines]",
          "1805:       if (obj->bitsize_pos && obj->bitsize)",
          "1806:         {",
          "1807:           bit_set_position (dat, obj->bitsize_pos);",
          "1808:           bit_write_RL (dat, obj->bitsize);",
          "1809:           LOG_TRACE (\"bitsize: %u [RL] @%u.%u\\n\", obj->bitsize,",
          "1810:                      pos / 8, pos %8);",
          "1811:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "17fa53695a13a879e54bdf58d31def6eaf793143",
      "candidate_info": {
        "commit_hash": "17fa53695a13a879e54bdf58d31def6eaf793143",
        "repo": "LibreDWG/libredwg",
        "commit_url": "https://github.com/LibreDWG/libredwg/commit/17fa53695a13a879e54bdf58d31def6eaf793143",
        "files": [
          "src/encode.c"
        ],
        "message": "encode: disabling POINT/DUMMY does not help neither",
        "before_after_code_files": [
          "src/encode.c||src/encode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/encode.c||src/encode.c"
          ],
          "candidate": [
            "src/encode.c||src/encode.c"
          ]
        }
      },
      "candidate_diff": {
        "src/encode.c||src/encode.c": [
          "File: src/encode.c -> src/encode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2275:           dat->byte = address; // restart and write into the UNKNOWN_OBJ object",
          "2276:           dat->bit = 0;",
          "2280:           if (dwg->header.version != dwg->header.from_version)",
          "2281:             {",
          "2282:               obj->size = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2278: #if 0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2355:                 }",
          "2356:               obj->hdlpos = 0;",
          "2357:             }",
          "2359:           bit_write_MS (dat, obj->size); // unknown blobs have a known size",
          "2360:           if (dat->version >= R_2010)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2359: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2365:           else",
          "2366:             bit_write_BS (dat, obj->type);",
          "2369:           if (obj->type == DWG_TYPE_POINT)",
          "2370:             error = dwg_encode_POINT (dat, obj);",
          "2371:           else if (obj->type == DWG_TYPE_DUMMY)",
          "2372:             error = dwg_encode_DUMMY (dat, obj);",
          "2374:             error = dwg_encode_UNKNOWN_ENT (dat, obj);",
          "2375:           else",
          "2376:             error = dwg_encode_UNKNOWN_OBJ (dat, obj);",
          "",
          "[Removed Lines]",
          "2373:           else if (is_entity)",
          "",
          "[Added Lines]",
          "2370: #if 0",
          "2376:           else",
          "2377: #endif",
          "2378:           if (is_entity)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eaf7404ca5f9fedc950b38042f8be330160098d8",
      "candidate_info": {
        "commit_hash": "eaf7404ca5f9fedc950b38042f8be330160098d8",
        "repo": "LibreDWG/libredwg",
        "commit_url": "https://github.com/LibreDWG/libredwg/commit/eaf7404ca5f9fedc950b38042f8be330160098d8",
        "files": [
          "src/free.c"
        ],
        "message": "more free indxf fuzzing fixes\n\nskip color names, not assigned yet, and failing.\nonly free unknown if type is UNKNOWN, otherwise\nit will free illegal reactors, ...",
        "before_after_code_files": [
          "src/free.c||src/free.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/free.c||src/free.c"
          ],
          "candidate": [
            "src/free.c||src/free.c"
          ]
        }
      },
      "candidate_diff": {
        "src/free.c||src/free.c": [
          "File: src/free.c -> src/free.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "162:   }",
          "163: #define FIELD_TIMEBLL(name, dxf)",
          "164: #define FIELD_TIMERLL(name, dxf)",
          "165: #define FIELD_CMC(color, dxf1, dxf2)                                          \\",
          "167:     FIELD_T (color.name, 0);                                                  \\",
          "168:     FIELD_T (color.book_name, 0);                                             \\",
          "169:   }",
          "170: #define SUB_FIELD_CMC(o, color, dxf1, dxf2)                                   \\",
          "172:     VALUE_TV (_obj->o.color.name, 0);                                         \\",
          "173:     VALUE_TV (_obj->o.color.book_name, 0);                                    \\",
          "174:   }",
          "",
          "[Removed Lines]",
          "166:   {                                                                           \\",
          "171:   {                                                                           \\",
          "",
          "[Added Lines]",
          "167:   if (!(dat->opts & DWG_OPTS_INDXF)) {                                        \\",
          "172:   if (!(dat->opts & DWG_OPTS_INDXF)) {                                        \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "735:               klass = &dwg->dwg_class[i];",
          "736:               is_entity = klass ? dwg_class_is_entity (klass) : 0;",
          "737:             }",
          "739:             {",
          "740:               dwg_free_UNKNOWN_OBJ (dat, obj);",
          "741:             }",
          "743:             {",
          "744:               dwg_free_UNKNOWN_ENT (dat, obj);",
          "745:             }",
          "",
          "[Removed Lines]",
          "738:           if (klass && !is_entity)",
          "742:           else if (klass)",
          "",
          "[Added Lines]",
          "739:           if (klass && obj->fixedtype == DWG_TYPE_UNKNOWN_OBJ)",
          "743:           else if (klass && obj->fixedtype == DWG_TYPE_UNKNOWN_ENT)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e9420cbfe1b3daa64c0dbe196ed33d0338fb609b",
      "candidate_info": {
        "commit_hash": "e9420cbfe1b3daa64c0dbe196ed33d0338fb609b",
        "repo": "LibreDWG/libredwg",
        "commit_url": "https://github.com/LibreDWG/libredwg/commit/e9420cbfe1b3daa64c0dbe196ed33d0338fb609b",
        "files": [
          "examples/dwg2svg2.c",
          "include/dwg.h",
          "programs/dwg2SVG.c",
          "src/bits.c",
          "src/classes.inc",
          "src/dec_macros.h",
          "src/decode.c",
          "src/dwg.spec",
          "src/encode.c",
          "src/header_variables_r11.spec",
          "src/in_dxf.c",
          "src/in_dxf.h",
          "src/in_dxfb.c",
          "src/out_dxf.c",
          "src/out_dxfb.c",
          "src/out_geojson.c",
          "src/out_json.c",
          "src/print.c",
          "test/unit-testing/bits_test.c",
          "test/unit-testing/common.c"
        ],
        "message": "change handle types, add formatting macros\n\nhandle.value is now BITCODE_BL (uint32_t)\n.code and .size are BITCODE_RC (uint8_t)\n\nAdd FORMAT_H, ARGS_H(hdl) and FORMAT_REF, ARGS_REF(ref) macros\nfor uniform handle output.\n\nAdd indxf add_handle and add_handleref helpers",
        "before_after_code_files": [
          "examples/dwg2svg2.c||examples/dwg2svg2.c",
          "include/dwg.h||include/dwg.h",
          "programs/dwg2SVG.c||programs/dwg2SVG.c",
          "src/bits.c||src/bits.c",
          "src/classes.inc||src/classes.inc",
          "src/dec_macros.h||src/dec_macros.h",
          "src/decode.c||src/decode.c",
          "src/dwg.spec||src/dwg.spec",
          "src/encode.c||src/encode.c",
          "src/header_variables_r11.spec||src/header_variables_r11.spec",
          "src/in_dxf.c||src/in_dxf.c",
          "src/in_dxf.h||src/in_dxf.h",
          "src/in_dxfb.c||src/in_dxfb.c",
          "src/out_dxf.c||src/out_dxf.c",
          "src/out_dxfb.c||src/out_dxfb.c",
          "src/out_geojson.c||src/out_geojson.c",
          "src/out_json.c||src/out_json.c",
          "src/print.c||src/print.c",
          "test/unit-testing/bits_test.c||test/unit-testing/bits_test.c",
          "test/unit-testing/common.c||test/unit-testing/common.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/dwg.h||include/dwg.h",
            "src/decode.c||src/decode.c",
            "src/encode.c||src/encode.c"
          ],
          "candidate": [
            "include/dwg.h||include/dwg.h",
            "src/decode.c||src/decode.c",
            "src/encode.c||src/encode.c"
          ]
        }
      },
      "candidate_diff": {
        "examples/dwg2svg2.c||examples/dwg2svg2.c": [
          "File: examples/dwg2svg2.c -> examples/dwg2svg2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "237: output_INSERT (dwg_object *obj)",
          "238: {",
          "239:   int index, error;",
          "241:   double rotation;",
          "242:   dwg_ent_insert *insert;",
          "243:   dwg_point_3d ins_pt, _scale;",
          "",
          "[Removed Lines]",
          "240:   unsigned long abs_ref;",
          "",
          "[Added Lines]",
          "240:   BITCODE_RL abs_ref;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "253:   dynget (insert, \"INSERT\", \"scale\", &_scale);",
          "254:   obj_handle = dwg_object_get_handle (obj, &error);",
          "255:   log_if_error (\"get_handle\");",
          "258:   if (!insert->block_header)",
          "259:     log_error (\"insert->block_header\");",
          "260:   abs_ref = insert->block_header->absolute_ref;",
          "",
          "[Removed Lines]",
          "256:   ins_handle = &obj->handle;",
          "257:   log_if_error (\"insert_get_ref_handle\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "262:   if (insert->block_header->handleref.code == 5)",
          "263:     {",
          "264:       printf (\"\\t<use id=\\\"dwg-object-%d\\\" transform=\\\"translate(%f %f) \"",
          "267:               index, transform_X (ins_pt.x), transform_Y (ins_pt.y),",
          "268:               (180.0 / M_PI) * rotation, _scale.x, _scale.y, abs_ref,",
          "270:     }",
          "271:   else",
          "272:     {",
          "276:     }",
          "277: }",
          "",
          "[Removed Lines]",
          "265:               \"rotate(%f) scale(%f %f)\\\" xlink:href=\\\"#symbol-%lu\\\" /><!-- \"",
          "266:               \"block_header->handleref: %d.%d.%lu -->\\n\",",
          "269:               ins_handle->code, ins_handle->size, ins_handle->value);",
          "273:       printf (\"\\n\\n<!-- WRONG INSERT(%d.%d.%lu): handleref = %d.%d.%lu -->\\n\",",
          "274:               obj_handle->code, obj_handle->size, obj_handle->value,",
          "275:               ins_handle->code, ins_handle->size, ins_handle->value);",
          "",
          "[Added Lines]",
          "263:               \"rotate(%f) scale(%f %f)\\\" xlink:href=\\\"#symbol-%X\\\" /><!-- \"",
          "264:               \"block_header->handleref: \" FORMAT_H \" -->\\n\",",
          "267:               ARGS_H(*obj_handle));",
          "271:       printf (\"\\n\\n<!-- WRONG INSERT(\" FORMAT_H \") -->\\n\",",
          "272:               ARGS_H(*obj_handle));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "317:   dwg_object *hdr, *obj;",
          "318:   dwg_obj_block_header *_hdr;",
          "319:   int error;",
          "321:   char *name;",
          "323:   if (!ref)",
          "",
          "[Removed Lines]",
          "320:   unsigned long abs_ref;",
          "",
          "[Added Lines]",
          "317:   BITCODE_RL abs_ref;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "341:   dynget (_hdr, \"BLOCK_HEADER\", \"name\", &name);",
          "345:   if (name != NULL && name != _hdr->name && hdr->parent->header.version >= R_2007)",
          "346:     free (name);",
          "",
          "[Removed Lines]",
          "344:   printf (\"\\t<g id=\\\"symbol-%lu\\\" >\\n\\t\\t<!-- %s -->\\n\", abs_ref, name);",
          "",
          "[Added Lines]",
          "341:   printf (\"\\t<g id=\\\"symbol-%X\\\" >\\n\\t\\t<!-- %s -->\\n\", abs_ref, name);",
          "",
          "---------------"
        ],
        "include/dwg.h||include/dwg.h": [
          "File: include/dwg.h -> include/dwg.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "484: typedef struct _dwg_handle",
          "485: {",
          "489: } Dwg_Handle;",
          "492: object references: obj is resolved by handleref (e.g. via",
          "493: dwg_resolve_handleref) when reading a DWG to the respective \\ref",
          "",
          "[Removed Lines]",
          "487:   unsigned int size;",
          "488:   long unsigned int value;",
          "",
          "[Added Lines]",
          "487:   BITCODE_RC size;",
          "488:   BITCODE_RL value;",
          "491: #define FORMAT_H \"%u.%u.%X\"",
          "492: #define ARGS_H(hdl) (hdl).code, (hdl).size, (hdl).value",
          "493: #define FORMAT_REF \"(%u.%u.%X) abs:%X\"",
          "494: #define ARGS_REF(ref) (ref)->handleref.code, (ref)->handleref.size, \\",
          "495:     (ref)->handleref.value, (ref)->absolute_ref",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "501: {",
          "502:   struct _dwg_object* obj;",
          "503:   Dwg_Handle handleref;",
          "505: } Dwg_Object_Ref;",
          "507: typedef Dwg_Object_Ref* BITCODE_H;",
          "",
          "[Removed Lines]",
          "504:   long unsigned int absolute_ref;",
          "",
          "[Added Lines]",
          "510:   BITCODE_RL absolute_ref;",
          "",
          "---------------"
        ],
        "programs/dwg2SVG.c||programs/dwg2SVG.c": [
          "File: programs/dwg2SVG.c -> programs/dwg2SVG.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:   if (insert->block_header && insert->block_header->handleref.value)",
          "150:     {",
          "151:       printf (\"\\t<use id=\\\"dwg-object-%d\\\" transform=\\\"translate(%f %f) \"",
          "154:               obj->index, transform_X (insert->ins_pt.x),",
          "155:               transform_Y (insert->ins_pt.y),",
          "156:               (180.0 / M_PI) * insert->rotation, insert->scale.x,",
          "157:               insert->scale.y, insert->block_header->absolute_ref,",
          "161:     }",
          "162:   else",
          "163:     {",
          "166:     }",
          "167: }",
          "",
          "[Removed Lines]",
          "152:               \"rotate(%f) scale(%f %f)\\\" xlink:href=\\\"#symbol-%lu\\\" />\"",
          "153:               \"<!-- block_header->handleref: %d.%d.%lu -->\\n\",",
          "158:               insert->block_header->handleref.code,",
          "159:               insert->block_header->handleref.size,",
          "160:               insert->block_header->handleref.value);",
          "164:       printf (\"\\n\\n<!-- WRONG INSERT(%d.%d.%lu) -->\\n\", obj->handle.code,",
          "165:               obj->handle.size, obj->handle.value);",
          "",
          "[Added Lines]",
          "152:               \"rotate(%f) scale(%f %f)\\\" xlink:href=\\\"#symbol-%X\\\" />\"",
          "153:               \"<!-- block_header->handleref: \" FORMAT_H \" -->\\n\",",
          "158:               ARGS_H(insert->block_header->handleref));",
          "162:       printf (\"\\n\\n<!-- WRONG INSERT(\" FORMAT_H \") -->\\n\", ARGS_H(obj->handle));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "219:     }",
          "221:   hdr = ref->obj->tio.object->tio.BLOCK_HEADER;",
          "223:           hdr->name);",
          "225:   obj = get_first_owned_entity (ref->obj);",
          "",
          "[Removed Lines]",
          "222:   printf (\"\\t<g id=\\\"symbol-%lu\\\" >\\n\\t\\t<!-- %s -->\\n\", ref->absolute_ref,",
          "",
          "[Added Lines]",
          "219:   printf (\"\\t<g id=\\\"symbol-%X\\\" >\\n\\t\\t<!-- %s -->\\n\", ref->absolute_ref,",
          "",
          "---------------"
        ],
        "src/bits.c||src/bits.c": [
          "File: src/bits.c -> src/bits.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1125:   if (handle->size > 4 || handle->code > 14)",
          "1126:     {",
          "1127:       loglevel = dat->opts & 0xf;",
          "1130:       return DWG_ERR_INVALIDHANDLE;",
          "1131:     }",
          "",
          "[Removed Lines]",
          "1128:       LOG_WARN (\"Invalid handle-reference, longer than 4 bytes: (%x.%d.%lX)\",",
          "1129:                 handle->code, handle->size, handle->value)",
          "",
          "[Added Lines]",
          "1128:       LOG_WARN (\"Invalid handle-reference, longer than 4 bytes: \" FORMAT_H,",
          "1129:                 ARGS_H(*handle))",
          "",
          "---------------"
        ],
        "src/classes.inc||src/classes.inc": [
          "File: src/classes.inc -> src/classes.inc",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #define _STR(s)  #s",
          "31: #define WARN_UNHANDLED_CLASS \\",
          "33:                klass->number, klass->dxfname, klass->proxyflag,\\",
          "34:                klass->wasazombie ? \" was proxy\" : \"\",\\",
          "35:                obj->index, obj->handle.value)",
          "36: #define WARN_UNSTABLE_CLASS \\",
          "38:                klass->number, klass->dxfname, klass->proxyflag,\\",
          "39:                klass->wasazombie ? \" was proxy\" : \"\",\\",
          "40:                obj->index, obj->handle.value)",
          "",
          "[Removed Lines]",
          "32:       LOG_WARN(\"Unhandled Class %s %d %s (0x%x%s) %u/%lX\", is_entity ? \"entity\" : \"object\",\\",
          "37:       LOG_WARN(\"Unstable Class %s %d %s (0x%x%s) %u/%lX\", is_entity ? \"entity\" : \"object\",\\",
          "",
          "[Added Lines]",
          "32:       LOG_WARN(\"Unhandled Class %s %d %s (0x%x%s) %u/%X\", is_entity ? \"entity\" : \"object\",\\",
          "37:       LOG_WARN(\"Unstable Class %s %d %s (0x%x%s) %u/%X\", is_entity ? \"entity\" : \"object\",\\",
          "",
          "---------------"
        ],
        "src/dec_macros.h||src/dec_macros.h": [
          "File: src/dec_macros.h -> src/dec_macros.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "200:         handleptr = dwg_decode_handleref (hdl_dat, obj, dwg);                 \\",
          "201:     if (handleptr)                                                            \\",
          "202:       {                                                                       \\",
          "207:       }                                                                       \\",
          "208:     else                                                                      \\",
          "209:       {                                                                       \\",
          "211:       }                                                                       \\",
          "212:     LOG_INSANE (\" @%lu.%u\", pos / 8, (unsigned)(pos % 8));                    \\",
          "213:     LOG_TRACE (\"\\n\");                                                         \\",
          "",
          "[Removed Lines]",
          "203:         LOG_TRACE (#nam \": HANDLE(%x.%d.%lX)/%x absolute:%lX [H %d]\",         \\",
          "204:                    handleptr->handleref.code, handleptr->handleref.size,      \\",
          "205:                    handleptr->handleref.value, handle_code,                   \\",
          "206:                    handleptr->absolute_ref, dxf)                              \\",
          "210:         LOG_TRACE (#nam \": NULL HANDLE/%x [H %d]\", handle_code, dxf);         \\",
          "",
          "[Added Lines]",
          "203:         LOG_TRACE (#nam \": HANDLE %x: \" FORMAT_REF \" [H %d]\",                 \\",
          "204:                    handle_code, ARGS_REF(handleptr), dxf)                     \\",
          "208:         LOG_TRACE (#nam \": %x: NULL HANDLE [H %d]\", handle_code, dxf);        \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227:         handleptr = dwg_decode_handleref (hdl_dat, obj, dwg);                 \\",
          "228:     if (handleptr)                                                            \\",
          "229:       {                                                                       \\",
          "234:       }                                                                       \\",
          "235:     else                                                                      \\",
          "236:       {                                                                       \\",
          "238:                    handle_code, dxf);                                         \\",
          "239:       }                                                                       \\",
          "240:     LOG_INSANE (\" @%lu.%u\", pos / 8, (unsigned)(pos % 8));                    \\",
          "",
          "[Removed Lines]",
          "230:         LOG_TRACE (#nam \"[%d]: HANDLE(%x.%d.%lX)/%x absolute:%lX [H %d]\",     \\",
          "231:                    (int)vcount, handleptr->handleref.code,                    \\",
          "232:                    handleptr->handleref.size, handleptr->handleref.value,     \\",
          "233:                    handle_code, handleptr->absolute_ref, dxf)                 \\",
          "237:         LOG_TRACE (#nam \"[%d]: NULL HANDLE/%x [H %d]\", (int)vcount,           \\",
          "",
          "[Added Lines]",
          "228:         LOG_TRACE (#nam \"[%d]: HANDLE %x: \" FORMAT_REF \" [H %d]\",             \\",
          "229:                    (int)vcount, handle_code, ARGS_REF(handleptr), dxf)        \\",
          "233:         LOG_TRACE (#nam \"[%d]: %x: NULL HANDLE [H %d]\", (int)vcount,          \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "248:     _obj->nam = dwg_decode_handleref (dat, obj, dwg);                         \\",
          "249:     if (_obj->nam)                                                            \\",
          "250:       {                                                                       \\",
          "254:       }                                                                       \\",
          "255:   }",
          "",
          "[Removed Lines]",
          "251:         LOG_TRACE (#nam \": HANDLE(%x.%d.%lX) absolute:%lX [H %d]\\n\",          \\",
          "252:                    _obj->nam->handleref.code, _obj->nam->handleref.size,      \\",
          "253:                    _obj->nam->handleref.value, _obj->nam->absolute_ref, dxf); \\",
          "",
          "[Added Lines]",
          "247:         LOG_TRACE (#nam \": HANDLE\" FORMAT_H \" [H %d]\\n\",                      \\",
          "248:                    ARGS_H(_obj->nam->handleref), dxf);                        \\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "638:           loglevel = 0;                                                       \\",
          "639:           if (!bit_read_H (dat, &hdl))                                        \\",
          "640:             {                                                                 \\",
          "643:                          bit_position (dat) - bit_position (&here));          \\",
          "644:             }                                                                 \\",
          "645:           loglevel = oldloglevel;                                             \\",
          "",
          "[Removed Lines]",
          "641:               LOG_TRACE (\"  H :(%d.%d.%lX) (%ld)\\n\", hdl.code, hdl.size,      \\",
          "642:                          hdl.value,                                           \\",
          "",
          "[Added Lines]",
          "636:               LOG_TRACE (\"  H : \" FORMAT_H \" (%ld)\\n\", ARGS_H(hdl),           \\",
          "",
          "---------------"
        ],
        "src/decode.c||src/decode.c": [
          "File: src/decode.c -> src/decode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1121:           last_offset += offset;",
          "1122:           LOG_TRACE (\"\\nNext object: %lu\\t\", (unsigned long)dwg->num_objects)",
          "1124:                      offset, last_offset)",
          "1126:           if (dat->byte == oldpos)",
          "",
          "[Removed Lines]",
          "1123:           LOG_TRACE (\"Handle: %lX\\tOffset: \" FORMAT_MC \" @%lu\\n\", handle,",
          "",
          "[Added Lines]",
          "1123:           LOG_TRACE (\"Handle: \" FORMAT_UMC",
          "1124:                      \"\\tOffset: \" FORMAT_MC \" @%lu\\n\", handle,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1350:     {",
          "1351:       Dwg_Object_Ref *ref = dwg->object_ref[i];",
          "1352:       LOG_INSANE (\"==========\\n\")",
          "1358:       obj = dwg_resolve_handle (dwg, ref->absolute_ref);",
          "1359:       if (obj)",
          "1360:         {",
          "1364:         }",
          "1366:       ref->obj = obj;",
          "",
          "[Removed Lines]",
          "1353:       LOG_TRACE (\"-objref[%3ld]: HANDLE(%d.%d.%lX) Absolute:%lX\\n\", (long)i,",
          "1354:                  ref->handleref.code, ref->handleref.size,",
          "1355:                  ref->handleref.value, ref->absolute_ref)",
          "1361:           LOG_TRACE (\"-found:     HANDLE(%d.%d.%lX) => [%u]\\n\",",
          "1362:                      obj->handle.code, obj->handle.size, obj->handle.value,",
          "1363:                      obj->index)",
          "",
          "[Added Lines]",
          "1354:       LOG_TRACE (\"-objref[%3ld]: HANDLE\" FORMAT_REF \"\\n\", (long)i,",
          "1355:                  ARGS_REF(ref))",
          "1361:           LOG_TRACE (\"-found:     HANDLE(\" FORMAT_H \") => [%u]\\n\",",
          "1362:                      ARGS_H(obj->handle), obj->index)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2309:           last_offset += offset;",
          "2310:           LOG_TRACE (\"\\n< Next object: %lu\\t\", (unsigned long)dwg->num_objects)",
          "2312:                       offset, last_offset)",
          "2314:           if (hdl_dat.byte == oldpos)",
          "",
          "[Removed Lines]",
          "2311:           LOG_HANDLE (\"Handle: %lX\\tOffset: \" FORMAT_MC \" @%lu\\n\", handle,",
          "",
          "[Added Lines]",
          "2310:           LOG_HANDLE (\"Handle: \" FORMAT_UMC",
          "2311:                       \"\\tOffset: \" FORMAT_MC \" @%lu\\n\", handle,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2758:         }",
          "2759:       else",
          "2760:         {",
          "2764:           if (_obj->supertype == DWG_SUPERTYPE_OBJECT && _obj->dxfname",
          "2765:               && strEQc (_obj->dxfname, \"MLEADERSTYLE\"))",
          "2766:             { // check for is_new_format: has extended data for APPID",
          "",
          "[Removed Lines]",
          "2761:           LOG_TRACE (\"EED[%u] handle: %d.%d.%lX\\n\", idx,",
          "2762:                      obj->eed[idx].handle.code, obj->eed[idx].handle.size,",
          "2763:                      obj->eed[idx].handle.value);",
          "",
          "[Added Lines]",
          "2761:           LOG_TRACE (\"EED[%u] handle: \" FORMAT_H \"\\n\", idx,",
          "2762:                      ARGS_H(obj->eed[idx].handle));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2782:                               = obj->tio.MLEADERSTYLE;",
          "2783:                           this->is_new_format = 1;",
          "2784:                           LOG_TRACE (",
          "2786:                               ref.absolute_ref);",
          "2787:                         }",
          "2788:                     }",
          "",
          "[Removed Lines]",
          "2785:                               \"EED found ACAD_MLEADERVER %lu: new format\\n\",",
          "",
          "[Added Lines]",
          "2784:                               \"EED found ACAD_MLEADERVER %X: new format\\n\",",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3081:       ent->picture_exists = 0;",
          "3082:       return error;",
          "3083:     }",
          "3087:   PRE (R_13) { return DWG_ERR_NOTYETSUPPORTED; }",
          "",
          "[Removed Lines]",
          "3084:   LOG_TRACE (\"handle: %d.%d.%lX [5]\\n\", obj->handle.code, obj->handle.size,",
          "3085:              obj->handle.value)",
          "",
          "[Added Lines]",
          "3083:   LOG_TRACE (\"handle: \" FORMAT_H \" [5]\\n\", ARGS_H(obj->handle))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3148:       LOG_ERROR (\"Wrong object handle at pos 0x%0lx\", dat->byte)",
          "3149:       return error;",
          "3150:     }",
          "3154:   error |= dwg_decode_eed (dat, _obj);",
          "3155:   if (error & (DWG_ERR_INVALIDEED | DWG_ERR_VALUEOUTOFBOUNDS))",
          "",
          "[Removed Lines]",
          "3151:   LOG_TRACE (\"handle: %x.%d.%lX [5]\\n\", obj->handle.code, obj->handle.size,",
          "3152:              obj->handle.value)",
          "",
          "[Added Lines]",
          "3149:   LOG_TRACE (\"handle: \" FORMAT_H \" [5]\\n\", ARGS_H(obj->handle))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3234:   if (bit_read_H (dat, &ref->handleref))",
          "3235:     {",
          "3238:       free (ref);",
          "3239:       return NULL;",
          "3240:     }",
          "",
          "[Removed Lines]",
          "3236:       LOG_WARN (\"Invalid handleref: (%d.%d.%lX)\", ref->handleref.code,",
          "3237:                 ref->handleref.size, ref->handleref.value)",
          "",
          "[Added Lines]",
          "3233:       LOG_WARN (\"Invalid handleref: \" FORMAT_REF, ARGS_REF(ref))",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3353:   if (err)",
          "3354:     {",
          "3360:       free (ref);",
          "3361:       return NULL;",
          "",
          "[Removed Lines]",
          "3356:       LOG_WARN (\"Invalid handleref error: 0x%x. Wanted code %d, got (%d.%d.%lX)\",",
          "3357:                 err, code, ref->handleref.code, ref->handleref.size,",
          "3358:                 ref->handleref.value)",
          "",
          "[Added Lines]",
          "3352:       LOG_WARN (\"Invalid handleref error: 0x%x. Wanted code %d, got (\" FORMAT_H \")\",",
          "3353:                 err, code, ARGS_H(ref->handleref))",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3727:         case VT_HANDLE:",
          "3728:         case VT_OBJECTID:",
          "3729:           bit_read_fixed (dat, rbuf->value.hdl, 8);",
          "3732:           break;",
          "3733:         case VT_INVALID:",
          "3734:         default:",
          "",
          "[Removed Lines]",
          "3730:           LOG_TRACE (\"xdata[%d]: %lX [HDL %d]\\n\", num_xdata,",
          "3731:                      (unsigned long)*(uint64_t *)rbuf->value.hdl, rbuf->type);",
          "",
          "[Added Lines]",
          "3725:           LOG_TRACE (\"xdata[%d]: %X [HDL %d]\\n\", num_xdata,",
          "3726:                      (unsigned)*(uint64_t *)rbuf->value.hdl, rbuf->type);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3783:         layer->obj = dwg_ref_object_relative (dwg, layer, obj);",
          "3784:       if (!layer || !layer->obj)",
          "3785:         { // maybe a reactor pointing forwards or vertex",
          "3788:           if (_obj->num_owned > 0)",
          "3789:             {",
          "3790:               Dwg_Object_Ref *vertex = _obj->vertex[0];",
          "",
          "[Removed Lines]",
          "3786:           LOG_WARN (\"Wrong POLYLINE.layer %lX\",",
          "3787:                     layer ? layer->handleref.value : 0UL);",
          "",
          "[Added Lines]",
          "3781:           LOG_WARN (\"Wrong POLYLINE.layer %X\",",
          "3782:                     layer ? layer->handleref.value : 0);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3796:                   Dwg_Object *seq;",
          "3797:                   obj->tio.entity->layer = layer = vertex;",
          "3798:                   LOG_WARN (",
          "3800:                       layer->handleref.value);",
          "3802:                   for (i = 0; i < _obj->num_owned - 1; i++)",
          "",
          "[Removed Lines]",
          "3799:                       \"POLYLINE.layer is vertex[0] %lX, shift em, NULL seqend\",",
          "",
          "[Added Lines]",
          "3794:                       \"POLYLINE.layer is vertex[0] %X, shift em, NULL seqend\",",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3811:                   seq = dwg_next_object (obj);",
          "3812:                   if (seq && seq->type == DWG_TYPE_SEQEND)",
          "3813:                     {",
          "3815:                                 seq->handle.value);",
          "3816:                       seqend = _obj->seqend = dwg_find_objectref (dwg, seq);",
          "3817:                     }",
          "",
          "[Removed Lines]",
          "3814:                       LOG_WARN (\"POLYLINE.seqend = POLYLINE+1 %lX\",",
          "",
          "[Added Lines]",
          "3809:                       LOG_WARN (\"POLYLINE.seqend = POLYLINE+1 %X\",",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3820:                       seq = dwg_next_object (seqend->obj);",
          "3821:                       if (seq && seq->type == DWG_TYPE_SEQEND)",
          "3822:                         {",
          "3824:                                     seq->handle.value);",
          "3825:                           seqend = _obj->seqend",
          "3826:                               = dwg_find_objectref (dwg, seq);",
          "",
          "[Removed Lines]",
          "3823:                           LOG_WARN (\"POLYLINE.seqend = VERTEX+1 %lX\",",
          "",
          "[Added Lines]",
          "3818:                           LOG_WARN (\"POLYLINE.seqend = VERTEX+1 %X\",",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3856:                    && v->obj->fixedtype != DWG_TYPE_VERTEX_PFACE",
          "3857:                    && v->obj->fixedtype != DWG_TYPE_VERTEX_PFACE_FACE)",
          "3858:             {",
          "3860:                         v->handleref.value, v->obj->dxfname)",
          "3861:             }",
          "3862:         }",
          "",
          "[Removed Lines]",
          "3859:               LOG_WARN (\"Wrong POLYLINE.vertex[%d] %lX %s\", i,",
          "",
          "[Added Lines]",
          "3854:               LOG_WARN (\"Wrong POLYLINE.vertex[%d] %X %s\", i,",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "4539:               }",
          "4540:               if (!bit_read_H (dat, &obj->handle))",
          "4541:                 {",
          "4544:                 }",
          "4545:               restartpos = dat->byte;",
          "4546:               obj->supertype = DWG_SUPERTYPE_UNKNOWN;",
          "",
          "[Removed Lines]",
          "4542:                   LOG_TRACE (\"handle: %d.%d.%lX [5]\\n\", obj->handle.code,",
          "4543:                              obj->handle.size, obj->handle.value);",
          "",
          "[Added Lines]",
          "4537:                   LOG_TRACE (\"handle: \" FORMAT_H \" [5]\\n\", ARGS_H(obj->handle));",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "4553:   if (obj->handle.value)",
          "4554:     { // empty only with UNKNOWN",
          "4556:                   (unsigned long)num);",
          "4557:       hash_set (dwg->object_map, obj->handle.value, (uint32_t)num);",
          "4558:     }",
          "",
          "[Removed Lines]",
          "4555:       LOG_HANDLE (\" object_map{%lX} = %lu\\n\", obj->handle.value,",
          "",
          "[Added Lines]",
          "4549:       LOG_HANDLE (\" object_map{%X} = %lu\\n\", obj->handle.value,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "4675:         return 1;",
          "4676:       if (!seqend || next == seqend->obj)",
          "4677:         {",
          "4679:                      obj->handle.value,",
          "4680:                      seqend && seqend->obj ? seqend->obj->handle.value : 0)",
          "4681:           return 0;",
          "",
          "[Removed Lines]",
          "4678:           LOG_TRACE (\"unsorted INSERT %lX SEQEND %lX ATTRIB\\n\",",
          "",
          "[Added Lines]",
          "4672:           LOG_TRACE (\"unsorted INSERT %X SEQEND %X ATTRIB\\n\",",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "4689:         return 1;",
          "4690:       if (!seqend || next == seqend->obj)",
          "4691:         {",
          "4693:                      obj->handle.value,",
          "4694:                      seqend && seqend->obj ? seqend->obj->handle.value : 0)",
          "4695:           return 0;",
          "",
          "[Removed Lines]",
          "4692:           LOG_TRACE (\"unsorted INSERT %lX SEQEND %lX ATTRIB\\n\",",
          "",
          "[Added Lines]",
          "4686:           LOG_TRACE (\"unsorted INSERT %X SEQEND %X ATTRIB\\n\",",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "4778:           if (first_vertex->obj->index < obj->index)",
          "4779:             {",
          "4781:                         first_vertex->obj->handle.value, obj->handle.value);",
          "4782:               if (_obj->num_owned > 1)",
          "4783:                 first_vertex = _obj->vertex[1];",
          "",
          "[Removed Lines]",
          "4780:               LOG_WARN (\"skip wrong POLYLINE.vertex[0] handle %lX < %lX\\n\",",
          "",
          "[Added Lines]",
          "4774:               LOG_WARN (\"skip wrong POLYLINE.vertex[0] handle %X < %X\\n\",",
          "",
          "---------------"
        ],
        "src/dwg.spec||src/dwg.spec": [
          "File: src/dwg.spec -> src/dwg.spec",
          "--- Hunk 1 ---",
          "[Context before]",
          "1978:     }",
          "1979:   if (FIELD_VALUE(numitems) > 10000)",
          "1980:     {",
          "1982:               obj->handle.value);",
          "1983:       DEBUG_HERE_OBJ",
          "1984:       return DWG_ERR_VALUEOUTOFBOUNDS;",
          "",
          "[Removed Lines]",
          "1981:       LOG_ERROR(\"Invalid dictionary with more than 10.000 entries. Handle: %lu\\n\",",
          "",
          "[Added Lines]",
          "1981:       LOG_ERROR(\"Invalid dictionary with more than 10.000 entries. Handle: %X\\n\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2033: #endif",
          "2034:   if (FIELD_VALUE(numitems) > 10000)",
          "2035:     {",
          "2037:               obj->handle.value);",
          "2038:       DEBUG_HERE_OBJ",
          "2039:       return DWG_ERR_VALUEOUTOFBOUNDS;",
          "",
          "[Removed Lines]",
          "2036:       LOG_ERROR(\"Invalid dictionary with more than 10.000 entries. Handle: %lu\\n\",",
          "",
          "[Added Lines]",
          "2036:       LOG_ERROR(\"Invalid dictionary with more than 10.000 entries. Handle: %X\\n\",",
          "",
          "---------------"
        ],
        "src/encode.c||src/encode.c": [
          "File: src/encode.c -> src/encode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "369:                       hdlptr->handleref.code);                                \\",
          "370:           }                                                                   \\",
          "371:         bit_write_H (hdl_dat, &hdlptr->handleref);                            \\",
          "375:       }                                                                       \\",
          "376:   }",
          "",
          "[Removed Lines]",
          "372:         LOG_TRACE (#nam \": HANDLE(%x.%d.%lX) absolute:%lu [%d]\\n\",            \\",
          "373:                    hdlptr->handleref.code, hdlptr->handleref.size,            \\",
          "374:                    hdlptr->handleref.value, hdlptr->absolute_ref, dxf)        \\",
          "",
          "[Added Lines]",
          "372:         LOG_TRACE (#nam \": HANDLE\" FORMAT_REF \" [%d]\\n\",                      \\",
          "373:                    ARGS_REF(hdlptr), dxf)                                     \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "399:                       _obj->nam->handleref.code);                             \\",
          "400:           }                                                                   \\",
          "401:         bit_write_H (hdl_dat, &_obj->nam->handleref);                         \\",
          "406:       }                                                                       \\",
          "407:   }",
          "",
          "[Removed Lines]",
          "402:         LOG_TRACE (#nam \"[%d]: HANDLE(%x.%d.%lX) absolute:%lu [%d]\\n\",        \\",
          "403:                    (int)vcount, _obj->nam->handleref.code,                    \\",
          "404:                    _obj->nam->handleref.size, _obj->nam->handleref.value,     \\",
          "405:                    _obj->nam->absolute_ref, dxf)                              \\",
          "",
          "[Added Lines]",
          "401:         LOG_TRACE (#nam \"[%d]: HANDLE\" FORMAT_REF \" [%d]\\n\",                  \\",
          "402:                    (int)vcount, ARGS_REF(_obj->nam), dxf)                     \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "571:     error = dwg_encode_object (obj, dat, hdl_dat, str_dat);                   \\",
          "572:     if (error)                                                                \\",
          "573:       return error;                                                           \\",
          "577: #define DWG_OBJECT_END                                                        \\",
          "578:   if (obj->bitsize == 0 && dat->version >= R_13 && dat->version <= R_2007)    \\",
          "",
          "[Removed Lines]",
          "574:     LOG_INFO (\"Object \" #token \" handle: %x.%d.%lX\\n\", obj->handle.code,      \\",
          "575:               obj->handle.size, obj->handle.value)",
          "",
          "[Added Lines]",
          "571:     LOG_INFO (\"Object \" #token \" handle: \" FORMAT_H \"\\n\", ARGS_H(obj->handle))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "614: typedef struct",
          "615: {",
          "617:   long int address;",
          "618:   BITCODE_BL index;",
          "619: } Object_Map;",
          "",
          "[Removed Lines]",
          "616:   long int handle;",
          "",
          "[Added Lines]",
          "612:   BITCODE_BL handle;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "673:   unsigned int ckr;",
          "674:   unsigned int sekcisize = 0;",
          "675:   long unsigned int last_address;",
          "677:   Object_Map *omap;",
          "678:   Object_Map pvzmap;",
          "679:   Bit_Chain *hdl_dat;",
          "",
          "[Removed Lines]",
          "676:   long unsigned int last_handle;",
          "",
          "[Added Lines]",
          "672:   BITCODE_BL last_handle;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1002:     {",
          "1003:       Dwg_Object *obj;",
          "1004:       BITCODE_BL index = omap[j].index;",
          "1006:                  \"==========================================\\n\",",
          "1007:                  j, omap[j].handle, dat->byte);",
          "1008:       omap[j].address = dat->byte;",
          "",
          "[Removed Lines]",
          "1005:       LOG_TRACE (\"\\n> Next object: \" FORMAT_BL \" \\tHandle: %lX\\tOffset: %lu\\n\"",
          "",
          "[Added Lines]",
          "1001:       LOG_TRACE (\"\\n> Next object: \" FORMAT_BL \" \\tHandle: %X\\tOffset: %lu\\n\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1614:                           obj->bitsize, dat->byte, dat->bit);",
          "1615:               }",
          "1616:               bit_write_H (dat, &(obj->handle));",
          "1621:               bit_write_TF (dat, obj->tio.unknown, obj->size);",
          "",
          "[Removed Lines]",
          "1617:               LOG_INFO (\"Object handle: %x.%d.%lX\\n\", obj->handle.code,",
          "1618:                         obj->handle.size, obj->handle.value);",
          "",
          "[Added Lines]",
          "1613:               LOG_INFO (\"Object handle: \" FORMAT_H \"\\n\", ARGS_H(obj->handle));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1673:         {",
          "1674:           bit_write_BS (dat, size);",
          "1675:           bit_write_H (dat, &(ent->eed[i].handle));",
          "1678:           bit_write_TF (dat, ent->eed[i].raw, size);",
          "1679:         }",
          "1680:     }",
          "",
          "[Removed Lines]",
          "1676:           LOG_TRACE (\"EED[%u] handle: %x.%d.%lX\\n\", i, ent->eed[i].handle.code,",
          "1677:                      ent->eed[i].handle.size, ent->eed[i].handle.value);",
          "",
          "[Added Lines]",
          "1671:           LOG_TRACE (\"EED[%u] handle: \" FORMAT_H \"\\n\", i,",
          "1672:                      ARGS_H(ent->eed[i].handle));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1743:   }",
          "1745:   bit_write_H (dat, &(obj->handle));",
          "1748:   PRE (R_13) { return DWG_ERR_NOTYETSUPPORTED; }",
          "1750:   error |= dwg_encode_eed (dat, (Dwg_Object_Object *)ent);",
          "",
          "[Removed Lines]",
          "1746:   LOG_TRACE (\"handle: %x.%d.%lX [5]\\n\", obj->handle.code, obj->handle.size,",
          "1747:              obj->handle.value)",
          "",
          "[Added Lines]",
          "1741:   LOG_TRACE (\"handle: \" FORMAT_H \" [5]\\n\", ARGS_H(obj->handle))",
          "",
          "---------------"
        ],
        "src/header_variables_r11.spec||src/header_variables_r11.spec": [
          "File: src/header_variables_r11.spec -> src/header_variables_r11.spec",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:   FIELD_RS (CECOLOR.index, 62);",
          "135:   DECODER {",
          "136:     _obj->CELTYPE = calloc(1, sizeof(Dwg_Object_Ref));",
          "139:   }",
          "140:   FIELD_TIMEBLL (TDCREATE, 40);",
          "141:   FIELD_TIMEBLL (TDUPDATE, 40);",
          "",
          "[Removed Lines]",
          "137:     _obj->CELTYPE->absolute_ref = bit_read_RS(dat); // 6, ff for BYLAYER, fe for BYBLOCK",
          "138:     LOG_TRACE(\"CELTYPE: %lu [long 6]\\n\", _obj->CELTYPE->absolute_ref)",
          "",
          "[Added Lines]",
          "137:     _obj->CELTYPE->absolute_ref = (BITCODE_RL)bit_read_RS(dat); // 6, ff for BYLAYER, fe for BYBLOCK",
          "138:     LOG_TRACE(\"CELTYPE: %u [long 6]\\n\", _obj->CELTYPE->absolute_ref)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "204:   dat->byte = 0x4ee;",
          "205:   DECODER {",
          "206:     _obj->HANDSEED = calloc(1, sizeof(Dwg_Object_Ref));",
          "209:   }",
          "210:   DEBUG_HERE //4f0",
          "",
          "[Removed Lines]",
          "207:     _obj->HANDSEED->absolute_ref = bit_read_RS(dat);",
          "208:     LOG_TRACE(\"HANDSEED: %lu [long 5]\\n\", _obj->HANDSEED->absolute_ref)",
          "",
          "[Added Lines]",
          "207:     _obj->HANDSEED->absolute_ref = (BITCODE_RL)bit_read_RS(dat);",
          "208:     LOG_TRACE(\"HANDSEED: %u [long 5]\\n\", _obj->HANDSEED->absolute_ref)",
          "",
          "---------------"
        ],
        "src/in_dxf.c||src/in_dxf.c": [
          "File: src/in_dxf.c -> src/in_dxf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:     case VT_HANDLE:",
          "220:     case VT_OBJECTID:",
          "221:       dxf_read_string (dat, NULL);",
          "224:       break;",
          "225:     case VT_INVALID:",
          "226:     default:",
          "",
          "[Removed Lines]",
          "222:       sscanf (buf, \"%X\", &pair->value.i);",
          "223:       LOG_TRACE (\"  dxf (%d, %X)\\n\", (int)pair->code, pair->value.i);",
          "",
          "[Added Lines]",
          "222:       sscanf (buf, \"%X\", &pair->value.u);",
          "223:       LOG_TRACE (\"  dxf (%d, %X)\\n\", (int)pair->code, pair->value.u);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "298:     {                                                                         \\",
          "299:       if (GROUP (dxf))                                                        \\",
          "300:         {                                                                     \\",
          "302:                           &hdlptr->absolute_ref);                             \\",
          "303:           dat->byte += i;                                                     \\",
          "304:         }                                                                     \\",
          "",
          "[Removed Lines]",
          "301:           int i = sscanf ((char *)&dat->chain[dat->byte], \"%lX\",              \\",
          "",
          "[Added Lines]",
          "301:           int i = sscanf ((char *)&dat->chain[dat->byte], \"%X\",               \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "728:     _ent = obj->tio.entity;                                                   \\",
          "729:     _obj = ent = _ent->tio.token;                                             \\",
          "730:     obj->fixedtype = DWG_TYPE_##token;                                        \\",
          "734: #define DWG_ENTITY_END                                                        \\",
          "735:   return error;                                                               \\",
          "",
          "[Removed Lines]",
          "731:     LOG_TRACE (\"Entity handle: %d.%d.%lX\\n\", obj->handle.code,                \\",
          "732:                obj->handle.size, obj->handle.value)",
          "",
          "[Added Lines]",
          "731:     LOG_TRACE (\"Entity handle: \" FORMAT_H \"\\n\", ARGS_H(obj->handle))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "748:     obj->fixedtype = DWG_TYPE_##token;                                        \\",
          "749:     LOG_INFO (\"Object \" #token \":\\n\")                                         \\",
          "750:     _obj = obj->tio.object->tio.token;                                        \\",
          "754: #define DWG_OBJECT_END                                                        \\",
          "755:   return error;                                                               \\",
          "",
          "[Removed Lines]",
          "751:     LOG_TRACE (\"Object handle: %d.%d.%lX\\n\", obj->handle.code,                \\",
          "752:                obj->handle.size, obj->handle.value)",
          "",
          "[Added Lines]",
          "750:     LOG_TRACE (\"Object handle: \" FORMAT_H \"\\n\", ARGS_H(obj->handle))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1102:               LOG_WARN (\"Unknown object, skipping eed/reactors/xdic\");",
          "1103:               SINCE (R_2000){",
          "1104:                 LOG_INFO (\"Object bitsize: %u\\n\", obj->bitsize)",
          "1107:             }",
          "1108:         }",
          "1109:     }",
          "",
          "[Removed Lines]",
          "1105:               } LOG_INFO (\"Object handle: %d.%d.%lX\\n\", obj->handle.code,",
          "1106:                           obj->handle.size, obj->handle.value);",
          "",
          "[Added Lines]",
          "1103:               }",
          "1104:               LOG_INFO (\"Object handle: \" FORMAT_H \"\\n\", ARGS_H(obj->handle));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1434:   if (strEQc (name, nam))                                            \\",
          "1435:     {                                                                \\",
          "1436:       obj->type = obj->fixedtype = DWG_TYPE_##typenam;               \\",
          "",
          "[Removed Lines]",
          "1433: #define ADD_TYPE(nam, typenam)                                       \\",
          "",
          "[Added Lines]",
          "1432: int add_handle (Dwg_Handle *restrict hdl, BITCODE_RC code,",
          "1433:                 BITCODE_RL value, Dwg_Object *restrict obj)",
          "1434: {",
          "1435:   int offset = obj ? (value - (int)obj->handle.value) : 0;",
          "1436:   hdl->code = code;",
          "1437:   hdl->value = value;",
          "1438:   hdl->size = 1;",
          "1439:   if (hdl->value > 255) //TODO see bits_write_H",
          "1440:     hdl->size = 2;",
          "1441:   if (code != 5 &&",
          "1442:       obj && abs(offset) == 1)",
          "1443:     {",
          "1445:       if (offset == 1)",
          "1446:         {",
          "1447:           hdl->code = 6; hdl->value = 0L; hdl->size = 0;",
          "1448:         }",
          "1449:       else if (offset == -1)",
          "1450:         {",
          "1451:           hdl->code = 8; hdl->value = 0L; hdl->size = 0;",
          "1452:         }",
          "1453:     }",
          "1454:   return 0;",
          "1455: }",
          "1457: Dwg_Object_Ref *",
          "1458: add_handleref (BITCODE_RC code, BITCODE_RL value, Dwg_Object *obj)",
          "1459: {",
          "1460:   Dwg_Object_Ref *ref = calloc (1, sizeof (Dwg_Object_Ref));",
          "1462:   add_handle (&ref->handleref, code, value, obj);",
          "1463:   ref->absolute_ref = value;",
          "1465:   return ref;",
          "1466: }",
          "1469: #define ADD_OBJECT(nam, typenam)                                     \\",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1477:   strcat (ctrlname, \"_CONTROL\");",
          "1478:   LOG_TRACE (\"add %s\\n\", ctrlname);",
          "1481:   else",
          "1483:   else",
          "1485:   else",
          "1487:   else",
          "1489:   else",
          "1491:   else",
          "1493:   else",
          "1495:   else",
          "1497:   else",
          "1499:   else",
          "1500:     {",
          "1501:       LOG_ERROR (\"Unknown DXF TABLE %s nor %s_CONTROL\", name, name);",
          "",
          "[Removed Lines]",
          "1480:   ADD_TYPE (\"LTYPE\", LTYPE_CONTROL)",
          "1482:   ADD_TYPE (\"VPORT\", VPORT_CONTROL)",
          "1484:   ADD_TYPE (\"APPID\", APPID_CONTROL)",
          "1486:   ADD_TYPE (\"BLOCK\", BLOCK_CONTROL)",
          "1488:   ADD_TYPE (\"DIMSTYLE\", DIMSTYLE_CONTROL)",
          "1490:   ADD_TYPE (\"LAYER\", LAYER_CONTROL)",
          "1492:   ADD_TYPE (\"STYLE\", STYLE_CONTROL)",
          "1494:   ADD_TYPE (\"UCS\", UCS_CONTROL)",
          "1496:   ADD_TYPE (\"VIEW\", VIEW_CONTROL)",
          "1498:   ADD_TYPE (\"VPORT_ENTITY\", VPORT_ENTITY_CONTROL)",
          "",
          "[Added Lines]",
          "1516:   ADD_OBJECT (\"LTYPE\", LTYPE_CONTROL)",
          "1518:   ADD_OBJECT (\"VPORT\", VPORT_CONTROL)",
          "1520:   ADD_OBJECT (\"APPID\", APPID_CONTROL)",
          "1522:   ADD_OBJECT (\"BLOCK\", BLOCK_CONTROL)",
          "1524:   ADD_OBJECT (\"DIMSTYLE\", DIMSTYLE_CONTROL)",
          "1526:   ADD_OBJECT (\"LAYER\", LAYER_CONTROL)",
          "1528:   ADD_OBJECT (\"STYLE\", STYLE_CONTROL)",
          "1530:   ADD_OBJECT (\"UCS\", UCS_CONTROL)",
          "1532:   ADD_OBJECT (\"VIEW\", VIEW_CONTROL)",
          "1534:   ADD_OBJECT (\"VPORT_ENTITY\", VPORT_ENTITY_CONTROL)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1516:         {",
          "1517:         case 5:",
          "1518:           {",
          "1519:             char ctrlobj[80];",
          "1525:             strcpy (ctrlobj, ctrlname);",
          "1526:             strcat (ctrlobj, \"_OBJECT\");",
          "1531:           }",
          "1532:           break;",
          "1533:         case 330: // ownerhandle mostly 0",
          "1535:             {",
          "1541:             }",
          "1542:           break;",
          "1543:         case 100: // Always AcDbSymbolTable. ignore",
          "1544:           break;",
          "1545:         case 360: // {ACAD_XDICTIONARY TODO",
          "1550:         case 102: // {ACAD_XDICTIONARY TODO",
          "1551:           break;",
          "1552:         case 70:",
          "1553:           dwg_dynapi_entity_set_value (_obj, obj->name, \"num_entries\",",
          "1554:                                        &pair->value, is_utf);",
          "1557:           break;",
          "1558:         case 71:",
          "1559:           if (strEQc (name, \"DIMSTYLE\"))",
          "1560:             {",
          "1561:               dwg_dynapi_entity_set_value (_obj, obj->name, \"num_more_handles\",",
          "1562:                                            &pair->value, is_utf);",
          "1565:               break;",
          "1566:             }",
          "",
          "[Removed Lines]",
          "1520:             obj->handle.code = 0;",
          "1521:             obj->handle.value = pair->value.i;",
          "1522:             obj->handle.size = 1;",
          "1523:             if (obj->handle.value > 255) //TODO see bits_write_H",
          "1524:               obj->handle.size = 2;",
          "1528:             dwg_dynapi_header_set_value (dwg, ctrlobj, &obj->handle, 0);",
          "1529:             LOG_TRACE (\"%s.handle = (%d,%d,%lX) [5]\\n\", ctrlname,",
          "1530:                        obj->handle.code, obj->handle.size, obj->handle.value);",
          "1534:           if (pair->value.i)",
          "1536:               LOG_WARN (\"Unhandled %s.ownerhandle %X [330]\",  ctrlname,",
          "1537:                         (unsigned)pair->value.i);",
          "1546:           LOG_WARN (\"Unhandled %s.xdicobjhandle = %X [360]\\n\", ctrlname,",
          "1548:                     (unsigned)pair->value.i);",
          "1555:           LOG_TRACE (\"%s.num_entries = %d [70]\\n\", ctrlname,",
          "1556:                      pair->value.i)",
          "1563:               LOG_TRACE (\"%s.more_handles = %d [71]\\n\", ctrlname,",
          "1564:                          pair->value.i)",
          "",
          "[Added Lines]",
          "1555:             Dwg_Object_Ref *ref;",
          "1557:             add_handle (&obj->handle, 0, pair->value.u, NULL);",
          "1558:             LOG_TRACE (\"%s.handle = \" FORMAT_H \" [5]\\n\", ctrlname,",
          "1559:                        ARGS_H(obj->handle));",
          "1562:             ref = add_handleref (3, pair->value.u, obj);",
          "1565:             dwg_dynapi_header_set_value (dwg, ctrlobj, &ref, 0);",
          "1566:             LOG_TRACE (\"HEADER.%s = \" FORMAT_REF \" [0]\\n\", ctrlobj,",
          "1567:                        ARGS_REF(ref));",
          "1571:           if (pair->value.u)",
          "1573:               obj->tio.object->ownerhandle = add_handleref (4, pair->value.u, obj);",
          "1574:               LOG_TRACE (\"%s.ownerhandle = \" FORMAT_REF \" [330]\\n\", ctrlname,",
          "1575:                          ARGS_REF(obj->tio.object->ownerhandle));",
          "1581:           obj->tio.object->xdicobjhandle = add_handleref (0, pair->value.u, obj);",
          "1582:           LOG_TRACE (\"%s.xdicobjhandle = \" FORMAT_REF \" [330]\\n\", ctrlname,",
          "1583:                      ARGS_REF(obj->tio.object->xdicobjhandle));",
          "1584:           break;",
          "1590:           LOG_TRACE (\"%s.num_entries = %u [70]\\n\", ctrlname,",
          "1591:                      pair->value.u)",
          "1598:               LOG_TRACE (\"%s.more_handles = %u [71]\\n\", ctrlname,",
          "1599:                          pair->value.u)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1594:   LOG_TRACE (\"add %s\\n\", name);",
          "1597:   else",
          "1599:   else",
          "1601:   else",
          "1603:   else",
          "1605:   else",
          "1607:   else",
          "1609:   else",
          "1613:   else",
          "1614:     {",
          "1615:       LOG_ERROR (\"Unknown DXF AcDbSymbolTableRecord %s\", name);",
          "",
          "[Removed Lines]",
          "1596:   ADD_TYPE (\"LTYPE\", LTYPE)",
          "1598:   ADD_TYPE (\"VPORT\", VPORT)",
          "1600:   ADD_TYPE (\"APPID\", APPID)",
          "1602:   ADD_TYPE (\"DIMSTYLE\", DIMSTYLE)",
          "1604:   ADD_TYPE (\"LAYER\", LAYER)",
          "1606:   ADD_TYPE (\"STYLE\", STYLE)",
          "1608:   ADD_TYPE (\"UCS\", UCS)",
          "1610:   ADD_TYPE (\"VIEW\", VIEW)",
          "",
          "[Added Lines]",
          "1631:   ADD_OBJECT (\"LTYPE\", LTYPE)",
          "1633:   ADD_OBJECT (\"VPORT\", VPORT)",
          "1635:   ADD_OBJECT (\"APPID\", APPID)",
          "1637:   ADD_OBJECT (\"DIMSTYLE\", DIMSTYLE)",
          "1639:   ADD_OBJECT (\"LAYER\", LAYER)",
          "1641:   ADD_OBJECT (\"STYLE\", STYLE)",
          "1643:   ADD_OBJECT (\"UCS\", UCS)",
          "1645:   ADD_OBJECT (\"VIEW\", VIEW)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1628:         { // TABLE common flags: name, xrefref, xrefdep, ...",
          "1629:         case 5:",
          "1630:           {",
          "1638:           }",
          "1639:           break;",
          "1640:         case 330:",
          "1642:             {",
          "1651:             }",
          "1652:           break;",
          "1653:         case 100: // Always AcDbSymbolTableRecord and then AcDb*TableRecord. ignore",
          "",
          "[Removed Lines]",
          "1631:             obj->handle.code = 0;",
          "1632:             obj->handle.value = pair->value.i;",
          "1633:             obj->handle.size = 1;",
          "1634:             if (obj->handle.value > 255) //TODO see bits_write_H",
          "1635:               obj->handle.size = 2;",
          "1636:             LOG_TRACE (\"%s.handle = (%d,%d,%lX) [5]\\n\", name,",
          "1637:                        obj->handle.code, obj->handle.size, obj->handle.value);",
          "1641:           if (pair->value.i)",
          "1643:               Dwg_Object_Ref *ref = calloc (1, sizeof (Dwg_Object_Ref));",
          "1644:               Dwg_Handle *ohdl;",
          "1645:               ref->handleref.code = 4;",
          "1646:               ref->handleref.value = ref->absolute_ref = pair->value.i;",
          "1647:               ref->handleref.size = 1;",
          "1648:               obj->tio.object->ownerhandle = ref;",
          "1649:               LOG_TRACE (\"%s.ownerhandle = (%d,%d,%lX) [330]\\n\", name,",
          "1650:                        ref->handleref.code, ref->handleref.size, ref->handleref.value);",
          "",
          "[Added Lines]",
          "1666:             add_handle (&obj->handle, 0, pair->value.u, NULL);",
          "1667:             LOG_TRACE (\"%s.handle = \" FORMAT_H \" [5]\\n\", name,",
          "1668:                        ARGS_H(obj->handle));",
          "1672:           if (pair->value.u)",
          "1674:               obj->tio.object->ownerhandle = add_handleref (4, pair->value.u, obj);",
          "1675:               LOG_TRACE (\"%s.ownerhandle = \" FORMAT_REF \" [330]\\n\", name,",
          "1676:                          ARGS_REF(obj->tio.object->ownerhandle));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1655:         case 360: // {ACAD_XDICTIONARY TODO",
          "1656:           LOG_WARN (\"Unhandled %s.xdicobjhandle = %X [360]\\n\", name,",
          "1660:         case 102: // {ACAD_XDICTIONARY TODO",
          "1661:           break;",
          "",
          "[Removed Lines]",
          "1658:                     (unsigned)pair->value.i);",
          "",
          "[Added Lines]",
          "1684:                     pair->value.u);",
          "",
          "---------------"
        ],
        "src/in_dxf.h||src/in_dxf.h": [
          "File: src/in_dxf.h -> src/in_dxf.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:   enum RES_BUF_VALUE_TYPE type;",
          "47:   union",
          "48:   {",
          "49:     int i;",
          "50:     char *s;",
          "51:     long l;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:     unsigned int u;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:                              const char *restrict name,",
          "79:                              const char *restrict type, int dxf);",
          "81: EXPORT int dwg_read_dxf (Bit_Chain *restrict dat, Dwg_Data *restrict dwg);",
          "82: EXPORT int dwg_read_dxfb (Bit_Chain *restrict dat, Dwg_Data *restrict dwg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82: int add_handle (Dwg_Handle *restrict hdl, BITCODE_RC code,",
          "83:                 BITCODE_RL value, Dwg_Object *restrict obj)",
          "84:   __nonnull ((1));",
          "86: Dwg_Object_Ref * ATTRIBUTE_MALLOC",
          "87: add_handleref (BITCODE_RC code, BITCODE_RL value, Dwg_Object *obj);",
          "",
          "---------------"
        ],
        "src/in_dxfb.c||src/in_dxfb.c": [
          "File: src/in_dxfb.c -> src/in_dxfb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "230:     {                                                                         \\",
          "231:       if (GROUP (dxf))                                                        \\",
          "232:         {                                                                     \\",
          "234:                           &hdlptr->absolute_ref);                             \\",
          "235:           dat->byte += i;                                                     \\",
          "236:         }                                                                     \\",
          "",
          "[Removed Lines]",
          "233:           int i = sscanf ((char *)&dat->chain[dat->byte], \"%lX\",              \\",
          "",
          "[Added Lines]",
          "233:           int i = sscanf ((char *)&dat->chain[dat->byte], \"%X\",               \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "660:     _ent = obj->tio.entity;                                                   \\",
          "661:     _obj = ent = _ent->tio.token;                                             \\",
          "662:     obj->fixedtype = DWG_TYPE_##token;                                        \\",
          "666: #define DWG_ENTITY_END                                                        \\",
          "667:   return error;                                                               \\",
          "",
          "[Removed Lines]",
          "663:     LOG_TRACE (\"Entity handle: %d.%d.%lX\\n\", obj->handle.code,                \\",
          "664:                obj->handle.size, obj->handle.value)",
          "",
          "[Added Lines]",
          "663:     LOG_TRACE (\"Entity handle: \" FORMAT_H \"\\n\", ARGS_H(obj->handle))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "680:     obj->fixedtype = DWG_TYPE_##token;                                        \\",
          "681:     LOG_INFO (\"Object \" #token \":\\n\")                                         \\",
          "682:     _obj = obj->tio.object->tio.token;                                        \\",
          "686: #define DWG_OBJECT_END                                                        \\",
          "687:   return error;                                                               \\",
          "",
          "[Removed Lines]",
          "683:     LOG_TRACE (\"Object handle: %d.%d.%lX\\n\", obj->handle.code,                \\",
          "684:                obj->handle.size, obj->handle.value)",
          "",
          "[Added Lines]",
          "682:     LOG_TRACE (\"Object handle: \" FORMAT_H \"\\n\", ARGS_H(obj->handle))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "925:               LOG_WARN (\"Unknown object, skipping eed/reactors/xdic\");",
          "926:               SINCE (R_2000){",
          "927:                 LOG_INFO (\"Object bitsize: %u\\n\", obj->bitsize)",
          "930:             }",
          "931:         }",
          "932:     }",
          "",
          "[Removed Lines]",
          "928:               } LOG_INFO (\"Object handle: %d.%d.%lX\\n\", obj->handle.code,",
          "929:                           obj->handle.size, obj->handle.value);",
          "",
          "[Added Lines]",
          "926:               }",
          "927:               LOG_INFO (\"Object handle: \" FORMAT_H \"\\n\", ARGS_H(obj->handle));",
          "",
          "---------------"
        ],
        "src/out_dxf.c||src/out_dxf.c": [
          "File: src/out_dxf.c -> src/out_dxf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "126: #define VALUE_HANDLE(value, nam, handle_code, dxf)                            \\",
          "127:   if (dxf)                                                                    \\",
          "128:     {                                                                         \\",
          "130:                value != NULL ? ((BITCODE_H)value)->absolute_ref : 0);         \\",
          "131:     }",
          "",
          "[Removed Lines]",
          "129:       fprintf (dat->fh, \"%3i\\r\\n%lX\\r\\n\", dxf,                                \\",
          "",
          "[Added Lines]",
          "129:       fprintf (dat->fh, \"%3i\\r\\n%X\\r\\n\", dxf,                                 \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144:       else if (dxf == 8)                                                      \\",
          "145:         FIELD_HANDLE_NAME (nam, dxf, LAYER)                                   \\",
          "146:       else if (dat->version >= R_13)                                          \\",
          "148:                  _obj->nam->obj ? _obj->nam->absolute_ref : 0);               \\",
          "149:     }",
          "150: #define SUB_FIELD_HANDLE(o, nam, handle_code, dxf)                            \\",
          "",
          "[Removed Lines]",
          "147:         fprintf (dat->fh, \"%3i\\r\\n%lX\\r\\n\", dxf,                              \\",
          "",
          "[Added Lines]",
          "147:         fprintf (dat->fh, \"%3i\\r\\n%X\\r\\n\", dxf,                              \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "159:       else if (dxf == 8)                                                      \\",
          "160:         SUB_FIELD_HANDLE_NAME (o, nam, dxf, LAYER)                            \\",
          "161:       else if (dat->version >= R_13)                                          \\",
          "163:                  _obj->o.nam->obj ? _obj->o.nam->absolute_ref : 0);           \\",
          "164:     }",
          "165: #define HEADER_9(nam)                                                         \\",
          "",
          "[Removed Lines]",
          "162:         fprintf (dat->fh, \"%3i\\r\\n%lX\\r\\n\", dxf,                              \\",
          "",
          "[Added Lines]",
          "162:         fprintf (dat->fh, \"%3i\\r\\n%X\\r\\n\", dxf,                               \\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "167:   fprintf (dat->fh, \"$%s\\r\\n\", #nam)",
          "168: #define VALUE_H(value, dxf)                                                   \\",
          "169:   if (dxf)                                                                    \\",
          "171: #define HEADER_H(nam, dxf)                                                    \\",
          "172:   HEADER_9 (nam);                                                             \\",
          "173:   VALUE_H (dwg->header_vars.nam, dxf)",
          "",
          "[Removed Lines]",
          "170:   fprintf (dat->fh, \"%3i\\r\\n%lX\\r\\n\", dxf, value ? value->absolute_ref : 0)",
          "",
          "[Added Lines]",
          "170:   fprintf (dat->fh, \"%3i\\r\\n%X\\r\\n\", dxf, value ? value->absolute_ref : 0)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "709:     LOG_INFO (\"Entity \" #token \":\\n\")                                         \\",
          "710:     SINCE (R_11)                                                              \\",
          "711:     {                                                                         \\",
          "715:     }                                                                         \\",
          "716:     SINCE (R_13) { error |= dxf_common_entity_handle_data (dat, obj); }",
          "",
          "[Removed Lines]",
          "712:       LOG_TRACE (\"Entity handle: %d.%d.%lX\\n\", obj->handle.code,              \\",
          "713:                  obj->handle.size, obj->handle.value);                        \\",
          "714:       fprintf (dat->fh, \"%3i\\r\\n%lX\\r\\n\", 5, obj->handle.value);              \\",
          "",
          "[Added Lines]",
          "712:       LOG_TRACE (\"Entity handle: \" FORMAT_H \"\\n\", ARGS_H(obj->handle));       \\",
          "713:       fprintf (dat->fh, \"%3i\\r\\n%X\\r\\n\", 5, obj->handle.value);               \\",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "749:         SINCE (R_13)                                                          \\",
          "750:         {                                                                     \\",
          "751:           const int dxf = obj->type == DWG_TYPE_DIMSTYLE ? 105 : 5;           \\",
          "753:           _XDICOBJHANDLE (3);                                                 \\",
          "754:           _REACTORS (4);                                                      \\",
          "755:         }                                                                     \\",
          "",
          "[Removed Lines]",
          "752:           fprintf (dat->fh, \"%3i\\r\\n%lX\\r\\n\", dxf, obj->handle.value);        \\",
          "",
          "[Added Lines]",
          "751:           fprintf (dat->fh, \"%3i\\r\\n%X\\r\\n\", dxf, obj->handle.value);         \\",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "758:           VALUE_HANDLE (obj->tio.object->ownerhandle, ownerhandle, 3, 330);   \\",
          "759:         }                                                                     \\",
          "760:       }                                                                       \\",
          "",
          "[Removed Lines]",
          "761:     LOG_TRACE (\"Object handle: %d.%d.%lX\\n\", obj->handle.code,                \\",
          "762:                obj->handle.size, obj->handle.value)",
          "",
          "[Added Lines]",
          "760:     LOG_TRACE (\"Object handle: \" FORMAT_H \"\\n\", ARGS_H(obj->handle))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "835:           break;",
          "836:         case VT_HANDLE:",
          "837:         case VT_OBJECTID:",
          "840:           break;",
          "841:         case VT_INVALID:",
          "842:           break; // skip",
          "",
          "[Removed Lines]",
          "838:           fprintf (dat->fh, \"%3i\\r\\n%lX\\r\\n\", dxftype,",
          "839:                    (unsigned long)*(uint64_t *)rbuf->value.hdl);",
          "",
          "[Added Lines]",
          "836:           fprintf (dat->fh, \"%3i\\r\\n%X\\r\\n\", dxftype,",
          "837:                    (unsigned)*(uint64_t *)rbuf->value.hdl);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1000:     {                                                                         \\",
          "1001:       SINCE (R_13)                                                            \\",
          "1002:       {                                                                       \\",
          "1004:       }                                                                       \\",
          "1005:       SINCE (R_14)                                                            \\",
          "1006:       {                                                                       \\",
          "",
          "[Removed Lines]",
          "1003:         fprintf (dat->fh, \"%3i\\r\\n%lX\\r\\n\", 5, ctrl->handle.value);           \\",
          "",
          "[Added Lines]",
          "1001:         fprintf (dat->fh, \"%3i\\r\\n%X\\r\\n\", 5, ctrl->handle.value);            \\",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1474:       return dwg_dxf_MLINE (dat, obj);",
          "1475: #else",
          "1477:                 obj->handle.value)",
          "1478:       if (0)",
          "1479:         dwg_dxf_MLINE (dat, obj);",
          "",
          "[Removed Lines]",
          "1476:       LOG_WARN (\"Unhandled Entity MLINE in out_dxf %u/%lX\", obj->index,",
          "",
          "[Added Lines]",
          "1474:       LOG_WARN (\"Unhandled Entity MLINE in out_dxf %u/%X\", obj->index,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2127:     error |= dwg_dxf_ENDBLK (dat, endblk);",
          "2128:   else",
          "2129:     {",
          "2131:                 hdr ? hdr->handle.value : 0);",
          "2132:       dxf_ENDBLK_empty (dat, hdr);",
          "2133:     }",
          "",
          "[Removed Lines]",
          "2130:       LOG_WARN (\"Empty ENDBLK for \\\"%s\\\" %lX\", _hdr->name,",
          "",
          "[Added Lines]",
          "2128:       LOG_WARN (\"Empty ENDBLK for \\\"%s\\\" %X\", _hdr->name,",
          "",
          "---------------"
        ],
        "src/out_dxfb.c||src/out_dxfb.c": [
          "File: src/out_dxfb.c -> src/out_dxfb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "610:     SINCE (R_11)                                                              \\",
          "611:     {                                                                         \\",
          "612:       uint32_t i = (uint32_t)obj->handle.value;                               \\",
          "615:       GROUP (330);                                                            \\",
          "616:       fwrite (&i, sizeof (uint32_t), 1, dat->fh);                             \\",
          "617:     }                                                                         \\",
          "",
          "[Removed Lines]",
          "613:       LOG_TRACE (\"Entity handle: %d.%d.%lX\\n\", obj->handle.code,              \\",
          "614:                  obj->handle.size, obj->handle.value)                         \\",
          "",
          "[Added Lines]",
          "613:       LOG_TRACE (\"Entity handle: \" FORMAT_H \"\\n\", ARGS_H(obj->handle))        \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1307:       return dwg_dxfb_MLINE (dat, obj);",
          "1308: #else",
          "1310:                 obj->handle.value)",
          "1311:       if (0)",
          "1312:         dwg_dxfb_MLINE (dat, obj);",
          "",
          "[Removed Lines]",
          "1309:       LOG_WARN (\"Unhandled Entity MLINE in out_dxfb %u/%lX\", obj->index,",
          "",
          "[Added Lines]",
          "1308:       LOG_WARN (\"Unhandled Entity MLINE in out_dxfb %u/%X\", obj->index,",
          "",
          "---------------"
        ],
        "src/out_geojson.c||src/out_geojson.c": [
          "File: src/out_geojson.c -> src/out_geojson.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "374:         }",
          "375:     }",
          "379:   if (obj->type == DWG_TYPE_GEOPOSITIONMARKER)",
          "380:     {",
          "",
          "[Removed Lines]",
          "377:   sprintf (tmp, \"%lX\", obj->handle.value);",
          "",
          "[Added Lines]",
          "377:   sprintf (tmp, \"%X\", obj->handle.value);",
          "",
          "---------------"
        ],
        "src/out_json.c||src/out_json.c": [
          "File: src/out_json.c -> src/out_json.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "198: #define VALUE_HANDLE(hdlptr, nam, handle_code, dxf)                           \\",
          "199:   if (hdlptr)                                                                 \\",
          "200:     {                                                                         \\",
          "203:     }                                                                         \\",
          "204:   else                                                                        \\",
          "205:     {                                                                         \\",
          "207:     }",
          "208: #define VALUE_H(hdl, dxf)                                                     \\",
          "210: #define FIELD_HANDLE(nam, handle_code, dxf)                                   \\",
          "211:   PREFIX if (_obj->nam)                                                       \\",
          "212:   {                                                                           \\",
          "216:   }                                                                           \\",
          "217:   else { fprintf (dat->fh, \"\\\"\" #nam \"\\\": \\\"0.0.0\\\",\\n\"); }",
          "218: #define SUB_FIELD_HANDLE(o, nam, handle_code, dxf)                            \\",
          "219:   PREFIX if (_obj->o.nam)                                                     \\",
          "220:   {                                                                           \\",
          "224:   }                                                                           \\",
          "225:   else { fprintf (dat->fh, \"\\\"\" #nam \"\\\": \\\"0.0.0\\\",\\n\"); }",
          "226: #define FIELD_DATAHANDLE(nam, code, dxf) FIELD_HANDLE (nam, code, dxf)",
          "227: #define FIELD_HANDLE_N(nam, vcount, handle_code, dxf)                         \\",
          "228:   PREFIX if (_obj->nam)                                                       \\",
          "229:   {                                                                           \\",
          "232:   }                                                                           \\",
          "233:   else { fprintf (dat->fh, \"\\\"0.0.0\\\",\\n\"); }",
          "234: #define FIELD_BINARY(nam, size, dxf)                                          \\",
          "",
          "[Removed Lines]",
          "201:       fprintf (dat->fh, \"\\\"%d.%d.%lu\\\",\\n\", hdlptr->handleref.code,           \\",
          "202:                hdlptr->handleref.size, hdlptr->handleref.value);              \\",
          "206:       fprintf (dat->fh, \"\\\"0.0.0\\\",\\n\");                                      \\",
          "209:   fprintf (dat->fh, \"\\\"%d.%d.%lu\\\",\\n\", (hdl).code, (hdl).size, (hdl).value)",
          "213:     fprintf (dat->fh, \"\\\"\" #nam \"\\\": \\\"%d.%d.%lu\\\",\\n\",                       \\",
          "214:              _obj->nam->handleref.code, _obj->nam->handleref.size,            \\",
          "215:              _obj->nam->handleref.value);                                     \\",
          "221:     fprintf (dat->fh, \"\\\"\" #nam \"\\\": \\\"%d.%d.%lu\\\",\\n\",                       \\",
          "222:              _obj->o.nam->handleref.code, _obj->o.nam->handleref.size,        \\",
          "223:              _obj->o.nam->handleref.value);                                   \\",
          "230:     fprintf (dat->fh, \"\\\"%d.%d.%lu\\\",\\n\", _obj->nam->handleref.code,          \\",
          "231:              _obj->nam->handleref.size, _obj->nam->handleref.value);          \\",
          "",
          "[Added Lines]",
          "201:       fprintf (dat->fh, \"\\\"\" FORMAT_H \"\\\",\\n\", ARGS_H(hdlptr->handleref));    \\",
          "205:       fprintf (dat->fh, \"\\\"(0.0.0)\\\",\\n\");                                    \\",
          "208:   fprintf (dat->fh, \"\\\"\" FORMAT_H \"\\\",\\n\", ARGS_H(hdl))",
          "212:     fprintf (dat->fh, \"\\\"\" #nam \"\\\": \\\"\" FORMAT_H \"\\\",\\n\",                    \\",
          "213:              ARGS_H(_obj->nam->handleref));                                   \\",
          "219:     fprintf (dat->fh, \"\\\"\" #nam \"\\\": \\\"\" FORMAT_H \"\\\",\\n\",                    \\",
          "220:              ARGS_H(_obj->o.nam->handleref));                                 \\",
          "227:     fprintf (dat->fh, \"\\\"\" FORMAT_H \"\\\",\\n\", ARGS_H(_obj->nam->handleref));   \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1025:               LOG_WARN (\"Unknown object, skipping eed/reactors/xdic\");",
          "1026:               SINCE (R_2000){",
          "1027:                 LOG_INFO (\"Object bitsize: %u\\n\", obj->bitsize)",
          "1030:             }",
          "1031:         }",
          "1032:     }",
          "",
          "[Removed Lines]",
          "1028:               } LOG_INFO (\"Object handle: %d.%d.%lX\\n\", obj->handle.code,",
          "1029:                           obj->handle.size, obj->handle.value);",
          "",
          "[Added Lines]",
          "1024:                   } LOG_INFO (\"Object handle: \" FORMAT_H \"\\n\", ARGS_H(obj->handle));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1125:       Dwg_Object *obj = &dwg->object[j];",
          "1127:       PREFIX;",
          "1129:     }",
          "1130:   NOCOMMA;",
          "1131:   ENDSEC ();",
          "",
          "[Removed Lines]",
          "1128:       fprintf (dat->fh, \"[ %lu, %lu ],\\n\", obj->handle.value, obj->address);",
          "",
          "[Added Lines]",
          "1123:       fprintf (dat->fh, \"[ %u, %lu ],\\n\", obj->handle.value, obj->address);",
          "",
          "---------------"
        ],
        "src/print.c||src/print.c": [
          "File: src/print.c -> src/print.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: #define VALUE_HANDLE(handleptr, name, handle_code, dxf)                       \\",
          "69:   if (handleptr)                                                              \\",
          "70:     {                                                                         \\",
          "75:     }",
          "76: #define FIELD_HANDLE(nam, handle_code, dxf)                                   \\",
          "77:   VALUE_HANDLE (_obj->nam, nam, handle_code, dxf)",
          "",
          "[Removed Lines]",
          "71:       LOG_TRACE (#name \": HANDLE(%x.%d.%lX) absolute:%lX/%lu [%d]\\n\",         \\",
          "72:                  handleptr->handleref.code, handleptr->handleref.size,        \\",
          "73:                  handleptr->handleref.value, handleptr->absolute_ref,         \\",
          "74:                  handleptr->absolute_ref, dxf);                               \\",
          "",
          "[Added Lines]",
          "71:       LOG_TRACE (#name \": HANDLE\" FORMAT_REF \"/%u [%d]\\n\",                    \\",
          "72:                  ARGS_REF(handleptr), handleptr->absolute_ref, dxf);          \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81: #define VALUE_HANDLE_N(handleptr, name, vcount, handle_code, dxf)             \\",
          "82:   if (handleptr)                                                              \\",
          "83:     {                                                                         \\",
          "88:     }",
          "89: #define FIELD_HANDLE_N(name, vcount, handle_code, dxf)                        \\",
          "90:   VALUE_HANDLE_N (_obj->name, name, vcount, handle_code, dxf)",
          "",
          "[Removed Lines]",
          "84:       LOG_TRACE (#name \"[%d]: HANDLE(%d.%d.%lX) absolute:%lX/%lu [%d]\\n\",     \\",
          "85:                  (int)vcount, handleptr->handleref.code,                      \\",
          "86:                  handleptr->handleref.size, handleptr->handleref.value,       \\",
          "87:                  handleptr->absolute_ref, handleptr->absolute_ref, dxf);      \\",
          "",
          "[Added Lines]",
          "82:       LOG_TRACE (#name \"[%d]: HANDLE\" FORMAT_REF \"/%u [%d]\\n\",                \\",
          "83:                  (int)vcount, ARGS_REF(handleptr), handleptr->absolute_ref,   \\",
          "84:                  dxf);                                                        \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "191:           LOG_TRACE (#color \".alpha: 0%d [ENC.BL %d]\\n\",                      \\",
          "192:                      (int)_obj->color.alpha, dxf2 + 20);                      \\",
          "193:         if (_obj->color.flag & 0x40)                                          \\",
          "196:         if (_obj->color.flag & 0x80)                                          \\",
          "197:           LOG_TRACE (#color \".rgb: 0x%06x [ENC.BL %d]\\n\",                     \\",
          "198:                      (unsigned)_obj->color.rgb, dxf2);                        \\",
          "",
          "[Removed Lines]",
          "194:           LOG_TRACE (#color \".handle: %lX [ENC.H %d]\\n\",                      \\",
          "195:                      _obj->color.handle->handleref.value, dxf2 + 10);         \\",
          "",
          "[Added Lines]",
          "191:           LOG_TRACE (#color \".handle: \" FORMAT_REF \" [ENC.H %d]\\n\",           \\",
          "192:                      ARGS_REF(_obj->color.handle), dxf2 + 10);                \\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "344:     LOG_INFO (\"Entity \" #token \":\\n\")                                         \\",
          "345:     _ent = obj->tio.entity;                                                   \\",
          "346:     _obj = ent = _ent->tio.token;                                             \\",
          "350: #define DWG_ENTITY_END                                                        \\",
          "351:   return 0;                                                                   \\",
          "",
          "[Removed Lines]",
          "347:     LOG_TRACE (\"Entity handle: %d.%d.%lX\\n\", obj->handle.code,                \\",
          "348:                obj->handle.size, obj->handle.value)",
          "",
          "[Added Lines]",
          "344:     LOG_TRACE (\"Entity handle: \" FORMAT_H \"\\n\", ARGS_H(obj->handle))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "363:     int error = 0;                                                            \\",
          "364:     LOG_INFO (\"Object \" #token \":\\n\")                                         \\",
          "365:     _obj = obj->tio.object->tio.token;                                        \\",
          "369: #define DWG_OBJECT_END                                                        \\",
          "370:   return 0;                                                                   \\",
          "",
          "[Removed Lines]",
          "366:     LOG_TRACE (\"Object handle: %d.%d.%lX\\n\", obj->handle.code,                \\",
          "367:                obj->handle.size, obj->handle.value)",
          "",
          "[Added Lines]",
          "362:     LOG_TRACE (\"Object handle: \" FORMAT_H \"\\n\", ARGS_H(obj->handle))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "603:               LOG_WARN (\"Unknown object, skipping eed/reactors/xdic\");",
          "604:               SINCE (R_2000){",
          "605:                 LOG_INFO (\"Object bitsize: %u\\n\", obj->bitsize)",
          "608:               return error | DWG_ERR_INVALIDTYPE;",
          "609:             }",
          "610:         }",
          "",
          "[Removed Lines]",
          "606:               } LOG_INFO (\"Object handle: %x.%d.%lX\\n\", obj->handle.code,",
          "607:                           obj->handle.size, obj->handle.value);",
          "",
          "[Added Lines]",
          "601:               }",
          "602:               LOG_INFO (\"Object handle: \" FORMAT_H \"\\n\", ARGS_H(obj->handle));",
          "",
          "---------------"
        ],
        "test/unit-testing/bits_test.c||test/unit-testing/bits_test.c": [
          "File: test/unit-testing/bits_test.c -> test/unit-testing/bits_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "498:         if (bitchain.byte == byte && bitchain.bit == 4)",
          "499:           pass ();",
          "500:         else",
          "505:         bit_set_position (&bitchain, pos);",
          "506:         bit_read_H (&bitchain, &handle);",
          "",
          "[Removed Lines]",
          "501:           fail (\"bit_write_H (%d.%d.%ld) @%lu.%d\", handles[i].code,",
          "502:                 handles[i].size, handles[i].value, bitchain.byte,",
          "503:                 bitchain.bit);",
          "",
          "[Added Lines]",
          "502:           fail (\"bit_write_H (\" FORMAT_H \") @%lu.%d\", ARGS_H(handles[i]),",
          "503:                 bitchain.byte, bitchain.bit);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "508:             && handle.value == handles[i].value)",
          "509:           pass ();",
          "510:         else",
          "514:         bit_set_position (&bitchain, pos);",
          "515:       }",
          "",
          "[Removed Lines]",
          "511:           fail (\"bit_read_H (%d.%d.%lu)\", handle.code, handle.size,",
          "512:                 handle.value);",
          "",
          "[Added Lines]",
          "511:           fail (\"bit_read_H (\" FORMAT_H \")\", ARGS_H(handle));",
          "",
          "---------------"
        ],
        "test/unit-testing/common.c||test/unit-testing/common.c": [
          "File: test/unit-testing/common.c -> test/unit-testing/common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "347:         char *_hdlname = dwg_dynapi_handle_name (ent->parent->dwg,      \\",
          "348:                                                  hdl);                  \\",
          "349:         if (hdl == (BITCODE_H)ent->parent->field)                       \\",
          "353:         else                                                            \\",
          "357:       }                                                                 \\",
          "358:   }",
          "",
          "[Removed Lines]",
          "350:           ok (#field \": %s (%x.%d.%lX)\", _hdlname ? : \"\",               \\",
          "351:               hdl->handleref.code,                                      \\",
          "352:               hdl->handleref.size, hdl->handleref.value);               \\",
          "354:           fail (#field \": %s (%x.%d.%lX)\", _hdlname ? : \"\",             \\",
          "355:                 hdl->handleref.code,                                    \\",
          "356:                 hdl->handleref.size, hdl->handleref.value);             \\",
          "",
          "[Added Lines]",
          "350:           ok (#field \": %s \" FORMAT_REF, _hdlname ? : \"\", ARGS_REF(hdl)); \\",
          "352:           fail (#field \": %s \" FORMAT_REF, _hdlname ? : \"\", ARGS_REF(hdl)); \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "370:           char *_hdlname = dwg_dynapi_handle_name (ent->parent->dwg, _hdl); \\",
          "371:           if (_hdl == ent->parent->field[_i])                           \\",
          "372:             {                                                           \\",
          "376:             }                                                           \\",
          "377:           else                                                          \\",
          "378:             {                                                           \\",
          "382:             }                                                           \\",
          "383:         }                                                               \\",
          "384:     }",
          "",
          "[Removed Lines]",
          "373:               ok (#field \"[%d]: %s (%x.%d.%lX)\", _i,                    \\",
          "374:                   _hdlname ? : \"\", _hdl->handleref.code,                \\",
          "375:                   _hdl->handleref.size, _hdl->handleref.value);         \\",
          "379:               fail (#field \"[%d]: %s (%x.%d.%lX)\", _i,                  \\",
          "380:                     _hdlname ? : \"\", _hdl->handleref.code,              \\",
          "381:                     _hdl->handleref.size, _hdl->handleref.value);       \\",
          "",
          "[Added Lines]",
          "369:               ok (#field \"[%d]: %s \" FORMAT_REF, _i,                    \\",
          "370:                   _hdlname ? : \"\", ARGS_REF(_hdl));                     \\",
          "374:               fail (#field \"[%d]: %s \" FORMAT_REF, _i,                  \\",
          "375:                     _hdlname ? : \"\", ARGS_REF(_hdl));                   \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "495:         char *_hdlname = dwg_dynapi_handle_name (obj->parent, hdl);     \\",
          "496:         if (hdl == ent->field)                                          \\",
          "497:           {                                                             \\",
          "501:           }                                                             \\",
          "502:         else                                                            \\",
          "503:           {                                                             \\",
          "507:           }                                                             \\",
          "508:       }                                                                 \\",
          "509:   }",
          "",
          "[Removed Lines]",
          "498:             ok (#name \".\" #field \": %s (%x.%d.%lX)\", _hdlname ? : \"\",   \\",
          "499:                 hdl->handleref.code,                                    \\",
          "500:                 hdl->handleref.size, hdl->handleref.value);             \\",
          "504:             fail (#name \".\" #field \": %s (%x.%d.%lX)\", _hdlname ? : \"\", \\",
          "505:                   hdl->handleref.code,                                  \\",
          "506:                   hdl->handleref.size, hdl->handleref.value);           \\",
          "",
          "[Added Lines]",
          "492:             ok (#name \".\" #field \": %s \" FORMAT_REF, _hdlname ? : \"\",   \\",
          "493:                 ARGS_REF(hdl));                                         \\",
          "497:             fail (#name \".\" #field \": %s \" FORMAT_REF, _hdlname ? : \"\", \\",
          "498:                   ARGS_REF(hdl));                                       \\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "521:           char *_hdlname = dwg_dynapi_handle_name (obj->parent, _hdl);  \\",
          "522:           if (_hdl == ent->field[_i])                                   \\",
          "523:             {                                                           \\",
          "527:             }                                                           \\",
          "528:           else                                                          \\",
          "529:             {                                                           \\",
          "533:             }                                                           \\",
          "534:         }                                                               \\",
          "535:     }",
          "",
          "[Removed Lines]",
          "524:               ok (#name \".\" #field \"[%d]: %s (%x.%d.%lX)\", _i,          \\",
          "525:                   _hdlname ? : \"\", _hdl->handleref.code,                \\",
          "526:                   _hdl->handleref.size, _hdl->handleref.value);         \\",
          "530:               fail (#name \".\" #field \"[%d]: %s (%x.%d.%lX)\", _i,        \\",
          "531:                     _hdlname ? : \"\", _hdl->handleref.code,              \\",
          "532:                     _hdl->handleref.size, _hdl->handleref.value);       \\",
          "",
          "[Added Lines]",
          "516:               ok (#name \".\" #field \"[%d]: %s \" FORMAT_REF, _i,          \\",
          "517:                   _hdlname ? : \"\", ARGS_REF(_hdl));                     \\",
          "521:               fail (#name \".\" #field \"[%d]: %s \" FORMAT_REF, _i,        \\",
          "522:                     _hdlname ? : \"\", ARGS_REF(_hdl));                   \\",
          "",
          "---------------"
        ]
      }
    }
  ]
}