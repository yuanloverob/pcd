{
  "cve_id": "CVE-2016-6905",
  "cve_desc": "The read_image_tga function in gd_tga.c in the GD Graphics Library (aka libgd) before 2.2.3 allows remote attackers to cause a denial of service (out-of-bounds read) via a crafted TGA image.",
  "repo": "libgd/libgd",
  "patch_hash": "3c2b605d72e8b080dace1d98a6e50b46c1d12186",
  "patch_info": {
    "commit_hash": "3c2b605d72e8b080dace1d98a6e50b46c1d12186",
    "repo": "libgd/libgd",
    "commit_url": "https://github.com/libgd/libgd/commit/3c2b605d72e8b080dace1d98a6e50b46c1d12186",
    "files": [
      "src/gd_tga.c"
    ],
    "message": "bug #248, fix Out-Of-Bounds Read in read_image_tga",
    "before_after_code_files": [
      "src/gd_tga.c||src/gd_tga.c"
    ]
  },
  "patch_diff": {
    "src/gd_tga.c||src/gd_tga.c": [
      "File: src/gd_tga.c -> src/gd_tga.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "278:   buffer_caret = 0;",
      "280:   while( bitmap_caret < image_block_size ) {",
      "282:    if ((decompression_buffer[buffer_caret] & TGA_RLE_FLAG) == TGA_RLE_FLAG) {",
      "283:     encoded_pixels = ( ( decompression_buffer[ buffer_caret ] & 127 ) + 1 );",
      "284:     buffer_caret++;",
      "289:      }",
      "290:     }",
      "291:     buffer_caret += pixel_block_size;",
      "",
      "[Removed Lines]",
      "286:     for (i = 0; i < encoded_pixels; i++) {",
      "287:      for (j = 0; j < pixel_block_size; j++, bitmap_caret++) {",
      "288:       tga->bitmap[ bitmap_caret ] = decompression_buffer[ buffer_caret + j ];",
      "",
      "[Added Lines]",
      "286:     if (encoded_pixels != 0) {",
      "288:      if (!((buffer_caret + (encoded_pixels * pixel_block_size)) < image_block_size)) {",
      "289:       gdFree( decompression_buffer );",
      "290:       gdFree( conversion_buffer );",
      "291:       return -1;",
      "292:      }",
      "294:      for (i = 0; i < encoded_pixels; i++) {",
      "295:       for (j = 0; j < pixel_block_size; j++, bitmap_caret++) {",
      "296:        tga->bitmap[ bitmap_caret ] = decompression_buffer[ buffer_caret + j ];",
      "297:       }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "293:     encoded_pixels = decompression_buffer[ buffer_caret ] + 1;",
      "294:     buffer_caret++;",
      "299:      }",
      "301:     }",
      "302:    }",
      "303:   }",
      "",
      "[Removed Lines]",
      "296:     for (i = 0; i < encoded_pixels; i++) {",
      "297:      for( j = 0; j < pixel_block_size; j++, bitmap_caret++ ) {",
      "298:       tga->bitmap[ bitmap_caret ] = decompression_buffer[ buffer_caret + j ];",
      "300:      buffer_caret += pixel_block_size;",
      "",
      "[Added Lines]",
      "305:     if (encoded_pixels != 0) {",
      "307:      if (!((buffer_caret + (encoded_pixels * pixel_block_size)) < image_block_size)) {",
      "308:       gdFree( decompression_buffer );",
      "309:       gdFree( conversion_buffer );",
      "310:       return -1;",
      "311:      }",
      "313:      for (i = 0; i < encoded_pixels; i++) {",
      "314:       for( j = 0; j < pixel_block_size; j++, bitmap_caret++ ) {",
      "315:        tga->bitmap[ bitmap_caret ] = decompression_buffer[ buffer_caret + j ];",
      "316:       }",
      "317:       buffer_caret += pixel_block_size;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8af3fcce33e25fc4f1d02fe2c20409be4c976346",
      "candidate_info": {
        "commit_hash": "8af3fcce33e25fc4f1d02fe2c20409be4c976346",
        "repo": "libgd/libgd",
        "commit_url": "https://github.com/libgd/libgd/commit/8af3fcce33e25fc4f1d02fe2c20409be4c976346",
        "files": [
          "src/gd_tga.c",
          "tests/tga/CMakeLists.txt",
          "tests/tga/Makemodule.am",
          "tests/tga/tga_read.c",
          "tests/tga/tga_read_rgb.png",
          "tests/tga/tga_read_rgb.tga",
          "tests/tga/tga_read_rgb_rle.tga"
        ],
        "message": "Fix #290: TGA RLE decoding is broken\n\nWe make it work only, for now. Actually, it doesn't make sense that\n`oTga::bitmap` is an `int *` as we're storing only bytes there. If this\nwill be changed, we can even get rid of the `conversion_buffer` in\n`read_image_tga` altogether, and read the image data into the\n`decompression_buffer` (if RLE'd) or the `tga->bitmap` (if uncompressed)\ndirectly.\n\n(cherry picked from commit 4f8e26f2a40ffaa3a5b77be6a49989a1a42e2b83)",
        "before_after_code_files": [
          "src/gd_tga.c||src/gd_tga.c",
          "tests/tga/Makemodule.am||tests/tga/Makemodule.am",
          "tests/tga/tga_read.c||tests/tga/tga_read.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/gd_tga.c||src/gd_tga.c"
          ],
          "candidate": [
            "src/gd_tga.c||src/gd_tga.c"
          ]
        }
      },
      "candidate_diff": {
        "src/gd_tga.c||src/gd_tga.c": [
          "File: src/gd_tga.c -> src/gd_tga.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "207: {",
          "208:  int pixel_block_size = (tga->bits / 8);",
          "209:  int image_block_size = (tga->width * tga->height) * pixel_block_size;",
          "211:  unsigned char* conversion_buffer = NULL;",
          "212:  int buffer_caret = 0;",
          "213:  int bitmap_caret = 0;",
          "214:  int i = 0;",
          "215:  int encoded_pixels;",
          "217:  if(overflow2(tga->width, tga->height)) {",
          "218:   return -1;",
          "",
          "[Removed Lines]",
          "210:  uint8_t* decompression_buffer = NULL;",
          "",
          "[Added Lines]",
          "210:  int* decompression_buffer = NULL;",
          "216:  int rle_size;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "270:   if (decompression_buffer == NULL) {",
          "271:    return -1;",
          "272:   }",
          "",
          "[Removed Lines]",
          "269:   decompression_buffer = (uint8_t*) gdMalloc(image_block_size * sizeof(uint8_t));",
          "",
          "[Added Lines]",
          "270:   decompression_buffer = (int*) gdMalloc(image_block_size * sizeof(int));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "277:    return -1;",
          "278:   }",
          "281:    gdFree(conversion_buffer);",
          "282:    gdFree(decompression_buffer);",
          "283:    return -1;",
          "",
          "[Removed Lines]",
          "280:   if (gdGetBuf(conversion_buffer, image_block_size, ctx) != image_block_size) {",
          "",
          "[Added Lines]",
          "281:   rle_size = gdGetBuf(conversion_buffer, image_block_size, ctx);",
          "282:   if (rle_size <= 0) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "286:   buffer_caret = 0;",
          "289:    decompression_buffer[buffer_caret] = (int)conversion_buffer[buffer_caret];",
          "290:    buffer_caret++;",
          "291:   }",
          "",
          "[Removed Lines]",
          "288:   while( buffer_caret < image_block_size) {",
          "",
          "[Added Lines]",
          "290:   while( buffer_caret < rle_size) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "298:     encoded_pixels = ( ( decompression_buffer[ buffer_caret ] & ~TGA_RLE_FLAG ) + 1 );",
          "299:     buffer_caret++;",
          "302:      gdFree( decompression_buffer );",
          "303:      gdFree( conversion_buffer );",
          "304:      return -1;",
          "305:     }",
          "307:     for (i = 0; i < encoded_pixels; i++) {",
          "309:      bitmap_caret += pixel_block_size;",
          "310:     }",
          "311:     buffer_caret += pixel_block_size;",
          "",
          "[Removed Lines]",
          "301:     if ((bitmap_caret + (encoded_pixels * pixel_block_size)) >= image_block_size) {",
          "308:      memcpy(tga->bitmap + bitmap_caret, decompression_buffer + buffer_caret, pixel_block_size);",
          "",
          "[Added Lines]",
          "303:     if ((bitmap_caret + (encoded_pixels * pixel_block_size)) > image_block_size) {",
          "310:      memcpy(tga->bitmap + bitmap_caret, decompression_buffer + buffer_caret, pixel_block_size * sizeof(int));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "314:     encoded_pixels = decompression_buffer[ buffer_caret ] + 1;",
          "315:     buffer_caret++;",
          "318:      gdFree( decompression_buffer );",
          "319:      gdFree( conversion_buffer );",
          "320:      return -1;",
          "321:     }",
          "324:     bitmap_caret += (encoded_pixels * pixel_block_size);",
          "325:     buffer_caret += (encoded_pixels * pixel_block_size);",
          "326:    }",
          "",
          "[Removed Lines]",
          "317:     if ((bitmap_caret + (encoded_pixels * pixel_block_size)) >= image_block_size) {",
          "323:     memcpy(tga->bitmap + bitmap_caret, decompression_buffer + buffer_caret, encoded_pixels * pixel_block_size);",
          "",
          "[Added Lines]",
          "319:     if ((bitmap_caret + (encoded_pixels * pixel_block_size)) > image_block_size) {",
          "325:     memcpy(tga->bitmap + bitmap_caret, decompression_buffer + buffer_caret, encoded_pixels * pixel_block_size * sizeof(int));",
          "",
          "---------------"
        ],
        "tests/tga/Makemodule.am||tests/tga/Makemodule.am": [
          "File: tests/tga/Makemodule.am -> tests/tga/Makemodule.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:  tga/bug00247a \\",
          "5:  tga/bug00248 \\",
          "6:  tga/bug00248a \\",
          "9: EXTRA_DIST += \\",
          "10:  tga/CMakeLists.txt \\",
          "",
          "[Removed Lines]",
          "7:  tga/tga_null",
          "",
          "[Added Lines]",
          "7:  tga/tga_null \\",
          "8:  tga/tga_read",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12:  tga/bug00247.tga \\",
          "13:  tga/bug00247a.tga \\",
          "14:  tga/bug00248.tga \\",
          "",
          "[Removed Lines]",
          "15:  tga/bug00248a.tga",
          "",
          "[Added Lines]",
          "16:  tga/bug00248a.tga \\",
          "17:  tga/tga_read_rgb.png \\",
          "18:  tga/tga_read_rgb.tga \\",
          "19:  tga/tga_read_rgb_rle.tga",
          "",
          "---------------"
        ],
        "tests/tga/tga_read.c||tests/tga/tga_read.c": [
          "File: tests/tga/tga_read.c -> tests/tga/tga_read.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: #include \"gd.h\"",
          "7: #include \"gdtest.h\"",
          "10: static void assert_equals(char *exp, char *orig);",
          "13: int main()",
          "14: {",
          "15:     assert_equals(\"tga_read_rgb.png\", \"tga_read_rgb.tga\");",
          "16:     assert_equals(\"tga_read_rgb.png\", \"tga_read_rgb_rle.tga\");",
          "18:     return gdNumFailures();",
          "19: }",
          "22: static void assert_equals(char *exp, char *orig)",
          "23: {",
          "24:     gdImagePtr im;",
          "25:     FILE *fp;",
          "26:     char *filename;",
          "28:     fp = gdTestFileOpen2(\"tga\", orig);",
          "29:     gdTestAssertMsg(fp != NULL, \"can't open %s\", orig);",
          "31:     im = gdImageCreateFromTga(fp);",
          "32:     gdTestAssertMsg(im != NULL, \"can't read %s\", orig);",
          "33:     fclose(fp);",
          "35:     filename = gdTestFilePath2(\"tga\", exp);",
          "36:     gdAssertImageEqualsToFile(filename, im);",
          "37:     gdFree(filename);",
          "39:     gdImageDestroy(im);",
          "40: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "981060efd6415ed9a08a6aa343e6e195bf65fb47",
      "candidate_info": {
        "commit_hash": "981060efd6415ed9a08a6aa343e6e195bf65fb47",
        "repo": "libgd/libgd",
        "commit_url": "https://github.com/libgd/libgd/commit/981060efd6415ed9a08a6aa343e6e195bf65fb47",
        "files": [
          "src/gd_tga.c"
        ],
        "message": "bug #248, fix Out-Of-Bounds Read in read_image_tga",
        "before_after_code_files": [
          "src/gd_tga.c||src/gd_tga.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/gd_tga.c||src/gd_tga.c"
          ],
          "candidate": [
            "src/gd_tga.c||src/gd_tga.c"
          ]
        }
      },
      "candidate_diff": {
        "src/gd_tga.c||src/gd_tga.c": [
          "File: src/gd_tga.c -> src/gd_tga.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "278:   buffer_caret = 0;",
          "280:   while( bitmap_caret < image_block_size ) {",
          "282:    if ((decompression_buffer[buffer_caret] & TGA_RLE_FLAG) == TGA_RLE_FLAG) {",
          "283:     encoded_pixels = ( ( decompression_buffer[ buffer_caret ] & 127 ) + 1 );",
          "284:     buffer_caret++;",
          "289:      }",
          "290:     }",
          "291:     buffer_caret += pixel_block_size;",
          "",
          "[Removed Lines]",
          "286:     for (i = 0; i < encoded_pixels; i++) {",
          "287:      for (j = 0; j < pixel_block_size; j++, bitmap_caret++) {",
          "288:       tga->bitmap[ bitmap_caret ] = decompression_buffer[ buffer_caret + j ];",
          "",
          "[Added Lines]",
          "286:     if (encoded_pixels != 0) {",
          "288:      if (!((buffer_caret + (encoded_pixels * pixel_block_size)) < image_block_size)) {",
          "289:       gdFree( decompression_buffer );",
          "290:       gdFree( conversion_buffer );",
          "291:       return -1;",
          "292:      }",
          "294:      for (i = 0; i < encoded_pixels; i++) {",
          "295:       for (j = 0; j < pixel_block_size; j++, bitmap_caret++) {",
          "296:        tga->bitmap[ bitmap_caret ] = decompression_buffer[ buffer_caret + j ];",
          "297:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "293:     encoded_pixels = decompression_buffer[ buffer_caret ] + 1;",
          "294:     buffer_caret++;",
          "299:      }",
          "301:     }",
          "302:    }",
          "303:   }",
          "",
          "[Removed Lines]",
          "296:     for (i = 0; i < encoded_pixels; i++) {",
          "297:      for( j = 0; j < pixel_block_size; j++, bitmap_caret++ ) {",
          "298:       tga->bitmap[ bitmap_caret ] = decompression_buffer[ buffer_caret + j ];",
          "300:      buffer_caret += pixel_block_size;",
          "",
          "[Added Lines]",
          "305:     if (encoded_pixels != 0) {",
          "307:      if (!((buffer_caret + (encoded_pixels * pixel_block_size)) < image_block_size)) {",
          "308:       gdFree( decompression_buffer );",
          "309:       gdFree( conversion_buffer );",
          "310:       return -1;",
          "311:      }",
          "313:      for (i = 0; i < encoded_pixels; i++) {",
          "314:       for( j = 0; j < pixel_block_size; j++, bitmap_caret++ ) {",
          "315:        tga->bitmap[ bitmap_caret ] = decompression_buffer[ buffer_caret + j ];",
          "316:       }",
          "317:       buffer_caret += pixel_block_size;",
          "",
          "---------------"
        ]
      }
    }
  ]
}