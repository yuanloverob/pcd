{
  "cve_id": "CVE-2017-12192",
  "cve_desc": "The keyctl_read_key function in security/keys/keyctl.c in the Key Management subcomponent in the Linux kernel before 4.13.5 does not properly consider that a key may be possessed but negatively instantiated, which allows local users to cause a denial of service (OOPS and system crash) via a crafted KEYCTL_READ operation.",
  "repo": "torvalds/linux",
  "patch_hash": "37863c43b2c6464f252862bf2e9768264e961678",
  "patch_info": {
    "commit_hash": "37863c43b2c6464f252862bf2e9768264e961678",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/37863c43b2c6464f252862bf2e9768264e961678",
    "files": [
      "security/keys/keyctl.c"
    ],
    "message": "KEYS: prevent KEYCTL_READ on negative key\n\nBecause keyctl_read_key() looks up the key with no permissions\nrequested, it may find a negatively instantiated key.  If the key is\nalso possessed, we went ahead and called ->read() on the key.  But the\nkey payload will actually contain the ->reject_error rather than the\nnormal payload.  Thus, the kernel oopses trying to read the\nuser_key_payload from memory address (int)-ENOKEY = 0x00000000ffffff82.\n\nFortunately the payload data is stored inline, so it shouldn't be\npossible to abuse this as an arbitrary memory read primitive...\n\nReproducer:\n    keyctl new_session\n    keyctl request2 user desc '' @s\n    keyctl read $(keyctl show | awk '/user: desc/ {print $1}')\n\nIt causes a crash like the following:\n     BUG: unable to handle kernel paging request at 00000000ffffff92\n     IP: user_read+0x33/0xa0\n     PGD 36a54067 P4D 36a54067 PUD 0\n     Oops: 0000 [#1] SMP\n     CPU: 0 PID: 211 Comm: keyctl Not tainted 4.14.0-rc1 #337\n     Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-20170228_101828-anatol 04/01/2014\n     task: ffff90aa3b74c3c0 task.stack: ffff9878c0478000\n     RIP: 0010:user_read+0x33/0xa0\n     RSP: 0018:ffff9878c047bee8 EFLAGS: 00010246\n     RAX: 0000000000000001 RBX: ffff90aa3d7da340 RCX: 0000000000000017\n     RDX: 0000000000000000 RSI: 00000000ffffff82 RDI: ffff90aa3d7da340\n     RBP: ffff9878c047bf00 R08: 00000024f95da94f R09: 0000000000000000\n     R10: 0000000000000001 R11: 0000000000000000 R12: 0000000000000000\n     R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000\n     FS:  00007f58ece69740(0000) GS:ffff90aa3e200000(0000) knlGS:0000000000000000\n     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n     CR2: 00000000ffffff92 CR3: 0000000036adc001 CR4: 00000000003606f0\n     Call Trace:\n      keyctl_read_key+0xac/0xe0\n      SyS_keyctl+0x99/0x120\n      entry_SYSCALL_64_fastpath+0x1f/0xbe\n     RIP: 0033:0x7f58ec787bb9\n     RSP: 002b:00007ffc8d401678 EFLAGS: 00000206 ORIG_RAX: 00000000000000fa\n     RAX: ffffffffffffffda RBX: 00007ffc8d402800 RCX: 00007f58ec787bb9\n     RDX: 0000000000000000 RSI: 00000000174a63ac RDI: 000000000000000b\n     RBP: 0000000000000004 R08: 00007ffc8d402809 R09: 0000000000000020\n     R10: 0000000000000000 R11: 0000000000000206 R12: 00007ffc8d402800\n     R13: 00007ffc8d4016e0 R14: 0000000000000000 R15: 0000000000000000\n     Code: e5 41 55 49 89 f5 41 54 49 89 d4 53 48 89 fb e8 a4 b4 ad ff 85 c0 74 09 80 3d b9 4c 96 00 00 74 43 48 8b b3 20 01 00 00 4d 85 ed <0f> b7 5e 10 74 29 4d 85 e4 74 24 4c 39 e3 4c 89 e2 4c 89 ef 48\n     RIP: user_read+0x33/0xa0 RSP: ffff9878c047bee8\n     CR2: 00000000ffffff92\n\nFixes: 61ea0c0ba904 (\"KEYS: Skip key state checks when checking for possession\")\nCc: <stable@vger.kernel.org>\t[v3.13+]\nSigned-off-by: Eric Biggers <ebiggers@google.com>\nSigned-off-by: David Howells <dhowells@redhat.com>",
    "before_after_code_files": [
      "security/keys/keyctl.c||security/keys/keyctl.c"
    ]
  },
  "patch_diff": {
    "security/keys/keyctl.c||security/keys/keyctl.c": [
      "File: security/keys/keyctl.c -> security/keys/keyctl.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "767:  key = key_ref_to_ptr(key_ref);",
      "770:  ret = key_permission(key_ref, KEY_NEED_READ);",
      "771:  if (ret == 0)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "769:  if (test_bit(KEY_FLAG_NEGATIVE, &key->flags)) {",
      "770:   ret = -ENOKEY;",
      "771:   goto error2;",
      "772:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "087ff6a5ae3052bb2835e191094b793789cb8817",
      "candidate_info": {
        "commit_hash": "087ff6a5ae3052bb2835e191094b793789cb8817",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/087ff6a5ae3052bb2835e191094b793789cb8817",
        "files": [
          "arch/powerpc/platforms/pseries/dlpar.c",
          "arch/powerpc/platforms/pseries/hotplug-cpu.c"
        ],
        "message": "powerpc/pseries: Fix \"OF: ERROR: Bad of_node_put() on /cpus\" during DLPAR\n\nCommit 215ee763f8cb (\"powerpc: pseries: remove dlpar_attach_node\ndependency on full path\") reworked dlpar_attach_node() to no longer\nlook up the parent node \"/cpus\", but instead to have the parent node\npassed by the caller in the function parameter list.\n\nAs a result dlpar_attach_node() is no longer responsible for freeing\nthe reference to the parent node. However, commit 215ee763f8cb failed\nto remove the of_node_put(parent) call in dlpar_attach_node(), or to\ntake into account that the reference to the parent in the caller\ndlpar_cpu_add() needs to be held until after dlpar_attach_node()\nreturns.\n\nAs a result doing repeated cpu add/remove dlpar operations will\neventually result in the following error:\n\n  OF: ERROR: Bad of_node_put() on /cpus\n  CPU: 0 PID: 10896 Comm: drmgr Not tainted 4.13.0-autotest #1\n  Call Trace:\n   dump_stack+0x15c/0x1f8 (unreliable)\n   of_node_release+0x1a4/0x1c0\n   kobject_put+0x1a8/0x310\n   kobject_del+0xbc/0xf0\n   __of_detach_node_sysfs+0x144/0x210\n   of_detach_node+0xf0/0x180\n   dlpar_detach_node+0xc4/0x120\n   dlpar_cpu_remove+0x280/0x560\n   dlpar_cpu_release+0xbc/0x1b0\n   arch_cpu_release+0x6c/0xb0\n   cpu_release_store+0xa0/0x100\n   dev_attr_store+0x68/0xa0\n   sysfs_kf_write+0xa8/0xf0\n   kernfs_fop_write+0x2cc/0x400\n   __vfs_write+0x5c/0x340\n   vfs_write+0x1a8/0x3d0\n   SyS_write+0xa8/0x1a0\n   system_call+0x58/0x6c\n\nFix the issue by removing the of_node_put(parent) call from\ndlpar_attach_node(), and ensuring that the reference to the parent\nnode is properly held and released by the caller dlpar_cpu_add().\n\nFixes: 215ee763f8cb (\"powerpc: pseries: remove dlpar_attach_node dependency on full path\")\nSigned-off-by: Tyrel Datwyler <tyreld@linux.vnet.ibm.com>\nReported-by: Abdul Haleem <abdhalee@linux.vnet.ibm.com>\n[mpe: Add a comment in the code and frob the change log slightly]\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>",
        "before_after_code_files": [
          "arch/powerpc/platforms/pseries/dlpar.c||arch/powerpc/platforms/pseries/dlpar.c",
          "arch/powerpc/platforms/pseries/hotplug-cpu.c||arch/powerpc/platforms/pseries/hotplug-cpu.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/powerpc/platforms/pseries/dlpar.c||arch/powerpc/platforms/pseries/dlpar.c": [
          "File: arch/powerpc/platforms/pseries/dlpar.c -> arch/powerpc/platforms/pseries/dlpar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "266:   return rc;",
          "267:  }",
          "270:  return 0;",
          "271: }",
          "",
          "[Removed Lines]",
          "269:  of_node_put(dn->parent);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "arch/powerpc/platforms/pseries/hotplug-cpu.c||arch/powerpc/platforms/pseries/hotplug-cpu.c": [
          "File: arch/powerpc/platforms/pseries/hotplug-cpu.c -> arch/powerpc/platforms/pseries/hotplug-cpu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "462:  }",
          "464:  dn = dlpar_configure_connector(cpu_to_be32(drc_index), parent);",
          "466:  if (!dn) {",
          "467:   pr_warn(\"Failed call to configure-connector, drc index: %x\\n\",",
          "468:    drc_index);",
          "469:   dlpar_release_drc(drc_index);",
          "470:   return -EINVAL;",
          "471:  }",
          "473:  rc = dlpar_attach_node(dn, parent);",
          "474:  if (rc) {",
          "475:   saved_rc = rc;",
          "476:   pr_warn(\"Failed to attach node %s, rc: %d, drc index: %x\\n\",",
          "",
          "[Removed Lines]",
          "465:  of_node_put(parent);",
          "",
          "[Added Lines]",
          "469:   of_node_put(parent);",
          "476:  of_node_put(parent);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5c346525d3591cb032eca86d0f904cc01f1069ff",
      "candidate_info": {
        "commit_hash": "5c346525d3591cb032eca86d0f904cc01f1069ff",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/5c346525d3591cb032eca86d0f904cc01f1069ff",
        "files": [
          "drivers/net/ethernet/qualcomm/rmnet/rmnet_config.c"
        ],
        "message": "net: qualcomm: rmnet: Fix rcu splat in rmnet_is_real_dev_registered\n\nXiaolong reported a suspicious rcu_dereference_check in the device\nunregister notifier callback. Since we do not dereference the\nrx_handler_data, it's ok to just check for the value of the pointer.\nNote that this section is already protected by rtnl_lock.\n\n[  101.364846] WARNING: suspicious RCU usage\n[  101.365654] 4.13.0-rc6-01701-gceed73a #1 Not tainted\n[  101.370873] -----------------------------\n[  101.372472] drivers/net/ethernet/qualcomm/rmnet/rmnet_config.c:57 suspicious rcu_dereference_check() usage!\n[  101.374427]\n[  101.374427] other info that might help us debug this:\n[  101.374427]\n[  101.387491]\n[  101.387491] rcu_scheduler_active = 2, debug_locks = 1\n[  101.389368] 1 lock held by trinity-main/2809:\n[  101.390736]  #0:  (rtnl_mutex){+.+.+.}, at: [<8146085b>] rtnl_lock+0xf/0x11\n[  101.395482]\n[  101.395482] stack backtrace:\n[  101.396948] CPU: 0 PID: 2809 Comm: trinity-main Not tainted 4.13.0-rc6-01701-gceed73a #1\n[  101.398857] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.9.3-20161025_171302-gandalf 04/01/2014\n[  101.401079] Call Trace:\n[  101.401656]  dump_stack+0xa1/0xeb\n[  101.402871]  lockdep_rcu_suspicious+0xc7/0xd0\n[  101.403665]  rmnet_is_real_dev_registered+0x40/0x4e\n[  101.405199]  rmnet_config_notify_cb+0x2c/0x142\n[  101.406344]  ? wireless_nlevent_flush+0x47/0x71\n[  101.407385]  notifier_call_chain+0x2d/0x47\n[  101.408645]  raw_notifier_call_chain+0xc/0xe\n[  101.409882]  call_netdevice_notifiers_info+0x41/0x49\n[  101.411402]  call_netdevice_notifiers+0xc/0xe\n[  101.412713]  rollback_registered_many+0x268/0x36e\n[  101.413702]  rollback_registered+0x39/0x56\n[  101.414965]  unregister_netdevice_queue+0x79/0x88\n[  101.415908]  unregister_netdev+0x16/0x1d\n\nFixes: ceed73a2cf4a (\"drivers: net: ethernet: qualcomm: rmnet: Initial implementation\")\nSigned-off-by: Subash Abhinov Kasiviswanathan <subashab@codeaurora.org>\nReported-by: kernel test robot <xiaolong.ye@intel.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "drivers/net/ethernet/qualcomm/rmnet/rmnet_config.c||drivers/net/ethernet/qualcomm/rmnet/rmnet_config.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/net/ethernet/qualcomm/rmnet/rmnet_config.c||drivers/net/ethernet/qualcomm/rmnet/rmnet_config.c": [
          "File: drivers/net/ethernet/qualcomm/rmnet/rmnet_config.c -> drivers/net/ethernet/qualcomm/rmnet/rmnet_config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: static int rmnet_is_real_dev_registered(const struct net_device *real_dev)",
          "53: {",
          "58: }",
          "",
          "[Removed Lines]",
          "54:  rx_handler_func_t *rx_handler;",
          "56:  rx_handler = rcu_dereference(real_dev->rx_handler);",
          "57:  return (rx_handler == rmnet_rx_handler);",
          "",
          "[Added Lines]",
          "54:  return rcu_access_pointer(real_dev->rx_handler) == rmnet_rx_handler;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6b4877c7bdc6ae39ce03716df7caeecf204697eb",
      "candidate_info": {
        "commit_hash": "6b4877c7bdc6ae39ce03716df7caeecf204697eb",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/6b4877c7bdc6ae39ce03716df7caeecf204697eb",
        "files": [
          "drivers/input/misc/uinput.c"
        ],
        "message": "Input: uinput - avoid crash when sending FF request to device going away\n\nIf FF request comes in while uinput device is going away,\nuinput_request_send() will fail with -ENODEV, and uinput_request_submit()\nwill attempt to mark the slot as unused by calling uinput_request_done().\nUnfortunately in this case we haven't initialized request->done completion\nyet, and we get a crash:\n\n[   39.402036] BUG: spinlock bad magic on CPU#1, fftest/3108\n[   39.402046]  lock: 0xffff88006a93bb00, .magic: 00000000, .owner: /39, .owner_cpu: 1217155072\n[   39.402055] CPU: 1 PID: 3108 Comm: fftest Tainted: G        W 4.13.0+ #15\n[   39.402059] Hardware name: LENOVO 20HQS0EG02/20HQS0EG02, BIOS N1MET37W (1.22 ) 07/04/2017\n[   39.402064]  0000000000000086 f0fad82f3ceaa120 ffff88006a93b9a0 ffffffff9de941bb\n[   39.402077]  ffff88026df8ae00 ffff88006a93bb00 ffff88006a93b9c0 ffffffff9dca62b7\n[   39.402088]  ffff88006a93bb00 ffff88006a93baf8 ffff88006a93b9e0 ffffffff9dca62e7\n[   39.402099] Call Trace:\n[   39.402112]  [<ffffffff9de941bb>] dump_stack+0x4d/0x63\n[   39.402123]  [<ffffffff9dca62b7>] spin_dump+0x97/0x9c\n[   39.402130]  [<ffffffff9dca62e7>] spin_bug+0x2b/0x2d\n[   39.402138]  [<ffffffff9dca6373>] do_raw_spin_lock+0x28/0xfd\n[   39.402147]  [<ffffffff9e3055cd>] _raw_spin_lock_irqsave+0x19/0x1f\n[   39.402154]  [<ffffffff9dca05b7>] complete+0x1d/0x48\n[   39.402162]  [<ffffffffc04f30af>] 0xffffffffc04f30af\n[   39.402167]  [<ffffffffc04f468c>] 0xffffffffc04f468c\n[   39.402177]  [<ffffffff9dd59c16>] ? __slab_free+0x22f/0x359\n[   39.402184]  [<ffffffff9dcc13e9>] ? tk_clock_read+0xc/0xe\n[   39.402189]  [<ffffffffc04f471f>] 0xffffffffc04f471f\n[   39.402195]  [<ffffffff9dc9ffe5>] ? __wake_up+0x44/0x4b\n[   39.402200]  [<ffffffffc04f3240>] ? 0xffffffffc04f3240\n[   39.402207]  [<ffffffff9e0f57f3>] erase_effect+0xa1/0xd2\n[   39.402214]  [<ffffffff9e0f58c6>] input_ff_flush+0x43/0x5c\n[   39.402219]  [<ffffffffc04f32ad>] 0xffffffffc04f32ad\n[   39.402227]  [<ffffffff9e0f174f>] input_flush_device+0x3d/0x51\n[   39.402234]  [<ffffffff9e0f69ae>] evdev_flush+0x49/0x5c\n[   39.402243]  [<ffffffff9dd62d6e>] filp_close+0x3f/0x65\n[   39.402253]  [<ffffffff9dd7dcf7>] put_files_struct+0x66/0xc1\n[   39.402261]  [<ffffffff9dd7ddeb>] exit_files+0x47/0x4e\n[   39.402270]  [<ffffffff9dc6b329>] do_exit+0x483/0x969\n[   39.402278]  [<ffffffff9dc73211>] ? recalc_sigpending_tsk+0x3d/0x44\n[   39.402285]  [<ffffffff9dc6c7a2>] do_group_exit+0x42/0xb0\n[   39.402293]  [<ffffffff9dc767e1>] get_signal+0x58d/0x5bf\n[   39.402300]  [<ffffffff9dc03701>] do_signal+0x37/0x53e\n[   39.402307]  [<ffffffff9e0f8401>] ? evdev_ioctl_handler+0xac8/0xb04\n[   39.402314]  [<ffffffff9e0f8464>] ? evdev_ioctl+0x10/0x12\n[   39.402321]  [<ffffffff9dd74cfa>] ? do_vfs_ioctl+0x42e/0x501\n[   39.402328]  [<ffffffff9dc0170e>] prepare_exit_to_usermode+0x66/0x90\n[   39.402333]  [<ffffffff9dc0181b>] syscall_return_slowpath+0xe3/0xec\n[   39.402339]  [<ffffffff9e305b7b>] int_ret_from_sys_call+0x25/0x8f\n\nWhile we could solve this by simply initializing the completion earlier, we\nare better off rearranging the code a bit so we avoid calling complete() on\nrequests that we did not send out. This patch consolidates marking request\nslots as free in one place (in uinput_request_submit(), the same place\nwhere we acquire them) and having everyone else simply signal completion\nof the requests.\n\nFixes: 00ce756ce53a (\"Input: uinput - mark failed submission requests as free\")\nSigned-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>",
        "before_after_code_files": [
          "drivers/input/misc/uinput.c||drivers/input/misc/uinput.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/input/misc/uinput.c||drivers/input/misc/uinput.c": [
          "File: drivers/input/misc/uinput.c -> drivers/input/misc/uinput.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:      uinput_request_alloc_id(udev, request));",
          "99: }",
          "103: {",
          "109: }",
          "111: static int uinput_request_send(struct uinput_device *udev,",
          "",
          "[Removed Lines]",
          "101: static void uinput_request_done(struct uinput_device *udev,",
          "102:     struct uinput_request *request)",
          "105:  udev->requests[request->id] = NULL;",
          "106:  wake_up(&udev->requests_waitq);",
          "108:  complete(&request->done);",
          "",
          "[Added Lines]",
          "101: static void uinput_request_release_slot(struct uinput_device *udev,",
          "102:      unsigned int id)",
          "105:  spin_lock(&udev->requests_lock);",
          "106:  udev->requests[id] = NULL;",
          "107:  spin_unlock(&udev->requests_lock);",
          "109:  wake_up(&udev->requests_waitq);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138: static int uinput_request_submit(struct uinput_device *udev,",
          "139:      struct uinput_request *request)",
          "140: {",
          "153:  wait_for_completion(&request->done);",
          "155: }",
          "",
          "[Removed Lines]",
          "141:  int error;",
          "143:  error = uinput_request_reserve_slot(udev, request);",
          "144:  if (error)",
          "145:   return error;",
          "147:  error = uinput_request_send(udev, request);",
          "148:  if (error) {",
          "149:   uinput_request_done(udev, request);",
          "150:   return error;",
          "151:  }",
          "154:  return request->retval;",
          "",
          "[Added Lines]",
          "142:  int retval;",
          "144:  retval = uinput_request_reserve_slot(udev, request);",
          "145:  if (retval)",
          "146:   return retval;",
          "148:  retval = uinput_request_send(udev, request);",
          "149:  if (retval)",
          "150:   goto out;",
          "153:  retval = request->retval;",
          "155:  out:",
          "156:  uinput_request_release_slot(udev, request->id);",
          "157:  return retval;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "169:   request = udev->requests[i];",
          "170:   if (request) {",
          "171:    request->retval = -ENODEV;",
          "173:   }",
          "174:  }",
          "",
          "[Removed Lines]",
          "172:    uinput_request_done(udev, request);",
          "",
          "[Added Lines]",
          "175:    complete(&request->done);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "957:    }",
          "959:    req->retval = ff_up.retval;",
          "961:    goto out;",
          "963:   case UI_END_FF_ERASE:",
          "",
          "[Removed Lines]",
          "960:    uinput_request_done(udev, req);",
          "",
          "[Added Lines]",
          "963:    complete(&req->done);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "973:    }",
          "975:    req->retval = ff_erase.retval;",
          "977:    goto out;",
          "978:  }",
          "",
          "[Removed Lines]",
          "976:    uinput_request_done(udev, req);",
          "",
          "[Added Lines]",
          "979:    complete(&req->done);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d477bf3af1e88fe27c893f84136647fe11963198",
      "candidate_info": {
        "commit_hash": "d477bf3af1e88fe27c893f84136647fe11963198",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/d477bf3af1e88fe27c893f84136647fe11963198",
        "files": [
          "drivers/cpufreq/cpufreq-dt-platdev.c"
        ],
        "message": "cpufreq: dt: Fix sysfs duplicate filename creation for platform-device\n\nti-cpufreq and cpufreq-dt-platdev drivers are registering platform-device\nwith same name \"cpufreq-dt\" using platform_device_register_*() routines.\nThis is leading to build warnings appended below.\n\nProviding hardware information to OPP framework along with the platform-\ndevice creation should be done by ti-cpufreq driver before cpufreq-dt\ndriver comes into place.\n\nThis patch add's TI am33xx, am43 and dra7 platforms (which use opp-v2\nproperty) to the blacklist of devices in cpufreq-dt-platform driver to\navoid creating platform-device twice and remove build warnings.\n\n[    2.370167] ------------[ cut here ]------------\n[    2.375087] WARNING: CPU: 0 PID: 1 at fs/sysfs/dir.c:31 sysfs_warn_dup+0x58/0x78\n[    2.383112] sysfs: cannot create duplicate filename '/devices/platform/cpufreq-dt'\n[    2.391219] Modules linked in:\n[    2.394506] CPU: 0 PID: 1 Comm: swapper/0 Not tainted 4.13.0-next-20170912 #1\n[    2.402006] Hardware name: Generic AM33XX (Flattened Device Tree)\n[    2.408437] [<c0110a28>] (unwind_backtrace) from [<c010ca84>] (show_stack+0x10/0x14)\n[    2.416568] [<c010ca84>] (show_stack) from [<c0827d64>] (dump_stack+0xac/0xe0)\n[    2.424165] [<c0827d64>] (dump_stack) from [<c0137470>] (__warn+0xd8/0x104)\n[    2.431488] [<c0137470>] (__warn) from [<c01374d0>] (warn_slowpath_fmt+0x34/0x44)\n[    2.439351] [<c01374d0>] (warn_slowpath_fmt) from [<c03459d0>] (sysfs_warn_dup+0x58/0x78)\n[    2.447938] [<c03459d0>] (sysfs_warn_dup) from [<c0345ab8>] (sysfs_create_dir_ns+0x80/0x98)\n[    2.456719] [<c0345ab8>] (sysfs_create_dir_ns) from [<c082c554>] (kobject_add_internal+0x9c/0x2d4)\n[    2.466124] [<c082c554>] (kobject_add_internal) from [<c082c7d8>] (kobject_add+0x4c/0x9c)\n[    2.474712] [<c082c7d8>] (kobject_add) from [<c05803e4>] (device_add+0xcc/0x57c)\n[    2.482489] [<c05803e4>] (device_add) from [<c0584b74>] (platform_device_add+0x100/0x220)\n[    2.491085] [<c0584b74>] (platform_device_add) from [<c05855a8>] (platform_device_register_full+0xf4/0x118)\n[    2.501305] [<c05855a8>] (platform_device_register_full) from [<c067023c>] (ti_cpufreq_init+0x150/0x22c)\n[    2.511253] [<c067023c>] (ti_cpufreq_init) from [<c0101df4>] (do_one_initcall+0x3c/0x170)\n[    2.519838] [<c0101df4>] (do_one_initcall) from [<c0c00eb4>] (kernel_init_freeable+0x1fc/0x2c4)\n[    2.528974] [<c0c00eb4>] (kernel_init_freeable) from [<c083bcac>] (kernel_init+0x8/0x110)\n[    2.537565] [<c083bcac>] (kernel_init) from [<c0107d18>] (ret_from_fork+0x14/0x3c)\n[    2.545981] ---[ end trace 2fc00e213c13ab20 ]---\n[    2.551051] ------------[ cut here ]------------\n[    2.555931] WARNING: CPU: 0 PID: 1 at lib/kobject.c:240 kobject_add_internal+0x254/0x2d4\n[    2.564578] kobject_add_internal failed for cpufreq-dt with -EEXIST, don't try to register\nthings with the same name in the same directory.\n[    2.577977] Modules linked in:\n[    2.581261] CPU: 0 PID: 1 Comm: swapper/0 Tainted: G        W       4.13.0-next-20170912 #1\n[    2.590013] Hardware name: Generic AM33XX (Flattened Device Tree)\n[    2.596437] [<c0110a28>] (unwind_backtrace) from [<c010ca84>] (show_stack+0x10/0x14)\n[    2.604573] [<c010ca84>] (show_stack) from [<c0827d64>] (dump_stack+0xac/0xe0)\n[    2.612172] [<c0827d64>] (dump_stack) from [<c0137470>] (__warn+0xd8/0x104)\n[    2.619494] [<c0137470>] (__warn) from [<c01374d0>] (warn_slowpath_fmt+0x34/0x44)\n[    2.627362] [<c01374d0>] (warn_slowpath_fmt) from [<c082c70c>] (kobject_add_internal+0x254/0x2d4)\n[    2.636666] [<c082c70c>] (kobject_add_internal) from [<c082c7d8>] (kobject_add+0x4c/0x9c)\n[    2.645255] [<c082c7d8>] (kobject_add) from [<c05803e4>] (device_add+0xcc/0x57c)\n[    2.653027] [<c05803e4>] (device_add) from [<c0584b74>] (platform_device_add+0x100/0x220)\n[    2.661615] [<c0584b74>] (platform_device_add) from [<c05855a8>] (platform_device_register_full+0xf4/0x118)\n[    2.671833] [<c05855a8>] (platform_device_register_full) from [<c067023c>] (ti_cpufreq_init+0x150/0x22c)\n[    2.681779] [<c067023c>] (ti_cpufreq_init) from [<c0101df4>] (do_one_initcall+0x3c/0x170)\n[    2.690377] [<c0101df4>] (do_one_initcall) from [<c0c00eb4>] (kernel_init_freeable+0x1fc/0x2c4)\n[    2.699510] [<c0c00eb4>] (kernel_init_freeable) from [<c083bcac>] (kernel_init+0x8/0x110)\n[    2.708106] [<c083bcac>] (kernel_init) from [<c0107d18>] (ret_from_fork+0x14/0x3c)\n[    2.716217] ---[ end trace 2fc00e213c13ab21 ]---\n\nFixes: edeec420de24 (cpufreq: dt-cpufreq: platdev Automatically create device with OPP v2)\nSigned-off-by: Suniel Mahesh <sunil.m@techveda.org>\nAcked-by: Viresh Kumar <viresh.kumar@linaro.org>\nSigned-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>",
        "before_after_code_files": [
          "drivers/cpufreq/cpufreq-dt-platdev.c||drivers/cpufreq/cpufreq-dt-platdev.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/cpufreq/cpufreq-dt-platdev.c||drivers/cpufreq/cpufreq-dt-platdev.c": [
          "File: drivers/cpufreq/cpufreq-dt-platdev.c -> drivers/cpufreq/cpufreq-dt-platdev.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:  { .compatible = \"sigma,tango4\", },",
          "121:  { }",
          "122: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:  { .compatible = \"ti,am33xx\", },",
          "122:  { .compatible = \"ti,am43\", },",
          "123:  { .compatible = \"ti,dra7\", },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e6f9bc34d3779cb7b6a337afed5de8be3f0fab77",
      "candidate_info": {
        "commit_hash": "e6f9bc34d3779cb7b6a337afed5de8be3f0fab77",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/e6f9bc34d3779cb7b6a337afed5de8be3f0fab77",
        "files": [
          "drivers/infiniband/core/verbs.c"
        ],
        "message": "IB/core: Fix for core panic\n\nBuild with the latest patches resulted in panic:\n11384.486289] BUG: unable to handle kernel NULL pointer dereference at\n         (null)\n[11384.486293] IP:           (null)\n[11384.486295] PGD 0\n[11384.486295] P4D 0\n[11384.486296]\n[11384.486299] Oops: 0010 [#1] SMP\n......... snip ......\n[11384.486401] CPU: 0 PID: 968 Comm: kworker/0:1H Tainted: G        W  O\n    4.13.0-a-stream-20170825 #1\n[11384.486402] Hardware name: Intel Corporation S2600WT2R/S2600WT2R,\nBIOS SE5C610.86B.01.01.0014.121820151719 12/18/2015\n[11384.486418] Workqueue: ib-comp-wq ib_cq_poll_work [ib_core]\n[11384.486419] task: ffff880850579680 task.stack: ffffc90007fec000\n[11384.486420] RIP: 0010:          (null)\n[11384.486420] RSP: 0018:ffffc90007fef970 EFLAGS: 00010206\n[11384.486421] RAX: ffff88084cfe8000 RBX: ffff88084dce4000 RCX:\nffffc90007fef978\n[11384.486422] RDX: 0000000000000000 RSI: 0000000000000001 RDI:\nffff88084cfe8000\n[11384.486422] RBP: ffffc90007fefab0 R08: 0000000000000000 R09:\nffff88084dce4080\n[11384.486423] R10: ffffffffa02d7f60 R11: 0000000000000000 R12:\nffff88105af65a00\n[11384.486423] R13: ffff88084dce4000 R14: 000000000000c000 R15:\n000000000000c000\n[11384.486424] FS:  0000000000000000(0000) GS:ffff88085f400000(0000)\nknlGS:0000000000000000\n[11384.486425] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[11384.486425] CR2: 0000000000000000 CR3: 0000000001c09000 CR4:\n00000000001406f0\n[11384.486426] Call Trace:\n[11384.486431]  ? is_valid_mcast_lid.isra.21+0xfb/0x110 [ib_core]\n[11384.486436]  ib_attach_mcast+0x6f/0xa0 [ib_core]\n[11384.486441]  ipoib_mcast_attach+0x81/0x190 [ib_ipoib]\n[11384.486443]  ipoib_mcast_join_complete+0x354/0xb40 [ib_ipoib]\n[11384.486448]  mcast_work_handler+0x330/0x6c0 [ib_core]\n[11384.486452]  join_handler+0x101/0x220 [ib_core]\n[11384.486455]  ib_sa_mcmember_rec_callback+0x54/0x80 [ib_core]\n[11384.486459]  recv_handler+0x3a/0x60 [ib_core]\n[11384.486462]  ib_mad_recv_done+0x423/0x9b0 [ib_core]\n[11384.486466]  __ib_process_cq+0x5d/0xb0 [ib_core]\n[11384.486469]  ib_cq_poll_work+0x20/0x60 [ib_core]\n[11384.486472]  process_one_work+0x149/0x360\n[11384.486474]  worker_thread+0x4d/0x3c0\n[11384.486487]  kthread+0x109/0x140\n[11384.486488]  ? rescuer_thread+0x380/0x380\n[11384.486489]  ? kthread_park+0x60/0x60\n[11384.486490]  ? kthread_park+0x60/0x60\n[11384.486493]  ret_from_fork+0x25/0x30\n[11384.486493] Code:  Bad RIP value.\n[11384.486493] Code:  Bad RIP value.\n[11384.486496] RIP:           (null) RSP: ffffc90007fef970\n[11384.486497] CR2: 0000000000000000\n[11384.486531] ---[ end trace b1acec6fb4ff6e75 ]---\n[11384.532133] Kernel panic - not syncing: Fatal exception\n[11384.536541] Kernel Offset: disabled\n[11384.969491] ---[ end Kernel panic - not syncing: Fatal exception\n[11384.976875] sched: Unexpected reschedule of offline CPU#1!\n[11384.983646] ------------[ cut here ]------------\n\nRdma device driver may not have implemented (*get_link_layer)()\nso it can not be called directly. Should use appropriate helper function.\n\nReviewed-by: Yuval Shaia <yuval.shaia@oracle.com>\nFixes: 523633359224 (\"IB/core: Fix the validations of a multicast LID in attach or detach operations\")\nCc: stable@kernel.org # 4.13\nReviewed-by: Dennis Dalessandro <dennis.dalessandro@intel.com>\nSigned-off-by: Alex Estrin <alex.estrin@intel.com>\nSigned-off-by: Dennis Dalessandro <dennis.dalessandro@intel.com>\nReviewed-by: Leon Romanovsky <leonro@mellanox.com>\nSigned-off-by: Doug Ledford <dledford@redhat.com>",
        "before_after_code_files": [
          "drivers/infiniband/core/verbs.c||drivers/infiniband/core/verbs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/infiniband/core/verbs.c||drivers/infiniband/core/verbs.c": [
          "File: drivers/infiniband/core/verbs.c -> drivers/infiniband/core/verbs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1647:  if (!ib_query_qp(qp, &attr, IB_QP_STATE | IB_QP_PORT, &init_attr)) {",
          "1648:   if (attr.qp_state >= IB_QPS_INIT) {",
          "1650:        IB_LINK_LAYER_INFINIBAND)",
          "1651:     return true;",
          "1652:    goto lid_check;",
          "",
          "[Removed Lines]",
          "1649:    if (qp->device->get_link_layer(qp->device, attr.port_num) !=",
          "",
          "[Added Lines]",
          "1649:    if (rdma_port_get_link_layer(qp->device, attr.port_num) !=",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1657:  for (port = 0; port < qp->device->phys_port_cnt; port++)",
          "1659:       IB_LINK_LAYER_INFINIBAND)",
          "1660:    num_eth_ports++;",
          "",
          "[Removed Lines]",
          "1658:   if (qp->device->get_link_layer(qp->device, port) !=",
          "",
          "[Added Lines]",
          "1658:   if (rdma_port_get_link_layer(qp->device, port) !=",
          "",
          "---------------"
        ]
      }
    }
  ]
}