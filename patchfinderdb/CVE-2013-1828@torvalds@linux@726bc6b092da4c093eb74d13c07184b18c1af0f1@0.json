{
  "cve_id": "CVE-2013-1828",
  "cve_desc": "The sctp_getsockopt_assoc_stats function in net/sctp/socket.c in the Linux kernel before 3.8.4 does not validate a size value before proceeding to a copy_from_user operation, which allows local users to gain privileges via a crafted application that contains an SCTP_GET_ASSOC_STATS getsockopt system call.",
  "repo": "torvalds/linux",
  "patch_hash": "726bc6b092da4c093eb74d13c07184b18c1af0f1",
  "patch_info": {
    "commit_hash": "726bc6b092da4c093eb74d13c07184b18c1af0f1",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/726bc6b092da4c093eb74d13c07184b18c1af0f1",
    "files": [
      "net/sctp/socket.c"
    ],
    "message": "net/sctp: Validate parameter size for SCTP_GET_ASSOC_STATS\n\nBuilding sctp may fail with:\n\nIn function \u2018copy_from_user\u2019,\n    inlined from \u2018sctp_getsockopt_assoc_stats\u2019 at\n    net/sctp/socket.c:5656:20:\narch/x86/include/asm/uaccess_32.h:211:26: error: call to\n    \u2018copy_from_user_overflow\u2019 declared with attribute error: copy_from_user()\n    buffer size is not provably correct\n\nif built with W=1 due to a missing parameter size validation\nbefore the call to copy_from_user.\n\nSigned-off-by: Guenter Roeck <linux@roeck-us.net>\nAcked-by: Vlad Yasevich <vyasevich@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "net/sctp/socket.c||net/sctp/socket.c"
    ]
  },
  "patch_diff": {
    "net/sctp/socket.c||net/sctp/socket.c": [
      "File: net/sctp/socket.c -> net/sctp/socket.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "5653:  if (len < sizeof(sctp_assoc_t))",
      "5654:   return -EINVAL;",
      "5656:  if (copy_from_user(&sas, optval, len))",
      "5657:   return -EFAULT;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5657:  len = min_t(size_t, len, sizeof(sas));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "5687:  asoc->stats.max_obs_rto = asoc->rto_min;",
      "5692:  if (put_user(len, optlen))",
      "5693:   return -EFAULT;",
      "",
      "[Removed Lines]",
      "5690:  len = min_t(size_t, len, sizeof(sas));",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "196d67593439b03088913227093e374235596e33",
      "candidate_info": {
        "commit_hash": "196d67593439b03088913227093e374235596e33",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/196d67593439b03088913227093e374235596e33",
        "files": [
          "include/net/sctp/sctp.h",
          "include/net/sctp/structs.h",
          "include/net/sctp/user.h",
          "net/sctp/associola.c",
          "net/sctp/endpointola.c",
          "net/sctp/inqueue.c",
          "net/sctp/output.c",
          "net/sctp/outqueue.c",
          "net/sctp/sm_make_chunk.c",
          "net/sctp/sm_sideeffect.c",
          "net/sctp/sm_statefuns.c",
          "net/sctp/socket.c",
          "net/sctp/transport.c"
        ],
        "message": "sctp: Add support to per-association statistics via a new SCTP_GET_ASSOC_STATS call\n\nThe current SCTP stack is lacking a mechanism to have per association\nstatistics. This is an implementation modeled after OpenSolaris'\nSCTP_GET_ASSOC_STATS.\n\nUserspace part will follow on lksctp if/when there is a general ACK on\nthis.\nV4:\n- Move ipackets++ before q->immediate.func() for consistency reasons\n- Move sctp_max_rto() at the end of sctp_transport_update_rto() to avoid\n  returning bogus RTO values\n- return asoc->rto_min when max_obs_rto value has not changed\n\nV3:\n- Increase ictrlchunks in sctp_assoc_bh_rcv() as well\n- Move ipackets++ to sctp_inq_push()\n- return 0 when no rto updates took place since the last call\n\nV2:\n- Implement partial retrieval of stat struct to cope for future expansion\n- Kill the rtxpackets counter as it cannot be precise anyway\n- Rename outseqtsns to outofseqtsns to make it clearer that these are out\n  of sequence unexpected TSNs\n- Move asoc->ipackets++ under a lock to avoid potential miscounts\n- Fold asoc->opackets++ into the already existing asoc check\n- Kill unneeded (q->asoc) test when increasing rtxchunks\n- Do not count octrlchunks if sending failed (SCTP_XMIT_OK != 0)\n- Don't count SHUTDOWNs as SACKs\n- Move SCTP_GET_ASSOC_STATS to the private space API\n- Adjust the len check in sctp_getsockopt_assoc_stats() to allow for\n  future struct growth\n- Move association statistics in their own struct\n- Update idupchunks when we send a SACK with dup TSNs\n- return min_rto in max_rto when RTO has not changed. Also return the\n  transport when max_rto last changed.\n\nSigned-off: Michele Baldessari <michele@acksyn.org>\nAcked-by: Vlad Yasevich <vyasevich@gmail.com>\n\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "include/net/sctp/sctp.h||include/net/sctp/sctp.h",
          "include/net/sctp/structs.h||include/net/sctp/structs.h",
          "include/net/sctp/user.h||include/net/sctp/user.h",
          "net/sctp/associola.c||net/sctp/associola.c",
          "net/sctp/endpointola.c||net/sctp/endpointola.c",
          "net/sctp/inqueue.c||net/sctp/inqueue.c",
          "net/sctp/output.c||net/sctp/output.c",
          "net/sctp/outqueue.c||net/sctp/outqueue.c",
          "net/sctp/sm_make_chunk.c||net/sctp/sm_make_chunk.c",
          "net/sctp/sm_sideeffect.c||net/sctp/sm_sideeffect.c",
          "net/sctp/sm_statefuns.c||net/sctp/sm_statefuns.c",
          "net/sctp/socket.c||net/sctp/socket.c",
          "net/sctp/transport.c||net/sctp/transport.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/sctp/socket.c||net/sctp/socket.c"
          ],
          "candidate": [
            "net/sctp/socket.c||net/sctp/socket.c"
          ]
        }
      },
      "candidate_diff": {
        "include/net/sctp/sctp.h||include/net/sctp/sctp.h": [
          "File: include/net/sctp/sctp.h -> include/net/sctp/sctp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "272:         unsigned long   mibs[SCTP_MIB_MAX];",
          "273: };",
          "277: #if SCTP_DEBUG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "276: static inline void sctp_max_rto(struct sctp_association *asoc,",
          "277:     struct sctp_transport *trans)",
          "278: {",
          "279:  if (asoc->stats.max_obs_rto < (__u64)trans->rto) {",
          "280:   asoc->stats.max_obs_rto = trans->rto;",
          "281:   memset(&asoc->stats.obs_rto_ipaddr, 0,",
          "282:    sizeof(struct sockaddr_storage));",
          "283:   memcpy(&asoc->stats.obs_rto_ipaddr, &trans->ipaddr,",
          "284:    trans->af_specific->sockaddr_len);",
          "285:  }",
          "286: }",
          "",
          "---------------"
        ],
        "include/net/sctp/structs.h||include/net/sctp/structs.h": [
          "File: include/net/sctp/structs.h -> include/net/sctp/structs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1312:  __u32 initial_tsn;",
          "1313: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1316: struct sctp_priv_assoc_stats {",
          "1322:  struct sockaddr_storage obs_rto_ipaddr;",
          "1323:  __u64 max_obs_rto;",
          "1325:  __u64 isacks;",
          "1326:  __u64 osacks;",
          "1328:  __u64 opackets;",
          "1329:  __u64 ipackets;",
          "1331:  __u64 rtxchunks;",
          "1333:  __u64 outofseqtsns;",
          "1335:  __u64 idupchunks;",
          "1337:  __u64 gapcnt;",
          "1339:  __u64 ouodchunks;",
          "1340:  __u64 iuodchunks;",
          "1342:  __u64 oodchunks;",
          "1343:  __u64 iodchunks;",
          "1345:  __u64 octrlchunks;",
          "1346:  __u64 ictrlchunks;",
          "1347: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1833: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1868:  struct sctp_priv_assoc_stats stats;",
          "",
          "---------------"
        ],
        "include/net/sctp/user.h||include/net/sctp/user.h": [
          "File: include/net/sctp/user.h -> include/net/sctp/user.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "720: };",
          "724: enum sctp_msg_flags {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "728: struct sctp_assoc_stats {",
          "731:  struct sockaddr_storage sas_obs_rto_ipaddr;",
          "747: };",
          "",
          "---------------"
        ],
        "net/sctp/associola.c||net/sctp/associola.c": [
          "File: net/sctp/associola.c -> net/sctp/associola.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "321:  asoc->default_timetolive = sp->default_timetolive;",
          "322:  asoc->default_rcv_context = sp->default_rcv_context;",
          "325:  INIT_LIST_HEAD(&asoc->endpoint_shared_keys);",
          "326:  err = sctp_auth_asoc_copy_shkeys(ep, asoc, gfp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "325:  memset(&asoc->stats, 0, sizeof(struct sctp_priv_assoc_stats));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "762:  peer->rto = asoc->rto_initial;",
          "765:  peer->state = peer_state;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "766:  sctp_max_rto(asoc, peer);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1153:   if (sctp_chunk_is_data(chunk))",
          "1154:    asoc->peer.last_data_from = chunk->transport;",
          "1156:    SCTP_INC_STATS(net, SCTP_MIB_INCTRLCHUNKS);",
          "1158:   if (chunk->transport)",
          "1159:    chunk->transport->last_time_heard = jiffies;",
          "",
          "[Removed Lines]",
          "1155:   else",
          "",
          "[Added Lines]",
          "1159:   else {",
          "1161:    asoc->stats.ictrlchunks++;",
          "1162:    if (chunk->chunk_hdr->type == SCTP_CID_SACK)",
          "1163:     asoc->stats.isacks++;",
          "1164:   }",
          "",
          "---------------"
        ],
        "net/sctp/endpointola.c||net/sctp/endpointola.c": [
          "File: net/sctp/endpointola.c -> net/sctp/endpointola.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "481:   if (asoc && sctp_chunk_is_data(chunk))",
          "482:    asoc->peer.last_data_from = chunk->transport;",
          "484:    SCTP_INC_STATS(sock_net(ep->base.sk), SCTP_MIB_INCTRLCHUNKS);",
          "486:   if (chunk->transport)",
          "487:    chunk->transport->last_time_heard = jiffies;",
          "",
          "[Removed Lines]",
          "483:   else",
          "",
          "[Added Lines]",
          "483:   else {",
          "485:    if (asoc)",
          "486:     asoc->stats.ictrlchunks++;",
          "487:   }",
          "",
          "---------------"
        ],
        "net/sctp/inqueue.c||net/sctp/inqueue.c": [
          "File: net/sctp/inqueue.c -> net/sctp/inqueue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:  list_add_tail(&chunk->list, &q->in_chunk_list);",
          "107:  q->immediate.func(&q->immediate);",
          "108: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107:  if (chunk->asoc)",
          "108:   chunk->asoc->stats.ipackets++;",
          "",
          "---------------"
        ],
        "net/sctp/output.c||net/sctp/output.c": [
          "File: net/sctp/output.c -> net/sctp/output.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "312:      case SCTP_CID_SACK:",
          "313:   packet->has_sack = 1;",
          "314:   break;",
          "316:      case SCTP_CID_AUTH:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "314:   if (chunk->asoc)",
          "315:    chunk->asoc->stats.osacks++;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "592:  }",
          "594:  if (has_data) {",
          "",
          "[Removed Lines]",
          "587:  if (asoc && asoc->peer.last_sent_to != tp) {",
          "591:   asoc->peer.last_sent_to = tp;",
          "",
          "[Added Lines]",
          "589:  if (asoc) {",
          "590:   asoc->stats.opackets++;",
          "591:   if (asoc->peer.last_sent_to != tp)",
          "595:    asoc->peer.last_sent_to = tp;",
          "",
          "---------------"
        ],
        "net/sctp/outqueue.c||net/sctp/outqueue.c": [
          "File: net/sctp/outqueue.c -> net/sctp/outqueue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "667:     chunk->fast_retransmit = SCTP_DONT_FRTX;",
          "669:    q->empty = 0;",
          "670:    break;",
          "671:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "670:    q->asoc->stats.rtxchunks++;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "876:    if (status  != SCTP_XMIT_OK) {",
          "878:     list_add(&chunk->list, &q->control_chunk_list);",
          "885:    }",
          "886:    break;",
          "",
          "[Removed Lines]",
          "879:    } else if (chunk->chunk_hdr->type == SCTP_CID_FWD_TSN) {",
          "884:     sctp_transport_reset_timers(transport);",
          "",
          "[Added Lines]",
          "880:    } else {",
          "881:     asoc->stats.octrlchunks++;",
          "886:     if (chunk->chunk_hdr->type == SCTP_CID_FWD_TSN)",
          "887:      sctp_transport_reset_timers(transport);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1056:     if (asoc->state == SCTP_STATE_SHUTDOWN_PENDING)",
          "1057:      chunk->chunk_hdr->flags |= SCTP_DATA_SACK_IMM;",
          "1059:     break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1061:     if (chunk->chunk_hdr->flags & SCTP_DATA_UNORDERED)",
          "1062:      asoc->stats.ouodchunks++;",
          "1063:     else",
          "1064:      asoc->stats.oodchunks++;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1163:  sack_ctsn = ntohl(sack->cum_tsn_ack);",
          "1164:  gap_ack_blocks = ntohs(sack->num_gap_ack_blocks);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1172:  asoc->stats.gapcnt += gap_ack_blocks;",
          "",
          "---------------"
        ],
        "net/sctp/sm_make_chunk.c||net/sctp/sm_make_chunk.c": [
          "File: net/sctp/sm_make_chunk.c -> net/sctp/sm_make_chunk.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "804:      gabs);",
          "808:   sctp_addto_chunk(retval, sizeof(__u32) * num_dup_tsns,",
          "809:      sctp_tsnmap_get_dups(map));",
          "",
          "[Removed Lines]",
          "807:  if (num_dup_tsns)",
          "",
          "[Added Lines]",
          "807:  if (num_dup_tsns) {",
          "808:   aptr->stats.idupchunks += num_dup_tsns;",
          "811:  }",
          "",
          "---------------"
        ],
        "net/sctp/sm_sideeffect.c||net/sctp/sm_sideeffect.c": [
          "File: net/sctp/sm_sideeffect.c -> net/sctp/sm_sideeffect.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "543:  if (!is_hb || transport->hb_sent) {",
          "544:   transport->rto = min((transport->rto * 2), transport->asoc->rto_max);",
          "545:  }",
          "546: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "545:   sctp_max_rto(asoc, transport);",
          "",
          "---------------"
        ],
        "net/sctp/sm_statefuns.c||net/sctp/sm_statefuns.c": [
          "File: net/sctp/sm_statefuns.c -> net/sctp/sm_statefuns.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6136:   return SCTP_IERROR_HIGH_TSN;",
          "6137:  } else if (tmp > 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6136:   if (chunk->asoc)",
          "6137:    chunk->asoc->stats.outofseqtsns++;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6236:   SCTP_INC_STATS(net, SCTP_MIB_INUNORDERCHUNKS);",
          "6238:   SCTP_INC_STATS(net, SCTP_MIB_INORDERCHUNKS);",
          "6239:   ordered = 1;",
          "6240:  }",
          "",
          "[Removed Lines]",
          "6235:  if (chunk->chunk_hdr->flags & SCTP_DATA_UNORDERED)",
          "6237:  else {",
          "",
          "[Added Lines]",
          "6237:  if (chunk->chunk_hdr->flags & SCTP_DATA_UNORDERED) {",
          "6239:   if (chunk->asoc)",
          "6240:    chunk->asoc->stats.iuodchunks++;",
          "6241:  } else {",
          "6243:   if (chunk->asoc)",
          "6244:    chunk->asoc->stats.iodchunks++;",
          "",
          "---------------"
        ],
        "net/sctp/socket.c||net/sctp/socket.c": [
          "File: net/sctp/socket.c -> net/sctp/socket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "611:         2*asoc->pathmtu, 4380));",
          "612:     trans->ssthresh = asoc->peer.i.a_rwnd;",
          "613:     trans->rto = asoc->rto_initial;",
          "614:     trans->rtt = trans->srtt = trans->rttvar = 0;",
          "615:     sctp_transport_route(trans, NULL,",
          "616:         sctp_sk(asoc->base.sk));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "614:     sctp_max_rto(asoc, trans);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5635:  return 0;",
          "5636: }",
          "5638: SCTP_STATIC int sctp_getsockopt(struct sock *sk, int level, int optname,",
          "5639:     char __user *optval, int __user *optlen)",
          "5640: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5645: static int sctp_getsockopt_assoc_stats(struct sock *sk, int len,",
          "5646:            char __user *optval,",
          "5647:            int __user *optlen)",
          "5648: {",
          "5649:  struct sctp_assoc_stats sas;",
          "5650:  struct sctp_association *asoc = NULL;",
          "5653:  if (len < sizeof(sctp_assoc_t))",
          "5654:   return -EINVAL;",
          "5656:  if (copy_from_user(&sas, optval, len))",
          "5657:   return -EFAULT;",
          "5659:  asoc = sctp_id2assoc(sk, sas.sas_assoc_id);",
          "5660:  if (!asoc)",
          "5661:   return -EINVAL;",
          "5663:  sas.sas_rtxchunks = asoc->stats.rtxchunks;",
          "5664:  sas.sas_gapcnt = asoc->stats.gapcnt;",
          "5665:  sas.sas_outofseqtsns = asoc->stats.outofseqtsns;",
          "5666:  sas.sas_osacks = asoc->stats.osacks;",
          "5667:  sas.sas_isacks = asoc->stats.isacks;",
          "5668:  sas.sas_octrlchunks = asoc->stats.octrlchunks;",
          "5669:  sas.sas_ictrlchunks = asoc->stats.ictrlchunks;",
          "5670:  sas.sas_oodchunks = asoc->stats.oodchunks;",
          "5671:  sas.sas_iodchunks = asoc->stats.iodchunks;",
          "5672:  sas.sas_ouodchunks = asoc->stats.ouodchunks;",
          "5673:  sas.sas_iuodchunks = asoc->stats.iuodchunks;",
          "5674:  sas.sas_idupchunks = asoc->stats.idupchunks;",
          "5675:  sas.sas_opackets = asoc->stats.opackets;",
          "5676:  sas.sas_ipackets = asoc->stats.ipackets;",
          "5682:  sas.sas_maxrto = asoc->stats.max_obs_rto;",
          "5683:  memcpy(&sas.sas_obs_rto_ipaddr, &asoc->stats.obs_rto_ipaddr,",
          "5684:   sizeof(struct sockaddr_storage));",
          "5687:  asoc->stats.max_obs_rto = asoc->rto_min;",
          "5690:  len = min_t(size_t, len, sizeof(sas));",
          "5692:  if (put_user(len, optlen))",
          "5693:   return -EFAULT;",
          "5695:  SCTP_DEBUG_PRINTK(\"sctp_getsockopt_assoc_stat(%d): %d\\n\",",
          "5696:      len, sas.sas_assoc_id);",
          "5698:  if (copy_to_user(optval, &sas, len))",
          "5699:   return -EFAULT;",
          "5701:  return 0;",
          "5702: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5776:  case SCTP_PEER_ADDR_THLDS:",
          "5777:   retval = sctp_getsockopt_paddr_thresholds(sk, optval, len, optlen);",
          "5778:   break;",
          "5779:  default:",
          "5780:   retval = -ENOPROTOOPT;",
          "5781:   break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5845:  case SCTP_GET_ASSOC_STATS:",
          "5846:   retval = sctp_getsockopt_assoc_stats(sk, len, optval, optlen);",
          "5847:   break;",
          "",
          "---------------"
        ],
        "net/sctp/transport.c||net/sctp/transport.c": [
          "File: net/sctp/transport.c -> net/sctp/transport.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "363:  if (tp->rto > tp->asoc->rto_max)",
          "364:   tp->rto = tp->asoc->rto_max;",
          "366:  tp->rtt = rtt;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "366:  sctp_max_rto(tp->asoc, tp);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "620:  t->burst_limited = 0;",
          "621:  t->ssthresh = asoc->peer.i.a_rwnd;",
          "622:  t->rto = asoc->rto_initial;",
          "623:  t->rtt = 0;",
          "624:  t->srtt = 0;",
          "625:  t->rttvar = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "624:  sctp_max_rto(asoc, t);",
          "",
          "---------------"
        ]
      }
    }
  ]
}