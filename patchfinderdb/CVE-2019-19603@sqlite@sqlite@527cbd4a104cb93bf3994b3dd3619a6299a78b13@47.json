{
  "cve_id": "CVE-2019-19603",
  "cve_desc": "SQLite 3.30.1 mishandles certain SELECT statements with a nonexistent VIEW, leading to an application crash.",
  "repo": "sqlite/sqlite",
  "patch_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
  "patch_info": {
    "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab.test"
    ],
    "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab.test||test/altertab.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "856:       }",
      "857:     }",
      "858:   }else{",
      "861:     ){",
      "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
      "863:                       zName);",
      "864:       return SQLITE_ERROR;",
      "865:     }",
      "866:   }",
      "867:   return SQLITE_OK;",
      "868: }",
      "",
      "[Removed Lines]",
      "859:     if( pParse->nested==0",
      "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
      "",
      "[Added Lines]",
      "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
      "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
      "",
      "[Added Lines]",
      "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
      "2148:   return pMod->pModule->xShadowName(zTail+1);",
      "2149: }",
      "",
      "[Removed Lines]",
      "2150: #else",
      "2151: # define isShadowTableName(x,y) 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2190:   p = pParse->pNewTable;",
      "2191:   if( p==0 ) return;",
      "2194:     p->tabFlags |= TF_Shadow;",
      "2195:   }",
      "",
      "[Removed Lines]",
      "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
      "",
      "[Added Lines]",
      "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
      "4549: #endif",
      "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
      "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
      "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
      "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
      "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
      "4553: #else",
      "4554: # define sqlite3ShadowTableName(A,B) 0",
      "4555: #endif",
      "",
      "---------------"
    ],
    "test/altertab.test||test/altertab.test": [
      "File: test/altertab.test -> test/altertab.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "547:   } {1 {table y1_segments may not be modified}}",
      "549:   do_catchsql_test 16.20 {",
      "554:     DROP TABLE y1_segments;",
      "555:   } {1 {table y1_segments may not be dropped}}",
      "557:   do_execsql_test 16.30 {",
      "558:     ALTER TABLE y1 RENAME TO z1;",
      "559:   }",
      "",
      "[Removed Lines]",
      "550:     ALTER TABLE y1_segments RENAME TO abc;",
      "551:   } {1 {table y1_segments may not be altered}}",
      "553:   do_catchsql_test 16.21 {",
      "",
      "[Added Lines]",
      "553:   do_catchsql_test 16.20 {",
      "554:     ALTER TABLE y1_segments RENAME TO abc;",
      "555:   } {1 {table y1_segments may not be altered}}",
      "556:   sqlite3_db_config db DEFENSIVE 0",
      "557:   do_catchsql_test 16.22 {",
      "558:     ALTER TABLE y1_segments RENAME TO abc;",
      "559:   } {0 {}}",
      "560:   sqlite3_db_config db DEFENSIVE 1",
      "561:   do_catchsql_test 16.23 {",
      "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
      "563:   } {1 {object name reserved for internal use: y1_segments}}",
      "564:   do_catchsql_test 16.24 {",
      "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
      "566:   } {1 {object name reserved for internal use: y1_segments}}",
      "567:   sqlite3_db_config db DEFENSIVE 0",
      "568:   do_catchsql_test 16.25 {",
      "569:     ALTER TABLE abc RENAME TO y1_segments;",
      "570:   } {0 {}}",
      "571:   sqlite3_db_config db DEFENSIVE 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a47e709e89db6011aa13727cb620bdc566bd33a0",
      "candidate_info": {
        "commit_hash": "a47e709e89db6011aa13727cb620bdc566bd33a0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a47e709e89db6011aa13727cb620bdc566bd33a0",
        "files": [
          "Makefile.in",
          "Makefile.msc",
          "main.mk",
          "manifest",
          "manifest.uuid",
          "test/fuzzcheck.c",
          "test/fuzzdata8.db"
        ],
        "message": "Add the ability to process dbsqlfuzz cases in fuzzcheck and add an initial set of interesting dbsqlfuzz cases.\n\nFossilOrigin-Name: fb9074ff450a67feaa62ca61d19154de26d5c8a8d147409ee6d1fbd667b2914f",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "Makefile.msc||Makefile.msc",
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "589:   $(TOP)/test/fuzzdata4.db \\",
          "590:   $(TOP)/test/fuzzdata5.db \\",
          "591:   $(TOP)/test/fuzzdata6.db \\",
          "594: # Standard options to testfixture",
          "595: #",
          "",
          "[Removed Lines]",
          "592:   $(TOP)/test/fuzzdata7.db",
          "",
          "[Added Lines]",
          "592:   $(TOP)/test/fuzzdata7.db \\",
          "593:   $(TOP)/test/fuzzdata8.db",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "612: FUZZCHECK_OPT = -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_MEMSYS5 -DSQLITE_OSS_FUZZ",
          "613: FUZZCHECK_OPT += -DSQLITE_MAX_MEMORY=50000000",
          "614: FUZZCHECK_OPT += -DSQLITE_PRINTF_PRECISION_LIMIT=1000",
          "615: FUZZCHECK_SRC = $(TOP)/test/fuzzcheck.c $(TOP)/test/ossfuzz.c",
          "616: DBFUZZ_OPT =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "616: FUZZCHECK_OPT += -DSQLITE_ENABLE_DESERIALIZE",
          "617: FUZZCHECK_OPT += -DSQLITE_ENABLE_FTS4",
          "618: #FUZZCHECK_OPT += -DSQLITE_ENABLE_FTS5",
          "619: FUZZCHECK_OPT += -DSQLITE_ENABLE_RTREE",
          "620: FUZZCHECK_OPT += -DSQLITE_ENABLE_GEOPOLY",
          "621: FUZZCHECK_OPT += -DSQLITE_ENABLE_DBSTAT_VTAB",
          "",
          "---------------"
        ],
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1626:   $(TOP)\\test\\fuzzdata4.db \\",
          "1627:   $(TOP)\\test\\fuzzdata5.db \\",
          "1628:   $(TOP)\\test\\fuzzdata6.db \\",
          "1630: # <</mark>>",
          "1632: # Additional compiler options for the shell.  These are only effective",
          "",
          "[Removed Lines]",
          "1629:   $(TOP)\\test\\fuzzdata7.db",
          "",
          "[Added Lines]",
          "1629:   $(TOP)\\test\\fuzzdata7.db \\",
          "1630:   $(TOP)\\test\\fuzzdata8.db",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1644: #",
          "1645: MPTESTER_COMPILE_OPTS = -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_FTS5",
          "1646: FUZZERSHELL_COMPILE_OPTS = -DSQLITE_ENABLE_JSON1",
          "1648: FUZZCHECK_SRC = $(TOP)\\test\\fuzzcheck.c $(TOP)\\test\\ossfuzz.c",
          "1649: OSSSHELL_SRC = $(TOP)\\test\\ossshell.c $(TOP)\\test\\ossfuzz.c",
          "1650: DBFUZZ_COMPILE_OPTS = -DSQLITE_THREADSAFE=0 -DSQLITE_OMIT_LOAD_EXTENSION",
          "",
          "[Removed Lines]",
          "1647: FUZZCHECK_COMPILE_OPTS = -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_MEMSYS5 -DSQLITE_OSS_FUZZ -DSQLITE_MAX_MEMORY=50000000 -DSQLITE_PRINTF_PRECISION_LIMIT=1000",
          "",
          "[Added Lines]",
          "1648: FUZZCHECK_OPTS = -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_MEMSYS5 -DSQLITE_OSS_FUZZ -DSQLITE_MAX_MEMORY=50000000 -DSQLITE_PRINTF_PRECISION_LIMIT=1000",
          "1649: FUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_DESERIALIZE",
          "1650: FUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_FTS4",
          "1651: FUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_RTREE",
          "1652: FUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_GEOPOLY",
          "1653: FUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_DBSTAT_VTAB",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1731:  $(LTLINK) $(NO_WARN) $(DBFUZZ_COMPILE_OPTS) $(TOP)\\test\\dbfuzz.c $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)",
          "1733: fuzzcheck.exe: $(FUZZCHECK_SRC) $(SQLITE3C) $(SQLITE3H)",
          "1736: ossshell.exe: $(OSSSHELL_SRC) $(SQLITE3C) $(SQLITE3H)",
          "1739: sessionfuzz.exe: zlib $(TOP)\\test\\sessionfuzz.c $(SQLITE3C) $(SQLITE3H)",
          "1740:  $(LTLINK) $(NO_WARN) -I$(ZLIBINCDIR) $(TOP)\\test\\sessionfuzz.c /link $(LDFLAGS) $(LTLINKOPTS) /LIBPATH:$(ZLIBLIBDIR) $(ZLIBLIB)",
          "",
          "[Removed Lines]",
          "1734:  $(LTLINK) $(NO_WARN) $(FUZZCHECK_COMPILE_OPTS) $(FUZZCHECK_SRC) $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)",
          "1737:  $(LTLINK) $(NO_WARN) $(FUZZCHECK_COMPILE_OPTS) $(OSSSHELL_SRC) $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)",
          "",
          "[Added Lines]",
          "1741:  $(LTLINK) $(NO_WARN) $(FUZZCHECK_OPTS) $(FUZZCHECK_SRC) $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)",
          "1744:  $(LTLINK) $(NO_WARN) $(FUZZCHECK_OPTS) $(OSSSHELL_SRC) $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)",
          "",
          "---------------"
        ],
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "510:   $(TOP)/test/fuzzdata4.db \\",
          "511:   $(TOP)/test/fuzzdata5.db \\",
          "512:   $(TOP)/test/fuzzdata6.db \\",
          "515: # Standard options to testfixture",
          "516: #",
          "",
          "[Removed Lines]",
          "513:   $(TOP)/test/fuzzdata7.db",
          "",
          "[Added Lines]",
          "513:   $(TOP)/test/fuzzdata7.db \\",
          "514:   $(TOP)/test/fuzzdata8.db",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "531: FUZZCHECK_OPT = -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_MEMSYS5",
          "532: FUZZCHECK_OPT += -DSQLITE_MAX_MEMORY=50000000",
          "533: FUZZCHECK_OPT += -DSQLITE_PRINTF_PRECISION_LIMIT=1000",
          "534: DBFUZZ_OPT =",
          "535: KV_OPT = -DSQLITE_THREADSAFE=0 -DSQLITE_DIRECT_OVERFLOW_READ",
          "536: ST_OPT = -DSQLITE_THREADSAFE=0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "535: FUZZCHECK_OPT += -DSQLITE_ENABLE_DESERIALIZE",
          "536: FUZZCHECK_OPT += -DSQLITE_ENABLE_FTS4",
          "537: FUZZCHECK_OPT += -DSQLITE_ENABLE_RTREE",
          "538: FUZZCHECK_OPT += -DSQLITE_ENABLE_GEOPOLY",
          "539: FUZZCHECK_OPT += -DSQLITE_ENABLE_DBSTAT_VTAB",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d0d5689371577b2861d4a9464443d055f3256f3f51d89e0388233a4cbe2601ee",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: #include <string.h>",
          "70: #include <stdarg.h>",
          "71: #include <ctype.h>",
          "72: #include \"sqlite3.h\"",
          "73: #define ISSPACE(X) isspace((unsigned char)(X))",
          "74: #define ISDIGIT(X) isdigit((unsigned char)(X))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72: #include <assert.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "419:   return t;",
          "420: }",
          "424: static int inmemClose(sqlite3_file *pFile){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "430: typedef struct FuzzCtx {",
          "439: } FuzzCtx;",
          "442: static int eVerbosity = 0;",
          "445: static int bVdbeDebug = 0;",
          "451: static unsigned int mxProgressCb = 2000;",
          "454: static int lengthLimit = 1000000;",
          "457: static int vdbeOpLimit = 25000;",
          "460: static sqlite3_int64 maxDbSize = 104857600;",
          "467: static unsigned int hexToInt(unsigned int h){",
          "468: #ifdef SQLITE_EBCDIC",
          "470: #else",
          "472: #endif",
          "473:   return h & 0xf;",
          "474: }",
          "483: static int isOffset(",
          "488: ){",
          "489:   int i;",
          "490:   unsigned int k = 0;",
          "491:   unsigned char c;",
          "492:   for(i=1; i<nIn && (c = zIn[i])!=']'; i++){",
          "493:     if( !isxdigit(c) ) return 0;",
          "494:     k = k*16 + hexToInt(c);",
          "495:   }",
          "496:   if( i==nIn ) return 0;",
          "499:   return 1;",
          "500: }",
          "513: static int decodeDatabase(",
          "518: ){",
          "526:   unsigned char b = 0;",
          "527:   if( nIn<4 ) return -1;",
          "528:   n = (unsigned int)nIn;",
          "529:   a = sqlite3_malloc( nAlloc );",
          "530:   if( a==0 ){",
          "531:     fprintf(stderr, \"Out of memory!\\n\");",
          "532:     exit(1);",
          "533:   }",
          "534:   memset(a, 0, nAlloc);",
          "535:   for(i=k=0; i<n; i++){",
          "536:     char c = zIn[i];",
          "537:     if( isxdigit(c) ){",
          "538:       k++;",
          "539:       if( k & 1 ){",
          "540:         b = hexToInt(c)*16;",
          "541:       }else{",
          "542:         b += hexToInt(c);",
          "543:         j = k/2 - 1;",
          "544:         if( j>=nAlloc ){",
          "545:           sqlite3_uint64 newSize;",
          "546:           if( nAlloc==MX_FILE_SZ || j>=MX_FILE_SZ ){",
          "547:             if( eVerbosity ){",
          "548:               fprintf(stderr, \"Input database too big: max %d bytes\\n\",",
          "549:                       MX_FILE_SZ);",
          "550:             }",
          "551:             sqlite3_free(a);",
          "552:             return -1;",
          "553:           }",
          "554:           newSize = nAlloc*2;",
          "555:           if( newSize<=j ){",
          "556:             newSize = (j+4096)&~4095;",
          "557:           }",
          "558:           if( newSize>MX_FILE_SZ ){",
          "559:             if( j>=MX_FILE_SZ ){",
          "560:               sqlite3_free(a);",
          "561:               return -1;",
          "562:             }",
          "563:             newSize = MX_FILE_SZ;",
          "564:           }",
          "565:           a = sqlite3_realloc( a, newSize );",
          "566:           if( a==0 ){",
          "567:             fprintf(stderr, \"Out of memory!\\n\");",
          "568:             exit(1);",
          "569:           }",
          "570:           assert( newSize > nAlloc );",
          "571:           memset(a+nAlloc, 0, newSize - nAlloc);",
          "572:           nAlloc = newSize;",
          "573:         }",
          "574:         if( j>=(unsigned)mx ){",
          "575:           mx = (j + 4095)&~4095;",
          "576:           if( mx>MX_FILE_SZ ) mx = MX_FILE_SZ;",
          "577:         }",
          "578:         assert( j<nAlloc );",
          "579:         a[j] = b;",
          "580:       }",
          "581:     }else if( zIn[i]=='[' && i<n-3 && isOffset(zIn+i, nIn-i, &k, &i) ){",
          "582:       continue;",
          "583:    }else if( zIn[i]=='\\n' && i<n-4 && memcmp(zIn+i,\"\\n--\\n\",4)==0 ){",
          "584:       i += 4;",
          "585:       break;",
          "586:     }",
          "587:   }",
          "590:   return i;",
          "591: }",
          "599: static int progress_handler(void *pClientData) {",
          "600:   FuzzCtx *p = (FuzzCtx*)pClientData;",
          "601:   sqlite3_int64 iNow = timeOfDay();",
          "602:   int rc = iNow>=p->iCutoffTime;",
          "603:   sqlite3_int64 iDiff = iNow - p->iLastCb;",
          "604:   if( iDiff > p->mxInterval ) p->mxInterval = iDiff;",
          "605:   p->nCb++;",
          "606:   if( rc==0 && p->mxCb>0 && p->mxCb<=p->nCb ) rc = 1;",
          "607:   if( rc && !p->timeoutHit && eVerbosity ){",
          "608:     printf(\"Timeout on progress callback %d\\n\", p->nCb);",
          "609:     fflush(stdout);",
          "610:     p->timeoutHit = 1;",
          "611:   }",
          "612:   return rc;",
          "613: }",
          "622: static int block_troublesome_sql(",
          "623:   void *Notused,",
          "624:   int eCode,",
          "625:   const char *zArg1,",
          "626:   const char *zArg2,",
          "627:   const char *zArg3,",
          "628:   const char *zArg4",
          "629: ){",
          "630:   (void)Notused;",
          "631:   (void)zArg2;",
          "632:   (void)zArg3;",
          "633:   (void)zArg4;",
          "634:   if( eCode==SQLITE_PRAGMA ){",
          "635:     if( sqlite3_strnicmp(\"vdbe_\", zArg1, 5)==0",
          "636:      || sqlite3_stricmp(\"parser_trace\", zArg1)==0",
          "637:      || sqlite3_stricmp(\"temp_store_directory\", zArg1)==0",
          "638:     ){",
          "639:       return SQLITE_DENY;",
          "640:     }",
          "641:   }else if( (eCode==SQLITE_ATTACH || eCode==SQLITE_DETACH)",
          "642:             && zArg1 && zArg1[0] ){",
          "643:     return SQLITE_DENY;",
          "644:   }",
          "645:   return SQLITE_OK;",
          "646: }",
          "651: static int runDbSql(sqlite3 *db, const char *zSql){",
          "652:   int rc;",
          "653:   sqlite3_stmt *pStmt;",
          "654:   while( isspace(zSql[0]) ) zSql++;",
          "655:   if( zSql[0]==0 ) return SQLITE_OK;",
          "656:   if( eVerbosity>=3 ){",
          "657:     printf(\"RUNNING-SQL: [%s]\\n\", zSql);",
          "658:     fflush(stdout);",
          "659:   }",
          "660:   rc = sqlite3_prepare_v2(db, zSql, -1, &pStmt, 0);",
          "661:   if( rc==SQLITE_OK ){",
          "662:     while( (rc = sqlite3_step(pStmt))==SQLITE_ROW ){",
          "663:       if( eVerbosity>=4 ){",
          "664:         int j;",
          "665:         for(j=0; j<sqlite3_column_count(pStmt); j++){",
          "666:           if( j ) printf(\",\");",
          "667:           switch( sqlite3_column_type(pStmt, j) ){",
          "668:             case SQLITE_NULL: {",
          "669:               printf(\"NULL\");",
          "670:               break;",
          "671:             }",
          "672:             case SQLITE_INTEGER:",
          "673:             case SQLITE_FLOAT: {",
          "674:               printf(\"%s\", sqlite3_column_text(pStmt, j));",
          "675:               break;",
          "676:             }",
          "677:             case SQLITE_BLOB: {",
          "678:               int n = sqlite3_column_bytes(pStmt, j);",
          "679:               int i;",
          "680:               const unsigned char *a;",
          "681:               a = (const unsigned char*)sqlite3_column_blob(pStmt, j);",
          "682:               printf(\"x'\");",
          "683:               for(i=0; i<n; i++){",
          "684:                 printf(\"%02x\", a[i]);",
          "685:               }",
          "686:               printf(\"'\");",
          "687:               break;",
          "688:             }",
          "689:             case SQLITE_TEXT: {",
          "690:               int n = sqlite3_column_bytes(pStmt, j);",
          "691:               int i;",
          "692:               const unsigned char *a;",
          "693:               a = (const unsigned char*)sqlite3_column_blob(pStmt, j);",
          "694:               printf(\"'\");",
          "695:               for(i=0; i<n; i++){",
          "696:                 if( a[i]=='\\'' ){",
          "697:                   printf(\"''\");",
          "698:                 }else{",
          "699:                   putchar(a[i]);",
          "700:                 }",
          "701:               }",
          "702:               printf(\"'\");",
          "703:               break;",
          "704:             }",
          "707:         printf(\"\\n\");",
          "708:         fflush(stdout);",
          "711:     if( rc!=SQLITE_DONE && eVerbosity>=3 ){",
          "712:       printf(\"SQL-ERROR: (%d) %s\\n\", rc, sqlite3_errmsg(db));",
          "713:       fflush(stdout);",
          "714:     }",
          "715:   }else if( eVerbosity>=3 ){",
          "716:     printf(\"SQL-ERROR (%d): %s\\n\", rc, sqlite3_errmsg(db));",
          "717:     fflush(stdout);",
          "719:   return sqlite3_finalize(pStmt);",
          "720: }",
          "723: int runCombinedDbSqlInput(const uint8_t *aData, size_t nByte){",
          "734:   if( nByte<10 ) return 0;",
          "735:   if( sqlite3_initialize() ) return 0;",
          "736:   if( sqlite3_memory_used()!=0 ){",
          "737:     int nAlloc = 0;",
          "738:     int nNotUsed = 0;",
          "739:     sqlite3_status(SQLITE_STATUS_MALLOC_COUNT, &nAlloc, &nNotUsed, 0);",
          "740:     fprintf(stderr,\"Memory leak in mutator: %lld bytes in %d allocations\\n\",",
          "741:             sqlite3_memory_used(), nAlloc);",
          "742:     exit(1);",
          "743:   }",
          "744:   memset(&cx, 0, sizeof(cx));",
          "745:   iSql = decodeDatabase((unsigned char*)aData, (int)nByte, &aDb, &nDb);",
          "746:   if( iSql<0 ) return 0;",
          "747:   nSql = nByte - iSql;",
          "748:   if( eVerbosity>=2 ){",
          "749:     printf(",
          "750:       \"****** %d-byte input, %d-byte database, %d-byte script \"",
          "751:       \"******\\n\", (int)nByte, nDb, nSql);",
          "752:     fflush(stdout);",
          "753:   }",
          "754:   rc = sqlite3_open(0, &cx.db);",
          "755:   if( rc ) return 1;",
          "756:   if( bVdbeDebug ){",
          "757:     sqlite3_exec(cx.db, \"PRAGMA vdbe_debug=ON\", 0, 0, 0);",
          "758:   }",
          "765:   cx.iLastCb = timeOfDay();",
          "767:   cx.mxCb = mxProgressCb;",
          "768: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK",
          "769:   sqlite3_progress_handler(cx.db, 10, progress_handler, (void*)&cx);",
          "770: #endif",
          "774:   if( vdbeOpLimit>0 ){",
          "775:     sqlite3_limit(cx.db, SQLITE_LIMIT_VDBE_OP, vdbeOpLimit);",
          "776:   }",
          "777:   if( lengthLimit>0 ){",
          "778:     sqlite3_limit(cx.db, SQLITE_LIMIT_LENGTH, lengthLimit);",
          "779:   }",
          "781:   if( nDb>=20 && aDb[18]==2 && aDb[19]==2 ){",
          "782:     aDb[18] = aDb[19] = 1;",
          "783:   }",
          "784:   rc = sqlite3_deserialize(cx.db, \"main\", aDb, nDb, nDb,",
          "785:           SQLITE_DESERIALIZE_RESIZEABLE |",
          "786:           SQLITE_DESERIALIZE_FREEONCLOSE);",
          "787:   if( rc ){",
          "788:     fprintf(stderr, \"sqlite3_deserialize() failed with %d\\n\", rc);",
          "789:     goto testrun_finished;",
          "790:   }",
          "791:   if( maxDbSize>0 ){",
          "792:     sqlite3_int64 x = maxDbSize;",
          "793:     sqlite3_file_control(cx.db, \"main\", SQLITE_FCNTL_SIZE_LIMIT, &x);",
          "794:   }",
          "798:   sqlite3_set_authorizer(cx.db, block_troublesome_sql, 0);",
          "801:   sqlite3_randomness(0,0);",
          "803:   zSql = sqlite3_malloc( nSql + 1 );",
          "804:   if( zSql==0 ){",
          "805:     fprintf(stderr, \"Out of memory!\\n\");",
          "806:   }else{",
          "807:     memcpy(zSql, aData+iSql, nSql);",
          "808:     zSql[nSql] = 0;",
          "809:     for(i=j=0; zSql[i]; i++){",
          "810:       if( zSql[i]==';' ){",
          "811:         char cSaved = zSql[i+1];",
          "812:         zSql[i+1] = 0;",
          "813:         if( sqlite3_complete(zSql+j) ){",
          "814:           rc = runDbSql(cx.db, zSql+j);",
          "815:           j = i+1;",
          "816:         }",
          "817:         zSql[i+1] = cSaved;",
          "818:         if( rc==SQLITE_INTERRUPT || progress_handler(&cx) ){",
          "819:           goto testrun_finished;",
          "820:         }",
          "821:       }",
          "822:     }",
          "823:     if( j<i ){",
          "824:       runDbSql(cx.db, zSql+j);",
          "825:     }",
          "826:   }",
          "827: testrun_finished:",
          "828:   sqlite3_free(zSql);",
          "829:   rc = sqlite3_close(cx.db);",
          "830:   if( rc!=SQLITE_OK ){",
          "831:     fprintf(stdout, \"sqlite3_close() returns %d\\n\", rc);",
          "832:   }",
          "833:   if( eVerbosity ){",
          "834:     fprintf(stdout, \"Peak memory usages: %f MB\\n\",",
          "835:        sqlite3_memory_highwater(1) / 1000000.0);",
          "836:   }",
          "837:   if( sqlite3_memory_used()!=0 ){",
          "838:     int nAlloc = 0;",
          "839:     int nNotUsed = 0;",
          "840:     sqlite3_status(SQLITE_STATUS_MALLOC_COUNT, &nAlloc, &nNotUsed, 0);",
          "841:     fprintf(stderr,\"Memory leak: %lld bytes in %d allocations\\n\",",
          "842:             sqlite3_memory_used(), nAlloc);",
          "843:     exit(1);",
          "844:   }",
          "845:   return 0;",
          "846: }",
          "856: static int isDbSql(unsigned char *a, int n){",
          "857:   if( n>4 && memcmp(a,\"\\n--\\n\",4)==0 ) return 1;",
          "858:   while( n>0 && isspace(a[0]) ){ a++; n--; }",
          "859:   if( n>8 && memcmp(a,\"53514c69\",8)==0 ) return 1;",
          "860:   return 0;",
          "861: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "951:       if( strcmp(z,\"quiet\")==0 || strcmp(z,\"q\")==0 ){",
          "952:         quietFlag = 1;",
          "953:         verboseFlag = 0;",
          "954:       }else",
          "955:       if( strcmp(z,\"rebuild\")==0 ){",
          "956:         rebuildFlag = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1396:         eVerbosity = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "976:       if( strcmp(z,\"verbose\")==0 || strcmp(z,\"v\")==0 ){",
          "977:         quietFlag = 0;",
          "978:         verboseFlag++;",
          "979:         if( verboseFlag>1 ) runFlags |= SQL_TRACE;",
          "980:       }else",
          "981:       {",
          "982:         fatalError(\"unknown option: %s\", argv[i]);",
          "983:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1422:         eVerbosity++;",
          "1425:       if( strcmp(z,\"version\")==0 ){",
          "1426:         int ii;",
          "1427:         const char *z;",
          "1428:         printf(\"SQLite %s %s\\n\", sqlite3_libversion(), sqlite3_sourceid());",
          "1429:         for(ii=0; (z = sqlite3_compileoption_get(ii))!=0; ii++){",
          "1430:           printf(\"%s\\n\", z);",
          "1431:         }",
          "1432:         return 0;",
          "1433:       }else",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1231:     if( !verboseFlag && !quietFlag ) printf(\"%s:\", zDbName);",
          "1232:     for(pSql=g.pFirstSql; pSql; pSql=pSql->pNext){",
          "1233:       for(pDb=g.pFirstDb; pDb; pDb=pDb->pNext){",
          "1234:         int openFlags;",
          "1235:         const char *zVfs = \"inmem\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1686:       if( isDbSql(pSql->a, pSql->sz) ){",
          "1687:         sqlite3_snprintf(sizeof(g.zTestName), g.zTestName, \"sqlid=%d\",pSql->id);",
          "1688:         if( verboseFlag ){",
          "1689:           printf(\"%s\\n\", g.zTestName);",
          "1690:           fflush(stdout);",
          "1691:         }else if( !quietFlag ){",
          "1692:           static int prevAmt = -1;",
          "1693:           int idx = pSql->seq;",
          "1694:           int amt = idx*10/(g.nSql);",
          "1695:           if( amt!=prevAmt ){",
          "1696:             printf(\" %d%%\", amt*10);",
          "1697:             fflush(stdout);",
          "1698:             prevAmt = amt;",
          "1699:           }",
          "1700:         }",
          "1701:         runCombinedDbSqlInput(pSql->a, pSql->sz);",
          "1702:         nTest++;",
          "1703:         g.zTestName[0] = 0;",
          "1704:         continue;",
          "1705:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4c8056079ffdafae82b7f42fe4917af2f583cf51",
      "candidate_info": {
        "commit_hash": "4c8056079ffdafae82b7f42fe4917af2f583cf51",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4c8056079ffdafae82b7f42fe4917af2f583cf51",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbemem.c"
        ],
        "message": "Remove a harmless unused variable.\n\nFossilOrigin-Name: 28091a48aa6994f8d7c142b5851bcd6b4e9a93a7bbef6c927a6182d24f3245b4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8e100e6c35c30e0d7e4014b9435f81f9f61ddab2386dfe9a4218d8190a6da3be",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "460: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "461: int sqlite3VdbeMemAggValue(Mem *pAccum, Mem *pOut, FuncDef *pFunc){",
          "462:   sqlite3_context ctx;",
          "464:   assert( pFunc!=0 );",
          "465:   assert( pFunc->xValue!=0 );",
          "466:   assert( (pAccum->flags & MEM_Null)!=0 || pFunc==pAccum->u.pDef );",
          "467:   assert( pAccum->db==0 || sqlite3_mutex_held(pAccum->db->mutex) );",
          "468:   memset(&ctx, 0, sizeof(ctx));",
          "472:   sqlite3VdbeMemSetNull(pOut);",
          "473:   ctx.pOut = pOut;",
          "474:   ctx.pMem = pAccum;",
          "",
          "[Removed Lines]",
          "463:   Mem t;",
          "469:   memset(&t, 0, sizeof(t));",
          "470:   t.flags = MEM_Null;",
          "471:   t.db = pAccum->db;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d4a4a36171fdc93a9fc117af2f957c86624b50da",
      "candidate_info": {
        "commit_hash": "d4a4a36171fdc93a9fc117af2f957c86624b50da",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d4a4a36171fdc93a9fc117af2f957c86624b50da",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/index6.test"
        ],
        "message": "Do not use a partial index as a table scan in an IN operator. Fix for ticket [1d958d90596593a77420e59].\n\nFossilOrigin-Name: 15bc915dd7ae25bfdfbe357c3792db3639799e4d121c6b5b24297af2d6d7129e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/index6.test||test/index6.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a92c398fc5df142ff1459c1be4a6832f2219bc7fabe5789535be3bbd41a4269b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2445:           if( pIdx->nColumn<nExpr ) continue;",
          "2448:           testcase( pIdx->nColumn==BMS-2 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2446:           if( pIdx->pPartIdxWhere!=0 ) continue;",
          "",
          "---------------"
        ],
        "test/index6.test||test/index6.test": [
          "File: test/index6.test -> test/index6.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "389: do_execsql_test index6-11.2 {",
          "390:   EXPLAIN QUERY PLAN SELECT a FROM t11 WHERE b<>99 AND c<>98;",
          "391: } {/USING INDEX t11x/}",
          "394: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "393: # 2018-12-08",
          "394: # Ticket https://www.sqlite.org/src/info/1d958d90596593a7",
          "395: # NOT IN operator fails when using a partial index.",
          "396: #",
          "397: do_execsql_test index6-12.1 {",
          "398:   DROP TABLE IF EXISTS t1;",
          "399:   DROP TABLE IF EXISTS t2;",
          "400:   CREATE TABLE t1(a,b);",
          "401:   INSERT INTO t1 VALUES(1,1);",
          "402:   INSERT INTO t1 VALUES(2,2);",
          "403:   CREATE TABLE t2(x);",
          "404:   INSERT INTO t2 VALUES(1);",
          "405:   INSERT INTO t2 VALUES(2);",
          "406:   SELECT 'one', * FROM t2 WHERE x NOT IN (SELECT a FROM t1);",
          "407:   CREATE INDEX t1a ON t1(a) WHERE b=1;",
          "408:   SELECT 'two', * FROM t2 WHERE x NOT IN (SELECT a FROM t1);",
          "409: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "19efd0db4133f2d0f9985856ae9b4b5572abf733",
      "candidate_info": {
        "commit_hash": "19efd0db4133f2d0f9985856ae9b4b5572abf733",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/19efd0db4133f2d0f9985856ae9b4b5572abf733",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/callback.c",
          "src/hash.c",
          "src/hash.h",
          "src/prepare.c",
          "src/sqliteInt.h"
        ],
        "message": "Simplifications to the sqlite3_normalized_sql() implementation.\n\nFossilOrigin-Name: 94ea6379178e3ff6a0d1d5819ca4ac558bdadb1ca8a3637c797079db7dc0cd61",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/callback.c||src/callback.c",
          "src/hash.c||src/hash.c",
          "src/hash.h||src/hash.h",
          "src/prepare.c||src/prepare.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f44bc7a8b3fac82aa5598e9bdaf65ea4dd3c331cf90c1d5ba26ff1698e92c230",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/callback.c||src/callback.c": [
          "File: src/callback.c -> src/callback.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "289: ){",
          "",
          "[Removed Lines]",
          "286: static FuncDef *functionSearch(",
          "",
          "[Added Lines]",
          "286: FuncDef *sqlite3FunctionSearch(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "295:   }",
          "296:   return 0;",
          "297: }",
          "",
          "[Removed Lines]",
          "298: #ifdef SQLITE_ENABLE_NORMALIZE",
          "299: FuncDef *sqlite3FunctionSearchN(",
          "303: ){",
          "304:   FuncDef *p;",
          "305:   for(p=sqlite3BuiltinFunctions.a[h]; p; p=p->u.pHash){",
          "306:     if( sqlite3StrNICmp(p->zName, zFunc, nFunc)==0 ){",
          "307:       return p;",
          "308:     }",
          "309:   }",
          "310:   return 0;",
          "311: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "325:     int nName = sqlite3Strlen30(zName);",
          "326:     int h = SQLITE_FUNC_HASH(zName[0], nName);",
          "327:     assert( zName[0]>='a' && zName[0]<='z' );",
          "329:     if( pOther ){",
          "330:       assert( pOther!=&aDef[i] && pOther->pNext!=&aDef[i] );",
          "331:       aDef[i].pNext = pOther->pNext;",
          "",
          "[Removed Lines]",
          "328:     pOther = functionSearch(h, zName);",
          "",
          "[Added Lines]",
          "313:     pOther = sqlite3FunctionSearch(h, zName);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "403:   if( !createFlag && (pBest==0 || (db->mDbFlags & DBFLAG_PreferBuiltin)!=0) ){",
          "404:     bestScore = 0;",
          "405:     h = SQLITE_FUNC_HASH(sqlite3UpperToLower[(u8)zName[0]], nName);",
          "407:     while( p ){",
          "408:       int score = matchQuality(p, nArg, enc);",
          "409:       if( score>bestScore ){",
          "",
          "[Removed Lines]",
          "406:     p = functionSearch(h, zName);",
          "",
          "[Added Lines]",
          "391:     p = sqlite3FunctionSearch(h, zName);",
          "",
          "---------------"
        ],
        "src/hash.c||src/hash.c": [
          "File: src/hash.c -> src/hash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:   }",
          "65:   return h;",
          "66: }",
          "",
          "[Removed Lines]",
          "67: #ifdef SQLITE_ENABLE_NORMALIZE",
          "68: static unsigned int strHashN(const char *z, int n){",
          "69:   unsigned int h = 0;",
          "70:   int i;",
          "71:   for(i=0; i<n; i++){",
          "75:     h += sqlite3UpperToLower[(unsigned char)z[i]];",
          "76:     h *= 0x9e3779b1;",
          "77:   }",
          "78:   return h;",
          "79: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189:   }",
          "190:   return &nullElement;",
          "191: }",
          "",
          "[Removed Lines]",
          "192: #ifdef SQLITE_ENABLE_NORMALIZE",
          "193: static HashElem *findElementWithHashN(",
          "198: ){",
          "202:   static HashElem nullElement = { 0, 0, 0, 0 };",
          "205:     struct _ht *pEntry;",
          "206:     h = strHashN(pKey, nKey) % pH->htsize;",
          "207:     pEntry = &pH->ht[h];",
          "208:     elem = pEntry->chain;",
          "209:     count = pEntry->count;",
          "210:   }else{",
          "211:     h = 0;",
          "212:     elem = pH->first;",
          "213:     count = pH->count;",
          "214:   }",
          "215:   if( pHash ) *pHash = h;",
          "216:   while( count-- ){",
          "217:     assert( elem!=0 );",
          "218:     if( sqlite3StrNICmp(elem->pKey,pKey,nKey)==0 ){",
          "219:       return elem;",
          "220:     }",
          "221:     elem = elem->next;",
          "222:   }",
          "223:   return &nullElement;",
          "224: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "267:   assert( pKey!=0 );",
          "268:   return findElementWithHash(pH, pKey, 0)->data;",
          "269: }",
          "",
          "[Removed Lines]",
          "270: #ifdef SQLITE_ENABLE_NORMALIZE",
          "271: void *sqlite3HashFindN(const Hash *pH, const char *pKey, int nKey){",
          "272:   assert( pH!=0 );",
          "273:   assert( pKey!=0 );",
          "274:   assert( nKey>=0 );",
          "275:   return findElementWithHashN(pH, pKey, nKey, 0)->data;",
          "276: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/hash.h||src/hash.h": [
          "File: src/hash.h -> src/hash.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: void sqlite3HashInit(Hash*);",
          "69: void *sqlite3HashInsert(Hash*, const char *pKey, void *pData);",
          "70: void *sqlite3HashFind(const Hash*, const char *pKey);",
          "74: void sqlite3HashClear(Hash*);",
          "",
          "[Removed Lines]",
          "71: #ifdef SQLITE_ENABLE_NORMALIZE",
          "72: void *sqlite3HashFindN(const Hash *pH, const char *pKey, int nKey);",
          "73: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "734:   }",
          "735:   if( nToken>0 ){",
          "736:     int hash = SQLITE_FUNC_HASH(sqlite3UpperToLower[(u8)zToken[0]], nToken);",
          "738:   }",
          "739:   assert( db!=0 );",
          "740:   sqlite3_mutex_enter(db->mutex);",
          "741:   sqlite3BtreeEnterAll(db);",
          "742:   for(i=0; i<db->nDb; i++){",
          "743:     pHash = &db->aFunc;",
          "745:       bFound = 1;",
          "746:       break;",
          "747:     }",
          "748:     pSchema = db->aDb[i].pSchema;",
          "749:     if( pSchema==0 ) continue;",
          "750:     pHash = &pSchema->tblHash;",
          "752:       bFound = 1;",
          "753:       break;",
          "754:     }",
          "",
          "[Removed Lines]",
          "732:   if( sqlite3IsRowidN(zToken, nToken) ){",
          "733:     return 1;",
          "737:     if( sqlite3FunctionSearchN(hash, zToken, nToken) ) return 1;",
          "744:     if( sqlite3HashFindN(pHash, zToken, nToken) ){",
          "751:     if( sqlite3HashFindN(pHash, zToken, nToken) ){",
          "",
          "[Added Lines]",
          "734:   if( nToken<sizeof(zSpace) ){",
          "735:     memcpy(zSpace, zToken, nToken);",
          "736:     zSpace[nToken] = 0;",
          "737:     zId = zSpace;",
          "738:   }else{",
          "739:     zId = sqlite3DbStrNDup(db, zToken, nToken);",
          "740:     if( zId==0 ) return 0;",
          "741:   }",
          "742:   if( sqlite3IsRowid(zId) ){",
          "743:     bFound = 1;",
          "744:     goto done;",
          "748:     if( sqlite3FunctionSearch(hash, zId) ){",
          "749:       bFound = 1;",
          "750:       goto done;",
          "751:     }",
          "758:     if( sqlite3HashFind(pHash, zId) ){",
          "765:     if( sqlite3HashFind(pHash, zId) ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "770:           goto done;",
          "771:         }",
          "772:       }",
          "774:         bFound = 1;",
          "775:         goto done;",
          "776:       }",
          "",
          "[Removed Lines]",
          "773:       if( pHash && sqlite3HashFindN(pHash, zToken, nToken) ){",
          "",
          "[Added Lines]",
          "787:       if( pHash && sqlite3HashFind(pHash, zId) ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "779: done:",
          "780:   sqlite3BtreeLeaveAll(db);",
          "781:   sqlite3_mutex_leave(db->mutex);",
          "782:   return bFound;",
          "783: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "796:   if( zId!=zSpace ) sqlite3DbFree(db, zId);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4056: SrcList *sqlite3SrcListDup(sqlite3*,SrcList*,int);",
          "4057: IdList *sqlite3IdListDup(sqlite3*,IdList*);",
          "4058: Select *sqlite3SelectDup(sqlite3*,Select*,int);",
          "4062: void sqlite3InsertBuiltinFuncs(FuncDef*,int);",
          "4063: FuncDef *sqlite3FindFunction(sqlite3*,const char*,int,u8,u8);",
          "4064: void sqlite3RegisterBuiltinFunctions(void);",
          "",
          "[Removed Lines]",
          "4059: #ifdef SQLITE_ENABLE_NORMALIZE",
          "4060: FuncDef *sqlite3FunctionSearchN(int,const char*,int);",
          "4061: #endif",
          "",
          "[Added Lines]",
          "4059: FuncDef *sqlite3FunctionSearch(int,const char*);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "35808435953097822ab86df84e02170e3b1839de",
      "candidate_info": {
        "commit_hash": "35808435953097822ab86df84e02170e3b1839de",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/35808435953097822ab86df84e02170e3b1839de",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "test/bestindex1.test"
        ],
        "message": "Fix a fairly obscure problem causing the planner to sometimes choose sub-optimal plans for a query with a single virtual table in the FROM clause, and at least one IN(...) constraint in the WHERE clause.\n\nFossilOrigin-Name: f5752517f590b37bfc0267650f5800320e22a8ecaba34aa6893281ce8d268026",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "test/bestindex1.test||test/bestindex1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 040d5d515bcb37bea05e0d156dbaf066c68052ac574f1b0b2cb118d473a353e0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3335:   rc = whereLoopAddVirtualOne(pBuilder, mPrereq, ALLBITS, 0, p, mNoOmit, &bIn);",
          "3345:     Bitmask mPrev = 0;",
          "",
          "[Removed Lines]",
          "3342:   if( rc==SQLITE_OK && (mBest = (pNew->prereq & ~mPrereq))!=0 ){",
          "",
          "[Added Lines]",
          "3342:   if( rc==SQLITE_OK && ((mBest = (pNew->prereq & ~mPrereq))!=0 || bIn) ){",
          "",
          "---------------"
        ],
        "test/bestindex1.test||test/bestindex1.test": [
          "File: test/bestindex1.test -> test/bestindex1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "266:   4 0 ValueB 4 0 ValueB",
          "267: }",
          "270: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "269: #-------------------------------------------------------------------------",
          "270: # If there is an IN(..) condition in the WHERE clause of a query on a",
          "271: # virtual table, the xBestIndex method is first invoked with the IN(...)",
          "272: # represented by a \"usable\" SQLITE_INDEX_CONSTRAINT_EQ constraint. If",
          "273: # the virtual table elects to use the IN(...) constraint, then the",
          "274: # xBestIndex method is invoked again, this time with the IN(...) marked",
          "275: # as \"not usable\". Depending on the relative costs of the two plans as",
          "276: # defined by the virtual table implementation, and the cardinality of the",
          "277: # IN(...) operator, SQLite chooses the most efficient plan.",
          "278: #",
          "279: # At one point the second invocation of xBestIndex() was only being made",
          "280: # for join queries. The following tests check that this problem has been",
          "281: # fixed.",
          "282: #",
          "283: proc vtab_command {method args} {",
          "284:   switch -- $method {",
          "285:     xConnect {",
          "286:       return \"CREATE TABLE t1(a, b, c, d)\"",
          "287:     }",
          "289:     xBestIndex {",
          "290:       set clist [lindex $args 0]",
          "291:       lappend ::bestindex_calls $clist",
          "292:       set ret \"cost 1000000 idxnum 555\"",
          "293:       for {set i 0} {$i < [llength $clist]} {incr i} {",
          "294:         array set C [lindex $clist $i]",
          "295:         if {$C(usable)} { lappend ret use $i }",
          "296:       }",
          "297:       return $ret",
          "298:     }",
          "299:   }",
          "300:   return {}",
          "301: }",
          "303: do_execsql_test 4.0 {",
          "304:   CREATE VIRTUAL TABLE x1 USING tcl(vtab_command);",
          "305: } {}",
          "307: do_test 4.1 {",
          "308:   set ::bestindex_calls [list]",
          "309:   execsql {",
          "310:     SELECT * FROM x1 WHERE a=? AND b BETWEEN ? AND ? AND c IN (1, 2, 3, 4);",
          "311:   }",
          "312:   set ::bestindex_calls",
          "313: } [list \\",
          "314:     [list {op eq column 0 usable 1} \\",
          "315:           {op eq column 2 usable 1} \\",
          "316:           {op ge column 1 usable 1} \\",
          "317:           {op le column 1 usable 1} \\",
          "318:     ] \\",
          "319:     [list {op eq column 0 usable 1} \\",
          "320:           {op eq column 2 usable 0} \\",
          "321:           {op ge column 1 usable 1} \\",
          "322:           {op le column 1 usable 1}",
          "323:     ]",
          "324: ]",
          "",
          "---------------"
        ]
      }
    }
  ]
}