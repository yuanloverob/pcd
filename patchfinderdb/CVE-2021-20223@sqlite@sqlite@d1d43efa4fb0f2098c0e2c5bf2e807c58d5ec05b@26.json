{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e455e3acf0c6042885deba23e2d3fb1ff7610a83",
      "candidate_info": {
        "commit_hash": "e455e3acf0c6042885deba23e2d3fb1ff7610a83",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e455e3acf0c6042885deba23e2d3fb1ff7610a83",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fts3corrupt4.test"
        ],
        "message": "In fts3, avoid making a very large memory allocation if the merge-hint record is corrupt.\n\nFossilOrigin-Name: 9add58fe9688d5c1f675736e7f1c6ff7831d2ff6fdeb884a2e62c1bf9536ee50",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3corrupt4.test||test/fts3corrupt4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "337:          \"  GROUP BY level HAVING cnt>=?\"",
          "",
          "[Removed Lines]",
          "338:          \"  ORDER BY (level %% 1024) ASC LIMIT 1\",",
          "",
          "[Added Lines]",
          "338:          \"  ORDER BY (level %% 1024) ASC, 2 DESC LIMIT 1\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4932:       rc = fts3IncrmergeHintPop(&hint, &iHintAbsLevel, &nHintSeg);",
          "4933:       if( nSeg<0 || (iAbsLevel % nMod) >= (iHintAbsLevel % nMod) ){",
          "4934:         iAbsLevel = iHintAbsLevel;",
          "4936:         bUseHint = 1;",
          "4937:         bDirtyHint = 1;",
          "4938:       }else{",
          "",
          "[Removed Lines]",
          "4935:         nSeg = nHintSeg;",
          "",
          "[Added Lines]",
          "4941:         nSeg = MIN(MAX(nMin,nSeg), nHintSeg);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "4948:     if( nSeg<0 ) break;",
          "",
          "[Added Lines]",
          "4954:     if( nSeg<=0 ) break;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7b62555e285f32d354df7746ef8dce16856c6d9d53a02d895b74ba02362d2968",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "5812:   INSERT INTO f(f) VALUES ('integrity-check');",
          "5813: } {1 {database disk image is malformed}}",
          "5815: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5815: reset_db",
          "5816: do_catchsql_test 36.0 {",
          "5817:   CREATE VIRTUAL TABLE f USING fts3(a,tokenize=porter);",
          "5818:   CREATE TABLE 'f_stat'(id INTEGER PRIMARY KEY, value BLOB);",
          "5819:   INSERT INTO f VALUES (1);",
          "5820:   INSERT INTO f_stat VALUES (1,x'00000000000101010119013d00ffff0400fa83717b71a69297979701f63d010101010101010101010101190000000000000000fa83717b71a601f63d01010101010101010101010119013d00ffffff0400fa83717b71a69297979701f63d010101010101010101010101190000000000000000fa83717b71a69201f63d010101f63d01010101010101010101010119013d00ffffff0400fa83717b71a6929797010101010101010101010119013d00ffff01f63d01010101010101010101010119013d00ffffff0400fa83717b71a69297979701f63d00fa03ffffffa69297979701f63d010101000000000101010101197e9797976567656565ffa63535354e');",
          "5821:   INSERT INTO f(f) VALUES ('merge=53,216');",
          "5822: } {0 {}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cbf1c8c25bf0f7f654fe213e9598e699c0e68231",
      "candidate_info": {
        "commit_hash": "cbf1c8c25bf0f7f654fe213e9598e699c0e68231",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cbf1c8c25bf0f7f654fe213e9598e699c0e68231",
        "files": [
          "autoconf/tea/configure.ac",
          "autoconf/tea/win/makefile.vc",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Improvements to the autoconf TEA Makefile for MSVC.\n\nFossilOrigin-Name: cffcf12f03906debeac6a974534b4439a4952cc72767e3bcb8e6d91da944d69f",
        "before_after_code_files": [
          "autoconf/teconfigure.ac||autoconf/tea/configure.ac",
          "autoconf/tewin/makefile.vc||autoconf/tea/win/makefile.vc",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "autoconf/teconfigure.ac||autoconf/tea/configure.ac": [
          "File: autoconf/teconfigure.ac -> autoconf/tea/configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: AC_INIT([sqlite], [3.31.0])",
          "",
          "---------------"
        ],
        "autoconf/tewin/makefile.vc||autoconf/tea/win/makefile.vc": [
          "File: autoconf/tewin/makefile.vc -> autoconf/tea/win/makefile.vc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "156: PROJECT = tclsqlite3",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165: # get project version from row \"AC_INIT([sqlite], [3.x.y])\"",
          "167:    && [nmakehlp -V ..\\configure.ac AC_INIT >> versions.vc]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "182: PRJLIBNAME = $(PROJECT).$(EXT)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204: ### Figure out where the primary source code file(s) is/are.",
          "205: !if exist(\"$(ROOT)\\..\\..\\sqlite3.c\") && exist(\"$(ROOT)\\..\\..\\src\\tclsqlite.c\")",
          "206: SQL_INCLUDES = -I\"$(ROOT)\\..\\..\"",
          "207: SQLITE_SRCDIR = $(ROOT)\\..\\..",
          "208: TCLSQLITE_SRCDIR = $(ROOT)\\..\\..\\src",
          "209: DLLOBJS = $(TMP_DIR)\\sqlite3.obj $(TMP_DIR)\\tclsqlite.obj",
          "210: !else",
          "211: TCLSQLITE_SRCDIR = $(ROOT)\\generic",
          "212: DLLOBJS = $(TMP_DIR)\\tclsqlite3.obj",
          "213: !endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "234: cflags = -nologo -c -W3 -D_CRT_SECURE_NO_WARNINGS -YX -Fp$(TMP_DIR)^\\",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "250: INCLUDES = $(SQL_INCLUDES) $(TCL_INCLUDES) -I\"$(WINDIR)\" \\",
          "251:                   -I\"$(GENERICDIR)\" -I\"$(ROOT)\\..\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "352: $(TMP_DIR)\\sqlite3.obj:  $(SQLITE_SRCDIR)\\sqlite3.c",
          "353:  $(cc32) $(TCL_CFLAGS) -DBUILD_$(PROJECT) -Fo$(TMP_DIR)\\ \\",
          "354:   -c $(SQLITE_SRCDIR)\\sqlite3.c",
          "356: $(TMP_DIR)\\tclsqlite.obj: $(TCLSQLITE_SRCDIR)\\tclsqlite.c",
          "357:  $(cc32) $(TCL_CFLAGS) -DBUILD_$(PROJECT) -Fo$(TMP_DIR)\\ \\",
          "358:   -c $(TCLSQLITE_SRCDIR)\\tclsqlite.c",
          "360: $(TMP_DIR)\\tclsqlite3.obj: $(TCLSQLITE_SRCDIR)\\tclsqlite3.c",
          "361:  $(cc32) $(TCL_CFLAGS) -DBUILD_$(PROJECT) -Fo$(TMP_DIR)\\ \\",
          "362:   -c $(TCLSQLITE_SRCDIR)\\tclsqlite3.c",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 63d886f4ce3c770498b8bdad45b04143a3f63197d81793bde107450aba4a9c87",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ad5f157791a72c1f2812d8fe76e1522fd7a6cb6b",
      "candidate_info": {
        "commit_hash": "ad5f157791a72c1f2812d8fe76e1522fd7a6cb6b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ad5f157791a72c1f2812d8fe76e1522fd7a6cb6b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "test/gencol1.test"
        ],
        "message": "Recompute the values for all generated columns after NOT NULL ON CONFLICT REPLACE constraints fire. Tickets [37823501c68a09f9] and [5fbc159eeb092130].\n\nFossilOrigin-Name: 4cc12c18860bc4801a407cf45e88e23d3d40391f01a461fbac2cac5f102100e1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1548:   if( pTab->tabFlags & TF_HasNotNull ){",
          "1589:         }",
          "1604:         }",
          "1610:         }",
          "1611:       }",
          "",
          "[Removed Lines]",
          "1549:     for(i=0; i<nCol; i++){",
          "1550:       int iReg;",
          "1551:       onError = pTab->aCol[i].notNull;",
          "1553:       if( i==pTab->iPKey ){",
          "1555:       }",
          "1556:       if( aiChng && aiChng[i]<0 ){",
          "1558:         continue;",
          "1559:       }",
          "1560:       if( overrideError!=OE_Default ){",
          "1561:         onError = overrideError;",
          "1562:       }else if( onError==OE_Default ){",
          "1563:         onError = OE_Abort;",
          "1564:       }",
          "1565:       if( onError==OE_Replace && pTab->aCol[i].pDflt==0 ){",
          "1566:         onError = OE_Abort;",
          "1567:       }",
          "1568:       assert( onError==OE_Rollback || onError==OE_Abort || onError==OE_Fail",
          "1569:           || onError==OE_Ignore || onError==OE_Replace );",
          "1570:       addr1 = 0;",
          "1571:       testcase( i!=sqlite3TableColumnToStorage(pTab, i) );",
          "1572:       testcase( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL );",
          "1573:       testcase( pTab->aCol[i].colFlags & COLFLAG_STORED );",
          "1574:       iReg = sqlite3TableColumnToStorage(pTab, i) + regNewData + 1;",
          "1575:       switch( onError ){",
          "1576:         case OE_Replace: {",
          "1577:           assert( onError==OE_Replace );",
          "1578:           addr1 = sqlite3VdbeMakeLabel(pParse);",
          "1579:           sqlite3VdbeAddOp2(v, OP_NotNull, iReg, addr1);",
          "1580:             VdbeCoverage(v);",
          "1581:           if( (pTab->aCol[i].colFlags & COLFLAG_GENERATED)==0 ){",
          "1582:             sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, regNewData+1+i);",
          "1583:             sqlite3VdbeAddOp2(v, OP_NotNull, iReg, addr1);",
          "1584:               VdbeCoverage(v);",
          "1585:           }",
          "1586:           onError = OE_Abort;",
          "1590:         case OE_Abort:",
          "1591:           sqlite3MayAbort(pParse);",
          "1593:         case OE_Rollback:",
          "1594:         case OE_Fail: {",
          "1595:           char *zMsg = sqlite3MPrintf(db, \"%s.%s\", pTab->zName,",
          "1596:                                       pTab->aCol[i].zName);",
          "1597:           sqlite3VdbeAddOp3(v, OP_HaltIfNull, SQLITE_CONSTRAINT_NOTNULL,",
          "1598:                             onError, iReg);",
          "1599:           sqlite3VdbeAppendP4(v, zMsg, P4_DYNAMIC);",
          "1600:           sqlite3VdbeChangeP5(v, P5_ConstraintNotNull);",
          "1601:           VdbeCoverage(v);",
          "1602:           if( addr1 ) sqlite3VdbeResolveLabel(v, addr1);",
          "1603:           break;",
          "1605:         default: {",
          "1606:           assert( onError==OE_Ignore );",
          "1607:           sqlite3VdbeAddOp2(v, OP_IsNull, iReg, ignoreDest);",
          "1608:           VdbeCoverage(v);",
          "1609:           break;",
          "1612:     }",
          "1613:   }",
          "",
          "[Added Lines]",
          "1552:       for(i=0; i<nCol; i++){",
          "1556:         onError = pCol->notNull;",
          "1558:         if( i==pTab->iPKey ){",
          "1561:         isGenerated = pCol->colFlags & COLFLAG_GENERATED;",
          "1562:         if( isGenerated && !b2ndPass ){",
          "1563:           nGenerated++;",
          "1566:         if( aiChng && aiChng[i]<0 && !isGenerated ){",
          "1568:           continue;",
          "1570:         if( overrideError!=OE_Default ){",
          "1571:           onError = overrideError;",
          "1572:         }else if( onError==OE_Default ){",
          "1573:           onError = OE_Abort;",
          "1574:         }",
          "1575:         if( onError==OE_Replace ){",
          "1578:           ){",
          "1579:             testcase( pCol->colFlags & COLFLAG_VIRTUAL );",
          "1580:             testcase( pCol->colFlags & COLFLAG_STORED );",
          "1581:             testcase( pCol->colFlags & COLFLAG_GENERATED );",
          "1582:             onError = OE_Abort;",
          "1583:           }else{",
          "1584:             assert( !isGenerated );",
          "1585:           }",
          "1586:         }else if( b2ndPass && !isGenerated ){",
          "1587:           continue;",
          "1588:         }",
          "1589:         assert( onError==OE_Rollback || onError==OE_Abort || onError==OE_Fail",
          "1590:             || onError==OE_Ignore || onError==OE_Replace );",
          "1591:         testcase( i!=sqlite3TableColumnToStorage(pTab, i) );",
          "1592:         iReg = sqlite3TableColumnToStorage(pTab, i) + regNewData + 1;",
          "1593:         switch( onError ){",
          "1594:           case OE_Replace: {",
          "1595:             int addr1 = sqlite3VdbeAddOp1(v, OP_NotNull, iReg);",
          "1596:             VdbeCoverage(v);",
          "1597:             assert( (pCol->colFlags & COLFLAG_GENERATED)==0 );",
          "1598:             nSeenReplace++;",
          "1599:             sqlite3ExprCode(pParse, pCol->pDflt, iReg);",
          "1600:             sqlite3VdbeJumpHere(v, addr1);",
          "1601:             break;",
          "1602:           }",
          "1603:           case OE_Abort:",
          "1604:             sqlite3MayAbort(pParse);",
          "1606:           case OE_Rollback:",
          "1607:           case OE_Fail: {",
          "1608:             char *zMsg = sqlite3MPrintf(db, \"%s.%s\", pTab->zName,",
          "1609:                                         pCol->zName);",
          "1610:             sqlite3VdbeAddOp3(v, OP_HaltIfNull, SQLITE_CONSTRAINT_NOTNULL,",
          "1611:                               onError, iReg);",
          "1612:             sqlite3VdbeAppendP4(v, zMsg, P4_DYNAMIC);",
          "1613:             sqlite3VdbeChangeP5(v, P5_ConstraintNotNull);",
          "1614:             VdbeCoverage(v);",
          "1615:             break;",
          "1616:           }",
          "1617:           default: {",
          "1618:             assert( onError==OE_Ignore );",
          "1619:             sqlite3VdbeAddOp2(v, OP_IsNull, iReg, ignoreDest);",
          "1620:             VdbeCoverage(v);",
          "1621:             break;",
          "1622:           }",
          "1625:       if( nGenerated==0 && nSeenReplace==0 ){",
          "1629:         break;",
          "1632:       b2ndPass = 1;",
          "1633:       if( nSeenReplace>0 && (pTab->tabFlags & TF_HasGenerated)!=0 ){",
          "1638:         sqlite3ComputeGeneratedColumns(pParse, regNewData+1, pTab);",
          "1639:       }",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "211:   REPLACE INTO t0(c1) VALUES(NULL);",
          "212: } {1 {NOT NULL constraint failed: t0.c0}}",
          "215: do_execsql_test gencol1-7.10 {",
          "217:   CREATE TABLE t0 (c0 GENERATED ALWAYS AS (1), c1 UNIQUE, c2 UNIQUE);",
          "218:   INSERT INTO t0(c1) VALUES (1);",
          "219:   SELECT quote(0 = t0.c2 OR t0.c1 BETWEEN t0.c2 AND 1) FROM t0;",
          "220: } {NULL}",
          "221: do_execsql_test gencol1-7.20 {",
          "225: # 2019-11-06 ticket 4fc08501f4e56692",
          "226: do_execsql_test gencol1-8.10 {",
          "",
          "[Removed Lines]",
          "214: # 2019-11-06 ticket b13b7dce76e9352b34e7",
          "216:   DROP TABLE IF EXISTS t0;",
          "222:   SELECT 99 FROM t0 WHERE 0 = t0.c2 OR t0.c1 BETWEEN t0.c2 AND 1;",
          "223: } {}",
          "",
          "[Added Lines]",
          "214: # 2019-11-06 ticket https://www.sqlite.org/src/info/2399f5986134f79c",
          "215: # 2019-12-27 ticket https://www.sqlite.org/src/info/5fbc159eeb092130",
          "216: # 2019-12-27 ticket https://www.sqlite.org/src/info/37823501c68a09f9",
          "217: #",
          "218: # All of the above tickets deal with NOT NULL ON CONFLICT REPLACE",
          "219: # constraints on tables that have generated columns.",
          "220: #",
          "221: reset_db",
          "227: do_execsql_test gencol1-7.11 {",
          "228:   DROP TABLE t0;",
          "229:   CREATE TABLE t0(c0 NOT NULL DEFAULT 'xyz', c1 AS(c0) NOT NULL);",
          "230:   REPLACE INTO t0(c0) VALUES(NULL);",
          "231:   SELECT * FROM t0;",
          "232: } {xyz xyz}",
          "233: do_execsql_test gencol1-7.12 {",
          "234:   DROP TABLE t0;",
          "235:   CREATE TABLE t0(c0 NOT NULL DEFAULT 'xyz', c1 AS(c0) STORED NOT NULL);",
          "236:   REPLACE INTO t0(c0) VALUES(NULL);",
          "237:   SELECT * FROM t0;",
          "238: } {xyz xyz}",
          "240:   CREATE TABLE t1(",
          "241:    a NOT NULL DEFAULT 'aaa',",
          "242:    b AS(c) NOT NULL,",
          "243:    c NOT NULL DEFAULT 'ccc');",
          "244:   REPLACE INTO t1(a,c) VALUES(NULL,NULL);",
          "245:   SELECT * FROM t1;",
          "246: } {aaa ccc ccc}",
          "247: do_execsql_test gencol1-7.21 {",
          "248:   DROP TABLE t1;",
          "249:   CREATE TABLE t1(",
          "250:    a NOT NULL DEFAULT 'aaa',",
          "251:    b AS(c) STORED NOT NULL,",
          "252:    c NOT NULL DEFAULT 'ccc');",
          "253:   REPLACE INTO t1(a,c) VALUES(NULL,NULL);",
          "254:   SELECT * FROM t1;",
          "255: } {aaa ccc ccc}",
          "256: do_execsql_test gencol1-7.30 {",
          "257:   CREATE TABLE t2(",
          "258:    a NOT NULL DEFAULT 'aaa',",
          "259:    b AS(a) NOT NULL,",
          "260:    c NOT NULL DEFAULT 'ccc');",
          "261:   REPLACE INTO t2(a,c) VALUES(NULL,NULL);",
          "262:   SELECT * FROM t2;",
          "263: } {aaa aaa ccc}",
          "264: do_execsql_test gencol1-7.31 {",
          "265:   DROP TABLE t2;",
          "266:   CREATE TABLE t2(",
          "267:    a NOT NULL DEFAULT 'aaa',",
          "268:    b AS(a) STORED NOT NULL,",
          "269:    c NOT NULL DEFAULT 'ccc');",
          "270:   REPLACE INTO t2(a,c) VALUES(NULL,NULL);",
          "271:   SELECT * FROM t2;",
          "272: } {aaa aaa ccc}",
          "273: do_execsql_test gencol1-7.40 {",
          "274:   CREATE TABLE t3(a NOT NULL DEFAULT 123, b AS(a) UNIQUE);",
          "275:   REPLACE INTO t3 VALUES(NULL);",
          "276:   SELECT * FROM t3;",
          "277: } {123 123}",
          "278: do_execsql_test gencol1-7.41 {",
          "279:   SELECT * FROM t3 WHERE b=123;",
          "280: } {123 123}",
          "281: do_execsql_test gencol1-7.50 {",
          "282:   CREATE TABLE t4(a NOT NULL DEFAULT 123, b AS(a*10+4) STORED UNIQUE);",
          "283:   REPLACE INTO t4 VALUES(NULL);",
          "284:   SELECT * FROM t4;",
          "285: } {123 1234}",
          "286: do_execsql_test gencol1-7.51 {",
          "287:   SELECT * FROM t4 WHERE b=1234;",
          "288: } {123 1234}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "246: # 2019-11-21 Problems in the new generated column logic",
          "247: # reported by Yongheng Chen and Rui Zhong",
          "248: do_execsql_test gencol1-9.10 {",
          "249:   PRAGMA foreign_keys=OFF;",
          "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
          "252:   INSERT INTO t1 VALUES(17);",
          "253:   CREATE TABLE t2(cc);",
          "",
          "[Removed Lines]",
          "250:   DROP TABLE t1;",
          "",
          "[Added Lines]",
          "313: reset_db",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "66c48907a2abc90a78760f7281acb1f720adc1c7",
      "candidate_info": {
        "commit_hash": "66c48907a2abc90a78760f7281acb1f720adc1c7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/66c48907a2abc90a78760f7281acb1f720adc1c7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/pragma.h",
          "src/shell.c.in",
          "src/sqlite.h.in",
          "src/test1.c",
          "test/alter3.test",
          "test/alter4.test",
          "test/conflict3.test",
          "test/corruptC.test",
          "test/corruptE.test",
          "test/descidx1.test",
          "test/descidx2.test",
          "test/descidx3.test",
          "test/distinct2.test",
          "test/filter1.test",
          "test/format4.test",
          "test/indexexpr2.test",
          "test/insert4.test",
          "test/join.test",
          "test/minmax2.test",
          "test/nulls1.test",
          "test/pragma4.test",
          "test/rowvaluevtab.test",
          "test/tkt-18458b1a.test",
          "test/tkt-a7debbe0.test",
          "test/tkt3292.test",
          "test/window9.test",
          "tool/mkpragmatab.tcl"
        ],
        "message": "Remove the legacy_file_format PRAGMA.  In its place, provide the SQLITE_DBCONFIG_LEGACY_FILE_FORMAT option to sqlite3_db_config(). Fix for ticket [6484e6ce678fffab]\n\nFossilOrigin-Name: 4d424f3047b48fc441475137f30a719d2f079390c86fe2617710ddfb05c5e240",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/pragma.h||src/pragma.h",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/test1.c||src/test1.c",
          "test/alter3.test||test/alter3.test",
          "test/alter4.test||test/alter4.test",
          "test/conflict3.test||test/conflict3.test",
          "test/corruptC.test||test/corruptC.test",
          "test/corruptE.test||test/corruptE.test",
          "test/descidx1.test||test/descidx1.test",
          "test/descidx2.test||test/descidx2.test",
          "test/descidx3.test||test/descidx3.test",
          "test/distinct2.test||test/distinct2.test",
          "test/filter1.test||test/filter1.test",
          "test/format4.test||test/format4.test",
          "test/indexexpr2.test||test/indexexpr2.test",
          "test/insert4.test||test/insert4.test",
          "test/join.test||test/join.test",
          "test/minmax2.test||test/minmax2.test",
          "test/nulls1.test||test/nulls1.test",
          "test/pragma4.test||test/pragma4.test",
          "test/rowvaluevtab.test||test/rowvaluevtab.test",
          "test/tkt-18458b1a.test||test/tkt-18458b1a.test",
          "test/tkt-a7debbe0.test||test/tkt-a7debbe0.test",
          "test/tkt3292.test||test/tkt3292.test",
          "test/window9.test||test/window9.test",
          "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4fba090e678ef184736277c9ec9a9374c8bd4df4d41f51a3dc6818e2efcc103b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "851:         { SQLITE_DBCONFIG_LEGACY_ALTER_TABLE,    SQLITE_LegacyAlter    },",
          "852:         { SQLITE_DBCONFIG_DQS_DDL,               SQLITE_DqsDDL         },",
          "853:         { SQLITE_DBCONFIG_DQS_DML,               SQLITE_DqsDML         },",
          "854:       };",
          "855:       unsigned int i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "854:         { SQLITE_DBCONFIG_LEGACY_FILE_FORMAT,    SQLITE_LegacyFileFmt  },",
          "",
          "---------------"
        ],
        "src/pragma.h||src/pragma.h": [
          "File: src/pragma.h -> src/pragma.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "404: #endif",
          "405: #if !defined(SQLITE_OMIT_PAGER_PRAGMAS) && SQLITE_ENABLE_LOCKING_STYLE",
          "406:  {/* zName:     */ \"lock_proxy_file\",",
          "",
          "[Removed Lines]",
          "399:  {/* zName:     */ \"legacy_file_format\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "7171:         { \"legacy_alter_table\", SQLITE_DBCONFIG_LEGACY_ALTER_TABLE    },",
          "7172:         { \"dqs_dml\",            SQLITE_DBCONFIG_DQS_DML               },",
          "7173:         { \"dqs_ddl\",            SQLITE_DBCONFIG_DQS_DDL               },",
          "7174:     };",
          "7175:     int ii, v;",
          "7176:     open_db(p, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7174:         { \"legacy_file_format\", SQLITE_DBCONFIG_LEGACY_FILE_FORMAT    },",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7682:     { \"LEGACY_ALTER_TABLE\", SQLITE_DBCONFIG_LEGACY_ALTER_TABLE },",
          "7683:     { \"DQS_DML\",            SQLITE_DBCONFIG_DQS_DML },",
          "7684:     { \"DQS_DDL\",            SQLITE_DBCONFIG_DQS_DDL },",
          "7685:   };",
          "7686:   int i;",
          "7688:   const char *zSetting;",
          "7689:   sqlite3 *db;",
          "7693:     return TCL_ERROR;",
          "7694:   }",
          "7695:   if( getDbPointer(interp, Tcl_GetString(objv[1]), &db) ) return TCL_ERROR;",
          "",
          "[Removed Lines]",
          "7687:   int v;",
          "7691:   if( objc!=4 ){",
          "7692:     Tcl_WrongNumArgs(interp, 1, objv, \"DB SETTING VALUE\");",
          "",
          "[Added Lines]",
          "7685:     { \"LEGACY_FILE_FORMAT\", SQLITE_DBCONFIG_LEGACY_FILE_FORMAT },",
          "7688:   int v = 0;",
          "7692:   if( objc!=4 && objc!=3 ){",
          "7693:     Tcl_WrongNumArgs(interp, 1, objv, \"DB SETTING [VALUE]\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7705:       Tcl_NewStringObj(\"unknown sqlite3_db_config setting\", -1));",
          "7706:     return TCL_ERROR;",
          "7707:   }",
          "7709:   sqlite3_db_config(db, aSetting[i].eVal, v, &v);",
          "7710:   Tcl_SetObjResult(interp, Tcl_NewIntObj(v));",
          "7711:   return TCL_OK;",
          "",
          "[Removed Lines]",
          "7708:   if( Tcl_GetIntFromObj(interp, objv[3], &v) ) return TCL_ERROR;",
          "",
          "[Added Lines]",
          "7709:   if( objc==4 ){",
          "7710:     if( Tcl_GetIntFromObj(interp, objv[3], &v) ) return TCL_ERROR;",
          "7711:   }else{",
          "7712:     v = -1;",
          "7713:   }",
          "",
          "---------------"
        ],
        "test/alter3.test||test/alter3.test": [
          "File: test/alter3.test -> test/alter3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: }",
          "56: do_test alter3-1.1 {",
          "57:   execsql {",
          "59:     CREATE TABLE abc(a, b, c);",
          "60:     SELECT sql FROM sqlite_master;",
          "61:   }",
          "",
          "[Removed Lines]",
          "58:     PRAGMA legacy_file_format=ON;",
          "",
          "[Added Lines]",
          "57:   sqlite3_db_config db LEGACY_FILE_FORMAT 1",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "198:   db close",
          "199:   forcedelete test.db",
          "200:   set ::DB [sqlite3 db test.db]",
          "201:   execsql {",
          "203:     CREATE TABLE t1(a, b);",
          "204:     INSERT INTO t1 VALUES(1, 100);",
          "205:     INSERT INTO t1 VALUES(2, 300);",
          "",
          "[Removed Lines]",
          "202:     PRAGMA legacy_file_format=ON;",
          "",
          "[Added Lines]",
          "201:   sqlite3_db_config db LEGACY_FILE_FORMAT 1",
          "",
          "---------------"
        ],
        "test/alter4.test||test/alter4.test": [
          "File: test/alter4.test -> test/alter4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "383: do_test alter4-10.1 {",
          "384:   db close",
          "385:   sqlite3 db :memory:",
          "386:   db eval {",
          "388:     CREATE TABLE t1(a,b,c);",
          "389:     CREATE INDEX t1a ON t1(a DESC);",
          "390:     INSERT INTO t1 VALUES(1,2,3);",
          "",
          "[Removed Lines]",
          "387:     PRAGMA legacy_file_format=on;",
          "",
          "[Added Lines]",
          "386:   sqlite3_db_config db LEGACY_FILE_FORMAT 1",
          "",
          "---------------"
        ],
        "test/conflict3.test||test/conflict3.test": [
          "File: test/conflict3.test -> test/conflict3.test"
        ],
        "test/corruptC.test||test/corruptC.test": [
          "File: test/corruptC.test -> test/corruptC.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: # Construct a compact, dense database for testing.",
          "35: #",
          "36: do_test corruptC-1.1 {",
          "37:   execsql {",
          "38:     PRAGMA auto_vacuum = 0;",
          "40:     BEGIN;",
          "41:     CREATE TABLE t1(x,y);",
          "42:     INSERT INTO t1 VALUES(1,1);",
          "",
          "[Removed Lines]",
          "39:     PRAGMA legacy_file_format=1;",
          "",
          "[Added Lines]",
          "37:   sqlite3_db_config db LEGACY_FILE_FORMAT 1",
          "",
          "---------------"
        ],
        "test/corruptE.test||test/corruptE.test": [
          "File: test/corruptE.test -> test/corruptE.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: # Construct a compact, dense database for testing.",
          "37: #",
          "38: do_test corruptE-1.1 {",
          "39:   execsql {",
          "40:     PRAGMA auto_vacuum = 0;",
          "42:     BEGIN;",
          "43:     CREATE TABLE t1(x,y);",
          "44:     INSERT INTO t1 VALUES(1,1);",
          "",
          "[Removed Lines]",
          "41:     PRAGMA legacy_file_format=1;",
          "",
          "[Added Lines]",
          "39:   sqlite3_db_config db LEGACY_FILE_FORMAT 1",
          "",
          "---------------"
        ],
        "test/descidx1.test||test/descidx1.test": [
          "File: test/descidx1.test -> test/descidx1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #",
          "23: do_not_use_codec",
          "27: # This procedure sets the value of the file-format in file 'test.db'",
          "28: # to $newval. Also, the schema cookie is incremented.",
          "",
          "[Removed Lines]",
          "25: db eval {PRAGMA legacy_file_format=OFF}",
          "",
          "[Added Lines]",
          "25: #db eval {PRAGMA legacy_file_format=OFF}",
          "26: sqlite3_db_config db LEGACY_FILE_FORMAT 0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "299:     db close",
          "300:     forcedelete test.db test.db-journal",
          "301:     sqlite3 db test.db",
          "303:   } {1}",
          "304: } else {",
          "305:   do_test descidx1-6.1 {",
          "306:     db close",
          "307:     forcedelete test.db test.db-journal",
          "308:     sqlite3 db test.db",
          "310:   } {0}",
          "311: }",
          "312: do_test descidx1-6.2 {",
          "315: } {1}",
          "316: do_test descidx1-6.3 {",
          "317:   execsql {",
          "",
          "[Removed Lines]",
          "302:     execsql {PRAGMA legacy_file_format}",
          "309:     execsql {PRAGMA legacy_file_format}",
          "313:   execsql {PRAGMA legacy_file_format=YES}",
          "314:   execsql {PRAGMA legacy_file_format}",
          "",
          "[Added Lines]",
          "303:     sqlite3_db_config db LEGACY_FILE_FORMAT",
          "310:     sqlite3_db_config db LEGACY_FILE_FORMAT",
          "314:   sqlite3_db_config db LEGACY_FILE_FORMAT 1",
          "315:   sqlite3_db_config db LEGACY_FILE_FORMAT",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "330:   db close",
          "331:   forcedelete test.db test.db-journal",
          "332:   sqlite3 db test.db",
          "335: } {0}",
          "336: do_test descidx1-6.5 {",
          "337:   execsql {",
          "",
          "[Removed Lines]",
          "333:   execsql {PRAGMA legacy_file_format=NO}",
          "334:   execsql {PRAGMA legacy_file_format}",
          "",
          "[Added Lines]",
          "334:   sqlite3_db_config db LEGACY_FILE_FORMAT 0",
          "335:   sqlite3_db_config db LEGACY_FILE_FORMAT",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "351:     get_file_format",
          "352:   } {4}",
          "353:   do_test descidx1-6.7 {",
          "354:     execsql {",
          "356:       VACUUM;",
          "357:     }",
          "358:     get_file_format",
          "",
          "[Removed Lines]",
          "355:       PRAGMA legacy_file_format=ON;",
          "",
          "[Added Lines]",
          "355:     sqlite3_db_config db LEGACY_FILE_FORMAT 1",
          "",
          "---------------"
        ],
        "test/descidx2.test||test/descidx2.test": [
          "File: test/descidx2.test -> test/descidx2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: do_not_use_codec",
          "28: # This procedure sets the value of the file-format in file 'test.db'",
          "29: # to $newval. Also, the schema cookie is incremented.",
          "",
          "[Removed Lines]",
          "26: db eval {PRAGMA legacy_file_format=OFF}",
          "",
          "[Added Lines]",
          "26: #db eval {PRAGMA legacy_file_format=OFF}",
          "27: sqlite3_db_config db LEGACY_FILE_FORMAT 0",
          "",
          "---------------"
        ],
        "test/descidx3.test||test/descidx3.test": [
          "File: test/descidx3.test -> test/descidx3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:   finish_test",
          "27:   return",
          "28: }",
          "31: # This procedure sets the value of the file-format in file 'test.db'",
          "32: # to $newval. Also, the schema cookie is incremented.",
          "",
          "[Removed Lines]",
          "29: db eval {PRAGMA legacy_file_format=OFF}",
          "",
          "[Added Lines]",
          "29: #db eval {PRAGMA legacy_file_format=OFF}",
          "30: sqlite3_db_config db LEGACY_FILE_FORMAT 0",
          "",
          "---------------"
        ],
        "test/distinct2.test||test/distinct2.test": [
          "File: test/distinct2.test -> test/distinct2.test"
        ],
        "test/filter1.test||test/filter1.test": [
          "File: test/filter1.test -> test/filter1.test"
        ],
        "test/format4.test||test/format4.test": [
          "File: test/format4.test -> test/format4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: set testdir [file dirname $argv0]",
          "18: source $testdir/tester.tcl",
          "22: # The size of the database depends on whether or not autovacuum",
          "23: # is enabled.",
          "",
          "[Removed Lines]",
          "20: db eval {PRAGMA legacy_file_format=OFF}",
          "",
          "[Added Lines]",
          "20: #db eval {PRAGMA legacy_file_format=OFF}",
          "21: sqlite3_db_config db LEGACY_FILE_FORMAT 0",
          "",
          "---------------"
        ],
        "test/indexexpr2.test||test/indexexpr2.test": [
          "File: test/indexexpr2.test -> test/indexexpr2.test"
        ],
        "test/insert4.test||test/insert4.test": [
          "File: test/insert4.test -> test/insert4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: # Create tables used for testing.",
          "36: #",
          "37: execsql {",
          "39:   CREATE TABLE t1(a int, b int, check(b>a));",
          "40:   CREATE TABLE t2(x int, y int);",
          "41:   CREATE VIEW v2 AS SELECT y, x FROM t2;",
          "",
          "[Removed Lines]",
          "38:   PRAGMA legacy_file_format = 0;",
          "",
          "[Added Lines]",
          "37: sqlite3_db_config db LEGACY_FILE_FORMAT 0",
          "",
          "---------------"
        ],
        "test/join.test||test/join.test": [
          "File: test/join.test -> test/join.test"
        ],
        "test/minmax2.test||test/minmax2.test": [
          "File: test/minmax2.test -> test/minmax2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: source $testdir/tester.tcl",
          "23: do_test minmax2-1.0 {",
          "24:   execsql {",
          "26:     BEGIN;",
          "27:     CREATE TABLE t1(x, y);",
          "28:     INSERT INTO t1 VALUES(1,1);",
          "",
          "[Removed Lines]",
          "25:     PRAGMA legacy_file_format=0;",
          "",
          "[Added Lines]",
          "24:   sqlite3_db_config db LEGACY_FILE_FORMAT 0",
          "",
          "---------------"
        ],
        "test/nulls1.test||test/nulls1.test": [
          "File: test/nulls1.test -> test/nulls1.test"
        ],
        "test/pragma4.test||test/pragma4.test": [
          "File: test/pragma4.test -> test/pragma4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:  14 \"PRAGMA full_column_names = 1\"",
          "45:  15 \"PRAGMA fullfsync = 1\"",
          "46:  16 \"PRAGMA ignore_check_constraints = 1\"",
          "48:  18 \"PRAGMA page_size = 511\"",
          "49:  19 \"PRAGMA page_size = 512\"",
          "50:  20 \"PRAGMA query_only = false\"",
          "",
          "[Removed Lines]",
          "47:  17 \"PRAGMA legacy_file_format = 1\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/rowvaluevtab.test||test/rowvaluevtab.test": [
          "File: test/rowvaluevtab.test -> test/rowvaluevtab.test"
        ],
        "test/tkt-18458b1a.test||test/tkt-18458b1a.test": [
          "File: test/tkt-18458b1a.test -> test/tkt-18458b1a.test"
        ],
        "test/tkt-a7debbe0.test||test/tkt-a7debbe0.test": [
          "File: test/tkt-a7debbe0.test -> test/tkt-a7debbe0.test"
        ],
        "test/tkt3292.test||test/tkt3292.test": [
          "File: test/tkt3292.test -> test/tkt3292.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: source $testdir/tester.tcl",
          "22: do_test tkt3292-1.1 {",
          "23:   execsql {",
          "25:     CREATE TABLE t1(a INTEGER PRIMARY KEY, b INT);",
          "26:     INSERT INTO t1 VALUES(0, 1);",
          "27:     INSERT INTO t1 VALUES(1, 1);",
          "",
          "[Removed Lines]",
          "24:     PRAGMA legacy_file_format=OFF;",
          "",
          "[Added Lines]",
          "23:   sqlite3_db_config db LEGACY_FILE_FORMAT 0",
          "",
          "---------------"
        ],
        "test/window9.test||test/window9.test": [
          "File: test/window9.test -> test/window9.test"
        ],
        "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl": [
          "File: tool/mkpragmatab.tcl -> tool/mkpragmatab.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:   ARG:  SQLITE_NullCallback",
          "42:   IF:   !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "49:   NAME: fullfsync",
          "50:   TYPE: FLAG",
          "51:   ARG:  SQLITE_FullFSync",
          "",
          "[Removed Lines]",
          "44:   NAME: legacy_file_format",
          "45:   TYPE: FLAG",
          "46:   ARG:  SQLITE_LegacyFileFmt",
          "47:   IF:   !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2eeca2046eae31d913e7bae79893e343c17bd624",
      "candidate_info": {
        "commit_hash": "2eeca2046eae31d913e7bae79893e343c17bd624",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2eeca2046eae31d913e7bae79893e343c17bd624",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/callback.c",
          "src/expr.c",
          "src/pragma.c",
          "src/resolve.c",
          "test/tclsqlite.test",
          "test/trustschema1.test"
        ],
        "message": "Performance improvements and test cases added. Allow \"PRAGMA trusted_schema=ON\"\n\nFossilOrigin-Name: 30882ca80f6c51f6bb7b2692c1ac3f19a7c61a23aa8730be79aec0ae3ef08d54",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/callback.c||src/callback.c",
          "src/expr.c||src/expr.c",
          "src/pragma.c||src/pragma.c",
          "src/resolve.c||src/resolve.c",
          "test/tclsqlite.test||test/tclsqlite.test",
          "test/trustschema1.test||test/trustschema1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1da802d54b689a462e1fe899c6ffa08ef14d34f36728b14b055b5a76b1edc274",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/callback.c||src/callback.c": [
          "File: src/callback.c -> src/callback.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "289: ){",
          "290:   int match;",
          "",
          "[Removed Lines]",
          "293:   if( nArg==(-2) ) return (p->xSFunc==0) ? 0 : FUNC_PERFECT_MATCH;",
          "296:   if( p->nArg!=nArg && p->nArg>=0 ) return 0;",
          "",
          "[Added Lines]",
          "291:   assert( p->nArg>=-1 );",
          "294:   if( p->nArg!=nArg ){",
          "295:     if( nArg==(-2) ) return (p->xSFunc==0) ? 0 : FUNC_PERFECT_MATCH;",
          "296:     if( p->nArg>=0 ) return 0;",
          "297:   }",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "991: ){",
          "992:   assert( !IN_RENAME_OBJECT );",
          "996:     if( (pDef->funcFlags & SQLITE_FUNC_DIRECT)!=0",
          "997:      || (pParse->db->flags & SQLITE_TrustedSchema)==0",
          "998:     ){",
          "",
          "[Removed Lines]",
          "993:   if( (pDef->funcFlags & (SQLITE_FUNC_DIRECT|SQLITE_FUNC_UNSAFE))!=0",
          "994:    && ExprHasProperty(pExpr, EP_FromDDL)",
          "995:   ){",
          "",
          "[Added Lines]",
          "993:   assert( (pDef->funcFlags & (SQLITE_FUNC_DIRECT|SQLITE_FUNC_UNSAFE))!=0 );",
          "994:   if( ExprHasProperty(pExpr, EP_FromDDL) ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4112:         assert( (pDef->funcFlags & SQLITE_FUNC_DIRECT)==0 );",
          "4113:         return exprCodeInlineFunction(pParse, pFarg,",
          "4114:              SQLITE_PTR_TO_INT(pDef->pUserData), target);",
          "4115:       }",
          "4118:       for(i=0; i<nFarg; i++){",
          "4119:         if( i<32 && sqlite3ExprIsConstant(pFarg->a[i].pExpr) ){",
          "",
          "[Removed Lines]",
          "4116:       sqlite3ExprFunctionUsable(pParse, pExpr, pDef);",
          "",
          "[Added Lines]",
          "4114:       }else if( pDef->funcFlags & (SQLITE_FUNC_DIRECT|SQLITE_FUNC_UNSAFE) ){",
          "4115:         sqlite3ExprFunctionUsable(pParse, pExpr, pDef);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5778:             }else{",
          "5779:               pItem->iDistinct = -1;",
          "5780:             }",
          "5782:           }",
          "5783:         }",
          "",
          "[Removed Lines]",
          "5781:             sqlite3ExprFunctionUsable(pParse, pExpr, pItem->pFunc);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1107: #endif",
          "1109:       if( sqlite3GetBoolean(zRight, 0) ){",
          "1111:       }else{",
          "1112:         db->flags &= ~mask;",
          "1113:         if( mask==SQLITE_DeferFKs ) db->nDeferredImmCons = 0;",
          "",
          "[Removed Lines]",
          "1110:         db->flags |= (mask & ~(SQLITE_TrustedSchema));",
          "",
          "[Added Lines]",
          "1110:         db->flags |= mask;",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "889:           no_such_func = 1;",
          "890:           pDef = 0;",
          "891:         }",
          "892:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "891:         }else",
          "892:         if( (pDef->funcFlags & (SQLITE_FUNC_DIRECT|SQLITE_FUNC_UNSAFE))!=0",
          "893:          && !IN_RENAME_OBJECT",
          "894:         ){",
          "895:           sqlite3ExprFunctionUsable(pParse, pExpr, pDef);",
          "",
          "---------------"
        ],
        "test/tclsqlite.test||test/tclsqlite.test": [
          "File: test/tclsqlite.test -> test/tclsqlite.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "790: do_test 17.6.3 {",
          "791:   list [catch { db function xyz -n object ret } msg] $msg",
          "794: # 2019-02-28: The \"bind_fallback\" command.",
          "795: #",
          "",
          "[Removed Lines]",
          "792: } {1 {bad option \"-n\": must be -argcount, -deterministic, -directonly, or -returntype}}",
          "",
          "[Added Lines]",
          "792: } {1 {bad option \"-n\": must be -argcount, -deterministic, -directonly, -innocuous, or -returntype}}",
          "",
          "---------------"
        ],
        "test/trustschema1.test||test/trustschema1.test": [
          "File: test/trustschema1.test -> test/trustschema1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:   SELECT a, b, c FROM t1;",
          "42: } {1 {unsafe use of f2()}}",
          "44: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: do_catchsql_test 1.200 {",
          "45:   CREATE TABLE t2(a,b,c,CHECK(f3(c)==c));",
          "46: } {1 {unsafe use of f3()}}",
          "47: do_catchsql_test 1.210 {",
          "48:   PRAGMA trusted_schema=Off;",
          "49:   CREATE TABLE t2(a,b,c,CHECK(f2(c)==c));",
          "50: } {1 {unsafe use of f2()}}",
          "51: do_catchsql_test 1.211 {",
          "52:   PRAGMA trusted_schema=On;",
          "53:   CREATE TABLE t2(a,b,c,CHECK(f2(c)==c));",
          "54: } {0 {}}",
          "55: do_catchsql_test 1.220 {",
          "56:   INSERT INTO t2 VALUES(1,2,3);",
          "57:   SELECT * FROM t2;",
          "58: } {0 {1 2 3}}",
          "59: do_catchsql_test 1.230 {",
          "60:   PRAGMA trusted_schema=off;",
          "61:   INSERT INTO t2 VALUES(4,5,6);",
          "62: } {1 {unsafe use of f2()}}",
          "63: do_execsql_test 1.231 {",
          "64:   SELECT * FROM t2;",
          "65: } {1 2 3}",
          "67: do_catchsql_test 1.300 {",
          "68:   CREATE TABLE t3(a,b DEFAULT(f2(25)));",
          "69: } {0 {}}",
          "70: do_catchsql_test 1.310 {",
          "71:   PRAGMA trusted_schema=Off;",
          "72:   INSERT INTO t3(a) VALUES(1);",
          "73: } {1 {unsafe use of f2()}}",
          "74: do_catchsql_test 1.311 {",
          "75:   INSERT INTO t3(a,b) VALUES(1,2);",
          "76: } {0 {}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}