{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ab3724997594761d318b6e58f65e510f50b8d0e3",
      "candidate_info": {
        "commit_hash": "ab3724997594761d318b6e58f65e510f50b8d0e3",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/ab3724997594761d318b6e58f65e510f50b8d0e3",
        "files": [
          "src/unix/stream.c"
        ],
        "message": "unix: nicer error message when kqueue() fails\n\nPrint the error message rather than just the errno.  The fact that the\nerrno is 24 is only informative to people that have their operating\nsystem's error codes memorized.",
        "before_after_code_files": [
          "src/unix/stream.c||src/unix/stream.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/stream.c||src/unix/stream.c": [
          "File: src/unix/stream.c -> src/unix/stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "299:   kq = kqueue();",
          "300:   if (kq == -1) {",
          "302:     return -errno;",
          "303:   }",
          "",
          "[Removed Lines]",
          "301:     fprintf(stderr, \"(libuv) Failed to create kqueue (%d)\\n\", errno);",
          "",
          "[Added Lines]",
          "301:     perror(\"(libuv) kqueue()\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b9b386ac5a8bf772af95e7238c3f0b6673626923",
      "candidate_info": {
        "commit_hash": "b9b386ac5a8bf772af95e7238c3f0b6673626923",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/b9b386ac5a8bf772af95e7238c3f0b6673626923",
        "files": [
          "include/uv.h"
        ],
        "message": "doc: grammar, udp documentation fix up",
        "before_after_code_files": [
          "include/uv.h||include/uv.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h"
        ]
      }
    },
    {
      "candidate_hash": "7d8504cf691325698a998cd55062156296185989",
      "candidate_info": {
        "commit_hash": "7d8504cf691325698a998cd55062156296185989",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/7d8504cf691325698a998cd55062156296185989",
        "files": [
          "src/queue.h"
        ],
        "message": "queue: fix pointer truncation on LLP64 platforms\n\nQUEUE_DATA used to cast a pointer to long and back to pointer. This can\ncorrupt pointers on systems where the long type isn't large enough to\nstore pointer, like Windows x64. This commit fixes that.\n\nFixes #835",
        "before_after_code_files": [
          "src/queue.h||src/queue.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/queue.h||src/queue.h": [
          "File: src/queue.h -> src/queue.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #ifndef QUEUE_H_",
          "17: #define QUEUE_H_",
          "19: typedef void *QUEUE[2];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #include <stdint.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28: #define QUEUE_DATA(ptr, type, field)                                          \\",
          "31: #define QUEUE_FOREACH(q, h)                                                   \\",
          "32:   for ((q) = (QUEUE *) (*(h))[0]; (q) != (h); (q) = (QUEUE *) (*(q))[0])",
          "",
          "[Removed Lines]",
          "29:   ((type *) ((char *) (ptr) - ((long) &((type *) 0)->field)))",
          "",
          "[Added Lines]",
          "31:   ((type *) ((char *) (ptr) - ((uintptr_t) &((type *) 0)->field)))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f2ab62ec106f5e7880f76fe6d8f4f1dad1dfe7f9",
      "candidate_info": {
        "commit_hash": "f2ab62ec106f5e7880f76fe6d8f4f1dad1dfe7f9",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/f2ab62ec106f5e7880f76fe6d8f4f1dad1dfe7f9",
        "files": [
          "include/uv-errno.h",
          "include/uv.h",
          "src/win/error.c"
        ],
        "message": "include: add E2BIG status code mapping\n\nForgotten in commit 3ee4d3f.  Add it now and renumber the other status\ncodes.  The Windows status code mappings may not be exhaustive.\n\nFixes #959.",
        "before_after_code_files": [
          "include/uv-errno.h||include/uv-errno.h",
          "include/uv.h||include/uv.h",
          "src/win/error.c||src/win/error.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv-errno.h||include/uv-errno.h": [
          "File: include/uv-errno.h -> include/uv-errno.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: #if defined(EACCES) && !defined(_WIN32)",
          "48: # define UV__EACCES (-EACCES)",
          "49: #else",
          "51: #endif",
          "53: #if defined(EADDRINFO) && !defined(_WIN32)",
          "54: # define UV__EADDRINFO EADDRINFO",
          "55: #else",
          "57: #endif",
          "59: #if defined(EADDRINUSE) && !defined(_WIN32)",
          "60: # define UV__EADDRINUSE (-EADDRINUSE)",
          "61: #else",
          "63: #endif",
          "65: #if defined(EADDRNOTAVAIL) && !defined(_WIN32)",
          "66: # define UV__EADDRNOTAVAIL (-EADDRNOTAVAIL)",
          "67: #else",
          "69: #endif",
          "71: #if defined(EAFNOSUPPORT) && !defined(_WIN32)",
          "72: # define UV__EAFNOSUPPORT (-EAFNOSUPPORT)",
          "73: #else",
          "75: #endif",
          "77: #if defined(EAGAIN) && !defined(_WIN32)",
          "78: # define UV__EAGAIN (-EAGAIN)",
          "79: #else",
          "81: #endif",
          "83: #if defined(EALREADY) && !defined(_WIN32)",
          "84: # define UV__EALREADY (-EALREADY)",
          "85: #else",
          "87: #endif",
          "89: #if defined(EBADF) && !defined(_WIN32)",
          "90: # define UV__EBADF (-EBADF)",
          "91: #else",
          "93: #endif",
          "95: #if defined(EBUSY) && !defined(_WIN32)",
          "96: # define UV__EBUSY (-EBUSY)",
          "97: #else",
          "99: #endif",
          "101: #if defined(ECANCELED) && !defined(_WIN32)",
          "102: # define UV__ECANCELED (-ECANCELED)",
          "103: #else",
          "105: #endif",
          "107: #if defined(ECHARSET) && !defined(_WIN32)",
          "108: # define UV__ECHARSET (-ECHARSET)",
          "109: #else",
          "111: #endif",
          "113: #if defined(ECONNABORTED) && !defined(_WIN32)",
          "114: # define UV__ECONNABORTED (-ECONNABORTED)",
          "115: #else",
          "117: #endif",
          "119: #if defined(ECONNREFUSED) && !defined(_WIN32)",
          "120: # define UV__ECONNREFUSED (-ECONNREFUSED)",
          "121: #else",
          "123: #endif",
          "125: #if defined(ECONNRESET) && !defined(_WIN32)",
          "126: # define UV__ECONNRESET (-ECONNRESET)",
          "127: #else",
          "129: #endif",
          "131: #if defined(EDESTADDRREQ) && !defined(_WIN32)",
          "132: # define UV__EDESTADDRREQ (-EDESTADDRREQ)",
          "133: #else",
          "135: #endif",
          "137: #if defined(EEXIST) && !defined(_WIN32)",
          "138: # define UV__EEXIST (-EEXIST)",
          "139: #else",
          "141: #endif",
          "143: #if defined(EFAULT) && !defined(_WIN32)",
          "144: # define UV__EFAULT (-EFAULT)",
          "145: #else",
          "147: #endif",
          "149: #if defined(EHOSTUNREACH) && !defined(_WIN32)",
          "150: # define UV__EHOSTUNREACH (-EHOSTUNREACH)",
          "151: #else",
          "153: #endif",
          "155: #if defined(EINTR) && !defined(_WIN32)",
          "156: # define UV__EINTR (-EINTR)",
          "157: #else",
          "159: #endif",
          "161: #if defined(EINVAL) && !defined(_WIN32)",
          "162: # define UV__EINVAL (-EINVAL)",
          "163: #else",
          "165: #endif",
          "167: #if defined(EIO) && !defined(_WIN32)",
          "168: # define UV__EIO (-EIO)",
          "169: #else",
          "171: #endif",
          "173: #if defined(EISCONN) && !defined(_WIN32)",
          "174: # define UV__EISCONN (-EISCONN)",
          "175: #else",
          "177: #endif",
          "179: #if defined(EISDIR) && !defined(_WIN32)",
          "180: # define UV__EISDIR (-EISDIR)",
          "181: #else",
          "183: #endif",
          "185: #if defined(ELOOP) && !defined(_WIN32)",
          "186: # define UV__ELOOP (-ELOOP)",
          "187: #else",
          "189: #endif",
          "191: #if defined(EMFILE) && !defined(_WIN32)",
          "192: # define UV__EMFILE (-EMFILE)",
          "193: #else",
          "195: #endif",
          "197: #if defined(EMSGSIZE) && !defined(_WIN32)",
          "198: # define UV__EMSGSIZE (-EMSGSIZE)",
          "199: #else",
          "201: #endif",
          "203: #if defined(ENAMETOOLONG) && !defined(_WIN32)",
          "204: # define UV__ENAMETOOLONG (-ENAMETOOLONG)",
          "205: #else",
          "207: #endif",
          "209: #if defined(ENETDOWN) && !defined(_WIN32)",
          "210: # define UV__ENETDOWN (-ENETDOWN)",
          "211: #else",
          "213: #endif",
          "215: #if defined(ENETUNREACH) && !defined(_WIN32)",
          "216: # define UV__ENETUNREACH (-ENETUNREACH)",
          "217: #else",
          "219: #endif",
          "221: #if defined(ENFILE) && !defined(_WIN32)",
          "222: # define UV__ENFILE (-ENFILE)",
          "223: #else",
          "225: #endif",
          "227: #if defined(ENOBUFS) && !defined(_WIN32)",
          "228: # define UV__ENOBUFS (-ENOBUFS)",
          "229: #else",
          "231: #endif",
          "233: #if defined(ENODEV) && !defined(_WIN32)",
          "234: # define UV__ENODEV (-ENODEV)",
          "235: #else",
          "237: #endif",
          "239: #if defined(ENOENT) && !defined(_WIN32)",
          "240: # define UV__ENOENT (-ENOENT)",
          "241: #else",
          "243: #endif",
          "245: #if defined(ENOMEM) && !defined(_WIN32)",
          "246: # define UV__ENOMEM (-ENOMEM)",
          "247: #else",
          "249: #endif",
          "251: #if defined(ENONET) && !defined(_WIN32)",
          "252: # define UV__ENONET (-ENONET)",
          "253: #else",
          "255: #endif",
          "257: #if defined(ENOSPC) && !defined(_WIN32)",
          "258: # define UV__ENOSPC (-ENOSPC)",
          "259: #else",
          "261: #endif",
          "263: #if defined(ENOSYS) && !defined(_WIN32)",
          "264: # define UV__ENOSYS (-ENOSYS)",
          "265: #else",
          "267: #endif",
          "269: #if defined(ENOTCONN) && !defined(_WIN32)",
          "270: # define UV__ENOTCONN (-ENOTCONN)",
          "271: #else",
          "273: #endif",
          "275: #if defined(ENOTDIR) && !defined(_WIN32)",
          "276: # define UV__ENOTDIR (-ENOTDIR)",
          "277: #else",
          "279: #endif",
          "281: #if defined(ENOTEMPTY) && !defined(_WIN32)",
          "282: # define UV__ENOTEMPTY (-ENOTEMPTY)",
          "283: #else",
          "285: #endif",
          "287: #if defined(ENOTSOCK) && !defined(_WIN32)",
          "288: # define UV__ENOTSOCK (-ENOTSOCK)",
          "289: #else",
          "291: #endif",
          "293: #if defined(ENOTSUP) && !defined(_WIN32)",
          "294: # define UV__ENOTSUP (-ENOTSUP)",
          "295: #else",
          "297: #endif",
          "299: #if defined(EPERM) && !defined(_WIN32)",
          "300: # define UV__EPERM (-EPERM)",
          "301: #else",
          "303: #endif",
          "305: #if defined(EPIPE) && !defined(_WIN32)",
          "306: # define UV__EPIPE (-EPIPE)",
          "307: #else",
          "309: #endif",
          "311: #if defined(EPROTO) && !defined(_WIN32)",
          "312: # define UV__EPROTO (-EPROTO)",
          "313: #else",
          "315: #endif",
          "317: #if defined(EPROTONOSUPPORT) && !defined(_WIN32)",
          "318: # define UV__EPROTONOSUPPORT (-EPROTONOSUPPORT)",
          "319: #else",
          "321: #endif",
          "323: #if defined(EPROTOTYPE) && !defined(_WIN32)",
          "324: # define UV__EPROTOTYPE (-EPROTOTYPE)",
          "325: #else",
          "327: #endif",
          "329: #if defined(EROFS) && !defined(_WIN32)",
          "330: # define UV__EROFS (-EROFS)",
          "331: #else",
          "333: #endif",
          "335: #if defined(ESHUTDOWN) && !defined(_WIN32)",
          "336: # define UV__ESHUTDOWN (-ESHUTDOWN)",
          "337: #else",
          "339: #endif",
          "341: #if defined(ESPIPE) && !defined(_WIN32)",
          "342: # define UV__ESPIPE (-ESPIPE)",
          "343: #else",
          "345: #endif",
          "347: #if defined(ESRCH) && !defined(_WIN32)",
          "348: # define UV__ESRCH (-ESRCH)",
          "349: #else",
          "351: #endif",
          "353: #if defined(ETIMEDOUT) && !defined(_WIN32)",
          "354: # define UV__ETIMEDOUT (-ETIMEDOUT)",
          "355: #else",
          "357: #endif",
          "359: #if defined(EXDEV) && !defined(_WIN32)",
          "360: # define UV__EXDEV (-EXDEV)",
          "361: #else",
          "363: #endif",
          "",
          "[Removed Lines]",
          "50: # define UV__EACCES (-4093)",
          "56: # define UV__EADDRINFO (-4092)",
          "62: # define UV__EADDRINUSE (-4092)",
          "68: # define UV__EADDRNOTAVAIL (-4091)",
          "74: # define UV__EAFNOSUPPORT (-4090)",
          "80: # define UV__EAGAIN (-4089)",
          "86: # define UV__EALREADY (-4085)",
          "92: # define UV__EBADF (-4084)",
          "98: # define UV__EBUSY (-4083)",
          "104: # define UV__ECANCELED (-4082)",
          "110: # define UV__ECHARSET (-4081)",
          "116: # define UV__ECONNABORTED (-4080)",
          "122: # define UV__ECONNREFUSED (-4079)",
          "128: # define UV__ECONNRESET (-4078)",
          "134: # define UV__EDESTADDRREQ (-4077)",
          "140: # define UV__EEXIST (-4076)",
          "146: # define UV__EFAULT (-4075)",
          "152: # define UV__EHOSTUNREACH (-4074)",
          "158: # define UV__EINTR (-4073)",
          "164: # define UV__EINVAL (-4072)",
          "170: # define UV__EIO (-4071)",
          "176: # define UV__EISCONN (-4070)",
          "182: # define UV__EISDIR (-4069)",
          "188: # define UV__ELOOP (-4068)",
          "194: # define UV__EMFILE (-4067)",
          "200: # define UV__EMSGSIZE (-4066)",
          "206: # define UV__ENAMETOOLONG (-4065)",
          "212: # define UV__ENETDOWN (-4064)",
          "218: # define UV__ENETUNREACH (-4063)",
          "224: # define UV__ENFILE (-4062)",
          "230: # define UV__ENOBUFS (-4061)",
          "236: # define UV__ENODEV (-4060)",
          "242: # define UV__ENOENT (-4059)",
          "248: # define UV__ENOMEM (-4058)",
          "254: # define UV__ENONET (-4057)",
          "260: # define UV__ENOSPC (-4056)",
          "266: # define UV__ENOSYS (-4055)",
          "272: # define UV__ENOTCONN (-4054)",
          "278: # define UV__ENOTDIR (-4053)",
          "284: # define UV__ENOTEMPTY (-4052)",
          "290: # define UV__ENOTSOCK (-4051)",
          "296: # define UV__ENOTSUP (-4050)",
          "302: # define UV__EPERM (-4049)",
          "308: # define UV__EPIPE (-4048)",
          "314: # define UV__EPROTO (-4047)",
          "320: # define UV__EPROTONOSUPPORT (-4046)",
          "326: # define UV__EPROTOTYPE (-4045)",
          "332: # define UV__EROFS (-4044)",
          "338: # define UV__ESHUTDOWN (-4043)",
          "344: # define UV__ESPIPE (-4042)",
          "350: # define UV__ESRCH (-4041)",
          "356: # define UV__ETIMEDOUT (-4040)",
          "362: # define UV__EXDEV (-4038)",
          "",
          "[Added Lines]",
          "47: #if defined(E2BIG) && !defined(_WIN32)",
          "48: # define UV__E2BIG (-E2BIG)",
          "49: #else",
          "50: # define UV__E2BIG (-4093)",
          "51: #endif",
          "56: # define UV__EACCES (-4092)",
          "62: # define UV__EADDRINFO (-4091)",
          "68: # define UV__EADDRINUSE (-4091)",
          "74: # define UV__EADDRNOTAVAIL (-4090)",
          "80: # define UV__EAFNOSUPPORT (-4089)",
          "86: # define UV__EAGAIN (-4088)",
          "92: # define UV__EALREADY (-4084)",
          "98: # define UV__EBADF (-4083)",
          "104: # define UV__EBUSY (-4082)",
          "110: # define UV__ECANCELED (-4081)",
          "116: # define UV__ECHARSET (-4080)",
          "122: # define UV__ECONNABORTED (-4079)",
          "128: # define UV__ECONNREFUSED (-4078)",
          "134: # define UV__ECONNRESET (-4077)",
          "140: # define UV__EDESTADDRREQ (-4076)",
          "146: # define UV__EEXIST (-4075)",
          "152: # define UV__EFAULT (-4074)",
          "158: # define UV__EHOSTUNREACH (-4073)",
          "164: # define UV__EINTR (-4072)",
          "170: # define UV__EINVAL (-4071)",
          "176: # define UV__EIO (-4070)",
          "182: # define UV__EISCONN (-4069)",
          "188: # define UV__EISDIR (-4068)",
          "194: # define UV__ELOOP (-4067)",
          "200: # define UV__EMFILE (-4066)",
          "206: # define UV__EMSGSIZE (-4065)",
          "212: # define UV__ENAMETOOLONG (-4064)",
          "218: # define UV__ENETDOWN (-4063)",
          "224: # define UV__ENETUNREACH (-4062)",
          "230: # define UV__ENFILE (-4061)",
          "236: # define UV__ENOBUFS (-4060)",
          "242: # define UV__ENODEV (-4059)",
          "248: # define UV__ENOENT (-4058)",
          "254: # define UV__ENOMEM (-4057)",
          "260: # define UV__ENONET (-4056)",
          "266: # define UV__ENOSPC (-4055)",
          "272: # define UV__ENOSYS (-4054)",
          "278: # define UV__ENOTCONN (-4053)",
          "284: # define UV__ENOTDIR (-4052)",
          "290: # define UV__ENOTEMPTY (-4051)",
          "296: # define UV__ENOTSOCK (-4050)",
          "302: # define UV__ENOTSUP (-4049)",
          "308: # define UV__EPERM (-4048)",
          "314: # define UV__EPIPE (-4047)",
          "320: # define UV__EPROTO (-4046)",
          "326: # define UV__EPROTONOSUPPORT (-4045)",
          "332: # define UV__EPROTOTYPE (-4044)",
          "338: # define UV__EROFS (-4043)",
          "344: # define UV__ESHUTDOWN (-4042)",
          "350: # define UV__ESPIPE (-4041)",
          "356: # define UV__ESRCH (-4040)",
          "362: # define UV__ETIMEDOUT (-4039)",
          "368: # define UV__EXDEV (-4037)",
          "",
          "---------------"
        ],
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: #define UV_ERRNO_MAP(XX)                                                      \\",
          "65:   XX(EACCES, \"permission denied\")                                             \\",
          "66:   XX(EADDRINUSE, \"address already in use\")                                    \\",
          "67:   XX(EADDRNOTAVAIL, \"address not available\")                                  \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:   XX(E2BIG, \"argument list too long\")                                         \\",
          "",
          "---------------"
        ],
        "src/win/error.c||src/win/error.c": [
          "File: src/win/error.c -> src/win/error.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "162:     case WSAETIMEDOUT:                      return UV_ETIMEDOUT;",
          "163:     case ERROR_NOT_SAME_DEVICE:             return UV_EXDEV;",
          "164:     case ERROR_INVALID_FUNCTION:            return UV_EISDIR;",
          "165:     default:                                return UV_UNKNOWN;",
          "166:   }",
          "167: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165:     case ERROR_FILENAME_EXCED_RANGE:        return UV_E2BIG;",
          "166:     case ERROR_META_EXPANSION_TOO_LONG:     return UV_E2BIG;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "89fc7d80c46154976a0eeb53087f5c9539528c24",
      "candidate_info": {
        "commit_hash": "89fc7d80c46154976a0eeb53087f5c9539528c24",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/89fc7d80c46154976a0eeb53087f5c9539528c24",
        "files": [
          "src/win/getnameinfo.c"
        ],
        "message": "windows: fix buffer overflow on uv__getnameinfo_work()\n\nAccording to\nhttp://msdn.microsoft.com/en-us/library/windows/desktop/ms738531.aspx,\n\"NodeBufferSize\" and \"ServiceBufferSize\" parameters of GetNameInfoW()\nfunction are expected to represent the number of WCHAR, not the buffer size\nof memory layout.",
        "before_after_code_files": [
          "src/win/getnameinfo.c||src/win/getnameinfo.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/getnameinfo.c||src/win/getnameinfo.c": [
          "File: src/win/getnameinfo.c -> src/win/getnameinfo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:   ret = GetNameInfoW((struct sockaddr*)&req->storage,",
          "50:                      sizeof(req->storage),",
          "51:                      host,",
          "53:                      service,",
          "55:                      req->flags);",
          "56:   req->retcode = uv__getaddrinfo_translate_error(ret);",
          "",
          "[Removed Lines]",
          "52:                      sizeof(host),",
          "54:                      sizeof(service),",
          "",
          "[Added Lines]",
          "52:                      ARRAY_SIZE(host),",
          "54:                      ARRAY_SIZE(service),",
          "",
          "---------------"
        ]
      }
    }
  ]
}