{
  "cve_id": "CVE-2016-8610",
  "cve_desc": "A denial of service flaw was found in OpenSSL 0.9.8, 1.0.1, 1.0.2 through 1.0.2h, and 1.1.0 in the way the TLS/SSL protocol defined processing of ALERT packets during a connection handshake. A remote attacker could use this flaw to make a TLS/SSL server consume an excessive amount of CPU and fail to accept connections from other clients.",
  "repo": "openssl/openssl",
  "patch_hash": "af58be768ebb690f78530f796e92b8ae5c9a4401",
  "patch_info": {
    "commit_hash": "af58be768ebb690f78530f796e92b8ae5c9a4401",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/af58be768ebb690f78530f796e92b8ae5c9a4401",
    "files": [
      "include/openssl/ssl.h",
      "ssl/record/rec_layer_d1.c",
      "ssl/record/rec_layer_s3.c",
      "ssl/record/record.h",
      "ssl/record/record_locl.h",
      "ssl/ssl_err.c"
    ],
    "message": "Don't allow too many consecutive warning alerts\n\nCertain warning alerts are ignored if they are received. This can mean that\nno progress will be made if one peer continually sends those warning alerts.\nImplement a count so that we abort the connection if we receive too many.\n\nIssue reported by Shi Lei.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl.h||include/openssl/ssl.h",
      "ssl/record/rec_layer_d1.c||ssl/record/rec_layer_d1.c",
      "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
      "ssl/record/record.h||ssl/record/record.h",
      "ssl/record/record_locl.h||ssl/record/record_locl.h",
      "ssl/ssl_err.c||ssl/ssl_err.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl.h||include/openssl/ssl.h": [
      "File: include/openssl/ssl.h -> include/openssl/ssl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "2485: # define SSL_R_TLS_HEARTBEAT_PENDING                      366",
      "2486: # define SSL_R_TLS_ILLEGAL_EXPORTER_LABEL                 367",
      "2487: # define SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST             157",
      "2488: # define SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS             314",
      "2489: # define SSL_R_UNABLE_TO_FIND_PUBLIC_KEY_PARAMETERS       239",
      "2490: # define SSL_R_UNABLE_TO_LOAD_SSL3_MD5_ROUTINES           242",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488: # define SSL_R_TOO_MANY_WARN_ALERTS                       409",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_d1.c||ssl/record/rec_layer_d1.c": [
      "File: ssl/record/rec_layer_d1.c -> ssl/record/rec_layer_d1.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "443:         }",
      "444:     }",
      "448:     if (s->s3->change_cipher_spec /* set when we receive ChangeCipherSpec,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "450:     if (SSL3_RECORD_get_type(rr) != SSL3_RT_ALERT",
      "451:             && SSL3_RECORD_get_length(rr) != 0)",
      "452:         s->rlayer.alert_count = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "723:         if (alert_level == SSL3_AL_WARNING) {",
      "724:             s->s3->warn_alert = alert_descr;",
      "725:             if (alert_descr == SSL_AD_CLOSE_NOTIFY) {",
      "726: #ifndef OPENSSL_NO_SCTP",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "734:             s->rlayer.alert_count++;",
      "735:             if (s->rlayer.alert_count == MAX_WARN_ALERT_COUNT) {",
      "736:                 al = SSL_AD_UNEXPECTED_MESSAGE;",
      "737:                 SSLerr(SSL_F_DTLS1_READ_BYTES, SSL_R_TOO_MANY_WARN_ALERTS);",
      "738:                 goto f_err;",
      "739:             }",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
      "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1063:     } while (num_recs == 0);",
      "1064:     rr = &rr[curr_rec];",
      "1068:     if (s->s3->change_cipher_spec /* set when we receive ChangeCipherSpec,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1070:     if (SSL3_RECORD_get_type(rr) != SSL3_RT_ALERT",
      "1071:             && SSL3_RECORD_get_length(rr) != 0)",
      "1072:         s->rlayer.alert_count = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1333:         if (alert_level == SSL3_AL_WARNING) {",
      "1334:             s->s3->warn_alert = alert_descr;",
      "1335:             SSL3_RECORD_set_read(rr);",
      "1336:             if (alert_descr == SSL_AD_CLOSE_NOTIFY) {",
      "1337:                 s->shutdown |= SSL_RECEIVED_SHUTDOWN;",
      "1338:                 return (0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1345:             s->rlayer.alert_count++;",
      "1346:             if (s->rlayer.alert_count == MAX_WARN_ALERT_COUNT) {",
      "1347:                 al = SSL_AD_UNEXPECTED_MESSAGE;",
      "1348:                 SSLerr(SSL_F_SSL3_READ_BYTES, SSL_R_TOO_MANY_WARN_ALERTS);",
      "1349:                 goto f_err;",
      "1350:             }",
      "",
      "---------------"
    ],
    "ssl/record/record.h||ssl/record/record.h": [
      "File: ssl/record/record.h -> ssl/record/record.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "178:     unsigned char write_sequence[SEQ_NUM_SIZE];",
      "180:     unsigned int is_first_record;",
      "181:     DTLS_RECORD_LAYER *d;",
      "182: } RECORD_LAYER;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "182:     unsigned int alert_count;",
      "",
      "---------------"
    ],
    "ssl/record/record_locl.h||ssl/record/record_locl.h": [
      "File: ssl/record/record_locl.h -> ssl/record/record_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: #define RECORD_LAYER_get_rbuf(rl)               (&(rl)->rbuf)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: #define MAX_WARN_ALERT_COUNT    5",
      "",
      "---------------"
    ],
    "ssl/ssl_err.c||ssl/ssl_err.c": [
      "File: ssl/ssl_err.c -> ssl/ssl_err.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "617:      \"tls illegal exporter label\"},",
      "618:     {ERR_REASON(SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST),",
      "619:      \"tls invalid ecpointformat list\"},",
      "620:     {ERR_REASON(SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS),",
      "621:      \"unable to find ecdh parameters\"},",
      "622:     {ERR_REASON(SSL_R_UNABLE_TO_FIND_PUBLIC_KEY_PARAMETERS),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "620:     {ERR_REASON(SSL_R_TOO_MANY_WARN_ALERTS), \"too many warn alerts\"},",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e60ce9c4513c432705c84b0efebf1421ee769eee",
      "candidate_info": {
        "commit_hash": "e60ce9c4513c432705c84b0efebf1421ee769eee",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/e60ce9c4513c432705c84b0efebf1421ee769eee",
        "files": [
          "include/openssl/ssl.h",
          "ssl/record/rec_layer_s3.c",
          "ssl/record/ssl3_record.c",
          "ssl/ssl_err.c",
          "test/sslcorrupttest.c",
          "util/TLSProxy/Proxy.pm",
          "util/TLSProxy/Record.pm"
        ],
        "message": "Update the record layer to use TLSv1.3 style record construction\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
          "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
          "ssl/ssl_err.c||ssl/ssl_err.c",
          "test/sslcorrupttest.c||test/sslcorrupttest.c",
          "util/TLSProxy/Proxy.pm||util/TLSProxy/Proxy.pm",
          "util/TLSProxy/Record.pm||util/TLSProxy/Record.pm"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/openssl/ssl.h||include/openssl/ssl.h",
            "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ],
          "candidate": [
            "include/openssl/ssl.h||include/openssl/ssl.h",
            "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ]
        }
      },
      "candidate_diff": {
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2326: # define SSL_R_BAD_LENGTH                                 271",
          "2327: # define SSL_R_BAD_PACKET_LENGTH                          115",
          "2328: # define SSL_R_BAD_PROTOCOL_VERSION_NUMBER                116",
          "2329: # define SSL_R_BAD_RSA_ENCRYPT                            119",
          "2330: # define SSL_R_BAD_SIGNATURE                              123",
          "2331: # define SSL_R_BAD_SRP_A_LENGTH                           347",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2329: # define SSL_R_BAD_RECORD_TYPE                            443",
          "",
          "---------------"
        ],
        "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
          "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "790:         unsigned int version = s->version;",
          "791:         unsigned char *compressdata;",
          "792:         size_t maxcomplen;",
          "794:         SSL3_RECORD_set_type(&wr[j], type);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "793:         unsigned int rectype;",
          "800:         if (SSL_IS_TLS13(s) && s->enc_write_ctx != NULL)",
          "801:             rectype = SSL3_RT_APPLICATION_DATA;",
          "802:         else",
          "803:             rectype = type;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "803:         maxcomplen = pipelens[j] + (ssl_allow_compression(s)",
          "804:                                     ? SSL3_RT_MAX_COMPRESSED_OVERHEAD : 0);",
          "807:                 || !WPACKET_put_bytes_u16(&pkt[j], version)",
          "808:                 || !WPACKET_start_sub_packet_u16(&pkt[j])",
          "809:                 || (eivlen > 0",
          "",
          "[Removed Lines]",
          "806:         if (!WPACKET_put_bytes_u8(&pkt[j], type)",
          "",
          "[Added Lines]",
          "815:         if (!WPACKET_put_bytes_u8(&pkt[j], rectype)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "840:             SSL3_RECORD_reset_input(&wr[j]);",
          "841:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "855:         if (SSL_IS_TLS13(s) && s->enc_write_ctx != NULL) {",
          "856:             if (!WPACKET_put_bytes_u8(&pkt[j], type)) {",
          "857:                 SSLerr(SSL_F_DO_SSL3_WRITE, ERR_R_INTERNAL_ERROR);",
          "858:                 goto err;",
          "859:             }",
          "860:             SSL3_RECORD_add_length(&wr[j], 1);",
          "865:         }",
          "",
          "---------------"
        ],
        "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
          "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "279:                     }",
          "280:                 }",
          "282:                 if (rr[num_recs].length >",
          "283:                     SSL3_BUFFER_get_len(rbuf) - SSL3_RT_HEADER_LENGTH) {",
          "284:                     al = SSL_AD_RECORD_OVERFLOW;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "282:                 if (SSL_IS_TLS13(s) && s->enc_read_ctx != NULL",
          "283:                         && rr[num_recs].type != SSL3_RT_APPLICATION_DATA) {",
          "284:                     SSLerr(SSL_F_SSL3_GET_RECORD, SSL_R_BAD_RECORD_TYPE);",
          "285:                     al = SSL_AD_UNEXPECTED_MESSAGE;",
          "286:                     goto f_err;",
          "287:                 }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "504:             }",
          "505:         }",
          "507:         if (rr[j].length > SSL3_RT_MAX_PLAIN_LENGTH) {",
          "508:             al = SSL_AD_RECORD_OVERFLOW;",
          "509:             SSLerr(SSL_F_SSL3_GET_RECORD, SSL_R_DATA_LENGTH_TOO_LONG);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "515:         if (SSL_IS_TLS13(s) && s->enc_read_ctx != NULL) {",
          "516:             size_t end;",
          "518:             if (rr[j].length == 0) {",
          "519:                 al = SSL_AD_UNEXPECTED_MESSAGE;",
          "520:                 SSLerr(SSL_F_SSL3_GET_RECORD, SSL_R_BAD_RECORD_TYPE);",
          "521:                 goto f_err;",
          "522:             }",
          "525:             for (end = rr[j].length - 1; end > 0 && rr[j].data[end] == 0; end--)",
          "526:                 continue;",
          "528:             rr[j].length = end;",
          "529:             rr[j].type = rr[j].data[end];",
          "530:             if (rr[j].type != SSL3_RT_APPLICATION_DATA",
          "531:                     && rr[j].type != SSL3_RT_ALERT",
          "532:                     && rr[j].type != SSL3_RT_HANDSHAKE) {",
          "533:                 al = SSL_AD_UNEXPECTED_MESSAGE;",
          "534:                 SSLerr(SSL_F_SSL3_GET_RECORD, SSL_R_BAD_RECORD_TYPE);",
          "535:                 goto f_err;",
          "536:             }",
          "537:         }",
          "",
          "---------------"
        ],
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "357:     {ERR_REASON(SSL_R_BAD_PACKET_LENGTH), \"bad packet length\"},",
          "358:     {ERR_REASON(SSL_R_BAD_PROTOCOL_VERSION_NUMBER),",
          "359:      \"bad protocol version number\"},",
          "360:     {ERR_REASON(SSL_R_BAD_RSA_ENCRYPT), \"bad rsa encrypt\"},",
          "361:     {ERR_REASON(SSL_R_BAD_SIGNATURE), \"bad signature\"},",
          "362:     {ERR_REASON(SSL_R_BAD_SRP_A_LENGTH), \"bad srp a length\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "360:     {ERR_REASON(SSL_R_BAD_RECORD_TYPE), \"bad record type\"},",
          "",
          "---------------"
        ],
        "test/sslcorrupttest.c||test/sslcorrupttest.c": [
          "File: test/sslcorrupttest.c -> test/sslcorrupttest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: #include \"ssltestlib.h\"",
          "12: #include \"testutil.h\"",
          "14: static void copy_flags(BIO *bio)",
          "15: {",
          "16:     int flags;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: static int docorrupt = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:     BIO *next = BIO_next(bio);",
          "39:     char *copy;",
          "42:         copy = BUF_memdup(in, inl);",
          "43:         TEST_check(copy != NULL);",
          "",
          "[Removed Lines]",
          "41:     if (in[0] == SSL3_RT_APPLICATION_DATA) {",
          "",
          "[Added Lines]",
          "43:     if (docorrupt) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "186:     STACK_OF(SSL_CIPHER) *ciphers;",
          "187:     const SSL_CIPHER *currcipher;",
          "189:     printf(\"Starting Test %d, %s\\n\", testidx, cipher_list[testidx]);",
          "191:     if (!create_ssl_ctx_pair(TLS_server_method(), TLS_client_method(), &sctx,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "191:     docorrupt = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "242:         goto end;",
          "243:     }",
          "245:     if (SSL_write(client, junk, sizeof(junk)) < 0) {",
          "246:         printf(\"Unable to SSL_write\\n\");",
          "247:         ERR_print_errors_fp(stdout);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "249:     docorrupt = 1;",
          "",
          "---------------"
        ],
        "util/TLSProxy/Proxy.pm||util/TLSProxy/Proxy.pm": [
          "File: util/TLSProxy/Proxy.pm -> util/TLSProxy/Proxy.pm",
          "--- Hunk 1 ---",
          "[Context before]",
          "343:         if ($record->flight != $self->flight) {",
          "344:             next;",
          "345:         }",
          "347:     }",
          "349:     $self->{flight} = $self->{flight} + 1;",
          "",
          "[Removed Lines]",
          "346:         $packet .= $record->reconstruct_record();",
          "",
          "[Added Lines]",
          "346:         $packet .= $record->reconstruct_record($server);",
          "",
          "---------------"
        ],
        "util/TLSProxy/Record.pm||util/TLSProxy/Record.pm": [
          "File: util/TLSProxy/Record.pm -> util/TLSProxy/Record.pm",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:                 } else {",
          "117:                     $record->decrypt();",
          "118:                 }",
          "119:             }",
          "121:             push @record_list, $record;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "119:                 $record->encrypted(1);",
          "120:             }",
          "122:             if (TLSProxy::Proxy->is_tls13()) {",
          "123:                 print \"  Inner content type: \"",
          "124:                       .$record_type{$record->content_type()}.\"\\n\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "188:         decrypt_len => $decrypt_len,",
          "189:         data => $data,",
          "190:         decrypt_data => $decrypt_data,",
          "192:     };",
          "194:     return bless $self, $class;",
          "",
          "[Removed Lines]",
          "191:         orig_decrypt_data => $decrypt_data",
          "",
          "[Added Lines]",
          "197:         orig_decrypt_data => $decrypt_data,",
          "198:         encrypted => 0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "257:     #Throw away the MAC or TAG",
          "258:     $data = substr($data, 0, length($data) - $mactaglen);",
          "260:     $self->decrypt_data($data);",
          "261:     $self->decrypt_len(length($data));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "267:     if (TLSProxy::Proxy->is_tls13()) {",
          "268:         #Get the content type",
          "269:         my $content_type = unpack(\"C\", substr($data, length($data) - 1));",
          "270:         $self->content_type($content_type);",
          "271:         $data = substr($data, 0, length($data) - 1);",
          "272:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "267: sub reconstruct_record",
          "268: {",
          "269:     my $self = shift;",
          "270:     my $data;",
          "272:     if ($self->sslv2) {",
          "273:         $data = pack('n', $self->len | 0x8000);",
          "274:     } else {",
          "276:     }",
          "277:     $data .= $self->data;",
          "279:     return $data;",
          "280: }",
          "",
          "[Removed Lines]",
          "275:         $data = pack('Cnn', $self->content_type, $self->version, $self->len);",
          "",
          "[Added Lines]",
          "284:     my $server = shift;",
          "286:     my $tls13_enc = 0;",
          "291:         if (TLSProxy::Proxy->is_tls13() && $self->encrypted) {",
          "292:             $data = pack('Cnn', RT_APPLICATION_DATA, $self->version,",
          "293:                          $self->len + 1);",
          "294:             $tls13_enc = 1;",
          "295:         } else {",
          "296:             $data = pack('Cnn', $self->content_type, $self->version,",
          "297:                          $self->len);",
          "298:         }",
          "303:     if ($tls13_enc) {",
          "304:         $data .= pack('C', $self->content_type);",
          "305:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "285:     my $self = shift;",
          "286:     return $self->{flight};",
          "287: }",
          "293: sub sslv2",
          "294: {",
          "295:     my $self = shift;",
          "",
          "[Removed Lines]",
          "288: sub content_type",
          "289: {",
          "290:     my $self = shift;",
          "291:     return $self->{content_type};",
          "292: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "347:     }",
          "348:     return $self->{version};",
          "349: }",
          "350: 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "373: sub content_type",
          "374: {",
          "375:     my $self = shift;",
          "376:     if (@_) {",
          "377:       $self->{content_type} = shift;",
          "378:     }",
          "379:     return $self->{content_type};",
          "380: }",
          "381: sub encrypted",
          "382: {",
          "383:     my $self = shift;",
          "384:     if (@_) {",
          "385:       $self->{encrypted} = shift;",
          "386:     }",
          "387:     return $self->{encrypted};",
          "388: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b1834ad781ee445f5f580e5dcf4792b96ae08d1d",
      "candidate_info": {
        "commit_hash": "b1834ad781ee445f5f580e5dcf4792b96ae08d1d",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/b1834ad781ee445f5f580e5dcf4792b96ae08d1d",
        "files": [
          "include/openssl/ssl.h",
          "ssl/ssl_err.c",
          "ssl/statem/statem_srvr.c",
          "ssl/t1_lib.c"
        ],
        "message": "Add the key_share processing to the server side\n\nAt the moment the server doesn't yet do anything with this information.\nWe still need to send the server's key_share info back to the client. That\nwill happen in subsequent commits.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "ssl/ssl_err.c||ssl/ssl_err.c",
          "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c",
          "ssl/t1_lib.c||ssl/t1_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/openssl/ssl.h||include/openssl/ssl.h",
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ],
          "candidate": [
            "include/openssl/ssl.h||include/openssl/ssl.h",
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ]
        }
      },
      "candidate_diff": {
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2427: # define SSL_R_NO_SHARED_CIPHER                           193",
          "2428: # define SSL_R_NO_SHARED_SIGNATURE_ALGORITHMS             376",
          "2429: # define SSL_R_NO_SRTP_PROFILES                           359",
          "2430: # define SSL_R_NO_VALID_SCTS                              216",
          "2431: # define SSL_R_NO_VERIFY_COOKIE_CALLBACK                  403",
          "2432: # define SSL_R_NULL_SSL_CTX                               195",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2430: # define SSL_R_NO_SUITABLE_KEY_SHARE                      101",
          "",
          "---------------"
        ],
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "488:     {ERR_REASON(SSL_R_NO_SHARED_SIGNATURE_ALGORITHMS),",
          "489:      \"no shared signature algorithms\"},",
          "490:     {ERR_REASON(SSL_R_NO_SRTP_PROFILES), \"no srtp profiles\"},",
          "491:     {ERR_REASON(SSL_R_NO_VALID_SCTS), \"no valid scts\"},",
          "492:     {ERR_REASON(SSL_R_NO_VERIFY_COOKIE_CALLBACK),",
          "493:      \"no verify cookie callback\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "491:     {ERR_REASON(SSL_R_NO_SUITABLE_KEY_SHARE), \"no suitable key share\"},",
          "",
          "---------------"
        ],
        "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c": [
          "File: ssl/statem/statem_srvr.c -> ssl/statem/statem_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1263:         goto err;",
          "1264:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1267:     if (s->version == TLS1_3_VERSION && s->s3->peer_tmp == NULL) {",
          "1270:         al = SSL_AD_HANDSHAKE_FAILURE;",
          "1271:         SSLerr(SSL_F_TLS_PROCESS_CLIENT_HELLO, SSL_R_NO_SUITABLE_KEY_SHARE);",
          "1272:         goto f_err;",
          "1273:     }",
          "",
          "---------------"
        ],
        "ssl/t1_lib.c||ssl/t1_lib.c": [
          "File: ssl/t1_lib.c -> ssl/t1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2201:         }",
          "2202: #endif",
          "2203:         else if (currext->type == TLSEXT_TYPE_encrypt_then_mac",
          "2205:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "",
          "[Removed Lines]",
          "2204:                  && !(s->options & SSL_OP_NO_ENCRYPT_THEN_MAC))",
          "",
          "[Added Lines]",
          "2204:                  && !(s->options & SSL_OP_NO_ENCRYPT_THEN_MAC)) {",
          "2206:         } else if (currext->type == TLSEXT_TYPE_key_share",
          "2207:                    && s->version == TLS1_3_VERSION) {",
          "2208:             unsigned int group_id;",
          "2209:             PACKET key_share_list, encoded_pt;",
          "2210:             const unsigned char *curves;",
          "2211:             size_t num_curves, i;",
          "2212:             int group_nid;",
          "2213:             unsigned int curve_flags;",
          "2216:             if (s->s3->peer_tmp != NULL) {",
          "2218:                 SSLerr(SSL_F_SSL_SCAN_CLIENTHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "2219:                 return 0;",
          "2220:             }",
          "2222:             if (!PACKET_as_length_prefixed_2(&currext->data, &key_share_list)) {",
          "2224:                 SSLerr(SSL_F_SSL_SCAN_CLIENTHELLO_TLSEXT,",
          "2225:                        SSL_R_LENGTH_MISMATCH);",
          "2226:                 return 0;",
          "2227:             }",
          "2229:             while (PACKET_remaining(&key_share_list) > 0) {",
          "2230:                 if (!PACKET_get_net_2(&key_share_list, &group_id)",
          "2231:                         || !PACKET_get_length_prefixed_2(&key_share_list,",
          "2232:                                                          &encoded_pt)) {",
          "2234:                     SSLerr(SSL_F_SSL_SCAN_CLIENTHELLO_TLSEXT,",
          "2235:                            SSL_R_LENGTH_MISMATCH);",
          "2236:                     return 0;",
          "2237:                 }",
          "2240:                 if (!tls1_get_curvelist(s, 0, &curves, &num_curves)) {",
          "2242:                     SSLerr(SSL_F_SSL_SCAN_CLIENTHELLO_TLSEXT,",
          "2243:                            ERR_R_INTERNAL_ERROR);",
          "2244:                     return 0;",
          "2245:                 }",
          "2246:                 for (i = 0; i < num_curves; i++, curves += 2) {",
          "2247:                     unsigned int share_id = (curves[0] << 8) | (curves[1]);",
          "2248:                     if (group_id == share_id",
          "2249:                             && tls_curve_allowed(s, curves,",
          "2250:                                                  SSL_SECOP_CURVE_CHECK)) {",
          "2251:                         break;",
          "2252:                     }",
          "2253:                 }",
          "2255:                 if (i == num_curves) {",
          "2257:                     continue;",
          "2258:                 }",
          "2260:                 group_nid = tls1_ec_curve_id2nid(group_id, &curve_flags);",
          "2262:                 if (group_nid == 0) {",
          "2264:                     SSLerr(SSL_F_SSL_SCAN_CLIENTHELLO_TLSEXT,",
          "2265:                            SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS);",
          "2266:                     return 0;",
          "2267:                 }",
          "2269:                 if ((curve_flags & TLS_CURVE_TYPE) == TLS_CURVE_CUSTOM) {",
          "2271:                     EVP_PKEY *key = EVP_PKEY_new();",
          "2273:                     if (key == NULL || !EVP_PKEY_set_type(key, group_nid)) {",
          "2275:                         SSLerr(SSL_F_SSL_SCAN_CLIENTHELLO_TLSEXT, ERR_R_EVP_LIB);",
          "2276:                         EVP_PKEY_free(key);",
          "2277:                         return 0;",
          "2278:                     }",
          "2279:                     s->s3->peer_tmp = key;",
          "2280:                 } else {",
          "2282:                     EVP_PKEY_CTX *pctx = EVP_PKEY_CTX_new_id(EVP_PKEY_EC, NULL);",
          "2283:                     if (pctx == NULL",
          "2284:                         || EVP_PKEY_paramgen_init(pctx) <= 0",
          "2285:                         || EVP_PKEY_CTX_set_ec_paramgen_curve_nid(pctx,",
          "2286:                                                                   group_nid) <= 0",
          "2287:                         || EVP_PKEY_paramgen(pctx, &s->s3->peer_tmp) <= 0) {",
          "2289:                         SSLerr(SSL_F_SSL_SCAN_CLIENTHELLO_TLSEXT, ERR_R_EVP_LIB);",
          "2290:                         EVP_PKEY_CTX_free(pctx);",
          "2291:                         return 0;",
          "2292:                     }",
          "2293:                     EVP_PKEY_CTX_free(pctx);",
          "2294:                     pctx = NULL;",
          "2295:                 }",
          "2297:                 if (!EVP_PKEY_set1_tls_encodedpoint(s->s3->peer_tmp,",
          "2298:                         PACKET_data(&encoded_pt),",
          "2299:                         PACKET_remaining(&encoded_pt))) {",
          "2301:                     SSLerr(SSL_F_SSL_SCAN_CLIENTHELLO_TLSEXT, SSL_R_BAD_ECPOINT);",
          "2302:                     return 0;",
          "2303:                 }",
          "2304:             }",
          "2305:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "524420d8459fa07a8e4900bc9dfb558b215edbbd",
      "candidate_info": {
        "commit_hash": "524420d8459fa07a8e4900bc9dfb558b215edbbd",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/524420d8459fa07a8e4900bc9dfb558b215edbbd",
        "files": [
          "include/openssl/ssl.h",
          "ssl/ssl_err.c",
          "ssl/statem/statem_clnt.c",
          "ssl/statem/statem_lib.c"
        ],
        "message": "Check TLSv1.3 ServerHello, Finished and KeyUpdates are on record boundary\n\nIn TLSv1.3 the above messages signal a key change. The spec requires that\nthe end of these messages must align with a record boundary. We can detect\nthis by checking for decrypted but as yet unread record data sitting in\nOpenSSL buffers at the point where we process the messages.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2875)",
        "before_after_code_files": [
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "ssl/ssl_err.c||ssl/ssl_err.c",
          "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c",
          "ssl/statem/statem_lib.c||ssl/statem/statem_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/openssl/ssl.h||include/openssl/ssl.h",
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ],
          "candidate": [
            "include/openssl/ssl.h||include/openssl/ssl.h",
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ]
        }
      },
      "candidate_diff": {
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2575: # define SSL_R_MISSING_SRP_PARAM                          358",
          "2576: # define SSL_R_MISSING_TMP_DH_KEY                         171",
          "2577: # define SSL_R_MISSING_TMP_ECDH_KEY                       311",
          "2578: # define SSL_R_NO_CERTIFICATES_RETURNED                   176",
          "2579: # define SSL_R_NO_CERTIFICATE_ASSIGNED                    177",
          "2580: # define SSL_R_NO_CERTIFICATE_SET                         179",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2578: # define SSL_R_NOT_ON_RECORD_BOUNDARY                     182",
          "",
          "---------------"
        ],
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "625:     {ERR_REASON(SSL_R_MISSING_SRP_PARAM), \"can't find SRP server param\"},",
          "626:     {ERR_REASON(SSL_R_MISSING_TMP_DH_KEY), \"missing tmp dh key\"},",
          "627:     {ERR_REASON(SSL_R_MISSING_TMP_ECDH_KEY), \"missing tmp ecdh key\"},",
          "628:     {ERR_REASON(SSL_R_NO_CERTIFICATES_RETURNED), \"no certificates returned\"},",
          "629:     {ERR_REASON(SSL_R_NO_CERTIFICATE_ASSIGNED), \"no certificate assigned\"},",
          "630:     {ERR_REASON(SSL_R_NO_CERTIFICATE_SET), \"no certificate set\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "628:     {ERR_REASON(SSL_R_NOT_ON_RECORD_BOUNDARY), \"not on record boundary\"},",
          "",
          "---------------"
        ],
        "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
          "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1237:         goto f_err;",
          "1238:     }",
          "1242:     if (!PACKET_copy_bytes(pkt, s->s3->server_random, SSL3_RANDOM_SIZE)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1244:     if (SSL_IS_TLS13(s) && RECORD_LAYER_processed_read_pending(&s->rlayer)) {",
          "1245:         al = SSL_AD_UNEXPECTED_MESSAGE;",
          "1246:         SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_NOT_ON_RECORD_BOUNDARY);",
          "1247:         goto f_err;",
          "1248:     }",
          "",
          "---------------"
        ],
        "ssl/statem/statem_lib.c||ssl/statem/statem_lib.c": [
          "File: ssl/statem/statem_lib.c -> ssl/statem/statem_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "539:         goto err;",
          "540:     }",
          "542:     if (!PACKET_get_1(pkt, &updatetype)",
          "543:             || PACKET_remaining(pkt) != 0",
          "544:             || (updatetype != SSL_KEY_UPDATE_NOT_REQUESTED",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "546:     if (RECORD_LAYER_processed_read_pending(&s->rlayer)) {",
          "547:         al = SSL_AD_UNEXPECTED_MESSAGE;",
          "548:         SSLerr(SSL_F_TLS_PROCESS_KEY_UPDATE, SSL_R_NOT_ON_RECORD_BOUNDARY);",
          "549:         goto err;",
          "550:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "676:     if (s->server)",
          "677:         s->statem.cleanuphand = 1;",
          "680:     if (!SSL_IS_TLS13(s) && !s->s3->change_cipher_spec) {",
          "681:         al = SSL_AD_UNEXPECTED_MESSAGE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "693:     if (SSL_IS_TLS13(s) && RECORD_LAYER_processed_read_pending(&s->rlayer)) {",
          "694:         al = SSL_AD_UNEXPECTED_MESSAGE;",
          "695:         SSLerr(SSL_F_TLS_PROCESS_FINISHED, SSL_R_NOT_ON_RECORD_BOUNDARY);",
          "696:         goto f_err;",
          "697:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7d061fced39d72bd664d04e254c1e3ba6cf99fbc",
      "candidate_info": {
        "commit_hash": "7d061fced39d72bd664d04e254c1e3ba6cf99fbc",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/7d061fced39d72bd664d04e254c1e3ba6cf99fbc",
        "files": [
          "include/openssl/ssl.h",
          "include/openssl/ssl3.h",
          "ssl/ssl_err.c",
          "ssl/ssl_locl.h",
          "ssl/statem/extensions.c",
          "ssl/statem/extensions_clnt.c",
          "ssl/statem/extensions_srvr.c",
          "ssl/statem/statem_lib.c",
          "ssl/statem/statem_srvr.c"
        ],
        "message": "Add server side support for creating the Hello Retry Request message\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2341)",
        "before_after_code_files": [
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "include/openssl/ssl3.h||include/openssl/ssl3.h",
          "ssl/ssl_err.c||ssl/ssl_err.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h",
          "ssl/statem/extensions.c||ssl/statem/extensions.c",
          "ssl/statem/extensions_clnt.c||ssl/statem/extensions_clnt.c",
          "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c",
          "ssl/statem/statem_lib.c||ssl/statem/statem_lib.c",
          "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/openssl/ssl.h||include/openssl/ssl.h",
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ],
          "candidate": [
            "include/openssl/ssl.h||include/openssl/ssl.h",
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ]
        }
      },
      "candidate_diff": {
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "880:     TLS_ST_CR_ENCRYPTED_EXTENSIONS,",
          "881:     TLS_ST_CR_CERT_VRFY,",
          "882:     TLS_ST_SW_CERT_VRFY,",
          "884: } OSSL_HANDSHAKE_STATE;",
          "",
          "[Removed Lines]",
          "883:     TLS_ST_CR_HELLO_REQ",
          "",
          "[Added Lines]",
          "883:     TLS_ST_CR_HELLO_REQ,",
          "884:     TLS_ST_SW_HELLO_RETRY_REQUEST",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2300: # define SSL_F_TLS_CONSTRUCT_EXTENSIONS                   447",
          "2301: # define SSL_F_TLS_CONSTRUCT_FINISHED                     359",
          "2302: # define SSL_F_TLS_CONSTRUCT_HELLO_REQUEST                373",
          "2303: # define SSL_F_TLS_CONSTRUCT_NEW_SESSION_TICKET           428",
          "2304: # define SSL_F_TLS_CONSTRUCT_NEXT_PROTO                   426",
          "2305: # define SSL_F_TLS_CONSTRUCT_SERVER_CERTIFICATE           490",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2304: # define SSL_F_TLS_CONSTRUCT_HELLO_RETRY_REQUEST          510",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2502: # define SSL_R_NO_RENEGOTIATION                           339",
          "2503: # define SSL_R_NO_REQUIRED_DIGEST                         324",
          "2504: # define SSL_R_NO_SHARED_CIPHER                           193",
          "2505: # define SSL_R_NO_SHARED_SIGNATURE_ALGORITHMS             376",
          "2506: # define SSL_R_NO_SRTP_PROFILES                           359",
          "2507: # define SSL_R_NO_SUITABLE_KEY_SHARE                      101",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2507: # define SSL_R_NO_SHARED_GROUPS                           410",
          "",
          "---------------"
        ],
        "include/openssl/ssl3.h||include/openssl/ssl3.h": [
          "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "274: # define SSL3_MT_CLIENT_HELLO                    1",
          "275: # define SSL3_MT_SERVER_HELLO                    2",
          "276: # define SSL3_MT_NEWSESSION_TICKET               4",
          "277: # define SSL3_MT_ENCRYPTED_EXTENSIONS            8",
          "278: # define SSL3_MT_CERTIFICATE                     11",
          "279: # define SSL3_MT_SERVER_KEY_EXCHANGE             12",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "277: # define SSL3_MT_HELLO_RETRY_REQUEST             6",
          "",
          "---------------"
        ],
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "329:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_FINISHED), \"tls_construct_finished\"},",
          "330:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_HELLO_REQUEST),",
          "331:      \"tls_construct_hello_request\"},",
          "332:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_NEW_SESSION_TICKET),",
          "333:      \"tls_construct_new_session_ticket\"},",
          "334:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_NEXT_PROTO), \"tls_construct_next_proto\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "332:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_HELLO_RETRY_REQUEST),",
          "333:      \"tls_construct_hello_retry_request\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "603:     {ERR_REASON(SSL_R_NO_RENEGOTIATION), \"no renegotiation\"},",
          "604:     {ERR_REASON(SSL_R_NO_REQUIRED_DIGEST), \"no required digest\"},",
          "605:     {ERR_REASON(SSL_R_NO_SHARED_CIPHER), \"no shared cipher\"},",
          "606:     {ERR_REASON(SSL_R_NO_SHARED_SIGNATURE_ALGORITHMS),",
          "607:      \"no shared signature algorithms\"},",
          "608:     {ERR_REASON(SSL_R_NO_SRTP_PROFILES), \"no srtp profiles\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "608:     {ERR_REASON(SSL_R_NO_SHARED_GROUPS), \"no shared groups\"},",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1005:     unsigned char cert_verify_hash[EVP_MAX_MD_SIZE];",
          "1006:     size_t cert_verify_hash_len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1009:     int hello_retry_request;",
          "",
          "---------------"
        ],
        "ssl/statem/extensions.c||ssl/statem/extensions.c": [
          "File: ssl/statem/extensions.c -> ssl/statem/extensions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "979:             && (!s->hit",
          "980:                 || (s->ext.psk_kex_mode & TLSEXT_KEX_MODE_FLAG_KE) == 0)) {",
          "984:         SSLerr(SSL_F_FINAL_KEY_SHARE, SSL_R_NO_SUITABLE_KEY_SHARE);",
          "985:         return 0;",
          "986:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "982:         if (s->server && s->hello_retry_request == 0 && sent) {",
          "983:             s->hello_retry_request = 1;",
          "984:             return 1;",
          "985:         }",
          "993:     s->hello_retry_request = 0;",
          "",
          "---------------"
        ],
        "ssl/statem/extensions_clnt.c||ssl/statem/extensions_clnt.c": [
          "File: ssl/statem/extensions_clnt.c -> ssl/statem/extensions_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "164:     }",
          "166:     for (i = 0; i < num_curves; i++, pcurvestmp += 2) {",
          "168:             if (!WPACKET_put_bytes_u8(pkt, pcurvestmp[0])",
          "169:                 || !WPACKET_put_bytes_u8(pkt, pcurvestmp[1])) {",
          "170:                     SSLerr(SSL_F_TLS_CONSTRUCT_CTOS_SUPPORTED_GROUPS,",
          "",
          "[Removed Lines]",
          "167:         if (tls_curve_allowed(s, pcurves, SSL_SECOP_CURVE_SUPPORTED)) {",
          "",
          "[Added Lines]",
          "167:         if (tls_curve_allowed(s, pcurvestmp, SSL_SECOP_CURVE_SUPPORTED)) {",
          "",
          "---------------"
        ],
        "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c": [
          "File: ssl/statem/extensions_srvr.c -> ssl/statem/extensions_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:             return 0;",
          "117:         }",
          "119:         if (!PACKET_strndup(&hostname, &s->session->ext.hostname)) {",
          "121:             return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "119:         OPENSSL_free(s->session->ext.hostname);",
          "120:         s->session->ext.hostname = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "361:         }",
          "362:     } while (PACKET_remaining(&protocol_list) != 0);",
          "364:     if (!PACKET_memdup(&save_protocol_list,",
          "365:                        &s->s3->alpn_proposed, &s->s3->alpn_proposed_len)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "366:     OPENSSL_free(s->s3->alpn_proposed);",
          "367:     s->s3->alpn_proposed = NULL;",
          "368:     s->s3->alpn_proposed_len = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "659:         return 0;",
          "660:     }",
          "662:     if (!PACKET_memdup(&supported_groups_list,",
          "663:                        &s->session->ext.supportedgroups,",
          "664:                        &s->session->ext.supportedgroups_len)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "667:     OPENSSL_free(s->session->ext.supportedgroups);",
          "668:     s->session->ext.supportedgroups = NULL;",
          "669:     s->session->ext.supportedgroups_len = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1024:     EVP_PKEY *ckey = s->s3->peer_tmp, *skey = NULL;",
          "1026:     if (ckey == NULL) {",
          "1028:         if (!s->hit || !tls13_generate_handshake_secret(s, NULL, 0)) {",
          "1030:             SSLerr(SSL_F_TLS_CONSTRUCT_STOC_KEY_SHARE, ERR_R_INTERNAL_ERROR);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1036:         if (s->hello_retry_request) {",
          "1037:             const unsigned char *pcurves, *pcurvestmp, *clntcurves;",
          "1038:             size_t num_curves, clnt_num_curves, i;",
          "1041:             if (!tls1_get_curvelist(s, 1, &clntcurves, &clnt_num_curves)) {",
          "1043:                 SSLerr(SSL_F_TLS_CONSTRUCT_STOC_KEY_SHARE,",
          "1044:                        ERR_R_INTERNAL_ERROR);",
          "1045:                 return 0;",
          "1046:             }",
          "1049:             if (!tls1_get_curvelist(s, 0, &pcurves, &num_curves)) {",
          "1050:                 SSLerr(SSL_F_TLS_CONSTRUCT_STOC_KEY_SHARE,",
          "1051:                        ERR_R_INTERNAL_ERROR);",
          "1052:                 return 0;",
          "1053:             }",
          "1055:             if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_key_share)",
          "1056:                     || !WPACKET_start_sub_packet_u16(pkt)) {",
          "1057:                 SSLerr(SSL_F_TLS_CONSTRUCT_STOC_KEY_SHARE,",
          "1058:                        ERR_R_INTERNAL_ERROR);",
          "1059:                 return 0;",
          "1060:             }",
          "1063:             for (i = 0, pcurvestmp = pcurves; i < num_curves;",
          "1064:                  i++, pcurvestmp += 2) {",
          "1065:                 unsigned int group_id = pcurvestmp[0] << 8 | pcurvestmp[1];",
          "1067:                 if (check_in_list(s, group_id, clntcurves, clnt_num_curves,",
          "1068:                                   1)) {",
          "1069:                     if (!WPACKET_put_bytes_u16(pkt, group_id)) {",
          "1070:                         SSLerr(SSL_F_TLS_CONSTRUCT_STOC_KEY_SHARE,",
          "1071:                                ERR_R_INTERNAL_ERROR);",
          "1072:                         return 0;",
          "1073:                     }",
          "1074:                     break;",
          "1075:                 }",
          "1076:             }",
          "1077:             if (i == num_curves) {",
          "1080:                 SSLerr(SSL_F_TLS_CONSTRUCT_STOC_KEY_SHARE,",
          "1081:                        SSL_R_NO_SHARED_GROUPS);",
          "1082:                 return 0;",
          "1083:             }",
          "1084:             if (!WPACKET_close(pkt)) {",
          "1085:                 SSLerr(SSL_F_TLS_CONSTRUCT_STOC_KEY_SHARE,",
          "1086:                        ERR_R_INTERNAL_ERROR);",
          "1087:                 return 0;",
          "1088:             }",
          "1090:             return 1;",
          "1091:         }",
          "",
          "---------------"
        ],
        "ssl/statem/statem_lib.c||ssl/statem/statem_lib.c": [
          "File: ssl/statem/statem_lib.c -> ssl/statem/statem_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1435:     switch (server_version) {",
          "1436:     default:",
          "1452:     case TLS_ANY_VERSION:",
          "1453:         table = tls_version_table;",
          "1454:         break;",
          "",
          "[Removed Lines]",
          "1442:         if (version_cmp(s, client_version, s->version) < 0)",
          "1443:             return SSL_R_WRONG_SSL_VERSION;",
          "1451:         return 0;",
          "",
          "[Added Lines]",
          "1437:         if (!SSL_IS_TLS13(s)) {",
          "1438:             if (version_cmp(s, client_version, s->version) < 0)",
          "1439:                 return SSL_R_WRONG_SSL_VERSION;",
          "1447:             return 0;",
          "1448:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1503:         }",
          "1505:         if (best_vers > 0) {",
          "1506:             s->version = best_vers;",
          "1507:             s->method = best_method;",
          "1508:             return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1507:             if (SSL_IS_TLS13(s)) {",
          "1512:                 if (best_vers != TLS1_3_VERSION)",
          "1513:                     return SSL_R_UNSUPPORTED_PROTOCOL;",
          "1514:                 return 0;",
          "1515:             }",
          "",
          "---------------"
        ],
        "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c": [
          "File: ssl/statem/statem_srvr.c -> ssl/statem/statem_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "62: #include <openssl/md5.h>",
          "64: static int tls_construct_encrypted_extensions(SSL *s, WPACKET *pkt);",
          "65: static STACK_OF(SSL_CIPHER) *ssl_bytes_to_cipher_list(SSL *s,",
          "66:                                                       PACKET *cipher_suites,",
          "67:                                                       STACK_OF(SSL_CIPHER)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65: static int tls_construct_hello_retry_request(SSL *s, WPACKET *pkt);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:     default:",
          "96:         break;",
          "98:     case TLS_ST_SW_FINISHED:",
          "99:         if (s->s3->tmp.cert_request) {",
          "100:             if (mt == SSL3_MT_CERTIFICATE) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94:     case TLS_ST_SW_HELLO_RETRY_REQUEST:",
          "95:         if (mt == SSL3_MT_CLIENT_HELLO) {",
          "96:             st->hand_state = TLS_ST_SR_CLNT_HELLO;",
          "97:             return 1;",
          "98:         }",
          "99:         break;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "406:         return WRITE_TRAN_ERROR;",
          "408:     case TLS_ST_SR_CLNT_HELLO:",
          "410:         return WRITE_TRAN_CONTINUE;",
          "412:     case TLS_ST_SW_SRVR_HELLO:",
          "413:         st->hand_state = TLS_ST_SW_ENCRYPTED_EXTENSIONS;",
          "414:         return WRITE_TRAN_CONTINUE;",
          "",
          "[Removed Lines]",
          "409:         st->hand_state = TLS_ST_SW_SRVR_HELLO;",
          "",
          "[Added Lines]",
          "412:         if (s->hello_retry_request)",
          "413:             st->hand_state = TLS_ST_SW_HELLO_RETRY_REQUEST;",
          "414:         else",
          "415:             st->hand_state = TLS_ST_SW_SRVR_HELLO;",
          "418:     case TLS_ST_SW_HELLO_RETRY_REQUEST:",
          "419:         return WRITE_TRAN_FINISHED;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "694:         break;",
          "696:     case TLS_ST_SW_HELLO_REQ:",
          "697:         if (statem_flush(s) != 1)",
          "698:             return WORK_MORE_A;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "705:     case TLS_ST_SW_HELLO_RETRY_REQUEST:",
          "706:         if (statem_flush(s) != 1)",
          "707:             return WORK_MORE_A;",
          "708:         break;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "906:         break;",
          "907:     }",
          "909:     return 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "922:     case TLS_ST_SW_HELLO_RETRY_REQUEST:",
          "925:         break;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1200:     if (clienthello.isv2) {",
          "1201:         unsigned int mt;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1222:         if (!SSL_IS_FIRST_HANDSHAKE(s) || s->hello_retry_request) {",
          "1223:             al = SSL_AD_HANDSHAKE_FAILURE;",
          "1224:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_HELLO, SSL_R_UNEXPECTED_MESSAGE);",
          "1225:             goto f_err;",
          "1226:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1403:     if (protverr) {",
          "1404:         SSLerr(SSL_F_TLS_PROCESS_CLIENT_HELLO, protverr);",
          "1407:             s->version = s->client_version = clienthello.legacy_version;",
          "1408:         }",
          "",
          "[Removed Lines]",
          "1405:         if ((!s->enc_write_ctx && !s->write_hash)) {",
          "",
          "[Added Lines]",
          "1430:         if (SSL_IS_FIRST_HANDSHAKE(s)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3502:         return NULL;",
          "3503:     }",
          "3505:     if (sslv2format) {",
          "3506:         size_t numciphers = PACKET_remaining(cipher_suites) / n;",
          "3507:         PACKET sslv2ciphers = *cipher_suites;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3530:     OPENSSL_free(s->s3->tmp.ciphers_raw);",
          "3531:     s->s3->tmp.ciphers_raw = NULL;",
          "3532:     s->s3->tmp.ciphers_rawlen = 0;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3607:     sk_SSL_CIPHER_free(sk);",
          "3608:     return NULL;",
          "3609: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3640: static int tls_construct_hello_retry_request(SSL *s, WPACKET *pkt)",
          "3641: {",
          "3642:     int al;",
          "3648:     if (!WPACKET_put_bytes_u16(pkt, TLS1_3_VERSION_DRAFT)",
          "3649:             || !tls_construct_extensions(s, pkt, EXT_TLS1_3_HELLO_RETRY_REQUEST,",
          "3650:                                          NULL, 0, &al)) {",
          "3651:         ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "3652:         SSLerr(SSL_F_TLS_CONSTRUCT_HELLO_RETRY_REQUEST, ERR_R_INTERNAL_ERROR);",
          "3653:         ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "3654:         return 0;",
          "3655:     }",
          "3658:     SSL_SESSION_free(s->session);",
          "3659:     s->session = NULL;",
          "3660:     s->hit = 0;",
          "3662:     return 1;",
          "3663: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aefb925647175a310df73416c9c7253424a65106",
      "candidate_info": {
        "commit_hash": "aefb925647175a310df73416c9c7253424a65106",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/aefb925647175a310df73416c9c7253424a65106",
        "files": [
          "include/openssl/ssl.h",
          "ssl/record/rec_layer_d1.c",
          "ssl/ssl_err.c",
          "ssl/statem/statem_dtls.c"
        ],
        "message": "Don't attempt to send fragments > max_send_fragment in DTLS\n\nWe were allocating the write buffer based on the size of max_send_fragment,\nbut ignoring it when writing data. We should fragment handshake messages\nif they exceed max_send_fragment and reject application data writes that\nare too large.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3286)",
        "before_after_code_files": [
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "ssl/record/rec_layer_d1.c||ssl/record/rec_layer_d1.c",
          "ssl/ssl_err.c||ssl/ssl_err.c",
          "ssl/statem/statem_dtls.c||ssl/statem/statem_dtls.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/openssl/ssl.h||include/openssl/ssl.h",
            "ssl/record/rec_layer_d1.c||ssl/record/rec_layer_d1.c",
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ],
          "candidate": [
            "include/openssl/ssl.h||include/openssl/ssl.h",
            "ssl/record/rec_layer_d1.c||ssl/record/rec_layer_d1.c",
            "ssl/ssl_err.c||ssl/ssl_err.c"
          ]
        }
      },
      "candidate_diff": {
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2607: # define SSL_R_ENCRYPTED_LENGTH_TOO_LONG                  150",
          "2608: # define SSL_R_ERROR_IN_RECEIVED_CIPHER_LIST              151",
          "2609: # define SSL_R_ERROR_SETTING_TLSA_BASE_DOMAIN             204",
          "2610: # define SSL_R_EXCESSIVE_MESSAGE_SIZE                     152",
          "2611: # define SSL_R_EXTRA_DATA_IN_MESSAGE                      153",
          "2612: # define SSL_R_EXT_LENGTH_MISMATCH                        163",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2610: # define SSL_R_EXCEEDS_MAX_FRAGMENT_SIZE                  194",
          "",
          "---------------"
        ],
        "ssl/record/rec_layer_d1.c||ssl/record/rec_layer_d1.c": [
          "File: ssl/record/rec_layer_d1.c -> ssl/record/rec_layer_d1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "882:     if (len == 0 && !create_empty_fragment)",
          "883:         return 0;",
          "885:     sess = s->session;",
          "887:     if ((sess == NULL) ||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "885:     if (len > s->max_send_fragment) {",
          "886:         SSLerr(SSL_F_DO_DTLS1_WRITE, SSL_R_EXCEEDS_MAX_FRAGMENT_SIZE);",
          "887:         return 0;",
          "888:     }",
          "",
          "---------------"
        ],
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "590:      \"error in received cipher list\"},",
          "591:     {ERR_REASON(SSL_R_ERROR_SETTING_TLSA_BASE_DOMAIN),",
          "592:      \"error setting tlsa base domain\"},",
          "593:     {ERR_REASON(SSL_R_EXCESSIVE_MESSAGE_SIZE), \"excessive message size\"},",
          "594:     {ERR_REASON(SSL_R_EXTRA_DATA_IN_MESSAGE), \"extra data in message\"},",
          "595:     {ERR_REASON(SSL_R_EXT_LENGTH_MISMATCH), \"ext length mismatch\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "593:     {ERR_REASON(SSL_R_EXCEEDS_MAX_FRAGMENT_SIZE),",
          "594:      \"exceeds max fragment size\"},",
          "",
          "---------------"
        ],
        "ssl/statem/statem_dtls.c||ssl/statem/statem_dtls.c": [
          "File: ssl/statem/statem_dtls.c -> ssl/statem/statem_dtls.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "214:         else",
          "215:             len = s->init_num;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217:         if (len > s->max_send_fragment)",
          "218:             len = s->max_send_fragment;",
          "",
          "---------------"
        ]
      }
    }
  ]
}