{
  "cve_id": "CVE-2021-41227",
  "cve_desc": "TensorFlow is an open source platform for machine learning. In affected versions the `ImmutableConst` operation in TensorFlow can be tricked into reading arbitrary memory contents. This is because the `tstring` TensorFlow string class has a special case for memory mapped strings but the operation itself does not offer any support for this datatype. The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "3712a2d3455e6ccb924daa5724a3652a86f6b585",
  "patch_info": {
    "commit_hash": "3712a2d3455e6ccb924daa5724a3652a86f6b585",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/3712a2d3455e6ccb924daa5724a3652a86f6b585",
    "files": [
      "tensorflow/core/platform/ctstring_internal.h",
      "tensorflow/core/platform/ctstring_test.cc"
    ],
    "message": "Fix macros for converting little endian to host for TF_TSRT_OFFSET GetSize\n\nMake the macro that converts little endian data do nothing on little endian hosts,\nand byte swap otherwise.\nThis only affects getting the size of TStrings of type \"Offset\".\n\nAdded a test for TStrings of type \"Offset\" that checks if type and size are consistent.\n\nPiperOrigin-RevId: 400789721\nChange-Id: I1398bffd842ab1631614b212b7c3a2af88d99538",
    "before_after_code_files": [
      "tensorflow/core/platform/ctstring_internal.h||tensorflow/core/platform/ctstring_internal.h",
      "tensorflow/core/platform/ctstring_test.cc||tensorflow/core/platform/ctstring_test.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/platform/ctstring_internal.h||tensorflow/core/platform/ctstring_internal.h": [
      "File: tensorflow/core/platform/ctstring_internal.h -> tensorflow/core/platform/ctstring_internal.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "63: #endif",
      "65: #if TF_TSTRING_LITTLE_ENDIAN",
      "68: #define TF_le32toh(x) x",
      "69: #endif  // TF_TSTRING_LITTLE_ENDIAN",
      "71: static inline size_t TF_align16(size_t i) { return (i + 0xF) & ~0xF; }",
      "",
      "[Removed Lines]",
      "66: #define TF_le32toh(x) TF_swap32(x)",
      "67: #else  // TF_TSTRING_LITTLE_ENDIAN",
      "",
      "[Added Lines]",
      "67: #else  // TF_TSTRING_LITTLE_ENDIAN",
      "68: #define TF_le32toh(x) TF_swap32(x)",
      "",
      "---------------"
    ],
    "tensorflow/core/platform/ctstring_test.cc||tensorflow/core/platform/ctstring_test.cc": [
      "File: tensorflow/core/platform/ctstring_test.cc -> tensorflow/core/platform/ctstring_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: #include <memory>",
      "19: #include <string>",
      "21: #include \"tensorflow/core/platform/test.h\"",
      "23: static const char kLongString[] =",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21: #include \"tensorflow/core/platform/ctstring_internal.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "380:     TF_TString_Dealloc(&s70);",
      "381:   }",
      "382: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "385: TEST(TF_CTStringTest, OffsetType) {",
      "386:   {",
      "387:     TF_TString s71;",
      "389:     TF_TString_Init(&s71);",
      "390:     size_t header_length = 24;",
      "391:     size_t size = 8;",
      "392:     TF_TString_ResizeUninitialized(&s71, header_length + size);",
      "393:     uint32_t save_size = s71.u.offset.size;",
      "394:     uint32_t save_offset = s71.u.offset.offset;",
      "395:     uint32_t save_count = s71.u.offset.count;",
      "397:     s71.u.offset.size = TF_TString_ToInternalSizeT(size, TF_TSTR_OFFSET);",
      "398:     s71.u.offset.offset = header_length;",
      "399:     s71.u.offset.count = 0;",
      "400:     EXPECT_EQ(size, TF_TString_GetSize(&s71));",
      "401:     EXPECT_EQ(TF_TSTR_OFFSET, TF_TString_GetType(&s71));",
      "404:     s71.u.offset.size = save_size;",
      "405:     s71.u.offset.offset = save_offset;",
      "406:     s71.u.offset.count = save_count;",
      "407:     TF_TString_Dealloc(&s71);",
      "408:   }",
      "409: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "995d2015c6e4e62fe9d8fb8085a245a40c54dbda",
      "candidate_info": {
        "commit_hash": "995d2015c6e4e62fe9d8fb8085a245a40c54dbda",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/995d2015c6e4e62fe9d8fb8085a245a40c54dbda",
        "files": [
          "tensorflow/core/platform/ctstring_internal.h",
          "tensorflow/core/platform/ctstring_test.cc"
        ],
        "message": "Fix macros for converting little endian to host for TF_TSRT_OFFSET GetSize\n\nMake the macro that converts little endian data do nothing on little endian hosts,\nand byte swap otherwise.\nThis only affects getting the size of TStrings of type \"Offset\".\n\nAdded a test for TStrings of type \"Offset\" that checks if type and size are consistent.\n\nPiperOrigin-RevId: 400789721\nChange-Id: I1398bffd842ab1631614b212b7c3a2af88d99538",
        "before_after_code_files": [
          "tensorflow/core/platform/ctstring_internal.h||tensorflow/core/platform/ctstring_internal.h",
          "tensorflow/core/platform/ctstring_test.cc||tensorflow/core/platform/ctstring_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/platform/ctstring_internal.h||tensorflow/core/platform/ctstring_internal.h",
            "tensorflow/core/platform/ctstring_test.cc||tensorflow/core/platform/ctstring_test.cc"
          ],
          "candidate": [
            "tensorflow/core/platform/ctstring_internal.h||tensorflow/core/platform/ctstring_internal.h",
            "tensorflow/core/platform/ctstring_test.cc||tensorflow/core/platform/ctstring_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/platform/ctstring_internal.h||tensorflow/core/platform/ctstring_internal.h": [
          "File: tensorflow/core/platform/ctstring_internal.h -> tensorflow/core/platform/ctstring_internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: #endif",
          "65: #if TF_TSTRING_LITTLE_ENDIAN",
          "68: #define TF_le32toh(x) x",
          "69: #endif  // TF_TSTRING_LITTLE_ENDIAN",
          "71: static inline size_t TF_align16(size_t i) { return (i + 0xF) & ~0xF; }",
          "",
          "[Removed Lines]",
          "66: #define TF_le32toh(x) TF_swap32(x)",
          "67: #else  // TF_TSTRING_LITTLE_ENDIAN",
          "",
          "[Added Lines]",
          "67: #else  // TF_TSTRING_LITTLE_ENDIAN",
          "68: #define TF_le32toh(x) TF_swap32(x)",
          "",
          "---------------"
        ],
        "tensorflow/core/platform/ctstring_test.cc||tensorflow/core/platform/ctstring_test.cc": [
          "File: tensorflow/core/platform/ctstring_test.cc -> tensorflow/core/platform/ctstring_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include <memory>",
          "19: #include <string>",
          "21: #include \"tensorflow/core/platform/test.h\"",
          "23: static const char kLongString[] =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #include \"tensorflow/core/platform/ctstring_internal.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "329:     TF_TString_Dealloc(&s70);",
          "330:   }",
          "331: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "334: TEST(TF_CTStringTest, OffsetType) {",
          "335:   {",
          "336:     TF_TString s71;",
          "338:     TF_TString_Init(&s71);",
          "339:     size_t header_length = 24;",
          "340:     size_t size = 8;",
          "341:     TF_TString_ResizeUninitialized(&s71, header_length + size);",
          "342:     uint32_t save_size = s71.u.offset.size;",
          "343:     uint32_t save_offset = s71.u.offset.offset;",
          "344:     uint32_t save_count = s71.u.offset.count;",
          "346:     s71.u.offset.size = TF_TString_ToInternalSizeT(size, TF_TSTR_OFFSET);",
          "347:     s71.u.offset.offset = header_length;",
          "348:     s71.u.offset.count = 0;",
          "349:     EXPECT_EQ(size, TF_TString_GetSize(&s71));",
          "350:     EXPECT_EQ(TF_TSTR_OFFSET, TF_TString_GetType(&s71));",
          "353:     s71.u.offset.size = save_size;",
          "354:     s71.u.offset.offset = save_offset;",
          "355:     s71.u.offset.count = save_count;",
          "356:     TF_TString_Dealloc(&s71);",
          "357:   }",
          "358: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}