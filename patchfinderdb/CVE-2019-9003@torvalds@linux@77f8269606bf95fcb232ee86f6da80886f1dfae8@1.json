{
  "cve_id": "CVE-2019-9003",
  "cve_desc": "In the Linux kernel before 4.20.5, attackers can trigger a drivers/char/ipmi/ipmi_msghandler.c use-after-free and OOPS by arranging for certain simultaneous execution of the code, as demonstrated by a \"service ipmievd restart\" loop.",
  "repo": "torvalds/linux",
  "patch_hash": "77f8269606bf95fcb232ee86f6da80886f1dfae8",
  "patch_info": {
    "commit_hash": "77f8269606bf95fcb232ee86f6da80886f1dfae8",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/77f8269606bf95fcb232ee86f6da80886f1dfae8",
    "files": [
      "drivers/char/ipmi/ipmi_msghandler.c"
    ],
    "message": "ipmi: fix use-after-free of user->release_barrier.rda\n\nWhen we do the following test, we got oops in ipmi_msghandler driver\nwhile((1))\ndo\n\tservice ipmievd restart & service ipmievd restart\ndone\n\n---------------------------------------------------------------\n[  294.230186] Unable to handle kernel paging request at virtual address 0000803fea6ea008\n[  294.230188] Mem abort info:\n[  294.230190]   ESR = 0x96000004\n[  294.230191]   Exception class = DABT (current EL), IL = 32 bits\n[  294.230193]   SET = 0, FnV = 0\n[  294.230194]   EA = 0, S1PTW = 0\n[  294.230195] Data abort info:\n[  294.230196]   ISV = 0, ISS = 0x00000004\n[  294.230197]   CM = 0, WnR = 0\n[  294.230199] user pgtable: 4k pages, 48-bit VAs, pgdp = 00000000a1c1b75a\n[  294.230201] [0000803fea6ea008] pgd=0000000000000000\n[  294.230204] Internal error: Oops: 96000004 [#1] SMP\n[  294.235211] Modules linked in: nls_utf8 isofs rpcrdma ib_iser ib_srpt target_core_mod ib_srp scsi_transport_srp ib_ipoib rdma_ucm ib_umad rdma_cm ib_cm iw_cm dm_mirror dm_region_hash dm_log dm_mod aes_ce_blk crypto_simd cryptd aes_ce_cipher ghash_ce sha2_ce ses sha256_arm64 sha1_ce hibmc_drm hisi_sas_v2_hw enclosure sg hisi_sas_main sbsa_gwdt ip_tables mlx5_ib ib_uverbs marvell ib_core mlx5_core ixgbe ipmi_si mdio hns_dsaf ipmi_devintf ipmi_msghandler hns_enet_drv hns_mdio\n[  294.277745] CPU: 3 PID: 0 Comm: swapper/3 Kdump: loaded Not tainted 5.0.0-rc2+ #113\n[  294.285511] Hardware name: Huawei TaiShan 2280 /BC11SPCD, BIOS 1.37 11/21/2017\n[  294.292835] pstate: 80000005 (Nzcv daif -PAN -UAO)\n[  294.297695] pc : __srcu_read_lock+0x38/0x58\n[  294.301940] lr : acquire_ipmi_user+0x2c/0x70 [ipmi_msghandler]\n[  294.307853] sp : ffff00001001bc80\n[  294.311208] x29: ffff00001001bc80 x28: ffff0000117e5000\n[  294.316594] x27: 0000000000000000 x26: dead000000000100\n[  294.321980] x25: dead000000000200 x24: ffff803f6bd06800\n[  294.327366] x23: 0000000000000000 x22: 0000000000000000\n[  294.332752] x21: ffff00001001bd04 x20: ffff80df33d19018\n[  294.338137] x19: ffff80df33d19018 x18: 0000000000000000\n[  294.343523] x17: 0000000000000000 x16: 0000000000000000\n[  294.348908] x15: 0000000000000000 x14: 0000000000000002\n[  294.354293] x13: 0000000000000000 x12: 0000000000000000\n[  294.359679] x11: 0000000000000000 x10: 0000000000100000\n[  294.365065] x9 : 0000000000000000 x8 : 0000000000000004\n[  294.370451] x7 : 0000000000000000 x6 : ffff80df34558678\n[  294.375836] x5 : 000000000000000c x4 : 0000000000000000\n[  294.381221] x3 : 0000000000000001 x2 : 0000803fea6ea000\n[  294.386607] x1 : 0000803fea6ea008 x0 : 0000000000000001\n[  294.391994] Process swapper/3 (pid: 0, stack limit = 0x0000000083087293)\n[  294.398791] Call trace:\n[  294.401266]  __srcu_read_lock+0x38/0x58\n[  294.405154]  acquire_ipmi_user+0x2c/0x70 [ipmi_msghandler]\n[  294.410716]  deliver_response+0x80/0xf8 [ipmi_msghandler]\n[  294.416189]  deliver_local_response+0x28/0x68 [ipmi_msghandler]\n[  294.422193]  handle_one_recv_msg+0x158/0xcf8 [ipmi_msghandler]\n[  294.432050]  handle_new_recv_msgs+0xc0/0x210 [ipmi_msghandler]\n[  294.441984]  smi_recv_tasklet+0x8c/0x158 [ipmi_msghandler]\n[  294.451618]  tasklet_action_common.isra.5+0x88/0x138\n[  294.460661]  tasklet_action+0x2c/0x38\n[  294.468191]  __do_softirq+0x120/0x2f8\n[  294.475561]  irq_exit+0x134/0x140\n[  294.482445]  __handle_domain_irq+0x6c/0xc0\n[  294.489954]  gic_handle_irq+0xb8/0x178\n[  294.497037]  el1_irq+0xb0/0x140\n[  294.503381]  arch_cpu_idle+0x34/0x1a8\n[  294.510096]  do_idle+0x1d4/0x290\n[  294.516322]  cpu_startup_entry+0x28/0x30\n[  294.523230]  secondary_start_kernel+0x184/0x1d0\n[  294.530657] Code: d538d082 d2800023 8b010c81 8b020021 (c85f7c25)\n[  294.539746] ---[ end trace 8a7a880dee570b29 ]---\n[  294.547341] Kernel panic - not syncing: Fatal exception in interrupt\n[  294.556837] SMP: stopping secondary CPUs\n[  294.563996] Kernel Offset: disabled\n[  294.570515] CPU features: 0x002,21006008\n[  294.577638] Memory Limit: none\n[  294.587178] Starting crashdump kernel...\n[  294.594314] Bye!\n\nBecause the user->release_barrier.rda is freed in ipmi_destroy_user(), but\nthe refcount is not zero, when acquire_ipmi_user() uses user->release_barrier.rda\nin __srcu_read_lock(), it causes oops.\nFix this by calling cleanup_srcu_struct() when the refcount is zero.\n\nFixes: e86ee2d44b44 (\"ipmi: Rework locking and shutdown for hot remove\")\nCc: stable@vger.kernel.org # 4.18\nSigned-off-by: Yang Yingliang <yangyingliang@huawei.com>\n\nSigned-off-by: Corey Minyard <cminyard@mvista.com>",
    "before_after_code_files": [
      "drivers/char/ipmi/ipmi_msghandler.c||drivers/char/ipmi/ipmi_msghandler.c"
    ]
  },
  "patch_diff": {
    "drivers/char/ipmi/ipmi_msghandler.c||drivers/char/ipmi/ipmi_msghandler.c": [
      "File: drivers/char/ipmi/ipmi_msghandler.c -> drivers/char/ipmi/ipmi_msghandler.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1184: static void free_user(struct kref *ref)",
      "1185: {",
      "1186:  struct ipmi_user *user = container_of(ref, struct ipmi_user, refcount);",
      "1187:  kfree(user);",
      "1188: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1187:  cleanup_srcu_struct(&user->release_barrier);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1260: {",
      "1261:  _ipmi_destroy_user(user);",
      "1264:  kref_put(&user->refcount, free_user);",
      "1266:  return 0;",
      "",
      "[Removed Lines]",
      "1263:  cleanup_srcu_struct(&user->release_barrier);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a2fcd5c84f7a7825e028381b10182439067aa90d",
      "candidate_info": {
        "commit_hash": "a2fcd5c84f7a7825e028381b10182439067aa90d",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/a2fcd5c84f7a7825e028381b10182439067aa90d",
        "files": [
          "drivers/gpu/drm/drm_modes.c"
        ],
        "message": "drm/modes: Prevent division by zero htotal\n\nThis patch prevents division by zero htotal.\n\nIn a follow-up mail Tina writes:\n\n> > How did you manage to get here with htotal == 0? This needs backtraces (or if\n> > this is just about static checkers, a mention of that).\n> > -Daniel\n>\n> In GVT-g, we are trying to enable a virtual display w/o setting timings for a pipe\n> (a.k.a htotal=0), then we met the following kernel panic:\n>\n> [   32.832048] divide error: 0000 [#1] SMP PTI\n> [   32.833614] CPU: 0 PID: 1 Comm: swapper/0 Not tainted 4.18.0-rc4-sriov+ #33\n> [   32.834438] Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS rel-1.10.1-0-g8891697-dirty-20180511_165818-tinazhang-linux-1 04/01/2014\n> [   32.835901] RIP: 0010:drm_mode_hsync+0x1e/0x40\n> [   32.836004] Code: 31 c0 c3 90 90 90 90 90 90 90 90 90 0f 1f 44 00 00 8b 87 d8 00 00 00 85 c0 75 22 8b 4f 68 85 c9 78 1b 69 47 58 e8 03 00 00 99 <f7> f9 b9 d3 4d 62 10 05 f4 01 00 00 f7 e1 89 d0 c1 e8 06 f3 c3 66\n> [   32.836004] RSP: 0000:ffffc900000ebb90 EFLAGS: 00010206\n> [   32.836004] RAX: 0000000000000000 RBX: ffff88001c67c8a0 RCX: 0000000000000000\n> [   32.836004] RDX: 0000000000000000 RSI: ffff88001c67c000 RDI: ffff88001c67c8a0\n> [   32.836004] RBP: ffff88001c7d03a0 R08: ffff88001c67c8a0 R09: ffff88001c7d0330\n> [   32.836004] R10: ffffffff822c3a98 R11: 0000000000000001 R12: ffff88001c67c000\n> [   32.836004] R13: ffff88001c7d0370 R14: ffffffff8207eb78 R15: ffff88001c67c800\n> [   32.836004] FS:  0000000000000000(0000) GS:ffff88001da00000(0000) knlGS:0000000000000000\n> [   32.836004] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n> [   32.836004] CR2: 0000000000000000 CR3: 000000000220a000 CR4: 00000000000006f0\n> [   32.836004] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\n> [   32.836004] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\n> [   32.836004] Call Trace:\n> [   32.836004]  intel_mode_from_pipe_config+0x72/0x90\n> [   32.836004]  intel_modeset_setup_hw_state+0x569/0xf90\n> [   32.836004]  intel_modeset_init+0x905/0x1db0\n> [   32.836004]  i915_driver_load+0xb8c/0x1120\n> [   32.836004]  i915_pci_probe+0x4d/0xb0\n> [   32.836004]  local_pci_probe+0x44/0xa0\n> [   32.836004]  ? pci_assign_irq+0x27/0x130\n> [   32.836004]  pci_device_probe+0x102/0x1c0\n> [   32.836004]  driver_probe_device+0x2b8/0x480\n> [   32.836004]  __driver_attach+0x109/0x110\n> [   32.836004]  ? driver_probe_device+0x480/0x480\n> [   32.836004]  bus_for_each_dev+0x67/0xc0\n> [   32.836004]  ? klist_add_tail+0x3b/0x70\n> [   32.836004]  bus_add_driver+0x1e8/0x260\n> [   32.836004]  driver_register+0x5b/0xe0\n> [   32.836004]  ? mipi_dsi_bus_init+0x11/0x11\n> [   32.836004]  do_one_initcall+0x4d/0x1eb\n> [   32.836004]  kernel_init_freeable+0x197/0x237\n> [   32.836004]  ? rest_init+0xd0/0xd0\n> [   32.836004]  kernel_init+0xa/0x110\n> [   32.836004]  ret_from_fork+0x35/0x40\n> [   32.836004] Modules linked in:\n> [   32.859183] ---[ end trace 525608b0ed0e8665 ]---\n> [   32.859722] RIP: 0010:drm_mode_hsync+0x1e/0x40\n> [   32.860287] Code: 31 c0 c3 90 90 90 90 90 90 90 90 90 0f 1f 44 00 00 8b 87 d8 00 00 00 85 c0 75 22 8b 4f 68 85 c9 78 1b 69 47 58 e8 03 00 00 99 <f7> f9 b9 d3 4d 62 10 05 f4 01 00 00 f7 e1 89 d0 c1 e8 06 f3 c3 66\n> [   32.862680] RSP: 0000:ffffc900000ebb90 EFLAGS: 00010206\n> [   32.863309] RAX: 0000000000000000 RBX: ffff88001c67c8a0 RCX: 0000000000000000\n> [   32.864182] RDX: 0000000000000000 RSI: ffff88001c67c000 RDI: ffff88001c67c8a0\n> [   32.865206] RBP: ffff88001c7d03a0 R08: ffff88001c67c8a0 R09: ffff88001c7d0330\n> [   32.866359] R10: ffffffff822c3a98 R11: 0000000000000001 R12: ffff88001c67c000\n> [   32.867213] R13: ffff88001c7d0370 R14: ffffffff8207eb78 R15: ffff88001c67c800\n> [   32.868075] FS:  0000000000000000(0000) GS:ffff88001da00000(0000) knlGS:0000000000000000\n> [   32.868983] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n> [   32.869659] CR2: 0000000000000000 CR3: 000000000220a000 CR4: 00000000000006f0\n> [   32.870599] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\n> [   32.871598] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\n> [   32.872549] Kernel panic - not syncing: Attempted to kill init! exitcode=0x0000000b\n>\n> Since drm_mode_hsync() has the logic to check mode->htotal, I just extend it to cover the case htotal==0.\n\nSigned-off-by: Tina Zhang <tina.zhang@intel.com>\nCc: Adam Jackson <ajax@redhat.com>\nCc: Dave Airlie <airlied@redhat.com>\nCc: Daniel Vetter <daniel@ffwll.ch>\n[danvet: Add additional explanations + cc: stable.]\nCc: stable@vger.kernel.org\nSigned-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>\nLink: https://patchwork.freedesktop.org/patch/msgid/1548228539-3061-1-git-send-email-tina.zhang@intel.com",
        "before_after_code_files": [
          "drivers/gpu/drm/drm_modes.c||drivers/gpu/drm/drm_modes.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/gpu/drm/drm_modes.c||drivers/gpu/drm/drm_modes.c": [
          "File: drivers/gpu/drm/drm_modes.c -> drivers/gpu/drm/drm_modes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "758:  if (mode->hsync)",
          "759:   return mode->hsync;",
          "762:   return 0;",
          "",
          "[Removed Lines]",
          "761:  if (mode->htotal < 0)",
          "",
          "[Added Lines]",
          "761:  if (mode->htotal <= 0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f8ade8e2429758efa1eddf0a6e2cc936714afc8d",
      "candidate_info": {
        "commit_hash": "f8ade8e2429758efa1eddf0a6e2cc936714afc8d",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/f8ade8e2429758efa1eddf0a6e2cc936714afc8d",
        "files": [
          "drivers/infiniband/core/uverbs_std_types_device.c"
        ],
        "message": "IB/uverbs: Fix ioctl query port to consider device disassociation\n\nMethods cannot peak into the ufile, the only way to get a ucontext and\nhence a device is via the ib_uverbs_get_ucontext() call or inspecing a\nlocked uobject.\n\nOtherwise during/after disassociation the pointers may be null or free'd.\n\n BUG: unable to handle kernel NULL pointer dereference at 0000000000000078\n PGD 800000005ece6067 P4D 800000005ece6067 PUD 5ece7067 PMD 0\n Oops: 0000 [#1] SMP PTI\n CPU: 0 PID: 10631 Comm: ibv_ud_pingpong Tainted: GW  OE     4.20.0-rc6+ #3\n Hardware name: Red Hat KVM, BIOS 0.5.1 01/01/2011\n RIP: 0010:ib_uverbs_handler_UVERBS_METHOD_QUERY_PORT+0x53/0x191 [ib_uverbs]\n Code: 80 00 00 00 31 c0 48 8b 47 40 48 8d 5c 24 38 48 8d 6c 24\n               08 48 89 df 48 8b 40 08 4c 8b a0 18 03 00 00 31 c0 f3 48 ab 48 89\n               ef <49> 83 7c 24 78 00 b1 06 f3 48 ab 0f 84 89 00 00 00 45 31  c9 31 d2\n RSP: 0018:ffffb54802ccfb10 EFLAGS: 00010246\n RAX: 0000000000000000 RBX: ffffb54802ccfb48 RCX:0000000000000000\n RDX: fffffffffffffffa RSI: ffffb54802ccfcf8 RDI:ffffb54802ccfb18\n RBP: ffffb54802ccfb18 R08: ffffb54802ccfd18 R09:0000000000000000\n R10: 0000000000000000 R11: 00000000000000d0 R12:0000000000000000\n R13: ffffb54802ccfcb0 R14: ffffb54802ccfc48 R15:ffff9f736e0059a0\n FS:  00007f55a6bd7740(0000) GS:ffff9f737ba00000(0000) knlGS:0000000000000000\n CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n CR2: 0000000000000078 CR3: 0000000064214000 CR4:00000000000006f0\n Call Trace:\n  ib_uverbs_cmd_verbs.isra.5+0x94d/0xa60 [ib_uverbs]\n  ? copy_port_attr_to_resp+0x120/0x120 [ib_uverbs]\n  ? arch_tlb_finish_mmu+0x16/0xc0\n  ? tlb_finish_mmu+0x1f/0x30\n  ? unmap_region+0xd9/0x120\n  ib_uverbs_ioctl+0xbc/0x120 [ib_uverbs]\n  do_vfs_ioctl+0xa9/0x620\n  ? __do_munmap+0x29f/0x3a0\n  ksys_ioctl+0x60/0x90\n  __x64_sys_ioctl+0x16/0x20\n  do_syscall_64+0x5b/0x180\n  entry_SYSCALL_64_after_hwframe+0x44/0xa9\n RIP: 0033:0x7f55a62cb567\n\nFixes: 641d1207d2ed (\"IB/core: Move query port to ioctl\")\nSigned-off-by: Yishai Hadas <yishaih@mellanox.com>\nSigned-off-by: Leon Romanovsky <leonro@mellanox.com>\nSigned-off-by: Jason Gunthorpe <jgg@mellanox.com>",
        "before_after_code_files": [
          "drivers/infiniband/core/uverbs_std_types_device.c||drivers/infiniband/core/uverbs_std_types_device.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/infiniband/core/uverbs_std_types_device.c||drivers/infiniband/core/uverbs_std_types_device.c": [
          "File: drivers/infiniband/core/uverbs_std_types_device.c -> drivers/infiniband/core/uverbs_std_types_device.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "168: static int UVERBS_HANDLER(UVERBS_METHOD_QUERY_PORT)(",
          "169:  struct uverbs_attr_bundle *attrs)",
          "170: {",
          "172:  struct ib_port_attr attr = {};",
          "173:  struct ib_uverbs_query_port_resp_ex resp = {};",
          "174:  int ret;",
          "175:  u8 port_num;",
          "178:  if (!ib_dev->ops.query_port)",
          "179:   return -EOPNOTSUPP;",
          "",
          "[Removed Lines]",
          "171:  struct ib_device *ib_dev = attrs->ufile->device->ib_dev;",
          "",
          "[Added Lines]",
          "171:  struct ib_device *ib_dev;",
          "174:  struct ib_ucontext *ucontext;",
          "178:  ucontext = ib_uverbs_get_ucontext(attrs);",
          "179:  if (IS_ERR(ucontext))",
          "180:   return PTR_ERR(ucontext);",
          "181:  ib_dev = ucontext->device;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "51294bf6b9e897d595466dcda5a3f2751906a200",
      "candidate_info": {
        "commit_hash": "51294bf6b9e897d595466dcda5a3f2751906a200",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/51294bf6b9e897d595466dcda5a3f2751906a200",
        "files": [
          "drivers/soc/tegra/fuse/fuse-tegra.c"
        ],
        "message": "soc/tegra: fuse: Fix illegal free of IO base address\n\nOn cases where device tree entries for fuse and clock provider are in\ndifferent order, fuse driver needs to defer probing. This leads to\nfreeing incorrect IO base address as the fuse->base variable gets\noverwritten once during first probe invocation. This leads to the\nfollowing spew during boot:\n\n[    3.082285] Trying to vfree() nonexistent vm area (00000000cfe8fd94)\n[    3.082308] WARNING: CPU: 5 PID: 126 at /hdd/l4t/kernel/stable/mm/vmalloc.c:1511 __vunmap+0xcc/0xd8\n[    3.082318] Modules linked in:\n[    3.082330] CPU: 5 PID: 126 Comm: kworker/5:1 Tainted: G S                4.19.7-tegra-gce119d3 #1\n[    3.082340] Hardware name: quill (DT)\n[    3.082353] Workqueue: events deferred_probe_work_func\n[    3.082364] pstate: 40000005 (nZcv daif -PAN -UAO)\n[    3.082372] pc : __vunmap+0xcc/0xd8\n[    3.082379] lr : __vunmap+0xcc/0xd8\n[    3.082385] sp : ffff00000a1d3b60\n[    3.082391] x29: ffff00000a1d3b60 x28: 0000000000000000\n[    3.082402] x27: 0000000000000000 x26: ffff000008e8b610\n[    3.082413] x25: 0000000000000000 x24: 0000000000000009\n[    3.082423] x23: ffff000009221a90 x22: ffff000009f6d000\n[    3.082432] x21: 0000000000000000 x20: 0000000000000000\n[    3.082442] x19: ffff000009f6d000 x18: ffffffffffffffff\n[    3.082452] x17: 0000000000000000 x16: 0000000000000000\n[    3.082462] x15: ffff0000091396c8 x14: 0720072007200720\n[    3.082471] x13: 0720072007200720 x12: 0720072907340739\n[    3.082481] x11: 0764076607380765 x10: 0766076307300730\n[    3.082491] x9 : 0730073007300730 x8 : 0730073007280720\n[    3.082501] x7 : 0761076507720761 x6 : 0000000000000102\n[    3.082510] x5 : 0000000000000000 x4 : 0000000000000000\n[    3.082519] x3 : ffffffffffffffff x2 : ffff000009150ff8\n[    3.082528] x1 : 3d95b1429fff5200 x0 : 0000000000000000\n[    3.082538] Call trace:\n[    3.082545]  __vunmap+0xcc/0xd8\n[    3.082552]  vunmap+0x24/0x30\n[    3.082561]  __iounmap+0x2c/0x38\n[    3.082569]  tegra_fuse_probe+0xc8/0x118\n[    3.082577]  platform_drv_probe+0x50/0xa0\n[    3.082585]  really_probe+0x1b0/0x288\n[    3.082593]  driver_probe_device+0x58/0x100\n[    3.082601]  __device_attach_driver+0x98/0xf0\n[    3.082609]  bus_for_each_drv+0x64/0xc8\n[    3.082616]  __device_attach+0xd8/0x130\n[    3.082624]  device_initial_probe+0x10/0x18\n[    3.082631]  bus_probe_device+0x90/0x98\n[    3.082638]  deferred_probe_work_func+0x74/0xb0\n[    3.082649]  process_one_work+0x1e0/0x318\n[    3.082656]  worker_thread+0x228/0x450\n[    3.082664]  kthread+0x128/0x130\n[    3.082672]  ret_from_fork+0x10/0x18\n[    3.082678] ---[ end trace 0810fe6ba772c1c7 ]---\n\nFix this by retaining the value of fuse->base until driver has\nsuccessfully probed.\n\nSigned-off-by: Timo Alho <talho@nvidia.com>\nAcked-by: Jon Hunter <jonathanh@nvidia.com>\nSigned-off-by: Thierry Reding <treding@nvidia.com>",
        "before_after_code_files": [
          "drivers/soc/tegra/fuse/fuse-tegra.c||drivers/soc/tegra/fuse/fuse-tegra.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/soc/tegra/fuse/fuse-tegra.c||drivers/soc/tegra/fuse/fuse-tegra.c": [
          "File: drivers/soc/tegra/fuse/fuse-tegra.c -> drivers/soc/tegra/fuse/fuse-tegra.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "137:  res = platform_get_resource(pdev, IORESOURCE_MEM, 0);",
          "138:  fuse->phys = res->start;",
          "139:  fuse->base = devm_ioremap_resource(&pdev->dev, res);",
          "143:  fuse->clk = devm_clk_get(&pdev->dev, \"fuse\");",
          "144:  if (IS_ERR(fuse->clk)) {",
          "145:   dev_err(&pdev->dev, \"failed to get FUSE clock: %ld\",",
          "146:    PTR_ERR(fuse->clk));",
          "147:   return PTR_ERR(fuse->clk);",
          "148:  }",
          "",
          "[Removed Lines]",
          "140:  if (IS_ERR(fuse->base))",
          "141:   return PTR_ERR(fuse->base);",
          "",
          "[Added Lines]",
          "140:  if (IS_ERR(fuse->base)) {",
          "141:   err = PTR_ERR(fuse->base);",
          "142:   fuse->base = base;",
          "143:   return err;",
          "144:  }",
          "150:   fuse->base = base;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "153:  if (fuse->soc->probe) {",
          "154:   err = fuse->soc->probe(fuse);",
          "156:    return err;",
          "157:  }",
          "159:  if (tegra_fuse_create_sysfs(&pdev->dev, fuse->soc->info->size,",
          "",
          "[Removed Lines]",
          "155:   if (err < 0)",
          "",
          "[Added Lines]",
          "159:   if (err < 0) {",
          "160:    fuse->base = base;",
          "162:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f9aa52a8cbe09fe25244d59c29660bbe635df613",
      "candidate_info": {
        "commit_hash": "f9aa52a8cbe09fe25244d59c29660bbe635df613",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/f9aa52a8cbe09fe25244d59c29660bbe635df613",
        "files": [
          "fs/f2fs/extent_cache.c"
        ],
        "message": "f2fs: fix to initialize variable to avoid UBSAN/smatch warning\n\nAs Dan Carpenter as below:\n\nThe patch df634f444ee9: \"f2fs: use rb_*_cached friends\" from Oct 4,\n2018, leads to the following static checker warning:\n\n\tfs/f2fs/extent_cache.c:606 f2fs_update_extent_tree_range()\n\terror: uninitialized symbol 'leftmost'.\n\nAnd also Eric Biggers, and Kyungtae Kim reported, there is an UBSAN\nwarning described as below:\n\nWe report a bug in linux-4.20.2: \"UBSAN: Undefined behaviour in\nfs/f2fs/extent_cache.c\"\n\nkernel config: https://kt0755.github.io/etc/config_v4.20_stable\nrepro: https://kt0755.github.io/etc/repro.4a3e7.c (f2fs is mounted on\n/mnt/f2fs/)\n\nThis arose in f2fs_update_extent_tree_range (fs/f2fs/extent_cache.c:605).\nIt seems that, for some reason, its last argument became \"24\"\nalthough that was supposed to be bool type.\n\n=========================================\nUBSAN: Undefined behaviour in fs/f2fs/extent_cache.c:605:4\nload of value 24 is not a valid value for type '_Bool'\nCPU: 0 PID: 6774 Comm: syz-executor5 Not tainted 4.20.2 #1\nHardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011\nCall Trace:\n __dump_stack lib/dump_stack.c:77 [inline]\n dump_stack+0xb1/0x118 lib/dump_stack.c:113\n ubsan_epilogue+0x12/0x94 lib/ubsan.c:159\n __ubsan_handle_load_invalid_value+0x17a/0x1be lib/ubsan.c:457\n f2fs_update_extent_tree_range+0x1d4a/0x1d50 fs/f2fs/extent_cache.c:605\n f2fs_update_extent_cache+0x2b6/0x350 fs/f2fs/extent_cache.c:804\n f2fs_update_data_blkaddr+0x61/0x70 fs/f2fs/data.c:656\n f2fs_outplace_write_data+0x1d6/0x4b0 fs/f2fs/segment.c:3140\n f2fs_convert_inline_page+0x86d/0x2060 fs/f2fs/inline.c:163\n f2fs_convert_inline_inode+0x6b5/0xad0 fs/f2fs/inline.c:208\n f2fs_preallocate_blocks+0x78b/0xb00 fs/f2fs/data.c:982\n f2fs_file_write_iter+0x31b/0xf40 fs/f2fs/file.c:3062\n call_write_iter include/linux/fs.h:1857 [inline]\n new_sync_write fs/read_write.c:474 [inline]\n __vfs_write+0x538/0x6e0 fs/read_write.c:487\n vfs_write+0x1b3/0x520 fs/read_write.c:549\n ksys_write+0xde/0x1c0 fs/read_write.c:598\n __do_sys_write fs/read_write.c:610 [inline]\n __se_sys_write fs/read_write.c:607 [inline]\n __x64_sys_write+0x7e/0xc0 fs/read_write.c:607\n do_syscall_64+0xbe/0x4f0 arch/x86/entry/common.c:290\n entry_SYSCALL_64_after_hwframe+0x49/0xbe\nRIP: 0033:0x4497b9\nCode: e8 8c 9f 02 00 48 83 c4 18 c3 0f 1f 80 00 00 00 00 48 89 f8 48\n89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d\n01 f0 ff ff 0f 83 9b 6b fc ff c3 66 2e 0f 1f 84 00 00 00 00\nRSP: 002b:00007f1ea15edc68 EFLAGS: 00000246 ORIG_RAX: 0000000000000001\nRAX: ffffffffffffffda RBX: 00007f1ea15ee6cc RCX: 00000000004497b9\nRDX: 0000000000001000 RSI: 0000000020000140 RDI: 0000000000000013\nRBP: 000000000071bea0 R08: 0000000000000000 R09: 0000000000000000\nR10: 0000000000000000 R11: 0000000000000246 R12: 00000000ffffffff\nR13: 000000000000bb50 R14: 00000000006f4bf0 R15: 00007f1ea15ee700\n=========================================\n\nAs I checked, this uninitialized variable won't cause extent cache\ncorruption, but in order to avoid such kind of warning of both UBSAN\nand smatch, fix to initialize related variable.\n\nReported-by: Dan Carpenter <dan.carpenter@oracle.com>\nReported-by: Eric Biggers <ebiggers@google.com>\nReported-by: Kyungtae Kim <kt0755@gmail.com>\nSigned-off-by: Chao Yu <yuchao0@huawei.com>\nSigned-off-by: Jaegeuk Kim <jaegeuk@kernel.org>",
        "before_after_code_files": [
          "fs/f2fs/extent_cache.c||fs/f2fs/extent_cache.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fs/f2fs/extent_cache.c||fs/f2fs/extent_cache.c": [
          "File: fs/f2fs/extent_cache.c -> fs/f2fs/extent_cache.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "506:  unsigned int end = fofs + len;",
          "507:  unsigned int pos = (unsigned int)fofs;",
          "508:  bool updated = false;",
          "511:  if (!et)",
          "512:   return;",
          "",
          "[Removed Lines]",
          "509:  bool leftmost;",
          "",
          "[Added Lines]",
          "509:  bool leftmost = false;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "76f7164d02d4c596b396fc2e868276d1db3c5e1e",
      "candidate_info": {
        "commit_hash": "76f7164d02d4c596b396fc2e868276d1db3c5e1e",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/76f7164d02d4c596b396fc2e868276d1db3c5e1e",
        "files": [
          "drivers/crypto/chelsio/chtls/chtls_cm.c",
          "net/tls/tls_main.c"
        ],
        "message": "net/tls: free ctx in sock destruct\n\nfree tls context in sock destruct. close may not be the last\ncall to free sock but force releasing the ctx in close\nwill result in GPF when ctx referred again in tcp_done\n\n[  515.330477] general protection fault: 0000 [#1] SMP PTI\n[  515.330539] CPU: 5 PID: 0 Comm: swapper/5 Not tainted 4.20.0-rc7+ #10\n[  515.330657] Hardware name: Supermicro X8ST3/X8ST3, BIOS 2.0b\n11/07/2013\n[  515.330844] RIP: 0010:tls_hw_unhash+0xbf/0xd0\n[\n[  515.332220] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[  515.332340] CR2: 00007fab32c55000 CR3: 000000009261e000 CR4:\n00000000000006e0\n[  515.332519] Call Trace:\n[  515.332632]  <IRQ>\n[  515.332793]  tcp_set_state+0x5a/0x190\n[  515.332907]  ? tcp_update_metrics+0xe3/0x350\n[  515.333023]  tcp_done+0x31/0xd0\n[  515.333130]  tcp_rcv_state_process+0xc27/0x111a\n[  515.333242]  ? __lock_is_held+0x4f/0x90\n[  515.333350]  ? tcp_v4_do_rcv+0xaf/0x1e0\n[  515.333456]  tcp_v4_do_rcv+0xaf/0x1e0\n\nSigned-off-by: Atul Gupta <atul.gupta@chelsio.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "drivers/crypto/chelsio/chtls/chtls_cm.c||drivers/crypto/chelsio/chtls/chtls_cm.c",
          "net/tls/tls_main.c||net/tls/tls_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/crypto/chelsio/chtls/chtls_cm.c||drivers/crypto/chelsio/chtls/chtls_cm.c": [
          "File: drivers/crypto/chelsio/chtls/chtls_cm.c -> drivers/crypto/chelsio/chtls/chtls_cm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include <net/inet_common.h>",
          "25: #include <net/tcp.h>",
          "26: #include <net/dst.h>",
          "28: #include \"chtls.h\"",
          "29: #include \"chtls_cm.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #include <net/tls.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1015: {",
          "1016:  struct inet_sock *newinet;",
          "1017:  const struct iphdr *iph;",
          "1018:  struct net_device *ndev;",
          "1019:  struct chtls_sock *csk;",
          "1020:  struct dst_entry *dst;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1019:  struct tls_context *ctx;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1064:  oreq->ts_recent = PASS_OPEN_TID_G(ntohl(req->tos_stid));",
          "1065:  sk_setup_caps(newsk, dst);",
          "1066:  csk->sk = newsk;",
          "1067:  csk->passive_reap_next = oreq;",
          "1068:  csk->tx_chan = cxgb4_port_chan(ndev);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1068:  ctx = tls_get_ctx(lsk);",
          "1069:  newsk->sk_destruct = ctx->sk_destruct;",
          "",
          "---------------"
        ],
        "net/tls/tls_main.c||net/tls/tls_main.c": [
          "File: net/tls/tls_main.c -> net/tls/tls_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "266:  lock_sock(sk);",
          "267:  sk_proto_close = ctx->sk_proto_close;",
          "271:   free_ctx = true;",
          "272:   goto skip_tx_cleanup;",
          "273:  }",
          "",
          "[Removed Lines]",
          "269:  if ((ctx->tx_conf == TLS_HW_RECORD && ctx->rx_conf == TLS_HW_RECORD) ||",
          "270:      (ctx->tx_conf == TLS_BASE && ctx->rx_conf == TLS_BASE)) {",
          "",
          "[Added Lines]",
          "269:  if (ctx->tx_conf == TLS_HW_RECORD && ctx->rx_conf == TLS_HW_RECORD)",
          "270:   goto skip_tx_cleanup;",
          "272:  if (ctx->tx_conf == TLS_BASE && ctx->rx_conf == TLS_BASE) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "579:  }",
          "580: }",
          "582: static int tls_hw_prot(struct sock *sk)",
          "583: {",
          "584:  struct tls_context *ctx;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "584: static void tls_hw_sk_destruct(struct sock *sk)",
          "585: {",
          "586:  struct tls_context *ctx = tls_get_ctx(sk);",
          "587:  struct inet_connection_sock *icsk = inet_csk(sk);",
          "589:  ctx->sk_destruct(sk);",
          "591:  kfree(ctx);",
          "592:  icsk->icsk_ulp_data = NULL;",
          "593: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "597:    ctx->hash = sk->sk_prot->hash;",
          "598:    ctx->unhash = sk->sk_prot->unhash;",
          "599:    ctx->sk_proto_close = sk->sk_prot->close;",
          "600:    ctx->rx_conf = TLS_HW_RECORD;",
          "601:    ctx->tx_conf = TLS_HW_RECORD;",
          "602:    update_sk_prot(sk, ctx);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "613:    ctx->sk_destruct = sk->sk_destruct;",
          "614:    sk->sk_destruct = tls_hw_sk_destruct;",
          "",
          "---------------"
        ]
      }
    }
  ]
}