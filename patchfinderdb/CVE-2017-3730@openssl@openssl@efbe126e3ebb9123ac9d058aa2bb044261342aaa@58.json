{
  "cve_id": "CVE-2017-3730",
  "cve_desc": "In OpenSSL 1.1.0 before 1.1.0d, if a malicious server supplies bad parameters for a DHE or ECDHE key exchange then this can result in the client attempting to dereference a NULL pointer leading to a client crash. This could be exploited in a Denial of Service attack.",
  "repo": "openssl/openssl",
  "patch_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
  "patch_info": {
    "commit_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "files": [
      "ssl/statem/statem_clnt.c"
    ],
    "message": "Fix missing NULL checks in CKE processing\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c"
    ]
  },
  "patch_diff": {
    "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
      "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2258:         return 0;",
      "2259:     }",
      "2260:     ckey = ssl_generate_pkey(skey);",
      "2261:     dh_clnt = EVP_PKEY_get0_DH(ckey);",
      "2263:     if (dh_clnt == NULL || ssl_derive(s, ckey, skey) == 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2261:     if (ckey == NULL) {",
      "2262:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_DHE, ERR_R_INTERNAL_ERROR);",
      "2263:         return 0;",
      "2264:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2296:     }",
      "2298:     ckey = ssl_generate_pkey(skey);",
      "2300:     if (ssl_derive(s, ckey, skey) == 0) {",
      "2301:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_EVP_LIB);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2304:     if (ckey == NULL) {",
      "2305:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_INTERNAL_ERROR);",
      "2306:         goto err;",
      "2307:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1cb83aff0e7e27f027fbe4fdf1b6c101ce4cff00",
      "candidate_info": {
        "commit_hash": "1cb83aff0e7e27f027fbe4fdf1b6c101ce4cff00",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/1cb83aff0e7e27f027fbe4fdf1b6c101ce4cff00",
        "files": [
          "crypto/aes/asm/vpaes-ppc.pl",
          "crypto/chacha/asm/chacha-ppc.pl"
        ],
        "message": "PPC assembler pack: add some PPC970/G5 performance data.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit cebb186989067b39fca6ebc378e4957408f6e701)",
        "before_after_code_files": [
          "crypto/aes/asm/vpaes-ppc.pl||crypto/aes/asm/vpaes-ppc.pl",
          "crypto/chachasm/chacha-ppc.pl||crypto/chacha/asm/chacha-ppc.pl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/aes/asm/vpaes-ppc.pl||crypto/aes/asm/vpaes-ppc.pl": [
          "File: crypto/aes/asm/vpaes-ppc.pl -> crypto/aes/asm/vpaes-ppc.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: # 128-bit key.",
          "22: #",
          "23: #  aes-ppc.pl  this",
          "25: # POWER6 42.7/54.3/(28.2) 63.0/92.8(**)",
          "26: # POWER7 32.3/42.9/(18.4) 18.5/23.3",
          "27: #",
          "",
          "[Removed Lines]",
          "24: # G4e  35.5/52.1/(23.8) 11.9(*)/15.4",
          "",
          "[Added Lines]",
          "24: # PPC74x0/G4e 35.5/52.1/(23.8) 11.9(*)/15.4",
          "25: # PPC970/G5 37.9/55.0/(28.5) 22.2/28.5",
          "",
          "---------------"
        ],
        "crypto/chachasm/chacha-ppc.pl||crypto/chacha/asm/chacha-ppc.pl": [
          "File: crypto/chachasm/chacha-ppc.pl -> crypto/chacha/asm/chacha-ppc.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: # PPC74x0/G4e  6.81/+310% 4.66",
          "27: # PPC970/G5  9.29/+160% 4.60",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "63658103d4441924f8dbfc517b99bb54758a98b9",
      "candidate_info": {
        "commit_hash": "63658103d4441924f8dbfc517b99bb54758a98b9",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/63658103d4441924f8dbfc517b99bb54758a98b9",
        "files": [
          "ssl/record/rec_layer_s3.c"
        ],
        "message": "Fix a hang with SSL_peek()\n\nIf while calling SSL_peek() we read an empty record then we go into an\ninfinite loop, continually trying to read data from the empty record and\nnever making any progress. This could be exploited by a malicious peer in\na Denial Of Service attack.\n\nCVE-2016-6305\n\nGitHub Issue #1563\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
          "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1134:             memcpy(buf, &(rr->data[rr->off]), n);",
          "1135:             buf += n;",
          "1137:                 SSL3_RECORD_sub_length(rr, n);",
          "1138:                 SSL3_RECORD_add_off(rr, n);",
          "1139:                 if (SSL3_RECORD_get_length(rr) == 0) {",
          "",
          "[Removed Lines]",
          "1136:             if (!peek) {",
          "",
          "[Added Lines]",
          "1136:             if (peek) {",
          "1138:                 if (SSL3_RECORD_get_length(rr) == 0)",
          "1139:                     SSL3_RECORD_set_read(rr);",
          "1140:             } else {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "96e6c6635ec45e47cec29cab8e6dadf62eb1da00",
      "candidate_info": {
        "commit_hash": "96e6c6635ec45e47cec29cab8e6dadf62eb1da00",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/96e6c6635ec45e47cec29cab8e6dadf62eb1da00",
        "files": [
          "Configurations/10-main.conf"
        ],
        "message": "Configurations/10-main.conf: remove solaris-x86-cc target.\n\nSince vendor assembler can't assemble our modules with -KPIC flag,\nit, assembly support, was not available as an option. But this\nmeans lack of side-channel resistant code, which is incompatible\nwith security by todays standards.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit 216a0cc4d6a35a21e613f1e7e9eee957768bf9dd)",
        "before_after_code_files": [
          "Configurations/10-main.conf||Configurations/10-main.conf"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Configurations/10-main.conf||Configurations/10-main.conf": [
          "File: Configurations/10-main.conf -> Configurations/10-main.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "200:                                        threads(\"-pthread\")),",
          "201:         bn_ops           => \"BN_LLONG\",",
          "202:         shared_cflag     => \"-fPIC\",",
          "204:     },",
          "205:     \"solaris64-x86_64-gcc\" => {",
          "206:         # -shared -static-libgcc might appear controversial, but modules",
          "",
          "[Removed Lines]",
          "203:         shared_ldflag    => \"-shared\",",
          "",
          "[Added Lines]",
          "203:         shared_ldflag    => \"-shared -static-libgcc\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "225:     },",
          "227: #### Solaris x86 with Sun C setups",
          "241:     \"solaris64-x86_64-cc\" => {",
          "242:         inherit_from     => [ \"solaris-common\", asm(\"x86_64_asm\") ],",
          "243:         cc               => \"cc\",",
          "",
          "[Removed Lines]",
          "228:     \"solaris-x86-cc\" => {",
          "229:         inherit_from     => [ \"solaris-common\" ],",
          "230:         cc               => \"cc\",",
          "231:         cflags           => add_before(picker(default => \"-xarch=generic -xstrconst -Xa -DL_ENDIAN\",",
          "232:                                               debug   => \"-g\",",
          "233:                                               release => \"-xO5 -xregs=frameptr -xdepend -xbuiltin\"),",
          "234:                                        threads(\"-D_REENTRANT\")),",
          "235:         lflags           => add(threads(\"-mt\")),",
          "236:         ex_libs          => add(threads(\"-lpthread\")),",
          "237:         bn_ops           => \"BN_LLONG RC4_CHAR\",",
          "238:         shared_cflag     => \"-KPIC\",",
          "239:         shared_ldflag    => \"-G -dy -z text\",",
          "240:     },",
          "",
          "[Added Lines]",
          "228:     # There used to be solaris-x86-cc target, but it was removed,",
          "229:     # primarily because vendor assembler can't assemble our modules",
          "230:     # with -KPIC flag. As result it, assembly support, was not even",
          "231:     # available as option. But its lack means lack of side-channel",
          "232:     # resistant code, which is incompatible with security by todays",
          "233:     # standards. Fortunately gcc is readily available prepackaged",
          "234:     # option, which we can firmly point at...",
          "235:     #",
          "236:     # On related note, solaris64-x86_64-cc target won't compile code",
          "237:     # paths utilizing AVX and post-Haswell instruction extensions.",
          "238:     # Consider switching to solaris64-x86_64-gcc even here...",
          "239:     #",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a1aa0386081c4be6e020f1b84a55056ae9f6ad04",
      "candidate_info": {
        "commit_hash": "a1aa0386081c4be6e020f1b84a55056ae9f6ad04",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/a1aa0386081c4be6e020f1b84a55056ae9f6ad04",
        "files": [
          "fuzz/cms.c",
          "fuzz/server.c"
        ],
        "message": "[fuzzers] do not fail fuzzers with empty input\n\nReviewed-by: Kurt Roeckx <kurt@roeckx.be>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n\nGH: #1788\n(cherry picked from commit ba7407002d899b614d4728da9004594f947ff3da)",
        "before_after_code_files": [
          "fuzz/cms.c||fuzz/cms.c",
          "fuzz/server.c||fuzz/server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fuzz/cms.c||fuzz/cms.c": [
          "File: fuzz/cms.c -> fuzz/cms.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: int FuzzerTestOneInput(const uint8_t *buf, size_t len) {",
          "24:     CMS_ContentInfo *i;",
          "27:     OPENSSL_assert((size_t)BIO_write(in, buf, len) == len);",
          "28:     i = d2i_CMS_bio(in, NULL);",
          "29:     CMS_ContentInfo_free(i);",
          "",
          "[Removed Lines]",
          "25:     BIO *in = BIO_new(BIO_s_mem());",
          "",
          "[Added Lines]",
          "25:     BIO *in;",
          "26:     if (!len) {",
          "27:         return 0;",
          "28:     }",
          "30:     in = BIO_new(BIO_s_mem());",
          "",
          "---------------"
        ],
        "fuzz/server.c||fuzz/server.c": [
          "File: fuzz/server.c -> fuzz/server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "217: }",
          "219: int FuzzerTestOneInput(const uint8_t *buf, size_t len) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "220:     SSL *server;",
          "221:     BIO *in;",
          "222:     BIO *out;",
          "223:     if (!len) {",
          "224:         return 0;",
          "225:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "230:     SSL_set_bio(server, in, out);",
          "231:     SSL_set_accept_state(server);",
          "232:     OPENSSL_assert((size_t)BIO_write(in, buf, len) == len);",
          "",
          "[Removed Lines]",
          "227:     SSL *server = SSL_new(ctx);",
          "228:     BIO *in = BIO_new(BIO_s_mem());",
          "229:     BIO *out = BIO_new(BIO_s_mem());",
          "",
          "[Added Lines]",
          "233:     server = SSL_new(ctx);",
          "234:     in = BIO_new(BIO_s_mem());",
          "235:     out = BIO_new(BIO_s_mem());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "030c7cc63dd6abc9a718306bf3bd34037cbfd294",
      "candidate_info": {
        "commit_hash": "030c7cc63dd6abc9a718306bf3bd34037cbfd294",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/030c7cc63dd6abc9a718306bf3bd34037cbfd294",
        "files": [
          "crypto/x509/t_x509.c"
        ],
        "message": "Print the X509 version signed, and convert to unsigned for the hex version.\n\nFound by tis-interpreter\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nGH: #1754\n(cherry picked from commit 676befbeb76ca19c9e7b2febfabda16bd26e00a0)",
        "before_after_code_files": [
          "crypto/x509/t_x509.c||crypto/x509/t_x509.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/x509/t_x509.c||crypto/x509/t_x509.c": [
          "File: crypto/x509/t_x509.c -> crypto/x509/t_x509.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:     }",
          "72:     if (!(cflag & X509_FLAG_NO_VERSION)) {",
          "73:         l = X509_get_version(x);",
          "76:     }",
          "77:     if (!(cflag & X509_FLAG_NO_SERIAL)) {",
          "",
          "[Removed Lines]",
          "74:         if (BIO_printf(bp, \"%8sVersion: %lu (0x%lx)\\n\", \"\", l + 1, l) <= 0)",
          "75:             goto err;",
          "",
          "[Added Lines]",
          "74:         if (l >= 0 && l <= 2) {",
          "75:             if (BIO_printf(bp, \"%8sVersion: %ld (0x%lx)\\n\", \"\", l + 1, (unsigned long)l) <= 0)",
          "76:                 goto err;",
          "77:         } else {",
          "78:             if (BIO_printf(bp, \"%8sVersion: Unknown (%ld)\\n\", \"\", l) <= 0)",
          "79:                 goto err;",
          "80:         }",
          "",
          "---------------"
        ]
      }
    }
  ]
}