{
  "cve_id": "CVE-2019-19880",
  "cve_desc": "exprListAppendList in window.c in SQLite 3.30.1 allows attackers to trigger an invalid pointer dereference because constant integer values in ORDER BY clauses of window definitions are mishandled.",
  "repo": "sqlite/sqlite",
  "patch_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
  "patch_info": {
    "commit_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/window.c"
    ],
    "message": "When processing constant integer values in ORDER BY clauses of window definitions (see check-in [7e4809eadfe99ebf]) be sure to fully disable the constant value to avoid an invalid pointer dereference if the expression is ever duplicated. This fixes a crash report from Yongheng and Rui.\n\nFossilOrigin-Name: 1ca0bd982ab1183bbafce0d260e4dceda5eb766ed2e7793374a88d1ae0bdd2ca",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8223e79f987feda5c8e51ec52cec6798cca16d070b10558939e2888ca1a25b8e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "895:     int nInit = pList ? pList->nExpr : 0;",
      "896:     for(i=0; i<pAppend->nExpr; i++){",
      "897:       Expr *pDup = sqlite3ExprDup(pParse->db, pAppend->a[i].pExpr, 0);",
      "898:       if( bIntToNull && pDup && pDup->op==TK_INTEGER ){",
      "899:         pDup->op = TK_NULL;",
      "900:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
      "901:       }",
      "902:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
      "903:       if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "898:       assert( pDup==0 || !ExprHasProperty(pDup, EP_MemToken) );",
      "902:         pDup->u.zToken = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bb40727857e4a507e64bbc01e0681d7afdd57af9",
      "candidate_info": {
        "commit_hash": "bb40727857e4a507e64bbc01e0681d7afdd57af9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bb40727857e4a507e64bbc01e0681d7afdd57af9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/window.c",
          "test/window8.tcl",
          "test/window8.test"
        ],
        "message": "Allow real values to be used in PRECEDING and FOLLOWING expressions for RANGE window frames.\n\nFossilOrigin-Name: 25ff7091cb12c63b1864ce68a9151f8432af5804b5ae905a2175761ab4b9fdd8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/window.c||src/window.c",
          "test/window8.tcl||test/window8.tcl",
          "test/window8.test||test/window8.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5129bcc996b3c9f78ab6b674a4364787e7b353b90f15f027cad4431012022c30",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1723:   break;",
          "1724: }",
          "1734:   pIn1 = &aMem[pOp->p1];",
          "1736:     applyAffinity(pIn1, SQLITE_AFF_NUMERIC, encoding);",
          "1739:       if( pOp->p2==0 ){",
          "1740:         rc = SQLITE_MISMATCH;",
          "1741:         goto abort_due_to_error;",
          "",
          "[Removed Lines]",
          "1735:   if( (pIn1->flags & MEM_Int)==0 ){",
          "1737:     VdbeBranchTaken((pIn1->flags&MEM_Int)==0, 2);",
          "1738:     if( (pIn1->flags & MEM_Int)==0 ){",
          "",
          "[Added Lines]",
          "1738:   u8 f;",
          "1739:   f = (pOp->p5 ? (MEM_Int|MEM_Real) : MEM_Int);",
          "1741:   if( (pIn1->flags & f)==0 ){",
          "1743:     VdbeBranchTaken((pIn1->flags&f)==0, 2);",
          "1744:     if( (pIn1->flags & f)==0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1744:       }",
          "1745:     }",
          "1746:   }",
          "1748:   break;",
          "1749: }",
          "",
          "[Removed Lines]",
          "1747:   MemSetTypeFlag(pIn1, MEM_Int);",
          "",
          "[Added Lines]",
          "1753:   if( f==MEM_Int ) MemSetTypeFlag(pIn1, MEM_Int);",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1168:   }",
          "1169: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1171: #define WINDOW_STARTING_INT  0",
          "1172: #define WINDOW_ENDING_INT    1",
          "1173: #define WINDOW_NTH_VALUE_INT 2",
          "1174: #define WINDOW_STARTING_NUM  3",
          "1175: #define WINDOW_ENDING_NUM    4",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1179:   static const char *azErr[] = {",
          "1180:     \"frame starting offset must be a non-negative integer\",",
          "1181:     \"frame ending offset must be a non-negative integer\",",
          "1183:   };",
          "1185:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "1186:   int regZero = sqlite3GetTempReg(pParse);",
          "1188:   sqlite3VdbeAddOp2(v, OP_Integer, 0, regZero);",
          "1189:   sqlite3VdbeAddOp2(v, OP_MustBeInt, reg, sqlite3VdbeCurrentAddr(v)+2);",
          "1190:   VdbeCoverageIf(v, eCond==0);",
          "1191:   VdbeCoverageIf(v, eCond==1);",
          "1192:   VdbeCoverageIf(v, eCond==2);",
          "",
          "[Removed Lines]",
          "1178: static void windowCheckIntValue(Parse *pParse, int reg, int eCond){",
          "1182:     \"second argument to nth_value must be a positive integer\"",
          "1184:   static int aOp[] = { OP_Ge, OP_Ge, OP_Gt };",
          "1187:   assert( eCond==0 || eCond==1 || eCond==2 );",
          "",
          "[Added Lines]",
          "1184: static void windowCheckValue(Parse *pParse, int reg, int eCond){",
          "1188:     \"second argument to nth_value must be a positive integer\",",
          "1189:     \"frame starting offset must be a non-negative number\",",
          "1190:     \"frame ending offset must be a non-negative number\",",
          "1192:   static int aOp[] = { OP_Ge, OP_Ge, OP_Gt, OP_Ge, OP_Ge };",
          "1195:   assert( eCond>=0 && eCond<ArraySize(azErr) );",
          "1198:   if( eCond>=WINDOW_STARTING_NUM ) sqlite3VdbeChangeP5(v, 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1384:       if( pFunc->zName==nth_valueName ){",
          "1385:         sqlite3VdbeAddOp3(v, OP_Column, pMWin->iEphCsr, pWin->iArgCol+1,tmpReg);",
          "1387:       }else{",
          "1388:         sqlite3VdbeAddOp2(v, OP_Integer, 1, tmpReg);",
          "1389:       }",
          "",
          "[Removed Lines]",
          "1386:         windowCheckIntValue(pParse, tmpReg, 2);",
          "",
          "[Added Lines]",
          "1395:         windowCheckValue(pParse, tmpReg, 2);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2215:   if( regStart ){",
          "2216:     sqlite3ExprCode(pParse, pMWin->pStart, regStart);",
          "2218:   }",
          "2219:   if( regEnd ){",
          "2220:     sqlite3ExprCode(pParse, pMWin->pEnd, regEnd);",
          "2222:   }",
          "2224:   if( pMWin->eStart==pMWin->eEnd && regStart && regEnd ){",
          "",
          "[Removed Lines]",
          "2217:     windowCheckIntValue(pParse, regStart, 0);",
          "2221:     windowCheckIntValue(pParse, regEnd, 1);",
          "",
          "[Added Lines]",
          "2226:     windowCheckValue(pParse, regStart, 0 + (pMWin->eType==TK_RANGE ? 3 : 0));",
          "2230:     windowCheckValue(pParse, regEnd, 1 + (pMWin->eType==TK_RANGE ? 3 : 0));",
          "",
          "---------------"
        ],
        "test/window8.tcl||test/window8.tcl": [
          "File: test/window8.tcl -> test/window8.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "94: execsql_test 2.0 {",
          "95:   DROP TABLE IF EXISTS t1;",
          "97:   INSERT INTO t1 VALUES",
          "98:       (5, 10), (10, 20), (13, 26), (13, 26),",
          "99:       (15, 30), (20, 40), (22,80), (30, 90);",
          "",
          "[Removed Lines]",
          "96:   CREATE TABLE t1(a INTEGER, b INTEGER);",
          "",
          "[Added Lines]",
          "96:   CREATE TABLE t1(a REAL, b INTEGER);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:   4 { ORDER BY a DESC RANGE BETWEEN 5 PRECEDING AND 5 FOLLOWING }",
          "107:   5 { ORDER BY a DESC RANGE BETWEEN 10 PRECEDING AND 5 PRECEDING }",
          "108:   6 { ORDER BY a DESC RANGE BETWEEN 2 FOLLOWING AND 3 FOLLOWING }",
          "109: } {",
          "111: }",
          "",
          "[Removed Lines]",
          "110:   execsql_test 2.$tn \"SELECT a, sum(b) OVER win FROM t1 WINDOW win AS ($frame)\"",
          "",
          "[Added Lines]",
          "110:   7  { ORDER BY a RANGE BETWEEN 5.1 PRECEDING AND 5.3 FOLLOWING }",
          "111:   8  { ORDER BY a RANGE BETWEEN 10.2 PRECEDING AND 5.4 PRECEDING }",
          "112:   9  { ORDER BY a RANGE BETWEEN 2.6 FOLLOWING AND 3.5 FOLLOWING }",
          "113:   10 { ORDER BY a DESC RANGE BETWEEN 5.7 PRECEDING AND 5.8 FOLLOWING }",
          "114:   11 { ORDER BY a DESC RANGE BETWEEN UNBOUNDED PRECEDING AND 5.9 PRECEDING }",
          "115:   12 { ORDER BY a DESC RANGE BETWEEN 2.1 FOLLOWING AND UNBOUNDED FOLLOWING }",
          "117:   execsql_test 2.$tn \"",
          "118:     SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ($frame)",
          "119:   \"",
          "",
          "---------------"
        ],
        "test/window8.test||test/window8.test": [
          "File: test/window8.test -> test/window8.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "438: do_execsql_test 2.0 {",
          "439:   DROP TABLE IF EXISTS t1;",
          "441:   INSERT INTO t1 VALUES",
          "442:       (5, 10), (10, 20), (13, 26), (13, 26),",
          "443:       (15, 30), (20, 40), (22,80), (30, 90);",
          "444: } {}",
          "446: do_execsql_test 2.1 {",
          "448: } {5 30   10 112   13 102   13 102   15 142   20 150   22 120   30 90}",
          "450: do_execsql_test 2.2 {",
          "452: } {5 {}   10 10   13 10   13 10   15 30   20 102   22 82   30 120}",
          "454: do_execsql_test 2.3 {",
          "456: } {5 {}   10 52   13 30   13 30   15 {}   20 80   22 {}   30 {}}",
          "458: do_execsql_test 2.4 {",
          "460: } {30 90   22 120   20 150   15 142   13 102   13 102   10 112   5 30}",
          "462: do_execsql_test 2.5 {",
          "464: } {30 {}   22 90   20 90   15 120   13 120   13 120   10 70   5 102}",
          "466: do_execsql_test 2.6 {",
          "468: } {30 {}   22 40   20 {}   15 52   13 20   13 20   10 {}   5 {}}",
          "470: finish_test",
          "",
          "[Removed Lines]",
          "440:   CREATE TABLE t1(a INTEGER, b INTEGER);",
          "447:   SELECT a, sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 5 PRECEDING AND 5 FOLLOWING )",
          "451:   SELECT a, sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 10 PRECEDING AND 5 PRECEDING )",
          "455:   SELECT a, sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 2 FOLLOWING AND 3 FOLLOWING )",
          "459:   SELECT a, sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN 5 PRECEDING AND 5 FOLLOWING )",
          "463:   SELECT a, sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN 10 PRECEDING AND 5 PRECEDING )",
          "467:   SELECT a, sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN 2 FOLLOWING AND 3 FOLLOWING )",
          "",
          "[Added Lines]",
          "440:   CREATE TABLE t1(a REAL, b INTEGER);",
          "447:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 5 PRECEDING AND 5 FOLLOWING )",
          "451:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 10 PRECEDING AND 5 PRECEDING )",
          "455:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 2 FOLLOWING AND 3 FOLLOWING )",
          "459:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN 5 PRECEDING AND 5 FOLLOWING )",
          "463:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN 10 PRECEDING AND 5 PRECEDING )",
          "467:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN 2 FOLLOWING AND 3 FOLLOWING )",
          "470: do_execsql_test 2.7 {",
          "471:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 5.1 PRECEDING AND 5.3 FOLLOWING )",
          "472: } {5 30   10 112   13 102   13 102   15 142   20 150   22 120   30 90}",
          "474: do_execsql_test 2.8 {",
          "475:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 10.2 PRECEDING AND 5.4 PRECEDING )",
          "476: } {5 {}   10 {}   13 10   13 10   15 10   20 72   22 82   30 120}",
          "478: do_execsql_test 2.9 {",
          "479:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 2.6 FOLLOWING AND 3.5 FOLLOWING )",
          "480: } {5 {}   10 52   13 {}   13 {}   15 {}   20 {}   22 {}   30 {}}",
          "482: do_execsql_test 2.10 {",
          "483:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN 5.7 PRECEDING AND 5.8 FOLLOWING )",
          "484: } {30 90   22 120   20 150   15 142   13 102   13 102   10 112   5 30}",
          "486: do_execsql_test 2.11 {",
          "487:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN UNBOUNDED PRECEDING AND 5.9 PRECEDING )",
          "488: } {30 {}   22 90   20 90   15 170   13 210   13 210   10 210   5 292}",
          "490: do_execsql_test 2.12 {",
          "491:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN 2.1 FOLLOWING AND UNBOUNDED FOLLOWING )",
          "492: } {30 232   22 112   20 112   15 30   13 30   13 30   10 10   5 {}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ef7d5187a74fdddee3dabfaddebaf63ca316aac7",
      "candidate_info": {
        "commit_hash": "ef7d5187a74fdddee3dabfaddebaf63ca316aac7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ef7d5187a74fdddee3dabfaddebaf63ca316aac7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/printf.c",
          "test/round1.test"
        ],
        "message": "Improved rounding even on systems with an 8-byte \"long double\" type.\n\nFossilOrigin-Name: 15202aee150fa8e15fb90e90e5765c5e19a1eaf4896da2996a747636b76da8e6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/printf.c||src/printf.c",
          "test/round1.test||test/round1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 81721aa54587e20d031d528fb6b74d91671a6e950fa926dc63f4284466e70f0e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/printf.c||src/printf.c": [
          "File: src/printf.c -> src/printf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "527:         rounder = arRound[idx%10];",
          "528:         while( idx>=10 ){ rounder *= 1.0e-10; idx -= 10; }",
          "529:         if( xtype==etFLOAT ){",
          "531:           realvalue += rounder;",
          "532:         }",
          "",
          "[Removed Lines]",
          "530:           if( precision<17) rounder += realvalue*2.0e-16;",
          "",
          "[Added Lines]",
          "530:           double rx = (double)realvalue;",
          "531:           sqlite3_uint64 u;",
          "532:           int ex;",
          "533:           memcpy(&u, &rx, sizeof(u));",
          "534:           ex = -1023 + (int)((u>>52)&0x7ff);",
          "535:           if( precision+(ex/3) < 15 ) rounder += realvalue*3e-16;",
          "",
          "---------------"
        ],
        "test/round1.test||test/round1.test": [
          "File: test/round1.test -> test/round1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: source $testdir/tester.tcl",
          "16: set testprefix round1",
          "23: expr srand(0)",
          "24: unset -nocomplain iTest",
          "26:    set x1 [expr int(rand()*100000)]",
          "27:    set x2 [expr int(rand()*100000)+1000*int(rand()*10000)]",
          "28:    set n [expr int(rand()*8)+1]",
          "",
          "[Removed Lines]",
          "18: if {$::longdouble_size<=8} {",
          "19:   finish_test",
          "20:   return",
          "21: }",
          "25: for {set iTest 1} {$iTest<=10000} {incr iTest} {",
          "",
          "[Added Lines]",
          "20: for {set iTest 1} {$iTest<=50000} {incr iTest} {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ec39707fe669c1b08aff4a5bfdc076dd4ed6f6ee",
      "candidate_info": {
        "commit_hash": "ec39707fe669c1b08aff4a5bfdc076dd4ed6f6ee",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ec39707fe669c1b08aff4a5bfdc076dd4ed6f6ee",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "New dbsqlfuzz cases added to test/fuzzdata8.db.\n\nFossilOrigin-Name: 49073b7003330027303c4c776e9f85112f8b99b89f848fec3f953eba501d7505",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 322eca7f6ad2234059669015aabb773a790e8bc3da95431c9c851ff5342c969b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7cd5e856e55c64ed7109595c7dd154d65861ec03",
      "candidate_info": {
        "commit_hash": "7cd5e856e55c64ed7109595c7dd154d65861ec03",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7cd5e856e55c64ed7109595c7dd154d65861ec03",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/select6.test"
        ],
        "message": "Fix the query flattener optimization so that it preserve the \"SF_Compound\" bit when flattening a compound subquery into a non-compound outer query. Failure to preserve that bit could allow subsequent flattenings which are not valid. Fix for ticket [c41afac34f15781fe09cd].\n\nFossilOrigin-Name: 523b42371122d9e1b3185425745f1490138bff7f7cc941ee26ee81df7ade5bf4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/select6.test||test/select6.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c736c40aab071a69bd5c5347b7c116d87ea3954019e967ca8ff7bdb4b518e5bf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4045:       substSelect(&x, pParent, 0);",
          "4046:     }",
          "",
          "[Removed Lines]",
          "4051:     pParent->selFlags |= pSub->selFlags & SF_Distinct;",
          "",
          "[Added Lines]",
          "4050:     pParent->selFlags |= pSub->selFlags & SF_Compound;",
          "",
          "---------------"
        ],
        "test/select6.test||test/select6.test": [
          "File: test/select6.test -> test/select6.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: # focus of this file is testing SELECT statements that contain",
          "13: # subqueries in their FROM clause.",
          "14: #",
          "17: set testdir [file dirname $argv0]",
          "18: source $testdir/tester.tcl",
          "",
          "[Removed Lines]",
          "15: # $Id: select6.test,v 1.29 2009/01/09 01:12:28 drh Exp $",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "613:     FROM ( SELECT count(*) AS cnt FROM t1 );",
          "614: } {{}}",
          "617: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "615: # 2019-05-29 ticket https://www.sqlite.org/src/info/c41afac34f15781f",
          "616: # A LIMIT clause in a subquery is incorrectly applied to a subquery.",
          "617: #",
          "618: do_execsql_test 12.100 {",
          "619:   DROP TABLE t1;",
          "620:   DROP TABLE t2;",
          "621:   CREATE TABLE t1(a);",
          "622:   INSERT INTO t1 VALUES(1);",
          "623:   INSERT INTO t1 VALUES(2);",
          "624:   CREATE TABLE t2(b);",
          "625:   INSERT INTO t2 VALUES(3);",
          "626:   SELECT * FROM (",
          "627:     SELECT * FROM (SELECT * FROM t1 LIMIT 1)",
          "628:     UNION ALL",
          "629:     SELECT * from t2);",
          "630: } {1 3}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "089c4bc2e2b51502644845dd5c27e2565fc1efc5",
      "candidate_info": {
        "commit_hash": "089c4bc2e2b51502644845dd5c27e2565fc1efc5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/089c4bc2e2b51502644845dd5c27e2565fc1efc5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y"
        ],
        "message": "\"STORED\" is not actually a keyword.  The parser looks for STORED as an ordinary identifier.\n\nFossilOrigin-Name: 167cd574d6a1d4fe2253f5bc5aaa7b031cbc82853e4d33b8d9b72eaf049003d4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 17e9f65814264de9c35bc5ba94e0a66fbbf1200c00d33ab9a19a0b6f92bc685a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "221:   EXCLUDE GROUPS OTHERS TIES",
          "222: %endif SQLITE_OMIT_WINDOWFUNC",
          "223: %ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "225: %endif",
          "226:   REINDEX RENAME CTIME_KW IF",
          "227:   .",
          "",
          "[Removed Lines]",
          "224:   GENERATED ALWAYS STORED",
          "",
          "[Added Lines]",
          "224:   GENERATED ALWAYS",
          "",
          "---------------"
        ]
      }
    }
  ]
}