{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a8506c41c6ecf6961c7502c97dcc1032440f14a4",
      "candidate_info": {
        "commit_hash": "a8506c41c6ecf6961c7502c97dcc1032440f14a4",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/a8506c41c6ecf6961c7502c97dcc1032440f14a4",
        "files": [
          "src/node_file.cc",
          "test/simple/test-isolates.js"
        ],
        "message": "node_file.cc should use NODE_LOOP()",
        "before_after_code_files": [
          "src/node_file.cc||src/node_file.cc",
          "test/simple/test-isolates.js||test/simple/test-isolates.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_file.cc||src/node_file.cc": [
          "File: src/node_file.cc -> src/node_file.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "226: #define ASYNC_CALL(func, callback, ...)                           \\",
          "227:   FSReqWrap* req_wrap = new FSReqWrap();                          \\",
          "229:       __VA_ARGS__, After);                                        \\",
          "230:   assert(r == 0);                                                 \\",
          "231:   req_wrap->object_->Set(oncomplete_sym, callback);               \\",
          "",
          "[Removed Lines]",
          "228:   int r = uv_fs_##func(uv_default_loop(), &req_wrap->req_,        \\",
          "",
          "[Added Lines]",
          "228:   int r = uv_fs_##func(NODE_LOOP(), &req_wrap->req_,              \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "235: #define SYNC_CALL(func, path, ...)                                \\",
          "236:   fs_req_wrap req_wrap;                                           \\",
          "238:   if (result < 0) {                                               \\",
          "240:     return ThrowException(UVException(code, #func, \"\", path));    \\",
          "241:   }",
          "",
          "[Removed Lines]",
          "237:   int result = uv_fs_##func(uv_default_loop(), &req_wrap.req, __VA_ARGS__, NULL); \\",
          "239:     int code = uv_last_error(uv_default_loop()).code;             \\",
          "",
          "[Added Lines]",
          "237:   int result = uv_fs_##func(NODE_LOOP(), &req_wrap.req, __VA_ARGS__, NULL); \\",
          "239:     int code = uv_last_error(NODE_LOOP()).code;             \\",
          "",
          "---------------"
        ],
        "test/simple/test-isolates.js||test/simple/test-isolates.js": [
          "File: test/simple/test-isolates.js -> test/simple/test-isolates.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: console.log(\"count: %d\", process._countIsolate());",
          "3: if (process.tid === 1) {",
          "4:   var isolate = process._newIsolate(process.argv);",
          "6:   console.error(\"master\");",
          "8: } else {",
          "11: }",
          "",
          "[Removed Lines]",
          "7:   console.log(\"count: %d\", process._countIsolate());",
          "9:   console.error(\"FUCK YEAH!\");",
          "10:   console.log(\"count: %d\", process._countIsolate());",
          "",
          "[Added Lines]",
          "1: var fs = require('fs');",
          "9:   fs.stat(__dirname, function(err, stat) {",
          "10:     if (err) {",
          "11:       console.error(\"thread 1 error!\");",
          "12:       throw err;",
          "13:     }",
          "14:     console.error('thread 1', stat);",
          "15:   });",
          "16:   console.log(\"thread 1 count: %d\", process._countIsolate());",
          "18:   console.error(\"slave\");",
          "19:   fs.stat(__dirname, function(err, stat) {",
          "20:     if (err) {",
          "21:       console.error(\"thread 2 error!\");",
          "22:       throw err;",
          "23:     }",
          "24:     console.error('thread 2', stat);",
          "25:   });",
          "26:   console.error(\"thread 2 count: %d\", process._countIsolate());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "24184345688e1f545ffc87e5742de06ed9855007",
      "candidate_info": {
        "commit_hash": "24184345688e1f545ffc87e5742de06ed9855007",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/24184345688e1f545ffc87e5742de06ed9855007",
        "files": [
          "lib/child_process.js"
        ],
        "message": "windows: fix single-accept mode for shared server sockets",
        "before_after_code_files": [
          "lib/child_process.js||lichild_process.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/child_process.js||lichild_process.js": [
          "File: lib/child_process.js -> lichild_process.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "313:     var obj = handleConversion[message.type];",
          "317:       net._setSimultaneousAccepts(handle);",
          "318:     }",
          "",
          "[Removed Lines]",
          "316:     if (obj.simultaneousAccepts) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f405517de1273bdf8493bc8a1e1294ded026c93a",
      "candidate_info": {
        "commit_hash": "f405517de1273bdf8493bc8a1e1294ded026c93a",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/f405517de1273bdf8493bc8a1e1294ded026c93a",
        "files": [
          "src/ev-emul.h",
          "src/node.h",
          "tools/installer.js"
        ],
        "message": "build: install ev-emul.h",
        "before_after_code_files": [
          "src/ev-emul.h||src/ev-emul.h",
          "src/node.h||src/node.h",
          "tools/installer.js||tools/installer.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/ev-emul.h||src/ev-emul.h": [
          "File: src/ev-emul.h -> src/ev-emul.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #ifndef NODE_EV_EMUL_H_",
          "24: #define NODE_EV_EMUL_H_",
          "26: #include \"uv.h\"",
          "28: #include <stdio.h>",
          "29: #include <stddef.h>",
          "30: #include <stdint.h>",
          "31: #include <string.h>",
          "33: #undef ev_init",
          "34: #undef ev_set_cb",
          "35: #undef ev_set_priority",
          "36: #undef ev_is_active",
          "37: #undef ev_timer_init",
          "38: #undef ev_timer_set",
          "39: #undef ev_io_init",
          "40: #undef ev_io_set",
          "42: #undef EV_P",
          "43: #undef EV_P_",
          "44: #undef EV_A",
          "45: #undef EV_A_",
          "46: #undef EV_DEFAULT",
          "47: #undef EV_DEFAULT_",
          "48: #undef EV_DEFAULT_UC",
          "49: #undef EV_DEFAULT_UC_",
          "51: #define EV_P            void",
          "52: #define EV_P_",
          "53: #define EV_A",
          "54: #define EV_A_",
          "55: #define EV_DEFAULT",
          "56: #define EV_DEFAULT_",
          "57: #define EV_DEFAULT_UC",
          "58: #define EV_DEFAULT_UC_",
          "60: #define ev_init(w, cb_)                                                       \\",
          "61:   do {                                                                        \\",
          "62:     void* data = (w)->data;                                                   \\",
          "63:     memset((w), 0, sizeof(*(w)));                                             \\",
          "64:     (w)->data = data;                                                         \\",
          "65:     (w)->cb = (cb_);                                                          \\",
          "66:   }                                                                           \\",
          "67:   while (0)",
          "69: #define ev_set_cb(w, cb_)                                                     \\",
          "70:   do                                                                          \\",
          "71:     (w)->cb = (cb_);                                                          \\",
          "72:   while (0)",
          "74: #define ev_set_priority(...)",
          "76: #define ev_is_active(w)                                                       \\",
          "77:   (uv_is_active((uv_handle_t*) &(w)->handle))",
          "79: #define ev_now(...)                                                           \\",
          "80:   (uv_hrtime() / 1e9)",
          "82: #define __uv_container_of(ptr, type, field)                                   \\",
          "83:   ((type*) ((char*) (ptr) - offsetof(type, field)))",
          "85: #define __uv_warn_of(old_, new_)                                              \\",
          "86:   do {                                                                        \\",
          "87:     if (__uv_warn_##old_) break;                                              \\",
          "88:     __uv_warn_##old_ = 1;                                                     \\",
          "89:     fputs(\"WARNING: \" #old_ \" is deprecated, use \" #new_ \"\\n\", stderr);       \\",
          "90:   }                                                                           \\",
          "91:   while (0)",
          "93: static int __uv_warn_ev_io    __attribute__((unused));",
          "94: static int __uv_warn_ev_timer __attribute__((unused));",
          "95: static int __uv_warn_ev_ref   __attribute__((unused));",
          "96: static int __uv_warn_ev_unref __attribute__((unused));",
          "98: struct __ev_io;",
          "99: typedef struct __ev_io __ev_io;",
          "100: typedef void (*__ev_io_cb)(__ev_io*, int);",
          "102: struct __ev_timer;",
          "103: typedef struct __ev_timer __ev_timer;",
          "104: typedef void (*__ev_timer_cb)(__ev_timer*, int);",
          "107: struct __ev_io {",
          "108:   __ev_io_cb cb;",
          "109:   void* data;",
          "111:   uv_poll_t handle;",
          "112:   int fd;",
          "113:   int events;",
          "114: };",
          "117: struct __ev_timer {",
          "118:   __ev_timer_cb cb;",
          "119:   void* data;",
          "120:   int flags;",
          "121:   uv_timer_t handle;",
          "122:   double delay;",
          "123:   double repeat;",
          "124: };",
          "127: inline static void __uv_poll_cb(uv_poll_t* handle, int status, int events) {",
          "128:   __ev_io* w = __uv_container_of(handle, __ev_io, handle);",
          "129:   w->cb(w, events);",
          "130:   (void) status;",
          "131: }",
          "134: inline static void __uv_timer_cb(uv_timer_t* handle, int status) {",
          "135:   __ev_timer* w = __uv_container_of(handle, __ev_timer, handle);",
          "136:   w->cb(w, 0);",
          "137:   (void) status;",
          "138: }",
          "141: inline static void __ev_io_init(__ev_io* w, __ev_io_cb cb, int fd, int events) {",
          "142:   __uv_warn_of(ev_io, uv_poll_t);",
          "143:   ev_init(w, cb);",
          "144:   w->fd = fd;",
          "145:   w->events = events;",
          "146: }",
          "149: inline static void __ev_io_set(__ev_io* w, int fd, int events) {",
          "150:   __uv_warn_of(ev_io, uv_poll_t);",
          "151:   w->fd = fd;",
          "152:   w->events = events;",
          "153: }",
          "156: inline static void __ev_io_start(__ev_io* w) {",
          "157:   __uv_warn_of(ev_io, uv_poll_t);",
          "158:   if (!(w->flags & 1)) {",
          "159:     uv_poll_init(uv_default_loop(), &w->handle, w->fd);",
          "160:     w->flags |= 1;",
          "161:   }",
          "162:   uv_poll_start(&w->handle, w->events, __uv_poll_cb);",
          "163: }",
          "166: inline static void __ev_io_stop(__ev_io* w) {",
          "167:   __uv_warn_of(ev_io, uv_poll_t);",
          "168:   uv_poll_stop(&w->handle);",
          "169: }",
          "172: inline static void __ev_timer_init(__ev_timer* w,",
          "173:                                    __ev_timer_cb cb,",
          "174:                                    double delay,",
          "175:                                    double repeat) {",
          "176:   __uv_warn_of(ev_timer, uv_timer_t);",
          "177:   ev_init(w, cb);",
          "178:   w->delay = delay;",
          "179:   w->repeat = repeat;",
          "180: }",
          "183: inline static void __ev_timer_set(__ev_timer* w,",
          "184:                                   double delay,",
          "185:                                   double repeat) {",
          "186:   __uv_warn_of(ev_timer, uv_timer_t);",
          "187:   w->delay = delay;",
          "188:   w->repeat = repeat;",
          "189: }",
          "192: inline static void __ev_timer_start(__ev_timer* w) {",
          "193:   uint64_t ms = 1000;",
          "194:   __uv_warn_of(ev_timer, uv_timer_t);",
          "195:   if (!(w->flags & 1)) {",
          "196:     uv_timer_init(uv_default_loop(), &w->handle);",
          "197:     w->flags |= 1;",
          "198:   }",
          "199:   uv_timer_start(&w->handle, __uv_timer_cb, w->delay * ms, w->repeat * ms);",
          "200: }",
          "203: inline static void __ev_timer_stop(__ev_timer* w) {",
          "204:   __uv_warn_of(ev_timer, uv_timer_t);",
          "205:   uv_timer_stop(&w->handle);",
          "206: }",
          "209: inline static void __ev_timer_again(__ev_timer* w) {",
          "210:   __uv_warn_of(ev_timer, uv_timer_t);",
          "211:   if (w->flags & 1)",
          "212:     uv_timer_again(&w->handle);",
          "213:   else",
          "215: }",
          "219: inline static void __ev_ref(void) {",
          "220:   __uv_warn_of(ev_ref, uv_ref);",
          "221:   uv_default_loop()->active_handles++;",
          "222: }",
          "226: inline static void __ev_unref(void) {",
          "227:   __uv_warn_of(ev_unref, uv_unref);",
          "228:   uv_default_loop()->active_handles--;",
          "229: }",
          "232: #define ev_io           __ev_io",
          "233: #define ev_io_init      __ev_io_init",
          "234: #define ev_io_set       __ev_io_set",
          "235: #define ev_io_start     __ev_io_start",
          "236: #define ev_io_stop      __ev_io_stop",
          "238: #define ev_timer        __ev_timer",
          "239: #define ev_timer_init   __ev_timer_init",
          "240: #define ev_timer_set    __ev_timer_set",
          "241: #define ev_timer_start  __ev_timer_start",
          "242: #define ev_timer_stop   __ev_timer_stop",
          "243: #define ev_timer_again  __ev_timer_again",
          "245: #define ev_ref          __ev_ref",
          "246: #define ev_unref        __ev_unref",
          "248: #undef __uv_container_of",
          "249: #undef __uv_warn_of",
          "",
          "---------------"
        ],
        "src/node.h||src/node.h": [
          "File: src/node.h -> src/node.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "273:              const v8::Handle<v8::Function> callback,",
          "274:              int argc,",
          "275:              v8::Handle<v8::Value> argv[]);",
          "276: }  // namespace node",
          "277: #endif  // SRC_NODE_H_",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "277: #if !defined(NODE_WANT_INTERNALS)",
          "278: # include \"ev-emul.h\"",
          "279: #endif",
          "",
          "---------------"
        ],
        "tools/installer.js||tools/installer.js": [
          "File: tools/installer.js -> tools/installer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:   copy([",
          "94:     'src/node.h', 'src/node_buffer.h', 'src/node_object_wrap.h',",
          "97:     'deps/v8/include/v8-debug.h', 'deps/v8/include/v8-preparser.h',",
          "98:     'deps/v8/include/v8-profiler.h', 'deps/v8/include/v8-testing.h',",
          "",
          "[Removed Lines]",
          "95:     'src/node_version.h',",
          "",
          "[Added Lines]",
          "95:     'src/node_version.h', 'src/ev-emul.h',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dd1b9477063e39c5d916ebb602947340442d4d50",
      "candidate_info": {
        "commit_hash": "dd1b9477063e39c5d916ebb602947340442d4d50",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/dd1b9477063e39c5d916ebb602947340442d4d50",
        "files": [
          "deps/uv/README.md",
          "deps/uv/config-unix.mk",
          "deps/uv/gyp_uv",
          "deps/uv/include/uv-private/uv-darwin.h",
          "deps/uv/include/uv-private/uv-unix.h",
          "deps/uv/include/uv.h",
          "deps/uv/src/unix/async.c",
          "deps/uv/src/unix/core.c",
          "deps/uv/src/unix/darwin.c",
          "deps/uv/src/unix/fsevents.c",
          "deps/uv/src/unix/internal.h",
          "deps/uv/src/unix/kqueue.c",
          "deps/uv/src/unix/loop.c",
          "deps/uv/src/unix/netbsd.c",
          "deps/uv/src/unix/process.c",
          "deps/uv/src/unix/stream.c",
          "deps/uv/src/unix/tcp.c",
          "deps/uv/src/uv-common.c",
          "deps/uv/src/win/error.c",
          "deps/uv/src/win/internal.h",
          "deps/uv/src/win/pipe.c",
          "deps/uv/src/win/process-stdio.c",
          "deps/uv/src/win/stream.c",
          "deps/uv/src/win/tcp.c",
          "deps/uv/src/win/tty.c",
          "deps/uv/test/test-fs-event.c",
          "deps/uv/uv.gyp"
        ],
        "message": "deps: upgrade libuv to 1f9bd99",
        "before_after_code_files": [
          "deps/uv/config-unix.mk||deps/uv/config-unix.mk",
          "deps/uv/include/uv-private/uv-darwin.h||deps/uv/include/uv-private/uv-darwin.h",
          "deps/uv/include/uv-private/uv-unix.h||deps/uv/include/uv-private/uv-unix.h",
          "deps/uv/include/uv.h||deps/uv/include/uv.h",
          "deps/uv/src/unix/async.c||deps/uv/src/unix/async.c",
          "deps/uv/src/unix/core.c||deps/uv/src/unix/core.c",
          "deps/uv/src/unix/darwin.c||deps/uv/src/unix/darwin.c",
          "deps/uv/src/unix/fsevents.c||deps/uv/src/unix/fsevents.c",
          "deps/uv/src/unix/internal.h||deps/uv/src/unix/internal.h",
          "deps/uv/src/unix/kqueue.c||deps/uv/src/unix/kqueue.c",
          "deps/uv/src/unix/loop.c||deps/uv/src/unix/loop.c",
          "deps/uv/src/unix/netbsd.c||deps/uv/src/unix/netbsd.c",
          "deps/uv/src/unix/process.c||deps/uv/src/unix/process.c",
          "deps/uv/src/unix/stream.c||deps/uv/src/unix/stream.c",
          "deps/uv/src/unix/tcp.c||deps/uv/src/unix/tcp.c",
          "deps/uv/src/uv-common.c||deps/uv/src/uv-common.c",
          "deps/uv/src/win/error.c||deps/uv/src/win/error.c",
          "deps/uv/src/win/internal.h||deps/uv/src/win/internal.h",
          "deps/uv/src/win/pipe.c||deps/uv/src/win/pipe.c",
          "deps/uv/src/win/process-stdio.c||deps/uv/src/win/process-stdio.c",
          "deps/uv/src/win/stream.c||deps/uv/src/win/stream.c",
          "deps/uv/src/win/tcp.c||deps/uv/src/win/tcp.c",
          "deps/uv/src/win/tty.c||deps/uv/src/win/tty.c",
          "deps/uv/test/test-fs-event.c||deps/uv/test/test-fs-event.c",
          "deps/uv/uv.gyp||deps/uv/uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/config-unix.mk||deps/uv/config-unix.mk": [
          "File: deps/uv/config-unix.mk -> deps/uv/config-unix.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: LINKFLAGS+=-framework CoreServices",
          "61: OBJS += src/unix/darwin.o",
          "62: OBJS += src/unix/kqueue.o",
          "63: endif",
          "65: ifeq (Linux,$(uname_S))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63: OBJS += src/unix/fsevents.o",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91: ifeq (NetBSD,$(uname_S))",
          "92: EV_CONFIG=config_netbsd.h",
          "93: EIO_CONFIG=config_netbsd.h",
          "95: OBJS += src/unix/netbsd.o",
          "96: OBJS += src/unix/kqueue.o",
          "97: endif",
          "",
          "[Removed Lines]",
          "94: LINKFLAGS+=",
          "",
          "[Added Lines]",
          "95: LINKFLAGS+=-lkvm",
          "",
          "---------------"
        ],
        "deps/uv/include/uv-private/uv-darwin.h||deps/uv/include/uv-private/uv-darwin.h": [
          "File: deps/uv/include/uv-private/uv-darwin.h -> deps/uv/include/uv-private/uv-darwin.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: # define UV_PLATFORM_SEM_T semaphore_t",
          "30: #endif",
          "32: #define UV_PLATFORM_FS_EVENT_FIELDS                                           \\",
          "33:   ev_io event_watcher;                                                        \\",
          "34:   int fflags;                                                                 \\",
          "35:   int fd;                                                                     \\",
          "37: #define UV_STREAM_PRIVATE_PLATFORM_FIELDS                                     \\",
          "38:   void* select;                                                               \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #define UV_PLATFORM_LOOP_FIELDS                                               \\",
          "33:   uv_thread_t cf_thread;                                                      \\",
          "34:   void* cf_cb;                                                                \\",
          "35:   void* cf_loop;                                                              \\",
          "36:   uv_mutex_t cf_mutex;                                                        \\",
          "37:   uv_sem_t cf_sem;                                                            \\",
          "38:   ngx_queue_t cf_signals;                                                     \\",
          "44:   void* cf_eventstream;                                                       \\",
          "45:   uv_async_t* cf_cb;                                                          \\",
          "46:   ngx_queue_t cf_events;                                                      \\",
          "47:   uv_sem_t cf_sem;                                                            \\",
          "48:   uv_mutex_t cf_mutex;                                                        \\",
          "",
          "---------------"
        ],
        "deps/uv/include/uv-private/uv-unix.h||deps/uv/include/uv-private/uv-unix.h": [
          "File: deps/uv/include/uv-private/uv-unix.h -> deps/uv/include/uv-private/uv-unix.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "137:   uint64_t time;                                                              \\",
          "138:   void* signal_ctx;                                                           \\",
          "139:   uv_signal_t child_watcher;                                                  \\",
          "140:   UV_PLATFORM_LOOP_FIELDS                                                     \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140:   int emfile_fd;                                                              \\",
          "",
          "---------------"
        ],
        "deps/uv/include/uv.h||deps/uv/include/uv.h": [
          "File: deps/uv/include/uv.h -> deps/uv/include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1790: UV_EXTERN int uv_thread_create(uv_thread_t *tid,",
          "1791:     void (*entry)(void *arg), void *arg);",
          "1792: UV_EXTERN int uv_thread_join(uv_thread_t *tid);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1792: UV_EXTERN unsigned long uv_thread_self(void);",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/async.c||deps/uv/src/unix/async.c": [
          "File: deps/uv/src/unix/async.c -> deps/uv/src/unix/async.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: __attribute__((always_inline))",
          "36:   if (*ptr)",
          "37:     return 1;",
          "",
          "[Removed Lines]",
          "34: inline static int uv__async_make_pending(volatile sig_atomic_t* ptr) {",
          "",
          "[Added Lines]",
          "34: static int uv__async_make_pending(volatile sig_atomic_t* ptr) {",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/core.c||deps/uv/src/unix/core.c": [
          "File: deps/uv/src/unix/core.c -> deps/uv/src/unix/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "464:   while (1) {",
          "465: #if __linux__",
          "468:     if (no_accept4)",
          "469:       goto skip;",
          "",
          "[Removed Lines]",
          "466:     static __read_mostly int no_accept4;",
          "",
          "[Added Lines]",
          "466:     static int no_accept4;",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/darwin.c||deps/uv/src/unix/darwin.c": [
          "File: deps/uv/src/unix/darwin.c -> deps/uv/src/unix/darwin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: static char *process_title;",
          "47: int uv__platform_loop_init(uv_loop_t* loop, int default_loop) {",
          "48:   return 0;",
          "49: }",
          "52: void uv__platform_loop_delete(uv_loop_t* loop) {",
          "53: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: void uv__cf_loop_runner(void* arg);",
          "48: void uv__cf_loop_cb(void* arg);",
          "50: typedef struct uv__cf_loop_signal_s uv__cf_loop_signal_t;",
          "51: struct uv__cf_loop_signal_s {",
          "52:   void* arg;",
          "53:   cf_loop_signal_cb cb;",
          "54:   ngx_queue_t member;",
          "55: };",
          "59:   CFRunLoopSourceContext ctx;",
          "60:   int r;",
          "62:   loop->cf_loop = NULL;",
          "63:   if ((r = uv_mutex_init(&loop->cf_mutex)))",
          "64:     return r;",
          "65:   if ((r = uv_sem_init(&loop->cf_sem, 0)))",
          "66:     return r;",
          "67:   ngx_queue_init(&loop->cf_signals);",
          "69:   memset(&ctx, 0, sizeof(ctx));",
          "70:   ctx.info = loop;",
          "71:   ctx.perform = uv__cf_loop_cb;",
          "72:   loop->cf_cb = CFRunLoopSourceCreate(NULL, 0, &ctx);",
          "74:   if ((r = uv_thread_create(&loop->cf_thread, uv__cf_loop_runner, loop)))",
          "75:     return r;",
          "78:   uv_sem_wait(&loop->cf_sem);",
          "79:   assert(((volatile CFRunLoopRef) loop->cf_loop) != NULL);",
          "86:   ngx_queue_t* item;",
          "87:   uv__cf_loop_signal_t* s;",
          "89:   assert(loop->cf_loop != NULL);",
          "90:   CFRunLoopStop(loop->cf_loop);",
          "91:   uv_thread_join(&loop->cf_thread);",
          "92:   loop->cf_loop = NULL;",
          "94:   uv_sem_destroy(&loop->cf_sem);",
          "95:   uv_mutex_destroy(&loop->cf_mutex);",
          "98:   while (!ngx_queue_empty(&loop->cf_signals)) {",
          "99:     item = ngx_queue_head(&loop->cf_signals);",
          "101:     s = ngx_queue_data(item, uv__cf_loop_signal_t, member);",
          "103:     ngx_queue_remove(item);",
          "104:     free(s);",
          "105:   }",
          "106: }",
          "109: void uv__cf_loop_runner(void* arg) {",
          "110:   uv_loop_t* loop;",
          "112:   loop = arg;",
          "117:   CFRunLoopAddSource(loop->cf_loop,",
          "118:                      loop->cf_cb,",
          "119:                      kCFRunLoopDefaultMode);",
          "121:   uv_sem_post(&loop->cf_sem);",
          "123:   CFRunLoopRun();",
          "125:   CFRunLoopRemoveSource(loop->cf_loop,",
          "126:                         loop->cf_cb,",
          "127:                         kCFRunLoopDefaultMode);",
          "128: }",
          "131: void uv__cf_loop_cb(void* arg) {",
          "132:   uv_loop_t* loop;",
          "133:   ngx_queue_t* item;",
          "134:   ngx_queue_t split_head;",
          "135:   uv__cf_loop_signal_t* s;",
          "137:   loop = arg;",
          "139:   uv_mutex_lock(&loop->cf_mutex);",
          "140:   ngx_queue_init(&split_head);",
          "141:   if (!ngx_queue_empty(&loop->cf_signals)) {",
          "142:     ngx_queue_t* split_pos = ngx_queue_next(&loop->cf_signals);",
          "143:     ngx_queue_split(&loop->cf_signals, split_pos, &split_head);",
          "144:   }",
          "145:   uv_mutex_unlock(&loop->cf_mutex);",
          "147:   while (!ngx_queue_empty(&split_head)) {",
          "148:     item = ngx_queue_head(&split_head);",
          "150:     s = ngx_queue_data(item, uv__cf_loop_signal_t, member);",
          "151:     s->cb(s->arg);",
          "153:     ngx_queue_remove(item);",
          "154:     free(s);",
          "155:   }",
          "156: }",
          "159: void uv__cf_loop_signal(uv_loop_t* loop, cf_loop_signal_cb cb, void* arg) {",
          "160:   uv__cf_loop_signal_t* item;",
          "162:   item = malloc(sizeof(*item));",
          "164:   if (item == NULL)",
          "165:     abort();",
          "167:   item->arg = arg;",
          "168:   item->cb = cb;",
          "170:   uv_mutex_lock(&loop->cf_mutex);",
          "171:   ngx_queue_insert_tail(&loop->cf_signals, &item->member);",
          "172:   uv_mutex_unlock(&loop->cf_mutex);",
          "174:   assert(loop->cf_loop != NULL);",
          "175:   CFRunLoopSourceSignal(loop->cf_cb);",
          "176:   CFRunLoopWakeUp(loop->cf_loop);",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/fsevents.c||deps/uv/src/unix/fsevents.c": [
          "File: deps/uv/src/unix/fsevents.c -> deps/uv/src/unix/fsevents.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #include \"uv.h\"",
          "22: #include \"internal.h\"",
          "24: #include <assert.h>",
          "25: #include <stdlib.h>",
          "26: #include <CoreServices/CoreServices.h>",
          "28: typedef struct uv__fsevents_event_s uv__fsevents_event_t;",
          "30: struct uv__fsevents_event_s {",
          "31:   int events;",
          "32:   ngx_queue_t member;",
          "33:   char path[1];",
          "34: };",
          "37: #define UV__FSEVENTS_WALK(handle, block)                                      \\",
          "38:     {                                                                         \\",
          "39:       ngx_queue_t* curr;                                                      \\",
          "40:       ngx_queue_t split_head;                                                 \\",
          "41:       uv__fsevents_event_t* event;                                            \\",
          "42:       uv_mutex_lock(&(handle)->cf_mutex);                                     \\",
          "43:       ngx_queue_init(&split_head);                                            \\",
          "44:       if (!ngx_queue_empty(&(handle)->cf_events)) {                           \\",
          "45:         ngx_queue_t* split_pos = ngx_queue_next(&(handle)->cf_events);        \\",
          "46:         ngx_queue_split(&(handle)->cf_events, split_pos, &split_head);        \\",
          "47:       }                                                                       \\",
          "48:       uv_mutex_unlock(&(handle)->cf_mutex);                                   \\",
          "49:       while (!ngx_queue_empty(&split_head)) {                                 \\",
          "50:         curr = ngx_queue_head(&split_head);                                   \\",
          "52:         event = ngx_queue_data(curr, uv__fsevents_event_t, member);           \\",
          "53:         ngx_queue_remove(curr);                                               \\",
          "55:         if (((handle)->flags & (UV_CLOSING | UV_CLOSED)) == 0)                \\",
          "56:           block                                                               \\",
          "58:         free(event);                                                          \\",
          "59:       }                                                                       \\",
          "60:     }",
          "63: void uv__fsevents_cb(uv_async_t* cb, int status) {",
          "64:   uv_fs_event_t* handle;",
          "66:   handle = cb->data;",
          "68:   UV__FSEVENTS_WALK(handle, {",
          "69:     if (handle->fd != -1)",
          "70:       handle->cb(handle, event->path, event->events, 0);",
          "71:   })",
          "73:   if ((handle->flags & (UV_CLOSING | UV_CLOSED)) == 0 && handle->fd == -1)",
          "74:     uv__fsevents_close(handle);",
          "75: }",
          "78: void uv__fsevents_event_cb(ConstFSEventStreamRef streamRef,",
          "79:                            void* info,",
          "80:                            size_t numEvents,",
          "81:                            void* eventPaths,",
          "82:                            const FSEventStreamEventFlags eventFlags[],",
          "83:                            const FSEventStreamEventId eventIds[]) {",
          "84:   size_t i;",
          "85:   int len;",
          "86:   char** paths;",
          "87:   uv_fs_event_t* handle;",
          "88:   uv__fsevents_event_t* event;",
          "89:   ngx_queue_t add_list;",
          "91:   handle = info;",
          "92:   paths = eventPaths;",
          "93:   ngx_queue_init(&add_list);",
          "95:   for (i = 0; i < numEvents; i++) {",
          "97:     if (eventFlags[i] & (kFSEventStreamEventFlagUserDropped |",
          "98:                          kFSEventStreamEventFlagKernelDropped |",
          "99:                          kFSEventStreamEventFlagEventIdsWrapped |",
          "100:                          kFSEventStreamEventFlagHistoryDone |",
          "101:                          kFSEventStreamEventFlagMount |",
          "102:                          kFSEventStreamEventFlagUnmount)) {",
          "103:       continue;",
          "104:     }",
          "107:     len = strlen(paths[i]);",
          "108:     event = malloc(sizeof(*event) + len);",
          "109:     if (event == NULL)",
          "110:       break;",
          "112:     memcpy(event->path, paths[i], len + 1);",
          "114:     if (eventFlags[i] & kFSEventStreamEventFlagItemModified)",
          "115:       event->events = UV_CHANGE;",
          "116:     else",
          "117:       event->events = UV_RENAME;",
          "119:     ngx_queue_insert_tail(&add_list, &event->member);",
          "120:   }",
          "121:   uv_mutex_lock(&handle->cf_mutex);",
          "122:   ngx_queue_add(&handle->cf_events, &add_list);",
          "123:   uv_mutex_unlock(&handle->cf_mutex);",
          "125:   uv_async_send(handle->cf_cb);",
          "126: }",
          "129: void uv__fsevents_schedule(void* arg) {",
          "130:   uv_fs_event_t* handle;",
          "132:   handle = arg;",
          "133:   FSEventStreamScheduleWithRunLoop(handle->cf_eventstream,",
          "134:                                    handle->loop->cf_loop,",
          "135:                                    kCFRunLoopDefaultMode);",
          "136:   FSEventStreamStart(handle->cf_eventstream);",
          "137:   uv_sem_post(&handle->cf_sem);",
          "138: }",
          "141: int uv__fsevents_init(uv_fs_event_t* handle) {",
          "142:   FSEventStreamContext ctx;",
          "143:   FSEventStreamRef ref;",
          "144:   CFStringRef path;",
          "145:   CFArrayRef paths;",
          "146:   CFAbsoluteTime latency;",
          "147:   FSEventStreamCreateFlags flags;",
          "150:   ctx.version = 0;",
          "151:   ctx.info = handle;",
          "152:   ctx.retain = NULL;",
          "153:   ctx.release = NULL;",
          "154:   ctx.copyDescription = NULL;",
          "157:   path = CFStringCreateWithCString(NULL,",
          "158:                                    handle->filename,",
          "159:                                    CFStringGetSystemEncoding());",
          "160:   paths = CFArrayCreate(NULL, (const void**)&path, 1, NULL);",
          "162:   latency = 0.15;",
          "165:   flags = kFSEventStreamCreateFlagFileEvents;",
          "167:   ref = FSEventStreamCreate(NULL,",
          "168:                             &uv__fsevents_event_cb,",
          "169:                             &ctx,",
          "170:                             paths,",
          "171:                             kFSEventStreamEventIdSinceNow,",
          "172:                             latency,",
          "173:                             flags);",
          "174:   handle->cf_eventstream = ref;",
          "180:   handle->cf_cb = malloc(sizeof(*handle->cf_cb));",
          "181:   if (handle->cf_cb == NULL)",
          "182:     return uv__set_sys_error(handle->loop, ENOMEM);",
          "184:   handle->cf_cb->data = handle;",
          "185:   uv_async_init(handle->loop, handle->cf_cb, uv__fsevents_cb);",
          "186:   handle->cf_cb->flags |= UV__HANDLE_INTERNAL;",
          "187:   uv_unref((uv_handle_t*) handle->cf_cb);",
          "189:   uv_mutex_init(&handle->cf_mutex);",
          "190:   uv_sem_init(&handle->cf_sem, 0);",
          "191:   ngx_queue_init(&handle->cf_events);",
          "193:   uv__cf_loop_signal(handle->loop, uv__fsevents_schedule, handle);",
          "195:   return 0;",
          "196: }",
          "199: int uv__fsevents_close(uv_fs_event_t* handle) {",
          "200:   if (handle->cf_eventstream == NULL)",
          "201:     return -1;",
          "204:   uv_sem_wait(&handle->cf_sem);",
          "207:   FSEventStreamStop(handle->cf_eventstream);",
          "210:   FSEventStreamInvalidate(handle->cf_eventstream);",
          "211:   FSEventStreamRelease(handle->cf_eventstream);",
          "212:   handle->cf_eventstream = NULL;",
          "214:   uv_close((uv_handle_t*) handle->cf_cb, (uv_close_cb) free);",
          "217:   UV__FSEVENTS_WALK(handle, {",
          "219:   })",
          "221:   uv_mutex_destroy(&handle->cf_mutex);",
          "222:   uv_sem_destroy(&handle->cf_sem);",
          "224:   return 0;",
          "225: }",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/internal.h||deps/uv/src/unix/internal.h": [
          "File: deps/uv/src/unix/internal.h -> deps/uv/src/unix/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include <assert.h>",
          "37: #if defined(__STRICT_ANSI__)",
          "38: # define inline __inline",
          "39: #endif",
          "",
          "[Removed Lines]",
          "31: #if defined(__GNUC__)",
          "32: # define __read_mostly __attribute__((__section__(\".data.read_mostly\")))",
          "33: #else",
          "34: # define __read_mostly",
          "35: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:   UV_LOOP_EIO_INITIALIZED = 1",
          "109: };",
          "114:   req->type = type;",
          "115:   uv__req_register(loop, req);",
          "116: }",
          "",
          "[Removed Lines]",
          "111: inline static void uv__req_init(uv_loop_t* loop,",
          "112:                                 uv_req_t* req,",
          "113:                                 uv_req_type type) {",
          "",
          "[Added Lines]",
          "105: __attribute__((unused))",
          "106: __attribute__((always_inline))",
          "107: static void uv__req_init(uv_loop_t* loop, uv_req_t* req, uv_req_type type) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "195: int uv__make_socketpair(int fds[2], int flags);",
          "196: int uv__make_pipe(int fds[2], int flags);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "192: #if defined(__APPLE__)",
          "193: typedef void (*cf_loop_signal_cb)(void*);",
          "195: void uv__cf_loop_signal(uv_loop_t* loop, cf_loop_signal_cb cb, void* arg);",
          "197: int uv__fsevents_init(uv_fs_event_t* handle);",
          "198: int uv__fsevents_close(uv_fs_event_t* handle);",
          "201: #if __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ < 1070",
          "203: static const int kFSEventStreamCreateFlagFileEvents = 0x00000010;",
          "204: static const int kFSEventStreamEventFlagItemCreated = 0x00000100;",
          "205: static const int kFSEventStreamEventFlagItemRemoved = 0x00000200;",
          "206: static const int kFSEventStreamEventFlagItemInodeMetaMod = 0x00000400;",
          "207: static const int kFSEventStreamEventFlagItemRenamed = 0x00000800;",
          "208: static const int kFSEventStreamEventFlagItemModified = 0x00001000;",
          "209: static const int kFSEventStreamEventFlagItemFinderInfoMod = 0x00002000;",
          "210: static const int kFSEventStreamEventFlagItemChangeOwner = 0x00004000;",
          "211: static const int kFSEventStreamEventFlagItemXattrMod = 0x00008000;",
          "212: static const int kFSEventStreamEventFlagItemIsFile = 0x00010000;",
          "213: static const int kFSEventStreamEventFlagItemIsDir = 0x00020000;",
          "214: static const int kFSEventStreamEventFlagItemIsSymlink = 0x00040000;",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/kqueue.c||deps/uv/src/unix/kqueue.c": [
          "File: deps/uv/src/unix/kqueue.c -> deps/uv/src/unix/kqueue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:                      uv_fs_event_cb cb,",
          "90:                      int flags) {",
          "91:   int fd;",
          "94:   assert(!flags);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92: #if defined(__APPLE__)",
          "93:   struct stat statbuf;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:   handle->fflags = 0;",
          "106:   handle->cb = cb;",
          "107:   handle->fd = fd;",
          "108:   uv__fs_event_start(handle);",
          "110:   return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112: #if defined(__APPLE__)",
          "114:   handle->cf_eventstream = NULL;",
          "116:   if (fstat(fd, &statbuf))",
          "117:     goto fallback;",
          "119:   if (!(statbuf.st_mode & S_IFDIR))",
          "120:     goto fallback;",
          "122:   return uv__fsevents_init(handle);",
          "124: fallback:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "114: void uv__fs_event_close(uv_fs_event_t* handle) {",
          "115:   uv__fs_event_stop(handle);",
          "116:   uv__handle_stop(handle);",
          "117:   free(handle->filename);",
          "118:   close(handle->fd);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134: #if defined(__APPLE__)",
          "135:   if (uv__fsevents_close(handle))",
          "136:     uv__fs_event_stop(handle);",
          "137: #else",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/loop.c||deps/uv/src/unix/loop.c": [
          "File: deps/uv/src/unix/loop.c -> deps/uv/src/unix/loop.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:   loop->time = uv_hrtime() / 1000000;",
          "52:   loop->async_pipefd[0] = -1;",
          "53:   loop->async_pipefd[1] = -1;",
          "54:   loop->ev = (default_loop ? ev_default_loop : ev_loop_new)(flags);",
          "55:   ev_set_userdata(loop->ev, loop);",
          "56:   eio_channel_init(&loop->uv_eio_channel, loop);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54:   loop->emfile_fd = -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:   uv__platform_loop_delete(loop);",
          "74:   uv__signal_unregister(loop);",
          "75:   ev_loop_destroy(loop->ev);",
          "76: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:   if (loop->emfile_fd != -1) {",
          "79:     close(loop->emfile_fd);",
          "80:     loop->emfile_fd = -1;",
          "81:   }",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/netbsd.c||deps/uv/src/unix/netbsd.c": [
          "File: deps/uv/src/unix/netbsd.c -> deps/uv/src/unix/netbsd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include \"uv.h\"",
          "23: #include <assert.h>",
          "24: #include <string.h>",
          "25: #include <errno.h>",
          "27: #include <sys/resource.h>",
          "28: #include <sys/types.h>",
          "29: #include <sys/sysctl.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"internal.h\"",
          "28: #include <kvm.h>",
          "29: #include <paths.h>",
          "30: #include <ifaddrs.h>",
          "31: #include <unistd.h>",
          "32: #include <time.h>",
          "33: #include <stdlib.h>",
          "34: #include <fcntl.h>",
          "36: #include <net/if.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: #undef NANOSEC",
          "35: #define NANOSEC ((uint64_t) 1e9)",
          "38: int uv__platform_loop_init(uv_loop_t* loop, int default_loop) {",
          "39:   return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: static char *process_title;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "50:   return (((uint64_t) ts.tv_sec) * NANOSEC + ts.tv_nsec);",
          "51: }",
          "53: void uv_loadavg(double avg[3]) {",
          "54:   struct loadavg info;",
          "55:   size_t size = sizeof(info);",
          "56:   int which[] = {CTL_VM, VM_LOADAVG};",
          "60:   avg[0] = (double) info.ldavg[0] / info.fscale;",
          "61:   avg[1] = (double) info.ldavg[1] / info.fscale;",
          "62:   avg[2] = (double) info.ldavg[2] / info.fscale;",
          "63: }",
          "65: int uv_exepath(char* buffer, size_t* size) {",
          "66:   int mib[4];",
          "67:   size_t cb;",
          "",
          "[Removed Lines]",
          "58:   if (sysctl(which, 2, &info, &size, NULL, 0) < 0) return;",
          "",
          "[Added Lines]",
          "71:   if (sysctl(which, 2, &info, &size, NULL, 0) == -1) return;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "78:   mib[3] = KERN_PROC_ARGV;",
          "80:   cb = *size;",
          "83:     return -1;",
          "84:   }",
          "",
          "[Removed Lines]",
          "81:   if (sysctl(mib, 4, buffer, &cb, NULL, 0) < 0) {",
          "",
          "[Added Lines]",
          "95:   if (sysctl(mib, 4, buffer, &cb, NULL, 0) == -1) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "87:   return 0;",
          "88: }",
          "90: uint64_t uv_get_free_memory(void) {",
          "91:   struct uvmexp info;",
          "92:   size_t size = sizeof(info);",
          "93:   int which[] = {CTL_VM, VM_UVMEXP};",
          "96:     return -1;",
          "97:   }",
          "99:   return (uint64_t) info.free * sysconf(_SC_PAGESIZE);",
          "100: }",
          "102: uint64_t uv_get_total_memory(void) {",
          "103: #if defined(HW_PHYSMEM64)",
          "104:   uint64_t info;",
          "",
          "[Removed Lines]",
          "95:   if (sysctl(which, 2, &info, &size, NULL, 0) < 0) {",
          "",
          "[Added Lines]",
          "110:   if (sysctl(which, 2, &info, &size, NULL, 0) == -1) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "109: #endif",
          "110:   size_t size = sizeof(info);",
          "113:     return -1;",
          "114:   }",
          "116:   return (uint64_t) info;",
          "117: }",
          "",
          "[Removed Lines]",
          "112:   if (sysctl(which, 2, &info, &size, NULL, 0) < 0) {",
          "",
          "[Added Lines]",
          "128:   if (sysctl(which, 2, &info, &size, NULL, 0) == -1) {",
          "136: char** uv_setup_args(int argc, char** argv) {",
          "137:   process_title = argc ? strdup(argv[0]) : NULL;",
          "138:   return argv;",
          "139: }",
          "142: uv_err_t uv_set_process_title(const char* title) {",
          "143:   if (process_title) free(process_title);",
          "145:   process_title = strdup(title);",
          "146:   setproctitle(\"%s\", title);",
          "148:   return uv_ok_;",
          "149: }",
          "152: uv_err_t uv_get_process_title(char* buffer, size_t size) {",
          "153:   if (process_title) {",
          "154:     strncpy(buffer, process_title, size);",
          "155:   } else {",
          "156:     if (size > 0) {",
          "157:       buffer[0] = '\\0';",
          "158:     }",
          "159:   }",
          "161:   return uv_ok_;",
          "162: }",
          "165: uv_err_t uv_resident_set_memory(size_t* rss) {",
          "166:   kvm_t *kd = NULL;",
          "167:   struct kinfo_proc2 *kinfo = NULL;",
          "168:   pid_t pid;",
          "169:   int nprocs;",
          "170:   int max_size = sizeof(struct kinfo_proc2);",
          "171:   int page_size;",
          "173:   page_size = getpagesize();",
          "174:   pid = getpid();",
          "176:   kd = kvm_open(NULL, NULL, NULL, KVM_NO_FILES, \"kvm_open\");",
          "178:   if (kd == NULL) goto error;",
          "180:   kinfo = kvm_getproc2(kd, KERN_PROC_PID, pid, max_size, &nprocs);",
          "181:   if (kinfo == NULL) goto error;",
          "185:   kvm_close(kd);",
          "187:   return uv_ok_;",
          "189: error:",
          "190:   if (kd) kvm_close(kd);",
          "191:   return uv__new_sys_error(errno);",
          "192: }",
          "195: uv_err_t uv_uptime(double* uptime) {",
          "196:   time_t now;",
          "197:   struct timeval info;",
          "198:   size_t size = sizeof(info);",
          "199:   static int which[] = {CTL_KERN, KERN_BOOTTIME};",
          "201:   if (sysctl(which, 2, &info, &size, NULL, 0) == -1) {",
          "202:     return uv__new_sys_error(errno);",
          "203:   }",
          "205:   now = time(NULL);",
          "208:   return uv_ok_;",
          "209: }",
          "212: uv_err_t uv_cpu_info(uv_cpu_info_t** cpu_infos, int* count) {",
          "213:   unsigned int ticks = (unsigned int)sysconf(_SC_CLK_TCK);",
          "214:   unsigned int multiplier = ((uint64_t)1000L / ticks);",
          "215:   unsigned int cur = 0;",
          "216:   uv_cpu_info_t* cpu_info;",
          "217:   u_int64_t* cp_times;",
          "218:   char model[512];",
          "219:   u_int64_t cpuspeed;",
          "220:   int numcpus;",
          "221:   size_t size;",
          "222:   int i;",
          "224:   size = sizeof(model);",
          "225:   if (sysctlbyname(\"machdep.cpu_brand\", &model, &size, NULL, 0) == -1 &&",
          "226:       sysctlbyname(\"hw.model\", &model, &size, NULL, 0) == -1) {",
          "227:     return uv__new_sys_error(errno);",
          "228:   }",
          "230:   size = sizeof(numcpus);",
          "231:   if (sysctlbyname(\"hw.ncpu\", &numcpus, &size, NULL, 0) == -1) {",
          "232:     return uv__new_sys_error(errno);",
          "233:   }",
          "237:   size = sizeof(cpuspeed);",
          "238:   if (sysctlbyname(\"machdep.tsc_freq\", &cpuspeed, &size, NULL, 0) == -1) {",
          "239:     cpuspeed = 0;",
          "240:   }",
          "242:   size = numcpus * CPUSTATES * sizeof(*cp_times);",
          "243:   cp_times = malloc(size);",
          "244:   if (cp_times == NULL) {",
          "245:     return uv__new_artificial_error(UV_ENOMEM);",
          "246:   }",
          "247:   if (sysctlbyname(\"kern.cp_time\", cp_times, &size, NULL, 0) == -1) {",
          "248:     return uv__new_sys_error(errno);",
          "249:   }",
          "252:   if (!(*cpu_infos)) {",
          "253:     free(cp_times);",
          "254:     free(*cpu_infos);",
          "255:     return uv__new_artificial_error(UV_ENOMEM);",
          "256:   }",
          "258:   for (i = 0; i < numcpus; i++) {",
          "259:     cpu_info = &(*cpu_infos)[i];",
          "260:     cpu_info->cpu_times.user = (uint64_t)(cp_times[CP_USER+cur]) * multiplier;",
          "261:     cpu_info->cpu_times.nice = (uint64_t)(cp_times[CP_NICE+cur]) * multiplier;",
          "262:     cpu_info->cpu_times.sys = (uint64_t)(cp_times[CP_SYS+cur]) * multiplier;",
          "263:     cpu_info->cpu_times.idle = (uint64_t)(cp_times[CP_IDLE+cur]) * multiplier;",
          "264:     cpu_info->cpu_times.irq = (uint64_t)(cp_times[CP_INTR+cur]) * multiplier;",
          "265:     cpu_info->model = strdup(model);",
          "266:     cpu_info->speed = (int)(cpuspeed/(uint64_t) 1e6);",
          "267:     cur += CPUSTATES;",
          "268:   }",
          "269:   free(cp_times);",
          "270:   return uv_ok_;",
          "271: }",
          "273: void uv_free_cpu_info(uv_cpu_info_t* cpu_infos, int count) {",
          "274:   int i;",
          "276:   for (i = 0; i < count; i++) {",
          "277:     free(cpu_infos[i].model);",
          "278:   }",
          "280:   free(cpu_infos);",
          "281: }",
          "284: uv_err_t uv_interface_addresses(uv_interface_address_t** addresses, int* count) {",
          "285:   struct ifaddrs *addrs;",
          "286:   struct ifaddrs *ent;",
          "287:   uv_interface_address_t* address;",
          "289:   if (getifaddrs(&addrs) != 0) {",
          "290:     return uv__new_sys_error(errno);",
          "291:   }",
          "296:   for (ent = addrs; ent != NULL; ent = ent->ifa_next) {",
          "297:     if (!(ent->ifa_flags & IFF_UP && ent->ifa_flags & IFF_RUNNING) ||",
          "298:         (ent->ifa_addr == NULL) ||",
          "299:         (ent->ifa_addr->sa_family != PF_INET)) {",
          "300:       continue;",
          "301:     }",
          "302:     (*count)++;",
          "303:   }",
          "307:   if (!(*addresses)) {",
          "308:     return uv__new_artificial_error(UV_ENOMEM);",
          "309:   }",
          "311:   address = *addresses;",
          "313:   for (ent = addrs; ent != NULL; ent = ent->ifa_next) {",
          "314:     if (!(ent->ifa_flags & IFF_UP && ent->ifa_flags & IFF_RUNNING)) {",
          "315:       continue;",
          "316:     }",
          "318:     if (ent->ifa_addr == NULL) {",
          "319:       continue;",
          "320:     }",
          "322:     if (ent->ifa_addr->sa_family != PF_INET) {",
          "323:       continue;",
          "324:     }",
          "326:     address->name = strdup(ent->ifa_name);",
          "328:     if (ent->ifa_addr->sa_family == AF_INET6) {",
          "329:       address->address.address6 = *((struct sockaddr_in6 *)ent->ifa_addr);",
          "330:     } else {",
          "331:       address->address.address4 = *((struct sockaddr_in *)ent->ifa_addr);",
          "332:     }",
          "334:     address->is_internal = !!(ent->ifa_flags & IFF_LOOPBACK) ? 1 : 0;",
          "336:     address++;",
          "337:   }",
          "339:   freeifaddrs(addrs);",
          "341:   return uv_ok_;",
          "342: }",
          "345: void uv_free_interface_addresses(uv_interface_address_t* addresses, int count) {",
          "346:   int i;",
          "348:   for (i = 0; i < count; i++) {",
          "349:     free(addresses[i].name);",
          "350:   }",
          "352:   free(addresses);",
          "353: }",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/process.c||deps/uv/src/unix/process.c": [
          "File: deps/uv/src/unix/process.c -> deps/uv/src/unix/process.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "118: int uv__make_socketpair(int fds[2], int flags) {",
          "119: #if __linux__",
          "122:   if (no_cloexec)",
          "123:     goto skip;",
          "",
          "[Removed Lines]",
          "120:   static __read_mostly int no_cloexec;",
          "",
          "[Added Lines]",
          "120:   static int no_cloexec;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "154: int uv__make_pipe(int fds[2], int flags) {",
          "155: #if __linux__",
          "158:   if (no_pipe2)",
          "159:     goto skip;",
          "",
          "[Removed Lines]",
          "156:   static __read_mostly int no_pipe2;",
          "",
          "[Added Lines]",
          "156:   static int no_pipe2;",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/stream.c||deps/uv/src/unix/stream.c": [
          "File: deps/uv/src/unix/stream.c -> deps/uv/src/unix/stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "62: static void uv__stream_io(uv_loop_t* loop, uv__io_t* w, int events);",
          "65: static size_t uv__buf_count(uv_buf_t bufs[], int bufcnt) {",
          "66:   size_t total = 0;",
          "67:   int i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66: static int uv__open_cloexec(const char* path, int flags) {",
          "67:   int fd;",
          "69: #if defined(__linux__)",
          "70:   fd = open(path, flags | UV__O_CLOEXEC);",
          "71:   if (fd != -1)",
          "72:     return fd;",
          "74:   if (errno != EINVAL)",
          "75:     return -1;",
          "78: #endif",
          "80:   fd = open(path, flags);",
          "81:   if (fd != -1)",
          "82:     uv__cloexec(fd, 1);",
          "84:   return fd;",
          "85: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:   ngx_queue_init(&stream->write_completed_queue);",
          "91:   stream->write_queue_size = 0;",
          "93: #if defined(__APPLE__)",
          "94:   stream->select = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116:   if (loop->emfile_fd == -1)",
          "117:     loop->emfile_fd = uv__open_cloexec(\"/\", O_RDONLY);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "370: }",
          "373: void uv__server_io(uv_loop_t* loop, uv__io_t* w, int events) {",
          "374:   int fd;",
          "377:   assert(events == UV__IO_READ);",
          "378:   assert(!(stream->flags & UV_CLOSING));",
          "",
          "[Removed Lines]",
          "375:   uv_stream_t* stream = container_of(w, uv_stream_t, read_watcher);",
          "",
          "[Added Lines]",
          "410: static int uv__emfile_trick(uv_loop_t* loop, int accept_fd) {",
          "411:   int fd;",
          "412:   int r;",
          "414:   if (loop->emfile_fd == -1)",
          "415:     return -1;",
          "417:   close(loop->emfile_fd);",
          "419:   for (;;) {",
          "420:     fd = uv__accept(accept_fd);",
          "422:     if (fd != -1) {",
          "423:       close(fd);",
          "424:       continue;",
          "425:     }",
          "427:     if (errno == EINTR)",
          "428:       continue;",
          "430:     if (errno == EAGAIN || errno == EWOULDBLOCK)",
          "431:       r = 0;",
          "432:     else",
          "433:       r = -1;",
          "435:     loop->emfile_fd = uv__open_cloexec(\"/\", O_RDONLY);",
          "437:     return r;",
          "438:   }",
          "439: }",
          "443:   static int use_emfile_trick = -1;",
          "444:   uv_stream_t* stream;",
          "446:   int r;",
          "448:   stream = container_of(w, uv_stream_t, read_watcher);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "389:     assert(stream->accepted_fd < 0);",
          "390:     fd = uv__accept(stream->fd);",
          "401:         continue;",
          "415:       }",
          "416:     }",
          "417:   }",
          "419:   if (stream->fd != -1 &&",
          "",
          "[Removed Lines]",
          "392:     if (fd < 0) {",
          "393:       if (errno == EAGAIN || errno == EWOULDBLOCK) {",
          "395:         return;",
          "396:       } else if (errno == EMFILE) {",
          "398:         return;",
          "399:       } else if (errno == ECONNABORTED) {",
          "402:       } else {",
          "403:         uv__set_sys_error(stream->loop, errno);",
          "404:         stream->connection_cb((uv_stream_t*)stream, -1);",
          "405:       }",
          "406:     } else {",
          "407:       stream->accepted_fd = fd;",
          "408:       stream->connection_cb(stream, 0);",
          "410:       if (stream->accepted_fd != -1 ||",
          "411:           (stream->type == UV_TCP && stream->flags == UV_TCP_SINGLE_ACCEPT)) {",
          "413:         uv__io_stop(stream->loop, &stream->read_watcher);",
          "414:         break;",
          "",
          "[Added Lines]",
          "464:     if (fd == -1) {",
          "465:       switch (errno) {",
          "466: #if EWOULDBLOCK != EAGAIN",
          "467:       case EWOULDBLOCK:",
          "468: #endif",
          "469:       case EAGAIN:",
          "472:       case ECONNABORTED:",
          "475:       case EMFILE:",
          "476:       case ENFILE:",
          "477:         if (use_emfile_trick == -1) {",
          "478:           const char* val = getenv(\"UV_ACCEPT_EMFILE_TRICK\");",
          "479:           use_emfile_trick = (val == NULL || atoi(val) != 0);",
          "480:         }",
          "482:         if (use_emfile_trick) {",
          "483:           SAVE_ERRNO(r = uv__emfile_trick(loop, stream->fd));",
          "484:           if (r == 0)",
          "485:             continue;",
          "486:         }",
          "490:       default:",
          "491:         uv__set_sys_error(loop, errno);",
          "492:         stream->connection_cb(stream, -1);",
          "497:     stream->accepted_fd = fd;",
          "498:     stream->connection_cb(stream, 0);",
          "500:     if (stream->accepted_fd != -1 ||",
          "501:         (stream->type == UV_TCP && stream->flags == UV_TCP_SINGLE_ACCEPT)) {",
          "503:       uv__io_stop(loop, &stream->read_watcher);",
          "504:       break;",
          "505:     }",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/tcp.c||deps/uv/src/unix/tcp.c": [
          "File: deps/uv/src/unix/tcp.c -> deps/uv/src/unix/tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "248:   if (uv_idle_init(tcp->loop, tcp->idle_handle))",
          "249:     abort();",
          "251:   tcp->flags |= UV_TCP_SINGLE_ACCEPT;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "250:   tcp->idle_handle->flags |= UV__HANDLE_INTERNAL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "331:   }",
          "332: #endif",
          "335:   if (enable && setsockopt(handle->fd,",
          "336:                            IPPROTO_TCP,",
          "337:                            TCP_KEEPALIVE,",
          "",
          "[Removed Lines]",
          "334: #ifdef TCP_KEEPALIVE",
          "",
          "[Added Lines]",
          "338: #if defined(TCP_KEEPALIVE) && !defined(__sun)",
          "",
          "---------------"
        ],
        "deps/uv/src/uv-common.c||deps/uv/src/uv-common.c": [
          "File: deps/uv/src/uv-common.c -> deps/uv/src/uv-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "314: }",
          "317: void uv_walk(uv_loop_t* loop, uv_walk_cb walk_cb, void* arg) {",
          "318:   ngx_queue_t* q;",
          "319:   uv_handle_t* h;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "317: unsigned long uv_thread_self(void) {",
          "318: #ifdef _WIN32",
          "319:   return (unsigned long) GetCurrentThreadId();",
          "320: #else",
          "321:   return (unsigned long) pthread_self();",
          "322: #endif",
          "323: }",
          "",
          "---------------"
        ],
        "deps/uv/src/win/error.c||deps/uv/src/win/error.c": [
          "File: deps/uv/src/win/error.c -> deps/uv/src/win/error.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:     case ERROR_BAD_PIPE:                    return UV_EPIPE;",
          "145:     case ERROR_NO_DATA:                     return UV_EPIPE;",
          "146:     case ERROR_PIPE_NOT_CONNECTED:          return UV_EPIPE;",
          "147:     case ERROR_PIPE_BUSY:                   return UV_EBUSY;",
          "148:     case ERROR_SEM_TIMEOUT:                 return UV_ETIMEDOUT;",
          "149:     case WSAETIMEDOUT:                      return UV_ETIMEDOUT;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147:     case WSAESHUTDOWN:                      return UV_EPIPE;",
          "",
          "---------------"
        ],
        "deps/uv/src/win/internal.h||deps/uv/src/win/internal.h": [
          "File: deps/uv/src/win/internal.h -> deps/uv/src/win/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: #define UV_HANDLE_LISTENING                     0x00000800",
          "53: #define UV_HANDLE_CONNECTION                    0x00001000",
          "54: #define UV_HANDLE_CONNECTED                     0x00002000",
          "58: #define UV_HANDLE_READ_PENDING                  0x00020000",
          "59: #define UV_HANDLE_SYNC_BYPASS_IOCP              0x00040000",
          "60: #define UV_HANDLE_ZERO_READ                     0x00080000",
          "",
          "[Removed Lines]",
          "55: #define UV_HANDLE_EOF                           0x00004000",
          "56: #define UV_HANDLE_SHUTTING                      0x00008000",
          "57: #define UV_HANDLE_SHUT                          0x00010000",
          "",
          "[Added Lines]",
          "55: #define UV_HANDLE_READABLE                      0x00008000",
          "56: #define UV_HANDLE_WRITABLE                      0x00010000",
          "",
          "---------------"
        ],
        "deps/uv/src/win/pipe.c||deps/uv/src/win/pipe.c": [
          "File: deps/uv/src/win/pipe.c -> deps/uv/src/win/pipe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "317:       UNREGISTER_HANDLE_REQ(loop, handle, req);",
          "320:       if (req->cb) {",
          "321:         uv__set_sys_error(loop, pRtlNtStatusToDosError(nt_status));",
          "322:         req->cb(req, -1);",
          "",
          "[Removed Lines]",
          "319:       handle->flags &= ~UV_HANDLE_SHUTTING;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "344:       UNREGISTER_HANDLE_REQ(loop, handle, req);",
          "347:       if (req->cb) {",
          "348:         uv__set_sys_error(loop, GetLastError());",
          "349:         req->cb(req, -1);",
          "",
          "[Removed Lines]",
          "346:       handle->flags &= ~UV_HANDLE_SHUTTING;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "630:   }",
          "632:   if (handle->flags & UV_HANDLE_CONNECTION) {",
          "634:     eof_timer_destroy(handle);",
          "635:   }",
          "",
          "[Removed Lines]",
          "633:     handle->flags |= UV_HANDLE_SHUTTING;",
          "",
          "[Added Lines]",
          "633:     handle->flags &= ~UV_HANDLE_WRITABLE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "659:     uv_want_endgame(loop, (uv_handle_t*) handle);",
          "660:   }",
          "662:   uv__handle_closing(handle);",
          "663: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "662:   handle->flags &= ~(UV_HANDLE_READABLE | UV_HANDLE_WRITABLE);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "747:     uv_pipe_connection_init(pipe_client);",
          "748:     pipe_client->handle = req->pipeHandle;",
          "751:     server->pending_accepts = req->next_pending;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "750:     pipe_client->flags |= UV_HANDLE_READABLE | UV_HANDLE_WRITABLE;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "964:     uv_read_cb read_cb, uv_read2_cb read2_cb) {",
          "965:   uv_loop_t* loop = handle->loop;",
          "977:   handle->flags |= UV_HANDLE_READING;",
          "978:   INCREASE_ACTIVE_COUNT(loop, handle);",
          "979:   handle->read_cb = read_cb;",
          "",
          "[Removed Lines]",
          "967:   if (!(handle->flags & UV_HANDLE_CONNECTION)) {",
          "968:     uv__set_artificial_error(loop, UV_EINVAL);",
          "969:     return -1;",
          "970:   }",
          "972:   if (handle->flags & UV_HANDLE_EOF) {",
          "973:     uv__set_artificial_error(loop, UV_EOF);",
          "974:     return -1;",
          "975:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1073:   assert(handle->handle != INVALID_HANDLE_VALUE);",
          "1085:   uv_req_init(loop, (uv_req_t*) req);",
          "1086:   req->type = UV_WRITE;",
          "1087:   req->handle = (uv_stream_t*) handle;",
          "",
          "[Removed Lines]",
          "1075:   if (!(handle->flags & UV_HANDLE_CONNECTION)) {",
          "1076:     uv__set_artificial_error(loop, UV_EINVAL);",
          "1077:     return -1;",
          "1078:   }",
          "1080:   if (handle->flags & UV_HANDLE_SHUTTING) {",
          "1081:     uv__set_artificial_error(loop, UV_EOF);",
          "1082:     return -1;",
          "1083:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1254:   eof_timer_destroy(handle);",
          "1257:   uv_read_stop((uv_stream_t*) handle);",
          "1259:   uv__set_artificial_error(loop, UV_EOF);",
          "",
          "[Removed Lines]",
          "1256:   handle->flags |= UV_HANDLE_EOF;",
          "",
          "[Added Lines]",
          "1238:   handle->flags &= ~UV_HANDLE_READABLE;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1483:     uv_queue_non_overlapped_write(handle);",
          "1484:   }",
          "1488:     uv_want_endgame(loop, (uv_handle_t*)handle);",
          "1489:   }",
          "",
          "[Removed Lines]",
          "1486:   if (handle->write_reqs_pending == 0 &&",
          "1487:       handle->flags & UV_HANDLE_SHUTTING) {",
          "",
          "[Added Lines]",
          "1468:   if (handle->shutdown_req != NULL &&",
          "1469:       handle->write_reqs_pending == 0) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1552:     eof_timer_init(handle);",
          "",
          "[Removed Lines]",
          "1551:   if (!(handle->flags & UV_HANDLE_EOF)) {",
          "",
          "[Added Lines]",
          "1533:   if (handle->flags & UV_HANDLE_READABLE) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1663:   uv_pipe_connection_init(pipe);",
          "1664:   pipe->handle = os_handle;",
          "1666:   if (pipe->ipc) {",
          "1667:     assert(!(pipe->flags & UV_HANDLE_NON_OVERLAPPED_PIPE));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1647:   pipe->flags |= UV_HANDLE_READABLE | UV_HANDLE_WRITABLE;",
          "",
          "---------------"
        ],
        "deps/uv/src/win/process-stdio.c||deps/uv/src/win/process-stdio.c": [
          "File: deps/uv/src/win/process-stdio.c -> deps/uv/src/win/process-stdio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "163:     }",
          "164:   }",
          "167:   return uv_ok_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:   server_pipe->flags |= UV_HANDLE_READABLE | UV_HANDLE_WRITABLE;",
          "",
          "---------------"
        ],
        "deps/uv/src/win/stream.c||deps/uv/src/win/stream.c": [
          "File: deps/uv/src/win/stream.c -> deps/uv/src/win/stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: int uv_read_start(uv_stream_t* handle, uv_alloc_cb alloc_cb,",
          "57:     uv_read_cb read_cb) {",
          "58:   switch (handle->type) {",
          "59:     case UV_TCP:",
          "60:       return uv_tcp_read_start((uv_tcp_t*)handle, alloc_cb, read_cb);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58:   if (handle->flags & UV_HANDLE_READING) {",
          "59:     uv__set_sys_error(handle->loop, UV_EALREADY);",
          "60:     return -1;",
          "61:   }",
          "63:   if (!(handle->flags & UV_HANDLE_READABLE)) {",
          "64:     uv__set_artificial_error(handle->loop, UV_ENOTCONN);",
          "65:     return -1;",
          "66:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72: int uv_read2_start(uv_stream_t* handle, uv_alloc_cb alloc_cb,",
          "73:     uv_read2_cb read_cb) {",
          "74:   switch (handle->type) {",
          "75:     case UV_NAMED_PIPE:",
          "76:       return uv_pipe_read2_start((uv_pipe_t*)handle, alloc_cb, read_cb);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:   if (handle->flags & UV_HANDLE_READING) {",
          "85:     uv__set_sys_error(handle->loop, UV_EALREADY);",
          "86:     return -1;",
          "87:   }",
          "89:   if (!(handle->flags & UV_HANDLE_READABLE)) {",
          "90:     uv__set_artificial_error(handle->loop, UV_ENOTCONN);",
          "91:     return -1;",
          "92:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "84: int uv_read_stop(uv_stream_t* handle) {",
          "85:   if (handle->type == UV_TTY) {",
          "86:     return uv_tty_read_stop((uv_tty_t*) handle);",
          "88:     handle->flags &= ~UV_HANDLE_READING;",
          "89:     DECREASE_ACTIVE_COUNT(handle->loop, handle);",
          "90:     return 0;",
          "93:   }",
          "94: }",
          "",
          "[Removed Lines]",
          "87:   } else if (handle->flags & UV_HANDLE_READING) {",
          "91:   } else {",
          "92:     return 0;",
          "",
          "[Added Lines]",
          "105:   if (!(handle->flags & UV_HANDLE_READING))",
          "106:     return 0;",
          "110:   } else {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "98:     uv_write_cb cb) {",
          "99:   uv_loop_t* loop = handle->loop;",
          "101:   switch (handle->type) {",
          "102:     case UV_TCP:",
          "103:       return uv_tcp_write(loop, req, (uv_tcp_t*) handle, bufs, bufcnt, cb);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122:   if (!(handle->flags & UV_HANDLE_WRITABLE)) {",
          "123:     uv__set_artificial_error(loop, UV_EPIPE);",
          "124:     return -1;",
          "125:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "117:     uv_stream_t* send_handle, uv_write_cb cb) {",
          "118:   uv_loop_t* loop = handle->loop;",
          "120:   switch (handle->type) {",
          "121:     case UV_NAMED_PIPE:",
          "122:       return uv_pipe_write2(loop, req, (uv_pipe_t*) handle, bufs, bufcnt, send_handle, cb);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146:   if (!(handle->flags & UV_HANDLE_WRITABLE)) {",
          "147:     uv__set_artificial_error(loop, UV_EPIPE);",
          "148:     return -1;",
          "149:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "131: int uv_shutdown(uv_shutdown_t* req, uv_stream_t* handle, uv_shutdown_cb cb) {",
          "132:   uv_loop_t* loop = handle->loop;",
          "136:     return -1;",
          "137:   }",
          "141:     return -1;",
          "142:   }",
          "",
          "[Removed Lines]",
          "134:   if (!(handle->flags & UV_HANDLE_CONNECTION)) {",
          "135:     uv__set_sys_error(loop, WSAEINVAL);",
          "139:   if (handle->flags & UV_HANDLE_SHUTTING) {",
          "140:     uv__set_sys_error(loop, WSAESHUTDOWN);",
          "",
          "[Added Lines]",
          "165:  if (!(handle->flags & UV_HANDLE_WRITABLE)) {",
          "166:     uv__set_artificial_error(loop, UV_EPIPE);",
          "170:   if (!(handle->flags & UV_HANDLE_WRITABLE)) {",
          "171:     uv__set_artificial_error(loop, UV_EPIPE);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "146:   req->handle = handle;",
          "147:   req->cb = cb;",
          "150:   handle->shutdown_req = req;",
          "151:   handle->reqs_pending++;",
          "152:   REGISTER_HANDLE_REQ(loop, handle, req);",
          "",
          "[Removed Lines]",
          "149:   handle->flags |= UV_HANDLE_SHUTTING;",
          "",
          "[Added Lines]",
          "180:   handle->flags &= ~UV_HANDLE_WRITABLE;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "160: int uv_is_readable(const uv_stream_t* handle) {",
          "162: }",
          "165: int uv_is_writable(const uv_stream_t* handle) {",
          "167: }",
          "",
          "[Removed Lines]",
          "161:   return !(handle->flags & UV_HANDLE_EOF);",
          "166:   return !(handle->flags & UV_HANDLE_SHUTTING);",
          "",
          "[Added Lines]",
          "192:   return !!(handle->flags & UV_HANDLE_READABLE);",
          "197:   return !!(handle->flags & UV_HANDLE_WRITABLE);",
          "",
          "---------------"
        ],
        "deps/uv/src/win/tcp.c||deps/uv/src/win/tcp.c": [
          "File: deps/uv/src/win/tcp.c -> deps/uv/src/win/tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:       uv__set_artificial_error(loop, UV_ECANCELED);",
          "170:     } else if (shutdown(handle->socket, SD_SEND) != SOCKET_ERROR) {",
          "171:       status = 0;",
          "173:     } else {",
          "174:       status = -1;",
          "175:       uv__set_sys_error(loop, WSAGetLastError());",
          "",
          "[Removed Lines]",
          "172:       handle->flags |= UV_HANDLE_SHUT;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "605:   } else {",
          "606:     uv_connection_init((uv_stream_t*) client);",
          "609:   }",
          "",
          "[Removed Lines]",
          "608:     client->flags |= UV_HANDLE_BOUND;",
          "",
          "[Added Lines]",
          "607:     client->flags |= UV_HANDLE_BOUND | UV_HANDLE_READABLE | UV_HANDLE_WRITABLE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "646:     uv_read_cb read_cb) {",
          "647:   uv_loop_t* loop = handle->loop;",
          "664:   handle->flags |= UV_HANDLE_READING;",
          "665:   handle->read_cb = read_cb;",
          "666:   handle->alloc_cb = alloc_cb;",
          "",
          "[Removed Lines]",
          "649:   if (!(handle->flags & UV_HANDLE_CONNECTION)) {",
          "650:     uv__set_sys_error(loop, WSAEINVAL);",
          "651:     return -1;",
          "652:   }",
          "654:   if (handle->flags & UV_HANDLE_READING) {",
          "655:     uv__set_sys_error(loop, WSAEALREADY);",
          "656:     return -1;",
          "657:   }",
          "659:   if (handle->flags & UV_HANDLE_EOF) {",
          "660:     uv__set_sys_error(loop, WSAESHUTDOWN);",
          "661:     return -1;",
          "662:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "855:   int result;",
          "856:   DWORD bytes;",
          "868:   uv_req_init(loop, (uv_req_t*) req);",
          "869:   req->type = UV_WRITE;",
          "870:   req->handle = (uv_stream_t*) handle;",
          "",
          "[Removed Lines]",
          "858:   if (!(handle->flags & UV_HANDLE_CONNECTION)) {",
          "859:     uv__set_sys_error(loop, WSAEINVAL);",
          "860:     return -1;",
          "861:   }",
          "863:   if (handle->flags & UV_HANDLE_SHUTTING) {",
          "864:     uv__set_sys_error(loop, WSAESHUTDOWN);",
          "865:     return -1;",
          "866:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "970:           handle->flags &= ~UV_HANDLE_READING;",
          "971:           DECREASE_ACTIVE_COUNT(loop, handle);",
          "972:         }",
          "975:         uv__set_error(loop, UV_EOF, ERROR_SUCCESS);",
          "976:         buf.base = 0;",
          "",
          "[Removed Lines]",
          "973:         handle->flags |= UV_HANDLE_EOF;",
          "",
          "[Added Lines]",
          "947:         handle->flags &= ~UV_HANDLE_READABLE;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1001:           }",
          "1002:         } else {",
          "1005:           DECREASE_ACTIVE_COUNT(loop, handle);",
          "1008:           uv__set_error(loop, UV_EOF, ERROR_SUCCESS);",
          "1009:           handle->read_cb((uv_stream_t*)handle, -1, buf);",
          "",
          "[Removed Lines]",
          "1004:           handle->flags &= ~UV_HANDLE_READING;",
          "1006:           handle->flags |= UV_HANDLE_EOF;",
          "",
          "[Added Lines]",
          "978:           handle->flags &= ~(UV_HANDLE_READING | UV_HANDLE_READABLE);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1070:   }",
          "1072:   handle->write_reqs_pending--;",
          "1074:       handle->write_reqs_pending == 0) {",
          "1075:     uv_want_endgame(loop, (uv_handle_t*)handle);",
          "1076:   }",
          "",
          "[Removed Lines]",
          "1073:   if (handle->flags & UV_HANDLE_SHUTTING &&",
          "",
          "[Added Lines]",
          "1046:   if (handle->shutdown_req != NULL &&",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1139:                     NULL,",
          "1140:                     0) == 0) {",
          "1141:       uv_connection_init((uv_stream_t*)handle);",
          "1142:       loop->active_tcp_streams++;",
          "1143:       ((uv_connect_cb)req->cb)(req, 0);",
          "1144:     } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1115:       handle->flags |= UV_HANDLE_READABLE | UV_HANDLE_WRITABLE;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1182:   if (tcp_connection) {",
          "1183:     uv_connection_init((uv_stream_t*)tcp);",
          "1184:   }",
          "1186:   tcp->flags |= UV_HANDLE_BOUND;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1158:     tcp->flags |= UV_HANDLE_READABLE | UV_HANDLE_WRITABLE;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1342:     if (!(tcp->flags & UV_HANDLE_SHARED_TCP_SOCKET)) {",
          "1344:       shutdown(tcp->socket, SD_SEND);",
          "1347:     } else if (uv_tcp_try_cancel_io(tcp) == 0) {",
          "",
          "[Removed Lines]",
          "1345:       tcp->flags |= UV_HANDLE_SHUT;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1397:     tcp->flags |= UV_HANDLE_TCP_SOCKET_CLOSED;",
          "1398:   }",
          "1400:   uv__handle_closing(tcp);",
          "1402:   if (tcp->reqs_pending == 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1374:   tcp->flags &= ~(UV_HANDLE_READABLE | UV_HANDLE_WRITABLE);",
          "",
          "---------------"
        ],
        "deps/uv/src/win/tty.c||deps/uv/src/win/tty.c": [
          "File: deps/uv/src/win/tty.c -> deps/uv/src/win/tty.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "140:   if (readable) {",
          "142:     tty->original_console_mode = original_console_mode;",
          "144:     tty->read_line_handle = NULL;",
          "145:     tty->read_line_buffer = uv_null_buf_;",
          "146:     tty->read_raw_wait = NULL;",
          "",
          "[Removed Lines]",
          "143:     tty->flags |= UV_HANDLE_TTY_READABLE;",
          "",
          "[Added Lines]",
          "143:     tty->flags |= UV_HANDLE_TTY_READABLE | UV_HANDLE_READABLE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "152:     memset(&tty->last_input_record, 0, sizeof tty->last_input_record);",
          "153:   } else {",
          "156:     tty->utf8_bytes_left = 0;",
          "157:     tty->utf8_codepoint = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155:     tty->flags |= UV_HANDLE_READABLE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "827: int uv_tty_read_stop(uv_tty_t* handle) {",
          "828:   uv_loop_t* loop = handle->loop;",
          "840:   if ((handle->flags & UV_HANDLE_READ_PENDING) &&",
          "",
          "[Removed Lines]",
          "829:   if (!(handle->flags & UV_HANDLE_TTY_READABLE)) {",
          "830:     uv__set_artificial_error(handle->loop, UV_EINVAL);",
          "831:     return -1;",
          "832:   }",
          "834:   if (handle->flags & UV_HANDLE_READING) {",
          "835:     handle->flags &= ~UV_HANDLE_READING;",
          "836:     DECREASE_ACTIVE_COUNT(loop, handle);",
          "837:   }",
          "",
          "[Added Lines]",
          "832:   handle->flags &= ~UV_HANDLE_READING;",
          "833:   DECREASE_ACTIVE_COUNT(loop, handle);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1750:     uv_buf_t bufs[], int bufcnt, uv_write_cb cb) {",
          "1751:   DWORD error;",
          "1764:   uv_req_init(loop, (uv_req_t*) req);",
          "1765:   req->type = UV_WRITE;",
          "1766:   req->handle = (uv_stream_t*) handle;",
          "",
          "[Removed Lines]",
          "1753:   if (handle->flags & UV_HANDLE_TTY_READABLE) {",
          "1754:     uv__set_artificial_error(handle->loop, UV_EINVAL);",
          "1755:     return -1;",
          "1756:   }",
          "1758:   if ((handle->flags & UV_HANDLE_SHUTTING) ||",
          "1759:       (handle->flags & UV_HANDLE_CLOSING)) {",
          "1760:     uv__set_sys_error(loop, WSAESHUTDOWN);",
          "1761:     return -1;",
          "1762:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1796:   }",
          "1798:   handle->write_reqs_pending--;",
          "1800:       handle->write_reqs_pending == 0) {",
          "1801:     uv_want_endgame(loop, (uv_handle_t*)handle);",
          "1802:   }",
          "",
          "[Removed Lines]",
          "1799:   if (handle->flags & UV_HANDLE_SHUTTING &&",
          "",
          "[Added Lines]",
          "1784:   if (handle->shutdown_req != NULL &&",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1808: void uv_tty_close(uv_tty_t* handle) {",
          "1809:   CloseHandle(handle->handle);",
          "1813:     uv_tty_read_stop(handle);",
          "1819:   uv__handle_closing(handle);",
          "1821:   if (handle->reqs_pending == 0) {",
          "",
          "[Removed Lines]",
          "1811:   if (handle->flags & UV_HANDLE_TTY_READABLE) {",
          "1814:   } else {",
          "1816:     handle->flags |= UV_HANDLE_SHUTTING;",
          "1817:   }",
          "",
          "[Added Lines]",
          "1796:   if (handle->flags & UV_HANDLE_READING)",
          "1799:   handle->flags &= ~(UV_HANDLE_READABLE | UV_HANDLE_WRITABLE);",
          "",
          "---------------"
        ],
        "deps/uv/test/test-fs-event.c||deps/uv/test/test-fs-event.c": [
          "File: deps/uv/test/test-fs-event.c -> deps/uv/test/test-fs-event.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:   ASSERT(handle == &fs_event);",
          "99:   ASSERT(status == 0);",
          "100:   ASSERT(events == UV_RENAME);",
          "102:   uv_close((uv_handle_t*)handle, close_cb);",
          "103: }",
          "",
          "[Removed Lines]",
          "101:   ASSERT(filename == NULL || strcmp(filename, \"file1\") == 0);",
          "",
          "[Added Lines]",
          "101:   ASSERT(filename == NULL || strcmp(filename, \"file1\") == 0 ||",
          "102:          strstr(filename, \"watch_dir\") != NULL);",
          "",
          "---------------"
        ],
        "deps/uv/uv.gyp||deps/uv/uv.gyp": [
          "File: deps/uv/uv.gyp -> deps/uv/uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:           'libraries': [ '-lm' ]",
          "148:         }],",
          "149:         [ 'OS==\"mac\"', {",
          "151:           'direct_dependent_settings': {",
          "152:             'libraries': [",
          "153:               '$(SDKROOT)/System/Library/Frameworks/CoreServices.framework',",
          "",
          "[Removed Lines]",
          "150:           'sources': [ 'src/unix/darwin.c' ],",
          "",
          "[Added Lines]",
          "150:           'sources': [ 'src/unix/darwin.c', 'src/unix/fsevents.c' ],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "209:             'EIO_CONFIG_H=\"config_openbsd.h\"',",
          "210:           ],",
          "211:         }],",
          "212:         [ 'OS==\"mac\" or OS==\"freebsd\" or OS==\"openbsd\" or OS==\"netbsd\"', {",
          "213:           'sources': [ 'src/unix/kqueue.c' ],",
          "214:         }],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "212:         [ 'OS==\"netbsd\"', {",
          "213:           'sources': [ 'src/unix/netbsd.c' ],",
          "214:           'defines': [",
          "215:             'EV_CONFIG_H=\"config_netbsd.h\"',",
          "216:             'EIO_CONFIG_H=\"config_netbsd.h\"',",
          "217:           ],",
          "218:           'direct_dependent_settings': {",
          "219:             'libraries': [",
          "220:               '-lkvm',",
          "221:             ],",
          "222:           },",
          "223:         }],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c7771bc2ec74afb8b9e239c34c183c92e10acd87",
      "candidate_info": {
        "commit_hash": "c7771bc2ec74afb8b9e239c34c183c92e10acd87",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/c7771bc2ec74afb8b9e239c34c183c92e10acd87",
        "files": [
          "lib/net.js",
          "src/pipe_wrap.cc",
          "src/tcp_wrap.cc"
        ],
        "message": "set readable/writable for pipes",
        "before_after_code_files": [
          "lib/net.js||linet.js",
          "src/pipe_wrap.cc||src/pipe_wrap.cc",
          "src/tcp_wrap.cc||src/tcp_wrap.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/net.js||linet.js": [
          "File: lib/net.js -> linet.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "593: };",
          "597:   var self = handle.socket;",
          "",
          "[Removed Lines]",
          "596: function afterConnect(status, handle, req) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "609:   self._connecting = false;",
          "611:   if (status == 0) {",
          "613:     timers.active(self);",
          "617:     self.emit('connect');",
          "",
          "[Removed Lines]",
          "612:     self.readable = self.writable = true;",
          "615:     handle.readStart();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pipe_wrap.cc||src/pipe_wrap.cc": [
          "File: src/pipe_wrap.cc -> src/pipe_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: using v8::Context;",
          "54: using v8::Arguments;",
          "55: using v8::Integer;",
          "57: Persistent<Function> pipeConstructor;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: using v8::Boolean;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "224:   assert(req_wrap->object_.IsEmpty() == false);",
          "225:   assert(wrap->object_.IsEmpty() == false);",
          "227:   if (status) {",
          "228:     SetErrno(uv_last_error(uv_default_loop()));",
          "229:   }",
          "232:     Integer::New(status),",
          "233:     Local<Value>::New(wrap->object_),",
          "235:   };",
          "239:   delete req_wrap;",
          "240: }",
          "",
          "[Removed Lines]",
          "231:   Local<Value> argv[3] = {",
          "234:     Local<Value>::New(req_wrap->object_)",
          "237:   MakeCallback(req_wrap->object_, \"oncomplete\", 3, argv);",
          "",
          "[Added Lines]",
          "228:   bool readable, writable;",
          "232:     readable = writable = 0;",
          "233:   } else {",
          "234:     readable = uv_is_readable(req->handle) != 0;",
          "235:     writable = uv_is_writable(req->handle) != 0;",
          "238:   Local<Value> argv[5] = {",
          "241:     Local<Value>::New(req_wrap->object_),",
          "242:     Local<Value>::New(Boolean::New(readable)),",
          "243:     Local<Value>::New(Boolean::New(writable))",
          "246:   MakeCallback(req_wrap->object_, \"oncomplete\", 5, argv);",
          "",
          "---------------"
        ],
        "src/tcp_wrap.cc||src/tcp_wrap.cc": [
          "File: src/tcp_wrap.cc -> src/tcp_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "396:     SetErrno(uv_last_error(uv_default_loop()));",
          "397:   }",
          "400:     Integer::New(status),",
          "401:     Local<Value>::New(wrap->object_),",
          "403:   };",
          "407:   delete req_wrap;",
          "408: }",
          "",
          "[Removed Lines]",
          "399:   Local<Value> argv[3] = {",
          "402:     Local<Value>::New(req_wrap->object_)",
          "405:   MakeCallback(req_wrap->object_, \"oncomplete\", 3, argv);",
          "",
          "[Added Lines]",
          "399:   Local<Value> argv[5] = {",
          "402:     Local<Value>::New(req_wrap->object_),",
          "403:     Local<Value>::New(v8::True()),",
          "404:     Local<Value>::New(v8::True())",
          "407:   MakeCallback(req_wrap->object_, \"oncomplete\", 5, argv);",
          "",
          "---------------"
        ]
      }
    }
  ]
}