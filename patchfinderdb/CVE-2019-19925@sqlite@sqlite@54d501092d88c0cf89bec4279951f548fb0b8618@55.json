{
  "cve_id": "CVE-2019-19925",
  "cve_desc": "zipfileUpdate in ext/misc/zipfile.c in SQLite 3.30.1 mishandles a NULL pathname during an update of a ZIP archive.",
  "repo": "sqlite/sqlite",
  "patch_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
  "patch_info": {
    "commit_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/54d501092d88c0cf89bec4279951f548fb0b8618",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid",
      "test/zipfile.test"
    ],
    "message": "Fix the zipfile extension so that INSERT works even if the pathname of the file being inserted is a NULL.  Bug discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid",
      "test/zipfile.test||test/zipfile.test"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1620:     if( rc==SQLITE_OK ){",
      "1621:       zPath = (const char*)sqlite3_value_text(apVal[2]);",
      "1622:       nPath = (int)strlen(zPath);",
      "1623:       mTime = zipfileGetTime(apVal[4]);",
      "1624:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1622:       if( zPath==0 ) zPath = \"\";",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/zipfile.test||test/zipfile.test": [
      "File: test/zipfile.test -> test/zipfile.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "795:   } {. ./x1.txt ./x2.txt}",
      "796: }",
      "798: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "798: # 2019-12-18 Yongheng and Rui fuzzer",
      "799: #",
      "800: do_execsql_test 13.10 {",
      "801:   DROP TABLE IF EXISTS t0;",
      "802:   DROP TABLE IF EXISTS t1;",
      "803:   CREATE TABLE t0(a,b,c,d,e,f,g);",
      "804:   REPLACE INTO t0(c,b,f) VALUES(10,10,10);",
      "805:   CREATE VIRTUAL TABLE t1 USING zipfile('h.zip');",
      "806:   REPLACE INTO t1 SELECT * FROM t0;",
      "807:   SELECT quote(name),quote(mode),quote(mtime),quote(sz),quote(rawdata),",
      "808:          quote(data),quote(method) FROM t1;",
      "809: } {'' 10 10 2 X'3130' X'3130' 0}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ee37f8b0a38521c892afc7ddb2810b70ba9c0283",
      "candidate_info": {
        "commit_hash": "ee37f8b0a38521c892afc7ddb2810b70ba9c0283",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ee37f8b0a38521c892afc7ddb2810b70ba9c0283",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix the built-in edit() SQL function in the CLI so that it works with zero-length blobs.\n\nFossilOrigin-Name: e32490128684cfeeb8213baecc78a7942b8fb63d00e375edd965bf236faeed18",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 44578865fa7baf9760e355691ca9ce753295aaba7a4ee0bba29d4f85d9335bab",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1289:   fseek(f, 0, SEEK_END);",
          "1290:   sz = ftell(f);",
          "1291:   rewind(f);",
          "1293:   if( p==0 ){",
          "1294:     sqlite3_result_error_nomem(context);",
          "1295:     goto edit_func_end;",
          "",
          "[Removed Lines]",
          "1292:   p = sqlite3_malloc64( sz+(bBin==0) );",
          "",
          "[Added Lines]",
          "1292:   p = sqlite3_malloc64( sz+1 );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6ba7ab0d2524748479376e70043be9fc4cfbeccc",
      "candidate_info": {
        "commit_hash": "6ba7ab0d2524748479376e70043be9fc4cfbeccc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6ba7ab0d2524748479376e70043be9fc4cfbeccc",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/parse.y",
          "src/resolve.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/walker.c",
          "src/window.c",
          "test/filter1.test",
          "test/filter2.tcl",
          "test/filter2.test"
        ],
        "message": "Experimental implementation of FILTER clause for aggregate functions.\n\nFossilOrigin-Name: 1f1ae2d6ac8dcbb62e5aa3dc17bc67d559cb565fc0d0a8c00a596075d35f8130",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/parse.y||src/parse.y",
          "src/resolve.c||src/resolve.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/walker.c||src/walker.c",
          "src/window.c||src/window.c",
          "test/filter1.test||test/filter1.test",
          "test/filter2.tcl||test/filter2.tcl",
          "test/filter2.test||test/filter2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: eab4297577e4d325fed4757867fc77860de7448998d86f098c8a50272e17d35e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1028:   assert( !ExprHasProperty(p, EP_WinFunc) || p->y.pWin!=0 || db->mallocFailed );",
          "1029:   assert( p->op!=TK_FUNCTION || ExprHasProperty(p, EP_TokenOnly|EP_Reduced)",
          "1031: #ifdef SQLITE_DEBUG",
          "1032:   if( ExprHasProperty(p, EP_Leaf) && !ExprHasProperty(p, EP_TokenOnly) ){",
          "1033:     assert( p->pLeft==0 );",
          "",
          "[Removed Lines]",
          "1030:           || p->y.pWin==0 || ExprHasProperty(p, EP_WinFunc) );",
          "",
          "[Added Lines]",
          "1030:           || p->y.pWin==0 || ExprHasProperty(p, EP_WinFunc|EP_Filter) );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1046:     }else{",
          "1047:       sqlite3ExprListDelete(db, p->x.pList);",
          "1048:     }",
          "1049:     if( ExprHasProperty(p, EP_WinFunc) ){",
          "1051:       sqlite3WindowDelete(db, p->y.pWin);",
          "1052:     }",
          "1053:   }",
          "1054:   if( ExprHasProperty(p, EP_MemToken) ) sqlite3DbFree(db, p->u.zToken);",
          "1055:   if( !ExprHasProperty(p, EP_Static) ){",
          "",
          "[Removed Lines]",
          "1050:       assert( p->op==TK_FUNCTION );",
          "",
          "[Added Lines]",
          "1049: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "1051:       assert( p->op==TK_FUNCTION && !ExprHasProperty(p, EP_Filter) );",
          "1053:     }else if( ExprHasProperty(p, EP_Filter) ){",
          "1054:       assert( p->op==TK_FUNCTION || p->op==TK_AGG_FUNCTION );",
          "1055:       sqlite3ExprDelete(db, p->y.pFilter);",
          "1057: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1264:     }",
          "1268:       zAlloc += dupedExprNodeSize(p, dupFlags);",
          "1269:       if( !ExprHasProperty(pNew, EP_TokenOnly|EP_Leaf) ){",
          "1270:         pNew->pLeft = p->pLeft ?",
          "",
          "[Removed Lines]",
          "1267:     if( ExprHasProperty(pNew, EP_Reduced|EP_TokenOnly|EP_WinFunc) ){",
          "",
          "[Added Lines]",
          "1272:     if( ExprHasProperty(pNew, EP_Reduced|EP_TokenOnly|EP_WinFunc|EP_Filter) ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1277:         pNew->y.pWin = sqlite3WindowDup(db, pNew, p->y.pWin);",
          "1278:         assert( ExprHasProperty(pNew, EP_WinFunc) );",
          "1279:       }",
          "1281:       if( pzBuffer ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1285:       if( ExprHasProperty(p, EP_Filter) ){",
          "1286:         pNew->y.pFilter = sqlite3ExprDup(db, p->y.pFilter, 0);",
          "1287:         assert( ExprHasProperty(pNew, EP_Filter) );",
          "1288:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1334: static int gatherSelectWindowsCallback(Walker *pWalker, Expr *pExpr){",
          "1337:     pExpr->y.pWin->pNextWin = pWalker->u.pSelect->pWin;",
          "1338:     pWalker->u.pSelect->pWin = pExpr->y.pWin;",
          "1339:   }",
          "",
          "[Removed Lines]",
          "1335:   if( pExpr->op==TK_FUNCTION && pExpr->y.pWin!=0 ){",
          "1336:     assert( ExprHasProperty(pExpr, EP_WinFunc) );",
          "",
          "[Added Lines]",
          "1344:   if( pExpr->op==TK_FUNCTION && ExprHasProperty(pExpr, EP_WinFunc) ){",
          "1345:     assert( pExpr->y.pWin );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4862:     }else if( ALWAYS(pB->u.zToken!=0) && strcmp(pA->u.zToken,pB->u.zToken)!=0 ){",
          "4863:       return 2;",
          "4864:     }",
          "4865:   }",
          "4866:   if( (pA->flags & EP_Distinct)!=(pB->flags & EP_Distinct) ) return 2;",
          "4867:   if( (combinedFlags & EP_TokenOnly)==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4874: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "4875:     else if( pA->op==TK_AGG_FUNCTION ){",
          "4876:       assert( ExprHasProperty(pA, EP_WinFunc)==0 );",
          "4877:       if( sqlite3ExprCompare(pParse, pA->y.pFilter, pB->y.pFilter, iTab) ){",
          "4878:         return 2;",
          "4879:       }",
          "4880:     }",
          "4881: #endif",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1036: %endif  SQLITE_OMIT_CAST",
          "1039: expr(A) ::= id(X) LP distinct(D) exprlist(Y) RP. {",
          "1040:   A = sqlite3ExprFunction(pParse, Y, &X, D);",
          "1041: }",
          "1042: expr(A) ::= id(X) LP STAR RP. {",
          "1043:   A = sqlite3ExprFunction(pParse, 0, &X, 0);",
          "1044: }",
          "1046: %ifndef SQLITE_OMIT_WINDOWFUNC",
          "1048:   A = sqlite3ExprFunction(pParse, Y, &X, D);",
          "1050: }",
          "1052:   A = sqlite3ExprFunction(pParse, 0, &X, 0);",
          "1054: }",
          "1055: %endif",
          "",
          "[Removed Lines]",
          "1047: expr(A) ::= id(X) LP distinct(D) exprlist(Y) RP over_clause(Z). {",
          "1049:   sqlite3WindowAttach(pParse, A, Z);",
          "1051: expr(A) ::= id(X) LP STAR RP over_clause(Z). {",
          "1053:   sqlite3WindowAttach(pParse, A, Z);",
          "",
          "[Added Lines]",
          "1039: %ifdef SQLITE_OMIT_WINDOWFUNC",
          "1046: %endif",
          "1049: expr(A) ::= id(X) LP distinct(D) exprlist(Y) RP filter_opt(F) over_opt(Z). {",
          "1051:   sqlite3WindowAttach(pParse, A, F, Z);",
          "1053: expr(A) ::= id(X) LP STAR RP filter_opt(F) over_opt(Z). {",
          "1055:   sqlite3WindowAttach(pParse, A, F, Z);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1724: %destructor window_clause {sqlite3WindowListDelete(pParse->db, $$);}",
          "1725: window_clause(A) ::= WINDOW windowdefn_list(B). { A = B; }",
          "1730:   A = Z;",
          "1731:   assert( A!=0 );",
          "1733: }",
          "1735:   A = (Window*)sqlite3DbMallocZero(pParse->db, sizeof(Window));",
          "1736:   if( A ){",
          "1737:     A->zName = sqlite3DbStrNDup(pParse->db, Z.z, Z.n);",
          "1741:   }",
          "1742: }",
          "",
          "[Removed Lines]",
          "1727: %type over_clause {Window*}",
          "1728: %destructor over_clause {sqlite3WindowDelete(pParse->db, $$);}",
          "1729: over_clause(A) ::= filter_opt(W) OVER LP window(Z) RP. {",
          "1732:   A->pFilter = W;",
          "1734: over_clause(A) ::= filter_opt(W) OVER nm(Z). {",
          "1738:     A->pFilter = W;",
          "1739:   }else{",
          "1740:     sqlite3ExprDelete(pParse->db, W);",
          "",
          "[Added Lines]",
          "1729: %type over_opt {Window*}",
          "1730: %destructor over_opt {sqlite3WindowDelete(pParse->db, $$);}",
          "1731: over_opt(A) ::= . { A=0; }",
          "1732: over_opt(A) ::= OVER LP window(Z) RP. {",
          "1736: over_opt(A) ::= OVER nm(Z). {",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "849:           sqlite3ErrorMsg(pParse, \"misuse of %s function %.*s()\",zType,nId,zId);",
          "850:           pNC->nErr++;",
          "851:           is_agg = 0;",
          "852:         }",
          "853: #else",
          "854:         if( (is_agg && (pNC->ncFlags & NC_AllowAgg)==0) ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "852:         }else if( is_agg==0 && ExprHasProperty(pExpr, EP_Filter) ){",
          "853:           sqlite3ErrorMsg(pParse,",
          "854:               \"filter clause may not be used with non-aggregate %.*s()\",",
          "855:               nId, zId",
          "856:           );",
          "857:           pNC->nErr++;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "883:       sqlite3WalkExprList(pWalker, pList);",
          "884:       if( is_agg ){",
          "885: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "887:           Select *pSel = pNC->pWinSelect;",
          "888:           if( IN_RENAME_OBJECT==0 ){",
          "889:             sqlite3WindowUpdate(pParse, pSel->pWinDefn, pExpr->y.pWin, pDef);",
          "",
          "[Removed Lines]",
          "886:         if( pExpr->y.pWin ){",
          "",
          "[Added Lines]",
          "892:         if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "904:           NameContext *pNC2 = pNC;",
          "905:           pExpr->op = TK_AGG_FUNCTION;",
          "906:           pExpr->op2 = 0;",
          "907:           while( pNC2 && !sqlite3FunctionUsesThisSrc(pExpr, pNC2->pSrcList) ){",
          "908:             pExpr->op2++;",
          "909:             pNC2 = pNC2->pNext;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "913: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "914:           sqlite3WalkExpr(pWalker, pExpr->y.pFilter);",
          "915: #endif",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4407:   assert( *ppMinMax==0 );",
          "4408:   assert( pFunc->op==TK_AGG_FUNCTION );",
          "4410:   zFunc = pFunc->u.zToken;",
          "4411:   if( sqlite3StrICmp(zFunc, \"min\")==0 ){",
          "4412:     eRet = WHERE_ORDERBY_MIN;",
          "",
          "[Removed Lines]",
          "4409:   if( pEList==0 || pEList->nExpr!=1 ) return eRet;",
          "",
          "[Added Lines]",
          "4409:   if( pEList==0 || pEList->nExpr!=1 || ExprHasProperty(pFunc, EP_Filter) ){",
          "4410:     return eRet;",
          "4411:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4453:   if( pExpr->op!=TK_AGG_FUNCTION ) return 0;",
          "4454:   if( NEVER(pAggInfo->nFunc==0) ) return 0;",
          "4455:   if( (pAggInfo->aFunc[0].pFunc->funcFlags&SQLITE_FUNC_COUNT)==0 ) return 0;",
          "4458:   return pTab;",
          "4459: }",
          "",
          "[Removed Lines]",
          "4456:   if( pExpr->flags&EP_Distinct ) return 0;",
          "",
          "[Added Lines]",
          "4458:   if( ExprHasProperty(pExpr, EP_Distinct|EP_Filter) ) return 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5333:     int regAgg;",
          "5334:     ExprList *pList = pF->pExpr->x.pList;",
          "5335:     assert( !ExprHasProperty(pF->pExpr, EP_xIsSelect) );",
          "5336:     if( pList ){",
          "5337:       nArg = pList->nExpr;",
          "5338:       regAgg = sqlite3GetTempRange(pParse, nArg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5338:     if( ExprHasProperty(pF->pExpr, EP_Filter) ){",
          "5339:       Expr *pFilter = pF->pExpr->y.pFilter;",
          "5340:       addrNext = sqlite3VdbeMakeLabel(pParse);",
          "5341:       sqlite3ExprIfFalse(pParse, pFilter, addrNext, SQLITE_JUMPIFNULL);",
          "5342:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5342:       regAgg = 0;",
          "5343:     }",
          "5344:     if( pF->iDistinct>=0 ){",
          "5348:       codeDistinct(pParse, pF->iDistinct, addrNext, 1, regAgg);",
          "",
          "[Removed Lines]",
          "5345:       addrNext = sqlite3VdbeMakeLabel(pParse);",
          "",
          "[Added Lines]",
          "5352:       if( addrNext==0 ){",
          "5353:         addrNext = sqlite3VdbeMakeLabel(pParse);",
          "5354:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6225:       minMaxFlag = WHERE_ORDERBY_NORMAL;",
          "6226:     }",
          "6227:     for(i=0; i<sAggInfo.nFunc; i++){",
          "6229:       sNC.ncFlags |= NC_InAggFunc;",
          "6231:       sNC.ncFlags &= ~NC_InAggFunc;",
          "6232:     }",
          "6233:     sAggInfo.mxReg = pParse->nMem;",
          "",
          "[Removed Lines]",
          "6228:       assert( !ExprHasProperty(sAggInfo.aFunc[i].pExpr, EP_xIsSelect) );",
          "6230:       sqlite3ExprAnalyzeAggList(&sNC, sAggInfo.aFunc[i].pExpr->x.pList);",
          "",
          "[Added Lines]",
          "6237:       Expr *pExpr = sAggInfo.aFunc[i].pExpr;",
          "6238:       assert( !ExprHasProperty(pExpr, EP_xIsSelect) );",
          "6240:       sqlite3ExprAnalyzeAggList(&sNC, pExpr->x.pList);",
          "6241: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "6242:       assert( !ExprHasProperty(pExpr, EP_WinFunc) );",
          "6243:       sqlite3ExprAnalyzeAggregates(&sNC, pExpr->y.pFilter);",
          "6244: #endif",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3602: void sqlite3WindowDelete(sqlite3*, Window*);",
          "3603: void sqlite3WindowListDelete(sqlite3 *db, Window *p);",
          "3604: Window *sqlite3WindowAlloc(Parse*, int, int, Expr*, int , Expr*, u8);",
          "3606: int sqlite3WindowCompare(Parse*, Window*, Window*);",
          "3607: void sqlite3WindowCodeInit(Parse*, Window*);",
          "3608: void sqlite3WindowCodeStep(Parse*, Select*, WhereInfo*, int, int);",
          "",
          "[Removed Lines]",
          "3605: void sqlite3WindowAttach(Parse*, Expr*, Window*);",
          "",
          "[Added Lines]",
          "3607: void sqlite3WindowAttach(Parse*, Expr*, Expr*, Window*);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3617: #else",
          "3618: # define sqlite3WindowDelete(a,b)",
          "3619: # define sqlite3WindowFunctions()",
          "3621: #endif",
          "",
          "[Removed Lines]",
          "3620: # define sqlite3WindowAttach(a,b,c)",
          "",
          "[Added Lines]",
          "3622: # define sqlite3WindowAttach(a,b,c,d)",
          "",
          "---------------"
        ],
        "src/walker.c||src/walker.c": [
          "File: src/walker.c -> src/walker.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:       if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "75:         if( walkWindowList(pWalker, pExpr->y.pWin) ) return WRC_Abort;",
          "76:       }",
          "77: #endif",
          "78:     }",
          "79:     break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:       if( ExprHasProperty(pExpr, EP_Filter) ){",
          "78:         if( walkExpr(pWalker, pExpr->y.pFilter) ) return WRC_Abort;",
          "79:       }",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1182:   if( p ){",
          "1183:     assert( p->op==TK_FUNCTION );",
          "1188:       p->y.pWin = pWin;",
          "1189:       ExprSetProperty(p, EP_WinFunc);",
          "1190:       pWin->pOwner = p;",
          "",
          "[Removed Lines]",
          "1181: void sqlite3WindowAttach(Parse *pParse, Expr *p, Window *pWin){",
          "1187:     if( ALWAYS(pWin) ){",
          "",
          "[Added Lines]",
          "1181: void sqlite3WindowAttach(Parse *pParse, Expr *p, Expr *pFilter, Window *pWin){",
          "1184:     if( pWin ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1192:         sqlite3ErrorMsg(pParse,",
          "1193:            \"DISTINCT is not supported for window functions\");",
          "1194:       }",
          "1195:     }",
          "1196:   }else{",
          "1197:     sqlite3WindowDelete(pParse->db, pWin);",
          "1198:   }",
          "1199: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1192:       pWin->pFilter = pFilter;",
          "1193:     }else if( pFilter ){",
          "1194:       p->y.pFilter = pFilter;",
          "1195:       ExprSetProperty(p, EP_Filter);",
          "1199:     sqlite3ExprDelete(pParse->db, pFilter);",
          "",
          "---------------"
        ],
        "test/filter1.test||test/filter1.test": [
          "File: test/filter1.test -> test/filter1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018 May 8",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.",
          "12: #",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "16: set testprefix filter1",
          "18: ifcapable !windowfunc {",
          "19:   finish_test",
          "20:   return",
          "21: }",
          "23: do_execsql_test 1.0 {",
          "24:   CREATE TABLE t1(a);",
          "25:   CREATE INDEX i1 ON t1(a);",
          "26:   INSERT INTO t1 VALUES(1), (2), (3), (4), (5), (6), (7), (8), (9);",
          "27: }",
          "29: do_execsql_test 1.1 { SELECT sum(a) FROM t1; } 45",
          "30: do_execsql_test 1.2 { SELECT sum(a) FILTER( WHERE a<5 ) FROM t1; } 10",
          "32: do_execsql_test 1.3 {",
          "33:   SELECT sum(a) FILTER( WHERE a>9 ),",
          "34:          sum(a) FILTER( WHERE a>8 ),",
          "35:          sum(a) FILTER( WHERE a>7 ),",
          "36:          sum(a) FILTER( WHERE a>6 ),",
          "37:          sum(a) FILTER( WHERE a>5 ),",
          "38:          sum(a) FILTER( WHERE a>4 ),",
          "39:          sum(a) FILTER( WHERE a>3 ),",
          "40:          sum(a) FILTER( WHERE a>2 ),",
          "41:          sum(a) FILTER( WHERE a>1 ),",
          "42:          sum(a) FILTER( WHERE a>0 )",
          "43:   FROM t1;",
          "44: } {{} 9 17 24 30 35 39 42 44 45}",
          "46: do_execsql_test 1.4 {",
          "47:   SELECT max(a) FILTER (WHERE (a % 2)==0) FROM t1",
          "48: } {8}",
          "50: do_execsql_test 1.5 {",
          "51:   SELECT min(a) FILTER (WHERE a>4) FROM t1",
          "52: } {5}",
          "54: do_execsql_test 1.6 {",
          "55:   SELECT count(*) FILTER (WHERE a!=5) FROM t1",
          "56: } {8}",
          "58: do_execsql_test 1.6 {",
          "59:   SELECT min(a) FILTER (WHERE a>3) FROM t1 GROUP BY (a%2) ORDER BY 1;",
          "60: } {4 5}",
          "63: #-------------------------------------------------------------------------",
          "64: # Test some errors:",
          "65: #",
          "66: #   .1 FILTER on a non-aggregate function,",
          "67: #   .2 Window function in FILTER clause,",
          "68: #   .3 Aggregate function in FILTER clause,",
          "69: #",
          "70: reset_db",
          "71: do_execsql_test 2.0 {",
          "72:   CREATE TABLE t1(a);",
          "73:   INSERT INTO t1 VALUES(1), (2), (3), (4), (5), (6), (7), (8), (9);",
          "74: }",
          "76: do_catchsql_test 2.1 {",
          "77:   SELECT upper(a) FILTER (WHERE a=1) FROM t1",
          "78: } {1 {filter clause may not be used with non-aggregate upper()}}",
          "80: do_catchsql_test 2.2 {",
          "81:   SELECT sum(a) FILTER (WHERE 1 - max(a) OVER () > 0) FROM t1",
          "82: } {1 {misuse of window function max()}}",
          "84: do_catchsql_test 2.3 {",
          "85:   SELECT sum(a) FILTER (WHERE 1 - count(a)) FROM t1",
          "86: } {1 {misuse of aggregate: count()}}",
          "88: finish_test",
          "",
          "---------------"
        ],
        "test/filter2.tcl||test/filter2.tcl": [
          "File: test/filter2.tcl -> test/filter2.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018 May 19",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "13: source [file join [file dirname $argv0] pg_common.tcl]",
          "15: #=========================================================================",
          "18: start_test filter2 \"2019 July 2\"",
          "20: ifcapable !windowfunc",
          "22: execsql_test 1.0 {",
          "23:   DROP TABLE IF EXISTS t1;",
          "24:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b INTEGER);",
          "25:   INSERT INTO t1 VALUES",
          "26:    (1, 7), (2, 3), (3, 5), (4, 30), (5, 26), (6, 23), (7, 27),",
          "27:    (8, 3), (9, 17), (10, 26), (11, 33), (12, 25), (13, NULL), (14, 47),",
          "28:    (15, 36), (16, 13), (17, 45), (18, 31), (19, 11), (20, 36), (21, 37),",
          "29:    (22, 21), (23, 22), (24, 14), (25, 16), (26, 3), (27, 7), (28, 29),",
          "30:    (29, 50), (30, 38), (31, 3), (32, 36), (33, 12), (34, 4), (35, 46),",
          "31:    (36, 3), (37, 48), (38, 23), (39, NULL), (40, 24), (41, 5), (42, 46),",
          "32:    (43, 11), (44, NULL), (45, 18), (46, 25), (47, 15), (48, 18), (49, 23);",
          "33: }",
          "35: execsql_test 1.1 { SELECT sum(b) FROM t1 }",
          "37: execsql_test 1.2 { SELECT sum(b) FILTER (WHERE a<10) FROM t1 }",
          "39: execsql_test 1.3 { SELECT count(DISTINCT b) FROM t1 }",
          "41: execsql_test 1.4 { SELECT count(DISTINCT b) FILTER (WHERE a!=19) FROM t1 }",
          "43: execsql_test 1.5 {",
          "44:   SELECT min(b) FILTER (WHERE a>19),",
          "45:          min(b) FILTER (WHERE a>0),",
          "46:          max(a+b) FILTER (WHERE a>19),",
          "47:          max(b+a) FILTER (WHERE a BETWEEN 10 AND 40)",
          "48:   FROM t1;",
          "49: }",
          "51: execsql_test 1.6 {",
          "52:   SELECT min(b),",
          "53:          min(b),",
          "54:          max(a+b),",
          "55:          max(b+a)",
          "56:   FROM t1",
          "57:   GROUP BY (a%10)",
          "58:   ORDER BY 1, 2, 3, 4;",
          "59: }",
          "61: execsql_test 1.7 {",
          "62:   SELECT min(b) FILTER (WHERE a>19),",
          "63:          min(b) FILTER (WHERE a>0),",
          "64:          max(a+b) FILTER (WHERE a>19),",
          "65:          max(b+a) FILTER (WHERE a BETWEEN 10 AND 40)",
          "66:   FROM t1",
          "67:   GROUP BY (a%10)",
          "68:   ORDER BY 1, 2, 3, 4;",
          "69: }",
          "71: finish_test",
          "",
          "---------------"
        ],
        "test/filter2.test||test/filter2.test": [
          "File: test/filter2.test -> test/filter2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 July 2",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.",
          "12: #",
          "14: ####################################################",
          "15: # DO NOT EDIT! THIS FILE IS AUTOMATICALLY GENERATED!",
          "16: ####################################################",
          "18: set testdir [file dirname $argv0]",
          "19: source $testdir/tester.tcl",
          "20: set testprefix filter2",
          "22: ifcapable !windowfunc { finish_test ; return }",
          "23: do_execsql_test 1.0 {",
          "24:   DROP TABLE IF EXISTS t1;",
          "25:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b INTEGER);",
          "26:   INSERT INTO t1 VALUES",
          "27:    (1, 7), (2, 3), (3, 5), (4, 30), (5, 26), (6, 23), (7, 27),",
          "28:    (8, 3), (9, 17), (10, 26), (11, 33), (12, 25), (13, NULL), (14, 47),",
          "29:    (15, 36), (16, 13), (17, 45), (18, 31), (19, 11), (20, 36), (21, 37),",
          "30:    (22, 21), (23, 22), (24, 14), (25, 16), (26, 3), (27, 7), (28, 29),",
          "31:    (29, 50), (30, 38), (31, 3), (32, 36), (33, 12), (34, 4), (35, 46),",
          "32:    (36, 3), (37, 48), (38, 23), (39, NULL), (40, 24), (41, 5), (42, 46),",
          "33:    (43, 11), (44, NULL), (45, 18), (46, 25), (47, 15), (48, 18), (49, 23);",
          "34: } {}",
          "36: do_execsql_test 1.1 {",
          "37:   SELECT sum(b) FROM t1",
          "38: } {1041}",
          "40: do_execsql_test 1.2 {",
          "41:   SELECT sum(b) FILTER (WHERE a<10) FROM t1",
          "42: } {141}",
          "44: do_execsql_test 1.3 {",
          "45:   SELECT count(DISTINCT b) FROM t1",
          "46: } {31}",
          "48: do_execsql_test 1.4 {",
          "49:   SELECT count(DISTINCT b) FILTER (WHERE a!=19) FROM t1",
          "50: } {31}",
          "52: do_execsql_test 1.5 {",
          "53:   SELECT min(b) FILTER (WHERE a>19),",
          "54:          min(b) FILTER (WHERE a>0),",
          "55:          max(a+b) FILTER (WHERE a>19),",
          "56:          max(b+a) FILTER (WHERE a BETWEEN 10 AND 40)",
          "57:   FROM t1;",
          "58: } {3 3 88 85}",
          "60: do_execsql_test 1.6 {",
          "61:   SELECT min(b),",
          "62:          min(b),",
          "63:          max(a+b),",
          "64:          max(b+a)",
          "65:   FROM t1",
          "66:   GROUP BY (a%10)",
          "67:   ORDER BY 1, 2, 3, 4;",
          "68: } {3 3 58 58   3 3 66 66   3 3 71 71   3 3 88 88   4 4 61 61   5 5 54 54",
          "69:   7 7 85 85   11 11 79 79   16 16 81 81   24 24 68 68}",
          "71: do_execsql_test 1.7 {",
          "72:   SELECT min(b) FILTER (WHERE a>19),",
          "73:          min(b) FILTER (WHERE a>0),",
          "74:          max(a+b) FILTER (WHERE a>19),",
          "75:          max(b+a) FILTER (WHERE a BETWEEN 10 AND 40)",
          "76:   FROM t1",
          "77:   GROUP BY (a%10)",
          "78:   ORDER BY 1, 2, 3, 4;",
          "79: } {3 3 58 58   3 3 71 39   4 4 38 61   7 7 85 85   11 5 54 45   16 16 81 81",
          "80:   18 3 66 61   21 3 88 68   23 11 79 79   24 24 68 68}",
          "82: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "db535390dbe2506858a781e8250e3e51a3270f10",
      "candidate_info": {
        "commit_hash": "db535390dbe2506858a781e8250e3e51a3270f10",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/db535390dbe2506858a781e8250e3e51a3270f10",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c",
          "test/join.test"
        ],
        "message": "The optimization of check-in [9b2879629c34fc0a] is incorrectly reasoned. The WHERE clause of the partial index might not be true if the table of the partial index is the right table of a left join.  So disable the optimization in that case.  Ticket [623eff57e76d45f6]\n\nFossilOrigin-Name: 3be19e1151af1850b65991edb82420f9412a7798dd756c86eaa9ffdde573263a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c",
          "test/join.test||test/join.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9c795c4d2b042d2932774bd1274fa0167ca2dc9838e127e0cf31eb9273a32f2c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1870:                            iRowidReg, pPk->nKeyCol); VdbeCoverage(v);",
          "1871:     }",
          "1900:     }",
          "1903:     if( pLoop->wsFlags & WHERE_ONEROW ){",
          "1904:       pLevel->op = OP_Noop;",
          "",
          "[Removed Lines]",
          "1890:     if( pLevel->iLeftJoin==0 && (pWInfo->wctrlFlags & WHERE_OR_SUBCLAUSE)==0 ){",
          "1891:       whereIndexExprTrans(pIdx, iCur, iIdxCur, pWInfo);",
          "1892:     }",
          "1898:     if( pIdx->pPartIdxWhere ){",
          "1899:       whereApplyPartialIndexConstraints(pIdx->pPartIdxWhere, iCur, pWC);",
          "",
          "[Added Lines]",
          "1873:     if( pLevel->iLeftJoin==0 ){",
          "1891:       if( (pWInfo->wctrlFlags & WHERE_OR_SUBCLAUSE)==0 ){",
          "1892:         whereIndexExprTrans(pIdx, iCur, iIdxCur, pWInfo);",
          "1893:       }",
          "1902:       if( pIdx->pPartIdxWhere ){",
          "1903:         whereApplyPartialIndexConstraints(pIdx->pPartIdxWhere, iCur, pWC);",
          "1904:       }",
          "1905:     }else{",
          "1906:       testcase( (pWInfo->wctrlFlags & WHERE_OR_SUBCLAUSE)==0 );",
          "1907:       testcase( pIdx->pPartIdxWhere );",
          "",
          "---------------"
        ],
        "test/join.test||test/join.test": [
          "File: test/join.test -> test/join.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "935:     (b IS NOT NULL AND b IS NOT NULL) IS NOT NULL;",
          "936: } {0 {}}",
          "938: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "938: # 2019-11-02 ticket 623eff57e76d45f6",
          "939: # The optimization of exclusing the WHERE expression of a partial index",
          "940: # from the WHERE clause of the query if the index is used does not work",
          "941: # of the table of the index is the right-hand table of a LEFT JOIN.",
          "942: #",
          "943: db close",
          "944: sqlite3 db :memory:",
          "945: do_execsql_test join-20.1 {",
          "946:   CREATE TABLE t1(c1);",
          "947:   CREATE TABLE t0(c0);",
          "948:   INSERT INTO t0(c0) VALUES (0);",
          "949:   SELECT * FROM t0 LEFT JOIN t1 WHERE NULL IN (c1);",
          "950: } {}",
          "951: do_execsql_test join-20.2 {",
          "952:   CREATE INDEX t1x ON t1(0) WHERE NULL IN (c1);",
          "953:   SELECT * FROM t0 LEFT JOIN t1 WHERE NULL IN (c1);",
          "954: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4474e869fed2a30237b68e2e5c6d383d3fc7d9fe",
      "candidate_info": {
        "commit_hash": "4474e869fed2a30237b68e2e5c6d383d3fc7d9fe",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4474e869fed2a30237b68e2e5c6d383d3fc7d9fe",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeapi.c"
        ],
        "message": "Fix a problem preventing compilation with SQLITE_OMIT_UTF16.\n\nFossilOrigin-Name: 906d1fd8650874236e0bf5734d5347dcc45ec036164a56570fec37da4ffeaf8f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeapi.c||src/vdbeapi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d7d23f0450d659b2c7df34e4df8623ca7b6fe3bd19422e3e9234515214ae8510",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeapi.c||src/vdbeapi.c": [
          "File: src/vdbeapi.c -> src/vdbeapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1144:     N += useType*n;",
          "1145:     sqlite3_mutex_enter(db->mutex);",
          "1146:     assert( db->mallocFailed==0 );",
          "1147:     if( useUtf16 ){",
          "1148:       ret = sqlite3_value_text16((sqlite3_value*)&p->aColName[N]);",
          "1150:       ret = sqlite3_value_text((sqlite3_value*)&p->aColName[N]);",
          "1151:     }",
          "",
          "[Removed Lines]",
          "1149:     }else{",
          "",
          "[Added Lines]",
          "1147: #ifndef SQLITE_OMIT_UTF16",
          "1150:     }else",
          "1151: #endif",
          "1152:     {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a2782293c37d360382296558c358d60929d0744",
      "candidate_info": {
        "commit_hash": "9a2782293c37d360382296558c358d60929d0744",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9a2782293c37d360382296558c358d60929d0744",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/date.c",
          "src/func.c",
          "src/util.c",
          "src/vdbe.c",
          "src/vdbemem.c",
          "test/cast.test",
          "test/e_expr.test",
          "test/tkt-a8a0d2996a.test"
        ],
        "message": "When casting string values into numeric and the string has a prefix that looks like a number but total string is not a well-formed number, then take extra care that the result is either integer or real depending on what the prefix looks like.  Fix for tickets [e8bedb2a184001] and [4c2d7639f076aa].\n\nFossilOrigin-Name: 67a68af5578f08d2be2e48cf4fd12a6cf35a09c47d259deda81950f7ee1f02f7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/date.c||src/date.c",
          "src/func.c||src/func.c",
          "src/util.c||src/util.c",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbemem.c||src/vdbemem.c",
          "test/cast.test||test/cast.test",
          "test/e_expr.test||test/e_expr.test",
          "test/tkt-a8a0d2996a.test||test/tkt-a8a0d2996a.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: efbf31b82e6e16fda88d8cea54202a8593ff52f2267a44dba828704818162e66",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/date.c||src/date.c": [
          "File: src/date.c -> src/date.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "388:     return 0;",
          "389:   }else if( sqlite3StrICmp(zDate,\"now\")==0 && sqlite3NotPureFunc(context) ){",
          "390:     return setDateTimeToCurrent(context, p);",
          "392:     setRawDateNumber(p, r);",
          "393:     return 0;",
          "394:   }",
          "",
          "[Removed Lines]",
          "391:   }else if( sqlite3AtoF(zDate, &r, sqlite3Strlen30(zDate), SQLITE_UTF8) ){",
          "",
          "[Added Lines]",
          "391:   }else if( sqlite3AtoF(zDate, &r, sqlite3Strlen30(zDate), SQLITE_UTF8)>0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "724:       if( sqlite3_strnicmp(z, \"weekday \", 8)==0",
          "726:                && (n=(int)r)==r && n>=0 && r<7 ){",
          "727:         sqlite3_int64 Z;",
          "728:         computeYMD_HMS(p);",
          "",
          "[Removed Lines]",
          "725:                && sqlite3AtoF(&z[8], &r, sqlite3Strlen30(&z[8]), SQLITE_UTF8)",
          "",
          "[Added Lines]",
          "725:                && sqlite3AtoF(&z[8], &r, sqlite3Strlen30(&z[8]), SQLITE_UTF8)>0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "781:       double rRounder;",
          "782:       int i;",
          "783:       for(n=1; z[n] && z[n]!=':' && !sqlite3Isspace(z[n]); n++){}",
          "785:         rc = 1;",
          "786:         break;",
          "787:       }",
          "",
          "[Removed Lines]",
          "784:       if( !sqlite3AtoF(z, &r, n, SQLITE_UTF8) ){",
          "",
          "[Added Lines]",
          "784:       if( sqlite3AtoF(z, &r, n, SQLITE_UTF8)<=0 ){",
          "",
          "---------------"
        ],
        "src/func.c||src/func.c": [
          "File: src/func.c -> src/func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "397:       sqlite3_result_error_nomem(context);",
          "398:       return;",
          "399:     }",
          "401:       assert( sqlite3_strglob(\"*Inf\", zBuf)==0 );",
          "402:       r = zBuf[0]=='-' ? -HUGE_VAL : +HUGE_VAL;",
          "403:     }",
          "",
          "[Removed Lines]",
          "400:     if( !sqlite3AtoF(zBuf, &r, sqlite3Strlen30(zBuf), SQLITE_UTF8) ){",
          "",
          "[Added Lines]",
          "400:     if( sqlite3AtoF(zBuf, &r, sqlite3Strlen30(zBuf), SQLITE_UTF8)<=0 ){",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "560: #else",
          "561:   return !sqlite3Atoi64(z, pResult, length, enc);",
          "",
          "[Removed Lines]",
          "559:   return z==zEnd && nDigit>0 && eValid && eType>0 ? eType : 0;",
          "",
          "[Added Lines]",
          "561:   if( z==zEnd && nDigit>0 && eValid && eType>0 ){",
          "562:     return eType;",
          "563:   }else if( eType>=2 && (eType==3 || eValid) ){",
          "564:     return -1;",
          "565:   }else{",
          "566:     return 0;",
          "567:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "659:   }",
          "660:   rc = 0;",
          "664:     rc = 1;",
          "666:     int jj = i;",
          "",
          "[Removed Lines]",
          "663:   ){",
          "",
          "[Added Lines]",
          "671:     rc = -1;",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "321:   int rc;",
          "322:   assert( (pRec->flags & (MEM_Str|MEM_Int|MEM_Real|MEM_IntReal))==MEM_Str );",
          "323:   rc = sqlite3AtoF(pRec->z, &rValue, pRec->n, enc);",
          "325:   if( rc==1 && alsoAnInt(pRec, rValue, &pRec->u.i) ){",
          "326:     pRec->flags |= MEM_Int;",
          "327:   }else{",
          "",
          "[Removed Lines]",
          "324:   if( rc==0 ) return;",
          "",
          "[Added Lines]",
          "324:   if( rc<=0 ) return;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "424: static u16 SQLITE_NOINLINE computeNumericType(Mem *pMem){",
          "425:   assert( (pMem->flags & (MEM_Int|MEM_Real|MEM_IntReal))==0 );",
          "426:   assert( (pMem->flags & (MEM_Str|MEM_Blob))!=0 );",
          "427:   ExpandBlob(pMem);",
          "432:     return MEM_Int;",
          "433:   }",
          "434:   return MEM_Real;",
          "",
          "[Removed Lines]",
          "428:   if( sqlite3AtoF(pMem->z, &pMem->u.r, pMem->n, pMem->enc)==0 ){",
          "429:     return 0;",
          "430:   }",
          "431:   if( sqlite3Atoi64(pMem->z, &pMem->u.i, pMem->n, pMem->enc)==0 ){",
          "",
          "[Added Lines]",
          "425:   int rc;",
          "426:   sqlite3_int64 ix;",
          "430:   rc = sqlite3AtoF(pMem->z, &pMem->u.r, pMem->n, pMem->enc);",
          "431:   if( rc<=0 ){",
          "432:     if( rc==0 && sqlite3Atoi64(pMem->z, &ix, pMem->n, pMem->enc)<=1 ){",
          "433:       pMem->u.i = ix;",
          "434:       return MEM_Int;",
          "435:     }else{",
          "436:       return MEM_Real;",
          "437:     }",
          "438:   }else if( rc==1 && sqlite3Atoi64(pMem->z, &ix, pMem->n, pMem->enc)==0 ){",
          "439:     pMem->u.i = ix;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1608:   if( (type1 & type2 & MEM_Int)!=0 ){",
          "1609:     iA = pIn1->u.i;",
          "1610:     iB = pIn2->u.i;",
          "1612:     switch( pOp->opcode ){",
          "1613:       case OP_Add:       if( sqlite3AddInt64(&iB,iA) ) goto fp_math;  break;",
          "1614:       case OP_Subtract:  if( sqlite3SubInt64(&iB,iA) ) goto fp_math;  break;",
          "",
          "[Removed Lines]",
          "1611:     bIntint = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1631:   }else if( (flags & MEM_Null)!=0 ){",
          "1632:     goto arithmetic_result_is_null;",
          "1633:   }else{",
          "1635: fp_math:",
          "1636:     rA = sqlite3VdbeRealValue(pIn1);",
          "1637:     rB = sqlite3VdbeRealValue(pIn2);",
          "",
          "[Removed Lines]",
          "1634:     bIntint = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1663:     }",
          "1664:     pOut->u.r = rB;",
          "1665:     MemSetTypeFlag(pOut, MEM_Real);",
          "1669: #endif",
          "1670:   }",
          "1671:   break;",
          "",
          "[Removed Lines]",
          "1666:     if( ((type1|type2)&(MEM_Real|MEM_IntReal))==0 && !bIntint ){",
          "1667:       sqlite3VdbeIntegerAffinity(pOut);",
          "1668:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "717:   testcase( pMem->flags & MEM_Null );",
          "718:   if( (pMem->flags & (MEM_Int|MEM_Real|MEM_IntReal|MEM_Null))==0 ){",
          "719:     int rc;",
          "720:     assert( (pMem->flags & (MEM_Blob|MEM_Str))!=0 );",
          "721:     assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );",
          "730:         MemSetTypeFlag(pMem, MEM_Int);",
          "731:       }else{",
          "732:         MemSetTypeFlag(pMem, MEM_Real);",
          "733:       }",
          "734:     }",
          "735:   }",
          "736:   assert( (pMem->flags & (MEM_Int|MEM_Real|MEM_IntReal|MEM_Null))!=0 );",
          "",
          "[Removed Lines]",
          "722:     rc = sqlite3Atoi64(pMem->z, &pMem->u.i, pMem->n, pMem->enc);",
          "723:     if( rc==0 ){",
          "724:       MemSetTypeFlag(pMem, MEM_Int);",
          "725:     }else{",
          "726:       i64 i = pMem->u.i;",
          "727:       sqlite3AtoF(pMem->z, &pMem->u.r, pMem->n, pMem->enc);",
          "728:       if( rc==1 && sqlite3RealSameAsInt(pMem->u.r, i) ){",
          "729:         pMem->u.i = i;",
          "",
          "[Added Lines]",
          "720:     sqlite3_int64 ix;",
          "723:     rc = sqlite3AtoF(pMem->z, &pMem->u.r, pMem->n, pMem->enc);",
          "724:     if( rc<=0 ){",
          "725:       if( rc==0 && sqlite3Atoi64(pMem->z, &ix, pMem->n, pMem->enc)<=1 ){",
          "726:         pMem->u.i = ix;",
          "731:     }else if( rc==1 && sqlite3Atoi64(pMem->z, &ix, pMem->n, pMem->enc)==0 ){",
          "732:       pMem->u.i = ix;",
          "733:       MemSetTypeFlag(pMem, MEM_Int);",
          "734:     }else{",
          "735:       MemSetTypeFlag(pMem, MEM_Real);",
          "",
          "---------------"
        ],
        "test/cast.test||test/cast.test": [
          "File: test/cast.test -> test/cast.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "388:   SELECT * FROM t1;",
          "389: } {9000000000000000001 9000000000000000001 9000000000000000001 9000000000000000001}",
          "391: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "391: # 2019-06-07",
          "392: # https://www.sqlite.org/src/info/4c2d7639f076aa7c",
          "393: do_execsql_test case-7.1 {",
          "394:   SELECT CAST('-' AS NUMERIC);",
          "395: } {0}",
          "396: do_execsql_test case-7.2 {",
          "397:   SELECT CAST('-0' AS NUMERIC);",
          "398: } {0}",
          "399: do_execsql_test case-7.3 {",
          "400:   SELECT CAST('+' AS NUMERIC);",
          "401: } {0}",
          "402: do_execsql_test case-7.4 {",
          "403:   SELECT CAST('/' AS NUMERIC);",
          "404: } {0}",
          "406: # 2019-06-07",
          "407: # https://www.sqlite.org/src/info/e8bedb2a184001bb",
          "408: do_execsql_test case-7.10 {",
          "409:   SELECT '' - 2851427734582196970;",
          "410: } {-2851427734582196970}",
          "411: do_execsql_test case-7.11 {",
          "412:   SELECT 0 - 2851427734582196970;",
          "413: } {-2851427734582196970}",
          "414: do_execsql_test case-7.12 {",
          "415:   SELECT '' - 1;",
          "416: } {-1}",
          "",
          "---------------"
        ],
        "test/e_expr.test||test/e_expr.test": [
          "File: test/e_expr.test -> test/e_expr.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1650: # is lossless and reversible.",
          "1651: #",
          "1652: do_expr_test e_expr-32.1.1 { CAST('45'   AS NUMERIC)  } integer 45",
          "1654: do_expr_test e_expr-32.1.3 { CAST('45.2' AS NUMERIC)  } real 45.2",
          "1655: do_expr_test e_expr-32.1.4 { CAST('11abc' AS NUMERIC) } integer 11",
          "1656: do_expr_test e_expr-32.1.5 { CAST('11.1abc' AS NUMERIC) } real 11.1",
          "",
          "[Removed Lines]",
          "1653: do_expr_test e_expr-32.1.2 { CAST('45.0' AS NUMERIC)  } integer 45",
          "",
          "[Added Lines]",
          "1653: do_expr_test e_expr-32.1.2 { CAST('45.0' AS NUMERIC)  } real 45.0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1701:  integer 9000000000000000001 \\",
          "1702:  integer 9000000000000000001 \\",
          "1703:  integer 9000000000000000001 \\",
          "1705:  integer 9223372036854775807 \\",
          "1706:  integer 9223372036854775807 \\",
          "1707:  integer 9223372036854775807 \\",
          "1708:  real 9.22337203685478e+18 \\",
          "1709:  real 9.22337203685478e+18 \\",
          "1714: ]",
          "1716: # EVIDENCE-OF: R-64550-29191 Note that the result from casting any",
          "",
          "[Removed Lines]",
          "1704:  integer 9000000000000000001 \\",
          "1710:  integer 9223372036854775807 \\",
          "1711:  integer 9223372036854775807 \\",
          "1712:  integer -5 \\",
          "1713:  integer -5 \\",
          "",
          "[Added Lines]",
          "1704:  real 9.0e+18 \\",
          "1710:  real 9.22337203685478e+18 \\",
          "1711:  real 9.22337203685478e+18 \\",
          "1712:  real -5.0 \\",
          "1713:  real -5.0 \\",
          "",
          "---------------"
        ],
        "test/tkt-a8a0d2996a.test||test/tkt-a8a0d2996a.test": [
          "File: test/tkt-a8a0d2996a.test -> test/tkt-a8a0d2996a.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "84: } {104.5}",
          "85: do_execsql_test 4.4 {",
          "86:   SELECT '-9223372036854775807x'-'1x';",
          "88: do_execsql_test 4.5 {",
          "89:   SELECT '9223372036854775806x'+'1x';",
          "91: do_execsql_test 4.6 {",
          "95: finish_test",
          "",
          "[Removed Lines]",
          "87: } {-9.22337203685478e+18}",
          "90: } {9.22337203685478e+18}",
          "92:   SELECT '1234x'/'10y';",
          "93: } {123.4}",
          "",
          "[Added Lines]",
          "87: } {-9223372036854775808}",
          "90: } {9223372036854775807}",
          "92:   SELECT '1234x'/'10y', '1234x'/'10.y', '1234x'/'1e1y';",
          "93: } {123 123.4 123.4}",
          "",
          "---------------"
        ]
      }
    }
  ]
}