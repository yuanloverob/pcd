{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ddd7421c9170317294e69a4287deda996a3cd3dc",
      "candidate_info": {
        "commit_hash": "ddd7421c9170317294e69a4287deda996a3cd3dc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ddd7421c9170317294e69a4287deda996a3cd3dc",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c",
          "test/minmax4.test"
        ],
        "message": "If a query like \"SELECT min(a), b FROM t1\" visits no rows where \"a\" is not null, extract a value for \"b\" from one of the rows where \"a\" is null. Possible fix for ticket [41866dc37].\n\nFossilOrigin-Name: a7277ed0623dccdbf775ae6127611d6bc6e150f6942a048ab4281e5136c0e98d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c",
          "test/minmax4.test||test/minmax4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 961e2f08c35238bcb1d32430d16451a96807b2c4bbb194ee621128dd09cd3981",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1694:       VdbeCoverageIf(v, op==OP_SeekGE);  testcase( op==OP_SeekGE );",
          "1695:       VdbeCoverageIf(v, op==OP_SeekLE);  testcase( op==OP_SeekLE );",
          "1696:       VdbeCoverageIf(v, op==OP_SeekLT);  testcase( op==OP_SeekLT );",
          "1697:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1698:       if( bSeekPastNull && (pLoop->wsFlags & WHERE_TOP_LIMIT)==0 ){",
          "1704:         assert( startEq==0 && (op==OP_SeekGT || op==OP_SeekLT) );",
          "1705:         assert( (pWInfo->wctrlFlags&WHERE_ORDERBY_MIN)!=0 && pWInfo->nOBSat>0 );",
          "1706:         sqlite3VdbeChangeP2(v, -1, sqlite3VdbeCurrentAddr(v)+1);",
          "1707:         sqlite3VdbeAddOp2(v, OP_Goto, 0, sqlite3VdbeCurrentAddr(v)+2);",
          "1709:         op = aStartOp[(start_constraints<<2) + (1<<1) + bRev];",
          "1710:         assert( op!=0 );",
          "1711:         sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint);",
          "1712:         VdbeCoverage(v);",
          "1713:         VdbeCoverageIf(v, op==OP_SeekGE);  testcase( op==OP_SeekGE );",
          "1714:         VdbeCoverageIf(v, op==OP_SeekLE);  testcase( op==OP_SeekLE );",
          "1715:       }",
          "",
          "---------------"
        ],
        "test/minmax4.test||test/minmax4.test": [
          "File: test/minmax4.test -> test/minmax4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: set testdir [file dirname $argv0]",
          "21: source $testdir/tester.tcl",
          "23: ifcapable !compound {",
          "24:   finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: set testprefix minmax4",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "148:   }",
          "149: } {1 1 {} 2 2 2 3 3 5 5}",
          "153: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152: #-------------------------------------------------------------------------",
          "153: foreach {tn sql} {",
          "154:   1 { CREATE INDEX i1 ON t1(a) }",
          "155:   2 { CREATE INDEX i1 ON t1(a DESC) }",
          "156:   3 { }",
          "157: } {",
          "158:   reset_db",
          "159:   do_execsql_test 3.$tn.0 {",
          "160:     CREATE TABLE t1(a, b);",
          "161:     INSERT INTO t1 VALUES(NULL, 1);",
          "162:   }",
          "163:   execsql $sql",
          "164:   do_execsql_test 3.$tn.1 {",
          "165:     SELECT min(a), b FROM t1;",
          "166:   } {{} 1}",
          "167:   do_execsql_test 3.$tn.2 {",
          "168:     SELECT min(a), b FROM t1 WHERE a<50;",
          "169:   } {{} {}}",
          "170:   do_execsql_test 3.$tn.3 {",
          "171:     INSERT INTO t1 VALUES(2, 2);",
          "172:   }",
          "173:   do_execsql_test 3.$tn.4 {",
          "174:     SELECT min(a), b FROM t1;",
          "175:   } {2 2}",
          "176:   do_execsql_test 3.$tn.5 {",
          "177:     SELECT min(a), b FROM t1 WHERE a<50;",
          "178:   } {2 2}",
          "179: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "996f5ccb3328b12e8b8c65b0f536e1f717a60067",
      "candidate_info": {
        "commit_hash": "996f5ccb3328b12e8b8c65b0f536e1f717a60067",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/996f5ccb3328b12e8b8c65b0f536e1f717a60067",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Fix an incorrect assert() in balance_nonroot().\n\nFossilOrigin-Name: 59c9e73f86b89ee17b0bce47bcb93f5b5ace5b7985678287195002afb9d40cd8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9ec92939cb2d2c96ae15bc496feed233ce31424c25a6bf86ace7e0ef3eedec5b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6664:   assert( pPage->nOverflow<=ArraySize(pPage->apOvfl) );",
          "6665:   assert( ArraySize(pPage->apOvfl)==ArraySize(pPage->aiOvfl) );",
          "6666:   assert( sqlite3_mutex_held(pPage->pBt->mutex) );",
          "6673:   assert( pPage->nFree>=0 );",
          "6674:   if( pPage->nOverflow || sz+2>pPage->nFree ){",
          "6675:     if( pTemp ){",
          "",
          "[Removed Lines]",
          "6672:   assert( sz==pPage->xCellSize(pPage, pCell) || (sz==8 && iChild>0) );",
          "",
          "[Added Lines]",
          "6667:   assert( sz==pPage->xCellSize(pPage, pCell) || CORRUPT_DB );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b2e61bc66b88cc82cc67830a77ee512e6b4b18fa",
      "candidate_info": {
        "commit_hash": "b2e61bc66b88cc82cc67830a77ee512e6b4b18fa",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b2e61bc66b88cc82cc67830a77ee512e6b4b18fa",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Reinitialize debugging information on registers of a trigger prior to each invocation of the trigger.  This prevents false-positives from the sqlite3VdbeMemAboutToChange() test logic.\n\nFossilOrigin-Name: 98b3b97573ccb3d986d1552f97f96e15088a598945923adcac77010c1e8b7fe4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3ff220ad378d547538b4501e6b2201e835a2c66891e5e40856db377c101a50e5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6171:   p->nOp = pProgram->nOp;",
          "6172: #ifdef SQLITE_ENABLE_STMT_SCANSTATUS",
          "6173:   p->anExec = 0;",
          "6174: #endif",
          "6175:   pOp = &aOp[-1];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6174: #endif",
          "6175: #ifdef SQLITE_DEBUG",
          "6178:   {",
          "6179:     int i;",
          "6180:     for(i=0; i<p->nMem; i++){",
          "6183:     }",
          "6184:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "da7a4c0f7a63ffe908c863e80bff84e5826346a9",
      "candidate_info": {
        "commit_hash": "da7a4c0f7a63ffe908c863e80bff84e5826346a9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/da7a4c0f7a63ffe908c863e80bff84e5826346a9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/corruptL.test"
        ],
        "message": "When parsing the schema, check for duplicate index root page numbers before adding the index to the schema hash table.\n\nFossilOrigin-Name: 6b360bc0b9ad18ccda9d58d43a8388d19999432bfdf294abcf5beb44ef990cb4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/corruptL.test||test/corruptL.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 197edb235b785c68fda7be788efbc61137d9452886599415a927b959ade93c65",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3487:       Index *p;",
          "3488:       assert( !IN_SPECIAL_PARSE );",
          "3489:       assert( sqlite3SchemaMutexHeld(db, 0, pIndex->pSchema) );",
          "3498:       if( pTblName!=0 ){",
          "3499:         pIndex->tnum = db->init.newTnum;",
          "3500:         if( sqlite3IndexHasDuplicateRootPage(pIndex) ){",
          "",
          "[Removed Lines]",
          "3490:       p = sqlite3HashInsert(&pIndex->pSchema->idxHash,",
          "3491:           pIndex->zName, pIndex);",
          "3492:       if( p ){",
          "3494:         sqlite3OomFault(db);",
          "3495:         goto exit_create_index;",
          "3496:       }",
          "3497:       db->mDbFlags |= DBFLAG_SchemaChange;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3503:           goto exit_create_index;",
          "3504:         }",
          "3505:       }",
          "3506:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3498:       p = sqlite3HashInsert(&pIndex->pSchema->idxHash,",
          "3499:           pIndex->zName, pIndex);",
          "3500:       if( p ){",
          "3502:         sqlite3OomFault(db);",
          "3503:         goto exit_create_index;",
          "3504:       }",
          "3505:       db->mDbFlags |= DBFLAG_SchemaChange;",
          "",
          "---------------"
        ],
        "test/corruptL.test||test/corruptL.test": [
          "File: test/corruptL.test -> test/corruptL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "629:   COMMIT;",
          "630: } {1 {malformed database schema (t1b) - invalid root page}}",
          "632: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "632: #-------------------------------------------------------------------------",
          "633: reset_db",
          "634: do_test 7.0 {",
          "635:   sqlite3 db {}",
          "636:   db deserialize [decode_hexdb {",
          "637: | size 20480 pagesize 4096 filename crash-8391315d75edff.db",
          "638: | page 1 offset 0",
          "639: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "640: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 05   .....@  ........",
          "641: |     32: 00 00 00 00 00 00 00 00 00 00 00 05 00 00 00 04   ................",
          "642: |     48: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "643: |     96: 00 00 00 00 0d 00 00 00 05 0e 55 00 0f 74 0f 3c   ..........U..t.<",
          "644: |    112: 0e f9 0e d1 0e 55 00 00 00 00 00 00 00 00 00 00   .....U..........",
          "645: |   3664: 00 00 00 00 00 7a 05 07 15 11 11 08 81 63 76 69   .....z.......cvi",
          "646: |   3680: 65 77 76 31 76 31 43 52 45 41 54 45 20 56 49 45   ewv1v1CREATE VIE",
          "647: |   3696: 57 20 76 31 28 78 2c 69 29 20 41 53 0a 53 45 4c   W v1(x,i) AS.SEL",
          "648: |   3712: 45 43 54 20 74 31 2e 62 2c 74 32 2e 62 20 46 52   ECT t1.b,t2.b FR",
          "649: |   3728: 4f 4d 20 74 31 2c 74 32 20 57 48 45 52 45 20 74   OM t1,t2 WHERE t",
          "650: |   3744: 31 2e 61 3d 74 32 2e 61 20 47 52 4f 55 50 20 42   1.a=t2.a GROUP B",
          "651: |   3760: 59 20 31 20 48 41 56 49 4e 47 20 74 32 2e 63 20   Y 1 HAVING t2.c",
          "652: |   3776: 4e 4f 54 20 4e 55 4c 4c 0a 4c 49 4d 49 54 20 31   NOT NULL.LIMIT 1",
          "653: |   3792: 30 26 04 06 17 11 11 01 39 74 61 62 6c 65 74 32   0&......9tablet2",
          "654: |   3808: 74 32 05 43 52 45 41 54 45 20 54 41 42 4c 45 20   t2.CREATE TABLE",
          "655: |   3824: 74 32 28 61 2c 62 2c 63 29 41 03 06 17 15 11 01   t2(a,b,c)A......",
          "656: |   3840: 6b 69 6e 64 65 78 74 31 78 31 74 31 03 43 52 45   kindext1x1t1.CRE",
          "657: |   3856: 41 54 45 20 49 4e 44 45 58 20 74 31 78 31 20 4f   ATE INDEX t1x1 O",
          "658: |   3872: 4e 20 74 31 28 64 29 20 57 48 45 52 45 20 65 65   N t1(d) WHERE ee",
          "659: |   3888: 20 49 53 20 4e 4f 54 20 4e 55 4c 4c 36 02 06 17    IS NOT NULL6...",
          "660: |   3904: 17 11 01 53 69 6e 64 65 78 74 31 61 62 63 74 31   ...Sindext1abct1",
          "661: |   3920: 03 43 52 45 41 54 45 20 49 4e 44 45 58 20 74 31   .CREATE INDEX t1",
          "662: |   3936: 61 62 63 20 4f 4e 20 74 31 28 61 2c 62 2c 63 2b   abc ON t1(a,b,c+",
          "663: |   3952: 64 2b 65 29 81 09 01 07 17 11 11 01 81 7d 74 61   d+e)..........ta",
          "664: |   3968: 62 6c 65 74 31 74 31 02 43 52 45 41 54 45 20 54   blet1t1.CREATE T",
          "665: |   3984: 41 42 4c 45 20 74 31 28 61 2c 62 2c 63 2c 64 2c   ABLE t1(a,b,c,d,",
          "666: |   4000: 65 2c 66 2c 67 2c 68 2c 6a 2c 6a 6a 2c 6a 6a 6a   e,f,g,h,j,jj,jjj",
          "667: |   4016: 2c 6b 2c 61 61 2c 62 69 8c 63 63 2c 64 64 2c 65   ,k,aa,bi.cc,dd,e",
          "668: |   4032: 65 20 44 45 46 41 55 4c 54 20 33 2e 31 34 2c 0a   e DEFAULT 3.14,.",
          "669: |   4048: 66 66 20 44 45 46 41 55 4c 54 28 27 68 69 63 63   ff DEFAULT('hicc",
          "670: |   4064: 75 70 27 29 2c 67 67 20 4e 4f 54 20 4e 55 4c 4c   up'),gg NOT NULL",
          "671: |   4080: 20 44 45 46 41 55 4c 54 28 66 61 6c 73 65 29 29    DEFAULT(false))",
          "672: | page 2 offset 4096",
          "673: |      0: 0d 00 00 00 0a 0e 7b 00 0f dc 0f b6 0f 8f 0f 68   ...............h",
          "674: |     16: 0f 41 0f 1a 0e f3 0e cb 0e a3 0e 22 00 00 00 00   .A..............",
          "675: |   3696: 00 00 00 00 00 00 00 00 00 00 00 26 0a 14 01 01   ...........&....",
          "676: |   3712: 02 08 00 00 00 00 00 00 00 00 00 00 00 00 07 19   ................",
          "677: |   3728: 08 09 5a 00 b4 40 09 1e b8 51 eb 95 1f 68 69 63   ..Z..@...Q...hic",
          "678: |   3744: 63 75 70 26 09 14 01 01 02 08 00 00 00 00 00 00   cup&............",
          "679: |   3760: 00 00 00 00 00 00 07 19 08 08 50 00 a0 40 09 1e   ..........P..@..",
          "680: |   3776: b8 51 eb 85 1f 68 69 63 63 74 70 26 08 14 01 01   .Q...hicctp&....",
          "681: |   3792: 03 08 00 00 00 00 00 00 00 00 00 00 00 00 07 19   ................",
          "682: |   3808: 08 07 46 00 8c 40 09 1e b8 51 eb 85 1f 68 69 63   ..F..@...Q...hic",
          "683: |   3824: 63 75 70 25 07 14 01 01 01 08 00 00 00 00 00 00   cup%............",
          "684: |   3840: 00 00 00 00 00 10 07 19 08 06 3c 78 40 09 1e b8   ..........<x@...",
          "685: |   3856: 51 eb 85 1f 68 69 63 63 75 70 25 06 14 01 01 01   Q...hiccup%.....",
          "686: |   3872: 08 00 00 00 00 00 00 00 00 00 00 00 00 07 19 08   ................",
          "687: |   3888: 05 32 64 40 09 1e b8 51 eb 85 1f 68 69 63 63 75   .2d@...Q...hiccu",
          "688: |   3904: 70 25 05 14 01 01 01 08 00 00 00 00 00 00 00 00   p%..............",
          "689: |   3920: 00 00 00 00 07 19 08 04 28 50 40 09 1e b8 51 eb   ........(P@...Q.",
          "690: |   3936: 85 1f 68 69 63 63 75 70 25 04 14 01 00 f1 08 00   ..hiccup%.......",
          "691: |   3952: 00 00 00 00 00 00 00 00 00 00 00 07 19 08 03 1e   ................",
          "692: |   3968: 3c 40 09 1e b8 51 eb 85 1f 68 69 63 63 75 70 25   <@...Q...hiccup%",
          "693: |   3984: 03 14 01 01 01 08 00 00 00 00 00 00 00 00 00 00   ................",
          "694: |   4000: 00 00 07 19 08 02 14 28 40 09 1e b8 51 eb 85 1f   .......(@...Q...",
          "695: |   4016: 68 69 63 63 75 70 24 02 14 09 01 01 08 00 00 00   hiccup$.........",
          "696: |   4032: 00 00 00 00 00 00 00 00 00 07 19 08 0a 14 40 09   ..............@.",
          "697: |   4048: 1e b8 51 eb 85 1f 68 69 63 63 75 70 22 01 14 08   ..Q...hiccup....",
          "698: |   4064: 08 08 08 00 00 00 00 00 00 00 00 00 00 00 00 07   ................",
          "699: |   4080: 19 08 40 09 1e b8 51 eb 85 1f 68 69 63 63 75 70   ..@...Q...hiccup",
          "700: | page 3 offset 8192",
          "701: |      0: 0a 00 00 00 0a 0f aa 00 0f fa 0f f2 0f e9 0f e0   ................",
          "702: |     16: 0f d7 0f ce 0f c5 0f bc 0f b3 0f aa 00 00 00 00   ................",
          "703: |   4000: 00 00 00 00 00 00 00 00 00 00 08 05 01 01 00 01   ................",
          "704: |   4016: 09 5a 0a d8 05 01 01 00 01 08 50 09 08 05 01 01   .Z........P.....",
          "705: |   4032: 00 01 07 46 08 08 05 01 01 00 01 06 3c 07 08 05   ...F........<...",
          "706: |   4048: 01 01 00 01 05 32 06 08 05 01 01 00 01 04 28 05   .....2........(.",
          "707: |   4064: 08 05 01 02 60 01 03 1e 04 08 05 01 01 00 01 02   ....`...........",
          "708: |   4080: 14 03 07 05 09 01 00 01 0a 02 05 05 08 08 00 09   ................",
          "709: | page 4 offset 12288",
          "710: |      0: 0a 00 00 00 0a 0f cf 00 0f fc 0f f7 0f f2 0f ed   ................",
          "711: |     16: 0f e8 0f e3 0f de 0f d9 0f d4 0f cf 00 00 00 00   ................",
          "712: |   4032: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04   ................",
          "713: |   4048: 03 08 01 0a 04 03 08 01 09 04 03 08 01 08 04 03   ................",
          "714: |   4064: 08 01 07 04 03 08 01 06 04 03 08 01 05 04 03 08   ................",
          "715: |   4080: 01 04 04 03 08 01 03 04 03 08 01 02 03 03 08 09   ................",
          "716: | page 5 offset 16384",
          "717: |      0: 0d 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00   ................",
          "718: | end crash-8391315d75edff.db",
          "719: }]} {}",
          "721: do_catchsql_test 7.1 {",
          "722:   SELECT * FROM sqlite_master;",
          "723: } {1 {malformed database schema (t1x1) - invalid root page}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6a19865ff2f39ed313462da7e0e204b6ff3eb8b0",
      "candidate_info": {
        "commit_hash": "6a19865ff2f39ed313462da7e0e204b6ff3eb8b0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6a19865ff2f39ed313462da7e0e204b6ff3eb8b0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/wherecode.c"
        ],
        "message": "Remove some affinity tests that became unreachable due to the prior change.\n\nFossilOrigin-Name: e2db1123faac26c0e0b6a1ebef1685ea7633bfcafd1ff743ba5380700f7745af",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e0d909c740b774d8a46731696e33342be83206cc4a95d07f42fdb3d8cc2d7a8e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2203:   if( op==TK_REGISTER ) op = p->op2;",
          "2204:   switch( op ){",
          "2205:     case TK_INTEGER: {",
          "2207:     }",
          "2208:     case TK_FLOAT: {",
          "2210:     }",
          "2211:     case TK_STRING: {",
          "2212:       return !unaryMinus && aff==SQLITE_AFF_TEXT;",
          "",
          "[Removed Lines]",
          "2206:       return aff==SQLITE_AFF_INTEGER || aff==SQLITE_AFF_NUMERIC;",
          "2209:       return aff==SQLITE_AFF_REAL || aff==SQLITE_AFF_NUMERIC;",
          "",
          "[Added Lines]",
          "2206:       return aff>=SQLITE_AFF_NUMERIC;",
          "2209:       return aff>=SQLITE_AFF_NUMERIC;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2216:     }",
          "2217:     case TK_COLUMN: {",
          "2221:     }",
          "2222:     default: {",
          "2223:       return 0;",
          "",
          "[Removed Lines]",
          "2219:       return p->iColumn<0",
          "2220:           && (aff==SQLITE_AFF_INTEGER || aff==SQLITE_AFF_NUMERIC);",
          "",
          "[Added Lines]",
          "2219:       return aff>=SQLITE_AFF_NUMERIC && p->iColumn<0;",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "755:         if( sqlite3ExprNeedsNoAffinityChange(pRight, zAff[j]) ){",
          "756:           zAff[j] = SQLITE_AFF_BLOB;",
          "757:         }",
          "759:       }",
          "760:     }",
          "761:   }",
          "",
          "[Removed Lines]",
          "758:         if( zAff[j]==SQLITE_AFF_REAL ) zAff[j] = SQLITE_AFF_NUMERIC;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}