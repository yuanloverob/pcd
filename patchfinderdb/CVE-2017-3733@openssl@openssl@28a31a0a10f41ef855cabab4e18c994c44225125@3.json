{
  "cve_id": "CVE-2017-3733",
  "cve_desc": "During a renegotiation handshake if the Encrypt-Then-Mac extension is negotiated where it was not in the original handshake (or vice-versa) then this can cause OpenSSL 1.1.0 before 1.1.0e to crash (dependent on ciphersuite). Both clients and servers are affected.",
  "repo": "openssl/openssl",
  "patch_hash": "28a31a0a10f41ef855cabab4e18c994c44225125",
  "patch_info": {
    "commit_hash": "28a31a0a10f41ef855cabab4e18c994c44225125",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/28a31a0a10f41ef855cabab4e18c994c44225125",
    "files": [
      "include/openssl/ssl3.h",
      "ssl/d1_lib.c",
      "ssl/record/rec_layer_d1.c",
      "ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h",
      "ssl/statem/extensions.c",
      "ssl/statem/extensions_clnt.c",
      "ssl/statem/extensions_srvr.c",
      "ssl/t1_enc.c",
      "test/dtls_mtu_test.c"
    ],
    "message": "Don't change the state of the ETM flags until CCS processing\n\nIn 1.1.0 changing the ciphersuite during a renegotiation can result in\na crash leading to a DoS attack. In master this does not occur with TLS\n(instead you get an internal error, which is still wrong but not a security\nissue) - but the problem still exists in the DTLS code.\n\nThe problem is caused by changing the flag indicating whether to use ETM\nor not immediately on negotiation of ETM, rather than at CCS. Therefore,\nduring a renegotiation, if the ETM state is changing (usually due to a\nchange of ciphersuite), then an error/crash will occur.\n\nDue to the fact that there are separate CCS messages for read and write\nwe actually now need two flags to determine whether to use ETM or not.\n\nCVE-2017-3733\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl3.h||include/openssl/ssl3.h",
      "ssl/d1_lib.c||ssl/d1_lib.c",
      "ssl/record/rec_layer_d1.c||ssl/record/rec_layer_d1.c",
      "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h||ssl/ssl_locl.h",
      "ssl/statem/extensions.c||ssl/statem/extensions.c",
      "ssl/statem/extensions_clnt.c||ssl/statem/extensions_clnt.c",
      "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c",
      "ssl/t1_enc.c||ssl/t1_enc.c",
      "test/dtls_mtu_test.c||test/dtls_mtu_test.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl3.h||include/openssl/ssl3.h": [
      "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "265: # define TLS1_FLAGS_SKIP_CERT_VERIFY             0x0010",
      "271: # define TLS1_FLAGS_RECEIVED_EXTMS               0x0200",
      "273: # define SSL3_MT_HELLO_REQUEST                   0",
      "274: # define SSL3_MT_CLIENT_HELLO                    1",
      "275: # define SSL3_MT_SERVER_HELLO                    2",
      "",
      "[Removed Lines]",
      "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             0x0100",
      "",
      "[Added Lines]",
      "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_READ        0x0100",
      "269: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             TLS1_FLAGS_ENCRYPT_THEN_MAC_READ",
      "274: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE       0x0400",
      "",
      "---------------"
    ],
    "ssl/d1_lib.c||ssl/d1_lib.c": [
      "File: ssl/d1_lib.c -> ssl/d1_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "937:                                  &blocksize, &ext_overhead))",
      "938:         return 0;",
      "941:         ext_overhead += mac_overhead;",
      "942:     else",
      "943:         int_overhead += mac_overhead;",
      "",
      "[Removed Lines]",
      "940:     if (SSL_USE_ETM(s))",
      "",
      "[Added Lines]",
      "940:     if (SSL_READ_ETM(s))",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_d1.c||ssl/record/rec_layer_d1.c": [
      "File: ssl/record/rec_layer_d1.c -> ssl/record/rec_layer_d1.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1033:         if (!s->method->ssl3_enc->mac(s, &wr,",
      "1034:                                       &(p[SSL3_RECORD_get_length(&wr) + eivlen]),",
      "1035:                                       1))",
      "",
      "[Removed Lines]",
      "1032:     if (!SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "1032:     if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1047:     if (s->method->ssl3_enc->enc(s, &wr, 1, 1) < 1)",
      "1048:         goto err;",
      "1051:         if (!s->method->ssl3_enc->mac(s, &wr,",
      "1052:                                       &(p[SSL3_RECORD_get_length(&wr)]), 1))",
      "1053:             goto err;",
      "",
      "[Removed Lines]",
      "1050:     if (SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "1050:     if (SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
      "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "401:     if (type == SSL3_RT_APPLICATION_DATA &&",
      "402:         len >= 4 * (max_send_fragment = s->max_send_fragment) &&",
      "403:         s->compress == NULL && s->msg_callback == NULL &&",
      "405:         EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_write_ctx)) &",
      "406:         EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK) {",
      "407:         unsigned char aad[13];",
      "",
      "[Removed Lines]",
      "404:         !SSL_USE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "[Added Lines]",
      "404:         !SSL_WRITE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "874:             unsigned char *mac;",
      "876:             if (!WPACKET_allocate_bytes(thispkt, mac_size, &mac)",
      "",
      "[Removed Lines]",
      "873:         if (!SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "873:         if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "923:             SSLerr(SSL_F_DO_SSL3_WRITE, ERR_R_INTERNAL_ERROR);",
      "924:             goto err;",
      "925:         }",
      "927:             unsigned char *mac;",
      "929:             if (!WPACKET_allocate_bytes(thispkt, mac_size, &mac)",
      "",
      "[Removed Lines]",
      "926:         if (SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "926:         if (SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------"
    ],
    "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
      "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "387:         unsigned char *mac;",
      "389:         imac_size = EVP_MD_CTX_size(s->read_hash);",
      "",
      "[Removed Lines]",
      "386:     if (SSL_USE_ETM(s) && s->read_hash) {",
      "",
      "[Added Lines]",
      "386:     if (SSL_READ_ETM(s) && s->read_hash) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "441:     if ((sess != NULL) &&",
      "442:         (s->enc_read_ctx != NULL) &&",
      "445:         unsigned char *mac = NULL;",
      "446:         unsigned char mac_tmp[EVP_MAX_MD_SIZE];",
      "",
      "[Removed Lines]",
      "443:         (EVP_MD_CTX_md(s->read_hash) != NULL) && !SSL_USE_ETM(s)) {",
      "",
      "[Added Lines]",
      "443:         (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "915:         }",
      "917:         ret = 1;",
      "919:             imac_size = EVP_MD_CTX_size(s->read_hash);",
      "920:             if (imac_size < 0)",
      "921:                 return -1;",
      "",
      "[Removed Lines]",
      "918:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL) {",
      "",
      "[Added Lines]",
      "918:         if (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1092:     header[11] = (unsigned char)(rec->length >> 8);",
      "1093:     header[12] = (unsigned char)(rec->length & 0xff);",
      "1096:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
      "1097:         ssl3_cbc_record_digest_supported(mac_ctx)) {",
      "",
      "[Removed Lines]",
      "1095:     if (!send && !SSL_USE_ETM(ssl) &&",
      "",
      "[Added Lines]",
      "1095:     if (!send && !SSL_READ_ETM(ssl) &&",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1118:             EVP_MD_CTX_free(hmac);",
      "1119:             return 0;",
      "1120:         }",
      "1122:             if (!tls_fips_digest_extra(ssl->enc_read_ctx,",
      "1123:                                        mac_ctx, rec->input,",
      "1124:                                        rec->length, rec->orig_len)) {",
      "",
      "[Removed Lines]",
      "1121:         if (!send && !SSL_USE_ETM(ssl) && FIPS_mode())",
      "",
      "[Added Lines]",
      "1121:         if (!send && !SSL_READ_ETM(ssl) && FIPS_mode())",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1408:     rr->data = rr->input;",
      "1409:     rr->orig_len = rr->length;",
      "1412:         unsigned char *mac;",
      "1413:         mac_size = EVP_MD_CTX_size(s->read_hash);",
      "1414:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
      "",
      "[Removed Lines]",
      "1411:     if (SSL_USE_ETM(s) && s->read_hash) {",
      "",
      "[Added Lines]",
      "1411:     if (SSL_READ_ETM(s) && s->read_hash) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1452: #endif",
      "1456:         (s->enc_read_ctx != NULL) && (EVP_MD_CTX_md(s->read_hash) != NULL)) {",
      "1458:         unsigned char *mac = NULL;",
      "",
      "[Removed Lines]",
      "1455:     if ((sess != NULL) && !SSL_USE_ETM(s) &&",
      "",
      "[Added Lines]",
      "1455:     if ((sess != NULL) && !SSL_READ_ETM(s) &&",
      "",
      "---------------"
    ],
    "ssl/ssl_locl.h||ssl/ssl_locl.h": [
      "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "395: # define SSL_CLIENT_USE_SIGALGS(s)        \\",
      "396:     SSL_CLIENT_USE_TLS1_2_CIPHERS(s)",
      "401: # define SSL_PKEY_RSA            0",
      "",
      "[Removed Lines]",
      "398: # define SSL_USE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC)",
      "",
      "[Added Lines]",
      "398: # define SSL_READ_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_READ)",
      "399: # define SSL_WRITE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1134:         int psk_kex_mode;",
      "1135:     } ext;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1138:         int use_etm;",
      "",
      "---------------"
    ],
    "ssl/statem/extensions.c||ssl/statem/extensions.c": [
      "File: ssl/statem/extensions.c -> ssl/statem/extensions.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "207: #endif",
      "208:     {",
      "209:         TLSEXT_TYPE_encrypt_then_mac,",
      "211:         init_etm, tls_parse_ctos_etm, tls_parse_stoc_etm,",
      "212:         tls_construct_stoc_etm, tls_construct_ctos_etm, NULL",
      "213:     },",
      "",
      "[Removed Lines]",
      "210:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY,",
      "",
      "[Added Lines]",
      "210:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY | EXT_SSL3_ALLOWED,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "913: static int init_etm(SSL *s, unsigned int context)",
      "914: {",
      "917:     return 1;",
      "918: }",
      "",
      "[Removed Lines]",
      "915:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "915:     s->ext.use_etm = 0;",
      "",
      "---------------"
    ],
    "ssl/statem/extensions_clnt.c||ssl/statem/extensions_clnt.c": [
      "File: ssl/statem/extensions_clnt.c -> ssl/statem/extensions_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1172:     if (!(s->options & SSL_OP_NO_ENCRYPT_THEN_MAC)",
      "1173:             && s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD",
      "1174:             && s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)",
      "1177:     return 1;",
      "1178: }",
      "",
      "[Removed Lines]",
      "1175:         s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1175:         s->ext.use_etm = 1;",
      "",
      "---------------"
    ],
    "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c": [
      "File: ssl/statem/extensions_srvr.c -> ssl/statem/extensions_srvr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "451:                        size_t chainidx, int *al)",
      "452: {",
      "453:     if (!(s->options & SSL_OP_NO_ENCRYPT_THEN_MAC))",
      "456:     return 1;",
      "457: }",
      "",
      "[Removed Lines]",
      "454:         s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "454:         s->ext.use_etm = 1;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "953: int tls_construct_stoc_etm(SSL *s, WPACKET *pkt, unsigned int context, X509 *x,",
      "954:                            size_t chainidx, int *al)",
      "955: {",
      "957:         return 1;",
      "",
      "[Removed Lines]",
      "956:     if ((s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) == 0)",
      "",
      "[Added Lines]",
      "956:     if (!s->ext.use_etm)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "964:         || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4",
      "965:         || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT",
      "966:         || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12) {",
      "968:         return 1;",
      "969:     }",
      "",
      "[Removed Lines]",
      "967:         s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "967:         s->ext.use_etm = 0;",
      "",
      "---------------"
    ],
    "ssl/t1_enc.c||ssl/t1_enc.c": [
      "File: ssl/t1_enc.c -> ssl/t1_enc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "129: #endif",
      "131:     if (which & SSL3_CC_READ) {",
      "132:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "133:             s->mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM;",
      "134:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "132:         if (s->ext.use_etm)",
      "133:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "134:         else",
      "135:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "167:         mac_secret = &(s->s3->read_mac_secret[0]);",
      "168:         mac_secret_size = &(s->s3->read_mac_secret_size);",
      "169:     } else {",
      "170:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "171:             s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
      "172:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "175:         if (s->ext.use_etm)",
      "176:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "177:         else",
      "178:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "369:     if (s->s3->tmp.key_block_length != 0)",
      "370:         return (1);",
      "375:         SSLerr(SSL_F_TLS1_SETUP_KEY_BLOCK, SSL_R_CIPHER_OR_HASH_UNAVAILABLE);",
      "376:         return (0);",
      "377:     }",
      "",
      "[Removed Lines]",
      "372:     if (!ssl_cipher_get_evp",
      "373:         (s->session, &c, &hash, &mac_type, &mac_secret_size, &comp,",
      "374:          SSL_USE_ETM(s))) {",
      "",
      "[Added Lines]",
      "382:     if (!ssl_cipher_get_evp(s->session, &c, &hash, &mac_type, &mac_secret_size,",
      "383:                             &comp, s->ext.use_etm)) {",
      "",
      "---------------"
    ],
    "test/dtls_mtu_test.c||test/dtls_mtu_test.c": [
      "File: test/dtls_mtu_test.c -> test/dtls_mtu_test.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "133:         }",
      "134:     }",
      "135:     rv = 1;",
      "137:         rv = 2;",
      "138:  out:",
      "139:     SSL_free(clnt_ssl);",
      "",
      "[Removed Lines]",
      "136:     if (SSL_USE_ETM(clnt_ssl))",
      "",
      "[Added Lines]",
      "136:     if (SSL_READ_ETM(clnt_ssl))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e56c33b98bd8d72307da7911de27b5d38191d239",
      "candidate_info": {
        "commit_hash": "e56c33b98bd8d72307da7911de27b5d38191d239",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/e56c33b98bd8d72307da7911de27b5d38191d239",
        "files": [
          "include/openssl/ssl.h",
          "ssl/ssl_err.c",
          "ssl/statem/extensions.c",
          "ssl/statem/extensions_srvr.c",
          "ssl/statem/statem_locl.h"
        ],
        "message": "Rename some functions\n\nThe _clienthello_ in the extensions parsing functions is overly specific.\nBetter to keep the convention to just _client_\n\nPerl changes reviewed by Richard Levitte. Non-perl changes reviewed by Rich\nSalz\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "ssl/ssl_err.c||ssl/ssl_err.c",
          "ssl/statem/extensions.c||ssl/statem/extensions.c",
          "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c",
          "ssl/statem/statem_locl.h||ssl/statem/statem_locl.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/statem/extensions.c||ssl/statem/extensions.c",
            "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c"
          ],
          "candidate": [
            "ssl/statem/extensions.c||ssl/statem/extensions.c",
            "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c"
          ]
        }
      },
      "candidate_diff": {
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2293: # define SSL_F_TLS_CONSTRUCT_SERVER_USE_SRTP              462",
          "2294: # define SSL_F_TLS_GET_MESSAGE_BODY                       351",
          "2295: # define SSL_F_TLS_GET_MESSAGE_HEADER                     387",
          "2298: # define SSL_F_TLS_PARSE_CLIENTHELLO_TLSEXT               449",
          "2300: # define SSL_F_TLS_POST_PROCESS_CLIENT_HELLO              378",
          "2301: # define SSL_F_TLS_POST_PROCESS_CLIENT_KEY_EXCHANGE       384",
          "2302: # define SSL_F_TLS_PREPARE_CLIENT_CERTIFICATE             360",
          "",
          "[Removed Lines]",
          "2296: # define SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE            445",
          "2297: # define SSL_F_TLS_PARSE_CLIENTHELLO_RENEGOTIATE          448",
          "2299: # define SSL_F_TLS_PARSE_CLIENTHELLO_USE_SRTP             446",
          "",
          "[Added Lines]",
          "2297: # define SSL_F_TLS_PARSE_CLIENT_KEY_SHARE                 445",
          "2298: # define SSL_F_TLS_PARSE_CLIENT_RENEGOTIATE               448",
          "2299: # define SSL_F_TLS_PARSE_CLIENT_USE_SRTP                  446",
          "",
          "---------------"
        ],
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "312:      \"tls_construct_server_use_srtp\"},",
          "313:     {ERR_FUNC(SSL_F_TLS_GET_MESSAGE_BODY), \"tls_get_message_body\"},",
          "314:     {ERR_FUNC(SSL_F_TLS_GET_MESSAGE_HEADER), \"tls_get_message_header\"},",
          "319:     {ERR_FUNC(SSL_F_TLS_PARSE_CLIENTHELLO_TLSEXT),",
          "320:      \"tls_parse_clienthello_tlsext\"},",
          "323:     {ERR_FUNC(SSL_F_TLS_POST_PROCESS_CLIENT_HELLO),",
          "324:      \"tls_post_process_client_hello\"},",
          "325:     {ERR_FUNC(SSL_F_TLS_POST_PROCESS_CLIENT_KEY_EXCHANGE),",
          "",
          "[Removed Lines]",
          "315:     {ERR_FUNC(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE),",
          "316:      \"tls_parse_clienthello_key_share\"},",
          "317:     {ERR_FUNC(SSL_F_TLS_PARSE_CLIENTHELLO_RENEGOTIATE),",
          "318:      \"tls_parse_clienthello_renegotiate\"},",
          "321:     {ERR_FUNC(SSL_F_TLS_PARSE_CLIENTHELLO_USE_SRTP),",
          "322:      \"tls_parse_clienthello_use_srtp\"},",
          "",
          "[Added Lines]",
          "317:     {ERR_FUNC(SSL_F_TLS_PARSE_CLIENT_KEY_SHARE),",
          "318:      \"tls_parse_client_key_share\"},",
          "319:     {ERR_FUNC(SSL_F_TLS_PARSE_CLIENT_RENEGOTIATE),",
          "320:      \"tls_parse_client_renegotiate\"},",
          "321:     {ERR_FUNC(SSL_F_TLS_PARSE_CLIENT_USE_SRTP), \"tls_parse_client_use_srtp\"},",
          "",
          "---------------"
        ],
        "ssl/statem/extensions.c||ssl/statem/extensions.c": [
          "File: ssl/statem/extensions.c -> ssl/statem/extensions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: static const EXTENSION_DEFINITION ext_defs[] = {",
          "30:     {",
          "31:         TLSEXT_TYPE_renegotiate,",
          "33:         NULL,",
          "34:         tls_construct_server_renegotiate,",
          "35:         NULL,",
          "",
          "[Removed Lines]",
          "32:         tls_parse_clienthello_renegotiate,",
          "",
          "[Added Lines]",
          "32:         tls_parse_client_renegotiate,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:     },",
          "39:     {",
          "40:         TLSEXT_TYPE_server_name,",
          "42:         NULL,",
          "43:         tls_construct_server_server_name,",
          "44:         NULL,",
          "",
          "[Removed Lines]",
          "41:         tls_parse_clienthello_server_name,",
          "",
          "[Added Lines]",
          "41:         tls_parse_client_server_name,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "48: #ifndef OPENSSL_NO_SRP",
          "49:     {",
          "50:         TLSEXT_TYPE_srp,",
          "52:         NULL,",
          "53:         NULL,",
          "54:         NULL,",
          "",
          "[Removed Lines]",
          "51:         tls_parse_clienthello_srp,",
          "",
          "[Added Lines]",
          "51:         tls_parse_client_srp,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "58: #ifndef OPENSSL_NO_EC",
          "59:     {",
          "60:         TLSEXT_TYPE_ec_point_formats,",
          "62:         NULL,",
          "63:         tls_construct_server_ec_pt_formats,",
          "64:         NULL,",
          "",
          "[Removed Lines]",
          "61:         tls_parse_clienthello_ec_pt_formats,",
          "",
          "[Added Lines]",
          "61:         tls_parse_client_ec_pt_formats,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "66:     },",
          "67:     {",
          "68:         TLSEXT_TYPE_supported_groups,",
          "70:         NULL,",
          "71:         NULL /* TODO(TLS1.3): Need to add this */,",
          "72:         NULL,",
          "",
          "[Removed Lines]",
          "69:         tls_parse_clienthello_supported_groups,",
          "",
          "[Added Lines]",
          "69:         tls_parse_client_supported_groups,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "76: #endif",
          "77:     {",
          "78:         TLSEXT_TYPE_session_ticket,",
          "80:         NULL,",
          "81:         tls_construct_server_session_ticket,",
          "82:         NULL,",
          "",
          "[Removed Lines]",
          "79:         tls_parse_clienthello_session_ticket,",
          "",
          "[Added Lines]",
          "79:         tls_parse_client_session_ticket,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "84:     },",
          "85:     {",
          "86:         TLSEXT_TYPE_signature_algorithms,",
          "88:         NULL,",
          "89:         NULL,",
          "90:         NULL,",
          "",
          "[Removed Lines]",
          "87:         tls_parse_clienthello_sig_algs,",
          "",
          "[Added Lines]",
          "87:         tls_parse_client_sig_algs,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "92:     },",
          "93:     {",
          "94:         TLSEXT_TYPE_status_request,",
          "96:         NULL,",
          "97:         tls_construct_server_status_request,",
          "98:         NULL,",
          "",
          "[Removed Lines]",
          "95:         tls_parse_clienthello_status_request,",
          "",
          "[Added Lines]",
          "95:         tls_parse_client_status_request,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "102: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "103:     {",
          "104:         TLSEXT_TYPE_next_proto_neg,",
          "106:         NULL,",
          "107:         tls_construct_server_next_proto_neg,",
          "108:         NULL,",
          "",
          "[Removed Lines]",
          "105:         tls_parse_clienthello_npn,",
          "",
          "[Added Lines]",
          "105:         tls_parse_client_npn,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "111: #endif",
          "112:     {",
          "113:         TLSEXT_TYPE_application_layer_protocol_negotiation,",
          "115:         NULL,",
          "116:         tls_construct_server_alpn,",
          "117:         NULL,",
          "",
          "[Removed Lines]",
          "114:         tls_parse_clienthello_alpn,",
          "",
          "[Added Lines]",
          "114:         tls_parse_client_alpn,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "121: #ifndef OPENSSL_NO_SRTP",
          "122:     {",
          "123:         TLSEXT_TYPE_use_srtp,",
          "125:         NULL,",
          "126:         tls_construct_server_use_srtp,",
          "127:         NULL,",
          "",
          "[Removed Lines]",
          "124:         tls_parse_clienthello_use_srtp,",
          "",
          "[Added Lines]",
          "124:         tls_parse_client_use_srtp,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "131: #endif",
          "132:     {",
          "133:         TLSEXT_TYPE_encrypt_then_mac,",
          "135:         NULL,",
          "136:         tls_construct_server_etm,",
          "137:         NULL,",
          "",
          "[Removed Lines]",
          "134:         tls_parse_clienthello_etm,",
          "",
          "[Added Lines]",
          "134:         tls_parse_client_etm,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "153:     },",
          "154:     {",
          "155:         TLSEXT_TYPE_extended_master_secret,",
          "157:         NULL,",
          "158:         tls_construct_server_ems,",
          "159:         NULL,",
          "",
          "[Removed Lines]",
          "156:         tls_parse_clienthello_ems,",
          "",
          "[Added Lines]",
          "156:         tls_parse_client_ems,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "179:     },",
          "180:     {",
          "181:         TLSEXT_TYPE_key_share,",
          "183:         NULL,",
          "184:         tls_construct_server_key_share,",
          "185:         NULL,",
          "",
          "[Removed Lines]",
          "182:         tls_parse_clienthello_key_share,",
          "",
          "[Added Lines]",
          "182:         tls_parse_client_key_share,",
          "",
          "---------------"
        ],
        "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c": [
          "File: ssl/statem/extensions_srvr.c -> ssl/statem/extensions_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: {",
          "19:     unsigned int ilen;",
          "20:     const unsigned char *data;",
          "",
          "[Removed Lines]",
          "17: int tls_parse_clienthello_renegotiate(SSL *s, PACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "17: int tls_parse_client_renegotiate(SSL *s, PACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23:     if (!PACKET_get_1(pkt, &ilen)",
          "24:         || !PACKET_get_bytes(pkt, &data, ilen)) {",
          "26:                SSL_R_RENEGOTIATION_ENCODING_ERR);",
          "28:         return 0;",
          "",
          "[Removed Lines]",
          "25:         SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_RENEGOTIATE,",
          "",
          "[Added Lines]",
          "25:         SSLerr(SSL_F_TLS_PARSE_CLIENT_RENEGOTIATE,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "32:     if (ilen != s->s3->previous_client_finished_len) {",
          "34:                SSL_R_RENEGOTIATION_MISMATCH);",
          "36:         return 0;",
          "",
          "[Removed Lines]",
          "33:         SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_RENEGOTIATE,",
          "",
          "[Added Lines]",
          "33:         SSLerr(SSL_F_TLS_PARSE_CLIENT_RENEGOTIATE,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "39:     if (memcmp(data, s->s3->previous_client_finished,",
          "40:                s->s3->previous_client_finished_len)) {",
          "42:                SSL_R_RENEGOTIATION_MISMATCH);",
          "44:         return 0;",
          "",
          "[Removed Lines]",
          "41:         SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_RENEGOTIATE,",
          "",
          "[Added Lines]",
          "41:         SSLerr(SSL_F_TLS_PARSE_CLIENT_RENEGOTIATE,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "49:     return 1;",
          "50: }",
          "53: {",
          "54:     unsigned int servname_type;",
          "55:     PACKET sni, hostname;",
          "",
          "[Removed Lines]",
          "52: int tls_parse_clienthello_server_name(SSL *s, PACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "52: int tls_parse_client_server_name(SSL *s, PACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "135: }",
          "137: #ifndef OPENSSL_NO_SRP",
          "139: {",
          "140:     PACKET srp_I;",
          "",
          "[Removed Lines]",
          "138: int tls_parse_clienthello_srp(SSL *s, PACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "138: int tls_parse_client_srp(SSL *s, PACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "159: #endif",
          "161: #ifndef OPENSSL_NO_EC",
          "163: {",
          "164:     PACKET ec_point_format_list;",
          "",
          "[Removed Lines]",
          "162: int tls_parse_clienthello_ec_pt_formats(SSL *s, PACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "162: int tls_parse_client_ec_pt_formats(SSL *s, PACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "182: }",
          "186: {",
          "187:     if (s->tls_session_ticket_ext_cb &&",
          "188:             !s->tls_session_ticket_ext_cb(s, PACKET_data(pkt),",
          "",
          "[Removed Lines]",
          "185: int tls_parse_clienthello_session_ticket(SSL *s, PACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "185: int tls_parse_client_session_ticket(SSL *s, PACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "195:     return 1;",
          "196: }",
          "199: {",
          "200:     PACKET supported_sig_algs;",
          "",
          "[Removed Lines]",
          "198: int tls_parse_clienthello_sig_algs(SSL *s, PACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "198: int tls_parse_client_sig_algs(SSL *s, PACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "215:     return 1;",
          "216: }",
          "219: {",
          "220:     if (!PACKET_get_1(pkt, (unsigned int *)&s->tlsext_status_type)) {",
          "",
          "[Removed Lines]",
          "218: int tls_parse_clienthello_status_request(SSL *s, PACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "218: int tls_parse_client_status_request(SSL *s, PACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "310: }",
          "312: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "314: {",
          "315:     if (s->s3->tmp.finish_md_len == 0) {",
          "",
          "[Removed Lines]",
          "313: int tls_parse_clienthello_npn(SSL *s, PACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "313: int tls_parse_client_npn(SSL *s, PACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "347: {",
          "348:     PACKET protocol_list, save_protocol_list, protocol;",
          "",
          "[Removed Lines]",
          "346: int tls_parse_clienthello_alpn(SSL *s, PACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "346: int tls_parse_client_alpn(SSL *s, PACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "376: }",
          "378: #ifndef OPENSSL_NO_SRTP",
          "380: {",
          "381:     SRTP_PROTECTION_PROFILE *sprof;",
          "382:     STACK_OF(SRTP_PROTECTION_PROFILE) *srvr;",
          "",
          "[Removed Lines]",
          "379: int tls_parse_clienthello_use_srtp(SSL *s, PACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "379: int tls_parse_client_use_srtp(SSL *s, PACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "392:     if (!PACKET_get_net_2(pkt, &ct)",
          "393:         || (ct & 1) != 0 || !PACKET_get_sub_packet(pkt, &subpkt, ct)) {",
          "395:                SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);",
          "397:         return 0;",
          "",
          "[Removed Lines]",
          "394:         SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_USE_SRTP,",
          "",
          "[Added Lines]",
          "394:         SSLerr(SSL_F_TLS_PARSE_CLIENT_USE_SRTP,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "405:     while (PACKET_remaining(&subpkt)) {",
          "406:         if (!PACKET_get_net_2(&subpkt, &id)) {",
          "408:                    SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);",
          "410:             return 0;",
          "",
          "[Removed Lines]",
          "407:             SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_USE_SRTP,",
          "",
          "[Added Lines]",
          "407:             SSLerr(SSL_F_TLS_PARSE_CLIENT_USE_SRTP,",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "432:     if (!PACKET_get_1(pkt, &mki_len)) {",
          "434:                SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);",
          "436:         return 0;",
          "",
          "[Removed Lines]",
          "433:         SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_USE_SRTP,",
          "",
          "[Added Lines]",
          "433:         SSLerr(SSL_F_TLS_PARSE_CLIENT_USE_SRTP,",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "439:     if (!PACKET_forward(pkt, mki_len)",
          "440:         || PACKET_remaining(pkt)) {",
          "443:         return 0;",
          "444:     }",
          "",
          "[Removed Lines]",
          "441:         SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_USE_SRTP, SSL_R_BAD_SRTP_MKI_VALUE);",
          "",
          "[Added Lines]",
          "441:         SSLerr(SSL_F_TLS_PARSE_CLIENT_USE_SRTP, SSL_R_BAD_SRTP_MKI_VALUE);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "447: }",
          "448: #endif",
          "451: {",
          "452:     if (!(s->options & SSL_OP_NO_ENCRYPT_THEN_MAC))",
          "453:         s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "",
          "[Removed Lines]",
          "450: int tls_parse_clienthello_etm(SSL *s, PACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "450: int tls_parse_client_etm(SSL *s, PACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "493: {",
          "494:     unsigned int group_id;",
          "495:     PACKET key_share_list, encoded_pt;",
          "",
          "[Removed Lines]",
          "492: int tls_parse_clienthello_key_share(SSL *s, PACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "492: int tls_parse_client_key_share(SSL *s, PACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "505:     if (s->s3->peer_tmp != NULL) {",
          "508:         return 0;",
          "509:     }",
          "511:     if (!PACKET_as_length_prefixed_2(pkt, &key_share_list)) {",
          "514:         return 0;",
          "515:     }",
          "518:     if (!tls1_get_curvelist(s, 0, &srvrcurves, &srvr_num_curves)) {",
          "521:         return 0;",
          "522:     }",
          "525:     if (!tls1_get_curvelist(s, 1, &clntcurves, &clnt_num_curves)) {",
          "528:         return 0;",
          "529:     }",
          "",
          "[Removed Lines]",
          "507:         SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE, ERR_R_INTERNAL_ERROR);",
          "513:         SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE, SSL_R_LENGTH_MISMATCH);",
          "520:         SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE, ERR_R_INTERNAL_ERROR);",
          "527:         SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE, ERR_R_INTERNAL_ERROR);",
          "",
          "[Added Lines]",
          "507:         SSLerr(SSL_F_TLS_PARSE_CLIENT_KEY_SHARE, ERR_R_INTERNAL_ERROR);",
          "513:         SSLerr(SSL_F_TLS_PARSE_CLIENT_KEY_SHARE, SSL_R_LENGTH_MISMATCH);",
          "520:         SSLerr(SSL_F_TLS_PARSE_CLIENT_KEY_SHARE, ERR_R_INTERNAL_ERROR);",
          "527:         SSLerr(SSL_F_TLS_PARSE_CLIENT_KEY_SHARE, ERR_R_INTERNAL_ERROR);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "533:                 || !PACKET_get_length_prefixed_2(&key_share_list, &encoded_pt)",
          "534:                 || PACKET_remaining(&encoded_pt) == 0) {",
          "537:                    SSL_R_LENGTH_MISMATCH);",
          "538:             return 0;",
          "539:         }",
          "",
          "[Removed Lines]",
          "536:             SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE,",
          "",
          "[Added Lines]",
          "536:             SSLerr(SSL_F_TLS_PARSE_CLIENT_KEY_SHARE,",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "549:         if (!check_in_list(s, group_id, clntcurves, clnt_num_curves, 0)) {",
          "552:             return 0;",
          "553:         }",
          "",
          "[Removed Lines]",
          "551:             SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE, SSL_R_BAD_KEY_SHARE);",
          "",
          "[Added Lines]",
          "551:             SSLerr(SSL_F_TLS_PARSE_CLIENT_KEY_SHARE, SSL_R_BAD_KEY_SHARE);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "563:         if (group_nid == 0) {",
          "566:                    SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS);",
          "567:             return 0;",
          "568:         }",
          "",
          "[Removed Lines]",
          "565:             SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE,",
          "",
          "[Added Lines]",
          "565:             SSLerr(SSL_F_TLS_PARSE_CLIENT_KEY_SHARE,",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "574:             if (key == NULL || !EVP_PKEY_set_type(key, group_nid)) {",
          "577:                 EVP_PKEY_free(key);",
          "578:                 return 0;",
          "579:             }",
          "",
          "[Removed Lines]",
          "576:                 SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE, ERR_R_EVP_LIB);",
          "",
          "[Added Lines]",
          "576:                 SSLerr(SSL_F_TLS_PARSE_CLIENT_KEY_SHARE, ERR_R_EVP_LIB);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "587:                                                               group_nid) <= 0",
          "588:                     || EVP_PKEY_paramgen(pctx, &s->s3->peer_tmp) <= 0) {",
          "591:                 EVP_PKEY_CTX_free(pctx);",
          "592:                 return 0;",
          "593:             }",
          "",
          "[Removed Lines]",
          "590:                 SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE, ERR_R_EVP_LIB);",
          "",
          "[Added Lines]",
          "590:                 SSLerr(SSL_F_TLS_PARSE_CLIENT_KEY_SHARE, ERR_R_EVP_LIB);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "600:                 PACKET_data(&encoded_pt),",
          "601:                 PACKET_remaining(&encoded_pt))) {",
          "604:             return 0;",
          "605:         }",
          "",
          "[Removed Lines]",
          "603:             SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE, SSL_R_BAD_ECPOINT);",
          "",
          "[Added Lines]",
          "603:             SSLerr(SSL_F_TLS_PARSE_CLIENT_KEY_SHARE, SSL_R_BAD_ECPOINT);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "611: }",
          "613: #ifndef OPENSSL_NO_EC",
          "615: {",
          "616:     PACKET supported_groups_list;",
          "",
          "[Removed Lines]",
          "614: int tls_parse_clienthello_supported_groups(SSL *s, PACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "614: int tls_parse_client_supported_groups(SSL *s, PACKET *pkt, int *al)",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "635: }",
          "636: #endif",
          "639: {",
          "641:     if (PACKET_remaining(pkt) != 0) {",
          "",
          "[Removed Lines]",
          "638: int tls_parse_clienthello_ems(SSL *s, PACKET *pkt, int *al)",
          "",
          "[Added Lines]",
          "638: int tls_parse_client_ems(SSL *s, PACKET *pkt, int *al)",
          "",
          "---------------"
        ],
        "ssl/statem/statem_locl.h||ssl/statem/statem_locl.h": [
          "File: ssl/statem/statem_locl.h -> ssl/statem/statem_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "157:                                     int *al);",
          "162: #ifndef OPENSSL_NO_SRP",
          "164: #endif",
          "165: #ifndef OPENSSL_NO_EC",
          "168: #endif",
          "172: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "174: #endif",
          "176: #ifndef OPENSSL_NO_SRTP",
          "178: #endif",
          "183: int tls_construct_server_renegotiate(SSL *s, WPACKET *pkt, int *al);",
          "184: int tls_construct_server_server_name(SSL *s, WPACKET *pkt, int *al);",
          "",
          "[Removed Lines]",
          "160: int tls_parse_clienthello_renegotiate(SSL *s, PACKET *pkt, int *al);",
          "161: int tls_parse_clienthello_server_name(SSL *s, PACKET *pkt, int *al);",
          "163: int tls_parse_clienthello_srp(SSL *s, PACKET *pkt, int *al);",
          "166: int tls_parse_clienthello_ec_pt_formats(SSL *s, PACKET *pkt, int *al);",
          "167: int tls_parse_clienthello_supported_groups(SSL *s, PACKET *pkt, int *al);",
          "169: int tls_parse_clienthello_session_ticket(SSL *s, PACKET *pkt, int *al);",
          "170: int tls_parse_clienthello_sig_algs(SSL *s, PACKET *pkt, int *al);",
          "171: int tls_parse_clienthello_status_request(SSL *s, PACKET *pkt, int *al);",
          "173: int tls_parse_clienthello_npn(SSL *s, PACKET *pkt, int *al);",
          "175: int tls_parse_clienthello_alpn(SSL *s, PACKET *pkt, int *al);",
          "177: int tls_parse_clienthello_use_srtp(SSL *s, PACKET *pkt, int *al);",
          "179: int tls_parse_clienthello_etm(SSL *s, PACKET *pkt, int *al);",
          "180: int tls_parse_clienthello_key_share(SSL *s, PACKET *pkt, int *al);",
          "181: int tls_parse_clienthello_ems(SSL *s, PACKET *pkt, int *al);",
          "",
          "[Added Lines]",
          "160: int tls_parse_client_renegotiate(SSL *s, PACKET *pkt, int *al);",
          "161: int tls_parse_client_server_name(SSL *s, PACKET *pkt, int *al);",
          "163: int tls_parse_client_srp(SSL *s, PACKET *pkt, int *al);",
          "166: int tls_parse_client_ec_pt_formats(SSL *s, PACKET *pkt, int *al);",
          "167: int tls_parse_client_supported_groups(SSL *s, PACKET *pkt, int *al);",
          "169: int tls_parse_client_session_ticket(SSL *s, PACKET *pkt, int *al);",
          "170: int tls_parse_client_sig_algs(SSL *s, PACKET *pkt, int *al);",
          "171: int tls_parse_client_status_request(SSL *s, PACKET *pkt, int *al);",
          "173: int tls_parse_client_npn(SSL *s, PACKET *pkt, int *al);",
          "175: int tls_parse_client_alpn(SSL *s, PACKET *pkt, int *al);",
          "177: int tls_parse_client_use_srtp(SSL *s, PACKET *pkt, int *al);",
          "179: int tls_parse_client_etm(SSL *s, PACKET *pkt, int *al);",
          "180: int tls_parse_client_key_share(SSL *s, PACKET *pkt, int *al);",
          "181: int tls_parse_client_ems(SSL *s, PACKET *pkt, int *al);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6dd083fd6804a3ee6ac3adc019f81910f1c63f21",
      "candidate_info": {
        "commit_hash": "6dd083fd6804a3ee6ac3adc019f81910f1c63f21",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/6dd083fd6804a3ee6ac3adc019f81910f1c63f21",
        "files": [
          "include/openssl/ssl.h",
          "ssl/build.info",
          "ssl/d1_srtp.c",
          "ssl/ssl_err.c",
          "ssl/ssl_locl.h",
          "ssl/statem/extensions.c",
          "ssl/statem/extensions_clnt.c",
          "ssl/statem/extensions_srvr.c",
          "ssl/statem/statem_locl.h",
          "ssl/statem/statem_srvr.c",
          "ssl/t1_lib.c",
          "ssl/t1_reneg.c"
        ],
        "message": "Move client parsing of ServerHello extensions into new framework\n\nPerl changes reviewed by Richard Levitte. Non-perl changes reviewed by Rich\nSalz\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "ssl/build.info||ssl/build.info",
          "ssl/d1_srtp.c||ssl/d1_srtp.c",
          "ssl/ssl_err.c||ssl/ssl_err.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h",
          "ssl/statem/extensions.c||ssl/statem/extensions.c",
          "ssl/statem/extensions_clnt.c||ssl/statem/extensions_clnt.c",
          "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c",
          "ssl/statem/statem_locl.h||ssl/statem/statem_locl.h",
          "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c",
          "ssl/t1_lib.c||ssl/t1_lib.c",
          "ssl/t1_reneg.c||ssl/t1_reneg.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/ssl_locl.h||ssl/ssl_locl.h",
            "ssl/statem/extensions.c||ssl/statem/extensions.c",
            "ssl/statem/extensions_clnt.c||ssl/statem/extensions_clnt.c",
            "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c"
          ],
          "candidate": [
            "ssl/ssl_locl.h||ssl/ssl_locl.h",
            "ssl/statem/extensions.c||ssl/statem/extensions.c",
            "ssl/statem/extensions_clnt.c||ssl/statem/extensions_clnt.c",
            "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c"
          ]
        }
      },
      "candidate_diff": {
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2297: # define SSL_F_TLS_PARSE_CLIENT_KEY_SHARE                 445",
          "2298: # define SSL_F_TLS_PARSE_CLIENT_RENEGOTIATE               448",
          "2299: # define SSL_F_TLS_PARSE_CLIENT_USE_SRTP                  446",
          "2300: # define SSL_F_TLS_POST_PROCESS_CLIENT_HELLO              378",
          "2301: # define SSL_F_TLS_POST_PROCESS_CLIENT_KEY_EXCHANGE       384",
          "2302: # define SSL_F_TLS_PREPARE_CLIENT_CERTIFICATE             360",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2300: # define SSL_F_TLS_PARSE_SERVER_KEY_SHARE                 463",
          "2301: # define SSL_F_TLS_PARSE_SERVER_RENEGOTIATE               464",
          "2302: # define SSL_F_TLS_PARSE_SERVER_USE_SRTP                  465",
          "",
          "---------------"
        ],
        "ssl/build.info||ssl/build.info": [
          "File: ssl/build.info -> ssl/build.info",
          "--- Hunk 1 ---",
          "[Context before]",
          "3:         pqueue.c packet.c \\",
          "4:         statem/statem_srvr.c statem/statem_clnt.c  s3_lib.c  s3_enc.c record/rec_layer_s3.c \\",
          "5:         statem/statem_lib.c statem/extensions.c statem/extensions_srvr.c \\",
          "7:         methods.c   t1_lib.c  t1_enc.c tls13_enc.c t1_ext.c \\",
          "8:         d1_lib.c  record/rec_layer_d1.c d1_msg.c \\",
          "9:         statem/statem_dtls.c d1_srtp.c \\",
          "10:         ssl_lib.c ssl_cert.c ssl_sess.c \\",
          "11:         ssl_ciph.c ssl_stat.c ssl_rsa.c \\",
          "12:         ssl_asn1.c ssl_txt.c ssl_init.c ssl_conf.c  ssl_mcnf.c \\",
          "14:         record/ssl3_buffer.c record/ssl3_record.c record/dtls1_bitmap.c \\",
          "15:         statem/statem.c record/ssl3_record_tls13.c",
          "",
          "[Removed Lines]",
          "6:         s3_cbc.c s3_msg.c \\",
          "13:         bio_ssl.c ssl_err.c t1_reneg.c tls_srp.c t1_trce.c ssl_utst.c \\",
          "",
          "[Added Lines]",
          "6:         statem/extensions_clnt.c s3_cbc.c s3_msg.c \\",
          "13:         bio_ssl.c ssl_err.c tls_srp.c t1_trce.c ssl_utst.c \\",
          "",
          "---------------"
        ],
        "ssl/d1_srtp.c||ssl/d1_srtp.c": [
          "File: ssl/d1_srtp.c -> ssl/d1_srtp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "136: {",
          "137:     return s->srtp_profile;",
          "138: }",
          "196: #endif",
          "",
          "[Removed Lines]",
          "140: int ssl_parse_serverhello_use_srtp_ext(SSL *s, PACKET *pkt, int *al)",
          "141: {",
          "142:     unsigned int id, ct, mki;",
          "143:     int i;",
          "145:     STACK_OF(SRTP_PROTECTION_PROFILE) *clnt;",
          "146:     SRTP_PROTECTION_PROFILE *prof;",
          "148:     if (!PACKET_get_net_2(pkt, &ct)",
          "149:         || ct != 2 || !PACKET_get_net_2(pkt, &id)",
          "150:         || !PACKET_get_1(pkt, &mki)",
          "151:         || PACKET_remaining(pkt) != 0) {",
          "152:         SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT,",
          "153:                SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);",
          "155:         return 1;",
          "156:     }",
          "158:     if (mki != 0) {",
          "160:         SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT,",
          "161:                SSL_R_BAD_SRTP_MKI_VALUE);",
          "163:         return 1;",
          "164:     }",
          "166:     clnt = SSL_get_srtp_profiles(s);",
          "169:     if (clnt == NULL) {",
          "170:         SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT,",
          "171:                SSL_R_NO_SRTP_PROFILES);",
          "173:         return 1;",
          "174:     }",
          "180:     for (i = 0; i < sk_SRTP_PROTECTION_PROFILE_num(clnt); i++) {",
          "181:         prof = sk_SRTP_PROTECTION_PROFILE_value(clnt, i);",
          "183:         if (prof->id == id) {",
          "184:             s->srtp_profile = prof;",
          "186:             return 0;",
          "187:         }",
          "188:     }",
          "190:     SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT,",
          "191:            SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);",
          "193:     return 1;",
          "194: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "319:     {ERR_FUNC(SSL_F_TLS_PARSE_CLIENT_RENEGOTIATE),",
          "320:      \"tls_parse_client_renegotiate\"},",
          "321:     {ERR_FUNC(SSL_F_TLS_PARSE_CLIENT_USE_SRTP), \"tls_parse_client_use_srtp\"},",
          "322:     {ERR_FUNC(SSL_F_TLS_POST_PROCESS_CLIENT_HELLO),",
          "323:      \"tls_post_process_client_hello\"},",
          "324:     {ERR_FUNC(SSL_F_TLS_POST_PROCESS_CLIENT_KEY_EXCHANGE),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "322:     {ERR_FUNC(SSL_F_TLS_PARSE_SERVER_KEY_SHARE),",
          "323:      \"tls_parse_server_key_share\"},",
          "324:     {ERR_FUNC(SSL_F_TLS_PARSE_SERVER_RENEGOTIATE),",
          "325:      \"tls_parse_server_renegotiate\"},",
          "326:     {ERR_FUNC(SSL_F_TLS_PARSE_SERVER_USE_SRTP), \"tls_parse_server_use_srtp\"},",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2118: __owur EVP_MD_CTX *ssl_replace_hash(EVP_MD_CTX **hash, const EVP_MD *md);",
          "2119: void ssl_clear_hash_ctx(EVP_MD_CTX **hash);",
          "2121: __owur long ssl_get_algorithm2(SSL *s);",
          "2122: __owur int tls12_copy_sigalgs(SSL *s, WPACKET *pkt,",
          "2123:                               const unsigned char *psig, size_t psiglen);",
          "",
          "[Removed Lines]",
          "2120: __owur int ssl_parse_serverhello_renegotiate_ext(SSL *s, PACKET *pkt, int *al);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2129: void ssl_set_client_disabled(SSL *s);",
          "2130: __owur int ssl_cipher_disabled(SSL *s, const SSL_CIPHER *c, int op);",
          "2134: __owur int ssl_handshake_hash(SSL *s, unsigned char *out, size_t outlen,",
          "2135:                                  size_t *hashlen);",
          "2136: __owur const EVP_MD *ssl_md(int idx);",
          "",
          "[Removed Lines]",
          "2132: __owur int ssl_parse_serverhello_use_srtp_ext(SSL *s, PACKET *pkt, int *al);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/statem/extensions.c||ssl/statem/extensions.c": [
          "File: ssl/statem/extensions.c -> ssl/statem/extensions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: typedef struct {",
          "16:     unsigned int type;",
          "21:     unsigned int context;",
          "22: } EXTENSION_DEFINITION;",
          "",
          "[Removed Lines]",
          "17:     int (*server_parse)(SSL *s, PACKET *pkt, int *al);",
          "18:     int (*client_parse)(SSL *s, PACKET *pkt, int *al);",
          "19:     int (*server_construct)(SSL *s, WPACKET *pkt, int *al);",
          "20:     int (*client_construct)(SSL *s, WPACKET *pkt, int *al);",
          "",
          "[Added Lines]",
          "18:     int (*parse_client_ext)(SSL *s, PACKET *pkt, int *al);",
          "20:     int (*parse_server_ext)(SSL *s, PACKET *pkt, int *al);",
          "22:     int (*construct_server_ext)(SSL *s, WPACKET *pkt, int *al);",
          "24:     int (*construct_client_ext)(SSL *s, WPACKET *pkt, int *al);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:     {",
          "31:         TLSEXT_TYPE_renegotiate,",
          "32:         tls_parse_client_renegotiate,",
          "34:         tls_construct_server_renegotiate,",
          "35:         NULL,",
          "36:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_SSL3_ALLOWED",
          "",
          "[Removed Lines]",
          "33:         NULL,",
          "",
          "[Added Lines]",
          "37:         tls_parse_server_renegotiate,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "39:     {",
          "40:         TLSEXT_TYPE_server_name,",
          "41:         tls_parse_client_server_name,",
          "43:         tls_construct_server_server_name,",
          "44:         NULL,",
          "45:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "47:     },",
          "48: #ifndef OPENSSL_NO_SRP",
          "49:     {",
          "",
          "[Removed Lines]",
          "42:         NULL,",
          "46:         | /*EXT_TLS1_3_ENCRYPTED_EXTENSIONS*/EXT_TLS1_3_SERVER_HELLO",
          "",
          "[Added Lines]",
          "46:         tls_parse_server_server_name,",
          "50:         | EXT_TLS1_3_ENCRYPTED_EXTENSIONS",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "59:     {",
          "60:         TLSEXT_TYPE_ec_point_formats,",
          "61:         tls_parse_client_ec_pt_formats,",
          "63:         tls_construct_server_ec_pt_formats,",
          "64:         NULL,",
          "65:         EXT_CLIENT_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "",
          "[Removed Lines]",
          "62:         NULL,",
          "",
          "[Added Lines]",
          "66:         tls_parse_server_ec_pt_formats,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "71:         NULL /* TODO(TLS1.3): Need to add this */,",
          "72:         NULL,",
          "73:         EXT_CLIENT_HELLO",
          "75:     },",
          "76: #endif",
          "77:     {",
          "78:         TLSEXT_TYPE_session_ticket,",
          "79:         tls_parse_client_session_ticket,",
          "81:         tls_construct_server_session_ticket,",
          "82:         NULL,",
          "83:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "",
          "[Removed Lines]",
          "74:         | /*EXT_TLS1_3_ENCRYPTED_EXTENSIONS*/EXT_TLS1_3_SERVER_HELLO",
          "80:         NULL,",
          "",
          "[Added Lines]",
          "78:         | EXT_TLS1_3_ENCRYPTED_EXTENSIONS",
          "84:         tls_parse_server_session_ticket,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "93:     {",
          "94:         TLSEXT_TYPE_status_request,",
          "95:         tls_parse_client_status_request,",
          "97:         tls_construct_server_status_request,",
          "98:         NULL,",
          "99:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "101:     },",
          "102: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "103:     {",
          "104:         TLSEXT_TYPE_next_proto_neg,",
          "105:         tls_parse_client_npn,",
          "107:         tls_construct_server_next_proto_neg,",
          "108:         NULL,",
          "109:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "",
          "[Removed Lines]",
          "96:         NULL,",
          "100:         | /*EXT_TLS1_3_CERTIFICATE*/EXT_TLS1_3_SERVER_HELLO",
          "106:         NULL,",
          "",
          "[Added Lines]",
          "100:         tls_parse_server_status_request,",
          "104:         | EXT_TLS1_3_CERTIFICATE",
          "110:         tls_parse_server_npn,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "112:     {",
          "113:         TLSEXT_TYPE_application_layer_protocol_negotiation,",
          "114:         tls_parse_client_alpn,",
          "116:         tls_construct_server_alpn,",
          "117:         NULL,",
          "118:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "120:     },",
          "121: #ifndef OPENSSL_NO_SRTP",
          "122:     {",
          "123:         TLSEXT_TYPE_use_srtp,",
          "124:         tls_parse_client_use_srtp,",
          "126:         tls_construct_server_use_srtp,",
          "127:         NULL,",
          "128:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "",
          "[Removed Lines]",
          "115:         NULL,",
          "119:         | /*EXT_TLS1_3_ENCRYPTED_EXTENSIONS*/EXT_TLS1_3_SERVER_HELLO",
          "125:         NULL,",
          "",
          "[Added Lines]",
          "119:         tls_parse_server_alpn,",
          "123:         | EXT_TLS1_3_ENCRYPTED_EXTENSIONS",
          "129:         tls_parse_server_use_srtp,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "132:     {",
          "133:         TLSEXT_TYPE_encrypt_then_mac,",
          "134:         tls_parse_client_etm,",
          "136:         tls_construct_server_etm,",
          "137:         NULL,",
          "138:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "139:     },",
          "140:     {",
          "141:         TLSEXT_TYPE_signed_certificate_timestamp,",
          "",
          "[Removed Lines]",
          "135:         NULL,",
          "",
          "[Added Lines]",
          "139:         tls_parse_server_etm,",
          "144: #ifndef OPENSSL_NO_CT",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "147:         NULL,",
          "149:         NULL,",
          "150:         NULL,",
          "151:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "153:     },",
          "154:     {",
          "155:         TLSEXT_TYPE_extended_master_secret,",
          "156:         tls_parse_client_ems,",
          "158:         tls_construct_server_ems,",
          "159:         NULL,",
          "160:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "",
          "[Removed Lines]",
          "148:         NULL,",
          "152:         | /*EXT_TLS1_3_CERTIFICATE*/EXT_TLS1_3_SERVER_HELLO",
          "157:         NULL,",
          "",
          "[Added Lines]",
          "153:         tls_parse_server_sct,",
          "157:         | EXT_TLS1_3_CERTIFICATE",
          "159: #endif",
          "163:         tls_parse_server_ems,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "180:     {",
          "181:         TLSEXT_TYPE_key_share,",
          "182:         tls_parse_client_key_share,",
          "184:         tls_construct_server_key_share,",
          "185:         NULL,",
          "186:         EXT_CLIENT_HELLO | EXT_TLS1_3_SERVER_HELLO",
          "",
          "[Removed Lines]",
          "183:         NULL,",
          "",
          "[Added Lines]",
          "189:         tls_parse_server_key_share,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "376:         int (*parser)(SSL *s, PACKET *pkt, int *al) = NULL;",
          "378:         if (s->tlsext_debug_cb)",
          "380:                                PACKET_data(&currext->data),",
          "381:                                PACKET_remaining(&currext->data),",
          "382:                                s->tlsext_debug_arg);",
          "",
          "[Removed Lines]",
          "379:             s->tlsext_debug_cb(s, 0, currext->type,",
          "",
          "[Added Lines]",
          "382:             s->tlsext_debug_cb(s, !s->server, currext->type,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "390:         parser = NULL;",
          "391:         if (find_extension_definition(s, currext->type, &extdef)) {",
          "395:             if ((SSL_IS_DTLS(s)",
          "",
          "[Removed Lines]",
          "392:             parser = s->server ? extdef->server_parse : extdef->client_parse;",
          "",
          "[Added Lines]",
          "395:             parser = s->server ? extdef->parse_client_ext",
          "396:                                : extdef->parse_server_ext;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "480:         if ((ext_defs[loop].context & context) == 0)",
          "481:             continue;",
          "487:         if ((SSL_IS_DTLS(s)",
          "",
          "[Removed Lines]",
          "483:         construct = s->server ? ext_defs[loop].server_construct",
          "484:                               : ext_defs[loop].client_construct;",
          "",
          "[Added Lines]",
          "487:         construct = s->server ? ext_defs[loop].construct_server_ext",
          "488:                               : ext_defs[loop].construct_client_ext;",
          "",
          "---------------"
        ],
        "ssl/statem/extensions_clnt.c||ssl/statem/extensions_clnt.c": [
          "File: ssl/statem/extensions_clnt.c -> ssl/statem/extensions_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: #include <assert.h>",
          "11: #include \"../ssl_locl.h\"",
          "12: #include \"statem_locl.h\"",
          "17: int tls_parse_server_renegotiate(SSL *s, PACKET *pkt, int *al)",
          "18: {",
          "19:     size_t expected_len = s->s3->previous_client_finished_len",
          "20:         + s->s3->previous_server_finished_len;",
          "21:     size_t ilen;",
          "22:     const unsigned char *data;",
          "25:     assert(expected_len == 0 || s->s3->previous_client_finished_len != 0);",
          "26:     assert(expected_len == 0 || s->s3->previous_server_finished_len != 0);",
          "29:     if (!PACKET_get_1_len(pkt, &ilen)) {",
          "30:         SSLerr(SSL_F_TLS_PARSE_SERVER_RENEGOTIATE,",
          "31:                SSL_R_RENEGOTIATION_ENCODING_ERR);",
          "33:         return 0;",
          "34:     }",
          "37:     if (PACKET_remaining(pkt) != ilen) {",
          "38:         SSLerr(SSL_F_TLS_PARSE_SERVER_RENEGOTIATE,",
          "39:                SSL_R_RENEGOTIATION_ENCODING_ERR);",
          "41:         return 0;",
          "42:     }",
          "45:     if (ilen != expected_len) {",
          "46:         SSLerr(SSL_F_TLS_PARSE_SERVER_RENEGOTIATE,",
          "47:                SSL_R_RENEGOTIATION_MISMATCH);",
          "49:         return 0;",
          "50:     }",
          "52:     if (!PACKET_get_bytes(pkt, &data, s->s3->previous_client_finished_len)",
          "53:         || memcmp(data, s->s3->previous_client_finished,",
          "54:                   s->s3->previous_client_finished_len) != 0) {",
          "55:         SSLerr(SSL_F_TLS_PARSE_SERVER_RENEGOTIATE,",
          "56:                SSL_R_RENEGOTIATION_MISMATCH);",
          "58:         return 0;",
          "59:     }",
          "61:     if (!PACKET_get_bytes(pkt, &data, s->s3->previous_server_finished_len)",
          "62:         || memcmp(data, s->s3->previous_server_finished,",
          "63:                   s->s3->previous_server_finished_len) != 0) {",
          "64:         SSLerr(SSL_F_TLS_PARSE_SERVER_RENEGOTIATE,",
          "65:                SSL_R_RENEGOTIATION_MISMATCH);",
          "67:         return 0;",
          "68:     }",
          "69:     s->s3->send_connection_binding = 1;",
          "71:     return 1;",
          "72: }",
          "74: int tls_parse_server_server_name(SSL *s, PACKET *pkt, int *al)",
          "75: {",
          "76:     if (s->tlsext_hostname == NULL || PACKET_remaining(pkt) > 0) {",
          "78:         return 0;",
          "79:     }",
          "81:     if (!s->hit) {",
          "82:         if (s->session->tlsext_hostname != NULL) {",
          "84:             return 0;",
          "85:         }",
          "86:         s->session->tlsext_hostname = OPENSSL_strdup(s->tlsext_hostname);",
          "87:         if (s->session->tlsext_hostname == NULL) {",
          "89:             return 0;",
          "90:         }",
          "91:     }",
          "93:     return 1;",
          "94: }",
          "96: #ifndef OPENSSL_NO_EC",
          "97: int tls_parse_server_ec_pt_formats(SSL *s, PACKET *pkt, int *al)",
          "98: {",
          "99:     unsigned int ecpointformatlist_length;",
          "100:     PACKET ecptformatlist;",
          "102:     if (!PACKET_as_length_prefixed_1(pkt, &ecptformatlist)) {",
          "104:         return 0;",
          "105:     }",
          "106:     if (!s->hit) {",
          "107:         ecpointformatlist_length = PACKET_remaining(&ecptformatlist);",
          "108:         s->session->tlsext_ecpointformatlist_length = 0;",
          "110:         OPENSSL_free(s->session->tlsext_ecpointformatlist);",
          "111:         s->session->tlsext_ecpointformatlist =",
          "112:              OPENSSL_malloc(ecpointformatlist_length);",
          "113:         if (s->session->tlsext_ecpointformatlist == NULL) {",
          "115:             return 0;",
          "116:         }",
          "118:         s->session->tlsext_ecpointformatlist_length = ecpointformatlist_length;",
          "120:         if (!PACKET_copy_bytes(&ecptformatlist,",
          "121:                                s->session->tlsext_ecpointformatlist,",
          "122:                                ecpointformatlist_length)) {",
          "124:             return 0;",
          "125:         }",
          "126:     }",
          "128:     return 1;",
          "129: }",
          "130: #endif",
          "132: int tls_parse_server_session_ticket(SSL *s, PACKET *pkt, int *al)",
          "133: {",
          "134:     if (s->tls_session_ticket_ext_cb &&",
          "135:         !s->tls_session_ticket_ext_cb(s, PACKET_data(pkt),",
          "136:                                       PACKET_remaining(pkt),",
          "137:                                       s->tls_session_ticket_ext_cb_arg)) {",
          "139:         return 0;",
          "140:     }",
          "141:     if (!tls_use_ticket(s) || PACKET_remaining(pkt) > 0) {",
          "143:         return 0;",
          "144:     }",
          "145:     s->tlsext_ticket_expected = 1;",
          "147:     return 1;",
          "148: }",
          "150: int tls_parse_server_status_request(SSL *s, PACKET *pkt, int *al)",
          "151: {",
          "156:     if (s->tlsext_status_type == -1 || PACKET_remaining(pkt) > 0) {",
          "158:         return 0;",
          "159:     }",
          "161:     s->tlsext_status_expected = 1;",
          "163:     return 1;",
          "164: }",
          "167: #ifndef OPENSSL_NO_CT",
          "168: int tls_parse_server_sct(SSL *s, PACKET *pkt, int *al)",
          "169: {",
          "175:     if (s->ct_validation_callback != NULL) {",
          "176:         size_t size = PACKET_remaining(pkt);",
          "179:         if (s->tlsext_scts != NULL) {",
          "180:             OPENSSL_free(s->tlsext_scts);",
          "181:             s->tlsext_scts = NULL;",
          "182:         }",
          "183:         s->tlsext_scts_len = size;",
          "184:         if (size > 0) {",
          "185:             s->tlsext_scts = OPENSSL_malloc(size);",
          "186:             if (s->tlsext_scts == NULL",
          "187:                     || !PACKET_copy_bytes(pkt, s->tlsext_scts, size)) {",
          "189:                 return 0;",
          "190:             }",
          "191:         }",
          "192:     } else {",
          "193:         if (custom_ext_parse(s, 0, TLSEXT_TYPE_signed_certificate_timestamp,",
          "194:                              PACKET_data(pkt), PACKET_remaining(pkt), al) <= 0)",
          "195:             return 0;",
          "196:     }",
          "198:     return 1;",
          "199: }",
          "200: #endif",
          "203: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "209: static int ssl_next_proto_validate(PACKET *pkt)",
          "210: {",
          "211:     PACKET tmp_protocol;",
          "213:     while (PACKET_remaining(pkt)) {",
          "214:         if (!PACKET_get_length_prefixed_1(pkt, &tmp_protocol)",
          "215:             || PACKET_remaining(&tmp_protocol) == 0)",
          "216:             return 0;",
          "217:     }",
          "219:     return 1;",
          "220: }",
          "222: int tls_parse_server_npn(SSL *s, PACKET *pkt, int *al)",
          "223: {",
          "224:     unsigned char *selected;",
          "225:     unsigned char selected_len;",
          "226:     PACKET tmppkt;",
          "228:     if (s->s3->tmp.finish_md_len != 0)",
          "229:         return 1;",
          "232:     if (s->ctx->next_proto_select_cb == NULL) {",
          "234:         return 0;",
          "235:     }",
          "237:     tmppkt = *pkt;",
          "238:     if (!ssl_next_proto_validate(&tmppkt)) {",
          "240:         return 0;",
          "241:     }",
          "242:     if (s->ctx->next_proto_select_cb(s, &selected, &selected_len,",
          "243:                                      PACKET_data(pkt),",
          "244:                                      PACKET_remaining(pkt),",
          "245:                                      s->ctx->next_proto_select_cb_arg) !=",
          "246:              SSL_TLSEXT_ERR_OK) {",
          "248:         return 0;",
          "249:     }",
          "254:     OPENSSL_free(s->next_proto_negotiated);",
          "255:     s->next_proto_negotiated = OPENSSL_malloc(selected_len);",
          "256:     if (s->next_proto_negotiated == NULL) {",
          "258:         return 0;",
          "259:     }",
          "261:     memcpy(s->next_proto_negotiated, selected, selected_len);",
          "262:     s->next_proto_negotiated_len = selected_len;",
          "263:     s->s3->next_proto_neg_seen = 1;",
          "265:     return 1;",
          "266: }",
          "267: #endif",
          "269: int tls_parse_server_alpn(SSL *s, PACKET *pkt, int *al)",
          "270: {",
          "271:     size_t len;",
          "274:     if (!s->s3->alpn_sent) {",
          "276:         return 0;",
          "277:     }",
          "284:     if (!PACKET_get_net_2_len(pkt, &len)",
          "285:         || PACKET_remaining(pkt) != len || !PACKET_get_1_len(pkt, &len)",
          "286:         || PACKET_remaining(pkt) != len) {",
          "288:         return 0;",
          "289:     }",
          "290:     OPENSSL_free(s->s3->alpn_selected);",
          "291:     s->s3->alpn_selected = OPENSSL_malloc(len);",
          "292:     if (s->s3->alpn_selected == NULL) {",
          "294:         return 0;",
          "295:     }",
          "296:     if (!PACKET_copy_bytes(pkt, s->s3->alpn_selected, len)) {",
          "298:         return 0;",
          "299:     }",
          "300:     s->s3->alpn_selected_len = len;",
          "302:     return 1;",
          "303: }",
          "305: #ifndef OPENSSL_NO_SRTP",
          "306: int tls_parse_server_use_srtp(SSL *s, PACKET *pkt, int *al)",
          "307: {",
          "308:     unsigned int id, ct, mki;",
          "309:     int i;",
          "310:     STACK_OF(SRTP_PROTECTION_PROFILE) *clnt;",
          "311:     SRTP_PROTECTION_PROFILE *prof;",
          "313:     if (!PACKET_get_net_2(pkt, &ct)",
          "314:         || ct != 2 || !PACKET_get_net_2(pkt, &id)",
          "315:         || !PACKET_get_1(pkt, &mki)",
          "316:         || PACKET_remaining(pkt) != 0) {",
          "317:         SSLerr(SSL_F_TLS_PARSE_SERVER_USE_SRTP,",
          "318:                SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);",
          "320:         return 0;",
          "321:     }",
          "323:     if (mki != 0) {",
          "325:         SSLerr(SSL_F_TLS_PARSE_SERVER_USE_SRTP, SSL_R_BAD_SRTP_MKI_VALUE);",
          "327:         return 0;",
          "328:     }",
          "330:     clnt = SSL_get_srtp_profiles(s);",
          "333:     if (clnt == NULL) {",
          "334:         SSLerr(SSL_F_TLS_PARSE_SERVER_USE_SRTP, SSL_R_NO_SRTP_PROFILES);",
          "336:         return 0;",
          "337:     }",
          "343:     for (i = 0; i < sk_SRTP_PROTECTION_PROFILE_num(clnt); i++) {",
          "344:         prof = sk_SRTP_PROTECTION_PROFILE_value(clnt, i);",
          "346:         if (prof->id == id) {",
          "347:             s->srtp_profile = prof;",
          "349:             return 1;",
          "350:         }",
          "351:     }",
          "353:     SSLerr(SSL_F_TLS_PARSE_SERVER_USE_SRTP,",
          "354:            SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);",
          "356:     return 0;",
          "357: }",
          "358: #endif",
          "360: int tls_parse_server_etm(SSL *s, PACKET *pkt, int *al)",
          "361: {",
          "363:     if (!(s->options & SSL_OP_NO_ENCRYPT_THEN_MAC)",
          "364:             && s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD",
          "365:             && s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)",
          "366:         s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "368:     return 1;",
          "369: }",
          "371: int tls_parse_server_ems(SSL *s, PACKET *pkt, int *al)",
          "372: {",
          "373:     s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;",
          "374:     if (!s->hit)",
          "375:         s->session->flags |= SSL_SESS_FLAG_EXTMS;",
          "377:     return 1;",
          "378: }",
          "380: int tls_parse_server_key_share(SSL *s, PACKET *pkt, int *al)",
          "381: {",
          "382:     unsigned int group_id;",
          "383:     PACKET encoded_pt;",
          "384:     EVP_PKEY *ckey = s->s3->tmp.pkey, *skey = NULL;",
          "387:     if (ckey == NULL) {",
          "389:         SSLerr(SSL_F_TLS_PARSE_SERVER_KEY_SHARE, ERR_R_INTERNAL_ERROR);",
          "390:         return 0;",
          "391:     }",
          "393:     if (!PACKET_get_net_2(pkt, &group_id)) {",
          "395:         SSLerr(SSL_F_TLS_PARSE_SERVER_KEY_SHARE, SSL_R_LENGTH_MISMATCH);",
          "396:         return 0;",
          "397:     }",
          "399:     if (group_id != s->s3->group_id) {",
          "405:         SSLerr(SSL_F_TLS_PARSE_SERVER_KEY_SHARE, SSL_R_BAD_KEY_SHARE);",
          "406:         return 0;",
          "407:     }",
          "409:     if (!PACKET_as_length_prefixed_2(pkt, &encoded_pt)",
          "410:             || PACKET_remaining(&encoded_pt) == 0) {",
          "412:         SSLerr(SSL_F_TLS_PARSE_SERVER_KEY_SHARE, SSL_R_LENGTH_MISMATCH);",
          "413:         return 0;",
          "414:     }",
          "416:     skey = ssl_generate_pkey(ckey);",
          "417:     if (skey == NULL) {",
          "419:         SSLerr(SSL_F_TLS_PARSE_SERVER_KEY_SHARE, ERR_R_MALLOC_FAILURE);",
          "420:         return 0;",
          "421:     }",
          "422:     if (!EVP_PKEY_set1_tls_encodedpoint(skey, PACKET_data(&encoded_pt),",
          "423:                                         PACKET_remaining(&encoded_pt))) {",
          "425:         SSLerr(SSL_F_TLS_PARSE_SERVER_KEY_SHARE, SSL_R_BAD_ECPOINT);",
          "426:         return 0;",
          "427:     }",
          "429:     if (ssl_derive(s, ckey, skey, 1) == 0) {",
          "431:         SSLerr(SSL_F_TLS_PARSE_SERVER_KEY_SHARE, ERR_R_INTERNAL_ERROR);",
          "432:         EVP_PKEY_free(skey);",
          "433:         return 0;",
          "434:     }",
          "435:     EVP_PKEY_free(skey);",
          "437:     return 1;",
          "438: }",
          "440: static int ssl_scan_serverhello_tlsext(SSL *s, PACKET *pkt, int *al)",
          "441: {",
          "442:     size_t num_extensions = 0;",
          "443:     RAW_EXTENSION *extensions = NULL;",
          "444:     PACKET extpkt;",
          "446: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "447:     s->s3->next_proto_neg_seen = 0;",
          "448: #endif",
          "449:     s->tlsext_ticket_expected = 0;",
          "451:     OPENSSL_free(s->s3->alpn_selected);",
          "452:     s->s3->alpn_selected = NULL;",
          "454:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "456:     s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;",
          "458:     if (!PACKET_as_length_prefixed_2(pkt, &extpkt)) {",
          "460:         if (s->version != SSL3_VERSION || PACKET_remaining(pkt) != 0) {",
          "462:             SSLerr(SSL_F_SSL_SCAN_SERVERHELLO_TLSEXT, SSL_R_BAD_LENGTH);",
          "463:             return 0;",
          "464:         }",
          "465:         PACKET_null_init(&extpkt);",
          "466:     }",
          "473:     if (!tls_collect_extensions(s, &extpkt, EXT_TLS1_2_SERVER_HELLO",
          "474:                                             | EXT_TLS1_3_SERVER_HELLO",
          "475:                                             | EXT_TLS1_3_ENCRYPTED_EXTENSIONS",
          "476:                                             | EXT_TLS1_3_CERTIFICATE,",
          "477:                                 &extensions, &num_extensions, al))",
          "478:         return 0;",
          "487:     if (!(s->options & SSL_OP_LEGACY_SERVER_CONNECT)",
          "488:             && !(s->options & SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION)",
          "489:             && tls_get_extension_by_type(extensions, num_extensions,",
          "490:                                          TLSEXT_TYPE_renegotiate) == NULL) {",
          "492:         SSLerr(SSL_F_SSL_SCAN_SERVERHELLO_TLSEXT,",
          "493:                SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED);",
          "494:         return 0;",
          "495:     }",
          "497:     if (!tls_parse_all_extensions(s, EXT_TLS1_2_SERVER_HELLO",
          "498:                                      | EXT_TLS1_3_SERVER_HELLO",
          "499:                                      | EXT_TLS1_3_ENCRYPTED_EXTENSIONS",
          "500:                                      | EXT_TLS1_3_CERTIFICATE,",
          "501:                                   extensions, num_extensions, al))",
          "502:         return 0;",
          "504:     if (s->hit) {",
          "509:         if (!(s->s3->flags & TLS1_FLAGS_RECEIVED_EXTMS) !=",
          "510:             !(s->session->flags & SSL_SESS_FLAG_EXTMS)) {",
          "512:             SSLerr(SSL_F_SSL_SCAN_SERVERHELLO_TLSEXT, SSL_R_INCONSISTENT_EXTMS);",
          "513:             return 0;",
          "514:         }",
          "515:     }",
          "517:     return 1;",
          "518: }",
          "520: static int ssl_check_serverhello_tlsext(SSL *s)",
          "521: {",
          "522:     int ret = SSL_TLSEXT_ERR_NOACK;",
          "523:     int al = SSL_AD_UNRECOGNIZED_NAME;",
          "525: #ifndef OPENSSL_NO_EC",
          "531:     unsigned long alg_k = s->s3->tmp.new_cipher->algorithm_mkey;",
          "532:     unsigned long alg_a = s->s3->tmp.new_cipher->algorithm_auth;",
          "533:     if ((s->tlsext_ecpointformatlist != NULL)",
          "534:         && (s->tlsext_ecpointformatlist_length > 0)",
          "535:         && (s->session->tlsext_ecpointformatlist != NULL)",
          "536:         && (s->session->tlsext_ecpointformatlist_length > 0)",
          "537:         && ((alg_k & SSL_kECDHE) || (alg_a & SSL_aECDSA))) {",
          "539:         size_t i;",
          "540:         unsigned char *list;",
          "541:         int found_uncompressed = 0;",
          "542:         list = s->session->tlsext_ecpointformatlist;",
          "543:         for (i = 0; i < s->session->tlsext_ecpointformatlist_length; i++) {",
          "544:             if (*(list++) == TLSEXT_ECPOINTFORMAT_uncompressed) {",
          "545:                 found_uncompressed = 1;",
          "546:                 break;",
          "547:             }",
          "548:         }",
          "549:         if (!found_uncompressed) {",
          "550:             SSLerr(SSL_F_SSL_CHECK_SERVERHELLO_TLSEXT,",
          "551:                    SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST);",
          "552:             return -1;",
          "553:         }",
          "554:     }",
          "555:     ret = SSL_TLSEXT_ERR_OK;",
          "558:     if (s->ctx != NULL && s->ctx->tlsext_servername_callback != 0)",
          "559:         ret =",
          "560:             s->ctx->tlsext_servername_callback(s, &al,",
          "561:                                                s->ctx->tlsext_servername_arg);",
          "562:     else if (s->initial_ctx != NULL",
          "563:              && s->initial_ctx->tlsext_servername_callback != 0)",
          "564:         ret =",
          "565:             s->initial_ctx->tlsext_servername_callback(s, &al,",
          "566:                                                        s->",
          "567:                                                        initial_ctx->tlsext_servername_arg);",
          "573:     OPENSSL_free(s->tlsext_ocsp_resp);",
          "574:     s->tlsext_ocsp_resp = NULL;",
          "575:     s->tlsext_ocsp_resplen = 0;",
          "577:     switch (ret) {",
          "578:     case SSL_TLSEXT_ERR_ALERT_FATAL:",
          "579:         ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "580:         return -1;",
          "582:     case SSL_TLSEXT_ERR_ALERT_WARNING:",
          "583:         ssl3_send_alert(s, SSL3_AL_WARNING, al);",
          "584:         return 1;",
          "586:     case SSL_TLSEXT_ERR_NOACK:",
          "587:         s->servername_done = 0;",
          "588:     default:",
          "589:         return 1;",
          "590:     }",
          "591: }",
          "593: int ssl_parse_serverhello_tlsext(SSL *s, PACKET *pkt)",
          "594: {",
          "595:     int al = -1;",
          "596:     if (s->version < SSL3_VERSION)",
          "597:         return 1;",
          "598:     if (ssl_scan_serverhello_tlsext(s, pkt, &al) <= 0) {",
          "599:         ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "600:         return 0;",
          "601:     }",
          "603:     if (ssl_check_serverhello_tlsext(s) <= 0) {",
          "604:         SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_TLSEXT, SSL_R_SERVERHELLO_TLSEXT);",
          "605:         return 0;",
          "606:     }",
          "607:     return 1;",
          "608: }",
          "",
          "---------------"
        ],
        "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c": [
          "File: ssl/statem/extensions_srvr.c -> ssl/statem/extensions_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "648:     return 1;",
          "649: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "651: #ifndef OPENSSL_NO_EC",
          "665: static void ssl_check_for_safari(SSL *s, const CLIENTHELLO_MSG *hello)",
          "666: {",
          "667:     unsigned int type;",
          "668:     PACKET sni, tmppkt;",
          "669:     size_t ext_len;",
          "671:     static const unsigned char kSafariExtensionsBlock[] = {",
          "692:     };",
          "695:     static const size_t kSafariCommonExtensionsLength = 18;",
          "697:     tmppkt = hello->extensions;",
          "699:     if (!PACKET_forward(&tmppkt, 2)",
          "700:         || !PACKET_get_net_2(&tmppkt, &type)",
          "701:         || !PACKET_get_length_prefixed_2(&tmppkt, &sni)) {",
          "702:         return;",
          "703:     }",
          "705:     if (type != TLSEXT_TYPE_server_name)",
          "706:         return;",
          "708:     ext_len = TLS1_get_client_version(s) >= TLS1_2_VERSION ?",
          "709:         sizeof(kSafariExtensionsBlock) : kSafariCommonExtensionsLength;",
          "711:     s->s3->is_probably_safari = PACKET_equal(&tmppkt, kSafariExtensionsBlock,",
          "712:                                              ext_len);",
          "713: }",
          "725: int tls_scan_clienthello_tlsext(SSL *s, CLIENTHELLO_MSG *hello, int *al)",
          "726: {",
          "728:     s->servername_done = 0;",
          "729:     s->tlsext_status_type = -1;",
          "730: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "731:     s->s3->next_proto_neg_seen = 0;",
          "732: #endif",
          "734:     OPENSSL_free(s->s3->alpn_selected);",
          "735:     s->s3->alpn_selected = NULL;",
          "736:     s->s3->alpn_selected_len = 0;",
          "737:     OPENSSL_free(s->s3->alpn_proposed);",
          "738:     s->s3->alpn_proposed = NULL;",
          "739:     s->s3->alpn_proposed_len = 0;",
          "741: #ifndef OPENSSL_NO_EC",
          "742:     if (s->options & SSL_OP_SAFARI_ECDHE_ECDSA_BUG)",
          "743:         ssl_check_for_safari(s, hello);",
          "747:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
          "748:     s->s3->tmp.peer_sigalgs = NULL;",
          "749:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "751: #ifndef OPENSSL_NO_SRP",
          "752:     OPENSSL_free(s->srp_ctx.login);",
          "753:     s->srp_ctx.login = NULL;",
          "754: #endif",
          "756:     s->srtp_profile = NULL;",
          "762:     if (!tls_parse_extension(s, TLSEXT_TYPE_supported_groups, EXT_CLIENT_HELLO,",
          "763:                              hello->pre_proc_exts, hello->num_extensions, al)) {",
          "764:         return 0;",
          "765:     }",
          "768:     if (s->renegotiate",
          "769:             && !(s->options & SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION)",
          "770:             && tls_get_extension_by_type(hello->pre_proc_exts,",
          "771:                                          hello->num_extensions,",
          "772:                                          TLSEXT_TYPE_renegotiate) == NULL) {",
          "774:         SSLerr(SSL_F_TLS_SCAN_CLIENTHELLO_TLSEXT,",
          "775:                SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED);",
          "776:         return 0;",
          "777:     }",
          "779:     return tls_parse_all_extensions(s, EXT_CLIENT_HELLO, hello->pre_proc_exts,",
          "780:                                     hello->num_extensions, al);",
          "781: }",
          "",
          "---------------"
        ],
        "ssl/statem/statem_locl.h||ssl/statem/statem_locl.h": [
          "File: ssl/statem/statem_locl.h -> ssl/statem/statem_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "180: int tls_parse_client_key_share(SSL *s, PACKET *pkt, int *al);",
          "181: int tls_parse_client_ems(SSL *s, PACKET *pkt, int *al);",
          "183: int tls_construct_server_renegotiate(SSL *s, WPACKET *pkt, int *al);",
          "184: int tls_construct_server_server_name(SSL *s, WPACKET *pkt, int *al);",
          "185: int tls_construct_server_ec_pt_formats(SSL *s, WPACKET *pkt, int *al);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "183: int tls_scan_clienthello_tlsext(SSL *s, CLIENTHELLO_MSG *hello, int *al);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "191: int tls_construct_server_etm(SSL *s, WPACKET *pkt, int *al);",
          "192: int tls_construct_server_ems(SSL *s, WPACKET *pkt, int *al);",
          "193: int tls_construct_server_key_share(SSL *s, WPACKET *pkt, int *al);",
          "199: #define TLSEXT_TYPE_cryptopro_bug      0xfde8",
          "200: int tls_construct_server_cryptopro_bug(SSL *s, WPACKET *pkt, int *al);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204: int tls_parse_server_renegotiate(SSL *s, PACKET *pkt, int *al);",
          "205: int tls_parse_server_server_name(SSL *s, PACKET *pkt, int *al);",
          "206: #ifndef OPENSSL_NO_EC",
          "207: int tls_parse_server_ec_pt_formats(SSL *s, PACKET *pkt, int *al);",
          "208: #endif",
          "209: int tls_parse_server_session_ticket(SSL *s, PACKET *pkt, int *al);",
          "210: int tls_parse_server_status_request(SSL *s, PACKET *pkt, int *al);",
          "211: #ifndef OPENSSL_NO_CT",
          "212: int tls_parse_server_sct(SSL *s, PACKET *pkt, int *al);",
          "213: #endif",
          "214: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "215: int tls_parse_server_npn(SSL *s, PACKET *pkt, int *al);",
          "216: #endif",
          "217: int tls_parse_server_alpn(SSL *s, PACKET *pkt, int *al);",
          "218: #ifndef OPENSSL_NO_SRTP",
          "219: int tls_parse_server_use_srtp(SSL *s, PACKET *pkt, int *al);",
          "220: #endif",
          "221: int tls_parse_server_etm(SSL *s, PACKET *pkt, int *al);",
          "222: int tls_parse_server_ems(SSL *s, PACKET *pkt, int *al);",
          "223: int tls_parse_server_key_share(SSL *s, PACKET *pkt, int *al);",
          "224: int ssl_parse_serverhello_tlsext(SSL *s, PACKET *pkt);",
          "",
          "---------------"
        ],
        "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c": [
          "File: ssl/statem/statem_srvr.c -> ssl/statem/statem_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1062:     return 1;",
          "1063: }",
          "",
          "[Removed Lines]",
          "1065: #ifndef OPENSSL_NO_EC",
          "1079: static void ssl_check_for_safari(SSL *s, const CLIENTHELLO_MSG *hello)",
          "1080: {",
          "1081:     unsigned int type;",
          "1082:     PACKET sni, tmppkt;",
          "1083:     size_t ext_len;",
          "1085:     static const unsigned char kSafariExtensionsBlock[] = {",
          "1106:     };",
          "1109:     static const size_t kSafariCommonExtensionsLength = 18;",
          "1111:     tmppkt = hello->extensions;",
          "1113:     if (!PACKET_forward(&tmppkt, 2)",
          "1114:         || !PACKET_get_net_2(&tmppkt, &type)",
          "1115:         || !PACKET_get_length_prefixed_2(&tmppkt, &sni)) {",
          "1116:         return;",
          "1117:     }",
          "1119:     if (type != TLSEXT_TYPE_server_name)",
          "1120:         return;",
          "1122:     ext_len = TLS1_get_client_version(s) >= TLS1_2_VERSION ?",
          "1123:         sizeof(kSafariExtensionsBlock) : kSafariCommonExtensionsLength;",
          "1125:     s->s3->is_probably_safari = PACKET_equal(&tmppkt, kSafariExtensionsBlock,",
          "1126:                                              ext_len);",
          "1127: }",
          "1139: static int tls_scan_clienthello_tlsext(SSL *s, CLIENTHELLO_MSG *hello, int *al)",
          "1140: {",
          "1142:     s->servername_done = 0;",
          "1143:     s->tlsext_status_type = -1;",
          "1144: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "1145:     s->s3->next_proto_neg_seen = 0;",
          "1146: #endif",
          "1148:     OPENSSL_free(s->s3->alpn_selected);",
          "1149:     s->s3->alpn_selected = NULL;",
          "1150:     s->s3->alpn_selected_len = 0;",
          "1151:     OPENSSL_free(s->s3->alpn_proposed);",
          "1152:     s->s3->alpn_proposed = NULL;",
          "1153:     s->s3->alpn_proposed_len = 0;",
          "1155: #ifndef OPENSSL_NO_EC",
          "1156:     if (s->options & SSL_OP_SAFARI_ECDHE_ECDSA_BUG)",
          "1157:         ssl_check_for_safari(s, hello);",
          "1161:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
          "1162:     s->s3->tmp.peer_sigalgs = NULL;",
          "1163:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "1165: #ifndef OPENSSL_NO_SRP",
          "1166:     OPENSSL_free(s->srp_ctx.login);",
          "1167:     s->srp_ctx.login = NULL;",
          "1168: #endif",
          "1170:     s->srtp_profile = NULL;",
          "1176:     if (!tls_parse_extension(s, TLSEXT_TYPE_supported_groups, EXT_CLIENT_HELLO,",
          "1177:                              hello->pre_proc_exts, hello->num_extensions, al)) {",
          "1178:         return 0;",
          "1179:     }",
          "1182:     if (s->renegotiate",
          "1183:             && !(s->options & SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION)",
          "1184:             && tls_get_extension_by_type(hello->pre_proc_exts,",
          "1185:                                          hello->num_extensions,",
          "1186:                                          TLSEXT_TYPE_renegotiate) == NULL) {",
          "1188:         SSLerr(SSL_F_TLS_SCAN_CLIENTHELLO_TLSEXT,",
          "1189:                SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED);",
          "1190:         return 0;",
          "1191:     }",
          "1193:     return tls_parse_all_extensions(s, EXT_CLIENT_HELLO, hello->pre_proc_exts,",
          "1194:                                     hello->num_extensions, al);",
          "1195: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1987:             || !tls_construct_extensions(s, pkt,",
          "1988:                                          EXT_TLS1_2_SERVER_HELLO",
          "1990:         SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_HELLO, ERR_R_INTERNAL_ERROR);",
          "1991:         goto err;",
          "1992:     }",
          "",
          "[Removed Lines]",
          "1989:                                          | EXT_TLS1_3_SERVER_HELLO, &al)) {",
          "",
          "[Added Lines]",
          "1857:                                          | EXT_TLS1_3_SERVER_HELLO",
          "1858:                                          | EXT_TLS1_3_ENCRYPTED_EXTENSIONS",
          "1859:                                          | EXT_TLS1_3_CERTIFICATE, &al)) {",
          "",
          "---------------"
        ],
        "ssl/t1_lib.c||ssl/t1_lib.c": [
          "File: ssl/t1_lib.c -> ssl/t1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: static int tls_decrypt_ticket(SSL *s, const unsigned char *tick, size_t ticklen,",
          "24:                               const unsigned char *sess_id, size_t sesslen,",
          "25:                               SSL_SESSION **psess);",
          "28: SSL3_ENC_METHOD const TLSv1_enc_data = {",
          "29:     tls1_enc,",
          "",
          "[Removed Lines]",
          "26: static int ssl_check_serverhello_tlsext(SSL *s);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "946:     return ssl_security(s, SSL_SECOP_TICKET, 0, 0, NULL);",
          "947: }",
          "1024: int ssl_add_clienthello_tlsext(SSL *s, WPACKET *pkt, int *al)",
          "1025: {",
          "1026: #ifndef OPENSSL_NO_EC",
          "",
          "[Removed Lines]",
          "949: static int compare_uint(const void *p1, const void *p2)",
          "950: {",
          "951:     unsigned int u1 = *((const unsigned int *)p1);",
          "952:     unsigned int u2 = *((const unsigned int *)p2);",
          "953:     if (u1 < u2)",
          "954:         return -1;",
          "955:     else if (u1 > u2)",
          "956:         return 1;",
          "957:     else",
          "958:         return 0;",
          "959: }",
          "969: static int tls1_check_duplicate_extensions(const PACKET *packet)",
          "970: {",
          "971:     PACKET extensions = *packet;",
          "972:     size_t num_extensions = 0, i = 0;",
          "973:     unsigned int *extension_types = NULL;",
          "974:     int ret = 0;",
          "977:     while (PACKET_remaining(&extensions) > 0) {",
          "978:         unsigned int type;",
          "979:         PACKET extension;",
          "980:         if (!PACKET_get_net_2(&extensions, &type) ||",
          "981:             !PACKET_get_length_prefixed_2(&extensions, &extension)) {",
          "982:             goto done;",
          "983:         }",
          "984:         num_extensions++;",
          "985:     }",
          "987:     if (num_extensions <= 1)",
          "988:         return 1;",
          "990:     extension_types = OPENSSL_malloc(sizeof(unsigned int) * num_extensions);",
          "991:     if (extension_types == NULL) {",
          "992:         SSLerr(SSL_F_TLS1_CHECK_DUPLICATE_EXTENSIONS, ERR_R_MALLOC_FAILURE);",
          "993:         goto done;",
          "994:     }",
          "997:     extensions = *packet;",
          "998:     for (i = 0; i < num_extensions; i++) {",
          "999:         PACKET extension;",
          "1000:         if (!PACKET_get_net_2(&extensions, &extension_types[i]) ||",
          "1001:             !PACKET_get_length_prefixed_2(&extensions, &extension)) {",
          "1003:             SSLerr(SSL_F_TLS1_CHECK_DUPLICATE_EXTENSIONS, ERR_R_INTERNAL_ERROR);",
          "1004:             goto done;",
          "1005:         }",
          "1006:     }",
          "1008:     if (PACKET_remaining(&extensions) != 0) {",
          "1009:         SSLerr(SSL_F_TLS1_CHECK_DUPLICATE_EXTENSIONS, ERR_R_INTERNAL_ERROR);",
          "1010:         goto done;",
          "1011:     }",
          "1013:     qsort(extension_types, num_extensions, sizeof(unsigned int), compare_uint);",
          "1014:     for (i = 1; i < num_extensions; i++) {",
          "1015:         if (extension_types[i - 1] == extension_types[i])",
          "1016:             goto done;",
          "1017:     }",
          "1018:     ret = 1;",
          "1019:  done:",
          "1020:     OPENSSL_free(extension_types);",
          "1021:     return ret;",
          "1022: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1512:     return 1;",
          "1513: }",
          "1875: int ssl_prepare_clienthello_tlsext(SSL *s)",
          "1876: {",
          "1877:     s->s3->alpn_sent = 0;",
          "",
          "[Removed Lines]",
          "1515: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "1521: static char ssl_next_proto_validate(PACKET *pkt)",
          "1522: {",
          "1523:     PACKET tmp_protocol;",
          "1525:     while (PACKET_remaining(pkt)) {",
          "1526:         if (!PACKET_get_length_prefixed_1(pkt, &tmp_protocol)",
          "1527:             || PACKET_remaining(&tmp_protocol) == 0)",
          "1528:             return 0;",
          "1529:     }",
          "1531:     return 1;",
          "1532: }",
          "1533: #endif",
          "1535: static int ssl_scan_serverhello_tlsext(SSL *s, PACKET *pkt, int *al)",
          "1536: {",
          "1537:     unsigned int length, type, size;",
          "1538:     int tlsext_servername = 0;",
          "1539:     int renegotiate_seen = 0;",
          "1541: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "1542:     s->s3->next_proto_neg_seen = 0;",
          "1543: #endif",
          "1544:     s->tlsext_ticket_expected = 0;",
          "1546:     OPENSSL_free(s->s3->alpn_selected);",
          "1547:     s->s3->alpn_selected = NULL;",
          "1549:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "1551:     s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;",
          "1553:     if (!PACKET_get_net_2(pkt, &length))",
          "1554:         goto ri_check;",
          "1556:     if (PACKET_remaining(pkt) != length) {",
          "1558:         return 0;",
          "1559:     }",
          "1561:     if (!tls1_check_duplicate_extensions(pkt)) {",
          "1563:         return 0;",
          "1564:     }",
          "1566:     while (PACKET_get_net_2(pkt, &type) && PACKET_get_net_2(pkt, &size)) {",
          "1567:         const unsigned char *data;",
          "1568:         PACKET spkt;",
          "1570:         if (!PACKET_get_sub_packet(pkt, &spkt, size)",
          "1571:             || !PACKET_peek_bytes(&spkt, &data, size))",
          "1572:             goto ri_check;",
          "1574:         if (s->tlsext_debug_cb)",
          "1575:             s->tlsext_debug_cb(s, 1, type, data, size, s->tlsext_debug_arg);",
          "1577:         if (type == TLSEXT_TYPE_renegotiate) {",
          "1578:             if (!ssl_parse_serverhello_renegotiate_ext(s, &spkt, al))",
          "1579:                 return 0;",
          "1580:             renegotiate_seen = 1;",
          "1581:         } else if (s->version == SSL3_VERSION) {",
          "1582:         } else if (type == TLSEXT_TYPE_server_name) {",
          "1583:             if (s->tlsext_hostname == NULL || size > 0) {",
          "1585:                 return 0;",
          "1586:             }",
          "1587:             tlsext_servername = 1;",
          "1588:         }",
          "1589: #ifndef OPENSSL_NO_EC",
          "1590:         else if (type == TLSEXT_TYPE_ec_point_formats) {",
          "1591:             unsigned int ecpointformatlist_length;",
          "1592:             if (!PACKET_get_1(&spkt, &ecpointformatlist_length)",
          "1593:                 || ecpointformatlist_length != size - 1) {",
          "1595:                 return 0;",
          "1596:             }",
          "1597:             if (!s->hit) {",
          "1598:                 s->session->tlsext_ecpointformatlist_length = 0;",
          "1599:                 OPENSSL_free(s->session->tlsext_ecpointformatlist);",
          "1600:                 if ((s->session->tlsext_ecpointformatlist =",
          "1601:                      OPENSSL_malloc(ecpointformatlist_length)) == NULL) {",
          "1603:                     return 0;",
          "1604:                 }",
          "1605:                 s->session->tlsext_ecpointformatlist_length =",
          "1606:                     ecpointformatlist_length;",
          "1607:                 if (!PACKET_copy_bytes(&spkt,",
          "1608:                                        s->session->tlsext_ecpointformatlist,",
          "1609:                                        ecpointformatlist_length)) {",
          "1611:                     return 0;",
          "1612:                 }",
          "1614:             }",
          "1615:         }",
          "1618:         else if (type == TLSEXT_TYPE_session_ticket) {",
          "1619:             if (s->tls_session_ticket_ext_cb &&",
          "1620:                 !s->tls_session_ticket_ext_cb(s, data, size,",
          "1621:                                               s->tls_session_ticket_ext_cb_arg))",
          "1622:             {",
          "1624:                 return 0;",
          "1625:             }",
          "1626:             if (!tls_use_ticket(s) || (size > 0)) {",
          "1628:                 return 0;",
          "1629:             }",
          "1630:             s->tlsext_ticket_expected = 1;",
          "1631:         } else if (type == TLSEXT_TYPE_status_request) {",
          "1636:             if ((s->tlsext_status_type == -1) || (size > 0)) {",
          "1638:                 return 0;",
          "1639:             }",
          "1641:             s->tlsext_status_expected = 1;",
          "1642:         }",
          "1643: #ifndef OPENSSL_NO_CT",
          "1649:         else if (type == TLSEXT_TYPE_signed_certificate_timestamp &&",
          "1650:                  s->ct_validation_callback != NULL) {",
          "1652:             if (s->tlsext_scts != NULL) {",
          "1653:                 OPENSSL_free(s->tlsext_scts);",
          "1654:                 s->tlsext_scts = NULL;",
          "1655:             }",
          "1656:             s->tlsext_scts_len = size;",
          "1657:             if (size > 0) {",
          "1658:                 s->tlsext_scts = OPENSSL_malloc(size);",
          "1659:                 if (s->tlsext_scts == NULL) {",
          "1661:                     return 0;",
          "1662:                 }",
          "1663:                 memcpy(s->tlsext_scts, data, size);",
          "1664:             }",
          "1665:         }",
          "1666: #endif",
          "1667: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "1668:         else if (type == TLSEXT_TYPE_next_proto_neg &&",
          "1669:                  s->s3->tmp.finish_md_len == 0) {",
          "1670:             unsigned char *selected;",
          "1671:             unsigned char selected_len;",
          "1673:             if (s->ctx->next_proto_select_cb == NULL) {",
          "1675:                 return 0;",
          "1676:             }",
          "1678:             if (!ssl_next_proto_validate(&spkt)) {",
          "1680:                 return 0;",
          "1681:             }",
          "1682:             if (s->ctx->next_proto_select_cb(s, &selected, &selected_len, data,",
          "1683:                                              size,",
          "1684:                                              s->",
          "1685:                                              ctx->next_proto_select_cb_arg) !=",
          "1686:                 SSL_TLSEXT_ERR_OK) {",
          "1688:                 return 0;",
          "1689:             }",
          "1694:             OPENSSL_free(s->next_proto_negotiated);",
          "1695:             s->next_proto_negotiated = OPENSSL_malloc(selected_len);",
          "1696:             if (s->next_proto_negotiated == NULL) {",
          "1698:                 return 0;",
          "1699:             }",
          "1700:             memcpy(s->next_proto_negotiated, selected, selected_len);",
          "1701:             s->next_proto_negotiated_len = selected_len;",
          "1702:             s->s3->next_proto_neg_seen = 1;",
          "1703:         }",
          "1704: #endif",
          "1706:         else if (type == TLSEXT_TYPE_application_layer_protocol_negotiation) {",
          "1707:             unsigned len;",
          "1709:             if (!s->s3->alpn_sent) {",
          "1711:                 return 0;",
          "1712:             }",
          "1719:             if (!PACKET_get_net_2(&spkt, &len)",
          "1720:                 || PACKET_remaining(&spkt) != len || !PACKET_get_1(&spkt, &len)",
          "1721:                 || PACKET_remaining(&spkt) != len) {",
          "1723:                 return 0;",
          "1724:             }",
          "1725:             OPENSSL_free(s->s3->alpn_selected);",
          "1726:             s->s3->alpn_selected = OPENSSL_malloc(len);",
          "1727:             if (s->s3->alpn_selected == NULL) {",
          "1729:                 return 0;",
          "1730:             }",
          "1731:             if (!PACKET_copy_bytes(&spkt, s->s3->alpn_selected, len)) {",
          "1733:                 return 0;",
          "1734:             }",
          "1735:             s->s3->alpn_selected_len = len;",
          "1736:         }",
          "1737: #ifndef OPENSSL_NO_SRTP",
          "1738:         else if (SSL_IS_DTLS(s) && type == TLSEXT_TYPE_use_srtp) {",
          "1739:             if (ssl_parse_serverhello_use_srtp_ext(s, &spkt, al))",
          "1740:                 return 0;",
          "1741:         }",
          "1742: #endif",
          "1743:         else if (type == TLSEXT_TYPE_encrypt_then_mac) {",
          "1745:             if (!(s->options & SSL_OP_NO_ENCRYPT_THEN_MAC) &&",
          "1746:                 s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD",
          "1747:                 && s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)",
          "1748:                 s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "1749:         } else if (type == TLSEXT_TYPE_extended_master_secret &&",
          "1750:                 (SSL_IS_DTLS(s) || !SSL_IS_TLS13(s))) {",
          "1751:             s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;",
          "1752:             if (!s->hit)",
          "1753:                 s->session->flags |= SSL_SESS_FLAG_EXTMS;",
          "1754:         } else if (type == TLSEXT_TYPE_key_share",
          "1755:                 && SSL_IS_TLS13(s)) {",
          "1756:             unsigned int group_id;",
          "1757:             PACKET encoded_pt;",
          "1758:             EVP_PKEY *ckey = s->s3->tmp.pkey, *skey = NULL;",
          "1761:             if (ckey == NULL) {",
          "1763:                 SSLerr(SSL_F_SSL_SCAN_SERVERHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1764:                 return 0;",
          "1765:             }",
          "1767:             if (!PACKET_get_net_2(&spkt, &group_id)) {",
          "1769:                 SSLerr(SSL_F_SSL_SCAN_SERVERHELLO_TLSEXT,",
          "1770:                        SSL_R_LENGTH_MISMATCH);",
          "1771:                 return 0;",
          "1772:             }",
          "1774:             if (group_id != s->s3->group_id) {",
          "1780:                 SSLerr(SSL_F_SSL_SCAN_SERVERHELLO_TLSEXT,",
          "1781:                        SSL_R_BAD_KEY_SHARE);",
          "1782:                 return 0;",
          "1783:             }",
          "1785:             if (!PACKET_as_length_prefixed_2(&spkt, &encoded_pt)",
          "1786:                     || PACKET_remaining(&encoded_pt) == 0) {",
          "1788:                 SSLerr(SSL_F_SSL_SCAN_SERVERHELLO_TLSEXT,",
          "1789:                        SSL_R_LENGTH_MISMATCH);",
          "1790:                 return 0;",
          "1791:             }",
          "1793:             skey = ssl_generate_pkey(ckey);",
          "1794:             if (skey == NULL) {",
          "1796:                 SSLerr(SSL_F_SSL_SCAN_SERVERHELLO_TLSEXT, ERR_R_MALLOC_FAILURE);",
          "1797:                 return 0;",
          "1798:             }",
          "1799:             if (!EVP_PKEY_set1_tls_encodedpoint(skey, PACKET_data(&encoded_pt),",
          "1800:                                                 PACKET_remaining(&encoded_pt))) {",
          "1802:                 SSLerr(SSL_F_SSL_SCAN_SERVERHELLO_TLSEXT, SSL_R_BAD_ECPOINT);",
          "1803:                 return 0;",
          "1804:             }",
          "1806:             if (ssl_derive(s, ckey, skey, 1) == 0) {",
          "1808:                 SSLerr(SSL_F_SSL_SCAN_SERVERHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1809:                 EVP_PKEY_free(skey);",
          "1810:                 return 0;",
          "1811:             }",
          "1812:             EVP_PKEY_free(skey);",
          "1817:         } else if (custom_ext_parse(s, 0, type, data, size, al) <= 0)",
          "1818:             return 0;",
          "1819:     }",
          "1821:     if (PACKET_remaining(pkt) != 0) {",
          "1823:         return 0;",
          "1824:     }",
          "1826:     if (!s->hit && tlsext_servername == 1) {",
          "1827:         if (s->tlsext_hostname) {",
          "1828:             if (s->session->tlsext_hostname == NULL) {",
          "1829:                 s->session->tlsext_hostname =",
          "1830:                     OPENSSL_strdup(s->tlsext_hostname);",
          "1831:                 if (!s->session->tlsext_hostname) {",
          "1833:                     return 0;",
          "1834:                 }",
          "1835:             } else {",
          "1837:                 return 0;",
          "1838:             }",
          "1839:         }",
          "1840:     }",
          "1842:  ri_check:",
          "1851:     if (!renegotiate_seen && !(s->options & SSL_OP_LEGACY_SERVER_CONNECT)",
          "1852:         && !(s->options & SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION)) {",
          "1854:         SSLerr(SSL_F_SSL_SCAN_SERVERHELLO_TLSEXT,",
          "1855:                SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED);",
          "1856:         return 0;",
          "1857:     }",
          "1859:     if (s->hit) {",
          "1864:         if (!(s->s3->flags & TLS1_FLAGS_RECEIVED_EXTMS) !=",
          "1865:             !(s->session->flags & SSL_SESS_FLAG_EXTMS)) {",
          "1867:             SSLerr(SSL_F_SSL_SCAN_SERVERHELLO_TLSEXT, SSL_R_INCONSISTENT_EXTMS);",
          "1868:             return 0;",
          "1869:         }",
          "1870:     }",
          "1872:     return 1;",
          "1873: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1940:     return 0;",
          "1941: }",
          "",
          "[Removed Lines]",
          "1943: int ssl_check_serverhello_tlsext(SSL *s)",
          "1944: {",
          "1945:     int ret = SSL_TLSEXT_ERR_NOACK;",
          "1946:     int al = SSL_AD_UNRECOGNIZED_NAME;",
          "1948: #ifndef OPENSSL_NO_EC",
          "1954:     unsigned long alg_k = s->s3->tmp.new_cipher->algorithm_mkey;",
          "1955:     unsigned long alg_a = s->s3->tmp.new_cipher->algorithm_auth;",
          "1956:     if ((s->tlsext_ecpointformatlist != NULL)",
          "1957:         && (s->tlsext_ecpointformatlist_length > 0)",
          "1958:         && (s->session->tlsext_ecpointformatlist != NULL)",
          "1959:         && (s->session->tlsext_ecpointformatlist_length > 0)",
          "1960:         && ((alg_k & SSL_kECDHE) || (alg_a & SSL_aECDSA))) {",
          "1962:         size_t i;",
          "1963:         unsigned char *list;",
          "1964:         int found_uncompressed = 0;",
          "1965:         list = s->session->tlsext_ecpointformatlist;",
          "1966:         for (i = 0; i < s->session->tlsext_ecpointformatlist_length; i++) {",
          "1967:             if (*(list++) == TLSEXT_ECPOINTFORMAT_uncompressed) {",
          "1968:                 found_uncompressed = 1;",
          "1969:                 break;",
          "1970:             }",
          "1971:         }",
          "1972:         if (!found_uncompressed) {",
          "1973:             SSLerr(SSL_F_SSL_CHECK_SERVERHELLO_TLSEXT,",
          "1974:                    SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST);",
          "1975:             return -1;",
          "1976:         }",
          "1977:     }",
          "1978:     ret = SSL_TLSEXT_ERR_OK;",
          "1981:     if (s->ctx != NULL && s->ctx->tlsext_servername_callback != 0)",
          "1982:         ret =",
          "1983:             s->ctx->tlsext_servername_callback(s, &al,",
          "1984:                                                s->ctx->tlsext_servername_arg);",
          "1985:     else if (s->initial_ctx != NULL",
          "1986:              && s->initial_ctx->tlsext_servername_callback != 0)",
          "1987:         ret =",
          "1988:             s->initial_ctx->tlsext_servername_callback(s, &al,",
          "1989:                                                        s->",
          "1990:                                                        initial_ctx->tlsext_servername_arg);",
          "1996:     OPENSSL_free(s->tlsext_ocsp_resp);",
          "1997:     s->tlsext_ocsp_resp = NULL;",
          "1998:     s->tlsext_ocsp_resplen = 0;",
          "2000:     switch (ret) {",
          "2001:     case SSL_TLSEXT_ERR_ALERT_FATAL:",
          "2002:         ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "2003:         return -1;",
          "2005:     case SSL_TLSEXT_ERR_ALERT_WARNING:",
          "2006:         ssl3_send_alert(s, SSL3_AL_WARNING, al);",
          "2007:         return 1;",
          "2009:     case SSL_TLSEXT_ERR_NOACK:",
          "2010:         s->servername_done = 0;",
          "2011:     default:",
          "2012:         return 1;",
          "2013:     }",
          "2014: }",
          "2016: int ssl_parse_serverhello_tlsext(SSL *s, PACKET *pkt)",
          "2017: {",
          "2018:     int al = -1;",
          "2019:     if (s->version < SSL3_VERSION)",
          "2020:         return 1;",
          "2021:     if (ssl_scan_serverhello_tlsext(s, pkt, &al) <= 0) {",
          "2022:         ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "2023:         return 0;",
          "2024:     }",
          "2026:     if (ssl_check_serverhello_tlsext(s) <= 0) {",
          "2027:         SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_TLSEXT, SSL_R_SERVERHELLO_TLSEXT);",
          "2028:         return 0;",
          "2029:     }",
          "2030:     return 1;",
          "2031: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/t1_reneg.c||ssl/t1_reneg.c": [
          "File: ssl/t1_reneg.c -> ssl/t1_reneg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7da160b0f46d832dbf285cb0b48ae56d4a8b884d",
      "candidate_info": {
        "commit_hash": "7da160b0f46d832dbf285cb0b48ae56d4a8b884d",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/7da160b0f46d832dbf285cb0b48ae56d4a8b884d",
        "files": [
          "include/openssl/ssl.h",
          "ssl/ssl_err.c",
          "ssl/ssl_locl.h",
          "ssl/statem/extensions.c",
          "ssl/statem/extensions_srvr.c",
          "ssl/statem/statem_locl.h",
          "ssl/statem/statem_srvr.c",
          "ssl/t1_lib.c",
          "ssl/t1_reneg.c"
        ],
        "message": "Move ServerHello extension construction into the new extensions framework\n\nThis lays the foundation for a later move to have the extensions built and\nplaced into the correct message for TLSv1.3 (e.g. ServerHello or\nEncryptedExtensions).\n\nPerl changes reviewed by Richard Levitte. Non-perl changes reviewed by Rich\nSalz\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "ssl/ssl_err.c||ssl/ssl_err.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h",
          "ssl/statem/extensions.c||ssl/statem/extensions.c",
          "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c",
          "ssl/statem/statem_locl.h||ssl/statem/statem_locl.h",
          "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c",
          "ssl/t1_lib.c||ssl/t1_lib.c",
          "ssl/t1_reneg.c||ssl/t1_reneg.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/ssl_locl.h||ssl/ssl_locl.h",
            "ssl/statem/extensions.c||ssl/statem/extensions.c",
            "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c"
          ],
          "candidate": [
            "ssl/ssl_locl.h||ssl/ssl_locl.h",
            "ssl/statem/extensions.c||ssl/statem/extensions.c",
            "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c"
          ]
        }
      },
      "candidate_diff": {
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2275: # define SSL_F_TLS_CONSTRUCT_HELLO_REQUEST                373",
          "2276: # define SSL_F_TLS_CONSTRUCT_NEW_SESSION_TICKET           428",
          "2277: # define SSL_F_TLS_CONSTRUCT_NEXT_PROTO                   426",
          "2278: # define SSL_F_TLS_CONSTRUCT_SERVER_CERTIFICATE           374",
          "2279: # define SSL_F_TLS_CONSTRUCT_SERVER_DONE                  375",
          "2280: # define SSL_F_TLS_CONSTRUCT_SERVER_HELLO                 376",
          "2281: # define SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE          377",
          "2282: # define SSL_F_TLS_GET_MESSAGE_BODY                       351",
          "2283: # define SSL_F_TLS_GET_MESSAGE_HEADER                     387",
          "2284: # define SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE            445",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2278: # define SSL_F_TLS_CONSTRUCT_SERVER_ALPN                  451",
          "2280: # define SSL_F_TLS_CONSTRUCT_SERVER_CRYPTOPRO_BUG         452",
          "2282: # define SSL_F_TLS_CONSTRUCT_SERVER_EC_PT_FORMATS         453",
          "2283: # define SSL_F_TLS_CONSTRUCT_SERVER_EMS                   454",
          "2284: # define SSL_F_TLS_CONSTRUCT_SERVER_ETM                   455",
          "2287: # define SSL_F_TLS_CONSTRUCT_SERVER_KEY_SHARE             456",
          "2288: # define SSL_F_TLS_CONSTRUCT_SERVER_NEXT_PROTO_NEG        457",
          "2289: # define SSL_F_TLS_CONSTRUCT_SERVER_RENEGOTIATE           458",
          "2290: # define SSL_F_TLS_CONSTRUCT_SERVER_SERVER_NAME           459",
          "2291: # define SSL_F_TLS_CONSTRUCT_SERVER_SESSION_TICKET        460",
          "2292: # define SSL_F_TLS_CONSTRUCT_SERVER_STATUS_REQUEST        461",
          "2293: # define SSL_F_TLS_CONSTRUCT_SERVER_USE_SRTP              462",
          "",
          "---------------"
        ],
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "282:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_NEW_SESSION_TICKET),",
          "283:      \"tls_construct_new_session_ticket\"},",
          "284:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_NEXT_PROTO), \"tls_construct_next_proto\"},",
          "285:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_SERVER_CERTIFICATE),",
          "286:      \"tls_construct_server_certificate\"},",
          "287:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_SERVER_DONE), \"tls_construct_server_done\"},",
          "288:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_SERVER_HELLO),",
          "289:      \"tls_construct_server_hello\"},",
          "290:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE),",
          "291:      \"tls_construct_server_key_exchange\"},",
          "292:     {ERR_FUNC(SSL_F_TLS_GET_MESSAGE_BODY), \"tls_get_message_body\"},",
          "293:     {ERR_FUNC(SSL_F_TLS_GET_MESSAGE_HEADER), \"tls_get_message_header\"},",
          "294:     {ERR_FUNC(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "285:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_SERVER_ALPN), \"tls_construct_server_alpn\"},",
          "288:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_SERVER_CRYPTOPRO_BUG),",
          "289:      \"tls_construct_server_cryptopro_bug\"},",
          "291:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_SERVER_EC_PT_FORMATS),",
          "292:      \"tls_construct_server_ec_pt_formats\"},",
          "293:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_SERVER_EMS), \"tls_construct_server_ems\"},",
          "294:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_SERVER_ETM), \"tls_construct_server_etm\"},",
          "299:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_SERVER_KEY_SHARE),",
          "300:      \"tls_construct_server_key_share\"},",
          "301:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_SERVER_NEXT_PROTO_NEG),",
          "302:      \"tls_construct_server_next_proto_neg\"},",
          "303:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_SERVER_RENEGOTIATE),",
          "304:      \"tls_construct_server_renegotiate\"},",
          "305:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_SERVER_SERVER_NAME),",
          "306:      \"tls_construct_server_server_name\"},",
          "307:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_SERVER_SESSION_TICKET),",
          "308:      \"tls_construct_server_session_ticket\"},",
          "309:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_SERVER_STATUS_REQUEST),",
          "310:      \"tls_construct_server_status_request\"},",
          "311:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_SERVER_USE_SRTP),",
          "312:      \"tls_construct_server_use_srtp\"},",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2064:                            int *curves, size_t ncurves);",
          "2065: __owur int tls1_set_groups_list(unsigned char **pext, size_t *pextlen,",
          "2066:                                 const char *str);",
          "2067: __owur int tls1_check_ec_tmp_key(SSL *s, unsigned long id);",
          "2068: __owur EVP_PKEY *ssl_generate_pkey_curve(int id);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2067: void tls1_get_formatlist(SSL *s, const unsigned char **pformats,",
          "2068:                          size_t *num_formats);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2076:                                size_t *num_curves);",
          "2078: __owur int ssl_add_clienthello_tlsext(SSL *s, WPACKET *pkt, int *al);",
          "2080: void ssl_set_default_md(SSL *s);",
          "2081: __owur int tls1_set_server_sigalgs(SSL *s);",
          "2082: __owur int ssl_check_clienthello_tlsext_late(SSL *s, int *al);",
          "2083: __owur int ssl_parse_serverhello_tlsext(SSL *s, PACKET *pkt);",
          "2084: __owur int ssl_prepare_clienthello_tlsext(SSL *s);",
          "2086: __owur RAW_EXTENSION *tls_get_extension_by_type(RAW_EXTENSION *exts,",
          "2087:                                                 size_t numexts,",
          "2088:                                                 unsigned int type);",
          "2089: __owur int tls_get_ticket_from_client(SSL *s, CLIENTHELLO_MSG *hello,",
          "2090:                                       SSL_SESSION **ret);",
          "2092: __owur int tls12_get_sigandhash(WPACKET *pkt, const EVP_PKEY *pk,",
          "2093:                                 const EVP_MD *md);",
          "",
          "[Removed Lines]",
          "2079: __owur int ssl_add_serverhello_tlsext(SSL *s, WPACKET *pkt, int *al);",
          "2085: __owur int ssl_prepare_serverhello_tlsext(SSL *s);",
          "",
          "[Added Lines]",
          "2091: __owur int tls_use_ticket(SSL *s);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2117: __owur EVP_MD_CTX *ssl_replace_hash(EVP_MD_CTX **hash, const EVP_MD *md);",
          "2118: void ssl_clear_hash_ctx(EVP_MD_CTX **hash);",
          "2120: __owur int ssl_parse_serverhello_renegotiate_ext(SSL *s, PACKET *pkt, int *al);",
          "2121: __owur long ssl_get_algorithm2(SSL *s);",
          "2122: __owur int tls12_copy_sigalgs(SSL *s, WPACKET *pkt,",
          "",
          "[Removed Lines]",
          "2119: __owur int ssl_add_serverhello_renegotiate_ext(SSL *s, WPACKET *pkt);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/statem/extensions.c||ssl/statem/extensions.c": [
          "File: ssl/statem/extensions.c -> ssl/statem/extensions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:         TLSEXT_TYPE_renegotiate,",
          "32:         tls_parse_clienthello_renegotiate,",
          "33:         NULL,",
          "35:         NULL,",
          "36:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_SSL3_ALLOWED",
          "37:         | EXT_TLS1_2_AND_BELOW_ONLY",
          "",
          "[Removed Lines]",
          "34:         NULL,",
          "",
          "[Added Lines]",
          "34:         tls_construct_server_renegotiate,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:         TLSEXT_TYPE_server_name,",
          "41:         tls_parse_clienthello_server_name,",
          "42:         NULL,",
          "44:         NULL,",
          "45:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "46:         | /*EXT_TLS1_3_ENCRYPTED_EXTENSIONS*/EXT_TLS1_3_SERVER_HELLO",
          "",
          "[Removed Lines]",
          "43:         NULL,",
          "",
          "[Added Lines]",
          "43:         tls_construct_server_server_name,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "60:         TLSEXT_TYPE_ec_point_formats,",
          "61:         tls_parse_clienthello_ec_pt_formats,",
          "62:         NULL,",
          "64:         NULL,",
          "65:         EXT_CLIENT_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "66:     },",
          "",
          "[Removed Lines]",
          "63:         NULL,",
          "",
          "[Added Lines]",
          "63:         tls_construct_server_ec_pt_formats,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "68:         TLSEXT_TYPE_supported_groups,",
          "69:         tls_parse_clienthello_supported_groups,",
          "70:         NULL,",
          "72:         NULL,",
          "73:         EXT_CLIENT_HELLO",
          "74:         | /*EXT_TLS1_3_ENCRYPTED_EXTENSIONS*/EXT_TLS1_3_SERVER_HELLO",
          "",
          "[Removed Lines]",
          "71:         NULL,",
          "",
          "[Added Lines]",
          "71:         NULL /* TODO(TLS1.3): Need to add this */,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "78:         TLSEXT_TYPE_session_ticket,",
          "79:         tls_parse_clienthello_session_ticket,",
          "80:         NULL,",
          "82:         NULL,",
          "83:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "84:     },",
          "",
          "[Removed Lines]",
          "81:         NULL,",
          "",
          "[Added Lines]",
          "81:         tls_construct_server_session_ticket,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "94:         TLSEXT_TYPE_status_request,",
          "95:         tls_parse_clienthello_status_request,",
          "96:         NULL,",
          "98:         NULL,",
          "99:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "100:         | /*EXT_TLS1_3_CERTIFICATE*/EXT_TLS1_3_SERVER_HELLO",
          "",
          "[Removed Lines]",
          "97:         NULL,",
          "",
          "[Added Lines]",
          "97:         tls_construct_server_status_request,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "104:         TLSEXT_TYPE_next_proto_neg,",
          "105:         tls_parse_clienthello_npn,",
          "106:         NULL,",
          "108:         NULL,",
          "109:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "110:     },",
          "",
          "[Removed Lines]",
          "107:         NULL,",
          "",
          "[Added Lines]",
          "107:         tls_construct_server_next_proto_neg,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "113:         TLSEXT_TYPE_application_layer_protocol_negotiation,",
          "114:         tls_parse_clienthello_alpn,",
          "115:         NULL,",
          "117:         NULL,",
          "118:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "119:         | /*EXT_TLS1_3_ENCRYPTED_EXTENSIONS*/EXT_TLS1_3_SERVER_HELLO",
          "120:     },",
          "121:     {",
          "122:         TLSEXT_TYPE_use_srtp,",
          "123:         tls_parse_clienthello_use_srtp,",
          "124:         NULL,",
          "126:         NULL,",
          "127:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "128:         | EXT_TLS1_3_ENCRYPTED_EXTENSIONS | EXT_DTLS_ONLY",
          "129:     },",
          "130:     {",
          "131:         TLSEXT_TYPE_encrypt_then_mac,",
          "132:         tls_parse_clienthello_etm,",
          "133:         NULL,",
          "135:         NULL,",
          "136:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "137:     },",
          "",
          "[Removed Lines]",
          "116:         NULL,",
          "125:         NULL,",
          "134:         NULL,",
          "",
          "[Added Lines]",
          "116:         tls_construct_server_alpn,",
          "121: #ifndef OPENSSL_NO_SRTP",
          "126:         tls_construct_server_use_srtp,",
          "131: #endif",
          "136:         tls_construct_server_etm,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "153:         TLSEXT_TYPE_extended_master_secret,",
          "154:         tls_parse_clienthello_ems,",
          "155:         NULL,",
          "157:         NULL,",
          "158:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "159:     },",
          "",
          "[Removed Lines]",
          "156:         NULL,",
          "",
          "[Added Lines]",
          "158:         tls_construct_server_ems,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "179:         TLSEXT_TYPE_key_share,",
          "180:         tls_parse_clienthello_key_share,",
          "181:         NULL,",
          "183:         NULL,",
          "184:         EXT_CLIENT_HELLO | EXT_TLS1_3_SERVER_HELLO",
          "185:         | EXT_TLS1_3_HELLO_RETRY_REQUEST | EXT_TLS_IMPLEMENTATION_ONLY",
          "186:         | EXT_TLS1_3_ONLY",
          "187:     }",
          "188: };",
          "",
          "[Removed Lines]",
          "182:         NULL,",
          "",
          "[Added Lines]",
          "184:         tls_construct_server_key_share,",
          "189:     },",
          "190:     {",
          "195:         TLSEXT_TYPE_cryptopro_bug,",
          "196:         NULL,",
          "197:         NULL,",
          "198:         tls_construct_server_cryptopro_bug,",
          "199:         NULL,",
          "200:         EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "440:     size_t loop;",
          "441:     int addcustom = 0;",
          "443:     if (!WPACKET_start_sub_packet_u16(pkt)",
          "449:                && !WPACKET_set_flags(pkt,",
          "450:                                      WPACKET_FLAGS_ABANDON_ON_ZERO_LENGTH))) {",
          "452:         SSLerr(SSL_F_TLS_CONSTRUCT_EXTENSIONS, ERR_R_INTERNAL_ERROR);",
          "453:         return 0;",
          "454:     }",
          "",
          "[Removed Lines]",
          "448:             || ((context & EXT_CLIENT_HELLO) != 0",
          "",
          "[Added Lines]",
          "468:             || ((context & (EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO)) != 0",
          "469:                && s->version == SSL3_VERSION",
          "",
          "---------------"
        ],
        "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c": [
          "File: ssl/statem/extensions_srvr.c -> ssl/statem/extensions_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "648:     return 1;",
          "649: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "656: static int tls1_alpn_handle_client_hello_late(SSL *s, int *al)",
          "657: {",
          "658:     const unsigned char *selected = NULL;",
          "659:     unsigned char selected_len = 0;",
          "661:     if (s->ctx->alpn_select_cb != NULL && s->s3->alpn_proposed != NULL) {",
          "662:         int r = s->ctx->alpn_select_cb(s, &selected, &selected_len,",
          "663:                                        s->s3->alpn_proposed,",
          "664:                                        (unsigned int)s->s3->alpn_proposed_len,",
          "665:                                        s->ctx->alpn_select_cb_arg);",
          "667:         if (r == SSL_TLSEXT_ERR_OK) {",
          "668:             OPENSSL_free(s->s3->alpn_selected);",
          "669:             s->s3->alpn_selected = OPENSSL_memdup(selected, selected_len);",
          "670:             if (s->s3->alpn_selected == NULL) {",
          "672:                 return 0;",
          "673:             }",
          "674:             s->s3->alpn_selected_len = selected_len;",
          "675: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "677:             s->s3->next_proto_neg_seen = 0;",
          "678: #endif",
          "679:         } else {",
          "681:             return 0;",
          "682:         }",
          "683:     }",
          "685:     return 1;",
          "686: }",
          "692: int ssl_check_clienthello_tlsext_late(SSL *s, int *al)",
          "693: {",
          "694:     s->tlsext_status_expected = 0;",
          "702:     if ((s->tlsext_status_type != -1) && s->ctx && s->ctx->tlsext_status_cb) {",
          "703:         int ret;",
          "704:         CERT_PKEY *certpkey;",
          "705:         certpkey = ssl_get_server_send_pkey(s);",
          "707:         if (certpkey != NULL) {",
          "712:             s->cert->key = certpkey;",
          "713:             ret = s->ctx->tlsext_status_cb(s, s->ctx->tlsext_status_arg);",
          "714:             switch (ret) {",
          "716:             case SSL_TLSEXT_ERR_NOACK:",
          "717:                 s->tlsext_status_expected = 0;",
          "718:                 break;",
          "720:             case SSL_TLSEXT_ERR_OK:",
          "721:                 if (s->tlsext_ocsp_resp)",
          "722:                     s->tlsext_status_expected = 1;",
          "723:                 break;",
          "725:             case SSL_TLSEXT_ERR_ALERT_FATAL:",
          "726:             default:",
          "728:                 return 0;",
          "729:             }",
          "730:         }",
          "731:     }",
          "733:     if (!tls1_alpn_handle_client_hello_late(s, al)) {",
          "734:         return 0;",
          "735:     }",
          "737:     return 1;",
          "738: }",
          "741: int tls_construct_server_renegotiate(SSL *s, WPACKET *pkt, int *al)",
          "742: {",
          "743:     if (!s->s3->send_connection_binding)",
          "744:         return 1;",
          "746:     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_renegotiate)",
          "747:             || !WPACKET_start_sub_packet_u16(pkt)",
          "748:             || !WPACKET_start_sub_packet_u8(pkt)",
          "749:             || !WPACKET_memcpy(pkt, s->s3->previous_client_finished,",
          "750:                                s->s3->previous_client_finished_len)",
          "751:             || !WPACKET_memcpy(pkt, s->s3->previous_server_finished,",
          "752:                                s->s3->previous_server_finished_len)",
          "753:             || !WPACKET_close(pkt)",
          "754:             || !WPACKET_close(pkt)) {",
          "755:         SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_RENEGOTIATE, ERR_R_INTERNAL_ERROR);",
          "756:         return 0;",
          "757:     }",
          "759:     return 1;",
          "760: }",
          "762: int tls_construct_server_server_name(SSL *s, WPACKET *pkt, int *al)",
          "763: {",
          "764:     if (s->hit || s->servername_done != 1",
          "765:             || s->session->tlsext_hostname == NULL)",
          "766:         return 1;",
          "768:     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_server_name)",
          "769:             || !WPACKET_put_bytes_u16(pkt, 0)) {",
          "770:         SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_SERVER_NAME, ERR_R_INTERNAL_ERROR);",
          "771:         return 0;",
          "772:     }",
          "774:     return 1;",
          "775: }",
          "777: #ifndef OPENSSL_NO_EC",
          "778: int tls_construct_server_ec_pt_formats(SSL *s, WPACKET *pkt, int *al)",
          "779: {",
          "780:     unsigned long alg_k = s->s3->tmp.new_cipher->algorithm_mkey;",
          "781:     unsigned long alg_a = s->s3->tmp.new_cipher->algorithm_auth;",
          "782:     int using_ecc = (alg_k & SSL_kECDHE) || (alg_a & SSL_aECDSA);",
          "783:     using_ecc = using_ecc && (s->session->tlsext_ecpointformatlist != NULL);",
          "784:     const unsigned char *plist;",
          "785:     size_t plistlen;",
          "787:     if (!using_ecc)",
          "788:         return 1;",
          "790:     tls1_get_formatlist(s, &plist, &plistlen);",
          "792:     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_ec_point_formats)",
          "793:             || !WPACKET_start_sub_packet_u16(pkt)",
          "794:             || !WPACKET_sub_memcpy_u8(pkt, plist, plistlen)",
          "795:             || !WPACKET_close(pkt)) {",
          "796:         SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_EC_PT_FORMATS, ERR_R_INTERNAL_ERROR);",
          "797:         return 0;",
          "798:     }",
          "800:     return 1;",
          "801: }",
          "802: #endif",
          "804: int tls_construct_server_session_ticket(SSL *s, WPACKET *pkt, int *al)",
          "805: {",
          "806:     if (!s->tlsext_ticket_expected || !tls_use_ticket(s)) {",
          "807:         s->tlsext_ticket_expected = 0;",
          "808:         return 1;",
          "809:     }",
          "811:     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_session_ticket)",
          "812:             || !WPACKET_put_bytes_u16(pkt, 0)) {",
          "813:         SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_SESSION_TICKET, ERR_R_INTERNAL_ERROR);",
          "814:         return 0;",
          "815:     }",
          "817:     return 1;",
          "818: }",
          "820: int tls_construct_server_status_request(SSL *s, WPACKET *pkt, int *al)",
          "821: {",
          "822:     if (!s->tlsext_status_expected)",
          "823:         return 1;",
          "825:     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_status_request)",
          "826:             || !WPACKET_put_bytes_u16(pkt, 0)) {",
          "827:         SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_STATUS_REQUEST, ERR_R_INTERNAL_ERROR);",
          "828:         return 0;",
          "829:     }",
          "831:     return 1;",
          "832: }",
          "835: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "836: int tls_construct_server_next_proto_neg(SSL *s, WPACKET *pkt, int *al)",
          "837: {",
          "838:     const unsigned char *npa;",
          "839:     unsigned int npalen;",
          "840:     int ret;",
          "841:     int next_proto_neg_seen = s->s3->next_proto_neg_seen;",
          "843:     s->s3->next_proto_neg_seen = 0;",
          "844:     if (!next_proto_neg_seen || s->ctx->next_protos_advertised_cb == NULL)",
          "845:         return 1;",
          "847:     ret = s->ctx->next_protos_advertised_cb(s, &npa, &npalen,",
          "848:                                       s->ctx->next_protos_advertised_cb_arg);",
          "849:     if (ret == SSL_TLSEXT_ERR_OK) {",
          "850:         if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_next_proto_neg)",
          "851:                 || !WPACKET_sub_memcpy_u16(pkt, npa, npalen)) {",
          "852:             SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_NEXT_PROTO_NEG,",
          "853:                    ERR_R_INTERNAL_ERROR);",
          "854:             return 0;",
          "855:         }",
          "856:         s->s3->next_proto_neg_seen = 1;",
          "857:     }",
          "859:     return 1;",
          "860: }",
          "861: #endif",
          "863: int tls_construct_server_alpn(SSL *s, WPACKET *pkt, int *al)",
          "864: {",
          "865:     if (s->s3->alpn_selected == NULL)",
          "866:         return 1;",
          "868:     if (!WPACKET_put_bytes_u16(pkt,",
          "869:                 TLSEXT_TYPE_application_layer_protocol_negotiation)",
          "870:             || !WPACKET_start_sub_packet_u16(pkt)",
          "871:             || !WPACKET_start_sub_packet_u16(pkt)",
          "872:             || !WPACKET_sub_memcpy_u8(pkt, s->s3->alpn_selected,",
          "873:                                       s->s3->alpn_selected_len)",
          "874:             || !WPACKET_close(pkt)",
          "875:             || !WPACKET_close(pkt)) {",
          "876:         SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_ALPN, ERR_R_INTERNAL_ERROR);",
          "877:         return 0;",
          "878:     }",
          "880:     return 1;",
          "881: }",
          "883: #ifndef OPENSSL_NO_SRTP",
          "884: int tls_construct_server_use_srtp(SSL *s, WPACKET *pkt, int *al)",
          "885: {",
          "886:     if (s->srtp_profile == NULL)",
          "887:         return 1;",
          "889:     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_use_srtp)",
          "890:             || !WPACKET_start_sub_packet_u16(pkt)",
          "891:             || !WPACKET_put_bytes_u16(pkt, 2)",
          "892:             || !WPACKET_put_bytes_u16(pkt, s->srtp_profile->id)",
          "893:             || !WPACKET_put_bytes_u8(pkt, 0)",
          "894:             || !WPACKET_close(pkt)) {",
          "895:         SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_USE_SRTP, ERR_R_INTERNAL_ERROR);",
          "896:         return 0;",
          "897:     }",
          "899:     return 1;",
          "900: }",
          "901: #endif",
          "903: int tls_construct_server_etm(SSL *s, WPACKET *pkt, int *al)",
          "904: {",
          "905:     if ((s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) == 0)",
          "906:         return 1;",
          "912:     if (s->s3->tmp.new_cipher->algorithm_mac == SSL_AEAD",
          "913:         || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4",
          "914:         || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT",
          "915:         || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12) {",
          "916:         s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "917:         return 1;",
          "918:     }",
          "920:     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_encrypt_then_mac)",
          "921:             || !WPACKET_put_bytes_u16(pkt, 0)) {",
          "922:         SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_ETM, ERR_R_INTERNAL_ERROR);",
          "923:         return 0;",
          "924:     }",
          "926:     return 1;",
          "927: }",
          "929: int tls_construct_server_ems(SSL *s, WPACKET *pkt, int *al)",
          "930: {",
          "931:     if ((s->s3->flags & TLS1_FLAGS_RECEIVED_EXTMS) == 0)",
          "932:         return 1;",
          "934:     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_extended_master_secret)",
          "935:             || !WPACKET_put_bytes_u16(pkt, 0)) {",
          "936:         SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_EMS, ERR_R_INTERNAL_ERROR);",
          "937:         return 0;",
          "938:     }",
          "940:     return 1;",
          "941: }",
          "943: int tls_construct_server_key_share(SSL *s, WPACKET *pkt, int *al)",
          "944: {",
          "945:     unsigned char *encodedPoint;",
          "946:     size_t encoded_pt_len = 0;",
          "947:     EVP_PKEY *ckey = s->s3->peer_tmp, *skey = NULL;",
          "949:     if (s->hit)",
          "950:         return 1;",
          "952:     if (ckey == NULL) {",
          "953:         SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_KEY_SHARE, ERR_R_INTERNAL_ERROR);",
          "954:         return 0;",
          "955:     }",
          "957:     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_key_share)",
          "958:             || !WPACKET_start_sub_packet_u16(pkt)",
          "959:             || !WPACKET_put_bytes_u16(pkt, s->s3->group_id)) {",
          "960:         SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_KEY_SHARE, ERR_R_INTERNAL_ERROR);",
          "961:         return 0;",
          "962:     }",
          "964:     skey = ssl_generate_pkey(ckey);",
          "965:     if (skey == NULL) {",
          "966:         SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_KEY_SHARE, ERR_R_MALLOC_FAILURE);",
          "967:         return 0;",
          "968:     }",
          "971:     encoded_pt_len = EVP_PKEY_get1_tls_encodedpoint(skey, &encodedPoint);",
          "972:     if (encoded_pt_len == 0) {",
          "973:         SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_KEY_SHARE, ERR_R_EC_LIB);",
          "974:         EVP_PKEY_free(skey);",
          "975:         return 0;",
          "976:     }",
          "978:     if (!WPACKET_sub_memcpy_u16(pkt, encodedPoint, encoded_pt_len)",
          "979:             || !WPACKET_close(pkt)) {",
          "980:         SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_KEY_SHARE, ERR_R_INTERNAL_ERROR);",
          "981:         EVP_PKEY_free(skey);",
          "982:         OPENSSL_free(encodedPoint);",
          "983:         return 0;",
          "984:     }",
          "985:     OPENSSL_free(encodedPoint);",
          "988:     s->s3->tmp.pkey = skey;",
          "989:     if (ssl_derive(s, skey, ckey, 1) == 0) {",
          "990:         SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_KEY_SHARE, ERR_R_INTERNAL_ERROR);",
          "991:         return 0;",
          "992:     }",
          "994:     return 1;",
          "995: }",
          "997: int tls_construct_server_cryptopro_bug(SSL *s, WPACKET *pkt, int *al)",
          "998: {",
          "999:     const unsigned char cryptopro_ext[36] = {",
          "1002:         0x30, 0x1e, 0x30, 0x08, 0x06, 0x06, 0x2a, 0x85,",
          "1003:         0x03, 0x02, 0x02, 0x09, 0x30, 0x08, 0x06, 0x06,",
          "1004:         0x2a, 0x85, 0x03, 0x02, 0x02, 0x16, 0x30, 0x08,",
          "1005:         0x06, 0x06, 0x2a, 0x85, 0x03, 0x02, 0x02, 0x17",
          "1006:     };",
          "1008:     if (((s->s3->tmp.new_cipher->id & 0xFFFF) != 0x80",
          "1009:          && (s->s3->tmp.new_cipher->id & 0xFFFF) != 0x81)",
          "1010:             || (SSL_get_options(s) & SSL_OP_CRYPTOPRO_TLSEXT_BUG) == 0)",
          "1011:         return 1;",
          "1013:     if (!WPACKET_memcpy(pkt, cryptopro_ext, sizeof(cryptopro_ext))) {",
          "1014:         SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_CRYPTOPRO_BUG, ERR_R_INTERNAL_ERROR);",
          "1015:         return 0;",
          "1016:     }",
          "1018:     return 1;",
          "1019: }",
          "",
          "---------------"
        ],
        "ssl/statem/statem_locl.h||ssl/statem/statem_locl.h": [
          "File: ssl/statem/statem_locl.h -> ssl/statem/statem_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "179: int tls_parse_clienthello_etm(SSL *s, PACKET *pkt, int *al);",
          "180: int tls_parse_clienthello_key_share(SSL *s, PACKET *pkt, int *al);",
          "181: int tls_parse_clienthello_ems(SSL *s, PACKET *pkt, int *al);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "183: int tls_construct_server_renegotiate(SSL *s, WPACKET *pkt, int *al);",
          "184: int tls_construct_server_server_name(SSL *s, WPACKET *pkt, int *al);",
          "185: int tls_construct_server_ec_pt_formats(SSL *s, WPACKET *pkt, int *al);",
          "186: int tls_construct_server_session_ticket(SSL *s, WPACKET *pkt, int *al);",
          "187: int tls_construct_server_status_request(SSL *s, WPACKET *pkt, int *al);",
          "188: int tls_construct_server_next_proto_neg(SSL *s, WPACKET *pkt, int *al);",
          "189: int tls_construct_server_alpn(SSL *s, WPACKET *pkt, int *al);",
          "190: int tls_construct_server_use_srtp(SSL *s, WPACKET *pkt, int *al);",
          "191: int tls_construct_server_etm(SSL *s, WPACKET *pkt, int *al);",
          "192: int tls_construct_server_ems(SSL *s, WPACKET *pkt, int *al);",
          "193: int tls_construct_server_key_share(SSL *s, WPACKET *pkt, int *al);",
          "199: #define TLSEXT_TYPE_cryptopro_bug      0xfde8",
          "200: int tls_construct_server_cryptopro_bug(SSL *s, WPACKET *pkt, int *al);",
          "",
          "---------------"
        ],
        "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c": [
          "File: ssl/statem/statem_srvr.c -> ssl/statem/statem_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1980:             || !s->method->put_cipher_by_char(s->s3->tmp.new_cipher, pkt, &len)",
          "1981:             || (!SSL_IS_TLS13(s)",
          "1982:                 && !WPACKET_put_bytes_u8(pkt, compm))",
          "1985:         SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_HELLO, ERR_R_INTERNAL_ERROR);",
          "1986:         goto err;",
          "1987:     }",
          "1989:     return 1;",
          "1990:  err:",
          "1992:     return 0;",
          "1993: }",
          "",
          "[Removed Lines]",
          "1983:             || !ssl_prepare_serverhello_tlsext(s)",
          "1984:             || !ssl_add_serverhello_tlsext(s, pkt, &al)) {",
          "1991:     ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_INTERNAL_ERROR);",
          "",
          "[Added Lines]",
          "1987:             || !tls_construct_extensions(s, pkt,",
          "1988:                                          EXT_TLS1_2_SERVER_HELLO",
          "1989:                                          | EXT_TLS1_3_SERVER_HELLO, &al)) {",
          "1996:     ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "",
          "---------------"
        ],
        "ssl/t1_lib.c||ssl/t1_lib.c": [
          "File: ssl/t1_lib.c -> ssl/t1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "596:     return 1;",
          "597: }",
          "601: {",
          "",
          "[Removed Lines]",
          "599: static void tls1_get_formatlist(SSL *s, const unsigned char **pformats,",
          "600:                                 size_t *num_formats)",
          "",
          "[Added Lines]",
          "599: void tls1_get_formatlist(SSL *s, const unsigned char **pformats,",
          "600:                          size_t *num_formats)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "939:     return !ssl_security(s, op, c->strength_bits, 0, (void *)c);",
          "940: }",
          "943: {",
          "944:     if ((s->options & SSL_OP_NO_TICKET) || SSL_IS_TLS13(s))",
          "945:         return 0;",
          "",
          "[Removed Lines]",
          "942: static int tls_use_ticket(SSL *s)",
          "",
          "[Added Lines]",
          "942: int tls_use_ticket(SSL *s)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1512:     return 1;",
          "1513: }",
          "1798: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "",
          "[Removed Lines]",
          "1520: static int add_client_key_share_ext(SSL *s, WPACKET *pkt, int *al)",
          "1521: {",
          "1522:     unsigned char *encodedPoint;",
          "1523:     size_t encoded_pt_len = 0;",
          "1524:     EVP_PKEY *ckey = s->s3->peer_tmp, *skey = NULL;",
          "1526:     if (ckey == NULL) {",
          "1527:         SSLerr(SSL_F_ADD_CLIENT_KEY_SHARE_EXT, ERR_R_INTERNAL_ERROR);",
          "1528:         return 0;",
          "1529:     }",
          "1531:     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_key_share)",
          "1532:             || !WPACKET_start_sub_packet_u16(pkt)",
          "1533:             || !WPACKET_put_bytes_u16(pkt, s->s3->group_id)) {",
          "1534:         SSLerr(SSL_F_ADD_CLIENT_KEY_SHARE_EXT, ERR_R_INTERNAL_ERROR);",
          "1535:         return 0;",
          "1536:     }",
          "1538:     skey = ssl_generate_pkey(ckey);",
          "1539:     if (skey == NULL) {",
          "1540:         SSLerr(SSL_F_ADD_CLIENT_KEY_SHARE_EXT, ERR_R_MALLOC_FAILURE);",
          "1541:         return 0;",
          "1542:     }",
          "1545:     encoded_pt_len = EVP_PKEY_get1_tls_encodedpoint(skey, &encodedPoint);",
          "1546:     if (encoded_pt_len == 0) {",
          "1547:         SSLerr(SSL_F_ADD_CLIENT_KEY_SHARE_EXT, ERR_R_EC_LIB);",
          "1548:         EVP_PKEY_free(skey);",
          "1549:         return 0;",
          "1550:     }",
          "1552:     if (!WPACKET_sub_memcpy_u16(pkt, encodedPoint, encoded_pt_len)",
          "1553:             || !WPACKET_close(pkt)) {",
          "1554:         SSLerr(SSL_F_ADD_CLIENT_KEY_SHARE_EXT, ERR_R_INTERNAL_ERROR);",
          "1555:         EVP_PKEY_free(skey);",
          "1556:         OPENSSL_free(encodedPoint);",
          "1557:         return 0;",
          "1558:     }",
          "1559:     OPENSSL_free(encodedPoint);",
          "1562:     s->s3->tmp.pkey = skey;",
          "1563:     if (ssl_derive(s, skey, ckey, 1) == 0) {",
          "1565:         SSLerr(SSL_F_ADD_CLIENT_KEY_SHARE_EXT, ERR_R_INTERNAL_ERROR);",
          "1566:         return 0;",
          "1567:     }",
          "1569:     return 1;",
          "1570: }",
          "1572: int ssl_add_serverhello_tlsext(SSL *s, WPACKET *pkt, int *al)",
          "1573: {",
          "1574: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "1575:     int next_proto_neg_seen;",
          "1576: #endif",
          "1577: #ifndef OPENSSL_NO_EC",
          "1578:     unsigned long alg_k = s->s3->tmp.new_cipher->algorithm_mkey;",
          "1579:     unsigned long alg_a = s->s3->tmp.new_cipher->algorithm_auth;",
          "1580:     int using_ecc = (alg_k & SSL_kECDHE) || (alg_a & SSL_aECDSA);",
          "1581:     using_ecc = using_ecc && (s->session->tlsext_ecpointformatlist != NULL);",
          "1582: #endif",
          "1584:     if (!WPACKET_start_sub_packet_u16(pkt)",
          "1585:             || !WPACKET_set_flags(pkt, WPACKET_FLAGS_ABANDON_ON_ZERO_LENGTH)) {",
          "1586:         SSLerr(SSL_F_SSL_ADD_SERVERHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1587:         return 0;",
          "1588:     }",
          "1590:     if (s->s3->send_connection_binding &&",
          "1591:             !ssl_add_serverhello_renegotiate_ext(s, pkt)) {",
          "1592:         SSLerr(SSL_F_SSL_ADD_SERVERHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1593:         return 0;",
          "1594:     }",
          "1597:     if (s->version == SSL3_VERSION)",
          "1598:         goto done;",
          "1600:     if (!s->hit && s->servername_done == 1",
          "1601:             && s->session->tlsext_hostname != NULL) {",
          "1602:         if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_server_name)",
          "1603:                 || !WPACKET_put_bytes_u16(pkt, 0)) {",
          "1604:             SSLerr(SSL_F_SSL_ADD_SERVERHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1605:             return 0;",
          "1606:         }",
          "1607:     }",
          "1608: #ifndef OPENSSL_NO_EC",
          "1609:     if (using_ecc) {",
          "1610:         const unsigned char *plist;",
          "1611:         size_t plistlen;",
          "1615:         tls1_get_formatlist(s, &plist, &plistlen);",
          "1617:         if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_ec_point_formats)",
          "1618:                 || !WPACKET_start_sub_packet_u16(pkt)",
          "1619:                 || !WPACKET_sub_memcpy_u8(pkt, plist, plistlen)",
          "1620:                 || !WPACKET_close(pkt)) {",
          "1621:             SSLerr(SSL_F_SSL_ADD_SERVERHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1622:             return 0;",
          "1623:         }",
          "1624:     }",
          "1631:     if (s->tlsext_ticket_expected && tls_use_ticket(s)) {",
          "1632:         if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_session_ticket)",
          "1633:                 || !WPACKET_put_bytes_u16(pkt, 0)) {",
          "1634:             SSLerr(SSL_F_SSL_ADD_SERVERHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1635:             return 0;",
          "1636:         }",
          "1637:     } else {",
          "1642:         s->tlsext_ticket_expected = 0;",
          "1643:     }",
          "1645:     if (s->tlsext_status_expected) {",
          "1646:         if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_status_request)",
          "1647:                 || !WPACKET_put_bytes_u16(pkt, 0)) {",
          "1648:             SSLerr(SSL_F_SSL_ADD_SERVERHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1649:             return 0;",
          "1650:         }",
          "1651:     }",
          "1652: #ifndef OPENSSL_NO_SRTP",
          "1653:     if (SSL_IS_DTLS(s) && s->srtp_profile) {",
          "1654:         if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_use_srtp)",
          "1655:                 || !WPACKET_start_sub_packet_u16(pkt)",
          "1656:                 || !WPACKET_put_bytes_u16(pkt, 2)",
          "1657:                 || !WPACKET_put_bytes_u16(pkt, s->srtp_profile->id)",
          "1658:                 || !WPACKET_put_bytes_u8(pkt, 0)",
          "1659:                 || !WPACKET_close(pkt)) {",
          "1660:             SSLerr(SSL_F_SSL_ADD_SERVERHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1661:             return 0;",
          "1662:         }",
          "1663:     }",
          "1664: #endif",
          "1666:     if (((s->s3->tmp.new_cipher->id & 0xFFFF) == 0x80",
          "1667:          || (s->s3->tmp.new_cipher->id & 0xFFFF) == 0x81)",
          "1668:         && (SSL_get_options(s) & SSL_OP_CRYPTOPRO_TLSEXT_BUG)) {",
          "1669:         const unsigned char cryptopro_ext[36] = {",
          "1672:             0x30, 0x1e, 0x30, 0x08, 0x06, 0x06, 0x2a, 0x85,",
          "1673:             0x03, 0x02, 0x02, 0x09, 0x30, 0x08, 0x06, 0x06,",
          "1674:             0x2a, 0x85, 0x03, 0x02, 0x02, 0x16, 0x30, 0x08,",
          "1675:             0x06, 0x06, 0x2a, 0x85, 0x03, 0x02, 0x02, 0x17",
          "1676:         };",
          "1677:         if (!WPACKET_memcpy(pkt, cryptopro_ext, sizeof(cryptopro_ext))) {",
          "1678:             SSLerr(SSL_F_SSL_ADD_SERVERHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1679:             return 0;",
          "1680:         }",
          "1681:     }",
          "1683: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "1684:     next_proto_neg_seen = s->s3->next_proto_neg_seen;",
          "1685:     s->s3->next_proto_neg_seen = 0;",
          "1686:     if (next_proto_neg_seen && s->ctx->next_protos_advertised_cb) {",
          "1687:         const unsigned char *npa;",
          "1688:         unsigned int npalen;",
          "1689:         int r;",
          "1691:         r = s->ctx->next_protos_advertised_cb(s, &npa, &npalen,",
          "1692:                                               s->",
          "1693:                                               ctx->next_protos_advertised_cb_arg);",
          "1694:         if (r == SSL_TLSEXT_ERR_OK) {",
          "1695:             if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_next_proto_neg)",
          "1696:                     || !WPACKET_sub_memcpy_u16(pkt, npa, npalen)) {",
          "1697:                 SSLerr(SSL_F_SSL_ADD_SERVERHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1698:                 return 0;",
          "1699:             }",
          "1700:             s->s3->next_proto_neg_seen = 1;",
          "1701:         }",
          "1702:     }",
          "1703: #endif",
          "1705:     if (SSL_IS_TLS13(s) && !s->hit && !add_client_key_share_ext(s, pkt, al))",
          "1706:         return 0;",
          "1708:     if (!custom_ext_add(s, 1, pkt, al)) {",
          "1709:         SSLerr(SSL_F_SSL_ADD_SERVERHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1710:         return 0;",
          "1711:     }",
          "1713:     if (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) {",
          "1718:         if (s->s3->tmp.new_cipher->algorithm_mac == SSL_AEAD",
          "1719:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4",
          "1720:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT",
          "1721:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)",
          "1722:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "1723:         else {",
          "1724:             if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_encrypt_then_mac)",
          "1725:                     || !WPACKET_put_bytes_u16(pkt, 0)) {",
          "1726:                 SSLerr(SSL_F_SSL_ADD_SERVERHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1727:                 return 0;",
          "1728:             }",
          "1729:         }",
          "1730:     }",
          "1731:     if (s->s3->flags & TLS1_FLAGS_RECEIVED_EXTMS) {",
          "1732:         if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_extended_master_secret)",
          "1733:                 || !WPACKET_put_bytes_u16(pkt, 0)) {",
          "1734:             SSLerr(SSL_F_SSL_ADD_SERVERHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1735:             return 0;",
          "1736:         }",
          "1737:     }",
          "1739:     if (s->s3->alpn_selected != NULL) {",
          "1740:         if (!WPACKET_put_bytes_u16(pkt,",
          "1741:                     TLSEXT_TYPE_application_layer_protocol_negotiation)",
          "1742:                 || !WPACKET_start_sub_packet_u16(pkt)",
          "1743:                 || !WPACKET_start_sub_packet_u16(pkt)",
          "1744:                 || !WPACKET_sub_memcpy_u8(pkt, s->s3->alpn_selected,",
          "1745:                                           s->s3->alpn_selected_len)",
          "1746:                 || !WPACKET_close(pkt)",
          "1747:                 || !WPACKET_close(pkt)) {",
          "1748:             SSLerr(SSL_F_SSL_ADD_SERVERHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1749:             return 0;",
          "1750:         }",
          "1751:     }",
          "1753:  done:",
          "1754:     if (!WPACKET_close(pkt)) {",
          "1755:         SSLerr(SSL_F_SSL_ADD_SERVERHELLO_TLSEXT, ERR_R_INTERNAL_ERROR);",
          "1756:         return 0;",
          "1757:     }",
          "1758:     return 1;",
          "1759: }",
          "1766: static int tls1_alpn_handle_client_hello_late(SSL *s, int *al)",
          "1767: {",
          "1768:     const unsigned char *selected = NULL;",
          "1769:     unsigned char selected_len = 0;",
          "1771:     if (s->ctx->alpn_select_cb != NULL && s->s3->alpn_proposed != NULL) {",
          "1772:         int r = s->ctx->alpn_select_cb(s, &selected, &selected_len,",
          "1773:                                        s->s3->alpn_proposed,",
          "1774:                                        (unsigned int)s->s3->alpn_proposed_len,",
          "1775:                                        s->ctx->alpn_select_cb_arg);",
          "1777:         if (r == SSL_TLSEXT_ERR_OK) {",
          "1778:             OPENSSL_free(s->s3->alpn_selected);",
          "1779:             s->s3->alpn_selected = OPENSSL_memdup(selected, selected_len);",
          "1780:             if (s->s3->alpn_selected == NULL) {",
          "1782:                 return 0;",
          "1783:             }",
          "1784:             s->s3->alpn_selected_len = selected_len;",
          "1785: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "1787:             s->s3->next_proto_neg_seen = 0;",
          "1788: #endif",
          "1789:         } else {",
          "1791:             return 0;",
          "1792:         }",
          "1793:     }",
          "1795:     return 1;",
          "1796: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2161:     return 1;",
          "2162: }",
          "2170: void ssl_set_default_md(SSL *s)",
          "2171: {",
          "",
          "[Removed Lines]",
          "2164: int ssl_prepare_serverhello_tlsext(SSL *s)",
          "2165: {",
          "2166:     return 1;",
          "2167: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2228:     return 0;",
          "2229: }",
          "2283: int ssl_check_serverhello_tlsext(SSL *s)",
          "2284: {",
          "2285:     int ret = SSL_TLSEXT_ERR_NOACK;",
          "",
          "[Removed Lines]",
          "2235: int ssl_check_clienthello_tlsext_late(SSL *s, int *al)",
          "2236: {",
          "2237:     s->tlsext_status_expected = 0;",
          "2245:     if ((s->tlsext_status_type != -1) && s->ctx && s->ctx->tlsext_status_cb) {",
          "2246:         int ret;",
          "2247:         CERT_PKEY *certpkey;",
          "2248:         certpkey = ssl_get_server_send_pkey(s);",
          "2250:         if (certpkey != NULL) {",
          "2255:             s->cert->key = certpkey;",
          "2256:             ret = s->ctx->tlsext_status_cb(s, s->ctx->tlsext_status_arg);",
          "2257:             switch (ret) {",
          "2259:             case SSL_TLSEXT_ERR_NOACK:",
          "2260:                 s->tlsext_status_expected = 0;",
          "2261:                 break;",
          "2263:             case SSL_TLSEXT_ERR_OK:",
          "2264:                 if (s->tlsext_ocsp_resp)",
          "2265:                     s->tlsext_status_expected = 1;",
          "2266:                 break;",
          "2268:             case SSL_TLSEXT_ERR_ALERT_FATAL:",
          "2269:             default:",
          "2271:                 return 0;",
          "2272:             }",
          "2273:         }",
          "2274:     }",
          "2276:     if (!tls1_alpn_handle_client_hello_late(s, al)) {",
          "2277:         return 0;",
          "2278:     }",
          "2280:     return 1;",
          "2281: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/t1_reneg.c||ssl/t1_reneg.c": [
          "File: ssl/t1_reneg.c -> ssl/t1_reneg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: #include <openssl/objects.h>",
          "12: #include \"ssl_locl.h\"",
          "",
          "[Removed Lines]",
          "15: int ssl_add_serverhello_renegotiate_ext(SSL *s, WPACKET *pkt)",
          "16: {",
          "17:     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_renegotiate)",
          "18:             || !WPACKET_start_sub_packet_u16(pkt)",
          "19:             || !WPACKET_start_sub_packet_u8(pkt)",
          "20:             || !WPACKET_memcpy(pkt, s->s3->previous_client_finished,",
          "21:                                s->s3->previous_client_finished_len)",
          "22:             || !WPACKET_memcpy(pkt, s->s3->previous_server_finished,",
          "23:                                s->s3->previous_server_finished_len)",
          "24:             || !WPACKET_close(pkt)",
          "25:             || !WPACKET_close(pkt))",
          "26:         return 0;",
          "28:     return 1;",
          "29: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "02e22dd444c46728008a7c17e0758327f1c31e67",
      "candidate_info": {
        "commit_hash": "02e22dd444c46728008a7c17e0758327f1c31e67",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/02e22dd444c46728008a7c17e0758327f1c31e67",
        "files": [
          "test/build.info",
          "test/dtls_mtu_test.c",
          "test/recipes/80-test_dtls_mtu.t"
        ],
        "message": "Add test cases for DTLS_get_data_mtu()\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "test/build.info||test/build.info",
          "test/dtls_mtu_test.c||test/dtls_mtu_test.c",
          "test/recipes/80-test_dtls_mtu.t||test/recipes/80-test_dtls_mtu.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/dtls_mtu_test.c||test/dtls_mtu_test.c"
          ],
          "candidate": [
            "test/dtls_mtu_test.c||test/dtls_mtu_test.c"
          ]
        }
      },
      "candidate_diff": {
        "test/build.info||test/build.info": [
          "File: test/build.info -> test/build.info",
          "--- Hunk 1 ---",
          "[Context before]",
          "275:   INCLUDE[bio_enc_test]=../include",
          "276:   DEPEND[bio_enc_test]=../libcrypto",
          "278:   IF[{- $disabled{shared} -}]",
          "279:     PROGRAMS_NO_INST=wpackettest cipher_overhead_test",
          "280:     SOURCE[wpackettest]=wpackettest.c testutil.c",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "278:   IF[{- !$disabled{psk} -}]",
          "279:     PROGRAMS_NO_INST=dtls_mtu_test",
          "280:     SOURCE[dtls_mtu_test]=dtls_mtu_test.c ssltestlib.c",
          "281:     INCLUDE[dtls_mtu_test]=.. ../include",
          "282:     DEPEND[dtls_mtu_test]=../libcrypto ../libssl",
          "283:   ENDIF",
          "",
          "---------------"
        ],
        "test/dtls_mtu_test.c||test/dtls_mtu_test.c": [
          "File: test/dtls_mtu_test.c -> test/dtls_mtu_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: #include <stdio.h>",
          "11: #include <string.h>",
          "13: #include <openssl/dtls1.h>",
          "14: #include <openssl/ssl.h>",
          "15: #include <openssl/err.h>",
          "17: #include \"ssltestlib.h\"",
          "20: #include \"../ssl/ssl_locl.h\"",
          "22: static int debug = 0;",
          "24: static unsigned int clnt_psk_callback(SSL *ssl, const char *hint,",
          "25:                                       char *ident, unsigned int max_ident_len,",
          "26:                                       unsigned char *psk,",
          "27:                                       unsigned int max_psk_len)",
          "28: {",
          "29:     snprintf(ident, max_ident_len, \"psk\");",
          "31:     if (max_psk_len > 20)",
          "32:         max_psk_len = 20;",
          "33:     memset(psk, 0x5a, max_psk_len);",
          "35:     return max_psk_len;",
          "36: }",
          "38: static unsigned int srvr_psk_callback(SSL *ssl, const char *identity,",
          "39:                                       unsigned char *psk,",
          "40:                                       unsigned int max_psk_len)",
          "41: {",
          "42:     if (max_psk_len > 20)",
          "43:         max_psk_len = 20;",
          "44:     memset(psk, 0x5a, max_psk_len);",
          "45:     return max_psk_len;",
          "46: }",
          "48: static int mtu_test(SSL_CTX *ctx, const char *cs, int no_etm)",
          "49: {",
          "50:     SSL *srvr_ssl = NULL, *clnt_ssl = NULL;",
          "51:     BIO *sc_bio = NULL;",
          "52:     int i;",
          "53:     size_t s;",
          "54:     size_t mtus[30];",
          "55:     unsigned char buf[600];",
          "56:     int rv = 0;",
          "58:     memset(buf, 0x5a, sizeof(buf));",
          "60:     if (create_ssl_objects(ctx, ctx, &srvr_ssl, &clnt_ssl, NULL, NULL) != 1)",
          "61:         goto out;",
          "63:     if (no_etm)",
          "64:         SSL_set_options(srvr_ssl, SSL_OP_NO_ENCRYPT_THEN_MAC);",
          "66:     if (SSL_set_cipher_list(srvr_ssl, cs) != 1 ||",
          "67:         SSL_set_cipher_list(clnt_ssl, cs) != 1) {",
          "68:         ERR_print_errors_fp(stdout);",
          "69:         goto out;",
          "70:     }",
          "71:     sc_bio = SSL_get_rbio(srvr_ssl);",
          "73:     if (create_ssl_connection(clnt_ssl, srvr_ssl) != 1)",
          "74:         goto out;",
          "76:     if (debug)",
          "77:         printf(\"Channel established\\n\");",
          "81:     for (i = 0; i < 30; i++) {",
          "82:         SSL_set_mtu(clnt_ssl, 500 + i);",
          "83:         mtus[i] = DTLS_get_data_mtu(clnt_ssl);",
          "84:         if (debug)",
          "85:             printf(\"%s%s payload MTU for record mtu %d = %\"OSSLzu\"\\n\",",
          "86:                    cs, no_etm ? \"-noEtM\":\"\", 500 + i, mtus[i]);",
          "87:         if (mtus[i] == 0) {",
          "88:             fprintf(stderr,",
          "89:                     \"payload MTU failed with record MTU %d for %s\\n\",",
          "90:                     500 + i, cs);",
          "91:             goto out;",
          "92:         }",
          "93:     }",
          "96:     SSL_set_mtu(clnt_ssl, 1000);",
          "101:     for (s = mtus[0]; s <= mtus[29]; s++) {",
          "102:         size_t reclen;",
          "103:         if (SSL_write(clnt_ssl, buf, s) != (int)s) {",
          "104:             ERR_print_errors_fp(stdout);",
          "105:             goto out;",
          "106:         }",
          "107:         reclen = BIO_read(sc_bio, buf, sizeof(buf));",
          "108:         if (debug)",
          "109:             printf(\"record %\"OSSLzu\" for payload %\"OSSLzu\"\\n\", reclen, s);",
          "111:         for (i = 0; i < 30; i++) {",
          "114:             if (s <= mtus[i] && reclen > (size_t)(500 + i)) {",
          "117:                 fprintf(stderr,",
          "118:                         \"%s: Payload MTU %\"OSSLzu\" reported for record MTU %d\\n\"",
          "119:                         \"but sending a payload of %\"OSSLzu\" made a record of %\"OSSLzu\"(too large)\\n\",",
          "120:                         cs, mtus[i], 500 + i, s, reclen);",
          "121:                 goto out;",
          "122:             }",
          "123:             if (s > mtus[i] && reclen <= (size_t)(500 + i)) {",
          "127:                 fprintf(stderr,",
          "128:                         \"%s: Payload MTU %\"OSSLzu\" reported for record MTU %d\\n\"",
          "129:                         \"but sending a payload of %\"OSSLzu\" made a record of %\"OSSLzu\" (too small)\\n\",",
          "130:                         cs, mtus[i], 500 + i, s, reclen);",
          "131:                 goto out;",
          "132:             }",
          "133:         }",
          "134:     }",
          "135:     rv = 1;",
          "136:     if (SSL_USE_ETM(clnt_ssl))",
          "137:         rv = 2;",
          "138:  out:",
          "139:     SSL_free(clnt_ssl);",
          "140:     SSL_free(srvr_ssl);",
          "141:     return rv;",
          "142: }",
          "144: int main(void)",
          "145: {",
          "146:     SSL_CTX *ctx = SSL_CTX_new(DTLS_method());",
          "147:     STACK_OF(SSL_CIPHER) *ciphers;",
          "148:     int i, rv = 0;",
          "150:     SSL_CTX_set_psk_server_callback(ctx, srvr_psk_callback);",
          "151:     SSL_CTX_set_psk_client_callback(ctx, clnt_psk_callback);",
          "152:     SSL_CTX_set_security_level(ctx, 0);",
          "157:     if (!SSL_CTX_set_cipher_list(ctx, \"PSK\")) {",
          "158:         fprintf(stderr, \"Failed to set PSK cipher list\\n\");",
          "159:         goto out;",
          "160:     }",
          "162:     ciphers = SSL_CTX_get_ciphers(ctx);",
          "163:     for (i = 0; i < sk_SSL_CIPHER_num(ciphers); i++) {",
          "164:         const SSL_CIPHER *cipher = sk_SSL_CIPHER_value(ciphers, i);",
          "165:         const char *cipher_name = SSL_CIPHER_get_name(cipher);",
          "168:         if (strncmp(cipher_name, \"PSK-\", 4))",
          "169:             continue;",
          "171:         rv = mtu_test(ctx, cipher_name, 0);",
          "172:         if (!rv)",
          "173:             break;",
          "175:         printf(\"DTLS MTU test OK for %s\\n\", cipher_name);",
          "176:         if (rv == 1)",
          "177:             continue;",
          "180:         rv = mtu_test(ctx, cipher_name, 1);",
          "181:         if (!rv)",
          "182:             break;",
          "184:         printf(\"DTLS MTU test OK for %s without Encrypt-then-MAC\\n\", cipher_name);",
          "185:     }",
          "186:  out:",
          "187:     SSL_CTX_free(ctx);",
          "189:     return !rv;",
          "190: }",
          "",
          "---------------"
        ],
        "test/recipes/80-test_dtls_mtu.t||test/recipes/80-test_dtls_mtu.t": [
          "File: test/recipes/80-test_dtls_mtu.t -> test/recipes/80-test_dtls_mtu.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #! /usr/bin/env perl",
          "2: # Copyright 2016 The OpenSSL Project Authors. All Rights Reserved.",
          "3: #",
          "4: # Licensed under the OpenSSL license (the \"License\").  You may not use",
          "5: # this file except in compliance with the License.  You can obtain a copy",
          "6: # in the file LICENSE in the source distribution or at",
          "7: # https://www.openssl.org/source/license.html",
          "10: use OpenSSL::Test;",
          "11: use OpenSSL::Test::Utils;",
          "13: my $test_name = \"test_dtls_mtu\";",
          "14: setup($test_name);",
          "16: plan skip_all => \"$test_name needs DTLS and PSK support enabled\"",
          "17:     if disabled(\"dtls1_2\") || disabled(\"psk\");",
          "19: plan tests => 1;",
          "21: ok(run(test([\"dtls_mtu_test\"])), \"running dtls_mtu_test\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
      "candidate_info": {
        "commit_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
        "files": [
          "include/openssl/ssl3.h",
          "ssl/record/rec_layer_s3.c",
          "ssl/record/ssl3_record.c",
          "ssl/ssl_locl.h",
          "ssl/t1_enc.c",
          "ssl/t1_lib.c"
        ],
        "message": "Don't change the state of the ETM flags until CCS processing\n\nChanging the ciphersuite during a renegotiation can result in a crash\nleading to a DoS attack. ETM has not been implemented in 1.1.0 for DTLS\nso this is TLS only.\n\nThe problem is caused by changing the flag indicating whether to use ETM\nor not immediately on negotiation of ETM, rather than at CCS. Therefore,\nduring a renegotiation, if the ETM state is changing (usually due to a\nchange of ciphersuite), then an error/crash will occur.\n\nDue to the fact that there are separate CCS messages for read and write\nwe actually now need two flags to determine whether to use ETM or not.\n\nCVE-2017-3733\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "include/openssl/ssl3.h||include/openssl/ssl3.h",
          "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
          "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h",
          "ssl/t1_enc.c||ssl/t1_enc.c",
          "ssl/t1_lib.c||ssl/t1_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "include/openssl/ssl3.h||include/openssl/ssl3.h",
            "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
            "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
            "ssl/ssl_locl.h||ssl/ssl_locl.h",
            "ssl/t1_enc.c||ssl/t1_enc.c"
          ],
          "candidate": [
            "include/openssl/ssl3.h||include/openssl/ssl3.h",
            "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
            "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
            "ssl/ssl_locl.h||ssl/ssl_locl.h",
            "ssl/t1_enc.c||ssl/t1_enc.c"
          ]
        }
      },
      "candidate_diff": {
        "include/openssl/ssl3.h||include/openssl/ssl3.h": [
          "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "264: # define TLS1_FLAGS_SKIP_CERT_VERIFY             0x0010",
          "270: # define TLS1_FLAGS_RECEIVED_EXTMS               0x0200",
          "272: # define SSL3_MT_HELLO_REQUEST                   0",
          "273: # define SSL3_MT_CLIENT_HELLO                    1",
          "274: # define SSL3_MT_SERVER_HELLO                    2",
          "",
          "[Removed Lines]",
          "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             0x0100",
          "",
          "[Added Lines]",
          "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_READ        0x0100",
          "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             TLS1_FLAGS_ENCRYPT_THEN_MAC_READ",
          "273: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE       0x0400",
          "",
          "---------------"
        ],
        "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
          "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "395:     if (type == SSL3_RT_APPLICATION_DATA &&",
          "396:         u_len >= 4 * (max_send_fragment = s->max_send_fragment) &&",
          "397:         s->compress == NULL && s->msg_callback == NULL &&",
          "399:         EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_write_ctx)) &",
          "400:         EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK) {",
          "401:         unsigned char aad[13];",
          "",
          "[Removed Lines]",
          "398:         !SSL_USE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
          "",
          "[Added Lines]",
          "398:         !SSL_WRITE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "795:             if (s->method->ssl3_enc->mac(s, &wr[j],",
          "796:                                          &(outbuf[j][wr[j].length + eivlen]),",
          "797:                                          1) < 0)",
          "",
          "[Removed Lines]",
          "794:         if (!SSL_USE_ETM(s) && mac_size != 0) {",
          "",
          "[Added Lines]",
          "794:         if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "814:         goto err;",
          "816:     for (j = 0; j < numpipes; j++) {",
          "818:             if (s->method->ssl3_enc->mac(s, &wr[j],",
          "819:                                          outbuf[j] + wr[j].length, 1) < 0)",
          "820:                 goto err;",
          "",
          "[Removed Lines]",
          "817:         if (SSL_USE_ETM(s) && mac_size != 0) {",
          "",
          "[Added Lines]",
          "817:         if (SSL_WRITE_ETM(s) && mac_size != 0) {",
          "",
          "---------------"
        ],
        "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
          "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "350:         unsigned char *mac;",
          "351:         mac_size = EVP_MD_CTX_size(s->read_hash);",
          "352:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
          "",
          "[Removed Lines]",
          "349:     if (SSL_USE_ETM(s) && s->read_hash) {",
          "",
          "[Added Lines]",
          "349:     if (SSL_READ_ETM(s) && s->read_hash) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "394:     if ((sess != NULL) &&",
          "395:         (s->enc_read_ctx != NULL) &&",
          "398:         unsigned char *mac = NULL;",
          "399:         unsigned char mac_tmp[EVP_MAX_MD_SIZE];",
          "",
          "[Removed Lines]",
          "396:         (EVP_MD_CTX_md(s->read_hash) != NULL) && !SSL_USE_ETM(s)) {",
          "",
          "[Added Lines]",
          "396:         (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "823:         }",
          "825:         ret = 1;",
          "827:             mac_size = EVP_MD_CTX_size(s->read_hash);",
          "828:         if ((bs != 1) && !send) {",
          "829:             int tmpret;",
          "",
          "[Removed Lines]",
          "826:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
          "",
          "[Added Lines]",
          "826:         if (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "997:     header[11] = (rec->length) >> 8;",
          "998:     header[12] = (rec->length) & 0xff;",
          "1001:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
          "1002:         ssl3_cbc_record_digest_supported(mac_ctx)) {",
          "",
          "[Removed Lines]",
          "1000:     if (!send && !SSL_USE_ETM(ssl) &&",
          "",
          "[Added Lines]",
          "1000:     if (!send && !SSL_READ_ETM(ssl) &&",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1022:             EVP_MD_CTX_free(hmac);",
          "1023:             return -1;",
          "1024:         }",
          "1026:             if (!tls_fips_digest_extra(ssl->enc_read_ctx,",
          "1027:                                        mac_ctx, rec->input,",
          "1028:                                        rec->length, rec->orig_len)) {",
          "",
          "[Removed Lines]",
          "1025:         if (!send && !SSL_USE_ETM(ssl) && FIPS_mode())",
          "",
          "[Added Lines]",
          "1025:         if (!send && !SSL_READ_ETM(ssl) && FIPS_mode())",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "378: # define SSL_CLIENT_USE_SIGALGS(s)        \\",
          "379:     SSL_CLIENT_USE_TLS1_2_CIPHERS(s)",
          "384: # define SSL_PKEY_RSA_ENC        0",
          "",
          "[Removed Lines]",
          "381: # define SSL_USE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC)",
          "",
          "[Added Lines]",
          "381: # define SSL_READ_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_READ)",
          "382: # define SSL_WRITE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1111:     unsigned char *alpn_client_proto_list;",
          "1112:     unsigned alpn_client_proto_list_len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1116:     int tlsext_use_etm;",
          "",
          "---------------"
        ],
        "ssl/t1_enc.c||ssl/t1_enc.c": [
          "File: ssl/t1_enc.c -> ssl/t1_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "130: #endif",
          "132:     if (which & SSL3_CC_READ) {",
          "133:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
          "134:             s->mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM;",
          "135:         else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133:         if (s->tlsext_use_etm)",
          "134:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
          "135:         else",
          "136:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "168:         mac_secret = &(s->s3->read_mac_secret[0]);",
          "169:         mac_secret_size = &(s->s3->read_mac_secret_size);",
          "170:     } else {",
          "171:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
          "172:             s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
          "173:         else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "176:         if (s->tlsext_use_etm)",
          "177:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
          "178:         else",
          "179:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "367:     if (s->s3->tmp.key_block_length != 0)",
          "368:         return (1);",
          "373:         SSLerr(SSL_F_TLS1_SETUP_KEY_BLOCK, SSL_R_CIPHER_OR_HASH_UNAVAILABLE);",
          "374:         return (0);",
          "375:     }",
          "",
          "[Removed Lines]",
          "370:     if (!ssl_cipher_get_evp",
          "371:         (s->session, &c, &hash, &mac_type, &mac_secret_size, &comp,",
          "372:          SSL_USE_ETM(s))) {",
          "",
          "[Added Lines]",
          "380:     if (!ssl_cipher_get_evp(s->session, &c, &hash, &mac_type, &mac_secret_size,",
          "381:                             &comp, s->tlsext_use_etm)) {",
          "",
          "---------------"
        ],
        "ssl/t1_lib.c||ssl/t1_lib.c": [
          "File: ssl/t1_lib.c -> ssl/t1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1674: #endif",
          "1675:     if (!custom_ext_add(s, 1, &ret, limit, al))",
          "1676:         return NULL;",
          "",
          "[Removed Lines]",
          "1677:     if (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) {",
          "",
          "[Added Lines]",
          "1677:     if (s->tlsext_use_etm) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1683:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4",
          "1684:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT",
          "1685:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)",
          "1687:         else {",
          "",
          "[Removed Lines]",
          "1686:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "",
          "[Added Lines]",
          "1686:             s->tlsext_use_etm = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1917:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
          "1918:     s->s3->tmp.peer_sigalgs = NULL;",
          "1921: #ifndef OPENSSL_NO_SRP",
          "1922:     OPENSSL_free(s->srp_ctx.login);",
          "",
          "[Removed Lines]",
          "1919:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "",
          "[Added Lines]",
          "1919:     s->tlsext_use_etm = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2264:         }",
          "2265: #endif",
          "2266:         else if (type == TLSEXT_TYPE_encrypt_then_mac)",
          "",
          "[Removed Lines]",
          "2267:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "",
          "[Added Lines]",
          "2267:             s->tlsext_use_etm = 1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2366:                              SSL_DTLSEXT_HB_DONT_SEND_REQUESTS);",
          "2367: #endif",
          "2371:     s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;",
          "",
          "[Removed Lines]",
          "2369:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "",
          "[Added Lines]",
          "2369:     s->tlsext_use_etm = 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2586:             if (s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD",
          "2587:                 && s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)",
          "2589:         } else if (type == TLSEXT_TYPE_extended_master_secret) {",
          "2590:             s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;",
          "2591:             if (!s->hit)",
          "",
          "[Removed Lines]",
          "2588:                 s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "",
          "[Added Lines]",
          "2588:                 s->tlsext_use_etm = 1;",
          "",
          "---------------"
        ]
      }
    }
  ]
}