{
  "cve_id": "CVE-2019-10664",
  "cve_desc": "Domoticz before 4.10578 allows SQL Injection via the idx parameter in CWebServer::GetFloorplanImage in WebServer.cpp.",
  "repo": "domoticz/domoticz",
  "patch_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
  "patch_info": {
    "commit_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/ee70db46f81afa582c96b887b73bcd2a86feda00",
    "files": [
      "main/WebServer.cpp"
    ],
    "message": "Fixed possible SQL Injection Vulnerability (Thanks to Fabio Carretto!)",
    "before_after_code_files": [
      "main/WebServer.cpp||main/WebServer.cpp"
    ]
  },
  "patch_diff": {
    "main/WebServer.cpp||main/WebServer.cpp": [
      "File: main/WebServer.cpp -> main/WebServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10772:     return;",
      "10773:    }",
      "10774:    std::vector<std::vector<std::string> > result;",
      "10776:    if (result.empty())",
      "10777:     return;",
      "10778:    reply::set_content(&rep, result[0][0].begin(), result[0][0].end());",
      "",
      "[Removed Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%s\", idx.c_str());",
      "",
      "[Added Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%d\", atol(idx.c_str()));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5524d792df2ee76b9c0486c1226a8443f8ea4426",
      "candidate_info": {
        "commit_hash": "5524d792df2ee76b9c0486c1226a8443f8ea4426",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/5524d792df2ee76b9c0486c1226a8443f8ea4426",
        "files": [
          "hardware/MQTT.h"
        ],
        "message": "MQTT removed obsolete OnMQTTMessage declaration",
        "before_after_code_files": [
          "hardware/MQTT.h||hardware/MQTT.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/MQTT.h||hardware/MQTT.h": [
          "File: hardware/MQTT.h -> hardware/MQTT.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:  virtual void on_message(const struct mosquitto_message *message) override;",
          "24:  void on_subscribe(int mid, int qos_count, const int *granted_qos) override;",
          "27:  void SendMessage(const std::string &Topic, const std::string &Message);",
          "29:  bool m_bDoReconnect;",
          "",
          "[Removed Lines]",
          "26:  void OnMQTTMessage(char *topicName, int topicLen,  void *pMessage);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "43cceab0289610acc966b991bce7a98695a011c1",
      "candidate_info": {
        "commit_hash": "43cceab0289610acc966b991bce7a98695a011c1",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/43cceab0289610acc966b991bce7a98695a011c1",
        "files": [
          "main/SQLHelper.h"
        ],
        "message": "Correcting user variable enum",
        "before_after_code_files": [
          "main/SQLHelper.h||main/SQLHelper.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/SQLHelper.h||main/SQLHelper.h": [
          "File: main/SQLHelper.h -> main/SQLHelper.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: enum _eUsrVariableType",
          "37: {",
          "38:  USERVARTYPE_INTEGER = 0,",
          "43: };",
          "45: enum _eTaskItemType",
          "",
          "[Removed Lines]",
          "39:  USERVARTYPE_FLOAT,",
          "40:  USERVARTYPE_DATE,",
          "41:  USERVARTYPE_TIME,",
          "42:  USERVARTYPE_STRING",
          "",
          "[Added Lines]",
          "39:  USERVARTYPE_FLOAT, //1",
          "40:  USERVARTYPE_STRING, //2",
          "41:  USERVARTYPE_DATE, //3 Date in format DD/MM/YYYY",
          "42:  USERVARTYPE_TIME, //4 Time in 24 hr format HH:MM",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d75673fe85b4b5cd4f11d4877b7732a9b5901585",
      "candidate_info": {
        "commit_hash": "d75673fe85b4b5cd4f11d4877b7732a9b5901585",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/d75673fe85b4b5cd4f11d4877b7732a9b5901585",
        "files": [
          "www/app/events/factories.js"
        ],
        "message": "Fixes absolute path lookup",
        "before_after_code_files": [
          "www/app/events/factories.js||www/app/events/factories.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "www/app/events/factories.js||www/app/events/factories.js": [
          "File: www/app/events/factories.js -> www/app/events/factories.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:         function get() {",
          "94:             if (!toolbox) {",
          "96:                     return response.data;",
          "97:                 })",
          "98:             }",
          "",
          "[Removed Lines]",
          "95:                 toolbox = $http.get('/app/events/blockly_toolbox.xml').then(function (response) {",
          "",
          "[Added Lines]",
          "95:                 toolbox = $http.get('app/events/blockly_toolbox.xml').then(function (response) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "75e68f293a44dc7fe4cfcce908164b8921a027e3",
      "candidate_info": {
        "commit_hash": "75e68f293a44dc7fe4cfcce908164b8921a027e3",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/75e68f293a44dc7fe4cfcce908164b8921a027e3",
        "files": [
          "www/app/devices/deviceFactory.js",
          "www/app/report/DeviceReport.js"
        ],
        "message": "Fix for YouLess meter report",
        "before_after_code_files": [
          "www/app/devices/deviceFactory.js||www/app/devices/deviceFactory.js",
          "www/app/report/DeviceReport.js||www/app/report/DeviceReport.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "www/app/devices/deviceFactory.js||www/app/devices/deviceFactory.js": [
          "File: www/app/devices/deviceFactory.js -> www/app/devices/deviceFactory.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:         this.getUnit = function () {",
          "56:             if (this.SubType === 'Custom Sensor') {",
          "58:             } else if (this.Type === 'General' && this.SubType === 'Voltage') {",
          "59:                 return 'V';",
          "60:             } else if (this.Type === 'General' && this.SubType === 'Distance') {",
          "",
          "[Removed Lines]",
          "57:                 return this.SensorUnit",
          "",
          "[Added Lines]",
          "57:                 return this.SensorUnit;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:                 return '';",
          "72:             } else if (this.Type === 'P1 Smart Meter' && this.SubType === 'Energy') {",
          "73:                 return 'kWh';",
          "74:             } else if (this.Type === 'RFXMeter' && this.SwitchTypeVal === 2) {",
          "75:                 return 'm3';",
          "76:             } else if (this.Type === 'Usage' && this.SubType === 'Electric') {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:             } else if (this.Type === 'YouLess Meter') {",
          "75:                 return 'kWh';",
          "",
          "---------------"
        ],
        "www/app/report/DeviceReport.js||www/app/report/DeviceReport.js": [
          "File: www/app/report/DeviceReport.js -> www/app/report/DeviceReport.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:             }",
          "67:             return ['Power', 'Energy', 'RFXMeter'].includes(vm.device.Type)",
          "68:                 || ['kWh'].includes(vm.device.SubType)",
          "69:                 || ['Counter Incremental'].includes(vm.device.SubType)",
          "70:                 || (vm.device.Type === 'P1 Smart Meter' && vm.device.SubType !== 'Energy');",
          "71:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:                 || ['YouLess counter'].includes(vm.device.SubType)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "77a0b09a6d09881b573d4ec72171760fdf1baaf9",
      "candidate_info": {
        "commit_hash": "77a0b09a6d09881b573d4ec72171760fdf1baaf9",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/77a0b09a6d09881b573d4ec72171760fdf1baaf9",
        "files": [
          "hardware/SolarEdgeAPI.cpp",
          "hardware/SolarEdgeAPI.h",
          "main/mainworker.cpp",
          "main/mainworker.h"
        ],
        "message": "Small code refactoring",
        "before_after_code_files": [
          "hardware/SolarEdgeAPI.cpp||hardware/SolarEdgeAPI.cpp",
          "hardware/SolarEdgeAPI.h||hardware/SolarEdgeAPI.h",
          "main/mainworker.cpp||main/mainworker.cpp",
          "main/mainworker.h||main/mainworker.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/SolarEdgeAPI.cpp||hardware/SolarEdgeAPI.cpp": [
          "File: hardware/SolarEdgeAPI.cpp -> hardware/SolarEdgeAPI.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:   if (sec_counter % 300 == 0)",
          "107:   {",
          "108:    if (m_SiteID == 0)",
          "111:    {",
          "116:    }",
          "117:    if (!m_inverters.empty())",
          "118:     GetMeterDetails();",
          "",
          "[Removed Lines]",
          "109:     GetSite();",
          "110:    if (m_SiteID != 0)",
          "112:     if (m_inverters.empty())",
          "113:     {",
          "114:      GetInverters();",
          "115:     }",
          "",
          "[Added Lines]",
          "110:     if (!GetSite())",
          "111:      continue;",
          "112:     GetInverters();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "151:  return 0;",
          "152: }",
          "155: {",
          "156:  m_SiteID = 0;",
          "157:  std::string sResult;",
          "",
          "[Removed Lines]",
          "154: void SolarEdgeAPI::GetSite()",
          "",
          "[Added Lines]",
          "151: bool SolarEdgeAPI::GetSite()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "166:  if (!bret)",
          "167:  {",
          "168:   _log.Log(LOG_ERROR, \"SolarEdgeAPI: Error getting http data!\");",
          "170:  }",
          "171: #ifdef DEBUG_SolarEdgeAPIW",
          "172:  SaveString2Disk(sResult, \"E:\\\\SolarEdge_sites.json\");",
          "",
          "[Removed Lines]",
          "169:   return;",
          "",
          "[Added Lines]",
          "166:   return false;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "179:  if ((!ret) || (!root.isObject()))",
          "180:  {",
          "181:   _log.Log(LOG_ERROR, \"SolarEdgeAPI: Invalid data received!\");",
          "183:  }",
          "184:  if (root[\"sites\"].empty() == true)",
          "185:  {",
          "186:   _log.Log(LOG_ERROR, \"SolarEdgeAPI: Invalid data received, or invalid APIKey\");",
          "188:  }",
          "189:  if (root[\"sites\"][\"count\"].empty() == true)",
          "190:  {",
          "191:   _log.Log(LOG_ERROR, \"SolarEdgeAPI: Invalid data received, or invalid APIKey\");",
          "193:  }",
          "194:  int tot_results = root[\"sites\"][\"count\"].asInt();",
          "195:  if (tot_results < 1)",
          "197:  Json::Value reading = root[\"sites\"][\"site\"][0];",
          "199:  if (reading[\"id\"].empty() == true)",
          "200:  {",
          "201:   _log.Log(LOG_ERROR, \"SolarEdgeAPI: Invalid data received, or invalid APIKey\");",
          "203:  }",
          "204:  m_SiteID = reading[\"id\"].asInt();",
          "205: }",
          "207: void SolarEdgeAPI::GetInverters()",
          "",
          "[Removed Lines]",
          "182:   return;",
          "187:   return;",
          "192:   return;",
          "196:   return;",
          "202:   return;",
          "",
          "[Added Lines]",
          "179:   return false;",
          "184:   return false;",
          "189:   return false;",
          "193:   return false;",
          "199:   return false;",
          "202:  return true;",
          "",
          "---------------"
        ],
        "hardware/SolarEdgeAPI.h||hardware/SolarEdgeAPI.h": [
          "File: hardware/SolarEdgeAPI.h -> hardware/SolarEdgeAPI.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:  bool StartHardware() override;",
          "21:  bool StopHardware() override;",
          "22:  void Do_Work();",
          "24:  void GetInverters();",
          "25:  void GetMeterDetails();",
          "26:  void GetInverterDetails(const _tInverterSettings *pInverterSettings, const int iInverterNumber);",
          "",
          "[Removed Lines]",
          "23:  void GetSite();",
          "",
          "[Added Lines]",
          "23:  bool GetSite();",
          "",
          "---------------"
        ],
        "main/mainworker.cpp||main/mainworker.cpp": [
          "File: main/mainworker.cpp -> main/mainworker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "269:    bool Enabled = (sEnabled == \"1\") ? true : false;",
          "270:    _eHardwareTypes Type = (_eHardwareTypes)atoi(sd[3].c_str());",
          "271:    std::string Address = sd[4];",
          "273:    std::string SerialPort = sd[6];",
          "274:    std::string Username = sd[7];",
          "275:    std::string Password = sd[8];",
          "",
          "[Removed Lines]",
          "272:    unsigned short Port = (unsigned short)atoi(sd[5].c_str());",
          "",
          "[Added Lines]",
          "272:    uint16_t Port = (uint16_t)atoi(sd[5].c_str());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "622:  std::string senabled = (sd[1] == \"1\") ? \"true\" : \"false\";",
          "623:  _eHardwareTypes htype = (_eHardwareTypes)atoi(sd[2].c_str());",
          "624:  std::string address = sd[3];",
          "626:  std::string serialport = sd[5];",
          "627:  std::string username = sd[6];",
          "628:  std::string password = sd[7];",
          "",
          "[Removed Lines]",
          "625:  unsigned short port = (unsigned short)atoi(sd[4].c_str());",
          "",
          "[Added Lines]",
          "625:  uint16_t port = (uint16_t)atoi(sd[4].c_str());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "642:  const std::string &Name,",
          "643:  const bool Enabled,",
          "644:  const _eHardwareTypes Type,",
          "646:  const std::string &Username, const std::string &Password,",
          "647:  const std::string &Extra,",
          "648:  const int Mode1,",
          "",
          "[Removed Lines]",
          "645:  const std::string &Address, const unsigned short Port, const std::string &SerialPort,",
          "",
          "[Added Lines]",
          "645:  const std::string &Address, const uint16_t Port, const std::string &SerialPort,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1712:  _log.Log(LOG_STATUS, \"Mainworker Stopped...\");",
          "1713: }",
          "1716: {",
          "1717:  int hindex = FindDomoticzHardware(HwdID);",
          "",
          "[Removed Lines]",
          "1715: bool MainWorker::WriteToHardware(const int HwdID, const char *pdata, const unsigned char length)",
          "",
          "[Added Lines]",
          "1715: bool MainWorker::WriteToHardware(const int HwdID, const char *pdata, const uint8_t length)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1762:  pRFXBase->SendResetCommand();",
          "1763: }",
          "1766: {",
          "1770:  std::string ID = \"\";",
          "1772:  const tRBUF *pResponse = reinterpret_cast<const tRBUF *>(pRXCommand);",
          "1773:  char szTmp[300];",
          "1774:  std::vector<std::vector<std::string> > result;",
          "",
          "[Removed Lines]",
          "1765: uint64_t MainWorker::PerformRealActionFromDomoticzClient(const unsigned char *pRXCommand, CDomoticzHardwareBase **pOriginalHardware)",
          "1768:  unsigned char devType = pRXCommand[1];",
          "1769:  unsigned char subType = pRXCommand[2];",
          "1771:  unsigned char Unit = 0;",
          "",
          "[Added Lines]",
          "1765: uint64_t MainWorker::PerformRealActionFromDomoticzClient(const uint8_t *pRXCommand, CDomoticzHardwareBase **pOriginalHardware)",
          "1768:  uint8_t devType = pRXCommand[1];",
          "1769:  uint8_t subType = pRXCommand[2];",
          "1771:  uint8_t Unit = 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1917:  return -1;",
          "1918: }",
          "1921: {",
          "1922:  if ((pHardware == NULL) || (pRXCommand == NULL))",
          "1923:   return;",
          "",
          "[Removed Lines]",
          "1920: void MainWorker::DecodeRXMessage(const CDomoticzHardwareBase *pHardware, const unsigned char *pRXCommand, const char *defaultName, const int BatteryLevel)",
          "",
          "[Added Lines]",
          "1920: void MainWorker::DecodeRXMessage(const CDomoticzHardwareBase *pHardware, const uint8_t *pRXCommand, const char *defaultName, const int BatteryLevel)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1934:  }",
          "1935: }",
          "1938: {",
          "1940:  CheckAndPushRxMessage(pHardware, pRXCommand, defaultName, BatteryLevel, false);",
          "1941: }",
          "1944: {",
          "1946:  CheckAndPushRxMessage(pHardware, pRXCommand, defaultName, BatteryLevel, true);",
          "1947: }",
          "1950: {",
          "1951:  if ((pHardware == NULL) || (pRXCommand == NULL)) {",
          "1952:   _log.Log(LOG_ERROR, \"RxQueue: cannot push message with undefined hardware (%s) or command (%s)\",",
          "",
          "[Removed Lines]",
          "1937: void MainWorker::PushRxMessage(const CDomoticzHardwareBase *pHardware, const unsigned char *pRXCommand, const char *defaultName, const int BatteryLevel)",
          "1943: void MainWorker::PushAndWaitRxMessage(const CDomoticzHardwareBase *pHardware, const unsigned char *pRXCommand, const char *defaultName, const int BatteryLevel)",
          "1949: void MainWorker::CheckAndPushRxMessage(const CDomoticzHardwareBase *pHardware, const unsigned char *pRXCommand, const char *defaultName, const int BatteryLevel, const bool wait)",
          "",
          "[Added Lines]",
          "1937: void MainWorker::PushRxMessage(const CDomoticzHardwareBase *pHardware, const uint8_t *pRXCommand, const char *defaultName, const int BatteryLevel)",
          "1943: void MainWorker::PushAndWaitRxMessage(const CDomoticzHardwareBase *pHardware, const uint8_t *pRXCommand, const char *defaultName, const int BatteryLevel)",
          "1949: void MainWorker::CheckAndPushRxMessage(const CDomoticzHardwareBase *pHardware, const uint8_t *pRXCommand, const char *defaultName, const int BatteryLevel, const bool wait)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2088:    continue;",
          "2089:   }",
          "2093: #ifdef DEBUG_RXQUEUE",
          "",
          "[Removed Lines]",
          "2091:   const unsigned char *pRXCommand = &rxQItem.vrxCommand[0];",
          "",
          "[Added Lines]",
          "2091:   const uint8_t *pRXCommand = &rxQItem.vrxCommand[0];",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2122:  _log.Log(LOG_STATUS, \"RxQueue: queue worker stopped...\");",
          "2123: }",
          "2126: {",
          "2128:  size_t Len = pRXCommand[0] + 1;",
          "",
          "[Removed Lines]",
          "2125: void MainWorker::ProcessRXMessage(const CDomoticzHardwareBase *pHardware, const unsigned char *pRXCommand, const char *defaultName, const int BatteryLevel)",
          "",
          "[Added Lines]",
          "2125: void MainWorker::ProcessRXMessage(const CDomoticzHardwareBase *pHardware, const uint8_t *pRXCommand, const char *defaultName, const int BatteryLevel)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2911:  procResult.DeviceRowIdx = -1;",
          "2912: }",
          "2915: {",
          "2916:  if (bIsInPercentage)",
          "2917:  {",
          "",
          "[Removed Lines]",
          "2914: void MainWorker::decode_BateryLevel(bool bIsInPercentage, unsigned char level)",
          "",
          "[Added Lines]",
          "2914: void MainWorker::decode_BateryLevel(bool bIsInPercentage, uint8_t level)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2962:  }",
          "2963: }",
          "2966: {",
          "2967:  if (HwdType == HTYPE_OpenZWave)",
          "2968:  {",
          "2969:   bIsInPercentage = true;",
          "2970:  }",
          "2972:  if (bIsInPercentage)",
          "2973:  {",
          "2974:   if (level >= 0 && level <= 9)",
          "",
          "[Removed Lines]",
          "2965: unsigned char MainWorker::get_BateryLevel(const _eHardwareTypes HwdType, bool bIsInPercentage, unsigned char level)",
          "2971:  unsigned char ret = 0;",
          "",
          "[Added Lines]",
          "2965: uint8_t MainWorker::get_BateryLevel(const _eHardwareTypes HwdType, bool bIsInPercentage, uint8_t level)",
          "2971:  uint8_t ret = 0;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2991: void MainWorker::decode_Rain(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "2992: {",
          "2993:  char szTmp[100];",
          "2996:  std::string ID;",
          "2997:  sprintf(szTmp, \"%d\", (pResponse->RAIN.id1 * 256) + pResponse->RAIN.id2);",
          "2998:  ID = szTmp;",
          "3004:  int Rainrate = (pResponse->RAIN.rainrateh * 256) + pResponse->RAIN.rainratel;",
          "",
          "[Removed Lines]",
          "2994:  unsigned char devType = pTypeRAIN;",
          "2995:  unsigned char subType = pResponse->RAIN.subtype;",
          "2999:  unsigned char Unit = 0;",
          "3000:  unsigned char cmnd = 0;",
          "3001:  unsigned char SignalLevel = pResponse->RAIN.rssi;",
          "3002:  unsigned char BatteryLevel = get_BateryLevel(HwdType, pResponse->RAIN.subtype == sTypeRAIN1, pResponse->RAIN.battery_level & 0x0F);",
          "",
          "[Added Lines]",
          "2994:  uint8_t devType = pTypeRAIN;",
          "2995:  uint8_t subType = pResponse->RAIN.subtype;",
          "2999:  uint8_t Unit = 0;",
          "3000:  uint8_t cmnd = 0;",
          "3001:  uint8_t SignalLevel = pResponse->RAIN.rssi;",
          "3002:  uint8_t BatteryLevel = get_BateryLevel(HwdType, pResponse->RAIN.subtype == sTypeRAIN1, pResponse->RAIN.battery_level & 0x0F);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3037:     {",
          "3038:      std::vector<std::string> sd = itt;",
          "3041:      std::string date = sd[1];",
          "3043:      time_t rowtime;",
          "3044:      struct tm rowTimetm;",
          "3045:      ParseSQLdatetime(rowtime, rowTimetm, date);",
          "3049:      float rateAdd = (rate / (float)3600 * (float)pastSeconds);",
          "3050:      TotalRain += rateAdd;",
          "",
          "[Removed Lines]",
          "3040:      float rate = atof(sd[0].c_str()) / 10000.0f;",
          "3047:      int pastSeconds = rowtime - countTime;",
          "",
          "[Added Lines]",
          "3040:      float rate = (float)atof(sd[0].c_str()) / 10000.0f;",
          "3047:      int pastSeconds = (int)(rowtime - countTime);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3161: void MainWorker::decode_Wind(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "3162: {",
          "3163:  char szTmp[300];",
          "3167:  sprintf(szTmp, \"%d\", windID);",
          "3168:  std::string ID = szTmp;",
          "3175:  double dDirection;",
          "3176:  dDirection = (double)(pResponse->WIND.directionh * 256) + pResponse->WIND.directionl;",
          "",
          "[Removed Lines]",
          "3164:  unsigned char devType = pTypeWIND;",
          "3165:  unsigned char subType = pResponse->WIND.subtype;",
          "3166:  unsigned short windID = (pResponse->WIND.id1 * 256) + pResponse->WIND.id2;",
          "3169:  unsigned char Unit = 0;",
          "3171:  unsigned char cmnd = 0;",
          "3172:  unsigned char SignalLevel = pResponse->WIND.rssi;",
          "3173:  unsigned char BatteryLevel = get_BateryLevel(HwdType, pResponse->WIND.subtype == sTypeWIND3, pResponse->WIND.battery_level & 0x0F);",
          "",
          "[Added Lines]",
          "3164:  uint8_t devType = pTypeWIND;",
          "3165:  uint8_t subType = pResponse->WIND.subtype;",
          "3166:  uint16_t windID = (pResponse->WIND.id1 * 256) + pResponse->WIND.id2;",
          "3169:  uint8_t Unit = 0;",
          "3171:  uint8_t cmnd = 0;",
          "3172:  uint8_t SignalLevel = pResponse->WIND.rssi;",
          "3173:  uint8_t BatteryLevel = get_BateryLevel(HwdType, pResponse->WIND.subtype == sTypeWIND3, pResponse->WIND.battery_level & 0x0F);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3379: void MainWorker::decode_Temp(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "3380: {",
          "3381:  char szTmp[100];",
          "3384:  sprintf(szTmp, \"%d\", (pResponse->TEMP.id1 * 256) + pResponse->TEMP.id2);",
          "3385:  std::string ID = szTmp;",
          "3391:  if ((pResponse->TEMP.battery_level & 0x0F) == 0)",
          "3392:   BatteryLevel = 0;",
          "3393:  else",
          "",
          "[Removed Lines]",
          "3382:  unsigned char devType = pTypeTEMP;",
          "3383:  unsigned char subType = pResponse->TEMP.subtype;",
          "3386:  unsigned char Unit = pResponse->TEMP.id2;",
          "3388:  unsigned char cmnd = 0;",
          "3389:  unsigned char SignalLevel = pResponse->TEMP.rssi;",
          "3390:  unsigned char BatteryLevel = 0;",
          "",
          "[Added Lines]",
          "3382:  uint8_t devType = pTypeTEMP;",
          "3383:  uint8_t subType = pResponse->TEMP.subtype;",
          "3386:  uint8_t Unit = pResponse->TEMP.id2;",
          "3388:  uint8_t cmnd = 0;",
          "3389:  uint8_t SignalLevel = pResponse->TEMP.rssi;",
          "3390:  uint8_t BatteryLevel = 0;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "3434:  m_trend_calculator[tID].AddValueAndReturnTendency(static_cast<double>(temp), _tTrendCalculator::TAVERAGE_TEMP);",
          "3436:  bool bHandledNotification = false;",
          "3438:  if (pResponse->TEMP.subtype == sTypeTEMP5)",
          "3439:  {",
          "",
          "[Removed Lines]",
          "3437:  unsigned char humidity = 0;",
          "",
          "[Added Lines]",
          "3437:  uint8_t humidity = 0;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3449:    m_sql.GetAddjustment(HwdID, ID.c_str(), 2, pTypeTEMP_HUM, sTypeTH_LC_TC, AddjValue, AddjMulti);",
          "3450:    temp += AddjValue;",
          "3451:    humidity = atoi(result[0][0].c_str());",
          "3453:    sprintf(szTmp, \"%.1f;%d;%d\", temp, humidity, humidity_status);",
          "3454:    DevRowIdx = m_sql.UpdateValue(HwdID, ID.c_str(), 2, pTypeTEMP_HUM, sTypeTH_LC_TC, SignalLevel, BatteryLevel, 0, szTmp, procResult.DeviceName);",
          "3455:    m_notifications.CheckAndHandleNotification(DevRowIdx, HwdID, ID, procResult.DeviceName, Unit, pTypeTEMP_HUM, sTypeTH_LC_TC, szTmp);",
          "",
          "[Removed Lines]",
          "3452:    unsigned char humidity_status = atoi(result[0][1].c_str());",
          "",
          "[Added Lines]",
          "3452:    uint8_t humidity_status = atoi(result[0][1].c_str());",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "3540: void MainWorker::decode_Hum(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "3541: {",
          "3542:  char szTmp[100];",
          "3545:  sprintf(szTmp, \"%d\", (pResponse->HUM.id1 * 256) + pResponse->HUM.id2);",
          "3546:  std::string ID = szTmp;",
          "3551:  if ((pResponse->HUM.battery_level & 0x0F) == 0)",
          "3552:   BatteryLevel = 0;",
          "3553:  else",
          "",
          "[Removed Lines]",
          "3543:  unsigned char devType = pTypeHUM;",
          "3544:  unsigned char subType = pResponse->HUM.subtype;",
          "3547:  unsigned char Unit = 1;",
          "3549:  unsigned char SignalLevel = pResponse->HUM.rssi;",
          "3550:  unsigned char BatteryLevel = 0;",
          "",
          "[Added Lines]",
          "3543:  uint8_t devType = pTypeHUM;",
          "3544:  uint8_t subType = pResponse->HUM.subtype;",
          "3547:  uint8_t Unit = 1;",
          "3549:  uint8_t SignalLevel = pResponse->HUM.rssi;",
          "3550:  uint8_t BatteryLevel = 0;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3558:   BatteryLevel = pResponse->TEMP.battery_level;",
          "3559:  }",
          "3562:  if (humidity > 100)",
          "3563:  {",
          "3564:   WriteMessage(\" Invalid Humidity\");",
          "",
          "[Removed Lines]",
          "3561:  unsigned char humidity = pResponse->HUM.humidity;",
          "",
          "[Added Lines]",
          "3561:  uint8_t humidity = pResponse->HUM.humidity;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "3653: void MainWorker::decode_TempHum(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "3654: {",
          "3655:  char szTmp[100];",
          "3658:  std::string ID;",
          "3659:  sprintf(szTmp, \"%d\", (pResponse->TEMP_HUM.id1 * 256) + pResponse->TEMP_HUM.id2);",
          "3660:  ID = szTmp;",
          "3668:  switch (pResponse->TEMP_HUM.subtype)",
          "",
          "[Removed Lines]",
          "3656:  unsigned char devType = pTypeTEMP_HUM;",
          "3657:  unsigned char subType = pResponse->TEMP_HUM.subtype;",
          "3661:  unsigned char Unit = 0;",
          "3663:  unsigned char cmnd = 0;",
          "3664:  unsigned char SignalLevel = pResponse->TEMP_HUM.rssi;",
          "3665:  unsigned char BatteryLevel = get_BateryLevel(HwdType, pResponse->TEMP_HUM.subtype == sTypeTH8, pResponse->TEMP_HUM.battery_level);",
          "",
          "[Added Lines]",
          "3656:  uint8_t devType = pTypeTEMP_HUM;",
          "3657:  uint8_t subType = pResponse->TEMP_HUM.subtype;",
          "3661:  uint8_t Unit = 0;",
          "3663:  uint8_t cmnd = 0;",
          "3664:  uint8_t SignalLevel = pResponse->TEMP_HUM.rssi;",
          "3665:  uint8_t BatteryLevel = get_BateryLevel(HwdType, pResponse->TEMP_HUM.subtype == sTypeTH8, pResponse->TEMP_HUM.battery_level);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "3719:  temp += AddjValue;",
          "3721:  int Humidity = (int)pResponse->TEMP_HUM.humidity;",
          "3724:  if (Humidity > 100)",
          "3725:  {",
          "",
          "[Removed Lines]",
          "3722:  unsigned char HumidityStatus = pResponse->TEMP_HUM.humidity_status;",
          "",
          "[Added Lines]",
          "3722:  uint8_t HumidityStatus = pResponse->TEMP_HUM.humidity_status;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "3872: void MainWorker::decode_TempHumBaro(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "3873: {",
          "3874:  char szTmp[100];",
          "3877:  sprintf(szTmp, \"%d\", (pResponse->TEMP_HUM_BARO.id1 * 256) + pResponse->TEMP_HUM_BARO.id2);",
          "3878:  std::string ID = szTmp;",
          "3883:  if ((pResponse->TEMP_HUM_BARO.battery_level & 0x0F) == 0)",
          "3884:   BatteryLevel = 0;",
          "3885:  else",
          "",
          "[Removed Lines]",
          "3875:  unsigned char devType = pTypeTEMP_HUM_BARO;",
          "3876:  unsigned char subType = pResponse->TEMP_HUM_BARO.subtype;",
          "3879:  unsigned char Unit = pResponse->TEMP_HUM_BARO.id2;",
          "3880:  unsigned char cmnd = 0;",
          "3881:  unsigned char SignalLevel = pResponse->TEMP_HUM_BARO.rssi;",
          "3882:  unsigned char BatteryLevel;",
          "",
          "[Added Lines]",
          "3875:  uint8_t devType = pTypeTEMP_HUM_BARO;",
          "3876:  uint8_t subType = pResponse->TEMP_HUM_BARO.subtype;",
          "3879:  uint8_t Unit = pResponse->TEMP_HUM_BARO.id2;",
          "3880:  uint8_t cmnd = 0;",
          "3881:  uint8_t SignalLevel = pResponse->TEMP_HUM_BARO.rssi;",
          "3882:  uint8_t BatteryLevel;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "3910:  m_sql.GetAddjustment(HwdID, ID.c_str(), Unit, devType, subType, AddjValue, AddjMulti);",
          "3911:  temp += AddjValue;",
          "3916:  if (Humidity > 100)",
          "3917:  {",
          "",
          "[Removed Lines]",
          "3913:  unsigned char Humidity = pResponse->TEMP_HUM_BARO.humidity;",
          "3914:  unsigned char HumidityStatus = pResponse->TEMP_HUM_BARO.humidity_status;",
          "",
          "[Added Lines]",
          "3913:  uint8_t Humidity = pResponse->TEMP_HUM_BARO.humidity;",
          "3914:  uint8_t HumidityStatus = pResponse->TEMP_HUM_BARO.humidity_status;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "4053: void MainWorker::decode_TempBaro(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "4054: {",
          "4055:  char szTmp[100];",
          "4058:  _tTempBaro *pTempBaro = (_tTempBaro*)pResponse;",
          "4060:  sprintf(szTmp, \"%d\", pTempBaro->id1);",
          "4061:  std::string ID = szTmp;",
          "4066:  BatteryLevel = 100;",
          "4068:  float temp = pTempBaro->temp;",
          "",
          "[Removed Lines]",
          "4056:  unsigned char devType = pTypeTEMP_BARO;",
          "4057:  unsigned char subType = sTypeBMP085;",
          "4062:  unsigned char Unit = 1;",
          "4063:  unsigned char cmnd = 0;",
          "4064:  unsigned char SignalLevel = 12;",
          "4065:  unsigned char BatteryLevel;",
          "",
          "[Added Lines]",
          "4056:  uint8_t devType = pTypeTEMP_BARO;",
          "4057:  uint8_t subType = sTypeBMP085;",
          "4062:  uint8_t Unit = 1;",
          "4063:  uint8_t cmnd = 0;",
          "4064:  uint8_t SignalLevel = 12;",
          "4065:  uint8_t BatteryLevel;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "4155:  sprintf(szTmp, \"%d\", (pResponse->TEMP_RAIN.id1 * 256) + pResponse->TEMP_RAIN.id2);",
          "4156:  std::string ID = szTmp;",
          "4157:  int Unit = pResponse->TEMP_RAIN.id2;",
          "4158:  int cmnd = 0;",
          "4162:  if ((pResponse->TEMP_RAIN.battery_level & 0x0F) == 0)",
          "4163:   BatteryLevel = 0;",
          "4164:  else",
          "",
          "[Removed Lines]",
          "4152:  unsigned char devType = pTypeTEMP_RAIN;",
          "4153:  unsigned char subType = pResponse->TEMP_RAIN.subtype;",
          "4160:  unsigned char SignalLevel = pResponse->TEMP_RAIN.rssi;",
          "4161:  unsigned char BatteryLevel = 0;",
          "",
          "[Added Lines]",
          "4152:  uint8_t devType = pTypeTEMP_RAIN;",
          "4153:  uint8_t subType = pResponse->TEMP_RAIN.subtype;",
          "4160:  uint8_t SignalLevel = pResponse->TEMP_RAIN.rssi;",
          "4161:  uint8_t BatteryLevel = 0;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "4237: void MainWorker::decode_UV(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "4238: {",
          "4239:  char szTmp[100];",
          "4242:  std::string ID;",
          "4243:  sprintf(szTmp, \"%d\", (pResponse->UV.id1 * 256) + pResponse->UV.id2);",
          "4244:  ID = szTmp;",
          "4249:  if ((pResponse->UV.battery_level & 0x0F) == 0)",
          "4250:   BatteryLevel = 0;",
          "4251:  else",
          "",
          "[Removed Lines]",
          "4240:  unsigned char devType = pTypeUV;",
          "4241:  unsigned char subType = pResponse->UV.subtype;",
          "4245:  unsigned char Unit = 0;",
          "4246:  unsigned char cmnd = 0;",
          "4247:  unsigned char SignalLevel = pResponse->UV.rssi;",
          "4248:  unsigned char BatteryLevel;",
          "",
          "[Added Lines]",
          "4240:  uint8_t devType = pTypeUV;",
          "4241:  uint8_t subType = pResponse->UV.subtype;",
          "4245:  uint8_t Unit = 0;",
          "4246:  uint8_t cmnd = 0;",
          "4247:  uint8_t SignalLevel = pResponse->UV.rssi;",
          "4248:  uint8_t BatteryLevel;",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "4346: void MainWorker::decode_FS20(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "4347: {",
          "4350:  char szTmp[100];",
          "4354:  sprintf(szTmp, \"%02X%02X\", pResponse->FS20.hc1, pResponse->FS20.hc2);",
          "4355:  std::string ID = szTmp;",
          "4361:  uint64_t DevRowIdx = m_sql.UpdateValue(HwdID, ID.c_str(), Unit, devType, subType, SignalLevel, -1, cmnd, procResult.DeviceName);",
          "4362:  if (DevRowIdx == -1)",
          "",
          "[Removed Lines]",
          "4351:  unsigned char devType = pTypeFS20;",
          "4352:  unsigned char subType = pResponse->FS20.subtype;",
          "4357:  unsigned char Unit = pResponse->FS20.addr;",
          "4358:  unsigned char cmnd = pResponse->FS20.cmd1;",
          "4359:  unsigned char SignalLevel = pResponse->FS20.rssi;",
          "",
          "[Added Lines]",
          "4351:  uint8_t devType = pTypeFS20;",
          "4352:  uint8_t subType = pResponse->FS20.subtype;",
          "4357:  uint8_t Unit = pResponse->FS20.addr;",
          "4358:  uint8_t cmnd = pResponse->FS20.cmd1;",
          "4359:  uint8_t SignalLevel = pResponse->FS20.rssi;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "4618: void MainWorker::decode_Lighting1(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "4619: {",
          "4620:  char szTmp[100];",
          "4623:  sprintf(szTmp, \"%d\", pResponse->LIGHTING1.housecode);",
          "4624:  std::string ID = szTmp;",
          "4629:  uint64_t DevRowIdx = m_sql.UpdateValue(HwdID, ID.c_str(), Unit, devType, subType, SignalLevel, -1, cmnd, procResult.DeviceName);",
          "4630:  if (DevRowIdx == -1)",
          "",
          "[Removed Lines]",
          "4621:  unsigned char devType = pTypeLighting1;",
          "4622:  unsigned char subType = pResponse->LIGHTING1.subtype;",
          "4625:  unsigned char Unit = pResponse->LIGHTING1.unitcode;",
          "4626:  unsigned char cmnd = pResponse->LIGHTING1.cmnd;",
          "4627:  unsigned char SignalLevel = pResponse->LIGHTING1.rssi;",
          "",
          "[Added Lines]",
          "4621:  uint8_t devType = pTypeLighting1;",
          "4622:  uint8_t subType = pResponse->LIGHTING1.subtype;",
          "4625:  uint8_t Unit = pResponse->LIGHTING1.unitcode;",
          "4626:  uint8_t cmnd = pResponse->LIGHTING1.cmnd;",
          "4627:  uint8_t SignalLevel = pResponse->LIGHTING1.rssi;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "4813: void MainWorker::decode_Lighting2(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "4814: {",
          "4815:  char szTmp[100];",
          "4818:  sprintf(szTmp, \"%X%02X%02X%02X\", pResponse->LIGHTING2.id1, pResponse->LIGHTING2.id2, pResponse->LIGHTING2.id3, pResponse->LIGHTING2.id4);",
          "4819:  std::string ID = szTmp;",
          "4825:  sprintf(szTmp, \"%d\", level);",
          "4826:  uint64_t DevRowIdx = m_sql.UpdateValue(HwdID, ID.c_str(), Unit, devType, subType, SignalLevel, -1, cmnd, szTmp, procResult.DeviceName);",
          "4828:  bool isGroupCommand = ((cmnd == light2_sGroupOff) || (cmnd == light2_sGroupOn));",
          "4831:  if (isGroupCommand)",
          "4832:  {",
          "",
          "[Removed Lines]",
          "4816:  unsigned char devType = pTypeLighting2;",
          "4817:  unsigned char subType = pResponse->LIGHTING2.subtype;",
          "4820:  unsigned char Unit = pResponse->LIGHTING2.unitcode;",
          "4821:  unsigned char cmnd = pResponse->LIGHTING2.cmnd;",
          "4822:  unsigned char level = pResponse->LIGHTING2.level;",
          "4823:  unsigned char SignalLevel = pResponse->LIGHTING2.rssi;",
          "4829:  unsigned char single_cmnd = cmnd;",
          "",
          "[Added Lines]",
          "4816:  uint8_t devType = pTypeLighting2;",
          "4817:  uint8_t subType = pResponse->LIGHTING2.subtype;",
          "4820:  uint8_t Unit = pResponse->LIGHTING2.unitcode;",
          "4821:  uint8_t cmnd = pResponse->LIGHTING2.cmnd;",
          "4822:  uint8_t level = pResponse->LIGHTING2.level;",
          "4823:  uint8_t SignalLevel = pResponse->LIGHTING2.rssi;",
          "4829:  uint8_t single_cmnd = cmnd;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "4963: void MainWorker::decode_Lighting4(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "4964: {",
          "4965:  char szTmp[100];",
          "4968:  sprintf(szTmp, \"%02X%02X%02X\", pResponse->LIGHTING4.cmd1, pResponse->LIGHTING4.cmd2, pResponse->LIGHTING4.cmd3);",
          "4969:  std::string ID = szTmp;",
          "4970:  int Unit = 0;",
          "4973:  sprintf(szTmp, \"%d\", (pResponse->LIGHTING4.pulseHigh * 256) + pResponse->LIGHTING4.pulseLow);",
          "4974:  uint64_t DevRowIdx = m_sql.UpdateValue(HwdID, ID.c_str(), Unit, devType, subType, SignalLevel, -1, cmnd, szTmp, procResult.DeviceName);",
          "4975:  if (DevRowIdx == -1)",
          "",
          "[Removed Lines]",
          "4966:  unsigned char devType = pTypeLighting4;",
          "4967:  unsigned char subType = pResponse->LIGHTING4.subtype;",
          "4971:  unsigned char cmnd = 1; //only 'On' supported",
          "4972:  unsigned char SignalLevel = pResponse->LIGHTING4.rssi;",
          "",
          "[Added Lines]",
          "4966:  uint8_t devType = pTypeLighting4;",
          "4967:  uint8_t subType = pResponse->LIGHTING4.subtype;",
          "4971:  uint8_t cmnd = 1; //only 'On' supported",
          "4972:  uint8_t SignalLevel = pResponse->LIGHTING4.rssi;",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "5132: void MainWorker::decode_Lighting5(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "5133: {",
          "5134:  char szTmp[100];",
          "5137:  if ((subType != sTypeEMW100) && (subType != sTypeLivolo) && (subType != sTypeLivolo1to10) && (subType != sTypeRGB432W) && (subType != sTypeKangtai))",
          "5138:   sprintf(szTmp, \"%02X%02X%02X\", pResponse->LIGHTING5.id1, pResponse->LIGHTING5.id2, pResponse->LIGHTING5.id3);",
          "5139:  else",
          "5140:   sprintf(szTmp, \"%02X%02X\", pResponse->LIGHTING5.id2, pResponse->LIGHTING5.id3);",
          "5141:  std::string ID = szTmp;",
          "5144:  float flevel;",
          "5145:  if (subType == sTypeLivolo)",
          "5146:   flevel = (100.0f / 7.0f)*float(pResponse->LIGHTING5.level);",
          "",
          "[Removed Lines]",
          "5135:  unsigned char devType = pTypeLighting5;",
          "5136:  unsigned char subType = pResponse->LIGHTING5.subtype;",
          "5142:  unsigned char Unit = pResponse->LIGHTING5.unitcode;",
          "5143:  unsigned char cmnd = pResponse->LIGHTING5.cmnd;",
          "",
          "[Added Lines]",
          "5135:  uint8_t devType = pTypeLighting5;",
          "5136:  uint8_t subType = pResponse->LIGHTING5.subtype;",
          "5142:  uint8_t Unit = pResponse->LIGHTING5.unitcode;",
          "5143:  uint8_t cmnd = pResponse->LIGHTING5.cmnd;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "5148:   flevel = (100.0f / 31.0f)*float(pResponse->LIGHTING5.level);",
          "5149:  else",
          "5150:   flevel = (100.0f / 7.0f)*float(pResponse->LIGHTING5.level);",
          "5153:  bool bDoUpdate = true;",
          "5154:  if ((subType == sTypeTRC02) || (subType == sTypeTRC02_2) || (subType == sTypeAoke) || (subType == sTypeEurodomest))",
          "",
          "[Removed Lines]",
          "5151:  unsigned char SignalLevel = pResponse->LIGHTING5.rssi;",
          "",
          "[Added Lines]",
          "5151:  uint8_t SignalLevel = pResponse->LIGHTING5.rssi;",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "5624: void MainWorker::decode_Lighting6(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "5625: {",
          "5626:  char szTmp[100];",
          "5629:  sprintf(szTmp, \"%02X%02X%02X\", pResponse->LIGHTING6.id1, pResponse->LIGHTING6.id2, pResponse->LIGHTING6.groupcode);",
          "5630:  std::string ID = szTmp;",
          "5636:  sprintf(szTmp, \"%d\", rfu);",
          "5637:  uint64_t DevRowIdx = m_sql.UpdateValue(HwdID, ID.c_str(), Unit, devType, subType, SignalLevel, -1, cmnd, szTmp, procResult.DeviceName);",
          "",
          "[Removed Lines]",
          "5627:  unsigned char devType = pTypeLighting6;",
          "5628:  unsigned char subType = pResponse->LIGHTING6.subtype;",
          "5631:  unsigned char Unit = pResponse->LIGHTING6.unitcode;",
          "5632:  unsigned char cmnd = pResponse->LIGHTING6.cmnd;",
          "5633:  unsigned char rfu = pResponse->LIGHTING6.seqnbr2;",
          "5634:  unsigned char SignalLevel = pResponse->LIGHTING6.rssi;",
          "",
          "[Added Lines]",
          "5627:  uint8_t devType = pTypeLighting6;",
          "5628:  uint8_t subType = pResponse->LIGHTING6.subtype;",
          "5631:  uint8_t Unit = pResponse->LIGHTING6.unitcode;",
          "5632:  uint8_t cmnd = pResponse->LIGHTING6.cmnd;",
          "5633:  uint8_t rfu = pResponse->LIGHTING6.seqnbr2;",
          "5634:  uint8_t SignalLevel = pResponse->LIGHTING6.rssi;",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "5693: void MainWorker::decode_Fan(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "5694: {",
          "5695:  char szTmp[100];",
          "5698:  sprintf(szTmp, \"%02X%02X%02X\", pResponse->FAN.id1, pResponse->FAN.id2, pResponse->FAN.id3);",
          "5699:  std::string ID = szTmp;",
          "5704:  uint64_t DevRowIdx = m_sql.UpdateValue(HwdID, ID.c_str(), Unit, devType, subType, SignalLevel, -1, cmnd, procResult.DeviceName);",
          "5705:  if (DevRowIdx == -1)",
          "",
          "[Removed Lines]",
          "5696:  unsigned char devType = pTypeFan;",
          "5697:  unsigned char subType = pResponse->FAN.subtype;",
          "5700:  unsigned char Unit = 0;",
          "5701:  unsigned char cmnd = pResponse->FAN.cmnd;",
          "5702:  unsigned char SignalLevel = pResponse->FAN.rssi;",
          "",
          "[Added Lines]",
          "5696:  uint8_t devType = pTypeFan;",
          "5697:  uint8_t subType = pResponse->FAN.subtype;",
          "5700:  uint8_t Unit = 0;",
          "5701:  uint8_t cmnd = pResponse->FAN.cmnd;",
          "5702:  uint8_t SignalLevel = pResponse->FAN.rssi;",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "5817: void MainWorker::decode_HomeConfort(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "5818: {",
          "5819:  char szTmp[100];",
          "5822:  sprintf(szTmp, \"%02X%02X%02X%02X\", pResponse->HOMECONFORT.id1, pResponse->HOMECONFORT.id2, pResponse->HOMECONFORT.id3, pResponse->HOMECONFORT.housecode);",
          "5823:  std::string ID = szTmp;",
          "5828:  uint64_t DevRowIdx = m_sql.UpdateValue(HwdID, ID.c_str(), Unit, devType, subType, SignalLevel, -1, cmnd, procResult.DeviceName);",
          "5830:  bool isGroupCommand = ((cmnd == HomeConfort_sGroupOff) || (cmnd == HomeConfort_sGroupOn));",
          "5833:  if (isGroupCommand)",
          "5834:  {",
          "",
          "[Removed Lines]",
          "5820:  unsigned char devType = pTypeHomeConfort;",
          "5821:  unsigned char subType = pResponse->HOMECONFORT.subtype;",
          "5824:  unsigned char Unit = pResponse->HOMECONFORT.unitcode;",
          "5825:  unsigned char cmnd = pResponse->HOMECONFORT.cmnd;",
          "5826:  unsigned char SignalLevel = pResponse->HOMECONFORT.rssi;",
          "5831:  unsigned char single_cmnd = cmnd;",
          "",
          "[Added Lines]",
          "5820:  uint8_t devType = pTypeHomeConfort;",
          "5821:  uint8_t subType = pResponse->HOMECONFORT.subtype;",
          "5824:  uint8_t Unit = pResponse->HOMECONFORT.unitcode;",
          "5825:  uint8_t cmnd = pResponse->HOMECONFORT.cmnd;",
          "5826:  uint8_t SignalLevel = pResponse->HOMECONFORT.rssi;",
          "5831:  uint8_t single_cmnd = cmnd;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "5896: {",
          "5897:  char szTmp[300];",
          "5898:  const _tColorSwitch *pLed = reinterpret_cast<const _tColorSwitch*>(pResponse);",
          "5901:  if (pLed->id == 1)",
          "5902:   sprintf(szTmp, \"%d\", 1);",
          "5903:  else",
          "5904:   sprintf(szTmp, \"%08X\", (unsigned int)pLed->id);",
          "5905:  std::string ID = szTmp;",
          "5908:  uint32_t value = pLed->value;",
          "5909:  _tColor color = pLed->color;",
          "",
          "[Removed Lines]",
          "5899:  unsigned char devType = pTypeColorSwitch;",
          "5900:  unsigned char subType = pLed->subtype;",
          "5906:  unsigned char Unit = pLed->dunit;",
          "5907:  unsigned char cmnd = pLed->command;",
          "",
          "[Added Lines]",
          "5899:  uint8_t devType = pTypeColorSwitch;",
          "5900:  uint8_t subType = pLed->subtype;",
          "5906:  uint8_t Unit = pLed->dunit;",
          "5907:  uint8_t cmnd = pLed->command;",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "5961: void MainWorker::decode_Chime(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "5962: {",
          "5963:  char szTmp[100];",
          "5966:  sprintf(szTmp, \"%02X%02X\", pResponse->CHIME.id1, pResponse->CHIME.id2);",
          "5967:  std::string ID = szTmp;",
          "5972:  uint64_t DevRowIdx = m_sql.UpdateValue(HwdID, ID.c_str(), Unit, devType, subType, SignalLevel, -1, cmnd, procResult.DeviceName);",
          "5973:  if (DevRowIdx == -1)",
          "",
          "[Removed Lines]",
          "5964:  unsigned char devType = pTypeChime;",
          "5965:  unsigned char subType = pResponse->CHIME.subtype;",
          "5968:  unsigned char Unit = pResponse->CHIME.sound;",
          "5969:  unsigned char cmnd = pResponse->CHIME.sound;",
          "5970:  unsigned char SignalLevel = pResponse->CHIME.rssi;",
          "",
          "[Added Lines]",
          "5964:  uint8_t devType = pTypeChime;",
          "5965:  uint8_t subType = pResponse->CHIME.subtype;",
          "5968:  uint8_t Unit = pResponse->CHIME.sound;",
          "5969:  uint8_t cmnd = pResponse->CHIME.sound;",
          "5970:  uint8_t SignalLevel = pResponse->CHIME.rssi;",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "6163:   break;",
          "6164:  }",
          "6165:  std::stringstream sHexDump;",
          "6167:  for (int i = 0; i < pResponse->UNDECODED.packetlength - 3; i++)",
          "6168:  {",
          "6169:   sHexDump << HEX(pRXBytes[i]);",
          "",
          "[Removed Lines]",
          "6166:  unsigned char *pRXBytes = (unsigned char*)&pResponse->UNDECODED.msg1;",
          "",
          "[Added Lines]",
          "6166:  uint8_t *pRXBytes = (uint8_t*)&pResponse->UNDECODED.msg1;",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "6220: void MainWorker::decode_Curtain(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "6221: {",
          "6222:  char szTmp[100];",
          "6225:  sprintf(szTmp, \"%d\", pResponse->CURTAIN1.housecode);",
          "6226:  std::string ID = szTmp;",
          "6231:  uint64_t DevRowIdx = m_sql.UpdateValue(HwdID, ID.c_str(), Unit, devType, subType, SignalLevel, -1, cmnd, procResult.DeviceName);",
          "6232:  if (DevRowIdx == -1)",
          "",
          "[Removed Lines]",
          "6223:  unsigned char devType = pTypeCurtain;",
          "6224:  unsigned char subType = pResponse->CURTAIN1.subtype;",
          "6227:  unsigned char Unit = pResponse->CURTAIN1.unitcode;",
          "6228:  unsigned char cmnd = pResponse->CURTAIN1.cmnd;",
          "6229:  unsigned char SignalLevel = 9;",
          "",
          "[Added Lines]",
          "6223:  uint8_t devType = pTypeCurtain;",
          "6224:  uint8_t subType = pResponse->CURTAIN1.subtype;",
          "6227:  uint8_t Unit = pResponse->CURTAIN1.unitcode;",
          "6228:  uint8_t cmnd = pResponse->CURTAIN1.cmnd;",
          "6229:  uint8_t SignalLevel = 9;",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "6281: void MainWorker::decode_BLINDS1(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "6282: {",
          "6283:  char szTmp[100];",
          "6287:  sprintf(szTmp, \"%02X%02X%02X%02X\", pResponse->BLINDS1.id1, pResponse->BLINDS1.id2, pResponse->BLINDS1.id3, pResponse->BLINDS1.id4);",
          "6289:  std::string ID = szTmp;",
          "6294:  uint64_t DevRowIdx = m_sql.UpdateValue(HwdID, ID.c_str(), Unit, devType, subType, SignalLevel, -1, cmnd, procResult.DeviceName);",
          "6295:  if (DevRowIdx == -1)",
          "",
          "[Removed Lines]",
          "6284:  unsigned char devType = pTypeBlinds;",
          "6285:  unsigned char subType = pResponse->BLINDS1.subtype;",
          "6290:  unsigned char Unit = pResponse->BLINDS1.unitcode;",
          "6291:  unsigned char cmnd = pResponse->BLINDS1.cmnd;",
          "6292:  unsigned char SignalLevel = pResponse->BLINDS1.rssi;",
          "",
          "[Added Lines]",
          "6284:  uint8_t devType = pTypeBlinds;",
          "6285:  uint8_t subType = pResponse->BLINDS1.subtype;",
          "6290:  uint8_t Unit = pResponse->BLINDS1.unitcode;",
          "6291:  uint8_t cmnd = pResponse->BLINDS1.cmnd;",
          "6292:  uint8_t SignalLevel = pResponse->BLINDS1.rssi;",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "6431: void MainWorker::decode_RFY(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "6432: {",
          "6433:  char szTmp[100];",
          "6436:  sprintf(szTmp, \"%02X%02X%02X\", pResponse->RFY.id1, pResponse->RFY.id2, pResponse->RFY.id3);",
          "6437:  std::string ID = szTmp;",
          "6442:  uint64_t DevRowIdx = m_sql.UpdateValue(HwdID, ID.c_str(), Unit, devType, subType, SignalLevel, -1, cmnd, procResult.DeviceName);",
          "6443:  if (DevRowIdx == -1)",
          "",
          "[Removed Lines]",
          "6434:  unsigned char devType = pTypeRFY;",
          "6435:  unsigned char subType = pResponse->RFY.subtype;",
          "6438:  unsigned char Unit = pResponse->RFY.unitcode;",
          "6439:  unsigned char cmnd = pResponse->RFY.cmnd;",
          "6440:  unsigned char SignalLevel = pResponse->RFY.rssi;",
          "",
          "[Added Lines]",
          "6434:  uint8_t devType = pTypeRFY;",
          "6435:  uint8_t subType = pResponse->RFY.subtype;",
          "6438:  uint8_t Unit = pResponse->RFY.unitcode;",
          "6439:  uint8_t cmnd = pResponse->RFY.cmnd;",
          "6440:  uint8_t SignalLevel = pResponse->RFY.rssi;",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "6564: {",
          "6565:  char szTmp[100];",
          "6566:  const _tEVOHOME1 *pEvo = reinterpret_cast<const _tEVOHOME1*>(pResponse);",
          "6569:  std::stringstream szID;",
          "6570:  if (HwdType == HTYPE_EVOHOME_SERIAL || HwdType == HTYPE_EVOHOME_TCP)",
          "6571:   szID << std::hex << (int)RFX_GETID3(pEvo->id1, pEvo->id2, pEvo->id3);",
          "6572:  else //GB3: web based evohome uses decimal device ID's",
          "6573:   szID << std::dec << (int)RFX_GETID3(pEvo->id1, pEvo->id2, pEvo->id3);",
          "6574:  std::string ID(szID.str());",
          "6580:  std::string szUntilDate;",
          "6581:  if (pEvo->mode == CEvohomeBase::cmTmp)//temporary",
          "",
          "[Removed Lines]",
          "6567:  unsigned char devType = pTypeEvohome;",
          "6568:  unsigned char subType = pEvo->subtype;",
          "6575:  unsigned char Unit = 0;",
          "6576:  unsigned char cmnd = pEvo->status;",
          "6577:  unsigned char SignalLevel = 255;//Unknown",
          "6578:  unsigned char BatteryLevel = 255;//Unknown",
          "",
          "[Added Lines]",
          "6567:  uint8_t devType = pTypeEvohome;",
          "6568:  uint8_t subType = pEvo->subtype;",
          "6575:  uint8_t Unit = 0;",
          "6576:  uint8_t cmnd = pEvo->status;",
          "6577:  uint8_t SignalLevel = 255;//Unknown",
          "6578:  uint8_t BatteryLevel = 255;//Unknown",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "6650: {",
          "6651:  char szTmp[100];",
          "6652:  const _tEVOHOME2 *pEvo = reinterpret_cast<const _tEVOHOME2*>(pResponse);",
          "6658:  std::vector<std::vector<std::string> > result;",
          "",
          "[Removed Lines]",
          "6653:  unsigned char cmnd = 0;",
          "6654:  unsigned char SignalLevel = 255;//Unknown",
          "6655:  unsigned char BatteryLevel = 255;//Unknown",
          "",
          "[Added Lines]",
          "6653:  uint8_t cmnd = 0;",
          "6654:  uint8_t SignalLevel = 255;//Unknown",
          "6655:  uint8_t BatteryLevel = 255;//Unknown",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "6684:  bool bNewDev = false;",
          "6685:  std::string name, szDevID;",
          "6686:  std::stringstream szID;",
          "6690:  std::string szUpdateStat;",
          "6691:  if (!result.empty())",
          "6692:  {",
          "",
          "[Removed Lines]",
          "6687:  unsigned char Unit;",
          "6688:  unsigned char dType;",
          "6689:  unsigned char dSubType;",
          "",
          "[Added Lines]",
          "6687:  uint8_t Unit;",
          "6688:  uint8_t dType;",
          "6689:  uint8_t dSubType;",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "6799: {",
          "6800:  char szTmp[100];",
          "6801:  const _tEVOHOME3 *pEvo = reinterpret_cast<const _tEVOHOME3*>(pResponse);",
          "6804:  std::stringstream szID;",
          "6805:  int nDevID = (int)RFX_GETID3(pEvo->id1, pEvo->id2, pEvo->id3);",
          "6806:  szID << std::hex << nDevID;",
          "6807:  std::string ID(szID.str());",
          "6810:  sprintf(szTmp, \"%d\", pEvo->demand);",
          "6811:  std::string szDemand(szTmp);",
          "6815:  if (Unit == 0xFF && nDevID == 0)",
          "6816:   return;",
          "",
          "[Removed Lines]",
          "6802:  unsigned char devType = pTypeEvohomeRelay;",
          "6803:  unsigned char subType = pEvo->subtype;",
          "6808:  unsigned char Unit = pEvo->devno;",
          "6809:  unsigned char cmnd = (pEvo->demand > 0) ? light1_sOn : light1_sOff;",
          "6812:  unsigned char SignalLevel = 255;//Unknown",
          "6813:  unsigned char BatteryLevel = 255;//Unknown",
          "",
          "[Added Lines]",
          "6802:  uint8_t devType = pTypeEvohomeRelay;",
          "6803:  uint8_t subType = pEvo->subtype;",
          "6808:  uint8_t Unit = pEvo->devno;",
          "6809:  uint8_t cmnd = (pEvo->demand > 0) ? light1_sOn : light1_sOff;",
          "6812:  uint8_t SignalLevel = 255;//Unknown",
          "6813:  uint8_t BatteryLevel = 255;//Unknown",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "6831:  {",
          "6832:   if (pEvo->demand == 0xFF)//we sometimes get a 0418 message after the initial device creation but it will mess up the logging as we don't have a demand",
          "6833:    return;",
          "6835:   BatteryLevel = atoi(result[0][7].c_str());",
          "6837:   if (pEvo->updatetype == CEvohomeBase::updBattery)",
          "",
          "[Removed Lines]",
          "6834:   unsigned char cur_cmnd = atoi(result[0][5].c_str());",
          "",
          "[Added Lines]",
          "6834:   uint8_t cur_cmnd = atoi(result[0][5].c_str());",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "6895: void MainWorker::decode_Security1(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "6896: {",
          "6897:  char szTmp[100];",
          "6900:  std::string ID;",
          "6901:  sprintf(szTmp, \"%02X%02X%02X\", pResponse->SECURITY1.id1, pResponse->SECURITY1.id2, pResponse->SECURITY1.id3);",
          "6902:  ID = szTmp;",
          "6907:  if (",
          "6908:   (pResponse->SECURITY1.subtype == sTypeKD101) ||",
          "6909:   (pResponse->SECURITY1.subtype == sTypeSA30) ||",
          "",
          "[Removed Lines]",
          "6898:  unsigned char devType = pTypeSecurity1;",
          "6899:  unsigned char subType = pResponse->SECURITY1.subtype;",
          "6903:  unsigned char Unit = 0;",
          "6904:  unsigned char cmnd = pResponse->SECURITY1.status;",
          "6905:  unsigned char SignalLevel = pResponse->SECURITY1.rssi;",
          "6906:  unsigned char BatteryLevel = get_BateryLevel(HwdType, false, pResponse->SECURITY1.battery_level & 0x0F);",
          "",
          "[Added Lines]",
          "6898:  uint8_t devType = pTypeSecurity1;",
          "6899:  uint8_t subType = pResponse->SECURITY1.subtype;",
          "6903:  uint8_t Unit = 0;",
          "6904:  uint8_t cmnd = pResponse->SECURITY1.status;",
          "6905:  uint8_t SignalLevel = pResponse->SECURITY1.rssi;",
          "6906:  uint8_t BatteryLevel = get_BateryLevel(HwdType, false, pResponse->SECURITY1.battery_level & 0x0F);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "7081: void MainWorker::decode_Security2(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "7082: {",
          "7083:  char szTmp[100];",
          "7086:  std::string ID;",
          "7087:  sprintf(szTmp, \"%02X%02X%02X%02X%02X%02X%02X%02X\", pResponse->SECURITY2.id1, pResponse->SECURITY2.id2, pResponse->SECURITY2.id3, pResponse->SECURITY2.id4, pResponse->SECURITY2.id5, pResponse->SECURITY2.id6, pResponse->SECURITY2.id7, pResponse->SECURITY2.id8);",
          "7088:  ID = szTmp;",
          "7094:  uint64_t DevRowIdx = m_sql.UpdateValue(HwdID, ID.c_str(), Unit, devType, subType, SignalLevel, BatteryLevel, cmnd, procResult.DeviceName);",
          "7095:  if (DevRowIdx == -1)",
          "",
          "[Removed Lines]",
          "7084:  unsigned char devType = pTypeSecurity2;",
          "7085:  unsigned char subType = pResponse->SECURITY2.subtype;",
          "7089:  unsigned char Unit = 0;",
          "7090:  unsigned char cmnd = 0;// pResponse->SECURITY2.cmnd;",
          "7091:  unsigned char SignalLevel = pResponse->SECURITY2.rssi;",
          "7092:  unsigned char BatteryLevel = get_BateryLevel(HwdType, false, pResponse->SECURITY2.battery_level & 0x0F);",
          "",
          "[Added Lines]",
          "7084:  uint8_t devType = pTypeSecurity2;",
          "7085:  uint8_t subType = pResponse->SECURITY2.subtype;",
          "7089:  uint8_t Unit = 0;",
          "7090:  uint8_t cmnd = 0;// pResponse->SECURITY2.cmnd;",
          "7091:  uint8_t SignalLevel = pResponse->SECURITY2.rssi;",
          "7092:  uint8_t BatteryLevel = get_BateryLevel(HwdType, false, pResponse->SECURITY2.battery_level & 0x0F);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "7215: void MainWorker::decode_Remote(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "7216: {",
          "7217:  char szTmp[100];",
          "7220:  sprintf(szTmp, \"%d\", pResponse->REMOTE.id);",
          "7221:  std::string ID = szTmp;",
          "7226:  uint64_t DevRowIdx = m_sql.UpdateValue(HwdID, ID.c_str(), Unit, devType, subType, SignalLevel, -1, cmnd, procResult.DeviceName);",
          "7227:  if (DevRowIdx == -1)",
          "",
          "[Removed Lines]",
          "7218:  unsigned char devType = pTypeRemote;",
          "7219:  unsigned char subType = pResponse->REMOTE.subtype;",
          "7222:  unsigned char Unit = pResponse->REMOTE.cmnd;",
          "7223:  unsigned char cmnd = light2_sOn;",
          "7224:  unsigned char SignalLevel = pResponse->REMOTE.rssi;",
          "",
          "[Added Lines]",
          "7218:  uint8_t devType = pTypeRemote;",
          "7219:  uint8_t subType = pResponse->REMOTE.subtype;",
          "7222:  uint8_t Unit = pResponse->REMOTE.cmnd;",
          "7223:  uint8_t cmnd = light2_sOn;",
          "7224:  uint8_t SignalLevel = pResponse->REMOTE.rssi;",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "8299: void MainWorker::decode_Thermostat1(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "8300: {",
          "8301:  char szTmp[100];",
          "8304:  std::string ID;",
          "8305:  sprintf(szTmp, \"%d\", (pResponse->THERMOSTAT1.id1 * 256) + pResponse->THERMOSTAT1.id2);",
          "8306:  ID = szTmp;",
          "8317:  sprintf(szTmp, \"%d;%d;%d;%d\", temp, set_point, mode, status);",
          "8318:  uint64_t DevRowIdx = m_sql.UpdateValue(HwdID, ID.c_str(), Unit, devType, subType, SignalLevel, BatteryLevel, cmnd, szTmp, procResult.DeviceName);",
          "",
          "[Removed Lines]",
          "8302:  unsigned char devType = pTypeThermostat1;",
          "8303:  unsigned char subType = pResponse->THERMOSTAT1.subtype;",
          "8307:  unsigned char Unit = 0;",
          "8308:  unsigned char cmnd = 0;",
          "8309:  unsigned char SignalLevel = pResponse->THERMOSTAT1.rssi;",
          "8310:  unsigned char BatteryLevel = 255;",
          "8312:  unsigned char temp = pResponse->THERMOSTAT1.temperature;",
          "8313:  unsigned char set_point = pResponse->THERMOSTAT1.set_point;",
          "8314:  unsigned char mode = (pResponse->THERMOSTAT1.mode & 0x80);",
          "8315:  unsigned char status = (pResponse->THERMOSTAT1.status & 0x03);",
          "",
          "[Added Lines]",
          "8302:  uint8_t devType = pTypeThermostat1;",
          "8303:  uint8_t subType = pResponse->THERMOSTAT1.subtype;",
          "8307:  uint8_t Unit = 0;",
          "8308:  uint8_t cmnd = 0;",
          "8309:  uint8_t SignalLevel = pResponse->THERMOSTAT1.rssi;",
          "8310:  uint8_t BatteryLevel = 255;",
          "8312:  uint8_t temp = pResponse->THERMOSTAT1.temperature;",
          "8313:  uint8_t set_point = pResponse->THERMOSTAT1.set_point;",
          "8314:  uint8_t mode = (pResponse->THERMOSTAT1.mode & 0x80);",
          "8315:  uint8_t status = (pResponse->THERMOSTAT1.status & 0x03);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "8380: void MainWorker::decode_Thermostat2(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "8381: {",
          "8382:  char szTmp[100];",
          "8385:  std::string ID;",
          "8386:  ID = \"1\";",
          "8392:  uint64_t DevRowIdx = m_sql.UpdateValue(HwdID, ID.c_str(), Unit, devType, subType, SignalLevel, BatteryLevel, cmnd, procResult.DeviceName);",
          "8393:  if (DevRowIdx == -1)",
          "",
          "[Removed Lines]",
          "8383:  unsigned char devType = pTypeThermostat2;",
          "8384:  unsigned char subType = pResponse->THERMOSTAT2.subtype;",
          "8387:  unsigned char Unit = pResponse->THERMOSTAT2.unitcode;",
          "8388:  unsigned char cmnd = pResponse->THERMOSTAT2.cmnd;",
          "8389:  unsigned char SignalLevel = pResponse->THERMOSTAT2.rssi;",
          "8390:  unsigned char BatteryLevel = 255;",
          "",
          "[Added Lines]",
          "8383:  uint8_t devType = pTypeThermostat2;",
          "8384:  uint8_t subType = pResponse->THERMOSTAT2.subtype;",
          "8387:  uint8_t Unit = pResponse->THERMOSTAT2.unitcode;",
          "8388:  uint8_t cmnd = pResponse->THERMOSTAT2.cmnd;",
          "8389:  uint8_t SignalLevel = pResponse->THERMOSTAT2.rssi;",
          "8390:  uint8_t BatteryLevel = 255;",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "8440: void MainWorker::decode_Thermostat3(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "8441: {",
          "8442:  char szTmp[100];",
          "8445:  std::string ID;",
          "8446:  sprintf(szTmp, \"%02X%02X%02X\", pResponse->THERMOSTAT3.unitcode1, pResponse->THERMOSTAT3.unitcode2, pResponse->THERMOSTAT3.unitcode3);",
          "8447:  ID = szTmp;",
          "8453:  uint64_t DevRowIdx = m_sql.UpdateValue(HwdID, ID.c_str(), Unit, devType, subType, SignalLevel, BatteryLevel, cmnd, procResult.DeviceName);",
          "8454:  if (DevRowIdx == -1)",
          "",
          "[Removed Lines]",
          "8443:  unsigned char devType = pTypeThermostat3;",
          "8444:  unsigned char subType = pResponse->THERMOSTAT3.subtype;",
          "8448:  unsigned char Unit = 0;",
          "8449:  unsigned char cmnd = pResponse->THERMOSTAT3.cmnd;",
          "8450:  unsigned char SignalLevel = pResponse->THERMOSTAT3.rssi;",
          "8451:  unsigned char BatteryLevel = 255;",
          "",
          "[Added Lines]",
          "8443:  uint8_t devType = pTypeThermostat3;",
          "8444:  uint8_t subType = pResponse->THERMOSTAT3.subtype;",
          "8448:  uint8_t Unit = 0;",
          "8449:  uint8_t cmnd = pResponse->THERMOSTAT3.cmnd;",
          "8450:  uint8_t SignalLevel = pResponse->THERMOSTAT3.rssi;",
          "8451:  uint8_t BatteryLevel = 255;",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "8530: void MainWorker::decode_Thermostat4(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "8531: {",
          "8532:  char szTmp[100];",
          "8535:  std::string ID;",
          "8536:  sprintf(szTmp, \"%02X%02X%02X\", pResponse->THERMOSTAT4.unitcode1, pResponse->THERMOSTAT4.unitcode2, pResponse->THERMOSTAT4.unitcode3);",
          "8537:  ID = szTmp;",
          "8541:  sprintf(szTmp, \"%d;%d;%d;%d;%d;%d\",",
          "8542:   pResponse->THERMOSTAT4.beep,",
          "8543:   pResponse->THERMOSTAT4.fan1_speed,",
          "",
          "[Removed Lines]",
          "8533:  unsigned char devType = pTypeThermostat4;",
          "8534:  unsigned char subType = pResponse->THERMOSTAT4.subtype;",
          "8538:  unsigned char Unit = 0;",
          "8539:  unsigned char SignalLevel = pResponse->THERMOSTAT4.rssi;",
          "8540:  unsigned char BatteryLevel = 255;",
          "",
          "[Added Lines]",
          "8533:  uint8_t devType = pTypeThermostat4;",
          "8534:  uint8_t subType = pResponse->THERMOSTAT4.subtype;",
          "8538:  uint8_t Unit = 0;",
          "8539:  uint8_t SignalLevel = pResponse->THERMOSTAT4.rssi;",
          "8540:  uint8_t BatteryLevel = 255;",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "8632: void MainWorker::decode_Radiator1(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "8633: {",
          "8634:  char szTmp[100];",
          "8637:  std::string ID;",
          "8638:  sprintf(szTmp, \"%X%02X%02X%02X\", pResponse->RADIATOR1.id1, pResponse->RADIATOR1.id2, pResponse->RADIATOR1.id3, pResponse->RADIATOR1.id4);",
          "8639:  ID = szTmp;",
          "8645:  sprintf(szTmp, \"%d.%d\", pResponse->RADIATOR1.temperature, pResponse->RADIATOR1.tempPoint5);",
          "8646:  uint64_t DevRowIdx = m_sql.UpdateValue(HwdID, ID.c_str(), Unit, devType, subType, SignalLevel, BatteryLevel, cmnd, szTmp, procResult.DeviceName);",
          "",
          "[Removed Lines]",
          "8635:  unsigned char devType = pTypeRadiator1;",
          "8636:  unsigned char subType = pResponse->RADIATOR1.subtype;",
          "8640:  unsigned char Unit = pResponse->RADIATOR1.unitcode;",
          "8641:  unsigned char cmnd = pResponse->RADIATOR1.cmnd;",
          "8642:  unsigned char SignalLevel = pResponse->RADIATOR1.rssi;",
          "8643:  unsigned char BatteryLevel = 255;",
          "",
          "[Added Lines]",
          "8635:  uint8_t devType = pTypeRadiator1;",
          "8636:  uint8_t subType = pResponse->RADIATOR1.subtype;",
          "8640:  uint8_t Unit = pResponse->RADIATOR1.unitcode;",
          "8641:  uint8_t cmnd = pResponse->RADIATOR1.cmnd;",
          "8642:  uint8_t SignalLevel = pResponse->RADIATOR1.rssi;",
          "8643:  uint8_t BatteryLevel = 255;",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "8774: void MainWorker::decode_Current(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "8775: {",
          "8776:  char szTmp[100];",
          "8779:  std::string ID;",
          "8780:  sprintf(szTmp, \"%d\", (pResponse->CURRENT.id1 * 256) + pResponse->CURRENT.id2);",
          "8781:  ID = szTmp;",
          "8787:  float CurrentChannel1 = float((pResponse->CURRENT.ch1h * 256) + pResponse->CURRENT.ch1l) / 10.0f;",
          "8788:  float CurrentChannel2 = float((pResponse->CURRENT.ch2h * 256) + pResponse->CURRENT.ch2l) / 10.0f;",
          "",
          "[Removed Lines]",
          "8777:  unsigned char devType = pTypeCURRENT;",
          "8778:  unsigned char subType = pResponse->CURRENT.subtype;",
          "8782:  unsigned char Unit = 0;",
          "8783:  unsigned char cmnd = 0;",
          "8784:  unsigned char SignalLevel = pResponse->CURRENT.rssi;",
          "8785:  unsigned char BatteryLevel = get_BateryLevel(HwdType, false, pResponse->CURRENT.battery_level & 0x0F);",
          "",
          "[Added Lines]",
          "8777:  uint8_t devType = pTypeCURRENT;",
          "8778:  uint8_t subType = pResponse->CURRENT.subtype;",
          "8782:  uint8_t Unit = 0;",
          "8783:  uint8_t cmnd = 0;",
          "8784:  uint8_t SignalLevel = pResponse->CURRENT.rssi;",
          "8785:  uint8_t BatteryLevel = get_BateryLevel(HwdType, false, pResponse->CURRENT.battery_level & 0x0F);",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "8836: void MainWorker::decode_Energy(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "8837: {",
          "8842:  long instant = (pResponse->ENERGY.instant1 * 0x1000000) + (pResponse->ENERGY.instant2 * 0x10000) + (pResponse->ENERGY.instant3 * 0x100) + pResponse->ENERGY.instant4;",
          "",
          "[Removed Lines]",
          "8838:  unsigned char subType = pResponse->ENERGY.subtype;",
          "8839:  unsigned char SignalLevel = pResponse->ENERGY.rssi;",
          "8840:  unsigned char BatteryLevel = get_BateryLevel(HwdType, false, pResponse->ENERGY.battery_level & 0x0F);",
          "",
          "[Added Lines]",
          "8838:  uint8_t subType = pResponse->ENERGY.subtype;",
          "8839:  uint8_t SignalLevel = pResponse->ENERGY.rssi;",
          "8840:  uint8_t BatteryLevel = get_BateryLevel(HwdType, false, pResponse->ENERGY.battery_level & 0x0F);",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "8863:    int nValue;",
          "8864:    subType = sTypeKwh; // sensor type changed during recording",
          "8867:    std::string sValue;",
          "8868:    struct tm LastUpdateTime;",
          "8869:    if (!m_sql.GetLastValue(HwdID, ID.c_str(), Unit, devType, subType, nValue, sValue, LastUpdateTime))",
          "",
          "[Removed Lines]",
          "8865:    unsigned char devType = pTypeGeneral; // Device reported as General and not Energy",
          "8866:    unsigned char Unit = 1; // in decode_general() Unit is set to 1",
          "",
          "[Added Lines]",
          "8865:    uint8_t devType = pTypeGeneral; // Device reported as General and not Energy",
          "8866:    uint8_t Unit = 1; // in decode_general() Unit is set to 1",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "8899: void MainWorker::decode_Power(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "8900: {",
          "8901:  char szTmp[100];",
          "8904:  std::string ID;",
          "8905:  sprintf(szTmp, \"%d\", (pResponse->POWER.id1 * 256) + pResponse->POWER.id2);",
          "8906:  ID = szTmp;",
          "8912:  float Voltage = (float)pResponse->POWER.voltage;",
          "8913:  double current = ((pResponse->POWER.currentH * 256) + pResponse->POWER.currentL) / 100.0;",
          "",
          "[Removed Lines]",
          "8902:  unsigned char devType = pTypePOWER;",
          "8903:  unsigned char subType = pResponse->POWER.subtype;",
          "8907:  unsigned char Unit = 0;",
          "8908:  unsigned char cmnd = 0;",
          "8909:  unsigned char SignalLevel = pResponse->POWER.rssi;",
          "8910:  unsigned char BatteryLevel = 255;",
          "",
          "[Added Lines]",
          "8902:  uint8_t devType = pTypePOWER;",
          "8903:  uint8_t subType = pResponse->POWER.subtype;",
          "8907:  uint8_t Unit = 0;",
          "8908:  uint8_t cmnd = 0;",
          "8909:  uint8_t SignalLevel = pResponse->POWER.rssi;",
          "8910:  uint8_t BatteryLevel = 255;",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "8984: void MainWorker::decode_Current_Energy(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "8985: {",
          "8986:  char szTmp[100];",
          "8989:  std::string ID;",
          "8990:  sprintf(szTmp, \"%d\", (pResponse->CURRENT_ENERGY.id1 * 256) + pResponse->CURRENT_ENERGY.id2);",
          "8991:  ID = szTmp;",
          "8997:  float CurrentChannel1 = float((pResponse->CURRENT_ENERGY.ch1h * 256) + pResponse->CURRENT_ENERGY.ch1l) / 10.0f;",
          "8998:  float CurrentChannel2 = float((pResponse->CURRENT_ENERGY.ch2h * 256) + pResponse->CURRENT_ENERGY.ch2l) / 10.0f;",
          "",
          "[Removed Lines]",
          "8987:  unsigned char devType = pTypeCURRENTENERGY;",
          "8988:  unsigned char subType = pResponse->CURRENT_ENERGY.subtype;",
          "8992:  unsigned char Unit = 0;",
          "8993:  unsigned char cmnd = 0;",
          "8994:  unsigned char SignalLevel = pResponse->CURRENT_ENERGY.rssi;",
          "8995:  unsigned char BatteryLevel = get_BateryLevel(HwdType, false, pResponse->CURRENT_ENERGY.battery_level & 0x0F);",
          "",
          "[Added Lines]",
          "8987:  uint8_t devType = pTypeCURRENTENERGY;",
          "8988:  uint8_t subType = pResponse->CURRENT_ENERGY.subtype;",
          "8992:  uint8_t Unit = 0;",
          "8993:  uint8_t cmnd = 0;",
          "8994:  uint8_t SignalLevel = pResponse->CURRENT_ENERGY.rssi;",
          "8995:  uint8_t BatteryLevel = get_BateryLevel(HwdType, false, pResponse->CURRENT_ENERGY.battery_level & 0x0F);",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "9136: void MainWorker::decode_Weight(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "9137: {",
          "9138:  char szTmp[100];",
          "9142:  std::string ID;",
          "9143:  sprintf(szTmp, \"%d\", weightID);",
          "9144:  ID = szTmp;",
          "9149:  float weight = (float(pResponse->WEIGHT.weighthigh) * 25.6f) + (float(pResponse->WEIGHT.weightlow) / 10.0f);",
          "9151:  float AddjValue = 0.0f;",
          "",
          "[Removed Lines]",
          "9139:  unsigned char devType = pTypeWEIGHT;",
          "9140:  unsigned char subType = pResponse->WEIGHT.subtype;",
          "9141:  unsigned short weightID = (pResponse->WEIGHT.id1 * 256) + pResponse->WEIGHT.id2;",
          "9145:  unsigned char Unit = 0;",
          "9146:  unsigned char cmnd = 0;",
          "9147:  unsigned char SignalLevel = pResponse->WEIGHT.rssi;",
          "9148:  unsigned char BatteryLevel = 255;",
          "",
          "[Added Lines]",
          "9139:  uint8_t devType = pTypeWEIGHT;",
          "9140:  uint8_t subType = pResponse->WEIGHT.subtype;",
          "9141:  uint16_t weightID = (pResponse->WEIGHT.id1 * 256) + pResponse->WEIGHT.id2;",
          "9145:  uint8_t Unit = 0;",
          "9146:  uint8_t cmnd = 0;",
          "9147:  uint8_t SignalLevel = pResponse->WEIGHT.rssi;",
          "9148:  uint8_t BatteryLevel = 255;",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "9193: void MainWorker::decode_RFXSensor(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "9194: {",
          "9195:  char szTmp[100];",
          "9198:  std::string ID;",
          "9199:  sprintf(szTmp, \"%d\", pResponse->RFXSENSOR.id);",
          "9200:  ID = szTmp;",
          "9206:  if ((HwdType == HTYPE_EnOceanESP2) || (HwdType == HTYPE_EnOceanESP3))",
          "9207:  {",
          "",
          "[Removed Lines]",
          "9196:  unsigned char devType = pTypeRFXSensor;",
          "9197:  unsigned char subType = pResponse->RFXSENSOR.subtype;",
          "9201:  unsigned char Unit = 0;",
          "9202:  unsigned char cmnd = 0;",
          "9203:  unsigned char SignalLevel = pResponse->RFXSENSOR.rssi;",
          "9204:  unsigned char BatteryLevel = 255;",
          "",
          "[Added Lines]",
          "9196:  uint8_t devType = pTypeRFXSensor;",
          "9197:  uint8_t subType = pResponse->RFXSENSOR.subtype;",
          "9201:  uint8_t Unit = 0;",
          "9202:  uint8_t cmnd = 0;",
          "9203:  uint8_t SignalLevel = pResponse->RFXSENSOR.rssi;",
          "9204:  uint8_t BatteryLevel = 255;",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "9356: {",
          "9357:  uint64_t DevRowIdx = -1;",
          "9358:  char szTmp[100];",
          "9361:  if (subType == sTypeRFXMeterCount)",
          "9362:  {",
          "9363:   std::string ID;",
          "9364:   sprintf(szTmp, \"%d\", (pResponse->RFXMETER.id1 * 256) + pResponse->RFXMETER.id2);",
          "9365:   ID = szTmp;",
          "9371:   unsigned long counter = (pResponse->RFXMETER.count1 << 24) + (pResponse->RFXMETER.count2 << 16) + (pResponse->RFXMETER.count3 << 8) + pResponse->RFXMETER.count4;",
          "",
          "[Removed Lines]",
          "9359:  unsigned char devType = pTypeRFXMeter;",
          "9360:  unsigned char subType = pResponse->RFXMETER.subtype;",
          "9366:   unsigned char Unit = 0;",
          "9367:   unsigned char cmnd = 0;",
          "9368:   unsigned char SignalLevel = pResponse->RFXMETER.rssi;",
          "9369:   unsigned char BatteryLevel = 255;",
          "",
          "[Added Lines]",
          "9359:  uint8_t devType = pTypeRFXMeter;",
          "9360:  uint8_t subType = pResponse->RFXMETER.subtype;",
          "9366:   uint8_t Unit = 0;",
          "9367:   uint8_t cmnd = 0;",
          "9368:   uint8_t SignalLevel = pResponse->RFXMETER.rssi;",
          "9369:   uint8_t BatteryLevel = 255;",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "9590:  if (p1Power->len != sizeof(_tP1Power) - 1)",
          "9591:   return;",
          "9595:  std::string ID;",
          "9596:  sprintf(szTmp, \"%d\", p1Power->ID);",
          "9597:  ID = szTmp;",
          "9604:  sprintf(szTmp, \"%u;%u;%u;%u;%u;%u\",",
          "9605:   p1Power->powerusage1,",
          "",
          "[Removed Lines]",
          "9593:  unsigned char devType = p1Power->type;",
          "9594:  unsigned char subType = p1Power->subtype;",
          "9599:  unsigned char Unit = subType;",
          "9600:  unsigned char cmnd = 0;",
          "9601:  unsigned char SignalLevel = 12;",
          "9602:  unsigned char BatteryLevel = 255;",
          "",
          "[Added Lines]",
          "9593:  uint8_t devType = p1Power->type;",
          "9594:  uint8_t subType = p1Power->subtype;",
          "9599:  uint8_t Unit = subType;",
          "9600:  uint8_t cmnd = 0;",
          "9601:  uint8_t SignalLevel = 12;",
          "9602:  uint8_t BatteryLevel = 255;",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "9655:  if (p1Gas->len != sizeof(_tP1Gas) - 1)",
          "9656:   return;",
          "9660:  std::string ID;",
          "9661:  sprintf(szTmp, \"%d\", p1Gas->ID);",
          "9662:  ID = szTmp;",
          "9668:  sprintf(szTmp, \"%u\", p1Gas->gasusage);",
          "9669:  uint64_t DevRowIdx = m_sql.UpdateValue(HwdID, ID.c_str(), Unit, devType, subType, SignalLevel, BatteryLevel, cmnd, szTmp, procResult.DeviceName);",
          "",
          "[Removed Lines]",
          "9658:  unsigned char devType = p1Gas->type;",
          "9659:  unsigned char subType = p1Gas->subtype;",
          "9663:  unsigned char Unit = subType;",
          "9664:  unsigned char cmnd = 0;",
          "9665:  unsigned char SignalLevel = 12;",
          "9666:  unsigned char BatteryLevel = 255;",
          "",
          "[Added Lines]",
          "9658:  uint8_t devType = p1Gas->type;",
          "9659:  uint8_t subType = p1Gas->subtype;",
          "9663:  uint8_t Unit = subType;",
          "9664:  uint8_t cmnd = 0;",
          "9665:  uint8_t SignalLevel = 12;",
          "9666:  uint8_t BatteryLevel = 255;",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "9695: {",
          "9696:  char szTmp[200];",
          "9697:  const CYouLess::YouLessMeter *pMeter = reinterpret_cast<const CYouLess::YouLessMeter*>(pResponse);",
          "9700:  sprintf(szTmp, \"%d\", pMeter->ID1);",
          "9701:  std::string ID = szTmp;",
          "9707:  sprintf(szTmp, \"%lu;%lu\",",
          "9708:   pMeter->powerusage,",
          "",
          "[Removed Lines]",
          "9698:  unsigned char devType = pMeter->type;",
          "9699:  unsigned char subType = pMeter->subtype;",
          "9702:  unsigned char Unit = subType;",
          "9703:  unsigned char cmnd = 0;",
          "9704:  unsigned char SignalLevel = 12;",
          "9705:  unsigned char BatteryLevel = 255;",
          "",
          "[Added Lines]",
          "9698:  uint8_t devType = pMeter->type;",
          "9699:  uint8_t subType = pMeter->subtype;",
          "9702:  uint8_t Unit = subType;",
          "9703:  uint8_t cmnd = 0;",
          "9704:  uint8_t SignalLevel = 12;",
          "9705:  uint8_t BatteryLevel = 255;",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "9741: {",
          "9742:  char szTmp[200];",
          "9743:  const _tRego6XXTemp *pRego = reinterpret_cast<const _tRego6XXTemp*>(pResponse);",
          "9746:  std::string ID = pRego->ID;",
          "9752:  sprintf(szTmp, \"%.1f\",",
          "9753:   pRego->temperature",
          "",
          "[Removed Lines]",
          "9744:  unsigned char devType = pRego->type;",
          "9745:  unsigned char subType = pRego->subtype;",
          "9747:  unsigned char Unit = subType;",
          "9748:  unsigned char cmnd = 0;",
          "9749:  unsigned char SignalLevel = 12;",
          "9750:  unsigned char BatteryLevel = 255;",
          "",
          "[Added Lines]",
          "9744:  uint8_t devType = pRego->type;",
          "9745:  uint8_t subType = pRego->subtype;",
          "9747:  uint8_t Unit = subType;",
          "9748:  uint8_t cmnd = 0;",
          "9749:  uint8_t SignalLevel = 12;",
          "9750:  uint8_t BatteryLevel = 255;",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "9773: {",
          "9774:  char szTmp[200];",
          "9775:  const _tRego6XXStatus *pRego = reinterpret_cast<const _tRego6XXStatus*>(pResponse);",
          "9778:  std::string ID = pRego->ID;",
          "9780:  int numValue = pRego->value;",
          "9784:  sprintf(szTmp, \"%d\",",
          "9785:   pRego->value",
          "",
          "[Removed Lines]",
          "9776:  unsigned char devType = pRego->type;",
          "9777:  unsigned char subType = pRego->subtype;",
          "9779:  unsigned char Unit = subType;",
          "9781:  unsigned char SignalLevel = 12;",
          "9782:  unsigned char BatteryLevel = 255;",
          "",
          "[Added Lines]",
          "9776:  uint8_t devType = pRego->type;",
          "9777:  uint8_t subType = pRego->subtype;",
          "9779:  uint8_t Unit = subType;",
          "9781:  uint8_t SignalLevel = 12;",
          "9782:  uint8_t BatteryLevel = 255;",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "9814: {",
          "9815:  char szTmp[200];",
          "9816:  const _tAirQualityMeter *pMeter = reinterpret_cast<const _tAirQualityMeter*>(pResponse);",
          "9819:  sprintf(szTmp, \"%d\", pMeter->id1);",
          "9820:  std::string ID = szTmp;",
          "9826:  uint64_t DevRowIdx = m_sql.UpdateValue(HwdID, ID.c_str(), Unit, devType, subType, SignalLevel, BatteryLevel, pMeter->airquality, procResult.DeviceName);",
          "9827:  if (DevRowIdx == -1)",
          "",
          "[Removed Lines]",
          "9817:  unsigned char devType = pMeter->type;",
          "9818:  unsigned char subType = pMeter->subtype;",
          "9821:  unsigned char Unit = pMeter->id2;",
          "9823:  unsigned char SignalLevel = 12;",
          "9824:  unsigned char BatteryLevel = 255;",
          "",
          "[Added Lines]",
          "9817:  uint8_t devType = pMeter->type;",
          "9818:  uint8_t subType = pMeter->subtype;",
          "9821:  uint8_t Unit = pMeter->id2;",
          "9823:  uint8_t SignalLevel = 12;",
          "9824:  uint8_t BatteryLevel = 255;",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "9865: {",
          "9866:  char szTmp[200];",
          "9867:  const _tUsageMeter *pMeter = reinterpret_cast<const _tUsageMeter*>(pResponse);",
          "9870:  sprintf(szTmp, \"%X%02X%02X%02X\", pMeter->id1, pMeter->id2, pMeter->id3, pMeter->id4);",
          "9871:  std::string ID = szTmp;",
          "9877:  sprintf(szTmp, \"%.1f\", pMeter->fusage);",
          "",
          "[Removed Lines]",
          "9868:  unsigned char devType = pMeter->type;",
          "9869:  unsigned char subType = pMeter->subtype;",
          "9872:  unsigned char Unit = pMeter->dunit;",
          "9873:  unsigned char cmnd = 0;",
          "9874:  unsigned char SignalLevel = 12;",
          "9875:  unsigned char BatteryLevel = 255;",
          "",
          "[Added Lines]",
          "9868:  uint8_t devType = pMeter->type;",
          "9869:  uint8_t subType = pMeter->subtype;",
          "9872:  uint8_t Unit = pMeter->dunit;",
          "9873:  uint8_t cmnd = 0;",
          "9874:  uint8_t SignalLevel = 12;",
          "9875:  uint8_t BatteryLevel = 255;",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "9907: {",
          "9908:  char szTmp[200];",
          "9909:  const _tLightMeter *pMeter = reinterpret_cast<const _tLightMeter*>(pResponse);",
          "9912:  sprintf(szTmp, \"%X%02X%02X%02X\", pMeter->id1, pMeter->id2, pMeter->id3, pMeter->id4);",
          "9913:  std::string ID = szTmp;",
          "9919:  sprintf(szTmp, \"%.0f\", pMeter->fLux);",
          "",
          "[Removed Lines]",
          "9910:  unsigned char devType = pMeter->type;",
          "9911:  unsigned char subType = pMeter->subtype;",
          "9914:  unsigned char Unit = pMeter->dunit;",
          "9915:  unsigned char cmnd = 0;",
          "9916:  unsigned char SignalLevel = 12;",
          "9917:  unsigned char BatteryLevel = pMeter->battery_level;",
          "",
          "[Added Lines]",
          "9910:  uint8_t devType = pMeter->type;",
          "9911:  uint8_t subType = pMeter->subtype;",
          "9914:  uint8_t Unit = pMeter->dunit;",
          "9915:  uint8_t cmnd = 0;",
          "9916:  uint8_t SignalLevel = 12;",
          "9917:  uint8_t BatteryLevel = pMeter->battery_level;",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "9949: {",
          "9950:  char szTmp[200];",
          "9951:  const _tThermostat *pMeter = reinterpret_cast<const _tThermostat*>(pResponse);",
          "9954:  sprintf(szTmp, \"%X%02X%02X%02X\", pMeter->id1, pMeter->id2, pMeter->id3, pMeter->id4);",
          "9955:  std::string ID = szTmp;",
          "9961:  switch (pMeter->subtype)",
          "9962:  {",
          "",
          "[Removed Lines]",
          "9952:  unsigned char devType = pMeter->type;",
          "9953:  unsigned char subType = pMeter->subtype;",
          "9956:  unsigned char Unit = pMeter->dunit;",
          "9957:  unsigned char cmnd = 0;",
          "9958:  unsigned char SignalLevel = 12;",
          "9959:  unsigned char BatteryLevel = pMeter->battery_level;",
          "",
          "[Added Lines]",
          "9952:  uint8_t devType = pMeter->type;",
          "9953:  uint8_t subType = pMeter->subtype;",
          "9956:  uint8_t Unit = pMeter->dunit;",
          "9957:  uint8_t cmnd = 0;",
          "9958:  uint8_t SignalLevel = 12;",
          "9959:  uint8_t BatteryLevel = pMeter->battery_level;",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "9996:  procResult.DeviceRowIdx = DevRowIdx;",
          "9997: }",
          "10000: {",
          "10001:  char szTmp[200];",
          "10002:  const _tGeneralDevice *pMeter = reinterpret_cast<const _tGeneralDevice*>(pResponse);",
          "10006:  if (",
          "10007:   (subType == sTypeVoltage) ||",
          "",
          "[Removed Lines]",
          "9999: void MainWorker::decode_General(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult, const unsigned char SignalLevel, const unsigned char BatteryLevel)",
          "10003:  unsigned char devType = pMeter->type;",
          "10004:  unsigned char subType = pMeter->subtype;",
          "",
          "[Added Lines]",
          "9999: void MainWorker::decode_General(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult, const uint8_t SignalLevel, const uint8_t BatteryLevel)",
          "10003:  uint8_t devType = pMeter->type;",
          "10004:  uint8_t subType = pMeter->subtype;",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "10032:  }",
          "10033:  std::string ID = szTmp;",
          "10036:  strcpy(szTmp, \"\");",
          "10038:  uint64_t DevRowIdx = -1;",
          "",
          "[Removed Lines]",
          "10034:  unsigned char Unit = 1;",
          "10035:  unsigned char cmnd = 0;",
          "",
          "[Added Lines]",
          "10034:  uint8_t Unit = 1;",
          "10035:  uint8_t cmnd = 0;",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "10139:  }",
          "10140:  else if ((subType == sTypeZWaveThermostatMode) || (subType == sTypeZWaveThermostatFanMode))",
          "10141:  {",
          "10143:   DevRowIdx = m_sql.UpdateValue(HwdID, ID.c_str(), Unit, devType, subType, SignalLevel, BatteryLevel, cmnd, procResult.DeviceName);",
          "10144:  }",
          "10145:  else if (subType == sTypeKwh)",
          "",
          "[Removed Lines]",
          "10142:   cmnd = (unsigned char)pMeter->intval2;",
          "",
          "[Added Lines]",
          "10142:   cmnd = (uint8_t)pMeter->intval2;",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "10313: {",
          "10314:  char szTmp[200];",
          "10315:  const _tGeneralSwitch *pSwitch = reinterpret_cast<const _tGeneralSwitch*>(pResponse);",
          "10319:  sprintf(szTmp, \"%08X\", pSwitch->id);",
          "10320:  std::string ID = szTmp;",
          "10326:  sprintf(szTmp, \"%d\", level);",
          "10327:  uint64_t DevRowIdx = m_sql.UpdateValue(HwdID, ID.c_str(), Unit, devType, subType, SignalLevel, -1, cmnd, szTmp, procResult.DeviceName);",
          "10328:  if (DevRowIdx == -1)",
          "10329:   return;",
          "10331:  if ((cmnd == gswitch_sGroupOff) || (cmnd == gswitch_sGroupOn))",
          "10332:   check_cmnd = (cmnd == gswitch_sGroupOff) ? gswitch_sOff : gswitch_sOn;",
          "10333:  CheckSceneCode(DevRowIdx, devType, subType, check_cmnd, szTmp);",
          "",
          "[Removed Lines]",
          "10316:  unsigned char devType = pSwitch->type;",
          "10317:  unsigned char subType = pSwitch->subtype;",
          "10321:  unsigned char Unit = pSwitch->unitcode;",
          "10322:  unsigned char cmnd = pSwitch->cmnd;",
          "10323:  unsigned char level = pSwitch->level;",
          "10324:  unsigned char SignalLevel = pSwitch->rssi;",
          "10330:  unsigned char check_cmnd = cmnd;",
          "",
          "[Added Lines]",
          "10316:  uint8_t devType = pSwitch->type;",
          "10317:  uint8_t subType = pSwitch->subtype;",
          "10321:  uint8_t Unit = pSwitch->unitcode;",
          "10322:  uint8_t cmnd = pSwitch->cmnd;",
          "10323:  uint8_t level = pSwitch->level;",
          "10324:  uint8_t SignalLevel = pSwitch->rssi;",
          "10330:  uint8_t check_cmnd = cmnd;",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "10345: void MainWorker::decode_BBQ(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "10346: {",
          "10347:  char szTmp[100];",
          "10351:  sprintf(szTmp, \"%d\", 1);//(pResponse->BBQ.id1 * 256) + pResponse->BBQ.id2); //this because every time you turn the device on, you get a new ID",
          "10352:  std::string ID = szTmp;",
          "10361:  if ((pResponse->BBQ.battery_level & 0x0F) == 0)",
          "10362:   BatteryLevel = 0;",
          "10363:  else",
          "",
          "[Removed Lines]",
          "10348:  unsigned char devType = pTypeBBQ;",
          "10349:  unsigned char subType = pResponse->BBQ.subtype;",
          "10356:  unsigned char Unit = 1;// pResponse->BBQ.id2;",
          "10358:  unsigned char cmnd = 0;",
          "10359:  unsigned char SignalLevel = pResponse->BBQ.rssi;",
          "10360:  unsigned char BatteryLevel = 0;",
          "",
          "[Added Lines]",
          "10348:  uint8_t devType = pTypeBBQ;",
          "10349:  uint8_t subType = pResponse->BBQ.subtype;",
          "10356:  uint8_t Unit = 1;// pResponse->BBQ.id2;",
          "10358:  uint8_t cmnd = 0;",
          "10359:  uint8_t SignalLevel = pResponse->BBQ.rssi;",
          "10360:  uint8_t BatteryLevel = 0;",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "10454:  sprintf(szTmp, \"%llu\", ((unsigned long long)(pResponse->TIC.id1) << 32) + (pResponse->TIC.id2 << 24) + (pResponse->TIC.id3 << 16) + (pResponse->TIC.id4 << 8) + (pResponse->TIC.id5));",
          "10455:  ID = szTmp;",
          "10461:  switch (subType)",
          "10462:  {",
          "",
          "[Removed Lines]",
          "10456:  unsigned char Unit = 0;",
          "10457:  unsigned char cmnd = 0;",
          "10459:  unsigned char subType = pResponse->TIC.subtype;",
          "",
          "[Added Lines]",
          "10456:  uint8_t Unit = 0;",
          "10457:  uint8_t cmnd = 0;",
          "10459:  uint8_t subType = pResponse->TIC.subtype;",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "10481:   WriteMessageStart();",
          "10483:   char szTmp[100];",
          "10486:   switch (pResponse->ASYNCPORT.subtype)",
          "10487:   {",
          "",
          "[Removed Lines]",
          "10484:   unsigned char subType = pResponse->ASYNCPORT.subtype;",
          "",
          "[Added Lines]",
          "10484:   uint8_t subType = pResponse->ASYNCPORT.subtype;",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "10684:  unsigned int apparentPower = 0;",
          "10685:  unsigned int counter1ApparentPower = 0;",
          "10686:  unsigned int counter2ApparentPower = 0;",
          "10690:  std::string ID;",
          "10699:  if ((pResponse->TIC.state & 0x04) == 0)",
          "",
          "[Removed Lines]",
          "10687:  unsigned char unitCounter1 = 0;",
          "10688:  unsigned char unitCounter2 = 1;",
          "10689:  unsigned char cmnd = 0;",
          "10692:  unsigned char devType = pTypeGeneral;",
          "10693:  unsigned char subType = sTypeKwh;",
          "10694:  unsigned char SignalLevel = pResponse->TIC.rssi;",
          "10696:  unsigned char BatteryLevel = (pResponse->TIC.battery_level + 1) * 10;",
          "",
          "[Added Lines]",
          "10687:  uint8_t unitCounter1 = 0;",
          "10688:  uint8_t unitCounter2 = 1;",
          "10689:  uint8_t cmnd = 0;",
          "10692:  uint8_t devType = pTypeGeneral;",
          "10693:  uint8_t subType = sTypeKwh;",
          "10694:  uint8_t SignalLevel = pResponse->TIC.rssi;",
          "10696:  uint8_t BatteryLevel = (pResponse->TIC.battery_level + 1) * 10;",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "10875:  uint32_t counter1 = 0;",
          "10876:  uint32_t counter2 = 0;",
          "10877:  int apparentPower = 0;",
          "10880:  uint64_t DevRowIdx = 0;",
          "10881:  std::string ID;",
          "10890:  sprintf(szTmp, \"%d\", ((uint32_t)(pResponse->CEENCODER.id1 << 24) + (pResponse->CEENCODER.id2 << 16) + (pResponse->CEENCODER.id3 << 8) + pResponse->CEENCODER.id4));",
          "",
          "[Removed Lines]",
          "10878:  unsigned char Unit = 0;",
          "10879:  unsigned char cmnd = 0;",
          "10883:  unsigned char devType = pTypeRFXMeter;",
          "10884:  unsigned char subType = sTypeRFXMeterCount;",
          "10885:  unsigned char SignalLevel = pResponse->CEENCODER.rssi;",
          "10887:  unsigned char BatteryLevel = (pResponse->CEENCODER.battery_level + 1) * 10;",
          "",
          "[Added Lines]",
          "10878:  uint8_t Unit = 0;",
          "10879:  uint8_t cmnd = 0;",
          "10883:  uint8_t devType = pTypeRFXMeter;",
          "10884:  uint8_t subType = sTypeRFXMeterCount;",
          "10885:  uint8_t SignalLevel = pResponse->CEENCODER.rssi;",
          "10887:  uint8_t BatteryLevel = (pResponse->CEENCODER.battery_level + 1) * 10;",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "10912: void MainWorker::decode_Weather(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "10913: {",
          "10915:  char szTmp[100];",
          "10916:  sprintf(szTmp, \"%d\", windID);",
          "10917:  std::string ID = szTmp;",
          "10926:  procResult.DeviceRowIdx = -1;",
          "",
          "[Removed Lines]",
          "10914:  unsigned short windID = (pResponse->WEATHER.id1 * 256) + pResponse->WEATHER.id2;",
          "10919:  unsigned char devType = pTypeWEATHER;",
          "10920:  unsigned char subType = pResponse->WEATHER.subtype;",
          "10921:  unsigned char Unit = 0;",
          "10922:  unsigned char cmnd = 0;",
          "10923:  unsigned char SignalLevel = pResponse->WEATHER.rssi;",
          "10924:  unsigned char BatteryLevel = get_BateryLevel(HwdType, false, pResponse->WEATHER.battery_level & 0x0F);",
          "",
          "[Added Lines]",
          "10914:  uint16_t windID = (pResponse->WEATHER.id1 * 256) + pResponse->WEATHER.id2;",
          "10919:  uint8_t devType = pTypeWEATHER;",
          "10920:  uint8_t subType = pResponse->WEATHER.subtype;",
          "10921:  uint8_t Unit = 0;",
          "10922:  uint8_t cmnd = 0;",
          "10923:  uint8_t SignalLevel = pResponse->WEATHER.rssi;",
          "10924:  uint8_t BatteryLevel = get_BateryLevel(HwdType, false, pResponse->WEATHER.battery_level & 0x0F);",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "10968:   if (subType = sTypeWEATHER2)",
          "10969:   {",
          "10970:    int Humidity = (int)pResponse->WEATHER.humidity;",
          "10973:    MySensorsBase *pMySensorDevice = reinterpret_cast<MySensorsBase*>(pHardware);",
          "",
          "[Removed Lines]",
          "10971:    unsigned char HumidityStatus = pResponse->WEATHER.humidity_status;",
          "",
          "[Added Lines]",
          "10971:    uint8_t HumidityStatus = pResponse->WEATHER.humidity_status;",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "11002:   if (subType = sTypeWEATHER2)",
          "11003:   {",
          "11004:    float radiation = (float)((pResponse->WEATHER.solarhigh * 256) + pResponse->WEATHER.solarlow);",
          "11006:   }",
          "11007:  }",
          "11008: }",
          "11010: void MainWorker::decode_Solar(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "11011: {",
          "11015:  _tGeneralDevice gdevice;",
          "11016:  gdevice.subtype = sTypeSolarRadiation;",
          "11017:  gdevice.intval1 = (pResponse->SOLAR.id1 * 256) + pResponse->SOLAR.id2;",
          "11018:  gdevice.floatval1 = float((pResponse->SOLAR.solarhigh * 256) + float(pResponse->SOLAR.solarlow)) / 100.f;",
          "11019:  decode_General(HwdID, HwdType, pResponse, procResult, SignalLevel, BatteryLevel);",
          "11020:  procResult.bProcessBatteryValue = false;",
          "",
          "[Removed Lines]",
          "11005:    pRFXDevice->SendSolarRadiationSensor(windID, BatteryLevel, radiation, procResult.DeviceName);",
          "11012:  unsigned char SignalLevel = pResponse->SOLAR.rssi;",
          "11013:  unsigned char BatteryLevel = get_BateryLevel(HwdType, false, pResponse->SOLAR.battery_level & 0x0F);",
          "",
          "[Added Lines]",
          "11005:    pRFXDevice->SendSolarRadiationSensor((const uint8_t)windID, BatteryLevel, radiation, procResult.DeviceName);",
          "11012:  uint8_t SignalLevel = pResponse->SOLAR.rssi;",
          "11013:  uint8_t BatteryLevel = get_BateryLevel(HwdType, false, pResponse->SOLAR.battery_level & 0x0F);",
          "11018:  gdevice.id = (uint8_t)gdevice.intval1;",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "11180:  std::stringstream s_strid;",
          "11181:  s_strid << std::hex << sd[1];",
          "11182:  s_strid >> ID;",
          "11188:  int HardwareID = atoi(sd[0].c_str());",
          "",
          "[Removed Lines]",
          "11183:  unsigned char ID1 = (unsigned char)((ID & 0xFF000000) >> 24);",
          "11184:  unsigned char ID2 = (unsigned char)((ID & 0x00FF0000) >> 16);",
          "11185:  unsigned char ID3 = (unsigned char)((ID & 0x0000FF00) >> 8);",
          "11186:  unsigned char ID4 = (unsigned char)((ID & 0x000000FF));",
          "",
          "[Added Lines]",
          "11184:  uint8_t ID1 = (uint8_t)((ID & 0xFF000000) >> 24);",
          "11185:  uint8_t ID2 = (uint8_t)((ID & 0x00FF0000) >> 16);",
          "11186:  uint8_t ID3 = (uint8_t)((ID & 0x0000FF00) >> 8);",
          "11187:  uint8_t ID4 = (uint8_t)((ID & 0x000000FF));",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "11219:   }",
          "11220:  }",
          "11225:  _eSwitchType switchtype = (_eSwitchType)atoi(sd[5].c_str());",
          "11226:  std::map<std::string, std::string> options = m_sql.BuildDeviceOptions(sd[10].c_str());",
          "",
          "[Removed Lines]",
          "11222:  unsigned char Unit = atoi(sd[2].c_str());",
          "11223:  unsigned char dType = atoi(sd[3].c_str());",
          "11224:  unsigned char dSubType = atoi(sd[4].c_str());",
          "",
          "[Added Lines]",
          "11223:  uint8_t Unit = atoi(sd[2].c_str());",
          "11224:  uint8_t dType = atoi(sd[3].c_str());",
          "11225:  uint8_t dSubType = atoi(sd[4].c_str());",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "11312:    return false;",
          "11313:   if (!IsTesting) {",
          "11316:   }",
          "11317:   return true;",
          "11318:  }",
          "",
          "[Removed Lines]",
          "11315:    PushAndWaitRxMessage(m_hardwaredevices[hindex], (const unsigned char *)&lcmd, NULL, -1);",
          "",
          "[Added Lines]",
          "11316:    PushAndWaitRxMessage(m_hardwaredevices[hindex], (const uint8_t *)&lcmd, NULL, -1);",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "11369:   else",
          "11370:    level = (level > 15) ? 15 : level;",
          "11374:   if ((pHardware->HwdType == HTYPE_EnOceanESP2) && (IsTesting) && (switchtype == STYPE_Dimmer))",
          "11375:   {",
          "",
          "[Removed Lines]",
          "11372:   lcmd.LIGHTING2.level = (unsigned char)level;",
          "",
          "[Added Lines]",
          "11373:   lcmd.LIGHTING2.level = (uint8_t)level;",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "11393:   if (!IsTesting) {",
          "11396:   }",
          "11397:   return true;",
          "11398:  }",
          "",
          "[Removed Lines]",
          "11395:    PushAndWaitRxMessage(m_hardwaredevices[hindex], (const unsigned char *)&lcmd, NULL, -1);",
          "",
          "[Added Lines]",
          "11396:    PushAndWaitRxMessage(m_hardwaredevices[hindex], (const uint8_t *)&lcmd, NULL, -1);",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "11427:     return false;",
          "11428:    if (!IsTesting) {",
          "11431:    }",
          "11432:    return true;",
          "11433:   }",
          "",
          "[Removed Lines]",
          "11430:     PushAndWaitRxMessage(m_hardwaredevices[hindex], (const unsigned char *)&lcmd, NULL, -1);",
          "",
          "[Added Lines]",
          "11431:     PushAndWaitRxMessage(m_hardwaredevices[hindex], (const uint8_t *)&lcmd, NULL, -1);",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "11466:   }",
          "11467:   if (level > 31)",
          "11468:    level = 31;",
          "11470:   if (dSubType == sTypeLivolo)",
          "11471:   {",
          "11472:    if ((switchcmd == \"Set Level\") && (level == 0))",
          "",
          "[Removed Lines]",
          "11469:   lcmd.LIGHTING5.level = (unsigned char)level;",
          "",
          "[Added Lines]",
          "11470:   lcmd.LIGHTING5.level = (uint8_t)level;",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "11477:    if (switchcmd != \"Off\")",
          "11478:    {",
          "11481:     lcmd.LIGHTING5.cmnd = light5_sLivoloAllOff;",
          "11482:     if (!WriteToHardware(HardwareID, (const char*)&lcmd, sizeof(lcmd.LIGHTING5)))",
          "11483:      return false;",
          "",
          "[Removed Lines]",
          "11480:     unsigned char oldCmd = lcmd.LIGHTING5.cmnd;",
          "",
          "[Added Lines]",
          "11481:     uint8_t oldCmd = lcmd.LIGHTING5.cmnd;",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "11512:     (switchcmd == \"On\") ||      //Special Case, turn off first to ensure light is in normal mode",
          "11513:     (switchcmd == \"Set Color\"))",
          "11514:    {",
          "11516:     lcmd.LIGHTING5.cmnd = light5_sRGBoff;",
          "11517:     if (!WriteToHardware(HardwareID, (const char*)&lcmd, sizeof(lcmd.LIGHTING5)))",
          "11518:      return false;",
          "",
          "[Removed Lines]",
          "11515:     unsigned char oldCmd = lcmd.LIGHTING5.cmnd;",
          "",
          "[Added Lines]",
          "11516:     uint8_t oldCmd = lcmd.LIGHTING5.cmnd;",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "11550:   }",
          "11551:   if (!IsTesting) {",
          "11554:   }",
          "11555:   return true;",
          "11556:  }",
          "",
          "[Removed Lines]",
          "11553:    PushAndWaitRxMessage(m_hardwaredevices[hindex], (const unsigned char *)&lcmd, NULL, -1);",
          "",
          "[Added Lines]",
          "11554:    PushAndWaitRxMessage(m_hardwaredevices[hindex], (const uint8_t *)&lcmd, NULL, -1);",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "11577:    return false;",
          "11578:   if (!IsTesting) {",
          "11581:   }",
          "11582:   return true;",
          "11583:  }",
          "",
          "[Removed Lines]",
          "11580:    PushAndWaitRxMessage(m_hardwaredevices[hindex], (const unsigned char *)&lcmd, NULL, -1);",
          "",
          "[Added Lines]",
          "11581:    PushAndWaitRxMessage(m_hardwaredevices[hindex], (const uint8_t *)&lcmd, NULL, -1);",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "11613:   if (!IsTesting) {",
          "11616:   }",
          "11617:   return true;",
          "11618:  }",
          "",
          "[Removed Lines]",
          "11615:    PushAndWaitRxMessage(m_hardwaredevices[hindex], (const unsigned char *)&lcmd, NULL, -1);",
          "",
          "[Added Lines]",
          "11616:    PushAndWaitRxMessage(m_hardwaredevices[hindex], (const uint8_t *)&lcmd, NULL, -1);",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "11638:    return false;",
          "11639:   if (!IsTesting) {",
          "11642:   }",
          "11643:   return true;",
          "11644:  }",
          "",
          "[Removed Lines]",
          "11641:    PushAndWaitRxMessage(m_hardwaredevices[hindex], (const unsigned char *)&lcmd, NULL, -1);",
          "",
          "[Added Lines]",
          "11642:    PushAndWaitRxMessage(m_hardwaredevices[hindex], (const uint8_t *)&lcmd, NULL, -1);",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "11662:    return false;",
          "11663:   if (!IsTesting) {",
          "11666:   }",
          "11667:   return true;",
          "11668:  }",
          "",
          "[Removed Lines]",
          "11665:    PushAndWaitRxMessage(m_hardwaredevices[hindex], (const unsigned char *)&lcmd, NULL, -1);",
          "",
          "[Added Lines]",
          "11666:    PushAndWaitRxMessage(m_hardwaredevices[hindex], (const uint8_t *)&lcmd, NULL, -1);",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "11692:    return false;",
          "11693:   if (!IsTesting) {",
          "11696:   }",
          "11697:   return true;",
          "11698:  }",
          "",
          "[Removed Lines]",
          "11695:    PushAndWaitRxMessage(m_hardwaredevices[hindex], (const unsigned char *)&lcmd, NULL, -1);",
          "",
          "[Added Lines]",
          "11696:    PushAndWaitRxMessage(m_hardwaredevices[hindex], (const uint8_t *)&lcmd, NULL, -1);",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "11724:     return false;",
          "11725:    if (!IsTesting) {",
          "11728:    }",
          "11729:   }",
          "11730:   break;",
          "",
          "[Removed Lines]",
          "11727:     PushAndWaitRxMessage(m_hardwaredevices[hindex], (const unsigned char *)&lcmd, NULL, -1);",
          "",
          "[Added Lines]",
          "11728:     PushAndWaitRxMessage(m_hardwaredevices[hindex], (const uint8_t *)&lcmd, NULL, -1);",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "11739:     return false;",
          "11740:    if (!IsTesting) {",
          "11743:    }",
          "11744:   }",
          "11745:   break;",
          "",
          "[Removed Lines]",
          "11742:     PushAndWaitRxMessage(m_hardwaredevices[hindex], (const unsigned char *)&lcmd, NULL, -1);",
          "",
          "[Added Lines]",
          "11743:     PushAndWaitRxMessage(m_hardwaredevices[hindex], (const uint8_t *)&lcmd, NULL, -1);",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "11786:    return false;",
          "11787:   if (!IsTesting) {",
          "11790:   }",
          "11791:   return true;",
          "11792:  }",
          "",
          "[Removed Lines]",
          "11789:    PushAndWaitRxMessage(m_hardwaredevices[hindex], (const unsigned char *)&lcmd, NULL, -1);",
          "",
          "[Added Lines]",
          "11790:    PushAndWaitRxMessage(m_hardwaredevices[hindex], (const uint8_t *)&lcmd, NULL, -1);",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "11808:    return false;",
          "11809:   if (!IsTesting) {",
          "11812:   }",
          "11813:   return true;",
          "11814:  }",
          "",
          "[Removed Lines]",
          "11811:    PushAndWaitRxMessage(m_hardwaredevices[hindex], (const unsigned char *)&lcmd, NULL, -1);",
          "",
          "[Added Lines]",
          "11812:    PushAndWaitRxMessage(m_hardwaredevices[hindex], (const uint8_t *)&lcmd, NULL, -1);",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "11856:    return false;",
          "11857:   if (!IsTesting) {",
          "11860:   }",
          "11861:   return true;",
          "11862:  }",
          "",
          "[Removed Lines]",
          "11859:    PushAndWaitRxMessage(m_hardwaredevices[hindex], (const unsigned char *)&lcmd, NULL, -1);",
          "",
          "[Added Lines]",
          "11860:    PushAndWaitRxMessage(m_hardwaredevices[hindex], (const uint8_t *)&lcmd, NULL, -1);",
          "",
          "---------------",
          "--- Hunk 104 ---",
          "[Context before]",
          "11900:    return false;",
          "11901:   if (!IsTesting) {",
          "11904:   }",
          "11905:   return true;",
          "11906:  }",
          "",
          "[Removed Lines]",
          "11903:    PushAndWaitRxMessage(m_hardwaredevices[hindex], (const unsigned char *)&lcmd, NULL, -1);",
          "",
          "[Added Lines]",
          "11904:    PushAndWaitRxMessage(m_hardwaredevices[hindex], (const uint8_t *)&lcmd, NULL, -1);",
          "",
          "---------------",
          "--- Hunk 105 ---",
          "[Context before]",
          "11922:    return false;",
          "11923:   if (!IsTesting) {",
          "11926:   }",
          "11927:   return true;",
          "11928:  }",
          "",
          "[Removed Lines]",
          "11925:    PushAndWaitRxMessage(m_hardwaredevices[hindex], (const unsigned char *)&lcmd, NULL, -1);",
          "",
          "[Added Lines]",
          "11926:    PushAndWaitRxMessage(m_hardwaredevices[hindex], (const uint8_t *)&lcmd, NULL, -1);",
          "",
          "---------------",
          "--- Hunk 106 ---",
          "[Context before]",
          "11946:    return false;",
          "11947:   if (!IsTesting) {",
          "11950:   }",
          "11951:   return true;",
          "11952:  }",
          "",
          "[Removed Lines]",
          "11949:    PushAndWaitRxMessage(m_hardwaredevices[hindex], (const unsigned char *)&lcmd, NULL, -1);",
          "",
          "[Added Lines]",
          "11950:    PushAndWaitRxMessage(m_hardwaredevices[hindex], (const uint8_t *)&lcmd, NULL, -1);",
          "",
          "---------------",
          "--- Hunk 107 ---",
          "[Context before]",
          "11970:    return false;",
          "11971:   if (!IsTesting) {",
          "11974:   }",
          "11975:   return true;",
          "11976:  }",
          "",
          "[Removed Lines]",
          "11973:    PushAndWaitRxMessage(m_hardwaredevices[hindex], (const unsigned char *)&lcmd, NULL, -1);",
          "",
          "[Added Lines]",
          "11974:    PushAndWaitRxMessage(m_hardwaredevices[hindex], (const uint8_t *)&lcmd, NULL, -1);",
          "",
          "---------------",
          "--- Hunk 108 ---",
          "[Context before]",
          "11996:   return false;",
          "11997:   if (!IsTesting) {",
          "12000:   }",
          "12002:   return true;",
          "",
          "[Removed Lines]",
          "11999:   PushAndWaitRxMessage(m_hardwaredevices[hindex], (const unsigned char *)&lcmd, NULL, -1);",
          "",
          "[Added Lines]",
          "12000:   PushAndWaitRxMessage(m_hardwaredevices[hindex], (const uint8_t *)&lcmd, NULL, -1);",
          "",
          "---------------",
          "--- Hunk 109 ---",
          "[Context before]",
          "12018:    return false;",
          "12019:   if (!IsTesting) {",
          "12022:   }",
          "12023:   return true;",
          "12024:  }",
          "",
          "[Removed Lines]",
          "12021:    PushAndWaitRxMessage(m_hardwaredevices[hindex], (const unsigned char *)&lcmd, NULL, -1);",
          "",
          "[Added Lines]",
          "12022:    PushAndWaitRxMessage(m_hardwaredevices[hindex], (const uint8_t *)&lcmd, NULL, -1);",
          "",
          "---------------",
          "--- Hunk 110 ---",
          "[Context before]",
          "12041:    return false;",
          "12042:   if (!IsTesting) {",
          "12045:   }",
          "12046:   return true;",
          "12047:  }",
          "",
          "[Removed Lines]",
          "12044:    PushAndWaitRxMessage(m_hardwaredevices[hindex], (const unsigned char *)&lcmd, NULL, -1);",
          "",
          "[Added Lines]",
          "12045:    PushAndWaitRxMessage(m_hardwaredevices[hindex], (const uint8_t *)&lcmd, NULL, -1);",
          "",
          "---------------",
          "--- Hunk 111 ---",
          "[Context before]",
          "12071:   if (!IsTesting) {",
          "12073:    lcmd.RADIATOR1.subtype = sTypeSmartwaresSwitchRadiator;",
          "12075:   }",
          "12076:   return true;",
          "12077:  case pTypeGeneralSwitch:",
          "",
          "[Removed Lines]",
          "12074:    PushAndWaitRxMessage(m_hardwaredevices[hindex], (const unsigned char *)&lcmd, NULL, -1);",
          "",
          "[Added Lines]",
          "12075:    PushAndWaitRxMessage(m_hardwaredevices[hindex], (const uint8_t *)&lcmd, NULL, -1);",
          "",
          "---------------",
          "--- Hunk 112 ---",
          "[Context before]",
          "12123:    (gswitch.cmnd == gswitch_sSetLevel) && (level == 100))",
          "12124:    gswitch.cmnd = gswitch_sOn;",
          "12127:   gswitch.rssi = 12;",
          "12128:   if (switchtype != STYPE_Motion) //dont send actual motion off command",
          "12129:   {",
          "",
          "[Removed Lines]",
          "12126:   gswitch.level = (unsigned char)level;",
          "",
          "[Added Lines]",
          "12127:   gswitch.level = (uint8_t)level;",
          "",
          "---------------",
          "--- Hunk 113 ---",
          "[Context before]",
          "12132:   }",
          "12133:   if (!IsTesting) {",
          "12136:   }",
          "12137:  }",
          "12138:  return true;",
          "",
          "[Removed Lines]",
          "12135:    PushAndWaitRxMessage(m_hardwaredevices[hindex], (const unsigned char *)&gswitch, NULL, -1);",
          "",
          "[Added Lines]",
          "12136:    PushAndWaitRxMessage(m_hardwaredevices[hindex], (const uint8_t *)&gswitch, NULL, -1);",
          "",
          "---------------",
          "--- Hunk 114 ---",
          "[Context before]",
          "12174:  if (hindex == -1)",
          "12175:   return false;",
          "12180:  _eSwitchType switchtype = (_eSwitchType)atoi(sd[5].c_str());",
          "12182:  CDomoticzHardwareBase *pHardware = GetHardware(HardwareID);",
          "",
          "[Removed Lines]",
          "12177:  unsigned char Unit = atoi(sd[2].c_str());",
          "12178:  unsigned char dType = atoi(sd[3].c_str());",
          "12179:  unsigned char dSubType = atoi(sd[4].c_str());",
          "",
          "[Added Lines]",
          "12178:  uint8_t Unit = atoi(sd[2].c_str());",
          "12179:  uint8_t dType = atoi(sd[3].c_str());",
          "12180:  uint8_t dSubType = atoi(sd[4].c_str());",
          "",
          "---------------",
          "--- Hunk 115 ---",
          "[Context before]",
          "12208:  WriteToHardware(HardwareID, (const char*)&tsen, sizeof(_tEVOHOME1));",
          "12212:  return true;",
          "12213: }",
          "",
          "[Removed Lines]",
          "12211:  PushRxMessage(pHardware, (const unsigned char *)&tsen, NULL, 255);",
          "",
          "[Added Lines]",
          "12212:  PushRxMessage(pHardware, (const uint8_t *)&tsen, NULL, 255);",
          "",
          "---------------",
          "--- Hunk 116 ---",
          "[Context before]",
          "12309:  s_strid >> ID;",
          "12317:  if (pHardware->HwdType == HTYPE_EVOHOME_SCRIPT || pHardware->HwdType == HTYPE_EVOHOME_SERIAL || pHardware->HwdType == HTYPE_EVOHOME_WEB || pHardware->HwdType == HTYPE_EVOHOME_TCP)",
          "",
          "[Removed Lines]",
          "12312:  unsigned char Unit = atoi(sd[2].c_str());",
          "12313:  unsigned char dType = atoi(sd[3].c_str());",
          "12314:  unsigned char dSubType = atoi(sd[4].c_str());",
          "",
          "[Added Lines]",
          "12313:  uint8_t Unit = atoi(sd[2].c_str());",
          "12314:  uint8_t dType = atoi(sd[3].c_str());",
          "12315:  uint8_t dSubType = atoi(sd[4].c_str());",
          "",
          "---------------",
          "--- Hunk 117 ---",
          "[Context before]",
          "12340:    tsen.controllermode = atoi(sd[2].c_str());",
          "12341:   }",
          "12344:  }",
          "12345:  return true;",
          "12346: }",
          "",
          "[Removed Lines]",
          "12343:   PushAndWaitRxMessage(pHardware, (const unsigned char*)&tsen, NULL, -1);",
          "",
          "[Added Lines]",
          "12344:   PushAndWaitRxMessage(pHardware, (const uint8_t*)&tsen, NULL, -1);",
          "",
          "---------------",
          "--- Hunk 118 ---",
          "[Context before]",
          "12356:  std::stringstream s_strid;",
          "12357:  s_strid << std::hex << sd[1];",
          "12358:  s_strid >> ID;",
          "12367:  _eSwitchType switchtype = (_eSwitchType)atoi(sd[5].c_str());",
          "12369:  CDomoticzHardwareBase *pHardware = GetHardware(HardwareID);",
          "",
          "[Removed Lines]",
          "12359:  unsigned char ID1 = (unsigned char)((ID & 0xFF000000) >> 24);",
          "12360:  unsigned char ID2 = (unsigned char)((ID & 0x00FF0000) >> 16);",
          "12361:  unsigned char ID3 = (unsigned char)((ID & 0x0000FF00) >> 8);",
          "12362:  unsigned char ID4 = (unsigned char)((ID & 0x000000FF));",
          "12364:  unsigned char Unit = atoi(sd[2].c_str());",
          "12365:  unsigned char dType = atoi(sd[3].c_str());",
          "12366:  unsigned char dSubType = atoi(sd[4].c_str());",
          "",
          "[Added Lines]",
          "12360:  uint8_t ID1 = (uint8_t)((ID & 0xFF000000) >> 24);",
          "12361:  uint8_t ID2 = (uint8_t)((ID & 0x00FF0000) >> 16);",
          "12362:  uint8_t ID3 = (uint8_t)((ID & 0x0000FF00) >> 8);",
          "12363:  uint8_t ID4 = (uint8_t)((ID & 0x000000FF));",
          "12365:  uint8_t Unit = atoi(sd[2].c_str());",
          "12366:  uint8_t dType = atoi(sd[3].c_str());",
          "12367:  uint8_t dSubType = atoi(sd[4].c_str());",
          "",
          "---------------",
          "--- Hunk 119 ---",
          "[Context before]",
          "12497:    sprintf(szTemp, \"%.1f\", TempValue);",
          "12498:    std::vector<std::string> strarray;",
          "12499:    StringSplit(szTemp, \".\", strarray);",
          "12502:    if (!WriteToHardware(HardwareID, (const char*)&lcmd, sizeof(lcmd.RADIATOR1)))",
          "12503:     return false;",
          "12505:   }",
          "12506:   else",
          "12507:   {",
          "",
          "[Removed Lines]",
          "12500:    lcmd.RADIATOR1.temperature = (unsigned char)atoi(strarray[0].c_str());",
          "12501:    lcmd.RADIATOR1.tempPoint5 = (unsigned char)atoi(strarray[1].c_str());",
          "12504:    PushAndWaitRxMessage(pHardware, (const unsigned char*)&lcmd, NULL, -1);",
          "",
          "[Added Lines]",
          "12501:    lcmd.RADIATOR1.temperature = (uint8_t)atoi(strarray[0].c_str());",
          "12502:    lcmd.RADIATOR1.tempPoint5 = (uint8_t)atoi(strarray[1].c_str());",
          "12505:    PushAndWaitRxMessage(pHardware, (const uint8_t*)&lcmd, NULL, -1);",
          "",
          "---------------",
          "--- Hunk 120 ---",
          "[Context before]",
          "12526:    if (pHardware->HwdType == HTYPE_Dummy)",
          "12527:    {",
          "12530:    }",
          "12531:   }",
          "12532:  }",
          "",
          "[Removed Lines]",
          "12529:     PushAndWaitRxMessage(pHardware, (const unsigned char*)&tmeter, NULL, -1);",
          "",
          "[Added Lines]",
          "12530:     PushAndWaitRxMessage(pHardware, (const uint8_t*)&tmeter, NULL, -1);",
          "",
          "---------------",
          "--- Hunk 121 ---",
          "[Context before]",
          "12905:   if (!result2.empty())",
          "12906:   {",
          "12907:    std::vector<std::string> sd2 = result2[0];",
          "12909:    std::string sValue = sd2[7];",
          "12913:    std::string DeviceName = sd2[8];",
          "12914:    _eSwitchType switchtype = (_eSwitchType)atoi(sd2[5].c_str());",
          "",
          "[Removed Lines]",
          "12908:    unsigned char rnValue = atoi(sd2[6].c_str());",
          "12910:    unsigned char Unit = atoi(sd2[2].c_str());",
          "12911:    unsigned char dType = atoi(sd2[3].c_str());",
          "12912:    unsigned char dSubType = atoi(sd2[4].c_str());",
          "",
          "[Added Lines]",
          "12909:    uint8_t rnValue = atoi(sd2[6].c_str());",
          "12911:    uint8_t Unit = atoi(sd2[2].c_str());",
          "12912:    uint8_t dType = atoi(sd2[3].c_str());",
          "12913:    uint8_t dSubType = atoi(sd2[4].c_str());",
          "",
          "---------------",
          "--- Hunk 122 ---",
          "[Context before]",
          "12994:  return true;",
          "12995: }",
          "12998: {",
          "13000:  std::vector<std::vector<std::string> > result;",
          "",
          "[Removed Lines]",
          "12997: void MainWorker::CheckSceneCode(const uint64_t DevRowIdx, const unsigned char dType, const unsigned char dSubType, const int nValue, const char* sValue)",
          "",
          "[Added Lines]",
          "12998: void MainWorker::CheckSceneCode(const uint64_t DevRowIdx, const uint8_t dType, const uint8_t dSubType, const int nValue, const char* sValue)",
          "",
          "---------------",
          "--- Hunk 123 ---",
          "[Context before]",
          "13118:  }",
          "13120:  CDomoticzHardwareBase *pHardware = GetHardwareByType(HTYPE_DomoticzInternal);",
          "13122: }",
          "13124: void MainWorker::UpdateDomoticzSecurityStatus(const int iSecStatus)",
          "",
          "[Removed Lines]",
          "13121:  PushAndWaitRxMessage(pHardware, (const unsigned char *)&tsen, \"Domoticz Security Panel\", -1);",
          "",
          "[Added Lines]",
          "13122:  PushAndWaitRxMessage(pHardware, (const uint8_t *)&tsen, \"Domoticz Security Panel\", -1);",
          "",
          "---------------",
          "--- Hunk 124 ---",
          "[Context before]",
          "13335:    std::stringstream s_strid;",
          "13336:    s_strid << std::hex << DeviceID;",
          "13337:    s_strid >> ID;",
          "13343:    tRBUF lcmd;",
          "13344:    memset(&lcmd, 0, sizeof(RBUF));",
          "",
          "[Removed Lines]",
          "13338:    unsigned char ID1 = (unsigned char)((ID & 0xFF000000) >> 24);",
          "13339:    unsigned char ID2 = (unsigned char)((ID & 0x00FF0000) >> 16);",
          "13340:    unsigned char ID3 = (unsigned char)((ID & 0x0000FF00) >> 8);",
          "13341:    unsigned char ID4 = (unsigned char)((ID & 0x000000FF));",
          "",
          "[Added Lines]",
          "13339:    uint8_t ID1 = (uint8_t)((ID & 0xFF000000) >> 24);",
          "13340:    uint8_t ID2 = (uint8_t)((ID & 0x00FF0000) >> 16);",
          "13341:    uint8_t ID3 = (uint8_t)((ID & 0x0000FF00) >> 8);",
          "13342:    uint8_t ID4 = (uint8_t)((ID & 0x000000FF));",
          "",
          "---------------",
          "--- Hunk 125 ---",
          "[Context before]",
          "13349:    lcmd.LIGHTING2.id2 = ID2;",
          "13350:    lcmd.LIGHTING2.id3 = ID3;",
          "13351:    lcmd.LIGHTING2.id4 = ID4;",
          "13355:    lcmd.LIGHTING2.filler = 0;",
          "13356:    lcmd.LIGHTING2.rssi = signallevel;",
          "13358:    return true;",
          "13359:   }",
          "",
          "[Removed Lines]",
          "13352:    lcmd.LIGHTING2.unitcode = (unsigned char)unit;",
          "13353:    lcmd.LIGHTING2.cmnd = (unsigned char)nValue;",
          "13354:    lcmd.LIGHTING2.level = (unsigned char)atoi(sValue.c_str());",
          "13357:    DecodeRXMessage(pHardware, (const unsigned char *)&lcmd.LIGHTING2, NULL, batterylevel);",
          "",
          "[Added Lines]",
          "13353:    lcmd.LIGHTING2.unitcode = (uint8_t)unit;",
          "13354:    lcmd.LIGHTING2.cmnd = (uint8_t)nValue;",
          "13355:    lcmd.LIGHTING2.level = (uint8_t)atoi(sValue.c_str());",
          "13358:    DecodeRXMessage(pHardware, (const uint8_t *)&lcmd.LIGHTING2, NULL, batterylevel);",
          "",
          "---------------",
          "--- Hunk 126 ---",
          "[Context before]",
          "13423:  uint64_t devidx = m_sql.UpdateValue(",
          "13424:   HardwareID,",
          "13425:   DeviceID.c_str(),",
          "13429:   signallevel,//signal level,",
          "13430:   batterylevel,//battery level",
          "13431:   nValue,",
          "",
          "[Removed Lines]",
          "13426:   (const unsigned char)unit,",
          "13427:   (const unsigned char)devType,",
          "13428:   (const unsigned char)subType,",
          "",
          "[Added Lines]",
          "13427:   (const uint8_t)unit,",
          "13428:   (const uint8_t)devType,",
          "13429:   (const uint8_t)subType,",
          "",
          "---------------",
          "--- Hunk 127 ---",
          "[Context before]",
          "13448:    std::stringstream s_strid;",
          "13449:    s_strid << std::hex << DeviceID;",
          "13450:    s_strid >> ID;",
          "13454:    MySensorsBase *pMySensorDevice = reinterpret_cast<MySensorsBase*>(pHardware);",
          "13455:    pMySensorDevice->SendTextSensorValue(NodeID, ChildID, sValue);",
          "",
          "[Removed Lines]",
          "13451:    unsigned char NodeID = (unsigned char)((ID & 0x0000FF00) >> 8);",
          "13452:    unsigned char ChildID = (unsigned char)((ID & 0x000000FF));",
          "",
          "[Added Lines]",
          "13452:    uint8_t NodeID = (uint8_t)((ID & 0x0000FF00) >> 8);",
          "13453:    uint8_t ChildID = (uint8_t)((ID & 0x000000FF));",
          "",
          "---------------"
        ],
        "main/mainworker.h||main/mainworker.h": [
          "File: main/mainworker.h -> main/mainworker.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:  void SetSecureWebserverSettings(const http::server::ssl_server_settings & ssl_settings);",
          "49:  std::string GetSecureWebserverPort();",
          "50: #endif",
          "54:  bool SwitchLight(const std::string &idx, const std::string &switchcmd, const std::string &level, const std::string &color, const std::string &ooc, const int ExtraDelay);",
          "55:  bool SwitchLight(const uint64_t idx, const std::string &switchcmd, const int level, const _tColor color, const bool ooc, const int ExtraDelay);",
          "",
          "[Removed Lines]",
          "51:  void DecodeRXMessage(const CDomoticzHardwareBase *pHardware, const unsigned char *pRXCommand, const char *defaultName, const int BatteryLevel);",
          "52:  void PushAndWaitRxMessage(const CDomoticzHardwareBase *pHardware, const unsigned char *pRXCommand, const char *defaultName, const int BatteryLevel);",
          "",
          "[Added Lines]",
          "51:  void DecodeRXMessage(const CDomoticzHardwareBase *pHardware, const uint8_t *pRXCommand, const char *defaultName, const int BatteryLevel);",
          "52:  void PushAndWaitRxMessage(const CDomoticzHardwareBase *pHardware, const uint8_t *pRXCommand, const char *defaultName, const int BatteryLevel);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:  bool SwitchScene(const std::string &idx, const std::string &switchcmd);",
          "59:  bool SwitchScene(const uint64_t idx, std::string switchcmd);",
          "61:  bool DoesDeviceActiveAScene(const uint64_t DevRowIdx, const int Cmnd);",
          "63:  bool SetSetPoint(const std::string &idx, const float TempValue);",
          "",
          "[Removed Lines]",
          "60:  void CheckSceneCode(const uint64_t DevRowIdx, const unsigned char dType, const unsigned char dSubType, const int nValue, const char* sValue);",
          "",
          "[Added Lines]",
          "60:  void CheckSceneCode(const uint64_t DevRowIdx, const uint8_t dType, const uint8_t dSubType, const int nValue, const char* sValue);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "85:   const std::string &Name,",
          "86:   const bool Enabled,",
          "87:   const _eHardwareTypes Type,",
          "89:   const std::string &Username, const std::string &Password,",
          "90:   const std::string &Extra,",
          "91:   const int Mode1,",
          "",
          "[Removed Lines]",
          "88:   const std::string &Address, const unsigned short Port, const std::string &SerialPort,",
          "",
          "[Added Lines]",
          "88:   const std::string &Address, const uint16_t Port, const std::string &SerialPort,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "105:  bool UpdateDevice(const int HardwareID, const std::string &DeviceID, const int unit, const int devType, const int subType, int nValue, std::string &sValue, const int signallevel, const int batterylevel, const bool parseTrigger = true);",
          "108:  boost::signals2::signal<void(const uint64_t SceneIdx, const std::string &SceneName)> sOnSwitchScene;",
          "110:  CScheduler m_scheduler;",
          "",
          "[Removed Lines]",
          "107:  boost::signals2::signal<void(const int m_HwdID, const uint64_t DeviceRowIdx, const std::string &DeviceName, const unsigned char *pRXCommand)> sOnDeviceReceived;",
          "",
          "[Added Lines]",
          "107:  boost::signals2::signal<void(const int m_HwdID, const uint64_t DeviceRowIdx, const std::string &DeviceName, const uint8_t *pRXCommand)> sOnDeviceReceived;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "133:  std::vector<int> m_SunRiseSetMins;",
          "134:  std::string m_DayLength;",
          "135:  std::vector<std::string> m_webthemes;",
          "137:  std::map<uint64_t, _tTrendCalculator> m_trend_calculator;",
          "139:  time_t m_LastHeartbeat = 0;",
          "140: private:",
          "141:  void HandleAutomaticBackups();",
          "143:  void HandleLogNotifications();",
          "144:  std::map<std::string, std::pair<time_t, bool> > m_componentheartbeats;",
          "145:  std::mutex m_heartbeatmutex;",
          "",
          "[Removed Lines]",
          "136:  std::map<unsigned short, _tWindCalculator> m_wind_calculator;",
          "142:  uint64_t PerformRealActionFromDomoticzClient(const unsigned char *pRXCommand, CDomoticzHardwareBase **pOriginalHardware);",
          "",
          "[Added Lines]",
          "136:  std::map<uint16_t, _tWindCalculator> m_wind_calculator;",
          "142:  uint64_t PerformRealActionFromDomoticzClient(const uint8_t *pRXCommand, CDomoticzHardwareBase **pOriginalHardware);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "166:  std::string m_szDomoticzUpdateChecksumURL;",
          "167:  bool m_bDoDownloadDomoticzUpdate;",
          "168:  bool m_bStartHardware;",
          "171:  std::vector<CDomoticzHardwareBase*> m_hardwaredevices;",
          "172:  http::server::server_settings m_webserver_settings;",
          "",
          "[Removed Lines]",
          "169:  unsigned char m_hardwareStartCounter;",
          "",
          "[Added Lines]",
          "169:  uint8_t m_hardwareStartCounter;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "181:  void Do_Work();",
          "182:  void Heartbeat();",
          "183:  void ParseRFXLogFile();",
          "186:  void OnHardwareConnected(CDomoticzHardwareBase *pHardware);",
          "",
          "[Removed Lines]",
          "184:  bool WriteToHardware(const int HwdID, const char *pdata, const unsigned char length);",
          "",
          "[Added Lines]",
          "184:  bool WriteToHardware(const int HwdID, const char *pdata, const uint8_t length);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "191:  void WriteMessageEnd();",
          "198:  volatile unsigned long m_rxMessageIdx;",
          "",
          "[Removed Lines]",
          "194:  void decode_BateryLevel(bool bIsInPercentage, unsigned char level);",
          "195:  unsigned char get_BateryLevel(const _eHardwareTypes HwdType, bool bIsInPercentage, unsigned char level);",
          "",
          "[Added Lines]",
          "194:  void decode_BateryLevel(bool bIsInPercentage, uint8_t level);",
          "195:  uint8_t get_BateryLevel(const _eHardwareTypes HwdType, bool bIsInPercentage, uint8_t level);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "204:   int BatteryLevel;",
          "205:   unsigned long rxMessageIdx;",
          "206:   int hardwareId;",
          "208:   boost::uint16_t crc;",
          "209:   queue_element_trigger* trigger;",
          "210:  };",
          "211:  concurrent_queue<_tRxQueueItem> m_rxMessageQueue;",
          "212:  void UnlockRxMessageQueue();",
          "217:  struct _tRxMessageProcessingResult {",
          "218:   std::string DeviceName;",
          "",
          "[Removed Lines]",
          "207:   std::vector<unsigned char> vrxCommand;",
          "213:  void PushRxMessage(const CDomoticzHardwareBase *pHardware, const unsigned char *pRXCommand, const char *defaultName, const int BatteryLevel);",
          "214:  void CheckAndPushRxMessage(const CDomoticzHardwareBase *pHardware, const unsigned char *pRXCommand, const char *defaultName, const int BatteryLevel, const bool wait);",
          "215:  void ProcessRXMessage(const CDomoticzHardwareBase *pHardware, const unsigned char *pRXCommand, const char *defaultName, const int BatteryLevel); //battery level: 0-100, 255=no battery, -1 = don't set",
          "",
          "[Added Lines]",
          "207:   std::vector<uint8_t> vrxCommand;",
          "213:  void PushRxMessage(const CDomoticzHardwareBase *pHardware, const uint8_t *pRXCommand, const char *defaultName, const int BatteryLevel);",
          "214:  void CheckAndPushRxMessage(const CDomoticzHardwareBase *pHardware, const uint8_t *pRXCommand, const char *defaultName, const int BatteryLevel, const bool wait);",
          "215:  void ProcessRXMessage(const CDomoticzHardwareBase *pHardware, const uint8_t *pRXCommand, const char *defaultName, const int BatteryLevel); //battery level: 0-100, 255=no battery, -1 = don't set",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "272:  void decode_Rego6XXValue(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult);",
          "273:  void decode_Usage(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult);",
          "274:  void decode_Lux(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult);",
          "276:  void decode_GeneralSwitch(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult);",
          "277:  void decode_HomeConfort(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult);",
          "278:  void decode_Thermostat(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult);",
          "",
          "[Removed Lines]",
          "275:  void decode_General(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult, const unsigned char SignalLevel = 12, const unsigned char BatteryLevel = 255);",
          "",
          "[Added Lines]",
          "275:  void decode_General(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult, const uint8_t SignalLevel = 12, const uint8_t BatteryLevel = 255);",
          "",
          "---------------"
        ]
      }
    }
  ]
}