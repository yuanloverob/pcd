{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "98c5ad309fce1eeea6cfe624e1dfd341abca947a",
      "candidate_info": {
        "commit_hash": "98c5ad309fce1eeea6cfe624e1dfd341abca947a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/98c5ad309fce1eeea6cfe624e1dfd341abca947a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Have .recover store all orphaned rows in a single table, with extra columns to indicate the orphaned page and sub-tree they were discovered within.\n\nFossilOrigin-Name: 7221f6e33ed6a5a96ec61e25f2a1f70b84aae66e503d897eb7b7ff1aec42355d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bee2652ac26370e612a8c81dd7554befc2d523442a2fbbc77dc73479e6a0d7fd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6226:     sqlite3_free(pTab->zQuoted);",
          "6227:     if( pTab->azlCol ){",
          "6228:       int i;",
          "6230:         sqlite3_free(pTab->azlCol[i]);",
          "6231:       }",
          "6232:       sqlite3_free(pTab->azlCol);",
          "",
          "[Removed Lines]",
          "6229:       for(i=0; i<pTab->nCol; i++){",
          "",
          "[Added Lines]",
          "6229:       for(i=0; i<=pTab->nCol; i++){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6235:   }",
          "6236: }",
          "6243:   int bIntkey,",
          "",
          "[Removed Lines]",
          "6238: static void recoverOldTable(",
          "6240:   RecoverTable *pTab,",
          "",
          "[Added Lines]",
          "6238: static RecoverTable *recoverOldTable(",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6245: ){",
          "6247:   int rc = *pRc;",
          "6249:   if( rc==SQLITE_OK ){",
          "6250:     int nSqlCol = 0;",
          "6251:     int bSqlIntkey = 0;",
          "6252:     sqlite3_stmt *pStmt = 0;",
          "6254:     rc = sqlite3_open(\"\", &dbtmp);",
          "6255:     if( rc==SQLITE_OK ){",
          "6256:       rc = sqlite3_exec(dbtmp, \"PRAGMA writable_schema = on\", 0, 0, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6247:   RecoverTable *pTab = 0;",
          "6249:   pTab = (RecoverTable*)shellMalloc(&rc, sizeof(RecoverTable));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6285:     shellFinalize(&rc, pStmt);",
          "6287:     if( bIntkey==bSqlIntkey ){",
          "6288:       const char *zPk = \"_rowid_\";",
          "6289:       sqlite3_stmt *pPkFinder = 0;",
          "6292:           \"SELECT cid, name FROM pragma_table_info(%Q) \"",
          "6293:           \"  WHERE pk=1 AND type='integer' COLLATE nocase\"",
          "6300:       }",
          "6302:       pTab->zName = shellMPrintf(&rc, \"%s\", zName);",
          "6303:       pTab->zQuoted = shellMPrintf(&rc, \"%Q\", pTab->zName);",
          "6305:       pTab->nCol = nSqlCol;",
          "6308:         pTab->azlCol[0] = shellMPrintf(&rc, \"%Q\", zPk);",
          "6309:       }else{",
          "6314:           \"FROM pragma_table_info(%Q)\",",
          "6324:       }",
          "6325:       shellFinalize(&rc, pPkFinder);",
          "6326:     }",
          "6327:   }",
          "",
          "[Removed Lines]",
          "6291:       shellPreparePrintf(dbtmp, &rc, &pPkFinder,",
          "6294:           \"  AND NOT EXISTS (SELECT cid FROM pragma_table_info(%Q) WHERE pk=2)\",",
          "6295:           zName, zName",
          "6296:       );",
          "6297:       if( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pPkFinder) ){",
          "6298:         pTab->iPk = sqlite3_column_int(pPkFinder, 0);",
          "6299:         zPk = (const char*)sqlite3_column_text(pPkFinder, 1);",
          "6304:       pTab->azlCol = (char**)shellMalloc(&rc, sizeof(char*) * nSqlCol);",
          "6307:       if( nSqlCol==1 && pTab->iPk==0 ){",
          "6310:         shellPreparePrintf(dbtmp, &rc, &pStmt,",
          "6311:           \"SELECT -1+row_number()          OVER (ORDER BY cid),\"",
          "6312:           \"    %Q||%Q||group_concat(name, ', ') FILTER (WHERE cid!=%d) \"",
          "6313:           \"           OVER (ORDER BY cid) \"",
          "6315:           (bIntkey ? zPk : \"\"), (bIntkey ? \", \" : \"\"),",
          "6316:           pTab->iPk, zName",
          "6317:         );",
          "6318:         while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){",
          "6319:           int idx = sqlite3_column_int(pStmt, 0);",
          "6320:           const char *zText = (const char*)sqlite3_column_text(pStmt, 1);",
          "6321:           pTab->azlCol[idx] = shellMPrintf(&rc, \"%s\", zText);",
          "6322:         }",
          "6323:         shellFinalize(&rc, pStmt);",
          "",
          "[Added Lines]",
          "6289:       int i;",
          "6293:       pTab->iPk = -2;",
          "6294:       if( bIntkey ){",
          "6295:         shellPreparePrintf(dbtmp, &rc, &pPkFinder,",
          "6298:           \"  AND NOT EXISTS (SELECT cid FROM pragma_table_info(%Q) WHERE pk=2)\"",
          "6299:           , zName, zName",
          "6300:         );",
          "6301:         if( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pPkFinder) ){",
          "6302:           pTab->iPk = sqlite3_column_int(pPkFinder, 0);",
          "6303:           zPk = (const char*)sqlite3_column_text(pPkFinder, 1);",
          "6304:         }",
          "6309:       pTab->azlCol = (char**)shellMalloc(&rc, sizeof(char*) * (nSqlCol+1));",
          "6312:       if( bIntkey ){",
          "6315:         pTab->azlCol[0] = shellMPrintf(&rc, \"\");",
          "6316:       }",
          "6317:       i = 1;",
          "6318:       shellPreparePrintf(dbtmp, &rc, &pStmt,",
          "6319:           \"SELECT %Q || group_concat(name, ', ') \"",
          "6320:           \"  FILTER (WHERE cid!=%d) OVER (ORDER BY cid) \"",
          "6322:           bIntkey ? \", \" : \"\", pTab->iPk, zName",
          "6323:       );",
          "6324:       while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){",
          "6325:         const char *zText = (const char*)sqlite3_column_text(pStmt, 0);",
          "6326:         pTab->azlCol[i] = shellMPrintf(&rc, \"%s%s\", pTab->azlCol[0], zText);",
          "6327:         i++;",
          "6329:       shellFinalize(&rc, pStmt);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6329:  finished:",
          "6330:   sqlite3_close(dbtmp);",
          "6332: }",
          "6334: static RecoverTable *recoverNewTable(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6338:   if( rc!=SQLITE_OK ){",
          "6339:     recoverFreeTable(pTab);",
          "6340:     pTab = 0;",
          "6341:   }",
          "6342:   return pTab;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6336:   int *pRc,",
          "6337:   int iRoot,",
          "6338:   int bIntkey,",
          "6340: ){",
          "6341:   sqlite3_stmt *pStmt = 0;",
          "6342:   RecoverTable *pRet = 0;",
          "",
          "[Removed Lines]",
          "6339:   int nCol",
          "",
          "[Added Lines]",
          "6350:   int nCol,",
          "6351:   int *pbNoop",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6344:   const char *zSql = 0;",
          "6345:   const char *zName = 0;",
          "6351:   shellPreparePrintf(pState->db, pRc, &pStmt,",
          "",
          "[Removed Lines]",
          "6347:   pRet = (RecoverTable*)shellMalloc(pRc, sizeof(RecoverTable));",
          "6348:   if( pRet ) pRet->iPk = -2;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6360:     if( sqlite3_stricmp(zType, \"table\")==0 ){",
          "6361:       zName = (const char*)sqlite3_column_text(pStmt, 1);",
          "6362:       zSql = (const char*)sqlite3_column_text(pStmt, 2);",
          "6364:       break;",
          "6365:     }",
          "6366:   }",
          "6387:     );",
          "6392:     }",
          "6402:       }",
          "6403:     }",
          "6409:   }",
          "6412: }",
          "",
          "[Removed Lines]",
          "6363:       recoverOldTable(pRc, pRet, zName, zSql, bIntkey, nCol);",
          "6367:   shellFinalize(pRc, pStmt);",
          "6368:   if( bNoop ){",
          "6369:     sqlite3_free(pRet);",
          "6370:     return 0;",
          "6371:   }",
          "6373:   if( pRet && pRet->zName==0 ){",
          "6374:     sqlite3_stmt *pStmt = 0;",
          "6376:     pRet->zName = shellMPrintf(pRc, \"orphan_%d_%d\", nCol, iRoot);",
          "6377:     pRet->zQuoted = shellMPrintf(pRc, \"%Q\", pRet->zName);",
          "6378:     pRet->azlCol = (char**)shellMalloc(pRc, sizeof(char*) * nCol);",
          "6379:     pRet->nCol = nCol;",
          "6381:     shellPreparePrintf(pState->db, pRc, &pStmt,",
          "6382:       \"WITH s(i) AS (\"",
          "6383:       \"  SELECT 1 UNION ALL SELECT i+1 FROM s WHERE i<%d\"",
          "6384:       \")\"",
          "6385:       \"SELECT i-1, %Q || group_concat('c' || i, ', ') OVER (ORDER BY i) FROM s\",",
          "6386:       nCol, (bIntkey ? \"id, \" : \"\")",
          "6388:     while( *pRc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){",
          "6389:       int idx = sqlite3_column_int(pStmt, 0);",
          "6390:       const char *zText = (const char*)sqlite3_column_text(pStmt, 1);",
          "6391:       pRet->azlCol[idx] = shellMPrintf(pRc, \"%s\", zText);",
          "6393:     shellFinalize(pRc, pStmt);",
          "6395:     if( *pRc==SQLITE_OK ){",
          "6396:       char *zCreate = shellMPrintf(pRc, \"CREATE TABLE %Q (%s)\",",
          "6397:         pRet->zName, pRet->azlCol[nCol-1]",
          "6398:       );",
          "6399:       if( zCreate ){",
          "6400:         raw_printf(pState->out, \"%s;\\n\", zCreate);",
          "6401:         sqlite3_free(zCreate);",
          "6404:   }",
          "6406:   if( *pRc!=SQLITE_OK ){",
          "6407:     recoverFreeTable(pRet);",
          "6408:     pRet = 0;",
          "6411:   return pRet;",
          "",
          "[Added Lines]",
          "6373:       pRet = recoverOldTable(pRc, zName, zSql, bIntkey, nCol);",
          "6378:   shellFinalize(pRc, pStmt);",
          "6380:   return pRet;",
          "6381: }",
          "6383: static RecoverTable *recoverOrphanTable(",
          "6384:   ShellState *pState,",
          "6385:   int *pRc,",
          "6386:   int nCol",
          "6387: ){",
          "6388:   RecoverTable *pTab = 0;",
          "6389:   if( nCol>=0 && *pRc==SQLITE_OK ){",
          "6390:     int i;",
          "6391:     raw_printf(pState->out,",
          "6392:         \"CREATE TABLE recover_orphan(rootpgno INTEGER, \"",
          "6393:         \"pgno INTEGER, nfield INTEGER, id INTEGER\"",
          "6395:     for(i=0; i<nCol; i++){",
          "6396:       raw_printf(pState->out, \", c%d\", i);",
          "6398:     raw_printf(pState->out, \");\\n\");",
          "6400:     pTab = (RecoverTable*)shellMalloc(pRc, sizeof(RecoverTable));",
          "6401:     if( pTab ){",
          "6402:       pTab->zName = shellMPrintf(pRc, \"%s\", \"recover_orphan\");",
          "6403:       pTab->zQuoted = shellMPrintf(pRc, \"%Q\", pTab->zName);",
          "6404:       pTab->nCol = nCol;",
          "6405:       pTab->iPk = -2;",
          "6406:       if( nCol>0 ){",
          "6407:         pTab->azlCol = (char**)shellMalloc(pRc, sizeof(char*) * (nCol+1));",
          "6408:         if( pTab->azlCol ){",
          "6409:           pTab->azlCol[nCol] = shellMPrintf(pRc, \"\");",
          "6410:           for(i=nCol-1; i>=0; i--){",
          "6411:             pTab->azlCol[i] = shellMPrintf(pRc, \"%s, NULL\", pTab->azlCol[i+1]);",
          "6412:           }",
          "6413:         }",
          "6417:     if( *pRc!=SQLITE_OK ){",
          "6418:       recoverFreeTable(pTab);",
          "6419:       pTab = 0;",
          "6420:     }",
          "6422:   return pTab;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "6425:   int i;",
          "6428:   for(i=1; i<nArg; i++){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6437:   int nOrphan = -1;",
          "6438:   RecoverTable *pOrphan = 0;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "6545:     \"  SELECT pgno FROM recovery.map WHERE root=1\"",
          "6546:     \")\"",
          "6547:     \"GROUP BY pgno, cell;\"",
          "6548:   );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6561:     \"CREATE INDEX recovery.schema_rootpage ON schema(rootpage);\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "6566:     shellFinalize(&rc, pStmt);",
          "6567:   }",
          "6569:   shellPrepare(pState->db, &rc,",
          "6570:       \"SELECT pgno FROM recovery.map WHERE root=?\", &pPages",
          "6571:   );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6585:   shellPrepare(pState->db, &rc,",
          "6586:       \"SELECT coalesce(max(maxlen), -2) FROM recovery.map\"",
          "6587:       \"  WHERE root>1 AND root NOT IN (SELECT rootpage FROM recovery.schema)\"",
          "6588:       , &pLoop",
          "6589:   );",
          "6590:   if( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pLoop) ){",
          "6591:     nOrphan = sqlite3_column_int(pLoop, 0);",
          "6592:   }",
          "6593:   shellFinalize(&rc, pLoop);",
          "6594:   pLoop = 0;",
          "6595:   pOrphan = recoverOrphanTable(pState, &rc, nOrphan);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "6586:     int iRoot = sqlite3_column_int(pLoop, 0);",
          "6587:     int bIntkey = sqlite3_column_int(pLoop, 1);",
          "6588:     int nCol = sqlite3_column_int(pLoop, 2);",
          "6589:     RecoverTable *pTab;",
          "6603:           raw_printf(pState->out, \"INSERT INTO %s(%s) VALUES( %s );\\n\",",
          "6605:           );",
          "6606:         }",
          "6608:       }",
          "6610:     }",
          "6612:   }",
          "6613:   shellFinalize(&rc, pLoop);",
          "6614:   shellFinalize(&rc, pPages);",
          "6615:   shellFinalize(&rc, pCells);",
          "6618:   if( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "6591:     pTab = recoverNewTable(pState, &rc, iRoot, bIntkey, nCol);",
          "6592:     if( pTab ){",
          "6593:       if( 0==sqlite3_stricmp(pTab->zName, \"sqlite_sequence\") ){",
          "6594:         raw_printf(pState->out, \"DELETE FROM sqlite_sequence;\\n\");",
          "6595:       }",
          "6596:       sqlite3_bind_int(pPages, 1, iRoot);",
          "6597:       sqlite3_bind_int(pCells, 2, pTab->iPk);",
          "6598:       while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pPages) ){",
          "6599:         sqlite3_bind_int(pCells, 1, sqlite3_column_int(pPages, 0));",
          "6600:         while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pCells) ){",
          "6601:           int iMax = sqlite3_column_int(pCells, 0);",
          "6602:           const char *zVal = (const char*)sqlite3_column_text(pCells, 1);",
          "6604:               pTab->zQuoted, pTab->azlCol[iMax>0?iMax:0], zVal",
          "6607:         shellReset(&rc, pCells);",
          "6609:       shellReset(&rc, pPages);",
          "6611:     recoverFreeTable(pTab);",
          "",
          "[Added Lines]",
          "6617:     int bNoop = 0;",
          "6620:     pTab = recoverNewTable(pState, &rc, iRoot, bIntkey, nCol, &bNoop);",
          "6621:     if( bNoop || rc ) continue;",
          "6622:     if( pTab==0 ) pTab = pOrphan;",
          "6624:     if( 0==sqlite3_stricmp(pTab->zName, \"sqlite_sequence\") ){",
          "6625:       raw_printf(pState->out, \"DELETE FROM sqlite_sequence;\\n\");",
          "6626:     }",
          "6627:     sqlite3_bind_int(pPages, 1, iRoot);",
          "6628:     sqlite3_bind_int(pCells, 2, pTab->iPk);",
          "6630:     while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pPages) ){",
          "6631:       int iPgno = sqlite3_column_int(pPages, 0);",
          "6632:       sqlite3_bind_int(pCells, 1, iPgno);",
          "6633:       while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pCells) ){",
          "6634:         int nField = sqlite3_column_int(pCells, 0);",
          "6635:         const char *zVal = (const char*)sqlite3_column_text(pCells, 1);",
          "6637:         nField = nField+1;",
          "6638:         if( pTab==pOrphan ){",
          "6639:           raw_printf(pState->out,",
          "6640:               \"INSERT INTO %s VALUES(%d, %d, %d, %s%s%s);\\n\",",
          "6641:               pTab->zQuoted, iRoot, iPgno, nField,",
          "6642:               bIntkey ? \"\" : \"NULL, \", zVal, pTab->azlCol[nField]",
          "6643:           );",
          "6644:         }else{",
          "6646:               pTab->zQuoted, pTab->azlCol[nField], zVal",
          "6650:       shellReset(&rc, pCells);",
          "6652:     shellReset(&rc, pPages);",
          "6653:     if( pTab!=pOrphan ) recoverFreeTable(pTab);",
          "6658:   recoverFreeTable(pOrphan);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "68c1f9ce9a33d745205d21261cb44124dde057bc",
      "candidate_info": {
        "commit_hash": "68c1f9ce9a33d745205d21261cb44124dde057bc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/68c1f9ce9a33d745205d21261cb44124dde057bc",
        "files": [
          "ext/fts3/fts3_expr.c",
          "manifest",
          "manifest.uuid",
          "test/fts3expr5.test"
        ],
        "message": "Have fts3 ignore empty sets of parenthesis if built with SQLITE_ENABLE_FTS3_PARENTHESIS.\n\nFossilOrigin-Name: c93c6b45a317c40eb5c0abb6620d21f5821a601632c791e11e5ce62e039eccda",
        "before_after_code_files": [
          "ext/fts3/fts3_expr.c||ext/fts3/fts3_expr.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3expr5.test||test/fts3expr5.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_expr.c||ext/fts3/fts3_expr.c": [
          "File: ext/fts3/fts3_expr.c -> ext/fts3/fts3_expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "497:       int nConsumed = 0;",
          "498:       pParse->nNest++;",
          "499:       rc = fts3ExprParse(pParse, zInput+1, nInput-1, ppExpr, &nConsumed);",
          "502:       return rc;",
          "503:     }else if( *zInput==')' ){",
          "",
          "[Removed Lines]",
          "500:       if( rc==SQLITE_OK && !*ppExpr ){ rc = SQLITE_DONE; }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cb50509020d952fa9efed8df7fa08b07b71ae9bdbdefea216b6e660863291039",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3expr5.test||test/fts3expr5.test": [
          "File: test/fts3expr5.test -> test/fts3expr5.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:   return",
          "23: }",
          "25: #-------------------------------------------------------------------------",
          "26: # Various forms of empty phrase expressions.",
          "27: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: proc test_fts3expr {expr} {",
          "26:   db one {SELECT fts3_exprtest('simple', $expr, 'a', 'b', 'c')}",
          "27: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:   SELECT rowid FROM t0 WHERE x MATCH '\"\"\"\"';",
          "46: } {}",
          "48: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: #-------------------------------------------------------------------------",
          "53: # Various forms of empty phrase expressions.",
          "54: #",
          "55: set sqlite_fts3_enable_parentheses 1",
          "56: do_test 2.0 {",
          "57:   test_fts3expr {(a:123)(b:234)()(c:456)}",
          "58: } {AND {AND {PHRASE 0 0 123} {PHRASE 1 0 234}} {PHRASE 2 0 456}}",
          "59: do_test 2.1 {",
          "60:   test_fts3expr {(a:123)(b:234)(c:456)}",
          "61: } {AND {AND {PHRASE 0 0 123} {PHRASE 1 0 234}} {PHRASE 2 0 456}}",
          "62: do_test 2.2 {",
          "63:   list [catch { test_fts3expr {\"123\" AND ( )} } msg] $msg",
          "64: } {1 {Error parsing expression}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "480c572f2da02cb6446a55df6c8b2df271446a66",
      "candidate_info": {
        "commit_hash": "480c572f2da02cb6446a55df6c8b2df271446a66",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/480c572f2da02cb6446a55df6c8b2df271446a66",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/indexfault.test"
        ],
        "message": "In sqlite3NestedParse() be sure to detect all SQLITE_NOMEM and SQLITE_TOOBIG errors and to distinguish between them.\n\nFossilOrigin-Name: 73056b314bd63288c662752e9bd469b70264c38031c1c857460e64fdb1ed4e2e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/indexfault.test||test/indexfault.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e7144ffd21294d7aebbfa6aa5a262797a6d16de11193f1bf6b75f5f27b04c940",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "260:   zSql = sqlite3VMPrintf(db, zFormat, ap);",
          "261:   va_end(ap);",
          "262:   if( zSql==0 ){",
          "264:   }",
          "265:   pParse->nested++;",
          "266:   memcpy(saveBuf, PARSE_TAIL(pParse), PARSE_TAIL_SZ);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "266:     if( !db->mallocFailed ) pParse->rc = SQLITE_TOOBIG;",
          "267:     return;",
          "",
          "---------------"
        ],
        "test/indexfault.test||test/indexfault.test": [
          "File: test/indexfault.test -> test/indexfault.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "337:   faultsim_test_result {0 {}}",
          "338: }",
          "340: uninstall_custom_faultsim",
          "342: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "340: do_faultsim_test 5 -prep {",
          "341:   reset_db",
          "342: } -body {",
          "343:   execsql {",
          "344:  CREATE TABLE reallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallylongname(a PRIMARY KEY) WITHOUT ROWID;",
          "345:   }",
          "346: } -test {",
          "347:   faultsim_test_result {0 {}}",
          "348: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "83a635a267b9138a724cfc2b0be280859f9f54b3",
      "candidate_info": {
        "commit_hash": "83a635a267b9138a724cfc2b0be280859f9f54b3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/83a635a267b9138a724cfc2b0be280859f9f54b3",
        "files": [
          "ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5ai.test",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid",
          "src/vtab.c"
        ],
        "message": "Fix problems with SAVEPOINT and related commands within transactions on a corrupt database that include fts5 or some other virtual tables.\n\nFossilOrigin-Name: b0da6e0dd1f9a9ba7646ee6bb3c14945e570303c9a42d20fa8a653570e12c3f9",
        "before_after_code_files": [
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5ai.test||ext/fts5/test/fts5ai.test",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid",
          "src/vtab.c||src/vtab.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "289:     case FTS5_ROLLBACKTO:",
          "290:       assert( p->ts.eState==1 );",
          "292:       assert( iSavepoint<=p->ts.iSavepoint );",
          "293:       p->ts.iSavepoint = iSavepoint;",
          "294:       break;",
          "",
          "[Removed Lines]",
          "291:       assert( iSavepoint>=0 );",
          "",
          "[Added Lines]",
          "291:       assert( iSavepoint>=-1 );",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5ai.test||ext/fts5/test/fts5ai.test": [
          "File: ext/fts5/test/fts5ai.test -> ext/fts5/test/fts5ai.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: do_execsql_test 1.2 {",
          "52:   INSERT INTO t1(t1) VALUES('integrity-check');",
          "53: }",
          "54: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55: do_execsql_test 1.3 {",
          "56:   SAVEPOINT one;",
          "57:     INSERT INTO t1 VALUES('v w x');",
          "58:   ROLLBACK TO one;",
          "59: }",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "7559:   SELECT rowid==-1 FROM t1('t*');",
          "7560: } {0 {0 0 0}}",
          "7563: sqlite3_fts5_may_be_corrupt 0",
          "7564: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7562: #-------------------------------------------------------------------------",
          "7563: reset_db",
          "7564: do_test 55.0 {",
          "7565:   sqlite3 db {}",
          "7566:   db deserialize [decode_hexdb {",
          "7567: | size 32768 pagesize 4096 filename crash-b366b5ac0d3887.db",
          "7568: | page 1 offset 0",
          "7569: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "7570: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 08   .....@  ........",
          "7571: |     32: 00 00 00 02 00 00 00 05 90 00 00 09 00 00 00 04   ................",
          "7572: |     96: 00 00 00 00 0d 0f c7 00 07 0d 92 00 0f 8d 0f 36   ...............6",
          "7573: |    112: 0e cb 0e 6b 0e 0e 0d b6 0d 92 0d 92 00 00 00 00   ...k............",
          "7574: |   3472: 00 00 22 08 06 17 11 11 01 31 74 61 62 6c 65 74   .........1tablet",
          "7575: |   3488: 32 74 32 08 43 52 45 41 54 45 20 54 41 42 4c 45   2t2.CREATE TABLE",
          "7576: |   3504: 20 74 32 28 78 29 56 07 06 17 1f 1f 01 7d 74 61    t2(x)V.......ta",
          "7577: |   3520: 62 6c 65 74 31 5f 63 6f 6e 66 69 67 74 31 5f 63   blet1_configt1_c",
          "7578: |   3536: 6f 6e 66 69 67 07 43 52 45 41 54 45 20 54 41 42   onfig.CREATE TAB",
          "7579: |   3552: 4c 45 20 27 74 31 5f 63 6f 6e 66 69 67 27 28 6b   LE 't1_config'(k",
          "7580: |   3568: 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 76 29    PRIMARY KEY, v)",
          "7581: |   3584: 20 57 49 54 48 4f 55 54 20 52 4f 57 49 44 5b 06    WITHOUT ROWID[.",
          "7582: |   3600: 07 17 21 21 01 81 01 74 61 62 6c 65 74 31 5f 64   ..!!...tablet1_d",
          "7583: |   3616: 6f 63 73 69 7a 65 74 31 5f 64 6f 63 73 69 7a 65   ocsizet1_docsize",
          "7584: |   3632: 06 43 52 45 41 54 45 20 54 41 42 4c 45 20 27 74   .CREATE TABLE 't",
          "7585: |   3648: 31 5f 64 6f 63 73 69 7a 65 27 28 69 64 20 49 4e   1_docsize'(id IN",
          "7586: |   3664: 54 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45   TEGER PRIMARY KE",
          "7587: |   3680: 59 2c 20 73 7a 20 43 4c 4f 42 29 5e 05 07 17 21   Y, sz CLOB)^...!",
          "7588: |   3696: 21 01 81 07 74 61 62 6c 65 74 31 5f 63 6f 6e 74   !...tablet1_cont",
          "7589: |   3712: 65 6e 74 74 31 5f 63 6f 6e 74 65 6e 74 05 43 52   entt1_content.CR",
          "7590: |   3728: 45 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 63   EATE TABLE 't1_c",
          "7591: |   3744: 6f 6e 74 65 6e 74 27 28 69 64 20 49 4e 54 45 47   ontent'(id INTEG",
          "7592: |   3760: 45 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20   ER PRIMARY KEY,",
          "7593: |   3776: 63 30 2c 20 63 31 2c 20 63 32 29 69 04 07 17 19   c0, c1, c2)i....",
          "7594: |   3792: 19 01 81 2d 74 61 62 6c 65 74 32 5f 69 64 78 74   ...-tablet2_idxt",
          "7595: |   3808: 31 5f 69 64 78 04 43 52 45 41 54 45 20 54 41 42   1_idx.CREATE TAB",
          "7596: |   3824: 4c 45 20 27 74 31 5f 69 64 78 27 28 73 65 67 69   LE 't1_idx'(segi",
          "7597: |   3840: 64 2c 20 74 65 72 6d 2c 20 70 67 6e 6f 2c 20 50   d, term, pgno, P",
          "7598: |   3856: 52 49 4d 41 52 59 20 4b 45 59 28 73 65 67 69 64   RIMARY KEY(segid",
          "7599: |   3872: 2c 20 74 65 72 6d 29 29 20 57 49 54 48 4f 55 54   , term)) WITHOUT",
          "7600: |   3888: 20 52 4f 57 49 44 55 03 07 17 1b 1b 01 81 01 74    ROWIDU........t",
          "7601: |   3904: 61 62 6c 65 74 31 5f 64 61 74 61 74 31 5f 64 61   ablet1_datat1_da",
          "7602: |   3920: 74 61 03 43 52 45 41 54 45 20 54 41 42 4c 45 20   ta.CREATE TABLE",
          "7603: |   3936: 27 74 31 5f 64 61 74 61 27 28 69 64 20 49 4e 54   't1_data'(id INT",
          "7604: |   3952: 45 47 45 52 20 50 52 49 4d 42 52 59 20 4b 45 59   EGER PRIMBRY KEY",
          "7605: |   3968: 2c 20 62 6c 6f 63 6b 20 42 4c 4f 42 29 38 02 06   , block BLOB)8..",
          "7606: |   3984: 17 11 11 08 5f 74 61 62 6c 65 74 31 74 31 43 52   ...._tablet1t1CR",
          "7607: |   4000: 45 41 54 45 20 56 49 52 54 55 41 4c 20 54 41 42   EATE VIRTUAL TAB",
          "7608: |   4016: 4c 45 20 74 31 20 55 53 49 4e 47 20 66 74 73 35   LE t1 USING fts5",
          "7609: |   4032: 28 61 2c 62 2c 63 29 00 00 00 39 00 00 00 00 00   (a,b,c)...9.....",
          "7610: | page 3 offset 8192",
          "7611: |      0: 0d 00 00 00 03 0c 94 00 0f e6 0f ef 0c 94 00 00   ................",
          "7612: |   3216: 00 00 00 00 86 4a 84 80 80 80 80 01 04 00 8d 18   .....J..........",
          "7613: |   3232: 00 00 03 2b 02 30 30 01 02 06 01 02 06 01 02 06   ...+.00.........",
          "7614: |   3248: 1f 02 03 01 02 03 01 02 03 01 08 32 30 31 36 30   ...........20160",
          "7615: |   3264: 36 30 39 01 02 07 01 02 07 01 02 07 01 01 34 01   609...........4.",
          "7616: |   3280: 02 05 01 02 05 01 02 05 01 01 35 01 02 04 01 02   ..........5.....",
          "7617: |   3296: 04 01 02 04 02 07 30 30 30 30 30 30 30 1c 02 04   ......0000000...",
          "7618: |   3312: 01 02 04 01 02 04 01 06 62 69 6e 61 72 79 03 06   ........binary..",
          "7619: |   3328: 01 02 02 03 06 01 02 02 03 06 01 02 02 03 06 01   ................",
          "7620: |   3344: 02 02 03 06 01 02 02 03 06 01 02 02 03 06 01 02   ................",
          "7621: |   3360: 02 03 06 01 02 02 03 06 01 02 02 03 06 01 02 02   ................",
          "7622: |   3376: 03 06 01 02 02 03 06 01 02 02 01 08 63 6f 6d 70   ............comp",
          "7623: |   3392: 69 6c 65 72 01 02 02 01 02 02 f1 02 02 01 06 64   iler...........d",
          "7624: |   3408: 62 73 74 61 74 07 02 03 01 02 03 01 02 03 02 04   bstat...........",
          "7625: |   3424: 65 62 75 67 04 02 02 01 02 02 01 02 02 01 06 65   ebug...........e",
          "7626: |   3440: 6e 61 62 6c 65 07 02 02 01 02 02 01 02 02 01 02   nable...........",
          "7627: |   3456: 02 01 02 02 01 02 02 01 02 02 01 02 02 01 02 02   ................",
          "7628: |   3472: 01 02 02 01 02 02 01 02 02 01 02 02 01 02 02 01   ................",
          "7629: |   3488: 02 02 01 02 02 01 02 02 01 02 02 01 02 02 01 02   ................",
          "7630: |   3504: 02 01 02 02 02 08 78 74 65 6e 73 69 6f 6e 1f 02   ......xtension..",
          "7631: |   3520: 04 01 02 04 01 02 04 01 04 66 74 73 34 0a 02 03   .........fts4...",
          "7632: |   3536: 01 02 03 01 02 03 04 01 35 0d 02 03 01 02 03 01   ........5.......",
          "7633: |   3552: 02 03 01 03 67 63 63 01 02 03 01 02 03 01 02 03   ....gcc.........",
          "7634: |   3568: 02 06 65 6f 70 6f 6c 79 10 02 03 01 02 03 01 02   ..eopoly........",
          "7635: |   3584: 03 01 05 6a 73 6f 6e 31 13 02 03 01 02 03 01 02   ...json1........",
          "7636: |   3600: 03 01 04 6c 6f 61 64 1f 02 03 01 02 03 01 02 03   ...load.........",
          "7637: |   3616: 01 03 6d 61 78 1c 02 02 01 02 02 01 02 02 02 05   ..max...........",
          "7638: |   3632: 65 6d 6f 72 79 1c 02 03 01 02 03 01 02 03 04 04   emory...........",
          "7639: |   3648: 73 79 73 35 16 02 03 01 02 03 01 02 03 01 06 6e   sys5...........n",
          "7640: |   3664: 6f 63 61 73 65 02 06 01 02 02 03 06 01 02 02 03   ocase...........",
          "7641: |   3680: 06 01 02 02 03 06 01 02 02 03 06 01 02 02 03 06   ................",
          "7642: |   3696: 01 02 02 03 06 01 02 02 03 06 01 02 02 03 06 01   ................",
          "7643: |   3712: 02 02 03 06 01 02 02 03 06 01 02 02 03 06 01 02   ................",
          "7644: |   3728: 02 01 04 6f 6d 69 74 1f 02 02 01 02 02 01 02 02   ...omit.........",
          "7645: |   3744: 01 05 72 74 72 65 65 19 02 03 01 02 03 01 02 03   ..rtree.........",
          "7646: |   3760: 04 02 69 6d 01 06 01 02 02 03 06 01 02 02 03 06   ..im............",
          "7647: |   3776: 01 02 02 03 06 01 02 02 03 06 01 02 02 03 06 01   ................",
          "7648: |   3792: 02 02 03 06 01 02 02 03 06 01 02 02 03 06 01 02   ................",
          "7649: |   3808: 02 03 06 01 02 02 03 06 01 02 02 03 06 01 02 02   ................",
          "7650: |   3824: 01 0a 74 68 72 65 61 64 73 61 66 65 22 02 02 01   ..threadsafe....",
          "7651: |   3840: 02 02 01 02 02 01 04 76 74 61 62 07 02 04 01 02   .......vtab.....",
          "7652: |   3856: 04 01 02 04 01 01 78 01 06 01 01 02 01 06 01 01   ......x.........",
          "7653: |   3872: 02 01 06 01 01 02 01 06 01 01 02 01 06 01 01 02   ................",
          "7654: |   3888: 01 06 01 01 02 01 06 01 01 02 01 06 01 01 02 01   ................",
          "7655: |   3904: 06 01 01 02 01 06 01 01 02 01 06 01 01 02 01 06   ................",
          "7656: |   3920: 01 01 02 01 06 01 01 02 01 06 01 01 02 01 06 01   ................",
          "7657: |   3936: 01 02 01 06 01 01 02 01 06 01 01 02 01 06 01 01   ................",
          "7658: |   3952: 02 01 06 01 01 02 01 06 01 01 02 08 d6 01 01 02   ................",
          "7659: |   3968: 01 06 01 01 02 01 06 01 01 02 01 06 01 01 02 01   ................",
          "7660: |   3984: 06 01 01 02 01 06 01 01 02 01 06 01 01 02 01 06   ................",
          "7661: |   4000: 01 01 02 01 06 01 01 02 01 06 01 01 02 01 06 01   ................",
          "7662: |   4016: 01 02 01 06 01 01 02 01 06 01 01 02 01 06 01 01   ................",
          "7663: |   4032: 02 01 06 01 01 02 01 06 01 01 02 04 15 13 0c 0c   ................",
          "7664: |   4048: 12 44 13 11 0f 47 13 0f 0c 0e 11 10 0f 0e 10 0f   .D...G..........",
          "7665: |   4064: 44 0f 10 40 15 0f 07 01 03 00 14 24 5a 24 24 0f   D..@.......$Z$$.",
          "7666: |   4080: 0a 03 00 24 00 00 00 00 01 01 01 00 01 01 01 01   ...$............",
          "7667: | page 4 offset 12288",
          "7668: |      0: 0a 00 00 00 01 0f fa 00 0f fa 00 00 00 00 00 00   ................",
          "7669: |   4080: 00 00 00 00 00 00 00 00 00 00 05 04 09 0c 01 02   ................",
          "7670: | page 5 offset 16384",
          "7671: |      0: 0d 00 00 00 24 0c 0a 00 0f d8 0f af 0f 86 0f 74   ....$..........t",
          "7672: |     16: 0f 61 0f 4e 0f 2f 0f 0f 0e ef 0e d7 0e be 0e a5   .a.N./..........",
          "7673: |     32: 0e 8d 0e 74 0e 5b 0e 40 0e 24 0e 08 0d ef 0d d5   ...t.[.@.$......",
          "7674: |     48: 0d bb 0d a0 0d 84 0d 68 0d 4f 0d 35 0d 1b 0c fb   .......h.O.5....",
          "7675: |     64: 0c da 0c b9 0c 99 0c 78 0c 57 0c 3e 00 00 00 00   .......x.W.>....",
          "7676: |   3072: 00 00 00 00 00 00 00 00 00 00 18 24 05 00 25 0f   ...........$..%.",
          "7677: |   3088: 19 54 48 52 45 41 44 53 41 46 45 3d 30 58 42 49   .THREADSAFE=0XBI",
          "7678: |   3104: 4e 41 52 59 18 23 05 00 25 0f 19 54 48 52 45 41   NARY.#..%..THREA",
          "7679: |   3120: 44 53 41 46 45 3d 30 58 4e 4f 43 41 53 45 17 22   DSAFE=0XNOCASE..",
          "7680: |   3136: 05 00 25 0f 17 54 48 52 45 41 44 53 41 46 45 3d   ..%..THREADSAFE=",
          "7681: |   3152: 30 58 52 54 52 49 4d 1f 20 f5 00 33 0f 19 4f 4d   0XRTRIM. ..3..OM",
          "7682: |   3168: 49 54 20 4c 4f 41 44 20 45 58 54 45 4e 53 49 4f   IT LOAD EXTENSIO",
          "7683: |   3184: 4e 58 42 49 4e 41 52 59 1f 20 05 00 33 0f 19 4f   NXBINARY. ..3..O",
          "7684: |   3200: 4d 49 54 20 4c 4f 41 44 20 45 58 54 45 4e 53 49   MIT LOAD EXTENSI",
          "7685: |   3216: 4f 4e 58 4e 4f 43 41 53 45 1e 1f 05 00 33 0f 17   ONXNOCASE....3..",
          "7686: |   3232: 4f 4d 49 54 20 4c 4f 41 44 20 45 58 54 45 4e 53   OMIT LOAD EXTENS",
          "7687: |   3248: 49 4f 4e 58 52 54 52 49 4d 1f 1e 05 00 33 0f 19   IONXRTRIM....3..",
          "7688: |   3264: 4c 41 58 20 4d 45 4d 4f 52 59 3d 35 30 30 30 30   LAX MEMORY=50000",
          "7689: |   3280: 30 30 30 58 42 49 4e 41 52 59 1f 1d 05 00 33 0f   000XBINARY....3.",
          "7690: |   3296: 19 4d 41 58 20 4d 45 4d 4f 52 59 3d 35 30 30 30   .MAX MEMORY=5000",
          "7691: |   3312: 30 30 30 30 58 4e 4f 43 41 53 45 1e 1c 05 00 33   0000XNOCASE....3",
          "7692: |   3328: 0f 17 4d 41 58 20 4d 45 4d 4f 52 59 3d 35 30 30   ..MAX MEMORY=500",
          "7693: |   3344: 30 30 30 30 30 58 52 54 52 49 4d 18 1b 05 00 25   00000XRTRIM....%",
          "7694: |   3360: 0f 19 45 4e 41 42 4c 45 20 52 54 52 45 45 58 42   ..ENABLE RTREEXB",
          "7695: |   3376: 49 4e 41 52 59 18 1a 05 00 25 0f 19 45 4e 41 42   INARY....%..ENAB",
          "7696: |   3392: 4c 45 20 52 54 52 45 45 58 4e 4f 43 41 53 45 17   LE RTREEXNOCASE.",
          "7697: |   3408: 19 05 00 25 0f 17 45 4e 41 42 4c 45 20 52 54 52   ...%..ENABLE RTR",
          "7698: |   3424: 45 45 58 52 54 52 49 4d 1a 18 05 00 29 0f 19 45   EEXRTRIM....)..E",
          "7699: |   3440: 4e 41 42 4c 45 20 4d 45 4d 53 59 53 35 58 42 49   NABLE MEMSYS5XBI",
          "7700: |   3456: 4e 41 52 59 1a 17 05 00 29 0f 19 45 4e 41 42 4c   NARY....)..ENABL",
          "7701: |   3472: 45 20 4d 45 4d 53 59 53 35 58 4e 4f 43 41 53 45   E MEMSYS5XNOCASE",
          "7702: |   3488: 19 16 05 00 29 0f 17 45 4e 41 42 4c 45 20 4d 45   ....)..ENABLE ME",
          "7703: |   3504: 4d 53 59 53 35 58 52 54 52 49 4d 18 15 05 00 25   MSYS5XRTRIM....%",
          "7704: |   3520: 0f 19 45 4e 41 42 4c 45 20 4a 53 4f 4e 31 58 42   ..ENABLE JSON1XB",
          "7705: |   3536: 49 4e 41 52 59 18 14 05 00 25 0f 30 45 4e 41 42   INARY....%.0ENAB",
          "7706: |   3552: 4c 45 20 4a 53 4f 4e 31 58 4e 4f 43 41 53 45 17   LE JSON1XNOCASE.",
          "7707: |   3568: 13 05 00 25 0f 17 45 4e 41 42 4c 45 20 4a 53 4f   ...%..ENABLE JSO",
          "7708: |   3584: 4e 31 58 52 54 52 49 4d 1a 12 05 00 29 0f 19 45   N1XRTRIM....)..E",
          "7709: |   3600: 4e 41 42 4c 45 20 47 45 4f 50 4f 4c 59 58 42 49   NABLE GEOPOLYXBI",
          "7710: |   3616: 4e 41 52 59 1a 11 05 00 29 0f 19 45 4e 41 42 4c   NARY....)..ENABL",
          "7711: |   3632: 45 20 47 45 4f 50 4f 4c 59 58 4e 4f 43 41 53 45   E GEOPOLYXNOCASE",
          "7712: |   3648: 19 10 05 00 29 0f 17 45 4e 41 42 4c 45 20 47 45   ....)..ENABLE GE",
          "7713: |   3664: 4f 50 4f 4c 59 58 52 54 52 49 4d 17 0f 05 00 23   OPOLYXRTRIM....#",
          "7714: |   3680: 0f 19 45 4e 41 42 4c 45 20 46 54 53 35 58 42 49   ..ENABLE FTS5XBI",
          "7715: |   3696: 4e 41 52 59 17 0e 05 00 23 0f 19 45 4e 41 42 4c   NARY....#..ENABL",
          "7716: |   3712: 45 20 46 54 53 35 58 4e 4f 43 41 53 45 16 0d 05   E FTS5XNOCASE...",
          "7717: |   3728: 00 23 0f 17 45 4f 41 42 4c 45 20 46 54 53 35 58   .#..EOABLE FTS5X",
          "7718: |   3744: 52 54 52 49 4d 17 0c 05 00 23 0f 19 45 4e 41 42   RTRIM....#..ENAB",
          "7719: |   3760: 4c 45 20 46 54 53 34 58 42 49 4e 41 52 59 17 0b   LE FTS4XBINARY..",
          "7720: |   3776: 05 00 23 0f 19 45 4e 41 42 4c 45 20 46 54 53 34   ..#..ENABLE FTS4",
          "7721: |   3792: 58 4e 4f 43 41 53 45 16 0a 05 00 23 0f 17 45 4e   XNOCASE....#..EN",
          "7722: |   3808: 41 42 4c 45 20 46 54 53 34 58 52 54 52 49 4d 1e   ABLE FTS4XRTRIM.",
          "7723: |   3824: 09 05 00 31 0f 19 45 4e 41 42 4c 45 20 44 42 53   ...1..ENABLE DBS",
          "7724: |   3840: 54 41 54 20 56 54 31 42 58 42 49 4e 41 52 59 1e   TAT VT1BXBINARY.",
          "7725: |   3856: 08 05 00 31 0f 19 45 4e 41 42 4c 45 20 44 42 53   ...1..ENABLE DBS",
          "7726: |   3872: 54 41 54 20 56 54 41 42 58 4e 4f 43 41 53 45 1d   TAT VTABXNOCASE.",
          "7727: |   3888: 07 05 00 31 0f 17 45 4e 41 42 4c 45 20 44 42 53   ...1..ENABLE DBS",
          "7728: |   3904: 54 41 54 20 56 54 41 42 58 52 54 52 49 4d 11 06   TAT VTABXRTRIM..",
          "7729: |   3920: 05 00 17 0f 19 44 45 42 55 47 58 42 49 4e 41 52   .....DEBUGXBINAR",
          "7730: |   3936: 59 11 15 05 00 17 0f 19 44 45 42 55 47 58 4e 4f   Y.......DEBUGXNO",
          "7731: |   3952: 43 41 53 45 10 04 05 00 17 0f 17 44 45 42 55 47   CASE.......DEBUG",
          "7732: |   3968: 58 42 54 52 49 4d 27 03 05 00 43 0f 19 43 4f 4d   XBTRIM'...C..COM",
          "7733: |   3984: 50 49 4c 45 52 3d 67 63 63 2d 35 2e 34 2e 30 20   PILER=gcc-5.4.0",
          "7734: |   4000: 32 30 31 36 30 36 30 39 58 42 49 4e 41 52 59 27   20160609XBINARY'",
          "7735: |   4016: 02 05 00 43 0f 19 43 4f 4d 50 49 4c 45 52 3d 67   ...C..COMPILER=g",
          "7736: |   4032: 63 63 2d 35 2e 34 2e 30 20 32 30 31 36 30 36 30   cc-5.4.0 2016060",
          "7737: |   4048: 39 58 4e 4f 43 41 53 45 26 01 05 00 43 0f 17 43   9XNOCASE&...C..C",
          "7738: |   4064: 4f 4d 50 49 4c 45 52 3d 67 63 63 2d 35 2e 34 2e   OMPILER=gcc-5.4.",
          "7739: |   4080: 30 20 32 30 31 36 30 36 30 39 58 52 54 52 49 4d   0 20160609XRTRIM",
          "7740: | page 6 offset 20480",
          "7741: |      0: 0d 00 00 00 24 0e e0 00 0f f8 0f f0 0f e8 0f e0   ....$...........",
          "7742: |     16: 0f d8 0f d0 0f c8 0f c0 0f b8 0f b0 0f a8 0f a0   ................",
          "7743: |     32: 0f 98 0f 90 0f 88 0f 80 0f 78 0f 70 1f 68 0f 60   .........x.p.h.`",
          "7744: |     48: 0f 58 0f 50 0f 48 0f 40 0f 38 0f 30 0f 28 0f 20   .X.P.H.@.8.0.(.",
          "7745: |     64: 0f 18 0f 10 0f 08 0f 00 0e f8 0e f0 0e e8 0e e0   ................",
          "7746: |   3808: 07 24 03 00 12 02 01 01 06 23 03 00 12 02 01 01   .$.......#......",
          "7747: |   3824: 06 22 03 00 12 02 01 01 06 21 03 00 12 03 01 01   .........!......",
          "7748: |   3840: 06 20 03 00 12 03 01 01 06 1f 03 00 12 03 01 01   . ..............",
          "7749: |   3856: 06 1e 03 00 12 03 01 01 06 1d 03 00 12 03 01 01   ................",
          "7750: |   3872: 06 1c 03 00 12 03 01 01 06 1b 03 00 12 02 01 01   ................",
          "7751: |   3888: 06 1a 03 00 12 02 01 01 06 19 03 00 12 02 01 01   ................",
          "7752: |   3904: 06 18 03 00 12 02 01 01 06 17 03 00 12 02 01 01   ................",
          "7753: |   3920: 06 16 03 00 12 02 01 01 06 15 03 00 12 02 01 01   ................",
          "7754: |   3936: 06 14 03 00 12 02 01 01 06 13 03 00 12 02 01 01   ................",
          "7755: |   3952: 06 12 03 00 12 02 01 01 06 11 03 00 12 02 01 01   ................",
          "7756: |   3968: 06 10 03 00 12 02 01 01 06 0f 03 00 12 02 01 01   ................",
          "7757: |   3984: 06 0e 03 00 12 02 01 01 06 0d 03 00 12 02 01 01   ................",
          "7758: |   4000: 06 0c 03 00 12 02 01 01 06 0b 03 00 12 02 01 01   ................",
          "7759: |   4016: 06 0a 03 00 12 02 01 01 05 09 03 00 12 03 01 01   ................",
          "7760: |   4032: 06 08 03 00 12 03 01 01 01 17 03 00 12 03 01 01   ................",
          "7761: |   4048: 06 06 03 00 12 01 01 01 06 05 03 00 12 01 01 01   ................",
          "7762: |   4064: 06 04 03 00 12 01 01 01 06 03 02 f0 12 06 01 01   ................",
          "7763: |   4080: 06 02 03 00 13 06 01 01 06 01 03 00 12 06 01 01   ................",
          "7764: | page 7 offset 24576",
          "7765: |      0: 0a 00 00 00 01 0f f4 00 0f f4 00 00 00 00 00 00   ................",
          "7766: |   4080: 00 00 00 00 0b 03 1b 01 76 65 72 73 69 6f 6e 04   ........version.",
          "7767: | page 8 offset 28672",
          "7768: |      0: 0d 00 00 00 03 0f d6 00 0f f4 0f e9 0f d6 00 00   ................",
          "7769: |   4048: 00 00 00 00 00 00 11 03 02 2b 69 6e 74 65 77 72   .........+intewr",
          "7770: |   4064: 69 74 79 2d 63 68 65 63 6b 09 02 02 1b 72 65 62   ity-check....reb",
          "7771: |   4080: 75 69 6c 64 0a 01 02 1d 6f 70 74 69 6d 69 7a 65   uild....optimize",
          "7772: | end crash-b366b5ac0d3887.db",
          "7773: }]} {}",
          "7775: do_execsql_test 55.1 {",
          "7776:   SAVEPOINT one;",
          "7777:   DELETE FROM t1 WHERE a MATCH 'ts';",
          "7778: }",
          "7780: do_execsql_test 55.2 {",
          "7781:   ROLLBACK TO one;",
          "7782: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ad84ca24ff760f7a2b128f2eeb4d799a97f84b8b8a8bb8d9657c4c555f6ccf47",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vtab.c||src/vtab.c": [
          "File: src/vtab.c -> src/vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1001:       const sqlite3_module *pMod = pVTab->pMod->pModule;",
          "1002:       if( pVTab->pVtab && pMod->iVersion>=2 ){",
          "1003:         int (*xMethod)(sqlite3_vtab *, int);",
          "1004:         switch( op ){",
          "1005:           case SAVEPOINT_BEGIN:",
          "1006:             xMethod = pMod->xSavepoint;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1004:         sqlite3VtabLock(pVTab);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1016:         if( xMethod && pVTab->iSavepoint>iSavepoint ){",
          "1017:           rc = xMethod(pVTab->pVtab, iSavepoint);",
          "1018:         }",
          "1019:       }",
          "1020:     }",
          "1021:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1020:         sqlite3VtabUnlock(pVTab);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0d756cc83a889e95871e974c6184fc35953c2f92",
      "candidate_info": {
        "commit_hash": "0d756cc83a889e95871e974c6184fc35953c2f92",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0d756cc83a889e95871e974c6184fc35953c2f92",
        "files": [
          "ext/rbu/rbuvacuum3.test",
          "ext/rbu/sqlite3rbu.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a problem with the second and subsequent sqlite3rbu_savestate() calls made on an RBU vacuum handle.\n\nFossilOrigin-Name: bef216dfa1456a787e3d9c74936ee1c6600827d4e252bd13e7a93046ce07469f",
        "before_after_code_files": [
          "ext/rbu/rbuvacuum3.test||ext/rbu/rbuvacuum3.test",
          "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rbu/rbuvacuum3.test||ext/rbu/rbuvacuum3.test": [
          "File: ext/rbu/rbuvacuum3.test -> ext/rbu/rbuvacuum3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 Jan 3",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "12: # This file contains tests for the RBU module. More specifically, it",
          "13: # contains tests to ensure that the sqlite3rbu_vacuum() API works as",
          "14: # expected.",
          "15: #",
          "17: source [file join [file dirname [info script]] rbu_common.tcl]",
          "18: set testprefix rbuvacuum3",
          "20: do_execsql_test 1.0 {",
          "21:   CREATE TABLE t1(a PRIMARY KEY, b, c);",
          "22:   CREATE INDEX i1b ON t1(b);",
          "23:   CREATE INDEX i1c ON t1(c);",
          "25:   WITH s(i) AS (",
          "26:     VALUES(1) UNION ALL SELECT i+1 FROM s WHERE i<100",
          "27:   )",
          "28:   INSERT INTO t1 SELECT i, randomblob(100), randomblob(100) FROM s;",
          "29: }",
          "31: forcedelete state.db",
          "32: do_test 1.1 {",
          "33:   sqlite3rbu_vacuum rbu test.db state.db",
          "34:   while {1} {",
          "35:     set rc [rbu step]",
          "36:     if {$rc!=\"SQLITE_OK\"} break",
          "37:     rbu savestate",
          "38:   }",
          "39:   rbu close",
          "40: } {SQLITE_DONE}",
          "42: do_test 1.2 {",
          "43:   sqlite3rbu_vacuum rbu test.db state.db",
          "44:   while {1} {",
          "45:     set rc [rbu step]",
          "46:     if {$rc!=\"SQLITE_OK\"} break",
          "47:     rbu savestate",
          "48:   }",
          "49:   rbu close",
          "50: } {SQLITE_DONE}",
          "52: do_test 1.3 {",
          "53:   while {1} {",
          "54:     sqlite3rbu_vacuum rbu test.db state.db",
          "55:     set rc [rbu step]",
          "56:     if {$rc!=\"SQLITE_OK\"} break",
          "57:     rbu savestate",
          "58:     rbu close",
          "59:   }",
          "60:   rbu close",
          "61: } {SQLITE_DONE}",
          "63: finish_test",
          "",
          "---------------"
        ],
        "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c": [
          "File: ext/rbu/sqlite3rbu.c -> ext/rbu/sqlite3rbu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3945:   if( p->eStage==RBU_STAGE_OAL ){",
          "3946:     assert( rc!=SQLITE_DONE );",
          "3947:     if( rc==SQLITE_OK ) rc = sqlite3_exec(p->dbRbu, \"COMMIT\", 0, 0, 0);",
          "3949:     if( rc==SQLITE_OK ) rc = sqlite3_exec(p->dbMain, \"BEGIN IMMEDIATE\", 0, 0,0);",
          "3950:   }",
          "",
          "[Removed Lines]",
          "3948:     if( rc==SQLITE_OK ) rc = sqlite3_exec(p->dbRbu, \"BEGIN IMMEDIATE\", 0, 0, 0);",
          "",
          "[Added Lines]",
          "3948:     if( rc==SQLITE_OK ){",
          "3949:       const char *zBegin = rbuIsVacuum(p) ? \"BEGIN\" : \"BEGIN IMMEDIATE\";",
          "3950:       rc = sqlite3_exec(p->dbRbu, zBegin, 0, 0, 0);",
          "3951:     }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 120cb1768338eb86412fb69d4c7677247775bb37875ab3a98766cffd535f04cf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}