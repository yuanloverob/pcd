{
  "cve_id": "CVE-2013-0178",
  "cve_desc": "Insecure temporary file vulnerability in Redis before 2.6 related to /tmp/redis-%p.vm.",
  "repo": "antirez/redis",
  "patch_hash": "697af434fbeb2e3ba2ba9687cd283ed1a2734fa5",
  "patch_info": {
    "commit_hash": "697af434fbeb2e3ba2ba9687cd283ed1a2734fa5",
    "repo": "antirez/redis",
    "commit_url": "https://github.com/antirez/redis/commit/697af434fbeb2e3ba2ba9687cd283ed1a2734fa5",
    "files": [
      "src/diskstore.c",
      "src/networking.c",
      "src/redis.c",
      "src/redis.h"
    ],
    "message": "initial changes needed to turn the current VM code into a cache system. Tons of work to do still.",
    "before_after_code_files": [
      "src/diskstore.c||src/diskstore.c",
      "src/networking.c||src/networking.c",
      "src/redis.c||src/redis.c",
      "src/redis.h||src/redis.h"
    ]
  },
  "patch_diff": {
    "src/diskstore.c||src/diskstore.c": [
      "File: src/diskstore.c -> src/diskstore.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "68: int dsOpen(void) {",
      "69:     struct stat sb;",
      "70:     int retval;",
      "73:     if ((retval = stat(path,&sb) == -1) && errno != ENOENT) {",
      "74:         redisLog(REDIS_WARNING, \"Error opening disk store at %s: %s\",",
      "",
      "[Removed Lines]",
      "71:     char *path = server.diskstore_path;",
      "",
      "[Added Lines]",
      "80:     char *path = server.ds_path;",
      "",
      "---------------"
    ],
    "src/networking.c||src/networking.c": [
      "File: src/networking.c -> src/networking.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "168: void addReply(redisClient *c, robj *obj) {",
      "169:     if (_installWriteEvent(c) != REDIS_OK) return;",
      "",
      "[Removed Lines]",
      "170:     redisAssert(!server.vm_enabled || obj->storage == REDIS_VM_MEMORY);",
      "",
      "[Added Lines]",
      "170:     redisAssert(!server.ds_enabled || obj->storage == REDIS_VM_MEMORY);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "462:     if (c->flags & REDIS_IO_WAIT) {",
      "464:         if (listLength(c->io_keys) == 0) {",
      "465:             ln = listSearchKey(server.io_ready_clients,c);",
      "",
      "[Removed Lines]",
      "463:         redisAssert(server.vm_enabled);",
      "",
      "[Added Lines]",
      "463:         redisAssert(server.ds_enabled);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "474:                 dontWaitForSwappedKey(c,ln->value);",
      "475:             }",
      "476:         }",
      "478:     }",
      "479:     listRelease(c->io_keys);",
      "",
      "[Removed Lines]",
      "477:         server.vm_blocked_clients--;",
      "",
      "[Added Lines]",
      "477:         server.cache_blocked_clients--;",
      "",
      "---------------"
    ],
    "src/redis.c||src/redis.c": [
      "File: src/redis.c -> src/redis.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "619:     if (server.masterhost == NULL) activeExpireCycle();",
      "642:     }",
      "",
      "[Removed Lines]",
      "623:     if (vmCanSwapOut()) {",
      "624:         while (server.vm_enabled && zmalloc_used_memory() >",
      "625:                 server.vm_max_memory)",
      "626:         {",
      "627:             int retval = (server.vm_max_threads == 0) ?",
      "628:                         vmSwapOneObjectBlocking() :",
      "629:                         vmSwapOneObjectThreaded();",
      "630:             if (retval == REDIS_ERR && !(loops % 300) &&",
      "631:                 zmalloc_used_memory() >",
      "632:                 (server.vm_max_memory+server.vm_max_memory/10))",
      "633:             {",
      "634:                 redisLog(REDIS_WARNING,\"WARNING: vm-max-memory limit exceeded by more than 10%% but unable to swap more objects out!\");",
      "635:             }",
      "640:             if (retval == REDIS_ERR || server.vm_max_threads > 0) break;",
      "641:         }",
      "",
      "[Added Lines]",
      "623:     while (server.ds_enabled && zmalloc_used_memory() >",
      "624:             server.cache_max_memory)",
      "625:     {",
      "626:         cacheFreeOneEntry();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "656:     listNode *ln;",
      "657:     redisClient *c;",
      "661:         listIter li;",
      "663:         listRewind(server.io_ready_clients,&li);",
      "",
      "[Removed Lines]",
      "660:     if (server.vm_enabled && listLength(server.io_ready_clients)) {",
      "",
      "[Added Lines]",
      "645:     if (server.ds_enabled && listLength(server.io_ready_clients)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "669:             listDelNode(server.io_ready_clients,ln);",
      "670:             c->flags &= (~REDIS_IO_WAIT);",
      "672:             aeCreateFileEvent(server.el, c->fd, AE_READABLE,",
      "673:                 readQueryFromClient, c);",
      "674:             cmd = lookupCommand(c->argv[0]->ptr);",
      "",
      "[Removed Lines]",
      "671:             server.vm_blocked_clients--;",
      "",
      "[Added Lines]",
      "656:             server.cache_blocked_clients--;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "787:     server.maxmemory = 0;",
      "788:     server.maxmemory_policy = REDIS_MAXMEMORY_VOLATILE_LRU;",
      "789:     server.maxmemory_samples = 3;",
      "797:     server.hash_max_zipmap_entries = REDIS_HASH_MAX_ZIPMAP_ENTRIES;",
      "798:     server.hash_max_zipmap_value = REDIS_HASH_MAX_ZIPMAP_VALUE;",
      "799:     server.list_max_ziplist_entries = REDIS_LIST_MAX_ZIPLIST_ENTRIES;",
      "",
      "[Removed Lines]",
      "790:     server.vm_enabled = 0;",
      "791:     server.vm_swap_file = zstrdup(\"/tmp/redis-%p.vm\");",
      "795:     server.vm_max_threads = 4;",
      "796:     server.vm_blocked_clients = 0;",
      "",
      "[Added Lines]",
      "775:     server.ds_enabled = 0;",
      "776:     server.ds_path = zstrdup(\"/tmp/redis.ds\");",
      "778:     server.cache_blocked_clients = 0;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "873:         server.db[j].expires = dictCreate(&keyptrDictType,NULL);",
      "874:         server.db[j].blocking_keys = dictCreate(&keylistDictType,NULL);",
      "875:         server.db[j].watched_keys = dictCreate(&keylistDictType,NULL);",
      "877:             server.db[j].io_keys = dictCreate(&keylistDictType,NULL);",
      "878:         server.db[j].id = j;",
      "879:     }",
      "",
      "[Removed Lines]",
      "876:         if (server.vm_enabled)",
      "",
      "[Added Lines]",
      "858:         if (server.ds_enabled)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "911:         }",
      "912:     }",
      "915: }",
      "",
      "[Removed Lines]",
      "914:     if (server.vm_enabled) vmInit();",
      "",
      "[Added Lines]",
      "896:     if (server.ds_enabled) dsInit();",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1050:         queueMultiCommand(c,cmd);",
      "1051:         addReply(c,shared.queued);",
      "1052:     } else {",
      "1055:         call(c,cmd);",
      "1056:     }",
      "1057:     return REDIS_OK;",
      "",
      "[Removed Lines]",
      "1053:         if (server.vm_enabled && server.vm_max_threads > 0 &&",
      "1054:             blockClientOnSwappedKeys(c,cmd)) return REDIS_ERR;",
      "",
      "[Added Lines]",
      "1035:         if (server.ds_enabled && blockClientOnSwappedKeys(c,cmd))",
      "1036:             return REDIS_ERR;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1072:     if (server.appendonly) {",
      "1074:         aof_fsync(server.appendfd);",
      "1076:     } else if (server.saveparamslen > 0) {",
      "1078:         if (rdbSave(server.dbfilename) != REDIS_OK) {",
      "",
      "[Removed Lines]",
      "1075:         if (server.vm_enabled) unlink(server.vm_swap_file);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1185:         \"hash_max_zipmap_value:%zu\\r\\n\"",
      "1186:         \"pubsub_channels:%ld\\r\\n\"",
      "1187:         \"pubsub_patterns:%u\\r\\n\"",
      "1189:         \"role:%s\\r\\n\"",
      "1190:         ,REDIS_VERSION,",
      "1191:         redisGitSHA1(),",
      "",
      "[Removed Lines]",
      "1188:         \"vm_enabled:%d\\r\\n\"",
      "",
      "[Added Lines]",
      "1169:         \"ds_enabled:%d\\r\\n\"",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1228:         server.hash_max_zipmap_value,",
      "1229:         dictSize(server.pubsub_channels),",
      "1230:         listLength(server.pubsub_patterns),",
      "1232:         server.masterhost == NULL ? \"master\" : \"slave\"",
      "1233:     );",
      "1234:     if (server.masterhost) {",
      "",
      "[Removed Lines]",
      "1231:         server.vm_enabled != 0,",
      "",
      "[Added Lines]",
      "1212:         server.ds_enabled != 0,",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "1255:             );",
      "1256:         }",
      "1257:     }",
      "1259:         lockThreadedIO();",
      "1260:         info = sdscatprintf(info,",
      "1285:         );",
      "1286:         unlockThreadedIO();",
      "1287:     }",
      "",
      "[Removed Lines]",
      "1258:     if (server.vm_enabled) {",
      "1261:             \"vm_conf_max_memory:%llu\\r\\n\"",
      "1262:             \"vm_conf_page_size:%llu\\r\\n\"",
      "1263:             \"vm_conf_pages:%llu\\r\\n\"",
      "1264:             \"vm_stats_used_pages:%llu\\r\\n\"",
      "1265:             \"vm_stats_swapped_objects:%llu\\r\\n\"",
      "1266:             \"vm_stats_swappin_count:%llu\\r\\n\"",
      "1267:             \"vm_stats_swappout_count:%llu\\r\\n\"",
      "1268:             \"vm_stats_io_newjobs_len:%lu\\r\\n\"",
      "1269:             \"vm_stats_io_processing_len:%lu\\r\\n\"",
      "1270:             \"vm_stats_io_processed_len:%lu\\r\\n\"",
      "1271:             \"vm_stats_io_active_threads:%lu\\r\\n\"",
      "1272:             \"vm_stats_blocked_clients:%lu\\r\\n\"",
      "1273:             ,(unsigned long long) server.vm_max_memory,",
      "1274:             (unsigned long long) server.vm_page_size,",
      "1275:             (unsigned long long) server.vm_pages,",
      "1276:             (unsigned long long) server.vm_stats_used_pages,",
      "1277:             (unsigned long long) server.vm_stats_swapped_objects,",
      "1278:             (unsigned long long) server.vm_stats_swapins,",
      "1279:             (unsigned long long) server.vm_stats_swapouts,",
      "1280:             (unsigned long) listLength(server.io_newjobs),",
      "1281:             (unsigned long) listLength(server.io_processing),",
      "1282:             (unsigned long) listLength(server.io_processed),",
      "1283:             (unsigned long) server.io_active_threads,",
      "1284:             (unsigned long) server.vm_blocked_clients",
      "",
      "[Added Lines]",
      "1239:     if (server.ds_enabled) {",
      "1242:             \"cache_max_memory:%llu\\r\\n\"",
      "1243:             \"cache_blocked_clients:%lu\\r\\n\"",
      "1244:             ,(unsigned long long) server.cache_max_memory,",
      "1245:             (unsigned long) server.cache_blocked_clients",
      "",
      "---------------"
    ],
    "src/redis.h||src/redis.h": [
      "File: src/redis.h -> src/redis.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "440:     int maxmemory_samples;",
      "442:     unsigned int bpop_blocked_clients;",
      "444:     list *unblocked_clients;",
      "",
      "[Removed Lines]",
      "443:     unsigned int vm_blocked_clients;",
      "",
      "[Added Lines]",
      "443:     unsigned int cache_blocked_clients;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "448:     int sort_alpha;",
      "449:     int sort_bypattern;",
      "457:     size_t hash_max_zipmap_entries;",
      "458:     size_t hash_max_zipmap_value;",
      "",
      "[Removed Lines]",
      "451:     int vm_enabled;",
      "452:     char *vm_swap_file;",
      "453:     off_t vm_page_size;",
      "454:     off_t vm_pages;",
      "455:     unsigned long long vm_max_memory;",
      "",
      "[Added Lines]",
      "453:     unsigned long long cache_max_memory;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "98a9abb66d2471e9ea4e657566fbd61a7f28b02b",
      "candidate_info": {
        "commit_hash": "98a9abb66d2471e9ea4e657566fbd61a7f28b02b",
        "repo": "antirez/redis",
        "commit_url": "https://github.com/antirez/redis/commit/98a9abb66d2471e9ea4e657566fbd61a7f28b02b",
        "files": [
          "src/dscache.c",
          "src/networking.c",
          "src/object.c",
          "src/redis.h"
        ],
        "message": "don't use small shared integer objects when disk store is enabled",
        "before_after_code_files": [
          "src/dscache.c||src/dscache.c",
          "src/networking.c||src/networking.c",
          "src/object.c||src/object.c",
          "src/redis.h||src/redis.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/networking.c||src/networking.c",
            "src/redis.h||src/redis.h"
          ],
          "candidate": [
            "src/networking.c||src/networking.c",
            "src/redis.h||src/redis.h"
          ]
        }
      },
      "candidate_diff": {
        "src/dscache.c||src/dscache.c": [
          "File: src/dscache.c -> src/dscache.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:     server.io_processed = listCreate();",
          "134:     server.io_ready_clients = listCreate();",
          "135:     pthread_mutex_init(&server.io_mutex,NULL);",
          "136:     server.io_active_threads = 0;",
          "137:     if (pipe(pipefds) == -1) {",
          "138:         redisLog(REDIS_WARNING,\"Unable to intialized DS: pipe(2): %s. Exiting.\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138:     pthread_cond_init(&server.io_condvar,NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "329:     REDIS_NOTUSED(arg);",
          "331:     pthread_detach(pthread_self());",
          "332:     while(1) {",
          "335:         if (listLength(server.io_newjobs) == 0) {",
          "337:             unlockThreadedIO();",
          "339:             continue;",
          "340:         }",
          "341:         ln = listFirst(server.io_newjobs);",
          "",
          "[Removed Lines]",
          "334:         lockThreadedIO();",
          "338:             sleep(1);",
          "",
          "[Added Lines]",
          "335:     lockThreadedIO();",
          "338:         pthread_cond_wait(&server.io_condvar,&server.io_mutex);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "368:         redisLog(REDIS_DEBUG,\"Thread %ld completed the job: %p (key %s)\",",
          "369:             (long) pthread_self(), (void*)j, (char*)j->key->ptr);",
          "370:         lockThreadedIO();",
          "371:         listDelNode(server.io_processing,ln);",
          "372:         listAddNodeTail(server.io_processed,j);",
          "376:         redisAssert(write(server.io_ready_pipe_write,\"x\",1) == 1);",
          "377:     }",
          "379: }",
          "381: void spawnIOThread(void) {",
          "",
          "[Removed Lines]",
          "373:         unlockThreadedIO();",
          "",
          "[Added Lines]",
          "384:     unlockThreadedIO();",
          "385:     return NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "450:     lockThreadedIO();",
          "451:     queueIOJob(j);",
          "452:     unlockThreadedIO();",
          "453: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "459:     pthread_cond_signal(&server.io_condvar);",
          "",
          "---------------"
        ],
        "src/networking.c||src/networking.c": [
          "File: src/networking.c -> src/networking.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "168: void addReply(redisClient *c, robj *obj) {",
          "169:     if (_installWriteEvent(c) != REDIS_OK) return;",
          "",
          "[Removed Lines]",
          "170:     redisAssert(!server.ds_enabled || obj->storage == REDIS_DS_MEMORY);",
          "",
          "[Added Lines]",
          "170:     redisAssert(!server.ds_enabled || obj->storage != REDIS_DS_SAVING);",
          "",
          "---------------"
        ],
        "src/object.c||src/object.c": [
          "File: src/object.c -> src/object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: robj *createStringObjectFromLongLong(long long value) {",
          "33:     robj *o;",
          "34:     if (value >= 0 && value < REDIS_SHARED_INTEGERS &&",
          "35:         pthread_equal(pthread_self(),server.mainthread)) {",
          "36:         incrRefCount(shared.integers[value]);",
          "37:         o = shared.integers[value];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35:         !server.ds_enabled &&",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "218:         server.maxmemory == 0 && value >= 0 && value < REDIS_SHARED_INTEGERS &&",
          "219:         pthread_equal(pthread_self(),server.mainthread))",
          "220:     {",
          "",
          "[Removed Lines]",
          "217:     if (server.ds_enabled == 0 &&",
          "",
          "[Added Lines]",
          "218:     if (!server.ds_enabled &&",
          "",
          "---------------"
        ],
        "src/redis.h||src/redis.h": [
          "File: src/redis.h -> src/redis.h"
        ]
      }
    },
    {
      "candidate_hash": "c9d0c3623a7714bd41a35237f4ba927206a7adb6",
      "candidate_info": {
        "commit_hash": "c9d0c3623a7714bd41a35237f4ba927206a7adb6",
        "repo": "antirez/redis",
        "commit_url": "https://github.com/antirez/redis/commit/c9d0c3623a7714bd41a35237f4ba927206a7adb6",
        "files": [
          "redis.conf",
          "src/Makefile",
          "src/aof.c",
          "src/config.c",
          "src/db.c",
          "src/debug.c",
          "src/diskstore.c",
          "src/dscache.c",
          "src/networking.c",
          "src/object.c",
          "src/rdb.c",
          "src/redis.c",
          "src/redis.h",
          "tests/assets/default.conf"
        ],
        "message": "diskstore removed",
        "before_after_code_files": [
          "redis.conf||redis.conf",
          "src/aof.c||src/aof.c",
          "src/config.c||src/config.c",
          "src/db.c||src/db.c",
          "src/debug.c||src/debug.c",
          "src/diskstore.c||src/diskstore.c",
          "src/dscache.c||src/dscache.c",
          "src/networking.c||src/networking.c",
          "src/object.c||src/object.c",
          "src/rdb.c||src/rdb.c",
          "src/redis.c||src/redis.c",
          "src/redis.h||src/redis.h",
          "tests/assets/default.conf||tests/assets/default.conf"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/diskstore.c||src/diskstore.c",
            "src/networking.c||src/networking.c",
            "src/redis.c||src/redis.c",
            "src/redis.h||src/redis.h"
          ],
          "candidate": [
            "src/diskstore.c||src/diskstore.c",
            "src/networking.c||src/networking.c",
            "src/redis.c||src/redis.c",
            "src/redis.h||src/redis.h"
          ]
        }
      },
      "candidate_diff": {
        "redis.conf||redis.conf": [
          "File: redis.conf -> redis.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "312: auto-aof-rewrite-percentage 100",
          "313: auto-aof-rewrite-min-size 64mb",
          "341: ############################### ADVANCED CONFIG ###############################",
          "343: # Hashes are encoded in a special way (much more memory efficient) when they",
          "",
          "[Removed Lines]",
          "315: #################################### DISK STORE ###############################",
          "317: # When disk store is active Redis works as an on-disk database, where memory",
          "318: # is only used as a object cache.",
          "319: #",
          "320: # This mode is good for datasets that are bigger than memory, and in general",
          "321: # when you want to trade speed for:",
          "322: #",
          "323: #  - less memory used",
          "324: #  - immediate server restart",
          "325: #  - per key durability, without need for backgrond savig",
          "326: #",
          "327: # On the other hand, with disk store enabled MULTI/EXEC are no longer",
          "328: # transactional from the point of view of the persistence on disk, that is,",
          "329: # Redis transactions will still guarantee that commands are either processed",
          "330: # all or nothing, but there is no guarantee that all the keys are flushed",
          "331: # on disk in an atomic way.",
          "332: #",
          "333: # Of course with disk store enabled Redis is not as fast as it is when",
          "334: # working with just the memory back end.",
          "336: diskstore-enabled no",
          "337: diskstore-path redis.ds",
          "338: cache-max-memory 0",
          "339: cache-flush-delay 0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/aof.c||src/aof.c": [
          "File: src/aof.c -> src/aof.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "574:     long long start;",
          "576:     if (server.bgrewritechildpid != -1) return REDIS_ERR;",
          "581:     start = ustime();",
          "582:     if ((childpid = fork()) == 0) {",
          "583:         char tmpfile[256];",
          "",
          "[Removed Lines]",
          "577:     if (server.ds_enabled != 0) {",
          "578:         redisLog(REDIS_WARNING,\"BGREWRITEAOF called with diskstore enabled: AOF is not supported when diskstore is enabled. Operation not performed.\");",
          "579:         return REDIS_ERR;",
          "580:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "251:         } else if (!strcasecmp(argv[0],\"dbfilename\") && argc == 2) {",
          "252:             zfree(server.dbfilename);",
          "253:             server.dbfilename = zstrdup(argv[1]);",
          "266:         } else if (!strcasecmp(argv[0],\"hash-max-zipmap-entries\") && argc == 2) {",
          "267:             server.hash_max_zipmap_entries = memtoll(argv[1], NULL);",
          "268:         } else if (!strcasecmp(argv[0],\"hash-max-zipmap-value\") && argc == 2) {",
          "",
          "[Removed Lines]",
          "254:         } else if (!strcasecmp(argv[0],\"diskstore-enabled\") && argc == 2) {",
          "255:             if ((server.ds_enabled = yesnotoi(argv[1])) == -1) {",
          "256:                 err = \"argument must be 'yes' or 'no'\"; goto loaderr;",
          "257:             }",
          "258:         } else if (!strcasecmp(argv[0],\"diskstore-path\") && argc == 2) {",
          "259:             sdsfree(server.ds_path);",
          "260:             server.ds_path = sdsnew(argv[1]);",
          "261:         } else if (!strcasecmp(argv[0],\"cache-max-memory\") && argc == 2) {",
          "262:             server.cache_max_memory = memtoll(argv[1],NULL);",
          "263:         } else if (!strcasecmp(argv[0],\"cache-flush-delay\") && argc == 2) {",
          "264:             server.cache_flush_delay = atoi(argv[1]);",
          "265:             if (server.cache_flush_delay < 0) server.cache_flush_delay = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/db.c||src/db.c": [
          "File: src/db.c -> src/db.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: robj *lookupKey(redisDb *db, robj *key) {",
          "42:     dictEntry *de = dictFind(db->dict,key->ptr);",
          "43:     if (de) {",
          "",
          "[Removed Lines]",
          "34: void lookupWaitBusyKey(redisDb *db, robj *key) {",
          "36:     waitEmptyIOJobsQueue();",
          "37:     processAllPendingIOJobs();",
          "38:     redisAssert((cacheScheduleIOGetFlags(db,key) & REDIS_IO_SAVEINPROG) == 0);",
          "39: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:         if (server.bgsavechildpid == -1 && server.bgrewritechildpid == -1)",
          "50:             val->lru = server.lruclock;",
          "59:         server.stat_keyspace_hits++;",
          "60:         return val;",
          "61:     } else {",
          "97:         server.stat_keyspace_misses++;",
          "98:         return NULL;",
          "99:     }",
          "",
          "[Removed Lines]",
          "52:         if (server.ds_enabled &&",
          "53:             cacheScheduleIOGetFlags(db,key) & REDIS_IO_SAVEINPROG)",
          "54:         {",
          "56:             redisLog(REDIS_DEBUG,\"Lookup found a key in SAVEINPROG state. Waiting. (Key was in the cache)\");",
          "57:             lookupWaitBusyKey(db,key);",
          "58:         }",
          "62:         time_t expire;",
          "63:         robj *val;",
          "68:         if (server.ds_enabled && cacheKeyMayExist(db,key)) {",
          "69:             long flags = cacheScheduleIOGetFlags(db,key);",
          "74:             if (flags & REDIS_IO_SAVE) {",
          "75:                 server.stat_keyspace_misses++;",
          "76:                 return NULL;",
          "77:             }",
          "81:             if (flags & REDIS_IO_SAVEINPROG) {",
          "82:                 redisLog(REDIS_DEBUG,\"Lookup found a key in SAVEINPROG state. Waiting (while force loading).\");",
          "83:                 lookupWaitBusyKey(db,key);",
          "84:             }",
          "86:             redisLog(REDIS_DEBUG,\"Force loading key %s via lookup\", key->ptr);",
          "87:             val = dsGet(db,key,&expire);",
          "88:             if (val) {",
          "89:                 dbAdd(db,key,val);",
          "90:                 if (expire != -1) setExpire(db,key,expire);",
          "91:                 server.stat_keyspace_hits++;",
          "92:                 return val;",
          "93:             } else {",
          "94:                 cacheSetKeyDoesNotExist(db,key);",
          "95:             }",
          "96:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "130:     int retval = dictAdd(db->dict, copy, val);",
          "132:     redisAssert(retval == REDIS_OK);",
          "134:     if (server.cluster_enabled) SlotToKeyAdd(key);",
          "135:  }",
          "",
          "[Removed Lines]",
          "133:     if (server.ds_enabled) cacheSetKeyMayExist(db,key);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "145:     redisAssert(de != NULL);",
          "146:     dictReplace(db->dict, key->ptr, val);",
          "148: }",
          "",
          "[Removed Lines]",
          "147:     if (server.ds_enabled) cacheSetKeyMayExist(db,key);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "198: int dbDelete(redisDb *db, robj *key) {",
          "209:     if (dictSize(db->expires) > 0) dictDelete(db->expires,key->ptr);",
          "",
          "[Removed Lines]",
          "202:     if (server.ds_enabled) {",
          "203:         handleClientsBlockedOnSwappedKey(db,key);",
          "204:         cacheSetKeyDoesNotExist(db,key);",
          "205:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "225:         removed += dictSize(server.db[j].dict);",
          "226:         dictEmpty(server.db[j].dict);",
          "227:         dictEmpty(server.db[j].expires);",
          "229:     }",
          "230:     return removed;",
          "231: }",
          "",
          "[Removed Lines]",
          "228:         if (server.ds_enabled) dictEmpty(server.db[j].io_negcache);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "249: void signalModifiedKey(redisDb *db, robj *key) {",
          "250:     touchWatchedKey(db,key);",
          "253: }",
          "255: void signalFlushedDb(int dbid) {",
          "",
          "[Removed Lines]",
          "251:     if (server.ds_enabled)",
          "252:         cacheScheduleIO(db,key,REDIS_IO_SAVE);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "265:     signalFlushedDb(c->db->id);",
          "266:     dictEmpty(c->db->dict);",
          "267:     dictEmpty(c->db->expires);",
          "269:     addReply(c,shared.ok);",
          "270: }",
          "",
          "[Removed Lines]",
          "268:     if (server.ds_enabled) dsFlushDb(c->db->id);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "277:         kill(server.bgsavechildpid,SIGKILL);",
          "278:         rdbRemoveTempFile(server.bgsavechildpid);",
          "279:     }",
          "284:     server.dirty++;",
          "285: }",
          "",
          "[Removed Lines]",
          "280:     if (server.ds_enabled)",
          "281:         dsFlushDb(-1);",
          "282:     else",
          "283:         rdbSave(server.dbfilename);",
          "",
          "[Added Lines]",
          "216:     rdbSave(server.dbfilename);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "288:     int deleted = 0, j;",
          "290:     for (j = 1; j < c->argc; j++) {",
          "296:         if (dbDelete(c->db,c->argv[j])) {",
          "297:             signalModifiedKey(c->db,c->argv[j]);",
          "298:             server.dirty++;",
          "299:             deleted++;",
          "307:         }",
          "308:     }",
          "309:     addReplyLongLong(c,deleted);",
          "",
          "[Removed Lines]",
          "291:         if (server.ds_enabled) {",
          "292:             lookupKeyRead(c->db,c->argv[j]);",
          "295:         }",
          "300:         } else if (server.ds_enabled) {",
          "301:             if (cacheKeyMayExist(c->db,c->argv[j]) &&",
          "302:                 dsExists(c->db,c->argv[j]))",
          "303:             {",
          "304:                 cacheScheduleIO(c->db,c->argv[j],REDIS_IO_SAVE);",
          "305:                 deleted = 1;",
          "306:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "618: void ttlCommand(redisClient *c) {",
          "619:     time_t expire, ttl = -1;",
          "622:     expire = getExpire(c->db,c->argv[1]);",
          "623:     if (expire != -1) {",
          "624:         ttl = (expire-time(NULL));",
          "",
          "[Removed Lines]",
          "621:     if (server.ds_enabled) lookupKeyRead(c->db,c->argv[1]);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/debug.c||src/debug.c": [
          "File: src/debug.c -> src/debug.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "212: void debugCommand(redisClient *c) {",
          "213:     if (!strcasecmp(c->argv[1]->ptr,\"segfault\")) {",
          "230:     } else if (!strcasecmp(c->argv[1]->ptr,\"reload\")) {",
          "235:         if (rdbSave(server.dbfilename) != REDIS_OK) {",
          "236:             addReply(c,shared.err);",
          "237:             return;",
          "",
          "[Removed Lines]",
          "215:     } else if (!strcasecmp(c->argv[1]->ptr,\"flushcache\")) {",
          "216:         if (!server.ds_enabled) {",
          "217:             addReplyError(c, \"DEBUG FLUSHCACHE called with diskstore off.\");",
          "218:             return;",
          "219:         } else if (server.bgsavethread != (pthread_t) -1) {",
          "220:             addReplyError(c, \"Can't flush cache while BGSAVE is in progress.\");",
          "221:             return;",
          "222:         } else {",
          "225:             cacheForcePointInTime();",
          "226:             emptyDb();",
          "227:             addReply(c,shared.ok);",
          "228:             return;",
          "229:         }",
          "231:         if (server.ds_enabled) {",
          "232:             addReply(c,shared.ok);",
          "233:             return;",
          "234:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "256:         robj *val;",
          "257:         char *strenc;",
          "260:         if ((de = dictFind(c->db->dict,c->argv[2]->ptr)) == NULL) {",
          "261:             addReply(c,shared.nokeyerr);",
          "262:             return;",
          "",
          "[Removed Lines]",
          "259:         if (server.ds_enabled) lookupKeyRead(c->db,c->argv[2]);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/diskstore.c||src/diskstore.c": [
          "File: src/diskstore.c -> src/diskstore.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/dscache.c||src/dscache.c": [
          "File: src/dscache.c -> src/dscache.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/networking.c||src/networking.c": [
          "File: src/networking.c -> src/networking.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "487:         redisAssert(ln != NULL);",
          "488:         listDelNode(server.unblocked_clients,ln);",
          "489:     }",
          "509:     listRelease(c->io_keys);",
          "",
          "[Removed Lines]",
          "492:     if (c->flags & REDIS_IO_WAIT) {",
          "493:         redisAssert(server.ds_enabled);",
          "494:         if (listLength(c->io_keys) == 0) {",
          "495:             ln = listSearchKey(server.io_ready_clients,c);",
          "499:             redisAssert(ln != NULL);",
          "500:             listDelNode(server.io_ready_clients,ln);",
          "501:         } else {",
          "502:             while (listLength(c->io_keys)) {",
          "503:                 ln = listFirst(c->io_keys);",
          "504:                 dontWaitForSwappedKey(c,ln->value);",
          "505:             }",
          "506:         }",
          "507:         server.cache_blocked_clients--;",
          "508:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "796: void processInputBuffer(redisClient *c) {",
          "798:     while(sdslen(c->querybuf)) {",
          "",
          "[Removed Lines]",
          "800:         if (c->flags & REDIS_BLOCKED || c->flags & REDIS_IO_WAIT) return;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "907:             if (p == flags) *p++ = 'N';",
          "908:             if (client->flags & REDIS_MULTI) *p++ = 'x';",
          "909:             if (client->flags & REDIS_BLOCKED) *p++ = 'b';",
          "911:             if (client->flags & REDIS_DIRTY_CAS) *p++ = 'd';",
          "912:             if (client->flags & REDIS_CLOSE_AFTER_REPLY) *p++ = 'c';",
          "913:             if (client->flags & REDIS_UNBLOCKED) *p++ = 'u';",
          "",
          "[Removed Lines]",
          "910:             if (client->flags & REDIS_IO_WAIT) *p++ = 'i';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/object.c||src/object.c": [
          "File: src/object.c -> src/object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include \"redis.h\"",
          "3: #include <math.h>",
          "5: robj *createObject(int type, void *ptr) {",
          "",
          "[Removed Lines]",
          "2: #include <pthread.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31: robj *createStringObjectFromLongLong(long long value) {",
          "32:     robj *o;",
          "36:         incrRefCount(shared.integers[value]);",
          "37:         o = shared.integers[value];",
          "38:     } else {",
          "",
          "[Removed Lines]",
          "33:     if (value >= 0 && value < REDIS_SHARED_INTEGERS &&",
          "34:         !server.ds_enabled &&",
          "35:         pthread_equal(pthread_self(),server.mainthread)) {",
          "",
          "[Added Lines]",
          "32:     if (value >= 0 && value < REDIS_SHARED_INTEGERS) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "248:         decrRefCount(o);",
          "249:         incrRefCount(shared.integers[value]);",
          "250:         return shared.integers[value];",
          "",
          "[Removed Lines]",
          "244:     if (!server.ds_enabled &&",
          "245:         server.maxmemory == 0 && value >= 0 && value < REDIS_SHARED_INTEGERS &&",
          "246:         pthread_equal(pthread_self(),server.mainthread))",
          "247:     {",
          "",
          "[Added Lines]",
          "241:     if (server.maxmemory == 0 && value >= 0 && value < REDIS_SHARED_INTEGERS) {",
          "",
          "---------------"
        ],
        "src/rdb.c||src/rdb.c": [
          "File: src/rdb.c -> src/rdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "413:     int j;",
          "414:     time_t now = time(NULL);",
          "421:     snprintf(tmpfile,256,\"temp-%d.rdb\", (int) getpid());",
          "422:     fp = fopen(tmpfile,\"w\");",
          "423:     if (!fp) {",
          "",
          "[Removed Lines]",
          "416:     if (server.ds_enabled) {",
          "417:         cacheForcePointInTime();",
          "418:         return dsRdbSave(filename);",
          "419:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "484:     pid_t childpid;",
          "485:     long long start;",
          "490:     server.dirty_before_bgsave = server.dirty;",
          "497:     start = ustime();",
          "498:     if ((childpid = fork()) == 0) {",
          "499:         int retval;",
          "",
          "[Removed Lines]",
          "487:     if (server.bgsavechildpid != -1 ||",
          "488:         server.bgsavethread != (pthread_t) -1) return REDIS_ERR;",
          "492:     if (server.ds_enabled) {",
          "493:         cacheForcePointInTime();",
          "494:         return dsRdbSaveBackground(filename);",
          "495:     }",
          "",
          "[Added Lines]",
          "482:     if (server.bgsavechildpid != -1) return REDIS_ERR;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1013:         rdbRemoveTempFile(server.bgsavechildpid);",
          "1014:     }",
          "1015:     server.bgsavechildpid = -1;",
          "1020:     updateSlavesWaitingBgsave(exitcode == 0 ? REDIS_OK : REDIS_ERR);",
          "1021: }",
          "1023: void saveCommand(redisClient *c) {",
          "1025:         addReplyError(c,\"Background save already in progress\");",
          "1026:         return;",
          "1027:     }",
          "",
          "[Removed Lines]",
          "1016:     server.bgsavethread = (pthread_t) -1;",
          "1017:     server.bgsavethread_state = REDIS_BGSAVE_THREAD_UNACTIVE;",
          "1024:     if (server.bgsavechildpid != -1 || server.bgsavethread != (pthread_t)-1) {",
          "",
          "[Added Lines]",
          "1011:     if (server.bgsavechildpid != -1) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1033: }",
          "1035: void bgsaveCommand(redisClient *c) {",
          "1037:         addReplyError(c,\"Background save already in progress\");",
          "1038:     } else if (server.bgrewritechildpid != -1) {",
          "1039:         addReplyError(c,\"Can't BGSAVE while AOF log rewriting is in progress\");",
          "",
          "[Removed Lines]",
          "1036:     if (server.bgsavechildpid != -1 || server.bgsavethread != (pthread_t)-1) {",
          "",
          "[Added Lines]",
          "1023:     if (server.bgsavechildpid != -1) {",
          "",
          "---------------"
        ],
        "src/redis.c||src/redis.c": [
          "File: src/redis.c -> src/redis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: #include <limits.h>",
          "51: #include <float.h>",
          "52: #include <math.h>",
          "54: #include <sys/resource.h>",
          "",
          "[Removed Lines]",
          "53: #include <pthread.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "659:             }",
          "660:             updateDictResizePolicy();",
          "661:         }",
          "678:          time_t now = time(NULL);",
          "",
          "[Removed Lines]",
          "662:     } else if (server.bgsavethread != (pthread_t) -1) {",
          "663:         if (server.bgsavethread != (pthread_t) -1) {",
          "664:             int state;",
          "666:             pthread_mutex_lock(&server.bgsavethread_mutex);",
          "667:             state = server.bgsavethread_state;",
          "668:             pthread_mutex_unlock(&server.bgsavethread_mutex);",
          "670:             if (state == REDIS_BGSAVE_THREAD_DONE_OK ||",
          "671:                 state == REDIS_BGSAVE_THREAD_DONE_ERR)",
          "672:             {",
          "673:                 backgroundSaveDoneHandler(",
          "674:                     (state == REDIS_BGSAVE_THREAD_DONE_OK) ? 0 : 1, 0);",
          "675:             }",
          "676:         }",
          "677:     } else if (!server.ds_enabled) {",
          "",
          "[Added Lines]",
          "661:     } else {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "713:     if (server.masterhost == NULL) activeExpireCycle();",
          "721:     if (!(loops % 10)) replicationCron();",
          "",
          "[Removed Lines]",
          "717:     if (server.ds_enabled) cacheCron();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "735:     listNode *ln;",
          "736:     redisClient *c;",
          "764:     while (listLength(server.unblocked_clients)) {",
          "765:         ln = listFirst(server.unblocked_clients);",
          "",
          "[Removed Lines]",
          "739:     if (server.ds_enabled && listLength(server.io_ready_clients)) {",
          "740:         listIter li;",
          "742:         listRewind(server.io_ready_clients,&li);",
          "743:         while((ln = listNext(&li))) {",
          "744:             c = ln->value;",
          "745:             struct redisCommand *cmd;",
          "748:             listDelNode(server.io_ready_clients,ln);",
          "749:             c->flags &= (~REDIS_IO_WAIT);",
          "750:             server.cache_blocked_clients--;",
          "751:             aeCreateFileEvent(server.el, c->fd, AE_READABLE,",
          "752:                 readQueryFromClient, c);",
          "753:             cmd = lookupCommand(c->argv[0]->ptr);",
          "754:             redisAssert(cmd != NULL);",
          "755:             call(c,cmd);",
          "756:             resetClient(c);",
          "758:             if (c->querybuf && sdslen(c->querybuf) > 0)",
          "759:                 processInputBuffer(c);",
          "760:         }",
          "761:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "870:     server.maxmemory = 0;",
          "871:     server.maxmemory_policy = REDIS_MAXMEMORY_VOLATILE_LRU;",
          "872:     server.maxmemory_samples = 3;",
          "877:     server.hash_max_zipmap_entries = REDIS_HASH_MAX_ZIPMAP_ENTRIES;",
          "878:     server.hash_max_zipmap_value = REDIS_HASH_MAX_ZIPMAP_VALUE;",
          "879:     server.list_max_ziplist_entries = REDIS_LIST_MAX_ZIPLIST_ENTRIES;",
          "",
          "[Removed Lines]",
          "873:     server.ds_enabled = 0;",
          "874:     server.ds_path = sdsnew(\"/tmp/redis.ds\");",
          "876:     server.cache_blocked_clients = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "882:     server.zset_max_ziplist_entries = REDIS_ZSET_MAX_ZIPLIST_ENTRIES;",
          "883:     server.zset_max_ziplist_value = REDIS_ZSET_MAX_ZIPLIST_VALUE;",
          "884:     server.shutdown_asap = 0;",
          "886:     server.cluster_enabled = 0;",
          "887:     server.cluster.configfile = zstrdup(\"nodes.conf\");",
          "",
          "[Removed Lines]",
          "885:     server.cache_flush_delay = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "930:             server.syslog_facility);",
          "931:     }",
          "934:     server.clients = listCreate();",
          "935:     server.slaves = listCreate();",
          "936:     server.monitors = listCreate();",
          "937:     server.unblocked_clients = listCreate();",
          "940:     createSharedObjects();",
          "941:     server.el = aeCreateEventLoop();",
          "",
          "[Removed Lines]",
          "933:     server.mainthread = pthread_self();",
          "938:     server.cache_io_queue = listCreate();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "965:         server.db[j].expires = dictCreate(&keyptrDictType,NULL);",
          "966:         server.db[j].blocking_keys = dictCreate(&keylistDictType,NULL);",
          "967:         server.db[j].watched_keys = dictCreate(&keylistDictType,NULL);",
          "973:         server.db[j].id = j;",
          "974:     }",
          "975:     server.pubsub_channels = dictCreate(&keylistDictType,NULL);",
          "",
          "[Removed Lines]",
          "968:         if (server.ds_enabled) {",
          "969:             server.db[j].io_keys = dictCreate(&keylistDictType,NULL);",
          "970:             server.db[j].io_negcache = dictCreate(&setDictType,NULL);",
          "971:             server.db[j].io_queued = dictCreate(&setDictType,NULL);",
          "972:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "979:     server.cronloops = 0;",
          "980:     server.bgsavechildpid = -1;",
          "981:     server.bgrewritechildpid = -1;",
          "984:     server.bgrewritebuf = sdsempty();",
          "985:     server.aofbuf = sdsempty();",
          "986:     server.lastsave = time(NULL);",
          "",
          "[Removed Lines]",
          "982:     server.bgsavethread_state = REDIS_BGSAVE_THREAD_UNACTIVE;",
          "983:     server.bgsavethread = (pthread_t) -1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1010:         }",
          "1011:     }",
          "1014:     if (server.cluster_enabled) clusterInit();",
          "1015:     srand(time(NULL)^getpid());",
          "1016: }",
          "",
          "[Removed Lines]",
          "1013:     if (server.ds_enabled) dsInit();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1188:         queueMultiCommand(c,cmd);",
          "1189:         addReply(c,shared.queued);",
          "1190:     } else {",
          "1193:         call(c,cmd);",
          "1194:     }",
          "1195:     return REDIS_OK;",
          "",
          "[Removed Lines]",
          "1191:         if (server.ds_enabled && blockClientOnSwappedKeys(c,cmd))",
          "1192:             return REDIS_ERR;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1207:         kill(server.bgsavechildpid,SIGKILL);",
          "1208:         rdbRemoveTempFile(server.bgsavechildpid);",
          "1209:     }",
          "1214:         aof_fsync(server.appendfd);",
          "1215:     } else if (server.saveparamslen > 0) {",
          "",
          "[Removed Lines]",
          "1210:     if (server.ds_enabled) {",
          "1212:     } else if (server.appendonly) {",
          "",
          "[Added Lines]",
          "1148:     if (server.appendonly) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1391:             server.loading,",
          "1392:             server.appendonly,",
          "1393:             server.dirty,",
          "1396:             server.lastsave,",
          "1397:             server.bgrewritechildpid != -1);",
          "",
          "[Removed Lines]",
          "1394:                 server.bgsavechildpid != -1 ||",
          "1395:                 server.bgsavethread != (pthread_t) -1,",
          "",
          "[Added Lines]",
          "1330:             server.bgsavechildpid != -1,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1438:         }",
          "1439:     }",
          "1471:     if (allsections || defsections || !strcasecmp(section,\"stats\")) {",
          "1472:         if (sections++) info = sdscat(info,\"\\r\\n\");",
          "",
          "[Removed Lines]",
          "1442:     if (allsections || defsections || !strcasecmp(section,\"diskstore\")) {",
          "1443:         if (sections++) info = sdscat(info,\"\\r\\n\");",
          "1444:         info = sdscatprintf(info,",
          "1445:             \"# Diskstore\\r\\n\"",
          "1446:             \"ds_enabled:%d\\r\\n\",",
          "1447:             server.ds_enabled != 0);",
          "1448:         if (server.ds_enabled) {",
          "1449:             lockThreadedIO();",
          "1450:             info = sdscatprintf(info,",
          "1451:                 \"cache_max_memory:%llu\\r\\n\"",
          "1452:                 \"cache_blocked_clients:%lu\\r\\n\"",
          "1453:                 \"cache_io_queue_len:%lu\\r\\n\"",
          "1454:                 \"cache_io_jobs_new:%lu\\r\\n\"",
          "1455:                 \"cache_io_jobs_processing:%lu\\r\\n\"",
          "1456:                 \"cache_io_jobs_processed:%lu\\r\\n\"",
          "1457:                 \"cache_io_ready_clients:%lu\\r\\n\"",
          "1458:                 ,(unsigned long long) server.cache_max_memory,",
          "1459:                 (unsigned long) server.cache_blocked_clients,",
          "1460:                 (unsigned long) listLength(server.cache_io_queue),",
          "1461:                 (unsigned long) listLength(server.io_newjobs),",
          "1462:                 (unsigned long) listLength(server.io_processing),",
          "1463:                 (unsigned long) listLength(server.io_processed),",
          "1464:                 (unsigned long) listLength(server.io_ready_clients)",
          "1465:             );",
          "1466:             unlockThreadedIO();",
          "1467:         }",
          "1468:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1824:     linuxOvercommitMemoryWarning();",
          "1825: #endif",
          "1826:     start = ustime();",
          "1830:         if (loadAppendOnlyFile(server.appendfilename) == REDIS_OK)",
          "1831:             redisLog(REDIS_NOTICE,\"DB loaded from append only file: %.3f seconds\",(float)(ustime()-start)/1000000);",
          "1832:     } else {",
          "",
          "[Removed Lines]",
          "1827:     if (server.ds_enabled) {",
          "1828:         redisLog(REDIS_NOTICE,\"DB not loaded (running with disk back end)\");",
          "1829:     } else if (server.appendonly) {",
          "",
          "[Added Lines]",
          "1733:     if (server.appendonly) {",
          "",
          "---------------"
        ],
        "src/redis.h||src/redis.h": [
          "File: src/redis.h -> src/redis.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "149: #define REDIS_UNBLOCKED 256 /* This client was unblocked and is stored in",
          "",
          "[Removed Lines]",
          "128: #define REDIS_IO_LOAD 1",
          "129: #define REDIS_IO_SAVE 2",
          "130: #define REDIS_IO_LOADINPROG 4",
          "131: #define REDIS_IO_SAVEINPROG 8",
          "134: #define REDIS_IO_ONLYLOADS 1",
          "135: #define REDIS_IO_ASAP 2",
          "137: #define REDIS_MAX_COMPLETED_JOBS_PROCESSED 1",
          "138: #define REDIS_THREAD_STACK_SIZE (1024*1024*4)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "222: #define REDIS_MAXMEMORY_ALLKEYS_RANDOM 4",
          "223: #define REDIS_MAXMEMORY_NO_EVICTION 5",
          "232: #define redisAssert(_e) ((_e)?(void)0 : (_redisAssert(#_e,__FILE__,__LINE__),_exit(1)))",
          "233: #define redisPanic(_e) _redisPanic(#_e,__FILE__,__LINE__),_exit(1)",
          "",
          "[Removed Lines]",
          "226: #define REDIS_BGSAVE_THREAD_UNACTIVE 0",
          "227: #define REDIS_BGSAVE_THREAD_ACTIVE 1",
          "228: #define REDIS_BGSAVE_THREAD_DONE_OK 2",
          "229: #define REDIS_BGSAVE_THREAD_DONE_ERR 3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "517: struct redisServer {",
          "520:     redisDb *db;",
          "522:     aeEventLoop *el;",
          "",
          "[Removed Lines]",
          "519:     pthread_t mainthread;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "574:     char *pidfile;",
          "575:     pid_t bgsavechildpid;",
          "576:     pid_t bgrewritechildpid;",
          "582:     struct saveparam *saveparams;",
          "",
          "[Removed Lines]",
          "577:     int bgsavethread_state;",
          "578:     pthread_mutex_t bgsavethread_mutex;",
          "579:     pthread_t bgsavethread;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "612:     int maxmemory_samples;",
          "614:     unsigned int bpop_blocked_clients;",
          "621:     int sort_desc;",
          "622:     int sort_alpha;",
          "623:     int sort_bypattern;",
          "629:     size_t hash_max_zipmap_entries;",
          "630:     size_t hash_max_zipmap_value;",
          "",
          "[Removed Lines]",
          "615:     unsigned int cache_blocked_clients;",
          "627:     unsigned long long cache_max_memory;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "709:     robj *pattern;",
          "710: } redisSortOperation;",
          "734: typedef struct {",
          "735:     robj *subject;",
          "",
          "[Removed Lines]",
          "713: #define REDIS_IOJOB_LOAD 0",
          "714: #define REDIS_IOJOB_SAVE 1",
          "716: typedef struct iojob {",
          "720:     robj *val;  /* the value to swap for REDIS_IOJOB_SAVE, otherwise this",
          "723: } iojob;",
          "726: typedef struct ioop {",
          "727:     int type;",
          "728:     redisDb *db;",
          "729:     robj *key;",
          "731: } ioop;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "973: void populateCommandTable(void);",
          "974: void resetCommandTableStats(void);",
          "1011: robj *setTypeCreate(robj *value);",
          "1012: int setTypeAdd(robj *subject, robj *value);",
          "",
          "[Removed Lines]",
          "977: int dsOpen(void);",
          "978: int dsClose(void);",
          "979: int dsSet(redisDb *db, robj *key, robj *val, time_t expire);",
          "980: robj *dsGet(redisDb *db, robj *key, time_t *expire);",
          "981: int dsDel(redisDb *db, robj *key);",
          "982: int dsExists(redisDb *db, robj *key);",
          "983: void dsFlushDb(int dbid);",
          "984: int dsRdbSaveBackground(char *filename);",
          "985: int dsRdbSave(char *filename);",
          "988: void dsInit(void);",
          "989: void vmThreadedIOCompletedJob(aeEventLoop *el, int fd, void *privdata, int mask);",
          "990: void lockThreadedIO(void);",
          "991: void unlockThreadedIO(void);",
          "992: void freeIOJob(iojob *j);",
          "993: void queueIOJob(iojob *j);",
          "994: void waitEmptyIOJobsQueue(void);",
          "995: void processAllPendingIOJobs(void);",
          "996: int blockClientOnSwappedKeys(redisClient *c, struct redisCommand *cmd);",
          "997: int dontWaitForSwappedKey(redisClient *c, robj *key);",
          "998: void handleClientsBlockedOnSwappedKey(redisDb *db, robj *key);",
          "999: int cacheFreeOneEntry(void);",
          "1000: void cacheScheduleIOAddFlag(redisDb *db, robj *key, long flag);",
          "1001: void cacheScheduleIODelFlag(redisDb *db, robj *key, long flag);",
          "1002: int cacheScheduleIOGetFlags(redisDb *db, robj *key);",
          "1003: void cacheScheduleIO(redisDb *db, robj *key, int type);",
          "1004: void cacheCron(void);",
          "1005: int cacheKeyMayExist(redisDb *db, robj *key);",
          "1006: void cacheSetKeyMayExist(redisDb *db, robj *key);",
          "1007: void cacheSetKeyDoesNotExist(redisDb *db, robj *key);",
          "1008: void cacheForcePointInTime(void);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/assets/default.conf||tests/assets/default.conf": [
          "File: tests/assets/default.conf -> tests/assets/default.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "291: # \"no\" that is the safest pick from the point of view of durability.",
          "292: no-appendfsync-on-rewrite no",
          "320: ############################### ADVANCED CONFIG ###############################",
          "322: # Hashes are encoded in a special way (much more memory efficient) when they",
          "",
          "[Removed Lines]",
          "294: #################################### DISK STORE ###############################",
          "296: # When disk store is active Redis works as an on-disk database, where memory",
          "297: # is only used as a object cache.",
          "298: #",
          "299: # This mode is good for datasets that are bigger than memory, and in general",
          "300: # when you want to trade speed for:",
          "301: #",
          "302: #  - less memory used",
          "303: #  - immediate server restart",
          "304: #  - per key durability, without need for backgrond savig",
          "305: #",
          "306: # On the other hand, with disk store enabled MULTI/EXEC are no longer",
          "307: # transactional from the point of view of the persistence on disk, that is,",
          "308: # Redis transactions will still guarantee that commands are either processed",
          "309: # all or nothing, but there is no guarantee that all the keys are flushed",
          "310: # on disk in an atomic way.",
          "311: #",
          "312: # Of course with disk store enabled Redis is not as fast as it is when",
          "313: # working with just the memory back end.",
          "315: diskstore-enabled no",
          "316: diskstore-path redis.ds",
          "317: cache-max-memory 0",
          "318: cache-flush-delay 0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7d47ecd543ed41db70396bc3866eac872a31774d",
      "candidate_info": {
        "commit_hash": "7d47ecd543ed41db70396bc3866eac872a31774d",
        "repo": "antirez/redis",
        "commit_url": "https://github.com/antirez/redis/commit/7d47ecd543ed41db70396bc3866eac872a31774d",
        "files": [
          "src/redis.c",
          "src/redis.h"
        ],
        "message": "Function to compute RSS memory usage in a fast way, suitable to be called inside keys eviction loops",
        "before_after_code_files": [
          "src/redis.c||src/redis.c",
          "src/redis.h||src/redis.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/redis.c||src/redis.c",
            "src/redis.h||src/redis.h"
          ],
          "candidate": [
            "src/redis.c||src/redis.c",
            "src/redis.h||src/redis.h"
          ]
        }
      },
      "candidate_diff": {
        "src/redis.c||src/redis.c": [
          "File: src/redis.c -> src/redis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "621:             if (server.appendonly) rewriteAppendOnlyFileBackground();",
          "622:         }",
          "623:     }",
          "624:     return 100;",
          "625: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "626:     if (!(loops % 10)) server.fragmentation = zmalloc_get_fragmentation_ratio();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "735:     server.requirepass = NULL;",
          "736:     server.rdbcompression = 1;",
          "737:     server.activerehashing = 1;",
          "738:     server.maxclients = 0;",
          "739:     server.blpop_blocked_clients = 0;",
          "740:     server.maxmemory = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "741:     server.fragmentation = 1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1075:         \"blocked_clients:%d\\r\\n\"",
          "1076:         \"used_memory:%zu\\r\\n\"",
          "1077:         \"used_memory_human:%s\\r\\n\"",
          "1078:         \"mem_fragmentation_ratio:%.2f\\r\\n\"",
          "1079:         \"use_tcmalloc:%d\\r\\n\"",
          "1080:         \"changes_since_last_save:%lld\\r\\n\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1082:         \"used_memory_rss:%zu\\r\\n\"",
          "1083:         \"used_memory_estimated_rss:%zu\\r\\n\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1110:         server.blpop_blocked_clients,",
          "1111:         zmalloc_used_memory(),",
          "1112:         hmem,",
          "1113:         zmalloc_get_fragmentation_ratio(),",
          "1114: #ifdef USE_TCMALLOC",
          "1115:         1,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1119:         zmalloc_get_rss(),",
          "1120:         redisEstimateRSS(),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1229:     }",
          "1230: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1260: size_t redisEstimateRSS(void) {",
          "1261:     size_t used = zmalloc_used_memory();",
          "1262:     float maxfrag;",
          "1264:     if (server.fragmentation < 1) return used;",
          "1265:     maxfrag = (float)SIZE_MAX / used;",
          "1269:     if (maxfrag < server.fragmentation) return SIZE_MAX;",
          "1271:     return (size_t)((used * server.fragmentation));",
          "1272: }",
          "",
          "---------------"
        ],
        "src/redis.h||src/redis.h": [
          "File: src/redis.h -> src/redis.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "397:     char *requirepass;",
          "398:     int rdbcompression;",
          "399:     int activerehashing;",
          "401:     int isslave;",
          "402:     char *masterauth;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "401:     float fragmentation;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "751: void updateDictResizePolicy(void);",
          "752: int htNeedsResize(dict *dict);",
          "753: void oom(const char *msg);",
          "756: void vmInit(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "756: size_t redisEstimateRSS(void);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ca734d17ad9b7ea97a87bd048ad1c1e253ef67a6",
      "candidate_info": {
        "commit_hash": "ca734d17ad9b7ea97a87bd048ad1c1e253ef67a6",
        "repo": "antirez/redis",
        "commit_url": "https://github.com/antirez/redis/commit/ca734d17ad9b7ea97a87bd048ad1c1e253ef67a6",
        "files": [
          "src/aof.c",
          "src/rdb.c",
          "src/redis.c"
        ],
        "message": "Revert \"Now maxmemory, VM, and everything else uses the fast RSS memory used estimation instead of raw memory reported by zmalloc(). This means that setting maxmemory to 2GB will really have the effect of using up to 2GB of memory.\"\n\nThis reverts commit a3e60027e7d4419971406c6da7d6e8accbcaf9b0.",
        "before_after_code_files": [
          "src/aof.c||src/aof.c",
          "src/rdb.c||src/rdb.c",
          "src/redis.c||src/redis.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/redis.c||src/redis.c"
          ],
          "candidate": [
            "src/redis.c||src/redis.c"
          ]
        }
      },
      "candidate_diff": {
        "src/aof.c||src/aof.c": [
          "File: src/aof.c -> src/aof.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "282:         force_swapout = 0;",
          "284:             force_swapout = 1;",
          "286:         if (server.vm_enabled && force_swapout) {",
          "288:                 if (vmSwapOneObjectBlocking() == REDIS_ERR) break;",
          "289:             }",
          "290:         }",
          "",
          "[Removed Lines]",
          "283:         if ((redisEstimateRSS() - server.vm_max_memory) > 1024*1024*32)",
          "287:             while (redisEstimateRSS() > server.vm_max_memory) {",
          "",
          "[Added Lines]",
          "283:         if ((zmalloc_used_memory() - server.vm_max_memory) > 1024*1024*32)",
          "287:             while (zmalloc_used_memory() > server.vm_max_memory) {",
          "",
          "---------------"
        ],
        "src/rdb.c||src/rdb.c": [
          "File: src/rdb.c -> src/rdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "887:         force_swapout = 0;",
          "889:             force_swapout = 1;",
          "893:         if (!swap_all_values && server.vm_enabled && force_swapout) {",
          "895:                 if (vmSwapOneObjectBlocking() == REDIS_ERR) break;",
          "896:             }",
          "899:         }",
          "900:     }",
          "",
          "[Removed Lines]",
          "888:         if ((redisEstimateRSS() - server.vm_max_memory) > 1024*1024*32)",
          "894:             while (redisEstimateRSS() > server.vm_max_memory) {",
          "897:             if (redisEstimateRSS() > server.vm_max_memory)",
          "",
          "[Added Lines]",
          "888:         if ((zmalloc_used_memory() - server.vm_max_memory) > 1024*1024*32)",
          "894:             while (zmalloc_used_memory() > server.vm_max_memory) {",
          "897:             if (zmalloc_used_memory() > server.vm_max_memory)",
          "",
          "---------------"
        ],
        "src/redis.c||src/redis.c": [
          "File: src/redis.c -> src/redis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "545:         redisLog(REDIS_VERBOSE,\"%d clients connected (%d slaves), %zu bytes in use\",",
          "546:             listLength(server.clients)-listLength(server.slaves),",
          "547:             listLength(server.slaves),",
          "549:     }",
          "",
          "[Removed Lines]",
          "548:             redisEstimateRSS());",
          "",
          "[Added Lines]",
          "548:             zmalloc_used_memory());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "592:     if (vmCanSwapOut()) {",
          "594:             int retval;",
          "596:             if (tryFreeOneObjectFromFreelist() == REDIS_OK) continue;",
          "",
          "[Removed Lines]",
          "593:         while (server.vm_enabled && redisEstimateRSS() > server.vm_max_memory) {",
          "",
          "[Added Lines]",
          "593:         while (server.vm_enabled && zmalloc_used_memory() >",
          "594:                 server.vm_max_memory)",
          "595:         {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "598:                         vmSwapOneObjectBlocking() :",
          "599:                         vmSwapOneObjectThreaded();",
          "600:             if (retval == REDIS_ERR && !(loops % 300) &&",
          "602:                 (server.vm_max_memory+server.vm_max_memory/10))",
          "603:             {",
          "604:                 redisLog(REDIS_WARNING,\"WARNING: vm-max-memory limit exceeded by more than 10%% but unable to swap more objects out!\");",
          "",
          "[Removed Lines]",
          "601:                 redisEstimateRSS() >",
          "",
          "[Added Lines]",
          "603:                 zmalloc_used_memory() >",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "939:     if (server.maxmemory) freeMemoryIfNeeded();",
          "940:     if (server.maxmemory && (cmd->flags & REDIS_CMD_DENYOOM) &&",
          "942:     {",
          "943:         addReplyError(c,\"command not allowed when used memory > 'maxmemory'\");",
          "944:         return REDIS_OK;",
          "",
          "[Removed Lines]",
          "941:         redisEstimateRSS() > server.maxmemory)",
          "",
          "[Added Lines]",
          "943:         zmalloc_used_memory() > server.maxmemory)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1057:     getrusage(RUSAGE_SELF, &self_ru);",
          "1058:     getrusage(RUSAGE_CHILDREN, &c_ru);",
          "1061:     info = sdscatprintf(sdsempty(),",
          "1062:         \"redis_version:%s\\r\\n\"",
          "1063:         \"redis_git_sha1:%s\\r\\n\"",
          "",
          "[Removed Lines]",
          "1060:     bytesToHuman(hmem,redisEstimateRSS());",
          "",
          "[Added Lines]",
          "1062:     bytesToHuman(hmem,zmalloc_used_memory());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1077:         \"blocked_clients:%d\\r\\n\"",
          "1078:         \"used_memory:%zu\\r\\n\"",
          "1079:         \"used_memory_human:%s\\r\\n\"",
          "1082:         \"mem_fragmentation_ratio:%.2f\\r\\n\"",
          "1083:         \"use_tcmalloc:%d\\r\\n\"",
          "1084:         \"changes_since_last_save:%lld\\r\\n\"",
          "",
          "[Removed Lines]",
          "1080:         \"used_memory_zmalloc:%zu\\r\\n\"",
          "1081:         \"used_memory_raw_rss:%zu\\r\\n\"",
          "",
          "[Added Lines]",
          "1082:         \"used_memory_rss:%zu\\r\\n\"",
          "1083:         \"used_memory_estimated_rss:%zu\\r\\n\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1112:         listLength(server.clients)-listLength(server.slaves),",
          "1113:         listLength(server.slaves),",
          "1114:         server.blpop_blocked_clients,",
          "1117:         zmalloc_used_memory(),",
          "1118:         zmalloc_get_rss(),",
          "1119:         zmalloc_get_fragmentation_ratio(),",
          "1120: #ifdef USE_TCMALLOC",
          "1121:         1,",
          "",
          "[Removed Lines]",
          "1115:         redisEstimateRSS(),",
          "1116:         hmem,",
          "",
          "[Added Lines]",
          "1118:         hmem,",
          "1120:         redisEstimateRSS(),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1283: void freeMemoryIfNeeded(void) {",
          "1287:         int j, k, freed = 0;",
          "",
          "[Removed Lines]",
          "1286:     while (server.maxmemory && redisEstimateRSS() > server.maxmemory) {",
          "",
          "[Added Lines]",
          "1288:     while (server.maxmemory && zmalloc_used_memory() > server.maxmemory) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b5b22da8e68fef52cd9b535871584dd7afe95aef",
      "candidate_info": {
        "commit_hash": "b5b22da8e68fef52cd9b535871584dd7afe95aef",
        "repo": "antirez/redis",
        "commit_url": "https://github.com/antirez/redis/commit/b5b22da8e68fef52cd9b535871584dd7afe95aef",
        "files": [
          "src/redis.c",
          "src/redis.h"
        ],
        "message": "Revert \"Function to compute RSS memory usage in a fast way, suitable to be called inside keys eviction loops\"\n\nThis reverts commit 7d47ecd543ed41db70396bc3866eac872a31774d.",
        "before_after_code_files": [
          "src/redis.c||src/redis.c",
          "src/redis.h||src/redis.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/redis.c||src/redis.c",
            "src/redis.h||src/redis.h"
          ],
          "candidate": [
            "src/redis.c||src/redis.c",
            "src/redis.h||src/redis.h"
          ]
        }
      },
      "candidate_diff": {
        "src/redis.c||src/redis.c": [
          "File: src/redis.c -> src/redis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "621:             if (server.appendonly) rewriteAppendOnlyFileBackground();",
          "622:         }",
          "623:     }",
          "627:     return 100;",
          "628: }",
          "",
          "[Removed Lines]",
          "626:     if (!(loops % 10)) server.fragmentation = zmalloc_get_fragmentation_ratio();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "738:     server.requirepass = NULL;",
          "739:     server.rdbcompression = 1;",
          "740:     server.activerehashing = 1;",
          "742:     server.maxclients = 0;",
          "743:     server.blpop_blocked_clients = 0;",
          "744:     server.maxmemory = 0;",
          "",
          "[Removed Lines]",
          "741:     server.fragmentation = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1079:         \"blocked_clients:%d\\r\\n\"",
          "1080:         \"used_memory:%zu\\r\\n\"",
          "1081:         \"used_memory_human:%s\\r\\n\"",
          "1084:         \"mem_fragmentation_ratio:%.2f\\r\\n\"",
          "1085:         \"use_tcmalloc:%d\\r\\n\"",
          "1086:         \"changes_since_last_save:%lld\\r\\n\"",
          "",
          "[Removed Lines]",
          "1082:         \"used_memory_rss:%zu\\r\\n\"",
          "1083:         \"used_memory_estimated_rss:%zu\\r\\n\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1116:         server.blpop_blocked_clients,",
          "1117:         zmalloc_used_memory(),",
          "1118:         hmem,",
          "1121:         zmalloc_get_fragmentation_ratio(),",
          "1122: #ifdef USE_TCMALLOC",
          "1123:         1,",
          "",
          "[Removed Lines]",
          "1119:         zmalloc_get_rss(),",
          "1120:         redisEstimateRSS(),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1237:     }",
          "1238: }",
          "",
          "[Removed Lines]",
          "1260: size_t redisEstimateRSS(void) {",
          "1261:     size_t used = zmalloc_used_memory();",
          "1262:     float maxfrag;",
          "1264:     if (server.fragmentation < 1) return used;",
          "1265:     maxfrag = (float)SIZE_MAX / used;",
          "1269:     if (maxfrag < server.fragmentation) return SIZE_MAX;",
          "1271:     return (size_t)((used * server.fragmentation));",
          "1272: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/redis.h||src/redis.h": [
          "File: src/redis.h -> src/redis.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "397:     char *requirepass;",
          "398:     int rdbcompression;",
          "399:     int activerehashing;",
          "403:     int isslave;",
          "404:     char *masterauth;",
          "",
          "[Removed Lines]",
          "401:     float fragmentation;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "753: void updateDictResizePolicy(void);",
          "754: int htNeedsResize(dict *dict);",
          "755: void oom(const char *msg);",
          "759: void vmInit(void);",
          "",
          "[Removed Lines]",
          "756: size_t redisEstimateRSS(void);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}