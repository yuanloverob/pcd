{
  "cve_id": "CVE-2018-18226",
  "cve_desc": "In Wireshark 2.6.0 to 2.6.3, the Steam IHS Discovery dissector could consume system memory. This was addressed in epan/dissectors/packet-steam-ihs-discovery.c by changing the memory-management approach.",
  "repo": "wireshark/wireshark",
  "patch_hash": "f3986c24728f03a346a10388fd6c15ea9ae16d41",
  "patch_info": {
    "commit_hash": "f3986c24728f03a346a10388fd6c15ea9ae16d41",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/f3986c24728f03a346a10388fd6c15ea9ae16d41",
    "files": [
      "epan/dissectors/packet-steam-ihs-discovery.c"
    ],
    "message": "steam-ihs: fix memleak on exception\n\nWhen protobuf_dissect_unknown_field throws an exception,\nsteamdiscover_dissect_body_status will leak memory as\nwmem_destroy_allocator is not called. Capture fuzz-2018-10-06-3104.pcap\nfrom the linked bug leaks 64kiB memory in each frame 14 and 36.\n\nBug: 15171\nChange-Id: I930d0738fde61799ab4ef2310f8ff11c1bcb032b\nFixes: v2.5.1rc0-130-g7ae954c7ac (\"steam-ihs: Add dissector for the Steam IHS Discovery Protocol\")\nReviewed-on: https://code.wireshark.org/review/30098\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-steam-ihs-discovery.c||epan/dissectors/packet-steam-ihs-discovery.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-steam-ihs-discovery.c||epan/dissectors/packet-steam-ihs-discovery.c": [
      "File: epan/dissectors/packet-steam-ihs-discovery.c -> epan/dissectors/packet-steam-ihs-discovery.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "491:     protobuf_desc_t pb = { tvb, offset, bytes_left };",
      "492:     protobuf_desc_t pb2 = { tvb, 0, 0 };",
      "493:     protobuf_tag_t tag = { 0, 0, 0 };",
      "495:     guint8 *hostname;",
      "497:     nstime_t timestamp;",
      "498:     proto_tree *user_tree;",
      "499:     proto_item *user_it;",
      "",
      "[Removed Lines]",
      "494:     wmem_allocator_t* strpool;",
      "496:     strpool = wmem_allocator_new(WMEM_ALLOCATOR_SIMPLE);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "522:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
      "523:                 proto_tree_add_item(tree, hf_steam_ihs_discovery_body_status_hostname, pb.tvb,",
      "524:                         pb.offset+len, (gint)value, ENC_UTF_8|ENC_NA);",
      "526:                 if(hostname && strlen(hostname)) {",
      "527:                     col_add_fstr(pinfo->cinfo, COL_INFO, \"%s from %s\", hf_steam_ihs_discovery_header_msgtype_strings[STEAMDISCOVER_MSGTYPE_CLIENTBROADCASTMSGSTATUS].strptr, hostname);",
      "528:                 }",
      "",
      "[Removed Lines]",
      "525:                 hostname = tvb_get_string_enc(strpool, pb.tvb, pb.offset+len, (gint)value, ENC_UTF_8);",
      "",
      "[Added Lines]",
      "523:                 hostname = tvb_get_string_enc(wmem_packet_scope(), pb.tvb, pb.offset+len, (gint)value, ENC_UTF_8);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "615:         }",
      "616:         protobuf_seek_forward(&pb, len);",
      "617:     }",
      "619: }",
      "",
      "[Removed Lines]",
      "618:     wmem_destroy_allocator(strpool);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "648:     gint64 value;",
      "649:     protobuf_desc_t pb = { tvb, offset, bytes_left };",
      "650:     protobuf_tag_t tag = { 0, 0, 0 };",
      "653:     guint8* devicename;",
      "654:     while (protobuf_iter_next(&pb, &tag)) {",
      "655:         switch(tag.field_number) {",
      "",
      "[Removed Lines]",
      "651:     wmem_allocator_t *strpool;",
      "652:     strpool = wmem_allocator_new(WMEM_ALLOCATOR_SIMPLE);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "665:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
      "666:                 proto_tree_add_item(tree, hf_steam_ihs_discovery_body_authrequest_devicename, pb.tvb,",
      "667:                         pb.offset+len, (gint)value, ENC_UTF_8|ENC_NA);",
      "669:                 if (devicename && strlen(devicename)) {",
      "670:                     col_append_fstr(pinfo->cinfo, COL_INFO, \" from %s\", devicename);",
      "671:                 }",
      "",
      "[Removed Lines]",
      "668:                 devicename = tvb_get_string_enc(strpool, pb.tvb, pb.offset+len, (gint)value, ENC_UTF_8);",
      "",
      "[Added Lines]",
      "663:                 devicename = tvb_get_string_enc(wmem_packet_scope(), pb.tvb, pb.offset+len, (gint)value, ENC_UTF_8);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "684:         }",
      "685:         protobuf_seek_forward(&pb, len);",
      "686:     }",
      "688: }",
      "",
      "[Removed Lines]",
      "687:     wmem_destroy_allocator(strpool);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6e920ddc3cad2886ef07ca1a8e50e2a5c50986f7",
      "candidate_info": {
        "commit_hash": "6e920ddc3cad2886ef07ca1a8e50e2a5c50986f7",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/6e920ddc3cad2886ef07ca1a8e50e2a5c50986f7",
        "files": [
          "epan/dissectors/packet-steam-ihs-discovery.c"
        ],
        "message": "steam-ihs: fix memleak on exception\n\nWhen protobuf_dissect_unknown_field throws an exception,\nsteamdiscover_dissect_body_status will leak memory as\nwmem_destroy_allocator is not called. Capture fuzz-2018-10-06-3104.pcap\nfrom the linked bug leaks 64kiB memory in each frame 14 and 36.\n\nBug: 15171\nChange-Id: I930d0738fde61799ab4ef2310f8ff11c1bcb032b\nFixes: v2.5.1rc0-130-g7ae954c7ac (\"steam-ihs: Add dissector for the Steam IHS Discovery Protocol\")\nReviewed-on: https://code.wireshark.org/review/30098\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit f3986c24728f03a346a10388fd6c15ea9ae16d41)\nReviewed-on: https://code.wireshark.org/review/30108\nReviewed-by: Peter Wu <peter@lekensteyn.nl>",
        "before_after_code_files": [
          "epan/dissectors/packet-steam-ihs-discovery.c||epan/dissectors/packet-steam-ihs-discovery.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-steam-ihs-discovery.c||epan/dissectors/packet-steam-ihs-discovery.c"
          ],
          "candidate": [
            "epan/dissectors/packet-steam-ihs-discovery.c||epan/dissectors/packet-steam-ihs-discovery.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-steam-ihs-discovery.c||epan/dissectors/packet-steam-ihs-discovery.c": [
          "File: epan/dissectors/packet-steam-ihs-discovery.c -> epan/dissectors/packet-steam-ihs-discovery.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "491:     protobuf_desc_t pb = { tvb, offset, bytes_left };",
          "492:     protobuf_desc_t pb2 = { tvb, 0, 0 };",
          "493:     protobuf_tag_t tag = { 0, 0, 0 };",
          "495:     guint8 *hostname;",
          "497:     nstime_t timestamp;",
          "498:     proto_tree *user_tree;",
          "499:     proto_item *user_it;",
          "",
          "[Removed Lines]",
          "494:     wmem_allocator_t* strpool;",
          "496:     strpool = wmem_allocator_new(WMEM_ALLOCATOR_SIMPLE);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "522:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "523:                 proto_tree_add_item(tree, hf_steam_ihs_discovery_body_status_hostname, pb.tvb,",
          "524:                         pb.offset+len, (gint)value, ENC_UTF_8|ENC_NA);",
          "526:                 if(hostname && strlen(hostname)) {",
          "527:                     col_add_fstr(pinfo->cinfo, COL_INFO, \"%s from %s\", hf_steam_ihs_discovery_header_msgtype_strings[STEAMDISCOVER_MSGTYPE_CLIENTBROADCASTMSGSTATUS].strptr, hostname);",
          "528:                 }",
          "",
          "[Removed Lines]",
          "525:                 hostname = tvb_get_string_enc(strpool, pb.tvb, pb.offset+len, (gint)value, ENC_UTF_8);",
          "",
          "[Added Lines]",
          "523:                 hostname = tvb_get_string_enc(wmem_packet_scope(), pb.tvb, pb.offset+len, (gint)value, ENC_UTF_8);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "615:         }",
          "616:         protobuf_seek_forward(&pb, len);",
          "617:     }",
          "619: }",
          "",
          "[Removed Lines]",
          "618:     wmem_destroy_allocator(strpool);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "648:     gint64 value;",
          "649:     protobuf_desc_t pb = { tvb, offset, bytes_left };",
          "650:     protobuf_tag_t tag = { 0, 0, 0 };",
          "653:     guint8* devicename;",
          "654:     while (protobuf_iter_next(&pb, &tag)) {",
          "655:         switch(tag.field_number) {",
          "",
          "[Removed Lines]",
          "651:     wmem_allocator_t *strpool;",
          "652:     strpool = wmem_allocator_new(WMEM_ALLOCATOR_SIMPLE);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "665:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "666:                 proto_tree_add_item(tree, hf_steam_ihs_discovery_body_authrequest_devicename, pb.tvb,",
          "667:                         pb.offset+len, (gint)value, ENC_UTF_8|ENC_NA);",
          "669:                 if (devicename && strlen(devicename)) {",
          "670:                     col_append_fstr(pinfo->cinfo, COL_INFO, \" from %s\", devicename);",
          "671:                 }",
          "",
          "[Removed Lines]",
          "668:                 devicename = tvb_get_string_enc(strpool, pb.tvb, pb.offset+len, (gint)value, ENC_UTF_8);",
          "",
          "[Added Lines]",
          "663:                 devicename = tvb_get_string_enc(wmem_packet_scope(), pb.tvb, pb.offset+len, (gint)value, ENC_UTF_8);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "684:         }",
          "685:         protobuf_seek_forward(&pb, len);",
          "686:     }",
          "688: }",
          "",
          "[Removed Lines]",
          "687:     wmem_destroy_allocator(strpool);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7ae954c7ac934ea5748b6d65f1c04e8c9b90e27f",
      "candidate_info": {
        "commit_hash": "7ae954c7ac934ea5748b6d65f1c04e8c9b90e27f",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/7ae954c7ac934ea5748b6d65f1c04e8c9b90e27f",
        "files": [
          "docbook/release-notes.asciidoc",
          "epan/dissectors/CMakeLists.txt",
          "epan/dissectors/Makefile.am",
          "epan/dissectors/packet-steam-ihs-discovery.c"
        ],
        "message": "steam-ihs: Add dissector for the Steam IHS Discovery Protocol\n\nThis adds a dissector for the Steam In-Home Streaming\nDiscovery Protocol by Valve Software.\n\nUseful documentation can be found at:\nhttps://codingrange.com/blog/steam-in-home-streaming-discovery-protocol\n\nChange-Id: I26a79e201cfb0aad0ca702ac962e1e7b1b541517\nReviewed-on: https://code.wireshark.org/review/23615\nPetri-Dish: Alexis La Goutte <alexis.lagoutte@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "docbook/release-notes.asciidoc||docbook/release-notes.asciidoc",
          "epan/dissectors/Makefile.am||epan/dissectors/Makefile.am",
          "epan/dissectors/packet-steam-ihs-discovery.c||epan/dissectors/packet-steam-ihs-discovery.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-steam-ihs-discovery.c||epan/dissectors/packet-steam-ihs-discovery.c"
          ],
          "candidate": [
            "epan/dissectors/packet-steam-ihs-discovery.c||epan/dissectors/packet-steam-ihs-discovery.c"
          ]
        }
      },
      "candidate_diff": {
        "docbook/release-notes.asciidoc||docbook/release-notes.asciidoc": [
          "File: docbook/release-notes.asciidoc -> docbook/release-notes.asciidoc",
          "--- Hunk 1 ---",
          "[Context before]",
          "103: QUIC (IETF)",
          "104: SolarEdge monitoring protocol",
          "105: Session Multiplex Protocol",
          "106: Tibia",
          "107: TWAMP and OWAMP",
          "108: Wi-Fi Device Provisioning Protocol",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106: Steam In-Home Streaming Discovery Protocol",
          "",
          "---------------"
        ],
        "epan/dissectors/Makefile.am||epan/dissectors/Makefile.am": [
          "File: epan/dissectors/Makefile.am -> epan/dissectors/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "1292:  packet-starteam.c \\",
          "1293:  packet-stat-notify.c \\",
          "1294:  packet-stat.c  \\",
          "1295:  packet-stt.c  \\",
          "1296:  packet-stun.c  \\",
          "1297:  packet-sua.c  \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1295:  packet-steam-ihs-discovery.c \\",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-steam-ihs-discovery.c||epan/dissectors/packet-steam-ihs-discovery.c": [
          "File: epan/dissectors/packet-steam-ihs-discovery.c -> epan/dissectors/packet-steam-ihs-discovery.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #include <config.h>",
          "41: void proto_reg_handoff_steam_ihs_discovery(void);",
          "42: void proto_register_steam_ihs_discovery(void);",
          "44: static int proto_steam_ihs_discovery = -1;",
          "46: static int hf_steam_ihs_discovery_signature = -1;",
          "47: static int hf_steam_ihs_discovery_header_length = -1;",
          "48: static int hf_steam_ihs_discovery_header_clientid = -1;",
          "49: static int hf_steam_ihs_discovery_header_msgtype = -1;",
          "50: static int hf_steam_ihs_discovery_header_instanceid = -1;",
          "51: static int hf_steam_ihs_discovery_body_length = -1;",
          "52: static int hf_steam_ihs_discovery_body_discovery_seqnum = -1;",
          "53: static int hf_steam_ihs_discovery_body_discovery_clientids = -1;",
          "54: static int hf_steam_ihs_discovery_body_status_version = -1;",
          "55: static int hf_steam_ihs_discovery_body_status_minversion = -1;",
          "56: static int hf_steam_ihs_discovery_body_status_connectport = -1;",
          "57: static int hf_steam_ihs_discovery_body_status_hostname = -1;",
          "58: static int hf_steam_ihs_discovery_body_status_enabledservices = -1;",
          "59: static int hf_steam_ihs_discovery_body_status_ostype = -1;",
          "60: static int hf_steam_ihs_discovery_body_status_is64bit = -1;",
          "61: static int hf_steam_ihs_discovery_body_status_euniverse = -1;",
          "62: static int hf_steam_ihs_discovery_body_status_timestamp = -1;",
          "63: static int hf_steam_ihs_discovery_body_status_screenlocked = -1;",
          "64: static int hf_steam_ihs_discovery_body_status_gamesrunning = -1;",
          "65: static int hf_steam_ihs_discovery_body_status_macaddresses = -1;",
          "66: static int hf_steam_ihs_discovery_body_status_user_steamid = -1;",
          "67: static int hf_steam_ihs_discovery_body_status_user_authkeyid = -1;",
          "68: static int hf_steam_ihs_discovery_body_authrequest_devicetoken = -1;",
          "69: static int hf_steam_ihs_discovery_body_authrequest_devicename = -1;",
          "70: static int hf_steam_ihs_discovery_body_authrequest_encryptedrequest = -1;",
          "71: static int hf_steam_ihs_discovery_body_authresponse_authresult = -1;",
          "72: static int hf_steam_ihs_discovery_body_streamingrequest_requestid = -1;",
          "73: static int hf_steam_ihs_discovery_body_streamingrequest_maximumresolutionx = -1;",
          "74: static int hf_steam_ihs_discovery_body_streamingrequest_maximumresolutiony = -1;",
          "75: static int hf_steam_ihs_discovery_body_streamingrequest_audiochannelcount = -1;",
          "76: static int hf_steam_ihs_discovery_body_streamingrequest_deviceversion = -1;",
          "77: static int hf_steam_ihs_discovery_body_streamingrequest_streamdesktop = -1;",
          "78: static int hf_steam_ihs_discovery_body_streamingrequest_devicetoken = -1;",
          "79: static int hf_steam_ihs_discovery_body_streamingrequest_pin = -1;",
          "80: static int hf_steam_ihs_discovery_body_streamingrequest_enablevideostreaming = -1;",
          "81: static int hf_steam_ihs_discovery_body_streamingrequest_enableaudiostreaming = -1;",
          "82: static int hf_steam_ihs_discovery_body_streamingrequest_enableinputstreaming = -1;",
          "83: static int hf_steam_ihs_discovery_body_streamingcancelrequest_requestid = -1;",
          "84: static int hf_steam_ihs_discovery_body_streamingresponse_requestid = -1;",
          "85: static int hf_steam_ihs_discovery_body_streamingresponse_result = -1;",
          "86: static int hf_steam_ihs_discovery_body_streamingresponse_port = -1;",
          "87: static int hf_steam_ihs_discovery_body_streamingresponse_encryptedsessionkey = -1;",
          "88: static int hf_steam_ihs_discovery_body_streamingresponse_virtualherelicenseddevicecount = -1;",
          "89: static int hf_steam_ihs_discovery_body_proofrequest_challenge = -1;",
          "90: static int hf_steam_ihs_discovery_body_proofresponse_response = -1;",
          "91: static int hf_steam_ihs_discovery_unknown_data = -1;",
          "92: static int hf_steam_ihs_discovery_unknown_number = -1;",
          "94: static const val64_string hf_steam_ihs_discovery_header_msgtype_strings[] = {",
          "95:     {  0, \"Client Discovery\" },",
          "96:     {  1, \"Client Status\" },",
          "97:     {  2, \"Client Offline\" },",
          "98:     {  3, \"Device Authorization Request\" },",
          "99:     {  4, \"Device Authorization Response\" },",
          "100:     {  5, \"Device Streaming Request\" },",
          "101:     {  6, \"Device Streaming Response\" },",
          "102:     {  7, \"Device Proof Request\" },",
          "103:     {  8, \"Device Proof Response\" },",
          "104:     {  9, \"Device Authorization Cancel Request\" },",
          "105:     { 10, \"Device Streaming Cancel Request\" },",
          "106:     {  0, NULL }",
          "107: };",
          "109: static const val64_string hf_steam_ihs_discovery_body_authresponse_authresult_strings[] = {",
          "110:     { 0, \"Success\" },",
          "111:     { 1, \"Denied\" },",
          "112:     { 2, \"Not Logged In\" },",
          "113:     { 3, \"Offline\" },",
          "114:     { 4, \"Busy\" },",
          "115:     { 5, \"In Progress\" },",
          "116:     { 6, \"TimedOut\" },",
          "117:     { 7, \"Failed\" },",
          "118:     { 8, \"Canceled\" },",
          "119:     { 0, NULL }",
          "120: };",
          "122: static const val64_string hf_steam_ihs_discovery_body_streamingresponse_result_strings[] = {",
          "123:     {  0, \"Success\" },",
          "124:     {  1, \"Unauthorized\" },",
          "125:     {  2, \"Screen Locked\" },",
          "126:     {  3, \"Failed\" },",
          "127:     {  4, \"Busy\" },",
          "128:     {  5, \"In Progress\" },",
          "129:     {  6, \"Canceled\" },",
          "130:     {  7, \"Drivers Not Installed\" },",
          "131:     {  8, \"Disabled\" },",
          "132:     {  9, \"Broadcasting Active\" },",
          "133:     { 10, \"VR Active\" },",
          "134:     { 11, \"PIN Required\" },",
          "135:     { 0, NULL }",
          "136: };",
          "138: static expert_field ei_steam_ihs_discovery_unknown_data = EI_INIT;",
          "139: static expert_field ei_steam_ihs_discovery_unknown_number = EI_INIT;",
          "140: static expert_field ei_steam_ihs_discovery_unknown_lengthdelimited = EI_INIT;",
          "141: static expert_field ei_steam_ihs_discovery_invalid_wiretype = EI_INIT;",
          "142: static expert_field ei_steam_ihs_discovery_invalid_length = EI_INIT;",
          "144: #define STEAM_IHS_DISCOVERY_UDP_PORT 27036",
          "145: static guint udp_port_pref = STEAM_IHS_DISCOVERY_UDP_PORT;",
          "148: static gint ett_steam_ihs_discovery = -1;",
          "149: static gint ett_steam_ihs_discovery_body_status_user = -1;",
          "151: #define STEAM_IHS_DISCOVERY_MIN_LENGTH 12",
          "152: #define STEAM_IHS_DISCOVERY_SIGNATURE_LENGTH 8",
          "153: #define STEAM_IHS_DISCOVERY_SIGNATURE_VALUE 0xFFFFFFFF214C5FA0",
          "160: #define PROTOBUF_WIRETYPE_VARINT          0",
          "161: #define PROTOBUF_WIRETYPE_64BIT           1",
          "162: #define PROTOBUF_WIRETYPE_LENGTHDELIMITED 2",
          "163: #define PROTOBUF_WIRETYPE_32BIT           5",
          "165: static const char * const protobuf_wiretype_names[] = {\"VarInt\", \"64-bit\", \"Length-delimited\", \"Start group\", \"End group\", \"32-bit\"};",
          "166: static const char protobuf_wiretype_name_unknown[] = \"Unknown\";",
          "168: static const char* protobuf_get_wiretype_name(guint8 wire_type) {",
          "169:     if (wire_type <= 5) {",
          "170:         return protobuf_wiretype_names[wire_type];",
          "171:     }",
          "172:     return protobuf_wiretype_name_unknown;",
          "173: }",
          "175: static gint64",
          "176: get_varint64(tvbuff_t *tvb, gint offset, gint bytes_left, gint* len)",
          "177: {",
          "178:     guint8 b;",
          "179:     gint64 result = 0;",
          "181:     while ((*len) < bytes_left) {",
          "182:         b = tvb_get_guint8(tvb, offset+(*len));",
          "183:         result |= ((gint64)b & 0x7f) << ((*len)*7);",
          "184:         (*len)++;",
          "185:         if ((b & 0x80) == 0) {",
          "186:             break;",
          "187:         }",
          "188:     }",
          "189:     return result;",
          "190: }",
          "192: typedef struct {",
          "193:     tvbuff_t *tvb;",
          "194:     gint offset;",
          "195:     gint bytes_left;",
          "196: } protobuf_desc_t;",
          "198: typedef struct {",
          "199:     guint64 value;",
          "200:     guint64 field_number;",
          "201:     guint8 wire_type;",
          "202: } protobuf_tag_t;",
          "204: static void",
          "205: protobuf_seek_forward(protobuf_desc_t* pb, gint len)",
          "206: {",
          "207:     pb->offset += len;",
          "208:     pb->bytes_left -= len;",
          "209: }",
          "211: static gint",
          "212: protobuf_iter_next(protobuf_desc_t* pb, protobuf_tag_t* tag)",
          "213: {",
          "214:     gint len;",
          "215:     if (pb->bytes_left <= 0) {",
          "216:         return 0;",
          "217:     }",
          "218:     tag->value = get_varint64(pb->tvb, pb->offset, pb->bytes_left, &len);",
          "219:     tag->field_number = tag->value >> 3;",
          "220:     tag->wire_type = tag->value & 0x7;",
          "221:     protobuf_seek_forward(pb, len);",
          "222:     return pb->bytes_left;",
          "223: }",
          "225: static gint",
          "226: protobuf_dissect_unknown_field(protobuf_desc_t *pb, protobuf_tag_t *tag, packet_info *pinfo, proto_tree *tree, proto_item** tiptr)",
          "227: {",
          "228:     gint len;",
          "229:     gint64 value;",
          "230:     proto_item* ti;",
          "232:     switch(tag->wire_type) {",
          "233:         case PROTOBUF_WIRETYPE_VARINT:",
          "234:             value = get_varint64(pb->tvb, pb->offset, pb->bytes_left, &len);",
          "235:             ti = proto_tree_add_uint64(tree, hf_steam_ihs_discovery_unknown_number, pb->tvb,",
          "236:                     pb->offset, len, (guint64)value);",
          "237:             expert_add_info_format(pinfo, ti, &ei_steam_ihs_discovery_unknown_number, \"Unknown numeric protobuf field (wire type %d = %s)\", tag->wire_type, protobuf_get_wiretype_name(tag->wire_type));",
          "238:             break;",
          "239:         case PROTOBUF_WIRETYPE_64BIT:",
          "240:             len = 8;",
          "241:             ti = proto_tree_add_item(tree, hf_steam_ihs_discovery_unknown_number, pb->tvb, pb->offset+len, len, ENC_LITTLE_ENDIAN);",
          "242:             expert_add_info_format(pinfo, ti, &ei_steam_ihs_discovery_unknown_number, \"Unknown numeric protobuf field (wire type %d = %s)\", tag->wire_type, protobuf_get_wiretype_name(tag->wire_type));",
          "243:             break;",
          "244:         case PROTOBUF_WIRETYPE_LENGTHDELIMITED:",
          "245:             value = get_varint64(pb->tvb, pb->offset, pb->bytes_left, &len);",
          "246:             if((guint64)value > (guint64)(pb->bytes_left-len)) {",
          "247:                 ti = proto_tree_add_item(tree, hf_steam_ihs_discovery_unknown_data, pb->tvb, pb->offset+len, pb->bytes_left-len, ENC_NA);",
          "248:                 expert_add_info_format(pinfo, ti, &ei_steam_ihs_discovery_invalid_length, \"Length-delimited field %\"G_GUINT64_FORMAT\" has length prefix %\"G_GUINT64_FORMAT\", but buffer is only %d bytes long.\", tag->field_number, (guint64)value, (pb->bytes_left-len));",
          "249:                 len = pb->bytes_left;",
          "250:             } else {",
          "251:                 ti = proto_tree_add_item(tree, hf_steam_ihs_discovery_unknown_data, pb->tvb, pb->offset+len, (gint)value, ENC_NA);",
          "252:                 len += (gint)value;",
          "253:             }",
          "254:             expert_add_info(pinfo, ti, &ei_steam_ihs_discovery_unknown_lengthdelimited);",
          "255:             break;",
          "256:         case PROTOBUF_WIRETYPE_32BIT:",
          "257:             len = 4;",
          "258:             ti = proto_tree_add_item(tree, hf_steam_ihs_discovery_unknown_number, pb->tvb, pb->offset+len, len, ENC_LITTLE_ENDIAN);",
          "259:             expert_add_info_format(pinfo, ti, &ei_steam_ihs_discovery_unknown_number, \"Unknown numeric protobuf field (wire type %d = %s)\", tag->wire_type, protobuf_get_wiretype_name(tag->wire_type));",
          "260:             break;",
          "261:         default:",
          "262:             len = pb->bytes_left;",
          "263:             ti = proto_tree_add_item(tree, hf_steam_ihs_discovery_unknown_data, pb->tvb, pb->offset, len, ENC_NA);",
          "264:             expert_add_info(pinfo, ti, &ei_steam_ihs_discovery_unknown_data);",
          "265:             break;",
          "266:     }",
          "267:     if(tiptr != NULL) {",
          "269:     }",
          "271:     return len;",
          "272: }",
          "274: static gint",
          "275: protobuf_verify_wiretype(protobuf_desc_t *pb, protobuf_tag_t *tag, packet_info *pinfo, proto_tree *tree, guint8 expected_wire_type)",
          "276: {",
          "277:     gint len;",
          "278:     gint64 len_prefix;",
          "279:     proto_item *ti = NULL;",
          "281:     if(expected_wire_type == tag->wire_type) {",
          "282:         if(expected_wire_type == PROTOBUF_WIRETYPE_LENGTHDELIMITED) {",
          "283:             len_prefix = get_varint64(pb->tvb, pb->offset, pb->bytes_left, &len);",
          "284:             if(len_prefix < 0 || len_prefix > G_MAXINT) {",
          "285:                 ti = proto_tree_add_item(tree, hf_steam_ihs_discovery_unknown_data, pb->tvb, pb->offset+len, pb->bytes_left-len, ENC_NA);",
          "286:                 expert_add_info_format(pinfo, ti, &ei_steam_ihs_discovery_invalid_length, \"Length-delimited field %\"G_GUINT64_FORMAT\" has length prefix %\"G_GINT64_FORMAT\" outside valid range (0 <= x <= G_MAXINT).\", tag->field_number, len_prefix);",
          "287:                 return pb->bytes_left;",
          "288:             } else if(((gint)len_prefix) > (pb->bytes_left-len)) {",
          "289:                 ti = proto_tree_add_item(tree, hf_steam_ihs_discovery_unknown_data, pb->tvb, pb->offset+len, pb->bytes_left-len, ENC_NA);",
          "290:                 expert_add_info_format(pinfo, ti, &ei_steam_ihs_discovery_invalid_length, \"Length-delimited field %\"G_GUINT64_FORMAT\" has length prefix %\"G_GINT64_FORMAT\", but buffer is only %d bytes long.\", tag->field_number, len_prefix, (pb->bytes_left-len));",
          "291:                 return pb->bytes_left;",
          "292:             }",
          "293:         }",
          "294:         return 0;",
          "295:     }",
          "296:     len = protobuf_dissect_unknown_field(pb, tag, pinfo, tree, &ti);",
          "298:     expert_add_info_format(pinfo, ti, &ei_steam_ihs_discovery_invalid_wiretype, \"Expected wiretype %d (%s) for field %\"G_GUINT64_FORMAT\", but got %d (%s) instead.\", expected_wire_type, protobuf_get_wiretype_name(expected_wire_type), tag->field_number, tag->wire_type, protobuf_get_wiretype_name(tag->wire_type));",
          "299:     return len;",
          "300: }",
          "304: #define STEAMDISCOVER_FN_HEADER_CLIENTID   1",
          "305: #define STEAMDISCOVER_FN_HEADER_MSGTYPE    2",
          "306: #define STEAMDISCOVER_FN_HEADER_INSTANCEID 3",
          "308: #define STEAMDISCOVER_FN_DISCOVERY_SEQNUM                       1",
          "309: #define STEAMDISCOVER_FN_DISCOVERY_CLIENTIDS                    2",
          "311: #define STEAMDISCOVER_FN_STATUS_VERSION                         1",
          "312: #define STEAMDISCOVER_FN_STATUS_MINVERSION                      2",
          "313: #define STEAMDISCOVER_FN_STATUS_CONNECTPORT                     3",
          "314: #define STEAMDISCOVER_FN_STATUS_HOSTNAME                        4",
          "315: #define STEAMDISCOVER_FN_STATUS_ENABLEDSERVICES                 6",
          "316: #define STEAMDISCOVER_FN_STATUS_OSTYPE                          7",
          "317: #define STEAMDISCOVER_FN_STATUS_IS64BIT                         8",
          "318: #define STEAMDISCOVER_FN_STATUS_USERS                           9",
          "319: #define STEAMDISCOVER_FN_STATUS_EUNIVERSE                      11",
          "320: #define STEAMDISCOVER_FN_STATUS_TIMESTAMP                      12",
          "321: #define STEAMDISCOVER_FN_STATUS_SCREENLOCKED                   13",
          "322: #define STEAMDISCOVER_FN_STATUS_GAMESRUNNING                   14",
          "323: #define STEAMDISCOVER_FN_STATUS_MACADDRESSES                   15",
          "324: #define STEAMDISCOVER_FN_STATUS_USER_STEAMID                    1",
          "325: #define STEAMDISCOVER_FN_STATUS_USER_AUTHKEYID                  2",
          "327: #define STEAMDISCOVER_FN_AUTHREQUEST_DEVICETOKEN                1",
          "328: #define STEAMDISCOVER_FN_AUTHREQUEST_DEVICENAME                 2",
          "329: #define STEAMDISCOVER_FN_AUTHREQUEST_ENCRYPTEDREQUEST           3",
          "331: #define STEAMDISCOVER_FN_AUTHRESPONSE_AUTHRESULT                1",
          "333: #define STEAMDISCOVER_FN_STREAMINGREQUEST_REQUESTID             1",
          "334: #define STEAMDISCOVER_FN_STREAMINGREQUEST_MAXIMUMRESOLUTIONX    2",
          "335: #define STEAMDISCOVER_FN_STREAMINGREQUEST_MAXIMUMRESOLUTIONY    3",
          "336: #define STEAMDISCOVER_FN_STREAMINGREQUEST_AUDIOCHANNELCOUNT     4",
          "337: #define STEAMDISCOVER_FN_STREAMINGREQUEST_DEVICEVERSION         5",
          "338: #define STEAMDISCOVER_FN_STREAMINGREQUEST_STREAMDESKTOP         6",
          "339: #define STEAMDISCOVER_FN_STREAMINGREQUEST_DEVICETOKEN           7",
          "340: #define STEAMDISCOVER_FN_STREAMINGREQUEST_PIN                   8",
          "341: #define STEAMDISCOVER_FN_STREAMINGREQUEST_ENABLEVIDEOSTREAMING  9",
          "342: #define STEAMDISCOVER_FN_STREAMINGREQUEST_ENABLEAUDIOSTREAMING 10",
          "343: #define STEAMDISCOVER_FN_STREAMINGREQUEST_ENABLEINPUTSTREAMING 11",
          "345: #define STEAMDISCOVER_FN_STREAMINGCANCELREQUEST_REQUESTID       1",
          "347: #define STEAMDISCOVER_FN_STREAMINGRESPONSE_REQUESTID            1",
          "348: #define STEAMDISCOVER_FN_STREAMINGRESPONSE_RESULT               2",
          "349: #define STEAMDISCOVER_FN_STREAMINGRESPONSE_PORT                 3",
          "350: #define STEAMDISCOVER_FN_STREAMINGRESPONSE_ENCRYPTEDSESSIONKEY  4",
          "351: #define STEAMDISCOVER_FN_STREAMINGRESPONSE_VIRTUALHERELICENSEDDEVICECOUNT 5",
          "353: #define STEAMDISCOVER_FN_PROOFREQUEST_CHALLENGE                 1",
          "354: #define STEAMDISCOVER_FN_PROOFRESPONSE_RESPONSE                 1",
          "356: #define STEAMDISCOVER_MSGTYPE_CLIENTBROADCASTMSGDISCOVERY       0",
          "357: #define STEAMDISCOVER_MSGTYPE_CLIENTBROADCASTMSGSTATUS          1",
          "358: #define STEAMDISCOVER_MSGTYPE_CLIENTBROADCASTMSGOFFLINE         2",
          "359: #define STEAMDISCOVER_MSGTYPE_DEVICEAUTHORIZATIONREQUEST        3",
          "360: #define STEAMDISCOVER_MSGTYPE_DEVICEAUTHORIZATIONRESPONSE       4",
          "361: #define STEAMDISCOVER_MSGTYPE_DEVICESTREAMINGREQUEST            5",
          "362: #define STEAMDISCOVER_MSGTYPE_DEVICESTREAMINGRESPONSE           6",
          "363: #define STEAMDISCOVER_MSGTYPE_DEVICEPROOFREQUEST                7",
          "364: #define STEAMDISCOVER_MSGTYPE_DEVICEPROOFRESPONSE               8",
          "365: #define STEAMDISCOVER_MSGTYPE_DEVICEAUTHORIZATIONCANCELREQUEST  9",
          "366: #define STEAMDISCOVER_MSGTYPE_DEVICESTREAMINGCANCELREQUEST     10",
          "367: #define STEAMDISCOVER_MSGTYPES_MAX                             10",
          "369: #define STEAMDISCOVER_ENSURE_WIRETYPE(X) if((len = protobuf_verify_wiretype(&pb, &tag, pinfo, tree, X))) break;",
          "394: static gint64",
          "395: steamdiscover_dissect_header(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "396:                              gint offset, gint bytes_left)",
          "397: {",
          "398:     gint len;",
          "399:     gint64 value;",
          "400:     gint64 msg_type = -1;",
          "401:     protobuf_desc_t pb = { tvb, offset, bytes_left };",
          "402:     protobuf_tag_t tag = { 0, 0, 0 };",
          "403:     while (protobuf_iter_next(&pb, &tag)) {",
          "404:         switch(tag.field_number) {",
          "405:             case STEAMDISCOVER_FN_HEADER_CLIENTID:",
          "406:                 STEAMDISCOVER_ENSURE_WIRETYPE(PROTOBUF_WIRETYPE_VARINT);",
          "407:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "408:                 proto_tree_add_uint64(tree, hf_steam_ihs_discovery_header_clientid, pb.tvb,",
          "409:                         pb.offset, len, (guint64)value);",
          "410:                 break;",
          "411:             case STEAMDISCOVER_FN_HEADER_MSGTYPE:",
          "412:                 STEAMDISCOVER_ENSURE_WIRETYPE(PROTOBUF_WIRETYPE_VARINT);",
          "413:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "414:                 msg_type = value;",
          "415:                 proto_tree_add_uint64(tree, hf_steam_ihs_discovery_header_msgtype, pb.tvb,",
          "416:                         pb.offset, len, (guint64)value);",
          "417:                 break;",
          "418:             case STEAMDISCOVER_FN_HEADER_INSTANCEID:",
          "419:                 STEAMDISCOVER_ENSURE_WIRETYPE(PROTOBUF_WIRETYPE_VARINT);",
          "420:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "421:                 proto_tree_add_uint64(tree, hf_steam_ihs_discovery_header_instanceid, pb.tvb,",
          "422:                         pb.offset, len, (guint64)value);",
          "423:                 break;",
          "424:             default:",
          "425:                 len = protobuf_dissect_unknown_field(&pb, &tag, pinfo, tree, NULL);",
          "426:                 break;",
          "427:         }",
          "428:         protobuf_seek_forward(&pb, len);",
          "429:     }",
          "430:     return msg_type;",
          "431: }",
          "440: static void",
          "441: steamdiscover_dissect_body_discovery(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "442:                                      gint offset, gint bytes_left)",
          "443: {",
          "444:     gint len;",
          "445:     gint64 value;",
          "446:     protobuf_desc_t pb = { tvb, offset, bytes_left };",
          "447:     protobuf_tag_t tag = { 0, 0, 0 };",
          "448:     while (protobuf_iter_next(&pb, &tag)) {",
          "449:         switch(tag.field_number) {",
          "450:             case STEAMDISCOVER_FN_DISCOVERY_SEQNUM:",
          "451:                 STEAMDISCOVER_ENSURE_WIRETYPE(PROTOBUF_WIRETYPE_VARINT);",
          "452:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "453:                 proto_tree_add_uint(tree, hf_steam_ihs_discovery_body_discovery_seqnum, pb.tvb,",
          "454:                         pb.offset, len, (guint32)value);",
          "455:                 col_append_fstr(pinfo->cinfo, COL_INFO, \" Seq=%\"G_GUINT32_FORMAT, (guint32)value);",
          "456:                 break;",
          "457:             case STEAMDISCOVER_FN_DISCOVERY_CLIENTIDS:",
          "458:                 STEAMDISCOVER_ENSURE_WIRETYPE(PROTOBUF_WIRETYPE_VARINT);",
          "459:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "460:                 proto_tree_add_uint64(tree, hf_steam_ihs_discovery_body_discovery_clientids, pb.tvb,",
          "461:                         pb.offset, len, value);",
          "462:                 break;",
          "463:             default:",
          "464:                 len = protobuf_dissect_unknown_field(&pb, &tag, pinfo, tree, NULL);",
          "465:                 break;",
          "466:         }",
          "467:         protobuf_seek_forward(&pb, len);",
          "468:     }",
          "469: }",
          "496: static void",
          "497: steamdiscover_dissect_body_status(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "498:                                      gint offset, gint bytes_left)",
          "499: {",
          "500:     gint64 value;",
          "501:     gint len;",
          "502:     gint len2;",
          "503:     protobuf_desc_t pb = { tvb, offset, bytes_left };",
          "504:     protobuf_desc_t pb2 = { tvb, 0, 0 };",
          "505:     protobuf_tag_t tag = { 0, 0, 0 };",
          "506:     wmem_allocator_t* strpool;",
          "507:     guint8 *hostname;",
          "508:     strpool = wmem_allocator_new(WMEM_ALLOCATOR_SIMPLE);",
          "509:     nstime_t timestamp;",
          "510:     proto_tree *user_tree;",
          "511:     proto_item *user_it;",
          "512:     while (protobuf_iter_next(&pb, &tag)) {",
          "513:         switch(tag.field_number) {",
          "514:             case STEAMDISCOVER_FN_STATUS_VERSION:",
          "515:                 STEAMDISCOVER_ENSURE_WIRETYPE(PROTOBUF_WIRETYPE_VARINT);",
          "516:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "517:                 proto_tree_add_int(tree, hf_steam_ihs_discovery_body_status_version, pb.tvb,",
          "518:                         pb.offset, len, (gint32)value);",
          "519:                 break;",
          "520:             case STEAMDISCOVER_FN_STATUS_MINVERSION:",
          "521:                 STEAMDISCOVER_ENSURE_WIRETYPE(PROTOBUF_WIRETYPE_VARINT);",
          "522:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "523:                 proto_tree_add_int(tree, hf_steam_ihs_discovery_body_status_minversion, pb.tvb,",
          "524:                         pb.offset, len, (gint32)value);",
          "525:                 break;",
          "526:             case STEAMDISCOVER_FN_STATUS_CONNECTPORT:",
          "527:                 STEAMDISCOVER_ENSURE_WIRETYPE(PROTOBUF_WIRETYPE_VARINT);",
          "528:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "529:                 proto_tree_add_uint(tree, hf_steam_ihs_discovery_body_status_connectport, pb.tvb,",
          "530:                         pb.offset, len, (guint32)value);",
          "531:                 break;",
          "532:             case STEAMDISCOVER_FN_STATUS_HOSTNAME:",
          "533:                 STEAMDISCOVER_ENSURE_WIRETYPE(PROTOBUF_WIRETYPE_LENGTHDELIMITED);",
          "534:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "535:                 proto_tree_add_item(tree, hf_steam_ihs_discovery_body_status_hostname, pb.tvb,",
          "536:                         pb.offset+len, (gint)value, ENC_UTF_8|ENC_NA);",
          "537:                 hostname = tvb_get_string_enc(strpool, pb.tvb, pb.offset+len, (gint)value, ENC_UTF_8);",
          "538:                 if(hostname && strlen(hostname)) {",
          "539:                     col_add_fstr(pinfo->cinfo, COL_INFO, \"%s from %s\", hf_steam_ihs_discovery_header_msgtype_strings[STEAMDISCOVER_MSGTYPE_CLIENTBROADCASTMSGSTATUS].strptr, hostname);",
          "540:                 }",
          "541:                 len += (gint)value;",
          "542:                 break;",
          "543:             case STEAMDISCOVER_FN_STATUS_ENABLEDSERVICES:",
          "544:                 STEAMDISCOVER_ENSURE_WIRETYPE(PROTOBUF_WIRETYPE_VARINT);",
          "545:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "546:                 proto_tree_add_uint(tree, hf_steam_ihs_discovery_body_status_enabledservices, pb.tvb,",
          "547:                         pb.offset, len, (guint32)value);",
          "548:                 break;",
          "549:             case STEAMDISCOVER_FN_STATUS_OSTYPE:",
          "550:                 STEAMDISCOVER_ENSURE_WIRETYPE(PROTOBUF_WIRETYPE_VARINT);",
          "551:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "552:                 proto_tree_add_int(tree, hf_steam_ihs_discovery_body_status_ostype, pb.tvb,",
          "553:                         pb.offset, len, (gint32)value);",
          "554:                 break;",
          "555:             case STEAMDISCOVER_FN_STATUS_IS64BIT:",
          "556:                 STEAMDISCOVER_ENSURE_WIRETYPE(PROTOBUF_WIRETYPE_VARINT);",
          "557:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "558:                 proto_tree_add_boolean(tree, hf_steam_ihs_discovery_body_status_is64bit, pb.tvb,",
          "559:                         pb.offset, len, (gint32)value);",
          "560:                 break;",
          "561:             case STEAMDISCOVER_FN_STATUS_USERS:",
          "562:                 STEAMDISCOVER_ENSURE_WIRETYPE(PROTOBUF_WIRETYPE_LENGTHDELIMITED);",
          "563:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "564:                 pb2.offset = pb.offset+len;",
          "565:                 pb2.bytes_left = (gint)value;",
          "566:                 len += (gint)value;",
          "567:                 user_tree = proto_tree_add_subtree(tree, pb.tvb, pb.offset, len, ett_steam_ihs_discovery_body_status_user, &user_it, \"User\");",
          "568:                 while (protobuf_iter_next(&pb2, &tag)) {",
          "569:                     switch(tag.field_number) {",
          "570:                         case STEAMDISCOVER_FN_STATUS_USER_STEAMID:",
          "571:                             if((len2 = protobuf_verify_wiretype(&pb2, &tag, pinfo, user_tree, PROTOBUF_WIRETYPE_64BIT))) break;",
          "572:                             len2 = 8;",
          "573:                             value = tvb_get_letoh64(pb2.tvb, pb2.offset);",
          "574:                             proto_tree_add_uint64(user_tree, hf_steam_ihs_discovery_body_status_user_steamid, pb2.tvb,",
          "575:                                     pb2.offset, len2, (guint64)value);",
          "576:                             proto_item_append_text(user_it, \", Steam ID: %\"G_GUINT64_FORMAT, (guint64)value);",
          "577:                             break;",
          "578:                         case STEAMDISCOVER_FN_STATUS_USER_AUTHKEYID:",
          "579:                             if((len2 = protobuf_verify_wiretype(&pb2, &tag, pinfo, user_tree, PROTOBUF_WIRETYPE_VARINT))) break;",
          "580:                             value = get_varint64(pb2.tvb, pb2.offset, pb2.bytes_left, &len2);",
          "581:                             proto_tree_add_uint(user_tree, hf_steam_ihs_discovery_body_status_user_authkeyid, pb2.tvb,",
          "582:                                     pb2.offset, len2, (guint32)value);",
          "583:                             proto_item_append_text(user_it, \", Auth Key ID: %\"G_GUINT32_FORMAT, (guint32)value);",
          "584:                             break;",
          "585:                         default:",
          "586:                             len2 = protobuf_dissect_unknown_field(&pb2, &tag, pinfo, tree, NULL);",
          "587:                             break;",
          "588:                     }",
          "589:                     protobuf_seek_forward(&pb2, len2);",
          "590:                 }",
          "591:                 break;",
          "592:             case STEAMDISCOVER_FN_STATUS_EUNIVERSE:",
          "593:                 STEAMDISCOVER_ENSURE_WIRETYPE(PROTOBUF_WIRETYPE_VARINT);",
          "594:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "595:                 proto_tree_add_int(tree, hf_steam_ihs_discovery_body_status_euniverse, pb.tvb,",
          "596:                         pb.offset, len, (gint32)value);",
          "597:                 break;",
          "598:             case STEAMDISCOVER_FN_STATUS_TIMESTAMP:",
          "599:                 STEAMDISCOVER_ENSURE_WIRETYPE(PROTOBUF_WIRETYPE_VARINT);",
          "600:                 timestamp.secs = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "601:                 proto_tree_add_time(tree, hf_steam_ihs_discovery_body_status_timestamp, pb.tvb,",
          "602:                         pb.offset, len, &timestamp);",
          "603:                 break;",
          "604:             case STEAMDISCOVER_FN_STATUS_SCREENLOCKED:",
          "605:                 STEAMDISCOVER_ENSURE_WIRETYPE(PROTOBUF_WIRETYPE_VARINT);",
          "606:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "607:                 proto_tree_add_boolean(tree, hf_steam_ihs_discovery_body_status_screenlocked, pb.tvb,",
          "608:                         pb.offset, len, (gint32)value);",
          "609:                 break;",
          "610:             case STEAMDISCOVER_FN_STATUS_GAMESRUNNING:",
          "611:                 STEAMDISCOVER_ENSURE_WIRETYPE(PROTOBUF_WIRETYPE_VARINT);",
          "612:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "613:                 proto_tree_add_boolean(tree, hf_steam_ihs_discovery_body_status_gamesrunning, pb.tvb,",
          "614:                         pb.offset, len, (gint32)value);",
          "615:                 break;",
          "616:             case STEAMDISCOVER_FN_STATUS_MACADDRESSES:",
          "617:                 STEAMDISCOVER_ENSURE_WIRETYPE(PROTOBUF_WIRETYPE_LENGTHDELIMITED);",
          "618:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "619:                 proto_tree_add_item(tree, hf_steam_ihs_discovery_body_status_macaddresses, pb.tvb,",
          "620:                         pb.offset+len, (gint)value, ENC_UTF_8|ENC_NA);",
          "621:                 len += (gint)value;",
          "622:                 break;",
          "623:             default:",
          "624:                 len = protobuf_dissect_unknown_field(&pb, &tag, pinfo, tree, NULL);",
          "625:                 break;",
          "626:         }",
          "627:         protobuf_seek_forward(&pb, len);",
          "628:     }",
          "629:     wmem_destroy_allocator(strpool);",
          "630: }",
          "654: static void",
          "655: steamdiscover_dissect_body_authrequest(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "656:                                        gint offset, gint bytes_left)",
          "657: {",
          "658:     guint len;",
          "659:     gint64 value;",
          "660:     protobuf_desc_t pb = { tvb, offset, bytes_left };",
          "661:     protobuf_tag_t tag = { 0, 0, 0 };",
          "662:     wmem_allocator_t *strpool;",
          "663:     strpool = wmem_allocator_new(WMEM_ALLOCATOR_SIMPLE);",
          "664:     guint8* devicename;",
          "665:     while (protobuf_iter_next(&pb, &tag)) {",
          "666:         switch(tag.field_number) {",
          "667:             case STEAMDISCOVER_FN_AUTHREQUEST_DEVICETOKEN:",
          "668:                 STEAMDISCOVER_ENSURE_WIRETYPE(PROTOBUF_WIRETYPE_LENGTHDELIMITED);",
          "669:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "670:                 proto_tree_add_item(tree, hf_steam_ihs_discovery_body_authrequest_devicetoken, pb.tvb,",
          "671:                         pb.offset+len, (gint)value, ENC_NA);",
          "672:                 len += (gint)value;",
          "673:                 break;",
          "674:             case STEAMDISCOVER_FN_AUTHREQUEST_DEVICENAME:",
          "675:                 STEAMDISCOVER_ENSURE_WIRETYPE(PROTOBUF_WIRETYPE_LENGTHDELIMITED);",
          "676:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "677:                 proto_tree_add_item(tree, hf_steam_ihs_discovery_body_authrequest_devicename, pb.tvb,",
          "678:                         pb.offset+len, (gint)value, ENC_UTF_8|ENC_NA);",
          "679:                 devicename = tvb_get_string_enc(strpool, pb.tvb, pb.offset+len, (gint)value, ENC_UTF_8);",
          "680:                 if (devicename && strlen(devicename)) {",
          "681:                     col_append_fstr(pinfo->cinfo, COL_INFO, \" from %s\", devicename);",
          "682:                 }",
          "683:                 len += (gint)value;",
          "684:                 break;",
          "685:             case STEAMDISCOVER_FN_AUTHREQUEST_ENCRYPTEDREQUEST:",
          "686:                 STEAMDISCOVER_ENSURE_WIRETYPE(PROTOBUF_WIRETYPE_LENGTHDELIMITED);",
          "687:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "688:                 proto_tree_add_item(tree, hf_steam_ihs_discovery_body_authrequest_encryptedrequest, pb.tvb,",
          "689:                         pb.offset+len, (gint)value, ENC_NA);",
          "690:                 len += (gint)value;",
          "691:                 break;",
          "692:             default:",
          "693:                 len = protobuf_dissect_unknown_field(&pb, &tag, pinfo, tree, NULL);",
          "694:                 break;",
          "695:         }",
          "696:         protobuf_seek_forward(&pb, len);",
          "697:     }",
          "698:     wmem_destroy_allocator(strpool);",
          "699: }",
          "707: static void",
          "708: steamdiscover_dissect_body_authresponse(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "709:                                         gint offset, gint bytes_left)",
          "710: {",
          "711:     gint len;",
          "712:     gint64 value;",
          "713:     protobuf_desc_t pb = { tvb, offset, bytes_left };",
          "714:     protobuf_tag_t tag = { 0, 0, 0 };",
          "715:     while (protobuf_iter_next(&pb, &tag)) {",
          "716:         switch(tag.field_number) {",
          "717:             case STEAMDISCOVER_FN_AUTHRESPONSE_AUTHRESULT:",
          "718:                 STEAMDISCOVER_ENSURE_WIRETYPE(PROTOBUF_WIRETYPE_VARINT);",
          "719:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "720:                 proto_tree_add_uint64(tree, hf_steam_ihs_discovery_body_authresponse_authresult, pb.tvb,",
          "721:                         pb.offset, len, (guint64)value);",
          "722:                 col_add_fstr(pinfo->cinfo, COL_INFO, \"%s Result=%\"G_GUINT64_FORMAT\"(%s)\", hf_steam_ihs_discovery_header_msgtype_strings[STEAMDISCOVER_MSGTYPE_DEVICEAUTHORIZATIONRESPONSE].strptr,",
          "723:                         (guint64)value, val64_to_str_const((guint64)value, hf_steam_ihs_discovery_body_authresponse_authresult_strings, \"Unknown\"));",
          "724:                 break;",
          "725:             default:",
          "726:                 len = protobuf_dissect_unknown_field(&pb, &tag, pinfo, tree, NULL);",
          "727:                 break;",
          "728:         }",
          "729:         protobuf_seek_forward(&pb, len);",
          "730:     }",
          "731: }",
          "749: static void",
          "750: steamdiscover_dissect_body_streamingrequest(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "751:                                             gint offset, gint bytes_left)",
          "752: {",
          "753:     gint len;",
          "754:     gint64 value;",
          "755:     protobuf_desc_t pb = { tvb, offset, bytes_left };",
          "756:     protobuf_tag_t tag = { 0, 0, 0 };",
          "757:     while (protobuf_iter_next(&pb, &tag)) {",
          "758:         switch(tag.field_number) {",
          "759:             case STEAMDISCOVER_FN_STREAMINGREQUEST_REQUESTID:",
          "760:                 STEAMDISCOVER_ENSURE_WIRETYPE(PROTOBUF_WIRETYPE_VARINT);",
          "761:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "762:                 proto_tree_add_uint(tree, hf_steam_ihs_discovery_body_streamingrequest_requestid, pb.tvb,",
          "763:                         pb.offset, len, (guint32)value);",
          "764:                 col_add_fstr(pinfo->cinfo, COL_INFO, \"%s ID=%08x\", hf_steam_ihs_discovery_header_msgtype_strings[STEAMDISCOVER_MSGTYPE_DEVICESTREAMINGREQUEST].strptr, (guint32)value);",
          "765:                 break;",
          "766:             case STEAMDISCOVER_FN_STREAMINGREQUEST_MAXIMUMRESOLUTIONX:",
          "767:                 STEAMDISCOVER_ENSURE_WIRETYPE(PROTOBUF_WIRETYPE_VARINT);",
          "768:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "769:                 proto_tree_add_int(tree, hf_steam_ihs_discovery_body_streamingrequest_maximumresolutionx, pb.tvb,",
          "770:                         pb.offset, len, (gint32)value);",
          "771:                 break;",
          "772:             case STEAMDISCOVER_FN_STREAMINGREQUEST_MAXIMUMRESOLUTIONY:",
          "773:                 STEAMDISCOVER_ENSURE_WIRETYPE(PROTOBUF_WIRETYPE_VARINT);",
          "774:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "775:                 proto_tree_add_int(tree, hf_steam_ihs_discovery_body_streamingrequest_maximumresolutiony, pb.tvb,",
          "776:                         pb.offset, len, (gint32)value);",
          "777:                 break;",
          "778:             case STEAMDISCOVER_FN_STREAMINGREQUEST_AUDIOCHANNELCOUNT:",
          "779:                 STEAMDISCOVER_ENSURE_WIRETYPE(PROTOBUF_WIRETYPE_VARINT);",
          "780:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "781:                 proto_tree_add_int(tree, hf_steam_ihs_discovery_body_streamingrequest_audiochannelcount, pb.tvb,",
          "782:                         pb.offset, len, (gint32)value);",
          "783:                 break;",
          "784:             case STEAMDISCOVER_FN_STREAMINGREQUEST_DEVICEVERSION:",
          "785:                 STEAMDISCOVER_ENSURE_WIRETYPE(PROTOBUF_WIRETYPE_LENGTHDELIMITED);",
          "786:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "787:                 proto_tree_add_item(tree, hf_steam_ihs_discovery_body_streamingrequest_deviceversion, pb.tvb, pb.offset+len, (gint)value, ENC_UTF_8|ENC_NA);",
          "788:                 len += (gint)value;",
          "789:                 break;",
          "790:             case STEAMDISCOVER_FN_STREAMINGREQUEST_STREAMDESKTOP:",
          "791:                 STEAMDISCOVER_ENSURE_WIRETYPE(PROTOBUF_WIRETYPE_VARINT);",
          "792:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "793:                 proto_tree_add_boolean(tree, hf_steam_ihs_discovery_body_streamingrequest_streamdesktop, pb.tvb,",
          "794:                         pb.offset, len, (gint32)value);",
          "795:                 break;",
          "796:             case STEAMDISCOVER_FN_STREAMINGREQUEST_DEVICETOKEN:",
          "797:                 STEAMDISCOVER_ENSURE_WIRETYPE(PROTOBUF_WIRETYPE_LENGTHDELIMITED);",
          "798:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "799:                 proto_tree_add_item(tree, hf_steam_ihs_discovery_body_streamingrequest_devicetoken, pb.tvb, pb.offset+len, (gint)value, ENC_NA);",
          "800:                 len += (gint)value;",
          "801:                 break;",
          "802:             case STEAMDISCOVER_FN_STREAMINGREQUEST_PIN:",
          "803:                 STEAMDISCOVER_ENSURE_WIRETYPE(PROTOBUF_WIRETYPE_LENGTHDELIMITED);",
          "804:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "805:                 proto_tree_add_item(tree, hf_steam_ihs_discovery_body_streamingrequest_pin, pb.tvb, pb.offset+len, (gint)value, ENC_NA);",
          "806:                 len += (gint)value;",
          "807:                 break;",
          "808:             case STEAMDISCOVER_FN_STREAMINGREQUEST_ENABLEVIDEOSTREAMING:",
          "809:                 STEAMDISCOVER_ENSURE_WIRETYPE(PROTOBUF_WIRETYPE_VARINT);",
          "810:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "811:                 proto_tree_add_boolean(tree, hf_steam_ihs_discovery_body_streamingrequest_enablevideostreaming, pb.tvb,",
          "812:                         pb.offset, len, (gint32)value);",
          "813:                 break;",
          "814:             case STEAMDISCOVER_FN_STREAMINGREQUEST_ENABLEAUDIOSTREAMING:",
          "815:                 STEAMDISCOVER_ENSURE_WIRETYPE(PROTOBUF_WIRETYPE_VARINT);",
          "816:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "817:                 proto_tree_add_boolean(tree, hf_steam_ihs_discovery_body_streamingrequest_enableaudiostreaming, pb.tvb,",
          "818:                         pb.offset, len, (gint32)value);",
          "819:                 break;",
          "820:             case STEAMDISCOVER_FN_STREAMINGREQUEST_ENABLEINPUTSTREAMING:",
          "821:                 STEAMDISCOVER_ENSURE_WIRETYPE(PROTOBUF_WIRETYPE_VARINT);",
          "822:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "823:                 proto_tree_add_boolean(tree, hf_steam_ihs_discovery_body_streamingrequest_enableinputstreaming, pb.tvb,",
          "824:                         pb.offset, len, (gint32)value);",
          "825:                 break;",
          "826:             default:",
          "827:                 len = protobuf_dissect_unknown_field(&pb, &tag, pinfo, tree, NULL);",
          "828:                 break;",
          "829:         }",
          "830:         protobuf_seek_forward(&pb, len);",
          "831:     }",
          "832: }",
          "840: static void",
          "841: steamdiscover_dissect_body_streamingcancelrequest(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "842:                                                   gint offset, gint bytes_left)",
          "843: {",
          "844:     guint len;",
          "845:     gint64 value;",
          "846:     protobuf_desc_t pb = { tvb, offset, bytes_left };",
          "847:     protobuf_tag_t tag = { 0, 0, 0 };",
          "848:     while (protobuf_iter_next(&pb, &tag)) {",
          "849:         switch(tag.field_number) {",
          "850:             case STEAMDISCOVER_FN_STREAMINGCANCELREQUEST_REQUESTID:",
          "851:                 STEAMDISCOVER_ENSURE_WIRETYPE(PROTOBUF_WIRETYPE_VARINT);",
          "852:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "853:                 proto_tree_add_uint(tree, hf_steam_ihs_discovery_body_streamingcancelrequest_requestid, pb.tvb,",
          "854:                         pb.offset, len, (guint32)value);",
          "855:                 col_add_fstr(pinfo->cinfo, COL_INFO, \"%s, ID=%08x\", hf_steam_ihs_discovery_header_msgtype_strings[STEAMDISCOVER_MSGTYPE_DEVICESTREAMINGCANCELREQUEST].strptr, (guint32)value);",
          "856:                 break;",
          "857:             default:",
          "858:                 len = protobuf_dissect_unknown_field(&pb, &tag, pinfo, tree, NULL);",
          "859:                 break;",
          "860:         }",
          "861:         protobuf_seek_forward(&pb, len);",
          "862:     }",
          "863: }",
          "890: static void",
          "891: steamdiscover_dissect_body_streamingresponse(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "892:                                                   gint offset, gint bytes_left)",
          "893: {",
          "894:     guint len;",
          "895:     gint64 value;",
          "896:     protobuf_desc_t pb = { tvb, offset, bytes_left };",
          "897:     protobuf_tag_t tag = { 0, 0, 0 };",
          "898:     while (protobuf_iter_next(&pb, &tag)) {",
          "899:         switch(tag.field_number) {",
          "900:             case STEAMDISCOVER_FN_STREAMINGRESPONSE_REQUESTID:",
          "901:                 STEAMDISCOVER_ENSURE_WIRETYPE(PROTOBUF_WIRETYPE_VARINT);",
          "902:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "903:                 proto_tree_add_uint(tree, hf_steam_ihs_discovery_body_streamingresponse_requestid, pb.tvb,",
          "904:                         pb.offset, len, (guint32)value);",
          "905:                 col_append_fstr(pinfo->cinfo, COL_INFO, \" ID=%08x\", (guint32)value);",
          "906:                 break;",
          "907:             case STEAMDISCOVER_FN_STREAMINGRESPONSE_RESULT:",
          "908:                 STEAMDISCOVER_ENSURE_WIRETYPE(PROTOBUF_WIRETYPE_VARINT);",
          "909:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "910:                 proto_tree_add_uint64(tree, hf_steam_ihs_discovery_body_streamingresponse_result, pb.tvb,",
          "911:                         pb.offset, len, (guint64)value);",
          "912:                 col_append_fstr(pinfo->cinfo, COL_INFO, \" Result=%\"G_GUINT64_FORMAT\"(%s)\", (guint64)value, val64_to_str_const((guint64)value, hf_steam_ihs_discovery_body_streamingresponse_result_strings, \"Unknown\"));",
          "913:                 break;",
          "914:             case STEAMDISCOVER_FN_STREAMINGRESPONSE_PORT:",
          "915:                 STEAMDISCOVER_ENSURE_WIRETYPE(PROTOBUF_WIRETYPE_VARINT);",
          "916:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "917:                 proto_tree_add_uint(tree, hf_steam_ihs_discovery_body_streamingresponse_port, pb.tvb,",
          "918:                         pb.offset, len, (guint32)value);",
          "919:                 col_append_fstr(pinfo->cinfo, COL_INFO, \" Port=%\"G_GUINT32_FORMAT, (guint32)value);",
          "920:                 break;",
          "921:             case STEAMDISCOVER_FN_STREAMINGRESPONSE_ENCRYPTEDSESSIONKEY:",
          "922:                 STEAMDISCOVER_ENSURE_WIRETYPE(PROTOBUF_WIRETYPE_LENGTHDELIMITED);",
          "923:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "924:                 proto_tree_add_item(tree, hf_steam_ihs_discovery_body_streamingresponse_encryptedsessionkey, pb.tvb, pb.offset+len, (gint)value, ENC_NA);",
          "925:                 len += (gint)value;",
          "926:                 break;",
          "927:             case STEAMDISCOVER_FN_STREAMINGRESPONSE_VIRTUALHERELICENSEDDEVICECOUNT:",
          "928:                 STEAMDISCOVER_ENSURE_WIRETYPE(PROTOBUF_WIRETYPE_VARINT);",
          "929:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "930:                 proto_tree_add_int(tree, hf_steam_ihs_discovery_body_streamingresponse_virtualherelicenseddevicecount, pb.tvb,",
          "931:                         pb.offset, len, (gint32)value);",
          "932:                 break;",
          "933:             default:",
          "934:                 len = protobuf_dissect_unknown_field(&pb, &tag, pinfo, tree, NULL);",
          "935:                 break;",
          "936:         }",
          "937:         protobuf_seek_forward(&pb, len);",
          "938:     }",
          "939: }",
          "947: static void",
          "948: steamdiscover_dissect_body_proofrequest(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "949:                                                   gint offset, gint bytes_left)",
          "950: {",
          "951:     gint len;",
          "952:     gint64 value;",
          "953:     protobuf_desc_t pb = { tvb, offset, bytes_left };",
          "954:     protobuf_tag_t tag = { 0, 0, 0 };",
          "955:     while (protobuf_iter_next(&pb, &tag)) {",
          "956:         switch(tag.field_number) {",
          "957:             case STEAMDISCOVER_FN_PROOFREQUEST_CHALLENGE:",
          "958:                 STEAMDISCOVER_ENSURE_WIRETYPE(PROTOBUF_WIRETYPE_LENGTHDELIMITED);",
          "959:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "960:                 proto_tree_add_item(tree, hf_steam_ihs_discovery_body_proofrequest_challenge, pb.tvb, pb.offset+len, (gint)value, ENC_NA);",
          "961:                 len += (gint)value;",
          "962:                 break;",
          "963:             default:",
          "964:                 len = protobuf_dissect_unknown_field(&pb, &tag, pinfo, tree, NULL);",
          "965:                 break;",
          "966:         }",
          "967:         protobuf_seek_forward(&pb, len);",
          "968:     }",
          "969: }",
          "977: static void",
          "978: steamdiscover_dissect_body_proofresponse(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "979:                                          gint offset, gint bytes_left)",
          "980: {",
          "981:     gint len;",
          "982:     gint64 value;",
          "983:     protobuf_desc_t pb = { tvb, offset, bytes_left };",
          "984:     protobuf_tag_t tag = { 0, 0, 0 };",
          "985:     while (protobuf_iter_next(&pb, &tag)) {",
          "986:         switch(tag.field_number) {",
          "987:             case STEAMDISCOVER_FN_PROOFRESPONSE_RESPONSE:",
          "988:                 STEAMDISCOVER_ENSURE_WIRETYPE(PROTOBUF_WIRETYPE_LENGTHDELIMITED);",
          "989:                 value = get_varint64(pb.tvb, pb.offset, pb.bytes_left, &len);",
          "990:                 proto_tree_add_item(tree, hf_steam_ihs_discovery_body_proofresponse_response, pb.tvb, pb.offset+len, (gint)value, ENC_NA);",
          "991:                 len += (gint)value;",
          "992:                 break;",
          "993:             default:",
          "994:                 len = protobuf_dissect_unknown_field(&pb, &tag, pinfo, tree, NULL);",
          "995:                 break;",
          "996:         }",
          "997:         protobuf_seek_forward(&pb, len);",
          "998:     }",
          "999: }",
          "1001: static void",
          "1002: steamdiscover_dissect_body_unknown(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "1003:                                          gint offset, gint bytes_left)",
          "1004: {",
          "1005:     gint len;",
          "1006:     protobuf_desc_t pb = { tvb, offset, bytes_left };",
          "1007:     protobuf_tag_t tag = { 0, 0, 0 };",
          "1008:     while (protobuf_iter_next(&pb, &tag)) {",
          "1009:         len = protobuf_dissect_unknown_field(&pb, &tag, pinfo, tree, NULL);",
          "1010:         protobuf_seek_forward(&pb, len);",
          "1011:     }",
          "1012: }",
          "1015: static int",
          "1016: dissect_steam_ihs_discovery(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "1017:         void *data _U_)",
          "1018: {",
          "1020:     proto_item *ti;",
          "1021:     proto_tree *steam_ihs_discovery_tree;",
          "1023:     gint offset = 0;",
          "1024:     gint header_length = 0;",
          "1025:     gint body_length = 0;",
          "1026:     gint total_length = 0;",
          "1027:     gint64 msg_type;",
          "1030:     if (tvb_reported_length(tvb) < STEAM_IHS_DISCOVERY_MIN_LENGTH)",
          "1031:         return 0;",
          "1033:     if (tvb_captured_length(tvb) < STEAM_IHS_DISCOVERY_MIN_LENGTH)",
          "1034:         return 0;",
          "1037:     if (tvb_get_ntoh64(tvb, 0) != STEAM_IHS_DISCOVERY_SIGNATURE_VALUE)",
          "1038:         return 0;",
          "1049:     header_length = tvb_get_letohl(tvb, STEAM_IHS_DISCOVERY_SIGNATURE_LENGTH);",
          "1050:     body_length = tvb_get_letohl(tvb, STEAM_IHS_DISCOVERY_SIGNATURE_LENGTH + 4 + header_length);",
          "1051:     total_length = STEAM_IHS_DISCOVERY_SIGNATURE_LENGTH + 4 + header_length + 4 + body_length;",
          "1054:     if (tvb_reported_length(tvb) != (guint)total_length)",
          "1055:         return 0;",
          "1057:     if (tvb_captured_length(tvb) != (guint)total_length)",
          "1058:         return 0;",
          "1061:     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"STEAMDISCOVER\");",
          "1063:     col_clear(pinfo->cinfo, COL_INFO);",
          "1066:     ti = proto_tree_add_item(tree, proto_steam_ihs_discovery, tvb, 0, -1, ENC_NA);",
          "1068:     steam_ihs_discovery_tree = proto_item_add_subtree(ti, ett_steam_ihs_discovery);",
          "1070:     proto_tree_add_item(steam_ihs_discovery_tree, hf_steam_ihs_discovery_signature, tvb,",
          "1071:             offset, STEAM_IHS_DISCOVERY_SIGNATURE_LENGTH, ENC_LITTLE_ENDIAN);",
          "1072:     offset += STEAM_IHS_DISCOVERY_SIGNATURE_LENGTH;",
          "1074:     proto_tree_add_item(steam_ihs_discovery_tree, hf_steam_ihs_discovery_header_length, tvb,",
          "1075:             offset, 4, ENC_LITTLE_ENDIAN);",
          "1076:     offset += 4;",
          "1078:     msg_type = steamdiscover_dissect_header(tvb, pinfo, steam_ihs_discovery_tree, offset, header_length);",
          "1080:     if ((0 <= msg_type) && (msg_type <= STEAMDISCOVER_MSGTYPES_MAX)) {",
          "1081:         col_set_str(pinfo->cinfo, COL_INFO, hf_steam_ihs_discovery_header_msgtype_strings[msg_type].strptr);",
          "1082:     } else {",
          "1083:         col_set_str(pinfo->cinfo, COL_INFO, \"Unknown Message\");",
          "1084:     }",
          "1086:     offset += header_length;",
          "1088:     proto_tree_add_item(steam_ihs_discovery_tree, hf_steam_ihs_discovery_body_length, tvb,",
          "1089:             offset, 4, ENC_LITTLE_ENDIAN);",
          "1090:     offset += 4;",
          "1092:     switch(msg_type)",
          "1093:     {",
          "1094:         case STEAMDISCOVER_MSGTYPE_CLIENTBROADCASTMSGDISCOVERY:",
          "1095:             steamdiscover_dissect_body_discovery(tvb, pinfo, steam_ihs_discovery_tree, offset, body_length);",
          "1096:             break;",
          "1097:         case STEAMDISCOVER_MSGTYPE_CLIENTBROADCASTMSGSTATUS:",
          "1098:             steamdiscover_dissect_body_status(tvb, pinfo, steam_ihs_discovery_tree, offset, body_length);",
          "1099:             break;",
          "1100:         case STEAMDISCOVER_MSGTYPE_CLIENTBROADCASTMSGOFFLINE:",
          "1102:             break;",
          "1103:         case STEAMDISCOVER_MSGTYPE_DEVICEAUTHORIZATIONREQUEST:",
          "1104:             steamdiscover_dissect_body_authrequest(tvb, pinfo, steam_ihs_discovery_tree, offset, body_length);",
          "1105:             break;",
          "1106:         case STEAMDISCOVER_MSGTYPE_DEVICEAUTHORIZATIONCANCELREQUEST:",
          "1108:             break;",
          "1109:         case STEAMDISCOVER_MSGTYPE_DEVICEAUTHORIZATIONRESPONSE:",
          "1110:             steamdiscover_dissect_body_authresponse(tvb, pinfo, steam_ihs_discovery_tree, offset, body_length);",
          "1111:             break;",
          "1112:         case STEAMDISCOVER_MSGTYPE_DEVICESTREAMINGREQUEST:",
          "1113:             steamdiscover_dissect_body_streamingrequest(tvb, pinfo, steam_ihs_discovery_tree, offset, body_length);",
          "1114:             break;",
          "1115:         case STEAMDISCOVER_MSGTYPE_DEVICESTREAMINGCANCELREQUEST:",
          "1116:             steamdiscover_dissect_body_streamingcancelrequest(tvb, pinfo, steam_ihs_discovery_tree, offset, body_length);",
          "1117:             break;",
          "1118:         case STEAMDISCOVER_MSGTYPE_DEVICESTREAMINGRESPONSE:",
          "1119:             steamdiscover_dissect_body_streamingresponse(tvb, pinfo, steam_ihs_discovery_tree, offset, body_length);",
          "1120:             break;",
          "1121:         case STEAMDISCOVER_MSGTYPE_DEVICEPROOFREQUEST:",
          "1122:             steamdiscover_dissect_body_proofrequest(tvb, pinfo, steam_ihs_discovery_tree, offset, body_length);",
          "1123:             break;",
          "1124:         case STEAMDISCOVER_MSGTYPE_DEVICEPROOFRESPONSE:",
          "1125:             steamdiscover_dissect_body_proofresponse(tvb, pinfo, steam_ihs_discovery_tree, offset, body_length);",
          "1126:             break;",
          "1127:         default:",
          "1128:             steamdiscover_dissect_body_unknown(tvb, pinfo, steam_ihs_discovery_tree, offset, body_length);",
          "1129:             break;",
          "1130:     }",
          "1132:     return tvb_captured_length(tvb);",
          "1133: }",
          "1136: void",
          "1137: proto_register_steam_ihs_discovery(void)",
          "1138: {",
          "1139:     module_t        *steam_ihs_discovery_module;",
          "1140:     expert_module_t *expert_steam_ihs_discovery;",
          "1142:     static hf_register_info hf[] = {",
          "1144:         { &hf_steam_ihs_discovery_signature,",
          "1145:           { \"Signature\", \"steam_ihs_discovery.signature\",",
          "1146:             FT_UINT64, BASE_HEX, NULL, 0,",
          "1147:             \"Every packet of the Steam In-Home Streaming Discovery Protocol begins with this signature.\", HFILL }",
          "1148:         },",
          "1149:         { &hf_steam_ihs_discovery_header_length,",
          "1150:           { \"Header Length\", \"steam_ihs_discovery.header_length\",",
          "1151:             FT_UINT32, BASE_DEC, NULL, 0,",
          "1152:             NULL, HFILL }",
          "1153:         },",
          "1154:         { &hf_steam_ihs_discovery_body_length,",
          "1155:           { \"Body Length\", \"steam_ihs_discovery.body_length\",",
          "1156:             FT_UINT32, BASE_DEC, NULL, 0,",
          "1157:             NULL, HFILL }",
          "1158:         },",
          "1159:         { &hf_steam_ihs_discovery_unknown_data,",
          "1160:           { \"Unknown Data\", \"steam_ihs_discovery.unknown_data\",",
          "1161:             FT_BYTES, BASE_NONE, NULL, 0,",
          "1162:             NULL, HFILL }",
          "1163:         },",
          "1164:         { &hf_steam_ihs_discovery_unknown_number,",
          "1165:           { \"Unknown Number\", \"steam_ihs_discovery.unknown_number\",",
          "1166:             FT_UINT64, BASE_DEC_HEX, NULL, 0,",
          "1167:             NULL, HFILL }",
          "1168:         },",
          "1170:         { &hf_steam_ihs_discovery_header_clientid,",
          "1171:           { \"Client ID\", \"steam_ihs_discovery.header_client_id\",",
          "1172:             FT_UINT64, BASE_DEC_HEX, NULL, 0,",
          "1173:             NULL, HFILL }",
          "1174:         },",
          "1175:         { &hf_steam_ihs_discovery_header_msgtype,",
          "1176:           { \"Message Type\", \"steam_ihs_discovery.header_msg_type\",",
          "1177:             FT_UINT64, BASE_DEC|BASE_VAL64_STRING, VALS64(hf_steam_ihs_discovery_header_msgtype_strings), 0,",
          "1178:             NULL, HFILL }",
          "1179:         },",
          "1180:         { &hf_steam_ihs_discovery_header_instanceid,",
          "1181:           { \"Instance ID\", \"steam_ihs_discovery.header_instance_id\",",
          "1182:             FT_UINT64, BASE_DEC_HEX, NULL, 0,",
          "1183:             NULL, HFILL }",
          "1184:         },",
          "1186:         { &hf_steam_ihs_discovery_body_discovery_seqnum,",
          "1187:           { \"Sequence Number\", \"steam_ihs_discovery.body_discovery_seqnum\",",
          "1188:             FT_UINT32, BASE_DEC, NULL, 0,",
          "1189:             NULL, HFILL }",
          "1190:         },",
          "1191:         { &hf_steam_ihs_discovery_body_discovery_clientids,",
          "1192:           { \"Client IDs\", \"steam_ihs_discovery.body_discovery_clientids\",",
          "1193:             FT_UINT64, BASE_HEX, NULL, 0,",
          "1194:             NULL, HFILL }",
          "1195:         },",
          "1197:         { &hf_steam_ihs_discovery_body_status_version,",
          "1198:           { \"Version\", \"steam_ihs_discovery.body_status_version\",",
          "1199:             FT_INT32, BASE_DEC, NULL, 0,",
          "1200:             NULL, HFILL }",
          "1201:         },",
          "1202:         { &hf_steam_ihs_discovery_body_status_minversion,",
          "1203:           { \"Minimum Version\", \"steam_ihs_discovery.body_status_minversion\",",
          "1204:             FT_INT32, BASE_DEC, NULL, 0,",
          "1205:             NULL, HFILL }",
          "1206:         },",
          "1207:         { &hf_steam_ihs_discovery_body_status_connectport,",
          "1208:           { \"Connect Port\", \"steam_ihs_discovery.body_status_connectport\",",
          "1209:             FT_UINT32, BASE_DEC, NULL, 0,",
          "1210:             NULL, HFILL }",
          "1211:         },",
          "1212:         { &hf_steam_ihs_discovery_body_status_hostname,",
          "1213:           { \"Hostname\", \"steam_ihs_discovery.body_status_hostname\",",
          "1214:             FT_STRING, STR_UNICODE, NULL, 0,",
          "1215:             NULL, HFILL }",
          "1216:         },",
          "1217:         { &hf_steam_ihs_discovery_body_status_enabledservices,",
          "1218:           { \"Enabled Services\", \"steam_ihs_discovery.body_status_enabledservices\",",
          "1219:             FT_UINT32, BASE_HEX, NULL, 0,",
          "1220:             NULL, HFILL }",
          "1221:         },",
          "1222:         { &hf_steam_ihs_discovery_body_status_ostype,",
          "1223:           { \"OS Type\", \"steam_ihs_discovery.body_status_ostype\",",
          "1224:             FT_INT32, BASE_DEC, NULL, 0,",
          "1225:             NULL, HFILL }",
          "1226:         },",
          "1227:         { &hf_steam_ihs_discovery_body_status_is64bit,",
          "1228:           { \"Is 64 Bit\", \"steam_ihs_discovery.body_status_is64bit\",",
          "1229:             FT_BOOLEAN, BASE_NONE, NULL, 0,",
          "1230:             NULL, HFILL }",
          "1231:         },",
          "1232:         { &hf_steam_ihs_discovery_body_status_euniverse,",
          "1233:           { \"EUniverse\", \"steam_ihs_discovery.body_status_euniverse\",",
          "1234:             FT_INT32, BASE_DEC, NULL, 0,",
          "1235:             NULL, HFILL }",
          "1236:         },",
          "1237:         { &hf_steam_ihs_discovery_body_status_timestamp,",
          "1238:           { \"Timestamp\", \"steam_ihs_discovery.body_status_timestamp\",",
          "1239:             FT_ABSOLUTE_TIME, ABSOLUTE_TIME_LOCAL, NULL, 0,",
          "1240:             NULL, HFILL }",
          "1241:         },",
          "1242:         { &hf_steam_ihs_discovery_body_status_screenlocked,",
          "1243:           { \"Screen Locked\", \"steam_ihs_discovery.body_status_screenlocked\",",
          "1244:             FT_BOOLEAN, BASE_NONE, NULL, 0,",
          "1245:             NULL, HFILL }",
          "1246:         },",
          "1247:         { &hf_steam_ihs_discovery_body_status_gamesrunning,",
          "1248:           { \"Games Running\", \"steam_ihs_discovery.body_status_gamesrunning\",",
          "1249:             FT_BOOLEAN, BASE_NONE, NULL, 0,",
          "1250:             NULL, HFILL }",
          "1251:         },",
          "1252:         { &hf_steam_ihs_discovery_body_status_macaddresses,",
          "1253:           { \"MAC Addresses\", \"steam_ihs_discovery.body_status_macaddresses\",",
          "1254:             FT_STRING, STR_ASCII, NULL, 0,",
          "1255:             NULL, HFILL }",
          "1256:         },",
          "1258:         { &hf_steam_ihs_discovery_body_status_user_steamid,",
          "1259:           { \"Steam ID\", \"steam_ihs_discovery.body_status_user_steamid\",",
          "1260:             FT_UINT64, BASE_DEC, NULL, 0,",
          "1261:             NULL, HFILL }",
          "1262:         },",
          "1263:         { &hf_steam_ihs_discovery_body_status_user_authkeyid,",
          "1264:           { \"Auth Key ID\", \"steam_ihs_discovery.body_status_user_authkeyid\",",
          "1265:             FT_UINT32, BASE_DEC, NULL, 0,",
          "1266:             NULL, HFILL }",
          "1267:         },",
          "1269:         { &hf_steam_ihs_discovery_body_authrequest_devicetoken,",
          "1270:           { \"Device Token\", \"steam_ihs_discovery.body_authrequest_devicetoken\",",
          "1271:             FT_BYTES, BASE_NONE, NULL, 0,",
          "1272:             NULL, HFILL }",
          "1273:         },",
          "1274:         { &hf_steam_ihs_discovery_body_authrequest_devicename,",
          "1275:           { \"Device Name\", \"steam_ihs_discovery.body_authrequest_devicename\",",
          "1276:             FT_STRING, STR_UNICODE, NULL, 0,",
          "1277:             NULL, HFILL }",
          "1278:         },",
          "1279:         { &hf_steam_ihs_discovery_body_authrequest_encryptedrequest,",
          "1280:           { \"Encrypted Request\", \"steam_ihs_discovery.body_authrequest_encryptedrequest\",",
          "1281:             FT_BYTES, BASE_NO_DISPLAY_VALUE, NULL, 0,",
          "1282:             NULL, HFILL }",
          "1283:         },",
          "1285:         { &hf_steam_ihs_discovery_body_authresponse_authresult,",
          "1286:           { \"Result\", \"steam_ihs_discovery.body_authresponse_authresult\",",
          "1287:             FT_UINT64, BASE_DEC|BASE_VAL64_STRING, VALS64(hf_steam_ihs_discovery_body_authresponse_authresult_strings), 0,",
          "1288:             NULL, HFILL }",
          "1289:         },",
          "1291:         { &hf_steam_ihs_discovery_body_streamingrequest_requestid,",
          "1292:           { \"Request ID\", \"steam_ihs_discovery.body_streamingrequest_requestid\",",
          "1293:             FT_UINT32, BASE_HEX, NULL, 0,",
          "1294:             NULL, HFILL }",
          "1295:         },",
          "1296:         { &hf_steam_ihs_discovery_body_streamingrequest_maximumresolutionx,",
          "1297:           { \"Maximum Resolution X\", \"steam_ihs_discovery.body_streamingrequest_maximumresolutionx\",",
          "1298:             FT_INT32, BASE_DEC, NULL, 0,",
          "1299:             NULL, HFILL }",
          "1300:         },",
          "1301:         { &hf_steam_ihs_discovery_body_streamingrequest_maximumresolutiony,",
          "1302:           { \"Maximum Resolution Y\", \"steam_ihs_discovery.body_streamingrequest_maximumresolutiony\",",
          "1303:             FT_INT32, BASE_DEC, NULL, 0,",
          "1304:             NULL, HFILL }",
          "1305:         },",
          "1306:         { &hf_steam_ihs_discovery_body_streamingrequest_audiochannelcount,",
          "1307:           { \"Audio Channel Count\", \"steam_ihs_discovery.body_streamingrequest_audiochannelcount\",",
          "1308:             FT_INT32, BASE_DEC, NULL, 0,",
          "1309:             NULL, HFILL }",
          "1310:         },",
          "1311:         { &hf_steam_ihs_discovery_body_streamingrequest_deviceversion,",
          "1312:           { \"Device Version\", \"steam_ihs_discovery.body_streamingrequest_deviceversion\",",
          "1313:             FT_STRING, STR_UNICODE, NULL, 0,",
          "1314:             NULL, HFILL }",
          "1315:         },",
          "1316:         { &hf_steam_ihs_discovery_body_streamingrequest_streamdesktop,",
          "1317:           { \"Stream Desktop\", \"steam_ihs_discovery.body_streamingrequest_streamdesktop\",",
          "1318:             FT_BOOLEAN, BASE_NONE, NULL, 0,",
          "1319:             NULL, HFILL }",
          "1320:         },",
          "1321:         { &hf_steam_ihs_discovery_body_streamingrequest_devicetoken,",
          "1322:           { \"Device Token\", \"steam_ihs_discovery.body_streamingrequest_devicetoken\",",
          "1323:             FT_BYTES, BASE_NONE, NULL, 0,",
          "1324:             NULL, HFILL }",
          "1325:         },",
          "1326:         { &hf_steam_ihs_discovery_body_streamingrequest_pin,",
          "1327:           { \"PIN\", \"steam_ihs_discovery.body_streamingrequest_pin\",",
          "1328:             FT_BYTES, BASE_NONE, NULL, 0,",
          "1329:             NULL, HFILL }",
          "1330:         },",
          "1331:         { &hf_steam_ihs_discovery_body_streamingrequest_enablevideostreaming,",
          "1332:           { \"Enable Video Streaming\", \"steam_ihs_discovery.body_streamingrequest_enablevideostreaming\",",
          "1333:             FT_BOOLEAN, BASE_NONE, NULL, 0,",
          "1334:             NULL, HFILL }",
          "1335:         },",
          "1336:         { &hf_steam_ihs_discovery_body_streamingrequest_enableaudiostreaming,",
          "1337:           { \"Enable Audio Streaming\", \"steam_ihs_discovery.body_streamingrequest_enableaudiostreaming\",",
          "1338:             FT_BOOLEAN, BASE_NONE, NULL, 0,",
          "1339:             NULL, HFILL }",
          "1340:         },",
          "1341:         { &hf_steam_ihs_discovery_body_streamingrequest_enableinputstreaming,",
          "1342:           { \"Enable Input Streaming\", \"steam_ihs_discovery.body_streamingrequest_enableinputstreaming\",",
          "1343:             FT_BOOLEAN, BASE_NONE, NULL, 0,",
          "1344:             NULL, HFILL }",
          "1345:         },",
          "1347:         { &hf_steam_ihs_discovery_body_streamingcancelrequest_requestid,",
          "1348:           { \"Request ID\", \"steam_ihs_discovery.body_streamingcancelrequest_requestid\",",
          "1349:             FT_UINT32, BASE_HEX, NULL, 0,",
          "1350:             NULL, HFILL }",
          "1351:         },",
          "1353:         { &hf_steam_ihs_discovery_body_streamingresponse_requestid,",
          "1354:           { \"Request ID\", \"steam_ihs_discovery.body_streamingresponse_requestid\",",
          "1355:             FT_UINT32, BASE_HEX, NULL, 0,",
          "1356:             NULL, HFILL }",
          "1357:         },",
          "1358:         { &hf_steam_ihs_discovery_body_streamingresponse_result,",
          "1359:           { \"Result\", \"steam_ihs_discovery.body_streamingresponse_result\",",
          "1360:             FT_UINT64, BASE_DEC|BASE_VAL64_STRING, VALS64(hf_steam_ihs_discovery_body_streamingresponse_result_strings), 0,",
          "1361:             NULL, HFILL }",
          "1362:         },",
          "1363:         { &hf_steam_ihs_discovery_body_streamingresponse_port,",
          "1364:           { \"Port\", \"steam_ihs_discovery.body_streamingresponse_port\",",
          "1365:             FT_UINT32, BASE_DEC, NULL, 0,",
          "1366:             NULL, HFILL }",
          "1367:         },",
          "1368:         { &hf_steam_ihs_discovery_body_streamingresponse_encryptedsessionkey,",
          "1369:           { \"Encrypted Session Key\", \"steam_ihs_discovery.body_streamingresponse_encryptedsessionkey\",",
          "1370:             FT_BYTES, BASE_NONE, NULL, 0,",
          "1371:             NULL, HFILL }",
          "1372:         },",
          "1373:         { &hf_steam_ihs_discovery_body_streamingresponse_virtualherelicenseddevicecount,",
          "1374:           { \"VirtualHere Licensed Device Count\", \"steam_ihs_discovery.body_streamingresponse_virtualherelicenseddevicecount\",",
          "1375:             FT_INT32, BASE_DEC, NULL, 0,",
          "1376:             NULL, HFILL }",
          "1377:         },",
          "1379:         { &hf_steam_ihs_discovery_body_proofrequest_challenge,",
          "1380:           { \"Challenge\", \"steam_ihs_discovery.body_proofrequest_challenge\",",
          "1381:             FT_BYTES, BASE_NONE, NULL, 0,",
          "1382:             NULL, HFILL }",
          "1383:         },",
          "1385:         { &hf_steam_ihs_discovery_body_proofresponse_response,",
          "1386:           { \"Reponse\", \"steam_ihs_discovery.body_proofresponse_response\",",
          "1387:             FT_BYTES, BASE_NONE, NULL, 0,",
          "1388:             NULL, HFILL }",
          "1389:         }",
          "1390:     };",
          "1393:     static gint *ett[] = {",
          "1394:         &ett_steam_ihs_discovery,",
          "1395:         &ett_steam_ihs_discovery_body_status_user",
          "1396:     };",
          "1399:     static ei_register_info ei[] = {",
          "1400:         { &ei_steam_ihs_discovery_unknown_data,",
          "1401:           { \"steam_ihs_discovery.unknowndata\", PI_UNDECODED, PI_WARN,",
          "1402:             \"Unknown data section\", EXPFILL }",
          "1403:         },",
          "1404:         { &ei_steam_ihs_discovery_unknown_number,",
          "1405:           { \"steam_ihs_discovery.unknownnumber\", PI_UNDECODED, PI_WARN,",
          "1406:             \"Unknown numeric protobuf field\", EXPFILL }",
          "1407:         },",
          "1408:         { &ei_steam_ihs_discovery_unknown_lengthdelimited,",
          "1409:           { \"steam_ihs_discovery.unknownlengthdelimited\", PI_UNDECODED, PI_WARN,",
          "1410:             \"Unknown length-delimited protobuf field\", EXPFILL }",
          "1411:         },",
          "1412:         { &ei_steam_ihs_discovery_invalid_wiretype,",
          "1413:           { \"steam_ihs_discovery.invalid_wiretype\", PI_MALFORMED, PI_ERROR,",
          "1414:             \"Unexpected wire type\", EXPFILL }",
          "1415:         },",
          "1416:         { &ei_steam_ihs_discovery_invalid_length,",
          "1417:           { \"steam_ihs_discovery.invalid_length\", PI_MALFORMED, PI_ERROR,",
          "1418:             \"Length-delimited field has invalid length\", EXPFILL }",
          "1419:         }",
          "1420:     };",
          "1423:     proto_steam_ihs_discovery = proto_register_protocol(\"Steam In-Home Streaming Discovery Protocol\",",
          "1424:             \"Steam IHS Discovery\", \"steam_ihs_discovery\");",
          "1427:     proto_register_field_array(proto_steam_ihs_discovery, hf, array_length(hf));",
          "1428:     proto_register_subtree_array(ett, array_length(ett));",
          "1431:     expert_steam_ihs_discovery = expert_register_protocol(proto_steam_ihs_discovery);",
          "1432:     expert_register_field_array(expert_steam_ihs_discovery, ei, array_length(ei));",
          "1435:     steam_ihs_discovery_module = prefs_register_protocol(proto_steam_ihs_discovery,",
          "1436:             proto_reg_handoff_steam_ihs_discovery);",
          "1439:     prefs_register_uint_preference(steam_ihs_discovery_module, \"udp.port\", \"steam_ihs_discovery UDP Port\",",
          "1440:             \" Steam IHS Discovery UDP port if other than the default\",",
          "1441:             10, &udp_port_pref);",
          "1442: }",
          "1444: void",
          "1445: proto_reg_handoff_steam_ihs_discovery(void)",
          "1446: {",
          "1447:     static gboolean initialized = FALSE;",
          "1448:     static dissector_handle_t steam_ihs_discovery_handle;",
          "1449:     static int current_port;",
          "1451:     if (!initialized) {",
          "1452:         steam_ihs_discovery_handle = create_dissector_handle(dissect_steam_ihs_discovery,",
          "1453:                 proto_steam_ihs_discovery);",
          "1454:         initialized = TRUE;",
          "1456:     } else {",
          "1457:         dissector_delete_uint(\"udp.port\", current_port, steam_ihs_discovery_handle);",
          "1458:     }",
          "1460:     current_port = udp_port_pref;",
          "1462:     dissector_add_uint(\"udp.port\", current_port, steam_ihs_discovery_handle);",
          "1463: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}