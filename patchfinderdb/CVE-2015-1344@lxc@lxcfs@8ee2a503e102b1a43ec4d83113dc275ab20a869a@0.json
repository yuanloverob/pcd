{
  "cve_id": "CVE-2015-1344",
  "cve_desc": "The do_write_pids function in lxcfs.c in LXCFS before 0.12 does not properly check permissions, which allows local users to gain privileges by writing a pid to the tasks file.",
  "repo": "lxc/lxcfs",
  "patch_hash": "8ee2a503e102b1a43ec4d83113dc275ab20a869a",
  "patch_info": {
    "commit_hash": "8ee2a503e102b1a43ec4d83113dc275ab20a869a",
    "repo": "lxc/lxcfs",
    "commit_url": "https://github.com/lxc/lxcfs/commit/8ee2a503e102b1a43ec4d83113dc275ab20a869a",
    "files": [
      "lxcfs.c"
    ],
    "message": "Implement privilege check when moving tasks\n\nWhen writing pids to a tasks file in lxcfs, lxcfs was checking\nfor privilege over the tasks file but not over the pid being\nmoved.  Since the cgm_movepid request is done as root on the host,\nnot with the requestor's credentials, we must copy the check which\ncgmanager was doing to ensure that the requesting task is allowed\nto change the victim task's cgroup membership.\n\nThis is CVE-2015-1344\nhttps://bugs.launchpad.net/ubuntu/+source/lxcfs/+bug/1512854\n\nSigned-off-by: Serge Hallyn <serge.hallyn@ubuntu.com>",
    "before_after_code_files": [
      "lxcfs.c||lxcfs.c"
    ]
  },
  "patch_diff": {
    "lxcfs.c||lxcfs.c": [
      "File: lxcfs.c -> lxcfs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1336:  goto loop;",
      "1337: }",
      "1340: {",
      "1341:  int sock[2] = {-1, -1};",
      "1342:  pid_t qpid, cpid = -1;",
      "",
      "[Removed Lines]",
      "1339: static bool do_write_pids(pid_t tpid, const char *contrl, const char *cg, const char *file, const char *buf)",
      "",
      "[Added Lines]",
      "1343: bool hostuid_to_ns(uid_t uid, pid_t pid, uid_t *answer)",
      "1344: {",
      "1345:  FILE *f;",
      "1346:  char line[400];",
      "1348:  sprintf(line, \"/proc/%d/uid_map\", pid);",
      "1349:  if ((f = fopen(line, \"r\")) == NULL) {",
      "1350:   return false;",
      "1351:  }",
      "1354:  fclose(f);",
      "1356:  if (*answer == -1)",
      "1357:   return false;",
      "1358:  return true;",
      "1359: }",
      "1366: void get_pid_creds(pid_t pid, uid_t *uid, gid_t *gid)",
      "1367: {",
      "1368:  char line[400];",
      "1369:  uid_t u;",
      "1370:  gid_t g;",
      "1371:  FILE *f;",
      "1375:  sprintf(line, \"/proc/%d/status\", pid);",
      "1376:  if ((f = fopen(line, \"r\")) == NULL) {",
      "1377:   fprintf(stderr, \"Error opening %s: %s\\n\", line, strerror(errno));",
      "1378:   return;",
      "1379:  }",
      "1380:  while (fgets(line, 400, f)) {",
      "1381:   if (strncmp(line, \"Uid:\", 4) == 0) {",
      "1382:    if (sscanf(line+4, \"%u\", &u) != 1) {",
      "1383:     fprintf(stderr, \"bad uid line for pid %u\\n\", pid);",
      "1384:     fclose(f);",
      "1385:     return;",
      "1386:    }",
      "1388:   } else if (strncmp(line, \"Gid:\", 4) == 0) {",
      "1389:    if (sscanf(line+4, \"%u\", &g) != 1) {",
      "1390:     fprintf(stderr, \"bad gid line for pid %u\\n\", pid);",
      "1391:     fclose(f);",
      "1392:     return;",
      "1393:    }",
      "1395:   }",
      "1396:  }",
      "1397:  fclose(f);",
      "1398: }",
      "1408: bool may_move_pid(pid_t r, uid_t r_uid, pid_t v)",
      "1409: {",
      "1410:  uid_t v_uid, tmpuid;",
      "1411:  gid_t v_gid;",
      "1413:  if (r == v)",
      "1414:   return true;",
      "1415:  if (r_uid == 0)",
      "1416:   return true;",
      "1417:  get_pid_creds(v, &v_uid, &v_gid);",
      "1418:  if (r_uid == v_uid)",
      "1419:   return true;",
      "1420:  if (hostuid_to_ns(r_uid, r, &tmpuid) && tmpuid == 0",
      "1421:    && hostuid_to_ns(v_uid, r, &tmpuid))",
      "1422:   return true;",
      "1423:  return false;",
      "1424: }",
      "1426: static bool do_write_pids(pid_t tpid, uid_t tuid, const char *contrl, const char *cg,",
      "1427:   const char *file, const char *buf)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1379:   if (recv_creds(sock[0], &cred, &v)) {",
      "1380:    if (v == '0') {",
      "1381:     if (fprintf(pids_file, \"%d\", (int) cred.pid) < 0)",
      "1382:      fail = true;",
      "1383:    }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1469:     if (!may_move_pid(tpid, tuid, cred.pid)) {",
      "1470:      fail = true;",
      "1471:      break;",
      "1472:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1450:    strcmp(f->file, \"/cgroup.procs\") == 0 ||",
      "1451:    strcmp(f->file, \"cgroup.procs\") == 0)",
      "1454:  else",
      "1455:   r = cgfs_set_value(f->controller, f->cgroup, f->file, localbuf);",
      "",
      "[Removed Lines]",
      "1453:   r = do_write_pids(fc->pid, f->controller, f->cgroup, f->file, localbuf);",
      "",
      "[Added Lines]",
      "1545:   r = do_write_pids(fc->pid, fc->uid, f->controller, f->cgroup, f->file, localbuf);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0afd85bd4b9c2ca65d082d3c2b4ec1466aeefb72",
      "candidate_info": {
        "commit_hash": "0afd85bd4b9c2ca65d082d3c2b4ec1466aeefb72",
        "repo": "lxc/lxcfs",
        "commit_url": "https://github.com/lxc/lxcfs/commit/0afd85bd4b9c2ca65d082d3c2b4ec1466aeefb72",
        "files": [
          "lxcfs.c"
        ],
        "message": "simplify getreaperage\n\nWe don't need to switch to their ns, mount their proc, and check /proc/1.\nJust find out their init pid using scm credentials and check /pid/$initpid\nin our own procfs.\n\nSigned-off-by: Serge Hallyn <serge.hallyn@ubuntu.com>",
        "before_after_code_files": [
          "lxcfs.c||lxcfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lxcfs.c||lxcfs.c"
          ],
          "candidate": [
            "lxcfs.c||lxcfs.c"
          ]
        }
      },
      "candidate_diff": {
        "lxcfs.c||lxcfs.c": [
          "File: lxcfs.c -> lxcfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:  (*src)[*sz] = '\\0';",
          "84: }",
          "86: static int wait_for_pid(pid_t pid)",
          "87: {",
          "88:  int status, ret;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86: static pid_t get_init_pid_for_task(pid_t task);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2352:  return rv;",
          "2353: }",
          "2374: {",
          "2375:  char fnam[100];",
          "2377:  struct stat sb;",
          "2393:   return 0;",
          "2403:   return 0;",
          "2472:   return 0;",
          "2512: }",
          "",
          "[Removed Lines]",
          "2373: static long int get_pid1_time(pid_t pid)",
          "2376:  int fd, cpipe[2], ret;",
          "2378:  pid_t cpid;",
          "2379:  struct timeval tv;",
          "2380:  fd_set s;",
          "2381:  long int v;",
          "2383:  if (unshare(CLONE_NEWNS))",
          "2384:   return 0;",
          "2386:  if (mount(NULL, \"/\", NULL, MS_SLAVE|MS_REC, NULL)) {",
          "2387:   perror(\"rslave mount failed\");",
          "2388:   return 0;",
          "2389:  }",
          "2391:  ret = snprintf(fnam, sizeof(fnam), \"/proc/%d/ns/pid\", pid);",
          "2392:  if (ret < 0 || ret >= sizeof(fnam))",
          "2395:  fd = open(fnam, O_RDONLY);",
          "2396:  if (fd < 0) {",
          "2397:   perror(\"get_pid1_time open of ns/pid\");",
          "2398:   return 0;",
          "2399:  }",
          "2400:  if (setns(fd, 0)) {",
          "2401:   perror(\"get_pid1_time setns 1\");",
          "2402:   close(fd);",
          "2404:  }",
          "2405:  close(fd);",
          "2407:  if (pipe(cpipe) < 0)",
          "2408:   return(0);",
          "2410:  cpid = fork();",
          "2411:  if (cpid < 0) {",
          "2412:   close(cpipe[0]);",
          "2413:   close(cpipe[1]);",
          "2414:   return 0;",
          "2415:  }",
          "2417:  if (!cpid) {",
          "2418:   close(cpipe[0]);",
          "2419:   umount2(\"/proc\", MNT_DETACH);",
          "2420:   if (mount(\"proc\", \"/proc\", \"proc\", 0, NULL)) {",
          "2421:    perror(\"get_pid1_time mount\");",
          "2422:    _exit(1);",
          "2423:   }",
          "2424:   ret = lstat(\"/proc/1\", &sb);",
          "2425:   if (ret) {",
          "2426:    perror(\"get_pid1_time lstat\");",
          "2427:    _exit(1);",
          "2428:   }",
          "2429:   long int retval = time(NULL) - sb.st_ctime;",
          "2430:   if (write(cpipe[1], &retval, sizeof(retval)) < 0) {",
          "2431:    fprintf(stderr, \"%s (child): erorr on write: %s\\n\",",
          "2432:      __func__, strerror(errno));",
          "2433:   }",
          "2434:   close(cpipe[1]);",
          "2435:   _exit(0);",
          "2436:  }",
          "2437:  close(cpipe[1]);",
          "2441:  FD_ZERO(&s);",
          "2442:  FD_SET(cpipe[0], &s);",
          "2443:  tv.tv_sec = 1;",
          "2444:  tv.tv_usec = 0;",
          "2445:  ret = select(cpipe[0]+1, &s, NULL, NULL, &tv);",
          "2446:  if (ret <= 0)",
          "2447:   goto fail;",
          "2448:  ret = read(cpipe[0], &v, sizeof(v));",
          "2449:  if (ret != sizeof(v))",
          "2450:   goto fail;",
          "2452:  wait_for_pid(cpid);",
          "2454:  close(cpipe[0]);",
          "2455:  return v;",
          "2457: fail:",
          "2458:  kill(cpid, SIGKILL);",
          "2459:  wait_for_pid(cpid);",
          "2460:  close(cpipe[0]);",
          "2461:  return 0;",
          "2462: }",
          "2464: static long int getreaperage(pid_t qpid)",
          "2465: {",
          "2466:  int pid, mypipe[2], ret;",
          "2467:  struct timeval tv;",
          "2468:  fd_set s;",
          "2469:  long int mtime, answer = 0;",
          "2471:  if (pipe(mypipe)) {",
          "2473:  }",
          "2475:  pid = fork();",
          "2477:  if (!pid) { // child",
          "2478:   mtime = get_pid1_time(qpid);",
          "2479:   if (write(mypipe[1], &mtime, sizeof(mtime)) != sizeof(mtime))",
          "2480:    fprintf(stderr, \"Warning: bad write from getreaperage\\n\");",
          "2481:   _exit(0);",
          "2482:  }",
          "2484:  close(mypipe[1]);",
          "2486:  if (pid < 0)",
          "2487:   goto out;",
          "2489:  FD_ZERO(&s);",
          "2490:  FD_SET(mypipe[0], &s);",
          "2491:  tv.tv_sec = 1;",
          "2492:  tv.tv_usec = 0;",
          "2493:  ret = select(mypipe[0]+1, &s, NULL, NULL, &tv);",
          "2494:  if (ret <= 0) {",
          "2495:   perror(\"select\");",
          "2496:   goto out;",
          "2497:  }",
          "2498:  if (!ret) {",
          "2499:   fprintf(stderr, \"timed out\\n\");",
          "2500:   goto out;",
          "2501:  }",
          "2502:  if (read(mypipe[0], &mtime, sizeof(mtime)) != sizeof(mtime)) {",
          "2503:   perror(\"read\");",
          "2504:   goto out;",
          "2505:  }",
          "2506:  answer = mtime;",
          "2508: out:",
          "2509:  wait_for_pid(pid);",
          "2510:  close(mypipe[0]);",
          "2511:  return answer;",
          "",
          "[Added Lines]",
          "2357: static long int getreaperage(pid_t pid)",
          "2361:  int ret;",
          "2362:  pid_t qpid;",
          "2364:  qpid = get_init_pid_for_task(pid);",
          "2365:  if (qpid < 0)",
          "2368:  ret = snprintf(fnam, 100, \"/proc/%d\", qpid);",
          "2369:  if (ret < 0 || ret >= 100)",
          "2372:  if (lstat(fnam, &sb) < 0)",
          "2375:  return time(NULL) - sb.st_ctime;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8ab43c9f3fb7e3e324ce56db172be8d63ed3a875",
      "candidate_info": {
        "commit_hash": "8ab43c9f3fb7e3e324ce56db172be8d63ed3a875",
        "repo": "lxc/lxcfs",
        "commit_url": "https://github.com/lxc/lxcfs/commit/8ab43c9f3fb7e3e324ce56db172be8d63ed3a875",
        "files": [
          "lxcfs.c"
        ],
        "message": "remove stray debug statement\n\nSigned-off-by: Serge Hallyn <serge.hallyn@ubuntu.com>",
        "before_after_code_files": [
          "lxcfs.c||lxcfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lxcfs.c||lxcfs.c"
          ],
          "candidate": [
            "lxcfs.c||lxcfs.c"
          ]
        }
      },
      "candidate_diff": {
        "lxcfs.c||lxcfs.c": [
          "File: lxcfs.c -> lxcfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1730:  }",
          "1732:  ret = cgfs_create(controller, cgroup, fc->uid, fc->gid);",
          "1735: out:",
          "1736:  free(cgdir);",
          "",
          "[Removed Lines]",
          "1733:  printf(\"cgfs_create returned %d for %s %s\\n\", ret, controller, cgroup);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "711b4030d2845dcf4ef697680e1574daf980c07f",
      "candidate_info": {
        "commit_hash": "711b4030d2845dcf4ef697680e1574daf980c07f",
        "repo": "lxc/lxcfs",
        "commit_url": "https://github.com/lxc/lxcfs/commit/711b4030d2845dcf4ef697680e1574daf980c07f",
        "files": [
          "lxcfs.c"
        ],
        "message": "Remove unused chunks in caching code\n\nSeveral pieces of code which deal with caching contents for proc\nfiles contain code like this:\n\n  if (l >= cache_size) {\n      ...\n      goto err;\n  }\n  if (l < cache_size) {\n      ...\n  } else {\n      ...\n  }\n\nWhen the first condition is false the second condition will\nalways be true, so the code in the else block is never used.\nThe second if/else statement can then just be replaced with the\ncode from the if block.\n\nSigned-off-by: Seth Forshee <seth.forshee@canonical.com>",
        "before_after_code_files": [
          "lxcfs.c||lxcfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lxcfs.c||lxcfs.c"
          ],
          "candidate": [
            "lxcfs.c||lxcfs.c"
          ]
        }
      },
      "candidate_diff": {
        "lxcfs.c||lxcfs.c": [
          "File: lxcfs.c -> lxcfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2191:    rv = 0;",
          "2192:    goto err;",
          "2193:   }",
          "2204:  }",
          "2206:  d->size = total_len;",
          "",
          "[Removed Lines]",
          "2194:   if (l < cache_size) {",
          "2195:    cache += l;",
          "2196:    cache_size -= l;",
          "2197:    total_len += l;",
          "2198:   } else {",
          "2199:    cache += cache_size;",
          "2200:    total_len += cache_size;",
          "2201:    cache_size = 0;",
          "2202:    break;",
          "2203:   }",
          "",
          "[Added Lines]",
          "2194:   cache += l;",
          "2195:   cache_size -= l;",
          "2196:   total_len += l;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2491:      rv = 0;",
          "2492:      goto err;",
          "2493:     }",
          "2504:    }",
          "2505:    continue;",
          "2506:   }",
          "",
          "[Removed Lines]",
          "2494:     if (l < cache_size){",
          "2495:      cache += l;",
          "2496:      cache_size -= l;",
          "2497:      total_len += l;",
          "2498:     }else{",
          "2499:      cache += cache_size;",
          "2500:      total_len += cache_size;",
          "2501:      cache_size = 0;",
          "2502:      break;",
          "2503:     }",
          "",
          "[Added Lines]",
          "2487:     cache += l;",
          "2488:     cache_size -= l;",
          "2489:     total_len += l;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2516:     rv = 0;",
          "2517:     goto err;",
          "2518:    }",
          "2529:   }",
          "2530:  }",
          "",
          "[Removed Lines]",
          "2519:    if (l < cache_size) {",
          "2520:     cache += l;",
          "2521:     cache_size -= l;",
          "2522:     total_len += l;",
          "2523:    } else {",
          "2524:     cache += cache_size;",
          "2525:     total_len += cache_size;",
          "2526:     cache_size = 0;",
          "2527:     break;",
          "2528:    }",
          "",
          "[Added Lines]",
          "2505:    cache += l;",
          "2506:    cache_size -= l;",
          "2507:    total_len += l;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2616:     rv = 0;",
          "2617:     goto err;",
          "2618:    }",
          "2631:   }",
          "2633:   if (sscanf(cpu_char, \"%d\", &cpu) != 1)",
          "",
          "[Removed Lines]",
          "2619:    if (l < cache_size) {",
          "2620:     cache += l;",
          "2621:     cache_size -= l;",
          "2622:     total_len += l;",
          "2623:     continue;",
          "2624:    } else {",
          "2626:     cache += cache_size;",
          "2627:     total_len += cache_size;",
          "2628:     cache_size = 0;",
          "2629:     break;",
          "2630:    }",
          "",
          "[Added Lines]",
          "2598:    cache += l;",
          "2599:    cache_size -= l;",
          "2600:    total_len += l;",
          "2601:    continue;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "826297d791f7d1de2df4e0ea7db809f5cc154ba9",
      "candidate_info": {
        "commit_hash": "826297d791f7d1de2df4e0ea7db809f5cc154ba9",
        "repo": "lxc/lxcfs",
        "commit_url": "https://github.com/lxc/lxcfs/commit/826297d791f7d1de2df4e0ea7db809f5cc154ba9",
        "files": [
          "lxcfs.c",
          "pam/pam_cgfs.c"
        ],
        "message": "Avoid theoretical underflow in prune_init_{slice,scope}\n\nIn practice these should never underflow, but in theory it's possible.\n\nSigned-off-by: Seth Forshee <seth.forshee@canonical.com>",
        "before_after_code_files": [
          "lxcfs.c||lxcfs.c",
          "pam/pam_cgfs.c||pam/pam_cgfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lxcfs.c||lxcfs.c"
          ],
          "candidate": [
            "lxcfs.c||lxcfs.c"
          ]
        }
      },
      "candidate_diff": {
        "lxcfs.c||lxcfs.c": [
          "File: lxcfs.c -> lxcfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "664: static void prune_init_slice(char *cg)",
          "665: {",
          "666:  char *point;",
          "670:  if (strcmp(point, INITSCOPE) == 0) {",
          "671:   if (point == cg)",
          "",
          "[Removed Lines]",
          "667:  point = cg + strlen(cg) - strlen(INITSCOPE);",
          "668:  if (point < cg)",
          "669:    return;",
          "",
          "[Added Lines]",
          "667:  size_t cg_len = strlen(cg), initscope_len = strlen(INITSCOPE);",
          "669:  if (cg_len < initscope_len)",
          "670:   return;",
          "672:  point = cg + cg_len - initscope_len;",
          "",
          "---------------"
        ],
        "pam/pam_cgfs.c||pam/pam_cgfs.c": [
          "File: pam/pam_cgfs.c -> pam/pam_cgfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "260: static void prune_init_scope(char *cg)",
          "261: {",
          "262:  char *point;",
          "264:  if (!cg)",
          "265:   return;",
          "269:   return;",
          "270:  if (strcmp(point, INIT_SCOPE) == 0) {",
          "271:   if (point == cg)",
          "",
          "[Removed Lines]",
          "267:  point = cg + strlen(cg) - strlen(INIT_SCOPE);",
          "268:  if (point < cg)",
          "",
          "[Added Lines]",
          "263:  size_t cg_len, initscope_len;",
          "268:  cg_len = strlen(cg);",
          "269:  initscope_len = strlen(INIT_SCOPE);",
          "270:  if (cg_len < initscope_len)",
          "273:  point = cg + cg_len - initscope_len;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6d1308cb68f702a7d18f2f61022d84798c427ae7",
      "candidate_info": {
        "commit_hash": "6d1308cb68f702a7d18f2f61022d84798c427ae7",
        "repo": "lxc/lxcfs",
        "commit_url": "https://github.com/lxc/lxcfs/commit/6d1308cb68f702a7d18f2f61022d84798c427ae7",
        "files": [
          "lxcfs.c"
        ],
        "message": "turn pidns store into a hashtable\n\nSigned-off-by: Serge Hallyn <serge.hallyn@ubuntu.com>",
        "before_after_code_files": [
          "lxcfs.c||lxcfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lxcfs.c||lxcfs.c"
          ],
          "candidate": [
            "lxcfs.c||lxcfs.c"
          ]
        }
      },
      "candidate_diff": {
        "lxcfs.c||lxcfs.c": [
          "File: lxcfs.c -> lxcfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:  long int lastcheck;",
          "84: };",
          "87: static pthread_mutex_t pidns_store_mutex = PTHREAD_MUTEX_INITIALIZER;",
          "88: static void lock_mutex(pthread_mutex_t *l)",
          "89: {",
          "",
          "[Removed Lines]",
          "86: struct pidns_init_store *pidns_inits;",
          "",
          "[Added Lines]",
          "85: #define PIDNS_HASH_SIZE 4096",
          "86: #define HASH(x) (x % PIDNS_HASH_SIZE)",
          "88: struct pidns_init_store *pidns_hash_table[PIDNS_HASH_SIZE];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "137: static void remove_initpid(struct pidns_init_store *e)",
          "138: {",
          "139:  struct pidns_init_store *tmp;",
          "141: #if DEBUG",
          "142:  fprintf(stderr, \"remove_initpid: removing entry for %d\\n\", e->initpid);",
          "143: #endif",
          "146:   free(e);",
          "147:   return;",
          "148:  }",
          "151:  while (tmp) {",
          "152:   if (tmp->next == e) {",
          "153:    tmp->next = e->next;",
          "",
          "[Removed Lines]",
          "144:  if (pidns_inits == e) {",
          "145:   pidns_inits = e->next;",
          "150:  tmp = pidns_inits;",
          "",
          "[Added Lines]",
          "142:  int h;",
          "147:  h = HASH(e->ino);",
          "148:  if (pidns_hash_table[h] == e) {",
          "149:   pidns_hash_table[h] = e->next;",
          "154:  tmp = pidns_hash_table[h];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "165:  static long int last_prune = 0;",
          "166:  struct pidns_init_store *e, *prev, *delme;",
          "167:  long int now, threshold;",
          "169:  if (!last_prune) {",
          "170:   last_prune = time(NULL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "172:  int i;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "179:  last_prune = now;",
          "180:  threshold = now - 2 * PURGE_SECS;",
          "184: #if DEBUG",
          "186: #endif",
          "197:   }",
          "198:  }",
          "199: }",
          "",
          "[Removed Lines]",
          "182:  for (prev = NULL, e = pidns_inits; e; ) {",
          "183:   if (e->lastcheck < threshold) {",
          "185:    fprintf(stderr, \"Removing cached entry for %d\\n\", e->initpid);",
          "187:    delme = e;",
          "188:    if (prev)",
          "189:     prev->next = e->next;",
          "190:    else",
          "191:     pidns_inits = e->next;",
          "192:    e = e->next;",
          "193:    free(delme);",
          "194:   } else {",
          "195:    prev = e;",
          "196:    e = e->next;",
          "",
          "[Added Lines]",
          "187:  for (i = 0; i < PIDNS_HASH_SIZE; i++) {",
          "188:   for (prev = NULL, e = pidns_hash_table[i]; e; ) {",
          "189:    if (e->lastcheck < threshold) {",
          "191:     fprintf(stderr, \"Removing cached entry for %d\\n\", e->initpid);",
          "193:     delme = e;",
          "194:     if (prev)",
          "195:      prev->next = e->next;",
          "196:     else",
          "197:      pidns_hash_table[i] = e->next;",
          "198:     e = e->next;",
          "199:     free(delme);",
          "200:    } else {",
          "201:     prev = e;",
          "202:     e = e->next;",
          "203:    }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "204:  struct pidns_init_store *e;",
          "205:  char fpath[100];",
          "206:  struct stat procsb;",
          "208: #if DEBUG",
          "209:  fprintf(stderr, \"save_initpid: adding entry for %d\\n\", pid);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214:  int h;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "217:  e->ino = sb->st_ino;",
          "218:  e->initpid = pid;",
          "219:  e->ctime = procsb.st_ctime;",
          "221:  e->lastcheck = time(NULL);",
          "223: }",
          "",
          "[Removed Lines]",
          "220:  e->next = pidns_inits;",
          "222:  pidns_inits = e;",
          "",
          "[Added Lines]",
          "228:  h = HASH(e->ino);",
          "229:  e->next = pidns_hash_table[h];",
          "231:  pidns_hash_table[h] = e;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "232: static struct pidns_init_store *lookup_verify_initpid(struct stat *sb)",
          "233: {",
          "235:  while (e) {",
          "236:   if (e->ino == sb->st_ino) {",
          "237:    if (initpid_still_valid(e, sb)) {",
          "",
          "[Removed Lines]",
          "234:  struct pidns_init_store *e = pidns_inits;",
          "",
          "[Added Lines]",
          "243:  int h = HASH(sb->st_ino);",
          "244:  struct pidns_init_store *e = pidns_hash_table[h];",
          "",
          "---------------"
        ]
      }
    }
  ]
}