{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "591711751e2c8f42acf223ea99afad52128ba9ac",
      "candidate_info": {
        "commit_hash": "591711751e2c8f42acf223ea99afad52128ba9ac",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/591711751e2c8f42acf223ea99afad52128ba9ac",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Fix harmless compiler warning seen with MSVC.\n\nFossilOrigin-Name: cd0437ba5b13593ebe4ec30d6236623183f8cfa30ca8a0612662eccb282a863e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fee945671a19a93287f9bfadc346f9821fb1311c7fc75b95a6a48d1419c840e7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "514:     }",
          "515:   }else if( f & MEM_Str ){",
          "516:     int j;",
          "518:     if( f & MEM_Dyn ){",
          "519:       c = 'z';",
          "520:       assert( (f & (MEM_Static|MEM_Ephem))==0 );",
          "",
          "[Removed Lines]",
          "517:     int c;",
          "",
          "[Added Lines]",
          "517:     u8 c;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "529:     }",
          "530:     sqlite3_str_appendf(pStr, \" %c%d[\", c, pMem->n);",
          "531:     for(j=0; j<25 && j<pMem->n; j++){",
          "533:       sqlite3_str_appendchar(pStr, 1, (c>=0x20&&c<=0x7f) ? c : '.');",
          "534:     }",
          "535:     sqlite3_str_appendf(pStr, \"]%s\", encnames[pMem->enc]);",
          "",
          "[Removed Lines]",
          "532:       u8 c = pMem->z[j];",
          "",
          "[Added Lines]",
          "532:       c = pMem->z[j];",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cbb9da337e7f8dc4e6bea59399a0394ec390f1f2",
      "candidate_info": {
        "commit_hash": "cbb9da337e7f8dc4e6bea59399a0394ec390f1f2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cbb9da337e7f8dc4e6bea59399a0394ec390f1f2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/resolve.c",
          "src/select.c",
          "src/sqliteInt.h"
        ],
        "message": "Work toward reducing the incremental size of an ExprList object to 24-byte per entry, from 32-bytes (on a 64-bit machine).  This helps the new mini-lookaside allocator to run better by avoiding excessive reallocs. The current change mostly works, but still has a few loose ends to tie up. This check-in is merely a snapshot to save my work.\n\nFossilOrigin-Name: fdda76cfb01bf2b19522ac4558b443634d28a69b0828677c42682b645eae1f3b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/resolve.c||src/resolve.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 611020e3378f4c81c277cccd84807ae51a816bbab6c3d887c91c5e5af3b5225f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1437:       }",
          "1438:     }",
          "1439:     pItem->zEName = sqlite3DbStrDup(db, pOldItem->zEName);",
          "1441:     pItem->sortFlags = pOldItem->sortFlags;",
          "1442:     pItem->done = 0;",
          "1443:     pItem->bNulls = pOldItem->bNulls;",
          "1445:     pItem->bSorterRef = pOldItem->bSorterRef;",
          "1446:     pItem->u = pOldItem->u;",
          "1447:   }",
          "",
          "[Removed Lines]",
          "1440:     pItem->zSpan = sqlite3DbStrDup(db, pOldItem->zSpan);",
          "1444:     pItem->bSpanIsTab = pOldItem->bSpanIsTab;",
          "",
          "[Added Lines]",
          "1441:     pItem->eEName = pOldItem->eEName;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1773:   if( pList ){",
          "1774:     struct ExprList_item *pItem = &pList->a[pList->nExpr-1];",
          "1775:     assert( pList->nExpr>0 );",
          "1778:   }",
          "1779: }",
          "",
          "[Removed Lines]",
          "1776:     sqlite3DbFree(db, pItem->zSpan);",
          "1777:     pItem->zSpan = sqlite3DbSpanDup(db, zStart, zEnd);",
          "",
          "[Added Lines]",
          "1775:     if( pItem->zEName==0 ){",
          "1776:       pItem->zEName = sqlite3DbSpanDup(db, zStart, zEnd);",
          "1777:       pItem->eEName = ENAME_SPAN;",
          "1778:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1805:   do{",
          "1806:     sqlite3ExprDelete(db, pItem->pExpr);",
          "1807:     sqlite3DbFree(db, pItem->zEName);",
          "1809:     pItem++;",
          "1810:   }while( --i>0 );",
          "1811:   sqlite3DbFreeNN(db, pList);",
          "",
          "[Removed Lines]",
          "1808:     sqlite3DbFree(db, pItem->zSpan);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "267:           int hit = 0;",
          "268:           pEList = pItem->pSelect->pEList;",
          "269:           for(j=0; j<pEList->nExpr; j++){",
          "271:               cnt++;",
          "272:               cntTab = 2;",
          "273:               pMatch = pItem;",
          "",
          "[Removed Lines]",
          "270:             if( sqlite3MatchSpanName(pEList->a[j].zSpan, zCol, zTab, zDb) ){",
          "",
          "[Added Lines]",
          "270:             if( sqlite3MatchSpanName(pEList->a[j].zEName, zCol, zTab, zDb) ){",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1539:         iRead = iCol--;",
          "1540:       }",
          "1541:       sqlite3VdbeAddOp3(v, OP_Column, iSortTab, iRead, regRow+i);",
          "1543:     }",
          "1544:   }",
          "1545:   switch( eDest ){",
          "",
          "[Removed Lines]",
          "1542:       VdbeComment((v, \"%s\", aOutEx[i].zEName?aOutEx[i].zEName:aOutEx[i].zSpan));",
          "",
          "[Added Lines]",
          "1542:       VdbeComment((v, \"%s\", aOutEx[i].zEName));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1873:     assert( p!=0 );",
          "1878:       char *zName = pEList->a[i].zEName;",
          "1879:       sqlite3VdbeSetColName(v, i, COLNAME_NAME, zName, SQLITE_TRANSIENT);",
          "",
          "[Removed Lines]",
          "1876:     if( pEList->a[i].zEName ){",
          "",
          "[Added Lines]",
          "1876:     if( pEList->a[i].zEName && pEList->a[i].eEName==ENAME_NAME ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1897:         sqlite3VdbeSetColName(v, i, COLNAME_NAME, zCol, SQLITE_TRANSIENT);",
          "1898:       }",
          "1899:     }else{",
          "1901:       z = z==0 ? sqlite3MPrintf(db, \"column%d\", i+1) : sqlite3DbStrDup(db, z);",
          "1902:       sqlite3VdbeSetColName(v, i, COLNAME_NAME, z, SQLITE_DYNAMIC);",
          "1903:     }",
          "",
          "[Removed Lines]",
          "1900:       const char *z = pEList->a[i].zSpan;",
          "",
          "[Added Lines]",
          "1900:       const char *z = pEList->a[i].zEName;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1959:   for(i=0, pCol=aCol; i<nCol && !db->mallocFailed; i++, pCol++){",
          "1964:     }else{",
          "1965:       Expr *pColExpr = sqlite3ExprSkipCollateAndLikely(pEList->a[i].pExpr);",
          "",
          "[Removed Lines]",
          "1962:     if( (zName = pEList->a[i].zEName)!=0 ){",
          "",
          "[Added Lines]",
          "1962:     if( (zName = pEList->a[i].zEName)!=0 && pEList->a[i].eEName==ENAME_NAME ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1979:         zName = pColExpr->u.zToken;",
          "1980:       }else{",
          "1983:       }",
          "1984:     }",
          "1985:     if( zName ){",
          "",
          "[Removed Lines]",
          "1982:         zName = pEList->a[i].zSpan;",
          "",
          "[Added Lines]",
          "1982:         zName = pEList->a[i].zEName;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5004:         pNew = sqlite3ExprListAppend(pParse, pNew, a[k].pExpr);",
          "5005:         if( pNew ){",
          "5006:           pNew->a[pNew->nExpr-1].zEName = a[k].zEName;",
          "5008:           a[k].zEName = 0;",
          "5010:         }",
          "5011:         a[k].pExpr = 0;",
          "5012:       }else{",
          "",
          "[Removed Lines]",
          "5007:           pNew->a[pNew->nExpr-1].zSpan = a[k].zSpan;",
          "5009:           a[k].zSpan = 0;",
          "",
          "[Added Lines]",
          "5007:           pNew->a[pNew->nExpr-1].eEName = a[k].eEName;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5046:             assert( zName );",
          "5047:             if( zTName && pSub",
          "5049:             ){",
          "5050:               continue;",
          "5051:             }",
          "",
          "[Removed Lines]",
          "5048:              && sqlite3MatchSpanName(pSub->pEList->a[j].zSpan, 0, zTName, 0)==0",
          "",
          "[Added Lines]",
          "5047:              && sqlite3MatchSpanName(pSub->pEList->a[j].zEName, 0, zTName, 0)==0",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "5098:             sqlite3ExprListSetName(pParse, pNew, &sColname, 0);",
          "5099:             if( pNew && (p->selFlags & SF_NestedFrom)!=0 ){",
          "5100:               struct ExprList_item *pX = &pNew->a[pNew->nExpr-1];",
          "5101:               if( pSub ){",
          "5104:               }else{",
          "5106:                                            zSchemaName, zTabName, zColname);",
          "5108:               }",
          "5110:             }",
          "5111:             sqlite3DbFree(db, zToFree);",
          "5112:           }",
          "",
          "[Removed Lines]",
          "5102:                 pX->zSpan = sqlite3DbStrDup(db, pSub->pEList->a[j].zSpan);",
          "5103:                 testcase( pX->zSpan==0 );",
          "5105:                 pX->zSpan = sqlite3MPrintf(db, \"%s.%s.%s\",",
          "5107:                 testcase( pX->zSpan==0 );",
          "5109:               pX->bSpanIsTab = 1;",
          "",
          "[Added Lines]",
          "5100:               sqlite3DbFree(db, pX->zEName);",
          "5102:                 pX->zEName = sqlite3DbStrDup(db, pSub->pEList->a[j].zEName);",
          "5103:                 testcase( pX->zEName==0 );",
          "5105:                 pX->zEName = sqlite3MPrintf(db, \"%s.%s.%s\",",
          "5107:                 testcase( pX->zEName==0 );",
          "5109:               pX->eEName = ENAME_TAB;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ]
      }
    },
    {
      "candidate_hash": "369e758fdc2e32f958484e32a65695362d3b4839",
      "candidate_info": {
        "commit_hash": "369e758fdc2e32f958484e32a65695362d3b4839",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/369e758fdc2e32f958484e32a65695362d3b4839",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/malloc.c"
        ],
        "message": "Small performance improvement and size reduction in sqlite3DbStrNDup().\n\nFossilOrigin-Name: 35cd87063d1933b87bc2176f957ecd758d7d167e9473fa615e33caec3be14783",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/malloc.c||src/malloc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 73d62f82f94347c60e026bc9cb859fec2d8b5f0c756df0c4941f11817234bff8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/malloc.c||src/malloc.c": [
          "File: src/malloc.c -> src/malloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "719: char *sqlite3DbStrNDup(sqlite3 *db, const char *z, u64 n){",
          "720:   char *zNew;",
          "721:   assert( db!=0 );",
          "725:   assert( (n&0x7fffffff)==n );",
          "727:   if( zNew ){",
          "728:     memcpy(zNew, z, (size_t)n);",
          "729:     zNew[n] = 0;",
          "",
          "[Removed Lines]",
          "722:   if( z==0 ){",
          "723:     return 0;",
          "724:   }",
          "726:   zNew = sqlite3DbMallocRawNN(db, n+1);",
          "",
          "[Added Lines]",
          "722:   assert( z!=0 || n==0 );",
          "724:   zNew = z ? sqlite3DbMallocRawNN(db, n+1) : 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6265c47a1a9d568f3e893d522b3aa165af279889",
      "candidate_info": {
        "commit_hash": "6265c47a1a9d568f3e893d522b3aa165af279889",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6265c47a1a9d568f3e893d522b3aa165af279889",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/update.c"
        ],
        "message": "Separate VdbeCoverage() macro for different jumps.\n\nFossilOrigin-Name: da593e57df042527decfea68baacc72d463728544cab81c70fbb25839791f706",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/update.c||src/update.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8ca87526523a985674fed5a8770726587b3a2e48d65721916902063ab5dba49c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "810:             }",
          "811:             sqlite3VdbeAddOp4Int(",
          "812:                 v, OP_NotFound, iDataCur, labelContinue, iPk, nPk",
          "814:           }else{",
          "815:             sqlite3VdbeAddOp2(v, OP_Rowid, iEph, regOldRowid);",
          "816:             sqlite3VdbeAddOp3(",
          "817:                 v, OP_NotExists, iDataCur, labelContinue, regOldRowid",
          "819:           }",
          "820:         }",
          "822:       }else{",
          "823:         sqlite3VdbeAddOp2(v, OP_RowData, iEph, regKey);",
          "824:         sqlite3VdbeAddOp4Int(v, OP_NotFound, iDataCur, labelContinue, regKey,0);",
          "",
          "[Removed Lines]",
          "813:             );",
          "818:             );",
          "821:         VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "813:             ); VdbeCoverage(v);",
          "818:             ); VdbeCoverage(v);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6528bcdc80223c9153ae27c9508c77010c317ab1",
      "candidate_info": {
        "commit_hash": "6528bcdc80223c9153ae27c9508c77010c317ab1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6528bcdc80223c9153ae27c9508c77010c317ab1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wal.c",
          "test/wal2.test",
          "test/walprotocol.test"
        ],
        "message": "Merge enhancements from trunk.\n\nFossilOrigin-Name: 969c25bb14fbd99ca8523abf0ae78a75a3dde539e3323d105690aef4940041eb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wal.c||src/wal.c",
          "test/wal2.test||test/wal2.test",
          "test/walprotocol.test||test/walprotocol.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 22e8e6901a119698de831ede6d8b03c4fd6576eaa8686a97a0b8aeea7593688a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "590:     );",
          "591:     assert( pWal->apWiData[iPage]!=0 || rc!=SQLITE_OK || pWal->writeLock==0 );",
          "592:     testcase( pWal->apWiData[iPage]==0 && rc==SQLITE_OK );",
          "594:       pWal->readOnly |= WAL_SHM_RDONLY;",
          "595:       if( rc==SQLITE_READONLY ){",
          "596:         rc = SQLITE_OK;",
          "",
          "[Removed Lines]",
          "593:     if( (rc&0xff)==SQLITE_READONLY ){",
          "",
          "[Added Lines]",
          "593:     if( rc==SQLITE_OK ){",
          "594:       if( iPage>0 && sqlite3FaultSim(600) ) rc = SQLITE_NOMEM;",
          "595:     }else if( (rc&0xff)==SQLITE_READONLY ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1161:   assert( pWal->writeLock );",
          "1162:   iLock = WAL_ALL_BUT_WRITE + pWal->ckptLock;",
          "1163:   rc = walLockExclusive(pWal, iLock, WAL_READ_LOCK(0)-iLock);",
          "1170:   if( rc ){",
          "1171:     return rc;",
          "1172:   }",
          "",
          "[Removed Lines]",
          "1164:   if( rc==SQLITE_OK ){",
          "1165:     rc = walLockExclusive(pWal, WAL_READ_LOCK(1), WAL_NREADER-1);",
          "1166:     if( rc!=SQLITE_OK ){",
          "1167:       walUnlockExclusive(pWal, iLock, WAL_READ_LOCK(0)-iLock);",
          "1168:     }",
          "1169:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1239:     szFrame = szPage + WAL_FRAME_HDRSIZE;",
          "1241:     if( !aFrame ){",
          "1242:       rc = SQLITE_NOMEM_BKPT;",
          "1243:       goto recovery_error;",
          "1244:     }",
          "1245:     aData = &aFrame[WAL_FRAME_HDRSIZE];",
          "1271:       }",
          "1272:     }",
          "1274:     sqlite3_free(aFrame);",
          "",
          "[Removed Lines]",
          "1240:     aFrame = (u8 *)sqlite3_malloc64(szFrame);",
          "1248:     iFrame = 0;",
          "1249:     for(iOffset=WAL_HDRSIZE; (iOffset+szFrame)<=nSize; iOffset+=szFrame){",
          "1254:       iFrame++;",
          "1255:       rc = sqlite3OsRead(pWal->pWalFd, aFrame, szFrame, iOffset);",
          "1256:       if( rc!=SQLITE_OK ) break;",
          "1257:       isValid = walDecodeFrame(pWal, &pgno, &nTruncate, aData, aFrame);",
          "1258:       if( !isValid ) break;",
          "1259:       rc = walIndexAppend(pWal, iFrame, pgno);",
          "1260:       if( rc!=SQLITE_OK ) break;",
          "1263:       if( nTruncate ){",
          "1264:         pWal->hdr.mxFrame = iFrame;",
          "1265:         pWal->hdr.nPage = nTruncate;",
          "1266:         pWal->hdr.szPage = (u16)((szPage&0xff00) | (szPage>>16));",
          "1267:         testcase( szPage<=32768 );",
          "1268:         testcase( szPage>=65536 );",
          "1269:         aFrameCksum[0] = pWal->hdr.aFrameCksum[0];",
          "1270:         aFrameCksum[1] = pWal->hdr.aFrameCksum[1];",
          "",
          "[Added Lines]",
          "1237:     aFrame = (u8 *)sqlite3_malloc64(szFrame + WALINDEX_PGSZ);",
          "1243:     aPrivate = (u32*)&aData[szPage];",
          "1246:     iLastFrame = (nSize - WAL_HDRSIZE) / szFrame;",
          "1247:     for(iPg=0; iPg<=walFramePage(iLastFrame); iPg++){",
          "1248:       u32 *aShare;",
          "1250:       int iLast = MIN(iLastFrame, HASHTABLE_NPAGE_ONE+iPg*HASHTABLE_NPAGE);",
          "1251:       int iFirst = 1 + (iPg==0?0:HASHTABLE_NPAGE_ONE+(iPg-1)*HASHTABLE_NPAGE);",
          "1252:       int nHdr, nHdr32;",
          "1253:       rc = walIndexPage(pWal, iPg, (volatile u32**)&aShare);",
          "1254:       if( rc ) break;",
          "1255:       pWal->apWiData[iPg] = aPrivate;",
          "1257:       for(iFrame=iFirst; iFrame<=iLast; iFrame++){",
          "1258:         i64 iOffset = walFrameOffset(iFrame, szPage);",
          "1263:         rc = sqlite3OsRead(pWal->pWalFd, aFrame, szFrame, iOffset);",
          "1264:         if( rc!=SQLITE_OK ) break;",
          "1265:         isValid = walDecodeFrame(pWal, &pgno, &nTruncate, aData, aFrame);",
          "1266:         if( !isValid ) break;",
          "1267:         rc = walIndexAppend(pWal, iFrame, pgno);",
          "1268:         if( NEVER(rc!=SQLITE_OK) ) break;",
          "1271:         if( nTruncate ){",
          "1272:           pWal->hdr.mxFrame = iFrame;",
          "1273:           pWal->hdr.nPage = nTruncate;",
          "1274:           pWal->hdr.szPage = (u16)((szPage&0xff00) | (szPage>>16));",
          "1275:           testcase( szPage<=32768 );",
          "1276:           testcase( szPage>=65536 );",
          "1277:           aFrameCksum[0] = pWal->hdr.aFrameCksum[0];",
          "1278:           aFrameCksum[1] = pWal->hdr.aFrameCksum[1];",
          "1279:         }",
          "1281:       pWal->apWiData[iPg] = aShare;",
          "1282:       nHdr = (iPg==0 ? WALINDEX_HDR_SIZE : 0);",
          "1283:       nHdr32 = nHdr / sizeof(u32);",
          "1284:       memcpy(&aShare[nHdr32], &aPrivate[nHdr32], WALINDEX_PGSZ-nHdr);",
          "1285:       if( iFrame<=iLast ) break;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1283:     walIndexWriteHdr(pWal);",
          "1289:     pInfo = walCkptInfo(pWal);",
          "1290:     pInfo->nBackfill = 0;",
          "1291:     pInfo->nBackfillAttempted = pWal->hdr.mxFrame;",
          "1292:     pInfo->aReadMark[0] = 0;",
          "",
          "[Removed Lines]",
          "1293:     for(i=1; i<WAL_NREADER; i++) pInfo->aReadMark[i] = READMARK_NOT_USED;",
          "1294:     if( pWal->hdr.mxFrame ) pInfo->aReadMark[1] = pWal->hdr.mxFrame;",
          "",
          "[Added Lines]",
          "1307:     for(i=1; i<WAL_NREADER; i++){",
          "1308:       rc = walLockExclusive(pWal, WAL_READ_LOCK(i), 1);",
          "1309:       if( rc==SQLITE_OK ){",
          "1310:         if( i==1 && pWal->hdr.mxFrame ){",
          "1311:           pInfo->aReadMark[i] = pWal->hdr.mxFrame;",
          "1312:         }else{",
          "1313:           pInfo->aReadMark[i] = READMARK_NOT_USED;",
          "1314:         }",
          "1315:         walUnlockExclusive(pWal, WAL_READ_LOCK(i), 1);",
          "1316:       }else if( rc!=SQLITE_BUSY ){",
          "1317:         goto recovery_error;",
          "1318:       }",
          "1319:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1309: recovery_error:",
          "1310:   WALTRACE((\"WAL%p: recovery %s\\n\", pWal, rc ? \"failed\" : \"ok\"));",
          "1311:   walUnlockExclusive(pWal, iLock, WAL_READ_LOCK(0)-iLock);",
          "1313:   return rc;",
          "1314: }",
          "",
          "[Removed Lines]",
          "1312:   walUnlockExclusive(pWal, WAL_READ_LOCK(1), WAL_NREADER-1);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/wal2.test||test/wal2.test": [
          "File: test/wal2.test -> test/wal2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "122: } {4 10}",
          "124: set RECOVER [list                                      \\",
          "127: ]",
          "128: set READ [list                                         \\",
          "129:   {4 1 lock shared}    {4 1 unlock shared}             \\",
          "",
          "[Removed Lines]",
          "125:   {0 1 lock exclusive}   {1 2 lock exclusive} {4 4 lock exclusive} \\",
          "126:   {1 2 unlock exclusive} {4 4 unlock exclusive} {0 1 unlock exclusive}  \\",
          "",
          "[Added Lines]",
          "125:   {0 1 lock exclusive}   {1 2 lock exclusive}          \\",
          "126:   {4 1 lock exclusive}   {4 1 unlock exclusive}        \\",
          "127:   {5 1 lock exclusive}   {5 1 unlock exclusive}        \\",
          "128:   {6 1 lock exclusive}   {6 1 unlock exclusive}        \\",
          "129:   {7 1 lock exclusive}   {7 1 unlock exclusive}        \\",
          "130:   {1 2 unlock exclusive} {0 1 unlock exclusive}        \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "394: lappend expected_locks {1 1 lock exclusive}   ;# Lock checkpoint",
          "395: lappend expected_locks {0 1 lock exclusive}   ;# Lock writer",
          "396: lappend expected_locks {2 1 lock exclusive}   ;# Lock recovery",
          "398: lappend expected_locks {2 1 unlock exclusive} ;# Unlock recovery",
          "400: lappend expected_locks {0 1 unlock exclusive} ;# Unlock writer",
          "401: lappend expected_locks {3 1 lock exclusive}   ;# Lock aReadMark[0]",
          "402: lappend expected_locks {3 1 unlock exclusive} ;# Unlock aReadMark[0]",
          "",
          "[Removed Lines]",
          "397: lappend expected_locks {4 4 lock exclusive}   ;# Lock all aReadMark[]",
          "399: lappend expected_locks {4 4 unlock exclusive} ;# Unlock all aReadMark[]",
          "",
          "[Added Lines]",
          "401: # lappend expected_locks {4 4 lock exclusive}   ;# Lock all aReadMark[]",
          "402: lappend expected_locks {4 1 lock exclusive}   ;# Lock aReadMark[1]",
          "403: lappend expected_locks {4 1 unlock exclusive} ;# Unlock aReadMark[1]",
          "404: lappend expected_locks {5 1 lock exclusive}",
          "405: lappend expected_locks {5 1 unlock exclusive}",
          "406: lappend expected_locks {6 1 lock exclusive}",
          "407: lappend expected_locks {6 1 unlock exclusive}",
          "408: lappend expected_locks {7 1 lock exclusive}",
          "409: lappend expected_locks {7 1 unlock exclusive}",
          "411: # lappend expected_locks {4 4 unlock exclusive} ;# Unlock all aReadMark[]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "625: } {}",
          "627: set RECOVERY {",
          "630: }",
          "631: set READMARK0_READ {",
          "632:   {3 1 lock shared} {3 1 unlock shared}",
          "",
          "[Removed Lines]",
          "628:   {0 1 lock exclusive} {1 2 lock exclusive} {4 4 lock exclusive}",
          "629:   {1 2 unlock exclusive} {4 4 unlock exclusive} {0 1 unlock exclusive}",
          "",
          "[Added Lines]",
          "640:   {0 1 lock exclusive}   {1 2 lock exclusive}",
          "641:   {4 1 lock exclusive}   {4 1 unlock exclusive}",
          "642:   {5 1 lock exclusive}   {5 1 unlock exclusive}",
          "643:   {6 1 lock exclusive}   {6 1 unlock exclusive}",
          "644:   {7 1 lock exclusive}   {7 1 unlock exclusive}",
          "645:   {1 2 unlock exclusive} {0 1 unlock exclusive}",
          "",
          "---------------"
        ],
        "test/walprotocol.test||test/walprotocol.test": [
          "File: test/walprotocol.test -> test/walprotocol.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:   set ::locks [list]",
          "53:   sqlite3 db test.db -vfs T",
          "54:   execsql { SELECT * FROM x }",
          "58: ]",
          "59: do_test 1.2 {",
          "60:   db close",
          "61:   set ::locks [list]",
          "62:   sqlite3 db test.db -vfs T",
          "63:   execsql { SELECT * FROM x }",
          "67: ]",
          "68: proc lock_callback {method filename handle lock} {",
          "69:   if {$lock == \"1 2 lock exclusive\"} { return SQLITE_BUSY }",
          "",
          "[Removed Lines]",
          "55:   lrange $::locks 0 5",
          "56: } [list {0 1 lock exclusive} {1 2 lock exclusive} {4 4 lock exclusive} \\",
          "57:         {1 2 unlock exclusive} {4 4 unlock exclusive} {0 1 unlock exclusive}  \\",
          "64:   lrange $::locks 0 5",
          "65: } [list {0 1 lock exclusive} {1 2 lock exclusive} {4 4 lock exclusive} \\",
          "66:         {1 2 unlock exclusive} {4 4 unlock exclusive} {0 1 unlock exclusive}  \\",
          "",
          "[Added Lines]",
          "55:   lrange $::locks 0 11",
          "56: } [list {0 1 lock exclusive} {1 2 lock exclusive}     \\",
          "57:         {4 1 lock exclusive} {4 1 unlock exclusive}   \\",
          "58:         {5 1 lock exclusive} {5 1 unlock exclusive}   \\",
          "59:         {6 1 lock exclusive} {6 1 unlock exclusive}   \\",
          "60:         {7 1 lock exclusive} {7 1 unlock exclusive}   \\",
          "61:         {1 2 unlock exclusive}   \\",
          "62:         {0 1 unlock exclusive}  \\",
          "69:   lrange $::locks 0 11",
          "70: } [list {0 1 lock exclusive} {1 2 lock exclusive}     \\",
          "71:         {4 1 lock exclusive} {4 1 unlock exclusive}   \\",
          "72:         {5 1 lock exclusive} {5 1 unlock exclusive}   \\",
          "73:         {6 1 lock exclusive} {6 1 unlock exclusive}   \\",
          "74:         {7 1 lock exclusive} {7 1 unlock exclusive}   \\",
          "75:         {1 2 unlock exclusive}   \\",
          "76:         {0 1 unlock exclusive}  \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "101:   set ::locks [list]",
          "102:   sqlite3 db test.db -vfs T",
          "103:   catchsql { SELECT * FROM x }",
          "105: db close",
          "106: T delete",
          "",
          "[Removed Lines]",
          "104: } {1 {locking protocol}}",
          "",
          "[Added Lines]",
          "114: } {0 z}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "160: } {Tehran Qom Markazi Qazvin Gilan Ardabil}",
          "161: do_test 2.6 {",
          "162:   set ::r",
          "165: db close",
          "166: db2 close",
          "",
          "[Removed Lines]",
          "163: } {1 {locking protocol}}",
          "",
          "[Added Lines]",
          "173: } {0 {Tehran Qom Markazi Qazvin Gilan Ardabil}}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "182: } {Tehran Qom Markazi Qazvin Gilan Ardabil}",
          "183: do_test 2.8 {",
          "184:   set ::r",
          "187: db close",
          "188: db2 close",
          "",
          "[Removed Lines]",
          "185: } {1 {locking protocol}}",
          "",
          "[Added Lines]",
          "195: } {0 {Tehran Qom Markazi Qazvin Gilan Ardabil}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}