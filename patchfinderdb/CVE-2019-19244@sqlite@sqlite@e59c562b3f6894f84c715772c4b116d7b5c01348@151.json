{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a5d0911546c0d41f142a33fc3622df7ef7d8a81d",
      "candidate_info": {
        "commit_hash": "a5d0911546c0d41f142a33fc3622df7ef7d8a81d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a5d0911546c0d41f142a33fc3622df7ef7d8a81d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/callback.c"
        ],
        "message": "Move the sqlite3LocateCollSeq(), sqlite3FindCollSeq(), and sqlite3GetCollSeq() routines so that they are all beside one another in the callback.c source file.  No logic changes.\n\nFossilOrigin-Name: 9ff80a9bf8fee776e2f282d0597215b77d48093ebc71d047ad1457da0582ddbc",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/callback.c||src/callback.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 90f7c477354d67d22d5eb0da22dac579f384ab44743fdc19887220e32203ebc2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1520:   }",
          "1521: }",
          "",
          "[Removed Lines]",
          "1543: CollSeq *sqlite3LocateCollSeq(Parse *pParse, const char *zName){",
          "1544:   sqlite3 *db = pParse->db;",
          "1545:   u8 enc = ENC(db);",
          "1546:   u8 initbusy = db->init.busy;",
          "1547:   CollSeq *pColl;",
          "1549:   pColl = sqlite3FindCollSeq(db, enc, zName, initbusy);",
          "1550:   if( !initbusy && (!pColl || !pColl->xCmp) ){",
          "1551:     pColl = sqlite3GetCollSeq(pParse, enc, pColl, zName);",
          "1552:   }",
          "1554:   return pColl;",
          "1555: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/callback.c||src/callback.c": [
          "File: src/callback.c -> src/callback.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:   return SQLITE_ERROR;",
          "66: }",
          "",
          "[Removed Lines]",
          "82: CollSeq *sqlite3GetCollSeq(",
          "87: ){",
          "88:   CollSeq *p;",
          "89:   sqlite3 *db = pParse->db;",
          "91:   p = pColl;",
          "92:   if( !p ){",
          "93:     p = sqlite3FindCollSeq(db, enc, zName, 0);",
          "94:   }",
          "95:   if( !p || !p->xCmp ){",
          "99:     callCollNeeded(db, enc, zName);",
          "100:     p = sqlite3FindCollSeq(db, enc, zName, 0);",
          "101:   }",
          "102:   if( p && !p->xCmp && synthCollSeq(db, p) ){",
          "103:     p = 0;",
          "104:   }",
          "105:   assert( !p || p->xCmp );",
          "106:   if( p==0 ){",
          "107:     sqlite3ErrorMsg(pParse, \"no such collation sequence: %s\", zName);",
          "108:     pParse->rc = SQLITE_ERROR_MISSING_COLLSEQ;",
          "109:   }",
          "110:   return p;",
          "111: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "204: CollSeq *sqlite3FindCollSeq(",
          "209: ){",
          "210:   CollSeq *pColl;",
          "211:   if( zName ){",
          "",
          "[Removed Lines]",
          "205:   sqlite3 *db,",
          "206:   u8 enc,",
          "207:   const char *zName,",
          "208:   int create",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "219:   return pColl;",
          "220: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "191: CollSeq *sqlite3GetCollSeq(",
          "196: ){",
          "197:   CollSeq *p;",
          "198:   sqlite3 *db = pParse->db;",
          "200:   p = pColl;",
          "201:   if( !p ){",
          "202:     p = sqlite3FindCollSeq(db, enc, zName, 0);",
          "203:   }",
          "204:   if( !p || !p->xCmp ){",
          "208:     callCollNeeded(db, enc, zName);",
          "209:     p = sqlite3FindCollSeq(db, enc, zName, 0);",
          "210:   }",
          "211:   if( p && !p->xCmp && synthCollSeq(db, p) ){",
          "212:     p = 0;",
          "213:   }",
          "214:   assert( !p || p->xCmp );",
          "215:   if( p==0 ){",
          "216:     sqlite3ErrorMsg(pParse, \"no such collation sequence: %s\", zName);",
          "217:     pParse->rc = SQLITE_ERROR_MISSING_COLLSEQ;",
          "218:   }",
          "219:   return p;",
          "220: }",
          "242: CollSeq *sqlite3LocateCollSeq(Parse *pParse, const char *zName){",
          "243:   sqlite3 *db = pParse->db;",
          "244:   u8 enc = ENC(db);",
          "245:   u8 initbusy = db->init.busy;",
          "246:   CollSeq *pColl;",
          "248:   pColl = sqlite3FindCollSeq(db, enc, zName, initbusy);",
          "249:   if( !initbusy && (!pColl || !pColl->xCmp) ){",
          "250:     pColl = sqlite3GetCollSeq(pParse, enc, pColl, zName);",
          "251:   }",
          "253:   return pColl;",
          "254: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8e34e4061b534130bc7495c102120371c8738d95",
      "candidate_info": {
        "commit_hash": "8e34e4061b534130bc7495c102120371c8738d95",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8e34e4061b534130bc7495c102120371c8738d95",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/parse.y",
          "src/sqliteInt.h",
          "test/fuzzdata8.db"
        ],
        "message": "Add the new sqlite3ExprUnmapAndDelete() function and use it in place of separate calls to sqlite3RenameExprUnmap() and sqlite3ExprDelete().\n\nFossilOrigin-Name: 36ea13e0a851a749c9ef292377ecd82dbd4797d38df907b362487fa234c98ca5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/parse.y||src/parse.y",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 04bd5cb73287f926f1ecf578998fa6ce1379474e86918c692eae5778d0817cef",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "895:   }else if( pRight==0 ){",
          "896:     return pLeft;",
          "897:   }else if( ExprAlwaysFalse(pLeft) || ExprAlwaysFalse(pRight) ){",
          "904:     return sqlite3ExprAlloc(db, TK_INTEGER, &sqlite3IntTokens[0], 0);",
          "905:   }else{",
          "906:     return sqlite3PExpr(pParse, TK_AND, pLeft, pRight);",
          "",
          "[Removed Lines]",
          "898:     if( IN_RENAME_OBJECT ){",
          "899:       sqlite3RenameExprUnmap(pParse, pLeft);",
          "900:       sqlite3RenameExprUnmap(pParse, pRight);",
          "901:     }",
          "902:     sqlite3ExprDelete(db, pLeft);",
          "903:     sqlite3ExprDelete(db, pRight);",
          "",
          "[Added Lines]",
          "898:     sqlite3ExprUnmapAndDelete(pParse, pLeft);",
          "899:     sqlite3ExprUnmapAndDelete(pParse, pRight);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1060:   if( p ) sqlite3ExprDeleteNN(db, p);",
          "1061: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1062: void sqlite3ExprUnmapAndDelete(Parse *pParse, Expr *p){",
          "1063:   if( p ){",
          "1064:     if( IN_RENAME_OBJECT ){",
          "1065:       sqlite3RenameExprUnmap(pParse, p);",
          "1066:     }",
          "1067:     sqlite3ExprDeleteNN(pParse->db, p);",
          "1068:   }",
          "1069: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1642:   }",
          "1644: vector_append_error:",
          "1649:   sqlite3IdListDelete(db, pColumns);",
          "1650:   return pList;",
          "1651: }",
          "",
          "[Removed Lines]",
          "1645:   if( IN_RENAME_OBJECT ){",
          "1646:     sqlite3RenameExprUnmap(pParse, pExpr);",
          "1647:   }",
          "1648:   sqlite3ExprDelete(db, pExpr);",
          "",
          "[Added Lines]",
          "1653:   sqlite3ExprUnmapAndDelete(pParse, pExpr);",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1177:       A = sqlite3ExprAlloc(pParse->db, TK_INTEGER,&sqlite3IntTokens[N],1);",
          "1178:     }else if( Y->nExpr==1 ){",
          "",
          "[Removed Lines]",
          "1176:       sqlite3ExprDelete(pParse->db, A);",
          "",
          "[Added Lines]",
          "1176:       sqlite3ExprUnmapAndDelete(pParse, A);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3871: Expr *sqlite3ExprFunction(Parse*,ExprList*, Token*, int);",
          "3872: void sqlite3ExprAssignVarNumber(Parse*, Expr*, u32);",
          "3873: void sqlite3ExprDelete(sqlite3*, Expr*);",
          "3874: ExprList *sqlite3ExprListAppend(Parse*,ExprList*,Expr*);",
          "3875: ExprList *sqlite3ExprListAppendVector(Parse*,ExprList*,IdList*,Expr*);",
          "3876: void sqlite3ExprListSetSortOrder(ExprList*,int);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3874: void sqlite3ExprUnmapAndDelete(Parse*, Expr*);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ddf7f42115eb93c489f966e035dec00af57aa39",
      "candidate_info": {
        "commit_hash": "4ddf7f42115eb93c489f966e035dec00af57aa39",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4ddf7f42115eb93c489f966e035dec00af57aa39",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "New test case loaded into test/fuzzdata8.db.\n\nFossilOrigin-Name: 00ae0c6c4815366bd2f36bc054b13bc7b568dd0a3caceddf0eba4db33f010ee4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d5250db6322103326f0d5782ba049996d9ce8784f9e53a3112fb6f09f888f1c3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "228a52d973c5eae8557adfc5da3b5b1ebcffdbec",
      "candidate_info": {
        "commit_hash": "228a52d973c5eae8557adfc5da3b5b1ebcffdbec",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/228a52d973c5eae8557adfc5da3b5b1ebcffdbec",
        "files": [
          "manifest",
          "manifest.uuid"
        ],
        "message": "Version 3.30.0\n\nFossilOrigin-Name: c20a35336432025445f9f7e289d0cc3e4003fb17f45a4ce74c6269c407c6e09f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7f9a4b6015ac332a04d3e394a6b3210fc95253d8786a261178a5639cb8d9d987",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0971ef45abb33fd7f44510aa095efcdae776301b",
      "candidate_info": {
        "commit_hash": "0971ef45abb33fd7f44510aa095efcdae776301b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0971ef45abb33fd7f44510aa095efcdae776301b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "test/corruptL.test"
        ],
        "message": "Fix an assert() in the OP_Delete opcode that could fail with a corrupt database.\n\nFossilOrigin-Name: 915388ab39ba3ca8681cd2613b91314aa965967f23a5bface90f54a3d6423300",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "test/corruptL.test||test/corruptL.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5dfc4fe98a4821cbdbfd7dfddf221b00251b2a26bf58767a3956b64e9a4e92da",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4786:     i64 iKey = sqlite3BtreeIntegerKey(pC->uc.pCursor);",
          "4788:   }",
          "4789: #endif",
          "",
          "[Removed Lines]",
          "4787:     assert( pC->movetoTarget==iKey );",
          "",
          "[Added Lines]",
          "4787:     assert( CORRUPT_DB || pC->movetoTarget==iKey );",
          "",
          "---------------"
        ],
        "test/corruptL.test||test/corruptL.test": [
          "File: test/corruptL.test -> test/corruptL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1008: } {1 {database disk image is malformed}}",
          "1011: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1011: #-------------------------------------------------------------------------",
          "1012: reset_db",
          "1013: do_test 11.0 {",
          "1014:   sqlite3 db {}",
          "1015:   db deserialize [decode_hexdb {",
          "1016: | size 595 pagesize 512 filename x.db",
          "1017: | page 1 offset 0",
          "1018: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "1019: |     16: 02 00 00 01 00 40 20 20 00 01 00 0c 00 00 00 07   .....@  ........",
          "1020: |     32: 00 00 00 05 07 a1 1f fa 00 00 00 08 00 00 00 04   ................",
          "1021: |     48: 00 00 01 00 00 49 00 00 00 00 00 05 00 00 00 00   .....I..........",
          "1022: |     80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1c   ................",
          "1023: |     96: 00 2e 2c 50 0d 00 00 00 06 01 06 00 01 da 01 b0   ..,P............",
          "1024: |    112: 01 56 01 86 01 2a 01 06 00 00 62 00 00 00 00 00   .V...*....b.....",
          "1025: |    128: 00 ed e2 78 74 64 33 ff 43 52 45 41 54 45 20 49   ...xtd3.CREATE I",
          "1026: |    144: 4e 44 45 58 20 74 33 78 20 4f 4e 20 74 33 28 38   NDEX t3x ON t3(8",
          "1027: |    160: 29 2e 04 06 17 15 11 01 45 69 6e 64 65 68 74 32   ).......Eindeht2",
          "1028: |    176: 63 64 74 31 e5 43 52 45 41 54 45 20 49 4e 44 45   cdt1.CREATE INDE",
          "1029: |    192: 58 20 74 32 63 c4 20 4f 4e 20 74 32 28 63 2c 64   X t2c. ON t2(c,d",
          "1030: |    208: 29 28 05 06 17 01 11 11 3d 74 61 6c 36 74 62 74   )(......=tal6tbt",
          "1031: |    224: 65 32 04 43 52 45 41 54 45 20 54 41 42 4c 45 20   e2.CREATE TABLE",
          "1032: |    240: 74 00 04 00 00 00 00 00 00 00 00 00 00 00 00 00   t...............",
          "1033: |    256: 00 00 00 00 00 00 22 07 06 17 11 11 01 30 e8 03   .............0..",
          "1034: |    272: 62 6c 65 74 34 74 35 02 43 52 45 41 54 45 20 54   blet4t5.CREATE T",
          "1035: |    288: 41 42 4c 45 20 74 34 28 94 29 2a 06 06 17 13 11   ABLE t4(.)*.....",
          "1036: |    304: 01 3f 69 33 74 6e 65 78 78 74 64 33 ff 43 52 45   .?i3tnexxtd3.CRE",
          "1037: |    320: 41 54 45 20 49 4e 44 45 58 20 74 33 78 20 4f 4e   ATE INDEX t3x ON",
          "1038: |    336: 20 74 31 28 38 29 2e 04 06 17 15 11 01 45 69 6e    t1(8).......Ein",
          "1039: |    352: 64 65 68 74 32 63 64 74 31 e5 43 52 45 41 54 45   deht2cdt1.CREATE",
          "1040: |    368: 20 49 4e 44 45 58 20 74 32 63 c4 20 4f 4e 20 74    INDEX t2c. ON t",
          "1041: |    384: 32 28 63 2c 64 29 28 05 06 17 01 11 11 3d 74 61   2(c,d)(......=ta",
          "1042: |    400: 6c 32 74 62 74 65 32 04 43 52 45 41 54 45 20 54   l2tbte2.CREATE T",
          "1043: |    416: 41 42 4c 45 20 74 33 28 63 2c 78 2c 65 2c 66 29   ABLE t3(c,x,e,f)",
          "1044: |    432: 28 02 06 17 11 11 01 3d 74 61 9e 93 65 74 32 74   (......=ta..et2t",
          "1045: |    448: 32 03 43 52 45 41 54 45 20 54 41 42 4c 45 20 74   2.CREATE TABLE t",
          "1046: |    464: 32 28 63 2c 64 2c 65 2c 66 29 24 01 06 17 11 11   2(c,d,e,f)$.....",
          "1047: |    480: 01 35 55 61 62 6c 88 74 31 74 31 02 43 52 45 41   .5Uabl.t1t1.CREA",
          "1048: |    496: 54 45 20 54 41 42 4c 45 20 74 31 28 61 2c 62 29   TE TABLE t1(a,b)",
          "1049: | page 2 offset 512",
          "1050: |      0: 0d 00 00 00 0d 25 00 01 cf 00 01 fa 01 f3 01 de   .....%..........",
          "1051: |     16: 01 00 00 00 fd 00 00 0d 00 00 00 00 45 20 54 41   ............E TA",
          "1052: |     32: 42 4c 45 20 74 34 28 94 29 2a 06 06 17 13 11 01   BLE t4(.)*......",
          "1053: |     48: 3f 69 33 74 6e 65 78 78 74 64 33 ff 43 52 45 a0   ?i3tnexxtd3.CRE.",
          "1054: |     64: a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 74 13 11 01   ............t...",
          "1055: |     80: 49 45 74 00 00 00 00 00 00 00 00 00 00 00 00 00   IEt.............",
          "1056: | end x.db",
          "1057: }]} {}",
          "1059: do_catchsql_test 11.1 {",
          "1060:   DELETE FROM t3 WHERE x IN (SELECT x FROM t4);",
          "1061: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}