{
  "cve_id": "CVE-2017-6952",
  "cve_desc": "Integer overflow in the cs_winkernel_malloc function in winkernel_mm.c in Capstone 3.0.4 and earlier allows attackers to cause a denial of service (heap-based buffer overflow in a kernel driver) or possibly have unspecified other impact via a large value.",
  "repo": "aquynh/capstone",
  "patch_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
  "patch_info": {
    "commit_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/6fe86eef621b9849f51a5e1e5d73258a93440403",
    "files": [
      "windows/winkernel_mm.c"
    ],
    "message": "provide a validity check to prevent against Integer overflow conditions (#870)\n\n* provide a validity check to prevent against Integer overflow conditions\n\n* fix some style issues.",
    "before_after_code_files": [
      "windows/winkernel_mm.c||windows/winkernel_mm.c"
    ]
  },
  "patch_diff": {
    "windows/winkernel_mm.c||windows/winkernel_mm.c": [
      "File: windows/winkernel_mm.c -> windows/winkernel_mm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: #include \"winkernel_mm.h\"",
      "5: #include <ntddk.h>",
      "8: static const ULONG CS_WINKERNEL_POOL_TAG = 'kwsC';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: #include <Ntintsafe.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "35: #pragma prefast(suppress : 30030)  // Allocating executable POOL_TYPE memory",
      "38:  if (!block) {",
      "39:   return NULL;",
      "40:  }",
      "",
      "[Removed Lines]",
      "36:  CS_WINKERNEL_MEMBLOCK *block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "37:    NonPagedPool, size + sizeof(CS_WINKERNEL_MEMBLOCK), CS_WINKERNEL_POOL_TAG);",
      "",
      "[Added Lines]",
      "37:  size_t number_of_bytes = 0;",
      "38:  CS_WINKERNEL_MEMBLOCK *block = NULL;",
      "42:  if (!NT_SUCCESS(RtlSizeTAdd(size, sizeof(CS_WINKERNEL_MEMBLOCK), &number_of_bytes))) {",
      "43:   return NULL;",
      "44:  }",
      "45:  block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "46:    NonPagedPool, number_of_bytes, CS_WINKERNEL_POOL_TAG);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c2cb0e7d9cc6f5251598cee0b89b36eca359570e",
      "candidate_info": {
        "commit_hash": "c2cb0e7d9cc6f5251598cee0b89b36eca359570e",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/c2cb0e7d9cc6f5251598cee0b89b36eca359570e",
        "files": [
          "cs.c"
        ],
        "message": "arm: reset IT block before cs_disasm(). this fixes issue #643",
        "before_after_code_files": [
          "cs.c||cs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cs.c||cs.c": [
          "File: cs.c -> cs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "467:  handle->errnum = CS_ERR_OK;",
          "469: #ifdef CAPSTONE_USE_SYS_DYN_MEM",
          "470:  if (count > 0 && count <= INSN_CACHE_SIZE)",
          "471:   cache_size = (unsigned int) count;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "470:  handle->ITBlock.size = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bab2a9303170a0dad7eb1844fcf69a4818c9042b",
      "candidate_info": {
        "commit_hash": "bab2a9303170a0dad7eb1844fcf69a4818c9042b",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/bab2a9303170a0dad7eb1844fcf69a4818c9042b",
        "files": [
          "cstool/cstool.c"
        ],
        "message": "cstool: align assembly code for x86",
        "before_after_code_files": [
          "cstool/cstool.c||cstool/cstool.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cstool/cstool.c||cstool/cstool.c": [
          "File: cstool/cstool.c -> cstool/cstool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "114:  uint64_t address = 0;",
          "115:  cs_insn *insn;",
          "116:  cs_err err;",
          "118:  if (argc != 3 && argc != 4) {",
          "119:   usage(argv[0]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117:  bool x86_arch = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "182:  }",
          "184:  if (!strcmp(mode, \"x16\")) {",
          "185:   err = cs_open(CS_ARCH_X86, CS_MODE_16, &handle);",
          "186:  }",
          "188:  if (!strcmp(mode, \"x32\")) {",
          "189:   err = cs_open(CS_ARCH_X86, CS_MODE_32, &handle);",
          "190:  }",
          "192:  if (!strcmp(mode, \"x64\")) {",
          "193:   err = cs_open(CS_ARCH_X86, CS_MODE_64, &handle);",
          "194:  }",
          "196:  if (!strcmp(mode, \"x16att\")) {",
          "197:   err = cs_open(CS_ARCH_X86, CS_MODE_16, &handle);",
          "198:   if (!err) {",
          "199:    cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "186:   x86_arch = true;",
          "191:   x86_arch = true;",
          "196:   x86_arch = true;",
          "201:   x86_arch = true;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "201:  }",
          "203:  if (!strcmp(mode,\"x32att\")) {",
          "204:   err = cs_open(CS_ARCH_X86, CS_MODE_32, &handle);",
          "205:   if (!err) {",
          "206:    cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "209:   x86_arch = true;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "208:  }",
          "210:  if (!strcmp(mode,\"x64att\")) {",
          "211:   err = cs_open(CS_ARCH_X86, CS_MODE_64, &handle);",
          "212:   if (!err) {",
          "213:    cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217:   x86_arch = true;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "243:  count = cs_disasm(handle, assembly, size, address, 0, &insn);",
          "244:  if (count > 0) {",
          "253:    }",
          "255:   }",
          "256:   cs_free(insn, count);",
          "257:  } else {",
          "",
          "[Removed Lines]",
          "245:   size_t j;",
          "246:   int i;",
          "248:   printf(\"\\n\");",
          "249:   for (j = 0; j < count; j++) {",
          "250:    printf(\"%\"PRIx64 \"\\t\", insn[j].address);",
          "251:    for (i = 0; i < insn[j].size; i++) {",
          "252:     printf(\"%02x\", insn[j].bytes[i]);",
          "254:    printf(\"\\t%s\\t%s\\n\", insn[j].mnemonic, insn[j].op_str);",
          "",
          "[Added Lines]",
          "252:   size_t i;",
          "254:   for (i = 0; i < count; i++) {",
          "255:    int j;",
          "256:    printf(\"%\"PRIx64\"  \", insn[i].address);",
          "257:    for (j = 0; j < insn[i].size; j++) {",
          "258:     printf(\"%02x\", insn[i].bytes[j]);",
          "259:    }",
          "262:    if (x86_arch) {",
          "263:     for (; j < 16; j++) {",
          "264:      printf(\"  \");",
          "265:     }",
          "267:    printf(\"  %s\\t%s\\n\", insn[i].mnemonic, insn[i].op_str);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "61e5054b634497919e7e417f5ebfbd63a45ad510",
      "candidate_info": {
        "commit_hash": "61e5054b634497919e7e417f5ebfbd63a45ad510",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/61e5054b634497919e7e417f5ebfbd63a45ad510",
        "files": [
          "cstool/cstool.c"
        ],
        "message": "cstool version 2",
        "before_after_code_files": [
          "cstool/cstool.c||cstool/cstool.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cstool/cstool.c||cstool/cstool.c": [
          "File: cstool/cstool.c -> cstool/cstool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "228:  }",
          "230:  if (!strcmp(mode, \"x16\")) {",
          "231:   arch = \"x86\";",
          "232:   err = cs_open(CS_ARCH_X86, CS_MODE_16, &handle);",
          "233:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231:         md = CS_MODE_64;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "789224e7fe8d585c4299d15eea74b2efe03b415a",
      "candidate_info": {
        "commit_hash": "789224e7fe8d585c4299d15eea74b2efe03b415a",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/789224e7fe8d585c4299d15eea74b2efe03b415a",
        "files": [
          "arch/X86/X86DisassemblerDecoder.c"
        ],
        "message": "Fix use of uninitialized value for some instructions\n\nCaught by Valgrind:\n\n    Conditional jump or move depends on uninitialised value(s)\n       at 0xD5BB6F: readModRM (X86DisassemblerDecoder.c:1528)\n       by 0xD5BF02: getIDWithAttrMask (X86DisassemblerDecoder.c:1101)\n       by 0xD5CC5E: getID (X86DisassemblerDecoder.c:1249)\n       by 0xD5CC5E: decodeInstruction (X86DisassemblerDecoder.c:2335)\n       by 0xD52009: X86_getInstruction (X86Disassembler.c:822)\n       by 0xD51781: cs_disasm (cs.c:503)",
        "before_after_code_files": [
          "arch/X86/X86DisassemblerDecoder.c||arch/X86/X86DisassemblerDecoder.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/X86/X86DisassemblerDecoder.c||arch/X86/X86DisassemblerDecoder.c": [
          "File: arch/X86/X86DisassemblerDecoder.c -> arch/X86/X86DisassemblerDecoder.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "923:  insn->opcodeType = ONEBYTE;",
          "925:  if (insn->vectorExtensionType == TYPE_EVEX) {",
          "926:   switch (mmFromEVEX2of4(insn->vectorExtensionPrefix[1])) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "924:  insn->firstByte = 0x00;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8925ff9bde4faad8fbb5ae499e38ba29159252a4",
      "candidate_info": {
        "commit_hash": "8925ff9bde4faad8fbb5ae499e38ba29159252a4",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/8925ff9bde4faad8fbb5ae499e38ba29159252a4",
        "files": [
          "include/x86.h"
        ],
        "message": "x86: fix X86_REL_ADDR macro - handle two-byte jump instructions",
        "before_after_code_files": [
          "include/x86.h||include/x86.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/x86.h||include/x86.h": [
          "File: include/x86.h -> include/x86.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: #endif",
          "19: typedef enum x86_reg {",
          "",
          "[Removed Lines]",
          "16: #define X86_REL_ADDR(insn) (insn.address + insn.size + insn.detail->x86.disp)",
          "",
          "[Added Lines]",
          "16: #define X86_REL_ADDR(insn) (((insn).detail->x86.operands[0].type == X86_OP_IMM) \\",
          "17:  ? (uint64_t)((insn).detail->x86.operands[0].imm) \\",
          "18:  : (((insn).address + (insn).size) + (uint64_t)(insn).detail->x86.disp))",
          "",
          "---------------"
        ]
      }
    }
  ]
}