{
  "cve_id": "CVE-2019-10664",
  "cve_desc": "Domoticz before 4.10578 allows SQL Injection via the idx parameter in CWebServer::GetFloorplanImage in WebServer.cpp.",
  "repo": "domoticz/domoticz",
  "patch_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
  "patch_info": {
    "commit_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/ee70db46f81afa582c96b887b73bcd2a86feda00",
    "files": [
      "main/WebServer.cpp"
    ],
    "message": "Fixed possible SQL Injection Vulnerability (Thanks to Fabio Carretto!)",
    "before_after_code_files": [
      "main/WebServer.cpp||main/WebServer.cpp"
    ]
  },
  "patch_diff": {
    "main/WebServer.cpp||main/WebServer.cpp": [
      "File: main/WebServer.cpp -> main/WebServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10772:     return;",
      "10773:    }",
      "10774:    std::vector<std::vector<std::string> > result;",
      "10776:    if (result.empty())",
      "10777:     return;",
      "10778:    reply::set_content(&rep, result[0][0].begin(), result[0][0].end());",
      "",
      "[Removed Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%s\", idx.c_str());",
      "",
      "[Added Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%d\", atol(idx.c_str()));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "414dfe3d6608dd3587bc145be0ade6bf8321ebd4",
      "candidate_info": {
        "commit_hash": "414dfe3d6608dd3587bc145be0ade6bf8321ebd4",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/414dfe3d6608dd3587bc145be0ade6bf8321ebd4",
        "files": [
          "main/Camera.cpp",
          "main/WebServer.cpp",
          "main/WebServer.h"
        ],
        "message": "Added a JSON command to retrieve the cameras as user (without parameters)",
        "before_after_code_files": [
          "main/Camera.cpp||main/Camera.cpp",
          "main/WebServer.cpp||main/WebServer.cpp",
          "main/WebServer.h||main/WebServer.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [
            "main/WebServer.cpp||main/WebServer.cpp"
          ],
          "candidate": [
            "main/WebServer.cpp||main/WebServer.cpp"
          ]
        }
      },
      "candidate_diff": {
        "main/Camera.cpp||main/Camera.cpp": [
          "File: main/Camera.cpp -> main/Camera.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "404:     }",
          "405:    }",
          "406:   }",
          "407:   void CWebServer::GetInternalCameraSnapshot(WebEmSession & session, const request& req, reply & rep)",
          "408:   {",
          "409:    std::string request_path;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "407:   void CWebServer::RType_CamerasUser(WebEmSession& session, const request& req, Json::Value& root)",
          "408:   {",
          "409:    root[\"status\"] = \"OK\";",
          "410:    root[\"title\"] = \"Cameras\";",
          "412:    std::vector<std::vector<std::string> > result;",
          "413:    result = m_sql.safe_query(\"SELECT ID, Name FROM Cameras WHERE (Enabled=='1') ORDER BY ID ASC\");",
          "414:    if (!result.empty())",
          "415:    {",
          "416:     int ii = 0;",
          "417:     for (const auto& itt : result)",
          "418:     {",
          "419:      std::vector<std::string> sd = itt;",
          "421:      root[\"result\"][ii][\"idx\"] = sd[0];",
          "422:      root[\"result\"][ii][\"Name\"] = sd[1];",
          "423:      ii++;",
          "424:     }",
          "425:    }",
          "426:   }",
          "",
          "---------------"
        ],
        "main/WebServer.cpp||main/WebServer.cpp": [
          "File: main/WebServer.cpp -> main/WebServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "583:    RegisterRType(\"devices\", boost::bind(&CWebServer::RType_Devices, this, _1, _2, _3));",
          "584:    RegisterRType(\"deletedevice\", boost::bind(&CWebServer::RType_DeleteDevice, this, _1, _2, _3));",
          "585:    RegisterRType(\"cameras\", boost::bind(&CWebServer::RType_Cameras, this, _1, _2, _3));",
          "586:    RegisterRType(\"users\", boost::bind(&CWebServer::RType_Users, this, _1, _2, _3));",
          "587:    RegisterRType(\"mobiles\", boost::bind(&CWebServer::RType_Mobiles, this, _1, _2, _3));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "586:    RegisterRType(\"cameras_user\", boost::bind(&CWebServer::RType_CamerasUser, this, _1, _2, _3));",
          "",
          "---------------"
        ],
        "main/WebServer.h||main/WebServer.h": [
          "File: main/WebServer.h -> main/WebServer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "302:  void RType_Events(WebEmSession & session, const request& req, Json::Value &root);",
          "303:  void RType_Hardware(WebEmSession & session, const request& req, Json::Value &root);",
          "304:  void RType_Devices(WebEmSession & session, const request& req, Json::Value &root);",
          "306:  void RType_Users(WebEmSession & session, const request& req, Json::Value &root);",
          "307:  void RType_Mobiles(WebEmSession & session, const request& req, Json::Value &root);",
          "308:  void RType_Timers(WebEmSession & session, const request& req, Json::Value &root);",
          "",
          "[Removed Lines]",
          "305:  void RType_Cameras(WebEmSession & session, const request& req, Json::Value &root);",
          "",
          "[Added Lines]",
          "305:  void RType_Cameras(WebEmSession& session, const request& req, Json::Value& root);",
          "306:  void RType_CamerasUser(WebEmSession& session, const request& req, Json::Value& root);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0e7cadf4700fbdd93d939923ea98263b16e3917d",
      "candidate_info": {
        "commit_hash": "0e7cadf4700fbdd93d939923ea98263b16e3917d",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/0e7cadf4700fbdd93d939923ea98263b16e3917d",
        "files": [
          "main/Helper.cpp"
        ],
        "message": "Added extra character to check for",
        "before_after_code_files": [
          "main/Helper.cpp||main/Helper.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/Helper.cpp||main/Helper.cpp": [
          "File: main/Helper.cpp -> main/Helper.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1018:  \"$\",",
          "1019:  \"<\",",
          "1020:  \">\",",
          "1021:  \"\\n\",",
          "1022:  \"\\r\",",
          "1023:  NULL",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1021:  \"`\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d3773b1b3fd416322add45b1e92fd338a3bc2327",
      "candidate_info": {
        "commit_hash": "d3773b1b3fd416322add45b1e92fd338a3bc2327",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/d3773b1b3fd416322add45b1e92fd338a3bc2327",
        "files": [
          "hardware/P1MeterBase.cpp"
        ],
        "message": "Corrected casting to float",
        "before_after_code_files": [
          "hardware/P1MeterBase.cpp||hardware/P1MeterBase.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/P1MeterBase.cpp||hardware/P1MeterBase.cpp": [
          "File: hardware/P1MeterBase.cpp -> hardware/P1MeterBase.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "484:      m_amperagel3 = temp_ampere; //Amperage L3;",
          "485:     break;",
          "486:    case P1TYPE_POWERUSEL1:",
          "488:     if (temp_power < 10000)",
          "489:      m_powerusel1 = temp_power; //Power Used L1;",
          "490:     break;",
          "491:    case P1TYPE_POWERUSEL2:",
          "493:     if (temp_power < 10000)",
          "494:      m_powerusel2 = temp_power; //Power Used L2;",
          "495:     break;",
          "496:    case P1TYPE_POWERUSEL3:",
          "498:     if (temp_power < 10000)",
          "499:      m_powerusel3 = temp_power; //Power Used L3;",
          "500:     break;",
          "501:    case P1TYPE_POWERDELL1:",
          "503:     if (temp_power < 10000)",
          "504:      m_powerdell1 = temp_power; //Power Used L1;",
          "505:     break;",
          "506:    case P1TYPE_POWERDELL2:",
          "508:     if (temp_power < 10000)",
          "509:      m_powerdell2 = temp_power; //Power Used L2;",
          "510:     break;",
          "511:    case P1TYPE_POWERDELL3:",
          "513:     if (temp_power < 10000)",
          "514:      m_powerdell3 = temp_power; //Power Used L3;",
          "515:     break;",
          "",
          "[Removed Lines]",
          "487:     temp_power = (unsigned long)(strtod(value, &validate)*1000.0f);",
          "492:     temp_power = (unsigned long)(strtod(value, &validate)*1000.0f);",
          "497:     temp_power = (unsigned long)(strtod(value, &validate)*1000.0f);",
          "502:     temp_power = (unsigned long)(strtod(value, &validate)*1000.0f);",
          "507:     temp_power = (unsigned long)(strtod(value, &validate)*1000.0f);",
          "512:     temp_power = (unsigned long)(strtod(value, &validate)*1000.0f);",
          "",
          "[Added Lines]",
          "487:     temp_power = static_cast<float>(strtod(value, &validate)*1000.0f);",
          "492:     temp_power = static_cast<float>(strtod(value, &validate)*1000.0f);",
          "497:     temp_power = static_cast<float>(strtod(value, &validate)*1000.0f);",
          "502:     temp_power = static_cast<float>(strtod(value, &validate)*1000.0f);",
          "507:     temp_power = static_cast<float>(strtod(value, &validate)*1000.0f);",
          "512:     temp_power = static_cast<float>(strtod(value, &validate)*1000.0f);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a668baf917333e93f92dd9bb7c77eef8e0bc4ce4",
      "candidate_info": {
        "commit_hash": "a668baf917333e93f92dd9bb7c77eef8e0bc4ce4",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/a668baf917333e93f92dd9bb7c77eef8e0bc4ce4",
        "files": [
          "main/WebServer.cpp"
        ],
        "message": "Week Graph for 'counter' sensor now working",
        "before_after_code_files": [
          "main/WebServer.cpp||main/WebServer.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [
            "main/WebServer.cpp||main/WebServer.cpp"
          ],
          "candidate": [
            "main/WebServer.cpp||main/WebServer.cpp"
          ]
        }
      },
      "candidate_diff": {
        "main/WebServer.cpp||main/WebServer.cpp": [
          "File: main/WebServer.cpp -> main/WebServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "14468:          sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);",
          "14469:          szValue = szTmp;",
          "14470:          break;",
          "14471:         default:",
          "14472:          szValue = \"0\";",
          "14473:          break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14471:         case MTYPE_COUNTER:",
          "14473:          break;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14565:         sprintf(szTmp, \"%.3f\", atof(szValue.c_str()) / divider);",
          "14566:         szValue = szTmp;",
          "14567:         break;",
          "14568:        default:",
          "14569:         szValue = \"0\";",
          "14570:         break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14571:        case MTYPE_COUNTER:",
          "14573:         break;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "de0042ec148eb8e1f0c631bd024fdb3170e8d8b9",
      "candidate_info": {
        "commit_hash": "de0042ec148eb8e1f0c631bd024fdb3170e8d8b9",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/de0042ec148eb8e1f0c631bd024fdb3170e8d8b9",
        "files": [
          "hardware/MySensorsBase.cpp",
          "hardware/MySensorsBase.h"
        ],
        "message": "Corrected MySensorsBase::UpdateSwitchLastUpdate",
        "before_after_code_files": [
          "hardware/MySensorsBase.cpp||hardware/MySensorsBase.cpp",
          "hardware/MySensorsBase.h||hardware/MySensorsBase.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/MySensorsBase.cpp||hardware/MySensorsBase.cpp": [
          "File: hardware/MySensorsBase.cpp -> hardware/MySensorsBase.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1079:  }",
          "1080: }",
          "1083: {",
          "1084:  char szIdx[10];",
          "1086:  std::vector<std::vector<std::string> > result;",
          "1089:  if (result.empty())",
          "1090:   return; //not found!",
          "1091:  time_t now = time(0);",
          "",
          "[Removed Lines]",
          "1082: void MySensorsBase::UpdateSwitchLastUpdate(const unsigned char Idx, const int SubUnit)",
          "1085:  sprintf(szIdx, \"%X%02X%02X%02X\", 0, 0, 0, Idx);",
          "1088:  result = m_sql.safe_query(\"SELECT ID FROM DeviceStatus WHERE (HardwareID==%d) AND (DeviceID=='%q') AND (Unit==%d) AND (Type==%d) AND (Subtype==%d)\", m_HwdID, szIdx, SubUnit, int(pTypeGeneralSwitch), int(sSwitchTypeAC));",
          "",
          "[Added Lines]",
          "1082: void MySensorsBase::UpdateSwitchLastUpdate(const unsigned char NodeID, const int ChildID)",
          "1085:  sprintf(szIdx, \"%08X\", NodeID);",
          "1087:  result = m_sql.safe_query(\"SELECT ID FROM DeviceStatus WHERE (HardwareID==%d) AND (DeviceID=='%q') AND (Unit==%d) AND (Type==%d) AND (Subtype==%d)\", m_HwdID, szIdx, ChildID, int(pTypeGeneralSwitch), int(sSwitchTypeAC));",
          "",
          "---------------"
        ],
        "hardware/MySensorsBase.h||hardware/MySensorsBase.h": [
          "File: hardware/MySensorsBase.h -> hardware/MySensorsBase.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "446:  void UpdateSwitch(const _eSetType vType, const unsigned char Idx, const int SubUnit, const bool bOn, const double Level, const std::string &defaultname, const int BatLevel);",
          "449:  void UpdateBlindSensorLastUpdate(const int NodeID, const int ChildID);",
          "450:  void UpdateRGBWSwitchLastUpdate(const int NodeID, const int ChildID);",
          "",
          "[Removed Lines]",
          "448:  void UpdateSwitchLastUpdate(const unsigned char Idx, const int SubUnit);",
          "",
          "[Added Lines]",
          "448:  void UpdateSwitchLastUpdate(const unsigned char NodeID, const int ChildID);",
          "",
          "---------------"
        ]
      }
    }
  ]
}