{
  "cve_id": "CVE-2020-15203",
  "cve_desc": "In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, by controlling the `fill` argument of tf.strings.as_string, a malicious attacker is able to trigger a format string vulnerability due to the way the internal format use in a `printf` call is constructed. This may result in segmentation fault. The issue is patched in commit 33be22c65d86256e6826666662e40dbdfe70ee83, and is released in TensorFlow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "33be22c65d86256e6826666662e40dbdfe70ee83",
  "patch_info": {
    "commit_hash": "33be22c65d86256e6826666662e40dbdfe70ee83",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/33be22c65d86256e6826666662e40dbdfe70ee83",
    "files": [
      "tensorflow/core/kernels/BUILD",
      "tensorflow/core/kernels/as_string_op.cc",
      "tensorflow/core/kernels/as_string_op_test.cc"
    ],
    "message": "Prevent format string vulnerability in `tf.strings.as_string`.\n\nThe `printf` format specifier only allows `#`, `0`, `-`, `+` and space as flag characters. Others are interpreted as width/precision/length modifier or conversion specifiers. If a character does not fit into any of these sets `printf` just displays it.\n\nAlso add a test suite for `tf.strings.as_string`. Also fix the issue where the flag character was used only if width was specified.\n\nPiperOrigin-RevId: 332553548\nChange-Id: Ie57cf2a7c14d1a36097642794c14329db669bbba",
    "before_after_code_files": [
      "tensorflow/core/kernels/as_string_op.cc||tensorflow/core/kernels/as_string_op.cc",
      "tensorflow/core/kernels/as_string_op_test.cc||tensorflow/core/kernels/as_string_op_test.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/as_string_op.cc||tensorflow/core/kernels/as_string_op.cc": [
      "File: tensorflow/core/kernels/as_string_op.cc -> tensorflow/core/kernels/as_string_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "65:     OP_REQUIRES(ctx, !(scientific && shortest),",
      "66:                 errors::InvalidArgument(",
      "67:                     \"Cannot select both scientific and shortest notation\"));",
      "68:     format_ = \"%\";",
      "69:     if (width > -1) {",
      "71:     }",
      "72:     if (precision > -1) {",
      "73:       strings::Appendf(&format_, \".%d\", precision);",
      "",
      "[Removed Lines]",
      "70:       strings::Appendf(&format_, \"%s%d\", fill_string.c_str(), width);",
      "",
      "[Added Lines]",
      "70:     if (!fill_string.empty()) {",
      "71:       switch (fill_string[0]) {",
      "72:         case ' ':",
      "73:         case '+':",
      "74:         case '-':",
      "75:         case '0':",
      "76:         case '#':",
      "77:           strings::Appendf(&format_, \"%s\", fill_string.c_str());",
      "78:           break;",
      "79:         default:",
      "80:           bool fill_not_supported = true;",
      "81:           OP_REQUIRES(ctx, !fill_not_supported,",
      "82:                       errors::InvalidArgument(\"Fill argument not supported: \\\"\",",
      "83:                                               fill_string, \"\\\"\"));",
      "84:       }",
      "85:     }",
      "87:       strings::Appendf(&format_, \"%d\", width);",
      "",
      "---------------"
    ],
    "tensorflow/core/kernels/as_string_op_test.cc||tensorflow/core/kernels/as_string_op_test.cc": [
      "File: tensorflow/core/kernels/as_string_op_test.cc -> tensorflow/core/kernels/as_string_op_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3: Licensed under the Apache License, Version 2.0 (the \"License\");",
      "4: you may not use this file except in compliance with the License.",
      "5: You may obtain a copy of the License at",
      "7:     http://www.apache.org/licenses/LICENSE-2.0",
      "9: Unless required by applicable law or agreed to in writing, software",
      "10: distributed under the License is distributed on an \"AS IS\" BASIS,",
      "11: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
      "12: See the License for the specific language governing permissions and",
      "13: limitations under the License.",
      "16: #include \"tensorflow/core/framework/fake_input.h\"",
      "17: #include \"tensorflow/core/framework/node_def_builder.h\"",
      "18: #include \"tensorflow/core/framework/tensor.h\"",
      "19: #include \"tensorflow/core/framework/tensor_testutil.h\"",
      "20: #include \"tensorflow/core/framework/types.h\"",
      "21: #include \"tensorflow/core/kernels/ops_testutil.h\"",
      "22: #include \"tensorflow/core/kernels/ops_util.h\"",
      "23: #include \"tensorflow/core/lib/core/status_test_util.h\"",
      "25: namespace tensorflow {",
      "26: namespace {",
      "28: class AsStringGraphTest : public OpsTestBase {",
      "29:  protected:",
      "30:   Status Init(DataType input_type, const string& fill = \"\", int width = -1,",
      "31:               int precision = -1, bool scientific = false,",
      "32:               bool shortest = false) {",
      "33:     TF_CHECK_OK(NodeDefBuilder(\"op\", \"AsString\")",
      "34:                     .Input(FakeInput(input_type))",
      "35:                     .Attr(\"fill\", fill)",
      "36:                     .Attr(\"precision\", precision)",
      "37:                     .Attr(\"scientific\", scientific)",
      "38:                     .Attr(\"shortest\", shortest)",
      "39:                     .Attr(\"width\", width)",
      "40:                     .Finalize(node_def()));",
      "41:     return InitOp();",
      "42:   }",
      "43: };",
      "45: TEST_F(AsStringGraphTest, Int8) {",
      "46:   TF_ASSERT_OK(Init(DT_INT8));",
      "48:   AddInputFromArray<int8>(TensorShape({3}), {-42, 0, 42});",
      "49:   TF_ASSERT_OK(RunOpKernel());",
      "50:   Tensor expected(allocator(), DT_STRING, TensorShape({3}));",
      "51:   test::FillValues<tstring>(&expected, {\"-42\", \"0\", \"42\"});",
      "52:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
      "53: }",
      "55: TEST_F(AsStringGraphTest, Int64) {",
      "56:   TF_ASSERT_OK(Init(DT_INT64));",
      "58:   AddInputFromArray<int64>(TensorShape({3}), {-42, 0, 42});",
      "59:   TF_ASSERT_OK(RunOpKernel());",
      "60:   Tensor expected(allocator(), DT_STRING, TensorShape({3}));",
      "61:   test::FillValues<tstring>(&expected, {\"-42\", \"0\", \"42\"});",
      "62:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
      "63: }",
      "65: TEST_F(AsStringGraphTest, FloatDefault) {",
      "66:   TF_ASSERT_OK(Init(DT_FLOAT));",
      "68:   AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});",
      "69:   TF_ASSERT_OK(RunOpKernel());",
      "70:   Tensor expected(allocator(), DT_STRING, TensorShape({4}));",
      "71:   test::FillValues<tstring>(",
      "72:       &expected, {\"-42.000000\", \"0.000000\", \"3.141590\", \"42.000000\"});",
      "73:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
      "74: }",
      "76: TEST_F(AsStringGraphTest, FloatScientific) {",
      "77:   TF_ASSERT_OK(Init(DT_FLOAT, /*fill=*/\"\", /*width=*/-1, /*precision=*/-1,",
      "80:   AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});",
      "81:   TF_ASSERT_OK(RunOpKernel());",
      "82:   Tensor expected(allocator(), DT_STRING, TensorShape({4}));",
      "83:   test::FillValues<tstring>(&expected, {\"-4.200000e+01\", \"0.000000e+00\",",
      "84:                                         \"3.141590e+00\", \"4.200000e+01\"});",
      "85:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
      "86: }",
      "88: TEST_F(AsStringGraphTest, FloatShortest) {",
      "89:   TF_ASSERT_OK(Init(DT_FLOAT, /*fill=*/\"\", /*width=*/-1, /*precision=*/-1,",
      "92:   AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});",
      "93:   TF_ASSERT_OK(RunOpKernel());",
      "94:   Tensor expected(allocator(), DT_STRING, TensorShape({4}));",
      "95:   test::FillValues<tstring>(&expected, {\"-42\", \"0\", \"3.14159\", \"42\"});",
      "96:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
      "97: }",
      "99: TEST_F(AsStringGraphTest, FloatPrecisionOnly) {",
      "100:   TF_ASSERT_OK(Init(DT_FLOAT, /*fill=*/\"\", /*width=*/-1, /*precision=*/2));",
      "102:   AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});",
      "103:   TF_ASSERT_OK(RunOpKernel());",
      "104:   Tensor expected(allocator(), DT_STRING, TensorShape({4}));",
      "105:   test::FillValues<tstring>(&expected, {\"-42.00\", \"0.00\", \"3.14\", \"42.00\"});",
      "106:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
      "107: }",
      "109: TEST_F(AsStringGraphTest, FloatWidthOnly) {",
      "110:   TF_ASSERT_OK(Init(DT_FLOAT, /*fill=*/\"\", /*width=*/5));",
      "112:   AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});",
      "113:   TF_ASSERT_OK(RunOpKernel());",
      "114:   Tensor expected(allocator(), DT_STRING, TensorShape({4}));",
      "115:   test::FillValues<tstring>(",
      "116:       &expected, {\"-42.000000\", \"0.000000\", \"3.141590\", \"42.000000\"});",
      "117:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
      "118: }",
      "120: TEST_F(AsStringGraphTest, Float_5_2_Format) {",
      "121:   TF_ASSERT_OK(Init(DT_FLOAT, /*fill=*/\"\", /*width=*/5, /*precision=*/2));",
      "123:   AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});",
      "124:   TF_ASSERT_OK(RunOpKernel());",
      "125:   Tensor expected(allocator(), DT_STRING, TensorShape({4}));",
      "126:   test::FillValues<tstring>(&expected, {\"-42.00\", \" 0.00\", \" 3.14\", \"42.00\"});",
      "127:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
      "128: }",
      "130: TEST_F(AsStringGraphTest, Complex) {",
      "131:   TF_ASSERT_OK(Init(DT_COMPLEX64, /*fill=*/\"\", /*width=*/5, /*precision=*/2));",
      "133:   AddInputFromArray<complex64>(TensorShape({3}), {{-4, 2}, {0}, {3.14159, -1}});",
      "134:   TF_ASSERT_OK(RunOpKernel());",
      "135:   Tensor expected(allocator(), DT_STRING, TensorShape({3}));",
      "136:   test::FillValues<tstring>(",
      "137:       &expected, {\"(-4.00, 2.00)\", \"( 0.00, 0.00)\", \"( 3.14,-1.00)\"});",
      "138:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
      "139: }",
      "141: TEST_F(AsStringGraphTest, Bool) {",
      "142:   TF_ASSERT_OK(Init(DT_BOOL));",
      "144:   AddInputFromArray<bool>(TensorShape({2}), {true, false});",
      "145:   TF_ASSERT_OK(RunOpKernel());",
      "146:   Tensor expected(allocator(), DT_STRING, TensorShape({2}));",
      "147:   test::FillValues<tstring>(&expected, {\"true\", \"false\"});",
      "148:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
      "149: }",
      "151: TEST_F(AsStringGraphTest, String) {",
      "152:   Status s = Init(DT_STRING);",
      "153:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
      "154:   ASSERT_TRUE(absl::StrContains(",
      "155:       s.error_message(),",
      "156:       \"Value for attr 'T' of string is not in the list of allowed values\"));",
      "157: }",
      "159: TEST_F(AsStringGraphTest, OnlyOneOfScientificAndShortest) {",
      "160:   Status s = Init(DT_FLOAT, /*fill=*/\"\", /*width=*/-1, /*precision=*/-1,",
      "162:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
      "163:   ASSERT_TRUE(",
      "164:       absl::StrContains(s.error_message(),",
      "165:                         \"Cannot select both scientific and shortest notation\"));",
      "166: }",
      "168: TEST_F(AsStringGraphTest, NoShortestForNonFloat) {",
      "169:   Status s = Init(DT_INT32, /*fill=*/\"\", /*width=*/-1, /*precision=*/-1,",
      "171:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
      "172:   ASSERT_TRUE(absl::StrContains(",
      "173:       s.error_message(),",
      "174:       \"scientific and shortest format not supported for datatype\"));",
      "175: }",
      "177: TEST_F(AsStringGraphTest, NoScientificForNonFloat) {",
      "178:   Status s = Init(DT_INT32, /*fill=*/\"\", /*width=*/-1, /*precision=*/-1,",
      "180:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
      "181:   ASSERT_TRUE(absl::StrContains(",
      "182:       s.error_message(),",
      "183:       \"scientific and shortest format not supported for datatype\"));",
      "184: }",
      "186: TEST_F(AsStringGraphTest, NoPrecisionForNonFloat) {",
      "187:   Status s = Init(DT_INT32, /*fill=*/\"\", /*width=*/-1, /*precision=*/5);",
      "188:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
      "189:   ASSERT_TRUE(absl::StrContains(s.error_message(),",
      "190:                                 \"precision not supported for datatype\"));",
      "191: }",
      "193: TEST_F(AsStringGraphTest, LongFill) {",
      "194:   Status s = Init(DT_INT32, /*fill=*/\"asdf\");",
      "195:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
      "196:   ASSERT_TRUE(absl::StrContains(s.error_message(),",
      "197:                                 \"Fill string must be one or fewer characters\"));",
      "198: }",
      "200: TEST_F(AsStringGraphTest, FillWithZero) {",
      "201:   TF_ASSERT_OK(Init(DT_INT64, /*fill=*/\"0\", /*width=*/4));",
      "203:   AddInputFromArray<int64>(TensorShape({3}), {-42, 0, 42});",
      "204:   TF_ASSERT_OK(RunOpKernel());",
      "205:   Tensor expected(allocator(), DT_STRING, TensorShape({3}));",
      "206:   test::FillValues<tstring>(&expected, {\"-042\", \"0000\", \"0042\"});",
      "207:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
      "208: }",
      "210: TEST_F(AsStringGraphTest, FillWithSpace) {",
      "211:   TF_ASSERT_OK(Init(DT_INT64, /*fill=*/\" \", /*width=*/4));",
      "213:   AddInputFromArray<int64>(TensorShape({3}), {-42, 0, 42});",
      "214:   TF_ASSERT_OK(RunOpKernel());",
      "215:   Tensor expected(allocator(), DT_STRING, TensorShape({3}));",
      "216:   test::FillValues<tstring>(&expected, {\" -42\", \"   0\", \"  42\"});",
      "217:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
      "218: }",
      "220: TEST_F(AsStringGraphTest, FillWithChar1) {",
      "221:   TF_ASSERT_OK(Init(DT_INT64, /*fill=*/\"-\", /*width=*/4));",
      "223:   AddInputFromArray<int64>(TensorShape({3}), {-42, 0, 42});",
      "224:   TF_ASSERT_OK(RunOpKernel());",
      "225:   Tensor expected(allocator(), DT_STRING, TensorShape({3}));",
      "226:   test::FillValues<tstring>(&expected, {\"-42 \", \"0   \", \"42  \"});",
      "227:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
      "228: }",
      "230: TEST_F(AsStringGraphTest, FillWithChar3) {",
      "231:   Status s = Init(DT_INT32, /*fill=*/\"s\");",
      "232:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
      "233:   ASSERT_TRUE(",
      "234:       absl::StrContains(s.error_message(), \"Fill argument not supported\"));",
      "235: }",
      "237: TEST_F(AsStringGraphTest, FillWithChar4) {",
      "238:   Status s = Init(DT_INT32, /*fill=*/\"n\");",
      "239:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
      "240:   ASSERT_TRUE(",
      "241:       absl::StrContains(s.error_message(), \"Fill argument not supported\"));",
      "242: }",
      "244: }  // end namespace",
      "245: }  // end namespace tensorflow",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "01948c69c4741820b1a9f8d4a7c5d48c45adb868",
      "candidate_info": {
        "commit_hash": "01948c69c4741820b1a9f8d4a7c5d48c45adb868",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/01948c69c4741820b1a9f8d4a7c5d48c45adb868",
        "files": [
          "tensorflow/core/kernels/BUILD",
          "tensorflow/core/kernels/as_string_op.cc",
          "tensorflow/core/kernels/as_string_op_test.cc"
        ],
        "message": "Prevent format string vulnerability in `tf.strings.as_string`.\n\nThe `printf` format specifier only allows `#`, `0`, `-`, `+` and space as flag characters. Others are interpreted as width/precision/length modifier or conversion specifiers. If a character does not fit into any of these sets `printf` just displays it.\n\nAlso add a test suite for `tf.strings.as_string`. Also fix the issue where the flag character was used only if width was specified.\n\nPiperOrigin-RevId: 332553548\nChange-Id: Ie57cf2a7c14d1a36097642794c14329db669bbba",
        "before_after_code_files": [
          "tensorflow/core/kernels/as_string_op.cc||tensorflow/core/kernels/as_string_op.cc",
          "tensorflow/core/kernels/as_string_op_test.cc||tensorflow/core/kernels/as_string_op_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/as_string_op.cc||tensorflow/core/kernels/as_string_op.cc",
            "tensorflow/core/kernels/as_string_op_test.cc||tensorflow/core/kernels/as_string_op_test.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/as_string_op.cc||tensorflow/core/kernels/as_string_op.cc",
            "tensorflow/core/kernels/as_string_op_test.cc||tensorflow/core/kernels/as_string_op_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/as_string_op.cc||tensorflow/core/kernels/as_string_op.cc": [
          "File: tensorflow/core/kernels/as_string_op.cc -> tensorflow/core/kernels/as_string_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:     OP_REQUIRES(ctx, !(scientific && shortest),",
          "66:                 errors::InvalidArgument(",
          "67:                     \"Cannot select both scientific and shortest notation\"));",
          "68:     format_ = \"%\";",
          "69:     if (width > -1) {",
          "71:     }",
          "72:     if (precision > -1) {",
          "73:       strings::Appendf(&format_, \".%d\", precision);",
          "",
          "[Removed Lines]",
          "70:       strings::Appendf(&format_, \"%s%d\", fill_string.c_str(), width);",
          "",
          "[Added Lines]",
          "70:     if (!fill_string.empty()) {",
          "71:       switch (fill_string[0]) {",
          "72:         case ' ':",
          "73:         case '+':",
          "74:         case '-':",
          "75:         case '0':",
          "76:         case '#':",
          "77:           strings::Appendf(&format_, \"%s\", fill_string.c_str());",
          "78:           break;",
          "79:         default:",
          "80:           bool fill_not_supported = true;",
          "81:           OP_REQUIRES(ctx, !fill_not_supported,",
          "82:                       errors::InvalidArgument(\"Fill argument not supported: \\\"\",",
          "83:                                               fill_string, \"\\\"\"));",
          "84:       }",
          "85:     }",
          "87:       strings::Appendf(&format_, \"%d\", width);",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/as_string_op_test.cc||tensorflow/core/kernels/as_string_op_test.cc": [
          "File: tensorflow/core/kernels/as_string_op_test.cc -> tensorflow/core/kernels/as_string_op_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "4: you may not use this file except in compliance with the License.",
          "5: You may obtain a copy of the License at",
          "7:     http://www.apache.org/licenses/LICENSE-2.0",
          "9: Unless required by applicable law or agreed to in writing, software",
          "10: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "11: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "12: See the License for the specific language governing permissions and",
          "13: limitations under the License.",
          "16: #include \"tensorflow/core/framework/fake_input.h\"",
          "17: #include \"tensorflow/core/framework/node_def_builder.h\"",
          "18: #include \"tensorflow/core/framework/tensor.h\"",
          "19: #include \"tensorflow/core/framework/tensor_testutil.h\"",
          "20: #include \"tensorflow/core/framework/types.h\"",
          "21: #include \"tensorflow/core/kernels/ops_testutil.h\"",
          "22: #include \"tensorflow/core/kernels/ops_util.h\"",
          "23: #include \"tensorflow/core/lib/core/status_test_util.h\"",
          "25: namespace tensorflow {",
          "26: namespace {",
          "28: class AsStringGraphTest : public OpsTestBase {",
          "29:  protected:",
          "30:   Status Init(DataType input_type, const string& fill = \"\", int width = -1,",
          "31:               int precision = -1, bool scientific = false,",
          "32:               bool shortest = false) {",
          "33:     TF_CHECK_OK(NodeDefBuilder(\"op\", \"AsString\")",
          "34:                     .Input(FakeInput(input_type))",
          "35:                     .Attr(\"fill\", fill)",
          "36:                     .Attr(\"precision\", precision)",
          "37:                     .Attr(\"scientific\", scientific)",
          "38:                     .Attr(\"shortest\", shortest)",
          "39:                     .Attr(\"width\", width)",
          "40:                     .Finalize(node_def()));",
          "41:     return InitOp();",
          "42:   }",
          "43: };",
          "45: TEST_F(AsStringGraphTest, Int8) {",
          "46:   TF_ASSERT_OK(Init(DT_INT8));",
          "48:   AddInputFromArray<int8>(TensorShape({3}), {-42, 0, 42});",
          "49:   TF_ASSERT_OK(RunOpKernel());",
          "50:   Tensor expected(allocator(), DT_STRING, TensorShape({3}));",
          "51:   test::FillValues<tstring>(&expected, {\"-42\", \"0\", \"42\"});",
          "52:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "53: }",
          "55: TEST_F(AsStringGraphTest, Int64) {",
          "56:   TF_ASSERT_OK(Init(DT_INT64));",
          "58:   AddInputFromArray<int64>(TensorShape({3}), {-42, 0, 42});",
          "59:   TF_ASSERT_OK(RunOpKernel());",
          "60:   Tensor expected(allocator(), DT_STRING, TensorShape({3}));",
          "61:   test::FillValues<tstring>(&expected, {\"-42\", \"0\", \"42\"});",
          "62:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "63: }",
          "65: TEST_F(AsStringGraphTest, FloatDefault) {",
          "66:   TF_ASSERT_OK(Init(DT_FLOAT));",
          "68:   AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});",
          "69:   TF_ASSERT_OK(RunOpKernel());",
          "70:   Tensor expected(allocator(), DT_STRING, TensorShape({4}));",
          "71:   test::FillValues<tstring>(",
          "72:       &expected, {\"-42.000000\", \"0.000000\", \"3.141590\", \"42.000000\"});",
          "73:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "74: }",
          "76: TEST_F(AsStringGraphTest, FloatScientific) {",
          "77:   TF_ASSERT_OK(Init(DT_FLOAT, /*fill=*/\"\", /*width=*/-1, /*precision=*/-1,",
          "80:   AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});",
          "81:   TF_ASSERT_OK(RunOpKernel());",
          "82:   Tensor expected(allocator(), DT_STRING, TensorShape({4}));",
          "83:   test::FillValues<tstring>(&expected, {\"-4.200000e+01\", \"0.000000e+00\",",
          "84:                                         \"3.141590e+00\", \"4.200000e+01\"});",
          "85:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "86: }",
          "88: TEST_F(AsStringGraphTest, FloatShortest) {",
          "89:   TF_ASSERT_OK(Init(DT_FLOAT, /*fill=*/\"\", /*width=*/-1, /*precision=*/-1,",
          "92:   AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});",
          "93:   TF_ASSERT_OK(RunOpKernel());",
          "94:   Tensor expected(allocator(), DT_STRING, TensorShape({4}));",
          "95:   test::FillValues<tstring>(&expected, {\"-42\", \"0\", \"3.14159\", \"42\"});",
          "96:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "97: }",
          "99: TEST_F(AsStringGraphTest, FloatPrecisionOnly) {",
          "100:   TF_ASSERT_OK(Init(DT_FLOAT, /*fill=*/\"\", /*width=*/-1, /*precision=*/2));",
          "102:   AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});",
          "103:   TF_ASSERT_OK(RunOpKernel());",
          "104:   Tensor expected(allocator(), DT_STRING, TensorShape({4}));",
          "105:   test::FillValues<tstring>(&expected, {\"-42.00\", \"0.00\", \"3.14\", \"42.00\"});",
          "106:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "107: }",
          "109: TEST_F(AsStringGraphTest, FloatWidthOnly) {",
          "110:   TF_ASSERT_OK(Init(DT_FLOAT, /*fill=*/\"\", /*width=*/5));",
          "112:   AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});",
          "113:   TF_ASSERT_OK(RunOpKernel());",
          "114:   Tensor expected(allocator(), DT_STRING, TensorShape({4}));",
          "115:   test::FillValues<tstring>(",
          "116:       &expected, {\"-42.000000\", \"0.000000\", \"3.141590\", \"42.000000\"});",
          "117:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "118: }",
          "120: TEST_F(AsStringGraphTest, Float_5_2_Format) {",
          "121:   TF_ASSERT_OK(Init(DT_FLOAT, /*fill=*/\"\", /*width=*/5, /*precision=*/2));",
          "123:   AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});",
          "124:   TF_ASSERT_OK(RunOpKernel());",
          "125:   Tensor expected(allocator(), DT_STRING, TensorShape({4}));",
          "126:   test::FillValues<tstring>(&expected, {\"-42.00\", \" 0.00\", \" 3.14\", \"42.00\"});",
          "127:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "128: }",
          "130: TEST_F(AsStringGraphTest, Complex) {",
          "131:   TF_ASSERT_OK(Init(DT_COMPLEX64, /*fill=*/\"\", /*width=*/5, /*precision=*/2));",
          "133:   AddInputFromArray<complex64>(TensorShape({3}), {{-4, 2}, {0}, {3.14159, -1}});",
          "134:   TF_ASSERT_OK(RunOpKernel());",
          "135:   Tensor expected(allocator(), DT_STRING, TensorShape({3}));",
          "136:   test::FillValues<tstring>(",
          "137:       &expected, {\"(-4.00, 2.00)\", \"( 0.00, 0.00)\", \"( 3.14,-1.00)\"});",
          "138:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "139: }",
          "141: TEST_F(AsStringGraphTest, Bool) {",
          "142:   TF_ASSERT_OK(Init(DT_BOOL));",
          "144:   AddInputFromArray<bool>(TensorShape({2}), {true, false});",
          "145:   TF_ASSERT_OK(RunOpKernel());",
          "146:   Tensor expected(allocator(), DT_STRING, TensorShape({2}));",
          "147:   test::FillValues<tstring>(&expected, {\"true\", \"false\"});",
          "148:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "149: }",
          "151: TEST_F(AsStringGraphTest, String) {",
          "152:   Status s = Init(DT_STRING);",
          "153:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "154:   ASSERT_TRUE(absl::StrContains(",
          "155:       s.error_message(),",
          "156:       \"Value for attr 'T' of string is not in the list of allowed values\"));",
          "157: }",
          "159: TEST_F(AsStringGraphTest, OnlyOneOfScientificAndShortest) {",
          "160:   Status s = Init(DT_FLOAT, /*fill=*/\"\", /*width=*/-1, /*precision=*/-1,",
          "162:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "163:   ASSERT_TRUE(",
          "164:       absl::StrContains(s.error_message(),",
          "165:                         \"Cannot select both scientific and shortest notation\"));",
          "166: }",
          "168: TEST_F(AsStringGraphTest, NoShortestForNonFloat) {",
          "169:   Status s = Init(DT_INT32, /*fill=*/\"\", /*width=*/-1, /*precision=*/-1,",
          "171:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "172:   ASSERT_TRUE(absl::StrContains(",
          "173:       s.error_message(),",
          "174:       \"scientific and shortest format not supported for datatype\"));",
          "175: }",
          "177: TEST_F(AsStringGraphTest, NoScientificForNonFloat) {",
          "178:   Status s = Init(DT_INT32, /*fill=*/\"\", /*width=*/-1, /*precision=*/-1,",
          "180:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "181:   ASSERT_TRUE(absl::StrContains(",
          "182:       s.error_message(),",
          "183:       \"scientific and shortest format not supported for datatype\"));",
          "184: }",
          "186: TEST_F(AsStringGraphTest, NoPrecisionForNonFloat) {",
          "187:   Status s = Init(DT_INT32, /*fill=*/\"\", /*width=*/-1, /*precision=*/5);",
          "188:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "189:   ASSERT_TRUE(absl::StrContains(s.error_message(),",
          "190:                                 \"precision not supported for datatype\"));",
          "191: }",
          "193: TEST_F(AsStringGraphTest, LongFill) {",
          "194:   Status s = Init(DT_INT32, /*fill=*/\"asdf\");",
          "195:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "196:   ASSERT_TRUE(absl::StrContains(s.error_message(),",
          "197:                                 \"Fill string must be one or fewer characters\"));",
          "198: }",
          "200: TEST_F(AsStringGraphTest, FillWithZero) {",
          "201:   TF_ASSERT_OK(Init(DT_INT64, /*fill=*/\"0\", /*width=*/4));",
          "203:   AddInputFromArray<int64>(TensorShape({3}), {-42, 0, 42});",
          "204:   TF_ASSERT_OK(RunOpKernel());",
          "205:   Tensor expected(allocator(), DT_STRING, TensorShape({3}));",
          "206:   test::FillValues<tstring>(&expected, {\"-042\", \"0000\", \"0042\"});",
          "207:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "208: }",
          "210: TEST_F(AsStringGraphTest, FillWithSpace) {",
          "211:   TF_ASSERT_OK(Init(DT_INT64, /*fill=*/\" \", /*width=*/4));",
          "213:   AddInputFromArray<int64>(TensorShape({3}), {-42, 0, 42});",
          "214:   TF_ASSERT_OK(RunOpKernel());",
          "215:   Tensor expected(allocator(), DT_STRING, TensorShape({3}));",
          "216:   test::FillValues<tstring>(&expected, {\" -42\", \"   0\", \"  42\"});",
          "217:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "218: }",
          "220: TEST_F(AsStringGraphTest, FillWithChar1) {",
          "221:   TF_ASSERT_OK(Init(DT_INT64, /*fill=*/\"-\", /*width=*/4));",
          "223:   AddInputFromArray<int64>(TensorShape({3}), {-42, 0, 42});",
          "224:   TF_ASSERT_OK(RunOpKernel());",
          "225:   Tensor expected(allocator(), DT_STRING, TensorShape({3}));",
          "226:   test::FillValues<tstring>(&expected, {\"-42 \", \"0   \", \"42  \"});",
          "227:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "228: }",
          "230: TEST_F(AsStringGraphTest, FillWithChar3) {",
          "231:   Status s = Init(DT_INT32, /*fill=*/\"s\");",
          "232:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "233:   ASSERT_TRUE(",
          "234:       absl::StrContains(s.error_message(), \"Fill argument not supported\"));",
          "235: }",
          "237: TEST_F(AsStringGraphTest, FillWithChar4) {",
          "238:   Status s = Init(DT_INT32, /*fill=*/\"n\");",
          "239:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "240:   ASSERT_TRUE(",
          "241:       absl::StrContains(s.error_message(), \"Fill argument not supported\"));",
          "242: }",
          "244: }  // end namespace",
          "245: }  // end namespace tensorflow",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "27ea1ef167895ec1c6242d49c6a8c21eb80aa4cc",
      "candidate_info": {
        "commit_hash": "27ea1ef167895ec1c6242d49c6a8c21eb80aa4cc",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/27ea1ef167895ec1c6242d49c6a8c21eb80aa4cc",
        "files": [
          "tensorflow/core/kernels/BUILD",
          "tensorflow/core/kernels/as_string_op.cc",
          "tensorflow/core/kernels/as_string_op_test.cc"
        ],
        "message": "Prevent format string vulnerability in `tf.strings.as_string`.\n\nThe `printf` format specifier only allows `#`, `0`, `-`, `+` and space as flag characters. Others are interpreted as width/precision/length modifier or conversion specifiers. If a character does not fit into any of these sets `printf` just displays it.\n\nAlso add a test suite for `tf.strings.as_string`. Also fix the issue where the flag character was used only if width was specified.\n\nPiperOrigin-RevId: 332553548\nChange-Id: Ie57cf2a7c14d1a36097642794c14329db669bbba",
        "before_after_code_files": [
          "tensorflow/core/kernels/as_string_op.cc||tensorflow/core/kernels/as_string_op.cc",
          "tensorflow/core/kernels/as_string_op_test.cc||tensorflow/core/kernels/as_string_op_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/as_string_op.cc||tensorflow/core/kernels/as_string_op.cc",
            "tensorflow/core/kernels/as_string_op_test.cc||tensorflow/core/kernels/as_string_op_test.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/as_string_op.cc||tensorflow/core/kernels/as_string_op.cc",
            "tensorflow/core/kernels/as_string_op_test.cc||tensorflow/core/kernels/as_string_op_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/as_string_op.cc||tensorflow/core/kernels/as_string_op.cc": [
          "File: tensorflow/core/kernels/as_string_op.cc -> tensorflow/core/kernels/as_string_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:     OP_REQUIRES(ctx, !(scientific && shortest),",
          "66:                 errors::InvalidArgument(",
          "67:                     \"Cannot select both scientific and shortest notation\"));",
          "68:     format_ = \"%\";",
          "69:     if (width > -1) {",
          "71:     }",
          "72:     if (precision > -1) {",
          "73:       strings::Appendf(&format_, \".%d\", precision);",
          "",
          "[Removed Lines]",
          "70:       strings::Appendf(&format_, \"%s%d\", fill_string.c_str(), width);",
          "",
          "[Added Lines]",
          "70:     if (!fill_string.empty()) {",
          "71:       switch (fill_string[0]) {",
          "72:         case ' ':",
          "73:         case '+':",
          "74:         case '-':",
          "75:         case '0':",
          "76:         case '#':",
          "77:           strings::Appendf(&format_, \"%s\", fill_string.c_str());",
          "78:           break;",
          "79:         default:",
          "80:           bool fill_not_supported = true;",
          "81:           OP_REQUIRES(ctx, !fill_not_supported,",
          "82:                       errors::InvalidArgument(\"Fill argument not supported: \\\"\",",
          "83:                                               fill_string, \"\\\"\"));",
          "84:       }",
          "85:     }",
          "87:       strings::Appendf(&format_, \"%d\", width);",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/as_string_op_test.cc||tensorflow/core/kernels/as_string_op_test.cc": [
          "File: tensorflow/core/kernels/as_string_op_test.cc -> tensorflow/core/kernels/as_string_op_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "4: you may not use this file except in compliance with the License.",
          "5: You may obtain a copy of the License at",
          "7:     http://www.apache.org/licenses/LICENSE-2.0",
          "9: Unless required by applicable law or agreed to in writing, software",
          "10: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "11: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "12: See the License for the specific language governing permissions and",
          "13: limitations under the License.",
          "16: #include \"tensorflow/core/framework/fake_input.h\"",
          "17: #include \"tensorflow/core/framework/node_def_builder.h\"",
          "18: #include \"tensorflow/core/framework/tensor.h\"",
          "19: #include \"tensorflow/core/framework/tensor_testutil.h\"",
          "20: #include \"tensorflow/core/framework/types.h\"",
          "21: #include \"tensorflow/core/kernels/ops_testutil.h\"",
          "22: #include \"tensorflow/core/kernels/ops_util.h\"",
          "23: #include \"tensorflow/core/lib/core/status_test_util.h\"",
          "25: namespace tensorflow {",
          "26: namespace {",
          "28: class AsStringGraphTest : public OpsTestBase {",
          "29:  protected:",
          "30:   Status Init(DataType input_type, const string& fill = \"\", int width = -1,",
          "31:               int precision = -1, bool scientific = false,",
          "32:               bool shortest = false) {",
          "33:     TF_CHECK_OK(NodeDefBuilder(\"op\", \"AsString\")",
          "34:                     .Input(FakeInput(input_type))",
          "35:                     .Attr(\"fill\", fill)",
          "36:                     .Attr(\"precision\", precision)",
          "37:                     .Attr(\"scientific\", scientific)",
          "38:                     .Attr(\"shortest\", shortest)",
          "39:                     .Attr(\"width\", width)",
          "40:                     .Finalize(node_def()));",
          "41:     return InitOp();",
          "42:   }",
          "43: };",
          "45: TEST_F(AsStringGraphTest, Int8) {",
          "46:   TF_ASSERT_OK(Init(DT_INT8));",
          "48:   AddInputFromArray<int8>(TensorShape({3}), {-42, 0, 42});",
          "49:   TF_ASSERT_OK(RunOpKernel());",
          "50:   Tensor expected(allocator(), DT_STRING, TensorShape({3}));",
          "51:   test::FillValues<tstring>(&expected, {\"-42\", \"0\", \"42\"});",
          "52:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "53: }",
          "55: TEST_F(AsStringGraphTest, Int64) {",
          "56:   TF_ASSERT_OK(Init(DT_INT64));",
          "58:   AddInputFromArray<int64>(TensorShape({3}), {-42, 0, 42});",
          "59:   TF_ASSERT_OK(RunOpKernel());",
          "60:   Tensor expected(allocator(), DT_STRING, TensorShape({3}));",
          "61:   test::FillValues<tstring>(&expected, {\"-42\", \"0\", \"42\"});",
          "62:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "63: }",
          "65: TEST_F(AsStringGraphTest, FloatDefault) {",
          "66:   TF_ASSERT_OK(Init(DT_FLOAT));",
          "68:   AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});",
          "69:   TF_ASSERT_OK(RunOpKernel());",
          "70:   Tensor expected(allocator(), DT_STRING, TensorShape({4}));",
          "71:   test::FillValues<tstring>(",
          "72:       &expected, {\"-42.000000\", \"0.000000\", \"3.141590\", \"42.000000\"});",
          "73:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "74: }",
          "76: TEST_F(AsStringGraphTest, FloatScientific) {",
          "77:   TF_ASSERT_OK(Init(DT_FLOAT, /*fill=*/\"\", /*width=*/-1, /*precision=*/-1,",
          "80:   AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});",
          "81:   TF_ASSERT_OK(RunOpKernel());",
          "82:   Tensor expected(allocator(), DT_STRING, TensorShape({4}));",
          "83:   test::FillValues<tstring>(&expected, {\"-4.200000e+01\", \"0.000000e+00\",",
          "84:                                         \"3.141590e+00\", \"4.200000e+01\"});",
          "85:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "86: }",
          "88: TEST_F(AsStringGraphTest, FloatShortest) {",
          "89:   TF_ASSERT_OK(Init(DT_FLOAT, /*fill=*/\"\", /*width=*/-1, /*precision=*/-1,",
          "92:   AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});",
          "93:   TF_ASSERT_OK(RunOpKernel());",
          "94:   Tensor expected(allocator(), DT_STRING, TensorShape({4}));",
          "95:   test::FillValues<tstring>(&expected, {\"-42\", \"0\", \"3.14159\", \"42\"});",
          "96:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "97: }",
          "99: TEST_F(AsStringGraphTest, FloatPrecisionOnly) {",
          "100:   TF_ASSERT_OK(Init(DT_FLOAT, /*fill=*/\"\", /*width=*/-1, /*precision=*/2));",
          "102:   AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});",
          "103:   TF_ASSERT_OK(RunOpKernel());",
          "104:   Tensor expected(allocator(), DT_STRING, TensorShape({4}));",
          "105:   test::FillValues<tstring>(&expected, {\"-42.00\", \"0.00\", \"3.14\", \"42.00\"});",
          "106:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "107: }",
          "109: TEST_F(AsStringGraphTest, FloatWidthOnly) {",
          "110:   TF_ASSERT_OK(Init(DT_FLOAT, /*fill=*/\"\", /*width=*/5));",
          "112:   AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});",
          "113:   TF_ASSERT_OK(RunOpKernel());",
          "114:   Tensor expected(allocator(), DT_STRING, TensorShape({4}));",
          "115:   test::FillValues<tstring>(",
          "116:       &expected, {\"-42.000000\", \"0.000000\", \"3.141590\", \"42.000000\"});",
          "117:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "118: }",
          "120: TEST_F(AsStringGraphTest, Float_5_2_Format) {",
          "121:   TF_ASSERT_OK(Init(DT_FLOAT, /*fill=*/\"\", /*width=*/5, /*precision=*/2));",
          "123:   AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});",
          "124:   TF_ASSERT_OK(RunOpKernel());",
          "125:   Tensor expected(allocator(), DT_STRING, TensorShape({4}));",
          "126:   test::FillValues<tstring>(&expected, {\"-42.00\", \" 0.00\", \" 3.14\", \"42.00\"});",
          "127:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "128: }",
          "130: TEST_F(AsStringGraphTest, Complex) {",
          "131:   TF_ASSERT_OK(Init(DT_COMPLEX64, /*fill=*/\"\", /*width=*/5, /*precision=*/2));",
          "133:   AddInputFromArray<complex64>(TensorShape({3}), {{-4, 2}, {0}, {3.14159, -1}});",
          "134:   TF_ASSERT_OK(RunOpKernel());",
          "135:   Tensor expected(allocator(), DT_STRING, TensorShape({3}));",
          "136:   test::FillValues<tstring>(",
          "137:       &expected, {\"(-4.00, 2.00)\", \"( 0.00, 0.00)\", \"( 3.14,-1.00)\"});",
          "138:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "139: }",
          "141: TEST_F(AsStringGraphTest, Bool) {",
          "142:   TF_ASSERT_OK(Init(DT_BOOL));",
          "144:   AddInputFromArray<bool>(TensorShape({2}), {true, false});",
          "145:   TF_ASSERT_OK(RunOpKernel());",
          "146:   Tensor expected(allocator(), DT_STRING, TensorShape({2}));",
          "147:   test::FillValues<tstring>(&expected, {\"true\", \"false\"});",
          "148:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "149: }",
          "151: TEST_F(AsStringGraphTest, String) {",
          "152:   Status s = Init(DT_STRING);",
          "153:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "154:   ASSERT_TRUE(absl::StrContains(",
          "155:       s.error_message(),",
          "156:       \"Value for attr 'T' of string is not in the list of allowed values\"));",
          "157: }",
          "159: TEST_F(AsStringGraphTest, OnlyOneOfScientificAndShortest) {",
          "160:   Status s = Init(DT_FLOAT, /*fill=*/\"\", /*width=*/-1, /*precision=*/-1,",
          "162:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "163:   ASSERT_TRUE(",
          "164:       absl::StrContains(s.error_message(),",
          "165:                         \"Cannot select both scientific and shortest notation\"));",
          "166: }",
          "168: TEST_F(AsStringGraphTest, NoShortestForNonFloat) {",
          "169:   Status s = Init(DT_INT32, /*fill=*/\"\", /*width=*/-1, /*precision=*/-1,",
          "171:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "172:   ASSERT_TRUE(absl::StrContains(",
          "173:       s.error_message(),",
          "174:       \"scientific and shortest format not supported for datatype\"));",
          "175: }",
          "177: TEST_F(AsStringGraphTest, NoScientificForNonFloat) {",
          "178:   Status s = Init(DT_INT32, /*fill=*/\"\", /*width=*/-1, /*precision=*/-1,",
          "180:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "181:   ASSERT_TRUE(absl::StrContains(",
          "182:       s.error_message(),",
          "183:       \"scientific and shortest format not supported for datatype\"));",
          "184: }",
          "186: TEST_F(AsStringGraphTest, NoPrecisionForNonFloat) {",
          "187:   Status s = Init(DT_INT32, /*fill=*/\"\", /*width=*/-1, /*precision=*/5);",
          "188:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "189:   ASSERT_TRUE(absl::StrContains(s.error_message(),",
          "190:                                 \"precision not supported for datatype\"));",
          "191: }",
          "193: TEST_F(AsStringGraphTest, LongFill) {",
          "194:   Status s = Init(DT_INT32, /*fill=*/\"asdf\");",
          "195:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "196:   ASSERT_TRUE(absl::StrContains(s.error_message(),",
          "197:                                 \"Fill string must be one or fewer characters\"));",
          "198: }",
          "200: TEST_F(AsStringGraphTest, FillWithZero) {",
          "201:   TF_ASSERT_OK(Init(DT_INT64, /*fill=*/\"0\", /*width=*/4));",
          "203:   AddInputFromArray<int64>(TensorShape({3}), {-42, 0, 42});",
          "204:   TF_ASSERT_OK(RunOpKernel());",
          "205:   Tensor expected(allocator(), DT_STRING, TensorShape({3}));",
          "206:   test::FillValues<tstring>(&expected, {\"-042\", \"0000\", \"0042\"});",
          "207:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "208: }",
          "210: TEST_F(AsStringGraphTest, FillWithSpace) {",
          "211:   TF_ASSERT_OK(Init(DT_INT64, /*fill=*/\" \", /*width=*/4));",
          "213:   AddInputFromArray<int64>(TensorShape({3}), {-42, 0, 42});",
          "214:   TF_ASSERT_OK(RunOpKernel());",
          "215:   Tensor expected(allocator(), DT_STRING, TensorShape({3}));",
          "216:   test::FillValues<tstring>(&expected, {\" -42\", \"   0\", \"  42\"});",
          "217:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "218: }",
          "220: TEST_F(AsStringGraphTest, FillWithChar1) {",
          "221:   TF_ASSERT_OK(Init(DT_INT64, /*fill=*/\"-\", /*width=*/4));",
          "223:   AddInputFromArray<int64>(TensorShape({3}), {-42, 0, 42});",
          "224:   TF_ASSERT_OK(RunOpKernel());",
          "225:   Tensor expected(allocator(), DT_STRING, TensorShape({3}));",
          "226:   test::FillValues<tstring>(&expected, {\"-42 \", \"0   \", \"42  \"});",
          "227:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "228: }",
          "230: TEST_F(AsStringGraphTest, FillWithChar3) {",
          "231:   Status s = Init(DT_INT32, /*fill=*/\"s\");",
          "232:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "233:   ASSERT_TRUE(",
          "234:       absl::StrContains(s.error_message(), \"Fill argument not supported\"));",
          "235: }",
          "237: TEST_F(AsStringGraphTest, FillWithChar4) {",
          "238:   Status s = Init(DT_INT32, /*fill=*/\"n\");",
          "239:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "240:   ASSERT_TRUE(",
          "241:       absl::StrContains(s.error_message(), \"Fill argument not supported\"));",
          "242: }",
          "244: }  // end namespace",
          "245: }  // end namespace tensorflow",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "15c5a3ac6895a29517ceda7d22e6297306114904",
      "candidate_info": {
        "commit_hash": "15c5a3ac6895a29517ceda7d22e6297306114904",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/15c5a3ac6895a29517ceda7d22e6297306114904",
        "files": [
          "tensorflow/core/kernels/BUILD",
          "tensorflow/core/kernels/as_string_op.cc",
          "tensorflow/core/kernels/as_string_op_test.cc"
        ],
        "message": "Prevent format string vulnerability in `tf.strings.as_string`.\n\nThe `printf` format specifier only allows `#`, `0`, `-`, `+` and space as flag characters. Others are interpreted as width/precision/length modifier or conversion specifiers. If a character does not fit into any of these sets `printf` just displays it.\n\nAlso add a test suite for `tf.strings.as_string`. Also fix the issue where the flag character was used only if width was specified.\n\nPiperOrigin-RevId: 332553548\nChange-Id: Ie57cf2a7c14d1a36097642794c14329db669bbba",
        "before_after_code_files": [
          "tensorflow/core/kernels/as_string_op.cc||tensorflow/core/kernels/as_string_op.cc",
          "tensorflow/core/kernels/as_string_op_test.cc||tensorflow/core/kernels/as_string_op_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/as_string_op.cc||tensorflow/core/kernels/as_string_op.cc",
            "tensorflow/core/kernels/as_string_op_test.cc||tensorflow/core/kernels/as_string_op_test.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/as_string_op.cc||tensorflow/core/kernels/as_string_op.cc",
            "tensorflow/core/kernels/as_string_op_test.cc||tensorflow/core/kernels/as_string_op_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/as_string_op.cc||tensorflow/core/kernels/as_string_op.cc": [
          "File: tensorflow/core/kernels/as_string_op.cc -> tensorflow/core/kernels/as_string_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:     OP_REQUIRES(ctx, !(scientific && shortest),",
          "66:                 errors::InvalidArgument(",
          "67:                     \"Cannot select both scientific and shortest notation\"));",
          "68:     format_ = \"%\";",
          "69:     if (width > -1) {",
          "71:     }",
          "72:     if (precision > -1) {",
          "73:       strings::Appendf(&format_, \".%d\", precision);",
          "",
          "[Removed Lines]",
          "70:       strings::Appendf(&format_, \"%s%d\", fill_string.c_str(), width);",
          "",
          "[Added Lines]",
          "70:     if (!fill_string.empty()) {",
          "71:       switch (fill_string[0]) {",
          "72:         case ' ':",
          "73:         case '+':",
          "74:         case '-':",
          "75:         case '0':",
          "76:         case '#':",
          "77:           strings::Appendf(&format_, \"%s\", fill_string.c_str());",
          "78:           break;",
          "79:         default:",
          "80:           bool fill_not_supported = true;",
          "81:           OP_REQUIRES(ctx, !fill_not_supported,",
          "82:                       errors::InvalidArgument(\"Fill argument not supported: \\\"\",",
          "83:                                               fill_string, \"\\\"\"));",
          "84:       }",
          "85:     }",
          "87:       strings::Appendf(&format_, \"%d\", width);",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/as_string_op_test.cc||tensorflow/core/kernels/as_string_op_test.cc": [
          "File: tensorflow/core/kernels/as_string_op_test.cc -> tensorflow/core/kernels/as_string_op_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "4: you may not use this file except in compliance with the License.",
          "5: You may obtain a copy of the License at",
          "7:     http://www.apache.org/licenses/LICENSE-2.0",
          "9: Unless required by applicable law or agreed to in writing, software",
          "10: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "11: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "12: See the License for the specific language governing permissions and",
          "13: limitations under the License.",
          "16: #include \"tensorflow/core/framework/fake_input.h\"",
          "17: #include \"tensorflow/core/framework/node_def_builder.h\"",
          "18: #include \"tensorflow/core/framework/tensor.h\"",
          "19: #include \"tensorflow/core/framework/tensor_testutil.h\"",
          "20: #include \"tensorflow/core/framework/types.h\"",
          "21: #include \"tensorflow/core/kernels/ops_testutil.h\"",
          "22: #include \"tensorflow/core/kernels/ops_util.h\"",
          "23: #include \"tensorflow/core/lib/core/status_test_util.h\"",
          "25: namespace tensorflow {",
          "26: namespace {",
          "28: class AsStringGraphTest : public OpsTestBase {",
          "29:  protected:",
          "30:   Status Init(DataType input_type, const string& fill = \"\", int width = -1,",
          "31:               int precision = -1, bool scientific = false,",
          "32:               bool shortest = false) {",
          "33:     TF_CHECK_OK(NodeDefBuilder(\"op\", \"AsString\")",
          "34:                     .Input(FakeInput(input_type))",
          "35:                     .Attr(\"fill\", fill)",
          "36:                     .Attr(\"precision\", precision)",
          "37:                     .Attr(\"scientific\", scientific)",
          "38:                     .Attr(\"shortest\", shortest)",
          "39:                     .Attr(\"width\", width)",
          "40:                     .Finalize(node_def()));",
          "41:     return InitOp();",
          "42:   }",
          "43: };",
          "45: TEST_F(AsStringGraphTest, Int8) {",
          "46:   TF_ASSERT_OK(Init(DT_INT8));",
          "48:   AddInputFromArray<int8>(TensorShape({3}), {-42, 0, 42});",
          "49:   TF_ASSERT_OK(RunOpKernel());",
          "50:   Tensor expected(allocator(), DT_STRING, TensorShape({3}));",
          "51:   test::FillValues<tstring>(&expected, {\"-42\", \"0\", \"42\"});",
          "52:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "53: }",
          "55: TEST_F(AsStringGraphTest, Int64) {",
          "56:   TF_ASSERT_OK(Init(DT_INT64));",
          "58:   AddInputFromArray<int64>(TensorShape({3}), {-42, 0, 42});",
          "59:   TF_ASSERT_OK(RunOpKernel());",
          "60:   Tensor expected(allocator(), DT_STRING, TensorShape({3}));",
          "61:   test::FillValues<tstring>(&expected, {\"-42\", \"0\", \"42\"});",
          "62:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "63: }",
          "65: TEST_F(AsStringGraphTest, FloatDefault) {",
          "66:   TF_ASSERT_OK(Init(DT_FLOAT));",
          "68:   AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});",
          "69:   TF_ASSERT_OK(RunOpKernel());",
          "70:   Tensor expected(allocator(), DT_STRING, TensorShape({4}));",
          "71:   test::FillValues<tstring>(",
          "72:       &expected, {\"-42.000000\", \"0.000000\", \"3.141590\", \"42.000000\"});",
          "73:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "74: }",
          "76: TEST_F(AsStringGraphTest, FloatScientific) {",
          "77:   TF_ASSERT_OK(Init(DT_FLOAT, /*fill=*/\"\", /*width=*/-1, /*precision=*/-1,",
          "80:   AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});",
          "81:   TF_ASSERT_OK(RunOpKernel());",
          "82:   Tensor expected(allocator(), DT_STRING, TensorShape({4}));",
          "83:   test::FillValues<tstring>(&expected, {\"-4.200000e+01\", \"0.000000e+00\",",
          "84:                                         \"3.141590e+00\", \"4.200000e+01\"});",
          "85:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "86: }",
          "88: TEST_F(AsStringGraphTest, FloatShortest) {",
          "89:   TF_ASSERT_OK(Init(DT_FLOAT, /*fill=*/\"\", /*width=*/-1, /*precision=*/-1,",
          "92:   AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});",
          "93:   TF_ASSERT_OK(RunOpKernel());",
          "94:   Tensor expected(allocator(), DT_STRING, TensorShape({4}));",
          "95:   test::FillValues<tstring>(&expected, {\"-42\", \"0\", \"3.14159\", \"42\"});",
          "96:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "97: }",
          "99: TEST_F(AsStringGraphTest, FloatPrecisionOnly) {",
          "100:   TF_ASSERT_OK(Init(DT_FLOAT, /*fill=*/\"\", /*width=*/-1, /*precision=*/2));",
          "102:   AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});",
          "103:   TF_ASSERT_OK(RunOpKernel());",
          "104:   Tensor expected(allocator(), DT_STRING, TensorShape({4}));",
          "105:   test::FillValues<tstring>(&expected, {\"-42.00\", \"0.00\", \"3.14\", \"42.00\"});",
          "106:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "107: }",
          "109: TEST_F(AsStringGraphTest, FloatWidthOnly) {",
          "110:   TF_ASSERT_OK(Init(DT_FLOAT, /*fill=*/\"\", /*width=*/5));",
          "112:   AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});",
          "113:   TF_ASSERT_OK(RunOpKernel());",
          "114:   Tensor expected(allocator(), DT_STRING, TensorShape({4}));",
          "115:   test::FillValues<tstring>(",
          "116:       &expected, {\"-42.000000\", \"0.000000\", \"3.141590\", \"42.000000\"});",
          "117:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "118: }",
          "120: TEST_F(AsStringGraphTest, Float_5_2_Format) {",
          "121:   TF_ASSERT_OK(Init(DT_FLOAT, /*fill=*/\"\", /*width=*/5, /*precision=*/2));",
          "123:   AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});",
          "124:   TF_ASSERT_OK(RunOpKernel());",
          "125:   Tensor expected(allocator(), DT_STRING, TensorShape({4}));",
          "126:   test::FillValues<tstring>(&expected, {\"-42.00\", \" 0.00\", \" 3.14\", \"42.00\"});",
          "127:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "128: }",
          "130: TEST_F(AsStringGraphTest, Complex) {",
          "131:   TF_ASSERT_OK(Init(DT_COMPLEX64, /*fill=*/\"\", /*width=*/5, /*precision=*/2));",
          "133:   AddInputFromArray<complex64>(TensorShape({3}), {{-4, 2}, {0}, {3.14159, -1}});",
          "134:   TF_ASSERT_OK(RunOpKernel());",
          "135:   Tensor expected(allocator(), DT_STRING, TensorShape({3}));",
          "136:   test::FillValues<tstring>(",
          "137:       &expected, {\"(-4.00, 2.00)\", \"( 0.00, 0.00)\", \"( 3.14,-1.00)\"});",
          "138:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "139: }",
          "141: TEST_F(AsStringGraphTest, Bool) {",
          "142:   TF_ASSERT_OK(Init(DT_BOOL));",
          "144:   AddInputFromArray<bool>(TensorShape({2}), {true, false});",
          "145:   TF_ASSERT_OK(RunOpKernel());",
          "146:   Tensor expected(allocator(), DT_STRING, TensorShape({2}));",
          "147:   test::FillValues<tstring>(&expected, {\"true\", \"false\"});",
          "148:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "149: }",
          "151: TEST_F(AsStringGraphTest, String) {",
          "152:   Status s = Init(DT_STRING);",
          "153:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "154:   ASSERT_TRUE(absl::StrContains(",
          "155:       s.error_message(),",
          "156:       \"Value for attr 'T' of string is not in the list of allowed values\"));",
          "157: }",
          "159: TEST_F(AsStringGraphTest, OnlyOneOfScientificAndShortest) {",
          "160:   Status s = Init(DT_FLOAT, /*fill=*/\"\", /*width=*/-1, /*precision=*/-1,",
          "162:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "163:   ASSERT_TRUE(",
          "164:       absl::StrContains(s.error_message(),",
          "165:                         \"Cannot select both scientific and shortest notation\"));",
          "166: }",
          "168: TEST_F(AsStringGraphTest, NoShortestForNonFloat) {",
          "169:   Status s = Init(DT_INT32, /*fill=*/\"\", /*width=*/-1, /*precision=*/-1,",
          "171:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "172:   ASSERT_TRUE(absl::StrContains(",
          "173:       s.error_message(),",
          "174:       \"scientific and shortest format not supported for datatype\"));",
          "175: }",
          "177: TEST_F(AsStringGraphTest, NoScientificForNonFloat) {",
          "178:   Status s = Init(DT_INT32, /*fill=*/\"\", /*width=*/-1, /*precision=*/-1,",
          "180:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "181:   ASSERT_TRUE(absl::StrContains(",
          "182:       s.error_message(),",
          "183:       \"scientific and shortest format not supported for datatype\"));",
          "184: }",
          "186: TEST_F(AsStringGraphTest, NoPrecisionForNonFloat) {",
          "187:   Status s = Init(DT_INT32, /*fill=*/\"\", /*width=*/-1, /*precision=*/5);",
          "188:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "189:   ASSERT_TRUE(absl::StrContains(s.error_message(),",
          "190:                                 \"precision not supported for datatype\"));",
          "191: }",
          "193: TEST_F(AsStringGraphTest, LongFill) {",
          "194:   Status s = Init(DT_INT32, /*fill=*/\"asdf\");",
          "195:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "196:   ASSERT_TRUE(absl::StrContains(s.error_message(),",
          "197:                                 \"Fill string must be one or fewer characters\"));",
          "198: }",
          "200: TEST_F(AsStringGraphTest, FillWithZero) {",
          "201:   TF_ASSERT_OK(Init(DT_INT64, /*fill=*/\"0\", /*width=*/4));",
          "203:   AddInputFromArray<int64>(TensorShape({3}), {-42, 0, 42});",
          "204:   TF_ASSERT_OK(RunOpKernel());",
          "205:   Tensor expected(allocator(), DT_STRING, TensorShape({3}));",
          "206:   test::FillValues<tstring>(&expected, {\"-042\", \"0000\", \"0042\"});",
          "207:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "208: }",
          "210: TEST_F(AsStringGraphTest, FillWithSpace) {",
          "211:   TF_ASSERT_OK(Init(DT_INT64, /*fill=*/\" \", /*width=*/4));",
          "213:   AddInputFromArray<int64>(TensorShape({3}), {-42, 0, 42});",
          "214:   TF_ASSERT_OK(RunOpKernel());",
          "215:   Tensor expected(allocator(), DT_STRING, TensorShape({3}));",
          "216:   test::FillValues<tstring>(&expected, {\" -42\", \"   0\", \"  42\"});",
          "217:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "218: }",
          "220: TEST_F(AsStringGraphTest, FillWithChar1) {",
          "221:   TF_ASSERT_OK(Init(DT_INT64, /*fill=*/\"-\", /*width=*/4));",
          "223:   AddInputFromArray<int64>(TensorShape({3}), {-42, 0, 42});",
          "224:   TF_ASSERT_OK(RunOpKernel());",
          "225:   Tensor expected(allocator(), DT_STRING, TensorShape({3}));",
          "226:   test::FillValues<tstring>(&expected, {\"-42 \", \"0   \", \"42  \"});",
          "227:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "228: }",
          "230: TEST_F(AsStringGraphTest, FillWithChar3) {",
          "231:   Status s = Init(DT_INT32, /*fill=*/\"s\");",
          "232:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "233:   ASSERT_TRUE(",
          "234:       absl::StrContains(s.error_message(), \"Fill argument not supported\"));",
          "235: }",
          "237: TEST_F(AsStringGraphTest, FillWithChar4) {",
          "238:   Status s = Init(DT_INT32, /*fill=*/\"n\");",
          "239:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "240:   ASSERT_TRUE(",
          "241:       absl::StrContains(s.error_message(), \"Fill argument not supported\"));",
          "242: }",
          "244: }  // end namespace",
          "245: }  // end namespace tensorflow",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e432a7a77558b024d8d1d9bc1edab682535087a9",
      "candidate_info": {
        "commit_hash": "e432a7a77558b024d8d1d9bc1edab682535087a9",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/e432a7a77558b024d8d1d9bc1edab682535087a9",
        "files": [
          "tensorflow/core/kernels/BUILD",
          "tensorflow/core/kernels/as_string_op.cc",
          "tensorflow/core/kernels/as_string_op_test.cc"
        ],
        "message": "Prevent format string vulnerability in `tf.strings.as_string`.\n\nThe `printf` format specifier only allows `#`, `0`, `-`, `+` and space as flag characters. Others are interpreted as width/precision/length modifier or conversion specifiers. If a character does not fit into any of these sets `printf` just displays it.\n\nAlso add a test suite for `tf.strings.as_string`. Also fix the issue where the flag character was used only if width was specified.\n\nPiperOrigin-RevId: 332553548\nChange-Id: Ie57cf2a7c14d1a36097642794c14329db669bbba",
        "before_after_code_files": [
          "tensorflow/core/kernels/as_string_op.cc||tensorflow/core/kernels/as_string_op.cc",
          "tensorflow/core/kernels/as_string_op_test.cc||tensorflow/core/kernels/as_string_op_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/as_string_op.cc||tensorflow/core/kernels/as_string_op.cc",
            "tensorflow/core/kernels/as_string_op_test.cc||tensorflow/core/kernels/as_string_op_test.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/as_string_op.cc||tensorflow/core/kernels/as_string_op.cc",
            "tensorflow/core/kernels/as_string_op_test.cc||tensorflow/core/kernels/as_string_op_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/as_string_op.cc||tensorflow/core/kernels/as_string_op.cc": [
          "File: tensorflow/core/kernels/as_string_op.cc -> tensorflow/core/kernels/as_string_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:     OP_REQUIRES(ctx, !(scientific && shortest),",
          "66:                 errors::InvalidArgument(",
          "67:                     \"Cannot select both scientific and shortest notation\"));",
          "68:     format_ = \"%\";",
          "69:     if (width > -1) {",
          "71:     }",
          "72:     if (precision > -1) {",
          "73:       strings::Appendf(&format_, \".%d\", precision);",
          "",
          "[Removed Lines]",
          "70:       strings::Appendf(&format_, \"%s%d\", fill_string.c_str(), width);",
          "",
          "[Added Lines]",
          "70:     if (!fill_string.empty()) {",
          "71:       switch (fill_string[0]) {",
          "72:         case ' ':",
          "73:         case '+':",
          "74:         case '-':",
          "75:         case '0':",
          "76:         case '#':",
          "77:           strings::Appendf(&format_, \"%s\", fill_string.c_str());",
          "78:           break;",
          "79:         default:",
          "80:           bool fill_not_supported = true;",
          "81:           OP_REQUIRES(ctx, !fill_not_supported,",
          "82:                       errors::InvalidArgument(\"Fill argument not supported: \\\"\",",
          "83:                                               fill_string, \"\\\"\"));",
          "84:       }",
          "85:     }",
          "87:       strings::Appendf(&format_, \"%d\", width);",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/as_string_op_test.cc||tensorflow/core/kernels/as_string_op_test.cc": [
          "File: tensorflow/core/kernels/as_string_op_test.cc -> tensorflow/core/kernels/as_string_op_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "4: you may not use this file except in compliance with the License.",
          "5: You may obtain a copy of the License at",
          "7:     http://www.apache.org/licenses/LICENSE-2.0",
          "9: Unless required by applicable law or agreed to in writing, software",
          "10: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "11: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "12: See the License for the specific language governing permissions and",
          "13: limitations under the License.",
          "16: #include \"tensorflow/core/framework/fake_input.h\"",
          "17: #include \"tensorflow/core/framework/node_def_builder.h\"",
          "18: #include \"tensorflow/core/framework/tensor.h\"",
          "19: #include \"tensorflow/core/framework/tensor_testutil.h\"",
          "20: #include \"tensorflow/core/framework/types.h\"",
          "21: #include \"tensorflow/core/kernels/ops_testutil.h\"",
          "22: #include \"tensorflow/core/kernels/ops_util.h\"",
          "23: #include \"tensorflow/core/lib/core/status_test_util.h\"",
          "25: namespace tensorflow {",
          "26: namespace {",
          "28: class AsStringGraphTest : public OpsTestBase {",
          "29:  protected:",
          "30:   Status Init(DataType input_type, const string& fill = \"\", int width = -1,",
          "31:               int precision = -1, bool scientific = false,",
          "32:               bool shortest = false) {",
          "33:     TF_CHECK_OK(NodeDefBuilder(\"op\", \"AsString\")",
          "34:                     .Input(FakeInput(input_type))",
          "35:                     .Attr(\"fill\", fill)",
          "36:                     .Attr(\"precision\", precision)",
          "37:                     .Attr(\"scientific\", scientific)",
          "38:                     .Attr(\"shortest\", shortest)",
          "39:                     .Attr(\"width\", width)",
          "40:                     .Finalize(node_def()));",
          "41:     return InitOp();",
          "42:   }",
          "43: };",
          "45: TEST_F(AsStringGraphTest, Int8) {",
          "46:   TF_ASSERT_OK(Init(DT_INT8));",
          "48:   AddInputFromArray<int8>(TensorShape({3}), {-42, 0, 42});",
          "49:   TF_ASSERT_OK(RunOpKernel());",
          "50:   Tensor expected(allocator(), DT_STRING, TensorShape({3}));",
          "51:   test::FillValues<tstring>(&expected, {\"-42\", \"0\", \"42\"});",
          "52:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "53: }",
          "55: TEST_F(AsStringGraphTest, Int64) {",
          "56:   TF_ASSERT_OK(Init(DT_INT64));",
          "58:   AddInputFromArray<int64>(TensorShape({3}), {-42, 0, 42});",
          "59:   TF_ASSERT_OK(RunOpKernel());",
          "60:   Tensor expected(allocator(), DT_STRING, TensorShape({3}));",
          "61:   test::FillValues<tstring>(&expected, {\"-42\", \"0\", \"42\"});",
          "62:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "63: }",
          "65: TEST_F(AsStringGraphTest, FloatDefault) {",
          "66:   TF_ASSERT_OK(Init(DT_FLOAT));",
          "68:   AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});",
          "69:   TF_ASSERT_OK(RunOpKernel());",
          "70:   Tensor expected(allocator(), DT_STRING, TensorShape({4}));",
          "71:   test::FillValues<tstring>(",
          "72:       &expected, {\"-42.000000\", \"0.000000\", \"3.141590\", \"42.000000\"});",
          "73:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "74: }",
          "76: TEST_F(AsStringGraphTest, FloatScientific) {",
          "77:   TF_ASSERT_OK(Init(DT_FLOAT, /*fill=*/\"\", /*width=*/-1, /*precision=*/-1,",
          "80:   AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});",
          "81:   TF_ASSERT_OK(RunOpKernel());",
          "82:   Tensor expected(allocator(), DT_STRING, TensorShape({4}));",
          "83:   test::FillValues<tstring>(&expected, {\"-4.200000e+01\", \"0.000000e+00\",",
          "84:                                         \"3.141590e+00\", \"4.200000e+01\"});",
          "85:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "86: }",
          "88: TEST_F(AsStringGraphTest, FloatShortest) {",
          "89:   TF_ASSERT_OK(Init(DT_FLOAT, /*fill=*/\"\", /*width=*/-1, /*precision=*/-1,",
          "92:   AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});",
          "93:   TF_ASSERT_OK(RunOpKernel());",
          "94:   Tensor expected(allocator(), DT_STRING, TensorShape({4}));",
          "95:   test::FillValues<tstring>(&expected, {\"-42\", \"0\", \"3.14159\", \"42\"});",
          "96:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "97: }",
          "99: TEST_F(AsStringGraphTest, FloatPrecisionOnly) {",
          "100:   TF_ASSERT_OK(Init(DT_FLOAT, /*fill=*/\"\", /*width=*/-1, /*precision=*/2));",
          "102:   AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});",
          "103:   TF_ASSERT_OK(RunOpKernel());",
          "104:   Tensor expected(allocator(), DT_STRING, TensorShape({4}));",
          "105:   test::FillValues<tstring>(&expected, {\"-42.00\", \"0.00\", \"3.14\", \"42.00\"});",
          "106:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "107: }",
          "109: TEST_F(AsStringGraphTest, FloatWidthOnly) {",
          "110:   TF_ASSERT_OK(Init(DT_FLOAT, /*fill=*/\"\", /*width=*/5));",
          "112:   AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});",
          "113:   TF_ASSERT_OK(RunOpKernel());",
          "114:   Tensor expected(allocator(), DT_STRING, TensorShape({4}));",
          "115:   test::FillValues<tstring>(",
          "116:       &expected, {\"-42.000000\", \"0.000000\", \"3.141590\", \"42.000000\"});",
          "117:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "118: }",
          "120: TEST_F(AsStringGraphTest, Float_5_2_Format) {",
          "121:   TF_ASSERT_OK(Init(DT_FLOAT, /*fill=*/\"\", /*width=*/5, /*precision=*/2));",
          "123:   AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});",
          "124:   TF_ASSERT_OK(RunOpKernel());",
          "125:   Tensor expected(allocator(), DT_STRING, TensorShape({4}));",
          "126:   test::FillValues<tstring>(&expected, {\"-42.00\", \" 0.00\", \" 3.14\", \"42.00\"});",
          "127:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "128: }",
          "130: TEST_F(AsStringGraphTest, Complex) {",
          "131:   TF_ASSERT_OK(Init(DT_COMPLEX64, /*fill=*/\"\", /*width=*/5, /*precision=*/2));",
          "133:   AddInputFromArray<complex64>(TensorShape({3}), {{-4, 2}, {0}, {3.14159, -1}});",
          "134:   TF_ASSERT_OK(RunOpKernel());",
          "135:   Tensor expected(allocator(), DT_STRING, TensorShape({3}));",
          "136:   test::FillValues<tstring>(",
          "137:       &expected, {\"(-4.00, 2.00)\", \"( 0.00, 0.00)\", \"( 3.14,-1.00)\"});",
          "138:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "139: }",
          "141: TEST_F(AsStringGraphTest, Bool) {",
          "142:   TF_ASSERT_OK(Init(DT_BOOL));",
          "144:   AddInputFromArray<bool>(TensorShape({2}), {true, false});",
          "145:   TF_ASSERT_OK(RunOpKernel());",
          "146:   Tensor expected(allocator(), DT_STRING, TensorShape({2}));",
          "147:   test::FillValues<tstring>(&expected, {\"true\", \"false\"});",
          "148:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "149: }",
          "151: TEST_F(AsStringGraphTest, String) {",
          "152:   Status s = Init(DT_STRING);",
          "153:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "154:   ASSERT_TRUE(absl::StrContains(",
          "155:       s.error_message(),",
          "156:       \"Value for attr 'T' of string is not in the list of allowed values\"));",
          "157: }",
          "159: TEST_F(AsStringGraphTest, OnlyOneOfScientificAndShortest) {",
          "160:   Status s = Init(DT_FLOAT, /*fill=*/\"\", /*width=*/-1, /*precision=*/-1,",
          "162:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "163:   ASSERT_TRUE(",
          "164:       absl::StrContains(s.error_message(),",
          "165:                         \"Cannot select both scientific and shortest notation\"));",
          "166: }",
          "168: TEST_F(AsStringGraphTest, NoShortestForNonFloat) {",
          "169:   Status s = Init(DT_INT32, /*fill=*/\"\", /*width=*/-1, /*precision=*/-1,",
          "171:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "172:   ASSERT_TRUE(absl::StrContains(",
          "173:       s.error_message(),",
          "174:       \"scientific and shortest format not supported for datatype\"));",
          "175: }",
          "177: TEST_F(AsStringGraphTest, NoScientificForNonFloat) {",
          "178:   Status s = Init(DT_INT32, /*fill=*/\"\", /*width=*/-1, /*precision=*/-1,",
          "180:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "181:   ASSERT_TRUE(absl::StrContains(",
          "182:       s.error_message(),",
          "183:       \"scientific and shortest format not supported for datatype\"));",
          "184: }",
          "186: TEST_F(AsStringGraphTest, NoPrecisionForNonFloat) {",
          "187:   Status s = Init(DT_INT32, /*fill=*/\"\", /*width=*/-1, /*precision=*/5);",
          "188:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "189:   ASSERT_TRUE(absl::StrContains(s.error_message(),",
          "190:                                 \"precision not supported for datatype\"));",
          "191: }",
          "193: TEST_F(AsStringGraphTest, LongFill) {",
          "194:   Status s = Init(DT_INT32, /*fill=*/\"asdf\");",
          "195:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "196:   ASSERT_TRUE(absl::StrContains(s.error_message(),",
          "197:                                 \"Fill string must be one or fewer characters\"));",
          "198: }",
          "200: TEST_F(AsStringGraphTest, FillWithZero) {",
          "201:   TF_ASSERT_OK(Init(DT_INT64, /*fill=*/\"0\", /*width=*/4));",
          "203:   AddInputFromArray<int64>(TensorShape({3}), {-42, 0, 42});",
          "204:   TF_ASSERT_OK(RunOpKernel());",
          "205:   Tensor expected(allocator(), DT_STRING, TensorShape({3}));",
          "206:   test::FillValues<tstring>(&expected, {\"-042\", \"0000\", \"0042\"});",
          "207:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "208: }",
          "210: TEST_F(AsStringGraphTest, FillWithSpace) {",
          "211:   TF_ASSERT_OK(Init(DT_INT64, /*fill=*/\" \", /*width=*/4));",
          "213:   AddInputFromArray<int64>(TensorShape({3}), {-42, 0, 42});",
          "214:   TF_ASSERT_OK(RunOpKernel());",
          "215:   Tensor expected(allocator(), DT_STRING, TensorShape({3}));",
          "216:   test::FillValues<tstring>(&expected, {\" -42\", \"   0\", \"  42\"});",
          "217:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "218: }",
          "220: TEST_F(AsStringGraphTest, FillWithChar1) {",
          "221:   TF_ASSERT_OK(Init(DT_INT64, /*fill=*/\"-\", /*width=*/4));",
          "223:   AddInputFromArray<int64>(TensorShape({3}), {-42, 0, 42});",
          "224:   TF_ASSERT_OK(RunOpKernel());",
          "225:   Tensor expected(allocator(), DT_STRING, TensorShape({3}));",
          "226:   test::FillValues<tstring>(&expected, {\"-42 \", \"0   \", \"42  \"});",
          "227:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "228: }",
          "230: TEST_F(AsStringGraphTest, FillWithChar3) {",
          "231:   Status s = Init(DT_INT32, /*fill=*/\"s\");",
          "232:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "233:   ASSERT_TRUE(",
          "234:       absl::StrContains(s.error_message(), \"Fill argument not supported\"));",
          "235: }",
          "237: TEST_F(AsStringGraphTest, FillWithChar4) {",
          "238:   Status s = Init(DT_INT32, /*fill=*/\"n\");",
          "239:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "240:   ASSERT_TRUE(",
          "241:       absl::StrContains(s.error_message(), \"Fill argument not supported\"));",
          "242: }",
          "244: }  // end namespace",
          "245: }  // end namespace tensorflow",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0315fa71402e08c0fb77f5d422554b51dfb8251c",
      "candidate_info": {
        "commit_hash": "0315fa71402e08c0fb77f5d422554b51dfb8251c",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/0315fa71402e08c0fb77f5d422554b51dfb8251c",
        "files": [
          "tensorflow/core/kernels/BUILD",
          "tensorflow/core/kernels/as_string_op.cc",
          "tensorflow/core/kernels/as_string_op_test.cc"
        ],
        "message": "Prevent format string vulnerability in `tf.strings.as_string`.\n\nThe `printf` format specifier only allows `#`, `0`, `-`, `+` and space as flag characters. Others are interpreted as width/precision/length modifier or conversion specifiers. If a character does not fit into any of these sets `printf` just displays it.\n\nAlso add a test suite for `tf.strings.as_string`. Also fix the issue where the flag character was used only if width was specified.\n\nPiperOrigin-RevId: 332553548\nChange-Id: Ie57cf2a7c14d1a36097642794c14329db669bbba",
        "before_after_code_files": [
          "tensorflow/core/kernels/as_string_op.cc||tensorflow/core/kernels/as_string_op.cc",
          "tensorflow/core/kernels/as_string_op_test.cc||tensorflow/core/kernels/as_string_op_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/as_string_op.cc||tensorflow/core/kernels/as_string_op.cc",
            "tensorflow/core/kernels/as_string_op_test.cc||tensorflow/core/kernels/as_string_op_test.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/as_string_op.cc||tensorflow/core/kernels/as_string_op.cc",
            "tensorflow/core/kernels/as_string_op_test.cc||tensorflow/core/kernels/as_string_op_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/as_string_op.cc||tensorflow/core/kernels/as_string_op.cc": [
          "File: tensorflow/core/kernels/as_string_op.cc -> tensorflow/core/kernels/as_string_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:     OP_REQUIRES(ctx, !(scientific && shortest),",
          "66:                 errors::InvalidArgument(",
          "67:                     \"Cannot select both scientific and shortest notation\"));",
          "68:     format_ = \"%\";",
          "69:     if (width > -1) {",
          "71:     }",
          "72:     if (precision > -1) {",
          "73:       strings::Appendf(&format_, \".%d\", precision);",
          "",
          "[Removed Lines]",
          "70:       strings::Appendf(&format_, \"%s%d\", fill_string.c_str(), width);",
          "",
          "[Added Lines]",
          "70:     if (!fill_string.empty()) {",
          "71:       switch (fill_string[0]) {",
          "72:         case ' ':",
          "73:         case '+':",
          "74:         case '-':",
          "75:         case '0':",
          "76:         case '#':",
          "77:           strings::Appendf(&format_, \"%s\", fill_string.c_str());",
          "78:           break;",
          "79:         default:",
          "80:           bool fill_not_supported = true;",
          "81:           OP_REQUIRES(ctx, !fill_not_supported,",
          "82:                       errors::InvalidArgument(\"Fill argument not supported: \\\"\",",
          "83:                                               fill_string, \"\\\"\"));",
          "84:       }",
          "85:     }",
          "87:       strings::Appendf(&format_, \"%d\", width);",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/as_string_op_test.cc||tensorflow/core/kernels/as_string_op_test.cc": [
          "File: tensorflow/core/kernels/as_string_op_test.cc -> tensorflow/core/kernels/as_string_op_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "4: you may not use this file except in compliance with the License.",
          "5: You may obtain a copy of the License at",
          "7:     http://www.apache.org/licenses/LICENSE-2.0",
          "9: Unless required by applicable law or agreed to in writing, software",
          "10: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "11: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "12: See the License for the specific language governing permissions and",
          "13: limitations under the License.",
          "16: #include \"tensorflow/core/framework/fake_input.h\"",
          "17: #include \"tensorflow/core/framework/node_def_builder.h\"",
          "18: #include \"tensorflow/core/framework/tensor.h\"",
          "19: #include \"tensorflow/core/framework/tensor_testutil.h\"",
          "20: #include \"tensorflow/core/framework/types.h\"",
          "21: #include \"tensorflow/core/kernels/ops_testutil.h\"",
          "22: #include \"tensorflow/core/kernels/ops_util.h\"",
          "23: #include \"tensorflow/core/lib/core/status_test_util.h\"",
          "25: namespace tensorflow {",
          "26: namespace {",
          "28: class AsStringGraphTest : public OpsTestBase {",
          "29:  protected:",
          "30:   Status Init(DataType input_type, const string& fill = \"\", int width = -1,",
          "31:               int precision = -1, bool scientific = false,",
          "32:               bool shortest = false) {",
          "33:     TF_CHECK_OK(NodeDefBuilder(\"op\", \"AsString\")",
          "34:                     .Input(FakeInput(input_type))",
          "35:                     .Attr(\"fill\", fill)",
          "36:                     .Attr(\"precision\", precision)",
          "37:                     .Attr(\"scientific\", scientific)",
          "38:                     .Attr(\"shortest\", shortest)",
          "39:                     .Attr(\"width\", width)",
          "40:                     .Finalize(node_def()));",
          "41:     return InitOp();",
          "42:   }",
          "43: };",
          "45: TEST_F(AsStringGraphTest, Int8) {",
          "46:   TF_ASSERT_OK(Init(DT_INT8));",
          "48:   AddInputFromArray<int8>(TensorShape({3}), {-42, 0, 42});",
          "49:   TF_ASSERT_OK(RunOpKernel());",
          "50:   Tensor expected(allocator(), DT_STRING, TensorShape({3}));",
          "51:   test::FillValues<tstring>(&expected, {\"-42\", \"0\", \"42\"});",
          "52:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "53: }",
          "55: TEST_F(AsStringGraphTest, Int64) {",
          "56:   TF_ASSERT_OK(Init(DT_INT64));",
          "58:   AddInputFromArray<int64>(TensorShape({3}), {-42, 0, 42});",
          "59:   TF_ASSERT_OK(RunOpKernel());",
          "60:   Tensor expected(allocator(), DT_STRING, TensorShape({3}));",
          "61:   test::FillValues<tstring>(&expected, {\"-42\", \"0\", \"42\"});",
          "62:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "63: }",
          "65: TEST_F(AsStringGraphTest, FloatDefault) {",
          "66:   TF_ASSERT_OK(Init(DT_FLOAT));",
          "68:   AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});",
          "69:   TF_ASSERT_OK(RunOpKernel());",
          "70:   Tensor expected(allocator(), DT_STRING, TensorShape({4}));",
          "71:   test::FillValues<tstring>(",
          "72:       &expected, {\"-42.000000\", \"0.000000\", \"3.141590\", \"42.000000\"});",
          "73:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "74: }",
          "76: TEST_F(AsStringGraphTest, FloatScientific) {",
          "77:   TF_ASSERT_OK(Init(DT_FLOAT, /*fill=*/\"\", /*width=*/-1, /*precision=*/-1,",
          "80:   AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});",
          "81:   TF_ASSERT_OK(RunOpKernel());",
          "82:   Tensor expected(allocator(), DT_STRING, TensorShape({4}));",
          "83:   test::FillValues<tstring>(&expected, {\"-4.200000e+01\", \"0.000000e+00\",",
          "84:                                         \"3.141590e+00\", \"4.200000e+01\"});",
          "85:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "86: }",
          "88: TEST_F(AsStringGraphTest, FloatShortest) {",
          "89:   TF_ASSERT_OK(Init(DT_FLOAT, /*fill=*/\"\", /*width=*/-1, /*precision=*/-1,",
          "92:   AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});",
          "93:   TF_ASSERT_OK(RunOpKernel());",
          "94:   Tensor expected(allocator(), DT_STRING, TensorShape({4}));",
          "95:   test::FillValues<tstring>(&expected, {\"-42\", \"0\", \"3.14159\", \"42\"});",
          "96:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "97: }",
          "99: TEST_F(AsStringGraphTest, FloatPrecisionOnly) {",
          "100:   TF_ASSERT_OK(Init(DT_FLOAT, /*fill=*/\"\", /*width=*/-1, /*precision=*/2));",
          "102:   AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});",
          "103:   TF_ASSERT_OK(RunOpKernel());",
          "104:   Tensor expected(allocator(), DT_STRING, TensorShape({4}));",
          "105:   test::FillValues<tstring>(&expected, {\"-42.00\", \"0.00\", \"3.14\", \"42.00\"});",
          "106:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "107: }",
          "109: TEST_F(AsStringGraphTest, FloatWidthOnly) {",
          "110:   TF_ASSERT_OK(Init(DT_FLOAT, /*fill=*/\"\", /*width=*/5));",
          "112:   AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});",
          "113:   TF_ASSERT_OK(RunOpKernel());",
          "114:   Tensor expected(allocator(), DT_STRING, TensorShape({4}));",
          "115:   test::FillValues<tstring>(",
          "116:       &expected, {\"-42.000000\", \"0.000000\", \"3.141590\", \"42.000000\"});",
          "117:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "118: }",
          "120: TEST_F(AsStringGraphTest, Float_5_2_Format) {",
          "121:   TF_ASSERT_OK(Init(DT_FLOAT, /*fill=*/\"\", /*width=*/5, /*precision=*/2));",
          "123:   AddInputFromArray<float>(TensorShape({4}), {-42, 0, 3.14159, 42});",
          "124:   TF_ASSERT_OK(RunOpKernel());",
          "125:   Tensor expected(allocator(), DT_STRING, TensorShape({4}));",
          "126:   test::FillValues<tstring>(&expected, {\"-42.00\", \" 0.00\", \" 3.14\", \"42.00\"});",
          "127:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "128: }",
          "130: TEST_F(AsStringGraphTest, Complex) {",
          "131:   TF_ASSERT_OK(Init(DT_COMPLEX64, /*fill=*/\"\", /*width=*/5, /*precision=*/2));",
          "133:   AddInputFromArray<complex64>(TensorShape({3}), {{-4, 2}, {0}, {3.14159, -1}});",
          "134:   TF_ASSERT_OK(RunOpKernel());",
          "135:   Tensor expected(allocator(), DT_STRING, TensorShape({3}));",
          "136:   test::FillValues<tstring>(",
          "137:       &expected, {\"(-4.00, 2.00)\", \"( 0.00, 0.00)\", \"( 3.14,-1.00)\"});",
          "138:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "139: }",
          "141: TEST_F(AsStringGraphTest, Bool) {",
          "142:   TF_ASSERT_OK(Init(DT_BOOL));",
          "144:   AddInputFromArray<bool>(TensorShape({2}), {true, false});",
          "145:   TF_ASSERT_OK(RunOpKernel());",
          "146:   Tensor expected(allocator(), DT_STRING, TensorShape({2}));",
          "147:   test::FillValues<tstring>(&expected, {\"true\", \"false\"});",
          "148:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "149: }",
          "151: TEST_F(AsStringGraphTest, String) {",
          "152:   Status s = Init(DT_STRING);",
          "153:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "154:   ASSERT_TRUE(absl::StrContains(",
          "155:       s.error_message(),",
          "156:       \"Value for attr 'T' of string is not in the list of allowed values\"));",
          "157: }",
          "159: TEST_F(AsStringGraphTest, OnlyOneOfScientificAndShortest) {",
          "160:   Status s = Init(DT_FLOAT, /*fill=*/\"\", /*width=*/-1, /*precision=*/-1,",
          "162:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "163:   ASSERT_TRUE(",
          "164:       absl::StrContains(s.error_message(),",
          "165:                         \"Cannot select both scientific and shortest notation\"));",
          "166: }",
          "168: TEST_F(AsStringGraphTest, NoShortestForNonFloat) {",
          "169:   Status s = Init(DT_INT32, /*fill=*/\"\", /*width=*/-1, /*precision=*/-1,",
          "171:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "172:   ASSERT_TRUE(absl::StrContains(",
          "173:       s.error_message(),",
          "174:       \"scientific and shortest format not supported for datatype\"));",
          "175: }",
          "177: TEST_F(AsStringGraphTest, NoScientificForNonFloat) {",
          "178:   Status s = Init(DT_INT32, /*fill=*/\"\", /*width=*/-1, /*precision=*/-1,",
          "180:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "181:   ASSERT_TRUE(absl::StrContains(",
          "182:       s.error_message(),",
          "183:       \"scientific and shortest format not supported for datatype\"));",
          "184: }",
          "186: TEST_F(AsStringGraphTest, NoPrecisionForNonFloat) {",
          "187:   Status s = Init(DT_INT32, /*fill=*/\"\", /*width=*/-1, /*precision=*/5);",
          "188:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "189:   ASSERT_TRUE(absl::StrContains(s.error_message(),",
          "190:                                 \"precision not supported for datatype\"));",
          "191: }",
          "193: TEST_F(AsStringGraphTest, LongFill) {",
          "194:   Status s = Init(DT_INT32, /*fill=*/\"asdf\");",
          "195:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "196:   ASSERT_TRUE(absl::StrContains(s.error_message(),",
          "197:                                 \"Fill string must be one or fewer characters\"));",
          "198: }",
          "200: TEST_F(AsStringGraphTest, FillWithZero) {",
          "201:   TF_ASSERT_OK(Init(DT_INT64, /*fill=*/\"0\", /*width=*/4));",
          "203:   AddInputFromArray<int64>(TensorShape({3}), {-42, 0, 42});",
          "204:   TF_ASSERT_OK(RunOpKernel());",
          "205:   Tensor expected(allocator(), DT_STRING, TensorShape({3}));",
          "206:   test::FillValues<tstring>(&expected, {\"-042\", \"0000\", \"0042\"});",
          "207:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "208: }",
          "210: TEST_F(AsStringGraphTest, FillWithSpace) {",
          "211:   TF_ASSERT_OK(Init(DT_INT64, /*fill=*/\" \", /*width=*/4));",
          "213:   AddInputFromArray<int64>(TensorShape({3}), {-42, 0, 42});",
          "214:   TF_ASSERT_OK(RunOpKernel());",
          "215:   Tensor expected(allocator(), DT_STRING, TensorShape({3}));",
          "216:   test::FillValues<tstring>(&expected, {\" -42\", \"   0\", \"  42\"});",
          "217:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "218: }",
          "220: TEST_F(AsStringGraphTest, FillWithChar1) {",
          "221:   TF_ASSERT_OK(Init(DT_INT64, /*fill=*/\"-\", /*width=*/4));",
          "223:   AddInputFromArray<int64>(TensorShape({3}), {-42, 0, 42});",
          "224:   TF_ASSERT_OK(RunOpKernel());",
          "225:   Tensor expected(allocator(), DT_STRING, TensorShape({3}));",
          "226:   test::FillValues<tstring>(&expected, {\"-42 \", \"0   \", \"42  \"});",
          "227:   test::ExpectTensorEqual<tstring>(expected, *GetOutput(0));",
          "228: }",
          "230: TEST_F(AsStringGraphTest, FillWithChar3) {",
          "231:   Status s = Init(DT_INT32, /*fill=*/\"s\");",
          "232:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "233:   ASSERT_TRUE(",
          "234:       absl::StrContains(s.error_message(), \"Fill argument not supported\"));",
          "235: }",
          "237: TEST_F(AsStringGraphTest, FillWithChar4) {",
          "238:   Status s = Init(DT_INT32, /*fill=*/\"n\");",
          "239:   ASSERT_EQ(error::INVALID_ARGUMENT, s.code());",
          "240:   ASSERT_TRUE(",
          "241:       absl::StrContains(s.error_message(), \"Fill argument not supported\"));",
          "242: }",
          "244: }  // end namespace",
          "245: }  // end namespace tensorflow",
          "",
          "---------------"
        ]
      }
    }
  ]
}