{
  "cve_id": "CVE-2020-11095",
  "cve_desc": "In FreeRDP before version 2.1.2, an out of bound reads occurs resulting in accessing a memory location that is outside of the boundaries of the static array PRIMARY_DRAWING_ORDER_FIELD_BYTES. This is fixed in version 2.1.2.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "733ee3208306b1ea32697b356c0215180fc3f049",
  "patch_info": {
    "commit_hash": "733ee3208306b1ea32697b356c0215180fc3f049",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/733ee3208306b1ea32697b356c0215180fc3f049",
    "files": [
      "libfreerdp/core/orders.c",
      "libfreerdp/core/orders.h",
      "libfreerdp/core/update.c"
    ],
    "message": "Fixed invalid access in update_recv_primary_order\n\nCVE-2020-11095 thanks @antonio-morales for finding this.",
    "before_after_code_files": [
      "libfreerdp/core/orders.c||libfreerdp/core/orders.c",
      "libfreerdp/core/orders.h||libfreerdp/core/orders.h",
      "libfreerdp/core/update.c||libfreerdp/core/update.c"
    ]
  },
  "patch_diff": {
    "libfreerdp/core/orders.c||libfreerdp/core/orders.c": [
      "File: libfreerdp/core/orders.c -> libfreerdp/core/orders.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "44: #define TAG FREERDP_TAG(\"core.orders\")",
      "77: static const BYTE CBR2_BPP[] = { 0, 0, 0, 8, 16, 24, 32 };",
      "",
      "[Removed Lines]",
      "46: const BYTE PRIMARY_DRAWING_ORDER_FIELD_BYTES[] = { DSTBLT_ORDER_FIELD_BYTES,",
      "47:                                                 PATBLT_ORDER_FIELD_BYTES,",
      "48:                                                 SCRBLT_ORDER_FIELD_BYTES,",
      "49:                                                 0,",
      "50:                                                 0,",
      "51:                                                 0,",
      "52:                                                 0,",
      "53:                                                 DRAW_NINE_GRID_ORDER_FIELD_BYTES,",
      "54:                                                 MULTI_DRAW_NINE_GRID_ORDER_FIELD_BYTES,",
      "55:                                                 LINE_TO_ORDER_FIELD_BYTES,",
      "56:                                                 OPAQUE_RECT_ORDER_FIELD_BYTES,",
      "57:                                                 SAVE_BITMAP_ORDER_FIELD_BYTES,",
      "58:                                                 0,",
      "59:                                                 MEMBLT_ORDER_FIELD_BYTES,",
      "60:                                                 MEM3BLT_ORDER_FIELD_BYTES,",
      "61:                                                 MULTI_DSTBLT_ORDER_FIELD_BYTES,",
      "62:                                                 MULTI_PATBLT_ORDER_FIELD_BYTES,",
      "63:                                                 MULTI_SCRBLT_ORDER_FIELD_BYTES,",
      "64:                                                 MULTI_OPAQUE_RECT_ORDER_FIELD_BYTES,",
      "65:                                                 FAST_INDEX_ORDER_FIELD_BYTES,",
      "66:                                                 POLYGON_SC_ORDER_FIELD_BYTES,",
      "67:                                                 POLYGON_CB_ORDER_FIELD_BYTES,",
      "68:                                                 POLYLINE_ORDER_FIELD_BYTES,",
      "69:                                                 0,",
      "70:                                                 FAST_GLYPH_ORDER_FIELD_BYTES,",
      "71:                                                 ELLIPSE_SC_ORDER_FIELD_BYTES,",
      "72:                                                 ELLIPSE_CB_ORDER_FIELD_BYTES,",
      "73:                                                 GLYPH_INDEX_ORDER_FIELD_BYTES };",
      "75: #define PRIMARY_DRAWING_ORDER_COUNT (ARRAYSIZE(PRIMARY_DRAWING_ORDER_FIELD_BYTES))",
      "",
      "[Added Lines]",
      "46: BYTE get_primary_drawing_order_field_bytes(UINT32 orderType, BOOL* pValid)",
      "47: {",
      "48:  if (pValid)",
      "50:  switch (orderType)",
      "51:  {",
      "52:   case 0:",
      "53:    return DSTBLT_ORDER_FIELD_BYTES;",
      "54:   case 1:",
      "55:    return PATBLT_ORDER_FIELD_BYTES;",
      "56:   case 2:",
      "57:    return SCRBLT_ORDER_FIELD_BYTES;",
      "58:   case 3:",
      "59:    return 0;",
      "60:   case 4:",
      "61:    return 0;",
      "62:   case 5:",
      "63:    return 0;",
      "64:   case 6:",
      "65:    return 0;",
      "66:   case 7:",
      "67:    return DRAW_NINE_GRID_ORDER_FIELD_BYTES;",
      "68:   case 8:",
      "69:    return MULTI_DRAW_NINE_GRID_ORDER_FIELD_BYTES;",
      "70:   case 9:",
      "71:    return LINE_TO_ORDER_FIELD_BYTES;",
      "72:   case 10:",
      "73:    return OPAQUE_RECT_ORDER_FIELD_BYTES;",
      "74:   case 11:",
      "75:    return SAVE_BITMAP_ORDER_FIELD_BYTES;",
      "76:   case 12:",
      "77:    return 0;",
      "78:   case 13:",
      "79:    return MEMBLT_ORDER_FIELD_BYTES;",
      "80:   case 14:",
      "81:    return MEM3BLT_ORDER_FIELD_BYTES;",
      "82:   case 15:",
      "83:    return MULTI_DSTBLT_ORDER_FIELD_BYTES;",
      "84:   case 16:",
      "85:    return MULTI_PATBLT_ORDER_FIELD_BYTES;",
      "86:   case 17:",
      "87:    return MULTI_SCRBLT_ORDER_FIELD_BYTES;",
      "88:   case 18:",
      "89:    return MULTI_OPAQUE_RECT_ORDER_FIELD_BYTES;",
      "90:   case 19:",
      "91:    return FAST_INDEX_ORDER_FIELD_BYTES;",
      "92:   case 20:",
      "93:    return POLYGON_SC_ORDER_FIELD_BYTES;",
      "94:   case 21:",
      "95:    return POLYGON_CB_ORDER_FIELD_BYTES;",
      "96:   case 22:",
      "97:    return POLYLINE_ORDER_FIELD_BYTES;",
      "98:   case 23:",
      "99:    return 0;",
      "100:   case 24:",
      "101:    return FAST_GLYPH_ORDER_FIELD_BYTES;",
      "102:   case 25:",
      "103:    return ELLIPSE_SC_ORDER_FIELD_BYTES;",
      "104:   case 26:",
      "105:    return ELLIPSE_CB_ORDER_FIELD_BYTES;",
      "106:   case 27:",
      "107:    return GLYPH_INDEX_ORDER_FIELD_BYTES;",
      "108:   default:",
      "109:    if (pValid)",
      "111:    WLog_WARN(TAG, \"Invalid orderType 0x%08X received\", orderType);",
      "112:    return 0;",
      "113:  }",
      "114: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3241: static BOOL update_recv_primary_order(rdpUpdate* update, wStream* s, BYTE flags)",
      "3242: {",
      "3243:  BOOL rc = FALSE;",
      "3244:  rdpContext* context = update->context;",
      "3245:  rdpPrimaryUpdate* primary = update->primary;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3282:  BYTE field;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3263:  if (!check_primary_order_supported(update->log, settings, orderInfo->orderType, orderName))",
      "3264:   return FALSE;",
      "3268:  {",
      "3269:   WLog_Print(update->log, WLOG_ERROR, \"update_read_field_flags() failed\");",
      "3270:   return FALSE;",
      "",
      "[Removed Lines]",
      "3266:  if (!update_read_field_flags(s, &(orderInfo->fieldFlags), flags,",
      "3267:                               PRIMARY_DRAWING_ORDER_FIELD_BYTES[orderInfo->orderType]))",
      "",
      "[Added Lines]",
      "3306:  field = get_primary_drawing_order_field_bytes(orderInfo->orderType, &rc);",
      "3307:  if (!rc)",
      "3308:   return FALSE;",
      "3310:  if (!update_read_field_flags(s, &(orderInfo->fieldFlags), flags, field))",
      "",
      "---------------"
    ],
    "libfreerdp/core/orders.h||libfreerdp/core/orders.h": [
      "File: libfreerdp/core/orders.h -> libfreerdp/core/orders.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "190: #define CG_GLYPH_UNICODE_PRESENT 0x0010",
      "194: FREERDP_LOCAL BOOL update_recv_order(rdpUpdate* update, wStream* s);",
      "",
      "[Removed Lines]",
      "192: FREERDP_LOCAL extern const BYTE PRIMARY_DRAWING_ORDER_FIELD_BYTES[];",
      "",
      "[Added Lines]",
      "192: FREERDP_LOCAL BYTE get_primary_drawing_order_field_bytes(UINT32 orderType, BOOL* pValid);",
      "",
      "---------------"
    ],
    "libfreerdp/core/update.c||libfreerdp/core/update.c": [
      "File: libfreerdp/core/update.c -> libfreerdp/core/update.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1087:  orderInfo->controlFlags = ORDER_STANDARD;",
      "1088:  orderInfo->controlFlags |= ORDER_TYPE_CHANGE;",
      "1089:  length += 1;",
      "1091:  length += update_prepare_bounds(context, orderInfo);",
      "1092:  return length;",
      "1093: }",
      "",
      "[Removed Lines]",
      "1090:  length += PRIMARY_DRAWING_ORDER_FIELD_BYTES[orderInfo->orderType];",
      "",
      "[Added Lines]",
      "1090:  length += get_primary_drawing_order_field_bytes(orderInfo->orderType, NULL);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1107:  update_write_field_flags(s, orderInfo->fieldFlags, orderInfo->controlFlags,",
      "1109:  update_write_bounds(s, orderInfo);",
      "1110:  Stream_SetPosition(s, position);",
      "1111:  return 0;",
      "",
      "[Removed Lines]",
      "1108:                           PRIMARY_DRAWING_ORDER_FIELD_BYTES[orderInfo->orderType]);",
      "",
      "[Added Lines]",
      "1108:                           get_primary_drawing_order_field_bytes(orderInfo->orderType, NULL));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b8beb55913471952f92770c90c372139d78c16c0",
      "candidate_info": {
        "commit_hash": "b8beb55913471952f92770c90c372139d78c16c0",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/b8beb55913471952f92770c90c372139d78c16c0",
        "files": [
          "libfreerdp/core/orders.c"
        ],
        "message": "Fixed OOB read in update_read_cache_bitmap_v3_order\n\nCVE-2020-11096 thanks @antonio-morales for finding this.",
        "before_after_code_files": [
          "libfreerdp/core/orders.c||libfreerdp/core/orders.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [
            "libfreerdp/core/orders.c||libfreerdp/core/orders.c"
          ],
          "candidate": [
            "libfreerdp/core/orders.c||libfreerdp/core/orders.c"
          ]
        }
      },
      "candidate_diff": {
        "libfreerdp/core/orders.c||libfreerdp/core/orders.c": [
          "File: libfreerdp/core/orders.c -> libfreerdp/core/orders.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:  }",
          "114: }",
          "131: static BOOL check_order_activated(wLog* log, rdpSettings* settings, const char* orderName,",
          "132:                                   BOOL condition)",
          "",
          "[Removed Lines]",
          "116: static const BYTE CBR2_BPP[] = { 0, 0, 0, 8, 16, 24, 32 };",
          "118: static const BYTE BPP_CBR2[] = { 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0,",
          "119:                               0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0 };",
          "121: static const BYTE CBR23_BPP[] = { 0, 0, 0, 8, 16, 24, 32 };",
          "123: static const BYTE BPP_CBR23[] = { 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0,",
          "124:                                0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0 };",
          "126: static const BYTE BMF_BPP[] = { 0, 1, 0, 8, 16, 24, 32, 0 };",
          "128: static const BYTE BPP_BMF[] = { 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0,",
          "129:                              0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0 };",
          "",
          "[Added Lines]",
          "116: static BYTE get_cbr2_bpp(UINT32 bpp, BOOL* pValid)",
          "117: {",
          "118:  if (pValid)",
          "120:  switch (bpp)",
          "121:  {",
          "122:   case 3:",
          "123:    return 8;",
          "124:   case 4:",
          "125:    return 16;",
          "126:   case 5:",
          "127:    return 24;",
          "128:   case 6:",
          "129:    return 32;",
          "130:   default:",
          "131:    WLog_WARN(TAG, \"Invalid bpp %\" PRIu32, bpp);",
          "132:    if (pValid)",
          "134:    return 0;",
          "135:  }",
          "136: }",
          "138: static BYTE get_bmf_bpp(UINT32 bmf, BOOL* pValid)",
          "139: {",
          "140:  if (pValid)",
          "142:  switch (bmf)",
          "143:  {",
          "144:   case 1:",
          "145:    return 1;",
          "146:   case 3:",
          "147:    return 8;",
          "148:   case 4:",
          "149:    return 16;",
          "150:   case 5:",
          "151:    return 24;",
          "152:   case 6:",
          "153:    return 32;",
          "154:   default:",
          "155:    WLog_WARN(TAG, \"Invalid bmf %\" PRIu32, bmf);",
          "156:    if (pValid)",
          "158:    return 0;",
          "159:  }",
          "160: }",
          "161: static BYTE get_bpp_bmf(UINT32 bpp, BOOL* pValid)",
          "162: {",
          "163:  if (pValid)",
          "165:  switch (bpp)",
          "166:  {",
          "167:   case 1:",
          "168:    return 1;",
          "169:   case 8:",
          "170:    return 3;",
          "171:   case 16:",
          "172:    return 4;",
          "173:   case 24:",
          "174:    return 5;",
          "175:   case 32:",
          "176:    return 6;",
          "177:   default:",
          "178:    WLog_WARN(TAG, \"Invalid color depth %\" PRIu32, bpp);",
          "179:    if (pValid)",
          "181:    return 0;",
          "182:  }",
          "183: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "815:  if (brush->style & CACHED_BRUSH)",
          "816:  {",
          "817:   brush->index = brush->hatch;",
          "820:   if (brush->bpp == 0)",
          "821:    brush->bpp = 1;",
          "822:  }",
          "",
          "[Removed Lines]",
          "818:   brush->bpp = BMF_BPP[brush->style & 0x07];",
          "",
          "[Added Lines]",
          "871:   BOOL rc;",
          "873:   brush->bpp = get_bmf_bpp(brush->style, &rc);",
          "874:   if (!rc)",
          "875:    return FALSE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "859:  if (brush->style & CACHED_BRUSH)",
          "860:  {",
          "861:   brush->hatch = brush->index;",
          "864:   if (brush->bpp == 0)",
          "865:    brush->bpp = 1;",
          "866:  }",
          "",
          "[Removed Lines]",
          "862:   brush->bpp = BMF_BPP[brush->style & 0x07];",
          "",
          "[Added Lines]",
          "917:   BOOL rc;",
          "919:   brush->bpp = get_bmf_bpp(brush->style, &rc);",
          "920:   if (!rc)",
          "921:    return FALSE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2016: static CACHE_BITMAP_V2_ORDER* update_read_cache_bitmap_v2_order(rdpUpdate* update, wStream* s,",
          "2017:                                                                 BOOL compressed, UINT16 flags)",
          "2018: {",
          "2019:  BYTE bitsPerPixelId;",
          "2020:  CACHE_BITMAP_V2_ORDER* cache_bitmap_v2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2077:  BOOL rc;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2030:  cache_bitmap_v2->cacheId = flags & 0x0003;",
          "2031:  cache_bitmap_v2->flags = (flags & 0xFF80) >> 7;",
          "2032:  bitsPerPixelId = (flags & 0x0078) >> 3;",
          "2035:  if (cache_bitmap_v2->flags & CBR2_PERSISTENT_KEY_PRESENT)",
          "2036:  {",
          "",
          "[Removed Lines]",
          "2033:  cache_bitmap_v2->bitmapBpp = CBR2_BPP[bitsPerPixelId];",
          "",
          "[Added Lines]",
          "2092:  cache_bitmap_v2->bitmapBpp = get_cbr2_bpp(bitsPerPixelId, &rc);",
          "2093:  if (!rc)",
          "2094:   goto fail;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2109: BOOL update_write_cache_bitmap_v2_order(wStream* s, CACHE_BITMAP_V2_ORDER* cache_bitmap_v2,",
          "2110:                                         BOOL compressed, UINT16* flags)",
          "2111: {",
          "2112:  BYTE bitsPerPixelId;",
          "2114:  if (!Stream_EnsureRemainingCapacity(",
          "2115:          s, update_approximate_cache_bitmap_v2_order(cache_bitmap_v2, compressed, flags)))",
          "2116:   return FALSE;",
          "2120:           ((cache_bitmap_v2->flags << 7) & 0xFF80);",
          "",
          "[Removed Lines]",
          "2118:  bitsPerPixelId = BPP_CBR2[cache_bitmap_v2->bitmapBpp];",
          "",
          "[Added Lines]",
          "2173:  BOOL rc;",
          "2180:  bitsPerPixelId = get_bpp_bmf(cache_bitmap_v2->bitmapBpp, &rc);",
          "2181:  if (!rc)",
          "2182:   return FALSE;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2177: static CACHE_BITMAP_V3_ORDER* update_read_cache_bitmap_v3_order(rdpUpdate* update, wStream* s,",
          "2178:                                                                 UINT16 flags)",
          "2179: {",
          "2180:  BYTE bitsPerPixelId;",
          "2181:  BITMAP_DATA_EX* bitmapData;",
          "2182:  UINT32 new_len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2244:  BOOL rc;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2194:  cache_bitmap_v3->cacheId = flags & 0x00000003;",
          "2195:  cache_bitmap_v3->flags = (flags & 0x0000FF80) >> 7;",
          "2196:  bitsPerPixelId = (flags & 0x00000078) >> 3;",
          "2199:  if (Stream_GetRemainingLength(s) < 21)",
          "2200:   goto fail;",
          "",
          "[Removed Lines]",
          "2197:  cache_bitmap_v3->bpp = CBR23_BPP[bitsPerPixelId];",
          "",
          "[Added Lines]",
          "2262:  cache_bitmap_v3->bpp = get_cbr2_bpp(bitsPerPixelId, &rc);",
          "2263:  if (!rc)",
          "2264:   goto fail;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2242: BOOL update_write_cache_bitmap_v3_order(wStream* s, CACHE_BITMAP_V3_ORDER* cache_bitmap_v3,",
          "2243:                                         UINT16* flags)",
          "2244: {",
          "2245:  BYTE bitsPerPixelId;",
          "2246:  BITMAP_DATA_EX* bitmapData;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2312:  BOOL rc;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2250:   return FALSE;",
          "2252:  bitmapData = &cache_bitmap_v3->bitmapData;",
          "2255:           ((cache_bitmap_v3->flags << 7) & 0x0000FF80) | ((bitsPerPixelId << 3) & 0x00000078);",
          "",
          "[Removed Lines]",
          "2253:  bitsPerPixelId = BPP_CBR23[cache_bitmap_v3->bpp];",
          "",
          "[Added Lines]",
          "2321:  bitsPerPixelId = get_bpp_bmf(cache_bitmap_v3->bpp, &rc);",
          "2322:  if (!rc)",
          "2323:   return FALSE;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2574: static CACHE_BRUSH_ORDER* update_read_cache_brush_order(rdpUpdate* update, wStream* s, UINT16 flags)",
          "2575: {",
          "2576:  int i;",
          "2577:  BYTE iBitmapFormat;",
          "2578:  BOOL compressed = FALSE;",
          "2579:  CACHE_BRUSH_ORDER* cache_brush = calloc(1, sizeof(CACHE_BRUSH_ORDER));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2647:  BOOL rc;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2591:   goto fail;",
          "",
          "[Removed Lines]",
          "2590:  if (iBitmapFormat >= ARRAYSIZE(BMF_BPP))",
          "2593:  cache_brush->bpp = BMF_BPP[iBitmapFormat];",
          "",
          "[Added Lines]",
          "2661:  cache_brush->bpp = get_bmf_bpp(iBitmapFormat, &rc);",
          "2662:  if (!rc)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2661: {",
          "2662:  int i;",
          "2663:  BYTE iBitmapFormat;",
          "2664:  BOOL compressed = FALSE;",
          "2666:  if (!Stream_EnsureRemainingCapacity(s,",
          "2667:                                      update_approximate_cache_brush_order(cache_brush, flags)))",
          "2668:   return FALSE;",
          "",
          "[Removed Lines]",
          "2670:  iBitmapFormat = BPP_BMF[cache_brush->bpp];",
          "",
          "[Added Lines]",
          "2735:  BOOL rc;",
          "2742:  iBitmapFormat = get_bpp_bmf(cache_brush->bpp, &rc);",
          "2743:  if (!rc)",
          "2744:   return FALSE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a45afe9db77a19e5a177fe1dc3e85119013f9587",
      "candidate_info": {
        "commit_hash": "a45afe9db77a19e5a177fe1dc3e85119013f9587",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/a45afe9db77a19e5a177fe1dc3e85119013f9587",
        "files": [
          "winpr/libwinpr/sysinfo/sysinfo.c"
        ],
        "message": "Replaced gmtime with gmtime_r",
        "before_after_code_files": [
          "winpr/libwinpr/sysinfo/sysinfo.c||winpr/libwinpr/sysinfo/sysinfo.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/sysinfo/sysinfo.c||winpr/libwinpr/sysinfo/sysinfo.c": [
          "File: winpr/libwinpr/sysinfo/sysinfo.c -> winpr/libwinpr/sysinfo/sysinfo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "213: void GetSystemTime(LPSYSTEMTIME lpSystemTime)",
          "214: {",
          "215:  time_t ct = 0;",
          "216:  struct tm* stm = NULL;",
          "217:  WORD wMilliseconds = 0;",
          "218:  ct = time(NULL);",
          "219:  wMilliseconds = (WORD)(GetTickCount() % 1000);",
          "221:  ZeroMemory(lpSystemTime, sizeof(SYSTEMTIME));",
          "223:  if (stm)",
          "",
          "[Removed Lines]",
          "220:  stm = gmtime(&ct);",
          "",
          "[Added Lines]",
          "216:  struct tm tres;",
          "221:  stm = gmtime_r(&ct, &tres);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a98c450c58ec150e44781c89aa6f8e7e0f571f5",
      "candidate_info": {
        "commit_hash": "0a98c450c58ec150e44781c89aa6f8e7e0f571f5",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/0a98c450c58ec150e44781c89aa6f8e7e0f571f5",
        "files": [
          "libfreerdp/codec/include/bitmap.c"
        ],
        "message": "Fixed out of bound read in RLEDECOMPRESS\n\nCVE-2020-4033 thanks to @antonio-morales for finding this.",
        "before_after_code_files": [
          "libfreerdp/codec/include/bitmap.c||libfreerdp/codec/include/bitmap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/codec/include/bitmap.c||libfreerdp/codec/include/bitmap.c": [
          "File: libfreerdp/codec/include/bitmap.c -> libfreerdp/codec/include/bitmap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "202:     if (code == LITE_SET_FG_FG_RUN || code == MEGA_MEGA_SET_FG_RUN)",
          "203:     {",
          "204:      SRCREADPIXEL(fgPel, pbSrc);",
          "205:      SRCNEXTPIXEL(pbSrc);",
          "206:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204:      if (pbSrc >= pbEnd)",
          "205:       return FALSE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "231:    case MEGA_MEGA_DITHERED_RUN:",
          "232:     runLength = ExtractRunLength(code, pbSrc, &advance);",
          "233:     pbSrc = pbSrc + advance;",
          "234:     SRCREADPIXEL(pixelA, pbSrc);",
          "235:     SRCNEXTPIXEL(pbSrc);",
          "236:     SRCREADPIXEL(pixelB, pbSrc);",
          "237:     SRCNEXTPIXEL(pbSrc);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "236:     if (pbSrc >= pbEnd)",
          "237:      return FALSE;",
          "240:     if (pbSrc >= pbEnd)",
          "241:      return FALSE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "252:    case MEGA_MEGA_COLOR_RUN:",
          "253:     runLength = ExtractRunLength(code, pbSrc, &advance);",
          "254:     pbSrc = pbSrc + advance;",
          "255:     SRCREADPIXEL(pixelA, pbSrc);",
          "256:     SRCNEXTPIXEL(pbSrc);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "261:     if (pbSrc >= pbEnd)",
          "262:      return FALSE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "272:     runLength = ExtractRunLength(code, pbSrc, &advance);",
          "273:     pbSrc = pbSrc + advance;",
          "275:     if (code == LITE_SET_FG_FGBG_IMAGE || code == MEGA_MEGA_SET_FGBG_IMAGE)",
          "276:     {",
          "277:      SRCREADPIXEL(fgPel, pbSrc);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "283:     if (pbSrc >= pbEnd)",
          "284:      return FALSE;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "338:      return FALSE;",
          "340:     UNROLL(runLength, {",
          "341:      SRCREADPIXEL(temp, pbSrc);",
          "342:      SRCNEXTPIXEL(pbSrc);",
          "343:      DESTWRITEPIXEL(pbDest, temp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "351:      if (pbSrc >= pbEnd)",
          "352:       return FALSE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6d86e20e1e7caaab4f0c7f89e36d32914dbccc52",
      "candidate_info": {
        "commit_hash": "6d86e20e1e7caaab4f0c7f89e36d32914dbccc52",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/6d86e20e1e7caaab4f0c7f89e36d32914dbccc52",
        "files": [
          "server/shadow/shadow_server.c"
        ],
        "message": "Fixed double free",
        "before_after_code_files": [
          "server/shadow/shadow_server.c||server/shadow/shadow_server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "server/shadow/shadow_server.c||server/shadow/shadow_server.c": [
          "File: server/shadow/shadow_server.c -> server/shadow/shadow_server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "586:   char** list = CommandLineParseCommaSeparatedValuesEx(NULL, server->ipcSocket, &count);",
          "587:   if (!list || (count <= 1))",
          "588:   {",
          "590:    if (server->ipcSocket == NULL)",
          "591:    {",
          "592:     if (!open_port(server, NULL))",
          "593:      return -1;",
          "594:    }",
          "595:    else",
          "596:     return -1;",
          "597:   }",
          "599:   for (x = 1; x < count; x++)",
          "",
          "[Removed Lines]",
          "589:    free(list);",
          "",
          "[Added Lines]",
          "592:     {",
          "593:      free(list);",
          "595:     }",
          "598:    {",
          "599:     free(list);",
          "601:    }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1c6a6923f87dcfb295c508963f21bebbbc4292ae",
      "candidate_info": {
        "commit_hash": "1c6a6923f87dcfb295c508963f21bebbbc4292ae",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/1c6a6923f87dcfb295c508963f21bebbbc4292ae",
        "files": [
          "channels/rdpdr/client/rdpdr_main.c"
        ],
        "message": "Fixed broken const variable.",
        "before_after_code_files": [
          "channels/rdpdr/client/rdpdr_main.c||channels/rdpdr/client/rdpdr_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/rdpdr/client/rdpdr_main.c||channels/rdpdr/client/rdpdr_main.c": [
          "File: channels/rdpdr/client/rdpdr_main.c -> channels/rdpdr/client/rdpdr_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "598:  size_t x;",
          "599:  char buffer[MAX_PATH];",
          "600:  uid_t uid = getuid();",
          "603:  if (getlogin_r(uname, sizeof(uname)) != 0)",
          "604:   return FALSE;",
          "",
          "[Removed Lines]",
          "601:  const char uname[MAX_PATH] = { 0 };",
          "",
          "[Added Lines]",
          "601:  char uname[MAX_PATH] = { 0 };",
          "",
          "---------------"
        ]
      }
    }
  ]
}