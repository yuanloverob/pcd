{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8cd2e4ae0370efc24aad29f6e2581ef650ca17c5",
      "candidate_info": {
        "commit_hash": "8cd2e4ae0370efc24aad29f6e2581ef650ca17c5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8cd2e4ae0370efc24aad29f6e2581ef650ca17c5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/altertab2.test",
          "test/altertab3.test",
          "test/autoindex5.test"
        ],
        "message": "Build and test fixes for SQLITE_OMIT_WINDOWFUNC builds.\n\nFossilOrigin-Name: 8824115a9776e876a3677f0cb479e311ee65584d43872b37766a146afec72d8f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/altertab2.test||test/altertab2.test",
          "test/altertab3.test||test/altertab3.test",
          "test/autoindex5.test||test/autoindex5.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "test/altertab3.test||test/altertab3.test"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "test/altertab3.test||test/altertab3.test"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4a4952d38e8177ed8d59aaa575410bebf76787dd6d801fdbdb809d4f8c670da0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1533:       }",
          "1534:     }",
          "1536:     if( IN_RENAME_OBJECT ){",
          "1537:       Window *pWin;",
          "1538:       for(pWin=p->pWinDefn; pWin; pWin=pWin->pNextWin){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1536: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1543:         }",
          "1544:       }",
          "1545:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1547: #endif",
          "",
          "---------------"
        ],
        "test/altertab2.test||test/altertab2.test": [
          "File: test/altertab2.test -> test/altertab2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "179: }",
          "181: #-------------------------------------------------------------------------",
          "182: do_execsql_test 5.0 {",
          "183:   CREATE TABLE t2(a);",
          "184:   CREATE TRIGGER r2 AFTER INSERT ON t2 WHEN new.a NOT NULL BEGIN",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "182: ifcapable windowfunc {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "235: do_execsql_test 5.3 {",
          "236:   INSERT INTO t2x VALUES(1);",
          "237: } {}",
          "239: #-------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "239: } ;# windowfunc",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:   return",
          "21: }",
          "23: do_execsql_test 1.0 {",
          "24:   CREATE TABLE t1(a, b);",
          "25:   CREATE TRIGGER tr1 AFTER INSERT ON t1 BEGIN",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: ifcapable windowfunc {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40: do_execsql_test 1.3 {",
          "41:   INSERT INTO t1 VALUES(1, 2);",
          "42: }",
          "44: #-------------------------------------------------------------------------",
          "45: reset_db",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: } ;# windowfunc",
          "",
          "---------------"
        ],
        "test/autoindex5.test||test/autoindex5.test": [
          "File: test/autoindex5.test -> test/autoindex5.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "128: # Segfault due to multiple uses of the same subquery where the",
          "129: # subquery is implemented via coroutine.",
          "130: #",
          "131: sqlite3 db :memory:",
          "132: do_execsql_test 3.0 {",
          "133:   -- This is the original test case reported on the mailing list",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131: ifcapable windowfunc {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "166:       AND (albums.id IN (1, 2)))",
          "167:   ));",
          "168: } {1 Ar}",
          "169: # The remaining test cases were discovered (by Dan) during trouble-shooting",
          "170: sqlite3 db :memory:",
          "171: do_execsql_test 3.1 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "170: } ;# windowfunc",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "713836f913a4af0be745c606c658f17c51cdf77f",
      "candidate_info": {
        "commit_hash": "713836f913a4af0be745c606c658f17c51cdf77f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/713836f913a4af0be745c606c658f17c51cdf77f",
        "files": [
          "LICENSE.md",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Add a LICENSE.md, containing the text of the blessing.\n\nFossilOrigin-Name: cbb7e60272cda518fa1bd8d3e3cd02e031b657fef92a9d4d7ed8c2bfb97be7c8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b3fa58dd7403dbd4d2e9f3ae23d7d1337830d6fef2aa2f137ac5174de0d5828e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1f3b284b11bdc781dba7fe655fd287b2d9bef029",
      "candidate_info": {
        "commit_hash": "1f3b284b11bdc781dba7fe655fd287b2d9bef029",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1f3b284b11bdc781dba7fe655fd287b2d9bef029",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/vdbeaux.c",
          "test/altertab3.test"
        ],
        "message": "Ensure that ALTER TABLE commands open statement transactions. Fix for [596d059a].\n\nFossilOrigin-Name: 0f2129f59f7df929106e2af876c2976dea6528c1dc1850d64cddb256f20e121a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/vdbeaux.c||src/vdbeaux.c",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/alter.c||src/alter.c",
            "test/altertab3.test||test/altertab3.test"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/alter.c||src/alter.c",
            "test/altertab3.test||test/altertab3.test"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fb60150aeedc3898cb249c75c98a7cb48fcec090f94ded7896b634e436c7daa5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "166:   }",
          "167: #endif",
          "174:   v = sqlite3GetVdbe(pParse);",
          "175:   if( v==0 ){",
          "176:     goto exit_rename_table;",
          "177:   }",
          "180:   zTabName = pTab->zName;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "177:   sqlite3MayAbort(pParse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "243:     int i = ++pParse->nMem;",
          "244:     sqlite3VdbeLoadString(v, i, zName);",
          "245:     sqlite3VdbeAddOp4(v, OP_VRename, i, 0, 0,(const char*)pVTab, P4_VTAB);",
          "247:   }",
          "248: #endif",
          "",
          "[Removed Lines]",
          "246:     sqlite3MayAbort(pParse);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "567:   zNew = sqlite3NameFromToken(db, pNew);",
          "568:   if( !zNew ) goto exit_rename_column;",
          "569:   assert( pNew->n>0 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "566:   sqlite3MayAbort(pParse);",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "637:     int opcode = pOp->opcode;",
          "638:     if( opcode==OP_Destroy || opcode==OP_VUpdate || opcode==OP_VRename",
          "639:      || opcode==OP_VDestroy",
          "640:      || ((opcode==OP_Halt || opcode==OP_HaltIfNull)",
          "641:       && ((pOp->p1)!=SQLITE_OK && pOp->p2==OE_Abort))",
          "642:     ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "640:      || (opcode==OP_Function0 && pOp->p4.pFunc->funcFlags&SQLITE_FUNC_INTERNAL)",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:   SELECT sql FROM sqlite_master WHERE name = 'v1'",
          "82: } {{CREATE VIEW v1 AS SELECT * FROM t1 WHERE a=1 OR (bbb IN ())}}",
          "86: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84: #-------------------------------------------------------------------------",
          "85: reset_db",
          "86: do_execsql_test 4.0 {",
          "87:   CREATE TABLE t1(a, b);",
          "88:   CREATE TABLE t3(e, f);",
          "89:   CREATE TRIGGER tr1 AFTER INSERT ON t1 BEGIN",
          "90:     INSERT INTO t2 VALUES(new.a, new.b);",
          "91:   END;",
          "92: }",
          "94: do_catchsql_test 4.1.2 {",
          "95:   BEGIN;",
          "96:     ALTER TABLE t3 RENAME TO t4;",
          "97: } {1 {error in trigger tr1: no such table: main.t2}}",
          "98: do_execsql_test 4.1.2 {",
          "99:   COMMIT;",
          "100: }",
          "101: do_execsql_test 4.1.3 {",
          "102:   SELECT * FROM sqlite_master WHERE type='table' AND name!='t1';",
          "103: } {table t3 t3 3 {CREATE TABLE t3(e, f)}}",
          "106: do_catchsql_test 4.2.1 {",
          "107:   BEGIN;",
          "108:     ALTER TABLE t3 RENAME e TO eee;",
          "109: } {1 {error in trigger tr1: no such table: main.t2}}",
          "110: do_execsql_test 4.2.2 {",
          "111:   COMMIT;",
          "112: }",
          "113: do_execsql_test 4.2.3 {",
          "114:   SELECT * FROM sqlite_master WHERE type='table' AND name!='t1';",
          "115: } {table t3 t3 3 {CREATE TABLE t3(e, f)}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "656d535ae6cdb6a4857dcb0cd7e8a71c2ddb7ab8",
      "candidate_info": {
        "commit_hash": "656d535ae6cdb6a4857dcb0cd7e8a71c2ddb7ab8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/656d535ae6cdb6a4857dcb0cd7e8a71c2ddb7ab8",
        "files": [
          "VERSION",
          "configure",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Increase the version number to 3.31.0 for the next release cycle.\n\nFossilOrigin-Name: ffd4c30620abe6ba38d82f3db934d18cc8468aaac4cd50a4e01be8910854d3f0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bf875dc59909f9c22f7c1fc843bc4d9e5d97af5cb4ef43c4fa1d566ddfdeaacb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9f8c0282216be13e2cd32fedc9504d9fc7b7abb5",
      "candidate_info": {
        "commit_hash": "9f8c0282216be13e2cd32fedc9504d9fc7b7abb5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9f8c0282216be13e2cd32fedc9504d9fc7b7abb5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/global.c",
          "src/main.c",
          "src/os.c",
          "src/shell.c.in",
          "src/sqlite.h.in",
          "src/sqliteInt.h",
          "src/test1.c",
          "test/dbfuzz2.c",
          "test/fuzzcheck.c"
        ],
        "message": "Add the SQLITE_TESTCTRL_PRNG_SEED which can control the PRNG seed either directly or through the schema cookie of a supplied database connection.\n\nFossilOrigin-Name: 2660e9292ae2c229eb7c57a6a79bb19f0c970072f86750fbe9cca3113d44ffe4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/global.c||src/global.c",
          "src/main.c||src/main.c",
          "src/os.c||src/os.c",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/test1.c||src/test1.c",
          "test/dbfuzz2.c||test/dbfuzz2.c",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: faaaae4940b5f4f70e4988ad5b45582410b381ace0031e6abcde0b9217c06796",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6897:   assert( i<iEnd );",
          "6898:   j = get2byte(&aData[hdr+5]);",
          "6900:   memcpy(&pTmp[j], &aData[j], usableSize - j);",
          "6902:   for(k=0; pCArray->ixNx[k]<=i && ALWAYS(k<NB*2); k++){}",
          "",
          "[Removed Lines]",
          "6899:   if( NEVER(j>(u32)usableSize) ){ j = 0; }",
          "",
          "[Added Lines]",
          "6899:   if( j>(u32)usableSize ){ j = 0; }",
          "",
          "---------------"
        ],
        "src/global.c||src/global.c": [
          "File: src/global.c -> src/global.c"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3824:       break;",
          "3825:     }",
          "3833:       sqlite3_randomness(0,0);",
          "3834:       break;",
          "3835:     }",
          "",
          "[Removed Lines]",
          "3832:     case SQLITE_TESTCTRL_PRNG_RESET: {",
          "",
          "[Added Lines]",
          "3847:     case SQLITE_TESTCTRL_PRNG_SEED: {",
          "3848:       int x = va_arg(ap, int);",
          "3849:       int y;",
          "3850:       sqlite3 *db = va_arg(ap, sqlite3*);",
          "3851:       assert( db==0 || db->aDb[0].pSchema!=0 );",
          "3852:       if( db && (y = db->aDb[0].pSchema->schema_cookie)!=0 ){ x = y; }",
          "3853:       sqlite3Config.iPrngSeed = x;",
          "",
          "---------------"
        ],
        "src/os.c||src/os.c": [
          "File: src/os.c -> src/os.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "258: }",
          "260: int sqlite3OsRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){",
          "262: }",
          "263: int sqlite3OsSleep(sqlite3_vfs *pVfs, int nMicro){",
          "264:   return pVfs->xSleep(pVfs, nMicro);",
          "",
          "[Removed Lines]",
          "261:   return pVfs->xRandomness(pVfs, nByte, zBufOut);",
          "",
          "[Added Lines]",
          "261:   if( sqlite3Config.iPrngSeed ){",
          "262:     memset(zBufOut, 0, nByte);",
          "263:     if( ALWAYS(nByte>sizeof(unsigned)) ) nByte = sizeof(unsigned int);",
          "264:     memcpy(zBufOut, &sqlite3Config.iPrngSeed, nByte);",
          "265:     return SQLITE_OK;",
          "266:   }else{",
          "267:     return pVfs->xRandomness(pVfs, nByte, zBufOut);",
          "268:   }",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "9150:       { \"parser_coverage\",    SQLITE_TESTCTRL_PARSER_COVERAGE, \"\"                 },",
          "9151: #endif",
          "9152:       { \"pending_byte\",       SQLITE_TESTCTRL_PENDING_BYTE,  \"OFFSET  \"           },",
          "9154:       { \"prng_restore\",       SQLITE_TESTCTRL_PRNG_RESTORE,  \"\"                   },",
          "9155:       { \"prng_save\",          SQLITE_TESTCTRL_PRNG_SAVE,     \"\"                   },",
          "9156:       { \"reserve\",            SQLITE_TESTCTRL_RESERVE,       \"BYTES-OF-RESERVE\"   },",
          "9157:     };",
          "9158:     int testctrl = -1;",
          "",
          "[Removed Lines]",
          "9153:       { \"prng_reset\",         SQLITE_TESTCTRL_PRNG_RESET,    \"\"                   },",
          "",
          "[Added Lines]",
          "9155:       { \"prng_seed\",          SQLITE_TESTCTRL_PRNG_SEED,     \"SEED ?db?\"          },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9234:           }",
          "9235:           break;",
          "9238:         case SQLITE_TESTCTRL_ASSERT:",
          "9239:         case SQLITE_TESTCTRL_ALWAYS:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9238:         case SQLITE_TESTCTRL_PRNG_SEED:",
          "9239:           if( nArg==3 || nArg==4 ){",
          "9240:             int i = (int)integerValue(azArg[2]);",
          "9241:             sqlite3 *db;",
          "9242:             if( nArg==3 ){",
          "9243:               db = 0;",
          "9244:             }else{",
          "9245:               db = p->db;",
          "9247:               sqlite3_table_column_metadata(db, 0, \"x\", 0, 0, 0, 0, 0, 0);",
          "9248:             }",
          "9249:             rc2 = sqlite3_test_control(testctrl, i, db);",
          "9250:             isOk = 3;",
          "9251:           }",
          "9252:           break;",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "7335: #define SQLITE_TESTCTRL_FIRST                    5",
          "7336: #define SQLITE_TESTCTRL_PRNG_SAVE                5",
          "7337: #define SQLITE_TESTCTRL_PRNG_RESTORE             6",
          "7339: #define SQLITE_TESTCTRL_BITVEC_TEST              8",
          "7340: #define SQLITE_TESTCTRL_FAULT_INSTALL            9",
          "7341: #define SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS     10",
          "",
          "[Removed Lines]",
          "7338: #define SQLITE_TESTCTRL_PRNG_RESET               7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7358: #define SQLITE_TESTCTRL_IMPOSTER                25",
          "7359: #define SQLITE_TESTCTRL_PARSER_COVERAGE         26",
          "7360: #define SQLITE_TESTCTRL_RESULT_INTREAL          27",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7361: #define SQLITE_TESTCTRL_PRNG_SEED               28",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6375: ){",
          "6377:   return TCL_OK;",
          "6378: }",
          "",
          "[Removed Lines]",
          "6376:   sqlite3_test_control(SQLITE_TESTCTRL_PRNG_RESET);",
          "",
          "[Added Lines]",
          "6376:   sqlite3_randomness(0,0);",
          "6377:   return TCL_OK;",
          "6378: }",
          "6394: static int SQLITE_TCLAPI prng_seed(",
          "6399: ){",
          "6400:   int i = 0;",
          "6401:   sqlite3 *db = 0;",
          "6402:   if( objc!=2 && objc!=3 ){",
          "6403:     Tcl_WrongNumArgs(interp, 1, objv, \"SEED ?DB?\");",
          "6404:     return TCL_ERROR;",
          "6405:   }",
          "6406:   if( Tcl_GetIntFromObj(interp,objv[0],&i) ) return TCL_ERROR;",
          "6407:   if( objc==3 && getDbPointer(interp, Tcl_GetString(objv[2]), &db) ){",
          "6408:     return TCL_ERROR;",
          "6409:   }",
          "6410:   sqlite3_test_control(SQLITE_TESTCTRL_PRNG_SEED, i, db);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7923:      { \"save_prng_state\",               save_prng_state,    0 },",
          "7924:      { \"restore_prng_state\",            restore_prng_state, 0 },",
          "7925:      { \"reset_prng_state\",              reset_prng_state,   0 },",
          "7926:      { \"database_never_corrupt\",        database_never_corrupt, 0},",
          "7927:      { \"database_may_be_corrupt\",       database_may_be_corrupt, 0},",
          "7928:      { \"optimization_control\",          optimization_control,0},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7960:      { \"prng_seed\",                     prng_seed,          0 },",
          "",
          "---------------"
        ],
        "test/dbfuzz2.c||test/dbfuzz2.c": [
          "File: test/dbfuzz2.c -> test/dbfuzz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "211:   if( mxCb>0 ){",
          "212:     sqlite3_progress_handler(db, 10, progress_handler, 0);",
          "213:   }",
          "214:   for(i=0; i<sizeof(azSql)/sizeof(azSql[0]); i++){",
          "215:     if( eVerbosity>=1 ){",
          "216:       printf(\"%s\\n\", azSql[i]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214: #ifdef SQLITE_TESTCTRL_PRNG_SEED",
          "215:   sqlite3_test_control(SQLITE_TESTCTRL_PRNG_SEED, 1, db);",
          "216: #endif",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1805:             sqlite3_progress_handler(db, 100000, progressHandler,",
          "1806:                                      &vdbeLimitFlag);",
          "1807:           }",
          "1808: #endif",
          "1809:           do{",
          "1810:             runSql(db, (char*)pSql->a, runFlags);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1808: #endif",
          "1809: #ifdef SQLITE_TESTCTRL_PRNG_SEED",
          "1810:           sqlite3_test_control(SQLITE_TESTCTRL_PRNG_SEED, 1, db);",
          "",
          "---------------"
        ]
      }
    }
  ]
}