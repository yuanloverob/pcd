{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "971194aca3cfdaedd78a8498f553628fca3cc899",
      "candidate_info": {
        "commit_hash": "971194aca3cfdaedd78a8498f553628fca3cc899",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/971194aca3cfdaedd78a8498f553628fca3cc899",
        "files": [
          "ext/rbu/rbupartial.test",
          "ext/rbu/sqlite3rbu.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix RBU so that it does not write rows that should be excluded into partial indexes (corrupting the database).\n\nFossilOrigin-Name: 31eb27f438ad727b095a518bfe0f7ed37cb806fc1e6929b821eddcc6cc9de260",
        "before_after_code_files": [
          "ext/rbu/rbupartial.test||ext/rbu/rbupartial.test",
          "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rbu/rbupartial.test||ext/rbu/rbupartial.test": [
          "File: ext/rbu/rbupartial.test -> ext/rbu/rbupartial.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 April 11",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "13: source [file join [file dirname [info script]] rbu_common.tcl]",
          "14: set ::testprefix rbupartial",
          "16: db close",
          "17: sqlite3_shutdown",
          "18: sqlite3_config_uri 1",
          "20: foreach {tn without_rowid a b c d} {",
          "21:   1 \"\"              a b c d",
          "22:   2 \"WITHOUT ROWID\" aaa bbb ccc ddd",
          "23:   3 \"WITHOUT ROWID\" \"\\\"hello\\\"\" {\"one'two\"}  {[c]} ddd",
          "24:   4 \"WITHOUT ROWID\" {`a b`} {\"one'two\"}  {[c c c]} ddd",
          "25:   5 \"\" a b c {\"d\"\"d\"}",
          "26:   6 \"\" {'one''two'} b {\"c\"\"c\"} {\"d\"\"d\"}",
          "27: } {",
          "28:   eval [string map [list \\",
          "29:     %WITHOUT_ROWID% $without_rowid %A% $a %B% $b %C% $c %D% $d",
          "30:   ] {",
          "31:   reset_db",
          "32:   do_execsql_test $tn.1.0 {",
          "33:     CREATE TABLE t1(%A% PRIMARY KEY, %B%, %C%, %D%) %WITHOUT_ROWID% ;",
          "34:     CREATE INDEX i1b  ON t1(%B%);",
          "35:     CREATE INDEX i1b2 ON t1(%B%) WHERE %C%<5;",
          "36:     CREATE INDEX i1b3 ON t1(%B%) WHERE %C%>=5;",
          "38:     CREATE INDEX i1c  ON t1(%C%);",
          "39:     CREATE INDEX i1c2 ON t1(%C%) WHERE %C% IS NULL;",
          "40:     CREATE INDEX i1c3 ON t1(%C%) WHERE %C% IS NOT NULL;",
          "42:     CREATE INDEX i1c4 ON t1(%C%) WHERE %D% < 'd';",
          "43:   }",
          "45:   do_execsql_test $tn.1.1 {",
          "46:     INSERT INTO t1 VALUES(0, NULL, NULL, 'a');",
          "47:     INSERT INTO t1 VALUES(1, 2, 3, 'b');",
          "48:     INSERT INTO t1 VALUES(4, 5, 6, 'c');",
          "49:     INSERT INTO t1 VALUES(7, 8, 9, 'd');",
          "50:   }",
          "52:   forcedelete rbu.db",
          "53:   do_test $tn.1.2 {",
          "54:     sqlite3 rbu rbu.db",
          "55:     rbu eval {",
          "56:       CREATE TABLE data_t1(%A%, %B%, %C%, %D%, rbu_control);",
          "58:       INSERT INTO data_t1 VALUES(10, 11, 12, 'e', 0);",
          "59:       INSERT INTO data_t1 VALUES(13, 14, NULL, 'f', 0);",
          "61:       INSERT INTO data_t1 VALUES(0, NULL, NULL, NULL, 1);",
          "62:       INSERT INTO data_t1 VALUES(4, NULL, NULL, NULL, 1);",
          "64:       INSERT INTO data_t1 VALUES(7, NULL, 4, NULL, '..x.');",
          "65:       INSERT INTO data_t1 VALUES(1, 10, NULL, NULL, '.xx.');",
          "66:     }",
          "67:     rbu close",
          "68:   } {}",
          "70:   do_test $tn.1.3 {",
          "71:     run_rbu test.db rbu.db",
          "72:     execsql { PRAGMA integrity_check }",
          "73:   } {ok}",
          "75:   do_execsql_test $tn.1.4 {",
          "76:     SELECT * FROM t1 ORDER BY %A%;",
          "77:   } {",
          "78:     1 10 {} b   7 8 4 d   10 11 12 e   13 14 {} f",
          "79:   }",
          "81:   set step 0",
          "82:   do_rbu_vacuum_test $tn.1.5 0",
          "83:   }]",
          "84: }",
          "86: finish_test",
          "",
          "---------------"
        ],
        "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c": [
          "File: ext/rbu/sqlite3rbu.c -> ext/rbu/sqlite3rbu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1250:   pIter->nIndex = 0;",
          "1251:   while( p->rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pList) ){",
          "1252:     const char *zIdx = (const char*)sqlite3_column_text(pList, 1);",
          "1253:     sqlite3_stmt *pXInfo = 0;",
          "1254:     if( zIdx==0 ) break;",
          "1255:     p->rc = prepareFreeAndCollectError(p->dbMain, &pXInfo, &p->zErrmsg,",
          "1256:         sqlite3_mprintf(\"PRAGMA main.index_xinfo = %Q\", zIdx)",
          "1257:     );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1258:     int bPartial = sqlite3_column_int(pList, 4);",
          "1261:     if( bPartial ){",
          "1262:       memset(pIter->abIndexed, 0x01, sizeof(u8)*pIter->nTblCol);",
          "1263:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1958:   }",
          "1959: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1970: static char *rbuObjIterGetIndexWhere(sqlite3rbu *p, RbuObjIter *pIter){",
          "1971:   sqlite3_stmt *pStmt = 0;",
          "1972:   int rc = p->rc;",
          "1973:   char *zRet = 0;",
          "1975:   if( rc==SQLITE_OK ){",
          "1976:     rc = prepareAndCollectError(p->dbMain, &pStmt, &p->zErrmsg,",
          "1977:         \"SELECT trim(sql) FROM sqlite_master WHERE type='index' AND name=?\"",
          "1978:     );",
          "1979:   }",
          "1980:   if( rc==SQLITE_OK ){",
          "1981:     int rc2;",
          "1982:     rc = sqlite3_bind_text(pStmt, 1, pIter->zIdx, -1, SQLITE_STATIC);",
          "1983:     if( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){",
          "1984:       const char *zSql = (const char*)sqlite3_column_text(pStmt, 0);",
          "1985:       if( zSql ){",
          "1987:         int i;",
          "1988:         for(i=0; zSql[i]; i++){",
          "1989:           char c = zSql[i];",
          "1990:           if( c=='(' ){",
          "1991:             nParen++;",
          "1992:           }",
          "1993:           else if( c==')' ){",
          "1994:             nParen--;",
          "1995:             if( nParen==0 ){",
          "1996:               i++;",
          "1997:               break;",
          "1998:             }",
          "1999:           }else if( c=='\"' || c=='\\'' || c=='`' ){",
          "2000:             for(i++; 1; i++){",
          "2001:               if( zSql[i]==c ){",
          "2002:                 if( zSql[i+1]!=c ) break;",
          "2003:                 i++;",
          "2004:               }",
          "2005:             }",
          "2006:           }else if( c=='[' ){",
          "2007:             for(i++; 1; i++){",
          "2008:               if( zSql[i]==']' ) break;",
          "2009:             }",
          "2010:           }",
          "2011:         }",
          "2012:         if( zSql[i] ){",
          "2013:           zRet = rbuStrndup(&zSql[i], &rc);",
          "2014:         }",
          "2015:       }",
          "2016:     }",
          "2018:     rc2 = sqlite3_finalize(pStmt);",
          "2019:     if( rc==SQLITE_OK ) rc = rc2;",
          "2020:   }",
          "2022:   p->rc = rc;",
          "2023:   return zRet;",
          "2024: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1989:       char *zBind = 0;",
          "1990:       int nBind = 0;",
          "1992:       assert( pIter->eType!=RBU_PK_VTAB );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2055:       char *zPart = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1994:           p, pIter, &zImposterCols, &zImposterPK, &zWhere, &nBind",
          "1995:       );",
          "1996:       zBind = rbuObjIterGetBindlist(p, nBind);",
          "1999:       sqlite3_test_control(SQLITE_TESTCTRL_IMPOSTER, p->dbMain, \"main\", 0, 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2063:       zPart = rbuObjIterGetIndexWhere(p, pIter);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2026:         char *zSql;",
          "2027:         if( rbuIsVacuum(p) ){",
          "2028:           zSql = sqlite3_mprintf(",
          "2030:               zCollist,",
          "2031:               pIter->zDataTbl,",
          "2033:           );",
          "2034:         }else",
          "2036:         if( pIter->eType==RBU_PK_EXTERNAL || pIter->eType==RBU_PK_NONE ){",
          "2037:           zSql = sqlite3_mprintf(",
          "2039:               zCollist, p->zStateDb, pIter->zDataTbl,",
          "2041:           );",
          "2042:         }else{",
          "2043:           zSql = sqlite3_mprintf(",
          "2045:               \"UNION ALL \"",
          "2046:               \"SELECT %s, rbu_control FROM '%q' \"",
          "2048:               \"ORDER BY %s%s\",",
          "2050:               zCollist, pIter->zDataTbl,",
          "2051:               zCollist, zLimit",
          "2052:           );",
          "2053:         }",
          "",
          "[Removed Lines]",
          "2029:               \"SELECT %s, 0 AS rbu_control FROM '%q' ORDER BY %s%s\",",
          "2032:               zCollist, zLimit",
          "2038:               \"SELECT %s, rbu_control FROM %s.'rbu_tmp_%q' ORDER BY %s%s\",",
          "2040:               zCollist, zLimit",
          "2044:               \"SELECT %s, rbu_control FROM %s.'rbu_tmp_%q' \"",
          "2047:               \"WHERE typeof(rbu_control)='integer' AND rbu_control!=1 \"",
          "2049:               zCollist, p->zStateDb, pIter->zDataTbl,",
          "",
          "[Added Lines]",
          "2096:               \"SELECT %s, 0 AS rbu_control FROM '%q' %s ORDER BY %s%s\",",
          "2099:               zPart, zCollist, zLimit",
          "2105:               \"SELECT %s, rbu_control FROM %s.'rbu_tmp_%q' %s ORDER BY %s%s\",",
          "2107:               zPart, zCollist, zLimit",
          "2111:               \"SELECT %s, rbu_control FROM %s.'rbu_tmp_%q' %s \"",
          "2114:               \"%s %s typeof(rbu_control)='integer' AND rbu_control!=1 \"",
          "2116:               zCollist, p->zStateDb, pIter->zDataTbl, zPart,",
          "2118:               zPart,",
          "2119:               (zPart ? \"AND\" : \"WHERE\"),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2058:       sqlite3_free(zImposterPK);",
          "2059:       sqlite3_free(zWhere);",
          "2060:       sqlite3_free(zBind);",
          "2061:     }else{",
          "2062:       int bRbuRowid = (pIter->eType==RBU_PK_VTAB)",
          "2063:                     ||(pIter->eType==RBU_PK_NONE)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2130:       sqlite3_free(zPart);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f294cfc173c5653ef161dbff63b7838dbccdcad797f5163c49b3173f9f35ab0f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9378818d898c09aa1eb075a337c1d3b12388baac",
      "candidate_info": {
        "commit_hash": "9378818d898c09aa1eb075a337c1d3b12388baac",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9378818d898c09aa1eb075a337c1d3b12388baac",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzdata7.db"
        ],
        "message": "Do not use the insert-overwrite optimization if the cell might overwrite the page header.\n\nFossilOrigin-Name: f60a83069168899dcfd706b4d0901084c7ce92d85277950317e962a8a98ec668",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e46b2afc99329c43de08d4a2e6ade4d2239d7409c5d5626bf272a3e0dd24d1b4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8730:       memcpy(oldCell, newCell, szNew);",
          "8731:       return SQLITE_OK;",
          "8732:     }",
          "",
          "[Removed Lines]",
          "8729:       if( oldCell+szNew > pPage->aDataEnd ) return SQLITE_CORRUPT_BKPT;",
          "",
          "[Added Lines]",
          "8729:       if( oldCell < pPage->aData+pPage->hdrOffset+10 ){",
          "8730:         return SQLITE_CORRUPT_BKPT;",
          "8731:       }",
          "8732:       if( oldCell+szNew > pPage->aDataEnd ){",
          "8733:         return SQLITE_CORRUPT_BKPT;",
          "8734:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4dad7ed532ef1a6b50e5ebf4dedf2a4611a82159",
      "candidate_info": {
        "commit_hash": "4dad7ed532ef1a6b50e5ebf4dedf2a4611a82159",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4dad7ed532ef1a6b50e5ebf4dedf2a4611a82159",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/gencol1.test"
        ],
        "message": "When a table is part of a LEFT JOIN and should be a completely NULL row due to the semantics of a LEFT JOIN, make sure any generated columns on that row evaluate to NULL.  Ticket [3b84b42943644d6f]\n\nFossilOrigin-Name: 0271491438ad2a985aeff355173a8d0f1e5813954c82147bc68cb26cca5804c8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1e3918ca2f2c1cfcfa44249b1d7b847d52cbb8d302a8d4a335c090cfdf22d7a1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3408:   Column *pCol,",
          "3409:   int regOut",
          "3410: ){",
          "3411:   sqlite3ExprCode(pParse, pCol->pDflt, regOut);",
          "3412:   if( pCol->affinity>=SQLITE_AFF_TEXT ){",
          "3415:   }",
          "3416: }",
          "",
          "[Removed Lines]",
          "3413:     sqlite3VdbeAddOp4(pParse->pVdbe, OP_Affinity, regOut, 1, 0,",
          "3414:                       &pCol->affinity, 1);",
          "",
          "[Added Lines]",
          "3411:   int iAddr;",
          "3412:   Vdbe *v = pParse->pVdbe;",
          "3413:   assert( v!=0 );",
          "3414:   assert( pParse->iSelfTab!=0 );",
          "3415:   if( pParse->iSelfTab>0 ){",
          "3416:     iAddr = sqlite3VdbeAddOp3(v, OP_IfNullRow, pParse->iSelfTab-1, 0, regOut);",
          "3417:   }else{",
          "3418:     iAddr = 0;",
          "3419:   }",
          "3422:     sqlite3VdbeAddOp4(v, OP_Affinity, regOut, 1, 0, &pCol->affinity, 1);",
          "3424:   if( iAddr ) sqlite3VdbeJumpHere(v, iAddr);",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "419:   SELECT a, quote(b) FROM t1",
          "420: } {9 NULL}",
          "422: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "422: # 2019-12-16 ticket 3b84b42943644d6f",
          "423: # When a table is the right table of a LEFT JOIN and the ON clause is",
          "424: # false, make sure any generated columns evaluate to NULL.",
          "425: reset_db",
          "426: do_execsql_test gencol1-16.10 {",
          "427:   CREATE TABLE t0(c0);",
          "428:   CREATE TABLE t1(c1, c2 AS(1));",
          "429:   INSERT INTO t0 VALUES(0);",
          "430:   SELECT c0, c1, c2 FROM t0 LEFT JOIN t1;",
          "431: } {0 {} {}}",
          "432: do_execsql_test gencol1-16.20 {",
          "433:   DROP TABLE t1;",
          "434:   CREATE TABLE t1(c1, c2 AS (c1 ISNULL));",
          "435:   SELECT c0, c1, c2 FROM t0 LEFT JOIN t1;",
          "436: } {0 {} {}}",
          "437: do_execsql_test gencol1-16.30 {",
          "438:   INSERT INTO t1(c1) VALUES(1),(NULL);",
          "439:   SELECT * FROM t1;",
          "440: } {1 0 {} 1}",
          "441: do_execsql_test gencol1-16.40 {",
          "442:   SELECT c0, c1, c2 FROM t0 LEFT JOIN t1 ON c0=c1;",
          "443: } {0 {} {}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ae55737fbf98963accbb1b9a26250cd6f08a4ce5",
      "candidate_info": {
        "commit_hash": "ae55737fbf98963accbb1b9a26250cd6f08a4ce5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ae55737fbf98963accbb1b9a26250cd6f08a4ce5",
        "files": [
          "ext/fts5/fts5Int.h",
          "ext/fts5/fts5_config.c",
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5full.test",
          "ext/fts5/test/fts5misc.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Do not allow users to effectively disable fts5 crisismerge operations by setting the crisismerge threshold to higher than the maximum allowable segment b-trees on a single level. Fix for [d392017c].\n\nFossilOrigin-Name: 86e497209217abb7bcb491a023cd353f3c7c9c103ebd9f58dd8661b12cf3694c",
        "before_after_code_files": [
          "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h",
          "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c",
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5full.test||ext/fts5/test/fts5full.test",
          "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h": [
          "File: ext/fts5/fts5Int.h -> ext/fts5/fts5Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "62: #define FTS5_MAX_PREFIX_INDEXES 31",
          "64: #define FTS5_DEFAULT_NEARDIST 10",
          "65: #define FTS5_DEFAULT_RANK     \"bm25\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: #define FTS5_MAX_SEGMENT 2000",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c": [
          "File: ext/fts5/fts5_config.c -> ext/fts5/fts5_config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "882:     }else{",
          "883:       if( nCrisisMerge<=1 ) nCrisisMerge = FTS5_DEFAULT_CRISISMERGE;",
          "884:       pConfig->nCrisisMerge = nCrisisMerge;",
          "885:     }",
          "886:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "884:       if( nCrisisMerge>=FTS5_MAX_SEGMENT ) nCrisisMerge = FTS5_MAX_SEGMENT-1;",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "239: #define FTS5_SEGMENT_ROWID(segid, pgno)       fts5_dri(segid, 0, 0, pgno)",
          "240: #define FTS5_DLIDX_ROWID(segid, height, pgno) fts5_dri(segid, 1, height, pgno)",
          "247: #ifdef SQLITE_DEBUG",
          "248: int sqlite3Fts5Corrupt() { return SQLITE_CORRUPT_VTAB; }",
          "249: #endif",
          "",
          "[Removed Lines]",
          "245: #define FTS5_MAX_SEGMENT 2000",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5full.test||ext/fts5/test/fts5full.test": [
          "File: ext/fts5/test/fts5full.test -> ext/fts5/test/fts5full.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:       execsql { INSERT INTO x8 VALUES( rnddoc(5) ); }",
          "37:     }",
          "38:   } msg] $msg",
          "42: finish_test",
          "",
          "[Removed Lines]",
          "39: } {1 {database or disk is full}}",
          "",
          "[Added Lines]",
          "39: } {0 {}}",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test": [
          "File: ext/fts5/test/fts5misc.test -> ext/fts5/test/fts5misc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:   INSERT INTO vt0(vt0, rank) VALUES('pgsz', '65537');",
          "176: } {1 {SQL logic error}}",
          "178: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178: #-------------------------------------------------------------------------",
          "179: # Ticket [d392017c].",
          "180: #",
          "181: reset_db",
          "182: do_execsql_test 6.0 {",
          "183:   CREATE VIRTUAL TABLE vt0 USING fts5(c0);",
          "184:   WITH s(i) AS (",
          "185:     SELECT 1 UNION ALL SELECT i+1 FROM s WHERE i<10000",
          "186:   )",
          "187:   INSERT INTO vt0(c0) SELECT '0' FROM s;",
          "188:   INSERT INTO vt0(vt0, rank) VALUES('crisismerge', 2000);",
          "189:   INSERT INTO vt0(vt0, rank) VALUES('automerge', 0);",
          "190: } {}",
          "192: do_execsql_test 6.1 {",
          "193:   INSERT INTO vt0(vt0) VALUES('rebuild');",
          "194: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 907f7965b335d8d5441f2e386bb190d1f93ffcd45ca98d2d1c621dede491fc5e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f4b1d8dc17dcd01eb01f3cafb3614d37eee31e56",
      "candidate_info": {
        "commit_hash": "f4b1d8dc17dcd01eb01f3cafb3614d37eee31e56",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f4b1d8dc17dcd01eb01f3cafb3614d37eee31e56",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "Do not allow generated columns in the PRIMARY KEY.\n\nFossilOrigin-Name: 1a54743a3d327efc8ecc45b9fde91ddfea3fca36408f9b753453c31f2e4cc69c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d38176e93a628e03f1bd8b689fbc4152a1495388da917c2d89cefed04353d2d6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1456:   }",
          "1457: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1462: static void makeColumnPartOfPrimaryKey(Parse *pParse, Column *pCol){",
          "1463:   pCol->colFlags |= COLFLAG_PRIMKEY;",
          "1464: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "1465:   if( pCol->colFlags & COLFLAG_GENERATED ){",
          "1466:     testcase( pCol->colFlags & COLFLAG_VIRTUAL );",
          "1467:     testcase( pCol->colFlags & COLFLAG_STORED );",
          "1468:     sqlite3ErrorMsg(pParse,",
          "1469:       \"generated columns cannot be part of the PRIMARY KEY\");",
          "1470:   }",
          "1471: #endif",
          "1472: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1495:   if( pList==0 ){",
          "1496:     iCol = pTab->nCol - 1;",
          "1497:     pCol = &pTab->aCol[iCol];",
          "1499:     nTerm = 1;",
          "1500:   }else{",
          "1501:     nTerm = pList->nExpr;",
          "",
          "[Removed Lines]",
          "1498:     pCol->colFlags |= COLFLAG_PRIMKEY;",
          "",
          "[Added Lines]",
          "1513:     makeColumnPartOfPrimaryKey(pParse, pCol);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1508:         for(iCol=0; iCol<pTab->nCol; iCol++){",
          "1509:           if( sqlite3StrICmp(zCName, pTab->aCol[iCol].zName)==0 ){",
          "1510:             pCol = &pTab->aCol[iCol];",
          "1512:             break;",
          "1513:           }",
          "1514:         }",
          "",
          "[Removed Lines]",
          "1511:             pCol->colFlags |= COLFLAG_PRIMKEY;",
          "",
          "[Added Lines]",
          "1526:             makeColumnPartOfPrimaryKey(pParse, pCol);",
          "",
          "---------------"
        ]
      }
    }
  ]
}