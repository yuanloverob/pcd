{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "aef81674211ab2f0f93852e3e9ca3bebb7e77c0b",
      "candidate_info": {
        "commit_hash": "aef81674211ab2f0f93852e3e9ca3bebb7e77c0b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/aef81674211ab2f0f93852e3e9ca3bebb7e77c0b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/expr.test"
        ],
        "message": "Fix the sqlite3ExprImpliesNonNullRow() routine so that it correctly handles a numeric comparison of two AND subexpressions.\n\nFossilOrigin-Name: 07e504d5174a1a8b1aa05ec5b44ac81ab3ea706c5a098caa88deb3d489cec8fb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/expr.test||test/expr.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 473892a8eceacf24d57fd0c72ff2a0b8be4e0d75e0af7a30bdb24fbc3b453601",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5359:       return WRC_Prune;",
          "5361:     case TK_AND:",
          "5367:       }",
          "5368:       return WRC_Prune;",
          "",
          "[Removed Lines]",
          "5362:       assert( pWalker->eCode==0 );",
          "5363:       sqlite3WalkExpr(pWalker, pExpr->pLeft);",
          "5364:       if( pWalker->eCode ){",
          "5365:         pWalker->eCode = 0;",
          "5366:         sqlite3WalkExpr(pWalker, pExpr->pRight);",
          "",
          "[Added Lines]",
          "5362:       if( pWalker->eCode==0 ){",
          "5363:         sqlite3WalkExpr(pWalker, pExpr->pLeft);",
          "5364:         if( pWalker->eCode ){",
          "5365:           pWalker->eCode = 0;",
          "5366:           sqlite3WalkExpr(pWalker, pExpr->pRight);",
          "5367:         }",
          "",
          "---------------"
        ],
        "test/expr.test||test/expr.test": [
          "File: test/expr.test -> test/expr.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1036:   } {0}",
          "1037: }",
          "1039: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1039: reset_db",
          "1040: sqlite3_test_control SQLITE_TESTCTRL_INTERNAL_FUNCTIONS db",
          "1041: do_execsql_test expr-16.1 {",
          "1042:   CREATE TABLE t1(a,b,c);",
          "1043:   CREATE TABLE dual(dummy);",
          "1044:   INSERT INTO dual VALUES('X');",
          "1045: } {}",
          "1046: do_execsql_test expr-16.100 {",
          "1047:   SELECT implies_nonnull_row( (b=1 AND 0)>(b=3 AND 0),a)",
          "1048:   FROM dual LEFT JOIN t1;",
          "1049: } {0}",
          "1050: do_execsql_test expr-16.101 {",
          "1051:   SELECT implies_nonnull_row( (b=1 AND 0)>(b=3 AND a=4),a)",
          "1052:   FROM dual LEFT JOIN t1;",
          "1053: } {1}",
          "1054: do_execsql_test expr-16.102 {",
          "1055:   SELECT implies_nonnull_row( (b=1 AND a=2)>(b=3 AND a=4),a)",
          "1056:   FROM dual LEFT JOIN t1;",
          "1057: } {1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e6dc1e5b7016dcf90360c7688ccbc739293c0fcb",
      "candidate_info": {
        "commit_hash": "e6dc1e5b7016dcf90360c7688ccbc739293c0fcb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e6dc1e5b7016dcf90360c7688ccbc739293c0fcb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/sqliteInt.h",
          "test/altertab3.test"
        ],
        "message": "Fix a problem in ALTER TABLE that could occur if an index, view or trigger in the schema features an expression of the form ((SELECT ...) IN ()) where the SELECT statement uses a CTE.\n\nFossilOrigin-Name: 7e5ad8e0ab7ee91a5ccb19a9654d6a036233f74d2fdc45f7315feb3d9d035fd4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d43e0efb9642037dd751cfed13438e71cfceb50e14a0ec603880c6c3be2e93b1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "697:   RenameToken *pNew;",
          "698:   assert( pPtr || pParse->db->mallocFailed );",
          "699:   renameTokenCheckAll(pParse, pPtr);",
          "706:   }",
          "708:   return pPtr;",
          "",
          "[Removed Lines]",
          "700:   pNew = sqlite3DbMallocZero(pParse->db, sizeof(RenameToken));",
          "701:   if( pNew ){",
          "702:     pNew->p = pPtr;",
          "703:     pNew->t = *pToken;",
          "704:     pNew->pNext = pParse->pRename;",
          "705:     pParse->pRename = pNew;",
          "",
          "[Added Lines]",
          "700:   if( pParse->eParseMode!=PARSE_MODE_UNMAP ){",
          "701:     pNew = sqlite3DbMallocZero(pParse->db, sizeof(RenameToken));",
          "702:     if( pNew ){",
          "703:       pNew->p = pPtr;",
          "704:       pNew->t = *pToken;",
          "705:       pNew->pNext = pParse->pRename;",
          "706:       pParse->pRename = pNew;",
          "707:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "783: void sqlite3RenameExprUnmap(Parse *pParse, Expr *pExpr){",
          "784:   Walker sWalker;",
          "785:   memset(&sWalker, 0, sizeof(Walker));",
          "786:   sWalker.pParse = pParse;",
          "787:   sWalker.xExprCallback = renameUnmapExprCb;",
          "788:   sWalker.xSelectCallback = renameUnmapSelectCb;",
          "789:   sqlite3WalkExpr(&sWalker, pExpr);",
          "790: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "786:   u8 eMode = pParse->eParseMode;",
          "792:   pParse->eParseMode = PARSE_MODE_UNMAP;",
          "794:   pParse->eParseMode = eMode;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "992:   memset(p, 0, sizeof(Parse));",
          "994:   p->db = db;",
          "995:   p->nQueryLoop = 1;",
          "996:   rc = sqlite3RunParser(p, zSql, &zErr);",
          "",
          "[Removed Lines]",
          "993:   p->eParseMode = (bTable ? PARSE_MODE_RENAME_TABLE : PARSE_MODE_RENAME_COLUMN);",
          "",
          "[Added Lines]",
          "998:   p->eParseMode = PARSE_MODE_RENAME;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3236: #define PARSE_MODE_NORMAL        0",
          "3237: #define PARSE_MODE_DECLARE_VTAB  1",
          "",
          "[Removed Lines]",
          "3238: #define PARSE_MODE_RENAME_COLUMN 2",
          "3239: #define PARSE_MODE_RENAME_TABLE  3",
          "",
          "[Added Lines]",
          "3238: #define PARSE_MODE_RENAME        2",
          "3239: #define PARSE_MODE_UNMAP         3",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3258: #if defined(SQLITE_OMIT_ALTERTABLE)",
          "3259:   #define IN_RENAME_OBJECT 0",
          "3260: #else",
          "3262: #endif",
          "3264: #if defined(SQLITE_OMIT_VIRTUALTABLE) && defined(SQLITE_OMIT_ALTERTABLE)",
          "",
          "[Removed Lines]",
          "3261:   #define IN_RENAME_OBJECT (pParse->eParseMode>=PARSE_MODE_RENAME_COLUMN)",
          "",
          "[Added Lines]",
          "3261:   #define IN_RENAME_OBJECT (pParse->eParseMode>=PARSE_MODE_RENAME)",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "475:   ALTER TABLE s RENAME a TO a2;",
          "476: } {1 {error in index k: no tables specified}}",
          "478: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "478: #------------------------------------------------------------------------",
          "479: #",
          "480: reset_db",
          "481: do_execsql_test 21.1 {",
          "482:   CREATE TABLE s(col);",
          "483:   CREATE VIEW v AS SELECT (",
          "484:     WITH x(a) AS(SELECT * FROM s) VALUES(RIGHT)",
          "485:   ) IN() ;",
          "486:   CREATE TABLE a(a);",
          "487:   ALTER TABLE a RENAME a TO b;",
          "488: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e31f00bbefb0cd31ea349143029a95fb2f5cc020",
      "candidate_info": {
        "commit_hash": "e31f00bbefb0cd31ea349143029a95fb2f5cc020",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e31f00bbefb0cd31ea349143029a95fb2f5cc020",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/sqliteInt.h",
          "src/vdbe.c",
          "test/func.test",
          "test/func5.test"
        ],
        "message": "Merge enhancements from trunk.\n\nFossilOrigin-Name: 4945a66237fa3861bc691d5fbef0d40286b596a0902b4f4c032d1d6528bb1a1b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbe.c||src/vdbe.c",
          "test/func.test||test/func.test",
          "test/func5.test||test/func5.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e05f743f619a6b60d0782ee85c73f6866696962954d7cb3eceb03af79c6a6189",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3805:         Table *pTab = pCol->pTab;",
          "3806:         sqlite3VdbeAddOp3(v, OP_Column, pAggInfo->sortingIdxPTab,",
          "3807:                               pCol->iSorterColumn, target);",
          "3810:         }",
          "3811:         return target;",
          "3812:       }",
          "",
          "[Removed Lines]",
          "3808:         if( ALWAYS(pTab) && pCol->iColumn>=0 ){",
          "3809:           sqlite3ColumnDefault(v, pTab, pCol->iColumn, target);",
          "",
          "[Added Lines]",
          "3808:         if( pCol->iColumn<0 ){",
          "3809:           VdbeComment((v,\"%s.rowid\",pTab->zName));",
          "3810:         }else{",
          "3811:           VdbeComment((v,\"%s.%s\",pTab->zName,pTab->aCol[pCol->iColumn].zName));",
          "3812:           if( pTab->aCol[pCol->iColumn].affinity==SQLITE_AFF_REAL ){",
          "3813:             sqlite3VdbeAddOp1(v, OP_RealAffinity, target);",
          "3814:           }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4122: #endif",
          "4124:       if( ConstFactorOk(pParse) && sqlite3ExprIsConstantNotJoin(pExpr) ){",
          "4128:       }",
          "4129:       assert( !ExprHasProperty(pExpr, EP_xIsSelect) );",
          "4130:       assert( !ExprHasProperty(pExpr, EP_TokenOnly) );",
          "",
          "[Removed Lines]",
          "4127:         return sqlite3ExprCodeAtInit(pParse, pExpr, -1);",
          "",
          "[Added Lines]",
          "4132:         return sqlite3ExprCodeRunJustOnce(pParse, pExpr, -1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4502: }",
          "",
          "[Removed Lines]",
          "4513: int sqlite3ExprCodeAtInit(",
          "",
          "[Added Lines]",
          "4526: int sqlite3ExprCodeRunJustOnce(",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4528:     }",
          "4529:   }",
          "4530:   pExpr = sqlite3ExprDup(pParse->db, pExpr, 0);",
          "4537:   }",
          "4539:   return regDest;",
          "4540: }",
          "",
          "[Removed Lines]",
          "4531:   p = sqlite3ExprListAppend(pParse, p, pExpr);",
          "4532:   if( p ){",
          "4533:      struct ExprList_item *pItem = &p->a[p->nExpr-1];",
          "4534:      pItem->reusable = regDest<0;",
          "4535:      if( regDest<0 ) regDest = ++pParse->nMem;",
          "4536:      pItem->u.iConstExprReg = regDest;",
          "4538:   pParse->pConstExpr = p;",
          "",
          "[Added Lines]",
          "4544:   if( pExpr!=0 && ExprHasProperty(pExpr, EP_HasFunc) ){",
          "4545:     Vdbe *v = pParse->pVdbe;",
          "4546:     int addr;",
          "4547:     assert( v );",
          "4548:     addr = sqlite3VdbeAddOp0(v, OP_Once); VdbeCoverage(v);",
          "4549:     pParse->okConstFactor = 0;",
          "4550:     if( !pParse->db->mallocFailed ){",
          "4551:       if( regDest<0 ) regDest = ++pParse->nMem;",
          "4552:       sqlite3ExprCode(pParse, pExpr, regDest);",
          "4553:     }",
          "4554:     pParse->okConstFactor = 1;",
          "4555:     sqlite3ExprDelete(pParse->db, pExpr);",
          "4556:     sqlite3VdbeJumpHere(v, addr);",
          "4557:   }else{",
          "4558:     p = sqlite3ExprListAppend(pParse, p, pExpr);",
          "4559:     if( p ){",
          "4560:        struct ExprList_item *pItem = &p->a[p->nExpr-1];",
          "4561:        pItem->reusable = regDest<0;",
          "4562:        if( regDest<0 ) regDest = ++pParse->nMem;",
          "4563:        pItem->u.iConstExprReg = regDest;",
          "4564:     }",
          "4565:     pParse->pConstExpr = p;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4560:    && sqlite3ExprIsConstantNotJoin(pExpr)",
          "4561:   ){",
          "4564:   }else{",
          "4565:     int r1 = sqlite3GetTempReg(pParse);",
          "4566:     r2 = sqlite3ExprCodeTarget(pParse, pExpr, r1);",
          "",
          "[Removed Lines]",
          "4563:     r2 = sqlite3ExprCodeAtInit(pParse, pExpr, -1);",
          "",
          "[Added Lines]",
          "4591:     r2 = sqlite3ExprCodeRunJustOnce(pParse, pExpr, -1);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4618: void sqlite3ExprCodeFactorable(Parse *pParse, Expr *pExpr, int target){",
          "4619:   if( pParse->okConstFactor && sqlite3ExprIsConstantNotJoin(pExpr) ){",
          "4621:   }else{",
          "4622:     sqlite3ExprCodeCopy(pParse, pExpr, target);",
          "4623:   }",
          "",
          "[Removed Lines]",
          "4620:     sqlite3ExprCodeAtInit(pParse, pExpr, target);",
          "",
          "[Added Lines]",
          "4648:     sqlite3ExprCodeRunJustOnce(pParse, pExpr, target);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4677:     }else if( (flags & SQLITE_ECEL_FACTOR)!=0",
          "4678:            && sqlite3ExprIsConstantNotJoin(pExpr)",
          "4679:     ){",
          "4681:     }else{",
          "4682:       int inReg = sqlite3ExprCodeTarget(pParse, pExpr, target+i);",
          "4683:       if( inReg!=target+i ){",
          "",
          "[Removed Lines]",
          "4680:       sqlite3ExprCodeAtInit(pParse, pExpr, target+i);",
          "",
          "[Added Lines]",
          "4708:       sqlite3ExprCodeRunJustOnce(pParse, pExpr, target+i);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "5237:      && ALWAYS((combinedFlags & EP_Reduced)==0)",
          "5238:     ){",
          "5239:       if( pA->iColumn!=pB->iColumn ) return 2;",
          "5255:       if( pA->op!=TK_IN && pA->iTable!=pB->iTable && pA->iTable!=iTab ){",
          "5256:         return 2;",
          "5257:       }",
          "",
          "[Removed Lines]",
          "5240:       if( pA->op2!=pB->op2 ){",
          "5241:         if( pA->op==TK_TRUTH ) return 2;",
          "5242:         if( pA->op==TK_FUNCTION && iTab<0 ){",
          "5252:           return 2;",
          "5253:         }",
          "5254:       }",
          "",
          "[Added Lines]",
          "5268:       if( pA->op2!=pB->op2 && pA->op==TK_TRUTH ) return 2;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4239: #endif",
          "4240: void sqlite3ExprCodeCopy(Parse*, Expr*, int);",
          "4241: void sqlite3ExprCodeFactorable(Parse*, Expr*, int);",
          "4243: int sqlite3ExprCodeTemp(Parse*, Expr*, int*);",
          "4244: int sqlite3ExprCodeTarget(Parse*, Expr*, int);",
          "4245: int sqlite3ExprCodeExprList(Parse*, ExprList*, int, int, u8);",
          "",
          "[Removed Lines]",
          "4242: int sqlite3ExprCodeAtInit(Parse*, Expr*, int);",
          "",
          "[Added Lines]",
          "4242: int sqlite3ExprCodeRunJustOnce(Parse*, Expr*, int);",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1544:   pIn1 = &aMem[pOp->p1];",
          "1545:   pIn2 = &aMem[pOp->p2];",
          "1546:   pOut = &aMem[pOp->p3];",
          "1548:   testcase( pOut==pIn2 );",
          "1549:   assert( pIn1!=pOut );",
          "1550:   flags1 = pIn1->flags;",
          "",
          "[Removed Lines]",
          "1547:   testcase( pIn1==pIn2 );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/func.test||test/func.test": [
          "File: test/func.test -> test/func.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1477:   SELECT * FROM t1;",
          "1478: } {1 2}",
          "1480: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1480: # 2020-03-11 COALESCE() should short-circuit",
          "1481: # See also ticket 3c9eadd2a6ba0aa5",
          "1482: # Both issues stem from the fact that functions that could",
          "1483: # throw exceptions were being factored out into initialization",
          "1484: # code.  The fix was to put those function calls inside of",
          "1485: # OP_Once instead.",
          "1486: #",
          "1487: reset_db",
          "1488: do_execsql_test func-35.100 {",
          "1489:   CREATE TABLE t1(x);",
          "1490:   SELECT coalesce(x, abs(-9223372036854775808)) FROM t1;",
          "1491: } {}",
          "1492: do_execsql_test func-35.110 {",
          "1493:   SELECT coalesce(x, 'xyz' LIKE printf('%.1000000c','y')) FROM t1;",
          "1494: } {}",
          "1495: do_execsql_test func-35.200 {",
          "1496:   CREATE TABLE t0(c0 CHECK(ABS(-9223372036854775808)));",
          "1497:   PRAGMA integrity_check;",
          "1498: } {ok}",
          "",
          "---------------"
        ],
        "test/func5.test||test/func5.test": [
          "File: test/func5.test -> test/func5.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:    WHERE x+counter1('hello')=counter1('hello')+x",
          "54:    ORDER BY +x;",
          "55: } {}",
          "56: do_execsql_test func5-2.3 {",
          "57:   SELECT x, y FROM t2",
          "59:    ORDER BY +x;",
          "60: } {1 2 3 4 5 6 7 8}",
          "",
          "[Removed Lines]",
          "58:    WHERE x+counter2('hello')=counter2('hello')+x",
          "",
          "[Added Lines]",
          "56: set cvalue [db one {SELECT counter2('hello')+1}]",
          "59:    WHERE x+counter2('hello')=$cvalue+x",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7db212a70b6520832a22e98f5f506c6cc7826f3e",
      "candidate_info": {
        "commit_hash": "7db212a70b6520832a22e98f5f506c6cc7826f3e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7db212a70b6520832a22e98f5f506c6cc7826f3e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "Fix an SQL syntax error in the comment on the omit-left-join optimization. No changes to code.\n\nFossilOrigin-Name: 86b5e5a20e967af7ac444ff0a40c2e8b93b7e5c505eebf6d3753a341b05503a8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: af06f80a590e20f64fa2f630e85fa728c266ea4696b975cc5f2ab72a3b914379",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c"
        ]
      }
    },
    {
      "candidate_hash": "6411d656aae1ee8af219b240a571e3abc616375d",
      "candidate_info": {
        "commit_hash": "6411d656aae1ee8af219b240a571e3abc616375d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6411d656aae1ee8af219b240a571e3abc616375d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "If the \".wheretrace 0x10000\" bit is set, print WhereTerm.prereqAll and .prereqRight fields in the WhereTerm trace output.\n\nFossilOrigin-Name: a4f330b133a36356681dce7d2a65d8ab792620494d6cd4ef4934a97cf3a8e6fc",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1be2c18f4021e1d0b8412ecb68a599475c717dd97c7db209fc4203358957fd70",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1759:       sqlite3_snprintf(sizeof(zLeft),zLeft,\"left=%d\", pTerm->leftCursor);",
          "1760:     }",
          "1761:     sqlite3DebugPrintf(",
          "1763:        iTerm, pTerm, zType, zLeft, pTerm->truthProb,",
          "1764:        pTerm->eOperator, pTerm->wtFlags);",
          "1765:     if( pTerm->iField ){",
          "1766:       sqlite3DebugPrintf(\" iField=%d\", pTerm->iField);",
          "1767:     }",
          "",
          "[Removed Lines]",
          "1762:        \"TERM-%-3d %p %s %-12s prob=%-3d op=0x%03x wtFlags=0x%04x\",",
          "",
          "[Added Lines]",
          "1762:        \"TERM-%-3d %p %s %-12s prob=%-3d op=%03x wtFlags=%04x\",",
          "1765:     if( sqlite3WhereTrace & 0x10000 ){",
          "1766:       sqlite3DebugPrintf(\" prereq=%llx,%llx\",",
          "1767:         (u64)pTerm->prereqAll, (u64)pTerm->prereqRight);",
          "1768:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}