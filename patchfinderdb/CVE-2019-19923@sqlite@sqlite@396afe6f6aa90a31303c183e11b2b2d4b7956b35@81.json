{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "97b02505992903d03379b9f9f1462713760a5db0",
      "candidate_info": {
        "commit_hash": "97b02505992903d03379b9f9f1462713760a5db0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/97b02505992903d03379b9f9f1462713760a5db0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/func.c",
          "src/vdbemem.c"
        ],
        "message": "Fix the instr() SQL function so that it makes a copy of its argument before changing the datatype, since the datatype affects processing. Also fix the sqlite3_value_text() routine so that it always works even for values obtained form sqlite3_value_dup().  Ticket [587791f92620090e]\n\nFossilOrigin-Name: 3fb40f518086c1e8d11eb1f4134e965450dbedfa4277bce39ef1e969fc747d38",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/func.c||src/func.c",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ee83d8e30d6f9ca8f1cce653ee094ff151f633f4b6a21dd814ab07e8cfb901eb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/func.c||src/func.c": [
          "File: src/func.c -> src/func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:   int N = 1;",
          "204:   int isText;",
          "205:   unsigned char firstChar;",
          "207:   UNUSED_PARAMETER(argc);",
          "208:   typeHaystack = sqlite3_value_type(argv[0]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "206:   sqlite3_value *pC1 = 0;",
          "207:   sqlite3_value *pC2 = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "215:       zHaystack = sqlite3_value_blob(argv[0]);",
          "216:       zNeedle = sqlite3_value_blob(argv[1]);",
          "217:       isText = 0;",
          "219:       zHaystack = sqlite3_value_text(argv[0]);",
          "220:       zNeedle = sqlite3_value_text(argv[1]);",
          "221:       isText = 1;",
          "222:     }",
          "224:     firstChar = zNeedle[0];",
          "225:     while( nNeedle<=nHaystack",
          "226:        && (zHaystack[0]!=firstChar || memcmp(zHaystack, zNeedle, nNeedle)!=0)",
          "",
          "[Removed Lines]",
          "218:     }else{",
          "223:     if( zNeedle==0 || (nHaystack && zHaystack==0) ) return;",
          "",
          "[Added Lines]",
          "220:     }else if( typeHaystack!=SQLITE_BLOB && typeNeedle!=SQLITE_BLOB ){",
          "224:     }else{",
          "225:       pC1 = sqlite3_value_dup(argv[0]);",
          "226:       zHaystack = sqlite3_value_text(pC1);",
          "227:       pC2 = sqlite3_value_dup(argv[1]);",
          "228:       zNeedle = sqlite3_value_text(pC2);",
          "229:       isText = 1;",
          "230:     }",
          "231:     if( zNeedle==0 || (nHaystack && zHaystack==0) ){",
          "232:       sqlite3_result_error_nomem(context);",
          "233:       goto endInstr;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "234:     if( nNeedle>nHaystack ) N = 0;",
          "235:   }",
          "236:   sqlite3_result_int(context, N);",
          "237: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "248: endInstr:",
          "249:   sqlite3_value_free(pC1);",
          "250:   sqlite3_value_free(pC2);",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "232:   assert( pMem->szMalloc==0",
          "233:        || pMem->szMalloc==sqlite3DbMallocSize(pMem->db, pMem->zMalloc) );",
          "234:   if( pMem->szMalloc>0 && bPreserve && pMem->z==pMem->zMalloc ){",
          "236:     bPreserve = 0;",
          "237:   }else{",
          "238:     if( pMem->szMalloc>0 ) sqlite3DbFreeNN(pMem->db, pMem->zMalloc);",
          "",
          "[Removed Lines]",
          "235:     pMem->z = pMem->zMalloc = sqlite3DbReallocOrFree(pMem->db, pMem->z, n);",
          "",
          "[Added Lines]",
          "235:     if( pMem->db ){",
          "236:       pMem->z = pMem->zMalloc = sqlite3DbReallocOrFree(pMem->db, pMem->z, n);",
          "237:     }else{",
          "238:       pMem->zMalloc = sqlite3Realloc(pMem->z, n);",
          "239:       if( pMem->zMalloc==0 ) sqlite3_free(pMem->z);",
          "240:       pMem->z = pMem->zMalloc;",
          "241:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c3de90da1a6dcb5291b2fdb6d889a51743d21c6",
      "candidate_info": {
        "commit_hash": "2c3de90da1a6dcb5291b2fdb6d889a51743d21c6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2c3de90da1a6dcb5291b2fdb6d889a51743d21c6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "Add a VdbeCoverage() macro that was omitted from check-in [eea1e7aa57e74c43].\n\nFossilOrigin-Name: cd2317d04c1c4bcf5fe63aa02a6051bdfae8f5566a098e3f45bf9ec1dd0c3ea6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7f41b44ca2ecb907ea0fd09a974ac9dbdf911463a94f0f77c826cf1b1d9c3e8c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1583:           sqlite3GenerateRowDelete(pParse, pTab, pTrigger, iDataCur, iIdxCur,",
          "1584:                                    regNewData, 1, 0, OE_Replace, 1, -1);",
          "1585:           sqlite3VdbeAddOp3(v, OP_NotExists, iDataCur, addrRowidOk, regNewData);",
          "1586:           sqlite3RowidConstraint(pParse, OE_Abort, pTab);",
          "1587:         }else{",
          "1588: #ifdef SQLITE_ENABLE_PREUPDATE_HOOK",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1586:           VdbeCoverage(v);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c07eee7a50a18bd6030a96703e192799593ab09d",
      "candidate_info": {
        "commit_hash": "c07eee7a50a18bd6030a96703e192799593ab09d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c07eee7a50a18bd6030a96703e192799593ab09d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Improvements to the \".eqp trace\" command in the CLI so that it ensures that the schema has been read prior to activing the tracing feature, to avoid cluttering the output with a trace of the schema parse.\n\nFossilOrigin-Name: 42687d45aa1a2b2a32ddfc5711b4ae9cf76b8cfbeb20b57d6705ecaf5824fcb6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9cf8ebd141aa2eb661d457624c76433bd9e4abfdef04aa52e28bc169172c2c8f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6287:         p->autoEQP = AUTOEQP_full;",
          "6288:         p->autoEQPtrace = 1;",
          "6289:         open_db(p, 0);",
          "6291:         sqlite3_exec(p->db, \"PRAGMA vdbe_trace=ON;\", 0, 0, 0);",
          "6292: #endif",
          "6293:       }else{",
          "",
          "[Removed Lines]",
          "6290:         (void)sqlite3_table_column_metadata(p->db, \"x\",\"x\",0,0,0,0,0,0);",
          "",
          "[Added Lines]",
          "6290:         sqlite3_exec(p->db, \"SELECT name FROM sqlite_master LIMIT 1\", 0, 0, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e7579a53fb91ec9c0a473bc928518239671235a2",
      "candidate_info": {
        "commit_hash": "e7579a53fb91ec9c0a473bc928518239671235a2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e7579a53fb91ec9c0a473bc928518239671235a2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/windowB.test"
        ],
        "message": "Further simplifications to window-function code.\n\nFossilOrigin-Name: 5fe15c1d8383989257e11d1806e6b035acacd1b504ae385ba58d20db10f26eee",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/windowB.test||test/windowB.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 77b0db22d6c7a031f332bfcf1c8fcd94e464de9f2396f0327ee761a30ebc8b60",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1599:         VdbeCoverage(v);",
          "1600:         sqlite3ReleaseTempReg(pParse, regTmp);",
          "1601:       }",
          "1634:       if( pWin->bExprArgs ){",
          "1635:         int iStart = sqlite3VdbeCurrentAddr(v);",
          "1636:         VdbeOp *pOp, *pEnd;",
          "",
          "[Removed Lines]",
          "1611:       if( pWin->eFrmType==TK_RANGE",
          "1612:        && pWin->eStart==pWin->eEnd",
          "1613:        && pWin->eStart==TK_PRECEDING",
          "1614:       ){",
          "1615:         int regPeer = sqlite3GetTempReg(pParse);",
          "1616:         int regString = sqlite3GetTempReg(pParse);",
          "1617:         int lbl = sqlite3VdbeMakeLabel(pParse);",
          "1618:         VdbeModuleComment((v, \"windowAggStep \\\"peer is numeric?\\\" test\"));",
          "1620:         sqlite3VdbeAddOp3(v, OP_Le, p->regStart, lbl, p->regEnd);",
          "1622:         windowReadPeerValues(p, csr, regPeer);",
          "1623:         sqlite3VdbeAddOp2(v, OP_IsNull, regPeer, lbl);",
          "1624:         sqlite3VdbeAddOp4(v, OP_String8, 0, regString, 0, \"\", P4_STATIC);",
          "1625:         addrIf2 = sqlite3VdbeAddOp3(v, OP_Lt, regString, 0, regPeer);",
          "1626:         sqlite3ReleaseTempReg(pParse, regPeer);",
          "1627:         sqlite3ReleaseTempReg(pParse, regString);",
          "1628:         sqlite3VdbeResolveLabel(v, lbl);",
          "1629:         VdbeModuleComment((v, \"windowAggStep end \\\"peer is numeric?\\\"\"));",
          "1630:         assert( pWin->eStart==TK_PRECEDING || pWin->eStart==TK_FOLLOWING );",
          "1631:         assert( pMWin->pOrderBy && pMWin->pOrderBy->nExpr==1 );",
          "1632:       }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2180:     windowAggFinal(p, 0);",
          "2181:   }",
          "2182:   addrContinue = sqlite3VdbeCurrentAddr(v);",
          "2183:   switch( op ){",
          "2184:     case WINDOW_RETURN_ROW:",
          "2185:       csr = p->current.csr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2155:   if( pMWin->eStart==pMWin->eEnd && regCountdown",
          "2156:    && pMWin->eFrmType==TK_RANGE && op==WINDOW_AGGINVERSE",
          "2157:   ){",
          "2158:     int regRowid1 = sqlite3GetTempReg(pParse);",
          "2159:     int regRowid2 = sqlite3GetTempReg(pParse);",
          "2160:     sqlite3VdbeAddOp2(v, OP_Rowid, p->start.csr, regRowid1);",
          "2161:     sqlite3VdbeAddOp2(v, OP_Rowid, p->end.csr, regRowid2);",
          "2162:     sqlite3VdbeAddOp3(v, OP_Ge, regRowid2, lblDone, regRowid1);",
          "2163:     sqlite3ReleaseTempReg(pParse, regRowid1);",
          "2164:     sqlite3ReleaseTempReg(pParse, regRowid2);",
          "2165:     assert( pMWin->eStart==TK_PRECEDING || pMWin->eStart==TK_FOLLOWING );",
          "2166:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2231:   if( bPeer ){",
          "2232:     int nReg = (pMWin->pOrderBy ? pMWin->pOrderBy->nExpr : 0);",
          "2250:     windowReadPeerValues(p, csr, regTmp);",
          "2251:     windowIfNewPeer(pParse, pMWin->pOrderBy, regTmp, reg, addrContinue);",
          "2252:     sqlite3ReleaseTempRange(pParse, regTmp, nReg);",
          "",
          "[Removed Lines]",
          "2233:     int regTmp;",
          "2238:     if( pMWin->eStart==TK_FOLLOWING && pMWin->eEnd==TK_FOLLOWING",
          "2239:      && pMWin->eFrmType==TK_RANGE && op==WINDOW_AGGINVERSE",
          "2240:     ){",
          "2241:       int regRowid1 = sqlite3GetTempReg(pParse);",
          "2242:       int regRowid2 = sqlite3GetTempReg(pParse);",
          "2243:       sqlite3VdbeAddOp2(v, OP_Rowid, p->start.csr, regRowid1);",
          "2244:       sqlite3VdbeAddOp2(v, OP_Rowid, p->end.csr, regRowid2);",
          "2245:       sqlite3VdbeAddOp3(v, OP_Ge, regRowid2, lblDone, regRowid1);",
          "2246:       sqlite3ReleaseTempReg(pParse, regRowid1);",
          "2247:       sqlite3ReleaseTempReg(pParse, regRowid2);",
          "2248:     }",
          "2249:     regTmp = (nReg ? sqlite3GetTempRange(pParse, nReg) : 0);",
          "",
          "[Added Lines]",
          "2218:     int regTmp = (nReg ? sqlite3GetTempRange(pParse, nReg) : 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2761:   if( pMWin->eStart==TK_PRECEDING || pMWin->eStart==TK_FOLLOWING ){",
          "2763:   }",
          "2764:   if( pMWin->eEnd==TK_PRECEDING || pMWin->eEnd==TK_FOLLOWING ){",
          "2766:   }",
          "",
          "[Removed Lines]",
          "2762:     s.regStart = ++pParse->nMem;",
          "2765:     s.regEnd = ++pParse->nMem;",
          "",
          "[Added Lines]",
          "2733:     regStart = ++pParse->nMem;",
          "2736:     regEnd = ++pParse->nMem;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2818:   s.regArg = windowInitAccum(pParse, pMWin);",
          "2823:   }",
          "2827:   }",
          "2830:     int op = ((pMWin->eStart==TK_FOLLOWING) ? OP_Ge : OP_Le);",
          "2834:     windowAggFinal(&s, 0);",
          "",
          "[Removed Lines]",
          "2820:   if( s.regStart ){",
          "2821:     sqlite3ExprCode(pParse, pMWin->pStart, s.regStart);",
          "2822:     windowCheckValue(pParse, s.regStart, 0 + (pMWin->eFrmType==TK_RANGE?3:0));",
          "2824:   if( s.regEnd ){",
          "2825:     sqlite3ExprCode(pParse, pMWin->pEnd, s.regEnd);",
          "2826:     windowCheckValue(pParse, s.regEnd, 1 + (pMWin->eFrmType==TK_RANGE?3:0));",
          "2829:   if( pMWin->eFrmType!=TK_RANGE && pMWin->eStart==pMWin->eEnd && s.regStart ){",
          "2831:     int addrGe = sqlite3VdbeAddOp3(v, op, s.regStart, 0, s.regEnd);",
          "",
          "[Added Lines]",
          "2791:   if( regStart ){",
          "2792:     sqlite3ExprCode(pParse, pMWin->pStart, regStart);",
          "2793:     windowCheckValue(pParse, regStart, 0 + (pMWin->eFrmType==TK_RANGE?3:0));",
          "2795:   if( regEnd ){",
          "2796:     sqlite3ExprCode(pParse, pMWin->pEnd, regEnd);",
          "2797:     windowCheckValue(pParse, regEnd, 1 + (pMWin->eFrmType==TK_RANGE?3:0));",
          "2800:   if( pMWin->eFrmType!=TK_RANGE && pMWin->eStart==pMWin->eEnd && regStart ){",
          "2802:     int addrGe = sqlite3VdbeAddOp3(v, op, regStart, 0, regEnd);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2839:     sqlite3VdbeAddOp2(v, OP_Goto, 0, lblWhereEnd);",
          "2840:     sqlite3VdbeJumpHere(v, addrGe);",
          "2841:   }",
          "2843:     assert( pMWin->eEnd==TK_FOLLOWING );",
          "2845:   }",
          "2847:   if( pMWin->eStart!=TK_UNBOUNDED ){",
          "",
          "[Removed Lines]",
          "2842:   if( pMWin->eStart==TK_FOLLOWING && pMWin->eFrmType!=TK_RANGE && s.regEnd ){",
          "2844:     sqlite3VdbeAddOp3(v, OP_Subtract, s.regStart, s.regEnd, s.regStart);",
          "",
          "[Added Lines]",
          "2813:   if( pMWin->eStart==TK_FOLLOWING && pMWin->eFrmType!=TK_RANGE && regEnd ){",
          "2815:     sqlite3VdbeAddOp3(v, OP_Subtract, regStart, regEnd, regStart);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2873:       if( pMWin->eFrmType==TK_RANGE ){",
          "2874:         int lbl = sqlite3VdbeMakeLabel(pParse);",
          "2875:         int addrNext = sqlite3VdbeCurrentAddr(v);",
          "2878:         windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "2879:         sqlite3VdbeAddOp2(v, OP_Goto, 0, addrNext);",
          "2880:         sqlite3VdbeResolveLabel(v, lbl);",
          "2881:       }else{",
          "2884:       }",
          "2885:     }",
          "2886:   }else",
          "2887:   if( pMWin->eEnd==TK_PRECEDING ){",
          "2888:     int bRPS = (pMWin->eStart==TK_PRECEDING && pMWin->eFrmType==TK_RANGE);",
          "2891:     windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "2893:   }else{",
          "2894:     int addr = 0;",
          "2895:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "",
          "[Removed Lines]",
          "2876:         windowCodeRangeTest(&s, OP_Ge, s.current.csr, s.regEnd, s.end.csr, lbl);",
          "2877:         windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "2882:         windowCodeOp(&s, WINDOW_RETURN_ROW, s.regEnd, 0);",
          "2883:         windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "2889:     windowCodeOp(&s, WINDOW_AGGSTEP, s.regEnd, 0);",
          "2890:     if( bRPS ) windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "2892:     if( !bRPS ) windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "",
          "[Added Lines]",
          "2847:         windowCodeRangeTest(&s, OP_Ge, s.current.csr, regEnd, s.end.csr, lbl);",
          "2848:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "2853:         windowCodeOp(&s, WINDOW_RETURN_ROW, regEnd, 0);",
          "2854:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "2860:     windowCodeOp(&s, WINDOW_AGGSTEP, regEnd, 0);",
          "2861:     if( bRPS ) windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "2863:     if( !bRPS ) windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2897:       if( pMWin->eFrmType==TK_RANGE ){",
          "2898:         int lbl = 0;",
          "2899:         addr = sqlite3VdbeCurrentAddr(v);",
          "2901:           lbl = sqlite3VdbeMakeLabel(pParse);",
          "2903:         }",
          "2904:         windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "2907:           sqlite3VdbeAddOp2(v, OP_Goto, 0, addr);",
          "2908:           sqlite3VdbeResolveLabel(v, lbl);",
          "2909:         }",
          "2910:       }else{",
          "2913:           VdbeCoverage(v);",
          "2914:         }",
          "2915:         windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "2918:       }",
          "2919:     }",
          "2920:   }",
          "",
          "[Removed Lines]",
          "2900:         if( s.regEnd ){",
          "2902:           windowCodeRangeTest(&s, OP_Ge, s.current.csr,s.regEnd,s.end.csr,lbl);",
          "2905:         windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "2906:         if( s.regEnd ){",
          "2911:         if( s.regEnd ){",
          "2912:           addr = sqlite3VdbeAddOp3(v, OP_IfPos, s.regEnd, 0, 1);",
          "2916:         windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "2917:         if( s.regEnd ) sqlite3VdbeJumpHere(v, addr);",
          "",
          "[Added Lines]",
          "2871:         if( regEnd ){",
          "2873:           windowCodeRangeTest(&s, OP_Ge, s.current.csr, regEnd, s.end.csr, lbl);",
          "2876:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "2877:         if( regEnd ){",
          "2882:         if( regEnd ){",
          "2883:           addr = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "2887:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "2888:         if( regEnd ) sqlite3VdbeJumpHere(v, addr);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2933:   VdbeCoverage(v);",
          "2934:   if( pMWin->eEnd==TK_PRECEDING ){",
          "2935:     int bRPS = (pMWin->eStart==TK_PRECEDING && pMWin->eFrmType==TK_RANGE);",
          "2938:     windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "2939:   }else if( pMWin->eStart==TK_FOLLOWING ){",
          "2940:     int addrStart;",
          "",
          "[Removed Lines]",
          "2936:     windowCodeOp(&s, WINDOW_AGGSTEP, s.regEnd, 0);",
          "2937:     if( bRPS ) windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "",
          "[Added Lines]",
          "2907:     windowCodeOp(&s, WINDOW_AGGSTEP, regEnd, 0);",
          "2908:     if( bRPS ) windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2944:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "2945:     if( pMWin->eFrmType==TK_RANGE ){",
          "2946:       addrStart = sqlite3VdbeCurrentAddr(v);",
          "2948:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 1);",
          "2949:     }else",
          "2950:     if( pMWin->eEnd==TK_UNBOUNDED ){",
          "2951:       addrStart = sqlite3VdbeCurrentAddr(v);",
          "2953:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, 0, 1);",
          "2954:     }else{",
          "2955:       assert( pMWin->eEnd==TK_FOLLOWING );",
          "2956:       addrStart = sqlite3VdbeCurrentAddr(v);",
          "2959:     }",
          "2960:     sqlite3VdbeAddOp2(v, OP_Goto, 0, addrStart);",
          "2961:     sqlite3VdbeJumpHere(v, addrBreak2);",
          "",
          "[Removed Lines]",
          "2947:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 1);",
          "2952:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, s.regStart, 1);",
          "2957:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, s.regEnd, 1);",
          "2958:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 1);",
          "",
          "[Added Lines]",
          "2918:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 1);",
          "2923:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, regStart, 1);",
          "2928:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, regEnd, 1);",
          "2929:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 1);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2970:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "2971:     addrStart = sqlite3VdbeCurrentAddr(v);",
          "2972:     addrBreak = windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 1);",
          "2974:     sqlite3VdbeAddOp2(v, OP_Goto, 0, addrStart);",
          "2975:     sqlite3VdbeJumpHere(v, addrBreak);",
          "2976:   }",
          "",
          "[Removed Lines]",
          "2973:     windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "",
          "[Added Lines]",
          "2944:     windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "",
          "---------------"
        ],
        "test/windowB.test||test/windowB.test": [
          "File: test/windowB.test -> test/windowB.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "297:   ) FROM t1;",
          "298: } {7 {} 8 {} abc 1001}",
          "300: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "300: #-------------------------------------------------------------------------",
          "301: reset_db",
          "302: do_execsql_test 7.0 {",
          "303:   CREATE TABLE t1(a, c);",
          "304:   CREATE INDEX i1 ON t1(a);",
          "306:   INSERT INTO t1 VALUES(NULL, 46);",
          "307:   INSERT INTO t1 VALUES(NULL, 45);",
          "308:   INSERT INTO t1 VALUES(7,  997);",
          "309:   INSERT INTO t1 VALUES(7,  1000);",
          "310:   INSERT INTO t1 VALUES(8,  997);",
          "311:   INSERT INTO t1 VALUES(8,  1000);",
          "312:   INSERT INTO t1 VALUES('abc', 1001);",
          "313:   INSERT INTO t1 VALUES('abc', 1004);",
          "314:   INSERT INTO t1 VALUES('xyz', 3333);",
          "315: }",
          "317: do_execsql_test 7.1 {",
          "318:   SELECT a, max(c) OVER (",
          "319:     ORDER BY a RANGE BETWEEN 2 FOLLOWING AND 0 FOLLOWING",
          "320:   ) FROM t1;",
          "321: } {{} 46 {} 46  7 {} 7 {} 8 {} 8 {}  abc 1004 abc 1004 xyz 3333}",
          "322: do_execsql_test 7.2 {",
          "323:   SELECT a, min(c) OVER (",
          "324:     ORDER BY a RANGE BETWEEN 2 FOLLOWING AND 0 FOLLOWING",
          "325:   ) FROM t1;",
          "326: } {{} 45 {} 45  7 {} 7 {} 8 {} 8 {}  abc 1001 abc 1001 xyz 3333}",
          "328: do_execsql_test 7.3 {",
          "329:   SELECT a, max(c) OVER (",
          "330:     ORDER BY a RANGE BETWEEN 0 PRECEDING AND 2 PRECEDING",
          "331:   ) FROM t1;",
          "332: } {{} 46 {} 46  7 {} 7 {} 8 {} 8 {}  abc 1004 abc 1004 xyz 3333}",
          "333: do_execsql_test 7.4 {",
          "334:   SELECT a, min(c) OVER (",
          "335:     ORDER BY a RANGE BETWEEN 0 PRECEDING AND 2 PRECEDING",
          "336:   ) FROM t1;",
          "337: } {{} 45 {} 45  7 {} 7 {} 8 {} 8 {}  abc 1001 abc 1001 xyz 3333}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5e970a8f40b1923558fc86cfe21b1bcc9a0064c2",
      "candidate_info": {
        "commit_hash": "5e970a8f40b1923558fc86cfe21b1bcc9a0064c2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5e970a8f40b1923558fc86cfe21b1bcc9a0064c2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/altertab2.test"
        ],
        "message": "Fix a problem with renaming a column that is used as part of an ORDER BY on a compound SELECT within a database view or trigger.\n\nFossilOrigin-Name: b4b5741366578b25ec6e4c415ab8239215e53b1c900be613575f40a826cfccc9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/altertab2.test||test/altertab2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d45bee36f2c1091a2d32c16ca8921bf4e7c9e40c46d0a36fbcb179ecfafcfbf0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1138:       }else{",
          "1139:         iCol = resolveAsName(pParse, pEList, pE);",
          "1140:         if( iCol==0 ){",
          "1142:           if( !db->mallocFailed ){",
          "1143:             assert(pDup);",
          "1144:             iCol = resolveOrderByTermToExprList(pParse, pSelect, pDup);",
          "1145:           }",
          "1147:         }",
          "1148:       }",
          "1149:       if( iCol>0 ){",
          "",
          "[Removed Lines]",
          "1141:           pDup = sqlite3ExprDup(db, pE, 0);",
          "1146:           sqlite3ExprDelete(db, pDup);",
          "",
          "[Added Lines]",
          "1154:           if( IN_RENAME_OBJECT ){",
          "1155:             pDup = pE;",
          "1156:           }else{",
          "1157:             pDup = sqlite3ExprDup(db, pE, 0);",
          "1158:           }",
          "1163:           if( IN_RENAME_OBJECT ){",
          "1164:             if( iCol>0 ){",
          "1165:               pItem->done = 1;",
          "1166:               break;",
          "1167:             }",
          "1168:           }else{",
          "1169:             sqlite3ExprDelete(db, pDup);",
          "1170:           }",
          "",
          "---------------"
        ],
        "test/altertab2.test||test/altertab2.test": [
          "File: test/altertab2.test -> test/altertab2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "233:   INSERT INTO t2x VALUES(1);",
          "234: } {1 {no such column: b}}",
          "236: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "236: #-------------------------------------------------------------------------",
          "238: do_execsql_test 6.0 {",
          "239:   CREATE TABLE t3(a,b,c,d);",
          "240:   CREATE TRIGGER r3 AFTER INSERT ON t3 WHEN new.a NOT NULL BEGIN",
          "241:     SELECT a,b,c FROM t3 EXCEPT SELECT a,b,c FROM t3 ORDER BY a;",
          "242:     SELECT rowid, * FROM t3;",
          "243:   END;",
          "244: } {}",
          "246: do_execsql_test 6.1 {",
          "247:   ALTER TABLE t3 RENAME TO t3x;",
          "248:   SELECT sql FROM sqlite_master WHERE name = 'r3';",
          "249: } {",
          "250:   {CREATE TRIGGER r3 AFTER INSERT ON \"t3x\" WHEN new.a NOT NULL BEGIN",
          "251:     SELECT a,b,c FROM \"t3x\" EXCEPT SELECT a,b,c FROM \"t3x\" ORDER BY a;",
          "252:     SELECT rowid, * FROM \"t3x\";",
          "253:   END}",
          "254: }",
          "256: do_execsql_test 6.2 {",
          "257:   ALTER TABLE t3x RENAME a TO abcd;",
          "258:   SELECT sql FROM sqlite_master WHERE name = 'r3';",
          "259: } {",
          "260:   {CREATE TRIGGER r3 AFTER INSERT ON \"t3x\" WHEN new.abcd NOT NULL BEGIN",
          "261:     SELECT abcd,b,c FROM \"t3x\" EXCEPT SELECT abcd,b,c FROM \"t3x\" ORDER BY abcd;",
          "262:     SELECT rowid, * FROM \"t3x\";",
          "263:   END}",
          "264: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}