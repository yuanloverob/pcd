{
  "cve_id": "CVE-2015-2831",
  "cve_desc": "Buffer overflow in das_watchdog 0.9.0 allows local users to execute arbitrary code with root privileges via a large string in the XAUTHORITY environment variable.",
  "repo": "kmatheussen/das_watchdog",
  "patch_hash": "bd20bb02e75e2c0483832b52f2577253febfb690",
  "patch_info": {
    "commit_hash": "bd20bb02e75e2c0483832b52f2577253febfb690",
    "repo": "kmatheussen/das_watchdog",
    "commit_url": "https://github.com/kmatheussen/das_watchdog/commit/bd20bb02e75e2c0483832b52f2577253febfb690",
    "files": [
      "das_watchdog.c"
    ],
    "message": "Fix memory overflow if the name of an environment is larger than 500 characters. Bug found by Adam Sampson.",
    "before_after_code_files": [
      "das_watchdog.c||das_watchdog.c"
    ]
  },
  "patch_diff": {
    "das_watchdog.c||das_watchdog.c": [
      "File: das_watchdog.c -> das_watchdog.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "308: static char *get_pid_environ_val(pid_t pid,char *val){",
      "310:   int i=0;",
      "311:   int foundit=0;",
      "312:   FILE *fp;",
      "",
      "[Removed Lines]",
      "309:   char temp[500];",
      "",
      "[Added Lines]",
      "309:   int temp_size = 500;",
      "310:   char *temp = malloc(temp_size);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "321:   for(;;){",
      "322:     temp[i]=fgetc(fp);",
      "324:     if(foundit==1 && (temp[i]==0 || temp[i]=='\\0' || temp[i]==EOF)){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "325:     if (i >= temp_size) {",
      "326:       temp_size *= 2;",
      "327:       temp = realloc(temp, temp_size);",
      "328:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "57e7400d046f382ee94745791ccb0e1a06efb2e4",
      "candidate_info": {
        "commit_hash": "57e7400d046f382ee94745791ccb0e1a06efb2e4",
        "repo": "kmatheussen/das_watchdog",
        "commit_url": "https://github.com/kmatheussen/das_watchdog/commit/57e7400d046f382ee94745791ccb0e1a06efb2e4",
        "files": [
          "das_watchdog.c"
        ],
        "message": "The result of fgetc is an int, not a char\n\nWithout this change, get_pid_environ_val would go into an infinite loop\nwhen asked to find a variable that doesn't exist on a platform where\nchar is unsigned (e.g. ARM): fgetc would return -1 (EOF), which would be\nstored as 255 in temp[i], which then wouldn't be equal to -1 when\ntesting.",
        "before_after_code_files": [
          "das_watchdog.c||das_watchdog.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "das_watchdog.c||das_watchdog.c"
          ],
          "candidate": [
            "das_watchdog.c||das_watchdog.c"
          ]
        }
      },
      "candidate_diff": {
        "das_watchdog.c||das_watchdog.c": [
          "File: das_watchdog.c -> das_watchdog.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "322:   }",
          "324:   for(;;){",
          "326:     if (i >= temp_size) {",
          "327:       temp_size *= 2;",
          "328:       temp = realloc(temp, temp_size);",
          "329:     }",
          "334:       fclose(fp);",
          "335:       temp[i]=0;",
          "336:       return temp;",
          "337:     }",
          "340:     case EOF:",
          "341:       fclose(fp);",
          "342:       free(temp);",
          "",
          "[Removed Lines]",
          "331:     temp[i]=fgetc(fp);",
          "333:     if(foundit==1 && (temp[i]=='\\0' || temp[i]==EOF)){",
          "339:     switch(temp[i]){",
          "",
          "[Added Lines]",
          "325:     int c = fgetc(fp);",
          "332:     if(foundit==1 && (c=='\\0' || c==EOF)){",
          "338:     switch(c){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "349:       i=0;",
          "350:       break;",
          "351:     case '\\0':",
          "352:       i=0;",
          "353:       break;",
          "354:     default:",
          "355:       i++;",
          "356:     }",
          "357:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "351:       temp[i]=0;",
          "355:       temp[i]=c;",
          "",
          "---------------"
        ]
      }
    }
  ]
}