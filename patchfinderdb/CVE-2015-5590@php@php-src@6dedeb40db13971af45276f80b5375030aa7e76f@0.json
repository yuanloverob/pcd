{
  "cve_id": "CVE-2015-5590",
  "cve_desc": "Stack-based buffer overflow in the phar_fix_filepath function in ext/phar/phar.c in PHP before 5.4.43, 5.5.x before 5.5.27, and 5.6.x before 5.6.11 allows remote attackers to cause a denial of service or possibly have unspecified other impact via a large length value, as demonstrated by mishandling of an e-mail attachment by the imap PHP extension.",
  "repo": "php/php-src",
  "patch_hash": "6dedeb40db13971af45276f80b5375030aa7e76f",
  "patch_info": {
    "commit_hash": "6dedeb40db13971af45276f80b5375030aa7e76f",
    "repo": "php/php-src",
    "commit_url": "https://github.com/php/php-src/commit/6dedeb40db13971af45276f80b5375030aa7e76f",
    "files": [
      "ext/phar/phar.c"
    ],
    "message": "Fix bug #69923 - Buffer overflow and stack smashing error in phar_fix_filepath",
    "before_after_code_files": [
      "ext/phar/phar.c||ext/phar/phar.c"
    ]
  },
  "patch_diff": {
    "ext/phar/phar.c||ext/phar/phar.c": [
      "File: ext/phar/phar.c -> ext/phar/phar.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2144: {",
      "2146:  int newpath_len;",
      "2147:  char *ptr;",
      "2148:  char *tok;",
      "",
      "[Removed Lines]",
      "2145:  char newpath[MAXPATHLEN];",
      "",
      "[Added Lines]",
      "2145:  char *newpath;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2151:  if (PHAR_G(cwd_len) && use_cwd && path_length > 2 && path[0] == '.' && path[1] == '/') {",
      "2152:   newpath_len = PHAR_G(cwd_len);",
      "2153:   memcpy(newpath, PHAR_G(cwd), newpath_len);",
      "2154:  } else {",
      "2155:   newpath[0] = '/';",
      "2156:   newpath_len = 1;",
      "2157:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2153:   newpath = emalloc(strlen(path) + newpath_len + 1);",
      "2156:   newpath = emalloc(strlen(path) + 2);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2174:     if (*tok == '.') {",
      "2175:      efree(path);",
      "2177:      return estrndup(\"/\", 1);",
      "2178:     }",
      "2179:     break;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2179:      efree(newpath);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2181:     if (tok[0] == '.' && tok[1] == '.') {",
      "2182:      efree(path);",
      "2184:      return estrndup(\"/\", 1);",
      "2185:     }",
      "2186:   }",
      "2187:   return path;",
      "2188:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2187:      efree(newpath);",
      "2191:   efree(newpath);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2233:  efree(path);",
      "2236: }",
      "",
      "[Removed Lines]",
      "2235:  return estrndup(newpath, newpath_len);",
      "",
      "[Added Lines]",
      "2240:  newpath[newpath_len] = '\\0';",
      "2241:  return erealloc(newpath, newpath_len + 1);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "12ff95574bb1303fc03695a1721a8b4529d1ed0a",
      "candidate_info": {
        "commit_hash": "12ff95574bb1303fc03695a1721a8b4529d1ed0a",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/12ff95574bb1303fc03695a1721a8b4529d1ed0a",
        "files": [
          "ext/phar/phar.c"
        ],
        "message": "Fix bug #69923 - Buffer overflow and stack smashing error in phar_fix_filepath",
        "before_after_code_files": [
          "ext/phar/phar.c||ext/phar/phar.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "ext/phar/phar.c||ext/phar/phar.c"
          ],
          "candidate": [
            "ext/phar/phar.c||ext/phar/phar.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/phar/phar.c||ext/phar/phar.c": [
          "File: ext/phar/phar.c -> ext/phar/phar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2075: {",
          "2077:  int newpath_len;",
          "2078:  char *ptr;",
          "2079:  char *tok;",
          "",
          "[Removed Lines]",
          "2076:  char newpath[MAXPATHLEN];",
          "",
          "[Added Lines]",
          "2076:  char *newpath;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2082:  if (PHAR_G(cwd_len) && use_cwd && path_length > 2 && path[0] == '.' && path[1] == '/') {",
          "2083:   newpath_len = PHAR_G(cwd_len);",
          "2084:   memcpy(newpath, PHAR_G(cwd), newpath_len);",
          "2085:  } else {",
          "2086:   newpath[0] = '/';",
          "2087:   newpath_len = 1;",
          "2088:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2084:   newpath = emalloc(strlen(path) + newpath_len + 1);",
          "2087:   newpath = emalloc(strlen(path) + 2);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2105:     if (*tok == '.') {",
          "2106:      efree(path);",
          "2108:      return estrndup(\"/\", 1);",
          "2109:     }",
          "2110:     break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2110:      efree(newpath);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2112:     if (tok[0] == '.' && tok[1] == '.') {",
          "2113:      efree(path);",
          "2115:      return estrndup(\"/\", 1);",
          "2116:     }",
          "2117:   }",
          "2118:   return path;",
          "2119:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2118:      efree(newpath);",
          "2122:   efree(newpath);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2164:  efree(path);",
          "2167: }",
          "",
          "[Removed Lines]",
          "2166:  return estrndup(newpath, newpath_len);",
          "",
          "[Added Lines]",
          "2171:  newpath[newpath_len] = '\\0';",
          "2172:  return erealloc(newpath, newpath_len + 1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3e88d610e54dac75a374af9e8501f02da67e4466",
      "candidate_info": {
        "commit_hash": "3e88d610e54dac75a374af9e8501f02da67e4466",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/3e88d610e54dac75a374af9e8501f02da67e4466",
        "files": [
          "ext/phar/phar.c"
        ],
        "message": "Fix bug #69923 - Buffer overflow and stack smashing error in phar_fix_filepath",
        "before_after_code_files": [
          "ext/phar/phar.c||ext/phar/phar.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "ext/phar/phar.c||ext/phar/phar.c"
          ],
          "candidate": [
            "ext/phar/phar.c||ext/phar/phar.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/phar/phar.c||ext/phar/phar.c": [
          "File: ext/phar/phar.c -> ext/phar/phar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2144: {",
          "2146:  int newpath_len;",
          "2147:  char *ptr;",
          "2148:  char *tok;",
          "",
          "[Removed Lines]",
          "2145:  char newpath[MAXPATHLEN];",
          "",
          "[Added Lines]",
          "2145:  char *newpath;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2151:  if (PHAR_G(cwd_len) && use_cwd && path_length > 2 && path[0] == '.' && path[1] == '/') {",
          "2152:   newpath_len = PHAR_G(cwd_len);",
          "2153:   memcpy(newpath, PHAR_G(cwd), newpath_len);",
          "2154:  } else {",
          "2155:   newpath[0] = '/';",
          "2156:   newpath_len = 1;",
          "2157:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2153:   newpath = emalloc(strlen(path) + newpath_len + 1);",
          "2156:   newpath = emalloc(strlen(path) + 2);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2174:     if (*tok == '.') {",
          "2175:      efree(path);",
          "2177:      return estrndup(\"/\", 1);",
          "2178:     }",
          "2179:     break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2179:      efree(newpath);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2181:     if (tok[0] == '.' && tok[1] == '.') {",
          "2182:      efree(path);",
          "2184:      return estrndup(\"/\", 1);",
          "2185:     }",
          "2186:   }",
          "2187:   return path;",
          "2188:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2187:      efree(newpath);",
          "2191:   efree(newpath);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2233:  efree(path);",
          "2236: }",
          "",
          "[Removed Lines]",
          "2235:  return estrndup(newpath, newpath_len);",
          "",
          "[Added Lines]",
          "2240:  newpath[newpath_len] = '\\0';",
          "2241:  return erealloc(newpath, newpath_len + 1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d1370e201609b0a9010a83bed9071c2a39741612",
      "candidate_info": {
        "commit_hash": "d1370e201609b0a9010a83bed9071c2a39741612",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/d1370e201609b0a9010a83bed9071c2a39741612",
        "files": [
          "ext/mysqlnd/mysqlnd.c",
          "ext/phar/phar.c",
          "ext/phar/phar_object.c",
          "ext/phar/tests/bug69958.phpt",
          "ext/phar/tests/bug69958.tar"
        ],
        "message": "Merge branch 'PHP-5.5' into PHP-5.6\n\n* PHP-5.5:\n  Better fix for bug #69958\n  update news\n  Fix bug #69669 (mysqlnd is vulnerable to BACKRONYM)\n  Fix bug #69923 - Buffer overflow and stack smashing error in phar_fix_filepath\n  Fix bug #69958 - Segfault in Phar::convertToData on invalid file\n  Better fix for bug #69958\n  Better fix for bug #69958\n  update news\n  Fix bug #69669 (mysqlnd is vulnerable to BACKRONYM)\n  Fix bug #69923 - Buffer overflow and stack smashing error in phar_fix_filepath\n  Fix bug #69958 - Segfault in Phar::convertToData on invalid file\n\nConflicts:\n\text/phar/phar_object.c",
        "before_after_code_files": [
          "ext/mysqlnd/mysqlnd.c||ext/mysqlnd/mysqlnd.c",
          "ext/phar/phar.c||ext/phar/phar.c",
          "ext/phar/phar_object.c||ext/phar/phar_object.c",
          "ext/phar/tests/bug69958.phpt||ext/phar/tests/bug69958.phpt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "ext/phar/phar.c||ext/phar/phar.c"
          ],
          "candidate": [
            "ext/phar/phar.c||ext/phar/phar.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/mysqlnd/mysqlnd.c||ext/mysqlnd/mysqlnd.c": [
          "File: ext/mysqlnd/mysqlnd.c -> ext/mysqlnd/mysqlnd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "490:  }",
          "492: #ifdef MYSQLND_SSL_SUPPORTED",
          "507:   }",
          "508:  }",
          "509: #endif",
          "510:  ret = PASS;",
          "511: end:",
          "512:  PACKET_FREE(auth_packet);",
          "513:  DBG_RETURN(ret);",
          "514: }",
          "",
          "[Removed Lines]",
          "493:  if ((greet_packet->server_capabilities & CLIENT_SSL) && (mysql_flags & CLIENT_SSL)) {",
          "494:   zend_bool verify = mysql_flags & CLIENT_SSL_VERIFY_SERVER_CERT? TRUE:FALSE;",
          "495:   DBG_INF(\"Switching to SSL\");",
          "496:   if (!PACKET_WRITE(auth_packet, conn)) {",
          "497:    CONN_SET_STATE(conn, CONN_QUIT_SENT);",
          "498:    conn->m->send_close(conn TSRMLS_CC);",
          "499:    SET_CLIENT_ERROR(*conn->error_info, CR_SERVER_GONE_ERROR, UNKNOWN_SQLSTATE, mysqlnd_server_gone);",
          "500:    goto end;",
          "501:   }",
          "503:   conn->net->data->m.set_client_option(conn->net, MYSQL_OPT_SSL_VERIFY_SERVER_CERT, (const char *) &verify TSRMLS_CC);",
          "505:   if (FAIL == conn->net->data->m.enable_ssl(conn->net TSRMLS_CC)) {",
          "506:    goto end;",
          "",
          "[Added Lines]",
          "493:  if (mysql_flags & CLIENT_SSL) {",
          "494:   zend_bool server_has_ssl = (greet_packet->server_capabilities & CLIENT_SSL)? TRUE:FALSE;",
          "495:   if (server_has_ssl == FALSE) {",
          "496:    goto close_conn;",
          "497:   } else {",
          "498:    zend_bool verify = mysql_flags & CLIENT_SSL_VERIFY_SERVER_CERT? TRUE:FALSE;",
          "499:    DBG_INF(\"Switching to SSL\");",
          "500:    if (!PACKET_WRITE(auth_packet, conn)) {",
          "501:     goto close_conn;",
          "502:    }",
          "504:    conn->net->data->m.set_client_option(conn->net, MYSQL_OPT_SSL_VERIFY_SERVER_CERT, (const char *) &verify TSRMLS_CC);",
          "506:    if (FAIL == conn->net->data->m.enable_ssl(conn->net TSRMLS_CC)) {",
          "507:     goto end;",
          "508:    }",
          "511: #else",
          "512:  auth_packet->client_flags &= ~CLIENT_SSL;",
          "513:  if (!PACKET_WRITE(auth_packet, conn)) {",
          "514:   goto close_conn;",
          "515:  }",
          "522: close_conn:",
          "523:  CONN_SET_STATE(conn, CONN_QUIT_SENT);",
          "524:  conn->m->send_close(conn TSRMLS_CC);",
          "525:  SET_CLIENT_ERROR(*conn->error_info, CR_SERVER_GONE_ERROR, UNKNOWN_SQLSTATE, mysqlnd_server_gone);",
          "526:  PACKET_FREE(auth_packet);",
          "527:  DBG_RETURN(ret);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1593: mysqlnd_old_escape_string(char * newstr, const char * escapestr, size_t escapestr_len TSRMLS_DC)",
          "1594: {",
          "1595:  DBG_ENTER(\"mysqlnd_old_escape_string\");",
          "",
          "[Removed Lines]",
          "1592: PHPAPI ulong",
          "",
          "[Added Lines]",
          "1606: PHPAPI ulong",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1878:   conn->m->local_tx_end(conn, this_func, ret TSRMLS_CC);",
          "1879:  }",
          "1881: }",
          "",
          "[Removed Lines]",
          "1880:  DBG_RETURN(ret);",
          "",
          "[Added Lines]",
          "1894:  DBG_RETURN(ret);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2458:   default:",
          "2459:    ret = FAIL;",
          "2460:  }",
          "2462:  DBG_RETURN(ret);",
          "2463: oom:",
          "2464:  SET_OOM_ERROR(*conn->error_info);",
          "2466: end:",
          "2467:  DBG_RETURN(FAIL);",
          "2468: }",
          "",
          "[Removed Lines]",
          "2461:  conn->m->local_tx_end(conn, this_func, ret TSRMLS_CC);",
          "2465:  conn->m->local_tx_end(conn, this_func, FAIL TSRMLS_CC);",
          "",
          "[Added Lines]",
          "2475:  conn->m->local_tx_end(conn, this_func, ret TSRMLS_CC);",
          "2479:  conn->m->local_tx_end(conn, this_func, FAIL TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2539:  DBG_RETURN(ret);",
          "2540: oom:",
          "2541:  SET_OOM_ERROR(*conn->error_info);",
          "2543: end:",
          "2544:  DBG_RETURN(FAIL);",
          "2545: }",
          "",
          "[Removed Lines]",
          "2542:  conn->m->local_tx_end(conn, this_func, FAIL TSRMLS_CC);",
          "",
          "[Added Lines]",
          "2556:  conn->m->local_tx_end(conn, this_func, FAIL TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2580:    conn->current_result = NULL;",
          "2581:   } while (0);",
          "2584:  }",
          "2586:  DBG_RETURN(result);",
          "",
          "[Removed Lines]",
          "2583:   conn->m->local_tx_end(conn, this_func, result == NULL? FAIL:PASS TSRMLS_CC);",
          "",
          "[Added Lines]",
          "2597:   conn->m->local_tx_end(conn, this_func, result == NULL? FAIL:PASS TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2638:    conn->current_result = NULL;",
          "2639:   } while (0);",
          "2642:  }",
          "2643:  DBG_RETURN(result);",
          "2644: }",
          "",
          "[Removed Lines]",
          "2641:   conn->m->local_tx_end(conn, this_func, result == NULL? FAIL:PASS TSRMLS_CC);",
          "",
          "[Added Lines]",
          "2655:   conn->m->local_tx_end(conn, this_func, result == NULL? FAIL:PASS TSRMLS_CC);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2668:  if (PASS == conn->m->local_tx_start(conn, this_func TSRMLS_CC)) {",
          "2669:   ret = conn->m->query(conn, (mode) ? \"SET AUTOCOMMIT=1\":\"SET AUTOCOMMIT=0\", sizeof(\"SET AUTOCOMMIT=1\") - 1 TSRMLS_CC);",
          "2671:  }",
          "2673:  DBG_RETURN(ret);",
          "",
          "[Removed Lines]",
          "2670:   conn->m->local_tx_end(conn, this_func, ret TSRMLS_CC);",
          "",
          "[Added Lines]",
          "2684:   conn->m->local_tx_end(conn, this_func, ret TSRMLS_CC);",
          "",
          "---------------"
        ],
        "ext/phar/phar.c||ext/phar/phar.c": [
          "File: ext/phar/phar.c -> ext/phar/phar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2121: {",
          "2123:  int newpath_len;",
          "2124:  char *ptr;",
          "2125:  char *tok;",
          "",
          "[Removed Lines]",
          "2122:  char newpath[MAXPATHLEN];",
          "",
          "[Added Lines]",
          "2122:  char *newpath;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2128:  if (PHAR_G(cwd_len) && use_cwd && path_length > 2 && path[0] == '.' && path[1] == '/') {",
          "2129:   newpath_len = PHAR_G(cwd_len);",
          "2130:   memcpy(newpath, PHAR_G(cwd), newpath_len);",
          "2131:  } else {",
          "2132:   newpath[0] = '/';",
          "2133:   newpath_len = 1;",
          "2134:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2130:   newpath = emalloc(strlen(path) + newpath_len + 1);",
          "2133:   newpath = emalloc(strlen(path) + 2);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2151:     if (*tok == '.') {",
          "2152:      efree(path);",
          "2154:      return estrndup(\"/\", 1);",
          "2155:     }",
          "2156:     break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2156:      efree(newpath);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2158:     if (tok[0] == '.' && tok[1] == '.') {",
          "2159:      efree(path);",
          "2161:      return estrndup(\"/\", 1);",
          "2162:     }",
          "2163:   }",
          "2164:   return path;",
          "2165:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2164:      efree(newpath);",
          "2168:   efree(newpath);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2210:  efree(path);",
          "2213: }",
          "",
          "[Removed Lines]",
          "2212:  return estrndup(newpath, newpath_len);",
          "",
          "[Added Lines]",
          "2217:  newpath[newpath_len] = '\\0';",
          "2218:  return erealloc(newpath, newpath_len + 1);",
          "",
          "---------------"
        ],
        "ext/phar/phar_object.c||ext/phar/phar_object.c": [
          "File: ext/phar/phar_object.c -> ext/phar/phar_object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1252:  INIT_PZVAL(&arg2);",
          "1253:  ZVAL_LONG(&arg2, flags);",
          "1256:   &spl_ce_RecursiveDirectoryIterator->constructor, \"__construct\", NULL, &arg1, &arg2);",
          "1258:  if (!phar_data->is_persistent) {",
          "",
          "[Removed Lines]",
          "1255:  zend_call_method_with_2_params(&zobj, Z_OBJCE_P(zobj),",
          "",
          "[Added Lines]",
          "1255:  zend_call_method_with_2_params(&zobj, Z_OBJCE_P(zobj),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1773:  INIT_PZVAL(&arg2);",
          "1774:  ZVAL_LONG(&arg2, SPL_FILE_DIR_SKIPDOTS|SPL_FILE_DIR_UNIXPATHS);",
          "1777:    &spl_ce_RecursiveDirectoryIterator->constructor, \"__construct\", NULL, &arg, &arg2);",
          "1779:  if (EG(exception)) {",
          "",
          "[Removed Lines]",
          "1776:  zend_call_method_with_2_params(&iter, spl_ce_RecursiveDirectoryIterator,",
          "",
          "[Added Lines]",
          "1776:  zend_call_method_with_2_params(&iter, spl_ce_RecursiveDirectoryIterator,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1790:   RETURN_FALSE;",
          "1791:  }",
          "1794:    &spl_ce_RecursiveIteratorIterator->constructor, \"__construct\", NULL, iter);",
          "1796:  if (EG(exception)) {",
          "",
          "[Removed Lines]",
          "1793:  zend_call_method_with_1_params(&iteriter, spl_ce_RecursiveIteratorIterator,",
          "",
          "[Added Lines]",
          "1793:  zend_call_method_with_1_params(&iteriter, spl_ce_RecursiveIteratorIterator,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1815:   INIT_PZVAL(&arg2);",
          "1816:   ZVAL_STRINGL(&arg2, regex, regex_len, 0);",
          "1819:    &spl_ce_RegexIterator->constructor, \"__construct\", NULL, iteriter, &arg2);",
          "1820:  }",
          "",
          "[Removed Lines]",
          "1818:   zend_call_method_with_2_params(&regexiter, spl_ce_RegexIterator,",
          "",
          "[Added Lines]",
          "1818:   zend_call_method_with_2_params(&regexiter, spl_ce_RegexIterator,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2019: }",
          "2023: {",
          "2024:  const char *oldname = NULL;",
          "2025:  char *oldpath = NULL;",
          "2026:  char *basename = NULL, *basepath = NULL;",
          "2027:  char *newname = NULL, *newpath = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2025:  phar_archive_data *phar = *sphar;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2335:   phar_add_virtual_dirs(phar, newentry.filename, newentry.filename_len TSRMLS_CC);",
          "2336:  }",
          "2339:   return ret;",
          "2340:  } else {",
          "2347:   return NULL;",
          "2348:  }",
          "2349: }",
          "",
          "[Removed Lines]",
          "2338:  if ((ret = phar_rename_archive(phar, ext, 0 TSRMLS_CC))) {",
          "2341:   zend_hash_destroy(&(phar->manifest));",
          "2342:   zend_hash_destroy(&(phar->mounted_dirs));",
          "2343:   zend_hash_destroy(&(phar->virtual_dirs));",
          "2344:   php_stream_close(phar->fp);",
          "2345:   efree(phar->fname);",
          "2346:   efree(phar);",
          "",
          "[Added Lines]",
          "2341:  if ((ret = phar_rename_archive(&phar, ext, 0 TSRMLS_CC))) {",
          "2344:   if(phar != NULL) {",
          "2345:    zend_hash_destroy(&(phar->manifest));",
          "2346:    zend_hash_destroy(&(phar->mounted_dirs));",
          "2347:    zend_hash_destroy(&(phar->virtual_dirs));",
          "2348:    if (phar->fp) {",
          "2349:     php_stream_close(phar->fp);",
          "2350:    }",
          "2351:    efree(phar->fname);",
          "2352:    efree(phar);",
          "2353:   }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4452:  INIT_PZVAL(&arg1);",
          "4453:  ZVAL_STRINGL(&arg1, fname, fname_len, 0);",
          "4456:   &spl_ce_SplFileInfo->constructor, \"__construct\", NULL, &arg1);",
          "4457: }",
          "",
          "[Removed Lines]",
          "4455:  zend_call_method_with_1_params(&zobj, Z_OBJCE_P(zobj),",
          "",
          "[Added Lines]",
          "4462:  zend_call_method_with_1_params(&zobj, Z_OBJCE_P(zobj),",
          "",
          "---------------"
        ],
        "ext/phar/tests/bug69958.phpt||ext/phar/tests/bug69958.phpt": [
          "File: ext/phar/tests/bug69958.phpt -> ext/phar/tests/bug69958.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Phar: bug #69958: Segfault in Phar::convertToData on invalid file",
          "3: --XFAIL--",
          "4: Still has memory leaks, see https://bugs.php.net/bug.php?id=70005",
          "5: --SKIPIF--",
          "6: <?php if (!extension_loaded(\"phar\")) die(\"skip\"); ?>",
          "7: --FILE--",
          "8: <?php",
          "9: $tarphar = new PharData(__DIR__.'/bug69958.tar');",
          "10: $phar = $tarphar->convertToData(Phar::TAR);",
          "11: --EXPECTF--",
          "12: Fatal error: Uncaught exception 'BadMethodCallException' with message 'phar \"%s/bug69958.tar\" exists and must be unlinked prior to conversion' in %s/bug69958.php:%d",
          "13: Stack trace:",
          "14: #0 %s/bug69958.php(%d): PharData->convertToData(%d)",
          "15: #1 {main}",
          "16:   thrown in %s/bug69958.php on line %d",
          "",
          "---------------"
        ]
      }
    }
  ]
}