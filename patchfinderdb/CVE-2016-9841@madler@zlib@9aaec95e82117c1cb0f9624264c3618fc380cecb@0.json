{
  "cve_id": "CVE-2016-9841",
  "cve_desc": "inffast.c in zlib 1.2.8 might allow context-dependent attackers to have unspecified impact by leveraging improper pointer arithmetic.",
  "repo": "madler/zlib",
  "patch_hash": "9aaec95e82117c1cb0f9624264c3618fc380cecb",
  "patch_info": {
    "commit_hash": "9aaec95e82117c1cb0f9624264c3618fc380cecb",
    "repo": "madler/zlib",
    "commit_url": "https://github.com/madler/zlib/commit/9aaec95e82117c1cb0f9624264c3618fc380cecb",
    "files": [
      "inffast.c"
    ],
    "message": "Use post-increment only in inffast.c.\n\nAn old inffast.c optimization turns out to not be optimal anymore\nwith modern compilers, and furthermore was not compliant with the\nC standard, for which decrementing a pointer before its allocated\nmemory is undefined. Per the recommendation of a security audit of\nthe zlib code by Trail of Bits and TrustInSoft, in support of the\nMozilla Foundation, this \"optimization\" was removed, in order to\navoid the possibility of undefined behavior.",
    "before_after_code_files": [
      "inffast.c||inffast.c"
    ]
  },
  "patch_diff": {
    "inffast.c||inffast.c": [
      "File: inffast.c -> inffast.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "11: #ifndef ASMINF",
      "33:    Decode literal, length, and distance codes and write out the resulting",
      "34:    literal and match bytes until either not enough input or output is",
      "",
      "[Removed Lines]",
      "14:    Based on testing to date,",
      "15:    Pre-increment preferred for:",
      "16:    - PowerPC G3 (Adler)",
      "17:    - MIPS R5000 (Randers-Pehrson)",
      "18:    Post-increment preferred for:",
      "19:    - none",
      "20:    No measurable difference:",
      "21:    - Pentium III (Anderson)",
      "22:    - M68060 (Nikl)",
      "24: #ifdef POSTINC",
      "25: #  define OFF 0",
      "26: #  define PUP(a) *(a)++",
      "27: #else",
      "28: #  define OFF 1",
      "29: #  define PUP(a) *++(a)",
      "30: #endif",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "98:     state = (struct inflate_state FAR *)strm->state;",
      "100:     last = in + (strm->avail_in - 5);",
      "102:     beg = out - (start - strm->avail_out);",
      "103:     end = out + (strm->avail_out - 257);",
      "104: #ifdef INFLATE_STRICT",
      "",
      "[Removed Lines]",
      "99:     in = strm->next_in - OFF;",
      "101:     out = strm->next_out - OFF;",
      "",
      "[Added Lines]",
      "80:     in = strm->next_in;",
      "82:     out = strm->next_out;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "120:     do {",
      "121:         if (bits < 15) {",
      "123:             bits += 8;",
      "125:             bits += 8;",
      "126:         }",
      "127:         here = lcode[hold & lmask];",
      "",
      "[Removed Lines]",
      "122:             hold += (unsigned long)(PUP(in)) << bits;",
      "124:             hold += (unsigned long)(PUP(in)) << bits;",
      "",
      "[Added Lines]",
      "103:             hold += (unsigned long)(*in++) << bits;",
      "105:             hold += (unsigned long)(*in++) << bits;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "134:             Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?",
      "135:                     \"inflate:         literal '%c'\\n\" :",
      "136:                     \"inflate:         literal 0x%02x\\n\", here.val));",
      "138:         }",
      "140:             len = (unsigned)(here.val);",
      "142:             if (op) {",
      "143:                 if (bits < op) {",
      "145:                     bits += 8;",
      "146:                 }",
      "147:                 len += (unsigned)hold & ((1U << op) - 1);",
      "",
      "[Removed Lines]",
      "137:             PUP(out) = (unsigned char)(here.val);",
      "144:                     hold += (unsigned long)(PUP(in)) << bits;",
      "",
      "[Added Lines]",
      "125:                     hold += (unsigned long)(*in++) << bits;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "150:             }",
      "151:             Tracevv((stderr, \"inflate:         length %u\\n\", len));",
      "152:             if (bits < 15) {",
      "154:                 bits += 8;",
      "156:                 bits += 8;",
      "157:             }",
      "158:             here = dcode[hold & dmask];",
      "",
      "[Removed Lines]",
      "153:                 hold += (unsigned long)(PUP(in)) << bits;",
      "155:                 hold += (unsigned long)(PUP(in)) << bits;",
      "",
      "[Added Lines]",
      "134:                 hold += (unsigned long)(*in++) << bits;",
      "136:                 hold += (unsigned long)(*in++) << bits;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "165:                 dist = (unsigned)(here.val);",
      "167:                 if (bits < op) {",
      "169:                     bits += 8;",
      "170:                     if (bits < op) {",
      "172:                         bits += 8;",
      "173:                     }",
      "174:                 }",
      "",
      "[Removed Lines]",
      "168:                     hold += (unsigned long)(PUP(in)) << bits;",
      "171:                         hold += (unsigned long)(PUP(in)) << bits;",
      "",
      "[Added Lines]",
      "149:                     hold += (unsigned long)(*in++) << bits;",
      "152:                         hold += (unsigned long)(*in++) << bits;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "196: #ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR",
      "197:                         if (len <= op - whave) {",
      "198:                             do {",
      "200:                             } while (--len);",
      "201:                             continue;",
      "202:                         }",
      "203:                         len -= op - whave;",
      "204:                         do {",
      "206:                         } while (--op > whave);",
      "207:                         if (op == 0) {",
      "208:                             from = out - dist;",
      "209:                             do {",
      "211:                             } while (--len);",
      "212:                             continue;",
      "213:                         }",
      "214: #endif",
      "215:                     }",
      "218:                         from += wsize - op;",
      "220:                             len -= op;",
      "221:                             do {",
      "223:                             } while (--op);",
      "225:                         }",
      "",
      "[Removed Lines]",
      "199:                                 PUP(out) = 0;",
      "205:                             PUP(out) = 0;",
      "210:                                 PUP(out) = PUP(from);",
      "216:                     from = window - OFF;",
      "222:                                 PUP(out) = PUP(from);",
      "",
      "[Added Lines]",
      "197:                     from = window;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "231:                             len -= op;",
      "232:                             do {",
      "234:                             } while (--op);",
      "237:                                 op = wnext;",
      "238:                                 len -= op;",
      "239:                                 do {",
      "241:                                 } while (--op);",
      "243:                             }",
      "",
      "[Removed Lines]",
      "233:                                 PUP(out) = PUP(from);",
      "235:                             from = window - OFF;",
      "240:                                     PUP(out) = PUP(from);",
      "",
      "[Added Lines]",
      "216:                             from = window;",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "249:                             len -= op;",
      "250:                             do {",
      "252:                             } while (--op);",
      "254:                         }",
      "255:                     }",
      "256:                     while (len > 2) {",
      "260:                         len -= 3;",
      "261:                     }",
      "262:                     if (len) {",
      "264:                         if (len > 1)",
      "266:                     }",
      "267:                 }",
      "268:                 else {",
      "274:                         len -= 3;",
      "275:                     } while (len > 2);",
      "276:                     if (len) {",
      "278:                         if (len > 1)",
      "280:                     }",
      "281:                 }",
      "282:             }",
      "",
      "[Removed Lines]",
      "251:                                 PUP(out) = PUP(from);",
      "257:                         PUP(out) = PUP(from);",
      "258:                         PUP(out) = PUP(from);",
      "259:                         PUP(out) = PUP(from);",
      "263:                         PUP(out) = PUP(from);",
      "265:                             PUP(out) = PUP(from);",
      "271:                         PUP(out) = PUP(from);",
      "272:                         PUP(out) = PUP(from);",
      "273:                         PUP(out) = PUP(from);",
      "277:                         PUP(out) = PUP(from);",
      "279:                             PUP(out) = PUP(from);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "313:     hold &= (1U << bits) - 1;",
      "318:     strm->avail_in = (unsigned)(in < last ? 5 + (last - in) : 5 - (in - last));",
      "319:     strm->avail_out = (unsigned)(out < end ?",
      "320:                                  257 + (end - out) : 257 - (out - end));",
      "",
      "[Removed Lines]",
      "316:     strm->next_in = in + OFF;",
      "317:     strm->next_out = out + OFF;",
      "",
      "[Added Lines]",
      "297:     strm->next_in = in;",
      "298:     strm->next_out = out;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "60a5ecc62b18d1e2391993b1fcfc10e100720642",
      "candidate_info": {
        "commit_hash": "60a5ecc62b18d1e2391993b1fcfc10e100720642",
        "repo": "madler/zlib",
        "commit_url": "https://github.com/madler/zlib/commit/60a5ecc62b18d1e2391993b1fcfc10e100720642",
        "files": [
          "inffast.c"
        ],
        "message": "Small speedup to inflate [psumbera].\n\nSeeing a few percent speedup by using a pointer instead of an\nassigned structure. This seems to help the compiler to optimize\nbetter.",
        "before_after_code_files": [
          "inffast.c||inffast.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "inffast.c||inffast.c"
          ],
          "candidate": [
            "inffast.c||inffast.c"
          ]
        }
      },
      "candidate_diff": {
        "inffast.c||inffast.c": [
          "File: inffast.c -> inffast.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:             hold += (unsigned long)(*in++) << bits;",
          "108:             bits += 8;",
          "109:         }",
          "111:       dolen:",
          "113:         hold >>= op;",
          "114:         bits -= op;",
          "118:                     \"inflate:         literal '%c'\\n\" :",
          "121:         }",
          "125:             if (op) {",
          "126:                 if (bits < op) {",
          "",
          "[Removed Lines]",
          "110:         here = lcode[hold & lmask];",
          "112:         op = (unsigned)(here.bits);",
          "115:         op = (unsigned)(here.op);",
          "117:             Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?",
          "119:                     \"inflate:         literal 0x%02x\\n\", here.val));",
          "123:             len = (unsigned)(here.val);",
          "",
          "[Added Lines]",
          "110:         here = lcode + (hold & lmask);",
          "112:         op = (unsigned)(here->bits);",
          "115:         op = (unsigned)(here->op);",
          "117:             Tracevv((stderr, here->val >= 0x20 && here->val < 0x7f ?",
          "119:                     \"inflate:         literal 0x%02x\\n\", here->val));",
          "123:             len = (unsigned)(here->val);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138:                 hold += (unsigned long)(*in++) << bits;",
          "139:                 bits += 8;",
          "140:             }",
          "142:           dodist:",
          "144:             hold >>= op;",
          "145:             bits -= op;",
          "150:                 if (bits < op) {",
          "151:                     hold += (unsigned long)(*in++) << bits;",
          "",
          "[Removed Lines]",
          "141:             here = dcode[hold & dmask];",
          "143:             op = (unsigned)(here.bits);",
          "146:             op = (unsigned)(here.op);",
          "148:                 dist = (unsigned)(here.val);",
          "",
          "[Added Lines]",
          "141:             here = dcode + (hold & dmask);",
          "143:             op = (unsigned)(here->bits);",
          "146:             op = (unsigned)(here->op);",
          "148:                 dist = (unsigned)(here->val);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "264:                 }",
          "265:             }",
          "268:                 goto dodist;",
          "269:             }",
          "270:             else {",
          "",
          "[Removed Lines]",
          "267:                 here = dcode[here.val + (hold & ((1U << op) - 1))];",
          "",
          "[Added Lines]",
          "267:                 here = dcode + here->val + (hold & ((1U << op) - 1));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "274:             }",
          "275:         }",
          "278:             goto dolen;",
          "279:         }",
          "",
          "[Removed Lines]",
          "277:             here = lcode[here.val + (hold & ((1U << op) - 1))];",
          "",
          "[Added Lines]",
          "277:             here = lcode + here->val + (hold & ((1U << op) - 1));",
          "",
          "---------------"
        ]
      }
    }
  ]
}