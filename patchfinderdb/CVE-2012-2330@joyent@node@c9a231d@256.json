{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ef032cbe85b46584304c665b539b4f7561c4c26c",
      "candidate_info": {
        "commit_hash": "ef032cbe85b46584304c665b539b4f7561c4c26c",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/ef032cbe85b46584304c665b539b4f7561c4c26c",
        "files": [
          "src/node.cc"
        ],
        "message": "Windows: support non-ansi command line arguments",
        "before_after_code_files": [
          "src/node.cc||src/node.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2045:   process->Set(String::NewSymbol(\"platform\"), String::New(PLATFORM));",
          "2048:   Local<Array> arguments = Array::New(argc - option_end_index + 1);",
          "2049:   arguments->Set(Integer::New(0), String::New(argv[0]));",
          "2050:   for (j = 1, i = option_end_index; i < argc; j++, i++) {",
          "2051:     Local<String> arg = String::New(argv[i]);",
          "2052:     arguments->Set(Integer::New(j), arg);",
          "2053:   }",
          "2055:   process->Set(String::NewSymbol(\"argv\"), arguments);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2048: #ifdef _WIN32",
          "2050:   WCHAR* command_line = GetCommandLineW();",
          "2051:   if (command_line == NULL) {",
          "2052:     winapi_perror(\"GetCommandLineW\");",
          "2053:     exit(1);",
          "2054:   }",
          "2056:   int wargc = 0;",
          "2057:   WCHAR** wargv = CommandLineToArgvW(command_line, &wargc);",
          "2058:   if (wargv == NULL || wargc <= 0) {",
          "2059:     winapi_perror(\"CommandLineToArgvW\");",
          "2060:     exit(1);",
          "2061:   }",
          "2063:   assert(wargc == argc);",
          "2065:   Local<Array> arguments = Array::New(wargc - option_end_index + 1);",
          "2066:   arguments->Set(Integer::New(0), String::New(reinterpret_cast<uint16_t*>(wargv[0])));",
          "2067:   for (j = 1, i = option_end_index; i < wargc; j++, i++) {",
          "2068:     Local<String> arg = String::New(reinterpret_cast<uint16_t*>(wargv[i]));",
          "2069:     arguments->Set(Integer::New(j), arg);",
          "2070:   }",
          "2072:   LocalFree(wargv);",
          "2073: #else",
          "2081: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "50e00de92a7563f39ff50f9a53c7e2ed15e556c6",
      "candidate_info": {
        "commit_hash": "50e00de92a7563f39ff50f9a53c7e2ed15e556c6",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/50e00de92a7563f39ff50f9a53c7e2ed15e556c6",
        "files": [
          "Makefile",
          "tools/install.py",
          "tools/installer.js"
        ],
        "message": "installer: fix cross-compile installs\n\nThe old installer was a JS script, which didn't work if node had been\ncross-compiled for another architecture. Replace it with a python script.\n\nFixes #3807.",
        "before_after_code_files": [
          "tools/install.py||tools/install.py",
          "tools/installer.js||tools/installer.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/install.py||tools/install.py": [
          "File: tools/install.py -> tools/install.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/usr/bin/env python",
          "3: import errno",
          "4: import json",
          "5: import os",
          "6: import re",
          "7: import shutil",
          "8: import sys",
          "10: # set at init time",
          "11: dst_dir = None",
          "12: node_prefix = None # dst_dir without DESTDIR prefix",
          "13: target_defaults = None",
          "14: variables = None",
          "16: def abspath(*args):",
          "17:   path = os.path.join(*args)",
          "18:   return os.path.abspath(path)",
          "20: def load_config():",
          "21:   s = open('config.gypi').read()",
          "22:   s = re.sub(r'#.*?\\n', '', s) # strip comments",
          "23:   s = re.sub(r'\\'', '\"', s) # convert quotes",
          "24:   return json.loads(s)",
          "26: def try_unlink(path):",
          "27:   try:",
          "28:     os.unlink(path)",
          "29:   except OSError, e:",
          "30:     if e.errno != errno.ENOENT: raise",
          "32: def try_symlink(source_path, link_path):",
          "33:   print 'symlinking %s -> %s' % (source_path, link_path)",
          "34:   try_unlink(link_path)",
          "35:   os.symlink(source_path, link_path)",
          "37: def try_mkdir_r(path):",
          "38:   try:",
          "39:     os.makedirs(path)",
          "40:   except OSError, e:",
          "41:     if e.errno != errno.EEXIST: raise",
          "43: def try_rmdir_r(path):",
          "44:   path = abspath(path)",
          "45:   while path.startswith(dst_dir):",
          "46:     try:",
          "47:       os.rmdir(path)",
          "48:     except OSError, e:",
          "49:       if e.errno == errno.ENOTEMPTY: return",
          "50:       if e.errno == errno.ENOENT: return",
          "51:       raise",
          "52:     path = abspath(path, '..')",
          "54: def mkpaths(path, dst):",
          "55:   if dst.endswith('/'):",
          "56:     target_path = abspath(dst_dir, dst, os.path.basename(path))",
          "57:   else:",
          "58:     target_path = abspath(dst_dir, dst)",
          "59:   return path, target_path",
          "61: def try_copy(path, dst):",
          "62:   source_path, target_path = mkpaths(path, dst)",
          "63:   print 'installing %s' % target_path",
          "64:   try_mkdir_r(os.path.dirname(target_path))",
          "65:   return shutil.copy2(source_path, target_path)",
          "67: def try_remove(path, dst):",
          "68:   source_path, target_path = mkpaths(path, dst)",
          "69:   print 'removing %s' % target_path",
          "70:   try_unlink(target_path)",
          "71:   try_rmdir_r(os.path.dirname(target_path))",
          "73: def install(paths, dst): map(lambda path: try_copy(path, dst), paths)",
          "74: def uninstall(paths, dst): map(lambda path: try_remove(path, dst), paths)",
          "76: def waf_files(action):",
          "77:   action(['tools/node-waf'], 'bin/node-waf')",
          "78:   action(['tools/wafadmin/ansiterm.py',",
          "79:           'tools/wafadmin/Build.py',",
          "80:           'tools/wafadmin/Configure.py',",
          "81:           'tools/wafadmin/Constants.py',",
          "82:           'tools/wafadmin/Environment.py',",
          "83:           'tools/wafadmin/__init__.py',",
          "84:           'tools/wafadmin/Logs.py',",
          "85:           'tools/wafadmin/Node.py',",
          "86:           'tools/wafadmin/Options.py',",
          "87:           'tools/wafadmin/pproc.py',",
          "88:           'tools/wafadmin/py3kfixes.py',",
          "89:           'tools/wafadmin/Runner.py',",
          "90:           'tools/wafadmin/Scripting.py',",
          "91:           'tools/wafadmin/TaskGen.py',",
          "92:           'tools/wafadmin/Task.py',",
          "93:           'tools/wafadmin/Tools/ar.py',",
          "94:           'tools/wafadmin/Tools/cc.py',",
          "95:           'tools/wafadmin/Tools/ccroot.py',",
          "96:           'tools/wafadmin/Tools/compiler_cc.py',",
          "97:           'tools/wafadmin/Tools/compiler_cxx.py',",
          "98:           'tools/wafadmin/Tools/compiler_d.py',",
          "99:           'tools/wafadmin/Tools/config_c.py',",
          "100:           'tools/wafadmin/Tools/cxx.py',",
          "101:           'tools/wafadmin/Tools/dmd.py',",
          "102:           'tools/wafadmin/Tools/d.py',",
          "103:           'tools/wafadmin/Tools/gas.py',",
          "104:           'tools/wafadmin/Tools/gcc.py',",
          "105:           'tools/wafadmin/Tools/gdc.py',",
          "106:           'tools/wafadmin/Tools/gnu_dirs.py',",
          "107:           'tools/wafadmin/Tools/gob2.py',",
          "108:           'tools/wafadmin/Tools/gxx.py',",
          "109:           'tools/wafadmin/Tools/icc.py',",
          "110:           'tools/wafadmin/Tools/icpc.py',",
          "111:           'tools/wafadmin/Tools/__init__.py',",
          "112:           'tools/wafadmin/Tools/intltool.py',",
          "113:           'tools/wafadmin/Tools/libtool.py',",
          "114:           'tools/wafadmin/Tools/misc.py',",
          "115:           'tools/wafadmin/Tools/nasm.py',",
          "116:           'tools/wafadmin/Tools/node_addon.py',",
          "117:           'tools/wafadmin/Tools/osx.py',",
          "118:           'tools/wafadmin/Tools/preproc.py',",
          "119:           'tools/wafadmin/Tools/python.py',",
          "120:           'tools/wafadmin/Tools/suncc.py',",
          "121:           'tools/wafadmin/Tools/suncxx.py',",
          "122:           'tools/wafadmin/Tools/unittestw.py',",
          "123:           'tools/wafadmin/Tools/winres.py',",
          "124:           'tools/wafadmin/Tools/xlc.py',",
          "125:           'tools/wafadmin/Tools/xlcxx.py',",
          "126:           'tools/wafadmin/Utils.py'],",
          "127:           'lib/node/')",
          "129: def update_shebang(path, shebang):",
          "130:   print 'updating shebang of %s' % path",
          "131:   s = open(path, 'r').read()",
          "132:   s = re.sub(r'#!.*\\n', '#!' + shebang + '\\n', s)",
          "133:   open(path, 'w').write(s)",
          "135: def npm_files(action):",
          "136:   target_path = 'lib/node_modules/npm/'",
          "138:   # don't install npm if the target path is a symlink, it probably means",
          "139:   # that a dev version of npm is installed there",
          "140:   if os.path.islink(abspath(dst_dir, target_path)): return",
          "142:   # npm has a *lot* of files and it'd be a pain to maintain a fixed list here",
          "143:   # so we walk its source directory instead...",
          "144:   for dirname, subdirs, basenames in os.walk('deps/npm', topdown=True):",
          "145:     subdirs[:] = filter('test'.__ne__, subdirs) # skip test suites",
          "146:     paths = [os.path.join(dirname, basename) for basename in basenames]",
          "147:     action(paths, target_path + dirname[9:] + '/')",
          "149:   # create/remove symlink",
          "150:   link_path = abspath(dst_dir, 'bin/npm')",
          "151:   if action == uninstall:",
          "152:     action([link_path], 'bin/npm')",
          "153:   elif action == install:",
          "154:     try_symlink('../lib/node_modules/npm/bin/npm-cli.js', link_path)",
          "155:     update_shebang(link_path, node_prefix + '/bin/node')",
          "156:   else:",
          "157:     assert(0) # unhandled action type",
          "159: def files(action):",
          "160:   action(['deps/uv/include/ares.h',",
          "161:           'deps/uv/include/ares_version.h',",
          "162:           'deps/uv/include/uv.h',",
          "163:           'deps/v8/include/v8-debug.h',",
          "164:           'deps/v8/include/v8-preparser.h',",
          "165:           'deps/v8/include/v8-profiler.h',",
          "166:           'deps/v8/include/v8-testing.h',",
          "167:           'deps/v8/include/v8.h',",
          "168:           'deps/v8/include/v8stdint.h',",
          "169:           'src/eio-emul.h',",
          "170:           'src/ev-emul.h',",
          "171:           'src/node.h',",
          "172:           'src/node_buffer.h',",
          "173:           'src/node_object_wrap.h',",
          "174:           'src/node_version.h'],",
          "175:           'include/node/')",
          "176:   action(['deps/uv/include/uv-private/eio.h',",
          "177:           'deps/uv/include/uv-private/ev.h',",
          "178:           'deps/uv/include/uv-private/ngx-queue.h',",
          "179:           'deps/uv/include/uv-private/tree.h',",
          "180:           'deps/uv/include/uv-private/uv-unix.h',",
          "181:           'deps/uv/include/uv-private/uv-win.h'],",
          "182:           'include/node/uv-private/')",
          "183:   action(['doc/node.1'], 'share/man/man1/')",
          "184:   action(['out/Release/node'], 'bin/node')",
          "186:   # install unconditionally, checking if the platform supports dtrace doesn't",
          "187:   # work when cross-compiling and besides, there's at least one linux flavor",
          "188:   # with dtrace support now (oracle's \"unbreakable\" linux)",
          "189:   action(['src/node.d'], 'lib/dtrace/')",
          "191:   if variables.get('node_install_waf'): waf_files(action)",
          "192:   if variables.get('node_install_npm'): npm_files(action)",
          "194: def run(args):",
          "195:   global dst_dir, node_prefix, target_defaults, variables",
          "197:   # chdir to the project's top-level directory",
          "198:   os.chdir(abspath(os.path.dirname(__file__), '..'))",
          "200:   conf = load_config()",
          "201:   variables = conf['variables']",
          "202:   target_defaults = conf['target_defaults']",
          "204:   # argv[2] is a custom install prefix for packagers (think DESTDIR)",
          "205:   dst_dir = node_prefix = variables.get('node_prefix', '/usr/local')",
          "206:   if len(args) > 2: dst_dir = abspath(args[2] + '/' + dst_dir)",
          "208:   cmd = args[1] if len(args) > 1 else 'install'",
          "209:   if cmd == 'install': return files(install)",
          "210:   if cmd == 'uninstall': return files(uninstall)",
          "211:   raise RuntimeError('Bad command: %s\\n' % cmd)",
          "213: if __name__ == '__main__':",
          "214:   run(sys.argv[:])",
          "",
          "---------------"
        ],
        "tools/installer.js||tools/installer.js": [
          "File: tools/installer.js -> tools/installer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "db844b152a92bcc02c20e62ea85958c0f3dfc532",
      "candidate_info": {
        "commit_hash": "db844b152a92bcc02c20e62ea85958c0f3dfc532",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/db844b152a92bcc02c20e62ea85958c0f3dfc532",
        "files": [
          "src/process_wrap.cc"
        ],
        "message": "process: don't use strdup()\n\nfile and cwd can be directly used from Utf8Value.\n\nConflicts:\n\n\tsrc/process_wrap.cc",
        "before_after_code_files": [
          "src/process_wrap.cc||src/process_wrap.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/process_wrap.cc||src/process_wrap.cc": [
          "File: src/process_wrap.cc -> src/process_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "141:     Local<Value> file_v = js_options->Get(String::NewSymbol(\"file\"));",
          "145:     } else {",
          "146:       return ThrowException(Exception::TypeError(String::New(\"Bad argument\")));",
          "147:     }",
          "",
          "[Removed Lines]",
          "142:     if (!file_v.IsEmpty() && file_v->IsString()) {",
          "143:       String::Utf8Value file(file_v->ToString());",
          "144:       options.file = strdup(*file);",
          "",
          "[Added Lines]",
          "142:     String::Utf8Value file(file_v->IsString() ? file_v : Local<Value>());",
          "143:     if (file.length() > 0) {",
          "144:       options.file = *file;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "164:     Local<Value> cwd_v = js_options->Get(String::NewSymbol(\"cwd\"));",
          "167:       if (cwd.length() > 0) {",
          "169:       }",
          "173:     Local<Value> env_v = js_options->Get(String::NewSymbol(\"envPairs\"));",
          "",
          "[Removed Lines]",
          "165:     if (!cwd_v.IsEmpty() && cwd_v->IsString()) {",
          "166:       String::Utf8Value cwd(cwd_v->ToString());",
          "168:         options.cwd = strdup(*cwd);",
          "170:     }",
          "",
          "[Added Lines]",
          "165:     String::Utf8Value cwd(cwd_v->IsString() ? cwd_v : Local<Value>());",
          "167:       options.cwd = *cwd;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "228:       delete [] options.args;",
          "229:     }",
          "234:     if (options.env) {",
          "235:       for (int i = 0; options.env[i]; i++) free(options.env[i]);",
          "236:       delete [] options.env;",
          "",
          "[Removed Lines]",
          "231:     free(options.cwd);",
          "232:     free((void*)options.file);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "247d0da188e70949a48739fc42dbf5da4d7b8b40",
      "candidate_info": {
        "commit_hash": "247d0da188e70949a48739fc42dbf5da4d7b8b40",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/247d0da188e70949a48739fc42dbf5da4d7b8b40",
        "files": [
          "deps/uv/src/win/fs.c",
          "deps/uv/src/win/internal.h",
          "deps/uv/src/win/util.c"
        ],
        "message": "update libuv to 855764406e fixes #2521",
        "before_after_code_files": [
          "deps/uv/src/win/fs.c||deps/uv/src/win/fs.c",
          "deps/uv/src/win/internal.h||deps/uv/src/win/internal.h",
          "deps/uv/src/win/util.c||deps/uv/src/win/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/src/win/fs.c||deps/uv/src/win/fs.c": [
          "File: deps/uv/src/win/fs.c -> deps/uv/src/win/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "492: void fs__stat(uv_fs_t* req, const wchar_t* path) {",
          "493:   int result;",
          "498:     return;",
          "499:   }",
          "517:     }",
          "520:   }",
          "525: }",
          "",
          "[Removed Lines]",
          "494:   unsigned short mode;",
          "496:   fs__open(req, path, _O_RDONLY, 0);",
          "497:   if (req->result == -1) {",
          "501:   result = _fstati64(req->result, &req->stat);",
          "502:   if (result == -1) {",
          "503:     req->ptr = NULL;",
          "504:   } else {",
          "510:     if (GetFileAttributesW(path) & FILE_ATTRIBUTE_DIRECTORY) {",
          "511:       mode = req->stat.st_mode;",
          "512:       mode &= ~_S_IFMT;",
          "513:       mode |= _S_IFDIR;",
          "515:       req->stat.st_mode = mode;",
          "516:       assert((req->stat.st_mode & _S_IFMT) == _S_IFDIR);",
          "519:     req->ptr = &req->stat;",
          "522:   _close(req->result);",
          "524:   SET_REQ_RESULT(req, result);",
          "",
          "[Added Lines]",
          "493:   HANDLE file;",
          "494:   WIN32_FIND_DATAW ent;",
          "497:   req->ptr = NULL;",
          "499:   file = FindFirstFileExW(path, FindExInfoStandard, &ent,",
          "500:     FindExSearchNameMatch, NULL, 0);",
          "502:   if (file == INVALID_HANDLE_VALUE) {",
          "503:     SET_REQ_RESULT_WIN32_ERROR(req, GetLastError());",
          "507:   FindClose(file);",
          "509:   if (ent.dwFileAttributes & FILE_ATTRIBUTE_REPARSE_POINT &&",
          "510:       ent.dwReserved0 == IO_REPARSE_TAG_SYMLINK) {",
          "511:     fs__open(req, path, _O_RDONLY, 0);",
          "512:     if (req->result != -1) {",
          "513:       result = _fstati64(req->result, &req->stat);",
          "514:       _close(req->result);",
          "516:       if (result != -1) {",
          "517:         req->ptr = &req->stat;",
          "518:       }",
          "520:       SET_REQ_RESULT(req, result);",
          "523:     return;",
          "526:   req->stat.st_ino = 0;",
          "527:   req->stat.st_uid = 0;",
          "528:   req->stat.st_gid = 0;",
          "529:   req->stat.st_mode = 0;",
          "530:   req->stat.st_rdev = 0;",
          "531:   req->stat.st_dev = 0;",
          "532:   req->stat.st_nlink = 1;",
          "534:   if (ent.dwFileAttributes & FILE_ATTRIBUTE_READONLY ) {",
          "535:     req->stat.st_mode |= (_S_IREAD + (_S_IREAD >> 3) + (_S_IREAD >> 6));",
          "536:   } else {",
          "537:     req->stat.st_mode |= ((_S_IREAD|_S_IWRITE) + ((_S_IREAD|_S_IWRITE) >> 3) +",
          "538:       ((_S_IREAD|_S_IWRITE) >> 6));",
          "539:   }",
          "541:   if (ent.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY) {",
          "542:     req->stat.st_mode |= _S_IFDIR;",
          "543:   } else {",
          "544:     req->stat.st_mode |= _S_IFREG;",
          "545:   }",
          "547:   uv_filetime_to_time_t(&ent.ftLastWriteTime, &(req->stat.st_mtime));",
          "548:   uv_filetime_to_time_t(&ent.ftLastAccessTime, &(req->stat.st_atime));",
          "549:   uv_filetime_to_time_t(&ent.ftCreationTime, &(req->stat.st_ctime));",
          "551:   req->stat.st_size = ((int64_t)ent.nFileSizeHigh << 32) +",
          "552:     (int64_t)ent.nFileSizeLow;",
          "554:   req->ptr = &req->stat;",
          "555:   req->result = 0;",
          "",
          "---------------"
        ],
        "deps/uv/src/win/internal.h||deps/uv/src/win/internal.h": [
          "File: deps/uv/src/win/internal.h -> deps/uv/src/win/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "286: int uv_parent_pid();",
          "289: void uv_fatal_error(const int errorno, const char* syscall);",
          "291: uv_err_code uv_translate_sys_error(int sys_errno);",
          "293: #define SET_REQ_STATUS(req, status)                                     \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "287: void uv_filetime_to_time_t(FILETIME* file_time,  time_t* stat_time);",
          "",
          "---------------"
        ],
        "deps/uv/src/win/util.c||deps/uv/src/win/util.c": [
          "File: deps/uv/src/win/util.c -> deps/uv/src/win/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #include <direct.h>",
          "24: #include <malloc.h>",
          "25: #include <string.h>",
          "27: #include \"uv.h\"",
          "28: #include \"internal.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: #include <time.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "236:   CloseHandle(handle);",
          "237:   return parent_pid;",
          "238: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "242: void uv_filetime_to_time_t(FILETIME* file_time, time_t* stat_time) {",
          "243:   FILETIME local_time;",
          "244:   SYSTEMTIME system_time;",
          "245:   struct tm time;",
          "247:   if ((file_time->dwLowDateTime || file_time->dwHighDateTime) &&",
          "248:       FileTimeToLocalFileTime(file_time, &local_time)         &&",
          "249:       FileTimeToSystemTime(&local_time, &system_time)) {",
          "250:     time.tm_year = system_time.wYear - 1900;",
          "251:     time.tm_mon = system_time.wMonth - 1;",
          "252:     time.tm_mday = system_time.wDay;",
          "253:     time.tm_hour = system_time.wHour;",
          "254:     time.tm_min = system_time.wMinute;",
          "255:     time.tm_sec = system_time.wSecond;",
          "258:   } else {",
          "260:   }",
          "261: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "952e513379169ec1b40909d1db056e9bf4294899",
      "candidate_info": {
        "commit_hash": "952e513379169ec1b40909d1db056e9bf4294899",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/952e513379169ec1b40909d1db056e9bf4294899",
        "files": [
          "ChangeLog",
          "src/node_version.h"
        ],
        "message": "2012.07.10 Version 0.6.20 (maintenance)\n\n* npm: Upgrade to 1.1.37 (isaacs)\n\n* benchmark: Backport improvements made in master (isaacs)\n\n* build: always link with -lz (Trent Mick)\n\n* core: use proper #include directives (Ben Noordhuis)\n\n* cluster: don't silently drop messages when the write queue gets big (Bert Belder)\n\n* windows: don't print error when GetConsoleTitleW returns an empty string (Bert Belder)",
        "before_after_code_files": [
          "src/node_version.h||src/node_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_version.h||src/node_version.h": [
          "File: src/node_version.h -> src/node_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #define NODE_MAJOR_VERSION 0",
          "30: #define NODE_MINOR_VERSION 6",
          "31: #define NODE_PATCH_VERSION 20",
          "34: #ifndef NODE_STRINGIFY",
          "35: #define NODE_STRINGIFY(n) NODE_STRINGIFY_HELPER(n)",
          "",
          "[Removed Lines]",
          "32: #define NODE_VERSION_IS_RELEASE 0",
          "",
          "[Added Lines]",
          "32: #define NODE_VERSION_IS_RELEASE 1",
          "",
          "---------------"
        ]
      }
    }
  ]
}