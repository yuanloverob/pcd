{
  "cve_id": "CVE-2017-5207",
  "cve_desc": "Firejail before 0.9.44.4, when running a bandwidth command, allows local users to gain root privileges via the --shell argument.",
  "repo": "netblue30/firejail",
  "patch_hash": "5d43fdcd215203868d440ffc42036f5f5ffc89fc",
  "patch_info": {
    "commit_hash": "5d43fdcd215203868d440ffc42036f5f5ffc89fc",
    "repo": "netblue30/firejail",
    "commit_url": "https://github.com/netblue30/firejail/commit/5d43fdcd215203868d440ffc42036f5f5ffc89fc",
    "files": [
      "RELNOTES",
      "src/firejail/bandwidth.c"
    ],
    "message": "security fix",
    "before_after_code_files": [
      "src/firejail/bandwidth.c||src/firejail/bandwidth.c"
    ]
  },
  "patch_diff": {
    "src/firejail/bandwidth.c||src/firejail/bandwidth.c": [
      "File: src/firejail/bandwidth.c -> src/firejail/bandwidth.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "435:  if (setregid(0, 0))",
      "436:   errExit(\"setregid\");",
      "445:  char *arg[4];",
      "447:  arg[1] = \"-c\";",
      "448:  arg[2] = cmd;",
      "449:  arg[3] = NULL;",
      "",
      "[Removed Lines]",
      "438:  if (!cfg.shell)",
      "439:   cfg.shell = guess_shell();",
      "440:  if (!cfg.shell) {",
      "441:   fprintf(stderr, \"Error: no POSIX shell found, please use --shell command line option\\n\");",
      "442:   exit(1);",
      "443:  }",
      "446:  arg[0] = cfg.shell;",
      "",
      "[Added Lines]",
      "439:  arg[0] = \"/bin/sh\";",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9614b8ac4bf2661f6378abc7db18169fb867d6bb",
      "candidate_info": {
        "commit_hash": "9614b8ac4bf2661f6378abc7db18169fb867d6bb",
        "repo": "netblue30/firejail",
        "commit_url": "https://github.com/netblue30/firejail/commit/9614b8ac4bf2661f6378abc7db18169fb867d6bb",
        "files": [
          "src/firejail/bandwidth.c",
          "src/firejail/env.c",
          "src/firejail/firejail.h",
          "src/firejail/fs.c",
          "src/firejail/join.c",
          "src/firejail/main.c",
          "src/firejail/sandbox.c"
        ],
        "message": "shell selection",
        "before_after_code_files": [
          "src/firejail/bandwidth.c||src/firejail/bandwidth.c",
          "src/firejail/env.c||src/firejail/env.c",
          "src/firejail/firejail.h||src/firejail/firejail.h",
          "src/firejail/fs.c||src/firejail/fs.c",
          "src/firejail/join.c||src/firejail/join.c",
          "src/firejail/main.c||src/firejail/main.c",
          "src/firejail/sandbox.c||src/firejail/sandbox.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/firejail/bandwidth.c||src/firejail/bandwidth.c"
          ],
          "candidate": [
            "src/firejail/bandwidth.c||src/firejail/bandwidth.c"
          ]
        }
      },
      "candidate_diff": {
        "src/firejail/bandwidth.c||src/firejail/bandwidth.c": [
          "File: src/firejail/bandwidth.c -> src/firejail/bandwidth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "459:  if (setregid(0, 0))",
          "460:   errExit(\"setregid\");",
          "462:  char *arg[4];",
          "464:  arg[1] = \"-c\";",
          "465:  arg[2] = cmd;",
          "466:  arg[3] = NULL;",
          "471: }",
          "",
          "[Removed Lines]",
          "463:  arg[0] = \"/bin/bash\";",
          "467:  execvp(\"/bin/bash\", arg);",
          "470:  exit(0);",
          "",
          "[Added Lines]",
          "462:  assert(cfg.shell);",
          "465:  arg[0] = cfg.shell;",
          "469:  execvp(arg[0], arg);",
          "472:  errExit(\"execvp\");",
          "",
          "---------------"
        ],
        "src/firejail/env.c||src/firejail/env.c": [
          "File: src/firejail/env.c -> src/firejail/env.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:   errExit(\"setenv\");",
          "122:  if (setenv(\"container\", \"firejail\", 1) < 0) // LXC sets container=lxc,",
          "123:   errExit(\"setenv\");",
          "128:  if (cfg.shell && setenv(\"SHELL\", cfg.shell, 1) < 0)",
          "129:   errExit(\"setenv\");",
          "",
          "[Removed Lines]",
          "124:  if (arg_zsh && setenv(\"SHELL\", \"/usr/bin/zsh\", 1) < 0)",
          "125:   errExit(\"setenv\");",
          "126:  if (arg_csh && setenv(\"SHELL\", \"/bin/csh\", 1) < 0)",
          "127:   errExit(\"setenv\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/firejail/firejail.h||src/firejail/firejail.h": [
          "File: src/firejail/firejail.h -> src/firejail/firejail.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "279: void check_user_namespace(void);",
          "282: int sandbox(void* sandbox_arg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "280: char *guess_shell(void);",
          "",
          "---------------"
        ],
        "src/firejail/fs.c||src/firejail/fs.c": [
          "File: src/firejail/fs.c -> src/firejail/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1110:  }",
          "1111:  free(name);",
          "1123:  if (getenv(\"FIREJAIL_X11\")) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1114:  if (!arg_shell_none) {",
          "1115:   if (stat(cfg.shell, &s) == -1) {",
          "1116:    fprintf(stderr, \"Error: cannot find %s in chroot directory\\n\", cfg.shell);",
          "1117:    return 1;",
          "1118:   }",
          "1119:  }",
          "",
          "---------------"
        ],
        "src/firejail/join.c||src/firejail/join.c": [
          "File: src/firejail/join.c -> src/firejail/join.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "330:    }",
          "331:   }",
          "334:   if (cfg.command_line == NULL) {",
          "359:   }",
          "360:   else {",
          "",
          "[Removed Lines]",
          "337:    if (cfg.shell)",
          "338:      execlp(cfg.shell, cfg.shell, NULL);",
          "339:     else if (arg_zsh)",
          "340:      execlp(\"/usr/bin/zsh\", \"/usr/bin/zsh\", NULL);",
          "341:     else if (arg_csh)",
          "342:      execlp(\"/bin/csh\", \"/bin/csh\", NULL);",
          "343:     else {",
          "344:      struct stat s;",
          "345:      if (stat(\"/bin/bash\", &s) == 0)",
          "346:       execlp(\"/bin/bash\", \"/bin/bash\", NULL);",
          "347:      else if (stat(\"/usr/bin/zsh\", &s) == 0)",
          "348:       execlp(\"/usr/bin/zsh\", \"/usr/bin/zsh\", NULL);",
          "349:      else if (stat(\"/bin/csh\", &s) == 0)",
          "350:       execlp(\"/bin/csh\", \"/bin/csh\", NULL);",
          "351:      else if (stat(\"/bin/sh\", &s) == 0)",
          "352:       execlp(\"/bin/sh\", \"/bin/sh\", NULL);",
          "353:     }",
          "356:    fprintf(stderr, \"Error: no POSIX shell found\\n\");",
          "357:    sleep(5);",
          "358:    exit(1);",
          "",
          "[Added Lines]",
          "335:    cfg.shell = guess_shell();",
          "336:    if (!cfg.shell) {",
          "337:     fprintf(stderr, \"Error: unable to guess your shell, please set explicitly by using --shell option.\\n\");",
          "338:     exit(1);",
          "339:    }",
          "340:    if (arg_debug)",
          "341:     printf(\"Autoselecting %s as shell\\n\", cfg.shell);",
          "344:    execlp(cfg.shell, cfg.shell, NULL);",
          "347:    errExit(\"execlp\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "398:     execvp(cfg.original_argv[cfg.original_program_index], &cfg.original_argv[cfg.original_program_index]);",
          "399:     exit(1);",
          "400:    } else {",
          "412:     char *arg[5];",
          "414:     arg[1] = \"-c\";",
          "415:     if (arg_debug)",
          "416:      printf(\"Starting %s\\n\", cfg.command_line);",
          "",
          "[Removed Lines]",
          "402:     char *sh;",
          "403:     if (cfg.shell)",
          "404:       sh = cfg.shell;",
          "405:     else if (arg_zsh)",
          "406:      sh = \"/usr/bin/zsh\";",
          "407:     else if (arg_csh)",
          "408:      sh = \"/bin/csh\";",
          "409:     else",
          "410:      sh = \"/bin/bash\";",
          "413:     arg[0] = sh;",
          "",
          "[Added Lines]",
          "391:     cfg.shell = guess_shell();",
          "392:     if (!cfg.shell) {",
          "393:      fprintf(stderr, \"Error: unable to guess your shell, please set explicitly by using --shell option.\\n\");",
          "394:      exit(1);",
          "395:     }",
          "396:     if (arg_debug)",
          "397:      printf(\"Autoselecting %s as shell\\n\", cfg.shell);",
          "399:     arg[0] = cfg.shell;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "423:      arg[3] = cfg.command_line;",
          "424:      arg[4] = NULL;",
          "425:     }",
          "427:    }",
          "428:   }",
          "",
          "[Removed Lines]",
          "426:     execvp(\"/bin/bash\", arg);",
          "",
          "[Added Lines]",
          "412:     execvp(arg[0], arg);",
          "415:     errExit(\"execvp\");",
          "",
          "---------------"
        ],
        "src/firejail/main.c||src/firejail/main.c": [
          "File: src/firejail/main.c -> src/firejail/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "709:  }",
          "710: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "712: char *guess_shell(void) {",
          "713:  char *shell;",
          "715:  char *shells[] = {\"/bin/bash\", \"/bin/csh\", \"/usr/bin/zsh\", \"/bin/sh\", \"/bin/ash\", NULL };",
          "717:  int i = 0;",
          "718:  while (shells[i] != NULL) {",
          "719:   struct stat s;",
          "721:   if (stat(shells[i], &s) == 0 && access(shells[i], R_OK) == 0) {",
          "722:    shell = shells[i];",
          "723:    break;",
          "724:   }",
          "725:   i++;",
          "726:  }",
          "730:  if (strcmp(shell,\"/bin/csh\"))",
          "731:   arg_csh = 1;",
          "732:  if (strcmp(shell,\"/usr/bin/zsh\") || strcmp(shell,\"/bin/zsh\"))",
          "733:   arg_zsh = 1;",
          "735:  return shell;",
          "736: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1857:     fprintf(stderr, \"Error: --shell=none was already specified.\\n\");",
          "1858:     return 1;",
          "1859:    }",
          "1861:     fprintf(stderr, \"Error: only one default user shell can be specified\\n\");",
          "1862:     return 1;",
          "1863:    }",
          "1864:    arg_csh = 1;",
          "1865:   }",
          "1866:   else if (strcmp(argv[i], \"--zsh\") == 0) {",
          "1867:    if (arg_shell_none) {",
          "1868:     fprintf(stderr, \"Error: --shell=none was already specified.\\n\");",
          "1869:     return 1;",
          "1870:    }",
          "1872:     fprintf(stderr, \"Error: only one default user shell can be specified\\n\");",
          "1873:     return 1;",
          "1874:    }",
          "1875:    arg_zsh = 1;",
          "1876:   }",
          "1877:   else if (strcmp(argv[i], \"--shell=none\") == 0) {",
          "1878:    arg_shell_none = 1;",
          "1880:     fprintf(stderr, \"Error: a shell was already specified\\n\");",
          "1881:     return 1;",
          "1882:    }",
          "",
          "[Removed Lines]",
          "1860:    if (arg_zsh || cfg.shell ) {",
          "1871:    if (arg_csh || cfg.shell ) {",
          "1879:    if (arg_csh || arg_zsh || cfg.shell) {",
          "",
          "[Added Lines]",
          "1886:    if (cfg.shell) {",
          "1891:    cfg.shell = \"/bin/csh\";",
          "1898:    if (cfg.shell) {",
          "1903:    cfg.shell = \"/bin/zsh\";",
          "1907:    if (cfg.shell) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1888:    }",
          "1889:    invalid_filename(argv[i] + 8);",
          "1892:     fprintf(stderr, \"Error: only one user shell can be specified\\n\");",
          "1893:     return 1;",
          "1894:    }",
          "",
          "[Removed Lines]",
          "1891:    if (arg_csh || arg_zsh || cfg.shell) {",
          "",
          "[Added Lines]",
          "1919:    if (cfg.shell) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1970:   free(msg);",
          "1971:  }",
          "1983:  }",
          "1985:   cfg.command_line = cfg.shell;",
          "1986:   cfg.window_title = cfg.shell;",
          "1987:   cfg.command_name = cfg.shell;",
          "1988:  }",
          "1994:  else if (arg_appimage) {",
          "1995:   if (arg_debug)",
          "1996:    printf(\"Configuring appimage environment\\n\");",
          "",
          "[Removed Lines]",
          "1974:  if (prog_index == -1 && arg_zsh) {",
          "1975:   cfg.command_line = \"/usr/bin/zsh\";",
          "1976:   cfg.window_title = \"/usr/bin/zsh\";",
          "1977:   cfg.command_name = \"zsh\";",
          "1978:  }",
          "1979:  else if (prog_index == -1 && arg_csh) {",
          "1980:   cfg.command_line = \"/bin/csh\";",
          "1981:   cfg.window_title = \"/bin/csh\";",
          "1982:   cfg.command_name = \"csh\";",
          "1984:  else if (prog_index == -1 && cfg.shell) {",
          "1989:  else if (prog_index == -1) {",
          "1990:   cfg.command_line = \"/bin/bash\";",
          "1991:   cfg.window_title = \"/bin/bash\";",
          "1992:   cfg.command_name = \"bash\";",
          "1993:  }",
          "",
          "[Added Lines]",
          "2003:  if (prog_index == -1 && !cfg.shell) {",
          "2004:   cfg.shell = guess_shell();",
          "2005:   if (!cfg.shell) {",
          "2006:    fprintf(stderr, \"Error: unable to guess your shell, please set explicitly by using --shell option.\\n\");",
          "2007:    exit(1);",
          "2008:   }",
          "2009:   if (arg_debug)",
          "2010:    printf(\"Autoselecting %s as shell\\n\", cfg.shell);",
          "2014:  if (prog_index == -1 && cfg.shell) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2000:  else {",
          "2001:   build_cmdline(&cfg.command_line, &cfg.window_title, argc, argv, prog_index);",
          "2002:  }",
          "2004:  assert(cfg.command_name);",
          "2005:  if (arg_debug)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2029:   fprintf(stderr, \"Error: command must be specified when --shell=none used.\\n\");",
          "2030:   exit(1);",
          "",
          "---------------"
        ],
        "src/firejail/sandbox.c||src/firejail/sandbox.c": [
          "File: src/firejail/sandbox.c -> src/firejail/sandbox.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "327:  else {",
          "339:   char *arg[5];",
          "340:   int index = 0;",
          "342:   arg[index++] = \"-c\";",
          "343:   assert(cfg.command_line);",
          "344:   if (arg_debug)",
          "",
          "[Removed Lines]",
          "329:   char *sh;",
          "330:   if (cfg.shell)",
          "331:     sh = cfg.shell;",
          "332:   else if (arg_zsh)",
          "333:    sh = \"/usr/bin/zsh\";",
          "334:   else if (arg_csh)",
          "335:    sh = \"/bin/csh\";",
          "336:   else",
          "337:    sh = \"/bin/bash\";",
          "341:   arg[index++] = sh;",
          "",
          "[Added Lines]",
          "328:   assert(cfg.shell);",
          "332:   arg[index++] = cfg.shell;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "369:   if (!arg_command && !arg_quiet)",
          "370:    printf(\"Child process initialized\\n\");",
          "372:  }",
          "374:  perror(\"execvp\");",
          "",
          "[Removed Lines]",
          "371:   execvp(sh, arg);",
          "",
          "[Added Lines]",
          "362:   execvp(arg[0], arg);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6b8dba29d73257311564ee7f27b9b14758cc693e",
      "candidate_info": {
        "commit_hash": "6b8dba29d73257311564ee7f27b9b14758cc693e",
        "repo": "netblue30/firejail",
        "commit_url": "https://github.com/netblue30/firejail/commit/6b8dba29d73257311564ee7f27b9b14758cc693e",
        "files": [
          "RELNOTES",
          "src/firejail/main.c",
          "src/man/firejail.txt"
        ],
        "message": "security fix",
        "before_after_code_files": [
          "src/firejail/main.c||src/firejail/main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/firejail/main.c||src/firejail/main.c": [
          "File: src/firejail/main.c -> src/firejail/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include <signal.h>",
          "36: #include <time.h>",
          "37: #include <net/if.h>",
          "39: #if 0",
          "40: #include <sys/times.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: #include <sys/utsname.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "803:  for (i = 1; i < argc; i++) {",
          "804:   if (strcmp(argv[i], \"--allow-debuggers\") == 0) {",
          "805:    arg_allow_debuggers = 1;",
          "806:    break;",
          "807:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "807:    struct utsname u;",
          "808:    int rv = uname(&u);",
          "809:    if (rv != 0)",
          "810:     errExit(\"uname\");",
          "811:    int major;",
          "812:    int minor;",
          "813:    if (2 != sscanf(u.release, \"%d.%d\", &major, &minor)) {",
          "814:     fprintf(stderr, \"Error: cannot extract Linux kernel version: %s\\n\", u.version);",
          "815:     exit(1);",
          "816:    }",
          "817:    if (major < 4 || (major == 4 && minor < 8)) {",
          "818:     fprintf(stderr, \"Error: --allow-debuggers is disabled on Linux kernels prior to 4.8. \"",
          "819:      \"A bug in ptrace call allows a full bypass of the seccomp filter. \"",
          "820:      \"Your current kernel version is %d.%d.\\n\", major, minor);",
          "821:     exit(1);",
          "822:    }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "903fd8a0789ca3cc3c21d84cd0282481515592ef",
      "candidate_info": {
        "commit_hash": "903fd8a0789ca3cc3c21d84cd0282481515592ef",
        "repo": "netblue30/firejail",
        "commit_url": "https://github.com/netblue30/firejail/commit/903fd8a0789ca3cc3c21d84cd0282481515592ef",
        "files": [
          "src/firejail/firejail.h",
          "src/firejail/fs_home.c",
          "src/firejail/util.c"
        ],
        "message": "security fix",
        "before_after_code_files": [
          "src/firejail/firejail.h||src/firejail/firejail.h",
          "src/firejail/fs_home.c||src/firejail/fs_home.c",
          "src/firejail/util.c||src/firejail/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/firejail/firejail.h||src/firejail/firejail.h": [
          "File: src/firejail/firejail.h -> src/firejail/firejail.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "389: void logargs(int argc, char **argv) ;",
          "390: void logerr(const char *msg);",
          "391: int copy_file(const char *srcname, const char *destname);",
          "392: int is_dir(const char *fname);",
          "393: int is_link(const char *fname);",
          "394: char *line_remove_spaces(const char *buf);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "392: void copy_file_as_user(const char *srcname, const char *destname, uid_t uid, gid_t gid, mode_t mode);",
          "393: void touch_file_as_user(const char *fname, uid_t uid, gid_t gid, mode_t mode);",
          "",
          "---------------"
        ],
        "src/firejail/fs_home.c||src/firejail/fs_home.c": [
          "File: src/firejail/fs_home.c -> src/firejail/fs_home.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:   if (stat(fname, &s) == 0)",
          "42:    return;",
          "43:   if (stat(\"/etc/skel/.zshrc\", &s) == 0) {",
          "53:   }",
          "65:   }",
          "66:   free(fname);",
          "67:  }",
          "",
          "[Removed Lines]",
          "44:    if (is_link(\"/etc/skel/.zshrc\")) {",
          "45:     fprintf(stderr, \"Error: invalid /etc/skel/.zshrc file\\n\");",
          "46:     exit(1);",
          "47:    }",
          "48:    if (copy_file(\"/etc/skel/.zshrc\", fname) == 0) {",
          "49:     if (chown(fname, u, g) == -1)",
          "50:      errExit(\"chown\");",
          "51:     fs_logger(\"clone /etc/skel/.zshrc\");",
          "52:    }",
          "54:   else { //",
          "55:    FILE *fp = fopen(fname, \"w\");",
          "56:    if (fp) {",
          "57:     fprintf(fp, \"\\n\");",
          "58:     fclose(fp);",
          "59:     if (chown(fname, u, g) == -1)",
          "60:      errExit(\"chown\");",
          "61:     if (chmod(fname, S_IRUSR | S_IWUSR) < 0)",
          "62:      errExit(\"chown\");",
          "63:     fs_logger2(\"touch\", fname);",
          "64:    }",
          "",
          "[Added Lines]",
          "43:   if (is_link(fname)) { // stat on dangling symlinks fails, try again using lstat",
          "44:    fprintf(stderr, \"Error: invalid %s file\\n\", fname);",
          "45:    exit(1);",
          "46:   }",
          "48:    copy_file_as_user(\"/etc/skel/.zshrc\", fname, u, g, 0644); // regular user",
          "49:    fs_logger(\"clone /etc/skel/.zshrc\");",
          "51:   else {",
          "52:    touch_file_as_user(fname, u, g, 0644);",
          "53:    fs_logger2(\"touch\", fname);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:   if (stat(fname, &s) == 0)",
          "76:    return;",
          "77:   if (stat(\"/etc/skel/.cshrc\", &s) == 0) {",
          "87:   }",
          "100:   }",
          "101:   free(fname);",
          "102:  }",
          "",
          "[Removed Lines]",
          "78:    if (is_link(\"/etc/skel/.cshrc\")) {",
          "79:     fprintf(stderr, \"Error: invalid /etc/skel/.cshrc file\\n\");",
          "80:     exit(1);",
          "81:    }",
          "82:    if (copy_file(\"/etc/skel/.cshrc\", fname) == 0) {",
          "83:     if (chown(fname, u, g) == -1)",
          "84:      errExit(\"chown\");",
          "85:     fs_logger(\"clone /etc/skel/.cshrc\");",
          "86:    }",
          "88:   else { //",
          "90:    FILE *fp = fopen(fname, \"w\");",
          "91:    if (fp) {",
          "92:     fprintf(fp, \"\\n\");",
          "93:     fclose(fp);",
          "94:     if (chown(fname, u, g) == -1)",
          "95:      errExit(\"chown\");",
          "96:     if (chmod(fname, S_IRUSR | S_IWUSR) < 0)",
          "97:      errExit(\"chown\");",
          "98:     fs_logger2(\"touch\", fname);",
          "99:    }",
          "",
          "[Added Lines]",
          "66:   if (is_link(fname)) { // stat on dangling symlinks fails, try again using lstat",
          "67:    fprintf(stderr, \"Error: invalid %s file\\n\", fname);",
          "68:    exit(1);",
          "69:   }",
          "71:    copy_file_as_user(\"/etc/skel/.cshrc\", fname, u, g, 0644); // regular user",
          "72:    fs_logger(\"clone /etc/skel/.cshrc\");",
          "74:   else {",
          "75:    touch_file_as_user(fname, u, g, 0644);",
          "76:    fs_logger2(\"touch\", fname);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "107:    errExit(\"asprintf\");",
          "108:   struct stat s;",
          "111:    return;",
          "112:   if (stat(\"/etc/skel/.bashrc\", &s) == 0) {",
          "123:   }",
          "124:   free(fname);",
          "125:  }",
          "",
          "[Removed Lines]",
          "110:   if (stat(fname, &s) == 0)",
          "113:    if (is_link(\"/etc/skel/.bashrc\")) {",
          "114:     fprintf(stderr, \"Error: invalid /etc/skel/.bashrc file\\n\");",
          "115:     exit(1);",
          "116:    }",
          "117:    if (copy_file(\"/etc/skel/.bashrc\", fname) == 0) {",
          "119:     if (chown(fname, u, g) == -1)",
          "120:      errExit(\"chown\");",
          "121:     fs_logger(\"clone /etc/skel/.bashrc\");",
          "122:    }",
          "",
          "[Added Lines]",
          "87:   if (stat(fname, &s) == 0)",
          "89:   if (is_link(fname)) { // stat on dangling symlinks fails, try again using lstat",
          "90:    fprintf(stderr, \"Error: invalid %s file\\n\", fname);",
          "91:    exit(1);",
          "92:   }",
          "94:    copy_file_as_user(\"/etc/skel/.bashrc\", fname, u, g, 0644); // regular user",
          "95:    fs_logger(\"clone /etc/skel/.bashrc\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "132:  char *src;",
          "133:  char *dest = RUN_XAUTHORITY_FILE;",
          "135:  FILE *fp = fopen(dest, \"w\");",
          "136:  if (fp) {",
          "137:   fprintf(fp, \"\\n\");",
          "138:   SET_PERMS_STREAM(fp, getuid(), getgid(), 0600);",
          "139:   fclose(fp);",
          "140:  }",
          "142:  if (asprintf(&src, \"%s/.Xauthority\", cfg.homedir) == -1)",
          "143:   errExit(\"asprintf\");",
          "145:  struct stat s;",
          "146:  if (stat(src, &s) == 0) {",
          "147:   if (is_link(src)) {",
          "168:   }",
          "176:   return 1; // file copied",
          "177:  }",
          "",
          "[Removed Lines]",
          "148:    fprintf(stderr, \"Error: invalid .Xauthority file\\n\");",
          "149:    exit(1);",
          "150:   }",
          "152:   pid_t child = fork();",
          "153:   if (child < 0)",
          "154:    errExit(\"fork\");",
          "155:   if (child == 0) {",
          "157:    drop_privs(0);",
          "160:    int rv = copy_file(src, dest);",
          "161:    if (rv)",
          "162:     fprintf(stderr, \"Warning: cannot transfer .Xauthority in private home directory\\n\");",
          "163:    else {",
          "164:     fs_logger2(\"clone\", dest);",
          "165:    }",
          "167:    _exit(0);",
          "170:   waitpid(child, NULL, 0);",
          "172:   if (chown(dest, getuid(), getgid()) == -1)",
          "173:    errExit(\"fchown\");",
          "174:   if (chmod(dest, 0600) == -1)",
          "175:    errExit(\"fchmod\");",
          "",
          "[Added Lines]",
          "121:    fprintf(stderr, \"Warning: invalid .Xauthority file\\n\");",
          "122:    return 0;",
          "125:   copy_file_as_user(src, dest, getuid(), getgid(), 0600); // regular user",
          "126:   fs_logger2(\"clone\", dest);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "186:  char *src;",
          "187:  char *dest = RUN_ASOUNDRC_FILE;",
          "189:  FILE *fp = fopen(dest, \"w\");",
          "190:  if (fp) {",
          "191:   fprintf(fp, \"\\n\");",
          "192:   SET_PERMS_STREAM(fp, getuid(), getgid(), 0644);",
          "193:   fclose(fp);",
          "194:  }",
          "196:  if (asprintf(&src, \"%s/.asoundrc\", cfg.homedir) == -1)",
          "197:   errExit(\"asprintf\");",
          "199:  struct stat s;",
          "201:   if (is_link(src)) {",
          "219:    }",
          "221:   }",
          "229:   return 1; // file copied",
          "230:  }",
          "",
          "[Removed Lines]",
          "200:  if (stat(src, &s) == 0) {",
          "202:    fprintf(stderr, \"Error: invalid .asoundrc file\\n\");",
          "203:    exit(1);",
          "204:   }",
          "206:   pid_t child = fork();",
          "207:   if (child < 0)",
          "208:    errExit(\"fork\");",
          "209:   if (child == 0) {",
          "211:    drop_privs(0);",
          "214:    int rv = copy_file(src, dest);",
          "215:    if (rv)",
          "216:     fprintf(stderr, \"Warning: cannot transfer .asoundrc in private home directory\\n\");",
          "217:    else {",
          "218:     fs_logger2(\"clone\", dest);",
          "220:    _exit(0);",
          "223:   waitpid(child, NULL, 0);",
          "225:   if (chown(dest, getuid(), getgid()) == -1)",
          "226:    errExit(\"fchown\");",
          "227:   if (chmod(dest, 0644) == -1)",
          "228:    errExit(\"fchmod\");",
          "",
          "[Added Lines]",
          "151:  if (stat(src, &s) == 0) {",
          "155:    char* rp = realpath(src, NULL);",
          "156:    if (!rp) {",
          "157:     fprintf(stderr, \"Error: Cannot access %s\\n\", src);",
          "158:     exit(1);",
          "159:    }",
          "160:    if (strncmp(rp, cfg.homedir, strlen(cfg.homedir)) != 0) {",
          "161:     fprintf(stderr, \"Error: .asoundrc is a symbolic link pointing to a file outside home directory\\n\");",
          "162:     exit(1);",
          "164:    free(rp);",
          "167:   copy_file_as_user(src, dest, getuid(), getgid(), 0644); // regular user",
          "168:   fs_logger2(\"clone\", dest);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "238:  char *dest;",
          "239:  if (asprintf(&dest, \"%s/.Xauthority\", cfg.homedir) == -1)",
          "240:   errExit(\"asprintf\");",
          "243:  if (is_link(dest)) {",
          "244:   fprintf(stderr, \"Error: %s is a symbolic link\\n\", dest);",
          "245:   exit(1);",
          "246:  }",
          "274:  unlink(src);",
          "275: }",
          "",
          "[Removed Lines]",
          "248:  pid_t child = fork();",
          "249:  if (child < 0)",
          "250:   errExit(\"fork\");",
          "251:  if (child == 0) {",
          "253:   drop_privs(0);",
          "256:   int rv = copy_file(src, dest);",
          "257:   if (rv)",
          "258:    fprintf(stderr, \"Warning: cannot transfer .Xauthority in private home directory\\n\");",
          "259:   else {",
          "260:    fs_logger2(\"clone\", dest);",
          "261:   }",
          "262:   _exit(0);",
          "263:  }",
          "265:  waitpid(child, NULL, 0);",
          "268:  if (chown(dest, getuid(), getgid()) < 0)",
          "269:   errExit(\"chown\");",
          "270:  if (chmod(dest, S_IRUSR | S_IWUSR) < 0)",
          "271:   errExit(\"chmod\");",
          "",
          "[Added Lines]",
          "188:  copy_file_as_user(src, dest, getuid(), getgid(), S_IRUSR | S_IWUSR); // regular user",
          "189:  fs_logger2(\"clone\", dest);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "280:  char *dest;",
          "281:  if (asprintf(&dest, \"%s/.asoundrc\", cfg.homedir) == -1)",
          "282:   errExit(\"asprintf\");",
          "285:  if (is_link(dest)) {",
          "286:   fprintf(stderr, \"Error: %s is a symbolic link\\n\", dest);",
          "287:   exit(1);",
          "288:  }",
          "316:  unlink(src);",
          "",
          "[Removed Lines]",
          "290:  pid_t child = fork();",
          "291:  if (child < 0)",
          "292:   errExit(\"fork\");",
          "293:  if (child == 0) {",
          "295:   drop_privs(0);",
          "298:   int rv = copy_file(src, dest);",
          "299:   if (rv)",
          "300:    fprintf(stderr, \"Warning: cannot transfer .asoundrc in private home directory\\n\");",
          "301:   else {",
          "302:    fs_logger2(\"clone\", dest);",
          "303:   }",
          "304:   _exit(0);",
          "305:  }",
          "307:  waitpid(child, NULL, 0);",
          "310:  if (chown(dest, getuid(), getgid()) < 0)",
          "311:   errExit(\"chown\");",
          "312:  if (chmod(dest, S_IRUSR | S_IWUSR) < 0)",
          "313:   errExit(\"chmod\");",
          "",
          "[Added Lines]",
          "208:  copy_file_as_user(src, dest, getuid(), getgid(), S_IRUSR | S_IWUSR); // regular user",
          "209:  fs_logger2(\"clone\", dest);",
          "",
          "---------------"
        ],
        "src/firejail/util.c||src/firejail/util.c": [
          "File: src/firejail/util.c -> src/firejail/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "213:  return 0;",
          "214: }",
          "217: int is_dir(const char *fname) {",
          "218:  assert(fname);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217: void copy_file_as_user(const char *srcname, const char *destname, uid_t uid, gid_t gid, mode_t mode) {",
          "218:  pid_t child = fork();",
          "219:  if (child < 0)",
          "220:   errExit(\"fork\");",
          "221:  if (child == 0) {",
          "223:   drop_privs(0);",
          "226:   int rv = copy_file(srcname, destname); // already a regular user",
          "227:   if (rv)",
          "228:    fprintf(stderr, \"Warning: cannot copy %s\\n\", srcname);",
          "229:   else {",
          "230:    if (chown(destname, uid, gid) == -1)",
          "231:     errExit(\"fchown\");",
          "232:    if (chmod(destname, mode) == -1)",
          "233:     errExit(\"fchmod\");",
          "234:   }",
          "235:   _exit(0);",
          "236:  }",
          "238:  waitpid(child, NULL, 0);",
          "239: }",
          "242: void touch_file_as_user(const char *fname, uid_t uid, gid_t gid, mode_t mode) {",
          "243:  pid_t child = fork();",
          "244:  if (child < 0)",
          "245:   errExit(\"fork\");",
          "246:  if (child == 0) {",
          "248:   drop_privs(0);",
          "250:   FILE *fp = fopen(fname, \"w\");",
          "251:   if (fp) {",
          "252:    fprintf(fp, \"\\n\");",
          "253:    SET_PERMS_STREAM(fp, uid, gid, mode);",
          "254:    fclose(fp);",
          "255:   }",
          "256:   _exit(0);",
          "257:  }",
          "259:  waitpid(child, NULL, 0);",
          "260: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "38d418505e9ee2d326557e5639e8da49c298858f",
      "candidate_info": {
        "commit_hash": "38d418505e9ee2d326557e5639e8da49c298858f",
        "repo": "netblue30/firejail",
        "commit_url": "https://github.com/netblue30/firejail/commit/38d418505e9ee2d326557e5639e8da49c298858f",
        "files": [
          "src/firejail/fs_home.c"
        ],
        "message": "security fix",
        "before_after_code_files": [
          "src/firejail/fs_home.c||src/firejail/fs_home.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/firejail/fs_home.c||src/firejail/fs_home.c": [
          "File: src/firejail/fs_home.c -> src/firejail/fs_home.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:   if (stat(fname, &s) == 0)",
          "44:    return;",
          "45:   if (stat(\"/etc/skel/.zshrc\", &s) == 0) {",
          "47:    fs_logger(\"clone /etc/skel/.zshrc\");",
          "48:   }",
          "49:   else {",
          "",
          "[Removed Lines]",
          "46:    copy_file(\"/etc/skel/.zshrc\", fname, u, g, 0644);",
          "",
          "[Added Lines]",
          "45:   if (is_link(fname)) { // stat on dangling symlinks fails, try again using lstat",
          "46:    fprintf(stderr, \"Error: invalid %s file\\n\", fname);",
          "47:    exit(1);",
          "48:   }",
          "50:    copy_file_as_user(\"/etc/skel/.zshrc\", fname, u, g, 0644);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:   if (stat(fname, &s) == 0)",
          "63:    return;",
          "64:   if (stat(\"/etc/skel/.cshrc\", &s) == 0) {",
          "66:    fs_logger(\"clone /etc/skel/.cshrc\");",
          "67:   }",
          "68:   else {",
          "",
          "[Removed Lines]",
          "65:    copy_file(\"/etc/skel/.cshrc\", fname, u, g, 0644);",
          "",
          "[Added Lines]",
          "68:   if (is_link(fname)) { // stat on dangling symlinks fails, try again using lstat",
          "69:    fprintf(stderr, \"Error: invalid %s file\\n\", fname);",
          "70:    exit(1);",
          "71:   }",
          "73:    copy_file_as_user(\"/etc/skel/.cshrc\", fname, u, g, 0644);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "81:   if (stat(fname, &s) == 0)",
          "82:    return;",
          "83:   if (stat(\"/etc/skel/.bashrc\", &s) == 0) {",
          "85:    fs_logger(\"clone /etc/skel/.bashrc\");",
          "86:   }",
          "87:   free(fname);",
          "",
          "[Removed Lines]",
          "84:    copy_file(\"/etc/skel/.bashrc\", fname, u, g, 0644);",
          "",
          "[Added Lines]",
          "91:   if (is_link(fname)) { // stat on dangling symlinks fails, try again using lstat",
          "92:    fprintf(stderr, \"Error: invalid %s file\\n\", fname);",
          "93:    exit(1);",
          "94:   }",
          "96:    copy_file_as_user(\"/etc/skel/.bashrc\", fname, u, g, 0644);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4f0e977ed3c60660ef28e17af3a0c6b216a4f94c",
      "candidate_info": {
        "commit_hash": "4f0e977ed3c60660ef28e17af3a0c6b216a4f94c",
        "repo": "netblue30/firejail",
        "commit_url": "https://github.com/netblue30/firejail/commit/4f0e977ed3c60660ef28e17af3a0c6b216a4f94c",
        "files": [
          "RELNOTES",
          "src/firejail/bandwidth.c"
        ],
        "message": "security fix",
        "before_after_code_files": [
          "src/firejail/bandwidth.c||src/firejail/bandwidth.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "src/firejail/bandwidth.c||src/firejail/bandwidth.c"
          ],
          "candidate": [
            "src/firejail/bandwidth.c||src/firejail/bandwidth.c"
          ]
        }
      },
      "candidate_diff": {
        "src/firejail/bandwidth.c||src/firejail/bandwidth.c": [
          "File: src/firejail/bandwidth.c -> src/firejail/bandwidth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "450:  if (setregid(0, 0))",
          "451:   errExit(\"setregid\");",
          "460:  char *arg[4];",
          "462:  arg[1] = \"-c\";",
          "463:  arg[2] = cmd;",
          "464:  arg[3] = NULL;",
          "",
          "[Removed Lines]",
          "453:  if (!cfg.shell)",
          "454:   cfg.shell = guess_shell();",
          "455:  if (!cfg.shell) {",
          "456:   fprintf(stderr, \"Error: no POSIX shell found, please use --shell command line option\\n\");",
          "457:   exit(1);",
          "458:  }",
          "461:  arg[0] = cfg.shell;",
          "",
          "[Added Lines]",
          "454:  arg[0] = \"/bin/sh\";",
          "",
          "---------------"
        ]
      }
    }
  ]
}