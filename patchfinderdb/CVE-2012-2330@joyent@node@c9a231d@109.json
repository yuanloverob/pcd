{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b1cce046467f7fb64710160c5122a7883b739729",
      "candidate_info": {
        "commit_hash": "b1cce046467f7fb64710160c5122a7883b739729",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/b1cce046467f7fb64710160c5122a7883b739729",
        "files": [
          "common.gypi",
          "configure"
        ],
        "message": "build: rename strict_aliasing to node_no_strict_aliasing\n\nMake the variable naming consistent with the other strict aliasing var,\nv8_no_strict_aliasing.",
        "before_after_code_files": [
          "common.gypi||common.gypi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "common.gypi||common.gypi": [
          "File: common.gypi -> common.gypi",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: {",
          "2:   'variables': {",
          "4:     'visibility%': 'hidden',         # V8's visibility setting",
          "5:     'target_arch%': 'ia32',          # set v8's target architecture",
          "6:     'host_arch%': 'ia32',            # set v8's host architecture",
          "",
          "[Removed Lines]",
          "3:     'strict_aliasing%': 'false',     # turn on/off -fstrict-aliasing",
          "",
          "[Added Lines]",
          "3:     'node_no_strict_aliasing%': 0,   # turn off -fstrict-aliasing",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:             # pull in V8's postmortem metadata",
          "53:             'ldflags': [ '-Wl,-z,allextract' ]",
          "54:           }],",
          "56:             'cflags': [ '-fno-strict-aliasing' ],",
          "57:           }],",
          "58:         ],",
          "",
          "[Removed Lines]",
          "55:           ['strict_aliasing!=\"true\"', {",
          "",
          "[Added Lines]",
          "55:           ['node_no_strict_aliasing==1', {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c8c638a84195e5571f4ece881375909e1f4b82a8",
      "candidate_info": {
        "commit_hash": "c8c638a84195e5571f4ece881375909e1f4b82a8",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/c8c638a84195e5571f4ece881375909e1f4b82a8",
        "files": [
          "src/node_buffer.h"
        ],
        "message": "buffer: change prototype of Data() and Length()\n\nMake Buffer:Data() and Buffer::Length() accept a Value instead of an Object.",
        "before_after_code_files": [
          "src/node_buffer.h||src/node_buffer.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_buffer.h||src/node_buffer.h": [
          "File: src/node_buffer.h -> src/node_buffer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:   static bool HasInstance(v8::Handle<v8::Value> val);",
          "77:   }",
          "79:   static inline char* Data(Buffer *b) {",
          "80:     return Buffer::Data(b->handle_);",
          "81:   }",
          "85:   }",
          "87:   static inline size_t Length(Buffer *b) {",
          "",
          "[Removed Lines]",
          "75:   static inline char* Data(v8::Handle<v8::Object> obj) {",
          "76:     return (char*)obj->GetIndexedPropertiesExternalArrayData();",
          "83:   static inline size_t Length(v8::Handle<v8::Object> obj) {",
          "84:     return (size_t)obj->GetIndexedPropertiesExternalArrayDataLength();",
          "",
          "[Added Lines]",
          "75:   static inline char* Data(v8::Handle<v8::Value> val) {",
          "76:     assert(val->IsObject());",
          "77:     void* data = val.As<v8::Object>()->GetIndexedPropertiesExternalArrayData();",
          "78:     return reinterpret_cast<char*>(data);",
          "85:   static inline size_t Length(v8::Handle<v8::Value> val) {",
          "86:     assert(val->IsObject());",
          "87:     int len = val.As<v8::Object>()",
          "88:               ->GetIndexedPropertiesExternalArrayDataLength();",
          "89:     return static_cast<size_t>(len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e21643d618a923a484b1f692ceeabffa6855e6cf",
      "candidate_info": {
        "commit_hash": "e21643d618a923a484b1f692ceeabffa6855e6cf",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/e21643d618a923a484b1f692ceeabffa6855e6cf",
        "files": [
          "tools/installer.js"
        ],
        "message": "build: fix npm-cli.js install",
        "before_after_code_files": [
          "tools/installer.js||tools/installer.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/installer.js||tools/installer.js": [
          "File: tools/installer.js -> tools/installer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:   if (variables.node_install_npm == 'true') {",
          "103:     copy('deps/npm', 'lib/node_modules/npm');",
          "105:                path.join(node_prefix, 'bin/npm'));",
          "106:   }",
          "107: } else {",
          "",
          "[Removed Lines]",
          "104:     queue.push('ln -sF ../lib/node_modules/npm/bin/npm-cli.js ' +",
          "",
          "[Added Lines]",
          "104:     queue.push('ln -sf ../lib/node_modules/npm/bin/npm-cli.js ' +",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4cfd64e0db47cf5fcf03b3a98071230e4d825f21",
      "candidate_info": {
        "commit_hash": "4cfd64e0db47cf5fcf03b3a98071230e4d825f21",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/4cfd64e0db47cf5fcf03b3a98071230e4d825f21",
        "files": [
          "deps/uv/src/win/process.c"
        ],
        "message": "uv: upgrade to abc945b",
        "before_after_code_files": [
          "deps/uv/src/win/process.c||deps/uv/src/win/process.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/src/win/process.c||deps/uv/src/win/process.c": [
          "File: deps/uv/src/win/process.c -> deps/uv/src/win/process.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: typedef struct env_var {",
          "38:   const char* narrow;",
          "39:   const WCHAR* wide;",
          "41:   int supplied;",
          "43: } env_var_t;",
          "45: #define E_V(str) { str \"=\", L##str, sizeof(str), 0, 0 }",
          "",
          "[Removed Lines]",
          "42:   int value_len;",
          "",
          "[Added Lines]",
          "41:   DWORD value_len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104: static WCHAR* search_path_join_test(const WCHAR* dir,",
          "112:   WCHAR *result, *result_pos;",
          "113:   DWORD attrs;",
          "",
          "[Removed Lines]",
          "105:                                       int dir_len,",
          "106:                                       const WCHAR* name,",
          "107:                                       int name_len,",
          "108:                                       const WCHAR* ext,",
          "109:                                       int ext_len,",
          "110:                                       const WCHAR* cwd,",
          "111:                                       int cwd_len) {",
          "",
          "[Added Lines]",
          "105:                                     size_t dir_len,",
          "106:                                     const WCHAR* name,",
          "107:                                     size_t name_len,",
          "108:                                     const WCHAR* ext,",
          "109:                                     size_t ext_len,",
          "110:                                     const WCHAR* cwd,",
          "111:                                     size_t cwd_len) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "195: static WCHAR* path_search_walk_ext(const WCHAR *dir,",
          "202:   WCHAR* result;",
          "",
          "[Removed Lines]",
          "196:                                      int dir_len,",
          "197:                                      const WCHAR *name,",
          "198:                                      int name_len,",
          "199:                                      WCHAR *cwd,",
          "200:                                      int cwd_len,",
          "201:                                      int name_has_ext) {",
          "",
          "[Added Lines]",
          "196:                                    size_t dir_len,",
          "197:                                    const WCHAR *name,",
          "198:                                    size_t name_len,",
          "199:                                    WCHAR *cwd,",
          "200:                                    size_t cwd_len,",
          "201:                                    int name_has_ext) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "281:   WCHAR *file_name_start;",
          "282:   WCHAR *dot;",
          "283:   const WCHAR *dir_start, *dir_end, *dir_path;",
          "285:   int name_has_ext;",
          "",
          "[Removed Lines]",
          "284:   int dir_len;",
          "287:   int file_len = wcslen(file);",
          "288:   int cwd_len = wcslen(cwd);",
          "",
          "[Added Lines]",
          "284:   size_t dir_len;",
          "287:   size_t file_len = wcslen(file);",
          "288:   size_t cwd_len = wcslen(cwd);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "382: WCHAR* quote_cmd_arg(const WCHAR *source, WCHAR *target) {",
          "385:   WCHAR* start;",
          "",
          "[Removed Lines]",
          "383:   int len = wcslen(source),",
          "384:       i, quote_hit;",
          "",
          "[Added Lines]",
          "383:   size_t len = wcslen(source);",
          "384:   size_t i;",
          "385:   int quote_hit;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "513:                                   -1,",
          "514:                                   temp_buffer,",
          "516:     if (arg_len == 0) {",
          "517:       goto error;",
          "518:     }",
          "",
          "[Removed Lines]",
          "515:                                   dst + dst_len - pos);",
          "",
          "[Added Lines]",
          "516:                                   (int) (dst + dst_len - pos));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "552:     const char* var) {",
          "553:   int i;",
          "555:     if (_strnicmp(required[i].narrow, var, required[i].len) == 0) {",
          "556:       required[i].supplied =  1;",
          "557:       return;",
          "",
          "[Removed Lines]",
          "551: static void check_required_vars_contains_var(env_var_t* required, int size,",
          "554:   for (i = 0; i < size; ++i) {",
          "",
          "[Added Lines]",
          "552: static void check_required_vars_contains_var(env_var_t* required, int count,",
          "555:   for (i = 0; i < count; ++i) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "575:   WCHAR* dst;",
          "576:   WCHAR* ptr;",
          "577:   char** env;",
          "579:   int len;",
          "580:   int i;",
          "581:   DWORD var_size;",
          "",
          "[Removed Lines]",
          "574: WCHAR* make_program_env(char** env_block) {",
          "",
          "[Added Lines]",
          "575: uv_err_t make_program_env(char* env_block[], WCHAR** dst_ptr) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "587:   };",
          "589:   for (env = env_block; *env; env++) {",
          "590:     check_required_vars_contains_var(required_vars,",
          "591:                                      ARRAY_SIZE(required_vars),",
          "594:   }",
          "596:   for (i = 0; i < ARRAY_SIZE(required_vars); ++i) {",
          "597:     if (!required_vars[i].supplied) {",
          "599:       var_size = GetEnvironmentVariableW(required_vars[i].wide, NULL, 0);",
          "600:       if (var_size == 0) {",
          "602:       }",
          "605:     }",
          "606:   }",
          "609:   if (!dst) {",
          "611:   }",
          "613:   ptr = dst;",
          "615:   for (env = env_block; *env; env++, ptr += len) {",
          "618:       free(dst);",
          "620:     }",
          "621:   }",
          "",
          "[Removed Lines]",
          "593:     env_len += (uv_utf8_to_utf16(*env, NULL, 0) * sizeof(WCHAR));",
          "598:       env_len += required_vars[i].len * sizeof(WCHAR);",
          "601:         uv_fatal_error(GetLastError(), \"GetEnvironmentVariableW\");",
          "603:       required_vars[i].value_len = (int)var_size;",
          "604:       env_len += (int)var_size * sizeof(WCHAR);",
          "608:   dst = malloc(env_len);",
          "610:     uv_fatal_error(ERROR_OUTOFMEMORY, \"malloc\");",
          "616:     len = uv_utf8_to_utf16(*env, ptr, (size_t)(env_len - (ptr - dst)));",
          "617:     if (!len) {",
          "619:       return NULL;",
          "",
          "[Added Lines]",
          "591:     int len;",
          "596:     len = MultiByteToWideChar(CP_UTF8,",
          "597:                               0,",
          "599:                               -1,",
          "600:                               NULL,",
          "601:                               0);",
          "602:     if (len <= 0) {",
          "603:       return uv__new_sys_error(GetLastError());",
          "604:     }",
          "606:     env_len += len;",
          "611:       env_len += required_vars[i].len;",
          "614:         return uv__new_sys_error(GetLastError());",
          "616:       required_vars[i].value_len = var_size;",
          "617:       env_len += var_size;",
          "621:   dst = malloc(env_len * sizeof(WCHAR));",
          "623:     return uv__new_artificial_error(UV_ENOMEM);",
          "629:     len = MultiByteToWideChar(CP_UTF8,",
          "630:                               0,",
          "632:                               -1,",
          "633:                               ptr,",
          "634:                               (int) (env_len - (ptr - dst)));",
          "635:     if (len <= 0) {",
          "637:       return uv__new_sys_error(GetLastError());",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "635:     }",
          "636:   }",
          "640: }",
          "",
          "[Removed Lines]",
          "639:   return dst;",
          "",
          "[Added Lines]",
          "660:   return uv_ok_;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "774:   if (err.code != UV_OK)",
          "775:     goto done;",
          "777:   if (options.cwd) {",
          "779:     err = uv_utf8_to_utf16_alloc(options.cwd, &cwd);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "798:   if (options.env) {",
          "799:      err = make_program_env(options.env, &env);",
          "800:      if (err.code != UV_OK)",
          "801:        goto done;",
          "802:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4e5247772da5293a109dfff78a9eff89eb5eabdf",
      "candidate_info": {
        "commit_hash": "4e5247772da5293a109dfff78a9eff89eb5eabdf",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/4e5247772da5293a109dfff78a9eff89eb5eabdf",
        "files": [
          "src/handle_wrap.cc",
          "src/node_file.cc"
        ],
        "message": "fs, handle_wrap: use Loop(), not uv_default_loop()\n\nUsing the default loop will fail in unexpected and interesting ways when\nisolates are used.",
        "before_after_code_files": [
          "src/handle_wrap.cc||src/handle_wrap.cc",
          "src/node_file.cc||src/node_file.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/handle_wrap.cc||src/handle_wrap.cc": [
          "File: src/handle_wrap.cc -> src/handle_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:   }",
          "91:   wrap->unref = false;",
          "94:   return v8::Undefined();",
          "95: }",
          "",
          "[Removed Lines]",
          "92:   uv_ref(uv_default_loop());",
          "",
          "[Added Lines]",
          "92:   uv_ref(Loop());",
          "",
          "---------------"
        ],
        "src/node_file.cc||src/node_file.cc": [
          "File: src/node_file.cc -> src/node_file.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "234:     uv_fs_t* req = &req_wrap->req_;                               \\",
          "235:     req->result = r;                                              \\",
          "236:     req->path = NULL;                                             \\",
          "238:     After(req);                                                   \\",
          "239:   }                                                               \\",
          "240:   return scope.Close(req_wrap->object_);",
          "",
          "[Removed Lines]",
          "237:     req->errorno = uv_last_error(uv_default_loop()).code;         \\",
          "",
          "[Added Lines]",
          "237:     req->errorno = uv_last_error(Loop()).code;                    \\",
          "",
          "---------------"
        ]
      }
    }
  ]
}