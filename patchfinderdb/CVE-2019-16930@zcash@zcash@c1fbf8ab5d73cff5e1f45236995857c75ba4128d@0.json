{
  "cve_id": "CVE-2019-16930",
  "cve_desc": "Zcashd in Zcash before 2.0.7-3 allows discovery of the IP address of a full node that owns a shielded address, related to mishandling of exceptions during deserialization of note plaintexts. This affects anyone who has disclosed their zaddr to a third party.",
  "repo": "zcash/zcash",
  "patch_hash": "c1fbf8ab5d73cff5e1f45236995857c75ba4128d",
  "patch_info": {
    "commit_hash": "c1fbf8ab5d73cff5e1f45236995857c75ba4128d",
    "repo": "zcash/zcash",
    "commit_url": "https://github.com/zcash/zcash/commit/c1fbf8ab5d73cff5e1f45236995857c75ba4128d",
    "files": [
      "src/zcash/Note.cpp"
    ],
    "message": "Ignore exceptions when deserializing note plaintexts",
    "before_after_code_files": [
      "src/zcash/Note.cpp||src/zcash/Note.cpp"
    ]
  },
  "patch_diff": {
    "src/zcash/Note.cpp||src/zcash/Note.cpp": [
      "File: src/zcash/Note.cpp -> src/zcash/Note.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "173:     }",
      "185: }",
      "187: boost::optional<SaplingNotePlaintext> SaplingNotePlaintext::decrypt(",
      "",
      "[Removed Lines]",
      "176:     CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);",
      "177:     ss << pt.get();",
      "179:     SaplingOutgoingPlaintext ret;",
      "180:     ss >> ret;",
      "182:     assert(ss.size() == 0);",
      "184:     return ret;",
      "",
      "[Added Lines]",
      "176:     try {",
      "177:         CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);",
      "178:         ss << pt.get();",
      "180:         SaplingOutgoingPlaintext ret;",
      "181:         ss >> ret;",
      "183:         assert(ss.size() == 0);",
      "185:         return ret;",
      "186:     } catch (const boost::thread_interrupted&) {",
      "187:         throw;",
      "188:     } catch (...) {",
      "189:         return boost::none;",
      "190:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "197:     }",
      "203:     SaplingNotePlaintext ret;",
      "208:     uint256 pk_d;",
      "209:     if (!librustzcash_ivk_to_pkd(ivk.begin(), ret.d.data(), pk_d.begin())) {",
      "",
      "[Removed Lines]",
      "200:     CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);",
      "201:     ss << pt.get();",
      "204:     ss >> ret;",
      "206:     assert(ss.size() == 0);",
      "",
      "[Added Lines]",
      "207:     try {",
      "208:         CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);",
      "209:         ss << pt.get();",
      "210:         ss >> ret;",
      "211:         assert(ss.size() == 0);",
      "212:     } catch (const boost::thread_interrupted&) {",
      "213:         throw;",
      "214:     } catch (...) {",
      "215:         return boost::none;",
      "216:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "243:     }",
      "249:     SaplingNotePlaintext ret;",
      "252:     uint256 cmu_expected;",
      "253:     if (!librustzcash_sapling_compute_cm(",
      "",
      "[Removed Lines]",
      "246:     CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);",
      "247:     ss << pt.get();",
      "250:     ss >> ret;",
      "",
      "[Added Lines]",
      "257:     try {",
      "258:         CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);",
      "259:         ss << pt.get();",
      "260:         ss >> ret;",
      "261:         assert(ss.size() == 0);",
      "262:     } catch (const boost::thread_interrupted&) {",
      "263:         throw;",
      "264:     } catch (...) {",
      "265:         return boost::none;",
      "266:     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "265:         return boost::none;",
      "266:     }",
      "270:     return ret;",
      "271: }",
      "",
      "[Removed Lines]",
      "268:     assert(ss.size() == 0);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d917c11572e44b80cec8d61b5f8e9503f7c6b6d8",
      "candidate_info": {
        "commit_hash": "d917c11572e44b80cec8d61b5f8e9503f7c6b6d8",
        "repo": "zcash/zcash",
        "commit_url": "https://github.com/zcash/zcash/commit/d917c11572e44b80cec8d61b5f8e9503f7c6b6d8",
        "files": [
          "src/wallet/wallet.cpp",
          "src/wallet/wallet.h"
        ],
        "message": "SetMerkleBranch: remove unused code, remove cs_main lock requirement\n\nIncludes equivalent changes to bitcoin/bitcoin#9446",
        "before_after_code_files": [
          "src/wallet/wallet.cpp||src/wallet/wallet.cpp",
          "src/wallet/wallet.h||src/wallet/wallet.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/zcash/zcash/pull/4144"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/wallet/wallet.cpp||src/wallet/wallet.cpp": [
          "File: src/wallet/wallet.cpp -> src/wallet/wallet.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "4387:     nTimeExpires = nExpires;",
          "4388: }",
          "4391: {",
          "4393:     CBlock blockTmp;",
          "",
          "[Removed Lines]",
          "4390: int CMerkleTx::SetMerkleBranch(const CBlock& block)",
          "4392:     AssertLockHeld(cs_main);",
          "",
          "[Added Lines]",
          "4390: void CMerkleTx::SetMerkleBranch(const CBlock& block)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4404:         vMerkleBranch.clear();",
          "4405:         nIndex = -1;",
          "4406:         LogPrintf(\"ERROR: SetMerkleBranch(): couldn't find tx in block\\n\");",
          "4408:     }",
          "4411:     vMerkleBranch = block.GetMerkleBranch(nIndex);",
          "4422: }",
          "4424: int CMerkleTx::GetDepthInMainChainINTERNAL(const CBlockIndex* &pindexRet) const",
          "",
          "[Removed Lines]",
          "4407:         return 0;",
          "4414:     BlockMap::iterator mi = mapBlockIndex.find(hashBlock);",
          "4415:     if (mi == mapBlockIndex.end())",
          "4416:         return 0;",
          "4417:     const CBlockIndex* pindex = (*mi).second;",
          "4418:     if (!pindex || !chainActive.Contains(pindex))",
          "4419:         return 0;",
          "4421:     return chainActive.Height() - pindex->nHeight + 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wallet/wallet.h||src/wallet/wallet.h": [
          "File: src/wallet/wallet.h -> src/wallet/wallet.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "374:         READWRITE(nIndex);",
          "375:     }",
          "",
          "[Removed Lines]",
          "377:     int SetMerkleBranch(const CBlock& block);",
          "",
          "[Added Lines]",
          "377:     void SetMerkleBranch(const CBlock& block);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1e11ffb6bb9fd55d8fb480dff4b41aca63b94ab8",
      "candidate_info": {
        "commit_hash": "1e11ffb6bb9fd55d8fb480dff4b41aca63b94ab8",
        "repo": "zcash/zcash",
        "commit_url": "https://github.com/zcash/zcash/commit/1e11ffb6bb9fd55d8fb480dff4b41aca63b94ab8",
        "files": [
          "README.md",
          "configure.ac",
          "contrib/gitian-descriptors/gitian-linux.yml",
          "src/clientversion.h"
        ],
        "message": "make-release.py: Versioning changes for 2.0.7-3.",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/clientversion.h||src/clientversion.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/zcash/zcash/pull/4144"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: define(_CLIENT_VERSION_MAJOR, 2)",
          "4: define(_CLIENT_VERSION_MINOR, 0)",
          "5: define(_CLIENT_VERSION_REVISION, 7)",
          "7: define(_ZC_BUILD_VAL, m4_if(m4_eval(_CLIENT_VERSION_BUILD < 25), 1, m4_incr(_CLIENT_VERSION_BUILD), m4_eval(_CLIENT_VERSION_BUILD < 50), 1, m4_eval(_CLIENT_VERSION_BUILD - 24), m4_eval(_CLIENT_VERSION_BUILD == 50), 1, , m4_eval(_CLIENT_VERSION_BUILD - 50)))",
          "8: define(_CLIENT_VERSION_SUFFIX, m4_if(m4_eval(_CLIENT_VERSION_BUILD < 25), 1, _CLIENT_VERSION_REVISION-beta$1, m4_eval(_CLIENT_VERSION_BUILD < 50), 1, _CLIENT_VERSION_REVISION-rc$1, m4_eval(_CLIENT_VERSION_BUILD == 50), 1, _CLIENT_VERSION_REVISION, _CLIENT_VERSION_REVISION-$1)))",
          "9: define(_CLIENT_VERSION_IS_RELEASE, true)",
          "",
          "[Removed Lines]",
          "6: define(_CLIENT_VERSION_BUILD, 52)",
          "",
          "[Added Lines]",
          "6: define(_CLIENT_VERSION_BUILD, 53)",
          "",
          "---------------"
        ],
        "src/clientversion.h||src/clientversion.h": [
          "File: src/clientversion.h -> src/clientversion.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #define CLIENT_VERSION_MAJOR 2",
          "19: #define CLIENT_VERSION_MINOR 0",
          "20: #define CLIENT_VERSION_REVISION 7",
          "24: #define CLIENT_VERSION_IS_RELEASE true",
          "",
          "[Removed Lines]",
          "21: #define CLIENT_VERSION_BUILD 52",
          "",
          "[Added Lines]",
          "21: #define CLIENT_VERSION_BUILD 53",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5ae7b70ae644ee52b6ebcd76ea2957225c8aa4b5",
      "candidate_info": {
        "commit_hash": "5ae7b70ae644ee52b6ebcd76ea2957225c8aa4b5",
        "repo": "zcash/zcash",
        "commit_url": "https://github.com/zcash/zcash/commit/5ae7b70ae644ee52b6ebcd76ea2957225c8aa4b5",
        "files": [
          "src/init.cpp"
        ],
        "message": "Disable -shrinkdebugfile command",
        "before_after_code_files": [
          "src/init.cpp||src/init.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/zcash/zcash/pull/4144"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/init.cpp||src/init.cpp": [
          "File: src/init.cpp -> src/init.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "483:         strUsage += HelpMessageOpt(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"",
          "484:             \"This is intended for regression testing tools and app development.\");",
          "485:     }",
          "487:     strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test network\"));",
          "489:     strUsage += HelpMessageGroup(_(\"Node relay options:\"));",
          "",
          "[Removed Lines]",
          "486:     strUsage += HelpMessageOpt(\"-shrinkdebugfile\", _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\"));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1191: #ifndef WIN32",
          "1192:     CreatePidFile(GetPidFile(), getpid());",
          "1193: #endif",
          "1197:     if (fPrintToDebugLog)",
          "1198:         OpenDebugLog();",
          "",
          "[Removed Lines]",
          "1194:     if (GetBoolArg(\"-shrinkdebugfile\", !fDebug))",
          "1195:         ShrinkDebugFile();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9d8322a3418ca0fbdc31cb684e392af86663927f",
      "candidate_info": {
        "commit_hash": "9d8322a3418ca0fbdc31cb684e392af86663927f",
        "repo": "zcash/zcash",
        "commit_url": "https://github.com/zcash/zcash/commit/9d8322a3418ca0fbdc31cb684e392af86663927f",
        "files": [
          "qa/rpc-tests/test_framework/util.py",
          "src/rpc/blockchain.cpp",
          "src/txmempool.cpp",
          "src/txmempool.h"
        ],
        "message": "Enable RPC tests to wait on mempool notifications",
        "before_after_code_files": [
          "qrpc-tests/test_framework/util.py||qa/rpc-tests/test_framework/util.py",
          "src/rpc/blockchain.cpp||src/rpc/blockchain.cpp",
          "src/txmempool.cpp||src/txmempool.cpp",
          "src/txmempool.h||src/txmempool.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/zcash/zcash/pull/4144"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "qrpc-tests/test_framework/util.py||qa/rpc-tests/test_framework/util.py": [
          "File: qrpc-tests/test_framework/util.py -> qa/rpc-tests/test_framework/util.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:     pools, and has notified all internal listeners of them",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:     # Now that the mempools are in sync, wait for the internal",
          "73:     # notifications to finish",
          "74:     while True:",
          "75:         notified = [ x.getmempoolinfo()['fullyNotified'] for x in rpc_connections ]",
          "76:         if notified == [ True ] * len(notified):",
          "77:             break",
          "78:         time.sleep(wait)",
          "",
          "---------------"
        ],
        "src/rpc/blockchain.cpp||src/rpc/blockchain.cpp": [
          "File: src/rpc/blockchain.cpp -> src/rpc/blockchain.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1185:     ret.push_back(Pair(\"bytes\", (int64_t) mempool.GetTotalTxSize()));",
          "1186:     ret.push_back(Pair(\"usage\", (int64_t) mempool.DynamicMemoryUsage()));",
          "1188:     return ret;",
          "1189: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1188:     if (Params().NetworkIDString() == \"regtest\") {",
          "1189:         ret.push_back(Pair(\"fullyNotified\", mempool.IsFullyNotified()));",
          "1190:     }",
          "",
          "---------------"
        ],
        "src/txmempool.cpp||src/txmempool.cpp": [
          "File: src/txmempool.cpp -> src/txmempool.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:     mapTx.insert(entry);",
          "106:     const CTransaction& tx = mapTx.find(hash)->GetTx();",
          "107:     mapRecentlyAddedTx[tx.GetHash()] = &tx;",
          "108:     for (unsigned int i = 0; i < tx.vin.size(); i++)",
          "109:         mapNextTx[tx.vin[i].prevout] = CInPoint(&tx, i);",
          "110:     BOOST_FOREACH(const JSDescription &joinsplit, tx.vJoinSplit) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108:     nRecentlyAddedSequence += 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "730: void CTxMemPool::NotifyRecentlyAdded()",
          "731: {",
          "732:     std::vector<CTransaction> txs;",
          "733:     {",
          "734:         LOCK(cs);",
          "735:         for (const auto& kv : mapRecentlyAddedTx) {",
          "736:             txs.push_back(*(kv.second));",
          "737:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "733:     uint64_t recentlyAddedSequence;",
          "737:         recentlyAddedSequence = nRecentlyAddedSequence;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "753:             PrintExceptionContinue(NULL, \"CTxMemPool::NotifyRecentlyAdded()\");",
          "754:         }",
          "755:     }",
          "756: }",
          "758: CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView *baseIn, CTxMemPool &mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "762:     if (Params().NetworkIDString() == \"regtest\") {",
          "763:         LOCK(cs);",
          "764:         nNotifiedSequence = recentlyAddedSequence;",
          "765:     }",
          "766: }",
          "768: bool CTxMemPool::IsFullyNotified() {",
          "769:     assert(Params().NetworkIDString() == \"regtest\");",
          "770:     LOCK(cs);",
          "771:     return nRecentlyAddedSequence == nNotifiedSequence;",
          "",
          "---------------"
        ],
        "src/txmempool.h||src/txmempool.h": [
          "File: src/txmempool.h -> src/txmempool.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:     uint64_t cachedInnerUsage; //!< sum of dynamic memory usage of all the map elements (NOT the maps themselves)",
          "136:     std::map<uint256, const CTransaction*> mapRecentlyAddedTx;",
          "137:     std::map<uint256, const CTransaction*> mapSproutNullifiers;",
          "138:     std::map<uint256, const CTransaction*> mapSaplingNullifiers;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137:     uint64_t nRecentlyAddedSequence = 0;",
          "138:     uint64_t nNotifiedSequence = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "219:     bool nullifierExists(const uint256& nullifier, ShieldedType type) const;",
          "221:     void NotifyRecentlyAdded();",
          "223:     unsigned long size()",
          "224:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "225:     bool IsFullyNotified();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7c8111f30471aa028820a5da441df34844a20ac8",
      "candidate_info": {
        "commit_hash": "7c8111f30471aa028820a5da441df34844a20ac8",
        "repo": "zcash/zcash",
        "commit_url": "https://github.com/zcash/zcash/commit/7c8111f30471aa028820a5da441df34844a20ac8",
        "files": [
          "src/wallet/wallet.cpp"
        ],
        "message": "Remove cs_main lock requirement from CWallet::SyncTransaction\n\nSetMerkleBranch was the only call underneath SyncTransaction that\nrequired the cs_main lock.",
        "before_after_code_files": [
          "src/wallet/wallet.cpp||src/wallet/wallet.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/zcash/zcash/pull/4144"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/wallet/wallet.cpp||src/wallet/wallet.cpp": [
          "File: src/wallet/wallet.cpp -> src/wallet/wallet.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1704: void CWallet::SyncTransaction(const CTransaction& tx, const CBlock* pblock)",
          "1705: {",
          "1707:     if (!AddToWalletIfInvolvingMe(tx, pblock, true))",
          "1708:         return; // Not one of ours",
          "",
          "[Removed Lines]",
          "1706:     LOCK2(cs_main, cs_wallet);",
          "",
          "[Added Lines]",
          "1706:     LOCK(cs_wallet);",
          "",
          "---------------"
        ]
      }
    }
  ]
}