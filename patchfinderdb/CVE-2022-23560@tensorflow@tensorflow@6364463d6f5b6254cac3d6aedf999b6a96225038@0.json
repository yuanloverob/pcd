{
  "cve_id": "CVE-2022-23560",
  "cve_desc": "Tensorflow is an Open Source Machine Learning Framework. An attacker can craft a TFLite model that would allow limited reads and writes outside of arrays in TFLite. This exploits missing validation in the conversion from sparse tensors to dense tensors. The fix is included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range. Users are advised to upgrade as soon as possible.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "6364463d6f5b6254cac3d6aedf999b6a96225038",
  "patch_info": {
    "commit_hash": "6364463d6f5b6254cac3d6aedf999b6a96225038",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/6364463d6f5b6254cac3d6aedf999b6a96225038",
    "files": [
      "tensorflow/lite/kernels/internal/utils/sparsity_format_converter.cc"
    ],
    "message": "[lite] Add some safety checks to avoid out of bound access for sparsity format\n\nPiperOrigin-RevId: 416910386\nChange-Id: Ic0b4dc048dc4b5a6309c572b8c4c9f776e4db60a",
    "before_after_code_files": [
      "tensorflow/lite/kernels/internal/utils/sparsity_format_converter.cc||tensorflow/lite/kernels/internal/utils/sparsity_format_converter.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/lite/kernels/internal/utils/sparsity_format_converter.cc||tensorflow/lite/kernels/internal/utils/sparsity_format_converter.cc": [
      "File: tensorflow/lite/kernels/internal/utils/sparsity_format_converter.cc -> tensorflow/lite/kernels/internal/utils/sparsity_format_converter.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "282:   block_size_.resize(block_map_.size());",
      "283:   for (int i = 0; i < original_rank; i++) {",
      "284:     if (block_dim < block_map_.size() && block_map_[block_dim] == i) {",
      "289:     } else {",
      "290:       blocked_shape_[i] = dense_shape_[i];",
      "291:     }",
      "",
      "[Removed Lines]",
      "285:       int orig_dim = traversal_order_[original_rank + block_dim];",
      "286:       block_size_[block_dim] = dense_size[orig_dim];",
      "287:       blocked_shape_[i] = dense_shape_[i] / dense_size[orig_dim];",
      "288:       block_dim++;",
      "",
      "[Added Lines]",
      "285:       if (original_rank + block_dim < traversal_order_.size()) {",
      "286:         int orig_dim = traversal_order_[original_rank + block_dim];",
      "287:         block_size_[block_dim] = dense_size[orig_dim];",
      "288:         blocked_shape_[i] = dense_shape_[i] / dense_size[orig_dim];",
      "289:         block_dim++;",
      "290:       }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "328:       Populate(src_data, indices, level + 1, prev_idx * shape_of_level + i,",
      "329:                src_data_ptr, dest_data);",
      "330:     }",
      "332:     const auto& array_segments = dim_metadata_[metadata_idx];",
      "333:     const auto& array_indices = dim_metadata_[metadata_idx + 1];",
      "334:     for (int i = array_segments[prev_idx]; i < array_segments[prev_idx + 1];",
      "335:          i++) {",
      "338:     }",
      "339:   }",
      "340: }",
      "",
      "[Removed Lines]",
      "331:   } else {",
      "336:       indices[level] = array_indices[i];",
      "337:       Populate(src_data, indices, level + 1, i, src_data_ptr, dest_data);",
      "",
      "[Added Lines]",
      "333:   } else if (prev_idx + 1 < dim_metadata_[metadata_idx].size()) {",
      "338:       if (i < array_indices.size() && level < indices.size()) {",
      "339:         indices[level] = array_indices[i];",
      "340:         Populate(src_data, indices, level + 1, i, src_data_ptr, dest_data);",
      "341:       }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "864a7e46f49f3e610ceebd184a27c44bea3c8194",
      "candidate_info": {
        "commit_hash": "864a7e46f49f3e610ceebd184a27c44bea3c8194",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/864a7e46f49f3e610ceebd184a27c44bea3c8194",
        "files": [
          "tensorflow/lite/kernels/internal/utils/sparsity_format_converter.cc"
        ],
        "message": "[lite] Add some safety checks to avoid out of bound access for sparsity format\n\nPiperOrigin-RevId: 416910386\nChange-Id: Ic0b4dc048dc4b5a6309c572b8c4c9f776e4db60a",
        "before_after_code_files": [
          "tensorflow/lite/kernels/internal/utils/sparsity_format_converter.cc||tensorflow/lite/kernels/internal/utils/sparsity_format_converter.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/internal/utils/sparsity_format_converter.cc||tensorflow/lite/kernels/internal/utils/sparsity_format_converter.cc"
          ],
          "candidate": [
            "tensorflow/lite/kernels/internal/utils/sparsity_format_converter.cc||tensorflow/lite/kernels/internal/utils/sparsity_format_converter.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/internal/utils/sparsity_format_converter.cc||tensorflow/lite/kernels/internal/utils/sparsity_format_converter.cc": [
          "File: tensorflow/lite/kernels/internal/utils/sparsity_format_converter.cc -> tensorflow/lite/kernels/internal/utils/sparsity_format_converter.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "282:   block_size_.resize(block_map_.size());",
          "283:   for (int i = 0; i < original_rank; i++) {",
          "284:     if (block_dim < block_map_.size() && block_map_[block_dim] == i) {",
          "289:     } else {",
          "290:       blocked_shape_[i] = dense_shape_[i];",
          "291:     }",
          "",
          "[Removed Lines]",
          "285:       int orig_dim = traversal_order_[original_rank + block_dim];",
          "286:       block_size_[block_dim] = dense_size[orig_dim];",
          "287:       blocked_shape_[i] = dense_shape_[i] / dense_size[orig_dim];",
          "288:       block_dim++;",
          "",
          "[Added Lines]",
          "285:       if (original_rank + block_dim < traversal_order_.size()) {",
          "286:         int orig_dim = traversal_order_[original_rank + block_dim];",
          "287:         block_size_[block_dim] = dense_size[orig_dim];",
          "288:         blocked_shape_[i] = dense_shape_[i] / dense_size[orig_dim];",
          "289:         block_dim++;",
          "290:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "328:       Populate(src_data, indices, level + 1, prev_idx * shape_of_level + i,",
          "329:                src_data_ptr, dest_data);",
          "330:     }",
          "332:     const auto& array_segments = dim_metadata_[metadata_idx];",
          "333:     const auto& array_indices = dim_metadata_[metadata_idx + 1];",
          "334:     for (int i = array_segments[prev_idx]; i < array_segments[prev_idx + 1];",
          "335:          i++) {",
          "338:     }",
          "339:   }",
          "340: }",
          "",
          "[Removed Lines]",
          "331:   } else {",
          "336:       indices[level] = array_indices[i];",
          "337:       Populate(src_data, indices, level + 1, i, src_data_ptr, dest_data);",
          "",
          "[Added Lines]",
          "333:   } else if (prev_idx + 1 < dim_metadata_[metadata_idx].size()) {",
          "338:       if (i < array_indices.size() && level < indices.size()) {",
          "339:         indices[level] = array_indices[i];",
          "340:         Populate(src_data, indices, level + 1, i, src_data_ptr, dest_data);",
          "341:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9b0261161e13f898b55f6dc68eae756bd0c7b901",
      "candidate_info": {
        "commit_hash": "9b0261161e13f898b55f6dc68eae756bd0c7b901",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/9b0261161e13f898b55f6dc68eae756bd0c7b901",
        "files": [
          "tensorflow/lite/tools/optimize/sparsity/format_converter.cc"
        ],
        "message": "[lite] Add some safety checks to avoid out of bound access for sparsity format\n\nPiperOrigin-RevId: 416910386\nChange-Id: Ic0b4dc048dc4b5a6309c572b8c4c9f776e4db60a",
        "before_after_code_files": [
          "tensorflow/lite/tools/optimize/sparsity/format_converter.cc||tensorflow/lite/tools/optimize/sparsity/format_converter.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tensorflow/lite/tools/optimize/sparsity/format_converter.cc||tensorflow/lite/tools/optimize/sparsity/format_converter.cc": [
          "File: tensorflow/lite/tools/optimize/sparsity/format_converter.cc -> tensorflow/lite/tools/optimize/sparsity/format_converter.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "245:   block_size_.resize(block_map_.size());",
          "246:   for (int i = 0; i < original_rank; i++) {",
          "247:     if (block_dim < block_map_.size() && block_map_[block_dim] == i) {",
          "252:     } else {",
          "253:       blocked_shape_[i] = shape[i];",
          "254:     }",
          "",
          "[Removed Lines]",
          "248:       int orig_dim = traversal_order_[original_rank + block_dim];",
          "249:       block_size_[block_dim] = sparsity.dim_metadata[orig_dim].dense_size;",
          "250:       blocked_shape_[i] = shape[i] / sparsity.dim_metadata[orig_dim].dense_size;",
          "251:       block_dim++;",
          "",
          "[Added Lines]",
          "248:       if (original_rank + block_dim < traversal_order_.size()) {",
          "249:         int orig_dim = traversal_order_[original_rank + block_dim];",
          "250:         block_size_[block_dim] = sparsity.dim_metadata[orig_dim].dense_size;",
          "251:         blocked_shape_[i] = shape[i] / sparsity.dim_metadata[orig_dim].dense_size;",
          "252:         block_dim++;",
          "253:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "291:       Populate(src_data, indices, level + 1, prev_idx * shape_of_level + i,",
          "292:                src_data_ptr, dest_data);",
          "293:     }",
          "295:     const auto& array_segments = dim_metadata_[metadata_idx];",
          "296:     const auto& array_indices = dim_metadata_[metadata_idx + 1];",
          "297:     for (int i = array_segments[prev_idx]; i < array_segments[prev_idx + 1];",
          "298:          i++) {",
          "301:     }",
          "302:   }",
          "303: }",
          "",
          "[Removed Lines]",
          "294:   } else {",
          "299:       indices[level] = array_indices[i];",
          "300:       Populate(src_data, indices, level + 1, i, src_data_ptr, dest_data);",
          "",
          "[Added Lines]",
          "296:   } else if (prev_idx + 1 < dim_metadata_[metadata_idx].size()) {",
          "301:       if (i < array_indices.size() && level < indices.size()) {",
          "302:         indices[level] = array_indices[i];",
          "303:         Populate(src_data, indices, level + 1, i, src_data_ptr, dest_data);",
          "304:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1ced8d1d8bc2f84adc2adfbbcccb85e722694134",
      "candidate_info": {
        "commit_hash": "1ced8d1d8bc2f84adc2adfbbcccb85e722694134",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/1ced8d1d8bc2f84adc2adfbbcccb85e722694134",
        "files": [
          "tensorflow/lite/tools/optimize/sparsity/format_converter.cc"
        ],
        "message": "[lite] Add some safety checks to avoid out of bound access for sparsity format\n\nPiperOrigin-RevId: 416910386\nChange-Id: Ic0b4dc048dc4b5a6309c572b8c4c9f776e4db60a",
        "before_after_code_files": [
          "tensorflow/lite/tools/optimize/sparsity/format_converter.cc||tensorflow/lite/tools/optimize/sparsity/format_converter.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tensorflow/lite/tools/optimize/sparsity/format_converter.cc||tensorflow/lite/tools/optimize/sparsity/format_converter.cc": [
          "File: tensorflow/lite/tools/optimize/sparsity/format_converter.cc -> tensorflow/lite/tools/optimize/sparsity/format_converter.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "245:   block_size_.resize(block_map_.size());",
          "246:   for (int i = 0; i < original_rank; i++) {",
          "247:     if (block_dim < block_map_.size() && block_map_[block_dim] == i) {",
          "252:     } else {",
          "253:       blocked_shape_[i] = shape[i];",
          "254:     }",
          "",
          "[Removed Lines]",
          "248:       int orig_dim = traversal_order_[original_rank + block_dim];",
          "249:       block_size_[block_dim] = sparsity.dim_metadata[orig_dim].dense_size;",
          "250:       blocked_shape_[i] = shape[i] / sparsity.dim_metadata[orig_dim].dense_size;",
          "251:       block_dim++;",
          "",
          "[Added Lines]",
          "248:       if (original_rank + block_dim < traversal_order_.size()) {",
          "249:         int orig_dim = traversal_order_[original_rank + block_dim];",
          "250:         block_size_[block_dim] = sparsity.dim_metadata[orig_dim].dense_size;",
          "251:         blocked_shape_[i] = shape[i] / sparsity.dim_metadata[orig_dim].dense_size;",
          "252:         block_dim++;",
          "253:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "291:       Populate(src_data, indices, level + 1, prev_idx * shape_of_level + i,",
          "292:                src_data_ptr, dest_data);",
          "293:     }",
          "295:     const auto& array_segments = dim_metadata_[metadata_idx];",
          "296:     const auto& array_indices = dim_metadata_[metadata_idx + 1];",
          "297:     for (int i = array_segments[prev_idx]; i < array_segments[prev_idx + 1];",
          "298:          i++) {",
          "301:     }",
          "302:   }",
          "303: }",
          "",
          "[Removed Lines]",
          "294:   } else {",
          "299:       indices[level] = array_indices[i];",
          "300:       Populate(src_data, indices, level + 1, i, src_data_ptr, dest_data);",
          "",
          "[Added Lines]",
          "296:   } else if (prev_idx + 1 < dim_metadata_[metadata_idx].size()) {",
          "301:       if (i < array_indices.size() && level < indices.size()) {",
          "302:         indices[level] = array_indices[i];",
          "303:         Populate(src_data, indices, level + 1, i, src_data_ptr, dest_data);",
          "304:       }",
          "",
          "---------------"
        ]
      }
    }
  ]
}