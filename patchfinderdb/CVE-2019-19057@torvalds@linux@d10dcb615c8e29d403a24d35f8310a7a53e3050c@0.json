{
  "cve_id": "CVE-2019-19057",
  "cve_desc": "Two memory leaks in the mwifiex_pcie_init_evt_ring() function in drivers/net/wireless/marvell/mwifiex/pcie.c in the Linux kernel through 5.3.11 allow attackers to cause a denial of service (memory consumption) by triggering mwifiex_map_pci_memory() failures, aka CID-d10dcb615c8e.",
  "repo": "torvalds/linux",
  "patch_hash": "d10dcb615c8e29d403a24d35f8310a7a53e3050c",
  "patch_info": {
    "commit_hash": "d10dcb615c8e29d403a24d35f8310a7a53e3050c",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/d10dcb615c8e29d403a24d35f8310a7a53e3050c",
    "files": [
      "drivers/net/wireless/marvell/mwifiex/pcie.c"
    ],
    "message": "mwifiex: pcie: Fix memory leak in mwifiex_pcie_init_evt_ring\n\nIn mwifiex_pcie_init_evt_ring, a new skb is allocated which should be\nreleased if mwifiex_map_pci_memory() fails. The release for skb and\ncard->evtbd_ring_vbase is added.\n\nFixes: 0732484b47b5 (\"mwifiex: separate ring initialization and ring creation routines\")\nSigned-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>\nAcked-by: Ganapathi Bhat <gbhat@marvell.com>\nSigned-off-by: Kalle Valo <kvalo@codeaurora.org>",
    "before_after_code_files": [
      "drivers/net/wireless/marvell/mwifiex/pcie.c||drivers/net/wireless/marvell/mwifiex/pcie.c"
    ]
  },
  "patch_diff": {
    "drivers/net/wireless/marvell/mwifiex/pcie.c||drivers/net/wireless/marvell/mwifiex/pcie.c": [
      "File: drivers/net/wireless/marvell/mwifiex/pcie.c -> drivers/net/wireless/marvell/mwifiex/pcie.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "687:   skb_put(skb, MAX_EVENT_SIZE);",
      "689:   if (mwifiex_map_pci_memory(adapter, skb, MAX_EVENT_SIZE,",
      "691:    return -1;",
      "693:   buf_pa = MWIFIEX_SKB_DMA_ADDR(skb);",
      "",
      "[Removed Lines]",
      "690:         PCI_DMA_FROMDEVICE))",
      "",
      "[Added Lines]",
      "690:         PCI_DMA_FROMDEVICE)) {",
      "691:    kfree_skb(skb);",
      "692:    kfree(card->evtbd_ring_vbase);",
      "694:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4cf975f640fefdfdf6168a79e882558478ce057a",
      "candidate_info": {
        "commit_hash": "4cf975f640fefdfdf6168a79e882558478ce057a",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/4cf975f640fefdfdf6168a79e882558478ce057a",
        "files": [
          "drivers/net/wireless/marvell/mwifiex/pcie.c"
        ],
        "message": "mwifiex: switch from 'pci_' to 'dma_' API\n\nThe wrappers in include/linux/pci-dma-compat.h should go away.\n\nThe patch has been generated with the coccinelle script below and has been\nhand modified to replace GFP_ with a correct flag.\nIt has been compile tested.\n\nWhen memory is allocated in 'mwifiex_pcie_alloc_buffers()' (see details in\nthe call chain below) GFP_KERNEL can be used because both\n'mwifiex_register()' and 'mwifiex_reinit_sw()' already use GFP_KERNEL.\n(for 'mwifiex_reinit_sw()', it is hidden in a call to 'alloc_workqueue()')\n\nThe call chain is:\n  mwifiex_register\n    --> mwifiex_init_pcie        (.init_if function, see mwifiex_if_ops)\n   [ or ]\n  mwifiex_reinit_sw\n    -->mwifiex_pcie_up_dev       (.up_dev function, see mwifiex_if_ops)\n\n    [ then in both case ]\n      -->mwifiex_pcie_alloc_buffers\n        --> mwifiex_pcie_create_txbd_ring\n        --> mwifiex_pcie_create_rxbd_ring\n        --> mwifiex_pcie_create_evtbd_ring\n        --> mwifiex_pcie_alloc_sleep_cookie_buf\n\n@@\n@@\n-    PCI_DMA_BIDIRECTIONAL\n+    DMA_BIDIRECTIONAL\n\n@@\n@@\n-    PCI_DMA_TODEVICE\n+    DMA_TO_DEVICE\n\n@@\n@@\n-    PCI_DMA_FROMDEVICE\n+    DMA_FROM_DEVICE\n\n@@\n@@\n-    PCI_DMA_NONE\n+    DMA_NONE\n\n@@\nexpression e1, e2, e3;\n@@\n-    pci_alloc_consistent(e1, e2, e3)\n+    dma_alloc_coherent(&e1->dev, e2, e3, GFP_)\n\n@@\nexpression e1, e2, e3;\n@@\n-    pci_zalloc_consistent(e1, e2, e3)\n+    dma_alloc_coherent(&e1->dev, e2, e3, GFP_)\n\n@@\nexpression e1, e2, e3, e4;\n@@\n-    pci_free_consistent(e1, e2, e3, e4)\n+    dma_free_coherent(&e1->dev, e2, e3, e4)\n\n@@\nexpression e1, e2, e3, e4;\n@@\n-    pci_map_single(e1, e2, e3, e4)\n+    dma_map_single(&e1->dev, e2, e3, e4)\n\n@@\nexpression e1, e2, e3, e4;\n@@\n-    pci_unmap_single(e1, e2, e3, e4)\n+    dma_unmap_single(&e1->dev, e2, e3, e4)\n\n@@\nexpression e1, e2, e3, e4, e5;\n@@\n-    pci_map_page(e1, e2, e3, e4, e5)\n+    dma_map_page(&e1->dev, e2, e3, e4, e5)\n\n@@\nexpression e1, e2, e3, e4;\n@@\n-    pci_unmap_page(e1, e2, e3, e4)\n+    dma_unmap_page(&e1->dev, e2, e3, e4)\n\n@@\nexpression e1, e2, e3, e4;\n@@\n-    pci_map_sg(e1, e2, e3, e4)\n+    dma_map_sg(&e1->dev, e2, e3, e4)\n\n@@\nexpression e1, e2, e3, e4;\n@@\n-    pci_unmap_sg(e1, e2, e3, e4)\n+    dma_unmap_sg(&e1->dev, e2, e3, e4)\n\n@@\nexpression e1, e2, e3, e4;\n@@\n-    pci_dma_sync_single_for_cpu(e1, e2, e3, e4)\n+    dma_sync_single_for_cpu(&e1->dev, e2, e3, e4)\n\n@@\nexpression e1, e2, e3, e4;\n@@\n-    pci_dma_sync_single_for_device(e1, e2, e3, e4)\n+    dma_sync_single_for_device(&e1->dev, e2, e3, e4)\n\n@@\nexpression e1, e2, e3, e4;\n@@\n-    pci_dma_sync_sg_for_cpu(e1, e2, e3, e4)\n+    dma_sync_sg_for_cpu(&e1->dev, e2, e3, e4)\n\n@@\nexpression e1, e2, e3, e4;\n@@\n-    pci_dma_sync_sg_for_device(e1, e2, e3, e4)\n+    dma_sync_sg_for_device(&e1->dev, e2, e3, e4)\n\n@@\nexpression e1, e2;\n@@\n-    pci_dma_mapping_error(e1, e2)\n+    dma_mapping_error(&e1->dev, e2)\n\n@@\nexpression e1, e2;\n@@\n-    pci_set_dma_mask(e1, e2)\n+    dma_set_mask(&e1->dev, e2)\n\n@@\nexpression e1, e2;\n@@\n-    pci_set_consistent_dma_mask(e1, e2)\n+    dma_set_coherent_mask(&e1->dev, e2)\n\nSigned-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>\nSigned-off-by: Kalle Valo <kvalo@codeaurora.org>\nLink: https://lore.kernel.org/r/20200819070152.111522-1-christophe.jaillet@wanadoo.fr",
        "before_after_code_files": [
          "drivers/net/wireless/marvell/mwifiex/pcie.c||drivers/net/wireless/marvell/mwifiex/pcie.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/net/wireless/marvell/mwifiex/pcie.c||drivers/net/wireless/marvell/mwifiex/pcie.c"
          ],
          "candidate": [
            "drivers/net/wireless/marvell/mwifiex/pcie.c||drivers/net/wireless/marvell/mwifiex/pcie.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/net/wireless/marvell/mwifiex/pcie.c||drivers/net/wireless/marvell/mwifiex/pcie.c": [
          "File: drivers/net/wireless/marvell/mwifiex/pcie.c -> drivers/net/wireless/marvell/mwifiex/pcie.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:  struct pcie_service_card *card = adapter->card;",
          "59:  struct mwifiex_dma_mapping mapping;",
          "63:   mwifiex_dbg(adapter, ERROR, \"failed to map pci memory!\\n\");",
          "64:   return -1;",
          "65:  }",
          "",
          "[Removed Lines]",
          "61:  mapping.addr = pci_map_single(card->dev, skb->data, size, flags);",
          "62:  if (pci_dma_mapping_error(card->dev, mapping.addr)) {",
          "",
          "[Added Lines]",
          "61:  mapping.addr = dma_map_single(&card->dev->dev, skb->data, size, flags);",
          "62:  if (dma_mapping_error(&card->dev->dev, mapping.addr)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:  struct mwifiex_dma_mapping mapping;",
          "77:  mwifiex_get_mapping(skb, &mapping);",
          "79: }",
          "",
          "[Removed Lines]",
          "78:  pci_unmap_single(card->dev, mapping.addr, mapping.len, flags);",
          "",
          "[Added Lines]",
          "78:  dma_unmap_single(&card->dev->dev, mapping.addr, mapping.len, flags);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "461:  struct sk_buff *cmdrsp = card->cmdrsp_buf;",
          "463:  for (count = 0; count < max_delay_loop_cnt; count++) {",
          "468:   buffer = cmdrsp->data;",
          "469:   sleep_cookie = get_unaligned_le32(buffer);",
          "",
          "[Removed Lines]",
          "464:   pci_dma_sync_single_for_cpu(card->dev,",
          "465:          MWIFIEX_SKB_DMA_ADDR(cmdrsp),",
          "466:          sizeof(sleep_cookie),",
          "467:          PCI_DMA_FROMDEVICE);",
          "",
          "[Added Lines]",
          "464:   dma_sync_single_for_cpu(&card->dev->dev,",
          "465:      MWIFIEX_SKB_DMA_ADDR(cmdrsp),",
          "466:      sizeof(sleep_cookie), DMA_FROM_DEVICE);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "473:         \"sleep cookie found at count %d\\n\", count);",
          "474:    break;",
          "475:   }",
          "480:   usleep_range(20, 30);",
          "481:  }",
          "",
          "[Removed Lines]",
          "476:   pci_dma_sync_single_for_device(card->dev,",
          "477:             MWIFIEX_SKB_DMA_ADDR(cmdrsp),",
          "478:             sizeof(sleep_cookie),",
          "479:             PCI_DMA_FROMDEVICE);",
          "",
          "[Added Lines]",
          "475:   dma_sync_single_for_device(&card->dev->dev,",
          "476:         MWIFIEX_SKB_DMA_ADDR(cmdrsp),",
          "477:         sizeof(sleep_cookie),",
          "478:         DMA_FROM_DEVICE);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "631:   if (mwifiex_map_pci_memory(adapter, skb,",
          "632:         MWIFIEX_RX_DATA_BUF_SIZE,",
          "634:    return -1;",
          "636:   buf_pa = MWIFIEX_SKB_DMA_ADDR(skb);",
          "",
          "[Removed Lines]",
          "633:         PCI_DMA_FROMDEVICE))",
          "",
          "[Added Lines]",
          "632:         DMA_FROM_DEVICE))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "687:   skb_put(skb, MAX_EVENT_SIZE);",
          "689:   if (mwifiex_map_pci_memory(adapter, skb, MAX_EVENT_SIZE,",
          "691:    kfree_skb(skb);",
          "692:    kfree(card->evtbd_ring_vbase);",
          "693:    return -1;",
          "",
          "[Removed Lines]",
          "690:         PCI_DMA_FROMDEVICE)) {",
          "",
          "[Added Lines]",
          "689:         DMA_FROM_DEVICE)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "730:    if (card->tx_buf_list[i]) {",
          "731:     skb = card->tx_buf_list[i];",
          "732:     mwifiex_unmap_pci_memory(adapter, skb,",
          "734:     dev_kfree_skb_any(skb);",
          "735:    }",
          "736:    memset(desc2, 0, sizeof(*desc2));",
          "",
          "[Removed Lines]",
          "733:         PCI_DMA_TODEVICE);",
          "",
          "[Added Lines]",
          "732:         DMA_TO_DEVICE);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "739:    if (card->tx_buf_list[i]) {",
          "740:     skb = card->tx_buf_list[i];",
          "741:     mwifiex_unmap_pci_memory(adapter, skb,",
          "743:     dev_kfree_skb_any(skb);",
          "744:    }",
          "745:    memset(desc, 0, sizeof(*desc));",
          "",
          "[Removed Lines]",
          "742:         PCI_DMA_TODEVICE);",
          "",
          "[Added Lines]",
          "741:         DMA_TO_DEVICE);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "769:    if (card->rx_buf_list[i]) {",
          "770:     skb = card->rx_buf_list[i];",
          "771:     mwifiex_unmap_pci_memory(adapter, skb,",
          "773:     dev_kfree_skb_any(skb);",
          "774:    }",
          "775:    memset(desc2, 0, sizeof(*desc2));",
          "",
          "[Removed Lines]",
          "772:         PCI_DMA_FROMDEVICE);",
          "",
          "[Added Lines]",
          "771:         DMA_FROM_DEVICE);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "778:    if (card->rx_buf_list[i]) {",
          "779:     skb = card->rx_buf_list[i];",
          "780:     mwifiex_unmap_pci_memory(adapter, skb,",
          "782:     dev_kfree_skb_any(skb);",
          "783:    }",
          "784:    memset(desc, 0, sizeof(*desc));",
          "",
          "[Removed Lines]",
          "781:         PCI_DMA_FROMDEVICE);",
          "",
          "[Added Lines]",
          "780:         DMA_FROM_DEVICE);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "804:   if (card->evt_buf_list[i]) {",
          "805:    skb = card->evt_buf_list[i];",
          "806:    mwifiex_unmap_pci_memory(adapter, skb,",
          "808:    dev_kfree_skb_any(skb);",
          "809:   }",
          "810:   card->evt_buf_list[i] = NULL;",
          "",
          "[Removed Lines]",
          "807:        PCI_DMA_FROMDEVICE);",
          "",
          "[Added Lines]",
          "806:        DMA_FROM_DEVICE);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "845:  mwifiex_dbg(adapter, INFO,",
          "846:       \"info: txbd_ring: Allocating %d bytes\\n\",",
          "847:       card->txbd_ring_size);",
          "851:  if (!card->txbd_ring_vbase) {",
          "852:   mwifiex_dbg(adapter, ERROR,",
          "853:        \"allocate consistent memory (%d bytes) failed!\\n\",",
          "",
          "[Removed Lines]",
          "848:  card->txbd_ring_vbase = pci_alloc_consistent(card->dev,",
          "849:            card->txbd_ring_size,",
          "850:            &card->txbd_ring_pbase);",
          "",
          "[Added Lines]",
          "847:  card->txbd_ring_vbase = dma_alloc_coherent(&card->dev->dev,",
          "848:          card->txbd_ring_size,",
          "849:          &card->txbd_ring_pbase,",
          "850:          GFP_KERNEL);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "871:  mwifiex_cleanup_txq_ring(adapter);",
          "873:  if (card->txbd_ring_vbase)",
          "877:  card->txbd_ring_size = 0;",
          "878:  card->txbd_wrptr = 0;",
          "879:  card->txbd_rdptr = 0 | reg->tx_rollover_ind;",
          "",
          "[Removed Lines]",
          "874:   pci_free_consistent(card->dev, card->txbd_ring_size,",
          "875:         card->txbd_ring_vbase,",
          "876:         card->txbd_ring_pbase);",
          "",
          "[Added Lines]",
          "874:   dma_free_coherent(&card->dev->dev, card->txbd_ring_size,",
          "875:       card->txbd_ring_vbase,",
          "876:       card->txbd_ring_pbase);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "909:  mwifiex_dbg(adapter, INFO,",
          "910:       \"info: rxbd_ring: Allocating %d bytes\\n\",",
          "911:       card->rxbd_ring_size);",
          "915:  if (!card->rxbd_ring_vbase) {",
          "916:   mwifiex_dbg(adapter, ERROR,",
          "917:        \"allocate consistent memory (%d bytes) failed!\\n\",",
          "",
          "[Removed Lines]",
          "912:  card->rxbd_ring_vbase = pci_alloc_consistent(card->dev,",
          "913:            card->rxbd_ring_size,",
          "914:            &card->rxbd_ring_pbase);",
          "",
          "[Added Lines]",
          "912:  card->rxbd_ring_vbase = dma_alloc_coherent(&card->dev->dev,",
          "913:          card->rxbd_ring_size,",
          "914:          &card->rxbd_ring_pbase,",
          "915:          GFP_KERNEL);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "939:  mwifiex_cleanup_rxq_ring(adapter);",
          "941:  if (card->rxbd_ring_vbase)",
          "945:  card->rxbd_ring_size = 0;",
          "946:  card->rxbd_wrptr = 0;",
          "947:  card->rxbd_rdptr = 0 | reg->rx_rollover_ind;",
          "",
          "[Removed Lines]",
          "942:   pci_free_consistent(card->dev, card->rxbd_ring_size,",
          "943:         card->rxbd_ring_vbase,",
          "944:         card->rxbd_ring_pbase);",
          "",
          "[Added Lines]",
          "943:   dma_free_coherent(&card->dev->dev, card->rxbd_ring_size,",
          "944:       card->rxbd_ring_vbase,",
          "945:       card->rxbd_ring_pbase);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "973:  mwifiex_dbg(adapter, INFO,",
          "974:       \"info: evtbd_ring: Allocating %d bytes\\n\",",
          "975:   card->evtbd_ring_size);",
          "979:  if (!card->evtbd_ring_vbase) {",
          "980:   mwifiex_dbg(adapter, ERROR,",
          "981:        \"allocate consistent memory (%d bytes) failed!\\n\",",
          "",
          "[Removed Lines]",
          "976:  card->evtbd_ring_vbase = pci_alloc_consistent(card->dev,",
          "977:             card->evtbd_ring_size,",
          "978:             &card->evtbd_ring_pbase);",
          "",
          "[Added Lines]",
          "977:  card->evtbd_ring_vbase = dma_alloc_coherent(&card->dev->dev,",
          "978:           card->evtbd_ring_size,",
          "979:           &card->evtbd_ring_pbase,",
          "980:           GFP_KERNEL);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1003:  mwifiex_cleanup_evt_ring(adapter);",
          "1005:  if (card->evtbd_ring_vbase)",
          "1009:  card->evtbd_wrptr = 0;",
          "1010:  card->evtbd_rdptr = 0 | reg->evt_rollover_ind;",
          "1011:  card->evtbd_ring_size = 0;",
          "",
          "[Removed Lines]",
          "1006:   pci_free_consistent(card->dev, card->evtbd_ring_size,",
          "1007:         card->evtbd_ring_vbase,",
          "1008:         card->evtbd_ring_pbase);",
          "",
          "[Added Lines]",
          "1008:   dma_free_coherent(&card->dev->dev, card->evtbd_ring_size,",
          "1009:       card->evtbd_ring_vbase,",
          "1010:       card->evtbd_ring_pbase);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1032:  }",
          "1033:  skb_put(skb, MWIFIEX_UPLD_SIZE);",
          "1034:  if (mwifiex_map_pci_memory(adapter, skb, MWIFIEX_UPLD_SIZE,",
          "1036:   kfree_skb(skb);",
          "1037:   return -1;",
          "1038:  }",
          "",
          "[Removed Lines]",
          "1035:        PCI_DMA_FROMDEVICE)) {",
          "",
          "[Added Lines]",
          "1037:        DMA_FROM_DEVICE)) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1057:  if (card && card->cmdrsp_buf) {",
          "1058:   mwifiex_unmap_pci_memory(adapter, card->cmdrsp_buf,",
          "1060:   dev_kfree_skb_any(card->cmdrsp_buf);",
          "1061:   card->cmdrsp_buf = NULL;",
          "1062:  }",
          "1064:  if (card && card->cmd_buf) {",
          "1065:   mwifiex_unmap_pci_memory(adapter, card->cmd_buf,",
          "1067:   dev_kfree_skb_any(card->cmd_buf);",
          "1068:   card->cmd_buf = NULL;",
          "1069:  }",
          "",
          "[Removed Lines]",
          "1059:       PCI_DMA_FROMDEVICE);",
          "1066:       PCI_DMA_TODEVICE);",
          "",
          "[Added Lines]",
          "1061:       DMA_FROM_DEVICE);",
          "1068:       DMA_TO_DEVICE);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1078:  struct pcie_service_card *card = adapter->card;",
          "1079:  u32 tmp;",
          "1083:  if (!card->sleep_cookie_vbase) {",
          "1084:   mwifiex_dbg(adapter, ERROR,",
          "1085:        \"pci_alloc_consistent failed!\\n\");",
          "",
          "[Removed Lines]",
          "1081:  card->sleep_cookie_vbase = pci_alloc_consistent(card->dev, sizeof(u32),",
          "1082:            &card->sleep_cookie_pbase);",
          "",
          "[Added Lines]",
          "1083:  card->sleep_cookie_vbase = dma_alloc_coherent(&card->dev->dev,",
          "1084:             sizeof(u32),",
          "1085:             &card->sleep_cookie_pbase,",
          "1086:             GFP_KERNEL);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1109:  card = adapter->card;",
          "1111:  if (card && card->sleep_cookie_vbase) {",
          "1115:   card->sleep_cookie_vbase = NULL;",
          "1116:  }",
          "",
          "[Removed Lines]",
          "1112:   pci_free_consistent(card->dev, sizeof(u32),",
          "1113:         card->sleep_cookie_vbase,",
          "1114:         card->sleep_cookie_pbase);",
          "",
          "[Added Lines]",
          "1116:   dma_free_coherent(&card->dev->dev, sizeof(u32),",
          "1117:       card->sleep_cookie_vbase,",
          "1118:       card->sleep_cookie_pbase);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1183:         \"SEND COMP: Detach skb %p at txbd_rdidx=%d\\n\",",
          "1184:         skb, wrdoneidx);",
          "1185:    mwifiex_unmap_pci_memory(adapter, skb,",
          "1188:    unmap_count++;",
          "",
          "[Removed Lines]",
          "1186:        PCI_DMA_TODEVICE);",
          "",
          "[Added Lines]",
          "1190:        DMA_TO_DEVICE);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1276:   put_unaligned_le16(MWIFIEX_TYPE_DATA, payload + 2);",
          "1278:   if (mwifiex_map_pci_memory(adapter, skb, skb->len,",
          "1280:    return -1;",
          "1282:   wrindx = (card->txbd_wrptr & reg->tx_mask) >> reg->tx_start_ptr;",
          "",
          "[Removed Lines]",
          "1279:         PCI_DMA_TODEVICE))",
          "",
          "[Added Lines]",
          "1283:         DMA_TO_DEVICE))",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1359:  return -EINPROGRESS;",
          "1360: done_unmap:",
          "1362:  card->tx_buf_list[wrindx] = NULL;",
          "1363:  atomic_dec(&adapter->tx_hw_pending);",
          "1364:  if (reg->pfu_enabled)",
          "",
          "[Removed Lines]",
          "1361:  mwifiex_unmap_pci_memory(adapter, skb, PCI_DMA_TODEVICE);",
          "",
          "[Added Lines]",
          "1365:  mwifiex_unmap_pci_memory(adapter, skb, DMA_TO_DEVICE);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1412:   if (!skb_data)",
          "1413:    return -ENOMEM;",
          "1416:   card->rx_buf_list[rd_index] = NULL;",
          "",
          "[Removed Lines]",
          "1415:   mwifiex_unmap_pci_memory(adapter, skb_data, PCI_DMA_FROMDEVICE);",
          "",
          "[Added Lines]",
          "1419:   mwifiex_unmap_pci_memory(adapter, skb_data, DMA_FROM_DEVICE);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1451:   if (mwifiex_map_pci_memory(adapter, skb_tmp,",
          "1452:         MWIFIEX_RX_DATA_BUF_SIZE,",
          "1454:    return -1;",
          "1456:   buf_pa = MWIFIEX_SKB_DMA_ADDR(skb_tmp);",
          "",
          "[Removed Lines]",
          "1453:         PCI_DMA_FROMDEVICE))",
          "",
          "[Added Lines]",
          "1457:         DMA_FROM_DEVICE))",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1527:   return -1;",
          "1528:  }",
          "1531:   return -1;",
          "1533:  buf_pa = MWIFIEX_SKB_DMA_ADDR(skb);",
          "",
          "[Removed Lines]",
          "1530:  if (mwifiex_map_pci_memory(adapter, skb, skb->len, PCI_DMA_TODEVICE))",
          "",
          "[Added Lines]",
          "1534:  if (mwifiex_map_pci_memory(adapter, skb, skb->len, DMA_TO_DEVICE))",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1539:   mwifiex_dbg(adapter, ERROR,",
          "1540:        \"%s: failed to write download command to boot code.\\n\",",
          "1541:        __func__);",
          "1543:   return -1;",
          "1544:  }",
          "",
          "[Removed Lines]",
          "1542:   mwifiex_unmap_pci_memory(adapter, skb, PCI_DMA_TODEVICE);",
          "",
          "[Added Lines]",
          "1546:   mwifiex_unmap_pci_memory(adapter, skb, DMA_TO_DEVICE);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1551:   mwifiex_dbg(adapter, ERROR,",
          "1552:        \"%s: failed to write download command to boot code.\\n\",",
          "1553:        __func__);",
          "1555:   return -1;",
          "1556:  }",
          "",
          "[Removed Lines]",
          "1554:   mwifiex_unmap_pci_memory(adapter, skb, PCI_DMA_TODEVICE);",
          "",
          "[Added Lines]",
          "1558:   mwifiex_unmap_pci_memory(adapter, skb, DMA_TO_DEVICE);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1560:   mwifiex_dbg(adapter, ERROR,",
          "1561:        \"%s: failed to write command len to cmd_size scratch reg\\n\",",
          "1562:        __func__);",
          "1564:   return -1;",
          "1565:  }",
          "",
          "[Removed Lines]",
          "1563:   mwifiex_unmap_pci_memory(adapter, skb, PCI_DMA_TODEVICE);",
          "",
          "[Added Lines]",
          "1567:   mwifiex_unmap_pci_memory(adapter, skb, DMA_TO_DEVICE);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1569:          CPU_INTR_DOOR_BELL)) {",
          "1570:   mwifiex_dbg(adapter, ERROR,",
          "1571:        \"%s: failed to assert door-bell intr\\n\", __func__);",
          "1573:   return -1;",
          "1574:  }",
          "",
          "[Removed Lines]",
          "1572:   mwifiex_unmap_pci_memory(adapter, skb, PCI_DMA_TODEVICE);",
          "",
          "[Added Lines]",
          "1576:   mwifiex_unmap_pci_memory(adapter, skb, DMA_TO_DEVICE);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1628:  put_unaligned_le16((u16)skb->len, &payload[0]);",
          "1629:  put_unaligned_le16(MWIFIEX_TYPE_CMD, &payload[2]);",
          "1632:   return -1;",
          "1634:  card->cmd_buf = skb;",
          "",
          "[Removed Lines]",
          "1631:  if (mwifiex_map_pci_memory(adapter, skb, skb->len, PCI_DMA_TODEVICE))",
          "",
          "[Added Lines]",
          "1635:  if (mwifiex_map_pci_memory(adapter, skb, skb->len, DMA_TO_DEVICE))",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1728:       \"info: Rx CMD Response\\n\");",
          "1730:  if (adapter->curr_cmd)",
          "1732:  else",
          "1739:  if (card->cmd_buf) {",
          "1740:   mwifiex_unmap_pci_memory(adapter, card->cmd_buf,",
          "1742:   dev_kfree_skb_any(card->cmd_buf);",
          "1743:   card->cmd_buf = NULL;",
          "1744:  }",
          "",
          "[Removed Lines]",
          "1731:   mwifiex_unmap_pci_memory(adapter, skb, PCI_DMA_FROMDEVICE);",
          "1733:   pci_dma_sync_single_for_cpu(card->dev,",
          "1734:          MWIFIEX_SKB_DMA_ADDR(skb),",
          "1735:          MWIFIEX_UPLD_SIZE,",
          "1736:          PCI_DMA_FROMDEVICE);",
          "1741:       PCI_DMA_TODEVICE);",
          "",
          "[Added Lines]",
          "1735:   mwifiex_unmap_pci_memory(adapter, skb, DMA_FROM_DEVICE);",
          "1737:   dma_sync_single_for_cpu(&card->dev->dev,",
          "1738:      MWIFIEX_SKB_DMA_ADDR(skb),",
          "1739:      MWIFIEX_UPLD_SIZE, DMA_FROM_DEVICE);",
          "1744:       DMA_TO_DEVICE);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1750:  if (!adapter->curr_cmd) {",
          "1751:   if (adapter->ps_state == PS_STATE_SLEEP_CFM) {",
          "1756:    if (mwifiex_write_reg(adapter,",
          "1757:            PCIE_CPU_INT_EVENT,",
          "1758:            CPU_INTR_SLEEP_CFM_DONE)) {",
          "",
          "[Removed Lines]",
          "1752:    pci_dma_sync_single_for_device(card->dev,",
          "1753:       MWIFIEX_SKB_DMA_ADDR(skb),",
          "1754:       MWIFIEX_SLEEP_COOKIE_SIZE,",
          "1755:       PCI_DMA_FROMDEVICE);",
          "",
          "[Added Lines]",
          "1755:    dma_sync_single_for_device(&card->dev->dev,",
          "1756:          MWIFIEX_SKB_DMA_ADDR(skb),",
          "1757:          MWIFIEX_SLEEP_COOKIE_SIZE,",
          "1758:          DMA_FROM_DEVICE);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1763:    mwifiex_delay_for_sleep_cookie(adapter,",
          "1764:              MWIFIEX_MAX_DELAY_COUNT);",
          "1765:    mwifiex_unmap_pci_memory(adapter, skb,",
          "1767:    skb_pull(skb, adapter->intf_hdr_len);",
          "1768:    while (reg->sleep_cookie && (count++ < 10) &&",
          "1769:           mwifiex_pcie_ok_to_access_hw(adapter))",
          "",
          "[Removed Lines]",
          "1766:        PCI_DMA_FROMDEVICE);",
          "",
          "[Added Lines]",
          "1769:        DMA_FROM_DEVICE);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1779:          min_t(u32, MWIFIEX_SIZE_OF_CMD_BUFFER, skb->len));",
          "1780:   skb_push(skb, adapter->intf_hdr_len);",
          "1781:   if (mwifiex_map_pci_memory(adapter, skb, MWIFIEX_UPLD_SIZE,",
          "1783:    return -1;",
          "1784:  } else if (mwifiex_pcie_ok_to_access_hw(adapter)) {",
          "1785:   skb_pull(skb, adapter->intf_hdr_len);",
          "",
          "[Removed Lines]",
          "1782:         PCI_DMA_FROMDEVICE))",
          "",
          "[Added Lines]",
          "1785:         DMA_FROM_DEVICE))",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1821:   card->cmdrsp_buf = skb;",
          "1822:   skb_push(card->cmdrsp_buf, adapter->intf_hdr_len);",
          "1823:   if (mwifiex_map_pci_memory(adapter, skb, MWIFIEX_UPLD_SIZE,",
          "1825:    return -1;",
          "1826:  }",
          "",
          "[Removed Lines]",
          "1824:         PCI_DMA_FROMDEVICE))",
          "",
          "[Added Lines]",
          "1827:         DMA_FROM_DEVICE))",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1876:   mwifiex_dbg(adapter, INFO,",
          "1877:        \"info: Read Index: %d\\n\", rdptr);",
          "1878:   skb_cmd = card->evt_buf_list[rdptr];",
          "",
          "[Removed Lines]",
          "1879:   mwifiex_unmap_pci_memory(adapter, skb_cmd, PCI_DMA_FROMDEVICE);",
          "",
          "[Added Lines]",
          "1882:   mwifiex_unmap_pci_memory(adapter, skb_cmd, DMA_FROM_DEVICE);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1956:   skb_put(skb, MAX_EVENT_SIZE - skb->len);",
          "1957:   if (mwifiex_map_pci_memory(adapter, skb,",
          "1958:         MAX_EVENT_SIZE,",
          "1960:    return -1;",
          "1961:   card->evt_buf_list[rdptr] = skb;",
          "1962:   desc = card->evtbd_ring[rdptr];",
          "",
          "[Removed Lines]",
          "1959:         PCI_DMA_FROMDEVICE))",
          "",
          "[Added Lines]",
          "1962:         DMA_FROM_DEVICE))",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2238:          \"interrupt status during fw dnld.\\n\",",
          "2239:          __func__);",
          "2240:     mwifiex_unmap_pci_memory(adapter, skb,",
          "2242:     ret = -1;",
          "2243:     goto done;",
          "2244:    }",
          "",
          "[Removed Lines]",
          "2241:         PCI_DMA_TODEVICE);",
          "",
          "[Added Lines]",
          "2244:         DMA_TO_DEVICE);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2250:    mwifiex_dbg(adapter, ERROR, \"%s: Card failed to ACK download\\n\",",
          "2251:         __func__);",
          "2252:    mwifiex_unmap_pci_memory(adapter, skb,",
          "2254:    ret = -1;",
          "2255:    goto done;",
          "2256:   }",
          "2260:   offset += txlen;",
          "2261:  } while (true);",
          "",
          "[Removed Lines]",
          "2253:        PCI_DMA_TODEVICE);",
          "2258:   mwifiex_unmap_pci_memory(adapter, skb, PCI_DMA_TODEVICE);",
          "",
          "[Added Lines]",
          "2256:        DMA_TO_DEVICE);",
          "2261:   mwifiex_unmap_pci_memory(adapter, skb, DMA_TO_DEVICE);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2926:  pci_set_master(pdev);",
          "2929:  if (ret) {",
          "2930:   pr_err(\"set_dma_mask(32) failed: %d\\n\", ret);",
          "2931:   goto err_set_dma_mask;",
          "2932:  }",
          "2935:  if (ret) {",
          "2936:   pr_err(\"set_consistent_dma_mask(64) failed\\n\");",
          "2937:   goto err_set_dma_mask;",
          "",
          "[Removed Lines]",
          "2928:  ret = pci_set_dma_mask(pdev, DMA_BIT_MASK(32));",
          "2934:  ret = pci_set_consistent_dma_mask(pdev, DMA_BIT_MASK(32));",
          "",
          "[Added Lines]",
          "2931:  ret = dma_set_mask(&pdev->dev, DMA_BIT_MASK(32));",
          "2937:  ret = dma_set_coherent_mask(&pdev->dev, DMA_BIT_MASK(32));",
          "",
          "---------------"
        ]
      }
    }
  ]
}