{
  "cve_id": "CVE-2019-16413",
  "cve_desc": "An issue was discovered in the Linux kernel before 5.0.4. The 9p filesystem did not protect i_size_write() properly, which causes an i_size_read() infinite loop and denial of service on SMP systems.",
  "repo": "torvalds/linux",
  "patch_hash": "5e3cc1ee1405a7eb3487ed24f786dec01b4cbe1f",
  "patch_info": {
    "commit_hash": "5e3cc1ee1405a7eb3487ed24f786dec01b4cbe1f",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/5e3cc1ee1405a7eb3487ed24f786dec01b4cbe1f",
    "files": [
      "fs/9p/v9fs_vfs.h",
      "fs/9p/vfs_file.c",
      "fs/9p/vfs_inode.c",
      "fs/9p/vfs_inode_dotl.c",
      "fs/9p/vfs_super.c"
    ],
    "message": "9p: use inode->i_lock to protect i_size_write() under 32-bit\n\nUse inode->i_lock to protect i_size_write(), else i_size_read() in\ngeneric_fillattr() may loop infinitely in read_seqcount_begin() when\nmultiple processes invoke v9fs_vfs_getattr() or v9fs_vfs_getattr_dotl()\nsimultaneously under 32-bit SMP environment, and a soft lockup will be\ntriggered as show below:\n\n  watchdog: BUG: soft lockup - CPU#5 stuck for 22s! [stat:2217]\n  Modules linked in:\n  CPU: 5 PID: 2217 Comm: stat Not tainted 5.0.0-rc1-00005-g7f702faf5a9e #4\n  Hardware name: Generic DT based system\n  PC is at generic_fillattr+0x104/0x108\n  LR is at 0xec497f00\n  pc : [<802b8898>]    lr : [<ec497f00>]    psr: 200c0013\n  sp : ec497e20  ip : ed608030  fp : ec497e3c\n  r10: 00000000  r9 : ec497f00  r8 : ed608030\n  r7 : ec497ebc  r6 : ec497f00  r5 : ee5c1550  r4 : ee005780\n  r3 : 0000052d  r2 : 00000000  r1 : ec497f00  r0 : ed608030\n  Flags: nzCv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment none\n  Control: 10c5387d  Table: ac48006a  DAC: 00000051\n  CPU: 5 PID: 2217 Comm: stat Not tainted 5.0.0-rc1-00005-g7f702faf5a9e #4\n  Hardware name: Generic DT based system\n  Backtrace:\n  [<8010d974>] (dump_backtrace) from [<8010dc88>] (show_stack+0x20/0x24)\n  [<8010dc68>] (show_stack) from [<80a1d194>] (dump_stack+0xb0/0xdc)\n  [<80a1d0e4>] (dump_stack) from [<80109f34>] (show_regs+0x1c/0x20)\n  [<80109f18>] (show_regs) from [<801d0a80>] (watchdog_timer_fn+0x280/0x2f8)\n  [<801d0800>] (watchdog_timer_fn) from [<80198658>] (__hrtimer_run_queues+0x18c/0x380)\n  [<801984cc>] (__hrtimer_run_queues) from [<80198e60>] (hrtimer_run_queues+0xb8/0xf0)\n  [<80198da8>] (hrtimer_run_queues) from [<801973e8>] (run_local_timers+0x28/0x64)\n  [<801973c0>] (run_local_timers) from [<80197460>] (update_process_times+0x3c/0x6c)\n  [<80197424>] (update_process_times) from [<801ab2b8>] (tick_nohz_handler+0xe0/0x1bc)\n  [<801ab1d8>] (tick_nohz_handler) from [<80843050>] (arch_timer_handler_virt+0x38/0x48)\n  [<80843018>] (arch_timer_handler_virt) from [<80180a64>] (handle_percpu_devid_irq+0x8c/0x240)\n  [<801809d8>] (handle_percpu_devid_irq) from [<8017ac20>] (generic_handle_irq+0x34/0x44)\n  [<8017abec>] (generic_handle_irq) from [<8017b344>] (__handle_domain_irq+0x6c/0xc4)\n  [<8017b2d8>] (__handle_domain_irq) from [<801022e0>] (gic_handle_irq+0x4c/0x88)\n  [<80102294>] (gic_handle_irq) from [<80101a30>] (__irq_svc+0x70/0x98)\n  [<802b8794>] (generic_fillattr) from [<8056b284>] (v9fs_vfs_getattr_dotl+0x74/0xa4)\n  [<8056b210>] (v9fs_vfs_getattr_dotl) from [<802b8904>] (vfs_getattr_nosec+0x68/0x7c)\n  [<802b889c>] (vfs_getattr_nosec) from [<802b895c>] (vfs_getattr+0x44/0x48)\n  [<802b8918>] (vfs_getattr) from [<802b8a74>] (vfs_statx+0x9c/0xec)\n  [<802b89d8>] (vfs_statx) from [<802b9428>] (sys_lstat64+0x48/0x78)\n  [<802b93e0>] (sys_lstat64) from [<80101000>] (ret_fast_syscall+0x0/0x28)\n\n[dominique.martinet@cea.fr: updated comment to not refer to a function\nin another subsystem]\nLink: http://lkml.kernel.org/r/20190124063514.8571-2-houtao1@huawei.com\nCc: stable@vger.kernel.org\nFixes: 7549ae3e81cc (\"9p: Use the i_size_[read, write]() macros instead of using inode->i_size directly.\")\nReported-by: Xing Gaopeng <xingaopeng@huawei.com>\nSigned-off-by: Hou Tao <houtao1@huawei.com>\nSigned-off-by: Dominique Martinet <dominique.martinet@cea.fr>",
    "before_after_code_files": [
      "fs/9p/v9fs_vfs.h||fs/9p/v9fs_vfs.h",
      "fs/9p/vfs_file.c||fs/9p/vfs_file.c",
      "fs/9p/vfs_inode.c||fs/9p/vfs_inode.c",
      "fs/9p/vfs_inode_dotl.c||fs/9p/vfs_inode_dotl.c",
      "fs/9p/vfs_super.c||fs/9p/vfs_super.c"
    ]
  },
  "patch_diff": {
    "fs/9p/v9fs_vfs.h||fs/9p/v9fs_vfs.h": [
      "File: fs/9p/v9fs_vfs.h -> fs/9p/v9fs_vfs.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "41: #define P9_LOCK_TIMEOUT (30*HZ)",
      "43: extern struct file_system_type v9fs_fs_type;",
      "44: extern const struct address_space_operations v9fs_addr_operations;",
      "45: extern const struct file_operations v9fs_file_operations;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "44: #define V9FS_STAT2INODE_KEEP_ISIZE 1",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "61:       struct inode *inode, umode_t mode, dev_t);",
      "62: void v9fs_evict_inode(struct inode *inode);",
      "63: ino_t v9fs_qid2ino(struct p9_qid *qid);",
      "66: int v9fs_dir_release(struct inode *inode, struct file *filp);",
      "67: int v9fs_file_open(struct inode *inode, struct file *file);",
      "68: void v9fs_inode2stat(struct inode *inode, struct p9_wstat *stat);",
      "",
      "[Removed Lines]",
      "64: void v9fs_stat2inode(struct p9_wstat *, struct inode *, struct super_block *);",
      "65: void v9fs_stat2inode_dotl(struct p9_stat_dotl *, struct inode *);",
      "",
      "[Added Lines]",
      "67: void v9fs_stat2inode(struct p9_wstat *stat, struct inode *inode,",
      "68:         struct super_block *sb, unsigned int flags);",
      "69: void v9fs_stat2inode_dotl(struct p9_stat_dotl *stat, struct inode *inode,",
      "70:       unsigned int flags);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "83: }",
      "85: int v9fs_open_to_dotl_flags(int flags);",
      "86: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "92: static inline void v9fs_i_size_write(struct inode *inode, loff_t i_size)",
      "93: {",
      "99:  if (sizeof(i_size) > sizeof(long))",
      "100:   spin_lock(&inode->i_lock);",
      "101:  i_size_write(inode, i_size);",
      "102:  if (sizeof(i_size) > sizeof(long))",
      "103:   spin_unlock(&inode->i_lock);",
      "104: }",
      "",
      "---------------"
    ],
    "fs/9p/vfs_file.c||fs/9p/vfs_file.c": [
      "File: fs/9p/vfs_file.c -> fs/9p/vfs_file.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "446:   i_size = i_size_read(inode);",
      "447:   if (iocb->ki_pos > i_size) {",
      "448:    inode_add_bytes(inode, iocb->ki_pos - i_size);",
      "450:   }",
      "451:   return retval;",
      "452:  }",
      "",
      "[Removed Lines]",
      "449:    i_size_write(inode, iocb->ki_pos);",
      "",
      "[Added Lines]",
      "453:    v9fs_i_size_write(inode, iocb->ki_pos);",
      "",
      "---------------"
    ],
    "fs/9p/vfs_inode.c||fs/9p/vfs_inode.c": [
      "File: fs/9p/vfs_inode.c -> fs/9p/vfs_inode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "538:  if (retval)",
      "539:   goto error;",
      "542:  v9fs_cache_inode_get_cookie(inode);",
      "543:  unlock_new_inode(inode);",
      "544:  return inode;",
      "",
      "[Removed Lines]",
      "541:  v9fs_stat2inode(st, inode, sb);",
      "",
      "[Added Lines]",
      "541:  v9fs_stat2inode(st, inode, sb, 0);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1092:  if (IS_ERR(st))",
      "1093:   return PTR_ERR(st);",
      "1096:  generic_fillattr(d_inode(dentry), stat);",
      "1098:  p9stat_free(st);",
      "",
      "[Removed Lines]",
      "1095:  v9fs_stat2inode(st, d_inode(dentry), dentry->d_sb);",
      "",
      "[Added Lines]",
      "1095:  v9fs_stat2inode(st, d_inode(dentry), dentry->d_sb, 0);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1176: void",
      "1177: v9fs_stat2inode(struct p9_wstat *stat, struct inode *inode,",
      "1179: {",
      "1180:  umode_t mode;",
      "1181:  char ext[32];",
      "",
      "[Removed Lines]",
      "1178:  struct super_block *sb)",
      "",
      "[Added Lines]",
      "1179:    struct super_block *sb, unsigned int flags)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1216:  mode = p9mode2perm(v9ses, stat);",
      "1217:  mode |= inode->i_mode & ~S_IALLUGO;",
      "1218:  inode->i_mode = mode;",
      "1223:  v9inode->cache_validity &= ~V9FS_INO_INVALID_ATTR;",
      "1224: }",
      "",
      "[Removed Lines]",
      "1219:  i_size_write(inode, stat->length);",
      "1222:  inode->i_blocks = (i_size_read(inode) + 512 - 1) >> 9;",
      "",
      "[Added Lines]",
      "1221:  if (!(flags & V9FS_STAT2INODE_KEEP_ISIZE))",
      "1222:   v9fs_i_size_write(inode, stat->length);",
      "1224:  inode->i_blocks = (stat->length + 512 - 1) >> 9;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1416: {",
      "1417:  int umode;",
      "1418:  dev_t rdev;",
      "1420:  struct p9_wstat *st;",
      "1421:  struct v9fs_session_info *v9ses;",
      "1423:  v9ses = v9fs_inode2v9ses(inode);",
      "1424:  st = p9_client_stat(fid);",
      "",
      "[Removed Lines]",
      "1419:  loff_t i_size;",
      "",
      "[Added Lines]",
      "1423:  unsigned int flags;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1431:  if ((inode->i_mode & S_IFMT) != (umode & S_IFMT))",
      "1432:   goto out;",
      "1444: out:",
      "1445:  p9stat_free(st);",
      "1446:  kfree(st);",
      "",
      "[Removed Lines]",
      "1434:  spin_lock(&inode->i_lock);",
      "1439:  i_size = inode->i_size;",
      "1440:  v9fs_stat2inode(st, inode, inode->i_sb);",
      "1441:  if (v9ses->cache == CACHE_LOOSE || v9ses->cache == CACHE_FSCACHE)",
      "1442:   inode->i_size = i_size;",
      "1443:  spin_unlock(&inode->i_lock);",
      "",
      "[Added Lines]",
      "1440:  flags = (v9ses->cache == CACHE_LOOSE || v9ses->cache == CACHE_FSCACHE) ?",
      "1441:   V9FS_STAT2INODE_KEEP_ISIZE : 0;",
      "1442:  v9fs_stat2inode(st, inode, inode->i_sb, flags);",
      "",
      "---------------"
    ],
    "fs/9p/vfs_inode_dotl.c||fs/9p/vfs_inode_dotl.c": [
      "File: fs/9p/vfs_inode_dotl.c -> fs/9p/vfs_inode_dotl.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "143:  if (retval)",
      "144:   goto error;",
      "147:  v9fs_cache_inode_get_cookie(inode);",
      "148:  retval = v9fs_get_acl(inode, fid);",
      "149:  if (retval)",
      "",
      "[Removed Lines]",
      "146:  v9fs_stat2inode_dotl(st, inode);",
      "",
      "[Added Lines]",
      "146:  v9fs_stat2inode_dotl(st, inode, 0);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "496:  if (IS_ERR(st))",
      "497:   return PTR_ERR(st);",
      "500:  generic_fillattr(d_inode(dentry), stat);",
      "502:  stat->blksize = st->st_blksize;",
      "",
      "[Removed Lines]",
      "499:  v9fs_stat2inode_dotl(st, d_inode(dentry));",
      "",
      "[Added Lines]",
      "499:  v9fs_stat2inode_dotl(st, d_inode(dentry), 0);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "613: void",
      "615: {",
      "616:  umode_t mode;",
      "617:  struct v9fs_inode *v9inode = V9FS_I(inode);",
      "",
      "[Removed Lines]",
      "614: v9fs_stat2inode_dotl(struct p9_stat_dotl *stat, struct inode *inode)",
      "",
      "[Added Lines]",
      "615: v9fs_stat2inode_dotl(struct p9_stat_dotl *stat, struct inode *inode,",
      "616:         unsigned int flags)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "631:   mode |= inode->i_mode & ~S_IALLUGO;",
      "632:   inode->i_mode = mode;",
      "635:   inode->i_blocks = stat->st_blocks;",
      "636:  } else {",
      "637:   if (stat->st_result_mask & P9_STATS_ATIME) {",
      "",
      "[Removed Lines]",
      "634:   i_size_write(inode, stat->st_size);",
      "",
      "[Added Lines]",
      "636:   if (!(flags & V9FS_STAT2INODE_KEEP_ISIZE))",
      "637:    v9fs_i_size_write(inode, stat->st_size);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "661:   }",
      "662:   if (stat->st_result_mask & P9_STATS_RDEV)",
      "663:    inode->i_rdev = new_decode_dev(stat->st_rdev);",
      "666:   if (stat->st_result_mask & P9_STATS_BLOCKS)",
      "667:    inode->i_blocks = stat->st_blocks;",
      "668:  }",
      "",
      "[Removed Lines]",
      "664:   if (stat->st_result_mask & P9_STATS_SIZE)",
      "665:    i_size_write(inode, stat->st_size);",
      "",
      "[Added Lines]",
      "667:   if (!(flags & V9FS_STAT2INODE_KEEP_ISIZE) &&",
      "668:       stat->st_result_mask & P9_STATS_SIZE)",
      "669:    v9fs_i_size_write(inode, stat->st_size);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "929: int v9fs_refresh_inode_dotl(struct p9_fid *fid, struct inode *inode)",
      "930: {",
      "932:  struct p9_stat_dotl *st;",
      "933:  struct v9fs_session_info *v9ses;",
      "935:  v9ses = v9fs_inode2v9ses(inode);",
      "936:  st = p9_client_getattr_dotl(fid, P9_STATS_ALL);",
      "",
      "[Removed Lines]",
      "931:  loff_t i_size;",
      "",
      "[Added Lines]",
      "937:  unsigned int flags;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "942:  if ((inode->i_mode & S_IFMT) != (st->st_mode & S_IFMT))",
      "943:   goto out;",
      "955: out:",
      "956:  kfree(st);",
      "957:  return 0;",
      "",
      "[Removed Lines]",
      "945:  spin_lock(&inode->i_lock);",
      "950:  i_size = inode->i_size;",
      "951:  v9fs_stat2inode_dotl(st, inode);",
      "952:  if (v9ses->cache == CACHE_LOOSE || v9ses->cache == CACHE_FSCACHE)",
      "953:   inode->i_size = i_size;",
      "954:  spin_unlock(&inode->i_lock);",
      "",
      "[Added Lines]",
      "953:  flags = (v9ses->cache == CACHE_LOOSE || v9ses->cache == CACHE_FSCACHE) ?",
      "954:   V9FS_STAT2INODE_KEEP_ISIZE : 0;",
      "955:  v9fs_stat2inode_dotl(st, inode, flags);",
      "",
      "---------------"
    ],
    "fs/9p/vfs_super.c||fs/9p/vfs_super.c": [
      "File: fs/9p/vfs_super.c -> fs/9p/vfs_super.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "172:    goto release_sb;",
      "173:   }",
      "174:   d_inode(root)->i_ino = v9fs_qid2ino(&st->qid);",
      "176:   kfree(st);",
      "177:  } else {",
      "178:   struct p9_wstat *st = NULL;",
      "",
      "[Removed Lines]",
      "175:   v9fs_stat2inode_dotl(st, d_inode(root));",
      "",
      "[Added Lines]",
      "175:   v9fs_stat2inode_dotl(st, d_inode(root), 0);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "183:   }",
      "185:   d_inode(root)->i_ino = v9fs_qid2ino(&st->qid);",
      "188:   p9stat_free(st);",
      "189:   kfree(st);",
      "",
      "[Removed Lines]",
      "186:   v9fs_stat2inode(st, d_inode(root), sb);",
      "",
      "[Added Lines]",
      "186:   v9fs_stat2inode(st, d_inode(root), sb, 0);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9f0bbf3115ca9f91f43b7c74e9ac7d79f47fc6c2",
      "candidate_info": {
        "commit_hash": "9f0bbf3115ca9f91f43b7c74e9ac7d79f47fc6c2",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/9f0bbf3115ca9f91f43b7c74e9ac7d79f47fc6c2",
        "files": [
          "kernel/trace/trace_events_hist.c"
        ],
        "message": "tracing: Use strncpy instead of memcpy for string keys in hist triggers\n\nBecause there may be random garbage beyond a string's null terminator,\nit's not correct to copy the the complete character array for use as a\nhist trigger key.  This results in multiple histogram entries for the\n'same' string key.\n\nSo, in the case of a string key, use strncpy instead of memcpy to\navoid copying in the extra bytes.\n\nBefore, using the gdbus entries in the following hist trigger as an\nexample:\n\n  # echo 'hist:key=comm' > /sys/kernel/debug/tracing/events/sched/sched_waking/trigger\n  # cat /sys/kernel/debug/tracing/events/sched/sched_waking/hist\n\n  ...\n\n  { comm: ImgDecoder #4                      } hitcount:        203\n  { comm: gmain                              } hitcount:        213\n  { comm: gmain                              } hitcount:        216\n  { comm: StreamTrans #73                    } hitcount:        221\n  { comm: mozStorage #3                      } hitcount:        230\n  { comm: gdbus                              } hitcount:        233\n  { comm: StyleThread#5                      } hitcount:        253\n  { comm: gdbus                              } hitcount:        256\n  { comm: gdbus                              } hitcount:        260\n  { comm: StyleThread#4                      } hitcount:        271\n\n  ...\n\n  # cat /sys/kernel/debug/tracing/events/sched/sched_waking/hist | egrep gdbus | wc -l\n  51\n\nAfter:\n\n  # cat /sys/kernel/debug/tracing/events/sched/sched_waking/hist | egrep gdbus | wc -l\n  1\n\nLink: http://lkml.kernel.org/r/50c35ae1267d64eee975b8125e151e600071d4dc.1549309756.git.tom.zanussi@linux.intel.com\n\nCc: Namhyung Kim <namhyung@kernel.org>\nCc: stable@vger.kernel.org\nFixes: 79e577cbce4c4 (\"tracing: Support string type key properly\")\nSigned-off-by: Tom Zanussi <tom.zanussi@linux.intel.com>\nSigned-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>",
        "before_after_code_files": [
          "kernel/trace/trace_events_hist.c||kernel/trace/trace_events_hist.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kernel/trace/trace_events_hist.c||kernel/trace/trace_events_hist.c": [
          "File: kernel/trace/trace_events_hist.c -> kernel/trace/trace_events_hist.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5158:   if (size > key_field->size - 1)",
          "5159:    size = key_field->size - 1;",
          "5163: }",
          "5165: static void",
          "",
          "[Removed Lines]",
          "5160:  }",
          "5162:  memcpy(compound_key + key_field->offset, key, size);",
          "",
          "[Added Lines]",
          "5161:   strncpy(compound_key + key_field->offset, (char *)key, size);",
          "5162:  } else",
          "5163:   memcpy(compound_key + key_field->offset, key, size);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6bd288569b50bc89fa5513031086746968f585cb",
      "candidate_info": {
        "commit_hash": "6bd288569b50bc89fa5513031086746968f585cb",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/6bd288569b50bc89fa5513031086746968f585cb",
        "files": [
          "arch/arm64/kernel/kgdb.c",
          "arch/arm64/kernel/probes/kprobes.c"
        ],
        "message": "arm64: debug: Ensure debug handlers check triggering exception level\n\nDebug exception handlers may be called for exceptions generated both by\nuser and kernel code. In many cases, this is checked explicitly, but\nin other cases things either happen to work by happy accident or they\ngo slightly wrong. For example, executing 'brk #4' from userspace will\nenter the kprobes code and be ignored, but the instruction will be\nretried forever in userspace instead of delivering a SIGTRAP.\n\nFix this issue in the most stable-friendly fashion by simply adding\nexplicit checks of the triggering exception level to all of our debug\nexception handlers.\n\nCc: <stable@vger.kernel.org>\nReviewed-by: Mark Rutland <mark.rutland@arm.com>\nSigned-off-by: Will Deacon <will.deacon@arm.com>\nSigned-off-by: Catalin Marinas <catalin.marinas@arm.com>",
        "before_after_code_files": [
          "arch/arm64/kernel/kgdb.c||arch/arm64/kernel/kgdb.c",
          "arch/arm64/kernel/probes/kprobes.c||arch/arm64/kernel/probes/kprobes.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/arm64/kernel/kgdb.c||arch/arm64/kernel/kgdb.c": [
          "File: arch/arm64/kernel/kgdb.c -> arch/arm64/kernel/kgdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "245: static int kgdb_brk_fn(struct pt_regs *regs, unsigned int esr)",
          "246: {",
          "247:  kgdb_handle_exception(1, SIGTRAP, 0, regs);",
          "249: }",
          "250: NOKPROBE_SYMBOL(kgdb_brk_fn)",
          "252: static int kgdb_compiled_brk_fn(struct pt_regs *regs, unsigned int esr)",
          "253: {",
          "254:  compiled_break = 1;",
          "255:  kgdb_handle_exception(1, SIGTRAP, 0, regs);",
          "258: }",
          "259: NOKPROBE_SYMBOL(kgdb_compiled_brk_fn);",
          "261: static int kgdb_step_brk_fn(struct pt_regs *regs, unsigned int esr)",
          "262: {",
          "264:   return DBG_HOOK_ERROR;",
          "266:  kgdb_handle_exception(1, SIGTRAP, 0, regs);",
          "268: }",
          "269: NOKPROBE_SYMBOL(kgdb_step_brk_fn);",
          "",
          "[Removed Lines]",
          "248:  return 0;",
          "257:  return 0;",
          "263:  if (!kgdb_single_step)",
          "267:  return 0;",
          "",
          "[Added Lines]",
          "247:  if (user_mode(regs))",
          "248:   return DBG_HOOK_ERROR;",
          "251:  return DBG_HOOK_HANDLED;",
          "257:  if (user_mode(regs))",
          "258:   return DBG_HOOK_ERROR;",
          "263:  return DBG_HOOK_HANDLED;",
          "269:  if (user_mode(regs) || !kgdb_single_step)",
          "273:  return DBG_HOOK_HANDLED;",
          "",
          "---------------"
        ],
        "arch/arm64/kernel/probes/kprobes.c||arch/arm64/kernel/probes/kprobes.c": [
          "File: arch/arm64/kernel/probes/kprobes.c -> arch/arm64/kernel/probes/kprobes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "450:  struct kprobe_ctlblk *kcb = get_kprobe_ctlblk();",
          "451:  int retval;",
          "454:  retval = kprobe_ss_hit(kcb, instruction_pointer(regs));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "453:  if (user_mode(regs))",
          "454:   return DBG_HOOK_ERROR;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "466: int __kprobes",
          "467: kprobe_breakpoint_handler(struct pt_regs *regs, unsigned int esr)",
          "468: {",
          "469:  kprobe_handler(regs);",
          "470:  return DBG_HOOK_HANDLED;",
          "471: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "472:  if (user_mode(regs))",
          "473:   return DBG_HOOK_ERROR;",
          "",
          "---------------"
        ]
      }
    }
  ]
}