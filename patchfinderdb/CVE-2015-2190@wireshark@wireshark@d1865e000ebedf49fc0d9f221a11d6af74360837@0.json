{
  "cve_id": "CVE-2015-2190",
  "cve_desc": "epan/proto.c in Wireshark 1.12.x before 1.12.4 does not properly handle integer data types greater than 32 bits in size, which allows remote attackers to cause a denial of service (assertion failure and application exit) via a crafted packet that is improperly handled by the LLDP dissector.",
  "repo": "wireshark/wireshark",
  "patch_hash": "d1865e000ebedf49fc0d9f221a11d6af74360837",
  "patch_info": {
    "commit_hash": "d1865e000ebedf49fc0d9f221a11d6af74360837",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/d1865e000ebedf49fc0d9f221a11d6af74360837",
    "files": [
      "epan/proto.c"
    ],
    "message": "Make FT_{U}INT{40,48,56,64} handle BASE_CUSTOM.\n\nFinish the job of handling integral values > 32 bits similarly to who we\nhandle values 32 bits or less.\n\nIn cases that \"should not happen\", and where we might *not* be executing\nin the context of a dissector (filling in the field label can be done\nlazily, being deferred to \"print\" time, and that doesn't happen in the\ncontext of a dissector), use g_assert_not_reached() rather than\nDISSECTOR_ASSERT_NOT_REACHED() - the latter throws an assertion that's\nnot caught if we're not doing dissection, so we crash anyway.\n\nBug: 10983\nChange-Id: Ia81a0a4925394f99aa35193a333f3e9659a9b93d\nReviewed-on: https://code.wireshark.org/review/7307\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
    "before_after_code_files": [
      "epan/proto.c||epan/proto.c"
    ]
  },
  "patch_diff": {
    "epan/proto.c||epan/proto.c": [
      "File: epan/proto.c -> epan/proto.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "174: static const char *hfinfo_numeric_value_format(const header_field_info *hfinfo, char buf[32], guint32 value);",
      "175: static const char *hfinfo_numeric_value_format64(const header_field_info *hfinfo, char buf[32], guint64 value);",
      "180: static proto_item *",
      "181: proto_tree_add_node(proto_tree *tree, field_info *fi);",
      "",
      "[Removed Lines]",
      "177: static const char* hfinfo_uint64_format(const header_field_info *hfinfo);",
      "178: static const char* hfinfo_int64_format(const header_field_info *hfinfo);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "6659: static void",
      "6660: fill_label_number64(field_info *fi, gchar *label_str, gboolean is_signed)",
      "6661: {",
      "6663:  header_field_info *hfinfo = fi->hfinfo;",
      "6664:  guint64            value;",
      "6670:   value = fvalue_get_sinteger64(&fi->value);",
      "6673:   value = fvalue_get_uinteger64(&fi->value);",
      "6683:   const char *val_str = hf_try_val64_to_str_const(value, hfinfo, \"Unknown\");",
      "6686:    label_fill(label_str, 0, hfinfo, val_str);",
      "6691:  }",
      "6692:  else {",
      "6694:  }",
      "6695: }",
      "",
      "[Removed Lines]",
      "6662:  const char        *format = NULL;",
      "6665:  char               tmp[ITEM_LABEL_LENGTH+1];",
      "6668:  if (is_signed) {",
      "6669:   format = hfinfo_int64_format(hfinfo);",
      "6671:  } else {",
      "6672:   format = hfinfo_uint64_format(hfinfo);",
      "6674:  }",
      "6677:  if (IS_BASE_DUAL(hfinfo->display))",
      "6678:   g_snprintf(tmp, ITEM_LABEL_LENGTH, format, value, value);",
      "6679:  else",
      "6680:   g_snprintf(tmp, ITEM_LABEL_LENGTH, format, value);",
      "6682:  if (hfinfo->strings) {",
      "6685:   if ((hfinfo->display & FIELD_DISPLAY_E_MASK) == BASE_NONE) {",
      "6687:   }",
      "6688:   else {",
      "6689:    label_fill_descr(label_str, 0, hfinfo, val_str, tmp);",
      "6690:   }",
      "6693:   label_fill(label_str, 0, hfinfo, tmp);",
      "",
      "[Added Lines]",
      "6662:  char               buf[32];",
      "6663:  const char        *out;",
      "6665:  if (is_signed)",
      "6667:  else",
      "6671:  if (hfinfo->display == BASE_CUSTOM) {",
      "6672:   gchar tmp[ITEM_LABEL_LENGTH];",
      "6673:   const custom_fmt_func_64_t fmtfunc64 = (const custom_fmt_func_64_t)hfinfo->strings;",
      "6675:   DISSECTOR_ASSERT(fmtfunc64);",
      "6676:   fmtfunc64(tmp, value);",
      "6677:   label_fill(label_str, 0, hfinfo, tmp);",
      "6678:  }",
      "6679:  else if (hfinfo->strings) {",
      "6682:   out = hfinfo_number_vals_format64(hfinfo, buf, value);",
      "6685:   else",
      "6686:    label_fill_descr(label_str, 0, hfinfo, val_str, out);",
      "6689:   out = hfinfo_number_value_format64(hfinfo, buf, value);",
      "6691:   label_fill(label_str, 0, hfinfo, out);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "6830:     return ptr;",
      "6832:    default:",
      "6835:   }",
      "6836:  return ptr;",
      "6837: }",
      "",
      "[Removed Lines]",
      "6833:     DISSECTOR_ASSERT_NOT_REACHED();",
      "6834:     ;",
      "",
      "[Added Lines]",
      "6831:     g_assert_not_reached();",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "6871:     return ptr;",
      "6873:    default:",
      "6876:   }",
      "6877:  return ptr;",
      "6878: }",
      "",
      "[Removed Lines]",
      "6874:     DISSECTOR_ASSERT_NOT_REACHED();",
      "6875:     ;",
      "",
      "[Added Lines]",
      "6871:     g_assert_not_reached();",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "7003:  return hfinfo_number_value_format_display64(hfinfo, display, buf, value);",
      "7004: }",
      "7064: const char *",
      "7065: proto_registrar_get_name(const int n)",
      "7066: {",
      "",
      "[Removed Lines]",
      "7006: static const char *",
      "7007: hfinfo_uint64_format(const header_field_info *hfinfo)",
      "7008: {",
      "7009:  const char *format = NULL;",
      "7012:  switch (hfinfo->display & FIELD_DISPLAY_E_MASK) {",
      "7013:   case BASE_DEC:",
      "7014:    format = \"%\" G_GINT64_MODIFIER \"u\";",
      "7015:    break;",
      "7016:   case BASE_DEC_HEX:",
      "7017:    format = \"%\" G_GINT64_MODIFIER \"u (0x%016\" G_GINT64_MODIFIER \"x)\";",
      "7018:    break;",
      "7020:    format = \"%#\" G_GINT64_MODIFIER \"o\";",
      "7021:    break;",
      "7022:   case BASE_HEX:",
      "7023:    format = \"0x%016\" G_GINT64_MODIFIER \"x\";",
      "7024:    break;",
      "7025:   case BASE_HEX_DEC:",
      "7026:    format = \"0x%016\" G_GINT64_MODIFIER \"x (%\" G_GINT64_MODIFIER \"u)\";",
      "7027:    break;",
      "7028:   default:",
      "7029:    DISSECTOR_ASSERT_NOT_REACHED();",
      "7030:    ;",
      "7031:  }",
      "7032:  return format;",
      "7033: }",
      "7035: static const char *",
      "7036: hfinfo_int64_format(const header_field_info *hfinfo)",
      "7037: {",
      "7038:  const char *format = NULL;",
      "7041:  switch (hfinfo->display & FIELD_DISPLAY_E_MASK) {",
      "7042:   case BASE_DEC:",
      "7043:    format = \"%\" G_GINT64_MODIFIER \"d\";",
      "7044:    break;",
      "7045:   case BASE_DEC_HEX:",
      "7046:    format = \"%\" G_GINT64_MODIFIER \"d (0x%016\" G_GINT64_MODIFIER \"x)\";",
      "7047:    break;",
      "7049:    format = \"%#\" G_GINT64_MODIFIER \"o\";",
      "7050:    break;",
      "7051:   case BASE_HEX:",
      "7052:    format = \"0x%016\" G_GINT64_MODIFIER \"x\";",
      "7053:    break;",
      "7054:   case BASE_HEX_DEC:",
      "7055:    format = \"0x%016\" G_GINT64_MODIFIER \"x (%\" G_GINT64_MODIFIER \"d)\";",
      "7056:    break;",
      "7057:   default:",
      "7058:    DISSECTOR_ASSERT_NOT_REACHED();",
      "7059:    ;",
      "7060:  }",
      "7061:  return format;",
      "7062: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e2bcee6ac442e6eb66dd3b09186070de4acb0010",
      "candidate_info": {
        "commit_hash": "e2bcee6ac442e6eb66dd3b09186070de4acb0010",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/e2bcee6ac442e6eb66dd3b09186070de4acb0010",
        "files": [
          "doc/README.dissector",
          "epan/dfilter/semcheck.c",
          "epan/ftypes/ftype-bytes.c",
          "epan/ftypes/ftype-double.c",
          "epan/ftypes/ftype-guid.c",
          "epan/ftypes/ftype-integer.c",
          "epan/ftypes/ftype-ipv4.c",
          "epan/ftypes/ftype-ipv6.c",
          "epan/ftypes/ftype-none.c",
          "epan/ftypes/ftype-pcre.c",
          "epan/ftypes/ftype-string.c",
          "epan/ftypes/ftype-time.c",
          "epan/ftypes/ftype-tvbuff.c",
          "epan/ftypes/ftypes-int.h",
          "epan/ftypes/ftypes.c",
          "epan/ftypes/ftypes.h",
          "epan/print.c",
          "epan/proto.c",
          "epan/proto.h",
          "epan/to_str-int.h",
          "epan/to_str.c",
          "epan/to_str.h",
          "epan/wslua/wslua_field.c",
          "rawshark.c",
          "ui/cli/tap-iostat.c",
          "ui/io_graph_item.h"
        ],
        "message": "Make FT_{U}INT64 behave more like FT_{U}INT32, add support for FT_{U}INT{40,48,56}\n\nChange-Id: I57354c309ecf3a0c8f0c7cff485638027f30bb19\nReviewed-on: https://code.wireshark.org/review/5813\nReviewed-by: Michael Mann <mmann78@netscape.net>\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/dfilter/semcheck.c||epan/dfilter/semcheck.c",
          "epan/ftypes/ftype-bytes.c||epan/ftypes/ftype-bytes.c",
          "epan/ftypes/ftype-double.c||epan/ftypes/ftype-double.c",
          "epan/ftypes/ftype-guid.c||epan/ftypes/ftype-guid.c",
          "epan/ftypes/ftype-integer.c||epan/ftypes/ftype-integer.c",
          "epan/ftypes/ftype-ipv4.c||epan/ftypes/ftype-ipv4.c",
          "epan/ftypes/ftype-ipv6.c||epan/ftypes/ftype-ipv6.c",
          "epan/ftypes/ftype-none.c||epan/ftypes/ftype-none.c",
          "epan/ftypes/ftype-pcre.c||epan/ftypes/ftype-pcre.c",
          "epan/ftypes/ftype-string.c||epan/ftypes/ftype-string.c",
          "epan/ftypes/ftype-time.c||epan/ftypes/ftype-time.c",
          "epan/ftypes/ftype-tvbuff.c||epan/ftypes/ftype-tvbuff.c",
          "epan/ftypes/ftypes-int.h||epan/ftypes/ftypes-int.h",
          "epan/ftypes/ftypes.c||epan/ftypes/ftypes.c",
          "epan/ftypes/ftypes.h||epan/ftypes/ftypes.h",
          "epan/print.c||epan/print.c",
          "epan/proto.c||epan/proto.c",
          "epan/proto.h||epan/proto.h",
          "epan/to_str-int.h||epan/to_str-int.h",
          "epan/to_str.c||epan/to_str.c",
          "epan/to_str.h||epan/to_str.h",
          "epan/wsluwslua_field.c||epan/wslua/wslua_field.c",
          "rawshark.c||rawshark.c",
          "ui/cli/tap-iostat.c||ui/cli/tap-iostat.c",
          "ui/io_graph_item.h||ui/io_graph_item.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/proto.c||epan/proto.c"
          ],
          "candidate": [
            "epan/proto.c||epan/proto.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dfilter/semcheck.c||epan/dfilter/semcheck.c": [
          "File: epan/dfilter/semcheck.c -> epan/dfilter/semcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:  fvalue_t *fv;",
          "177:  fv = fvalue_new(FT_UINT64);",
          "180:  return fv;",
          "181: }",
          "",
          "[Removed Lines]",
          "178:  fvalue_set_integer64(fv, val);",
          "",
          "[Added Lines]",
          "184:  fvalue_set_uinteger64(fv, val);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "224:   case FT_UINT16:",
          "225:   case FT_UINT24:",
          "226:   case FT_UINT32:",
          "227:   case FT_UINT64:",
          "228:   case FT_INT8:",
          "229:   case FT_INT16:",
          "230:   case FT_INT24:",
          "231:   case FT_INT32:",
          "232:   case FT_INT64:",
          "233:    break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "233:   case FT_UINT40:",
          "234:   case FT_UINT48:",
          "235:   case FT_UINT56:",
          "241:   case FT_INT40:",
          "242:   case FT_INT48:",
          "243:   case FT_INT56:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "352:   case FT_UINT16:",
          "353:   case FT_UINT24:",
          "354:   case FT_UINT32:",
          "355:   case FT_UINT64:",
          "356:   case FT_INT8:",
          "357:   case FT_INT16:",
          "358:   case FT_INT24:",
          "359:   case FT_INT32:",
          "360:   case FT_INT64:",
          "361:   case FT_PCRE:",
          "362:   case FT_EUI64:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "367:   case FT_UINT40:",
          "368:   case FT_UINT48:",
          "369:   case FT_UINT56:",
          "375:   case FT_INT40:",
          "376:   case FT_INT48:",
          "377:   case FT_INT56:",
          "",
          "---------------"
        ],
        "epan/ftypes/ftype-bytes.c||epan/ftypes/ftype-bytes.c": [
          "File: epan/ftypes/ftype-bytes.c -> epan/ftypes/ftype-bytes.c"
        ],
        "epan/ftypes/ftype-double.c||epan/ftypes/ftype-double.c": [
          "File: epan/ftypes/ftype-double.c -> epan/ftypes/ftype-double.c"
        ],
        "epan/ftypes/ftype-guid.c||epan/ftypes/ftype-guid.c": [
          "File: epan/ftypes/ftype-guid.c -> epan/ftypes/ftype-guid.c"
        ],
        "epan/ftypes/ftype-integer.c||epan/ftypes/ftype-integer.c": [
          "File: epan/ftypes/ftype-integer.c -> epan/ftypes/ftype-integer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:      guint32 max)",
          "66: {",
          "67:  unsigned long value;",
          "70:  if (strchr (s, '-') && strtol(s, NULL, 0) < 0) {",
          "",
          "[Removed Lines]",
          "68:  char    *endptr;",
          "",
          "[Added Lines]",
          "68:  char *endptr;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "257: static gboolean",
          "258: ipxnet_from_unparsed(fvalue_t *fv, const char *s, gboolean allow_partial_value _U_, gchar **err_msg)",
          "259: {",
          "261:  gboolean known;",
          "",
          "[Removed Lines]",
          "260:  guint32  val;",
          "",
          "[Added Lines]",
          "260:  guint32 val;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "361: static void",
          "362: int64_fvalue_new(fvalue_t *fv)",
          "363: {",
          "365: }",
          "367: static void",
          "369: {",
          "371: }",
          "373: static guint64",
          "375: {",
          "377: }",
          "379: static gboolean",
          "381: {",
          "382:  guint64 value;",
          "385:  if (strchr (s, '-') && g_ascii_strtoll(s, NULL, 0) < 0) {",
          "",
          "[Removed Lines]",
          "364:  fv->value.integer64 = 0;",
          "368: set_integer64(fvalue_t *fv, guint64 value)",
          "370:  fv->value.integer64 = value;",
          "374: get_integer64(fvalue_t *fv)",
          "376:  return fv->value.integer64;",
          "380: uint64_from_unparsed(fvalue_t *fv, const char *s, gboolean allow_partial_value _U_, gchar **err_msg)",
          "383:  char    *endptr;",
          "",
          "[Added Lines]",
          "364:  fv->value.uinteger64 = 0;",
          "365: }",
          "367: static void",
          "368: set_uinteger64(fvalue_t *fv, guint64 value)",
          "369: {",
          "370:  fv->value.uinteger64 = value;",
          "374: set_sinteger64(fvalue_t *fv, gint64 value)",
          "376:  fv->value.sinteger64 = value;",
          "380: get_uinteger64(fvalue_t *fv)",
          "382:  return fv->value.uinteger64;",
          "383: }",
          "385: static gint64",
          "386: get_sinteger64(fvalue_t *fv)",
          "387: {",
          "388:  return fv->value.sinteger64;",
          "392: _uint64_from_unparsed(fvalue_t *fv, const char *s, gboolean allow_partial_value _U_, gchar **err_msg,",
          "393:      guint64 max)",
          "396:  char *endptr;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "417:   return FALSE;",
          "418:  }",
          "421:  return TRUE;",
          "422: }",
          "424: static gboolean",
          "426: {",
          "427:  gint64 value;",
          "428:  char   *endptr;",
          "",
          "[Removed Lines]",
          "420:  fv->value.integer64 = value;",
          "425: sint64_from_unparsed(fvalue_t *fv, const char *s, gboolean allow_partial_value _U_, gchar **err_msg)",
          "",
          "[Added Lines]",
          "433:  if (value > max) {",
          "434:   if (err_msg != NULL)",
          "436:   return FALSE;",
          "437:  }",
          "439:  fv->value.uinteger64 = value;",
          "444: uint64_from_unparsed(fvalue_t *fv, const char *s, gboolean allow_partial_value, gchar **err_msg)",
          "445: {",
          "446:  return _uint64_from_unparsed (fv, s, allow_partial_value, err_msg, G_MAXUINT64);",
          "447: }",
          "449: static gboolean",
          "450: uint56_from_unparsed(fvalue_t *fv, const char *s, gboolean allow_partial_value, gchar **err_msg)",
          "451: {",
          "452:  return _uint64_from_unparsed (fv, s, allow_partial_value, err_msg, 0xFFFFFFFFFFFFFF);",
          "453: }",
          "455: static gboolean",
          "456: uint48_from_unparsed(fvalue_t *fv, const char *s, gboolean allow_partial_value, gchar **err_msg)",
          "457: {",
          "458:  return _uint64_from_unparsed (fv, s, allow_partial_value, err_msg, 0xFFFFFFFFFFFF);",
          "459: }",
          "461: static gboolean",
          "462: uint40_from_unparsed(fvalue_t *fv, const char *s, gboolean allow_partial_value, gchar **err_msg)",
          "463: {",
          "464:  return _uint64_from_unparsed (fv, s, allow_partial_value, err_msg, 0xFFFFFFFFFF);",
          "465: }",
          "467: static gboolean",
          "468: _sint64_from_unparsed(fvalue_t *fv, const char *s, gboolean allow_partial_value _U_, gchar **err_msg,",
          "469:      gint64 max, gint64 min)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "465:   return FALSE;",
          "466:  }",
          "469:  return TRUE;",
          "470: }",
          "472: static int",
          "473: integer64_repr_len(fvalue_t *fv _U_, ftrepr_t rtype _U_, int field_display _U_)",
          "474: {",
          "",
          "[Removed Lines]",
          "468:  fv->value.integer64 = (guint64)value;",
          "",
          "[Added Lines]",
          "512:  if (value > max) {",
          "513:   if (err_msg != NULL)",
          "515:   return FALSE;",
          "516:  } else if (value < min) {",
          "517:   if (err_msg != NULL)",
          "519:   return FALSE;",
          "520:  }",
          "522:  fv->value.sinteger64 = (guint64)value;",
          "526: static gboolean",
          "527: sint64_from_unparsed(fvalue_t *fv, const char *s, gboolean allow_partial_value, gchar **err_msg)",
          "528: {",
          "529:  return _sint64_from_unparsed (fv, s, allow_partial_value, err_msg, G_MAXINT64, G_MININT64);",
          "530: }",
          "532: static gboolean",
          "533: sint56_from_unparsed(fvalue_t *fv, const char *s, gboolean allow_partial_value, gchar **err_msg)",
          "534: {",
          "535:  return _sint64_from_unparsed (fv, s, allow_partial_value, err_msg, 0x7FFFFFFFFFFFFF, -0x80000000000000);",
          "536: }",
          "538: static gboolean",
          "539: sint48_from_unparsed(fvalue_t *fv, const char *s, gboolean allow_partial_value, gchar **err_msg)",
          "540: {",
          "541:  return _sint64_from_unparsed (fv, s, allow_partial_value, err_msg, 0x7FFFFFFFFFFF, -0x800000000000);",
          "542: }",
          "544: static gboolean",
          "545: sint40_from_unparsed(fvalue_t *fv, const char *s, gboolean allow_partial_value, gchar **err_msg)",
          "546: {",
          "547:  return _sint64_from_unparsed (fv, s, allow_partial_value, err_msg, 0x7FFFFFFFFF, -0x8000000000);",
          "548: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "478: static void",
          "479: integer64_to_repr(fvalue_t *fv, ftrepr_t rtype _U_, int field_display _U_, char *buf)",
          "480: {",
          "482: }",
          "484: static int",
          "",
          "[Removed Lines]",
          "481:  sprintf(buf, \"%\" G_GINT64_MODIFIER \"d\", (gint64)fv->value.integer64);",
          "",
          "[Added Lines]",
          "559:  guint64 val;",
          "561:  if (fv->value.sinteger < 0) {",
          "563:   val = -fv->value.sinteger;",
          "564:  } else",
          "565:   val = fv->value.sinteger;",
          "567:  guint64_to_str_buf(val, buf, 20);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "490: static void",
          "491: uinteger64_to_repr(fvalue_t *fv, ftrepr_t rtype _U_, int field_display _U_, char *buf)",
          "492: {",
          "494: }",
          "496: static gboolean",
          "497: cmp_eq64(const fvalue_t *a, const fvalue_t *b)",
          "498: {",
          "500: }",
          "502: static gboolean",
          "503: cmp_ne64(const fvalue_t *a, const fvalue_t *b)",
          "504: {",
          "506: }",
          "508: static gboolean",
          "509: u_cmp_gt64(const fvalue_t *a, const fvalue_t *b)",
          "510: {",
          "512: }",
          "514: static gboolean",
          "515: u_cmp_ge64(const fvalue_t *a, const fvalue_t *b)",
          "516: {",
          "518: }",
          "520: static gboolean",
          "521: u_cmp_lt64(const fvalue_t *a, const fvalue_t *b)",
          "522: {",
          "524: }",
          "526: static gboolean",
          "527: u_cmp_le64(const fvalue_t *a, const fvalue_t *b)",
          "528: {",
          "530: }",
          "532: static gboolean",
          "533: s_cmp_gt64(const fvalue_t *a, const fvalue_t *b)",
          "534: {",
          "536: }",
          "538: static gboolean",
          "539: s_cmp_ge64(const fvalue_t *a, const fvalue_t *b)",
          "540: {",
          "542: }",
          "544: static gboolean",
          "545: s_cmp_lt64(const fvalue_t *a, const fvalue_t *b)",
          "546: {",
          "548: }",
          "550: static gboolean",
          "551: s_cmp_le64(const fvalue_t *a, const fvalue_t *b)",
          "552: {",
          "554: }",
          "556: static gboolean",
          "557: cmp_bitwise_and64(const fvalue_t *a, const fvalue_t *b)",
          "558: {",
          "560: }",
          "",
          "[Removed Lines]",
          "493:  sprintf(buf, \"%\" G_GINT64_MODIFIER \"u\", fv->value.integer64);",
          "499:  return a->value.integer64 == b->value.integer64;",
          "505:  return a->value.integer64 != b->value.integer64;",
          "511:  return a->value.integer64 > b->value.integer64;",
          "517:  return a->value.integer64 >= b->value.integer64;",
          "523:  return a->value.integer64 < b->value.integer64;",
          "529:  return a->value.integer64 <= b->value.integer64;",
          "535:  return (gint64)a->value.integer64 > (gint64)b->value.integer64;",
          "541:  return (gint64)a->value.integer64 >= (gint64)b->value.integer64;",
          "547:  return (gint64)a->value.integer64 < (gint64)b->value.integer64;",
          "553:  return (gint64)a->value.integer64 <= (gint64)b->value.integer64;",
          "559:  return ((a->value.integer64 & b->value.integer64) != 0);",
          "",
          "[Added Lines]",
          "579:  guint64_to_str_buf(fv->value.uinteger, buf, 21);",
          "585:  return a->value.uinteger64 == b->value.uinteger64;",
          "591:  return a->value.uinteger64 != b->value.uinteger64;",
          "597:  return a->value.uinteger64 > b->value.uinteger64;",
          "603:  return a->value.uinteger64 >= b->value.uinteger64;",
          "609:  return a->value.uinteger64 < b->value.uinteger64;",
          "615:  return a->value.uinteger64 <= b->value.uinteger64;",
          "621:  return (gint64)a->value.sinteger64 > (gint64)b->value.sinteger64;",
          "627:  return (gint64)a->value.sinteger64 >= (gint64)b->value.sinteger64;",
          "633:  return (gint64)a->value.sinteger64 < (gint64)b->value.sinteger64;",
          "639:  return (gint64)a->value.sinteger64 <= (gint64)b->value.sinteger64;",
          "645:  return ((a->value.uinteger64 & b->value.uinteger64) != 0);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "824:  };",
          "825:  static ftype_t uint64_type = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "919:  static ftype_t uint40_type = {",
          "950:   cmp_eq64,",
          "951:   cmp_ne64,",
          "952:   u_cmp_gt64,",
          "953:   u_cmp_ge64,",
          "954:   u_cmp_lt64,",
          "955:   u_cmp_le64,",
          "956:   cmp_bitwise_and64,",
          "960:   NULL,",
          "961:   NULL,",
          "962:  };",
          "963:  static ftype_t uint48_type = {",
          "994:   cmp_eq64,",
          "995:   cmp_ne64,",
          "996:   u_cmp_gt64,",
          "997:   u_cmp_ge64,",
          "998:   u_cmp_lt64,",
          "999:   u_cmp_le64,",
          "1000:   cmp_bitwise_and64,",
          "1004:   NULL,",
          "1005:   NULL,",
          "1006:  };",
          "1007:  static ftype_t uint56_type = {",
          "1038:   cmp_eq64,",
          "1039:   cmp_ne64,",
          "1040:   u_cmp_gt64,",
          "1041:   u_cmp_ge64,",
          "1042:   u_cmp_lt64,",
          "1043:   u_cmp_le64,",
          "1044:   cmp_bitwise_and64,",
          "1048:   NULL,",
          "1049:   NULL,",
          "1050:  };",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1034:  };",
          "1035:  static ftype_t int64_type = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1271:  static ftype_t int40_type = {",
          "1302:   cmp_eq64,",
          "1303:   cmp_ne64,",
          "1304:   s_cmp_gt64,",
          "1305:   s_cmp_ge64,",
          "1306:   s_cmp_lt64,",
          "1307:   s_cmp_le64,",
          "1308:   cmp_bitwise_and64,",
          "1312:   NULL,",
          "1313:   NULL,",
          "1314:  };",
          "1315:  static ftype_t int48_type = {",
          "1346:   cmp_eq64,",
          "1347:   cmp_ne64,",
          "1348:   s_cmp_gt64,",
          "1349:   s_cmp_ge64,",
          "1350:   s_cmp_lt64,",
          "1351:   s_cmp_le64,",
          "1352:   cmp_bitwise_and64,",
          "1356:   NULL,",
          "1357:   NULL,",
          "1358:  };",
          "1359:  static ftype_t int56_type = {",
          "1390:   cmp_eq64,",
          "1391:   cmp_ne64,",
          "1392:   s_cmp_gt64,",
          "1393:   s_cmp_ge64,",
          "1394:   s_cmp_lt64,",
          "1395:   s_cmp_le64,",
          "1396:   cmp_bitwise_and64,",
          "1400:   NULL,",
          "1401:   NULL,",
          "1402:  };",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1250:  ftype_register(FT_UINT16, &uint16_type);",
          "1251:  ftype_register(FT_UINT24, &uint24_type);",
          "1252:  ftype_register(FT_UINT32, &uint32_type);",
          "1253:  ftype_register(FT_UINT64, &uint64_type);",
          "1254:  ftype_register(FT_INT8, &int8_type);",
          "1255:  ftype_register(FT_INT16, &int16_type);",
          "1256:  ftype_register(FT_INT24, &int24_type);",
          "1257:  ftype_register(FT_INT32, &int32_type);",
          "1258:  ftype_register(FT_INT64, &int64_type);",
          "1259:  ftype_register(FT_BOOLEAN, &boolean_type);",
          "1260:  ftype_register(FT_IPXNET, &ipxnet_type);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1631:  ftype_register(FT_UINT40, &uint40_type);",
          "1632:  ftype_register(FT_UINT48, &uint48_type);",
          "1633:  ftype_register(FT_UINT56, &uint56_type);",
          "1639:  ftype_register(FT_INT40, &int40_type);",
          "1640:  ftype_register(FT_INT48, &int48_type);",
          "1641:  ftype_register(FT_INT56, &int56_type);",
          "",
          "---------------"
        ],
        "epan/ftypes/ftype-ipv4.c||epan/ftypes/ftype-ipv4.c": [
          "File: epan/ftypes/ftype-ipv4.c -> epan/ftypes/ftype-ipv4.c"
        ],
        "epan/ftypes/ftype-ipv6.c||epan/ftypes/ftype-ipv6.c": [
          "File: epan/ftypes/ftype-ipv6.c -> epan/ftypes/ftype-ipv6.c"
        ],
        "epan/ftypes/ftype-none.c||epan/ftypes/ftype-none.c": [
          "File: epan/ftypes/ftype-none.c -> epan/ftypes/ftype-none.c"
        ],
        "epan/ftypes/ftype-pcre.c||epan/ftypes/ftype-pcre.c": [
          "File: epan/ftypes/ftype-pcre.c -> epan/ftypes/ftype-pcre.c"
        ],
        "epan/ftypes/ftype-string.c||epan/ftypes/ftype-string.c": [
          "File: epan/ftypes/ftype-string.c -> epan/ftypes/ftype-string.c"
        ],
        "epan/ftypes/ftype-time.c||epan/ftypes/ftype-time.c": [
          "File: epan/ftypes/ftype-time.c -> epan/ftypes/ftype-time.c"
        ],
        "epan/ftypes/ftype-tvbuff.c||epan/ftypes/ftype-tvbuff.c": [
          "File: epan/ftypes/ftype-tvbuff.c -> epan/ftypes/ftype-tvbuff.c"
        ],
        "epan/ftypes/ftypes-int.h||epan/ftypes/ftypes-int.h": [
          "File: epan/ftypes/ftypes-int.h -> epan/ftypes/ftypes-int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: typedef void (*FvalueSetTvbuffFunc)(fvalue_t*, tvbuff_t *value);",
          "62: typedef void (*FvalueSetUnsignedIntegerFunc)(fvalue_t*, guint32);",
          "63: typedef void (*FvalueSetSignedIntegerFunc)(fvalue_t*, gint32);",
          "65: typedef void (*FvalueSetFloatingFunc)(fvalue_t*, gdouble);",
          "67: typedef gpointer (*FvalueGetFunc)(fvalue_t*);",
          "68: typedef guint32 (*FvalueGetUnsignedIntegerFunc)(fvalue_t*);",
          "69: typedef gint32  (*FvalueGetSignedIntegerFunc)(fvalue_t*);",
          "71: typedef double (*FvalueGetFloatingFunc)(fvalue_t*);",
          "73: typedef gboolean (*FvalueCmp)(const fvalue_t*, const fvalue_t*);",
          "",
          "[Removed Lines]",
          "64: typedef void (*FvalueSetInteger64Func)(fvalue_t*, guint64);",
          "70: typedef guint64 (*FvalueGetInteger64Func)(fvalue_t*);",
          "",
          "[Added Lines]",
          "64: typedef void (*FvalueSetUnsignedInteger64Func)(fvalue_t*, guint64);",
          "65: typedef void (*FvalueSetSignedInteger64Func)(fvalue_t*, gint64);",
          "71: typedef guint64 (*FvalueGetUnsignedInteger64Func)(fvalue_t*);",
          "72: typedef gint64 (*FvalueGetSignedInteger64Func)(fvalue_t*);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:  FvalueSetTvbuffFunc set_value_tvbuff;",
          "97:  FvalueSetUnsignedIntegerFunc set_value_uinteger;",
          "98:  FvalueSetSignedIntegerFunc  set_value_sinteger;",
          "100:  FvalueSetFloatingFunc set_value_floating;",
          "103:  FvalueGetFunc  get_value;",
          "104:  FvalueGetUnsignedIntegerFunc get_value_uinteger;",
          "105:  FvalueGetSignedIntegerFunc  get_value_sinteger;",
          "107:  FvalueGetFloatingFunc get_value_floating;",
          "109:  FvalueCmp  cmp_eq;",
          "",
          "[Removed Lines]",
          "99:  FvalueSetInteger64Func set_value_integer64;",
          "106:  FvalueGetInteger64Func get_value_integer64;",
          "",
          "[Added Lines]",
          "101:  FvalueSetUnsignedInteger64Func set_value_uinteger64;",
          "102:  FvalueSetSignedInteger64Func  set_value_sinteger64;",
          "109:  FvalueGetUnsignedInteger64Func get_value_uinteger64;",
          "110:  FvalueGetSignedInteger64Func get_value_sinteger64;",
          "",
          "---------------"
        ],
        "epan/ftypes/ftypes.c||epan/ftypes/ftypes.c": [
          "File: epan/ftypes/ftypes.c -> epan/ftypes/ftypes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:   case FT_UINT32:",
          "94:    return FT_UINT32;",
          "96:   case FT_STRING:",
          "97:   case FT_STRINGZ:",
          "98:   case FT_UINT_STRING:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:     case FT_INT40:",
          "97:     case FT_INT48:",
          "98:     case FT_INT56:",
          "99:   case FT_INT64:",
          "100:       return FT_INT64;",
          "102:   case FT_UINT40:",
          "103:   case FT_UINT48:",
          "104:   case FT_UINT56:",
          "105:   case FT_UINT64:",
          "106:       return FT_UINT64;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:    return FT_OID;",
          "116:   case FT_IPv4:",
          "117:   case FT_IPv6:",
          "",
          "[Removed Lines]",
          "114:   case FT_INT64:",
          "115:   case FT_UINT64:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "540:  fv->ftype->set_value_sinteger(fv, value);",
          "541: }",
          "544: void",
          "546: {",
          "549: }",
          "551: void",
          "",
          "[Removed Lines]",
          "545: fvalue_set_integer64(fvalue_t *fv, guint64 value)",
          "547:  g_assert(fv->ftype->set_value_integer64);",
          "548:  fv->ftype->set_value_integer64(fv, value);",
          "",
          "[Added Lines]",
          "553: void",
          "554: fvalue_set_uinteger64(fvalue_t *fv, guint64 value)",
          "555: {",
          "556:  g_assert(fv->ftype->set_value_uinteger64);",
          "557:  fv->ftype->set_value_uinteger64(fv, value);",
          "558: }",
          "561: fvalue_set_sinteger64(fvalue_t *fv, gint64 value)",
          "563:  g_assert(fv->ftype->set_value_sinteger64);",
          "564:  fv->ftype->set_value_sinteger64(fv, value);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "577:  return fv->ftype->get_value_sinteger(fv);",
          "578: }",
          "581: guint64",
          "583: {",
          "586: }",
          "588: double",
          "",
          "[Removed Lines]",
          "582: fvalue_get_integer64(fvalue_t *fv)",
          "584:  g_assert(fv->ftype->get_value_integer64);",
          "585:  return fv->ftype->get_value_integer64(fv);",
          "",
          "[Added Lines]",
          "597: fvalue_get_uinteger64(fvalue_t *fv)",
          "598: {",
          "599:  g_assert(fv->ftype->get_value_uinteger64);",
          "600:  return fv->ftype->get_value_uinteger64(fv);",
          "601: }",
          "603: gint64",
          "604: fvalue_get_sinteger64(fvalue_t *fv)",
          "606:  g_assert(fv->ftype->get_value_sinteger64);",
          "607:  return fv->ftype->get_value_sinteger64(fv);",
          "",
          "---------------"
        ],
        "epan/ftypes/ftypes.h||epan/ftypes/ftypes.h": [
          "File: epan/ftypes/ftypes.h -> epan/ftypes/ftypes.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "74: };",
          "78: #define IS_FT_TIME(ft)   ((ft)==FT_ABSOLUTE_TIME||(ft)==FT_RELATIVE_TIME)",
          "79: #define IS_FT_STRING(ft) ((ft)==FT_STRING||(ft)==FT_STRINGZ||(ft)==FT_STRINGZPAD)",
          "",
          "[Removed Lines]",
          "76: #define IS_FT_INT(ft)    ((ft)==FT_INT8||(ft)==FT_INT16||(ft)==FT_INT24||(ft)==FT_INT32||(ft)==FT_INT64)",
          "77: #define IS_FT_UINT(ft)   ((ft)==FT_UINT8||(ft)==FT_UINT16||(ft)==FT_UINT24||(ft)==FT_UINT32||(ft)==FT_UINT64||(ft)==FT_FRAMENUM)",
          "",
          "[Added Lines]",
          "82: #define IS_FT_INT(ft)    ((ft)==FT_INT8||(ft)==FT_INT16||(ft)==FT_INT24||(ft)==FT_INT32||(ft)==FT_INT40||(ft)==FT_INT48||(ft)==FT_INT56||(ft)==FT_INT64)",
          "83: #define IS_FT_UINT(ft)   ((ft)==FT_UINT8||(ft)==FT_UINT16||(ft)==FT_UINT24||(ft)==FT_UINT32||(ft)==FT_UINT40||(ft)==FT_UINT48||(ft)==FT_UINT56||(ft)==FT_UINT64||(ft)==FT_FRAMENUM)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86: #define FT_IPXNET_LEN       4",
          "87: #define FT_EUI64_LEN        8",
          "88: #define FT_AX25_ADDR_LEN    7",
          "90: #define FT_FCWWN_LEN        8",
          "92: typedef enum ftenum ftenum_t;",
          "",
          "[Removed Lines]",
          "89: #define FT_VINES_ADDR_LEN 6",
          "",
          "[Added Lines]",
          "95: #define FT_VINES_ADDR_LEN   6",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "185:   guint32  uinteger;",
          "186:   gint32  sinteger;",
          "187:   guint64  integer64;",
          "188:   gdouble  floating;",
          "189:   gchar  *string;",
          "190:   guchar  *ustring;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "194:   guint64  uinteger64;",
          "195:   gint64  sinteger64;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "273: fvalue_set_sinteger(fvalue_t *fv, gint32 value);",
          "275: void",
          "278: void",
          "279: fvalue_set_floating(fvalue_t *fv, gdouble value);",
          "",
          "[Removed Lines]",
          "276: fvalue_set_integer64(fvalue_t *fv, guint64 value);",
          "",
          "[Added Lines]",
          "284: fvalue_set_uinteger64(fvalue_t *fv, guint64 value);",
          "286: void",
          "287: fvalue_set_sinteger64(fvalue_t *fv, gint64 value);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "291: WS_DLL_PUBLIC",
          "292: guint64",
          "295: WS_DLL_PUBLIC double",
          "296: fvalue_get_floating(fvalue_t *fv);",
          "",
          "[Removed Lines]",
          "293: fvalue_get_integer64(fvalue_t *fv);",
          "",
          "[Added Lines]",
          "304: fvalue_get_uinteger64(fvalue_t *fv);",
          "306: WS_DLL_PUBLIC",
          "307: gint64",
          "308: fvalue_get_sinteger64(fvalue_t *fv);",
          "",
          "---------------"
        ],
        "epan/print.c||epan/print.c": [
          "File: epan/print.c -> epan/print.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "419:                         case FT_BOOLEAN:",
          "420:                             fprintf(pdata->fh, \"%X\", fvalue_get_uinteger(&fi->value));",
          "421:                             break;",
          "422:                         case FT_INT64:",
          "423:                         case FT_UINT64:",
          "426:                             break;",
          "427:                         default:",
          "428:                             g_assert_not_reached();",
          "",
          "[Removed Lines]",
          "424:                             fprintf(pdata->fh, \"%\" G_GINT64_MODIFIER \"X\",",
          "425:                                     fvalue_get_integer64(&fi->value));",
          "",
          "[Added Lines]",
          "422:                         case FT_INT40:",
          "423:                         case FT_INT48:",
          "424:                         case FT_INT56:",
          "426:                             fprintf(pdata->fh, \"%\" G_GINT64_MODIFIER \"X\", fvalue_get_sinteger64(&fi->value));",
          "427:                             break;",
          "428:                         case FT_UINT40:",
          "429:                         case FT_UINT48:",
          "430:                         case FT_UINT56:",
          "432:                             fprintf(pdata->fh, \"%\" G_GINT64_MODIFIER \"X\", fvalue_get_uinteger64(&fi->value));",
          "",
          "---------------"
        ],
        "epan/proto.c||epan/proto.c": [
          "File: epan/proto.c -> epan/proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "154:  }",
          "156: static const char *hf_try_val_to_str(guint32 value, const header_field_info *hfinfo);",
          "158: static void label_mark_truncated(char *label_str, gsize name_pos);",
          "159: #define LABEL_MARK_TRUNCATED_START(label_str) label_mark_truncated(label_str, 0)",
          "161: static void fill_label_boolean(field_info *fi, gchar *label_str);",
          "162: static void fill_label_bitfield(field_info *fi, gchar *label_str, gboolean is_signed);",
          "163: static void fill_label_number(field_info *fi, gchar *label_str, gboolean is_signed);",
          "164: static void fill_label_number64(field_info *fi, gchar *label_str, gboolean is_signed);",
          "166: static const char *hfinfo_number_value_format_display(const header_field_info *hfinfo, int display, char buf[32], guint32 value);",
          "167: static const char *hfinfo_number_vals_format(const header_field_info *hfinfo, char buf[32], guint32 value);",
          "168: static const char *hfinfo_number_value_format(const header_field_info *hfinfo, char buf[32], guint32 value);",
          "169: static const char *hfinfo_numeric_value_format(const header_field_info *hfinfo, char buf[32], guint32 value);",
          "171: static const char* hfinfo_uint64_format(const header_field_info *hfinfo);",
          "172: static const char* hfinfo_int64_format(const header_field_info *hfinfo);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "157: static const char *hf_try_val64_to_str(guint64 value, const header_field_info *hfinfo);",
          "164: static void fill_label_bitfield64(field_info *fi, gchar *label_str, gboolean is_signed);",
          "169: static const char *hfinfo_number_value_format_display64(const header_field_info *hfinfo, int display, char buf[32], guint64 value);",
          "171: static const char *hfinfo_number_vals_format64(const header_field_info *hfinfo, char buf[32], guint64 value);",
          "173: static const char *hfinfo_number_value_format64(const header_field_info *hfinfo, char buf[32], guint64 value);",
          "175: static const char *hfinfo_numeric_value_format64(const header_field_info *hfinfo, char buf[32], guint64 value);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "252: static void",
          "253: proto_tree_set_uint64(field_info *fi, guint64 value);",
          "254: static void",
          "255: proto_tree_set_eui64(field_info *fi, const guint64 value);",
          "256: static void",
          "257: proto_tree_set_eui64_tvb(field_info *fi, tvbuff_t *tvb, gint start, const guint encoding);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "261: proto_tree_set_int64(field_info *fi, gint64 value);",
          "262: static void",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1684:     get_uint_value(tree, tvb, start, length, encoding));",
          "1685:    break;",
          "1687:   case FT_UINT64:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1695:   case FT_UINT40:",
          "1696:   case FT_UINT48:",
          "1697:   case FT_UINT56:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1710:     get_int_value(tree, tvb, start, length, encoding));",
          "1711:    break;",
          "1713:   case FT_INT64:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1724:   case FT_INT40:",
          "1725:   case FT_INT48:",
          "1726:   case FT_INT56:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3033:  proto_tree_set_system_id(fi, tvb_get_ptr(tvb, start, length), length);",
          "3034: }",
          "3062: proto_item *",
          "",
          "[Removed Lines]",
          "3036: static void",
          "3037: proto_tree_set_uint64(field_info *fi, guint64 value)",
          "3038: {",
          "3039:  header_field_info *hfinfo;",
          "3040:  guint64     integer;",
          "3041:  gint     no_of_bits;",
          "3043:  hfinfo = fi->hfinfo;",
          "3044:  integer = value;",
          "3046:  if (hfinfo->bitmask) {",
          "3048:   integer &= hfinfo->bitmask;",
          "3051:   integer >>= hfinfo_bitshift(hfinfo);",
          "3053:   no_of_bits = ws_count_ones(hfinfo->bitmask);",
          "3054:   integer = ws_sign_ext64(integer, no_of_bits);",
          "3055:  }",
          "3057:  fvalue_set_integer64(&fi->value, integer);",
          "3058: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3559:  fvalue_set_uinteger(&fi->value, integer);",
          "3560: }",
          "3563: proto_item *",
          "3564: proto_tree_add_uint64(proto_tree *tree, int hfindex, tvbuff_t *tvb, gint start,",
          "3565:         gint length, guint64 value)",
          "3566: {",
          "3568:  header_field_info *hfinfo;",
          "3570:  TRY_TO_FAKE_THIS_ITEM(tree, hfindex, hfinfo);",
          "3577:  return pi;",
          "3578: }",
          "",
          "[Removed Lines]",
          "3567:  proto_item   *pi;",
          "3572:  DISSECTOR_ASSERT_FIELD_TYPE(hfinfo, FT_UINT64);",
          "3574:  pi = proto_tree_add_pi(tree, hfinfo, tvb, start, &length);",
          "3575:  proto_tree_set_uint64(PNODE_FINFO(pi), value);",
          "",
          "[Added Lines]",
          "3557:  proto_item   *pi = NULL;",
          "3562:  switch (hfinfo->type) {",
          "3563:   case FT_UINT40:",
          "3564:   case FT_UINT48:",
          "3565:   case FT_UINT56:",
          "3566:   case FT_UINT64:",
          "3567:   case FT_FRAMENUM:",
          "3568:    pi = proto_tree_add_pi(tree, hfinfo, tvb, start, &length);",
          "3569:    proto_tree_set_uint64(PNODE_FINFO(pi), value);",
          "3570:    break;",
          "3572:   default:",
          "3573:    DISSECTOR_ASSERT_NOT_REACHED();",
          "3574:  }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3615:  return pi;",
          "3616: }",
          "3619: proto_item *",
          "3620: proto_tree_add_int(proto_tree *tree, int hfindex, tvbuff_t *tvb, gint start,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3618: static void",
          "3619: proto_tree_set_uint64(field_info *fi, guint64 value)",
          "3620: {",
          "3621:  header_field_info *hfinfo;",
          "3622:  guint64     integer;",
          "3623:  gint     no_of_bits;",
          "3625:  hfinfo = fi->hfinfo;",
          "3626:  integer = value;",
          "3628:  if (hfinfo->bitmask) {",
          "3630:   integer &= hfinfo->bitmask;",
          "3633:   integer >>= hfinfo_bitshift(hfinfo);",
          "3635:   no_of_bits = ws_count_ones(hfinfo->bitmask);",
          "3636:   integer = ws_sign_ext64(integer, no_of_bits);",
          "3637:  }",
          "3639:  fvalue_set_uinteger64(&fi->value, integer);",
          "3640: }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3704:  fvalue_set_sinteger(&fi->value, integer);",
          "3705: }",
          "3708: proto_item *",
          "3709: proto_tree_add_int64(proto_tree *tree, int hfindex, tvbuff_t *tvb, gint start,",
          "3710:        gint length, gint64 value)",
          "3711: {",
          "3713:  header_field_info *hfinfo;",
          "3715:  TRY_TO_FAKE_THIS_ITEM(tree, hfindex, hfinfo);",
          "3722:  return pi;",
          "3723: }",
          "",
          "[Removed Lines]",
          "3712:  proto_item   *pi;",
          "3717:  DISSECTOR_ASSERT_FIELD_TYPE(hfinfo, FT_INT64);",
          "3719:  pi = proto_tree_add_pi(tree, hfinfo, tvb, start, &length);",
          "3720:  proto_tree_set_uint64(PNODE_FINFO(pi), (guint64)value);",
          "",
          "[Added Lines]",
          "3736:  proto_item   *pi = NULL;",
          "3741:  switch (hfinfo->type) {",
          "3742:   case FT_INT40:",
          "3743:   case FT_INT48:",
          "3744:   case FT_INT56:",
          "3745:   case FT_INT64:",
          "3746:    pi = proto_tree_add_pi(tree, hfinfo, tvb, start, &length);",
          "3747:    proto_tree_set_int64(PNODE_FINFO(pi), value);",
          "3748:    break;",
          "3750:   default:",
          "3751:    DISSECTOR_ASSERT_NOT_REACHED();",
          "3752:  }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3740:  return pi;",
          "3741: }",
          "3743: proto_item *",
          "3744: proto_tree_add_int64_format(proto_tree *tree, int hfindex, tvbuff_t *tvb,",
          "3745:       gint start, gint length, gint64 value,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3776: static void",
          "3777: proto_tree_set_int64(field_info *fi, gint64 value)",
          "3778: {",
          "3779:  header_field_info *hfinfo;",
          "3780:  guint64     integer;",
          "3781:  gint     no_of_bits;",
          "3783:  hfinfo = fi->hfinfo;",
          "3784:  integer = value;",
          "3786:  if (hfinfo->bitmask) {",
          "3788:   integer &= hfinfo->bitmask;",
          "3791:   integer >>= hfinfo_bitshift(hfinfo);",
          "3793:   no_of_bits = ws_count_ones(hfinfo->bitmask);",
          "3794:   integer = ws_sign_ext64(integer, no_of_bits);",
          "3795:  }",
          "3797:  fvalue_set_sinteger64(&fi->value, integer);",
          "3798: }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3819: static void",
          "3820: proto_tree_set_eui64(field_info *fi, const guint64 value)",
          "3821: {",
          "3823: }",
          "3824: static void",
          "3825: proto_tree_set_eui64_tvb(field_info *fi, tvbuff_t *tvb, gint start, const guint encoding)",
          "",
          "[Removed Lines]",
          "3822:  fvalue_set_integer64(&fi->value, value);",
          "",
          "[Added Lines]",
          "3880:  fvalue_set_uinteger64(&fi->value, value);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4079:    if (IS_FT_UINT(hf->type))",
          "4080:     val = fvalue_get_uinteger(&fi->value);",
          "4081:    else",
          "4084:    val <<= hfinfo_bitshift(hf);",
          "",
          "[Removed Lines]",
          "4082:     val = fvalue_get_integer64(&fi->value);",
          "",
          "[Added Lines]",
          "4140:     val = fvalue_get_uinteger64(&fi->value);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4173:    gchar *result, gchar *expr, const int size)",
          "4174: {",
          "4175:  guint32            number;",
          "4176:  guint8            *bytes;",
          "4177:  ipv4_addr         *ipv4;",
          "4178:  struct e_in6_addr *ipv6;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4234:  guint64            number64;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4260:     switch (hfinfo->type) {",
          "4296:        {",
          "4297:         str = (char*)bytestring_to_str(NULL, bytes, fvalue_length(&finfo->value), ' ');",
          "4298:        }",
          "4304:       }",
          "4316:         tmpbuf,",
          "4317:         size-offset_r);",
          "4324:         tmpbuf,",
          "4325:         size-offset_r);",
          "4336:         number ?",
          "4341:         number ? \"1\" : \"0\", size-offset_e);",
          "4356:        (guint32) fvalue_get_sinteger(&finfo->value) :",
          "4357:        fvalue_get_uinteger(&finfo->value);",
          "4494:         hfinfo_format_text(hfinfo, bytes),",
          "4495:         size-offset_r);",
          "4506:     }",
          "4507:     i++;",
          "4508:    }",
          "4510:    switch (hfinfo->type) {",
          "4532:    }",
          "4534:    if (!abbrev) {",
          "",
          "[Removed Lines]",
          "4263:      if (offset_r == 0) {",
          "4264:       result[0] = '\\0';",
          "4265:      } else if (result[offset_r-1] == ',') {",
          "4266:       result[offset_r-1] = '\\0';",
          "4267:      }",
          "4268:      break;",
          "4270:     case FT_PROTOCOL:",
          "4272:      g_strlcpy(result, \"Yes\", size);",
          "4273:      break;",
          "4275:     case FT_UINT_BYTES:",
          "4276:     case FT_BYTES:",
          "4277:      bytes = (guint8 *)fvalue_get(&finfo->value);",
          "4278:      if (bytes) {",
          "4279:       switch(hfinfo->display)",
          "4280:       {",
          "4281:       case SEP_DOT:",
          "4282:        str = (char*)bytestring_to_str(NULL, bytes, fvalue_length(&finfo->value), '.');",
          "4283:        break;",
          "4284:       case SEP_DASH:",
          "4285:        str = (char*)bytestring_to_str(NULL, bytes, fvalue_length(&finfo->value), '-');",
          "4286:        break;",
          "4287:       case SEP_COLON:",
          "4288:        str = (char*)bytestring_to_str(NULL, bytes, fvalue_length(&finfo->value), ':');",
          "4289:        break;",
          "4290:       case SEP_SPACE:",
          "4291:        str = (char*)bytestring_to_str(NULL, bytes, fvalue_length(&finfo->value), ' ');",
          "4292:        break;",
          "4293:       case BASE_NONE:",
          "4294:       default:",
          "4295:        if (prefs.display_byte_fields_with_spaces)",
          "4299:        else",
          "4300:        {",
          "4301:         str = (char*)bytes_to_str(NULL, bytes, fvalue_length(&finfo->value));",
          "4302:        }",
          "4303:        break;",
          "4305:       offset_r += protoo_strlcpy(result+offset_r, str, size-offset_r);",
          "4306:       wmem_free(NULL, str);",
          "4307:      }",
          "4308:      else {",
          "4309:       offset_r += protoo_strlcpy(result+offset_r, \"<MISSING>\", size-offset_r);",
          "4310:      }",
          "4311:      break;",
          "4313:     case FT_ABSOLUTE_TIME:",
          "4314:      tmpbuf = abs_time_to_str(NULL, (const nstime_t *)fvalue_get(&finfo->value), (absolute_time_display_e)hfinfo->display, TRUE);",
          "4315:      offset_r += protoo_strlcpy(result+offset_r,",
          "4318:      wmem_free(NULL, tmpbuf);",
          "4319:      break;",
          "4321:     case FT_RELATIVE_TIME:",
          "4322:      tmpbuf = rel_time_to_secs_str(NULL, (const nstime_t *)fvalue_get(&finfo->value));",
          "4323:      offset_r += protoo_strlcpy(result+offset_r,",
          "4326:      wmem_free(NULL, tmpbuf);",
          "4327:      break;",
          "4329:     case FT_BOOLEAN:",
          "4330:      number = fvalue_get_uinteger(&finfo->value);",
          "4331:      tfstring = (const true_false_string *)&tfs_true_false;",
          "4332:      if (hfinfo->strings) {",
          "4333:       tfstring = (const struct true_false_string*) hfinfo->strings;",
          "4334:      }",
          "4335:      offset_r += protoo_strlcpy(result+offset_r,",
          "4337:          tfstring->true_string :",
          "4338:          tfstring->false_string, size-offset_r);",
          "4340:      offset_e += protoo_strlcpy(expr+offset_e,",
          "4342:      break;",
          "4345:     case FT_INT8:",
          "4346:     case FT_INT16:",
          "4347:     case FT_INT24:",
          "4348:     case FT_INT32:",
          "4349:     case FT_UINT8:",
          "4350:     case FT_UINT16:",
          "4351:     case FT_UINT24:",
          "4352:     case FT_UINT32:",
          "4353:     case FT_FRAMENUM:",
          "4354:      hf_str_val = NULL;",
          "4355:      number = IS_FT_INT(hfinfo->type) ?",
          "4359:      if ((hfinfo->display & FIELD_DISPLAY_E_MASK) == BASE_CUSTOM) {",
          "4360:       gchar tmp[ITEM_LABEL_LENGTH];",
          "4361:       custom_fmt_func_t fmtfunc = (custom_fmt_func_t)hfinfo->strings;",
          "4363:       DISSECTOR_ASSERT(fmtfunc);",
          "4364:       fmtfunc(tmp, number);",
          "4366:       offset_r += protoo_strlcpy(result+offset_r, tmp, size-offset_r);",
          "4368:      } else if (hfinfo->strings) {",
          "4369:       number_out = hf_str_val = hf_try_val_to_str(number, hfinfo);",
          "4371:       if (!number_out)",
          "4372:        number_out = hfinfo_number_value_format_display(hfinfo, BASE_DEC, number_buf, number);",
          "4374:       offset_r += protoo_strlcpy(result+offset_r, number_out, size-offset_r);",
          "4376:      } else {",
          "4377:       number_out = hfinfo_number_value_format(hfinfo, number_buf, number);",
          "4379:       offset_r += protoo_strlcpy(result+offset_r, number_out, size-offset_r);",
          "4380:      }",
          "4382:      if (hf_str_val && (hfinfo->display & FIELD_DISPLAY_E_MASK) == BASE_NONE) {",
          "4383:       g_snprintf(expr+offset_e, size-offset_e, \"\\\"%s\\\"\", hf_str_val);",
          "4384:      } else {",
          "4385:       number_out = hfinfo_numeric_value_format(hfinfo, number_buf, number);",
          "4387:       g_strlcpy(expr+offset_e, number_out, size-offset_e);",
          "4388:      }",
          "4390:      offset_e = (int)strlen(expr);",
          "4391:      break;",
          "4393:     case FT_INT64:",
          "4395:      g_snprintf(result+offset_r, size-offset_r,",
          "4396:       \"%\" G_GINT64_MODIFIER \"d\",",
          "4397:       fvalue_get_integer64(&finfo->value));",
          "4398:      offset_r = (int)strlen(result);",
          "4399:      break;",
          "4400:     case FT_UINT64:",
          "4401:      g_snprintf(result+offset_r, size-offset_r,",
          "4403:       \"%\" G_GINT64_MODIFIER \"u\",",
          "4404:       fvalue_get_integer64(&finfo->value));",
          "4405:      offset_r = (int)strlen(result);",
          "4406:      break;",
          "4407:     case FT_EUI64:",
          "4408:      str = eui64_to_str(NULL, fvalue_get_integer64(&finfo->value));",
          "4409:      offset_r += protoo_strlcpy(result+offset_r, str, size-offset_r);",
          "4410:      wmem_free(NULL, str);",
          "4411:      break;",
          "4413:     case FT_IPv4:",
          "4414:      ipv4 = (ipv4_addr *)fvalue_get(&finfo->value);",
          "4415:      n_addr = ipv4_get_net_order_addr(ipv4);",
          "4416:      SET_ADDRESS (&addr, AT_IPv4, 4, &n_addr);",
          "4417:      address_to_str_buf(&addr, result+offset_r, size-offset_r);",
          "4418:      offset_r = (int)strlen(result);",
          "4419:      break;",
          "4421:     case FT_IPv6:",
          "4422:      ipv6 = (struct e_in6_addr *)fvalue_get(&finfo->value);",
          "4423:      SET_ADDRESS (&addr, AT_IPv6, sizeof(struct e_in6_addr), ipv6);",
          "4424:      address_to_str_buf(&addr, result+offset_r, size-offset_r);",
          "4425:      offset_r = (int)strlen(result);",
          "4426:      break;",
          "4428:     case FT_FCWWN:",
          "4429:      SET_ADDRESS (&addr, AT_FCWWN, FCWWN_ADDR_LEN, fvalue_get(&finfo->value));",
          "4430:      address_to_str_buf(&addr, result+offset_r, size-offset_r);",
          "4431:      offset_r = (int)strlen(result);",
          "4432:      break;",
          "4434:     case FT_ETHER:",
          "4435:      SET_ADDRESS (&addr, AT_ETHER, FT_ETHER_LEN, fvalue_get(&finfo->value));",
          "4436:      address_to_str_buf(&addr, result+offset_r, size-offset_r);",
          "4437:      offset_r = (int)strlen(result);",
          "4438:      break;",
          "4440:     case FT_GUID:",
          "4441:      str = guid_to_str(NULL, (e_guid_t *)fvalue_get(&finfo->value));",
          "4442:      offset_r += protoo_strlcpy(result+offset_r, str, size-offset_r);",
          "4443:      wmem_free(NULL, str);",
          "4444:      break;",
          "4446:     case FT_REL_OID:",
          "4447:      bytes = (guint8 *)fvalue_get(&finfo->value);",
          "4448:      str = rel_oid_resolved_from_encoded(NULL, bytes, fvalue_length(&finfo->value));",
          "4449:      offset_r += protoo_strlcpy(result+offset_r, str, size-offset_r);",
          "4450:      wmem_free(NULL, str);",
          "4452:      str = rel_oid_encoded2string(NULL, bytes, fvalue_length(&finfo->value));",
          "4453:      offset_e += protoo_strlcpy(expr+offset_e, str, size-offset_e);",
          "4454:      wmem_free(NULL, str);",
          "4455:      break;",
          "4457:     case FT_OID:",
          "4458:      bytes = (guint8 *)fvalue_get(&finfo->value);",
          "4459:      str = oid_resolved_from_encoded(NULL, bytes, fvalue_length(&finfo->value));",
          "4460:      offset_r += protoo_strlcpy(result+offset_r, str, size-offset_r);",
          "4461:      wmem_free(NULL, str);",
          "4463:      str = oid_encoded2string(NULL, bytes, fvalue_length(&finfo->value));",
          "4464:      offset_e += protoo_strlcpy(expr+offset_e, str, size-offset_e);",
          "4465:      wmem_free(NULL, str);",
          "4466:      break;",
          "4468:     case FT_SYSTEM_ID:",
          "4469:      bytes = (guint8 *)fvalue_get(&finfo->value);",
          "4470:      str = print_system_id(NULL, bytes, fvalue_length(&finfo->value));",
          "4471:      offset_r += protoo_strlcpy(result+offset_r, str, size-offset_r);",
          "4472:      offset_e += protoo_strlcpy(expr+offset_e, str, size-offset_e);",
          "4473:      wmem_free(NULL, str);",
          "4474:      break;",
          "4476:     case FT_FLOAT:",
          "4477:      g_snprintf(result+offset_r, size-offset_r,",
          "4478:       \"%.\" G_STRINGIFY(FLT_DIG) \"g\", fvalue_get_floating(&finfo->value));",
          "4479:      offset_r = (int)strlen(result);",
          "4480:      break;",
          "4482:     case FT_DOUBLE:",
          "4483:      g_snprintf(result+offset_r, size-offset_r,",
          "4484:       \"%.\" G_STRINGIFY(DBL_DIG) \"g\", fvalue_get_floating(&finfo->value));",
          "4485:      offset_r = (int)strlen(result);",
          "4486:      break;",
          "4488:     case FT_STRING:",
          "4489:     case FT_STRINGZ:",
          "4490:     case FT_UINT_STRING:",
          "4491:     case FT_STRINGZPAD:",
          "4492:      bytes = (guint8 *)fvalue_get(&finfo->value);",
          "4493:      offset_r += protoo_strlcpy(result+offset_r,",
          "4496:      break;",
          "4499:     case FT_PCRE:",
          "4500:     default:",
          "4501:      g_error(\"hfinfo->type %d (%s) not handled\\n\",",
          "4502:        hfinfo->type,",
          "4503:        ftype_name(hfinfo->type));",
          "4504:      DISSECTOR_ASSERT_NOT_REACHED();",
          "4505:      break;",
          "4512:    case FT_BOOLEAN:",
          "4513:    case FT_UINT8:",
          "4514:    case FT_UINT16:",
          "4515:    case FT_UINT24:",
          "4516:    case FT_UINT32:",
          "4517:    case FT_FRAMENUM:",
          "4518:    case FT_INT8:",
          "4519:    case FT_INT16:",
          "4520:    case FT_INT24:",
          "4521:    case FT_INT32:",
          "4522:    case FT_OID:",
          "4523:    case FT_REL_OID:",
          "4524:    case FT_SYSTEM_ID:",
          "4526:     break;",
          "4528:    default:",
          "4530:     g_strlcpy(expr, result, size);",
          "4531:     break;",
          "",
          "[Added Lines]",
          "4322:       if (offset_r == 0) {",
          "4323:        result[0] = '\\0';",
          "4324:       } else if (result[offset_r-1] == ',') {",
          "4325:        result[offset_r-1] = '\\0';",
          "4326:       }",
          "4327:       break;",
          "4329:      case FT_PROTOCOL:",
          "4331:       g_strlcpy(result, \"Yes\", size);",
          "4332:       break;",
          "4334:      case FT_UINT_BYTES:",
          "4335:      case FT_BYTES:",
          "4336:       bytes = (guint8 *)fvalue_get(&finfo->value);",
          "4337:       if (bytes) {",
          "4338:        switch(hfinfo->display)",
          "4340:        case SEP_DOT:",
          "4341:         str = (char*)bytestring_to_str(NULL, bytes, fvalue_length(&finfo->value), '.');",
          "4342:         break;",
          "4343:        case SEP_DASH:",
          "4344:         str = (char*)bytestring_to_str(NULL, bytes, fvalue_length(&finfo->value), '-');",
          "4345:         break;",
          "4346:        case SEP_COLON:",
          "4347:         str = (char*)bytestring_to_str(NULL, bytes, fvalue_length(&finfo->value), ':');",
          "4348:         break;",
          "4349:        case SEP_SPACE:",
          "4351:         break;",
          "4352:        case BASE_NONE:",
          "4353:        default:",
          "4354:         if (prefs.display_byte_fields_with_spaces)",
          "4355:         {",
          "4356:          str = (char*)bytestring_to_str(NULL, bytes, fvalue_length(&finfo->value), ' ');",
          "4357:         }",
          "4358:         else",
          "4359:         {",
          "4360:          str = (char*)bytes_to_str(NULL, bytes, fvalue_length(&finfo->value));",
          "4361:         }",
          "4362:         break;",
          "4364:        offset_r += protoo_strlcpy(result+offset_r, str, size-offset_r);",
          "4365:        wmem_free(NULL, str);",
          "4367:       else {",
          "4368:        offset_r += protoo_strlcpy(result+offset_r, \"<MISSING>\", size-offset_r);",
          "4369:       }",
          "4370:       break;",
          "4372:      case FT_ABSOLUTE_TIME:",
          "4373:       tmpbuf = abs_time_to_str(NULL, (const nstime_t *)fvalue_get(&finfo->value), (absolute_time_display_e)hfinfo->display, TRUE);",
          "4374:       offset_r += protoo_strlcpy(result+offset_r,",
          "4377:       wmem_free(NULL, tmpbuf);",
          "4378:       break;",
          "4380:      case FT_RELATIVE_TIME:",
          "4381:       tmpbuf = rel_time_to_secs_str(NULL, (const nstime_t *)fvalue_get(&finfo->value));",
          "4382:       offset_r += protoo_strlcpy(result+offset_r,",
          "4385:       wmem_free(NULL, tmpbuf);",
          "4386:       break;",
          "4388:      case FT_BOOLEAN:",
          "4389:       number = fvalue_get_uinteger(&finfo->value);",
          "4390:       tfstring = (const true_false_string *)&tfs_true_false;",
          "4391:       if (hfinfo->strings) {",
          "4392:        tfstring = (const struct true_false_string*) hfinfo->strings;",
          "4393:       }",
          "4394:       offset_r += protoo_strlcpy(result+offset_r,",
          "4396:         tfstring->true_string :",
          "4397:         tfstring->false_string, size-offset_r);",
          "4399:       offset_e += protoo_strlcpy(expr+offset_e,",
          "4401:       break;",
          "4404:      case FT_INT8:",
          "4405:      case FT_INT16:",
          "4406:      case FT_INT24:",
          "4407:      case FT_INT32:",
          "4408:      case FT_UINT8:",
          "4409:      case FT_UINT16:",
          "4410:      case FT_UINT24:",
          "4411:      case FT_UINT32:",
          "4412:      case FT_FRAMENUM:",
          "4413:       hf_str_val = NULL;",
          "4414:       number = IS_FT_INT(hfinfo->type) ?",
          "4418:       if ((hfinfo->display & FIELD_DISPLAY_E_MASK) == BASE_CUSTOM) {",
          "4419:        gchar tmp[ITEM_LABEL_LENGTH];",
          "4420:        custom_fmt_func_t fmtfunc = (custom_fmt_func_t)hfinfo->strings;",
          "4422:        DISSECTOR_ASSERT(fmtfunc);",
          "4423:        fmtfunc(tmp, number);",
          "4425:        offset_r += protoo_strlcpy(result+offset_r, tmp, size-offset_r);",
          "4427:       } else if (hfinfo->strings) {",
          "4428:        number_out = hf_str_val = hf_try_val_to_str(number, hfinfo);",
          "4430:        if (!number_out)",
          "4431:         number_out = hfinfo_number_value_format_display(hfinfo, BASE_DEC, number_buf, number);",
          "4433:        offset_r += protoo_strlcpy(result+offset_r, number_out, size-offset_r);",
          "4435:       } else {",
          "4436:        number_out = hfinfo_number_value_format(hfinfo, number_buf, number);",
          "4438:        offset_r += protoo_strlcpy(result+offset_r, number_out, size-offset_r);",
          "4439:       }",
          "4441:       if (hf_str_val && (hfinfo->display & FIELD_DISPLAY_E_MASK) == BASE_NONE) {",
          "4442:        g_snprintf(expr+offset_e, size-offset_e, \"\\\"%s\\\"\", hf_str_val);",
          "4443:       } else {",
          "4444:        number_out = hfinfo_numeric_value_format(hfinfo, number_buf, number);",
          "4446:        g_strlcpy(expr+offset_e, number_out, size-offset_e);",
          "4447:       }",
          "4449:       offset_e = (int)strlen(expr);",
          "4450:       break;",
          "4452:      case FT_INT40:",
          "4453:      case FT_INT48:",
          "4454:      case FT_INT56:",
          "4455:      case FT_INT64:",
          "4456:      case FT_UINT40:",
          "4457:      case FT_UINT48:",
          "4458:      case FT_UINT56:",
          "4459:      case FT_UINT64:",
          "4460:       hf_str_val = NULL;",
          "4461:       number64 = IS_FT_INT(hfinfo->type) ?",
          "4462:        (guint64) fvalue_get_sinteger64(&finfo->value) :",
          "4463:        fvalue_get_uinteger64(&finfo->value);",
          "4465:       if ((hfinfo->display & FIELD_DISPLAY_E_MASK) == BASE_CUSTOM) {",
          "4466:        gchar tmp[ITEM_LABEL_LENGTH];",
          "4467:        custom_fmt_func_64_t fmtfunc64 = (custom_fmt_func_64_t)hfinfo->strings;",
          "4469:        DISSECTOR_ASSERT(fmtfunc64);",
          "4470:        fmtfunc64(tmp, number64);",
          "4471:        offset_r += protoo_strlcpy(result+offset_r, tmp, size-offset_r);",
          "4472:       } else if (hfinfo->strings) {",
          "4473:        number_out = hf_str_val = hf_try_val64_to_str(number64, hfinfo);",
          "4475:        if (!number_out)",
          "4476:         number_out = hfinfo_number_value_format_display64(hfinfo, BASE_DEC, number_buf, number64);",
          "4478:        offset_r += protoo_strlcpy(result+offset_r, number_out, size-offset_r);",
          "4480:       } else {",
          "4481:        number_out = hfinfo_number_value_format64(hfinfo, number_buf, number64);",
          "4483:        offset_r += protoo_strlcpy(result+offset_r, number_out, size-offset_r);",
          "4484:       }",
          "4486:       if (hf_str_val && (hfinfo->display & FIELD_DISPLAY_E_MASK) == BASE_NONE) {",
          "4487:        g_snprintf(expr+offset_e, size-offset_e, \"\\\"%s\\\"\", hf_str_val);",
          "4488:       } else {",
          "4489:        number_out = hfinfo_numeric_value_format64(hfinfo, number_buf, number64);",
          "4491:        g_strlcpy(expr+offset_e, number_out, size-offset_e);",
          "4492:       }",
          "4494:       offset_e = (int)strlen(expr);",
          "4495:       break;",
          "4497:      case FT_EUI64:",
          "4498:       str = eui64_to_str(NULL, fvalue_get_uinteger64(&finfo->value));",
          "4499:       offset_r += protoo_strlcpy(result+offset_r, str, size-offset_r);",
          "4500:       wmem_free(NULL, str);",
          "4501:       break;",
          "4503:      case FT_IPv4:",
          "4504:       ipv4 = (ipv4_addr *)fvalue_get(&finfo->value);",
          "4505:       n_addr = ipv4_get_net_order_addr(ipv4);",
          "4506:       SET_ADDRESS (&addr, AT_IPv4, 4, &n_addr);",
          "4507:       address_to_str_buf(&addr, result+offset_r, size-offset_r);",
          "4508:       offset_r = (int)strlen(result);",
          "4509:       break;",
          "4511:      case FT_IPv6:",
          "4512:       ipv6 = (struct e_in6_addr *)fvalue_get(&finfo->value);",
          "4513:       SET_ADDRESS (&addr, AT_IPv6, sizeof(struct e_in6_addr), ipv6);",
          "4514:       address_to_str_buf(&addr, result+offset_r, size-offset_r);",
          "4515:       offset_r = (int)strlen(result);",
          "4516:       break;",
          "4518:      case FT_FCWWN:",
          "4519:       SET_ADDRESS (&addr, AT_FCWWN, FCWWN_ADDR_LEN, fvalue_get(&finfo->value));",
          "4520:       address_to_str_buf(&addr, result+offset_r, size-offset_r);",
          "4521:       offset_r = (int)strlen(result);",
          "4522:       break;",
          "4524:      case FT_ETHER:",
          "4525:       SET_ADDRESS (&addr, AT_ETHER, FT_ETHER_LEN, fvalue_get(&finfo->value));",
          "4526:       address_to_str_buf(&addr, result+offset_r, size-offset_r);",
          "4527:       offset_r = (int)strlen(result);",
          "4528:       break;",
          "4530:      case FT_GUID:",
          "4531:       str = guid_to_str(NULL, (e_guid_t *)fvalue_get(&finfo->value));",
          "4532:       offset_r += protoo_strlcpy(result+offset_r, str, size-offset_r);",
          "4533:       wmem_free(NULL, str);",
          "4534:       break;",
          "4536:      case FT_REL_OID:",
          "4537:       bytes = (guint8 *)fvalue_get(&finfo->value);",
          "4538:       str = rel_oid_resolved_from_encoded(NULL, bytes, fvalue_length(&finfo->value));",
          "4539:       offset_r += protoo_strlcpy(result+offset_r, str, size-offset_r);",
          "4540:       wmem_free(NULL, str);",
          "4542:       str = rel_oid_encoded2string(NULL, bytes, fvalue_length(&finfo->value));",
          "4543:       offset_e += protoo_strlcpy(expr+offset_e, str, size-offset_e);",
          "4544:       wmem_free(NULL, str);",
          "4545:       break;",
          "4547:      case FT_OID:",
          "4548:       bytes = (guint8 *)fvalue_get(&finfo->value);",
          "4549:       str = oid_resolved_from_encoded(NULL, bytes, fvalue_length(&finfo->value));",
          "4550:       offset_r += protoo_strlcpy(result+offset_r, str, size-offset_r);",
          "4551:       wmem_free(NULL, str);",
          "4553:       str = oid_encoded2string(NULL, bytes, fvalue_length(&finfo->value));",
          "4554:       offset_e += protoo_strlcpy(expr+offset_e, str, size-offset_e);",
          "4555:       wmem_free(NULL, str);",
          "4556:       break;",
          "4558:      case FT_SYSTEM_ID:",
          "4559:       bytes = (guint8 *)fvalue_get(&finfo->value);",
          "4560:       str = print_system_id(NULL, bytes, fvalue_length(&finfo->value));",
          "4561:       offset_r += protoo_strlcpy(result+offset_r, str, size-offset_r);",
          "4562:       offset_e += protoo_strlcpy(expr+offset_e, str, size-offset_e);",
          "4563:       wmem_free(NULL, str);",
          "4564:       break;",
          "4566:      case FT_FLOAT:",
          "4567:       g_snprintf(result+offset_r, size-offset_r,",
          "4568:         \"%.\" G_STRINGIFY(FLT_DIG) \"g\", fvalue_get_floating(&finfo->value));",
          "4569:       offset_r = (int)strlen(result);",
          "4570:       break;",
          "4572:      case FT_DOUBLE:",
          "4573:       g_snprintf(result+offset_r, size-offset_r,",
          "4574:         \"%.\" G_STRINGIFY(DBL_DIG) \"g\", fvalue_get_floating(&finfo->value));",
          "4575:       offset_r = (int)strlen(result);",
          "4576:       break;",
          "4578:      case FT_STRING:",
          "4579:      case FT_STRINGZ:",
          "4580:      case FT_UINT_STRING:",
          "4581:      case FT_STRINGZPAD:",
          "4582:       bytes = (guint8 *)fvalue_get(&finfo->value);",
          "4583:       offset_r += protoo_strlcpy(result+offset_r,",
          "4586:       break;",
          "4589:      case FT_PCRE:",
          "4590:      default:",
          "4591:       g_error(\"hfinfo->type %d (%s) not handled\\n\",",
          "4592:         hfinfo->type,",
          "4593:         ftype_name(hfinfo->type));",
          "4594:       DISSECTOR_ASSERT_NOT_REACHED();",
          "4595:       break;",
          "4602:     case FT_BOOLEAN:",
          "4603:     case FT_UINT8:",
          "4604:     case FT_UINT16:",
          "4605:     case FT_UINT24:",
          "4606:     case FT_UINT32:",
          "4607:     case FT_UINT40:",
          "4608:     case FT_UINT48:",
          "4609:     case FT_UINT56:",
          "4610:     case FT_UINT64:",
          "4611:     case FT_FRAMENUM:",
          "4612:     case FT_INT8:",
          "4613:     case FT_INT16:",
          "4614:     case FT_INT24:",
          "4615:     case FT_INT32:",
          "4616:     case FT_INT40:",
          "4617:     case FT_INT48:",
          "4618:     case FT_INT56:",
          "4619:     case FT_INT64:",
          "4620:     case FT_OID:",
          "4621:     case FT_REL_OID:",
          "4622:     case FT_SYSTEM_ID:",
          "4624:      break;",
          "4626:     default:",
          "4628:      g_strlcpy(expr, result, size);",
          "4629:      break;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "5528:       (hfinfo->type == FT_UINT16)   ||",
          "5529:       (hfinfo->type == FT_UINT24)   ||",
          "5530:       (hfinfo->type == FT_UINT32)   ||",
          "5531:       (hfinfo->type == FT_UINT64)   ||",
          "5532:       (hfinfo->type == FT_INT8)     ||",
          "5533:       (hfinfo->type == FT_INT16)    ||",
          "5534:       (hfinfo->type == FT_INT24)    ||",
          "5535:       (hfinfo->type == FT_INT32)    ||",
          "5536:       (hfinfo->type == FT_INT64)    ||",
          "5537:       (hfinfo->type == FT_BOOLEAN)  ||",
          "5538:       (hfinfo->type == FT_PROTOCOL) ))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5629:       (hfinfo->type == FT_UINT40)   ||",
          "5630:       (hfinfo->type == FT_UINT48)   ||",
          "5631:       (hfinfo->type == FT_UINT56)   ||",
          "5637:       (hfinfo->type == FT_INT40)    ||",
          "5638:       (hfinfo->type == FT_INT48)    ||",
          "5639:       (hfinfo->type == FT_INT56)    ||",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "5600:   case FT_INT16:",
          "5601:   case FT_INT24:",
          "5602:   case FT_INT32:",
          "5603:   case FT_INT64:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5707:   case FT_INT40:",
          "5708:   case FT_INT48:",
          "5709:   case FT_INT56:",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "5622:   case FT_UINT16:",
          "5623:   case FT_UINT24:",
          "5624:   case FT_UINT32:",
          "5625:   case FT_UINT64:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5732:   case FT_UINT40:",
          "5733:   case FT_UINT48:",
          "5734:   case FT_UINT56:",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "6110:    fill_label_number(fi, label_str, FALSE);",
          "6111:    break;",
          "6113:   case FT_UINT64:",
          "6115:    break;",
          "6117:   case FT_INT8:",
          "",
          "[Removed Lines]",
          "6114:    fill_label_number64(fi, label_str, FALSE);",
          "",
          "[Added Lines]",
          "6223:   case FT_UINT40:",
          "6224:   case FT_UINT48:",
          "6225:   case FT_UINT56:",
          "6227:    if (hfinfo->bitmask) {",
          "6228:     fill_label_bitfield64(fi, label_str, FALSE);",
          "6229:    } else {",
          "6230:     fill_label_number64(fi, label_str, FALSE);",
          "6231:    }",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "6125:    }",
          "6126:    break;",
          "6128:   case FT_INT64:",
          "6130:    break;",
          "6132:   case FT_FLOAT:",
          "",
          "[Removed Lines]",
          "6129:    fill_label_number64(fi, label_str, TRUE);",
          "",
          "[Added Lines]",
          "6245:   case FT_INT40:",
          "6246:   case FT_INT48:",
          "6247:   case FT_INT56:",
          "6249:    if (hfinfo->bitmask) {",
          "6250:     fill_label_bitfield64(fi, label_str, TRUE);",
          "6251:    } else {",
          "6252:     fill_label_number64(fi, label_str, TRUE);",
          "6253:    }",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "6277:    break;",
          "6279:   case FT_EUI64:",
          "6281:    addr_str = eui64_to_str(NULL, integer64);",
          "6282:    tmp = (char*)eui64_to_display(NULL, integer64);",
          "6283:    label_fill_descr(label_str, 0, hfinfo, tmp, addr_str);",
          "",
          "[Removed Lines]",
          "6280:    integer64 = fvalue_get_integer64(&fi->value);",
          "",
          "[Added Lines]",
          "6404:    integer64 = fvalue_get_uinteger64(&fi->value);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "6315:   tfstring = (const struct true_false_string*) hfinfo->strings;",
          "6316:  }",
          "6319:  if (hfinfo->bitmask) {",
          "6321:   bitwidth = hfinfo_bitwidth(hfinfo);",
          "",
          "[Removed Lines]",
          "6318:  value = fvalue_get_integer64(&fi->value);",
          "",
          "[Added Lines]",
          "6442:  value = fvalue_get_uinteger64(&fi->value);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "6437:  }",
          "6438: }",
          "6440: static void",
          "6441: fill_label_number(field_info *fi, gchar *label_str, gboolean is_signed)",
          "6442: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6564: static void",
          "6565: fill_label_bitfield64(field_info *fi, gchar *label_str, gboolean is_signed)",
          "6566: {",
          "6567:  char       *p;",
          "6568:  int         bitfield_byte_length, bitwidth;",
          "6569:  guint64     unshifted_value;",
          "6570:  guint64     value;",
          "6572:  char        buf[32];",
          "6573:  const char *out;",
          "6575:  header_field_info *hfinfo = fi->hfinfo;",
          "6578:  bitwidth = hfinfo_bitwidth(hfinfo);",
          "6581:  if (is_signed)",
          "6582:   unshifted_value = fvalue_get_sinteger64(&fi->value);",
          "6583:  else",
          "6584:   unshifted_value = fvalue_get_uinteger64(&fi->value);",
          "6586:  value = unshifted_value;",
          "6587:  if (hfinfo->bitmask) {",
          "6589:  }",
          "6592:  p = decode_bitfield_value(label_str, unshifted_value, hfinfo->bitmask, bitwidth);",
          "6593:  bitfield_byte_length = (int) (p - label_str);",
          "6596:  if (hfinfo->display == BASE_CUSTOM) {",
          "6597:   gchar tmp[ITEM_LABEL_LENGTH];",
          "6598:   const custom_fmt_func_64_t fmtfunc64 = (const custom_fmt_func_64_t)hfinfo->strings;",
          "6600:   DISSECTOR_ASSERT(fmtfunc64);",
          "6601:   fmtfunc64(tmp, value);",
          "6602:   label_fill(label_str, bitfield_byte_length, hfinfo, tmp);",
          "6603:  }",
          "6604:  else if (hfinfo->strings) {",
          "6605:   const char *val_str = hf_try_val64_to_str_const(value, hfinfo, \"Unknown\");",
          "6607:   out = hfinfo_number_vals_format64(hfinfo, buf, value);",
          "6609:    label_fill(label_str, bitfield_byte_length, hfinfo, val_str);",
          "6610:   else",
          "6611:    label_fill_descr(label_str, bitfield_byte_length, hfinfo, val_str, out);",
          "6612:  }",
          "6613:  else {",
          "6614:   out = hfinfo_number_value_format64(hfinfo, buf, value);",
          "6616:   label_fill(label_str, bitfield_byte_length, hfinfo, out);",
          "6617:  }",
          "6618: }",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "6490:  else",
          "6491:   format = hfinfo_uint64_format(hfinfo);",
          "6496:  if (IS_BASE_DUAL(hfinfo->display))",
          "",
          "[Removed Lines]",
          "6493:  value = fvalue_get_integer64(&fi->value);",
          "",
          "[Added Lines]",
          "6673:  value = fvalue_get_uinteger64(&fi->value);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "6545:   case FT_INT32:",
          "6546:    bitwidth = 32;",
          "6547:    break;",
          "6548:   case FT_BOOLEAN:",
          "6550:    break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6728:   case FT_UINT40:",
          "6729:   case FT_INT40:",
          "6730:    bitwidth = 40;",
          "6731:    break;",
          "6732:   case FT_UINT48:",
          "6733:   case FT_INT48:",
          "6734:    bitwidth = 48;",
          "6735:    break;",
          "6736:   case FT_UINT56:",
          "6737:   case FT_INT56:",
          "6738:    bitwidth = 56;",
          "6739:    break;",
          "6740:   case FT_UINT64:",
          "6741:   case FT_INT64:",
          "6742:    bitwidth = 64;",
          "6743:    break;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "6575:   case FT_INT32:",
          "6576:    return 8;",
          "6578:   default:",
          "6579:    DISSECTOR_ASSERT_NOT_REACHED();",
          "6580:    ;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6774:   case FT_UINT40:",
          "6775:   case FT_INT40:",
          "6776:    return 10;",
          "6778:   case FT_UINT48:",
          "6779:   case FT_INT48:",
          "6780:    return 12;",
          "6782:   case FT_UINT56:",
          "6783:   case FT_INT56:",
          "6784:    return 14;",
          "6786:   case FT_UINT64:",
          "6787:   case FT_INT64:",
          "6788:    return 16;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "6623:  return ptr;",
          "6624: }",
          "6626: static const char *",
          "6627: hfinfo_number_value_format(const header_field_info *hfinfo, char buf[32], guint32 value)",
          "6628: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6838: static const char *",
          "6839: hfinfo_number_value_format_display64(const header_field_info *hfinfo, int display, char buf[32], guint64 value)",
          "6840: {",
          "6841:  char *ptr = &buf[31];",
          "6842:  gboolean isint = IS_FT_INT(hfinfo->type);",
          "6846:   switch (display) {",
          "6847:    case BASE_DEC:",
          "6848:     return isint ? int64_to_str_back(ptr, (gint64) value) : uint64_to_str_back(ptr, value);",
          "6850:    case BASE_DEC_HEX:",
          "6852:     ptr = hex64_to_str_back(ptr, _hfinfo_type_hex_octet(hfinfo->type), value);",
          "6855:     ptr = isint ? int64_to_str_back(ptr, (gint64) value) : uint64_to_str_back(ptr, value);",
          "6856:     return ptr;",
          "6858:    case BASE_OCT:",
          "6859:     return oct64_to_str_back(ptr, value);",
          "6861:    case BASE_HEX:",
          "6862:     return hex64_to_str_back(ptr, _hfinfo_type_hex_octet(hfinfo->type), value);",
          "6864:    case BASE_HEX_DEC:",
          "6866:     ptr = isint ? int64_to_str_back(ptr, (gint64) value) : uint64_to_str_back(ptr, value);",
          "6869:     ptr = hex64_to_str_back(ptr, _hfinfo_type_hex_octet(hfinfo->type), value);",
          "6870:     return ptr;",
          "6872:    default:",
          "6873:     DISSECTOR_ASSERT_NOT_REACHED();",
          "6874:     ;",
          "6875:   }",
          "6876:  return ptr;",
          "6877: }",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "6638:  return hfinfo_number_value_format_display(hfinfo, display, buf, value);",
          "6639: }",
          "6641: static const char *",
          "6642: hfinfo_numeric_value_format(const header_field_info *hfinfo, char buf[32], guint32 value)",
          "6643: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6894: static const char *",
          "6895: hfinfo_number_value_format64(const header_field_info *hfinfo, char buf[32], guint64 value)",
          "6896: {",
          "6897:  int display = hfinfo->display;",
          "6899:  if (hfinfo->type == FT_FRAMENUM) {",
          "6903:   display = BASE_DEC;",
          "6904:  }",
          "6906:  return hfinfo_number_value_format_display64(hfinfo, display, buf, value);",
          "6907: }",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "6669:  return hfinfo_number_value_format_display(hfinfo, display, buf, value);",
          "6670: }",
          "6672: static const char *",
          "6673: hfinfo_number_vals_format(const header_field_info *hfinfo, char buf[32], guint32 value)",
          "6674: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6940: static const char *",
          "6941: hfinfo_numeric_value_format64(const header_field_info *hfinfo, char buf[32], guint64 value)",
          "6942: {",
          "6944:  int display = hfinfo->display & FIELD_DISPLAY_E_MASK;",
          "6946:  if (hfinfo->type == FT_FRAMENUM) {",
          "6950:   display = BASE_DEC;",
          "6951:  }",
          "6953:  switch (display) {",
          "6954:   case BASE_NONE:",
          "6956:   case BASE_DEC_HEX:",
          "6958:   case BASE_CUSTOM:",
          "6959:    display = BASE_DEC;",
          "6960:    break;",
          "6963:   case BASE_HEX_DEC:",
          "6964:    display = BASE_HEX;",
          "6965:    break;",
          "6966:  }",
          "6968:  return hfinfo_number_value_format_display64(hfinfo, display, buf, value);",
          "6969: }",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "6686:  return hfinfo_number_value_format_display(hfinfo, display, buf, value);",
          "6687: }",
          "6689: static const char *",
          "6690: hfinfo_uint64_format(const header_field_info *hfinfo)",
          "6691: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6988: static const char *",
          "6989: hfinfo_number_vals_format64(const header_field_info *hfinfo, char buf[32], guint64 value)",
          "6990: {",
          "6992:  int display = hfinfo->display & FIELD_DISPLAY_E_MASK;",
          "6994:  if (display == BASE_NONE)",
          "6995:   return NULL;",
          "6997:  if (display == BASE_DEC_HEX)",
          "6998:   display = BASE_DEC;",
          "6999:  if (display == BASE_HEX_DEC)",
          "7000:   display = BASE_HEX;",
          "7002:  return hfinfo_number_value_format_display64(hfinfo, display, buf, value);",
          "7003: }",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "7116:         hfinfo->type == FT_UINT16 ||",
          "7117:         hfinfo->type == FT_UINT24 ||",
          "7118:         hfinfo->type == FT_UINT32 ||",
          "7119:         hfinfo->type == FT_UINT64 ||",
          "7120:         hfinfo->type == FT_INT8   ||",
          "7121:         hfinfo->type == FT_INT16  ||",
          "7122:         hfinfo->type == FT_INT24  ||",
          "7123:         hfinfo->type == FT_INT32  ||",
          "7124:         hfinfo->type == FT_INT64)) {",
          "7126:     if (hfinfo->display & BASE_RANGE_STRING) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7435:         hfinfo->type == FT_UINT40 ||",
          "7436:         hfinfo->type == FT_UINT48 ||",
          "7437:         hfinfo->type == FT_UINT56 ||",
          "7443:         hfinfo->type == FT_INT40  ||",
          "7444:         hfinfo->type == FT_INT48  ||",
          "7445:         hfinfo->type == FT_INT56  ||",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "7291:        hfinfo->type == FT_UINT16 ||",
          "7292:        hfinfo->type == FT_UINT24 ||",
          "7293:        hfinfo->type == FT_UINT32 ||",
          "7294:        hfinfo->type == FT_UINT64 ||",
          "7295:        hfinfo->type == FT_INT8   ||",
          "7296:        hfinfo->type == FT_INT16  ||",
          "7297:        hfinfo->type == FT_INT24  ||",
          "7298:        hfinfo->type == FT_INT32  ||",
          "7299:        hfinfo->type == FT_INT64) {",
          "7301:     switch (hfinfo->display & FIELD_DISPLAY_E_MASK) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7616:        hfinfo->type == FT_UINT40 ||",
          "7617:        hfinfo->type == FT_UINT48 ||",
          "7618:        hfinfo->type == FT_UINT56 ||",
          "7624:        hfinfo->type == FT_INT40 ||",
          "7625:        hfinfo->type == FT_INT48 ||",
          "7626:        hfinfo->type == FT_INT56 ||",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "7363:  }",
          "7364: }",
          "",
          "[Removed Lines]",
          "7366: static const char *",
          "7367: hfinfo_numeric_format(const header_field_info *hfinfo)",
          "7368: {",
          "7369:  const char *format = NULL;",
          "7372:  switch (hfinfo->display & FIELD_DISPLAY_E_MASK) {",
          "7373:   case BASE_DEC:",
          "7374:   case BASE_DEC_HEX:",
          "7376:   case BASE_CUSTOM:",
          "7377:    switch (hfinfo->type) {",
          "7378:     case FT_UINT64:",
          "7379:      format = \"%s == %\" G_GINT64_MODIFIER \"u\";",
          "7380:      break;",
          "7381:     case FT_INT64:",
          "7382:      format = \"%s == %\" G_GINT64_MODIFIER \"d\";",
          "7383:      break;",
          "7384:     default:",
          "7385:      DISSECTOR_ASSERT_NOT_REACHED();",
          "7386:      ;",
          "7387:    }",
          "7388:    break;",
          "7389:   case BASE_HEX:",
          "7390:   case BASE_HEX_DEC:",
          "7391:    switch (hfinfo->type) {",
          "7392:     case FT_UINT64:",
          "7393:     case FT_INT64:",
          "7394:      format = \"%s == 0x%016\" G_GINT64_MODIFIER \"x\";",
          "7395:      break;",
          "7396:     default:",
          "7397:      DISSECTOR_ASSERT_NOT_REACHED();",
          "7398:      ;",
          "7399:    }",
          "7400:    break;",
          "7401:   default:",
          "7402:    DISSECTOR_ASSERT_NOT_REACHED();",
          "7403:    ;",
          "7404:  }",
          "7405:  return format;",
          "7406: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "7512:    }",
          "7513:    break;",
          "7515:   case FT_INT64:",
          "7516:   case FT_UINT64:",
          "7517:    if (filter != NULL) {",
          "7523:    }",
          "7524:    break;",
          "",
          "[Removed Lines]",
          "7518:     const char *format = hfinfo_numeric_format(hfinfo);",
          "7521:      hfinfo->abbrev,",
          "7522:      fvalue_get_integer64(&finfo->value));",
          "",
          "[Added Lines]",
          "7801:   case FT_INT40:",
          "7802:   case FT_INT48:",
          "7803:   case FT_INT56:",
          "7805:    is_signed_num = TRUE;",
          "7807:   case FT_UINT40:",
          "7808:   case FT_UINT48:",
          "7809:   case FT_UINT56:",
          "7812:     guint64 number;",
          "7814:     char buf [64];",
          "7815:     const char *out;",
          "7817:     if (is_signed_num)",
          "7818:      number = fvalue_get_sinteger64(&finfo->value);",
          "7819:     else",
          "7820:      number = fvalue_get_uinteger64(&finfo->value);",
          "7822:     out = hfinfo_numeric_value_format64(hfinfo, buf, number);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "7704:    tvb_get_ntohl(tvb, offset);",
          "7705:    available_bits = 0xFFFFFFFF;",
          "7706:    break;",
          "7707:   case 8:",
          "7708:    value = encoding ? tvb_get_letoh64(tvb, offset) :",
          "7709:    tvb_get_ntoh64(tvb, offset);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8009:   case 5:",
          "8010:    value = encoding ? tvb_get_letoh40(tvb, offset) :",
          "8011:    tvb_get_ntoh40(tvb, offset);",
          "8012:    available_bits = G_GUINT64_CONSTANT(0xFFFFFFFFFF);",
          "8013:    break;",
          "8014:   case 6:",
          "8015:    value = encoding ? tvb_get_letoh48(tvb, offset) :",
          "8016:    tvb_get_ntoh48(tvb, offset);",
          "8017:    available_bits = G_GUINT64_CONSTANT(0xFFFFFFFFFFFF);",
          "8018:    break;",
          "8019:   case 7:",
          "8020:    value = encoding ? tvb_get_letoh56(tvb, offset) :",
          "8021:    tvb_get_ntoh56(tvb, offset);",
          "8022:    available_bits = G_GUINT64_CONSTANT(0xFFFFFFFFFFFFFF);",
          "8023:    break;",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "7742:   case FT_UINT24:",
          "7743:   case FT_INT32:",
          "7744:   case FT_UINT32:",
          "7745:    if (hf->display == BASE_CUSTOM) {",
          "7746:     gchar lbl[ITEM_LABEL_LENGTH];",
          "7747:     const custom_fmt_func_t fmtfunc = (const custom_fmt_func_t)hf->strings;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8062:   case FT_INT40:",
          "8063:   case FT_UINT40:",
          "8064:   case FT_INT48:",
          "8065:   case FT_UINT48:",
          "8066:   case FT_INT56:",
          "8067:   case FT_UINT56:",
          "8068:   case FT_INT64:",
          "8069:   case FT_UINT64:",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "8029:   case FT_INT16:",
          "8030:   case FT_INT24:",
          "8031:   case FT_INT32:",
          "8032:   case FT_INT64:",
          "8033:    value = ws_sign_ext64(value, no_of_bits);",
          "8034:    break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8357:   case FT_INT40:",
          "8358:   case FT_INT48:",
          "8359:   case FT_INT56:",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "8074:   fill_label_number(PITEM_FINFO(pi), lbl_str, TRUE);",
          "8075:   break;",
          "8077:  case FT_UINT64:",
          "8078:   pi = proto_tree_add_uint64(tree, hfindex, tvb, offset, length, value);",
          "8079:   fill_label_number64(PITEM_FINFO(pi), lbl_str, FALSE);",
          "8080:   break;",
          "8082:  case FT_INT64:",
          "8083:   pi = proto_tree_add_int64(tree, hfindex, tvb, offset, length, (gint64)value);",
          "8084:   fill_label_number64(PITEM_FINFO(pi), lbl_str, TRUE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8405:  case FT_UINT40:",
          "8406:  case FT_UINT48:",
          "8407:  case FT_UINT56:",
          "8413:  case FT_INT40:",
          "8414:  case FT_INT48:",
          "8415:  case FT_INT56:",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "8173:   case FT_INT16:",
          "8174:   case FT_INT24:",
          "8175:   case FT_INT32:",
          "8176:   case FT_INT64:",
          "8177:    value = ws_sign_ext64(value, no_of_bits);",
          "8178:    break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8510:   case FT_INT40:",
          "8511:   case FT_INT48:",
          "8512:   case FT_INT56:",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "8234:   fill_label_number(PITEM_FINFO(pi), lbl_str, TRUE);",
          "8235:   break;",
          "8237:  case FT_UINT64:",
          "8238:   pi = proto_tree_add_uint64(tree, hfindex, tvb, octet_offset, octet_length, value);",
          "8239:   fill_label_number64(PITEM_FINFO(pi), lbl_str, FALSE);",
          "8240:   break;",
          "8242:  case FT_INT64:",
          "8243:   pi = proto_tree_add_int64(tree, hfindex, tvb, octet_offset, octet_length, (gint64)value);",
          "8244:   fill_label_number64(PITEM_FINFO(pi), lbl_str, TRUE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8574:  case FT_UINT40:",
          "8575:  case FT_UINT48:",
          "8576:  case FT_UINT56:",
          "8582:  case FT_INT40:",
          "8583:  case FT_INT48:",
          "8584:  case FT_INT56:",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "8359:         \"%s: %s\", str, value_str);",
          "8360:   break;",
          "8362:  case FT_UINT64:",
          "8363:   return proto_tree_add_uint64_format(tree, hfindex, tvb, offset, length, *(guint64 *)value_ptr,",
          "8364:           \"%s: %s\", str, value_str);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8705:  case FT_UINT40:",
          "8706:  case FT_UINT48:",
          "8707:  case FT_UINT56:",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "8372:        \"%s: %s\", str, value_str);",
          "8373:   break;",
          "8375:  case FT_INT64:",
          "8376:   return proto_tree_add_int64_format(tree, hfindex, tvb, offset, length, *(gint64 *)value_ptr,",
          "8377:          \"%s: %s\", str, value_str);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8721:  case FT_INT40:",
          "8722:  case FT_INT48:",
          "8723:  case FT_INT56:",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "8441:  return proto_tree_add_bits_format_value(tree, hfindex, tvb, bit_offset, no_of_bits, &value, dst);",
          "8442: }",
          "8444: proto_item *",
          "8445: proto_tree_add_float_bits_format_value(proto_tree *tree, const int hfindex,",
          "8446:            tvbuff_t *tvb, const guint bit_offset,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8793: proto_item *",
          "8794: proto_tree_add_uint64_bits_format_value(proto_tree *tree, const int hfindex,",
          "8795:           tvbuff_t *tvb, const guint bit_offset,",
          "8796:           const gint no_of_bits, guint64 value,",
          "8797:           const char *format, ...)",
          "8798: {",
          "8799:  va_list ap;",
          "8800:  gchar  *dst;",
          "8801:  header_field_info *hf_field;",
          "8803:  TRY_TO_FAKE_THIS_ITEM(tree, hfindex, hf_field);",
          "8805:  switch (hf_field->type) {",
          "8806:   case FT_UINT40:",
          "8807:   case FT_UINT48:",
          "8808:   case FT_UINT56:",
          "8809:   case FT_UINT64:",
          "8810:    break;",
          "8812:   default:",
          "8813:    DISSECTOR_ASSERT_NOT_REACHED();",
          "8814:    return NULL;",
          "8815:    break;",
          "8816:  }",
          "8818:  CREATE_VALUE_STRING(dst, format, ap);",
          "8820:  return proto_tree_add_bits_format_value(tree, hfindex, tvb, bit_offset, no_of_bits, &value, dst);",
          "8821: }",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "8490:  return proto_tree_add_bits_format_value(tree, hfindex, tvb, bit_offset, no_of_bits, &value, dst);",
          "8491: }",
          "8493: proto_item *",
          "8494: proto_tree_add_boolean_bits_format_value(proto_tree *tree, const int hfindex,",
          "8495:       tvbuff_t *tvb, const guint bit_offset,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8872: proto_item *",
          "8873: proto_tree_add_int64_bits_format_value(proto_tree *tree, const int hfindex,",
          "8874:          tvbuff_t *tvb, const guint bit_offset,",
          "8875:          const gint no_of_bits, gint64 value,",
          "8876:          const char *format, ...)",
          "8877: {",
          "8878:  va_list ap;",
          "8879:  gchar  *dst;",
          "8880:  header_field_info *hf_field;",
          "8882:  TRY_TO_FAKE_THIS_ITEM(tree, hfindex, hf_field);",
          "8884:  switch (hf_field->type) {",
          "8885:   case FT_INT40:",
          "8886:   case FT_INT48:",
          "8887:   case FT_INT56:",
          "8888:   case FT_INT64:",
          "8889:    break;",
          "8891:   default:",
          "8892:    DISSECTOR_ASSERT_NOT_REACHED();",
          "8893:    return NULL;",
          "8894:    break;",
          "8895:  }",
          "8897:  CREATE_VALUE_STRING(dst, format, ap);",
          "8899:  return proto_tree_add_bits_format_value(tree, hfindex, tvb, bit_offset, no_of_bits, &value, dst);",
          "8900: }",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "8509:  return proto_tree_add_bits_format_value(tree, hfindex, tvb, bit_offset, no_of_bits, &value, dst);",
          "8510: }",
          "8512: proto_item *",
          "8513: proto_tree_add_ts_23_038_7bits_item(proto_tree *tree, const int hfindex, tvbuff_t *tvb,",
          "8514:  const guint bit_offset, const gint no_of_chars)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8921: proto_item *",
          "8922: proto_tree_add_boolean_bits_format_value64(proto_tree *tree, const int hfindex,",
          "8923:       tvbuff_t *tvb, const guint bit_offset,",
          "8924:       const gint no_of_bits, guint64 value,",
          "8925:       const char *format, ...)",
          "8926: {",
          "8927:  va_list ap;",
          "8928:  gchar  *dst;",
          "8929:  header_field_info *hf_field;",
          "8931:  TRY_TO_FAKE_THIS_ITEM(tree, hfindex, hf_field);",
          "8933:  DISSECTOR_ASSERT(hf_field->type == FT_BOOLEAN);",
          "8935:  CREATE_VALUE_STRING(dst, format, ap);",
          "8937:  return proto_tree_add_bits_format_value(tree, hfindex, tvb, bit_offset, no_of_bits, &value, dst);",
          "8938: }",
          "",
          "---------------"
        ],
        "epan/proto.h||epan/proto.h": [
          "File: epan/proto.h -> epan/proto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "82: #define TFS(x) (const struct true_false_string*)(x)",
          "84: typedef void (*custom_fmt_func_t)(gchar *, guint32);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86: typedef void (*custom_fmt_func_64_t)(gchar *, guint64);",
          "",
          "---------------"
        ],
        "epan/to_str-int.h||epan/to_str-int.h": [
          "File: epan/to_str-int.h -> epan/to_str-int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: char *word_to_hex(char *out, guint16 word);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: char *word_to_hex_punct(char *out, guint16 word, char punct);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: char *word_to_hex_npad(char *out, guint16 word);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71: char *dword_to_hex(char *out, guint32 dword);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "60: char *dword_to_hex_punct(char *out, guint32 dword, char punct);",
          "",
          "[Removed Lines]",
          "71: char *dword_to_hex(char *out, guint32 dword);",
          "",
          "[Added Lines]",
          "94: char *qword_to_hex(char *out, guint64 qword);",
          "106: char *qword_to_hex_punct(char *out, guint64 qword, char punct);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "105: char *oct_to_str_back(char *ptr, guint32 value);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151: char *oct64_to_str_back(char *ptr, guint64 value);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "117: char *hex_to_str_back(char *ptr, int len, guint32 value);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "175: char *hex64_to_str_back(char *ptr, int len, guint64 value);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "128: char *uint_to_str_back(char *ptr, guint32 value);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "197: char *uint64_to_str_back(char *ptr, guint64 value);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "140: char *uint_to_str_back_len(char *ptr, guint32 value, int len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221: char *uint64_to_str_back_len(char *ptr, guint64 value, int len);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "151: char *int_to_str_back(char *ptr, gint32 value);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "243: char *int64_to_str_back(char *ptr, gint64 value);",
          "",
          "---------------"
        ],
        "epan/to_str.c||epan/to_str.c": [
          "File: epan/to_str.c -> epan/to_str.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:  return out;",
          "75: }",
          "77: char *",
          "78: word_to_hex_npad(char *out, guint16 word)",
          "79: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77: char *",
          "78: word_to_hex_punct(char *out, guint16 word, char punct)",
          "79: {",
          "80:  out = byte_to_hex(out, word >> 8);",
          "82:  out = byte_to_hex(out, word);",
          "83:  return out;",
          "84: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90: char *",
          "91: dword_to_hex(char *out, guint32 dword)",
          "92: {",
          "97:  return out;",
          "98: }",
          "100: char *",
          "101: dword_to_hex_punct(char *out, guint32 dword, char punct)",
          "102: {",
          "110:  return out;",
          "111: }",
          "",
          "[Removed Lines]",
          "93:  out = byte_to_hex(out, dword >> 24);",
          "94:  out = byte_to_hex(out, dword >> 16);",
          "95:  out = byte_to_hex(out, dword >>  8);",
          "96:  out = byte_to_hex(out, dword);",
          "103:  out = byte_to_hex(out, dword >> 24);",
          "105:  out = byte_to_hex(out, dword >> 16);",
          "107:  out = byte_to_hex(out, dword >>  8);",
          "109:  out = byte_to_hex(out, dword);",
          "",
          "[Added Lines]",
          "102:  out = word_to_hex(out, dword >> 16);",
          "103:  out = word_to_hex(out, dword);",
          "110:  out = word_to_hex_punct(out, dword >> 16, punct);",
          "112:  out = word_to_hex_punct(out, dword, punct);",
          "113:  return out;",
          "114: }",
          "116: char *",
          "117: qword_to_hex(char *out, guint64 qword)",
          "118: {",
          "119:  out = dword_to_hex(out, qword >> 32);",
          "120:  out = dword_to_hex(out, qword & 0xffffffff);",
          "121:  return out;",
          "122: }",
          "124: char *",
          "125: qword_to_hex_punct(char *out, guint64 qword, char punct)",
          "126: {",
          "127:  out = dword_to_hex_punct(out, qword >> 32, punct);",
          "129:  out = dword_to_hex_punct(out, qword & 0xffffffff, punct);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "242:  return 1;",
          "243: }",
          "245: static const char fast_strings[][4] = {",
          "246:  \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",",
          "247:  \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "266: static int",
          "267: guint64_to_str_buf_len(const guint64 u)",
          "268: {",
          "271:  if (u >= 1000000000000000000) return 19;",
          "272:  if (u >= 100000000000000000)  return 18;",
          "273:  if (u >= 10000000000000000)   return 17;",
          "274:  if (u >= 1000000000000000)    return 16;",
          "275:  if (u >= 100000000000000)     return 15;",
          "276:  if (u >= 10000000000000)      return 14;",
          "277:  if (u >= 1000000000000)       return 13;",
          "278:  if (u >= 100000000000)        return 12;",
          "279:  if (u >= 10000000000)         return 11;",
          "280:  if (u >= 1000000000)          return 10;",
          "281:  if (u >= 100000000)           return 9;",
          "282:  if (u >= 10000000)            return 8;",
          "283:  if (u >= 1000000)             return 7;",
          "284:  if (u >= 100000)              return 6;",
          "285:  if (u >= 10000)               return 5;",
          "286:  if (u >= 1000)                return 4;",
          "287:  if (u >= 100)                 return 3;",
          "288:  if (u >= 10)                  return 2;",
          "290:  return 1;",
          "291: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "294:  uint_to_str_back(bp, u);",
          "295: }",
          "297: #define PLURALIZE(n) (((n) > 1) ? \"s\" : \"\")",
          "298: #define COMMA(do_it) ((do_it) ? \", \" : \"\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "345: void",
          "346: guint64_to_str_buf(guint64 u, gchar *buf, int buf_len)",
          "347: {",
          "348:  int str_len = guint64_to_str_buf_len(u)+1;",
          "350:  gchar *bp = &buf[str_len];",
          "352:  if (buf_len < str_len) {",
          "354:   return;",
          "355:  }",
          "359:  uint64_to_str_back(bp, u);",
          "360: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1110:  return ptr;",
          "1111: }",
          "1113: char *",
          "1114: hex_to_str_back(char *ptr, int len, guint32 value)",
          "1115: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1178: char *",
          "1179: oct64_to_str_back(char *ptr, guint64 value)",
          "1180: {",
          "1181:  while (value) {",
          "1183:   value >>= 3;",
          "1184:  }",
          "1187:  return ptr;",
          "1188: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1131:  return ptr;",
          "1132: }",
          "1134: char *",
          "1135: uint_to_str_back(char *ptr, guint32 value)",
          "1136: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1211: char *",
          "1212: hex64_to_str_back(char *ptr, int len, guint64 value)",
          "1213: {",
          "1214:  do {",
          "1216:   value >>= 4;",
          "1217:   len--;",
          "1218:  } while (value);",
          "1221:  while (len > 0) {",
          "1223:   len--;",
          "1224:  }",
          "1229:  return ptr;",
          "1230: }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1155:  return ptr;",
          "1156: }",
          "1158: char *",
          "1159: uint_to_str_back_len(char *ptr, guint32 value, int len)",
          "1160: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1256: char *",
          "1257: uint64_to_str_back(char *ptr, guint64 value)",
          "1258: {",
          "1259:  char const *p;",
          "1262:  if (value == 0)",
          "1265:  while (value >= 10) {",
          "1266:   p = fast_strings[100 + (value % 100)];",
          "1268:   value /= 100;",
          "1272:  }",
          "1275:  if (value)",
          "1278:  return ptr;",
          "1279: }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1175:  return new_ptr;",
          "1176: }",
          "1178: char *",
          "1179: int_to_str_back(char *ptr, gint32 value)",
          "1180: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1301: char *",
          "1302: uint64_to_str_back_len(char *ptr, guint64 value, int len)",
          "1303: {",
          "1304:  char *new_ptr;",
          "1306:  new_ptr = uint64_to_str_back(ptr, value);",
          "1309:  len -= (int)(ptr - new_ptr);",
          "1312:  while (len > 0)",
          "1313:  {",
          "1315:   len--;",
          "1316:  }",
          "1318:  return new_ptr;",
          "1319: }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1187:  return ptr;",
          "1188: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1333: char *",
          "1334: int64_to_str_back(char *ptr, gint64 value)",
          "1335: {",
          "1336:  if (value < 0) {",
          "1337:   ptr = uint64_to_str_back(ptr, -value);",
          "1339:  } else",
          "1340:   ptr = uint64_to_str_back(ptr, value);",
          "1342:  return ptr;",
          "1343: }",
          "",
          "---------------"
        ],
        "epan/to_str.h||epan/to_str.h": [
          "File: epan/to_str.h -> epan/to_str.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "80: WS_DLL_PUBLIC void display_epoch_time(gchar *, int, const time_t,  gint32, const to_str_time_res_t);",
          "82: extern void guint32_to_str_buf(guint32 u, gchar *buf, int buf_len);",
          "84: WS_DLL_PUBLIC gchar* rel_time_to_str(wmem_allocator_t *scope, const nstime_t*);",
          "85: WS_DLL_PUBLIC gchar* rel_time_to_secs_str(wmem_allocator_t *scope, const nstime_t*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83: extern void guint64_to_str_buf(guint64 u, gchar *buf, int buf_len);",
          "",
          "---------------"
        ],
        "epan/wsluwslua_field.c||epan/wslua/wslua_field.c": [
          "File: epan/wsluwslua_field.c -> epan/wslua/wslua_field.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:                 pushInt64(L,(Int64)(fvalue_get_sinteger64(&(fi->ws_fi->value))));",
          "116:                 pushUInt64(L,fvalue_get_uinteger64(&(fi->ws_fi->value)));",
          "",
          "---------------"
        ],
        "rawshark.c||rawshark.c": [
          "File: rawshark.c -> rawshark.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1348:                                     g_string_append(label_s, val_to_str_const(svalue, cVALS(hfinfo->strings), \"Unknown\"));",
          "1349:                                 }",
          "1350:                                 break;",
          "1351:                             case FT_INT64:",
          "1352:                                 DISSECTOR_ASSERT(!hfinfo->bitmask);",
          "1354:                                 if (hfinfo->display & BASE_VAL64_STRING) {",
          "1355:                                     g_string_append(label_s, val64_to_str_const(svalue64, (const val64_string *)(hfinfo->strings), \"Unknown\"));",
          "1356:                                 }",
          "",
          "[Removed Lines]",
          "1353:                                 svalue64 = (gint64)fvalue_get_integer64(&finfo->value);",
          "",
          "[Added Lines]",
          "1352:                             case FT_INT48:",
          "1353:                             case FT_INT56:",
          "1356:                                 svalue64 = (gint64)fvalue_get_sinteger64(&finfo->value);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1359:                             case FT_UINT16:",
          "1360:                             case FT_UINT24:",
          "1361:                             case FT_UINT32:",
          "1362:                                 uvalue = fvalue_get_uinteger(&finfo->value);",
          "1363:                                 if (!hfinfo->bitmask && hfinfo->display & BASE_RANGE_STRING) {",
          "1364:                                     g_string_append(label_s, rval_to_str_const(uvalue, RVALS(hfinfo->strings), \"Unknown\"));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1365:                                 DISSECTOR_ASSERT(!hfinfo->bitmask);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1368:                                     g_string_append(label_s, val_to_str_const(uvalue, cVALS(hfinfo->strings), \"Unknown\"));",
          "1369:                                 }",
          "1370:                                 break;",
          "1371:                             case FT_UINT64:",
          "1372:                                 DISSECTOR_ASSERT(!hfinfo->bitmask);",
          "1374:                                 if (hfinfo->display & BASE_VAL64_STRING) {",
          "1375:                                     g_string_append(label_s, val64_to_str_const(uvalue64, (const val64_string *)(hfinfo->strings), \"Unknown\"));",
          "1376:                                 }",
          "",
          "[Removed Lines]",
          "1373:                                 uvalue64 = fvalue_get_integer64(&finfo->value);",
          "",
          "[Added Lines]",
          "1376:                             case FT_UINT48:",
          "1377:                             case FT_UINT56:",
          "1380:                                 uvalue64 = fvalue_get_uinteger64(&finfo->value);",
          "",
          "---------------"
        ],
        "ui/cli/tap-iostat.c||ui/cli/tap-iostat.c": [
          "File: ui/cli/tap-iostat.c -> ui/cli/tap-iostat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "172:                 case FT_UINT32:",
          "173:                     it->counter += fvalue_get_uinteger(&((field_info *)gp->pdata[i])->value);",
          "174:                     break;",
          "175:                 case FT_UINT64:",
          "177:                     break;",
          "178:                 case FT_INT8:",
          "179:                 case FT_INT16:",
          "",
          "[Removed Lines]",
          "176:                     it->counter += fvalue_get_integer64(&((field_info *)gp->pdata[i])->value);",
          "",
          "[Added Lines]",
          "175:                 case FT_UINT40:",
          "176:                 case FT_UINT48:",
          "177:                 case FT_UINT56:",
          "179:                     it->counter += fvalue_get_uinteger64(&((field_info *)gp->pdata[i])->value);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "181:                 case FT_INT32:",
          "182:                     it->counter += fvalue_get_sinteger(&((field_info *)gp->pdata[i])->value);",
          "183:                     break;",
          "184:                 case FT_INT64:",
          "186:                     break;",
          "187:                 case FT_FLOAT:",
          "188:                     it->float_counter +=",
          "",
          "[Removed Lines]",
          "185:                     it->counter += (gint64)fvalue_get_integer64(&((field_info *)gp->pdata[i])->value);",
          "",
          "[Added Lines]",
          "187:                 case FT_INT40:",
          "188:                 case FT_INT48:",
          "189:                 case FT_INT56:",
          "191:                     it->counter += (gint64)fvalue_get_sinteger64(&((field_info *)gp->pdata[i])->value);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "226:                         it->counter = val;",
          "227:                     }",
          "228:                     break;",
          "229:                 case FT_UINT64:",
          "231:                     if ((it->frames == 1 && i == 0) || (val < it->counter)) {",
          "232:                         it->counter = val;",
          "233:                     }",
          "",
          "[Removed Lines]",
          "230:                     val = fvalue_get_integer64(&((field_info *)gp->pdata[i])->value);",
          "",
          "[Added Lines]",
          "235:                 case FT_UINT40:",
          "236:                 case FT_UINT48:",
          "237:                 case FT_UINT56:",
          "239:                     val = fvalue_get_uinteger64(&((field_info *)gp->pdata[i])->value);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "241:                         it->counter = val;",
          "242:                     }",
          "243:                     break;",
          "244:                 case FT_INT64:",
          "246:                     if ((it->frames == 1 && i == 0) || ((gint64)val < (gint64)it->counter)) {",
          "247:                         it->counter = val;",
          "248:                     }",
          "",
          "[Removed Lines]",
          "245:                     val = fvalue_get_integer64(&((field_info *)gp->pdata[i])->value);",
          "",
          "[Added Lines]",
          "253:                 case FT_INT40:",
          "254:                 case FT_INT48:",
          "255:                 case FT_INT56:",
          "257:                     val = fvalue_get_sinteger64(&((field_info *)gp->pdata[i])->value);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "295:                     if (val > it->counter)",
          "296:                         it->counter = val;",
          "297:                     break;",
          "298:                 case FT_UINT64:",
          "300:                     if (val > it->counter)",
          "301:                         it->counter = val;",
          "302:                     break;",
          "",
          "[Removed Lines]",
          "299:                     val = fvalue_get_integer64(&((field_info *)gp->pdata[i])->value);",
          "",
          "[Added Lines]",
          "310:                 case FT_UINT40:",
          "311:                 case FT_UINT48:",
          "312:                 case FT_UINT56:",
          "314:                     val = fvalue_get_uinteger64(&((field_info *)gp->pdata[i])->value);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "308:                     if ((gint32)val > (gint32)it->counter)",
          "309:                         it->counter = val;",
          "310:                     break;",
          "311:                 case FT_INT64:",
          "313:                     if ((gint64)val > (gint64)it->counter)",
          "314:                         it->counter = val;",
          "315:                     break;",
          "",
          "[Removed Lines]",
          "312:                     val = fvalue_get_integer64(&((field_info *)gp->pdata[i])->value);",
          "",
          "[Added Lines]",
          "326:                 case FT_INT40:",
          "327:                 case FT_INT48:",
          "328:                 case FT_INT56:",
          "330:                     val = fvalue_get_sinteger64(&((field_info *)gp->pdata[i])->value);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "356:                     val = fvalue_get_uinteger(&((field_info *)gp->pdata[i])->value);",
          "357:                     it->counter += val;",
          "358:                     break;",
          "359:                 case FT_UINT64:",
          "362:                     it->counter += val;",
          "363:                     break;",
          "364:                 case FT_INT8:",
          "",
          "[Removed Lines]",
          "360:                 case FT_INT64:",
          "361:                     val = fvalue_get_integer64(&((field_info *)gp->pdata[i])->value);",
          "",
          "[Added Lines]",
          "377:                 case FT_UINT40:",
          "378:                 case FT_UINT48:",
          "379:                 case FT_UINT56:",
          "381:                     val = fvalue_get_uinteger64(&((field_info *)gp->pdata[i])->value);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "368:                     val = fvalue_get_sinteger(&((field_info *)gp->pdata[i])->value);",
          "369:                     it->counter += val;",
          "370:                     break;",
          "371:                 case FT_FLOAT:",
          "372:                     it->float_counter += (gfloat)fvalue_get_floating(&((field_info *)gp->pdata[i])->value);",
          "373:                     break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "391:                 case FT_INT40:",
          "392:                 case FT_INT48:",
          "393:                 case FT_INT56:",
          "394:                 case FT_INT64:",
          "395:                     val = fvalue_get_sinteger64(&((field_info *)gp->pdata[i])->value);",
          "396:                     it->counter += val;",
          "397:                     break;",
          "",
          "---------------"
        ],
        "ui/io_graph_item.h||ui/io_graph_item.h": [
          "File: ui/io_graph_item.h -> ui/io_graph_item.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "194:                 item->int_tot += new_int;",
          "195:                 item->fields++;",
          "196:                 break;",
          "197:             case FT_UINT64:",
          "198:             case FT_INT64:",
          "200:                 if ((new_int64 > item->int_max) || (item->fields == 0)) {",
          "201:                     item->int_max = new_int64;",
          "202:                 }",
          "",
          "[Removed Lines]",
          "199:                 new_int64 = fvalue_get_integer64(&((field_info *)gp->pdata[i])->value);",
          "",
          "[Added Lines]",
          "197:             case FT_UINT40:",
          "198:             case FT_UINT48:",
          "199:             case FT_UINT56:",
          "201:                 new_int64 = fvalue_get_uinteger64(&((field_info *)gp->pdata[i])->value);",
          "202:                 if ((new_int64 > item->int_max) || (item->fields == 0)) {",
          "203:                     item->int_max = new_int64;",
          "204:                 }",
          "205:                 if ((new_int64 < item->int_min) || (item->fields == 0)) {",
          "206:                     item->int_min = new_int64;",
          "207:                 }",
          "208:                 item->int_tot += new_int64;",
          "209:                 item->fields++;",
          "210:                 break;",
          "211:             case FT_INT40:",
          "212:             case FT_INT48:",
          "213:             case FT_INT56:",
          "215:                 new_int64 = fvalue_get_sinteger64(&((field_info *)gp->pdata[i])->value);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2196378bcb21eb709d24ae3659125dbf6816cff0",
      "candidate_info": {
        "commit_hash": "2196378bcb21eb709d24ae3659125dbf6816cff0",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/2196378bcb21eb709d24ae3659125dbf6816cff0",
        "files": [
          "epan/proto.c"
        ],
        "message": "Fetch values appropriately according to the value's type.\n\nThis fixes some crashes.\n\nChange-Id: I47583777486486114675ba98cb58971adb8b1b10\nReviewed-on: https://code.wireshark.org/review/7305\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
        "before_after_code_files": [
          "epan/proto.c||epan/proto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/proto.c||epan/proto.c"
          ],
          "candidate": [
            "epan/proto.c||epan/proto.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/proto.c||epan/proto.c": [
          "File: epan/proto.c -> epan/proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6665:  char               tmp[ITEM_LABEL_LENGTH+1];",
          "6669:   format = hfinfo_int64_format(hfinfo);",
          "6671:   format = hfinfo_uint64_format(hfinfo);",
          "6676:  if (IS_BASE_DUAL(hfinfo->display))",
          "",
          "[Removed Lines]",
          "6668:  if (is_signed)",
          "6670:  else",
          "6673:  value = fvalue_get_uinteger64(&fi->value);",
          "",
          "[Added Lines]",
          "6668:  if (is_signed) {",
          "6670:   value = fvalue_get_sinteger64(&fi->value);",
          "6671:  } else {",
          "6673:   value = fvalue_get_uinteger64(&fi->value);",
          "6674:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9fd6c45560b6610291cef7577bb27dda94ce178a",
      "candidate_info": {
        "commit_hash": "9fd6c45560b6610291cef7577bb27dda94ce178a",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/9fd6c45560b6610291cef7577bb27dda94ce178a",
        "files": [
          "epan/proto.c"
        ],
        "message": "proto: use correct mask when checking display\n\nOtherwise numeric fields with BASE_EXT_STRING don't match anything and cause an\nassertion failure.\n\nAlso fix indentation.\n\nChange-Id: I2708be50a6c5aff5400ec44e6a141db39d2d94e7\nReviewed-on: https://code.wireshark.org/review/8391\nPetri-Dish: Evan Huus <eapache@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Evan Huus <eapache@gmail.com>",
        "before_after_code_files": [
          "epan/proto.c||epan/proto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/proto.c||epan/proto.c"
          ],
          "candidate": [
            "epan/proto.c||epan/proto.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/proto.c||epan/proto.c": [
          "File: epan/proto.c -> epan/proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6964:  return ptr;",
          "6965: }",
          "",
          "[Removed Lines]",
          "6935:   switch (display) {",
          "6936:    case BASE_DEC:",
          "6937:     return isint ? int_to_str_back(ptr, (gint32) value) : uint_to_str_back(ptr, value);",
          "6939:    case BASE_DEC_HEX:",
          "6941:     ptr = hex_to_str_back(ptr, _hfinfo_type_hex_octet(hfinfo->type), value);",
          "6944:     ptr = isint ? int_to_str_back(ptr, (gint32) value) : uint_to_str_back(ptr, value);",
          "6945:     return ptr;",
          "6947:    case BASE_OCT:",
          "6948:     return oct_to_str_back(ptr, value);",
          "6950:    case BASE_HEX:",
          "6951:     return hex_to_str_back(ptr, _hfinfo_type_hex_octet(hfinfo->type), value);",
          "6953:    case BASE_HEX_DEC:",
          "6955:     ptr = isint ? int_to_str_back(ptr, (gint32) value) : uint_to_str_back(ptr, value);",
          "6958:     ptr = hex_to_str_back(ptr, _hfinfo_type_hex_octet(hfinfo->type), value);",
          "6959:     return ptr;",
          "6961:    default:",
          "6962:     g_assert_not_reached();",
          "6963:   }",
          "",
          "[Added Lines]",
          "6935:  switch (display & FIELD_DISPLAY_E_MASK) {",
          "6936:   case BASE_DEC:",
          "6937:    return isint ? int_to_str_back(ptr, (gint32) value) : uint_to_str_back(ptr, value);",
          "6939:   case BASE_DEC_HEX:",
          "6941:    ptr = hex_to_str_back(ptr, _hfinfo_type_hex_octet(hfinfo->type), value);",
          "6944:    ptr = isint ? int_to_str_back(ptr, (gint32) value) : uint_to_str_back(ptr, value);",
          "6945:    return ptr;",
          "6947:   case BASE_OCT:",
          "6948:    return oct_to_str_back(ptr, value);",
          "6950:   case BASE_HEX:",
          "6951:    return hex_to_str_back(ptr, _hfinfo_type_hex_octet(hfinfo->type), value);",
          "6953:   case BASE_HEX_DEC:",
          "6955:    ptr = isint ? int_to_str_back(ptr, (gint32) value) : uint_to_str_back(ptr, value);",
          "6958:    ptr = hex_to_str_back(ptr, _hfinfo_type_hex_octet(hfinfo->type), value);",
          "6959:    return ptr;",
          "6961:   default:",
          "6962:    g_assert_not_reached();",
          "6963:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b9af5a5b329618467c3c930ac3dbc225e1f3ea6d",
      "candidate_info": {
        "commit_hash": "b9af5a5b329618467c3c930ac3dbc225e1f3ea6d",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/b9af5a5b329618467c3c930ac3dbc225e1f3ea6d",
        "files": [
          "epan/proto.c"
        ],
        "message": "proto.c: avoid corrupting stack when printing a 64 bits field in BASE_DEC_HEX or BASE_HEX_DEC format\n\nBug: 10994\nChange-Id: Id5049054d5b04838df325f03a6bfa238a2063fb7\nReviewed-on: https://code.wireshark.org/review/7329\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>",
        "before_after_code_files": [
          "epan/proto.c||epan/proto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/proto.c||epan/proto.c"
          ],
          "candidate": [
            "epan/proto.c||epan/proto.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/proto.c||epan/proto.c": [
          "File: epan/proto.c -> epan/proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "166: static void fill_label_number64(field_info *fi, gchar *label_str, gboolean is_signed);",
          "168: static const char *hfinfo_number_value_format_display(const header_field_info *hfinfo, int display, char buf[32], guint32 value);",
          "170: static const char *hfinfo_number_vals_format(const header_field_info *hfinfo, char buf[32], guint32 value);",
          "172: static const char *hfinfo_number_value_format(const header_field_info *hfinfo, char buf[32], guint32 value);",
          "174: static const char *hfinfo_numeric_value_format(const header_field_info *hfinfo, char buf[32], guint32 value);",
          "177: static proto_item *",
          "178: proto_tree_add_node(proto_tree *tree, field_info *fi);",
          "",
          "[Removed Lines]",
          "169: static const char *hfinfo_number_value_format_display64(const header_field_info *hfinfo, int display, char buf[32], guint64 value);",
          "171: static const char *hfinfo_number_vals_format64(const header_field_info *hfinfo, char buf[32], guint64 value);",
          "173: static const char *hfinfo_number_value_format64(const header_field_info *hfinfo, char buf[32], guint64 value);",
          "175: static const char *hfinfo_numeric_value_format64(const header_field_info *hfinfo, char buf[32], guint64 value);",
          "",
          "[Added Lines]",
          "169: static const char *hfinfo_number_value_format_display64(const header_field_info *hfinfo, int display, char buf[48], guint64 value);",
          "171: static const char *hfinfo_number_vals_format64(const header_field_info *hfinfo, char buf[48], guint64 value);",
          "173: static const char *hfinfo_number_value_format64(const header_field_info *hfinfo, char buf[48], guint64 value);",
          "175: static const char *hfinfo_numeric_value_format64(const header_field_info *hfinfo, char buf[48], guint64 value);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4244:  const gchar        *abbrev        = NULL;",
          "4246:  const char *hf_str_val;",
          "4248:  const char *number_out;",
          "4249:  char *tmpbuf, *str;",
          "4250:  int *field_idx;",
          "",
          "[Removed Lines]",
          "4247:  char number_buf[32];",
          "",
          "[Added Lines]",
          "4247:  char number_buf[48];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6566:  guint64     unshifted_value;",
          "6567:  guint64     value;",
          "6570:  const char *out;",
          "6572:  header_field_info *hfinfo = fi->hfinfo;",
          "",
          "[Removed Lines]",
          "6569:  char        buf[32];",
          "",
          "[Added Lines]",
          "6569:  char        buf[48];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6659:  header_field_info *hfinfo = fi->hfinfo;",
          "6660:  guint64            value;",
          "6663:  const char        *out;",
          "6665:  if (is_signed)",
          "",
          "[Removed Lines]",
          "6662:  char               buf[32];",
          "",
          "[Added Lines]",
          "6662:  char               buf[48];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6834: }",
          "6836: static const char *",
          "6838: {",
          "6840:  gboolean isint = IS_FT_INT(hfinfo->type);",
          "",
          "[Removed Lines]",
          "6837: hfinfo_number_value_format_display64(const header_field_info *hfinfo, int display, char buf[32], guint64 value)",
          "6839:  char *ptr = &buf[31];",
          "",
          "[Added Lines]",
          "6837: hfinfo_number_value_format_display64(const header_field_info *hfinfo, int display, char buf[48], guint64 value)",
          "6839:  char *ptr = &buf[47];",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6889: }",
          "6891: static const char *",
          "6893: {",
          "6894:  int display = hfinfo->display;",
          "",
          "[Removed Lines]",
          "6892: hfinfo_number_value_format64(const header_field_info *hfinfo, char buf[32], guint64 value)",
          "",
          "[Added Lines]",
          "6892: hfinfo_number_value_format64(const header_field_info *hfinfo, char buf[64], guint64 value)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6935: }",
          "6937: static const char *",
          "6939: {",
          "6941:  int display = hfinfo->display & FIELD_DISPLAY_E_MASK;",
          "",
          "[Removed Lines]",
          "6938: hfinfo_numeric_value_format64(const header_field_info *hfinfo, char buf[32], guint64 value)",
          "",
          "[Added Lines]",
          "6938: hfinfo_numeric_value_format64(const header_field_info *hfinfo, char buf[64], guint64 value)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6983: }",
          "6985: static const char *",
          "6987: {",
          "6989:  int display = hfinfo->display & FIELD_DISPLAY_E_MASK;",
          "",
          "[Removed Lines]",
          "6986: hfinfo_number_vals_format64(const header_field_info *hfinfo, char buf[32], guint64 value)",
          "",
          "[Added Lines]",
          "6986: hfinfo_number_vals_format64(const header_field_info *hfinfo, char buf[64], guint64 value)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "7750:    if (filter != NULL) {",
          "7751:     guint64 number;",
          "7754:     const char *out;",
          "7756:     if (is_signed_num)",
          "",
          "[Removed Lines]",
          "7753:     char buf [64];",
          "",
          "[Added Lines]",
          "7753:     char buf [48];",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9eda2fa063569c49ce238d6bbee023c91b46d879",
      "candidate_info": {
        "commit_hash": "9eda2fa063569c49ce238d6bbee023c91b46d879",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/9eda2fa063569c49ce238d6bbee023c91b46d879",
        "files": [
          "epan/dissectors/packet-ipv6.c",
          "epan/proto.c",
          "epan/proto.h",
          "wsutil/bits_ctz.h"
        ],
        "message": "Set width of hex output according to bitmask\n\nOutput from BASE_HEX et al has always been zero-padded to according to\nthe field type - 8 digits for FT_UINT32, etc.\n\nWhen the field has a bitmask, this is definitely not appropriate - the\nfield type is used to indicate the size of the bitfield container, and\ntells us nothing about the size of this field.\n\nInstead, determine the actual size of the field by inspecting the\nbitmask, and output the corresponding number of hex digits.\n\nChange-Id: I10ec4e93e1e40e8b1354d5368cc8945cf671a617\nReviewed-on: https://code.wireshark.org/review/13225\nReviewed-by: Jo\u00e3o Valverde <j@v6e.pt>\nPetri-Dish: Jo\u00e3o Valverde <j@v6e.pt>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>",
        "before_after_code_files": [
          "epan/dissectors/packet-ipv6.c||epan/dissectors/packet-ipv6.c",
          "epan/proto.c||epan/proto.c",
          "epan/proto.h||epan/proto.h",
          "wsutil/bits_ctz.h||wsutil/bits_ctz.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/proto.c||epan/proto.c"
          ],
          "candidate": [
            "epan/proto.c||epan/proto.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-ipv6.c||epan/dissectors/packet-ipv6.c": [
          "File: epan/dissectors/packet-ipv6.c -> epan/dissectors/packet-ipv6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2067:     if (tree) {",
          "2073:         proto_item_append_text(ti, \" (DSCP: %s, ECN: %s)\",",
          "2074:                             val_to_str_ext_const(IPDSFIELD_DSCP(tfc), &dscp_short_vals_ext, \"Unknown\"),",
          "2075:                             val_to_str_ext_const(IPDSFIELD_ECN(tfc), &ecn_short_vals_ext, \"Unknown\"));",
          "",
          "[Removed Lines]",
          "2071:         ti = proto_tree_add_uint_format_value(ipv6_tree, hf_ipv6_tclass, tvb,",
          "2072:                             offset + IP6H_CTL_FLOW, 4, g_ntohl(ipv6->ip6_flow), \"0x%02x\", tfc);",
          "",
          "[Added Lines]",
          "2071:         ti = proto_tree_add_item(ipv6_tree, hf_ipv6_tclass, tvb,",
          "2072:                             offset + IP6H_CTL_FLOW, 4, ENC_BIG_ENDIAN);",
          "",
          "---------------"
        ],
        "epan/proto.c||epan/proto.c": [
          "File: epan/proto.c -> epan/proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "169: static const char *hf_try_val_to_str(guint32 value, const header_field_info *hfinfo);",
          "170: static const char *hf_try_val64_to_str(guint64 value, const header_field_info *hfinfo);",
          "172: static void label_mark_truncated(char *label_str, gsize name_pos);",
          "173: #define LABEL_MARK_TRUNCATED_START(label_str) label_mark_truncated(label_str, 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "171: static int hfinfo_container_bitwidth(const header_field_info *hfinfo);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4641:    val <<= hfinfo_bitshift(hf);",
          "4644:    ret = (int) (p - fi->rep->representation);",
          "4645:   }",
          "",
          "[Removed Lines]",
          "4643:    p = decode_bitfield_value(fi->rep->representation, val, hf->bitmask, hfinfo_bitwidth(hf));",
          "",
          "[Added Lines]",
          "4644:    p = decode_bitfield_value(fi->rep->representation, val, hf->bitmask, hfinfo_container_bitwidth(hf));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7193:  value = fvalue_get_uinteger64(&fi->value);",
          "7194:  if (hfinfo->bitmask) {",
          "7199:   unshifted_value = value;",
          "",
          "[Removed Lines]",
          "7196:   bitwidth = hfinfo_bitwidth(hfinfo);",
          "",
          "[Added Lines]",
          "7197:   bitwidth = hfinfo_container_bitwidth(hfinfo);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7270:  header_field_info *hfinfo = fi->hfinfo;",
          "7276:  if (is_signed)",
          "7278:  else",
          "7282:  if (hfinfo->bitmask) {",
          "7283:   unshifted_value <<= hfinfo_bitshift(hfinfo);",
          "7284:  }",
          "",
          "[Removed Lines]",
          "7273:  bitwidth = hfinfo_bitwidth(hfinfo);",
          "7277:   unshifted_value = fvalue_get_sinteger(&fi->value);",
          "7279:   unshifted_value = fvalue_get_uinteger(&fi->value);",
          "7281:  value = unshifted_value;",
          "",
          "[Added Lines]",
          "7274:  bitwidth = hfinfo_container_bitwidth(hfinfo);",
          "7278:   value = fvalue_get_sinteger(&fi->value);",
          "7280:   value = fvalue_get_uinteger(&fi->value);",
          "7282:  unshifted_value = value;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7326:  header_field_info *hfinfo = fi->hfinfo;",
          "7332:  if (is_signed)",
          "7334:  else",
          "7338:  if (hfinfo->bitmask) {",
          "7340:  }",
          "",
          "[Removed Lines]",
          "7329:  bitwidth = hfinfo_bitwidth(hfinfo);",
          "7333:   unshifted_value = fvalue_get_sinteger64(&fi->value);",
          "7335:   unshifted_value = fvalue_get_uinteger64(&fi->value);",
          "7337:  value = unshifted_value;",
          "",
          "[Added Lines]",
          "7330:  bitwidth = hfinfo_container_bitwidth(hfinfo);",
          "7334:   value = fvalue_get_sinteger64(&fi->value);",
          "7336:   value = fvalue_get_uinteger64(&fi->value);",
          "7338:  unshifted_value = value;",
          "7340:   unshifted_value <<= hfinfo_bitshift(hfinfo);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "7459:  return ws_ctz(hfinfo->bitmask);",
          "7460: }",
          "7464: {",
          "7472:   case FT_UINT8:",
          "7473:   case FT_INT8:",
          "7474:    bitwidth = 8;",
          "",
          "[Removed Lines]",
          "7462: int",
          "7463: hfinfo_bitwidth(const header_field_info *hfinfo)",
          "7465:  int bitwidth = 0;",
          "7467:  if (!hfinfo->bitmask) {",
          "7468:   return 0;",
          "7469:  }",
          "7471:  switch (hfinfo->type) {",
          "",
          "[Added Lines]",
          "7463: static int",
          "7464: hfinfo_mask_bitwidth(const header_field_info *hfinfo)",
          "7466:     if (!hfinfo->bitmask) {",
          "7467:         return 0;",
          "7468:     }",
          "7471:     return ws_ilog2(hfinfo->bitmask) - ws_ctz(hfinfo->bitmask) + 1;",
          "7472: }",
          "7474: static int",
          "7475: hfinfo_type_bitwidth(enum ftenum type)",
          "7476: {",
          "7477:  int bitwidth = 0;",
          "7479:  switch (type) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "7501:   case FT_INT64:",
          "7502:    bitwidth = 64;",
          "7503:    break;",
          "7507:   default:",
          "7508:    DISSECTOR_ASSERT_NOT_REACHED();",
          "7509:    ;",
          "",
          "[Removed Lines]",
          "7504:   case FT_BOOLEAN:",
          "7506:    break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "7511:  return bitwidth;",
          "7512: }",
          "7514: static int",
          "7516: {",
          "7553:  }",
          "7555: }",
          "7557: static const char *",
          "",
          "[Removed Lines]",
          "7515: _hfinfo_type_hex_octet(int type)",
          "7517:  switch (type) {",
          "7518:   case FT_INT8:",
          "7519:   case FT_UINT8:",
          "7520:    return 2;",
          "7522:   case FT_UINT16:",
          "7523:   case FT_INT16:",
          "7524:    return 4;",
          "7526:   case FT_UINT24:",
          "7527:   case FT_INT24:",
          "7528:    return 6;",
          "7530:   case FT_UINT32:",
          "7531:   case FT_INT32:",
          "7532:    return 8;",
          "7534:   case FT_UINT40:",
          "7535:   case FT_INT40:",
          "7536:    return 10;",
          "7538:   case FT_UINT48:",
          "7539:   case FT_INT48:",
          "7540:    return 12;",
          "7542:   case FT_UINT56:",
          "7543:   case FT_INT56:",
          "7544:    return 14;",
          "7546:   case FT_UINT64:",
          "7547:   case FT_INT64:",
          "7548:    return 16;",
          "7550:   default:",
          "7551:    DISSECTOR_ASSERT_NOT_REACHED();",
          "7552:    ;",
          "7554:  return -1;",
          "",
          "[Added Lines]",
          "7521: hfinfo_container_bitwidth(const header_field_info *hfinfo)",
          "7523:  if (!hfinfo->bitmask) {",
          "7524:   return 0;",
          "7525:  }",
          "7527:  if (hfinfo->type == FT_BOOLEAN) {",
          "7529:  }",
          "7531:  return hfinfo_type_bitwidth(hfinfo->type);",
          "7532: }",
          "7534: static int",
          "7535: hfinfo_hex_digits(const header_field_info *hfinfo)",
          "7536: {",
          "7537:  int bitwidth;",
          "7543:  if (hfinfo->bitmask != 0) {",
          "7544:   bitwidth = hfinfo_mask_bitwidth(hfinfo);",
          "7545:  } else {",
          "7546:   bitwidth = hfinfo_type_bitwidth(hfinfo->type);",
          "7550:  return (bitwidth + 3) / 4;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "7569:   case BASE_DEC_HEX:",
          "7574:    ptr = isint ? int_to_str_back(ptr, (gint32) value) : uint_to_str_back(ptr, value);",
          "",
          "[Removed Lines]",
          "7571:    ptr = hex_to_str_back(ptr, _hfinfo_type_hex_octet(hfinfo->type), value);",
          "",
          "[Added Lines]",
          "7567:    ptr = hex_to_str_back(ptr, hfinfo_hex_digits(hfinfo), value);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "7578:    return oct_to_str_back(ptr, value);",
          "7580:   case BASE_HEX:",
          "7583:   case BASE_HEX_DEC:",
          "7585:    ptr = isint ? int_to_str_back(ptr, (gint32) value) : uint_to_str_back(ptr, value);",
          "7589:    return ptr;",
          "7591:   case BASE_PT_UDP:",
          "",
          "[Removed Lines]",
          "7581:    return hex_to_str_back(ptr, _hfinfo_type_hex_octet(hfinfo->type), value);",
          "7588:    ptr = hex_to_str_back(ptr, _hfinfo_type_hex_octet(hfinfo->type), value);",
          "",
          "[Added Lines]",
          "7577:    return hex_to_str_back(ptr, hfinfo_hex_digits(hfinfo), value);",
          "7584:    ptr = hex_to_str_back(ptr, hfinfo_hex_digits(hfinfo), value);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "7617:    case BASE_DEC_HEX:",
          "7622:     ptr = isint ? int64_to_str_back(ptr, (gint64) value) : uint64_to_str_back(ptr, value);",
          "",
          "[Removed Lines]",
          "7619:     ptr = hex64_to_str_back(ptr, _hfinfo_type_hex_octet(hfinfo->type), value);",
          "",
          "[Added Lines]",
          "7615:     ptr = hex64_to_str_back(ptr, hfinfo_hex_digits(hfinfo), value);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "7626:     return oct64_to_str_back(ptr, value);",
          "7628:    case BASE_HEX:",
          "7631:    case BASE_HEX_DEC:",
          "7633:     ptr = isint ? int64_to_str_back(ptr, (gint64) value) : uint64_to_str_back(ptr, value);",
          "7637:     return ptr;",
          "7639:    default:",
          "",
          "[Removed Lines]",
          "7629:     return hex64_to_str_back(ptr, _hfinfo_type_hex_octet(hfinfo->type), value);",
          "7636:     ptr = hex64_to_str_back(ptr, _hfinfo_type_hex_octet(hfinfo->type), value);",
          "",
          "[Added Lines]",
          "7625:     return hex64_to_str_back(ptr, hfinfo_hex_digits(hfinfo), value);",
          "7632:     ptr = hex64_to_str_back(ptr, hfinfo_hex_digits(hfinfo), value);",
          "",
          "---------------"
        ],
        "epan/proto.h||epan/proto.h": [
          "File: epan/proto.h -> epan/proto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2311: #define g_ptr_array_len(a)      ((a)?(a)->len:0)",
          "2312: #endif",
          "2320: WS_DLL_PUBLIC int",
          "2321: hfinfo_bitshift(const header_field_info *hfinfo);",
          "",
          "[Removed Lines]",
          "2315:  @param hfinfo header_field",
          "2317: extern int",
          "2318: hfinfo_bitwidth(const header_field_info *hfinfo);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "wsutil/bits_ctz.h||wsutil/bits_ctz.h": [
          "File: wsutil/bits_ctz.h -> wsutil/bits_ctz.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include <glib.h>",
          "28: #if defined(__GNUC__) && ((__GNUC__ > 3) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))",
          "29: static inline int",
          "30: ws_ctz(guint64 x)",
          "31: {",
          "32:  return __builtin_ctzll(x);",
          "33: }",
          "34: #else",
          "35: static inline int",
          "36: __ws_ctz32(guint32 x)",
          "37: {",
          "40:   0,   1, 28,  2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17,  4, 8,",
          "41:   31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18,  6, 11,  5, 10, 9",
          "42:  };",
          "",
          "[Removed Lines]",
          "39:  static const int table[32] = {",
          "",
          "[Added Lines]",
          "41: static inline int",
          "42: ws_ilog2(guint64 x)",
          "43: {",
          "44:  return 63 - __builtin_clzll(x);",
          "45: }",
          "53:  static const guint8 table[32] = {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:  else",
          "56:   return __ws_ctz32(lo);",
          "57: }",
          "58: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73: static inline int",
          "74: __ws_ilog2_32(guint32 x)",
          "75: {",
          "77:  static const guint8 table[32] = {",
          "78:   0,  9,  1, 10, 13, 21,  2, 29, 11, 14, 16, 18, 22, 25,  3, 30,",
          "79:   8, 12, 20, 28, 15, 17, 24,  7, 19, 27, 23,  6, 26,  5,  4, 31",
          "80:  };",
          "82:  x |= x >> 1;",
          "83:  x |= x >> 2;",
          "84:  x |= x >> 4;",
          "85:  x |= x >> 8;",
          "86:  x |= x >> 16;",
          "88:  return table[((guint32)(x * 0x07C4ACDDU)) >> 27];",
          "89: }",
          "91: static inline int",
          "92: ws_ilog2(guint64 x)",
          "93: {",
          "94:  guint32 hi = x >> 32;",
          "95:  guint32 lo = (guint32) x;",
          "97:  if (hi == 0)",
          "98:   return __ws_ilog2_32(lo);",
          "99:  else",
          "100:   return 32 + __ws_ilog2_32(hi);",
          "101: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}