{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5b05429bf0fa210fa8ac12ddff0d824b310da893",
      "candidate_info": {
        "commit_hash": "5b05429bf0fa210fa8ac12ddff0d824b310da893",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/5b05429bf0fa210fa8ac12ddff0d824b310da893",
        "files": [
          "src/node_extensions.h",
          "src/v8_typed_array.cc",
          "test/simple/test-typed-arrays.js"
        ],
        "message": "typed arrays: add Buffer -> TypedArray constructor\n\n- create a typed array from a node::Buffer object\n- update TypedArray::set() to spec\n- add TypedArray::get() method",
        "before_after_code_files": [
          "src/node_extensions.h||src/node_extensions.h",
          "src/v8_typed_array.cc||src/v8_typed_array.cc",
          "test/simple/test-typed-arrays.js||test/simple/test-typed-arrays.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_extensions.h||src/node_extensions.h": [
          "File: src/node_extensions.h -> src/node_extensions.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: NODE_EXT_LIST_START",
          "24: NODE_EXT_LIST_ITEM(node_buffer)",
          "25: #if HAVE_OPENSSL",
          "26: NODE_EXT_LIST_ITEM(node_crypto)",
          "27: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: NODE_EXT_LIST_ITEM(node_typed_array)",
          "",
          "---------------"
        ],
        "src/v8_typed_array.cc||src/v8_typed_array.cc": [
          "File: src/v8_typed_array.cc -> src/v8_typed_array.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include <v8.h>",
          "27: #include \"v8_typed_array.h\"",
          "29: namespace {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #include \"node_buffer.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "151:     v8::Local<v8::Signature> default_signature = v8::Signature::New(ft_cache);",
          "153:     static BatchedMethods methods[] = {",
          "154:       { \"set\", &TypedArray<TBytes, TEAType>::set },",
          "155:       { \"slice\", &TypedArray<TBytes, TEAType>::subarray },",
          "156:       { \"subarray\", &TypedArray<TBytes, TEAType>::subarray },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155:       { \"get\", &TypedArray<TBytes, TEAType>::get },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "183:     unsigned int length = 0;",
          "184:     unsigned int byte_offset = 0;",
          "187:       buffer = v8::Local<v8::Object>::Cast(args[0]);",
          "188:       unsigned int buflen =",
          "189:           buffer->GetIndexedPropertiesExternalArrayDataLength();",
          "192:         return ThrowRangeError(\"Byte offset out of range.\");",
          "195:       if (!checkAlignment(byte_offset, TBytes))",
          "196:         return ThrowRangeError(\"Byte offset is not aligned.\");",
          "",
          "[Removed Lines]",
          "186:     if (ArrayBuffer::HasInstance(args[0])) {  // ArrayBuffer constructor.",
          "191:       if (args[1]->Int32Value() < 0)",
          "193:       byte_offset = args[1]->Uint32Value();",
          "",
          "[Added Lines]",
          "189:     if (node::Buffer::HasInstance(args[0])",
          "190:         || ArrayBuffer::HasInstance(args[0])) {  // ArrayBuffer constructor.",
          "195:       if (!args[1]->IsUndefined() && args[1]->Int32Value() < 0)",
          "197:       byte_offset = args[1]->IsUndefined() ? 0 : args[1]->Uint32Value();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "214:       }",
          "218:       args.This()->SetIndexedPropertiesToExternalArrayData(",
          "219:           reinterpret_cast<char*>(buf) + byte_offset, TEAType, length);",
          "221:       v8::Local<v8::Object> obj = v8::Local<v8::Object>::Cast(args[0]);",
          "222:       length = obj->Get(v8::String::New(\"length\"))->Uint32Value();",
          "",
          "[Removed Lines]",
          "217:       void* buf = buffer->GetPointerFromInternalField(0);",
          "220:     } else if (args[0]->IsObject()) {  // TypedArray / type[] constructor.",
          "",
          "[Added Lines]",
          "221:       void* buf = buffer->GetIndexedPropertiesExternalArrayData();",
          "224:     }",
          "225:     else if (args[0]->IsObject()) {  // TypedArray / type[] constructor.",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "277:     return args.This();",
          "278:   }",
          "280:   static v8::Handle<v8::Value> set(const v8::Arguments& args) {",
          "281:     if (args.Length() < 1)",
          "282:       return ThrowError(\"Wrong number of arguments.\");",
          "342:       }",
          "343:     }",
          "",
          "[Removed Lines]",
          "284:     if (!args[0]->IsObject())",
          "285:       return ThrowTypeError(\"Type error.\");",
          "287:     v8::Handle<v8::Object> obj = v8::Handle<v8::Object>::Cast(args[0]);",
          "289:     if (TypedArray<TBytes, TEAType>::HasInstance(obj)) {  // ArrayBufferView.",
          "290:       v8::Handle<v8::Object> src_buffer = v8::Handle<v8::Object>::Cast(",
          "291:           obj->Get(v8::String::New(\"buffer\")));",
          "292:       v8::Handle<v8::Object> dst_buffer = v8::Handle<v8::Object>::Cast(",
          "293:           args.This()->Get(v8::String::New(\"buffer\")));",
          "295:       if (args[1]->Int32Value() < 0)",
          "296:         return ThrowRangeError(\"Offset may not be negative.\");",
          "298:       unsigned int offset = args[1]->Uint32Value();",
          "299:       unsigned int src_length =",
          "300:           obj->Get(v8::String::New(\"length\"))->Uint32Value();",
          "301:       unsigned int dst_length =",
          "302:           args.This()->Get(v8::String::New(\"length\"))->Uint32Value();",
          "303:       if (offset > dst_length)",
          "304:         return ThrowRangeError(\"Offset out of range.\");",
          "306:       if (src_length > dst_length - offset)",
          "307:         return ThrowRangeError(\"Offset/length out of range.\");",
          "312:       void* src_ptr = obj->GetIndexedPropertiesExternalArrayData();",
          "313:       void* dst_ptr = args.This()->GetIndexedPropertiesExternalArrayData();",
          "321:       memmove(reinterpret_cast<char*>(dst_ptr) + offset * TBytes,",
          "322:               src_ptr, src_length * TBytes);",
          "323:     } else {  // type[]",
          "324:       if (args[1]->Int32Value() < 0)",
          "325:         return ThrowRangeError(\"Offset may not be negative.\");",
          "327:       unsigned int src_length =",
          "328:           obj->Get(v8::String::New(\"length\"))->Uint32Value();",
          "329:       unsigned int dst_length =",
          "330:           args.This()->Get(v8::String::New(\"length\"))->Uint32Value();",
          "331:       unsigned int offset = args[1]->Uint32Value();",
          "333:       if (offset > dst_length)",
          "334:         return ThrowRangeError(\"Offset out of range.\");",
          "336:       if (src_length > dst_length - offset)",
          "337:         return ThrowRangeError(\"Offset/length out of range.\");",
          "339:       for (uint32_t i = 0; i < src_length; ++i) {",
          "341:         args.This()->Set(i + offset, obj->Get(i));",
          "",
          "[Added Lines]",
          "285:   static v8::Handle<v8::Value> get(const v8::Arguments& args) {",
          "286:     if (args.Length() < 1)",
          "287:       return ThrowError(\"Wrong number of arguments.\");",
          "289:     if (args[0]->IsNumber()) {",
          "290:       unsigned int index = args[0]->Uint32Value();",
          "291:       void* ptr = args.This()->GetIndexedPropertiesExternalArrayData();",
          "293:       if (TEAType == v8::kExternalByteArray)",
          "294:         return v8::Integer::New(reinterpret_cast<char*>(ptr)[index]);",
          "295:       else if (TEAType == v8::kExternalUnsignedByteArray)",
          "296:         return v8::Integer::New(reinterpret_cast<unsigned char*>(ptr)[index]);",
          "297:       else if (TEAType == v8::kExternalShortArray)",
          "298:         return v8::Integer::New(reinterpret_cast<short*>(ptr)[index]);",
          "299:       else if (TEAType == v8::kExternalUnsignedShortArray)",
          "300:         return v8::Integer::New(reinterpret_cast<unsigned short*>(ptr)[index]);",
          "301:       else if (TEAType == v8::kExternalIntArray)",
          "302:         return v8::Integer::New(reinterpret_cast<int*>(ptr)[index]);",
          "303:       else if (TEAType == v8::kExternalUnsignedIntArray)",
          "304:         return v8::Integer::New(reinterpret_cast<unsigned int*>(ptr)[index]);",
          "305:       else if (TEAType == v8::kExternalFloatArray)",
          "306:         return v8::Number::New(reinterpret_cast<float*>(ptr)[index]);",
          "307:       else if (TEAType == v8::kExternalDoubleArray)",
          "308:         return v8::Number::New(reinterpret_cast<double*>(ptr)[index]);",
          "309:     }",
          "310:     return v8::Undefined();",
          "311:   }",
          "320:     if (args[0]->IsNumber()) {",
          "322:       unsigned int index = args[0]->Uint32Value();",
          "323:       void* ptr = args.This()->GetIndexedPropertiesExternalArrayData();",
          "324:       if (TEAType == v8::kExternalByteArray)",
          "325:         reinterpret_cast<char*>(ptr)[index] = (char) args[1]->Int32Value();",
          "326:       else if (TEAType == v8::kExternalUnsignedByteArray)",
          "327:         reinterpret_cast<unsigned char*>(ptr)[index] =",
          "328:             (unsigned char) args[1]->Int32Value();",
          "329:       else if (TEAType == v8::kExternalShortArray)",
          "330:         reinterpret_cast<short*>(ptr)[index] = (short) args[1]->Int32Value();",
          "331:       else if (TEAType == v8::kExternalUnsignedShortArray)",
          "332:         reinterpret_cast<unsigned short*>(ptr)[index] =",
          "333:             (unsigned short) args[1]->Int32Value();",
          "334:       else if (TEAType == v8::kExternalIntArray)",
          "335:         reinterpret_cast<int*>(ptr)[index] = (int) args[1]->Int32Value();",
          "336:       else if (TEAType == v8::kExternalUnsignedIntArray)",
          "337:         reinterpret_cast<unsigned int*>(ptr)[index] =",
          "338:             (unsigned int) args[1]->Int32Value();",
          "339:       else if (TEAType == v8::kExternalFloatArray)",
          "340:         reinterpret_cast<float*>(ptr)[index] = (float) args[1]->NumberValue();",
          "341:       else if (TEAType == v8::kExternalDoubleArray)",
          "342:         reinterpret_cast<double*>(ptr)[index] = (double) args[1]->NumberValue();",
          "343:     } else if (args[0]->IsObject()) {",
          "344:       v8::Handle<v8::Object> obj = v8::Handle<v8::Object>::Cast(args[0]);",
          "346:       if (TypedArray<TBytes, TEAType>::HasInstance(obj)) {  // ArrayBufferView.",
          "347:         v8::Handle<v8::Object> src_buffer = v8::Handle<v8::Object>::Cast(",
          "348:             obj->Get(v8::String::New(\"buffer\")));",
          "349:         v8::Handle<v8::Object> dst_buffer = v8::Handle<v8::Object>::Cast(",
          "350:             args.This()->Get(v8::String::New(\"buffer\")));",
          "352:         if (args[1]->Int32Value() < 0)",
          "353:           return ThrowRangeError(\"Offset may not be negative.\");",
          "355:         unsigned int offset = args[1]->Uint32Value();",
          "356:         unsigned int src_length =",
          "357:             obj->Get(v8::String::New(\"length\"))->Uint32Value();",
          "358:         unsigned int dst_length =",
          "359:             args.This()->Get(v8::String::New(\"length\"))->Uint32Value();",
          "360:         if (offset > dst_length)",
          "361:           return ThrowRangeError(\"Offset out of range.\");",
          "363:         if (src_length > dst_length - offset)",
          "364:           return ThrowRangeError(\"Offset/length out of range.\");",
          "369:         void* src_ptr = obj->GetIndexedPropertiesExternalArrayData();",
          "370:         void* dst_ptr = args.This()->GetIndexedPropertiesExternalArrayData();",
          "378:         memmove(reinterpret_cast<char*>(dst_ptr) + offset * TBytes, src_ptr,",
          "379:             src_length * TBytes);",
          "380:       } else {  // type[]",
          "381:         if (args[1]->Int32Value() < 0)",
          "382:           return ThrowRangeError(\"Offset may not be negative.\");",
          "384:         unsigned int src_length =",
          "385:             obj->Get(v8::String::New(\"length\"))->Uint32Value();",
          "386:         unsigned int dst_length =",
          "387:             args.This()->Get(v8::String::New(\"length\"))->Uint32Value();",
          "388:         unsigned int offset = args[1]->Uint32Value();",
          "390:         if (offset > dst_length)",
          "391:           return ThrowRangeError(\"Offset out of range.\");",
          "393:         if (src_length > dst_length - offset)",
          "394:           return ThrowRangeError(\"Offset/length out of range.\");",
          "396:         for (uint32_t i = 0; i < src_length; ++i) {",
          "398:           args.This()->Set(i + offset, obj->Get(i));",
          "399:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "546:     unsigned int byte_length =",
          "547:         buffer->GetIndexedPropertiesExternalArrayDataLength();",
          "550:     if (args[1]->Int32Value() < 0 || byte_offset >= byte_length)",
          "551:       return ThrowRangeError(\"byteOffset out of range.\");",
          "",
          "[Removed Lines]",
          "548:     unsigned int byte_offset = args[1]->Uint32Value();",
          "",
          "[Added Lines]",
          "606:     unsigned int byte_offset =",
          "607:         args[1]->IsUndefined() ? 0 : args[1]->Uint32Value();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "724: namespace v8_typed_array {",
          "726: void AttachBindings(v8::Handle<v8::Object> obj) {",
          "727:   obj->Set(v8::String::New(\"ArrayBuffer\"),",
          "728:            ArrayBuffer::GetTemplate()->GetFunction());",
          "729:   obj->Set(v8::String::New(\"Int8Array\"),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "786:   v8::HandleScope scope;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "766: }",
          "768: }  // namespace v8_typed_array",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "831: NODE_MODULE(node_typed_array, v8_typed_array::AttachBindings)",
          "",
          "---------------"
        ],
        "test/simple/test-typed-arrays.js||test/simple/test-typed-arrays.js": [
          "File: test/simple/test-typed-arrays.js -> test/simple/test-typed-arrays.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: var assert = require('assert');",
          "29: var SlowBuffer = process.binding('buffer').SlowBuffer;",
          "30: var ArrayBuffer = process.binding('typed_array').ArrayBuffer;",
          "31: var Int32Array = process.binding('typed_array').Int32Array;",
          "32: var Int16Array = process.binding('typed_array').Int16Array;",
          "33: var Uint8Array = process.binding('typed_array').Uint8Array;",
          "35: function test(clazz) {",
          "36:   var size = clazz.length;",
          "37:   var b = clazz;",
          "41:   var v1 = new Int32Array(b);",
          "42:   assert(4, v1.BYTES_PER_ELEMENT);",
          "46:   var v2 = new Uint8Array(b, 2);",
          "47:   assert(1, v1.BYTES_PER_ELEMENT);",
          "51:   var v3 = new Int16Array(b, 2, 2);",
          "52:   assert(2, v1.BYTES_PER_ELEMENT);",
          "62:   v1[0] = 0x1234;",
          "63:   v1[1] = 0x5678;",
          "65:   assert(0x1234, v1[0]);",
          "66:   assert(0x5678, v1[1]);",
          "68:   assert(0x3, v2[0]);",
          "69:   assert(0x4, v2[1]);",
          "70:   assert(0x5, v2[2]);",
          "71:   assert(0x6, v2[3]);",
          "72:   assert(0x7, v2[4]);",
          "73:   assert(0x8, v2[5]);",
          "75:   assert(0x34, v3[0]);",
          "76:   assert(0x56, v3[1]);",
          "79:   v2.set(1, 0x8);",
          "80:   v2.set(2, 0xF);",
          "81:   assert(0x8, v2.get(1));",
          "82:   assert(0xF, v2.get(2));",
          "83:   assert(0x38, v3.get(0));",
          "84:   assert(0xF6, v3.get(1));",
          "87:   var v4 = v1.subarray(1);",
          "88:   assert(Int32Array, typeof v4);",
          "89:   assert(0xF678, v4[0]);",
          "92:   v2.set([ 1, 2, 3, 4 ], 2);",
          "93:   assert(0x1234, v1[0]);",
          "95:   var sub = new Int32Array(4);",
          "96:   sub[0] = 0xabcd;",
          "97:   v2.set(sub, 1);",
          "98:   assert(0x3a, v3[0]);",
          "99:   assert(0xbc, v3[1]);",
          "100: }",
          "103: var size = 8;",
          "104: var ab = new ArrayBuffer(size);",
          "105: assert.equal(size, ab.byteLength);",
          "106: test(ab);",
          "109: var buffer = new Buffer(size);",
          "110: test(buffer);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "39484f49ef60e2ebf05ad70838d9572e56558347",
      "candidate_info": {
        "commit_hash": "39484f49ef60e2ebf05ad70838d9572e56558347",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/39484f49ef60e2ebf05ad70838d9572e56558347",
        "files": [
          "test/simple/test-tls-client-abort.js",
          "test/simple/test-tls-client-resume.js",
          "test/simple/test-tls-client-verify.js",
          "test/simple/test-tls-connect-simple.js",
          "test/simple/test-tls-connect.js",
          "test/simple/test-tls-npn-server-client.js",
          "test/simple/test-tls-passphrase.js",
          "test/simple/test-tls-pause-close.js",
          "test/simple/test-tls-pause.js",
          "test/simple/test-tls-peer-certificate.js",
          "test/simple/test-tls-remote.js",
          "test/simple/test-tls-request-timeout.js",
          "test/simple/test-tls-set-encoding.js",
          "test/simple/test-tls-sni-server-client.js"
        ],
        "message": "test tls: make tests use new `tls.connect` API\n\nRefs #1983.",
        "before_after_code_files": [
          "test/simple/test-tls-client-abort.js||test/simple/test-tls-client-abort.js",
          "test/simple/test-tls-client-resume.js||test/simple/test-tls-client-resume.js",
          "test/simple/test-tls-client-verify.js||test/simple/test-tls-client-verify.js",
          "test/simple/test-tls-connect-simple.js||test/simple/test-tls-connect-simple.js",
          "test/simple/test-tls-connect.js||test/simple/test-tls-connect.js",
          "test/simple/test-tls-npn-server-client.js||test/simple/test-tls-npn-server-client.js",
          "test/simple/test-tls-passphrase.js||test/simple/test-tls-passphrase.js",
          "test/simple/test-tls-pause-close.js||test/simple/test-tls-pause-close.js",
          "test/simple/test-tls-pause.js||test/simple/test-tls-pause.js",
          "test/simple/test-tls-peer-certificate.js||test/simple/test-tls-peer-certificate.js",
          "test/simple/test-tls-remote.js||test/simple/test-tls-remote.js",
          "test/simple/test-tls-request-timeout.js||test/simple/test-tls-request-timeout.js",
          "test/simple/test-tls-set-encoding.js||test/simple/test-tls-set-encoding.js",
          "test/simple/test-tls-sni-server-client.js||test/simple/test-tls-sni-server-client.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-tls-client-abort.js||test/simple/test-tls-client-abort.js": [
          "File: test/simple/test-tls-client-abort.js -> test/simple/test-tls-client-abort.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: var cert = fs.readFileSync(path.join(common.fixturesDir, 'test_cert.pem'));",
          "34: var key = fs.readFileSync(path.join(common.fixturesDir, 'test_key.pem'));",
          "37:   assert.ok(false); // callback should never be executed",
          "38: });",
          "39: conn.on('error', function() {",
          "",
          "[Removed Lines]",
          "36: var conn = tls.connect(common.PORT, {cert: cert, key: key}, function() {",
          "",
          "[Added Lines]",
          "36: var conn = tls.connect({cert: cert, key: key, port: common.PORT}, function() {",
          "",
          "---------------"
        ],
        "test/simple/test-tls-client-resume.js||test/simple/test-tls-client-resume.js": [
          "File: test/simple/test-tls-client-resume.js -> test/simple/test-tls-client-resume.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: server.listen(common.PORT, function() {",
          "52:   var session1 = null;",
          "54:     console.log('connect1');",
          "55:     assert.ok(!client1.isSessionReused(), 'Session *should not* be reused.');",
          "56:     session1 = client1.getSession();",
          "",
          "[Removed Lines]",
          "53:   var client1 = tls.connect(common.PORT, function() {",
          "",
          "[Added Lines]",
          "53:   var client1 = tls.connect({port: common.PORT}, function() {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:   client1.on('close', function() {",
          "60:     console.log('close1');",
          "63:       console.log('connect2');",
          "64:       assert.ok(client2.isSessionReused(), 'Session *should* be reused.');",
          "65:     });",
          "",
          "[Removed Lines]",
          "62:     var client2 = tls.connect(common.PORT, {'session': session1}, function() {",
          "",
          "[Added Lines]",
          "62:     var client2 = tls.connect({'session': session1, port: common.PORT}, function() {",
          "",
          "---------------"
        ],
        "test/simple/test-tls-client-verify.js||test/simple/test-tls-client-verify.js": [
          "File: test/simple/test-tls-client-verify.js -> test/simple/test-tls-client-verify.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:     var b = '';",
          "102:     console.error('connecting...');",
          "105:       console.error('expected: ' + ok + ' authed: ' + client.authorized);",
          "",
          "[Removed Lines]",
          "103:     var client = tls.connect(common.PORT, clientOptions, function() {",
          "",
          "[Added Lines]",
          "103:     var client = tls.connect(clientOptions, function() {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128:   if (!tcase) return;",
          "130:   var clientOptions = {",
          "131:     ca: tcase.ca.map(loadPEM),",
          "132:     key: loadPEM(tcase.key),",
          "133:     cert: loadPEM(tcase.cert)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131:     port: common.PORT,",
          "",
          "---------------"
        ],
        "test/simple/test-tls-connect-simple.js||test/simple/test-tls-connect-simple.js": [
          "File: test/simple/test-tls-connect-simple.js -> test/simple/test-tls-connect-simple.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: });",
          "41: server.listen(common.PORT, function() {",
          "43:     ++clientConnected;",
          "44:     client1.end();",
          "45:   });",
          "48:   client2.on('secureConnect', function() {",
          "49:     ++clientConnected;",
          "50:     client2.end();",
          "",
          "[Removed Lines]",
          "42:   var client1 = tls.connect(common.PORT, function() {",
          "47:   var client2 = tls.connect(common.PORT);",
          "",
          "[Added Lines]",
          "42:   var client1 = tls.connect({port: common.PORT}, function() {",
          "47:   var client2 = tls.connect({port: common.PORT});",
          "",
          "---------------"
        ],
        "test/simple/test-tls-connect.js||test/simple/test-tls-connect.js": [
          "File: test/simple/test-tls-connect.js -> test/simple/test-tls-connect.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:     assert.ok(errorEmitted);",
          "43:   });",
          "46:     assert.ok(false); // callback should never be executed",
          "47:   });",
          "",
          "[Removed Lines]",
          "45:   var conn = tls.connect(common.PORT, {cert: cert, key: key}, function() {",
          "",
          "[Added Lines]",
          "45:   var conn = tls.connect({cert: cert, key: key, port: common.PORT}, function() {",
          "",
          "---------------"
        ],
        "test/simple/test-tls-npn-server-client.js||test/simple/test-tls-npn-server-client.js": [
          "File: test/simple/test-tls-npn-server-client.js -> test/simple/test-tls-npn-server-client.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:   NPNProtocols: ['a', 'b', 'c']",
          "46: };",
          "48: var clientsOptions = [{",
          "49:   key: serverOptions.key,",
          "50:   cert: serverOptions.cert,",
          "51:   crl: serverOptions.crl,",
          "52:   NPNProtocols: ['a', 'b', 'c']",
          "53: },{",
          "54:   key: serverOptions.key,",
          "55:   cert: serverOptions.cert,",
          "56:   crl: serverOptions.crl,",
          "57:   NPNProtocols: ['c', 'b', 'e']",
          "58: },{",
          "59:   key: serverOptions.key,",
          "60:   cert: serverOptions.cert,",
          "61:   crl: serverOptions.crl,",
          "62:   NPNProtocols: ['first-priority-unsupported', 'x', 'y']",
          "63: }];",
          "67: var serverResults = [],",
          "68:     clientsResults = [];",
          "",
          "[Removed Lines]",
          "65: var serverPort = common.PORT;",
          "",
          "[Added Lines]",
          "48: var serverPort = common.PORT;",
          "51:   port: serverPort,",
          "57:   port: serverPort,",
          "63:   port: serverPort,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75: function startTest() {",
          "76:   function connectClient(options, callback) {",
          "78:       clientsResults.push(client.npnProtocol);",
          "79:       client.destroy();",
          "",
          "[Removed Lines]",
          "77:     var client = tls.connect(serverPort, 'localhost', options, function() {",
          "",
          "[Added Lines]",
          "80:     var client = tls.connect(options, function() {",
          "",
          "---------------"
        ],
        "test/simple/test-tls-passphrase.js||test/simple/test-tls-passphrase.js": [
          "File: test/simple/test-tls-passphrase.js -> test/simple/test-tls-passphrase.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: var connectCount = 0;",
          "48: server.listen(common.PORT, function() {",
          "50:     key: key,",
          "51:     passphrase: 'passphrase',",
          "52:     cert: cert",
          "",
          "[Removed Lines]",
          "49:   var c = tls.connect(common.PORT, {",
          "",
          "[Added Lines]",
          "49:   var c = tls.connect({",
          "50:     port: common.PORT,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59: });",
          "61: assert.throws(function() {",
          "63:     key: key,",
          "64:     passphrase: 'invalid',",
          "65:     cert: cert",
          "",
          "[Removed Lines]",
          "62:   tls.connect(common.PORT, {",
          "",
          "[Added Lines]",
          "63:   tls.connect({",
          "64:     port: common.PORT,",
          "",
          "---------------"
        ],
        "test/simple/test-tls-pause-close.js||test/simple/test-tls-pause-close.js": [
          "File: test/simple/test-tls-pause-close.js -> test/simple/test-tls-pause-close.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: });",
          "68: server.listen(common.PORT, function() {",
          "70:     console.log('client connected');",
          "71:     c.socket.on('end', function() {",
          "72:       console.log('client socket ended');",
          "",
          "[Removed Lines]",
          "69:   var c = tls.connect(common.PORT, function() {",
          "",
          "[Added Lines]",
          "69:   var c = tls.connect({port: common.PORT}, function() {",
          "",
          "---------------"
        ],
        "test/simple/test-tls-pause.js||test/simple/test-tls-pause.js": [
          "File: test/simple/test-tls-pause.js -> test/simple/test-tls-pause.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: server.listen(common.PORT, function() {",
          "47:   var resumed = false;",
          "49:     client.pause();",
          "50:     common.debug('paused');",
          "51:     send();",
          "",
          "[Removed Lines]",
          "48:   var client = tls.connect(common.PORT, function() {",
          "",
          "[Added Lines]",
          "48:   var client = tls.connect({port: common.PORT}, function() {",
          "",
          "---------------"
        ],
        "test/simple/test-tls-peer-certificate.js||test/simple/test-tls-peer-certificate.js": [
          "File: test/simple/test-tls-peer-certificate.js -> test/simple/test-tls-peer-certificate.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:   cleartext.end('World');",
          "43: });",
          "44: server.listen(common.PORT, function() {",
          "46:     var peerCert = socket.getPeerCertificate();",
          "47:     common.debug(util.inspect(peerCert));",
          "48:     assert.equal(peerCert.subject.subjectAltName,",
          "",
          "[Removed Lines]",
          "45:   var socket = tls.connect(common.PORT, function() {",
          "",
          "[Added Lines]",
          "45:   var socket = tls.connect({port: common.PORT}, function() {",
          "",
          "---------------"
        ],
        "test/simple/test-tls-remote.js||test/simple/test-tls-remote.js": [
          "File: test/simple/test-tls-remote.js -> test/simple/test-tls-remote.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:   assert.equal(server.address().address, '127.0.0.1');",
          "49:   assert.equal(server.address().port, common.PORT);",
          "52:     assert.equal(c.address().address, c.socket.address().address);",
          "53:     assert.equal(c.address().port, c.socket.address().port);",
          "",
          "[Removed Lines]",
          "51:   var c = tls.connect(common.PORT, '127.0.0.1', function() {",
          "",
          "[Added Lines]",
          "51:   var c = tls.connect({port: common.PORT, host: '127.0.0.1'}, function() {",
          "",
          "---------------"
        ],
        "test/simple/test-tls-request-timeout.js||test/simple/test-tls-request-timeout.js": [
          "File: test/simple/test-tls-request-timeout.js -> test/simple/test-tls-request-timeout.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: });",
          "44: server.listen(common.PORT, function() {",
          "46: });",
          "48: process.on('exit', function() {",
          "",
          "[Removed Lines]",
          "45:   var socket = tls.connect(common.PORT);",
          "",
          "[Added Lines]",
          "45:   var socket = tls.connect({port: common.PORT});",
          "",
          "---------------"
        ],
        "test/simple/test-tls-set-encoding.js||test/simple/test-tls-set-encoding.js": [
          "File: test/simple/test-tls-set-encoding.js -> test/simple/test-tls-set-encoding.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: server.listen(common.PORT, function() {",
          "46:   var buffer = '';",
          "",
          "[Removed Lines]",
          "44:   var client = tls.connect(common.PORT);",
          "",
          "[Added Lines]",
          "44:   var client = tls.connect({port: common.PORT});",
          "",
          "---------------"
        ],
        "test/simple/test-tls-sni-server-client.js||test/simple/test-tls-sni-server-client.js": [
          "File: test/simple/test-tls-sni-server-client.js -> test/simple/test-tls-sni-server-client.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:   }",
          "58: };",
          "61: var clientsOptions = [{",
          "62:   key: loadPEM('agent1-key'),",
          "63:   cert: loadPEM('agent1-cert'),",
          "64:   ca: [loadPEM('ca1-cert')],",
          "65:   servername: 'a.example.com'",
          "66: },{",
          "67:   key: loadPEM('agent2-key'),",
          "68:   cert: loadPEM('agent2-cert'),",
          "69:   ca: [loadPEM('ca2-cert')],",
          "70:   servername: 'b.test.com'",
          "71: },{",
          "72:   key: loadPEM('agent3-key'),",
          "73:   cert: loadPEM('agent3-cert'),",
          "74:   ca: [loadPEM('ca1-cert')],",
          "75:   servername: 'c.wrong.com'",
          "76: }];",
          "80: var serverResults = [],",
          "81:     clientResults = [];",
          "",
          "[Removed Lines]",
          "78: var serverPort = common.PORT;",
          "",
          "[Added Lines]",
          "60: var serverPort = common.PORT;",
          "63:   port: serverPort,",
          "69:   port: serverPort,",
          "75:   port: serverPort,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92: function startTest() {",
          "93:   function connectClient(options, callback) {",
          "95:       clientResults.push(client.authorized);",
          "96:       client.destroy();",
          "",
          "[Removed Lines]",
          "94:     var client = tls.connect(serverPort, 'localhost', options, function() {",
          "",
          "[Added Lines]",
          "96:     var client = tls.connect(options, function() {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "892056bf97842b1bfe6a2e328df67d5a0043b79e",
      "candidate_info": {
        "commit_hash": "892056bf97842b1bfe6a2e328df67d5a0043b79e",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/892056bf97842b1bfe6a2e328df67d5a0043b79e",
        "files": [
          "test/common.js",
          "test/simple/test-child-process-double-pipe.js",
          "test/simple/test-executable-path.js",
          "test/simple/test-http-1.0.js",
          "test/simple/test-path-makelong.js",
          "test/simple/test-repl-tab-complete.js",
          "test/simple/test-script-context.js",
          "test/simple/test-stdin-child-proc.js"
        ],
        "message": "tests: fix more lint issues",
        "before_after_code_files": [
          "test/common.js||test/common.js",
          "test/simple/test-child-process-double-pipe.js||test/simple/test-child-process-double-pipe.js",
          "test/simple/test-executable-path.js||test/simple/test-executable-path.js",
          "test/simple/test-http-1.0.js||test/simple/test-http-1.0.js",
          "test/simple/test-path-makelong.js||test/simple/test-path-makelong.js",
          "test/simple/test-repl-tab-complete.js||test/simple/test-repl-tab-complete.js",
          "test/simple/test-script-context.js||test/simple/test-script-context.js",
          "test/simple/test-stdin-child-proc.js||test/simple/test-stdin-child-proc.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/common.js||test/common.js": [
          "File: test/common.js -> test/common.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: exports.ddCommand = function(filename, kilobytes) {",
          "56:   if (process.platform == 'win32') {",
          "57:     return '\"' + process.argv[0] + '\" \"' + path.resolve(exports.fixturesDir,",
          "59:   } else {",
          "60:     return 'dd if=/dev/zero of=\"' + filename + '\" bs=1024 count=' + kilobytes;",
          "61:   }",
          "",
          "[Removed Lines]",
          "58:       'create-file.js') + '\" \"' + filename + '\" ' + (kilobytes * 1024);",
          "",
          "[Added Lines]",
          "58:            'create-file.js') + '\" \"' + filename + '\" ' + (kilobytes * 1024);",
          "",
          "---------------"
        ],
        "test/simple/test-child-process-double-pipe.js||test/simple/test-child-process-double-pipe.js": [
          "File: test/simple/test-child-process-double-pipe.js -> test/simple/test-child-process-double-pipe.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "31: var echo = is_windows ? spawn('cmd.exe', ['/c', 'echo', 'hello&&', 'echo',",
          "32:              'node&&', 'echo', 'and&&', 'echo', 'world']) :",
          "33:            spawn('echo', ['hello\\nnode\\nand\\nworld\\n']),",
          "34:     grep = spawn('grep', ['o']),",
          "35:     sed = spawn('sed', ['s/o/O/']);",
          "",
          "[Added Lines]",
          "31: var grep = spawn('grep', ['o']),",
          "32:     sed = spawn('sed', ['s/o/O/']),",
          "33:     echo;",
          "35: if (is_windows) {",
          "36:   echo = spawn('cmd.exe', ['/c', 'echo', 'hello&&', 'echo',",
          "37:                'node&&', 'echo', 'and&&', 'echo', 'world']);",
          "38: } else {",
          "39:   echo = spawn('echo', ['hello\\nnode\\nand\\nworld\\n']);",
          "40: }",
          "",
          "---------------"
        ],
        "test/simple/test-executable-path.js||test/simple/test-executable-path.js": [
          "File: test/simple/test-executable-path.js -> test/simple/test-executable-path.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: var isDebug = process.features.debug;",
          "38: console.error('debugPaths: ' + debugPaths);",
          "39: console.error('defaultPaths: ' + defaultPaths);",
          "",
          "[Removed Lines]",
          "29: var debugPaths = [ path.normalize(path.join(__dirname, '..', '..',",
          "30:                                          'out', 'Debug', 'node')),",
          "31:                    path.normalize(path.join(__dirname, '..', '..',",
          "32:                                          'Debug', 'node'))];",
          "33: var defaultPaths = [ path.normalize(path.join(__dirname, '..', '..',",
          "34:                                            'out', 'Release', 'node')),",
          "35:                      path.normalize(path.join(__dirname, '..', '..',",
          "36:                                            'Release', 'node'))];",
          "",
          "[Added Lines]",
          "29: var debugPaths = [path.normalize(path.join(__dirname, '..', '..',",
          "30:                                            'out', 'Debug', 'node')),",
          "31:                   path.normalize(path.join(__dirname, '..', '..',",
          "32:                                            'Debug', 'node'))];",
          "33: var defaultPaths = [path.normalize(path.join(__dirname, '..', '..',",
          "34:                                              'out', 'Release', 'node')),",
          "35:                     path.normalize(path.join(__dirname, '..', '..',",
          "36:                                              'Release', 'node'))];",
          "",
          "---------------"
        ],
        "test/simple/test-http-1.0.js||test/simple/test-http-1.0.js": [
          "File: test/simple/test-http-1.0.js -> test/simple/test-http-1.0.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:   function request_generator() {",
          "114:     return ('GET / HTTP/1.0\\r\\n' +",
          "116:         'Host: 127.0.0.1:1337\\r\\n' +",
          "117:         'Accept: */*\\r\\n' +",
          "118:         '\\r\\n');",
          "",
          "[Removed Lines]",
          "115:         'User-Agent: curl/7.19.7 (x86_64-pc-linux-gnu) libcurl/7.19.7 OpenSSL/0.9.8k zlib/1.2.3.3 libidn/1.15\\r\\n' +",
          "",
          "[Added Lines]",
          "115:         'User-Agent: curl/7.19.7 (x86_64-pc-linux-gnu) libcurl/7.19.7 ' +",
          "116:         'OpenSSL/0.9.8k zlib/1.2.3.3 libidn/1.15\\r\\n' +",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "148:   function request_generator() {",
          "149:     return ('GET / HTTP/1.1\\r\\n' +",
          "151:         'Connection: close\\r\\n' +",
          "152:         'Host: 127.0.0.1:1337\\r\\n' +",
          "153:         'Accept: */*\\r\\n' +",
          "",
          "[Removed Lines]",
          "150:         'User-Agent: curl/7.19.7 (x86_64-pc-linux-gnu) libcurl/7.19.7 OpenSSL/0.9.8k zlib/1.2.3.3 libidn/1.15\\r\\n' +",
          "",
          "[Added Lines]",
          "151:         'User-Agent: curl/7.19.7 (x86_64-pc-linux-gnu) libcurl/7.19.7 ' +",
          "152:         'OpenSSL/0.9.8k zlib/1.2.3.3 libidn/1.15\\r\\n' +",
          "",
          "---------------"
        ],
        "test/simple/test-path-makelong.js||test/simple/test-path-makelong.js": [
          "File: test/simple/test-path-makelong.js -> test/simple/test-path-makelong.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:   var file = path.join(common.fixturesDir, 'a.js');",
          "28:   var resolvedFile = path.resolve(file);",
          "31:   assert.equal('\\\\\\\\?\\\\' + resolvedFile, path._makeLong(file));",
          "32:   assert.equal('\\\\\\\\?\\\\' + resolvedFile, path._makeLong('\\\\\\\\?\\\\' + file));",
          "33:   assert.equal('\\\\\\\\?\\\\UNC\\\\someserver\\\\someshare\\\\somefile',",
          "35:   assert.equal('\\\\\\\\?\\\\UNC\\\\someserver\\\\someshare\\\\somefile',",
          "38: }",
          "",
          "[Removed Lines]",
          "29:   var networkFile = '\\\\\\\\someserver\\\\someshare\\\\somefile';",
          "34:     path._makeLong('\\\\\\\\someserver\\\\someshare\\\\somefile'));",
          "36:     path._makeLong('\\\\\\\\?\\\\UNC\\\\someserver\\\\someshare\\\\somefile'));",
          "37:   assert.equal('\\\\\\\\.\\\\pipe\\\\somepipe', path._makeLong('\\\\\\\\.\\\\pipe\\\\somepipe'));",
          "",
          "[Added Lines]",
          "33:                path._makeLong('\\\\\\\\someserver\\\\someshare\\\\somefile'));",
          "35:                path._makeLong('\\\\\\\\?\\\\UNC\\\\someserver\\\\someshare\\\\somefile'));",
          "36:   assert.equal('\\\\\\\\.\\\\pipe\\\\somepipe',",
          "37:                path._makeLong('\\\\\\\\.\\\\pipe\\\\somepipe'));",
          "",
          "---------------"
        ],
        "test/simple/test-repl-tab-complete.js||test/simple/test-repl-tab-complete.js": [
          "File: test/simple/test-repl-tab-complete.js -> test/simple/test-repl-tab-complete.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: function ArrayStream() {",
          "30:     var self = this;",
          "32:       self.emit('data', line);",
          "33:     });",
          "34:   }",
          "",
          "[Removed Lines]",
          "29:   this.run = function (data) {",
          "31:     data.forEach(function (line) {",
          "",
          "[Added Lines]",
          "29:   this.run = function(data) {",
          "31:     data.forEach(function(line) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: util.inherits(ArrayStream, require('stream').Stream);",
          "37: ArrayStream.prototype.readable = true;",
          "38: ArrayStream.prototype.writable = true;",
          "45: var putIn = new ArrayStream();",
          "46: var testMe = repl.start('', putIn);",
          "",
          "[Removed Lines]",
          "39: ArrayStream.prototype.resume = function () {};",
          "40: ArrayStream.prototype.write = function () {};",
          "42: var works = [ [ 'inner.one' ], 'inner.o' ];",
          "43: var doesNotBreak = [ [], 'inner.o' ];",
          "",
          "[Added Lines]",
          "39: ArrayStream.prototype.resume = function() {};",
          "40: ArrayStream.prototype.write = function() {};",
          "42: var works = [['inner.one'], 'inner.o'];",
          "43: var doesNotBreak = [[], 'inner.o'];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49: putIn.run(['.clear']);",
          "50: putIn.run([",
          "51:   'var inner = {',",
          "54:   assert.deepEqual(data, doesNotBreak);",
          "55: });",
          "58: putIn.run(['};']);",
          "60:   assert.deepEqual(data, works);",
          "61: });",
          "",
          "[Removed Lines]",
          "52:   'one:1']);",
          "53: testMe.complete('inner.o', function (error, data) {",
          "59: testMe.complete('inner.o', function (error, data) {",
          "",
          "[Added Lines]",
          "52:   'one:1'",
          "53: ]);",
          "54: testMe.complete('inner.o', function(error, data) {",
          "60: testMe.complete('inner.o', function(error, data) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "66: putIn.run([",
          "67:   'var inner = ( true ' ,",
          "68:   '?',",
          "71:   assert.deepEqual(data, doesNotBreak);",
          "72: });",
          "",
          "[Removed Lines]",
          "69:   '{one: 1} : ']);",
          "70: testMe.complete('inner.o', function (error, data) {",
          "",
          "[Added Lines]",
          "70:   '{one: 1} : '",
          "71: ]);",
          "72: testMe.complete('inner.o', function(error, data) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "77: putIn.run([",
          "78:   'var top = function () {',",
          "81:   assert.deepEqual(data, works);",
          "82: });",
          "86: putIn.run(['};']);",
          "88:   assert.deepEqual(data, doesNotBreak);",
          "89: });",
          "",
          "[Removed Lines]",
          "79:     'var inner = {one:1};']);",
          "80: testMe.complete('inner.o', function (error, data) {",
          "87: testMe.complete('inner.o', function (error, data) {",
          "",
          "[Added Lines]",
          "81:   'var inner = {one:1};'",
          "82: ]);",
          "83: testMe.complete('inner.o', function(error, data) {",
          "90: testMe.complete('inner.o', function(error, data) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "94: putIn.run([",
          "95:   'var top = function () {',",
          "100:   assert.deepEqual(data, works);",
          "101: });",
          "",
          "[Removed Lines]",
          "96:     'var inner = {',",
          "97:     ' one:1',",
          "98:     '};']);",
          "99: testMe.complete('inner.o', function (error, data) {",
          "",
          "[Added Lines]",
          "99:   'var inner = {',",
          "100:   ' one:1',",
          "101:   '};'",
          "102: ]);",
          "103: testMe.complete('inner.o', function(error, data) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "107: putIn.run([",
          "108:   'var top = function (one, two) {',",
          "113:   assert.deepEqual(data, works);",
          "114: });",
          "",
          "[Removed Lines]",
          "109:     'var inner = {',",
          "110:     ' one:1',",
          "111:     '};']);",
          "112: testMe.complete('inner.o', function (error, data) {",
          "",
          "[Added Lines]",
          "113:   'var inner = {',",
          "114:   ' one:1',",
          "115:   '};'",
          "116: ]);",
          "117: testMe.complete('inner.o', function(error, data) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "120: putIn.run([",
          "121:   'var top = function () {',",
          "127:   assert.deepEqual(data, works);",
          "128: });",
          "",
          "[Removed Lines]",
          "122:     '(function test () {',",
          "123:     'var inner = {',",
          "124:     ' one:1',",
          "125:     '};']);",
          "126: testMe.complete('inner.o', function (error, data) {",
          "",
          "[Added Lines]",
          "127:   '(function test () {',",
          "128:   'var inner = {',",
          "129:   ' one:1',",
          "130:   '};'",
          "131: ]);",
          "132: testMe.complete('inner.o', function(error, data) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "134: putIn.run([",
          "135:   'var top = function () {',",
          "142:   assert.deepEqual(data, doesNotBreak);",
          "143: });",
          "",
          "[Removed Lines]",
          "136:     'r = function test (',",
          "137:     ' one, two) {',",
          "138:     'var inner = {',",
          "139:     ' one:1',",
          "140:     '};']);",
          "141: testMe.complete('inner.o', function (error, data) {",
          "",
          "[Added Lines]",
          "142:   'r = function test (',",
          "143:   ' one, two) {',",
          "144:   'var inner = {',",
          "145:   ' one:1',",
          "146:   '};'",
          "147: ]);",
          "148: testMe.complete('inner.o', function(error, data) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "148: putIn.run([",
          "149:   'var top = function () {',",
          "156:   assert.deepEqual(data, doesNotBreak);",
          "157: });",
          "",
          "[Removed Lines]",
          "150:     'r = function test ()',",
          "151:     '{',",
          "152:     'var inner = {',",
          "153:     ' one:1',",
          "154:     '};']);",
          "155: testMe.complete('inner.o', function (error, data) {",
          "",
          "[Added Lines]",
          "157:   'r = function test ()',",
          "158:   '{',",
          "159:   'var inner = {',",
          "160:   ' one:1',",
          "161:   '};'",
          "162: ]);",
          "163: testMe.complete('inner.o', function(error, data) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "162: putIn.run([",
          "163:   'var top = function () {',",
          "171:   assert.deepEqual(data, doesNotBreak);",
          "172: });",
          "",
          "[Removed Lines]",
          "164:     'r = function test (',",
          "165:     ')',",
          "166:     '{',",
          "167:     'var inner = {',",
          "168:     ' one:1',",
          "169:     '};']);",
          "170: testMe.complete('inner.o', function (error, data) {",
          "",
          "[Added Lines]",
          "172:   'r = function test (',",
          "173:   ')',",
          "174:   '{',",
          "175:   'var inner = {',",
          "176:   ' one:1',",
          "177:   '};'",
          "178: ]);",
          "179: testMe.complete('inner.o', function(error, data) {",
          "",
          "---------------"
        ],
        "test/simple/test-script-context.js||test/simple/test-script-context.js": [
          "File: test/simple/test-script-context.js -> test/simple/test-script-context.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: }",
          "55: catch (e) {",
          "56:   gh1140Exception = e;",
          "58: }",
          "62: function isTypeError(o) {",
          "",
          "[Removed Lines]",
          "57:   assert.ok(/expected-filename/.test(e.stack), 'expected appearance of filename in Error stack');",
          "59: assert.ok(gh1140Exception, 'expected exception from runInContext signature test');",
          "",
          "[Added Lines]",
          "57:   assert.ok(/expected-filename/.test(e.stack),",
          "58:             'expected appearance of filename in Error stack');",
          "60: assert.ok(gh1140Exception,",
          "61:           'expected exception from runInContext signature test');",
          "",
          "---------------"
        ],
        "test/simple/test-stdin-child-proc.js||test/simple/test-stdin-child-proc.js": [
          "File: test/simple/test-stdin-child-proc.js -> test/simple/test-stdin-child-proc.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: var child_process = require('child_process');",
          "25: var path = require('path');",
          "26: child_process.spawn(process.execPath,",
          "",
          "[Removed Lines]",
          "27:                     [ path.resolve(__dirname, 'test-stdin-pause-resume.js') ]);",
          "",
          "[Added Lines]",
          "27:                     [path.resolve(__dirname, 'test-stdin-pause-resume.js')]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f2ebf2469b5dbbb8d83eb57ed1fe3db602d9eb59",
      "candidate_info": {
        "commit_hash": "f2ebf2469b5dbbb8d83eb57ed1fe3db602d9eb59",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/f2ebf2469b5dbbb8d83eb57ed1fe3db602d9eb59",
        "files": [
          "test/simple/test-typed-arrays.js"
        ],
        "message": "test: fix simple/test-typed-arrays\n\n* It incorrectly uses assert(a, b) instead of assert.equal(a, b), meaning all\n  relevant assertions will pass regardless of whether they're supposed to when\n  a == true.\n\n* It makes the assumption that elements in typed arrays for numerical types\n  spanning more than one byte, like Uint32Array, are stored little-endian first\n  on all machines.\n\n* It contains assorted mistakes like assert(Int32Array, typeof v4) (that one\n  only passes thanks to point 1).",
        "before_after_code_files": [
          "test/simple/test-typed-arrays.js||test/simple/test-typed-arrays.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-typed-arrays.js||test/simple/test-typed-arrays.js": [
          "File: test/simple/test-typed-arrays.js -> test/simple/test-typed-arrays.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: var Int16Array = process.binding('typed_array').Int16Array;",
          "34: var Uint8Array = process.binding('typed_array').Uint8Array;",
          "101: }",
          "",
          "[Removed Lines]",
          "36: function test(clazz) {",
          "37:   var size = clazz.length;",
          "38:   var b = clazz;",
          "42:   var v1 = new Int32Array(b);",
          "43:   assert(4, v1.BYTES_PER_ELEMENT);",
          "47:   var v2 = new Uint8Array(b, 2);",
          "48:   assert(1, v1.BYTES_PER_ELEMENT);",
          "52:   var v3 = new Int16Array(b, 2, 2);",
          "53:   assert(2, v1.BYTES_PER_ELEMENT);",
          "63:   v1[0] = 0x1234;",
          "64:   v1[1] = 0x5678;",
          "66:   assert(0x1234, v1[0]);",
          "67:   assert(0x5678, v1[1]);",
          "69:   assert(0x3, v2[0]);",
          "70:   assert(0x4, v2[1]);",
          "71:   assert(0x5, v2[2]);",
          "72:   assert(0x6, v2[3]);",
          "73:   assert(0x7, v2[4]);",
          "74:   assert(0x8, v2[5]);",
          "76:   assert(0x34, v3[0]);",
          "77:   assert(0x56, v3[1]);",
          "80:   v2.set(1, 0x8);",
          "81:   v2.set(2, 0xF);",
          "82:   assert(0x8, v2.get(1));",
          "83:   assert(0xF, v2.get(2));",
          "84:   assert(0x38, v3.get(0));",
          "85:   assert(0xF6, v3.get(1));",
          "88:   var v4 = v1.subarray(1);",
          "89:   assert(Int32Array, typeof v4);",
          "90:   assert(0xF678, v4[0]);",
          "93:   v2.set([1, 2, 3, 4], 2);",
          "94:   assert(0x1234, v1[0]);",
          "96:   var sub = new Int32Array(4);",
          "97:   sub[0] = 0xabcd;",
          "98:   v2.set(sub, 1);",
          "99:   assert(0x3a, v3[0]);",
          "100:   assert(0xbc, v3[1]);",
          "104: var size = 8;",
          "105: var ab = new ArrayBuffer(size);",
          "106: assert.equal(size, ab.byteLength);",
          "107: test(ab);",
          "110: var buffer = new Buffer(size);",
          "111: test(buffer);",
          "",
          "[Added Lines]",
          "37: var buffer = new Buffer(8);",
          "38: buffer.fill(0);",
          "40: var uint8 = new Uint8Array(buffer);",
          "41: var uint16 = new Uint16Array(buffer);",
          "42: var uint16slice = new Uint16Array(buffer, 2, 2);",
          "43: var uint32 = new Uint32Array(buffer);",
          "45: assert.equal(uint8.BYTES_PER_ELEMENT, 1);",
          "46: assert.equal(uint16.BYTES_PER_ELEMENT, 2);",
          "47: assert.equal(uint16slice.BYTES_PER_ELEMENT, 2);",
          "48: assert.equal(uint32.BYTES_PER_ELEMENT, 4);",
          "51: buffer[0] = 0x08;",
          "52: buffer[1] = 0x09;",
          "53: buffer[2] = 0x0a;",
          "54: buffer[3] = 0x0b;",
          "55: buffer[4] = 0x0c;",
          "56: buffer[5] = 0x0d;",
          "57: buffer[6] = 0x0e;",
          "58: buffer[7] = 0x0f;",
          "61:   This is what we expect the variables to look like at this point (on",
          "62:   little-endian machines):",
          "64:   buffer      | 0x08 | 0x09 | 0x0a | 0x0b | 0x0c | 0x0d | 0x0e | 0x0f |",
          "65:   uint8       | 0x08 | 0x09 | 0x0a | 0x0b | 0x0c | 0x0d | 0x0e | 0x0f\u00a0|",
          "66:   uint16      |    0x0908   |    0x0b0a   |    0x0d0c   |    0x0f0e   |",
          "67:   uint16slice --------------|    0x0b0a   |    0x0d0c   |--------------",
          "68:   uint32      |         0x0b0a0908        |         0x0f0e0d0c        |",
          "71: assert.equal(uint8[0], 0x08);",
          "72: assert.equal(uint8[1], 0x09);",
          "73: assert.equal(uint8[2], 0x0a);",
          "74: assert.equal(uint8[3], 0x0b);",
          "75: assert.equal(uint8[4], 0x0c);",
          "76: assert.equal(uint8[5], 0x0d);",
          "77: assert.equal(uint8[6], 0x0e);",
          "78: assert.equal(uint8[7], 0x0f);",
          "82: var IS_LITTLE_ENDIAN = (new Uint16Array([0x1234])).buffer[0] === 0x34;",
          "84: if (IS_LITTLE_ENDIAN) {",
          "85:   assert.equal(uint16[0], 0x0908);",
          "86:   assert.equal(uint16[1], 0x0b0a);",
          "87:   assert.equal(uint16[2], 0x0d0c);",
          "88:   assert.equal(uint16[3], 0x0f0e);",
          "90:   assert.equal(uint16slice[0], 0x0b0a);",
          "91:   assert.equal(uint16slice[1], 0x0d0c);",
          "93:   assert.equal(uint32[0], 0x0b0a0908);",
          "94:   assert.equal(uint32[1], 0x0f0e0d0c);",
          "95: } else {",
          "96:   assert.equal(uint16[0], 0x0809);",
          "97:   assert.equal(uint16[1], 0x0a0b);",
          "98:   assert.equal(uint16[2], 0x0c0d);",
          "99:   assert.equal(uint16[3], 0x0e0f);",
          "101:   assert.equal(uint16slice[0], 0x0a0b);",
          "102:   assert.equal(uint16slice[1], 0x0c0d);",
          "104:   assert.equal(uint32[0], 0x08090a0b);",
          "105:   assert.equal(uint32[1], 0x0c0d0e0f);",
          "109: var sub = uint8.subarray(2, 4);",
          "111: assert.ok(sub instanceof Uint8Array);",
          "112: assert.equal(sub[0], 0x0a);",
          "113: assert.equal(sub[1], 0x0b);",
          "117: sub[0] = 0x12;",
          "118: sub[1] = 0x34;",
          "120: assert.equal(uint8[2], 0x12);",
          "121: assert.equal(uint8[3], 0x34);",
          "124: uint8.set(1, 0x09);",
          "125: uint8.set([0x0a, 0x0b], 2);",
          "127: assert.equal(uint8.get(1), 0x09);",
          "128: assert.equal(uint8.get(2), 0x0a);",
          "129: assert.equal(uint8.get(3), 0x0b);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d5a189acef14a851287ee555f7a39431fe276e1c",
      "candidate_info": {
        "commit_hash": "d5a189acef14a851287ee555f7a39431fe276e1c",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/d5a189acef14a851287ee555f7a39431fe276e1c",
        "files": [
          "AUTHORS",
          "ChangeLog",
          "doc/index.html",
          "doc/logos/index.html",
          "doc/template.html",
          "src/node_version.h"
        ],
        "message": "2012.01.06, Version 0.6.7 (stable)\n\n* V8 hash collision fix (Breaks MIPS) (Bert Belder, Erik Corry)\n\n* Upgrade V8 to 3.6.6.15\n\n* Upgrade npm to 1.1.0-beta-10 (isaacs)\n\n* many doc updates (Ben Noordhuis, Jeremy Martin, koichik, Dave Irvine,\n  Seong-Rak Choi, Shannen, Adam Malcontenti-Wilson, koichik)\n\n* Fix segfault in node_http_parser.cc\n\n* dgram, timers: fix memory leaks (Ben Noordhuis, Yoshihiro Kukuchi)\n\n* repl: fix repl.start not passing the `ignoreUndefined` arg (Damon Oehlman)\n\n* #1980: Socket.pause null reference when called on a closed Stream (koichik)\n\n* #2263: XMLHttpRequest piped in a writable file stream hang (koichik)\n\n* #2069: http resource leak (koichik)\n\n* buffer.readInt global pollution fix (Phil Sung)\n\n* timers: fix performance regression (Ben Noordhuis)\n\n* #2308, #2246: node swallows openssl error on request (koichik)\n\n* #2114: timers: remove _idleTimeout from item in .unenroll() (James Hartig)\n\n* #2379: debugger: Request backtrace w/o refs (Fedor Indutny)\n\n* simple DTrace ustack helper (Dave Pacheco)\n\n* crypto: rewrite HexDecode without snprintf (Roman Shtylman)\n\n* crypto: don't ignore DH init errors (Ben Noordhuis)",
        "before_after_code_files": [
          "src/node_version.h||src/node_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_version.h||src/node_version.h": [
          "File: src/node_version.h -> src/node_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #define NODE_MAJOR_VERSION 0",
          "30: #define NODE_MINOR_VERSION 6",
          "31: #define NODE_PATCH_VERSION 7",
          "34: #ifndef NODE_STRINGIFY",
          "35: #define NODE_STRINGIFY(n) NODE_STRINGIFY_HELPER(n)",
          "",
          "[Removed Lines]",
          "32: #define NODE_VERSION_IS_RELEASE 0",
          "",
          "[Added Lines]",
          "32: #define NODE_VERSION_IS_RELEASE 1",
          "",
          "---------------"
        ]
      }
    }
  ]
}