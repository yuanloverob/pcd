{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "df8ab507a06a501f5ea16760d7c8de6928b4ce74",
      "candidate_info": {
        "commit_hash": "df8ab507a06a501f5ea16760d7c8de6928b4ce74",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/df8ab507a06a501f5ea16760d7c8de6928b4ce74",
        "files": [
          "include/uv-unix.h",
          "include/uv-win.h",
          "include/uv.h",
          "src/uv-common.c",
          "src/win/fs.c",
          "test/test-fs.c"
        ],
        "message": "fs: extend reported types in  uv_fs_readdir_next\n\nSupport all possible types on Unix, and files, directories and links on\nWindows. Some systems (hello SunOS!) don't have the d_type field on struct\ndirent, so mark them as UV_DIRENT_UNKNOWN.",
        "before_after_code_files": [
          "include/uv-unix.h||include/uv-unix.h",
          "include/uv-win.h||include/uv-win.h",
          "include/uv.h||include/uv.h",
          "src/uv-common.c||src/uv-common.c",
          "src/win/fs.c||src/win/fs.c",
          "test/test-fs.c||test/test-fs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv-unix.h||include/uv-unix.h": [
          "File: include/uv-unix.h -> include/uv-unix.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "159: typedef struct dirent uv__dirent_t;",
          "",
          "[Removed Lines]",
          "161: #define UV__DT_DIR DT_DIR",
          "",
          "[Added Lines]",
          "161: #if defined(DT_UNKNOWN)",
          "162: # define HAVE_DIRENT_TYPES",
          "163: # if defined(DT_REG)",
          "164: #  define UV__DT_FILE DT_REG",
          "165: # else",
          "166: #  define UV__DT_FILE -1",
          "167: # endif",
          "168: # if defined(DT_DIR)",
          "169: #  define UV__DT_DIR DT_DIR",
          "170: # else",
          "171: #  define UV__DT_DIR -2",
          "172: # endif",
          "173: # if defined(DT_LNK)",
          "174: #  define UV__DT_LINK DT_LNK",
          "175: # else",
          "176: #  define UV__DT_LINK -3",
          "177: # endif",
          "178: # if defined(DT_FIFO)",
          "179: #  define UV__DT_FIFO DT_FIFO",
          "180: # else",
          "181: #  define UV__DT_FIFO -4",
          "182: # endif",
          "183: # if defined(DT_SOCK)",
          "184: #  define UV__DT_SOCKET DT_SOCK",
          "185: # else",
          "186: #  define UV__DT_SOCKET -5",
          "187: # endif",
          "188: # if defined(DT_CHR)",
          "189: #  define UV__DT_CHAR DT_CHR",
          "190: # else",
          "191: #  define UV__DT_CHAR -6",
          "192: # endif",
          "193: # if defined(DT_BLK)",
          "194: #  define UV__DT_BLOCK DT_BLK",
          "195: # else",
          "196: #  define UV__DT_BLOCK -7",
          "197: # endif",
          "198: #endif",
          "",
          "---------------"
        ],
        "include/uv-win.h||include/uv-win.h": [
          "File: include/uv-win.h -> include/uv-win.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "294:   char d_name[1];",
          "295: } uv__dirent_t;",
          "301: #define UV_DYNAMIC FAR WINAPI",
          "",
          "[Removed Lines]",
          "297: #define UV__DT_DIR  UV_DIRENT_DIR",
          "298: #define UV__DT_FILE UV_DIRENT_FILE",
          "",
          "[Added Lines]",
          "297: #define UV__DT_DIR     UV_DIRENT_DIR",
          "298: #define UV__DT_FILE    UV_DIRENT_FILE",
          "299: #define UV__DT_LINK    UV_DIRENT_LINK",
          "300: #define UV__DT_FIFO    UV_DIRENT_FIFO",
          "301: #define UV__DT_SOCKET  UV_DIRENT_SOCKET",
          "302: #define UV__DT_CHAR    UV_DIRENT_CHAR",
          "303: #define UV__DT_BLOCK   UV_DIRENT_BLOCK",
          "",
          "---------------"
        ],
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1788: };",
          "1790: typedef enum {",
          "1791:   UV_DIRENT_FILE,",
          "1793: } uv_dirent_type_t;",
          "1795: struct uv_dirent_s {",
          "",
          "[Removed Lines]",
          "1792:   UV_DIRENT_DIR",
          "",
          "[Added Lines]",
          "1791:   UV_DIRENT_UNKNOWN,",
          "1793:   UV_DIRENT_DIR,",
          "1794:   UV_DIRENT_LINK,",
          "1795:   UV_DIRENT_FIFO,",
          "1796:   UV_DIRENT_SOCKET,",
          "1797:   UV_DIRENT_CHAR,",
          "1798:   UV_DIRENT_BLOCK",
          "",
          "---------------"
        ],
        "src/uv-common.c||src/uv-common.c": [
          "File: src/uv-common.c -> src/uv-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "482:   dent = dents[req->nbufs++];",
          "484:   ent->name = dent->d_name;",
          "490:   return 0;",
          "491: }",
          "",
          "[Removed Lines]",
          "485:   if (dent->d_type == UV__DT_DIR)",
          "486:     ent->type = UV_DIRENT_DIR;",
          "487:   else",
          "488:     ent->type = UV_DIRENT_FILE;",
          "",
          "[Added Lines]",
          "485: #ifdef HAVE_DIRENT_TYPES",
          "486:   switch (dent->d_type) {",
          "487:     case UV__DT_DIR:",
          "488:       ent->type = UV_DIRENT_DIR;",
          "489:       break;",
          "490:     case UV__DT_FILE:",
          "491:       ent->type = UV_DIRENT_FILE;",
          "492:       break;",
          "493:     case UV__DT_LINK:",
          "494:       ent->type = UV_DIRENT_LINK;",
          "495:       break;",
          "496:     case UV__DT_FIFO:",
          "497:       ent->type = UV_DIRENT_FIFO;",
          "498:       break;",
          "499:     case UV__DT_SOCKET:",
          "500:       ent->type = UV_DIRENT_SOCKET;",
          "501:       break;",
          "502:     case UV__DT_CHAR:",
          "503:       ent->type = UV_DIRENT_CHAR;",
          "504:       break;",
          "505:     case UV__DT_BLOCK:",
          "506:       ent->type = UV_DIRENT_BLOCK;",
          "507:       break;",
          "508:     default:",
          "509:       ent->type = UV_DIRENT_UNKNOWN;",
          "510:   }",
          "511: #else",
          "512:   ent->type = UV_DIRENT_UNKNOWN;",
          "513: #endif",
          "",
          "---------------"
        ],
        "src/win/fs.c||src/win/fs.c": [
          "File: src/win/fs.c -> src/win/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "878:     if ((ent.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY) != 0)",
          "879:       dent->d_type = UV__DT_DIR;",
          "880:     else",
          "881:       dent->d_type = UV__DT_FILE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "880:     else if ((ent.dwFileAttributes & FILE_ATTRIBUTE_REPARSE_POINT) != 0)",
          "881:       dent->d_type = UV__DT_LINK;",
          "",
          "---------------"
        ],
        "test/test-fs.c||test/test-fs.c": [
          "File: test/test-fs.c -> test/test-fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "426:   while (UV_EOF != uv_fs_readdir_next(req, &dent)) {",
          "427:     ASSERT(strcmp(dent.name, \"file1\") == 0 || strcmp(dent.name, \"file2\") == 0);",
          "429:   }",
          "430:   readdir_cb_count++;",
          "431:   ASSERT(req->path);",
          "",
          "[Removed Lines]",
          "428:     ASSERT(dent.type == UV_DIRENT_FILE);",
          "",
          "[Added Lines]",
          "428:     ASSERT(dent.type == UV_DIRENT_FILE || dent.type == UV_DIRENT_UNKNOWN);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "851:   ASSERT(readdir_req.ptr);",
          "852:   while (UV_EOF != uv_fs_readdir_next(&readdir_req, &dent)) {",
          "853:     ASSERT(strcmp(dent.name, \"file1\") == 0 || strcmp(dent.name, \"file2\") == 0);",
          "855:   }",
          "856:   uv_fs_req_cleanup(&readdir_req);",
          "857:   ASSERT(!readdir_req.ptr);",
          "",
          "[Removed Lines]",
          "854:     ASSERT(dent.type == UV_DIRENT_FILE);",
          "",
          "[Added Lines]",
          "854:     ASSERT(dent.type == UV_DIRENT_FILE || dent.type == UV_DIRENT_UNKNOWN);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1607:   ASSERT(readdir_req.ptr);",
          "1608:   while (UV_EOF != uv_fs_readdir_next(&readdir_req, &dent)) {",
          "1609:     ASSERT(strcmp(dent.name, \"file1\") == 0 || strcmp(dent.name, \"file2\") == 0);",
          "1611:   }",
          "1612:   uv_fs_req_cleanup(&readdir_req);",
          "1613:   ASSERT(!readdir_req.ptr);",
          "",
          "[Removed Lines]",
          "1610:     ASSERT(dent.type == UV_DIRENT_FILE);",
          "",
          "[Added Lines]",
          "1610:     ASSERT(dent.type == UV_DIRENT_FILE || dent.type == UV_DIRENT_UNKNOWN);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1627:   ASSERT(readdir_req.ptr);",
          "1628:   while (UV_EOF != uv_fs_readdir_next(&readdir_req, &dent)) {",
          "1629:     ASSERT(strcmp(dent.name, \"file1\") == 0 || strcmp(dent.name, \"file2\") == 0);",
          "1631:   }",
          "1632:   uv_fs_req_cleanup(&readdir_req);",
          "1633:   ASSERT(!readdir_req.ptr);",
          "",
          "[Removed Lines]",
          "1630:     ASSERT(dent.type == UV_DIRENT_FILE);",
          "",
          "[Added Lines]",
          "1630:     ASSERT(dent.type == UV_DIRENT_FILE || dent.type == UV_DIRENT_UNKNOWN);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ebafb90acd6de8f2bf766ac58dc1091ddfacfad4",
      "candidate_info": {
        "commit_hash": "ebafb90acd6de8f2bf766ac58dc1091ddfacfad4",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/ebafb90acd6de8f2bf766ac58dc1091ddfacfad4",
        "files": [
          "src/win/pipe.c"
        ],
        "message": "windows: fix compatibility with cygwin pipes\n\nThis makes libuv more tolerant to the properties of the pipes\nthat it can use without any issue. This is necessary because Cygwin\n(and hence Mintty) opens STDIN without FILE_WRITE_ATTRIBUTES.",
        "before_after_code_files": [
          "src/win/pipe.c||src/win/pipe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/pipe.c||src/win/pipe.c": [
          "File: src/win/pipe.c -> src/win/pipe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "230:   NTSTATUS nt_status;",
          "231:   IO_STATUS_BLOCK io_status;",
          "232:   FILE_MODE_INFORMATION mode_info;",
          "234:   DWORD current_mode = 0;",
          "235:   DWORD err = 0;",
          "",
          "[Removed Lines]",
          "233:   DWORD mode = PIPE_TYPE_BYTE | PIPE_READMODE_BYTE | PIPE_WAIT;",
          "",
          "[Added Lines]",
          "233:   DWORD mode = PIPE_READMODE_BYTE | PIPE_WAIT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "246:       if (!GetNamedPipeHandleState(pipeHandle, &current_mode, NULL, NULL,",
          "247:                                    NULL, NULL, 0)) {",
          "248:         return -1;",
          "250:         SetLastError(ERROR_ACCESS_DENIED);",
          "251:         return -1;",
          "254:       }",
          "255:     } else {",
          "",
          "[Removed Lines]",
          "249:       } else if (current_mode != mode) {",
          "252:       } else {",
          "253:         duplex_flags &= ~UV_HANDLE_WRITABLE;",
          "",
          "[Added Lines]",
          "249:       } else if (current_mode & PIPE_NOWAIT) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1773: int uv_pipe_open(uv_pipe_t* pipe, uv_file file) {",
          "1774:   HANDLE os_handle = uv__get_osfhandle(file);",
          "1777:   if (os_handle == INVALID_HANDLE_VALUE ||",
          "1778:       uv_set_pipe_handle(pipe->loop, pipe, os_handle, duplex_flags) == -1) {",
          "",
          "[Removed Lines]",
          "1775:   DWORD duplex_flags = UV_HANDLE_READABLE | UV_HANDLE_WRITABLE;",
          "",
          "[Added Lines]",
          "1773:   NTSTATUS nt_status;",
          "1774:   IO_STATUS_BLOCK io_status;",
          "1775:   FILE_ACCESS_INFORMATION access;",
          "1776:   DWORD duplex_flags = 0;",
          "1782:   nt_status = pNtQueryInformationFile(os_handle,",
          "1783:                                       &io_status,",
          "1784:                                       &access,",
          "1785:                                       sizeof(access),",
          "1786:                                       FileAccessInformation);",
          "1787:   if (nt_status != STATUS_SUCCESS)",
          "1788:     return UV_EINVAL;",
          "1790:   if (pipe->ipc) {",
          "1791:     if (!(access.AccessFlags & FILE_WRITE_DATA) ||",
          "1792:         !(access.AccessFlags & FILE_READ_DATA)) {",
          "1793:       return UV_EINVAL;",
          "1794:     }",
          "1795:   }",
          "1797:   if (access.AccessFlags & FILE_WRITE_DATA)",
          "1798:     duplex_flags |= UV_HANDLE_WRITABLE;",
          "1799:   if (access.AccessFlags & FILE_READ_DATA)",
          "1800:     duplex_flags |= UV_HANDLE_READABLE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3fdd2a1128df16df2e196aa7ff6145d31c942171",
      "candidate_info": {
        "commit_hash": "3fdd2a1128df16df2e196aa7ff6145d31c942171",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/3fdd2a1128df16df2e196aa7ff6145d31c942171",
        "files": [
          "README.md",
          "android-configure",
          "common.gypi",
          "config-unix.mk",
          "include/uv-private/uv-unix.h",
          "src/unix/linux-core.c",
          "src/unix/thread.c"
        ],
        "message": "uv: support android libuv standalone build\n\nTested most of my compilation in the previous patch on NodeJS\nand extracted the patches from there. This patch ensures libuv\nwill be capable of building standalone as well, both with gyp\nand Makefiles.\n\nBuild documentation was added to the README.md file.\n\nSome tests are failing, and I have not heavily investigated\nthe reasons. The failures are generally on errors, and are\nlikely related to differences between fully POSIX-compatible\nsystems and android.",
        "before_after_code_files": [
          "common.gypi||common.gypi",
          "config-unix.mk||config-unix.mk",
          "include/uv-private/uv-unix.h||include/uv-private/uv-unix.h",
          "src/unix/linux-core.c||src/unix/linux-core.c",
          "src/unix/thread.c||src/unix/thread.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "common.gypi||common.gypi": [
          "File: common.gypi -> common.gypi",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:     'msvs_multi_core_compile': '0',  # we do enable multicore compiles, but not using the V8 way",
          "9:     'gcc_version%': 'unknown',",
          "10:     'clang%': 0,",
          "11:   },",
          "13:   'target_defaults': {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12:     'conditions': [",
          "13:       # Workaround for the legacy handling of android in gyp",
          "14:       ['android_build == 1', {",
          "15:         'OS': 'android',",
          "16:       }],",
          "17:     ],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "148:           [ 'OS==\"solaris\"', {",
          "149:             'cflags': [ '-pthreads' ],",
          "150:             'ldflags': [ '-pthreads' ],",
          "152:             'cflags': [ '-pthread' ],",
          "153:             'ldflags': [ '-pthread' ],",
          "154:           }],",
          "",
          "[Removed Lines]",
          "151:           }, {",
          "",
          "[Added Lines]",
          "158:           }],",
          "159:           [ 'OS not in \"android solaris\"', {",
          "",
          "---------------"
        ],
        "config-unix.mk||config-unix.mk": [
          "File: config-unix.mk -> config-unix.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: # IN THE SOFTWARE.",
          "21: E=",
          "23: CPPFLAGS += -I$(SRCDIR)/src",
          "24: LDFLAGS=-lm",
          "",
          "[Removed Lines]",
          "22: CFLAGS += -g -Wall -Wextra -Wno-unused-parameter -std=c89",
          "",
          "[Added Lines]",
          "22: CFLAGS += -g -Wall -Wextra -Wno-unused-parameter",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104:         src/unix/proctitle.o",
          "105: endif",
          "107: ifeq (freebsd,$(PLATFORM))",
          "108: HAVE_DTRACE=1",
          "109: LDFLAGS+=-lkvm",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107: ifeq (android,$(PLATFORM))",
          "108: CFLAGS += -D_GNU_SOURCE",
          "109: LDFLAGS+=-ldl -lrt",
          "110: RUNNER_CFLAGS += -D_GNU_SOURCE",
          "111: OBJS += src/unix/linux-core.o \\",
          "112:         src/unix/linux-inotify.o \\",
          "113:         src/unix/linux-syscalls.o \\",
          "114:         src/unix/proctitle.o",
          "115: else",
          "116: CFLAGS += -std=c89",
          "117: endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "132: ifeq (sunos,$(PLATFORM))",
          "133: RUNNER_LDFLAGS += -pthreads",
          "134: else",
          "135: RUNNER_LDFLAGS += -pthread",
          "136: endif",
          "138: ifeq ($(HAVE_DTRACE), 1)",
          "139: DTRACE_HEADER = src/unix/uv-dtrace.h",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147: ifneq (android, $(PLATFORM))",
          "150: endif",
          "",
          "---------------"
        ],
        "include/uv-private/uv-unix.h||include/uv-private/uv-unix.h": [
          "File: include/uv-private/uv-unix.h -> include/uv-private/uv-unix.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: #include <semaphore.h>",
          "39: #include <pthread.h>",
          "41: #include \"pthread-fixes.h\"",
          "42: #endif",
          "43: #include <signal.h>",
          "",
          "[Removed Lines]",
          "40: #ifdef ANDROID",
          "",
          "[Added Lines]",
          "40: #ifdef __ANDROID__",
          "",
          "---------------"
        ],
        "src/unix/linux-core.c||src/unix/linux-core.c": [
          "File: src/unix/linux-core.c -> src/unix/linux-core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: #include <fcntl.h>",
          "37: #include <time.h>",
          "40: #define HAVE_IFADDRS_H 1",
          "41: #endif",
          "",
          "[Removed Lines]",
          "39: #ifndef ANDROID",
          "",
          "[Added Lines]",
          "39: #ifndef __ANDROID__",
          "",
          "---------------"
        ],
        "src/unix/thread.c||src/unix/thread.c": [
          "File: src/unix/thread.c -> src/unix/thread.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "281:   if (pthread_condattr_init(&attr))",
          "282:     return -1;",
          "285:   if (pthread_condattr_setclock(&attr, CLOCK_MONOTONIC))",
          "286:     goto error2;",
          "287: #endif",
          "",
          "[Removed Lines]",
          "284: #if !defined(ANDROID)",
          "",
          "[Added Lines]",
          "284: #if !defined(__ANDROID__)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "336:   timeout += uv__hrtime();",
          "337:   ts.tv_sec = timeout / NANOSEC;",
          "338:   ts.tv_nsec = timeout % NANOSEC;",
          "",
          "[Removed Lines]",
          "339: #if defined(ANDROID)",
          "",
          "[Added Lines]",
          "339: #if defined(__ANDROID__)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6645b93273e0553d23823c576573b82b129bf28c",
      "candidate_info": {
        "commit_hash": "6645b93273e0553d23823c576573b82b129bf28c",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/6645b93273e0553d23823c576573b82b129bf28c",
        "files": [
          "AUTHORS",
          "ChangeLog",
          "src/version.c"
        ],
        "message": "2013.07.21, Version 0.11.6 (Unstable)\n\nChanges since version 0.11.5:\n\n* test: open stdout fd in write-only mode (Ben Noordhuis)\n\n* windows: uv_spawn shouldn't reject reparse points (Bert Belder)\n\n* windows: use WSAGetLastError(), not errno (Ben Noordhuis)\n\n* build: darwin: disable -fstrict-aliasing warnings (Ben Noordhuis)\n\n* test: fix signed/unsigned compiler warning (Ben Noordhuis)\n\n* test: add 'start timer from check handle' test (Ben Noordhuis)\n\n* build: `all` now builds static and dynamic lib (Ben Noordhuis)\n\n* unix, windows: add extra fields to uv_stat_t (Sa\u00fal Ibarra Corretg\u00e9)\n\n* build: add install target to the makefile (Navaneeth Kedaram\n  Nambiathan)\n\n* build: switch to autotools (Ben Noordhuis)\n\n* build: use AM_PROG_AR conditionally (Ben Noordhuis)\n\n* test: fix fs_fstat test on sunos (Ben Noordhuis)\n\n* test: fix fs_chown when running as root (Ben Noordhuis)\n\n* test: fix spawn_setgid_fails and spawn_setuid_fails (Ben Noordhuis)\n\n* build: use AM_SILENT_RULES conditionally (Ben Noordhuis)\n\n* build: add DTrace detection for autotools (Timothy J. Fontaine)\n\n* linux,darwin,win: link-local IPv6 addresses (Miroslav Bajto\u0161)\n\n* unix: fix build when !defined(PTHREAD_MUTEX_ERRORCHECK) (Ben\n  Noordhuis)\n\n* unix, windows: return error codes directly (Ben Noordhuis)",
        "before_after_code_files": [
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #define UV_VERSION_MAJOR 0",
          "33: #define UV_VERSION_MINOR 11",
          "34: #define UV_VERSION_PATCH 6",
          "38: #define UV_VERSION  ((UV_VERSION_MAJOR << 16) | \\",
          "",
          "[Removed Lines]",
          "35: #define UV_VERSION_IS_RELEASE 0",
          "",
          "[Added Lines]",
          "35: #define UV_VERSION_IS_RELEASE 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b83caf86245cac10d915dc9010a758579b7afbcd",
      "candidate_info": {
        "commit_hash": "b83caf86245cac10d915dc9010a758579b7afbcd",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/b83caf86245cac10d915dc9010a758579b7afbcd",
        "files": [
          "src/win/process.c"
        ],
        "message": "windows: uv_spawn code refactor",
        "before_after_code_files": [
          "src/win/process.c||src/win/process.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/process.c||src/win/process.c": [
          "File: src/win/process.c -> src/win/process.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "833:   err = uv_utf8_to_utf16_alloc(options->file, &application);",
          "834:   if (err)",
          "837:   err = make_program_args(",
          "838:       options->args,",
          "839:       options->flags & UV_PROCESS_WINDOWS_VERBATIM_ARGUMENTS,",
          "840:       &arguments);",
          "841:   if (err)",
          "844:   if (options->env) {",
          "845:      err = make_program_env(options->env, &env);",
          "846:      if (err)",
          "848:   }",
          "850:   if (options->cwd) {",
          "852:     err = uv_utf8_to_utf16_alloc(options->cwd, &cwd);",
          "853:     if (err)",
          "856:   } else {",
          "",
          "[Removed Lines]",
          "835:     goto immediate_failure;",
          "842:     goto immediate_failure;",
          "847:        goto immediate_failure;",
          "854:       goto immediate_failure;",
          "",
          "[Added Lines]",
          "835:     goto done;",
          "842:     goto done;",
          "847:        goto done;",
          "854:       goto done;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "860:     cwd_len = GetCurrentDirectoryW(0, NULL);",
          "861:     if (!cwd_len) {",
          "862:       err = GetLastError();",
          "864:     }",
          "866:     cwd = (WCHAR*) malloc(cwd_len * sizeof(WCHAR));",
          "867:     if (cwd == NULL) {",
          "868:       err = ERROR_OUTOFMEMORY;",
          "870:     }",
          "872:     r = GetCurrentDirectoryW(cwd_len, cwd);",
          "873:     if (r == 0 || r >= cwd_len) {",
          "874:       err = GetLastError();",
          "876:     }",
          "877:   }",
          "",
          "[Removed Lines]",
          "863:       goto immediate_failure;",
          "869:       goto immediate_failure;",
          "875:       goto immediate_failure;",
          "",
          "[Added Lines]",
          "863:       goto done;",
          "869:       goto done;",
          "875:       goto done;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "883:     path_len = GetEnvironmentVariableW(L\"PATH\", NULL, 0);",
          "884:     if (path_len == 0) {",
          "885:       err = GetLastError();",
          "887:     }",
          "889:     path = (WCHAR*) malloc(path_len * sizeof(WCHAR));",
          "890:     if (path == NULL) {",
          "891:       err = ERROR_OUTOFMEMORY;",
          "893:     }",
          "895:     r = GetEnvironmentVariableW(L\"PATH\", path, path_len);",
          "896:     if (r == 0 || r >= path_len) {",
          "897:       err = GetLastError();",
          "899:     }",
          "900:   }",
          "902:   err = uv__stdio_create(loop, options, &process->child_stdio_buffer);",
          "903:   if (err)",
          "908:   application_path = search_path(application,",
          "909:                                  cwd,",
          "",
          "[Removed Lines]",
          "886:       goto immediate_failure;",
          "892:       goto immediate_failure;",
          "898:       goto immediate_failure;",
          "904:     goto immediate_failure;",
          "",
          "[Added Lines]",
          "886:       goto done;",
          "892:       goto done;",
          "898:       goto done;",
          "904:     goto done;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "911:   if (application_path == NULL) {",
          "913:     err = ERROR_FILE_NOT_FOUND;",
          "915:   }",
          "917:   startup.cb = sizeof(startup);",
          "",
          "[Removed Lines]",
          "914:     goto success_or_async_failure;",
          "",
          "[Added Lines]",
          "912:     goto done;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "950:     process_flags |= DETACHED_PROCESS | CREATE_NEW_PROCESS_GROUP;",
          "951:   }",
          "954:                      arguments,",
          "955:                      NULL,",
          "956:                      NULL,",
          "",
          "[Removed Lines]",
          "953:   if (CreateProcessW(application_path,",
          "",
          "[Added Lines]",
          "951:   if (!CreateProcessW(application_path,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "960:                      cwd,",
          "961:                      &startup,",
          "962:                      &info)) {",
          "997:     }",
          "1005:     }",
          "1012:   }",
          "1017:   free(application);",
          "1018:   free(application_path);",
          "1019:   free(arguments);",
          "",
          "[Removed Lines]",
          "964:     process->process_handle = info.hProcess;",
          "965:     process->pid = info.dwProcessId;",
          "969:     if (!(options->flags & UV_PROCESS_DETACHED)) {",
          "970:       uv_once(&uv_global_job_handle_init_guard_, uv__init_global_job_handle);",
          "972:       if (!AssignProcessToJobObject(uv_global_job_handle_, info.hProcess)) {",
          "983:         DWORD err = GetLastError();",
          "984:         if (err != ERROR_ACCESS_DENIED)",
          "985:           uv_fatal_error(err, \"AssignProcessToJobObject\");",
          "986:       }",
          "987:     }",
          "990:     for (i = 0; i < options->stdio_count; i++) {",
          "991:       const uv_stdio_container_t* fdopt = &options->stdio[i];",
          "992:       if (fdopt->flags & UV_CREATE_PIPE &&",
          "993:           fdopt->data.stream->type == UV_NAMED_PIPE &&",
          "994:           ((uv_pipe_t*) fdopt->data.stream)->ipc) {",
          "995:         ((uv_pipe_t*) fdopt->data.stream)->ipc_pid = info.dwProcessId;",
          "996:       }",
          "1000:     result = RegisterWaitForSingleObject(&process->wait_handle,",
          "1001:         process->process_handle, exit_wait_callback, (void*)process, INFINITE,",
          "1002:         WT_EXECUTEINWAITTHREAD | WT_EXECUTEONLYONCE);",
          "1003:     if (!result) {",
          "1004:       uv_fatal_error(GetLastError(), \"RegisterWaitForSingleObject\");",
          "1007:     CloseHandle(info.hThread);",
          "1009:   } else {",
          "1011:     err = GetLastError();",
          "1016:  success_or_async_failure:",
          "",
          "[Added Lines]",
          "962:     err = GetLastError();",
          "963:     goto done;",
          "964:   }",
          "969:   process->process_handle = info.hProcess;",
          "970:   process->pid = info.dwProcessId;",
          "974:   if (!(options->flags & UV_PROCESS_DETACHED)) {",
          "975:     uv_once(&uv_global_job_handle_init_guard_, uv__init_global_job_handle);",
          "977:     if (!AssignProcessToJobObject(uv_global_job_handle_, info.hProcess)) {",
          "988:       DWORD err = GetLastError();",
          "989:       if (err != ERROR_ACCESS_DENIED)",
          "990:         uv_fatal_error(err, \"AssignProcessToJobObject\");",
          "992:   }",
          "995:   for (i = 0; i < options->stdio_count; i++) {",
          "996:     const uv_stdio_container_t* fdopt = &options->stdio[i];",
          "997:     if (fdopt->flags & UV_CREATE_PIPE &&",
          "998:         fdopt->data.stream->type == UV_NAMED_PIPE &&",
          "999:         ((uv_pipe_t*) fdopt->data.stream)->ipc) {",
          "1000:       ((uv_pipe_t*) fdopt->data.stream)->ipc_pid = info.dwProcessId;",
          "1002:   }",
          "1005:   result = RegisterWaitForSingleObject(&process->wait_handle,",
          "1006:       process->process_handle, exit_wait_callback, (void*)process, INFINITE,",
          "1007:       WT_EXECUTEINWAITTHREAD | WT_EXECUTEONLYONCE);",
          "1008:   if (!result) {",
          "1009:     uv_fatal_error(GetLastError(), \"RegisterWaitForSingleObject\");",
          "1012:   CloseHandle(info.hThread);",
          "1014:   assert(!err);",
          "1018:   uv__handle_start(process);",
          "1021:  done:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1027:     process->child_stdio_buffer = NULL;",
          "1028:   }",
          "1051:   return uv_translate_sys_error(err);",
          "1052: }",
          "",
          "[Removed Lines]",
          "1033:   if (err == 0) {",
          "1034:     uv__handle_start(process);",
          "1035:   }",
          "1037:   return uv_translate_sys_error(err);",
          "1041:  immediate_failure:",
          "1042:   free(application);",
          "1043:   free(application_path);",
          "1044:   free(arguments);",
          "1045:   free(cwd);",
          "1046:   free(env);",
          "1047:   free(path);",
          "1049:   assert(process->child_stdio_buffer == NULL);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}