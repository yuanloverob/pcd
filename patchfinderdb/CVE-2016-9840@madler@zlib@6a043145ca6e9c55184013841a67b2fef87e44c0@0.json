{
  "cve_id": "CVE-2016-9840",
  "cve_desc": "inftrees.c in zlib 1.2.8 might allow context-dependent attackers to have unspecified impact by leveraging improper pointer arithmetic.",
  "repo": "madler/zlib",
  "patch_hash": "6a043145ca6e9c55184013841a67b2fef87e44c0",
  "patch_info": {
    "commit_hash": "6a043145ca6e9c55184013841a67b2fef87e44c0",
    "repo": "madler/zlib",
    "commit_url": "https://github.com/madler/zlib/commit/6a043145ca6e9c55184013841a67b2fef87e44c0",
    "files": [
      "inftrees.c"
    ],
    "message": "Remove offset pointer optimization in inftrees.c.\n\ninftrees.c was subtracting an offset from a pointer to an array,\nin order to provide a pointer that allowed indexing starting at\nthe offset. This is not compliant with the C standard, for which\nthe behavior of a pointer decremented before its allocated memory\nis undefined. Per the recommendation of a security audit of the\nzlib code by Trail of Bits and TrustInSoft, in support of the\nMozilla Foundation, this tiny optimization was removed, in order\nto avoid the possibility of undefined behavior.",
    "before_after_code_files": [
      "inftrees.c||inftrees.c"
    ]
  },
  "patch_diff": {
    "inftrees.c||inftrees.c": [
      "File: inftrees.c -> inftrees.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "181:     switch (type) {",
      "182:     case CODES:",
      "185:         break;",
      "186:     case LENS:",
      "187:         base = lbase;",
      "189:         extra = lext;",
      "192:         break;",
      "194:         base = dbase;",
      "195:         extra = dext;",
      "197:     }",
      "",
      "[Removed Lines]",
      "184:         end = 19;",
      "188:         base -= 257;",
      "190:         extra -= 257;",
      "191:         end = 256;",
      "196:         end = -1;",
      "",
      "[Added Lines]",
      "184:         match = 20;",
      "189:         match = 257;",
      "194:         match = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:     for (;;) {",
      "218:         here.bits = (unsigned char)(len - drop);",
      "220:             here.op = (unsigned char)0;",
      "221:             here.val = work[sym];",
      "222:         }",
      "226:         }",
      "227:         else {",
      "",
      "[Removed Lines]",
      "219:         if ((int)(work[sym]) < end) {",
      "223:         else if ((int)(work[sym]) > end) {",
      "224:             here.op = (unsigned char)(extra[work[sym]]);",
      "225:             here.val = base[work[sym]];",
      "",
      "[Added Lines]",
      "217:         if (work[sym] + 1 < match) {",
      "221:         else if (work[sym] >= match) {",
      "222:             here.op = (unsigned char)(extra[work[sym] - match]);",
      "223:             here.val = base[work[sym] - match];",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8f147c3d12591a811c5438c011d4203bb7fc5260",
      "candidate_info": {
        "commit_hash": "8f147c3d12591a811c5438c011d4203bb7fc5260",
        "repo": "madler/zlib",
        "commit_url": "https://github.com/madler/zlib/commit/8f147c3d12591a811c5438c011d4203bb7fc5260",
        "files": [
          "deflate.c",
          "gzwrite.c",
          "inftrees.c",
          "test/example.c",
          "test/minigzip.c",
          "trees.c"
        ],
        "message": "Avoid some random compiler warnings on various platforms.",
        "before_after_code_files": [
          "deflate.c||deflate.c",
          "gzwrite.c||gzwrite.c",
          "inftrees.c||inftrees.c",
          "test/example.c||test/example.c",
          "test/minigzip.c||test/minigzip.c",
          "trees.c||trees.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "inftrees.c||inftrees.c"
          ],
          "candidate": [
            "inftrees.c||inftrees.c"
          ]
        }
      },
      "candidate_diff": {
        "deflate.c||deflate.c": [
          "File: deflate.c -> deflate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "447:     uInt  *dictLength;",
          "448: {",
          "449:     deflate_state *s;",
          "451:     if (deflateStateCheck(strm))",
          "452:         return Z_STREAM_ERROR;",
          "453:     s = strm->state;",
          "455:     if (len > s->w_size)",
          "456:         len = s->w_size;",
          "457:     if (dictionary != Z_NULL && len)",
          "",
          "[Removed Lines]",
          "454:     uInt len = s->strstart + s->lookahead;",
          "",
          "[Added Lines]",
          "450:     uInt len;",
          "455:     len = s->strstart + s->lookahead;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1760:     if (flush != Z_NO_FLUSH && s->strm->avail_in == 0 &&",
          "1762:         return flush == Z_FINISH ? finish_done : block_done;",
          "1765:     have = s->window_size - s->strstart - 1;",
          "1768:         s->block_start -= s->w_size;",
          "1769:         s->strstart -= s->w_size;",
          "",
          "[Removed Lines]",
          "1761:         s->strstart == s->block_start)",
          "1766:     if (s->strm->avail_in > have && s->block_start >= s->w_size) {",
          "",
          "[Added Lines]",
          "1762:         (long)s->strstart == s->block_start)",
          "1767:     if (s->strm->avail_in > have && s->block_start >= (long)s->w_size) {",
          "",
          "---------------"
        ],
        "gzwrite.c||gzwrite.c": [
          "File: gzwrite.c -> gzwrite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "226:         state->strm.next_in = (z_const Bytef *)buf;",
          "227:         do {",
          "229:             if (n > len)",
          "230:                 n = len;",
          "231:             state->strm.avail_in = n;",
          "",
          "[Removed Lines]",
          "228:             unsigned n = -1;",
          "",
          "[Added Lines]",
          "228:             unsigned n = (unsigned)-1;",
          "",
          "---------------"
        ],
        "inftrees.c||inftrees.c": [
          "File: inftrees.c -> inftrees.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "188:         extra = lext;",
          "189:         match = 257;",
          "190:         break;",
          "192:         base = dbase;",
          "193:         extra = dext;",
          "194:         match = 0;",
          "",
          "[Removed Lines]",
          "191:     case DISTS:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "214:     for (;;) {",
          "216:         here.bits = (unsigned char)(len - drop);",
          "218:             here.op = (unsigned char)0;",
          "219:             here.val = work[sym];",
          "220:         }",
          "",
          "[Removed Lines]",
          "217:         if (work[sym] + 1 < match) {",
          "",
          "[Added Lines]",
          "217:         if (work[sym] + 1U < match) {",
          "",
          "---------------"
        ],
        "test/example.c||test/example.c": [
          "File: test/example.c -> test/example.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:     void *q;",
          "60:     unsigned n, m;",
          "61: {",
          "63:     return calloc(n, m);",
          "64: }",
          "66: void myfree(void *q, void *p)",
          "67: {",
          "69:     free(p);",
          "70: }",
          "",
          "[Removed Lines]",
          "62:     q = Z_NULL;",
          "68:     q = Z_NULL;",
          "",
          "[Added Lines]",
          "62:     (void)q;",
          "68:     (void)q;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "573:     }",
          "575: #ifdef Z_SOLO",
          "577: #else",
          "578:     test_compress(compr, comprLen, uncompr, uncomprLen);",
          "",
          "[Removed Lines]",
          "576:     argc = strlen(argv[0]);",
          "",
          "[Added Lines]",
          "576:     (void)argc;",
          "577:     (void)argv;",
          "",
          "---------------"
        ],
        "test/minigzip.c||test/minigzip.c": [
          "File: test/minigzip.c -> test/minigzip.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:     void *q;",
          "157:     unsigned n, m;",
          "158: {",
          "160:     return calloc(n, m);",
          "161: }",
          "163: void myfree(q, p)",
          "164:     void *q, *p;",
          "165: {",
          "167:     free(p);",
          "168: }",
          "",
          "[Removed Lines]",
          "159:     q = Z_NULL;",
          "166:     q = Z_NULL;",
          "",
          "[Added Lines]",
          "159:     (void)q;",
          "166:     (void)q;",
          "",
          "---------------"
        ],
        "trees.c||trees.c": [
          "File: trees.c -> trees.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "871:     put_short(s, (ush)stored_len);",
          "872:     put_short(s, (ush)~stored_len);",
          "874:     s->pending += stored_len;",
          "875: #ifdef ZLIB_DEBUG",
          "876:     s->compressed_len = (s->compressed_len + 3 + 7) & (ulg)~7L;",
          "",
          "[Removed Lines]",
          "873:     zmemcpy(s->pending_buf + s->pending, buf, stored_len);",
          "",
          "[Added Lines]",
          "873:     zmemcpy(s->pending_buf + s->pending, (Bytef *)buf, stored_len);",
          "",
          "---------------"
        ]
      }
    }
  ]
}