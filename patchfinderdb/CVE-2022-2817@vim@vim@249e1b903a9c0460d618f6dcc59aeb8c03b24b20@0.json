{
  "cve_id": "CVE-2022-2817",
  "cve_desc": "Use After Free in GitHub repository vim/vim prior to 9.0.0213.",
  "repo": "vim/vim",
  "patch_hash": "249e1b903a9c0460d618f6dcc59aeb8c03b24b20",
  "patch_info": {
    "commit_hash": "249e1b903a9c0460d618f6dcc59aeb8c03b24b20",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/249e1b903a9c0460d618f6dcc59aeb8c03b24b20",
    "files": [
      "src/testdir/test_assert.vim",
      "src/testing.c",
      "src/version.c"
    ],
    "message": "patch 9.0.0213: using freed memory with error in assert argument\n\nProblem:    Using freed memory with error in assert argument.\nSolution:   Make a copy of the error.",
    "before_after_code_files": [
      "src/testdir/test_assert.vim||src/testdir/test_assert.vim",
      "src/testing.c||src/testing.c",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/testdir/test_assert.vim||src/testdir/test_assert.vim": [
      "File: src/testdir/test_assert.vim -> src/testdir/test_assert.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "291:     let exp = v:exception",
      "292:   endtry",
      "293:   call assert_match(\"E1174: String required for argument 5\", exp)",
      "294: endfunc",
      "296: func Test_assert_fails_in_try_block()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "295:   call assert_equal(1, assert_fails('c0', ['', '\\1']))",
      "296:   call assert_match(\"Expected '\\\\\\\\\\\\\\\\1' but got 'E939: Positive count required: c0': c0\", v:errors[0])",
      "297:   call remove(v:errors, 0)",
      "",
      "---------------"
    ],
    "src/testing.c||src/testing.c": [
      "File: src/testing.c -> src/testing.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "597:     int  save_trylevel = trylevel;",
      "598:     int  called_emsg_before = called_emsg;",
      "599:     char *wrong_arg_msg = NULL;",
      "601:     if (check_for_string_or_number_arg(argvars, 0) == FAIL",
      "602:      || check_for_opt_string_or_list_arg(argvars, 1) == FAIL",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "600:     char_u *tofree = NULL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "660:      }",
      "661:      else if (list->lv_len == 2)",
      "662:      {",
      "667:   {",
      "670:   }",
      "671:      }",
      "672:  }",
      "",
      "[Removed Lines]",
      "663:   tv = &list->lv_u.mat.lv_last->li_tv;",
      "664:   actual = get_vim_var_str(VV_ERRMSG);",
      "665:   expected = tv_get_string_buf_chk(tv, buf);",
      "666:   if (!pattern_match(expected, actual, FALSE))",
      "668:       error_found = TRUE;",
      "669:       expected_str = expected;",
      "",
      "[Added Lines]",
      "665:   tofree = actual = vim_strsave(get_vim_var_str(VV_ERRMSG));",
      "666:   if (actual != NULL)",
      "668:       tv = &list->lv_u.mat.lv_last->li_tv;",
      "669:       expected = tv_get_string_buf_chk(tv, buf);",
      "670:       if (!pattern_match(expected, actual, FALSE))",
      "671:       {",
      "672:    error_found = TRUE;",
      "673:    expected_str = expected;",
      "674:       }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "749:     msg_scrolled = 0;",
      "750:     lines_left = Rows;",
      "751:     VIM_CLEAR(emsg_assert_fails_msg);",
      "752:     set_vim_var_string(VV_ERRMSG, NULL, 0);",
      "753:     if (wrong_arg_msg != NULL)",
      "754:  emsg(_(wrong_arg_msg));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "757:     vim_free(tofree);",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "736: static int included_patches[] =",
      "739:     212,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "739:     213,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1540d334a04d874c2aa9d26b82dbbcd4bc5a78de",
      "candidate_info": {
        "commit_hash": "1540d334a04d874c2aa9d26b82dbbcd4bc5a78de",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/1540d334a04d874c2aa9d26b82dbbcd4bc5a78de",
        "files": [
          "src/testdir/test_assert.vim",
          "src/testing.c",
          "src/version.c"
        ],
        "message": "patch 9.0.0404: crash when passing invalid arguments to assert_fails()\n\nProblem:    Crash when passing invalid arguments to assert_fails().\nSolution:   Check for NULL string.",
        "before_after_code_files": [
          "src/testdir/test_assert.vim||src/testdir/test_assert.vim",
          "src/testing.c||src/testing.c",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/testdir/test_assert.vim||src/testdir/test_assert.vim",
            "src/testing.c||src/testing.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/testdir/test_assert.vim||src/testdir/test_assert.vim",
            "src/testing.c||src/testing.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/testdir/test_assert.vim||src/testdir/test_assert.vim": [
          "File: src/testdir/test_assert.vim -> src/testdir/test_assert.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "275:   endtry",
          "276:   call assert_match(\"E1222: String or List required for argument 2\", exp)",
          "278:   try",
          "279:     call assert_equal(1, assert_fails('xxx', 'E492', '', 'burp'))",
          "280:   catch",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "278:   try",
          "279:     call assert_equal(0, assert_fails('xxx', [#{one: 1}]))",
          "280:   catch",
          "281:     let exp = v:exception",
          "282:   endtry",
          "283:   call assert_match(\"E731: Using a Dictionary as a String\", exp)",
          "285:   let exp = ''",
          "286:   try",
          "287:     call assert_equal(0, assert_fails('xxx', ['E492', #{one: 1}]))",
          "288:   catch",
          "289:     let exp = v:exception",
          "290:   endtry",
          "291:   call assert_match(\"E731: Using a Dictionary as a String\", exp)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "289:   endtry",
          "290:   call assert_match(\"E1174: String required for argument 5\", exp)",
          "294:   call remove(v:errors, 0)",
          "295: endfunc",
          "",
          "[Removed Lines]",
          "292:   call assert_equal(1, assert_fails('c0', ['', '\\1']))",
          "293:   call assert_match(\"Expected '\\\\\\\\\\\\\\\\1' but got 'E939: Positive count required: c0': c0\", v:errors[0])",
          "",
          "[Added Lines]",
          "307:   call assert_equal(1, assert_fails('c0', ['', '\\(.\\)\\1']))",
          "308:   call assert_match(\"Expected '\\\\\\\\\\\\\\\\(.\\\\\\\\\\\\\\\\)\\\\\\\\\\\\\\\\1' but got 'E939: Positive count required: c0': c0\", v:errors[0])",
          "",
          "---------------"
        ],
        "src/testing.c||src/testing.c": [
          "File: src/testing.c -> src/testing.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "616:     in_assert_fails = TRUE;",
          "618:     do_cmdline_cmd(cmd);",
          "619:     if (called_emsg == called_emsg_before)",
          "620:     {",
          "621:  prepare_assert_error(&ga);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "621:     trylevel = save_trylevel;",
          "622:     suppress_errthrow = FALSE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "654:      CHECK_LIST_MATERIALIZE(list);",
          "655:      tv = &list->lv_first->li_tv;",
          "656:      expected = tv_get_string_buf_chk(tv, buf);",
          "657:      if (!pattern_match(expected, actual, FALSE))",
          "658:      {",
          "659:   error_found = TRUE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "662:      if (expected == NULL)",
          "663:   goto theend;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "667:   {",
          "668:       tv = &list->lv_u.mat.lv_last->li_tv;",
          "669:       expected = tv_get_string_buf_chk(tv, buf);",
          "670:       if (!pattern_match(expected, actual, FALSE))",
          "671:       {",
          "672:    error_found = TRUE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "677:       if (expected == NULL)",
          "678:    goto theend;",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "704: static int included_patches[] =",
          "707:     403,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "707:     404,",
          "",
          "---------------"
        ]
      }
    }
  ]
}