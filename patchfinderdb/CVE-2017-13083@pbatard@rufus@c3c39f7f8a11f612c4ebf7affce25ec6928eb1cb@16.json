{
  "cve_id": "CVE-2017-13083",
  "cve_desc": "Akeo Consulting Rufus prior to version 2.17.1187 does not adequately validate the integrity of updates downloaded over HTTP, allowing an attacker to easily convince a user to execute arbitrary code",
  "repo": "pbatard/rufus",
  "patch_hash": "c3c39f7f8a11f612c4ebf7affce25ec6928eb1cb",
  "patch_info": {
    "commit_hash": "c3c39f7f8a11f612c4ebf7affce25ec6928eb1cb",
    "repo": "pbatard/rufus",
    "commit_url": "https://github.com/pbatard/rufus/commit/c3c39f7f8a11f612c4ebf7affce25ec6928eb1cb",
    "files": [
      "res/localization/rufus.loc",
      "src/pki.c",
      "src/rufus.rc",
      "src/stdlg.c"
    ],
    "message": "[pki] fix https://www.kb.cert.org/vuls/id/403768\n\n* This commit effectively fixes https://www.kb.cert.org/vuls/id/403768 (CVE-2017-13083) as\n  it is described per its revision 11, which is the latest revision at the time of this commit,\n  by disabling Windows prompts, enacted during signature validation, that allow the user to\n  bypass the intended signature verification checks.\n* It needs to be pointed out that the vulnerability (\"allow(ing) the use of a self-signed\n  certificate\"), which relies on the end-user actively ignoring a Windows prompt that tells\n  them that the update failed the signature validation whilst also advising against running it,\n  is being fully addressed, even as the update protocol remains HTTP.\n* It also need to be pointed out that the extended delay (48 hours) between the time the\n  vulnerability was reported and the moment it is fixed in our codebase has to do with\n  the fact that the reporter chose to deviate from standard security practices by not\n  disclosing the details of the vulnerability with us, be it publicly or privately,\n  before creating the cert.org report. The only advance notification we received was a\n  generic note about the use of HTTP vs HTTPS, which, as have established, is not\n  immediately relevant to addressing the reported vulnerability.\n* Closes #1009\n* Note: The other vulnerability scenario described towards the end of #1009, which\n  doesn't have to do with the \"lack of CA checking\", will be addressed separately.",
    "before_after_code_files": [
      "res/localization/rufus.loc||res/localization/rufus.loc",
      "src/pki.c||src/pki.c",
      "src/rufus.rc||src/rufus.rc",
      "src/stdlg.c||src/stdlg.c"
    ]
  },
  "patch_diff": {
    "res/localization/rufus.loc||res/localization/rufus.loc": [
      "File: res/localization/rufus.loc -> res/localization/rufus.loc",
      "--- Hunk 1 ---",
      "[Context before]",
      "487: # eg. \"Partitioning (MBR)...\"",
      "488: t MSG_238 \"Partitioning (%s)...\"",
      "489: t MSG_239 \"Deleting partitions...\"",
      "490: t MSG_241 \"Downloading: %0.1f%%\"",
      "491: t MSG_242 \"Failed to download file.\"",
      "492: t MSG_243 \"Checking for Rufus updates...\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: t MSG_240 \"The signature for the downloaded update can not be validated. This could mean that your \"",
      "491:  \"system is improperly configured for signature validation or indicate a malicious download.\\n\\n\"",
      "492:  \"The download will be deleted. Please check the log for more details.\"",
      "",
      "---------------"
    ],
    "src/pki.c||src/pki.c": [
      "File: src/pki.c -> src/pki.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "53:  static char error_string[64];",
      "54:  DWORD error_code = GetLastError();",
      "57:   return WindowsErrorString();",
      "59:  switch (error_code) {",
      "",
      "[Removed Lines]",
      "56:  if ((error_code >> 16) != 0x8009)",
      "",
      "[Added Lines]",
      "56:  if (((error_code >> 16) != 0x8009) && ((error_code >> 16) != 0x800B))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "113:   return \"Cannot complete usage check.\";",
      "114:  case CRYPT_E_NO_TRUSTED_SIGNER:",
      "115:   return \"None of the signers of the cryptographic message or certificate trust list is trusted.\";",
      "116:  default:",
      "117:   static_sprintf(error_string, \"Unknown PKI error 0x%08lX\", error_code);",
      "118:   return error_string;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "116:  case CERT_E_UNTRUSTEDROOT:",
      "117:   return \"The root certificate is not trusted.\";",
      "118:  case TRUST_E_NOSIGNATURE:",
      "119:   return \"Not digitally signed.\";",
      "120:  case TRUST_E_EXPLICIT_DISTRUST:",
      "121:   return \"One of the certificates used was marked as untrusted by the user.\";",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "268:  }",
      "270:  trust_data.cbStruct = sizeof(trust_data);",
      "273:  trust_data.fdwRevocationChecks = WTD_REVOKE_WHOLECHAIN;",
      "",
      "[Removed Lines]",
      "271:  trust_data.dwUIChoice = WTD_UI_ALL;",
      "",
      "[Added Lines]",
      "283:  trust_data.dwUIChoice = WTD_UI_NONE;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "279:  r = WinVerifyTrust(NULL, &guid_generic_verify, &trust_data);",
      "280:  safe_free(trust_file.pcwszFilePath);",
      "282:  return r;",
      "283: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "293:  switch (r) {",
      "294:  case ERROR_SUCCESS:",
      "295:   break;",
      "296:  case TRUST_E_NOSIGNATURE:",
      "298:   uprintf(\"PKI: File does not appear to be signed: %s\", WinPKIErrorString());",
      "299:   MessageBoxExU(hDlg, lmprintf(MSG_284), lmprintf(MSG_283), MB_OK | MB_ICONERROR | MB_IS_RTL, selected_langid);",
      "300:   break;",
      "301:  default:",
      "302:   uprintf(\"PKI: Failed to validate signature: %s\", WinPKIErrorString());",
      "303:   MessageBoxExU(hDlg, lmprintf(MSG_240), lmprintf(MSG_283), MB_OK | MB_ICONERROR | MB_IS_RTL, selected_langid);",
      "304:   break;",
      "305:  }",
      "",
      "---------------"
    ],
    "src/rufus.rc||src/rufus.rc": [
      "File: src/rufus.rc -> src/rufus.rc",
      "--- Hunk 1 ---",
      "[Context before]",
      "33: IDD_DIALOG DIALOGEX 12, 12, 242, 376",
      "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
      "35: EXSTYLE WS_EX_ACCEPTFILES",
      "37: FONT 8, \"Segoe UI Symbol\", 400, 0, 0x0",
      "38: BEGIN",
      "39:     LTEXT           \"Device\",IDS_DEVICE_TXT,9,6,200,8",
      "",
      "[Removed Lines]",
      "36: CAPTION \"Rufus 2.17.1186\"",
      "",
      "[Added Lines]",
      "36: CAPTION \"Rufus 2.17.1187\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "368: VS_VERSION_INFO VERSIONINFO",
      "371:  FILEFLAGSMASK 0x3fL",
      "372: #ifdef _DEBUG",
      "373:  FILEFLAGS 0x1L",
      "",
      "[Removed Lines]",
      "369:  FILEVERSION 2,17,1186,0",
      "370:  PRODUCTVERSION 2,17,1186,0",
      "",
      "[Added Lines]",
      "369:  FILEVERSION 2,17,1187,0",
      "370:  PRODUCTVERSION 2,17,1187,0",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "384:         BEGIN",
      "385:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
      "386:             VALUE \"FileDescription\", \"Rufus\"",
      "388:             VALUE \"InternalName\", \"Rufus\"",
      "389:             VALUE \"LegalCopyright\", \"\ufffd 2011-2017 Pete Batard (GPL v3)\"",
      "390:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
      "391:             VALUE \"OriginalFilename\", \"rufus.exe\"",
      "392:             VALUE \"ProductName\", \"Rufus\"",
      "394:         END",
      "395:     END",
      "396:     BLOCK \"VarFileInfo\"",
      "",
      "[Removed Lines]",
      "387:             VALUE \"FileVersion\", \"2.17.1186\"",
      "393:             VALUE \"ProductVersion\", \"2.17.1186\"",
      "",
      "[Added Lines]",
      "387:             VALUE \"FileVersion\", \"2.17.1187\"",
      "393:             VALUE \"ProductVersion\", \"2.17.1187\"",
      "",
      "---------------"
    ],
    "src/stdlg.c||src/stdlg.c": [
      "File: src/stdlg.c -> src/stdlg.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1674:    case 2:  // Launch newer version and close this one",
      "1675:     Sleep(1000); // Add a delay on account of antivirus scanners",
      "1678:      break;",
      "1680:     memset(&si, 0, sizeof(si));",
      "1681:     memset(&pi, 0, sizeof(pi));",
      "",
      "[Removed Lines]",
      "1677:     if (ValidateSignature(hDlg, filepath) != NO_ERROR)",
      "",
      "[Added Lines]",
      "1677:     if (ValidateSignature(hDlg, filepath) != NO_ERROR) {",
      "1679:      _unlinkU(filepath);",
      "1680:      EnableWindow(GetDlgItem(hDlg, IDC_DOWNLOAD), FALSE);",
      "1682:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "05f84004518c00bb02702604b6a12f390185407c",
      "candidate_info": {
        "commit_hash": "05f84004518c00bb02702604b6a12f390185407c",
        "repo": "pbatard/rufus",
        "commit_url": "https://github.com/pbatard/rufus/commit/05f84004518c00bb02702604b6a12f390185407c",
        "files": [
          ".vs/rufus.vcxproj",
          ".vs/rufus.vcxproj.filters",
          "src/Makefile.am",
          "src/Makefile.in",
          "src/rufus.c",
          "src/rufus.h",
          "src/rufus.rc",
          "src/stdfn.c",
          "src/stdlg.c",
          "src/ui.c",
          "src/ui.h",
          "src/ui_data.h"
        ],
        "message": "[misc] reorganize UI function calls into their own source\n\n* Also fix ARM/ARM64 broken compilation due to missing __popcnt()",
        "before_after_code_files": [
          ".vs/rufus.vcxproj||.vs/rufus.vcxproj",
          ".vs/rufus.vcxproj.filters||.vs/rufus.vcxproj.filters",
          "src/Makefile.am||src/Makefile.am",
          "src/Makefile.in||src/Makefile.in",
          "src/rufus.c||src/rufus.c",
          "src/rufus.h||src/rufus.h",
          "src/rufus.rc||src/rufus.rc",
          "src/stdfn.c||src/stdfn.c",
          "src/stdlg.c||src/stdlg.c",
          "src/ui.c||src/ui.c",
          "src/ui.h||src/ui.h",
          "src/ui_data.h||src/ui_data.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/rufus.rc||src/rufus.rc",
            "src/stdlg.c||src/stdlg.c"
          ],
          "candidate": [
            "src/rufus.rc||src/rufus.rc",
            "src/stdlg.c||src/stdlg.c"
          ]
        }
      },
      "candidate_diff": {
        ".vs/rufus.vcxproj||.vs/rufus.vcxproj": [
          "File: .vs/rufus.vcxproj -> .vs/rufus.vcxproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "340:     <ClCompile Include=\"..\\src\\stdlg.c\" />",
          "341:     <ClCompile Include=\"..\\src\\syslinux.c\" />",
          "342:     <ClCompile Include=\"..\\src\\dev.c\" />",
          "343:     <ClCompile Include=\"..\\src\\vhd.c\" />",
          "344:   </ItemGroup>",
          "345:   <ItemGroup>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "343:     <ClCompile Include=\"..\\src\\ui.c\" />",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "367:     <ClInclude Include=\"..\\src\\sys_types.h\" />",
          "368:     <ClInclude Include=\"..\\src\\dev.h\" />",
          "369:     <ClInclude Include=\"..\\src\\ui.h\" />",
          "370:   </ItemGroup>",
          "371:   <ItemGroup>",
          "372:     <Manifest Include=\"..\\src\\rufus.manifest\" />",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "371:     <ClInclude Include=\"..\\src\\ui_data.h\" />",
          "",
          "---------------"
        ],
        ".vs/rufus.vcxproj.filters||.vs/rufus.vcxproj.filters": [
          "File: .vs/rufus.vcxproj.filters -> .vs/rufus.vcxproj.filters",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:     <ClCompile Include=\"..\\src\\process.c\">",
          "79:       <Filter>Source Files</Filter>",
          "80:     </ClCompile>",
          "81:   </ItemGroup>",
          "82:   <ItemGroup>",
          "83:     <ClInclude Include=\"..\\src\\rufus.h\">",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:     <ClCompile Include=\"..\\src\\ui.c\">",
          "82:       <Filter>Source Files</Filter>",
          "83:     </ClCompile>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "152:     <ClInclude Include=\"..\\src\\ui.h\">",
          "153:       <Filter>Header Files</Filter>",
          "154:     </ClInclude>",
          "155:   </ItemGroup>",
          "156:   <ItemGroup>",
          "157:     <None Include=\"..\\res\\rufus.ico\">",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "158:     <ClInclude Include=\"..\\src\\ui_data.h\">",
          "159:       <Filter>Header Files</Filter>",
          "160:     </ClInclude>",
          "",
          "---------------"
        ],
        "src/Makefile.am||src/Makefile.am": [
          "File: src/Makefile.am -> src/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:  $(AM_V_WINDRES) $(AM_RCFLAGS) -i $< -o $@",
          "13: rufus_SOURCES = badblocks.c checksum.c dev.c dos.c dos_locale.c drive.c format.c icon.c iso.c localization.c \\",
          "15: rufus_CFLAGS = -I./ms-sys/inc -I./syslinux/libfat -I./syslinux/libinstaller -I./syslinux/win -I./libcdio $(AM_CFLAGS)",
          "16: rufus_LDFLAGS = $(AM_LDFLAGS) -mwindows",
          "17: rufus_LDADD = rufus_rc.o bled/libbled.a ms-sys/libmssys.a syslinux/libfat/libfat.a syslinux/libinstaller/libinstaller.a syslinux/win/libwin.a \\",
          "",
          "[Removed Lines]",
          "14:  net.c parser.c pki.c process.c rufus.c smart.c stdfn.c stdio.c stdlg.c syslinux.c vhd.c",
          "",
          "[Added Lines]",
          "14:  net.c parser.c pki.c process.c rufus.c smart.c stdfn.c stdio.c stdlg.c syslinux.c ui.c vhd.c",
          "",
          "---------------"
        ],
        "src/Makefile.in||src/Makefile.in": [
          "File: src/Makefile.in -> src/Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:  rufus-process.$(OBJEXT) rufus-rufus.$(OBJEXT) \\",
          "97:  rufus-smart.$(OBJEXT) rufus-stdfn.$(OBJEXT) \\",
          "98:  rufus-stdio.$(OBJEXT) rufus-stdlg.$(OBJEXT) \\",
          "100: rufus_OBJECTS = $(am_rufus_OBJECTS)",
          "101: rufus_DEPENDENCIES = rufus_rc.o bled/libbled.a ms-sys/libmssys.a \\",
          "102:  syslinux/libfat/libfat.a syslinux/libinstaller/libinstaller.a \\",
          "",
          "[Removed Lines]",
          "99:  rufus-syslinux.$(OBJEXT) rufus-vhd.$(OBJEXT)",
          "",
          "[Added Lines]",
          "99:  rufus-syslinux.$(OBJEXT) rufus-ui.$(OBJEXT) \\",
          "100:  rufus-vhd.$(OBJEXT)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "271: AM_V_WINDRES_ = $(AM_V_WINDRES_$(AM_DEFAULT_VERBOSITY))",
          "272: AM_V_WINDRES = $(AM_V_WINDRES_$(V))",
          "273: rufus_SOURCES = badblocks.c checksum.c dev.c dos.c dos_locale.c drive.c format.c icon.c iso.c localization.c \\",
          "276: rufus_CFLAGS = -I./ms-sys/inc -I./syslinux/libfat -I./syslinux/libinstaller -I./syslinux/win -I./libcdio $(AM_CFLAGS)",
          "277: rufus_LDFLAGS = $(AM_LDFLAGS) -mwindows",
          "",
          "[Removed Lines]",
          "274:  net.c parser.c pki.c process.c rufus.c smart.c stdfn.c stdio.c stdlg.c syslinux.c vhd.c",
          "",
          "[Added Lines]",
          "275:  net.c parser.c pki.c process.c rufus.c smart.c stdfn.c stdio.c stdlg.c syslinux.c ui.c vhd.c",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "452: rufus-syslinux.obj: syslinux.c",
          "453:  $(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rufus_CFLAGS) $(CFLAGS) -c -o rufus-syslinux.obj `if test -f 'syslinux.c'; then $(CYGPATH_W) 'syslinux.c'; else $(CYGPATH_W) '$(srcdir)/syslinux.c'; fi`",
          "455: rufus-vhd.o: vhd.c",
          "456:  $(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rufus_CFLAGS) $(CFLAGS) -c -o rufus-vhd.o `test -f 'vhd.c' || echo '$(srcdir)/'`vhd.c",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "456: rufus-ui.o: ui.c",
          "457:  $(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rufus_CFLAGS) $(CFLAGS) -c -o rufus-ui.o `test -f 'ui.c' || echo '$(srcdir)/'`ui.c",
          "459: rufus-ui.obj: ui.c",
          "460:  $(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rufus_CFLAGS) $(CFLAGS) -c -o rufus-ui.obj `if test -f 'ui.c'; then $(CYGPATH_W) 'ui.c'; else $(CYGPATH_W) '$(srcdir)/ui.c'; fi`",
          "",
          "---------------"
        ],
        "src/rufus.c||src/rufus.c": [
          "File: src/rufus.c -> src/rufus.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: #include <io.h>",
          "37: #include <getopt.h>",
          "38: #include <assert.h>",
          "41: #include \"rufus.h\"",
          "42: #include \"missing.h\"",
          "",
          "[Removed Lines]",
          "39: #include <intrin.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54: static const char* cmdline_hogger = \"rufus.com\";",
          "55: static const char* FileSystemLabel[FS_MAX] = { \"FAT\", \"FAT32\", \"NTFS\", \"UDF\", \"exFAT\", \"ReFS\" };",
          "57: static const char* ep_reg = \"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\";",
          "58: static const char* vs_reg = \"Software\\\\Microsoft\\\\VisualStudio\";",
          "61: static BOOL existing_key = FALSE; // For LGP set/restore",
          "62: static BOOL size_check = TRUE;",
          "63: static BOOL log_displayed = FALSE;",
          "",
          "[Removed Lines]",
          "56: static const char* flash_type[BADLOCKS_PATTERN_TYPES] = { \"SLC\", \"MLC\", \"TLC\" };",
          "60: const int nb_steps[FS_MAX] = { 5, 5, 12, 1, 10 };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69: static BOOL app_changed_label = FALSE;",
          "70: static BOOL allowed_filesystem[FS_MAX] = { 0 };",
          "71: static int64_t last_iso_blocking_status;",
          "77: static RECT relaunch_rc = { -65536, -65536, 0, 0};",
          "78: static UINT uQFChecked = BST_CHECKED, uMBRChecked = BST_UNCHECKED;",
          "81: static HANDLE format_thid = NULL, dialog_handle = NULL;",
          "82: static HWND hSelectImage = NULL, hStart = NULL;",
          "83: static char szTimer[12] = \"00:00:00\";",
          "85: static unsigned int timer;",
          "86: static char uppercase_select[64], uppercase_start[64], uppercase_close[64], uppercase_cancel[64];",
          "",
          "[Removed Lines]",
          "72: static int windows_to_go_selection = 0, selected_pt = -1, selected_fs = -1;",
          "73: static int selection_default, row_height, advanced_device_section_height, advanced_format_section_height, image_index;",
          "74: static int ddh, bw, hw, fw; // DropDown Height, Main button width, half dropdown width, full dropdown width",
          "75: static int sw, mw, bsw, sbw, ssw, tw, dbw; // See GetFullWidth() for details on how these values are used",
          "76: static UINT_PTR UM_LANGUAGE_MENU_MAX = UM_LANGUAGE_MENU;",
          "79: static HFONT hInfoFont;",
          "80: static WNDPROC progress_original_proc = NULL;",
          "84: static wchar_t wtbtext[2][128];",
          "",
          "[Added Lines]",
          "68: static int selected_pt = -1, selected_fs = -1;",
          "69: static int image_index;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "91: extern char* szStatusMessage;",
          "92: extern const char* old_c32_name[NB_OLD_C32];",
          "93: extern const char* cert_name[3];",
          "",
          "[Removed Lines]",
          "94: extern const char* sfd_name;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "100: RUFUS_UPDATE update = { { 0,0,0 },{ 0,0 }, NULL, NULL };",
          "101: HINSTANCE hMainInstance;",
          "102: HWND hMainDialog, hMultiToolbar, hSaveToolbar, hHashToolbar, hAdvancedDeviceToolbar, hAdvancedFormatToolbar, hUpdatesDlg = NULL;",
          "104: uint8_t image_options = 0x00;",
          "105: uint16_t rufus_version[3], embedded_sl_version[2];",
          "106: uint32_t dur_mins, dur_secs, DrivePort[MAX_DRIVES];;",
          "",
          "[Removed Lines]",
          "103: HIMAGELIST hUpImageList, hDownImageList;",
          "",
          "[Added Lines]",
          "92: HFONT hInfoFont;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "116: BOOL use_fake_units, preserve_timestamps = FALSE;",
          "117: BOOL zero_drive = FALSE, list_non_usb_removable_drives = FALSE, enable_file_indexing, large_drive = FALSE, write_as_image = FALSE;",
          "118: float fScale = 1.0f;",
          "120: int default_fs, fs, bt, pt, tt; // file system, boot type, partition type, target type",
          "122: char szFolderPath[MAX_PATH], app_dir[MAX_PATH], system_dir[MAX_PATH], temp_dir[MAX_PATH], sysnative_dir[MAX_PATH];",
          "123: char embedded_sl_version_str[2][12] = { \"?.??\", \"?.??\" };",
          "124: char embedded_sl_version_ext[2][32];",
          "125: char ClusterSizeLabel[MAX_CLUSTER_SIZES][64];",
          "126: char msgbox[1024], msgbox_title[32], *ini_file = NULL, *image_path = NULL, *short_image_path;",
          "127: StrArray DriveID, DriveLabel, DriveHub, BlockingProcess, ImageList;",
          "160: static void SetClusterSizeLabels(void)",
          "161: {",
          "",
          "[Removed Lines]",
          "119: int dialog_showing = 0;",
          "121: int cbw, ddw, ddbh = 0, bh = 0; // (empty) check box width, (empty) drop down width, button height (for and without dropdown match)",
          "129: static void ToggleImageOption(uint8_t mask);",
          "139: static int nb_slots[OP_MAX];",
          "140: static float slot_end[OP_MAX+1]; // shifted +1 so that we can subtract 1 to OP indexes",
          "141: static float previous_end;",
          "147: static void SetComboEntry(HWND hDlg, int data) {",
          "148:  int i;",
          "149:  for (i = 0; i < ComboBox_GetCount(hDlg); i++) {",
          "150:   if (ComboBox_GetItemData(hDlg, i) == data) {",
          "151:    IGNORE_RETVAL(ComboBox_SetCurSel(hDlg, i));",
          "152:    break;",
          "153:   }",
          "154:  }",
          "155:  if (i == ComboBox_GetCount(hDlg))",
          "156:   IGNORE_RETVAL(ComboBox_SetCurSel(hDlg, 0));",
          "157: }",
          "",
          "[Added Lines]",
          "108: int dialog_showing = 0, selection_default, windows_to_go_selection = 0;",
          "117: const int nb_steps[FS_MAX] = { 5, 5, 12, 1, 10 };",
          "118: const char* flash_type[BADLOCKS_PATTERN_TYPES] = { \"SLC\", \"MLC\", \"TLC\" };",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "656:  }",
          "657: }",
          "660: static void EnableMBRBootOptions(BOOL enable, BOOL remove_checkboxes)",
          "661: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "623: static void SetProposedLabel(int ComboIndex)",
          "624: {",
          "625:  const char no_label[] = STR_NO_LABEL, empty[] = \"\";",
          "627:  app_changed_label = TRUE;",
          "630:  if ((bt == BT_IMAGE) && (image_path != NULL) && (img_report.label[0] != 0)) {",
          "631:   SetWindowTextU(hLabel, img_report.label);",
          "633:   user_changed_label = FALSE;",
          "634:   return;",
          "635:  }",
          "638:  if (user_changed_label) {",
          "639:   app_changed_label = FALSE;",
          "640:   return;",
          "641:  }",
          "644:  if (ComboIndex < 0) {",
          "645:   SetWindowTextU(hLabel, \"\");",
          "646:   return;",
          "647:  }",
          "650:  if ((_stricmp(no_label, DriveLabel.String[ComboIndex]) == 0) || (_stricmp(no_label, empty) == 0)",
          "651:   || (safe_stricmp(lmprintf(MSG_207), DriveLabel.String[ComboIndex]) == 0)) {",
          "652:   SetWindowTextU(hLabel, SelectedDrive.proposed_label);",
          "653:  } else {",
          "654:   SetWindowTextU(hLabel, DriveLabel.String[ComboIndex]);",
          "655:  }",
          "656: }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "740:  EnableWindow(GetDlgItem(hMainDialog, IDC_EXTENDED_LABEL), actual_enable);",
          "741: }",
          "779: static void EnableControls(BOOL bEnable)",
          "780: {",
          "",
          "[Removed Lines]",
          "743: static void SetProposedLabel(int ComboIndex)",
          "744: {",
          "745:  const char no_label[] = STR_NO_LABEL, empty[] = \"\";",
          "747:  app_changed_label = TRUE;",
          "750:  if ((bt == BT_IMAGE) && (image_path != NULL) && (img_report.label[0] != 0)) {",
          "751:   SetWindowTextU(hLabel, img_report.label);",
          "753:   user_changed_label = FALSE;",
          "754:   return;",
          "755:  }",
          "758:  if (user_changed_label) {",
          "759:   app_changed_label = FALSE;",
          "760:   return;",
          "761:  }",
          "764:  if (ComboIndex < 0) {",
          "765:   SetWindowTextU(hLabel, \"\");",
          "766:   return;",
          "767:  }",
          "770:  if ((_stricmp(no_label, DriveLabel.String[ComboIndex]) == 0) || (_stricmp(no_label, empty) == 0)",
          "771:   || (safe_stricmp(lmprintf(MSG_207), DriveLabel.String[ComboIndex]) == 0)) {",
          "772:   SetWindowTextU(hLabel, SelectedDrive.proposed_label);",
          "773:  } else {",
          "774:   SetWindowTextU(hLabel, DriveLabel.String[ComboIndex]);",
          "775:  }",
          "776: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "865:  return TRUE;",
          "866: }",
          "991: BOOL CALLBACK LogCallback(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)",
          "992: {",
          "",
          "[Removed Lines]",
          "869: static void InitProgress(BOOL bOnlyFormat)",
          "870: {",
          "871:  int i;",
          "872:  float last_end = 0.0f, slots_discrete = 0.0f, slots_analog = 0.0f;",
          "874:  memset(nb_slots, 0, sizeof(nb_slots));",
          "875:  memset(slot_end, 0, sizeof(slot_end));",
          "876:  previous_end = 0.0f;",
          "878:  if (bOnlyFormat) {",
          "879:   nb_slots[OP_FORMAT] = -1;",
          "880:  } else {",
          "881:   nb_slots[OP_ANALYZE_MBR] = 1;",
          "882:   if (IsChecked(IDC_BAD_BLOCKS)) {",
          "883:    nb_slots[OP_BADBLOCKS] = -1;",
          "884:   }",
          "885:   if (bt != BT_NON_BOOTABLE) {",
          "887:    switch (selection_default) {",
          "888:    case BT_MSDOS:",
          "889:     nb_slots[OP_DOS] = 3+1;",
          "890:     break;",
          "891:    case BT_FREEDOS:",
          "892:     nb_slots[OP_DOS] = 5+1;",
          "893:     break;",
          "894:    case BT_IMAGE:",
          "895:     nb_slots[OP_DOS] = img_report.is_iso ? -1 : 0;",
          "896:     break;",
          "897:    default:",
          "898:     nb_slots[OP_DOS] = 2+1;",
          "899:     break;",
          "900:    }",
          "901:   }",
          "902:   if (selection_default == BT_IMAGE && !img_report.is_iso) {",
          "903:    nb_slots[OP_FORMAT] = -1;",
          "904:   } else {",
          "905:    nb_slots[OP_ZERO_MBR] = 1;",
          "906:    nb_slots[OP_PARTITION] = 1;",
          "907:    nb_slots[OP_FIX_MBR] = 1;",
          "908:    nb_slots[OP_CREATE_FS] =",
          "909:     nb_steps[ComboBox_GetItemData(hFileSystem, ComboBox_GetCurSel(hFileSystem))];",
          "910:    if ( (!IsChecked(IDC_QUICK_FORMAT))",
          "911:      || ((fs == FS_FAT32) && ((SelectedDrive.DiskSize >= LARGE_FAT32_SIZE) || (force_large_fat32))) ) {",
          "912:     nb_slots[OP_FORMAT] = -1;",
          "913:    }",
          "914:    nb_slots[OP_FINALIZE] = ((selection_default == BT_IMAGE) && (fs == FS_NTFS))?3:2;",
          "915:   }",
          "916:  }",
          "918:  for (i=0; i<OP_MAX; i++) {",
          "919:   if (nb_slots[i] > 0) {",
          "920:    slots_discrete += nb_slots[i]*1.0f;",
          "921:   }",
          "922:   if (nb_slots[i] < 0) {",
          "923:    slots_analog += nb_slots[i]*1.0f;",
          "924:   }",
          "925:  }",
          "927:  for (i=0; i<OP_MAX; i++) {",
          "928:   if (nb_slots[i] == 0) {",
          "929:    slot_end[i+1] = last_end;",
          "930:   } else if (nb_slots[i] > 0) {",
          "931:    slot_end[i+1] = last_end + (1.0f * nb_slots[i]);",
          "932:   } else if (nb_slots[i] < 0) {",
          "933:    slot_end[i+1] = last_end + (( (100.0f-slots_discrete) * nb_slots[i]) / slots_analog);",
          "934:   }",
          "935:   last_end = slot_end[i+1];",
          "936:  }",
          "939:  if (slots_analog == 0.0f) {",
          "940:   for (i=0; i<OP_MAX; i++) {",
          "941:    slot_end[i+1] *= 100.0f / slots_discrete;",
          "942:   }",
          "943:  }",
          "944: }",
          "947: void UpdateProgress(int op, float percent)",
          "948: {",
          "949:  int pos;",
          "950:  static uint64_t LastRefresh = 0;",
          "952:  if ((op < 0) || (op >= OP_MAX)) {",
          "953:   duprintf(\"UpdateProgress: invalid op %d\\n\", op);",
          "954:   return;",
          "955:  }",
          "956:  if (percent > 100.1f) {",
          "958:   return;",
          "959:  }",
          "960:  if ((percent < 0.0f) && (nb_slots[op] <= 0)) {",
          "961:   duprintf(\"UpdateProgress(%d): error negative percentage sent for negative slot value\\n\", op);",
          "962:   return;",
          "963:  }",
          "964:  if (nb_slots[op] == 0)",
          "965:   return;",
          "966:  if (previous_end < slot_end[op]) {",
          "967:   previous_end = slot_end[op];",
          "968:  }",
          "970:  if (percent < 0.0f) {",
          "972:   previous_end += (slot_end[op+1] - slot_end[op]) / (1.0f * nb_slots[op]);",
          "973:   pos = (int)(previous_end / 100.0f * MAX_PROGRESS);",
          "974:  } else {",
          "975:   pos = (int)((previous_end + ((slot_end[op+1] - previous_end) * (percent / 100.0f))) / 100.0f * MAX_PROGRESS);",
          "976:  }",
          "977:  if (pos > MAX_PROGRESS) {",
          "978:   duprintf(\"UpdateProgress(%d): rounding error - pos %d is greater than %d\\n\", op, pos, MAX_PROGRESS);",
          "979:   pos = MAX_PROGRESS;",
          "980:  }",
          "983:  if (GetTickCount64() > LastRefresh + (2 * MAX_REFRESH)) {",
          "984:   LastRefresh = GetTickCount64();",
          "985:   SendMessage(hProgress, PBM_SETPOS, (WPARAM)pos, 0);",
          "986:   SetTaskbarProgressValue(pos, MAX_PROGRESS);",
          "987:  }",
          "988: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1160:  SetImageOptions();",
          "1161: }",
          "1354: static void UpdateImage(void)",
          "1355: {",
          "",
          "[Removed Lines]",
          "1164: static __inline void MoveCtrlY(HWND hDlg, int nID, int vertical_shift) {",
          "1165:  ResizeMoveCtrl(hDlg, GetDlgItem(hDlg, nID), 0, vertical_shift, 0, 0, 1.0f);",
          "1166: }",
          "1168: static void SetPassesTooltip(void)",
          "1169: {",
          "1170:  const unsigned int pattern[BADLOCKS_PATTERN_TYPES][BADBLOCK_PATTERN_COUNT] =",
          "1171:   { BADBLOCK_PATTERN_SLC, BADCLOCK_PATTERN_MLC, BADBLOCK_PATTERN_TLC };",
          "1172:  int sel = ComboBox_GetCurSel(hNBPasses);",
          "1173:  int type = (sel < 2) ? 0 : sel - 2;",
          "1174:  CreateTooltip(hNBPasses, lmprintf(MSG_153 + ((sel >= 2) ? 3 : sel),",
          "1175:   pattern[type][0], pattern[type][1], pattern[type][2], pattern[type][3]), -1);",
          "1176: }",
          "1178: static void ResizeDialogs(int shift)",
          "1179: {",
          "1180:  RECT rc;",
          "1181:  POINT point;",
          "1184:  GetWindowRect(hMainDialog, &rc);",
          "1185:  point.x = (rc.right - rc.left);",
          "1186:  point.y = (rc.bottom - rc.top);",
          "1187:  MoveWindow(hMainDialog, rc.left, rc.top, point.x, point.y + shift, TRUE);",
          "1190:  GetWindowRect(hLogDialog, &rc);",
          "1191:  point.x = (rc.right - rc.left);",
          "1192:  point.y = (rc.bottom - rc.top);",
          "1193:  MoveWindow(hLogDialog, rc.left, rc.top, point.x, point.y + shift, TRUE);",
          "1194:  MoveCtrlY(hLogDialog, IDC_LOG_CLEAR, shift);",
          "1195:  MoveCtrlY(hLogDialog, IDC_LOG_SAVE, shift);",
          "1196:  MoveCtrlY(hLogDialog, IDCANCEL, shift);",
          "1197:  GetWindowRect(hLog, &rc);",
          "1198:  point.x = (rc.right - rc.left);",
          "1199:  point.y = (rc.bottom - rc.top) + shift;",
          "1200:  SetWindowPos(hLog, NULL, 0, 0, point.x, point.y, SWP_NOZORDER);",
          "1202:  Edit_Scroll(hLog, 0, Edit_GetLineCount(hLog));",
          "1203: }",
          "1206: static void ToggleAdvancedDeviceOptions(BOOL enable)",
          "1207: {",
          "1208:  RECT rc;",
          "1209:  SIZE sz;",
          "1210:  TBBUTTONINFO button_info;",
          "1211:  int i, shift = advanced_device_section_height;",
          "1213:  if (!enable)",
          "1214:   shift = -shift;",
          "1215:  section_vpos[1] += shift;",
          "1216:  section_vpos[2] += shift;",
          "1219:  utf8_to_wchar_no_alloc(lmprintf((enable) ? MSG_122 : MSG_121, lmprintf(MSG_119)), wtbtext[0], ARRAYSIZE(wtbtext[0]));",
          "1220:  button_info.cbSize = sizeof(button_info);",
          "1221:  button_info.dwMask = TBIF_TEXT;",
          "1222:  button_info.pszText = wtbtext[0];",
          "1223:  SendMessage(hAdvancedDeviceToolbar, TB_SETBUTTONINFO, (WPARAM)IDC_ADVANCED_DRIVE_PROPERTIES, (LPARAM)&button_info);",
          "1224:  SendMessage(hAdvancedDeviceToolbar, TB_SETIMAGELIST, (WPARAM)0, (LPARAM)((enable) ? hUpImageList : hDownImageList));",
          "1225:  GetWindowRect(hAdvancedDeviceToolbar, &rc);",
          "1226:  MapWindowPoints(NULL, hMainDialog, (POINT*)&rc, 2);",
          "1227:  SendMessage(hAdvancedDeviceToolbar, TB_GETIDEALSIZE, (WPARAM)FALSE, (LPARAM)&sz);",
          "1228:  SetWindowPos(hAdvancedDeviceToolbar, hTargetSystem, rc.left, rc.top, sz.cx, rc.bottom - rc.top, 0);",
          "1231:  for (i = 0; i<ARRAYSIZE(advanced_device_move_ids); i++)",
          "1232:   MoveCtrlY(hMainDialog, advanced_device_move_ids[i], shift);",
          "1235:  for (i = 0; i<ARRAYSIZE(advanced_device_toggle_ids); i++)",
          "1236:   ShowWindow(GetDlgItem(hMainDialog, advanced_device_toggle_ids[i]), enable ? SW_SHOW : SW_HIDE);",
          "1238:  GetWindowRect(hDeviceList, &rc);",
          "1239:  MapWindowPoints(NULL, hMainDialog, (POINT*)&rc, 2);",
          "1240:  SetWindowPos(hDeviceList, HWND_TOP, rc.left, rc.top, enable ? fw - ssw - sbw : fw, rc.bottom - rc.top, 0);",
          "1243:  ResizeDialogs(shift);",
          "1246:  InvalidateRect(hMainDialog, NULL, TRUE);",
          "1247: }",
          "1249: static void ToggleAdvancedFormatOptions(BOOL enable)",
          "1250: {",
          "1251:  RECT rc;",
          "1252:  SIZE sz;",
          "1253:  TBBUTTONINFO button_info;",
          "1254:  int i, shift = advanced_format_section_height;",
          "1256:  if (!enable)",
          "1257:   shift = -shift;",
          "1258:  section_vpos[2] += shift;",
          "1261:  utf8_to_wchar_no_alloc(lmprintf((enable) ? MSG_122 : MSG_121, lmprintf(MSG_120)), wtbtext[1], ARRAYSIZE(wtbtext[0]));",
          "1262:  button_info.cbSize = sizeof(button_info);",
          "1263:  button_info.dwMask = TBIF_TEXT;",
          "1264:  button_info.pszText = wtbtext[1];",
          "1265:  SendMessage(hAdvancedFormatToolbar, TB_SETBUTTONINFO, (WPARAM)IDC_ADVANCED_FORMAT_OPTIONS, (LPARAM)&button_info);",
          "1266:  SendMessage(hAdvancedFormatToolbar, TB_SETIMAGELIST, (WPARAM)0, (LPARAM)((enable) ? hUpImageList : hDownImageList));",
          "1267:  GetWindowRect(hAdvancedFormatToolbar, &rc);",
          "1268:  MapWindowPoints(NULL, hMainDialog, (POINT*)&rc, 2);",
          "1269:  SendMessage(hAdvancedFormatToolbar, TB_GETIDEALSIZE, (WPARAM)FALSE, (LPARAM)&sz);",
          "1270:  SetWindowPos(hAdvancedFormatToolbar, hClusterSize, rc.left, rc.top, sz.cx, rc.bottom - rc.top, 0);",
          "1273:  for (i = 0; i<ARRAYSIZE(advanced_format_move_ids); i++)",
          "1274:   MoveCtrlY(hMainDialog, advanced_format_move_ids[i], shift);",
          "1277:  for (i = 0; i<ARRAYSIZE(advanced_format_toggle_ids); i++)",
          "1278:   ShowWindow(GetDlgItem(hMainDialog, advanced_format_toggle_ids[i]), enable ? SW_SHOW : SW_HIDE);",
          "1281:  ResizeDialogs(shift);",
          "1284:  InvalidateRect(hMainDialog, NULL, TRUE);",
          "1285: }",
          "1288: static void ToggleImageOption(uint8_t mask)",
          "1289: {",
          "1290:  int i, shift = (__popcnt16(image_options) >= 2) ? 0 : row_height;",
          "1292:  assert(__popcnt16(mask) <= 1);",
          "1294:  if (mask & IMOP_WINTOGO) {",
          "1295:   if (nWindowsVersion < WINDOWS_8)",
          "1296:    return;",
          "1297:   image_options ^= IMOP_WINTOGO;",
          "1299:   IGNORE_RETVAL(ComboBox_SetCurSel(GetDlgItem(hMainDialog, IDC_IMAGE_OPTION), windows_to_go_selection));",
          "1300:  } else if (mask & IMOP_PERSISTENCE) {",
          "1301:   image_options ^= IMOP_PERSISTENCE;",
          "1302:  }",
          "1304:  if (__popcnt16(image_options) >= 2)",
          "1305:   shift = 0;",
          "1307:  if (shift != 0) {",
          "1308:   if ((mask == 0) || (image_options == 0))",
          "1309:    shift = -shift;",
          "1310:   section_vpos[1] += shift;",
          "1311:   section_vpos[2] += shift;",
          "1313:   if (__popcnt16(image_options) <= 1) {",
          "1315:    for (i = 0; i < ARRAYSIZE(image_option_move_ids); i++)",
          "1316:     MoveCtrlY(hMainDialog, image_option_move_ids[i], shift);",
          "1319:    ResizeDialogs(shift);",
          "1320:   }",
          "1321:  }",
          "1324:  for (i = 0; i < ARRAYSIZE(image_option_toggle_ids); i++) {",
          "1325:   ShowWindow(GetDlgItem(hMainDialog, image_option_toggle_ids[i][0]),",
          "1326:    (image_options & image_option_toggle_ids[i][1]) ? SW_SHOW : SW_HIDE);",
          "1327:  }",
          "1330:  InvalidateRect(hMainDialog, NULL, TRUE);",
          "1331: }",
          "1333: static void SetBootTypeDropdownWidth(void)",
          "1334: {",
          "1335:  HDC hDC;",
          "1336:  HFONT hFont;",
          "1337:  SIZE sz;",
          "1338:  RECT rc;",
          "1340:  if (image_path == NULL)",
          "1341:   return;",
          "1343:  GetWindowRect(hBootType, &rc);",
          "1344:  MapWindowPoints(NULL, hMainDialog, (POINT*)&rc, 2);",
          "1345:  hDC = GetDC(hBootType);",
          "1346:  hFont = (HFONT)SendMessageA(hBootType, WM_GETFONT, 0, 0);",
          "1347:  SelectObject(hDC, hFont);",
          "1348:  GetTextExtentPointU(hDC, short_image_path, &sz);",
          "1349:  safe_release_dc(hBootType, hDC);",
          "1350:  SendMessage(hBootType, CB_SETDROPPEDWIDTH, (WPARAM)max(sz.cx + 10, rc.right - rc.left), (LPARAM)0);",
          "1351: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1812: #endif",
          "1813: }",
          "2560: static void InitDialog(HWND hDlg)",
          "2561: {",
          "2562:  DWORD len;",
          "",
          "[Removed Lines]",
          "1815: static INT_PTR CALLBACK ProgressCallback(HWND hCtrl, UINT message, WPARAM wParam, LPARAM lParam)",
          "1816: {",
          "1817:  HDC hDC;",
          "1818:  RECT rc, rc2;",
          "1819:  PAINTSTRUCT ps;",
          "1820:  SIZE size;",
          "1821:  LONG full_right;",
          "1822:  wchar_t winfo[128];",
          "1823:  static BOOL marquee_mode = FALSE;",
          "1824:  static uint32_t pos = 0, min = 0, max = 0xFFFF;",
          "1825:  static COLORREF color = PROGRESS_BAR_NORMAL_COLOR;",
          "1827:  switch (message) {",
          "1829:  case PBM_SETSTATE:",
          "1830:   switch (wParam) {",
          "1831:   case PBST_NORMAL:",
          "1832:    color = PROGRESS_BAR_NORMAL_COLOR;",
          "1833:    break;",
          "1834:   case PBST_PAUSED:",
          "1835:    color = PROGRESS_BAR_PAUSED_COLOR;",
          "1836:    break;",
          "1837:   case PBST_ERROR:",
          "1838:    color = PROGRESS_BAR_ERROR_COLOR;",
          "1839:    break;",
          "1840:   }",
          "1841:   return (INT_PTR)TRUE;",
          "1843:  case PBM_SETRANGE:",
          "1846:   min = (uint32_t)(lParam & 0xFFFF);",
          "1847:   max = (uint32_t)(lParam >> 16);",
          "1848:   return (INT_PTR)TRUE;",
          "1850:  case PBM_SETPOS:",
          "1851:   pos = (WORD)wParam;",
          "1852:   InvalidateRect(hProgress, NULL, TRUE);",
          "1853:   return (INT_PTR)TRUE;",
          "1855:  case PBM_SETMARQUEE:",
          "1856:   if ((wParam == TRUE) && (!marquee_mode)) {",
          "1857:    marquee_mode = TRUE;",
          "1858:    pos = min;",
          "1859:    color = PROGRESS_BAR_NORMAL_COLOR;",
          "1860:    SetTimer(hCtrl, TID_MARQUEE_TIMER, MARQUEE_TIMER_REFRESH, NULL);",
          "1861:    InvalidateRect(hProgress, NULL, TRUE);",
          "1862:   } else if ((wParam == FALSE) && (marquee_mode)) {",
          "1863:    marquee_mode = FALSE;",
          "1864:    KillTimer(hCtrl, TID_MARQUEE_TIMER);",
          "1865:    pos = min;",
          "1866:    InvalidateRect(hProgress, NULL, TRUE);",
          "1867:   }",
          "1868:   return (INT_PTR)TRUE;",
          "1870:  case WM_TIMER:",
          "1871:   if ((wParam == TID_MARQUEE_TIMER) && marquee_mode) {",
          "1872:    pos += max((max - min) / (1000 / MARQUEE_TIMER_REFRESH), 1);",
          "1873:    if ((pos > max) || (pos < min))",
          "1874:     pos = min;",
          "1875:    InvalidateRect(hProgress, NULL, TRUE);",
          "1876:    return (INT_PTR)TRUE;",
          "1877:   }",
          "1878:   return (INT_PTR)FALSE;",
          "1880:  case WM_PAINT:",
          "1881:   hDC = BeginPaint(hCtrl, &ps);",
          "1882:   GetClientRect(hCtrl, &rc);",
          "1883:   rc2 = rc;",
          "1884:   InflateRect(&rc, -1, -1);",
          "1885:   SelectObject(hDC, GetStockObject(DC_PEN));",
          "1886:   SelectObject(hDC, GetStockObject(NULL_BRUSH));",
          "1888:   GetWindowTextW(hProgress, winfo, ARRAYSIZE(winfo));",
          "1889:   SelectObject(hDC, hInfoFont);",
          "1890:   GetTextExtentPoint32(hDC, winfo, (int)wcslen(winfo), &size);",
          "1891:   if (size.cx > rc.right)",
          "1892:    size.cx = rc.right;",
          "1893:   if (size.cy > rc.bottom)",
          "1894:    size.cy = rc.bottom;",
          "1895:   full_right = rc.right;",
          "1896:   if (marquee_mode) {",
          "1898:    if (pos + ((max - min) / 5) > max) {",
          "1899:     rc.right = MulDiv(pos + ((max - min) / 5) - max, rc.right, max - min);",
          "1900:     SetTextColor(hDC, PROGRESS_BAR_INVERTED_TEXT_COLOR);",
          "1901:     SetBkColor(hDC, color);",
          "1902:     ExtTextOut(hDC, (full_right - size.cx) / 2, (rc.bottom - size.cy) / 2,",
          "1903:      ETO_CLIPPED | ETO_OPAQUE | ETO_NUMERICSLOCAL, &rc, winfo, (int)wcslen(winfo), NULL);",
          "1904:     rc.left = rc.right;",
          "1905:     rc.right = full_right;",
          "1906:    }",
          "1908:    if (pos > min) {",
          "1909:     rc.right = MulDiv(pos - min, rc.right, max - min);",
          "1910:     SetTextColor(hDC, PROGRESS_BAR_NORMAL_TEXT_COLOR);",
          "1911:     SetBkColor(hDC, PROGRESS_BAR_BACKGROUND_COLOR);",
          "1912:     ExtTextOut(hDC, (full_right - size.cx) / 2, (rc.bottom - size.cy) / 2,",
          "1913:      ETO_CLIPPED | ETO_OPAQUE | ETO_NUMERICSLOCAL, &rc, winfo, (int)wcslen(winfo), NULL);",
          "1914:     rc.left = rc.right;",
          "1915:     rc.right = full_right;",
          "1916:    }",
          "1918:    rc.right = MulDiv(pos - min + ((max - min) / 5), rc.right, max - min);",
          "1919:    SetTextColor(hDC, PROGRESS_BAR_INVERTED_TEXT_COLOR);",
          "1920:    SetBkColor(hDC, color);",
          "1921:    ExtTextOut(hDC, (full_right - size.cx) / 2, (rc.bottom - size.cy) / 2,",
          "1922:     ETO_CLIPPED | ETO_OPAQUE | ETO_NUMERICSLOCAL, &rc, winfo, (int)wcslen(winfo), NULL);",
          "1923:   } else {",
          "1925:    rc.right = (pos > min) ? MulDiv(pos - min, rc.right, max - min) : rc.left;",
          "1926:    SetTextColor(hDC, PROGRESS_BAR_INVERTED_TEXT_COLOR);",
          "1927:    SetBkColor(hDC, color);",
          "1928:    ExtTextOut(hDC, (full_right - size.cx) / 2, (rc.bottom - size.cy) / 2,",
          "1929:     ETO_CLIPPED | ETO_OPAQUE | ETO_NUMERICSLOCAL, &rc, winfo, (int)wcslen(winfo), NULL);",
          "1930:   }",
          "1932:   rc.left = rc.right;",
          "1933:   rc.right = full_right;",
          "1934:   SetTextColor(hDC, PROGRESS_BAR_NORMAL_TEXT_COLOR);",
          "1935:   SetBkColor(hDC, PROGRESS_BAR_BACKGROUND_COLOR);",
          "1936:   ExtTextOut(hDC, (full_right - size.cx) / 2, (rc.bottom - size.cy) / 2,",
          "1937:    ETO_CLIPPED | ETO_OPAQUE | ETO_NUMERICSLOCAL, &rc, winfo, (int)wcslen(winfo), NULL);",
          "1939:   SetDCPenColor(hDC, PROGRESS_BAR_BOX_COLOR);",
          "1940:   Rectangle(hDC, rc2.left, rc2.top, rc2.right, rc2.bottom);",
          "1941:   EndPaint(hCtrl, &ps);",
          "1942:   return (INT_PTR)TRUE;",
          "1943:  }",
          "1945:  return CallWindowProc(progress_original_proc, hCtrl, message, wParam, lParam);",
          "1946: }",
          "1949: static void CreateSmallButtons(HWND hDlg)",
          "1950: {",
          "1951:  HIMAGELIST hImageList;",
          "1952:  HICON hIconSave, hIconHash;",
          "1953:  int icon_offset = 0, i16 = GetSystemMetrics(SM_CXSMICON);",
          "1954:  TBBUTTON tbToolbarButtons[1];",
          "1955:  unsigned char* buffer;",
          "1956:  DWORD bufsize;",
          "1958:  if (i16 >= 28)",
          "1959:   icon_offset = 20;",
          "1960:  else if (i16 >= 20)",
          "1961:   icon_offset = 10;",
          "1963:  hSaveToolbar = CreateWindowEx(0, TOOLBARCLASSNAME, NULL, TOOLBAR_STYLE,",
          "1964:   0, 0, 0, 0, hMainDialog, (HMENU)IDC_SAVE_TOOLBAR, hMainInstance, NULL);",
          "1965:  hImageList = ImageList_Create(i16, i16, ILC_COLOR32 | ILC_HIGHQUALITYSCALE | ILC_MIRROR, 1, 0);",
          "1966:  buffer = GetResource(hMainInstance, MAKEINTRESOURCEA(IDI_SAVE_16 + icon_offset), _RT_RCDATA, \"save icon\", &bufsize, FALSE);",
          "1967:  hIconSave = CreateIconFromResourceEx(buffer, bufsize, TRUE, 0x30000, 0, 0, 0);",
          "1968:  ImageList_AddIcon(hImageList, hIconSave);",
          "1969:  DestroyIcon(hIconSave);",
          "1970:  SendMessage(hSaveToolbar, TB_SETIMAGELIST, (WPARAM)0, (LPARAM)hImageList);",
          "1971:  SendMessage(hSaveToolbar, TB_BUTTONSTRUCTSIZE, (WPARAM)sizeof(TBBUTTON), 0);",
          "1972:  memset(tbToolbarButtons, 0, sizeof(TBBUTTON));",
          "1973:  tbToolbarButtons[0].idCommand = IDC_SAVE;",
          "1974:  tbToolbarButtons[0].fsStyle = BTNS_AUTOSIZE;",
          "1975:  tbToolbarButtons[0].fsState = TBSTATE_ENABLED;",
          "1976:  tbToolbarButtons[0].iBitmap = 0;",
          "1977:  SendMessage(hSaveToolbar, TB_ADDBUTTONS, (WPARAM)1, (LPARAM)&tbToolbarButtons);",
          "1979:  hHashToolbar = CreateWindowEx(0, TOOLBARCLASSNAME, NULL, TOOLBAR_STYLE,",
          "1980:   0, 0, 0, 0, hMainDialog, (HMENU)IDC_HASH_TOOLBAR, hMainInstance, NULL);",
          "1981:  hImageList = ImageList_Create(i16, i16, ILC_COLOR32 | ILC_HIGHQUALITYSCALE | ILC_MIRROR, 1, 0);",
          "1982:  buffer = GetResource(hMainInstance, MAKEINTRESOURCEA(IDI_HASH_16 + icon_offset), _RT_RCDATA, \"hash icon\", &bufsize, FALSE);",
          "1983:  hIconHash = CreateIconFromResourceEx(buffer, bufsize, TRUE, 0x30000, 0, 0, 0);",
          "1984:  ImageList_AddIcon(hImageList, hIconHash);",
          "1985:  DestroyIcon(hIconHash);",
          "1986:  SendMessage(hHashToolbar, TB_SETIMAGELIST, (WPARAM)0, (LPARAM)hImageList);",
          "1987:  SendMessage(hHashToolbar, TB_BUTTONSTRUCTSIZE, (WPARAM)sizeof(TBBUTTON), 0);",
          "1988:  memset(tbToolbarButtons, 0, sizeof(TBBUTTON));",
          "1989:  tbToolbarButtons[0].idCommand = IDC_HASH;",
          "1990:  tbToolbarButtons[0].fsStyle = BTNS_AUTOSIZE;",
          "1991:  tbToolbarButtons[0].fsState = TBSTATE_ENABLED;",
          "1992:  tbToolbarButtons[0].iBitmap = 0;",
          "1993:  SendMessage(hHashToolbar, TB_ADDBUTTONS, (WPARAM)1, (LPARAM)&tbToolbarButtons);",
          "1994: }",
          "1996: static void CreateAdditionalControls(HWND hDlg)",
          "1997: {",
          "1998:  HINSTANCE hDll;",
          "1999:  HIMAGELIST hToolbarImageList;",
          "2000:  HICON hIcon, hIconUp, hIconDown;",
          "2001:  RECT rc;",
          "2002:  SIZE sz;",
          "2003:  int icon_offset = 0, i, i16, s16, toolbar_dx = -4 - ((fScale > 1.49f) ? 1 : 0) - ((fScale > 1.99f) ? 1 : 0);",
          "2004:  TBBUTTON tbToolbarButtons[7];",
          "2005:  unsigned char* buffer;",
          "2006:  DWORD bufsize;",
          "2008:  s16 = i16 = GetSystemMetrics(SM_CXSMICON);",
          "2009:  if (s16 >= 54)",
          "2010:   s16 = 64;",
          "2011:  else if (s16 >= 40)",
          "2012:   s16 = 48;",
          "2013:  else if (s16 >= 28)",
          "2014:   s16 = 32;",
          "2015:  else if (s16 >= 20)",
          "2016:   s16 = 24;",
          "2017:  if (i16 >= 28)",
          "2018:   icon_offset = 20;",
          "2019:  else if (i16 >= 20)",
          "2020:   icon_offset = 10;",
          "2023:  hDll = GetLibraryHandle(\"ComDlg32\");",
          "2024:  hIconDown = (HICON)LoadImage(hDll, MAKEINTRESOURCE(577), IMAGE_ICON, s16, s16, LR_DEFAULTCOLOR | LR_SHARED);",
          "2025:  hIconUp = (HICON)LoadImage(hDll, MAKEINTRESOURCE(578), IMAGE_ICON, s16, s16, LR_DEFAULTCOLOR | LR_SHARED);",
          "2027:  hDll = GetLibraryHandle(\"Shell32\");",
          "2028:  if (hIconUp == NULL)",
          "2029:   hIconUp = (HICON)LoadImage(hDll, MAKEINTRESOURCE(16749), IMAGE_ICON, s16, s16, LR_DEFAULTCOLOR | LR_SHARED);",
          "2030:  if (hIconDown == NULL)",
          "2031:   hIconDown = (HICON)LoadImage(hDll, MAKEINTRESOURCE(16750), IMAGE_ICON, s16, s16, LR_DEFAULTCOLOR | LR_SHARED);",
          "2032:  hUpImageList = ImageList_Create(i16, i16, ILC_COLOR32 | ILC_HIGHQUALITYSCALE, 1, 0);",
          "2033:  hDownImageList = ImageList_Create(i16, i16, ILC_COLOR32 | ILC_HIGHQUALITYSCALE, 1, 0);",
          "2034:  ImageList_AddIcon(hUpImageList, hIconUp);",
          "2035:  ImageList_AddIcon(hDownImageList, hIconDown);",
          "2038:  memset(wtbtext, 0, sizeof(wtbtext));",
          "2039:  utf8_to_wchar_no_alloc(lmprintf((advanced_mode_device) ? MSG_122 : MSG_121, lmprintf(MSG_119)), wtbtext[0], ARRAYSIZE(wtbtext[0]));",
          "2040:  hAdvancedDeviceToolbar = CreateWindowEx(0, TOOLBARCLASSNAME, NULL, TOOLBAR_STYLE,",
          "2041:   0, 0, 0, 0, hMainDialog, (HMENU)IDC_ADVANCED_DEVICE_TOOLBAR, hMainInstance, NULL);",
          "2042:  SendMessage(hAdvancedDeviceToolbar, CCM_SETVERSION, (WPARAM)6, 0);",
          "2043:  memset(tbToolbarButtons, 0, sizeof(TBBUTTON));",
          "2044:  tbToolbarButtons[0].idCommand = IDC_ADVANCED_DRIVE_PROPERTIES;",
          "2045:  tbToolbarButtons[0].fsStyle = BTNS_SHOWTEXT | BTNS_AUTOSIZE;",
          "2046:  tbToolbarButtons[0].fsState = TBSTATE_ENABLED;",
          "2047:  tbToolbarButtons[0].iString = (INT_PTR)wtbtext[0];",
          "2048:  tbToolbarButtons[0].iBitmap = 0;",
          "2049:  SendMessage(hAdvancedDeviceToolbar, TB_SETIMAGELIST, 0, (LPARAM)hUpImageList);",
          "2050:  SendMessage(hAdvancedDeviceToolbar, TB_BUTTONSTRUCTSIZE, (WPARAM)sizeof(TBBUTTON), 0);",
          "2051:  SendMessage(hAdvancedDeviceToolbar, TB_ADDBUTTONS, 1, (LPARAM)&tbToolbarButtons);",
          "2052:  GetWindowRect(GetDlgItem(hDlg, IDC_ADVANCED_DRIVE_PROPERTIES), &rc);",
          "2053:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "2054:  SendMessage(hAdvancedDeviceToolbar, TB_GETIDEALSIZE, (WPARAM)FALSE, (LPARAM)&sz);",
          "2056:  if (sz.cx < 16)",
          "2057:   sz.cx = fw;",
          "2058:  SetWindowPos(hAdvancedDeviceToolbar, hTargetSystem, rc.left + toolbar_dx, rc.top, sz.cx, rc.bottom - rc.top, 0);",
          "2060:  utf8_to_wchar_no_alloc(lmprintf((advanced_mode_format) ? MSG_122 : MSG_121, lmprintf(MSG_120)), wtbtext[1], ARRAYSIZE(wtbtext[1]));",
          "2061:  hAdvancedFormatToolbar = CreateWindowEx(0, TOOLBARCLASSNAME, NULL, TOOLBAR_STYLE,",
          "2062:   0, 0, 0, 0, hMainDialog, (HMENU)IDC_ADVANCED_FORMAT_TOOLBAR, hMainInstance, NULL);",
          "2063:  SendMessage(hAdvancedFormatToolbar, CCM_SETVERSION, (WPARAM)6, 0);",
          "2064:  memset(tbToolbarButtons, 0, sizeof(TBBUTTON));",
          "2065:  tbToolbarButtons[0].idCommand = IDC_ADVANCED_FORMAT_OPTIONS;",
          "2066:  tbToolbarButtons[0].fsStyle = BTNS_SHOWTEXT | BTNS_AUTOSIZE;",
          "2067:  tbToolbarButtons[0].fsState = TBSTATE_ENABLED;",
          "2068:  tbToolbarButtons[0].iString = (INT_PTR)wtbtext[1];",
          "2069:  tbToolbarButtons[0].iBitmap = 0;",
          "2070:  SendMessage(hAdvancedFormatToolbar, TB_SETIMAGELIST, (WPARAM)0, (LPARAM)hUpImageList);",
          "2071:  SendMessage(hAdvancedFormatToolbar, TB_BUTTONSTRUCTSIZE, (WPARAM)sizeof(TBBUTTON), 0);",
          "2072:  SendMessage(hAdvancedFormatToolbar, TB_ADDBUTTONS, (WPARAM)1, (LPARAM)&tbToolbarButtons);",
          "2073:  GetWindowRect(GetDlgItem(hDlg, IDC_ADVANCED_FORMAT_OPTIONS), &rc);",
          "2074:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "2075:  SendMessage(hAdvancedFormatToolbar, TB_GETIDEALSIZE, (WPARAM)FALSE, (LPARAM)&sz);",
          "2076:  if (sz.cx < 16)",
          "2077:   sz.cx = fw;",
          "2078:  SetWindowPos(hAdvancedFormatToolbar, hClusterSize, rc.left + toolbar_dx, rc.top, sz.cx, rc.bottom - rc.top, 0);",
          "2081:  hMultiToolbar = CreateWindowEx(0, TOOLBARCLASSNAME, NULL, TOOLBAR_STYLE,",
          "2082:   0, 0, 0, 0, hMainDialog, (HMENU)IDC_MULTI_TOOLBAR, hMainInstance, NULL);",
          "2083:  hToolbarImageList = ImageList_Create(i16, i16, ILC_COLOR32 | ILC_HIGHQUALITYSCALE, 8, 0);",
          "2084:  for (i = 0; i < ARRAYSIZE(multitoolbar_icons); i++) {",
          "2085:   buffer = GetResource(hMainInstance, MAKEINTRESOURCEA(multitoolbar_icons[i] + icon_offset),",
          "2086:    _RT_RCDATA, \"toolbar icon\", &bufsize, FALSE);",
          "2087:   hIcon = CreateIconFromResourceEx(buffer, bufsize, TRUE, 0x30000, 0, 0, 0);",
          "2089:   if (right_to_left_mode && (i == 0))",
          "2090:    hIcon = CreateMirroredIcon(hIcon);",
          "2091:   ImageList_AddIcon(hToolbarImageList, hIcon);",
          "2092:   DestroyIcon(hIcon);",
          "2093:  }",
          "2094:  SendMessage(hMultiToolbar, TB_SETIMAGELIST, (WPARAM)0, (LPARAM)hToolbarImageList);",
          "2095:  SendMessage(hMultiToolbar, TB_BUTTONSTRUCTSIZE, (WPARAM)sizeof(TBBUTTON), 0);",
          "2096:  memset(tbToolbarButtons, 0, sizeof(TBBUTTON) * ARRAYSIZE(tbToolbarButtons));",
          "2097:  tbToolbarButtons[0].idCommand = IDC_LANG;",
          "2098:  tbToolbarButtons[0].fsStyle = BTNS_BUTTON;",
          "2099:  tbToolbarButtons[0].fsState = TBSTATE_ENABLED;",
          "2100:  tbToolbarButtons[0].iBitmap = 0;",
          "2101:  tbToolbarButtons[1].fsStyle = BTNS_AUTOSIZE;",
          "2102:  tbToolbarButtons[1].fsState = TBSTATE_INDETERMINATE;",
          "2103:  tbToolbarButtons[1].iBitmap = I_IMAGENONE;",
          "2104:  tbToolbarButtons[1].iString = (fScale < 1.5f) ? (INT_PTR)L\"\" : (INT_PTR)L\" \";",
          "2105:  tbToolbarButtons[2].idCommand = IDC_ABOUT;",
          "2106:  tbToolbarButtons[2].fsStyle = BTNS_BUTTON;",
          "2107:  tbToolbarButtons[2].fsState = TBSTATE_ENABLED;",
          "2108:  tbToolbarButtons[2].iBitmap = 1;",
          "2109:  tbToolbarButtons[3].fsStyle = BTNS_AUTOSIZE;",
          "2110:  tbToolbarButtons[3].fsState = TBSTATE_INDETERMINATE;",
          "2111:  tbToolbarButtons[3].iBitmap = I_IMAGENONE;",
          "2112:  tbToolbarButtons[3].iString = (fScale < 1.5f) ? (INT_PTR)L\"\" : (INT_PTR)L\" \";",
          "2113:  tbToolbarButtons[4].idCommand = IDC_SETTINGS;",
          "2114:  tbToolbarButtons[4].fsStyle = BTNS_BUTTON;",
          "2115:  tbToolbarButtons[4].fsState = TBSTATE_ENABLED;",
          "2116:  tbToolbarButtons[4].iBitmap = 2;",
          "2117:  tbToolbarButtons[5].fsStyle = BTNS_AUTOSIZE;",
          "2118:  tbToolbarButtons[5].fsState = TBSTATE_INDETERMINATE;",
          "2119:  tbToolbarButtons[5].iBitmap = I_IMAGENONE;",
          "2120:  tbToolbarButtons[5].iString = (fScale < 1.5f) ? (INT_PTR)L\"\" : (INT_PTR)L\" \";",
          "2121:  tbToolbarButtons[6].idCommand = IDC_LOG;",
          "2122:  tbToolbarButtons[6].fsStyle = BTNS_BUTTON;",
          "2123:  tbToolbarButtons[6].fsState = TBSTATE_ENABLED;",
          "2124:  tbToolbarButtons[6].iBitmap = 3;",
          "2125:  SendMessage(hMultiToolbar, TB_ADDBUTTONS, (WPARAM)7, (LPARAM)&tbToolbarButtons);",
          "2126:  SendMessage(hMultiToolbar, TB_SETBUTTONSIZE, 0, MAKELPARAM(i16, ddbh));",
          "2127: }",
          "2131: static void GetBasicControlsWidth(HWND hDlg)",
          "2132: {",
          "2133:  int checkbox_internal_spacing = 12, dropdown_internal_spacing = 15;",
          "2134:  RECT rc = { 0, 0, 4, 8 };",
          "2135:  SIZE sz;",
          "2139:  MapDialogRect(hDlg, &rc);",
          "2140:  sz.cx = rc.right;",
          "2141:  sz.cy = rc.bottom;",
          "2144:  if (nWindowsVersion == WINDOWS_10) {",
          "2145:   checkbox_internal_spacing = 10;",
          "2146:   dropdown_internal_spacing = 13;",
          "2147:  }",
          "2150:  cbw = MulDiv(checkbox_internal_spacing, sz.cx, 4);",
          "2151:  ddw = MulDiv(dropdown_internal_spacing, sz.cx, 4);",
          "2154:  GetWindowRect(GetDlgItem(hDlg, IDC_TARGET_SYSTEM), &rc);",
          "2155:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "2156:  sw = rc.left;",
          "2157:  GetWindowRect(GetDlgItem(hDlg, IDC_PARTITION_TYPE), &rc);",
          "2158:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "2159:  sw -= rc.right;",
          "2160:  mw = rc.left;",
          "2163:  SendMessage(hSaveToolbar, TB_GETIDEALSIZE, (WPARAM)FALSE, (LPARAM)&sz);",
          "2164:  sbw = sz.cx;",
          "2167:  GetWindowRect(GetDlgItem(hDlg, IDC_SAVE), &rc);",
          "2168:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "2169:  bh = rc.bottom - rc.top;",
          "2170:  ssw = rc.left;",
          "2171:  GetWindowRect(hDeviceList, &rc);",
          "2172:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "2173:  ssw -= rc.right;",
          "2176:  GetWindowRect(GetDlgItem(hDlg, IDS_CSM_HELP_TXT), &rc);",
          "2177:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "2178:  tw = rc.left;",
          "2179:  GetWindowRect(hTargetSystem, &rc);",
          "2180:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "2181:  tw -= rc.right;",
          "2182: }",
          "2185: static void GetMainButtonsWidth(HWND hDlg)",
          "2186: {",
          "2187:  unsigned int i;",
          "2188:  RECT rc;",
          "2190:  GetWindowRect(GetDlgItem(hDlg, main_button_ids[0]), &rc);",
          "2191:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "2192:  bw = rc.right - rc.left;",
          "2194:  for (i = 0; i < ARRAYSIZE(main_button_ids); i++)",
          "2195:   bw = max(bw, GetTextWidth(hDlg, main_button_ids[i]) + cbw);",
          "2197:  bw = max(bw, GetTextSize(GetDlgItem(hDlg, IDCANCEL), lmprintf(MSG_007)).cx + cbw);",
          "2198: }",
          "2203: static void GetHalfDropwdownWidth(HWND hDlg)",
          "2204: {",
          "2205:  RECT rc;",
          "2206:  unsigned int i, j, msg_id;",
          "2207:  char tmp[256];",
          "2210:  GetWindowRect(GetDlgItem(hDlg, IDC_PARTITION_TYPE), &rc);",
          "2211:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "2212:  hw = rc.right - rc.left - ddw;",
          "2215:  hw = max(hw, GetTextSize(GetDlgItem(hDlg, IDC_PARTITION_TYPE), (char*)sfd_name).cx);",
          "2218:  for (i = 512, j = 1, msg_id = MSG_026; j<MAX_CLUSTER_SIZES; i <<= 1, j++) {",
          "2219:   if (i > 8192) {",
          "2220:    i /= 1024;",
          "2221:    msg_id++;",
          "2222:   }",
          "2223:   safe_sprintf(tmp, 64, \"%d %s\", i, lmprintf(msg_id));",
          "2224:   hw = max(hw, GetTextSize(GetDlgItem(hDlg, IDC_CLUSTER_SIZE), lmprintf(MSG_030, tmp)).cx);",
          "2225:  }",
          "2228:  for (msg_id = MSG_031; msg_id <= MSG_033; msg_id++)",
          "2229:   hw = max(hw, GetTextSize(GetDlgItem(hDlg, IDC_TARGET_SYSTEM), lmprintf(msg_id)).cx);",
          "2232:  for (i = 1; i <= 5; i++) {",
          "2233:   char* msg = (i == 1) ? lmprintf(MSG_034, 1) : lmprintf(MSG_035, (i == 2) ? 2 : 4, (i == 2) ? \"\" : lmprintf(MSG_087, flash_type[i - 3]));",
          "2234:   hw = max(hw, GetTextSize(GetDlgItem(hDlg, IDC_TARGET_SYSTEM), msg).cx);",
          "2235:  }",
          "2239:  hw = max(hw, GetTextWidth(hDlg, IDC_RUFUS_MBR) - sw);",
          "2240:  hw = max(hw, GetTextWidth(hDlg, IDC_BAD_BLOCKS) - sw);",
          "2243:  hw += ddw;",
          "2244: }",
          "2263: static void GetFullWidth(HWND hDlg)",
          "2264: {",
          "2265:  RECT rc;",
          "2266:  int i;",
          "2269:  GetWindowRect(hDlg, &rc);",
          "2270:  dbw = rc.right - rc.left;",
          "2271:  GetClientRect(hDlg, &rc);",
          "2272:  dbw -= rc.right - rc.left;",
          "2275:  GetWindowRect(GetDlgItem(hDlg, IDC_BOOT_SELECTION), &rc);",
          "2276:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "2278:  bsw = max(rc.right - rc.left, GetTextSize(hBootType, lmprintf(MSG_279)).cx + ddw);",
          "2279:  bsw = max(bsw, GetTextSize(hBootType, lmprintf(MSG_281, lmprintf(MSG_280))).cx + ddw);",
          "2282:  GetWindowRect(GetDlgItem(hDlg, IDC_IMAGE_OPTION), &rc);",
          "2283:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "2284:  fw = rc.right - rc.left - ddw;",
          "2287:  fw = max(fw, GetTextSize(GetDlgItem(hDlg, IDC_IMAGE_OPTION), lmprintf(MSG_117)).cx);",
          "2288:  fw = max(fw, GetTextSize(GetDlgItem(hDlg, IDC_IMAGE_OPTION), lmprintf(MSG_118)).cx);",
          "2291:  for (i=0; i<ARRAYSIZE(full_width_checkboxes); i++)",
          "2292:   fw = max(fw, GetTextWidth(hDlg, full_width_checkboxes[i]));",
          "2295:  fw += ddw;",
          "2298:  fw = max(fw, 2 * hw + sw);",
          "2302:  bw = max(bw, (fw - 2 * ssw - sw) / 4);",
          "2304:  bw = max(bw, (bsw + sbw - sw) / 3);",
          "2307:  bw = max(bw, (hw / 2) - ssw);",
          "2310:  hw = max(hw, 2 * bw + ssw);",
          "2311:  fw = max(fw, 2 * hw + sw);",
          "2313:  bsw = max(bsw, fw - bw - 2 * ssw - sbw);",
          "2316: }",
          "2318: static void PositionControls(HWND hDlg)",
          "2319: {",
          "2320:  RECT rc;",
          "2321:  HWND hCtrl, hPrevCtrl;",
          "2322:  SIZE sz;",
          "2323:  DWORD padding;",
          "2324:  int i, x, button_fudge = 2;",
          "2327:  GetWindowRect(hDlg, &rc);",
          "2329:  SetWindowPos(hDlg, NULL, -1, -1, fw + 2*mw + dbw, rc.bottom - rc.top, SWP_NOMOVE | SWP_NOZORDER);",
          "2332:  hCtrl = GetDlgItem(hDlg, IDC_DEVICE);",
          "2333:  GetWindowRect(hCtrl, &rc);",
          "2334:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "2335:  ddh = rc.bottom - rc.top;",
          "2336:  ddbh = ddh + button_fudge;",
          "2337:  bh = max(bh, ddbh);",
          "2338:  hCtrl = GetDlgItem(hDlg, IDC_LABEL);",
          "2339:  GetWindowRect(hCtrl, &rc);",
          "2340:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "2341:  SetWindowPos(hCtrl, hAdvancedFormatToolbar, rc.left, rc.top, rc.right - rc.left, ddh, SWP_NOZORDER);",
          "2342:  GetWindowRect(hProgress, &rc);",
          "2343:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "2344:  SetWindowPos(hProgress, hNBPasses, rc.left, rc.top, rc.right - rc.left, ddh, SWP_NOZORDER);",
          "2347:  hCtrl = GetDlgItem(hDlg, IDS_BOOT_SELECTION_TXT);",
          "2348:  GetWindowRect(hCtrl, &rc);",
          "2349:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "2350:  row_height = rc.top;",
          "2351:  hCtrl = GetDlgItem(hDlg, IDS_DEVICE_TXT);",
          "2352:  GetWindowRect(hCtrl, &rc);",
          "2353:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "2354:  row_height -= rc.top;",
          "2357:  hCtrl = GetDlgItem(hDlg, IDC_LIST_USB_HDD);",
          "2358:  GetWindowRect(hCtrl, &rc);",
          "2359:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "2360:  advanced_device_section_height = rc.top;",
          "2361:  hCtrl = GetDlgItem(hDlg, IDC_RUFUS_MBR);",
          "2362:  GetWindowRect(hCtrl, &rc);",
          "2363:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "2364:  advanced_device_section_height = rc.bottom - advanced_device_section_height;",
          "2366:  hCtrl = GetDlgItem(hDlg, IDC_QUICK_FORMAT);",
          "2367:  GetWindowRect(hCtrl, &rc);",
          "2368:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "2369:  advanced_format_section_height = rc.top;",
          "2370:  hCtrl = GetDlgItem(hDlg, IDC_BAD_BLOCKS);",
          "2371:  GetWindowRect(hCtrl, &rc);",
          "2372:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "2373:  advanced_format_section_height = rc.bottom - advanced_format_section_height;",
          "2376:  hCtrl = GetDlgItem(hDlg, IDS_DRIVE_PROPERTIES_TXT);",
          "2377:  GetWindowRect(hCtrl, &rc);",
          "2378:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "2379:  sz = GetTextSize(hCtrl, NULL);",
          "2380:  section_vpos[0] = rc.top + 2 * sz.cy / 3;",
          "2381:  hCtrl = GetDlgItem(hDlg, IDS_FORMAT_OPTIONS_TXT);",
          "2382:  GetWindowRect(hCtrl, &rc);",
          "2383:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "2384:  sz = GetTextSize(hCtrl, NULL);",
          "2385:  section_vpos[1] = rc.top + 2 * sz.cy / 3;",
          "2386:  hCtrl = GetDlgItem(hDlg, IDS_STATUS_TXT);",
          "2387:  GetWindowRect(hCtrl, &rc);",
          "2388:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "2389:  sz = GetTextSize(hCtrl, NULL);",
          "2390:  section_vpos[2] = rc.top + 2 * sz.cy / 3;",
          "2394:  SendMessage(hMultiToolbar, TB_GETIDEALSIZE, (WPARAM)FALSE, (LPARAM)&sz);",
          "2395:  GetWindowRect(GetDlgItem(hDlg, IDC_ABOUT), &rc);",
          "2396:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "2397:  SetWindowPos(hMultiToolbar, hProgress, rc.left, rc.top, sz.cx, ddbh, 0);",
          "2400:  for (i = 0; i < ARRAYSIZE(main_button_ids); i++) {",
          "2401:   hCtrl = GetDlgItem(hDlg, main_button_ids[i]);",
          "2402:   GetWindowRect(hCtrl, &rc);",
          "2403:   MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "2404:   x = mw + fw - bw;",
          "2405:   if (i % 2 == 1)",
          "2406:    x -= bw + ssw;",
          "2407:   hPrevCtrl = GetNextWindow(hCtrl, GW_HWNDPREV);",
          "2408:   SetWindowPos(hCtrl, hPrevCtrl, x, rc.top, bw, ddbh, 0);",
          "2409:  }",
          "2412:  hCtrl = GetDlgItem(hDlg, IDC_SAVE);",
          "2413:  GetWindowRect(hCtrl, &rc);",
          "2414:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "2415:  SendMessage(hSaveToolbar, TB_GETIDEALSIZE, (WPARAM)FALSE, (LPARAM)&sz);",
          "2416:  SendMessage(hSaveToolbar, TB_SETBUTTONSIZE, 0, MAKELPARAM(sz.cx, ddbh));",
          "2418:  padding = (DWORD) SendMessage(hSaveToolbar, TB_GETPADDING, 0, 0);",
          "2419:  sz.cx = padding & 0xFFFF;",
          "2420:  sz.cy = padding >> 16;",
          "2421:  SendMessage(hSaveToolbar, TB_SETPADDING, 0, MAKELPARAM(sz.cx + 3, sz.cy + 2));",
          "2422:  SetWindowPos(hSaveToolbar, hDeviceList, mw + fw - sbw, rc.top, sbw, ddbh, 0);",
          "2425:  hCtrl = GetDlgItem(hDlg, IDC_HASH);",
          "2426:  GetWindowRect(hCtrl, &rc);",
          "2427:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "2428:  SendMessage(hHashToolbar, TB_GETIDEALSIZE, (WPARAM)FALSE, (LPARAM)&sz);",
          "2429:  SendMessage(hHashToolbar, TB_SETBUTTONSIZE, 0, MAKELPARAM(sz.cx, ddbh));",
          "2430:  padding = (DWORD) SendMessage(hHashToolbar, TB_GETPADDING, 0, 0);",
          "2431:  sz.cx = padding & 0xFFFF;",
          "2432:  sz.cy = padding >> 16;",
          "2433:  SendMessage(hHashToolbar, TB_SETPADDING, 0, MAKELPARAM(sz.cx + 3, sz.cy + 2));",
          "2434:  SetWindowPos(hHashToolbar, hBootType, mw + bsw + ssw, rc.top, sbw, ddbh, 0);",
          "2437:  hCtrl = GetDlgItem(hDlg, IDS_CSM_HELP_TXT);",
          "2438:  GetWindowRect(hCtrl, &rc);",
          "2439:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "2440:  SetWindowPos(hCtrl, hTargetSystem, mw + fw + tw, rc.top, sbw, rc.bottom - rc.top, 0);",
          "2442:  if (advanced_mode_device) {",
          "2444:   GetWindowRect(hDeviceList, &rc);",
          "2445:   MapWindowPoints(NULL, hMainDialog, (POINT*)&rc, 2);",
          "2446:   SetWindowPos(hDeviceList, HWND_TOP, rc.left, rc.top, fw - ssw - sbw, rc.bottom - rc.top, 0);",
          "2447:  }",
          "2450:  for (i = 0; i < ARRAYSIZE(full_width_controls); i++) {",
          "2451:   hCtrl = GetDlgItem(hDlg, full_width_controls[i]);",
          "2452:   GetWindowRect(hCtrl, &rc);",
          "2453:   MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "2454:   hPrevCtrl = GetNextWindow(hCtrl, GW_HWNDPREV);",
          "2455:   SetWindowPos(hCtrl, hPrevCtrl, rc.left, rc.top, fw, rc.bottom - rc.top, 0);",
          "2456:  }",
          "2459:  for (i = 0; i < ARRAYSIZE(half_width_ids); i++) {",
          "2460:   hCtrl = GetDlgItem(hDlg, half_width_ids[i]);",
          "2461:   GetWindowRect(hCtrl, &rc);",
          "2462:   MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "2465:   hPrevCtrl = GetNextWindow(hCtrl, GW_HWNDPREV);",
          "2466:   SetWindowPos(hCtrl, hPrevCtrl, (i < 5) ? rc.left : mw + hw + sw, rc.top,",
          "2467:    (i <2) ? hw + sw : hw, rc.bottom - rc.top, 0);",
          "2468:  }",
          "2471:  hCtrl = GetDlgItem(hDlg, IDC_BOOT_SELECTION);",
          "2472:  GetWindowRect(hCtrl, &rc);",
          "2473:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "2474:  hPrevCtrl = GetNextWindow(hCtrl, GW_HWNDPREV);",
          "2475:  SetWindowPos(hCtrl, hPrevCtrl, rc.left, rc.top, bsw, rc.bottom - rc.top, 0);",
          "2476: }",
          "2479: static void AdjustForLowDPI(HWND hDlg)",
          "2480: {",
          "2481:  static int ddy = 4;",
          "2482:  int i, j;",
          "2483:  RECT rc;",
          "2484:  HWND hCtrl, hPrevCtrl;",
          "2485:  int dy = 0;",
          "2487:  if (fScale >= 1.3f)",
          "2488:   return;",
          "2490:  for (i = 0; i < ARRAYSIZE(adjust_dpi_ids); i++) {",
          "2491:   dy += ddy;",
          "2495:   if (adjust_dpi_ids[i][0] == IDC_QUICK_FORMAT)",
          "2496:    dy += 1;",
          "2497:   for (j = 0; j < 5; j++) {",
          "2498:    if (adjust_dpi_ids[i][j] == 0)",
          "2499:     break;",
          "2500:    hCtrl = GetDlgItem(hDlg, adjust_dpi_ids[i][j]);",
          "2501:    GetWindowRect(hCtrl, &rc);",
          "2502:    MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "2503:    hPrevCtrl = GetNextWindow(hCtrl, GW_HWNDPREV);",
          "2504:    SetWindowPos(hCtrl, hPrevCtrl, rc.left, rc.top + dy,",
          "2505:     rc.right - rc.left, rc.bottom - rc.top, 0);",
          "2506:   }",
          "2507:  }",
          "2509:  section_vpos[1] += 9 * ddy;",
          "2510:  section_vpos[2] += 16 * ddy + 1;",
          "2511:  advanced_device_section_height += 3 * ddy;",
          "2512:  advanced_format_section_height += 3 * ddy + 1;",
          "2514:  ResizeDialogs(dy + 2*ddy);",
          "2515:  InvalidateRect(hDlg, NULL, TRUE);",
          "2516: }",
          "2518: static void SetSectionHeaders(HWND hDlg)",
          "2519: {",
          "2520:  RECT rc;",
          "2521:  HWND hCtrl;",
          "2522:  SIZE sz;",
          "2523:  HFONT hf;",
          "2524:  wchar_t wtmp[128];",
          "2525:  size_t wlen;",
          "2526:  int i;",
          "2529:  hf = CreateFontA(-MulDiv(14, GetDeviceCaps(GetDC(hMainDialog), LOGPIXELSY), 72), 0, 0, 0,",
          "2530:   FW_SEMIBOLD, FALSE, FALSE, FALSE, DEFAULT_CHARSET, 0, 0, PROOF_QUALITY, 0, \"Segoe UI\");",
          "2532:  for (i = 0; i < ARRAYSIZE(section_control_ids); i++) {",
          "2533:   SendDlgItemMessageA(hDlg, section_control_ids[i], WM_SETFONT, (WPARAM)hf, TRUE);",
          "2534:   hCtrl = GetDlgItem(hDlg, section_control_ids[i]);",
          "2535:   memset(wtmp, 0, sizeof(wtmp));",
          "2536:   GetWindowTextW(hCtrl, wtmp, ARRAYSIZE(wtmp));",
          "2537:   wlen = wcslen(wtmp);",
          "2538:   wtmp[wlen++] = L' ';",
          "2539:   wtmp[wlen++] = L' ';",
          "2540:   SetWindowTextW(hCtrl, wtmp);",
          "2541:   GetWindowRect(hCtrl, &rc);",
          "2542:   MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "2543:   sz = GetTextSize(hCtrl, NULL);",
          "2544:   SetWindowPos(hCtrl, NULL, rc.left, rc.top, sz.cx, sz.cy, SWP_NOZORDER);",
          "2545:  }",
          "2546: }",
          "2549: void OnPaint(HDC hdc)",
          "2550: {",
          "2551:  int i;",
          "2552:  HPEN hp = CreatePen(0, (fScale < 1.5f)?2:3, RGB(0, 0, 0));",
          "2553:  SelectObject(hdc, hp);",
          "2554:  for (i = 0; i < ARRAYSIZE(section_vpos); i++) {",
          "2555:   MoveToEx(hdc, mw + 10, section_vpos[i], NULL);",
          "2556:   LineTo(hdc, mw + fw, section_vpos[i]);",
          "2557:  }",
          "2558: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2704:  CreateAdditionalControls(hDlg);",
          "2705:  SetSectionHeaders(hDlg);",
          "2707:  AdjustForLowDPI(hDlg);",
          "2709:  SendMessage(hLogDialog, UM_RESIZE_BUTTONS, 0, 0);",
          "2711:  CreateStatusBar();",
          "2717:  CreateTooltip(hFileSystem, lmprintf(MSG_157), -1);",
          "2718:  CreateTooltip(hClusterSize, lmprintf(MSG_158), -1);",
          "",
          "[Removed Lines]",
          "2706:  PositionControls(hDlg);",
          "2714:  progress_original_proc = (WNDPROC)SetWindowLongPtr(hProgress, GWLP_WNDPROC, (LONG_PTR)ProgressCallback);",
          "",
          "[Added Lines]",
          "1613:  PositionMainControls(hDlg);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2757:  PrintStatus(STATUS_MSG_TIMEOUT, (val)?MSG_250:MSG_251, str);",
          "2758: }",
          "2795: static void SaveVHD(void)",
          "2796: {",
          "2797:  static IMG_SAVE img_save = { 0 };",
          "",
          "[Removed Lines]",
          "2760: static void ShowLanguageMenu(RECT rcExclude)",
          "2761: {",
          "2762:  TPMPARAMS tpm;",
          "2763:  HMENU menu;",
          "2764:  loc_cmd* lcmd = NULL;",
          "2765:  char lang[256];",
          "2766:  char *search = \"()\";",
          "2767:  char *l, *r, *str;",
          "2769:  UM_LANGUAGE_MENU_MAX = UM_LANGUAGE_MENU;",
          "2770:  menu = CreatePopupMenu();",
          "2771:  list_for_each_entry(lcmd, &locale_list, loc_cmd, list) {",
          "2773:   if ((right_to_left_mode) && (!(lcmd->ctrl_id & LOC_RIGHT_TO_LEFT)))  {",
          "2774:    str = safe_strdup(lcmd->txt[1]);",
          "2775:    l = strtok(str, search);",
          "2776:    r = strtok(NULL, search);",
          "2777:    static_sprintf(lang, LEFT_TO_RIGHT_EMBEDDING \"(%s) \" POP_DIRECTIONAL_FORMATTING \"%s\", r, l);",
          "2778:    safe_free(str);",
          "2779:   } else {",
          "2780:    static_strcpy(lang, lcmd->txt[1]);",
          "2781:   }",
          "2782:   InsertMenuU(menu, -1, MF_BYPOSITION|((selected_locale == lcmd)?MF_CHECKED:0), UM_LANGUAGE_MENU_MAX++, lang);",
          "2783:  }",
          "2786:  tpm.cbSize = sizeof(TPMPARAMS);",
          "2787:  tpm.rcExclude = rcExclude;",
          "2788:  TrackPopupMenuEx(menu, 0,",
          "2789:   right_to_left_mode ? rcExclude.right : rcExclude.left, // In RTL languages, the menu should be placed at the bottom-right of the rect",
          "2790:   rcExclude.bottom, hMainDialog, &tpm);",
          "2792:  DestroyMenu(menu);",
          "2793: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3013:  case WM_COMMAND:",
          "3014: #ifdef RUFUS_TEST",
          "3015:   if (LOWORD(wParam) == IDC_TEST) {",
          "3017:    break;",
          "3018:   }",
          "3019: #endif",
          "",
          "[Removed Lines]",
          "3016:    DownloadSignedFile(FILES_URL \"/gendb.sh\", \"C:\\\\Downloads\\\\gendb.sh\", hProgress);",
          "",
          "[Added Lines]",
          "1885:    DownloadSignedFile(FILES_URL \"/gendb.sh\", \"C:\\\\Downloads\\\\gendb.sh\", hProgress, TRUE);",
          "",
          "---------------"
        ],
        "src/rufus.h||src/rufus.h": [
          "File: src/rufus.h -> src/rufus.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "431: extern void GetWindowsVersion(void);",
          "432: extern BOOL is_x64(void);",
          "433: extern const char *WindowsErrorString(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "431: extern uint8_t popcnt8(uint8_t val);",
          "",
          "---------------"
        ],
        "src/rufus.rc||src/rufus.rc": [
          "File: src/rufus.rc -> src/rufus.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: IDD_DIALOG DIALOGEX 12, 12, 232, 326",
          "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
          "35: EXSTYLE WS_EX_ACCEPTFILES",
          "37: FONT 9, \"Segoe UI Symbol\", 400, 0, 0x0",
          "38: BEGIN",
          "39:     LTEXT           \"Drive Properties\",IDS_DRIVE_PROPERTIES_TXT,8,6,53,12,NOT WS_GROUP",
          "",
          "[Removed Lines]",
          "36: CAPTION \"Rufus 3.2.1329\"",
          "",
          "[Added Lines]",
          "36: CAPTION \"Rufus 3.2.1330\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "394: VS_VERSION_INFO VERSIONINFO",
          "397:  FILEFLAGSMASK 0x3fL",
          "398: #ifdef _DEBUG",
          "399:  FILEFLAGS 0x1L",
          "",
          "[Removed Lines]",
          "395:  FILEVERSION 3,2,1329,0",
          "396:  PRODUCTVERSION 3,2,1329,0",
          "",
          "[Added Lines]",
          "395:  FILEVERSION 3,2,1330,0",
          "396:  PRODUCTVERSION 3,2,1330,0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "410:         BEGIN",
          "411:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
          "412:             VALUE \"FileDescription\", \"Rufus\"",
          "414:             VALUE \"InternalName\", \"Rufus\"",
          "415:             VALUE \"LegalCopyright\", \"\u00a9 2011-2018 Pete Batard (GPL v3)\"",
          "416:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
          "417:             VALUE \"OriginalFilename\", \"rufus.exe\"",
          "418:             VALUE \"ProductName\", \"Rufus\"",
          "420:         END",
          "421:     END",
          "422:     BLOCK \"VarFileInfo\"",
          "",
          "[Removed Lines]",
          "413:             VALUE \"FileVersion\", \"3.2.1329\"",
          "419:             VALUE \"ProductVersion\", \"3.2.1329\"",
          "",
          "[Added Lines]",
          "413:             VALUE \"FileVersion\", \"3.2.1330\"",
          "419:             VALUE \"ProductVersion\", \"3.2.1330\"",
          "",
          "---------------"
        ],
        "src/stdfn.c||src/stdfn.c": [
          "File: src/stdfn.c -> src/stdfn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: int  nWindowsBuildNumber = -1;",
          "37: char WindowsVersionStr[128] = \"Windows \";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: uint8_t popcnt8(uint8_t val)",
          "41: {",
          "42:  static const uint8_t nibble_lookup[16] = {",
          "43:   0, 1, 1, 2, 1, 2, 2, 3,",
          "44:   1, 2, 2, 3, 2, 3, 3, 4",
          "45:  };",
          "46:  return nibble_lookup[val & 0x0F] + nibble_lookup[val >> 4];",
          "47: }",
          "",
          "---------------"
        ],
        "src/stdlg.c||src/stdlg.c": [
          "File: src/stdlg.c -> src/stdlg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: #include \"resource.h\"",
          "38: #include \"msapi_utf8.h\"",
          "39: #include \"localization.h\"",
          "41: #include \"registry.h\"",
          "42: #include \"settings.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: #include \"ui.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58: static HWINEVENTHOOK fp_weh = NULL;",
          "59: static char *fp_title_str = \"Microsoft Windows\", *fp_button_str = \"Format disk\";",
          "64: static int update_settings_reposition_ids[] = {",
          "65:  IDC_POLICY,",
          "66:  IDS_UPDATE_SETTINGS_GRP,",
          "",
          "[Removed Lines]",
          "61: extern loc_cmd* selected_locale;",
          "62: extern int cbw, ddw, ddbh, bh;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/ui.c||src/ui.c": [
          "File: src/ui.c -> src/ui.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #ifdef _CRTDBG_MAP_ALLOC",
          "22: #include <stdlib.h>",
          "23: #include <crtdbg.h>",
          "24: #endif",
          "26: #include <windows.h>",
          "27: #include <windowsx.h>",
          "28: #include <stdlib.h>",
          "29: #include <stdio.h>",
          "30: #include <string.h>",
          "31: #include <winioctl.h>",
          "32: #include <assert.h>",
          "33: #include <intrin.h>",
          "35: #include \"rufus.h\"",
          "36: #include \"drive.h\"",
          "37: #include \"missing.h\"",
          "38: #include \"resource.h\"",
          "39: #include \"msapi_utf8.h\"",
          "40: #include \"localization.h\"",
          "42: #include \"ui.h\"",
          "43: #include \"ui_data.h\"",
          "45: UINT_PTR UM_LANGUAGE_MENU_MAX = UM_LANGUAGE_MENU;",
          "46: HIMAGELIST hUpImageList, hDownImageList;",
          "47: int advanced_device_section_height, advanced_format_section_height;",
          "49: int cbw, ddw, ddbh = 0, bh = 0;",
          "51: static int rh, ddh, bw, hw, fw;",
          "53: static int sw, mw, bsw, sbw, ssw, tw, dbw;",
          "54: static WNDPROC progress_original_proc = NULL;",
          "55: static wchar_t wtbtext[2][128];",
          "65: static int nb_slots[OP_MAX];",
          "66: static float slot_end[OP_MAX+1]; // shifted +1 so that we can subtract 1 to OP indexes",
          "67: static float previous_end;",
          "70: void SetComboEntry(HWND hDlg, int data)",
          "71: {",
          "72:  int i;",
          "73:  for (i = 0; i < ComboBox_GetCount(hDlg); i++) {",
          "74:   if (ComboBox_GetItemData(hDlg, i) == data) {",
          "75:    IGNORE_RETVAL(ComboBox_SetCurSel(hDlg, i));",
          "76:    break;",
          "77:   }",
          "78:  }",
          "79:  if (i == ComboBox_GetCount(hDlg))",
          "80:   IGNORE_RETVAL(ComboBox_SetCurSel(hDlg, 0));",
          "81: }",
          "84: static __inline void MoveCtrlY(HWND hDlg, int nID, int vertical_shift) {",
          "85:  ResizeMoveCtrl(hDlg, GetDlgItem(hDlg, nID), 0, vertical_shift, 0, 0, 1.0f);",
          "86: }",
          "90: void GetBasicControlsWidth(HWND hDlg)",
          "91: {",
          "92:  int checkbox_internal_spacing = 12, dropdown_internal_spacing = 15;",
          "93:  RECT rc = { 0, 0, 4, 8 };",
          "94:  SIZE sz;",
          "98:  MapDialogRect(hDlg, &rc);",
          "99:  sz.cx = rc.right;",
          "100:  sz.cy = rc.bottom;",
          "103:  if (nWindowsVersion == WINDOWS_10) {",
          "104:   checkbox_internal_spacing = 10;",
          "105:   dropdown_internal_spacing = 13;",
          "106:  }",
          "109:  cbw = MulDiv(checkbox_internal_spacing, sz.cx, 4);",
          "110:  ddw = MulDiv(dropdown_internal_spacing, sz.cx, 4);",
          "113:  GetWindowRect(GetDlgItem(hDlg, IDC_TARGET_SYSTEM), &rc);",
          "114:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "115:  sw = rc.left;",
          "116:  GetWindowRect(GetDlgItem(hDlg, IDC_PARTITION_TYPE), &rc);",
          "117:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "118:  sw -= rc.right;",
          "119:  mw = rc.left;",
          "122:  SendMessage(hSaveToolbar, TB_GETIDEALSIZE, (WPARAM)FALSE, (LPARAM)&sz);",
          "123:  sbw = sz.cx;",
          "126:  GetWindowRect(GetDlgItem(hDlg, IDC_SAVE), &rc);",
          "127:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "128:  bh = rc.bottom - rc.top;",
          "129:  ssw = rc.left;",
          "130:  GetWindowRect(hDeviceList, &rc);",
          "131:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "132:  ssw -= rc.right;",
          "135:  GetWindowRect(GetDlgItem(hDlg, IDS_CSM_HELP_TXT), &rc);",
          "136:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "137:  tw = rc.left;",
          "138:  GetWindowRect(hTargetSystem, &rc);",
          "139:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "140:  tw -= rc.right;",
          "141: }",
          "144: void GetMainButtonsWidth(HWND hDlg)",
          "145: {",
          "146:  unsigned int i;",
          "147:  RECT rc;",
          "149:  GetWindowRect(GetDlgItem(hDlg, main_button_ids[0]), &rc);",
          "150:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "151:  bw = rc.right - rc.left;",
          "153:  for (i = 0; i < ARRAYSIZE(main_button_ids); i++)",
          "154:   bw = max(bw, GetTextWidth(hDlg, main_button_ids[i]) + cbw);",
          "156:  bw = max(bw, GetTextSize(GetDlgItem(hDlg, IDCANCEL), lmprintf(MSG_007)).cx + cbw);",
          "157: }",
          "162: void GetHalfDropwdownWidth(HWND hDlg)",
          "163: {",
          "164:  RECT rc;",
          "165:  unsigned int i, j, msg_id;",
          "166:  char tmp[256];",
          "169:  GetWindowRect(GetDlgItem(hDlg, IDC_PARTITION_TYPE), &rc);",
          "170:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "171:  hw = rc.right - rc.left - ddw;",
          "174:  hw = max(hw, GetTextSize(GetDlgItem(hDlg, IDC_PARTITION_TYPE), (char*)sfd_name).cx);",
          "177:  for (i = 512, j = 1, msg_id = MSG_026; j<MAX_CLUSTER_SIZES; i <<= 1, j++) {",
          "178:   if (i > 8192) {",
          "179:    i /= 1024;",
          "180:    msg_id++;",
          "181:   }",
          "182:   safe_sprintf(tmp, 64, \"%d %s\", i, lmprintf(msg_id));",
          "183:   hw = max(hw, GetTextSize(GetDlgItem(hDlg, IDC_CLUSTER_SIZE), lmprintf(MSG_030, tmp)).cx);",
          "184:  }",
          "187:  for (msg_id = MSG_031; msg_id <= MSG_033; msg_id++)",
          "188:   hw = max(hw, GetTextSize(GetDlgItem(hDlg, IDC_TARGET_SYSTEM), lmprintf(msg_id)).cx);",
          "191:  for (i = 1; i <= 5; i++) {",
          "192:   char* msg = (i == 1) ? lmprintf(MSG_034, 1) : lmprintf(MSG_035, (i == 2) ? 2 : 4, (i == 2) ? \"\" : lmprintf(MSG_087, flash_type[i - 3]));",
          "193:   hw = max(hw, GetTextSize(GetDlgItem(hDlg, IDC_TARGET_SYSTEM), msg).cx);",
          "194:  }",
          "198:  hw = max(hw, GetTextWidth(hDlg, IDC_RUFUS_MBR) - sw);",
          "199:  hw = max(hw, GetTextWidth(hDlg, IDC_BAD_BLOCKS) - sw);",
          "202:  hw += ddw;",
          "203: }",
          "222: void GetFullWidth(HWND hDlg)",
          "223: {",
          "224:  RECT rc;",
          "225:  int i;",
          "228:  GetWindowRect(hDlg, &rc);",
          "229:  dbw = rc.right - rc.left;",
          "230:  GetClientRect(hDlg, &rc);",
          "231:  dbw -= rc.right - rc.left;",
          "234:  GetWindowRect(GetDlgItem(hDlg, IDC_BOOT_SELECTION), &rc);",
          "235:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "237:  bsw = max(rc.right - rc.left, GetTextSize(hBootType, lmprintf(MSG_279)).cx + ddw);",
          "238:  bsw = max(bsw, GetTextSize(hBootType, lmprintf(MSG_281, lmprintf(MSG_280))).cx + ddw);",
          "241:  GetWindowRect(GetDlgItem(hDlg, IDC_IMAGE_OPTION), &rc);",
          "242:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "243:  fw = rc.right - rc.left - ddw;",
          "246:  fw = max(fw, GetTextSize(GetDlgItem(hDlg, IDC_IMAGE_OPTION), lmprintf(MSG_117)).cx);",
          "247:  fw = max(fw, GetTextSize(GetDlgItem(hDlg, IDC_IMAGE_OPTION), lmprintf(MSG_118)).cx);",
          "250:  for (i = 0; i<ARRAYSIZE(full_width_checkboxes); i++)",
          "251:   fw = max(fw, GetTextWidth(hDlg, full_width_checkboxes[i]));",
          "254:  fw += ddw;",
          "257:  fw = max(fw, 2 * hw + sw);",
          "261:  bw = max(bw, (fw - 2 * ssw - sw) / 4);",
          "263:  bw = max(bw, (bsw + sbw - sw) / 3);",
          "266:  bw = max(bw, (hw / 2) - ssw);",
          "269:  hw = max(hw, 2 * bw + ssw);",
          "270:  fw = max(fw, 2 * hw + sw);",
          "272:  bsw = max(bsw, fw - bw - 2 * ssw - sbw);",
          "275: }",
          "277: void PositionMainControls(HWND hDlg)",
          "278: {",
          "279:  RECT rc;",
          "280:  HWND hCtrl, hPrevCtrl;",
          "281:  SIZE sz;",
          "282:  DWORD padding;",
          "283:  int i, x, button_fudge = 2;",
          "286:  GetWindowRect(hDlg, &rc);",
          "288:  SetWindowPos(hDlg, NULL, -1, -1, fw + 2 * mw + dbw, rc.bottom - rc.top, SWP_NOMOVE | SWP_NOZORDER);",
          "291:  hCtrl = GetDlgItem(hDlg, IDC_DEVICE);",
          "292:  GetWindowRect(hCtrl, &rc);",
          "293:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "294:  ddh = rc.bottom - rc.top;",
          "295:  ddbh = ddh + button_fudge;",
          "296:  bh = max(bh, ddbh);",
          "297:  hCtrl = GetDlgItem(hDlg, IDC_LABEL);",
          "298:  GetWindowRect(hCtrl, &rc);",
          "299:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "300:  SetWindowPos(hCtrl, hAdvancedFormatToolbar, rc.left, rc.top, rc.right - rc.left, ddh, SWP_NOZORDER);",
          "301:  GetWindowRect(hProgress, &rc);",
          "302:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "303:  SetWindowPos(hProgress, hNBPasses, rc.left, rc.top, rc.right - rc.left, ddh, SWP_NOZORDER);",
          "306:  hCtrl = GetDlgItem(hDlg, IDS_BOOT_SELECTION_TXT);",
          "307:  GetWindowRect(hCtrl, &rc);",
          "308:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "309:  rh = rc.top;",
          "310:  hCtrl = GetDlgItem(hDlg, IDS_DEVICE_TXT);",
          "311:  GetWindowRect(hCtrl, &rc);",
          "312:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "313:  rh -= rc.top;",
          "316:  hCtrl = GetDlgItem(hDlg, IDC_LIST_USB_HDD);",
          "317:  GetWindowRect(hCtrl, &rc);",
          "318:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "319:  advanced_device_section_height = rc.top;",
          "320:  hCtrl = GetDlgItem(hDlg, IDC_RUFUS_MBR);",
          "321:  GetWindowRect(hCtrl, &rc);",
          "322:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "323:  advanced_device_section_height = rc.bottom - advanced_device_section_height;",
          "325:  hCtrl = GetDlgItem(hDlg, IDC_QUICK_FORMAT);",
          "326:  GetWindowRect(hCtrl, &rc);",
          "327:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "328:  advanced_format_section_height = rc.top;",
          "329:  hCtrl = GetDlgItem(hDlg, IDC_BAD_BLOCKS);",
          "330:  GetWindowRect(hCtrl, &rc);",
          "331:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "332:  advanced_format_section_height = rc.bottom - advanced_format_section_height;",
          "335:  hCtrl = GetDlgItem(hDlg, IDS_DRIVE_PROPERTIES_TXT);",
          "336:  GetWindowRect(hCtrl, &rc);",
          "337:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "338:  sz = GetTextSize(hCtrl, NULL);",
          "339:  section_vpos[0] = rc.top + 2 * sz.cy / 3;",
          "340:  hCtrl = GetDlgItem(hDlg, IDS_FORMAT_OPTIONS_TXT);",
          "341:  GetWindowRect(hCtrl, &rc);",
          "342:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "343:  sz = GetTextSize(hCtrl, NULL);",
          "344:  section_vpos[1] = rc.top + 2 * sz.cy / 3;",
          "345:  hCtrl = GetDlgItem(hDlg, IDS_STATUS_TXT);",
          "346:  GetWindowRect(hCtrl, &rc);",
          "347:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "348:  sz = GetTextSize(hCtrl, NULL);",
          "349:  section_vpos[2] = rc.top + 2 * sz.cy / 3;",
          "353:  SendMessage(hMultiToolbar, TB_GETIDEALSIZE, (WPARAM)FALSE, (LPARAM)&sz);",
          "354:  GetWindowRect(GetDlgItem(hDlg, IDC_ABOUT), &rc);",
          "355:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "356:  SetWindowPos(hMultiToolbar, hProgress, rc.left, rc.top, sz.cx, ddbh, 0);",
          "359:  for (i = 0; i < ARRAYSIZE(main_button_ids); i++) {",
          "360:   hCtrl = GetDlgItem(hDlg, main_button_ids[i]);",
          "361:   GetWindowRect(hCtrl, &rc);",
          "362:   MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "363:   x = mw + fw - bw;",
          "364:   if (i % 2 == 1)",
          "365:    x -= bw + ssw;",
          "366:   hPrevCtrl = GetNextWindow(hCtrl, GW_HWNDPREV);",
          "367:   SetWindowPos(hCtrl, hPrevCtrl, x, rc.top, bw, ddbh, 0);",
          "368:  }",
          "371:  hCtrl = GetDlgItem(hDlg, IDC_SAVE);",
          "372:  GetWindowRect(hCtrl, &rc);",
          "373:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "374:  SendMessage(hSaveToolbar, TB_GETIDEALSIZE, (WPARAM)FALSE, (LPARAM)&sz);",
          "375:  SendMessage(hSaveToolbar, TB_SETBUTTONSIZE, 0, MAKELPARAM(sz.cx, ddbh));",
          "377:  padding = (DWORD)SendMessage(hSaveToolbar, TB_GETPADDING, 0, 0);",
          "378:  sz.cx = padding & 0xFFFF;",
          "379:  sz.cy = padding >> 16;",
          "380:  SendMessage(hSaveToolbar, TB_SETPADDING, 0, MAKELPARAM(sz.cx + 3, sz.cy + 2));",
          "381:  SetWindowPos(hSaveToolbar, hDeviceList, mw + fw - sbw, rc.top, sbw, ddbh, 0);",
          "384:  hCtrl = GetDlgItem(hDlg, IDC_HASH);",
          "385:  GetWindowRect(hCtrl, &rc);",
          "386:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "387:  SendMessage(hHashToolbar, TB_GETIDEALSIZE, (WPARAM)FALSE, (LPARAM)&sz);",
          "388:  SendMessage(hHashToolbar, TB_SETBUTTONSIZE, 0, MAKELPARAM(sz.cx, ddbh));",
          "389:  padding = (DWORD)SendMessage(hHashToolbar, TB_GETPADDING, 0, 0);",
          "390:  sz.cx = padding & 0xFFFF;",
          "391:  sz.cy = padding >> 16;",
          "392:  SendMessage(hHashToolbar, TB_SETPADDING, 0, MAKELPARAM(sz.cx + 3, sz.cy + 2));",
          "393:  SetWindowPos(hHashToolbar, hBootType, mw + bsw + ssw, rc.top, sbw, ddbh, 0);",
          "396:  hCtrl = GetDlgItem(hDlg, IDS_CSM_HELP_TXT);",
          "397:  GetWindowRect(hCtrl, &rc);",
          "398:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "399:  SetWindowPos(hCtrl, hTargetSystem, mw + fw + tw, rc.top, sbw, rc.bottom - rc.top, 0);",
          "401:  if (advanced_mode_device) {",
          "403:   GetWindowRect(hDeviceList, &rc);",
          "404:   MapWindowPoints(NULL, hMainDialog, (POINT*)&rc, 2);",
          "405:   SetWindowPos(hDeviceList, HWND_TOP, rc.left, rc.top, fw - ssw - sbw, rc.bottom - rc.top, 0);",
          "406:  }",
          "409:  for (i = 0; i < ARRAYSIZE(full_width_controls); i++) {",
          "410:   hCtrl = GetDlgItem(hDlg, full_width_controls[i]);",
          "411:   GetWindowRect(hCtrl, &rc);",
          "412:   MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "413:   hPrevCtrl = GetNextWindow(hCtrl, GW_HWNDPREV);",
          "414:   SetWindowPos(hCtrl, hPrevCtrl, rc.left, rc.top, fw, rc.bottom - rc.top, 0);",
          "415:  }",
          "418:  for (i = 0; i < ARRAYSIZE(half_width_ids); i++) {",
          "419:   hCtrl = GetDlgItem(hDlg, half_width_ids[i]);",
          "420:   GetWindowRect(hCtrl, &rc);",
          "421:   MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "424:   hPrevCtrl = GetNextWindow(hCtrl, GW_HWNDPREV);",
          "425:   SetWindowPos(hCtrl, hPrevCtrl, (i < 5) ? rc.left : mw + hw + sw, rc.top,",
          "426:    (i <2) ? hw + sw : hw, rc.bottom - rc.top, 0);",
          "427:  }",
          "430:  hCtrl = GetDlgItem(hDlg, IDC_BOOT_SELECTION);",
          "431:  GetWindowRect(hCtrl, &rc);",
          "432:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "433:  hPrevCtrl = GetNextWindow(hCtrl, GW_HWNDPREV);",
          "434:  SetWindowPos(hCtrl, hPrevCtrl, rc.left, rc.top, bsw, rc.bottom - rc.top, 0);",
          "435: }",
          "437: static void ResizeDialogs(int shift)",
          "438: {",
          "439:  RECT rc;",
          "440:  POINT point;",
          "443:  GetWindowRect(hMainDialog, &rc);",
          "444:  point.x = (rc.right - rc.left);",
          "445:  point.y = (rc.bottom - rc.top);",
          "446:  MoveWindow(hMainDialog, rc.left, rc.top, point.x, point.y + shift, TRUE);",
          "449:  GetWindowRect(hLogDialog, &rc);",
          "450:  point.x = (rc.right - rc.left);",
          "451:  point.y = (rc.bottom - rc.top);",
          "452:  MoveWindow(hLogDialog, rc.left, rc.top, point.x, point.y + shift, TRUE);",
          "453:  MoveCtrlY(hLogDialog, IDC_LOG_CLEAR, shift);",
          "454:  MoveCtrlY(hLogDialog, IDC_LOG_SAVE, shift);",
          "455:  MoveCtrlY(hLogDialog, IDCANCEL, shift);",
          "456:  GetWindowRect(hLog, &rc);",
          "457:  point.x = (rc.right - rc.left);",
          "458:  point.y = (rc.bottom - rc.top) + shift;",
          "459:  SetWindowPos(hLog, NULL, 0, 0, point.x, point.y, SWP_NOZORDER);",
          "461:  Edit_Scroll(hLog, 0, Edit_GetLineCount(hLog));",
          "462: }",
          "465: void AdjustForLowDPI(HWND hDlg)",
          "466: {",
          "467:  static int ddy = 4;",
          "468:  int i, j;",
          "469:  RECT rc;",
          "470:  HWND hCtrl, hPrevCtrl;",
          "471:  int dy = 0;",
          "473:  if (fScale >= 1.3f)",
          "474:   return;",
          "476:  for (i = 0; i < ARRAYSIZE(adjust_dpi_ids); i++) {",
          "477:   dy += ddy;",
          "481:   if (adjust_dpi_ids[i][0] == IDC_QUICK_FORMAT)",
          "482:    dy += 1;",
          "483:   for (j = 0; j < 5; j++) {",
          "484:    if (adjust_dpi_ids[i][j] == 0)",
          "485:     break;",
          "486:    hCtrl = GetDlgItem(hDlg, adjust_dpi_ids[i][j]);",
          "487:    GetWindowRect(hCtrl, &rc);",
          "488:    MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "489:    hPrevCtrl = GetNextWindow(hCtrl, GW_HWNDPREV);",
          "490:    SetWindowPos(hCtrl, hPrevCtrl, rc.left, rc.top + dy,",
          "491:     rc.right - rc.left, rc.bottom - rc.top, 0);",
          "492:   }",
          "493:  }",
          "495:  section_vpos[1] += 9 * ddy;",
          "496:  section_vpos[2] += 16 * ddy + 1;",
          "497:  advanced_device_section_height += 3 * ddy;",
          "498:  advanced_format_section_height += 3 * ddy + 1;",
          "500:  ResizeDialogs(dy + 2 * ddy);",
          "501:  InvalidateRect(hDlg, NULL, TRUE);",
          "502: }",
          "504: void SetSectionHeaders(HWND hDlg)",
          "505: {",
          "506:  RECT rc;",
          "507:  HWND hCtrl;",
          "508:  SIZE sz;",
          "509:  HFONT hf;",
          "510:  wchar_t wtmp[128];",
          "511:  size_t wlen;",
          "512:  int i;",
          "515:  hf = CreateFontA(-MulDiv(14, GetDeviceCaps(GetDC(hMainDialog), LOGPIXELSY), 72), 0, 0, 0,",
          "516:   FW_SEMIBOLD, FALSE, FALSE, FALSE, DEFAULT_CHARSET, 0, 0, PROOF_QUALITY, 0, \"Segoe UI\");",
          "518:  for (i = 0; i < ARRAYSIZE(section_control_ids); i++) {",
          "519:   SendDlgItemMessageA(hDlg, section_control_ids[i], WM_SETFONT, (WPARAM)hf, TRUE);",
          "520:   hCtrl = GetDlgItem(hDlg, section_control_ids[i]);",
          "521:   memset(wtmp, 0, sizeof(wtmp));",
          "522:   GetWindowTextW(hCtrl, wtmp, ARRAYSIZE(wtmp));",
          "523:   wlen = wcslen(wtmp);",
          "524:   wtmp[wlen++] = L' ';",
          "525:   wtmp[wlen++] = L' ';",
          "526:   SetWindowTextW(hCtrl, wtmp);",
          "527:   GetWindowRect(hCtrl, &rc);",
          "528:   MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "529:   sz = GetTextSize(hCtrl, NULL);",
          "530:   SetWindowPos(hCtrl, NULL, rc.left, rc.top, sz.cx, sz.cy, SWP_NOZORDER);",
          "531:  }",
          "532: }",
          "535: void ToggleAdvancedDeviceOptions(BOOL enable)",
          "536: {",
          "537:  RECT rc;",
          "538:  SIZE sz;",
          "539:  TBBUTTONINFO button_info;",
          "540:  int i, shift = advanced_device_section_height;",
          "542:  if (!enable)",
          "543:   shift = -shift;",
          "544:  section_vpos[1] += shift;",
          "545:  section_vpos[2] += shift;",
          "548:  utf8_to_wchar_no_alloc(lmprintf((enable) ? MSG_122 : MSG_121, lmprintf(MSG_119)), wtbtext[0], ARRAYSIZE(wtbtext[0]));",
          "549:  button_info.cbSize = sizeof(button_info);",
          "550:  button_info.dwMask = TBIF_TEXT;",
          "551:  button_info.pszText = wtbtext[0];",
          "552:  SendMessage(hAdvancedDeviceToolbar, TB_SETBUTTONINFO, (WPARAM)IDC_ADVANCED_DRIVE_PROPERTIES, (LPARAM)&button_info);",
          "553:  SendMessage(hAdvancedDeviceToolbar, TB_SETIMAGELIST, (WPARAM)0, (LPARAM)((enable) ? hUpImageList : hDownImageList));",
          "554:  GetWindowRect(hAdvancedDeviceToolbar, &rc);",
          "555:  MapWindowPoints(NULL, hMainDialog, (POINT*)&rc, 2);",
          "556:  SendMessage(hAdvancedDeviceToolbar, TB_GETIDEALSIZE, (WPARAM)FALSE, (LPARAM)&sz);",
          "557:  SetWindowPos(hAdvancedDeviceToolbar, hTargetSystem, rc.left, rc.top, sz.cx, rc.bottom - rc.top, 0);",
          "560:  for (i = 0; i<ARRAYSIZE(advanced_device_move_ids); i++)",
          "561:   MoveCtrlY(hMainDialog, advanced_device_move_ids[i], shift);",
          "564:  for (i = 0; i<ARRAYSIZE(advanced_device_toggle_ids); i++)",
          "565:   ShowWindow(GetDlgItem(hMainDialog, advanced_device_toggle_ids[i]), enable ? SW_SHOW : SW_HIDE);",
          "567:  GetWindowRect(hDeviceList, &rc);",
          "568:  MapWindowPoints(NULL, hMainDialog, (POINT*)&rc, 2);",
          "569:  SetWindowPos(hDeviceList, HWND_TOP, rc.left, rc.top, enable ? fw - ssw - sbw : fw, rc.bottom - rc.top, 0);",
          "572:  ResizeDialogs(shift);",
          "575:  InvalidateRect(hMainDialog, NULL, TRUE);",
          "576: }",
          "578: void ToggleAdvancedFormatOptions(BOOL enable)",
          "579: {",
          "580:  RECT rc;",
          "581:  SIZE sz;",
          "582:  TBBUTTONINFO button_info;",
          "583:  int i, shift = advanced_format_section_height;",
          "585:  if (!enable)",
          "586:   shift = -shift;",
          "587:  section_vpos[2] += shift;",
          "590:  utf8_to_wchar_no_alloc(lmprintf((enable) ? MSG_122 : MSG_121, lmprintf(MSG_120)), wtbtext[1], ARRAYSIZE(wtbtext[0]));",
          "591:  button_info.cbSize = sizeof(button_info);",
          "592:  button_info.dwMask = TBIF_TEXT;",
          "593:  button_info.pszText = wtbtext[1];",
          "594:  SendMessage(hAdvancedFormatToolbar, TB_SETBUTTONINFO, (WPARAM)IDC_ADVANCED_FORMAT_OPTIONS, (LPARAM)&button_info);",
          "595:  SendMessage(hAdvancedFormatToolbar, TB_SETIMAGELIST, (WPARAM)0, (LPARAM)((enable) ? hUpImageList : hDownImageList));",
          "596:  GetWindowRect(hAdvancedFormatToolbar, &rc);",
          "597:  MapWindowPoints(NULL, hMainDialog, (POINT*)&rc, 2);",
          "598:  SendMessage(hAdvancedFormatToolbar, TB_GETIDEALSIZE, (WPARAM)FALSE, (LPARAM)&sz);",
          "599:  SetWindowPos(hAdvancedFormatToolbar, hClusterSize, rc.left, rc.top, sz.cx, rc.bottom - rc.top, 0);",
          "602:  for (i = 0; i<ARRAYSIZE(advanced_format_move_ids); i++)",
          "603:   MoveCtrlY(hMainDialog, advanced_format_move_ids[i], shift);",
          "606:  for (i = 0; i<ARRAYSIZE(advanced_format_toggle_ids); i++)",
          "607:   ShowWindow(GetDlgItem(hMainDialog, advanced_format_toggle_ids[i]), enable ? SW_SHOW : SW_HIDE);",
          "610:  ResizeDialogs(shift);",
          "613:  InvalidateRect(hMainDialog, NULL, TRUE);",
          "614: }",
          "617: void ToggleImageOption(uint8_t mask)",
          "618: {",
          "619:  int i, shift = (popcnt8(image_options) >= 2) ? 0 : rh;",
          "621:  assert(popcnt8(mask) <= 1);",
          "623:  if (mask & IMOP_WINTOGO) {",
          "624:   if (nWindowsVersion < WINDOWS_8)",
          "625:    return;",
          "626:   image_options ^= IMOP_WINTOGO;",
          "628:   IGNORE_RETVAL(ComboBox_SetCurSel(GetDlgItem(hMainDialog, IDC_IMAGE_OPTION), windows_to_go_selection));",
          "629:  } else if (mask & IMOP_PERSISTENCE) {",
          "630:   image_options ^= IMOP_PERSISTENCE;",
          "631:  }",
          "633:  if (popcnt8(image_options) >= 2)",
          "634:   shift = 0;",
          "636:  if (shift != 0) {",
          "637:   if ((mask == 0) || (image_options == 0))",
          "638:    shift = -shift;",
          "639:   section_vpos[1] += shift;",
          "640:   section_vpos[2] += shift;",
          "642:   if (popcnt8(image_options) <= 1) {",
          "644:    for (i = 0; i < ARRAYSIZE(image_option_move_ids); i++)",
          "645:     MoveCtrlY(hMainDialog, image_option_move_ids[i], shift);",
          "648:    ResizeDialogs(shift);",
          "649:   }",
          "650:  }",
          "653:  for (i = 0; i < ARRAYSIZE(image_option_toggle_ids); i++) {",
          "654:   ShowWindow(GetDlgItem(hMainDialog, image_option_toggle_ids[i][0]),",
          "655:    (image_options & image_option_toggle_ids[i][1]) ? SW_SHOW : SW_HIDE);",
          "656:  }",
          "659:  InvalidateRect(hMainDialog, NULL, TRUE);",
          "660: }",
          "663: void CreateSmallButtons(HWND hDlg)",
          "664: {",
          "665:  HIMAGELIST hImageList;",
          "666:  HICON hIconSave, hIconHash;",
          "667:  int icon_offset = 0, i16 = GetSystemMetrics(SM_CXSMICON);",
          "668:  TBBUTTON tbToolbarButtons[1];",
          "669:  unsigned char* buffer;",
          "670:  DWORD bufsize;",
          "672:  if (i16 >= 28)",
          "673:   icon_offset = 20;",
          "674:  else if (i16 >= 20)",
          "675:   icon_offset = 10;",
          "677:  hSaveToolbar = CreateWindowEx(0, TOOLBARCLASSNAME, NULL, TOOLBAR_STYLE,",
          "678:   0, 0, 0, 0, hMainDialog, (HMENU)IDC_SAVE_TOOLBAR, hMainInstance, NULL);",
          "679:  hImageList = ImageList_Create(i16, i16, ILC_COLOR32 | ILC_HIGHQUALITYSCALE | ILC_MIRROR, 1, 0);",
          "680:  buffer = GetResource(hMainInstance, MAKEINTRESOURCEA(IDI_SAVE_16 + icon_offset), _RT_RCDATA, \"save icon\", &bufsize, FALSE);",
          "681:  hIconSave = CreateIconFromResourceEx(buffer, bufsize, TRUE, 0x30000, 0, 0, 0);",
          "682:  ImageList_AddIcon(hImageList, hIconSave);",
          "683:  DestroyIcon(hIconSave);",
          "684:  SendMessage(hSaveToolbar, TB_SETIMAGELIST, (WPARAM)0, (LPARAM)hImageList);",
          "685:  SendMessage(hSaveToolbar, TB_BUTTONSTRUCTSIZE, (WPARAM)sizeof(TBBUTTON), 0);",
          "686:  memset(tbToolbarButtons, 0, sizeof(TBBUTTON));",
          "687:  tbToolbarButtons[0].idCommand = IDC_SAVE;",
          "688:  tbToolbarButtons[0].fsStyle = BTNS_AUTOSIZE;",
          "689:  tbToolbarButtons[0].fsState = TBSTATE_ENABLED;",
          "690:  tbToolbarButtons[0].iBitmap = 0;",
          "691:  SendMessage(hSaveToolbar, TB_ADDBUTTONS, (WPARAM)1, (LPARAM)&tbToolbarButtons);",
          "693:  hHashToolbar = CreateWindowEx(0, TOOLBARCLASSNAME, NULL, TOOLBAR_STYLE,",
          "694:   0, 0, 0, 0, hMainDialog, (HMENU)IDC_HASH_TOOLBAR, hMainInstance, NULL);",
          "695:  hImageList = ImageList_Create(i16, i16, ILC_COLOR32 | ILC_HIGHQUALITYSCALE | ILC_MIRROR, 1, 0);",
          "696:  buffer = GetResource(hMainInstance, MAKEINTRESOURCEA(IDI_HASH_16 + icon_offset), _RT_RCDATA, \"hash icon\", &bufsize, FALSE);",
          "697:  hIconHash = CreateIconFromResourceEx(buffer, bufsize, TRUE, 0x30000, 0, 0, 0);",
          "698:  ImageList_AddIcon(hImageList, hIconHash);",
          "699:  DestroyIcon(hIconHash);",
          "700:  SendMessage(hHashToolbar, TB_SETIMAGELIST, (WPARAM)0, (LPARAM)hImageList);",
          "701:  SendMessage(hHashToolbar, TB_BUTTONSTRUCTSIZE, (WPARAM)sizeof(TBBUTTON), 0);",
          "702:  memset(tbToolbarButtons, 0, sizeof(TBBUTTON));",
          "703:  tbToolbarButtons[0].idCommand = IDC_HASH;",
          "704:  tbToolbarButtons[0].fsStyle = BTNS_AUTOSIZE;",
          "705:  tbToolbarButtons[0].fsState = TBSTATE_ENABLED;",
          "706:  tbToolbarButtons[0].iBitmap = 0;",
          "707:  SendMessage(hHashToolbar, TB_ADDBUTTONS, (WPARAM)1, (LPARAM)&tbToolbarButtons);",
          "708: }",
          "710: static INT_PTR CALLBACK ProgressCallback(HWND hCtrl, UINT message, WPARAM wParam, LPARAM lParam)",
          "711: {",
          "712:  HDC hDC;",
          "713:  RECT rc, rc2;",
          "714:  PAINTSTRUCT ps;",
          "715:  SIZE size;",
          "716:  LONG full_right;",
          "717:  wchar_t winfo[128];",
          "718:  static BOOL marquee_mode = FALSE;",
          "719:  static uint32_t pos = 0, min = 0, max = 0xFFFF;",
          "720:  static COLORREF color = PROGRESS_BAR_NORMAL_COLOR;",
          "722:  switch (message) {",
          "724:  case PBM_SETSTATE:",
          "725:   switch (wParam) {",
          "726:   case PBST_NORMAL:",
          "727:    color = PROGRESS_BAR_NORMAL_COLOR;",
          "728:    break;",
          "729:   case PBST_PAUSED:",
          "730:    color = PROGRESS_BAR_PAUSED_COLOR;",
          "731:    break;",
          "732:   case PBST_ERROR:",
          "733:    color = PROGRESS_BAR_ERROR_COLOR;",
          "734:    break;",
          "735:   }",
          "736:   return (INT_PTR)TRUE;",
          "738:  case PBM_SETRANGE:",
          "741:   min = (uint32_t)(lParam & 0xFFFF);",
          "742:   max = (uint32_t)(lParam >> 16);",
          "743:   return (INT_PTR)TRUE;",
          "745:  case PBM_SETPOS:",
          "746:   pos = (WORD)wParam;",
          "747:   InvalidateRect(hProgress, NULL, TRUE);",
          "748:   return (INT_PTR)TRUE;",
          "750:  case PBM_SETMARQUEE:",
          "751:   if ((wParam == TRUE) && (!marquee_mode)) {",
          "752:    marquee_mode = TRUE;",
          "753:    pos = min;",
          "754:    color = PROGRESS_BAR_NORMAL_COLOR;",
          "755:    SetTimer(hCtrl, TID_MARQUEE_TIMER, MARQUEE_TIMER_REFRESH, NULL);",
          "756:    InvalidateRect(hProgress, NULL, TRUE);",
          "757:   } else if ((wParam == FALSE) && (marquee_mode)) {",
          "758:    marquee_mode = FALSE;",
          "759:    KillTimer(hCtrl, TID_MARQUEE_TIMER);",
          "760:    pos = min;",
          "761:    InvalidateRect(hProgress, NULL, TRUE);",
          "762:   }",
          "763:   return (INT_PTR)TRUE;",
          "765:  case WM_TIMER:",
          "766:   if ((wParam == TID_MARQUEE_TIMER) && marquee_mode) {",
          "767:    pos += max((max - min) / (1000 / MARQUEE_TIMER_REFRESH), 1);",
          "768:    if ((pos > max) || (pos < min))",
          "769:     pos = min;",
          "770:    InvalidateRect(hProgress, NULL, TRUE);",
          "771:    return (INT_PTR)TRUE;",
          "772:   }",
          "773:   return (INT_PTR)FALSE;",
          "775:  case WM_PAINT:",
          "776:   hDC = BeginPaint(hCtrl, &ps);",
          "777:   GetClientRect(hCtrl, &rc);",
          "778:   rc2 = rc;",
          "779:   InflateRect(&rc, -1, -1);",
          "780:   SelectObject(hDC, GetStockObject(DC_PEN));",
          "781:   SelectObject(hDC, GetStockObject(NULL_BRUSH));",
          "783:   GetWindowTextW(hProgress, winfo, ARRAYSIZE(winfo));",
          "784:   SelectObject(hDC, hInfoFont);",
          "785:   GetTextExtentPoint32(hDC, winfo, (int)wcslen(winfo), &size);",
          "786:   if (size.cx > rc.right)",
          "787:    size.cx = rc.right;",
          "788:   if (size.cy > rc.bottom)",
          "789:    size.cy = rc.bottom;",
          "790:   full_right = rc.right;",
          "791:   if (marquee_mode) {",
          "793:    if (pos + ((max - min) / 5) > max) {",
          "794:     rc.right = MulDiv(pos + ((max - min) / 5) - max, rc.right, max - min);",
          "795:     SetTextColor(hDC, PROGRESS_BAR_INVERTED_TEXT_COLOR);",
          "796:     SetBkColor(hDC, color);",
          "797:     ExtTextOut(hDC, (full_right - size.cx) / 2, (rc.bottom - size.cy) / 2,",
          "798:      ETO_CLIPPED | ETO_OPAQUE | ETO_NUMERICSLOCAL, &rc, winfo, (int)wcslen(winfo), NULL);",
          "799:     rc.left = rc.right;",
          "800:     rc.right = full_right;",
          "801:    }",
          "803:    if (pos > min) {",
          "804:     rc.right = MulDiv(pos - min, rc.right, max - min);",
          "805:     SetTextColor(hDC, PROGRESS_BAR_NORMAL_TEXT_COLOR);",
          "806:     SetBkColor(hDC, PROGRESS_BAR_BACKGROUND_COLOR);",
          "807:     ExtTextOut(hDC, (full_right - size.cx) / 2, (rc.bottom - size.cy) / 2,",
          "808:      ETO_CLIPPED | ETO_OPAQUE | ETO_NUMERICSLOCAL, &rc, winfo, (int)wcslen(winfo), NULL);",
          "809:     rc.left = rc.right;",
          "810:     rc.right = full_right;",
          "811:    }",
          "813:    rc.right = MulDiv(pos - min + ((max - min) / 5), rc.right, max - min);",
          "814:    SetTextColor(hDC, PROGRESS_BAR_INVERTED_TEXT_COLOR);",
          "815:    SetBkColor(hDC, color);",
          "816:    ExtTextOut(hDC, (full_right - size.cx) / 2, (rc.bottom - size.cy) / 2,",
          "817:     ETO_CLIPPED | ETO_OPAQUE | ETO_NUMERICSLOCAL, &rc, winfo, (int)wcslen(winfo), NULL);",
          "818:   } else {",
          "820:    rc.right = (pos > min) ? MulDiv(pos - min, rc.right, max - min) : rc.left;",
          "821:    SetTextColor(hDC, PROGRESS_BAR_INVERTED_TEXT_COLOR);",
          "822:    SetBkColor(hDC, color);",
          "823:    ExtTextOut(hDC, (full_right - size.cx) / 2, (rc.bottom - size.cy) / 2,",
          "824:     ETO_CLIPPED | ETO_OPAQUE | ETO_NUMERICSLOCAL, &rc, winfo, (int)wcslen(winfo), NULL);",
          "825:   }",
          "827:   rc.left = rc.right;",
          "828:   rc.right = full_right;",
          "829:   SetTextColor(hDC, PROGRESS_BAR_NORMAL_TEXT_COLOR);",
          "830:   SetBkColor(hDC, PROGRESS_BAR_BACKGROUND_COLOR);",
          "831:   ExtTextOut(hDC, (full_right - size.cx) / 2, (rc.bottom - size.cy) / 2,",
          "832:    ETO_CLIPPED | ETO_OPAQUE | ETO_NUMERICSLOCAL, &rc, winfo, (int)wcslen(winfo), NULL);",
          "834:   SetDCPenColor(hDC, PROGRESS_BAR_BOX_COLOR);",
          "835:   Rectangle(hDC, rc2.left, rc2.top, rc2.right, rc2.bottom);",
          "836:   EndPaint(hCtrl, &ps);",
          "837:   return (INT_PTR)TRUE;",
          "838:  }",
          "840:  return CallWindowProc(progress_original_proc, hCtrl, message, wParam, lParam);",
          "841: }",
          "843: void CreateAdditionalControls(HWND hDlg)",
          "844: {",
          "845:  HINSTANCE hDll;",
          "846:  HIMAGELIST hToolbarImageList;",
          "847:  HICON hIcon, hIconUp, hIconDown;",
          "848:  RECT rc;",
          "849:  SIZE sz;",
          "850:  int icon_offset = 0, i, i16, s16, toolbar_dx = -4 - ((fScale > 1.49f) ? 1 : 0) - ((fScale > 1.99f) ? 1 : 0);",
          "851:  TBBUTTON tbToolbarButtons[7];",
          "852:  unsigned char* buffer;",
          "853:  DWORD bufsize;",
          "855:  s16 = i16 = GetSystemMetrics(SM_CXSMICON);",
          "856:  if (s16 >= 54)",
          "857:   s16 = 64;",
          "858:  else if (s16 >= 40)",
          "859:   s16 = 48;",
          "860:  else if (s16 >= 28)",
          "861:   s16 = 32;",
          "862:  else if (s16 >= 20)",
          "863:   s16 = 24;",
          "864:  if (i16 >= 28)",
          "865:   icon_offset = 20;",
          "866:  else if (i16 >= 20)",
          "867:   icon_offset = 10;",
          "870:  hDll = GetLibraryHandle(\"ComDlg32\");",
          "871:  hIconDown = (HICON)LoadImage(hDll, MAKEINTRESOURCE(577), IMAGE_ICON, s16, s16, LR_DEFAULTCOLOR | LR_SHARED);",
          "872:  hIconUp = (HICON)LoadImage(hDll, MAKEINTRESOURCE(578), IMAGE_ICON, s16, s16, LR_DEFAULTCOLOR | LR_SHARED);",
          "874:  hDll = GetLibraryHandle(\"Shell32\");",
          "875:  if (hIconUp == NULL)",
          "876:   hIconUp = (HICON)LoadImage(hDll, MAKEINTRESOURCE(16749), IMAGE_ICON, s16, s16, LR_DEFAULTCOLOR | LR_SHARED);",
          "877:  if (hIconDown == NULL)",
          "878:   hIconDown = (HICON)LoadImage(hDll, MAKEINTRESOURCE(16750), IMAGE_ICON, s16, s16, LR_DEFAULTCOLOR | LR_SHARED);",
          "879:  hUpImageList = ImageList_Create(i16, i16, ILC_COLOR32 | ILC_HIGHQUALITYSCALE, 1, 0);",
          "880:  hDownImageList = ImageList_Create(i16, i16, ILC_COLOR32 | ILC_HIGHQUALITYSCALE, 1, 0);",
          "881:  ImageList_AddIcon(hUpImageList, hIconUp);",
          "882:  ImageList_AddIcon(hDownImageList, hIconDown);",
          "885:  memset(wtbtext, 0, sizeof(wtbtext));",
          "886:  utf8_to_wchar_no_alloc(lmprintf((advanced_mode_device) ? MSG_122 : MSG_121, lmprintf(MSG_119)), wtbtext[0], ARRAYSIZE(wtbtext[0]));",
          "887:  hAdvancedDeviceToolbar = CreateWindowEx(0, TOOLBARCLASSNAME, NULL, TOOLBAR_STYLE,",
          "888:   0, 0, 0, 0, hMainDialog, (HMENU)IDC_ADVANCED_DEVICE_TOOLBAR, hMainInstance, NULL);",
          "889:  SendMessage(hAdvancedDeviceToolbar, CCM_SETVERSION, (WPARAM)6, 0);",
          "890:  memset(tbToolbarButtons, 0, sizeof(TBBUTTON));",
          "891:  tbToolbarButtons[0].idCommand = IDC_ADVANCED_DRIVE_PROPERTIES;",
          "892:  tbToolbarButtons[0].fsStyle = BTNS_SHOWTEXT | BTNS_AUTOSIZE;",
          "893:  tbToolbarButtons[0].fsState = TBSTATE_ENABLED;",
          "894:  tbToolbarButtons[0].iString = (INT_PTR)wtbtext[0];",
          "895:  tbToolbarButtons[0].iBitmap = 0;",
          "896:  SendMessage(hAdvancedDeviceToolbar, TB_SETIMAGELIST, 0, (LPARAM)hUpImageList);",
          "897:  SendMessage(hAdvancedDeviceToolbar, TB_BUTTONSTRUCTSIZE, (WPARAM)sizeof(TBBUTTON), 0);",
          "898:  SendMessage(hAdvancedDeviceToolbar, TB_ADDBUTTONS, 1, (LPARAM)&tbToolbarButtons);",
          "899:  GetWindowRect(GetDlgItem(hDlg, IDC_ADVANCED_DRIVE_PROPERTIES), &rc);",
          "900:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "901:  SendMessage(hAdvancedDeviceToolbar, TB_GETIDEALSIZE, (WPARAM)FALSE, (LPARAM)&sz);",
          "903:  if (sz.cx < 16)",
          "904:   sz.cx = fw;",
          "905:  SetWindowPos(hAdvancedDeviceToolbar, hTargetSystem, rc.left + toolbar_dx, rc.top, sz.cx, rc.bottom - rc.top, 0);",
          "907:  utf8_to_wchar_no_alloc(lmprintf((advanced_mode_format) ? MSG_122 : MSG_121, lmprintf(MSG_120)), wtbtext[1], ARRAYSIZE(wtbtext[1]));",
          "908:  hAdvancedFormatToolbar = CreateWindowEx(0, TOOLBARCLASSNAME, NULL, TOOLBAR_STYLE,",
          "909:   0, 0, 0, 0, hMainDialog, (HMENU)IDC_ADVANCED_FORMAT_TOOLBAR, hMainInstance, NULL);",
          "910:  SendMessage(hAdvancedFormatToolbar, CCM_SETVERSION, (WPARAM)6, 0);",
          "911:  memset(tbToolbarButtons, 0, sizeof(TBBUTTON));",
          "912:  tbToolbarButtons[0].idCommand = IDC_ADVANCED_FORMAT_OPTIONS;",
          "913:  tbToolbarButtons[0].fsStyle = BTNS_SHOWTEXT | BTNS_AUTOSIZE;",
          "914:  tbToolbarButtons[0].fsState = TBSTATE_ENABLED;",
          "915:  tbToolbarButtons[0].iString = (INT_PTR)wtbtext[1];",
          "916:  tbToolbarButtons[0].iBitmap = 0;",
          "917:  SendMessage(hAdvancedFormatToolbar, TB_SETIMAGELIST, (WPARAM)0, (LPARAM)hUpImageList);",
          "918:  SendMessage(hAdvancedFormatToolbar, TB_BUTTONSTRUCTSIZE, (WPARAM)sizeof(TBBUTTON), 0);",
          "919:  SendMessage(hAdvancedFormatToolbar, TB_ADDBUTTONS, (WPARAM)1, (LPARAM)&tbToolbarButtons);",
          "920:  GetWindowRect(GetDlgItem(hDlg, IDC_ADVANCED_FORMAT_OPTIONS), &rc);",
          "921:  MapWindowPoints(NULL, hDlg, (POINT*)&rc, 2);",
          "922:  SendMessage(hAdvancedFormatToolbar, TB_GETIDEALSIZE, (WPARAM)FALSE, (LPARAM)&sz);",
          "923:  if (sz.cx < 16)",
          "924:   sz.cx = fw;",
          "925:  SetWindowPos(hAdvancedFormatToolbar, hClusterSize, rc.left + toolbar_dx, rc.top, sz.cx, rc.bottom - rc.top, 0);",
          "928:  hMultiToolbar = CreateWindowEx(0, TOOLBARCLASSNAME, NULL, TOOLBAR_STYLE,",
          "929:   0, 0, 0, 0, hMainDialog, (HMENU)IDC_MULTI_TOOLBAR, hMainInstance, NULL);",
          "930:  hToolbarImageList = ImageList_Create(i16, i16, ILC_COLOR32 | ILC_HIGHQUALITYSCALE, 8, 0);",
          "931:  for (i = 0; i < ARRAYSIZE(multitoolbar_icons); i++) {",
          "932:   buffer = GetResource(hMainInstance, MAKEINTRESOURCEA(multitoolbar_icons[i] + icon_offset),",
          "933:    _RT_RCDATA, \"toolbar icon\", &bufsize, FALSE);",
          "934:   hIcon = CreateIconFromResourceEx(buffer, bufsize, TRUE, 0x30000, 0, 0, 0);",
          "936:   if (right_to_left_mode && (i == 0))",
          "937:    hIcon = CreateMirroredIcon(hIcon);",
          "938:   ImageList_AddIcon(hToolbarImageList, hIcon);",
          "939:   DestroyIcon(hIcon);",
          "940:  }",
          "941:  SendMessage(hMultiToolbar, TB_SETIMAGELIST, (WPARAM)0, (LPARAM)hToolbarImageList);",
          "942:  SendMessage(hMultiToolbar, TB_BUTTONSTRUCTSIZE, (WPARAM)sizeof(TBBUTTON), 0);",
          "943:  memset(tbToolbarButtons, 0, sizeof(TBBUTTON) * ARRAYSIZE(tbToolbarButtons));",
          "944:  tbToolbarButtons[0].idCommand = IDC_LANG;",
          "945:  tbToolbarButtons[0].fsStyle = BTNS_BUTTON;",
          "946:  tbToolbarButtons[0].fsState = TBSTATE_ENABLED;",
          "947:  tbToolbarButtons[0].iBitmap = 0;",
          "948:  tbToolbarButtons[1].fsStyle = BTNS_AUTOSIZE;",
          "949:  tbToolbarButtons[1].fsState = TBSTATE_INDETERMINATE;",
          "950:  tbToolbarButtons[1].iBitmap = I_IMAGENONE;",
          "951:  tbToolbarButtons[1].iString = (fScale < 1.5f) ? (INT_PTR)L\"\" : (INT_PTR)L\" \";",
          "952:  tbToolbarButtons[2].idCommand = IDC_ABOUT;",
          "953:  tbToolbarButtons[2].fsStyle = BTNS_BUTTON;",
          "954:  tbToolbarButtons[2].fsState = TBSTATE_ENABLED;",
          "955:  tbToolbarButtons[2].iBitmap = 1;",
          "956:  tbToolbarButtons[3].fsStyle = BTNS_AUTOSIZE;",
          "957:  tbToolbarButtons[3].fsState = TBSTATE_INDETERMINATE;",
          "958:  tbToolbarButtons[3].iBitmap = I_IMAGENONE;",
          "959:  tbToolbarButtons[3].iString = (fScale < 1.5f) ? (INT_PTR)L\"\" : (INT_PTR)L\" \";",
          "960:  tbToolbarButtons[4].idCommand = IDC_SETTINGS;",
          "961:  tbToolbarButtons[4].fsStyle = BTNS_BUTTON;",
          "962:  tbToolbarButtons[4].fsState = TBSTATE_ENABLED;",
          "963:  tbToolbarButtons[4].iBitmap = 2;",
          "964:  tbToolbarButtons[5].fsStyle = BTNS_AUTOSIZE;",
          "965:  tbToolbarButtons[5].fsState = TBSTATE_INDETERMINATE;",
          "966:  tbToolbarButtons[5].iBitmap = I_IMAGENONE;",
          "967:  tbToolbarButtons[5].iString = (fScale < 1.5f) ? (INT_PTR)L\"\" : (INT_PTR)L\" \";",
          "968:  tbToolbarButtons[6].idCommand = IDC_LOG;",
          "969:  tbToolbarButtons[6].fsStyle = BTNS_BUTTON;",
          "970:  tbToolbarButtons[6].fsState = TBSTATE_ENABLED;",
          "971:  tbToolbarButtons[6].iBitmap = 3;",
          "972:  SendMessage(hMultiToolbar, TB_ADDBUTTONS, (WPARAM)7, (LPARAM)&tbToolbarButtons);",
          "973:  SendMessage(hMultiToolbar, TB_SETBUTTONSIZE, 0, MAKELPARAM(i16, ddbh));",
          "976:  progress_original_proc = (WNDPROC)SetWindowLongPtr(hProgress, GWLP_WNDPROC, (LONG_PTR)ProgressCallback);",
          "977: }",
          "980: void InitProgress(BOOL bOnlyFormat)",
          "981: {",
          "982:  int i;",
          "983:  float last_end = 0.0f, slots_discrete = 0.0f, slots_analog = 0.0f;",
          "985:  memset(nb_slots, 0, sizeof(nb_slots));",
          "986:  memset(slot_end, 0, sizeof(slot_end));",
          "987:  previous_end = 0.0f;",
          "989:  if (bOnlyFormat) {",
          "990:   nb_slots[OP_FORMAT] = -1;",
          "991:  } else {",
          "992:   nb_slots[OP_ANALYZE_MBR] = 1;",
          "993:   if (IsChecked(IDC_BAD_BLOCKS)) {",
          "994:    nb_slots[OP_BADBLOCKS] = -1;",
          "995:   }",
          "996:   if (bt != BT_NON_BOOTABLE) {",
          "998:    switch (selection_default) {",
          "999:    case BT_MSDOS:",
          "1000:     nb_slots[OP_DOS] = 3 + 1;",
          "1001:     break;",
          "1002:    case BT_FREEDOS:",
          "1003:     nb_slots[OP_DOS] = 5 + 1;",
          "1004:     break;",
          "1005:    case BT_IMAGE:",
          "1006:     nb_slots[OP_DOS] = img_report.is_iso ? -1 : 0;",
          "1007:     break;",
          "1008:    default:",
          "1009:     nb_slots[OP_DOS] = 2 + 1;",
          "1010:     break;",
          "1011:    }",
          "1012:   }",
          "1013:   if (selection_default == BT_IMAGE && !img_report.is_iso) {",
          "1014:    nb_slots[OP_FORMAT] = -1;",
          "1015:   } else {",
          "1016:    nb_slots[OP_ZERO_MBR] = 1;",
          "1017:    nb_slots[OP_PARTITION] = 1;",
          "1018:    nb_slots[OP_FIX_MBR] = 1;",
          "1019:    nb_slots[OP_CREATE_FS] =",
          "1020:     nb_steps[ComboBox_GetItemData(hFileSystem, ComboBox_GetCurSel(hFileSystem))];",
          "1021:    if ((!IsChecked(IDC_QUICK_FORMAT))",
          "1022:     || ((fs == FS_FAT32) && ((SelectedDrive.DiskSize >= LARGE_FAT32_SIZE) || (force_large_fat32)))) {",
          "1023:     nb_slots[OP_FORMAT] = -1;",
          "1024:    }",
          "1025:    nb_slots[OP_FINALIZE] = ((selection_default == BT_IMAGE) && (fs == FS_NTFS)) ? 3 : 2;",
          "1026:   }",
          "1027:  }",
          "1029:  for (i = 0; i<OP_MAX; i++) {",
          "1030:   if (nb_slots[i] > 0) {",
          "1031:    slots_discrete += nb_slots[i] * 1.0f;",
          "1032:   }",
          "1033:   if (nb_slots[i] < 0) {",
          "1034:    slots_analog += nb_slots[i] * 1.0f;",
          "1035:   }",
          "1036:  }",
          "1038:  for (i = 0; i<OP_MAX; i++) {",
          "1039:   if (nb_slots[i] == 0) {",
          "1040:    slot_end[i + 1] = last_end;",
          "1041:   } else if (nb_slots[i] > 0) {",
          "1042:    slot_end[i + 1] = last_end + (1.0f * nb_slots[i]);",
          "1043:   } else if (nb_slots[i] < 0) {",
          "1044:    slot_end[i + 1] = last_end + (((100.0f - slots_discrete) * nb_slots[i]) / slots_analog);",
          "1045:   }",
          "1046:   last_end = slot_end[i + 1];",
          "1047:  }",
          "1050:  if (slots_analog == 0.0f) {",
          "1051:   for (i = 0; i<OP_MAX; i++) {",
          "1052:    slot_end[i + 1] *= 100.0f / slots_discrete;",
          "1053:   }",
          "1054:  }",
          "1055: }",
          "1058: void UpdateProgress(int op, float percent)",
          "1059: {",
          "1060:  int pos;",
          "1061:  static uint64_t LastRefresh = 0;",
          "1063:  if ((op < 0) || (op >= OP_MAX)) {",
          "1064:   duprintf(\"UpdateProgress: invalid op %d\\n\", op);",
          "1065:   return;",
          "1066:  }",
          "1067:  if (percent > 100.1f) {",
          "1069:   return;",
          "1070:  }",
          "1071:  if ((percent < 0.0f) && (nb_slots[op] <= 0)) {",
          "1072:   duprintf(\"UpdateProgress(%d): error negative percentage sent for negative slot value\\n\", op);",
          "1073:   return;",
          "1074:  }",
          "1075:  if (nb_slots[op] == 0)",
          "1076:   return;",
          "1077:  if (previous_end < slot_end[op]) {",
          "1078:   previous_end = slot_end[op];",
          "1079:  }",
          "1081:  if (percent < 0.0f) {",
          "1083:   previous_end += (slot_end[op + 1] - slot_end[op]) / (1.0f * nb_slots[op]);",
          "1084:   pos = (int)(previous_end / 100.0f * MAX_PROGRESS);",
          "1085:  } else {",
          "1086:   pos = (int)((previous_end + ((slot_end[op + 1] - previous_end) * (percent / 100.0f))) / 100.0f * MAX_PROGRESS);",
          "1087:  }",
          "1088:  if (pos > MAX_PROGRESS) {",
          "1089:   duprintf(\"UpdateProgress(%d): rounding error - pos %d is greater than %d\\n\", op, pos, MAX_PROGRESS);",
          "1090:   pos = MAX_PROGRESS;",
          "1091:  }",
          "1094:  if (GetTickCount64() > LastRefresh + (2 * MAX_REFRESH)) {",
          "1095:   LastRefresh = GetTickCount64();",
          "1096:   SendMessage(hProgress, PBM_SETPOS, (WPARAM)pos, 0);",
          "1097:   SetTaskbarProgressValue(pos, MAX_PROGRESS);",
          "1098:  }",
          "1099: }",
          "1101: void ShowLanguageMenu(RECT rcExclude)",
          "1102: {",
          "1103:  TPMPARAMS tpm;",
          "1104:  HMENU menu;",
          "1105:  loc_cmd* lcmd = NULL;",
          "1106:  char lang[256];",
          "1107:  char *search = \"()\";",
          "1108:  char *l, *r, *str;",
          "1110:  UM_LANGUAGE_MENU_MAX = UM_LANGUAGE_MENU;",
          "1111:  menu = CreatePopupMenu();",
          "1112:  list_for_each_entry(lcmd, &locale_list, loc_cmd, list) {",
          "1114:   if ((right_to_left_mode) && (!(lcmd->ctrl_id & LOC_RIGHT_TO_LEFT))) {",
          "1115:    str = safe_strdup(lcmd->txt[1]);",
          "1116:    l = strtok(str, search);",
          "1117:    r = strtok(NULL, search);",
          "1118:    static_sprintf(lang, LEFT_TO_RIGHT_EMBEDDING \"(%s) \" POP_DIRECTIONAL_FORMATTING \"%s\", r, l);",
          "1119:    safe_free(str);",
          "1120:   } else {",
          "1121:    static_strcpy(lang, lcmd->txt[1]);",
          "1122:   }",
          "1123:   InsertMenuU(menu, -1, MF_BYPOSITION | ((selected_locale == lcmd) ? MF_CHECKED : 0), UM_LANGUAGE_MENU_MAX++, lang);",
          "1124:  }",
          "1127:  tpm.cbSize = sizeof(TPMPARAMS);",
          "1128:  tpm.rcExclude = rcExclude;",
          "1129:  TrackPopupMenuEx(menu, 0,",
          "1131:   right_to_left_mode ? rcExclude.right : rcExclude.left,",
          "1132:   rcExclude.bottom, hMainDialog, &tpm);",
          "1134:  DestroyMenu(menu);",
          "1135: }",
          "1137: void SetPassesTooltip(void)",
          "1138: {",
          "1139:  const unsigned int pattern[BADLOCKS_PATTERN_TYPES][BADBLOCK_PATTERN_COUNT] =",
          "1140:  { BADBLOCK_PATTERN_SLC, BADCLOCK_PATTERN_MLC, BADBLOCK_PATTERN_TLC };",
          "1141:  int sel = ComboBox_GetCurSel(hNBPasses);",
          "1142:  int type = (sel < 2) ? 0 : sel - 2;",
          "1143:  CreateTooltip(hNBPasses, lmprintf(MSG_153 + ((sel >= 2) ? 3 : sel),",
          "1144:   pattern[type][0], pattern[type][1], pattern[type][2], pattern[type][3]), -1);",
          "1145: }",
          "1147: void SetBootTypeDropdownWidth(void)",
          "1148: {",
          "1149:  HDC hDC;",
          "1150:  HFONT hFont;",
          "1151:  SIZE sz;",
          "1152:  RECT rc;",
          "1154:  if (image_path == NULL)",
          "1155:   return;",
          "1157:  GetWindowRect(hBootType, &rc);",
          "1158:  MapWindowPoints(NULL, hMainDialog, (POINT*)&rc, 2);",
          "1159:  hDC = GetDC(hBootType);",
          "1160:  hFont = (HFONT)SendMessageA(hBootType, WM_GETFONT, 0, 0);",
          "1161:  SelectObject(hDC, hFont);",
          "1162:  GetTextExtentPointU(hDC, short_image_path, &sz);",
          "1163:  safe_release_dc(hBootType, hDC);",
          "1164:  SendMessage(hBootType, CB_SETDROPPEDWIDTH, (WPARAM)max(sz.cx + 10, rc.right - rc.left), (LPARAM)0);",
          "1165: }",
          "1168: void OnPaint(HDC hdc)",
          "1169: {",
          "1170:  int i;",
          "1171:  HPEN hp = CreatePen(0, (fScale < 1.5f) ? 2 : 3, RGB(0, 0, 0));",
          "1172:  SelectObject(hdc, hp);",
          "1173:  for (i = 0; i < ARRAYSIZE(section_vpos); i++) {",
          "1174:   MoveToEx(hdc, mw + 10, section_vpos[i], NULL);",
          "1175:   LineTo(hdc, mw + fw, section_vpos[i]);",
          "1176:  }",
          "1177: }",
          "",
          "---------------"
        ],
        "src/ui.h||src/ui.h": [
          "File: src/ui.h -> src/ui.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #include <windows.h>",
          "21: #include \"resource.h\"",
          "23: #pragma once",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #include <stdint.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:              TBSTYLE_AUTOSIZE | TBSTYLE_LIST    | \\",
          "43:              TBSTYLE_TOOLTIPS )",
          "",
          "[Removed Lines]",
          "45: static int section_control_ids[] = {",
          "46:  IDS_DRIVE_PROPERTIES_TXT,",
          "47:  IDS_FORMAT_OPTIONS_TXT,",
          "48:  IDS_STATUS_TXT",
          "49: };",
          "51: static int section_vpos[ARRAYSIZE(section_control_ids)];",
          "53: static int image_option_move_ids[] = {",
          "54:  IDS_PARTITION_TYPE_TXT,",
          "55:  IDC_PARTITION_TYPE,",
          "56:  IDS_TARGET_SYSTEM_TXT,",
          "57:  IDC_TARGET_SYSTEM,",
          "58:  IDS_CSM_HELP_TXT,",
          "59:  IDC_ADVANCED_DEVICE_TOOLBAR,",
          "60:  IDC_LIST_USB_HDD,",
          "61:  IDC_OLD_BIOS_FIXES,",
          "62:  IDC_RUFUS_MBR,",
          "63:  IDC_DISK_ID,",
          "64:  IDS_FORMAT_OPTIONS_TXT,",
          "65:  IDS_LABEL_TXT,",
          "66:  IDC_LABEL,",
          "67:  IDS_FILE_SYSTEM_TXT,",
          "68:  IDC_FILE_SYSTEM,",
          "69:  IDS_CLUSTER_SIZE_TXT,",
          "70:  IDC_CLUSTER_SIZE,",
          "71:  IDC_ADVANCED_FORMAT_TOOLBAR,",
          "72:  IDC_QUICK_FORMAT,",
          "73:  IDC_BAD_BLOCKS,",
          "74:  IDC_NB_PASSES,",
          "75:  IDC_EXTENDED_LABEL,",
          "76:  IDS_STATUS_TXT,",
          "77:  IDC_PROGRESS,",
          "78:  IDC_ABOUT,",
          "79:  IDC_LOG,",
          "80:  IDC_MULTI_TOOLBAR,",
          "81:  IDC_TEST,",
          "82:  IDC_START,",
          "83:  IDCANCEL,",
          "84:  IDC_STATUS,",
          "85:  IDC_STATUS_TOOLBAR,",
          "86: };",
          "88: static int image_option_toggle_ids[][2] = {",
          "89:  { IDS_IMAGE_OPTION_TXT, 0x03 },",
          "90:  { IDC_IMAGE_OPTION, 0x01 },",
          "91:  { IDC_PERSISTENCE_SLIDER, 0x02 },",
          "92:  { IDC_PERSISTENCE_SIZE, 0x02 },",
          "93:  { IDC_PERSISTENCE_UNITS, 0x02 }",
          "94: };",
          "96: static int advanced_device_move_ids[] = {",
          "97:  IDC_LIST_USB_HDD,",
          "98:  IDC_OLD_BIOS_FIXES,",
          "99:  IDC_RUFUS_MBR,",
          "100:  IDS_FORMAT_OPTIONS_TXT,",
          "101:  IDS_LABEL_TXT,",
          "102:  IDC_LABEL,",
          "103:  IDS_FILE_SYSTEM_TXT,",
          "104:  IDC_FILE_SYSTEM,",
          "105:  IDS_CLUSTER_SIZE_TXT,",
          "106:  IDC_CLUSTER_SIZE,",
          "107:  IDC_ADVANCED_FORMAT_TOOLBAR,",
          "108:  IDC_QUICK_FORMAT,",
          "109:  IDC_BAD_BLOCKS,",
          "110:  IDC_NB_PASSES,",
          "111:  IDC_EXTENDED_LABEL,",
          "112:  IDS_STATUS_TXT,",
          "113:  IDC_PROGRESS,",
          "114:  IDC_ABOUT,",
          "115:  IDC_LOG,",
          "116:  IDC_MULTI_TOOLBAR,",
          "117:  IDC_TEST,",
          "118:  IDC_START,",
          "119:  IDCANCEL,",
          "120:  IDC_STATUS,",
          "121:  IDC_STATUS_TOOLBAR,",
          "122: };",
          "124: static int advanced_device_toggle_ids[] = {",
          "125:  IDC_SAVE_TOOLBAR,",
          "126:  IDC_LIST_USB_HDD,",
          "127:  IDC_OLD_BIOS_FIXES,",
          "128:  IDC_RUFUS_MBR,",
          "129:  IDC_DISK_ID,",
          "130: };",
          "132: static int advanced_format_move_ids[] = {",
          "133:  IDS_STATUS_TXT,",
          "134:  IDC_PROGRESS,",
          "135:  IDC_ABOUT,",
          "136:  IDC_LOG,",
          "137:  IDC_MULTI_TOOLBAR,",
          "138:  IDC_TEST,",
          "139:  IDC_START,",
          "140:  IDCANCEL,",
          "141:  IDC_STATUS,",
          "142:  IDC_STATUS_TOOLBAR,",
          "143: };",
          "145: static int advanced_format_toggle_ids[] = {",
          "146:  IDC_QUICK_FORMAT,",
          "147:  IDC_BAD_BLOCKS,",
          "148:  IDC_NB_PASSES,",
          "149:  IDC_EXTENDED_LABEL,",
          "150: };",
          "152: static int main_button_ids[] = {",
          "153:  IDC_SELECT,",
          "154:  IDC_START,",
          "155:  IDCANCEL,",
          "156: };",
          "158: static int full_width_controls[] = {",
          "159:  IDS_DEVICE_TXT,",
          "160:  IDS_BOOT_SELECTION_TXT,",
          "161:  IDS_IMAGE_OPTION_TXT,",
          "162:  IDC_IMAGE_OPTION,",
          "163:  IDS_LABEL_TXT,",
          "164:  IDC_LABEL,",
          "165:  IDC_ADVANCED_DRIVE_PROPERTIES,",
          "166:  IDC_LIST_USB_HDD,",
          "167:  IDC_OLD_BIOS_FIXES,",
          "168:  IDC_ADVANCED_FORMAT_OPTIONS,",
          "169:  IDC_QUICK_FORMAT,",
          "170:  IDC_EXTENDED_LABEL,",
          "171:  IDC_PROGRESS,",
          "172: };",
          "174: static int full_width_checkboxes[] = {",
          "175:  IDC_LIST_USB_HDD,",
          "176:  IDC_OLD_BIOS_FIXES,",
          "177:  IDC_QUICK_FORMAT,",
          "178:  IDC_EXTENDED_LABEL,",
          "179: };",
          "181: static int half_width_ids[] = {",
          "182:  IDC_BAD_BLOCKS,",
          "183:  IDC_RUFUS_MBR,",
          "184:  IDS_PARTITION_TYPE_TXT,",
          "185:  IDC_PARTITION_TYPE,",
          "186:  IDC_FILE_SYSTEM,",
          "187:  IDS_TARGET_SYSTEM_TXT,",
          "188:  IDC_TARGET_SYSTEM,",
          "189:  IDC_DISK_ID,",
          "190:  IDS_CLUSTER_SIZE_TXT,",
          "191:  IDC_CLUSTER_SIZE,",
          "192:  IDC_NB_PASSES,",
          "193: };",
          "195: static int adjust_dpi_ids[][5] = {",
          "196:  {IDS_DEVICE_TXT, IDC_DEVICE, IDC_SAVE_TOOLBAR, 0, 0},",
          "197:  {IDS_BOOT_SELECTION_TXT, IDC_BOOT_SELECTION, IDC_HASH_TOOLBAR, IDC_SELECT, 0},",
          "198:  {IDS_IMAGE_OPTION_TXT, IDC_IMAGE_OPTION, IDC_PERSISTENCE_SLIDER, IDC_PERSISTENCE_SIZE, IDC_PERSISTENCE_UNITS},",
          "199:  {IDS_PARTITION_TYPE_TXT, IDC_PARTITION_TYPE, IDS_TARGET_SYSTEM_TXT, IDC_TARGET_SYSTEM, IDS_CSM_HELP_TXT},",
          "200:  {IDC_ADVANCED_DEVICE_TOOLBAR, 0, 0, 0, 0},",
          "201:  {IDC_LIST_USB_HDD, 0, 0, 0, 0 },",
          "202:  {IDC_OLD_BIOS_FIXES, 0, 0, 0, 0},",
          "203:  {IDC_RUFUS_MBR, IDC_DISK_ID, 0, 0, 0},",
          "204:  {IDS_FORMAT_OPTIONS_TXT, 0, 0, 0, 0},",
          "205:  {IDS_LABEL_TXT, IDC_LABEL, 0, 0, 0},",
          "206:  {IDS_FILE_SYSTEM_TXT, IDC_FILE_SYSTEM, IDS_CLUSTER_SIZE_TXT, IDC_CLUSTER_SIZE, 0},",
          "207:  {IDC_ADVANCED_FORMAT_TOOLBAR, 0, 0, 0, 0},",
          "208:  {IDC_QUICK_FORMAT, 0, 0, 0, 0},",
          "209:  {IDC_EXTENDED_LABEL, 0, 0, 0, 0},",
          "210:  {IDC_BAD_BLOCKS, IDC_NB_PASSES, 0, 0, 0},",
          "211:  {IDS_STATUS_TXT, 0, 0, 0, 0},",
          "212:  {IDC_PROGRESS, 0, 0, 0, 0 },",
          "213:  {IDC_MULTI_TOOLBAR, IDC_TEST, IDC_START, IDCANCEL, 0}",
          "214: };",
          "216: static int multitoolbar_icons[] = {",
          "217:  IDI_LANG_16,",
          "218:  IDI_INFO_16,",
          "219:  IDI_SETTINGS_16,",
          "220:  IDI_LOG_16",
          "221: };",
          "",
          "[Added Lines]",
          "46: extern HWND hMultiToolbar, hSaveToolbar, hHashToolbar, hAdvancedDeviceToolbar, hAdvancedFormatToolbar;",
          "47: extern HFONT hInfoFont;",
          "48: extern UINT_PTR UM_LANGUAGE_MENU_MAX;",
          "49: extern BOOL advanced_mode_device, advanced_mode_format, force_large_fat32;",
          "50: extern loc_cmd* selected_locale;",
          "51: extern const char *sfd_name, *flash_type[BADLOCKS_PATTERN_TYPES];",
          "52: extern char *short_image_path;",
          "53: extern int advanced_device_section_height, advanced_format_section_height, windows_to_go_selection;",
          "54: extern int selection_default, cbw, ddw, ddbh, bh;",
          "56: extern void SetComboEntry(HWND hDlg, int data);",
          "57: extern void GetBasicControlsWidth(HWND hDlg);",
          "58: extern void GetMainButtonsWidth(HWND hDlg);",
          "59: extern void GetHalfDropwdownWidth(HWND hDlg);",
          "60: extern void GetFullWidth(HWND hDlg);",
          "61: extern void PositionMainControls(HWND hDlg);",
          "62: extern void AdjustForLowDPI(HWND hDlg);",
          "63: extern void SetSectionHeaders(HWND hDlg);",
          "64: extern void ToggleAdvancedDeviceOptions(BOOL enable);",
          "65: extern void ToggleAdvancedFormatOptions(BOOL enable);",
          "66: extern void ToggleImageOption(uint8_t mask);",
          "67: extern void CreateSmallButtons(HWND hDlg);",
          "68: extern void CreateAdditionalControls(HWND hDlg);",
          "69: extern void InitProgress(BOOL bOnlyFormat);",
          "70: extern void ShowLanguageMenu(RECT rcExclude);",
          "71: extern void SetPassesTooltip(void);",
          "72: extern void SetBootTypeDropdownWidth(void);",
          "73: extern void OnPaint(HDC hdc);",
          "",
          "---------------"
        ],
        "src/ui_data.h||src/ui_data.h": [
          "File: src/ui_data.h -> src/ui_data.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: #include <windows.h>",
          "21: #include \"resource.h\"",
          "23: #pragma once",
          "25: static int section_control_ids[] = {",
          "26:  IDS_DRIVE_PROPERTIES_TXT,",
          "27:  IDS_FORMAT_OPTIONS_TXT,",
          "28:  IDS_STATUS_TXT",
          "29: };",
          "31: static int section_vpos[ARRAYSIZE(section_control_ids)];",
          "33: static int image_option_move_ids[] = {",
          "34:  IDS_PARTITION_TYPE_TXT,",
          "35:  IDC_PARTITION_TYPE,",
          "36:  IDS_TARGET_SYSTEM_TXT,",
          "37:  IDC_TARGET_SYSTEM,",
          "38:  IDS_CSM_HELP_TXT,",
          "39:  IDC_ADVANCED_DEVICE_TOOLBAR,",
          "40:  IDC_LIST_USB_HDD,",
          "41:  IDC_OLD_BIOS_FIXES,",
          "42:  IDC_RUFUS_MBR,",
          "43:  IDC_DISK_ID,",
          "44:  IDS_FORMAT_OPTIONS_TXT,",
          "45:  IDS_LABEL_TXT,",
          "46:  IDC_LABEL,",
          "47:  IDS_FILE_SYSTEM_TXT,",
          "48:  IDC_FILE_SYSTEM,",
          "49:  IDS_CLUSTER_SIZE_TXT,",
          "50:  IDC_CLUSTER_SIZE,",
          "51:  IDC_ADVANCED_FORMAT_TOOLBAR,",
          "52:  IDC_QUICK_FORMAT,",
          "53:  IDC_BAD_BLOCKS,",
          "54:  IDC_NB_PASSES,",
          "55:  IDC_EXTENDED_LABEL,",
          "56:  IDS_STATUS_TXT,",
          "57:  IDC_PROGRESS,",
          "58:  IDC_ABOUT,",
          "59:  IDC_LOG,",
          "60:  IDC_MULTI_TOOLBAR,",
          "61:  IDC_TEST,",
          "62:  IDC_START,",
          "63:  IDCANCEL,",
          "64:  IDC_STATUS,",
          "65:  IDC_STATUS_TOOLBAR,",
          "66: };",
          "68: static int image_option_toggle_ids[][2] = {",
          "69:  { IDS_IMAGE_OPTION_TXT, 0x03 },",
          "70:  { IDC_IMAGE_OPTION, 0x01 },",
          "71:  { IDC_PERSISTENCE_SLIDER, 0x02 },",
          "72:  { IDC_PERSISTENCE_SIZE, 0x02 },",
          "73:  { IDC_PERSISTENCE_UNITS, 0x02 }",
          "74: };",
          "76: static int advanced_device_move_ids[] = {",
          "77:  IDC_LIST_USB_HDD,",
          "78:  IDC_OLD_BIOS_FIXES,",
          "79:  IDC_RUFUS_MBR,",
          "80:  IDS_FORMAT_OPTIONS_TXT,",
          "81:  IDS_LABEL_TXT,",
          "82:  IDC_LABEL,",
          "83:  IDS_FILE_SYSTEM_TXT,",
          "84:  IDC_FILE_SYSTEM,",
          "85:  IDS_CLUSTER_SIZE_TXT,",
          "86:  IDC_CLUSTER_SIZE,",
          "87:  IDC_ADVANCED_FORMAT_TOOLBAR,",
          "88:  IDC_QUICK_FORMAT,",
          "89:  IDC_BAD_BLOCKS,",
          "90:  IDC_NB_PASSES,",
          "91:  IDC_EXTENDED_LABEL,",
          "92:  IDS_STATUS_TXT,",
          "93:  IDC_PROGRESS,",
          "94:  IDC_ABOUT,",
          "95:  IDC_LOG,",
          "96:  IDC_MULTI_TOOLBAR,",
          "97:  IDC_TEST,",
          "98:  IDC_START,",
          "99:  IDCANCEL,",
          "100:  IDC_STATUS,",
          "101:  IDC_STATUS_TOOLBAR,",
          "102: };",
          "104: static int advanced_device_toggle_ids[] = {",
          "105:  IDC_SAVE_TOOLBAR,",
          "106:  IDC_LIST_USB_HDD,",
          "107:  IDC_OLD_BIOS_FIXES,",
          "108:  IDC_RUFUS_MBR,",
          "109:  IDC_DISK_ID,",
          "110: };",
          "112: static int advanced_format_move_ids[] = {",
          "113:  IDS_STATUS_TXT,",
          "114:  IDC_PROGRESS,",
          "115:  IDC_ABOUT,",
          "116:  IDC_LOG,",
          "117:  IDC_MULTI_TOOLBAR,",
          "118:  IDC_TEST,",
          "119:  IDC_START,",
          "120:  IDCANCEL,",
          "121:  IDC_STATUS,",
          "122:  IDC_STATUS_TOOLBAR,",
          "123: };",
          "125: static int advanced_format_toggle_ids[] = {",
          "126:  IDC_QUICK_FORMAT,",
          "127:  IDC_BAD_BLOCKS,",
          "128:  IDC_NB_PASSES,",
          "129:  IDC_EXTENDED_LABEL,",
          "130: };",
          "132: static int main_button_ids[] = {",
          "133:  IDC_SELECT,",
          "134:  IDC_START,",
          "135:  IDCANCEL,",
          "136: };",
          "138: static int full_width_controls[] = {",
          "139:  IDS_DEVICE_TXT,",
          "140:  IDS_BOOT_SELECTION_TXT,",
          "141:  IDS_IMAGE_OPTION_TXT,",
          "142:  IDC_IMAGE_OPTION,",
          "143:  IDS_LABEL_TXT,",
          "144:  IDC_LABEL,",
          "145:  IDC_ADVANCED_DRIVE_PROPERTIES,",
          "146:  IDC_LIST_USB_HDD,",
          "147:  IDC_OLD_BIOS_FIXES,",
          "148:  IDC_ADVANCED_FORMAT_OPTIONS,",
          "149:  IDC_QUICK_FORMAT,",
          "150:  IDC_EXTENDED_LABEL,",
          "151:  IDC_PROGRESS,",
          "152: };",
          "154: static int full_width_checkboxes[] = {",
          "155:  IDC_LIST_USB_HDD,",
          "156:  IDC_OLD_BIOS_FIXES,",
          "157:  IDC_QUICK_FORMAT,",
          "158:  IDC_EXTENDED_LABEL,",
          "159: };",
          "161: static int half_width_ids[] = {",
          "162:  IDC_BAD_BLOCKS,",
          "163:  IDC_RUFUS_MBR,",
          "164:  IDS_PARTITION_TYPE_TXT,",
          "165:  IDC_PARTITION_TYPE,",
          "166:  IDC_FILE_SYSTEM,",
          "167:  IDS_TARGET_SYSTEM_TXT,",
          "168:  IDC_TARGET_SYSTEM,",
          "169:  IDC_DISK_ID,",
          "170:  IDS_CLUSTER_SIZE_TXT,",
          "171:  IDC_CLUSTER_SIZE,",
          "172:  IDC_NB_PASSES,",
          "173: };",
          "175: static int adjust_dpi_ids[][5] = {",
          "176:  { IDS_DEVICE_TXT, IDC_DEVICE, IDC_SAVE_TOOLBAR, 0, 0 },",
          "177:  { IDS_BOOT_SELECTION_TXT, IDC_BOOT_SELECTION, IDC_HASH_TOOLBAR, IDC_SELECT, 0 },",
          "178:  { IDS_IMAGE_OPTION_TXT, IDC_IMAGE_OPTION, IDC_PERSISTENCE_SLIDER, IDC_PERSISTENCE_SIZE, IDC_PERSISTENCE_UNITS },",
          "179:  { IDS_PARTITION_TYPE_TXT, IDC_PARTITION_TYPE, IDS_TARGET_SYSTEM_TXT, IDC_TARGET_SYSTEM, IDS_CSM_HELP_TXT },",
          "180:  { IDC_ADVANCED_DEVICE_TOOLBAR, 0, 0, 0, 0 },",
          "181:  { IDC_LIST_USB_HDD, 0, 0, 0, 0 },",
          "182:  { IDC_OLD_BIOS_FIXES, 0, 0, 0, 0 },",
          "183:  { IDC_RUFUS_MBR, IDC_DISK_ID, 0, 0, 0 },",
          "184:  { IDS_FORMAT_OPTIONS_TXT, 0, 0, 0, 0 },",
          "185:  { IDS_LABEL_TXT, IDC_LABEL, 0, 0, 0 },",
          "186:  { IDS_FILE_SYSTEM_TXT, IDC_FILE_SYSTEM, IDS_CLUSTER_SIZE_TXT, IDC_CLUSTER_SIZE, 0 },",
          "187:  { IDC_ADVANCED_FORMAT_TOOLBAR, 0, 0, 0, 0 },",
          "188:  { IDC_QUICK_FORMAT, 0, 0, 0, 0 },",
          "189:  { IDC_EXTENDED_LABEL, 0, 0, 0, 0 },",
          "190:  { IDC_BAD_BLOCKS, IDC_NB_PASSES, 0, 0, 0 },",
          "191:  { IDS_STATUS_TXT, 0, 0, 0, 0 },",
          "192:  { IDC_PROGRESS, 0, 0, 0, 0 },",
          "193:  { IDC_MULTI_TOOLBAR, IDC_TEST, IDC_START, IDCANCEL, 0 }",
          "194: };",
          "196: static int multitoolbar_icons[] = {",
          "197:  IDI_LANG_16,",
          "198:  IDI_INFO_16,",
          "199:  IDI_SETTINGS_16,",
          "200:  IDI_LOG_16",
          "201: };",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5b544c6a4a26c34ab372776d26cbb1300f46882a",
      "candidate_info": {
        "commit_hash": "5b544c6a4a26c34ab372776d26cbb1300f46882a",
        "repo": "pbatard/rufus",
        "commit_url": "https://github.com/pbatard/rufus/commit/5b544c6a4a26c34ab372776d26cbb1300f46882a",
        "files": [
          "src/localization_data.sh",
          "src/rufus.c",
          "src/rufus.rc",
          "src/stdlg.c"
        ],
        "message": "[misc] update copyright year",
        "before_after_code_files": [
          "src/localization_data.sh||src/localization_data.sh",
          "src/rufus.c||src/rufus.c",
          "src/rufus.rc||src/rufus.rc",
          "src/stdlg.c||src/stdlg.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/rufus.rc||src/rufus.rc",
            "src/stdlg.c||src/stdlg.c"
          ],
          "candidate": [
            "src/rufus.rc||src/rufus.rc",
            "src/stdlg.c||src/stdlg.c"
          ]
        }
      },
      "candidate_diff": {
        "src/localization_data.sh||src/localization_data.sh": [
          "File: src/localization_data.sh -> src/localization_data.sh"
        ],
        "src/rufus.c||src/rufus.c": [
          "File: src/rufus.c -> src/rufus.c"
        ],
        "src/rufus.rc||src/rufus.rc": [
          "File: src/rufus.rc -> src/rufus.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: IDD_DIALOG DIALOGEX 12, 12, 242, 376",
          "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
          "35: EXSTYLE WS_EX_ACCEPTFILES",
          "37: FONT 8, \"Segoe UI Symbol\", 400, 0, 0x0",
          "38: BEGIN",
          "39:     LTEXT           \"Device\",IDS_DEVICE_TXT,9,6,200,8",
          "",
          "[Removed Lines]",
          "36: CAPTION \"Rufus 2.12.1012\"",
          "",
          "[Added Lines]",
          "36: CAPTION \"Rufus 2.12.1013\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "336: VS_VERSION_INFO VERSIONINFO",
          "339:  FILEFLAGSMASK 0x3fL",
          "340: #ifdef _DEBUG",
          "341:  FILEFLAGS 0x1L",
          "",
          "[Removed Lines]",
          "337:  FILEVERSION 2,12,1012,0",
          "338:  PRODUCTVERSION 2,12,1012,0",
          "",
          "[Added Lines]",
          "337:  FILEVERSION 2,12,1013,0",
          "338:  PRODUCTVERSION 2,12,1013,0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "352:         BEGIN",
          "353:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
          "354:             VALUE \"FileDescription\", \"Rufus\"",
          "356:             VALUE \"InternalName\", \"Rufus\"",
          "358:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
          "359:             VALUE \"OriginalFilename\", \"rufus.exe\"",
          "360:             VALUE \"ProductName\", \"Rufus\"",
          "362:         END",
          "363:     END",
          "364:     BLOCK \"VarFileInfo\"",
          "",
          "[Removed Lines]",
          "355:             VALUE \"FileVersion\", \"2.12.1012\"",
          "357:             VALUE \"LegalCopyright\", \"\ufffd 2011-2016 Pete Batard (GPL v3)\"",
          "361:             VALUE \"ProductVersion\", \"2.12.1012\"",
          "",
          "[Added Lines]",
          "355:             VALUE \"FileVersion\", \"2.12.1013\"",
          "357:             VALUE \"LegalCopyright\", \"\ufffd 2011-2017 Pete Batard (GPL v3)\"",
          "361:             VALUE \"ProductVersion\", \"2.12.1013\"",
          "",
          "---------------"
        ],
        "src/stdlg.c||src/stdlg.c": [
          "File: src/stdlg.c -> src/stdlg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "627:    ShowWindow(GetDlgItem(hDlg, IDC_ABOUT_UPDATES), SW_SHOW);",
          "628:   safe_sprintf(about_blurb, sizeof(about_blurb), about_blurb_format, lmprintf(MSG_174|MSG_RTF),",
          "629:    lmprintf(MSG_175|MSG_RTF, rufus_version[0], rufus_version[1], rufus_version[2]),",
          "631:    lmprintf(MSG_176|MSG_RTF), lmprintf(MSG_177|MSG_RTF), lmprintf(MSG_178|MSG_RTF));",
          "632:   for (i=0; i<ARRAYSIZE(hEdit); i++) {",
          "633:    hEdit[i] = GetDlgItem(hDlg, edit_id[i]);",
          "",
          "[Removed Lines]",
          "630:    right_to_left_mode?\"Akeo \\\\\\\\ Pete Batard 2011-2016 \u00a9 Copyright\":\"Copyright \u00a9 2011-2016 Pete Batard / Akeo\",",
          "",
          "[Added Lines]",
          "628:    right_to_left_mode?\"Akeo \\\\\\\\ Pete Batard 2011-2017 \u00a9 Copyright\":\"Copyright \u00a9 2011-2017 Pete Batard / Akeo\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ca9cdaf14b36afaf773e78c72e74a74ee6faf611",
      "candidate_info": {
        "commit_hash": "ca9cdaf14b36afaf773e78c72e74a74ee6faf611",
        "repo": "pbatard/rufus",
        "commit_url": "https://github.com/pbatard/rufus/commit/ca9cdaf14b36afaf773e78c72e74a74ee6faf611",
        "files": [
          "res/localization/rufus.loc",
          "src/rufus.rc"
        ],
        "message": "[loc] update Portuguese (Standard) translation to latest",
        "before_after_code_files": [
          "res/localization/rufus.loc||res/localization/rufus.loc",
          "src/rufus.rc||src/rufus.rc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "res/localization/rufus.loc||res/localization/rufus.loc",
            "src/rufus.rc||src/rufus.rc"
          ],
          "candidate": [
            "res/localization/rufus.loc||res/localization/rufus.loc",
            "src/rufus.rc||src/rufus.rc"
          ]
        }
      },
      "candidate_diff": {
        "res/localization/rufus.loc||res/localization/rufus.loc": [
          "File: res/localization/rufus.loc -> res/localization/rufus.loc",
          "--- Hunk 1 ---",
          "[Context before]",
          "12683: ################################################################################",
          "12684: l \"pt-PT\" \"Portuguese Standard (Portugu\u00eas)\" 0x0816",
          "12686: b \"en-US\"",
          "12688: # Main dialog",
          "",
          "[Removed Lines]",
          "12685: v 1.0.21",
          "",
          "[Added Lines]",
          "12685: v 1.0.22",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13148: t MSG_292 \"Selecione a vers\u00e3o do Windows que deseja instalar:\"",
          "13149: t MSG_293 \"Vers\u00e3o de Windows n\u00e3o suportada\"",
          "13150: t MSG_294 \"Esta vers\u00e3o do Windows j\u00e1 n\u00e3o \u00e9 suportada por Rufus.\"",
          "13152: ################################################################################",
          "13153: l \"ro-RO\" \"Romanian (Rom\u00e2n\u0103)\" 0x0418, 0x0818",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13151: t MSG_295 \"Aviso: vers\u00e3o n\u00e3o oficial\"",
          "13152: t MSG_296 \"Esta vers\u00e3o de Rufus N\u00c3O foi desenvolvida pelo autor oficial.\\n\\nTem a certeza que pretende executar?\"",
          "13153: t MSG_297 \"Detetado ISO truncado\"",
          "13154: t MSG_298 \"O ficheiro ISO que selecionou n\u00e3o corresponde ao tamanho declarado: faltam %s de dados!\\n\\nSe obteve este ficheiro \"",
          "13155:  \"da Internet, deve tentar baixar uma nova c\u00f3pia e verificar se os checksums MD5 ou SHA correspondem aos oficiais.\\n\\n\"",
          "13156:  \"Saiba no Rufus que pode calcular o MD5 ou SHA clicando no bot\u00e3o '#'.\"",
          "",
          "---------------"
        ],
        "src/rufus.rc||src/rufus.rc": [
          "File: src/rufus.rc -> src/rufus.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: IDD_DIALOG DIALOGEX 12, 12, 242, 376",
          "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
          "35: EXSTYLE WS_EX_ACCEPTFILES",
          "37: FONT 8, \"Segoe UI Symbol\", 400, 0, 0x0",
          "38: BEGIN",
          "39:     LTEXT           \"Device\",IDS_DEVICE_TXT,9,6,200,8",
          "",
          "[Removed Lines]",
          "36: CAPTION \"Rufus 2.16.1130\"",
          "",
          "[Added Lines]",
          "36: CAPTION \"Rufus 2.16.1131\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "368: VS_VERSION_INFO VERSIONINFO",
          "371:  FILEFLAGSMASK 0x3fL",
          "372: #ifdef _DEBUG",
          "373:  FILEFLAGS 0x1L",
          "",
          "[Removed Lines]",
          "369:  FILEVERSION 2,16,1130,0",
          "370:  PRODUCTVERSION 2,16,1130,0",
          "",
          "[Added Lines]",
          "369:  FILEVERSION 2,16,1131,0",
          "370:  PRODUCTVERSION 2,16,1131,0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "384:         BEGIN",
          "385:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
          "386:             VALUE \"FileDescription\", \"Rufus\"",
          "388:             VALUE \"InternalName\", \"Rufus\"",
          "389:             VALUE \"LegalCopyright\", \"\ufffd 2011-2017 Pete Batard (GPL v3)\"",
          "390:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
          "391:             VALUE \"OriginalFilename\", \"rufus.exe\"",
          "392:             VALUE \"ProductName\", \"Rufus\"",
          "394:         END",
          "395:     END",
          "396:     BLOCK \"VarFileInfo\"",
          "",
          "[Removed Lines]",
          "387:             VALUE \"FileVersion\", \"2.16.1130\"",
          "393:             VALUE \"ProductVersion\", \"2.16.1130\"",
          "",
          "[Added Lines]",
          "387:             VALUE \"FileVersion\", \"2.16.1131\"",
          "393:             VALUE \"ProductVersion\", \"2.16.1131\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2b3f1be78cbc4806bcfa4797c040a06a9a4dc4c1",
      "candidate_info": {
        "commit_hash": "2b3f1be78cbc4806bcfa4797c040a06a9a4dc4c1",
        "repo": "pbatard/rufus",
        "commit_url": "https://github.com/pbatard/rufus/commit/2b3f1be78cbc4806bcfa4797c040a06a9a4dc4c1",
        "files": [
          "res/localization/rufus.loc",
          "src/rufus.rc"
        ],
        "message": "[loc] update Ukrainian translation to latest",
        "before_after_code_files": [
          "res/localization/rufus.loc||res/localization/rufus.loc",
          "src/rufus.rc||src/rufus.rc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "res/localization/rufus.loc||res/localization/rufus.loc",
            "src/rufus.rc||src/rufus.rc"
          ],
          "candidate": [
            "res/localization/rufus.loc||res/localization/rufus.loc",
            "src/rufus.rc||src/rufus.rc"
          ]
        }
      },
      "candidate_diff": {
        "res/localization/rufus.loc||res/localization/rufus.loc": [
          "File: res/localization/rufus.loc -> res/localization/rufus.loc",
          "--- Hunk 1 ---",
          "[Context before]",
          "17422: ################################################################################",
          "17423: l \"uk-UA\" \"Ukrainian (\u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430)\" 0x0422",
          "17425: b \"en-US\"",
          "17427: # Main dialog",
          "",
          "[Removed Lines]",
          "17424: v 1.0.21",
          "",
          "[Added Lines]",
          "17424: v 1.0.22",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17882: t MSG_292 \"\u0411\u0443\u0434\u044c \u043b\u0430\u0441\u043a\u0430, \u0432\u0438\u0431\u0435\u0440\u0456\u0442\u044c \u0432\u0435\u0440\u0441\u0456\u044e Windows, \u044f\u043a\u0443 \u0432\u0438 \u0445\u043e\u0447\u0435\u0442\u0435 \u0432\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0438:\"",
          "17883: t MSG_293 \"\u041d\u0435\u043f\u0456\u0434\u0442\u0440\u0438\u043c\u0443\u0432\u0430\u043d\u0430 \u0432\u0435\u0440\u0441\u0456\u044f Windows\"",
          "17884: t MSG_294 \"\u0426\u044f \u0432\u0435\u0440\u0441\u0456\u044f Windows \u0431\u0456\u043b\u044c\u0448\u0435 \u043d\u0435 \u043f\u0456\u0434\u0442\u0440\u0438\u043c\u0443\u0454\u0442\u044c\u0441\u044f Rufus.\"",
          "17886: ################################################################################",
          "17887: l \"vi-VN\" \"Vietnamese (Ti\u1ebfng Vi\u1ec7t)\" 0x042A",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17885: t MSG_295 \"\u0423\u0432\u0430\u0433\u0430: \u041d\u0435\u043e\u0444\u0456\u0446\u0456\u0439\u043d\u0430 \u0432\u0435\u0440\u0441\u0456\u044f\"",
          "17886: t MSG_296 \"\u0426\u044f \u0432\u0435\u0440\u0441\u0456\u044f Rufus \u041d\u0415 \u0431\u0443\u043b\u0430 \u043f\u0456\u0434\u0433\u043e\u0442\u043e\u0432\u0430\u043d\u0430 \u0457\u0457 \u043e\u0444\u0456\u0446\u0456\u0439\u043d\u0438\u043c \u0440\u043e\u0437\u0440\u043e\u0431\u043d\u0438\u043a\u043e\u043c.\\n\\n\u0412\u0438 \u0432\u043f\u0435\u0432\u043d\u0435\u043d\u0456, \u0449\u043e \u0445\u043e\u0447\u0435\u0442\u0435 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0438 \u0457\u0457?\"",
          "17887: t MSG_297 \"\u0412\u0438\u044f\u0432\u043b\u0435\u043d\u043e \u0443\u0441\u0456\u0447\u0435\u043d\u0438\u0439 ISO\"",
          "17888: t MSG_298 \"\u0420\u043e\u0437\u043c\u0456\u0440 \u043e\u0431\u0440\u0430\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 ISO \u043d\u0435 \u0441\u043f\u0456\u0432\u043f\u0430\u0434\u0430\u0454 \u0437 \u043e\u0433\u043e\u043b\u043e\u0448\u0435\u043d\u0438\u043c \u0440\u043e\u0437\u043c\u0456\u0440\u043e\u043c: %s \u0434\u0430\u043d\u0438\u0445 \u0432\u0456\u0434\u0441\u0443\u0442\u043d\u044c\u043e!\\n\\n\u042f\u043a\u0449\u043e \u0432\u0438 \u0437\u0430\u0432\u0430\u043d\u0442\u0430\u0436\u0438\u043b\u0438 \u0446\u0435\u0439 \u0444\u0430\u0439\u043b \u0437 \"",
          "17889:  \"\u0406\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0443, \u0432\u0430\u043c \u0441\u043b\u0456\u0434 \u0437\u0430\u0432\u0430\u043d\u0442\u0430\u0436\u0438\u0442\u0438 \u043d\u043e\u0432\u0443 \u043a\u043e\u043f\u0456\u044e \u0444\u0430\u0439\u043b\u0430 \u0430\u0431\u043e \u043f\u0435\u0440\u0435\u0432\u0456\u0440\u0438\u0442\u0438 \u0441\u043f\u0456\u0432\u043f\u0430\u0434\u0456\u043d\u043d\u044f \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u0438\u0445 \u0441\u0443\u043c MD5 \u0447\u0438 SHA \u0437 \u043e\u0444\u0456\u0446\u0456\u0439\u043d\u0438\u043c \u0444\u0430\u0439\u043b\u043e\u043c.\\n\\n\"",
          "17890:  \"\u041f\u0430\u043c'\u044f\u0442\u0430\u0439\u0442\u0435, \u0449\u043e \u0432\u0438 \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u0440\u0456\u0432\u043d\u044f\u0442\u0438 MD5 \u0447\u0438 SHA \u0432 Rufus, \u043d\u0430\u0442\u0438\u0441\u043d\u0443\u0432\u0448\u0438 \u043a\u043d\u043e\u043f\u043a\u0443 '#'.\"",
          "",
          "---------------"
        ],
        "src/rufus.rc||src/rufus.rc": [
          "File: src/rufus.rc -> src/rufus.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: IDD_DIALOG DIALOGEX 12, 12, 242, 376",
          "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
          "35: EXSTYLE WS_EX_ACCEPTFILES",
          "37: FONT 8, \"Segoe UI Symbol\", 400, 0, 0x0",
          "38: BEGIN",
          "39:     LTEXT           \"Device\",IDS_DEVICE_TXT,9,6,200,8",
          "",
          "[Removed Lines]",
          "36: CAPTION \"Rufus 2.16.1153\"",
          "",
          "[Added Lines]",
          "36: CAPTION \"Rufus 2.16.1154\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "368: VS_VERSION_INFO VERSIONINFO",
          "371:  FILEFLAGSMASK 0x3fL",
          "372: #ifdef _DEBUG",
          "373:  FILEFLAGS 0x1L",
          "",
          "[Removed Lines]",
          "369:  FILEVERSION 2,16,1153,0",
          "370:  PRODUCTVERSION 2,16,1153,0",
          "",
          "[Added Lines]",
          "369:  FILEVERSION 2,16,1154,0",
          "370:  PRODUCTVERSION 2,16,1154,0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "384:         BEGIN",
          "385:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
          "386:             VALUE \"FileDescription\", \"Rufus\"",
          "388:             VALUE \"InternalName\", \"Rufus\"",
          "389:             VALUE \"LegalCopyright\", \"\ufffd 2011-2017 Pete Batard (GPL v3)\"",
          "390:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
          "391:             VALUE \"OriginalFilename\", \"rufus.exe\"",
          "392:             VALUE \"ProductName\", \"Rufus\"",
          "394:         END",
          "395:     END",
          "396:     BLOCK \"VarFileInfo\"",
          "",
          "[Removed Lines]",
          "387:             VALUE \"FileVersion\", \"2.16.1153\"",
          "393:             VALUE \"ProductVersion\", \"2.16.1153\"",
          "",
          "[Added Lines]",
          "387:             VALUE \"FileVersion\", \"2.16.1154\"",
          "393:             VALUE \"ProductVersion\", \"2.16.1154\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aa4baab194ed87ff4e204edc61f7f9a15ea34dbc",
      "candidate_info": {
        "commit_hash": "aa4baab194ed87ff4e204edc61f7f9a15ea34dbc",
        "repo": "pbatard/rufus",
        "commit_url": "https://github.com/pbatard/rufus/commit/aa4baab194ed87ff4e204edc61f7f9a15ea34dbc",
        "files": [
          "ChangeLog.txt",
          "src/format.c",
          "src/ms-sys/file.c",
          "src/rufus.c",
          "src/rufus.h",
          "src/rufus.rc",
          "src/stdio.c"
        ],
        "message": "[core] add a workaround for >1TB HDDs that mistakenly report short writes\n\n* It appears that 1.5TB and 2TB HDDs, accessed trough some Seagate ow WD USB \u2194 SATA\n  controllers, can report that 0 bytes were written on WriteFile(), even though all\n  the data was effectively written. 1TB HDDs, accessed through the same controller,\n  do not report this issue. So add a workaround for that.\n* Also see #787",
        "before_after_code_files": [
          "src/format.c||src/format.c",
          "src/ms-sys/file.c||src/ms-sys/file.c",
          "src/rufus.c||src/rufus.c",
          "src/rufus.h||src/rufus.h",
          "src/rufus.rc||src/rufus.rc",
          "src/stdio.c||src/stdio.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/rufus.rc||src/rufus.rc"
          ],
          "candidate": [
            "src/rufus.rc||src/rufus.rc"
          ]
        }
      },
      "candidate_diff": {
        "src/format.c||src/format.c": [
          "File: src/format.c -> src/format.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1557:  tt = GETTARGETTYPE((int)ComboBox_GetItemData(hPartitionScheme, ComboBox_GetCurSel(hPartitionScheme)));",
          "1558:  use_large_fat32 = (fs == FS_FAT32) && ((SelectedDrive.DiskSize > LARGE_FAT32_SIZE) || (force_large_fat32));",
          "1559:  windows_to_go = (togo_mode) && HAS_TOGO(img_report) && (Button_GetCheck(GetDlgItem(hMainDialog, IDC_WINDOWS_TO_GO)) == BST_CHECKED);",
          "1561:  if ((windows_to_go) && (tt == TT_UEFI) && (pt == PARTITION_STYLE_GPT))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1560:  large_drive = (SelectedDrive.DiskSize > (1*TB));",
          "1561:  if (large_drive)",
          "1562:   uprintf(\"Notice: Large drive detected (may produce short writes)\");",
          "",
          "---------------"
        ],
        "src/ms-sys/file.c||src/ms-sys/file.c": [
          "File: src/ms-sys/file.c -> src/ms-sys/file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:       return -1;",
          "48:    }",
          "51:    {",
          "54:       uprintf(\"  StartSector: 0x%08\" PRIx64 \", nSectors: 0x%\" PRIx64 \", SectorSize: 0x%\" PRIx64 \"\\n\", StartSector, nSectors, SectorSize);",
          "56:    }",
          "58:    return (int64_t)Size;",
          "",
          "[Removed Lines]",
          "50:    if((!WriteFile(hDrive, pBuf, Size, &Size, NULL)) || (Size != nSectors*SectorSize))",
          "52:       uprintf(\"write_sectors: Write error %s\\n\", (GetLastError()!=ERROR_SUCCESS)?WindowsErrorString():\"\");",
          "53:       uprintf(\"  Wrote: %d, Expected: %\" PRIu64 \"\\n\",  Size, nSectors*SectorSize);",
          "55:       return Size;",
          "",
          "[Added Lines]",
          "50:    if(!WriteFile(hDrive, pBuf, Size, &Size, NULL))",
          "52:       uprintf(\"write_sectors: Write error %s\\n\", WindowsErrorString());",
          "54:       return -1;",
          "55:    }",
          "56:    if (Size != nSectors*SectorSize)",
          "57:    {",
          "59:       if (large_drive && Size == 0) {",
          "60:          uprintf(\"Warning: Possible short write\\n\");",
          "61:          return 0;",
          "62:       }",
          "63:       uprintf(\"write_sectors:write error\\n\");",
          "64:       uprintf(\"  Wrote: %d, Expected: %\" PRIu64 \"\\n\", Size, nSectors*SectorSize);",
          "65:       uprintf(\"  StartSector: 0x%08\" PRIx64 \", nSectors: 0x%\" PRIx64 \", SectorSize: 0x%\" PRIx64 \"\\n\", StartSector, nSectors, SectorSize);",
          "66:       return -1;",
          "",
          "---------------"
        ],
        "src/rufus.c||src/rufus.c": [
          "File: src/rufus.c -> src/rufus.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "109: BOOL iso_op_in_progress = FALSE, format_op_in_progress = FALSE, right_to_left_mode = FALSE;",
          "110: BOOL enable_HDDs = FALSE, force_update = FALSE, enable_ntfs_compression = FALSE, no_confirmation_on_cancel = FALSE, lock_drive = TRUE;",
          "111: BOOL advanced_mode, allow_dual_uefi_bios, detect_fakes, enable_vmdk, force_large_fat32, usb_debug, use_fake_units, preserve_timestamps;",
          "113: int dialog_showing = 0, lang_button_id = 0;",
          "114: uint16_t rufus_version[3], embedded_sl_version[2];",
          "115: char embedded_sl_version_str[2][12] = { \"?.??\", \"?.??\" };",
          "",
          "[Removed Lines]",
          "112: BOOL zero_drive = FALSE, list_non_usb_removable_drives = FALSE, disable_file_indexing;",
          "",
          "[Added Lines]",
          "112: BOOL zero_drive = FALSE, list_non_usb_removable_drives = FALSE, disable_file_indexing, large_drive = FALSE;",
          "",
          "---------------"
        ],
        "src/rufus.h||src/rufus.h": [
          "File: src/rufus.h -> src/rufus.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "372: extern unsigned long syslinux_ldlinux_len[2];",
          "373: extern const int nb_steps[FS_MAX];",
          "374: extern BOOL use_own_c32[NB_OLD_C32], detect_fakes, iso_op_in_progress, format_op_in_progress, right_to_left_mode;",
          "376: extern RUFUS_IMG_REPORT img_report;",
          "377: extern int64_t iso_blocking_status;",
          "378: extern uint16_t rufus_version[3], embedded_sl_version[2];",
          "",
          "[Removed Lines]",
          "375: extern BOOL allow_dual_uefi_bios, togo_mode;",
          "",
          "[Added Lines]",
          "375: extern BOOL allow_dual_uefi_bios, togo_mode, large_drive;",
          "",
          "---------------"
        ],
        "src/rufus.rc||src/rufus.rc": [
          "File: src/rufus.rc -> src/rufus.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: IDD_DIALOG DIALOGEX 12, 12, 242, 376",
          "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
          "35: EXSTYLE WS_EX_ACCEPTFILES",
          "37: FONT 8, \"Segoe UI Symbol\", 400, 0, 0x0",
          "38: BEGIN",
          "39:     LTEXT           \"Device\",IDS_DEVICE_TXT,9,6,200,8",
          "",
          "[Removed Lines]",
          "36: CAPTION \"Rufus 2.11.993\"",
          "",
          "[Added Lines]",
          "36: CAPTION \"Rufus 2.11.994\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "322: VS_VERSION_INFO VERSIONINFO",
          "325:  FILEFLAGSMASK 0x3fL",
          "326: #ifdef _DEBUG",
          "327:  FILEFLAGS 0x1L",
          "",
          "[Removed Lines]",
          "323:  FILEVERSION 2,11,993,0",
          "324:  PRODUCTVERSION 2,11,993,0",
          "",
          "[Added Lines]",
          "323:  FILEVERSION 2,11,994,0",
          "324:  PRODUCTVERSION 2,11,994,0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "338:         BEGIN",
          "339:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
          "340:             VALUE \"FileDescription\", \"Rufus\"",
          "342:             VALUE \"InternalName\", \"Rufus\"",
          "343:             VALUE \"LegalCopyright\", \"\ufffd 2011-2016 Pete Batard (GPL v3)\"",
          "344:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
          "345:             VALUE \"OriginalFilename\", \"rufus.exe\"",
          "346:             VALUE \"ProductName\", \"Rufus\"",
          "348:         END",
          "349:     END",
          "350:     BLOCK \"VarFileInfo\"",
          "",
          "[Removed Lines]",
          "341:             VALUE \"FileVersion\", \"2.11.993\"",
          "347:             VALUE \"ProductVersion\", \"2.11.993\"",
          "",
          "[Added Lines]",
          "341:             VALUE \"FileVersion\", \"2.11.994\"",
          "347:             VALUE \"ProductVersion\", \"2.11.994\"",
          "",
          "---------------"
        ],
        "src/stdio.c||src/stdio.c": [
          "File: src/stdio.c -> src/stdio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "336:   if (WriteFile(hFile, lpBuffer, nNumberOfBytesToWrite, lpNumberOfBytesWritten, NULL)) {",
          "337:    if (nNumberOfBytesToWrite == *lpNumberOfBytesWritten)",
          "338:     return TRUE;",
          "339:    uprintf(\"  Wrote %d bytes but requested %d%s\", *lpNumberOfBytesWritten,",
          "340:     nNumberOfBytesToWrite, nTry < nNumRetries ? retry_msg : \"\");",
          "343:    uprintf(\"  Write error [0x%08X]%s\", GetLastError(), nTry < nNumRetries ? retry_msg : \"\");",
          "344:   }",
          "",
          "[Removed Lines]",
          "341:   }",
          "342:   else {",
          "",
          "[Added Lines]",
          "340:    if (large_drive && (*lpNumberOfBytesWritten == 0)) {",
          "341:     uprintf(\"Warning: Possible short write\");",
          "342:     return TRUE;",
          "343:    }",
          "346:   } else {",
          "",
          "---------------"
        ]
      }
    }
  ]
}