{
  "cve_id": "CVE-2021-32138",
  "cve_desc": "The DumpTrackInfo function in GPAC 1.0.1 allows attackers to cause a denial of service (NULL pointer dereference) via a crafted file in the MP4Box command.",
  "repo": "gpac/gpac",
  "patch_hash": "289ffce3e0d224d314f5f92a744d5fe35999f20b",
  "patch_info": {
    "commit_hash": "289ffce3e0d224d314f5f92a744d5fe35999f20b",
    "repo": "gpac/gpac",
    "commit_url": "https://github.com/gpac/gpac/commit/289ffce3e0d224d314f5f92a744d5fe35999f20b",
    "files": [
      "applications/mp4box/filedump.c"
    ],
    "message": "fixed #1767 (fuzz)",
    "before_after_code_files": [
      "applications/mp4box/filedump.c||applications/mp4box/filedump.c"
    ]
  },
  "patch_diff": {
    "applications/mp4box/filedump.c||applications/mp4box/filedump.c": [
      "File: applications/mp4box/filedump.c -> applications/mp4box/filedump.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2880:   fprintf(stderr, \"\\tAOM AV1 stream - Resolution %d x %d\\n\", w, h);",
      "2882:   av1c = gf_isom_av1_config_get(file, trackNum, 1);",
      "2898:   }",
      "2900:  } else if (msub_type == GF_ISOM_SUBTYPE_3GP_H263) {",
      "2901:   u32 w, h;",
      "2902:   gf_isom_get_visual_info(file, trackNum, 1, &w, &h);",
      "",
      "[Removed Lines]",
      "2883:   fprintf(stderr, \"\\tversion=%u, profile=%u, level_idx0=%u, tier=%u\\n\", (u32)av1c->version, (u32)av1c->seq_profile, (u32)av1c->seq_level_idx_0, (u32)av1c->seq_tier_0);",
      "2884:   fprintf(stderr, \"\\thigh_bitdepth=%u, twelve_bit=%u, monochrome=%u\\n\", (u32)av1c->high_bitdepth, (u32)av1c->twelve_bit, (u32)av1c->monochrome);",
      "2885:   fprintf(stderr, \"\\tchroma: subsampling_x=%u, subsampling_y=%u, sample_position=%u\\n\", (u32)av1c->chroma_subsampling_x, (u32)av1c->chroma_subsampling_y, (u32)av1c->chroma_sample_position);",
      "2887:   if (av1c->initial_presentation_delay_present)",
      "2888:    fprintf(stderr, \"\\tInitial presentation delay %u\\n\", (u32) av1c->initial_presentation_delay_minus_one+1);",
      "2890:   count = gf_list_count(av1c->obu_array);",
      "2891:   for (i=0; i<count; i++) {",
      "2892:    u8 hash[20];",
      "2893:    GF_AV1_OBUArrayEntry *obu = gf_list_get(av1c->obu_array, i);",
      "2894:    gf_sha1_csum((u8*)obu->obu, (u32)obu->obu_length, hash);",
      "2895:    fprintf(stderr, \"\\tOBU#%d %s hash: \", i+1, gf_av1_get_obu_name(obu->obu_type) );",
      "2896:    for (j=0; j<20; j++) fprintf(stderr, \"%02X\", hash[j]);",
      "2897:    fprintf(stderr, \"\\n\");",
      "2899:   gf_odf_av1_cfg_del(av1c);",
      "",
      "[Added Lines]",
      "2883:   if (!av1c) {",
      "2884:    fprintf(stderr, \"\\tCorrupted av1 config\\n\");",
      "2885:   } else {",
      "2886:    fprintf(stderr, \"\\tversion=%u, profile=%u, level_idx0=%u, tier=%u\\n\", (u32)av1c->version, (u32)av1c->seq_profile, (u32)av1c->seq_level_idx_0, (u32)av1c->seq_tier_0);",
      "2887:    fprintf(stderr, \"\\thigh_bitdepth=%u, twelve_bit=%u, monochrome=%u\\n\", (u32)av1c->high_bitdepth, (u32)av1c->twelve_bit, (u32)av1c->monochrome);",
      "2888:    fprintf(stderr, \"\\tchroma: subsampling_x=%u, subsampling_y=%u, sample_position=%u\\n\", (u32)av1c->chroma_subsampling_x, (u32)av1c->chroma_subsampling_y, (u32)av1c->chroma_sample_position);",
      "2890:    if (av1c->initial_presentation_delay_present)",
      "2891:     fprintf(stderr, \"\\tInitial presentation delay %u\\n\", (u32) av1c->initial_presentation_delay_minus_one+1);",
      "2893:    count = gf_list_count(av1c->obu_array);",
      "2894:    for (i=0; i<count; i++) {",
      "2895:     u8 hash[20];",
      "2896:     GF_AV1_OBUArrayEntry *obu = gf_list_get(av1c->obu_array, i);",
      "2897:     gf_sha1_csum((u8*)obu->obu, (u32)obu->obu_length, hash);",
      "2898:     fprintf(stderr, \"\\tOBU#%d %s hash: \", i+1, gf_av1_get_obu_name(obu->obu_type) );",
      "2899:     for (j=0; j<20; j++) fprintf(stderr, \"%02X\", hash[j]);",
      "2900:     fprintf(stderr, \"\\n\");",
      "2901:    }",
      "2902:    gf_odf_av1_cfg_del(av1c);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "44af1e163e53ab1d6f40921fdc033edd78aa6c51",
      "candidate_info": {
        "commit_hash": "44af1e163e53ab1d6f40921fdc033edd78aa6c51",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/44af1e163e53ab1d6f40921fdc033edd78aa6c51",
        "files": [
          "applications/mp4box/filedump.c",
          "include/gpac/avparse.h",
          "include/gpac/internal/media_dev.h",
          "src/export.cpp",
          "src/filters/dasher.c",
          "src/filters/inspect.c",
          "src/filters/reframe_av1.c",
          "src/isomedia/box_dump.c",
          "src/media_tools/av_parsers.c",
          "src/media_tools/isom_tools.c",
          "src/modules/dektec_out/dektec_video_decl.dep",
          "src/odf/descriptors.c"
        ],
        "message": "Fixes for 09daadd5",
        "before_after_code_files": [
          "applications/mp4box/filedump.c||applications/mp4box/filedump.c",
          "include/gpac/avparse.h||include/gpac/avparse.h",
          "include/gpac/internal/media_dev.h||include/gpac/internal/media_dev.h",
          "src/export.cpp||src/export.cpp",
          "src/filters/dasher.c||src/filters/dasher.c",
          "src/filters/inspect.c||src/filters/inspect.c",
          "src/filters/reframe_av1.c||src/filters/reframe_av1.c",
          "src/isomedia/box_dump.c||src/isomedia/box_dump.c",
          "src/media_tools/av_parsers.c||src/media_tools/av_parsers.c",
          "src/media_tools/isom_tools.c||src/media_tools/isom_tools.c",
          "src/modules/dektec_out/dektec_video_decl.dep||src/modules/dektec_out/dektec_video_decl.dep",
          "src/odf/descriptors.c||src/odf/descriptors.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "applications/mp4box/filedump.c||applications/mp4box/filedump.c"
          ],
          "candidate": [
            "applications/mp4box/filedump.c||applications/mp4box/filedump.c"
          ]
        }
      },
      "candidate_diff": {
        "applications/mp4box/filedump.c||applications/mp4box/filedump.c": [
          "File: applications/mp4box/filedump.c -> applications/mp4box/filedump.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1316:  track = gf_isom_get_track_by_id(file, trackID);",
          "1320:  av1.config = gf_isom_av1_config_get(file, track, 1);",
          "1321:  if (!av1.config) {",
          "1322:   fprintf(stderr, \"Error: Track #%d is not AV1!\\n\", trackID);",
          "",
          "[Removed Lines]",
          "1318:  memset(&av1, 0, sizeof(AV1State));",
          "1319:  av1_reset_state(&av1, GF_FALSE);",
          "",
          "[Added Lines]",
          "1318:  gf_av1_init_state(&av1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1383:  fprintf(dump, \"</OBUTrack>\\n\");",
          "1385:  if (av1.config) gf_odf_av1_cfg_del(av1.config);",
          "1386: #endif",
          "1387: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1385:  gf_av1_reset_state(&av1, GF_TRUE);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2620:    u8 hash[20];",
          "2621:    GF_AV1_OBUArrayEntry *obu = gf_list_get(av1c->obu_array, i);",
          "2622:    gf_sha1_csum((u8*)obu->obu, (u32)obu->obu_length, hash);",
          "2624:    for (j=0; j<20; j++) fprintf(stderr, \"%02X\", hash[j]);",
          "2625:    fprintf(stderr, \"\\n\");",
          "2626:   }",
          "",
          "[Removed Lines]",
          "2623:    fprintf(stderr, \"\\tOBU#%d %s hash: \", i+1, av1_get_obu_name(obu->obu_type) );",
          "",
          "[Added Lines]",
          "2623:    fprintf(stderr, \"\\tOBU#%d %s hash: \", i+1, gf_av1_get_obu_name(obu->obu_type) );",
          "",
          "---------------"
        ],
        "include/gpac/avparse.h||include/gpac/avparse.h": [
          "File: include/gpac/avparse.h -> include/gpac/avparse.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "804: \\param obu_type the OBU type",
          "805: \\return the OBU name",
          "",
          "[Removed Lines]",
          "807: const char *av1_get_obu_name(ObuType obu_type);",
          "",
          "[Added Lines]",
          "807: const char *gf_av1_get_obu_name(ObuType obu_type);",
          "",
          "---------------"
        ],
        "include/gpac/internal/media_dev.h||include/gpac/internal/media_dev.h": [
          "File: include/gpac/internal/media_dev.h -> include/gpac/internal/media_dev.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "694: GF_Err gf_media_aom_av1_parse_obu(GF_BitStream *bs, ObuType *obu_type, u64 *obu_size, u32 *obu_hdr_size, AV1State *state);",
          "696: Bool av1_is_obu_header(ObuType obu_type);",
          "699: u64 gf_av1_leb128_read(GF_BitStream *bs, u8 *opt_Leb128Bytes);",
          "700: u32 gf_av1_leb128_size(u64 value);",
          "",
          "[Removed Lines]",
          "697: void av1_reset_state(AV1State *state, Bool is_destroy);",
          "",
          "[Added Lines]",
          "701: \\param state the frame parser",
          "703: void gf_av1_init_state(AV1State *state);",
          "706: \\param state the frame parser",
          "707: \\param is_destroy if TRUE, destroy internal reference picture lists",
          "709: void gf_av1_reset_state(AV1State *state, Bool is_destroy);",
          "",
          "---------------"
        ],
        "src/export.cpp||src/export.cpp": [
          "File: src/export.cpp -> src/export.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2445: #pragma comment (linker, EXPORT_SYMBOL(gf_media_avc_read_pps_bs ) )",
          "2446: #pragma comment (linker, EXPORT_SYMBOL(gf_dasher_set_hls_clock ) )",
          "2448: #pragma comment (linker, EXPORT_SYMBOL(gf_get_next_pow2) )",
          "2449: #pragma comment (linker, EXPORT_SYMBOL(gf_htonl) )",
          "2450: #pragma comment (linker, EXPORT_SYMBOL(gf_htons) )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2448: #pragma comment (linker, EXPORT_SYMBOL(gf_av1_get_obu_name) )",
          "2449: #pragma comment (linker, EXPORT_SYMBOL(gf_av1_init_state) )",
          "2450: #pragma comment (linker, EXPORT_SYMBOL(gf_av1_reset_state) )",
          "",
          "---------------"
        ],
        "src/filters/dasher.c||src/filters/dasher.c": [
          "File: src/filters/dasher.c -> src/filters/dasher.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1280:     GF_Err e;",
          "1281:     u32 i = 0;",
          "1282:     AV1State av1_state;",
          "1285:     av1_state.config = av1c;",
          "1287:     for (i = 0; i < gf_list_count(av1c->obu_array); ++i) {",
          "",
          "[Removed Lines]",
          "1283:     memset(&av1_state, 0, sizeof(AV1State));",
          "1284:     av1_reset_state(&av1_state, GF_FALSE);",
          "",
          "[Added Lines]",
          "1283:     gf_av1_init_state(&av1_state);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1318:      }",
          "1319:     }",
          "1320:     gf_odf_av1_cfg_del(av1c);",
          "1322:     return GF_OK;",
          "1323: #else",
          "1324:     return GF_NOT_SUPPORTED;",
          "",
          "[Removed Lines]",
          "1321:     av1_reset_state(&av1_state, GF_TRUE);",
          "",
          "[Added Lines]",
          "1320:     gf_av1_reset_state(&av1_state, GF_TRUE);",
          "",
          "---------------"
        ],
        "src/filters/inspect.c||src/filters/inspect.c": [
          "File: src/filters/inspect.c -> src/filters/inspect.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "687: #define DUMP_OBU_INT(_v) gf_fprintf(dump, #_v\"=\\\"%d\\\" \", av1->_v);",
          "688: #define DUMP_OBU_INT2(_n, _v) gf_fprintf(dump, _n\"=\\\"%d\\\" \", _v);",
          "691:  if (dump_crc && (obu_length<0xFFFFFFFFUL))",
          "692:   gf_fprintf(dump, \"crc=\\\"%u\\\" \", gf_crc_32(obu, (u32) obu_length) );",
          "693:  switch (obu_type) {",
          "",
          "[Removed Lines]",
          "690:  gf_fprintf(dump, \"   <OBU size=\\\"\"LLU\"\\\" type=\\\"%s\\\" header_size=\\\"%d\\\" has_size_field=\\\"%d\\\" has_ext=\\\"%d\\\" temporalID=\\\"%d\\\" spatialID=\\\"%d\\\" \", obu_size, av1_get_obu_name(obu_type), hdr_size, av1->obu_has_size_field, av1->obu_extension_flag, av1->temporal_id , av1->spatial_id);",
          "",
          "[Added Lines]",
          "690:  gf_fprintf(dump, \"   <OBU size=\\\"\"LLU\"\\\" type=\\\"%s\\\" header_size=\\\"%d\\\" has_size_field=\\\"%d\\\" has_ext=\\\"%d\\\" temporalID=\\\"%d\\\" spatialID=\\\"%d\\\" \", obu_size, gf_av1_get_obu_name(obu_type), hdr_size, av1->obu_has_size_field, av1->obu_extension_flag, av1->temporal_id , av1->spatial_id);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "920:   if (pctx->hevc_state) gf_free(pctx->hevc_state);",
          "921:   if (pctx->av1_state) {",
          "922:    if (pctx->av1_state->config) gf_odf_av1_cfg_del(pctx->av1_state->config);",
          "923:    gf_free(pctx->av1_state);",
          "924:   }",
          "925: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "923:    gf_av1_reset_state(pctx->av1_state, GF_TRUE);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1922:   inspect_reset_parsers(pctx, &pctx->av1_state);",
          "1923:   if (!pctx->av1_state) {",
          "1924:    GF_SAFEALLOC(pctx->av1_state, AV1State);",
          "1926:    if (!pctx->av1_state) return;",
          "1927:   }",
          "1928: #endif",
          "1929:   if (!dsi) {",
          "",
          "[Removed Lines]",
          "1925:    av1_reset_state(pctx->av1_state, GF_FALSE);",
          "",
          "[Added Lines]",
          "1927:    gf_av1_init_state(pctx->av1_state);",
          "",
          "---------------"
        ],
        "src/filters/reframe_av1.c||src/filters/reframe_av1.c": [
          "File: src/filters/reframe_av1.c -> src/filters/reframe_av1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:    return e;",
          "220:   }",
          "221:   if (ctx->state.obu_type != OBU_TEMPORAL_DELIMITER) {",
          "223:    gf_filter_setup_failure(filter, e);",
          "224:    ctx->bsmode = UNSUPPORTED;",
          "225:    return e;",
          "",
          "[Removed Lines]",
          "222:    GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[AV1Dmx] Error OBU stream start with %s, not a temporal delimiter - NOT SUPPORTED\\n\", av1_get_obu_name(ctx->state.obu_type) ));",
          "",
          "[Added Lines]",
          "222:    GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[AV1Dmx] Error OBU stream start with %s, not a temporal delimiter - NOT SUPPORTED\\n\", gf_av1_get_obu_name(ctx->state.obu_type) ));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227:   GF_LOG(GF_LOG_DEBUG, GF_LOG_CONTAINER, (\"[AV1Dmx] Detected OBUs Section 5 format\\n\"));",
          "228:   ctx->bsmode = OBUs;",
          "231:   gf_bs_seek(bs, 0);",
          "232:  }",
          "233:  ctx->is_av1 = GF_TRUE;",
          "",
          "[Removed Lines]",
          "230:   av1_reset_state(&ctx->state, GF_FALSE);",
          "",
          "[Added Lines]",
          "230:   gf_av1_reset_state(&ctx->state, GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "281:  if (ctx->file_hdr_size) {",
          "282:   gf_bs_seek(bs, ctx->file_hdr_size);",
          "283:  }",
          "286:  av1state.skip_frames = GF_TRUE;",
          "287:  av1state.config = gf_odf_av1_cfg_new();",
          "",
          "[Removed Lines]",
          "284:  memset(&av1state, 0, sizeof(AV1State));",
          "285:  av1_reset_state(&av1state, GF_FALSE);",
          "",
          "[Added Lines]",
          "284:  gf_av1_init_state(&av1state);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "292:   Bool is_sap=GF_FALSE;",
          "293:   u64 pts = GF_FILTER_NO_TS;",
          "294:   u64 frame_start = gf_bs_get_position(bs);",
          "298:   switch (ctx->bsmode) {",
          "",
          "[Removed Lines]",
          "295:   av1_reset_state(&av1state, GF_FALSE);",
          "",
          "[Added Lines]",
          "294:   gf_av1_reset_state(&av1state, GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "343:  }",
          "344:  gf_bs_del(bs);",
          "345:  gf_fclose(stream);",
          "347:  gf_odf_av1_cfg_del(av1state.config);",
          "349:  if (!ctx->duration.num || (ctx->duration.num  * ctx->cur_fps.num != duration * ctx->duration.den)) {",
          "350:   ctx->duration.num = (s32) duration;",
          "",
          "[Removed Lines]",
          "346:  av1_reset_state(&av1state, GF_TRUE);",
          "",
          "[Added Lines]",
          "346:  gf_av1_reset_state(&av1state, GF_TRUE);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "750:  gf_filter_pck_send(pck);",
          "752:  av1dmx_update_cts(ctx);",
          "755:  return GF_OK;",
          "",
          "[Removed Lines]",
          "753:  av1_reset_state(&ctx->state, GF_FALSE);",
          "",
          "[Added Lines]",
          "752:  gf_av1_reset_state(&ctx->state, GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "782:   } else {",
          "783:    e = aom_av1_parse_temporal_unit_from_annexb(ctx->bs, &ctx->state);",
          "784:    if (e==GF_BUFFER_TOO_SMALL) {",
          "786:     gf_bs_seek(ctx->bs, start);",
          "787:    }",
          "788:   }",
          "",
          "[Removed Lines]",
          "785:     av1_reset_state(&ctx->state, GF_FALSE);",
          "",
          "[Added Lines]",
          "784:     gf_av1_reset_state(&ctx->state, GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "809:   if (ctx->state.obu_type != OBU_TEMPORAL_DELIMITER) {",
          "810:    GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[AV1Dmx] output pid not configured (no sequence header yet ?), skipping OBU\\n\"));",
          "811:   }",
          "813:   return GF_OK;",
          "814:  }",
          "816:  if (!ctx->is_playing) {",
          "819:   return GF_OK;",
          "820:  }",
          "",
          "[Removed Lines]",
          "812:   av1_reset_state(&ctx->state, GF_FALSE);",
          "",
          "[Added Lines]",
          "811:   gf_av1_reset_state(&ctx->state, GF_FALSE);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "991:  if (ctx->bs) gf_bs_del(ctx->bs);",
          "992:  if (ctx->indexes) gf_free(ctx->indexes);",
          "995:  if (ctx->state.config) gf_odf_av1_cfg_del(ctx->state.config);",
          "996:  if (ctx->state.bs) gf_bs_del(ctx->state.bs);",
          "997:  if (ctx->state.frame_obus) gf_free(ctx->state.frame_obus);",
          "",
          "[Removed Lines]",
          "994:  av1_reset_state(&ctx->state, GF_TRUE);",
          "",
          "[Added Lines]",
          "993:  gf_av1_reset_state(&ctx->state, GF_TRUE);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1021:    GF_Err e;",
          "1022:    u32 nb_units = 0;",
          "1026:    state.config = gf_odf_av1_cfg_new();",
          "1027:    while (gf_bs_available(bs)) {",
          "1028:     e = aom_av1_parse_temporal_unit_from_section5(bs, &state);",
          "",
          "[Removed Lines]",
          "1024:    memset(&state, 0, sizeof(AV1State));",
          "1025:    av1_reset_state(&state, GF_FALSE);",
          "",
          "[Added Lines]",
          "1023:    gf_av1_init_state(&state);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1036:     } else {",
          "1037:      break;",
          "1038:     }",
          "1040:     if (nb_units>2) break;",
          "1041:    }",
          "1043:    gf_odf_av1_cfg_del(state.config);",
          "1044:    if (nb_units>2) {",
          "1045:     res = GF_TRUE;",
          "",
          "[Removed Lines]",
          "1039:     av1_reset_state(&state, GF_FALSE);",
          "1042:    av1_reset_state(&state, GF_TRUE);",
          "",
          "[Added Lines]",
          "1037:     gf_av1_reset_state(&state, GF_FALSE);",
          "1041:    gf_av1_reset_state(&state, GF_TRUE);",
          "",
          "---------------"
        ],
        "src/isomedia/box_dump.c||src/isomedia/box_dump.c": [
          "File: src/isomedia/box_dump.c -> src/isomedia/box_dump.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1609:   for (i=0; i<obu_count; i++) {",
          "1610:    GF_AV1_OBUArrayEntry *obu_a = gf_list_get(ptr->config->obu_array, i);",
          "1612:    dump_data(trace, (char *)obu_a->obu, (u32) obu_a->obu_length);",
          "1613:    gf_fprintf(trace, \"\\\"/>\\n\");",
          "1614:   }",
          "",
          "[Removed Lines]",
          "1611:    gf_fprintf(trace, \"<OBU type=\\\"%d\\\" name=\\\"%s\\\" size=\\\"%d\\\" content=\\\"\", obu_a->obu_type, av1_get_obu_name(obu_a->obu_type), (u32) obu_a->obu_length);",
          "",
          "[Added Lines]",
          "1611:    gf_fprintf(trace, \"<OBU type=\\\"%d\\\" name=\\\"%s\\\" size=\\\"%d\\\" content=\\\"\", obu_a->obu_type, gf_av1_get_obu_name(obu_a->obu_type), (u32) obu_a->obu_length);",
          "",
          "---------------"
        ],
        "src/media_tools/av_parsers.c||src/media_tools/av_parsers.c": [
          "File: src/media_tools/av_parsers.c -> src/media_tools/av_parsers.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2413: #endif // GPAC_DISABLE_AV_PARSERS",
          "2415: GF_EXPORT",
          "2417: {",
          "2418:  switch (obu_type) {",
          "2419:  case OBU_SEQUENCE_HEADER: return \"seq_header\";",
          "",
          "[Removed Lines]",
          "2416: const char *av1_get_obu_name(ObuType obu_type)",
          "",
          "[Added Lines]",
          "2416: const char *gf_av1_get_obu_name(ObuType obu_type)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3992: }",
          "3994: GF_EXPORT",
          "3996: {",
          "3997:  GF_List *l1, *l2;",
          "",
          "[Removed Lines]",
          "3995: void av1_reset_state(AV1State *state, Bool is_destroy)",
          "",
          "[Added Lines]",
          "3995: void gf_av1_init_state(AV1State *state)",
          "3996: {",
          "3997:  if (!state) return;",
          "3998:  memset(state, 0, sizeof(AV1State));",
          "3999:  state->color_primaries = 2;",
          "4000:  state->transfer_characteristics = 2;",
          "4001:  state->matrix_coefficients = 2;",
          "4002: }",
          "4004: GF_EXPORT",
          "4005: void gf_av1_reset_state(AV1State *state, Bool is_destroy)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4034:   if (state->bs)",
          "4035:    gf_bs_seek(state->bs, 0);",
          "4036:  }",
          "4042: }",
          "4044: static GF_Err av1_parse_tile_group(GF_BitStream *bs, AV1State *state, u64 obu_start, u64 obu_size)",
          "",
          "[Removed Lines]",
          "4038:  memset(state, 0, sizeof(AV1State));",
          "4039:  state->color_primaries = 2;",
          "4040:  state->transfer_characteristics = 2;",
          "4041:  state->matrix_coefficients = 2;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/media_tools/isom_tools.c||src/media_tools/isom_tools.c": [
          "File: src/media_tools/isom_tools.c -> src/media_tools/isom_tools.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3750:   GF_Err e = GF_OK;",
          "3751:   u32 i = 0;",
          "3755:   av1c = gf_isom_av1_config_get(movie, track, 1);",
          "3756:   if (!av1c) {",
          "3757:    GF_LOG(GF_LOG_DEBUG, GF_LOG_AUTHOR, (\"[ISOM Tools] No config found for AV1 file (\\\"%s\\\") when computing RFC6381.\\n\", gf_4cc_to_str(subtype)));",
          "",
          "[Removed Lines]",
          "3753:   memset(&av1_state, 0, sizeof(AV1State));",
          "3754:   av1_reset_state(&av1_state, GF_FALSE);",
          "",
          "[Added Lines]",
          "3753:   gf_av1_init_state(&av1_state);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3769:    gf_bs_del(bs); bs = NULL;",
          "3770:    if (e) {",
          "3771:     gf_odf_av1_cfg_del(av1c);",
          "3773:     return e;",
          "3774:    }",
          "3775:   }",
          "",
          "[Removed Lines]",
          "3772:     av1_reset_state(&av1_state, GF_TRUE);",
          "",
          "[Added Lines]",
          "3771:     gf_av1_reset_state(&av1_state, GF_TRUE);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3793:   }",
          "3795:   gf_odf_av1_cfg_del(av1c);",
          "3797:   return GF_OK;",
          "3798:  }",
          "",
          "[Removed Lines]",
          "3796:   av1_reset_state(&av1_state, GF_TRUE);",
          "",
          "[Added Lines]",
          "3795:   gf_av1_reset_state(&av1_state, GF_TRUE);",
          "",
          "---------------"
        ],
        "src/modules/dektec_out/dektec_video_decl.dep||src/modules/dektec_out/dektec_video_decl.dep": [
          "File: src/modules/dektec_out/dektec_video_decl.dep -> src/modules/dektec_out/dektec_video_decl.dep",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: ../modules/dektec_out/dektec_video_decl.o: \\",
          "2:   ../modules/dektec_out/dektec_video_decl.c \\",
          "3:   ../modules/dektec_out/dektec_video.h \\",
          "4:   /Users/lefeuvre/code/gpac/include/gpac/filters.h \\",
          "5:   /Users/lefeuvre/code/gpac/include/gpac/tools.h \\",
          "6:   /Users/lefeuvre/code/gpac/include/gpac/setup.h \\",
          "7:   /Users/lefeuvre/code/gpac/config.h \\",
          "8:   /Users/lefeuvre/code/gpac/include/gpac/version.h \\",
          "9:   /Users/lefeuvre/code/gpac/include/gpac/Remotery.h \\",
          "10:   /Users/lefeuvre/code/gpac/include/gpac/list.h \\",
          "11:   /Users/lefeuvre/code/gpac/include/gpac/events.h \\",
          "12:   /Users/lefeuvre/code/gpac/include/gpac/maths.h \\",
          "13:   /Users/lefeuvre/code/gpac/include/gpac/events_constants.h \\",
          "14:   /Users/lefeuvre/code/gpac/include/gpac/user.h \\",
          "15:   /Users/lefeuvre/code/gpac/include/gpac/module.h \\",
          "16:   /Users/lefeuvre/code/gpac/include/gpac/config_file.h \\",
          "17:   /Users/lefeuvre/code/gpac/include/gpac/constants.h \\",
          "18:   /Users/lefeuvre/code/gpac/include/gpac/download.h \\",
          "19:   /Users/lefeuvre/code/gpac/include/gpac/cache.h \\",
          "20:   /Users/lefeuvre/code/gpac/include/gpac/main.h \\",
          "21:   /Users/lefeuvre/code/gpac/include/gpac/utf.h \\",
          "22:   /Users/lefeuvre/code/gpac/include/gpac/color.h \\",
          "23:   /Users/lefeuvre/code/gpac/include/gpac/thread.h",
          "",
          "---------------"
        ],
        "src/odf/descriptors.c||src/odf/descriptors.c": [
          "File: src/odf/descriptors.c -> src/odf/descriptors.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1260:  if (!size) return NULL;",
          "1262:  cfg = gf_odf_av1_cfg_new();",
          "1265:  state.config = cfg;",
          "1267:  cfg->marker = gf_bs_read_int(bs, 1);",
          "",
          "[Removed Lines]",
          "1263:  memset(&state, 0, sizeof(AV1State));",
          "1264:  av1_reset_state(&state, GF_FALSE);",
          "",
          "[Added Lines]",
          "1263:  gf_av1_init_state(&state);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1327:   }",
          "1328:   size -= (u32) obu_size;",
          "1329:  }",
          "1331:  return cfg;",
          "1332: #else",
          "1333:  return NULL;",
          "",
          "[Removed Lines]",
          "1330:  av1_reset_state(& state, GF_TRUE);",
          "",
          "[Added Lines]",
          "1329:  gf_av1_reset_state(& state, GF_TRUE);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "39367c29f21232e61f6883607c1d1c677bc28ccd",
      "candidate_info": {
        "commit_hash": "39367c29f21232e61f6883607c1d1c677bc28ccd",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/39367c29f21232e61f6883607c1d1c677bc28ccd",
        "files": [
          "applications/mp4box/filedump.c",
          "include/gpac/avparse.h",
          "include/gpac/internal/media_dev.h",
          "src/export.cpp",
          "src/isomedia/avc_ext.c",
          "src/isomedia/box_dump.c",
          "src/media_tools/av_parsers.c",
          "src/media_tools/dash_segmenter.c",
          "src/media_tools/media_import.c"
        ],
        "message": "fixed bugs introduced by 211ab52d",
        "before_after_code_files": [
          "applications/mp4box/filedump.c||applications/mp4box/filedump.c",
          "include/gpac/avparse.h||include/gpac/avparse.h",
          "include/gpac/internal/media_dev.h||include/gpac/internal/media_dev.h",
          "src/export.cpp||src/export.cpp",
          "src/isomedia/avc_ext.c||src/isomedia/avc_ext.c",
          "src/isomedia/box_dump.c||src/isomedia/box_dump.c",
          "src/media_tools/av_parsers.c||src/media_tools/av_parsers.c",
          "src/media_tools/dash_segmenter.c||src/media_tools/dash_segmenter.c",
          "src/media_tools/media_import.c||src/media_tools/media_import.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "applications/mp4box/filedump.c||applications/mp4box/filedump.c"
          ],
          "candidate": [
            "applications/mp4box/filedump.c||applications/mp4box/filedump.c"
          ]
        }
      },
      "candidate_diff": {
        "applications/mp4box/filedump.c||applications/mp4box/filedump.c": [
          "File: applications/mp4box/filedump.c -> applications/mp4box/filedump.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1577: #define DUMP_OBU_INT(_v) fprintf(dump, #_v\"=\\\"%d\\\" \", av1->_v);",
          "1578: #define DUMP_OBU_INT2(_n, _v) fprintf(dump, _n\"=\\\"%d\\\" \", _v);",
          "1581:  if (dump_crc) fprintf(dump, \"crc=\\\"%u\\\" \", gf_crc_32(obu, obu_length) );",
          "1582:  switch (obu_type) {",
          "1583:  case OBU_SEQUENCE_HEADER:",
          "",
          "[Removed Lines]",
          "1580:  fprintf(dump, \"   <OBU number=\\\"%d\\\" size=\\\"%d\\\" type=\\\"%s\\\" header_size=\\\"%d\\\" has_size_field=\\\"%d\\\" has_ext=\\\"%d\\\" temporalID=\\\"%d\\\" spatialID=\\\"%d\\\" \", idx, (u32) obu_size, av1_get_obu_name(obu_type), hdr_size, av1->obu_has_size_field, av1->obu_extension_flag, av1->temporal_id , av1->spatial_id);",
          "",
          "[Added Lines]",
          "1580:  fprintf(dump, \"   <OBU number=\\\"%d\\\" size=\\\"%d\\\" type=\\\"%s\\\" header_size=\\\"%d\\\" has_size_field=\\\"%d\\\" has_ext=\\\"%d\\\" temporalID=\\\"%d\\\" spatialID=\\\"%d\\\" \", idx, (u32) obu_size, gf_av1_get_obu_name(obu_type), hdr_size, av1->obu_has_size_field, av1->obu_extension_flag, av1->temporal_id , av1->spatial_id);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1657:  track = gf_isom_get_track_by_id(file, trackID);",
          "1660:  av1.config = gf_isom_av1_config_get(file, track, 1);",
          "1661:  if (!av1.config) {",
          "1662:   fprintf(stderr, \"Error: Track #%d is not AV1!\\n\", trackID);",
          "",
          "[Removed Lines]",
          "1659:  av1_reset_state(&av1);",
          "",
          "[Added Lines]",
          "1659:  gf_av1_reset_state(&av1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3042:    u32 j;",
          "3043:    GF_AV1_OBUArrayEntry *obu = gf_list_get(av1c->obu_array, i);",
          "3044:    gf_sha1_csum((u8*)obu->obu, (u32)obu->obu_length, hash);",
          "3046:    for (j=0; j<20; j++) fprintf(stderr, \"%02X\", hash[j]);",
          "3047:    fprintf(stderr, \"\\n\");",
          "3048:   }",
          "",
          "[Removed Lines]",
          "3045:    fprintf(stderr, \"\\tOBU#%d %s hash: \", i+1, av1_get_obu_name(obu->obu_type) );",
          "",
          "[Added Lines]",
          "3045:    fprintf(stderr, \"\\tOBU#%d %s hash: \", i+1, gf_av1_get_obu_name(obu->obu_type) );",
          "",
          "---------------"
        ],
        "include/gpac/avparse.h||include/gpac/avparse.h": [
          "File: include/gpac/avparse.h -> include/gpac/avparse.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "363:  OBU_METADATA_TYPE_TIMECODE = 5",
          "364: } ObuMetadataType;",
          "",
          "[Removed Lines]",
          "366: const char *av1_get_obu_name(ObuType obu_type);",
          "",
          "[Added Lines]",
          "366: const char *gf_av1_get_obu_name(ObuType obu_type);",
          "",
          "---------------"
        ],
        "include/gpac/internal/media_dev.h||include/gpac/internal/media_dev.h": [
          "File: include/gpac/internal/media_dev.h -> include/gpac/internal/media_dev.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "644: GF_Err gf_media_aom_av1_parse_obu(GF_BitStream *bs, ObuType *obu_type, u64 *obu_size, u32 *obu_hdr_size, AV1State *state);",
          "646: Bool av1_is_obu_header(ObuType obu_type);",
          "648: void av1_reset_frame_state(AV1StateFrame *frame_state);",
          "650: typedef struct",
          "",
          "[Removed Lines]",
          "647: void av1_reset_state(AV1State *state);",
          "",
          "[Added Lines]",
          "647: void gf_av1_reset_state(AV1State *state);",
          "",
          "---------------"
        ],
        "src/export.cpp||src/export.cpp": [
          "File: src/export.cpp -> src/export.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2359: #pragma comment (linker, EXPORT_SYMBOL(gf_term_service_get_dm) )",
          "2360: #pragma comment (linker, EXPORT_SYMBOL(gf_dm_set_localcache_provider) )",
          "2364: #pragma comment (linker, EXPORT_SYMBOL(gf_get_next_pow2) )",
          "2365: #pragma comment (linker, EXPORT_SYMBOL(gf_htonl) )",
          "",
          "[Removed Lines]",
          "2362: #pragma comment (linker, EXPORT_SYMBOL(av1_get_obu_name) )",
          "",
          "[Added Lines]",
          "2362: #pragma comment (linker, EXPORT_SYMBOL(gf_av1_get_obu_name) )",
          "2363: #pragma comment (linker, EXPORT_SYMBOL(gf_av1_reset_state) )",
          "",
          "---------------"
        ],
        "src/isomedia/avc_ext.c||src/isomedia/avc_ext.c": [
          "File: src/isomedia/avc_ext.c -> src/isomedia/avc_ext.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2669:  if (ptr->config) gf_odf_av1_cfg_del(ptr->config);",
          "2670:  GF_SAFEALLOC(ptr->config, GF_AV1Config);",
          "2672:  state.config = ptr->config;",
          "2674:  ptr->config->marker = gf_bs_read_int(bs, 1);",
          "",
          "[Removed Lines]",
          "2671:  av1_reset_state(&state);",
          "",
          "[Added Lines]",
          "2671:  gf_av1_reset_state(&state);",
          "",
          "---------------"
        ],
        "src/isomedia/box_dump.c||src/isomedia/box_dump.c": [
          "File: src/isomedia/box_dump.c -> src/isomedia/box_dump.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1713:   for (i=0; i<obu_count; i++) {",
          "1714:    GF_AV1_OBUArrayEntry *a = gf_list_get(ptr->config->obu_array, i);",
          "1716:    dump_data(trace, (char *)a->obu, (u32) a->obu_length);",
          "1717:    fprintf(trace, \"\\\"/>\\n\");",
          "1718:   }",
          "",
          "[Removed Lines]",
          "1715:    fprintf(trace, \"<OBU type=\\\"%d\\\" name=\\\"%s\\\" size=\\\"%d\\\" content=\\\"\", a->obu_type, av1_get_obu_name(a->obu_type), (u32) a->obu_length);",
          "",
          "[Added Lines]",
          "1715:    fprintf(trace, \"<OBU type=\\\"%d\\\" name=\\\"%s\\\" size=\\\"%d\\\" content=\\\"\", a->obu_type, gf_av1_get_obu_name(a->obu_type), (u32) a->obu_length);",
          "",
          "---------------"
        ],
        "src/media_tools/av_parsers.c||src/media_tools/av_parsers.c": [
          "File: src/media_tools/av_parsers.c -> src/media_tools/av_parsers.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2347: }",
          "2349: GF_EXPORT",
          "2351: {",
          "2352:  switch (obu_type) {",
          "2353:  case OBU_SEQUENCE_HEADER: return \"seq_header\";",
          "",
          "[Removed Lines]",
          "2350: const char *av1_get_obu_name(ObuType obu_type)",
          "",
          "[Added Lines]",
          "2350: const char *gf_av1_get_obu_name(ObuType obu_type)",
          "",
          "---------------"
        ],
        "src/media_tools/dash_segmenter.c||src/media_tools/dash_segmenter.c": [
          "File: src/media_tools/dash_segmenter.c -> src/media_tools/dash_segmenter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "659:   GF_Err e = GF_OK;",
          "660:   u32 i = 0;",
          "663:   av1c = gf_isom_av1_config_get(movie, track, 1);",
          "664:   if (!av1c) {",
          "665:    GF_LOG(GF_LOG_DEBUG, GF_LOG_AUTHOR, (\"[ISOM Tools] No config found for AV1 file (\\\"%s\\\") when computing RFC6381.\\n\", gf_4cc_to_str(subtype)));",
          "",
          "[Removed Lines]",
          "662:   av1_reset_state(&av1_state);",
          "",
          "[Added Lines]",
          "662:   gf_av1_reset_state(&av1_state);",
          "",
          "---------------"
        ],
        "src/media_tools/media_import.c||src/media_tools/media_import.c": [
          "File: src/media_tools/media_import.c -> src/media_tools/media_import.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7378:  frame_state->is_first_frame = GF_TRUE;",
          "7379: }",
          "7382: {",
          "7387: }",
          "7389: static Bool probe_webm_matrovska(GF_BitStream *bs)",
          "",
          "[Removed Lines]",
          "7381: void av1_reset_state(AV1State* state)",
          "7383:  memset(&state, 0, sizeof(AV1State));",
          "",
          "[Added Lines]",
          "7381: GF_EXPORT",
          "7382: void gf_av1_reset_state(AV1State* state)",
          "7384:  if (state) {",
          "7385:   GF_AV1Config *av1cfg = state->config;",
          "7386:   memset(state, 0, sizeof(AV1State));",
          "7387:   state->config = av1cfg;",
          "7391:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7445:   return GF_OK;",
          "7446:  }",
          "7449:  av1_cfg = gf_odf_av1_cfg_new();",
          "7450:  state.config = av1_cfg;",
          "7451:  if (import->flags & GF_IMPORT_KEEP_AV1_TEMPORAL_OBU)",
          "",
          "[Removed Lines]",
          "7448:  av1_reset_state(&state);",
          "",
          "[Added Lines]",
          "7453:  gf_av1_reset_state(&state);",
          "",
          "---------------"
        ]
      }
    }
  ]
}