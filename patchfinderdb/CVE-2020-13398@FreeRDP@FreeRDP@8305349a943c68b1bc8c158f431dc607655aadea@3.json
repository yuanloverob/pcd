{
  "cve_id": "CVE-2020-13398",
  "cve_desc": "An issue was discovered in FreeRDP before 2.1.1. An out-of-bounds (OOB) write vulnerability has been detected in crypto_rsa_common in libfreerdp/crypto/crypto.c.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "8305349a943c68b1bc8c158f431dc607655aadea",
  "patch_info": {
    "commit_hash": "8305349a943c68b1bc8c158f431dc607655aadea",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/8305349a943c68b1bc8c158f431dc607655aadea",
    "files": [
      "libfreerdp/crypto/crypto.c"
    ],
    "message": "Fixed  GHSL-2020-102 heap overflow\n\n(cherry picked from commit 197b16cc15a12813c2e4fa2d6ae9cd9c4a57e581)",
    "before_after_code_files": [
      "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c"
    ]
  },
  "patch_diff": {
    "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c": [
      "File: libfreerdp/crypto/crypto.c -> libfreerdp/crypto/crypto.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "96: static int crypto_rsa_common(const BYTE* input, int length, UINT32 key_length, const BYTE* modulus,",
      "97:                              const BYTE* exponent, int exponent_size, BYTE* output)",
      "98: {",
      "100:  int output_length = -1;",
      "107:  if (!input_reverse)",
      "108:   return -1;",
      "",
      "[Removed Lines]",
      "99:  BN_CTX* ctx;",
      "101:  BYTE* input_reverse;",
      "102:  BYTE* modulus_reverse;",
      "103:  BYTE* exponent_reverse;",
      "104:  BIGNUM *mod, *exp, *x, *y;",
      "105:  input_reverse = (BYTE*)malloc(2 * key_length + exponent_size);",
      "",
      "[Added Lines]",
      "99:  BN_CTX* ctx = NULL;",
      "101:  BYTE* input_reverse = NULL;",
      "102:  BYTE* modulus_reverse = NULL;",
      "103:  BYTE* exponent_reverse = NULL;",
      "104:  BIGNUM* mod = NULL;",
      "105:  BIGNUM* exp = NULL;",
      "106:  BIGNUM* x = NULL;",
      "107:  BIGNUM* y = NULL;",
      "108:  size_t bufferSize = 2 * key_length + exponent_size;",
      "110:  if (!input || (length < 0) || (exponent_size < 0) || !modulus || !exponent || !output)",
      "111:   return -1;",
      "113:  if (length > bufferSize)",
      "114:   bufferSize = length;",
      "116:  input_reverse = (BYTE*)calloc(bufferSize, 1);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "131:  if (!(y = BN_new()))",
      "132:   goto fail_bn_y;",
      "138:  output_length = BN_bn2bin(y, output);",
      "139:  crypto_reverse(output, output_length);",
      "142:   memset(output + output_length, 0, key_length - output_length);",
      "144:  BN_free(y);",
      "145: fail_bn_y:",
      "146:  BN_clear_free(x);",
      "",
      "[Removed Lines]",
      "134:  BN_bin2bn(modulus_reverse, key_length, mod);",
      "135:  BN_bin2bn(exponent_reverse, exponent_size, exp);",
      "136:  BN_bin2bn(input_reverse, length, x);",
      "137:  BN_mod_exp(y, x, exp, mod, ctx);",
      "141:  if (output_length < (int)key_length)",
      "",
      "[Added Lines]",
      "145:  if (!BN_bin2bn(modulus_reverse, key_length, mod))",
      "146:   goto fail;",
      "148:  if (!BN_bin2bn(exponent_reverse, exponent_size, exp))",
      "149:   goto fail;",
      "150:  if (!BN_bin2bn(input_reverse, length, x))",
      "151:   goto fail;",
      "152:  if (BN_mod_exp(y, x, exp, mod, ctx) != 1)",
      "153:   goto fail;",
      "155:  if (output_length < 0)",
      "156:   goto fail;",
      "159:  if (output_length < key_length)",
      "162: fail:",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2897576c3dee3b8d21e41792aeabae1f12437d95",
      "candidate_info": {
        "commit_hash": "2897576c3dee3b8d21e41792aeabae1f12437d95",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/2897576c3dee3b8d21e41792aeabae1f12437d95",
        "files": [
          "winpr/libwinpr/sspi/test/TestNTLM.c"
        ],
        "message": "Fixed memory leak in NTLM test\n\n(cherry picked from commit 135458cf27160d50e6294f87ef80f27f1f65d319)",
        "before_after_code_files": [
          "winpr/libwinpr/sspi/test/TestNTLM.c||winpr/libwinpr/sspi/test/TestNTLM.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/sspi/test/TestNTLM.c||winpr/libwinpr/sspi/test/TestNTLM.c": [
          "File: winpr/libwinpr/sspi/test/TestNTLM.c -> winpr/libwinpr/sspi/test/TestNTLM.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "470: int TestNTLM(int argc, char* argv[])",
          "471: {",
          "472:  int status;",
          "473:  PSecBuffer pSecBuffer;",
          "476:  BOOL DynamicTest = TRUE;",
          "",
          "[Removed Lines]",
          "474:  TEST_NTLM_CLIENT* client;",
          "475:  TEST_NTLM_SERVER* server;",
          "",
          "[Added Lines]",
          "473:  int rc = -1;",
          "475:  TEST_NTLM_CLIENT* client = NULL;",
          "476:  TEST_NTLM_SERVER* server = NULL;",
          "479:  WINPR_UNUSED(argc);",
          "480:  WINPR_UNUSED(argv);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "482:  if (!client)",
          "483:  {",
          "484:   printf(\"Memory allocation failed\");",
          "486:  }",
          "488:  status = test_ntlm_client_init(client, TEST_NTLM_USER, TEST_NTLM_DOMAIN, TEST_NTLM_PASSWORD);",
          "",
          "[Removed Lines]",
          "485:   return -1;",
          "",
          "[Added Lines]",
          "490:   goto fail;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "490:  if (status < 0)",
          "491:  {",
          "492:   printf(\"test_ntlm_client_init failure\\n\");",
          "494:  }",
          "",
          "[Removed Lines]",
          "493:   return -1;",
          "",
          "[Added Lines]",
          "498:   goto fail;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "501:  if (!server)",
          "502:  {",
          "503:   printf(\"Memory allocation failed\\n\");",
          "505:  }",
          "507:  status = test_ntlm_server_init(server);",
          "",
          "[Removed Lines]",
          "504:   return -1;",
          "",
          "[Added Lines]",
          "509:   goto fail;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "509:  if (status < 0)",
          "510:  {",
          "511:   printf(\"test_ntlm_server_init failure\\n\");",
          "513:  }",
          "",
          "[Removed Lines]",
          "512:   return -1;",
          "",
          "[Added Lines]",
          "517:   goto fail;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "520:  if (status < 0)",
          "521:  {",
          "522:   printf(\"test_ntlm_client_authenticate failure\\n\");",
          "524:  }",
          "526:  if (!DynamicTest)",
          "",
          "[Removed Lines]",
          "523:   return -1;",
          "",
          "[Added Lines]",
          "528:   goto fail;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "557:   if (!pSecBuffer->pvBuffer)",
          "558:   {",
          "559:    printf(\"Memory allocation failed\\n\");",
          "561:   }",
          "563:   CopyMemory(pSecBuffer->pvBuffer, TEST_NTLM_NEGOTIATE, pSecBuffer->cbBuffer);",
          "",
          "[Removed Lines]",
          "560:    return -1;",
          "",
          "[Added Lines]",
          "565:    goto fail;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "578:  if (status < 0)",
          "579:  {",
          "580:   printf(\"test_ntlm_server_authenticate failure\\n\");",
          "582:  }",
          "584:  if (!DynamicTest)",
          "",
          "[Removed Lines]",
          "581:   return -1;",
          "",
          "[Added Lines]",
          "586:   goto fail;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "616:   if (!pSecBuffer->pvBuffer)",
          "617:   {",
          "618:    printf(\"Memory allocation failed\\n\");",
          "620:   }",
          "622:   CopyMemory(pSecBuffer->pvBuffer, TEST_NTLM_CHALLENGE, pSecBuffer->cbBuffer);",
          "",
          "[Removed Lines]",
          "619:    return -1;",
          "",
          "[Added Lines]",
          "624:    goto fail;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "643:  if (status < 0)",
          "644:  {",
          "645:   printf(\"test_ntlm_client_authenticate failure\\n\");",
          "647:  }",
          "649:  pSecBuffer = &(client->outputBuffer[0]);",
          "",
          "[Removed Lines]",
          "646:   return -1;",
          "",
          "[Added Lines]",
          "651:   goto fail;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "656:   if (!pSecBuffer->pvBuffer)",
          "657:   {",
          "658:    printf(\"Memory allocation failed\\n\");",
          "660:   }",
          "662:   CopyMemory(pSecBuffer->pvBuffer, TEST_NTLM_AUTHENTICATE, pSecBuffer->cbBuffer);",
          "",
          "[Removed Lines]",
          "659:    return -1;",
          "",
          "[Added Lines]",
          "664:    goto fail;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "676:  if (status < 0)",
          "677:  {",
          "678:   printf(\"test_ntlm_server_authenticate failure\\n\");",
          "680:  }",
          "685:  test_ntlm_client_free(client);",
          "686:  test_ntlm_server_free(server);",
          "688: }",
          "",
          "[Removed Lines]",
          "679:   return -1;",
          "687:  return 0;",
          "",
          "[Added Lines]",
          "684:   goto fail;",
          "687:  rc = 0;",
          "689: fail:",
          "695:  return rc;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5cf27e3969d3e89419cbc0c174b67ffbfa881321",
      "candidate_info": {
        "commit_hash": "5cf27e3969d3e89419cbc0c174b67ffbfa881321",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/5cf27e3969d3e89419cbc0c174b67ffbfa881321",
        "files": [
          "libfreerdp/core/info.c"
        ],
        "message": "Rewritten check to satisfy BehaviouralSanitizer\n\n(cherry picked from commit 14829de866b43e7f2740b46f0c736b9adf5067eb)",
        "before_after_code_files": [
          "libfreerdp/core/info.c||libfreerdp/core/info.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/info.c||libfreerdp/core/info.c": [
          "File: libfreerdp/core/info.c -> libfreerdp/core/info.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1142:  if (cbDomain)",
          "1143:  {",
          "1145:   {",
          "1146:    WLog_ERR(TAG, \"protocol error: invalid cbDomain value: %\" PRIu32 \"\", cbDomain);",
          "1147:    goto fail;",
          "",
          "[Removed Lines]",
          "1144:   if ((cbDomain % 2) || cbDomain > 52)",
          "",
          "[Added Lines]",
          "1144:   if ((cbDomain % 2) || (cbDomain > 52))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1156:   ptrconv.bp = Stream_Pointer(s);",
          "1159:   {",
          "1160:    WLog_ERR(TAG, \"protocol error: Domain field must be null terminated\");",
          "1161:    goto fail;",
          "",
          "[Removed Lines]",
          "1158:   if (ptrconv.wp[cbDomain / 2 - 1])",
          "",
          "[Added Lines]",
          "1158:   if (ptrconv.bp[cbDomain - 1] || ptrconv.bp[cbDomain - 2])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3c33c6e1a20601da2f47ac8546f5ab6223a66049",
      "candidate_info": {
        "commit_hash": "3c33c6e1a20601da2f47ac8546f5ab6223a66049",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/3c33c6e1a20601da2f47ac8546f5ab6223a66049",
        "files": [
          "CMakeLists.txt",
          "client/Android/Studio/build.gradle",
          "client/Android/android_freerdp.c",
          "winpr/CMakeLists.txt"
        ],
        "message": "Prepared version for 2.1.1",
        "before_after_code_files": [
          "client/Android/Studio/build.gradle||client/Android/Studio/build.gradle",
          "client/Android/android_freerdp.c||client/Android/android_freerdp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "client/Android/Studio/build.gradle||client/Android/Studio/build.gradle": [
          "File: client/Android/Studio/build.gradle -> client/Android/Studio/build.gradle",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: ext {",
          "31:     versionName = properties.get('VERSION_NAME', getVersionName())",
          "34:     println '----------------- Project configuration -------------------'",
          "35:     println 'VERSION_NAME:       ' + versionName",
          "",
          "[Removed Lines]",
          "32:     versionCode = properties.get('VERSION_CODE', 16)",
          "",
          "[Added Lines]",
          "32:     versionCode = properties.get('VERSION_CODE', 17)",
          "",
          "---------------"
        ],
        "client/Android/android_freerdp.c||client/Android/android_freerdp.c": [
          "File: client/Android/android_freerdp.c -> client/Android/android_freerdp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: #define TAG CLIENT_TAG(\"android\")",
          "61: static void android_OnChannelConnectedEventHandler(void* context, ChannelConnectedEventArgs* e)",
          "62: {",
          "",
          "[Removed Lines]",
          "59: #define FREERDP_JNI_VERSION \"2.1.0\"",
          "",
          "[Added Lines]",
          "59: #define FREERDP_JNI_VERSION \"2.1.1\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "899df25246746373b5585e2f890d1c0be498ff76",
      "candidate_info": {
        "commit_hash": "899df25246746373b5585e2f890d1c0be498ff76",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/899df25246746373b5585e2f890d1c0be498ff76",
        "files": [
          "client/Windows/wf_client.c"
        ],
        "message": "Windows Authentication - Then launced with username argument prefill the name in the authentication box.\n\n(cherry picked from commit 318075676b5ea610b1ba47da600eb418812951cb)",
        "before_after_code_files": [
          "client/Windows/wf_client.c||client/Windows/wf_client.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "client/Windows/wf_client.c||client/Windows/wf_client.c": [
          "File: client/Windows/wf_client.c -> client/Windows/wf_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "438:  fSave = FALSE;",
          "439:  dwFlags = CREDUI_FLAGS_DO_NOT_PERSIST | CREDUI_FLAGS_EXCLUDE_CERTIFICATES;",
          "441:  if (wfc->isConsole)",
          "442:   status = CredUICmdLinePromptForCredentialsA(",
          "443:       title, NULL, 0, UserName, CREDUI_MAX_USERNAME_LENGTH + 1, Password,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "441:  if (username && *username)",
          "442:   strncpy(UserName, *username, CREDUI_MAX_USERNAME_LENGTH);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1a11f129abb1115e622354a963c61bda1841de95",
      "candidate_info": {
        "commit_hash": "1a11f129abb1115e622354a963c61bda1841de95",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/1a11f129abb1115e622354a963c61bda1841de95",
        "files": [
          "libfreerdp/core/info.c"
        ],
        "message": "Fixed unaligned access\n\n(cherry picked from commit cb2ed7f09ad68242bfdfad8967024b063f785d97)",
        "before_after_code_files": [
          "libfreerdp/core/info.c||libfreerdp/core/info.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/info.c||libfreerdp/core/info.c": [
          "File: libfreerdp/core/info.c -> libfreerdp/core/info.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "285:  {",
          "286:   ptrconv.bp = Stream_Pointer(s);",
          "289:   {",
          "290:    WLog_ERR(TAG, \"protocol error: clientAddress must be null terminated\");",
          "291:    return FALSE;",
          "",
          "[Removed Lines]",
          "288:   if (ptrconv.wp[cbClientAddress / 2 - 1])",
          "",
          "[Added Lines]",
          "288:   if ((cbClientAddress < sizeof(WCHAR)) || (ptrconv.bp[cbClientAddress - 1]) ||",
          "289:       (ptrconv.bp[cbClientAddress - 2]))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "334:  {",
          "335:   ptrconv.bp = Stream_Pointer(s);",
          "338:   {",
          "339:    WLog_ERR(TAG, \"protocol error: clientDir must be null terminated\");",
          "340:    return FALSE;",
          "",
          "[Removed Lines]",
          "337:   if (ptrconv.wp[cbClientDir / 2 - 1])",
          "",
          "[Added Lines]",
          "338:   if ((cbClientDir < sizeof(WCHAR)) || (ptrconv.bp[cbClientDir - 1]) ||",
          "339:       (ptrconv.bp[cbClientDir - 2]))",
          "",
          "---------------"
        ]
      }
    }
  ]
}