{
  "cve_id": "CVE-2017-3730",
  "cve_desc": "In OpenSSL 1.1.0 before 1.1.0d, if a malicious server supplies bad parameters for a DHE or ECDHE key exchange then this can result in the client attempting to dereference a NULL pointer leading to a client crash. This could be exploited in a Denial of Service attack.",
  "repo": "openssl/openssl",
  "patch_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
  "patch_info": {
    "commit_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "files": [
      "ssl/statem/statem_clnt.c"
    ],
    "message": "Fix missing NULL checks in CKE processing\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c"
    ]
  },
  "patch_diff": {
    "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
      "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2258:         return 0;",
      "2259:     }",
      "2260:     ckey = ssl_generate_pkey(skey);",
      "2261:     dh_clnt = EVP_PKEY_get0_DH(ckey);",
      "2263:     if (dh_clnt == NULL || ssl_derive(s, ckey, skey) == 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2261:     if (ckey == NULL) {",
      "2262:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_DHE, ERR_R_INTERNAL_ERROR);",
      "2263:         return 0;",
      "2264:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2296:     }",
      "2298:     ckey = ssl_generate_pkey(skey);",
      "2300:     if (ssl_derive(s, ckey, skey) == 0) {",
      "2301:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_EVP_LIB);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2304:     if (ckey == NULL) {",
      "2305:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_INTERNAL_ERROR);",
      "2306:         goto err;",
      "2307:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "38bf0e64f7a06f35edf66968b991222017e41984",
      "candidate_info": {
        "commit_hash": "38bf0e64f7a06f35edf66968b991222017e41984",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/38bf0e64f7a06f35edf66968b991222017e41984",
        "files": [
          "crypto/evp/pmeth_fn.c"
        ],
        "message": "Reformat M_check_autoarg to match our coding style\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2121)\n(cherry picked from commit 2629440d42e4d64cd0cb849c1b19fa87a4fcb90f)",
        "before_after_code_files": [
          "crypto/evp/pmeth_fn.c||crypto/evp/pmeth_fn.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/evp/pmeth_fn.c||crypto/evp/pmeth_fn.c": [
          "File: crypto/evp/pmeth_fn.c -> crypto/evp/pmeth_fn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: #include \"internal/evp_int.h\"",
          "17: #define M_check_autoarg(ctx, arg, arglen, err) \\",
          "38: int EVP_PKEY_sign_init(EVP_PKEY_CTX *ctx)",
          "39: {",
          "",
          "[Removed Lines]",
          "18:         if (ctx->pmeth->flags & EVP_PKEY_FLAG_AUTOARGLEN) \\",
          "19:                 { \\",
          "20:                 size_t pksize = (size_t)EVP_PKEY_size(ctx->pkey); \\",
          "21:                 if (pksize == 0) \\",
          "22:                         { \\",
          "23:                         EVPerr(err, EVP_R_INVALID_KEY); /*ckerr_ignore*/\\",
          "24:                         return 0; \\",
          "25:                         } \\",
          "26:                 else if (!arg)                 \\",
          "27:                         { \\",
          "29:                         return 1; \\",
          "30:                         } \\",
          "31:                 else if (*arglen < pksize) \\",
          "32:                         { \\",
          "33:                         EVPerr(err, EVP_R_BUFFER_TOO_SMALL); /*ckerr_ignore*/\\",
          "34:                         return 0; \\",
          "35:                         } \\",
          "36:                 }",
          "",
          "[Added Lines]",
          "18:     if (ctx->pmeth->flags & EVP_PKEY_FLAG_AUTOARGLEN) {           \\",
          "19:         size_t pksize = (size_t)EVP_PKEY_size(ctx->pkey);         \\",
          "20:                                                                   \\",
          "21:         if (pksize == 0) {                                        \\",
          "22:             EVPerr(err, EVP_R_INVALID_KEY); /*ckerr_ignore*/      \\",
          "23:             return 0;                                             \\",
          "24:         }                                                         \\",
          "25:         if (!arg) {                                               \\",
          "27:             return 1;                                             \\",
          "28:         }                                                         \\",
          "29:         if (*arglen < pksize) {                                   \\",
          "30:             EVPerr(err, EVP_R_BUFFER_TOO_SMALL); /*ckerr_ignore*/ \\",
          "31:             return 0;                                             \\",
          "32:         }                                                         \\",
          "33:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a2a5d26cea54f490474a366100cf4860a54e030",
      "candidate_info": {
        "commit_hash": "0a2a5d26cea54f490474a366100cf4860a54e030",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/0a2a5d26cea54f490474a366100cf4860a54e030",
        "files": [
          "test/evp_test.c"
        ],
        "message": "Skipping tests in evp_test leaks memory\n\nWhen configured with \"no-mdc2 enable-crypto-mdebug\" the evp_test\nwill leak memory due to skipped tests, and error out.\n\nAlso fix a skip condition\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1946)",
        "before_after_code_files": [
          "test/evp_test.c||test/evp_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/evp_test.c||test/evp_test.c": [
          "File: test/evp_test.c -> test/evp_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "351:     if (t->meth) {",
          "352:         t->ntests++;",
          "353:         if (t->skip) {",
          "355:             t->nskip++;",
          "368:         }",
          "369:         ERR_clear_error();",
          "373:         OPENSSL_free(t->expected_err);",
          "374:         t->expected_err = NULL;",
          "375:         free_expected(t);",
          "",
          "[Removed Lines]",
          "354:             t->meth = tmeth;",
          "356:             return 1;",
          "357:         }",
          "358:         t->err = NULL;",
          "359:         if (t->meth->run_test(t) != 1) {",
          "360:             fprintf(stderr, \"%s test error line %d\\n\",",
          "361:                     t->meth->name, t->start_line);",
          "362:             return 0;",
          "363:         }",
          "364:         if (!check_test_error(t)) {",
          "365:             if (t->err)",
          "366:                 ERR_print_errors_fp(stderr);",
          "367:             t->errors++;",
          "370:         t->meth->cleanup(t);",
          "371:         OPENSSL_free(t->data);",
          "372:         t->data = NULL;",
          "",
          "[Added Lines]",
          "355:         } else {",
          "357:             t->err = NULL;",
          "358:             if (t->meth->run_test(t) != 1) {",
          "359:                 fprintf(stderr, \"%s test error line %d\\n\",",
          "360:                         t->meth->name, t->start_line);",
          "361:                 return 0;",
          "362:             }",
          "363:             if (!check_test_error(t)) {",
          "364:                 if (t->err)",
          "365:                     ERR_print_errors_fp(stderr);",
          "366:                 t->errors++;",
          "367:             }",
          "371:         if (t->data != NULL) {",
          "372:             t->meth->cleanup(t);",
          "373:             OPENSSL_free(t->data);",
          "374:             t->data = NULL;",
          "375:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1212:         rv = find_key(&pkey, name, t->public);",
          "1213:     if (!rv)",
          "1214:         rv = find_key(&pkey, name, t->private);",
          "1218:         t->skip = 1;",
          "1219:         return 1;",
          "1220:     }",
          "",
          "[Removed Lines]",
          "1215:     if (!rv)",
          "1216:         return 0;",
          "1217:     if (!pkey) {",
          "",
          "[Added Lines]",
          "1218:     if (!rv || pkey == NULL) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7bd011d70e85b2fff2928e30adf6965d34af9f04",
      "candidate_info": {
        "commit_hash": "7bd011d70e85b2fff2928e30adf6965d34af9f04",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/7bd011d70e85b2fff2928e30adf6965d34af9f04",
        "files": [
          "ssl/s3_enc.c"
        ],
        "message": "fix a memory leak in ssl3_generate_key_block fix the error handling in ssl3_change_cipher_state\n\nReviewed-by: Kurt Roeckx <kurt@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2164)\n(cherry picked from commit a6fd7c1dbef2c3da3c87f1582ae48e4c29aa303c)",
        "before_after_code_files": [
          "ssl/s3_enc.c||ssl/s3_enc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/s3_enc.c||ssl/s3_enc.c": [
          "File: ssl/s3_enc.c -> ssl/s3_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:     EVP_MD_CTX_set_flags(m5, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);",
          "62:     for (i = 0; (int)i < num; i += MD5_DIGEST_LENGTH) {",
          "63:         k++;",
          "66:             SSLerr(SSL_F_SSL3_GENERATE_KEY_BLOCK, ERR_R_INTERNAL_ERROR);",
          "68:         }",
          "70:         for (j = 0; j < k; j++)",
          "",
          "[Removed Lines]",
          "64:         if (k > sizeof buf) {",
          "67:             return 0;",
          "",
          "[Added Lines]",
          "64:         if (k > sizeof(buf)) {",
          "67:             goto err;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "226:     memcpy(mac_secret, ms, i);",
          "230: #ifdef OPENSSL_SSL_TRACE_CRYPTO",
          "231:     if (s->msg_callback) {",
          "",
          "[Removed Lines]",
          "228:     EVP_CipherInit_ex(dd, c, NULL, key, iv, (which & SSL3_CC_WRITE));",
          "",
          "[Added Lines]",
          "228:     if (!EVP_CipherInit_ex(dd, c, NULL, key, iv, (which & SSL3_CC_WRITE)))",
          "229:         goto err2;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dc4667333bf5b712aa3c17b9713a6dda32d5feb1",
      "candidate_info": {
        "commit_hash": "dc4667333bf5b712aa3c17b9713a6dda32d5feb1",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/dc4667333bf5b712aa3c17b9713a6dda32d5feb1",
        "files": [
          "ssl/record/rec_layer_s3.c"
        ],
        "message": "Mark a HelloRequest record as read if we ignore it\n\nOtherwise the client will try to process it again. The second time around\nit will try and move the record data into handshake fragment storage and\nrealise that there is no data left. At that point it marks it as read\nanyway. However, it is a bug that we go around the loop a second time, so\nwe prevent that.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2200)\n(cherry picked from commit 290a0419f0c13a30fb3a1d1a279125c8aeafd17e)",
        "before_after_code_files": [
          "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
          "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1297:                         return (-1);",
          "1298:                     }",
          "1299:                 }",
          "1300:             }",
          "1301:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1300:             } else {",
          "1301:                 SSL3_RECORD_set_read(rr);",
          "1303:         } else {",
          "1305:             SSL3_RECORD_set_read(rr);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4b684b54d6418727372200557b0386729e2ee8e5",
      "candidate_info": {
        "commit_hash": "4b684b54d6418727372200557b0386729e2ee8e5",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/4b684b54d6418727372200557b0386729e2ee8e5",
        "files": [
          "util/TLSProxy/Proxy.pm"
        ],
        "message": "Support renegotiation in TLSProxy\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1983)",
        "before_after_code_files": [
          "util/TLSProxy/Proxy.pm||util/TLSProxy/Proxy.pm"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "util/TLSProxy/Proxy.pm||util/TLSProxy/Proxy.pm": [
          "File: util/TLSProxy/Proxy.pm -> util/TLSProxy/Proxy.pm",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:         clientflags => \"\",",
          "43:         serverconnects => 1,",
          "44:         serverpid => 0,",
          "46:         #Public read",
          "47:         execute => $execute,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:         reneg => 0,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117:     $self->{serverflags} = \"\";",
          "118:     $self->{serverconnects} = 1;",
          "119:     $self->{serverpid} = 0;",
          "120: }",
          "122: sub restart",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:     $self->{reneg} = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "200:                     or die \"Failed to redirect stdout: $!\";",
          "201:                 open(STDERR, \">&STDOUT\");",
          "202:             }",
          "204:                  .\" s_client -engine ossltest -connect \"",
          "205:                  .($self->proxy_addr).\":\".($self->proxy_port);",
          "206:             if ($self->cipherc ne \"\") {",
          "",
          "[Removed Lines]",
          "203:             my $execcmd = \"echo test | \".$self->execute",
          "",
          "[Added Lines]",
          "205:             my $echostr;",
          "206:             if ($self->reneg()) {",
          "207:                 $echostr = \"R\";",
          "208:             } else {",
          "209:                 $echostr = \"test\";",
          "210:             }",
          "211:             my $execcmd = \"echo \".$echostr.\" | \".$self->execute",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "505:     return $ret;",
          "506: }",
          "508: 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "516: sub reneg",
          "517: {",
          "518:     my $self = shift;",
          "519:     if (@_) {",
          "520:       $self->{reneg} = shift;",
          "521:     }",
          "522:     return $self->{reneg};",
          "523: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}