{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7b3fb22290c3b6acb497ca85cf2f1648d75c8154",
      "candidate_info": {
        "commit_hash": "7b3fb22290c3b6acb497ca85cf2f1648d75c8154",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/7b3fb22290c3b6acb497ca85cf2f1648d75c8154",
        "files": [
          "src/node_http_parser.cc"
        ],
        "message": "typo in node_http_parser",
        "before_after_code_files": [
          "src/node_http_parser.cc||src/node_http_parser.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "src/node_http_parser.cc||src/node_http_parser.cc"
          ],
          "candidate": [
            "src/node_http_parser.cc||src/node_http_parser.cc"
          ]
        }
      },
      "candidate_diff": {
        "src/node_http_parser.cc||src/node_http_parser.cc": [
          "File: src/node_http_parser.cc -> src/node_http_parser.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:   void Update(const char* str, size_t size) {",
          "149:     if (str_ == NULL)",
          "150:       str_ = str;",
          "154:       char* s = new char[size_ + size];",
          "",
          "[Removed Lines]",
          "151:     else if (on_heap_ || str_ + size != str) {",
          "",
          "[Added Lines]",
          "151:     else if (on_heap_ || str_ + size_ != str) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c231321cd379ce3068d51b803322a54ed6dc0982",
      "candidate_info": {
        "commit_hash": "c231321cd379ce3068d51b803322a54ed6dc0982",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/c231321cd379ce3068d51b803322a54ed6dc0982",
        "files": [
          "deps/v8/src/objects.cc",
          "deps/v8/test/mjsunit/compare-known-objects-slow.js"
        ],
        "message": "Fix assertion for map code cache of shared maps.\n\nR=danno@chromium.org\nTEST=mjsunit/compare-known-objects-slow\n\nReview URL: https://chromiumcodereview.appspot.com/10548046\n\ngit-svn-id: https://v8.googlecode.com/svn/branches/bleeding_edge@11815 ce2b1a6d-e550-0410-aec6-3dcde31c8c00",
        "before_after_code_files": [
          "deps/v8/src/objects.cc||deps/v8/src/objects.cc",
          "deps/v8/test/mjsunit/compare-known-objects-slow.js||deps/v8/test/mjsunit/compare-known-objects-slow.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/v8/src/objects.cc||deps/v8/src/objects.cc": [
          "File: deps/v8/src/objects.cc -> deps/v8/src/objects.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "8281: bool Code::allowed_in_shared_map_code_cache() {",
          "8283: }",
          "",
          "[Removed Lines]",
          "8282:   return is_keyed_load_stub() || is_keyed_store_stub();",
          "",
          "[Added Lines]",
          "8282:   return is_keyed_load_stub() || is_keyed_store_stub() ||",
          "8283:       (is_compare_ic_stub() && compare_state() == CompareIC::KNOWN_OBJECTS);",
          "",
          "---------------"
        ],
        "deps/v8/test/mjsunit/compare-known-objects-slow.js||deps/v8/test/mjsunit/compare-known-objects-slow.js": [
          "File: deps/v8/test/mjsunit/compare-known-objects-slow.js -> deps/v8/test/mjsunit/compare-known-objects-slow.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: function eq(a, b) {",
          "35:   return a == b;",
          "36: }",
          "38: function eq_strict(a, b) {",
          "39:   return a === b;",
          "40: }",
          "42: function test(a, b) {",
          "44:   assertTrue(eq(a, a));",
          "45:   assertTrue(eq(b, b));",
          "46:   assertFalse(eq(a, b));",
          "48:   assertTrue(eq_strict(a, a));",
          "49:   assertTrue(eq_strict(b, b));",
          "50:   assertFalse(eq_strict(a, b));",
          "51: }",
          "54: var obj1 = %OptimizeObjectForAddingMultipleProperties({}, 1);",
          "55: var obj2 = %OptimizeObjectForAddingMultipleProperties({}, 1);",
          "58: assertTrue(%HaveSameMap(obj1, obj2));",
          "59: test(obj1, obj2);",
          "62: obj1.x = 1;",
          "63: assertTrue(%HaveSameMap(obj1, obj2));",
          "64: test(obj1, obj2);",
          "67: obj2.y = 2;",
          "68: assertTrue(%HaveSameMap(obj1, obj2));",
          "69: test(obj1, obj2);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e5bb8391a84f62de2e7a818c142fbb2ad01ff9ba",
      "candidate_info": {
        "commit_hash": "e5bb8391a84f62de2e7a818c142fbb2ad01ff9ba",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/e5bb8391a84f62de2e7a818c142fbb2ad01ff9ba",
        "files": [
          "lib/net.js"
        ],
        "message": "Do not assign to properties that only have getters\n\nIt is an error in strict mode, and silent failure otherwise.",
        "before_after_code_files": [
          "lib/net.js||linet.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/net.js||linet.js": [
          "File: lib/net.js -> linet.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "614: function connect(self, address, port, addressType, localAddress) {",
          "",
          "[Removed Lines]",
          "615:   if (port) {",
          "616:     self.remotePort = port;",
          "617:   }",
          "618:   self.remoteAddress = address;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "70033bd96098fd230fcb45287f4664115bc0ec63",
      "candidate_info": {
        "commit_hash": "70033bd96098fd230fcb45287f4664115bc0ec63",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/70033bd96098fd230fcb45287f4664115bc0ec63",
        "files": [
          "doc/api/net.markdown",
          "lib/net.js",
          "test/simple/test-net-connect-options.js"
        ],
        "message": "net: make connect() accept options\n\nThis makes API even with tls.connect().\nRefs #1983.\n\nSee also:\nhttp://groups.google.com/group/nodejs-dev/msg/3b6dbcc4a9a82d99\n\nFixes #2487.",
        "before_after_code_files": [
          "lib/net.js||linet.js",
          "test/simple/test-net-connect-options.js||test/simple/test-net-connect-options.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/net.js||linet.js": [
          "File: lib/net.js -> linet.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "65: };",
          "73:   } else {",
          "75:   }",
          "81: function initSocketHandle(self) {",
          "",
          "[Removed Lines]",
          "68: exports.connect = exports.createConnection = function(port /* [host], [cb] */) {",
          "69:   var s;",
          "71:   if (isPipeName(port)) {",
          "72:     s = new Socket({ handle: createPipe() });",
          "74:     s = new Socket();",
          "77:   return s.connect(port, arguments[1], arguments[2]);",
          "78: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "525: }",
          "533:   if (this.destroyed || !this._handle) {",
          "534:     this._handle = pipe ? createPipe() : createTCP();",
          "535:     initSocketHandle(this);",
          "536:   }",
          "546:   }",
          "548:   timers.active(this);",
          "",
          "[Removed Lines]",
          "528: Socket.prototype.connect = function(port /* [host], [cb] */) {",
          "529:   var self = this;",
          "531:   var pipe = isPipeName(port);",
          "538:   var host;",
          "539:   if (typeof arguments[1] === 'function') {",
          "540:     self.on('connect', arguments[1]);",
          "541:   } else {",
          "542:     host = arguments[1];",
          "543:     if (typeof arguments[2] === 'function') {",
          "544:       self.on('connect', arguments[2]);",
          "545:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "551:   self.writable = true;",
          "553:   if (pipe) {",
          "557:     debug('connect: find host ' + host);",
          "558:     require('dns').lookup(host, function(err, ip, addressType) {",
          "",
          "[Removed Lines]",
          "554:     connect(self, /*pipe_name=*/port);",
          "556:   } else if (typeof host == 'string') {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "579:         ip = ip || (addressType === 4 ? '127.0.0.1' : '0:0:0:0:0:0:0:1');",
          "582:       }",
          "583:     });",
          "588:   }",
          "589:   return self;",
          "590: };",
          "",
          "[Removed Lines]",
          "581:         connect(self, ip, port, addressType);",
          "585:   } else {",
          "586:     debug('connect: missing host');",
          "587:     connect(self, '127.0.0.1', port, 4);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-net-connect-options.js||test/simple/test-net-connect-options.js": [
          "File: test/simple/test-net-connect-options.js -> test/simple/test-net-connect-options.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var net = require('net');",
          "26: var serverGotEnd = false;",
          "27: var clientGotEnd = false;",
          "29: var server = net.createServer({allowHalfOpen: true}, function(socket) {",
          "30:   socket.on('end', function() {",
          "31:     serverGotEnd = true;",
          "32:   });",
          "33:   socket.end();",
          "34: });",
          "36: server.listen(common.PORT, function() {",
          "37:   var client = net.connect({",
          "38:     host: '127.0.0.1',",
          "39:     port: common.PORT,",
          "40:     allowHalfOpen: true",
          "41:   }, function() {",
          "42:     client.on('end', function() {",
          "43:       clientGotEnd = true;",
          "44:       setTimeout(function() {",
          "45:         assert(client.writable);",
          "46:         client.end();",
          "47:       }, 10);",
          "48:     });",
          "49:     client.on('close', function() {",
          "50:       server.close();",
          "51:     });",
          "52:   });",
          "53: });",
          "55: process.on('exit', function() {",
          "56:   assert(serverGotEnd);",
          "57:   assert(clientGotEnd);",
          "58: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8b2abed03df9bc16b37d1ac21bfc68b36dfa9f47",
      "candidate_info": {
        "commit_hash": "8b2abed03df9bc16b37d1ac21bfc68b36dfa9f47",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/8b2abed03df9bc16b37d1ac21bfc68b36dfa9f47",
        "files": [
          "benchmark/http_simple.js"
        ],
        "message": "bench: add /echo endpoint to http_simple\n\nCopies the POST request data verbatim into the response body.",
        "before_after_code_files": [
          "benchmark/http_simple.js||benchmark/http_simple.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "benchmark/http_simple.js||benchmark/http_simple.js": [
          "File: benchmark/http_simple.js -> benchmark/http_simple.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:   } else if (command == \"fixed\") {",
          "55:     body = fixed;",
          "57:   } else {",
          "58:     status = 404;",
          "59:     body = \"not found\\n\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:   } else if (command == \"echo\") {",
          "58:     res.writeHead(200, { \"Content-Type\": \"text/plain\",",
          "59:                          \"Transfer-Encoding\": \"chunked\" });",
          "60:     req.pipe(res);",
          "61:     return;",
          "",
          "---------------"
        ]
      }
    }
  ]
}