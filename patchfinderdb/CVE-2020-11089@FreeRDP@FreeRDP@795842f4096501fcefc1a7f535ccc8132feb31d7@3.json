{
  "cve_id": "CVE-2020-11089",
  "cve_desc": "In FreeRDP before 2.1.0, there is an out-of-bound read in irp functions (parallel_process_irp_create, serial_process_irp_create, drive_process_irp_write, printer_process_irp_write, rdpei_recv_pdu, serial_process_irp_write). This has been fixed in 2.1.0.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "795842f4096501fcefc1a7f535ccc8132feb31d7",
  "patch_info": {
    "commit_hash": "795842f4096501fcefc1a7f535ccc8132feb31d7",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/795842f4096501fcefc1a7f535ccc8132feb31d7",
    "files": [
      "channels/parallel/client/parallel_main.c"
    ],
    "message": "Fixed oob read in parallel_process_irp_create",
    "before_after_code_files": [
      "channels/parallel/client/parallel_main.c||channels/parallel/client/parallel_main.c"
    ]
  },
  "patch_diff": {
    "channels/parallel/client/parallel_main.c||channels/parallel/client/parallel_main.c": [
      "File: channels/parallel/client/parallel_main.c -> channels/parallel/client/parallel_main.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "83: {",
      "84:  char* path = NULL;",
      "85:  int status;",
      "86:  UINT32 PathLength;",
      "90:  Stream_Read_UINT32(irp->input, PathLength);",
      "94:  if (status < 1)",
      "95:   if (!(path = (char*)calloc(1, 1)))",
      "",
      "[Removed Lines]",
      "87:  Stream_Seek(irp->input, 28);",
      "91:  status = ConvertFromUnicode(CP_UTF8, 0, (WCHAR*)Stream_Pointer(irp->input), PathLength / 2,",
      "92:                              &path, 0, NULL, NULL);",
      "",
      "[Added Lines]",
      "86:  WCHAR* ptr;",
      "88:  if (!Stream_SafeSeek(irp->input, 28))",
      "89:   return ERROR_INVALID_DATA;",
      "92:  if (Stream_GetRemainingLength(irp->input) < 4)",
      "93:   return ERROR_INVALID_DATA;",
      "95:  ptr = (WCHAR*)Stream_Pointer(irp->input);",
      "96:  if (!Stream_SafeSeek(irp->input, PathLength))",
      "97:   return ERROR_INVALID_DATA;",
      "98:  status = ConvertFromUnicode(CP_UTF8, 0, ptr, PathLength / 2, &path, 0, NULL, NULL);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0332cad015fdf7fac7e5c6863484f18a554e0fcf",
      "candidate_info": {
        "commit_hash": "0332cad015fdf7fac7e5c6863484f18a554e0fcf",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/0332cad015fdf7fac7e5c6863484f18a554e0fcf",
        "files": [
          "libfreerdp/core/update.c"
        ],
        "message": "Fixed oob read in update_recv\n\nproperly use update_type_to_string to print update type.\nThanks to hac425 CVE-2020-11019",
        "before_after_code_files": [
          "libfreerdp/core/update.c||libfreerdp/core/update.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/update.c||libfreerdp/core/update.c": [
          "File: libfreerdp/core/update.c -> libfreerdp/core/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "774:  }",
          "779:  if (!update_begin_paint(update))",
          "780:   goto fail;",
          "",
          "[Removed Lines]",
          "777:  WLog_Print(update->log, WLOG_TRACE, \"%s Update Data PDU\", UPDATE_TYPE_STRINGS[updateType]);",
          "",
          "[Added Lines]",
          "777:  WLog_Print(update->log, WLOG_TRACE, \"%s Update Data PDU\", update_type_to_string(updateType));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8e1a1b407565eb0a48923c796f5b1f69167b3c48",
      "candidate_info": {
        "commit_hash": "8e1a1b407565eb0a48923c796f5b1f69167b3c48",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/8e1a1b407565eb0a48923c796f5b1f69167b3c48",
        "files": [
          "channels/cliprdr/server/cliprdr_main.c"
        ],
        "message": "Fixed cliprdr_server_receive_capabilities\n\nThanks to hac425 CVE-2020-11017, CVE-2020-11018",
        "before_after_code_files": [
          "channels/cliprdr/server/cliprdr_main.c||channels/cliprdr/server/cliprdr_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/cliprdr/server/cliprdr_main.c||channels/cliprdr/server/cliprdr_main.c": [
          "File: channels/cliprdr/server/cliprdr_main.c -> channels/cliprdr/server/cliprdr_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "432: static UINT cliprdr_server_receive_general_capability(CliprdrServerContext* context, wStream* s,",
          "433:                                                       CLIPRDR_GENERAL_CAPABILITY_SET* cap_set)",
          "434: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "435:  if (Stream_GetRemainingLength(s) < 8)",
          "436:   return ERROR_INVALID_DATA;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "464:  UINT16 index;",
          "465:  UINT16 capabilitySetType;",
          "466:  UINT16 capabilitySetLength;",
          "468:  size_t cap_sets_size = 0;",
          "470:  CLIPRDR_CAPABILITY_SET* capSet;",
          "473:  WINPR_UNUSED(header);",
          "478:  WLog_DBG(TAG, \"CliprdrClientCapabilities\");",
          "482:  for (index = 0; index < capabilities.cCapabilitiesSets; index++)",
          "483:  {",
          "487:   cap_sets_size += capabilitySetLength;",
          "490:   if (tmp == NULL)",
          "491:   {",
          "492:    WLog_ERR(TAG, \"capabilities.capabilitySets realloc failed!\");",
          "",
          "[Removed Lines]",
          "467:  UINT error = CHANNEL_RC_OK;",
          "469:  CLIPRDR_CAPABILITIES capabilities;",
          "471:  void* tmp;",
          "476:  capabilities.capabilitySets = NULL;",
          "489:   tmp = realloc(capabilities.capabilitySets, cap_sets_size);",
          "",
          "[Added Lines]",
          "470:  UINT error = ERROR_INVALID_DATA;",
          "472:  CLIPRDR_CAPABILITIES capabilities = { 0 };",
          "479:  if (Stream_GetRemainingLength(s) < 4)",
          "480:   return ERROR_INVALID_DATA;",
          "487:   void* tmp = NULL;",
          "488:   if (Stream_GetRemainingLength(s) < 4)",
          "489:    goto out;",
          "495:   if (cap_sets_size > 0)",
          "496:    tmp = realloc(capabilities.capabilitySets, cap_sets_size);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "504:   switch (capSet->capabilitySetType)",
          "505:   {",
          "506:    case CB_CAPSTYPE_GENERAL:",
          "509:     {",
          "510:      WLog_ERR(TAG,",
          "511:               \"cliprdr_server_receive_general_capability failed with error %\" PRIu32",
          "",
          "[Removed Lines]",
          "507:     if ((error = cliprdr_server_receive_general_capability(",
          "508:              context, s, (CLIPRDR_GENERAL_CAPABILITY_SET*)capSet)))",
          "",
          "[Added Lines]",
          "514:     error = cliprdr_server_receive_general_capability(",
          "515:         context, s, (CLIPRDR_GENERAL_CAPABILITY_SET*)capSet);",
          "516:     if (error)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "518:    default:",
          "519:     WLog_ERR(TAG, \"unknown cliprdr capability set: %\" PRIu16 \"\",",
          "520:              capSet->capabilitySetType);",
          "522:     goto out;",
          "523:   }",
          "524:  }",
          "526:  IFCALLRET(context->ClientCapabilities, error, context, &capabilities);",
          "527: out:",
          "528:  free(capabilities.capabilitySets);",
          "",
          "[Removed Lines]",
          "521:     error = ERROR_INVALID_DATA;",
          "",
          "[Added Lines]",
          "533:  error = CHANNEL_RC_OK;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3a06ce058f690b7fc1edad2f352c453376c2ebfe",
      "candidate_info": {
        "commit_hash": "3a06ce058f690b7fc1edad2f352c453376c2ebfe",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/3a06ce058f690b7fc1edad2f352c453376c2ebfe",
        "files": [
          "libfreerdp/codec/rfx.c"
        ],
        "message": "Fixed oob read in rfx_process_message_tileset\n\nCheck input data length\nThanks to hac425 CVE-2020-11043",
        "before_after_code_files": [
          "libfreerdp/codec/rfx.c||libfreerdp/codec/rfx.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/codec/rfx.c||libfreerdp/codec/rfx.c": [
          "File: libfreerdp/codec/rfx.c -> libfreerdp/codec/rfx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "752: {",
          "753:  BOOL rc;",
          "754:  int i, close_cnt;",
          "756:  BYTE quant;",
          "757:  RFX_TILE* tile;",
          "758:  RFX_TILE** tmpTiles;",
          "",
          "[Removed Lines]",
          "755:  size_t pos;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "886:  for (i = 0; i < message->numTiles; i++)",
          "887:  {",
          "888:   if (!(tile = (RFX_TILE*)ObjectPool_Take(context->priv->TilePool)))",
          "889:   {",
          "890:    WLog_ERR(TAG, \"RfxMessageTileSet failed to get tile from object pool\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "887:   wStream sub;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "903:    break;",
          "904:   }",
          "911:   {",
          "912:    WLog_ERR(TAG,",
          "913:             \"RfxMessageTileSet not enough bytes to read tile %d/%\" PRIu16",
          "",
          "[Removed Lines]",
          "906:   Stream_Read_UINT16(s,",
          "910:   if (Stream_GetRemainingLength(s) < blockLen - 6)",
          "",
          "[Added Lines]",
          "906:   Stream_StaticInit(&sub, Stream_Pointer(s), Stream_GetRemainingLength(s));",
          "907:   Stream_Read_UINT16(&sub,",
          "911:   if (!Stream_SafeSeek(s, blockLen))",
          "912:   {",
          "913:    rc = FALSE;",
          "914:    break;",
          "915:   }",
          "916:   if ((blockLen < 6 + 13) || (Stream_GetRemainingLength(&sub) < blockLen - 6))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "917:    break;",
          "918:   }",
          "922:   if (blockType != CBT_TILE)",
          "923:   {",
          "924:    WLog_ERR(TAG, \"unknown block type 0x%\" PRIX32 \", expected CBT_TILE (0xCAC3).\",",
          "",
          "[Removed Lines]",
          "920:   pos = Stream_GetPosition(s) - 6 + blockLen;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "927:    break;",
          "928:   }",
          "944:   tile->x = tile->xIdx * 64;",
          "945:   tile->y = tile->yIdx * 64;",
          "",
          "[Removed Lines]",
          "938:   Stream_GetPointer(s, tile->YData);",
          "939:   Stream_Seek(s, tile->YLen);",
          "940:   Stream_GetPointer(s, tile->CbData);",
          "941:   Stream_Seek(s, tile->CbLen);",
          "942:   Stream_GetPointer(s, tile->CrData);",
          "943:   Stream_Seek(s, tile->CrLen);",
          "",
          "[Added Lines]",
          "942:   Stream_GetPointer(&sub, tile->YData);",
          "943:   if (!Stream_SafeSeek(&sub, tile->YLen))",
          "944:   {",
          "945:    rc = FALSE;",
          "946:    break;",
          "947:   }",
          "948:   Stream_GetPointer(&sub, tile->CbData);",
          "949:   if (!Stream_SafeSeek(&sub, tile->CbLen))",
          "950:   {",
          "951:    rc = FALSE;",
          "952:    break;",
          "953:   }",
          "954:   Stream_GetPointer(&sub, tile->CrData);",
          "955:   if (!Stream_SafeSeek(&sub, tile->CrLen))",
          "956:   {",
          "957:    rc = FALSE;",
          "958:    break;",
          "959:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "971:   {",
          "972:    rfx_decode_rgb(context, tile, tile->data, 64 * 4);",
          "973:   }",
          "976:  }",
          "978:  if (context->priv->UseThreads)",
          "",
          "[Removed Lines]",
          "975:   Stream_SetPosition(s, pos);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8241ab42fdf0cc89cf69fc574bf6360c9977a0d4",
      "candidate_info": {
        "commit_hash": "8241ab42fdf0cc89cf69fc574bf6360c9977a0d4",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/8241ab42fdf0cc89cf69fc574bf6360c9977a0d4",
        "files": [
          "winpr/libwinpr/sspi/NTLM/ntlm_message.c"
        ],
        "message": "Fixed oob read in ntlm_read_AuthenticateMessage",
        "before_after_code_files": [
          "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c": [
          "File: winpr/libwinpr/sspi/NTLM/ntlm_message.c -> winpr/libwinpr/sspi/NTLM/ntlm_message.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "682: SECURITY_STATUS ntlm_read_AuthenticateMessage(NTLM_CONTEXT* context, PSecBuffer buffer)",
          "683: {",
          "684:  wStream* s;",
          "685:  size_t length;",
          "688:  UINT32 PayloadBufferOffset;",
          "689:  NTLM_AUTHENTICATE_MESSAGE* message;",
          "690:  SSPI_CREDENTIALS* credentials = context->credentials;",
          "693:  message = &context->AUTHENTICATE_MESSAGE;",
          "694:  ZeroMemory(message, sizeof(NTLM_AUTHENTICATE_MESSAGE));",
          "695:  s = Stream_New((BYTE*)buffer->pvBuffer, buffer->cbBuffer);",
          "",
          "[Removed Lines]",
          "686:  UINT32 flags;",
          "687:  NTLM_AV_PAIR* AvFlags;",
          "691:  flags = 0;",
          "692:  AvFlags = NULL;",
          "",
          "[Added Lines]",
          "684:  SECURITY_STATUS status = SEC_E_INVALID_TOKEN;",
          "687:  UINT32 flags = 0;",
          "688:  NTLM_AV_PAIR* AvFlags = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "698:   return SEC_E_INTERNAL_ERROR;",
          "700:  if (ntlm_read_message_header(s, (NTLM_MESSAGE_HEADER*)message) < 0)",
          "706:  if (message->MessageType != MESSAGE_TYPE_AUTHENTICATE)",
          "712:  if (ntlm_read_message_fields(s, &(message->LmChallengeResponse)) <",
          "719:  if (ntlm_read_message_fields(s, &(message->NtChallengeResponse)) <",
          "744:  if (ntlm_read_message_fields(s, &(message->EncryptedRandomSessionKey)) <",
          "752:  context->NegotiateKeyExchange =",
          "753:      (message->NegotiateFlags & NTLMSSP_NEGOTIATE_KEY_EXCH) ? TRUE : FALSE;",
          "755:  if ((context->NegotiateKeyExchange && !message->EncryptedRandomSessionKey.Len) ||",
          "756:      (!context->NegotiateKeyExchange && message->EncryptedRandomSessionKey.Len))",
          "762:  if (message->NegotiateFlags & NTLMSSP_NEGOTIATE_VERSION)",
          "763:  {",
          "769:  }",
          "771:  PayloadBufferOffset = Stream_GetPosition(s);",
          "791:  if (ntlm_read_message_fields_buffer(s, &(message->LmChallengeResponse)) <",
          "798:  if (ntlm_read_message_fields_buffer(s, &(message->NtChallengeResponse)) <",
          "805:  if (message->NtChallengeResponse.Len > 0)",
          "806:  {",
          "807:   size_t cbAvFlags;",
          "808:   wStream* snt =",
          "809:       Stream_New(message->NtChallengeResponse.Buffer, message->NtChallengeResponse.Len);",
          "811:   if (!snt)",
          "824:   Stream_Free(snt, FALSE);",
          "825:   context->NtChallengeResponse.pvBuffer = message->NtChallengeResponse.Buffer;",
          "826:   context->NtChallengeResponse.cbBuffer = message->NtChallengeResponse.Len;",
          "827:   sspi_SecBufferFree(&(context->ChallengeTargetInfo));",
          "",
          "[Removed Lines]",
          "701:  {",
          "702:   Stream_Free(s, FALSE);",
          "703:   return SEC_E_INVALID_TOKEN;",
          "704:  }",
          "707:  {",
          "708:   Stream_Free(s, FALSE);",
          "709:   return SEC_E_INVALID_TOKEN;",
          "710:  }",
          "714:  {",
          "715:   Stream_Free(s, FALSE);",
          "716:   return SEC_E_INVALID_TOKEN;",
          "717:  }",
          "721:  {",
          "722:   Stream_Free(s, FALSE);",
          "723:   return SEC_E_INVALID_TOKEN;",
          "724:  }",
          "727:  {",
          "728:   Stream_Free(s, FALSE);",
          "729:   return SEC_E_INVALID_TOKEN;",
          "730:  }",
          "733:  {",
          "734:   Stream_Free(s, FALSE);",
          "735:   return SEC_E_INVALID_TOKEN;",
          "736:  }",
          "739:  {",
          "740:   Stream_Free(s, FALSE);",
          "741:   return SEC_E_INVALID_TOKEN;",
          "742:  }",
          "746:  {",
          "747:   Stream_Free(s, FALSE);",
          "748:   return SEC_E_INVALID_TOKEN;",
          "749:  }",
          "757:  {",
          "758:   Stream_Free(s, FALSE);",
          "759:   return SEC_E_INVALID_TOKEN;",
          "760:  }",
          "765:   {",
          "766:    Stream_Free(s, FALSE);",
          "767:    return SEC_E_INVALID_TOKEN;",
          "768:   }",
          "774:  {",
          "775:   Stream_Free(s, FALSE);",
          "776:   return SEC_E_INTERNAL_ERROR;",
          "777:  }",
          "780:  {",
          "781:   Stream_Free(s, FALSE);",
          "782:   return SEC_E_INTERNAL_ERROR;",
          "783:  }",
          "786:  {",
          "787:   Stream_Free(s, FALSE);",
          "788:   return SEC_E_INTERNAL_ERROR;",
          "789:  }",
          "793:  {",
          "794:   Stream_Free(s, FALSE);",
          "795:   return SEC_E_INTERNAL_ERROR;",
          "796:  }",
          "800:  {",
          "801:   Stream_Free(s, FALSE);",
          "802:   return SEC_E_INTERNAL_ERROR;",
          "803:  }",
          "812:   {",
          "813:    Stream_Free(s, FALSE);",
          "814:    return SEC_E_INTERNAL_ERROR;",
          "815:   }",
          "817:   if (ntlm_read_ntlm_v2_response(snt, &(context->NTLMv2Response)) < 0)",
          "818:   {",
          "819:    Stream_Free(s, FALSE);",
          "820:    Stream_Free(snt, FALSE);",
          "821:    return SEC_E_INVALID_TOKEN;",
          "822:   }",
          "",
          "[Added Lines]",
          "701:   goto fail;",
          "704:   goto fail;",
          "708:   goto fail;",
          "712:   goto fail;",
          "715:   goto fail;",
          "718:   goto fail;",
          "721:   goto fail;",
          "725:   goto fail;",
          "727:  if (Stream_GetRemainingLength(s) < 4)",
          "728:   goto fail;",
          "735:   goto fail;",
          "740:    goto fail;",
          "745:  status = SEC_E_INTERNAL_ERROR;",
          "747:   goto fail;",
          "750:   goto fail;",
          "753:   goto fail;",
          "757:   goto fail;",
          "761:   goto fail;",
          "765:   int rc;",
          "771:    goto fail;",
          "773:   status = SEC_E_INVALID_TOKEN;",
          "774:   rc = ntlm_read_ntlm_v2_response(snt, &(context->NTLMv2Response));",
          "776:   if (rc < 0)",
          "777:    goto fail;",
          "778:   status = SEC_E_INTERNAL_ERROR;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "839:  if (ntlm_read_message_fields_buffer(s, &(message->EncryptedRandomSessionKey)) <",
          "846:  if (message->EncryptedRandomSessionKey.Len > 0)",
          "847:  {",
          "848:   if (message->EncryptedRandomSessionKey.Len != 16)",
          "854:   CopyMemory(context->EncryptedRandomSessionKey, message->EncryptedRandomSessionKey.Buffer,",
          "855:              16);",
          "",
          "[Removed Lines]",
          "841:  {",
          "842:   Stream_Free(s, FALSE);",
          "843:   return SEC_E_INTERNAL_ERROR;",
          "844:  }",
          "849:   {",
          "850:    Stream_Free(s, FALSE);",
          "851:    return SEC_E_INVALID_TOKEN;",
          "852:   }",
          "",
          "[Added Lines]",
          "796:   goto fail;",
          "801:    goto fail;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "858:  length = Stream_GetPosition(s);",
          "860:  if (!sspi_SecBufferAlloc(&context->AuthenticateMessage, length))",
          "866:  CopyMemory(context->AuthenticateMessage.pvBuffer, Stream_Buffer(s), length);",
          "867:  buffer->cbBuffer = length;",
          "",
          "[Removed Lines]",
          "861:  {",
          "862:   Stream_Free(s, FALSE);",
          "863:   return SEC_E_INTERNAL_ERROR;",
          "864:  }",
          "",
          "[Added Lines]",
          "810:   goto fail;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "871:  {",
          "872:   context->MessageIntegrityCheckOffset = (UINT32)Stream_GetPosition(s);",
          "874:   if (Stream_GetRemainingLength(s) < 16)",
          "880:   Stream_Read(s, message->MessageIntegrityCheck, 16);",
          "881:  }",
          "883: #ifdef WITH_DEBUG_NTLM",
          "884:  WLog_DBG(TAG, \"AUTHENTICATE_MESSAGE (length = %\" PRIu32 \")\",",
          "885:           context->AuthenticateMessage.cbBuffer);",
          "",
          "[Removed Lines]",
          "875:   {",
          "876:    Stream_Free(s, FALSE);",
          "877:    return SEC_E_INVALID_TOKEN;",
          "878:   }",
          "",
          "[Added Lines]",
          "820:   status = SEC_E_INVALID_TOKEN;",
          "822:    goto fail;",
          "827:  status = SEC_E_INTERNAL_ERROR;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "911:   credentials->identity.User = (UINT16*)malloc(message->UserName.Len);",
          "913:   if (!credentials->identity.User)",
          "919:   CopyMemory(credentials->identity.User, message->UserName.Buffer, message->UserName.Len);",
          "920:   credentials->identity.UserLength = message->UserName.Len / 2;",
          "",
          "[Removed Lines]",
          "914:   {",
          "915:    Stream_Free(s, FALSE);",
          "916:    return SEC_E_INTERNAL_ERROR;",
          "917:   }",
          "",
          "[Added Lines]",
          "860:    goto fail;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "925:   credentials->identity.Domain = (UINT16*)malloc(message->DomainName.Len);",
          "927:   if (!credentials->identity.Domain)",
          "933:   CopyMemory(credentials->identity.Domain, message->DomainName.Buffer,",
          "934:              message->DomainName.Len);",
          "",
          "[Removed Lines]",
          "928:   {",
          "929:    Stream_Free(s, FALSE);",
          "930:    return SEC_E_INTERNAL_ERROR;",
          "931:   }",
          "",
          "[Added Lines]",
          "871:    goto fail;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "940:  context->state = NTLM_STATE_COMPLETION;",
          "941:  return SEC_I_COMPLETE_NEEDED;",
          "942: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "883: fail:",
          "884:  Stream_Free(s, FALSE);",
          "885:  return status;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8fa38359634a9910b91719818ab02f23c320dbae",
      "candidate_info": {
        "commit_hash": "8fa38359634a9910b91719818ab02f23c320dbae",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/8fa38359634a9910b91719818ab02f23c320dbae",
        "files": [
          "winpr/libwinpr/sspi/NTLM/ntlm_message.c"
        ],
        "message": "Fixed oob read in ntlm_read_NegotiateMessage",
        "before_after_code_files": [
          "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c": [
          "File: winpr/libwinpr/sspi/NTLM/ntlm_message.c -> winpr/libwinpr/sspi/NTLM/ntlm_message.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:   return SEC_E_INVALID_TOKEN;",
          "220:  }",
          "224:  if (!((message->NegotiateFlags & NTLMSSP_REQUEST_TARGET) &&",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222:  if (Stream_GetRemainingLength(s) < 4)",
          "223:  {",
          "224:   Stream_Free(s, FALSE);",
          "225:   return SEC_E_INVALID_TOKEN;",
          "226:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}