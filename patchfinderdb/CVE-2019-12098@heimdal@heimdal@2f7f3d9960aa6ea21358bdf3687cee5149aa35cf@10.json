{
  "cve_id": "CVE-2019-12098",
  "cve_desc": "In the client side of Heimdal before 7.6.0, failure to verify anonymous PKINIT PA-PKINIT-KX key exchange permits a man-in-the-middle attack. This issue is in krb5_init_creds_step in lib/krb5/init_creds_pw.c.",
  "repo": "heimdal/heimdal",
  "patch_hash": "2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
  "patch_info": {
    "commit_hash": "2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
    "repo": "heimdal/heimdal",
    "commit_url": "https://github.com/heimdal/heimdal/commit/2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
    "files": [
      "lib/krb5/init_creds_pw.c",
      "lib/krb5/krb5_locl.h",
      "lib/krb5/pkinit.c"
    ],
    "message": "CVE-2019-12098: krb5: always confirm PA-PKINIT-KX for anon PKINIT\n\nRFC8062 Section 7 requires verification of the PA-PKINIT-KX key excahnge\nwhen anonymous PKINIT is used.  Failure to do so can permit an active\nattacker to become a man-in-the-middle.\n\nIntroduced by a1ef548600c5bb51cf52a9a9ea12676506ede19f.  First tagged\nrelease Heimdal 1.4.0.\n\nCVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N (4.8)\n\nChange-Id: I6cc1c0c24985936468af08693839ac6c3edda133\nSigned-off-by: Jeffrey Altman <jaltman@auristor.com>\nApproved-by: Jeffrey Altman <jaltman@auritor.com>\n(cherry picked from commit 38c797e1ae9b9c8f99ae4aa2e73957679031fd2b)",
    "before_after_code_files": [
      "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c",
      "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h",
      "lib/krb5/pkinit.c||lib/krb5/pkinit.c"
    ]
  },
  "patch_diff": {
    "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c": [
      "File: lib/krb5/init_creds_pw.c -> lib/krb5/init_creds_pw.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2267:            &ctx->req_buffer,",
      "2268:            NULL,",
      "2269:            NULL);",
      "2270:      if (ret == 0)",
      "2271:   ret = copy_EncKDCRepPart(&rep.enc_part, &ctx->enc_part);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2270:      if (ret == 0 && ctx->pk_init_ctx) {",
      "2271:   PA_DATA *pa_pkinit_kx;",
      "2272:   int idx = 0;",
      "2274:   pa_pkinit_kx =",
      "2275:       krb5_find_padata(rep.kdc_rep.padata->val,",
      "2276:          rep.kdc_rep.padata->len,",
      "2277:          KRB5_PADATA_PKINIT_KX,",
      "2278:          &idx);",
      "2280:   ret = _krb5_pk_kx_confirm(context, ctx->pk_init_ctx,",
      "2281:        ctx->fast_state.reply_key,",
      "2282:        &ctx->cred.session,",
      "2283:        pa_pkinit_kx);",
      "2284:   if (ret)",
      "2285:       krb5_set_error_message(context, ret,",
      "2286:         N_(\"Failed to confirm PA-PKINIT-KX\", \"\"));",
      "2287:   else if (pa_pkinit_kx != NULL)",
      "2288:       ctx->ic_flags |= KRB5_INIT_CREDS_PKINIT_KX_VALID;",
      "2289:      }",
      "",
      "---------------"
    ],
    "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h": [
      "File: lib/krb5/krb5_locl.h -> lib/krb5/krb5_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "208: #define KRB5_INIT_CREDS_CANONICALIZE  1",
      "209: #define KRB5_INIT_CREDS_NO_C_CANON_CHECK 2",
      "210: #define KRB5_INIT_CREDS_NO_C_NO_EKU_CHECK 4",
      "211:     struct {",
      "212:         krb5_gic_process_last_req func;",
      "213:         void *ctx;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "211: #define KRB5_INIT_CREDS_PKINIT_KX_VALID  32",
      "",
      "---------------"
    ],
    "lib/krb5/pkinit.c||lib/krb5/pkinit.c": [
      "File: lib/krb5/pkinit.c -> lib/krb5/pkinit.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1220:     return ret;",
      "1221: }",
      "1223: static krb5_error_code",
      "1224: pk_rd_pa_reply_dh(krb5_context context,",
      "1225:     const heim_octet_string *indata,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1230: KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL",
      "1231: _krb5_pk_kx_confirm(krb5_context context,",
      "1232:       krb5_pk_init_ctx ctx,",
      "1233:       krb5_keyblock *reply_key,",
      "1234:       krb5_keyblock *session_key,",
      "1235:       PA_DATA *pa_pkinit_kx)",
      "1236: {",
      "1237:     krb5_error_code ret;",
      "1238:     EncryptedData ed;",
      "1239:     krb5_keyblock ck, sk_verify;",
      "1240:     krb5_crypto ck_crypto = NULL;",
      "1241:     krb5_crypto rk_crypto = NULL;",
      "1242:     size_t len;",
      "1243:     krb5_data data;",
      "1244:     krb5_data p1 = { sizeof(\"PKINIT\") - 1, \"PKINIT\" };",
      "1245:     krb5_data p2 = { sizeof(\"KEYEXCHANGE\") - 1, \"KEYEXCHANGE\" };",
      "1247:     heim_assert(ctx != NULL, \"PKINIT context is non-NULL\");",
      "1248:     heim_assert(reply_key != NULL, \"reply key is non-NULL\");",
      "1249:     heim_assert(session_key != NULL, \"session key is non-NULL\");",
      "1252:     if (pa_pkinit_kx == NULL)",
      "1253:  return ctx->anonymous ? KRB5_KDCREP_MODIFIED : 0;",
      "1255:     memset(&ed, 0, sizeof(ed));",
      "1256:     krb5_keyblock_zero(&ck);",
      "1257:     krb5_keyblock_zero(&sk_verify);",
      "1258:     krb5_data_zero(&data);",
      "1260:     ret = decode_EncryptedData(pa_pkinit_kx->padata_value.data,",
      "1261:           pa_pkinit_kx->padata_value.length,",
      "1262:           &ed, &len);",
      "1263:     if (ret)",
      "1264:  goto out;",
      "1266:     if (len != pa_pkinit_kx->padata_value.length) {",
      "1267:  ret = KRB5_KDCREP_MODIFIED;",
      "1268:  goto out;",
      "1269:     }",
      "1271:     ret = krb5_crypto_init(context, reply_key, 0, &rk_crypto);",
      "1272:     if (ret)",
      "1273:  goto out;",
      "1275:     ret = krb5_decrypt_EncryptedData(context, rk_crypto,",
      "1276:          KRB5_KU_PA_PKINIT_KX,",
      "1277:          &ed, &data);",
      "1278:     if (ret)",
      "1279:  goto out;",
      "1281:     ret = decode_EncryptionKey(data.data, data.length,",
      "1282:           &ck, &len);",
      "1283:     if (ret)",
      "1284:  goto out;",
      "1286:     ret = krb5_crypto_init(context, &ck, 0, &ck_crypto);",
      "1287:     if (ret)",
      "1288:  goto out;",
      "1290:     ret = krb5_crypto_fx_cf2(context, ck_crypto, rk_crypto,",
      "1291:         &p1, &p2, session_key->keytype,",
      "1292:         &sk_verify);",
      "1293:     if (ret)",
      "1294:  goto out;",
      "1296:     if (sk_verify.keytype != session_key->keytype ||",
      "1297:  krb5_data_ct_cmp(&sk_verify.keyvalue, &session_key->keyvalue) != 0) {",
      "1298:  ret = KRB5_KDCREP_MODIFIED;",
      "1299:  goto out;",
      "1300:     }",
      "1302: out:",
      "1303:     free_EncryptedData(&ed);",
      "1304:     krb5_free_keyblock_contents(context, &ck);",
      "1305:     krb5_free_keyblock_contents(context, &sk_verify);",
      "1306:     if (ck_crypto)",
      "1307:  krb5_crypto_destroy(context, ck_crypto);",
      "1308:     if (rk_crypto)",
      "1309:  krb5_crypto_destroy(context, rk_crypto);",
      "1310:     krb5_data_free(&data);",
      "1312:     return ret;",
      "1313: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6eceb26a5fbe2e770f3df16b50a54b803cb5994e",
      "candidate_info": {
        "commit_hash": "6eceb26a5fbe2e770f3df16b50a54b803cb5994e",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/6eceb26a5fbe2e770f3df16b50a54b803cb5994e",
        "files": [
          "kdc/krb5tgs.c",
          "tests/kdc/check-kdc.in"
        ],
        "message": "CVE-2019-14870: Apply forwardable policy in protocol-transition\n\nSigned-off-by: Isaac Boukris <iboukris@gmail.com>",
        "before_after_code_files": [
          "kdc/krb5tgs.c||kdc/krb5tgs.c",
          "tests/kdc/check-kdc.in||tests/kdc/check-kdc.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kdc/krb5tgs.c||kdc/krb5tgs.c": [
          "File: kdc/krb5tgs.c -> kdc/krb5tgs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2171:   str = \"[forwardable]\";",
          "2172:      } else {",
          "2173:   b->kdc_options.forwardable = 0;",
          "",
          "[Removed Lines]",
          "2170:      if (client->entry.flags.trusted_for_delegation) {",
          "",
          "[Added Lines]",
          "2171:      if (client->entry.flags.trusted_for_delegation &&",
          "2172:   s4u2self_impersonated_client->entry.flags.forwardable) {",
          "",
          "---------------"
        ],
        "tests/kdc/check-kdc.in||tests/kdc/check-kdc.in": [
          "File: tests/kdc/check-kdc.in -> tests/kdc/check-kdc.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "217: ${kadmin} add -p kaka --use-defaults foo/des3-only@${R} || exit 1",
          "218: ${kadmin} add -p kaka --use-defaults bar/des3-only@${R} || exit 1",
          "219: ${kadmin} add -p kaka --use-defaults foo/aes-only@${R} || exit 1",
          "220: ${kadmin} add -p foo --use-defaults ${ps} || exit 1",
          "221: ${kadmin} modify --attributes=+trusted-for-delegation ${ps} || exit 1",
          "222: ${kadmin} modify --constrained-delegation=${server} ${ps} || exit 1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221: ${kadmin} add -p sens --use-defaults --attributes=disallow-forwardable sensitive@${R} || exit 1",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "809: ${kgetcred_imp} --forward --impersonate=unknown@${R} ${ps} && \\",
          "810:  { ec=1 ; eval \"${testfailed}\"; }",
          "812: echo \"test constrained delegation\"; > messages.log",
          "813: ${kgetcred_imp} --forward --impersonate=bar@${R} ${ps} || \\",
          "814:  { ec=1 ; eval \"${testfailed}\"; }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "814: echo \"test delegate sensitive client\"; > messages.log",
          "815: ${kgetcred_imp} --forward --impersonate=sensitive@${R} ${ps} || \\",
          "816:  { ec=1 ; eval \"${testfailed}\"; }",
          "817: ${kgetcred} \\",
          "818:  --out-cache=${o2cache} \\",
          "819:  --delegation-credential-cache=${ocache} \\",
          "820:  ${server}@${R} && \\",
          "821:  { ec=1 ; eval \"${testfailed}\"; }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6df21882b213940c085c14882a033eb0b7a62120",
      "candidate_info": {
        "commit_hash": "6df21882b213940c085c14882a033eb0b7a62120",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/6df21882b213940c085c14882a033eb0b7a62120",
        "files": [
          "windows/NTMakefile.version"
        ],
        "message": "windows: the 7.x series is not pre-release\n\nThe VER_PRERELEASE define should not be present for a release series.\nUncomment it.\n\nChange-Id: I71a1bf1a971f086d37ab8f4a8bdd9896548ed566",
        "before_after_code_files": [
          "windows/NTMakefile.version||windows/NTMakefile.version"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "windows/NTMakefile.version||windows/NTMakefile.version": [
          "File: windows/NTMakefile.version -> windows/NTMakefile.version",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: !endif",
          "38: # Define to 1 if this is a pre-release build.  Undefine otherwise",
          "41: # Define to a valid string if this build DOES NOT follow normal",
          "42: # release procedures.  I.e. this is a private build whose version",
          "",
          "[Removed Lines]",
          "39: VER_PRERELEASE=1",
          "",
          "[Added Lines]",
          "39: # VER_PRERELEASE=1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7fcf69642739cf15ec2fbcc2ca547d7d2d9407eb",
      "candidate_info": {
        "commit_hash": "7fcf69642739cf15ec2fbcc2ca547d7d2d9407eb",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/7fcf69642739cf15ec2fbcc2ca547d7d2d9407eb",
        "files": [
          "lib/wind/generate.py"
        ],
        "message": "PY3: bytes.maketrans, string.maketrans is a PY2 only function\n\nSigned-off-by: Noel Power <noel.power@suse.com>\nReviewed-by: Andrew Bartlett <abartlet@samba.org>\n(cherry picked from Samba commit b342e6f038b5277cf30115f11cf0f30d238c12ea)\n(cherry picked from commit 96b410ed46689f4cfb8b6505ab6c9ac0d4965f9f)",
        "before_after_code_files": [
          "lib/wind/generate.py||lib/wind/generate.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/wind/generate.py||lib/wind/generate.py": [
          "File: lib/wind/generate.py -> lib/wind/generate.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: import datetime",
          "38: import string",
          "39: import os",
          "41: class GeneratedFile :",
          "42:     \"Represents a generated file\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: import sys",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57: class Header(GeneratedFile) :",
          "58:     \"Represents a generated header file\"",
          "60:     def makeGuard(self) :",
          "61:         \"\"\"Return a name to be used as ifdef guard\"\"\"",
          "62:         return string.upper(string.translate(self.name, self.guardTrans))",
          "",
          "[Removed Lines]",
          "59:     guardTrans = string.maketrans('-.', '__')",
          "",
          "[Added Lines]",
          "60:     if sys.hexversion>0x300000f:",
          "61:         guardTrans = bytes.maketrans(b'-.', b'__')",
          "62:     else:",
          "63:         import string",
          "64:         guardTrans = string.maketrans('-.', '__')",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "64c77f60dfcebb87d1d293430062b353c22e8738",
      "candidate_info": {
        "commit_hash": "64c77f60dfcebb87d1d293430062b353c22e8738",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/64c77f60dfcebb87d1d293430062b353c22e8738",
        "files": [
          "lib/krb5/pkinit.c"
        ],
        "message": "krb5: set PKINIT_BTMM flag per Apple implementation\n\n(cherry picked from commit fd209c5dca89e599f24a853cc9e9a55dc2d04f4c)",
        "before_after_code_files": [
          "lib/krb5/pkinit.c||lib/krb5/pkinit.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [
            "lib/krb5/pkinit.c||lib/krb5/pkinit.c"
          ],
          "candidate": [
            "lib/krb5/pkinit.c||lib/krb5/pkinit.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/krb5/pkinit.c||lib/krb5/pkinit.c": [
          "File: lib/krb5/pkinit.c -> lib/krb5/pkinit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2380:  opt->opt_private->pk_init_ctx = NULL;",
          "2381:  return ret;",
          "2382:     }",
          "2384:     if (opt->opt_private->pk_init_ctx->id->certs) {",
          "2385:  _krb5_pk_set_user_id(context,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2383:     if (flags & KRB5_GIC_OPT_PKINIT_BTMM)",
          "2384:  opt->opt_private->pk_init_ctx->id->flags |= PKINIT_BTMM;",
          "2386:     if (principal && krb5_principal_is_lkdc(context, principal))",
          "2387:  opt->opt_private->pk_init_ctx->id->flags |= PKINIT_BTMM;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "78a1a3d66a825a84c6b2275b359355557760b542",
      "candidate_info": {
        "commit_hash": "78a1a3d66a825a84c6b2275b359355557760b542",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/78a1a3d66a825a84c6b2275b359355557760b542",
        "files": [
          "kdc/default_config.c",
          "kdc/kdc.8",
          "kdc/kdc.h",
          "kdc/kerberos5.c",
          "kdc/pkinit.c",
          "kuser/kinit.1",
          "kuser/kinit.c",
          "lib/krb5/krb5.conf.5",
          "lib/krb5/krb5.h",
          "lib/krb5/principal.c",
          "lib/krb5/ticket.c"
        ],
        "message": "Optional backwards-compatible anon-pkinit behaviour\n\n* Anonymous pkinit responses from the KDC where the name\n  type is not well-known (as issued by 7.5 KDCs and earlier)\n  are accepted by the client.  There is no need for the client\n  to strictly enforce the name type.\n\n* With historical_anon_pkinit = true, the kinit(1) client's\n  \"--anonymous\" option only performs anon pkinit, and does\n  not require an '@' prefix for the realm argument.\n\n* With historical_anon_realm = true, the KDC issues anon\n  pkinit tickets with the legacy pre-7.0 \"real\" realm.",
        "before_after_code_files": [
          "kdc/default_config.c||kdc/default_config.c",
          "kdc/kdc.8||kdc/kdc.8",
          "kdc/kdc.h||kdc/kdc.h",
          "kdc/kerberos5.c||kdc/kerberos5.c",
          "kdc/pkinit.c||kdc/pkinit.c",
          "kuser/kinit.1||kuser/kinit.1",
          "kuser/kinit.c||kuser/kinit.c",
          "lib/krb5/krb5.conf.5||lib/krb5/krb5.conf.5",
          "lib/krb5/krb5.h||lib/krb5/krb5.h",
          "lib/krb5/principal.c||lib/krb5/principal.c",
          "lib/krb5/ticket.c||lib/krb5/ticket.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kdc/default_config.c||kdc/default_config.c": [
          "File: kdc/default_config.c -> kdc/default_config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:     c->check_ticket_addresses = TRUE;",
          "60:     c->allow_null_ticket_addresses = TRUE;",
          "61:     c->allow_anonymous = FALSE;",
          "62:     c->strict_nametypes = FALSE;",
          "63:     c->trpolicy = TRPOLICY_ALWAYS_CHECK;",
          "64:     c->enable_pkinit = FALSE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:     c->historical_anon_realm = FALSE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "164:          \"kdc\",",
          "165:          \"allow-anonymous\", NULL);",
          "167:     c->strict_nametypes =",
          "168:  krb5_config_get_bool_default(context, NULL,",
          "169:          c->strict_nametypes,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "168:     c->historical_anon_realm =",
          "169:  krb5_config_get_bool_default(context, NULL,",
          "170:          c->historical_anon_realm,",
          "171:          \"kdc\",",
          "172:          \"historical_anon_realm\", NULL);",
          "",
          "---------------"
        ],
        "kdc/kdc.8||kdc/kdc.8": [
          "File: kdc/kdc.8 -> kdc/kdc.8",
          "--- Hunk 1 ---",
          "[Context before]",
          "155: This option is only relevant when check-ticket-addresses is TRUE.",
          "156: .It Li allow-anonymous = Va boolean",
          "157: Permit anonymous tickets with no addresses.",
          "158: .It Li max-kdc-datagram-reply-length = Va number",
          "159: Maximum packet size the UDP rely that the KDC will transmit, instead",
          "160: the KDC sends back a reply telling the client to use TCP instead.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "158: .It Li historical_anon_realm = Va boolean",
          "159: Enables pre-7.0 non-RFC-comformant KDC behavior.",
          "160: With this option set to",
          "161: .Li true",
          "162: the client realm in anonymous pkinit AS replies will be the requested realm,",
          "163: rather than the RFC-conformant",
          "164: .Li WELLKNOWN:ANONYMOUS",
          "165: realm.",
          "166: This can have a security impact on servers that expect to grant access to",
          "167: anonymous-but-authenticated to the KDC users of the realm in question:",
          "168: they would also grant access to unauthenticated anonymous users.",
          "169: As such, it is not recommend to set this option to",
          "170: .Li true.",
          "",
          "---------------"
        ],
        "kdc/kdc.h||kdc/kdc.h": [
          "File: kdc/kdc.h -> kdc/kdc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:     krb5_boolean check_ticket_addresses;",
          "70:     krb5_boolean allow_null_ticket_addresses;",
          "71:     krb5_boolean allow_anonymous;",
          "72:     krb5_boolean strict_nametypes;",
          "73:     enum krb5_kdc_trpolicy trpolicy;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:     krb5_boolean historical_anon_realm;",
          "",
          "---------------"
        ],
        "kdc/kerberos5.c||kdc/kerberos5.c": [
          "File: kdc/kerberos5.c -> kdc/kerberos5.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "117: }",
          "122: {",
          "",
          "[Removed Lines]",
          "120: static krb5_boolean",
          "121: is_anon_as_request_p(kdc_request_t r)",
          "123:     KDC_REQ_BODY *b = &r->req.req_body;",
          "",
          "[Added Lines]",
          "120: krb5_boolean",
          "121: _kdc_is_anon_request(const KDC_REQ *req)",
          "123:     const KDC_REQ_BODY *b = &req->req_body;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "462:     heim_assert(r->armor_crypto != NULL, \"ENC-CHAL called for non FAST\");",
          "465:  ret = KRB5KRB_AP_ERR_BAD_INTEGRITY;",
          "466:  kdc_log(r->context, r->config, 0, \"ENC-CHALL doesn't support anon\");",
          "467:  return ret;",
          "",
          "[Removed Lines]",
          "464:     if (is_anon_as_request_p(r)) {",
          "",
          "[Added Lines]",
          "464:     if (_kdc_is_anon_request(&r->req)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1732:     if (_kdc_is_anonymous(context, r->client_princ) &&",
          "1734:  kdc_log(context, config, 0, \"Anonymous client w/o anonymous flag\");",
          "1735:  ret = KRB5KDC_ERR_BADOPTION;",
          "1736:  goto out;",
          "",
          "[Removed Lines]",
          "1733:  !is_anon_as_request_p(r)) {",
          "",
          "[Added Lines]",
          "1733:  !_kdc_is_anon_request(&r->req)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1907:      ret = KRB5KDC_ERR_PREAUTH_REQUIRED;",
          "1908:      _kdc_set_e_text(r, \"Need to use PA-ENC-TIMESTAMP/PA-PK-AS-REQ\");",
          "1909:      goto out;",
          "",
          "[Removed Lines]",
          "1906:  if (require_preauth_p(r) || is_anon_as_request_p(r)) {",
          "",
          "[Added Lines]",
          "1906:  if (require_preauth_p(r) || _kdc_is_anon_request(&r->req)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1936:     if(ret)",
          "1937:  goto out;",
          "1940:  ret = _kdc_check_anon_policy(context, config, r->client, r->server);",
          "1941:  if (ret) {",
          "1942:      _kdc_set_e_text(r, \"Anonymous ticket requests are disabled\");",
          "",
          "[Removed Lines]",
          "1939:     if (is_anon_as_request_p(r)) {",
          "",
          "[Added Lines]",
          "1939:     if (_kdc_is_anon_request(&r->req)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1970:     rep.pvno = 5;",
          "1971:     rep.msg_type = krb_as_rep;",
          "1974:  Realm anon_realm = KRB5_ANON_REALM;",
          "1975:  ret = copy_Realm(&anon_realm, &rep.crealm);",
          "1976:     } else",
          "",
          "[Removed Lines]",
          "1973:     if (_kdc_is_anonymous(context, r->client_princ)) {",
          "",
          "[Added Lines]",
          "1973:     if (!config->historical_anon_realm &&",
          "1974:         _kdc_is_anonymous(context, r->client_princ)) {",
          "",
          "---------------"
        ],
        "kdc/pkinit.c||kdc/pkinit.c": [
          "File: kdc/pkinit.c -> kdc/pkinit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "623:  hx509_certs signer_certs;",
          "627:      flags |= HX509_CMS_VS_ALLOW_ZERO_SIGNER;",
          "629:  ret = hx509_cms_verify_signed(context->hx509ctx,",
          "",
          "[Removed Lines]",
          "626:  if (_kdc_is_anonymous(context, client->entry.principal))",
          "",
          "[Added Lines]",
          "626:  if (_kdc_is_anonymous(context, client->entry.principal)",
          "627:      || (config->historical_anon_realm && _kdc_is_anon_request(req)))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1676:     size_t i;",
          "1678:     if (cp->cert == NULL) {",
          "1680:      return KRB5KDC_ERR_BADOPTION;",
          "",
          "[Removed Lines]",
          "1679:  if (!_kdc_is_anonymous(context, client->entry.principal))",
          "",
          "[Added Lines]",
          "1680:  if (!_kdc_is_anonymous(context, client->entry.principal)",
          "1681:      && !config->historical_anon_realm)",
          "",
          "---------------"
        ],
        "kuser/kinit.1||kuser/kinit.1": [
          "File: kuser/kinit.1 -> kuser/kinit.1",
          "--- Hunk 1 ---",
          "[Context before]",
          "166: .It Fl A , Fl Fl no-addresses",
          "167: Request a ticket with no addresses.",
          "168: .It Fl n , Fl Fl anonymous",
          "170: anonymous PKINIT will be used to acquire an unauthenticated anonymous ticket",
          "172: Otherwise, authentication proceeds as normal and the anonymous ticket will have",
          "173: only the client name anonymized.",
          "174: .It Fl Fl enterprise",
          "175: Parse principal as a enterprise (KRB5-NT-ENTERPRISE) name. Enterprise",
          "176: names are email like principals that are stored in the name part of",
          "",
          "[Removed Lines]",
          "169: Request an anonymous ticket. If the principal is specified as @REALM, then",
          "171: and both the client name and realm in the returned ticket will be anonymized.",
          "",
          "[Added Lines]",
          "169: Request an anonymous ticket.",
          "170: With the default (false) setting of the",
          "171: .Ar historical_anon_pkinit",
          "172: configuration parameter, if the principal is specified as @REALM, then",
          "174: and both the client name and (with fully RFC-comformant KDCs) realm in the",
          "175: returned ticket will be anonymized.",
          "178: With",
          "179: .Ar historical_anon_pkinit",
          "180: set to",
          "181: .Li true ,",
          "182: the principal is interpreted as a realm even without an at-sign prefix, and it",
          "183: is not possible to obtain authenticated anonymized tickets.",
          "",
          "---------------"
        ],
        "kuser/kinit.c||kuser/kinit.c": [
          "File: kuser/kinit.c -> kuser/kinit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1271:     struct sigaction sa;",
          "1272: #endif",
          "1273:     krb5_boolean unique_ccache = FALSE;",
          "1274:     int anonymous_pkinit = FALSE;",
          "1276:     setprogname(argv[0]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1274:     krb5_boolean historical_anon_pkinit = FALSE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1299:     argc -= optidx;",
          "1300:     argv += optidx;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1303:     krb5_appdefault_boolean(context, \"kinit\", NULL, \"historical_anon_pkinit\",",
          "1304:                             FALSE, &historical_anon_pkinit);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1331:      krb5_err(context, 1, ret, \"krb5_make_principal\");",
          "1332:  krb5_principal_set_type(context, principal, KRB5_NT_WELLKNOWN);",
          "1333:  anonymous_pkinit = TRUE;",
          "1334:     } else if (use_keytab || keytab_str) {",
          "1335:  get_princ_kt(context, &principal, argv[0]);",
          "1336:     } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1338:     } else if (anonymous_flag && historical_anon_pkinit) {",
          "1339:         char *realm = argc == 0 ? get_default_realm(context) :",
          "1340:                       argv[0][0] == '@' ? &argv[0][1] : argv[0];",
          "1342:  ret = krb5_make_principal(context, &principal, realm,",
          "1343:       KRB5_WELLKNOWN_NAME, KRB5_ANON_NAME, NULL);",
          "1344:  if (ret)",
          "1345:      krb5_err(context, 1, ret, \"krb5_make_principal\");",
          "1346:  krb5_principal_set_type(context, principal, KRB5_NT_WELLKNOWN);",
          "1347:  anonymous_pkinit = TRUE;",
          "",
          "---------------"
        ],
        "lib/krb5/krb5.conf.5||lib/krb5/krb5.conf.5": [
          "File: lib/krb5/krb5.conf.5 -> lib/krb5/krb5.conf.5",
          "--- Hunk 1 ---",
          "[Context before]",
          "135: .Xr rsh 1 ,",
          "136: .Xr telnet 1 ,",
          "137: etc).",
          "138: .El",
          "139: .It Li [libdefaults]",
          "140: .Bl -tag -width \"xxx\" -offset indent",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138: .It Li historical_anon_pkinit = Va boolean",
          "139: Enable legacy anonymous pkinit command-line syntax.",
          "140: With this option set to",
          "141: .Li true,",
          "142: the",
          "143: .Xr kinit 1",
          "144: .Fl Fl anonymous",
          "145: command with no principal argument specified will request an anonymous pkinit",
          "146: ticket from the default realm.",
          "147: If a principal argument is specified, it is used as an explicit realm name for",
          "148: anonymous pkinit even without an",
          "149: .Li @",
          "150: prefix.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "641: .\\\" XXX",
          "642: .It Li allow-anonymous = Va BOOL",
          "643: If the kdc is allowed to hand out anonymous tickets.",
          "644: .It Li encode_as_rep_as_tgs_rep = Va BOOL",
          "646: .\\\" XXX",
          "647: .It Li kdc_warn_pwexpire = Va TIME",
          "648: The time before expiration that the user should be warned that her",
          "",
          "[Removed Lines]",
          "645: Encode as-rep as tgs-rep tobe compatible with mistakes older DCE secd did.",
          "",
          "[Added Lines]",
          "657: .It Li historical_anon_realm = Va boolean",
          "658: Enables pre-7.0 non-RFC-comformant KDC behavior.",
          "659: With this option set to",
          "660: .Li true",
          "661: the client realm in anonymous pkinit AS replies will be the requested realm,",
          "662: rather than the RFC-conformant",
          "663: .Li WELLKNOWN:ANONYMOUS",
          "664: realm.",
          "665: This can have a security impact on servers that expect to grant access to",
          "666: anonymous-but-authenticated to the KDC users of the realm in question:",
          "667: they would also grant access to unauthenticated anonymous users.",
          "668: As such, it is not recommend to set this option to",
          "669: .Li true.",
          "671: Encode as-rep as tgs-rep to be compatible with mistakes older DCE secd did.",
          "",
          "---------------"
        ],
        "lib/krb5/krb5.h||lib/krb5/krb5.h": [
          "File: lib/krb5/krb5.h -> lib/krb5/krb5.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "958: #define KRB5_ANON_MATCH_ANY  ( KRB5_ANON_MATCH_AUTHENTICATED | KRB5_ANON_MATCH_UNAUTHENTICATED )",
          "",
          "[Added Lines]",
          "959: #define KRB5_ANON_MATCH_ANY         ( KRB5_ANON_MATCH_AUTHENTICATED | \\",
          "960:                                           KRB5_ANON_MATCH_UNAUTHENTICATED )",
          "961: #define KRB5_ANON_MATCH_ANY_NONT ( KRB5_ANON_MATCH_ANY | \\",
          "962:                                           KRB5_ANON_IGNORE_NAME_TYPE )",
          "",
          "---------------"
        ],
        "lib/krb5/principal.c||lib/krb5/principal.c": [
          "File: lib/krb5/principal.c -> lib/krb5/principal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1258:         krb5_const_principal p,",
          "1259:         unsigned int flags)",
          "1260: {",
          "1266:         strcmp(p->name.name_string.val[0], KRB5_WELLKNOWN_NAME) != 0 ||",
          "1267:         strcmp(p->name.name_string.val[1], KRB5_ANON_NAME) != 0)",
          "1268:         return FALSE;",
          "1274: }",
          "1276: static int",
          "",
          "[Removed Lines]",
          "1261:     int anon_realm;",
          "1263:     if ((p->name.name_type != KRB5_NT_WELLKNOWN &&",
          "1264:          p->name.name_type != KRB5_NT_UNKNOWN) ||",
          "1265:         p->name.name_string.len != 2 ||",
          "1270:     anon_realm = strcmp(p->realm, KRB5_ANON_REALM) == 0;",
          "1272:     return ((flags & KRB5_ANON_MATCH_AUTHENTICATED) && !anon_realm) ||",
          "1273:     ((flags & KRB5_ANON_MATCH_UNAUTHENTICATED) && anon_realm);",
          "",
          "[Added Lines]",
          "1267:     if (!(flags & KRB5_ANON_IGNORE_NAME_TYPE) &&",
          "1268:         p->name.name_type != KRB5_NT_WELLKNOWN &&",
          "1269:         p->name.name_type != KRB5_NT_UNKNOWN)",
          "1270:         return FALSE;",
          "1272:     if (p->name.name_string.len != 2 ||",
          "1290:     if (flags & KRB5_ANON_MATCH_UNAUTHENTICATED)",
          "1291:         return TRUE;",
          "1297:     return strcmp(p->realm, KRB5_ANON_REALM) != 0;",
          "",
          "---------------"
        ],
        "lib/krb5/ticket.c||lib/krb5/ticket.c": [
          "File: lib/krb5/ticket.c -> lib/krb5/ticket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "541:     if (!rep->enc_part.flags.anonymous)",
          "542:  return KRB5KDC_ERR_BADOPTION;",
          "544:     if (is_tgs_rep)",
          "548:     else",
          "549:  flags = KRB5_ANON_MATCH_AUTHENTICATED;",
          "",
          "[Removed Lines]",
          "545:  flags = KRB5_ANON_MATCH_ANY;",
          "546:     else if (krb5_principal_is_anonymous(context, requested, KRB5_ANON_MATCH_ANY))",
          "547:  flags = KRB5_ANON_MATCH_UNAUTHENTICATED;",
          "",
          "[Added Lines]",
          "556:  flags = KRB5_ANON_MATCH_ANY_NONT;",
          "557:     else if (krb5_principal_is_anonymous(context, requested,",
          "558:                                          KRB5_ANON_MATCH_ANY_NONT))",
          "559:  flags = KRB5_ANON_MATCH_UNAUTHENTICATED | KRB5_ANON_IGNORE_NAME_TYPE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "566:         krb5_keyblock const * key)",
          "567: {",
          "568:     if (rep->enc_part.flags.anonymous) {",
          "570:      krb5_set_error_message(context, KRB5KRB_AP_ERR_MODIFIED,",
          "571:        N_(\"Anonymous ticket does not contain anonymous \"",
          "572:           \"principal\", \"\"));",
          "",
          "[Removed Lines]",
          "569:  if (!krb5_principal_is_anonymous(context, mapped, KRB5_ANON_MATCH_ANY)) {",
          "",
          "[Added Lines]",
          "581:  if (!krb5_principal_is_anonymous(context, mapped,",
          "582:                                          KRB5_ANON_MATCH_ANY_NONT)) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}