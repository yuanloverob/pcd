{
  "cve_id": "CVE-2017-3733",
  "cve_desc": "During a renegotiation handshake if the Encrypt-Then-Mac extension is negotiated where it was not in the original handshake (or vice-versa) then this can cause OpenSSL 1.1.0 before 1.1.0e to crash (dependent on ciphersuite). Both clients and servers are affected.",
  "repo": "openssl/openssl",
  "patch_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
  "patch_info": {
    "commit_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "files": [
      "include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h",
      "ssl/t1_enc.c",
      "ssl/t1_lib.c"
    ],
    "message": "Don't change the state of the ETM flags until CCS processing\n\nChanging the ciphersuite during a renegotiation can result in a crash\nleading to a DoS attack. ETM has not been implemented in 1.1.0 for DTLS\nso this is TLS only.\n\nThe problem is caused by changing the flag indicating whether to use ETM\nor not immediately on negotiation of ETM, rather than at CCS. Therefore,\nduring a renegotiation, if the ETM state is changing (usually due to a\nchange of ciphersuite), then an error/crash will occur.\n\nDue to the fact that there are separate CCS messages for read and write\nwe actually now need two flags to determine whether to use ETM or not.\n\nCVE-2017-3733\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl3.h||include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h||ssl/ssl_locl.h",
      "ssl/t1_enc.c||ssl/t1_enc.c",
      "ssl/t1_lib.c||ssl/t1_lib.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl3.h||include/openssl/ssl3.h": [
      "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "264: # define TLS1_FLAGS_SKIP_CERT_VERIFY             0x0010",
      "270: # define TLS1_FLAGS_RECEIVED_EXTMS               0x0200",
      "272: # define SSL3_MT_HELLO_REQUEST                   0",
      "273: # define SSL3_MT_CLIENT_HELLO                    1",
      "274: # define SSL3_MT_SERVER_HELLO                    2",
      "",
      "[Removed Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             0x0100",
      "",
      "[Added Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_READ        0x0100",
      "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             TLS1_FLAGS_ENCRYPT_THEN_MAC_READ",
      "273: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE       0x0400",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
      "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:     if (type == SSL3_RT_APPLICATION_DATA &&",
      "396:         u_len >= 4 * (max_send_fragment = s->max_send_fragment) &&",
      "397:         s->compress == NULL && s->msg_callback == NULL &&",
      "399:         EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_write_ctx)) &",
      "400:         EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK) {",
      "401:         unsigned char aad[13];",
      "",
      "[Removed Lines]",
      "398:         !SSL_USE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "[Added Lines]",
      "398:         !SSL_WRITE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "795:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "796:                                          &(outbuf[j][wr[j].length + eivlen]),",
      "797:                                          1) < 0)",
      "",
      "[Removed Lines]",
      "794:         if (!SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "794:         if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "814:         goto err;",
      "816:     for (j = 0; j < numpipes; j++) {",
      "818:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "819:                                          outbuf[j] + wr[j].length, 1) < 0)",
      "820:                 goto err;",
      "",
      "[Removed Lines]",
      "817:         if (SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "817:         if (SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------"
    ],
    "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
      "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "350:         unsigned char *mac;",
      "351:         mac_size = EVP_MD_CTX_size(s->read_hash);",
      "352:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
      "",
      "[Removed Lines]",
      "349:     if (SSL_USE_ETM(s) && s->read_hash) {",
      "",
      "[Added Lines]",
      "349:     if (SSL_READ_ETM(s) && s->read_hash) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "394:     if ((sess != NULL) &&",
      "395:         (s->enc_read_ctx != NULL) &&",
      "398:         unsigned char *mac = NULL;",
      "399:         unsigned char mac_tmp[EVP_MAX_MD_SIZE];",
      "",
      "[Removed Lines]",
      "396:         (EVP_MD_CTX_md(s->read_hash) != NULL) && !SSL_USE_ETM(s)) {",
      "",
      "[Added Lines]",
      "396:         (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "823:         }",
      "825:         ret = 1;",
      "827:             mac_size = EVP_MD_CTX_size(s->read_hash);",
      "828:         if ((bs != 1) && !send) {",
      "829:             int tmpret;",
      "",
      "[Removed Lines]",
      "826:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "[Added Lines]",
      "826:         if (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "997:     header[11] = (rec->length) >> 8;",
      "998:     header[12] = (rec->length) & 0xff;",
      "1001:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
      "1002:         ssl3_cbc_record_digest_supported(mac_ctx)) {",
      "",
      "[Removed Lines]",
      "1000:     if (!send && !SSL_USE_ETM(ssl) &&",
      "",
      "[Added Lines]",
      "1000:     if (!send && !SSL_READ_ETM(ssl) &&",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1022:             EVP_MD_CTX_free(hmac);",
      "1023:             return -1;",
      "1024:         }",
      "1026:             if (!tls_fips_digest_extra(ssl->enc_read_ctx,",
      "1027:                                        mac_ctx, rec->input,",
      "1028:                                        rec->length, rec->orig_len)) {",
      "",
      "[Removed Lines]",
      "1025:         if (!send && !SSL_USE_ETM(ssl) && FIPS_mode())",
      "",
      "[Added Lines]",
      "1025:         if (!send && !SSL_READ_ETM(ssl) && FIPS_mode())",
      "",
      "---------------"
    ],
    "ssl/ssl_locl.h||ssl/ssl_locl.h": [
      "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "378: # define SSL_CLIENT_USE_SIGALGS(s)        \\",
      "379:     SSL_CLIENT_USE_TLS1_2_CIPHERS(s)",
      "384: # define SSL_PKEY_RSA_ENC        0",
      "",
      "[Removed Lines]",
      "381: # define SSL_USE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC)",
      "",
      "[Added Lines]",
      "381: # define SSL_READ_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_READ)",
      "382: # define SSL_WRITE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1111:     unsigned char *alpn_client_proto_list;",
      "1112:     unsigned alpn_client_proto_list_len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1116:     int tlsext_use_etm;",
      "",
      "---------------"
    ],
    "ssl/t1_enc.c||ssl/t1_enc.c": [
      "File: ssl/t1_enc.c -> ssl/t1_enc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "130: #endif",
      "132:     if (which & SSL3_CC_READ) {",
      "133:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "134:             s->mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM;",
      "135:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133:         if (s->tlsext_use_etm)",
      "134:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "135:         else",
      "136:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "168:         mac_secret = &(s->s3->read_mac_secret[0]);",
      "169:         mac_secret_size = &(s->s3->read_mac_secret_size);",
      "170:     } else {",
      "171:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "172:             s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
      "173:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "176:         if (s->tlsext_use_etm)",
      "177:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "178:         else",
      "179:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "367:     if (s->s3->tmp.key_block_length != 0)",
      "368:         return (1);",
      "373:         SSLerr(SSL_F_TLS1_SETUP_KEY_BLOCK, SSL_R_CIPHER_OR_HASH_UNAVAILABLE);",
      "374:         return (0);",
      "375:     }",
      "",
      "[Removed Lines]",
      "370:     if (!ssl_cipher_get_evp",
      "371:         (s->session, &c, &hash, &mac_type, &mac_secret_size, &comp,",
      "372:          SSL_USE_ETM(s))) {",
      "",
      "[Added Lines]",
      "380:     if (!ssl_cipher_get_evp(s->session, &c, &hash, &mac_type, &mac_secret_size,",
      "381:                             &comp, s->tlsext_use_etm)) {",
      "",
      "---------------"
    ],
    "ssl/t1_lib.c||ssl/t1_lib.c": [
      "File: ssl/t1_lib.c -> ssl/t1_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1674: #endif",
      "1675:     if (!custom_ext_add(s, 1, &ret, limit, al))",
      "1676:         return NULL;",
      "",
      "[Removed Lines]",
      "1677:     if (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) {",
      "",
      "[Added Lines]",
      "1677:     if (s->tlsext_use_etm) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1683:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4",
      "1684:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT",
      "1685:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)",
      "1687:         else {",
      "",
      "[Removed Lines]",
      "1686:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1686:             s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1917:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
      "1918:     s->s3->tmp.peer_sigalgs = NULL;",
      "1921: #ifndef OPENSSL_NO_SRP",
      "1922:     OPENSSL_free(s->srp_ctx.login);",
      "",
      "[Removed Lines]",
      "1919:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1919:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2264:         }",
      "2265: #endif",
      "2266:         else if (type == TLSEXT_TYPE_encrypt_then_mac)",
      "",
      "[Removed Lines]",
      "2267:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2267:             s->tlsext_use_etm = 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2366:                              SSL_DTLSEXT_HB_DONT_SEND_REQUESTS);",
      "2367: #endif",
      "2371:     s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;",
      "",
      "[Removed Lines]",
      "2369:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2369:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2586:             if (s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD",
      "2587:                 && s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)",
      "2589:         } else if (type == TLSEXT_TYPE_extended_master_secret) {",
      "2590:             s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;",
      "2591:             if (!s->hit)",
      "",
      "[Removed Lines]",
      "2588:                 s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2588:                 s->tlsext_use_etm = 1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6f2de02624ec55d29f74c4c38994b56ec3250a10",
      "candidate_info": {
        "commit_hash": "6f2de02624ec55d29f74c4c38994b56ec3250a10",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/6f2de02624ec55d29f74c4c38994b56ec3250a10",
        "files": [
          "ssl/statem/statem_srvr.c"
        ],
        "message": "Correct pointer to be freed\n\nThe pointer that was freed in the SSLv2 section of ssl_bytes_to_cipher_list\nmay have stepped up from its allocated position.  Use a pointer that is\nguaranteed to point at the start of the allocated block instead.\n\nReviewed-by: Kurt Roeckx <kurt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2312)\n(cherry picked from commit 63414e64e66e376654e993ac966e3b2f9d849d3b)",
        "before_after_code_files": [
          "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c": [
          "File: ssl/statem/statem_srvr.c -> ssl/statem/statem_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3292:                     || (leadbyte != 0",
          "3293:                         && !PACKET_forward(&sslv2ciphers, TLS_CIPHER_LEN))) {",
          "3296:                 s->s3->tmp.ciphers_raw = NULL;",
          "3297:                 s->s3->tmp.ciphers_rawlen = 0;",
          "3298:                 goto err;",
          "",
          "[Removed Lines]",
          "3295:                 OPENSSL_free(raw);",
          "",
          "[Added Lines]",
          "3295:                 OPENSSL_free(s->s3->tmp.ciphers_raw);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d0c50e80a8b773ceec27c7e60fae7ccf4947df78",
      "candidate_info": {
        "commit_hash": "d0c50e80a8b773ceec27c7e60fae7ccf4947df78",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/d0c50e80a8b773ceec27c7e60fae7ccf4947df78",
        "files": [
          "include/openssl/dh.h"
        ],
        "message": "Add missing macros for DHxparams\n\nDHparams has d2i_DHparams_fp, d2i_DHxparams_bio etc, but the equivalent\nmacros for DHxparams were omitted.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3111)\n(cherry picked from commit ff79a24402108ba2cc313f52c745b69d473eb4b1)",
        "before_after_code_files": [
          "include/openssl/dh.h||include/openssl/dh.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/openssl/dh.h||include/openssl/dh.h": [
          "File: include/openssl/dh.h -> include/openssl/dh.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "88: # define DH_CHECK_P_NOT_STRONG_PRIME     DH_CHECK_P_NOT_SAFE_PRIME",
          "97: DH *DHparams_dup(DH *);",
          "",
          "[Removed Lines]",
          "90: # define d2i_DHparams_fp(fp,x) (DH *)ASN1_d2i_fp((char *(*)())DH_new, \\",
          "91:                 (char *(*)())d2i_DHparams,(fp),(unsigned char **)(x))",
          "92: # define i2d_DHparams_fp(fp,x) ASN1_i2d_fp(i2d_DHparams,(fp), \\",
          "93:                 (unsigned char *)(x))",
          "94: # define d2i_DHparams_bio(bp,x) ASN1_d2i_bio_of(DH,DH_new,d2i_DHparams,bp,x)",
          "95: # define i2d_DHparams_bio(bp,x) ASN1_i2d_bio_of_const(DH,i2d_DHparams,bp,x)",
          "",
          "[Added Lines]",
          "90: # define d2i_DHparams_fp(fp,x) \\",
          "91:     (DH *)ASN1_d2i_fp((char *(*)())DH_new, \\",
          "92:                       (char *(*)())d2i_DHparams, \\",
          "93:                       (fp), \\",
          "94:                       (unsigned char **)(x))",
          "95: # define i2d_DHparams_fp(fp,x) \\",
          "96:     ASN1_i2d_fp(i2d_DHparams,(fp), (unsigned char *)(x))",
          "97: # define d2i_DHparams_bio(bp,x) \\",
          "98:     ASN1_d2i_bio_of(DH, DH_new, d2i_DHparams, bp, x)",
          "99: # define i2d_DHparams_bio(bp,x) \\",
          "100:     ASN1_i2d_bio_of_const(DH,i2d_DHparams,bp,x)",
          "102: # define d2i_DHxparams_fp(fp,x) \\",
          "103:     (DH *)ASN1_d2i_fp((char *(*)())DH_new, \\",
          "104:                       (char *(*)())d2i_DHxparams, \\",
          "105:                       (fp), \\",
          "106:                       (unsigned char **)(x))",
          "107: # define i2d_DHxparams_fp(fp,x) \\",
          "108:     ASN1_i2d_fp(i2d_DHxparams,(fp), (unsigned char *)(x))",
          "109: # define d2i_DHxparams_bio(bp,x) \\",
          "110:     ASN1_d2i_bio_of(DH, DH_new, d2i_DHxparams, bp, x)",
          "111: # define i2d_DHxparams_bio(bp,x) \\",
          "112:     ASN1_i2d_bio_of_const(DH, i2d_DHxparams, bp, x)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3bdc1dc8fcc97a8945ddbc2748e7059207ea3914",
      "candidate_info": {
        "commit_hash": "3bdc1dc8fcc97a8945ddbc2748e7059207ea3914",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/3bdc1dc8fcc97a8945ddbc2748e7059207ea3914",
        "files": [
          "crypto/evp/e_chacha20_poly1305.c"
        ],
        "message": "Properly zero cipher_data for ChaCha20-Poly1305 on cleanup\n\nFix a typo. Probably this has not been found because EVP_CIPHER_CTX is\nsmaller than EVP_CHACHA_AEAD_CTX and heap overflow does not occur.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2294)\n(cherry picked from commit a8f957686675194d786b41f6e1f7c48bb85723ec)",
        "before_after_code_files": [
          "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c": [
          "File: crypto/evp/e_chacha20_poly1305.c -> crypto/evp/e_chacha20_poly1305.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "316: {",
          "317:     EVP_CHACHA_AEAD_CTX *actx = aead_data(ctx);",
          "318:     if (actx)",
          "320:     return 1;",
          "321: }",
          "",
          "[Removed Lines]",
          "319:         OPENSSL_cleanse(ctx->cipher_data, sizeof(*ctx) + Poly1305_ctx_size());",
          "",
          "[Added Lines]",
          "319:         OPENSSL_cleanse(ctx->cipher_data, sizeof(*actx) + Poly1305_ctx_size());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "39ddc55f4869f58beadad26c1b41a5ae06341986",
      "candidate_info": {
        "commit_hash": "39ddc55f4869f58beadad26c1b41a5ae06341986",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/39ddc55f4869f58beadad26c1b41a5ae06341986",
        "files": [
          "engines/e_capi.c"
        ],
        "message": "engines/e_capi.c: adhere to CryptAcquireContextW unconditionally.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(cherry picked from commit 3a5b64b2f039a237b595961da07350b3f23282d0)",
        "before_after_code_files": [
          "engines/e_capi.c||engines/e_capi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "engines/e_capi.c||engines/e_capi.c": [
          "File: engines/e_capi.c -> engines/e_capi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "479:         use_aes_csp = 1;",
          "480:         CryptReleaseContext(hprov, 0);",
          "481:     }",
          "",
          "[Removed Lines]",
          "477:     if (CryptAcquireContext(&hprov, NULL, NULL, PROV_RSA_AES,",
          "478:                             CRYPT_VERIFYCONTEXT)) {",
          "",
          "[Added Lines]",
          "477:     if (CryptAcquireContextW(&hprov, NULL, NULL, PROV_RSA_AES,",
          "478:                              CRYPT_VERIFYCONTEXT)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1179:     HCRYPTPROV hprov;",
          "1180:     DWORD err, idx, flags, buflen = 0, clen;",
          "1181:     LPSTR cname;",
          "1184:     CAPI_trace(ctx, \"Listing containers CSP=%s, type = %d\\n\", ctx->cspname,",
          "1185:                ctx->csptype);",
          "1187:         if ((clen = MultiByteToWideChar(CP_ACP, 0, ctx->cspname, -1,",
          "1188:                                         NULL, 0))) {",
          "1189:             cspname = alloca(clen * sizeof(WCHAR));",
          "1190:             MultiByteToWideChar(CP_ACP, 0, ctx->cspname, -1, (WCHAR *)cspname,",
          "1191:                                 clen);",
          "1192:         }",
          "1194:             CAPIerr(CAPI_F_CAPI_LIST_CONTAINERS, ERR_R_MALLOC_FAILURE);",
          "1195:             capi_addlasterror();",
          "1196:             return 0;",
          "1197:         }",
          "1200:     }",
          "1203:         CAPIerr(CAPI_F_CAPI_LIST_CONTAINERS,",
          "1204:                 CAPI_R_CRYPTACQUIRECONTEXT_ERROR);",
          "1205:         capi_addlasterror();",
          "",
          "[Removed Lines]",
          "1182:     LPTSTR cspname = NULL;",
          "1186:     if (ctx->cspname && sizeof(TCHAR) != sizeof(char)) {",
          "1193:         if (!cspname) {",
          "1198:     } else {",
          "1199:         cspname = (TCHAR *)ctx->cspname;",
          "1201:     if (!CryptAcquireContext(&hprov, NULL, cspname, ctx->csptype,",
          "1202:                              CRYPT_VERIFYCONTEXT)) {",
          "",
          "[Added Lines]",
          "1182:     LPWSTR cspname = NULL;",
          "1186:     if (ctx->cspname != NULL) {",
          "1193:         if (cspname == NULL) {",
          "1199:     if (!CryptAcquireContextW(&hprov, NULL, cspname, ctx->csptype,",
          "1200:                               CRYPT_VERIFYCONTEXT)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1460:     }",
          "1461: }",
          "1465: {",
          "1466:     DWORD dwFlags = 0;",
          "1467:     CAPI_KEY *key = OPENSSL_malloc(sizeof(*key));",
          "",
          "[Removed Lines]",
          "1463: static CAPI_KEY *capi_get_key(CAPI_CTX *ctx, const TCHAR *contname,",
          "1464:                               TCHAR *provname, DWORD ptype, DWORD keyspec)",
          "",
          "[Added Lines]",
          "1461: static CAPI_KEY *capi_get_key(CAPI_CTX *ctx, const WCHAR *contname,",
          "1462:                               WCHAR *provname, DWORD ptype, DWORD keyspec)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1478:                    contname, provname, ptype);",
          "1479:     } else if (ctx && ctx->debug_level >= CAPI_DBG_TRACE && ctx->debug_file) {",
          "1484:         CAPI_trace(ctx, \"capi_get_key, contname=%s, provname=%s, type=%d\\n\",",
          "1485:                    _contname, _provname, ptype);",
          "",
          "[Removed Lines]",
          "1481:         char *_contname = wide_to_asc((WCHAR *)contname);",
          "1482:         char *_provname = wide_to_asc((WCHAR *)provname);",
          "",
          "[Added Lines]",
          "1479:         char *_contname = wide_to_asc(contname);",
          "1480:         char *_provname = wide_to_asc(provname);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1488:     }",
          "1489:     if (ctx->store_flags & CERT_SYSTEM_STORE_LOCAL_MACHINE)",
          "1490:         dwFlags = CRYPT_MACHINE_KEYSET;",
          "1492:         CAPIerr(CAPI_F_CAPI_GET_KEY, CAPI_R_CRYPTACQUIRECONTEXT_ERROR);",
          "1493:         capi_addlasterror();",
          "1494:         goto err;",
          "",
          "[Removed Lines]",
          "1491:     if (!CryptAcquireContext(&key->hprov, contname, provname, ptype, dwFlags)) {",
          "",
          "[Added Lines]",
          "1489:     if (!CryptAcquireContextW(&key->hprov, contname, provname, ptype,",
          "1490:                               dwFlags)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1512: {",
          "1513:     CAPI_KEY *key = NULL;",
          "1514:     CRYPT_KEY_PROV_INFO *pinfo = NULL;",
          "1516:     pinfo = capi_get_prov_info(ctx, cert);",
          "1529:                            pinfo->dwProvType, pinfo->dwKeySpec);",
          "1533:     OPENSSL_free(pinfo);",
          "1536:     return key;",
          "1537: }",
          "",
          "[Removed Lines]",
          "1515:     char *provname = NULL, *contname = NULL;",
          "1517:     if (!pinfo)",
          "1518:         goto err;",
          "1519:     if (sizeof(TCHAR) != sizeof(char))",
          "1520:         key = capi_get_key(ctx, (TCHAR *)pinfo->pwszContainerName,",
          "1521:                            (TCHAR *)pinfo->pwszProvName,",
          "1522:                            pinfo->dwProvType, pinfo->dwKeySpec);",
          "1523:     else {",
          "1524:         provname = wide_to_asc(pinfo->pwszProvName);",
          "1525:         contname = wide_to_asc(pinfo->pwszContainerName);",
          "1526:         if (!provname || !contname)",
          "1527:             goto err;",
          "1528:         key = capi_get_key(ctx, (TCHAR *)contname, (TCHAR *)provname,",
          "1530:     }",
          "1532:  err:",
          "1534:     OPENSSL_free(provname);",
          "1535:     OPENSSL_free(contname);",
          "",
          "[Added Lines]",
          "1517:     if (pinfo != NULL)",
          "1518:         key = capi_get_key(ctx, pinfo->pwszContainerName, pinfo->pwszProvName,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1556:         break;",
          "1558:     case CAPI_LU_CONTNAME:",
          "1560:             WCHAR *contname, *provname;",
          "1561:             DWORD len;",
          "",
          "[Removed Lines]",
          "1559:         if (sizeof(TCHAR) != sizeof(char)) {",
          "",
          "[Added Lines]",
          "1546:         {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1568:                 (provname = alloca(len * sizeof(WCHAR)),",
          "1569:                  MultiByteToWideChar(CP_ACP, 0, ctx->cspname, -1,",
          "1570:                                      provname, len)))",
          "1572:                                    ctx->csptype, ctx->keytype);",
          "1576:         }",
          "1577:         break;",
          "1578:     }",
          "",
          "[Removed Lines]",
          "1571:                 key = capi_get_key(ctx, (TCHAR *)contname, (TCHAR *)provname,",
          "1573:         } else {",
          "1574:             key = capi_get_key(ctx, (TCHAR *)id, (TCHAR *)ctx->cspname,",
          "1575:                                ctx->csptype, ctx->keytype);",
          "",
          "[Added Lines]",
          "1558:                 key = capi_get_key(ctx, contname, provname,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1631:     CAPI_trace(ctx, \"capi_ctx_set_provname, name=%s, type=%d\\n\", pname, type);",
          "1632:     if (check) {",
          "1633:         HCRYPTPROV hprov;",
          "1644:         }",
          "1647:             CAPIerr(CAPI_F_CAPI_CTX_SET_PROVNAME,",
          "1648:                     CAPI_R_CRYPTACQUIRECONTEXT_ERROR);",
          "1649:             capi_addlasterror();",
          "",
          "[Removed Lines]",
          "1634:         LPTSTR name = NULL;",
          "1636:         if (sizeof(TCHAR) != sizeof(char)) {",
          "1637:             DWORD len;",
          "1638:             if ((len = MultiByteToWideChar(CP_ACP, 0, pname, -1, NULL, 0))) {",
          "1639:                 name = alloca(len * sizeof(WCHAR));",
          "1640:                 MultiByteToWideChar(CP_ACP, 0, pname, -1, (WCHAR *)name, len);",
          "1641:             }",
          "1642:         } else {",
          "1643:             name = (TCHAR *)pname;",
          "1645:         if (!name || !CryptAcquireContext(&hprov, NULL, name, type,",
          "1646:                                           CRYPT_VERIFYCONTEXT)) {",
          "",
          "[Added Lines]",
          "1618:         LPWSTR name = NULL;",
          "1619:         DWORD len;",
          "1621:         if ((len = MultiByteToWideChar(CP_ACP, 0, pname, -1, NULL, 0))) {",
          "1622:             name = alloca(len * sizeof(WCHAR));",
          "1623:             MultiByteToWideChar(CP_ACP, 0, pname, -1, (WCHAR *)name, len);",
          "1625:         if (name == NULL || !CryptAcquireContextW(&hprov, NULL, name, type,",
          "1626:                                                   CRYPT_VERIFYCONTEXT)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "389252a37e37d096d584899a4bfb47c7adce3710",
      "candidate_info": {
        "commit_hash": "389252a37e37d096d584899a4bfb47c7adce3710",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/389252a37e37d096d584899a4bfb47c7adce3710",
        "files": [
          "ssl/statem/statem_clnt.c"
        ],
        "message": "Fix a few more typos\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3066)\n(cherry picked from commit 1ee4b98e695cd041da931c10fbdaf82f0ee0f268)",
        "before_after_code_files": [
          "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
          "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c"
        ]
      }
    }
  ]
}