{
  "cve_id": "CVE-2020-15472",
  "cve_desc": "In nDPI through 3.2, the H.323 dissector is vulnerable to a heap-based buffer over-read in ndpi_search_h323 in lib/protocols/h323.c, as demonstrated by a payload packet length that is too short.",
  "repo": "ntop/nDPI",
  "patch_hash": "b7e666e465f138ae48ab81976726e67deed12701",
  "patch_info": {
    "commit_hash": "b7e666e465f138ae48ab81976726e67deed12701",
    "repo": "ntop/nDPI",
    "commit_url": "https://github.com/ntop/nDPI/commit/b7e666e465f138ae48ab81976726e67deed12701",
    "files": [
      "example/ndpiReader.c",
      "src/lib/protocols/h323.c",
      "tests/result/1kxun.pcap.out",
      "tests/result/6in4tunnel.pcap.out",
      "tests/result/EAQ.pcap.out",
      "tests/result/KakaoTalk_chat.pcap.out",
      "tests/result/KakaoTalk_talk.pcap.out",
      "tests/result/WebattackRCE.pcap.out",
      "tests/result/WebattackSQLinj.pcap.out",
      "tests/result/WebattackXSS.pcap.out",
      "tests/result/android.pcap.out",
      "tests/result/anyconnect-vpn.pcap.out",
      "tests/result/exe_download.pcap.out",
      "tests/result/exe_download_as_png.pcap.out",
      "tests/result/fuzz-2006-09-29-28586.pcap.out",
      "tests/result/instagram.pcap.out",
      "tests/result/iphone.pcap.out",
      "tests/result/malware.pcap.out",
      "tests/result/mpeg.pcap.out",
      "tests/result/netflix.pcap.out",
      "tests/result/ocs.pcap.out",
      "tests/result/pps.pcap.out",
      "tests/result/quickplay.pcap.out",
      "tests/result/starcraft_battle.pcap.out",
      "tests/result/waze.pcap.out",
      "tests/result/webex.pcap.out",
      "tests/result/weibo.pcap.out"
    ],
    "message": "Added fix to avoid potential heap buffer overflow in H.323 dissector Modified HTTP report information to make it closer to the HTTP field names",
    "before_after_code_files": [
      "example/ndpiReader.c||example/ndpiReader.c",
      "src/lib/protocols/h323.c||src/lib/protocols/h323.c"
    ]
  },
  "patch_diff": {
    "example/ndpiReader.c||example/ndpiReader.c": [
      "File: example/ndpiReader.c -> example/ndpiReader.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1204:     if(risk != NDPI_NO_RISK)",
      "1205:       NDPI_SET_BIT(flow->risk, risk);",
      "1208:      flow->http.url, flow->http.response_status_code);",
      "1210:     if(flow->http.content_type[0] != '\\0')",
      "1213:     if(flow->http.user_agent[0] != '\\0')",
      "1215:   }",
      "1217:   if(flow->risk) {",
      "",
      "[Removed Lines]",
      "1207:     fprintf(out, \"[URL: %s[StatusCode: %u]\",",
      "1211:       fprintf(out, \"[ContentType: %s]\", flow->http.content_type);",
      "1214:       fprintf(out, \"[UserAgent: %s]\", flow->http.user_agent);",
      "",
      "[Added Lines]",
      "1207:     fprintf(out, \"[URL: %s][StatusCode: %u]\",",
      "1211:       fprintf(out, \"[Content-Type: %s]\", flow->http.content_type);",
      "1214:       fprintf(out, \"[User-Agent: %s]\", flow->http.user_agent);",
      "",
      "---------------"
    ],
    "src/lib/protocols/h323.c||src/lib/protocols/h323.c": [
      "File: src/lib/protocols/h323.c -> src/lib/protocols/h323.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "36:     if(packet->payload_packet_len >= 4",
      "37:        && (packet->payload[0] == 0x03)",
      "38:        && (packet->payload[1] == 0x00)) {",
      "56:    }",
      "68:  }",
      "69:       }",
      "70:   } else if(packet->udp != NULL) {",
      "71:     sport = ntohs(packet->udp->source), dport = ntohs(packet->udp->dest);",
      "72:     NDPI_LOG_DBG2(ndpi_struct, \"calculated dport over udp\\n\");",
      "",
      "[Removed Lines]",
      "39:  struct tpkt *t = (struct tpkt*)packet->payload;",
      "40:  u_int16_t len = ntohs(t->len);",
      "42:  if(packet->payload_packet_len == len) {",
      "44:      We need to check if this packet is in reality",
      "45:      a RDP (Remote Desktop) packet encapsulated on TPTK",
      "48:    if(packet->payload[4] == (packet->payload_packet_len - sizeof(struct tpkt) - 1)) {",
      "50:      if((packet->payload[5] == 0xE0 /* CC Connect Request */)",
      "51:         || (packet->payload[5] == 0xD0 /* CC Connect Confirm */)) {",
      "52:        NDPI_LOG_INFO(ndpi_struct, \"found RDP\\n\");",
      "53:        ndpi_set_detected_protocol(ndpi_struct, flow, NDPI_PROTOCOL_RDP, NDPI_PROTOCOL_UNKNOWN);",
      "54:        return;",
      "55:      }",
      "58:    flow->l4.tcp.h323_valid_packets++;",
      "60:    if(flow->l4.tcp.h323_valid_packets >= 2) {",
      "61:      NDPI_LOG_INFO(ndpi_struct, \"found H323 broadcast\\n\");",
      "62:      ndpi_set_detected_protocol(ndpi_struct, flow, NDPI_PROTOCOL_H323, NDPI_PROTOCOL_UNKNOWN);",
      "63:    }",
      "64:  } else {",
      "66:    NDPI_EXCLUDE_PROTO(ndpi_struct, flow);",
      "67:    return;",
      "",
      "[Added Lines]",
      "39:       struct tpkt *t = (struct tpkt*)packet->payload;",
      "40:       u_int16_t len = ntohs(t->len);",
      "42:       if(packet->payload_packet_len == len) {",
      "44:    We need to check if this packet is in reality",
      "45:    a RDP (Remote Desktop) packet encapsulated on TPTK",
      "48:  if(packet->payload[4] == (packet->payload_packet_len - sizeof(struct tpkt) - 1)) {",
      "50:    if((packet->payload[5] == 0xE0 /* CC Connect Request */)",
      "51:       || (packet->payload[5] == 0xD0 /* CC Connect Confirm */)) {",
      "52:      NDPI_LOG_INFO(ndpi_struct, \"found RDP\\n\");",
      "53:      ndpi_set_detected_protocol(ndpi_struct, flow, NDPI_PROTOCOL_RDP, NDPI_PROTOCOL_UNKNOWN);",
      "54:      return;",
      "56:  }",
      "58:  flow->l4.tcp.h323_valid_packets++;",
      "60:  if(flow->l4.tcp.h323_valid_packets >= 2) {",
      "61:    NDPI_LOG_INFO(ndpi_struct, \"found H323 broadcast\\n\");",
      "62:    ndpi_set_detected_protocol(ndpi_struct, flow, NDPI_PROTOCOL_H323, NDPI_PROTOCOL_UNKNOWN);",
      "64:       } else {",
      "66:  NDPI_EXCLUDE_PROTO(ndpi_struct, flow);",
      "67:  return;",
      "69:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "80:  return;",
      "81:       }",
      "102:       }",
      "103:   }",
      "105: }",
      "107: void init_h323_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)",
      "",
      "[Removed Lines]",
      "83:     if(sport == 1719 || dport == 1719)",
      "84:       {",
      "85:         if(packet->payload[0] == 0x16 && packet->payload[1] == 0x80 && packet->payload[4] == 0x06 && packet->payload[5] == 0x00)",
      "86:    {",
      "87:      NDPI_LOG_INFO(ndpi_struct, \"found H323 broadcast\\n\");",
      "88:      ndpi_set_detected_protocol(ndpi_struct, flow, NDPI_PROTOCOL_H323, NDPI_PROTOCOL_UNKNOWN);",
      "89:      return;",
      "90:    }",
      "91:         else if(packet->payload_packet_len >= 20 && packet->payload_packet_len <= 117)",
      "92:    {",
      "93:      NDPI_LOG_INFO(ndpi_struct, \"found H323 broadcast\\n\");",
      "94:      ndpi_set_detected_protocol(ndpi_struct, flow, NDPI_PROTOCOL_H323, NDPI_PROTOCOL_UNKNOWN);",
      "95:      return;",
      "96:    }",
      "97:         else",
      "98:    {",
      "99:      NDPI_EXCLUDE_PROTO(ndpi_struct, flow);",
      "100:      return;",
      "101:    }",
      "",
      "[Added Lines]",
      "83:     if(sport == 1719 || dport == 1719) {",
      "84:       if((packet->payload_packet_len >= 5)",
      "85:   && (packet->payload[0] == 0x16)",
      "86:   && (packet->payload[1] == 0x80)",
      "87:   && (packet->payload[4] == 0x06)",
      "88:   && (packet->payload[5] == 0x00)) {",
      "89:  NDPI_LOG_INFO(ndpi_struct, \"found H323 broadcast\\n\");",
      "90:  ndpi_set_detected_protocol(ndpi_struct, flow, NDPI_PROTOCOL_H323, NDPI_PROTOCOL_UNKNOWN);",
      "91:  return;",
      "92:       } else if(packet->payload_packet_len >= 20 && packet->payload_packet_len <= 117) {",
      "93:  NDPI_LOG_INFO(ndpi_struct, \"found H323 broadcast\\n\");",
      "94:  ndpi_set_detected_protocol(ndpi_struct, flow, NDPI_PROTOCOL_H323, NDPI_PROTOCOL_UNKNOWN);",
      "95:  return;",
      "96:       } else {",
      "97:  NDPI_EXCLUDE_PROTO(ndpi_struct, flow);",
      "98:  return;",
      "100:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e45237a93f771f3d4aeb6c2360469f09c0282b58",
      "candidate_info": {
        "commit_hash": "e45237a93f771f3d4aeb6c2360469f09c0282b58",
        "repo": "ntop/nDPI",
        "commit_url": "https://github.com/ntop/nDPI/commit/e45237a93f771f3d4aeb6c2360469f09c0282b58",
        "files": [
          "example/ndpiReader.c",
          "example/reader_util.c",
          "example/reader_util.h",
          "src/lib/protocols/http.c"
        ],
        "message": "Removed http:// from HTTP url Reported URL in ndpiReader",
        "before_after_code_files": [
          "example/ndpiReader.c||example/ndpiReader.c",
          "example/reader_util.c||example/reader_util.c",
          "example/reader_util.h||example/reader_util.h",
          "src/lib/protocols/http.c||src/lib/protocols/http.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "example/ndpiReader.c||example/ndpiReader.c"
          ],
          "candidate": [
            "example/ndpiReader.c||example/ndpiReader.c"
          ]
        }
      },
      "candidate_diff": {
        "example/ndpiReader.c||example/ndpiReader.c": [
          "File: example/ndpiReader.c -> example/ndpiReader.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1138:       }",
          "1139:     }",
          "1141:     if(flow->ssh_tls.ssl_version != 0) fprintf(out, \"[%s]\", ndpi_ssl_version2str(flow->ssh_tls.ssl_version));",
          "1142:     if(flow->ssh_tls.client_info[0] != '\\0') fprintf(out, \"[Client: %s]\", flow->ssh_tls.client_info);",
          "1143:     if(flow->ssh_tls.client_hassh[0] != '\\0') fprintf(out, \"[HASSH-C: %s]\", flow->ssh_tls.client_hassh);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1141:     if(flow->http.url[0] != '\\0')",
          "1142:       fprintf(out, \"[URL: %s][StatusCode: %u]\",",
          "1143:        flow->http.url, flow->http.response_status_code);",
          "",
          "---------------"
        ],
        "example/reader_util.c||example/reader_util.c": [
          "File: example/reader_util.c -> example/reader_util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "976:   else if(flow->detected_protocol.app_protocol == NDPI_PROTOCOL_UBNTAC2) {",
          "977:     snprintf(flow->info, sizeof(flow->info), \"%s\", flow->ndpi_flow->protos.ubntac2.version);",
          "978:   }",
          "981:     if(flow->detected_protocol.app_protocol == NDPI_PROTOCOL_SSH) {",
          "982:       snprintf(flow->ssh_tls.client_info, sizeof(flow->ssh_tls.client_info), \"%s\",",
          "",
          "[Removed Lines]",
          "979:   if(flow->detected_protocol.app_protocol != NDPI_PROTOCOL_DNS) {",
          "",
          "[Added Lines]",
          "980:   else if(flow->detected_protocol.master_protocol == NDPI_PROTOCOL_HTTP) {",
          "981:     if(flow->ndpi_flow->http.url != NULL) {",
          "982:       snprintf(flow->http.url, sizeof(flow->http.url), \"%s\", flow->ndpi_flow->http.url);",
          "983:       flow->http.response_status_code = flow->ndpi_flow->http.response_status_code;",
          "984:     }",
          "985:   }",
          "986:   else if(flow->detected_protocol.app_protocol != NDPI_PROTOCOL_DNS) {",
          "",
          "---------------"
        ],
        "example/reader_util.h||example/reader_util.h": [
          "File: example/reader_util.h -> example/reader_util.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:     u_int16_t server_cipher;",
          "168:     ndpi_cipher_weakness client_unsafe_cipher, server_unsafe_cipher;",
          "169:   } ssh_tls;",
          "171:   void *src_id, *dst_id;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "171:   struct {",
          "172:     char url[256];",
          "173:     u_int response_status_code;",
          "174:   } http;",
          "",
          "---------------"
        ],
        "src/lib/protocols/http.c||src/lib/protocols/http.c": [
          "File: src/lib/protocols/http.c -> src/lib/protocols/http.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "162:     if((flow->http.url == NULL)",
          "163:        && (packet->http_url_name.len > 0)",
          "164:        && (packet->host_line.len > 0)) {",
          "167:       flow->http.url = ndpi_malloc(len);",
          "168:       if(flow->http.url) {",
          "172:   packet->http_url_name.len);",
          "173:  flow->http.url[len-1] = '\\0';",
          "174:       }",
          "",
          "[Removed Lines]",
          "169:  strcpy(flow->http.url, \"http://\");",
          "170:  strncpy(&flow->http.url[7], (char*)packet->host_line.ptr, packet->host_line.len);",
          "171:  strncpy(&flow->http.url[7+packet->host_line.len], (char*)packet->http_url_name.ptr,",
          "",
          "[Added Lines]",
          "165:       int len = packet->http_url_name.len + packet->host_line.len + 1;",
          "169:  strncpy(flow->http.url, (char*)packet->host_line.ptr, packet->host_line.len);",
          "170:  strncpy(&flow->http.url[packet->host_line.len], (char*)packet->http_url_name.ptr,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a3a85106a1eb59bc87cafa06796ea404f450eda9",
      "candidate_info": {
        "commit_hash": "a3a85106a1eb59bc87cafa06796ea404f450eda9",
        "repo": "ntop/nDPI",
        "commit_url": "https://github.com/ntop/nDPI/commit/a3a85106a1eb59bc87cafa06796ea404f450eda9",
        "files": [
          "example/ndpiReader.c",
          "src/include/ndpi_api.h",
          "src/include/ndpi_typedefs.h",
          "src/lib/ndpi_utils.c",
          "tests/pcap/WebattackSQLinj.pcap",
          "tests/pcap/WebattackXSS.pcap"
        ],
        "message": "Implemented SQL Injection and XSS attack detection",
        "before_after_code_files": [
          "example/ndpiReader.c||example/ndpiReader.c",
          "src/include/ndpi_api.h||src/include/ndpi_api.h",
          "src/include/ndpi_typedefs.h||src/include/ndpi_typedefs.h",
          "src/lib/ndpi_utils.c||src/lib/ndpi_utils.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "example/ndpiReader.c||example/ndpiReader.c"
          ],
          "candidate": [
            "example/ndpiReader.c||example/ndpiReader.c"
          ]
        }
      },
      "candidate_diff": {
        "example/ndpiReader.c||example/ndpiReader.c": [
          "File: example/ndpiReader.c -> example/ndpiReader.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1001: char* printUrlRisk(ndpi_url_risk risk) {",
          "1002:   switch(risk) {",
          "1003:     case ndpi_url_no_problem:",
          "1004:       return(\"\");",
          "1005:       break;",
          "1006:     case ndpi_url_possible_xss:",
          "1007:       return(\" ** XSS **\");",
          "1008:       break;",
          "1009:     case ndpi_url_possible_sql_injection:",
          "1010:       return(\" ** SQL Injection **\");",
          "1011:       break;",
          "1012:   }",
          "1014:   return(\"\");",
          "1015: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1143:     }",
          "1145:     if(flow->http.url[0] != '\\0')",
          "1148:        flow->http.content_type, flow->http.user_agent);",
          "1150:     if(flow->ssh_tls.ssl_version != 0) fprintf(out, \"[%s]\", ndpi_ssl_version2str(flow->ssh_tls.ssl_version, &known_tls));",
          "",
          "[Removed Lines]",
          "1146:       fprintf(out, \"[URL: %s][StatusCode: %u][ContentType: %s][UserAgent: %s]\",",
          "1147:        flow->http.url, flow->http.response_status_code,",
          "",
          "[Added Lines]",
          "1163:       fprintf(out, \"[URL: %s%s][StatusCode: %u][ContentType: %s][UserAgent: %s]\",",
          "1164:        flow->http.url,",
          "1165:        printUrlRisk(ndpi_validate_url(flow->http.url)),",
          "1166:        flow->http.response_status_code,",
          "",
          "---------------"
        ],
        "src/include/ndpi_api.h||src/include/ndpi_api.h": [
          "File: src/include/ndpi_api.h -> src/include/ndpi_api.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "940:   const char* ndpi_data_ratio2str(float ratio);",
          "943: #ifdef __cplusplus",
          "944: }",
          "945: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "944:   ndpi_url_risk ndpi_validate_url(char *url);",
          "",
          "---------------"
        ],
        "src/include/ndpi_typedefs.h||src/include/ndpi_typedefs.h": [
          "File: src/include/ndpi_typedefs.h -> src/include/ndpi_typedefs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:        ndpi_l4_proto_tcp_and_udp,",
          "43: } ndpi_l4_proto_info;",
          "46: typedef enum {",
          "47:        ndpi_preorder,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: typedef enum {",
          "46:    ndpi_url_no_problem = 0,",
          "47:    ndpi_url_possible_xss,",
          "48:    ndpi_url_possible_sql_injection",
          "49:   } ndpi_url_risk;",
          "",
          "---------------"
        ],
        "src/lib/ndpi_utils.c||src/lib/ndpi_utils.c": [
          "File: src/lib/ndpi_utils.c -> src/lib/ndpi_utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "857:      u_int32_t src_v4, u_int32_t dst_v4,",
          "858:      struct ndpi_in6_addr *src_v6, struct ndpi_in6_addr *dst_v6,",
          "859:      u_int16_t src_port, u_int16_t dst_port,",
          "861:      ndpi_serializer *serializer) {",
          "862:   char buf[64], src_name[32], dst_name[32];",
          "",
          "[Removed Lines]",
          "860:      ndpi_protocol l7_protocol,",
          "",
          "[Added Lines]",
          "860:      ndpi_protocol l7_protocol,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "976:     ndpi_serialize_start_of_block(serializer, \"http\");",
          "977:     if(flow->host_server_name[0] != '\\0')",
          "978:       ndpi_serialize_string_string(serializer, \"hostname\", (const char*)flow->host_server_name);",
          "980:     ndpi_serialize_string_uint32(serializer,   \"code\", flow->http.response_status_code);",
          "981:     ndpi_serialize_string_string(serializer,   \"content_type\", flow->http.content_type);",
          "982:     ndpi_serialize_string_string(serializer,   \"user_agent\", flow->http.user_agent);",
          "",
          "[Removed Lines]",
          "979:     ndpi_serialize_string_string(serializer,   \"url\", flow->http.url);",
          "",
          "[Added Lines]",
          "979:     ndpi_serialize_string_string(serializer,   \"url\", flow->http.url);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1041:  ndpi_serialize_string_string(serializer, \"issuer\", flow->protos.stun_ssl.ssl.server_organization);",
          "1043:  if(before) {",
          "1045:           ndpi_serialize_string_string(serializer, \"notbefore\", notBefore);",
          "1046:         }",
          "",
          "[Removed Lines]",
          "1044:           strftime(notBefore, sizeof(notBefore), \"%F %T\", before);",
          "",
          "[Added Lines]",
          "1044:           strftime(notBefore, sizeof(notBefore), \"%F %T\", before);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1072: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1077:   /dv/vulnerabilities/xss_r/?name=%3Cscript%3Econsole.log%28%27JUL2D3WXHEGWRAFJE2PI7OS71Z4Z8RFUHXGNFLUFYVP6M3OL55%27%29%3Bconsole.log%28document.cookie%29%3B%3C%2Fscript%3E",
          "1078:   /dv/vulnerabilities/sqli/?id=1%27+and+1%3D1+union+select+null%2C+table_name+from+information_schema.tables%23&Submit=Submit",
          "1082: static int ishex(int x) {",
          "1083:   return(x >= '0' && x <= '9') || (x >= 'a' && x <= 'f') || (x >= 'A' && x <= 'F');",
          "1084: }",
          "1088: static int ndpi_url_decode(const char *s, char *out) {",
          "1089:   char *o;",
          "1090:   const char *end = s + strlen(s);",
          "1091:   int c;",
          "1093:   for(o = out; s <= end; o++) {",
          "1094:     c = *s++;",
          "1095:     if(c == '+') c = ' ';",
          "1096:     else if(c == '%' && (!ishex(*s++)||",
          "1097:      !ishex(*s++)||",
          "1098:      !sscanf(s - 2, \"%2x\", &c)))",
          "1099:       return(-1);",
          "1101:     if(out) *o = c;",
          "1102:   }",
          "1104:   return(o - out);",
          "1105: }",
          "1111: static int find_occurrency(char *str, char *what) {",
          "1112:   char *found = strstr(str, what);",
          "1113:   u_int len;",
          "1115: #ifdef URL_CHECK_DEBUG",
          "1116:   printf(\"%s() [%s][%s]\\n\", __FUNCTION__, str, what);",
          "1117: #endif",
          "1119:   if(!found) return(0);",
          "1121:   len = strlen(what);",
          "1123:   if((found[len] != '\\0') && (found[len] != ' ')",
          "1124:      && ((found == str) || (found[-1] == ' ')))",
          "1125:     return(1);",
          "1126:   else",
          "1127:     return(find_occurrency(&found[len], what));",
          "1128: }",
          "1132: static int ndpi_check_tokens(char* query, char* keywords[]) {",
          "1133: #ifdef URL_CHECK_DEBUG",
          "1134:   printf(\"%s() [%s]\\n\", __FUNCTION__, query);",
          "1135: #endif",
          "1137:   for(int i=0; keywords[i] != NULL; i++) {",
          "1138:     if(find_occurrency(query, keywords[i]) > 0)",
          "1139:       return(1);",
          "1140:   }",
          "1142:   return(0);",
          "1143: }",
          "1147: static int ndpi_is_sql_injection(char* query) {",
          "1148:   char* sql_keywords[]  = { \"select\", \"from\", \"where\", \"any\", \"all\", \"join\", \"inner\", \"left\", \"right\", \"full\",",
          "1149:        \"table\", \"alter\", \"create\", \"delete\", \"union\", \"update\", \"drop\", \"group\", \"order\",",
          "1150:        \"limit\", \"primary\", \"column\", NULL };",
          "1151:   return(ndpi_check_tokens(query, sql_keywords));",
          "1152: }",
          "1156: static int ndpi_is_xss_injection(char* query) {",
          "1157:   char* js_keywords[]  = { \"<script>\", \"console.\", \"log.\", NULL };",
          "1158:   return(ndpi_check_tokens(query, js_keywords));",
          "1159: }",
          "1163: ndpi_url_risk ndpi_validate_url(char *url) {",
          "1164:   char *orig_str = NULL, *str = NULL, *question_mark = strchr(url, '?');",
          "1165:   ndpi_url_risk rc = ndpi_url_no_problem;",
          "1167:   if(question_mark) {",
          "1168:     char *tmp;",
          "1172:     if(!str) goto validate_rc;",
          "1174:     str = strtok_r(str, \"&\", &tmp);",
          "1176:     while(str != NULL) {",
          "1177:       char *value = strchr(str, '=');",
          "1178:       char *decoded;",
          "1180:       if(!value)",
          "1181:  break;",
          "1182:       else",
          "1183:  value = &value[1];",
          "1185:       if(value[0] != '\\0') {",
          "1186:  if(!(decoded = (char*)ndpi_malloc(strlen(value)+1)))",
          "1187:    break;",
          "1189:  if(ndpi_url_decode(value, decoded) < 0) {",
          "1191:  } else if(decoded[0] != '\\0') {",
          "1194:    if(ndpi_is_xss_injection(decoded))",
          "1195:      rc = ndpi_url_possible_xss;",
          "1196:    else if(ndpi_is_sql_injection(decoded))",
          "1197:      rc = ndpi_url_possible_sql_injection;",
          "1199: #ifdef URL_CHECK_DEBUG",
          "1200:    printf(\"=>> [rc: %u] %s\\n\", rc, decoded);",
          "1201: #endif",
          "1202:  }",
          "1204:  ndpi_free(decoded);",
          "1206:  if(rc != ndpi_url_no_problem)",
          "1207:    break;",
          "1208:       }",
          "1210:       str = strtok_r(NULL, \"&\", &tmp);",
          "1211:     }",
          "1212:   }",
          "1214:  validate_rc:",
          "1215:   if(orig_str) ndpi_free(orig_str);",
          "1216:   return(rc);",
          "1217: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4802987178a0a49ea5ff4a01e92a35b5517734dc",
      "candidate_info": {
        "commit_hash": "4802987178a0a49ea5ff4a01e92a35b5517734dc",
        "repo": "ntop/nDPI",
        "commit_url": "https://github.com/ntop/nDPI/commit/4802987178a0a49ea5ff4a01e92a35b5517734dc",
        "files": [
          "example/ndpiReader.c",
          "example/reader_util.c",
          "example/reader_util.h",
          "src/include/ndpi_typedefs.h",
          "src/lib/ndpi_main.c",
          "src/lib/ndpi_utils.c",
          "src/lib/protocols/http.c",
          "tests/result/1kxun.pcap.out",
          "tests/result/6in4tunnel.pcap.out",
          "tests/result/EAQ.pcap.out",
          "tests/result/KakaoTalk_chat.pcap.out",
          "tests/result/KakaoTalk_talk.pcap.out",
          "tests/result/anyconnect-vpn.pcap.out",
          "tests/result/instagram.pcap.out",
          "tests/result/malware.pcap.out",
          "tests/result/mpeg.pcap.out",
          "tests/result/netflix.pcap.out",
          "tests/result/ocs.pcap.out",
          "tests/result/pps.pcap.out",
          "tests/result/quickplay.pcap.out",
          "tests/result/starcraft_battle.pcap.out",
          "tests/result/waze.pcap.out",
          "tests/result/webex.pcap.out",
          "tests/result/weibo.pcap.out"
        ],
        "message": "Initial work towards HTTP content-type export",
        "before_after_code_files": [
          "example/ndpiReader.c||example/ndpiReader.c",
          "example/reader_util.c||example/reader_util.c",
          "example/reader_util.h||example/reader_util.h",
          "src/include/ndpi_typedefs.h||src/include/ndpi_typedefs.h",
          "src/lib/ndpi_main.c||src/lib/ndpi_main.c",
          "src/lib/ndpi_utils.c||src/lib/ndpi_utils.c",
          "src/lib/protocols/http.c||src/lib/protocols/http.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "example/ndpiReader.c||example/ndpiReader.c"
          ],
          "candidate": [
            "example/ndpiReader.c||example/ndpiReader.c"
          ]
        }
      },
      "candidate_diff": {
        "example/ndpiReader.c||example/ndpiReader.c": [
          "File: example/ndpiReader.c -> example/ndpiReader.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1143:     }",
          "1145:     if(flow->http.url[0] != '\\0')",
          "1149:     if(flow->ssh_tls.ssl_version != 0) fprintf(out, \"[%s]\", ndpi_ssl_version2str(flow->ssh_tls.ssl_version, &known_tls));",
          "1150:     if(flow->ssh_tls.client_info[0] != '\\0') fprintf(out, \"[Client: %s]\", flow->ssh_tls.client_info);",
          "",
          "[Removed Lines]",
          "1146:       fprintf(out, \"[URL: %s][StatusCode: %u]\",",
          "1147:        flow->http.url, flow->http.response_status_code);",
          "",
          "[Added Lines]",
          "1146:       fprintf(out, \"[URL: %s][StatusCode: %u][ContentType: %s][UserAgent: %s]\",",
          "1147:        flow->http.url, flow->http.response_status_code,",
          "1148:        flow->http.content_type, flow->http.user_agent);",
          "",
          "---------------"
        ],
        "example/reader_util.c||example/reader_util.c": [
          "File: example/reader_util.c -> example/reader_util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "980:     if(flow->ndpi_flow->http.url != NULL) {",
          "981:       snprintf(flow->http.url, sizeof(flow->http.url), \"%s\", flow->ndpi_flow->http.url);",
          "982:       flow->http.response_status_code = flow->ndpi_flow->http.response_status_code;",
          "983:     }",
          "984:   } else if(is_ndpi_proto(flow, NDPI_PROTOCOL_TELNET)) {",
          "985:     snprintf(flow->telnet.username, sizeof(flow->telnet.username), \"%s\", flow->ndpi_flow->protos.telnet.username);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "983:       snprintf(flow->http.content_type, sizeof(flow->http.content_type), \"%s\", flow->ndpi_flow->http.content_type ? flow->ndpi_flow->http.content_type : \"\");",
          "984:       snprintf(flow->http.user_agent, sizeof(flow->http.user_agent), \"%s\", flow->ndpi_flow->http.user_agent ? flow->ndpi_flow->http.user_agent : \"\");",
          "",
          "---------------"
        ],
        "example/reader_util.h||example/reader_util.h": [
          "File: example/reader_util.h -> example/reader_util.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "194:   } ssh_tls;",
          "196:   struct {",
          "198:     u_int response_status_code;",
          "199:   } http;",
          "",
          "[Removed Lines]",
          "197:     char url[256];",
          "",
          "[Added Lines]",
          "197:     char url[256], content_type[64], user_agent[128];",
          "",
          "---------------"
        ],
        "src/include/ndpi_typedefs.h||src/include/ndpi_typedefs.h": [
          "File: src/include/ndpi_typedefs.h -> src/include/ndpi_typedefs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1169:   struct {",
          "1170:     ndpi_http_method method;",
          "1172:     u_int8_t num_request_headers, num_response_headers;",
          "",
          "[Removed Lines]",
          "1171:     char *url, *content_type;",
          "",
          "[Added Lines]",
          "1171:     char *url, *content_type, *user_agent;",
          "",
          "---------------"
        ],
        "src/lib/ndpi_main.c||src/lib/ndpi_main.c": [
          "File: src/lib/ndpi_main.c -> src/lib/ndpi_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3737:  if(flow->http.url)          ndpi_free(flow->http.url);",
          "3738:  if(flow->http.content_type) ndpi_free(flow->http.content_type);",
          "3740:  backup  = flow->num_processed_pkts;",
          "3741:  backup1 = flow->guessed_protocol_id;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3739:  if(flow->http.user_agent)   ndpi_free(flow->http.user_agent);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5067:       || strncasecmp((const char *)packet->line[packet->parsed_lines].ptr, \"Content-type: \", 14) == 0)) {",
          "5068:         packet->content_line.ptr = &packet->line[packet->parsed_lines].ptr[14];",
          "5069:         packet->content_line.len = packet->line[packet->parsed_lines].len - 14;",
          "5070:         packet->http_num_headers++;",
          "5071:       }",
          "5075:         packet->content_line.ptr = &packet->line[packet->parsed_lines].ptr[13];",
          "5076:         packet->content_line.len = packet->line[packet->parsed_lines].len - 13;",
          "5077:         packet->http_num_headers++;",
          "5078:       }",
          "5080:       if(packet->line[packet->parsed_lines].len > 8",
          "5081:   && strncasecmp((const char *)packet->line[packet->parsed_lines].ptr, \"Accept: \", 8) == 0) {",
          "",
          "[Removed Lines]",
          "5073:       if(packet->line[packet->parsed_lines].len > 13",
          "5074:   && strncasecmp((const char *)packet->line[packet->parsed_lines].ptr, \"Content-type:\", 13) == 0) {",
          "",
          "[Added Lines]",
          "5072:  while((packet->content_line.len > 0) && (packet->content_line.ptr[0] == ' '))",
          "5073:    packet->content_line.len--, packet->content_line.ptr++;",
          "5078:       if((packet->content_line.len == 0)",
          "5079:   && (packet->line[packet->parsed_lines].len > 13)",
          "5080:   && (strncasecmp((const char *)packet->line[packet->parsed_lines].ptr, \"Content-type:\", 13) == 0)) {",
          "5086:       if(packet->content_line.len > 0) {",
          "5088:  char *c = strchr((char*)packet->content_line.ptr, ';');",
          "5090:  if(c != NULL) {",
          "5091:    packet->content_line.len = c - (char*)packet->content_line.ptr;",
          "5092:  }",
          "5093:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6250: void ndpi_free_flow(struct ndpi_flow_struct *flow) {",
          "6251:   if(flow) {",
          "6253:     if(flow->http.content_type) ndpi_free(flow->http.content_type);",
          "6255:     if(flow->l4_proto == IPPROTO_TCP) {",
          "6256:       if(flow->l4.tcp.tls_srv_cert_fingerprint_ctx)",
          "",
          "[Removed Lines]",
          "6252:   if(flow->http.url)          ndpi_free(flow->http.url);",
          "",
          "[Added Lines]",
          "6268:   if(flow->http.url)            ndpi_free(flow->http.url);",
          "6270:     if(flow->http.user_agent)   ndpi_free(flow->http.user_agent);",
          "",
          "---------------"
        ],
        "src/lib/ndpi_utils.c||src/lib/ndpi_utils.c": [
          "File: src/lib/ndpi_utils.c -> src/lib/ndpi_utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "966:     ndpi_serialize_end_of_block(serializer);",
          "967:     break;",
          "969:   case NDPI_PROTOCOL_HTTP:",
          "970:     ndpi_serialize_start_of_block(serializer, \"http\");",
          "971:     if(flow->host_server_name[0] != '\\0')",
          "972:       ndpi_serialize_string_string(serializer, \"hostname\", (const char*)flow->host_server_name);",
          "974:     ndpi_serialize_string_uint32(serializer,   \"code\", flow->http.response_status_code);",
          "975:     ndpi_serialize_end_of_block(serializer);",
          "976:     break;",
          "",
          "[Removed Lines]",
          "973:     ndpi_serialize_string_string(serializer,   \"url\", flow->http.url);",
          "",
          "[Added Lines]",
          "969:   case NDPI_PROTOCOL_TELNET:",
          "970:     ndpi_serialize_start_of_block(serializer, \"telnet\");",
          "971:     ndpi_serialize_string_string(serializer, \"username\", flow->protos.telnet.username);",
          "972:     ndpi_serialize_end_of_block(serializer);",
          "973:     break;",
          "979:     ndpi_serialize_string_string(serializer,   \"url\", flow->http.url);",
          "981:     ndpi_serialize_string_string(serializer,   \"content_type\", flow->http.content_type);",
          "982:     ndpi_serialize_string_string(serializer,   \"user_agent\", flow->http.user_agent);",
          "",
          "---------------"
        ],
        "src/lib/protocols/http.c||src/lib/protocols/http.c": [
          "File: src/lib/protocols/http.c -> src/lib/protocols/http.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:     ndpi_set_detected_protocol(ndpi_struct, flow, flow->guessed_host_protocol_id, NDPI_PROTOCOL_HTTP);",
          "72:   } else",
          "73:     ndpi_set_detected_protocol(ndpi_struct, flow, NDPI_PROTOCOL_HTTP, NDPI_PROTOCOL_UNKNOWN);",
          "77:   flow->max_extra_packets_to_check = 5;",
          "78:   flow->extra_packets_func = ndpi_search_http_tcp_again;",
          "79:   flow->http_detected = 1, flow->guessed_category = category;",
          "",
          "[Removed Lines]",
          "76:   flow->check_extra_packets = 1;",
          "",
          "[Added Lines]",
          "76:   flow->check_extra_packets = 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134:   struct ndpi_packet_struct *packet = &flow->packet;",
          "136:   ndpi_set_detected_protocol(ndpi_struct, flow, NDPI_PROTOCOL_HTTP, NDPI_PROTOCOL_UNKNOWN);",
          "141: #if defined(NDPI_PROTOCOL_1KXUN) || defined(NDPI_PROTOCOL_IQIYI)",
          "",
          "[Removed Lines]",
          "138:   if(flow->http_detected && (flow->http.response_status_code != 0))",
          "139:     return;",
          "",
          "[Added Lines]",
          "138:   if(flow->http_detected && (flow->http.response_status_code != 0))",
          "139:     return;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "200:       }",
          "201:     }",
          "214:   if(packet->user_agent_line.ptr != NULL && packet->user_agent_line.len != 0) {",
          "216:        Format examples:",
          "",
          "[Removed Lines]",
          "203:     if((flow->http.content_type == NULL) && (packet->content_line.len > 0)) {",
          "204:       int len = packet->content_line.len + 1;",
          "206:       flow->http.content_type = ndpi_malloc(len);",
          "207:       if(flow->http.content_type) {",
          "208:  strncpy(flow->http.content_type, (char*)packet->content_line.ptr,",
          "209:   packet->content_line.len);",
          "210:  flow->http.content_type[packet->content_line.len] = '\\0';",
          "211:       }",
          "212:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "276:       }",
          "277:     }",
          "279:     NDPI_LOG_DBG2(ndpi_struct, \"User Agent Type line found %.*s\\n\",",
          "280:     packet->user_agent_line.len, packet->user_agent_line.ptr);",
          "281:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "268:     if(flow->http.user_agent == NULL) {",
          "269:       int len = packet->user_agent_line.len + 1;",
          "271:       flow->http.user_agent = ndpi_malloc(len);",
          "272:       if(flow->http.user_agent) {",
          "273:  strncpy(flow->http.user_agent, (char*)packet->user_agent_line.ptr,",
          "274:   packet->user_agent_line.len);",
          "275:  flow->http.user_agent[packet->user_agent_line.len] = '\\0';",
          "276:       }",
          "277:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "383:     NDPI_LOG_DBG2(ndpi_struct, \"Content Type line found %.*s\\n\",",
          "384:     packet->content_line.len, packet->content_line.ptr);",
          "386:     if(flow->http_detected) {",
          "387:       ndpi_protocol_match_result ret_match;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "386:     if((flow->http.content_type == NULL) && (packet->content_line.len > 0)) {",
          "387:       int len = packet->content_line.len + 1;",
          "389:       flow->http.content_type = ndpi_malloc(len);",
          "390:       if(flow->http.content_type) {",
          "391:  strncpy(flow->http.content_type, (char*)packet->content_line.ptr,",
          "392:   packet->content_line.len);",
          "393:  flow->http.content_type[packet->content_line.len] = '\\0';",
          "394:       }",
          "395:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "492:  }",
          "495:         check_content_type_and_change_protocol(ndpi_struct, flow);",
          "496:         return;",
          "497:       }",
          "",
          "[Removed Lines]",
          "494:         ndpi_int_http_add_connection(ndpi_struct, flow, NDPI_PROTOCOL_HTTP);",
          "",
          "[Added Lines]",
          "505:  ndpi_parse_packet_line_info(ndpi_struct, flow);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "688:  flow->http_detected = 1;",
          "689:  NDPI_LOG_DBG2(ndpi_struct,",
          "690:         \"HTTP START Found, we will look further for the response...\\n\");",
          "692:         check_content_type_and_change_protocol(ndpi_struct, flow);",
          "693:         return;",
          "694:       }",
          "",
          "[Removed Lines]",
          "691:  flow->l4.tcp.http_stage = packet->packet_direction + 1; // packet_direction 0: stage 1, packet_direction 1: stage 2",
          "",
          "[Added Lines]",
          "702:  flow->l4.tcp.http_stage = packet->packet_direction + 1; // packet_direction 0: stage 1, packet_direction 1: stage 2",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e5e69d0f7ab382e3507660fe752027c09e32310e",
      "candidate_info": {
        "commit_hash": "e5e69d0f7ab382e3507660fe752027c09e32310e",
        "repo": "ntop/nDPI",
        "commit_url": "https://github.com/ntop/nDPI/commit/e5e69d0f7ab382e3507660fe752027c09e32310e",
        "files": [
          "example/ndpiReader.c",
          "example/reader_util.c",
          "example/reader_util.h",
          "src/include/ndpi_api.h.in",
          "src/include/ndpi_typedefs.h",
          "src/lib/ndpi_main.c",
          "src/lib/ndpi_utils.c",
          "src/lib/protocols/http.c",
          "tests/result/1kxun.pcap.out",
          "tests/result/6in4tunnel.pcap.out",
          "tests/result/EAQ.pcap.out",
          "tests/result/KakaoTalk_chat.pcap.out",
          "tests/result/KakaoTalk_talk.pcap.out",
          "tests/result/WebattackRCE.pcap.out",
          "tests/result/WebattackSQLinj.pcap.out",
          "tests/result/WebattackXSS.pcap.out",
          "tests/result/android.pcap.out",
          "tests/result/anyconnect-vpn.pcap.out",
          "tests/result/dns_dot.pcap.out",
          "tests/result/fuzz-2006-09-29-28586.pcap.out",
          "tests/result/fuzz-2020-02-16-11740.pcap.out",
          "tests/result/hangout.pcap.out",
          "tests/result/instagram.pcap.out",
          "tests/result/iphone.pcap.out",
          "tests/result/malware.pcap.out",
          "tests/result/mpeg.pcap.out",
          "tests/result/netflix.pcap.out",
          "tests/result/ocs.pcap.out",
          "tests/result/pps.pcap.out",
          "tests/result/quickplay.pcap.out",
          "tests/result/skype-conference-call.pcap.out",
          "tests/result/skype.pcap.out",
          "tests/result/skype_no_unknown.pcap.out",
          "tests/result/smb_deletefile.pcap.out",
          "tests/result/smbv1.pcap.out",
          "tests/result/starcraft_battle.pcap.out",
          "tests/result/teams.pcap.out",
          "tests/result/wa_video.pcap.out",
          "tests/result/wa_voice.pcap.out",
          "tests/result/waze.pcap.out",
          "tests/result/webex.pcap.out",
          "tests/result/weibo.pcap.out",
          "tests/result/whatsapp_login_call.pcap.out",
          "tests/result/zoom.pcap.out"
        ],
        "message": "Added the ability to detect when a known protocol is using a non-standard port Added check to spot executables exchanged via HTTP",
        "before_after_code_files": [
          "example/ndpiReader.c||example/ndpiReader.c",
          "example/reader_util.c||example/reader_util.c",
          "example/reader_util.h||example/reader_util.h",
          "src/include/ndpi_api.h.in||src/include/ndpi_api.h.in",
          "src/include/ndpi_typedefs.h||src/include/ndpi_typedefs.h",
          "src/lib/ndpi_main.c||src/lib/ndpi_main.c",
          "src/lib/ndpi_utils.c||src/lib/ndpi_utils.c",
          "src/lib/protocols/http.c||src/lib/protocols/http.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "example/ndpiReader.c||example/ndpiReader.c"
          ],
          "candidate": [
            "example/ndpiReader.c||example/ndpiReader.c"
          ]
        }
      },
      "candidate_diff": {
        "example/ndpiReader.c||example/ndpiReader.c": [
          "File: example/ndpiReader.c -> example/ndpiReader.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "978: char* printUrlRisk(ndpi_url_risk risk) {",
          "979:   switch(risk) {",
          "980:     case ndpi_url_no_problem:",
          "981:       return(\"\");",
          "982:       break;",
          "983:     case ndpi_url_possible_xss:",
          "984:       return(\" ** XSS **\");",
          "985:       break;",
          "986:     case ndpi_url_possible_sql_injection:",
          "987:       return(\" ** SQL Injection **\");",
          "988:       break;",
          "989:     case ndpi_url_possible_rce_injection:",
          "990:       return(\" ** RCE Injection **\");",
          "991:       break;",
          "992:   }",
          "994:   return(\"\");",
          "995: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1218:     }",
          "1219:   }",
          "1228:   if(flow->ssh_tls.ssl_version != 0) fprintf(out, \"[%s]\", ndpi_ssl_version2str(flow->ssh_tls.ssl_version, &known_tls));",
          "1229:   if(flow->ssh_tls.client_requested_server_name[0] != '\\0') fprintf(out, \"[Client: %s]\", flow->ssh_tls.client_requested_server_name);",
          "1230:   if(flow->ssh_tls.client_hassh[0] != '\\0') fprintf(out, \"[HASSH-C: %s]\", flow->ssh_tls.client_hassh);",
          "",
          "[Removed Lines]",
          "1221:   if(flow->http.url[0] != '\\0')",
          "1222:     fprintf(out, \"[URL: %s%s][StatusCode: %u][ContentType: %s][UserAgent: %s]\",",
          "1223:      flow->http.url,",
          "1224:      printUrlRisk(ndpi_validate_url(flow->http.url)),",
          "1225:      flow->http.response_status_code,",
          "1226:      flow->http.content_type, flow->http.user_agent);",
          "",
          "[Added Lines]",
          "1201:   if(flow->http.url[0] != '\\0') {",
          "1202:     u_int16_t risk = ndpi_validate_url(flow->http.url);",
          "1204:     if(risk != NDPI_NO_RISK)",
          "1205:       flow->risk |= risk;",
          "1207:     fprintf(out, \"[URL: %s[StatusCode: %u]\",",
          "1208:      flow->http.url, flow->http.response_status_code);",
          "1210:     if(flow->http.content_type[0] != '\\0')",
          "1211:       fprintf(out, \"[ContentType: %s]\", flow->http.content_type);",
          "1213:     if(flow->http.user_agent[0] != '\\0')",
          "1214:       fprintf(out, \"[UserAgent: %s]\", flow->http.user_agent);",
          "1215:   }",
          "1217:   if(flow->risk) {",
          "1218:     u_int i;",
          "1220:     fprintf(out, \"[Risk: \");",
          "1222:     for(i=0; i<NDPI_MAX_RISK; i++)",
          "1223:       if(NDPI_ISSET_BIT_16(flow->risk, i))",
          "1224:  fprintf(out, \"** %s **\", ndpi_risk2str(i));",
          "1226:     fprintf(out, \"]\");",
          "1227:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3045: void automataUnitTest() {",
          "3046:   void *automa = ndpi_init_automa();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3046: static void bitmapUnitTest() {",
          "3047:   u_int16_t val, i, j;",
          "3049:   for(i=0; i<16; i++) {",
          "3050:     NDPI_ZERO_16(val);",
          "3051:     NDPI_SET_BIT_16(val, i);",
          "3053:     assert(NDPI_ISSET_BIT_16(val, i));",
          "3055:     for(j=0; j<16; j++) {",
          "3056:       if(j != i) {",
          "3057:  assert(!NDPI_ISSET_BIT_16(val, j));",
          "3058:       }",
          "3059:     }",
          "3060:   }",
          "3061: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3258:     }",
          "3261:     automataUnitTest();",
          "3262:     serializerUnitTest();",
          "3263:     analyzeUnitTest();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3281:     bitmapUnitTest();",
          "",
          "---------------"
        ],
        "example/reader_util.c||example/reader_util.c": [
          "File: example/reader_util.c -> example/reader_util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "993:   snprintf(flow->flow_extra_info, sizeof(flow->flow_extra_info), \"%s\",",
          "994:     flow->ndpi_flow->flow_extra_info);",
          "996:   if(is_ndpi_proto(flow, NDPI_PROTOCOL_DHCP)) {",
          "997:     snprintf(flow->dhcp_fingerprint, sizeof(flow->dhcp_fingerprint), \"%s\", flow->ndpi_flow->protos.dhcp.fingerprint);",
          "998:   } else if(is_ndpi_proto(flow, NDPI_PROTOCOL_BITTORRENT)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "996:   flow->risk = flow->ndpi_flow->risk;",
          "",
          "---------------"
        ],
        "example/reader_util.h||example/reader_util.h": [
          "File: example/reader_util.h -> example/reader_util.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "193:   char host_server_name[240];",
          "194:   char bittorent_hash[41];",
          "195:   char dhcp_fingerprint[48];",
          "197:   struct {",
          "198:     u_int16_t ssl_version;",
          "199:     char client_requested_server_name[64], server_info[64],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196:   ndpi_risk risk;",
          "",
          "---------------"
        ],
        "src/include/ndpi_api.h.in||src/include/ndpi_api.h.in": [
          "File: src/include/ndpi_api.h.in -> src/include/ndpi_api.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1034:   u_int8_t ndpi_is_protocol_detected(struct ndpi_detection_module_struct *ndpi_str,",
          "1035:          ndpi_protocol proto);",
          "1036: #ifdef __cplusplus",
          "1037: }",
          "1038: #endif",
          "",
          "[Removed Lines]",
          "1032:   ndpi_url_risk ndpi_validate_url(char *url);",
          "",
          "[Added Lines]",
          "1032:   ndpi_risk ndpi_validate_url(char *url);",
          "1037:   const char* ndpi_risk2str(ndpi_risk risk);",
          "",
          "---------------"
        ],
        "src/include/ndpi_typedefs.h||src/include/ndpi_typedefs.h": [
          "File: src/include/ndpi_typedefs.h -> src/include/ndpi_typedefs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: } ndpi_packet_tunnel;",
          "53: typedef enum {",
          "61: typedef enum {",
          "",
          "[Removed Lines]",
          "54:   ndpi_url_no_problem = 0,",
          "55:   ndpi_url_possible_xss,",
          "56:   ndpi_url_possible_sql_injection,",
          "57:   ndpi_url_possible_rce_injection",
          "58: } ndpi_url_risk;",
          "",
          "[Added Lines]",
          "54:   NDPI_NO_RISK = 0,",
          "55:   NDPI_URL_POSSIBLE_XSS,",
          "56:   NDPI_URL_POSSIBLE_SQL_INJECTION,",
          "57:   NDPI_URL_POSSIBLE_RCE_INJECTION,",
          "58:   NDPI_BINARY_APPLICATION_TRANSFER,",
          "59:   NDPI_KNOWN_PROTOCOL_ON_NON_STANDARD_PORT,",
          "62:   NDPI_MAX_RISK",
          "63: } ndpi_risk;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "941:   u_int8_t can_have_a_subprotocol;",
          "942:   u_int16_t protoId, protoIdx;",
          "944:   ndpi_protocol_breed_t protoBreed;",
          "945:   void (*func) (struct ndpi_detection_module_struct *, struct ndpi_flow_struct *flow);",
          "946: } ndpi_proto_defaults_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "949:   u_int16_t tcp_default_ports[MAX_DEFAULT_PORTS], udp_default_ports[MAX_DEFAULT_PORTS];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1152:   struct ndpi_id_struct *server_id;",
          "1154:   u_char host_server_name[240];",
          "1157:     This structure below will not not stay inside the protos",
          "1158:     structure below as HTTP is used by many subprotocols",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1161:   u_int8_t initial_binary_bytes[8], initial_binary_bytes_len;",
          "1162:   u_int8_t risk_checked;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1343:   u_int8_t csgo_strid[18],csgo_state,csgo_s2;",
          "1344:   u_int32_t csgo_id2;",
          "1350:   struct ndpi_packet_struct packet;",
          "1351:   struct ndpi_flow_struct *flow;",
          "",
          "[Removed Lines]",
          "1347:   u_int16_t kxun_counter, iqiyi_counter;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/lib/ndpi_main.c||src/lib/ndpi_main.c": [
          "File: src/lib/ndpi_main.c -> src/lib/ndpi_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "339:     if(tcpDefPorts[j].port_low != 0)",
          "340:       addDefaultPort(ndpi_str, &tcpDefPorts[j], &ndpi_str->proto_defaults[protoId], 0, &ndpi_str->tcpRoot,",
          "341:        __FUNCTION__, __LINE__);",
          "342:   }",
          "343: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "344:     ndpi_str->proto_defaults[protoId].tcp_default_ports[j] = tcpDefPorts[j].port_low;",
          "345:     ndpi_str->proto_defaults[protoId].udp_default_ports[j] = udpDefPorts[j].port_low;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "385:     }",
          "387:     node->proto = def, node->default_port = port, node->customUserProto = customUserProto;",
          "391:     if(ret != node) {",
          "392:       NDPI_LOG_DBG(ndpi_str, \"[NDPI] %s:%d found duplicate for port %u: overwriting it with new value\\n\", _func,",
          "",
          "[Removed Lines]",
          "388:     ret = (ndpi_default_ports_tree_node_t *) ndpi_tsearch(",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "708:      ndpi_build_default_ports(ports_b, 177, 0, 0, 0, 0) /* UDP */);",
          "709:   ndpi_set_proto_defaults(ndpi_str, NDPI_PROTOCOL_DANGEROUS, NDPI_PROTOCOL_SMBV1, 0 /* can_have_a_subprotocol */,",
          "710:      no_master, no_master, \"SMBv1\", NDPI_PROTOCOL_CATEGORY_SYSTEM_OS,",
          "712:      ndpi_build_default_ports(ports_b, 0, 0, 0, 0, 0) /* UDP */);",
          "713:   ndpi_set_proto_defaults(ndpi_str, NDPI_PROTOCOL_ACCEPTABLE, NDPI_PROTOCOL_SYSLOG, 0 /* can_have_a_subprotocol */,",
          "714:      no_master, no_master, \"Syslog\", NDPI_PROTOCOL_CATEGORY_SYSTEM_OS,",
          "",
          "[Removed Lines]",
          "711:      ndpi_build_default_ports(ports_a, 0, 0, 0, 0, 0) /* TCP */,",
          "",
          "[Added Lines]",
          "714:      ndpi_build_default_ports(ports_a, 445, 0, 0, 0, 0) /* TCP */,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1220:      ndpi_build_default_ports(ports_b, 0, 0, 0, 0, 0) /* UDP */);",
          "1221:   ndpi_set_proto_defaults(ndpi_str, NDPI_PROTOCOL_ACCEPTABLE, NDPI_PROTOCOL_APPLE_PUSH,",
          "1222:      0 /* can_have_a_subprotocol */, no_master, no_master, \"ApplePush\",",
          "1224:      ndpi_build_default_ports(ports_b, 0, 0, 0, 0, 0) /* UDP */);",
          "1225:   ndpi_set_proto_defaults(ndpi_str, NDPI_PROTOCOL_ACCEPTABLE, NDPI_PROTOCOL_DROPBOX, 0 /* can_have_a_subprotocol */,",
          "1226:      no_master, no_master, \"Dropbox\", NDPI_PROTOCOL_CATEGORY_CLOUD,",
          "",
          "[Removed Lines]",
          "1223:      NDPI_PROTOCOL_CATEGORY_CLOUD, ndpi_build_default_ports(ports_a, 1, 0, 0, 0, 0) /* TCP */,",
          "",
          "[Added Lines]",
          "1226:      NDPI_PROTOCOL_CATEGORY_CLOUD, ndpi_build_default_ports(ports_a, 0, 0, 0, 0, 0) /* TCP */,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3752: void check_ndpi_other_flow_func(struct ndpi_detection_module_struct *ndpi_str, struct ndpi_flow_struct *flow,",
          "3753:                                 NDPI_SELECTION_BITMASK_PROTOCOL_SIZE *ndpi_selection_packet) {",
          "3758:   void *func = NULL;",
          "3759:   u_int32_t a;",
          "",
          "[Removed Lines]",
          "3754:   if(!flow) {",
          "3755:     return;",
          "3756:   }",
          "",
          "[Added Lines]",
          "3757:   if(!flow)",
          "3758:     return;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4339: ndpi_protocol ndpi_detection_process_packet(struct ndpi_detection_module_struct *ndpi_str,",
          "4340:                                             struct ndpi_flow_struct *flow, const unsigned char *packet,",
          "4341:                                             const unsigned short packetlen, const u_int64_t current_tick_l,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4341: #if 0",
          "4342: static u_int16_t ndpi_checK_flow_port(, u_int16_t sport, u_int16_t dport) {",
          "4344: }",
          "4345: #endif",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4569:     ret.app_protocol = flow->guessed_host_protocol_id;",
          "4570:   }",
          "4572:  invalidate_ptr:",
          "4574:     Invalidate packet memory to avoid accessing the pointers below",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4582:   if((!flow->risk_checked) && (ret.master_protocol != NDPI_PROTOCOL_UNKNOWN)) {",
          "4583:     ndpi_default_ports_tree_node_t *found;",
          "4584:     u_int16_t *default_ports, sport, dport;",
          "4586:     if(flow->packet.udp)",
          "4587:       found = ndpi_get_guessed_protocol_id(ndpi_str, IPPROTO_UDP,",
          "4588:         sport = ntohs(flow->packet.udp->source),",
          "4589:         dport = ntohs(flow->packet.udp->dest)),",
          "4590:  default_ports = ndpi_str->proto_defaults[ret.master_protocol].udp_default_ports;",
          "4591:     else if(flow->packet.tcp)",
          "4592:       found = ndpi_get_guessed_protocol_id(ndpi_str, IPPROTO_TCP,",
          "4593:         sport = ntohs(flow->packet.tcp->source),",
          "4594:         dport = ntohs(flow->packet.tcp->dest)),",
          "4595:  default_ports = ndpi_str->proto_defaults[ret.master_protocol].tcp_default_ports;",
          "4596:     else",
          "4597:       found = NULL, default_ports = NULL;",
          "4599:     if(found",
          "4600:        && (found->proto->protoId != NDPI_PROTOCOL_UNKNOWN)",
          "4601:        && (found->proto->protoId != ret.master_protocol)) {",
          "4603:       NDPI_SET_BIT_16(flow->risk, NDPI_KNOWN_PROTOCOL_ON_NON_STANDARD_PORT);",
          "4604:     } else if(default_ports && (default_ports[0] != 0)) {",
          "4605:       u_int8_t found = 0, i;",
          "4607:       for(i=0; (i<MAX_DEFAULT_PORTS) && (default_ports[i] != 0); i++) {",
          "4608:  if((default_ports[i] == sport) || (default_ports[i] == dport)) {",
          "4609:    found = 1;",
          "4610:    break;",
          "4611:  }",
          "4614:       if(!found) {",
          "4616:  NDPI_SET_BIT_16(flow->risk, NDPI_KNOWN_PROTOCOL_ON_NON_STANDARD_PORT);",
          "4617:       }",
          "4618:     }",
          "4620:     flow->risk_checked = 1;",
          "4621:   }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4730:   u_int32_t a;",
          "4731:   struct ndpi_packet_struct *packet = &flow->packet;",
          "4733:   if(packet->packet_lines_parsed_complete != 0)",
          "4734:     return;",
          "4736:   packet->packet_lines_parsed_complete = 1;",
          "4737:   ndpi_reset_packet_line_info(packet);",
          "4742:   packet->line[packet->parsed_lines].ptr = packet->payload;",
          "4743:   packet->line[packet->parsed_lines].len = 0;",
          "",
          "[Removed Lines]",
          "4739:   if((packet->payload_packet_len < 3) || (packet->payload == NULL))",
          "4740:     return;",
          "",
          "[Added Lines]",
          "4785:   if((packet->payload_packet_len < 3) || (packet->payload == NULL))",
          "4786:     return;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4746:     if((a + 1) >= packet->payload_packet_len)",
          "4755:       if(packet->parsed_lines == 0 && packet->line[0].len >= NDPI_STATICSTRING_LEN(\"HTTP/1.X 200 \") &&",
          "",
          "[Removed Lines]",
          "4749:     if(get_u_int16_t(packet->payload, a) ==",
          "4751:       packet->line[packet->parsed_lines].len = (u_int16_t)(",
          "4752:           ((unsigned long) &packet->payload[a]) - ((unsigned long) packet->line[packet->parsed_lines].ptr));",
          "",
          "[Added Lines]",
          "4801:     if(get_u_int16_t(packet->payload, a) == ntohs(0x0d0a)) {",
          "4804:       if(get_u_int16_t(packet->payload, a+2) == ntohs(0x0d0a)) {",
          "4807:  u_int32_t a1 = a + 4;",
          "4809:  diff = ndpi_min(packet->payload_packet_len-a1, sizeof(flow->initial_binary_bytes));",
          "4811:  if(diff > 0) {",
          "4812:    memcpy(&flow->initial_binary_bytes, &packet->payload[a1], diff);",
          "4813:    flow->initial_binary_bytes_len = diff;",
          "4814:  }",
          "4815:       }",
          "4817:       packet->line[packet->parsed_lines].len =",
          "4818:  (u_int16_t)(((unsigned long) &packet->payload[a]) - ((unsigned long) packet->line[packet->parsed_lines].ptr));",
          "",
          "---------------"
        ],
        "src/lib/ndpi_utils.c||src/lib/ndpi_utils.c": [
          "File: src/lib/ndpi_utils.c -> src/lib/ndpi_utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1336:   char *orig_str = NULL, *str = NULL, *question_mark = strchr(url, '?');",
          "1339:   if(question_mark) {",
          "1340:     char *tmp;",
          "",
          "[Removed Lines]",
          "1335: ndpi_url_risk ndpi_validate_url(char *url) {",
          "1337:   ndpi_url_risk rc = ndpi_url_no_problem;",
          "",
          "[Added Lines]",
          "1335: ndpi_risk ndpi_validate_url(char *url) {",
          "1337:   ndpi_risk rc = NDPI_NO_RISK;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1366:    if(ndpi_is_xss_injection(decoded))",
          "1368:    else if(ndpi_is_sql_injection(decoded))",
          "1370: #ifdef HAVE_PCRE",
          "1371:    else if(ndpi_is_rce_injection(decoded))",
          "1373: #endif",
          "1375: #ifdef URL_CHECK_DEBUG",
          "",
          "[Removed Lines]",
          "1367:      rc = ndpi_url_possible_xss;",
          "1369:      rc = ndpi_url_possible_sql_injection;",
          "1372:      rc = ndpi_url_possible_rce_injection;",
          "",
          "[Added Lines]",
          "1367:      rc = NDPI_URL_POSSIBLE_XSS;",
          "1369:      rc = NDPI_URL_POSSIBLE_SQL_INJECTION;",
          "1372:      rc = NDPI_URL_POSSIBLE_RCE_INJECTION;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1380:  ndpi_free(decoded);",
          "1383:    break;",
          "1384:       }",
          "",
          "[Removed Lines]",
          "1382:  if(rc != ndpi_url_no_problem)",
          "",
          "[Added Lines]",
          "1382:  if(rc != NDPI_NO_RISK)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1403:   else",
          "1404:     return(0);",
          "1405: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1409: const char* ndpi_risk2str(ndpi_risk risk) {",
          "1410:   switch(risk) {",
          "1411:   case NDPI_URL_POSSIBLE_XSS:",
          "1412:     return(\"XSS attack\");",
          "1413:   case NDPI_URL_POSSIBLE_SQL_INJECTION:",
          "1414:     return(\"SQL injection\");",
          "1415:   case NDPI_URL_POSSIBLE_RCE_INJECTION:",
          "1416:     return(\"RCE injection\");",
          "1417:   case NDPI_BINARY_APPLICATION_TRANSFER:",
          "1418:     return(\"Binary application transfer\");",
          "1419:   case NDPI_KNOWN_PROTOCOL_ON_NON_STANDARD_PORT:",
          "1420:     return(\"Known protocol on non standard port\");",
          "1421:   default:",
          "1422:     return(\"\");",
          "1423:   }",
          "1424: }",
          "",
          "---------------"
        ],
        "src/lib/protocols/http.c||src/lib/protocols/http.c": [
          "File: src/lib/protocols/http.c -> src/lib/protocols/http.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: static int ndpi_search_http_tcp_again(struct ndpi_detection_module_struct *ndpi_struct,",
          "37:           struct ndpi_flow_struct *flow) {",
          "38:   ndpi_search_http_tcp(ndpi_struct, flow);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: static void ndpi_analyze_content_signature(struct ndpi_flow_struct *flow) {",
          "37:   if((flow->initial_binary_bytes_len >= 2) && (flow->initial_binary_bytes[0] == 0x4D) && (flow->initial_binary_bytes[1] == 0x5A))",
          "39:   else if((flow->initial_binary_bytes_len >= 4) && (flow->initial_binary_bytes[0] == 0x7F) && (flow->initial_binary_bytes[1] == 'E')",
          "40:    && (flow->initial_binary_bytes[2] == 'L') && (flow->initial_binary_bytes[3] == 'F'))",
          "42:   else if((flow->initial_binary_bytes_len >= 4) && (flow->initial_binary_bytes[0] == 0xCF) && (flow->initial_binary_bytes[1] == 0xFA)",
          "43:    && (flow->initial_binary_bytes[2] == 0xED) && (flow->initial_binary_bytes[3] == 0xFE))",
          "45:   else if(flow->initial_binary_bytes_len >= 8) {",
          "46:     u_int8_t exec_pattern[] = { 0x64, 0x65, 0x78, 0x0A, 0x30, 0x33, 0x35, 0x00 };",
          "48:     if(memcmp(flow->initial_binary_bytes, exec_pattern, 8) == 0)",
          "50:   }",
          "51: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:   printf(\"=> %s()\\n\", __FUNCTION__);",
          "42: #endif",
          "47:     return(0);",
          "48:   }",
          "",
          "[Removed Lines]",
          "44:   if((flow->host_server_name[0] != '\\0') && (flow->http.response_status_code != 0)) {",
          "",
          "[Added Lines]",
          "63:   if((flow->host_server_name[0] != '\\0')",
          "64:      && (flow->http.response_status_code != 0)",
          "65:      ) {",
          "68:     if(flow->initial_binary_bytes_len) ndpi_analyze_content_signature(flow);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "612:     \"Found more than one line, we look further for the next packet...\\n\");",
          "614:     if(packet->line[0].len >= (9 + filename_start)",
          "617:       packet->http_url_name.ptr = &packet->payload[filename_start];",
          "618:       packet->http_url_name.len = packet->line[0].len - (filename_start + 9);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "638:        && memcmp(&packet->line[0].ptr[packet->line[0].len - 9], \" HTTP/1.\", 8) == 0) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "635:  goto ookla_found;",
          "636:       }",
          "682:       if((packet->http_url_name.len > 7)",
          "683:   && (!strncmp((const char*) packet->http_url_name.ptr, \"http://\", 7))) {",
          "684:         NDPI_LOG_INFO(ndpi_struct, \"found HTTP_PROXY\\n\");",
          "",
          "[Removed Lines]",
          "638: #if defined(NDPI_PROTOCOL_1KXUN) || defined(NDPI_PROTOCOL_IQIYI)",
          "642:       if(ndpi_strnstr((const char*) &packet->payload[filename_start], \"iqiyi.com\",",
          "643:         (packet->payload_packet_len - filename_start)) != NULL) {",
          "644:  if(flow->kxun_counter == 0) {",
          "645:    flow->l4.tcp.ppstream_stage++;",
          "646:    flow->iqiyi_counter++;",
          "648:    return;",
          "649:  }",
          "650:       }",
          "653:       x = 1;",
          "654:       while((packet->line[x].len >= 4) && (packet->line[x+1].len >= 5) && (packet->line[x+2].len >= 10)) {",
          "655:  if(packet->line[x].ptr && ((memcmp(packet->line[x].ptr, \"qyid\", 4)) == 0)",
          "656:     && packet->line[x+1].ptr && ((memcmp(packet->line[x+1].ptr, \"qypid\", 5)) == 0)",
          "657:     && packet->line[x+2].ptr && ((memcmp(packet->line[x+2].ptr, \"qyplatform\", 10)) == 0)",
          "658:     ) {",
          "659:    flow->l4.tcp.ppstream_stage++;",
          "660:    flow->iqiyi_counter++;",
          "661:    check_content_type_and_change_protocol(ndpi_struct, flow);",
          "662:    return;",
          "663:  }",
          "664:  x++;",
          "665:       }",
          "666: #endif",
          "668: #if defined(NDPI_PROTOCOL_1KXUN) || defined(NDPI_PROTOCOL_IQIYI)",
          "670:       int a;",
          "671:       for (a = 0; a < packet->parsed_lines; a++) {",
          "672:  if(packet->line[a].len >= 14 && (memcmp(packet->line[a].ptr, \"Client-Source:\", 14)) == 0) {",
          "673:    if((memcmp(packet->line[a].ptr+15, \"1kxun\", 5)) == 0) {",
          "674:      flow->kxun_counter++;",
          "675:      check_content_type_and_change_protocol(ndpi_struct, flow);",
          "676:      return;",
          "677:    }",
          "678:  }",
          "679:       }",
          "680: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "51cfdfb0d80a7bbcc11bc3b95d1696d8dae900c2",
      "candidate_info": {
        "commit_hash": "51cfdfb0d80a7bbcc11bc3b95d1696d8dae900c2",
        "repo": "ntop/nDPI",
        "commit_url": "https://github.com/ntop/nDPI/commit/51cfdfb0d80a7bbcc11bc3b95d1696d8dae900c2",
        "files": [
          "example/Makefile.in",
          "example/ndpiReader.c"
        ],
        "message": "Removed unused JSON-C code",
        "before_after_code_files": [
          "example/Makefile.in||example/Makefile.in",
          "example/ndpiReader.c||example/ndpiReader.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "example/ndpiReader.c||example/ndpiReader.c"
          ],
          "candidate": [
            "example/ndpiReader.c||example/ndpiReader.c"
          ]
        }
      },
      "candidate_diff": {
        "example/Makefile.in||example/Makefile.in": [
          "File: example/Makefile.in -> example/Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:  make -f Makefile.dpdk",
          "29: check:",
          "32: clean:",
          "33:  /bin/rm -f *.o ndpiReader ndpiReader.dpdk",
          "",
          "[Removed Lines]",
          "30:   cppcheck --template='{file}:{line}:{severity}:{message}' --quiet --enable=all --force -I../src/include  -I/usr/local/include/json-c  *.c",
          "",
          "[Added Lines]",
          "30:   cppcheck --template='{file}:{line}:{severity}:{message}' --quiet --enable=all --force -I../src/include *.c",
          "",
          "---------------"
        ],
        "example/ndpiReader.c||example/ndpiReader.c": [
          "File: example/ndpiReader.c -> example/ndpiReader.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: #include <sys/mman.h>",
          "53: #include <libgen.h>",
          "59: #include \"reader_util.h\"",
          "",
          "[Removed Lines]",
          "55: #ifdef HAVE_JSON_C",
          "56: #include <json.h>",
          "57: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80: static u_int8_t live_capture = 0;",
          "81: static u_int8_t undetected_flows_deleted = 0;",
          "83: u_int8_t enable_protocol_guess = 1, enable_payload_analyzer = 0;",
          "85: int nDPI_LogLevel = 0;",
          "86: char *_debug_protocols = NULL;",
          "91: u_int8_t human_readeable_string_len = 5;",
          "92: u_int8_t max_num_udp_dissected_pkts = 16 /* 8 is enough for most protocols, Signal requires more */, max_num_tcp_dissected_pkts = 80 /* due to telnet */;",
          "93: static u_int32_t pcap_analysis_duration = (u_int32_t)-1;",
          "",
          "[Removed Lines]",
          "71: #ifdef HAVE_JSON_C",
          "76: static json_object *jArray_known_flows = NULL, *jArray_unknown_flows = NULL;",
          "77: static json_object *jArray_topStats = NULL;",
          "78: #endif",
          "84: u_int8_t verbose = 0, json_flag = 0, enable_joy_stats = 0;",
          "87: static u_int8_t stats_flag = 0, bpf_filter_flag = 0;",
          "88: #ifdef HAVE_JSON_C",
          "89: static u_int8_t file_first_time = 1;",
          "90: #endif",
          "",
          "[Added Lines]",
          "72: u_int8_t verbose = 0, enable_joy_stats = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "356:   \"  -l <num loops>            | Number of detection loops (test only)\\n\"",
          "357:   \"  -n <num threads>          | Number of threads. Default: number of interfaces in -i.\\n\"",
          "358:   \"                            | Ignored with pcap files.\\n\"",
          "360: #ifdef linux",
          "361:          \"  -g <id:id...>             | Thread affinity mask (one core id per thread)\\n\"",
          "362: #endif",
          "",
          "[Removed Lines]",
          "359:   \"  -j <file.json>            | Specify a file to write the content of packets in .json format\\n\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "386:   \"  -V <1-4>                  | nDPI logging level\\n\"",
          "387:   \"                            | 1 - trace, 2 - debug, 3 - full debug\\n\"",
          "388:   \"                            | >3 - full debug + dbg_proto = all\\n\"",
          "392:   \"  -T <num>                  | Max number of TCP processed packets before giving up [default: %u]\\n\"",
          "393:   \"  -U <num>                  | Max number of UDP processed packets before giving up [default: %u]\\n\"",
          "394:   ,",
          "",
          "[Removed Lines]",
          "389:   \"  -b <file.json>            | Specify a file to write port based diagnose statistics\\n\"",
          "390:   \"  -x <file.json>            | Produce bpf filters for specified diagnose file. Use\\n\"",
          "391:   \"                            | this option only for .json files generated with -b flag.\\n\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "458:   { \"verbose\", no_argument, NULL, 'v'},",
          "459:   { \"version\", no_argument, NULL, 'V'},",
          "460:   { \"help\", no_argument, NULL, 'h'},",
          "462:   { \"joy\", required_argument, NULL, 'J'},",
          "463:   { \"payload-analysis\", required_argument, NULL, 'P'},",
          "464:   { \"result-path\", required_argument, NULL, 'w'},",
          "",
          "[Removed Lines]",
          "461:   { \"json\", required_argument, NULL, 'j'},",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "637:   }",
          "638: #endif",
          "641:       longopts, &option_idx)) != EOF) {",
          "642: #ifdef DEBUG_TRACE",
          "643:     if(trace) fprintf(trace, \" #### -%c [%s] #### \\n\", opt, optarg ? optarg : \"\");",
          "",
          "[Removed Lines]",
          "640:   while((opt = getopt_long(argc, argv, \"e:c:C:df:g:i:hp:P:l:s:tv:V:n:j:Jrp:w:q0123:456:7:89:m:b:x:T:U:\",",
          "",
          "[Added Lines]",
          "619:   while((opt = getopt_long(argc, argv, \"e:c:C:df:g:i:hp:P:l:s:tv:V:n:Jrp:w:q0123:456:7:89:m:T:U:\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "657:       _pcap_file[0] = optarg;",
          "658:       break;",
          "669:     case 'm':",
          "670:       pcap_analysis_duration = atol(optarg);",
          "671:       break;",
          "682:     case 'f':",
          "683:     case '6':",
          "684:       bpfFilter = optarg;",
          "",
          "[Removed Lines]",
          "660:     case 'b':",
          "661: #ifndef HAVE_JSON_C",
          "662:       printf(\"WARNING: this copy of ndpiReader has been compiled without JSON-C: json export disabled\\n\");",
          "663: #else",
          "664:       _statsFilePath = optarg;",
          "665:       stats_flag = 1;",
          "666: #endif",
          "667:       break;",
          "673:     case 'x':",
          "674: #ifndef HAVE_JSON_C",
          "675:       printf(\"WARNING: this copy of ndpiReader has been compiled without JSON-C: json export disabled\\n\");",
          "676: #else",
          "677:       _diagnoseFilePath = optarg;",
          "678:       bpf_filter_flag = 1;",
          "679: #endif",
          "680:       break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "772:       }",
          "773:       break;",
          "784:     case 'w':",
          "785:       results_path = strdup(optarg);",
          "786:       if((results_file = fopen(results_path, \"w\")) == NULL) {",
          "",
          "[Removed Lines]",
          "775:     case 'j':",
          "776: #ifndef HAVE_JSON_C",
          "777:       printf(\"WARNING: this copy of ndpiReader has been compiled without json-c: JSON export disabled\\n\");",
          "778: #else",
          "779:       _jsonFilePath = optarg;",
          "780:       json_flag = 1;",
          "781: #endif",
          "782:       break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "850:   }",
          "852: #ifndef USE_DPDK",
          "866:       __pcap_file = strtok(_pcap_file[0], \",\");",
          "",
          "[Removed Lines]",
          "853:   if(!bpf_filter_flag) {",
          "854:     if(do_capture) {",
          "855:       quiet_mode = 1;",
          "856:       extcap_capture();",
          "857:     }",
          "860:     if(!bpf_filter_flag && (_pcap_file[0] == NULL || strcmp(_pcap_file[0], \"\") == 0)) {",
          "861:       help(0);",
          "862:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "887:       }",
          "888:     }",
          "889: #endif",
          "891: #endif",
          "893: #ifdef DEBUG_TRACE",
          "",
          "[Removed Lines]",
          "890:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1021: static void printFlow(u_int16_t id, struct ndpi_flow_info *flow, u_int16_t thread_id) {",
          "1025:   FILE *out = results_file ? results_file : stdout;",
          "1026:   u_int8_t known_tls;",
          "1027:   char buf[32], buf1[64];",
          "1029:   if(csv_fp != NULL) {",
          "1030:     float data_ratio = ndpi_data_ratio(flow->src2dst_bytes, flow->dst2src_bytes);",
          "",
          "[Removed Lines]",
          "1022: #ifdef HAVE_JSON_C",
          "1023:   json_object *jObj;",
          "1024: #endif",
          "",
          "[Added Lines]",
          "965:   u_int i;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1038:      f/1000.0, l/1000.0,",
          "1039:      flow->src_name, ntohs(flow->src_port),",
          "1040:      flow->dst_name, ntohs(flow->dst_port)",
          "1043:     fprintf(csv_fp, \"%u.%u,%s,\",",
          "1048:     fprintf(csv_fp, \"%u,%llu,\", flow->src2dst_packets, (long long unsigned int) flow->src2dst_bytes);",
          "1049:     fprintf(csv_fp, \"%u,%llu,\", flow->dst2src_packets, (long long unsigned int) flow->dst2src_bytes);",
          "",
          "[Removed Lines]",
          "1041:       );",
          "1044:     flow->detected_protocol.master_protocol, flow->detected_protocol.app_protocol,",
          "1045:     ndpi_protocol2name(ndpi_thread_info[thread_id].workflow->ndpi_struct,",
          "1046:          flow->detected_protocol, buf, sizeof(buf)));",
          "",
          "[Added Lines]",
          "979:      );",
          "982:      flow->detected_protocol.master_protocol, flow->detected_protocol.app_protocol,",
          "983:      ndpi_protocol2name(ndpi_thread_info[thread_id].workflow->ndpi_struct,",
          "984:           flow->detected_protocol, buf, sizeof(buf)));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1054:      ndpi_data_min(flow->iat_flow), ndpi_data_average(flow->iat_flow), ndpi_data_max(flow->iat_flow), ndpi_data_stddev(flow->iat_flow));",
          "1056:     fprintf(csv_fp, \"%u,%.1f,%u,%.1f,%u,%.1f,%u,%.1f,\",",
          "1061:     fprintf(csv_fp, \"%u,%.1f,%u,%.1f,%u,%.1f,%u,%.1f,\",",
          "1065:     fprintf(csv_fp, \"%s,%s,\",",
          "1066:      (flow->ssh_tls.client_info[0] != '\\0')  ? flow->ssh_tls.client_info : \"\",",
          "",
          "[Removed Lines]",
          "1057:     ndpi_data_min(flow->iat_c_to_s), ndpi_data_average(flow->iat_c_to_s), ndpi_data_max(flow->iat_c_to_s), ndpi_data_stddev(flow->iat_c_to_s),",
          "1058:     ndpi_data_min(flow->iat_s_to_c), ndpi_data_average(flow->iat_s_to_c), ndpi_data_max(flow->iat_s_to_c), ndpi_data_stddev(flow->iat_s_to_c));",
          "1062:     ndpi_data_min(flow->pktlen_c_to_s), ndpi_data_average(flow->pktlen_c_to_s), ndpi_data_max(flow->pktlen_c_to_s), ndpi_data_stddev(flow->pktlen_c_to_s),",
          "1063:     ndpi_data_min(flow->pktlen_s_to_c), ndpi_data_average(flow->pktlen_s_to_c), ndpi_data_max(flow->pktlen_s_to_c), ndpi_data_stddev(flow->pktlen_s_to_c));",
          "",
          "[Added Lines]",
          "995:      ndpi_data_min(flow->iat_c_to_s), ndpi_data_average(flow->iat_c_to_s), ndpi_data_max(flow->iat_c_to_s), ndpi_data_stddev(flow->iat_c_to_s),",
          "996:      ndpi_data_min(flow->iat_s_to_c), ndpi_data_average(flow->iat_s_to_c), ndpi_data_max(flow->iat_s_to_c), ndpi_data_stddev(flow->iat_s_to_c));",
          "1000:      ndpi_data_min(flow->pktlen_c_to_s), ndpi_data_average(flow->pktlen_c_to_s), ndpi_data_max(flow->pktlen_c_to_s), ndpi_data_stddev(flow->pktlen_c_to_s),",
          "1001:      ndpi_data_min(flow->pktlen_s_to_c), ndpi_data_average(flow->pktlen_s_to_c), ndpi_data_max(flow->pktlen_s_to_c), ndpi_data_stddev(flow->pktlen_s_to_c));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1080:      (flow->ssh_tls.server_hassh[0] != '\\0') ? flow->ssh_tls.server_hassh : \"\"",
          "1081:      );",
          "1084:   }",
          "1086:   if((verbose != 1) && (verbose != 2))",
          "1087:     return;",
          "1092: #if 1",
          "1094: #else",
          "1096: #endif",
          "1200:     }",
          "1287: }",
          "",
          "[Removed Lines]",
          "1083:      fprintf(csv_fp, \"\\n\");",
          "1089:   if(!json_flag) {",
          "1090:     u_int i;",
          "1093:     fprintf(out, \"\\t%u\", id);",
          "1095:     fprintf(out, \"\\t%u(%u)\", id, flow->flow_id);",
          "1098:     fprintf(out, \"\\t%s \", ipProto2Name(flow->protocol));",
          "1100:     fprintf(out, \"%s%s%s:%u %s %s%s%s:%u \",",
          "1101:      (flow->ip_version == 6) ? \"[\" : \"\",",
          "1102:      flow->src_name, (flow->ip_version == 6) ? \"]\" : \"\", ntohs(flow->src_port),",
          "1103:      flow->bidirectional ? \"<->\" : \"->\",",
          "1104:      (flow->ip_version == 6) ? \"[\" : \"\",",
          "1105:      flow->dst_name, (flow->ip_version == 6) ? \"]\" : \"\", ntohs(flow->dst_port)",
          "1106:       );",
          "1108:     if(flow->vlan_id > 0) fprintf(out, \"[VLAN: %u]\", flow->vlan_id);",
          "1109:     if(enable_payload_analyzer) fprintf(out, \"[flowId: %u]\", flow->flow_id);",
          "1111:     if(enable_joy_stats) {",
          "1113:       flowGetBDMeanandVariance(flow);",
          "1114:       fflush(out);",
          "1115:       fprintf(out, \"[score: %.4f]\", flow->entropy.score);",
          "1116:     }",
          "1118:     fprintf(out, \"[proto: \");",
          "1119:     if(flow->tunnel_type != ndpi_no_tunnel)",
          "1120:       fprintf(out, \"%s:\", ndpi_tunnel2str(flow->tunnel_type));",
          "1122:     fprintf(out, \"%s/%s]\",",
          "1123:      ndpi_protocol2id(ndpi_thread_info[thread_id].workflow->ndpi_struct,",
          "1124:         flow->detected_protocol, buf, sizeof(buf)),",
          "1125:      ndpi_protocol2name(ndpi_thread_info[thread_id].workflow->ndpi_struct,",
          "1126:           flow->detected_protocol, buf1, sizeof(buf1)));",
          "1128:     if(flow->detected_protocol.category != 0)",
          "1129:       fprintf(out, \"[cat: %s/%u]\",",
          "1130:        ndpi_category_get_name(ndpi_thread_info[thread_id].workflow->ndpi_struct,",
          "1131:          flow->detected_protocol.category),",
          "1132:        (unsigned int)flow->detected_protocol.category);",
          "1134:     fprintf(out, \"[%u pkts/%llu bytes \", flow->src2dst_packets, (long long unsigned int) flow->src2dst_bytes);",
          "1135:     fprintf(out, \"%s %u pkts/%llu bytes]\",",
          "1136:      (flow->dst2src_packets > 0) ? \"<->\" : \"->\",",
          "1137:      flow->dst2src_packets, (long long unsigned int) flow->dst2src_bytes);",
          "1139:     if(flow->telnet.username[0] != '\\0')  fprintf(out, \"[Username: %s]\", flow->telnet.username);",
          "1140:     if(flow->host_server_name[0] != '\\0') fprintf(out, \"[Host: %s]\", flow->host_server_name);",
          "1142:     if(flow->info[0] != '\\0') fprintf(out, \"[%s]\", flow->info);",
          "1144:     if((flow->src2dst_packets+flow->dst2src_packets) > 5) {",
          "1145:       if(flow->iat_c_to_s && flow->iat_s_to_c) {",
          "1146:  float data_ratio = ndpi_data_ratio(flow->src2dst_bytes, flow->dst2src_bytes);",
          "1148:  fprintf(out, \"[bytes ratio: %.3f (%s)]\", data_ratio, ndpi_data_ratio2str(data_ratio));",
          "1151:  fprintf(out, \"[IAT c2s/s2c min/avg/max/stddev: %u/%u %.1f/%.1f %u/%u %.1f/%.1f]\",",
          "1152:   ndpi_data_min(flow->iat_c_to_s),     ndpi_data_min(flow->iat_s_to_c),",
          "1153:   (float)ndpi_data_average(flow->iat_c_to_s), (float)ndpi_data_average(flow->iat_s_to_c),",
          "1154:   ndpi_data_max(flow->iat_c_to_s),     ndpi_data_max(flow->iat_s_to_c),",
          "1155:   (float)ndpi_data_stddev(flow->iat_c_to_s),  (float)ndpi_data_stddev(flow->iat_s_to_c));",
          "1158:  fprintf(out, \"[Pkt Len c2s/s2c min/avg/max/stddev: %u/%u %.1f/%.1f %u/%u %.1f/%.1f]\",",
          "1159:   ndpi_data_min(flow->pktlen_c_to_s), ndpi_data_min(flow->pktlen_s_to_c),",
          "1160:   ndpi_data_average(flow->pktlen_c_to_s), ndpi_data_average(flow->pktlen_s_to_c),",
          "1161:   ndpi_data_max(flow->pktlen_c_to_s), ndpi_data_max(flow->pktlen_s_to_c),",
          "1162:   ndpi_data_stddev(flow->pktlen_c_to_s),  ndpi_data_stddev(flow->pktlen_s_to_c));",
          "1163:       }",
          "1164:     }",
          "1166:     if(flow->http.url[0] != '\\0')",
          "1167:       fprintf(out, \"[URL: %s%s][StatusCode: %u][ContentType: %s][UserAgent: %s]\",",
          "1168:        flow->http.url,",
          "1169:        printUrlRisk(ndpi_validate_url(flow->http.url)),",
          "1170:        flow->http.response_status_code,",
          "1171:        flow->http.content_type, flow->http.user_agent);",
          "1173:     if(flow->ssh_tls.ssl_version != 0) fprintf(out, \"[%s]\", ndpi_ssl_version2str(flow->ssh_tls.ssl_version, &known_tls));",
          "1174:     if(flow->ssh_tls.client_info[0] != '\\0') fprintf(out, \"[Client: %s]\", flow->ssh_tls.client_info);",
          "1175:     if(flow->ssh_tls.client_hassh[0] != '\\0') fprintf(out, \"[HASSH-C: %s]\", flow->ssh_tls.client_hassh);",
          "1177:     if(flow->ssh_tls.ja3_client[0] != '\\0') fprintf(out, \"[JA3C: %s%s]\", flow->ssh_tls.ja3_client,",
          "1178:           print_cipher(flow->ssh_tls.client_unsafe_cipher));",
          "1180:     if(flow->ssh_tls.server_info[0] != '\\0') fprintf(out, \"[Server: %s]\", flow->ssh_tls.server_info);",
          "1181:     if(flow->ssh_tls.server_hassh[0] != '\\0') fprintf(out, \"[HASSH-S: %s]\", flow->ssh_tls.server_hassh);",
          "1183:     if(flow->ssh_tls.ja3_server[0] != '\\0') fprintf(out, \"[JA3S: %s%s]\", flow->ssh_tls.ja3_server,",
          "1184:           print_cipher(flow->ssh_tls.server_unsafe_cipher));",
          "1185:     if(flow->ssh_tls.server_organization[0] != '\\0') fprintf(out, \"[Organization: %s]\", flow->ssh_tls.server_organization);",
          "1187:     if((flow->detected_protocol.master_protocol == NDPI_PROTOCOL_TLS)",
          "1188:        || (flow->detected_protocol.app_protocol == NDPI_PROTOCOL_TLS)) {",
          "1189:       if((flow->ssh_tls.sha1_cert_fingerprint[0] == 0)",
          "1190:   && (flow->ssh_tls.sha1_cert_fingerprint[1] == 0)",
          "1191:   && (flow->ssh_tls.sha1_cert_fingerprint[2] == 0))",
          "1193:       else {",
          "1194:  fprintf(out, \"[Certificate SHA-1: \");",
          "1195:  for(i=0; i<20; i++)",
          "1196:    fprintf(out, \"%s%02X\", (i > 0) ? \":\" : \"\",",
          "1197:     flow->ssh_tls.sha1_cert_fingerprint[i] & 0xFF);",
          "1198:  fprintf(out, \"]\");",
          "1199:       }",
          "1202:     if(flow->ssh_tls.notBefore && flow->ssh_tls.notAfter) {",
          "1203:       char notBefore[32], notAfter[32];",
          "1204:       struct tm a, b;",
          "1205:       struct tm *before = gmtime_r(&flow->ssh_tls.notBefore, &a);",
          "1206:       struct tm *after  = gmtime_r(&flow->ssh_tls.notAfter, &b);",
          "1208:       strftime(notBefore, sizeof(notBefore), \"%F %T\", before);",
          "1209:       strftime(notAfter, sizeof(notAfter), \"%F %T\", after);",
          "1211:       fprintf(out, \"[Validity: %s - %s]\", notBefore, notAfter);",
          "1212:     }",
          "1214:     if(flow->ssh_tls.server_cipher != '\\0') fprintf(out, \"[Cipher: %s]\", ndpi_cipher2str(flow->ssh_tls.server_cipher));",
          "1215:     if(flow->bittorent_hash[0] != '\\0') fprintf(out, \"[BT Hash: %s]\", flow->bittorent_hash);",
          "1216:     if(flow->dhcp_fingerprint[0] != '\\0') fprintf(out, \"[DHCP Fingerprint: %s]\", flow->dhcp_fingerprint);",
          "1218:     if(flow->has_human_readeable_strings) fprintf(out, \"[PLAIN TEXT (%s)]\", flow->human_readeable_string_buffer);",
          "1220:     fprintf(out, \"\\n\");",
          "1221:   } else {",
          "1222: #ifdef HAVE_JSON_C",
          "1223:     jObj = json_object_new_object();",
          "1225:     json_object_object_add(jObj,\"protocol\",json_object_new_string(ipProto2Name(flow->protocol)));",
          "1226:     json_object_object_add(jObj,\"host_a.name\",json_object_new_string(flow->src_name));",
          "1227:     json_object_object_add(jObj,\"host_a.port\",json_object_new_int(ntohs(flow->src_port)));",
          "1228:     json_object_object_add(jObj,\"host_b.name\",json_object_new_string(flow->dst_name));",
          "1229:     json_object_object_add(jObj,\"host_b.port\",json_object_new_int(ntohs(flow->dst_port)));",
          "1231:     if(flow->detected_protocol.master_protocol)",
          "1232:       json_object_object_add(jObj,\"detected.master_protocol\",",
          "1233:         json_object_new_int(flow->detected_protocol.master_protocol));",
          "1235:     json_object_object_add(jObj,\"detected.app_protocol\",",
          "1236:       json_object_new_int(flow->detected_protocol.app_protocol));",
          "1238:     if(flow->detected_protocol.master_protocol) {",
          "1239:       char tmp[256];",
          "1241:       snprintf(tmp, sizeof(tmp), \"%s.%s\",",
          "1242:         ndpi_get_proto_name(ndpi_thread_info[thread_id].workflow->ndpi_struct,",
          "1243:        flow->detected_protocol.master_protocol),",
          "1244:         ndpi_get_proto_name(ndpi_thread_info[thread_id].workflow->ndpi_struct,",
          "1245:        flow->detected_protocol.app_protocol));",
          "1247:       json_object_object_add(jObj,\"detected.protocol.name\",",
          "1248:         json_object_new_string(tmp));",
          "1249:     } else",
          "1250:       json_object_object_add(jObj,\"detected.protocol.name\",",
          "1251:         json_object_new_string(ndpi_get_proto_name(ndpi_thread_info[thread_id].workflow->ndpi_struct,",
          "1252:          flow->detected_protocol.app_protocol)));",
          "1254:     json_object_object_add(jObj,\"packets\",json_object_new_int(flow->src2dst_packets + flow->dst2src_packets));",
          "1255:     json_object_object_add(jObj,\"bytes\",json_object_new_int(flow->src2dst_bytes + flow->dst2src_bytes));",
          "1257:     if(flow->host_server_name[0] != '\\0')",
          "1258:       json_object_object_add(jObj,\"host.server.name\",json_object_new_string(flow->host_server_name));",
          "1260:     if((flow->ssh_tls.client_info[0] != '\\0') || (flow->ssh_tls.server_info[0] != '\\0')) {",
          "1261:       json_object *sjObj = json_object_new_object();",
          "1263:       if(flow->ssh_tls.ja3_server[0] != '\\0')",
          "1264:  json_object_object_add(jObj,\"ja3s\",json_object_new_string(flow->ssh_tls.ja3_server));",
          "1266:       if(flow->ssh_tls.ja3_client[0] != '\\0')",
          "1267:  json_object_object_add(jObj,\"ja3c\",json_object_new_string(flow->ssh_tls.ja3_client));",
          "1269:       if(flow->ssh_tls.ja3_server[0] != '\\0')",
          "1270:  json_object_object_add(jObj,\"host.server.ja3\",json_object_new_string(flow->ssh_tls.ja3_server));",
          "1272:       if(flow->ssh_tls.client_info[0] != '\\0')",
          "1273:  json_object_object_add(sjObj, \"client\", json_object_new_string(flow->ssh_tls.client_info));",
          "1275:       if(flow->ssh_tls.server_info[0] != '\\0')",
          "1276:  json_object_object_add(sjObj, \"server\", json_object_new_string(flow->ssh_tls.server_info));",
          "1278:       json_object_object_add(jObj, \"ssh_tls\", sjObj);",
          "1279:     }",
          "1281:     if(json_flag == 1)",
          "1282:       json_object_array_add(jArray_known_flows,jObj);",
          "1283:     else if(json_flag == 2)",
          "1284:       json_object_array_add(jArray_unknown_flows,jObj);",
          "1285: #endif",
          "1286:   }",
          "",
          "[Added Lines]",
          "1021:     fprintf(csv_fp, \"\\n\");",
          "1028:   fprintf(out, \"\\t%u\", id);",
          "1030:   fprintf(out, \"\\t%u(%u)\", id, flow->flow_id);",
          "1033:   fprintf(out, \"\\t%s \", ipProto2Name(flow->protocol));",
          "1035:   fprintf(out, \"%s%s%s:%u %s %s%s%s:%u \",",
          "1036:    (flow->ip_version == 6) ? \"[\" : \"\",",
          "1037:    flow->src_name, (flow->ip_version == 6) ? \"]\" : \"\", ntohs(flow->src_port),",
          "1038:    flow->bidirectional ? \"<->\" : \"->\",",
          "1039:    (flow->ip_version == 6) ? \"[\" : \"\",",
          "1040:    flow->dst_name, (flow->ip_version == 6) ? \"]\" : \"\", ntohs(flow->dst_port)",
          "1041:    );",
          "1043:   if(flow->vlan_id > 0) fprintf(out, \"[VLAN: %u]\", flow->vlan_id);",
          "1044:   if(enable_payload_analyzer) fprintf(out, \"[flowId: %u]\", flow->flow_id);",
          "1046:   if(enable_joy_stats) {",
          "1048:     flowGetBDMeanandVariance(flow);",
          "1049:     fflush(out);",
          "1050:     fprintf(out, \"[score: %.4f]\", flow->entropy.score);",
          "1051:   }",
          "1053:   fprintf(out, \"[proto: \");",
          "1054:   if(flow->tunnel_type != ndpi_no_tunnel)",
          "1055:     fprintf(out, \"%s:\", ndpi_tunnel2str(flow->tunnel_type));",
          "1057:   fprintf(out, \"%s/%s]\",",
          "1058:    ndpi_protocol2id(ndpi_thread_info[thread_id].workflow->ndpi_struct,",
          "1059:       flow->detected_protocol, buf, sizeof(buf)),",
          "1060:    ndpi_protocol2name(ndpi_thread_info[thread_id].workflow->ndpi_struct,",
          "1061:         flow->detected_protocol, buf1, sizeof(buf1)));",
          "1063:   if(flow->detected_protocol.category != 0)",
          "1064:     fprintf(out, \"[cat: %s/%u]\",",
          "1065:      ndpi_category_get_name(ndpi_thread_info[thread_id].workflow->ndpi_struct,",
          "1066:        flow->detected_protocol.category),",
          "1067:      (unsigned int)flow->detected_protocol.category);",
          "1069:   fprintf(out, \"[%u pkts/%llu bytes \", flow->src2dst_packets, (long long unsigned int) flow->src2dst_bytes);",
          "1070:   fprintf(out, \"%s %u pkts/%llu bytes]\",",
          "1071:    (flow->dst2src_packets > 0) ? \"<->\" : \"->\",",
          "1072:    flow->dst2src_packets, (long long unsigned int) flow->dst2src_bytes);",
          "1074:   if(flow->telnet.username[0] != '\\0')  fprintf(out, \"[Username: %s]\", flow->telnet.username);",
          "1075:   if(flow->host_server_name[0] != '\\0') fprintf(out, \"[Host: %s]\", flow->host_server_name);",
          "1077:   if(flow->info[0] != '\\0') fprintf(out, \"[%s]\", flow->info);",
          "1079:   if((flow->src2dst_packets+flow->dst2src_packets) > 5) {",
          "1080:     if(flow->iat_c_to_s && flow->iat_s_to_c) {",
          "1081:       float data_ratio = ndpi_data_ratio(flow->src2dst_bytes, flow->dst2src_bytes);",
          "1083:       fprintf(out, \"[bytes ratio: %.3f (%s)]\", data_ratio, ndpi_data_ratio2str(data_ratio));",
          "1086:       fprintf(out, \"[IAT c2s/s2c min/avg/max/stddev: %u/%u %.1f/%.1f %u/%u %.1f/%.1f]\",",
          "1087:        ndpi_data_min(flow->iat_c_to_s),     ndpi_data_min(flow->iat_s_to_c),",
          "1088:        (float)ndpi_data_average(flow->iat_c_to_s), (float)ndpi_data_average(flow->iat_s_to_c),",
          "1089:        ndpi_data_max(flow->iat_c_to_s),     ndpi_data_max(flow->iat_s_to_c),",
          "1090:        (float)ndpi_data_stddev(flow->iat_c_to_s),  (float)ndpi_data_stddev(flow->iat_s_to_c));",
          "1093:       fprintf(out, \"[Pkt Len c2s/s2c min/avg/max/stddev: %u/%u %.1f/%.1f %u/%u %.1f/%.1f]\",",
          "1094:        ndpi_data_min(flow->pktlen_c_to_s), ndpi_data_min(flow->pktlen_s_to_c),",
          "1095:        ndpi_data_average(flow->pktlen_c_to_s), ndpi_data_average(flow->pktlen_s_to_c),",
          "1096:        ndpi_data_max(flow->pktlen_c_to_s), ndpi_data_max(flow->pktlen_s_to_c),",
          "1097:        ndpi_data_stddev(flow->pktlen_c_to_s),  ndpi_data_stddev(flow->pktlen_s_to_c));",
          "1098:     }",
          "1099:   }",
          "1101:   if(flow->http.url[0] != '\\0')",
          "1102:     fprintf(out, \"[URL: %s%s][StatusCode: %u][ContentType: %s][UserAgent: %s]\",",
          "1103:      flow->http.url,",
          "1104:      printUrlRisk(ndpi_validate_url(flow->http.url)),",
          "1105:      flow->http.response_status_code,",
          "1106:      flow->http.content_type, flow->http.user_agent);",
          "1108:   if(flow->ssh_tls.ssl_version != 0) fprintf(out, \"[%s]\", ndpi_ssl_version2str(flow->ssh_tls.ssl_version, &known_tls));",
          "1109:   if(flow->ssh_tls.client_info[0] != '\\0') fprintf(out, \"[Client: %s]\", flow->ssh_tls.client_info);",
          "1110:   if(flow->ssh_tls.client_hassh[0] != '\\0') fprintf(out, \"[HASSH-C: %s]\", flow->ssh_tls.client_hassh);",
          "1112:   if(flow->ssh_tls.ja3_client[0] != '\\0') fprintf(out, \"[JA3C: %s%s]\", flow->ssh_tls.ja3_client,",
          "1113:         print_cipher(flow->ssh_tls.client_unsafe_cipher));",
          "1115:   if(flow->ssh_tls.server_info[0] != '\\0') fprintf(out, \"[Server: %s]\", flow->ssh_tls.server_info);",
          "1116:   if(flow->ssh_tls.server_hassh[0] != '\\0') fprintf(out, \"[HASSH-S: %s]\", flow->ssh_tls.server_hassh);",
          "1118:   if(flow->ssh_tls.ja3_server[0] != '\\0') fprintf(out, \"[JA3S: %s%s]\", flow->ssh_tls.ja3_server,",
          "1119:         print_cipher(flow->ssh_tls.server_unsafe_cipher));",
          "1120:   if(flow->ssh_tls.server_organization[0] != '\\0') fprintf(out, \"[Organization: %s]\", flow->ssh_tls.server_organization);",
          "1122:   if((flow->detected_protocol.master_protocol == NDPI_PROTOCOL_TLS)",
          "1123:      || (flow->detected_protocol.app_protocol == NDPI_PROTOCOL_TLS)) {",
          "1124:     if((flow->ssh_tls.sha1_cert_fingerprint[0] == 0)",
          "1125:        && (flow->ssh_tls.sha1_cert_fingerprint[1] == 0)",
          "1126:        && (flow->ssh_tls.sha1_cert_fingerprint[2] == 0))",
          "1128:     else {",
          "1129:       fprintf(out, \"[Certificate SHA-1: \");",
          "1130:       for(i=0; i<20; i++)",
          "1131:  fprintf(out, \"%s%02X\", (i > 0) ? \":\" : \"\",",
          "1132:   flow->ssh_tls.sha1_cert_fingerprint[i] & 0xFF);",
          "1133:       fprintf(out, \"]\");",
          "1135:   }",
          "1137:   if(flow->ssh_tls.notBefore && flow->ssh_tls.notAfter) {",
          "1138:     char notBefore[32], notAfter[32];",
          "1139:     struct tm a, b;",
          "1140:     struct tm *before = gmtime_r(&flow->ssh_tls.notBefore, &a);",
          "1141:     struct tm *after  = gmtime_r(&flow->ssh_tls.notAfter, &b);",
          "1143:     strftime(notBefore, sizeof(notBefore), \"%F %T\", before);",
          "1144:     strftime(notAfter, sizeof(notAfter), \"%F %T\", after);",
          "1146:     fprintf(out, \"[Validity: %s - %s]\", notBefore, notAfter);",
          "1147:   }",
          "1149:   if(flow->ssh_tls.server_cipher != '\\0') fprintf(out, \"[Cipher: %s]\", ndpi_cipher2str(flow->ssh_tls.server_cipher));",
          "1150:   if(flow->bittorent_hash[0] != '\\0') fprintf(out, \"[BT Hash: %s]\", flow->bittorent_hash);",
          "1151:   if(flow->dhcp_fingerprint[0] != '\\0') fprintf(out, \"[DHCP Fingerprint: %s]\", flow->dhcp_fingerprint);",
          "1153:   if(flow->has_human_readeable_strings) fprintf(out, \"[PLAIN TEXT (%s)]\", flow->human_readeable_string_buffer);",
          "1155:   fprintf(out, \"\\n\");",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1684:     r->num_pkts += num_pkts;",
          "1685: }",
          "1725: static void deleteScanners(struct single_flow_info *scanners) {",
          "",
          "[Removed Lines]",
          "1689: #ifdef HAVE_JSON_C",
          "1690: static void saveReceiverStats(json_object **jObj_group,",
          "1691:                               struct receiver **receivers,",
          "1692:                               u_int64_t total_pkt_count) {",
          "1694:   json_object *jArray_stats  = json_object_new_array();",
          "1695:   struct receiver *r, *tmp;",
          "1696:   int i = 0;",
          "1698:   HASH_ITER(hh, *receivers, r, tmp) {",
          "1699:     json_object *jObj_stat = json_object_new_object();",
          "1700:     char addr_name[48];",
          "1702:     if(r->version == IPVERSION)",
          "1703:       inet_ntop(AF_INET, &(r->addr), addr_name, sizeof(addr_name));",
          "1704:     else",
          "1705:       inet_ntop(AF_INET6, &(r->addr),  addr_name, sizeof(addr_name));",
          "1708:     json_object_object_add(jObj_stat,\"ip.address\",json_object_new_string(addr_name));",
          "1709:     json_object_object_add(jObj_stat,\"packets.number\", json_object_new_int(r->num_pkts));",
          "1710:     json_object_object_add(jObj_stat,\"packets.percent\",json_object_new_double(((double)r->num_pkts) / total_pkt_count));",
          "1712:     json_object_array_add(jArray_stats, jObj_stat);",
          "1714:     i++;",
          "1715:     if(i >= 10) break;",
          "1716:   }",
          "1718:   json_object_object_add(*jObj_group, \"top.receiver.stats\", jArray_stats);",
          "1719: }",
          "1720: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1987: #ifdef HAVE_JSON_C",
          "1988: static void json_init() {",
          "1989:   jArray_known_flows = json_object_new_array();",
          "1990:   jArray_unknown_flows = json_object_new_array();",
          "1991:   jArray_topStats = json_object_new_array();",
          "1992: }",
          "1996: #ifdef HAVE_JSON_C",
          "2000: static void json_destroy() {",
          "2001:   if(jArray_known_flows) {",
          "2002:     json_object_put(jArray_known_flows);",
          "2003:     jArray_known_flows = NULL;",
          "2004:   }",
          "2006:   if(jArray_unknown_flows) {",
          "2007:     json_object_put(jArray_unknown_flows);",
          "2008:     jArray_unknown_flows = NULL;",
          "2009:   }",
          "2011:   if(jArray_topStats) {",
          "2012:     json_object_put(jArray_topStats);",
          "2013:     jArray_topStats = NULL;",
          "2014:   }",
          "2015: }",
          "2016: #endif",
          "2020: static void json_open_stats_file() {",
          "2021:   if((file_first_time && ((stats_fp = fopen(_statsFilePath,\"w\")) == NULL))",
          "2022:      ||",
          "2023:      (!file_first_time && (stats_fp = fopen(_statsFilePath,\"a\")) == NULL)) {",
          "2024:     printf(\"Error creating/opening file %s\\n\", _statsFilePath);",
          "2025:     stats_flag = 0;",
          "2026:   }",
          "2027:   else file_first_time = 0;",
          "2028: }",
          "2032: static void json_close_stats_file() {",
          "2033:   json_object *jObjFinal = json_object_new_object();",
          "2035:   json_object_object_add(jObjFinal,\"duration.in.seconds\",",
          "2036:     json_object_new_int(pcap_analysis_duration));",
          "2037:   json_object_object_add(jObjFinal,\"statistics\", jArray_topStats);",
          "2038:   fprintf(stats_fp,\"%s\\n\",json_object_to_json_string(jObjFinal));",
          "2039:   fclose(stats_fp);",
          "2040:   json_object_put(jObjFinal);",
          "2041: }",
          "2042: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2105: static int info_pair_cmp (const void *_a, const void *_b)",
          "2106: {",
          "2107:   struct info_pair *a = (struct info_pair *)_a;",
          "",
          "[Removed Lines]",
          "2085: #ifdef HAVE_JSON_C",
          "2086: static int scanners_sort(void *_a, void *_b) {",
          "2087:   struct single_flow_info *a = (struct single_flow_info *)_a;",
          "2088:   struct single_flow_info *b = (struct single_flow_info *)_b;",
          "2090:   return(b->tot_flows - a->tot_flows);",
          "2091: }",
          "2095: static int scanners_port_sort(void *_a, void *_b) {",
          "2096:   struct port_flow_info *a = (struct port_flow_info *)_a;",
          "2097:   struct port_flow_info *b = (struct port_flow_info *)_b;",
          "2099:   return(b->num_flows - a->num_flows);",
          "2100: }",
          "2102: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2280: void printPortStats(struct port_stats *stats) {",
          "2281:   struct port_stats *s, *tmp;",
          "2282:   char addr_name[48];",
          "",
          "[Removed Lines]",
          "2115: #ifdef HAVE_JSON_C",
          "2116: static int top_stats_sort(void *_a, void *_b) {",
          "2117:   struct port_stats *a = (struct port_stats*)_a;",
          "2118:   struct port_stats *b = (struct port_stats*)_b;",
          "2120:   return(b->num_addr - a->num_addr);",
          "2121: }",
          "2128: static int getTopStats(struct port_stats *stats) {",
          "2129:   struct port_stats *sp, *tmp;",
          "2130:   struct info_pair inf;",
          "2131:   u_int64_t total_ip_addrs = 0;",
          "2133:   HASH_ITER(hh, stats, sp, tmp) {",
          "2134:     qsort(sp->top_ip_addrs, MAX_NUM_IP_ADDRESS, sizeof(struct info_pair), info_pair_cmp);",
          "2135:     inf = sp->top_ip_addrs[0];",
          "2137:     if(((inf.count * 100.0)/sp->cumulative_addr) > AGGRESSIVE_PERCENT) {",
          "2138:       sp->hasTopHost = 1;",
          "2139:       sp->top_host = inf.addr;",
          "2140:       sp->version = inf.version;",
          "2141:       strncpy(sp->proto, inf.proto, sizeof(sp->proto));",
          "2142:     } else",
          "2143:       sp->hasTopHost = 0;",
          "2145:     total_ip_addrs += sp->num_addr;",
          "2146:   }",
          "2148:   return total_ip_addrs;",
          "2149: }",
          "2153: static void saveScannerStats(json_object **jObj_group, struct single_flow_info **scanners) {",
          "2154:   struct single_flow_info *s, *tmp;",
          "2155:   struct port_flow_info *p, *tmp2;",
          "2156:   char addr_name[48];",
          "2157:   int i = 0, j = 0;",
          "2159:   json_object *jArray_stats  = json_object_new_array();",
          "2161:   HASH_SORT(*scanners, scanners_sort); // FIX",
          "2163:   HASH_ITER(hh, *scanners, s, tmp) {",
          "2164:     json_object *jObj_stat = json_object_new_object();",
          "2165:     json_object *jArray_ports = json_object_new_array();",
          "2167:     if(s->version == IPVERSION)",
          "2168:       inet_ntop(AF_INET, &(s->saddr), addr_name, sizeof(addr_name));",
          "2169:     else",
          "2170:       inet_ntop(AF_INET6, &(s->saddr),  addr_name, sizeof(addr_name));",
          "2172:     json_object_object_add(jObj_stat,\"ip.address\",json_object_new_string(addr_name));",
          "2173:     json_object_object_add(jObj_stat,\"total.flows.number\",json_object_new_int(s->tot_flows));",
          "2175:     HASH_SORT(s->ports, scanners_port_sort);",
          "2177:     HASH_ITER(hh, s->ports, p, tmp2) {",
          "2178:       json_object *jObj_port = json_object_new_object();",
          "2180:       json_object_object_add(jObj_port,\"port\",json_object_new_int(p->port));",
          "2181:       json_object_object_add(jObj_port,\"flows.number\",json_object_new_int(p->num_flows));",
          "2183:       json_object_array_add(jArray_ports, jObj_port);",
          "2185:       j++;",
          "2186:       if(j >= 10) break;",
          "2187:     }",
          "2189:     json_object_object_add(jObj_stat,\"top.dst.ports\",jArray_ports);",
          "2190:     json_object_array_add(jArray_stats, jObj_stat);",
          "2192:     j = 0;",
          "2193:     i++;",
          "2194:     if(i >= 10) break;",
          "2195:   }",
          "2197:   json_object_object_add(*jObj_group, \"top.scanner.stats\", jArray_stats);",
          "2198: }",
          "2200: #endif",
          "2204: #ifdef HAVE_JSON_C",
          "2208: static void saveTopStats(json_object **jObj_group,",
          "2209:                          struct port_stats **stats,",
          "2210:                          u_int8_t direction,",
          "2211:                          u_int64_t total_flow_count,",
          "2212:                          u_int64_t total_ip_addr) {",
          "2213:   struct port_stats *s, *tmp;",
          "2214:   char addr_name[48];",
          "2215:   int i = 0;",
          "2217:   json_object *jArray_stats  = json_object_new_array();",
          "2220:   HASH_ITER(hh, *stats, s, tmp) {",
          "2222:     if((s->hasTopHost)) {",
          "2223:       json_object *jObj_stat = json_object_new_object();",
          "2225:       json_object_object_add(jObj_stat,\"port\",json_object_new_int(s->port));",
          "2226:       json_object_object_add(jObj_stat,\"packets.number\",json_object_new_int(s->num_pkts));",
          "2227:       json_object_object_add(jObj_stat,\"flows.number\",json_object_new_int(s->num_flows));",
          "2228:       json_object_object_add(jObj_stat,\"flows.percent\",json_object_new_double((s->num_flows*100.0)/total_flow_count));",
          "2229:       if(s->num_pkts) json_object_object_add(jObj_stat,\"flows/packets\",",
          "2230:           json_object_new_double(((double)s->num_flows)/s->num_pkts));",
          "2231:       else json_object_object_add(jObj_stat,\"flows.num_packets\",json_object_new_double(0.0));",
          "2233:       if(s->version == IPVERSION) {",
          "2234:  inet_ntop(AF_INET, &(s->top_host), addr_name, sizeof(addr_name));",
          "2235:       } else {",
          "2236:  inet_ntop(AF_INET6, &(s->top_host),  addr_name, sizeof(addr_name));",
          "2237:       }",
          "2239:       json_object_object_add(jObj_stat,\"aggressive.host\",json_object_new_string(addr_name));",
          "2240:       json_object_object_add(jObj_stat,\"host.app.protocol\",json_object_new_string(s->proto));",
          "2242:       json_object_array_add(jArray_stats, jObj_stat);",
          "2243:       i++;",
          "2245:       if(i >= 10) break;",
          "2246:     }",
          "2247:   }",
          "2249:   json_object_object_add(*jObj_group, (direction == DIR_SRC) ?",
          "2250:     \"top.src.pkts.stats\" : \"top.dst.pkts.stats\", jArray_stats);",
          "2252:   jArray_stats  = json_object_new_array();",
          "2253:   i=0;",
          "2256:   HASH_SORT(*stats, top_stats_sort);",
          "2259:   HASH_ITER(hh, *stats, s, tmp) {",
          "2260:     json_object *jObj_stat = json_object_new_object();",
          "2262:     json_object_object_add(jObj_stat,\"port\",json_object_new_int(s->port));",
          "2263:     json_object_object_add(jObj_stat,\"host.number\",json_object_new_int64(s->num_addr));",
          "2264:     json_object_object_add(jObj_stat,\"host.percent\",json_object_new_double((s->num_addr*100.0)/total_ip_addr));",
          "2265:     json_object_object_add(jObj_stat,\"flows.number\",json_object_new_int(s->num_flows));",
          "2267:     json_object_array_add(jArray_stats,jObj_stat);",
          "2268:     i++;",
          "2270:     if(i >= 10) break;",
          "2271:   }",
          "2273:   json_object_object_add(*jObj_group, (direction == DIR_SRC) ?",
          "2274:     \"top.src.host.stats\" : \"top.dst.host.stats\", jArray_stats);",
          "2275: }",
          "2276: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2337:     unsigned int num_ja3_client;",
          "2338:     unsigned int num_ja3_server;",
          "2342:     num_flows = 0;",
          "2343:     for(thread_id = 0; thread_id < num_threads; thread_id++) {",
          "",
          "[Removed Lines]",
          "2340:     if(!json_flag) fprintf(out, \"\\n\");",
          "",
          "[Added Lines]",
          "1926:     fprintf(out, \"\\n\");",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2676:     for(thread_id = 0; thread_id < num_threads; thread_id++) {",
          "2677:       if(ndpi_thread_info[thread_id].workflow->stats.protocol_counter[0 /* 0 = Unknown */] > 0) {",
          "2686:  break;",
          "2687:       }",
          "2688:     }",
          "",
          "[Removed Lines]",
          "2678:  if(!json_flag) {",
          "2680:    fprintf(out, \"\\n\\nUndetected flows:%s\\n\",",
          "2681:     undetected_flows_deleted ? \" (expired flows are not listed below)\" : \"\");",
          "2682:  }",
          "2684:  if(json_flag)",
          "2685:    json_flag = 2;",
          "",
          "[Added Lines]",
          "2264:  fprintf(out, \"\\n\\nUndetected flows:%s\\n\",",
          "2265:   undetected_flows_deleted ? \" (expired flows are not listed below)\" : \"\");",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2730:   struct ndpi_stats cumulative_stats;",
          "2731:   int thread_id;",
          "2732:   char buf[32];",
          "2738:   long long unsigned int breed_stats[NUM_BREEDS] = { 0 };",
          "2740:   memset(&cumulative_stats, 0, sizeof(cumulative_stats));",
          "",
          "[Removed Lines]",
          "2733: #ifdef HAVE_JSON_C",
          "2734:   FILE *json_fp = NULL;",
          "2735:   u_int8_t dont_close_json_fp = 0;",
          "2736:   json_object *jObj_main = NULL, *jObj_trafficStats, *jArray_detProto = NULL, *jObj;",
          "2737: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2747:     for(i=0; i<NUM_ROOTS; i++) {",
          "2748:       ndpi_twalk(ndpi_thread_info[thread_id].workflow->ndpi_flows_root[i],",
          "2749:    node_proto_guess_walker, &thread_id);",
          "2752:     }",
          "",
          "[Removed Lines]",
          "2750:       if(verbose == 3 || stats_flag) ndpi_twalk(ndpi_thread_info[thread_id].workflow->ndpi_flows_root[i],",
          "2751:       port_stats_walker, &thread_id);",
          "",
          "[Added Lines]",
          "2325:       if(verbose == 3)",
          "2326:  ndpi_twalk(ndpi_thread_info[thread_id].workflow->ndpi_flows_root[i],",
          "2327:      port_stats_walker, &thread_id);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2789:     printf(\"\\tSetup Time:              %lu msec\\n\", (unsigned long)(setup_time_usec/1000));",
          "2790:     printf(\"\\tPacket Processing Time:  %lu msec\\n\", (unsigned long)(processing_time_usec/1000));",
          "2793:       printf(\"\\nTraffic statistics:\\n\");",
          "2794:       printf(\"\\tEthernet bytes:        %-13llu (includes ethernet CRC/IFC/trailer)\\n\",",
          "2795:       (long long unsigned int)cumulative_stats.total_wire_bytes);",
          "",
          "[Removed Lines]",
          "2792:     if(!json_flag) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2841:       }",
          "2843:       if(enable_protocol_guess)",
          "2846:   }",
          "2890:   for(i = 0; i <= ndpi_get_num_supported_protocols(ndpi_thread_info[0].workflow->ndpi_struct); i++) {",
          "2891:     ndpi_protocol_breed_t breed = ndpi_get_proto_breed(ndpi_thread_info[0].workflow->ndpi_struct, i);",
          "",
          "[Removed Lines]",
          "2844:  printf(\"\\tGuessed flow protos:   %-13u\\n\", cumulative_stats.guessed_flow_protocols);",
          "2845:     }",
          "2848:   if(json_flag) {",
          "2849: #ifdef HAVE_JSON_C",
          "2850:     if(!strcmp(_jsonFilePath, \"-\"))",
          "2851:       json_fp = stderr, dont_close_json_fp = 1;",
          "2852:     else if((json_fp = fopen(_jsonFilePath,\"w\")) == NULL) {",
          "2853:       printf(\"Error creating .json file %s\\n\", _jsonFilePath);",
          "2854:       json_flag = 0;",
          "2855:     }",
          "2857:     if(json_flag) {",
          "2858:       jObj_main = json_object_new_object();",
          "2859:       jObj_trafficStats = json_object_new_object();",
          "2860:       jArray_detProto = json_object_new_array();",
          "2862:       json_object_object_add(jObj_trafficStats,\"ethernet.bytes\",json_object_new_int64(cumulative_stats.total_wire_bytes));",
          "2863:       json_object_object_add(jObj_trafficStats,\"discarded.bytes\",json_object_new_int64(cumulative_stats.total_discarded_bytes));",
          "2864:       json_object_object_add(jObj_trafficStats,\"ip.packets\",json_object_new_int64(cumulative_stats.ip_packet_count));",
          "2865:       json_object_object_add(jObj_trafficStats,\"total.packets\",json_object_new_int64(cumulative_stats.raw_packet_count));",
          "2866:       json_object_object_add(jObj_trafficStats,\"ip.bytes\",json_object_new_int64(cumulative_stats.total_ip_bytes));",
          "2867:       json_object_object_add(jObj_trafficStats,\"avg.pkt.size\",json_object_new_int(cumulative_stats.total_ip_bytes/cumulative_stats.raw_packet_count));",
          "2868:       json_object_object_add(jObj_trafficStats,\"unique.flows\",json_object_new_int(cumulative_stats.ndpi_flow_count));",
          "2869:       json_object_object_add(jObj_trafficStats,\"tcp.pkts\",json_object_new_int64(cumulative_stats.tcp_count));",
          "2870:       json_object_object_add(jObj_trafficStats,\"udp.pkts\",json_object_new_int64(cumulative_stats.udp_count));",
          "2871:       json_object_object_add(jObj_trafficStats,\"vlan.pkts\",json_object_new_int64(cumulative_stats.vlan_count));",
          "2872:       json_object_object_add(jObj_trafficStats,\"mpls.pkts\",json_object_new_int64(cumulative_stats.mpls_count));",
          "2873:       json_object_object_add(jObj_trafficStats,\"pppoe.pkts\",json_object_new_int64(cumulative_stats.pppoe_count));",
          "2874:       json_object_object_add(jObj_trafficStats,\"fragmented.pkts\",json_object_new_int64(cumulative_stats.fragmented_count));",
          "2875:       json_object_object_add(jObj_trafficStats,\"max.pkt.size\",json_object_new_int(cumulative_stats.max_packet_len));",
          "2876:       json_object_object_add(jObj_trafficStats,\"pkt.len_min64\",json_object_new_int64(cumulative_stats.packet_len[0]));",
          "2877:       json_object_object_add(jObj_trafficStats,\"pkt.len_64_128\",json_object_new_int64(cumulative_stats.packet_len[1]));",
          "2878:       json_object_object_add(jObj_trafficStats,\"pkt.len_128_256\",json_object_new_int64(cumulative_stats.packet_len[2]));",
          "2879:       json_object_object_add(jObj_trafficStats,\"pkt.len_256_1024\",json_object_new_int64(cumulative_stats.packet_len[3]));",
          "2880:       json_object_object_add(jObj_trafficStats,\"pkt.len_1024_1500\",json_object_new_int64(cumulative_stats.packet_len[4]));",
          "2881:       json_object_object_add(jObj_trafficStats,\"pkt.len_grt1500\",json_object_new_int64(cumulative_stats.packet_len[5]));",
          "2882:       json_object_object_add(jObj_trafficStats,\"guessed.flow.protos\",json_object_new_int(cumulative_stats.guessed_flow_protocols));",
          "2884:       json_object_object_add(jObj_main,\"traffic.statistics\",jObj_trafficStats);",
          "2885:     }",
          "2886: #endif",
          "2887:   }",
          "2889:   if((!json_flag) && (!quiet_mode)) printf(\"\\n\\nDetected protocols:\\n\");",
          "",
          "[Added Lines]",
          "2419:  printf(\"\\tGuessed flow protos:   %-13u\\n\", cumulative_stats.guessed_flow_protocols);",
          "2423:   if(!quiet_mode) printf(\"\\n\\nDetected protocols:\\n\");",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2900:   (long long unsigned int)cumulative_stats.protocol_counter_bytes[i],",
          "2901:   cumulative_stats.protocol_flows[i]);",
          "2904:  printf(\"\\t%-20s packets: %-13llu bytes: %-13llu \"",
          "2905:         \"flows: %-13u\\n\",",
          "2906:         ndpi_get_proto_name(ndpi_thread_info[0].workflow->ndpi_struct, i),",
          "2907:         (long long unsigned int)cumulative_stats.protocol_counter[i],",
          "2908:         (long long unsigned int)cumulative_stats.protocol_counter_bytes[i],",
          "2909:         cumulative_stats.protocol_flows[i]);",
          "2924:       }",
          "2926:       total_flow_bytes += cumulative_stats.protocol_counter_bytes[i];",
          "2927:     }",
          "2928:   }",
          "2931:     printf(\"\\n\\nProtocol statistics:\\n\");",
          "2933:     for(i=0; i < NUM_BREEDS; i++) {",
          "",
          "[Removed Lines]",
          "2903:       if((!json_flag) && (!quiet_mode)) {",
          "2910:       } else {",
          "2911: #ifdef HAVE_JSON_C",
          "2912:  if(json_fp) {",
          "2913:    jObj = json_object_new_object();",
          "2915:    json_object_object_add(jObj,\"name\",json_object_new_string(ndpi_get_proto_name(ndpi_thread_info[0].workflow->ndpi_struct, i)));",
          "2916:    json_object_object_add(jObj,\"breed\",json_object_new_string(ndpi_get_proto_breed_name(ndpi_thread_info[0].workflow->ndpi_struct, breed)));",
          "2917:    json_object_object_add(jObj,\"packets\",json_object_new_int64(cumulative_stats.protocol_counter[i]));",
          "2918:    json_object_object_add(jObj,\"bytes\",json_object_new_int64(cumulative_stats.protocol_counter_bytes[i]));",
          "2919:    json_object_object_add(jObj,\"flows\",json_object_new_int(cumulative_stats.protocol_flows[i]));",
          "2921:    json_object_array_add(jArray_detProto,jObj);",
          "2922:  }",
          "2923: #endif",
          "2930:   if((!json_flag) && (!quiet_mode)) {",
          "",
          "[Added Lines]",
          "2437:       if((!quiet_mode)) {",
          "2450:   if((!quiet_mode)) {",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2944:   printFlowsStats();",
          "2960:     HASH_SORT(srcStats, port_stats_sort);",
          "2961:     HASH_SORT(dstStats, port_stats_sort);",
          "2965:     printf(\"\\n\\nSource Ports Stats:\\n\");",
          "2966:     printPortStats(srcStats);",
          "",
          "[Removed Lines]",
          "2946:   if(json_flag != 0) {",
          "2947: #ifdef HAVE_JSON_C",
          "2948:     json_object_object_add(jObj_main,\"detected.protos\",jArray_detProto);",
          "2949:     json_object_object_add(jObj_main,\"known.flows\",jArray_known_flows);",
          "2951:     if(json_object_array_length(jArray_unknown_flows) != 0)",
          "2952:       json_object_object_add(jObj_main,\"unknown.flows\",jArray_unknown_flows);",
          "2954:     fprintf(json_fp,\"%s\\n\",json_object_to_json_string(jObj_main));",
          "2955:     if(!dont_close_json_fp) fclose(json_fp);",
          "2956: #endif",
          "2957:   }",
          "2959:   if(stats_flag || verbose == 3) {",
          "2962:   }",
          "2964:   if(verbose == 3) {",
          "",
          "[Added Lines]",
          "2466:   if(verbose == 3) {",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2969:     printPortStats(dstStats);",
          "2970:   }",
          "3005: free_stats:",
          "3006:   if(scannerHosts) {",
          "3007:     deleteScanners(scannerHosts);",
          "",
          "[Removed Lines]",
          "2972:   if(stats_flag) {",
          "2973: #ifdef HAVE_JSON_C",
          "2974:     json_object *jObj_stats = json_object_new_object();",
          "2975:     char timestamp[64];",
          "2976:     int count;",
          "2978:     strftime(timestamp, sizeof(timestamp), \"%FT%TZ\", localtime(&pcap_start.tv_sec));",
          "2979:     json_object_object_add(jObj_stats, \"time\", json_object_new_string(timestamp));",
          "2981:     saveScannerStats(&jObj_stats, &scannerHosts);",
          "2983:     if((count = HASH_COUNT(topReceivers)) == 0) {",
          "2984:       HASH_SORT(receivers, receivers_sort);",
          "2985:       saveReceiverStats(&jObj_stats, &receivers, cumulative_stats.ip_packet_count);",
          "2986:     }",
          "2987:     else{",
          "2988:       HASH_SORT(topReceivers, receivers_sort);",
          "2989:       saveReceiverStats(&jObj_stats, &topReceivers, cumulative_stats.ip_packet_count);",
          "2990:     }",
          "2992:     u_int64_t total_src_addr = getTopStats(srcStats);",
          "2993:     u_int64_t total_dst_addr = getTopStats(dstStats);",
          "2995:     saveTopStats(&jObj_stats, &srcStats, DIR_SRC,",
          "2996:                  cumulative_stats.ndpi_flow_count, total_src_addr);",
          "2998:     saveTopStats(&jObj_stats, &dstStats, DIR_DST,",
          "2999:                  cumulative_stats.ndpi_flow_count, total_dst_addr);",
          "3001:     json_object_array_add(jArray_topStats, jObj_stats);",
          "3002: #endif",
          "3003:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "3142:         printf(\"ERROR: could not open playlist %s: %s\\n\", filename, pcap_error_buffer);",
          "3143:         exit(-1);",
          "3144:       } else {",
          "3146:    printf(\"Reading packets from playlist %s...\\n\", pcap_file);",
          "3147:       }",
          "3148:     } else {",
          "3150:  printf(\"Reading packets from pcap file %s...\\n\", pcap_file);",
          "3151:     }",
          "3152:   } else {",
          "3153:     live_capture = 1;",
          "3156: #ifdef USE_DPDK",
          "3157:       printf(\"Capturing from DPDK (port 0)...\\n\");",
          "3158: #else",
          "",
          "[Removed Lines]",
          "3145:         if((!json_flag) && (!quiet_mode))",
          "3149:       if((!json_flag) && (!quiet_mode))",
          "3155:     if((!json_flag) && (!quiet_mode)) {",
          "",
          "[Added Lines]",
          "2617:         if((!quiet_mode))",
          "2621:       if((!quiet_mode))",
          "2627:     if((!quiet_mode)) {",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "3167:   if(capture_for > 0) {",
          "3169:       printf(\"Capturing traffic up to %u seconds\\n\", (unsigned int)capture_for);",
          "3171: #ifndef WIN32",
          "",
          "[Removed Lines]",
          "3168:     if((!json_flag) && (!quiet_mode))",
          "",
          "[Added Lines]",
          "2640:     if((!quiet_mode))",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "3321:     if(pthread_setaffinity_np(pthread_self(), sizeof(cpu_set_t), &cpuset) != 0)",
          "3322:       fprintf(stderr, \"Error while binding thread %ld to core %d\\n\", thread_id, core_affinity[thread_id]);",
          "3323:     else {",
          "3325:     }",
          "3326:   } else",
          "3327: #endif",
          "3330: #ifdef USE_DPDK",
          "3331:   while(dpdk_run_capture) {",
          "",
          "[Removed Lines]",
          "3324:       if((!json_flag) && (!quiet_mode)) printf(\"Running thread %ld on core %d...\\n\", thread_id, core_affinity[thread_id]);",
          "3328:     if((!json_flag) && (!quiet_mode)) printf(\"Running thread %ld...\\n\", thread_id);",
          "",
          "[Added Lines]",
          "2796:       if((!quiet_mode)) printf(\"Running thread %ld on core %d...\\n\", thread_id, core_affinity[thread_id]);",
          "2800:     if((!quiet_mode)) printf(\"Running thread %ld...\\n\", thread_id);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "3380:   u_int64_t processing_time_usec, setup_time_usec;",
          "3381:   long thread_id;",
          "3388: #ifdef DEBUG_TRACE",
          "3389:   if(trace) fprintf(trace, \"Num threads: %d\\n\", num_threads);",
          "3390: #endif",
          "",
          "[Removed Lines]",
          "3383: #ifdef HAVE_JSON_C",
          "3384:   json_init();",
          "3385:   if(stats_flag)  json_open_stats_file();",
          "3386: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "3436:   printResults(processing_time_usec, setup_time_usec);",
          "3444:   for(thread_id = 0; thread_id < num_threads; thread_id++) {",
          "3445:     if(ndpi_thread_info[thread_id].workflow->pcap_handle != NULL)",
          "3446:       pcap_close(ndpi_thread_info[thread_id].workflow->pcap_handle);",
          "3448:     terminateDetection(thread_id);",
          "3449:   }",
          "3454: }",
          "",
          "[Removed Lines]",
          "3438:   if(stats_flag) {",
          "3439: #ifdef HAVE_JSON_C",
          "3440:     json_close_stats_file();",
          "3441: #endif",
          "3442:   }",
          "3451: #ifdef HAVE_JSON_C",
          "3452:   json_destroy();",
          "3453: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "3588: #endif",
          "3589: }",
          "",
          "[Removed Lines]",
          "3598: #ifdef HAVE_JSON_C",
          "3599: void bpf_filter_pkt_peak_filter(json_object **jObj_bpfFilter,",
          "3600:                                 int port_array[], int p_size,",
          "3601:                                 const char *src_host_array[16],",
          "3602:                                 int sh_size,",
          "3603:                                 const char *dst_host_array[16],",
          "3604:                                 int dh_size) {",
          "3605:   char filter[2048] = { '\\0' };",
          "3606:   int produced = 0;",
          "3607:   int i = 0, l = 0;",
          "3609:   if(port_array[0] != INIT_VAL) {",
          "3610:     strcpy(filter, \"not (src port \");",
          "3612:     l = strlen(filter);",
          "3614:     while(i < p_size && port_array[i] != INIT_VAL) {",
          "3615:       if(i+1 == p_size || port_array[i+1] == INIT_VAL)",
          "3616:         snprintf(&filter[l], sizeof(filter)-l, \"%d\", port_array[i]);",
          "3617:       else",
          "3618:         snprintf(&filter[l], sizeof(filter)-l, \"%d or \", port_array[i]);",
          "3620:       i++;",
          "3621:     }",
          "3623:     l += snprintf(&filter[l], sizeof(filter)-l, \"%s\", \")\");",
          "3624:     produced = 1;",
          "3625:   }",
          "3628:   if(src_host_array[0] != NULL) {",
          "3629:     if(port_array[0] != INIT_VAL)",
          "3630:       l += snprintf(&filter[l], sizeof(filter)-l, \" and not (src \");",
          "3631:     else",
          "3632:       l += snprintf(&filter[l], sizeof(filter)-l, \"not (src \");",
          "3634:     i = 0;",
          "3636:     while(i < sh_size && src_host_array[i] != NULL) {",
          "3637:       if(i+1 == sh_size || src_host_array[i+1] == NULL)",
          "3638:  l += snprintf(&filter[l], sizeof(filter)-l, \"%s\", src_host_array[i]);",
          "3639:       else",
          "3640:  l += snprintf(&filter[l], sizeof(filter)-l, \"%s or \", src_host_array[i]);",
          "3642:       i++;",
          "3643:     }",
          "3645:     l += snprintf(&filter[l], sizeof(filter)-l, \"%s\", \")\");",
          "3646:     produced = 1;",
          "3647:   }",
          "3649:   if(dst_host_array[0] != NULL) {",
          "3650:     if(port_array[0] != INIT_VAL || src_host_array[0] != NULL)",
          "3651:       l += snprintf(&filter[l], sizeof(filter)-l, \" and not (dst \");",
          "3652:     else",
          "3653:       l += snprintf(&filter[l], sizeof(filter)-l, \"not (dst \");",
          "3655:     i=0;",
          "3657:     while(i < dh_size && dst_host_array[i] != NULL) {",
          "3658:       if(i+1 == dh_size || dst_host_array[i+1] == NULL)",
          "3659:  l += snprintf(&filter[l], sizeof(filter)-l, \"%s\", dst_host_array[i]);",
          "3660:       else",
          "3661:  l += snprintf(&filter[l], sizeof(filter)-l, \"%s or \", dst_host_array[i]);",
          "3663:       i++;",
          "3664:     }",
          "3666:     l +=  snprintf(&filter[l], sizeof(filter)-l, \"%s\", \")\");",
          "3667:     produced = 1;",
          "3668:   }",
          "3670:   if(produced)",
          "3671:     json_object_object_add(*jObj_bpfFilter, \"pkt.peak.filter\", json_object_new_string(filter));",
          "3672:   else",
          "3673:     json_object_object_add(*jObj_bpfFilter, \"pkt.peak.filter\", json_object_new_string(\"\"));",
          "3674: }",
          "3675: #endif",
          "3683: #ifdef HAVE_JSON_C",
          "3684: void bpf_filter_host_peak_filter(json_object **jObj_bpfFilter,",
          "3685:                                  const char *host_array[16],",
          "3686:                                  int h_size) {",
          "3687:   char filter[2048];",
          "3688:   int produced = 0;",
          "3689:   int i = 0;",
          "3692:   if(host_array[0] != NULL) {",
          "3693:     int l;",
          "3695:     strcpy(filter, \"not (dst \");",
          "3697:     while(i < h_size && host_array[i] != NULL) {",
          "3698:       l = strlen(filter);",
          "3700:       if(i+1 == h_size || host_array[i+1] == NULL)",
          "3701:  snprintf(&filter[l], sizeof(filter)-l, \"%s\", host_array[i]);",
          "3702:       else",
          "3703:  snprintf(&filter[l], sizeof(filter)-l, \"%s or \", host_array[i]);",
          "3705:       i++;",
          "3706:     }",
          "3708:     l = strlen(filter);",
          "3709:     snprintf(&filter[l], sizeof(filter)-l, \"%s\", \")\");",
          "3710:     produced = 1;",
          "3711:   }",
          "3713:   if(produced)",
          "3714:     json_object_object_add(*jObj_bpfFilter, \"host.peak.filter\", json_object_new_string(filter));",
          "3715:   else",
          "3716:     json_object_object_add(*jObj_bpfFilter, \"host.peak.filter\", json_object_new_string(\"\"));",
          "3717: }",
          "3718: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "3781:   exit(-1);",
          "3782: }",
          "",
          "[Removed Lines]",
          "3786: #ifdef HAVE_JSON_C",
          "3790: float getAverage(struct json_object *jObj_stat, char *field) {",
          "3791:   json_object *field_stat;",
          "3792:   json_bool res;",
          "3793:   float sum = 0;",
          "3794:   int r;",
          "3795:   int j = 0;",
          "3797:   if((r = strcmp(field, \"top.scanner.stats\")) == 0) {",
          "3798:     for(j=0; j<json_object_array_length(jObj_stat); j++) {",
          "3799:       field_stat = json_object_array_get_idx(jObj_stat, j);",
          "3800:       json_object *jObj_tot_flows_number;",
          "3802:       if((res = json_object_object_get_ex(field_stat, \"total.flows.number\", &jObj_tot_flows_number)) == 0) {",
          "3803:         fprintf(stderr, \"ERROR: can't get \\\"total.flows.number\\\", use -x flag only with .json files generated by ndpiReader -b flag.\\n\");",
          "3804:         exit(-1);",
          "3805:       }",
          "3806:       u_int32_t tot_flows_number = json_object_get_int(jObj_tot_flows_number);",
          "3808:       sum += tot_flows_number;",
          "3809:     }",
          "3810:   } else if((r = strcmp(field, \"top.src.pkts.stats\")) == 0) {",
          "3811:     for(j=0; j<json_object_array_length(jObj_stat); j++) {",
          "3812:       field_stat = json_object_array_get_idx(jObj_stat, j);",
          "3813:       json_object *jObj_packets_number;",
          "3815:       if((res = json_object_object_get_ex(field_stat, \"packets.number\", &jObj_packets_number)) == 0) {",
          "3816:         fprintf(stderr, \"ERROR: can't get \\\"packets.number\\\", use -x flag only with .json files generated by ndpiReader -b flag.\\n\");",
          "3817:         exit(-1);",
          "3818:       }",
          "3819:       u_int32_t packets_number = json_object_get_int(jObj_packets_number);",
          "3821:       sum += packets_number;",
          "3822:     }",
          "3823:   }",
          "3825:   if(j == 0) return 0.0;",
          "3827:   return sum/j;",
          "3828: }",
          "3829: #endif",
          "3831: #ifdef HAVE_JSON_C",
          "3836: float getStdDeviation(struct json_object *jObj_stat, float average, char *field) {",
          "3837:   json_object *field_stat;",
          "3838:   json_bool res;",
          "3839:   float sum = 0;",
          "3840:   int j = 0;",
          "3841:   int r;",
          "3843:   if((r = strcmp(field, \"top.scanner.stats\")) == 0) {",
          "3844:     for(; j<json_object_array_length(jObj_stat); j++) {",
          "3845:       field_stat = json_object_array_get_idx(jObj_stat, j);",
          "3846:       json_object *jObj_tot_flows_number;",
          "3848:       if((res = json_object_object_get_ex(field_stat, \"total.flows.number\", &jObj_tot_flows_number)) == 0) {",
          "3849:         fprintf(stderr, \"ERROR: can't get \\\"total.flows.number\\\", use -x flag only with .json files generated by ndpiReader -b flag.\\n\");",
          "3850:         exit(-1);",
          "3851:       }",
          "3852:       u_int32_t tot_flows_number = json_object_get_int(jObj_tot_flows_number);",
          "3854:       sum += pow((tot_flows_number - average), 2);",
          "3855:     }",
          "3856:   }",
          "3858:   return sqrt(sum/(float)j);",
          "3859: }",
          "3861: #endif",
          "3865: #ifdef HAVE_JSON_C",
          "3866: void getSourcePorts(struct json_object *jObj_stat, int srcPortArray[], int size, float threshold) {",
          "3867:   int j;",
          "3869:   for(j=0; j<json_object_array_length(jObj_stat); j++) {",
          "3870:     json_object *src_pkts_stat = json_object_array_get_idx(jObj_stat, j);",
          "3871:     json_object *jObj_packets_number;",
          "3872:     json_object *jObj_flows_percent;",
          "3873:     json_object *jObj_flows_packets;",
          "3874:     json_object *jObj_port;",
          "3875:     json_bool res;",
          "3877:     if((res = json_object_object_get_ex(src_pkts_stat, \"packets.number\", &jObj_packets_number)) == 0) {",
          "3878:       fprintf(stderr, \"ERROR: can't get \\\"packets.number\\\", use -x flag only with .json files generated by ndpiReader -b flag.\\n\");",
          "3879:       exit(-1);",
          "3880:     }",
          "3881:     u_int32_t packets_number = json_object_get_int(jObj_packets_number);",
          "3883:     if((res = json_object_object_get_ex(src_pkts_stat, \"flows.percent\", &jObj_flows_percent)) == 0) {",
          "3884:       fprintf(stderr, \"ERROR: can't get \\\"flows.percent\\\", use -x flag only with .json files generated by ndpiReader -b flag.\\n\");",
          "3885:       exit(-1);",
          "3886:     }",
          "3887:     double flows_percent = json_object_get_double(jObj_flows_percent);",
          "3890:     if((res = json_object_object_get_ex(src_pkts_stat, \"flows/packets\", &jObj_flows_packets)) == 0) {",
          "3891:       fprintf(stderr, \"ERROR: can't get \\\"flows/packets\\\", use -x flag only with .json files generated by ndpiReader -b flag.\\n\");",
          "3892:       exit(-1);",
          "3893:     }",
          "3894:     double flows_packets = json_object_get_double(jObj_flows_packets);",
          "3897:     if((flows_packets > FLOWS_PACKETS_THRESHOLD)",
          "3898:        && (flows_percent >= FLOWS_PERCENT_THRESHOLD)",
          "3899:        && packets_number >= threshold) {",
          "3900:       if((res = json_object_object_get_ex(src_pkts_stat, \"port\", &jObj_port)) == 0) {",
          "3901:  fprintf(stderr, \"ERROR: can't get \\\"port\\\", use -x flag only with .json files generated by ndpiReader -b flag.\\n\");",
          "3902:  exit(-1);",
          "3903:       }",
          "3904:       int port = json_object_get_int(jObj_port);",
          "3906:       bpf_filter_port_array_add(srcPortArray, size, port);",
          "3907:     }",
          "3908:   }",
          "3909: }",
          "3910: #endif",
          "3914: #ifdef HAVE_JSON_C",
          "3915: void getReceiverHosts(struct json_object *jObj_stat, const char *dstHostArray[16], int size) {",
          "3916:   int j;",
          "3918:   for(j=0; j<json_object_array_length(jObj_stat); j++) {",
          "3919:     json_object *scanner_stat = json_object_array_get_idx(jObj_stat, j);",
          "3920:     json_object *jObj_host_address;",
          "3921:     json_object *jObj_pkts_percent;",
          "3922:     json_bool res;",
          "3924:     if((res = json_object_object_get_ex(scanner_stat, \"packets.percent\", &jObj_pkts_percent)) == 0) {",
          "3925:       fprintf(stderr, \"ERROR: can't get \\\"packets.percent\\\", use -x flag only with .json files generated by ndpiReader -b flag.\\n\");",
          "3926:       exit(-1);",
          "3927:     }",
          "3928:     double pkts_percent = json_object_get_double(jObj_pkts_percent);",
          "3931:     if(pkts_percent > PKTS_PERCENT_THRESHOLD) {",
          "3932:       if((res = json_object_object_get_ex(scanner_stat, \"ip.address\", &jObj_host_address)) == 0) {",
          "3933:  fprintf(stderr, \"ERROR: can't get \\\"ip.address, use -x flag only with .json files generated by ndpiReader -b flag.\\n\");",
          "3934:  exit(-1);",
          "3935:       }",
          "3936:       const char *host_address = json_object_get_string(jObj_host_address);",
          "3938:       bpf_filter_host_array_add(dstHostArray, size, host_address);",
          "3939:     }",
          "3940:   }",
          "3941: }",
          "3942: #endif",
          "3946: #ifdef HAVE_JSON_C",
          "3947: void getScannerHosts(struct json_object *jObj_stat, int duration,",
          "3948:                      const char *srcHostArray[48], int size,",
          "3949:                      float threshold) {",
          "3950:   int j;",
          "3952:   for(j=0; j<json_object_array_length(jObj_stat); j++) {",
          "3953:     json_object *scanner_stat = json_object_array_get_idx(jObj_stat, j);",
          "3954:     json_object *jObj_host_address;",
          "3955:     json_object *jObj_tot_flows_number;",
          "3956:     json_bool res;",
          "3959:     if((res = json_object_object_get_ex(scanner_stat, \"total.flows.number\", &jObj_tot_flows_number)) == 0) {",
          "3960:       fprintf(stderr, \"ERROR: can't get \\\"total.flows.number\\\", use -x flag only with .json files generated by ndpiReader -b flag.\\n\");",
          "3961:       exit(-1);",
          "3962:     }",
          "3963:     u_int32_t tot_flows_number = json_object_get_int(jObj_tot_flows_number);",
          "3966:     if(((tot_flows_number/(float)duration) > FLOWS_THRESHOLD) && tot_flows_number > threshold) {",
          "3967:       if((res = json_object_object_get_ex(scanner_stat, \"ip.address\", &jObj_host_address)) == 0) {",
          "3968:  fprintf(stderr, \"ERROR: can't get \\\"ip.address\\\", use -x flag only with .json files generated by ndpiReader -b flag.\\n\");",
          "3969:  exit(-1);",
          "3970:       }",
          "3971:       const char *host_address = json_object_get_string(jObj_host_address);",
          "3973:       bpf_filter_host_array_add(srcHostArray, size, host_address);",
          "3975:     }",
          "3976:   }",
          "3977: }",
          "3978: #endif",
          "3982: #ifdef HAVE_JSON_C",
          "3983: void getDestinationHosts(struct json_object *jObj_stat, int duration,",
          "3984:     const char *dstHostArray[16], int size) {",
          "3985:   int j;",
          "3987:   for(j=0; j<json_object_array_length(jObj_stat); j++) {",
          "3988:     json_object *scanner_stat = json_object_array_get_idx(jObj_stat, j);",
          "3989:     json_object *jObj_host_address;",
          "3990:     json_object *jObj_flows_percent;",
          "3991:     json_bool res;",
          "3994:     if((res = json_object_object_get_ex(scanner_stat, \"flows.percent\", &jObj_flows_percent)) == 0) {",
          "3995:       fprintf(stderr, \"ERROR: can't get \\\"flows.percent\\\", use -x flag only with .json files generated by ndpiReader -b flag.\\n\");",
          "3996:       exit(-1);",
          "3997:     }",
          "3998:     double flows_percent = json_object_get_double(jObj_flows_percent);",
          "4001:     if(flows_percent > FLOWS_PERCENT_THRESHOLD_2) {",
          "4002:       if((res = json_object_object_get_ex(scanner_stat, \"aggressive.host\", &jObj_host_address)) == 0) {",
          "4003:  fprintf(stderr, \"ERROR: can't get \\\"aggressive.host\\\", use -x flag only with .json files generated by ndpiReader -b flag.\\n\");",
          "4004:  exit(-1);",
          "4005:       }",
          "4006:       const char *host_address = json_object_get_string(jObj_host_address);",
          "4008:       bpf_filter_host_array_add(dstHostArray, size, host_address);",
          "4010:     }",
          "4011:   }",
          "4012: }",
          "4013: #endif",
          "4017: #ifdef HAVE_JSON_C",
          "4018: static void produceBpfFilter(char *filePath) {",
          "4020:   json_object *jObj_duration;",
          "4022:   json_bool res;",
          "4023:   int filterSrcPorts[PORT_ARRAY_SIZE];",
          "4024:   const char *filterSrcHosts[48];",
          "4025:   const char *filterDstHosts[48];",
          "4026:   const char *filterPktDstHosts[48];",
          "4027:   struct stat statbuf;",
          "4028:   FILE *fp = NULL;",
          "4029:   char _filterFilePath[1024];",
          "4030:   json_object *jObj_bpfFilter;",
          "4031:   void *fmap;",
          "4032:   int fsock;",
          "4033:   float average;",
          "4034:   float deviation;",
          "4035:   int duration;",
          "4036:   int typeCheck;",
          "4037:   int array_len;",
          "4038:   int i;",
          "4040:   if((fsock = open(filePath, O_RDONLY)) == -1) {",
          "4041:     fprintf(stderr,\"error opening file %s\\n\", filePath);",
          "4042:     exit(-1);",
          "4043:   }",
          "4045:   if(fstat(fsock, &statbuf) == -1) {",
          "4046:     fprintf(stderr,\"error getting file stat\\n\");",
          "4047:     exit(-1);",
          "4048:   }",
          "4050:   if((fmap = mmap(NULL, statbuf.st_size, PROT_READ, MAP_PRIVATE, fsock, 0)) == MAP_FAILED) {",
          "4051:     fprintf(stderr,\"error mmap is failed\\n\");",
          "4052:     exit(-1);",
          "4053:   }",
          "4055:   if((jObj = json_tokener_parse(fmap)) == NULL) {",
          "4056:     fprintf(stderr,\"ERROR: invalid json file. Use -x flag only with .json files generated by ndpiReader -b flag.\\n\");",
          "4057:     exit(-1);",
          "4058:   }",
          "4061:   if((res = json_object_object_get_ex(jObj, \"duration.in.seconds\", &jObj_duration)) == 0) {",
          "4062:     fprintf(stderr,\"ERROR: can't get \\\"duration.in.seconds\\\", use -x flag only with .json files generated by ndpiReader -b flag.\\n\");",
          "4063:     exit(-1);",
          "4064:   }",
          "4065:   duration = json_object_get_int(jObj_duration);",
          "4068:   if((res = json_object_object_get_ex(jObj, \"statistics\", &jObj_statistics)) == 0) {",
          "4069:     fprintf(stderr,\"ERROR: can't get \\\"statistics\\\", use -x flag only with .json files generated by ndpiReader -b flag.\\n\");",
          "4070:     exit(-1);",
          "4071:   }",
          "4073:   if((typeCheck = json_object_is_type(jObj_statistics, json_type_array)) == 0) {",
          "4074:     fprintf(stderr,\"ERROR: invalid json file. Use -x flag only with .json files generated by ndpiReader -b flag.\\n\");",
          "4075:     exit(-1);",
          "4076:   }",
          "4077:   array_len = json_object_array_length(jObj_statistics);",
          "4080:   bpf_filter_port_array_init(filterSrcPorts, PORT_ARRAY_SIZE);",
          "4081:   bpf_filter_host_array_init(filterSrcHosts, HOST_ARRAY_SIZE);",
          "4082:   bpf_filter_host_array_init(filterDstHosts, HOST_ARRAY_SIZE);",
          "4083:   bpf_filter_host_array_init(filterPktDstHosts, HOST_ARRAY_SIZE/2);",
          "4085:   for(i=0; i<array_len; i++) {",
          "4086:     json_object *stats = json_object_array_get_idx(jObj_statistics, i);",
          "4087:     json_object *val;",
          "4089:     if((res = json_object_object_get_ex(stats, \"top.scanner.stats\", &val)) == 0) {",
          "4090:       fprintf(stderr,\"ERROR: can't get \\\"top.scanner.stats\\\", use -x flag only with .json files generated by ndpiReader -b flag.\\n\");",
          "4091:       exit(-1);",
          "4092:     }",
          "4094:     if((average = getAverage(val, \"top.scanner.stats\")) != 0) {",
          "4095:       deviation = getStdDeviation(val, average, \"top.scanner.stats\");",
          "4096:       getScannerHosts(val, duration, filterSrcHosts, HOST_ARRAY_SIZE, average+deviation);",
          "4097:     }",
          "4100:     if((res = json_object_object_get_ex(stats, \"top.receiver.stats\", &val)) == 0) {",
          "4101:       fprintf(stderr,\"ERROR: can't get \\\"top.receiver.stats\\\", use -x flag only with .json files generated by ndpiReader -b flag.\\n\");",
          "4102:       exit(-1);",
          "4103:     }",
          "4104:     getReceiverHosts(val, filterPktDstHosts, HOST_ARRAY_SIZE/2);",
          "4107:     if((res = json_object_object_get_ex(stats, \"top.src.pkts.stats\", &val)) == 0) {",
          "4108:       fprintf(stderr,\"ERROR: can't get \\\"top.src.pkts.stats\\\", use -x flag only with .json files generated by ndpiReader -b flag.\\n\");",
          "4109:       exit(-1);",
          "4110:     }",
          "4112:     if((average = getAverage(val, \"top.src.pkts.stats\")) != 0)",
          "4113:       getSourcePorts(val, filterSrcPorts, PORT_ARRAY_SIZE, average);",
          "4116:     if((res = json_object_object_get_ex(stats, \"top.dst.pkts.stats\", &val)) == 0) {",
          "4117:       fprintf(stderr,\"ERROR: can't get \\\"top.dst.pkts.stats\\\", use -x flag only with .json files generated by ndpiReader -b flag.\\n\");",
          "4118:       exit(-1);",
          "4119:     }",
          "4120:     getDestinationHosts(val, duration, filterDstHosts, HOST_ARRAY_SIZE);",
          "4121:   }",
          "4124:   snprintf(_filterFilePath, sizeof(_filterFilePath), \"%s.bpf\", filePath);",
          "4126:   if((fp = fopen(_filterFilePath,\"w\")) == NULL) {",
          "4127:     printf(\"Error creating .json file %s\\n\", _filterFilePath);",
          "4128:     exit(-1);",
          "4129:   }",
          "4131:   jObj_bpfFilter = json_object_new_object();",
          "4133:   bpf_filter_pkt_peak_filter(&jObj_bpfFilter, filterSrcPorts, PORT_ARRAY_SIZE,",
          "4134:         filterSrcHosts, HOST_ARRAY_SIZE, filterPktDstHosts, HOST_ARRAY_SIZE/2);",
          "4136:   bpf_filter_host_peak_filter(&jObj_bpfFilter, filterDstHosts, HOST_ARRAY_SIZE);",
          "4138:   fprintf(fp,\"%s\\n\",json_object_to_json_string(jObj_bpfFilter));",
          "4139:   fclose(fp);",
          "4141:   printf(\"created: %s\\n\", _filterFilePath);",
          "4144: }",
          "4145: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "4178:     parseOptions(argc, argv);",
          "4188:       printf(\"\\n-----------------------------------------------------------\\n\"",
          "4189:       \"* NOTE: This is demo app to show *some* nDPI features.\\n\"",
          "4190:       \"* In this demo we have implemented only some basic features\\n\"",
          "",
          "[Removed Lines]",
          "4180:     if(bpf_filter_flag) {",
          "4181: #ifdef HAVE_JSON_C",
          "4182:       produceBpfFilter(_diagnoseFilePath);",
          "4183:       return 0;",
          "4184: #endif",
          "4185:     }",
          "4187:     if((!json_flag) && (!quiet_mode)) {",
          "",
          "[Added Lines]",
          "3144:     if(!quiet_mode) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}