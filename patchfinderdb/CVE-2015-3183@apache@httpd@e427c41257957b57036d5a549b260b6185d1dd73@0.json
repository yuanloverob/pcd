{
  "cve_id": "CVE-2015-3183",
  "cve_desc": "The chunked transfer coding implementation in the Apache HTTP Server before 2.4.14 does not properly parse chunk headers, which allows remote attackers to conduct HTTP request smuggling attacks via a crafted request, related to mishandling of large chunk-size values and invalid chunk-extension characters in modules/http/http_filters.c.",
  "repo": "apache/httpd",
  "patch_hash": "e427c41257957b57036d5a549b260b6185d1dd73",
  "patch_info": {
    "commit_hash": "e427c41257957b57036d5a549b260b6185d1dd73",
    "repo": "apache/httpd",
    "commit_url": "https://github.com/apache/httpd/commit/e427c41257957b57036d5a549b260b6185d1dd73",
    "files": [
      "CHANGES",
      "docs/log-message-tags/next-number",
      "modules/http/http_filters.c"
    ],
    "message": "Limit accepted chunk-size to 2^63-1 and be strict about chunk-ext\nauthorized characters.\n\nSubmitted by: Yann Ylavic\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpd/httpd/trunk@1684513 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "modules/http/http_filters.c||modules/http/http_filters.c"
    ]
  },
  "patch_diff": {
    "modules/http/http_filters.c||modules/http/http_filters.c": [
      "File: modules/http/http_filters.c -> modules/http/http_filters.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "58: APLOG_USE_MODULE(http);",
      "62: typedef struct http_filter_ctx",
      "63: {",
      "64:     apr_off_t remaining;",
      "65:     apr_off_t limit;",
      "66:     apr_off_t limit_used;",
      "67:     apr_int32_t chunk_used;",
      "69:     enum",
      "70:     {",
      "",
      "[Removed Lines]",
      "60: #define INVALID_CHAR -2",
      "68:     apr_int16_t chunkbits;",
      "",
      "[Added Lines]",
      "66:     apr_int32_t chunkbits;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "79:     } state;",
      "80:     unsigned int eos_sent :1;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "91: static apr_status_t parse_chunk_size(http_ctx_t *ctx, const char *buffer,",
      "93: {",
      "94:     apr_size_t i = 0;",
      "",
      "[Removed Lines]",
      "92:         apr_size_t len, int linelimit)",
      "",
      "[Added Lines]",
      "92:                                      apr_size_t len, int linelimit)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "99:         ap_xlate_proto_from_ascii(&c, 1);",
      "103:             if (c == LF) {",
      "104:                 ctx->state = BODY_CHUNK;",
      "105:             }",
      "106:             i++;",
      "107:             continue;",
      "108:         }",
      "",
      "[Removed Lines]",
      "102:         if (ctx->state == BODY_CHUNK_END) {",
      "",
      "[Added Lines]",
      "102:         if (ctx->state == BODY_CHUNK_END",
      "103:                 || ctx->state == BODY_CHUNK_END_LF) {",
      "107:             else if (c == CR && ctx->state == BODY_CHUNK_END) {",
      "108:                 ctx->state = BODY_CHUNK_END_LF;",
      "109:             }",
      "110:             else {",
      "114:                 return APR_EINVAL;",
      "115:             }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "111:         if (ctx->state == BODY_CHUNK) {",
      "112:             if (!apr_isxdigit(c)) {",
      "118:             }",
      "119:             else {",
      "120:                 ctx->state = BODY_CHUNK_PART;",
      "121:             }",
      "122:             ctx->remaining = 0;",
      "124:             ctx->chunk_used = 0;",
      "125:         }",
      "136:             if (ctx->remaining) {",
      "137:                 ctx->state = BODY_CHUNK_DATA;",
      "138:             }",
      "",
      "[Removed Lines]",
      "117:                 return APR_EGENERAL;",
      "123:             ctx->chunkbits = sizeof(long) * 8;",
      "132:         if (c == ';' || c == CR) {",
      "133:             ctx->state = BODY_CHUNK_EXT;",
      "134:         }",
      "135:         else if (c == LF) {",
      "",
      "[Added Lines]",
      "127:                 return APR_EINVAL;",
      "133:             ctx->chunkbits = sizeof(apr_off_t) * 8;",
      "137:         if (c == LF) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "140:                 ctx->state = BODY_CHUNK_TRAILER;",
      "141:             }",
      "142:         }",
      "147:             if (!ctx->remaining && c == '0') {",
      "",
      "[Removed Lines]",
      "143:         else if (ctx->state != BODY_CHUNK_EXT) {",
      "144:             int xvalue = 0;",
      "",
      "[Added Lines]",
      "145:         else if (ctx->state == BODY_CHUNK_LF) {",
      "149:             return APR_EINVAL;",
      "150:         }",
      "151:         else if (c == CR) {",
      "152:             ctx->state = BODY_CHUNK_LF;",
      "153:         }",
      "154:         else if (c == ';') {",
      "155:             ctx->state = BODY_CHUNK_EXT;",
      "156:         }",
      "157:         else if (ctx->state == BODY_CHUNK_EXT) {",
      "161:             if (c != '\\t' && apr_iscntrl(c)) {",
      "162:                 return APR_EINVAL;",
      "163:             }",
      "164:         }",
      "165:         else if (ctx->state == BODY_CHUNK_PART) {",
      "166:             int xvalue;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "149:                 continue;",
      "150:             }",
      "152:             if (c >= '0' && c <= '9') {",
      "153:                 xvalue = c - '0';",
      "154:             }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "174:             ctx->chunkbits -= 4;",
      "175:             if (ctx->chunkbits < 0) {",
      "177:                 return APR_ENOSPC;",
      "178:             }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "160:             }",
      "161:             else {",
      "164:             }",
      "166:             ctx->remaining = (ctx->remaining << 4) | xvalue;",
      "170:                 return APR_ENOSPC;",
      "171:             }",
      "173:         }",
      "175:         i++;",
      "",
      "[Removed Lines]",
      "163:                 return APR_EGENERAL;",
      "167:             ctx->chunkbits -= 4;",
      "168:             if (ctx->chunkbits <= 0 || ctx->remaining < 0) {",
      "",
      "[Added Lines]",
      "191:                 return APR_EINVAL;",
      "195:             if (ctx->remaining < 0) {",
      "199:         }",
      "200:         else {",
      "202:             return APR_EGENERAL;",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "234: apr_status_t ap_http_filter(ap_filter_t *f, apr_bucket_brigade *b,",
      "236: {",
      "237:     core_server_config *conf;",
      "238:     apr_bucket *e;",
      "",
      "[Removed Lines]",
      "235:         ap_input_mode_t mode, apr_read_type_e block, apr_off_t readbytes)",
      "",
      "[Added Lines]",
      "265:                             ap_input_mode_t mode, apr_read_type_e block,",
      "266:                             apr_off_t readbytes)",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "284:                 ap_log_rerror(APLOG_MARK, APLOG_INFO, 0, f->r, APLOGNO(02555)",
      "287:                 tenc = NULL;",
      "288:             }",
      "289:             else {",
      "",
      "[Removed Lines]",
      "285:                               \"Unknown Transfer-Encoding: %s;\"",
      "286:                               \" using read-until-close\", tenc);",
      "",
      "[Added Lines]",
      "316:                               \"Unknown Transfer-Encoding: %s; \"",
      "317:                               \"using read-until-close\", tenc);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "308:                     || endstr == lenp || *endstr || ctx->remaining < 0) {",
      "310:                 ctx->remaining = 0;",
      "316:             }",
      "321:             if (ctx->limit && ctx->limit < ctx->remaining) {",
      "327:                 return APR_ENOSPC;",
      "328:             }",
      "329:         }",
      "",
      "[Removed Lines]",
      "311:                 ap_log_rerror(",
      "312:                         APLOG_MARK, APLOG_INFO, 0, f->r, APLOGNO(01587)",
      "313:                         \"Invalid Content-Length\");",
      "315:                 return APR_ENOSPC;",
      "322:                 ap_log_rerror(",
      "323:                         APLOG_MARK, APLOG_INFO, 0, f->r, APLOGNO(01588)",
      "324:                         \"Requested content-length of %\" APR_OFF_T_FMT",
      "325:                         \" is larger than the configured limit\"",
      "326:                         \" of %\" APR_OFF_T_FMT, ctx->remaining, ctx->limit);",
      "",
      "[Added Lines]",
      "342:                 ap_log_rerror(APLOG_MARK, APLOG_INFO, 0, f->r, APLOGNO(01587)",
      "343:                               \"Invalid Content-Length\");",
      "345:                 return APR_EINVAL;",
      "352:                 ap_log_rerror(APLOG_MARK, APLOG_INFO, 0, f->r, APLOGNO(01588)",
      "353:                           \"Requested content-length of %\" APR_OFF_T_FMT",
      "354:                           \" is larger than the configured limit\"",
      "355:                           \" of %\" APR_OFF_T_FMT, ctx->remaining, ctx->limit);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "378:                 APR_BRIGADE_INSERT_TAIL(bb, e);",
      "380:                 rv = ap_pass_brigade(f->c->output_filters, bb);",
      "381:                 if (rv != APR_SUCCESS) {",
      "382:                     return AP_FILTER_ERROR;",
      "383:                 }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "410:                 apr_brigade_cleanup(bb);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "401:         case BODY_CHUNK:",
      "402:         case BODY_CHUNK_PART:",
      "403:         case BODY_CHUNK_EXT:",
      "406:             rv = ap_get_brigade(f->next, b, AP_MODE_GETLINE, block, 0);",
      "",
      "[Removed Lines]",
      "404:         case BODY_CHUNK_END: {",
      "",
      "[Added Lines]",
      "434:         case BODY_CHUNK_LF:",
      "435:         case BODY_CHUNK_END:",
      "436:         case BODY_CHUNK_END_LF: {",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "433:                                 f->r->server->limit_req_fieldsize);",
      "434:                     }",
      "435:                     if (rv != APR_SUCCESS) {",
      "438:                         return rv;",
      "439:                     }",
      "440:                 }",
      "",
      "[Removed Lines]",
      "436:                         ap_log_rerror(",
      "437:                                 APLOG_MARK, APLOG_INFO, rv, f->r, APLOGNO(01590) \"Error reading chunk %s \", (APR_ENOSPC == rv) ? \"(overflow)\" : \"\");",
      "",
      "[Added Lines]",
      "468:                         ap_log_rerror(APLOG_MARK, APLOG_INFO, rv, f->r, APLOGNO(01590)",
      "469:                                       \"Error reading chunk %s \",",
      "470:                                       (APR_ENOSPC == rv) ? \"(overflow)\" : \"\");",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "447:             if (ctx->state == BODY_CHUNK_TRAILER) {",
      "452:             }",
      "454:             break;",
      "",
      "[Removed Lines]",
      "449:                 int merge_trailers =",
      "450:                     conf->merge_trailers == AP_MERGE_TRAILERS_ENABLE;",
      "451:                 return read_chunked_trailers(ctx, f, b, merge_trailers);",
      "",
      "[Added Lines]",
      "482:                 return read_chunked_trailers(ctx, f, b,",
      "483:                             conf->merge_trailers == AP_MERGE_TRAILERS_ENABLE);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "523:                 ctx->limit_used += totalread;",
      "524:                 if (ctx->limit < ctx->limit_used) {",
      "528:                     return APR_ENOSPC;",
      "529:                 }",
      "530:             }",
      "",
      "[Removed Lines]",
      "525:                     ap_log_rerror(",
      "526:                             APLOG_MARK, APLOG_INFO, 0, f->r, APLOGNO(01591) \"Read content-length of %\" APR_OFF_T_FMT \" is larger than the configured limit\"",
      "527:                             \" of %\" APR_OFF_T_FMT, ctx->limit_used, ctx->limit);",
      "",
      "[Added Lines]",
      "557:                     ap_log_rerror(APLOG_MARK, APLOG_INFO, 0, f->r, APLOGNO(01591)",
      "558:                                   \"Read content-length of %\" APR_OFF_T_FMT",
      "559:                                   \" is larger than the configured limit\"",
      "560:                                   \" of %\" APR_OFF_T_FMT, ctx->limit_used, ctx->limit);",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "549:             break;",
      "550:         }",
      "551:         default: {",
      "553:         }",
      "554:         }",
      "",
      "[Removed Lines]",
      "552:             break;",
      "",
      "[Added Lines]",
      "586:             ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, f->r, APLOGNO(02901)",
      "587:                           \"Unexpected body state (%i)\", (int)ctx->state);",
      "588:             return APR_EGENERAL;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a6027e56924bb6227c1fdbf6f91e7e2438338be6",
      "candidate_info": {
        "commit_hash": "a6027e56924bb6227c1fdbf6f91e7e2438338be6",
        "repo": "apache/httpd",
        "commit_url": "https://github.com/apache/httpd/commit/a6027e56924bb6227c1fdbf6f91e7e2438338be6",
        "files": [
          "CHANGES",
          "docs/log-message-tags/next-number",
          "modules/http/http_filters.c"
        ],
        "message": "Limit accepted chunk-size to 2^63-1 and be strict about chunk-ext authorized characters.\n\nSubmitted by: Yann Ylavic\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpd/httpd/trunk@1684513 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "modules/http/http_filters.c||modules/http/http_filters.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "modules/http/http_filters.c||modules/http/http_filters.c"
          ],
          "candidate": [
            "modules/http/http_filters.c||modules/http/http_filters.c"
          ]
        }
      },
      "candidate_diff": {
        "modules/http/http_filters.c||modules/http/http_filters.c": [
          "File: modules/http/http_filters.c -> modules/http/http_filters.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: APLOG_USE_MODULE(http);",
          "62: typedef struct http_filter_ctx",
          "63: {",
          "64:     apr_off_t remaining;",
          "65:     apr_off_t limit;",
          "66:     apr_off_t limit_used;",
          "67:     apr_int32_t chunk_used;",
          "69:     enum",
          "70:     {",
          "",
          "[Removed Lines]",
          "60: #define INVALID_CHAR -2",
          "68:     apr_int16_t chunkbits;",
          "",
          "[Added Lines]",
          "66:     apr_int32_t chunkbits;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91: static apr_status_t parse_chunk_size(http_ctx_t *ctx, const char *buffer,",
          "93: {",
          "94:     apr_size_t i = 0;",
          "",
          "[Removed Lines]",
          "92:         apr_size_t len, int linelimit)",
          "",
          "[Added Lines]",
          "92:                                      apr_size_t len, int linelimit)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "99:         ap_xlate_proto_from_ascii(&c, 1);",
          "103:             if (c == LF) {",
          "104:                 ctx->state = BODY_CHUNK;",
          "105:             }",
          "106:             i++;",
          "107:             continue;",
          "108:         }",
          "",
          "[Removed Lines]",
          "102:         if (ctx->state == BODY_CHUNK_END) {",
          "",
          "[Added Lines]",
          "102:         if (ctx->state == BODY_CHUNK_END",
          "103:                 || ctx->state == BODY_CHUNK_END_LF) {",
          "107:             else if (c == CR && ctx->state == BODY_CHUNK_END) {",
          "108:                 ctx->state = BODY_CHUNK_END_LF;",
          "109:             }",
          "110:             else {",
          "114:                 return APR_EINVAL;",
          "115:             }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "111:         if (ctx->state == BODY_CHUNK) {",
          "112:             if (!apr_isxdigit(c)) {",
          "118:             }",
          "119:             else {",
          "120:                 ctx->state = BODY_CHUNK_PART;",
          "121:             }",
          "122:             ctx->remaining = 0;",
          "124:             ctx->chunk_used = 0;",
          "125:         }",
          "136:             if (ctx->remaining) {",
          "137:                 ctx->state = BODY_CHUNK_DATA;",
          "138:             }",
          "",
          "[Removed Lines]",
          "117:                 return APR_EGENERAL;",
          "123:             ctx->chunkbits = sizeof(long) * 8;",
          "132:         if (c == ';' || c == CR) {",
          "133:             ctx->state = BODY_CHUNK_EXT;",
          "134:         }",
          "135:         else if (c == LF) {",
          "",
          "[Added Lines]",
          "127:                 return APR_EINVAL;",
          "133:             ctx->chunkbits = sizeof(apr_off_t) * 8;",
          "137:         if (c == LF) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "140:                 ctx->state = BODY_CHUNK_TRAILER;",
          "141:             }",
          "142:         }",
          "147:             if (!ctx->remaining && c == '0') {",
          "",
          "[Removed Lines]",
          "143:         else if (ctx->state != BODY_CHUNK_EXT) {",
          "144:             int xvalue = 0;",
          "",
          "[Added Lines]",
          "145:         else if (ctx->state == BODY_CHUNK_LF) {",
          "149:             return APR_EINVAL;",
          "150:         }",
          "151:         else if (c == CR) {",
          "152:             ctx->state = BODY_CHUNK_LF;",
          "153:         }",
          "154:         else if (c == ';') {",
          "155:             ctx->state = BODY_CHUNK_EXT;",
          "156:         }",
          "157:         else if (ctx->state == BODY_CHUNK_EXT) {",
          "161:             if (c != '\\t' && apr_iscntrl(c)) {",
          "162:                 return APR_EINVAL;",
          "163:             }",
          "164:         }",
          "165:         else if (ctx->state == BODY_CHUNK_PART) {",
          "166:             int xvalue;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "149:                 continue;",
          "150:             }",
          "152:             if (c >= '0' && c <= '9') {",
          "153:                 xvalue = c - '0';",
          "154:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "174:             ctx->chunkbits -= 4;",
          "175:             if (ctx->chunkbits < 0) {",
          "177:                 return APR_ENOSPC;",
          "178:             }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "160:             }",
          "161:             else {",
          "164:             }",
          "166:             ctx->remaining = (ctx->remaining << 4) | xvalue;",
          "170:                 return APR_ENOSPC;",
          "171:             }",
          "173:         }",
          "175:         i++;",
          "",
          "[Removed Lines]",
          "163:                 return APR_EGENERAL;",
          "167:             ctx->chunkbits -= 4;",
          "168:             if (ctx->chunkbits <= 0 || ctx->remaining < 0) {",
          "",
          "[Added Lines]",
          "191:                 return APR_EINVAL;",
          "195:             if (ctx->remaining < 0) {",
          "199:         }",
          "200:         else {",
          "202:             return APR_EGENERAL;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "234: apr_status_t ap_http_filter(ap_filter_t *f, apr_bucket_brigade *b,",
          "236: {",
          "237:     core_server_config *conf;",
          "238:     apr_bucket *e;",
          "",
          "[Removed Lines]",
          "235:         ap_input_mode_t mode, apr_read_type_e block, apr_off_t readbytes)",
          "",
          "[Added Lines]",
          "265:                             ap_input_mode_t mode, apr_read_type_e block,",
          "266:                             apr_off_t readbytes)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "284:                 ap_log_rerror(APLOG_MARK, APLOG_INFO, 0, f->r, APLOGNO(02555)",
          "287:                 tenc = NULL;",
          "288:             }",
          "289:             else {",
          "",
          "[Removed Lines]",
          "285:                               \"Unknown Transfer-Encoding: %s;\"",
          "286:                               \" using read-until-close\", tenc);",
          "",
          "[Added Lines]",
          "316:                               \"Unknown Transfer-Encoding: %s; \"",
          "317:                               \"using read-until-close\", tenc);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "308:                     || endstr == lenp || *endstr || ctx->remaining < 0) {",
          "310:                 ctx->remaining = 0;",
          "316:             }",
          "321:             if (ctx->limit && ctx->limit < ctx->remaining) {",
          "327:                 return APR_ENOSPC;",
          "328:             }",
          "329:         }",
          "",
          "[Removed Lines]",
          "311:                 ap_log_rerror(",
          "312:                         APLOG_MARK, APLOG_INFO, 0, f->r, APLOGNO(01587)",
          "313:                         \"Invalid Content-Length\");",
          "315:                 return APR_ENOSPC;",
          "322:                 ap_log_rerror(",
          "323:                         APLOG_MARK, APLOG_INFO, 0, f->r, APLOGNO(01588)",
          "324:                         \"Requested content-length of %\" APR_OFF_T_FMT",
          "325:                         \" is larger than the configured limit\"",
          "326:                         \" of %\" APR_OFF_T_FMT, ctx->remaining, ctx->limit);",
          "",
          "[Added Lines]",
          "342:                 ap_log_rerror(APLOG_MARK, APLOG_INFO, 0, f->r, APLOGNO(01587)",
          "343:                               \"Invalid Content-Length\");",
          "345:                 return APR_EINVAL;",
          "352:                 ap_log_rerror(APLOG_MARK, APLOG_INFO, 0, f->r, APLOGNO(01588)",
          "353:                           \"Requested content-length of %\" APR_OFF_T_FMT",
          "354:                           \" is larger than the configured limit\"",
          "355:                           \" of %\" APR_OFF_T_FMT, ctx->remaining, ctx->limit);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "378:                 APR_BRIGADE_INSERT_TAIL(bb, e);",
          "380:                 rv = ap_pass_brigade(f->c->output_filters, bb);",
          "381:                 if (rv != APR_SUCCESS) {",
          "382:                     return AP_FILTER_ERROR;",
          "383:                 }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "410:                 apr_brigade_cleanup(bb);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "401:         case BODY_CHUNK:",
          "402:         case BODY_CHUNK_PART:",
          "403:         case BODY_CHUNK_EXT:",
          "406:             rv = ap_get_brigade(f->next, b, AP_MODE_GETLINE, block, 0);",
          "",
          "[Removed Lines]",
          "404:         case BODY_CHUNK_END: {",
          "",
          "[Added Lines]",
          "434:         case BODY_CHUNK_LF:",
          "435:         case BODY_CHUNK_END:",
          "436:         case BODY_CHUNK_END_LF: {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "433:                                 f->r->server->limit_req_fieldsize);",
          "434:                     }",
          "435:                     if (rv != APR_SUCCESS) {",
          "438:                         return rv;",
          "439:                     }",
          "440:                 }",
          "",
          "[Removed Lines]",
          "436:                         ap_log_rerror(",
          "437:                                 APLOG_MARK, APLOG_INFO, rv, f->r, APLOGNO(01590) \"Error reading chunk %s \", (APR_ENOSPC == rv) ? \"(overflow)\" : \"\");",
          "",
          "[Added Lines]",
          "468:                         ap_log_rerror(APLOG_MARK, APLOG_INFO, rv, f->r, APLOGNO(01590)",
          "469:                                       \"Error reading chunk %s \",",
          "470:                                       (APR_ENOSPC == rv) ? \"(overflow)\" : \"\");",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "447:             if (ctx->state == BODY_CHUNK_TRAILER) {",
          "452:             }",
          "454:             break;",
          "",
          "[Removed Lines]",
          "449:                 int merge_trailers =",
          "450:                     conf->merge_trailers == AP_MERGE_TRAILERS_ENABLE;",
          "451:                 return read_chunked_trailers(ctx, f, b, merge_trailers);",
          "",
          "[Added Lines]",
          "482:                 return read_chunked_trailers(ctx, f, b,",
          "483:                             conf->merge_trailers == AP_MERGE_TRAILERS_ENABLE);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "523:                 ctx->limit_used += totalread;",
          "524:                 if (ctx->limit < ctx->limit_used) {",
          "528:                     return APR_ENOSPC;",
          "529:                 }",
          "530:             }",
          "",
          "[Removed Lines]",
          "525:                     ap_log_rerror(",
          "526:                             APLOG_MARK, APLOG_INFO, 0, f->r, APLOGNO(01591) \"Read content-length of %\" APR_OFF_T_FMT \" is larger than the configured limit\"",
          "527:                             \" of %\" APR_OFF_T_FMT, ctx->limit_used, ctx->limit);",
          "",
          "[Added Lines]",
          "557:                     ap_log_rerror(APLOG_MARK, APLOG_INFO, 0, f->r, APLOGNO(01591)",
          "558:                                   \"Read content-length of %\" APR_OFF_T_FMT",
          "559:                                   \" is larger than the configured limit\"",
          "560:                                   \" of %\" APR_OFF_T_FMT, ctx->limit_used, ctx->limit);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "549:             break;",
          "550:         }",
          "551:         default: {",
          "553:         }",
          "554:         }",
          "",
          "[Removed Lines]",
          "552:             break;",
          "",
          "[Added Lines]",
          "586:             ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, f->r, APLOGNO(02901)",
          "587:                           \"Unexpected body state (%i)\", (int)ctx->state);",
          "588:             return APR_EGENERAL;",
          "",
          "---------------"
        ]
      }
    }
  ]
}