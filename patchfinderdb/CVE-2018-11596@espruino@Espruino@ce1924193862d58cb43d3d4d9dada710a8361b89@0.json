{
  "cve_id": "CVE-2018-11596",
  "cve_desc": "Espruino before 1.99 allows attackers to cause a denial of service (application crash) with a user crafted input file via a Buffer Overflow during syntax parsing because a check for '\\0' is made for the wrong array element in jsvar.c.",
  "repo": "espruino/Espruino",
  "patch_hash": "ce1924193862d58cb43d3d4d9dada710a8361b89",
  "patch_info": {
    "commit_hash": "ce1924193862d58cb43d3d4d9dada710a8361b89",
    "repo": "espruino/Espruino",
    "commit_url": "https://github.com/espruino/Espruino/commit/ce1924193862d58cb43d3d4d9dada710a8361b89",
    "files": [
      "src/jsvar.c"
    ],
    "message": "fix jsvGetString regression",
    "before_after_code_files": [
      "src/jsvar.c||src/jsvar.c"
    ]
  },
  "patch_diff": {
    "src/jsvar.c||src/jsvar.c": [
      "File: src/jsvar.c -> src/jsvar.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1191:     len--;",
      "1192:     int l = 0;",
      "1194:       str[l] = s[l];",
      "1195:       l++;",
      "1196:     }",
      "",
      "[Removed Lines]",
      "1193:     while (*s && l<len) {",
      "",
      "[Added Lines]",
      "1193:     while (s[l] && l<len) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0a7619875bf79877907205f6bee08465b89ff10b",
      "candidate_info": {
        "commit_hash": "0a7619875bf79877907205f6bee08465b89ff10b",
        "repo": "espruino/Espruino",
        "commit_url": "https://github.com/espruino/Espruino/commit/0a7619875bf79877907205f6bee08465b89ff10b",
        "files": [
          "ChangeLog",
          "src/jslex.c",
          "src/jspin.c",
          "src/jsutils.c",
          "src/jsvar.c"
        ],
        "message": "Fix strncat/cpy bounding issues (fix #1425)",
        "before_after_code_files": [
          "src/jslex.c||src/jslex.c",
          "src/jspin.c||src/jspin.c",
          "src/jsutils.c||src/jsutils.c",
          "src/jsvar.c||src/jsvar.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsvar.c||src/jsvar.c"
          ],
          "candidate": [
            "src/jsvar.c||src/jsvar.c"
          ]
        }
      },
      "candidate_diff": {
        "src/jslex.c||src/jslex.c": [
          "File: src/jslex.c -> src/jslex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "814:   }",
          "816:   assert(len>=10);",
          "820: }",
          "822: void jslGetTokenString(char *str, size_t len) {",
          "823:   if (lex->tk == LEX_ID) {",
          "826:   } else if (lex->tk == LEX_STR) {",
          "830:   } else",
          "831:     jslTokenAsString(lex->tk, str, len);",
          "832: }",
          "",
          "[Removed Lines]",
          "817:   strncpy(str, \"?[\",len);",
          "818:   itostr(token, &str[2], 10);",
          "819:   strncat(str, \"]\",len);",
          "824:     strncpy(str, \"ID:\", len);",
          "825:     strncat(str, jslGetTokenValueAsString(), len);",
          "827:     strncpy(str, \"String:'\", len);",
          "828:     strncat(str, jslGetTokenValueAsString(), len);",
          "829:     strncat(str, \"'\", len);",
          "",
          "[Added Lines]",
          "817:   espruino_snprintf(str, len, \"?[%d]\", token);",
          "822:     espruino_snprintf(str, len, \"ID:%s\", jslGetTokenValueAsString());",
          "824:     espruino_snprintf(str, len, \"String:'%s'\", jslGetTokenValueAsString());",
          "",
          "---------------"
        ],
        "src/jspin.c||src/jspin.c": [
          "File: src/jspin.c -> src/jspin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "179: #endif",
          "180: #endif",
          "181:     } else {",
          "183:     }",
          "184:   }",
          "",
          "[Removed Lines]",
          "182:       strncpy(result, \"undefined\", 10);",
          "",
          "[Added Lines]",
          "182:       strcpy(result, \"undefined\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "379:     jsiConsolePrintf(\"Couldn't convert pin function %d\\n\", pinFunc);",
          "380:     return;",
          "381:   }",
          "383:   if (flags & JSPFTS_DEVICE_NUMBER) itostr(devIdx, &buf[strlen(buf)], 10);",
          "386: }",
          "",
          "[Removed Lines]",
          "382:   if (flags & JSPFTS_DEVICE) strncat(buf, devStr, bufSize);",
          "384:   if (flags & JSPFTS_SPACE) strncat(buf, \" \", bufSize);",
          "385:   if (infoStr && (flags & JSPFTS_TYPE)) strncat(buf, infoStr, bufSize);",
          "",
          "[Added Lines]",
          "382:   if (flags & JSPFTS_DEVICE) strncat(buf, devStr, bufSize-1);",
          "384:   if (flags & JSPFTS_SPACE) strncat(buf, \" \", bufSize-(strlen(buf)+1));",
          "385:   if (infoStr && (flags & JSPFTS_TYPE)) strncat(buf, infoStr, bufSize-(strlen(buf)+1));",
          "",
          "---------------"
        ],
        "src/jsutils.c||src/jsutils.c": [
          "File: src/jsutils.c -> src/jsutils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "604: }",
          "606: void ftoa_bounded_extra(JsVarFloat val,char *str, size_t len, int radix, int fractionalDigits) {",
          "607:   const JsVarFloat stopAtError = 0.0000001;",
          "609:   else if (!isfinite(val)) {",
          "612:   } else {",
          "613:     if (val<0) {",
          "614:       if (--len <= 0) { *str=0; return; } // bounds check",
          "",
          "[Removed Lines]",
          "608:   if (isnan(val)) strncpy(str,\"NaN\",len);",
          "610:     if (val<0) strncpy(str,\"-Infinity\",len);",
          "611:     else strncpy(str,\"Infinity\",len);",
          "",
          "[Added Lines]",
          "607:   assert(len>9); // in case if strcpy",
          "609:   if (isnan(val)) strcpy(str,\"NaN\");",
          "611:     if (val<0) strcpy(str,\"-Infinity\");",
          "612:     else strcpy(str,\"Infinity\");",
          "",
          "---------------"
        ],
        "src/jsvar.c||src/jsvar.c": [
          "File: src/jsvar.c -> src/jsvar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1186:   const char *s = jsvGetConstString(v);",
          "1187:   if (s) {",
          "1188:     strncpy(str, s, len);",
          "1189:     return strlen(s);",
          "1190:   } else if (jsvIsInt(v)) {",
          "1191:     itostr(v->varData.integer, str, 10);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1189:     str[len-1] = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1218:       jsvUnLock(stringVar);",
          "1219:       return l;",
          "1220:     } else {",
          "1222:       jsExceptionHere(JSET_INTERNALERROR, \"Variable type cannot be converted to string\");",
          "1223:       return 0;",
          "1224:     }",
          "",
          "[Removed Lines]",
          "1221:       strncpy(str, \"\", len);",
          "",
          "[Added Lines]",
          "1222:       str[0] = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e6a19a7d77a6e1374a7adb4e56a6563a2222a332",
      "candidate_info": {
        "commit_hash": "e6a19a7d77a6e1374a7adb4e56a6563a2222a332",
        "repo": "espruino/Espruino",
        "commit_url": "https://github.com/espruino/Espruino/commit/e6a19a7d77a6e1374a7adb4e56a6563a2222a332",
        "files": [
          "src/jsvar.c"
        ],
        "message": "remove strncpy - turns out it'll have been padding out whole buffers with 0",
        "before_after_code_files": [
          "src/jsvar.c||src/jsvar.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsvar.c||src/jsvar.c"
          ],
          "candidate": [
            "src/jsvar.c||src/jsvar.c"
          ]
        }
      },
      "candidate_diff": {
        "src/jsvar.c||src/jsvar.c": [
          "File: src/jsvar.c -> src/jsvar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1185: size_t jsvGetString(const JsVar *v, char *str, size_t len) {",
          "1186:   const char *s = jsvGetConstString(v);",
          "1187:   if (s) {",
          "1191:   } else if (jsvIsInt(v)) {",
          "1192:     itostr(v->varData.integer, str, 10);",
          "1193:     return strlen(str);",
          "",
          "[Removed Lines]",
          "1188:     strncpy(str, s, len);",
          "1189:     str[len-1] = 0;",
          "1190:     return strlen(s);",
          "",
          "[Added Lines]",
          "1186:   assert(len>0);",
          "1191:     len--;",
          "1192:     int l = 0;",
          "1193:     while (*s && l<len) {",
          "1194:       str[l] = s[l];",
          "1195:       l++;",
          "1196:     }",
          "1197:     str[l] = 0;",
          "1198:     return l;",
          "",
          "---------------"
        ]
      }
    }
  ]
}