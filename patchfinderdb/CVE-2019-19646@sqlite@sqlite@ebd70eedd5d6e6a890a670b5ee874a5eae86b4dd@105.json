{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7ba03ea15aa0adee1cce6eb4ffe4df8046cb3271",
      "candidate_info": {
        "commit_hash": "7ba03ea15aa0adee1cce6eb4ffe4df8046cb3271",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7ba03ea15aa0adee1cce6eb4ffe4df8046cb3271",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/printf.c"
        ],
        "message": "Slight adjustment to the printf formatter large memory allocation detector so that it does not overestimate the amount of space needed for oversize %d conversions.\n\nFossilOrigin-Name: 1aee70d6de8a9b17ebb74a7cb1dad65139cde1b615dcce4d15d3a476fda8676b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/printf.c||src/printf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 179e5d46054e5c86f53a79b7a0823d9a383da8391ad1d3c3b22645927a1e052b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/printf.c||src/printf.c": [
          "File: src/printf.c -> src/printf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "442:           nOut = etBUFSIZE;",
          "443:           zOut = buf;",
          "444:         }else{",
          "446:           zOut = zExtra = printfTempBuf(pAccum, n);",
          "447:           if( zOut==0 ) return;",
          "448:           nOut = (int)n;",
          "",
          "[Removed Lines]",
          "445:           u64 n = (u64)precision + 10 + precision/3;",
          "",
          "[Added Lines]",
          "445:           u64 n;",
          "446:           n = (u64)precision + 10;",
          "447:           if( cThousand ) n += precision/3;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ef2df8f3435edb6ad260ab6ebbf0f151bf0a2a48",
      "candidate_info": {
        "commit_hash": "ef2df8f3435edb6ad260ab6ebbf0f151bf0a2a48",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ef2df8f3435edb6ad260ab6ebbf0f151bf0a2a48",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5misc.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "In fts5, fix a case of overreading a buffer by 1 byte when counting characters in malformed utf-8. Fix for [dd1f67bf].\n\nFossilOrigin-Name: 8d964e1c21d4cea699023e02b0616a75c5859dd083c9365cdcbc0676ebbdaae4",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5318:   for(i=0; i<nChar; i++){",
          "5320:     if( (unsigned char)p[n++]>=0xc0 ){",
          "5321:       while( (p[n] & 0xc0)==0x80 ){",
          "5322:         n++;",
          "5323:         if( n>=nByte ) break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5321:       if( n>=nByte ) break;",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test": [
          "File: ext/fts5/test/fts5misc.test -> ext/fts5/test/fts5misc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "218:   SELECT rowid FROM t1 WHERE rowid=2 AND t1 = 'hello';",
          "219: }",
          "222: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221: #-------------------------------------------------------------------------",
          "222: #",
          "223: reset_db",
          "224: do_execsql_test 8.0 {",
          "225:   CREATE VIRTUAL TABLE vt0 USING fts5(c0, tokenize = \"ascii\", prefix = 1);",
          "226:   INSERT INTO vt0(c0) VALUES (x'd1');",
          "227: }",
          "229: breakpoint",
          "230: do_execsql_test 8.1 {",
          "231:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "232: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 521f1d36282549488a47a434484a24924ee970d29f05a8ae499b7d536bcd692b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ac801803a55cf88994af154a6499561de8d31fcc",
      "candidate_info": {
        "commit_hash": "ac801803a55cf88994af154a6499561de8d31fcc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ac801803a55cf88994af154a6499561de8d31fcc",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Fix an assert that can fail if the schema is corrupt.\n\nFossilOrigin-Name: ed57c48e4bb337810521bda2da79614313e4835a317ca4eadb52bd67e4eadf98",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1e449687881f4d388e54a0e51bcabba41ab10cf7e596ff65e31e88a23c70d497",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4370:   assert( wrFlag==0 || !hasReadConflicts(p, iTable) );",
          "",
          "[Removed Lines]",
          "4369:   assert( hasSharedCacheTableLock(p, iTable, pKeyInfo!=0, (wrFlag?2:1)) );",
          "",
          "[Added Lines]",
          "4369:   assert( hasSharedCacheTableLock(p, iTable, pKeyInfo!=0, (wrFlag?2:1))",
          "4370:           || iTable<1 );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "71f059c88067736471c631cba95211c1bd100392",
      "candidate_info": {
        "commit_hash": "71f059c88067736471c631cba95211c1bd100392",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/71f059c88067736471c631cba95211c1bd100392",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/altertab3.test"
        ],
        "message": "Fix a problem in ALTER TABLE triggered by views or triggers that include the construction \"ORDER BY true\" or \"ORDER BY false\".\n\nFossilOrigin-Name: 8168021f9ab5fb8b4888257963c9ec68fd1dfeedaf6bba4b8e07438001d0be0f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 559c2dd6724b2fc238760863d4be7132b591457e72ca5758fdd4002fbf7df4bc",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1278:   ExprList *pEList;",
          "1279:   struct ExprList_item *pItem;",
          "1282:   if( pOrderBy->nExpr>db->aLimit[SQLITE_LIMIT_COLUMN] ){",
          "1283:     sqlite3ErrorMsg(pParse, \"too many terms in %s BY clause\", zType);",
          "1284:     return 1;",
          "",
          "[Removed Lines]",
          "1281:   if( pOrderBy==0 || pParse->db->mallocFailed ) return 0;",
          "",
          "[Added Lines]",
          "1281:   if( pOrderBy==0 || pParse->db->mallocFailed || IN_RENAME_OBJECT ) return 0;",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "345:   ALTER TABLE t1 RENAME TO t1x;",
          "346: } {1 {error in trigger AFTER: no such column: a}}",
          "348: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "348: #-------------------------------------------------------------------------",
          "349: reset_db",
          "351: do_execsql_test 16.1 {",
          "352:   CREATE TABLE t1(x);",
          "353:   CREATE TRIGGER AFTER INSERT ON t1 BEGIN",
          "354:     SELECT (WITH t2 AS (WITH t3 AS (SELECT true)",
          "355:           SELECT * FROM t3 ORDER BY true COLLATE nocase)",
          "356:         SELECT 11);",
          "358:     WITH t4 AS (SELECT * FROM t1) SELECT 33;",
          "359:   END;",
          "360: }",
          "362: do_execsql_test 16.2 {",
          "363:   ALTER TABLE t1 RENAME TO t1x;",
          "364: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6cf3009f6c92f91ecdf6de8a969e6febc0df09bc",
      "candidate_info": {
        "commit_hash": "6cf3009f6c92f91ecdf6de8a969e6febc0df09bc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6cf3009f6c92f91ecdf6de8a969e6febc0df09bc",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/skipscan1.test",
          "test/where.test"
        ],
        "message": "Add further tests so that veryquick.test covers all vdbe branches.\n\nFossilOrigin-Name: cbc67de5a3937fa65811ed7c13e870699c895660dc2132cf9d3cf5d83364e344",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/skipscan1.test||test/skipscan1.test",
          "test/where.test||test/where.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 08b29672c552e5a6a3874746c6cc7025295e0e44dec43a1bfba3022acce849ff",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/skipscan1.test||test/skipscan1.test": [
          "File: test/skipscan1.test -> test/skipscan1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "345: } {/{SCAN TABLE t9a}/}",
          "346: optimization_control db skip-scan 1",
          "348: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "348: do_execsql_test skipscan1-2.1 {",
          "349:   CREATE TABLE t6(a TEXT, b INT, c INT, d INT);",
          "350:   CREATE INDEX t6abc ON t6(a,b,c);",
          "351:   INSERT INTO t6 VALUES('abc',123,4,5);",
          "353:   ANALYZE;",
          "354:   DELETE FROM sqlite_stat1;",
          "355:   INSERT INTO sqlite_stat1 VALUES('t6','t6abc','10000 5000 2000 10');",
          "356:   ANALYZE sqlite_master;",
          "357:   DELETE FROM t6;",
          "358: } {}",
          "360: do_execsql_test skipscan1-2.2eqp {",
          "361:   EXPLAIN QUERY PLAN",
          "362:   SELECT a,b,c,d,'|' FROM t6 WHERE d<>99 AND b=345 ORDER BY a;",
          "363: } {/* USING INDEX t6abc (ANY(a) AND b=?)*/}",
          "364: do_execsql_test skipscan1-2.2 {",
          "365:   SELECT a,b,c,d,'|' FROM t6 WHERE d<>99 AND b=345 ORDER BY a;",
          "366: } {}",
          "368: do_execsql_test skipscan1-2.3eqp {",
          "369:   EXPLAIN QUERY PLAN",
          "370:   SELECT a,b,c,d,'|' FROM t6 WHERE d<>99 AND b=345 ORDER BY a DESC;",
          "371: } {/* USING INDEX t6abc (ANY(a) AND b=?)*/}",
          "372: do_execsql_test skipscan1-2.3 {",
          "373:   SELECT a,b,c,d,'|' FROM t6 WHERE d<>99 AND b=345 ORDER BY a DESC;",
          "374: } {}",
          "",
          "---------------"
        ],
        "test/where.test||test/where.test": [
          "File: test/where.test -> test/where.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1438:   SELECT * FROM t1, t2 WHERE a=y AND y=3;",
          "1439: } {3 2 3}",
          "1441: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1441: #-------------------------------------------------------------------------",
          "1442: #",
          "1443: reset_db",
          "1444: do_execsql_test where-24.0 {",
          "1445:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b);",
          "1446:   INSERT INTO t1 VALUES(1, 'one');",
          "1447:   INSERT INTO t1 VALUES(2, 'two');",
          "1448:   INSERT INTO t1 VALUES(3, 'three');",
          "1449:   INSERT INTO t1 VALUES(4, 'four');",
          "1450: }",
          "1452: foreach {tn sql res} {",
          "1453:   1 \"SELECT b FROM t1\"                   {one two three four}",
          "1454:   2 \"SELECT b FROM t1 WHERE a<4\"         {one two three}",
          "1455:   3 \"SELECT b FROM t1 WHERE a>1\"         {two three four}",
          "1456:   4 \"SELECT b FROM t1 WHERE a>1 AND a<4\" {two three}",
          "1458:   5 \"SELECT b FROM t1 WHERE a>? AND a<4\" {}",
          "1459:   6 \"SELECT b FROM t1 WHERE a>1 AND a<?\" {}",
          "1460:   7 \"SELECT b FROM t1 WHERE a>? AND a<?\" {}",
          "1462:   7 \"SELECT b FROM t1 WHERE a>=? AND a<=4\" {}",
          "1463:   8 \"SELECT b FROM t1 WHERE a>=1 AND a<=?\" {}",
          "1464:   9 \"SELECT b FROM t1 WHERE a>=? AND a<=?\" {}",
          "1465: } {",
          "1466:   set rev [list]",
          "1467:   foreach r $res { set rev [concat $r $rev] }",
          "1469:   do_execsql_test where-24.$tn.1 \"$sql\"                     $res",
          "1470:   do_execsql_test where-24.$tn.2 \"$sql ORDER BY rowid\"      $res",
          "1471:   do_execsql_test where-24.$tn.3 \"$sql ORDER BY rowid DESC\" $rev",
          "1473:   do_execsql_test where-24-$tn.4 \"",
          "1474:     BEGIN;",
          "1475:       DELETE FROM t1;",
          "1476:       $sql;",
          "1477:       $sql ORDER BY rowid;",
          "1478:       $sql ORDER BY rowid DESC;",
          "1479:     ROLLBACK;",
          "1480:   \"",
          "1481: }",
          "1483: #-------------------------------------------------------------------------",
          "1484: #",
          "1485: reset_db",
          "1486: do_execsql_test where-25.0 {",
          "1487:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b, c);",
          "1488:   CREATE UNIQUE INDEX i1 ON t1(c);",
          "1489:   INSERT INTO t1 VALUES(1, 'one', 'i');",
          "1490:   INSERT INTO t1 VALUES(2, 'two', 'ii');",
          "1492:   CREATE TABLE t2(a INTEGER PRIMARY KEY, b, c);",
          "1493:   CREATE UNIQUE INDEX i2 ON t2(c);",
          "1494:   INSERT INTO t2 VALUES(1, 'one', 'i');",
          "1495:   INSERT INTO t2 VALUES(2, 'two', 'ii');",
          "1496:   INSERT INTO t2 VALUES(3, 'three', 'iii');",
          "1498:   PRAGMA writable_schema = 1;",
          "1499:   UPDATE sqlite_master SET rootpage = (",
          "1500:     SELECT rootpage FROM sqlite_master WHERE name = 'i2'",
          "1501:   ) WHERE name = 'i1';",
          "1502: }",
          "1503: db close",
          "1504: sqlite3 db test.db",
          "1505: do_catchsql_test where-25.1 {",
          "1506:   DELETE FROM t1 WHERE c='iii'",
          "1507: } {1 {database disk image is malformed}}",
          "1508: do_catchsql_test where-25.2 {",
          "1509:   INSERT INTO t1 VALUES(4, 'four', 'iii')",
          "1510:     ON CONFLICT(c) DO UPDATE SET b=NULL",
          "1511: } {1 {database disk image is malformed}}",
          "1513: reset_db",
          "1514: do_execsql_test where-25.3 {",
          "1515:   CREATE TABLE t1(a PRIMARY KEY, b, c) WITHOUT ROWID;",
          "1516:   CREATE UNIQUE INDEX i1 ON t1(c);",
          "1517:   INSERT INTO t1 VALUES(1, 'one', 'i');",
          "1518:   INSERT INTO t1 VALUES(2, 'two', 'ii');",
          "1520:   CREATE TABLE t2(a INTEGER PRIMARY KEY, b, c);",
          "1521:   CREATE UNIQUE INDEX i2 ON t2(c);",
          "1522:   INSERT INTO t2 VALUES(1, 'one', 'i');",
          "1523:   INSERT INTO t2 VALUES(2, 'two', 'ii');",
          "1524:   INSERT INTO t2 VALUES(3, 'three', 'iii');",
          "1526:   PRAGMA writable_schema = 1;",
          "1527:   UPDATE sqlite_master SET rootpage = (",
          "1528:     SELECT rootpage FROM sqlite_master WHERE name = 'i2'",
          "1529:   ) WHERE name = 'i1';",
          "1530: }",
          "1531: db close",
          "1532: sqlite3 db test.db",
          "1533: do_catchsql_test where-25.4 {",
          "1534:   SELECT * FROM t1 WHERE c='iii'",
          "1535: } {0 {}}",
          "1536: do_catchsql_test where-25.5 {",
          "1537:   INSERT INTO t1 VALUES(4, 'four', 'iii')",
          "1538:     ON CONFLICT(c) DO UPDATE SET b=NULL",
          "1539: } {1 {corrupt database}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}