{
  "cve_id": "CVE-2015-2923",
  "cve_desc": "The Neighbor Discovery (ND) protocol implementation in the IPv6 stack in FreeBSD through 10.1 allows remote attackers to reconfigure a hop-limit setting via a small hop_limit value in a Router Advertisement (RA) message.",
  "repo": "torvalds/linux",
  "patch_hash": "6fd99094de2b83d1d4c8457f2c83483b2828e75a",
  "patch_info": {
    "commit_hash": "6fd99094de2b83d1d4c8457f2c83483b2828e75a",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/6fd99094de2b83d1d4c8457f2c83483b2828e75a",
    "files": [
      "net/ipv6/ndisc.c"
    ],
    "message": "ipv6: Don't reduce hop limit for an interface\n\nA local route may have a lower hop_limit set than global routes do.\n\nRFC 3756, Section 4.2.7, \"Parameter Spoofing\"\n\n>   1.  The attacker includes a Current Hop Limit of one or another small\n>       number which the attacker knows will cause legitimate packets to\n>       be dropped before they reach their destination.\n\n>   As an example, one possible approach to mitigate this threat is to\n>   ignore very small hop limits.  The nodes could implement a\n>   configurable minimum hop limit, and ignore attempts to set it below\n>   said limit.\n\nSigned-off-by: D.S. Ljungmark <ljungmark@modio.se>\nAcked-by: Hannes Frederic Sowa <hannes@stressinduktion.org>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "net/ipv6/ndisc.c||net/ipv6/ndisc.c"
    ]
  },
  "patch_diff": {
    "net/ipv6/ndisc.c||net/ipv6/ndisc.c": [
      "File: net/ipv6/ndisc.c -> net/ipv6/ndisc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1218:  if (rt)",
      "1219:   rt6_set_expires(rt, jiffies + (HZ * lifetime));",
      "1220:  if (ra_msg->icmph.icmp6_hop_limit) {",
      "1222:   if (rt)",
      "1223:    dst_metric_set(&rt->dst, RTAX_HOPLIMIT,",
      "1224:            ra_msg->icmph.icmp6_hop_limit);",
      "",
      "[Removed Lines]",
      "1221:   in6_dev->cnf.hop_limit = ra_msg->icmph.icmp6_hop_limit;",
      "",
      "[Added Lines]",
      "1224:   if (in6_dev->cnf.hop_limit < ra_msg->icmph.icmp6_hop_limit) {",
      "1225:    in6_dev->cnf.hop_limit = ra_msg->icmph.icmp6_hop_limit;",
      "1226:   } else {",
      "1227:    ND_PRINTK(2, warn, \"RA: Got route advertisement with lower hop_limit than current\\n\");",
      "1228:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8013d1d7eafb0589ca766db6b74026f76b7f5cb4",
      "candidate_info": {
        "commit_hash": "8013d1d7eafb0589ca766db6b74026f76b7f5cb4",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/8013d1d7eafb0589ca766db6b74026f76b7f5cb4",
        "files": [
          "Documentation/networking/ip-sysctl.txt",
          "include/linux/ipv6.h",
          "include/uapi/linux/ipv6.h",
          "net/ipv6/addrconf.c",
          "net/ipv6/ndisc.c"
        ],
        "message": "net/ipv6: add sysctl option accept_ra_min_hop_limit\n\nCommit 6fd99094de2b (\"ipv6: Don't reduce hop limit for an interface\")\ndisabled accept hop limit from RA if it is smaller than the current hop\nlimit for security stuff. But this behavior kind of break the RFC definition.\n\nRFC 4861, 6.3.4.  Processing Received Router Advertisements\n   A Router Advertisement field (e.g., Cur Hop Limit, Reachable Time,\n   and Retrans Timer) may contain a value denoting that it is\n   unspecified.  In such cases, the parameter should be ignored and the\n   host should continue using whatever value it is already using.\n\n   If the received Cur Hop Limit value is non-zero, the host SHOULD set\n   its CurHopLimit variable to the received value.\n\nSo add sysctl option accept_ra_min_hop_limit to let user choose the minimum\nhop limit value they can accept from RA. And set default to 1 to meet RFC\nstandards.\n\nSigned-off-by: Hangbin Liu <liuhangbin@gmail.com>\nAcked-by: YOSHIFUJI Hideaki <hideaki.yoshifuji@miraclelinux.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "include/linux/ipv6.h||include/linux/ipv6.h",
          "include/uapi/linux/ipv6.h||include/uapi/linux/ipv6.h",
          "net/ipv6/addrconf.c||net/ipv6/addrconf.c",
          "net/ipv6/ndisc.c||net/ipv6/ndisc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/ipv6/ndisc.c||net/ipv6/ndisc.c"
          ],
          "candidate": [
            "net/ipv6/ndisc.c||net/ipv6/ndisc.c"
          ]
        }
      },
      "candidate_diff": {
        "include/linux/ipv6.h||include/linux/ipv6.h": [
          "File: include/linux/ipv6.h -> include/linux/ipv6.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:  __s32  max_desync_factor;",
          "30:  __s32  max_addresses;",
          "31:  __s32  accept_ra_defrtr;",
          "32:  __s32  accept_ra_pinfo;",
          "33: #ifdef CONFIG_IPV6_ROUTER_PREF",
          "34:  __s32  accept_ra_rtr_pref;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:  __s32  accept_ra_min_hop_limit;",
          "",
          "---------------"
        ],
        "include/uapi/linux/ipv6.h||include/uapi/linux/ipv6.h": [
          "File: include/uapi/linux/ipv6.h -> include/uapi/linux/ipv6.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "172:  DEVCONF_ACCEPT_RA_MTU,",
          "173:  DEVCONF_STABLE_SECRET,",
          "174:  DEVCONF_USE_OIF_ADDRS_ONLY,",
          "175:  DEVCONF_MAX",
          "176: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "175:  DEVCONF_ACCEPT_RA_MIN_HOP_LIMIT,",
          "",
          "---------------"
        ],
        "net/ipv6/addrconf.c||net/ipv6/addrconf.c": [
          "File: net/ipv6/addrconf.c -> net/ipv6/addrconf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "195:  .max_addresses  = IPV6_MAX_ADDRESSES,",
          "196:  .accept_ra_defrtr = 1,",
          "197:  .accept_ra_from_local = 0,",
          "198:  .accept_ra_pinfo = 1,",
          "199: #ifdef CONFIG_IPV6_ROUTER_PREF",
          "200:  .accept_ra_rtr_pref = 1,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "198:  .accept_ra_min_hop_limit= 1,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "237:  .max_addresses  = IPV6_MAX_ADDRESSES,",
          "238:  .accept_ra_defrtr = 1,",
          "239:  .accept_ra_from_local = 0,",
          "240:  .accept_ra_pinfo = 1,",
          "241: #ifdef CONFIG_IPV6_ROUTER_PREF",
          "242:  .accept_ra_rtr_pref = 1,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "241:  .accept_ra_min_hop_limit= 1,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4588:  array[DEVCONF_MAX_DESYNC_FACTOR] = cnf->max_desync_factor;",
          "4589:  array[DEVCONF_MAX_ADDRESSES] = cnf->max_addresses;",
          "4590:  array[DEVCONF_ACCEPT_RA_DEFRTR] = cnf->accept_ra_defrtr;",
          "4591:  array[DEVCONF_ACCEPT_RA_PINFO] = cnf->accept_ra_pinfo;",
          "4592: #ifdef CONFIG_IPV6_ROUTER_PREF",
          "4593:  array[DEVCONF_ACCEPT_RA_RTR_PREF] = cnf->accept_ra_rtr_pref;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4593:  array[DEVCONF_ACCEPT_RA_MIN_HOP_LIMIT] = cnf->accept_ra_min_hop_limit;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5484:    .mode  = 0644,",
          "5485:    .proc_handler = proc_dointvec,",
          "5486:   },",
          "5487:   {",
          "5488:    .procname = \"accept_ra_pinfo\",",
          "5489:    .data  = &ipv6_devconf.accept_ra_pinfo,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5490:   {",
          "5491:    .procname = \"accept_ra_min_hop_limit\",",
          "5492:    .data  = &ipv6_devconf.accept_ra_min_hop_limit,",
          "5493:    .maxlen  = sizeof(int),",
          "5494:    .mode  = 0644,",
          "5495:    .proc_handler = proc_dointvec,",
          "5496:   },",
          "",
          "---------------"
        ],
        "net/ipv6/ndisc.c||net/ipv6/ndisc.c": [
          "File: net/ipv6/ndisc.c -> net/ipv6/ndisc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1226:  if (rt)",
          "1227:   rt6_set_expires(rt, jiffies + (HZ * lifetime));",
          "1233:    in6_dev->cnf.hop_limit = ra_msg->icmph.icmp6_hop_limit;",
          "1234:   } else {",
          "1236:   }",
          "1240:  }",
          "1242: skip_defrtr:",
          "",
          "[Removed Lines]",
          "1228:  if (ra_msg->icmph.icmp6_hop_limit) {",
          "1232:   if (in6_dev->cnf.hop_limit < ra_msg->icmph.icmp6_hop_limit) {",
          "1235:    ND_PRINTK(2, warn, \"RA: Got route advertisement with lower hop_limit than current\\n\");",
          "1237:   if (rt)",
          "1238:    dst_metric_set(&rt->dst, RTAX_HOPLIMIT,",
          "1239:            ra_msg->icmph.icmp6_hop_limit);",
          "",
          "[Added Lines]",
          "1228:  if (in6_dev->cnf.accept_ra_min_hop_limit < 256 &&",
          "1229:      ra_msg->icmph.icmp6_hop_limit) {",
          "1230:   if (in6_dev->cnf.accept_ra_min_hop_limit <= ra_msg->icmph.icmp6_hop_limit) {",
          "1232:    if (rt)",
          "1233:     dst_metric_set(&rt->dst, RTAX_HOPLIMIT,",
          "1234:             ra_msg->icmph.icmp6_hop_limit);",
          "1236:    ND_PRINTK(2, warn, \"RA: Got route advertisement with lower hop_limit than minimum\\n\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}