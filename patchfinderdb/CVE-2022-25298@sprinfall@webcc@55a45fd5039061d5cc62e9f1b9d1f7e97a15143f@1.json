{
  "cve_id": "CVE-2022-25298",
  "cve_desc": "This affects the package sprinfall/webcc before 0.3.0. It is possible to traverse directories to fetch arbitrary files from the server.",
  "repo": "sprinfall/webcc",
  "patch_hash": "55a45fd5039061d5cc62e9f1b9d1f7e97a15143f",
  "patch_info": {
    "commit_hash": "55a45fd5039061d5cc62e9f1b9d1f7e97a15143f",
    "repo": "sprinfall/webcc",
    "commit_url": "https://github.com/sprinfall/webcc/commit/55a45fd5039061d5cc62e9f1b9d1f7e97a15143f",
    "files": [
      "examples/CMakeLists.txt",
      "examples/encoding.cc",
      "examples/encoding.h",
      "examples/url_unicode.cc",
      "webcc/body.cc",
      "webcc/fs.h",
      "webcc/request_parser.cc",
      "webcc/request_parser.h",
      "webcc/router.cc",
      "webcc/router.h",
      "webcc/server.cc",
      "webcc/server.h",
      "webcc/string.cc",
      "webcc/string.h",
      "webcc/url.cc",
      "webcc/url.h",
      "webcc/utility.cc",
      "webcc/utility.h"
    ],
    "message": "fix static file serving security issue; fix url path encoding issue",
    "before_after_code_files": [
      "examples/encoding.cc||examples/encoding.cc",
      "examples/encoding.h||examples/encoding.h",
      "webcc/body.cc||webcc/body.cc",
      "webcc/fs.h||webcc/fs.h",
      "webcc/request_parser.cc||webcc/request_parser.cc",
      "webcc/request_parser.h||webcc/request_parser.h",
      "webcc/router.cc||webcc/router.cc",
      "webcc/router.h||webcc/router.h",
      "webcc/server.cc||webcc/server.cc",
      "webcc/server.h||webcc/server.h",
      "webcc/string.cc||webcc/string.cc",
      "webcc/string.h||webcc/string.h",
      "webcc/url.cc||webcc/url.cc",
      "webcc/url.h||webcc/url.h",
      "webcc/utility.cc||webcc/utility.cc",
      "webcc/utility.h||webcc/utility.h"
    ]
  },
  "patch_diff": {
    "examples/encoding.cc||examples/encoding.cc": [
      "File: examples/encoding.cc -> examples/encoding.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "examples/encoding.h||examples/encoding.h": [
      "File: examples/encoding.h -> examples/encoding.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "webcc/body.cc||webcc/body.cc": [
      "File: webcc/body.cc -> webcc/body.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "202: }",
      "204: void FileBody::Dump(std::ostream& os, const std::string& prefix) const {",
      "206: }",
      "208: bool FileBody::Move(const fs::path& new_path) {",
      "",
      "[Removed Lines]",
      "205:   os << prefix << \"<file: \" << path_.string() << \">\" << std::endl;",
      "",
      "[Added Lines]",
      "205:   os << prefix << \"<file: \" << path_.u8string() << \">\" << std::endl;",
      "",
      "---------------"
    ],
    "webcc/fs.h||webcc/fs.h": [
      "File: webcc/fs.h -> webcc/fs.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: using std::filesystem::filesystem_error;",
      "30: using std::filesystem::rename;",
      "31: using std::filesystem::remove;",
      "32: using std::filesystem::exists;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "30: using std::filesystem::absolute;",
      "31: using std::filesystem::canonical;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47: using boost::filesystem::filesystem_error;",
      "50: using boost::filesystem::rename;",
      "51: using boost::filesystem::remove;",
      "52: using boost::filesystem::exists;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "52: using boost::filesystem::absolute;",
      "53: using boost::filesystem::canonical;",
      "",
      "---------------"
    ],
    "webcc/request_parser.cc||webcc/request_parser.cc": [
      "File: webcc/request_parser.cc -> webcc/request_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: }",
      "26: bool RequestParser::OnHeadersEnd() {",
      "30:   if (!matched) {",
      "31:     LOG_WARN(\"No view matches the request: %s %s\", request_->method().c_str(),",
      "33:   }",
      "35:   return matched;",
      "36: }",
      "",
      "[Removed Lines]",
      "27:   bool matched = view_matcher_(request_->method(), request_->url().path(),",
      "28:                                &stream_);",
      "32:              request_->url().path().c_str());",
      "",
      "[Added Lines]",
      "28:   std::string url_path = Url::DecodeUnsafe(request_->url().path());",
      "29:   bool matched = view_matcher_(request_->method(), url_path, &stream_);",
      "32:              url_path.c_str());",
      "",
      "---------------"
    ],
    "webcc/request_parser.h||webcc/request_parser.h": [
      "File: webcc/request_parser.h -> webcc/request_parser.h"
    ],
    "webcc/router.cc||webcc/router.cc": [
      "File: webcc/router.cc -> webcc/router.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "67:   return ViewPtr();",
      "68: }",
      "71:                        bool* stream) {",
      "72:   assert(stream != nullptr);",
      "",
      "[Removed Lines]",
      "70: bool Router::MatchView(const std::string& method, const std::string& url,",
      "",
      "[Added Lines]",
      "70: bool Router::MatchView(const std::string& method, const std::string& url_path,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "81:     if (route.url.empty()) {",
      "82:       std::smatch match;",
      "86:         return true;",
      "87:       }",
      "88:     } else {",
      "91:         return true;",
      "92:       }",
      "",
      "[Removed Lines]",
      "84:       if (std::regex_match(url, match, route.url_regex)) {",
      "89:       if (boost::iequals(route.url, url)) {",
      "",
      "[Added Lines]",
      "83:       if (std::regex_match(url_path, match, route.url_regex)) {",
      "88:       if (boost::iequals(route.url, url_path)) {",
      "",
      "---------------"
    ],
    "webcc/router.h||webcc/router.h": [
      "File: webcc/router.h -> webcc/router.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "28:   ViewPtr FindView(const std::string& method, const std::string& url,",
      "29:                    UrlArgs* args);",
      "35:                  bool* stream);",
      "37: private:",
      "",
      "[Removed Lines]",
      "34:   bool MatchView(const std::string& method, const std::string& url,",
      "",
      "[Added Lines]",
      "34:   bool MatchView(const std::string& method, const std::string& url_path,",
      "",
      "---------------"
    ],
    "webcc/server.cc||webcc/server.cc": [
      "File: webcc/server.cc -> webcc/server.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: #include <fstream>",
      "5: #include <utility>",
      "7: #include \"webcc/body.h\"",
      "8: #include \"webcc/logger.h\"",
      "9: #include \"webcc/request.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7: #include \"boost/algorithm/string/trim.hpp\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "32:       doc_root_(doc_root),",
      "33:       acceptor_(io_context_),",
      "34:       signals_(io_context_) {",
      "35:   AddSignals();",
      "36: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "37:   CheckDocRoot();",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "105:   return running_ && !io_context_.stopped();",
      "106: }",
      "108: void Server::AddSignals() {",
      "109:   signals_.add(SIGINT);  // Ctrl+C",
      "110:   signals_.add(SIGTERM);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "111: void Server::CheckDocRoot() {",
      "112:   try {",
      "113:     if (!fs::exists(doc_root_) || !fs::is_directory(doc_root_)) {",
      "114:       LOG_ERRO(\"Doc root is not an existing directory!\");",
      "115:       return;",
      "116:     }",
      "118:     if (doc_root_.is_relative()) {",
      "119:       doc_root_ = fs::absolute(doc_root_);",
      "120:     }",
      "122:     doc_root_ = fs::canonical(doc_root_);",
      "124:   } catch (fs::filesystem_error& e) {",
      "125:     LOG_ERRO(\"Doc root error: %s\", e.what());",
      "126:     doc_root_.clear();",
      "127:   }",
      "129:   LOG_INFO(\"Doc root: %s\", doc_root_.u8string().c_str());",
      "130: }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "314: }",
      "316: bool Server::MatchViewOrStatic(const std::string& method,",
      "319:     return true;",
      "320:   }",
      "323:   if (method == methods::kGet && !doc_root_.empty()) {",
      "326:     fs::error_code ec;",
      "327:     if (!fs::is_directory(path, ec) && fs::exists(path, ec)) {",
      "",
      "[Removed Lines]",
      "317:                                const std::string& url, bool* stream) {",
      "318:   if (Router::MatchView(method, url, stream)) {",
      "324:     fs::path path = doc_root_ / url;",
      "",
      "[Added Lines]",
      "341:                                const std::string& url_path, bool* stream) {",
      "342:   if (Router::MatchView(method, url_path, stream)) {",
      "348:     fs::path sub_path = utility::TranslatePath(url_path);",
      "350:     fs::path path = doc_root_ / sub_path;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "340:     return {};",
      "341:   }",
      "345:   try {",
      "",
      "[Removed Lines]",
      "343:   fs::path path = doc_root_ / request->url().path();",
      "",
      "[Added Lines]",
      "369:   std::string url_path = Url::DecodeUnsafe(request->url().path());",
      "370:   fs::path sub_path = utility::TranslatePath(url_path);",
      "371:   fs::path path = doc_root_ / sub_path;",
      "",
      "---------------"
    ],
    "webcc/server.h||webcc/server.h": [
      "File: webcc/server.h -> webcc/server.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "61:   bool IsRunning() const;",
      "63: private:",
      "65:   void AddSignals();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "66:   void CheckDocRoot();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "91:   virtual void Handle(ConnectionPtr connection);",
      "97:                          bool* stream);",
      "",
      "[Removed Lines]",
      "96:   bool MatchViewOrStatic(const std::string& method, const std::string& url,",
      "",
      "[Added Lines]",
      "103:   bool MatchViewOrStatic(const std::string& method, const std::string& url_path,",
      "",
      "---------------"
    ],
    "webcc/string.cc||webcc/string.cc": [
      "File: webcc/string.cc -> webcc/string.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: #include \"webcc/string.h\"",
      "3: #include <random>",
      "5: #include \"boost/algorithm/string/trim.hpp\"",
      "7: namespace webcc {",
      "10: std::string RandomString(std::size_t length) {",
      "11:   static const char chrs[] =",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3: #if (defined(_WIN32) || defined(_WIN64))",
      "4: #include <Windows.h>",
      "5: #endif",
      "13: #if (defined(_WIN32) || defined(_WIN64))",
      "16: static std::wstring MB2WC(const std::string& input, unsigned int code_page) {",
      "17:   if (input.empty()) {",
      "18:     return L\"\";",
      "19:   }",
      "21:   int length = ::MultiByteToWideChar(code_page, 0, &input[0],",
      "22:                                      static_cast<int>(input.size()),",
      "23:                                      NULL, 0);",
      "25:   std::wstring output(length, '\\0');",
      "27:   ::MultiByteToWideChar(code_page, 0, &input[0], static_cast<int>(input.size()),",
      "28:                         &output[0], static_cast<int>(output.size()));",
      "30:   return output;",
      "31: }",
      "34: static std::string WC2MB(const std::wstring& input, unsigned int code_page) {",
      "35:   if (input.empty()) {",
      "36:     return \"\";",
      "37:   }",
      "42:   DWORD flags = 0;",
      "43:   if (code_page != 65001 && code_page != 54936) {",
      "44:     flags = WC_NO_BEST_FIT_CHARS | WC_COMPOSITECHECK | WC_DEFAULTCHAR;",
      "45:   }",
      "47:   int length = ::WideCharToMultiByte(code_page, flags, &input[0],",
      "48:                                      static_cast<int>(input.size()), NULL, 0,",
      "49:                                      NULL, NULL);",
      "51:   std::string output(length, '\\0');",
      "53:   ::WideCharToMultiByte(code_page, flags, &input[0],",
      "54:                         static_cast<int>(input.size()), &output[0],",
      "55:                         static_cast<int>(output.size()), NULL, NULL);",
      "57:   return output;",
      "58: }",
      "60: std::string Utf16To8(const std::wstring& utf16_string) {",
      "61:   return WC2MB(utf16_string, CP_UTF8);",
      "62: }",
      "64: std::wstring Utf8To16(const std::string& utf8_string) {",
      "65:   return MB2WC(utf8_string, CP_UTF8);",
      "66: }",
      "68: #endif  // defined(_WIN32) || defined(_WIN64)",
      "",
      "---------------"
    ],
    "webcc/string.h||webcc/string.h": [
      "File: webcc/string.h -> webcc/string.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: namespace webcc {",
      "12: std::string RandomString(std::size_t length);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11: #if (defined(_WIN32) || defined(_WIN64))",
      "12: std::string Utf16To8(const std::wstring& utf16_string);",
      "13: std::wstring Utf8To16(const std::string& utf8_string);",
      "14: #endif",
      "",
      "---------------"
    ],
    "webcc/url.cc||webcc/url.cc": [
      "File: webcc/url.cc -> webcc/url.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "29:   return true;",
      "30: }",
      "79: std::string EncodeImpl(string_view raw,  // UTF8",
      "80:                        std::function<bool(int)> should_encode) {",
      "",
      "[Removed Lines]",
      "32: bool Decode(string_view encoded, std::string* raw) {",
      "33:   for (auto iter = encoded.begin(); iter != encoded.end(); ++iter) {",
      "34:     if (*iter == '%') {",
      "35:       if (++iter == encoded.end()) {",
      "37:         return false;",
      "38:       }",
      "40:       int h_decimal = 0;",
      "41:       if (!HexToDecimal(*iter, &h_decimal)) {",
      "42:         return false;",
      "43:       }",
      "45:       if (++iter == encoded.end()) {",
      "47:         return false;",
      "48:       }",
      "50:       int l_decimal = 0;",
      "51:       if (!HexToDecimal(*iter, &l_decimal)) {",
      "52:         return false;",
      "53:       }",
      "55:       raw->push_back(static_cast<char>((h_decimal << 4) + l_decimal));",
      "57:     } else if (*iter > 127 || *iter < 0) {",
      "59:       return false;",
      "60:     } else {",
      "61:       raw->push_back(*iter);",
      "62:     }",
      "63:   }",
      "65:   return true;",
      "66: }",
      "70: std::string DecodeUnsafe(string_view encoded) {",
      "71:   std::string raw;",
      "72:   if (Decode(encoded, &raw)) {",
      "73:     return raw;",
      "74:   }",
      "75:   return ToString(encoded);",
      "76: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "195:   });",
      "196: }",
      "200: Url::Url(string_view str, bool encode) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "152: bool Url::Decode(string_view encoded, std::string* raw) {",
      "153:   for (auto iter = encoded.begin(); iter != encoded.end(); ++iter) {",
      "154:     if (*iter == '%') {",
      "155:       if (++iter == encoded.end()) {",
      "157:         return false;",
      "158:       }",
      "160:       int h_decimal = 0;",
      "161:       if (!HexToDecimal(*iter, &h_decimal)) {",
      "162:         return false;",
      "163:       }",
      "165:       if (++iter == encoded.end()) {",
      "167:         return false;",
      "168:       }",
      "170:       int l_decimal = 0;",
      "171:       if (!HexToDecimal(*iter, &l_decimal)) {",
      "172:         return false;",
      "173:       }",
      "175:       raw->push_back(static_cast<char>((h_decimal << 4) + l_decimal));",
      "177:     } else if (*iter > 127 || *iter < 0) {",
      "179:       return false;",
      "180:     } else {",
      "181:       raw->push_back(*iter);",
      "182:     }",
      "183:   }",
      "185:   return true;",
      "186: }",
      "188: std::string Url::DecodeUnsafe(string_view encoded) {",
      "189:   std::string raw;",
      "190:   if (Decode(encoded, &raw)) {",
      "191:     return raw;",
      "192:   }",
      "193:   return ToString(encoded);",
      "194: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "318:       string_view key;",
      "319:       string_view value;",
      "320:       if (SplitKV(kv, '=', false, &key, &value)) {",
      "322:       }",
      "323:     }",
      "324:   }",
      "",
      "[Removed Lines]",
      "321:         parameters_.push_back({ DecodeUnsafe(key), DecodeUnsafe(value) });",
      "",
      "[Added Lines]",
      "319:         parameters_.push_back(",
      "320:             { Url::DecodeUnsafe(key), Url::DecodeUnsafe(value) });",
      "",
      "---------------"
    ],
    "webcc/url.h||webcc/url.h": [
      "File: webcc/url.h -> webcc/url.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "22:   static std::string EncodeQuery(string_view utf8_str);",
      "23:   static std::string EncodeFull(string_view utf8_str);",
      "25: public:",
      "26:   Url() = default;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25:   static bool Decode(string_view encoded, std::string* raw);",
      "29:   static std::string DecodeUnsafe(string_view encoded);",
      "",
      "---------------"
    ],
    "webcc/utility.cc||webcc/utility.cc": [
      "File: webcc/utility.cc -> webcc/utility.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: #include <iostream>",
      "8: #include <sstream>",
      "10: #include \"webcc/string.h\"",
      "11: #include \"webcc/version.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "10: #include \"boost/algorithm/string.hpp\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "91:   return ss.str();",
      "92: }",
      "94: }  // namespace utility",
      "95: }  // namespace webcc",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "96: fs::path TranslatePath(const std::string& utf8_url_path) {",
      "97: #if (defined(_WIN32) || defined(_WIN64))",
      "98:   std::wstring url_path = Utf8To16(utf8_url_path);",
      "99:   std::vector<std::wstring> words;",
      "100:   boost::split(words, url_path, boost::is_any_of(L\"/\"),",
      "101:                boost::token_compress_on);",
      "102: #else",
      "103:   std::vector<std::string> words;",
      "104:   boost::split(words, utf8_url_path, boost::is_any_of(\"/\"),",
      "105:                boost::token_compress_on);",
      "106: #endif  // defined(_WIN32) || defined(_WIN64)",
      "108:   fs::path path;",
      "109:   for (auto& word : words) {",
      "111: #if (defined(_WIN32) || defined(_WIN64))",
      "112:     if (word == L\".\" || word == L\"..\") {",
      "113: #else",
      "114:     if (word == \".\" || word == \"..\") {",
      "115: #endif",
      "116:       continue;",
      "117:     }",
      "119:     fs::path p{ word };",
      "123:     if (!p.parent_path().empty()) {",
      "124:       continue;",
      "125:     }",
      "127:     path /= p;",
      "128:   }",
      "130:   return path;",
      "131: }",
      "",
      "---------------"
    ],
    "webcc/utility.h||webcc/utility.h": [
      "File: webcc/utility.h -> webcc/utility.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "40: std::string EndpointToString(const boost::asio::ip::tcp::endpoint& endpoint);",
      "42: }  // namespace utility",
      "43: }  // namespace webcc",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "53: fs::path TranslatePath(const std::string& utf8_url_path);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bd189227269bf01beee7036bf59782b8f46a692d",
      "candidate_info": {
        "commit_hash": "bd189227269bf01beee7036bf59782b8f46a692d",
        "repo": "sprinfall/webcc",
        "commit_url": "https://github.com/sprinfall/webcc/commit/bd189227269bf01beee7036bf59782b8f46a692d",
        "files": [
          "webcc/connection.cc",
          "webcc/router.cc",
          "webcc/router.h",
          "webcc/server.cc",
          "webcc/server.h",
          "webcc/utility.cc",
          "webcc/utility.h"
        ],
        "message": "refactor url path and static file serving for server",
        "before_after_code_files": [
          "webcc/connection.cc||webcc/connection.cc",
          "webcc/router.cc||webcc/router.cc",
          "webcc/router.h||webcc/router.h",
          "webcc/server.cc||webcc/server.cc",
          "webcc/server.h||webcc/server.h",
          "webcc/utility.cc||webcc/utility.cc",
          "webcc/utility.h||webcc/utility.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "webcc/router.cc||webcc/router.cc",
            "webcc/router.h||webcc/router.h",
            "webcc/server.cc||webcc/server.cc",
            "webcc/server.h||webcc/server.h",
            "webcc/utility.cc||webcc/utility.cc",
            "webcc/utility.h||webcc/utility.h"
          ],
          "candidate": [
            "webcc/router.cc||webcc/router.cc",
            "webcc/router.h||webcc/router.h",
            "webcc/server.cc||webcc/server.cc",
            "webcc/server.h||webcc/server.h",
            "webcc/utility.cc||webcc/utility.cc",
            "webcc/utility.h||webcc/utility.h"
          ]
        }
      },
      "candidate_diff": {
        "webcc/connection.cc||webcc/connection.cc": [
          "File: webcc/connection.cc -> webcc/connection.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: #include \"webcc/connection_pool.h\"",
          "8: #include \"webcc/logger.h\"",
          "10: using boost::asio::ip::tcp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: #include \"webcc/utility.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:     response_->SetHeader(headers::kConnection, \"Close\");",
          "68:   }",
          "70:   response_->Prepare();",
          "72:   AsyncWrite();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:   response_->SetHeader(headers::kDate, utility::HttpDate());",
          "",
          "---------------"
        ],
        "webcc/router.cc||webcc/router.cc": [
          "File: webcc/router.cc -> webcc/router.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:   return true;",
          "36: }",
          "39:                          UrlArgs* args) {",
          "40:   assert(args != nullptr);",
          "",
          "[Removed Lines]",
          "38: ViewPtr Router::FindView(const std::string& method, const std::string& url,",
          "",
          "[Added Lines]",
          "38: ViewPtr Router::FindView(const std::string& method, const std::string& url_path,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:     if (route.url.empty()) {",
          "49:       std::smatch match;",
          "54:         for (size_t i = 1; i < match.size(); ++i) {",
          "",
          "[Removed Lines]",
          "51:       if (std::regex_match(url, match, route.url_regex)) {",
          "",
          "[Added Lines]",
          "51:       if (std::regex_match(url_path, match, route.url_regex)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:         return route.view;",
          "59:       }",
          "60:     } else {",
          "62:         return route.view;",
          "63:       }",
          "64:     }",
          "",
          "[Removed Lines]",
          "61:       if (boost::iequals(route.url, url)) {",
          "",
          "[Added Lines]",
          "61:       if (boost::iequals(route.url, url_path)) {",
          "",
          "---------------"
        ],
        "webcc/router.h||webcc/router.h": [
          "File: webcc/router.h -> webcc/router.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:   bool Route(const UrlRegex& regex_url, ViewPtr view,",
          "25:              const Strings& methods = { \"GET\" });",
          "29:                    UrlArgs* args);",
          "",
          "[Removed Lines]",
          "28:   ViewPtr FindView(const std::string& method, const std::string& url,",
          "",
          "[Added Lines]",
          "28:   ViewPtr FindView(const std::string& method, const std::string& url_path,",
          "",
          "---------------"
        ],
        "webcc/server.cc||webcc/server.cc": [
          "File: webcc/server.cc -> webcc/server.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include <fstream>",
          "5: #include <utility>",
          "9: #include \"webcc/body.h\"",
          "10: #include \"webcc/logger.h\"",
          "11: #include \"webcc/request.h\"",
          "12: #include \"webcc/response.h\"",
          "13: #include \"webcc/utility.h\"",
          "15: using namespace std::placeholders;",
          "",
          "[Removed Lines]",
          "7: #include \"boost/algorithm/string/trim.hpp\"",
          "",
          "[Added Lines]",
          "7: #include \"boost/algorithm/string.hpp\"",
          "13: #include \"webcc/string.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "297: void Server::Handle(ConnectionPtr connection) {",
          "298:   auto request = connection->request();",
          "303:   UrlArgs args;",
          "306:   if (!view) {",
          "310:     if (request->method() == methods::kGet) {",
          "",
          "[Removed Lines]",
          "300:   const Url& url = request->url();",
          "301:   LOG_INFO(\"Request URL path: %s\", url.path().c_str());",
          "304:   auto view = FindView(request->method(), url.path(), &args);",
          "307:     LOG_WARN(\"No view matches the request: %s %s\", request->method().c_str(),",
          "308:              url.path().c_str());",
          "",
          "[Added Lines]",
          "301:   std::string url_path = Url::DecodeUnsafe(request->url().path());",
          "302:   LOG_INFO(\"Request URL path: %s\", url_path.c_str());",
          "305:   auto view = FindView(request->method(), url_path, &args);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "343:     return true;",
          "344:   }",
          "347:   if (method == methods::kGet && !doc_root_.empty()) {",
          "350:     fs::path path = doc_root_ / sub_path;",
          "",
          "[Removed Lines]",
          "348:     fs::path sub_path = utility::TranslatePath(url_path);",
          "",
          "[Added Lines]",
          "348: #if 1",
          "352:     return true;",
          "353: #else",
          "354:     fs::path sub_path = TranslatePath(url_path);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "353:     if (!fs::is_directory(path, ec) && fs::exists(path, ec)) {",
          "354:       return true;",
          "355:     }",
          "356:   }",
          "358:   return false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "362: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "362:   assert(request->method() == methods::kGet);",
          "364:   if (doc_root_.empty()) {",
          "366:     return {};",
          "367:   }",
          "369:   std::string url_path = Url::DecodeUnsafe(request->url().path());",
          "373:   try {",
          "",
          "[Removed Lines]",
          "365:     LOG_INFO(\"The doc root was not specified\");",
          "370:   fs::path sub_path = utility::TranslatePath(url_path);",
          "371:   fs::path path = doc_root_ / sub_path;",
          "",
          "[Added Lines]",
          "373:     LOG_ERRO(\"The doc root was not specified\");",
          "378:   fs::path path = doc_root_ / TranslatePath(url_path);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "390:   }",
          "391: }",
          "393: }  // namespace webcc",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "400: fs::path Server::TranslatePath(const std::string& utf8_url_path) {",
          "401: #if (defined(_WIN32) || defined(_WIN64))",
          "402:   std::wstring url_path = Utf8To16(utf8_url_path);",
          "403:   std::vector<std::wstring> words;",
          "404:   boost::split(words, url_path, boost::is_any_of(L\"/\"),",
          "405:                boost::token_compress_on);",
          "406: #else",
          "407:   std::vector<std::string> words;",
          "408:   boost::split(words, utf8_url_path, boost::is_any_of(\"/\"),",
          "409:                boost::token_compress_on);",
          "410: #endif  // defined(_WIN32) || defined(_WIN64)",
          "412:   fs::path path;",
          "413:   for (auto& word : words) {",
          "415: #if (defined(_WIN32) || defined(_WIN64))",
          "416:     if (word == L\".\" || word == L\"..\") {",
          "417: #else",
          "418:     if (word == \".\" || word == \"..\") {",
          "419: #endif",
          "420:       continue;",
          "421:     }",
          "423:     fs::path p{ word };",
          "427:     if (!p.parent_path().empty()) {",
          "428:       continue;",
          "429:     }",
          "431:     path /= p;",
          "432:   }",
          "434:   return path;",
          "435: }",
          "",
          "---------------"
        ],
        "webcc/server.h||webcc/server.h": [
          "File: webcc/server.h -> webcc/server.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:   ResponsePtr ServeStatic(RequestPtr request);",
          "109: private:",
          "111:   boost::asio::ip::tcp protocol_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120:   fs::path TranslatePath(const std::string& utf8_url_path);",
          "",
          "---------------"
        ],
        "webcc/utility.cc||webcc/utility.cc": [
          "File: webcc/utility.cc -> webcc/utility.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: #include <iostream>",
          "8: #include <sstream>",
          "12: #include \"webcc/string.h\"",
          "13: #include \"webcc/version.h\"",
          "",
          "[Removed Lines]",
          "10: #include \"boost/algorithm/string.hpp\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:   return ss.str();",
          "94: }",
          "133: }  // namespace utility",
          "134: }  // namespace webcc",
          "",
          "[Removed Lines]",
          "96: fs::path TranslatePath(const std::string& utf8_url_path) {",
          "97: #if (defined(_WIN32) || defined(_WIN64))",
          "98:   std::wstring url_path = Utf8To16(utf8_url_path);",
          "99:   std::vector<std::wstring> words;",
          "100:   boost::split(words, url_path, boost::is_any_of(L\"/\"),",
          "101:                boost::token_compress_on);",
          "102: #else",
          "103:   std::vector<std::string> words;",
          "104:   boost::split(words, utf8_url_path, boost::is_any_of(\"/\"),",
          "105:                boost::token_compress_on);",
          "106: #endif  // defined(_WIN32) || defined(_WIN64)",
          "108:   fs::path path;",
          "109:   for (auto& word : words) {",
          "111: #if (defined(_WIN32) || defined(_WIN64))",
          "112:     if (word == L\".\" || word == L\"..\") {",
          "113: #else",
          "114:     if (word == \".\" || word == \"..\") {",
          "115: #endif",
          "116:       continue;",
          "117:     }",
          "119:     fs::path p{ word };",
          "123:     if (!p.parent_path().empty()) {",
          "124:       continue;",
          "125:     }",
          "127:     path /= p;",
          "128:   }",
          "130:   return path;",
          "131: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "webcc/utility.h||webcc/utility.h": [
          "File: webcc/utility.h -> webcc/utility.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: std::string EndpointToString(const boost::asio::ip::tcp::endpoint& endpoint);",
          "55: }  // namespace utility",
          "56: }  // namespace webcc",
          "",
          "[Removed Lines]",
          "53: fs::path TranslatePath(const std::string& utf8_url_path);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "29b9ad16b6ae7975111dad2227fbf98ddee0940a",
      "candidate_info": {
        "commit_hash": "29b9ad16b6ae7975111dad2227fbf98ddee0940a",
        "repo": "sprinfall/webcc",
        "commit_url": "https://github.com/sprinfall/webcc/commit/29b9ad16b6ae7975111dad2227fbf98ddee0940a",
        "files": [
          "examples/hello_world_server.cc",
          "webcc/parser.cc",
          "webcc/request_parser.cc",
          "webcc/router.h",
          "webcc/server.cc",
          "webcc/server.h"
        ],
        "message": "fix the view matching issues in the server",
        "before_after_code_files": [
          "examples/hello_world_server.cc||examples/hello_world_server.cc",
          "webcc/parser.cc||webcc/parser.cc",
          "webcc/request_parser.cc||webcc/request_parser.cc",
          "webcc/router.h||webcc/router.h",
          "webcc/server.cc||webcc/server.cc",
          "webcc/server.h||webcc/server.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "webcc/request_parser.cc||webcc/request_parser.cc",
            "webcc/router.h||webcc/router.h",
            "webcc/server.cc||webcc/server.cc",
            "webcc/server.h||webcc/server.h"
          ],
          "candidate": [
            "webcc/request_parser.cc||webcc/request_parser.cc",
            "webcc/router.h||webcc/router.h",
            "webcc/server.cc||webcc/server.cc",
            "webcc/server.h||webcc/server.h"
          ]
        }
      },
      "candidate_diff": {
        "examples/hello_world_server.cc||examples/hello_world_server.cc": [
          "File: examples/hello_world_server.cc -> examples/hello_world_server.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include \"webcc/logger.h\"",
          "2: #include \"webcc/response_builder.h\"",
          "3: #include \"webcc/server.h\"",
          "5: class HelloView : public webcc::View {",
          "6: public:",
          "8:   }",
          "10:   webcc::ResponsePtr Handle(webcc::RequestPtr request) override {",
          "",
          "[Removed Lines]",
          "7:   HelloView(int sleep_seconds) : sleep_seconds_(sleep_seconds) {",
          "",
          "[Added Lines]",
          "12:   explicit HelloView(int sleep_seconds) : sleep_seconds_(sleep_seconds) {",
          "",
          "---------------"
        ],
        "webcc/parser.cc||webcc/parser.cc": [
          "File: webcc/parser.cc -> webcc/parser.cc"
        ],
        "webcc/request_parser.cc||webcc/request_parser.cc": [
          "File: webcc/request_parser.cc -> webcc/request_parser.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: bool RequestParser::OnHeadersEnd() {",
          "29:   std::string url_path = Url::DecodeUnsafe(request_->url().path());",
          "36: }",
          "38: bool RequestParser::ParseStartLine(const std::string& line) {",
          "",
          "[Removed Lines]",
          "30:   bool matched = view_matcher_(request_->method(), url_path, &stream_);",
          "31:   if (!matched) {",
          "32:     LOG_WARN(\"No view matches the request: %s %s\", request_->method().c_str(),",
          "33:              url_path.c_str());",
          "34:   }",
          "35:   return matched;",
          "",
          "[Added Lines]",
          "30:   if (view_matcher_(request_->method(), url_path, &stream_)) {",
          "31:     LOG_INFO(\"The URL path matches a view which askes for data streaming\");",
          "32:   }  // else: Do nothing!",
          "36:   return true;",
          "",
          "---------------"
        ],
        "webcc/router.h||webcc/router.h": [
          "File: webcc/router.h -> webcc/router.h"
        ],
        "webcc/server.cc||webcc/server.cc": [
          "File: webcc/server.cc -> webcc/server.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "198: void Server::AsyncAccept() {",
          "199: #if WEBCC_STUDY_SERVER_THREADING",
          "201: #endif",
          "203:   acceptor_.async_accept(",
          "",
          "[Removed Lines]",
          "200:   LOG_USER(\"AsyncAccept\");",
          "",
          "[Added Lines]",
          "200:   LOG_USER(\"Async accept\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "215:         if (!ec) {",
          "216:           LOG_INFO(\"Accepted a connection\");",
          "221:           auto connection = std::make_shared<Connection>(",
          "222:               std::move(socket), &pool_, &queue_, std::move(view_matcher),",
          "",
          "[Removed Lines]",
          "218:           auto view_matcher = std::bind(&Server::MatchViewOrStatic, this, _1,",
          "219:                                         _2, _3);",
          "",
          "[Added Lines]",
          "218:           auto view_matcher = std::bind(&Server::MatchView, this, _1, _2, _3);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "323:         connection->SendResponse(response);",
          "324:       }",
          "325:     } else {",
          "327:     }",
          "329:     return;",
          "",
          "[Removed Lines]",
          "326:       connection->SendResponse(status_codes::kBadRequest);",
          "",
          "[Added Lines]",
          "325:       connection->SendResponse(status_codes::kNotFound);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "343:   }",
          "344: }",
          "373: ResponsePtr Server::ServeStatic(RequestPtr request) {",
          "374:   assert(request->method() == methods::kGet);",
          "376:   if (doc_root_.empty()) {",
          "379:     return {};",
          "380:   }",
          "",
          "[Removed Lines]",
          "346: bool Server::MatchViewOrStatic(const std::string& method,",
          "347:                                const std::string& url_path, bool* stream) {",
          "348:   if (Router::MatchView(method, url_path, stream)) {",
          "349:     return true;",
          "350:   }",
          "352:   if (method == methods::kGet && !doc_root_.empty()) {",
          "353: #if 1",
          "357:     return true;",
          "358: #else",
          "359:     sfs::path sub_path = TranslatePath(url_path);",
          "361:     sfs::path path = doc_root_ / sub_path;",
          "363:     std::error_code ec;",
          "364:     if (!sfs::is_directory(path, ec) && sfs::exists(path, ec)) {",
          "365:       return true;",
          "366:     }",
          "367: #endif",
          "368:   }",
          "370:   return false;",
          "371: }",
          "378:     LOG_ERRO(\"The doc root was not specified\");",
          "",
          "[Added Lines]",
          "350:     LOG_WARN(\"The doc root was not specified\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "383:   sfs::path path = doc_root_ / TranslatePath(url_path);",
          "385:   try {",
          "387:     auto body = std::make_shared<FileBody>(path, file_chunk_size_);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "358:     if (!sfs::exists(path) || !sfs::is_regular_file(path)) {",
          "359:       LOG_WARN(\"The file doesn't exist: %s\", url_path.c_str());",
          "360:       return {};",
          "361:     }",
          "",
          "---------------"
        ],
        "webcc/server.h||webcc/server.h": [
          "File: webcc/server.h -> webcc/server.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:   virtual void Handle(ConnectionPtr connection);",
          "106:   ResponsePtr ServeStatic(RequestPtr request);",
          "",
          "[Removed Lines]",
          "102:   bool MatchViewOrStatic(const std::string& method, const std::string& url_path,",
          "103:                          bool* stream);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ef3c3e430015dbecd1f3daf87db62695769c15c0",
      "candidate_info": {
        "commit_hash": "ef3c3e430015dbecd1f3daf87db62695769c15c0",
        "repo": "sprinfall/webcc",
        "commit_url": "https://github.com/sprinfall/webcc/commit/ef3c3e430015dbecd1f3daf87db62695769c15c0",
        "files": [
          "webcc/server.cc",
          "webcc/server.h"
        ],
        "message": "don't log error on empty doc root",
        "before_after_code_files": [
          "webcc/server.cc||webcc/server.cc",
          "webcc/server.h||webcc/server.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "webcc/server.cc||webcc/server.cc",
            "webcc/server.h||webcc/server.h"
          ],
          "candidate": [
            "webcc/server.cc||webcc/server.cc",
            "webcc/server.h||webcc/server.h"
          ]
        }
      },
      "candidate_diff": {
        "webcc/server.cc||webcc/server.cc": [
          "File: webcc/server.cc -> webcc/server.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "110: }",
          "112: void Server::CheckDocRoot() {",
          "113:   try {",
          "114:     if (!sfs::exists(doc_root_) || !sfs::is_directory(doc_root_)) {",
          "115:       LOG_ERRO(\"Doc root is not an existing directory!\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:   if (doc_root_.empty()) {",
          "114:     LOG_WARN(\"No doc root specified\");",
          "115:     return;",
          "116:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123:     doc_root_ = sfs::canonical(doc_root_);",
          "127:     doc_root_.clear();",
          "128:   }",
          "131: }",
          "133: void Server::AddSignals() {",
          "",
          "[Removed Lines]",
          "125:   } catch (sfs::filesystem_error& e) {",
          "126:     LOG_ERRO(\"Doc root error: %s\", e.what());",
          "130:   LOG_INFO(\"Doc root: %s\", doc_root_.u8string().c_str());",
          "",
          "[Added Lines]",
          "130:     LOG_INFO(\"Doc root: %s\", doc_root_.u8string().c_str());",
          "132:   } catch (const sfs::filesystem_error& e) {",
          "133:     LOG_ERRO(\"Invalid doc root: %s\", e.what());",
          "",
          "---------------"
        ],
        "webcc/server.h||webcc/server.h": [
          "File: webcc/server.h -> webcc/server.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:   Server(const Server&) = delete;",
          "26:   Server& operator=(const Server&) = delete;",
          "30:   void set_buffer_size(std::size_t buffer_size) {",
          "31:     if (buffer_size > 0) {",
          "",
          "[Removed Lines]",
          "28:   ~Server() = default;",
          "",
          "[Added Lines]",
          "28:   ~Server() override = default;",
          "",
          "---------------"
        ]
      }
    }
  ]
}