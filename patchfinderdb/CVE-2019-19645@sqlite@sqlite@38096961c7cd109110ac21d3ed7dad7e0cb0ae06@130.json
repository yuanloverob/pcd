{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "39e04f83b95f9ab6b2f579c1da716ab051c5b054",
      "candidate_info": {
        "commit_hash": "39e04f83b95f9ab6b2f579c1da716ab051c5b054",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/39e04f83b95f9ab6b2f579c1da716ab051c5b054",
        "files": [
          "ext/misc/dbdata.c",
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix a problem in the \".recover\" command allowing a circular loop of b-tree pages in a database file to cause an infinite loop.\n\nFossilOrigin-Name: 8d2a062eb8a3e6fdc6a61b571c8da0070382bf208c53e797151eac8679c975a1",
        "before_after_code_files": [
          "ext/misc/dbdata.c||ext/misc/dbdata.c",
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/dbdata.c||ext/misc/dbdata.c": [
          "File: ext/misc/dbdata.c -> ext/misc/dbdata.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "301:   return (a[0]<<8)|a[1];",
          "302: }",
          "303: static unsigned int get_uint32(unsigned char *a){",
          "305: }",
          "",
          "[Removed Lines]",
          "304:   return (a[0]<<24)|(a[1]<<16)|(a[2]<<8)|a[3];",
          "",
          "[Added Lines]",
          "304:   return ((unsigned int)a[0]<<24)",
          "305:        | ((unsigned int)a[1]<<16)",
          "306:        | ((unsigned int)a[2]<<8)",
          "307:        | ((unsigned int)a[3]);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f22c7e229ea4626c5268d61de3964521cf6a2735290cbd1518d68731ba6cca90",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6633:     \"  SELECT i, maxlen, NULL, (\"",
          "6634:     \"    WITH p(orig, pgno, parent) AS (\"",
          "6635:     \"      SELECT 0, i, (SELECT pgno FROM recovery.dbptr WHERE child=i)\"",
          "6637:     \"      SELECT i, p.parent, \"",
          "6638:     \"        (SELECT pgno FROM recovery.dbptr WHERE child=p.parent) FROM p\"",
          "6639:     \"    )\"",
          "",
          "[Removed Lines]",
          "6636:     \"        UNION ALL\"",
          "",
          "[Added Lines]",
          "6636:     \"        UNION \"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "30d3b0ceb55f4a1fcf661236dee0cd0437f35fcb",
      "candidate_info": {
        "commit_hash": "30d3b0ceb55f4a1fcf661236dee0cd0437f35fcb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/30d3b0ceb55f4a1fcf661236dee0cd0437f35fcb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbemem.c"
        ],
        "message": "Ensure that UTF16 strings are properly zero-terminated before returning them in an sqlite3_value_text16() request, even if the string is invalid UTF16 because it was formed from an arbitrary and/or odd-length BLOB.\n\nFossilOrigin-Name: 3a16ddf91f0c9c516a7fc2a9d4a4f69a8326f9b8ea66421e9ef1a2d663687b70",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a9b90aa12eecdd9f2a8b2d23da8b7cac43d8b1789f5cefa3f4e939d9f2b59269",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "274: static SQLITE_NOINLINE int vdbeMemAddTerminator(Mem *pMem){",
          "276:     return SQLITE_NOMEM_BKPT;",
          "277:   }",
          "278:   pMem->z[pMem->n] = 0;",
          "279:   pMem->z[pMem->n+1] = 0;",
          "280:   pMem->flags |= MEM_Term;",
          "281:   return SQLITE_OK;",
          "282: }",
          "",
          "[Removed Lines]",
          "275:   if( sqlite3VdbeMemGrow(pMem, pMem->n+2, 1) ){",
          "",
          "[Added Lines]",
          "280:   if( sqlite3VdbeMemGrow(pMem, pMem->n+3, 1) ){",
          "285:   pMem->z[pMem->n+2] = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "51f5ffa1a429bfdfe177e417482f1fbbf6685e76",
      "candidate_info": {
        "commit_hash": "51f5ffa1a429bfdfe177e417482f1fbbf6685e76",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/51f5ffa1a429bfdfe177e417482f1fbbf6685e76",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix a buffer overwrite in shell.c.in (part of the new .recover code).\n\nFossilOrigin-Name: 92facbc73a940d2844ac88fafd2d2dadb10886fb0b7c53e23f346d18fa6d6327",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c621fc668c6538f9f5bdac204f012c64998679a61aa8e224d212503820224c09",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "4010:     if( zNL || zCR ){",
          "4011:       int iOut = 0;",
          "4012:       i64 nMax = (nNL > nCR) ? nNL : nCR;",
          "4014:       char *zOut = (char*)sqlite3_malloc64(nAlloc);",
          "4015:       if( zOut==0 ){",
          "4016:         sqlite3_result_error_nomem(context);",
          "",
          "[Removed Lines]",
          "4013:       i64 nAlloc = nMax * nText + (nMax+12)*2;",
          "",
          "[Added Lines]",
          "4013:       i64 nAlloc = nMax * nText + (nMax+64)*2;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "39c5c4ae06b0c0397aa0013c1176192d7dd38d41",
      "candidate_info": {
        "commit_hash": "39c5c4ae06b0c0397aa0013c1176192d7dd38d41",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/39c5c4ae06b0c0397aa0013c1176192d7dd38d41",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "src/sqlite.h.in",
          "src/test1.c",
          "src/vdbeapi.c",
          "test/capi3d.test"
        ],
        "message": "Add the sqlite3_stmt_isexplain() interface.\n\nFossilOrigin-Name: ee642d3e2775ba4c73627ac71d0abf7a0f7a4ab3151d88e0076e9992f4814983",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/test1.c||src/test1.c",
          "src/vdbeapi.c||src/vdbeapi.c",
          "test/capi3d.test||test/capi3d.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b0d5cf40bba34e459caa7480bc84a1d75496c2ab52029f4bb0a31f2d9369a8ee",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3058:       }",
          "3062:         sqlite3_stmt *pExplain;",
          "3063:         char *zEQP;",
          "3064:         int triggerEQP = 0;",
          "",
          "[Removed Lines]",
          "3061:       if( pArg && pArg->autoEQP && sqlite3_strlike(\"EXPLAIN%\",zStmtSql,0)!=0 ){",
          "",
          "[Added Lines]",
          "3061:       if( pArg && pArg->autoEQP && sqlite3_stmt_isexplain(pStmt)==0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3107:       if( pArg ){",
          "3108:         pArg->cMode = pArg->mode;",
          "3109:         if( pArg->autoExplain ){",
          "3113:             pArg->cMode = MODE_Explain;",
          "3114:           }",
          "3117:             pArg->cMode = MODE_EQP;",
          "3118:           }",
          "3119:         }",
          "",
          "[Removed Lines]",
          "3110:           if( sqlite3_column_count(pStmt)==8",
          "3111:            && sqlite3_strlike(\"EXPLAIN%\", zStmtSql,0)==0",
          "3112:           ){",
          "3115:           if( sqlite3_column_count(pStmt)==4",
          "3116:            && sqlite3_strlike(\"EXPLAIN QUERY PLAN%\", zStmtSql,0)==0 ){",
          "",
          "[Added Lines]",
          "3110:           if( sqlite3_stmt_isexplain(pStmt)==1 ){",
          "3113:           if( sqlite3_stmt_isexplain(pStmt)==2 ){",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3895: int sqlite3_stmt_readonly(sqlite3_stmt *pStmt);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3907: int sqlite3_stmt_isexplain(sqlite3_stmt *pStmt);",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2674:   return TCL_OK;",
          "2675: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2683: static int SQLITE_TCLAPI test_stmt_isexplain(",
          "2684:   void * clientData,",
          "2685:   Tcl_Interp *interp,",
          "2686:   int objc,",
          "2687:   Tcl_Obj *CONST objv[]",
          "2688: ){",
          "2689:   sqlite3_stmt *pStmt;",
          "2690:   int rc;",
          "2692:   if( objc!=2 ){",
          "2693:     Tcl_AppendResult(interp, \"wrong # args: should be \\\"\",",
          "2694:         Tcl_GetStringFromObj(objv[0], 0), \" STMT\", 0);",
          "2695:     return TCL_ERROR;",
          "2696:   }",
          "2698:   if( getStmtPointer(interp, Tcl_GetString(objv[1]), &pStmt) ) return TCL_ERROR;",
          "2699:   rc = sqlite3_stmt_isexplain(pStmt);",
          "2700:   Tcl_SetObjResult(interp, Tcl_NewIntObj(rc));",
          "2701:   return TCL_OK;",
          "2702: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7840: #endif",
          "7841:      { \"sqlite3_next_stmt\",             test_next_stmt     ,0 },",
          "7842:      { \"sqlite3_stmt_readonly\",         test_stmt_readonly ,0 },",
          "7843:      { \"sqlite3_stmt_busy\",             test_stmt_busy     ,0 },",
          "7844:      { \"uses_stmt_journal\",             uses_stmt_journal ,0 },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7870:      { \"sqlite3_stmt_isexplain\",        test_stmt_isexplain,0 },",
          "",
          "---------------"
        ],
        "src/vdbeapi.c||src/vdbeapi.c": [
          "File: src/vdbeapi.c -> src/vdbeapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1608:   return pStmt ? ((Vdbe*)pStmt)->readOnly : 1;",
          "1609: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1615: int sqlite3_stmt_isexplain(sqlite3_stmt *pStmt){",
          "1616:   return pStmt ? ((Vdbe*)pStmt)->explain : 0;",
          "1617: }",
          "",
          "---------------"
        ],
        "test/capi3d.test||test/capi3d.test": [
          "File: test/capi3d.test -> test/capi3d.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "115: test_is_readonly capi3d-2.8 {PRAGMA application_id=1234} 0",
          "116: test_is_readonly capi3d-2.9 {VACUUM} 0",
          "117: test_is_readonly capi3d-2.10 {PRAGMA integrity_check} 1",
          "119:   sqlite3_stmt_readonly 0",
          "120: } 1",
          "122: # Tests for sqlite3_stmt_busy",
          "123: #",
          "124: do_test capi3d-3.1 {",
          "",
          "[Removed Lines]",
          "118: do_test capi3-2.99 {",
          "",
          "[Added Lines]",
          "118: do_test capi3-2.49 {",
          "123: # Tests for the is-explain interface.",
          "124: #",
          "125: proc test_is_explain {testname sql truth} {",
          "126:   do_test $testname [format {",
          "127:     set DB [sqlite3_connection_pointer db]",
          "128:     set STMT [sqlite3_prepare $DB {%s} -1 TAIL]",
          "129:     set rc [sqlite3_stmt_isexplain $STMT]",
          "130:     sqlite3_finalize $STMT",
          "131:     set rc",
          "132:   } $sql] $truth",
          "133: }",
          "135: test_is_explain capi3d-2.51 {SELECT * FROM sqlite_master} 0",
          "136: test_is_explain capi3d-2.52 { explain SELECT * FROM sqlite_master} 1",
          "137: test_is_explain capi3d-2.53 {  Explain Query Plan select * FROM sqlite_master} 2",
          "138: do_test capi3-2.99 {",
          "139:   sqlite3_stmt_isexplain 0",
          "140: } 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "55469bbafb242b9b3c0b844e26a199d5c53b6f87",
      "candidate_info": {
        "commit_hash": "55469bbafb242b9b3c0b844e26a199d5c53b6f87",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/55469bbafb242b9b3c0b844e26a199d5c53b6f87",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzdata7.db"
        ],
        "message": "Use memmove() instead of memcpy() in a place where buffers might overlap if the database file is badly corrupted, to prevent warnings from ASAN and valgrind.\n\nFossilOrigin-Name: 65ad6c55f1ba9bc2f75afffa3adaf19f145fad7ac9a00ccce6372e9a2cc4341b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4c976f171342ba2d39779279c28f3bc088572c440922e3e4421a3bf541263360",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8351:     if( memcmp(pDest, ((u8*)pX->pData) + iOffset, iAmt)!=0 ){",
          "8352:       int rc = sqlite3PagerWrite(pPage->pDbPage);",
          "8353:       if( rc ) return rc;",
          "8355:     }",
          "8356:   }",
          "8357:   return SQLITE_OK;",
          "",
          "[Removed Lines]",
          "8354:       memcpy(pDest, ((u8*)pX->pData) + iOffset, iAmt);",
          "",
          "[Added Lines]",
          "8358:       memmove(pDest, ((u8*)pX->pData) + iOffset, iAmt);",
          "",
          "---------------"
        ]
      }
    }
  ]
}