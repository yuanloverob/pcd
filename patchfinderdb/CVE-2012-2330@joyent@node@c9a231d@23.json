{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f98999cc166918807aa8e06c26c5a15e4e353df5",
      "candidate_info": {
        "commit_hash": "f98999cc166918807aa8e06c26c5a15e4e353df5",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/f98999cc166918807aa8e06c26c5a15e4e353df5",
        "files": [
          "deps/npm/lib/install.js",
          "deps/npm/node_modules/graceful-fs/graceful-fs.js",
          "deps/npm/node_modules/graceful-fs/package.json"
        ],
        "message": "Properly update npm to 1.1.0-3\n\nThanks @mscdex for spotting this.",
        "before_after_code_files": [
          "deps/npm/lib/install.js||deps/npm/liinstall.js",
          "deps/npm/node_modules/graceful-fs/graceful-fs.js||deps/npm/node_modules/graceful-fs/graceful-fs.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/npm/lib/install.js||deps/npm/liinstall.js": [
          "File: deps/npm/lib/install.js -> deps/npm/liinstall.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:     output = output || require(\"./utils/output.js\")",
          "77:     var tree = treeify(installed)",
          "81:       if (er) return cb_(er)",
          "82:       save(where, installed, tree, pretty, cb_)",
          "84:   }",
          "",
          "[Removed Lines]",
          "78:       , pretty = prettify(tree, installed)",
          "80:     output.write(pretty, function (er) {",
          "83:     })",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/npm/node_modules/graceful-fs/graceful-fs.js||deps/npm/node_modules/graceful-fs/graceful-fs.js": [
          "File: deps/npm/node_modules/graceful-fs/graceful-fs.js -> deps/npm/node_modules/graceful-fs/graceful-fs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "210:     fs.lutimesSync = function () {}",
          "211:   }",
          "212: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "218: fs.chown = chownFix(fs.chown)",
          "219: fs.fchown = chownFix(fs.fchown)",
          "220: fs.lchown = chownFix(fs.lchown)",
          "222: fs.chownSync = chownFixSync(fs.chownSync)",
          "223: fs.fchownSync = chownFixSync(fs.fchownSync)",
          "224: fs.lchownSync = chownFixSync(fs.lchownSync)",
          "226: function chownFix (orig) {",
          "227:   if (!orig) return orig",
          "228:   return function (target, uid, gid, cb) {",
          "229:     return orig.call(fs, target, uid, gid, function (er, res) {",
          "230:       if (chownErOk(er)) er = null",
          "231:       cb(er, res)",
          "232:     })",
          "233:   }",
          "234: }",
          "236: function chownFixSync (orig) {",
          "237:   if (!orig) return orig",
          "238:   return function (target, uid, gid) {",
          "239:     try {",
          "240:       return orig.call(fs, target, uid, gid)",
          "241:     } catch (er) {",
          "242:       if (!chownErOk(er)) throw er",
          "243:     }",
          "244:   }",
          "245: }",
          "247: function chownErOk (er) {",
          "254:   if (!er || (!process.getuid || process.getuid() !== 0)",
          "255:       && (er.code === \"EINVAL\" || er.code === \"EPERM\")) return true",
          "256: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7cee968c21278d7a947a58699f7ce5413ad48973",
      "candidate_info": {
        "commit_hash": "7cee968c21278d7a947a58699f7ce5413ad48973",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/7cee968c21278d7a947a58699f7ce5413ad48973",
        "files": [
          "src/node_isolate.cc",
          "src/node_isolate.h"
        ],
        "message": "isolates: add process-global list of isolates",
        "before_after_code_files": [
          "src/node_isolate.cc||src/node_isolate.cc",
          "src/node_isolate.h||src/node_isolate.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_isolate.cc||src/node_isolate.cc": [
          "File: src/node_isolate.cc -> src/node_isolate.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: static volatile bool initialized;",
          "61: static volatile int id;",
          "62: static volatile int isolate_count;",
          "63: static uv_mutex_t isolate_mutex;",
          "65: #ifdef NDEBUG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63: static ngx_queue_t isolate_list;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "230: void Isolate::Initialize() {",
          "231:   if (initialized) return;",
          "232:   if (uv_mutex_init(&isolate_mutex)) abort();",
          "233:   initialized = true;",
          "234: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "234:   ngx_queue_init(&isolate_list);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "250:   uv_mutex_lock(&isolate_mutex);",
          "251:   assert(initialized && \"node::Isolate::Initialize() hasn't been called\");",
          "252:   isolate_count++;",
          "253:   id_ = ++id;",
          "254:   uv_mutex_unlock(&isolate_mutex);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "254:   ngx_queue_insert_tail(&isolate_list, &isolate_list_);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "345:   uv_mutex_lock(&isolate_mutex);",
          "346:   isolate_count--;",
          "347:   assert(isolate_count >= 0);",
          "348:   uv_mutex_unlock(&isolate_mutex);",
          "349: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "350:   ngx_queue_remove(&isolate_list_);",
          "352:   assert((isolate_count == 0 && ngx_queue_empty(&isolate_list))",
          "353:       || (isolate_count > 0 && !ngx_queue_empty(&isolate_list)));",
          "",
          "---------------"
        ],
        "src/node_isolate.h||src/node_isolate.h": [
          "File: src/node_isolate.h -> src/node_isolate.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "128:   void operator=(const Isolate&) {}",
          "129:   Isolate(const Isolate&) {}",
          "131:   ngx_queue_t at_exit_callbacks_;",
          "132:   v8::Persistent<v8::Context> v8_context_;",
          "133:   v8::Isolate* v8_isolate_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131:   ngx_queue_t isolate_list_; // linked list of all isolates",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ab518ae50e480b5ffe01bdaaabd8c652200d1d55",
      "candidate_info": {
        "commit_hash": "ab518ae50e480b5ffe01bdaaabd8c652200d1d55",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/ab518ae50e480b5ffe01bdaaabd8c652200d1d55",
        "files": [
          "lib/readline.js"
        ],
        "message": "readline: fix for terminals that insert newlines automatically\n\nFixes #2985.",
        "before_after_code_files": [
          "lib/readline.js||lireadline.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/readline.js||lireadline.js": [
          "File: lib/readline.js -> lireadline.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "269:   } else {",
          "270:     this.line += c;",
          "271:     this.cursor += c.length;",
          "275:     this._moveCursor(0);",
          "",
          "[Removed Lines]",
          "272:     this.output.write(c);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "508:   var newPos = this._getCursorPos();",
          "512:     this.output.moveCursor(this.cursor - oldcursor, 0);",
          "513:     this.prevRows = newPos.rows;",
          "514:   } else {",
          "",
          "[Removed Lines]",
          "511:   if (oldPos.rows == newPos.rows && newPos.cols != 0) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eb6e60432b3930107c9e95538bf50c4accdc6ebc",
      "candidate_info": {
        "commit_hash": "eb6e60432b3930107c9e95538bf50c4accdc6ebc",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/eb6e60432b3930107c9e95538bf50c4accdc6ebc",
        "files": [
          "src/node.cc",
          "src/node_isolate.cc"
        ],
        "message": "isolates: add _newIsolate() and _joinIsolate() to process object",
        "before_after_code_files": [
          "src/node.cc||src/node.cc",
          "src/node_isolate.cc||src/node_isolate.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1847: }",
          "1850: static Handle<Value> ProcessTitleGetter(Local<String> property,",
          "1851:                                         const AccessorInfo& info) {",
          "1852:   HandleScope scope;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1850: static void RunIsolate(void* arg) {",
          "1851:   uv_loop_t* loop = uv_loop_new();",
          "1852:   Isolate* isolate = Isolate::New(loop);",
          "1853: }",
          "1856: static char magic_isolate_cookie_[] = \"magic isolate cookie\";",
          "1859: static Handle<Value> NewIsolate(const Arguments& args) {",
          "1860:   HandleScope scope;",
          "1862:   uv_thread_t* tid = new uv_thread_t;",
          "1864:   if (uv_thread_create(tid, RunIsolate, NULL))",
          "1865:     return Null();",
          "1867:   Local<ObjectTemplate> tpl = ObjectTemplate::New();",
          "1868:   tpl->SetInternalFieldCount(2);",
          "1870:   Local<Object> obj = tpl->NewInstance();",
          "1871:   obj->SetPointerInInternalField(0, magic_isolate_cookie_);",
          "1872:   obj->SetPointerInInternalField(1, tid);",
          "1874:   return scope.Close(obj);",
          "1875: }",
          "1878: static Handle<Value> JoinIsolate(const Arguments& args) {",
          "1879:   HandleScope scope;",
          "1881:   assert(args[0]->IsObject());",
          "1883:   Local<Object> obj = args[0]->ToObject();",
          "1884:   assert(obj->InternalFieldCount() == 2);",
          "1885:   assert(obj->GetPointerFromInternalField(0) == magic_isolate_cookie_);",
          "1887:   uv_thread_t* tid = (uv_thread_t*) obj->GetPointerFromInternalField(1);",
          "1889:   if (uv_thread_join(tid))",
          "1890:     return False(); // error",
          "1891:   else",
          "1892:     return True();  // ok",
          "1893: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2120:   NODE_SET_METHOD(process, \"binding\", Binding);",
          "2122:   return process;",
          "2123: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2168:   NODE_SET_METHOD(process, \"_newIsolate\", NewIsolate);",
          "2169:   NODE_SET_METHOD(process, \"_joinIsolate\", JoinIsolate);",
          "",
          "---------------"
        ],
        "src/node_isolate.cc||src/node_isolate.cc": [
          "File: src/node_isolate.cc -> src/node_isolate.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: Isolate::Isolate(uv_loop_t* loop) {",
          "38:   loop_ = loop;",
          "39:   isolate_ = v8::Isolate::GetCurrent();",
          "41:   assert(isolate_->GetData() == NULL);",
          "42:   isolate_->SetData(this);",
          "43: }",
          "",
          "[Removed Lines]",
          "40:   SLIST_INIT(&at_exit_callbacks_);",
          "",
          "[Added Lines]",
          "38:   SLIST_INIT(&at_exit_callbacks_);",
          "42:   if (isolate_ == NULL) {",
          "43:     isolate_ = v8::Isolate::New();",
          "44:     isolate_->Enter();",
          "45:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7e7d5d38eae74ac92daf304624a81c951be6ebf6",
      "candidate_info": {
        "commit_hash": "7e7d5d38eae74ac92daf304624a81c951be6ebf6",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/7e7d5d38eae74ac92daf304624a81c951be6ebf6",
        "files": [
          "lib/repl.js"
        ],
        "message": "Move function declaration out of conditional\n\nAlso avoid using eval as identifier.\nFixes crashes in strict mode.",
        "before_after_code_files": [
          "lib/repl.js||lirepl.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/repl.js||lirepl.js": [
          "File: lib/repl.js -> lirepl.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:   'string_decoder', 'tls', 'tty', 'url', 'util', 'vm', 'zlib'];",
          "79:   if (!(this instanceof REPLServer)) {",
          "81:   }",
          "83:   EventEmitter.call(this);",
          "",
          "[Removed Lines]",
          "78: function REPLServer(prompt, stream, eval, useGlobal, ignoreUndefined) {",
          "80:     return new REPLServer(prompt, stream, eval, useGlobal, ignoreUndefined);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89:     stream = options.stream || options.socket;",
          "90:     input = options.input;",
          "91:     output = options.output;",
          "93:     useGlobal = options.useGlobal;",
          "94:     ignoreUndefined = options.ignoreUndefined;",
          "95:     prompt = options.prompt;",
          "",
          "[Removed Lines]",
          "92:     eval = options.eval;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "104:   self.useGlobal = !!useGlobal;",
          "105:   self.ignoreUndefined = !!ignoreUndefined;",
          "108:     var err, result;",
          "109:     try {",
          "110:       if (self.useGlobal) {",
          "",
          "[Removed Lines]",
          "107:   self.eval = eval || function(code, context, file, cb) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "332:   if (!exports.repl) exports.repl = repl;",
          "333:   return repl;",
          "334: };",
          "",
          "[Removed Lines]",
          "330: exports.start = function(prompt, source, eval, useGlobal, ignoreUndefined) {",
          "331:   var repl = new REPLServer(prompt, source, eval, useGlobal, ignoreUndefined);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "552:             completionGroups.push(Object.getOwnPropertyNames(contextProto));",
          "553:           }",
          "554:           completionGroups.push(Object.getOwnPropertyNames(this.context));",
          "556:           completionGroupsLoaded();",
          "557:         } else {",
          "558:           this.eval('.scope', this.context, 'repl', function(err, globals) {",
          "559:             if (err || !globals) {",
          "561:             } else if (Array.isArray(globals[0])) {",
          "563:               globals.forEach(function(group) {",
          "",
          "[Removed Lines]",
          "555:           addStandardGlobals();",
          "560:               addStandardGlobals();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "565:               });",
          "566:             } else {",
          "567:               completionGroups.push(globals);",
          "569:             }",
          "570:             completionGroupsLoaded();",
          "571:           });",
          "572:         }",
          "596:       } else {",
          "597:         this.eval(expr, this.context, 'repl', function(e, obj) {",
          "",
          "[Removed Lines]",
          "568:               addStandardGlobals();",
          "574:         function addStandardGlobals() {",
          "577:           completionGroups.push(['NaN', 'Infinity', 'undefined',",
          "578:             'eval', 'parseInt', 'parseFloat', 'isNaN', 'isFinite', 'decodeURI',",
          "579:             'decodeURIComponent', 'encodeURI', 'encodeURIComponent',",
          "580:             'Object', 'Function', 'Array', 'String', 'Boolean', 'Number',",
          "581:             'Date', 'RegExp', 'Error', 'EvalError', 'RangeError',",
          "582:             'ReferenceError', 'SyntaxError', 'TypeError', 'URIError',",
          "583:             'Math', 'JSON']);",
          "586:           if (filter) {",
          "587:             completionGroups.push(['break', 'case', 'catch', 'const',",
          "588:               'continue', 'debugger', 'default', 'delete', 'do', 'else',",
          "589:               'export', 'false', 'finally', 'for', 'function', 'if',",
          "590:               'import', 'in', 'instanceof', 'let', 'new', 'null', 'return',",
          "591:               'switch', 'this', 'throw', 'true', 'try', 'typeof', 'undefined',",
          "592:               'var', 'void', 'while', 'with', 'yield']);",
          "593:           }",
          "594:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "790:   }",
          "791: };",
          "794: function defineDefaultCommands(repl) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}