{
  "cve_id": "CVE-2017-3730",
  "cve_desc": "In OpenSSL 1.1.0 before 1.1.0d, if a malicious server supplies bad parameters for a DHE or ECDHE key exchange then this can result in the client attempting to dereference a NULL pointer leading to a client crash. This could be exploited in a Denial of Service attack.",
  "repo": "openssl/openssl",
  "patch_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
  "patch_info": {
    "commit_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "files": [
      "ssl/statem/statem_clnt.c"
    ],
    "message": "Fix missing NULL checks in CKE processing\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c"
    ]
  },
  "patch_diff": {
    "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
      "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2258:         return 0;",
      "2259:     }",
      "2260:     ckey = ssl_generate_pkey(skey);",
      "2261:     dh_clnt = EVP_PKEY_get0_DH(ckey);",
      "2263:     if (dh_clnt == NULL || ssl_derive(s, ckey, skey) == 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2261:     if (ckey == NULL) {",
      "2262:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_DHE, ERR_R_INTERNAL_ERROR);",
      "2263:         return 0;",
      "2264:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2296:     }",
      "2298:     ckey = ssl_generate_pkey(skey);",
      "2300:     if (ssl_derive(s, ckey, skey) == 0) {",
      "2301:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_EVP_LIB);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2304:     if (ckey == NULL) {",
      "2305:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_INTERNAL_ERROR);",
      "2306:         goto err;",
      "2307:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ffb1e659b2546cb704ef56ae01176b9062ef1c6f",
      "candidate_info": {
        "commit_hash": "ffb1e659b2546cb704ef56ae01176b9062ef1c6f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/ffb1e659b2546cb704ef56ae01176b9062ef1c6f",
        "files": [
          "CHANGES",
          "NEWS",
          "README",
          "include/openssl/opensslv.h"
        ],
        "message": "Prepare for 1.1.0f-dev\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "include/openssl/opensslv.h||include/openssl/opensslv.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/openssl/opensslv.h||include/openssl/opensslv.h": [
          "File: include/openssl/opensslv.h -> include/openssl/opensslv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: # ifdef OPENSSL_FIPS",
          "45: # else",
          "47: # endif",
          "",
          "[Removed Lines]",
          "42: # define OPENSSL_VERSION_NUMBER  0x1010005fL",
          "44: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0e-fips  16 Feb 2017\"",
          "46: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0e  16 Feb 2017\"",
          "",
          "[Added Lines]",
          "42: # define OPENSSL_VERSION_NUMBER  0x10100060L",
          "44: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0f-fips-dev  xx XXX xxxx\"",
          "46: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0f-dev  xx XXX xxxx\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0453163e9a9052884cce288ff3e2acb77725a239",
      "candidate_info": {
        "commit_hash": "0453163e9a9052884cce288ff3e2acb77725a239",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/0453163e9a9052884cce288ff3e2acb77725a239",
        "files": [
          "CHANGES",
          "NEWS",
          "README",
          "include/openssl/opensslv.h"
        ],
        "message": "Prepare for 1.1.0e release\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "include/openssl/opensslv.h||include/openssl/opensslv.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/openssl/opensslv.h||include/openssl/opensslv.h": [
          "File: include/openssl/opensslv.h -> include/openssl/opensslv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: # ifdef OPENSSL_FIPS",
          "45: # else",
          "47: # endif",
          "",
          "[Removed Lines]",
          "42: # define OPENSSL_VERSION_NUMBER  0x10100050L",
          "44: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0e-fips-dev  xx XXX xxxx\"",
          "46: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0e-dev  xx XXX xxxx\"",
          "",
          "[Added Lines]",
          "42: # define OPENSSL_VERSION_NUMBER  0x1010005fL",
          "44: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0e-fips  16 Feb 2017\"",
          "46: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0e  16 Feb 2017\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "189d4e0906551429dd177af658b5ee37aac2dad3",
      "candidate_info": {
        "commit_hash": "189d4e0906551429dd177af658b5ee37aac2dad3",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/189d4e0906551429dd177af658b5ee37aac2dad3",
        "files": [
          "test/ct_test.c"
        ],
        "message": "Construct SCT from base64 in ct_test\n\nThis gives better code coverage and is more representative of how a\nuser would likely construct an SCT (using the base64 returned by a CT log).\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1548)\n(cherry picked from commit f7a39a5a3f7f91e0d1ba0030323eef26bc8ccddf)",
        "before_after_code_files": [
          "test/ct_test.c||test/ct_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/ct_test.c||test/ct_test.c": [
          "File: test/ct_test.c -> test/ct_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "511: static int test_encode_tls_sct()",
          "512: {",
          "523:     SETUP_CT_TEST_FIXTURE();",
          "525:     STACK_OF(SCT) *sct_list = sk_SCT_new_null();",
          "543:     }",
          "546:     fixture.sct_list = sct_list;",
          "547:     fixture.sct_dir = ct_dir;",
          "548:     fixture.sct_text_file = \"tls1.sct\";",
          "",
          "[Removed Lines]",
          "513:     const unsigned char log_id[] = \"\\xDF\\x1C\\x2E\\xC1\\x15\\x00\\x94\\x52\\x47\\xA9\"",
          "514:             \"\\x61\\x68\\x32\\x5D\\xDC\\x5C\\x79\\x59\\xE8\\xF7\\xC6\\xD3\\x88\\xFC\\x00\\x2E\"",
          "515:             \"\\x0B\\xBD\\x3F\\x74\\xD7\\x64\";",
          "517:     const unsigned char signature[] = \"\\x45\\x02\\x20\\x48\\x2F\\x67\\x51\\xAF\\x35\"",
          "518:             \"\\xDB\\xA6\\x54\\x36\\xBE\\x1F\\xD6\\x64\\x0F\\x3D\\xBF\\x9A\\x41\\x42\\x94\\x95\"",
          "519:             \"\\x92\\x45\\x30\\x28\\x8F\\xA3\\xE5\\xE2\\x3E\\x06\\x02\\x21\\x00\\xE4\\xED\\xC0\"",
          "520:             \"\\xDB\\x3A\\xC5\\x72\\xB1\\xE2\\xF5\\xE8\\xAB\\x6A\\x68\\x06\\x53\\x98\\x7D\\xCF\"",
          "521:             \"\\x41\\x02\\x7D\\xFE\\xFF\\xA1\\x05\\x51\\x9D\\x89\\xED\\xBF\\x08\";",
          "526:     SCT *sct = SCT_new();",
          "527:     if (!SCT_set_version(sct, SCT_VERSION_V1)) {",
          "528:         fprintf(stderr, \"Failed to set SCT version\\n\");",
          "529:         return 1;",
          "530:     }",
          "531:     if (!SCT_set1_log_id(sct, log_id, 32)) {",
          "532:         fprintf(stderr, \"Failed to set SCT log ID\\n\");",
          "533:         return 1;",
          "534:     }",
          "535:     SCT_set_timestamp(sct, 1);",
          "536:     if (!SCT_set_signature_nid(sct, NID_ecdsa_with_SHA256)) {",
          "537:         fprintf(stderr, \"Failed to set SCT signature NID\\n\");",
          "538:         return 1;",
          "539:     }",
          "540:     if (!SCT_set1_signature(sct, signature, 71)) {",
          "541:         fprintf(stderr, \"Failed to set SCT signature\\n\");",
          "542:         return 1;",
          "544:     sk_SCT_push(sct_list, sct);",
          "",
          "[Added Lines]",
          "513:     const char log_id[] = \"3xwuwRUAlFJHqWFoMl3cXHlZ6PfG04j8AC4LvT9012Q=\";",
          "514:     const uint64_t timestamp = 1;",
          "515:     const char extensions[] = \"\";",
          "516:     const char signature[] = \"RQIgSC9nUa8126ZUNr4f1mQPPb+aQUKUlZJFMCiPo+XiPgY\"",
          "517:         \"CIQDk7cDbOsVyseL16KtqaAZTmH3PQQJ9/v+hBVGdie2/CA==\";",
          "522:     SCT *sct = SCT_new_from_base64(SCT_VERSION_V1, log_id,",
          "523:                                    CT_LOG_ENTRY_TYPE_X509, timestamp,",
          "524:                                    extensions, signature);",
          "526:     if (sct == NULL) {",
          "527:         fprintf(stderr, \"Failed to create SCT from base64-encoded test data\\n\");",
          "528:         return 0;",
          "531:     sk_SCT_push(sct_list, sct);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e9c0fa9f5feb3b3687f34681d0f7618f496ce41f",
      "candidate_info": {
        "commit_hash": "e9c0fa9f5feb3b3687f34681d0f7618f496ce41f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/e9c0fa9f5feb3b3687f34681d0f7618f496ce41f",
        "files": [
          "crypto/rand/randfile.c"
        ],
        "message": "fix undoes errors introduced by https://github.com/openssl/openssl/commit/fc6076ca272f74eb1364c29e6974ad5da5ef9777?diff=split#diff-1014acebaa2c13d44ca196b9a433ef2eR184\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>\nCLA: trivial\n(cherry picked from commit 8bd62abe00b893573920a7a12769fb00bd8da234)",
        "before_after_code_files": [
          "crypto/rand/randfile.c||crypto/rand/randfile.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/rand/randfile.c||crypto/rand/randfile.c": [
          "File: crypto/rand/randfile.c -> crypto/rand/randfile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "209:             return 1;",
          "210:         }",
          "212:     }",
          "213: #endif",
          "215: #if defined(O_CREAT) && !defined(OPENSSL_NO_POSIX_IO) && \\",
          "216:     !defined(OPENSSL_SYS_VMS) && !defined(OPENSSL_SYS_WINDOWS)",
          "",
          "[Removed Lines]",
          "211: # endif",
          "",
          "[Added Lines]",
          "213: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "17f4d2598412780f60a849968dedabab79ec714d",
      "candidate_info": {
        "commit_hash": "17f4d2598412780f60a849968dedabab79ec714d",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/17f4d2598412780f60a849968dedabab79ec714d",
        "files": [
          "crypto/asn1/p5_pbev2.c",
          "crypto/asn1/p5_scrypt.c"
        ],
        "message": "Clean one unused variable, plus an useless one.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1906)\n(cherry picked from commit 2191dc846a85ce82925cb06b4dd8649da7fc403c)",
        "before_after_code_files": [
          "crypto/asn1/p5_pbev2.c||crypto/asn1/p5_pbev2.c",
          "crypto/asn1/p5_scrypt.c||crypto/asn1/p5_scrypt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/asn1/p5_pbev2.c||crypto/asn1/p5_pbev2.c": [
          "File: crypto/asn1/p5_pbev2.c -> crypto/asn1/p5_pbev2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:                               unsigned char *salt, int saltlen,",
          "42:                               unsigned char *aiv, int prf_nid)",
          "43: {",
          "45:     int alg_nid, keylen;",
          "46:     EVP_CIPHER_CTX *ctx = NULL;",
          "47:     unsigned char iv[EVP_MAX_IV_LENGTH];",
          "48:     PBE2PARAM *pbe2 = NULL;",
          "51:     alg_nid = EVP_CIPHER_type(cipher);",
          "52:     if (alg_nid == NID_undef) {",
          "",
          "[Removed Lines]",
          "44:     X509_ALGOR *scheme = NULL, *kalg = NULL, *ret = NULL;",
          "49:     ASN1_OBJECT *obj;",
          "",
          "[Added Lines]",
          "44:     X509_ALGOR *scheme = NULL, *ret = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:                 ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER);",
          "55:         goto err;",
          "56:     }",
          "59:     if ((pbe2 = PBE2PARAM_new()) == NULL)",
          "60:         goto merr;",
          "63:     scheme = pbe2->encryption;",
          "65:     if ((scheme->parameter = ASN1_TYPE_new()) == NULL)",
          "66:         goto merr;",
          "",
          "[Removed Lines]",
          "57:     obj = OBJ_nid2obj(alg_nid);",
          "64:     scheme->algorithm = obj;",
          "",
          "[Added Lines]",
          "62:     scheme->algorithm = OBJ_nid2obj(alg_nid);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "137:     EVP_CIPHER_CTX_free(ctx);",
          "138:     PBE2PARAM_free(pbe2);",
          "141:     X509_ALGOR_free(ret);",
          "143:     return NULL;",
          "145: }",
          "147: X509_ALGOR *PKCS5_pbe2_set(const EVP_CIPHER *cipher, int iter,",
          "",
          "[Removed Lines]",
          "140:     X509_ALGOR_free(kalg);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "crypto/asn1/p5_scrypt.c||crypto/asn1/p5_scrypt.c": [
          "File: crypto/asn1/p5_scrypt.c -> crypto/asn1/p5_scrypt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:                                   unsigned char *aiv, uint64_t N, uint64_t r,",
          "51:                                   uint64_t p)",
          "52: {",
          "54:     int alg_nid;",
          "55:     size_t keylen = 0;",
          "56:     EVP_CIPHER_CTX *ctx = NULL;",
          "57:     unsigned char iv[EVP_MAX_IV_LENGTH];",
          "58:     PBE2PARAM *pbe2 = NULL;",
          "61:     if (!cipher) {",
          "62:         ASN1err(ASN1_F_PKCS5_PBE2_SET_SCRYPT, ERR_R_PASSED_NULL_PARAMETER);",
          "",
          "[Removed Lines]",
          "53:     X509_ALGOR *scheme = NULL, *kalg = NULL, *ret = NULL;",
          "59:     ASN1_OBJECT *obj;",
          "",
          "[Added Lines]",
          "53:     X509_ALGOR *scheme = NULL, *ret = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:                 ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER);",
          "76:         goto err;",
          "77:     }",
          "79:     pbe2 = PBE2PARAM_new();",
          "80:     if (pbe2 == NULL)",
          "81:         goto merr;",
          "",
          "[Removed Lines]",
          "78:     obj = OBJ_nid2obj(alg_nid);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "84:     scheme = pbe2->encryption;",
          "87:     scheme->parameter = ASN1_TYPE_new();",
          "88:     if (scheme->parameter == NULL)",
          "89:         goto merr;",
          "",
          "[Removed Lines]",
          "86:     scheme->algorithm = obj;",
          "",
          "[Added Lines]",
          "85:     scheme->algorithm = OBJ_nid2obj(alg_nid);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "150:  err:",
          "151:     PBE2PARAM_free(pbe2);",
          "153:     X509_ALGOR_free(ret);",
          "154:     EVP_CIPHER_CTX_free(ctx);",
          "156:     return NULL;",
          "158: }",
          "160: static X509_ALGOR *pkcs5_scrypt_set(const unsigned char *salt, size_t saltlen,",
          "",
          "[Removed Lines]",
          "152:     X509_ALGOR_free(kalg);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "162:                                     uint64_t p)",
          "163: {",
          "164:     X509_ALGOR *keyfunc = NULL;",
          "168:     if (sparam == NULL)",
          "169:         goto merr;",
          "",
          "[Removed Lines]",
          "165:     SCRYPT_PARAMS *sparam = NULL;",
          "167:     sparam = SCRYPT_PARAMS_new();",
          "",
          "[Added Lines]",
          "162:     SCRYPT_PARAMS *sparam = SCRYPT_PARAMS_new();",
          "",
          "---------------"
        ]
      }
    }
  ]
}