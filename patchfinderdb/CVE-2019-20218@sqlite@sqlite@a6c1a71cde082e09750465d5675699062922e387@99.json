{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0ba323476a40484243f93019ab6f2dc6df7befd1",
      "candidate_info": {
        "commit_hash": "0ba323476a40484243f93019ab6f2dc6df7befd1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0ba323476a40484243f93019ab6f2dc6df7befd1",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/dbfuzz2.c"
        ],
        "message": "Fix dbfuzz2 so that it will compile on systems that do not support getrlimit().\n\nFossilOrigin-Name: 36295dcebcb5487f2a462eabb41900ac28b8e839898ef0fae0aa4730bf9b0671",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/dbfuzz2.c||test/dbfuzz2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8fb0c6d5a38e77aa4c5f394fb8af1b0c7c6a4790e932aabc213a3078ee9acaf6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/dbfuzz2.c||test/dbfuzz2.c": [
          "File: test/dbfuzz2.c -> test/dbfuzz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "377:       free(pIn);",
          "378:     }",
          "379:   }",
          "380:   if( eVerbosity>0 ){",
          "381:     struct rusage x;",
          "382:     printf(\"SQLite %s\\n\", sqlite3_sourceid());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "380: #ifdef RUSAGE_SELF",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "385:       printf(\"Maximum RSS = %ld KB\\n\", x.ru_maxrss);",
          "386:     }",
          "387:   }",
          "388:   return 0;",
          "389: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "389: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c7a73eaea4a5c482fcdeb59d548df0464cd3d69",
      "candidate_info": {
        "commit_hash": "2c7a73eaea4a5c482fcdeb59d548df0464cd3d69",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2c7a73eaea4a5c482fcdeb59d548df0464cd3d69",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fts3corrupt4.test"
        ],
        "message": "Fix another segfault caused by a corrupt fts3 database.\n\nFossilOrigin-Name: ba3b8412726548a0716c1a2d67260c3b7e31956474f4cd4ce607cf2cebc667dd",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3corrupt4.test||test/fts3corrupt4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2255:   nPrefix = fts3PrefixCompress(pWriter->zTerm, pWriter->nTerm, zTerm, nTerm);",
          "2256:   nSuffix = nTerm-nPrefix;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2261:   if( nSuffix<=0 ) return FTS_CORRUPT_VTAB;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 058a8006dceda78a894ea9446f057aa60b6d38e96506d4d91bda0ee2f9314ba3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1945:   SELECT quote(matchinfo(t1,'pcxybs'))==0 FROM t1 WHERE b MATCH 'e*';",
          "1946: } {0 {0 0}}",
          "",
          "[Removed Lines]",
          "1950: finish_test",
          "",
          "[Added Lines]",
          "1948: #-------------------------------------------------------------------------",
          "1949: reset_db",
          "1950: do_test 14.0 {",
          "1951:   sqlite3 db {}",
          "1952:   db deserialize [decode_hexdb {",
          "1953: | size 28672 pagesize 4096 filename crash-f7b636a855e1d2.db",
          "1954: | page 1 offset 0",
          "1955: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "1956: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 07   .....@  ........",
          "1957: |     32: 00 00 00 00 00 00 00 00 00 00 00 06 00 00 00 04   ................",
          "1958: |     48: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "1959: |     96: 00 00 00 00 0d 0e ef 00 07 0d 4d 00 0f bd 0f 5f   ..........M...._",
          "1960: |    112: 0e f7 0e 06 0e bc 0d a4 0d 4d 00 00 00 00 00 00   .........M......",
          "1961: |   3392: 00 00 00 00 00 00 00 00 00 00 00 00 00 55 07 07   .............U..",
          "1962: |   3408: 17 1b 1b 01 81 01 74 61 62 6c 65 74 31 5f 73 74   ......tablet1_st",
          "1963: |   3424: 61 74 74 31 5f 73 74 61 74 07 43 52 45 41 54 45   att1_stat.CREATE",
          "1964: |   3440: 20 54 41 42 4c 45 20 27 74 31 5f 73 74 61 74 27    TABLE 't1_stat'",
          "1965: |   3456: 28 69 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d   (id INTEGER PRIM",
          "1966: |   3472: 41 52 59 20 4b 45 59 2c 20 76 61 6c 75 65 20 42   ARY KEY, value B",
          "1967: |   3488: 4c 4f 42 29 60 06 07 17 21 21 01 81 0b 74 61 62   LOB)`...!!...tab",
          "1968: |   3504: 6c 65 74 31 5f 64 6f 63 73 69 7a 65 74 31 5f 64   let1_docsizet1_d",
          "1969: |   3520: 6f 63 73 69 7a 65 06 43 52 45 41 54 45 20 54 41   ocsize.CREATE TA",
          "1970: |   3536: 42 4c 45 20 27 74 31 5f 64 6f 63 73 69 7a 65 27   BLE 't1_docsize'",
          "1971: |   3552: 28 64 6f 63 69 64 20 49 4e 54 45 47 45 52 20 50   (docid INTEGER P",
          "1972: |   3568: 52 49 4d 41 52 59 20 4b 45 59 2c 20 73 69 7a 65   RIMARY KEY, size",
          "1973: |   3584: 20 42 4c 4f 42 29 81 33 04 07 17 1f 1f 01 82 35    BLOB).3.......5",
          "1974: |   3600: 74 61 62 6c 65 74 31 5f 73 65 67 64 69 72 74 31   tablet1_segdirt1",
          "1975: |   3616: 5f 73 65 67 64 69 25 04 43 52 45 41 54 45 20 54   _segdi%.CREATE T",
          "1976: |   3632: 41 42 4c 45 20 27 74 31 5f 73 65 67 64 69 72 27   ABLE 't1_segdir'",
          "1977: |   3648: 28 6c 65 76 65 6c 20 49 4e 54 45 47 45 52 2c 69   (level INTEGER,i",
          "1978: |   3664: 64 78 20 49 4e 54 45 47 45 52 2c 73 74 61 72 74   dx INTEGER,start",
          "1979: |   3680: 5f 62 6c 6f 63 6b 20 49 4e 54 45 47 45 52 2c 6c   _block INTEGER,l",
          "1980: |   3696: 65 61 76 65 73 5f 65 6e 64 5f 62 6c 6f 63 6b 20   eaves_end_block",
          "1981: |   3712: 49 4e 54 45 47 45 52 2c 65 6e 64 5f 62 6c 6f 63   INTEGER,end_bloc",
          "1982: |   3728: 6b 20 49 4e 54 45 47 45 52 2c 72 6f 6f 74 20 42   k INTEGER,root B",
          "1983: |   3744: 4c 4f 42 2c 50 52 49 4d 41 52 59 20 4b 45 59 28   LOB,PRIMARY KEY(",
          "1984: |   3760: 6c 65 76 65 6c 2c 20 69 64 78 29 29 31 05 06 17   level, idx))1...",
          "1985: |   3776: 45 1f 01 00 69 6e 64 65 78 73 71 6c 69 74 65 5f   E...indexsqlite_",
          "1986: |   3792: 61 75 74 6f 69 6e 64 65 78 5f 74 31 5f 73 65 67   autoindex_t1_seg",
          "1987: |   3808: 64 69 72 5f 31 74 31 5f 73 65 67 64 69 72 05 00   dir_1t1_segdir..",
          "1988: |   3824: 00 00 08 00 00 00 00 66 03 07 17 23 23 01 81 13   .......f...##...",
          "1989: |   3840: 74 61 62 6c 65 74 31 5f 73 65 67 6d 65 6e 74 73   tablet1_segments",
          "1990: |   3856: 74 31 5f 73 65 67 6d 65 6e 74 73 03 43 52 45 41   t1_segments.CREA",
          "1991: |   3872: 54 45 20 54 41 42 4c 45 20 27 74 31 5f 73 65 67   TE TABLE 't1_seg",
          "1992: |   3888: 6d 65 6e 74 73 27 28 62 6c 6f 63 6b 69 64 20 49   ments'(blockid I",
          "1993: |   3904: 4e 54 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b   NTEGER PRIMARY K",
          "1994: |   3920: 45 59 2c 20 62 6c 6f 63 6b 20 42 4c 4f 42 29 5c   EY, block BLOB).",
          "1995: |   3936: 02 07 17 21 21 01 81 03 74 61 62 6c 65 74 31 5f   ...!!...tablet1_",
          "1996: |   3952: 63 6f 6e 74 65 6e 74 74 31 5f 63 6f 6e 74 65 6e   contentt1_conten",
          "1997: |   3968: 74 02 43 52 45 41 54 45 20 54 41 42 4c 45 20 27   t.CREATE TABLE '",
          "1998: |   3984: 74 31 5f 63 6f 6e 74 65 6e 74 27 28 64 6f 63 69   t1_content'(doci",
          "1999: |   4000: 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d 41 52   d INTEGER PRIMAR",
          "2000: |   4016: 59 20 4b 45 59 2c 20 27 63 30 61 27 29 41 01 06   Y KEY, 'c0a')A..",
          "2001: |   4032: 17 11 11 08 71 74 61 62 6c 65 74 31 74 31 43 52   ....qtablet1t1CR",
          "2002: |   4048: 45 41 54 45 20 56 49 52 54 55 41 4c 20 54 41 42   EATE VIRTUAL TAB",
          "2003: |   4064: 4c 45 20 74 31 20 55 53 49 4e 47 20 66 74 73 34   LE t1 USING fts4",
          "2004: |   4080: 28 61 2c 70 72 65 66 69 78 3d 27 31 2c 32 27 29   (a,prefix='1,2')",
          "2005: | page 2 offset 4096",
          "2006: |      0: 0d 00 00 00 08 0e 1f 00 0f c4 0f 7c 0f 34 0f 07   ...........|.4..",
          "2007: |     16: 0e c3 0e 97 0e 63 0e 1f 00 00 00 00 00 00 00 00   .....c..........",
          "2008: |   3600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 42   ...............B",
          "2009: |   3616: 08 04 00 81 09 73 75 6e 74 20 69 6e 20 63 75 6c   .....sunt in cul",
          "2010: |   3632: 70 61 20 71 75 69 20 6f 66 66 69 63 69 61 20 64   pa qui officia d",
          "2011: |   3648: 65 73 65 72 75 6e 74 20 6d 6f 6c 6c 69 74 20 61   eserunt mollit a",
          "2012: |   3664: 6e 69 6d 20 69 64 20 65 73 74 20 6c 61 62 6f 72   nim id est labor",
          "2013: |   3680: 75 6d 2e 32 07 03 01 6b 45 78 63 65 70 74 65 75   um.2...kExcepteu",
          "2014: |   3696: 72 20 73 69 6e 74 20 6f 63 63 61 65 63 61 74 20   r sint occaecat",
          "2015: |   3712: 63 75 70 69 64 61 74 61 74 20 6e 6f 6e 20 70 72   cupidatat non pr",
          "2016: |   3728: 6f 69 64 65 6e 74 2c 2a 06 03 00 5b 63 69 6c 6c   oident,*...[cill",
          "2017: |   3744: 75 6d 20 64 6f 6c 6f 72 65 20 65 75 20 66 75 67   um dolore eu fug",
          "2018: |   3760: 69 61 74 20 6e 75 6c 6c 61 20 70 61 72 69 61 74   iat nulla pariat",
          "2019: |   3776: 75 72 2e 43 05 04 00 81 09 44 75 69 73 20 61 75   ur.C.....Duis au",
          "2020: |   3792: 74 65 20 69 72 75 72 65 20 64 6f 6c 6f 72 20 69   te irure dolor i",
          "2021: |   3808: 6e 20 72 65 70 72 65 68 65 6e 64 65 72 69 74 20   n reprehenderit",
          "2022: |   3824: 69 6e 20 76 6f 6c 75 70 74 61 74 65 20 76 65 6c   in voluptate vel",
          "2023: |   3840: 69 74 20 65 73 73 65 2b 14 03 00 5d 6e 69 73 69   it esse+...]nisi",
          "2024: |   3856: 20 75 74 20 61 6c 69 71 75 69 70 20 65 78 20 65    ut aliquip ex e",
          "2025: |   3872: 61 20 63 6f 6d 6d 6f 64 6f 20 63 6f 6e 73 65 71   a commodo conseq",
          "2026: |   3888: 75 61 74 2e 46 03 04 00 81 11 55 74 20 65 6e 69   uat.F.....Ut eni",
          "2027: |   3904: 6d 20 61 64 20 6d 69 6e 69 6d 20 76 65 6e 69 61   m ad minim venia",
          "2028: |   3920: 6d 2c 20 71 75 69 73 20 6e 6f 73 74 72 75 64 20   m, quis nostrud",
          "2029: |   3936: 65 78 65 72 63 69 74 61 74 69 6f 6e 20 75 6c 6c   exercitation ull",
          "2030: |   3952: 61 6d 63 6f 20 6c 61 62 6f 72 69 73 46 02 04 00   amco laborisF...",
          "2031: |   3968: 81 11 73 65 64 20 64 6f 20 65 69 75 73 6d 6f 64   ..sed do eiusmod",
          "2032: |   3984: 20 74 65 6d 70 6f 72 20 69 6e 63 69 64 69 64 75    tempor incididu",
          "2033: |   4000: 6e 74 20 75 74 20 6c 61 62 6f 72 65 20 65 74 20   nt ut labore et",
          "2034: |   4016: 64 6f 6c 6f 72 65 20 6d 61 67 6e 61 20 61 6c 69   dolore magna ali",
          "2035: |   4032: 71 75 61 2e 3a 01 03 00 7b 4c 6f 72 65 6d 20 69   qua.:....Lorem i",
          "2036: |   4048: 70 73 75 6d 20 64 6f 6c 6f 72 20 73 69 74 20 61   psum dolor sit a",
          "2037: |   4064: 6d 65 74 2c 20 63 6f 6e 73 65 63 74 65 74 75 72   met, consectetur",
          "2038: |   4080: 20 61 64 69 70 69 73 63 69 6e 67 20 65 6c 69 74    adipiscing elit",
          "2039: | page 3 offset 8192",
          "2040: |      0: 0d 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00   ................",
          "2041: | page 4 offset 12288",
          "2042: |      0: 0d 00 00 00 03 0a a6 00 0d 57 0c 4a 0a a6 00 00   .........W.J....",
          "2043: |   2720: 00 00 00 00 00 00 83 21 03 08 02 08 08 08 17 86   .......!........",
          "2044: |   2736: 30 08 00 30 20 34 30 32 00 02 61 64 06 01 08 00   0..0 402..ad....",
          "2045: |   2752: 02 04 00 01 01 6c 06 02 0c 00 02 04 00 01 01 6d   .....l.........m",
          "2046: |   2768: 03 01 06 00 01 01 6e 03 08 09 00 01 01 75 03 05   ......n......u..",
          "2047: |   2784: 03 00 00 02 63 69 03 06 01 00 01 01 6f 07 01 07   ....ci......o...",
          "2048: |   2800: 00 03 07 03 00 01 01 75 06 07 05 00 01 04 00 00   .......u........",
          "2049: |   2816: 02 64 65 03 08 07 00 01 01 6f 0d 01 04 00 01 03   .de......o......",
          "2050: |   2832: 09 00 03 05 00 01 03 00 01 01 75 03 05 02 00 00   ..........u.....",
          "2051: |   2848: 02 65 61 03 04 06 00 01 01 69 03 02 04 00 01 01   .ea......i......",
          "2052: |   2864: 6c 03 01 09 00 01 01 6e 03 03 03 00 01 01 73 06   l......n......s.",
          "2053: |   2880: 05 0b 00 03 0b 00 01 01 74 03 02 09 00 01 01 75   ........t......u",
          "2054: |   2896: 03 06 04 00 01 01 78 09 03 09 00 01 05 00 03 02   ......x.........",
          "2055: |   2912: 00 00 02 66 75 03 06 05 00 00 02 69 64 03 08 0a   ...fu......id...",
          "2056: |   2928: 00 01 01 6e 0a 02 06 00 03 06 04 00 03 03 00 01   ...n............",
          "2057: |   2944: 01 70 03 01 13 00 01 01 72 03 05 04 00 00 02 6c   .p......r......l",
          "2058: |   2960: 61 09 02 08 00 01 0b 00 05 0c 00 01 01 6f 03 01   a............o..",
          "2059: |   2976: 02 00 00 02 6d 61 03 02 0b 00 01 01 69 03 04 05   ....ma......i...",
          "2060: |   2992: 00 01 01 6f 03 08 08 00 00 02 6e 69 03 04 02 00   ...o......ni....",
          "2061: |   3008: 01 01 6f 06 03 08 00 04 06 00 01 01 75 03 06 06   ..o.........u...",
          "2062: |   3024: 00 00 02 6f 63 03 07 04 00 01 01 66 03 08 06 00   ...oc......f....",
          "2063: |   3040: 00 02 70 61 03 06 07 00 01 01 72 03 07 07 00 00   ..pa......r.....",
          "2064: |   3056: 02 71 75 06 03 07 00 05 05 00 00 02 72 65 03 05   .qu.........re..",
          "2065: |   3072: 07 00 00 02 73 65 03 02 02 00 01 01 69 06 01 05   ....se......i...",
          "2066: |   3088: 00 06 03 00 01 01 75 03 08 02 00 00 02 74 65 03   ......u......te.",
          "2067: |   3104: 03 05 00 00 02 75 6c 03 03 0a 00 01 01 74 09 02   .....ul......t..",
          "2068: |   3120: 07 00 01 02 00 01 03 00 00 02 76 65 06 03 06 00   ..........ve....",
          "2069: |   3136: 02 0a 00 01 01 6f 03 05 09 00 82 0a 02 08 02 08   .....o..........",
          "2070: |   3152: 08 08 17 84 02 04 00 30 20 32 35 31 00 01 61 13   .......0 251..a.",
          "2071: |   3168: 01 06 04 00 01 0c 00 01 04 00 01 04 00 01 03 00   ................",
          "2072: |   3184: 03 09 00 00 01 63 10 01 07 00 03 07 03 00 02 02   .....c..........",
          "2073: |   3200: 00 01 05 00 01 04 00 00 01 64 11 01 04 00 01 03   .........d......",
          "2074: |   3216: 09 00 03 02 05 00 01 03 00 02 07 00 00 01 65 1b   ..............e.",
          "2075: |   3232: 01 09 00 01 04 07 00 01 03 08 00 01 05 03 00 01   ................",
          "2076: |   3248: 0b 00 01 04 00 01 02 00 01 0b 00 00 01 66 03 06   .............f..",
          "2077: |   3264: 05 00 00 01 69 0f 01 03 00 01 06 00 03 04 04 04   ....i...........",
          "2078: |   3280: 00 03 03 09 00 00 01 6c 0c 01 02 00 01 08 00 01   .......l........",
          "2079: |   3296: 0b 00 05 0c 00 00 01 6d 09 02 0b 00 01 05 00 05   .......m........",
          "2080: |   3312: 08 00 00 01 6e 0c 03 08 00 01 02 00 02 06 00 01   ....n...........",
          "2081: |   3328: 06 00 00 01 6f 06 07 04 00 01 06 00 00 01 70 06   ....o.........p.",
          "2082: |   3344: 06 07 00 01 07 00 00 01 71 06 03 07 00 05 05 00   ........q.......",
          "2083: |   3360: 00 01 72 03 05 08 00 00 01 73 0c 01 05 00 01 02   ..r......s......",
          "2084: |   3376: 00 05 03 00 01 02 00 00 01 74 03 02 05 00 00 01   .........t......",
          "2085: |   3392: 75 0a 02 07 00 01 02 0a 00 01 03 00 00 01 76 07   u.............v.",
          "2086: |   3408: 03 06 00 02 09 03 00 85 26 01 08 08 08 08 08 17   ........&.......",
          "2087: |   3424: 8a 3e 30 20 36 36 35 00 02 61 64 03 03 04 00 02   .>0 665..ad.....",
          "2088: |   3440: 08 69 70 69 73 63 69 6e 67 03 01 08 00 01 05 6c   .ipiscing......l",
          "2089: |   3456: 69 71 75 61 03 02 0c 00 05 02 69 70 03 04 04 00   iqua......ip....",
          "2090: |   3472: 01 03 6d 65 74 03 01 06 00 01 03 6e 69 6d 03 08   ..met......nim..",
          "2091: |   3488: 09 00 01 03 75 74 65 03 05 03 00 00 06 63 69 6c   ....ute......cil",
          "2092: |   3504: 6c 75 6d 03 06 02 00 01 06 6f 6d 6d 6f 64 6f 03   lum......ommodo.",
          "2093: |   3520: 04 07 00 02 09 6e 73 65 63 74 65 74 75 72 03 01   .....nsectetur..",
          "2094: |   3536: 07 00 05 04 71 75 61 74 03 04 08 00 01 04 75 6c   ....quat......ul",
          "2095: |   3552: 70 61 03 08 04 00 02 07 70 69 64 61 74 61 74 03   pa......pidatat.",
          "2096: |   3568: 07 05 00 00 08 64 65 73 65 72 75 6e 74 03 08 07   .....deserunt...",
          "2097: |   3584: 00 01 01 6f 03 02 03 00 02 03 6c 6f 72 06 01 04   ...o......lor...",
          "2098: |   3600: 00 04 05 00 05 01 65 06 02 0a 00 04 03 00 01 03   ......e.........",
          "2099: |   3616: 75 69 73 03 05 02 00 00 02 65 61 03 04 06 00 01   uis......ea.....",
          "2100: |   3632: 06 69 75 73 6d 6f 64 03 02 04 00 01 03 6c 69 74   .iusmod......lit",
          "2101: |   3648: 03 01 09 00 01 03 6e 69 6d 03 03 03 00 01 03 73   ......nim......s",
          "2102: |   3664: 73 65 03 05 0b 00 02 01 73 03 08 0b 00 01 01 74   se......s......t",
          "2103: |   3680: 03 02 09 00 01 01 75 03 06 04 00 01 01 78 03 04   ......u......x..",
          "2104: |   3696: 05 00 02 07 63 65 70 74 65 75 72 03 07 02 00 02   ....cepteur.....",
          "2105: |   3712: 0a 65 72 63 69 74 61 74 69 6f 6e 03 03 09 00 00   .ercitation.....",
          "2106: |   3728: 06 66 75 67 69 61 74 03 06 05 00 00 02 69 64 03   .fugiat......id.",
          "2107: |   3744: 08 0a 00 01 01 6e 07 05 06 04 00 03 03 00 02 08   .....n..........",
          "2108: |   3760: 63 69 64 69 64 75 6e 74 03 02 06 00 01 04 70 73   cididunt......ps",
          "2109: |   3776: 75 6d 03 01 03 00 01 04 72 75 72 65 03 05 04 00   um......rure....",
          "2110: |   3792: 00 06 6c 61 62 6f 72 65 03 02 08 00 05 02 69 73   ..labore......is",
          "2111: |   3808: 03 03 0b 00 05 02 75 6d 03 08 0c 00 01 04 6f 72   ......um......or",
          "2112: |   3824: 65 6d 03 01 02 00 00 05 6d 61 67 6e 61 03 02 0b   em......magna...",
          "2113: |   3840: 00 01 04 69 6e 69 6d 03 03 05 00 01 05 6f 6c 6c   ...inim......oll",
          "2114: |   3856: 69 74 03 08 08 00 00 04 6e 69 73 69 03 04 02 00   it......nisi....",
          "2115: |   3872: 01 02 6f 6e 03 07 06 00 02 05 73 74 72 75 64 03   ..on......strud.",
          "2116: |   3888: 03 08 00 01 04 75 6c 6c 61 03 06 06 00 00 08 6f   .....ulla......o",
          "2117: |   3904: 63 63 61 65 63 61 74 03 07 04 00 01 06 66 66 69   ccaecat......ffi",
          "2118: |   3920: 63 69 61 03 08 06 00 00 08 70 61 72 69 61 74 75   cia......pariatu",
          "2119: |   3936: 72 03 06 07 00 01 07 72 6f 69 64 65 6e 74 03 07   r......roident..",
          "2120: |   3952: 07 00 00 03 71 75 69 03 08 05 00 03 01 73 03 03   ....qui......s..",
          "2121: |   3968: 07 00 00 0d 72 65 70 72 65 68 65 6e 64 65 72 69   ....reprehenderi",
          "2122: |   3984: 74 03 05 07 00 00 03 73 65 64 03 02 02 00 01 03   t......sed......",
          "2123: |   4000: 69 6e 74 03 07 03 00 02 01 74 03 01 05 00 01 03   int......t......",
          "2124: |   4016: 75 6e 74 03 08 02 00 00 06 74 65 6d 70 6f 72 03   unt......tempor.",
          "2125: |   4032: 02 05 00 00 07 75 6c 6c 61 6d 63 6f 03 03 0a 00   .....ullamco....",
          "2126: |   4048: 01 01 74 09 02 07 00 01 02 00 01 03 00 00 05 76   ..t............v",
          "2127: |   4064: 65 6c 69 74 03 05 0a 00 02 04 6e 69 61 6d 03 03   elit......niam..",
          "2128: |   4080: 06 00 01 08 6f 6c 75 70 74 61 74 65 03 05 09 00   ....oluptate....",
          "2129: | page 5 offset 16384",
          "2130: |      0: 0a 00 00 00 03 0f eb 00 0f fb 0f f3 0f eb 00 00   ................",
          "2131: |   4064: 00 00 00 00 00 00 00 00 00 00 00 07 04 02 08 01   ................",
          "2132: |   4080: 08 00 03 07 04 02 08 01 04 00 02 04 04 08 08 09   ................",
          "2133: | page 6 offset 20480",
          "2134: |      0: 0d 00 00 00 08 0f d0 00 0f fa 0f f4 0f ee 0f e8   ................",
          "2135: |     16: 0f e2 0f dc 0f d6 0f d0 00 00 00 00 00 00 00 00   ................",
          "2136: |   4048: 04 08 03 00 0e 0b 04 07 03 00 0e 06 04 06 03 00   ................",
          "2137: |   4064: 0e 06 04 05 03 00 0e 0a 04 04 03 00 0e 07 04 03   ................",
          "2138: |   4080: 03 00 0e 0a 04 02 03 00 0e 0b 04 01 03 00 0e 08   ................",
          "2139: | page 7 offset 24576",
          "2140: |      0: 0d 00 00 00 01 0f f7 00 0f f7 00 00 00 00 00 00   ................",
          "2141: |   4080: 00 00 00 00 00 00 00 07 00 03 00 14 08 45 b5 03   .............E..",
          "2142: | end crash-f7b636a855e1d2.db",
          "2143: }]} {}",
          "2145: do_execsql_test 14.1 {",
          "2146:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<10)",
          "2147:     INSERT INTO t1(a) SELECT randomblob(3000) FROM c;",
          "2148: }",
          "2150: do_catchsql_test 14.2 {",
          "2151:   INSERT INTO t1(t1) VALUES('optimize');",
          "2152: } {1 {database disk image is malformed}}",
          "2154: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3b412ac2473707fc7bc4ce29466d7b7dc4988905",
      "candidate_info": {
        "commit_hash": "3b412ac2473707fc7bc4ce29466d7b7dc4988905",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3b412ac2473707fc7bc4ce29466d7b7dc4988905",
        "files": [
          "ext/misc/dbdata.c",
          "manifest",
          "manifest.uuid",
          "test/dbdata.test"
        ],
        "message": "Add the sqlite_dbptr virtual table to the dbdata extension. For querying the links between b-tree pages.\n\nFossilOrigin-Name: 3213a15f2133afbb0a4fec3b8f6e0eeca8c0befafd6658c41074e84f589d5d32",
        "before_after_code_files": [
          "ext/misc/dbdata.c||ext/misc/dbdata.c",
          "manifest.uuid||manifest.uuid",
          "test/dbdata.test||test/dbdata.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/dbdata.c||ext/misc/dbdata.c": [
          "File: ext/misc/dbdata.c -> ext/misc/dbdata.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "87: };",
          "90: struct DbdataTable {",
          "93: };",
          "95: #define DBDATA_COLUMN_PGNO        0",
          "",
          "[Removed Lines]",
          "86:   sqlite3_int64 iRowid;",
          "",
          "[Added Lines]",
          "92:   sqlite3_int64 iRowid;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98: #define DBDATA_COLUMN_VALUE       3",
          "99: #define DBDATA_COLUMN_SCHEMA      4",
          "101: #define DBDATA_SCHEMA             \\",
          "102:       \"CREATE TABLE x(\"           \\",
          "103:       \"  pgno INTEGER,\"           \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115: #define DBPTR_COLUMN_PGNO         0",
          "116: #define DBPTR_COLUMN_CHILD        1",
          "117: #define DBPTR_COLUMN_SCHEMA       2",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "107:       \"  schema TEXT HIDDEN\"      \\",
          "108:       \")\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128: #define DBPTR_SCHEMA              \\",
          "129:       \"CREATE TABLE x(\"           \\",
          "130:       \"  pgno INTEGER,\"           \\",
          "131:       \"  child INTEGER,\"          \\",
          "132:       \"  schema TEXT HIDDEN\"      \\",
          "133:       \")\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "118:   char **pzErr",
          "119: ){",
          "120:   DbdataTable *pTab = 0;",
          "123:   if( rc==SQLITE_OK ){",
          "124:     pTab = (DbdataTable*)sqlite3_malloc64(sizeof(DbdataTable));",
          "",
          "[Removed Lines]",
          "121:   int rc = sqlite3_declare_vtab(db, DBDATA_SCHEMA);",
          "",
          "[Added Lines]",
          "146:   int rc = sqlite3_declare_vtab(db, pAux ? DBPTR_SCHEMA : DBDATA_SCHEMA);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "127:     }else{",
          "128:       memset(pTab, 0, sizeof(DbdataTable));",
          "129:       pTab->db = db;",
          "130:     }",
          "131:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155:       pTab->bPtr = (pAux!=0);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "159: static int dbdataBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){",
          "160:   int i;",
          "161:   int iSchema = -1;",
          "162:   int iPgno = -1;",
          "164:   for(i=0; i<pIdxInfo->nConstraint; i++){",
          "165:     struct sqlite3_index_constraint *p = &pIdxInfo->aConstraint[i];",
          "166:     if( p->op==SQLITE_INDEX_CONSTRAINT_EQ ){",
          "168:         if( p->usable==0 ) return SQLITE_CONSTRAINT;",
          "169:         iSchema = i;",
          "170:       }",
          "",
          "[Removed Lines]",
          "167:       if( p->iColumn==DBDATA_COLUMN_SCHEMA ){",
          "",
          "[Added Lines]",
          "186:   DbdataTable *pTab = (DbdataTable*)tab;",
          "190:   int colSchema = (pTab->bPtr ? DBPTR_COLUMN_SCHEMA : DBDATA_COLUMN_SCHEMA);",
          "195:       if( p->iColumn==colSchema ){",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "210:   pCsr->iPgno = 1;",
          "211:   pCsr->iCell = 0;",
          "212:   pCsr->iField = 0;",
          "213: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "241:   pCsr->bOnePage = 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "283: static int dbdataNext(sqlite3_vtab_cursor *pCursor){",
          "286:   pCsr->iRowid++;",
          "287:   while( 1 ){",
          "288:     int rc;",
          "290:     if( pCsr->aPage==0 ){",
          "291:       rc = dbdataLoadPage(pCsr, pCsr->iPgno, &pCsr->aPage, &pCsr->nPage);",
          "295:     }",
          "320:       }",
          "321:       if( pCsr->iCell>=pCsr->nCell ){",
          "322:         sqlite3_free(pCsr->aPage);",
          "323:         pCsr->aPage = 0;",
          "324:         return SQLITE_OK;",
          "325:       }",
          "360:         }else{",
          "362:         }",
          "387:         }",
          "388:       }",
          "400:     }",
          "410:   }",
          "412:   assert( !\"can't get here\" );",
          "",
          "[Removed Lines]",
          "284:   DbdataCursor *pCsr = (DbdataCursor *)pCursor;",
          "292:       if( rc!=SQLITE_OK ) return rc;",
          "293:       pCsr->iCell = 0;",
          "294:       pCsr->nCell = get_uint16(&pCsr->aPage[pCsr->iPgno==1 ? 103 : 3]);",
          "298:     if( pCsr->pRec==0 ){",
          "299:       int iOff = (pCsr->iPgno==1 ? 100 : 0);",
          "300:       int bHasRowid = 0;",
          "301:       int nPointer = 0;",
          "302:       sqlite3_int64 nPayload = 0;",
          "303:       sqlite3_int64 nHdr = 0;",
          "304:       int iHdr;",
          "305:       int U, X;",
          "306:       int nLocal;",
          "308:       switch( pCsr->aPage[iOff] ){",
          "309:         case 0x02:",
          "310:           nPointer = 4;",
          "311:           break;",
          "312:         case 0x0a:",
          "313:           break;",
          "314:         case 0x0d:",
          "315:           bHasRowid = 1;",
          "316:           break;",
          "317:         default:",
          "318:           pCsr->iCell = pCsr->nCell;",
          "319:           break;",
          "327:       iOff += 8 + nPointer + pCsr->iCell*2;",
          "328:       iOff = get_uint16(&pCsr->aPage[iOff]);",
          "331:       iOff += nPointer;",
          "334:       iOff += dbdataGetVarint(&pCsr->aPage[iOff], &nPayload);",
          "337:       if( bHasRowid ){",
          "338:         iOff += dbdataGetVarint(&pCsr->aPage[iOff], &pCsr->iIntkey);",
          "339:       }",
          "342:       pCsr->pRec = (u8*)sqlite3_malloc64(nPayload);",
          "343:       if( pCsr->pRec==0 ) return SQLITE_NOMEM;",
          "344:       pCsr->nRec = nPayload;",
          "346:       U = pCsr->nPage;",
          "347:       if( bHasRowid ){",
          "348:         X = U-35;",
          "349:       }else{",
          "350:         X = ((U-12)*64/255)-23;",
          "351:       }",
          "352:       if( nPayload<=X ){",
          "353:         nLocal = nPayload;",
          "354:       }else{",
          "355:         int M, K;",
          "356:         M = ((U-12)*32/255)-23;",
          "357:         K = M+((nPayload-M)%(U-4));",
          "358:         if( K<=X ){",
          "359:           nLocal = K;",
          "361:           nLocal = M;",
          "363:       }",
          "366:       memcpy(pCsr->pRec, &pCsr->aPage[iOff], nLocal);",
          "367:       iOff += nLocal;",
          "370:       if( nPayload>nLocal ){",
          "371:         sqlite3_int64 nRem = nPayload - nLocal;",
          "372:         u32 pgnoOvfl = get_uint32(&pCsr->aPage[iOff]);",
          "373:         while( nRem>0 ){",
          "374:           u8 *aOvfl = 0;",
          "375:           int nOvfl = 0;",
          "376:           int nCopy;",
          "377:           rc = dbdataLoadPage(pCsr, pgnoOvfl, &aOvfl, &nOvfl);",
          "378:           assert( rc!=SQLITE_OK || nOvfl==pCsr->nPage );",
          "379:           if( rc!=SQLITE_OK ) return rc;",
          "381:           nCopy = U-4;",
          "382:           if( nCopy>nRem ) nCopy = nRem;",
          "383:           memcpy(&pCsr->pRec[nPayload-nRem], &aOvfl[4], nCopy);",
          "384:           nRem -= nCopy;",
          "386:           sqlite3_free(aOvfl);",
          "391:       pCsr->nField = 0;",
          "392:       iHdr = dbdataGetVarint(pCsr->pRec, &nHdr);",
          "393:       while( iHdr<nHdr ){",
          "394:         sqlite3_int64 iDummy;",
          "395:         iHdr += dbdataGetVarint(&pCsr->pRec[iHdr], &iDummy);",
          "396:         pCsr->nField++;",
          "397:       }",
          "399:       pCsr->iField = (bHasRowid ? -2 : -1);",
          "402:     pCsr->iField++;",
          "403:     if( pCsr->iField<pCsr->nField ) return SQLITE_OK;",
          "407:     sqlite3_free(pCsr->pRec);",
          "408:     pCsr->pRec = 0;",
          "409:     pCsr->iCell++;",
          "",
          "[Added Lines]",
          "313:   DbdataCursor *pCsr = (DbdataCursor*)pCursor;",
          "314:   DbdataTable *pTab = (DbdataTable*)pCursor->pVtab;",
          "319:     int iOff = (pCsr->iPgno==1 ? 100 : 0);",
          "323:       if( rc!=SQLITE_OK || pCsr->aPage==0 ) return rc;",
          "324:       pCsr->iCell = pTab->bPtr ? -2 : 0;",
          "325:       pCsr->nCell = get_uint16(&pCsr->aPage[iOff+3]);",
          "328:     if( pTab->bPtr ){",
          "329:       if( pCsr->aPage[iOff]!=0x02 && pCsr->aPage[iOff]!=0x05 ){",
          "330:         pCsr->iCell = pCsr->nCell;",
          "332:       pCsr->iCell++;",
          "336:         if( pCsr->bOnePage ) return SQLITE_OK;",
          "337:         pCsr->iPgno++;",
          "338:       }else{",
          "341:     }else{",
          "343:       if( pCsr->pRec==0 ){",
          "344:         int bHasRowid = 0;",
          "345:         int nPointer = 0;",
          "346:         sqlite3_int64 nPayload = 0;",
          "347:         sqlite3_int64 nHdr = 0;",
          "348:         int iHdr;",
          "349:         int U, X;",
          "350:         int nLocal;",
          "352:         switch( pCsr->aPage[iOff] ){",
          "353:           case 0x02:",
          "354:             nPointer = 4;",
          "355:             break;",
          "356:           case 0x0a:",
          "357:             break;",
          "358:           case 0x0d:",
          "359:             bHasRowid = 1;",
          "360:             break;",
          "361:           default:",
          "363:             pCsr->iCell = pCsr->nCell;",
          "364:             break;",
          "365:         }",
          "367:         if( pCsr->iCell>=pCsr->nCell ){",
          "368:           sqlite3_free(pCsr->aPage);",
          "369:           pCsr->aPage = 0;",
          "370:           if( pCsr->bOnePage ) return SQLITE_OK;",
          "371:           pCsr->iPgno++;",
          "372:           continue;",
          "373:         }",
          "375:         iOff += 8 + nPointer + pCsr->iCell*2;",
          "376:         iOff = get_uint16(&pCsr->aPage[iOff]);",
          "379:         iOff += nPointer;",
          "382:         iOff += dbdataGetVarint(&pCsr->aPage[iOff], &nPayload);",
          "385:         if( bHasRowid ){",
          "386:           iOff += dbdataGetVarint(&pCsr->aPage[iOff], &pCsr->iIntkey);",
          "387:         }",
          "390:         pCsr->pRec = (u8*)sqlite3_malloc64(nPayload);",
          "391:         if( pCsr->pRec==0 ) return SQLITE_NOMEM;",
          "392:         pCsr->nRec = nPayload;",
          "394:         U = pCsr->nPage;",
          "395:         if( bHasRowid ){",
          "396:           X = U-35;",
          "398:           X = ((U-12)*64/255)-23;",
          "400:         if( nPayload<=X ){",
          "401:           nLocal = nPayload;",
          "402:         }else{",
          "403:           int M, K;",
          "404:           M = ((U-12)*32/255)-23;",
          "405:           K = M+((nPayload-M)%(U-4));",
          "406:           if( K<=X ){",
          "407:             nLocal = K;",
          "408:           }else{",
          "409:             nLocal = M;",
          "410:           }",
          "414:         memcpy(pCsr->pRec, &pCsr->aPage[iOff], nLocal);",
          "415:         iOff += nLocal;",
          "418:         if( nPayload>nLocal ){",
          "419:           sqlite3_int64 nRem = nPayload - nLocal;",
          "420:           u32 pgnoOvfl = get_uint32(&pCsr->aPage[iOff]);",
          "421:           while( nRem>0 ){",
          "422:             u8 *aOvfl = 0;",
          "423:             int nOvfl = 0;",
          "424:             int nCopy;",
          "425:             rc = dbdataLoadPage(pCsr, pgnoOvfl, &aOvfl, &nOvfl);",
          "426:             assert( rc!=SQLITE_OK || nOvfl==pCsr->nPage );",
          "427:             if( rc!=SQLITE_OK ) return rc;",
          "429:             nCopy = U-4;",
          "430:             if( nCopy>nRem ) nCopy = nRem;",
          "431:             memcpy(&pCsr->pRec[nPayload-nRem], &aOvfl[4], nCopy);",
          "432:             nRem -= nCopy;",
          "434:             sqlite3_free(aOvfl);",
          "435:           }",
          "436:         }",
          "439:         pCsr->nField = 0;",
          "440:         iHdr = dbdataGetVarint(pCsr->pRec, &nHdr);",
          "441:         while( iHdr<nHdr ){",
          "442:           sqlite3_int64 iDummy;",
          "443:           iHdr += dbdataGetVarint(&pCsr->pRec[iHdr], &iDummy);",
          "444:           pCsr->nField++;",
          "445:         }",
          "447:         pCsr->iField = (bHasRowid ? -2 : -1);",
          "450:       pCsr->iField++;",
          "451:       if( pCsr->iField<pCsr->nField ) return SQLITE_OK;",
          "455:       sqlite3_free(pCsr->pRec);",
          "456:       pCsr->pRec = 0;",
          "457:       pCsr->iCell++;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "440:   }",
          "441:   if( idxNum & 0x02 ){",
          "442:     pCsr->iPgno = sqlite3_value_int(argv[(idxNum & 0x01)]);",
          "443:   }",
          "445:   rc = sqlite3_prepare_v2(pTab->db,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "492:     pCsr->bOnePage = 1;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "533:   int i",
          "534: ){",
          "535:   DbdataCursor *pCsr = (DbdataCursor*)pCursor;",
          "558:         }",
          "562:       }",
          "564:     }",
          "565:   }",
          "566:   return SQLITE_OK;",
          "",
          "[Removed Lines]",
          "536:   switch( i ){",
          "537:     case DBDATA_COLUMN_PGNO:",
          "538:       sqlite3_result_int64(ctx, pCsr->iPgno);",
          "539:       break;",
          "540:     case DBDATA_COLUMN_CELL:",
          "541:       sqlite3_result_int(ctx, pCsr->iCell);",
          "542:       break;",
          "543:     case DBDATA_COLUMN_FIELD:",
          "544:       sqlite3_result_int(ctx, pCsr->iField);",
          "545:       break;",
          "546:     case DBDATA_COLUMN_VALUE: {",
          "547:       if( pCsr->iField<0 ){",
          "548:         sqlite3_result_int64(ctx, pCsr->iIntkey);",
          "549:       }else{",
          "550:         int iHdr;",
          "551:         sqlite3_int64 iType;",
          "552:         sqlite3_int64 iOff;",
          "553:         int i;",
          "554:         iHdr = dbdataGetVarint(pCsr->pRec, &iOff);",
          "555:         for(i=0; i<pCsr->iField; i++){",
          "556:           iHdr += dbdataGetVarint(&pCsr->pRec[iHdr], &iType);",
          "557:           iOff += dbdataValueBytes(iType);",
          "559:         dbdataGetVarint(&pCsr->pRec[iHdr], &iType);",
          "561:         dbdataValue(ctx, iType, &pCsr->pRec[iOff]);",
          "563:       break;",
          "",
          "[Added Lines]",
          "586:   DbdataTable *pTab = (DbdataTable*)pCursor->pVtab;",
          "587:   if( pTab->bPtr ){",
          "588:     switch( i ){",
          "589:       case DBPTR_COLUMN_PGNO:",
          "590:         sqlite3_result_int64(ctx, pCsr->iPgno);",
          "591:         break;",
          "592:       case DBPTR_COLUMN_CHILD: {",
          "593:         int iOff = pCsr->iPgno==1 ? 100 : 0;",
          "594:         if( pCsr->iCell<0 ){",
          "595:           iOff += 8;",
          "596:         }else{",
          "597:           iOff += 12 + pCsr->iCell*2;",
          "598:           iOff = get_uint16(&pCsr->aPage[iOff]);",
          "600:         sqlite3_result_int64(ctx, get_uint32(&pCsr->aPage[iOff]));",
          "601:         break;",
          "602:       }",
          "603:     }",
          "604:   }else{",
          "605:     switch( i ){",
          "606:       case DBDATA_COLUMN_PGNO:",
          "607:         sqlite3_result_int64(ctx, pCsr->iPgno);",
          "608:         break;",
          "609:       case DBDATA_COLUMN_CELL:",
          "610:         sqlite3_result_int(ctx, pCsr->iCell);",
          "611:         break;",
          "612:       case DBDATA_COLUMN_FIELD:",
          "613:         sqlite3_result_int(ctx, pCsr->iField);",
          "614:         break;",
          "615:       case DBDATA_COLUMN_VALUE: {",
          "616:         if( pCsr->iField<0 ){",
          "617:           sqlite3_result_int64(ctx, pCsr->iIntkey);",
          "618:         }else{",
          "619:           int iHdr;",
          "620:           sqlite3_int64 iType;",
          "621:           sqlite3_int64 iOff;",
          "622:           int i;",
          "623:           iHdr = dbdataGetVarint(pCsr->pRec, &iOff);",
          "624:           for(i=0; i<pCsr->iField; i++){",
          "625:             iHdr += dbdataGetVarint(&pCsr->pRec[iHdr], &iType);",
          "626:             iOff += dbdataValueBytes(iType);",
          "627:           }",
          "628:           dbdataGetVarint(&pCsr->pRec[iHdr], &iType);",
          "630:           dbdataValue(ctx, iType, &pCsr->pRec[iOff]);",
          "631:         }",
          "632:         break;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "606:   };",
          "608: }",
          "610: #ifdef _WIN32",
          "",
          "[Removed Lines]",
          "607:   return sqlite3_create_module(db, \"sqlite_dbdata\", &dbdata_module, 0);",
          "",
          "[Added Lines]",
          "678:   int rc = sqlite3_create_module(db, \"sqlite_dbdata\", &dbdata_module, 0);",
          "679:   if( rc==SQLITE_OK ){",
          "680:     rc = sqlite3_create_module(db, \"sqlite_dbptr\", &dbdata_module, (void*)1);",
          "681:   }",
          "682:   return rc;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a3ab58832935e1399ecc7e4d8daefa3a6afa6b301792ce7176bc5d7c173510fb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/dbdata.test||test/dbdata.test": [
          "File: test/dbdata.test -> test/dbdata.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:   2 1  1 'ten'",
          "44: }",
          "47: do_execsql_test 1.2 {",
          "48:   INSERT INTO t1 VALUES(NULL, $big);",
          "49:   SELECT value FROM sqlite_dbdata WHERE pgno=2 AND cell=2 AND field=1;",
          "50: } $big",
          "54: finish_test",
          "",
          "[Removed Lines]",
          "46: set big [string repeat big 2000]",
          "",
          "[Added Lines]",
          "46: breakpoint",
          "48:   SELECT pgno, cell, field, quote(value) FROM sqlite_dbdata;",
          "49: } {",
          "50:   1 0 -1 1",
          "51:   1 0 0 'table'",
          "52:   1 0 1 'T1'",
          "53:   1 0 2 'T1'",
          "54:   1 0 3 2",
          "55:   1 0 4 {'CREATE TABLE T1(a, b)'}",
          "56:   2 0 -1 5",
          "57:   2 0  0 'v'",
          "58:   2 0  1 'five'",
          "59:   2 1 -1 10",
          "60:   2 1  0 'x'",
          "61:   2 1  1 'ten'",
          "62: }",
          "64: set big [string repeat big 2000]",
          "65: do_execsql_test 1.3 {",
          "70: #-------------------------------------------------------------------------",
          "71: reset_db",
          "72: db enable_load_extension 1",
          "73: db eval { SELECT load_extension('../dbdata') }",
          "75: do_execsql_test 2.0 {",
          "76:   CREATE TABLE t1(a);",
          "77:   CREATE INDEX i1 ON t1(a);",
          "78:   WITH s(i) AS (",
          "79:     SELECT 1 UNION ALL SELECT i+1 FROM s WHERE i<10",
          "80:   )",
          "81:   INSERT INTO t1 SELECT randomblob(900) FROM s;",
          "82: }",
          "84: do_execsql_test 2.1 {",
          "85:   SELECT * FROM sqlite_dbptr WHERE pgno=2;",
          "86: } {",
          "87:   2 25   2 6   2 7   2 9   2 11   2 13   2 15   2 17   2 19   2 21",
          "88: }",
          "90: do_execsql_test 2.2 {",
          "91:   SELECT * FROM sqlite_dbptr WHERE pgno=3;",
          "92: } {",
          "93:   3 24   3 23",
          "94: }",
          "96: do_execsql_test 2.3 {",
          "97:   SELECT * FROM sqlite_dbptr",
          "98: } {",
          "99:   2 25   2 6   2 7   2 9   2 11   2 13   2 15   2 17   2 19   2 21",
          "100:   3 24   3 23",
          "101: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "87c3ad453781bbfbce6b78e1216a92d1687bddc1",
      "candidate_info": {
        "commit_hash": "87c3ad453781bbfbce6b78e1216a92d1687bddc1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/87c3ad453781bbfbce6b78e1216a92d1687bddc1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Enhance the btree search routine so that it does early detection of impossibly large keys and thereby avoids a large malloc() call.\n\nFossilOrigin-Name: 3ecaaee69f49e43d38047b7d53b82689eba7f7d33541fcac3c32b6dc8a568458",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 505ed9a47825240979338a24044559613fbbd2a7850bdff70c7164da054ec63d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5479:             rc = SQLITE_CORRUPT_PAGE(pPage);",
          "5480:             goto moveto_finish;",
          "5481:           }",
          "",
          "[Removed Lines]",
          "5478:           if( nCell<2 ){",
          "",
          "[Added Lines]",
          "5478:           if( nCell<2 || nCell/pCur->pBt->usableSize>pCur->pBt->nPage ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "99778c4b211b78134152b38ee1798c54b5c268a8",
      "candidate_info": {
        "commit_hash": "99778c4b211b78134152b38ee1798c54b5c268a8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/99778c4b211b78134152b38ee1798c54b5c268a8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in"
        ],
        "message": "Improvements to the documentation for the xAccess method of the VFS. Ticket [5e0423b058fa5adf]\n\nFossilOrigin-Name: 7078d77effc296c63c91ec032c866e2b320f081d58e57e9e83cc58373169bda3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c0c90961b4fa1c1185772d04fe1915bc1a1af27ed8ddb8db1c524bf90d68ccbf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ]
      }
    }
  ]
}