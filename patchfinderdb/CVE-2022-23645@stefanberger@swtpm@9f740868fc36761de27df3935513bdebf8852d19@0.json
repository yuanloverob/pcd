{
  "cve_id": "CVE-2022-23645",
  "cve_desc": "swtpm is a libtpms-based TPM emulator with socket, character device, and Linux CUSE interface. Versions prior to 0.5.3, 0.6.2, and 0.7.1 are vulnerable to out-of-bounds read. A specially crafted header of swtpm's state, where the blobheader's hdrsize indicator has an invalid value, may cause an out-of-bounds access when the byte array representing the state of the TPM is accessed. This will likely crash swtpm or prevent it from starting since the state cannot be understood. Users should upgrade to swtpm v0.5.3, v0.6.2, or v0.7.1 to receive a patch. There are currently no known workarounds.",
  "repo": "stefanberger/swtpm",
  "patch_hash": "9f740868fc36761de27df3935513bdebf8852d19",
  "patch_info": {
    "commit_hash": "9f740868fc36761de27df3935513bdebf8852d19",
    "repo": "stefanberger/swtpm",
    "commit_url": "https://github.com/stefanberger/swtpm/commit/9f740868fc36761de27df3935513bdebf8852d19",
    "files": [
      "src/swtpm/swtpm_nvstore.c"
    ],
    "message": "swtpm: Check header size indicator against expected size (CID 375869)\n\nThis fix addresses Coverity issue CID 375869.\n\nCheck the header size indicated in the header of the state against the\nexpected size and return an error code in case the header size indicator\nis different. There was only one header size so far since blobheader was\nintroduced, so we don't need to deal with different sizes.\n\nWithout this fix a specially craft header could have cause out-of-bounds\naccesses on the byte array containing the swtpm's state.\n\nSigned-off-by: Stefan Berger <stefanb@linux.ibm.com>",
    "before_after_code_files": [
      "src/swtpm/swtpm_nvstore.c||src/swtpm/swtpm_nvstore.c"
    ]
  },
  "patch_diff": {
    "src/swtpm/swtpm_nvstore.c||src/swtpm/swtpm_nvstore.c": [
      "File: src/swtpm/swtpm_nvstore.c -> src/swtpm/swtpm_nvstore.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1075:                         uint8_t *hdrversion, bool quiet)",
      "1076: {",
      "1077:     blobheader *bh = (blobheader *)data;",
      "1079:     if (length < sizeof(bh)) {",
      "1080:         if (!quiet)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1078:     uint16_t hdrsize;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1100:         return TPM_BAD_VERSION;",
      "1101:     }",
      "1107:     return TPM_SUCCESS;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1104:     hdrsize = ntohs(bh->hdrsize);",
      "1105:     if (hdrsize != sizeof(blobheader)) {",
      "1106:         logprintf(STDERR_FILENO,",
      "1107:                   \"bad header size: %u != %zu\\n\",",
      "1108:                   hdrsize, sizeof(blobheader));",
      "1109:         return TPM_BAD_DATASIZE;",
      "1110:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fbbb56b52b4ee36c9492ef896cb670c013056256",
      "candidate_info": {
        "commit_hash": "fbbb56b52b4ee36c9492ef896cb670c013056256",
        "repo": "stefanberger/swtpm",
        "commit_url": "https://github.com/stefanberger/swtpm/commit/fbbb56b52b4ee36c9492ef896cb670c013056256",
        "files": [
          "src/swtpm_setup/swtpm.c"
        ],
        "message": "swtpm_setup: Free string array in case of failure\n\nFree the allocated string array in case of failure.\n\nExisting callers auto-free the array already, so there's no memory leak,\nbut it is better to free it in the function where it is allocated.\n\nSigned-off-by: Stefan Berger <stefanb@linux.ibm.com>",
        "before_after_code_files": [
          "src/swtpm_setup/swtpm.c||src/swtpm_setup/swtpm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/stefanberger/swtpm/pull/649"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/swtpm_setup/swtpm.c||src/swtpm_setup/swtpm.c": [
          "File: src/swtpm_setup/swtpm.c -> src/swtpm_setup/swtpm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "542: err_too_short:",
          "543:     logerr(self->logfile, \"Response from TPM2_GetCapability is too short!\\n\");",
          "544:     return 1;",
          "545: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "547:     g_strfreev(*all_pcr_banks);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "49b4b305006465af3e78954aa798c41f795db54a",
      "candidate_info": {
        "commit_hash": "49b4b305006465af3e78954aa798c41f795db54a",
        "repo": "stefanberger/swtpm",
        "commit_url": "https://github.com/stefanberger/swtpm/commit/49b4b305006465af3e78954aa798c41f795db54a",
        "files": [
          "src/swtpm_setup/swtpm.c"
        ],
        "message": "swtpm: Cast constant to uint64_t before shifting (CID 375870)\n\nCast the '1' to uint64_t as suggested by Coverity (CID 375870).\nSince 'j' is always less than '32', the previous code was correct as\nwell.\n\nSigned-off-by: Stefan Berger <stefanb@linux.ibm.com>",
        "before_after_code_files": [
          "src/swtpm_setup/swtpm.c||src/swtpm_setup/swtpm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/stefanberger/swtpm/pull/649"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/swtpm_setup/swtpm.c||src/swtpm_setup/swtpm.c": [
          "File: src/swtpm_setup/swtpm.c -> src/swtpm_setup/swtpm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "584:             }",
          "585:             pcrselects_len += len;",
          "586:             count++;",
          "588:         }",
          "589:     }",
          "",
          "[Removed Lines]",
          "587:             activated_mask |= (1 << j);",
          "",
          "[Added Lines]",
          "587:             activated_mask |= ((uint64_t)1 << j);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "48773fe3eabb60a53bb121c34177244da7299fa5",
      "candidate_info": {
        "commit_hash": "48773fe3eabb60a53bb121c34177244da7299fa5",
        "repo": "stefanberger/swtpm",
        "commit_url": "https://github.com/stefanberger/swtpm/commit/48773fe3eabb60a53bb121c34177244da7299fa5",
        "files": [
          "src/swtpm_setup/swtpm.c"
        ],
        "message": "swtpm_setup: Check for unreasonable number of PCR banks (CID 370783)\n\nThis fix addresses Coverity issue CID 370783.\n\nCheck for an unreasonable number of PCR banks returned from command sent\nto swtpm. Limit the number of PCR banks that can be returned to '20',\nwhich is more than enough.\n\nPreviously we may not have sanitized the variable correctly but safeguards\nwere in place:\n\nEven if the 16 bit variable count was the maximum possible (0xffff) we\nshould be able to allocate the all_pcr_banks array of string pointers.\n\nSafeguards to not overstep the parsed array are in place in the loop\nthat's entered afterwards where the count variable serves as a limit\nfor the loop.\n\nSigned-off-by: Stefan Berger <stefanb@linux.ibm.com>",
        "before_after_code_files": [
          "src/swtpm_setup/swtpm.c||src/swtpm_setup/swtpm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/stefanberger/swtpm/pull/649"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/swtpm_setup/swtpm.c||src/swtpm_setup/swtpm.c": [
          "File: src/swtpm_setup/swtpm.c -> src/swtpm_setup/swtpm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "513:     memcpy(&count, &tpmresp[17], sizeof(count));",
          "514:     count = be16toh(count);",
          "518:     offset = 19;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "517:     if (count > 20)",
          "518:         goto err_num_pcrbanks;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "541:     }",
          "542:     return 0;",
          "544: err_too_short:",
          "545:     logerr(self->logfile, \"Response from TPM2_GetCapability is too short!\\n\");",
          "547:     g_strfreev(*all_pcr_banks);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "548: err_num_pcrbanks:",
          "549:     logerr(self->logfile, \"Unreasonable number of PCR banks (%u) returned.\\n\", count);",
          "550:     goto err_exit;",
          "555: err_exit:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b36664bfb8a792a7dd6baa253c3adbcf10dc6995",
      "candidate_info": {
        "commit_hash": "b36664bfb8a792a7dd6baa253c3adbcf10dc6995",
        "repo": "stefanberger/swtpm",
        "commit_url": "https://github.com/stefanberger/swtpm/commit/b36664bfb8a792a7dd6baa253c3adbcf10dc6995",
        "files": [
          "src/swtpm/swtpm_nvstore.c"
        ],
        "message": "swtpm: Check header size indicator against expected size (CID 375869)\n\nThis fix addresses Coverity issue CID 375869.\n\nCheck the header size indicated in the header of the state against the\nexpected size and return an error code in case the header size indicator\nis different. There was only one header size so far since blobheader was\nintroduced, so we don't need to deal with different sizes.\n\nWithout this fix a specially crafted header could cause out-of-bounds\naccesses on the byte array containing the swtpm's state.\n\nSigned-off-by: Stefan Berger <stefanb@linux.ibm.com>",
        "before_after_code_files": [
          "src/swtpm/swtpm_nvstore.c||src/swtpm/swtpm_nvstore.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/swtpm/swtpm_nvstore.c||src/swtpm/swtpm_nvstore.c"
          ],
          "candidate": [
            "src/swtpm/swtpm_nvstore.c||src/swtpm/swtpm_nvstore.c"
          ]
        }
      },
      "candidate_diff": {
        "src/swtpm/swtpm_nvstore.c||src/swtpm/swtpm_nvstore.c": [
          "File: src/swtpm/swtpm_nvstore.c -> src/swtpm/swtpm_nvstore.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1075:                         uint8_t *hdrversion, bool quiet)",
          "1076: {",
          "1077:     blobheader *bh = (blobheader *)data;",
          "1079:     if (length < sizeof(bh)) {",
          "1080:         if (!quiet)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1078:     uint16_t hdrsize;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1100:         return TPM_BAD_VERSION;",
          "1101:     }",
          "1107:     return TPM_SUCCESS;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1104:     hdrsize = ntohs(bh->hdrsize);",
          "1105:     if (hdrsize != sizeof(blobheader)) {",
          "1106:         logprintf(STDERR_FILENO,",
          "1107:                   \"bad header size: %u != %zu\\n\",",
          "1108:                   hdrsize, sizeof(blobheader));",
          "1109:         return TPM_BAD_DATASIZE;",
          "1110:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0f75b4baf272fd08e39d636e6c1f37585d752e1e",
      "candidate_info": {
        "commit_hash": "0f75b4baf272fd08e39d636e6c1f37585d752e1e",
        "repo": "stefanberger/swtpm",
        "commit_url": "https://github.com/stefanberger/swtpm/commit/0f75b4baf272fd08e39d636e6c1f37585d752e1e",
        "files": [
          "src/swtpm/swtpm_nvfile.c"
        ],
        "message": "swtpm: Check header size indicator against expected size (CID 375869)\n\nThis fix addresses Coverity issue CID 375869.\n\nCheck the header size indicated in the header of the state against the\nexpected size and return an error code in case the header size indicator\nis different. There was only one header size so far since blobheader was\nintroduced, so we don't need to deal with different sizes.\n\nWithout this fix a specially crafted header could cause out-of-bounds\naccesses on the byte array containing the swtpm's state.\n\nSigned-off-by: Stefan Berger <stefanb@linux.ibm.com>",
        "before_after_code_files": [
          "src/swtpm/swtpm_nvfile.c||src/swtpm/swtpm_nvfile.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/swtpm/swtpm_nvfile.c||src/swtpm/swtpm_nvfile.c": [
          "File: src/swtpm/swtpm_nvfile.c -> src/swtpm/swtpm_nvfile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1266:                         uint8_t *hdrversion, bool quiet)",
          "1267: {",
          "1268:     blobheader *bh = (blobheader *)data;",
          "1270:     if (length < sizeof(bh)) {",
          "1271:         if (!quiet)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1269:     uint16_t hdrsize;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1291:         return TPM_BAD_VERSION;",
          "1292:     }",
          "1298:     return TPM_SUCCESS;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1295:     hdrsize = ntohs(bh->hdrsize);",
          "1296:     if (hdrsize != sizeof(blobheader)) {",
          "1297:         logprintf(STDERR_FILENO,",
          "1298:                   \"bad header size: %u != %zu\\n\",",
          "1299:                   hdrsize, sizeof(blobheader));",
          "1300:         return TPM_BAD_DATASIZE;",
          "1301:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}