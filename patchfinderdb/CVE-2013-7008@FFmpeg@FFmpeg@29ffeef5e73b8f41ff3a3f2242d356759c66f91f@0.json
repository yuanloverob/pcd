{
  "cve_id": "CVE-2013-7008",
  "cve_desc": "The decode_slice_header function in libavcodec/h264.c in FFmpeg before 2.1 incorrectly relies on a certain droppable field, which allows remote attackers to cause a denial of service (deadlock) or possibly have unspecified other impact via crafted H.264 data.",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "29ffeef5e73b8f41ff3a3f2242d356759c66f91f",
  "patch_info": {
    "commit_hash": "29ffeef5e73b8f41ff3a3f2242d356759c66f91f",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/29ffeef5e73b8f41ff3a3f2242d356759c66f91f",
    "files": [
      "libavcodec/h264.c"
    ],
    "message": "avcodec/h264: do not trust last_pic_droppable when marking pictures as done\n\nThis simplifies the code and fixes a deadlock\n\nFixes Ticket2927\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
    "before_after_code_files": [
      "libavcodec/h264.c||libavcodec/h264.c"
    ]
  },
  "patch_diff": {
    "libavcodec/h264.c||libavcodec/h264.c": [
      "File: libavcodec/h264.c -> libavcodec/h264.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3621:             assert(h0->cur_pic_ptr->reference != DELAYED_PIC_REF);",
      "3625:                 ff_thread_report_progress(&h0->cur_pic_ptr->tf, INT_MAX,",
      "3626:                                           last_pic_structure == PICT_BOTTOM_FIELD);",
      "3627:             }",
      "",
      "[Removed Lines]",
      "3624:             if (!last_pic_droppable && h0->cur_pic_ptr->tf.owner == h0->avctx) {",
      "",
      "[Added Lines]",
      "3624:             if (h0->cur_pic_ptr->tf.owner == h0->avctx) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3630:             if (!FIELD_PICTURE(h) || h->picture_structure == last_pic_structure) {",
      "3634:                     ff_thread_report_progress(&h0->cur_pic_ptr->tf, INT_MAX,",
      "3635:                                               last_pic_structure == PICT_TOP_FIELD);",
      "3636:                 }",
      "",
      "[Removed Lines]",
      "3633:                 if (!last_pic_droppable && last_pic_structure != PICT_FRAME) {",
      "",
      "[Added Lines]",
      "3633:                 if (last_pic_structure != PICT_FRAME) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3644:                         ff_thread_report_progress(&h0->cur_pic_ptr->tf, INT_MAX,",
      "3645:                                                   last_pic_structure == PICT_TOP_FIELD);",
      "3646:                     }",
      "",
      "[Removed Lines]",
      "3643:                     if (!last_pic_droppable && last_pic_structure != PICT_FRAME) {",
      "",
      "[Added Lines]",
      "3643:                     if (last_pic_structure != PICT_FRAME) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a8b6721bedce381c855728e98f409ef5dabef304",
      "candidate_info": {
        "commit_hash": "a8b6721bedce381c855728e98f409ef5dabef304",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/a8b6721bedce381c855728e98f409ef5dabef304",
        "files": [
          "libavcodec/h264.c"
        ],
        "message": "avcodec/h264: do not trust last_pic_droppable when marking pictures as done\n\nThis simplifies the code and fixes a deadlock\n\nFixes Ticket2927\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\n(cherry picked from commit 29ffeef5e73b8f41ff3a3f2242d356759c66f91f)\n\nConflicts:\n\tlibavcodec/h264.c",
        "before_after_code_files": [
          "libavcodec/h264.c||libavcodec/h264.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/h264.c||libavcodec/h264.c"
          ],
          "candidate": [
            "libavcodec/h264.c||libavcodec/h264.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/h264.c||libavcodec/h264.c": [
          "File: libavcodec/h264.c -> libavcodec/h264.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3364:             assert(h0->cur_pic_ptr->f.reference != DELAYED_PIC_REF);",
          "3368:                 ff_thread_report_progress(&h0->cur_pic_ptr->f, INT_MAX,",
          "3369:                                           last_pic_structure == PICT_BOTTOM_FIELD);",
          "3370:             }",
          "",
          "[Removed Lines]",
          "3367:             if (!last_pic_droppable && h0->cur_pic_ptr->owner2 == h0) {",
          "",
          "[Added Lines]",
          "3367:             if (h0->cur_pic_ptr->owner2 == h0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3373:             if (!FIELD_PICTURE || h->picture_structure == last_pic_structure) {",
          "3377:                     ff_thread_report_progress(&h0->cur_pic_ptr->f, INT_MAX,",
          "3378:                                               last_pic_structure == PICT_TOP_FIELD);",
          "3379:                 }",
          "",
          "[Removed Lines]",
          "3376:                 if (!last_pic_droppable && last_pic_structure != PICT_FRAME) {",
          "",
          "[Added Lines]",
          "3376:                 if (last_pic_structure != PICT_FRAME) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3387:                         ff_thread_report_progress(&h0->cur_pic_ptr->f, INT_MAX,",
          "3388:                                                   last_pic_structure == PICT_TOP_FIELD);",
          "3389:                     }",
          "",
          "[Removed Lines]",
          "3386:                     if (!last_pic_droppable && last_pic_structure != PICT_FRAME) {",
          "",
          "[Added Lines]",
          "3386:                     if (last_pic_structure != PICT_FRAME) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cd7d575e90ceada5a9914d029124388d4993cc9e",
      "candidate_info": {
        "commit_hash": "cd7d575e90ceada5a9914d029124388d4993cc9e",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/cd7d575e90ceada5a9914d029124388d4993cc9e",
        "files": [
          "libavcodec/h264.c"
        ],
        "message": "avcodec/h264: do not trust last_pic_droppable when marking pictures as done\n\nThis simplifies the code and fixes a deadlock\n\nFixes Ticket2927\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\n(cherry picked from commit 29ffeef5e73b8f41ff3a3f2242d356759c66f91f)",
        "before_after_code_files": [
          "libavcodec/h264.c||libavcodec/h264.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/h264.c||libavcodec/h264.c"
          ],
          "candidate": [
            "libavcodec/h264.c||libavcodec/h264.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/h264.c||libavcodec/h264.c": [
          "File: libavcodec/h264.c -> libavcodec/h264.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3461:             assert(h0->cur_pic_ptr->reference != DELAYED_PIC_REF);",
          "3465:                 ff_thread_report_progress(&h0->cur_pic_ptr->tf, INT_MAX,",
          "3466:                                           last_pic_structure == PICT_BOTTOM_FIELD);",
          "3467:             }",
          "",
          "[Removed Lines]",
          "3464:             if (!last_pic_droppable && h0->cur_pic_ptr->tf.owner == h0->avctx) {",
          "",
          "[Added Lines]",
          "3464:             if (h0->cur_pic_ptr->tf.owner == h0->avctx) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3470:             if (!FIELD_PICTURE(h) || h->picture_structure == last_pic_structure) {",
          "3474:                     ff_thread_report_progress(&h0->cur_pic_ptr->tf, INT_MAX,",
          "3475:                                               last_pic_structure == PICT_TOP_FIELD);",
          "3476:                 }",
          "",
          "[Removed Lines]",
          "3473:                 if (!last_pic_droppable && last_pic_structure != PICT_FRAME) {",
          "",
          "[Added Lines]",
          "3473:                 if (last_pic_structure != PICT_FRAME) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3484:                         ff_thread_report_progress(&h0->cur_pic_ptr->tf, INT_MAX,",
          "3485:                                                   last_pic_structure == PICT_TOP_FIELD);",
          "3486:                     }",
          "",
          "[Removed Lines]",
          "3483:                     if (!last_pic_droppable && last_pic_structure != PICT_FRAME) {",
          "",
          "[Added Lines]",
          "3483:                     if (last_pic_structure != PICT_FRAME) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a4b705b4cbb57c1cc32d6e368e0176510ef3c2e3",
      "candidate_info": {
        "commit_hash": "a4b705b4cbb57c1cc32d6e368e0176510ef3c2e3",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/a4b705b4cbb57c1cc32d6e368e0176510ef3c2e3",
        "files": [
          "libavcodec/h264.c"
        ],
        "message": "avcodec/h264: do not trust last_pic_droppable when marking pictures as done\n\nThis simplifies the code and fixes a deadlock\n\nFixes Ticket2927\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\n(cherry picked from commit 29ffeef5e73b8f41ff3a3f2242d356759c66f91f)\n\nConflicts:\n\tlibavcodec/h264.c",
        "before_after_code_files": [
          "libavcodec/h264.c||libavcodec/h264.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/h264.c||libavcodec/h264.c"
          ],
          "candidate": [
            "libavcodec/h264.c||libavcodec/h264.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/h264.c||libavcodec/h264.c": [
          "File: libavcodec/h264.c -> libavcodec/h264.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2920:             assert(s0->current_picture_ptr->f.reference != DELAYED_PIC_REF);",
          "2924:                 ff_thread_report_progress(&s0->current_picture_ptr->f, INT_MAX,",
          "2925:                                           last_pic_structure == PICT_BOTTOM_FIELD);",
          "2926:             }",
          "",
          "[Removed Lines]",
          "2923:             if (!last_pic_droppable && s0->current_picture_ptr->owner2 == s0) {",
          "",
          "[Added Lines]",
          "2923:             if (s0->current_picture_ptr->owner2 == s0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2929:             if (!FIELD_PICTURE || s->picture_structure == last_pic_structure) {",
          "2933:                     ff_thread_report_progress(&s0->current_picture_ptr->f, INT_MAX,",
          "2934:                                               last_pic_structure == PICT_TOP_FIELD);",
          "2935:                 }",
          "",
          "[Removed Lines]",
          "2932:                 if (!last_pic_droppable && last_pic_structure != PICT_FRAME) {",
          "",
          "[Added Lines]",
          "2932:                 if (last_pic_structure != PICT_FRAME) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2943:                         ff_thread_report_progress(&s0->current_picture_ptr->f, INT_MAX,",
          "2944:                                                   last_pic_structure == PICT_TOP_FIELD);",
          "2945:                     }",
          "",
          "[Removed Lines]",
          "2942:                     if (!last_pic_droppable && last_pic_structure != PICT_FRAME) {",
          "",
          "[Added Lines]",
          "2942:                     if (last_pic_structure != PICT_FRAME) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ba0c8981200df2ac828df3db981a8181b0793e5b",
      "candidate_info": {
        "commit_hash": "ba0c8981200df2ac828df3db981a8181b0793e5b",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/ba0c8981200df2ac828df3db981a8181b0793e5b",
        "files": [
          "libavcodec/flvdec.c",
          "libavcodec/h263dec.c",
          "libavcodec/h264.c",
          "libavcodec/mpegvideo.c",
          "libavcodec/mpegvideo.h",
          "libavcodec/vc1dec.c"
        ],
        "message": "cosmetics: Fix dropable --> droppable typo",
        "before_after_code_files": [
          "libavcodec/flvdec.c||libavcodec/flvdec.c",
          "libavcodec/h263dec.c||libavcodec/h263dec.c",
          "libavcodec/h264.c||libavcodec/h264.c",
          "libavcodec/mpegvideo.c||libavcodec/mpegvideo.c",
          "libavcodec/mpegvideo.h||libavcodec/mpegvideo.h",
          "libavcodec/vc1dec.c||libavcodec/vc1dec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/h264.c||libavcodec/h264.c"
          ],
          "candidate": [
            "libavcodec/h264.c||libavcodec/h264.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/flvdec.c||libavcodec/flvdec.c": [
          "File: libavcodec/flvdec.c -> libavcodec/flvdec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:     s->height = height;",
          "91:     s->pict_type = AV_PICTURE_TYPE_I + get_bits(&s->gb, 2);",
          "94:         s->pict_type = AV_PICTURE_TYPE_P;",
          "",
          "[Removed Lines]",
          "92:     s->dropable= s->pict_type > AV_PICTURE_TYPE_P;",
          "93:     if (s->dropable)",
          "",
          "[Added Lines]",
          "92:     s->droppable = s->pict_type > AV_PICTURE_TYPE_P;",
          "93:     if (s->droppable)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "110:     if(s->avctx->debug & FF_DEBUG_PICT_INFO){",
          "111:         av_log(s->avctx, AV_LOG_DEBUG, \"%c esc_type:%d, qp:%d num:%d\\n\",",
          "113:     }",
          "115:     s->y_dc_scale_table=",
          "",
          "[Removed Lines]",
          "112:                s->dropable ? 'D' : av_get_picture_type_char(s->pict_type), s->h263_flv-1, s->qscale, s->picture_number);",
          "",
          "[Added Lines]",
          "112:                s->droppable ? 'D' : av_get_picture_type_char(s->pict_type),",
          "113:                s->h263_flv - 1, s->qscale, s->picture_number);",
          "",
          "---------------"
        ],
        "libavcodec/h263dec.c||libavcodec/h263dec.c": [
          "File: libavcodec/h263dec.c -> libavcodec/h263dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "600:     s->current_picture.f.key_frame = s->pict_type == AV_PICTURE_TYPE_I;",
          "604:     if(   (avctx->skip_frame >= AVDISCARD_NONREF && s->pict_type==AV_PICTURE_TYPE_B)",
          "605:        || (avctx->skip_frame >= AVDISCARD_NONKEY && s->pict_type!=AV_PICTURE_TYPE_I)",
          "606:        ||  avctx->skip_frame >= AVDISCARD_ALL)",
          "",
          "[Removed Lines]",
          "603:     if(s->last_picture_ptr==NULL && (s->pict_type==AV_PICTURE_TYPE_B || s->dropable)) return get_consumed_bytes(s, buf_size);",
          "",
          "[Added Lines]",
          "603:     if (s->last_picture_ptr == NULL &&",
          "604:         (s->pict_type == AV_PICTURE_TYPE_B || s->droppable))",
          "605:         return get_consumed_bytes(s, buf_size);",
          "",
          "---------------"
        ],
        "libavcodec/h264.c||libavcodec/h264.c": [
          "File: libavcodec/h264.c -> libavcodec/h264.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1226:     if (!s->current_picture_ptr)",
          "1227:         return 0;",
          "1230:         err = ff_h264_execute_ref_pic_marking(h, h->mmco, h->mmco_index);",
          "1231:         h->prev_poc_msb = h->poc_msb;",
          "1232:         h->prev_poc_lsb = h->poc_lsb;",
          "",
          "[Removed Lines]",
          "1229:     if (!s->dropable) {",
          "",
          "[Added Lines]",
          "1229:     if (!s->droppable) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2235:     int err = 0;",
          "2236:     s->mb_y = 0;",
          "2239:         ff_thread_report_progress(&s->current_picture_ptr->f, INT_MAX,",
          "2240:                                   s->picture_structure == PICT_BOTTOM_FIELD);",
          "",
          "[Removed Lines]",
          "2238:     if (!in_setup && !s->dropable)",
          "",
          "[Added Lines]",
          "2238:     if (!in_setup && !s->droppable)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2244:         ff_vdpau_h264_set_reference_frames(s);",
          "2246:     if (in_setup || !(avctx->active_thread_type & FF_THREAD_FRAME)) {",
          "2248:             err = ff_h264_execute_ref_pic_marking(h, h->mmco, h->mmco_index);",
          "2249:             h->prev_poc_msb = h->poc_msb;",
          "2250:             h->prev_poc_lsb = h->poc_lsb;",
          "",
          "[Removed Lines]",
          "2247:         if (!s->dropable) {",
          "",
          "[Added Lines]",
          "2247:         if (!s->droppable) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2359:     int num_ref_idx_active_override_flag, max_refs;",
          "2360:     unsigned int slice_type, tmp, i, j;",
          "2361:     int default_ref_list_done = 0;",
          "2365:     if ((s->avctx->flags2 & CODEC_FLAG2_FAST) &&",
          "",
          "[Removed Lines]",
          "2362:     int last_pic_structure, last_pic_dropable;",
          "",
          "[Added Lines]",
          "2362:     int last_pic_structure, last_pic_droppable;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2381:         h0->current_slice = 0;",
          "2382:         if (!s0->first_field) {",
          "2384:                 s->current_picture_ptr->owner2 == s) {",
          "2385:                 ff_thread_report_progress(&s->current_picture_ptr->f, INT_MAX,",
          "2386:                                           s->picture_structure == PICT_BOTTOM_FIELD);",
          "",
          "[Removed Lines]",
          "2383:             if (s->current_picture_ptr && !s->dropable &&",
          "",
          "[Added Lines]",
          "2383:             if (s->current_picture_ptr && !s->droppable &&",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2601:     h->mb_mbaff        = 0;",
          "2602:     h->mb_aff_frame    = 0;",
          "2603:     last_pic_structure = s0->picture_structure;",
          "2606:     if (h->sps.frame_mbs_only_flag) {",
          "2607:         s->picture_structure = PICT_FRAME;",
          "2608:     } else {",
          "",
          "[Removed Lines]",
          "2604:     last_pic_dropable  = s0->dropable;",
          "2605:     s->dropable        = h->nal_ref_idc == 0;",
          "",
          "[Added Lines]",
          "2604:     last_pic_droppable = s0->droppable;",
          "2605:     s->droppable       = h->nal_ref_idc == 0;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2618:     if (h0->current_slice != 0) {",
          "2619:         if (last_pic_structure != s->picture_structure ||",
          "2621:             av_log(h->s.avctx, AV_LOG_ERROR,",
          "2622:                    \"Changing field mode (%d -> %d) between slices is not allowed\\n\",",
          "2623:                    last_pic_structure, s->picture_structure);",
          "2624:             s->picture_structure = last_pic_structure;",
          "2626:             return AVERROR_INVALIDDATA;",
          "2627:         } else if (!s0->current_picture_ptr) {",
          "2628:             av_log(s->avctx, AV_LOG_ERROR,",
          "",
          "[Removed Lines]",
          "2620:             last_pic_dropable  != s->dropable) {",
          "2625:             s->dropable          = last_pic_dropable;",
          "",
          "[Added Lines]",
          "2620:             last_pic_droppable != s->droppable) {",
          "2625:             s->droppable         = last_pic_droppable;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2660:             assert(s0->current_picture_ptr->f.reference != DELAYED_PIC_REF);",
          "2664:                 ff_thread_report_progress(&s0->current_picture_ptr->f, INT_MAX,",
          "2665:                                           last_pic_structure == PICT_BOTTOM_FIELD);",
          "2666:             }",
          "",
          "[Removed Lines]",
          "2663:             if (!last_pic_dropable && s0->current_picture_ptr->owner2 == s0) {",
          "",
          "[Added Lines]",
          "2663:             if (!last_pic_droppable && s0->current_picture_ptr->owner2 == s0) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2669:             if (!FIELD_PICTURE || s->picture_structure == last_pic_structure) {",
          "2673:                     ff_thread_report_progress(&s0->current_picture_ptr->f, INT_MAX,",
          "2674:                                               last_pic_structure == PICT_TOP_FIELD);",
          "2675:                 }",
          "",
          "[Removed Lines]",
          "2672:                 if (!last_pic_dropable && last_pic_structure != PICT_FRAME) {",
          "",
          "[Added Lines]",
          "2672:                 if (!last_pic_droppable && last_pic_structure != PICT_FRAME) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2683:                         ff_thread_report_progress(&s0->current_picture_ptr->f, INT_MAX,",
          "2684:                                                   last_pic_structure == PICT_TOP_FIELD);",
          "2685:                     }",
          "",
          "[Removed Lines]",
          "2682:                     if (!last_pic_dropable && last_pic_structure != PICT_FRAME) {",
          "",
          "[Added Lines]",
          "2682:                     if (!last_pic_droppable && last_pic_structure != PICT_FRAME) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2693:                                \"Invalid field mode combination %d/%d\\n\",",
          "2694:                                last_pic_structure, s->picture_structure);",
          "2695:                         s->picture_structure = last_pic_structure;",
          "2697:                         return AVERROR_INVALIDDATA;",
          "2699:                         av_log(s->avctx, AV_LOG_ERROR,",
          "2700:                                \"Cannot combine reference and non-reference fields in the same frame\\n\");",
          "2701:                         av_log_ask_for_sample(s->avctx, NULL);",
          "2702:                         s->picture_structure = last_pic_structure;",
          "2704:                         return AVERROR_INVALIDDATA;",
          "2705:                     }",
          "",
          "[Removed Lines]",
          "2696:                         s->dropable          = last_pic_dropable;",
          "2698:                     } else if (last_pic_dropable != s->dropable) {",
          "2703:                         s->dropable          = last_pic_dropable;",
          "",
          "[Added Lines]",
          "2696:                         s->droppable         = last_pic_droppable;",
          "2698:                     } else if (last_pic_droppable != s->droppable) {",
          "2703:                         s->droppable         = last_pic_droppable;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3439:     ff_draw_horiz_band(s, top, height);",
          "3442:         return;",
          "3444:     ff_thread_report_progress(&s->current_picture_ptr->f, top + height - 1,",
          "",
          "[Removed Lines]",
          "3441:     if (s->dropable)",
          "",
          "[Added Lines]",
          "3441:     if (s->droppable)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3641:         hx                   = h->thread_context[context_count - 1];",
          "3642:         s->mb_x              = hx->s.mb_x;",
          "3643:         s->mb_y              = hx->s.mb_y;",
          "3645:         s->picture_structure = hx->s.picture_structure;",
          "3646:         for (i = 1; i < context_count; i++)",
          "3647:             h->s.error_count += h->thread_context[i]->s.error_count;",
          "",
          "[Removed Lines]",
          "3644:         s->dropable          = hx->s.dropable;",
          "",
          "[Added Lines]",
          "3644:         s->droppable         = hx->s.droppable;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3966: end:",
          "3968:     if (s->current_picture_ptr && s->current_picture_ptr->owner2 == s &&",
          "3970:         ff_thread_report_progress(&s->current_picture_ptr->f, INT_MAX,",
          "3971:                                   s->picture_structure == PICT_BOTTOM_FIELD);",
          "3972:     }",
          "",
          "[Removed Lines]",
          "3969:         !s->dropable) {",
          "",
          "[Added Lines]",
          "3969:         !s->droppable) {",
          "",
          "---------------"
        ],
        "libavcodec/mpegvideo.c||libavcodec/mpegvideo.c": [
          "File: libavcodec/mpegvideo.c -> libavcodec/mpegvideo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "591:     s->max_b_frames = s1->max_b_frames;",
          "592:     s->low_delay    = s1->low_delay;",
          "596:     s->divx_packed  = s1->divx_packed;",
          "",
          "[Removed Lines]",
          "593:     s->dropable     = s1->dropable;",
          "",
          "[Added Lines]",
          "593:     s->droppable    = s1->droppable;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1362:         }",
          "1364:         pic->f.reference = 0;",
          "1366:             if (s->codec_id == AV_CODEC_ID_H264)",
          "1367:                 pic->f.reference = s->picture_structure;",
          "1368:             else if (s->pict_type != AV_PICTURE_TYPE_B)",
          "",
          "[Removed Lines]",
          "1365:         if (!s->dropable) {",
          "",
          "[Added Lines]",
          "1365:         if (!s->droppable) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1398:     if (s->pict_type != AV_PICTURE_TYPE_B) {",
          "1399:         s->last_picture_ptr = s->next_picture_ptr;",
          "1401:             s->next_picture_ptr = s->current_picture_ptr;",
          "1402:     }",
          "1403:     av_dlog(s->avctx, \"L%p N%p C%p L%p N%p C%p type:%d drop:%d\\n\",",
          "",
          "[Removed Lines]",
          "1400:         if (!s->dropable)",
          "",
          "[Added Lines]",
          "1400:         if (!s->droppable)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1405:             s->last_picture_ptr    ? s->last_picture_ptr->f.data[0]    : NULL,",
          "1406:             s->next_picture_ptr    ? s->next_picture_ptr->f.data[0]    : NULL,",
          "1407:             s->current_picture_ptr ? s->current_picture_ptr->f.data[0] : NULL,",
          "1410:     if (s->codec_id != AV_CODEC_ID_H264) {",
          "1411:         if ((s->last_picture_ptr == NULL ||",
          "",
          "[Removed Lines]",
          "1408:             s->pict_type, s->dropable);",
          "",
          "[Added Lines]",
          "1408:             s->pict_type, s->droppable);",
          "",
          "---------------"
        ],
        "libavcodec/mpegvideo.h||libavcodec/mpegvideo.h": [
          "File: libavcodec/mpegvideo.h -> libavcodec/mpegvideo.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "342:     int pict_type;              ///< AV_PICTURE_TYPE_I, AV_PICTURE_TYPE_P, AV_PICTURE_TYPE_B, ...",
          "343:     int last_pict_type; //FIXME removes",
          "344:     int last_non_b_pict_type;   ///< used for mpeg4 gmc b-frames & ratecontrol",
          "346:     int frame_rate_index;",
          "347:     int last_lambda_for[5];     ///< last lambda for a specific pict type",
          "348:     int skipdct;                ///< skip dct and code zero residual",
          "",
          "[Removed Lines]",
          "345:     int dropable;",
          "",
          "[Added Lines]",
          "345:     int droppable;",
          "",
          "---------------"
        ],
        "libavcodec/vc1dec.c||libavcodec/vc1dec.c": [
          "File: libavcodec/vc1dec.c -> libavcodec/vc1dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5520:     s->current_picture.f.key_frame = s->pict_type == AV_PICTURE_TYPE_I;",
          "5524:         goto err;",
          "5525:     }",
          "5526:     if ((avctx->skip_frame >= AVDISCARD_NONREF && s->pict_type == AV_PICTURE_TYPE_B) ||",
          "",
          "[Removed Lines]",
          "5523:     if (s->last_picture_ptr == NULL && (s->pict_type == AV_PICTURE_TYPE_B || s->dropable)) {",
          "",
          "[Added Lines]",
          "5523:     if (s->last_picture_ptr == NULL && (s->pict_type == AV_PICTURE_TYPE_B || s->droppable)) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}