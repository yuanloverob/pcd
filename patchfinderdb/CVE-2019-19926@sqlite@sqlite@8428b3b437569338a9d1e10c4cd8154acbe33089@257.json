{
  "cve_id": "CVE-2019-19926",
  "cve_desc": "multiSelect in select.c in SQLite 3.30.1 mishandles certain errors during parsing, as demonstrated by errors from sqlite3WindowRewrite() calls. NOTE: this vulnerability exists because of an incomplete fix for CVE-2019-19880.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
  "patch_info": {
    "commit_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8428b3b437569338a9d1e10c4cd8154acbe33089",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c"
    ],
    "message": "Continuation of [e2bddcd4c55ba3cb]: Add another spot where it is necessary to abort early due to prior errors in sqlite3WindowRewrite().\n\nFossilOrigin-Name: cba2a2a44cdf138a629109bb0ad088ed4ef67fc66bed3e0373554681a39615d2",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 3d4c0bf8904135fa68c75801bfa738715cacc3b19dc8ad6ef550b11798d4b121",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2809:     }",
      "2810:   #endif",
      "2811:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2812:   if( pParse->nErr ) goto multi_select_end;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2e6d83bc498c7f3c49c72ac96887228336966db3",
      "candidate_info": {
        "commit_hash": "2e6d83bc498c7f3c49c72ac96887228336966db3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2e6d83bc498c7f3c49c72ac96887228336966db3",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/main.c",
          "src/os.c",
          "src/shell.c.in",
          "src/test1.c",
          "test/dbfuzz2.c",
          "test/fuzzcheck.c"
        ],
        "message": "Give the SQLITE_TESTCTRL_PRNG_SEED two arguments.  The second argument if not NULL is a pointer to a database connection which seeds the connection from its schema cookie.  In this way, fuzzers can control the PRNG seed.\n\nFossilOrigin-Name: 49aa34480622cce4d7a72c59d9cfa8336886387acec8ee15b72f295ea1a52d8c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/main.c||src/main.c",
          "src/os.c||src/os.c",
          "src/shell.c.in||src/shell.c.in",
          "src/test1.c||src/test1.c",
          "test/dbfuzz2.c||test/dbfuzz2.c",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c71098409c98af8360f8f28b9238a12ec764018a5782e8ff03fdf5db54031d6e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6897:   assert( i<iEnd );",
          "6898:   j = get2byte(&aData[hdr+5]);",
          "6900:   memcpy(&pTmp[j], &aData[j], usableSize - j);",
          "6902:   for(k=0; pCArray->ixNx[k]<=i && ALWAYS(k<NB*2); k++){}",
          "",
          "[Removed Lines]",
          "6899:   if( NEVER(j>(u32)usableSize) ){ j = 0; }",
          "",
          "[Added Lines]",
          "6899:   if( j>(u32)usableSize ){ j = 0; }",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3824:       break;",
          "3825:     }",
          "3832:     case SQLITE_TESTCTRL_PRNG_SEED: {",
          "3834:       break;",
          "3835:     }",
          "",
          "[Removed Lines]",
          "3833:       sqlite3Config.iPrngSeed = va_arg(ap, unsigned int);",
          "",
          "[Added Lines]",
          "3848:       int x = va_arg(ap, int);",
          "3849:       int y;",
          "3850:       sqlite3 *db = va_arg(ap, sqlite3*);",
          "3851:       assert( db==0 || db->aDb[0].pSchema!=0 );",
          "3852:       if( db && (y = db->aDb[0].pSchema->schema_cookie)!=0 ){ x = y; }",
          "3853:       sqlite3Config.iPrngSeed = x;",
          "3854:       sqlite3_randomness(0,0);",
          "",
          "---------------"
        ],
        "src/os.c||src/os.c": [
          "File: src/os.c -> src/os.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "260: int sqlite3OsRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){",
          "261:   if( sqlite3Config.iPrngSeed ){",
          "262:     memset(zBufOut, 0, nByte);",
          "264:     memcpy(zBufOut, &sqlite3Config.iPrngSeed, nByte);",
          "265:     return SQLITE_OK;",
          "266:   }else{",
          "",
          "[Removed Lines]",
          "263:     if( nByte>sizeof(unsigned) ) nByte = sizeof(unsigned int);",
          "",
          "[Added Lines]",
          "263:     if( ALWAYS(nByte>sizeof(unsigned)) ) nByte = sizeof(unsigned int);",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "9152:       { \"pending_byte\",       SQLITE_TESTCTRL_PENDING_BYTE,  \"OFFSET  \"           },",
          "9153:       { \"prng_restore\",       SQLITE_TESTCTRL_PRNG_RESTORE,  \"\"                   },",
          "9154:       { \"prng_save\",          SQLITE_TESTCTRL_PRNG_SAVE,     \"\"                   },",
          "9156:       { \"reserve\",            SQLITE_TESTCTRL_RESERVE,       \"BYTES-OF-RESERVE\"   },",
          "9157:     };",
          "9158:     int testctrl = -1;",
          "",
          "[Removed Lines]",
          "9155:       { \"prng_seed\",          SQLITE_TESTCTRL_PRNG_SEED,     \"SEED\"               },",
          "",
          "[Added Lines]",
          "9155:       { \"prng_seed\",          SQLITE_TESTCTRL_PRNG_SEED,     \"SEED ?db?\"          },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9229:         case SQLITE_TESTCTRL_PENDING_BYTE:",
          "9231:           if( nArg==3 ){",
          "9232:             unsigned int opt = (unsigned int)integerValue(azArg[2]);",
          "9233:             rc2 = sqlite3_test_control(testctrl, opt);",
          "",
          "[Removed Lines]",
          "9230:         case SQLITE_TESTCTRL_PRNG_SEED:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "9235:           }",
          "9236:           break;",
          "9239:         case SQLITE_TESTCTRL_ASSERT:",
          "9240:         case SQLITE_TESTCTRL_ALWAYS:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9238:         case SQLITE_TESTCTRL_PRNG_SEED:",
          "9239:           if( nArg==3 || nArg==4 ){",
          "9240:             int i = (int)integerValue(azArg[2]);",
          "9241:             sqlite3 *db;",
          "9242:             if( nArg==3 ){",
          "9243:               db = 0;",
          "9244:             }else{",
          "9245:               db = p->db;",
          "9247:               sqlite3_table_column_metadata(db, 0, \"x\", 0, 0, 0, 0, 0, 0);",
          "9248:             }",
          "9249:             rc2 = sqlite3_test_control(testctrl, i, db);",
          "9250:             isOk = 3;",
          "9251:           }",
          "9252:           break;",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6389: ){",
          "6393:     return TCL_ERROR;",
          "6394:   }",
          "6395:   if( Tcl_GetIntFromObj(interp,objv[0],&i) ) return TCL_ERROR;",
          "6398:   return TCL_OK;",
          "6399: }",
          "",
          "[Removed Lines]",
          "6390:   unsigned int i;",
          "6391:   if( objc!=2 ){",
          "6392:     Tcl_WrongNumArgs(interp, 1, objv, \"PRNG-SEED-TEXT\");",
          "6396:   sqlite3_test_control(SQLITE_TESTCTRL_PRNG_SEED, (unsigned int)i);",
          "6397:   sqlite3_randomness(0,0);",
          "",
          "[Added Lines]",
          "6400:   int i = 0;",
          "6401:   sqlite3 *db = 0;",
          "6402:   if( objc!=2 && objc!=3 ){",
          "6403:     Tcl_WrongNumArgs(interp, 1, objv, \"SEED ?DB?\");",
          "6407:   if( objc==3 && getDbPointer(interp, Tcl_GetString(objv[2]), &db) ){",
          "6408:     return TCL_ERROR;",
          "6409:   }",
          "6410:   sqlite3_test_control(SQLITE_TESTCTRL_PRNG_SEED, i, db);",
          "",
          "---------------"
        ],
        "test/dbfuzz2.c||test/dbfuzz2.c": [
          "File: test/dbfuzz2.c -> test/dbfuzz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "212:     sqlite3_progress_handler(db, 10, progress_handler, 0);",
          "213:   }",
          "214: #ifdef SQLITE_TESTCTRL_PRNG_SEED",
          "217: #endif",
          "218:   for(i=0; i<sizeof(azSql)/sizeof(azSql[0]); i++){",
          "219:     if( eVerbosity>=1 ){",
          "",
          "[Removed Lines]",
          "215:   sqlite3_test_control(SQLITE_TESTCTRL_PRNG_SEED, 0);",
          "216:   sqlite3_randomness(0,0);",
          "",
          "[Added Lines]",
          "215:   sqlite3_test_control(SQLITE_TESTCTRL_PRNG_SEED, 1, db);",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1807:           }",
          "1808: #endif",
          "1809: #ifdef SQLITE_TESTCTRL_PRNG_SEED",
          "1812: #endif",
          "1813:           do{",
          "1814:             runSql(db, (char*)pSql->a, runFlags);",
          "",
          "[Removed Lines]",
          "1810:           sqlite3_test_control(SQLITE_TESTCTRL_PRNG_SEED, 0);",
          "1811:           sqlite3_randomness(0,0);",
          "",
          "[Added Lines]",
          "1810:           sqlite3_test_control(SQLITE_TESTCTRL_PRNG_SEED, 1, db);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3fc60429924d3141df71059c114352713b5548b2",
      "candidate_info": {
        "commit_hash": "3fc60429924d3141df71059c114352713b5548b2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3fc60429924d3141df71059c114352713b5548b2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c",
          "src/window.c"
        ],
        "message": "Improvements to VdbeCoverage macros.\n\nFossilOrigin-Name: 10ee9e337e5f8a846dc827f6deb07930a790ac9d290b62f73de59454e465d5a1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bb643bac535ac7d5fb4c13edb8782cd13540bbc7d2b2deb689f4ca8d1914f422",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2197:         u32 x = pLevel->iLikeRepCntr;",
          "2198:         if( x>0 ){",
          "2199:           skipLikeAddr = sqlite3VdbeAddOp1(v, (x&1)?OP_IfNot:OP_If,(int)(x>>1));",
          "2200:         }",
          "2202: #endif",
          "2203:       }",
          "",
          "[Removed Lines]",
          "2201:         VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "2200:           VdbeCoverageIf(v, (x&1)==1);",
          "2201:           VdbeCoverageIf(v, (x&1)==0);",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1310:     sqlite3VdbeAddOp4(v, OP_String8, 0, regString, 0, \"\", P4_STATIC);",
          "1311:     sqlite3VdbeAddOp3(v, OP_Ge, regString, sqlite3VdbeCurrentAddr(v)+2, reg);",
          "1312:     sqlite3VdbeChangeP5(v, SQLITE_AFF_NUMERIC);",
          "1313:   }else{",
          "1314:     sqlite3VdbeAddOp2(v, OP_MustBeInt, reg, sqlite3VdbeCurrentAddr(v)+2);",
          "1315:   }",
          "1321:   sqlite3VdbeAddOp3(v, aOp[eCond], regZero, sqlite3VdbeCurrentAddr(v)+2, reg);",
          "1322:   VdbeCoverageNeverNullIf(v, eCond==0);",
          "1323:   VdbeCoverageNeverNullIf(v, eCond==1);",
          "",
          "[Removed Lines]",
          "1316:   VdbeCoverageIf(v, eCond==0);",
          "1317:   VdbeCoverageIf(v, eCond==1);",
          "1318:   VdbeCoverageIf(v, eCond==2);",
          "1319:   VdbeCoverageIf(v, eCond==3);",
          "1320:   VdbeCoverageIf(v, eCond==4);",
          "",
          "[Added Lines]",
          "1313:     VdbeCoverage(v);",
          "1314:     assert( eCond==3 || eCond==4 );",
          "1315:     VdbeCoverageIf(v, eCond==3);",
          "1316:     VdbeCoverageIf(v, eCond==4);",
          "1319:     VdbeCoverage(v);",
          "1320:     assert( eCond==0 || eCond==1 || eCond==2 );",
          "1321:     VdbeCoverageIf(v, eCond==0);",
          "1322:     VdbeCoverageIf(v, eCond==1);",
          "1323:     VdbeCoverageIf(v, eCond==2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1833:   VdbeCoverage(v);",
          "1834:   sqlite3VdbeAddOp3(v, arith, regVal, reg1, reg1);",
          "1835:   sqlite3VdbeJumpHere(v, addrGe);",
          "1837:   sqlite3VdbeChangeP5(v, SQLITE_NULLEQ);",
          "1840:   sqlite3ReleaseTempReg(pParse, reg1);",
          "1841:   sqlite3ReleaseTempReg(pParse, reg2);",
          "",
          "[Removed Lines]",
          "1836:   sqlite3VdbeAddOp3(v, op, reg2, lbl, reg1);",
          "1838:   VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "1840:   sqlite3VdbeAddOp3(v, op, reg2, lbl, reg1); VdbeCoverage(v);",
          "1842:   assert( op==OP_Ge || op==OP_Gt || op==OP_Lt || op==OP_Le );",
          "1843:   testcase(op==OP_Ge); VdbeCoverageIf(v, op==OP_Ge);",
          "1844:   testcase(op==OP_Lt); VdbeCoverageIf(v, op==OP_Lt);",
          "1845:   testcase(op==OP_Le); VdbeCoverageIf(v, op==OP_Le);",
          "1846:   testcase(op==OP_Gt); VdbeCoverageIf(v, op==OP_Gt);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2534:     int op = ((pMWin->eStart==TK_FOLLOWING) ? OP_Ge : OP_Le);",
          "2535:     int addrGe = sqlite3VdbeAddOp3(v, op, regStart, 0, regEnd);",
          "2536:     VdbeCoverage(v);",
          "2537:     windowAggFinal(&s, 0);",
          "2538:     sqlite3VdbeAddOp2(v, OP_Rewind, s.current.csr, 1);",
          "2539:     VdbeCoverageNeverTaken(v);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2545:     VdbeCoverageIf(v, op==OP_Ge);",
          "2546:     VdbeCoverageIf(v, op==OP_Le);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0232dade79777574ffcc465bae831c6cfeb2539b",
      "candidate_info": {
        "commit_hash": "0232dade79777574ffcc465bae831c6cfeb2539b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0232dade79777574ffcc465bae831c6cfeb2539b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/trigger.c",
          "test/attach4.test"
        ],
        "message": "Avoid a crash that could occur when a database containing a table with a temp trigger that has the same name as a temp table is detached.\n\nFossilOrigin-Name: c4cb9708d48ead10ee9543f86878be8382cd6e850950d5384c95254bac4a8d6e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/trigger.c||src/trigger.c",
          "test/attach4.test||test/attach4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 85d95abec4a596eb3ffd2ea19b4067dc1a6970264222ed5d69e75764ac21597c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/trigger.c||src/trigger.c": [
          "File: src/trigger.c -> src/trigger.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "662:       Table *pTab = tableOfTrigger(pTrigger);",
          "663:       if( pTab ){",
          "664:         Trigger **pp;",
          "667:       }",
          "668:     }",
          "669:     sqlite3DeleteTrigger(db, pTrigger);",
          "",
          "[Removed Lines]",
          "665:         for(pp=&pTab->pTrigger; *pp!=pTrigger; pp=&((*pp)->pNext));",
          "",
          "[Added Lines]",
          "665:         for(pp=&pTab->pTrigger; *pp; pp=&((*pp)->pNext)){",
          "666:           if( *pp==pTrigger ){",
          "668:             break;",
          "669:           }",
          "670:         }",
          "",
          "---------------"
        ],
        "test/attach4.test||test/attach4.test": [
          "File: test/attach4.test -> test/attach4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "115: db close",
          "116: foreach {name f} $files { forcedelete $f }",
          "118: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118: #-------------------------------------------------------------------------",
          "119: reset_db",
          "120: do_execsql_test 2.0 {",
          "121:   ATTACH DATABASE '' AS aux;",
          "122:   CREATE TABLE IF NOT EXISTS aux.t1(a, b);",
          "123:   CREATE TEMPORARY TRIGGER tr1 DELETE ON t1 BEGIN",
          "124:     DELETE FROM t1;",
          "125:   END;",
          "126:   CREATE TABLE temp.t1(a, b);",
          "127: }",
          "129: do_execsql_test 2.1 {",
          "130:   DETACH DATABASE aux;",
          "131: }",
          "133: do_execsql_test 2.2 {",
          "134:   DROP TRIGGER tr1;",
          "135: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "093589de5e339d6ad39e06b79eb9305fa2112127",
      "candidate_info": {
        "commit_hash": "093589de5e339d6ad39e06b79eb9305fa2112127",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/093589de5e339d6ad39e06b79eb9305fa2112127",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeInt.h"
        ],
        "message": "Fix a faulty assert() statement in the sqlite3VdbeMemExpandBlob() routine.\n\nFossilOrigin-Name: 69a26eade2f92029e722a5a654214b1e2a3fc7ed497ce9aa5a7dce944f90e502",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeInt.h||src/vdbeInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3cde82c86b963fa75192907d548febd3882c7d8fc7daf1903fadd5ca46623be1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "288: #define MemNullNochng(X) \\",
          "",
          "[Removed Lines]",
          "289:   ((X)->flags==(MEM_Null|MEM_Zero) && (X)->n==0 && (X)->u.nZero==0)",
          "",
          "[Added Lines]",
          "289:   (((X)->flags&MEM_TypeMask)==(MEM_Null|MEM_Zero) \\",
          "290:     && (X)->n==0 && (X)->u.nZero==0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "efb699fc7cbd00b5a41403e4cbc108860beb3949",
      "candidate_info": {
        "commit_hash": "efb699fc7cbd00b5a41403e4cbc108860beb3949",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/efb699fc7cbd00b5a41403e4cbc108860beb3949",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Prevent the use of subroutines to implement the RHS of IN operators within CHECK constraints.\n\nFossilOrigin-Name: 6b24d3fb94e787d25e49501714780dfb0c0c99077102056aa68445f4808cdd57",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6c44838adbe5dc482bc010e91a6dd7a0f777c989f443dd600740d2c783208e0d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "2688:   if( !ExprHasProperty(pExpr, EP_VarSelect) ){",
          "",
          "[Added Lines]",
          "2688:   if( !ExprHasProperty(pExpr, EP_VarSelect) && pParse->iSelfTab==0 ){",
          "",
          "---------------"
        ]
      }
    }
  ]
}