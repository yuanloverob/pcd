{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e801270356c60630249ce72d491b822a66bb7894",
      "candidate_info": {
        "commit_hash": "e801270356c60630249ce72d491b822a66bb7894",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e801270356c60630249ce72d491b822a66bb7894",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/resolve.c",
          "src/select.c"
        ],
        "message": "ALWAYS() and NEVER() macros added due to unreachable branches arising from the previous check-in.\n\nFossilOrigin-Name: 13ffedab9bd22c6e5a3fd54dd44a7a3e6d5375f1a14fed67638c541c0edc51dd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/resolve.c||src/resolve.c",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fe702aa08c3b93a5ea6cb383ff6794c841d96eac4ce324e1ecc14dcb624c5be6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5661: static int exprSrcCount(Walker *pWalker, Expr *pExpr){",
          "5669:     int i;",
          "5670:     struct SrcCount *p = pWalker->u.pSrcCount;",
          "5671:     SrcList *pSrc = p->pSrc;",
          "",
          "[Removed Lines]",
          "5668:   if( pExpr->op==TK_COLUMN || pExpr->op==TK_AGG_COLUMN ){",
          "",
          "[Added Lines]",
          "5662:   if( pExpr->op==TK_COLUMN || NEVER(pExpr->op==TK_AGG_COLUMN) ){",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1715:           return WRC_Abort;",
          "1716:         }",
          "1717:       }",
          "1719:       sqlite3WindowRewrite(pParse, p);",
          "1720: #if SELECTTRACE_ENABLED",
          "1721:       if( (sqlite3SelectTrace & 0x108)!=0 ){",
          "",
          "[Removed Lines]",
          "1718:     }else if( p->pWin && (p->selFlags & SF_WinRewrite)==0 ){",
          "",
          "[Added Lines]",
          "1718:     }else if( p->pWin && ALWAYS( (p->selFlags & SF_WinRewrite)==0 ) ){",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6119:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
          "6120:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
          "6121: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "6123: #endif",
          "6124:   ){",
          "6125:     p->selFlags &= ~SF_Distinct;",
          "",
          "[Removed Lines]",
          "6122:    && p->pWin==0",
          "",
          "[Added Lines]",
          "6122:    && ALWAYS(p->pWin==0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7f414c0c0c503ab968f7072fcd28a876eacff427",
      "candidate_info": {
        "commit_hash": "7f414c0c0c503ab968f7072fcd28a876eacff427",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7f414c0c0c503ab968f7072fcd28a876eacff427",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/insert.c",
          "src/sqliteInt.h",
          "src/vdbe.c",
          "src/wherecode.c",
          "test/where.test"
        ],
        "message": "Check-in [fa792714ae62fa98] is incorrect.  Add a test case to refute it and also a fix to make it right. Then add an alternative fix to ticket [df46dfb631f75694] in which all ephemeral tables used as the RHS of an IN operator be index btrees and never table btrees so that they can always be reused.\n\nFossilOrigin-Name: d3915230e3ee5878fe2e65a0afb7e91ee124aaf46b4e28c6e00053d6df13d445",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbe.c||src/vdbe.c",
          "src/wherecode.c||src/wherecode.c",
          "test/where.test||test/where.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 579b66eaa0816561c6e47ea116b46f229188f0fc84c1173bfe0d21df2dff9a9a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2552:     eType = IN_INDEX_EPH;",
          "2553:     if( inFlags & IN_INDEX_LOOP ){",
          "2554:       pParse->nQueryLoop = 0;",
          "2558:     }else if( prRhsHasNull ){",
          "2560:     }",
          "2561:     assert( pX->op==TK_IN );",
          "2563:     if( rMayHaveNull ){",
          "2564:       sqlite3SetHasNullFlag(v, iTab, rMayHaveNull);",
          "2565:     }",
          "",
          "[Removed Lines]",
          "2555:       if( pX->pLeft->iColumn<0 && !ExprHasProperty(pX, EP_xIsSelect) ){",
          "2556:         eType = IN_INDEX_ROWID;",
          "2557:       }",
          "2562:     sqlite3CodeRhsOfIN(pParse, pX, iTab, eType==IN_INDEX_ROWID);",
          "",
          "[Added Lines]",
          "2559:     sqlite3CodeRhsOfIN(pParse, pX, iTab);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2732:   pLeft = pExpr->pLeft;",
          "2733:   nVal = sqlite3ExprVectorSize(pLeft);",
          "2739:   pExpr->iTable = iTab;",
          "2742: #ifdef SQLITE_ENABLE_EXPLAIN_COMMENTS",
          "2743:   if( ExprHasProperty(pExpr, EP_xIsSelect) ){",
          "2744:     VdbeComment((v, \"Result of SELECT %u\", pExpr->x.pSelect->selId));",
          "",
          "[Removed Lines]",
          "2734:   assert( !isRowid || nVal==1 );",
          "2740:   addr = sqlite3VdbeAddOp2(v, OP_OpenEphemeral,",
          "2741:       pExpr->iTable, (isRowid?0:nVal));",
          "",
          "[Added Lines]",
          "2729:   addr = sqlite3VdbeAddOp2(v, OP_OpenEphemeral, pExpr->iTable, nVal);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2746:     VdbeComment((v, \"RHS of IN operator\"));",
          "2747:   }",
          "2748: #endif",
          "2751:   if( ExprHasProperty(pExpr, EP_xIsSelect) ){",
          "",
          "[Removed Lines]",
          "2749:   pKeyInfo = isRowid ? 0 : sqlite3KeyInfoAlloc(pParse->db, nVal, 1);",
          "",
          "[Added Lines]",
          "2737:   pKeyInfo = sqlite3KeyInfoAlloc(pParse->db, nVal, 1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2760:     ExplainQueryPlan((pParse, 1, \"%sLIST SUBQUERY %d\",",
          "2761:         addrOnce?\"\":\"CORRELATED \", pSelect->selId",
          "2762:     ));",
          "2766:     if( ALWAYS(pEList->nExpr==nVal) ){",
          "",
          "[Removed Lines]",
          "2763:     assert( !isRowid );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2814:     r1 = sqlite3GetTempReg(pParse);",
          "2815:     r2 = sqlite3GetTempReg(pParse);",
          "2817:     for(i=pList->nExpr, pItem=pList->a; i>0; i--, pItem++){",
          "2818:       Expr *pE2 = pItem->pExpr;",
          "",
          "[Removed Lines]",
          "2816:     if( isRowid ) sqlite3VdbeAddOp4(v, OP_Blob, 0, r2, 0, \"\", P4_STATIC);",
          "2819:       int iValToIns;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2829:       }",
          "2846:     }",
          "2847:     sqlite3ReleaseTempReg(pParse, r1);",
          "2848:     sqlite3ReleaseTempReg(pParse, r2);",
          "",
          "[Removed Lines]",
          "2832:       if( isRowid && sqlite3ExprIsInteger(pE2, &iValToIns) ){",
          "2833:         sqlite3VdbeAddOp3(v, OP_InsertInt, iTab, r2, iValToIns);",
          "2834:       }else{",
          "2835:         r3 = sqlite3ExprCodeTarget(pParse, pE2, r1);",
          "2836:         if( isRowid ){",
          "2837:           sqlite3VdbeAddOp2(v, OP_MustBeInt, r3,",
          "2838:                             sqlite3VdbeCurrentAddr(v)+2);",
          "2839:           VdbeCoverage(v);",
          "2840:           sqlite3VdbeAddOp3(v, OP_Insert, iTab, r2, r3);",
          "2841:         }else{",
          "2842:           sqlite3VdbeAddOp4(v, OP_MakeRecord, r3, 1, r2, &affinity, 1);",
          "2843:           sqlite3VdbeAddOp4Int(v, OP_IdxInsert, iTab, r2, r3, 1);",
          "2844:         }",
          "2845:       }",
          "",
          "[Added Lines]",
          "2817:       r3 = sqlite3ExprCodeTarget(pParse, pE2, r1);",
          "2818:       sqlite3VdbeAddOp4(v, OP_MakeRecord, r3, 1, r2, &affinity, 1);",
          "2819:       sqlite3VdbeAddOp4Int(v, OP_IdxInsert, iTab, r2, r3, 1);",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1921:       pik_flags |= (update_flags & OPFLAG_SAVEPOSITION);",
          "1922: #ifdef SQLITE_ENABLE_PREUPDATE_HOOK",
          "1923:       if( update_flags==0 ){",
          "1926:         );",
          "1927:         sqlite3VdbeChangeP5(v, OPFLAG_ISNOOP);",
          "1928:       }",
          "1929: #endif",
          "1930:     }",
          "",
          "[Removed Lines]",
          "1924:         sqlite3VdbeAddOp4(v, OP_InsertInt,",
          "1925:             iIdxCur+i, aRegIdx[i], 0, (char*)pTab, P4_TABLE",
          "",
          "[Added Lines]",
          "1924:         int r = sqlite3GetTempReg(pParse);",
          "1925:         sqlite3VdbeAddOp2(v, OP_Integer, 0, r);",
          "1926:         sqlite3VdbeAddOp4(v, OP_Insert,",
          "1927:             iIdxCur+i, aRegIdx[i], r, (char*)pTab, P4_TABLE",
          "1930:         sqlite3ReleaseTempReg(pParse, r);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4281: int sqlite3GetToken(const unsigned char *, int *);",
          "4282: void sqlite3NestedParse(Parse*, const char*, ...);",
          "4283: void sqlite3ExpirePreparedStatements(sqlite3*, int);",
          "4285: int sqlite3CodeSubselect(Parse*, Expr*);",
          "4286: void sqlite3SelectPrep(Parse*, Select*, NameContext*);",
          "4287: void sqlite3SelectWrongNumTermsError(Parse *pParse, Select *p);",
          "",
          "[Removed Lines]",
          "4284: void sqlite3CodeRhsOfIN(Parse*, Expr*, int, int);",
          "",
          "[Added Lines]",
          "4284: void sqlite3CodeRhsOfIN(Parse*, Expr*, int);",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "4578: case OP_Insert:",
          "4579: case OP_InsertInt: {",
          "",
          "[Added Lines]",
          "4572: case OP_Insert: {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4597:   REGISTER_TRACE(pOp->p2, pData);",
          "4598:   sqlite3VdbeIncrWriteCounter(p, pC);",
          "4611:   if( pOp->p4type==P4_TABLE && HAS_UPDATE_HOOK(db) ){",
          "4612:     assert( pC->iDb>=0 );",
          "",
          "[Removed Lines]",
          "4600:   if( pOp->opcode==OP_Insert ){",
          "4601:     pKey = &aMem[pOp->p3];",
          "4602:     assert( pKey->flags & MEM_Int );",
          "4603:     assert( memIsValid(pKey) );",
          "4604:     REGISTER_TRACE(pOp->p3, pKey);",
          "4605:     x.nKey = pKey->u.i;",
          "4606:   }else{",
          "4607:     assert( pOp->opcode==OP_InsertInt );",
          "4608:     x.nKey = pOp->p3;",
          "4609:   }",
          "",
          "[Added Lines]",
          "4593:   pKey = &aMem[pOp->p3];",
          "4594:   assert( pKey->flags & MEM_Int );",
          "4595:   assert( memIsValid(pKey) );",
          "4596:   REGISTER_TRACE(pOp->p3, pKey);",
          "4597:   x.nKey = pKey->u.i;",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1344:     sqlite3VdbeAddOp3(v, OP_SeekRowid, iCur, addrNxt, iRowidReg);",
          "1345:     VdbeCoverage(v);",
          "1346:     pLevel->op = OP_Noop;",
          "1348:   }else if( (pLoop->wsFlags & WHERE_IPK)!=0",
          "1349:          && (pLoop->wsFlags & WHERE_COLUMN_RANGE)!=0",
          "1350:   ){",
          "",
          "[Removed Lines]",
          "1347:     pTerm->wtFlags |= TERM_CODED;",
          "",
          "[Added Lines]",
          "1346:     if( (pTerm->prereqAll & pLevel->notReady)==0 ){",
          "1347:       pTerm->wtFlags |= TERM_CODED;",
          "1348:     }",
          "",
          "---------------"
        ],
        "test/where.test||test/where.test": [
          "File: test/where.test -> test/where.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1425:   SELECT count(*) FROM t1 LEFT JOIN t2 ON a IS NOT NULL;",
          "1426: } {5}",
          "1429: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1428: # 20190-02-22:  A bug introduced by checkin",
          "1429: # https://www.sqlite.org/src/info/fa792714ae62fa98.",
          "1430: #",
          "1431: do_execsql_test where-23.0 {",
          "1432:   DROP TABLE IF EXISTS t1;",
          "1433:   DROP TABLE IF EXISTS t2;",
          "1434:   CREATE TABLE t1(a INTEGER PRIMARY KEY);",
          "1435:   INSERT INTO t1(a) VALUES(1),(2),(3);",
          "1436:   CREATE TABLE t2(x INTEGER PRIMARY KEY, y INT);",
          "1437:   INSERT INTO t2(y) VALUES(2),(3);",
          "1438:   SELECT * FROM t1, t2 WHERE a=y AND y=3;",
          "1439: } {3 2 3}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7e508f1ee2d671976fd1dbe4a8fdbc840ba39b97",
      "candidate_info": {
        "commit_hash": "7e508f1ee2d671976fd1dbe4a8fdbc840ba39b97",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7e508f1ee2d671976fd1dbe4a8fdbc840ba39b97",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/insert.c",
          "src/parse.y",
          "src/pragma.c",
          "src/sqliteInt.h"
        ],
        "message": "Simple INSERT and SELECT operations working with VIRTUAL columns.\n\nFossilOrigin-Name: 7f9f90b1b885fa9905b296f2e0fcc9b2341019b42fc839722a93cf60e49a9252",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/parse.y||src/parse.y",
          "src/pragma.c||src/pragma.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 11d472c1df707b8d03ec57d8fc582a34f5eb89a9d02a154a9871650c65065b45",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3398:     }else if( pTab->aCol[iCol].colFlags & COLFLAG_VIRTUAL ){",
          "3399:       int savedSelfTab = pParse->iSelfTab;",
          "3400:       pParse->iSelfTab = iTabCur+1;",
          "3402:       pParse->iSelfTab = savedSelfTab;",
          "3403:       return;",
          "3404: #endif",
          "",
          "[Removed Lines]",
          "3401:       sqlite3ExprCode(pParse, pTab->aCol[iCol].pDflt, iCol);",
          "",
          "[Added Lines]",
          "3401:       sqlite3ExprCode(pParse, pTab->aCol[iCol].pDflt, regOut);",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:   sqlite3TableLock(pParse, iDb, pTab->tnum,",
          "38:                    (opcode==OP_OpenWrite)?1:0, pTab->zName);",
          "39:   if( HasRowid(pTab) ){",
          "41:     VdbeComment((v, \"%s\", pTab->zName));",
          "42:   }else{",
          "43:     Index *pPk = sqlite3PrimaryKeyIndex(pTab);",
          "",
          "[Removed Lines]",
          "40:     sqlite3VdbeAddOp4Int(v, opcode, iCur, pTab->tnum, iDb, pTab->nCol);",
          "",
          "[Added Lines]",
          "40:     sqlite3VdbeAddOp4Int(v, opcode, iCur, pTab->tnum, iDb,",
          "41:                          pTab->nCol - pTab->nVCol);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "673:           if( j==pTab->iPKey ){",
          "674:             ipkColumn = i;  assert( !withoutRowid );",
          "675:           }",
          "676:           break;",
          "677:         }",
          "678:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "677: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "678:           if( pTab->aCol[j].colFlags & (COLFLAG_STORED|COLFLAG_VIRTUAL) ){",
          "679:             sqlite3ErrorMsg(pParse,",
          "680:                \"cannot INSERT into generated column \\\"%s\\\"\",",
          "681:                pTab->aCol[j].zName);",
          "682:             goto insert_cleanup;",
          "683:           }",
          "684: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "790:   for(i=0; i<pTab->nCol; i++){",
          "792:   }",
          "793:   if( pColumn==0 && nColumn && nColumn!=(pTab->nCol-nHidden) ){",
          "794:     sqlite3ErrorMsg(pParse,",
          "",
          "[Removed Lines]",
          "791:     nHidden += (IsHiddenColumn(&pTab->aCol[i]) ? 1 : 0);",
          "",
          "[Added Lines]",
          "800:     if( pTab->aCol[i].colFlags & COLFLAG_NOINSERT ) nHidden++;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1006:         continue;",
          "1007:       }",
          "1008:       if( pColumn==0 ){",
          "1010:           j = -1;",
          "1011:           nHidden++;",
          "1012:         }else{",
          "1013:           j = i - nHidden;",
          "1014:         }",
          "",
          "[Removed Lines]",
          "1009:         if( IsHiddenColumn(&pTab->aCol[i]) ){",
          "",
          "[Added Lines]",
          "1018:         if( pTab->aCol[i].colFlags & COLFLAG_NOINSERT ){",
          "1021:           if( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL ){",
          "1022:             continue;",
          "1023:           }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1863:   if( HasRowid(pTab) ){",
          "1864:     int regRec = aRegIdx[ix];",
          "1866:     sqlite3SetMakeRecordP5(v, pTab);",
          "1867:     if( !bAffinityDone ){",
          "1868:       sqlite3TableAffinity(v, pTab, 0);",
          "",
          "[Removed Lines]",
          "1865:     sqlite3VdbeAddOp3(v, OP_MakeRecord, regNewData+1, pTab->nCol, regRec);",
          "",
          "[Added Lines]",
          "1877:     sqlite3VdbeAddOp3(v, OP_MakeRecord, regNewData+1,",
          "1878:                       pTab->nCol-pTab->nVCol, regRec);",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "349: ccons ::= COLLATE ids(C).        {sqlite3AddCollateType(pParse, &C);}",
          "350: ccons ::= GENERATED ALWAYS AS generated.",
          "351: ccons ::= AS generated.",
          "358: %type autoinc {int}",
          "",
          "[Removed Lines]",
          "352: generated ::= LP expr(E) RP.",
          "353:      {sqlite3AddGenerated(pParse,E,0);}",
          "354: generated ::= LP expr(E) RP ID(TYPE).",
          "355:      {sqlite3AddGenerated(pParse,E,&TYPE);}",
          "",
          "[Added Lines]",
          "352: generated ::= LP expr(E) RP.          {sqlite3AddGenerated(pParse,E,0);}",
          "353: generated ::= LP expr(E) RP ID(TYPE). {sqlite3AddGenerated(pParse,E,&TYPE);}",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1577:         loopTop = sqlite3VdbeAddOp2(v, OP_AddImm, 7, 1);",
          "1578:         if( !isQuick ){",
          "1581:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
          "1582:         }",
          "",
          "[Removed Lines]",
          "1580:           sqlite3VdbeAddOp3(v, OP_Column, iDataCur, pTab->nCol-1, 3);",
          "",
          "[Added Lines]",
          "1580:           sqlite3VdbeAddOp3(v, OP_Column, iDataCur, pTab->nCol-pTab->nVCol-1,3);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ]
      }
    },
    {
      "candidate_hash": "1d2d71a02cac0e4a13d54ae1bd3b3351abbf9828",
      "candidate_info": {
        "commit_hash": "1d2d71a02cac0e4a13d54ae1bd3b3351abbf9828",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1d2d71a02cac0e4a13d54ae1bd3b3351abbf9828",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Mark a single branch as no longer reachable.\n\nFossilOrigin-Name: 4f35b3b78a461b0617a5cd04f60d2ab277bcc7c994dae463851a3cb5d041a723",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6cf16703fd4a835c249c947006ae4a4bf81873c8ca1803945453c9845f882dc1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c"
        ]
      }
    },
    {
      "candidate_hash": "ec8fc62c42902496b3955c7447f865a6142edfeb",
      "candidate_info": {
        "commit_hash": "ec8fc62c42902496b3955c7447f865a6142edfeb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ec8fc62c42902496b3955c7447f865a6142edfeb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c"
        ],
        "message": "Issue a warning whenever a double-quoted string literal is used.\n\nFossilOrigin-Name: ac9ad5043026b30394812457e1535df2759aea0d4510029561e92e386672796f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ec63d3506bd429560077f82a4c5ed9d189780789fe1c134fff4f3b8733be1a3f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "474:   if( cnt==0 && zTab==0 ){",
          "475:     assert( pExpr->op==TK_ID );",
          "476:     if( ExprHasProperty(pExpr,EP_DblQuoted) ){",
          "477:       pExpr->op = TK_STRING;",
          "478:       pExpr->y.pTab = 0;",
          "479:       return WRC_Prune;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "491:       sqlite3_log(SQLITE_WARNING,",
          "492:         \"double-quoted string literal: \\\"%w\\\"\", zCol);",
          "",
          "---------------"
        ]
      }
    }
  ]
}