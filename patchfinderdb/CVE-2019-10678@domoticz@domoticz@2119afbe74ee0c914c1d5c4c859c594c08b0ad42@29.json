{
  "cve_id": "CVE-2019-10678",
  "cve_desc": "Domoticz before 4.10579 neglects to categorize \\n and \\r as insecure argument options.",
  "repo": "domoticz/domoticz",
  "patch_hash": "2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
  "patch_info": {
    "commit_hash": "2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
    "files": [
      "main/Helper.cpp"
    ],
    "message": "Do not allow enters/returns in arguments (thanks to Fabio Carretto)",
    "before_after_code_files": [
      "main/Helper.cpp||main/Helper.cpp"
    ]
  },
  "patch_diff": {
    "main/Helper.cpp||main/Helper.cpp": [
      "File: main/Helper.cpp -> main/Helper.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "1014:  \"$\",",
      "1015:  \"<\",",
      "1016:  \">\",",
      "1017:  NULL",
      "1018: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1017:  \"\\n\",",
      "1018:  \"\\r\",",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c8b321f55767481e7ae6f875bd94b8241a1be3cb",
      "candidate_info": {
        "commit_hash": "c8b321f55767481e7ae6f875bd94b8241a1be3cb",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/c8b321f55767481e7ae6f875bd94b8241a1be3cb",
        "files": [
          "hardware/OpenZWave.cpp"
        ],
        "message": "OZW, handling 'kVAh' unit",
        "before_after_code_files": [
          "hardware/OpenZWave.cpp||hardware/OpenZWave.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/OpenZWave.cpp||hardware/OpenZWave.cpp": [
          "File: hardware/OpenZWave.cpp -> hardware/OpenZWave.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1743:      else",
          "1744:       _device.scaleID = SCALEID_POWER;",
          "1745:      _device.scaleMultiply = 1;",
          "1747:      {",
          "1748:       _device.scaleMultiply = 1000;",
          "1749:       _device.devType = ZDTYPE_SENSOR_POWERENERGYMETER;",
          "",
          "[Removed Lines]",
          "1746:      if (vUnits == \"kWh\")",
          "",
          "[Added Lines]",
          "1746:      if ((vUnits == \"kWh\") || (vUnits == \"kVAh\"))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1928:      else",
          "1929:       _device.scaleID = SCALEID_POWER;",
          "1930:      _device.scaleMultiply = 1;",
          "1932:      {",
          "1933:       _device.scaleMultiply = 1000;",
          "1934:       _device.devType = ZDTYPE_SENSOR_POWERENERGYMETER;",
          "",
          "[Removed Lines]",
          "1931:      if (vUnits == \"kWh\")",
          "",
          "[Added Lines]",
          "1931:      if ((vUnits == \"kWh\") || (vUnits == \"kVAh\"))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "be2e3c9ed6e80c550a7a3815a9bb8eef778b3a7c",
      "candidate_info": {
        "commit_hash": "be2e3c9ed6e80c550a7a3815a9bb8eef778b3a7c",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/be2e3c9ed6e80c550a7a3815a9bb8eef778b3a7c",
        "files": [
          "hardware/RFXComSerial.cpp",
          "hardware/RFXComSerial.h"
        ],
        "message": "RFXCom speed up firmware uploading",
        "before_after_code_files": [
          "hardware/RFXComSerial.cpp||hardware/RFXComSerial.cpp",
          "hardware/RFXComSerial.h||hardware/RFXComSerial.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/RFXComSerial.cpp||hardware/RFXComSerial.cpp": [
          "File: hardware/RFXComSerial.cpp -> hardware/RFXComSerial.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #include <ctime>",
          "19: #ifndef WIN32",
          "24: #endif",
          "26: #define RETRY_DELAY 30",
          "",
          "[Removed Lines]",
          "20:  #include <sys/stat.h>",
          "21:  #include <unistd.h>",
          "22:  #include <sys/types.h>",
          "23:  #include <pwd.h>",
          "",
          "[Added Lines]",
          "20: #include <sys/stat.h>",
          "21: #include <unistd.h>",
          "22: #include <sys/types.h>",
          "23: #include <pwd.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62: RFXComSerial::RFXComSerial(const int ID, const std::string& devname, unsigned int baud_rate) :",
          "64: {",
          "69:  m_bReceiverStarted = false;",
          "70:  m_bInBootloaderMode = false;",
          "71:  m_bStartFirmwareUpload = false;",
          "",
          "[Removed Lines]",
          "63: m_szSerialPort(devname)",
          "65:  m_HwdID=ID;",
          "66:  m_iBaudRate=baud_rate;",
          "68:  m_stoprequested=false;",
          "",
          "[Added Lines]",
          "63:  m_szSerialPort(devname)",
          "65:  m_HwdID = ID;",
          "66:  m_iBaudRate = baud_rate;",
          "68:  m_stoprequested = false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97:  m_bReceiverStarted = false;",
          "102:  m_thread = std::make_shared<std::thread>(&RFXComSerial::Do_Work, this);",
          "",
          "[Removed Lines]",
          "99:  m_retrycntr=RETRY_DELAY; //will force reconnect first thing",
          "",
          "[Added Lines]",
          "99:  m_retrycntr = RETRY_DELAY; //will force reconnect first thing",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "109: bool RFXComSerial::StopHardware()",
          "110: {",
          "112:  if (m_thread)",
          "113:  {",
          "114:   m_thread->join();",
          "115:   m_thread.reset();",
          "116:  }",
          "119:  if (m_serial.isOpen())",
          "120:   m_serial.close();",
          "121:  terminate();",
          "123:  return true;",
          "124: }",
          "",
          "[Removed Lines]",
          "111:  m_stoprequested=true;",
          "118:     sleep_milliseconds(10);",
          "122:  m_bIsStarted=false;",
          "",
          "[Added Lines]",
          "111:  m_stoprequested = true;",
          "118:  sleep_milliseconds(10);",
          "122:  m_bIsStarted = false;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "132:   sec_counter++;",
          "134:   if (sec_counter % 12 == 0) {",
          "136:   }",
          "138:   if (m_stoprequested)",
          "",
          "[Removed Lines]",
          "135:    m_LastHeartbeat=mytime(NULL);",
          "",
          "[Added Lines]",
          "135:    m_LastHeartbeat = mytime(NULL);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "154:   if (!isOpen())",
          "155:   {",
          "157:    {",
          "159:    }",
          "160:    m_retrycntr++;",
          "162:    {",
          "164:     OpenSerialDevice();",
          "165:    }",
          "166:   }",
          "168:  }",
          "170: }",
          "",
          "[Removed Lines]",
          "156:    if (m_retrycntr==0)",
          "158:     _log.Log(LOG_STATUS,\"RFXCOM: retrying in %d seconds...\", RETRY_DELAY);",
          "161:    if (m_retrycntr>=RETRY_DELAY)",
          "163:     m_retrycntr=0;",
          "169:  _log.Log(LOG_STATUS,\"RFXCOM: Serial Worker stopped...\");",
          "",
          "[Added Lines]",
          "156:    if (m_retrycntr == 0)",
          "158:     _log.Log(LOG_STATUS, \"RFXCOM: retrying in %d seconds...\", RETRY_DELAY);",
          "161:    if (m_retrycntr >= RETRY_DELAY)",
          "163:     m_retrycntr = 0;",
          "169:  _log.Log(LOG_STATUS, \"RFXCOM: Serial Worker stopped...\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "176:  try",
          "177:  {",
          "180:  }",
          "181:  catch (boost::exception & e)",
          "182:  {",
          "184: #ifdef _DEBUG",
          "186: #else",
          "187:   (void)e;",
          "188: #endif",
          "189:   return false;",
          "190:  }",
          "192:  {",
          "194:   return false;",
          "195:  }",
          "198:  setReadCallback(boost::bind(&RFXComSerial::readCallback, this, _1, _2));",
          "199:  if (!bIsFirmwareUpgrade)",
          "200:   sOnConnected(this);",
          "",
          "[Removed Lines]",
          "178:   open(m_szSerialPort,m_iBaudRate);",
          "179:   _log.Log(LOG_STATUS,\"RFXCOM: Using serial port: %s\", m_szSerialPort.c_str());",
          "183:   _log.Log(LOG_ERROR,\"RFXCOM: Error opening serial port!\");",
          "185:   _log.Log(LOG_ERROR,\"-----------------\\n%s\\n----------------\", boost::diagnostic_information(e).c_str());",
          "191:  catch ( ... )",
          "193:   _log.Log(LOG_ERROR,\"RFXCOM: Error opening serial port!!!\");",
          "196:  m_bIsStarted=true;",
          "197:  m_rxbufferpos=0;",
          "",
          "[Added Lines]",
          "178:   open(m_szSerialPort, m_iBaudRate);",
          "179:   _log.Log(LOG_STATUS, \"RFXCOM: Using serial port: %s\", m_szSerialPort.c_str());",
          "183:   _log.Log(LOG_ERROR, \"RFXCOM: Error opening serial port!\");",
          "185:   _log.Log(LOG_ERROR, \"-----------------\\n%s\\n----------------\", boost::diagnostic_information(e).c_str());",
          "191:  catch (...)",
          "193:   _log.Log(LOG_ERROR, \"RFXCOM: Error opening serial port!!!\");",
          "196:  m_bIsStarted = true;",
          "197:  m_rxbufferpos = 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "330:    std::stringstream spercentage;",
          "331:    spercentage.precision(2);",
          "333:    m_szUploadMessage = saddress.str() + \", \" + spercentage.str() + \" %\";",
          "334:    _log.Log(LOG_STATUS, m_szUploadMessage);",
          "",
          "[Removed Lines]",
          "332:    spercentage << std::setprecision(2)  << std::fixed << m_FirmwareUploadPercentage;",
          "",
          "[Added Lines]",
          "332:    spercentage << std::setprecision(2) << std::fixed << m_FirmwareUploadPercentage;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "435: {",
          "436: #ifndef WIN32",
          "437:  struct stat info;",
          "439:  {",
          "440:   struct passwd *pw = getpwuid(info.st_uid);",
          "443:   {",
          "444:    m_szUploadMessage = \"Error setting firmware ownership (chown returned an error!)\";",
          "445:    _log.Log(LOG_ERROR, m_szUploadMessage);",
          "",
          "[Removed Lines]",
          "438:  if (stat(szFilename,&info)==0)",
          "441:   int ret=chown(szFilename,pw->pw_uid,pw->pw_gid);",
          "442:   if (ret!=0)",
          "",
          "[Added Lines]",
          "438:  if (stat(szFilename, &info) == 0)",
          "441:   int ret = chown(szFilename, pw->pw_uid, pw->pw_gid);",
          "442:   if (ret != 0)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "468:  int addrh = 0;",
          "470:  fileBuffer.clear();",
          "472:  bool bHaveEOF = false;",
          "474:  while (!infile.eof())",
          "",
          "[Removed Lines]",
          "471:  std::string dstring=\"\";",
          "",
          "[Added Lines]",
          "471:  std::string dstring = \"\";",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "526:   }",
          "528:   chksum = ~chksum + 1;",
          "530:   {",
          "531:    infile.close();",
          "532:    m_szUploadMessage = \"RFXCOM: bootloader, checksum mismatch!\";",
          "",
          "[Removed Lines]",
          "529:   if ((chksum != rawLineBuf[raw_length - 1]) || (raw_length<4))",
          "",
          "[Added Lines]",
          "529:   if ((chksum != rawLineBuf[raw_length - 1]) || (raw_length < 4))",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "541:   {",
          "542:   case 0:",
          "545:    if (dstring.size() == PKT_writeblock)",
          "546:    {",
          "547:     dest_address = (((((addrh << 16) | (faddress + byte_count)) - PKT_writeblock)) / PKT_bytesperaddr);",
          "",
          "[Removed Lines]",
          "544:    dstring+= std::string((const char*)&rawLineBuf + 4, (const char*)rawLineBuf + 4 + byte_count);",
          "",
          "[Added Lines]",
          "544:    dstring += std::string((const char*)&rawLineBuf + 4, (const char*)rawLineBuf + 4 + byte_count);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "628:    _log.Log(LOG_ERROR, m_szUploadMessage);",
          "629:    return false;",
          "630:   }",
          "632:  }",
          "633:  m_szUploadMessage = \"RFXCOM: Erasing memory completed....\";",
          "634:  _log.Log(LOG_STATUS, m_szUploadMessage);",
          "635:  return true;",
          "636: }",
          "639: {",
          "640:  if (!m_serial.isOpen())",
          "641:   return false;",
          "",
          "[Removed Lines]",
          "631:   BootAddr+= (PKT_eraseblock * nBlocks);",
          "638: bool RFXComSerial::Write_TX_PKT(const unsigned char *pdata, size_t length, const int max_retry)",
          "",
          "[Added Lines]",
          "631:   BootAddr += (PKT_eraseblock * nBlocks);",
          "638: bool RFXComSerial::Write_TX_PKT(const unsigned char *pdata, size_t length, int max_retry)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "677:   return true;",
          "678:  }",
          "685:  {",
          "686:   try",
          "687:   {",
          "691:    {",
          "695:     {",
          "698:       return true;",
          "699:     }",
          "701:    }",
          "703:   }",
          "704:   catch (...)",
          "705:   {",
          "",
          "[Removed Lines]",
          "680:  int nretry = 0;",
          "681:  unsigned char input_buffer[512];",
          "682:  int tot_read;",
          "684:  while (nretry < max_retry)",
          "688:    m_serial.write((const uint8_t *)&output_buffer, tot_bytes);",
          "689:    int rcount = 0;",
          "690:    while (rcount < 2)",
          "692:     sleep_milliseconds(500);",
          "693:     tot_read = m_serial.read((uint8_t *)&input_buffer, sizeof(input_buffer));",
          "694:     if (tot_read)",
          "696:      bool bret=Handle_RX_PKT(input_buffer, tot_read);",
          "697:      if (bret)",
          "700:     rcount++;",
          "702:    nretry++;",
          "",
          "[Added Lines]",
          "680:  while (max_retry > 0)",
          "684:    size_t twrite = m_serial.write((const uint8_t *)&output_buffer, tot_bytes);",
          "685:    sleep_milliseconds(100);",
          "686:    if (twrite == tot_bytes)",
          "688:     int rcount = 0;",
          "689:     while (rcount < 2)",
          "691:      if (Read_TX_PKT())",
          "693:      sleep_milliseconds(500);",
          "694:      rcount++;",
          "697:    max_retry--;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "709:  return m_bHaveRX;",
          "710: }",
          "712: bool RFXComSerial::Handle_RX_PKT(const unsigned char *pdata, size_t length)",
          "713: {",
          "714:  if (length < 2)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "708: bool RFXComSerial::Read_TX_PKT()",
          "709: {",
          "710:  uint8_t sbuffer[512];",
          "711:  size_t buffer_offset = 0;",
          "712:  bool bSTXFound1 = false;",
          "713:  bool bSTXFound2 = false;",
          "714:  bool bETXFound = false;",
          "715:  bool bHadDLE = false;",
          "716:  unsigned char chksum = 0;",
          "717:  m_rx_tot_bytes = 0;",
          "718:  while (m_rx_tot_bytes < sizeof(m_rx_input_buffer))",
          "719:  {",
          "720:   size_t tot_read = m_serial.read((uint8_t*)&sbuffer, sizeof(sbuffer));",
          "721:   if (tot_read <= 0)",
          "722:    return false;",
          "723:   int ii = 0;",
          "724:   while (tot_read > 0)",
          "725:   {",
          "726:    uint8_t tByte = sbuffer[ii++];",
          "727:    if (!bSTXFound1)",
          "728:    {",
          "729:     if (tByte != PKT_STX)",
          "730:      return false;",
          "731:     bSTXFound1 = true;",
          "732:    }",
          "733:    else if (!bSTXFound2)",
          "734:    {",
          "735:     if (tByte != PKT_STX)",
          "736:      return false;",
          "737:     bSTXFound2 = true;",
          "738:     chksum = 0;",
          "739:     bHadDLE = false;",
          "740:     m_rx_tot_bytes = 0;",
          "741:    }",
          "742:    else",
          "743:    {",
          "745:     if ((tByte == PKT_ETX) && (!bHadDLE))",
          "746:     {",
          "747:      chksum = ~chksum + 1; //test checksum",
          "748:      if (chksum != 0)",
          "749:      {",
          "750:       _log.Log(LOG_ERROR, \"RFXCOM: bootloader, received response with invalid checksum!\");",
          "751:       return false;",
          "752:      }",
          "753:      m_bHaveRX = true;",
          "754:      return true;",
          "755:     }",
          "756:     else if (tByte == PKT_DLE)",
          "757:     {",
          "758:      bHadDLE = true;",
          "759:     }",
          "760:     else",
          "761:     {",
          "762:      bHadDLE = false;",
          "763:      chksum += tByte;",
          "764:      m_rx_input_buffer[m_rx_tot_bytes++] = tByte;",
          "765:     }",
          "766:    }",
          "767:    tot_read--;",
          "768:   }",
          "769:  }",
          "770:  return ((buffer_offset > 0) && (bETXFound));",
          "771: }",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "719:  unsigned char chksum = 0;",
          "720:  m_rx_tot_bytes = 0;",
          "721:  size_t ii = 1;",
          "725:  {",
          "726:   unsigned char dbyte = pdata[ii];",
          "727:   switch (dbyte)",
          "",
          "[Removed Lines]",
          "724:  while ((ii<length) && (m_rx_tot_bytes<sizeof(m_rx_input_buffer) - 1))",
          "",
          "[Added Lines]",
          "785:  while ((ii < length) && (m_rx_tot_bytes < sizeof(m_rx_input_buffer) - 1))",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "753:    return true;",
          "754:    break;",
          "755:   case PKT_DLE:",
          "757:    ii++;",
          "758:    if (ii >= length)",
          "759:     return false;",
          "",
          "[Removed Lines]",
          "756:    dbyte = pdata[ii+1];",
          "",
          "[Added Lines]",
          "817:    dbyte = pdata[ii + 1];",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "795:   return false;",
          "796:  if (m_bInBootloaderMode)",
          "797:   return false;",
          "799:  return true;",
          "800: }",
          "",
          "[Removed Lines]",
          "798:  write(pdata,length);",
          "",
          "[Added Lines]",
          "859:  write(pdata, length);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "820:    }",
          "822:    CDomoticzHardwareBase *pHardware = NULL;",
          "824:    {",
          "825:     pHardware = m_mainworker.GetHardware(atoi(hardwareid.c_str()));",
          "826:    }",
          "828:    {",
          "830:     pHardware = m_mainworker.GetHardwareByType(HTYPE_RFXtrx433);",
          "832:     {",
          "833:      pHardware = m_mainworker.GetHardwareByType(HTYPE_RFXtrx868);",
          "834:      if (pHardware == NULL)",
          "",
          "[Removed Lines]",
          "823:    if ((!hardwareid.empty()) && (hardwareid!=\"undefined\"))",
          "827:    if (pHardware==NULL)",
          "831:     if (pHardware==NULL)",
          "",
          "[Added Lines]",
          "884:    if ((!hardwareid.empty()) && (hardwareid != \"undefined\"))",
          "888:    if (pHardware == NULL)",
          "892:     if (pHardware == NULL)",
          "",
          "---------------"
        ],
        "hardware/RFXComSerial.h||hardware/RFXComSerial.h": [
          "File: hardware/RFXComSerial.h -> hardware/RFXComSerial.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:  void Do_Work();",
          "24:  bool UpgradeFirmware();",
          "26:  bool Handle_RX_PKT(const unsigned char *pdata, size_t length);",
          "27:  bool Read_Firmware_File(const char *szFilename, std::map<unsigned long, std::string>& fileBuffer);",
          "28:  bool EraseMemory(const int StartAddress, const int StopAddress);",
          "",
          "[Removed Lines]",
          "25:  bool Write_TX_PKT(const unsigned char *pdata, size_t length, const int max_retry = 3);",
          "",
          "[Added Lines]",
          "25:  bool Read_TX_PKT();",
          "26:  bool Write_TX_PKT(const unsigned char *pdata, size_t length, int max_retry = 3);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8a184c75b178d23fcc4869f179a4fdfa86fe3a52",
      "candidate_info": {
        "commit_hash": "8a184c75b178d23fcc4869f179a4fdfa86fe3a52",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/8a184c75b178d23fcc4869f179a4fdfa86fe3a52",
        "files": [
          "main/WebServer.cpp",
          "main/mainworker.cpp"
        ],
        "message": "Making internal download links HTTPS",
        "before_after_code_files": [
          "main/WebServer.cpp||main/WebServer.cpp",
          "main/mainworker.cpp||main/mainworker.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/WebServer.cpp||main/WebServer.cpp": [
          "File: main/WebServer.cpp -> main/WebServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2558:    m_sql.GetPreferencesVar(\"ReleaseChannel\", nValue);",
          "2559:    bool bIsBetaChannel = (nValue != 0);",
          "2562:    if (bIsBetaChannel)",
          "2563:    {",
          "2564:     utsname my_uname;",
          "",
          "[Removed Lines]",
          "2561:    std::string szHistoryURL = \"http://www.domoticz.com/download.php?channel=stable&type=history\";",
          "",
          "[Added Lines]",
          "2561:    std::string szHistoryURL = \"https://www.domoticz.com/download.php?channel=stable&type=history\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2576:     }",
          "2578:     if (((machine != \"armv6l\") && (machine != \"armv7l\") && (systemname != \"windows\") && (machine != \"x86_64\") && (machine != \"aarch64\")) || (strstr(my_uname.release, \"ARCH+\") != NULL))",
          "2580:     else",
          "2582:    }",
          "2583:    if (!HTTPClient::GET(szHistoryURL, historyfile))",
          "2584:    {",
          "",
          "[Removed Lines]",
          "2579:      szHistoryURL = \"http://www.domoticz.com/download.php?channel=beta&type=history\";",
          "2581:      szHistoryURL = \"http://www.domoticz.com/download.php?channel=beta&type=history&system=\" + systemname + \"&machine=\" + machine;",
          "",
          "[Added Lines]",
          "2579:      szHistoryURL = \"https://www.domoticz.com/download.php?channel=beta&type=history\";",
          "2581:      szHistoryURL = \"https://www.domoticz.com/download.php?channel=beta&type=history&system=\" + systemname + \"&machine=\" + machine;",
          "",
          "---------------"
        ],
        "main/mainworker.cpp||main/mainworker.cpp": [
          "File: main/mainworker.cpp -> main/mainworker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1269:  std::string szURL;",
          "1270:  if (!bIsBetaChannel)",
          "1271:  {",
          "1275:  }",
          "1276:  else",
          "1277:  {",
          "1281:  }",
          "1283:  std::string revfile;",
          "",
          "[Removed Lines]",
          "1272:   szURL = \"http://www.domoticz.com/download.php?channel=stable&type=version&system=\" + m_szSystemName + \"&machine=\" + machine;",
          "1273:   m_szDomoticzUpdateURL = \"http://www.domoticz.com/download.php?channel=stable&type=release&system=\" + m_szSystemName + \"&machine=\" + machine;",
          "1274:   m_szDomoticzUpdateChecksumURL = \"http://www.domoticz.com/download.php?channel=stable&type=checksum&system=\" + m_szSystemName + \"&machine=\" + machine;",
          "1278:   szURL = \"http://www.domoticz.com/download.php?channel=beta&type=version&system=\" + m_szSystemName + \"&machine=\" + machine;",
          "1279:   m_szDomoticzUpdateURL = \"http://www.domoticz.com/download.php?channel=beta&type=release&system=\" + m_szSystemName + \"&machine=\" + machine;",
          "1280:   m_szDomoticzUpdateChecksumURL = \"http://www.domoticz.com/download.php?channel=beta&type=checksum&system=\" + m_szSystemName + \"&machine=\" + machine;",
          "",
          "[Added Lines]",
          "1272:   szURL = \"https://www.domoticz.com/download.php?channel=stable&type=version&system=\" + m_szSystemName + \"&machine=\" + machine;",
          "1273:   m_szDomoticzUpdateURL = \"https://www.domoticz.com/download.php?channel=stable&type=release&system=\" + m_szSystemName + \"&machine=\" + machine;",
          "1274:   m_szDomoticzUpdateChecksumURL = \"https://www.domoticz.com/download.php?channel=stable&type=checksum&system=\" + m_szSystemName + \"&machine=\" + machine;",
          "1278:   szURL = \"https://www.domoticz.com/download.php?channel=beta&type=version&system=\" + m_szSystemName + \"&machine=\" + machine;",
          "1279:   m_szDomoticzUpdateURL = \"https://www.domoticz.com/download.php?channel=beta&type=release&system=\" + m_szSystemName + \"&machine=\" + machine;",
          "1280:   m_szDomoticzUpdateChecksumURL = \"https://www.domoticz.com/download.php?channel=beta&type=checksum&system=\" + m_szSystemName + \"&machine=\" + machine;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1307: bool MainWorker::StartDownloadUpdate()",
          "1308: {",
          "1309: #ifdef WIN32",
          "1310:  return false; //managed by web gui",
          "1311: #endif",
          "1313:  if (!IsUpdateAvailable(true))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1309: #ifndef DEBUG_DOWNLOAD",
          "1312: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3662c39eb1099e5063ca2898c2883e3b7cd78f6b",
      "candidate_info": {
        "commit_hash": "3662c39eb1099e5063ca2898c2883e3b7cd78f6b",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/3662c39eb1099e5063ca2898c2883e3b7cd78f6b",
        "files": [
          "www/app/report/EnergyMultiCounterReport.js"
        ],
        "message": "Corrected P1 counter values for report",
        "before_after_code_files": [
          "www/app/report/EnergyMultiCounterReport.js||www/app/report/EnergyMultiCounterReport.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "www/app/report/EnergyMultiCounterReport.js||www/app/report/EnergyMultiCounterReport.js": [
          "File: www/app/report/EnergyMultiCounterReport.js -> www/app/report/EnergyMultiCounterReport.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:                     usage2: {",
          "84:                         usage: parseFloat(item.v2),",
          "85:                         cost: parseFloat(item.v2) * costs.CostEnergyT2 / 10000,",
          "87:                     },",
          "88:                 };",
          "",
          "[Removed Lines]",
          "86:                         counter: parseFloat(item.c2)",
          "",
          "[Added Lines]",
          "86:                         counter: parseFloat(item.c3)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:                     dayRecord.return1 = {",
          "92:                         usage: parseFloat(item.r1),",
          "93:                         cost: parseFloat(item.r1) * costs.CostEnergyR1 / 10000,",
          "95:                     };",
          "97:                     dayRecord.return2 = {",
          "",
          "[Removed Lines]",
          "94:                         counter: parseFloat(item.c3)",
          "",
          "[Added Lines]",
          "94:                         counter: parseFloat(item.c2)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e0a2bcf1428f8717925a4804a80456f790a587dc",
      "candidate_info": {
        "commit_hash": "e0a2bcf1428f8717925a4804a80456f790a587dc",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/e0a2bcf1428f8717925a4804a80456f790a587dc",
        "files": [
          "main/SQLHelper.cpp",
          "main/TrendCalculator.cpp",
          "main/TrendCalculator.h",
          "main/WebServer.cpp",
          "main/WindCalculation.cpp",
          "main/WindCalculation.h",
          "main/mainworker.cpp",
          "main/mainworker.h",
          "msbuild/domoticz.vcxproj",
          "msbuild/domoticz.vcxproj.filters",
          "www/app/TemperatureController.js",
          "www/app/app.js",
          "www/html5.appcache",
          "www/images/arrow_down.png",
          "www/images/arrow_stable.png",
          "www/images/arrow_unk.png",
          "www/images/arrow_up.png",
          "www/views/temperature_widget.html"
        ],
        "message": "Added trend calculator (only for temperatures at the moment)",
        "before_after_code_files": [
          "main/SQLHelper.cpp||main/SQLHelper.cpp",
          "main/TrendCalculator.cpp||main/TrendCalculator.cpp",
          "main/TrendCalculator.h||main/TrendCalculator.h",
          "main/WebServer.cpp||main/WebServer.cpp",
          "main/WindCalculation.cpp||main/WindCalculation.cpp",
          "main/WindCalculation.h||main/WindCalculation.h",
          "main/mainworker.cpp||main/mainworker.cpp",
          "main/mainworker.h||main/mainworker.h",
          "msbuild/domoticz.vcxproj||msbuild/domoticz.vcxproj",
          "msbuild/domoticz.vcxproj.filters||msbuild/domoticz.vcxproj.filters",
          "www/app/TemperatureController.js||www/app/TemperatureController.js",
          "www/app/app.js||www/app/app.js",
          "www/html5.appcache||www/html5.appcache",
          "www/views/temperature_widget.html||www/views/temperature_widget.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/SQLHelper.cpp||main/SQLHelper.cpp": [
          "File: main/SQLHelper.cpp -> main/SQLHelper.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "5235:    int speed = atoi(splitresults[2].c_str());",
          "5236:    int gust = atoi(splitresults[3].c_str());",
          "5239:    if (ittWC != m_mainworker.m_wind_calculator.end())",
          "5240:    {",
          "5241:     int speed_max, gust_max, speed_min, gust_min;",
          "",
          "[Removed Lines]",
          "5238:    std::map<unsigned short, _tWindCalculationStruct>::iterator ittWC = m_mainworker.m_wind_calculator.find(DeviceID);",
          "",
          "[Added Lines]",
          "5238:    std::map<unsigned short, _tWindCalculator>::iterator ittWC = m_mainworker.m_wind_calculator.find(DeviceID);",
          "",
          "---------------"
        ],
        "main/TrendCalculator.cpp||main/TrendCalculator.cpp": [
          "File: main/TrendCalculator.cpp -> main/TrendCalculator.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include \"stdafx.h\"",
          "2: #include \"TrendCalculator.h\"",
          "4: _tTrendCalculator::_tTrendCalculator()",
          "5: {",
          "6:  Init();",
          "7: }",
          "9: void _tTrendCalculator::Init()",
          "10: {",
          "11:  m_state = TENDENCY_UNKNOWN;",
          "12:  m_lastValue = 0;",
          "13:  m_timeLastAvarage=time(NULL);",
          "14:  m_totValues=0;",
          "15:  m_calcValue=0;",
          "16: }",
          "18: _tTrendCalculator::_eTendencyType _tTrendCalculator::AddValueAndReturnTendency(const double Value, const _eTrendAverageTimes TendType)",
          "19: {",
          "20:  m_calcValue += Value;",
          "21:  m_totValues++;",
          "22:  if (m_state == TENDENCY_UNKNOWN)",
          "23:  {",
          "24:   m_state = TENDENCY_STABLE;",
          "25:   m_timeLastAvarage = time(NULL);",
          "26:   m_lastValue = Value; //got to start somewhere",
          "27:  }",
          "28:  else",
          "29:  {",
          "30:   time_t atime = time(NULL);",
          "31:   int AvarageMinutes = (int)TendType;",
          "32:   if (atime - m_timeLastAvarage >= (AvarageMinutes * 60))",
          "33:   {",
          "35:    double curAvr = (m_totValues == 0) ? Value : (m_calcValue / m_totValues);",
          "37:    if (curAvr > m_lastValue)",
          "38:     m_state = TENDENCY_UP;",
          "39:    else if (curAvr < m_lastValue)",
          "40:     m_state = TENDENCY_DOWN;",
          "41:    else",
          "42:     m_state = TENDENCY_STABLE;",
          "44:    m_lastValue = curAvr;",
          "46:    m_calcValue = 0;",
          "47:    m_totValues = 0;",
          "48:    m_timeLastAvarage = atime;",
          "49:   }",
          "50:  }",
          "51:  return m_state;",
          "52: }",
          "",
          "---------------"
        ],
        "main/TrendCalculator.h||main/TrendCalculator.h": [
          "File: main/TrendCalculator.h -> main/TrendCalculator.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #pragma once",
          "3: #include <deque>",
          "5: struct _tTrendCalculator",
          "6: {",
          "7: public:",
          "8:  enum _eTendencyType",
          "9:  {",
          "10:   TENDENCY_UNKNOWN = 0,",
          "11:   TENDENCY_STABLE,",
          "12:   TENDENCY_UP,",
          "13:   TENDENCY_DOWN",
          "14:  };",
          "15:  enum _eTrendAverageTimes",
          "16:  {",
          "17:   TAVERAGE_TEMP = 30,",
          "18:   TAVERAGE_HUM = 30,",
          "19:   TAVERAGE_BARO = 30,",
          "20:   TAVERAGE_USAGE = 15,",
          "21:   TAVERAGE_RAIN = 10,",
          "22:  };",
          "24:  _tTrendCalculator();",
          "26:  void Init();",
          "27:  _eTendencyType AddValueAndReturnTendency(const double Value, const _eTrendAverageTimes TendType);",
          "28:  _eTendencyType m_state;",
          "29: private:",
          "30:  double m_lastValue;",
          "31:  time_t m_timeLastAvarage;",
          "32:  int m_totValues;",
          "33:  double m_calcValue;",
          "34: };",
          "",
          "---------------"
        ],
        "main/WebServer.cpp||main/WebServer.cpp": [
          "File: main/WebServer.cpp -> main/WebServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "8588:      std::string thisIdx = sd[0];",
          "8589:      if ((ii > 0) && thisIdx == root[\"result\"][ii - 1][\"idx\"].asString()) {",
          "8590:       std::string typeOfThisOne = RFX_Type_Desc(dType, 1);",
          "8591:       if (typeOfThisOne == root[\"result\"][ii - 1][\"Type\"].asString()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8590:      int devIdx = atoi(thisIdx.c_str());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9168:       sprintf(szData, \"%.1f %c\", tvalue, tempsign);",
          "9169:       root[\"result\"][ii][\"Data\"] = szData;",
          "9170:       root[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;",
          "9171:      }",
          "9172:      else if (dType == pTypeThermostat1)",
          "9173:      {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9175:       _tTrendCalculator::_eTendencyType tstate = _tTrendCalculator::_eTendencyType::TENDENCY_UNKNOWN;",
          "9176:       uint64_t tID = ((uint64_t)(hardwareID & 0x7FFFFFFF) << 32) | (devIdx & 0x7FFFFFFF);",
          "9177:       if (m_mainworker.m_trend_calculator.find(tID) != m_mainworker.m_trend_calculator.end())",
          "9178:       {",
          "9179:        tstate = m_mainworker.m_trend_calculator[tID].m_state;",
          "9180:       }",
          "9181:       root[\"result\"][ii][\"trend\"] = (int)tstate;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "9190:       root[\"result\"][ii][\"Data\"] = szData;",
          "9191:       root[\"result\"][ii][\"TypeImg\"] = \"temperature\";",
          "9192:       root[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;",
          "9193:      }",
          "9194:      else if (dType == pTypeHUM)",
          "9195:      {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9204:       _tTrendCalculator::_eTendencyType tstate = _tTrendCalculator::_eTendencyType::TENDENCY_UNKNOWN;",
          "9205:       uint64_t tID = ((uint64_t)(hardwareID & 0x7FFFFFFF) << 32) | (devIdx & 0x7FFFFFFF);",
          "9206:       if (m_mainworker.m_trend_calculator.find(tID) != m_mainworker.m_trend_calculator.end())",
          "9207:       {",
          "9208:        tstate = m_mainworker.m_trend_calculator[tID].m_state;",
          "9209:       }",
          "9210:       root[\"result\"][ii][\"trend\"] = (int)tstate;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "9221:        sprintf(szTmp, \"%.2f\", ConvertTemperature(CalculateDewPoint(tempCelcius, humidity), tempsign));",
          "9222:        root[\"result\"][ii][\"DewPoint\"] = szTmp;",
          "9223:       }",
          "9224:      }",
          "9225:      else if (dType == pTypeTEMP_HUM_BARO)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9242:        _tTrendCalculator::_eTendencyType tstate = _tTrendCalculator::_eTendencyType::TENDENCY_UNKNOWN;",
          "9243:        uint64_t tID = ((uint64_t)(hardwareID & 0x7FFFFFFF) << 32) | (devIdx & 0x7FFFFFFF);",
          "9244:        if (m_mainworker.m_trend_calculator.find(tID) != m_mainworker.m_trend_calculator.end())",
          "9245:        {",
          "9246:         tstate = m_mainworker.m_trend_calculator[tID].m_state;",
          "9247:        }",
          "9248:        root[\"result\"][ii][\"trend\"] = (int)tstate;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "9270:        }",
          "9271:        root[\"result\"][ii][\"Data\"] = szData;",
          "9272:        root[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;",
          "9273:       }",
          "9274:      }",
          "9275:      else if (dType == pTypeTEMP_BARO)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9300:        _tTrendCalculator::_eTendencyType tstate = _tTrendCalculator::_eTendencyType::TENDENCY_UNKNOWN;",
          "9301:        uint64_t tID = ((uint64_t)(hardwareID & 0x7FFFFFFF) << 32) | (devIdx & 0x7FFFFFFF);",
          "9302:        if (m_mainworker.m_trend_calculator.find(tID) != m_mainworker.m_trend_calculator.end())",
          "9303:        {",
          "9304:         tstate = m_mainworker.m_trend_calculator[tID].m_state;",
          "9305:        }",
          "9306:        root[\"result\"][ii][\"trend\"] = (int)tstate;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "9292:        );",
          "9293:        root[\"result\"][ii][\"Data\"] = szData;",
          "9294:        root[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;",
          "9295:       }",
          "9296:      }",
          "9297:      else if (dType == pTypeUV)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9330:        _tTrendCalculator::_eTendencyType tstate = _tTrendCalculator::_eTendencyType::TENDENCY_UNKNOWN;",
          "9331:        uint64_t tID = ((uint64_t)(hardwareID & 0x7FFFFFFF) << 32) | (devIdx & 0x7FFFFFFF);",
          "9332:        if (m_mainworker.m_trend_calculator.find(tID) != m_mainworker.m_trend_calculator.end())",
          "9333:        {",
          "9334:         tstate = m_mainworker.m_trend_calculator[tID].m_state;",
          "9335:        }",
          "9336:        root[\"result\"][ii][\"trend\"] = (int)tstate;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "9309:         root[\"result\"][ii][\"Temp\"] = tvalue;",
          "9310:         sprintf(szData, \"%.1f UVI, %.1f&deg; %c\", UVI, tvalue, tempsign);",
          "9311:        }",
          "9312:        else",
          "9313:        {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9354:         _tTrendCalculator::_eTendencyType tstate = _tTrendCalculator::_eTendencyType::TENDENCY_UNKNOWN;",
          "9355:         uint64_t tID = ((uint64_t)(hardwareID & 0x7FFFFFFF) << 32) | (devIdx & 0x7FFFFFFF);",
          "9356:         if (m_mainworker.m_trend_calculator.find(tID) != m_mainworker.m_trend_calculator.end())",
          "9357:         {",
          "9358:          tstate = m_mainworker.m_trend_calculator[tID].m_state;",
          "9359:         }",
          "9360:         root[\"result\"][ii][\"trend\"] = (int)tstate;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "9364:         }",
          "9365:         double tvalue = ConvertTemperature(atof(strarray[5].c_str()), tempsign);",
          "9366:         root[\"result\"][ii][\"Chill\"] = tvalue;",
          "9367:        }",
          "9368:        root[\"result\"][ii][\"Data\"] = sValue;",
          "9369:        root[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9418:         _tTrendCalculator::_eTendencyType tstate = _tTrendCalculator::_eTendencyType::TENDENCY_UNKNOWN;",
          "9419:         uint64_t tID = ((uint64_t)(hardwareID & 0x7FFFFFFF) << 32) | (devIdx & 0x7FFFFFFF);",
          "9420:         if (m_mainworker.m_trend_calculator.find(tID) != m_mainworker.m_trend_calculator.end())",
          "9421:         {",
          "9422:          tstate = m_mainworker.m_trend_calculator[tID].m_state;",
          "9423:         }",
          "9424:         root[\"result\"][ii][\"trend\"] = (int)tstate;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "9412:         total_real *= AddjMulti;",
          "9413:         rate = (static_cast<float>(atof(strarray[0].c_str())) / 100.0f)*float(AddjMulti);",
          "9416:         root[\"result\"][ii][\"Rain\"] = szTmp;",
          "9417:         sprintf(szTmp, \"%g\", rate);",
          "9418:         root[\"result\"][ii][\"RainRate\"] = szTmp;",
          "",
          "[Removed Lines]",
          "9415:         sprintf(szTmp, \"%.3f\", total_real);",
          "",
          "[Added Lines]",
          "9474:         sprintf(szTmp, \"%.1f\", total_real);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "10253:        root[\"result\"][ii][\"Image\"] = \"Computer\";",
          "10254:        root[\"result\"][ii][\"TypeImg\"] = \"temperature\";",
          "10255:        root[\"result\"][ii][\"Type\"] = \"temperature\";",
          "10256:       }",
          "10257:       else if (dSubType == sTypePercentage)",
          "10258:       {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10315:        _tTrendCalculator::_eTendencyType tstate = _tTrendCalculator::_eTendencyType::TENDENCY_UNKNOWN;",
          "10316:        uint64_t tID = ((uint64_t)(hardwareID & 0x7FFFFFFF) << 32) | (devIdx & 0x7FFFFFFF);",
          "10317:        if (m_mainworker.m_trend_calculator.find(tID) != m_mainworker.m_trend_calculator.end())",
          "10318:        {",
          "10319:         tstate = m_mainworker.m_trend_calculator[tID].m_state;",
          "10320:        }",
          "10321:        root[\"result\"][ii][\"trend\"] = (int)tstate;",
          "",
          "---------------"
        ],
        "main/WindCalculation.cpp||main/WindCalculation.cpp": [
          "File: main/WindCalculation.cpp -> main/WindCalculation.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: #define RAD 57.2957795",
          "17: {",
          "18:  Init();",
          "19: }",
          "22: {",
          "24:  memset(&m_minute_counter,0,sizeof(m_minute_counter));",
          "",
          "[Removed Lines]",
          "16: _tWindCalculationStruct::_tWindCalculationStruct()",
          "21: void _tWindCalculationStruct::Init()",
          "",
          "[Added Lines]",
          "16: _tWindCalculator::_tWindCalculator()",
          "21: void _tWindCalculator::Init()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:  m_MinGust = -1;",
          "34: }",
          "37: {",
          "38:  double dirresult=degree;",
          "39:  if (m_bHaveLastDirection)",
          "",
          "[Removed Lines]",
          "36: double _tWindCalculationStruct::AddValueAndReturnAvarage(double degree)",
          "",
          "[Added Lines]",
          "36: double _tWindCalculator::AddValueAndReturnAvarage(const double degree)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86: }",
          "89: {",
          "90:  int highpos=0;",
          "91:  int highestval=0;",
          "",
          "[Removed Lines]",
          "88: double _tWindCalculationStruct::CalculateAvarage()",
          "",
          "[Added Lines]",
          "88: double _tWindCalculator::CalculateAvarage()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "101:  return highpos*WIND_DEGREE_RESOLUTION;",
          "102: }",
          "105: {",
          "106:  if ((Speed > m_MaxSpeed) || (m_MaxSpeed == -1))",
          "107:  {",
          "",
          "[Removed Lines]",
          "104: void _tWindCalculationStruct::SetSpeedGust(const int Speed, const int Gust)",
          "",
          "[Added Lines]",
          "104: void _tWindCalculator::SetSpeedGust(const int Speed, const int Gust)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "122: }",
          "126: {",
          "127:  MinSpeed = m_MinSpeed;",
          "128:  MaxSpeed = m_MaxSpeed;",
          "",
          "[Removed Lines]",
          "125: void _tWindCalculationStruct::GetMMSpeedGust(int &MinSpeed, int &MaxSpeed, int &MinGust, int &MaxGust)",
          "",
          "[Added Lines]",
          "125: void _tWindCalculator::GetMMSpeedGust(int &MinSpeed, int &MaxSpeed, int &MinGust, int &MaxGust)",
          "",
          "---------------"
        ],
        "main/WindCalculation.h||main/WindCalculation.h": [
          "File: main/WindCalculation.h -> main/WindCalculation.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include <deque>",
          "7: {",
          "8:  int m_minute_counter[100];//WIND_DEGREE_TABLE_COUNT",
          "9:  std::deque<unsigned char> m_history_fifo;",
          "",
          "[Removed Lines]",
          "6: struct _tWindCalculationStruct",
          "",
          "[Added Lines]",
          "6: struct _tWindCalculator",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19:  int m_MinGust;",
          "24:  void Init();",
          "25:  double AddValueAndReturnAvarage(const double degree);",
          "",
          "[Removed Lines]",
          "22:  _tWindCalculationStruct();",
          "",
          "[Added Lines]",
          "22:  _tWindCalculator();",
          "",
          "---------------"
        ],
        "main/mainworker.cpp||main/mainworker.cpp": [
          "File: main/mainworker.cpp -> main/mainworker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "3249:  m_notifications.CheckAndHandleNotification(DevRowIdx, HwdID, ID, procResult.DeviceName, Unit, devType, subType, cmnd, szTmp);",
          "3251:  if (_log.IsDebugLevelEnabled(DEBUG_RECEIVED))",
          "3252:  {",
          "3253:   WriteMessageStart();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3251:  uint64_t tID = ((uint64_t)(HwdID & 0x7FFFFFFF) << 32) | (DevRowIdx & 0x7FFFFFFF);",
          "3252:  m_trend_calculator[tID].AddValueAndReturnTendency(static_cast<double>(chill), _tTrendCalculator::TAVERAGE_TEMP);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3381:  if (DevRowIdx == -1)",
          "3382:   return;",
          "3384:  bool bHandledNotification = false;",
          "3385:  unsigned char humidity = 0;",
          "3386:  if (pResponse->TEMP.subtype == sTypeTEMP5)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3387:  uint64_t tID = ((uint64_t)(HwdID & 0x7FFFFFFF) << 32) | (DevRowIdx & 0x7FFFFFFF);",
          "3388:  m_trend_calculator[tID].AddValueAndReturnTendency(static_cast<double>(temp), _tTrendCalculator::TAVERAGE_TEMP);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3689:  if (DevRowIdx == -1)",
          "3690:   return;",
          "3692:  m_notifications.CheckAndHandleNotification(DevRowIdx, HwdID, ID, procResult.DeviceName, Unit, devType, subType, cmnd, szTmp);",
          "3694:  if (_log.IsDebugLevelEnabled(DEBUG_RECEIVED))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3698:  uint64_t tID = ((uint64_t)(HwdID & 0x7FFFFFFF) << 32) | (DevRowIdx & 0x7FFFFFFF);",
          "3699:  m_trend_calculator[tID].AddValueAndReturnTendency(static_cast<double>(temp), _tTrendCalculator::TAVERAGE_TEMP);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3896:  if (DevRowIdx == -1)",
          "3897:   return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3908:  uint64_t tID = ((uint64_t)(HwdID & 0x7FFFFFFF) << 32) | (DevRowIdx & 0x7FFFFFFF);",
          "3909:  m_trend_calculator[tID].AddValueAndReturnTendency(static_cast<double>(temp), _tTrendCalculator::TAVERAGE_TEMP);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4029:  if (DevRowIdx == -1)",
          "4030:   return;",
          "4032:  m_notifications.CheckAndHandleNotification(DevRowIdx, HwdID, ID, procResult.DeviceName, Unit, devType, subType, cmnd, szTmp);",
          "4034:  if (_log.IsDebugLevelEnabled(DEBUG_RECEIVED))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4044:  uint64_t tID = ((uint64_t)(HwdID & 0x7FFFFFFF) << 32) | (DevRowIdx & 0x7FFFFFFF);",
          "4045:  m_trend_calculator[tID].AddValueAndReturnTendency(static_cast<double>(temp), _tTrendCalculator::TAVERAGE_TEMP);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4130:  if (DevRowIdx == -1)",
          "4131:   return;",
          "4133:  sprintf(szTmp, \"%.1f\", temp);",
          "4134:  uint64_t DevRowIdxTemp = m_sql.UpdateValue(HwdID, ID.c_str(), Unit, pTypeTEMP, sTypeTEMP3, SignalLevel, BatteryLevel, cmnd, szTmp, procResult.DeviceName);",
          "4135:  m_notifications.CheckAndHandleNotification(DevRowIdx, HwdID, ID, procResult.DeviceName, Unit, pTypeTEMP, sTypeTEMP3, temp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4148:  uint64_t tID = ((uint64_t)(HwdID & 0x7FFFFFFF) << 32) | (DevRowIdx & 0x7FFFFFFF);",
          "4149:  m_trend_calculator[tID].AddValueAndReturnTendency(static_cast<double>(temp), _tTrendCalculator::TAVERAGE_TEMP);",
          "",
          "---------------"
        ],
        "main/mainworker.h||main/mainworker.h": [
          "File: main/mainworker.h -> main/mainworker.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: #include \"Camera.h\"",
          "8: #include <deque>",
          "9: #include \"WindCalculation.h\"",
          "10: #include \"StoppableTask.h\"",
          "11: #include \"../tcpserver/TCPServer.h\"",
          "12: #include \"concurrent_queue.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: #include \"TrendCalculator.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "132:  std::vector<int> m_SunRiseSetMins;",
          "133:  std::string m_DayLength;",
          "134:  std::vector<std::string> m_webthemes;",
          "137:  time_t m_LastHeartbeat = 0;",
          "138: private:",
          "",
          "[Removed Lines]",
          "135:  std::map<unsigned short, _tWindCalculationStruct> m_wind_calculator;",
          "",
          "[Added Lines]",
          "136:  std::map<unsigned short, _tWindCalculator> m_wind_calculator;",
          "137:  std::map<uint64_t, _tTrendCalculator> m_trend_calculator;",
          "",
          "---------------"
        ],
        "msbuild/domoticz.vcxproj||msbuild/domoticz.vcxproj": [
          "File: msbuild/domoticz.vcxproj -> msbuild/domoticz.vcxproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "584:     <ClInclude Include=\"..\\main\\mainstructs.h\" />",
          "585:     <ClInclude Include=\"..\\main\\Noncopyable.h\" />",
          "586:     <ClInclude Include=\"..\\main\\StoppableTask.h\" />",
          "587:     <ClInclude Include=\"..\\main\\unzip_iterator.h\" />",
          "588:     <ClInclude Include=\"..\\main\\unzip_stream.h\" />",
          "589:     <ClInclude Include=\"..\\main\\WebServerHelper.h\" />",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "587:     <ClInclude Include=\"..\\main\\TrendCalculator.h\" />",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "888:       <PrecompiledHeader Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">Create</PrecompiledHeader>",
          "889:     </ClCompile>",
          "890:     <ClCompile Include=\"..\\main\\SunRiseSet.cpp\" />",
          "891:     <ClCompile Include=\"..\\main\\WebServerHelper.cpp\" />",
          "892:     <ClCompile Include=\"..\\main\\WindCalculation.cpp\" />",
          "893:     <ClCompile Include=\"..\\MQTT\\logging_mosq.c\">",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "892:     <ClCompile Include=\"..\\main\\TrendCalculator.cpp\" />",
          "",
          "---------------"
        ],
        "msbuild/domoticz.vcxproj.filters||msbuild/domoticz.vcxproj.filters": [
          "File: msbuild/domoticz.vcxproj.filters -> msbuild/domoticz.vcxproj.filters",
          "--- Hunk 1 ---",
          "[Context before]",
          "2146:     <ClInclude Include=\"..\\hardware\\TeleinfoBase.h\">",
          "2147:       <Filter>Devices\\Teleinfo</Filter>",
          "2148:     </ClInclude>",
          "2149:   </ItemGroup>",
          "2150:   <ItemGroup>",
          "2151:     <ClCompile Include=\"..\\webserver\\Base64.cpp\">",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2149:     <ClInclude Include=\"..\\main\\TrendCalculator.h\">",
          "2150:       <Filter>Helpers</Filter>",
          "2151:     </ClInclude>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2922:     <ClCompile Include=\"..\\hardware\\TeleinfoBase.cpp\">",
          "2923:       <Filter>Devices\\Teleinfo</Filter>",
          "2924:     </ClCompile>",
          "2925:   </ItemGroup>",
          "2926:   <ItemGroup>",
          "2927:     <ResourceCompile Include=\"domoticz.rc\">",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2928:     <ClCompile Include=\"..\\main\\TrendCalculator.cpp\">",
          "2929:       <Filter>Helpers</Filter>",
          "2930:     </ClCompile>",
          "",
          "---------------"
        ],
        "www/app/TemperatureController.js||www/app/TemperatureController.js": [
          "File: www/app/TemperatureController.js -> www/app/TemperatureController.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "619:      ctrl.displayChill = function () {",
          "620:       return typeof item.Chill != 'undefined';",
          "621:      };",
          "623:      ctrl.image = function () {",
          "624:       if (typeof item.Temp != 'undefined') {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "623:      ctrl.DisplayTrend = function () {",
          "625:       if (typeof item.trend != 'undefined') {",
          "626:        if (item.trend > 1)",
          "627:         return true;",
          "628:       }",
          "629:       return false;",
          "630:      };",
          "631:      ctrl.TrendState = function () {",
          "632:       if (item.trend == 0) return \"unk\";",
          "633:       if (item.trend == 1) return \"stable\";",
          "634:       if (item.trend == 2) return \"up\";",
          "635:       if (item.trend == 3) return \"down\";",
          "636:       return \"unk\";",
          "637:      };",
          "",
          "---------------"
        ],
        "www/app/app.js||www/app/app.js": [
          "File: www/app/app.js -> www/app/app.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "983:    }",
          "984:    return backgroundClass;",
          "985:   }",
          "987:  });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "986:   $rootScope.DisplayTrend = function (trend) {",
          "987:    alert(item.Name);",
          "989:    if (typeof trend != 'undefined') {",
          "990:     if (trend > 1)",
          "991:      return true;",
          "992:    }",
          "993:    return false;",
          "994:   };",
          "995:   $rootScope.TrendState = function (trend) {",
          "996:    if (trend == 0) return \"unk\";",
          "997:    if (trend == 1) return \"stable\";",
          "998:    if (trend == 2) return \"up\";",
          "999:    if (trend == 3) return \"down\";",
          "1000:    return \"unk\";",
          "1001:   };",
          "",
          "---------------"
        ],
        "www/html5.appcache||www/html5.appcache": [
          "File: www/html5.appcache -> www/html5.appcache",
          "--- Hunk 1 ---",
          "[Context before]",
          "92: images/Amplifier.png",
          "93: images/Amplifier48_Off.png",
          "94: images/Amplifier48_On.png",
          "95: images/back_disabled.png",
          "96: images/back_enabled.png",
          "97: images/back_enabled_hover.png",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95: images/arrow_down.png",
          "96: images/arrow_stable.png",
          "97: images/arrow_unk.png",
          "98: images/arrow_up.png",
          "",
          "---------------"
        ],
        "www/views/temperature_widget.html||www/views/temperature_widget.html": [
          "File: www/views/temperature_widget.html -> www/views/temperature_widget.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:             <tr>",
          "5:                 <td id=\"name\" ng-bind=\"item.Name\"></td>",
          "6:                 <td id=\"bigtext\" class=\"ng-cloak\">",
          "7:                     <span ng-show=\"ctrl.displayTemp()\">{{item.Temp}}&#176; {{tempsign}}</span>",
          "8:                     <span ng-show=\"ctrl.displaySetPoint() && ctrl.isSetPointOn()\">({{item.SetPoint}}&#176; {{tempsign}})</span>",
          "9:                     <span ng-show=\"ctrl.displaySetPoint() && !ctrl.isSetPointOn()\">(Off)</span>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7:      <img ng-show=\"ctrl.DisplayTrend()\" height=\"12\" ng-src=\"images/arrow_{{ctrl.TrendState()}}.png\">",
          "",
          "---------------"
        ]
      }
    }
  ]
}