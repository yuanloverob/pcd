{
  "cve_id": "CVE-2017-7185",
  "cve_desc": "Use-after-free vulnerability in the mg_http_multipart_wait_for_boundary function in mongoose.c in Cesanta Mongoose Embedded Web Server Library 6.7 and earlier and Mongoose OS 1.2 and earlier allows remote attackers to cause a denial of service (crash) via a multipart/form-data POST request without a MIME boundary string.",
  "repo": "cesanta/mongoose",
  "patch_hash": "b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
  "patch_info": {
    "commit_hash": "b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
    "repo": "cesanta/mongoose",
    "commit_url": "https://github.com/cesanta/mongoose/commit/b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
    "files": [
      "mongoose.c"
    ],
    "message": "Fix crash in multipart handling\n\nClose cesanta/dev#6974\n\nPUBLISHED_FROM=4d4e4a46eceba10aec8dacb7f8f58bd078c92307",
    "before_after_code_files": [
      "mongoose.c||mongoose.c"
    ]
  },
  "patch_diff": {
    "mongoose.c||mongoose.c": [
      "File: mongoose.c -> mongoose.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "5961:   struct mbuf *io = &c->recv_mbuf;",
      "5962:   struct mg_http_proto_data *pd = mg_http_get_proto_data(c);",
      "5964:   if ((int) io->len < pd->mp_stream.boundary_len + 2) {",
      "5965:     return 0;",
      "5966:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5964:   if (pd->mp_stream.boundary == NULL) {",
      "5965:     pd->mp_stream.state = MPS_FINALIZE;",
      "5966:     DBG((\"Invalid request: boundary not initilaized\"));",
      "5967:     return 0;",
      "5968:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c60fe0c6f61d5ed1dfd047387dc084ccea8e5474",
      "candidate_info": {
        "commit_hash": "c60fe0c6f61d5ed1dfd047387dc084ccea8e5474",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/c60fe0c6f61d5ed1dfd047387dc084ccea8e5474",
        "files": [
          "mongoose.c"
        ],
        "message": "Fix crash in multipart handling\n\nClose cesanta/dev#6974\n\nPUBLISHED_FROM=4d4e4a46eceba10aec8dacb7f8f58bd078c92307",
        "before_after_code_files": [
          "mongoose.c||mongoose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5879:   struct mbuf *io = &c->recv_mbuf;",
          "5880:   struct mg_http_proto_data *pd = mg_http_get_proto_data(c);",
          "5882:   if ((int) io->len < pd->mp_stream.boundary_len + 2) {",
          "5883:     return 0;",
          "5884:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5882:   if (pd->mp_stream.boundary == NULL) {",
          "5883:     pd->mp_stream.state = MPS_FINALIZE;",
          "5884:     DBG((\"Invalid request: boundary not initilaized\"));",
          "5885:     return 0;",
          "5886:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8bbb44f90c0d2c2cb67d342ccc029bcc41cc6adf",
      "candidate_info": {
        "commit_hash": "8bbb44f90c0d2c2cb67d342ccc029bcc41cc6adf",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/8bbb44f90c0d2c2cb67d342ccc029bcc41cc6adf",
        "files": [
          "mongoose.c"
        ],
        "message": "Always send MG_EV_HTTP_CHUNK\n\nPUBLISHED_FROM=33957356e1510b73b37768496c74a6bf12630215",
        "before_after_code_files": [
          "mongoose.c||mongoose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5839: static void mg_http_call_endpoint_handler(struct mg_connection *nc, int ev,",
          "5840:                                           struct http_message *hm);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5843: static void deliver_chunk(struct mg_connection *c, struct http_message *hm,",
          "5844:                           int req_len) {",
          "5846:   hm->body.len = c->recv_mbuf.len - req_len;",
          "5847:   c->flags &= ~MG_F_DELETE_CHUNK;",
          "5848:   mg_call(c, c->handler, c->user_data, MG_EV_HTTP_CHUNK, hm);",
          "5850:   if (c->flags & MG_F_DELETE_CHUNK) c->recv_mbuf.len = req_len;",
          "5851: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5862: void mg_http_handler(struct mg_connection *nc, int ev,",
          "5863:                      void *ev_data MG_UD_ARG(void *user_data)) {",
          "5867:   struct mg_http_proto_data *pd = mg_http_get_proto_data(nc);",
          "5868:   struct mbuf *io = &nc->recv_mbuf;",
          "",
          "[Removed Lines]",
          "5864:   struct http_message shm;",
          "5865:   struct http_message *hm = &shm;",
          "",
          "[Added Lines]",
          "5875:   struct http_message shm, *hm = &shm;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5898:               nc->user_data, MG_EV_HTTP_MULTIPART_REQUEST_END, &mp);",
          "5899:     } else",
          "5900: #endif",
          "",
          "[Removed Lines]",
          "5901:         if (io->len > 0 && mg_parse_http(io->buf, io->len, hm, is_req) > 0) {",
          "",
          "[Added Lines]",
          "5911:         if (io->len > 0 &&",
          "5912:             (req_len = mg_parse_http(io->buf, io->len, hm, is_req)) > 0) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5906:       int ev2 = is_req ? MG_EV_HTTP_REQUEST : MG_EV_HTTP_REPLY;",
          "5907:       hm->message.len = io->len;",
          "5908:       hm->body.len = io->buf + io->len - hm->body.p;",
          "5909:       mg_http_call_endpoint_handler(nc, ev2, hm);",
          "5910:     }",
          "5911:   }",
          "5913: #if MG_ENABLE_FILESYSTEM",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5920:       deliver_chunk(nc, hm, req_len);",
          "5923:     pd->rcvd = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5921:   if (ev == MG_EV_RECV) {",
          "5922:     struct mg_str *s;",
          "5924: #if MG_ENABLE_HTTP_STREAMING_MULTIPART",
          "5925:     if (pd->mp_stream.boundary != NULL) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5936:     pd->rcvd += *(int *) ev_data;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5999:       }",
          "6000:     }",
          "6003:       int trigger_ev = nc->listener ? MG_EV_HTTP_REQUEST : MG_EV_HTTP_REPLY;",
          "6004:       char addr[32];",
          "6005:       mg_sock_addr_to_str(&nc->sa, addr, sizeof(addr),",
          "6006:                           MG_SOCK_STRINGIFY_IP | MG_SOCK_STRINGIFY_PORT);",
          "6007:       DBG((\"%p %s %.*s %.*s\", nc, addr, (int) hm->method.len, hm->method.p,",
          "6008:            (int) hm->uri.len, hm->uri.p));",
          "6010:       mg_http_call_endpoint_handler(nc, trigger_ev, hm);",
          "6011:       mbuf_remove(io, hm->message.len);",
          "6012:     }",
          "6013:   }",
          "6015: }",
          "6017: static size_t mg_get_line_len(const char *buf, size_t buf_len) {",
          "",
          "[Removed Lines]",
          "6002:     else if (hm->message.len <= io->len) {",
          "6014:   (void) pd;",
          "",
          "[Added Lines]",
          "6016:     else if (hm->message.len > pd->rcvd) {",
          "6018:       deliver_chunk(nc, hm, req_len);",
          "6019:     } else {",
          "6027:       deliver_chunk(nc, hm, req_len);",
          "6031:       pd->rcvd = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8b67274cc0b45a1fe8bb2ceabac57b5432d65abb",
      "candidate_info": {
        "commit_hash": "8b67274cc0b45a1fe8bb2ceabac57b5432d65abb",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/8b67274cc0b45a1fe8bb2ceabac57b5432d65abb",
        "files": [
          "docs/c-api/http_server.h/mg_get_http_var.md",
          "mongoose.c",
          "mongoose.h"
        ],
        "message": "Fix mg_get_http_var retval\n\nPUBLISHED_FROM=257deff5ea20302627e77a0f29cf2359276a41d4",
        "before_after_code_files": [
          "mongoose.c||mongoose.c",
          "mongoose.h||mongoose.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6500:   } else {",
          "6501:     name_len = strlen(name);",
          "6502:     e = buf->p + buf->len;",
          "6504:     dst[0] = '\\0';",
          "6506:     for (p = buf->p; p + name_len < e; p++) {",
          "",
          "[Removed Lines]",
          "6503:     len = -1;",
          "",
          "[Added Lines]",
          "6510:     len = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6512:           s = e;",
          "6513:         }",
          "6514:         len = mg_url_decode(p, (size_t)(s - p), dst, dst_len, 1);",
          "6515:         if (len == -1) {",
          "6517:         }",
          "6518:         break;",
          "6519:       }",
          "",
          "[Removed Lines]",
          "6516:           len = -2;",
          "",
          "[Added Lines]",
          "6524:           len = -3;",
          "",
          "---------------"
        ],
        "mongoose.h||mongoose.h": [
          "File: mongoose.h -> mongoose.h"
        ]
      }
    },
    {
      "candidate_hash": "38e984a0085832e6c402275b7cb92314c48e4d2a",
      "candidate_info": {
        "commit_hash": "38e984a0085832e6c402275b7cb92314c48e4d2a",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/38e984a0085832e6c402275b7cb92314c48e4d2a",
        "files": [
          "mongoose.c",
          "mongoose.h"
        ],
        "message": "CC3220 first steps\n\nAchievement unlocked: CC3220 port prints a boot banner.\nThen locks up.\n\nIncluded in this PR is refactoring to pull out common parts to be shared with CC3200.\n\nPUBLISHED_FROM=5fb9d9a00bb9ce7f63dde20bc1876076b76d5257",
        "before_after_code_files": [
          "mongoose.c||mongoose.c",
          "mongoose.h||mongoose.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "13302:   int res;",
          "13303:   struct in_addr *in = (struct in_addr *) src;",
          "13304:   if (af != AF_INET) {",
          "13306:     return NULL;",
          "13307:   }",
          "13308:   res = snprintf(dst, size, \"%lu.%lu.%lu.%lu\", SL_IPV4_BYTE(in->s_addr, 0),",
          "",
          "[Removed Lines]",
          "13305:     errno = EAFNOSUPPORT;",
          "",
          "[Added Lines]",
          "13305:     errno = ENOTSUP;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13320:   uint32_t a0, a1, a2, a3;",
          "13321:   uint8_t *db = (uint8_t *) dst;",
          "13322:   if (af != AF_INET) {",
          "13324:     return 0;",
          "13325:   }",
          "13326:   if (sscanf(src, \"%lu.%lu.%lu.%lu\", &a0, &a1, &a2, &a3) != 4) {",
          "",
          "[Removed Lines]",
          "13323:     errno = EAFNOSUPPORT;",
          "",
          "[Added Lines]",
          "13323:     errno = ENOTSUP;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "13443: void mg_set_non_blocking_mode(sock_t sock) {",
          "13444:   SlSockNonblocking_t opt;",
          "13445:   opt.NonblockingEnabled = 1;",
          "13446:   sl_SetSockOpt(sock, SL_SOL_SOCKET, SL_SO_NONBLOCKING, &opt, sizeof(opt));",
          "13447: }",
          "13449: static int mg_is_error(int n) {",
          "13451: }",
          "13453: void mg_sl_if_connect_tcp(struct mg_connection *nc,",
          "",
          "[Removed Lines]",
          "13450:   return (n < 0 && n != SL_EALREADY && n != SL_EAGAIN);",
          "",
          "[Added Lines]",
          "13445: #if SL_MAJOR_VERSION_NUM < 2",
          "13447: #else",
          "13448:   opt.NonBlockingEnabled = 1;",
          "13449: #endif",
          "13454:   return (n < 0 && n != SL_ERROR_BSD_EALREADY && n != SL_ERROR_BSD_EAGAIN);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "13648:        fd_flags, nc->flags, (int) nc->recv_mbuf.len, (int) nc->send_mbuf.len));",
          "13650:   if (nc->flags & MG_F_CONNECTING) {",
          "13652:       mg_if_connect_cb(nc, nc->err);",
          "13653:     } else {",
          "",
          "[Removed Lines]",
          "13651:     if (nc->flags & MG_F_UDP || nc->err != SL_EALREADY) {",
          "",
          "[Added Lines]",
          "13655:     if (nc->flags & MG_F_UDP || nc->err != SL_ERROR_BSD_EALREADY) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "13657:       if (fd_flags & _MG_F_FD_CAN_WRITE) {",
          "13658:         nc->err = sl_Connect(nc->sock, &nc->sa.sa, sizeof(nc->sa.sin));",
          "13659:         DBG((\"%p conn res=%d\", nc, nc->err));",
          "13663:           nc->err = 0;",
          "13664:         }",
          "13665:         if (nc->flags & MG_F_SSL && nc->err == 0) {",
          "",
          "[Removed Lines]",
          "13660:         if (nc->err == SL_ESECSNOVERIFY ||",
          "13662:             nc->err == SL_ESECDATEERROR) {",
          "",
          "[Added Lines]",
          "13664:         if (nc->err == SL_ERROR_BSD_ESECSNOVERIFY ||",
          "13666:             nc->err == SL_ERROR_BSD_ESECDATEERROR) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "13733:   sock_t max_fd = INVALID_SOCKET;",
          "13734:   int num_fds, num_ev = 0, num_timers = 0;",
          "",
          "[Removed Lines]",
          "13736:   SL_FD_ZERO(&read_set);",
          "13737:   SL_FD_ZERO(&write_set);",
          "13738:   SL_FD_ZERO(&err_set);",
          "",
          "[Added Lines]",
          "13740:   SL_SOCKET_FD_ZERO(&read_set);",
          "13741:   SL_SOCKET_FD_ZERO(&write_set);",
          "13742:   SL_SOCKET_FD_ZERO(&err_set);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "13751:       if (!(nc->flags & MG_F_WANT_WRITE) &&",
          "13752:           nc->recv_mbuf.len < nc->recv_mbuf_limit &&",
          "13753:           (!(nc->flags & MG_F_UDP) || nc->listener == NULL)) {",
          "13755:         if (max_fd == INVALID_SOCKET || nc->sock > max_fd) max_fd = nc->sock;",
          "13756:       }",
          "13758:       if (((nc->flags & MG_F_CONNECTING) && !(nc->flags & MG_F_WANT_READ)) ||",
          "13759:           (nc->send_mbuf.len > 0 && !(nc->flags & MG_F_CONNECTING))) {",
          "13762:         if (max_fd == INVALID_SOCKET || nc->sock > max_fd) max_fd = nc->sock;",
          "13763:       }",
          "13764:     }",
          "",
          "[Removed Lines]",
          "13754:         SL_FD_SET(nc->sock, &read_set);",
          "13760:         SL_FD_SET(nc->sock, &write_set);",
          "13761:         SL_FD_SET(nc->sock, &err_set);",
          "",
          "[Added Lines]",
          "13758:         SL_SOCKET_FD_SET(nc->sock, &read_set);",
          "13764:         SL_SOCKET_FD_SET(nc->sock, &write_set);",
          "13765:         SL_SOCKET_FD_SET(nc->sock, &err_set);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "13799:     if (nc->sock != INVALID_SOCKET) {",
          "13800:       if (num_ev > 0) {",
          "13801:         fd_flags =",
          "13803:                      (!(nc->flags & MG_F_UDP) || nc->listener == NULL)",
          "13804:                  ? _MG_F_FD_CAN_READ",
          "13805:                  : 0) |",
          "13808:       }",
          "13810:       if (nc->flags & MG_F_UDP && nc->send_mbuf.len > 0) {",
          "",
          "[Removed Lines]",
          "13802:             (SL_FD_ISSET(nc->sock, &read_set) &&",
          "13806:             (SL_FD_ISSET(nc->sock, &write_set) ? _MG_F_FD_CAN_WRITE : 0) |",
          "13807:             (SL_FD_ISSET(nc->sock, &err_set) ? _MG_F_FD_ERROR : 0);",
          "",
          "[Added Lines]",
          "13806:             (SL_SOCKET_FD_ISSET(nc->sock, &read_set) &&",
          "13810:             (SL_SOCKET_FD_ISSET(nc->sock, &write_set) ? _MG_F_FD_CAN_WRITE",
          "13811:                                                       : 0) |",
          "13812:             (SL_SOCKET_FD_ISSET(nc->sock, &err_set) ? _MG_F_FD_ERROR : 0);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "14087:     }",
          "14088:     if (ctx->ssl_server_name != NULL) {",
          "14089:       err = sl_SetSockOpt(nc->sock, SL_SOL_SOCKET,",
          "14091:                           ctx->ssl_server_name, strlen(ctx->ssl_server_name));",
          "14092:       DBG((\"DOMAIN_NAME_VERIFICATION %s -> %d\", ctx->ssl_server_name, err));",
          "14097:     }",
          "14098:   }",
          "14099:   return 0;",
          "",
          "[Removed Lines]",
          "14090:                           SO_SECURE_DOMAIN_NAME_VERIFICATION,",
          "14096:       if (err != 0 && err != SL_ENOPROTOOPT) return err;",
          "",
          "[Added Lines]",
          "14095:                           SL_SO_SECURE_DOMAIN_NAME_VERIFICATION,",
          "14102:       if (err != 0 && err != SL_ERROR_BSD_ENOPROTOOPT) return err;",
          "",
          "---------------"
        ],
        "mongoose.h||mongoose.h": [
          "File: mongoose.h -> mongoose.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: #if defined(TARGET_IS_MSP432P4XX) || defined(__MSP432P401R__)",
          "68: #define CS_PLATFORM CS_P_MSP432",
          "70: #define CS_PLATFORM CS_P_CC3200",
          "71: #elif defined(__unix__) || defined(__APPLE__)",
          "72: #define CS_PLATFORM CS_P_UNIX",
          "73: #elif defined(WINCE)",
          "",
          "[Removed Lines]",
          "69: #elif defined(cc3200)",
          "",
          "[Added Lines]",
          "69: #elif defined(cc3200) || defined(TARGET_IS_CC3200)",
          "71: #elif defined(cc3220) || defined(TARGET_IS_CC3220)",
          "72: #define CS_PLATFORM CS_P_CC3220",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1103: #ifndef CS_COMMON_PLATFORMS_SIMPLELINK_CS_SIMPLELINK_H_",
          "1104: #define CS_COMMON_PLATFORMS_SIMPLELINK_CS_SIMPLELINK_H_",
          "1110: #include <stdbool.h>",
          "",
          "[Removed Lines]",
          "1107: #if defined(MG_NET_IF) && MG_NET_IF == MG_NET_IF_SIMPLELINK && \\",
          "1108:     !defined(__SIMPLELINK_H__)",
          "",
          "[Added Lines]",
          "1108: #if defined(MG_NET_IF) && MG_NET_IF == MG_NET_IF_SIMPLELINK",
          "1111: #if !defined(__SIMPLELINK_H__)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1122: #if CS_PLATFORM == CS_P_CC3220",
          "1123: #include <ti/drivers/net/wifi/porting/user.h>",
          "1124: #include <ti/drivers/net/wifi/simplelink.h>",
          "1125: #include <ti/drivers/net/wifi/netapp.h>",
          "1126: #else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1128: #include <ti/drivers/net/wifi/sl_socket.h>",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1202: }",
          "1203: #endif",
          "1208: #ifdef MG_MODULE_LINES",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1212: #if SL_MAJOR_VERSION_NUM < 2",
          "1213: #define SL_ERROR_BSD_EAGAIN SL_EAGAIN",
          "1214: #define SL_ERROR_BSD_EALREADY SL_EALREADY",
          "1215: #define SL_ERROR_BSD_ENOPROTOOPT SL_ENOPROTOOPT",
          "1216: #define SL_ERROR_BSD_ESECDATEERROR SL_ESECDATEERROR",
          "1217: #define SL_ERROR_BSD_ESECSNOVERIFY SL_ESECSNOVERIFY",
          "1218: #define SL_SOCKET_FD_ZERO SL_FD_ZERO",
          "1219: #define SL_SOCKET_FD_SET SL_FD_SET",
          "1220: #define SL_SOCKET_FD_ISSET SL_FD_ISSET",
          "1221: #define SL_SO_SECURE_DOMAIN_NAME_VERIFICATION SO_SECURE_DOMAIN_NAME_VERIFICATION",
          "1222: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3942914945d13316b72d5d9057479c9a8cbdeb06",
      "candidate_info": {
        "commit_hash": "3942914945d13316b72d5d9057479c9a8cbdeb06",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/3942914945d13316b72d5d9057479c9a8cbdeb06",
        "files": [
          "docs/c-api/mqtt.h/intro.md",
          "docs/c-api/mqtt.h/mg_mqtt_match_topic_expression.md",
          "docs/c-api/mqtt.h/mg_mqtt_vmatch_topic_expression.md",
          "mongoose.c",
          "mongoose.h"
        ],
        "message": "Fix subscription to wildcard topics\n\n`mg_mqtt_match_topic_expression()` and friends are public now.\n\nSo far, only `#` is supported.\n\nPUBLISHED_FROM=20c031bcf34be84771c4a9c456318634eb9a517c",
        "before_after_code_files": [
          "mongoose.c||mongoose.c",
          "mongoose.h||mongoose.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "9703:   MG_FREE(proto_data);",
          "9704: }",
          "9706: void mg_set_protocol_mqtt(struct mg_connection *nc) {",
          "9707:   nc->proto_handler = mqtt_handler;",
          "9708:   nc->proto_data = MG_CALLOC(1, sizeof(struct mg_mqtt_proto_data));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9706: int mg_mqtt_match_topic_expression(struct mg_str exp, struct mg_str topic) {",
          "9708:   if (memchr(exp.p, '#', exp.len)) {",
          "9709:     exp.len -= 2;",
          "9710:     if (topic.len < exp.len) {",
          "9711:       exp.len = topic.len;",
          "9712:     }",
          "9713:   }",
          "9714:   return strncmp(topic.p, exp.p, exp.len) == 0;",
          "9715: }",
          "9717: int mg_mqtt_vmatch_topic_expression(const char *exp, struct mg_str topic) {",
          "9718:   return mg_mqtt_match_topic_expression(mg_mk_str(exp), topic);",
          "9719: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10040:   mg_mqtt_suback(nc, qoss, qoss_len, msg->message_id);",
          "10041: }",
          "10063: static void mg_mqtt_broker_handle_publish(struct mg_mqtt_broker *brk,",
          "10064:                                           struct mg_mqtt_message *msg) {",
          "10065:   struct mg_mqtt_session *s;",
          "",
          "[Removed Lines]",
          "10050: static int mg_mqtt_match_topic_expression(const char *exp,",
          "10051:                                           const struct mg_str *topic) {",
          "10053:   size_t len = strlen(exp);",
          "10054:   if (strchr(exp, '#')) {",
          "10055:     len -= 2;",
          "10056:     if (topic->len < len) {",
          "10057:       len = topic->len;",
          "10058:     }",
          "10059:   }",
          "10060:   return strncmp(topic->p, exp, len) == 0;",
          "10061: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "10068:   for (s = mg_mqtt_next(brk, NULL); s != NULL; s = mg_mqtt_next(brk, s)) {",
          "10069:     for (i = 0; i < s->num_subscriptions; i++) {",
          "10072:         char buf[100], *p = buf;",
          "10073:         mg_asprintf(&p, sizeof(buf), \"%.*s\", (int) msg->topic.len,",
          "10074:                     msg->topic.p);",
          "",
          "[Removed Lines]",
          "10070:       if (mg_mqtt_match_topic_expression(s->subscriptions[i].topic,",
          "10071:                                          &msg->topic)) {",
          "",
          "[Added Lines]",
          "10065:       if (mg_mqtt_vmatch_topic_expression(s->subscriptions[i].topic,",
          "10066:                                           msg->topic)) {",
          "",
          "---------------"
        ],
        "mongoose.h||mongoose.h": [
          "File: mongoose.h -> mongoose.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5152: int mg_mqtt_next_subscribe_topic(struct mg_mqtt_message *msg,",
          "5153:                                  struct mg_str *topic, uint8_t *qos, int pos);",
          "5155: #ifdef __cplusplus",
          "5156: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5160: int mg_mqtt_match_topic_expression(struct mg_str exp, struct mg_str topic);",
          "5166: int mg_mqtt_vmatch_topic_expression(const char *exp, struct mg_str topic);",
          "",
          "---------------"
        ]
      }
    }
  ]
}