{
  "cve_id": "CVE-2014-3971",
  "cve_desc": "The CmdAuthenticate::_authenticateX509 function in db/commands/authentication_commands.cpp in mongod in MongoDB 2.6.x before 2.6.2 allows remote attackers to cause a denial of service (daemon crash) by attempting authentication with an invalid X.509 client certificate.",
  "repo": "mongodb/mongo",
  "patch_hash": "c151e0660b9736fe66b224f1129a16871165251b",
  "patch_info": {
    "commit_hash": "c151e0660b9736fe66b224f1129a16871165251b",
    "repo": "mongodb/mongo",
    "commit_url": "https://github.com/mongodb/mongo/commit/c151e0660b9736fe66b224f1129a16871165251b",
    "files": [
      "src/mongo/db/commands/authentication_commands.cpp"
    ],
    "message": "SERVER-13573 Fix x.509 auth exception",
    "before_after_code_files": [
      "src/mongo/db/commands/authentication_commands.cpp||src/mongo/db/commands/authentication_commands.cpp"
    ]
  },
  "patch_diff": {
    "src/mongo/db/commands/authentication_commands.cpp||src/mongo/db/commands/authentication_commands.cpp": [
      "File: src/mongo/db/commands/authentication_commands.cpp -> src/mongo/db/commands/authentication_commands.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "303:         }",
      "304:         else {",
      "305:             std::string srvSubjectName = getSSLManager()->getServerSubjectName();",
      "312:             int clusterAuthMode = serverGlobalParams.clusterAuthMode.load();",
      "314:                 if (clusterAuthMode == ServerGlobalParams::ClusterAuthMode_undefined ||",
      "315:                     clusterAuthMode == ServerGlobalParams::ClusterAuthMode_keyFile) {",
      "316:                     return Status(ErrorCodes::AuthenticationFailed, \"The provided certificate \"",
      "",
      "[Removed Lines]",
      "306:             std::string srvClusterId = srvSubjectName.substr(srvSubjectName.find(\",OU=\"));",
      "307:             std::string peerClusterId = subjectName.substr(subjectName.find(\",OU=\"));",
      "309:             fassert(17002, !srvClusterId.empty() && srvClusterId != srvSubjectName);",
      "313:             if (srvClusterId == peerClusterId) {",
      "",
      "[Added Lines]",
      "307:             size_t srvClusterIdPos = srvSubjectName.find(\",OU=\");",
      "308:             size_t peerClusterIdPos = subjectName.find(\",OU=\");",
      "310:             std::string srvClusterId = srvClusterIdPos != std::string::npos ?",
      "311:                 srvSubjectName.substr(srvClusterIdPos) : \"\";",
      "312:             std::string peerClusterId = peerClusterIdPos != std::string::npos ?",
      "313:                 subjectName.substr(peerClusterIdPos) : \"\";",
      "317:             if (srvClusterId == peerClusterId && !srvClusterId.empty()) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c22fbc9bc636c4c730569c741a2fb6c46193bf5f",
      "candidate_info": {
        "commit_hash": "c22fbc9bc636c4c730569c741a2fb6c46193bf5f",
        "repo": "mongodb/mongo",
        "commit_url": "https://github.com/mongodb/mongo/commit/c22fbc9bc636c4c730569c741a2fb6c46193bf5f",
        "files": [
          "src/mongo/db/commands/authentication_commands.cpp"
        ],
        "message": "SERVER-13573 Fix x.509 auth exception\n\n(cherry picked from commit c151e0660b9736fe66b224f1129a16871165251b)",
        "before_after_code_files": [
          "src/mongo/db/commands/authentication_commands.cpp||src/mongo/db/commands/authentication_commands.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/mongo/db/commands/authentication_commands.cpp||src/mongo/db/commands/authentication_commands.cpp"
          ],
          "candidate": [
            "src/mongo/db/commands/authentication_commands.cpp||src/mongo/db/commands/authentication_commands.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/mongo/db/commands/authentication_commands.cpp||src/mongo/db/commands/authentication_commands.cpp": [
          "File: src/mongo/db/commands/authentication_commands.cpp -> src/mongo/db/commands/authentication_commands.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "303:         }",
          "304:         else {",
          "305:             std::string srvSubjectName = getSSLManager()->getServerSubjectName();",
          "312:             int clusterAuthMode = serverGlobalParams.clusterAuthMode.load();",
          "314:                 if (clusterAuthMode == ServerGlobalParams::ClusterAuthMode_undefined ||",
          "315:                     clusterAuthMode == ServerGlobalParams::ClusterAuthMode_keyFile) {",
          "316:                     return Status(ErrorCodes::AuthenticationFailed, \"The provided certificate \"",
          "",
          "[Removed Lines]",
          "306:             std::string srvClusterId = srvSubjectName.substr(srvSubjectName.find(\",OU=\"));",
          "307:             std::string peerClusterId = subjectName.substr(subjectName.find(\",OU=\"));",
          "309:             fassert(17002, !srvClusterId.empty() && srvClusterId != srvSubjectName);",
          "313:             if (srvClusterId == peerClusterId) {",
          "",
          "[Added Lines]",
          "307:             size_t srvClusterIdPos = srvSubjectName.find(\",OU=\");",
          "308:             size_t peerClusterIdPos = subjectName.find(\",OU=\");",
          "310:             std::string srvClusterId = srvClusterIdPos != std::string::npos ?",
          "311:                 srvSubjectName.substr(srvClusterIdPos) : \"\";",
          "312:             std::string peerClusterId = peerClusterIdPos != std::string::npos ?",
          "313:                 subjectName.substr(peerClusterIdPos) : \"\";",
          "317:             if (srvClusterId == peerClusterId && !srvClusterId.empty()) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "81967a2dce1898d1f03938f0b5c27b8a37873877",
      "candidate_info": {
        "commit_hash": "81967a2dce1898d1f03938f0b5c27b8a37873877",
        "repo": "mongodb/mongo",
        "commit_url": "https://github.com/mongodb/mongo/commit/81967a2dce1898d1f03938f0b5c27b8a37873877",
        "files": [
          "src/mongo/db/commands/authentication_commands.cpp",
          "src/mongo/db/commands/authentication_commands.h"
        ],
        "message": "SERVER-13945 Match x.509 cluster certs per attribute",
        "before_after_code_files": [
          "src/mongo/db/commands/authentication_commands.cpp||src/mongo/db/commands/authentication_commands.cpp",
          "src/mongo/db/commands/authentication_commands.h||src/mongo/db/commands/authentication_commands.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/mongo/db/commands/authentication_commands.cpp||src/mongo/db/commands/authentication_commands.cpp"
          ],
          "candidate": [
            "src/mongo/db/commands/authentication_commands.cpp||src/mongo/db/commands/authentication_commands.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/mongo/db/commands/authentication_commands.cpp||src/mongo/db/commands/authentication_commands.cpp": [
          "File: src/mongo/db/commands/authentication_commands.cpp -> src/mongo/db/commands/authentication_commands.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include \"mongo/db/commands/authentication_commands.h\"",
          "31: #include <boost/scoped_ptr.hpp>",
          "32: #include <string>",
          "33: #include <vector>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: #include <boost/algorithm/string.hpp>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52: #include \"mongo/util/concurrency/mutex.h\"",
          "53: #include \"mongo/util/md5.hpp\"",
          "54: #include \"mongo/util/net/ssl_manager.h\"",
          "56: namespace mongo {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: #include \"mongo/util/text.h\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "282:     }",
          "284: #ifdef MONGO_SSL",
          "285:     Status CmdAuthenticate::_authenticateX509(const UserName& user, const BSONObj& cmdObj) {",
          "286:         if (!getSSLManager()) {",
          "287:             return Status(ErrorCodes::ProtocolError,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "287:     void canonicalizeClusterDN(std::vector<std::string>* dn) {",
          "289:         for (std::vector<string>::iterator it=dn->begin(); it != dn->end(); it++) {",
          "290:             boost::algorithm::trim(*it);",
          "291:             if (!mongoutils::str::startsWith(it->c_str(), \"DC=\") &&",
          "292:                 !mongoutils::str::startsWith(it->c_str(), \"O=\") &&",
          "293:                 !mongoutils::str::startsWith(it->c_str(), \"OU=\")) {",
          "294:                 dn->erase(it--);",
          "295:             }",
          "296:         }",
          "297:         std::stable_sort(dn->begin(), dn->end());",
          "298:     }",
          "300:     bool CmdAuthenticate::_clusterIdMatch(const std::string& subjectName,",
          "301:                                           const std::string& srvSubjectName) {",
          "302:         std::vector<string> clientRDN = StringSplitter::split(subjectName, \",\");",
          "303:         std::vector<string> serverRDN = StringSplitter::split(srvSubjectName, \",\");",
          "305:         canonicalizeClusterDN(&clientRDN);",
          "306:         canonicalizeClusterDN(&serverRDN);",
          "308:         if (clientRDN.size() == 0 || clientRDN.size() != serverRDN.size()) {",
          "309:             return false;",
          "310:         }",
          "312:         for (size_t i=0; i < serverRDN.size(); i++) {",
          "313:             if(clientRDN[i] != serverRDN[i]) {",
          "314:                 return false;",
          "315:             }",
          "316:         }",
          "317:         return true;",
          "318:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "302:         }",
          "303:         else {",
          "304:             std::string srvSubjectName = getSSLManager()->getServerSubjectName();",
          "317:                 if (clusterAuthMode == ServerGlobalParams::ClusterAuthMode_undefined ||",
          "318:                     clusterAuthMode == ServerGlobalParams::ClusterAuthMode_keyFile) {",
          "319:                     return Status(ErrorCodes::AuthenticationFailed, \"The provided certificate \"",
          "",
          "[Removed Lines]",
          "306:             size_t srvClusterIdPos = srvSubjectName.find(\",OU=\");",
          "307:             size_t peerClusterIdPos = subjectName.find(\",OU=\");",
          "309:             std::string srvClusterId = srvClusterIdPos != std::string::npos ?",
          "310:                 srvSubjectName.substr(srvClusterIdPos) : \"\";",
          "311:             std::string peerClusterId = peerClusterIdPos != std::string::npos ?",
          "312:                 subjectName.substr(peerClusterIdPos) : \"\";",
          "315:             int clusterAuthMode = serverGlobalParams.clusterAuthMode.load();",
          "316:             if (srvClusterId == peerClusterId && !srvClusterId.empty()) {",
          "",
          "[Added Lines]",
          "342:             if (_clusterIdMatch(subjectName, srvSubjectName)) {",
          "343:                 int clusterAuthMode = serverGlobalParams.clusterAuthMode.load();",
          "",
          "---------------"
        ],
        "src/mongo/db/commands/authentication_commands.h||src/mongo/db/commands/authentication_commands.h": [
          "File: src/mongo/db/commands/authentication_commands.h -> src/mongo/db/commands/authentication_commands.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:                              const BSONObj& cmdObj);",
          "77:         Status _authenticateCR(const UserName& user, const BSONObj& cmdObj);",
          "78:         Status _authenticateX509(const UserName& user, const BSONObj& cmdObj);",
          "79:     };",
          "81:     extern CmdAuthenticate cmdAuthenticate;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79:         bool _clusterIdMatch(const std::string& subjectName, const std::string& srvSubjectName);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a277977911509f91e19847b85c2498437d8859a1",
      "candidate_info": {
        "commit_hash": "a277977911509f91e19847b85c2498437d8859a1",
        "repo": "mongodb/mongo",
        "commit_url": "https://github.com/mongodb/mongo/commit/a277977911509f91e19847b85c2498437d8859a1",
        "files": [
          "src/mongo/db/commands/authentication_commands.cpp"
        ],
        "message": "SERVER-10339 MONGODB-X509 client auth should not require clusterAuthMode",
        "before_after_code_files": [
          "src/mongo/db/commands/authentication_commands.cpp||src/mongo/db/commands/authentication_commands.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/mongo/db/commands/authentication_commands.cpp||src/mongo/db/commands/authentication_commands.cpp"
          ],
          "candidate": [
            "src/mongo/db/commands/authentication_commands.cpp||src/mongo/db/commands/authentication_commands.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/mongo/db/commands/authentication_commands.cpp||src/mongo/db/commands/authentication_commands.cpp": [
          "File: src/mongo/db/commands/authentication_commands.cpp -> src/mongo/db/commands/authentication_commands.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "249:         }",
          "250:         else {",
          "251:             StringData srvSubjectName = getSSLManager()->getServerSubjectName();",
          "256:             if (srvClusterId == peerClusterId) {",
          "258:                     return Status(ErrorCodes::AuthenticationFailed,",
          "259:                                   \"X509 authentication is not allowed for cluster authentication\");",
          "260:                 }",
          "",
          "[Removed Lines]",
          "252:             StringData srvClusterId = srvSubjectName.substr(0, srvSubjectName.find(\"/CN\")+1);",
          "253:             StringData peerClusterId = subjectName.substr(0, subjectName.find(\"/CN\")+1);",
          "257:                 if (cmdLine.clusterAuthMode == \"keyfile\") {",
          "",
          "[Added Lines]",
          "252:             StringData srvClusterId = srvSubjectName.substr(srvSubjectName.find(\",OU=\"));",
          "253:             StringData peerClusterId = subjectName.substr(subjectName.find(\",OU=\"));",
          "255:             fassert(17002, !srvClusterId.empty() && srvClusterId != srvSubjectName);",
          "259:                 if (cmdLine.clusterAuthMode.empty() || cmdLine.clusterAuthMode == \"keyfile\") {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1ccb9e93cd3013798cbfe6f5b6322ec5f6137906",
      "candidate_info": {
        "commit_hash": "1ccb9e93cd3013798cbfe6f5b6322ec5f6137906",
        "repo": "mongodb/mongo",
        "commit_url": "https://github.com/mongodb/mongo/commit/1ccb9e93cd3013798cbfe6f5b6322ec5f6137906",
        "files": [
          "src/mongo/db/commands/authentication_commands.cpp"
        ],
        "message": "SERVER-10979 Fix MONGODB-X509 on Windows\n\nStringData isn't the right type in this context. Use\nstd::string instead.",
        "before_after_code_files": [
          "src/mongo/db/commands/authentication_commands.cpp||src/mongo/db/commands/authentication_commands.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/mongo/db/commands/authentication_commands.cpp||src/mongo/db/commands/authentication_commands.cpp"
          ],
          "candidate": [
            "src/mongo/db/commands/authentication_commands.cpp||src/mongo/db/commands/authentication_commands.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/mongo/db/commands/authentication_commands.cpp||src/mongo/db/commands/authentication_commands.cpp": [
          "File: src/mongo/db/commands/authentication_commands.cpp -> src/mongo/db/commands/authentication_commands.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "259:         ClientBasic *client = ClientBasic::getCurrent();",
          "260:         AuthorizationSession* authorizationSession = client->getAuthorizationSession();",
          "263:         if (user.getUser() != subjectName) {",
          "264:             return Status(ErrorCodes::AuthenticationFailed,",
          "265:                           \"There is no x.509 client certificate matching the user.\");",
          "266:         }",
          "267:         else {",
          "272:             fassert(17002, !srvClusterId.empty() && srvClusterId != srvSubjectName);",
          "",
          "[Removed Lines]",
          "261:         StringData subjectName = client->port()->getX509SubjectName();",
          "268:             StringData srvSubjectName = getSSLManager()->getServerSubjectName();",
          "269:             StringData srvClusterId = srvSubjectName.substr(srvSubjectName.find(\",OU=\"));",
          "270:             StringData peerClusterId = subjectName.substr(subjectName.find(\",OU=\"));",
          "",
          "[Added Lines]",
          "261:         std::string subjectName = client->port()->getX509SubjectName();",
          "268:             std::string srvSubjectName = getSSLManager()->getServerSubjectName();",
          "269:             std::string srvClusterId = srvSubjectName.substr(srvSubjectName.find(\",OU=\"));",
          "270:             std::string peerClusterId = subjectName.substr(subjectName.find(\",OU=\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e23ee681ca40f271ddbbd840f155a9b13102f148",
      "candidate_info": {
        "commit_hash": "e23ee681ca40f271ddbbd840f155a9b13102f148",
        "repo": "mongodb/mongo",
        "commit_url": "https://github.com/mongodb/mongo/commit/e23ee681ca40f271ddbbd840f155a9b13102f148",
        "files": [
          "src/mongo/SConscript",
          "src/mongo/client/dbclient.cpp",
          "src/mongo/client/dbclientinterface.h",
          "src/mongo/db/auth/authorization_session.cpp",
          "src/mongo/db/auth/authorization_session.h",
          "src/mongo/db/cmdline.cpp",
          "src/mongo/db/cmdline.h",
          "src/mongo/db/commands/authentication_commands.cpp",
          "src/mongo/db/commands/authentication_commands.h",
          "src/mongo/db/range_deleter_db_env.cpp",
          "src/mongo/db/repl/rs.cpp",
          "src/mongo/s/d_migrate.cpp",
          "src/mongo/s/writeback_listener.cpp",
          "src/mongo/util/net/message_port.h",
          "src/mongo/util/net/message_server_port.cpp",
          "src/mongo/util/net/sock.cpp",
          "src/mongo/util/net/sock.h",
          "src/mongo/util/net/ssl_manager.cpp",
          "src/mongo/util/net/ssl_manager.h"
        ],
        "message": "SERVER-7455 SERVER-7961 x.509 authentication and keyfile replacement\n\nBasic support for x.509 authentication of clients and for internal\nx.509 authentication of cluster members.",
        "before_after_code_files": [
          "src/mongo/client/dbclient.cpp||src/mongo/client/dbclient.cpp",
          "src/mongo/client/dbclientinterface.h||src/mongo/client/dbclientinterface.h",
          "src/mongo/db/auth/authorization_session.cpp||src/mongo/db/auth/authorization_session.cpp",
          "src/mongo/db/auth/authorization_session.h||src/mongo/db/auth/authorization_session.h",
          "src/mongo/db/cmdline.cpp||src/mongo/db/cmdline.cpp",
          "src/mongo/db/cmdline.h||src/mongo/db/cmdline.h",
          "src/mongo/db/commands/authentication_commands.cpp||src/mongo/db/commands/authentication_commands.cpp",
          "src/mongo/db/commands/authentication_commands.h||src/mongo/db/commands/authentication_commands.h",
          "src/mongo/db/range_deleter_db_env.cpp||src/mongo/db/range_deleter_db_env.cpp",
          "src/mongo/db/repl/rs.cpp||src/mongo/db/repl/rs.cpp",
          "src/mongo/s/d_migrate.cpp||src/mongo/s/d_migrate.cpp",
          "src/mongo/s/writeback_listener.cpp||src/mongo/s/writeback_listener.cpp",
          "src/mongo/util/net/message_port.h||src/mongo/util/net/message_port.h",
          "src/mongo/util/net/message_server_port.cpp||src/mongo/util/net/message_server_port.cpp",
          "src/mongo/util/net/sock.cpp||src/mongo/util/net/sock.cpp",
          "src/mongo/util/net/sock.h||src/mongo/util/net/sock.h",
          "src/mongo/util/net/ssl_manager.cpp||src/mongo/util/net/ssl_manager.cpp",
          "src/mongo/util/net/ssl_manager.h||src/mongo/util/net/ssl_manager.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/mongo/db/commands/authentication_commands.cpp||src/mongo/db/commands/authentication_commands.cpp"
          ],
          "candidate": [
            "src/mongo/db/commands/authentication_commands.cpp||src/mongo/db/commands/authentication_commands.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/mongo/client/dbclient.cpp||src/mongo/client/dbclient.cpp": [
          "File: src/mongo/client/dbclient.cpp -> src/mongo/client/dbclient.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "568:                     errmsg,",
          "569:                     _authMongoCR(userSource, user, password, errmsg, digestPassword));",
          "570:         }",
          "571:         else if (saslClientAuthenticate != NULL) {",
          "572:             uassertStatusOK(saslClientAuthenticate(this, params));",
          "573:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "571:         else if (mechanism == StringData(\"MONGODB-X509\", StringData::LiteralTag())){",
          "572:             std::string userSource;",
          "573:             uassertStatusOK(bsonExtractStringField(params,",
          "574:                                                    saslCommandUserSourceFieldName,",
          "575:                                                    &userSource));",
          "576:             std::string user;",
          "577:             uassertStatusOK(bsonExtractStringField(params,",
          "578:                                                    saslCommandUserFieldName,",
          "579:                                                    &user));",
          "581:             std::string errmsg;",
          "582:             uassert(ErrorCodes::AuthenticationFailed,",
          "583:                     errmsg,",
          "584:                     _authMongoX509(userSource, user, errmsg));",
          "585:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "601:         }",
          "602:     }",
          "604:     bool DBClientWithCommands::_authMongoCR(const string &dbname,",
          "605:                                             const string &username,",
          "606:                                             const string &password_text,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "619:     bool DBClientWithCommands::_authMongoX509(const string&dbname,",
          "620:                                               const string &username,",
          "621:                                               string& errmsg){",
          "622:         BSONObj authCmd;",
          "623:         BSONObjBuilder cmdBuilder;",
          "624:         cmdBuilder << \"authenticate\" << 1 << \"mechanism\" << \"MONGODB-X509\" << \"user\" << username;",
          "625:         authCmd = cmdBuilder.done();",
          "627:         BSONObj info;",
          "628:         if( runCommand(dbname, authCmd, info) ) {",
          "629:             return true;",
          "630:         }",
          "632:         errmsg = info.toString();",
          "633:         return false;",
          "634:     }",
          "",
          "---------------"
        ],
        "src/mongo/client/dbclientinterface.h||src/mongo/client/dbclientinterface.h": [
          "File: src/mongo/client/dbclientinterface.h -> src/mongo/client/dbclientinterface.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "980:                           string& errmsg,",
          "981:                           bool digestPassword);",
          "983:     private:",
          "984:         enum QueryOptions _cachedAvailableOptions;",
          "985:         bool _haveCachedAvailableOptions;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "988:         bool _authMongoX509(const string&dbname,",
          "989:                             const string &username,",
          "990:                             string& errmsg);",
          "",
          "---------------"
        ],
        "src/mongo/db/auth/authorization_session.cpp||src/mongo/db/auth/authorization_session.cpp": [
          "File: src/mongo/db/auth/authorization_session.cpp -> src/mongo/db/auth/authorization_session.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:         return Status::OK();",
          "119:     }",
          "123:         ActionSet actions;",
          "124:         actions.addAllActions();",
          "",
          "[Removed Lines]",
          "121:     void AuthorizationSession::grantInternalAuthorization(const std::string& userName) {",
          "122:         Principal* principal = new Principal(UserName(userName, \"local\"));",
          "",
          "[Added Lines]",
          "121:     void AuthorizationSession::grantInternalAuthorization(const UserName& userName) {",
          "122:         Principal* principal = new Principal(userName);",
          "",
          "---------------"
        ],
        "src/mongo/db/auth/authorization_session.h||src/mongo/db/auth/authorization_session.h": [
          "File: src/mongo/db/auth/authorization_session.h -> src/mongo/db/auth/authorization_session.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:         Status acquirePrivilege(const Privilege& privilege,",
          "75:                                 const UserName& authorizingUser);",
          "82:         bool hasInternalAuthorization();",
          "",
          "[Removed Lines]",
          "79:         void grantInternalAuthorization(const std::string& userName);",
          "",
          "[Added Lines]",
          "79:         void grantInternalAuthorization(const UserName& userName);",
          "",
          "---------------"
        ],
        "src/mongo/db/cmdline.cpp||src/mongo/db/cmdline.cpp": [
          "File: src/mongo/db/cmdline.cpp -> src/mongo/db/cmdline.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:         (\"sslOnNormalPorts\" , \"use ssl on configured ports\" )",
          "101:         (\"sslPEMKeyFile\" , po::value<string>(&cmdLine.sslPEMKeyFile), \"PEM file for ssl\" )",
          "102:         (\"sslPEMKeyPassword\" , new PasswordValue(&cmdLine.sslPEMKeyPassword) , \"PEM file password\" )",
          "103:         (\"sslCAFile\", po::value<std::string>(&cmdLine.sslCAFile),",
          "104:          \"Certificate Authority file for SSL\")",
          "105:         (\"sslCRLFile\", po::value<std::string>(&cmdLine.sslCRLFile),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "103:         (\"sslClusterFile\", po::value<string>(&cmdLine.sslClusterFile),",
          "104:          \"Key file for internal SSL authentication\" )",
          "105:         (\"sslClusterPassword\", new PasswordValue(&cmdLine.sslClusterPassword),",
          "106:          \"Internal authentication key file password\" )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "435:         }",
          "436:         else if (cmdLine.sslPEMKeyFile.size() ||",
          "437:                  cmdLine.sslPEMKeyPassword.size() ||",
          "438:                  cmdLine.sslCAFile.size() ||",
          "439:                  cmdLine.sslCRLFile.size() ||",
          "440:                  cmdLine.sslWeakCertificateValidation ||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "442:                  cmdLine.sslClusterFile.size() ||",
          "443:                  cmdLine.sslClusterPassword.size() ||",
          "",
          "---------------"
        ],
        "src/mongo/db/cmdline.h||src/mongo/db/cmdline.h": [
          "File: src/mongo/db/cmdline.h -> src/mongo/db/cmdline.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:         bool sslOnNormalPorts;      // --sslOnNormalPorts",
          "137:         std::string sslPEMKeyFile;       // --sslPEMKeyFile",
          "138:         std::string sslPEMKeyPassword;   // --sslPEMKeyPassword",
          "139:         std::string sslCAFile;      // --sslCAFile",
          "140:         std::string sslCRLFile;     // --sslCRLFile",
          "141:         bool sslWeakCertificateValidation;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "139:         std::string sslClusterFile;       // --sslInternalKeyFile",
          "140:         std::string sslClusterPassword;   // --sslInternalKeyPassword",
          "",
          "---------------"
        ],
        "src/mongo/db/commands/authentication_commands.cpp||src/mongo/db/commands/authentication_commands.cpp": [
          "File: src/mongo/db/commands/authentication_commands.cpp -> src/mongo/db/commands/authentication_commands.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"mongo/platform/random.h\"",
          "36: #include \"mongo/util/concurrency/mutex.h\"",
          "37: #include \"mongo/util/md5.hpp\"",
          "39: namespace mongo {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: #include \"mongo/util/net/ssl_manager.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:     } cmdGetNonce;",
          "96:     bool CmdAuthenticate::run(const string& dbname , BSONObj& cmdObj, int, string& errmsg, BSONObjBuilder& result, bool fromRepl) {",
          "98:         log() << \" authenticate db: \" << dbname << \" \" << cmdObj << endl;",
          "100:         string user = cmdObj.getStringField(\"user\");",
          "102:         if (!_areNonceAuthenticateCommandsEnabled) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100:         std::string mechanism = cmdObj.getStringField(\"mechanism\");",
          "101:         if (mechanism.empty() || mechanism == \"MONGODB-CR\") {",
          "102:             return authenticateCR(dbname, cmdObj, errmsg, result);",
          "103:         }",
          "104: #ifdef MONGO_SSL",
          "105:         if (mechanism == \"MONGODB-X509\") {",
          "106:             return authenticateX509(dbname, cmdObj, errmsg, result);",
          "107:         }",
          "108: #endif",
          "109:         errmsg = \"Unsupported mechanism: \" + mechanism;",
          "110:         result.append(saslCommandCodeFieldName, ErrorCodes::BadValue);",
          "111:         return false;",
          "112:     }",
          "114:     bool CmdAuthenticate::authenticateCR(const string& dbname,",
          "115:                                          BSONObj& cmdObj,",
          "116:                                          string& errmsg,",
          "117:                                          BSONObjBuilder& result) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "194:         result.append( \"user\" , user );",
          "195:         return true;",
          "196:     }",
          "197:     CmdAuthenticate cmdAuthenticate;",
          "199:     class CmdLogout : public Command {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217: #ifdef MONGO_SSL",
          "218:     bool CmdAuthenticate::authenticateX509(const string& dbname,",
          "219:                                            BSONObj& cmdObj,",
          "220:                                            string& errmsg,",
          "221:                                            BSONObjBuilder& result) {",
          "222:         if(dbname != \"$external\") {",
          "223:             errmsg = \"X.509 authentication must always use the $external database.\";",
          "224:             result.append(saslCommandCodeFieldName, ErrorCodes::AuthenticationFailed);",
          "225:             return false;",
          "226:         }",
          "228:         std::string user = cmdObj.getStringField(\"user\");",
          "229:         ClientBasic *client = ClientBasic::getCurrent();",
          "230:         AuthorizationSession* authorizationSession = client->getAuthorizationSession();",
          "231:         StringData subjectName = client->port()->getX509SubjectName();",
          "233:         if (user != subjectName) {",
          "234:             errmsg = \"There is no x.509 client certificate matching the user.\";",
          "235:             result.append(saslCommandCodeFieldName, ErrorCodes::AuthenticationFailed);",
          "236:             return false;",
          "237:         }",
          "238:         else {",
          "239:             StringData srvSubjectName = getSSLManager()->getSubjectName();",
          "240:             StringData srvClusterId = srvSubjectName.substr(0, srvSubjectName.find(\"/CN\")+1);",
          "241:             StringData peerClusterId = subjectName.substr(0, subjectName.find(\"/CN\")+1);",
          "244:             if (srvClusterId == peerClusterId) {",
          "245:                 authorizationSession->grantInternalAuthorization(UserName(user, \"$external\"));",
          "246:             }",
          "248:             else {",
          "249:                 Principal* principal = new Principal(UserName(user, \"$external\"));",
          "250:                 principal->setImplicitPrivilegeAcquisition(true);",
          "251:                 authorizationSession->addAuthorizedPrincipal(principal);",
          "252:             }",
          "253:             result.append( \"dbname\" , dbname );",
          "254:             result.append( \"user\" , user );",
          "255:             return true;",
          "256:         }",
          "257:     }",
          "258: #endif",
          "",
          "---------------"
        ],
        "src/mongo/db/commands/authentication_commands.h||src/mongo/db/commands/authentication_commands.h": [
          "File: src/mongo/db/commands/authentication_commands.h -> src/mongo/db/commands/authentication_commands.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:                                            std::vector<Privilege>* out) {} // No auth required",
          "38:         CmdAuthenticate() : Command(\"authenticate\") {}",
          "39:         bool run(const string& dbname , BSONObj& cmdObj, int options, string& errmsg, BSONObjBuilder& result, bool fromRepl);",
          "40:     };",
          "42:     extern CmdAuthenticate cmdAuthenticate;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:     private:",
          "42:         bool authenticateCR(const string& dbname,",
          "43:                             BSONObj& cmdObj,",
          "44:                             string& errmsg,",
          "45:                             BSONObjBuilder& result);",
          "46:         bool authenticateX509(const string& dbname,",
          "47:                               BSONObj& cmdObj,",
          "48:                               string& errmsg,",
          "49:                               BSONObjBuilder& result);",
          "",
          "---------------"
        ],
        "src/mongo/db/range_deleter_db_env.cpp||src/mongo/db/range_deleter_db_env.cpp": [
          "File: src/mongo/db/range_deleter_db_env.cpp -> src/mongo/db/range_deleter_db_env.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:         }",
          "52:         if (AuthorizationManager::isAuthEnabled()) {",
          "54:         }",
          "56:         ShardForceVersionOkModeBlock forceVersion;",
          "",
          "[Removed Lines]",
          "53:             cc().getAuthorizationSession()->grantInternalAuthorization(\"_cleanupOldData\");",
          "",
          "[Added Lines]",
          "53:             cc().getAuthorizationSession()->grantInternalAuthorization(",
          "54:                     UserName(\"_cleanupOldData\", \"local\"));",
          "",
          "---------------"
        ],
        "src/mongo/db/repl/rs.cpp||src/mongo/db/repl/rs.cpp": [
          "File: src/mongo/db/repl/rs.cpp -> src/mongo/db/repl/rs.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "878:     void replLocalAuth() {",
          "879:         if (!AuthorizationManager::isAuthEnabled())",
          "880:             return;",
          "882:     }",
          "884:     const char* ReplSetImpl::_initialSyncFlagString = \"doingInitialSync\";",
          "",
          "[Removed Lines]",
          "881:         cc().getAuthorizationSession()->grantInternalAuthorization(\"_repl\");",
          "",
          "[Added Lines]",
          "881:         cc().getAuthorizationSession()->grantInternalAuthorization(",
          "882:                 UserName(\"_repl\", \"local\"));",
          "",
          "---------------"
        ],
        "src/mongo/s/d_migrate.cpp||src/mongo/s/d_migrate.cpp": [
          "File: src/mongo/s/d_migrate.cpp -> src/mongo/s/d_migrate.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1879:         Client::initThread( \"migrateThread\" );",
          "1880:         if (AuthorizationManager::isAuthEnabled()) {",
          "1881:             ShardedConnectionInfo::addHook();",
          "1883:         }",
          "1884:         migrateStatus.go();",
          "1885:         cc().shutdown();",
          "",
          "[Removed Lines]",
          "1882:             cc().getAuthorizationSession()->grantInternalAuthorization(\"_migrateThread\");",
          "",
          "[Added Lines]",
          "1882:             cc().getAuthorizationSession()->grantInternalAuthorization(",
          "1883:                     UserName(\"_migrateThread\", \"local\"));",
          "",
          "---------------"
        ],
        "src/mongo/s/writeback_listener.cpp||src/mongo/s/writeback_listener.cpp": [
          "File: src/mongo/s/writeback_listener.cpp -> src/mongo/s/writeback_listener.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "299:                             ClientInfo * ci = r.getClientInfo();",
          "300:                             if (AuthorizationManager::isAuthEnabled()) {",
          "301:                                 ci->getAuthorizationSession()->grantInternalAuthorization(",
          "303:                             }",
          "304:                             ci->noAutoSplit();",
          "",
          "[Removed Lines]",
          "302:                                         \"_writebackListener\");",
          "",
          "[Added Lines]",
          "302:                                         UserName(\"_writebackListener\", \"local\"));",
          "",
          "---------------"
        ],
        "src/mongo/util/net/message_port.h||src/mongo/util/net/message_port.h": [
          "File: src/mongo/util/net/message_port.h -> src/mongo/util/net/message_port.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:         long long connectionId() const { return _connectionId; }",
          "41:         void setConnectionId( long long connectionId );",
          "43:     public:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:         void setX509SubjectName(const std::string& x509SubjectName){",
          "44:             _x509SubjectName = x509SubjectName;",
          "45:         }",
          "47:         std::string getX509SubjectName(){",
          "48:             return _x509SubjectName;",
          "49:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:     private:",
          "50:         long long _connectionId;",
          "51:     };",
          "53:     class MessagingPort : public AbstractMessagingPort {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59:         std::string _x509SubjectName;",
          "",
          "---------------"
        ],
        "src/mongo/util/net/message_server_port.cpp||src/mongo/util/net/message_server_port.cpp": [
          "File: src/mongo/util/net/message_server_port.cpp -> src/mongo/util/net/message_server_port.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "186:                 otherSide = p->psock->remoteString();",
          "189:                 handler->connected( p.get() );",
          "191:                 while ( ! inShutdown() ) {",
          "",
          "[Removed Lines]",
          "188:                 p->psock->doSSLHandshake();",
          "",
          "[Added Lines]",
          "189: #ifdef MONGO_SSL",
          "190:                 std::string x509SubjectName = p->psock->doSSLHandshake();",
          "191:                 inPort->setX509SubjectName(x509SubjectName);",
          "192: #endif",
          "",
          "---------------"
        ],
        "src/mongo/util/net/sock.cpp||src/mongo/util/net/sock.cpp": [
          "File: src/mongo/util/net/sock.cpp -> src/mongo/util/net/sock.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "451:     void Socket::secureAccepted( SSLManagerInterface* ssl ) {",
          "452:         _sslManager = ssl;",
          "453:     }",
          "459:         fassert(16506, _fd);",
          "460:         _ssl = _sslManager->accept(_fd);",
          "463:     }",
          "465:     class ConnectBG : public BackgroundJob {",
          "466:     public:",
          "",
          "[Removed Lines]",
          "454: #endif",
          "456:     void Socket::doSSLHandshake() {",
          "457: #ifdef MONGO_SSL",
          "458:         if (!_sslManager) return;",
          "461:         _sslManager->validatePeerCertificate(_ssl);",
          "462: #endif",
          "",
          "[Added Lines]",
          "455:     std::string Socket::doSSLHandshake() {",
          "456:         if (!_sslManager) return \"\";",
          "459:         return _sslManager->validatePeerCertificate(_ssl);",
          "461: #endif",
          "",
          "---------------"
        ],
        "src/mongo/util/net/sock.h||src/mongo/util/net/sock.h": [
          "File: src/mongo/util/net/sock.h -> src/mongo/util/net/sock.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "232:         void doSSLHandshake();",
          "",
          "[Added Lines]",
          "233:         std::string doSSLHandshake();",
          "",
          "---------------"
        ],
        "src/mongo/util/net/ssl_manager.cpp||src/mongo/util/net/ssl_manager.cpp": [
          "File: src/mongo/util/net/ssl_manager.cpp -> src/mongo/util/net/ssl_manager.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:             virtual SSL* accept(int fd);",
          "153:             virtual void cleanupThreadLocals();",
          "155:             virtual int SSL_read(SSL* ssl, void* buf, int num);",
          "157:             virtual int SSL_write(SSL* ssl, const void* buf, int num);",
          "",
          "[Removed Lines]",
          "151:             virtual void validatePeerCertificate(const SSL* ssl);",
          "",
          "[Added Lines]",
          "151:             virtual std::string validatePeerCertificate(const SSL* ssl);",
          "155:             virtual std::string getSubjectName() {",
          "156:                 return _subjectName;",
          "157:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "171:             std::string _password;",
          "172:             bool _validateCertificates;",
          "173:             bool _weakValidation;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178:             std::string _subjectName;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "245:         return NULL;",
          "246:     }",
          "248:     SSLManagerInterface::~SSLManagerInterface() {}",
          "250:     SSLManager::SSLManager(const Params& params) :",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "255:     std::string getCertificateSubjectName(X509* cert) {",
          "256:         std::string result;",
          "258:         char* asciiName = X509_NAME_oneline(X509_get_subject_name(cert), NULL, 0);",
          "259:         if (asciiName) {",
          "260:             result = asciiName;",
          "261:             free(asciiName);",
          "262:         }",
          "263:         return result;",
          "264:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "388:                     << endl;",
          "389:             return false;",
          "390:         }",
          "391:         return true;",
          "392:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "410:         BIO *in = BIO_new(BIO_s_file_internal());",
          "411:         if(NULL == in){",
          "412:             error() << \"failed to allocate BIO object: \" <<",
          "413:                 _getSSLErrorMessage(ERR_get_error()) << endl;",
          "414:             return false;",
          "415:         }",
          "416:         ON_BLOCK_EXIT(BIO_free, in);",
          "418:         if (BIO_read_filename(in, keyFile.c_str()) <= 0){",
          "419:             error() << \"cannot read key file: \" << keyFile << ' ' <<",
          "420:                 _getSSLErrorMessage(ERR_get_error()) << endl;",
          "421:             return false;",
          "422:         }",
          "424:         X509* x509 = PEM_read_bio_X509(in, NULL, &SSLManager::password_cb, this);",
          "425:         if (NULL == x509) {",
          "426:             error() << \"cannot retreive certificate from keyfile: \" << keyFile << ' ' <<",
          "427:                 _getSSLErrorMessage(ERR_get_error()) << endl;",
          "428:             return false;",
          "429:         }",
          "430:         ON_BLOCK_EXIT(X509_free, x509);",
          "431:         _subjectName = getCertificateSubjectName(x509);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "474:         return ssl;",
          "475:     }",
          "483:             if (_weakValidation) {",
          "484:                 warning() << \"no SSL certificate provided by peer\" << endl;",
          "485:             }",
          "",
          "[Removed Lines]",
          "477:     void SSLManager::validatePeerCertificate(const SSL* ssl) {",
          "478:         if (!_validateCertificates) return;",
          "480:         X509* cert = SSL_get_peer_certificate(ssl);",
          "482:         if (cert == NULL) { // no certificate presented by peer",
          "",
          "[Added Lines]",
          "519:     std::string SSLManager::validatePeerCertificate(const SSL* ssl) {",
          "520:         if (!_validateCertificates) return \"\";",
          "522:         X509* peerCert = SSL_get_peer_certificate(ssl);",
          "524:         if (NULL == peerCert) { // no certificate presented by peer",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "487:                 error() << \"no SSL certificate provided by peer; connection rejected\" << endl;",
          "488:                 throw SocketException(SocketException::CONNECT_ERROR, \"\");",
          "489:             }",
          "491:         }",
          "494:         long result = SSL_get_verify_result(ssl);",
          "",
          "[Removed Lines]",
          "490:             return;",
          "492:         ON_BLOCK_EXIT(X509_free, cert);",
          "",
          "[Added Lines]",
          "532:             return \"\";",
          "534:         ON_BLOCK_EXIT(X509_free, peerCert);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "498:                 X509_verify_cert_error_string(result) << endl;",
          "499:             throw SocketException(SocketException::CONNECT_ERROR, \"\");",
          "500:         }",
          "503:     }",
          "505:     void SSLManager::cleanupThreadLocals() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "545:         return getCertificateSubjectName(peerCert);",
          "",
          "---------------"
        ],
        "src/mongo/util/net/ssl_manager.h||src/mongo/util/net/ssl_manager.h": [
          "File: src/mongo/util/net/ssl_manager.h -> src/mongo/util/net/ssl_manager.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "51:         virtual void validatePeerCertificate(const SSL* ssl) = 0;",
          "",
          "[Added Lines]",
          "50:         virtual std::string validatePeerCertificate(const SSL* ssl) = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:         virtual void cleanupThreadLocals() = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:         virtual std::string getSubjectName() = 0;",
          "",
          "---------------"
        ]
      }
    }
  ]
}