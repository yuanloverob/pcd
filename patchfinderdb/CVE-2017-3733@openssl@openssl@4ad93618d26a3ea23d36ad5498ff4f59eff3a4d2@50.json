{
  "cve_id": "CVE-2017-3733",
  "cve_desc": "During a renegotiation handshake if the Encrypt-Then-Mac extension is negotiated where it was not in the original handshake (or vice-versa) then this can cause OpenSSL 1.1.0 before 1.1.0e to crash (dependent on ciphersuite). Both clients and servers are affected.",
  "repo": "openssl/openssl",
  "patch_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
  "patch_info": {
    "commit_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "files": [
      "include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h",
      "ssl/t1_enc.c",
      "ssl/t1_lib.c"
    ],
    "message": "Don't change the state of the ETM flags until CCS processing\n\nChanging the ciphersuite during a renegotiation can result in a crash\nleading to a DoS attack. ETM has not been implemented in 1.1.0 for DTLS\nso this is TLS only.\n\nThe problem is caused by changing the flag indicating whether to use ETM\nor not immediately on negotiation of ETM, rather than at CCS. Therefore,\nduring a renegotiation, if the ETM state is changing (usually due to a\nchange of ciphersuite), then an error/crash will occur.\n\nDue to the fact that there are separate CCS messages for read and write\nwe actually now need two flags to determine whether to use ETM or not.\n\nCVE-2017-3733\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl3.h||include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h||ssl/ssl_locl.h",
      "ssl/t1_enc.c||ssl/t1_enc.c",
      "ssl/t1_lib.c||ssl/t1_lib.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl3.h||include/openssl/ssl3.h": [
      "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "264: # define TLS1_FLAGS_SKIP_CERT_VERIFY             0x0010",
      "270: # define TLS1_FLAGS_RECEIVED_EXTMS               0x0200",
      "272: # define SSL3_MT_HELLO_REQUEST                   0",
      "273: # define SSL3_MT_CLIENT_HELLO                    1",
      "274: # define SSL3_MT_SERVER_HELLO                    2",
      "",
      "[Removed Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             0x0100",
      "",
      "[Added Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_READ        0x0100",
      "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             TLS1_FLAGS_ENCRYPT_THEN_MAC_READ",
      "273: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE       0x0400",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
      "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:     if (type == SSL3_RT_APPLICATION_DATA &&",
      "396:         u_len >= 4 * (max_send_fragment = s->max_send_fragment) &&",
      "397:         s->compress == NULL && s->msg_callback == NULL &&",
      "399:         EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_write_ctx)) &",
      "400:         EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK) {",
      "401:         unsigned char aad[13];",
      "",
      "[Removed Lines]",
      "398:         !SSL_USE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "[Added Lines]",
      "398:         !SSL_WRITE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "795:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "796:                                          &(outbuf[j][wr[j].length + eivlen]),",
      "797:                                          1) < 0)",
      "",
      "[Removed Lines]",
      "794:         if (!SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "794:         if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "814:         goto err;",
      "816:     for (j = 0; j < numpipes; j++) {",
      "818:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "819:                                          outbuf[j] + wr[j].length, 1) < 0)",
      "820:                 goto err;",
      "",
      "[Removed Lines]",
      "817:         if (SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "817:         if (SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------"
    ],
    "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
      "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "350:         unsigned char *mac;",
      "351:         mac_size = EVP_MD_CTX_size(s->read_hash);",
      "352:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
      "",
      "[Removed Lines]",
      "349:     if (SSL_USE_ETM(s) && s->read_hash) {",
      "",
      "[Added Lines]",
      "349:     if (SSL_READ_ETM(s) && s->read_hash) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "394:     if ((sess != NULL) &&",
      "395:         (s->enc_read_ctx != NULL) &&",
      "398:         unsigned char *mac = NULL;",
      "399:         unsigned char mac_tmp[EVP_MAX_MD_SIZE];",
      "",
      "[Removed Lines]",
      "396:         (EVP_MD_CTX_md(s->read_hash) != NULL) && !SSL_USE_ETM(s)) {",
      "",
      "[Added Lines]",
      "396:         (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "823:         }",
      "825:         ret = 1;",
      "827:             mac_size = EVP_MD_CTX_size(s->read_hash);",
      "828:         if ((bs != 1) && !send) {",
      "829:             int tmpret;",
      "",
      "[Removed Lines]",
      "826:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "[Added Lines]",
      "826:         if (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "997:     header[11] = (rec->length) >> 8;",
      "998:     header[12] = (rec->length) & 0xff;",
      "1001:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
      "1002:         ssl3_cbc_record_digest_supported(mac_ctx)) {",
      "",
      "[Removed Lines]",
      "1000:     if (!send && !SSL_USE_ETM(ssl) &&",
      "",
      "[Added Lines]",
      "1000:     if (!send && !SSL_READ_ETM(ssl) &&",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1022:             EVP_MD_CTX_free(hmac);",
      "1023:             return -1;",
      "1024:         }",
      "1026:             if (!tls_fips_digest_extra(ssl->enc_read_ctx,",
      "1027:                                        mac_ctx, rec->input,",
      "1028:                                        rec->length, rec->orig_len)) {",
      "",
      "[Removed Lines]",
      "1025:         if (!send && !SSL_USE_ETM(ssl) && FIPS_mode())",
      "",
      "[Added Lines]",
      "1025:         if (!send && !SSL_READ_ETM(ssl) && FIPS_mode())",
      "",
      "---------------"
    ],
    "ssl/ssl_locl.h||ssl/ssl_locl.h": [
      "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "378: # define SSL_CLIENT_USE_SIGALGS(s)        \\",
      "379:     SSL_CLIENT_USE_TLS1_2_CIPHERS(s)",
      "384: # define SSL_PKEY_RSA_ENC        0",
      "",
      "[Removed Lines]",
      "381: # define SSL_USE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC)",
      "",
      "[Added Lines]",
      "381: # define SSL_READ_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_READ)",
      "382: # define SSL_WRITE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1111:     unsigned char *alpn_client_proto_list;",
      "1112:     unsigned alpn_client_proto_list_len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1116:     int tlsext_use_etm;",
      "",
      "---------------"
    ],
    "ssl/t1_enc.c||ssl/t1_enc.c": [
      "File: ssl/t1_enc.c -> ssl/t1_enc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "130: #endif",
      "132:     if (which & SSL3_CC_READ) {",
      "133:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "134:             s->mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM;",
      "135:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133:         if (s->tlsext_use_etm)",
      "134:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "135:         else",
      "136:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "168:         mac_secret = &(s->s3->read_mac_secret[0]);",
      "169:         mac_secret_size = &(s->s3->read_mac_secret_size);",
      "170:     } else {",
      "171:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "172:             s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
      "173:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "176:         if (s->tlsext_use_etm)",
      "177:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "178:         else",
      "179:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "367:     if (s->s3->tmp.key_block_length != 0)",
      "368:         return (1);",
      "373:         SSLerr(SSL_F_TLS1_SETUP_KEY_BLOCK, SSL_R_CIPHER_OR_HASH_UNAVAILABLE);",
      "374:         return (0);",
      "375:     }",
      "",
      "[Removed Lines]",
      "370:     if (!ssl_cipher_get_evp",
      "371:         (s->session, &c, &hash, &mac_type, &mac_secret_size, &comp,",
      "372:          SSL_USE_ETM(s))) {",
      "",
      "[Added Lines]",
      "380:     if (!ssl_cipher_get_evp(s->session, &c, &hash, &mac_type, &mac_secret_size,",
      "381:                             &comp, s->tlsext_use_etm)) {",
      "",
      "---------------"
    ],
    "ssl/t1_lib.c||ssl/t1_lib.c": [
      "File: ssl/t1_lib.c -> ssl/t1_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1674: #endif",
      "1675:     if (!custom_ext_add(s, 1, &ret, limit, al))",
      "1676:         return NULL;",
      "",
      "[Removed Lines]",
      "1677:     if (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) {",
      "",
      "[Added Lines]",
      "1677:     if (s->tlsext_use_etm) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1683:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4",
      "1684:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT",
      "1685:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)",
      "1687:         else {",
      "",
      "[Removed Lines]",
      "1686:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1686:             s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1917:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
      "1918:     s->s3->tmp.peer_sigalgs = NULL;",
      "1921: #ifndef OPENSSL_NO_SRP",
      "1922:     OPENSSL_free(s->srp_ctx.login);",
      "",
      "[Removed Lines]",
      "1919:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1919:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2264:         }",
      "2265: #endif",
      "2266:         else if (type == TLSEXT_TYPE_encrypt_then_mac)",
      "",
      "[Removed Lines]",
      "2267:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2267:             s->tlsext_use_etm = 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2366:                              SSL_DTLSEXT_HB_DONT_SEND_REQUESTS);",
      "2367: #endif",
      "2371:     s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;",
      "",
      "[Removed Lines]",
      "2369:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2369:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2586:             if (s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD",
      "2587:                 && s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)",
      "2589:         } else if (type == TLSEXT_TYPE_extended_master_secret) {",
      "2590:             s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;",
      "2591:             if (!s->hit)",
      "",
      "[Removed Lines]",
      "2588:                 s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2588:                 s->tlsext_use_etm = 1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c2f9144e52a3168a6faca83839367b0adfedfc50",
      "candidate_info": {
        "commit_hash": "c2f9144e52a3168a6faca83839367b0adfedfc50",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/c2f9144e52a3168a6faca83839367b0adfedfc50",
        "files": [
          "crypto/conf/conf_def.c",
          "crypto/conf/conf_err.c",
          "doc/apps/config.pod",
          "fuzz/corpora/conf/0d7ad6e04c0235cdc590756ceec867a05cff5823",
          "include/openssl/conf.h"
        ],
        "message": "Fix out-of-memory condition in conf\n\nconf has the ability to expand variables in config files. Repeatedly doing\nthis can lead to an exponential increase in the amount of memory required.\nThis places a limit on the length of a value that can result from an\nexpansion.\n\nCredit to OSS-Fuzz for finding this problem.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2894)\n(cherry picked from commit 8a585601fea1091022034dd14b961c1ecd5916c3)",
        "before_after_code_files": [
          "crypto/conf/conf_def.c||crypto/conf/conf_def.c",
          "crypto/conf/conf_err.c||crypto/conf/conf_err.c",
          "include/openssl/conf.h||include/openssl/conf.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/conf/conf_def.c||crypto/conf/conf_def.c": [
          "File: crypto/conf/conf_def.c -> crypto/conf/conf_def.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #include <openssl/buffer.h>",
          "21: #include <openssl/err.h>",
          "23: static char *eat_ws(CONF *conf, char *p);",
          "24: static char *eat_alpha_numeric(CONF *conf, char *p);",
          "25: static void clear_comments(CONF *conf, char *p);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #define MAX_CONF_VALUE_LENGTH       65536",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "457:         } else if (IS_EOF(conf, *from))",
          "458:             break;",
          "459:         else if (*from == '$') {",
          "461:             rrp = NULL;",
          "462:             s = &(from[1]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "466:             size_t newsize;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "511:                 CONFerr(CONF_F_STR_COPY, CONF_R_VARIABLE_HAS_NO_VALUE);",
          "512:                 goto err;",
          "513:             }",
          "516:                 CONFerr(CONF_F_STR_COPY, ERR_R_MALLOC_FAILURE);",
          "517:                 goto err;",
          "518:             }",
          "",
          "[Removed Lines]",
          "514:             if (!BUF_MEM_grow_clean(buf,",
          "515:                         (strlen(p) + buf->length - (e - from)))) {",
          "",
          "[Added Lines]",
          "522:             newsize = strlen(p) + buf->length - (e - from);",
          "523:             if (newsize > MAX_CONF_VALUE_LENGTH) {",
          "524:                 CONFerr(CONF_F_STR_COPY, CONF_R_VARIABLE_EXPANSION_TOO_LONG);",
          "525:                 goto err;",
          "526:             }",
          "527:             if (!BUF_MEM_grow_clean(buf, newsize)) {",
          "",
          "---------------"
        ],
        "crypto/conf/conf_err.c||crypto/conf/conf_err.c": [
          "File: crypto/conf/conf_err.c -> crypto/conf/conf_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:     {ERR_REASON(CONF_R_UNABLE_TO_CREATE_NEW_SECTION),",
          "61:      \"unable to create new section\"},",
          "62:     {ERR_REASON(CONF_R_UNKNOWN_MODULE_NAME), \"unknown module name\"},",
          "63:     {ERR_REASON(CONF_R_VARIABLE_HAS_NO_VALUE), \"variable has no value\"},",
          "64:     {0, NULL}",
          "65: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:     {ERR_REASON(CONF_R_VARIABLE_EXPANSION_TOO_LONG),",
          "64:      \"variable expansion too long\"},",
          "",
          "---------------"
        ],
        "include/openssl/conf.h||include/openssl/conf.h": [
          "File: include/openssl/conf.h -> include/openssl/conf.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "208: # define CONF_R_NO_VALUE                                  108",
          "209: # define CONF_R_UNABLE_TO_CREATE_NEW_SECTION              103",
          "210: # define CONF_R_UNKNOWN_MODULE_NAME                       113",
          "211: # define CONF_R_VARIABLE_HAS_NO_VALUE                     104",
          "213: # ifdef  __cplusplus",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "211: # define CONF_R_VARIABLE_EXPANSION_TOO_LONG               116",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3b8422755f268e57da7f3184e9eb965a3d60ee25",
      "candidate_info": {
        "commit_hash": "3b8422755f268e57da7f3184e9eb965a3d60ee25",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/3b8422755f268e57da7f3184e9eb965a3d60ee25",
        "files": [
          "ssl/ssl_asn1.c"
        ],
        "message": "ASN.1: adapt SSL_SESSION_ASN1 by explicitely embedding INTxx et al\n\nFixes #3191\n\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3200)",
        "before_after_code_files": [
          "ssl/ssl_asn1.c||ssl/ssl_asn1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/ssl_asn1.c||ssl/ssl_asn1.c": [
          "File: ssl/ssl_asn1.c -> ssl/ssl_asn1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: } SSL_SESSION_ASN1;",
          "69: ASN1_SEQUENCE(SSL_SESSION_ASN1) = {",
          "72:     ASN1_SIMPLE(SSL_SESSION_ASN1, cipher, ASN1_OCTET_STRING),",
          "73:     ASN1_SIMPLE(SSL_SESSION_ASN1, session_id, ASN1_OCTET_STRING),",
          "74:     ASN1_SIMPLE(SSL_SESSION_ASN1, master_key, ASN1_OCTET_STRING),",
          "75:     ASN1_IMP_OPT(SSL_SESSION_ASN1, key_arg, ASN1_OCTET_STRING, 0),",
          "78:     ASN1_EXP_OPT(SSL_SESSION_ASN1, peer, X509, 3),",
          "79:     ASN1_EXP_OPT(SSL_SESSION_ASN1, session_id_context, ASN1_OCTET_STRING, 4),",
          "81:     ASN1_EXP_OPT(SSL_SESSION_ASN1, tlsext_hostname, ASN1_OCTET_STRING, 6),",
          "82: #ifndef OPENSSL_NO_PSK",
          "83:     ASN1_EXP_OPT(SSL_SESSION_ASN1, psk_identity_hint, ASN1_OCTET_STRING, 7),",
          "84:     ASN1_EXP_OPT(SSL_SESSION_ASN1, psk_identity, ASN1_OCTET_STRING, 8),",
          "85: #endif",
          "87:     ASN1_EXP_OPT(SSL_SESSION_ASN1, tlsext_tick, ASN1_OCTET_STRING, 10),",
          "88:     ASN1_EXP_OPT(SSL_SESSION_ASN1, comp_id, ASN1_OCTET_STRING, 11),",
          "89: #ifndef OPENSSL_NO_SRP",
          "90:     ASN1_EXP_OPT(SSL_SESSION_ASN1, srp_username, ASN1_OCTET_STRING, 12),",
          "91: #endif",
          "93: } static_ASN1_SEQUENCE_END(SSL_SESSION_ASN1)",
          "95: IMPLEMENT_STATIC_ASN1_ENCODE_FUNCTIONS(SSL_SESSION_ASN1)",
          "",
          "[Removed Lines]",
          "70:     ASN1_SIMPLE(SSL_SESSION_ASN1, version, UINT32),",
          "71:     ASN1_SIMPLE(SSL_SESSION_ASN1, ssl_version, INT32),",
          "76:     ASN1_EXP_OPT(SSL_SESSION_ASN1, time, ZINT64, 1),",
          "77:     ASN1_EXP_OPT(SSL_SESSION_ASN1, timeout, ZINT64, 2),",
          "80:     ASN1_EXP_OPT(SSL_SESSION_ASN1, verify_result, ZINT32, 5),",
          "86:     ASN1_EXP_OPT(SSL_SESSION_ASN1, tlsext_tick_lifetime_hint, ZUINT64, 9),",
          "92:     ASN1_EXP_OPT(SSL_SESSION_ASN1, flags, ZUINT64, 13)",
          "",
          "[Added Lines]",
          "70:     ASN1_EMBED(SSL_SESSION_ASN1, version, UINT32),",
          "71:     ASN1_EMBED(SSL_SESSION_ASN1, ssl_version, INT32),",
          "76:     ASN1_EXP_OPT_EMBED(SSL_SESSION_ASN1, time, ZINT64, 1),",
          "77:     ASN1_EXP_OPT_EMBED(SSL_SESSION_ASN1, timeout, ZINT64, 2),",
          "80:     ASN1_EXP_OPT_EMBED(SSL_SESSION_ASN1, verify_result, ZINT32, 5),",
          "86:     ASN1_EXP_OPT_EMBED(SSL_SESSION_ASN1, tlsext_tick_lifetime_hint, ZUINT64, 9),",
          "92:     ASN1_EXP_OPT_EMBED(SSL_SESSION_ASN1, flags, ZUINT64, 13)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bb2b6b6cb7e697a69a1e5cd371a96721a7b89633",
      "candidate_info": {
        "commit_hash": "bb2b6b6cb7e697a69a1e5cd371a96721a7b89633",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/bb2b6b6cb7e697a69a1e5cd371a96721a7b89633",
        "files": [
          "crypto/ct/ct_b64.c"
        ],
        "message": "Subtract padding from outlen in ct_base64_decode\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1548)\n(cherry picked from commit 70a06fc1a8b098e9934f837896159bfc6caf0228)",
        "before_after_code_files": [
          "crypto/ct/ct_b64.c||crypto/ct/ct_b64.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/ct/ct_b64.c||crypto/ct/ct_b64.c": [
          "File: crypto/ct/ct_b64.c -> crypto/ct/ct_b64.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:         goto err;",
          "46:     }",
          "49:     return outlen;",
          "50: err:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:     while (in[--inlen] == '=') {",
          "50:         --outlen;",
          "51:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9317235bbb43fbe8ee21cc3bfe0effb9ab6dee2e",
      "candidate_info": {
        "commit_hash": "9317235bbb43fbe8ee21cc3bfe0effb9ab6dee2e",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/9317235bbb43fbe8ee21cc3bfe0effb9ab6dee2e",
        "files": [
          "include/openssl/e_os2.h"
        ],
        "message": "e_os2.h: Refine OSSL_SSIZE definition under UEFI environment\n\nUnder UEFI build environment, we may encounter the OSSL_SSIZE macro\nre-definition error in e_os2.h if any module call OpenSSL API directly\nby including \"openssl/xxxx.h\" (caused by the predefined _WIN32/_WIN64\nmacro, which should have been un-defined under OPENSSL_SYS_UEFI).\n\nThough it's not one recommended usage, this patch could still eliminate\nthe possible build issue by refining the OSSL_SSIZE definition under\nOPENSSL_SYS_UEFI.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Andy Polyakov <appro@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3121)\n\n(cherry picked from commit 005f6766284155645fa760cf764f85031e209f6c)",
        "before_after_code_files": [
          "include/openssl/e_os2.h||include/openssl/e_os2.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/openssl/e_os2.h||include/openssl/e_os2.h": [
          "File: include/openssl/e_os2.h -> include/openssl/e_os2.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "212: #  endif",
          "213: # endif",
          "218: # endif",
          "220: # ifndef ossl_ssize_t",
          "",
          "[Removed Lines]",
          "215: # if defined(OPENSSL_SYS_UEFI) && !defined(ssize_t)",
          "216: #  define ossl_ssize_t int",
          "217: #  define OSSL_SSIZE_MAX INT_MAX",
          "",
          "[Added Lines]",
          "215: # if defined(OPENSSL_SYS_UEFI) && !defined(ossl_ssize_t)",
          "216: #  define ossl_ssize_t INTN",
          "217: #  define OSSL_SSIZE_MAX MAX_INTN",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "caa2427f0c743beb0f6d1736dc8c0e4e551a0e1f",
      "candidate_info": {
        "commit_hash": "caa2427f0c743beb0f6d1736dc8c0e4e551a0e1f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/caa2427f0c743beb0f6d1736dc8c0e4e551a0e1f",
        "files": [
          "ssl/statem/statem.c"
        ],
        "message": "Stop server from expecting Certificate message when not requested\n\nIn a non client-auth renegotiation where the original handshake *was*\nclient auth, then the server will expect the client to send a Certificate\nmessage anyway resulting in a connection failure.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1983)",
        "before_after_code_files": [
          "ssl/statem/statem.c||ssl/statem/statem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/statem/statem.c||ssl/statem/statem.c": [
          "File: ssl/statem/statem.c -> ssl/statem/statem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "362:                 s->ctx->stats.sess_accept_renegotiate++;",
          "363:             }",
          "364:         } else {",
          "365:             s->ctx->stats.sess_connect++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "365:             s->s3->tmp.cert_request = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "368:             memset(s->s3->client_random, 0, sizeof(s->s3->client_random));",
          "369:             s->hit = 0;",
          "372:             s->s3->tmp.cert_req = 0;",
          "374:             if (SSL_IS_DTLS(s)) {",
          "",
          "[Removed Lines]",
          "371:             s->s3->tmp.cert_request = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}