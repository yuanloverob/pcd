{
  "cve_id": "CVE-2020-17498",
  "cve_desc": "In Wireshark 3.2.0 to 3.2.5, the Kafka protocol dissector could crash. This was addressed in epan/dissectors/packet-kafka.c by avoiding a double free during LZ4 decompression.",
  "repo": "wireshark/wireshark",
  "patch_hash": "79576219c92e252c0700cdbe729bfb0fe6c72bd9",
  "patch_info": {
    "commit_hash": "79576219c92e252c0700cdbe729bfb0fe6c72bd9",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/79576219c92e252c0700cdbe729bfb0fe6c72bd9",
    "files": [
      "epan/dissectors/packet-kafka.c"
    ],
    "message": "kafka: lz4: free the composite tvb only once\n\nTry to clean up the composite tvb handling during lz4 decompression.\n\nIf we detect an error straight away before doing any lz4 decompression, we\ndon't allocate a composite tvb at all. The comments in the tvb code say\nexplicitly that we must not call tvb_new_composite() without adding at\nleast one piece of data.\n\nIf we start decompressing and run into problems after creating the\ncomposite tvb and linking it to the packet's main tvb, we must not free\nthe composite tvb manually. The epan library will do this for us when\ndissection of the packet is finished.\n\nWhile at it, make sure that we always finalize the composite tvb if we\nallocated it and added data to it.\n\nBug: 16672\nChange-Id: I3e3fb303a823640d7707277a109019fc3aad22f2\nReviewed-on: https://code.wireshark.org/review/37696\nPetri-Dish: Alexis La Goutte <alexis.lagoutte@gmail.com>\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-kafka.c||epan/dissectors/packet-kafka.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-kafka.c||epan/dissectors/packet-kafka.c": [
      "File: epan/dissectors/packet-kafka.c -> epan/dissectors/packet-kafka.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1305:     LZ4F_errorCode_t rc = 0;",
      "1306:     size_t src_offset = 0, src_size = 0, dst_size = 0;",
      "1307:     guchar *decompressed_buffer = NULL;",
      "1310:     int ret = 0;",
      "",
      "[Removed Lines]",
      "1308:     tvbuff_t *composite_tvb = tvb_new_composite();",
      "",
      "[Added Lines]",
      "1308:     tvbuff_t *composite_tvb = NULL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1369:         if (dst_size == 0) {",
      "1370:             goto end;",
      "1371:         }",
      "1372:         tvb_composite_append(composite_tvb,",
      "1373:                              tvb_new_child_real_data(tvb, (guint8*)decompressed_buffer, (guint)dst_size, (gint)dst_size));",
      "1374:         src_offset += src_size; // bump up the offset for the next iteration",
      "1375:     } while (rc > 0);",
      "1381:     ret = 1;",
      "1382: end:",
      "1383:     LZ4F_freeDecompressionContext(lz4_ctxt);",
      "1386:     }",
      "1388:         col_append_str(pinfo->cinfo, COL_INFO, \" [lz4 decompression failed]\");",
      "1389:     }",
      "1390:     return ret;",
      "",
      "[Removed Lines]",
      "1377:     tvb_composite_finalize(composite_tvb);",
      "1380:     composite_tvb = NULL;",
      "1384:     if (composite_tvb != NULL) {",
      "1385:         tvb_free_chain(composite_tvb);",
      "1387:     if (ret == 0) {",
      "",
      "[Added Lines]",
      "1372:         if (!composite_tvb) {",
      "1373:             composite_tvb = tvb_new_composite();",
      "1374:         }",
      "1382:     if (composite_tvb) {",
      "1383:         tvb_composite_finalize(composite_tvb);",
      "1384:     }",
      "1386:     if (ret == 1) {",
      "1390:     else {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "76afda963de4f0b9be24f2d8e873990a5cbf221b",
      "candidate_info": {
        "commit_hash": "76afda963de4f0b9be24f2d8e873990a5cbf221b",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/76afda963de4f0b9be24f2d8e873990a5cbf221b",
        "files": [
          "epan/dissectors/packet-kafka.c"
        ],
        "message": "kafka: lz4: free the composite tvb only once\n\nTry to clean up the composite tvb handling during lz4 decompression.\n\nIf we detect an error straight away before doing any lz4 decompression, we\ndon't allocate a composite tvb at all. The comments in the tvb code say\nexplicitly that we must not call tvb_new_composite() without adding at\nleast one piece of data.\n\nIf we start decompressing and run into problems after creating the\ncomposite tvb and linking it to the packet's main tvb, we must not free\nthe composite tvb manually. The epan library will do this for us when\ndissection of the packet is finished.\n\nWhile at it, make sure that we always finalize the composite tvb if we\nallocated it and added data to it.\n\nBug: 16672\nChange-Id: I3e3fb303a823640d7707277a109019fc3aad22f2\nReviewed-on: https://code.wireshark.org/review/37696\nPetri-Dish: Alexis La Goutte <alexis.lagoutte@gmail.com>\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 79576219c92e252c0700cdbe729bfb0fe6c72bd9)\nReviewed-on: https://code.wireshark.org/review/37720\nReviewed-by: Guy Harris <gharris@sonic.net>",
        "before_after_code_files": [
          "epan/dissectors/packet-kafka.c||epan/dissectors/packet-kafka.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-kafka.c||epan/dissectors/packet-kafka.c"
          ],
          "candidate": [
            "epan/dissectors/packet-kafka.c||epan/dissectors/packet-kafka.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-kafka.c||epan/dissectors/packet-kafka.c": [
          "File: epan/dissectors/packet-kafka.c -> epan/dissectors/packet-kafka.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1304:     LZ4F_errorCode_t rc = 0;",
          "1305:     size_t src_offset = 0, src_size = 0, dst_size = 0;",
          "1306:     guchar *decompressed_buffer = NULL;",
          "1309:     int ret = 0;",
          "",
          "[Removed Lines]",
          "1307:     tvbuff_t *composite_tvb = tvb_new_composite();",
          "",
          "[Added Lines]",
          "1307:     tvbuff_t *composite_tvb = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1368:         if (dst_size == 0) {",
          "1369:             goto end;",
          "1370:         }",
          "1371:         tvb_composite_append(composite_tvb,",
          "1372:                              tvb_new_child_real_data(tvb, (guint8*)decompressed_buffer, (guint)dst_size, (gint)dst_size));",
          "1373:         src_offset += src_size; // bump up the offset for the next iteration",
          "1374:     } while (rc > 0);",
          "1380:     ret = 1;",
          "1381: end:",
          "1382:     LZ4F_freeDecompressionContext(lz4_ctxt);",
          "1385:     }",
          "1387:         col_append_str(pinfo->cinfo, COL_INFO, \" [lz4 decompression failed]\");",
          "1388:     }",
          "1389:     return ret;",
          "",
          "[Removed Lines]",
          "1376:     tvb_composite_finalize(composite_tvb);",
          "1379:     composite_tvb = NULL;",
          "1383:     if (composite_tvb != NULL) {",
          "1384:         tvb_free_chain(composite_tvb);",
          "1386:     if (ret == 0) {",
          "",
          "[Added Lines]",
          "1371:         if (!composite_tvb) {",
          "1372:             composite_tvb = tvb_new_composite();",
          "1373:         }",
          "1381:     if (composite_tvb) {",
          "1382:         tvb_composite_finalize(composite_tvb);",
          "1383:     }",
          "1385:     if (ret == 1) {",
          "1389:     else {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eabd1b0abb38fdd92147fba8a9030fe0bcd8fc6a",
      "candidate_info": {
        "commit_hash": "eabd1b0abb38fdd92147fba8a9030fe0bcd8fc6a",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/eabd1b0abb38fdd92147fba8a9030fe0bcd8fc6a",
        "files": [
          "epan/dissectors/packet-kafka.c"
        ],
        "message": "Kafka: add support for Kafka 2.3+ dissection\n\nExisting Apache Kafka support in Wireshark ends at version 0.10.\nThe version 0.11 (June 2017) brought significant changes to the message\nformat. This change makes the Wireshark Kafka dissector obsolete.\nThe recently released Kafka 2.3 has a lot of additions to the wire\nprotocol, which should be also addressed.\n\nMajor changes:\n* Applied Kafka protocol changes since 0.10\n* Zstd-packed message decompression (since Kafka 2.1)\n* Added support for Kafka over TLS decryption\n\nBug: 15988\nChange-Id: I2bba2cfefa884638b6d4d6f32ce7d016cbba0e28\nReviewed-on: https://code.wireshark.org/review/34224\nPetri-Dish: Anders Broman <a.broman58@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-kafka.c||epan/dissectors/packet-kafka.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-kafka.c||epan/dissectors/packet-kafka.c"
          ],
          "candidate": [
            "epan/dissectors/packet-kafka.c||epan/dissectors/packet-kafka.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-kafka.c||epan/dissectors/packet-kafka.c": [
          "File: epan/dissectors/packet-kafka.c -> epan/dissectors/packet-kafka.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include <lz4frame.h>",
          "27: #endif",
          "28: #include \"packet-tcp.h\"",
          "30: void proto_register_kafka(void);",
          "31: void proto_reg_handoff_kafka(void);",
          "33: static int proto_kafka = -1;",
          "34: static int hf_kafka_len = -1;",
          "35: static int hf_kafka_request_api_key = -1;",
          "36: static int hf_kafka_response_api_key = -1;",
          "37: static int hf_kafka_request_api_version = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: #include \"packet-tls.h\"",
          "36: static dissector_handle_t kafka_handle;",
          "39: static int hf_kafka_api_key = -1;",
          "40: static int hf_kafka_api_version = -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41: static int hf_kafka_client_host = -1;",
          "42: static int hf_kafka_string_len = -1;",
          "43: static int hf_kafka_bytes_len = -1;",
          "45: static int hf_kafka_required_acks = -1;",
          "46: static int hf_kafka_timeout = -1;",
          "47: static int hf_kafka_topic_name = -1;",
          "48: static int hf_kafka_transactional_id = -1;",
          "49: static int hf_kafka_partition_id = -1;",
          "50: static int hf_kafka_replica = -1;",
          "51: static int hf_kafka_replication_factor = -1;",
          "52: static int hf_kafka_isr = -1;",
          "54: static int hf_kafka_last_stable_offset = -1;",
          "55: static int hf_kafka_log_start_offset = -1;",
          "56: static int hf_kafka_first_offset = -1;",
          "57: static int hf_kafka_producer_id = -1;",
          "58: static int hf_kafka_message_set_size = -1;",
          "59: static int hf_kafka_message_size = -1;",
          "60: static int hf_kafka_message_crc = -1;",
          "",
          "[Removed Lines]",
          "44: static int hf_kafka_array_count = -1;",
          "53: static int hf_kafka_partition_leader = -1;",
          "",
          "[Added Lines]",
          "54: static int hf_kafka_transaction_result = -1;",
          "55: static int hf_kafka_transaction_timeout = -1;",
          "60: static int hf_kafka_offline = -1;",
          "65: static int hf_kafka_producer_epoch = -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62: static int hf_kafka_message_codec = -1;",
          "63: static int hf_kafka_message_timestamp_type = -1;",
          "64: static int hf_kafka_message_timestamp = -1;",
          "65: static int hf_kafka_message_key = -1;",
          "66: static int hf_kafka_message_value = -1;",
          "67: static int hf_kafka_message_value_compressed = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73: static int hf_kafka_batch_crc = -1;",
          "74: static int hf_kafka_batch_magic = -1;",
          "75: static int hf_kafka_batch_codec = -1;",
          "76: static int hf_kafka_batch_timestamp_type = -1;",
          "77: static int hf_kafka_batch_transactional = -1;",
          "78: static int hf_kafka_batch_control_batch = -1;",
          "79: static int hf_kafka_batch_last_offset_delta = -1;",
          "80: static int hf_kafka_batch_first_timestamp = -1;",
          "81: static int hf_kafka_batch_last_timestamp = -1;",
          "82: static int hf_kafka_batch_base_sequence = -1;",
          "83: static int hf_kafka_batch_size = -1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "69: static int hf_kafka_request_frame = -1;",
          "70: static int hf_kafka_response_frame = -1;",
          "71: static int hf_kafka_consumer_group = -1;",
          "72: static int hf_kafka_group_state = -1;",
          "73: static int hf_kafka_offset = -1;",
          "74: static int hf_kafka_offset_time = -1;",
          "75: static int hf_kafka_max_offsets = -1;",
          "76: static int hf_kafka_metadata = -1;",
          "77: static int hf_kafka_error = -1;",
          "78: static int hf_kafka_broker_nodeid = -1;",
          "79: static int hf_kafka_broker_host = -1;",
          "80: static int hf_kafka_broker_port = -1;",
          "82: static int hf_kafka_broker_security_protocol_type = -1;",
          "83: static int hf_kafka_cluster_id = -1;",
          "84: static int hf_kafka_controller_id = -1;",
          "",
          "[Removed Lines]",
          "81: static int hf_kafka_broker_rack = -1;",
          "",
          "[Added Lines]",
          "91: static int hf_kafka_consumer_group_instance = -1;",
          "92: static int hf_kafka_coordinator_key = -1;",
          "93: static int hf_kafka_coordinator_type = -1;",
          "100: static int hf_kafka_error_message = -1;",
          "102: static int hf_kafka_broker_epoch = -1;",
          "104: static int hf_kafka_listener_name = -1;",
          "106: static int hf_kafka_rack = -1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "87: static int hf_kafka_leader_id = -1;",
          "88: static int hf_kafka_group_leader_id = -1;",
          "89: static int hf_kafka_leader_epoch = -1;",
          "90: static int hf_kafka_is_internal = -1;",
          "91: static int hf_kafka_isolation_level = -1;",
          "92: static int hf_kafka_min_bytes = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115: static int hf_kafka_current_leader_epoch = -1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "112: static int hf_kafka_config_value = -1;",
          "113: static int hf_kafka_commit_timestamp = -1;",
          "114: static int hf_kafka_retention_time = -1;",
          "116: static int ett_kafka = -1;",
          "117: static int ett_kafka_message = -1;",
          "118: static int ett_kafka_message_set = -1;",
          "119: static int ett_kafka_replicas = -1;",
          "120: static int ett_kafka_isrs = -1;",
          "121: static int ett_kafka_broker = -1;",
          "122: static int ett_kafka_brokers = -1;",
          "123: static int ett_kafka_broker_end_point = -1;",
          "124: static int ett_kafka_topics = -1;",
          "125: static int ett_kafka_topic = -1;",
          "130: static int ett_kafka_api_version = -1;",
          "131: static int ett_kafka_group_protocols = -1;",
          "132: static int ett_kafka_group_protocol = -1;",
          "",
          "[Removed Lines]",
          "126: static int ett_kafka_request_topic = -1;",
          "127: static int ett_kafka_request_partition = -1;",
          "128: static int ett_kafka_response_topic = -1;",
          "129: static int ett_kafka_response_partition = -1;",
          "",
          "[Added Lines]",
          "141: static int hf_kafka_forgotten_topic_name = -1;",
          "142: static int hf_kafka_forgotten_topic_partition = -1;",
          "143: static int hf_kafka_fetch_session_id = -1;",
          "144: static int hf_kafka_fetch_session_epoch = -1;",
          "145: static int hf_kafka_record_header_key = -1;",
          "146: static int hf_kafka_record_header_value = -1;",
          "147: static int hf_kafka_record_headers_count = -1;",
          "148: static int hf_kafka_record_length = -1;",
          "149: static int hf_kafka_record_attributes = -1;",
          "150: static int hf_kafka_allow_auto_topic_creation = -1;",
          "151: static int hf_kafka_validate_only = -1;",
          "152: static int hf_kafka_coordinator_epoch = -1;",
          "153: static int hf_kafka_sasl_auth_bytes = -1;",
          "154: static int hf_kafka_session_lifetime_ms = -1;",
          "155: static int hf_kafka_acl_resource_type = -1;",
          "156: static int hf_kafka_acl_resource_name = -1;",
          "157: static int hf_kafka_acl_resource_pattern_type = -1;",
          "158: static int hf_kafka_acl_principal = -1;",
          "159: static int hf_kafka_acl_host = -1;",
          "160: static int hf_kafka_acl_operation = -1;",
          "161: static int hf_kafka_acl_permission_type = -1;",
          "162: static int hf_kafka_config_resource_type = -1;",
          "163: static int hf_kafka_config_resource_name = -1;",
          "164: static int hf_kafka_config_include_synonyms = -1;",
          "165: static int hf_kafka_config_source = -1;",
          "166: static int hf_kafka_config_readonly = -1;",
          "167: static int hf_kafka_config_default = -1;",
          "168: static int hf_kafka_config_sensitive = -1;",
          "169: static int hf_kafka_config_operation = -1;",
          "170: static int hf_kafka_log_dir = -1;",
          "171: static int hf_kafka_segment_size = -1;",
          "172: static int hf_kafka_offset_lag = -1;",
          "173: static int hf_kafka_future = -1;",
          "174: static int hf_kafka_partition_count = -1;",
          "175: static int hf_kafka_token_max_life_time = -1;",
          "176: static int hf_kafka_token_renew_time = -1;",
          "177: static int hf_kafka_token_expiry_time = -1;",
          "178: static int hf_kafka_token_principal_type = -1;",
          "179: static int hf_kafka_token_principal_name = -1;",
          "180: static int hf_kafka_token_issue_timestamp = -1;",
          "181: static int hf_kafka_token_expiry_timestamp = -1;",
          "182: static int hf_kafka_token_max_timestamp = -1;",
          "183: static int hf_kafka_token_id = -1;",
          "184: static int hf_kafka_token_hmac = -1;",
          "185: static int hf_kafka_include_cluster_authorized_ops = -1;",
          "186: static int hf_kafka_include_topic_authorized_ops = -1;",
          "187: static int hf_kafka_include_group_authorized_ops = -1;",
          "188: static int hf_kafka_cluster_authorized_ops = -1;",
          "189: static int hf_kafka_topic_authorized_ops = -1;",
          "190: static int hf_kafka_group_authorized_ops = -1;",
          "191: static int hf_kafka_election_type = -1;",
          "194: static int ett_kafka_batch = -1;",
          "199: static int ett_kafka_offline = -1;",
          "203: static int ett_kafka_markers = -1;",
          "204: static int ett_kafka_marker = -1;",
          "207: static int ett_kafka_partitions = -1;",
          "208: static int ett_kafka_partition = -1;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "134: static int ett_kafka_group_member = -1;",
          "135: static int ett_kafka_group_assignments = -1;",
          "136: static int ett_kafka_group_assignment = -1;",
          "137: static int ett_kafka_group = -1;",
          "138: static int ett_kafka_sasl_enabled_mechanisms = -1;",
          "139: static int ett_kafka_replica_assignment = -1;",
          "140: static int ett_kafka_configs = -1;",
          "141: static int ett_kafka_config = -1;",
          "143: static expert_field ei_kafka_request_missing = EI_INIT;",
          "144: static expert_field ei_kafka_unknown_api_key = EI_INIT;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "216: static int ett_kafka_groups = -1;",
          "222: static int ett_kafka_request_forgotten_topic = -1;",
          "223: static int ett_kafka_record = -1;",
          "224: static int ett_kafka_record_headers = -1;",
          "225: static int ett_kafka_record_headers_header = -1;",
          "226: static int ett_kafka_aborted_transactions = -1;",
          "227: static int ett_kafka_aborted_transaction = -1;",
          "228: static int ett_kafka_resources = -1;",
          "229: static int ett_kafka_resource = -1;",
          "230: static int ett_kafka_acls = -1;",
          "231: static int ett_kafka_acl = -1;",
          "232: static int ett_kafka_acl_creations = -1;",
          "233: static int ett_kafka_acl_creation = -1;",
          "234: static int ett_kafka_acl_filters = -1;",
          "235: static int ett_kafka_acl_filter = -1;",
          "236: static int ett_kafka_acl_filter_matches = -1;",
          "237: static int ett_kafka_acl_filter_match = -1;",
          "238: static int ett_kafka_config_synonyms = -1;",
          "239: static int ett_kafka_config_synonym = -1;",
          "240: static int ett_kafka_config_entries = -1;",
          "241: static int ett_kafka_config_entry = -1;",
          "242: static int ett_kafka_log_dirs = -1;",
          "243: static int ett_kafka_log_dir = -1;",
          "244: static int ett_kafka_renewers = -1;",
          "245: static int ett_kafka_renewer = -1;",
          "246: static int ett_kafka_owners = -1;",
          "247: static int ett_kafka_owner = -1;",
          "248: static int ett_kafka_tokens = -1;",
          "249: static int ett_kafka_token = -1;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "146: static expert_field ei_kafka_message_decompress = EI_INIT;",
          "147: static expert_field ei_kafka_bad_string_length = EI_INIT;",
          "148: static expert_field ei_kafka_bad_bytes_length = EI_INIT;",
          "150: typedef gint16 kafka_api_key_t;",
          "151: typedef gint16 kafka_api_version_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "257: static expert_field ei_kafka_unknown_message_magic = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "161:     kafka_api_version_t max_version;",
          "162: } kafka_api_info_t;",
          "185: static const kafka_api_info_t kafka_apis[] = {",
          "187:       0, 5 },",
          "191:       0, 1 },",
          "193:       0, 2 },",
          "199:       0, 2 },",
          "203:       0, 3 },",
          "205:       0, 1 },",
          "209:       0, 1 },",
          "211:       0, 1 },",
          "221:       0, 0 },",
          "223:       0, 0 },",
          "225:       0, 0 },",
          "227:       0, 0 },",
          "228: };",
          "",
          "[Removed Lines]",
          "164: #define KAFKA_PRODUCE             0",
          "165: #define KAFKA_FETCH               1",
          "166: #define KAFKA_OFFSETS             2",
          "167: #define KAFKA_METADATA            3",
          "168: #define KAFKA_LEADER_AND_ISR      4",
          "169: #define KAFKA_STOP_REPLICA        5",
          "170: #define KAFKA_UPDATE_METADATA     6",
          "171: #define KAFKA_CONTROLLED_SHUTDOWN 7",
          "172: #define KAFKA_OFFSET_COMMIT       8",
          "173: #define KAFKA_OFFSET_FETCH        9",
          "174: #define KAFKA_GROUP_COORDINATOR  10",
          "175: #define KAFKA_JOIN_GROUP         11",
          "176: #define KAFKA_HEARTBEAT          12",
          "177: #define KAFKA_LEAVE_GROUP        13",
          "178: #define KAFKA_SYNC_GROUP         14",
          "179: #define KAFKA_DESCRIBE_GROUPS    15",
          "180: #define KAFKA_LIST_GROUPS        16",
          "181: #define KAFKA_SASL_HANDSHAKE     17",
          "182: #define KAFKA_API_VERSIONS       18",
          "183: #define KAFKA_CREATE_TOPICS      19",
          "184: #define KAFKA_DELETE_TOPICS      20",
          "186:     { KAFKA_PRODUCE,             \"Produce\",",
          "188:     { KAFKA_FETCH,               \"Fetch\",",
          "189:       0, 6 },",
          "190:     { KAFKA_OFFSETS,             \"Offsets\",",
          "192:     { KAFKA_METADATA,            \"Metadata\",",
          "194:     { KAFKA_LEADER_AND_ISR,      \"LeaderAndIsr\",",
          "195:       0, 0 },",
          "196:     { KAFKA_STOP_REPLICA,        \"StopReplica\",",
          "197:       0, 0 },",
          "198:     { KAFKA_UPDATE_METADATA,     \"UpdateMetadata\",",
          "200:     { KAFKA_CONTROLLED_SHUTDOWN, \"ControlledShutdown\",",
          "201:       1, 1 },",
          "202:     { KAFKA_OFFSET_COMMIT,       \"OffsetCommit\",",
          "204:     { KAFKA_OFFSET_FETCH,        \"OffsetFetch\",",
          "206:     { KAFKA_GROUP_COORDINATOR,   \"GroupCoordinator\",",
          "207:       0, 0 },",
          "208:     { KAFKA_JOIN_GROUP,          \"JoinGroup\",",
          "210:     { KAFKA_HEARTBEAT,           \"Heartbeat\",",
          "212:     { KAFKA_LEAVE_GROUP,         \"LeaveGroup\",",
          "213:       0, 0 },",
          "214:     { KAFKA_SYNC_GROUP,          \"SyncGroup\",",
          "215:       0, 0 },",
          "216:     { KAFKA_DESCRIBE_GROUPS,     \"DescribeGroups\",",
          "217:       0, 0 },",
          "218:     { KAFKA_LIST_GROUPS,         \"ListGroups\",",
          "219:       0, 0 },",
          "220:     { KAFKA_SASL_HANDSHAKE,      \"SaslHandshake\",",
          "222:     { KAFKA_API_VERSIONS,        \"ApiVersions\",",
          "224:     { KAFKA_CREATE_TOPICS,       \"CreateTopics\",",
          "226:     { KAFKA_DELETE_TOPICS,       \"DeleteTopics\",",
          "",
          "[Added Lines]",
          "273: #define KAFKA_TCP_DEFAULT_RANGE     \"9092\"",
          "275: #define KAFKA_PRODUCE                        0",
          "276: #define KAFKA_FETCH                          1",
          "277: #define KAFKA_OFFSETS                        2",
          "278: #define KAFKA_METADATA                       3",
          "279: #define KAFKA_LEADER_AND_ISR                 4",
          "280: #define KAFKA_STOP_REPLICA                   5",
          "281: #define KAFKA_UPDATE_METADATA                6",
          "282: #define KAFKA_CONTROLLED_SHUTDOWN            7",
          "283: #define KAFKA_OFFSET_COMMIT                  8",
          "284: #define KAFKA_OFFSET_FETCH                   9",
          "285: #define KAFKA_FIND_COORDINATOR              10",
          "286: #define KAFKA_JOIN_GROUP                    11",
          "287: #define KAFKA_HEARTBEAT                     12",
          "288: #define KAFKA_LEAVE_GROUP                   13",
          "289: #define KAFKA_SYNC_GROUP                    14",
          "290: #define KAFKA_DESCRIBE_GROUPS               15",
          "291: #define KAFKA_LIST_GROUPS                   16",
          "292: #define KAFKA_SASL_HANDSHAKE                17",
          "293: #define KAFKA_API_VERSIONS                  18",
          "294: #define KAFKA_CREATE_TOPICS                 19",
          "295: #define KAFKA_DELETE_TOPICS                 20",
          "296: #define KAFKA_DELETE_RECORDS                21",
          "297: #define KAFKA_INIT_PRODUCER_ID              22",
          "298: #define KAFKA_OFFSET_FOR_LEADER_EPOCH       23",
          "299: #define KAFKA_ADD_PARTITIONS_TO_TXN         24",
          "300: #define KAFKA_ADD_OFFSETS_TO_TXN            25",
          "301: #define KAFKA_END_TXN                       26",
          "302: #define KAFKA_WRITE_TXN_MARKERS             27",
          "303: #define KAFKA_TXN_OFFSET_COMMIT             28",
          "304: #define KAFKA_DESCRIBE_ACLS                 29",
          "305: #define KAFKA_CREATE_ACLS                   30",
          "306: #define KAFKA_DELETE_ACLS                   31",
          "307: #define KAFKA_DESCRIBE_CONFIGS              32",
          "308: #define KAFKA_ALTER_CONFIGS                 33",
          "309: #define KAFKA_ALTER_REPLICA_LOG_DIRS        34",
          "310: #define KAFKA_DESCRIBE_LOG_DIRS             35",
          "311: #define KAFKA_SASL_AUTHENTICATE             36",
          "312: #define KAFKA_CREATE_PARTITIONS             37",
          "313: #define KAFKA_CREATE_DELEGATION_TOKEN       38",
          "314: #define KAFKA_RENEW_DELEGATION_TOKEN        39",
          "315: #define KAFKA_EXPIRE_DELEGATION_TOKEN       40",
          "316: #define KAFKA_DESCRIBE_DELEGATION_TOKEN     41",
          "317: #define KAFKA_DELETE_GROUPS                 42",
          "318: #define KAFKA_ELECT_LEADERS                 43",
          "319: #define KAFKA_INC_ALTER_CONFIGS             44",
          "320: #define KAFKA_ALTER_PARTITION_REASSIGNMENTS 45",
          "321: #define KAFKA_LIST_PARTITION_REASSIGNMENTS  46",
          "328:     { KAFKA_PRODUCE,                       \"Produce\",",
          "329:       0, 7 },",
          "330:     { KAFKA_FETCH,                         \"Fetch\",",
          "331:       0, 11 },",
          "332:     { KAFKA_OFFSETS,                       \"Offsets\",",
          "334:     { KAFKA_METADATA,                      \"Metadata\",",
          "335:       0, 8 },",
          "336:     { KAFKA_LEADER_AND_ISR,                \"LeaderAndIsr\",",
          "337:       0, 3 },",
          "338:     { KAFKA_STOP_REPLICA,                  \"StopReplica\",",
          "340:     { KAFKA_UPDATE_METADATA,               \"UpdateMetadata\",",
          "341:       0, 5 },",
          "342:     { KAFKA_CONTROLLED_SHUTDOWN,           \"ControlledShutdown\",",
          "344:     { KAFKA_OFFSET_COMMIT,                 \"OffsetCommit\",",
          "345:       0, 7 },",
          "346:     { KAFKA_OFFSET_FETCH,                  \"OffsetFetch\",",
          "347:       0, 5 },",
          "348:     { KAFKA_FIND_COORDINATOR,              \"FindCoordinator\",",
          "350:     { KAFKA_JOIN_GROUP,                    \"JoinGroup\",",
          "351:       0, 5 },",
          "352:     { KAFKA_HEARTBEAT,                     \"Heartbeat\",",
          "353:       0, 3 },",
          "354:     { KAFKA_LEAVE_GROUP,                   \"LeaveGroup\",",
          "355:       0, 3 },",
          "356:     { KAFKA_SYNC_GROUP,                    \"SyncGroup\",",
          "358:     { KAFKA_DESCRIBE_GROUPS,               \"DescribeGroups\",",
          "359:       0, 4 },",
          "360:     { KAFKA_LIST_GROUPS,                   \"ListGroups\",",
          "361:       0, 2 },",
          "362:     { KAFKA_SASL_HANDSHAKE,                \"SaslHandshake\",",
          "364:     { KAFKA_API_VERSIONS,                  \"ApiVersions\",",
          "365:       0, 2 },",
          "366:     { KAFKA_CREATE_TOPICS,                 \"CreateTopics\",",
          "367:       0, 4 },",
          "368:     { KAFKA_DELETE_TOPICS,                 \"DeleteTopics\",",
          "369:       0, 3 },",
          "370:     { KAFKA_DELETE_RECORDS,                \"DeleteRecords\",",
          "372:     { KAFKA_INIT_PRODUCER_ID,              \"InitProducerId\",",
          "374:     { KAFKA_OFFSET_FOR_LEADER_EPOCH,       \"OffsetForLeaderEpoch\",",
          "375:       0, 3 },",
          "376:     { KAFKA_ADD_PARTITIONS_TO_TXN,         \"AddPartitionsToTxn\",",
          "377:       0, 1 },",
          "378:     { KAFKA_ADD_OFFSETS_TO_TXN,            \"AddOffsetsToTxn\",",
          "379:       0, 1 },",
          "380:     { KAFKA_END_TXN,                       \"EndTxn\",",
          "381:       0, 1 },",
          "382:     { KAFKA_WRITE_TXN_MARKERS,             \"WriteTxnMarkers\",",
          "384:     { KAFKA_TXN_OFFSET_COMMIT,             \"TxnOffsetCommit\",",
          "385:       0, 2 },",
          "386:     { KAFKA_DESCRIBE_ACLS,                 \"DescribeAcls\",",
          "387:       0, 1 },",
          "388:     { KAFKA_CREATE_ACLS,                   \"CreateAcls\",",
          "389:       0, 1 },",
          "390:     { KAFKA_DELETE_ACLS,                   \"DeleteAcls\",",
          "391:       0, 1 },",
          "392:     { KAFKA_DESCRIBE_CONFIGS,              \"DescribeConfigs\",",
          "393:       0, 2 },",
          "394:     { KAFKA_ALTER_CONFIGS,                 \"AlterConfigs\",",
          "395:       0, 1 },",
          "396:     { KAFKA_ALTER_REPLICA_LOG_DIRS,        \"AlterReplicaLogDirs\",",
          "397:       0, 1 },",
          "398:     { KAFKA_DESCRIBE_LOG_DIRS,             \"DescribeLogDirs\",",
          "399:       0, 1 },",
          "400:     { KAFKA_SASL_AUTHENTICATE,             \"SaslAuthenticate\",",
          "401:       0, 1 },",
          "402:     { KAFKA_CREATE_PARTITIONS,             \"CreatePartitions\",",
          "403:       0, 1 },",
          "404:     { KAFKA_CREATE_DELEGATION_TOKEN,       \"CreateDelegationToken\",",
          "405:       0, 1 },",
          "406:     { KAFKA_RENEW_DELEGATION_TOKEN,        \"RenewDelegationToken\",",
          "407:       0, 1 },",
          "408:     { KAFKA_EXPIRE_DELEGATION_TOKEN,       \"ExpireDelegationToken\",",
          "409:       0, 1 },",
          "410:     { KAFKA_DESCRIBE_DELEGATION_TOKEN,     \"DescribeDelegationToken\",",
          "411:       0, 1 },",
          "412:     { KAFKA_DELETE_GROUPS,                 \"DeleteGroups\",",
          "413:       0, 1 },",
          "414:     { KAFKA_ELECT_LEADERS,                 \"ElectLeaders\",",
          "415:       0, 1 },",
          "416:     { KAFKA_INC_ALTER_CONFIGS,             \"IncrementalAlterConfigs\",",
          "418:     { KAFKA_ALTER_PARTITION_REASSIGNMENTS, \"AlterPartitionReassignments\",",
          "420:     { KAFKA_LIST_PARTITION_REASSIGNMENTS,  \"ListPartitionReassignments\",",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "247:     { 11, \"Stale Controller Epoch Code\" },",
          "248:     { 12, \"Offset Metadata Too Large\" },",
          "249:     { 14, \"Offsets Load In Progress\" },",
          "251:     { 16, \"Not Coordinator For Consumer\" },",
          "252:     { 17, \"Invalid topic\" },",
          "253:     { 18, \"Message batch larger than configured server segment size\" },",
          "",
          "[Removed Lines]",
          "250:     { 15, \"Consumer Coordinator Not Available\" },",
          "",
          "[Added Lines]",
          "448:     { 15, \"The Coordinator is not Available\" },",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "275:     { 40, \"Invalid configuration\" },",
          "276:     { 41, \"Not controller\" },",
          "277:     { 42, \"Invalid request\" },",
          "278:     { 0, NULL }",
          "279: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "476:     { 43, \"Unsupported for Message Format\" },",
          "477:     { 44, \"Policy Violation\" },",
          "478:     { 45, \"Out of Order Sequence Number\" },",
          "479:     { 46, \"Duplicate Sequence Number\" },",
          "480:     { 47, \"Invalid Producer Epoch\" },",
          "481:     { 48, \"Invalid Transaction State\" },",
          "482:     { 49, \"Invalid Producer ID Mapping\" },",
          "483:     { 50, \"Invalid Transaction Timeout\" },",
          "484:     { 51, \"Concurrent Transactions\" },",
          "485:     { 52, \"Transaction Coordinator Fenced\" },",
          "486:     { 53, \"Transactional ID Authorization Failed\" },",
          "487:     { 54, \"Security Disabled\" },",
          "488:     { 55, \"Operation not Attempted\" },",
          "489:     { 56, \"Kafka Storage Error\" },",
          "490:     { 57, \"Log Directory not Found\" },",
          "491:     { 58, \"SASL Authentication failed\" },",
          "492:     { 59, \"Unknown Producer ID\" },",
          "493:     { 60, \"Partition Reassignment in Progress\" },",
          "494:     { 61, \"Delegation Token Auth Disabled\" },",
          "495:     { 62, \"Delegation Token not Found\" },",
          "496:     { 63, \"Delegation Token Owner Mismatch\" },",
          "497:     { 64, \"Delegation Token Request not Allowed\" },",
          "498:     { 65, \"Delegation Token Authorization Failed\" },",
          "499:     { 66, \"Delegation Token Expired\" },",
          "500:     { 67, \"Supplied Principal Type Unsupported\" },",
          "501:     { 68, \"Not Empty Group\" },",
          "502:     { 69, \"Group ID not Found\" },",
          "503:     { 70, \"Fetch Session ID not Found\" },",
          "504:     { 71, \"Invalid Fetch Session Epoch\" },",
          "505:     { 72, \"Listener not Found\" },",
          "506:     { 73, \"Topic Deletion Disabled\" },",
          "507:     { 74, \"Fenced Leader Epoch\" },",
          "508:     { 75, \"Unknown Leader Epoch\" },",
          "509:     { 76, \"Unsupported Compression Type\" },",
          "510:     { 77, \"Stale Broker Epoch\" },",
          "511:     { 78, \"Offset not Available\" },",
          "512:     { 79, \"Member ID Required\" },",
          "513:     { 80, \"Preferred Leader not Available\" },",
          "514:     { 81, \"Group Max Size Reached\" },",
          "515:     { 82, \"Fenced Instance ID\" },",
          "516:     { 83, \"Eligible topic partition leaders are not available\" },",
          "517:     { 84, \"Leader election not needed for topic partition\" },",
          "518:     { 85, \"No partition reassignment is in progress\" },",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "293: #define KAFKA_MESSAGE_CODEC_GZIP   1",
          "294: #define KAFKA_MESSAGE_CODEC_SNAPPY 2",
          "295: #define KAFKA_MESSAGE_CODEC_LZ4    3",
          "296: static const value_string kafka_message_codecs[] = {",
          "297:     { KAFKA_MESSAGE_CODEC_NONE,   \"None\"   },",
          "298:     { KAFKA_MESSAGE_CODEC_GZIP,   \"Gzip\"   },",
          "299:     { KAFKA_MESSAGE_CODEC_SNAPPY, \"Snappy\" },",
          "300:     { KAFKA_MESSAGE_CODEC_LZ4,    \"LZ4\"    },",
          "301:     { 0, NULL }",
          "302: };",
          "303: #ifdef HAVE_SNAPPY",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "537: #define KAFKA_MESSAGE_CODEC_ZSTD   4",
          "543:     { KAFKA_MESSAGE_CODEC_ZSTD,   \"Zstd\"   },",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "311:     { 0, NULL }",
          "312: };",
          "314: static const value_string kafka_security_protocol_types[] = {",
          "315:     { 0, \"PLAINTEXT\" },",
          "316:     { 1, \"SSL\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "557: #define KAFKA_BATCH_TRANSACTIONAL_MASK 0x10",
          "558: static const value_string kafka_batch_transactional_values[] = {",
          "559:     { 0, \"Non-transactional\" },",
          "560:     { 1, \"Transactional\" },",
          "561:     { 0, NULL }",
          "562: };",
          "564: #define KAFKA_BATCH_CONTROL_BATCH_MASK 0x20",
          "565: static const value_string kafka_batch_control_batch_values[] = {",
          "566:     { 0, \"Data batch\" },",
          "567:     { 1, \"Control batch\" },",
          "568:     { 0, NULL }",
          "569: };",
          "571: static const value_string kafka_coordinator_types[] = {",
          "572:     { 0, \"Group\" },",
          "573:     { 1, \"Transaction\" },",
          "574:     { 0, NULL }",
          "575: };",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "319:     { 0, NULL }",
          "320: };",
          "",
          "[Removed Lines]",
          "323: static range_t *current_kafka_tcp_range = NULL;",
          "",
          "[Added Lines]",
          "585: static const value_string kafka_isolation_levels[] = {",
          "586:     { 0, \"Read Uncommitted\" },",
          "587:     { 1, \"Read Committed\" },",
          "588:     { 0, NULL }",
          "589: };",
          "591: static const value_string kafka_transaction_results[] = {",
          "592:     { 0, \"ABORT\" },",
          "593:     { 1, \"COMMIT\" },",
          "594:     { 0, NULL }",
          "595: };",
          "597: static const value_string acl_resource_types[] = {",
          "598:     { 0, \"Unknown\" },",
          "599:     { 1, \"Any\" },",
          "600:     { 2, \"Topic\" },",
          "601:     { 3, \"Group\" },",
          "602:     { 4, \"Cluster\" },",
          "603:     { 5, \"TransactionalId\" },",
          "604:     { 6, \"DelegationToken\" },",
          "605:     { 0, NULL }",
          "606: };",
          "608: static const value_string acl_resource_pattern_types[] = {",
          "609:     { 0, \"Unknown\" },",
          "610:     { 1, \"Any\" },",
          "611:     { 2, \"Match\" },",
          "612:     { 3, \"Literal\" },",
          "613:     { 4, \"Prefixed\" },",
          "614:     { 0, NULL }",
          "615: };",
          "617: static const value_string acl_operations[] = {",
          "618:     { 0, \"Unknown\" },",
          "619:     { 1, \"Any\" },",
          "620:     { 2, \"All\" },",
          "621:     { 3, \"Read\" },",
          "622:     { 4, \"Write\" },",
          "623:     { 5, \"Create\" },",
          "624:     { 6, \"Delete\" },",
          "625:     { 7, \"Alter\" },",
          "626:     { 8, \"Describe\" },",
          "627:     { 9, \"Cluster Action\" },",
          "628:     { 10, \"Describe Configs\" },",
          "629:     { 11, \"Alter Configs\" },",
          "630:     { 12, \"Idempotent Write\" },",
          "631:     { 0, NULL }",
          "632: };",
          "634: static const value_string acl_permission_types[] = {",
          "635:     { 0, \"Unknown\" },",
          "636:     { 1, \"Any\" },",
          "637:     { 2, \"Deny\" },",
          "638:     { 3, \"Allow\" },",
          "639:     { 0, NULL }",
          "640: };",
          "642: static const value_string config_resource_types[] = {",
          "643:     { 0, \"Unknown\" },",
          "644:     { 2, \"Topic\" },",
          "645:     { 4, \"Broker\" },",
          "646:     { 0, NULL }",
          "647: };",
          "649: static const value_string config_sources[] = {",
          "650:     { 0, \"Unknown\" },",
          "651:     { 1, \"Topic\" },",
          "652:     { 2, \"Broker (Dynamic)\" },",
          "653:     { 3, \"Broker (Dynamic/Default)\" },",
          "654:     { 4, \"Broker (Static)\" },",
          "655:     { 5, \"Default\" },",
          "656:     { 0, NULL }",
          "657: };",
          "659: static const value_string config_operations[] = {",
          "660:     { 0, \"Set\" },",
          "661:     { 1, \"Delete\" },",
          "662:     { 2, \"Append\" },",
          "663:     { 3, \"Subtract\" },",
          "664:     { 0, NULL }",
          "665: };",
          "667: static const value_string election_types[] = {",
          "668:     { 0, \"Preferred\" },",
          "669:     { 1, \"Unclean\" },",
          "670:     { 0, NULL }",
          "671: };",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "500: kafka_check_supported_api_key(packet_info *pinfo, proto_item *ti, kafka_query_response_t *matcher)",
          "501: {",
          "502:     if (kafka_get_api_info(matcher->api_key) == NULL) {",
          "504:         expert_add_info_format(pinfo, ti, &ei_kafka_unknown_api_key,",
          "505:                                \"%s API key\", kafka_api_key_to_str(matcher->api_key));",
          "506:     }",
          "",
          "[Removed Lines]",
          "503:         col_append_fstr(pinfo->cinfo, COL_INFO, \" [Unknown API key]\");",
          "",
          "[Added Lines]",
          "851:         col_append_str(pinfo->cinfo, COL_INFO, \" [Unknown API key]\");",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "514:     api_info = kafka_get_api_info(matcher->api_key);",
          "515:     if (api_info != NULL && !kafka_is_api_version_supported(api_info, matcher->api_version)) {",
          "517:         if (api_info->min_version == -1) {",
          "518:             expert_add_info_format(pinfo, ti, &ei_kafka_unsupported_api_version,",
          "519:                                    \"Unsupported %s version.\",",
          "",
          "[Removed Lines]",
          "516:         col_append_fstr(pinfo->cinfo, COL_INFO, \" [Unsupported API version]\");",
          "",
          "[Added Lines]",
          "864:         col_append_str(pinfo->cinfo, COL_INFO, \" [Unsupported API version]\");",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "539: }",
          "541: static int",
          "543:                     kafka_api_version_t api_version,",
          "545: {",
          "546:     gint32 count, i;",
          "548:     count = (gint32) tvb_get_ntohl(tvb, offset);",
          "550:     offset += 4;",
          "552:     for (i=0; i<count; i++) {",
          "553:         offset = func(tvb, pinfo, tree, offset, api_version);",
          "554:     }",
          "556:     return offset;",
          "557: }",
          "559: static int",
          "560: dissect_kafka_string(proto_tree *tree, int hf_item, tvbuff_t *tvb, packet_info *pinfo, int offset,",
          "561:                      int *p_string_offset, int *p_string_len)",
          "",
          "[Removed Lines]",
          "542: dissect_kafka_array(proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo, int offset,",
          "544:                     int(*func)(tvbuff_t*, packet_info*, proto_tree*, int, kafka_api_version_t))",
          "549:     proto_tree_add_item(tree, hf_kafka_array_count, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "",
          "[Added Lines]",
          "890: dissect_kafka_array_ref(proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo, int offset,",
          "892:                     int(*func)(tvbuff_t*, packet_info*, proto_tree*, int, kafka_api_version_t),",
          "893:                     int *p_count)",
          "904:     if (p_count != NULL) {",
          "906:     }",
          "911: static int",
          "912: dissect_kafka_array(proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo, int offset,",
          "913:                     kafka_api_version_t api_version,",
          "914:                     int(*func)(tvbuff_t*, packet_info*, proto_tree*, int, kafka_api_version_t))",
          "915: {",
          "916:     return dissect_kafka_array_ref(tree, tvb, pinfo, offset, api_version, func, NULL);",
          "917: }",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "632:     return offset;",
          "633: }",
          "657: static int",
          "658: dissect_kafka_timestamp(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, int hf_item, int offset)",
          "659: {",
          "",
          "[Removed Lines]",
          "635: static tvbuff_t *",
          "636: kafka_get_bytes(proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo, int offset)",
          "637: {",
          "638:     gint32 len;",
          "639:     proto_item *pi;",
          "641:     len = (gint32) tvb_get_ntohl(tvb, offset);",
          "642:     pi = proto_tree_add_item(tree, hf_kafka_bytes_len, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "643:     offset += 4;",
          "645:     if (len < -1) {",
          "646:         expert_add_info(pinfo, pi, &ei_kafka_bad_bytes_length);",
          "647:         return NULL;",
          "648:     }",
          "649:     else if (len == -1) {",
          "650:         return NULL;",
          "651:     }",
          "652:     else {",
          "653:         return tvb_new_subset_length(tvb, offset, len);",
          "654:     }",
          "655: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "661:     guint64  milliseconds;",
          "663:     milliseconds = tvb_get_ntoh64(tvb, offset);",
          "664:     nstime.secs  = (time_t) (milliseconds / 1000);",
          "667:     proto_tree_add_time(tree, hf_item, tvb, offset, 8, &nstime);",
          "668:     offset += 8;",
          "",
          "[Removed Lines]",
          "665:     nstime.nsecs = ((int)milliseconds % 1000) * 1000000;",
          "",
          "[Added Lines]",
          "1005:     nstime.nsecs = (int) ((milliseconds % 1000) * 1000000);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "670:     return offset;",
          "671: }",
          "675: {",
          "682:     }",
          "683: }",
          "687: {",
          "936: }",
          "938: static int",
          "940: {",
          "952:     }",
          "955:     }",
          "959:     }",
          "965:     }",
          "981:     return offset;",
          "982: }",
          "986: static int",
          "989: {",
          "993:     return offset;",
          "994: }",
          "996: static int",
          "998: {",
          "1005:     return offset;",
          "1006: }",
          "1008: static int",
          "1010: {",
          "1015:     offset += 8;",
          "1017:     return offset;",
          "1018: }",
          "1020: static int",
          "1023: {",
          "1027:     return offset;",
          "1028: }",
          "1030: static int",
          "1033: {",
          "1037:     return offset;",
          "1038: }",
          "1040: static int",
          "1043: {",
          "1058:     return offset;",
          "1059: }",
          "1061: static int",
          "1064: {",
          "1078:     offset += 2;",
          "1090:     return offset;",
          "1091: }",
          "1093: static int",
          "1095: {",
          "1097: }",
          "1099: static int",
          "1102: {",
          "1123:     return offset;",
          "1124: }",
          "1126: static int",
          "1129: {",
          "1142:     return offset;",
          "1143: }",
          "1145: static int",
          "1148: {",
          "1165: }",
          "1167: static int",
          "1170: {",
          "1173: }",
          "1175: static int",
          "1178: {",
          "1180:     proto_tree *subtree;",
          "1190:     offset += 4;",
          "1200:     }",
          "1210:     return offset;",
          "1211: }",
          "1213: static int",
          "1216: {",
          "1219: }",
          "1221: static int",
          "1224: {",
          "1227: }",
          "1229: static int",
          "1232: {",
          "1245:     offset += 4;",
          "1259:     return offset;",
          "1260: }",
          "1262: static int",
          "1265: {",
          "1289:     return offset;",
          "1290: }",
          "1292: static int",
          "1295: {",
          "1297:     proto_tree *subtree;",
          "1318:     return offset;",
          "1319: }",
          "1323: static int",
          "1326: {",
          "1331:     return offset;",
          "1332: }",
          "1334: static int",
          "1337: {",
          "1342:     return offset;",
          "1343: }",
          "1345: static int",
          "1348: {",
          "1350:     proto_item *subti, *subsubti;",
          "1395:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "1397:     proto_item_set_end(subsubti, tvb, offset);",
          "1399:     proto_item_set_end(subti, tvb, offset);",
          "1405:     return offset;",
          "1406: }",
          "1408: static int",
          "1411: {",
          "1412:     proto_item *subti;",
          "1413:     proto_tree *subtree;",
          "1434:     proto_item_set_end(subti, tvb, offset);",
          "1440:     return offset;",
          "1441: }",
          "1443: static int",
          "1446: {",
          "1496:     proto_item_set_end(subti, tvb, offset);",
          "1503:     return offset;",
          "1504: }",
          "1506: static int",
          "1509: {",
          "1517:     return offset;",
          "1518: }",
          "1522: static int",
          "1525: {",
          "1526:     proto_item *subti;",
          "1527:     proto_tree *subtree;",
          "1549:     return offset;",
          "1550: }",
          "1552: static int",
          "1555: {",
          "1577:     return offset;",
          "1578: }",
          "1580: static int",
          "1583: {",
          "1584:     proto_item *subti;",
          "1585:     proto_tree *subtree;",
          "1605:     proto_item_set_end(subti, tvb, offset);",
          "1612:     return offset;",
          "1613: }",
          "1615: static int",
          "1618: {",
          "1626:     return offset;",
          "1627: }",
          "1631: static int",
          "1634: {",
          "1636:     proto_tree *subtree;",
          "1649:     }",
          "1657:     return offset;",
          "1658: }",
          "1660: static int",
          "1663: {",
          "1680:     return offset;",
          "1681: }",
          "1683: static int",
          "1686: {",
          "1708:     return offset;",
          "1709: }",
          "1711: static int",
          "1714: {",
          "1728:     return offset;",
          "1729: }",
          "1731: static int",
          "1734: {",
          "1736:     proto_tree *subtree;",
          "1768:     return offset;",
          "1769: }",
          "1771: static int",
          "1774: {",
          "1790:     return offset;",
          "1791: }",
          "1793: static int",
          "1796: {",
          "1825:     return offset;",
          "1826: }",
          "1828: static int",
          "1831: {",
          "1833:     proto_tree *subtree;",
          "1839:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "1844:     return offset;",
          "1845: }",
          "1847: static int",
          "1850: {",
          "1864:     return offset;",
          "1865: }",
          "1867: static int",
          "1870: {",
          "1896:     return offset;",
          "1897: }",
          "1899: static int",
          "1902: {",
          "1904:     proto_tree *subtree;",
          "1910:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "1930:     return offset;",
          "1931: }",
          "1935: static int",
          "1938: {",
          "1940:     proto_tree *subtree;",
          "1956:     return offset;",
          "1957: }",
          "1959: static int",
          "1962: {",
          "1964:     proto_tree *subtree;",
          "1970:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "1975:     return offset;",
          "1976: }",
          "1978: static int",
          "1981: {",
          "1983:     offset += 4;",
          "1987:     return offset;",
          "1988: }",
          "1990: static int",
          "1993: {",
          "2015:     return offset;",
          "2016: }",
          "2018: static int",
          "2021: {",
          "2050:     return offset;",
          "2051: }",
          "2053: static int",
          "2056: {",
          "2058:     proto_tree *subtree;",
          "2122:     return offset;",
          "2123: }",
          "2125: static int",
          "2128: {",
          "2149:     return offset;",
          "2150: }",
          "2152: static int",
          "2155: {",
          "2160:     return offset;",
          "2161: }",
          "2163: static int",
          "2166: {",
          "2172:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "2191:     offset += 4;",
          "2213:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "2217:     proto_item_set_end(subti, tvb, offset);",
          "2219:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "2223:     return offset;",
          "2224: }",
          "2226: static int",
          "2229: {",
          "2230:     proto_item *subti;",
          "2231:     proto_tree *subtree;",
          "2252:     proto_item_set_end(subti, tvb, offset);",
          "2260:     return offset;",
          "2261: }",
          "2263: static int",
          "2266: {",
          "2267:     proto_item *subti;",
          "2268:     proto_tree *subtree;",
          "2277:     offset += 4;",
          "2310:     proto_item_set_end(subti, tvb, offset);",
          "2312:     return offset;",
          "2313: }",
          "2315: static int",
          "2318: {",
          "2340:     return offset;",
          "2341: }",
          "2343: static int",
          "2346: {",
          "2350:     return offset;",
          "2351: }",
          "2355: static int",
          "2358: {",
          "2363:     proto_tree_add_item(tree, hf_kafka_broker_nodeid, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2364:     offset += 4;",
          "2368:     return offset;",
          "2369: }",
          "2371: static int",
          "2375: {",
          "2378:     int topic_start, topic_len;",
          "2391:     offset += 4;",
          "2393:     proto_item_set_end(subti, tvb, offset);",
          "2395:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "2399:     return offset;",
          "2400: }",
          "2402: static int",
          "2405: {",
          "2413:     return offset;",
          "2414: }",
          "2418: static int",
          "2421: {",
          "2422:     proto_item *subti;",
          "2423:     proto_tree *subtree;",
          "2448:     proto_item_set_end(subti, tvb, offset);",
          "2452:     return offset;",
          "2453: }",
          "2455: static int",
          "2458: {",
          "2459:     proto_item *subti;",
          "2460:     proto_tree *subtree;",
          "2470:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "2473:     proto_item_set_end(subti, tvb, offset);",
          "2478:     return offset;",
          "2479: }",
          "2481: static int",
          "2484: {",
          "2515:     return offset;",
          "2516: }",
          "2518: static int",
          "2521: {",
          "2522:     proto_item *subti;",
          "2523:     proto_tree *subtree;",
          "2538:     proto_item_set_end(subti, tvb, offset);",
          "2542:     return offset;",
          "2543: }",
          "2545: static int",
          "2548: {",
          "2549:     proto_item *subti;",
          "2550:     proto_tree *subtree;",
          "2560:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "2563:     proto_item_set_end(subti, tvb, offset);",
          "2568:     return offset;",
          "2569: }",
          "2571: static int",
          "2574: {",
          "2584:     return offset;",
          "2585: }",
          "2589: static int",
          "2592: {",
          "2604:     return offset;",
          "2605: }",
          "2607: static int",
          "2610: {",
          "2640:     return offset;",
          "2641: }",
          "2643: static int",
          "2646: {",
          "2648:     offset = dissect_kafka_error(tvb, pinfo, tree, offset);",
          "2653:     return offset;",
          "2654: }",
          "2658: static int",
          "2661: {",
          "2662:     proto_item *subti;",
          "2663:     proto_tree *subtree;",
          "2676:     proto_item_set_end(subti, tvb, offset);",
          "2681:     return offset;",
          "2682: }",
          "2684: static int",
          "2687: {",
          "2688:     proto_item *subti;",
          "2689:     proto_tree *subtree;",
          "2717:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "2719:     proto_item_set_end(subti, tvb, offset);",
          "2728:     return offset;",
          "2729: }",
          "2731: static int",
          "2734: {",
          "2748:     proto_item_set_end(subti, tvb, offset);",
          "2753:     return offset;",
          "2754: }",
          "2756: static int",
          "2759: {",
          "2760:     proto_item *subti;",
          "2761:     proto_tree *subtree;",
          "2765:     offset = dissect_kafka_error(tvb, pinfo, tree, offset);",
          "2783:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "2785:     proto_item_set_end(subti, tvb, offset);",
          "2792:     return offset;",
          "2793: }",
          "2797: static int",
          "2800: {",
          "2823:     return offset;",
          "2824: }",
          "2826: static int",
          "2829: {",
          "2838:     return offset;",
          "2839: }",
          "2843: static int",
          "2846: {",
          "2865:     return offset;",
          "2866: }",
          "2868: static int",
          "2871: {",
          "2875:     return offset;",
          "2876: }",
          "2880: static int",
          "2883: {",
          "2898:     proto_item_set_end(subti, tvb, offset);",
          "2903:     return offset;",
          "2904: }",
          "2906: static int",
          "2909: {",
          "2910:     proto_item *subti;",
          "2911:     proto_tree *subtree;",
          "2930:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "2932:     proto_item_set_end(subti, tvb, offset);",
          "2941:     return offset;",
          "2942: }",
          "2944: static int",
          "2947: {",
          "2954:     return offset;",
          "2955: }",
          "2959: static int",
          "2962: {",
          "2966:     return offset;",
          "2967: }",
          "2969: static int",
          "2972: {",
          "2977:     return offset;",
          "2978: }",
          "2980: static int",
          "2983: {",
          "2984:     proto_item *subti;",
          "2985:     proto_tree *subtree;",
          "3006:     proto_item_set_end(subti, tvb, offset);",
          "3010:     return offset;",
          "3011: }",
          "3013: static int",
          "3016: {",
          "3017:     proto_item *subti, *subsubti;",
          "3018:     proto_tree *subtree, *subsubtree;",
          "3042:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "3046:     proto_item_set_end(subti, tvb, offset);",
          "3051:     return offset;",
          "3052: }",
          "3054: static int",
          "3057: {",
          "3071:     return offset;",
          "3072: }",
          "3074: static int",
          "3077: {",
          "3078:     proto_item *subti;",
          "3079:     proto_tree *subtree;",
          "3093:     proto_item_set_end(subti, tvb, offset);",
          "3100:     return offset;",
          "3101: }",
          "3103: static int",
          "3106: {",
          "3114:     return offset;",
          "3115: }",
          "3119: static int",
          "3122: {",
          "3126:     return offset;",
          "3127: }",
          "3129: static int",
          "3132: {",
          "3155:     proto_item_set_end(subti, tvb, offset);",
          "3157:     return offset;",
          "3158: }",
          "3162: static int",
          "3165: {",
          "3170:     return offset;",
          "3171: }",
          "3173: static int",
          "3176: {",
          "3177:     proto_item *subti;",
          "3178:     proto_tree *subtree;",
          "3188:     offset += 4;",
          "3191:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "3194:     proto_item_set_end(subti, tvb, offset);",
          "3198:     return offset;",
          "3199: }",
          "3201: static int",
          "3204: {",
          "3205:     proto_item *subti;",
          "3206:     proto_tree *subtree;",
          "3220:     proto_item_set_end(subti, tvb, offset);",
          "3227:     return offset;",
          "3228: }",
          "3230: static int",
          "3233: {",
          "3234:     proto_item *subti, *subsubti;",
          "3235:     proto_tree *subtree, *subsubtree;",
          "3265:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "3269:     proto_item_set_end(subti, tvb, offset);",
          "3274:     return offset;",
          "3275: }",
          "3277: static int",
          "3280: {",
          "3281:     proto_item *subti;",
          "3282:     proto_tree *subtree;",
          "3285:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "3286:                                      ett_kafka_topics,",
          "3288:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "3290:     proto_item_set_end(subti, tvb, offset);",
          "3294:     offset += 4;",
          "3296:     return offset;",
          "3297: }",
          "3299: static int",
          "3302: {",
          "3318:     proto_item_set_end(subti, tvb, offset);",
          "3324:     return offset;",
          "3325: }",
          "3327: static int",
          "3330: {",
          "3331:     proto_item *subti;",
          "3332:     proto_tree *subtree;",
          "3335:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "3336:                                      ett_kafka_topics,",
          "3338:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "3340:     proto_item_set_end(subti, tvb, offset);",
          "3342:     return offset;",
          "3343: }",
          "3347: static int",
          "3350: {",
          "3354:     return offset;",
          "3355: }",
          "3357: static int",
          "3360: {",
          "3376:     return offset;",
          "3377: }",
          "3379: static int",
          "3382: {",
          "3398:     proto_item_set_end(subti, tvb, offset);",
          "3404:     return offset;",
          "3405: }",
          "3407: static int",
          "3410: {",
          "3411:     proto_item *subti;",
          "3412:     proto_tree *subtree;",
          "3415:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "3416:                                      ett_kafka_topics,",
          "3418:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "3420:     proto_item_set_end(subti, tvb, offset);",
          "3422:     return offset;",
          "",
          "[Removed Lines]",
          "674: static void show_compression_reduction(tvbuff_t *tvb, proto_tree *tree, guint compressed_size, guint uncompressed_size)",
          "676:     proto_item *ti;",
          "678:     if (uncompressed_size != 0) {",
          "679:         ti = proto_tree_add_float(tree, hf_kafka_message_compression_reduction, tvb, 0, 0,",
          "680:                                   (float)compressed_size / (float)uncompressed_size);",
          "681:         proto_item_set_generated(ti);",
          "685: static int",
          "686: dissect_kafka_message(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int start_offset)",
          "688:     proto_item *message_ti, *decrypt_item;",
          "689:     proto_tree *subtree;",
          "690:     tvbuff_t   *raw, *payload = NULL;",
          "691:     int         offset = start_offset;",
          "692:     gint8       magic_byte;",
          "693:     guint8      codec;",
          "694:     guint       bytes_length = 0;",
          "697:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_message, &message_ti, \"Message\");",
          "700:     proto_tree_add_item(subtree, hf_kafka_message_crc, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "701:     offset += 4;",
          "704:     magic_byte = tvb_get_guint8(tvb, offset);",
          "705:     proto_tree_add_item(subtree, hf_kafka_message_magic, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "706:     offset += 1;",
          "709:     proto_tree_add_item(subtree, hf_kafka_message_codec, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "710:     codec = tvb_get_guint8(tvb, offset) & KAFKA_MESSAGE_CODEC_MASK;",
          "713:     proto_tree_add_item(subtree, hf_kafka_message_timestamp_type, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "714:     offset += 1;",
          "716:     if (magic_byte >= 1) {",
          "718:         offset = dissect_kafka_timestamp(tvb, pinfo, subtree, hf_kafka_message_timestamp, offset);",
          "719:     }",
          "721:     offset = dissect_kafka_bytes(subtree, hf_kafka_message_key, tvb, pinfo, offset, NULL, &bytes_length);",
          "723:     switch (codec) {",
          "724:         case KAFKA_MESSAGE_CODEC_GZIP:",
          "725:             raw = kafka_get_bytes(subtree, tvb, pinfo, offset);",
          "726:             offset += 4;",
          "728:             if (raw) {",
          "729:                 guint compressed_size = tvb_captured_length(raw);",
          "732:                 proto_tree_add_item(subtree, hf_kafka_message_value_compressed, tvb, offset, compressed_size, ENC_NA);",
          "735:                 payload = tvb_child_uncompress(tvb, raw, 0, compressed_size);",
          "736:                 if (payload) {",
          "737:                     show_compression_reduction(tvb, subtree, compressed_size, (guint)tvb_captured_length(payload));",
          "739:                     add_new_data_source(pinfo, payload, \"Uncompressed Message\");",
          "740:                     dissect_kafka_message_set(payload, pinfo, subtree, 0, FALSE, codec);",
          "741:                 } else {",
          "742:                     decrypt_item = proto_tree_add_item(subtree, hf_kafka_message_value, raw, 0, -1, ENC_NA);",
          "743:                     expert_add_info(pinfo, decrypt_item, &ei_kafka_message_decompress);",
          "744:                 }",
          "745:                 offset += compressed_size;",
          "748:                 col_append_fstr(pinfo->cinfo, COL_INFO, \" [GZIPd message set]\");",
          "749:                 proto_item_append_text(message_ti, \" (GZIPd message set)\");",
          "750:             }",
          "751:             else {",
          "752:                 proto_tree_add_bytes(subtree, hf_kafka_message_value, tvb, offset, 0, NULL);",
          "753:             }",
          "754:             break;",
          "755:         case KAFKA_MESSAGE_CODEC_SNAPPY:",
          "756:             raw = kafka_get_bytes(subtree, tvb, pinfo, offset);",
          "757:             offset += 4;",
          "758:             if (raw) {",
          "759: #ifdef HAVE_SNAPPY",
          "760:                 guint compressed_size = tvb_reported_length(raw);",
          "761:                 guint8 *data = (guint8*)tvb_memdup(wmem_packet_scope(), raw, 0, compressed_size);",
          "762:                 size_t uncompressed_size;",
          "763:                 snappy_status ret = SNAPPY_INVALID_INPUT;",
          "766:                 proto_tree_add_item(subtree, hf_kafka_message_value_compressed, tvb, offset, compressed_size, ENC_NA);",
          "768:                 if (tvb_memeql(raw, 0, kafka_xerial_header, sizeof(kafka_xerial_header)) == 0) {",
          "770:                     guint chunk_size, pos = 16;",
          "772:                     payload = tvb_new_composite();",
          "773:                     while (pos < compressed_size) {",
          "774:                         chunk_size = tvb_get_ntohl(raw, pos);",
          "775:                         pos += 4;",
          "776:                         ret = snappy_uncompressed_length(&data[pos], chunk_size, &uncompressed_size);",
          "777:                         if (ret == SNAPPY_OK) {",
          "778:                             guint8 *decompressed_buffer = (guint8*)wmem_alloc(pinfo->pool, uncompressed_size);",
          "780:                             ret = snappy_uncompress(&data[pos], chunk_size, decompressed_buffer, &uncompressed_size);",
          "781:                             if (ret == SNAPPY_OK) {",
          "782:                                 tvb_composite_append(payload,",
          "783:                                                      tvb_new_child_real_data(tvb, decompressed_buffer,",
          "784:                                                                              (guint32)uncompressed_size, (guint32)uncompressed_size));",
          "785:                             } else {",
          "786:                                 wmem_free(pinfo->pool, decompressed_buffer);",
          "787:                                 break;",
          "788:                             }",
          "789:                         }",
          "790:                         pos += chunk_size;",
          "791:                     }",
          "792:                     tvb_composite_finalize(payload);",
          "793:                 } else {",
          "795:                     ret = snappy_uncompressed_length(data, compressed_size, &uncompressed_size);",
          "796:                     if (ret == SNAPPY_OK) {",
          "797:                         guint8 *decompressed_buffer = (guint8*)wmem_alloc(pinfo->pool, uncompressed_size);",
          "799:                         ret = snappy_uncompress(data, compressed_size, decompressed_buffer, &uncompressed_size);",
          "800:                         if (ret == SNAPPY_OK) {",
          "801:                             payload = tvb_new_child_real_data(tvb, decompressed_buffer,",
          "802:                                                              (guint32)uncompressed_size, (guint32)uncompressed_size);",
          "803:                         } else {",
          "804:                             wmem_free(pinfo->pool, decompressed_buffer);",
          "805:                         }",
          "806:                     }",
          "807:                 }",
          "808:                 if (ret == SNAPPY_OK) {",
          "809:                     show_compression_reduction(tvb, subtree, compressed_size, (guint)uncompressed_size);",
          "811:                     add_new_data_source(pinfo, payload, \"Uncompressed Message\");",
          "812:                     dissect_kafka_message_set(payload, pinfo, subtree, 0, FALSE, codec);",
          "815:                     col_append_fstr(pinfo->cinfo, COL_INFO, \" [Snappy-compressed message set]\");",
          "816:                     proto_item_append_text(message_ti, \" (Snappy-compressed message set)\");",
          "817:                 } else {",
          "818:                     decrypt_item = proto_tree_add_item(subtree, hf_kafka_message_value, raw, 0, -1, ENC_NA);",
          "819:                     expert_add_info(pinfo, decrypt_item, &ei_kafka_message_decompress);",
          "820:                 }",
          "821:                 offset += tvb_captured_length(raw);",
          "822: #else",
          "823:                 decrypt_item = proto_tree_add_item(subtree, hf_kafka_message_value, raw, 0, -1, ENC_NA);",
          "824:                 expert_add_info_format(pinfo, decrypt_item, &ei_kafka_message_decompress, \"Wireshark not compiled with Snappy support\");",
          "825: #endif",
          "826:             }",
          "827:             break;",
          "828:         case KAFKA_MESSAGE_CODEC_LZ4:",
          "829:             raw = kafka_get_bytes(subtree, tvb, pinfo, offset);",
          "830:             offset += 4;",
          "831:             if (raw) {",
          "832: #ifdef HAVE_LZ4FRAME_H",
          "833:                 LZ4F_decompressionContext_t lz4_ctxt;",
          "834:                 LZ4F_frameInfo_t lz4_info;",
          "835:                 LZ4F_errorCode_t ret;",
          "836:                 size_t src_offset, src_size, dst_size;",
          "837:                 guchar *decompressed_buffer = NULL;",
          "840:                 guint compressed_size = tvb_reported_length(raw);",
          "841:                 guint8 *data = (guint8*)tvb_memdup(wmem_packet_scope(), raw, 0, compressed_size);",
          "843:                 if (compressed_size > 7) {",
          "844:                     guint hdr_end = 6;",
          "845:                     if (data[4] & 0x08) {",
          "846:                         hdr_end += 8;",
          "847:                     }",
          "848:                     if (hdr_end < compressed_size) {",
          "849:                         data[hdr_end] = (XXH32(&data[4], hdr_end - 4, 0) >> 8) & 0xff;",
          "850:                     }",
          "851:                 }",
          "854:                 proto_tree_add_item(subtree, hf_kafka_message_value_compressed, tvb, offset, compressed_size, ENC_NA);",
          "857:                 ret = LZ4F_createDecompressionContext(&lz4_ctxt, LZ4F_VERSION);",
          "858:                 if (LZ4F_isError(ret)) {",
          "859:                     goto fail;",
          "860:                 }",
          "861:                 src_offset = compressed_size;",
          "862:                 ret = LZ4F_getFrameInfo(lz4_ctxt, &lz4_info, data, &src_offset);",
          "863:                 if (LZ4F_isError(ret)) {",
          "864:                     LZ4F_freeDecompressionContext(lz4_ctxt);",
          "865:                     goto fail;",
          "866:                 }",
          "867:                 switch (lz4_info.blockSizeID) {",
          "868:                 case LZ4F_max64KB:",
          "869:                     dst_size = 1 << 16;",
          "870:                     break;",
          "871:                 case LZ4F_max256KB:",
          "872:                     dst_size = 1 << 18;",
          "873:                     break;",
          "874:                 case LZ4F_max1MB:",
          "875:                     dst_size = 1 << 20;",
          "876:                     break;",
          "877:                 case LZ4F_max4MB:",
          "878:                     dst_size = 1 << 22;",
          "879:                     break;",
          "880:                 default:",
          "881:                     LZ4F_freeDecompressionContext(lz4_ctxt);",
          "882:                     goto fail;",
          "883:                 }",
          "884:                 if (lz4_info.contentSize && lz4_info.contentSize < dst_size) {",
          "885:                     dst_size = (size_t)lz4_info.contentSize;",
          "886:                 }",
          "887:                 decompressed_buffer = (guchar*)wmem_alloc(pinfo->pool, dst_size);",
          "890:                 src_size = compressed_size - src_offset;",
          "891:                 ret = LZ4F_decompress(lz4_ctxt, decompressed_buffer, &dst_size,",
          "892:                                       &data[src_offset], &src_size, NULL);",
          "893:                 LZ4F_freeDecompressionContext(lz4_ctxt);",
          "894:                 if (ret == 0) {",
          "895:                     size_t uncompressed_size = dst_size;",
          "897:                     show_compression_reduction(tvb, subtree, compressed_size, (guint)uncompressed_size);",
          "900:                     payload = tvb_new_child_real_data(tvb, decompressed_buffer,",
          "901:                                                       (guint32)uncompressed_size, (guint32)uncompressed_size);",
          "902:                     add_new_data_source(pinfo, payload, \"Uncompressed Message\");",
          "905:                     dissect_kafka_message_set(payload, pinfo, subtree, 0, FALSE, codec);",
          "908:                     col_append_fstr(pinfo->cinfo, COL_INFO, \" [LZ4-compressed message set]\");",
          "909:                     proto_item_append_text(message_ti, \" (LZ4-compressed message set)\");",
          "910:                 } else {",
          "911:                 fail:",
          "913:                     decrypt_item = proto_tree_add_item(subtree, hf_kafka_message_value, raw, 0, -1, ENC_NA);",
          "914:                     expert_add_info(pinfo, decrypt_item, &ei_kafka_message_decompress);",
          "915:                 }",
          "916:                 offset += compressed_size;",
          "917: #else",
          "918:                 decrypt_item = proto_tree_add_item(subtree, hf_kafka_message_value, raw, 0, -1, ENC_NA);",
          "919:                 expert_add_info_format(pinfo, decrypt_item, &ei_kafka_message_decompress, \"Wireshark not compiled with LZ4 support\");",
          "921:             }",
          "922:             break;",
          "924:         case KAFKA_MESSAGE_CODEC_NONE:",
          "925:         default:",
          "926:             offset = dissect_kafka_bytes(subtree, hf_kafka_message_value, tvb, pinfo, offset, NULL, &bytes_length);",
          "929:             col_append_fstr(pinfo->cinfo, COL_INFO, \" [%u bytes]\", bytes_length);",
          "930:             proto_item_append_text(message_ti, \" (%u bytes)\", bytes_length);",
          "931:     }",
          "933:     proto_item_set_len(message_ti, offset - start_offset);",
          "935:     return offset;",
          "939: dissect_kafka_message_set(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int start_offset, gboolean has_length_field, guint8 codec)",
          "941:     proto_item *ti;",
          "942:     proto_tree *subtree;",
          "943:     gint        len;",
          "944:     int         offset = start_offset;",
          "945:     int         messages = 0;",
          "947:     if (has_length_field) {",
          "948:         proto_tree_add_item(tree, hf_kafka_message_set_size, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "949:         len = (gint)tvb_get_ntohl(tvb, offset);",
          "950:         offset += 4;",
          "951:         start_offset += 4;",
          "953:     else {",
          "954:         len = tvb_reported_length_remaining(tvb, offset);",
          "957:     if (len <= 0) {",
          "958:         return offset;",
          "961:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_message_set, &ti, \"Message Set\");",
          "963:     if (codec != KAFKA_MESSAGE_CODEC_NONE) {",
          "964:         proto_item_append_text(subtree, \" [from compressed %s message]\", val_to_str_const(codec, kafka_message_codecs, \"Unknown codec\"));",
          "967:     while (offset - start_offset < len) {",
          "968:         proto_tree_add_item(subtree, hf_kafka_offset, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "969:         offset += 8;",
          "971:         proto_tree_add_item(subtree, hf_kafka_message_size, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "972:         offset += 4;",
          "974:         offset = dissect_kafka_message(tvb, pinfo, subtree, offset);",
          "975:         messages += 1;",
          "976:     }",
          "978:     proto_item_append_text(ti, \" (%d Messages)\", messages);",
          "979:     proto_item_set_len(ti, offset - start_offset);",
          "987: dissect_kafka_partition_id(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, int offset,",
          "988:                            kafka_api_version_t api_version _U_)",
          "990:     proto_tree_add_item(tree, hf_kafka_partition_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "991:     offset += 4;",
          "997: dissect_kafka_partition_id_get_value(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, int offset, kafka_packet_values_t* packet_values)",
          "999:     proto_tree_add_item(tree, hf_kafka_partition_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1000:     if (packet_values != NULL) {",
          "1001:         packet_values->partition_id = tvb_get_ntohl(tvb, offset);",
          "1002:     }",
          "1003:     offset += 4;",
          "1009: dissect_kafka_offset_get_value(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, int offset, kafka_packet_values_t* packet_values)",
          "1011:     proto_tree_add_item(tree, hf_kafka_offset, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "1012:     if (packet_values != NULL) {",
          "1013:         packet_values->offset = tvb_get_ntoh64(tvb, offset);",
          "1014:     }",
          "1021: dissect_kafka_offset(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, int offset,",
          "1022:                      kafka_api_version_t api_version _U_)",
          "1024:     proto_tree_add_item(tree, hf_kafka_offset, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "1025:     offset += 8;",
          "1031: dissect_kafka_offset_time(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, int offset,",
          "1032:                           kafka_api_version_t api_version _U_)",
          "1034:     proto_tree_add_item(tree, hf_kafka_offset_time, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "1035:     offset += 8;",
          "1041: dissect_kafka_offset_fetch_request_topic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int start_offset,",
          "1042:                                          kafka_api_version_t api_version)",
          "1044:     proto_item *ti;",
          "1045:     proto_tree *subtree;",
          "1046:     int         offset = start_offset;",
          "1047:     guint32     count;",
          "1049:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_request_topic, &ti, \"Offset Fetch Request Topic\");",
          "1051:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, NULL, NULL);",
          "1052:     count = (gint32)tvb_get_ntohl(tvb, offset);",
          "1053:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version, &dissect_kafka_partition_id);",
          "1055:     proto_item_set_len(ti, offset - start_offset);",
          "1056:     proto_item_append_text(ti, \" (%u partitions)\", count);",
          "1062: dissect_kafka_offset_fetch_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "1063:                                    kafka_api_version_t api_version)",
          "1065:     offset = dissect_kafka_string(tree, hf_kafka_consumer_group, tvb, pinfo, offset, NULL, NULL);",
          "1066:     offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version,",
          "1067:                                  &dissect_kafka_offset_fetch_request_topic);",
          "1069:     return offset;",
          "1070: }",
          "1072: static int",
          "1073: dissect_kafka_error_ret(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "1074:                         kafka_error_t *ret)",
          "1075: {",
          "1076:     kafka_error_t error = (kafka_error_t) tvb_get_ntohs(tvb, offset);",
          "1077:     proto_tree_add_item(tree, hf_kafka_error, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "1081:     if (error != 0) {",
          "1082:         col_append_fstr(pinfo->cinfo, COL_INFO,",
          "1083:                         \" [%s] \", kafka_error_to_str(error));",
          "1084:     }",
          "1086:     if (ret) {",
          "1088:     }",
          "1094: dissect_kafka_error(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset)",
          "1096:     return dissect_kafka_error_ret(tvb, pinfo, tree, offset, NULL);",
          "1100: dissect_kafka_offset_fetch_response_partition(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "1101:                                               int start_offset, kafka_api_version_t api_version)",
          "1103:     proto_item *ti;",
          "1104:     proto_tree *subtree;",
          "1105:     int         offset = start_offset;",
          "1106:     kafka_packet_values_t packet_values;",
          "1107:     memset(&packet_values, 0, sizeof(packet_values));",
          "1109:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_request_partition, &ti, \"Offset Fetch Response Partition\");",
          "1111:     offset = dissect_kafka_partition_id_get_value(tvb, pinfo, subtree, offset, &packet_values);",
          "1112:     offset = dissect_kafka_offset(tvb, pinfo, subtree, offset, api_version);",
          "1114:     offset = dissect_kafka_string(subtree, hf_kafka_metadata, tvb, pinfo, offset, NULL, NULL);",
          "1116:     offset = dissect_kafka_error(tvb, pinfo, subtree, offset);",
          "1118:     proto_item_append_text(ti, \" (Partition-ID=%u, Offset=%\" G_GINT64_MODIFIER \"u)\",",
          "1119:                            packet_values.partition_id, packet_values.offset);",
          "1121:     proto_item_set_len(ti, offset - start_offset);",
          "1127: dissect_kafka_offset_fetch_response_topic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int start_offset,",
          "1128:                                           kafka_api_version_t api_version)",
          "1130:     proto_item *ti;",
          "1131:     proto_tree *subtree;",
          "1132:     int         offset = start_offset;",
          "1134:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_response_topic, &ti, \"offset fetch response topic\");",
          "1136:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, NULL, NULL);",
          "1137:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "1138:                                  &dissect_kafka_offset_fetch_response_partition);",
          "1140:     proto_item_set_len(ti, offset - start_offset);",
          "1146: dissect_kafka_offset_fetch_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "1147:                                     kafka_api_version_t api_version)",
          "1149:     if (api_version >= 1) {",
          "1150:         proto_tree_add_item(tree, hf_kafka_throttle_time, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1151:         offset += 4;",
          "1152:     }",
          "1154:     return dissect_kafka_array(tree, tvb, pinfo, offset, api_version,",
          "1155:                                &dissect_kafka_offset_fetch_response_topic);",
          "1156: }",
          "1160: static int",
          "1161: dissect_kafka_metadata_request_topic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "1162:                                      kafka_api_version_t api_version _U_)",
          "1163: {",
          "1164:     return dissect_kafka_string(tree, hf_kafka_topic_name, tvb, pinfo, offset, NULL, NULL);",
          "1168: dissect_kafka_metadata_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "1169:                                kafka_api_version_t api_version)",
          "1171:     return dissect_kafka_array(tree, tvb, pinfo, offset, api_version,",
          "1172:                                &dissect_kafka_metadata_request_topic);",
          "1176: dissect_kafka_metadata_broker(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int start_offset,",
          "1177:                               kafka_api_version_t api_version)",
          "1179:     proto_item *ti;",
          "1181:     int         offset = start_offset;",
          "1182:     guint32     nodeid;",
          "1183:     int         host_start, host_len;",
          "1184:     guint32     broker_port;",
          "1186:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_broker, &ti, \"Broker\");",
          "1188:     nodeid = tvb_get_ntohl(tvb, offset);",
          "1189:     proto_tree_add_item(subtree, hf_kafka_broker_nodeid, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1192:     offset = dissect_kafka_string(subtree, hf_kafka_broker_host, tvb, pinfo, offset, &host_start, &host_len);",
          "1194:     broker_port = tvb_get_ntohl(tvb, offset);",
          "1195:     proto_tree_add_item(subtree, hf_kafka_broker_port, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1196:     offset += 4;",
          "1198:     if (api_version >= 1) {",
          "1199:         offset = dissect_kafka_string(subtree, hf_kafka_broker_rack, tvb, pinfo, offset, NULL, NULL);",
          "1202:     proto_item_append_text(ti, \" (node %u: %s:%u)\",",
          "1203:                            nodeid,",
          "1204:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "1205:                            host_start, host_len, ENC_UTF_8|ENC_NA),",
          "1206:                            broker_port);",
          "1208:     proto_item_set_len(ti, offset - start_offset);",
          "1214: dissect_kafka_metadata_replica(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, int offset,",
          "1215:                                kafka_api_version_t api_version _U_)",
          "1217:     proto_tree_add_item(tree, hf_kafka_replica, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1218:     return offset + 4;",
          "1222: dissect_kafka_metadata_isr(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, int offset,",
          "1223:                            kafka_api_version_t api_version _U_)",
          "1225:     proto_tree_add_item(tree, hf_kafka_isr, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1226:     return offset + 4;",
          "1230: dissect_kafka_metadata_partition(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int start_offset,",
          "1231:                                  kafka_api_version_t api_version)",
          "1233:     proto_item *ti, *subti;",
          "1234:     proto_tree *subtree, *subsubtree;",
          "1235:     int         offset = start_offset;",
          "1236:     int         sub_start_offset;",
          "1238:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_response_partition, &ti, \"Partition\");",
          "1240:     offset = dissect_kafka_error(tvb, pinfo, subtree, offset);",
          "1242:     offset = dissect_kafka_partition_id(tvb, pinfo, subtree, offset, api_version);",
          "1244:     proto_tree_add_item(subtree, hf_kafka_partition_leader, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1247:     sub_start_offset = offset;",
          "1248:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1, ett_kafka_replicas, &subti, \"Replicas\");",
          "1249:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version, &dissect_kafka_metadata_replica);",
          "1250:     proto_item_set_len(subti, offset - sub_start_offset);",
          "1252:     sub_start_offset = offset;",
          "1253:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1, ett_kafka_isrs, &subti, \"Caught-Up Replicas\");",
          "1254:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version, &dissect_kafka_metadata_isr);",
          "1255:     proto_item_set_len(subti, offset - sub_start_offset);",
          "1257:     proto_item_set_len(ti, offset - start_offset);",
          "1263: dissect_kafka_metadata_topic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int start_offset,",
          "1264:                              kafka_api_version_t api_version)",
          "1266:     proto_item *ti;",
          "1267:     proto_tree *subtree;",
          "1268:     int         offset = start_offset;",
          "1269:     int         name_start, name_length;",
          "1271:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_response_topic, &ti, \"Topic\");",
          "1273:     offset = dissect_kafka_error(tvb, pinfo, subtree, offset);",
          "1275:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, &name_start, &name_length);",
          "1276:     proto_item_append_text(ti, \" (%s)\",",
          "1277:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "1278:                            name_start, name_length, ENC_UTF_8|ENC_NA));",
          "1280:     if (api_version >= 1) {",
          "1281:         proto_tree_add_item(subtree, hf_kafka_is_internal, tvb, offset, 1, ENC_NA);",
          "1282:         offset += 1;",
          "1283:     }",
          "1285:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version, &dissect_kafka_metadata_partition);",
          "1287:     proto_item_set_len(ti, offset - start_offset);",
          "1293: dissect_kafka_metadata_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int start_offset,",
          "1294:                                 kafka_api_version_t api_version)",
          "1296:     proto_item *ti;",
          "1298:     int         offset = start_offset;",
          "1300:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_brokers, &ti, \"Broker Metadata\");",
          "1301:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version, &dissect_kafka_metadata_broker);",
          "1302:     proto_item_set_len(ti, offset - start_offset);",
          "1304:     if (api_version >= 2) {",
          "1305:         offset = dissect_kafka_string(tree, hf_kafka_cluster_id, tvb, pinfo, offset, NULL, NULL);",
          "1306:     }",
          "1308:     if (api_version >= 1) {",
          "1309:         proto_tree_add_item(tree, hf_kafka_controller_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1310:         offset += 4;",
          "1311:     }",
          "1313:     start_offset = offset;",
          "1314:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_topics, &ti, \"Topic Metadata\");",
          "1315:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version, &dissect_kafka_metadata_topic);",
          "1316:     proto_item_set_len(ti, offset - start_offset);",
          "1324: dissect_kafka_leader_and_isr_request_isr(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "1325:                                          int offset, kafka_api_version_t api_version _U_)",
          "1328:     proto_tree_add_item(tree, hf_kafka_isr, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1329:     offset += 4;",
          "1335: dissect_kafka_leader_and_isr_request_replica(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "1336:                                              int offset, kafka_api_version_t api_version _U_)",
          "1339:     proto_tree_add_item(tree, hf_kafka_replica, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1340:     offset += 4;",
          "1346: dissect_kafka_leader_and_isr_request_partition_state(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "1347:                                                      int offset, kafka_api_version_t api_version)",
          "1349:     proto_tree *subtree, *subsubtree;",
          "1351:     int topic_start, topic_len;",
          "1352:     kafka_partition_t partition;",
          "1354:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "1355:                                      ett_kafka_request_partition,",
          "1356:                                      &subti, \"Partition State\");",
          "1359:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset,",
          "1360:                                   &topic_start, &topic_len);",
          "1363:     partition = (kafka_partition_t) tvb_get_ntohl(tvb, offset);",
          "1364:     proto_tree_add_item(subtree, hf_kafka_partition_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1365:     offset += 4;",
          "1368:     proto_tree_add_item(subtree, hf_kafka_controller_epoch, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1369:     offset += 4;",
          "1372:     proto_tree_add_item(subtree, hf_kafka_leader_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1373:     offset += 4;",
          "1376:     proto_tree_add_item(subtree, hf_kafka_leader_epoch, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1377:     offset += 4;",
          "1380:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1,",
          "1381:                                         ett_kafka_isrs,",
          "1382:                                         &subsubti, \"ISRs\");",
          "1383:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "1384:                                  &dissect_kafka_leader_and_isr_request_isr);",
          "1385:     proto_item_set_end(subsubti, tvb, offset);",
          "1388:     proto_tree_add_item(subtree, hf_kafka_zk_version, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1389:     offset += 4;",
          "1392:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1,",
          "1393:                                         ett_kafka_replicas,",
          "1394:                                         &subsubti, \"Replicas\");",
          "1396:                                  &dissect_kafka_leader_and_isr_request_replica);",
          "1400:     proto_item_append_text(subti, \" (Topic=%s, Partition-ID=%u)\",",
          "1401:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "1402:                                               topic_start, topic_len, ENC_UTF_8|ENC_NA),",
          "1403:                            partition);",
          "1409: dissect_kafka_leader_and_isr_request_live_leader(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "1410:                                                  int offset, kafka_api_version_t api_version _U_)",
          "1414:     gint32 nodeid;",
          "1415:     int host_start, host_len;",
          "1416:     gint32 broker_port;",
          "1418:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_broker,",
          "1419:                                      &subti, \"Live Leader\");",
          "1422:     nodeid = (kafka_partition_t) tvb_get_ntohl(tvb, offset);",
          "1423:     proto_tree_add_item(subtree, hf_kafka_broker_nodeid, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1424:     offset += 4;",
          "1427:     offset = dissect_kafka_string(subtree, hf_kafka_broker_host, tvb, pinfo, offset, &host_start, &host_len);",
          "1430:     broker_port = (gint32) tvb_get_ntohl(tvb, offset);",
          "1431:     proto_tree_add_item(subtree, hf_kafka_broker_port, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1432:     offset += 4;",
          "1435:     proto_item_append_text(subti, \" (node %u: %s:%u)\",",
          "1436:                            nodeid,",
          "1437:                            tvb_get_string_enc(wmem_packet_scope(), tvb, host_start, host_len, ENC_UTF_8|ENC_NA),",
          "1438:                            broker_port);",
          "1444: dissect_kafka_leader_and_isr_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "1445:                                      kafka_api_version_t api_version)",
          "1447:     gint32 controller_id;",
          "1450:     controller_id = (gint32) tvb_get_ntohl(tvb, offset);",
          "1451:     proto_tree_add_item(tree, hf_kafka_controller_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1452:     offset += 4;",
          "1455:     proto_tree_add_item(tree, hf_kafka_controller_epoch, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1456:     offset += 4;",
          "1459:     offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version,",
          "1460:                                  &dissect_kafka_leader_and_isr_request_partition_state);",
          "1463:     offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version,",
          "1464:                                  &dissect_kafka_leader_and_isr_request_live_leader);",
          "1466:     col_append_fstr(pinfo->cinfo, COL_INFO, \" (Controller-ID=%d)\", controller_id);",
          "1468:     return offset;",
          "1469: }",
          "1471: static int",
          "1472: dissect_kafka_leader_and_isr_response_partition(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "1473:                                                 int offset, kafka_api_version_t api_version _U_)",
          "1474: {",
          "1475:     proto_item *subti;",
          "1476:     proto_tree *subtree;",
          "1477:     int topic_start, topic_len;",
          "1478:     kafka_partition_t partition;",
          "1479:     kafka_error_t error;",
          "1481:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "1482:                                      ett_kafka_response_partition,",
          "1483:                                      &subti, \"Partition\");",
          "1486:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, &topic_start, &topic_len);",
          "1489:     partition = (gint32) tvb_get_ntohl(tvb, offset);",
          "1490:     proto_tree_add_item(subtree, hf_kafka_partition_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1491:     offset += 4;",
          "1494:     offset = dissect_kafka_error_ret(tvb, pinfo, subtree, offset, &error);",
          "1497:     proto_item_append_text(subti, \" (Topic=%s, Partition-ID=%u, Error=%s)\",",
          "1498:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "1499:                                               topic_start, topic_len, ENC_UTF_8|ENC_NA),",
          "1500:                            partition,",
          "1501:                            kafka_error_to_str(error));",
          "1507: dissect_kafka_leader_and_isr_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "1508:                                       kafka_api_version_t api_version)",
          "1511:     offset = dissect_kafka_error(tvb, pinfo, tree, offset);",
          "1514:     offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version,",
          "1515:                                  &dissect_kafka_leader_and_isr_response_partition);",
          "1523: dissect_kafka_stop_replica_request_partition(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "1524:                                              int offset, kafka_api_version_t api_version _U_)",
          "1528:     int topic_start, topic_len;",
          "1529:     kafka_partition_t partition;",
          "1531:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "1532:                                      ett_kafka_request_partition,",
          "1533:                                      &subti, \"Partition\");",
          "1536:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, &topic_start, &topic_len);",
          "1539:     partition = (gint32) tvb_get_ntohl(tvb, offset);",
          "1540:     proto_tree_add_item(subtree, hf_kafka_partition_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1541:     offset += 4;",
          "1543:     proto_item_set_end(subti, tvb, offset);",
          "1544:     proto_item_append_text(subti, \" (Topic=%s, Partition-ID=%u)\",",
          "1545:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "1546:                                               topic_start, topic_len, ENC_UTF_8|ENC_NA),",
          "1547:                            partition);",
          "1553: dissect_kafka_stop_replica_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "1554:                                    kafka_api_version_t api_version)",
          "1556:     gint32 controller_id;",
          "1559:     controller_id = (gint32) tvb_get_ntohl(tvb, offset);",
          "1560:     proto_tree_add_item(tree, hf_kafka_controller_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1561:     offset += 4;",
          "1564:     proto_tree_add_item(tree, hf_kafka_controller_epoch, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1565:     offset += 4;",
          "1568:     proto_tree_add_item(tree, hf_kafka_delete_partitions, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "1569:     offset += 1;",
          "1572:     offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version,",
          "1573:                                  &dissect_kafka_stop_replica_request_partition);",
          "1575:     col_append_fstr(pinfo->cinfo, COL_INFO, \" (Controller-ID=%d)\", controller_id);",
          "1581: dissect_kafka_stop_replica_response_partition(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "1582:                                               int offset, kafka_api_version_t api_version _U_)",
          "1586:     int topic_start, topic_len;",
          "1587:     kafka_error_t error;",
          "1588:     kafka_partition_t partition;",
          "1590:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "1591:                                      ett_kafka_response_partition,",
          "1592:                                      &subti, \"Partition\");",
          "1595:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, &topic_start, &topic_len);",
          "1598:     partition = (gint32) tvb_get_ntohl(tvb, offset);",
          "1599:     proto_tree_add_item(subtree, hf_kafka_partition_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1600:     offset += 4;",
          "1603:     offset = dissect_kafka_error_ret(tvb, pinfo, subtree, offset, &error);",
          "1606:     proto_item_append_text(subti, \" (Topic=%s, Partition-ID=%u, Error=%s)\",",
          "1607:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "1608:                                               topic_start, topic_len, ENC_UTF_8|ENC_NA),",
          "1609:                            partition,",
          "1610:                            kafka_error_to_str(error));",
          "1616: dissect_kafka_stop_replica_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "1617:                                     kafka_api_version_t api_version)",
          "1620:     offset = dissect_kafka_error(tvb, pinfo, tree, offset);",
          "1623:     offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version,",
          "1624:                                  &dissect_kafka_stop_replica_response_partition);",
          "1632: dissect_kafka_fetch_request_partition(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "1633:                                       kafka_api_version_t api_version _U_)",
          "1635:     proto_item *ti;",
          "1637:     kafka_packet_values_t packet_values;",
          "1638:     memset(&packet_values, 0, sizeof(packet_values));",
          "1640:     subtree = proto_tree_add_subtree(tree, tvb, offset, 16, ett_kafka_request_partition, &ti, \"Fetch Request Partition\");",
          "1642:     offset = dissect_kafka_partition_id_get_value(tvb, pinfo, subtree, offset, &packet_values);",
          "1644:     offset = dissect_kafka_offset_get_value(tvb, pinfo, subtree, offset, &packet_values);",
          "1646:     if (api_version >= 5) {",
          "1647:         proto_tree_add_item(subtree, hf_kafka_log_start_offset, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "1648:         offset += 8;",
          "1651:     proto_tree_add_item(subtree, hf_kafka_max_bytes, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1652:     offset += 4;",
          "1654:     proto_item_append_text(ti, \" (Partition-ID=%u, Offset=%\" G_GINT64_MODIFIER \"u)\",",
          "1655:                            packet_values.partition_id, packet_values.offset);",
          "1661: dissect_kafka_fetch_request_topic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int start_offset,",
          "1662:                                   kafka_api_version_t api_version)",
          "1664:     proto_item *ti;",
          "1665:     proto_tree *subtree;",
          "1666:     int         offset = start_offset;",
          "1667:     guint32     count;",
          "1668:     int         name_start, name_length;",
          "1670:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_request_topic, &ti, \"Fetch Request Topic\");",
          "1672:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, &name_start, &name_length);",
          "1673:     count = tvb_get_ntohl(tvb, offset);",
          "1674:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "1675:                                  &dissect_kafka_fetch_request_partition);",
          "1677:     proto_item_set_len(ti, offset - start_offset);",
          "1678:     proto_item_append_text(ti, \" (%u partitions)\", count);",
          "1684: dissect_kafka_fetch_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "1685:                             kafka_api_version_t api_version)",
          "1687:     proto_tree_add_item(tree, hf_kafka_replica, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1688:     offset += 4;",
          "1690:     proto_tree_add_item(tree, hf_kafka_max_wait_time, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1691:     offset += 4;",
          "1693:     proto_tree_add_item(tree, hf_kafka_min_bytes, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1694:     offset += 4;",
          "1696:     if (api_version >= 3) {",
          "1697:         proto_tree_add_item(tree, hf_kafka_max_bytes, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1698:         offset += 4;",
          "1699:     }",
          "1701:     if (api_version >= 4) {",
          "1702:         proto_tree_add_item(tree, hf_kafka_isolation_level, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "1703:         offset += 1;",
          "1704:     }",
          "1706:     offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version, &dissect_kafka_fetch_request_topic);",
          "1712: dissect_kafka_aborted_transaction(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "1713:                                   int start_offset, kafka_api_version_t api_version _U_)",
          "1715:     proto_item *ti;",
          "1716:     proto_tree *subtree;",
          "1717:     int         offset = start_offset;",
          "1719:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_request_topic, &ti, \"Fetch Response Aborted Transaction\");",
          "1721:     proto_tree_add_item(subtree, hf_kafka_producer_id, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "1722:     offset += 8;",
          "1724:     proto_tree_add_item(subtree, hf_kafka_first_offset, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "1725:     offset += 8;",
          "1727:     proto_item_set_len(ti, offset - start_offset);",
          "1732: dissect_kafka_fetch_response_partition(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int start_offset,",
          "1733:                                        kafka_api_version_t api_version _U_)",
          "1735:     proto_item *ti;",
          "1737:     int         offset = start_offset;",
          "1738:     kafka_packet_values_t packet_values;",
          "1739:     memset(&packet_values, 0, sizeof(packet_values));",
          "1741:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_response_partition, &ti, \"Fetch Response Partition\");",
          "1743:     offset = dissect_kafka_partition_id_get_value(tvb, pinfo, subtree, offset, &packet_values);",
          "1745:     offset = dissect_kafka_error(tvb, pinfo, subtree, offset);",
          "1747:     offset = dissect_kafka_offset_get_value(tvb, pinfo, subtree, offset, &packet_values);",
          "1749:     if (api_version >= 4) {",
          "1750:         proto_tree_add_item(subtree, hf_kafka_last_stable_offset, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "1751:         offset += 8;",
          "1753:         if (api_version >= 5) {",
          "1754:             proto_tree_add_item(subtree, hf_kafka_log_start_offset, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "1755:             offset += 8;",
          "1756:         }",
          "1758:         offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version, &dissect_kafka_aborted_transaction);",
          "1759:     }",
          "1761:     offset = dissect_kafka_message_set(tvb, pinfo, subtree, offset, TRUE, KAFKA_MESSAGE_CODEC_NONE);",
          "1763:     proto_item_set_len(ti, offset - start_offset);",
          "1765:     proto_item_append_text(ti, \" (Partition-ID=%u, Offset=%\" G_GINT64_MODIFIER \"u)\",",
          "1766:                            packet_values.partition_id, packet_values.offset);",
          "1772: dissect_kafka_fetch_response_topic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int start_offset,",
          "1773:                                    kafka_api_version_t api_version)",
          "1775:     proto_item *ti;",
          "1776:     proto_tree *subtree;",
          "1777:     int         offset = start_offset;",
          "1778:     guint32     count;",
          "1780:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_response_topic, &ti, \"Fetch Response Topic\");",
          "1782:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, NULL, NULL);",
          "1783:     count = tvb_get_ntohl(tvb, offset);",
          "1784:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "1785:                                  &dissect_kafka_fetch_response_partition);",
          "1787:     proto_item_set_len(ti, offset - start_offset);",
          "1788:     proto_item_append_text(ti, \" (%u partitions)\", count);",
          "1794: dissect_kafka_fetch_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "1795:                              kafka_api_version_t api_version)",
          "1797:     if (api_version >= 1) {",
          "1799:         proto_tree_add_item(tree, hf_kafka_throttle_time, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1800:         offset += 4;",
          "1801:     }",
          "1803:     return dissect_kafka_array(tree, tvb, pinfo, offset, api_version, &dissect_kafka_fetch_response_topic);",
          "1804: }",
          "1808: static int",
          "1809: dissect_kafka_produce_request_partition(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "1810:                                         kafka_api_version_t api_version _U_)",
          "1811: {",
          "1812:     proto_item *ti;",
          "1813:     proto_tree *subtree;",
          "1814:     kafka_packet_values_t packet_values;",
          "1815:     memset(&packet_values, 0, sizeof(packet_values));",
          "1817:     subtree = proto_tree_add_subtree(tree, tvb, offset, 14, ett_kafka_request_partition, &ti, \"Produce Request Partition\");",
          "1819:     offset = dissect_kafka_partition_id_get_value(tvb, pinfo, subtree, offset, &packet_values);",
          "1821:     offset = dissect_kafka_message_set(tvb, pinfo, subtree, offset, TRUE, KAFKA_MESSAGE_CODEC_NONE);",
          "1823:     proto_item_append_text(ti, \" (Partition-ID=%u)\", packet_values.partition_id);",
          "1829: dissect_kafka_produce_request_topic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int start_offset,",
          "1830:                                     kafka_api_version_t api_version)",
          "1832:     proto_item *ti;",
          "1834:     int         offset = start_offset;",
          "1836:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_request_topic, &ti, \"Produce Request Topic\");",
          "1838:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, NULL, NULL);",
          "1840:                                  &dissect_kafka_produce_request_partition);",
          "1842:     proto_item_set_len(ti, offset - start_offset);",
          "1848: dissect_kafka_produce_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "1849:                               kafka_api_version_t api_version)",
          "1851:     if (api_version >= 3) {",
          "1852:         offset = dissect_kafka_string(tree, hf_kafka_transactional_id, tvb, pinfo, offset, NULL, NULL);",
          "1853:     }",
          "1855:     proto_tree_add_item(tree, hf_kafka_required_acks, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "1856:     offset += 2;",
          "1858:     proto_tree_add_item(tree, hf_kafka_timeout, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1859:     offset += 4;",
          "1861:     offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version,",
          "1862:                                  &dissect_kafka_produce_request_topic);",
          "1868: dissect_kafka_produce_response_partition(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "1869:                                          kafka_api_version_t api_version _U_)",
          "1871:     proto_item *ti;",
          "1872:     proto_tree *subtree;",
          "1873:     kafka_packet_values_t packet_values;",
          "1874:     memset(&packet_values, 0, sizeof(packet_values));",
          "1876:     subtree = proto_tree_add_subtree(tree, tvb, offset, 14, ett_kafka_response_partition, &ti, \"Produce Response Partition\");",
          "1878:     offset = dissect_kafka_partition_id_get_value(tvb, pinfo, subtree, offset, &packet_values);",
          "1880:     offset = dissect_kafka_error(tvb, pinfo, subtree, offset);",
          "1882:     offset = dissect_kafka_offset_get_value(tvb, pinfo, subtree, offset, &packet_values);",
          "1884:     if (api_version >= 2) {",
          "1885:         offset = dissect_kafka_offset_time(tvb, pinfo, subtree, offset, api_version);",
          "1886:     }",
          "1888:     if (api_version >= 5) {",
          "1889:         proto_tree_add_item(tree, hf_kafka_log_start_offset, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "1890:         offset += 8;",
          "1891:     }",
          "1893:     proto_item_append_text(ti, \" (Partition-ID=%u, Offset=%\" G_GINT64_MODIFIER \"u)\",",
          "1894:                            packet_values.partition_id, packet_values.offset);",
          "1900: dissect_kafka_produce_response_topic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int start_offset,",
          "1901:                                      kafka_api_version_t api_version)",
          "1903:     proto_item *ti;",
          "1905:     int         offset = start_offset;",
          "1907:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_response_topic, &ti, \"Produce Response Topic\");",
          "1909:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, NULL, NULL);",
          "1911:                                  &dissect_kafka_produce_response_partition);",
          "1913:     proto_item_set_len(ti, offset - start_offset);",
          "1915:     return offset;",
          "1916: }",
          "1918: static int",
          "1919: dissect_kafka_produce_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "1920:                                kafka_api_version_t api_version)",
          "1921: {",
          "1922:     offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version, &dissect_kafka_produce_response_topic);",
          "1924:     if (api_version >= 1) {",
          "1926:         proto_tree_add_item(tree, hf_kafka_throttle_time, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1927:         offset += 4;",
          "1928:     }",
          "1936: dissect_kafka_offsets_request_partition(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "1937:                                         int start_offset, kafka_api_version_t api_version)",
          "1939:     proto_item *ti;",
          "1941:     int         offset = start_offset;",
          "1943:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_request_partition, &ti, \"Offset Request Partition\");",
          "1945:     offset = dissect_kafka_partition_id(tvb, pinfo, subtree, offset, api_version);",
          "1947:     offset = dissect_kafka_offset_time(tvb, pinfo, subtree, offset, api_version);",
          "1949:     if (api_version == 0) {",
          "1950:         proto_tree_add_item(subtree, hf_kafka_max_offsets, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1951:         offset += 4;",
          "1952:     }",
          "1954:     proto_item_set_len(ti, offset - start_offset);",
          "1960: dissect_kafka_offsets_request_topic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int start_offset,",
          "1961:                                     kafka_api_version_t api_version)",
          "1963:     proto_item *ti;",
          "1965:     int         offset = start_offset;",
          "1967:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_request_topic, &ti, \"Offset Request Topic\");",
          "1969:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, NULL, NULL);",
          "1971:                                  &dissect_kafka_offsets_request_partition);",
          "1973:     proto_item_set_len(ti, offset - start_offset);",
          "1979: dissect_kafka_offsets_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "1980:                               kafka_api_version_t api_version)",
          "1982:     proto_tree_add_item(tree, hf_kafka_replica, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1985:     offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version, &dissect_kafka_offsets_request_topic);",
          "1991: dissect_kafka_offsets_response_partition(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "1992:                                          int start_offset, kafka_api_version_t api_version)",
          "1994:     proto_item *ti;",
          "1995:     proto_tree *subtree;",
          "1996:     int         offset = start_offset;",
          "1998:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_response_partition, &ti, \"Offset Response Partition\");",
          "2000:     offset = dissect_kafka_partition_id(tvb, pinfo, subtree, offset, api_version);",
          "2002:     offset = dissect_kafka_error(tvb, pinfo, subtree, offset);",
          "2004:     if (api_version == 0) {",
          "2005:         offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version, &dissect_kafka_offset);",
          "2006:     }",
          "2007:     else if (api_version >= 1) {",
          "2008:         offset = dissect_kafka_offset_time(tvb, pinfo, subtree, offset, api_version);",
          "2010:         offset = dissect_kafka_offset(tvb, pinfo, subtree, offset, api_version);",
          "2011:     }",
          "2013:     proto_item_set_len(ti, offset - start_offset);",
          "2019: dissect_kafka_offsets_response_topic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int start_offset,",
          "2020:                                      kafka_api_version_t api_version)",
          "2022:     proto_item *ti;",
          "2023:     proto_tree *subtree;",
          "2024:     int         offset = start_offset;",
          "2026:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_response_topic, &ti, \"Offset Response Topic\");",
          "2028:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, NULL, NULL);",
          "2029:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "2030:                                  &dissect_kafka_offsets_response_partition);",
          "2032:     proto_item_set_len(ti, offset - start_offset);",
          "2034:     return offset;",
          "2035: }",
          "2037: static int",
          "2038: dissect_kafka_offsets_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "2039:                                kafka_api_version_t api_version)",
          "2040: {",
          "2041:     return dissect_kafka_array(tree, tvb, pinfo, offset, api_version, &dissect_kafka_offsets_response_topic);",
          "2042: }",
          "2046: static int",
          "2047: dissect_kafka_api_versions_request(tvbuff_t *tvb _U_, packet_info *pinfo _U_, proto_tree *tree _U_,",
          "2048:                                    int offset _U_, kafka_api_version_t api_version _U_)",
          "2049: {",
          "2054: dissect_kafka_api_versions_response_api_version(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "2055:                                                 int offset, kafka_api_version_t api_version _U_)",
          "2057:     proto_item *ti;",
          "2059:     kafka_api_key_t api_key;",
          "2060:     kafka_api_version_t min_version, max_version;",
          "2061:     const kafka_api_info_t *api_info;",
          "2063:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_api_version, &ti,",
          "2064:                                      \"API Version\");",
          "2066:     api_key = tvb_get_ntohs(tvb, offset);",
          "2067:     proto_tree_add_item(subtree, hf_kafka_api_versions_api_key, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "2068:     offset += 2;",
          "2070:     min_version = tvb_get_ntohs(tvb, offset);",
          "2071:     proto_tree_add_item(subtree, hf_kafka_api_versions_min_version, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "2072:     offset += 2;",
          "2074:     max_version = tvb_get_ntohs(tvb, offset);",
          "2075:     proto_tree_add_item(subtree, hf_kafka_api_versions_max_version, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "2076:     offset += 2;",
          "2078:     proto_item_set_end(ti, tvb, offset);",
          "2079:     if (max_version != min_version) {",
          "2081:         proto_item_append_text(subtree, \" %s (v%d-%d)\",",
          "2082:                                kafka_api_key_to_str(api_key),",
          "2083:                                min_version, max_version);",
          "2084:     }",
          "2085:     else {",
          "2087:         proto_item_append_text(subtree, \" %s (v%d)\",",
          "2088:                                kafka_api_key_to_str(api_key),",
          "2089:                                min_version);",
          "2090:     }",
          "2092:     api_info = kafka_get_api_info(api_key);",
          "2093:     if (api_info == NULL) {",
          "2094:         proto_item_append_text(subtree, \" [Unknown API key]\");",
          "2095:         expert_add_info_format(pinfo, ti, &ei_kafka_unknown_api_key,",
          "2096:                                \"%s API key\", kafka_api_key_to_str(api_key));",
          "2097:     }",
          "2098:     else if (!kafka_is_api_version_supported(api_info, min_version) ||",
          "2099:              !kafka_is_api_version_supported(api_info, max_version)) {",
          "2100:         if (api_info->min_version == -1) {",
          "2101:             proto_item_append_text(subtree, \" [Unsupported API version]\");",
          "2102:             expert_add_info_format(pinfo, ti, &ei_kafka_unsupported_api_version,",
          "2103:                                    \"Unsupported %s version.\",",
          "2104:                                    kafka_api_key_to_str(api_key));",
          "2105:         }",
          "2106:         else if (api_info->min_version == api_info->max_version) {",
          "2107:             proto_item_append_text(subtree, \" [Unsupported API version. Supports v%d]\",",
          "2108:                                    api_info->min_version);",
          "2109:             expert_add_info_format(pinfo, ti, &ei_kafka_unsupported_api_version,",
          "2110:                                    \"Unsupported %s version. Supports v%d.\",",
          "2111:                                    kafka_api_key_to_str(api_key), api_info->min_version);",
          "2112:         } else {",
          "2113:             proto_item_append_text(subtree, \" [Unsupported API version. Supports v%d-%d]\",",
          "2114:                                    api_info->min_version, api_info->max_version);",
          "2115:             expert_add_info_format(pinfo, ti, &ei_kafka_unsupported_api_version,",
          "2116:                                    \"Unsupported %s version. Supports v%d-%d.\",",
          "2117:                                    kafka_api_key_to_str(api_key),",
          "2118:                                    api_info->min_version, api_info->max_version);",
          "2119:         }",
          "2120:     }",
          "2126: dissect_kafka_api_versions_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "2127:                                     kafka_api_version_t api_version)",
          "2130:     offset = dissect_kafka_error(tvb, pinfo, tree, offset);",
          "2133:     offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version,",
          "2134:                                  &dissect_kafka_api_versions_response_api_version);",
          "2136:     return offset;",
          "2137: }",
          "2141: static int",
          "2142: dissect_kafka_update_metadata_request_isr(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "2143:                                           int offset, kafka_api_version_t api_version _U_)",
          "2144: {",
          "2146:     proto_tree_add_item(tree, hf_kafka_isr, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2147:     offset += 4;",
          "2153: dissect_kafka_update_metadata_request_replica(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "2154:                                               int offset, kafka_api_version_t api_version _U_)",
          "2157:     proto_tree_add_item(tree, hf_kafka_replica, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2158:     offset += 4;",
          "2164: dissect_kafka_update_metadata_request_partition_state(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "2165:                                                       int offset, kafka_api_version_t api_version)",
          "2167:     proto_tree *subtree, *subsubtree;",
          "2168:     proto_item *subti, *subsubti;",
          "2169:     int topic_start, topic_len;",
          "2170:     kafka_partition_t partition;",
          "2173:                                      ett_kafka_request_partition,",
          "2174:                                      &subti, \"Partition State\");",
          "2177:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset,",
          "2178:                                   &topic_start, &topic_len);",
          "2181:     partition = (gint32) tvb_get_ntohl(tvb, offset);",
          "2182:     proto_tree_add_item(subtree, hf_kafka_partition_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2183:     offset += 4;",
          "2186:     proto_tree_add_item(subtree, hf_kafka_controller_epoch, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2187:     offset += 4;",
          "2190:     proto_tree_add_item(subtree, hf_kafka_leader_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2194:     proto_tree_add_item(subtree, hf_kafka_leader_epoch, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2195:     offset += 4;",
          "2198:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1,",
          "2199:                                         ett_kafka_isrs,",
          "2200:                                         &subsubti, \"ISRs\");",
          "2201:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "2202:                                  &dissect_kafka_update_metadata_request_isr);",
          "2203:     proto_item_set_end(subsubti, tvb, offset);",
          "2206:     proto_tree_add_item(subtree, hf_kafka_zk_version, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2207:     offset += 4;",
          "2210:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1,",
          "2211:                                         ett_kafka_replicas,",
          "2212:                                         &subsubti, \"Replicas\");",
          "2214:                                  &dissect_kafka_update_metadata_request_replica);",
          "2215:     proto_item_set_end(subsubti, tvb, offset);",
          "2218:     proto_item_append_text(subti, \" (Topic=%s, Partition-ID=%u)\",",
          "2220:                                               topic_start, topic_len, ENC_UTF_8|ENC_NA),",
          "2221:                            partition);",
          "2227: dissect_kafka_update_metadata_request_end_point(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "2228:                                                 int offset, kafka_api_version_t api_version _U_)",
          "2232:     int host_start, host_len;",
          "2233:     gint32 broker_port;",
          "2234:     gint16 security_protocol_type;",
          "2236:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_broker_end_point,",
          "2237:                                      &subti, \"End Point\");",
          "2240:     broker_port = (gint32) tvb_get_ntohl(tvb, offset);",
          "2241:     proto_tree_add_item(subtree, hf_kafka_broker_port, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2242:     offset += 4;",
          "2245:     offset = dissect_kafka_string(subtree, hf_kafka_broker_host, tvb, pinfo, offset, &host_start, &host_len);",
          "2248:     security_protocol_type = (gint16) tvb_get_ntohs(tvb, offset);",
          "2249:     proto_tree_add_item(subtree, hf_kafka_broker_security_protocol_type, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "2250:     offset += 2;",
          "2253:     proto_item_append_text(subti, \" (%s://%s:%d)\",",
          "2254:                            val_to_str_const(security_protocol_type,",
          "2255:                                             kafka_security_protocol_types, \"UNKNOWN\"),",
          "2256:                            tvb_get_string_enc(wmem_packet_scope(), tvb, host_start, host_len,",
          "2257:                                               ENC_UTF_8|ENC_NA),",
          "2258:                            broker_port);",
          "2264: dissect_kafka_update_metadata_request_live_leader(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "2265:                                                   int offset, kafka_api_version_t api_version)",
          "2269:     gint32 nodeid;",
          "2271:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_broker,",
          "2272:                                      &subti, \"Live Leader\");",
          "2275:     nodeid = (gint32) tvb_get_ntohl(tvb, offset);",
          "2276:     proto_tree_add_item(subtree, hf_kafka_broker_nodeid, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2279:     if (api_version == 0) {",
          "2280:         int host_start, host_len;",
          "2281:         gint32 broker_port;",
          "2284:         offset = dissect_kafka_string(subtree, hf_kafka_broker_host, tvb, pinfo, offset, &host_start, &host_len);",
          "2287:         broker_port = (gint32) tvb_get_ntohl(tvb, offset);",
          "2288:         proto_tree_add_item(subtree, hf_kafka_broker_port, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2289:         offset += 4;",
          "2291:         proto_item_append_text(subti, \" (node %u: %s:%u)\",",
          "2292:                                nodeid,",
          "2293:                                tvb_get_string_enc(wmem_packet_scope(), tvb, host_start, host_len,",
          "2294:                                                   ENC_UTF_8|ENC_NA),",
          "2295:                                broker_port);",
          "2296:     } else if (api_version >= 1) {",
          "2298:         offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "2299:                                      &dissect_kafka_update_metadata_request_end_point);",
          "2301:         if (api_version >= 2) {",
          "2303:             offset = dissect_kafka_string(subtree, hf_kafka_broker_rack, tvb, pinfo, offset, NULL, NULL);",
          "2304:         }",
          "2306:         proto_item_append_text(subti, \" (node %d)\",",
          "2307:                                nodeid);",
          "2308:     }",
          "2316: dissect_kafka_update_metadata_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "2317:                                       kafka_api_version_t api_version)",
          "2319:     gint32 controller_id;",
          "2322:     controller_id = (gint32) tvb_get_ntohl(tvb, offset);",
          "2323:     proto_tree_add_item(tree, hf_kafka_controller_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2324:     offset += 4;",
          "2327:     proto_tree_add_item(tree, hf_kafka_controller_epoch, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2328:     offset += 4;",
          "2331:     offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version,",
          "2332:                                  &dissect_kafka_update_metadata_request_partition_state);",
          "2335:     offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version,",
          "2336:                                  &dissect_kafka_update_metadata_request_live_leader);",
          "2338:     col_append_fstr(pinfo->cinfo, COL_INFO, \" (Controller-ID=%d)\", controller_id);",
          "2344: dissect_kafka_update_metadata_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "2345:                                        kafka_api_version_t api_version _U_)",
          "2348:     offset = dissect_kafka_error(tvb, pinfo, tree, offset);",
          "2356: dissect_kafka_controlled_shutdown_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "2357:                                           kafka_api_version_t api_version _U_)",
          "2359:     gint32 broker_id;",
          "2362:     broker_id = (gint32) tvb_get_ntohl(tvb, offset);",
          "2366:     col_append_fstr(pinfo->cinfo, COL_INFO, \" (Broker-ID=%d)\", broker_id);",
          "2372: dissect_kafka_controlled_shutdown_response_partition_remaining(tvbuff_t *tvb, packet_info *pinfo,",
          "2373:                                                                proto_tree *tree, int offset,",
          "2374:                                                                kafka_api_version_t api_version _U_)",
          "2376:     proto_item *subti;",
          "2377:     proto_tree *subtree;",
          "2379:     kafka_partition_t partition;",
          "2381:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_response_topic, &subti,",
          "2382:                                      \"Partition Remaining\");",
          "2385:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset,",
          "2386:                                   &topic_start, &topic_len);",
          "2389:     partition = (gint32) tvb_get_ntohl(tvb, offset);",
          "2390:     proto_tree_add_item(subtree, hf_kafka_partition_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2394:     proto_item_append_text(subti, \" (Topic=%s, Partition-ID=%d)\",",
          "2396:                                               topic_start, topic_len, ENC_UTF_8|ENC_NA),",
          "2397:                            partition);",
          "2403: dissect_kafka_controlled_shutdown_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "2404:                                            kafka_api_version_t api_version)",
          "2407:     offset = dissect_kafka_error(tvb, pinfo, tree, offset);",
          "2410:     offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version,",
          "2411:                                  &dissect_kafka_controlled_shutdown_response_partition_remaining);",
          "2419: dissect_kafka_offset_commit_request_partition(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "2420:                                               int offset, kafka_api_version_t api_version _U_)",
          "2424:     kafka_partition_t partition_id;",
          "2425:     kafka_offset_t partition_offset;",
          "2427:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_request_partition, &subti,",
          "2428:                                      \"Partition\");",
          "2431:     partition_id = (gint32) tvb_get_ntohl(tvb, offset);",
          "2432:     proto_tree_add_item(subtree, hf_kafka_partition_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2433:     offset += 4;",
          "2436:     partition_offset = (gint64) tvb_get_ntoh64(tvb, offset);",
          "2437:     proto_tree_add_item(subtree, hf_kafka_offset, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "2438:     offset += 8;",
          "2440:     if (api_version == 1) {",
          "2442:         offset = dissect_kafka_timestamp(tvb, pinfo, subtree, hf_kafka_commit_timestamp, offset);",
          "2443:     }",
          "2446:     offset = dissect_kafka_string(subtree, hf_kafka_metadata, tvb, pinfo, offset, NULL, NULL);",
          "2449:     proto_item_append_text(subti, \" (Partition-ID=%u, Offset=%\" G_GINT64_MODIFIER \"u)\",",
          "2450:                            partition_id, partition_offset);",
          "2456: dissect_kafka_offset_commit_request_topic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "2457:                                           int offset, kafka_api_version_t api_version)",
          "2461:     int topic_start, topic_len;",
          "2463:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_request_topic, &subti, \"Topic\");",
          "2466:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset,",
          "2467:                                   &topic_start, &topic_len);",
          "2471:                                  &dissect_kafka_offset_commit_request_partition);",
          "2474:     proto_item_append_text(subti, \" (Topic=%s)\",",
          "2475:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "2476:                                               topic_start, topic_len, ENC_UTF_8|ENC_NA));",
          "2482: dissect_kafka_offset_commit_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "2483:                                     kafka_api_version_t api_version)",
          "2485:     int group_start, group_len;",
          "2488:     offset = dissect_kafka_string(tree, hf_kafka_consumer_group, tvb, pinfo, offset,",
          "2489:                                   &group_start, &group_len);",
          "2491:     if (api_version >= 1) {",
          "2493:         proto_tree_add_item(tree, hf_kafka_generation_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2494:         offset += 4;",
          "2497:         offset = dissect_kafka_string(tree, hf_kafka_member_id, tvb, pinfo, offset, NULL, NULL);",
          "2499:         if (api_version >= 2) {",
          "2501:             proto_tree_add_item(tree, hf_kafka_retention_time, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "2502:             offset += 8;",
          "2503:         }",
          "2504:     }",
          "2507:     offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version,",
          "2508:                                  &dissect_kafka_offset_commit_request_topic);",
          "2510:     col_append_fstr(pinfo->cinfo, COL_INFO,",
          "2511:                     \" (Group=%s)\",",
          "2512:                     tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "2513:                                        group_start, group_len, ENC_UTF_8|ENC_NA));",
          "2519: dissect_kafka_offset_commit_response_partition_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "2520:                                                         int offset, kafka_api_version_t api_version _U_)",
          "2524:     kafka_partition_t partition;",
          "2525:     kafka_error_t error;",
          "2527:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_response_partition, &subti,",
          "2528:                                      \"Partition Response\");",
          "2531:     partition = (gint32) tvb_get_ntohl(tvb, offset);",
          "2532:     proto_tree_add_item(subtree, hf_kafka_partition_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2533:     offset += 4;",
          "2536:     offset = dissect_kafka_error_ret(tvb, pinfo, subtree, offset, &error);",
          "2539:     proto_item_append_text(subti, \" (Partition-ID=%d, Error=%s)\",",
          "2540:                            partition, kafka_error_to_str(error));",
          "2546: dissect_kafka_offset_commit_response_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "2547:                                               int offset, kafka_api_version_t api_version)",
          "2551:     int topic_start, topic_len;",
          "2553:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_response_topic, &subti, \"Response\");",
          "2556:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset,",
          "2557:                                   &topic_start, &topic_len);",
          "2561:                                  &dissect_kafka_offset_commit_response_partition_response);",
          "2564:     proto_item_append_text(subti, \" (Topic=%s)\",",
          "2565:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "2566:                                               topic_start, topic_len, ENC_UTF_8|ENC_NA));",
          "2572: dissect_kafka_offset_commit_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "2573:                                      kafka_api_version_t api_version)",
          "2575:     if (api_version >= 1) {",
          "2576:         proto_tree_add_item(tree, hf_kafka_throttle_time, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2577:         offset += 4;",
          "2578:     }",
          "2581:     offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version,",
          "2582:                                  &dissect_kafka_offset_commit_response_response);",
          "2590: dissect_kafka_group_coordinator_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "2591:                                         kafka_api_version_t api_version _U_)",
          "2593:     int group_start, group_len;",
          "2596:     offset = dissect_kafka_string(tree, hf_kafka_consumer_group, tvb, pinfo, offset,",
          "2597:                                   &group_start, &group_len);",
          "2599:     col_append_fstr(pinfo->cinfo, COL_INFO,",
          "2600:                     \" (Group=%s)\",",
          "2601:                     tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "2602:                                        group_start, group_len, ENC_UTF_8|ENC_NA));",
          "2608: dissect_kafka_group_coordinator_response_coordinator(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "2609:                                                      int offset, kafka_api_version_t api_version _U_)",
          "2611:     proto_item *subti;",
          "2612:     proto_tree *subtree;",
          "2613:     gint32 node_id;",
          "2614:     int host_start, host_len;",
          "2615:     gint32 port;",
          "2617:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_broker, &subti, \"Coordinator\");",
          "2620:     node_id = (gint32) tvb_get_ntohl(tvb, offset);",
          "2621:     proto_tree_add_item(subtree, hf_kafka_broker_nodeid, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2622:     offset += 4;",
          "2625:     offset = dissect_kafka_string(subtree, hf_kafka_broker_host, tvb, pinfo, offset,",
          "2626:                                   &host_start, &host_len);",
          "2629:     port = (gint32) tvb_get_ntohl(tvb, offset);",
          "2630:     proto_tree_add_item(subtree, hf_kafka_broker_port, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2631:     offset += 4;",
          "2633:     proto_item_set_end(subti, tvb, offset);",
          "2634:     proto_item_append_text(subti, \" (node %u: %s:%u)\",",
          "2635:                            node_id,",
          "2636:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "2637:                                               host_start, host_len, ENC_UTF_8|ENC_NA),",
          "2638:                            port);",
          "2644: dissect_kafka_group_coordinator_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "2645:                                          kafka_api_version_t api_version)",
          "2651:     offset = dissect_kafka_group_coordinator_response_coordinator(tvb, pinfo, tree, offset, api_version);",
          "2659: dissect_kafka_join_group_request_group_protocols(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "2660:                                                  int offset, kafka_api_version_t api_version _U_)",
          "2664:     int protocol_start, protocol_len;",
          "2666:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_group_protocol, &subti,",
          "2667:                                      \"Group Protocol\");",
          "2670:     offset = dissect_kafka_string(subtree, hf_kafka_protocol_name, tvb, pinfo, offset,",
          "2671:                                   &protocol_start, &protocol_len);",
          "2674:     offset = dissect_kafka_bytes(subtree, hf_kafka_protocol_metadata, tvb, pinfo, offset, NULL, NULL);",
          "2677:     proto_item_append_text(subti, \" (Group-ID=%s)\",",
          "2678:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "2679:                                               protocol_start, protocol_len, ENC_UTF_8|ENC_NA));",
          "2685: dissect_kafka_join_group_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "2686:                                  kafka_api_version_t api_version)",
          "2690:     int group_start, group_len;",
          "2691:     int member_start, member_len;",
          "2694:     offset = dissect_kafka_string(tree, hf_kafka_consumer_group, tvb, pinfo, offset,",
          "2695:                                   &group_start, &group_len);",
          "2698:     proto_tree_add_item(tree, hf_kafka_session_timeout, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2699:     offset += 4;",
          "2701:     if (api_version > 0) {",
          "2703:         proto_tree_add_item(tree, hf_kafka_rebalance_timeout, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2704:         offset += 4;",
          "2705:     }",
          "2708:     offset = dissect_kafka_string(tree, hf_kafka_member_id, tvb, pinfo, offset,",
          "2709:                                   &member_start, &member_len);",
          "2712:     offset = dissect_kafka_string(tree, hf_kafka_protocol_type, tvb, pinfo, offset, NULL, NULL);",
          "2715:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_group_protocols, &subti,",
          "2716:                                      \"Group Protocols\");",
          "2718:                                  &dissect_kafka_join_group_request_group_protocols);",
          "2721:     col_append_fstr(pinfo->cinfo, COL_INFO,",
          "2722:                     \" (Group=%s, Member=%s)\",",
          "2723:                     tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "2724:                                        group_start, group_len, ENC_UTF_8|ENC_NA),",
          "2725:                     tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "2726:                                        member_start, member_len, ENC_UTF_8|ENC_NA));",
          "2732: dissect_kafka_join_group_response_member(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "2733:                                          int offset, kafka_api_version_t api_version _U_)",
          "2735:     proto_item *subti;",
          "2736:     proto_tree *subtree;",
          "2737:     int member_start, member_len;",
          "2739:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_group_member, &subti, \"Member\");",
          "2742:     offset = dissect_kafka_string(subtree, hf_kafka_member_id, tvb, pinfo, offset,",
          "2743:                                   &member_start, &member_len);",
          "2746:     offset = dissect_kafka_bytes(subtree, hf_kafka_member_metadata, tvb, pinfo, offset, NULL, NULL);",
          "2749:     proto_item_append_text(subti, \" (Member-ID=%s)\",",
          "2750:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "2751:                                               member_start, member_len, ENC_UTF_8|ENC_NA));",
          "2757: dissect_kafka_join_group_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "2758:                                   kafka_api_version_t api_version)",
          "2762:     int member_start, member_len;",
          "2768:     proto_tree_add_item(tree, hf_kafka_generation_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2769:     offset += 4;",
          "2772:     offset = dissect_kafka_string(tree, hf_kafka_protocol_name, tvb, pinfo, offset, NULL, NULL);",
          "2775:     offset = dissect_kafka_string(tree, hf_kafka_group_leader_id, tvb, pinfo, offset, NULL, NULL);",
          "2778:     offset = dissect_kafka_string(tree, hf_kafka_member_id, tvb, pinfo, offset,",
          "2779:                                   &member_start, &member_len);",
          "2782:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_group_members, &subti, \"Members\");",
          "2784:                                  &dissect_kafka_join_group_response_member);",
          "2787:     col_append_fstr(pinfo->cinfo, COL_INFO,",
          "2788:                     \" (Member=%s)\",",
          "2789:                     tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "2790:                                        member_start, member_len, ENC_UTF_8|ENC_NA));",
          "2798: dissect_kafka_heartbeat_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "2799:                                 kafka_api_version_t api_version _U_)",
          "2801:     int group_start, group_len;",
          "2802:     int member_start, member_len;",
          "2805:     offset = dissect_kafka_string(tree, hf_kafka_consumer_group, tvb, pinfo, offset,",
          "2806:                                   &group_start, &group_len);",
          "2809:     proto_tree_add_item(tree, hf_kafka_generation_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2810:     offset += 4;",
          "2813:     offset = dissect_kafka_string(tree, hf_kafka_member_id, tvb, pinfo, offset,",
          "2814:                                   &member_start, &member_len);",
          "2816:     col_append_fstr(pinfo->cinfo, COL_INFO,",
          "2817:                     \" (Group=%s, Member=%s)\",",
          "2818:                     tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "2819:                                        group_start, group_len, ENC_UTF_8|ENC_NA),",
          "2820:                     tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "2821:                                        member_start, member_len, ENC_UTF_8|ENC_NA));",
          "2827: dissect_kafka_heartbeat_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "2828:                                  kafka_api_version_t api_version _U_)",
          "2830:     if (api_version >= 1) {",
          "2831:         proto_tree_add_item(tree, hf_kafka_throttle_time, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2832:         offset += 4;",
          "2833:     }",
          "2836:     offset = dissect_kafka_error(tvb, pinfo, tree, offset);",
          "2844: dissect_kafka_leave_group_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "2845:                                   kafka_api_version_t api_version _U_)",
          "2847:     int group_start, group_len;",
          "2848:     int member_start, member_len;",
          "2851:     offset = dissect_kafka_string(tree, hf_kafka_consumer_group, tvb, pinfo, offset,",
          "2852:                                   &group_start, &group_len);",
          "2855:     offset = dissect_kafka_string(tree, hf_kafka_member_id, tvb, pinfo, offset,",
          "2856:                                   &member_start, &member_len);",
          "2858:     col_append_fstr(pinfo->cinfo, COL_INFO,",
          "2859:                     \" (Group=%s, Member=%s)\",",
          "2860:                     tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "2861:                                        group_start, group_len, ENC_UTF_8|ENC_NA),",
          "2862:                     tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "2863:                                        member_start, member_len, ENC_UTF_8|ENC_NA));",
          "2869: dissect_kafka_leave_group_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "2870:                                    kafka_api_version_t api_version _U_)",
          "2873:     offset = dissect_kafka_error(tvb, pinfo, tree, offset);",
          "2881: dissect_kafka_sync_group_request_group_assignment(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "2882:                                                   int offset, kafka_api_version_t api_version _U_)",
          "2884:     proto_item *subti;",
          "2885:     proto_tree *subtree;",
          "2886:     int member_start, member_len;",
          "2888:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_group_assignment, &subti,",
          "2889:                                      \"Group Assignment\");",
          "2892:     offset = dissect_kafka_string(subtree, hf_kafka_member_id, tvb, pinfo, offset,",
          "2893:                                   &member_start, &member_len);",
          "2896:     offset = dissect_kafka_bytes(subtree, hf_kafka_member_assignment, tvb, pinfo, offset, NULL, NULL);",
          "2899:     proto_item_append_text(subti, \" (Member=%s)\",",
          "2900:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "2901:                                               member_start, member_len, ENC_UTF_8|ENC_NA));",
          "2907: dissect_kafka_sync_group_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "2908:                                  kafka_api_version_t api_version)",
          "2912:     int group_start, group_len;",
          "2913:     int member_start, member_len;",
          "2916:     offset = dissect_kafka_string(tree, hf_kafka_consumer_group, tvb, pinfo, offset,",
          "2917:                                   &group_start, &group_len);",
          "2920:     proto_tree_add_item(tree, hf_kafka_generation_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2921:     offset += 4;",
          "2924:     offset = dissect_kafka_string(tree, hf_kafka_member_id, tvb, pinfo, offset,",
          "2925:                                   &member_start, &member_len);",
          "2928:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_group_assignments, &subti,",
          "2929:                                      \"Group Assignments\");",
          "2931:                                  &dissect_kafka_sync_group_request_group_assignment);",
          "2934:     col_append_fstr(pinfo->cinfo, COL_INFO,",
          "2935:                     \" (Group=%s, Member=%s)\",",
          "2936:                     tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "2937:                                        group_start, group_len, ENC_UTF_8|ENC_NA),",
          "2938:                     tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "2939:                                        member_start, member_len, ENC_UTF_8|ENC_NA));",
          "2945: dissect_kafka_sync_group_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "2946:                                   kafka_api_version_t api_version _U_)",
          "2949:     offset = dissect_kafka_error(tvb, pinfo, tree, offset);",
          "2952:     offset = dissect_kafka_bytes(tree, hf_kafka_member_assignment, tvb, pinfo, offset, NULL, NULL);",
          "2960: dissect_kafka_describe_groups_request_group_id(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "2961:                                               int offset, kafka_api_version_t api_version _U_)",
          "2964:     offset = dissect_kafka_string(tree, hf_kafka_consumer_group, tvb, pinfo, offset, NULL, NULL);",
          "2970: dissect_kafka_describe_groups_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "2971:                                       kafka_api_version_t api_version)",
          "2974:     offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version,",
          "2975:                                  &dissect_kafka_describe_groups_request_group_id);",
          "2981: dissect_kafka_describe_groups_response_member(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "2982:                                               kafka_api_version_t api_version _U_)",
          "2986:     int member_start, member_len;",
          "2988:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_group_member, &subti, \"Member\");",
          "2991:     offset = dissect_kafka_string(subtree, hf_kafka_member_id, tvb, pinfo, offset,",
          "2992:                                   &member_start, &member_len);",
          "2995:     offset = dissect_kafka_string(subtree, hf_kafka_client_id, tvb, pinfo, offset, NULL, NULL);",
          "2998:     offset = dissect_kafka_string(subtree, hf_kafka_client_host, tvb, pinfo, offset, NULL, NULL);",
          "3001:     offset = dissect_kafka_bytes(subtree, hf_kafka_member_metadata, tvb, pinfo, offset, NULL, NULL);",
          "3004:     offset = dissect_kafka_bytes(subtree, hf_kafka_member_assignment, tvb, pinfo, offset, NULL, NULL);",
          "3007:     proto_item_append_text(subti, \" (Member-ID=%s)\",",
          "3008:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "3009:                                               member_start, member_len, ENC_UTF_8|ENC_NA));",
          "3014: dissect_kafka_describe_groups_response_group(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "3015:                                              kafka_api_version_t api_version)",
          "3019:     int group_start, group_len;",
          "3021:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_group, &subti, \"Group\");",
          "3024:     offset = dissect_kafka_error(tvb, pinfo, subtree, offset);",
          "3027:     offset = dissect_kafka_string(subtree, hf_kafka_consumer_group, tvb, pinfo, offset,",
          "3028:                                   &group_start, &group_len);",
          "3031:     offset = dissect_kafka_string(subtree, hf_kafka_group_state, tvb, pinfo, offset, NULL, NULL);",
          "3034:     offset = dissect_kafka_string(subtree, hf_kafka_protocol_type, tvb, pinfo, offset, NULL, NULL);",
          "3037:     offset = dissect_kafka_string(subtree, hf_kafka_protocol_name, tvb, pinfo, offset, NULL, NULL);",
          "3040:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1, ett_kafka_group_members,",
          "3041:                                         &subsubti, \"Members\");",
          "3043:                                  &dissect_kafka_describe_groups_response_member);",
          "3044:     proto_item_set_end(subsubti, tvb, offset);",
          "3047:     proto_item_append_text(subti, \" (Group-ID=%s)\",",
          "3048:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "3049:                                               group_start, group_len, ENC_UTF_8|ENC_NA));",
          "3055: dissect_kafka_describe_groups_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "3056:                                        kafka_api_version_t api_version)",
          "3059:     offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version,",
          "3060:                                  &dissect_kafka_describe_groups_response_group);",
          "3062:     return offset;",
          "3063: }",
          "3067: static int",
          "3068: dissect_kafka_list_groups_request(tvbuff_t *tvb _U_, packet_info *pinfo _U_, proto_tree *tree _U_, int offset,",
          "3069:                                   kafka_api_version_t api_version _U_)",
          "3070: {",
          "3075: dissect_kafka_list_groups_response_group(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "3076:                                          kafka_api_version_t api_version _U_)",
          "3080:     int group_start, group_len;",
          "3081:     int protocol_type_start, protocol_type_len;",
          "3083:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_group, &subti, \"Group\");",
          "3086:     offset = dissect_kafka_string(subtree, hf_kafka_consumer_group, tvb, pinfo, offset,",
          "3087:                                   &group_start, &group_len);",
          "3090:     offset = dissect_kafka_string(subtree, hf_kafka_protocol_type, tvb, pinfo, offset,",
          "3091:                                   &protocol_type_start, &protocol_type_len);",
          "3094:     proto_item_append_text(subti, \" (Group-ID=%s, Protocol-Type=%s)\",",
          "3095:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "3096:                                               group_start, group_len, ENC_UTF_8|ENC_NA),",
          "3097:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "3098:                                               protocol_type_start, protocol_type_len, ENC_UTF_8|ENC_NA));",
          "3104: dissect_kafka_list_groups_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "3105:                                    kafka_api_version_t api_version)",
          "3108:     offset = dissect_kafka_error(tvb, pinfo, tree, offset);",
          "3111:     offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version,",
          "3112:                                  &dissect_kafka_list_groups_response_group);",
          "3120: dissect_kafka_sasl_handshake_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "3121:                                      kafka_api_version_t api_version _U_)",
          "3124:     offset = dissect_kafka_string(tree, hf_kafka_sasl_mechanism, tvb, pinfo, offset, NULL, NULL);",
          "3130: dissect_kafka_sasl_handshake_response_enabled_mechanism(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "3131:                                                         int offset, kafka_api_version_t api_version _U_)",
          "3134:     offset = dissect_kafka_string(tree, hf_kafka_sasl_mechanism, tvb, pinfo, offset, NULL, NULL);",
          "3136:     return offset;",
          "3137: }",
          "3139: static int",
          "3140: dissect_kafka_sasl_handshake_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "3141:                                       kafka_api_version_t api_version)",
          "3142: {",
          "3143:     proto_item *subti;",
          "3144:     proto_tree *subtree;",
          "3147:     offset = dissect_kafka_error(tvb, pinfo, tree, offset);",
          "3150:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "3151:                                      ett_kafka_sasl_enabled_mechanisms,",
          "3152:                                      &subti, \"Enabled SASL Mechanisms\");",
          "3153:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "3154:                                  &dissect_kafka_sasl_handshake_response_enabled_mechanism);",
          "3163: dissect_kafka_create_topics_request_replica(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "3164:                                             int offset, kafka_api_version_t api_version _U_)",
          "3167:     proto_tree_add_item(tree, hf_kafka_replica, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3168:     offset += 4;",
          "3174: dissect_kafka_create_topics_request_replica_assignment(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "3175:                                                        int offset, kafka_api_version_t api_version _U_)",
          "3179:     kafka_partition_t partition;",
          "3181:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "3182:                                      ett_kafka_replica_assignment,",
          "3183:                                      &subti, \"Replica Assignment\");",
          "3186:     partition = (gint32) tvb_get_ntohl(tvb, offset);",
          "3187:     proto_tree_add_item(subtree, hf_kafka_partition_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3192:                                  &dissect_kafka_create_topics_request_replica);",
          "3195:     proto_item_append_text(subti, \" (Partition-ID=%d)\",",
          "3196:                            partition);",
          "3202: dissect_kafka_create_topics_request_config(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "3203:                                            int offset, kafka_api_version_t api_version _U_)",
          "3207:     int key_start, key_len;",
          "3208:     int val_start, val_len;",
          "3210:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "3211:                                      ett_kafka_config,",
          "3212:                                      &subti, \"Config\");",
          "3215:     offset = dissect_kafka_string(subtree, hf_kafka_config_key, tvb, pinfo, offset, &key_start, &key_len);",
          "3218:     offset = dissect_kafka_string(subtree, hf_kafka_config_value, tvb, pinfo, offset, &val_start, &val_len);",
          "3221:     proto_item_append_text(subti, \" (Key=%s, Value=%s)\",",
          "3222:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "3223:                                               key_start, key_len, ENC_UTF_8|ENC_NA),",
          "3224:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "3225:                                               val_start, val_len, ENC_UTF_8|ENC_NA));",
          "3231: dissect_kafka_create_topics_request_create_topic_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "3232:                                                          int offset, kafka_api_version_t api_version)",
          "3236:     int topic_start, topic_len;",
          "3238:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "3239:                                      ett_kafka_topic,",
          "3240:                                      &subti, \"Create Topic Request\");",
          "3243:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, &topic_start, &topic_len);",
          "3246:     proto_tree_add_item(subtree, hf_kafka_num_partitions, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3247:     offset += 4;",
          "3250:     proto_tree_add_item(subtree, hf_kafka_replication_factor, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "3251:     offset += 2;",
          "3254:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1,",
          "3255:                                         ett_kafka_replica_assignment,",
          "3256:                                         &subsubti, \"Replica Assignments\");",
          "3257:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "3258:                                  &dissect_kafka_create_topics_request_replica_assignment);",
          "3259:     proto_item_set_end(subsubti, tvb, offset);",
          "3262:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1,",
          "3263:                                         ett_kafka_config,",
          "3264:                                         &subsubti, \"Configs\");",
          "3266:                                  &dissect_kafka_create_topics_request_config);",
          "3267:     proto_item_set_end(subsubti, tvb, offset);",
          "3270:     proto_item_append_text(subti, \" (Topic=%s)\",",
          "3271:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "3272:                                               topic_start, topic_len, ENC_UTF_8|ENC_NA));",
          "3278: dissect_kafka_create_topics_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "3279:                                     kafka_api_version_t api_version)",
          "3287:                                      &subti, \"Create Topic Requests\");",
          "3289:                                  &dissect_kafka_create_topics_request_create_topic_request);",
          "3293:     proto_tree_add_item(tree, hf_kafka_timeout, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3300: dissect_kafka_create_topics_response_topic_error_code(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "3301:                                                       int offset, kafka_api_version_t api_version _U_)",
          "3303:     proto_item *subti;",
          "3304:     proto_tree *subtree;",
          "3305:     int topic_start, topic_len;",
          "3306:     kafka_error_t error;",
          "3308:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "3309:                                      ett_kafka_topic,",
          "3310:                                      &subti, \"Topic Error Code\");",
          "3313:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, &topic_start, &topic_len);",
          "3316:     offset = dissect_kafka_error_ret(tvb, pinfo, subtree, offset, &error);",
          "3319:     proto_item_append_text(subti, \" (Topic=%s, Error=%s)\",",
          "3320:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "3321:                                               topic_start, topic_len, ENC_UTF_8|ENC_NA),",
          "3322:                            kafka_error_to_str(error));",
          "3328: dissect_kafka_create_topics_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "3329:                                      kafka_api_version_t api_version)",
          "3337:                                      &subti, \"Topic Error Codes\");",
          "3339:                                  &dissect_kafka_create_topics_response_topic_error_code);",
          "3348: dissect_kafka_delete_topics_request_topic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "3349:                                           int offset, kafka_api_version_t api_version _U_)",
          "3352:     offset = dissect_kafka_string(tree, hf_kafka_topic_name, tvb, pinfo, offset, NULL, NULL);",
          "3358: dissect_kafka_delete_topics_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "3359:                                     kafka_api_version_t api_version)",
          "3361:     proto_item *subti;",
          "3362:     proto_tree *subtree;",
          "3365:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "3366:                                      ett_kafka_topics,",
          "3367:                                      &subti, \"Topics\");",
          "3368:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "3369:                                  &dissect_kafka_delete_topics_request_topic);",
          "3370:     proto_item_set_end(subti, tvb, offset);",
          "3373:     proto_tree_add_item(tree, hf_kafka_timeout, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3374:     offset += 4;",
          "3380: dissect_kafka_delete_topics_response_topic_error_code(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "3381:                                                       int offset, kafka_api_version_t api_version _U_)",
          "3383:     proto_item *subti;",
          "3384:     proto_tree *subtree;",
          "3385:     int topic_start, topic_len;",
          "3386:     kafka_error_t error;",
          "3388:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "3389:                                      ett_kafka_topic,",
          "3390:                                      &subti, \"Topic Error Code\");",
          "3393:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, &topic_start, &topic_len);",
          "3396:     offset = dissect_kafka_error_ret(tvb, pinfo, subtree, offset, &error);",
          "3399:     proto_item_append_text(subti, \" (Topic=%s, Error=%s)\",",
          "3400:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "3401:                                               topic_start, topic_len, ENC_UTF_8|ENC_NA),",
          "3402:                            kafka_error_to_str(error));",
          "3408: dissect_kafka_delete_topics_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "3409:                                      kafka_api_version_t api_version)",
          "3417:                                      &subti, \"Topic Error Codes\");",
          "3419:                                  &dissect_kafka_delete_topics_response_topic_error_code);",
          "",
          "[Added Lines]",
          "1026: static gint32",
          "1027: tvb_read_kafka_varint32(tvbuff_t *tvb, int offset, gint32 *p_val, int *p_len)",
          "1029:     gint32 v = 0;",
          "1030:     guint8 p = 0;",
          "1031:     int    i = 0;",
          "1033:     do {",
          "1034:         p = tvb_get_guint8(tvb, offset+i);",
          "1035:         v += (p & 0x7f) << (i*7);",
          "1036:         i += 1;",
          "1037:     } while ((p&0x80)!=0 && i<5);",
          "1043:     DISSECTOR_ASSERT((p&0x80) == 0);",
          "1044:     DISSECTOR_ASSERT(i < 5 || (p&0x70) == 0);",
          "1046:     if (p_val != NULL) {",
          "1049:     if (p_len != NULL) {",
          "1051:     }",
          "1053:     return offset+i;",
          "1070: static gint64",
          "1071: tvb_read_kafka_varint64(tvbuff_t *tvb, int offset, gint64 *p_val, int *p_len)",
          "1073:     gint64 v = 0;",
          "1074:     guint8 p = 0;",
          "1075:     int    i = 0;",
          "1077:     do {",
          "1078:         p = tvb_get_guint8(tvb, offset+i);",
          "1079:         v += (p & 0x7f) << (i*7);",
          "1080:         i += 1;",
          "1081:     } while ((p&0x80)!=0 && i<10);",
          "1087:     DISSECTOR_ASSERT((p&0x80) == 0);",
          "1088:     DISSECTOR_ASSERT(i < 10 || (p&0x7e) == 0);",
          "1090:     if (p_val != NULL) {",
          "1092:     }",
          "1093:     if (p_len != NULL) {",
          "1095:     }",
          "1097:     return offset+i;",
          "1098: }",
          "1100: static int",
          "1101: dissect_kafka_varint(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, int hf_item, int offset)",
          "1102: {",
          "1103:     gint64 val;",
          "1104:     int    len;",
          "1105:     tvb_read_kafka_varint64(tvb, offset, &val, &len);",
          "1106:     proto_tree_add_int64(tree, hf_item, tvb, offset, len, val);",
          "1107:     return offset+len;",
          "1108: }",
          "1110: static int",
          "1111: dissect_kafka_timestamp_delta(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, int hf_item, int offset, guint64 first_timestamp)",
          "1112: {",
          "1113:     nstime_t nstime;",
          "1114:     guint64  milliseconds;",
          "1115:     guint64  val;",
          "1116:     int      len;",
          "1118:     tvb_read_kafka_varint64(tvb, offset, &val, &len);",
          "1120:     milliseconds = first_timestamp + val;",
          "1121:     nstime.secs  = (time_t) (milliseconds / 1000);",
          "1122:     nstime.nsecs = (int) ((milliseconds % 1000) * 1000000);",
          "1124:     proto_tree_add_time(tree, hf_item, tvb, offset, len, &nstime);",
          "1126:     return offset+len;",
          "1127: }",
          "1129: static int",
          "1130: dissect_kafka_offset_delta(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, int hf_item, int offset, guint64 base_offset)",
          "1131: {",
          "1132:     gint64 val;",
          "1133:     int    len;",
          "1135:     tvb_read_kafka_varint64(tvb, offset, &val, &len);",
          "1137:     proto_tree_add_int64(tree, hf_item, tvb, offset, len, base_offset+val);",
          "1139:     return offset+len;",
          "1140: }",
          "1160: static int",
          "1161: dissect_kafka_string_new(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, int hf_item, int offset, int *p_string_offset, int *p_string_length)",
          "1162: {",
          "1163:     gint val;",
          "1164:     gint len;",
          "1166:     tvb_read_kafka_varint32(tvb, offset, &val, &len);",
          "1168:     DISSECTOR_ASSERT(val >= 0);",
          "1170:     proto_tree_add_item(tree, hf_item, tvb, offset+len, val, ENC_UTF_8|ENC_NA);",
          "1172:     if (p_string_offset != NULL) {",
          "1174:     }",
          "1175:     if (p_string_length != NULL) {",
          "1177:     }",
          "1179:     return offset+len+val;",
          "1201: dissect_kafka_bytes_new(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, int hf_item, int offset, int *p_bytes_offset, int *p_bytes_length)",
          "1203:     gint val;",
          "1204:     gint len;",
          "1206:     tvb_read_kafka_varint32(tvb, offset, &val, &len);",
          "1208:     DISSECTOR_ASSERT(val >= -1);",
          "1210:     if (val > 0) {",
          "1212:         proto_tree_add_item(tree, hf_item, tvb, offset+len, val, ENC_NA);",
          "1213:     } else if (val == 0) {",
          "1215:         proto_tree_add_bytes_format_value(tree, hf_item, tvb, offset+len, 0, NULL, \"<EMPTY>\");",
          "1216:     } else {",
          "1218:         proto_tree_add_bytes_format_value(tree, hf_item, tvb, offset+len, 0, NULL, \"<NULL>\");",
          "1219:         val = 0;",
          "1221:     if (p_bytes_offset != NULL) {",
          "1224:     if (p_bytes_length != NULL) {",
          "1227:     return offset+len+val;",
          "1228: }",
          "1231: static void",
          "1232: show_compression_reduction(tvbuff_t *tvb, proto_tree *tree, guint compressed_size, guint uncompressed_size)",
          "1233: {",
          "1234:     proto_item *ti;",
          "1236:     if (uncompressed_size != 0) {",
          "1237:         ti = proto_tree_add_float(tree, hf_kafka_message_compression_reduction, tvb, 0, 0,",
          "1238:                                   (float)compressed_size / (float)uncompressed_size);",
          "1239:         proto_item_set_generated(ti);",
          "1241: }",
          "1243: static int",
          "1244: dissect_kafka_record_headers_header(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, int offset)",
          "1245: {",
          "1246:     proto_item *header_ti;",
          "1247:     proto_tree *subtree;",
          "1249:     int key_off, key_len;",
          "1251:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_record_headers_header, &header_ti, \"Header\");",
          "1253:     offset = dissect_kafka_string_new(tvb, pinfo, subtree, hf_kafka_record_header_key, offset, &key_off, &key_len);",
          "1254:     offset = dissect_kafka_bytes_new(tvb, pinfo, subtree, hf_kafka_record_header_value, offset, NULL, NULL);",
          "1256:     proto_item_append_text(header_ti, \" (Key: %s)\",",
          "1257:                            tvb_get_string_enc(wmem_packet_scope(), tvb, key_off, key_len, ENC_UTF_8));",
          "1258:     proto_item_set_end(header_ti, tvb, offset);",
          "1264: dissect_kafka_record_headers(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, int offset)",
          "1266:     proto_item *record_headers_ti;",
          "1267:     proto_tree *subtree;",
          "1269:     gint32 count;",
          "1270:     int i;",
          "1272:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_record_headers, &record_headers_ti, \"Headers\");",
          "1274:     tvb_read_kafka_varint32(tvb, offset, &count, NULL);",
          "1275:     offset = dissect_kafka_varint(tvb, pinfo, subtree, hf_kafka_record_headers_count, offset);",
          "1278:     DISSECTOR_ASSERT(count >= -1);",
          "1279:     for (i=0;i<count;i++) {",
          "1280:         offset = dissect_kafka_record_headers_header(tvb, pinfo, subtree, offset);",
          "1281:     }",
          "1283:     proto_item_set_end(record_headers_ti, tvb, offset);",
          "1285:     return offset;",
          "1286: }",
          "1288: static int",
          "1289: dissect_kafka_record(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, int start_offset, guint64 base_offset, guint64 first_timestamp)",
          "1290: {",
          "1291:     proto_item *record_ti;",
          "1292:     proto_tree *subtree;",
          "1294:     gint32 val;",
          "1295:     int len;",
          "1297:     int offset, end_offset;",
          "1299:     offset = start_offset;",
          "1301:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_record, &record_ti, \"Record\");",
          "1303:     tvb_read_kafka_varint32(tvb, offset, &val, &len);",
          "1304:     DISSECTOR_ASSERT(val >= 0);",
          "1305:     end_offset = offset + len + val;",
          "1307:     offset = dissect_kafka_varint(tvb, pinfo, subtree, hf_kafka_record_length, offset);",
          "1309:     proto_tree_add_item(subtree, hf_kafka_record_attributes, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "1310:     offset += 1;",
          "1312:     offset = dissect_kafka_timestamp_delta(tvb, pinfo, subtree, hf_kafka_message_timestamp, offset, first_timestamp);",
          "1313:     offset = dissect_kafka_offset_delta(tvb, pinfo, subtree, hf_kafka_offset, offset, base_offset);",
          "1315:     offset = dissect_kafka_bytes_new(tvb, pinfo, subtree, hf_kafka_message_key, offset, NULL, NULL);",
          "1316:     offset = dissect_kafka_bytes_new(tvb, pinfo, subtree, hf_kafka_message_value, offset, NULL, NULL);",
          "1318:     offset = dissect_kafka_record_headers(tvb, pinfo, subtree, offset);",
          "1320:     DISSECTOR_ASSERT(offset == end_offset);",
          "1322:     proto_item_set_end(record_ti, tvb, offset);",
          "1324:     return end_offset;",
          "1325: }",
          "1327: static int",
          "1328: decompress_none(tvbuff_t *tvb, packet_info *pinfo _U_, int offset, int length _U_, tvbuff_t **decompressed_tvb, int *decompressed_offset)",
          "1329: {",
          "1332:     return 1;",
          "1333: }",
          "1335: static int",
          "1336: decompress_gzip(tvbuff_t *tvb, packet_info *pinfo, int offset, int length, tvbuff_t **decompressed_tvb, int *decompressed_offset)",
          "1337: {",
          "1340:     if (*decompressed_tvb) {",
          "1341:         return 1;",
          "1342:     } else {",
          "1343:         col_append_str(pinfo->cinfo, COL_INFO, \" [gzip decompression failed] \");",
          "1344:         return 0;",
          "1345:     }",
          "1346: }",
          "1348: #ifdef HAVE_LZ4FRAME_H",
          "1349: static int",
          "1350: decompress_lz4(tvbuff_t *tvb, packet_info *pinfo, int offset, int length, tvbuff_t **decompressed_tvb, int *decompressed_offset)",
          "1351: {",
          "1352:     LZ4F_decompressionContext_t lz4_ctxt = NULL;",
          "1353:     LZ4F_frameInfo_t lz4_info;",
          "1354:     LZ4F_errorCode_t rc = 0;",
          "1355:     size_t src_offset = 0, src_size = 0, dst_size = 0;",
          "1356:     guchar *decompressed_buffer = NULL;",
          "1357:     tvbuff_t *composite_tvb = tvb_new_composite();",
          "1359:     int ret = 0;",
          "1362:     guint8 *data = (guint8*)tvb_memdup(wmem_packet_scope(), tvb, offset, length);",
          "1364:     if (length > 7) {",
          "1365:         int hdr_end = 6;",
          "1366:         if (data[4] & 0x08) {",
          "1367:             hdr_end += 8;",
          "1368:         }",
          "1369:         if (hdr_end < length) {",
          "1370:             data[hdr_end] = (XXH32(&data[4], hdr_end - 4, 0) >> 8) & 0xff;",
          "1371:         }",
          "1372:     }",
          "1375:     rc = LZ4F_createDecompressionContext(&lz4_ctxt, LZ4F_VERSION);",
          "1376:     if (LZ4F_isError(rc)) {",
          "1377:         goto end;",
          "1378:     }",
          "1380:     src_offset = length;",
          "1381:     rc = LZ4F_getFrameInfo(lz4_ctxt, &lz4_info, data, &src_offset);",
          "1382:     if (LZ4F_isError(rc)) {",
          "1383:         goto end;",
          "1384:     }",
          "1386:     switch (lz4_info.blockSizeID) {",
          "1387:         case LZ4F_max64KB:",
          "1388:             dst_size = 1 << 16;",
          "1389:             break;",
          "1390:         case LZ4F_max256KB:",
          "1391:             dst_size = 1 << 18;",
          "1392:             break;",
          "1393:         case LZ4F_max1MB:",
          "1394:             dst_size = 1 << 20;",
          "1395:             break;",
          "1396:         case LZ4F_max4MB:",
          "1397:             dst_size = 1 << 22;",
          "1398:             break;",
          "1399:         default:",
          "1400:             goto end;",
          "1401:     }",
          "1403:     if (lz4_info.contentSize && lz4_info.contentSize < dst_size) {",
          "1404:         dst_size = (size_t)lz4_info.contentSize;",
          "1405:     }",
          "1407:     do {",
          "1408:         src_size = length - src_offset; // set the number of available octets",
          "1409:         decompressed_buffer = (guchar*)wmem_alloc(pinfo->pool, dst_size);",
          "1410:         rc = LZ4F_decompress(lz4_ctxt, decompressed_buffer, &dst_size,",
          "1411:                               &data[src_offset], &src_size, NULL);",
          "1412:         if (LZ4F_isError(rc)) {",
          "1413:             goto end;",
          "1414:         }",
          "1415:         tvb_composite_append(composite_tvb,",
          "1416:                              tvb_new_child_real_data(tvb, (guint8*)decompressed_buffer, (guint)dst_size, (gint)dst_size));",
          "1417:         src_offset += src_size; // bump up the offset for the next iteration",
          "1418:     } while (rc > 0);",
          "1420:     tvb_composite_finalize(composite_tvb);",
          "1423:     composite_tvb = NULL;",
          "1424:     ret = 1;",
          "1425: end:",
          "1426:     LZ4F_freeDecompressionContext(lz4_ctxt);",
          "1427:     if (composite_tvb != NULL) {",
          "1428:         tvb_free_chain(composite_tvb);",
          "1429:     }",
          "1430:     if (ret == 0) {",
          "1431:         col_append_str(pinfo->cinfo, COL_INFO, \" [lz4 decompression failed]\");",
          "1432:     }",
          "1433:     return ret;",
          "1434: }",
          "1435: #else",
          "1436: static int",
          "1437: decompress_lz4(tvbuff_t *tvb _U_, packet_info *pinfo, int offset _U_, int length _U_, tvbuff_t **decompressed_tvb _U_, int *decompressed_offset _U_)",
          "1438: {",
          "1439:     col_append_str(pinfo->cinfo, COL_INFO, \" [lz4 decompression unsupported]\");",
          "1440:     return 0;",
          "1441: }",
          "1444: #ifdef HAVE_SNAPPY",
          "1445: static int",
          "1446: decompress_snappy(tvbuff_t *tvb, packet_info *pinfo, int offset, int length, tvbuff_t **decompressed_tvb, int *decompressed_offset)",
          "1447: {",
          "1448:     guint8 *data = (guint8*)tvb_memdup(wmem_packet_scope(), tvb, offset, length);",
          "1449:     size_t uncompressed_size;",
          "1450:     snappy_status rc = SNAPPY_OK;",
          "1451:     tvbuff_t *composite_tvb = NULL;",
          "1452:     int ret = 0;",
          "1454:     if (tvb_memeql(tvb, offset, kafka_xerial_header, sizeof(kafka_xerial_header)) == 0) {",
          "1457:         int chunk_size, pos = 16;",
          "1459:         composite_tvb = tvb_new_composite();",
          "1461:         while (pos < length) {",
          "1462:             chunk_size = tvb_get_ntohl(tvb, offset+pos);",
          "1463:             if (pos+chunk_size > length) {",
          "1465:                 goto end;",
          "1466:             }",
          "1467:             pos += 4;",
          "1468:             rc = snappy_uncompressed_length(&data[pos], chunk_size, &uncompressed_size);",
          "1469:             if (rc != SNAPPY_OK) {",
          "1470:                 goto end;",
          "1471:             }",
          "1472:             guint8 *decompressed_buffer = (guint8*)wmem_alloc(pinfo->pool, uncompressed_size);",
          "1473:             rc = snappy_uncompress(&data[pos], chunk_size, decompressed_buffer, &uncompressed_size);",
          "1474:             if (rc != SNAPPY_OK) {",
          "1475:                 goto end;",
          "1476:             }",
          "1477:             tvb_composite_append(composite_tvb,",
          "1478:                       tvb_new_child_real_data(tvb, decompressed_buffer, (guint)uncompressed_size, (gint)uncompressed_size));",
          "1479:             pos += chunk_size;",
          "1480:         }",
          "1482:         tvb_composite_finalize(composite_tvb);",
          "1485:         composite_tvb = NULL;",
          "1487:     } else {",
          "1490:         rc = snappy_uncompressed_length(data, length, &uncompressed_size);",
          "1491:         if (rc != SNAPPY_OK) {",
          "1492:             goto end;",
          "1493:         }",
          "1495:         guint8 *decompressed_buffer = (guint8*)wmem_alloc(pinfo->pool, uncompressed_size);",
          "1497:         rc = snappy_uncompress(data, length, decompressed_buffer, &uncompressed_size);",
          "1498:         if (rc != SNAPPY_OK) {",
          "1499:             goto end;",
          "1500:         }",
          "1505:     }",
          "1506:     ret = 1;",
          "1507: end:",
          "1508:     if (composite_tvb != NULL) {",
          "1509:         tvb_free_chain(composite_tvb);",
          "1510:     }",
          "1511:     if (ret == 0) {",
          "1512:         col_append_str(pinfo->cinfo, COL_INFO, \" [snappy decompression failed]\");",
          "1513:     }",
          "1514:     return ret;",
          "1515: }",
          "1516: #else",
          "1517: static int",
          "1518: decompress_snappy(tvbuff_t *tvb _U_, packet_info *pinfo, int offset _U_, int length _U_, tvbuff_t **decompressed_tvb _U_, int *decompressed_offset _U_)",
          "1519: {",
          "1520:     col_append_str(pinfo->cinfo, COL_INFO, \" [snappy decompression unsupported]\");",
          "1521:     return 0;",
          "1522: }",
          "1525: static int",
          "1526: decompress_zstd(tvbuff_t *tvb _U_, packet_info *pinfo, int offset _U_, int length _U_, tvbuff_t **decompressed_tvb _U_, int *decompressed_offset _U_)",
          "1527: {",
          "1528:     col_append_str(pinfo->cinfo, COL_INFO, \" [zstd compression unsupported]\");",
          "1529:     return 0;",
          "1530: }",
          "1532: static int",
          "1533: decompress(tvbuff_t *tvb, packet_info *pinfo, int offset, int length, int codec, tvbuff_t **decompressed_tvb, int *decompressed_offset)",
          "1534: {",
          "1535:     switch (codec) {",
          "1536:         case KAFKA_MESSAGE_CODEC_SNAPPY:",
          "1537:             return decompress_snappy(tvb, pinfo, offset, length, decompressed_tvb, decompressed_offset);",
          "1538:         case KAFKA_MESSAGE_CODEC_LZ4:",
          "1539:             return decompress_lz4(tvb, pinfo, offset, length, decompressed_tvb, decompressed_offset);",
          "1540:         case KAFKA_MESSAGE_CODEC_ZSTD:",
          "1541:             return decompress_zstd(tvb, pinfo, offset, length, decompressed_tvb, decompressed_offset);",
          "1542:         case KAFKA_MESSAGE_CODEC_GZIP:",
          "1543:             return decompress_gzip(tvb, pinfo, offset, length, decompressed_tvb, decompressed_offset);",
          "1544:         case KAFKA_MESSAGE_CODEC_NONE:",
          "1545:             return decompress_none(tvb, pinfo, offset, length, decompressed_tvb, decompressed_offset);",
          "1546:         default:",
          "1547:             col_append_str(pinfo->cinfo, COL_INFO, \" [unsupported compression type]\");",
          "1548:             return 0;",
          "1549:     }",
          "1550: }",
          "1569: static int",
          "1570: dissect_kafka_message_old(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset)",
          "1571: {",
          "1572:     proto_item  *message_ti;",
          "1573:     proto_tree  *subtree;",
          "1574:     tvbuff_t    *decompressed_tvb;",
          "1575:     int         decompressed_offset;",
          "1576:     int         start_offset = offset;",
          "1577:     gint8       magic_byte;",
          "1578:     guint8      codec;",
          "1579:     guint32     message_size;",
          "1580:     guint32     length;",
          "1582:     message_size = tvb_get_guint32(tvb, start_offset + 8, ENC_BIG_ENDIAN);",
          "1584:     subtree = proto_tree_add_subtree(tree, tvb, start_offset, message_size + 12, ett_kafka_message, &message_ti, \"Message\");",
          "1586:     proto_tree_add_item(subtree, hf_kafka_offset, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "1587:     offset += 8;",
          "1589:     proto_tree_add_item(subtree, hf_kafka_message_size, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1590:     offset += 4;",
          "1592:     proto_tree_add_item(subtree, hf_kafka_message_crc, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1593:     offset += 4;",
          "1595:     magic_byte = tvb_get_guint8(tvb, offset);",
          "1597:     proto_tree_add_item(subtree, hf_kafka_message_magic, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "1598:     offset += 1;",
          "1600:     proto_tree_add_item(subtree, hf_kafka_message_codec, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "1601:     codec = tvb_get_guint8(tvb, offset) & KAFKA_MESSAGE_CODEC_MASK;",
          "1602:     proto_tree_add_item(subtree, hf_kafka_message_timestamp_type, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "1603:     offset += 1;",
          "1605:     if (magic_byte == 1) {",
          "1606:         offset = dissect_kafka_timestamp(tvb, pinfo, subtree, hf_kafka_message_timestamp, offset);",
          "1607:     }",
          "1609:     offset = dissect_kafka_bytes(subtree, hf_kafka_message_key, tvb, pinfo, offset, NULL, NULL);",
          "1616:     if (codec == 0) {",
          "1617:         offset = dissect_kafka_bytes(subtree, hf_kafka_message_value, tvb, pinfo, offset, NULL, &length);",
          "1618:     } else {",
          "1619:         length = tvb_get_ntohl(tvb, offset);",
          "1620:         offset += 4;",
          "1621:         if (decompress(tvb, pinfo, offset, length, codec, &decompressed_tvb, &decompressed_offset)==1) {",
          "1622:             add_new_data_source(pinfo, decompressed_tvb, \"Decompressed content\");",
          "1623:             show_compression_reduction(tvb, subtree, length, tvb_captured_length(decompressed_tvb));",
          "1624:             dissect_kafka_message_set(decompressed_tvb, pinfo, subtree, decompressed_offset, FALSE, codec);",
          "1625:         } else {",
          "1626:             proto_item_append_text(subtree, \" [Cannot decompress records]\");",
          "1627:         }",
          "1628:     }",
          "1630:     proto_item_set_len(message_ti, offset - start_offset);",
          "1632:     return offset;",
          "1633: }",
          "1651: static int",
          "1652: dissect_kafka_message_new(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset)",
          "1653: {",
          "1654:     proto_item *batch_ti;",
          "1655:     proto_tree *subtree;",
          "1656:     int         start_offset = offset;",
          "1657:     gint8       magic_byte;",
          "1658:     guint8      codec;",
          "1659:     guint32     message_size;",
          "1660:     guint32     count, i, length;",
          "1661:     guint64     base_offset, first_timestamp;",
          "1663:     tvbuff_t    *decompressed_tvb;",
          "1664:     int         decompressed_offset;",
          "1666:     message_size = tvb_get_guint32(tvb, start_offset + 8, ENC_BIG_ENDIAN);",
          "1668:     subtree = proto_tree_add_subtree(tree, tvb, start_offset, message_size + 12, ett_kafka_batch, &batch_ti, \"Record Batch\");",
          "1670:     base_offset = tvb_get_ntoh64(tvb, offset);",
          "1671:     proto_tree_add_item(subtree, hf_kafka_offset, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "1672:     offset += 8;",
          "1674:     proto_tree_add_item(subtree, hf_kafka_message_size, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1675:     offset += 4;",
          "1677:     proto_tree_add_item(subtree, hf_kafka_leader_epoch, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1678:     offset += 4;",
          "1680:     magic_byte = tvb_get_guint8(tvb, offset);",
          "1681:     proto_tree_add_item(subtree, hf_kafka_message_magic, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "1682:     offset += 1;",
          "1684:     if (magic_byte != 2) {",
          "1685:         proto_item_append_text(subtree, \"[Unknown message magic]\");",
          "1686:         expert_add_info_format(pinfo, batch_ti, &ei_kafka_unknown_message_magic,",
          "1687:                                \"message magic: %d\", magic_byte);",
          "1688:         return start_offset + 8 /*base offset*/ + 4 /*message size*/ + message_size;",
          "1689:     }",
          "1691:     proto_tree_add_item(subtree, hf_kafka_batch_crc, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1692:     offset += 4;",
          "1694:     proto_tree_add_item(subtree, hf_kafka_batch_codec, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "1695:     codec = tvb_get_ntohs(tvb, offset) & KAFKA_MESSAGE_CODEC_MASK;",
          "1696:     proto_tree_add_item(subtree, hf_kafka_batch_timestamp_type, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "1697:     proto_tree_add_item(subtree, hf_kafka_batch_transactional, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "1698:     proto_tree_add_item(subtree, hf_kafka_batch_control_batch, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "1700:     offset += 2;",
          "1702:     proto_tree_add_item(subtree, hf_kafka_batch_last_offset_delta, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1703:     offset += 4;",
          "1705:     first_timestamp = tvb_get_ntoh64(tvb, offset);",
          "1706:     offset = dissect_kafka_timestamp(tvb, pinfo, subtree, hf_kafka_batch_first_timestamp, offset);",
          "1707:     offset = dissect_kafka_timestamp(tvb, pinfo, subtree, hf_kafka_batch_last_timestamp, offset);",
          "1709:     proto_tree_add_item(subtree, hf_kafka_producer_id, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "1710:     offset += 8;",
          "1711:     proto_tree_add_item(subtree, hf_kafka_producer_epoch, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "1712:     offset += 2;",
          "1713:     proto_tree_add_item(subtree, hf_kafka_batch_base_sequence, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1714:     offset += 4;",
          "1716:     proto_tree_add_item(subtree, hf_kafka_batch_size, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1717:     count = tvb_get_ntohl(tvb, offset);",
          "1718:     offset += 4;",
          "1720:     length = start_offset + 8 /*base offset*/ + 4 /*message size*/ + message_size - offset;",
          "1722:     if (decompress(tvb, pinfo, offset, length, codec, &decompressed_tvb, &decompressed_offset)==1) {",
          "1723:         if (codec != 0) {",
          "1724:             add_new_data_source(pinfo, decompressed_tvb, \"Decompressed Records\");",
          "1725:             show_compression_reduction(tvb, subtree, length, tvb_captured_length(decompressed_tvb));",
          "1726:         }",
          "1727:         for (i=0;i<count;i++) {",
          "1728:             decompressed_offset = dissect_kafka_record(decompressed_tvb, pinfo, subtree, decompressed_offset, base_offset, first_timestamp);",
          "1729:         }",
          "1730:     } else {",
          "1731:         proto_item_append_text(subtree, \" [Cannot decompress records]\");",
          "1732:     }",
          "1734:     return start_offset + 8 /*base offset*/ + 4 /*message size*/ + message_size;",
          "1735: }",
          "1737: static int",
          "1738: dissect_kafka_message(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset)",
          "1739: {",
          "1740:     gint8       magic_byte;",
          "1742:     magic_byte = tvb_get_guint8(tvb, offset+16);",
          "1743:     if (magic_byte < 2) {",
          "1744:         return dissect_kafka_message_old(tvb, pinfo, tree, offset);",
          "1745:     } else {",
          "1746:         return dissect_kafka_message_new(tvb, pinfo, tree, offset);",
          "1747:     }",
          "1748: }",
          "1750: static int",
          "1751: dissect_kafka_message_set(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int start_offset, gboolean has_length_field, guint8 codec)",
          "1752: {",
          "1753:     proto_item *ti;",
          "1754:     proto_tree *subtree;",
          "1755:     gint        len, message_size;",
          "1756:     int         offset = start_offset;",
          "1757:     int         messages = 0;",
          "1759:     if (has_length_field) {",
          "1760:         proto_tree_add_item(tree, hf_kafka_message_set_size, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1761:         len = (gint)tvb_get_ntohl(tvb, offset);",
          "1762:         offset += 4;",
          "1763:         start_offset += 4;",
          "1764:     }",
          "1765:     else {",
          "1766:         len = tvb_reported_length_remaining(tvb, offset);",
          "1767:     }",
          "1769:     if (len <= 0) {",
          "1770:         return offset;",
          "1771:     }",
          "1773:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_message_set, &ti, \"Message Set\");",
          "1775:     if (codec != KAFKA_MESSAGE_CODEC_NONE) {",
          "1776:         proto_item_append_text(subtree, \" [from compressed %s message]\", val_to_str_const(codec, kafka_message_codecs, \"Unknown\"));",
          "1777:     }",
          "1779:     while (offset - start_offset < len) {",
          "1781:         message_size = tvb_get_guint32(tvb, offset+8, ENC_BIG_ENDIAN);",
          "1783:         dissect_kafka_message(tvb, pinfo, subtree, offset);",
          "1784:         offset += 12 + message_size;",
          "1786:         messages += 1;",
          "1788:     }",
          "1790:     proto_item_append_text(ti, \" (%d Messages)\", messages);",
          "1791:     proto_item_set_len(ti, offset - start_offset);",
          "1793:     return offset;",
          "1794: }",
          "1798: static int",
          "1799: dissect_kafka_partition_id_ret(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, int offset,",
          "1800:                            kafka_partition_t *p_partition)",
          "1801: {",
          "1802:     proto_tree_add_item(tree, hf_kafka_partition_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1803:     if (p_partition != NULL) {",
          "1805:     }",
          "1806:     offset += 4;",
          "1808:     return offset;",
          "1809: }",
          "1811: static int",
          "1812: dissect_kafka_partition_id(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "1813:                            kafka_api_version_t api_version _U_)",
          "1814: {",
          "1815:     return dissect_kafka_partition_id_ret(tvb, pinfo, tree, offset, NULL);",
          "1816: }",
          "1818: static int",
          "1819: dissect_kafka_offset_ret(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, int offset,",
          "1820:                      kafka_offset_t *p_offset)",
          "1821: {",
          "1822:     proto_tree_add_item(tree, hf_kafka_offset, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "1823:     if (p_offset != NULL) {",
          "1825:     }",
          "1826:     offset += 8;",
          "1828:     return offset;",
          "1829: }",
          "1831: static int",
          "1832: dissect_kafka_offset(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "1833:                      kafka_api_version_t api_version _U_)",
          "1834: {",
          "1835:     return dissect_kafka_offset_ret(tvb, pinfo, tree, offset, NULL);",
          "1836: }",
          "1838: static int",
          "1839: dissect_kafka_leader_epoch(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, int offset,",
          "1840:                      kafka_api_version_t api_version _U_)",
          "1841: {",
          "1842:     proto_tree_add_item(tree, hf_kafka_leader_epoch, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1843:     offset += 4;",
          "1845:     return offset;",
          "1846: }",
          "1848: static int",
          "1849: dissect_kafka_offset_time(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, int offset,",
          "1850:                           kafka_api_version_t api_version _U_)",
          "1851: {",
          "1852:     proto_item *ti;",
          "1853:     gint64 time;",
          "1855:     time = tvb_get_ntoh64(tvb, offset);",
          "1857:     ti = proto_tree_add_item(tree, hf_kafka_offset_time, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "1858:     offset += 8;",
          "1860:     if (time == -1) {",
          "1861:         proto_item_append_text(ti, \" (latest)\");",
          "1862:     } else if (time == -2) {",
          "1863:         proto_item_append_text(ti, \" (earliest)\");",
          "1864:     }",
          "1866:     return offset;",
          "1867: }",
          "1869: static int",
          "1870: dissect_kafka_offset_fetch_request_topic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int start_offset,",
          "1871:                                          kafka_api_version_t api_version)",
          "1872: {",
          "1873:     proto_item *ti;",
          "1874:     proto_tree *subtree;",
          "1875:     int         offset = start_offset;",
          "1876:     gint32     count;",
          "1877:     int topic_start, topic_len;",
          "1879:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_topic, &ti, \"Topic\");",
          "1881:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, &topic_start, &topic_len);",
          "1883:     count = tvb_get_ntohil(tvb, offset);",
          "1884:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version, &dissect_kafka_partition_id);",
          "1886:     proto_item_set_len(ti, offset - start_offset);",
          "1887:     proto_item_append_text(ti, \" (Topic: %s, Partitions: %u)\",",
          "1888:                            tvb_get_string_enc(wmem_packet_scope(), tvb, topic_start, topic_len, ENC_UTF_8|ENC_NA),",
          "1889:                            count);",
          "1891:     return offset;",
          "1892: }",
          "1894: static int",
          "1895: dissect_kafka_offset_fetch_request_topics(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int start_offset,",
          "1896:                                          kafka_api_version_t api_version)",
          "1897: {",
          "1898:     proto_item *ti;",
          "1899:     proto_tree *subtree;",
          "1900:     int         offset = start_offset;",
          "1901:     gint32     count;",
          "1903:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_topics, &ti, \"Topics\");",
          "1905:     count = tvb_get_ntohil(tvb, offset);",
          "1907:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "1908:                                  &dissect_kafka_offset_fetch_request_topic);",
          "1910:     proto_item_set_len(ti, offset - start_offset);",
          "1912:     if (count < 0) {",
          "1913:         proto_item_append_text(ti, \" (all committed topics)\");",
          "1914:     } else {",
          "1915:         proto_item_append_text(ti, \" (%u topics)\", count);",
          "1916:     }",
          "1918:     return offset;",
          "1919: }",
          "1921: static int",
          "1922: dissect_kafka_offset_fetch_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "1923:                                    kafka_api_version_t api_version)",
          "1924: {",
          "1925:     offset = dissect_kafka_string(tree, hf_kafka_consumer_group, tvb, pinfo, offset, NULL, NULL);",
          "1927:     offset = dissect_kafka_offset_fetch_request_topics(tvb, pinfo, tree, offset, api_version);",
          "1929:     return offset;",
          "1930: }",
          "1932: static int",
          "1933: dissect_kafka_error_ret(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "1934:                         kafka_error_t *ret)",
          "1935: {",
          "1936:     kafka_error_t error = (kafka_error_t) tvb_get_ntohs(tvb, offset);",
          "1937:     proto_tree_add_item(tree, hf_kafka_error, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "1938:     offset += 2;",
          "1941:     if (error != 0) {",
          "1942:         col_append_fstr(pinfo->cinfo, COL_INFO,",
          "1943:                         \" [%s] \", kafka_error_to_str(error));",
          "1944:     }",
          "1946:     if (ret) {",
          "1948:     }",
          "1950:     return offset;",
          "1951: }",
          "1953: static int",
          "1954: dissect_kafka_error(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset)",
          "1955: {",
          "1956:     return dissect_kafka_error_ret(tvb, pinfo, tree, offset, NULL);",
          "1957: }",
          "1959: static int",
          "1960: dissect_kafka_throttle_time(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, int offset)",
          "1961: {",
          "1962:     proto_tree_add_item(tree, hf_kafka_throttle_time, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1963:     offset += 4;",
          "1964:     return offset;",
          "1965: }",
          "1967: static int",
          "1968: dissect_kafka_offset_fetch_response_partition(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "1969:                                               int start_offset, kafka_api_version_t api_version)",
          "1970: {",
          "1971:     proto_item *ti;",
          "1972:     proto_tree *subtree;",
          "1973:     int         offset = start_offset;",
          "1974:     kafka_packet_values_t packet_values;",
          "1975:     memset(&packet_values, 0, sizeof(packet_values));",
          "1977:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_partition, &ti, \"Partition\");",
          "1979:     offset = dissect_kafka_partition_id_ret(tvb, pinfo, subtree, offset, &packet_values.partition_id);",
          "1980:     offset = dissect_kafka_offset_ret(tvb, pinfo, subtree, offset, &packet_values.offset);",
          "1982:     if (api_version >= 5) {",
          "1983:         offset = dissect_kafka_leader_epoch(tvb, pinfo, subtree, offset, api_version);",
          "1984:     }",
          "1986:     offset = dissect_kafka_string(subtree, hf_kafka_metadata, tvb, pinfo, offset, NULL, NULL);",
          "1988:     offset = dissect_kafka_error(tvb, pinfo, subtree, offset);",
          "1990:     if (packet_values.offset==-1) {",
          "1991:         proto_item_append_text(ti, \" (ID=%u, Offset=None)\",",
          "1992:                                packet_values.partition_id);",
          "1993:     } else {",
          "1994:         proto_item_append_text(ti, \" (ID=%u, Offset=%\" G_GINT64_MODIFIER \"i)\",",
          "1995:                                packet_values.partition_id, packet_values.offset);",
          "1996:     }",
          "1998:     proto_item_set_len(ti, offset - start_offset);",
          "2000:     return offset;",
          "2001: }",
          "2003: static int",
          "2004: dissect_kafka_offset_fetch_response_topic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int start_offset,",
          "2005:                                           kafka_api_version_t api_version)",
          "2006: {",
          "2007:     proto_item *ti;",
          "2008:     proto_tree *subtree;",
          "2009:     int         offset = start_offset;",
          "2011:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_topic, &ti, \"Topic\");",
          "2013:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, NULL, NULL);",
          "2014:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "2015:                                  &dissect_kafka_offset_fetch_response_partition);",
          "2017:     proto_item_set_len(ti, offset - start_offset);",
          "2019:     return offset;",
          "2020: }",
          "2022: static int",
          "2023: dissect_kafka_offset_fetch_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "2024:                                     kafka_api_version_t api_version)",
          "2025: {",
          "2026:     if (api_version >= 3) {",
          "2027:         offset = dissect_kafka_throttle_time(tvb, pinfo, tree, offset);",
          "2028:     }",
          "2030:     return dissect_kafka_array(tree, tvb, pinfo, offset, api_version,",
          "2031:                                &dissect_kafka_offset_fetch_response_topic);",
          "2032: }",
          "2036: static int",
          "2037: dissect_kafka_metadata_request_topic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "2038:                                      kafka_api_version_t api_version _U_)",
          "2039: {",
          "2040:     return dissect_kafka_string(tree, hf_kafka_topic_name, tvb, pinfo, offset, NULL, NULL);",
          "2041: }",
          "2043: static int",
          "2044: dissect_kafka_metadata_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "2045:                                kafka_api_version_t api_version)",
          "2046: {",
          "2047:     offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version,",
          "2048:                                &dissect_kafka_metadata_request_topic);",
          "2050:     if (api_version >= 4) {",
          "2051:         proto_tree_add_item(tree, hf_kafka_allow_auto_topic_creation, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2052:         offset += 1;",
          "2053:     }",
          "2055:     if (api_version >= 8) {",
          "2056:         proto_tree_add_item(tree, hf_kafka_include_cluster_authorized_ops, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2057:         offset += 1;",
          "2058:     }",
          "2060:     if (api_version >= 8) {",
          "2061:         proto_tree_add_item(tree, hf_kafka_include_topic_authorized_ops, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2062:         offset += 1;",
          "2063:     }",
          "2065:     return offset;",
          "2066: }",
          "2068: static int",
          "2069: dissect_kafka_metadata_broker(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int start_offset,",
          "2070:                               kafka_api_version_t api_version)",
          "2071: {",
          "2072:     proto_item *ti;",
          "2073:     proto_tree *subtree;",
          "2074:     int         offset = start_offset;",
          "2075:     guint32     nodeid;",
          "2076:     int         host_start, host_len;",
          "2077:     guint32     broker_port;",
          "2079:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_broker, &ti, \"Broker\");",
          "2081:     nodeid = tvb_get_ntohl(tvb, offset);",
          "2082:     proto_tree_add_item(subtree, hf_kafka_broker_nodeid, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2083:     offset += 4;",
          "2085:     offset = dissect_kafka_string(subtree, hf_kafka_broker_host, tvb, pinfo, offset, &host_start, &host_len);",
          "2087:     broker_port = tvb_get_ntohl(tvb, offset);",
          "2088:     proto_tree_add_item(subtree, hf_kafka_broker_port, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2089:     offset += 4;",
          "2091:     if (api_version >= 1) {",
          "2092:         offset = dissect_kafka_string(subtree, hf_kafka_rack, tvb, pinfo, offset, NULL, NULL);",
          "2093:     }",
          "2095:     proto_item_append_text(ti, \" (node %u: %s:%u)\",",
          "2096:                            nodeid,",
          "2097:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "2098:                            host_start, host_len, ENC_UTF_8|ENC_NA),",
          "2099:                            broker_port);",
          "2101:     proto_item_set_len(ti, offset - start_offset);",
          "2103:     return offset;",
          "2104: }",
          "2106: static int",
          "2107: dissect_kafka_metadata_replica(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, int offset,",
          "2108:                                kafka_api_version_t api_version _U_)",
          "2109: {",
          "2110:     proto_tree_add_item(tree, hf_kafka_replica, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2111:     return offset + 4;",
          "2112: }",
          "2114: static int",
          "2115: dissect_kafka_metadata_isr(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, int offset,",
          "2116:                            kafka_api_version_t api_version _U_)",
          "2117: {",
          "2118:     proto_tree_add_item(tree, hf_kafka_isr, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2119:     return offset + 4;",
          "2120: }",
          "2122: static int",
          "2123: dissect_kafka_metadata_offline(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, int offset,",
          "2124:                            kafka_api_version_t api_version _U_)",
          "2125: {",
          "2126:     proto_tree_add_item(tree, hf_kafka_offline, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2127:     return offset + 4;",
          "2128: }",
          "2130: static int",
          "2131: dissect_kafka_metadata_partition(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int start_offset,",
          "2132:                                  kafka_api_version_t api_version)",
          "2133: {",
          "2134:     proto_item *ti, *subti;",
          "2135:     proto_tree *subtree, *subsubtree;",
          "2136:     int         offset = start_offset;",
          "2137:     int         sub_start_offset;",
          "2138:     kafka_partition_t partition;",
          "2140:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_partition, &ti, \"Partition\");",
          "2142:     offset = dissect_kafka_error(tvb, pinfo, subtree, offset);",
          "2144:     offset = dissect_kafka_partition_id_ret(tvb, pinfo, subtree, offset, &partition);",
          "2146:     proto_tree_add_item(subtree, hf_kafka_leader_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2147:     offset += 4;",
          "2149:     if (api_version >= 7) {",
          "2150:         proto_tree_add_item(subtree, hf_kafka_leader_epoch, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2151:         offset += 4;",
          "2152:     }",
          "2154:     sub_start_offset = offset;",
          "2155:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1, ett_kafka_replicas, &subti, \"Replicas\");",
          "2156:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version, &dissect_kafka_metadata_replica);",
          "2157:     proto_item_set_len(subti, offset - sub_start_offset);",
          "2159:     sub_start_offset = offset;",
          "2160:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1, ett_kafka_isrs, &subti, \"Caught-Up Replicas\");",
          "2161:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version, &dissect_kafka_metadata_isr);",
          "2162:     proto_item_set_len(subti, offset - sub_start_offset);",
          "2164:     if (api_version >= 5) {",
          "2165:         sub_start_offset = offset;",
          "2166:         subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1, ett_kafka_offline, &subti, \"Offline Replicas\");",
          "2167:         offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version, &dissect_kafka_metadata_offline);",
          "2168:         proto_item_set_len(subti, offset - sub_start_offset);",
          "2169:     }",
          "2171:     proto_item_set_len(ti, offset - start_offset);",
          "2172:     proto_item_append_text(ti, \" (ID=%u)\", partition);",
          "2174:     return offset;",
          "2175: }",
          "2177: static int",
          "2178: dissect_kafka_metadata_topic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int start_offset,",
          "2179:                              kafka_api_version_t api_version)",
          "2180: {",
          "2181:     proto_item *ti;",
          "2182:     proto_tree *subtree;",
          "2183:     int         offset = start_offset;",
          "2184:     int         name_start, name_length;",
          "2186:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_topic, &ti, \"Topic\");",
          "2188:     offset = dissect_kafka_error(tvb, pinfo, subtree, offset);",
          "2190:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, &name_start, &name_length);",
          "2191:     proto_item_append_text(ti, \" (%s)\",",
          "2192:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "2193:                            name_start, name_length, ENC_UTF_8|ENC_NA));",
          "2195:     if (api_version >= 1) {",
          "2196:         proto_tree_add_item(subtree, hf_kafka_is_internal, tvb, offset, 1, ENC_NA);",
          "2197:         offset += 1;",
          "2198:     }",
          "2200:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version, &dissect_kafka_metadata_partition);",
          "2202:     if (api_version >= 8) {",
          "2203:         proto_tree_add_item(subtree, hf_kafka_topic_authorized_ops, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2204:         offset += 4;",
          "2205:     }",
          "2207:     proto_item_set_len(ti, offset - start_offset);",
          "2209:     return offset;",
          "2210: }",
          "2212: static int",
          "2213: dissect_kafka_metadata_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int start_offset,",
          "2214:                                 kafka_api_version_t api_version)",
          "2215: {",
          "2216:     proto_item *ti;",
          "2217:     proto_tree *subtree;",
          "2218:     int         offset = start_offset;",
          "2220:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_brokers, &ti, \"Broker Metadata\");",
          "2222:     if (api_version >= 3) {",
          "2223:         offset = dissect_kafka_throttle_time(tvb, pinfo, tree, offset);",
          "2224:     }",
          "2226:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version, &dissect_kafka_metadata_broker);",
          "2227:     proto_item_set_len(ti, offset - start_offset);",
          "2229:     if (api_version >= 2) {",
          "2230:         offset = dissect_kafka_string(tree, hf_kafka_cluster_id, tvb, pinfo, offset, NULL, NULL);",
          "2231:     }",
          "2233:     if (api_version >= 1) {",
          "2234:         proto_tree_add_item(tree, hf_kafka_controller_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2235:         offset += 4;",
          "2236:     }",
          "2238:     start_offset = offset;",
          "2239:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_topics, &ti, \"Topic Metadata\");",
          "2240:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version, &dissect_kafka_metadata_topic);",
          "2241:     proto_item_set_len(ti, offset - start_offset);",
          "2243:     if (api_version >= 8) {",
          "2244:         proto_tree_add_item(tree, hf_kafka_cluster_authorized_ops, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2245:         offset += 4;",
          "2246:     }",
          "2248:     return offset;",
          "2249: }",
          "2253: static int",
          "2254: dissect_kafka_leader_and_isr_request_isr(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "2255:                                          int offset, kafka_api_version_t api_version _U_)",
          "2256: {",
          "2258:     proto_tree_add_item(tree, hf_kafka_isr, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2259:     offset += 4;",
          "2261:     return offset;",
          "2262: }",
          "2264: static int",
          "2265: dissect_kafka_leader_and_isr_request_replica(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "2266:                                              int offset, kafka_api_version_t api_version _U_)",
          "2267: {",
          "2269:     proto_tree_add_item(tree, hf_kafka_replica, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2270:     offset += 4;",
          "2272:     return offset;",
          "2273: }",
          "2276: static int",
          "2277: dissect_kafka_leader_and_isr_request_partition_state(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "2278:                                                      int offset, kafka_api_version_t api_version)",
          "2279: {",
          "2280:     proto_tree *subtree, *subsubtree;",
          "2281:     proto_item *subti, *subsubti;",
          "2282:     int topic_start, topic_len;",
          "2283:     kafka_partition_t partition;",
          "2285:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "2286:                                      ett_kafka_partition,",
          "2287:                                      &subti, \"Partition\");",
          "2289:     if (api_version < 2) {",
          "2291:         offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset,",
          "2292:                                       &topic_start, &topic_len);",
          "2293:     }",
          "2296:     partition = (kafka_partition_t) tvb_get_ntohl(tvb, offset);",
          "2297:     proto_tree_add_item(subtree, hf_kafka_partition_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2298:     offset += 4;",
          "2301:     proto_tree_add_item(subtree, hf_kafka_controller_epoch, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2302:     offset += 4;",
          "2305:     proto_tree_add_item(subtree, hf_kafka_leader_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2306:     offset += 4;",
          "2309:     proto_tree_add_item(subtree, hf_kafka_leader_epoch, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2310:     offset += 4;",
          "2313:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1,",
          "2314:                                         ett_kafka_isrs,",
          "2315:                                         &subsubti, \"ISRs\");",
          "2316:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "2317:                                  &dissect_kafka_leader_and_isr_request_isr);",
          "2318:     proto_item_set_end(subsubti, tvb, offset);",
          "2321:     proto_tree_add_item(subtree, hf_kafka_zk_version, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2322:     offset += 4;",
          "2325:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1,",
          "2326:                                         ett_kafka_replicas,",
          "2327:                                         &subsubti, \"Current Replicas\");",
          "2328:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "2329:                                  &dissect_kafka_leader_and_isr_request_replica);",
          "2330:     proto_item_set_end(subsubti, tvb, offset);",
          "2332:     if (api_version >= 3) {",
          "2334:         subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1,",
          "2335:                                             ett_kafka_replicas,",
          "2336:                                             &subsubti, \"Adding Replicas\");",
          "2337:         offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "2338:                                      &dissect_kafka_leader_and_isr_request_replica);",
          "2339:         proto_item_set_end(subsubti, tvb, offset);",
          "2341:         subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1,",
          "2342:                                             ett_kafka_replicas,",
          "2343:                                             &subsubti, \"Removing Replicas\");",
          "2344:         offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "2345:                                      &dissect_kafka_leader_and_isr_request_replica);",
          "2346:         proto_item_set_end(subsubti, tvb, offset);",
          "2348:     }",
          "2350:     proto_item_set_end(subti, tvb, offset);",
          "2352:     if (api_version < 2) {",
          "2353:         proto_item_append_text(subti, \" (Topic=%s, Partition-ID=%u)\",",
          "2354:                                tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "2355:                                                   topic_start, topic_len, ENC_UTF_8|ENC_NA),",
          "2356:                                partition);",
          "2357:     } else {",
          "2358:         proto_item_append_text(subti, \" (Partition-ID=%u)\",",
          "2359:                                partition);",
          "2360:     }",
          "2362:     return offset;",
          "2363: }",
          "2365: static int",
          "2366: dissect_kafka_leader_and_isr_request_topic_state(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "2367:                                                      int offset, kafka_api_version_t api_version)",
          "2368: {",
          "2369:     proto_tree *subtree;",
          "2370:     proto_item *subti;",
          "2371:     int topic_start, topic_len;",
          "2373:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "2374:                                      ett_kafka_topic,",
          "2375:                                      &subti, \"Topic\");",
          "2378:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset,",
          "2379:                                   &topic_start, &topic_len);",
          "2382:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "2383:                                  &dissect_kafka_leader_and_isr_request_partition_state);",
          "2385:     proto_item_append_text(subti, \" (Name=%s)\",",
          "2386:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "2387:                                               topic_start, topic_len, ENC_UTF_8|ENC_NA));",
          "2389:     return offset;",
          "2390: }",
          "2392: static int",
          "2393: dissect_kafka_leader_and_isr_request_live_leader(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "2394:                                                  int offset, kafka_api_version_t api_version _U_)",
          "2395: {",
          "2396:     proto_item *subti;",
          "2397:     proto_tree *subtree;",
          "2398:     gint32 nodeid;",
          "2399:     int host_start, host_len;",
          "2400:     gint32 broker_port;",
          "2402:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_broker,",
          "2403:                                      &subti, \"Live Leader\");",
          "2406:     nodeid = (kafka_partition_t) tvb_get_ntohl(tvb, offset);",
          "2407:     proto_tree_add_item(subtree, hf_kafka_broker_nodeid, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2408:     offset += 4;",
          "2411:     offset = dissect_kafka_string(subtree, hf_kafka_broker_host, tvb, pinfo, offset, &host_start, &host_len);",
          "2414:     broker_port = (gint32) tvb_get_ntohl(tvb, offset);",
          "2415:     proto_tree_add_item(subtree, hf_kafka_broker_port, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2416:     offset += 4;",
          "2418:     proto_item_set_end(subti, tvb, offset);",
          "2419:     proto_item_append_text(subti, \" (node %u: %s:%u)\",",
          "2420:                            nodeid,",
          "2421:                            tvb_get_string_enc(wmem_packet_scope(), tvb, host_start, host_len, ENC_UTF_8|ENC_NA),",
          "2422:                            broker_port);",
          "2424:     return offset;",
          "2425: }",
          "2427: static int",
          "2428: dissect_kafka_leader_and_isr_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "2429:                                      kafka_api_version_t api_version)",
          "2430: {",
          "2431:     gint32 controller_id;",
          "2434:     controller_id = (gint32) tvb_get_ntohl(tvb, offset);",
          "2435:     proto_tree_add_item(tree, hf_kafka_controller_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2436:     offset += 4;",
          "2439:     proto_tree_add_item(tree, hf_kafka_controller_epoch, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2440:     offset += 4;",
          "2442:     if (api_version >= 2) {",
          "2444:         proto_tree_add_item(tree, hf_kafka_broker_epoch, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "2445:         offset += 8;",
          "2446:     }",
          "2448:     if (api_version >= 2) {",
          "2450:         offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version,",
          "2451:                                      &dissect_kafka_leader_and_isr_request_topic_state);",
          "2452:     } else {",
          "2454:         offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version,",
          "2455:                                      &dissect_kafka_leader_and_isr_request_partition_state);",
          "2456:     }",
          "2459:     offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version,",
          "2460:                                  &dissect_kafka_leader_and_isr_request_live_leader);",
          "2462:     col_append_fstr(pinfo->cinfo, COL_INFO, \" (Controller-ID=%d)\", controller_id);",
          "2464:     return offset;",
          "2465: }",
          "2467: static int",
          "2468: dissect_kafka_leader_and_isr_response_partition(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "2469:                                                 int offset, kafka_api_version_t api_version _U_)",
          "2470: {",
          "2471:     proto_item *subti;",
          "2472:     proto_tree *subtree;",
          "2473:     int topic_start, topic_len;",
          "2474:     kafka_partition_t partition;",
          "2475:     kafka_error_t error;",
          "2477:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "2478:                                      ett_kafka_partition,",
          "2479:                                      &subti, \"Partition\");",
          "2482:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, &topic_start, &topic_len);",
          "2485:     partition = (gint32) tvb_get_ntohl(tvb, offset);",
          "2486:     proto_tree_add_item(subtree, hf_kafka_partition_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2487:     offset += 4;",
          "2490:     offset = dissect_kafka_error_ret(tvb, pinfo, subtree, offset, &error);",
          "2492:     proto_item_set_end(subti, tvb, offset);",
          "2493:     proto_item_append_text(subti, \" (Topic=%s, Partition-ID=%u, Error=%s)\",",
          "2494:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "2495:                                               topic_start, topic_len, ENC_UTF_8|ENC_NA),",
          "2496:                            partition,",
          "2497:                            kafka_error_to_str(error));",
          "2499:     return offset;",
          "2500: }",
          "2502: static int",
          "2503: dissect_kafka_leader_and_isr_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "2504:                                       kafka_api_version_t api_version)",
          "2505: {",
          "2507:     offset = dissect_kafka_error(tvb, pinfo, tree, offset);",
          "2510:     offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version,",
          "2511:                                  &dissect_kafka_leader_and_isr_response_partition);",
          "2513:     return offset;",
          "2514: }",
          "2518: static int",
          "2519: dissect_kafka_stop_replica_request_topic_partition(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "2520:                                              int offset, kafka_api_version_t api_version _U_)",
          "2521: {",
          "2522:     proto_tree_add_item(tree, hf_kafka_partition_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2523:     offset += 4;",
          "2524:     return offset;",
          "2525: }",
          "2527: static int",
          "2528: dissect_kafka_stop_replica_request_topic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "2529:                                              int offset, kafka_api_version_t api_version)",
          "2530: {",
          "2531:     proto_item *subti;",
          "2532:     proto_tree *subtree;",
          "2533:     int topic_start, topic_len;",
          "2535:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "2536:                                      ett_kafka_topic,",
          "2537:                                      &subti, \"Topic\");",
          "2540:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, &topic_start, &topic_len);",
          "2542:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "2543:                                  &dissect_kafka_stop_replica_request_topic_partition);",
          "2545:     proto_item_set_end(subti, tvb, offset);",
          "2546:     proto_item_append_text(subti, \" (Name=%s)\",",
          "2547:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "2548:                                               topic_start, topic_len, ENC_UTF_8|ENC_NA));",
          "2550:     return offset;",
          "2551: }",
          "2553: static int",
          "2554: dissect_kafka_stop_replica_request_partition(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "2555:                                              int offset, kafka_api_version_t api_version _U_)",
          "2556: {",
          "2557:     proto_item *subti;",
          "2558:     proto_tree *subtree;",
          "2559:     int topic_start, topic_len;",
          "2560:     kafka_partition_t partition;",
          "2562:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "2563:                                      ett_kafka_partition,",
          "2564:                                      &subti, \"Partition\");",
          "2567:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, &topic_start, &topic_len);",
          "2570:     partition = (gint32) tvb_get_ntohl(tvb, offset);",
          "2571:     proto_tree_add_item(subtree, hf_kafka_partition_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2572:     offset += 4;",
          "2574:     proto_item_set_end(subti, tvb, offset);",
          "2575:     proto_item_append_text(subti, \" (Topic=%s, Partition-ID=%u)\",",
          "2576:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "2577:                                               topic_start, topic_len, ENC_UTF_8|ENC_NA),",
          "2578:                            partition);",
          "2580:     return offset;",
          "2581: }",
          "2583: static int",
          "2584: dissect_kafka_stop_replica_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "2585:                                    kafka_api_version_t api_version)",
          "2586: {",
          "2587:     gint32 controller_id;",
          "2590:     controller_id = (gint32) tvb_get_ntohl(tvb, offset);",
          "2591:     proto_tree_add_item(tree, hf_kafka_controller_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2592:     offset += 4;",
          "2595:     proto_tree_add_item(tree, hf_kafka_controller_epoch, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2596:     offset += 4;",
          "2598:     if (api_version >= 1) {",
          "2600:         proto_tree_add_item(tree, hf_kafka_broker_epoch, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2601:         offset += 4;",
          "2602:     }",
          "2605:     proto_tree_add_item(tree, hf_kafka_delete_partitions, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2606:     offset += 1;",
          "2609:     offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version,",
          "2610:                                  &dissect_kafka_stop_replica_request_partition);",
          "2612:     if (api_version >= 1) {",
          "2613:         offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version,",
          "2614:                                      &dissect_kafka_stop_replica_request_topic);",
          "2615:     }",
          "2617:     col_append_fstr(pinfo->cinfo, COL_INFO, \" (Controller-ID=%d)\", controller_id);",
          "2619:     return offset;",
          "2620: }",
          "2622: static int",
          "2623: dissect_kafka_stop_replica_response_partition(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "2624:                                               int offset, kafka_api_version_t api_version _U_)",
          "2625: {",
          "2626:     proto_item *subti;",
          "2627:     proto_tree *subtree;",
          "2628:     int topic_start, topic_len;",
          "2629:     kafka_error_t error;",
          "2630:     kafka_partition_t partition;",
          "2632:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "2633:                                      ett_kafka_partition,",
          "2634:                                      &subti, \"Partition\");",
          "2637:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, &topic_start, &topic_len);",
          "2640:     partition = (gint32) tvb_get_ntohl(tvb, offset);",
          "2641:     proto_tree_add_item(subtree, hf_kafka_partition_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2642:     offset += 4;",
          "2645:     offset = dissect_kafka_error_ret(tvb, pinfo, subtree, offset, &error);",
          "2647:     proto_item_set_end(subti, tvb, offset);",
          "2648:     proto_item_append_text(subti, \" (Topic=%s, Partition-ID=%u, Error=%s)\",",
          "2649:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "2650:                                               topic_start, topic_len, ENC_UTF_8|ENC_NA),",
          "2651:                            partition,",
          "2652:                            kafka_error_to_str(error));",
          "2654:     return offset;",
          "2655: }",
          "2657: static int",
          "2658: dissect_kafka_stop_replica_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "2659:                                     kafka_api_version_t api_version)",
          "2660: {",
          "2662:     offset = dissect_kafka_error(tvb, pinfo, tree, offset);",
          "2665:     offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version,",
          "2666:                                  &dissect_kafka_stop_replica_response_partition);",
          "2668:     return offset;",
          "2669: }",
          "2673: static int",
          "2674: dissect_kafka_fetch_request_partition(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "2675:                                       kafka_api_version_t api_version _U_)",
          "2676: {",
          "2677:     proto_item *ti;",
          "2678:     proto_tree *subtree;",
          "2679:     kafka_packet_values_t packet_values;",
          "2680:     memset(&packet_values, 0, sizeof(packet_values));",
          "2682:     subtree = proto_tree_add_subtree(tree, tvb, offset, 16, ett_kafka_partition, &ti, \"Partition\");",
          "2684:     offset = dissect_kafka_partition_id_ret(tvb, pinfo, subtree, offset, &packet_values.partition_id);",
          "2686:     if (api_version >= 9) {",
          "2687:         proto_tree_add_item(subtree, hf_kafka_leader_epoch, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2688:         offset += 4;",
          "2689:     }",
          "2691:     offset = dissect_kafka_offset_ret(tvb, pinfo, subtree, offset, &packet_values.offset);",
          "2693:     if (api_version >= 5) {",
          "2694:         proto_tree_add_item(subtree, hf_kafka_log_start_offset, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "2695:         offset += 8;",
          "2696:     }",
          "2698:     proto_tree_add_item(subtree, hf_kafka_max_bytes, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2699:     offset += 4;",
          "2701:     proto_item_append_text(ti, \" (ID=%u, Offset=%\" G_GINT64_MODIFIER \"i)\",",
          "2702:                            packet_values.partition_id, packet_values.offset);",
          "2704:     return offset;",
          "2705: }",
          "2707: static int",
          "2708: dissect_kafka_fetch_request_topic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int start_offset,",
          "2709:                                   kafka_api_version_t api_version)",
          "2710: {",
          "2711:     proto_item *ti;",
          "2712:     proto_tree *subtree;",
          "2713:     int         offset = start_offset;",
          "2714:     guint32     count;",
          "2715:     int         name_start, name_length;",
          "2717:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_topic, &ti, \"Topic\");",
          "2719:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, &name_start, &name_length);",
          "2720:     count = tvb_get_ntohl(tvb, offset);",
          "2721:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "2722:                                  &dissect_kafka_fetch_request_partition);",
          "2724:     proto_item_set_len(ti, offset - start_offset);",
          "2725:     proto_item_append_text(ti, \" (%u partitions)\", count);",
          "2727:     return offset;",
          "2728: }",
          "2730: static int",
          "2731: dissect_kafka_fetch_request_forgottent_topic_partition(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, int offset,",
          "2732:                                                   kafka_api_version_t api_version _U_)",
          "2733: {",
          "2734:     proto_tree_add_item(tree, hf_kafka_forgotten_topic_partition, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2735:     offset += 4;",
          "2736:     return offset;",
          "2737: }",
          "2739: static int",
          "2740: dissect_kafka_fetch_request_forgotten_topics_data(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int start_offset,",
          "2741:                                   kafka_api_version_t api_version)",
          "2742: {",
          "2743:     proto_item *ti;",
          "2744:     proto_tree *subtree;",
          "2745:     int         offset = start_offset;",
          "2746:     guint32     count;",
          "2747:     int         name_start, name_length;",
          "2749:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_request_forgotten_topic, &ti, \"Fetch Request Forgotten Topic Data\");",
          "2751:     offset = dissect_kafka_string(subtree, hf_kafka_forgotten_topic_name, tvb, pinfo, offset, &name_start, &name_length);",
          "2752:     count = tvb_get_ntohl(tvb, offset);",
          "2753:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "2754:                                  &dissect_kafka_fetch_request_forgottent_topic_partition);",
          "2756:     proto_item_set_len(ti, offset - start_offset);",
          "2757:     proto_item_append_text(ti, \" (%u partitions)\", count);",
          "2759:     return offset;",
          "2760: }",
          "2762: static int",
          "2763: dissect_kafka_fetch_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "2764:                             kafka_api_version_t api_version)",
          "2765: {",
          "2766:     proto_tree_add_item(tree, hf_kafka_replica, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2767:     offset += 4;",
          "2769:     proto_tree_add_item(tree, hf_kafka_max_wait_time, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2770:     offset += 4;",
          "2772:     proto_tree_add_item(tree, hf_kafka_min_bytes, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2773:     offset += 4;",
          "2775:     if (api_version >= 3) {",
          "2776:         proto_tree_add_item(tree, hf_kafka_max_bytes, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2777:         offset += 4;",
          "2778:     }",
          "2780:     if (api_version >= 4) {",
          "2781:         proto_tree_add_item(tree, hf_kafka_isolation_level, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "2782:         offset += 1;",
          "2783:     }",
          "2785:     if (api_version >= 7) {",
          "2786:         proto_tree_add_item(tree, hf_kafka_fetch_session_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2787:         offset += 4;",
          "2788:     }",
          "2790:     if (api_version >= 7) {",
          "2791:         proto_tree_add_item(tree, hf_kafka_fetch_session_epoch, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2792:         offset += 4;",
          "2793:     }",
          "2795:     offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version, &dissect_kafka_fetch_request_topic);",
          "2797:     if (api_version >= 7) {",
          "2798:         offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version, &dissect_kafka_fetch_request_forgotten_topics_data);",
          "2799:     }",
          "2801:     if (api_version >= 11) {",
          "2802:         offset = dissect_kafka_string(tree, hf_kafka_rack, tvb, pinfo, offset, NULL, NULL);",
          "2803:     }",
          "2805:     return offset;",
          "2806: }",
          "2808: static int",
          "2809: dissect_kafka_aborted_transaction(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "2810:                                   int start_offset, kafka_api_version_t api_version _U_)",
          "2811: {",
          "2812:     proto_item *ti;",
          "2813:     proto_tree *subtree;",
          "2814:     int         offset = start_offset;",
          "2816:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_aborted_transaction, &ti, \"Transaction\");",
          "2818:     proto_tree_add_item(subtree, hf_kafka_producer_id, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "2819:     offset += 8;",
          "2821:     proto_tree_add_item(subtree, hf_kafka_first_offset, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "2822:     offset += 8;",
          "2824:     proto_item_set_len(ti, offset - start_offset);",
          "2826:     return offset;",
          "2827: }",
          "2829: static int",
          "2830: dissect_kafka_aborted_transactions(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "2831:                                   int start_offset, kafka_api_version_t api_version _U_)",
          "2832: {",
          "2833:     proto_item *ti;",
          "2834:     proto_tree *subtree;",
          "2835:     int         offset = start_offset;",
          "2837:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_aborted_transactions, &ti, \"Aborted Transactions\");",
          "2839:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version, &dissect_kafka_aborted_transaction);",
          "2841:     proto_item_set_len(ti, offset - start_offset);",
          "2843:     return offset;",
          "2844: }",
          "2846: static int",
          "2847: dissect_kafka_fetch_response_partition(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int start_offset,",
          "2848:                                        kafka_api_version_t api_version _U_)",
          "2849: {",
          "2850:     proto_item *ti;",
          "2851:     proto_tree *subtree;",
          "2852:     int         offset = start_offset;",
          "2853:     kafka_packet_values_t packet_values;",
          "2854:     memset(&packet_values, 0, sizeof(packet_values));",
          "2856:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_partition, &ti, \"Partition\");",
          "2858:     offset = dissect_kafka_partition_id_ret(tvb, pinfo, subtree, offset, &packet_values.partition_id);",
          "2860:     offset = dissect_kafka_error(tvb, pinfo, subtree, offset);",
          "2862:     offset = dissect_kafka_offset_ret(tvb, pinfo, subtree, offset, &packet_values.offset);",
          "2864:     if (api_version >= 4) {",
          "2865:         proto_tree_add_item(subtree, hf_kafka_last_stable_offset, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "2866:         offset += 8;",
          "2867:     }",
          "2869:     if (api_version >= 5) {",
          "2870:         proto_tree_add_item(subtree, hf_kafka_log_start_offset, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "2871:         offset += 8;",
          "2872:     }",
          "2874:     if (api_version >= 4) {",
          "2875:         offset = dissect_kafka_aborted_transactions(tvb, pinfo, subtree, offset, api_version);",
          "2876:     }",
          "2878:     offset = dissect_kafka_message_set(tvb, pinfo, subtree, offset, TRUE, KAFKA_MESSAGE_CODEC_NONE);",
          "2880:     proto_item_set_len(ti, offset - start_offset);",
          "2882:     proto_item_append_text(ti, \" (ID=%u, Offset=%\" G_GINT64_MODIFIER \"i)\",",
          "2883:                            packet_values.partition_id, packet_values.offset);",
          "2885:     return offset;",
          "2886: }",
          "2888: static int",
          "2889: dissect_kafka_fetch_response_topic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int start_offset,",
          "2890:                                    kafka_api_version_t api_version)",
          "2891: {",
          "2892:     proto_item *ti;",
          "2893:     proto_tree *subtree;",
          "2894:     int         offset = start_offset;",
          "2895:     guint32     count;",
          "2897:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_topic, &ti, \"Topic\");",
          "2899:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, NULL, NULL);",
          "2900:     count = tvb_get_ntohl(tvb, offset);",
          "2901:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "2902:                                  &dissect_kafka_fetch_response_partition);",
          "2904:     proto_item_set_len(ti, offset - start_offset);",
          "2905:     proto_item_append_text(ti, \" (%u partitions)\", count);",
          "2907:     return offset;",
          "2908: }",
          "2910: static int",
          "2911: dissect_kafka_fetch_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "2912:                              kafka_api_version_t api_version)",
          "2913: {",
          "2914:     if (api_version >= 1) {",
          "2915:         offset = dissect_kafka_throttle_time(tvb, pinfo, tree, offset);",
          "2916:     }",
          "2918:     if (api_version >= 7) {",
          "2919:         offset = dissect_kafka_error(tvb, pinfo, tree, offset);",
          "2920:     }",
          "2922:     if (api_version >= 7) {",
          "2923:         proto_tree_add_item(tree, hf_kafka_fetch_session_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2924:         offset += 4;",
          "2925:     }",
          "2927:     if (api_version >= 11) {",
          "2928:         proto_tree_add_item(tree, hf_kafka_replica, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2929:         offset += 4;",
          "2930:     }",
          "2932:     return dissect_kafka_array(tree, tvb, pinfo, offset, api_version, &dissect_kafka_fetch_response_topic);",
          "2933: }",
          "2937: static int",
          "2938: dissect_kafka_produce_request_partition(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "2939:                                         kafka_api_version_t api_version _U_)",
          "2940: {",
          "2941:     proto_item *ti;",
          "2942:     proto_tree *subtree;",
          "2943:     kafka_packet_values_t packet_values;",
          "2944:     memset(&packet_values, 0, sizeof(packet_values));",
          "2946:     subtree = proto_tree_add_subtree(tree, tvb, offset, 14, ett_kafka_partition, &ti, \"Partition\");",
          "2948:     offset = dissect_kafka_partition_id_ret(tvb, pinfo, subtree, offset, &packet_values.partition_id);",
          "2950:     offset = dissect_kafka_message_set(tvb, pinfo, subtree, offset, TRUE, KAFKA_MESSAGE_CODEC_NONE);",
          "2952:     proto_item_append_text(ti, \" (ID=%u)\", packet_values.partition_id);",
          "2953:     proto_item_set_end(ti, tvb, offset);",
          "2955:     return offset;",
          "2956: }",
          "2958: static int",
          "2959: dissect_kafka_produce_request_topic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int start_offset,",
          "2960:                                     kafka_api_version_t api_version)",
          "2961: {",
          "2962:     proto_item *ti;",
          "2963:     proto_tree *subtree;",
          "2964:     int         offset = start_offset;",
          "2965:     int topic_off, topic_len;",
          "2967:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_topic, &ti, \"Topic\");",
          "2969:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, &topic_off, &topic_len);",
          "2970:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "2971:                                  &dissect_kafka_produce_request_partition);",
          "2973:     proto_item_append_text(ti, \" (Name=%s)\",",
          "2974:                            tvb_get_string_enc(wmem_packet_scope(), tvb, topic_off, topic_len, ENC_UTF_8|ENC_NA));",
          "2975:     proto_item_set_end(ti, tvb, offset);",
          "2977:     return offset;",
          "2978: }",
          "2980: static int",
          "2981: dissect_kafka_produce_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "2982:                               kafka_api_version_t api_version)",
          "2983: {",
          "2984:     if (api_version >= 3) {",
          "2985:         offset = dissect_kafka_string(tree, hf_kafka_transactional_id, tvb, pinfo, offset, NULL, NULL);",
          "2986:     }",
          "2988:     proto_tree_add_item(tree, hf_kafka_required_acks, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "2989:     offset += 2;",
          "2991:     proto_tree_add_item(tree, hf_kafka_timeout, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "2992:     offset += 4;",
          "2994:     offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version,",
          "2995:                                  &dissect_kafka_produce_request_topic);",
          "2997:     return offset;",
          "2998: }",
          "3000: static int",
          "3001: dissect_kafka_produce_response_partition(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "3002:                                          kafka_api_version_t api_version _U_)",
          "3003: {",
          "3004:     proto_item *ti;",
          "3005:     proto_tree *subtree;",
          "3006:     kafka_packet_values_t packet_values;",
          "3007:     memset(&packet_values, 0, sizeof(packet_values));",
          "3009:     subtree = proto_tree_add_subtree(tree, tvb, offset, 14, ett_kafka_partition, &ti, \"Partition\");",
          "3011:     offset = dissect_kafka_partition_id_ret(tvb, pinfo, subtree, offset, &packet_values.partition_id);",
          "3013:     offset = dissect_kafka_error(tvb, pinfo, subtree, offset);",
          "3015:     offset = dissect_kafka_offset_ret(tvb, pinfo, subtree, offset, &packet_values.offset);",
          "3017:     if (api_version >= 2) {",
          "3018:         offset = dissect_kafka_offset_time(tvb, pinfo, subtree, offset, api_version);",
          "3019:     }",
          "3021:     if (api_version >= 5) {",
          "3022:         proto_tree_add_item(subtree, hf_kafka_log_start_offset, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "3023:         offset += 8;",
          "3024:     }",
          "3026:     proto_item_append_text(ti, \" (ID=%u, Offset=%\" G_GINT64_MODIFIER \"i)\",",
          "3027:                            packet_values.partition_id, packet_values.offset);",
          "3029:     return offset;",
          "3030: }",
          "3032: static int",
          "3033: dissect_kafka_produce_response_topic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int start_offset,",
          "3034:                                      kafka_api_version_t api_version)",
          "3035: {",
          "3036:     proto_item *ti;",
          "3037:     proto_tree *subtree;",
          "3038:     int         offset = start_offset;",
          "3040:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_topic, &ti, \"Topic\");",
          "3042:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, NULL, NULL);",
          "3043:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "3044:                                  &dissect_kafka_produce_response_partition);",
          "3046:     proto_item_set_len(ti, offset - start_offset);",
          "3048:     return offset;",
          "3049: }",
          "3051: static int",
          "3052: dissect_kafka_produce_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "3053:                                kafka_api_version_t api_version)",
          "3054: {",
          "3055:     offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version, &dissect_kafka_produce_response_topic);",
          "3057:     if (api_version >= 1) {",
          "3058:         offset = dissect_kafka_throttle_time(tvb, pinfo, tree, offset);",
          "3059:     }",
          "3061:     return offset;",
          "3062: }",
          "3066: static int",
          "3067: dissect_kafka_offsets_request_partition(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "3068:                                         int start_offset, kafka_api_version_t api_version)",
          "3069: {",
          "3070:     proto_item *ti;",
          "3071:     proto_tree *subtree;",
          "3072:     int         offset = start_offset;",
          "3073:     kafka_partition_t partition;",
          "3075:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_partition, &ti, \"Partition\");",
          "3077:     offset = dissect_kafka_partition_id_ret(tvb, pinfo, subtree, offset, &partition);",
          "3079:     if (api_version >= 4) {",
          "3080:         proto_tree_add_item(subtree, hf_kafka_leader_epoch, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3081:         offset += 4;",
          "3082:     }",
          "3084:     offset = dissect_kafka_offset_time(tvb, pinfo, subtree, offset, api_version);",
          "3086:     if (api_version == 0) {",
          "3087:         proto_tree_add_item(subtree, hf_kafka_max_offsets, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3088:         offset += 4;",
          "3089:     }",
          "3091:     proto_item_set_len(ti, offset - start_offset);",
          "3092:     proto_item_append_text(ti, \" (ID=%u)\", partition);",
          "3094:     return offset;",
          "3095: }",
          "3097: static int",
          "3098: dissect_kafka_offsets_request_topic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int start_offset,",
          "3099:                                     kafka_api_version_t api_version)",
          "3100: {",
          "3101:     proto_item *ti;",
          "3102:     proto_tree *subtree;",
          "3103:     int         offset = start_offset;",
          "3105:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_topic, &ti, \"Topic\");",
          "3107:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, NULL, NULL);",
          "3108:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "3109:                                  &dissect_kafka_offsets_request_partition);",
          "3111:     proto_item_set_len(ti, offset - start_offset);",
          "3113:     return offset;",
          "3114: }",
          "3116: static int",
          "3117: dissect_kafka_offsets_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "3118:                               kafka_api_version_t api_version)",
          "3119: {",
          "3120:     proto_tree_add_item(tree, hf_kafka_replica, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3121:     offset += 4;",
          "3123:     if (api_version >= 2) {",
          "3124:         proto_tree_add_item(tree, hf_kafka_isolation_level, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "3125:         offset += 1;",
          "3126:     }",
          "3128:     offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version, &dissect_kafka_offsets_request_topic);",
          "3130:     return offset;",
          "3131: }",
          "3133: static int",
          "3134: dissect_kafka_offsets_response_partition(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "3135:                                          int start_offset, kafka_api_version_t api_version)",
          "3136: {",
          "3137:     proto_item *ti;",
          "3138:     proto_tree *subtree;",
          "3139:     int         offset = start_offset;",
          "3140:     kafka_partition_t partition;",
          "3142:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_partition, &ti, \"Partition\");",
          "3144:     offset = dissect_kafka_partition_id_ret(tvb, pinfo, subtree, offset, &partition);",
          "3146:     offset = dissect_kafka_error(tvb, pinfo, subtree, offset);",
          "3148:     if (api_version == 0) {",
          "3149:         offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version, &dissect_kafka_offset);",
          "3150:     }",
          "3151:     else if (api_version >= 1) {",
          "3152:         offset = dissect_kafka_offset_time(tvb, pinfo, subtree, offset, api_version);",
          "3154:         offset = dissect_kafka_offset_ret(tvb, pinfo, subtree, offset, NULL);",
          "3155:     }",
          "3157:     if (api_version >= 4) {",
          "3158:         proto_tree_add_item(subtree, hf_kafka_leader_epoch, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3159:         offset += 4;",
          "3160:     }",
          "3162:     proto_item_set_len(ti, offset - start_offset);",
          "3163:     proto_item_append_text(ti, \" (ID=%u)\", partition);",
          "3165:     return offset;",
          "3166: }",
          "3168: static int",
          "3169: dissect_kafka_offsets_response_topic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int start_offset,",
          "3170:                                      kafka_api_version_t api_version)",
          "3171: {",
          "3172:     proto_item *ti;",
          "3173:     proto_tree *subtree;",
          "3174:     int         offset = start_offset;",
          "3176:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_topic, &ti, \"Topic\");",
          "3178:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, NULL, NULL);",
          "3179:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "3180:                                  &dissect_kafka_offsets_response_partition);",
          "3182:     proto_item_set_len(ti, offset - start_offset);",
          "3184:     return offset;",
          "3185: }",
          "3187: static int",
          "3188: dissect_kafka_offsets_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int start_offset,",
          "3189:                                kafka_api_version_t api_version)",
          "3190: {",
          "3191:     int offset = start_offset;",
          "3193:     if (api_version >= 2) {",
          "3194:         offset = dissect_kafka_throttle_time(tvb, pinfo, tree, offset);",
          "3195:     }",
          "3197:     return dissect_kafka_array(tree, tvb, pinfo, offset, api_version, &dissect_kafka_offsets_response_topic);",
          "3198: }",
          "3202: static int",
          "3203: dissect_kafka_api_versions_request(tvbuff_t *tvb _U_, packet_info *pinfo _U_, proto_tree *tree _U_,",
          "3204:                                    int offset _U_, kafka_api_version_t api_version _U_)",
          "3205: {",
          "3206:     return offset;",
          "3207: }",
          "3209: static int",
          "3210: dissect_kafka_api_versions_response_api_version(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "3211:                                                 int offset, kafka_api_version_t api_version _U_)",
          "3212: {",
          "3213:     proto_item *ti;",
          "3214:     proto_tree *subtree;",
          "3215:     kafka_api_key_t api_key;",
          "3216:     kafka_api_version_t min_version, max_version;",
          "3217:     const kafka_api_info_t *api_info;",
          "3219:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_api_version, &ti,",
          "3220:                                      \"API Version\");",
          "3222:     api_key = tvb_get_ntohs(tvb, offset);",
          "3223:     proto_tree_add_item(subtree, hf_kafka_api_versions_api_key, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "3224:     offset += 2;",
          "3226:     min_version = tvb_get_ntohs(tvb, offset);",
          "3227:     proto_tree_add_item(subtree, hf_kafka_api_versions_min_version, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "3228:     offset += 2;",
          "3230:     max_version = tvb_get_ntohs(tvb, offset);",
          "3231:     proto_tree_add_item(subtree, hf_kafka_api_versions_max_version, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "3232:     offset += 2;",
          "3234:     proto_item_set_end(ti, tvb, offset);",
          "3235:     if (max_version != min_version) {",
          "3237:         proto_item_append_text(subtree, \" %s (v%d-%d)\",",
          "3238:                                kafka_api_key_to_str(api_key),",
          "3239:                                min_version, max_version);",
          "3240:     }",
          "3241:     else {",
          "3243:         proto_item_append_text(subtree, \" %s (v%d)\",",
          "3244:                                kafka_api_key_to_str(api_key),",
          "3245:                                min_version);",
          "3246:     }",
          "3248:     api_info = kafka_get_api_info(api_key);",
          "3249:     if (api_info == NULL) {",
          "3250:         proto_item_append_text(subtree, \" [Unknown API key]\");",
          "3251:         expert_add_info_format(pinfo, ti, &ei_kafka_unknown_api_key,",
          "3252:                                \"%s API key\", kafka_api_key_to_str(api_key));",
          "3253:     }",
          "3254:     else if (!kafka_is_api_version_supported(api_info, min_version) ||",
          "3255:              !kafka_is_api_version_supported(api_info, max_version)) {",
          "3256:         if (api_info->min_version == -1) {",
          "3257:             proto_item_append_text(subtree, \" [Unsupported API version]\");",
          "3258:             expert_add_info_format(pinfo, ti, &ei_kafka_unsupported_api_version,",
          "3259:                                    \"Unsupported %s version.\",",
          "3260:                                    kafka_api_key_to_str(api_key));",
          "3261:         }",
          "3262:         else if (api_info->min_version == api_info->max_version) {",
          "3263:             proto_item_append_text(subtree, \" [Unsupported API version. Supports v%d]\",",
          "3264:                                    api_info->min_version);",
          "3265:             expert_add_info_format(pinfo, ti, &ei_kafka_unsupported_api_version,",
          "3266:                                    \"Unsupported %s version. Supports v%d.\",",
          "3267:                                    kafka_api_key_to_str(api_key), api_info->min_version);",
          "3268:         } else {",
          "3269:             proto_item_append_text(subtree, \" [Unsupported API version. Supports v%d-%d]\",",
          "3270:                                    api_info->min_version, api_info->max_version);",
          "3271:             expert_add_info_format(pinfo, ti, &ei_kafka_unsupported_api_version,",
          "3272:                                    \"Unsupported %s version. Supports v%d-%d.\",",
          "3273:                                    kafka_api_key_to_str(api_key),",
          "3274:                                    api_info->min_version, api_info->max_version);",
          "3275:         }",
          "3276:     }",
          "3278:     return offset;",
          "3279: }",
          "3281: static int",
          "3282: dissect_kafka_api_versions_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "3283:                                     kafka_api_version_t api_version)",
          "3284: {",
          "3286:     offset = dissect_kafka_error(tvb, pinfo, tree, offset);",
          "3289:     offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version,",
          "3290:                                  &dissect_kafka_api_versions_response_api_version);",
          "3292:     if (api_version >= 1) {",
          "3293:         offset = dissect_kafka_throttle_time(tvb, pinfo, tree, offset);",
          "3294:     }",
          "3295:     return offset;",
          "3296: }",
          "3300: static int",
          "3301: dissect_kafka_update_metadata_request_isr(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "3302:                                           int offset, kafka_api_version_t api_version _U_)",
          "3303: {",
          "3305:     proto_tree_add_item(tree, hf_kafka_isr, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3306:     offset += 4;",
          "3308:     return offset;",
          "3309: }",
          "3311: static int",
          "3312: dissect_kafka_update_metadata_request_replica(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "3313:                                               int offset, kafka_api_version_t api_version _U_)",
          "3314: {",
          "3316:     proto_tree_add_item(tree, hf_kafka_replica, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3317:     offset += 4;",
          "3319:     return offset;",
          "3320: }",
          "3322: static int",
          "3323: dissect_kafka_update_metadata_request_partition_state(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "3324:                                                       int offset, kafka_api_version_t api_version)",
          "3325: {",
          "3326:     proto_tree *subtree, *subsubtree;",
          "3327:     proto_item *subti, *subsubti;",
          "3328:     int topic_start, topic_len;",
          "3329:     kafka_partition_t partition;",
          "3331:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "3332:                                      ett_kafka_partition,",
          "3333:                                      &subti, \"Partition\");",
          "3335:     if (api_version < 5) {",
          "3337:         offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset,",
          "3338:                                       &topic_start, &topic_len);",
          "3339:     }",
          "3342:     partition = (gint32) tvb_get_ntohl(tvb, offset);",
          "3343:     proto_tree_add_item(subtree, hf_kafka_partition_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3344:     offset += 4;",
          "3347:     proto_tree_add_item(subtree, hf_kafka_controller_epoch, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3348:     offset += 4;",
          "3351:     proto_tree_add_item(subtree, hf_kafka_leader_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3352:     offset += 4;",
          "3355:     proto_tree_add_item(subtree, hf_kafka_leader_epoch, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3356:     offset += 4;",
          "3359:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1,",
          "3360:                                         ett_kafka_isrs,",
          "3361:                                         &subsubti, \"ISRs\");",
          "3362:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "3363:                                  &dissect_kafka_update_metadata_request_isr);",
          "3364:     proto_item_set_end(subsubti, tvb, offset);",
          "3367:     proto_tree_add_item(subtree, hf_kafka_zk_version, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3368:     offset += 4;",
          "3371:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1,",
          "3372:                                         ett_kafka_replicas,",
          "3373:                                         &subsubti, \"Replicas\");",
          "3374:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "3375:                                  &dissect_kafka_update_metadata_request_replica);",
          "3376:     proto_item_set_end(subsubti, tvb, offset);",
          "3378:     proto_item_set_end(subti, tvb, offset);",
          "3380:     if (api_version >= 5) {",
          "3381:         proto_item_append_text(subti, \" (Partition-ID=%u)\",",
          "3382:                                partition);",
          "3383:     } else {",
          "3384:         proto_item_append_text(subti, \" (Topic=%s, Partition-ID=%u)\",",
          "3385:                                tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "3386:                                                   topic_start, topic_len, ENC_UTF_8|ENC_NA),",
          "3387:                                partition);",
          "3388:     }",
          "3389:     return offset;",
          "3390: }",
          "3392: static int",
          "3393: dissect_kafka_update_metadata_request_topic_state(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "3394:                                                       int offset, kafka_api_version_t api_version)",
          "3395: {",
          "3396:     proto_tree *subtree;",
          "3397:     proto_item *subti;",
          "3398:     int topic_start, topic_len;",
          "3400:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "3401:                                      ett_kafka_topic,",
          "3402:                                      &subti, \"Topic\");",
          "3404:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset,",
          "3405:                                   &topic_start, &topic_len);",
          "3407:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "3408:                                  &dissect_kafka_update_metadata_request_partition_state);",
          "3410:     proto_item_set_end(subti, tvb, offset);",
          "3411:     proto_item_append_text(subti, \" (Topic=%s)\",",
          "3412:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "3413:                                     topic_start, topic_len, ENC_UTF_8|ENC_NA));",
          "3415:     return offset;",
          "3416: }",
          "3418: static int",
          "3419: dissect_kafka_update_metadata_request_end_point(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "3420:                                                 int offset, kafka_api_version_t api_version _U_)",
          "3421: {",
          "3422:     proto_item *subti;",
          "3423:     proto_tree *subtree;",
          "3424:     int host_start, host_len;",
          "3425:     gint32 broker_port;",
          "3426:     gint16 security_protocol_type;",
          "3428:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_broker_end_point,",
          "3429:                                      &subti, \"End Point\");",
          "3432:     broker_port = (gint32) tvb_get_ntohl(tvb, offset);",
          "3433:     proto_tree_add_item(subtree, hf_kafka_broker_port, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3434:     offset += 4;",
          "3437:     offset = dissect_kafka_string(subtree, hf_kafka_broker_host, tvb, pinfo, offset, &host_start, &host_len);",
          "3439:     if (api_version >= 3) {",
          "3441:         offset = dissect_kafka_string(subtree, hf_kafka_listener_name, tvb, pinfo, offset, NULL, NULL);",
          "3442:     }",
          "3445:     security_protocol_type = (gint16) tvb_get_ntohs(tvb, offset);",
          "3446:     proto_tree_add_item(subtree, hf_kafka_broker_security_protocol_type, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "3447:     offset += 2;",
          "3449:     proto_item_set_end(subti, tvb, offset);",
          "3450:     proto_item_append_text(subti, \" (%s://%s:%d)\",",
          "3451:                            val_to_str_const(security_protocol_type,",
          "3452:                                             kafka_security_protocol_types, \"UNKNOWN\"),",
          "3453:                            tvb_get_string_enc(wmem_packet_scope(), tvb, host_start, host_len,",
          "3454:                                               ENC_UTF_8|ENC_NA),",
          "3455:                            broker_port);",
          "3457:     return offset;",
          "3458: }",
          "3460: static int",
          "3461: dissect_kafka_update_metadata_request_live_leader(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "3462:                                                   int offset, kafka_api_version_t api_version)",
          "3463: {",
          "3464:     proto_item *subti;",
          "3465:     proto_tree *subtree;",
          "3466:     gint32 nodeid;",
          "3468:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_broker,",
          "3469:                                      &subti, \"Live Leader\");",
          "3472:     nodeid = (gint32) tvb_get_ntohl(tvb, offset);",
          "3473:     proto_tree_add_item(subtree, hf_kafka_broker_nodeid, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3474:     offset += 4;",
          "3476:     if (api_version == 0) {",
          "3477:         int host_start, host_len;",
          "3478:         gint32 broker_port;",
          "3481:         offset = dissect_kafka_string(subtree, hf_kafka_broker_host, tvb, pinfo, offset, &host_start, &host_len);",
          "3484:         broker_port = (gint32) tvb_get_ntohl(tvb, offset);",
          "3485:         proto_tree_add_item(subtree, hf_kafka_broker_port, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3486:         offset += 4;",
          "3488:         proto_item_append_text(subti, \" (node %u: %s:%u)\",",
          "3489:                                nodeid,",
          "3490:                                tvb_get_string_enc(wmem_packet_scope(), tvb, host_start, host_len,",
          "3491:                                                   ENC_UTF_8|ENC_NA),",
          "3492:                                broker_port);",
          "3493:     } else if (api_version >= 1) {",
          "3495:         offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "3496:                                      &dissect_kafka_update_metadata_request_end_point);",
          "3498:         if (api_version >= 2) {",
          "3500:             offset = dissect_kafka_string(subtree, hf_kafka_rack, tvb, pinfo, offset, NULL, NULL);",
          "3501:         }",
          "3503:         proto_item_append_text(subti, \" (node %d)\",",
          "3504:                                nodeid);",
          "3505:     }",
          "3507:     proto_item_set_end(subti, tvb, offset);",
          "3509:     return offset;",
          "3510: }",
          "3512: static int",
          "3513: dissect_kafka_update_metadata_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "3514:                                       kafka_api_version_t api_version)",
          "3515: {",
          "3516:     gint32 controller_id;",
          "3519:     controller_id = (gint32) tvb_get_ntohl(tvb, offset);",
          "3520:     proto_tree_add_item(tree, hf_kafka_controller_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3521:     offset += 4;",
          "3524:     proto_tree_add_item(tree, hf_kafka_controller_epoch, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3525:     offset += 4;",
          "3527:     if (api_version >= 5) {",
          "3529:         proto_tree_add_item(tree, hf_kafka_broker_epoch, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "3530:         offset += 8;",
          "3531:     }",
          "3533:     if (api_version >= 5) {",
          "3535:         offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version,",
          "3536:                                      &dissect_kafka_update_metadata_request_topic_state);",
          "3537:     } else {",
          "3539:         offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version,",
          "3540:                                      &dissect_kafka_update_metadata_request_partition_state);",
          "3541:     }",
          "3544:     offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version,",
          "3545:                                  &dissect_kafka_update_metadata_request_live_leader);",
          "3547:     col_append_fstr(pinfo->cinfo, COL_INFO, \" (Controller-ID=%d)\", controller_id);",
          "3549:     return offset;",
          "3550: }",
          "3552: static int",
          "3553: dissect_kafka_update_metadata_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "3554:                                        kafka_api_version_t api_version _U_)",
          "3555: {",
          "3557:     offset = dissect_kafka_error(tvb, pinfo, tree, offset);",
          "3559:     return offset;",
          "3560: }",
          "3564: static int",
          "3565: dissect_kafka_controlled_shutdown_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "3566:                                           kafka_api_version_t api_version _U_)",
          "3567: {",
          "3568:     gint32 broker_id;",
          "3571:     broker_id = (gint32) tvb_get_ntohl(tvb, offset);",
          "3572:     proto_tree_add_item(tree, hf_kafka_broker_nodeid, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3573:     offset += 4;",
          "3575:     if (api_version >= 2) {",
          "3576:         proto_tree_add_item(tree, hf_kafka_broker_epoch, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "3577:         offset += 8;",
          "3578:     }",
          "3580:     col_append_fstr(pinfo->cinfo, COL_INFO, \" (Broker-ID=%d)\", broker_id);",
          "3582:     return offset;",
          "3583: }",
          "3585: static int",
          "3586: dissect_kafka_controlled_shutdown_response_partition_remaining(tvbuff_t *tvb, packet_info *pinfo,",
          "3587:                                                                proto_tree *tree, int offset,",
          "3588:                                                                kafka_api_version_t api_version _U_)",
          "3589: {",
          "3590:     proto_item *subti;",
          "3591:     proto_tree *subtree;",
          "3592:     int topic_start, topic_len;",
          "3593:     kafka_partition_t partition;",
          "3595:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_partition, &subti,",
          "3596:                                      \"Partition Remaining\");",
          "3599:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset,",
          "3600:                                   &topic_start, &topic_len);",
          "3603:     partition = (gint32) tvb_get_ntohl(tvb, offset);",
          "3604:     proto_tree_add_item(subtree, hf_kafka_partition_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3605:     offset += 4;",
          "3607:     proto_item_set_end(subti, tvb, offset);",
          "3608:     proto_item_append_text(subti, \" (Topic=%s, Partition-ID=%d)\",",
          "3609:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "3610:                                               topic_start, topic_len, ENC_UTF_8|ENC_NA),",
          "3611:                            partition);",
          "3613:     return offset;",
          "3614: }",
          "3616: static int",
          "3617: dissect_kafka_controlled_shutdown_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "3618:                                            kafka_api_version_t api_version)",
          "3619: {",
          "3621:     offset = dissect_kafka_error(tvb, pinfo, tree, offset);",
          "3624:     offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version,",
          "3625:                                  &dissect_kafka_controlled_shutdown_response_partition_remaining);",
          "3627:     return offset;",
          "3628: }",
          "3632: static int",
          "3633: dissect_kafka_offset_commit_request_partition(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "3634:                                               int offset, kafka_api_version_t api_version _U_)",
          "3635: {",
          "3636:     proto_item *subti;",
          "3637:     proto_tree *subtree;",
          "3638:     kafka_partition_t partition_id;",
          "3639:     kafka_offset_t partition_offset;",
          "3641:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_partition, &subti,",
          "3642:                                      \"Partition\");",
          "3645:     partition_id = (gint32) tvb_get_ntohl(tvb, offset);",
          "3646:     proto_tree_add_item(subtree, hf_kafka_partition_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3647:     offset += 4;",
          "3650:     partition_offset = (gint64) tvb_get_ntoh64(tvb, offset);",
          "3651:     proto_tree_add_item(subtree, hf_kafka_offset, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "3652:     offset += 8;",
          "3654:     if (api_version >= 6) {",
          "3655:         proto_tree_add_item(subtree, hf_kafka_leader_epoch, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3656:         offset += 4;",
          "3657:     }",
          "3659:     if (api_version == 1) {",
          "3661:         offset = dissect_kafka_timestamp(tvb, pinfo, subtree, hf_kafka_commit_timestamp, offset);",
          "3662:     }",
          "3665:     offset = dissect_kafka_string(subtree, hf_kafka_metadata, tvb, pinfo, offset, NULL, NULL);",
          "3667:     proto_item_set_end(subti, tvb, offset);",
          "3668:     proto_item_append_text(subti, \" (ID=%u, Offset=%\" G_GINT64_MODIFIER \"i)\",",
          "3669:                            partition_id, partition_offset);",
          "3671:     return offset;",
          "3672: }",
          "3674: static int",
          "3675: dissect_kafka_offset_commit_request_topic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "3676:                                           int offset, kafka_api_version_t api_version)",
          "3677: {",
          "3678:     proto_item *subti;",
          "3679:     proto_tree *subtree;",
          "3680:     int topic_start, topic_len;",
          "3682:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_topic, &subti, \"Topic\");",
          "3685:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset,",
          "3686:                                   &topic_start, &topic_len);",
          "3689:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "3690:                                  &dissect_kafka_offset_commit_request_partition);",
          "3692:     proto_item_set_end(subti, tvb, offset);",
          "3693:     proto_item_append_text(subti, \" (Topic=%s)\",",
          "3694:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "3695:                                               topic_start, topic_len, ENC_UTF_8|ENC_NA));",
          "3697:     return offset;",
          "3698: }",
          "3700: static int",
          "3701: dissect_kafka_offset_commit_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "3702:                                     kafka_api_version_t api_version)",
          "3703: {",
          "3704:     int group_start, group_len;",
          "3707:     offset = dissect_kafka_string(tree, hf_kafka_consumer_group, tvb, pinfo, offset,",
          "3708:                                   &group_start, &group_len);",
          "3710:     if (api_version >= 1) {",
          "3712:         proto_tree_add_item(tree, hf_kafka_generation_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3713:         offset += 4;",
          "3716:         offset = dissect_kafka_string(tree, hf_kafka_member_id, tvb, pinfo, offset, NULL, NULL);",
          "3718:         if (api_version >= 7){",
          "3720:             offset = dissect_kafka_string(tree, hf_kafka_consumer_group_instance, tvb, pinfo, offset, NULL, NULL);",
          "3721:         }",
          "3723:         if (api_version >= 2 && api_version < 5) {",
          "3725:             proto_tree_add_item(tree, hf_kafka_retention_time, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "3726:             offset += 8;",
          "3727:         }",
          "3728:     }",
          "3731:     offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version,",
          "3732:                                  &dissect_kafka_offset_commit_request_topic);",
          "3734:     col_append_fstr(pinfo->cinfo, COL_INFO,",
          "3735:                     \" (Group=%s)\",",
          "3736:                     tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "3737:                                        group_start, group_len, ENC_UTF_8|ENC_NA));",
          "3739:     return offset;",
          "3740: }",
          "3742: static int",
          "3743: dissect_kafka_offset_commit_response_partition_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "3744:                                                         int offset, kafka_api_version_t api_version _U_)",
          "3745: {",
          "3746:     proto_item *subti;",
          "3747:     proto_tree *subtree;",
          "3748:     kafka_partition_t partition;",
          "3749:     kafka_error_t error;",
          "3751:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_partition, &subti,",
          "3752:                                      \"Partition\");",
          "3755:     partition = (gint32) tvb_get_ntohl(tvb, offset);",
          "3756:     proto_tree_add_item(subtree, hf_kafka_partition_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3757:     offset += 4;",
          "3760:     offset = dissect_kafka_error_ret(tvb, pinfo, subtree, offset, &error);",
          "3762:     proto_item_set_end(subti, tvb, offset);",
          "3763:     proto_item_append_text(subti, \" (Partition-ID=%d, Error=%s)\",",
          "3764:                            partition, kafka_error_to_str(error));",
          "3766:     return offset;",
          "3767: }",
          "3769: static int",
          "3770: dissect_kafka_offset_commit_response_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "3771:                                               int offset, kafka_api_version_t api_version)",
          "3772: {",
          "3773:     proto_item *subti;",
          "3774:     proto_tree *subtree;",
          "3775:     int topic_start, topic_len;",
          "3777:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_topic, &subti, \"Topic\");",
          "3780:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset,",
          "3781:                                   &topic_start, &topic_len);",
          "3784:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "3785:                                  &dissect_kafka_offset_commit_response_partition_response);",
          "3787:     proto_item_set_end(subti, tvb, offset);",
          "3788:     proto_item_append_text(subti, \" (Name=%s)\",",
          "3789:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "3790:                                               topic_start, topic_len, ENC_UTF_8|ENC_NA));",
          "3792:     return offset;",
          "3793: }",
          "3795: static int",
          "3796: dissect_kafka_offset_commit_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "3797:                                      kafka_api_version_t api_version)",
          "3798: {",
          "3799:     if (api_version >= 3) {",
          "3800:         offset = dissect_kafka_throttle_time(tvb, pinfo, tree, offset);",
          "3801:     }",
          "3804:     offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version,",
          "3805:                                  &dissect_kafka_offset_commit_response_response);",
          "3807:     return offset;",
          "3808: }",
          "3812: static int",
          "3813: dissect_kafka_find_coordinator_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "3814:                                         kafka_api_version_t api_version _U_)",
          "3815: {",
          "3816:     int group_start, group_len;",
          "3818:     if (api_version == 0) {",
          "3820:         offset = dissect_kafka_string(tree, hf_kafka_consumer_group, tvb, pinfo, offset,",
          "3821:                                       &group_start, &group_len);",
          "3823:         col_append_fstr(pinfo->cinfo, COL_INFO,",
          "3824:                         \" (Group=%s)\",",
          "3825:                         tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "3826:                                            group_start, group_len, ENC_UTF_8|ENC_NA));",
          "3827:     } else {",
          "3829:         offset = dissect_kafka_string(tree, hf_kafka_coordinator_key, tvb, pinfo, offset,",
          "3830:                                       NULL, NULL);",
          "3832:         proto_tree_add_item(tree, hf_kafka_coordinator_type, tvb, offset, 1, ENC_NA);",
          "3833:         offset += 4;",
          "3835:     }",
          "3837:     return offset;",
          "3838: }",
          "3840: static int",
          "3841: dissect_kafka_find_coordinator_response_coordinator(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "3842:                                                      int offset, kafka_api_version_t api_version _U_)",
          "3843: {",
          "3844:     proto_item *subti;",
          "3845:     proto_tree *subtree;",
          "3846:     gint32 node_id;",
          "3847:     int host_start, host_len;",
          "3848:     gint32 port;",
          "3850:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_broker, &subti, \"Coordinator\");",
          "3853:     node_id = (gint32) tvb_get_ntohl(tvb, offset);",
          "3854:     proto_tree_add_item(subtree, hf_kafka_broker_nodeid, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3855:     offset += 4;",
          "3858:     offset = dissect_kafka_string(subtree, hf_kafka_broker_host, tvb, pinfo, offset,",
          "3859:                                   &host_start, &host_len);",
          "3862:     port = (gint32) tvb_get_ntohl(tvb, offset);",
          "3863:     proto_tree_add_item(subtree, hf_kafka_broker_port, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3864:     offset += 4;",
          "3866:     proto_item_set_end(subti, tvb, offset);",
          "3868:     if (node_id >= 0) {",
          "3869:         proto_item_append_text(subti, \" (node %d: %s:%d)\",",
          "3870:                                node_id,",
          "3871:                                tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "3872:                                                   host_start, host_len, ENC_UTF_8|ENC_NA),",
          "3873:                                port);",
          "3874:     } else {",
          "3875:         proto_item_append_text(subti, \" (none)\");",
          "3876:     }",
          "3878:     return offset;",
          "3879: }",
          "3881: static int",
          "3882: dissect_kafka_find_coordinator_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "3883:                                          kafka_api_version_t api_version)",
          "3884: {",
          "3885:     if (api_version >= 1) {",
          "3886:         offset = dissect_kafka_throttle_time(tvb, pinfo, tree, offset);",
          "3887:     }",
          "3890:     offset = dissect_kafka_error(tvb, pinfo, tree, offset);",
          "3892:     if (api_version >= 1) {",
          "3893:         offset = dissect_kafka_string(tree, hf_kafka_error_message, tvb, pinfo, offset,",
          "3894:                                       NULL, NULL);",
          "3895:     }",
          "3898:     offset = dissect_kafka_find_coordinator_response_coordinator(tvb, pinfo, tree, offset, api_version);",
          "3900:     return offset;",
          "3901: }",
          "3905: static int",
          "3906: dissect_kafka_join_group_request_group_protocols(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "3907:                                                  int offset, kafka_api_version_t api_version _U_)",
          "3908: {",
          "3909:     proto_item *subti;",
          "3910:     proto_tree *subtree;",
          "3911:     int protocol_start, protocol_len;",
          "3913:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_group_protocol, &subti,",
          "3914:                                      \"Group Protocol\");",
          "3917:     offset = dissect_kafka_string(subtree, hf_kafka_protocol_name, tvb, pinfo, offset,",
          "3918:                                   &protocol_start, &protocol_len);",
          "3921:     offset = dissect_kafka_bytes(subtree, hf_kafka_protocol_metadata, tvb, pinfo, offset, NULL, NULL);",
          "3923:     proto_item_set_end(subti, tvb, offset);",
          "3924:     proto_item_append_text(subti, \" (Group-ID=%s)\",",
          "3925:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "3926:                                               protocol_start, protocol_len, ENC_UTF_8|ENC_NA));",
          "3928:     return offset;",
          "3929: }",
          "3931: static int",
          "3932: dissect_kafka_join_group_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "3933:                                  kafka_api_version_t api_version)",
          "3934: {",
          "3935:     proto_item *subti;",
          "3936:     proto_tree *subtree;",
          "3937:     int group_start, group_len;",
          "3938:     int member_start, member_len;",
          "3941:     offset = dissect_kafka_string(tree, hf_kafka_consumer_group, tvb, pinfo, offset,",
          "3942:                                   &group_start, &group_len);",
          "3945:     proto_tree_add_item(tree, hf_kafka_session_timeout, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3946:     offset += 4;",
          "3948:     if (api_version > 0) {",
          "3950:         proto_tree_add_item(tree, hf_kafka_rebalance_timeout, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3951:         offset += 4;",
          "3952:     }",
          "3955:     offset = dissect_kafka_string(tree, hf_kafka_member_id, tvb, pinfo, offset,",
          "3956:                                   &member_start, &member_len);",
          "3958:     if (api_version >= 5) {",
          "3960:         offset = dissect_kafka_string(tree, hf_kafka_consumer_group_instance, tvb, pinfo, offset,",
          "3961:                                       NULL, NULL);",
          "3962:     }",
          "3965:     offset = dissect_kafka_string(tree, hf_kafka_protocol_type, tvb, pinfo, offset, NULL, NULL);",
          "3968:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_group_protocols, &subti,",
          "3969:                                      \"Group Protocols\");",
          "3970:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "3971:                                  &dissect_kafka_join_group_request_group_protocols);",
          "3972:     proto_item_set_end(subti, tvb, offset);",
          "3974:     col_append_fstr(pinfo->cinfo, COL_INFO,",
          "3975:                     \" (Group=%s, Member=%s)\",",
          "3976:                     tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "3977:                                        group_start, group_len, ENC_UTF_8|ENC_NA),",
          "3978:                     tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "3979:                                        member_start, member_len, ENC_UTF_8|ENC_NA));",
          "3981:     return offset;",
          "3982: }",
          "3984: static int",
          "3985: dissect_kafka_join_group_response_member(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "3986:                                          int offset, kafka_api_version_t api_version)",
          "3987: {",
          "3988:     proto_item *subti;",
          "3989:     proto_tree *subtree;",
          "3990:     int member_start, member_len;",
          "3992:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_group_member, &subti, \"Member\");",
          "3995:     offset = dissect_kafka_string(subtree, hf_kafka_member_id, tvb, pinfo, offset,",
          "3996:                                   &member_start, &member_len);",
          "3998:     if (api_version >= 5) {",
          "4000:         offset = dissect_kafka_string(subtree, hf_kafka_consumer_group_instance, tvb, pinfo, offset,",
          "4001:                                       NULL, NULL);",
          "4002:     }",
          "4005:     offset = dissect_kafka_bytes(subtree, hf_kafka_member_metadata, tvb, pinfo, offset, NULL, NULL);",
          "4007:     proto_item_set_end(subti, tvb, offset);",
          "4008:     proto_item_append_text(subti, \" (Member=%s)\",",
          "4009:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "4010:                                               member_start, member_len, ENC_UTF_8|ENC_NA));",
          "4012:     return offset;",
          "4013: }",
          "4015: static int",
          "4016: dissect_kafka_join_group_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "4017:                                   kafka_api_version_t api_version)",
          "4018: {",
          "4019:     proto_item *subti;",
          "4020:     proto_tree *subtree;",
          "4021:     int member_start, member_len;",
          "4023:     if (api_version >= 2) {",
          "4024:         offset = dissect_kafka_throttle_time(tvb, pinfo, tree, offset);",
          "4025:     }",
          "4028:     offset = dissect_kafka_error(tvb, pinfo, tree, offset);",
          "4031:     proto_tree_add_item(tree, hf_kafka_generation_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "4032:     offset += 4;",
          "4035:     offset = dissect_kafka_string(tree, hf_kafka_protocol_name, tvb, pinfo, offset, NULL, NULL);",
          "4038:     offset = dissect_kafka_string(tree, hf_kafka_group_leader_id, tvb, pinfo, offset, NULL, NULL);",
          "4041:     offset = dissect_kafka_string(tree, hf_kafka_member_id, tvb, pinfo, offset,",
          "4042:                                   &member_start, &member_len);",
          "4045:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_group_members, &subti, \"Members\");",
          "4046:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "4047:                                  &dissect_kafka_join_group_response_member);",
          "4048:     proto_item_set_end(subti, tvb, offset);",
          "4050:     col_append_fstr(pinfo->cinfo, COL_INFO,",
          "4051:                     \" (Member=%s)\",",
          "4052:                     tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "4053:                                        member_start, member_len, ENC_UTF_8|ENC_NA));",
          "4055:     return offset;",
          "4056: }",
          "4060: static int",
          "4061: dissect_kafka_heartbeat_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "4062:                                 kafka_api_version_t api_version _U_)",
          "4063: {",
          "4064:     int group_start, group_len;",
          "4065:     int member_start, member_len;",
          "4068:     offset = dissect_kafka_string(tree, hf_kafka_consumer_group, tvb, pinfo, offset,",
          "4069:                                   &group_start, &group_len);",
          "4072:     proto_tree_add_item(tree, hf_kafka_generation_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "4073:     offset += 4;",
          "4076:     offset = dissect_kafka_string(tree, hf_kafka_member_id, tvb, pinfo, offset,",
          "4077:                                   &member_start, &member_len);",
          "4079:     if (api_version >= 3) {",
          "4081:         offset = dissect_kafka_string(tree, hf_kafka_consumer_group_instance, tvb, pinfo, offset,",
          "4082:                                       NULL, NULL);",
          "4083:     }",
          "4085:     col_append_fstr(pinfo->cinfo, COL_INFO,",
          "4086:                     \" (Group=%s, Member=%s)\",",
          "4087:                     tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "4088:                                        group_start, group_len, ENC_UTF_8|ENC_NA),",
          "4089:                     tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "4090:                                        member_start, member_len, ENC_UTF_8|ENC_NA));",
          "4092:     return offset;",
          "4093: }",
          "4095: static int",
          "4096: dissect_kafka_heartbeat_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "4097:                                  kafka_api_version_t api_version _U_)",
          "4098: {",
          "4099:     if (api_version >= 1) {",
          "4100:         offset = dissect_kafka_throttle_time(tvb, pinfo, tree, offset);",
          "4101:     }",
          "4104:     offset = dissect_kafka_error(tvb, pinfo, tree, offset);",
          "4106:     return offset;",
          "4107: }",
          "4111: static int",
          "4112: dissect_kafka_leave_group_request_member(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "4113:                                   kafka_api_version_t api_version _U_)",
          "4114: {",
          "4115:     proto_item *subti;",
          "4116:     proto_tree *subtree;",
          "4117:     int member_start, member_len;",
          "4118:     int instance_start, instance_len;",
          "4120:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_group_member, &subti, \"Member\");",
          "4123:     offset = dissect_kafka_string(subtree, hf_kafka_member_id, tvb, pinfo, offset,",
          "4124:                                   &member_start, &member_len);",
          "4127:     offset = dissect_kafka_string(subtree, hf_kafka_consumer_group_instance, tvb, pinfo, offset,",
          "4128:                                   &instance_start, &instance_len);",
          "4130:     proto_item_set_end(subti, tvb, offset);",
          "4131:     proto_item_append_text(subti, \" (Member=%s, Group-Instance=%s)\",",
          "4132:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "4133:                                               member_start, member_len, ENC_UTF_8|ENC_NA),",
          "4134:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "4135:                                               instance_start, instance_len, ENC_UTF_8|ENC_NA)",
          "4136:                            );",
          "4138:     return offset;",
          "4139: }",
          "4141: static int",
          "4142: dissect_kafka_leave_group_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "4143:                                   kafka_api_version_t api_version)",
          "4144: {",
          "4145:     int group_start, group_len;",
          "4146:     int member_start, member_len;",
          "4147:     proto_item *subti;",
          "4148:     proto_tree *subtree;",
          "4151:     offset = dissect_kafka_string(tree, hf_kafka_consumer_group, tvb, pinfo, offset,",
          "4152:                                   &group_start, &group_len);",
          "4154:     if (api_version >= 0 && api_version <= 2) {",
          "4157:         offset = dissect_kafka_string(tree, hf_kafka_member_id, tvb, pinfo, offset,",
          "4158:                                       &member_start, &member_len);",
          "4160:         col_append_fstr(pinfo->cinfo, COL_INFO,",
          "4161:                         \" (Group=%s, Member=%s)\",",
          "4162:                         tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "4163:                                            group_start, group_len, ENC_UTF_8|ENC_NA),",
          "4164:                         tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "4165:                                            member_start, member_len, ENC_UTF_8|ENC_NA));",
          "4167:     } else if (api_version >= 3) {",
          "4170:         subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_group_members, &subti, \"Members\");",
          "4171:         offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "4172:                                      &dissect_kafka_leave_group_request_member);",
          "4173:         proto_item_set_end(subti, tvb, offset);",
          "4175:         col_append_fstr(pinfo->cinfo, COL_INFO,",
          "4176:                         \" (Group=%s)\",",
          "4177:                         tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "4178:                                            group_start, group_len, ENC_UTF_8|ENC_NA));",
          "4180:     }",
          "4182:     return offset;",
          "4183: }",
          "4185: static int",
          "4186: dissect_kafka_leave_group_response_member(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "4187:                                                   kafka_api_version_t api_version _U_)",
          "4188: {",
          "4189:     proto_item *subti;",
          "4190:     proto_tree *subtree;",
          "4191:     int member_start, member_len;",
          "4192:     int instance_start, instance_len;",
          "4194:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_group_member, &subti, \"Member\");",
          "4197:     offset = dissect_kafka_string(subtree, hf_kafka_member_id, tvb, pinfo, offset,",
          "4198:                                   &member_start, &member_len);",
          "4201:     offset = dissect_kafka_string(subtree, hf_kafka_consumer_group_instance, tvb, pinfo, offset,",
          "4202:                                   &instance_start, &instance_len);",
          "4205:     offset = dissect_kafka_error(tvb, pinfo, tree, offset);",
          "4207:     proto_item_set_end(subti, tvb, offset);",
          "4208:     proto_item_append_text(subti, \" (Member=%s, Group-Instance=%s)\",",
          "4209:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "4210:                                               member_start, member_len, ENC_UTF_8|ENC_NA),",
          "4211:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "4212:                                               instance_start, instance_len, ENC_UTF_8|ENC_NA)",
          "4213:                            );",
          "4215:     return offset;",
          "4216: }",
          "4218: static int",
          "4219: dissect_kafka_leave_group_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "4220:                                    kafka_api_version_t api_version _U_)",
          "4221: {",
          "4222:     proto_item *subti;",
          "4223:     proto_tree *subtree;",
          "4225:     if (api_version >= 1) {",
          "4226:         offset = dissect_kafka_throttle_time(tvb, pinfo, tree, offset);",
          "4227:     }",
          "4230:     offset = dissect_kafka_error(tvb, pinfo, tree, offset);",
          "4232:     if (api_version >= 3) {",
          "4235:         subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_group_members, &subti, \"Members\");",
          "4236:         offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "4237:                                      &dissect_kafka_leave_group_response_member);",
          "4238:         proto_item_set_end(subti, tvb, offset);",
          "4240:     }",
          "4243:     return offset;",
          "4244: }",
          "4248: static int",
          "4249: dissect_kafka_sync_group_request_group_assignment(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "4250:                                                   int offset, kafka_api_version_t api_version _U_)",
          "4251: {",
          "4252:     proto_item *subti;",
          "4253:     proto_tree *subtree;",
          "4254:     int member_start, member_len;",
          "4256:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_group_assignment, &subti,",
          "4257:                                      \"Group Assignment\");",
          "4260:     offset = dissect_kafka_string(subtree, hf_kafka_member_id, tvb, pinfo, offset,",
          "4261:                                   &member_start, &member_len);",
          "4264:     offset = dissect_kafka_bytes(subtree, hf_kafka_member_assignment, tvb, pinfo, offset, NULL, NULL);",
          "4266:     proto_item_set_end(subti, tvb, offset);",
          "4267:     proto_item_append_text(subti, \" (Member=%s)\",",
          "4268:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "4269:                                               member_start, member_len, ENC_UTF_8|ENC_NA));",
          "4271:     return offset;",
          "4272: }",
          "4274: static int",
          "4275: dissect_kafka_sync_group_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "4276:                                  kafka_api_version_t api_version)",
          "4277: {",
          "4278:     proto_item *subti;",
          "4279:     proto_tree *subtree;",
          "4280:     int group_start, group_len;",
          "4281:     int member_start, member_len;",
          "4284:     offset = dissect_kafka_string(tree, hf_kafka_consumer_group, tvb, pinfo, offset,",
          "4285:                                   &group_start, &group_len);",
          "4288:     proto_tree_add_item(tree, hf_kafka_generation_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "4289:     offset += 4;",
          "4292:     offset = dissect_kafka_string(tree, hf_kafka_member_id, tvb, pinfo, offset,",
          "4293:                                   &member_start, &member_len);",
          "4295:     if (api_version >= 3) {",
          "4297:         offset = dissect_kafka_string(tree, hf_kafka_consumer_group_instance, tvb, pinfo, offset,",
          "4298:                                   NULL, NULL);",
          "4299:     }",
          "4302:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_group_assignments, &subti,",
          "4303:                                      \"Group Assignments\");",
          "4304:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "4305:                                  &dissect_kafka_sync_group_request_group_assignment);",
          "4306:     proto_item_set_end(subti, tvb, offset);",
          "4308:     col_append_fstr(pinfo->cinfo, COL_INFO,",
          "4309:                     \" (Group=%s, Member=%s)\",",
          "4310:                     tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "4311:                                        group_start, group_len, ENC_UTF_8|ENC_NA),",
          "4312:                     tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "4313:                                        member_start, member_len, ENC_UTF_8|ENC_NA));",
          "4315:     return offset;",
          "4316: }",
          "4318: static int",
          "4319: dissect_kafka_sync_group_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "4320:                                   kafka_api_version_t api_version _U_)",
          "4321: {",
          "4322:     if (api_version >= 1) {",
          "4323:         offset = dissect_kafka_throttle_time(tvb, pinfo, tree, offset);",
          "4324:     }",
          "4327:     offset = dissect_kafka_error(tvb, pinfo, tree, offset);",
          "4330:     offset = dissect_kafka_bytes(tree, hf_kafka_member_assignment, tvb, pinfo, offset, NULL, NULL);",
          "4332:     return offset;",
          "4333: }",
          "4337: static int",
          "4338: dissect_kafka_describe_groups_request_group_id(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "4339:                                               int offset, kafka_api_version_t api_version _U_)",
          "4340: {",
          "4342:     offset = dissect_kafka_string(tree, hf_kafka_consumer_group, tvb, pinfo, offset, NULL, NULL);",
          "4344:     return offset;",
          "4345: }",
          "4347: static int",
          "4348: dissect_kafka_describe_groups_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "4349:                                       kafka_api_version_t api_version)",
          "4350: {",
          "4352:     offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version,",
          "4353:                                  &dissect_kafka_describe_groups_request_group_id);",
          "4355:     if (api_version >= 3) {",
          "4356:         proto_tree_add_item(tree, hf_kafka_include_group_authorized_ops, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "4357:         offset += 1;",
          "4358:     }",
          "4360:     return offset;",
          "4361: }",
          "4363: static int",
          "4364: dissect_kafka_describe_groups_response_member(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "4365:                                               kafka_api_version_t api_version _U_)",
          "4366: {",
          "4367:     proto_item *subti;",
          "4368:     proto_tree *subtree;",
          "4369:     int member_start, member_len;",
          "4370:     int instance_start, instance_len;",
          "4372:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_group_member, &subti, \"Member\");",
          "4375:     offset = dissect_kafka_string(subtree, hf_kafka_member_id, tvb, pinfo, offset,",
          "4376:                                   &member_start, &member_len);",
          "4378:     if (api_version >= 4) {",
          "4380:         offset = dissect_kafka_string(subtree, hf_kafka_consumer_group_instance, tvb, pinfo, offset,",
          "4381:                                       &instance_start, &instance_len);",
          "4382:     }",
          "4385:     offset = dissect_kafka_string(subtree, hf_kafka_client_id, tvb, pinfo, offset, NULL, NULL);",
          "4388:     offset = dissect_kafka_string(subtree, hf_kafka_client_host, tvb, pinfo, offset, NULL, NULL);",
          "4391:     offset = dissect_kafka_bytes(subtree, hf_kafka_member_metadata, tvb, pinfo, offset, NULL, NULL);",
          "4394:     offset = dissect_kafka_bytes(subtree, hf_kafka_member_assignment, tvb, pinfo, offset, NULL, NULL);",
          "4396:     proto_item_set_end(subti, tvb, offset);",
          "4398:     if (api_version < 4) {",
          "4399:         proto_item_append_text(subti, \" (Member=%s)\",",
          "4400:                                tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "4401:                                                   member_start, member_len, ENC_UTF_8|ENC_NA));",
          "4402:     } else {",
          "4403:         proto_item_append_text(subti, \" (Member=%s, Instance=%s)\",",
          "4404:                                tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "4405:                                                   member_start, member_len, ENC_UTF_8|ENC_NA),",
          "4406:                                tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "4407:                                                   instance_start, instance_len, ENC_UTF_8|ENC_NA));",
          "4408:     }",
          "4409:     return offset;",
          "4410: }",
          "4412: static int",
          "4413: dissect_kafka_describe_groups_response_group(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "4414:                                              kafka_api_version_t api_version)",
          "4415: {",
          "4416:     proto_item *subti, *subsubti;",
          "4417:     proto_tree *subtree, *subsubtree;",
          "4418:     int group_start, group_len;",
          "4420:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_group, &subti, \"Group\");",
          "4423:     offset = dissect_kafka_error(tvb, pinfo, subtree, offset);",
          "4426:     offset = dissect_kafka_string(subtree, hf_kafka_consumer_group, tvb, pinfo, offset,",
          "4427:                                   &group_start, &group_len);",
          "4430:     offset = dissect_kafka_string(subtree, hf_kafka_group_state, tvb, pinfo, offset, NULL, NULL);",
          "4433:     offset = dissect_kafka_string(subtree, hf_kafka_protocol_type, tvb, pinfo, offset, NULL, NULL);",
          "4436:     offset = dissect_kafka_string(subtree, hf_kafka_protocol_name, tvb, pinfo, offset, NULL, NULL);",
          "4439:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1, ett_kafka_group_members,",
          "4440:                                         &subsubti, \"Members\");",
          "4441:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "4442:                                  &dissect_kafka_describe_groups_response_member);",
          "4443:     proto_item_set_end(subsubti, tvb, offset);",
          "4445:     if (api_version >= 3) {",
          "4446:         proto_tree_add_item(subtree, hf_kafka_group_authorized_ops, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "4447:         offset += 4;",
          "4448:     }",
          "4450:     proto_item_set_end(subti, tvb, offset);",
          "4451:     proto_item_append_text(subti, \" (Group=%s)\",",
          "4452:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "4453:                                               group_start, group_len, ENC_UTF_8|ENC_NA));",
          "4455:     return offset;",
          "4456: }",
          "4458: static int",
          "4459: dissect_kafka_describe_groups_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "4460:                                        kafka_api_version_t api_version)",
          "4461: {",
          "4462:     if (api_version >= 1) {",
          "4463:         offset = dissect_kafka_throttle_time(tvb, pinfo, tree, offset);",
          "4464:     }",
          "4467:     offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version,",
          "4468:                                  &dissect_kafka_describe_groups_response_group);",
          "4470:     return offset;",
          "4471: }",
          "4475: static int",
          "4476: dissect_kafka_list_groups_request(tvbuff_t *tvb _U_, packet_info *pinfo _U_, proto_tree *tree _U_, int offset,",
          "4477:                                   kafka_api_version_t api_version _U_)",
          "4478: {",
          "4479:     return offset;",
          "4480: }",
          "4482: static int",
          "4483: dissect_kafka_list_groups_response_group(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "4484:                                          kafka_api_version_t api_version _U_)",
          "4485: {",
          "4486:     proto_item *subti;",
          "4487:     proto_tree *subtree;",
          "4488:     int group_start, group_len;",
          "4489:     int protocol_type_start, protocol_type_len;",
          "4491:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_group, &subti, \"Group\");",
          "4494:     offset = dissect_kafka_string(subtree, hf_kafka_consumer_group, tvb, pinfo, offset,",
          "4495:                                   &group_start, &group_len);",
          "4498:     offset = dissect_kafka_string(subtree, hf_kafka_protocol_type, tvb, pinfo, offset,",
          "4499:                                   &protocol_type_start, &protocol_type_len);",
          "4501:     proto_item_set_end(subti, tvb, offset);",
          "4502:     proto_item_append_text(subti, \" (Group-ID=%s, Protocol-Type=%s)\",",
          "4503:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "4504:                                               group_start, group_len, ENC_UTF_8|ENC_NA),",
          "4505:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "4506:                                               protocol_type_start, protocol_type_len, ENC_UTF_8|ENC_NA));",
          "4508:     return offset;",
          "4509: }",
          "4511: static int",
          "4512: dissect_kafka_list_groups_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "4513:                                    kafka_api_version_t api_version)",
          "4514: {",
          "4515:     if (api_version >= 1) {",
          "4516:         offset = dissect_kafka_throttle_time(tvb, pinfo, tree, offset);",
          "4517:     }",
          "4520:     offset = dissect_kafka_error(tvb, pinfo, tree, offset);",
          "4523:     offset = dissect_kafka_array(tree, tvb, pinfo, offset, api_version,",
          "4524:                                  &dissect_kafka_list_groups_response_group);",
          "4526:     return offset;",
          "4527: }",
          "4531: static int",
          "4532: dissect_kafka_sasl_handshake_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "4533:                                      kafka_api_version_t api_version _U_)",
          "4534: {",
          "4536:     offset = dissect_kafka_string(tree, hf_kafka_sasl_mechanism, tvb, pinfo, offset, NULL, NULL);",
          "4538:     return offset;",
          "4539: }",
          "4541: static int",
          "4542: dissect_kafka_sasl_handshake_response_enabled_mechanism(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "4543:                                                         int offset, kafka_api_version_t api_version _U_)",
          "4544: {",
          "4546:     offset = dissect_kafka_string(tree, hf_kafka_sasl_mechanism, tvb, pinfo, offset, NULL, NULL);",
          "4548:     return offset;",
          "4549: }",
          "4551: static int",
          "4552: dissect_kafka_sasl_handshake_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "4553:                                       kafka_api_version_t api_version)",
          "4554: {",
          "4555:     proto_item *subti;",
          "4556:     proto_tree *subtree;",
          "4559:     offset = dissect_kafka_error(tvb, pinfo, tree, offset);",
          "4562:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "4563:                                      ett_kafka_sasl_enabled_mechanisms,",
          "4564:                                      &subti, \"Enabled SASL Mechanisms\");",
          "4565:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "4566:                                  &dissect_kafka_sasl_handshake_response_enabled_mechanism);",
          "4567:     proto_item_set_end(subti, tvb, offset);",
          "4569:     return offset;",
          "4570: }",
          "4574: static int",
          "4575: dissect_kafka_create_topics_request_replica(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "4576:                                             int offset, kafka_api_version_t api_version _U_)",
          "4577: {",
          "4579:     proto_tree_add_item(tree, hf_kafka_replica, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "4580:     offset += 4;",
          "4582:     return offset;",
          "4583: }",
          "4585: static int",
          "4586: dissect_kafka_create_topics_request_replica_assignment(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "4587:                                                        int offset, kafka_api_version_t api_version _U_)",
          "4588: {",
          "4589:     proto_item *subti;",
          "4590:     proto_tree *subtree;",
          "4591:     kafka_partition_t partition;",
          "4593:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "4594:                                      ett_kafka_replica_assignment,",
          "4595:                                      &subti, \"Replica Assignment\");",
          "4598:     partition = (gint32) tvb_get_ntohl(tvb, offset);",
          "4599:     proto_tree_add_item(subtree, hf_kafka_partition_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "4600:     offset += 4;",
          "4603:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "4604:                                  &dissect_kafka_create_topics_request_replica);",
          "4606:     proto_item_set_end(subti, tvb, offset);",
          "4607:     proto_item_append_text(subti, \" (Partition-ID=%d)\",",
          "4608:                            partition);",
          "4610:     return offset;",
          "4611: }",
          "4613: static int",
          "4614: dissect_kafka_create_topics_request_config(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "4615:                                            int offset, kafka_api_version_t api_version _U_)",
          "4616: {",
          "4617:     proto_item *subti;",
          "4618:     proto_tree *subtree;",
          "4619:     int key_start, key_len;",
          "4620:     int val_start, val_len;",
          "4622:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "4623:                                      ett_kafka_config,",
          "4624:                                      &subti, \"Config\");",
          "4627:     offset = dissect_kafka_string(subtree, hf_kafka_config_key, tvb, pinfo, offset, &key_start, &key_len);",
          "4630:     offset = dissect_kafka_string(subtree, hf_kafka_config_value, tvb, pinfo, offset, &val_start, &val_len);",
          "4632:     proto_item_set_end(subti, tvb, offset);",
          "4633:     proto_item_append_text(subti, \" (Key=%s, Value=%s)\",",
          "4634:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "4635:                                               key_start, key_len, ENC_UTF_8|ENC_NA),",
          "4636:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "4637:                                               val_start, val_len, ENC_UTF_8|ENC_NA));",
          "4639:     return offset;",
          "4640: }",
          "4642: static int",
          "4643: dissect_kafka_create_topics_request_create_topic_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "4644:                                                          int offset, kafka_api_version_t api_version)",
          "4645: {",
          "4646:     proto_item *subti, *subsubti;",
          "4647:     proto_tree *subtree, *subsubtree;",
          "4648:     int topic_start, topic_len;",
          "4650:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "4651:                                      ett_kafka_topic,",
          "4652:                                      &subti, \"Create Topic Request\");",
          "4655:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, &topic_start, &topic_len);",
          "4658:     proto_tree_add_item(subtree, hf_kafka_num_partitions, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "4659:     offset += 4;",
          "4662:     proto_tree_add_item(subtree, hf_kafka_replication_factor, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "4663:     offset += 2;",
          "4666:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1,",
          "4667:                                         ett_kafka_replica_assignment,",
          "4668:                                         &subsubti, \"Replica Assignments\");",
          "4669:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "4670:                                  &dissect_kafka_create_topics_request_replica_assignment);",
          "4671:     proto_item_set_end(subsubti, tvb, offset);",
          "4674:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1,",
          "4675:                                         ett_kafka_config,",
          "4676:                                         &subsubti, \"Configs\");",
          "4677:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "4678:                                  &dissect_kafka_create_topics_request_config);",
          "4679:     proto_item_set_end(subsubti, tvb, offset);",
          "4681:     proto_item_set_end(subti, tvb, offset);",
          "4682:     proto_item_append_text(subti, \" (Topic=%s)\",",
          "4683:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "4684:                                               topic_start, topic_len, ENC_UTF_8|ENC_NA));",
          "4686:     return offset;",
          "4687: }",
          "4689: static int",
          "4690: dissect_kafka_create_topics_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "4691:                                     kafka_api_version_t api_version)",
          "4692: {",
          "4693:     proto_item *subti;",
          "4694:     proto_tree *subtree;",
          "4697:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "4698:                                      ett_kafka_topics,",
          "4699:                                      &subti, \"Create Topic Requests\");",
          "4700:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "4701:                                  &dissect_kafka_create_topics_request_create_topic_request);",
          "4702:     proto_item_set_end(subti, tvb, offset);",
          "4705:     proto_tree_add_item(tree, hf_kafka_timeout, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "4706:     offset += 4;",
          "4708:     if (api_version >= 1) {",
          "4710:         proto_tree_add_item(tree, hf_kafka_validate_only, tvb, offset, 1, ENC_NA);",
          "4711:         offset += 1;",
          "4712:     }",
          "4714:     return offset;",
          "4715: }",
          "4717: static int",
          "4718: dissect_kafka_create_topics_response_topic_error_code(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "4719:                                                       int offset, kafka_api_version_t api_version _U_)",
          "4720: {",
          "4721:     proto_item *subti;",
          "4722:     proto_tree *subtree;",
          "4723:     int topic_start, topic_len;",
          "4724:     kafka_error_t error;",
          "4726:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "4727:                                      ett_kafka_topic,",
          "4728:                                      &subti, \"Topic Error Code\");",
          "4731:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, &topic_start, &topic_len);",
          "4734:     offset = dissect_kafka_error_ret(tvb, pinfo, subtree, offset, &error);",
          "4736:     proto_item_set_end(subti, tvb, offset);",
          "4737:     proto_item_append_text(subti, \" (Topic=%s, Error=%s)\",",
          "4738:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "4739:                                               topic_start, topic_len, ENC_UTF_8|ENC_NA),",
          "4740:                            kafka_error_to_str(error));",
          "4742:     return offset;",
          "4743: }",
          "4745: static int",
          "4746: dissect_kafka_create_topics_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "4747:                                      kafka_api_version_t api_version)",
          "4748: {",
          "4749:     proto_item *subti;",
          "4750:     proto_tree *subtree;",
          "4752:     if (api_version >= 2) {",
          "4753:         offset = dissect_kafka_throttle_time(tvb, pinfo, tree, offset);",
          "4754:     }",
          "4757:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "4758:                                      ett_kafka_topics,",
          "4759:                                      &subti, \"Topic Error Codes\");",
          "4760:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "4761:                                  &dissect_kafka_create_topics_response_topic_error_code);",
          "4762:     proto_item_set_end(subti, tvb, offset);",
          "4764:     return offset;",
          "4765: }",
          "4769: static int",
          "4770: dissect_kafka_delete_topics_request_topic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "4771:                                           int offset, kafka_api_version_t api_version _U_)",
          "4772: {",
          "4774:     offset = dissect_kafka_string(tree, hf_kafka_topic_name, tvb, pinfo, offset, NULL, NULL);",
          "4776:     return offset;",
          "4777: }",
          "4779: static int",
          "4780: dissect_kafka_delete_topics_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "4781:                                     kafka_api_version_t api_version)",
          "4782: {",
          "4783:     proto_item *subti;",
          "4784:     proto_tree *subtree;",
          "4787:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "4788:                                      ett_kafka_topics,",
          "4789:                                      &subti, \"Topics\");",
          "4790:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "4791:                                  &dissect_kafka_delete_topics_request_topic);",
          "4792:     proto_item_set_end(subti, tvb, offset);",
          "4795:     proto_tree_add_item(tree, hf_kafka_timeout, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "4796:     offset += 4;",
          "4798:     return offset;",
          "4799: }",
          "4801: static int",
          "4802: dissect_kafka_delete_topics_response_topic_error_code(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "4803:                                                       int offset, kafka_api_version_t api_version _U_)",
          "4804: {",
          "4805:     proto_item *subti;",
          "4806:     proto_tree *subtree;",
          "4807:     int topic_start, topic_len;",
          "4808:     kafka_error_t error;",
          "4810:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "4811:                                      ett_kafka_topic,",
          "4812:                                      &subti, \"Topic Error Code\");",
          "4815:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, &topic_start, &topic_len);",
          "4818:     offset = dissect_kafka_error_ret(tvb, pinfo, subtree, offset, &error);",
          "4820:     proto_item_set_end(subti, tvb, offset);",
          "4821:     proto_item_append_text(subti, \" (Topic=%s, Error=%s)\",",
          "4822:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "4823:                                               topic_start, topic_len, ENC_UTF_8|ENC_NA),",
          "4824:                            kafka_error_to_str(error));",
          "4826:     return offset;",
          "4827: }",
          "4829: static int",
          "4830: dissect_kafka_delete_topics_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "4831:                                      kafka_api_version_t api_version)",
          "4832: {",
          "4833:     proto_item *subti;",
          "4834:     proto_tree *subtree;",
          "4836:     if (api_version >= 3) {",
          "4837:         offset = dissect_kafka_throttle_time(tvb, pinfo, tree, offset);",
          "4838:     }",
          "4841:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "4842:                                      ett_kafka_topics,",
          "4843:                                      &subti, \"Topic Error Codes\");",
          "4844:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "4845:                                  &dissect_kafka_delete_topics_response_topic_error_code);",
          "4846:     proto_item_set_end(subti, tvb, offset);",
          "4848:     return offset;",
          "4849: }",
          "4853: static int",
          "4854: dissect_kafka_delete_records_request_topic_partition(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "4855:                                            int offset, kafka_api_version_t api_version _U_)",
          "4856: {",
          "4857:     guint32 partition_id;",
          "4858:     gint64 partition_offset;",
          "4859:     proto_item *subti;",
          "4860:     proto_tree *subtree;",
          "4862:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_partition, &subti, \"Partition\");",
          "4864:     partition_id = tvb_get_ntohl(tvb, offset);",
          "4865:     proto_tree_add_item(subtree, hf_kafka_partition_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "4866:     offset += 4;",
          "4868:     partition_offset = tvb_get_ntohi64(tvb, offset);",
          "4869:     proto_tree_add_item(subtree, hf_kafka_offset, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "4870:     offset += 8;",
          "4872:     proto_item_set_end(subti, tvb, offset);",
          "4874:     if (partition_offset == -1) {",
          "4875:         proto_item_append_text(subti, \" (ID=%u, Offset=HWM)\", partition_id);",
          "4876:     } else {",
          "4877:         proto_item_append_text(subti, \" (ID=%u, Offset=%\" G_GINT64_MODIFIER \"i)\", partition_id, partition_offset);",
          "4878:     }",
          "4880:     return offset;",
          "4881: }",
          "4883: static int",
          "4884: dissect_kafka_delete_records_request_topic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "4885:                                           int offset, kafka_api_version_t api_version _U_)",
          "4886: {",
          "4887:     int topic_start, topic_len;",
          "4888:     proto_item *subti, *subsubti;",
          "4889:     proto_tree *subtree, *subsubtree;",
          "4891:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_topic, &subti, \"Topic\");",
          "4893:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, &topic_start, &topic_len);",
          "4895:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1, ett_kafka_partitions, &subsubti, \"Partitions\");",
          "4896:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "4897:                                  &dissect_kafka_delete_records_request_topic_partition);",
          "4898:     proto_item_set_end(subsubti, tvb, offset);",
          "4900:     proto_item_set_end(subti, tvb, offset);",
          "4901:     proto_item_append_text(subti, \" (Topic=%s)\",",
          "4902:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "4903:                                               topic_start, topic_len, ENC_UTF_8|ENC_NA));",
          "4905:     return offset;",
          "4906: }",
          "4908: static int",
          "4909: dissect_kafka_delete_records_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "4910:                                     kafka_api_version_t api_version)",
          "4911: {",
          "4912:     proto_item *subti;",
          "4913:     proto_tree *subtree;",
          "4916:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "4917:                                      ett_kafka_topics,",
          "4918:                                      &subti, \"Topics\");",
          "4919:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "4920:                                  &dissect_kafka_delete_records_request_topic);",
          "4921:     proto_item_set_end(subti, tvb, offset);",
          "4924:     proto_tree_add_item(tree, hf_kafka_timeout, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "4925:     offset += 4;",
          "4927:     return offset;",
          "4928: }",
          "4930: static int",
          "4931: dissect_kafka_delete_records_response_topic_partition(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "4932:                                                      int offset, kafka_api_version_t api_version _U_)",
          "4933: {",
          "4934:     guint32 partition_id;",
          "4935:     gint64 partition_offset; // low watermark",
          "4936:     kafka_error_t partition_error_code;",
          "4938:     proto_item *subti;",
          "4939:     proto_tree *subtree;",
          "4941:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_partition, &subti, \"Partition\");",
          "4943:     partition_id = tvb_get_ntohl(tvb, offset);",
          "4944:     proto_tree_add_item(subtree, hf_kafka_partition_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "4945:     offset += 4;",
          "4947:     partition_offset = tvb_get_ntohi64(tvb, offset);",
          "4948:     proto_tree_add_item(subtree, hf_kafka_offset, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "4949:     offset += 8;",
          "4951:     partition_error_code = (kafka_error_t) tvb_get_ntohs(tvb, offset);",
          "4952:     proto_tree_add_item(subtree, hf_kafka_error, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "4953:     offset += 2;",
          "4955:     proto_item_set_end(subti, tvb, offset);",
          "4957:     if (partition_error_code == 0) {",
          "4958:         proto_item_append_text(subti, \" (ID=%u, Offset=%\" G_GINT64_MODIFIER \"i)\", partition_id, partition_offset);",
          "4959:     } else {",
          "4960:         proto_item_append_text(subti, \" (ID=%u, Error=%s)\", partition_id, kafka_error_to_str(partition_error_code));",
          "4961:     }",
          "4963:     return offset;",
          "4964: }",
          "4966: static int",
          "4967: dissect_kafka_delete_records_response_topic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "4968:                                            int offset, kafka_api_version_t api_version _U_)",
          "4969: {",
          "4970:     int topic_start, topic_len;",
          "4971:     proto_item *subti, *subsubti;",
          "4972:     proto_tree *subtree, *subsubtree;",
          "4974:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_topic, &subti, \"Topic\");",
          "4976:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, &topic_start, &topic_len);",
          "4978:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1, ett_kafka_partitions, &subsubti, \"Partitions\");",
          "4979:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "4980:                                  &dissect_kafka_delete_records_response_topic_partition);",
          "4981:     proto_item_set_end(subsubti, tvb, offset);",
          "4983:     proto_item_set_end(subti, tvb, offset);",
          "4984:     proto_item_append_text(subti, \" (Topic=%s)\",",
          "4985:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "4986:                                               topic_start, topic_len, ENC_UTF_8|ENC_NA));",
          "4988:     return offset;",
          "4989: }",
          "4992: static int",
          "4993: dissect_kafka_delete_records_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "4994:                                      kafka_api_version_t api_version)",
          "4995: {",
          "4996:     proto_item *subti;",
          "4997:     proto_tree *subtree;",
          "4999:     offset = dissect_kafka_throttle_time(tvb, pinfo, tree, offset);",
          "5002:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "5003:                                      ett_kafka_topics,",
          "5004:                                      &subti, \"Topics\");",
          "5005:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "5006:                                  &dissect_kafka_delete_records_response_topic);",
          "5008:     proto_item_set_end(subti, tvb, offset);",
          "5010:     return offset;",
          "5011: }",
          "5015: static int",
          "5016: dissect_kafka_init_producer_id_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "5017:                               kafka_api_version_t api_version _U_)",
          "5018: {",
          "5019:     offset = dissect_kafka_string(tree, hf_kafka_transactional_id, tvb, pinfo, offset, NULL, NULL);",
          "5021:     proto_tree_add_item(tree, hf_kafka_transaction_timeout, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "5022:     offset += 4;",
          "5024:     return offset;",
          "5025: }",
          "5028: static int",
          "5029: dissect_kafka_init_producer_id_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "5030:                                kafka_api_version_t api_version _U_)",
          "5031: {",
          "5032:     offset = dissect_kafka_throttle_time(tvb, pinfo, tree, offset);",
          "5034:     offset = dissect_kafka_error(tvb, pinfo, tree, offset);",
          "5036:     proto_tree_add_item(tree, hf_kafka_producer_id, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "5037:     offset += 8;",
          "5039:     proto_tree_add_item(tree, hf_kafka_producer_epoch, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5040:     offset += 2;",
          "5042:     return offset;",
          "5043: }",
          "5047: static int",
          "5048: dissect_kafka_offset_for_leader_epoch_request_topic_partition(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "5049:                                                             int offset, kafka_api_version_t api_version)",
          "5050: {",
          "5051:     guint32 partition_id;",
          "5052:     proto_item *subti;",
          "5053:     proto_tree *subtree;",
          "5055:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_partition, &subti, \"Partition\");",
          "5057:     partition_id = tvb_get_ntohl(tvb, offset);",
          "5058:     proto_tree_add_item(subtree, hf_kafka_partition_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "5060:     if (api_version >= 2) {",
          "5061:         proto_tree_add_item(subtree, hf_kafka_current_leader_epoch, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "5062:     }",
          "5064:     proto_tree_add_item(subtree, hf_kafka_leader_epoch, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "5066:     proto_item_set_end(subti, tvb, offset);",
          "5068:     proto_item_append_text(subti, \" (ID=%u)\", partition_id);",
          "5070:     return offset;",
          "5071: }",
          "5073: static int",
          "5074: dissect_kafka_offset_for_leader_epoch_request_topic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "5075:                                                   int offset, kafka_api_version_t api_version _U_)",
          "5076: {",
          "5077:     int topic_start, topic_len;",
          "5078:     proto_item *subti, *subsubti;",
          "5079:     proto_tree *subtree, *subsubtree;",
          "5081:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_topic, &subti, \"Topic\");",
          "5083:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, &topic_start, &topic_len);",
          "5085:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1, ett_kafka_partitions, &subsubti, \"Partitions\");",
          "5086:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "5087:                                  &dissect_kafka_offset_for_leader_epoch_request_topic_partition);",
          "5088:     proto_item_set_end(subsubti, tvb, offset);",
          "5090:     proto_item_set_end(subti, tvb, offset);",
          "5091:     proto_item_append_text(subti, \" (Name=%s)\",",
          "5092:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "5093:                                               topic_start, topic_len, ENC_UTF_8|ENC_NA));",
          "5095:     return offset;",
          "5096: }",
          "5098: static int",
          "5099: dissect_kafka_offset_for_leader_epoch_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "5100:                                             kafka_api_version_t api_version)",
          "5101: {",
          "5102:     proto_item *subti;",
          "5103:     proto_tree *subtree;",
          "5104:     gint32 replica_id;",
          "5106:     if (api_version >= 3) {",
          "5107:         replica_id = tvb_get_ntohl(tvb, offset);",
          "5108:         subti = proto_tree_add_item(tree, hf_kafka_replica, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "5109:         if (replica_id==-2) {",
          "5110:             proto_item_append_text(subti, \" (debug)\");",
          "5111:         } else if (replica_id==-1) {",
          "5112:             proto_item_append_text(subti, \" (consumer)\");",
          "5113:         }",
          "5114:         offset += 4;",
          "5115:     }",
          "5118:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "5119:                                      ett_kafka_topics,",
          "5120:                                      &subti, \"Topics\");",
          "5121:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "5122:                                  &dissect_kafka_offset_for_leader_epoch_request_topic);",
          "5123:     proto_item_set_end(subti, tvb, offset);",
          "5125:     return offset;",
          "5126: }",
          "5128: static int",
          "5129: dissect_kafka_offset_for_leader_epoch_response_topic_partition(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "5130:                                                              int offset, kafka_api_version_t api_version _U_)",
          "5131: {",
          "5132:     guint32 partition_id;",
          "5133:     kafka_error_t partition_error_code;",
          "5135:     proto_item *subti;",
          "5136:     proto_tree *subtree;",
          "5138:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_partition, &subti, \"Partition\");",
          "5140:     partition_error_code = (kafka_error_t) tvb_get_ntohs(tvb, offset);",
          "5141:     proto_tree_add_item(subtree, hf_kafka_error, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5142:     offset += 2;",
          "5144:     partition_id = tvb_get_ntohl(tvb, offset);",
          "5145:     proto_tree_add_item(subtree, hf_kafka_partition_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "5146:     offset += 4;",
          "5148:     if (api_version >= 1) {",
          "5149:         proto_tree_add_item(subtree, hf_kafka_leader_epoch, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "5150:         offset += 4;",
          "5151:     }",
          "5153:     proto_tree_add_item(subtree, hf_kafka_offset, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "5154:     offset += 8;",
          "5156:     proto_item_set_end(subti, tvb, offset);",
          "5158:     if (partition_error_code == 0) {",
          "5159:         proto_item_append_text(subti, \" (ID=%u)\", partition_id);",
          "5160:     } else {",
          "5161:         proto_item_append_text(subti, \" (ID=%u, Error=%s)\", partition_id, kafka_error_to_str(partition_error_code));",
          "5162:     }",
          "5164:     return offset;",
          "5165: }",
          "5167: static int",
          "5168: dissect_kafka_offset_for_leader_epoch_response_topic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "5169:                                                    int offset, kafka_api_version_t api_version _U_)",
          "5170: {",
          "5171:     int topic_start, topic_len;",
          "5172:     proto_item *subti, *subsubti;",
          "5173:     proto_tree *subtree, *subsubtree;",
          "5175:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_topic, &subti, \"Topic\");",
          "5177:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, &topic_start, &topic_len);",
          "5179:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1, ett_kafka_partitions, &subsubti, \"Partitions\");",
          "5180:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "5181:                                  &dissect_kafka_offset_for_leader_epoch_response_topic_partition);",
          "5182:     proto_item_set_end(subsubti, tvb, offset);",
          "5184:     proto_item_set_end(subti, tvb, offset);",
          "5185:     proto_item_append_text(subti, \" (Name=%s)\",",
          "5186:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "5187:                                               topic_start, topic_len, ENC_UTF_8|ENC_NA));",
          "5189:     return offset;",
          "5190: }",
          "5193: static int",
          "5194: dissect_kafka_offset_for_leader_epoch_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "5195:                                              kafka_api_version_t api_version)",
          "5196: {",
          "5197:     proto_item *subti;",
          "5198:     proto_tree *subtree;",
          "5200:     if (api_version >= 2) {",
          "5201:         offset = dissect_kafka_throttle_time(tvb, pinfo, tree, offset);",
          "5202:     }",
          "5204:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "5205:                                      ett_kafka_topics,",
          "5206:                                      &subti, \"Topics\");",
          "5207:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "5208:                                  &dissect_kafka_offset_for_leader_epoch_response_topic);",
          "5210:     proto_item_set_end(subti, tvb, offset);",
          "5212:     return offset;",
          "5213: }",
          "5217: static int",
          "5218: dissect_kafka_add_partitions_to_txn_request_topic_partition(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "5219:                                                      int offset, kafka_api_version_t api_version _U_)",
          "5220: {",
          "5221:     proto_tree_add_item(tree, hf_kafka_partition_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "5223:     return offset;",
          "5224: }",
          "5226: static int",
          "5227: dissect_kafka_add_partitions_to_txn_request_topic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "5228:                                            int offset, kafka_api_version_t api_version _U_)",
          "5229: {",
          "5230:     int topic_start, topic_len;",
          "5231:     proto_item *subti, *subsubti;",
          "5232:     proto_tree *subtree, *subsubtree;",
          "5234:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_topic, &subti, \"Topic\");",
          "5236:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, &topic_start, &topic_len);",
          "5238:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1, ett_kafka_partitions, &subsubti, \"Partitions\");",
          "5239:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "5240:                                  &dissect_kafka_add_partitions_to_txn_request_topic_partition);",
          "5241:     proto_item_set_end(subsubti, tvb, offset);",
          "5243:     proto_item_set_end(subti, tvb, offset);",
          "5244:     proto_item_append_text(subti, \" (Topic=%s)\",",
          "5245:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "5246:                                               topic_start, topic_len, ENC_UTF_8|ENC_NA));",
          "5248:     return offset;",
          "5249: }",
          "5251: static int",
          "5252: dissect_kafka_add_partitions_to_txn_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "5253:                                      kafka_api_version_t api_version)",
          "5254: {",
          "5255:     proto_item *subti;",
          "5256:     proto_tree *subtree;",
          "5258:     offset = dissect_kafka_string(tree, hf_kafka_transactional_id, tvb, pinfo, offset, NULL, NULL);",
          "5260:     proto_tree_add_item(tree, hf_kafka_producer_id, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "5261:     offset += 8;",
          "5263:     proto_tree_add_item(tree, hf_kafka_producer_epoch, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5264:     offset += 2;",
          "5267:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "5268:                                      ett_kafka_topics,",
          "5269:                                      &subti, \"Topics\");",
          "5270:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "5271:                                  &dissect_kafka_add_partitions_to_txn_request_topic);",
          "5272:     proto_item_set_end(subti, tvb, offset);",
          "5274:     return offset;",
          "5275: }",
          "5277: static int",
          "5278: dissect_kafka_add_partitions_to_txn_response_topic_partition(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "5279:                                                       int offset, kafka_api_version_t api_version _U_)",
          "5280: {",
          "5281:     guint32 partition_id;",
          "5282:     kafka_error_t partition_error_code;",
          "5284:     proto_item *subti;",
          "5285:     proto_tree *subtree;",
          "5287:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_partition, &subti, \"Partition\");",
          "5289:     partition_id = tvb_get_ntohl(tvb, offset);",
          "5290:     proto_tree_add_item(subtree, hf_kafka_partition_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "5291:     offset += 4;",
          "5293:     partition_error_code = (kafka_error_t) tvb_get_ntohs(tvb, offset);",
          "5294:     proto_tree_add_item(subtree, hf_kafka_error, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5295:     offset += 2;",
          "5297:     proto_item_set_end(subti, tvb, offset);",
          "5299:     if (partition_error_code == 0) {",
          "5300:         proto_item_append_text(subti, \" (ID=%u)\", partition_id);",
          "5301:     } else {",
          "5302:         proto_item_append_text(subti, \" (ID=%u, Error=%s)\", partition_id, kafka_error_to_str(partition_error_code));",
          "5303:     }",
          "5305:     return offset;",
          "5306: }",
          "5308: static int",
          "5309: dissect_kafka_add_partitions_to_txn_response_topic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "5310:                                             int offset, kafka_api_version_t api_version _U_)",
          "5311: {",
          "5312:     int topic_start, topic_len;",
          "5313:     proto_item *subti, *subsubti;",
          "5314:     proto_tree *subtree, *subsubtree;",
          "5316:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_topic, &subti, \"Topic\");",
          "5318:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, &topic_start, &topic_len);",
          "5320:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1, ett_kafka_partitions, &subsubti, \"Partitions\");",
          "5321:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "5322:                                  &dissect_kafka_add_partitions_to_txn_response_topic_partition);",
          "5323:     proto_item_set_end(subsubti, tvb, offset);",
          "5325:     proto_item_set_end(subti, tvb, offset);",
          "5326:     proto_item_append_text(subti, \" (Topic=%s)\",",
          "5327:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "5328:                                               topic_start, topic_len, ENC_UTF_8|ENC_NA));",
          "5330:     return offset;",
          "5331: }",
          "5334: static int",
          "5335: dissect_kafka_add_partitions_to_txn_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "5336:                                       kafka_api_version_t api_version)",
          "5337: {",
          "5338:     proto_item *subti;",
          "5339:     proto_tree *subtree;",
          "5341:     offset = dissect_kafka_throttle_time(tvb, pinfo, tree, offset);",
          "5343:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "5344:                                      ett_kafka_topics,",
          "5345:                                      &subti, \"Topics\");",
          "5346:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "5347:                                  &dissect_kafka_add_partitions_to_txn_response_topic);",
          "5349:     proto_item_set_end(subti, tvb, offset);",
          "5351:     return offset;",
          "5352: }",
          "5356: static int",
          "5357: dissect_kafka_add_offsets_to_txn_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "5358:                               kafka_api_version_t api_version _U_)",
          "5359: {",
          "5360:     offset = dissect_kafka_string(tree, hf_kafka_transactional_id, tvb, pinfo, offset, NULL, NULL);",
          "5362:     proto_tree_add_item(tree, hf_kafka_producer_id, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "5363:     offset += 8;",
          "5365:     proto_tree_add_item(tree, hf_kafka_producer_epoch, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5366:     offset += 2;",
          "5368:     offset = dissect_kafka_string(tree, hf_kafka_consumer_group, tvb, pinfo, offset, NULL, NULL);",
          "5375: dissect_kafka_add_offsets_to_txn_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "5376:                                kafka_api_version_t api_version _U_)",
          "5378:     offset = dissect_kafka_throttle_time(tvb, pinfo, tree, offset);",
          "5380:     offset = dissect_kafka_error(tvb, pinfo, tree, offset);",
          "5388: dissect_kafka_end_txn_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "5389:                                             kafka_api_version_t api_version _U_)",
          "5391:     offset = dissect_kafka_string(tree, hf_kafka_transactional_id, tvb, pinfo, offset, NULL, NULL);",
          "5393:     proto_tree_add_item(tree, hf_kafka_producer_id, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "5396:     proto_tree_add_item(tree, hf_kafka_producer_epoch, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5397:     offset += 2;",
          "5399:     proto_tree_add_item(tree, hf_kafka_transaction_result, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "5400:     offset += 1;",
          "5407: dissect_kafka_end_txn_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "5408:                                              kafka_api_version_t api_version _U_)",
          "5410:     offset = dissect_kafka_throttle_time(tvb, pinfo, tree, offset);",
          "5412:     offset = dissect_kafka_error(tvb, pinfo, tree, offset);",
          "5420: dissect_kafka_write_txn_markers_request_partition(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "5421:                                                      int offset, kafka_api_version_t api_version _U_)",
          "5423:     proto_tree_add_item(tree, hf_kafka_partition_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "5424:     offset += 4;",
          "5430: dissect_kafka_write_txn_markers_request_topic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "5431:                                            int offset, kafka_api_version_t api_version _U_)",
          "5433:     int topic_start, topic_len;",
          "5434:     proto_item *subti, *subsubti;",
          "5435:     proto_tree *subtree, *subsubtree;",
          "5437:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_topic, &subti, \"Topic\");",
          "5439:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, &topic_start, &topic_len);",
          "5441:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1, ett_kafka_partitions, &subsubti, \"Partitions\");",
          "5442:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "5443:                                  &dissect_kafka_write_txn_markers_request_partition);",
          "5444:     proto_item_set_end(subsubti, tvb, offset);",
          "5446:     proto_item_set_end(subti, tvb, offset);",
          "5447:     proto_item_append_text(subti, \" (Topic=%s)\",",
          "5448:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "5449:                                               topic_start, topic_len, ENC_UTF_8|ENC_NA));",
          "5455: dissect_kafka_write_txn_markers_request_marker(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "5456:                                      kafka_api_version_t api_version)",
          "5458:     guint64 producer_id;",
          "5459:     proto_item *subti, *subsubti;",
          "5460:     proto_tree *subtree, *subsubtree;",
          "5462:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "5463:                                      ett_kafka_marker,",
          "5464:                                      &subti, \"Marker\");",
          "5466:     producer_id = tvb_get_ntoh64(tvb, offset);",
          "5467:     proto_tree_add_item(subtree, hf_kafka_producer_id, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "5468:     offset += 8;",
          "5470:     proto_tree_add_item(subtree, hf_kafka_producer_epoch, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5473:     proto_tree_add_item(subtree, hf_kafka_transaction_result, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "5474:     offset += 1;",
          "5476:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1,",
          "5477:                                      ett_kafka_topics,",
          "5478:                                      &subsubti, \"Topics\");",
          "5479:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "5480:                                  &dissect_kafka_write_txn_markers_request_topic);",
          "5482:     proto_tree_add_item(subsubtree, hf_kafka_coordinator_epoch, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "5483:     offset += 4;",
          "5485:     proto_item_set_end(subsubti, tvb, offset);",
          "5486:     proto_item_set_end(subti, tvb, offset);",
          "5487:     proto_item_append_text(subti, \" (Producer=%\" G_GINT64_MODIFIER \"u)\", producer_id);",
          "5493: dissect_kafka_write_txn_markers_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "5494:                                                 kafka_api_version_t api_version)",
          "5496:     proto_item *subti;",
          "5497:     proto_tree *subtree;",
          "5500:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "5501:                                      ett_kafka_markers,",
          "5502:                                      &subti, \"Markers\");",
          "5503:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "5504:                                  &dissect_kafka_write_txn_markers_request_marker);",
          "5505:     proto_item_set_end(subti, tvb, offset);",
          "5507:     return offset;",
          "5511: dissect_kafka_write_txn_markers_response_partition(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "5512:                                                       int offset, kafka_api_version_t api_version _U_)",
          "5514:     guint32 partition_id;",
          "5515:     kafka_error_t partition_error_code;",
          "5517:     proto_item *subti;",
          "5518:     proto_tree *subtree;",
          "5520:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_partition, &subti, \"Partition\");",
          "5522:     partition_id = tvb_get_ntohl(tvb, offset);",
          "5523:     proto_tree_add_item(subtree, hf_kafka_partition_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "5524:     offset += 4;",
          "5526:     partition_error_code = (kafka_error_t) tvb_get_ntohs(tvb, offset);",
          "5527:     proto_tree_add_item(subtree, hf_kafka_error, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5528:     offset += 2;",
          "5530:     proto_item_set_end(subti, tvb, offset);",
          "5532:     if (partition_error_code == 0) {",
          "5533:         proto_item_append_text(subti, \" (ID=%u\", partition_id);",
          "5534:     } else {",
          "5535:         proto_item_append_text(subti, \" (ID=%u, Error=%s)\", partition_id, kafka_error_to_str(partition_error_code));",
          "5536:     }",
          "5542: dissect_kafka_write_txn_markers_response_topic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "5543:                                             int offset, kafka_api_version_t api_version _U_)",
          "5545:     int topic_start, topic_len;",
          "5546:     proto_item *subti, *subsubti;",
          "5547:     proto_tree *subtree, *subsubtree;",
          "5549:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_topic, &subti, \"Topic\");",
          "5551:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, &topic_start, &topic_len);",
          "5553:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1, ett_kafka_partitions, &subsubti, \"Partitions\");",
          "5554:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "5555:                                  &dissect_kafka_write_txn_markers_response_partition);",
          "5556:     proto_item_set_end(subsubti, tvb, offset);",
          "5558:     proto_item_set_end(subti, tvb, offset);",
          "5559:     proto_item_append_text(subti, \" (Topic=%s)\",",
          "5560:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "5561:                                               topic_start, topic_len, ENC_UTF_8|ENC_NA));",
          "5567: dissect_kafka_write_txn_markers_response_marker(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "5568:                                                int offset, kafka_api_version_t api_version _U_)",
          "5570:     guint64 producer_id;",
          "5571:     proto_item *subti, *subsubti;",
          "5572:     proto_tree *subtree, *subsubtree;",
          "5574:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_marker, &subti, \"Marker\");",
          "5576:     producer_id = tvb_get_ntoh64(tvb, offset);",
          "5577:     proto_tree_add_item(subtree, hf_kafka_producer_id, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "5578:     offset += 8;",
          "5580:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1, ett_kafka_partitions, &subsubti, \"Topics\");",
          "5581:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "5582:                                  &dissect_kafka_write_txn_markers_response_topic);",
          "5583:     proto_item_set_end(subsubti, tvb, offset);",
          "5585:     proto_item_set_end(subti, tvb, offset);",
          "5586:     proto_item_append_text(subti, \" (Producer=%\" G_GINT64_MODIFIER \"u)\", producer_id);",
          "5588:     return offset;",
          "5592: dissect_kafka_write_txn_markers_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "5593:                                       kafka_api_version_t api_version)",
          "5595:     proto_item *subti;",
          "5596:     proto_tree *subtree;",
          "5598:     offset = dissect_kafka_throttle_time(tvb, pinfo, tree, offset);",
          "5600:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "5601:                                      ett_kafka_markers,",
          "5602:                                      &subti, \"Markers\");",
          "5603:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "5604:                                  &dissect_kafka_write_txn_markers_response_marker);",
          "5606:     proto_item_set_end(subti, tvb, offset);",
          "5608:     return offset;",
          "5614: dissect_kafka_txn_offset_commit_request_partition(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "5615:                                                      int offset, kafka_api_version_t api_version _U_)",
          "5617:     guint32 partition_id;",
          "5618:     gint64 partition_offset;",
          "5619:     proto_item *subti;",
          "5622:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_partition, &subti, \"Partition\");",
          "5624:     partition_id = tvb_get_ntohl(tvb, offset);",
          "5625:     proto_tree_add_item(subtree, hf_kafka_partition_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "5628:     partition_offset = tvb_get_ntohi64(tvb, offset);",
          "5629:     proto_tree_add_item(subtree, hf_kafka_offset, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "5630:     offset += 8;",
          "5632:     if (api_version >= 2) {",
          "5633:         proto_tree_add_item(subtree, hf_kafka_leader_epoch, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "5634:         offset += 4;",
          "5637:     offset = dissect_kafka_string(subtree, hf_kafka_metadata, tvb, pinfo, offset, NULL, NULL);",
          "5638:     proto_item_set_end(subti, tvb, offset);",
          "5640:     proto_item_append_text(subti, \" (ID=%u, Offset=%\" G_GINT64_MODIFIER \"i)\", partition_id, partition_offset);",
          "5646: dissect_kafka_txn_offset_commit_request_topic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "5647:                                            int offset, kafka_api_version_t api_version _U_)",
          "5649:     int topic_start, topic_len;",
          "5650:     proto_item *subti, *subsubti;",
          "5651:     proto_tree *subtree, *subsubtree;",
          "5653:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_topic, &subti, \"Topic\");",
          "5655:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, &topic_start, &topic_len);",
          "5657:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1, ett_kafka_partitions, &subsubti, \"Partitions\");",
          "5658:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "5659:                                  &dissect_kafka_txn_offset_commit_request_partition);",
          "5660:     proto_item_set_end(subsubti, tvb, offset);",
          "5662:     proto_item_set_end(subti, tvb, offset);",
          "5663:     proto_item_append_text(subti, \" (Topic=%s)\",",
          "5664:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "5665:                                               topic_start, topic_len, ENC_UTF_8|ENC_NA));",
          "5667:     return offset;",
          "5671: dissect_kafka_txn_offset_commit_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "5672:                                      kafka_api_version_t api_version)",
          "5674:     proto_item *subti;",
          "5675:     proto_tree *subtree;",
          "5677:     offset = dissect_kafka_string(tree, hf_kafka_transactional_id, tvb, pinfo, offset, NULL, NULL);",
          "5679:     offset = dissect_kafka_string(tree, hf_kafka_consumer_group, tvb, pinfo, offset, NULL, NULL);",
          "5681:     proto_tree_add_item(tree, hf_kafka_producer_id, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "5682:     offset += 8;",
          "5684:     proto_tree_add_item(tree, hf_kafka_producer_epoch, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5685:     offset += 2;",
          "5687:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "5688:                                      ett_kafka_topics,",
          "5689:                                      &subti, \"Topics\");",
          "5690:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "5691:                                  &dissect_kafka_txn_offset_commit_request_topic);",
          "5692:     proto_item_set_end(subti, tvb, offset);",
          "5694:     return offset;",
          "5698: dissect_kafka_txn_offset_commit_response_partition(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "5699:                                                       int offset, kafka_api_version_t api_version _U_)",
          "5701:     guint32 partition_id;",
          "5702:     kafka_error_t partition_error_code;",
          "5704:     proto_item *subti;",
          "5705:     proto_tree *subtree;",
          "5707:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_partition, &subti, \"Partition\");",
          "5709:     partition_id = tvb_get_ntohl(tvb, offset);",
          "5710:     proto_tree_add_item(subtree, hf_kafka_partition_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "5713:     partition_error_code = (kafka_error_t) tvb_get_ntohs(tvb, offset);",
          "5714:     proto_tree_add_item(subtree, hf_kafka_error, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "5715:     offset += 2;",
          "5717:     proto_item_set_end(subti, tvb, offset);",
          "5719:     if (partition_error_code == 0) {",
          "5720:         proto_item_append_text(subti, \" (ID=%u)\", partition_id);",
          "5721:     } else {",
          "5722:         proto_item_append_text(subti, \" (ID=%u, Error=%s)\", partition_id, kafka_error_to_str(partition_error_code));",
          "5723:     }",
          "5729: dissect_kafka_txn_offset_commit_response_topic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "5730:                                             int offset, kafka_api_version_t api_version _U_)",
          "5732:     int topic_start, topic_len;",
          "5733:     proto_item *subti, *subsubti;",
          "5734:     proto_tree *subtree, *subsubtree;",
          "5736:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_topic, &subti, \"Topic\");",
          "5738:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, &topic_start, &topic_len);",
          "5740:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1, ett_kafka_partitions, &subsubti, \"Partitions\");",
          "5741:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "5742:                                  &dissect_kafka_txn_offset_commit_response_partition);",
          "5743:     proto_item_set_end(subsubti, tvb, offset);",
          "5745:     proto_item_set_end(subti, tvb, offset);",
          "5746:     proto_item_append_text(subti, \" (Topic=%s)\",",
          "5747:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "5748:                                               topic_start, topic_len, ENC_UTF_8|ENC_NA));",
          "5755: dissect_kafka_txn_offset_commit_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "5756:                                       kafka_api_version_t api_version)",
          "5758:     proto_item *subti;",
          "5761:     offset = dissect_kafka_throttle_time(tvb, pinfo, tree, offset);",
          "5764:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "5765:                                      ett_kafka_topics,",
          "5766:                                      &subti, \"Topics\");",
          "5767:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "5768:                                  &dissect_kafka_txn_offset_commit_response_topic);",
          "5770:     proto_item_set_end(subti, tvb, offset);",
          "5778: dissect_kafka_describe_acls_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "5779:                                         kafka_api_version_t api_version)",
          "5781:     proto_tree_add_item(tree, hf_kafka_acl_resource_type, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "5782:     offset += 1;",
          "5784:     offset = dissect_kafka_string(tree, hf_kafka_acl_resource_name, tvb, pinfo, offset, NULL, NULL);",
          "5786:     if (api_version >= 1) {",
          "5787:         proto_tree_add_item(tree, hf_kafka_acl_resource_pattern_type, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "5788:         offset += 1;",
          "5789:     }",
          "5791:     offset = dissect_kafka_string(tree, hf_kafka_acl_principal, tvb, pinfo, offset, NULL, NULL);",
          "5793:     offset = dissect_kafka_string(tree, hf_kafka_acl_host, tvb, pinfo, offset, NULL, NULL);",
          "5795:     proto_tree_add_item(tree, hf_kafka_acl_operation, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "5796:     offset += 1;",
          "5798:     proto_tree_add_item(tree, hf_kafka_acl_permission_type, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "5799:     offset += 1;",
          "5805: dissect_kafka_describe_acls_response_resource_acl(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "5806:                                                    int offset, kafka_api_version_t api_version _U_)",
          "5808:     proto_item *subti;",
          "5809:     proto_tree *subtree;",
          "5811:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_acl, &subti, \"ACL\");",
          "5813:     offset = dissect_kafka_string(subtree, hf_kafka_acl_principal, tvb, pinfo, offset, NULL, NULL);",
          "5815:     offset = dissect_kafka_string(subtree, hf_kafka_acl_host, tvb, pinfo, offset, NULL, NULL);",
          "5817:     proto_tree_add_item(subtree, hf_kafka_acl_operation, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "5818:     offset += 1;",
          "5820:     proto_tree_add_item(subtree, hf_kafka_acl_permission_type, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "5821:     offset += 1;",
          "5827: dissect_kafka_describe_acls_response_resource(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "5828:                                                int offset, kafka_api_version_t api_version _U_)",
          "5831:     proto_tree *subtree, *subsubtree;",
          "5833:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_resource, &subti, \"Resource\");",
          "5835:     proto_tree_add_item(subtree, hf_kafka_acl_resource_type, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "5836:     offset += 1;",
          "5838:     offset = dissect_kafka_string(subtree, hf_kafka_acl_resource_name, tvb, pinfo, offset, NULL, NULL);",
          "5840:     if (api_version >= 1) {",
          "5841:         proto_tree_add_item(subtree, hf_kafka_acl_resource_pattern_type, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "5842:         offset += 1;",
          "5843:     }",
          "5845:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1, ett_kafka_acls, &subsubti, \"ACLs\");",
          "5847:                                  &dissect_kafka_describe_acls_response_resource_acl);",
          "5857: dissect_kafka_describe_acls_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "5858:                                          kafka_api_version_t api_version)",
          "5863:     offset = dissect_kafka_throttle_time(tvb, pinfo, tree, offset);",
          "5865:     offset = dissect_kafka_error(tvb, pinfo, tree, offset);",
          "5867:     offset = dissect_kafka_string(tree, hf_kafka_error_message, tvb, pinfo, offset, NULL, NULL);",
          "5869:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "5870:                                      ett_kafka_resources,",
          "5871:                                      &subti, \"Resources\");",
          "5872:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "5873:                                  &dissect_kafka_describe_acls_response_resource);",
          "5883: dissect_kafka_create_acls_request_creation(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "5884:                                                   int offset, kafka_api_version_t api_version _U_)",
          "5886:     proto_item *subti;",
          "5887:     proto_tree *subtree;",
          "5889:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_acl_creation, &subti, \"Creation\");",
          "5891:     proto_tree_add_item(subtree, hf_kafka_acl_resource_type, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "5892:     offset += 1;",
          "5894:     offset = dissect_kafka_string(subtree, hf_kafka_acl_resource_name, tvb, pinfo, offset, NULL, NULL);",
          "5896:     if (api_version >= 1) {",
          "5897:         proto_tree_add_item(subtree, hf_kafka_acl_resource_pattern_type, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "5898:         offset += 1;",
          "5899:     }",
          "5901:     offset = dissect_kafka_string(subtree, hf_kafka_acl_principal, tvb, pinfo, offset, NULL, NULL);",
          "5903:     offset = dissect_kafka_string(subtree, hf_kafka_acl_host, tvb, pinfo, offset, NULL, NULL);",
          "5905:     proto_tree_add_item(subtree, hf_kafka_acl_operation, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "5906:     offset += 1;",
          "5908:     proto_tree_add_item(subtree, hf_kafka_acl_permission_type, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "5909:     offset += 1;",
          "5917: dissect_kafka_create_acls_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "5918:                                         kafka_api_version_t api_version)",
          "5920:     proto_item *subti;",
          "5921:     proto_tree *subtree;",
          "5923:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "5924:                                      ett_kafka_acl_creations,",
          "5925:                                      &subti, \"Creations\");",
          "5926:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "5927:                                  &dissect_kafka_create_acls_request_creation);",
          "5928:     proto_item_set_end(subti, tvb, offset);",
          "5934: dissect_kafka_create_acls_response_creation(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "5935:                                                    int offset, kafka_api_version_t api_version _U_)",
          "5940:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_acl_creation, &subti, \"Creation\");",
          "5942:     offset = dissect_kafka_error(tvb, pinfo, subtree, offset);",
          "5944:     offset = dissect_kafka_string(subtree, hf_kafka_error_message, tvb, pinfo, offset, NULL, NULL);",
          "5950: dissect_kafka_create_acls_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "5951:                                          kafka_api_version_t api_version)",
          "5953:     proto_item *subti;",
          "5954:     proto_tree *subtree;",
          "5956:     offset = dissect_kafka_throttle_time(tvb, pinfo, tree, offset);",
          "5958:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "5959:                                      ett_kafka_acl_creations,",
          "5960:                                      &subti, \"Creations\");",
          "5961:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "5962:                                  &dissect_kafka_create_acls_response_creation);",
          "5964:     proto_item_set_end(subti, tvb, offset);",
          "5972: dissect_kafka_delete_acls_request_filter(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "5973:                                            int offset, kafka_api_version_t api_version _U_)",
          "5978:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_acl_filter, &subti, \"Filter\");",
          "5980:     proto_tree_add_item(subtree, hf_kafka_acl_resource_type, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "5981:     offset += 1;",
          "5983:     offset = dissect_kafka_string(subtree, hf_kafka_acl_resource_name, tvb, pinfo, offset, NULL, NULL);",
          "5985:     if (api_version >= 1) {",
          "5986:         proto_tree_add_item(subtree, hf_kafka_acl_resource_pattern_type, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "5987:         offset += 1;",
          "5988:     }",
          "5990:     offset = dissect_kafka_string(subtree, hf_kafka_acl_principal, tvb, pinfo, offset, NULL, NULL);",
          "5992:     offset = dissect_kafka_string(subtree, hf_kafka_acl_host, tvb, pinfo, offset, NULL, NULL);",
          "5994:     proto_tree_add_item(subtree, hf_kafka_acl_operation, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "5995:     offset += 1;",
          "5997:     proto_tree_add_item(subtree, hf_kafka_acl_permission_type, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "5998:     offset += 1;",
          "6006: dissect_kafka_delete_acls_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "6007:                                   kafka_api_version_t api_version)",
          "6009:     proto_item *subti;",
          "6010:     proto_tree *subtree;",
          "6012:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "6013:                                      ett_kafka_acl_filter,",
          "6014:                                      &subti, \"Filters\");",
          "6015:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "6016:                                  &dissect_kafka_delete_acls_request_filter);",
          "6017:     proto_item_set_end(subti, tvb, offset);",
          "6023: dissect_kafka_delete_acls_response_match(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "6024:                                           int offset, kafka_api_version_t api_version _U_)",
          "6026:     proto_item *subti;",
          "6029:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_acl_filter_match, &subti, \"Match\");",
          "6031:     offset = dissect_kafka_error(tvb, pinfo, subtree, offset);",
          "6033:     offset = dissect_kafka_string(subtree, hf_kafka_error_message, tvb, pinfo, offset, NULL, NULL);",
          "6035:     proto_tree_add_item(subtree, hf_kafka_acl_resource_type, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "6036:     offset += 1;",
          "6038:     offset = dissect_kafka_string(subtree, hf_kafka_acl_resource_name, tvb, pinfo, offset, NULL, NULL);",
          "6040:     if (api_version >= 1) {",
          "6041:         proto_tree_add_item(subtree, hf_kafka_acl_resource_pattern_type, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "6042:         offset += 1;",
          "6045:     offset = dissect_kafka_string(subtree, hf_kafka_acl_principal, tvb, pinfo, offset, NULL, NULL);",
          "6047:     offset = dissect_kafka_string(subtree, hf_kafka_acl_host, tvb, pinfo, offset, NULL, NULL);",
          "6049:     proto_tree_add_item(subtree, hf_kafka_acl_operation, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "6050:     offset += 1;",
          "6052:     proto_tree_add_item(subtree, hf_kafka_acl_permission_type, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "6053:     offset += 1;",
          "6055:     proto_item_set_end(subti, tvb, offset);",
          "6061: dissect_kafka_delete_acls_response_filter(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "6062:                                             int offset, kafka_api_version_t api_version _U_)",
          "6064:     proto_item *subti, *subsubti;",
          "6065:     proto_tree *subtree, *subsubtree;",
          "6067:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_acl_creation, &subti, \"Filter\");",
          "6069:     offset = dissect_kafka_error(tvb, pinfo, subtree, offset);",
          "6071:     offset = dissect_kafka_string(subtree, hf_kafka_error_message, tvb, pinfo, offset, NULL, NULL);",
          "6073:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1,",
          "6074:                                      ett_kafka_acl_filter_matches,",
          "6075:                                      &subsubti, \"Matches\");",
          "6076:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "6077:                                  &dissect_kafka_delete_acls_response_match);",
          "6079:     proto_item_set_end(subsubti, tvb, offset);",
          "6080:     proto_item_set_end(subti, tvb, offset);",
          "6086: dissect_kafka_delete_acls_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "6087:                                    kafka_api_version_t api_version)",
          "6089:     proto_item *subti;",
          "6090:     proto_tree *subtree;",
          "6092:     offset = dissect_kafka_throttle_time(tvb, pinfo, tree, offset);",
          "6094:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "6095:                                      ett_kafka_acl_creations,",
          "6096:                                      &subti, \"Filters\");",
          "6097:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "6098:                                  &dissect_kafka_delete_acls_response_filter);",
          "6100:     proto_item_set_end(subti, tvb, offset);",
          "6102:     return offset;",
          "6103: }",
          "6107: static int",
          "6108: dissect_kafka_describe_config_request_entry(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "6109:                                                int offset, kafka_api_version_t api_version _U_)",
          "6110: {",
          "6111:     offset = dissect_kafka_string(tree, hf_kafka_config_key, tvb, pinfo, offset, NULL, NULL);",
          "6117: dissect_kafka_describe_config_request_resource(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "6118:                                          int offset, kafka_api_version_t api_version _U_)",
          "6120:     proto_item *subti, *subsubti;",
          "6121:     proto_tree *subtree, *subsubtree;",
          "6123:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_resource, &subti, \"Resource\");",
          "6125:     proto_tree_add_item(subtree, hf_kafka_config_resource_type, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "6126:     offset += 1;",
          "6128:     offset = dissect_kafka_string(subtree, hf_kafka_config_resource_name, tvb, pinfo, offset, NULL, NULL);",
          "6130:     subsubtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_config_entries, &subsubti, \"Entries\");",
          "6132:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "6133:                                  &dissect_kafka_describe_config_request_entry);",
          "6135:     proto_item_set_end(subti, tvb, offset);",
          "6141: dissect_kafka_describe_configs_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "6142:                                   kafka_api_version_t api_version)",
          "6144:     proto_item *subti;",
          "6147:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "6148:                                      ett_kafka_resources,",
          "6149:                                      &subti, \"Resources\");",
          "6150:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "6151:                                  &dissect_kafka_describe_config_request_resource);",
          "6153:     if (api_version >= 1) {",
          "6154:         proto_tree_add_item(subtree, hf_kafka_config_include_synonyms, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "6155:         offset += 1;",
          "6156:     }",
          "6158:     proto_item_set_end(subti, tvb, offset);",
          "6160:     return offset;",
          "6161: }",
          "6163: static int",
          "6164: dissect_kafka_describe_configs_response_synonym(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "6165:                                               int offset, kafka_api_version_t api_version _U_)",
          "6166: {",
          "6167:     proto_item *subti;",
          "6168:     proto_tree *subtree;",
          "6169:     int key_start, key_len;",
          "6171:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_config_synonym, &subti, \"Synonym\");",
          "6173:     offset = dissect_kafka_string(subtree, hf_kafka_config_key, tvb, pinfo, offset, &key_start, &key_len);",
          "6174:     offset = dissect_kafka_string(subtree, hf_kafka_config_value, tvb, pinfo, offset, NULL, NULL);",
          "6176:     proto_tree_add_item(subtree, hf_kafka_config_source, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "6177:     offset += 1;",
          "6179:     proto_item_set_end(subti, tvb, offset);",
          "6180:     proto_item_append_text(subti, \" (Key=%s)\",",
          "6181:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "6182:                                               key_start, key_len, ENC_UTF_8|ENC_NA));",
          "6188: dissect_kafka_describe_configs_response_entry(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "6189:                                          int offset, kafka_api_version_t api_version _U_)",
          "6191:     proto_item *subti, *subsubti;",
          "6192:     proto_tree *subtree, *subsubtree;",
          "6193:     int key_start, key_len;",
          "6195:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_config_entry, &subti, \"Entry\");",
          "6197:     offset = dissect_kafka_string(subtree, hf_kafka_config_key, tvb, pinfo, offset, &key_start, &key_len);",
          "6198:     offset = dissect_kafka_string(subtree, hf_kafka_config_value, tvb, pinfo, offset, NULL, NULL);",
          "6200:     proto_tree_add_item(subtree, hf_kafka_config_readonly, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "6201:     offset += 1;",
          "6203:     if (api_version == 0) {",
          "6204:         proto_tree_add_item(subtree, hf_kafka_config_default, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "6205:         offset += 1;",
          "6206:     } else {",
          "6207:         proto_tree_add_item(subtree, hf_kafka_config_source, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "6208:         offset += 1;",
          "6209:     }",
          "6211:     proto_tree_add_item(subtree, hf_kafka_config_sensitive, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "6212:     offset += 1;",
          "6214:     if (api_version >= 1) {",
          "6215:         subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1,",
          "6216:                                             ett_kafka_config_synonyms,",
          "6217:                                             &subsubti, \"Synonyms\");",
          "6218:         offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "6219:                                      &dissect_kafka_describe_configs_response_synonym);",
          "6221:         proto_item_set_end(subsubti, tvb, offset);",
          "6222:     }",
          "6224:     proto_item_set_end(subti, tvb, offset);",
          "6225:     proto_item_append_text(subti, \" (Key=%s)\",",
          "6226:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "6227:                                               key_start, key_len, ENC_UTF_8|ENC_NA));",
          "6233: dissect_kafka_describe_configs_response_resource(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "6234:                                           int offset, kafka_api_version_t api_version _U_)",
          "6236:     proto_item *subti, *subsubti;",
          "6237:     proto_tree *subtree, *subsubtree;",
          "6239:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_resource, &subti, \"Resource\");",
          "6241:     offset = dissect_kafka_error(tvb, pinfo, subtree, offset);",
          "6243:     offset = dissect_kafka_string(subtree, hf_kafka_error_message, tvb, pinfo, offset, NULL, NULL);",
          "6245:     proto_tree_add_item(subtree, hf_kafka_config_resource_type, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "6246:     offset += 1;",
          "6248:     offset = dissect_kafka_string(subtree, hf_kafka_config_resource_name, tvb, pinfo, offset, NULL, NULL);",
          "6250:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1,",
          "6251:                                         ett_kafka_config_entries,",
          "6252:                                         &subsubti, \"Entries\");",
          "6253:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "6254:                                  &dissect_kafka_describe_configs_response_entry);",
          "6256:     proto_item_set_end(subsubti, tvb, offset);",
          "6257:     proto_item_set_end(subti, tvb, offset);",
          "6263: dissect_kafka_describe_configs_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "6264:                                    kafka_api_version_t api_version)",
          "6266:     proto_item *subti;",
          "6269:     offset = dissect_kafka_throttle_time(tvb, pinfo, tree, offset);",
          "6271:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "6272:                                      ett_kafka_resources,",
          "6273:                                      &subti, \"Resources\");",
          "6275:                                  &dissect_kafka_describe_configs_response_resource);",
          "6277:     proto_item_set_end(subti, tvb, offset);",
          "6285: dissect_kafka_alter_config_request_entry(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "6286:                                             int offset, kafka_api_version_t api_version _U_)",
          "6288:     proto_item *subti;",
          "6289:     proto_tree *subtree;",
          "6291:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_config_entry, &subti, \"Entry\");",
          "6293:     offset = dissect_kafka_string(subtree, hf_kafka_config_key, tvb, pinfo, offset, NULL, NULL);",
          "6294:     offset = dissect_kafka_string(subtree, hf_kafka_config_value, tvb, pinfo, offset, NULL, NULL);",
          "6296:     proto_item_set_end(subti, tvb, offset);",
          "6302: dissect_kafka_alter_config_request_resource(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "6303:                                                int offset, kafka_api_version_t api_version _U_)",
          "6305:     proto_item *subti, *subsubti;",
          "6306:     proto_tree *subtree, *subsubtree;",
          "6308:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_resource, &subti, \"Resource\");",
          "6310:     proto_tree_add_item(subtree, hf_kafka_config_resource_type, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "6311:     offset += 1;",
          "6313:     offset = dissect_kafka_string(subtree, hf_kafka_config_resource_name, tvb, pinfo, offset, NULL, NULL);",
          "6315:     subsubtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_config_entries, &subsubti, \"Entries\");",
          "6317:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "6318:                                  &dissect_kafka_alter_config_request_entry);",
          "6320:     proto_item_set_end(subti, tvb, offset);",
          "6326: dissect_kafka_alter_configs_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "6327:                                        kafka_api_version_t api_version)",
          "6329:     proto_item *subti;",
          "6332:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "6333:                                      ett_kafka_resources,",
          "6334:                                      &subti, \"Resources\");",
          "6336:                                  &dissect_kafka_alter_config_request_resource);",
          "6338:     proto_tree_add_item(subtree, hf_kafka_validate_only, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "6339:     offset += 1;",
          "6341:     proto_item_set_end(subti, tvb, offset);",
          "6347: dissect_kafka_alter_configs_response_resource(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "6348:                                                  int offset, kafka_api_version_t api_version _U_)",
          "6350:     proto_item *subti;",
          "6353:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_resource, &subti, \"Resource\");",
          "6355:     offset = dissect_kafka_error(tvb, pinfo, subtree, offset);",
          "6357:     offset = dissect_kafka_string(subtree, hf_kafka_error_message, tvb, pinfo, offset, NULL, NULL);",
          "6359:     proto_tree_add_item(subtree, hf_kafka_config_resource_type, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "6360:     offset += 1;",
          "6362:     offset = dissect_kafka_string(subtree, hf_kafka_config_resource_name, tvb, pinfo, offset, NULL, NULL);",
          "6364:     proto_item_set_end(subti, tvb, offset);",
          "6370: dissect_kafka_alter_configs_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "6371:                                         kafka_api_version_t api_version)",
          "6373:     proto_item *subti;",
          "6376:     offset = dissect_kafka_throttle_time(tvb, pinfo, tree, offset);",
          "6378:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "6379:                                      ett_kafka_resources,",
          "6380:                                      &subti, \"Resources\");",
          "6382:                                  &dissect_kafka_alter_configs_response_resource);",
          "6384:     proto_item_set_end(subti, tvb, offset);",
          "6392: dissect_kafka_alter_replica_log_dirs_request_partition(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "6393:                                          int offset, kafka_api_version_t api_version _U_)",
          "6395:     proto_tree_add_item(tree, hf_kafka_partition_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "6402: dissect_kafka_alter_replica_log_dirs_request_topic(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "6403:                                                  int offset, kafka_api_version_t api_version _U_)",
          "6405:     proto_item *subti, *subsubti;",
          "6406:     proto_tree *subtree, *subsubtree;",
          "6407:     int topic_start, topic_len;",
          "6409:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_resource, &subti, \"Topic\");",
          "6411:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, &topic_start, &topic_len);",
          "6413:     subsubtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_topics, &subsubti, \"Partitions\");",
          "6415:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "6416:                                  &dissect_kafka_alter_replica_log_dirs_request_partition);",
          "6418:     proto_item_set_end(subti, tvb, offset);",
          "6419:     proto_item_append_text(subti, \" (Name=%s)\",",
          "6420:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "6421:                                               topic_start, topic_len, ENC_UTF_8|ENC_NA));",
          "6427: dissect_kafka_alter_replica_log_dirs_request_log_dir(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "6428:                                             int offset, kafka_api_version_t api_version _U_)",
          "6430:     proto_item *subti, *subsubti;",
          "6431:     proto_tree *subtree, *subsubtree;",
          "6433:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_log_dir, &subti, \"Log Directory\");",
          "6435:     offset = dissect_kafka_string(subtree, hf_kafka_log_dir, tvb, pinfo, offset, NULL, NULL);",
          "6437:     subsubtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_topics, &subsubti, \"Topics\");",
          "6439:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "6440:                                  &dissect_kafka_alter_replica_log_dirs_request_topic);",
          "6442:     proto_item_set_end(subti, tvb, offset);",
          "6448: dissect_kafka_alter_replica_log_dirs_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "6449:                                     kafka_api_version_t api_version)",
          "6451:     proto_item *subti;",
          "6454:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "6455:                                      ett_kafka_log_dirs,",
          "6456:                                      &subti, \"Log Directories\");",
          "6457:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "6458:                                  &dissect_kafka_alter_replica_log_dirs_request_log_dir);",
          "6460:     proto_item_set_end(subti, tvb, offset);",
          "6466: dissect_kafka_alter_replica_log_dirs_response_partition(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "6467:                                        int offset, kafka_api_version_t api_version _U_)",
          "6469:     proto_item *subti;",
          "6470:     proto_tree *subtree;",
          "6471:     int partition_id;",
          "6473:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_partition, &subti, \"Partition\");",
          "6475:     partition_id = tvb_get_ntohl(tvb, offset);",
          "6476:     proto_tree_add_item(subtree, hf_kafka_partition_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "6477:     offset += 4;",
          "6479:     offset = dissect_kafka_error(tvb, pinfo, subtree, offset);",
          "6481:     proto_item_append_text(subti, \" (ID=%u)\", partition_id);",
          "6483:     proto_item_set_end(subti, tvb, offset);",
          "6489: dissect_kafka_alter_replica_log_dirs_response_topic(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "6490:                                               int offset, kafka_api_version_t api_version)",
          "6492:     proto_item *subti, *subsubti;",
          "6493:     proto_tree *subtree, *subsubtree;",
          "6494:     int topic_start, topic_len;",
          "6496:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_topic, &subti, \"Topic\");",
          "6498:     offset = dissect_kafka_string(subtree, hf_kafka_log_dir, tvb, pinfo, offset, &topic_start, &topic_len);",
          "6500:     subsubtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_partitions, &subsubti, \"Partition\");",
          "6502:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "6503:                                  &dissect_kafka_alter_replica_log_dirs_response_partition);",
          "6505:     proto_item_set_end(subti, tvb, offset);",
          "6506:     proto_item_append_text(subti, \" (Name=%s)\",",
          "6507:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "6508:                                               topic_start, topic_len, ENC_UTF_8|ENC_NA));",
          "6514: dissect_kafka_alter_replica_log_dirs_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "6515:                                      kafka_api_version_t api_version)",
          "6517:     proto_item *subti;",
          "6518:     proto_tree *subtree;",
          "6520:     offset = dissect_kafka_throttle_time(tvb, pinfo, tree, offset);",
          "6523:                                      ett_kafka_topics,",
          "6524:                                      &subti, \"Topics\");",
          "6525:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "6526:                                  &dissect_kafka_alter_replica_log_dirs_response_topic);",
          "6528:     proto_item_set_end(subti, tvb, offset);",
          "6530:     return offset;",
          "6531: }",
          "6535: static int",
          "6536: dissect_kafka_describe_log_dirs_request_partition(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "6537:                                                        int offset, kafka_api_version_t api_version _U_)",
          "6538: {",
          "6539:     proto_tree_add_item(tree, hf_kafka_partition_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "6542:     return offset;",
          "6543: }",
          "6545: static int",
          "6546: dissect_kafka_describe_log_dirs_request_topic(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "6547:                                                    int offset, kafka_api_version_t api_version _U_)",
          "6548: {",
          "6549:     proto_item *subti, *subsubti;",
          "6550:     proto_tree *subtree, *subsubtree;",
          "6551:     int topic_start, topic_len;",
          "6553:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_resource, &subti, \"Topic\");",
          "6555:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, &topic_start, &topic_len);",
          "6557:     subsubtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_partitions, &subsubti, \"Partitions\");",
          "6560:                                  &dissect_kafka_describe_log_dirs_request_partition);",
          "6563:     proto_item_append_text(subti, \" (Name=%s)\",",
          "6565:                                               topic_start, topic_len, ENC_UTF_8|ENC_NA));",
          "6571: dissect_kafka_describe_log_dirs_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "6572:                                              kafka_api_version_t api_version)",
          "6577:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "6578:                                      ett_kafka_topics,",
          "6579:                                      &subti, \"Topics\");",
          "6580:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "6581:                                  &dissect_kafka_describe_log_dirs_request_topic);",
          "6589: dissect_kafka_describe_log_dirs_response_partition(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "6590:                                                         int offset, kafka_api_version_t api_version _U_)",
          "6595:     int partition_id;",
          "6597:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_partition, &subti, \"Partition\");",
          "6599:     partition_id = tvb_get_ntohl(tvb, offset);",
          "6600:     proto_tree_add_item(subtree, hf_kafka_partition_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "6603:     proto_tree_add_item(subtree, hf_kafka_segment_size, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "6604:     offset += 8;",
          "6606:     proto_tree_add_item(subtree, hf_kafka_offset_lag, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "6607:     offset += 8;",
          "6609:     proto_tree_add_item(subtree, hf_kafka_future, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "6610:     offset += 1;",
          "6612:     proto_item_set_end(subti, tvb, offset);",
          "6613:     proto_item_append_text(subti, \" (ID=%u)\", partition_id);",
          "6615:     return offset;",
          "6616: }",
          "6618: static int",
          "6619: dissect_kafka_describe_log_dirs_response_topic(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "6620:                                                     int offset, kafka_api_version_t api_version)",
          "6621: {",
          "6622:     proto_item *subti, *subsubti;",
          "6623:     proto_tree *subtree, *subsubtree;",
          "6624:     int topic_start, topic_len;",
          "6626:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_topic, &subti, \"Topic\");",
          "6628:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, &topic_start, &topic_len);",
          "6630:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1, ett_kafka_partitions, &subsubti, \"Partitions\");",
          "6632:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "6633:                                  &dissect_kafka_describe_log_dirs_response_partition);",
          "6636:     proto_item_append_text(subti, \" (Name=%s)\",",
          "6637:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "6638:                                               topic_start, topic_len, ENC_UTF_8|ENC_NA));",
          "6644: dissect_kafka_describe_log_dirs_response_log_dir(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "6645:                                                     int offset, kafka_api_version_t api_version)",
          "6647:     proto_item *subti, *subsubti;",
          "6648:     proto_tree *subtree, *subsubtree;",
          "6649:     int dir_start, dir_len;",
          "6651:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_log_dir, &subti, \"Log Directory\");",
          "6653:     offset = dissect_kafka_error(tvb, pinfo, subtree, offset);",
          "6655:     offset = dissect_kafka_string(subtree, hf_kafka_log_dir, tvb, pinfo, offset, &dir_start, &dir_len);",
          "6657:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1, ett_kafka_topics, &subsubti, \"Topics\");",
          "6659:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "6660:                                  &dissect_kafka_describe_log_dirs_response_topic);",
          "6662:     proto_item_set_end(subti, tvb, offset);",
          "6663:     proto_item_append_text(subti, \" (Dir=%s)\",",
          "6664:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "6665:                                               dir_start, dir_len, ENC_UTF_8|ENC_NA));",
          "6671: dissect_kafka_describe_log_dirs_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "6672:                                               kafka_api_version_t api_version)",
          "6674:     proto_item *subti;",
          "6675:     proto_tree *subtree;",
          "6677:     offset = dissect_kafka_throttle_time(tvb, pinfo, tree, offset);",
          "6679:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "6680:                                      ett_kafka_log_dirs,",
          "6681:                                      &subti, \"Log Directories\");",
          "6682:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "6683:                                  &dissect_kafka_describe_log_dirs_response_log_dir);",
          "6685:     proto_item_set_end(subti, tvb, offset);",
          "6693: dissect_kafka_create_partitions_request_broker(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "6694:                                                   int offset, kafka_api_version_t api_version _U_)",
          "6703: dissect_kafka_create_partitions_request_topic(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "6704:                                               int offset, kafka_api_version_t api_version _U_)",
          "6706:     proto_item *subti, *subsubti;",
          "6707:     proto_tree *subtree, *subsubtree;",
          "6710:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_resource, &subti, \"Topic\");",
          "6712:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, &topic_start, &topic_len);",
          "6714:     proto_tree_add_item(subtree, hf_kafka_partition_count, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "6717:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1, ett_kafka_brokers, &subsubti, \"Brokers\");",
          "6719:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "6720:                                  &dissect_kafka_create_partitions_request_broker);",
          "6723:     proto_item_append_text(subti, \" (Name=%s)\",",
          "6725:                                               topic_start, topic_len, ENC_UTF_8|ENC_NA));",
          "6731: dissect_kafka_create_partitions_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "6732:                                         kafka_api_version_t api_version)",
          "6734:     proto_item *subti;",
          "6735:     proto_tree *subtree;",
          "6737:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "6738:                                      ett_kafka_topics,",
          "6739:                                      &subti, \"Topics\");",
          "6741:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "6742:                                  &dissect_kafka_create_partitions_request_topic);",
          "6744:     proto_item_set_end(subti, tvb, offset);",
          "6746:     proto_tree_add_item(tree, hf_kafka_timeout, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "6747:     offset += 4;",
          "6749:     proto_tree_add_item(tree, hf_kafka_validate_only, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "6750:     offset += 1;",
          "6756: dissect_kafka_create_partitions_response_topic(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "6757:                                                int offset, kafka_api_version_t api_version _U_)",
          "6761:     int topic_start, topic_len;",
          "6763:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_topic, &subti, \"Topic\");",
          "6765:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, &topic_start, &topic_len);",
          "6767:     offset = dissect_kafka_error(tvb, pinfo, subtree, offset);",
          "6769:     offset = dissect_kafka_string(subtree, hf_kafka_error_message, tvb, pinfo, offset, NULL, NULL);",
          "6772:     proto_item_append_text(subti, \" (Name=%s)\",",
          "6773:                            tvb_get_string_enc(wmem_packet_scope(), tvb,",
          "6774:                                               topic_start, topic_len, ENC_UTF_8|ENC_NA));",
          "6780: dissect_kafka_create_partitions_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "6781:                                          kafka_api_version_t api_version)",
          "6786:     offset = dissect_kafka_throttle_time(tvb, pinfo, tree, offset);",
          "6788:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "6789:                                      ett_kafka_topics,",
          "6790:                                      &subti, \"Topics\");",
          "6792:                                  &dissect_kafka_create_partitions_response_topic);",
          "6802: dissect_kafka_sasl_authenticate_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "6803:                                          kafka_api_version_t api_version _U_)",
          "6805:     offset = dissect_kafka_bytes(tree, hf_kafka_sasl_auth_bytes, tvb, pinfo, offset, NULL, NULL);",
          "6807:     return offset;",
          "6808: }",
          "6811: static int",
          "6812: dissect_kafka_sasl_authenticate_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "6813:                                           kafka_api_version_t api_version _U_)",
          "6814: {",
          "6815:     offset = dissect_kafka_error(tvb, pinfo, tree, offset);",
          "6817:     offset = dissect_kafka_string(tree, hf_kafka_error_message, tvb, pinfo, offset, NULL, NULL);",
          "6819:     offset = dissect_kafka_bytes(tree, hf_kafka_sasl_auth_bytes, tvb, pinfo, offset, NULL, NULL);",
          "6821:     if (api_version >= 1) {",
          "6822:         proto_tree_add_item(tree, hf_kafka_session_lifetime_ms, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "6823:         offset += 8;",
          "6824:     }",
          "6832: dissect_kafka_create_delegation_token_request_renewer(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "6833:                                               int offset, kafka_api_version_t api_version _U_)",
          "6838:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_renewer, &subti, \"Renewer\");",
          "6840:     offset = dissect_kafka_string(subtree, hf_kafka_token_principal_type, tvb, pinfo, offset, NULL, NULL);",
          "6842:     offset = dissect_kafka_string(subtree, hf_kafka_token_principal_name, tvb, pinfo, offset, NULL, NULL);",
          "6850: dissect_kafka_create_delegation_token_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "6851:                                         kafka_api_version_t api_version)",
          "6856:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "6857:                                      ett_kafka_renewers,",
          "6858:                                      &subti, \"Renewers\");",
          "6861:                                  &dissect_kafka_create_delegation_token_request_renewer);",
          "6865:     proto_tree_add_item(tree, hf_kafka_token_max_life_time, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "6866:     offset += 8;",
          "6872: dissect_kafka_create_delegation_token_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "6873:                                          kafka_api_version_t api_version _U_)",
          "6875:     offset = dissect_kafka_error(tvb, pinfo, tree, offset);",
          "6877:     offset = dissect_kafka_string(tree, hf_kafka_token_principal_type, tvb, pinfo, offset, NULL, NULL);",
          "6878:     offset = dissect_kafka_string(tree, hf_kafka_token_principal_name, tvb, pinfo, offset, NULL, NULL);",
          "6880:     offset = dissect_kafka_timestamp(tvb, pinfo, tree, hf_kafka_token_issue_timestamp, offset);",
          "6881:     offset = dissect_kafka_timestamp(tvb, pinfo, tree, hf_kafka_token_expiry_timestamp, offset);",
          "6882:     offset = dissect_kafka_timestamp(tvb, pinfo, tree, hf_kafka_token_max_timestamp, offset);",
          "6884:     offset = dissect_kafka_string(tree, hf_kafka_token_id, tvb, pinfo, offset, NULL, NULL);",
          "6885:     offset = dissect_kafka_bytes(tree, hf_kafka_token_hmac, tvb, pinfo, offset, NULL, NULL);",
          "6887:     offset = dissect_kafka_throttle_time(tvb, pinfo, tree, offset);",
          "6895: dissect_kafka_renew_delegation_token_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "6896:                                               kafka_api_version_t api_version _U_)",
          "6898:     offset = dissect_kafka_bytes(tree, hf_kafka_token_hmac, tvb, pinfo, offset, NULL, NULL);",
          "6900:     proto_tree_add_item(tree, hf_kafka_token_renew_time, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "6901:     offset += 8;",
          "6907: dissect_kafka_renew_delegation_token_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "6908:                                                kafka_api_version_t api_version _U_)",
          "6910:     offset = dissect_kafka_error(tvb, pinfo, tree, offset);",
          "6911:     offset = dissect_kafka_timestamp(tvb, pinfo, tree, hf_kafka_token_expiry_timestamp, offset);",
          "6912:     offset = dissect_kafka_throttle_time(tvb, pinfo, tree, offset);",
          "6914:     return offset;",
          "6915: }",
          "6919: static int",
          "6920: dissect_kafka_expire_delegation_token_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "6921:                                              kafka_api_version_t api_version _U_)",
          "6922: {",
          "6923:     offset = dissect_kafka_bytes(tree, hf_kafka_token_hmac, tvb, pinfo, offset, NULL, NULL);",
          "6925:     proto_tree_add_item(tree, hf_kafka_token_expiry_time, tvb, offset, 8, ENC_BIG_ENDIAN);",
          "6926:     offset += 8;",
          "6932: dissect_kafka_expire_delegation_token_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "6933:                                               kafka_api_version_t api_version _U_)",
          "6936:     offset = dissect_kafka_timestamp(tvb, pinfo, tree, hf_kafka_token_expiry_timestamp, offset);",
          "6937:     offset = dissect_kafka_throttle_time(tvb, pinfo, tree, offset);",
          "6945: dissect_kafka_describe_delegation_token_request_owner(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "6946:                                                       int offset, kafka_api_version_t api_version _U_)",
          "6951:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_owner, &subti, \"Owner\");",
          "6953:     offset = dissect_kafka_string(subtree, hf_kafka_token_principal_type, tvb, pinfo, offset, NULL, NULL);",
          "6955:     offset = dissect_kafka_string(subtree, hf_kafka_token_principal_name, tvb, pinfo, offset, NULL, NULL);",
          "6963: dissect_kafka_describe_delegation_token_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "6964:                                               kafka_api_version_t api_version _U_)",
          "6969:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "6970:                                      ett_kafka_owners,",
          "6971:                                      &subti, \"Owners\");",
          "6974:                                  &dissect_kafka_describe_delegation_token_request_owner);",
          "6978:     return offset;",
          "6979: }",
          "6981: static int",
          "6982: dissect_kafka_describe_delegation_token_response_renewer(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "6983:                                                      int offset, kafka_api_version_t api_version _U_)",
          "6984: {",
          "6985:     proto_item *subti;",
          "6986:     proto_tree *subtree;",
          "6988:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_renewer, &subti, \"Renewer\");",
          "6990:     offset = dissect_kafka_string(subtree, hf_kafka_token_principal_type, tvb, pinfo, offset, NULL, NULL);",
          "6991:     offset = dissect_kafka_string(subtree, hf_kafka_token_principal_name, tvb, pinfo, offset, NULL, NULL);",
          "6993:     proto_item_set_end(subti, tvb, offset);",
          "6999: dissect_kafka_describe_delegation_token_response_token(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "7000:                                                       int offset, kafka_api_version_t api_version)",
          "7002:     proto_item *subti, *subsubti;",
          "7003:     proto_tree *subtree, *subsubtree;",
          "7005:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_token, &subti, \"Token\");",
          "7007:     offset = dissect_kafka_string(subtree, hf_kafka_token_principal_type, tvb, pinfo, offset, NULL, NULL);",
          "7008:     offset = dissect_kafka_string(subtree, hf_kafka_token_principal_name, tvb, pinfo, offset, NULL, NULL);",
          "7010:     offset = dissect_kafka_timestamp(tvb, pinfo, subtree, hf_kafka_token_issue_timestamp, offset);",
          "7011:     offset = dissect_kafka_timestamp(tvb, pinfo, subtree, hf_kafka_token_expiry_timestamp, offset);",
          "7012:     offset = dissect_kafka_timestamp(tvb, pinfo, subtree, hf_kafka_token_max_timestamp, offset);",
          "7014:     offset = dissect_kafka_string(subtree, hf_kafka_token_id, tvb, pinfo, offset, NULL, NULL);",
          "7015:     offset = dissect_kafka_bytes(subtree, hf_kafka_token_hmac, tvb, pinfo, offset, NULL, NULL);",
          "7018:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1,",
          "7019:                                      ett_kafka_renewers,",
          "7020:                                      &subsubti, \"Renewers\");",
          "7022:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "7023:                                  &dissect_kafka_describe_delegation_token_response_renewer);",
          "7025:     proto_item_set_end(subsubti, tvb, offset);",
          "7033: dissect_kafka_describe_delegation_token_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "7034:                                                kafka_api_version_t api_version _U_)",
          "7041:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "7042:                                      ett_kafka_tokens,",
          "7043:                                      &subti, \"Tokens\");",
          "7046:                                  &dissect_kafka_describe_delegation_token_response_token);",
          "7050:     offset = dissect_kafka_throttle_time(tvb, pinfo, tree, offset);",
          "7058: dissect_kafka_delete_groups_request_group(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "7059:                                                       int offset, kafka_api_version_t api_version _U_)",
          "7061:     offset = dissect_kafka_string(tree, hf_kafka_consumer_group, tvb, pinfo, offset, NULL, NULL);",
          "7063:     return offset;",
          "7064: }",
          "7066: static int",
          "7067: dissect_kafka_delete_groups_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "7068:                                                 kafka_api_version_t api_version _U_)",
          "7069: {",
          "7070:     proto_item *subti;",
          "7071:     proto_tree *subtree;",
          "7073:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "7074:                                      ett_kafka_groups,",
          "7075:                                      &subti, \"Groups\");",
          "7077:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "7078:                                  &dissect_kafka_delete_groups_request_group);",
          "7080:     proto_item_set_end(subti, tvb, offset);",
          "7086: dissect_kafka_delete_groups_response_group(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "7087:                                                          int offset, kafka_api_version_t api_version _U_)",
          "7089:     proto_item *subti;",
          "7090:     proto_tree *subtree;",
          "7092:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_group, &subti, \"Group\");",
          "7094:     offset = dissect_kafka_string(subtree, hf_kafka_consumer_group, tvb, pinfo, offset, NULL, NULL);",
          "7095:     offset = dissect_kafka_error(tvb, pinfo, subtree, offset);",
          "7097:     proto_item_set_end(subti, tvb, offset);",
          "7103: dissect_kafka_delete_groups_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "7104:                                                  kafka_api_version_t api_version _U_)",
          "7106:     proto_item *subti;",
          "7107:     proto_tree *subtree;",
          "7109:     offset = dissect_kafka_throttle_time(tvb, pinfo, tree, offset);",
          "7111:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "7112:                                      ett_kafka_groups,",
          "7113:                                      &subti, \"Groups\");",
          "7115:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "7116:                                  &dissect_kafka_delete_groups_response_group);",
          "7118:     proto_item_set_end(subti, tvb, offset);",
          "7126: dissect_kafka_elect_leaders_request_partition(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "7127:                                           int offset, kafka_api_version_t api_version _U_)",
          "7129:     proto_tree_add_item(tree, hf_kafka_partition_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "7130:     offset += 4;",
          "7136: dissect_kafka_elect_leaders_request_topic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "7137:                                     kafka_api_version_t api_version)",
          "7139:     proto_item *subti, *subsubti;",
          "7140:     proto_tree *subtree, *subsubtree;",
          "7142:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "7143:                                      ett_kafka_topic,",
          "7144:                                      &subti, \"Topic\");",
          "7146:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1,",
          "7147:                                      ett_kafka_partitions,",
          "7148:                                      &subsubti, \"Partitions\");",
          "7150:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "7151:                                  &dissect_kafka_elect_leaders_request_partition);",
          "7153:     proto_item_set_end(subsubti, tvb, offset);",
          "7160: dissect_kafka_elect_leaders_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "7161:                                     kafka_api_version_t api_version)",
          "7166:     if (api_version >= 1) {",
          "7167:         proto_tree_add_item(tree, hf_kafka_election_type, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "7168:         offset += 1;",
          "7169:     }",
          "7171:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "7172:                                      ett_kafka_topics,",
          "7173:                                      &subti, \"Topics\");",
          "7176:                                  &dissect_kafka_elect_leaders_request_topic);",
          "7180:     proto_tree_add_item(tree, hf_kafka_timeout, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "7181:     offset += 4;",
          "7187: dissect_kafka_elect_leaders_response_partition(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "7188:                                                   int offset, kafka_api_version_t api_version _U_)",
          "7190:     proto_tree_add_item(tree, hf_kafka_partition_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "7191:     offset += 4;",
          "7193:     proto_item *subti;",
          "7194:     proto_tree *subtree;",
          "7196:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "7197:                                      ett_kafka_partition,",
          "7198:                                      &subti, \"Partition\");",
          "7200:     proto_tree_add_item(subtree, hf_kafka_partition_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "7201:     offset += 4;",
          "7203:     offset = dissect_kafka_error(tvb, pinfo, subtree, offset);",
          "7205:     offset = dissect_kafka_string(subtree, hf_kafka_error_message, tvb, pinfo, offset, NULL, NULL);",
          "7207:     proto_item_set_end(subti, tvb, offset);",
          "7213: dissect_kafka_elect_leaders_response_topic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "7214:                                               kafka_api_version_t api_version)",
          "7216:     proto_item *subti, *subsubti;",
          "7217:     proto_tree *subtree, *subsubtree;",
          "7219:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "7220:                                      ett_kafka_topic,",
          "7221:                                      &subti, \"Topic\");",
          "7223:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1,",
          "7224:                                         ett_kafka_partitions,",
          "7225:                                         &subsubti, \"Partitions\");",
          "7227:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "7228:                                  &dissect_kafka_elect_leaders_response_partition);",
          "7230:     proto_item_set_end(subsubti, tvb, offset);",
          "7231:     proto_item_set_end(subti, tvb, offset);",
          "7237: dissect_kafka_elect_leaders_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "7238:                                         kafka_api_version_t api_version)",
          "7240:     proto_item *subti;",
          "7241:     proto_tree *subtree;",
          "7243:     offset = dissect_kafka_throttle_time(tvb, pinfo, tree, offset);",
          "7245:     if (api_version >= 1) {",
          "7246:         offset = dissect_kafka_error(tvb, pinfo, tree, offset);",
          "7247:     }",
          "7249:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "7250:                                      ett_kafka_topics,",
          "7251:                                      &subti, \"Topics\");",
          "7253:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "7254:                                  &dissect_kafka_elect_leaders_response_topic);",
          "7256:     proto_item_set_end(subti, tvb, offset);",
          "7264: dissect_kafka_inc_alter_config_request_entry(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "7265:                                          int offset, kafka_api_version_t api_version _U_)",
          "7270:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_config_entry, &subti, \"Entry\");",
          "7272:     offset = dissect_kafka_string(subtree, hf_kafka_config_key, tvb, pinfo, offset, NULL, NULL);",
          "7274:     proto_tree_add_item(subtree, hf_kafka_config_operation, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "7275:     offset += 1;",
          "7277:     offset = dissect_kafka_string(subtree, hf_kafka_config_value, tvb, pinfo, offset, NULL, NULL);",
          "7285: dissect_kafka_inc_alter_config_request_resource(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "7286:                                             int offset, kafka_api_version_t api_version _U_)",
          "7291:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_resource, &subti, \"Resource\");",
          "7293:     proto_tree_add_item(subtree, hf_kafka_config_resource_type, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "7294:     offset += 1;",
          "7296:     offset = dissect_kafka_string(subtree, hf_kafka_config_resource_name, tvb, pinfo, offset, NULL, NULL);",
          "7298:     subsubtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_config_entries, &subsubti, \"Entries\");",
          "7301:                                  &dissect_kafka_inc_alter_config_request_entry);",
          "7309: dissect_kafka_inc_alter_configs_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "7310:                                     kafka_api_version_t api_version)",
          "7312:     proto_item *subti;",
          "7313:     proto_tree *subtree;",
          "7315:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "7316:                                      ett_kafka_resources,",
          "7317:                                      &subti, \"Resources\");",
          "7318:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "7319:                                  &dissect_kafka_inc_alter_config_request_resource);",
          "7321:     proto_tree_add_item(subtree, hf_kafka_validate_only, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "7322:     offset += 1;",
          "7324:     proto_item_set_end(subti, tvb, offset);",
          "7330: dissect_kafka_inc_alter_configs_response_resource(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "7331:                                               int offset, kafka_api_version_t api_version _U_)",
          "7336:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_resource, &subti, \"Resource\");",
          "7338:     offset = dissect_kafka_error(tvb, pinfo, subtree, offset);",
          "7340:     offset = dissect_kafka_string(subtree, hf_kafka_error_message, tvb, pinfo, offset, NULL, NULL);",
          "7342:     proto_tree_add_item(subtree, hf_kafka_config_resource_type, tvb, offset, 1, ENC_BIG_ENDIAN);",
          "7343:     offset += 1;",
          "7345:     offset = dissect_kafka_string(subtree, hf_kafka_config_resource_name, tvb, pinfo, offset, NULL, NULL);",
          "7353: dissect_kafka_inc_alter_configs_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "7354:                                      kafka_api_version_t api_version)",
          "7356:     proto_item *subti;",
          "7357:     proto_tree *subtree;",
          "7359:     offset = dissect_kafka_throttle_time(tvb, pinfo, tree, offset);",
          "7361:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "7362:                                      ett_kafka_resources,",
          "7363:                                      &subti, \"Resources\");",
          "7364:     offset = dissect_kafka_array(subtree, tvb, pinfo, offset, api_version,",
          "7365:                                  &dissect_kafka_inc_alter_configs_response_resource);",
          "7367:     proto_item_set_end(subti, tvb, offset);",
          "7375: dissect_kafka_alter_partition_reassignments_request_replica(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "7376:                                              int offset, kafka_api_version_t api_version _U_)",
          "7378:     proto_tree_add_item(tree, hf_kafka_replica, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "7379:     offset += 4;",
          "7385: dissect_kafka_alter_partition_reassignments_request_partition(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "7386:                                                           int offset, kafka_api_version_t api_version)",
          "7388:     proto_item *subti, *subsubti;",
          "7389:     proto_tree *subtree, *subsubtree;",
          "7390:     kafka_partition_t partition;",
          "7392:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_partition, &subti, \"Partition\");",
          "7394:     offset = dissect_kafka_partition_id_ret(tvb, pinfo, subtree, offset, &partition);",
          "7396:     subsubtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_partitions, &subsubti, \"Replicas\");",
          "7398:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "7399:                                  &dissect_kafka_alter_partition_reassignments_request_replica);",
          "7407: dissect_kafka_alter_partition_reassignments_request_topic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "7408:                                                 int offset, kafka_api_version_t api_version)",
          "7410:     proto_item *subti, *subsubti;",
          "7411:     proto_tree *subtree, *subsubtree;",
          "7413:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_topic, &subti, \"Topic\");",
          "7415:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, NULL, NULL);",
          "7417:     subsubtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_partitions, &subsubti, \"Partitions\");",
          "7419:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "7420:                                  &dissect_kafka_alter_partition_reassignments_request_partition);",
          "7422:     proto_item_set_end(subti, tvb, offset);",
          "7428: dissect_kafka_alter_partition_reassignments_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "7429:                                         kafka_api_version_t api_version)",
          "7434:     proto_tree_add_item(tree, hf_kafka_timeout, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "7437:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1,",
          "7438:                                      ett_kafka_topics,",
          "7439:                                      &subti, \"Topics\");",
          "7441:                                  &dissect_kafka_alter_partition_reassignments_request_topic);",
          "7449: dissect_kafka_alter_partition_reassignments_response_partition(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "7450:                                                               int offset, kafka_api_version_t api_version _U_)",
          "7454:     kafka_partition_t partition;",
          "7456:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_partition, &subti, \"Partition\");",
          "7458:     offset = dissect_kafka_partition_id_ret(tvb, pinfo, subtree, offset, &partition);",
          "7460:     offset = dissect_kafka_error(tvb, pinfo, subtree, offset);",
          "7462:     offset = dissect_kafka_string(subtree, hf_kafka_error_message, tvb, pinfo, offset, NULL, NULL);",
          "7470: dissect_kafka_alter_partition_reassignments_response_topic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "7471:                                                           int offset, kafka_api_version_t api_version)",
          "7476:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_topic, &subti, \"Topic\");",
          "7478:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, NULL, NULL);",
          "7480:     subsubtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_partitions, &subsubti, \"Partitions\");",
          "7483:                                  &dissect_kafka_alter_partition_reassignments_response_partition);",
          "7491: dissect_kafka_alter_partition_reassignments_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "7492:                                                     kafka_api_version_t api_version)",
          "7497:     offset = dissect_kafka_throttle_time(tvb, pinfo, tree, offset);",
          "7499:     offset = dissect_kafka_error(tvb, pinfo, tree, offset);",
          "7501:     offset = dissect_kafka_string(tree, hf_kafka_error_message, tvb, pinfo, offset, NULL, NULL);",
          "7505:                                      &subti, \"Topics\");",
          "7507:                                  &dissect_kafka_alter_partition_reassignments_response_topic);",
          "7511:     return offset;",
          "7512: }",
          "7516: static int",
          "7517: dissect_kafka_list_partition_reassignments_request_partition(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "7518:                                                               int offset, kafka_api_version_t api_version _U_)",
          "7519: {",
          "7520:     proto_tree_add_item(tree, hf_kafka_partition_id, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "7527: dissect_kafka_list_partition_reassignments_request_topic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "7528:                                                           int offset, kafka_api_version_t api_version)",
          "7530:     proto_item *subti, *subsubti;",
          "7531:     proto_tree *subtree, *subsubtree;",
          "7533:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_topic, &subti, \"Topic\");",
          "7535:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, NULL, NULL);",
          "7537:     subsubtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_partitions, &subsubti, \"Partitions\");",
          "7539:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "7540:                                  &dissect_kafka_list_partition_reassignments_request_partition);",
          "7548: dissect_kafka_list_partition_reassignments_request(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "7549:                                                     kafka_api_version_t api_version)",
          "7554:     proto_tree_add_item(tree, hf_kafka_timeout, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "7555:     offset += 4;",
          "7559:                                      &subti, \"Topics\");",
          "7561:                                  &dissect_kafka_list_partition_reassignments_request_topic);",
          "7569: dissect_kafka_list_partition_reassignments_response_replica(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree,",
          "7570:                                                              int offset, kafka_api_version_t api_version _U_)",
          "7572:     proto_tree_add_item(tree, hf_kafka_replica, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "7573:     offset += 4;",
          "7579: dissect_kafka_list_partition_reassignments_response_partition(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "7580:                                                                int offset, kafka_api_version_t api_version)",
          "7582:     proto_item *subti, *subsubti;",
          "7583:     proto_tree *subtree, *subsubtree;",
          "7584:     kafka_partition_t partition;",
          "7586:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_partition, &subti, \"Partition\");",
          "7588:     offset = dissect_kafka_partition_id_ret(tvb, pinfo, subtree, offset, &partition);",
          "7590:     offset = dissect_kafka_error(tvb, pinfo, subtree, offset);",
          "7592:     offset = dissect_kafka_string(subtree, hf_kafka_error_message, tvb, pinfo, offset, NULL, NULL);",
          "7594:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1,",
          "7595:                                         ett_kafka_replicas,",
          "7596:                                         &subsubti, \"Current Replicas\");",
          "7597:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "7598:                                  &dissect_kafka_list_partition_reassignments_response_replica);",
          "7599:     proto_item_set_end(subsubti, tvb, offset);",
          "7601:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1,",
          "7602:                                         ett_kafka_replicas,",
          "7603:                                         &subsubti, \"Adding Replicas\");",
          "7604:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "7605:                                  &dissect_kafka_list_partition_reassignments_response_replica);",
          "7606:     proto_item_set_end(subsubti, tvb, offset);",
          "7608:     subsubtree = proto_tree_add_subtree(subtree, tvb, offset, -1,",
          "7609:                                         ett_kafka_replicas,",
          "7610:                                         &subsubti, \"Removing Replicas\");",
          "7611:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "7612:                                  &dissect_kafka_list_partition_reassignments_response_replica);",
          "7613:     proto_item_set_end(subsubti, tvb, offset);",
          "7615:     proto_item_set_end(subti, tvb, offset);",
          "7621: dissect_kafka_list_partition_reassignments_response_topic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,",
          "7622:                                                            int offset, kafka_api_version_t api_version)",
          "7624:     proto_item *subti, *subsubti;",
          "7625:     proto_tree *subtree, *subsubtree;",
          "7627:     subtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_topic, &subti, \"Topic\");",
          "7629:     offset = dissect_kafka_string(subtree, hf_kafka_topic_name, tvb, pinfo, offset, NULL, NULL);",
          "7631:     subsubtree = proto_tree_add_subtree(tree, tvb, offset, -1, ett_kafka_partitions, &subsubti, \"Partitions\");",
          "7633:     offset = dissect_kafka_array(subsubtree, tvb, pinfo, offset, api_version,",
          "7634:                                  &dissect_kafka_list_partition_reassignments_response_partition);",
          "7642: dissect_kafka_list_partition_reassignments_response(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset,",
          "7643:                                                      kafka_api_version_t api_version)",
          "7648:     offset = dissect_kafka_throttle_time(tvb, pinfo, tree, offset);",
          "7650:     offset = dissect_kafka_error(tvb, pinfo, tree, offset);",
          "7652:     offset = dissect_kafka_string(tree, hf_kafka_error_message, tvb, pinfo, offset, NULL, NULL);",
          "7656:                                      &subti, \"Topics\");",
          "7658:                                  &dissect_kafka_list_partition_reassignments_response_topic);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "3456:         matcher = (kafka_query_response_t *) p_get_proto_data(wmem_file_scope(), pinfo, proto_kafka, 0);",
          "3457:     }",
          "3461:         if (matcher == NULL) {",
          "3462:             matcher = wmem_new(wmem_file_scope(), kafka_query_response_t);",
          "",
          "[Removed Lines]",
          "3459:     if (value_is_in_range(current_kafka_tcp_range, pinfo->destport)) {",
          "",
          "[Added Lines]",
          "7699:     if (pinfo->destport == pinfo->match_uint) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "3493:             proto_item_set_generated(ti);",
          "3494:         }",
          "3496:         ti = proto_tree_add_item(kafka_tree, hf_kafka_request_api_key, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "3497:         offset += 2;",
          "3498:         kafka_check_supported_api_key(pinfo, ti, matcher);",
          "3500:         ti = proto_tree_add_item(kafka_tree, hf_kafka_request_api_version, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "3501:         offset += 2;",
          "3502:         kafka_check_supported_api_version(pinfo, ti, matcher);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7738:         proto_item_set_hidden(ti);",
          "7740:         ti = proto_tree_add_item(kafka_tree, hf_kafka_api_key, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "7745:         proto_item_set_hidden(ti);",
          "7747:         ti = proto_tree_add_item(kafka_tree, hf_kafka_api_version, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "3542:             case KAFKA_OFFSET_FETCH:",
          "3544:                 break;",
          "3547:                 break;",
          "3548:             case KAFKA_JOIN_GROUP:",
          "",
          "[Removed Lines]",
          "3545:             case KAFKA_GROUP_COORDINATOR:",
          "",
          "[Added Lines]",
          "7792:             case KAFKA_FIND_COORDINATOR:",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "3575:             case KAFKA_DELETE_TOPICS:",
          "3577:                 break;",
          "3578:         }",
          "3579:     }",
          "3580:     else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7825:             case KAFKA_DELETE_RECORDS:",
          "7827:                 break;",
          "7828:             case KAFKA_INIT_PRODUCER_ID:",
          "7830:                 break;",
          "7831:             case KAFKA_OFFSET_FOR_LEADER_EPOCH:",
          "7833:                 break;",
          "7834:             case KAFKA_ADD_PARTITIONS_TO_TXN:",
          "7836:                 break;",
          "7837:             case KAFKA_ADD_OFFSETS_TO_TXN:",
          "7839:                 break;",
          "7840:             case KAFKA_END_TXN:",
          "7842:                 break;",
          "7843:             case KAFKA_WRITE_TXN_MARKERS:",
          "7845:                 break;",
          "7846:             case KAFKA_TXN_OFFSET_COMMIT:",
          "7848:                 break;",
          "7849:             case KAFKA_DESCRIBE_ACLS:",
          "7851:                 break;",
          "7852:             case KAFKA_CREATE_ACLS:",
          "7854:                 break;",
          "7855:             case KAFKA_DELETE_ACLS:",
          "7857:                 break;",
          "7858:             case KAFKA_DESCRIBE_CONFIGS:",
          "7860:                 break;",
          "7861:             case KAFKA_ALTER_CONFIGS:",
          "7863:                 break;",
          "7864:             case KAFKA_ALTER_REPLICA_LOG_DIRS:",
          "7866:                 break;",
          "7867:             case KAFKA_DESCRIBE_LOG_DIRS:",
          "7869:                 break;",
          "7870:             case KAFKA_CREATE_PARTITIONS:",
          "7872:                 break;",
          "7873:             case KAFKA_SASL_AUTHENTICATE:",
          "7875:                 break;",
          "7876:             case KAFKA_CREATE_DELEGATION_TOKEN:",
          "7878:                 break;",
          "7879:             case KAFKA_RENEW_DELEGATION_TOKEN:",
          "7881:                 break;",
          "7882:             case KAFKA_EXPIRE_DELEGATION_TOKEN:",
          "7884:                 break;",
          "7885:             case KAFKA_DESCRIBE_DELEGATION_TOKEN:",
          "7887:                 break;",
          "7888:             case KAFKA_DELETE_GROUPS:",
          "7890:                 break;",
          "7891:             case KAFKA_ELECT_LEADERS:",
          "7893:                 break;",
          "7894:             case KAFKA_INC_ALTER_CONFIGS:",
          "7896:                 break;",
          "7897:             case KAFKA_ALTER_PARTITION_REASSIGNMENTS:",
          "7899:                 break;",
          "7900:             case KAFKA_LIST_PARTITION_REASSIGNMENTS:",
          "7902:                 break;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "3619:         ti = proto_tree_add_int(kafka_tree, hf_kafka_response_api_key, tvb,",
          "3620:                 0, 0, matcher->api_key);",
          "3621:         proto_item_set_generated(ti);",
          "3622:         kafka_check_supported_api_key(pinfo, ti, matcher);",
          "3625:         ti = proto_tree_add_int(kafka_tree, hf_kafka_response_api_version, tvb,",
          "3626:                 0, 0, matcher->api_version);",
          "3627:         proto_item_set_generated(ti);",
          "3628:         kafka_check_supported_api_version(pinfo, ti, matcher);",
          "3630:         switch (matcher->api_key) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7947:         proto_item_set_hidden(ti);",
          "7948:         ti = proto_tree_add_int(kafka_tree, hf_kafka_api_key, tvb,",
          "7949:                                 0, 0, matcher->api_key);",
          "7950:         proto_item_set_generated(ti);",
          "7957:         proto_item_set_hidden(ti);",
          "7958:         ti = proto_tree_add_int(kafka_tree, hf_kafka_response_api_version, tvb,",
          "7959:                                 0, 0, matcher->api_version);",
          "7960:         proto_item_set_generated(ti);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "3658:             case KAFKA_OFFSET_FETCH:",
          "3660:                 break;",
          "3663:                 break;",
          "3664:             case KAFKA_JOIN_GROUP:",
          "",
          "[Removed Lines]",
          "3661:             case KAFKA_GROUP_COORDINATOR:",
          "",
          "[Added Lines]",
          "7994:             case KAFKA_FIND_COORDINATOR:",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "3691:             case KAFKA_DELETE_TOPICS:",
          "3693:                 break;",
          "3694:         }",
          "3696:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8027:             case KAFKA_DELETE_RECORDS:",
          "8029:                 break;",
          "8030:             case KAFKA_INIT_PRODUCER_ID:",
          "8032:                 break;",
          "8033:             case KAFKA_OFFSET_FOR_LEADER_EPOCH:",
          "8035:                 break;",
          "8036:             case KAFKA_ADD_PARTITIONS_TO_TXN:",
          "8038:                 break;",
          "8039:             case KAFKA_ADD_OFFSETS_TO_TXN:",
          "8041:                 break;",
          "8042:             case KAFKA_END_TXN:",
          "8044:                 break;",
          "8045:             case KAFKA_WRITE_TXN_MARKERS:",
          "8047:                 break;",
          "8048:             case KAFKA_TXN_OFFSET_COMMIT:",
          "8050:                 break;",
          "8051:             case KAFKA_DESCRIBE_ACLS:",
          "8053:                 break;",
          "8054:             case KAFKA_CREATE_ACLS:",
          "8056:                 break;",
          "8057:             case KAFKA_DELETE_ACLS:",
          "8059:                 break;",
          "8060:             case KAFKA_DESCRIBE_CONFIGS:",
          "8062:                 break;",
          "8063:             case KAFKA_ALTER_CONFIGS:",
          "8065:                 break;",
          "8066:             case KAFKA_ALTER_REPLICA_LOG_DIRS:",
          "8068:                 break;",
          "8069:             case KAFKA_DESCRIBE_LOG_DIRS:",
          "8071:                 break;",
          "8072:             case KAFKA_CREATE_PARTITIONS:",
          "8074:                 break;",
          "8075:             case KAFKA_SASL_AUTHENTICATE:",
          "8077:                 break;",
          "8078:             case KAFKA_CREATE_DELEGATION_TOKEN:",
          "8080:                 break;",
          "8081:             case KAFKA_RENEW_DELEGATION_TOKEN:",
          "8083:                 break;",
          "8084:             case KAFKA_EXPIRE_DELEGATION_TOKEN:",
          "8086:                 break;",
          "8087:             case KAFKA_DESCRIBE_DELEGATION_TOKEN:",
          "8089:                 break;",
          "8090:             case KAFKA_DELETE_GROUPS:",
          "8092:                 break;",
          "8093:             case KAFKA_ELECT_LEADERS:",
          "8095:                 break;",
          "8096:             case KAFKA_INC_ALTER_CONFIGS:",
          "8098:                 break;",
          "8099:             case KAFKA_ALTER_PARTITION_REASSIGNMENTS:",
          "8101:                 break;",
          "8102:             case KAFKA_LIST_PARTITION_REASSIGNMENTS:",
          "8104:                 break;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "3708:     return tvb_captured_length(tvb);",
          "3709: }",
          "3717: static void",
          "3718: compute_kafka_api_names(void)",
          "3719: {",
          "",
          "[Removed Lines]",
          "3712: static void",
          "3713: apply_kafka_prefs(void) {",
          "3714:     current_kafka_tcp_range = prefs_get_range_value(\"kafka\", \"tcp.port\");",
          "3715: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "3770:         },",
          "3771:         { &hf_kafka_metadata,",
          "3772:             { \"Metadata\", \"kafka.metadata\",",
          "3774:                NULL, HFILL }",
          "3775:         },",
          "3776:         { &hf_kafka_error,",
          "",
          "[Removed Lines]",
          "3773:                FT_STRING, BASE_NONE, 0, 0,",
          "",
          "[Added Lines]",
          "8178:                FT_STRING, STR_ASCII, 0, 0,",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "3778:                FT_INT16, BASE_DEC, VALS(kafka_errors), 0,",
          "3779:                NULL, HFILL }",
          "3780:         },",
          "3781:         { &hf_kafka_request_api_key,",
          "3782:             { \"API Key\", \"kafka.request_key\",",
          "3783:                FT_INT16, BASE_DEC, VALS(kafka_api_names), 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8186:         { &hf_kafka_error_message,",
          "8187:             { \"Error Message\", \"kafka.error_message\",",
          "8188:                FT_STRING, STR_ASCII, 0, 0,",
          "8189:                NULL, HFILL }",
          "8190:         },",
          "8191:         { &hf_kafka_api_key,",
          "8192:             { \"API Key\", \"kafka.api_key\",",
          "8193:                 FT_INT16, BASE_DEC, VALS(kafka_api_names), 0,",
          "8194:                 \"Request API Key.\", HFILL }",
          "8195:         },",
          "8196:         { &hf_kafka_api_version,",
          "8197:             { \"API Version\", \"kafka.api_version\",",
          "8198:                 FT_INT16, BASE_DEC, 0, 0,",
          "8199:                 \"Request API Version.\", HFILL }",
          "8200:         },",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "3805:         },",
          "3806:         { &hf_kafka_client_id,",
          "3807:             { \"Client ID\", \"kafka.client_id\",",
          "3809:               \"The ID of the sending client.\", HFILL }",
          "3810:         },",
          "3811:         { &hf_kafka_client_host,",
          "3812:             { \"Client Host\", \"kafka.client_host\",",
          "3814:                NULL, HFILL }",
          "3815:         },",
          "3816:         { &hf_kafka_transactional_id,",
          "3817:             { \"Transactional ID\", \"kafka.transactional_id\",",
          "3819:                NULL, HFILL }",
          "3820:         },",
          "3821:         { &hf_kafka_string_len,",
          "",
          "[Removed Lines]",
          "3808:                FT_STRING, BASE_NONE, 0, 0,",
          "3813:                FT_STRING, BASE_NONE, 0, 0,",
          "3818:                FT_STRING, BASE_NONE, 0, 0,",
          "",
          "[Added Lines]",
          "8231:                FT_STRING, STR_ASCII, 0, 0,",
          "8236:                FT_STRING, STR_ASCII, 0, 0,",
          "8241:                FT_STRING, STR_ASCII, 0, 0,",
          "8242:                NULL, HFILL }",
          "8243:         },",
          "8244:         { &hf_kafka_transaction_result,",
          "8245:             { \"Transaction Result\", \"kafka.transaction_result\",",
          "8246:                FT_INT8, BASE_DEC, VALS(kafka_transaction_results), 0,",
          "8247:                NULL, HFILL }",
          "8248:         },",
          "8249:         { &hf_kafka_transaction_timeout,",
          "8250:             { \"Transaction Timeout\", \"kafka.transaction_timeout\",",
          "8251:                FT_INT32, BASE_DEC, 0, 0,",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "3828:                FT_INT32, BASE_DEC, 0, 0,",
          "3829:               \"Generic length for kafka-encoded bytes.\", HFILL }",
          "3830:         },",
          "3836:         { &hf_kafka_required_acks,",
          "3837:             { \"Required Acks\", \"kafka.required_acks\",",
          "3838:                FT_INT16, BASE_DEC, VALS(kafka_acks), 0,",
          "",
          "[Removed Lines]",
          "3831:         { &hf_kafka_array_count,",
          "3832:             { \"Array Count\", \"kafka.array_count\",",
          "3833:                FT_INT32, BASE_DEC, 0, 0,",
          "3834:                NULL, HFILL }",
          "3835:         },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "3845:         },",
          "3846:         { &hf_kafka_topic_name,",
          "3847:             { \"Topic Name\", \"kafka.topic_name\",",
          "3849:                NULL, HFILL }",
          "3850:         },",
          "3851:         { &hf_kafka_producer_id,",
          "",
          "[Removed Lines]",
          "3848:                FT_STRING, BASE_NONE, 0, 0,",
          "",
          "[Added Lines]",
          "8276:                FT_STRING, STR_UNICODE, 0, 0,",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "3853:                FT_INT64, BASE_DEC, 0, 0,",
          "3854:                NULL, HFILL }",
          "3855:         },",
          "3856:         { &hf_kafka_partition_id,",
          "3857:             { \"Partition ID\", \"kafka.partition_id\",",
          "3858:                FT_INT32, BASE_DEC, 0, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8284:         { &hf_kafka_producer_epoch,",
          "8285:             { \"Producer Epoch\", \"kafka.producer_epoch\",",
          "8286:                 FT_INT16, BASE_DEC, 0, 0,",
          "8287:                 NULL, HFILL }",
          "8288:         },",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "3873:                FT_INT32, BASE_DEC, 0, 0,",
          "3874:                NULL, HFILL }",
          "3875:         },",
          "3880:         },",
          "3881:         { &hf_kafka_message_set_size,",
          "3882:             { \"Message Set Size\", \"kafka.message_set_size\",",
          "",
          "[Removed Lines]",
          "3876:         { &hf_kafka_partition_leader,",
          "3877:             { \"Leader\", \"kafka.leader\",",
          "3878:                FT_INT32, BASE_DEC, 0, 0,",
          "3879:                NULL, HFILL }",
          "",
          "[Added Lines]",
          "8309:         { &hf_kafka_offline,",
          "8310:             { \"Offline Replica ID\", \"kafka.offline_id\",",
          "8311:                 FT_INT32, BASE_DEC, 0, 0,",
          "8312:                 NULL, HFILL }",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "3908:                FT_UINT8, BASE_DEC, VALS(kafka_message_timestamp_types), KAFKA_MESSAGE_TIMESTAMP_MASK,",
          "3909:                NULL, HFILL }",
          "3910:         },",
          "3911:         { &hf_kafka_message_timestamp,",
          "3912:             { \"Timestamp\", \"kafka.message_timestamp\",",
          "3913:                FT_ABSOLUTE_TIME, ABSOLUTE_TIME_UTC, NULL, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8344:         { &hf_kafka_batch_crc,",
          "8345:             { \"CRC32\", \"kafka.batch_crc\",",
          "8346:                 FT_UINT32, BASE_HEX, 0, 0,",
          "8347:                 NULL, HFILL }",
          "8348:         },",
          "8349:         { &hf_kafka_batch_magic,",
          "8350:             { \"Magic Byte\", \"kafka.batch_magic\",",
          "8351:                 FT_INT8, BASE_DEC, 0, 0,",
          "8352:                 NULL, HFILL }",
          "8353:         },",
          "8354:         { &hf_kafka_batch_codec,",
          "8355:             { \"Compression Codec\", \"kafka.batch_codec\",",
          "8356:                 FT_UINT16, BASE_DEC, VALS(kafka_message_codecs), KAFKA_MESSAGE_CODEC_MASK,",
          "8357:                 NULL, HFILL }",
          "8358:         },",
          "8359:         { &hf_kafka_batch_timestamp_type,",
          "8360:             { \"Timestamp Type\", \"kafka.batch_timestamp_type\",",
          "8361:                 FT_UINT16, BASE_DEC, VALS(kafka_message_timestamp_types), KAFKA_MESSAGE_TIMESTAMP_MASK,",
          "8362:                 NULL, HFILL }",
          "8363:         },",
          "8364:         { &hf_kafka_batch_transactional,",
          "8365:             { \"Transactional\", \"kafka.batch_transactional\",",
          "8366:                 FT_UINT16, BASE_DEC, VALS(kafka_batch_transactional_values), KAFKA_BATCH_TRANSACTIONAL_MASK,",
          "8367:                 NULL, HFILL }",
          "8368:         },",
          "8369:         { &hf_kafka_batch_control_batch,",
          "8370:             { \"Control Batch\", \"kafka.batch_control_batch\",",
          "8371:                 FT_UINT16, BASE_DEC, VALS(kafka_batch_control_batch_values), KAFKA_BATCH_CONTROL_BATCH_MASK,",
          "8372:                 NULL, HFILL }",
          "8373:         },",
          "8374:         { &hf_kafka_batch_last_offset_delta,",
          "8375:             { \"Last Offset Delta\", \"kafka.batch_last_offset_delta\",",
          "8376:                FT_UINT32, BASE_DEC, 0, 0,",
          "8377:                NULL, HFILL }",
          "8378:         },",
          "8379:         { &hf_kafka_batch_first_timestamp,",
          "8380:             { \"First Timestamp\", \"kafka.batch_first_timestamp\",",
          "8381:                 FT_ABSOLUTE_TIME, ABSOLUTE_TIME_UTC, NULL, 0,",
          "8382:                 NULL, HFILL }",
          "8383:         },",
          "8384:         { &hf_kafka_batch_last_timestamp,",
          "8385:             { \"Last Timestamp\", \"kafka.batch_last_timestamp\",",
          "8386:                 FT_ABSOLUTE_TIME, ABSOLUTE_TIME_UTC, NULL, 0,",
          "8387:                 NULL, HFILL }",
          "8388:         },",
          "8389:         { &hf_kafka_batch_base_sequence,",
          "8390:             { \"Base Sequence\", \"kafka.batch_base_sequence\",",
          "8391:                 FT_INT32, BASE_DEC, 0, 0,",
          "8392:                 NULL, HFILL }",
          "8393:         },",
          "8394:         { &hf_kafka_batch_size,",
          "8395:             { \"Size\", \"kafka.batch_size\",",
          "8396:                 FT_UINT32, BASE_DEC, 0, 0,",
          "8397:                 NULL, HFILL }",
          "8398:         },",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "3915:         },",
          "3916:         { &hf_kafka_message_key,",
          "3917:             { \"Key\", \"kafka.message_key\",",
          "3919:                NULL, HFILL }",
          "3920:         },",
          "3921:         { &hf_kafka_message_value,",
          "3922:             { \"Value\", \"kafka.message_value\",",
          "3924:                NULL, HFILL }",
          "3925:         },",
          "3926:         { &hf_kafka_message_value_compressed,",
          "",
          "[Removed Lines]",
          "3918:                FT_BYTES, BASE_NONE, 0, 0,",
          "3923:                FT_BYTES, BASE_NONE, 0, 0,",
          "",
          "[Added Lines]",
          "8406:                FT_BYTES, BASE_SHOW_ASCII_PRINTABLE, 0, 0,",
          "8411:                FT_BYTES, BASE_SHOW_ASCII_PRINTABLE, 0, 0,",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "3935:         },",
          "3936:         { &hf_kafka_consumer_group,",
          "3937:             { \"Consumer Group\", \"kafka.consumer_group\",",
          "3939:                NULL, HFILL }",
          "3940:         },",
          "3941:         { &hf_kafka_request_frame,",
          "",
          "[Removed Lines]",
          "3938:                FT_STRING, BASE_NONE, 0, 0,",
          "",
          "[Added Lines]",
          "8426:                FT_STRING, STR_ASCII, 0, 0,",
          "8427:                NULL, HFILL }",
          "8428:         },",
          "8429:         { &hf_kafka_consumer_group_instance,",
          "8430:             { \"Consumer Group Instance\", \"kafka.consumer_group_instance\",",
          "8431:                FT_STRING, STR_ASCII, 0, 0,",
          "8432:                NULL, HFILL }",
          "8433:         },",
          "8434:         { &hf_kafka_coordinator_key,",
          "8435:             { \"Coordinator Key\", \"kafka.coordinator_key\",",
          "8436:                FT_STRING, STR_ASCII, 0, 0,",
          "8437:                NULL, HFILL }",
          "8438:         },",
          "8439:         { &hf_kafka_coordinator_type,",
          "8440:             { \"Coordinator Type\", \"kafka.coordinator_type\",",
          "8441:                FT_INT8, BASE_DEC, VALS(kafka_coordinator_types), 0,",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "3948:                FT_INT32, BASE_DEC, 0, 0,",
          "3949:                NULL, HFILL }",
          "3950:         },",
          "3951:         { &hf_kafka_broker_host,",
          "3952:             { \"Host\", \"kafka.host\",",
          "3954:                NULL, HFILL }",
          "3955:         },",
          "3956:         { &hf_kafka_broker_port,",
          "",
          "[Removed Lines]",
          "3953:                FT_STRING, BASE_NONE, 0, 0,",
          "",
          "[Added Lines]",
          "8454:         { &hf_kafka_broker_epoch,",
          "8455:             { \"Broker Epoch\", \"kafka.broker_epoch\",",
          "8456:                FT_INT64, BASE_DEC, 0, 0,",
          "8457:                NULL, HFILL }",
          "8458:         },",
          "8461:                FT_STRING, STR_ASCII, 0, 0,",
          "8462:                NULL, HFILL }",
          "8463:         },",
          "8464:         { &hf_kafka_listener_name,",
          "8465:             { \"Listener\", \"kafka.listener_name\",",
          "8466:                FT_STRING, STR_ASCII, 0, 0,",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "3958:                FT_INT32, BASE_DEC, 0, 0,",
          "3959:                NULL, HFILL }",
          "3960:         },",
          "3962:             { \"Rack\", \"kafka.rack\",",
          "3964:                NULL, HFILL }",
          "3965:         },",
          "3966:         { &hf_kafka_broker_security_protocol_type,",
          "",
          "[Removed Lines]",
          "3961:         { &hf_kafka_broker_rack,",
          "3963:                FT_STRING, BASE_NONE, 0, 0,",
          "",
          "[Added Lines]",
          "8474:         { &hf_kafka_rack,",
          "8476:                FT_STRING, STR_ASCII, 0, 0,",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "3970:         },",
          "3971:         { &hf_kafka_cluster_id,",
          "3972:             { \"Cluster ID\", \"kafka.cluster_id\",",
          "3974:                NULL, HFILL }",
          "3975:         },",
          "3976:         { &hf_kafka_controller_id,",
          "",
          "[Removed Lines]",
          "3973:                FT_STRING, BASE_NONE, 0, 0,",
          "",
          "[Added Lines]",
          "8486:                FT_STRING, STR_ASCII, 0, 0,",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "3990:         },",
          "3991:         { &hf_kafka_group_leader_id,",
          "3992:             { \"Leader ID\", \"kafka.group_leader_id\",",
          "3994:                NULL, HFILL }",
          "3995:         },",
          "3996:         { &hf_kafka_leader_id,",
          "",
          "[Removed Lines]",
          "3993:                FT_STRING, BASE_NONE, 0, 0,",
          "",
          "[Added Lines]",
          "8506:                FT_STRING, STR_ASCII, 0, 0,",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "4003:                FT_INT32, BASE_DEC, 0, 0,",
          "4004:                NULL, HFILL }",
          "4005:         },",
          "4006:         { &hf_kafka_is_internal,",
          "4007:             { \"Is Internal\", \"kafka.is_internal\",",
          "4008:                FT_BOOLEAN, BASE_NONE, 0, 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8519:         { &hf_kafka_current_leader_epoch,",
          "8520:             { \"Leader Epoch\", \"kafka.current_leader_epoch\",",
          "8521:                FT_INT32, BASE_DEC, 0, 0,",
          "8522:                NULL, HFILL }",
          "8523:         },",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "4024:         },",
          "4025:         { &hf_kafka_isolation_level,",
          "4026:             { \"Isolation Level\", \"kafka.isolation_level\",",
          "4028:                NULL, HFILL }",
          "4029:         },",
          "4030:         { &hf_kafka_max_wait_time,",
          "",
          "[Removed Lines]",
          "4027:                FT_INT8, BASE_DEC, 0, 0,",
          "",
          "[Added Lines]",
          "8545:                FT_INT8, BASE_DEC, VALS(kafka_isolation_levels), 0,",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "4075:         },",
          "4076:         { &hf_kafka_group_state,",
          "4077:             { \"State\", \"kafka.group_state\",",
          "4079:                NULL, HFILL }",
          "4080:         },",
          "4081:         { &hf_kafka_member_id,",
          "4082:             { \"Consumer Group Member ID\", \"kafka.member_id\",",
          "4084:                NULL, HFILL }",
          "4085:         },",
          "4086:         { &hf_kafka_protocol_type,",
          "4087:             { \"Protocol Type\", \"kafka.protocol_type\",",
          "4089:                NULL, HFILL }",
          "4090:         },",
          "4091:         { &hf_kafka_protocol_name,",
          "4092:             { \"Protocol Name\", \"kafka.protocol_name\",",
          "4094:                NULL, HFILL }",
          "4095:         },",
          "4096:         { &hf_kafka_protocol_metadata,",
          "",
          "[Removed Lines]",
          "4078:                FT_STRING, BASE_NONE, 0, 0,",
          "4083:                FT_STRING, BASE_NONE, 0, 0,",
          "4088:                FT_STRING, BASE_NONE, 0, 0,",
          "4093:                FT_STRING, BASE_NONE, 0, 0,",
          "",
          "[Added Lines]",
          "8596:                FT_STRING, STR_ASCII, 0, 0,",
          "8601:                FT_STRING, STR_ASCII, 0, 0,",
          "8606:                FT_STRING, STR_ASCII, 0, 0,",
          "8611:                FT_STRING, STR_ASCII, 0, 0,",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "4115:         },",
          "4116:         { &hf_kafka_sasl_mechanism,",
          "4117:             { \"SASL Mechanism\", \"kafka.sasl_mechanism\",",
          "4119:                NULL, HFILL }",
          "4120:         },",
          "4121:         { &hf_kafka_num_partitions,",
          "",
          "[Removed Lines]",
          "4118:                FT_STRING, BASE_NONE, 0, 0,",
          "",
          "[Added Lines]",
          "8636:                FT_STRING, STR_ASCII, 0, 0,",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "4130:         },",
          "4131:         { &hf_kafka_config_key,",
          "4132:             { \"Key\", \"kafka.config_key\",",
          "4134:                NULL, HFILL }",
          "4135:         },",
          "4136:         { &hf_kafka_config_value,",
          "4139:                NULL, HFILL }",
          "4140:         },",
          "4141:         { &hf_kafka_commit_timestamp,",
          "",
          "[Removed Lines]",
          "4133:                FT_STRING, BASE_NONE, 0, 0,",
          "4137:             { \"Key\", \"kafka.config_value\",",
          "4138:                FT_STRING, BASE_NONE, 0, 0,",
          "",
          "[Added Lines]",
          "8651:                FT_STRING, STR_ASCII, 0, 0,",
          "8655:             { \"Value\", \"kafka.config_value\",",
          "8656:                FT_STRING, STR_ASCII, 0, 0,",
          "8657:                NULL, HFILL }",
          "8658:         },",
          "8659:         { &hf_kafka_config_operation,",
          "8660:             { \"Operation\", \"kafka.config_operation\",",
          "8661:                FT_INT8, BASE_DEC, VALS(config_operations), 0,",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "4148:                FT_INT64, BASE_DEC, 0, 0,",
          "4149:                NULL, HFILL }",
          "4150:         },",
          "4151:     };",
          "4153:     static int *ett[] = {",
          "4154:         &ett_kafka,",
          "4155:         &ett_kafka_message,",
          "4156:         &ett_kafka_message_set,",
          "4157:         &ett_kafka_isrs,",
          "4158:         &ett_kafka_replicas,",
          "4159:         &ett_kafka_broker,",
          "4160:         &ett_kafka_brokers,",
          "4161:         &ett_kafka_broker_end_point,",
          "4162:         &ett_kafka_topics,",
          "4163:         &ett_kafka_topic,",
          "4168:         &ett_kafka_api_version,",
          "4169:         &ett_kafka_group_protocols,",
          "4170:         &ett_kafka_group_protocol,",
          "",
          "[Removed Lines]",
          "4164:         &ett_kafka_request_topic,",
          "4165:         &ett_kafka_request_partition,",
          "4166:         &ett_kafka_response_topic,",
          "4167:         &ett_kafka_response_partition,",
          "",
          "[Added Lines]",
          "8674:         { &hf_kafka_forgotten_topic_name,",
          "8675:             { \"Forgotten Topic Name\", \"kafka.forgotten_topic_name\",",
          "8676:                 FT_STRING, STR_ASCII, 0, 0,",
          "8677:                 NULL, HFILL }",
          "8678:         },",
          "8679:         { &hf_kafka_forgotten_topic_partition,",
          "8680:             { \"Forgotten Topic Partition\", \"kafka.forgotten_topic_partition\",",
          "8681:                 FT_INT64, BASE_DEC, 0, 0,",
          "8682:                 NULL, HFILL }",
          "8683:         },",
          "8684:         { &hf_kafka_fetch_session_id,",
          "8685:             { \"Fetch Session ID\", \"kafka.fetch_session_id\",",
          "8686:                 FT_INT64, BASE_DEC, 0, 0,",
          "8687:                 NULL, HFILL }",
          "8688:         },",
          "8689:         { &hf_kafka_fetch_session_epoch,",
          "8690:             { \"Fetch Session Epoch\", \"kafka.fetch_session_epoch\",",
          "8691:                 FT_INT64, BASE_DEC, 0, 0,",
          "8692:                 NULL, HFILL }",
          "8693:         },",
          "8694:         { &hf_kafka_record_header_key,",
          "8695:             { \"Header Key\", \"kafka.header_key\",",
          "8696:                 FT_STRING, STR_UNICODE, 0, 0,",
          "8697:                 NULL, HFILL }",
          "8698:         },",
          "8699:         { &hf_kafka_record_header_value,",
          "8700:             { \"Header Value\", \"kafka.header_value\",",
          "8701:                 FT_BYTES, BASE_SHOW_ASCII_PRINTABLE, 0, 0,",
          "8702:                 NULL, HFILL }",
          "8703:         },",
          "8704:         { &hf_kafka_record_headers_count,",
          "8705:             { \"Headers Count\", \"kafka.headers_count\",",
          "8706:                 FT_INT64, BASE_DEC, 0, 0,",
          "8707:                 NULL, HFILL }",
          "8708:         },",
          "8709:         { &hf_kafka_record_length,",
          "8710:             { \"Record Length\", \"kafka.record_length\",",
          "8711:                 FT_INT64, BASE_DEC, 0, 0,",
          "8712:                 NULL, HFILL }",
          "8713:         },",
          "8714:         { &hf_kafka_record_attributes,",
          "8715:             { \"Record Attributes (reserved)\", \"kafka.record_attributes\",",
          "8716:                 FT_INT8, BASE_DEC, 0, 0,",
          "8717:                 NULL, HFILL }",
          "8718:         },",
          "8719:         { &hf_kafka_allow_auto_topic_creation,",
          "8720:             { \"Allow Auto Topic Creation\", \"kafka.allow_auto_topic_creation\",",
          "8721:                 FT_BOOLEAN, BASE_NONE, 0, 0,",
          "8722:                 NULL, HFILL }",
          "8723:         },",
          "8724:         { &hf_kafka_validate_only,",
          "8725:             { \"Only Validate the Request\", \"kafka.validate_only\",",
          "8726:                 FT_BOOLEAN, BASE_NONE, 0, 0,",
          "8727:                 NULL, HFILL }",
          "8728:         },",
          "8729:         { &hf_kafka_coordinator_epoch,",
          "8730:             { \"Coordinator Epoch\", \"kafka.coordinator_epoch\",",
          "8731:                 FT_INT32, BASE_DEC, 0, 0,",
          "8732:                 NULL, HFILL }",
          "8733:         },",
          "8734:         { &hf_kafka_sasl_auth_bytes,",
          "8735:             { \"SASL Authentication Bytes\", \"kafka.sasl_authentication\",",
          "8736:                 FT_BYTES, BASE_NONE, 0, 0,",
          "8737:                 NULL, HFILL }",
          "8738:         },",
          "8739:         { &hf_kafka_session_lifetime_ms,",
          "8740:             { \"Session Lifetime (ms)\", \"kafka.session_lifetime_ms\",",
          "8741:                 FT_INT64, BASE_DEC, 0, 0,",
          "8742:                 NULL, HFILL }",
          "8743:         },",
          "8744:         { &hf_kafka_acl_resource_type,",
          "8745:             { \"Resource Type\", \"kafka.acl_resource_type\",",
          "8746:                 FT_INT8, BASE_DEC, VALS(acl_resource_types), 0,",
          "8747:                 NULL, HFILL }",
          "8748:         },",
          "8749:         { &hf_kafka_acl_resource_name,",
          "8750:             { \"Resource Name\", \"kafka.acl_resource_name\",",
          "8751:                 FT_STRING, STR_ASCII, 0, 0,",
          "8752:                 NULL, HFILL }",
          "8753:         },",
          "8754:         { &hf_kafka_acl_resource_pattern_type,",
          "8755:             { \"Resource Pattern Type\", \"kafka.acl_resource_pattern_type\",",
          "8756:                 FT_INT8, BASE_DEC, VALS(acl_resource_pattern_types), 0,",
          "8757:                 NULL, HFILL }",
          "8758:         },",
          "8759:         { &hf_kafka_acl_principal,",
          "8760:             { \"Principal\", \"kafka.acl_principal\",",
          "8761:                 FT_STRING, STR_ASCII, 0, 0,",
          "8762:                 NULL, HFILL }",
          "8763:         },",
          "8764:         { &hf_kafka_acl_host,",
          "8765:             { \"Host\", \"kafka.acl_host\",",
          "8766:                 FT_STRING, STR_ASCII, 0, 0,",
          "8767:                 NULL, HFILL }",
          "8768:         },",
          "8769:         { &hf_kafka_acl_operation,",
          "8770:             { \"Operation\", \"kafka.acl_operation\",",
          "8771:                 FT_INT8, BASE_DEC, VALS(acl_operations), 0,",
          "8772:                 NULL, HFILL }",
          "8773:         },",
          "8774:         { &hf_kafka_acl_permission_type,",
          "8775:             { \"Permission Type\", \"kafka.acl_permission_type\",",
          "8776:                 FT_INT8, BASE_DEC, VALS(acl_permission_types), 0,",
          "8777:                 NULL, HFILL }",
          "8778:         },",
          "8779:         { &hf_kafka_config_resource_type,",
          "8780:             { \"Resource Type\", \"kafka.config_resource_type\",",
          "8781:                 FT_INT8, BASE_DEC, VALS(config_resource_types), 0,",
          "8782:                 NULL, HFILL }",
          "8783:         },",
          "8784:         { &hf_kafka_config_resource_name,",
          "8785:             { \"Resource Name\", \"kafka.config_resource_name\",",
          "8786:                 FT_STRING, STR_ASCII, 0, 0,",
          "8787:                 NULL, HFILL }",
          "8788:         },",
          "8789:         { &hf_kafka_config_include_synonyms,",
          "8790:             { \"Include Synonyms\", \"kafka.config_include_synonyms\",",
          "8791:                 FT_BOOLEAN, BASE_NONE, 0, 0,",
          "8792:                 NULL, HFILL }",
          "8793:         },",
          "8794:         { &hf_kafka_config_default,",
          "8795:             { \"Default\", \"kafka.config_default\",",
          "8796:                 FT_BOOLEAN, BASE_NONE, 0, 0,",
          "8797:                 NULL, HFILL }",
          "8798:         },",
          "8799:         { &hf_kafka_config_readonly,",
          "8800:             { \"Readonly\", \"kafka.config_readonly\",",
          "8801:                 FT_BOOLEAN, BASE_NONE, 0, 0,",
          "8802:                 NULL, HFILL }",
          "8803:         },",
          "8804:         { &hf_kafka_config_sensitive,",
          "8805:             { \"Sensitive\", \"kafka.config_sensitive\",",
          "8806:                 FT_BOOLEAN, BASE_NONE, 0, 0,",
          "8807:                 NULL, HFILL }",
          "8808:         },",
          "8809:         { &hf_kafka_config_source,",
          "8810:             { \"Source\", \"kafka.config_source\",",
          "8811:                 FT_INT8, BASE_DEC, VALS(config_sources), 0,",
          "8812:                 NULL, HFILL }",
          "8813:         },",
          "8814:         { &hf_kafka_log_dir,",
          "8815:             { \"Log Directory\", \"kafka.log_dir\",",
          "8816:                 FT_STRING, STR_ASCII, 0, 0,",
          "8817:                 NULL, HFILL }",
          "8818:         },",
          "8819:         { &hf_kafka_segment_size,",
          "8820:             { \"Segment Size\", \"kafka.segment_size\",",
          "8821:                 FT_UINT64, BASE_DEC, 0, 0,",
          "8822:                 NULL, HFILL }",
          "8823:         },",
          "8824:         { &hf_kafka_offset_lag,",
          "8825:             { \"Offset Lag\", \"kafka.offset_lag\",",
          "8826:                 FT_UINT64, BASE_DEC, 0, 0,",
          "8827:                 NULL, HFILL }",
          "8828:         },",
          "8829:         { &hf_kafka_future,",
          "8830:             { \"Future\", \"kafka.future\",",
          "8831:                 FT_BOOLEAN, BASE_NONE, 0, 0,",
          "8832:                 NULL, HFILL }",
          "8833:         },",
          "8834:         { &hf_kafka_partition_count,",
          "8835:             { \"Partition Count\", \"kafka.partition_count\",",
          "8836:                 FT_UINT32, BASE_DEC, 0, 0,",
          "8837:                 NULL, HFILL }",
          "8838:         },",
          "8839:         { &hf_kafka_token_max_life_time,",
          "8840:             { \"Max Life Time\", \"kafka.token_max_life_time\",",
          "8841:                 FT_INT64, BASE_DEC, 0, 0,",
          "8842:                 NULL, HFILL }",
          "8843:         },",
          "8844:         { &hf_kafka_token_renew_time,",
          "8845:             { \"Renew Time\", \"kafka.renew_time\",",
          "8846:                 FT_INT64, BASE_DEC, 0, 0,",
          "8847:                 NULL, HFILL }",
          "8848:         },",
          "8849:         { &hf_kafka_token_expiry_time,",
          "8850:             { \"Expiry Time\", \"kafka.expiry_time\",",
          "8851:                 FT_INT64, BASE_DEC, 0, 0,",
          "8852:                 NULL, HFILL }",
          "8853:         },",
          "8854:         { &hf_kafka_token_principal_type,",
          "8855:             { \"Principal Type\", \"kafka.principal_type\",",
          "8856:                 FT_STRING, STR_ASCII, 0, 0,",
          "8857:                 NULL, HFILL }",
          "8858:         },",
          "8859:         { &hf_kafka_token_principal_name,",
          "8860:             { \"Principal Name\", \"kafka.principal_name\",",
          "8861:                 FT_STRING, STR_ASCII, 0, 0,",
          "8862:                 NULL, HFILL }",
          "8863:         },",
          "8864:         { &hf_kafka_token_issue_timestamp,",
          "8865:             { \"Issue Timestamp\", \"kafka.token_issue_timestamp\",",
          "8866:                 FT_ABSOLUTE_TIME, ABSOLUTE_TIME_UTC, NULL, 0,",
          "8867:                 NULL, HFILL }",
          "8868:         },",
          "8869:         { &hf_kafka_token_expiry_timestamp,",
          "8870:             { \"Expiry Timestamp\", \"kafka.token_expiry_timestamp\",",
          "8871:                 FT_ABSOLUTE_TIME, ABSOLUTE_TIME_UTC, NULL, 0,",
          "8872:                 NULL, HFILL }",
          "8873:         },",
          "8874:         { &hf_kafka_token_max_timestamp,",
          "8875:             { \"Max Timestamp\", \"kafka.token_max_timestamp\",",
          "8876:                 FT_ABSOLUTE_TIME, ABSOLUTE_TIME_UTC, NULL, 0,",
          "8877:                 NULL, HFILL }",
          "8878:         },",
          "8879:         { &hf_kafka_token_id,",
          "8880:             { \"ID\", \"kafka.token_id\",",
          "8881:                 FT_STRING, STR_ASCII, 0, 0,",
          "8882:                 NULL, HFILL }",
          "8883:         },",
          "8884:         { &hf_kafka_token_hmac,",
          "8885:             { \"HMAC\", \"kafka.token_hmac\",",
          "8886:                 FT_BYTES, BASE_NONE, 0, 0,",
          "8887:                 NULL, HFILL }",
          "8888:         },",
          "8889:         { &hf_kafka_include_cluster_authorized_ops,",
          "8890:             { \"Include Cluster Authorized Operations\", \"kafka.include_cluster_authorized_ops\",",
          "8891:                 FT_BOOLEAN, BASE_NONE, 0, 0,",
          "8892:                 NULL, HFILL }",
          "8893:         },",
          "8894:         { &hf_kafka_include_topic_authorized_ops,",
          "8895:             { \"Include Topic Authorized Operations\", \"kafka.include_topic_authorized_ops\",",
          "8896:                 FT_BOOLEAN, BASE_NONE, 0, 0,",
          "8897:                 NULL, HFILL }",
          "8898:         },",
          "8899:         { &hf_kafka_cluster_authorized_ops,",
          "8900:             { \"Cluster Authorized Operations\", \"kafka.cluster_authorized_ops\",",
          "8901:                 FT_UINT32, BASE_HEX, 0, 0,",
          "8902:                 NULL, HFILL }",
          "8903:         },",
          "8904:         { &hf_kafka_topic_authorized_ops,",
          "8905:             { \"Topic Authorized Operations\", \"kafka.topic_authorized_ops\",",
          "8906:                 FT_UINT32, BASE_HEX, 0, 0,",
          "8907:                 NULL, HFILL }",
          "8908:         },",
          "8909:         { &hf_kafka_include_group_authorized_ops,",
          "8910:             { \"Include Group Authorized Operations\", \"kafka.include_group_authorized_ops\",",
          "8911:                 FT_BOOLEAN, BASE_NONE, 0, 0,",
          "8912:                 NULL, HFILL }",
          "8913:         },",
          "8914:         { &hf_kafka_group_authorized_ops,",
          "8915:             { \"Group Authorized Operations\", \"kafka.group_authorized_ops\",",
          "8916:                 FT_UINT32, BASE_HEX, 0, 0,",
          "8917:                 NULL, HFILL }",
          "8918:         },",
          "8919:         { &hf_kafka_election_type,",
          "8920:             { \"ElectionType\", \"kafka.election_type\",",
          "8921:                 FT_INT8, BASE_DEC, VALS(election_types), 0,",
          "8922:                 NULL, HFILL }",
          "8923:         },",
          "8928:         &ett_kafka_batch,",
          "8931:         &ett_kafka_offline,",
          "8937:         &ett_kafka_markers,",
          "8938:         &ett_kafka_marker,",
          "8941:         &ett_kafka_partitions,",
          "8942:         &ett_kafka_partition,",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "4172:         &ett_kafka_group_member,",
          "4173:         &ett_kafka_group_assignments,",
          "4174:         &ett_kafka_group_assignment,",
          "4175:         &ett_kafka_group,",
          "4176:         &ett_kafka_sasl_enabled_mechanisms,",
          "4177:         &ett_kafka_replica_assignment,",
          "4178:         &ett_kafka_configs,",
          "4179:         &ett_kafka_config,",
          "4180:     };",
          "4182:     static ei_register_info ei[] = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8950:         &ett_kafka_groups,",
          "8956:         &ett_kafka_request_forgotten_topic,",
          "8957:         &ett_kafka_record,",
          "8958:         &ett_kafka_record_headers,",
          "8959:         &ett_kafka_record_headers_header,",
          "8960:         &ett_kafka_aborted_transactions,",
          "8961:         &ett_kafka_aborted_transaction,",
          "8962:         &ett_kafka_resources,",
          "8963:         &ett_kafka_resource,",
          "8964:         &ett_kafka_acls,",
          "8965:         &ett_kafka_acl,",
          "8966:         &ett_kafka_acl_creations,",
          "8967:         &ett_kafka_acl_creation,",
          "8968:         &ett_kafka_acl_filters,",
          "8969:         &ett_kafka_acl_filter,",
          "8970:         &ett_kafka_acl_filter_matches,",
          "8971:         &ett_kafka_acl_filter_match,",
          "8972:         &ett_kafka_config_synonyms,",
          "8973:         &ett_kafka_config_synonym,",
          "8974:         &ett_kafka_config_entries,",
          "8975:         &ett_kafka_config_entry,",
          "8976:         &ett_kafka_log_dirs,",
          "8977:         &ett_kafka_log_dir,",
          "8978:         &ett_kafka_renewers,",
          "8979:         &ett_kafka_renewer,",
          "8980:         &ett_kafka_owners,",
          "8981:         &ett_kafka_owner,",
          "8982:         &ett_kafka_tokens,",
          "8983:         &ett_kafka_token,",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "4192:           { \"kafka.bad_string_length\", PI_MALFORMED, PI_WARN, \"Invalid string length field\", EXPFILL }},",
          "4193:         { &ei_kafka_bad_bytes_length,",
          "4194:           { \"kafka.bad_bytes_length\", PI_MALFORMED, PI_WARN, \"Invalid byte length field\", EXPFILL }},",
          "4195:     };",
          "4197:     module_t *kafka_module;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8999:         { &ei_kafka_unknown_message_magic,",
          "9000:           { \"kafka.unknown_message_magic\", PI_MALFORMED, PI_WARN, \"Invalid message magic field\", EXPFILL }},",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "4205:     expert_kafka = expert_register_protocol(proto_kafka);",
          "4206:     expert_register_field_array(expert_kafka, ei, array_length(ei));",
          "4210:     prefs_register_bool_preference(kafka_module, \"show_string_bytes_lengths\",",
          "4211:         \"Show length for string and bytes fields in the protocol tree\",",
          "",
          "[Removed Lines]",
          "4208:     kafka_module = prefs_register_protocol(proto_kafka, apply_kafka_prefs);",
          "",
          "[Added Lines]",
          "9014:     kafka_module = prefs_register_protocol(proto_kafka, NULL);",
          "9015:     kafka_handle = register_dissector(\"kafka\", dissect_kafka_tcp, proto_kafka);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "4216: void",
          "4217: proto_reg_handoff_kafka(void)",
          "4218: {",
          "4226: }",
          "",
          "[Removed Lines]",
          "4219:     dissector_handle_t kafka_handle;",
          "4221:     kafka_handle = create_dissector_handle(dissect_kafka_tcp, proto_kafka);",
          "4224:     dissector_add_uint_range_with_preference(\"tcp.port\", \"\", kafka_handle);",
          "4225:     apply_kafka_prefs();",
          "",
          "[Added Lines]",
          "9026:     dissector_add_uint_range_with_preference(\"tcp.port\", KAFKA_TCP_DEFAULT_RANGE, kafka_handle);",
          "9027:     ssl_dissector_add(0, kafka_handle);",
          "",
          "---------------"
        ]
      }
    }
  ]
}