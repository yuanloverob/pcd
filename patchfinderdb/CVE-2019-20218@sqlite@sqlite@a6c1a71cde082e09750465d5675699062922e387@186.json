{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a513e591ae72d296d68a8d84eec80d72bc2f2bd9",
      "candidate_info": {
        "commit_hash": "a513e591ae72d296d68a8d84eec80d72bc2f2bd9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a513e591ae72d296d68a8d84eec80d72bc2f2bd9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/treeview.c"
        ],
        "message": "Debugging enhancment:  Show the Expr.y.pTab pointer on TK_COLUMN nodes of an expression tree in the treeview.\n\nFossilOrigin-Name: 64154ac450e4366d18e7e867841877a69c1f978d3ba9b8754cc133248966731d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/treeview.c||src/treeview.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0b9d8a1202c4220fd2ef299b6194533c1bf4018a0cd2d13da7e22c1a7de05ffa",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "432:         sqlite3TreeViewLine(pView, \"COLUMN(%d)%s%s\",",
          "433:                                     pExpr->iColumn, zFlgs, zOp2);",
          "434:       }else{",
          "437:       }",
          "438:       if( ExprHasProperty(pExpr, EP_FixedCol) ){",
          "439:         sqlite3TreeViewExpr(pView, pExpr->pLeft, 0);",
          "",
          "[Removed Lines]",
          "435:         sqlite3TreeViewLine(pView, \"{%d:%d}%s\",",
          "436:                              pExpr->iTable, pExpr->iColumn, zFlgs);",
          "",
          "[Added Lines]",
          "435:         sqlite3TreeViewLine(pView, \"{%d:%d} pTab=%p%s\",",
          "436:                         pExpr->iTable, pExpr->iColumn,",
          "437:                         pExpr->y.pTab, zFlgs);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4043cfef7590c5a8b90cfbee44b45f6ca8bbf176",
      "candidate_info": {
        "commit_hash": "4043cfef7590c5a8b90cfbee44b45f6ca8bbf176",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4043cfef7590c5a8b90cfbee44b45f6ca8bbf176",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/tclsqlite.c"
        ],
        "message": "Fix harmless compiler warnings in the TCL interface.\n\nFossilOrigin-Name: f17e72291f197a92b3e15e054271b997d45211a5a31ca4ea6c7fbb33026d5f1f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/tclsqlite.c||src/tclsqlite.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 61b4bccd2984f4c2cf50f58ef08677588e57aa7e079af07473b2e188d9ce4f52",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/tclsqlite.c||src/tclsqlite.c": [
          "File: src/tclsqlite.c -> src/tclsqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2368:       pResult = Tcl_NewListObj(0,0);",
          "2369:       for(ii=0; ii<sizeof(aDbConfig)/sizeof(aDbConfig[0]); ii++){",
          "2370:         int v = 0;",
          "2373:         Tcl_ListObjAppendElement(interp, pResult,",
          "2374:            Tcl_NewStringObj(aDbConfig[ii].zName,-1));",
          "2375:         Tcl_ListObjAppendElement(interp, pResult,",
          "",
          "[Removed Lines]",
          "2371:         int rc = sqlite3_db_config(pDb->db, aDbConfig[ii].op, -1, &v);",
          "2372:         if( rc!=SQLITE_OK ) continue;",
          "",
          "[Added Lines]",
          "2371:         sqlite3_db_config(pDb->db, aDbConfig[ii].op, -1, &v);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2377:       }",
          "2378:     }else{",
          "2379:       const char *zOpt = Tcl_GetString(objv[2]);",
          "2381:       int onoff = -1;",
          "2382:       int v = 0;",
          "2383:       if( zOpt[0]=='-' ) zOpt++;",
          "",
          "[Removed Lines]",
          "2380:       int rc;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2394:           return TCL_ERROR;",
          "2395:         }",
          "2396:       }",
          "2398:       pResult = Tcl_NewIntObj(v);",
          "2399:     }",
          "2400:     Tcl_SetObjResult(interp, pResult);",
          "",
          "[Removed Lines]",
          "2397:       rc = sqlite3_db_config(pDb->db, aDbConfig[ii].op, onoff, &v);",
          "",
          "[Added Lines]",
          "2395:       sqlite3_db_config(pDb->db, aDbConfig[ii].op, onoff, &v);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f030b376820102ff6cda49565c8b8173b2d44606",
      "candidate_info": {
        "commit_hash": "f030b376820102ff6cda49565c8b8173b2d44606",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f030b376820102ff6cda49565c8b8173b2d44606",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/window1.test"
        ],
        "message": "Internally, remove all references to a Window object that belongs to an expression in an ORDER BY clause if that expression is converted to an alias of a result-set expression. Fix for [4feb3159c6].\n\nFossilOrigin-Name: 579b66eaa0816561c6e47ea116b46f229188f0fc84c1173bfe0d21df2dff9a9a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 73056b314bd63288c662752e9bd469b70264c38031c1c857460e64fdb1ed4e2e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1243:   return 0;",
          "1244: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1246: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "1250: static int resolveRemoveWindowsCb(Walker *pWalker, Expr *pExpr){",
          "1251:   if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "1252:     Window **pp;",
          "1253:     for(pp=&pWalker->u.pSelect->pWin; *pp; pp=&(*pp)->pNextWin){",
          "1254:       if( *pp==pExpr->y.pWin ){",
          "1256:         break;",
          "1257:       }",
          "1258:     }",
          "1259:   }",
          "1260:   return WRC_Continue;",
          "1261: }",
          "1267: static void resolveRemoveWindows(Select *pSelect, Expr *pExpr){",
          "1268:   Walker sWalker;",
          "1269:   memset(&sWalker, 0, sizeof(Walker));",
          "1270:   sWalker.xExprCallback = resolveRemoveWindowsCb;",
          "1271:   sWalker.u.pSelect = pSelect;",
          "1272:   sqlite3WalkExpr(&sWalker, pExpr);",
          "1273: }",
          "1274: #else",
          "1275: # define resolveRemoveWindows(x,y)",
          "1276: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1309:     }",
          "1310:     for(j=0; j<pSelect->pEList->nExpr; j++){",
          "1311:       if( sqlite3ExprCompare(0, pE, pSelect->pEList->a[j].pExpr, -1)==0 ){",
          "1325:         pItem->u.x.iOrderByCol = j+1;",
          "1326:       }",
          "1327:     }",
          "",
          "[Removed Lines]",
          "1312: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "1313:         if( ExprHasProperty(pE, EP_WinFunc) ){",
          "1317:           Window **pp;",
          "1318:           for(pp=&pSelect->pWin; *pp; pp=&(*pp)->pNextWin){",
          "1319:             if( *pp==pE->y.pWin ){",
          "1321:             }",
          "1322:           }",
          "1323:         }",
          "1324: #endif",
          "",
          "[Added Lines]",
          "1347:         resolveRemoveWindows(pSelect, pE);",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "700:   3 101",
          "701: }",
          "704: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "703: #-------------------------------------------------------------------------",
          "704: do_execsql_test 17.0 {",
          "705:   CREATE TABLE t8(a);",
          "706:   INSERT INTO t8 VALUES(1), (2), (3);",
          "707: }",
          "709: do_execsql_test 17.1 {",
          "710:   SELECT +sum(0) OVER () ORDER BY +sum(0) OVER ();",
          "711: } {0}",
          "713: do_execsql_test 17.2 {",
          "714:   select +sum(a) OVER () FROM t8 ORDER BY +sum(a) OVER () DESC;",
          "715: } {6 6 6}",
          "717: do_execsql_test 17.3 {",
          "718:   SELECT 10+sum(a) OVER (ORDER BY a)",
          "719:   FROM t8",
          "720:   ORDER BY 10+sum(a) OVER (ORDER BY a) DESC;",
          "721: } {16 13 11}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ed457037c4ea851dd58b79df0ec965103e0e1c8d",
      "candidate_info": {
        "commit_hash": "ed457037c4ea851dd58b79df0ec965103e0e1c8d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ed457037c4ea851dd58b79df0ec965103e0e1c8d",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzcheck.c"
        ],
        "message": "Fix harmless compiler warnings in fuzzcheck\n\nFossilOrigin-Name: a82539665718c8183d9d0bb7bcb3adcb1a23294b8c30f364829a982dab89a332",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 202f9919c222ee933924c63c15ad36ec4481457b1e4d9179af14c9f284117c0c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "468: #ifdef SQLITE_EBCDIC",
          "470: #else",
          "",
          "[Removed Lines]",
          "467: static unsigned int hexToInt(unsigned int h){",
          "",
          "[Added Lines]",
          "467: static unsigned char hexToInt(unsigned int h){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "526:   unsigned char b = 0;",
          "527:   if( nIn<4 ) return -1;",
          "528:   n = (unsigned int)nIn;",
          "530:   if( a==0 ){",
          "531:     fprintf(stderr, \"Out of memory!\\n\");",
          "532:     exit(1);",
          "",
          "[Removed Lines]",
          "529:   a = sqlite3_malloc( nAlloc );",
          "",
          "[Added Lines]",
          "529:   a = sqlite3_malloc64( nAlloc );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "562:             }",
          "563:             newSize = MX_FILE_SZ;",
          "564:           }",
          "566:           if( a==0 ){",
          "567:             fprintf(stderr, \"Out of memory!\\n\");",
          "568:             exit(1);",
          "",
          "[Removed Lines]",
          "565:           a = sqlite3_realloc( a, newSize );",
          "",
          "[Added Lines]",
          "565:           a = sqlite3_realloc64( a, newSize );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "744:   memset(&cx, 0, sizeof(cx));",
          "745:   iSql = decodeDatabase((unsigned char*)aData, (int)nByte, &aDb, &nDb);",
          "746:   if( iSql<0 ) return 0;",
          "748:   if( eVerbosity>=3 ){",
          "749:     printf(",
          "750:       \"****** %d-byte input, %d-byte database, %d-byte script \"",
          "",
          "[Removed Lines]",
          "747:   nSql = nByte - iSql;",
          "",
          "[Added Lines]",
          "747:   nSql = (int)(nByte - iSql);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1454:       }else",
          "1455:       if( strcmp(z,\"version\")==0 ){",
          "1456:         int ii;",
          "1458:         printf(\"SQLite %s %s\\n\", sqlite3_libversion(), sqlite3_sourceid());",
          "1461:         }",
          "1462:         return 0;",
          "1463:       }else",
          "",
          "[Removed Lines]",
          "1457:         const char *z;",
          "1459:         for(ii=0; (z = sqlite3_compileoption_get(ii))!=0; ii++){",
          "1460:           printf(\"%s\\n\", z);",
          "",
          "[Added Lines]",
          "1457:         const char *zz;",
          "1459:         for(ii=0; (zz = sqlite3_compileoption_get(ii))!=0; ii++){",
          "1460:           printf(\"%s\\n\", zz);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "69ab18d2132720f793f9afd84528f450fce1c874",
      "candidate_info": {
        "commit_hash": "69ab18d2132720f793f9afd84528f450fce1c874",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/69ab18d2132720f793f9afd84528f450fce1c874",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/prepare.c",
          "test/dbfuzz001.test",
          "test/fts3corrupt4.test",
          "test/fts3fuzz001.test"
        ],
        "message": "More aggressive early detection of orphaned and malformed autoindexes when parsing the schema.\n\nFossilOrigin-Name: 10f9e39d6ed2413fa9abc6c82da3ed48f32a42b6190b6219fca7faf850d05113",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/prepare.c||src/prepare.c",
          "test/dbfuzz001.test||test/dbfuzz001.test",
          "test/fts3corrupt4.test||test/fts3corrupt4.test",
          "test/fts3fuzz001.test||test/fts3fuzz001.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e22d2f905fe840bea51b536ebedc9b637190ea0a37f16559668d99a61e971411",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:     Index *pIndex;",
          "121:     pIndex = sqlite3FindIndex(db, argv[0], db->aDb[iDb].zDbSName);",
          "131:     }",
          "132:   }",
          "133:   return 0;",
          "",
          "[Removed Lines]",
          "122:     if( pIndex==0 ){",
          "129:     }else if( sqlite3GetInt32(argv[1], &pIndex->tnum)==0 ){",
          "130:       corruptSchema(pData, argv[0], \"invalid rootpage\");",
          "",
          "[Added Lines]",
          "122:     if( pIndex==0",
          "123:      || sqlite3GetInt32(argv[1],&pIndex->tnum)==0",
          "124:      || pIndex->tnum<2",
          "125:     ){",
          "126:       corruptSchema(pData, argv[0], pIndex?\"invalid rootpage\":\"orphan index\");",
          "",
          "---------------"
        ],
        "test/dbfuzz001.test||test/dbfuzz001.test": [
          "File: test/dbfuzz001.test -> test/dbfuzz001.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "168:     |    496: 01 0d 3f 00 00 48 01 54 00 01 f7 01 ec 01 c5 01   ..?..H.T........",
          "169:     | end c4.db",
          "170:   }]",
          "172: } {/Fragmentation of 384 bytes reported as 0 on page 8/}",
          "174: # The DELETE query below deletes the very last cell from page 8.",
          "",
          "[Removed Lines]",
          "171:   db eval {PRAGMA integrity_check}",
          "",
          "[Added Lines]",
          "171:   db eval {PRAGMA writable_schema=on; PRAGMA integrity_check}",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "248: do_catchsql_test 5.1 {",
          "249:   SELECT * FROM t1 WHERE t1 MATCH 'abandon';",
          "252: finish_test",
          "",
          "[Removed Lines]",
          "250: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "250: } {1 {malformed database schema (sqlite_autoindey_t1_segdir_1) - orphan index}}",
          "",
          "---------------"
        ],
        "test/fts3fuzz001.test||test/fts3fuzz001.test": [
          "File: test/fts3fuzz001.test -> test/fts3fuzz001.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "90: | end c6.db",
          "91:   }]",
          "92:   catchsql {",
          "93:     INSERT INTO t1(t1) SELECT x FROM t2;",
          "94:   }",
          "95: } {1 {database disk image is malformed}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93:     PRAGMA writable_schema=on; -- disable schema corruption detection",
          "",
          "---------------"
        ]
      }
    }
  ]
}