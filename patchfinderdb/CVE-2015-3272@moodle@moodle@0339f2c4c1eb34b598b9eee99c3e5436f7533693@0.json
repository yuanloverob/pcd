{
  "cve_id": "CVE-2015-3272",
  "cve_desc": "Open redirect vulnerability in the clean_param function in lib/moodlelib.php in Moodle through 2.6.11, 2.7.x before 2.7.9, 2.8.x before 2.8.7, and 2.9.x before 2.9.1 allows remote attackers to redirect users to arbitrary web sites and conduct phishing attacks via vectors involving an HTTP Referer header that has a substring match with a local URL.",
  "repo": "moodle/moodle",
  "patch_hash": "0339f2c4c1eb34b598b9eee99c3e5436f7533693",
  "patch_info": {
    "commit_hash": "0339f2c4c1eb34b598b9eee99c3e5436f7533693",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/0339f2c4c1eb34b598b9eee99c3e5436f7533693",
    "files": [
      "lib/tests/moodlelib_test.php"
    ],
    "message": "MDL-50688 lib: small cleanup + http/https coverage.",
    "before_after_code_files": [
      "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php"
    ]
  },
  "patch_diff": {
    "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php": [
      "File: lib/tests/moodlelib_test.php -> lib/tests/moodlelib_test.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "584:     public function test_clean_param_localurl() {",
      "585:         global $CFG;",
      "587:         $this->assertSame('', clean_param('funny:thing', PARAM_LOCALURL));",
      "588:         $this->assertSame('', clean_param('http://google.com/', PARAM_LOCALURL));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "587:         $this->resetAfterTest();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "602:         $httpsroot = str_replace('http:', 'https:', $CFG->wwwroot);",
      "604:         $CFG->loginhttps = false;",
      "605:         $this->assertSame('', clean_param($httpsroot, PARAM_LOCALURL));",
      "606:         $this->assertSame('', clean_param($httpsroot . '/with/something?else=true', PARAM_LOCALURL));",
      "",
      "[Removed Lines]",
      "603:         $initialloginhttps = $CFG->loginhttps;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "608:         $this->assertSame($httpsroot, clean_param($httpsroot, PARAM_LOCALURL));",
      "609:         $this->assertSame($httpsroot . '/with/something?else=true',",
      "610:             clean_param($httpsroot . '/with/something?else=true', PARAM_LOCALURL));",
      "612:     }",
      "614:     public function test_clean_param_file() {",
      "",
      "[Removed Lines]",
      "611:         $CFG->loginhttps = $initialloginhttps;",
      "",
      "[Added Lines]",
      "615:         $CFG->loginhttps = false;",
      "616:         $CFG->wwwroot = 'http://www.example.com';",
      "617:         $this->assertSame('', clean_param('http://www.example.com.evil.net/hack.php', PARAM_LOCALURL));",
      "618:         $CFG->loginhttps = true;",
      "619:         $this->assertSame('', clean_param('https://www.example.com.evil.net/hack.php', PARAM_LOCALURL));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d031c2dcb980429044d5b31bc12792a54434b03d",
      "candidate_info": {
        "commit_hash": "d031c2dcb980429044d5b31bc12792a54434b03d",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/d031c2dcb980429044d5b31bc12792a54434b03d",
        "files": [
          "lib/moodlelib.php",
          "lib/tests/moodlelib_test.php"
        ],
        "message": "MDL-49401 moodlelib: PARAM_LOCALURL supports loginhttps",
        "before_after_code_files": [
          "lib/moodlelib.php||lib/moodlelib.php",
          "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php"
          ],
          "candidate": [
            "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/moodlelib.php||lib/moodlelib.php": [
          "File: lib/moodlelib.php -> lib/moodlelib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1033:             $param = clean_param($param, PARAM_URL);",
          "1034:             if (!empty($param)) {",
          "1035:                 if (preg_match(':^/:', $param)) {",
          "1039:                 } else {",
          "1041:                     if (validateUrlSyntax('/' . $param, 's-u-P-a-p-f+q?r?')) {",
          "",
          "[Removed Lines]",
          "1037:                 } else if (preg_match('/^'.preg_quote($CFG->wwwroot, '/').'/i', $param)) {",
          "",
          "[Added Lines]",
          "1037:                 $httpswwwroot = str_replace('http://', 'https://', $CFG->wwwroot);",
          "1041:                 } else if (preg_match('/^' . preg_quote($CFG->wwwroot, '/') . '/i', $param)) {",
          "1043:                 } else if (!empty($CFG->loginhttps) && preg_match('/^' . preg_quote($httpswwwroot, '/') . '/i', $param)) {",
          "",
          "---------------"
        ],
        "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php": [
          "File: lib/tests/moodlelib_test.php -> lib/tests/moodlelib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "584:     public function test_clean_param_localurl() {",
          "585:         global $CFG;",
          "586:         $this->assertSame('', clean_param('http://google.com/', PARAM_LOCALURL));",
          "587:         $this->assertSame('', clean_param('http://some.very.long.and.silly.domain/with/a/path/', PARAM_LOCALURL));",
          "588:         $this->assertSame(clean_param($CFG->wwwroot, PARAM_LOCALURL), $CFG->wwwroot);",
          "589:         $this->assertSame('/just/a/path', clean_param('/just/a/path', PARAM_LOCALURL));",
          "591:         $this->assertSame('course/view.php?id=3', clean_param('course/view.php?id=3', PARAM_LOCALURL));",
          "592:     }",
          "594:     public function test_clean_param_file() {",
          "",
          "[Removed Lines]",
          "590:         $this->assertSame('', clean_param('funny:thing', PARAM_LOCALURL));",
          "",
          "[Added Lines]",
          "587:         $this->assertSame('', clean_param('funny:thing', PARAM_LOCALURL));",
          "589:         $this->assertSame('', clean_param('https://google.com/?test=true', PARAM_LOCALURL));",
          "594:         $this->assertSame($CFG->wwwroot . '/with/something?else=true',",
          "595:             clean_param($CFG->wwwroot . '/with/something?else=true', PARAM_LOCALURL));",
          "602:         $httpsroot = str_replace('http:', 'https:', $CFG->wwwroot);",
          "603:         $initialloginhttps = $CFG->loginhttps;",
          "604:         $CFG->loginhttps = false;",
          "605:         $this->assertSame('', clean_param($httpsroot, PARAM_LOCALURL));",
          "606:         $this->assertSame('', clean_param($httpsroot . '/with/something?else=true', PARAM_LOCALURL));",
          "607:         $CFG->loginhttps = true;",
          "608:         $this->assertSame($httpsroot, clean_param($httpsroot, PARAM_LOCALURL));",
          "609:         $this->assertSame($httpsroot . '/with/something?else=true',",
          "610:             clean_param($httpsroot . '/with/something?else=true', PARAM_LOCALURL));",
          "611:         $CFG->loginhttps = $initialloginhttps;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "57103539762b1d6486e82bf81fffb1af93a3f15c",
      "candidate_info": {
        "commit_hash": "57103539762b1d6486e82bf81fffb1af93a3f15c",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/57103539762b1d6486e82bf81fffb1af93a3f15c",
        "files": [
          "lib/tests/moodlelib_test.php"
        ],
        "message": "MDL-50688 lib: small cleanup + http/https coverage.",
        "before_after_code_files": [
          "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php"
          ],
          "candidate": [
            "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php": [
          "File: lib/tests/moodlelib_test.php -> lib/tests/moodlelib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "584:     public function test_clean_param_localurl() {",
          "585:         global $CFG;",
          "587:         $this->assertSame('', clean_param('funny:thing', PARAM_LOCALURL));",
          "588:         $this->assertSame('', clean_param('http://google.com/', PARAM_LOCALURL));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "587:         $this->resetAfterTest();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "602:         $httpsroot = str_replace('http:', 'https:', $CFG->wwwroot);",
          "604:         $CFG->loginhttps = false;",
          "605:         $this->assertSame('', clean_param($httpsroot, PARAM_LOCALURL));",
          "606:         $this->assertSame('', clean_param($httpsroot . '/with/something?else=true', PARAM_LOCALURL));",
          "",
          "[Removed Lines]",
          "603:         $initialloginhttps = $CFG->loginhttps;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "608:         $this->assertSame($httpsroot, clean_param($httpsroot, PARAM_LOCALURL));",
          "609:         $this->assertSame($httpsroot . '/with/something?else=true',",
          "610:             clean_param($httpsroot . '/with/something?else=true', PARAM_LOCALURL));",
          "612:     }",
          "614:     public function test_clean_param_file() {",
          "",
          "[Removed Lines]",
          "611:         $CFG->loginhttps = $initialloginhttps;",
          "",
          "[Added Lines]",
          "615:         $CFG->loginhttps = false;",
          "616:         $CFG->wwwroot = 'http://www.example.com';",
          "617:         $this->assertSame('', clean_param('http://www.example.com.evil.net/hack.php', PARAM_LOCALURL));",
          "618:         $CFG->loginhttps = true;",
          "619:         $this->assertSame('', clean_param('https://www.example.com.evil.net/hack.php', PARAM_LOCALURL));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a8753fb85a0a5d2cd716bf38b139a227dcded2b2",
      "candidate_info": {
        "commit_hash": "a8753fb85a0a5d2cd716bf38b139a227dcded2b2",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/a8753fb85a0a5d2cd716bf38b139a227dcded2b2",
        "files": [
          "lib/tests/moodlelib_test.php"
        ],
        "message": "MDL-50688 lib: small cleanup + http/https coverage.",
        "before_after_code_files": [
          "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php"
          ],
          "candidate": [
            "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php": [
          "File: lib/tests/moodlelib_test.php -> lib/tests/moodlelib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "584:     public function test_clean_param_localurl() {",
          "585:         global $CFG;",
          "587:         $this->assertSame('', clean_param('funny:thing', PARAM_LOCALURL));",
          "588:         $this->assertSame('', clean_param('http://google.com/', PARAM_LOCALURL));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "587:         $this->resetAfterTest();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "602:         $httpsroot = str_replace('http:', 'https:', $CFG->wwwroot);",
          "604:         $CFG->loginhttps = false;",
          "605:         $this->assertSame('', clean_param($httpsroot, PARAM_LOCALURL));",
          "606:         $this->assertSame('', clean_param($httpsroot . '/with/something?else=true', PARAM_LOCALURL));",
          "",
          "[Removed Lines]",
          "603:         $initialloginhttps = $CFG->loginhttps;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "608:         $this->assertSame($httpsroot, clean_param($httpsroot, PARAM_LOCALURL));",
          "609:         $this->assertSame($httpsroot . '/with/something?else=true',",
          "610:             clean_param($httpsroot . '/with/something?else=true', PARAM_LOCALURL));",
          "612:     }",
          "614:     public function test_clean_param_file() {",
          "",
          "[Removed Lines]",
          "611:         $CFG->loginhttps = $initialloginhttps;",
          "",
          "[Added Lines]",
          "615:         $CFG->loginhttps = false;",
          "616:         $CFG->wwwroot = 'http://www.example.com';",
          "617:         $this->assertSame('', clean_param('http://www.example.com.evil.net/hack.php', PARAM_LOCALURL));",
          "618:         $CFG->loginhttps = true;",
          "619:         $this->assertSame('', clean_param('https://www.example.com.evil.net/hack.php', PARAM_LOCALURL));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "630b8fdaea0ce1d0f263c29212fffbd137ca49e6",
      "candidate_info": {
        "commit_hash": "630b8fdaea0ce1d0f263c29212fffbd137ca49e6",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/630b8fdaea0ce1d0f263c29212fffbd137ca49e6",
        "files": [
          "lib/tests/moodlelib_test.php"
        ],
        "message": "MDL-50688 lib: small cleanup + http/https coverage.",
        "before_after_code_files": [
          "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php"
          ],
          "candidate": [
            "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/tests/moodlelib_test.php||lib/tests/moodlelib_test.php": [
          "File: lib/tests/moodlelib_test.php -> lib/tests/moodlelib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "584:     public function test_clean_param_localurl() {",
          "585:         global $CFG;",
          "587:         $this->assertSame('', clean_param('funny:thing', PARAM_LOCALURL));",
          "588:         $this->assertSame('', clean_param('http://google.com/', PARAM_LOCALURL));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "587:         $this->resetAfterTest();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "602:         $httpsroot = str_replace('http:', 'https:', $CFG->wwwroot);",
          "604:         $CFG->loginhttps = false;",
          "605:         $this->assertSame('', clean_param($httpsroot, PARAM_LOCALURL));",
          "606:         $this->assertSame('', clean_param($httpsroot . '/with/something?else=true', PARAM_LOCALURL));",
          "",
          "[Removed Lines]",
          "603:         $initialloginhttps = $CFG->loginhttps;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "608:         $this->assertSame($httpsroot, clean_param($httpsroot, PARAM_LOCALURL));",
          "609:         $this->assertSame($httpsroot . '/with/something?else=true',",
          "610:             clean_param($httpsroot . '/with/something?else=true', PARAM_LOCALURL));",
          "612:     }",
          "614:     public function test_clean_param_file() {",
          "",
          "[Removed Lines]",
          "611:         $CFG->loginhttps = $initialloginhttps;",
          "",
          "[Added Lines]",
          "615:         $CFG->loginhttps = false;",
          "616:         $CFG->wwwroot = 'http://www.example.com';",
          "617:         $this->assertSame('', clean_param('http://www.example.com.evil.net/hack.php', PARAM_LOCALURL));",
          "618:         $CFG->loginhttps = true;",
          "619:         $this->assertSame('', clean_param('https://www.example.com.evil.net/hack.php', PARAM_LOCALURL));",
          "",
          "---------------"
        ]
      }
    }
  ]
}