{
  "cve_id": "CVE-2010-3844",
  "cve_desc": "An unchecked sscanf() call in ettercap before 0.7.5 allows an insecure temporary settings file to overflow a static-sized buffer on the stack.",
  "repo": "Ettercap/ettercap",
  "patch_hash": "4ef3ede30181eca9add74305ad26dbcb0c3686a0",
  "patch_info": {
    "commit_hash": "4ef3ede30181eca9add74305ad26dbcb0c3686a0",
    "repo": "Ettercap/ettercap",
    "commit_url": "https://github.com/Ettercap/ettercap/commit/4ef3ede30181eca9add74305ad26dbcb0c3686a0",
    "files": [
      "src/interfaces/gtk/ec_gtk_conf.c",
      "src/interfaces/gtk/ec_gtk_mitm.c"
    ],
    "message": "More changes to mitigate: CVE-2010-3843 CVE-2010-3844",
    "before_after_code_files": [
      "src/interfaces/gtk/ec_gtk_conf.c||src/interfaces/gtk/ec_gtk_conf.c",
      "src/interfaces/gtk/ec_gtk_mitm.c||src/interfaces/gtk/ec_gtk_mitm.c"
    ]
  },
  "patch_diff": {
    "src/interfaces/gtk/ec_gtk_conf.c||src/interfaces/gtk/ec_gtk_conf.c": [
      "File: src/interfaces/gtk/ec_gtk_conf.c -> src/interfaces/gtk/ec_gtk_conf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "72: #ifdef OS_WINDOWS",
      "73:    path = ec_win_get_user_dir();",
      "74: #else",
      "78: #endif",
      "80:    filename = g_build_filename(path, \".ettercap_gtk\", NULL);",
      "",
      "[Removed Lines]",
      "77:    path = g_get_tmp_dir();",
      "",
      "[Added Lines]",
      "75:    path = g_get_home_dir();",
      "",
      "---------------"
    ],
    "src/interfaces/gtk/ec_gtk_mitm.c||src/interfaces/gtk/ec_gtk_mitm.c": [
      "File: src/interfaces/gtk/ec_gtk_mitm.c -> src/interfaces/gtk/ec_gtk_mitm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "181:       snprintf(params, 6, \"icmp:\");",
      "187:       gtkui_start_mitm();",
      "188:    }",
      "",
      "[Removed Lines]",
      "183:       strncat(params, gtk_entry_get_text(GTK_ENTRY(entry1)), PARAMS_LEN);",
      "184:       strncat(params, \"/\", PARAMS_LEN);",
      "185:       strncat(params, gtk_entry_get_text(GTK_ENTRY(entry2)), PARAMS_LEN);",
      "",
      "[Added Lines]",
      "183:       strncat(params, gtk_entry_get_text(GTK_ENTRY(entry1)), ETH_ASCII_ADDR_LEN);",
      "184:       strncat(params, \"/\", 1);",
      "185:       strncat(params, gtk_entry_get_text(GTK_ENTRY(entry2)), IP6_ASCII_ADDR_LEN);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "490035a263fe836f22ded13fe446e902a32672f0",
      "candidate_info": {
        "commit_hash": "490035a263fe836f22ded13fe446e902a32672f0",
        "repo": "Ettercap/ettercap",
        "commit_url": "https://github.com/Ettercap/ettercap/commit/490035a263fe836f22ded13fe446e902a32672f0",
        "files": [
          "src/interfaces/gtk/ec_gtk_mitm.c"
        ],
        "message": "another fix for issue 18 https://github.com/Ettercap/ettercap/issues/18 \tmodified:   src/interfaces/gtk/ec_gtk_mitm.c",
        "before_after_code_files": [
          "src/interfaces/gtk/ec_gtk_mitm.c||src/interfaces/gtk/ec_gtk_mitm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/interfaces/gtk/ec_gtk_mitm.c||src/interfaces/gtk/ec_gtk_mitm.c"
          ],
          "candidate": [
            "src/interfaces/gtk/ec_gtk_mitm.c||src/interfaces/gtk/ec_gtk_mitm.c"
          ]
        }
      },
      "candidate_diff": {
        "src/interfaces/gtk/ec_gtk_mitm.c||src/interfaces/gtk/ec_gtk_mitm.c": [
          "File: src/interfaces/gtk/ec_gtk_mitm.c -> src/interfaces/gtk/ec_gtk_mitm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:    gboolean oneway = FALSE;",
          "52:    DEBUG_MSG(\"gtk_arp_poisoning\");",
          "55:    dialog = gtk_dialog_new_with_buttons(\"MITM Attack: ARP Poisoning\", GTK_WINDOW (window),",
          "56:                                         GTK_DIALOG_MODAL, GTK_STOCK_OK, GTK_RESPONSE_OK,",
          "",
          "[Removed Lines]",
          "53:    memset(params, '\\0', PARAMS_LEN+1);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:          ui_error(\"You must select at least one ARP mode\");",
          "109:          return;",
          "110:       }",
          "113:       gtkui_start_mitm();",
          "114:    }",
          "",
          "[Removed Lines]",
          "112:       snprintf(params, PARAMS_LEN, \"arp:%s%s%s\", s_remote, comma, s_oneway);",
          "",
          "[Added Lines]",
          "112:       snprintf(params, PARAMS_LEN+1, \"arp:%s%s%s\", s_remote, comma, s_oneway);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "177:    response = gtk_dialog_run(GTK_DIALOG(dialog));",
          "178:    if(response == GTK_RESPONSE_OK) {",
          "179:       gtk_widget_hide(dialog);",
          "183:                        gtk_entry_get_text(GTK_ENTRY(entry2)));",
          "185:       gtkui_start_mitm();",
          "",
          "[Removed Lines]",
          "180:       memset(params, '\\0', PARAMS_LEN);",
          "182:       snprintf(params, PARAMS_LEN, \"icmp:%s/%s\",  gtk_entry_get_text(GTK_ENTRY(entry1)),",
          "",
          "[Added Lines]",
          "183:       snprintf(params, PARAMS_LEN+1, \"icmp:%s/%s\",  gtk_entry_get_text(GTK_ENTRY(entry1)),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "250:   tree = \"tree\";",
          "251:       }",
          "254:       gtkui_start_mitm();",
          "255:    }",
          "",
          "[Removed Lines]",
          "253:       snprintf(params, PARAMS_LEN, \"port:%s%s%s\", s_remote, comma, tree);",
          "",
          "[Added Lines]",
          "254:       snprintf(params, PARAMS_LEN+1, \"port:%s%s%s\", s_remote, comma, tree);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "267:    gint response = 0;",
          "269:    DEBUG_MSG(\"gtk_dhcp_spoofing\");",
          "272:    dialog = gtk_dialog_new_with_buttons(\"MITM Attack: DHCP Spoofing\", GTK_WINDOW (window),",
          "273:                                         GTK_DIALOG_MODAL, GTK_STOCK_OK, GTK_RESPONSE_OK,",
          "",
          "[Removed Lines]",
          "270:    memset(params, '\\0', PARAMS_LEN+1);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "328:    response = gtk_dialog_run(GTK_DIALOG(dialog));",
          "329:    if(response == GTK_RESPONSE_OK) {",
          "330:       gtk_widget_hide(dialog);",
          "334:                        gtk_entry_get_text(GTK_ENTRY(entry2)), gtk_entry_get_text(GTK_ENTRY(entry3)));",
          "336:       DEBUG_MSG(\"ec_gtk_dhcp: DHCP MITM %s\", params);",
          "",
          "[Removed Lines]",
          "331:       memset(params, '\\0', PARAMS_LEN);",
          "333:       snprintf(params, PARAMS_LEN, \"dhcp:%s/%s/%s\", gtk_entry_get_text(GTK_ENTRY(entry1)),",
          "",
          "[Added Lines]",
          "334:       snprintf(params, PARAMS_LEN+1, \"dhcp:%s/%s/%s\", gtk_entry_get_text(GTK_ENTRY(entry1)),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "747330ec12462d7f74dec76ae31031b6f5ebb42e",
      "candidate_info": {
        "commit_hash": "747330ec12462d7f74dec76ae31031b6f5ebb42e",
        "repo": "Ettercap/ettercap",
        "commit_url": "https://github.com/Ettercap/ettercap/commit/747330ec12462d7f74dec76ae31031b6f5ebb42e",
        "files": [
          "src/interfaces/gtk/ec_gtk_mitm.c",
          "src/mitm/ec_dhcp_spoofing.c",
          "src/mitm/ec_icmp_redirect.c"
        ],
        "message": "Fixed GTK MITM to use snprintf to avoid stack smashing. Modified DHCP and ICMP GTK MITM to allow targets to use new target format (additional /). TODO: Need to change the targets in case IPv6 addresses are used.",
        "before_after_code_files": [
          "src/interfaces/gtk/ec_gtk_mitm.c||src/interfaces/gtk/ec_gtk_mitm.c",
          "src/mitm/ec_dhcp_spoofing.c||src/mitm/ec_dhcp_spoofing.c",
          "src/mitm/ec_icmp_redirect.c||src/mitm/ec_icmp_redirect.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/interfaces/gtk/ec_gtk_mitm.c||src/interfaces/gtk/ec_gtk_mitm.c"
          ],
          "candidate": [
            "src/interfaces/gtk/ec_gtk_mitm.c||src/interfaces/gtk/ec_gtk_mitm.c"
          ]
        }
      },
      "candidate_diff": {
        "src/interfaces/gtk/ec_gtk_mitm.c||src/interfaces/gtk/ec_gtk_mitm.c": [
          "File: src/interfaces/gtk/ec_gtk_mitm.c -> src/interfaces/gtk/ec_gtk_mitm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:    response = gtk_dialog_run(GTK_DIALOG(dialog));",
          "178:    if(response == GTK_RESPONSE_OK) {",
          "179:       gtk_widget_hide(dialog);",
          "187:       gtkui_start_mitm();",
          "188:    }",
          "",
          "[Removed Lines]",
          "181:       snprintf(params, 6, \"icmp:\");",
          "183:       strncat(params, gtk_entry_get_text(GTK_ENTRY(entry1)), ETH_ASCII_ADDR_LEN);",
          "184:       strncat(params, \"/\", 1);",
          "185:       strncat(params, gtk_entry_get_text(GTK_ENTRY(entry2)), IP6_ASCII_ADDR_LEN);",
          "",
          "[Added Lines]",
          "180:       memset(params, '\\0', PARAMS_LEN);",
          "182:       snprintf(params, PARAMS_LEN-1, \"icmp:%s/%s\",  gtk_entry_get_text(GTK_ENTRY(entry1)),",
          "183:                        gtk_entry_get_text(GTK_ENTRY(entry2)));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "329:    response = gtk_dialog_run(GTK_DIALOG(dialog));",
          "330:    if(response == GTK_RESPONSE_OK) {",
          "331:       gtk_widget_hide(dialog);",
          "342:       gtkui_start_mitm();",
          "343:    }",
          "",
          "[Removed Lines]",
          "333:       snprintf(params, 6, \"dhcp:\");",
          "336:       strncat(params, gtk_entry_get_text(GTK_ENTRY(entry1)), PARAMS_LEN);",
          "337:       strncat(params, \"/\", PARAMS_LEN);",
          "338:       strncat(params, gtk_entry_get_text(GTK_ENTRY(entry2)), PARAMS_LEN);",
          "339:       strncat(params, \"/\", PARAMS_LEN);",
          "340:       strncat(params, gtk_entry_get_text(GTK_ENTRY(entry3)), PARAMS_LEN);",
          "",
          "[Added Lines]",
          "330:       memset(params, '\\0', PARAMS_LEN);",
          "332:       snprintf(params, PARAMS_LEN-1, \"dhcp:%s/%s/%s\", gtk_entry_get_text(GTK_ENTRY(entry1)),",
          "333:                        gtk_entry_get_text(GTK_ENTRY(entry2)), gtk_entry_get_text(GTK_ENTRY(entry3)));",
          "335:       DEBUG_MSG(\"ec_gtk_dhcp: DHCP MITM %s\", params);",
          "",
          "---------------"
        ],
        "src/mitm/ec_dhcp_spoofing.c||src/mitm/ec_dhcp_spoofing.c": [
          "File: src/mitm/ec_dhcp_spoofing.c -> src/mitm/ec_dhcp_spoofing.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:    for (p = strsep(&args, \"/\"); p != NULL; p = strsep(&args, \"/\")) {",
          "95:       if (i == 1) {",
          "101:          if (compile_target(tmp, &dhcp_ip_pool) != ESUCCESS)",
          "102:             break;",
          "",
          "[Removed Lines]",
          "96:          char tmp[strlen(p)+3];",
          "99:          snprintf(tmp, strlen(p)+3, \"/%s/\", p);",
          "",
          "[Added Lines]",
          "96:          char tmp[strlen(p)+4];",
          "99:          snprintf(tmp, strlen(p)+4, \"/%s//\", p);",
          "",
          "---------------"
        ],
        "src/mitm/ec_icmp_redirect.c||src/mitm/ec_icmp_redirect.c": [
          "File: src/mitm/ec_icmp_redirect.c -> src/mitm/ec_icmp_redirect.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:    if (!strcmp(args, \"\")) {",
          "73:       SEMIFATAL_ERROR(\"ICMP redirect needs a parameter.\\n\");",
          "74:    } else {",
          "80:       if (compile_target(tmp, &redirected_gw) != ESUCCESS)",
          "81:          SEMIFATAL_ERROR(\"Wrong target parameter\");",
          "",
          "[Removed Lines]",
          "75:       char tmp[strlen(args)+2];",
          "78:       snprintf(tmp, strlen(args)+2, \"%s/\", args);",
          "",
          "[Added Lines]",
          "75:       char tmp[strlen(args)+3];",
          "78:       snprintf(tmp, strlen(args)+3, \"%s//\", args);",
          "",
          "---------------"
        ]
      }
    }
  ]
}