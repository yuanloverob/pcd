{
  "cve_id": "CVE-2019-10664",
  "cve_desc": "Domoticz before 4.10578 allows SQL Injection via the idx parameter in CWebServer::GetFloorplanImage in WebServer.cpp.",
  "repo": "domoticz/domoticz",
  "patch_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
  "patch_info": {
    "commit_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/ee70db46f81afa582c96b887b73bcd2a86feda00",
    "files": [
      "main/WebServer.cpp"
    ],
    "message": "Fixed possible SQL Injection Vulnerability (Thanks to Fabio Carretto!)",
    "before_after_code_files": [
      "main/WebServer.cpp||main/WebServer.cpp"
    ]
  },
  "patch_diff": {
    "main/WebServer.cpp||main/WebServer.cpp": [
      "File: main/WebServer.cpp -> main/WebServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10772:     return;",
      "10773:    }",
      "10774:    std::vector<std::vector<std::string> > result;",
      "10776:    if (result.empty())",
      "10777:     return;",
      "10778:    reply::set_content(&rep, result[0][0].begin(), result[0][0].end());",
      "",
      "[Removed Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%s\", idx.c_str());",
      "",
      "[Added Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%d\", atol(idx.c_str()));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9c20299997472d7ca279fcd2b35a56a8e5a382ef",
      "candidate_info": {
        "commit_hash": "9c20299997472d7ca279fcd2b35a56a8e5a382ef",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/9c20299997472d7ca279fcd2b35a56a8e5a382ef",
        "files": [
          "main/SQLHelper.cpp",
          "main/SQLHelper.h"
        ],
        "message": "Fixed fatal Signal 6 after Database Restore (#2787)",
        "before_after_code_files": [
          "main/SQLHelper.cpp||main/SQLHelper.cpp",
          "main/SQLHelper.h||main/SQLHelper.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/SQLHelper.cpp||main/SQLHelper.cpp": [
          "File: main/SQLHelper.cpp -> main/SQLHelper.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "645: CSQLHelper::~CSQLHelper(void)",
          "646: {",
          "653:  CloseDatabase();",
          "654: }",
          "",
          "[Removed Lines]",
          "647:  if (m_thread)",
          "648:  {",
          "649:   RequestStop();",
          "650:   m_thread->join();",
          "651:   m_thread.reset();",
          "652:  }",
          "",
          "[Added Lines]",
          "647:  StopThread();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3081:  }",
          "3082: }",
          "3084: bool CSQLHelper::StartThread()",
          "3085: {",
          "3086:  m_thread = std::make_shared<std::thread>(&CSQLHelper::Do_Work, this);",
          "3087:  SetThreadName(m_thread->native_handle(), \"SQLHelper\");",
          "3088:  return (m_thread != NULL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3079: void CSQLHelper::StopThread()",
          "3080: {",
          "3081:  if (m_thread)",
          "3082:  {",
          "3083:   RequestStop();",
          "3084:   m_thread->join();",
          "3085:   m_thread.reset();",
          "3086:  }",
          "3087: }",
          "3091:  RequestStart();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7195:  sqlite3_close(dbase_restore);",
          "7197:  std::remove(outputfile.c_str());",
          "7199:  sqlite3_close(m_dbase);",
          "7200:  m_dbase = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7205:  StopThread();",
          "",
          "---------------"
        ],
        "main/SQLHelper.h||main/SQLHelper.h": [
          "File: main/SQLHelper.h -> main/SQLHelper.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "442:  std::shared_ptr<std::thread> m_thread;",
          "443:  std::mutex m_background_task_mutex;",
          "444:  bool StartThread();",
          "445:  void Do_Work();",
          "447:  bool SwitchLightFromTasker(const std::string &idx, const std::string &switchcmd, const std::string &level, const std::string &color);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "445:  void StopThread();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f03fc6682f95e86792ffe2e4bcc1b692e5ab042f",
      "candidate_info": {
        "commit_hash": "f03fc6682f95e86792ffe2e4bcc1b692e5ab042f",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/f03fc6682f95e86792ffe2e4bcc1b692e5ab042f",
        "files": [
          "hardware/MQTT.cpp"
        ],
        "message": "MQTT Uservariables, Incorrect Field requested (fixes #2921)",
        "before_after_code_files": [
          "hardware/MQTT.cpp||hardware/MQTT.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/MQTT.cpp||hardware/MQTT.cpp": [
          "File: hardware/MQTT.cpp -> hardware/MQTT.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "166:   else if (szCommand == \"setuservariable\")",
          "167:   {",
          "168:    idx = (uint64_t)root[\"idx\"].asInt64();",
          "170:    if (result.empty())",
          "171:    {",
          "172:     _log.Log(LOG_ERROR, \"MQTT: unknown idx received! (idx %\" PRIu64 \")\", idx);",
          "",
          "[Removed Lines]",
          "169:    result = m_sql.safe_query(\"SELECT Name, VarType FROM UserVariables WHERE (ID==%\" PRIu64 \")\", idx);",
          "",
          "[Added Lines]",
          "169:    result = m_sql.safe_query(\"SELECT Name, ValueType FROM UserVariables WHERE (ID==%\" PRIu64 \")\", idx);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "521a825b229c4f8e66d33ea59f1e551d674e63c2",
      "candidate_info": {
        "commit_hash": "521a825b229c4f8e66d33ea59f1e551d674e63c2",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/521a825b229c4f8e66d33ea59f1e551d674e63c2",
        "files": [
          "www/app/TemperatureCustomLogController.js"
        ],
        "message": "Removed debug line",
        "before_after_code_files": [
          "www/app/TemperatureCustomLogController.js||www/app/TemperatureCustomLogController.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "www/app/TemperatureCustomLogController.js||www/app/TemperatureCustomLogController.js": [
          "File: www/app/TemperatureCustomLogController.js -> www/app/TemperatureCustomLogController.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:                             formatter: function () {",
          "108:                                 var unit = '';",
          "109:                                 var baseName = this.series.name.split(':')[1];",
          "111:                                 if (baseName == $.t(\"Humidity\")) {",
          "112:                                     unit = '%'",
          "113:                                 } else if (baseName == $.t(\"Barometer\")) {",
          "",
          "[Removed Lines]",
          "110:                                 alert(this.series.name);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "66f5ae1ea57e62629762b9d14531e6eb1e708489",
      "candidate_info": {
        "commit_hash": "66f5ae1ea57e62629762b9d14531e6eb1e708489",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/66f5ae1ea57e62629762b9d14531e6eb1e708489",
        "files": [
          "webserver/request_parser.cpp"
        ],
        "message": "request parsing now checking headers in lowercase",
        "before_after_code_files": [
          "webserver/request_parser.cpp||webserver/request_parser.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "webserver/request_parser.cpp||webserver/request_parser.cpp": [
          "File: webserver/request_parser.cpp -> webserver/request_parser.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include \"stdafx.h\"",
          "11: #include \"request_parser.hpp\"",
          "12: #include \"request.hpp\"",
          "14: namespace http {",
          "15: namespace server {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: #include <algorithm>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "300:      req.content_length = 0;",
          "301:      for( std::vector<header>::iterator ph = req.headers.begin();  ph != req.headers.end(); ++ph )",
          "302:      {",
          "304:        req.content_length = atoi( (*ph).value.c_str());",
          "305:        break;",
          "306:       }",
          "",
          "[Removed Lines]",
          "303:       if( (*ph).name == \"Content-Length\" ) {",
          "",
          "[Added Lines]",
          "304:       std::string hname = (*ph).name;",
          "305:       std::transform(hname.begin(), hname.end(), hname.begin(), ::tolower);",
          "306:       if( hname == \"content-length\" ) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "002e3bf6e9f4f6f97de265c5440c88f2a365ccf7",
      "candidate_info": {
        "commit_hash": "002e3bf6e9f4f6f97de265c5440c88f2a365ccf7",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/002e3bf6e9f4f6f97de265c5440c88f2a365ccf7",
        "files": [
          "www/app/DashboardController.js",
          "www/app/DevicesController.js",
          "www/app/UtilityController.js",
          "www/app/app.js",
          "www/app/devices/deviceFactory.js",
          "www/app/log/DeviceLog.js",
          "www/app/log/GraphLog.js",
          "www/app/log/TemperatureReport.js",
          "www/app/report/CounterReport.html",
          "www/app/report/CounterReport.js",
          "www/app/report/DeviceReport.html",
          "www/app/report/DeviceReport.js",
          "www/app/report/EnergyMultiCounterReport.html",
          "www/app/report/EnergyMultiCounterReport.js",
          "www/app/report/TemperatureReport.html",
          "www/app/report/TemperatureReport.js",
          "www/app/report/helpers.js",
          "www/html5.appcache",
          "www/index.html",
          "www/js/domoticz.js",
          "www/js/domoticzdevices.js",
          "www/views/log/device_temperature_report.html"
        ],
        "message": "Reverting PR #2729",
        "before_after_code_files": [
          "www/app/DashboardController.js||www/app/DashboardController.js",
          "www/app/DevicesController.js||www/app/DevicesController.js",
          "www/app/UtilityController.js||www/app/UtilityController.js",
          "www/app/app.js||www/app/app.js",
          "www/app/devices/deviceFactory.js||www/app/devices/deviceFactory.js",
          "www/app/log/DeviceLog.js||www/app/log/DeviceLog.js",
          "www/app/log/GraphLog.js||www/app/log/GraphLog.js",
          "www/app/report/TemperatureReport.js||www/app/log/TemperatureReport.js",
          "www/app/report/CounterReport.html||www/app/report/CounterReport.html",
          "www/app/report/CounterReport.js||www/app/report/CounterReport.js",
          "www/app/report/DeviceReport.html||www/app/report/DeviceReport.html",
          "www/app/report/DeviceReport.js||www/app/report/DeviceReport.js",
          "www/app/report/EnergyMultiCounterReport.html||www/app/report/EnergyMultiCounterReport.html",
          "www/app/report/EnergyMultiCounterReport.js||www/app/report/EnergyMultiCounterReport.js",
          "www/app/report/TemperatureReport.html||www/app/report/TemperatureReport.html",
          "www/app/report/helpers.js||www/app/report/helpers.js",
          "www/html5.appcache||www/html5.appcache",
          "www/index.html||www/index.html",
          "www/js/domoticz.js||www/js/domoticz.js",
          "www/js/domoticzdevices.js||www/js/domoticzdevices.js",
          "www/views/log/device_temperature_report.html||www/views/log/device_temperature_report.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "www/app/DashboardController.js||www/app/DashboardController.js": [
          "File: www/app/DashboardController.js -> www/app/DashboardController.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "982:         if (typeof obj != 'undefined') {",
          "983:          var vname = item.Name;",
          "984:          if (($scope.config.DashboardType == 2) || (window.myglobals.ismobile == true)) {",
          "986:          }",
          "987:          if (($scope.config.DashboardType == 2) || (window.myglobals.ismobile == true)) {",
          "988:           var status = \"\";",
          "",
          "[Removed Lines]",
          "985:           var vname = '<a href=\"#/Devices/' + item.idx + '/Log\"><img src=\"images/next.png\" height=\"16\" width=\"16\"></a>' + \" \" + item.Name;",
          "",
          "[Added Lines]",
          "985:           var vname = '<a href=\"#/Devices/' + item.idx + '/Log\"><img src=\"images/next.png\" height=\"16\" width=\"16\">' + \" \" + item.Name+'</a>';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3477:         if (($scope.config.DashboardType == 2) || (window.myglobals.ismobile == true)) {",
          "3478:          var vname = item.Name;",
          "3479:          if (typeof item.Counter != 'undefined') {",
          "3481:          }",
          "3482:          else if ((item.Type == \"Current\") || (item.Type == \"Current/Energy\")) {",
          "3483:           vname = '<img src=\"images/next.png\" onclick=\"ShowCurrentLog(\\'#dashcontent\\',\\'ShowFavorites\\',' + item.idx + ',\\'' + escape(item.Name) + '\\', ' + item.displaytype + ');\" height=\"16\" width=\"16\">' + \" \" + item.Name;",
          "3484:          }",
          "3485:          else if ((item.Type == \"Energy\") || (item.SubType == \"kWh\") || (item.SubType == \"Power\")) {",
          "3487:          }",
          "3488:          else if (item.Type == \"Air Quality\") {",
          "3489:           vname = '<img src=\"images/next.png\" onclick=\"ShowAirQualityLog(\\'#dashcontent\\',\\'ShowFavorites\\',' + item.idx + ',\\'' + escape(item.Name) + '\\');\" height=\"16\" width=\"16\">' + \" \" + item.Name;",
          "",
          "[Removed Lines]",
          "3480:           vname = '<a href=\"#/Devices/' + item.idx + '/Log\"><img src=\"images/next.png\" height=\"16\" width=\"16\"></a>' + \" \" + item.Name;",
          "3486:                                         vname = '<a href=\"#/Devices/' + item.idx + '/Log\"><img src=\"images/next.png\" height=\"16\" width=\"16\"></a>' + \" \" + item.Name;",
          "",
          "[Added Lines]",
          "3480:           if (item.Type == \"RFXMeter\") {",
          "3481:            vname = '<img src=\"images/next.png\" onclick=\"ShowCounterLog(\\'#dashcontent\\',\\'ShowFavorites\\',' + item.idx + ',\\'' + escape(item.Name) + '\\', ' + item.SwitchTypeVal + ');\" height=\"16\" width=\"16\">' + \" \" + item.Name;",
          "3482:           }",
          "3483:           else {",
          "3484:            if ((item.Type == \"P1 Smart Meter\") && (item.SubType == \"Energy\")) {",
          "3485:             vname = '<img src=\"images/next.png\" onclick=\"ShowSmartLog(\\'#dashcontent\\',\\'ShowFavorites\\',' + item.idx + ',\\'' + escape(item.Name) + '\\', ' + item.SwitchTypeVal + ');\" height=\"16\" width=\"16\">' + \" \" + item.Name;",
          "3486:            }",
          "3487:            else if ((item.Type == \"P1 Smart Meter\") && (item.SubType == \"Gas\")) {",
          "3488:             vname = '<img src=\"images/next.png\" onclick=\"ShowCounterLog(\\'#dashcontent\\',\\'ShowFavorites\\',' + item.idx + ',\\'' + escape(item.Name) + '\\', ' + item.SwitchTypeVal + ');\" height=\"16\" width=\"16\">' + \" \" + item.Name;",
          "3489:            }",
          "3490:            else if ((item.Type == \"YouLess Meter\") && (item.SwitchTypeVal == 0 || item.SwitchTypeVal == 4)) {",
          "3491:             vname = '<img src=\"images/next.png\" onclick=\"ShowCounterLogSpline(\\'#dashcontent\\',\\'ShowFavorites\\',' + item.idx + ',\\'' + escape(item.Name) + '\\', ' + item.SwitchTypeVal + ');\" height=\"16\" width=\"16\">' + \" \" + item.Name;",
          "3492:            }",
          "3493:            else {",
          "3494:             vname = '<img src=\"images/next.png\" onclick=\"ShowCounterLog(\\'#dashcontent\\',\\'ShowFavorites\\',' + item.idx + ',\\'' + escape(item.Name) + '\\', ' + item.SwitchTypeVal + ');\" height=\"16\" width=\"16\">' + \" \" + item.Name;",
          "3495:            }",
          "3496:           }",
          "3502:           vname = '<img src=\"images/next.png\" onclick=\"ShowCounterLogSpline(\\'#dashcontent\\',\\'ShowFavorites\\',' + item.idx + ',\\'' + escape(item.Name) + '\\', ' + item.SwitchTypeVal + ');\" height=\"16\" width=\"16\">' + \" \" + item.Name;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3501:           vname = '<a href=\"#/Devices/' + item.idx + '/Log\"><img src=\"images/next.png\" height=\"16\" width=\"16\"></a>' + \" \" + item.Name;",
          "3502:          }",
          "3503:          else if (item.Type == \"Usage\") {",
          "3505:          }",
          "3506:          else if (item.SubType == \"Soil Moisture\") {",
          "3507:           vname = '<a href=\"#/Devices/' + item.idx + '/Log\"><img src=\"images/next.png\" height=\"16\" width=\"16\"></a>' + \" \" + item.Name;",
          "",
          "[Removed Lines]",
          "3504:           vname = '<a href=\"#/Devices/' + item.idx + '/Log\"><img src=\"images/next.png\" height=\"16\" width=\"16\"></a>' + \" \" + item.Name;",
          "",
          "[Added Lines]",
          "3520:           vname = '<a href=\"#/Devices/' + item.idx + '/Log\"><img src=\"images/next.png\" height=\"16\" width=\"16\">' + \" \" + item.Name;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3721:          if (typeof item.Counter != 'undefined') {",
          "3722:           if ((item.Type == \"RFXMeter\") || (item.Type == \"YouLess Meter\")) {",
          "3723:            if (item.SwitchTypeVal == 1) {",
          "3725:            }",
          "3726:            else if (item.SwitchTypeVal == 2) {",
          "3728:            }",
          "3729:            else if (item.SwitchTypeVal == 3) {",
          "3731:            }",
          "3732:            else if (item.SwitchTypeVal == 4) {",
          "3734:            }",
          "3735:            else {",
          "3737:            }",
          "3738:           }",
          "3739:           else {",
          "3742:            }",
          "3743:            else {",
          "3745:            }",
          "3746:           }",
          "3747:           if (",
          "",
          "[Removed Lines]",
          "3724:                                                 imagehtml = '<a href=\"#/Devices/' + item.idx + '/Log\"><img src=\"images/Gas48.png\" class=\"lcursor\" height=\"40\" width=\"40\"></a></td>\\n';",
          "3727:                                                 imagehtml = '<a href=\"#/Devices/' + item.idx + '/Log\"><img src=\"images/Water48_On.png\" class=\"lcursor\" height=\"40\" width=\"40\"></a></td>\\n';",
          "3730:                                                 imagehtml = '<a href=\"#/Devices/' + item.idx + '/Log\"><img src=\"images/Counter48.png.png\" class=\"lcursor\" height=\"40\" width=\"40\"></a></td>\\n';",
          "3733:                                                 imagehtml = '<a href=\"#/Devices/' + item.idx + '/Log\"><img src=\"images/PV48.png\" class=\"lcursor\" height=\"40\" width=\"40\"></a></td>\\n';",
          "3736:                                                 imagehtml = '<a href=\"#/Devices/' + item.idx + '/Log\"><img src=\"images/Counter48.png\" class=\"lcursor\" height=\"40\" width=\"40\"></a></td>\\n';",
          "3740:            if ((item.Type == \"P1 Smart Meter\") && (item.SubType == \"Gas\")) {",
          "3741:                                                 imagehtml = '<a href=\"#/Devices/' + item.idx + '/Log\"><img src=\"images/Gas48.png\" class=\"lcursor\" height=\"40\" width=\"40\"></a></td>\\n';",
          "3744:                                                 imagehtml = '<a href=\"#/Devices/' + item.idx + '/Log\"><img src=\"images/Counter48.png\" class=\"lcursor\" height=\"40\" width=\"40\"></a></td>\\n';",
          "",
          "[Added Lines]",
          "3740:             imagehtml += 'Gas48.png\" class=\"lcursor\" onclick=\"ShowCounterLog(\\'#dashcontent\\',\\'ShowFavorites\\',' + item.idx + ',\\'' + escape(item.Name) + '\\', ' + item.SwitchTypeVal + ');\" height=\"40\" width=\"40\"></td>\\n';",
          "3743:             imagehtml += 'Water48_On.png\" class=\"lcursor\" onclick=\"ShowCounterLog(\\'#dashcontent\\',\\'ShowFavorites\\',' + item.idx + ',\\'' + escape(item.Name) + '\\', ' + item.SwitchTypeVal + ');\" height=\"40\" width=\"40\"></td>\\n';",
          "3746:             imagehtml += 'Counter48.png\" class=\"lcursor\" onclick=\"ShowCounterLog(\\'#dashcontent\\',\\'ShowFavorites\\',' + item.idx + ',\\'' + escape(item.Name) + '\\', ' + item.SwitchTypeVal + ');\" height=\"40\" width=\"40\"></td>\\n';",
          "3749:             imagehtml += 'PV48.png\" class=\"lcursor\" onclick=\"ShowCounterLogSpline(\\'#dashcontent\\',\\'ShowFavorites\\',' + item.idx + ',\\'' + escape(item.Name) + '\\', ' + item.SwitchTypeVal + ');\" height=\"40\" width=\"40\"></td>\\n';",
          "3752:             imagehtml += 'Counter48.png\" class=\"lcursor\" onclick=\"ShowCounterLogSpline(\\'#dashcontent\\',\\'ShowFavorites\\',' + item.idx + ',\\'' + escape(item.Name) + '\\', ' + item.SwitchTypeVal + ');\" height=\"40\" width=\"40\"></td>\\n';",
          "3756:            if ((item.Type == \"P1 Smart Meter\") && (item.SubType == \"Energy\")) {",
          "3757:             imagehtml += 'Counter48.png\" class=\"lcursor\" onclick=\"ShowSmartLog(\\'#dashcontent\\',\\'ShowFavorites\\',' + item.idx + ',\\'' + escape(item.Name) + '\\', ' + item.SwitchTypeVal + ');\" height=\"40\" width=\"40\"></td>\\n';",
          "3758:            }",
          "3759:            else if ((item.Type == \"P1 Smart Meter\") && (item.SubType == \"Gas\")) {",
          "3760:             imagehtml += 'Gas48.png\" class=\"lcursor\" onclick=\"ShowCounterLog(\\'#dashcontent\\',\\'ShowFavorites\\',' + item.idx + ',\\'' + escape(item.Name) + '\\', ' + item.SwitchTypeVal + ');\" height=\"40\" width=\"40\"></td>\\n';",
          "3763:             imagehtml += 'Counter48.png\" class=\"lcursor\" onclick=\"ShowCounterLog(\\'#dashcontent\\',\\'ShowFavorites\\',' + item.idx + ',\\'' + escape(item.Name) + '\\', ' + item.SwitchTypeVal + ');\" height=\"40\" width=\"40\"></td>\\n';",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3761:          }",
          "3762:          else if ((item.Type == \"Energy\") || (item.Type == \"Power\") || (item.SubType == \"kWh\")) {",
          "3763:           if (((item.Type == \"Energy\") || (item.Type == \"Power\") || (item.SubType == \"kWh\")) && (item.SwitchTypeVal == 4)) {",
          "3765:           }",
          "3766:           else {",
          "3768:           }",
          "3769:           statushtml = \"\";",
          "3770:          }",
          "",
          "[Removed Lines]",
          "3764:                                             imagehtml = '<a href=\"#/Devices/' + item.idx + '/Log\"><img src=\"images/PV48.png\" class=\"lcursor\" height=\"40\" width=\"40\"></a></td>\\n';",
          "3767:                                             imagehtml = '<a href=\"#/Devices/' + item.idx + '/Log\"><img src=\"images/current48.png\" class=\"lcursor\" height=\"40\" width=\"40\"></a></td>\\n';",
          "",
          "[Added Lines]",
          "3783:            imagehtml += 'PV48.png\" class=\"lcursor\" onclick=\"ShowCounterLogSpline(\\'#dashcontent\\',\\'ShowFavorites\\',' + item.idx + ',\\'' + escape(item.Name) + '\\', ' + item.SwitchTypeVal + ');\" height=\"40\" width=\"40\"></td>\\n';",
          "3786:            imagehtml += 'current48.png\" class=\"lcursor\" onclick=\"ShowCounterLogSpline(\\'#dashcontent\\',\\'ShowFavorites\\',' + item.idx + ',\\'' + escape(item.Name) + '\\', ' + item.SwitchTypeVal + ');\" height=\"40\" width=\"40\"></td>\\n';",
          "",
          "---------------"
        ],
        "www/app/DevicesController.js||www/app/DevicesController.js": [
          "File: www/app/DevicesController.js -> www/app/DevicesController.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "320:         itemSubIcons += '&nbsp;<a href=\"' + graphLogLink + '\"><img src=\"images/log.png\" title=\"' + $.t('Log') + '\"></a>';",
          "321:        }",
          "322:        else if (typeof item.Counter != 'undefined') {",
          "324:        }",
          "325:        else if (typeof item.Direction != 'undefined') {",
          "326:         itemSubIcons += '&nbsp;<img src=\"images/log.png\" title=\"' + $.t('Log') + '\" onclick=\"ShowWindLog(\\'#devicescontent\\',\\'ShowDevices\\',' + item.idx + ',\\'' + escape(item.Name) + '\\');\">';",
          "",
          "[Removed Lines]",
          "323:         itemSubIcons += '&nbsp;<a href=\"#/Devices/'+ item.idx +'/Log\"><img src=\"images/log.png\" title=\"' + $.t('Log') + '\"></a>';",
          "",
          "[Added Lines]",
          "323:         if ((item.Type == \"P1 Smart Meter\") && (item.SubType == \"Energy\")) {",
          "324:          itemSubIcons += '&nbsp;<img src=\"images/log.png\" title=\"' + $.t('Log') + '\" onclick=\"ShowSmartLog(\\'#devicescontent\\',\\'ShowDevices\\',' + item.idx + ',\\'' + escape(item.Name) + '\\', ' + item.SwitchTypeVal + ');\">';",
          "325:         }",
          "326:         else if ((item.Type == \"YouLess Meter\") && (item.SwitchTypeVal == 0 || item.SwitchTypeVal == 4)) {",
          "327:          itemSubIcons += '&nbsp;<img src=\"images/log.png\" title=\"' + $.t('Log') + '\" onclick=\"ShowCounterLogSpline(\\'#devicescontent\\',\\'ShowDevices\\',' + item.idx + ',\\'' + escape(item.Name) + '\\', ' + item.SwitchTypeVal + ');\">';",
          "328:         }",
          "329:         else {",
          "330:          itemSubIcons += '&nbsp;<img src=\"images/log.png\" title=\"' + $.t('Log') + '\" onclick=\"ShowCounterLog(\\'#devicescontent\\',\\'ShowDevices\\',' + item.idx + ',\\'' + escape(item.Name) + '\\', ' + item.SwitchTypeVal + ');\">';",
          "331:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "332:         itemSubIcons += '&nbsp;<img src=\"images/log.png\" title=\"' + $.t('Log') + '\" onclick=\"ShowRainLog(\\'#devicescontent\\',\\'ShowDevices\\',' + item.idx + ',\\'' + escape(item.Name) + '\\');\">';",
          "333:        }",
          "334:        else if ((item.Type == \"Energy\") || (item.SubType == \"kWh\")) {",
          "336:        }",
          "337:        else if (item.Type.indexOf(\"Current\") == 0) {",
          "338:         itemSubIcons += '&nbsp;<img src=\"images/log.png\" title=\"' + $.t('Log') + '\" onclick=\"ShowCurrentLog(\\'#devicescontent\\',\\'ShowDevices\\',' + item.idx + ',\\'' + escape(item.Name) + '\\', ' + item.displaytype + ');\">';",
          "",
          "[Removed Lines]",
          "335:                                 itemSubIcons += '&nbsp;<a href=\"#/Devices/'+ item.idx +'/Log\"><img src=\"images/log.png\" title=\"' + $.t('Log') + '\"></a>';",
          "",
          "[Added Lines]",
          "343:         itemSubIcons += '&nbsp;<img src=\"images/log.png\" title=\"' + $.t('Log') + '\" onclick=\"ShowCounterLogSpline(\\'#devicescontent\\',\\'ShowDevices\\',' + item.idx + ',\\'' + escape(item.Name) + '\\', ' + item.SwitchTypeVal + ');\">';",
          "",
          "---------------"
        ],
        "www/app/UtilityController.js||www/app/UtilityController.js": [
          "File: www/app/UtilityController.js -> www/app/UtilityController.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "753:        }",
          "755:        if (typeof item.Counter != 'undefined') {",
          "758:         if (permissions.hasPermission(\"Admin\")) {",
          "759:          if (item.Type == \"P1 Smart Meter\") {",
          "760:           xhtm += '<a class=\"btnsmall\" onclick=\"EditUtilityDevice(' + item.idx + ',\\'' + escape(item.Name) + '\\',\\'' + escape(item.Description) + '\\');\" data-i18n=\"Edit\">Edit</a> ';",
          "",
          "[Removed Lines]",
          "756:         xhtm += '<a class=\"btnsmall\" href=\"' + graphLogLink + '\" data-i18n=\"Log\">Log</a> ';",
          "",
          "[Added Lines]",
          "756:         if ((item.Type == \"P1 Smart Meter\") && (item.SubType == \"Energy\")) {",
          "757:          xhtm += '<a class=\"btnsmall\" onclick=\"ShowSmartLog(\\'#utilitycontent\\',\\'ShowUtilities\\',' + item.idx + ',\\'' + escape(item.Name) + '\\', ' + item.SwitchTypeVal + ');\" data-i18n=\"Log\">Log</a> ';",
          "758:         }",
          "759:         else if ((item.Type == \"YouLess Meter\") && (item.SwitchTypeVal == 0 || item.SwitchTypeVal == 4)) {",
          "760:          xhtm += '<a class=\"btnsmall\" onclick=\"ShowCounterLogSpline(\\'#utilitycontent\\',\\'ShowUtilities\\',' + item.idx + ',\\'' + escape(item.Name) + '\\', ' + item.SwitchTypeVal + ');\" data-i18n=\"Log\">Log</a> ';",
          "761:         }",
          "762:         else {",
          "763:          xhtm += '<a class=\"btnsmall\" onclick=\"ShowCounterLog(\\'#utilitycontent\\',\\'ShowUtilities\\',' + item.idx + ',\\'' + escape(item.Name) + '\\', ' + item.SwitchTypeVal + ');\" data-i18n=\"Log\">Log</a> ';",
          "764:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "813:         }",
          "814:        }",
          "815:        else if ((item.Type == \"Energy\") || (item.SubType == \"kWh\") || (item.Type == \"Power\")) {",
          "818:         if (permissions.hasPermission(\"Admin\")) {",
          "819:          if ((item.Type == \"Energy\") || (item.SubType == \"kWh\")) {",
          "820:           if (item.EnergyMeterMode == \"\") { item.EnergyMeterMode = \"0\" }",
          "",
          "[Removed Lines]",
          "816:         xhtm += '<a class=\"btnsmall\" href=\"' + graphLogLink + '\" data-i18n=\"Log\">Log</a> ';",
          "",
          "[Added Lines]",
          "823:         xhtm += '<a class=\"btnsmall\" onclick=\"ShowCounterLogSpline(\\'#utilitycontent\\',\\'ShowUtilities\\',' + item.idx + ',\\'' + escape(item.Name) + '\\', ' + item.SwitchTypeVal + ');\" data-i18n=\"Log\">Log</a> ';",
          "",
          "---------------"
        ],
        "www/app/app.js||www/app/app.js": [
          "File: www/app/app.js -> www/app/app.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:   Notification.requestPermission();",
          "5: });",
          "8:  var app = angular.module('domoticz', ['ngRoute', 'ngAnimate', 'ngGrid', 'highcharts-ng', 'treeControl', 'ngDraggable', 'ngSanitize', 'angular-md5', 'ui.bootstrap', 'angular.directives-round-progress', 'angular.directives-round-progress', 'angular.scrollglue', 'ngWebsocket']);",
          "10:  isOnline = false;",
          "",
          "[Removed Lines]",
          "7: define(['angularAMD', 'devices/deviceFactory', 'angular-route', 'angular-animate', 'ng-grid', 'ng-grid-flexible-height', 'highcharts-ng', 'angular-tree-control', 'ngDraggable', 'ngSanitize', 'angular-md5', 'ui.bootstrap', 'angular.directives-round-progress', 'angular.scrollglue', 'angular-websocket'], function (angularAMD, deviceFactory) {",
          "",
          "[Added Lines]",
          "7: define(['angularAMD', 'angular-route', 'angular-animate', 'ng-grid', 'ng-grid-flexible-height', 'highcharts-ng', 'angular-tree-control', 'ngDraggable', 'ngSanitize', 'angular-md5', 'ui.bootstrap', 'angular.directives-round-progress', 'angular.scrollglue', 'angular-websocket'], function (angularAMD) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "267:   }",
          "268:     });",
          "272:  app.factory('deviceApi', function($q, domoticzApi, dzTimeAndSun, Device) {",
          "273:   return {",
          "",
          "[Removed Lines]",
          "270:  app.factory('Device', deviceFactory);",
          "",
          "[Added Lines]",
          "270:  app.factory('Device', function () {",
          "271:         return function Device(rawData) {",
          "272:          var device = Object.assign({}, rawData);",
          "274:             device.isDimmer = function() {",
          "275:                 return ['Dimmer', 'Blinds Percentage', 'Blinds Percentage Inverted', 'TPI'].includes(this.SwitchType);",
          "276:             };",
          "278:             device.isSelector = function() {",
          "279:                 return this.SwitchType === \"Selector\";",
          "280:             };",
          "282:             device.isLED = function() {",
          "283:                 return (this.SubType.indexOf(\"RGB\") >= 0 || this.SubType.indexOf(\"WW\") >= 0);",
          "284:             };",
          "286:             device.getLevels = function() {",
          "287:                 return this.LevelNames ? b64DecodeUnicode(this.LevelNames).split('|') : [];",
          "288:             };",
          "290:             device.getLevelActions = function() {",
          "291:                 return this.LevelActions ? b64DecodeUnicode(this.LevelActions).split('|') : [];",
          "292:    };",
          "294:             device.getSelectorLevelOptions = function () {",
          "295:                 return this.getLevels()",
          "296:                     .slice(1)",
          "297:                     .map(function (levelName, index) {",
          "298:                         return {",
          "299:                             label: levelName,",
          "300:                             value: (index + 1) * 10",
          "301:                         }",
          "302:                     });",
          "303:             };",
          "305:             device.getDimmerLevelOptions = function (step) {",
          "306:                 var options = [];",
          "307:                 var step = step || 5;",
          "309:                 for (var i = step; i <= 100; i+=step) {",
          "310:                     options.push({",
          "311:                         label: i + '%',",
          "312:                         value: i",
          "313:                     });",
          "314:                 }",
          "316:                 return options;",
          "317:             };",
          "319:             return device;",
          "320:         };",
          "321:     });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "547:     controllerUrl: 'app/log/DeviceLog.js',",
          "548:     controllerAs: 'vm'",
          "549:    })).",
          "554:     controllerAs: 'vm'",
          "555:    })).",
          "556:    when('/DPFibaro', angularAMD.route({",
          "",
          "[Removed Lines]",
          "550:    when('/Devices/:id/Report/:year?/:month?', angularAMD.route({",
          "551:     templateUrl: 'app/report/DeviceReport.html',",
          "552:     controller: 'DeviceReportController',",
          "553:     controllerUrl: 'app/report/DeviceReport.js',",
          "",
          "[Added Lines]",
          "601:    when('/Devices/:id/TemperatureReport/:year?/:month?', angularAMD.route({",
          "602:     templateUrl: 'views/log/device_temperature_report.html',",
          "603:     controller: 'DeviceTemperatureReportController',",
          "604:     controllerUrl: 'app/log/TemperatureReport.js',",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1111:   });",
          "1112:   permissions.setPermissions(permissionList);",
          "1123:    app.run(function (livesocket) {",
          "1124:     console.log(livesocket);",
          "",
          "[Removed Lines]",
          "1114:   Highcharts.setOptions({",
          "1115:             credits: {",
          "1116:                 enabled: true,",
          "1117:                 href: \"http://www.domoticz.com\",",
          "1118:                 text: \"Domoticz.com\"",
          "1119:             }",
          "1120:   });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "www/app/devices/deviceFactory.js||www/app/devices/deviceFactory.js": [
          "File: www/app/devices/deviceFactory.js -> www/app/devices/deviceFactory.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "www/app/log/DeviceLog.js||www/app/log/DeviceLog.js": [
          "File: www/app/log/DeviceLog.js -> www/app/log/DeviceLog.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:         vm.isLightLog = isLightLog;",
          "7:         vm.isGraphLog = isGraphLog;",
          "8:         vm.isTemperatureLog = isTemperatureLog;",
          "11:         init();",
          "",
          "[Removed Lines]",
          "9:         vm.isReportAvailable = isReportAvailable;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16:             deviceApi.getDeviceInfo(vm.deviceIdx).then(function (device) {",
          "17:                 vm.device = device;",
          "18:                 vm.pageName = device.Name;",
          "27:             });",
          "28:         }",
          "",
          "[Removed Lines]",
          "20:                 if (isSmartLog()) {",
          "21:                     ShowSmartLog('.js-device-log-content', 'ShowUtilities', device.idx, device.Name, device.SwitchTypeVal);",
          "22:                 } else if (isCounterLogSpline()) {",
          "23:                     ShowCounterLogSpline('.js-device-log-content', 'ShowUtilities', device.idx, device.Name, device.SwitchTypeVal);",
          "24:                 } else if (isCounterLog()) {",
          "25:                     ShowCounterLog('.js-device-log-content', 'ShowUtilities', device.idx, device.Name, device.SwitchTypeVal);",
          "26:                 }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83:                 'Soil Moisture', 'Leaf Wetness', 'Waterflow', 'Lux', 'Percentage'",
          "84:             ].includes(vm.device.SubType)",
          "85:         }",
          "127:     });",
          "128: });",
          "",
          "[Removed Lines]",
          "87:         function isSmartLog() {",
          "88:             if (!vm.device) {",
          "89:                 return undefined;",
          "90:             }",
          "92:             return (vm.device.Type == 'P1 Smart Meter' && vm.device.SubType == 'Energy')",
          "93:         }",
          "95:         function isCounterLog() {",
          "96:             if (!vm.device) {",
          "97:                 return undefined;",
          "98:             }",
          "100:             if (isCounterLogSpline() || isSmartLog()) {",
          "101:                 return false;",
          "102:             }",
          "104:             return vm.device.Type === 'RFXMeter'",
          "105:                 || (vm.device.Type == 'P1 Smart Meter' && vm.device.SubType == 'Gas')",
          "106:                 || (typeof vm.device.Counter != 'undefined' && !isCounterLogSpline());",
          "107:         }",
          "109:         function isCounterLogSpline() {",
          "110:             if (!vm.device) {",
          "111:                 return undefined;",
          "112:             }",
          "114:             return ['Power', 'Energy'].includes(vm.device.Type)",
          "115:                 || ['kWh'].includes(vm.device.SubType)",
          "116:                 || (vm.device.Type == 'YouLess Meter' && [0, 4].includes(vm.device.SwitchTypeVal));",
          "117:         }",
          "119:         function isReportAvailable() {",
          "120:             if (!vm.device) {",
          "121:                 return undefined;",
          "122:             }",
          "124:             return isTemperatureLog()",
          "125:                 || ((isCounterLogSpline() || isCounterLog() || isSmartLog()) && [0, 1, 2, 3, 4].includes(vm.device.SwitchTypeVal));",
          "126:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "www/app/log/GraphLog.js||www/app/log/GraphLog.js": [
          "File: www/app/log/GraphLog.js -> www/app/log/GraphLog.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:                             }",
          "41:                         }",
          "42:                     },",
          "43:                     xAxis: {",
          "44:                         type: 'datetime'",
          "45:                     },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:                     credits: {",
          "44:                         enabled: true,",
          "45:                         href: 'http://www.domoticz.com',",
          "46:                         text: 'Domoticz.com'",
          "47:                     },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "203:             }",
          "205:             function getChartUnit() {",
          "207:             }",
          "209:             function getChartType() {",
          "",
          "[Removed Lines]",
          "206:                 return vm.device.getUnit();",
          "",
          "[Added Lines]",
          "211:                 if (vm.device.SubType === 'Custom Sensor') {",
          "212:                     return vm.device.SensorUnit",
          "213:                 } else if (vm.device.Type === 'General' && vm.device.SubType === 'Voltage') {",
          "214:                     return 'V';",
          "215:                 } else if (vm.device.Type === 'General' && vm.device.SubType === 'Distance') {",
          "216:                     return vm.device.SwitchTypeVal === 1 ? 'in' : 'cm'",
          "217:                 } else if (vm.device.Type === 'General' && vm.device.SubType === 'Current') {",
          "218:                     return 'A';",
          "219:                 } else if (vm.device.Type === 'General' && vm.device.SubType === 'Pressure') {",
          "220:                     return 'Bar';",
          "221:                 } else if (vm.device.Type === 'General' && vm.device.SubType === 'Sound Level') {",
          "222:                     return 'dB';",
          "223:                 } else if (vm.device.SubType === 'Visibility') {",
          "224:                     return vm.device.SwitchTypeVal === 1 ? 'mi' : 'km';",
          "225:                 } else if (vm.device.SubType === 'Solar Radiation') {",
          "226:                     return 'Watt/m2';",
          "227:                 } else if (vm.device.SubType === 'Soil Moisture') {",
          "228:                     return 'cb';",
          "229:                 } else if (vm.device.SubType === 'Leaf Wetness') {",
          "230:                     return 'Range';",
          "231:                 } else if (vm.device.SubType === 'Weight') {",
          "232:                     return 'kg';",
          "233:                 } else if (['Voltage', 'A/D'].includes(vm.device.SubType)) {",
          "234:                     return 'mV';",
          "235:                 } else if (vm.device.SubType === 'Waterflow') {",
          "236:                     return 'l/min';",
          "237:                 } else if (vm.device.SubType === 'Lux') {",
          "238:                     return 'lx';",
          "239:                 } else if (vm.device.SubType === 'Percentage') {",
          "240:                     return '%';",
          "241:                 } else if (vm.device.Type === 'Usage' && vm.device.SubType === 'Electric') {",
          "242:                     return 'W';",
          "243:                 } else {",
          "244:                     return '?';",
          "245:                 }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "223:             }",
          "224:         }",
          "225:     });",
          "",
          "[Removed Lines]",
          "226: });",
          "",
          "[Added Lines]",
          "265: });",
          "",
          "---------------"
        ],
        "www/app/report/TemperatureReport.js||www/app/log/TemperatureReport.js": [
          "File: www/app/report/TemperatureReport.js -> www/app/log/TemperatureReport.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "2:     app.factory('DeviceTemperatureReportData', function (domoticzApi) {",
          "3:         return {",
          "4:             fetch: fetch",
          "",
          "[Removed Lines]",
          "1: define(['app', 'report/helpers'], function (app, reportHelpers) {",
          "",
          "[Added Lines]",
          "1: define(['app'], function (app) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:                         return a.date < b.date ? -1 : 1;",
          "99:                     });",
          "103:                     var stats = month.days.reduce(function (acc, item) {",
          "104:                         if (!acc.min || acc.min.value > item.min) {",
          "",
          "[Removed Lines]",
          "101:                     month.days = reportHelpers.addTrendData(month.days, 'avg');",
          "",
          "[Added Lines]",
          "101:                     month.days = addTrendData(month.days);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "136:                         : undefined;",
          "137:                 });",
          "141:                 var stats = getGroupStats(yearsData.months);",
          "",
          "[Removed Lines]",
          "139:                 yearsData.months = reportHelpers.addTrendData(yearsData.months, 'avg');",
          "",
          "[Added Lines]",
          "139:                 yearsData.months = addTrendData(yearsData.months);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "173:                 return acc;",
          "174:             }, {})",
          "175:         }",
          "186:     });",
          "189:         var vm = this;",
          "190:         var monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",",
          "191:             \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];",
          "195:         function init() {",
          "196:             vm.isMonthView = vm.selectedMonth > 0;",
          "197:             vm.degreeType = $.myglobals.tempsign;",
          "199:             getData();",
          "200:         }",
          "202:         function getData() {",
          "203:             DeviceTemperatureReportData",
          "205:                 .then(function (data) {",
          "206:                     if (!data) {",
          "207:                         vm.noDataAvailable = true;",
          "",
          "[Removed Lines]",
          "176:     });",
          "178:     app.component('deviceTemperatureReport', {",
          "179:         bindings: {",
          "180:             device: '<',",
          "181:             selectedYear: '<',",
          "182:             selectedMonth: '<'",
          "183:         },",
          "184:         templateUrl: 'app/report/TemperatureReport.html',",
          "185:         controller: DeviceTemperatureReportController",
          "188:     function DeviceTemperatureReportController($scope, $element, $route, $routeParams, $location, domoticzApi, deviceApi, dataTableDefaultSettings, DeviceTemperatureReportData) {",
          "193:         vm.$onInit = init;",
          "204:                 .fetch(vm.device.idx, vm.selectedYear, vm.selectedMonth)",
          "",
          "[Added Lines]",
          "177:         function addTrendData(items) {",
          "178:             return items.map(function (item, index) {",
          "179:                 var trend = 'equal'",
          "181:                 if (index > 0 && item.avg > items[index - 1].avg) {",
          "182:                     trend = 'up'",
          "183:                 }",
          "185:                 if (index > 0 && item.avg < items[index - 1].avg) {",
          "186:                     trend = 'down'",
          "187:                 }",
          "189:                 return Object.assign({}, item, {",
          "190:                     avgTrend: trend",
          "191:                 });",
          "192:             });",
          "193:         }",
          "196:     app.controller('DeviceTemperatureReportController', function ($scope, $route, $routeParams, $location, domoticzApi, deviceApi, dataTableDefaultSettings, DeviceTemperatureReportData) {",
          "198:         var $element = $('.js-report:last');",
          "203:         vm.getYearsOptions = getYearsOptions;",
          "204:         vm.selectYear = selectYear;",
          "206:         init();",
          "209:             vm.deviceIdx = $routeParams.id;",
          "210:             vm.selectedYear = parseInt($routeParams.year) || ((new Date()).getYear() + 1900);",
          "211:             vm.selectedMonth = parseInt($routeParams.month) || undefined;",
          "216:             deviceApi.getDeviceInfo(vm.deviceIdx).then(function (device) {",
          "217:                 vm.title = vm.isMonthView",
          "218:                     ? device.Name + ', ' + $.t(monthNames[vm.selectedMonth - 1]) + ' ' + vm.selectedYear",
          "219:                     : device.Name + ' ' + vm.selectedYear;",
          "220:             });",
          "225:         function selectYear() {",
          "226:             $route.updateParams({ year: vm.selectedYear });",
          "227:             $location.replace();",
          "228:         }",
          "230:         function getYearsOptions() {",
          "231:             var currentYear = ((new Date()).getYear() + 1900);",
          "232:             var years = [];",
          "234:             for (var i = 2012; i <= currentYear; i++) {",
          "235:                 years.push(i);",
          "236:             }",
          "238:             return years;",
          "239:         }",
          "243:                 .fetch(vm.deviceIdx, vm.selectedYear, vm.selectedMonth)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "270:                     title: $.t('Month'),",
          "271:                     data: 'date',",
          "272:                     render: function (data) {",
          "274:                         return data.toString().padStart(2, '0') + '. ' + $.t(monthNames[data - 1]) + ' ' + link;",
          "275:                     }",
          "276:                 });",
          "",
          "[Removed Lines]",
          "273:                         var link = '<a href=\"#/Devices/' + vm.device.idx + '/Report/' + vm.selectedYear + '/' + data + '\"><img src=\"images/next.png\" /></a>';",
          "",
          "[Added Lines]",
          "312:                         var link = '<a href=\"#/Devices/' + vm.deviceIdx + '/TemperatureReport/' + vm.selectedYear + '/' + data + '\"><img src=\"images/next.png\" /></a>';",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "295:             columns.push({",
          "296:                 title: '<>',",
          "297:                 orderable: false,",
          "299:                 render: function (data) {",
          "300:                     return '<img src=\"images/' + data + '.png\">'",
          "301:                 }",
          "",
          "[Removed Lines]",
          "298:                 data: 'trend',",
          "",
          "[Added Lines]",
          "337:                 data: 'avgTrend',",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "337:             });",
          "339:             chartElement.highcharts({",
          "340:                 title: {",
          "341:                     text: data.isOnlyHumidity",
          "342:                         ? $.t('Average Humidity')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "379:                 credits: {",
          "380:                     enabled: true,",
          "381:                     href: \"http://www.domoticz.com\",",
          "382:                     text: \"Domoticz.com\"",
          "383:                 },",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "472:                 ]",
          "473:             });",
          "474:         }",
          "",
          "[Removed Lines]",
          "475:     }",
          "476: });",
          "",
          "[Added Lines]",
          "519:     });",
          "520: });",
          "",
          "---------------"
        ],
        "www/app/report/CounterReport.html||www/app/report/CounterReport.html": [
          "File: www/app/report/CounterReport.html -> www/app/report/CounterReport.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "www/app/report/CounterReport.js||www/app/report/CounterReport.js": [
          "File: www/app/report/CounterReport.js -> www/app/report/CounterReport.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "www/app/report/DeviceReport.html||www/app/report/DeviceReport.html": [
          "File: www/app/report/DeviceReport.html -> www/app/report/DeviceReport.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "www/app/report/DeviceReport.js||www/app/report/DeviceReport.js": [
          "File: www/app/report/DeviceReport.js -> www/app/report/DeviceReport.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "www/app/report/EnergyMultiCounterReport.html||www/app/report/EnergyMultiCounterReport.html": [
          "File: www/app/report/EnergyMultiCounterReport.html -> www/app/report/EnergyMultiCounterReport.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "www/app/report/EnergyMultiCounterReport.js||www/app/report/EnergyMultiCounterReport.js": [
          "File: www/app/report/EnergyMultiCounterReport.js -> www/app/report/EnergyMultiCounterReport.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "www/app/report/TemperatureReport.html||www/app/report/TemperatureReport.html": [
          "File: www/app/report/TemperatureReport.html -> www/app/report/TemperatureReport.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "www/app/report/helpers.js||www/app/report/helpers.js": [
          "File: www/app/report/helpers.js -> www/app/report/helpers.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "www/html5.appcache||www/html5.appcache": [
          "File: www/html5.appcache -> www/html5.appcache",
          "--- Hunk 1 ---",
          "[Context before]",
          "470: i18n/domoticz-zh.json",
          "472: # Scripts",
          "474: app/log/components.js",
          "475: app/log/DeviceLog.js",
          "476: app/log/factories.js",
          "",
          "[Removed Lines]",
          "473: app/devices/deviceFactory.js",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "478: app/log/LightLog.js",
          "479: app/log/SceneLog.js",
          "480: app/log/TemperatureLog.js",
          "481: app/log/TextLog.js",
          "483: app/notifications/constants.js",
          "484: app/notifications/DeviceNotifications.js",
          "485: app/notifications/factories.js",
          "497: app/scenes/factories.js",
          "498: app/timers/components.js",
          "499: app/timers/DeviceTimersController.js",
          "",
          "[Removed Lines]",
          "487: app/report/CounterReport.html",
          "488: app/report/CounterReport.js",
          "489: app/report/DeviceReport.html",
          "490: app/report/DeviceReport.js",
          "491: app/report/EnergyMultiCounterReport.html",
          "492: app/report/EnergyMultiCounterReport.js",
          "493: app/report/helpers.js",
          "494: app/report/TemperatureReport.html",
          "495: app/report/TemperatureReport.js",
          "",
          "[Added Lines]",
          "480: app/log/TemperatureReport.js",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "615: views/log/device_light_log.html",
          "616: views/log/device_log.html",
          "617: views/log/device_temperature_log.html",
          "618: views/log/device_text_log.html",
          "619: views/log/scene_log.html",
          "620: views/about.html",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "606: views/log/device_temperature_report.html",
          "",
          "---------------"
        ],
        "www/index.html||www/index.html": [
          "File: www/index.html -> www/index.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: <html manifest=\"html5.appcache\">",
          "3: <head>",
          "4:   <meta charset=\"utf-8\">",
          "",
          "[Removed Lines]",
          "1: <!DOCTYPE html>",
          "",
          "[Added Lines]",
          "1: \ufeff<!DOCTYPE html>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "281:  };",
          "282:  if (typeof sessionStorage.title == 'undefined') {",
          "283:   sessionStorage.title = \"Domoticz\";",
          "285:                url: \"json.htm?type=command&param=gettitle\",",
          "286:           async: false,",
          "287:         dataType: 'json',",
          "",
          "[Removed Lines]",
          "284:   $.ajax({",
          "",
          "[Added Lines]",
          "284:   $.ajax({",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1220:   <h2 data-i18n=\"Year\">Year</h2>",
          "1221:   <div id=\"smartyeargraph\" style=\"height: 300px;\"></div>",
          "1222:  </div>",
          "1224:  <div id=\"toptextmonthrain\" style=\"display:none;\">",
          "1225:   <a class=\"btnstylerev\" onclick=\"ShowYearReportRain(0)\" data-i18n=\"Back\">Back</a>&nbsp;",
          "1226:   <h1 id=\"theader\" data-i18n=\"Usage this Month\">Usage this Month</h1>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1223:  <div id=\"toptextmonthgas\" style=\"display:none;\">",
          "1224:   <a class=\"btnstylerev\" onclick=\"ShowP1YearReportGas(0)\" data-i18n=\"Back\">Back</a>&nbsp;",
          "1225:   <h1 id=\"theader\" data-i18n=\"Usage this Month\">Usage this Month</h1>",
          "1226:   <br>",
          "1227:   <span data-i18n=\"Total Usage\" id=\"spanmonthgastotalusage\">Total Usage</span>: <span id=\"tu\">-</span> <span id=\"munit\">m3</span><br>",
          "1228:   <span data-i18n=\"Monthly Cost\">Monthly Cost</span>: <span id=\"mc\">-</span><br>",
          "1229:   <br>",
          "1230:  </div>",
          "1231:  <div id=\"toptextyeargas\" style=\"display:none;\">",
          "1232:   <table class=\"display\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">",
          "1233:    <tr>",
          "1234:     <a id=\"backbutton\" class=\"btnstylerev\" onclick=\"ShowUtilities()\" data-i18n=\"Back\">Back</a>&nbsp;",
          "1235:     <h1 id=\"theader\" data-i18n=\"Usage this Year\">Usage this Year</h1>",
          "1236:     <td align=\"right\">",
          "1237:      <span data-i18n=\"Year\">Year</span>:",
          "1238:      <select id=\"comboyear\" style=\"width:74px\" class=\"combobox ui-corner-all\">",
          "1239:       <option value=\"2012\">2012</option>",
          "1240:       <option value=\"2013\">2013</option>",
          "1241:       <option value=\"2014\">2014</option>",
          "1242:       <option value=\"2015\">2015</option>",
          "1243:       <option value=\"2016\">2016</option>",
          "1244:       <option value=\"2017\">2017</option>",
          "1245:       <option value=\"2018\">2018</option>",
          "1246:      </select>",
          "1247:     </td>",
          "1248:    </tr>",
          "1249:   </table>",
          "1250:   <br>",
          "1251:   <span data-i18n=\"Total Usage\" id=\"spanyeargastotalusage\">Total Usage</span>: <span id=\"tu\">-</span> <span id=\"munit\">m3</span><br>",
          "1252:   <span data-i18n=\"Counter\">Counter</span>: <span id=\"cntr\">-</span><br>",
          "1253:   <span data-i18n=\"Year Cost\">Year Cost</span>: <span id=\"mc\">-</span><br>",
          "1254:   <br>",
          "1255:  </div>",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1268:   <br>",
          "1269:   <div id=\"usagegraph\" style=\"height: 240px;\"></div>",
          "1270:  </div>",
          "1272:  <div id=\"dialog-replacedevice\" title=\"Replace Device\">",
          "1273:   <form>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1303:  <div id=\"monthreportviewgas\" style=\"display:none;\">",
          "1304:   <table class=\"display myrighttable\" id=\"monthreport\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">",
          "1305:    <thead>",
          "1306:     <tr valign=\"middle\">",
          "1307:      <th width=\"30\" align=\"right\" data-i18n=\"Day\">Day</th>",
          "1308:      <th width=\"70\" align=\"left\"></th>",
          "1309:      <th width=\"60\" align=\"right\" data-i18n=\"Counter\">Counter</th>",
          "1310:      <th width=\"60\" align=\"right\" data-i18n=\"Usage\" id=\"thmonthgasusage\">Usage</th>",
          "1311:      <th width=\"60\" align=\"right\" data-i18n=\"Costs\">Costs</th>",
          "1312:      <th width=\"40\" align=\"right\">&lt;&gt;</th>",
          "1313:     </tr>",
          "1314:    </thead>",
          "1315:   </table>",
          "1316:   <br>",
          "1317:   <div id=\"usagegraph\" style=\"height: 240px;\"></div>",
          "1318:  </div>",
          "1319:  <div id=\"yearreportviewgas\" style=\"display:none;\">",
          "1320:   <table class=\"display myrighttable\" id=\"yearreport\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">",
          "1321:    <thead>",
          "1322:     <tr valign=\"middle\">",
          "1323:      <th width=\"30\" align=\"right\" data-i18n=\"Month\">Month</th>",
          "1324:      <th width=\"60\" align=\"right\" data-i18n=\"Usage\" id=\"thyeargasusage\">Usage</th>",
          "1325:      <th width=\"60\" align=\"right\" data-i18n=\"Costs\">Costs</th>",
          "1326:      <th width=\"40\" align=\"right\">&lt;&gt;</th>",
          "1327:     </tr>",
          "1328:    </thead>",
          "1329:   </table>",
          "1330:   <br>",
          "1331:   <div id=\"usagegraph\" style=\"height: 240px;\"></div>",
          "1332:  </div>",
          "1333:  <div id=\"toptextmonth\" style=\"display:none;\">",
          "1334:   <a class=\"btnstylerev\" onclick=\"ShowP1YearReport(0)\" data-i18n=\"Back\">Back</a>&nbsp;",
          "1335:   <h1 id=\"theader\" data-i18n=\"Usage this Month\">Usage this Month</h1>",
          "1336:   <br>",
          "1337:   <span data-i18n=\"Total Usage\">Total Usage</span>: <span data-i18n=\"T1\">T1</span>: <span id=\"tut1\">-</span> kWh, <span data-i18n=\"T2\">T2</span>: <span id=\"tut2\">-</span> kWh, <span data-i18n=\"Total\">Total</span>: <span id=\"tu\">-</span> kWh<br>",
          "1338:   <div id=\"dreturn\" style=\"display:none;\"><span data-i18n=\"Total Return\">Total Return</span>: <span data-i18n=\"T1\">T1</span>: <span id=\"trt1\">-</span> kWh, <span data-i18n=\"T2\">T2</span>: <span id=\"trt2\">-</span> kWh, <span data-i18n=\"Total\">Total</span>: <span id=\"tr\">-</span> kWh<br></div>",
          "1339:   <span data-i18n=\"Monthly Cost\">Monthly Cost</span>: <span id=\"mc\">-</span><br>",
          "1340:   <br>",
          "1341:  </div>",
          "1342:  <div id=\"toptextyear\" style=\"display:none;\">",
          "1343:   <table class=\"display\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">",
          "1344:    <tr>",
          "1345:     <a id=\"backbutton\" class=\"btnstylerev\" onclick=\"ShowUtilities()\" data-i18n=\"Back\">Back</a>&nbsp;",
          "1346:     <h1 id=\"theader\" data-i18n=\"Usage this Year\">Usage this Year</h1>",
          "1347:     <td align=\"right\">",
          "1348:      <span data-i18n=\"Year\">Year</span>:",
          "1349:      <select id=\"comboyear\" style=\"width:74px\" class=\"combobox ui-corner-all\">",
          "1350:       <option value=\"2012\">2012</option>",
          "1351:       <option value=\"2013\">2013</option>",
          "1352:       <option value=\"2014\">2014</option>",
          "1353:       <option value=\"2015\">2015</option>",
          "1354:       <option value=\"2016\">2016</option>",
          "1355:       <option value=\"2017\">2017</option>",
          "1356:       <option value=\"2018\">2018</option>",
          "1357:      </select>",
          "1358:     </td>",
          "1359:    </tr>",
          "1360:   </table>",
          "1361:   <br>",
          "1362:   <span data-i18n=\"Total Usage\">Total Usage</span>: <span data-i18n=\"T1\">T1</span>: <span id=\"tut1\">-</span> kWh, <span data-i18n=\"T2\">T2</span>: <span id=\"tut2\">-</span> kWh, <span data-i18n=\"Total\">Total</span>: <span id=\"tu\">-</span> kWh<br>",
          "1363:   <span data-i18n=\"Counter\">Counter</span>: <span data-i18n=\"T1\">T1</span>: <span id=\"cntrt1\">-</span>, <span data-i18n=\"T2\">T2</span>: <span id=\"cntrt2\">-</span><br>",
          "1364:   <div id=\"dreturn\" style=\"display:none;\">",
          "1365:    <span data-i18n=\"Total Return\">Total Return</span>: <span data-i18n=\"R1\">R1</span>: <span id=\"trt1\">-</span> kWh, <span data-i18n=\"R2\">R2</span>: <span id=\"trt2\">-</span> kWh, <span data-i18n=\"Total\">Total</span>: <span id=\"tr\">-</span> kWh<br>",
          "1366:    <span data-i18n=\"Counter Return\">Counter Return</span>: <span data-i18n=\"R1\">R1</span>: <span id=\"cntrr1\">-</span>, <span data-i18n=\"R2\">R2</span>: <span id=\"cntrr2\">-</span><br>",
          "1367:   </div>",
          "1368:   <span data-i18n=\"Year Cost\">Year Cost</span>: <span id=\"mc\">-</span><br>",
          "1369:   <br>",
          "1370:  </div>",
          "1371:  <div id=\"monthreportview\" style=\"display:none;\">",
          "1372:   <table class=\"display myrighttable\" id=\"monthreport\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">",
          "1373:    <thead>",
          "1374:     <tr valign=\"middle\">",
          "1375:      <th width=\"30\" align=\"right\" data-i18n=\"Day\">Day</th>",
          "1376:      <th width=\"70\" align=\"left\"></th>",
          "1377:      <th width=\"60\" align=\"right\" data-i18n=\"Counter T1\">Counter T1</th>",
          "1378:      <th width=\"60\" align=\"right\" data-i18n=\"Usage T1\">Usage T1</th>",
          "1379:      <th width=\"60\" align=\"right\" data-i18n=\"Costs\">Costs</th>",
          "1380:      <th width=\"60\" align=\"right\" data-i18n=\"Counter T2\">Counter T2</th>",
          "1381:      <th width=\"60\" align=\"right\" data-i18n=\"Usage T2\">Usage T2</th>",
          "1382:      <th width=\"60\" align=\"right\" data-i18n=\"Costs\">Costs</th>",
          "1383:      <th width=\"60\" align=\"right\" data-i18n=\"Counter R1\">Counter R1</th>",
          "1384:      <th width=\"60\" align=\"right\" data-i18n=\"Return T1\">Return T1</th>",
          "1385:      <th width=\"60\" align=\"right\" data-i18n=\"Costs\">Costs</th>",
          "1386:      <th width=\"60\" align=\"right\" data-i18n=\"Counter R1\">Counter R2</th>",
          "1387:      <th width=\"60\" align=\"right\" data-i18n=\"Return T2\">Return T2</th>",
          "1388:      <th width=\"60\" align=\"right\" data-i18n=\"Costs\">Costs</th>",
          "1389:      <th width=\"60\" align=\"right\" data-i18n=\"Total\">Total</th>",
          "1390:      <th width=\"40\" align=\"right\">&lt;&gt;</th>",
          "1391:     </tr>",
          "1392:    </thead>",
          "1393:   </table>",
          "1394:   <br>",
          "1395:   <div id=\"usagegraph\" style=\"height: 240px;\"></div>",
          "1396:  </div>",
          "1397:  <div id=\"yearreportview\" style=\"display:none;\">",
          "1398:   <table class=\"display myrighttable\" id=\"yearreport\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">",
          "1399:    <thead>",
          "1400:     <tr valign=\"middle\">",
          "1401:      <th width=\"70\" align=\"right\" data-i18n=\"Month\">Month</th>",
          "1402:      <th width=\"60\" align=\"right\" data-i18n=\"Usage T1\">Usage T1</th>",
          "1403:      <th width=\"50\" align=\"right\" data-i18n=\"Costs\">Costs</th>",
          "1404:      <th width=\"60\" align=\"right\" data-i18n=\"Usage T2\">Usage T2</th>",
          "1405:      <th width=\"50\" align=\"right\" data-i18n=\"Costs\">Costs</th>",
          "1406:      <th width=\"60\" align=\"right\" data-i18n=\"Return T1\">Return T1</th>",
          "1407:      <th width=\"50\" align=\"right\" data-i18n=\"Costs\">Costs</th>",
          "1408:      <th width=\"60\" align=\"right\" data-i18n=\"Return T2\">Return T2</th>",
          "1409:      <th width=\"50\" align=\"right\" data-i18n=\"Costs\">Costs</th>",
          "1410:      <th width=\"60\" align=\"right\" data-i18n=\"Total\">Total</th>",
          "1411:      <th width=\"40\" align=\"right\">&lt;&gt;</th>",
          "1412:     </tr>",
          "1413:    </thead>",
          "1414:   </table>",
          "1415:   <br>",
          "1416:   <div id=\"usagegraph\" style=\"height: 240px;\"></div>",
          "1417:  </div>",
          "",
          "---------------"
        ],
        "www/js/domoticz.js||www/js/domoticz.js": [
          "File: www/js/domoticz.js -> www/js/domoticz.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "5841:      datatableUsage1.push([cdate, fValue]);",
          "5842:     }",
          "5843:     else {",
          "5845:     }",
          "5846:    }",
          "5847:    if (typeof item.v2 != 'undefined') {",
          "",
          "[Removed Lines]",
          "5844:      datatableUsage1.push([cdate, parseFloat(item.v) * 1000]);",
          "",
          "[Added Lines]",
          "5844:      datatableUsage1.push([cdate, parseFloat(item.v) * $.DividerWater]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5866:     datatableUsage1.push([cdate, parseFloat(item.v)]);",
          "5867:    }",
          "5868:    else {",
          "5870:    }",
          "5871:    if (typeof item.v2 != 'undefined') {",
          "5872:     datatableUsage2.push([cdate, parseFloat(item.v2)]);",
          "",
          "[Removed Lines]",
          "5869:     datatableUsage1.push([cdate, parseFloat(item.v) * 1000]);",
          "",
          "[Added Lines]",
          "5869:     datatableUsage1.push([cdate, parseFloat(item.v) * $.DividerWater]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6307:  $.devIdx = id;",
          "6308:  $.devName = name;",
          "6309:  $.devSwitchType = switchtype;",
          "6313:  $.costsT1 = 0.2389;",
          "6314:  $.costsT2 = 0.2389;",
          "",
          "[Removed Lines]",
          "6311:  var htmlcontent = $('#dayweekmonthyearlog').html();",
          "",
          "[Added Lines]",
          "6310:  var htmlcontent = '';",
          "6311:  htmlcontent = '<p><center><h2>' + unescape(name) + '</h2></center></p>\\n';",
          "6312:  htmlcontent += $('#dayweekmonthyearlog').html();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6342:  var actMonth = d.getMonth() + 1;",
          "6343:  var actYear = d.getYear() + 1900;",
          "6346:  $($.content).i18n();",
          "6348:  $.DayChart = $($.content + ' #daygraph');",
          "",
          "[Removed Lines]",
          "6345:  $($.content).html(htmlcontent);",
          "",
          "[Added Lines]",
          "6346:  $($.content).html(GetBackbuttonHTMLTableWithRight(backfunction, 'ShowP1YearReport(' + actYear + ')', $.t('Report')) + htmlcontent);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6649:  });",
          "6650: }",
          "6659: }",
          "6676:  $($.content).html(htmlcontent);",
          "6677:  $($.content).i18n();",
          "6741:   },",
          "6745:  });",
          "6749:   chart: {",
          "6764:   },",
          "6765:   credits: {",
          "6766:    enabled: true,",
          "",
          "[Removed Lines]",
          "6652: function addLeadingZeros(n, length) {",
          "6653:  var str = n.toString();",
          "6654:  var zeros = \"\";",
          "6655:  for (var i = length - str.length; i > 0; i--)",
          "6656:   zeros += \"0\";",
          "6657:  zeros += str;",
          "6658:  return zeros;",
          "6661: function ShowCounterLog(contentdiv, backfunction, id, name, switchtype) {",
          "6662:  clearInterval($.myglobals.refreshTimer);",
          "6663:  $(window).scrollTop(0);",
          "6664:  $('#modal').show();",
          "6665:  $.content = contentdiv;",
          "6666:  $.backfunction = backfunction;",
          "6667:  $.devIdx = id;",
          "6668:  $.devName = name;",
          "6669:  if (typeof switchtype != 'undefined') {",
          "6670:   $.devSwitchType = switchtype;",
          "6671:  }",
          "6672:  else {",
          "6673:   switchtype = $.devSwitchType;",
          "6674:  }",
          "6675:  var htmlcontent = $('#dayweekmonthyearlog').html();",
          "6679:  var graph_title = (switchtype == 4) ? $.t('Generated') : $.t('Usage');",
          "6680:  graph_title += ' ' + Get5MinuteHistoryDaysGraphTitle();",
          "6682:  $.DayChart = $($.content + ' #daygraph');",
          "6683:  $.DayChart.highcharts({",
          "6684:   chart: {",
          "6685:    type: 'column',",
          "6686:    marginRight: 10,",
          "6687:    zoomType: 'x',",
          "6688:    events: {",
          "6689:     load: function () {",
          "6691:      $.getJSON(\"json.htm?type=graph&sensor=counter&idx=\" + id + \"&range=day\",",
          "6692:       function (data) {",
          "6693:        if (typeof data.result != 'undefined') {",
          "6694:         AddDataToUtilityChart(data, $.DayChart, switchtype);",
          "6695:         $.DayChart.highcharts().redraw();",
          "6696:        }",
          "6697:       });",
          "6698:     }",
          "6699:    }",
          "6700:   },",
          "6701:   credits: {",
          "6702:    enabled: true,",
          "6703:    href: \"http://www.domoticz.com\",",
          "6704:    text: \"Domoticz.com\"",
          "6705:   },",
          "6706:   title: {",
          "6707:    text: graph_title",
          "6708:   },",
          "6709:   xAxis: {",
          "6710:    type: 'datetime',",
          "6711:    labels: {",
          "6712:     formatter: function () {",
          "6713:      return Highcharts.dateFormat(\"%H:%M\", this.value);",
          "6714:     }",
          "6715:    }",
          "6716:   },",
          "6717:   yAxis: {",
          "6718:    title: {",
          "6719:     text: $.t('Energy') + ' (Wh)'",
          "6720:    }",
          "6721:   },",
          "6722:   tooltip: {",
          "6723:    crosshairs: true,",
          "6724:    shared: true",
          "6725:   },",
          "6726:   plotOptions: {",
          "6727:    series: {",
          "6728:     point: {",
          "6729:      events: {",
          "6730:       click: function (event) {",
          "6731:        chartPointClickNew(event, true, ShowCounterLog);",
          "6732:       }",
          "6733:      }",
          "6734:     }",
          "6735:    },",
          "6736:    column: {",
          "6737:     minPointLength: 4,",
          "6738:     pointPadding: 0.1,",
          "6739:     groupPadding: 0",
          "6740:    }",
          "6742:   legend: {",
          "6743:    enabled: true",
          "6744:   }",
          "6747:  $.WeekChart = $($.content + ' #weekgraph');",
          "6748:  $.WeekChart.highcharts({",
          "6750:    type: 'column',",
          "6751:    marginRight: 10,",
          "6752:    events: {",
          "6753:     load: function () {",
          "6755:      $.getJSON(\"json.htm?type=graph&sensor=counter&idx=\" + id + \"&range=week\",",
          "6756:       function (data) {",
          "6757:        if (typeof data.result != 'undefined') {",
          "6758:         AddDataToUtilityChart(data, $.WeekChart, switchtype);",
          "6759:         $.WeekChart.highcharts().redraw();",
          "6760:        }",
          "6761:       });",
          "6762:     }",
          "6763:    }",
          "",
          "[Added Lines]",
          "6653: function OnSelChangeYearP1ReportGas() {",
          "6654:  var yearidx = $($.content + ' #comboyear option:selected').val();",
          "6655:  if (typeof yearidx == 'undefined') {",
          "6656:   return;",
          "6657:  }",
          "6658:  ShowP1YearReportGas(yearidx);",
          "6661: function ShowP1MonthReportGas(actMonth, actYear) {",
          "6662:  var htmlcontent = '';",
          "6664:  htmlcontent += $('#toptextmonthgas').html();",
          "6665:  htmlcontent += $('#monthreportviewgas').html();",
          "6669:  $($.content + ' #theader').html(unescape($.devName) + \" \" + $.t($.monthNames[actMonth - 1]) + \" \" + actYear);",
          "6670:  $($.content + ' #spanmonthgastotalusage').html(($.devSwitchType == 4) ? $.t('Total Generated') : $.t('Total Usage'));",
          "6672:  var yAxisTitle = $.t('Energy') + ' (kWh)';",
          "6673:  if (($.devSwitchType == 0) || ($.devSwitchType == 4)) {",
          "6675:   $($.content + ' #munit').html(\"kWh\");",
          "6676:   $($.content + ' #thmonthgasusage').html(($.devSwitchType == 4) ? $.t('Generated') : $.t('Usage'));",
          "6677:  }",
          "6678:  else if ($.devSwitchType == 1) {",
          "6680:   $($.content + ' #munit').html(\"m3\");",
          "6681:   yAxisTitle = $.t('Usage') + ' (m3)';",
          "6682:  }",
          "6683:  else {",
          "6685:   $($.content + ' #munit').html(\"m3\");",
          "6686:   yAxisTitle = $.t('Usage') + ' (m3)';",
          "6687:  }",
          "6689:  $($.content + ' #monthreport').dataTable({",
          "6690:   \"sDom\": '<\"H\"rC>t<\"F\">',",
          "6691:   \"oTableTools\": {",
          "6692:    \"sRowSelect\": \"single\"",
          "6694:   \"aaSorting\": [[0, \"asc\"]],",
          "6695:   \"aoColumnDefs\": [",
          "6696:    { \"bSortable\": false, \"aTargets\": [3] }",
          "6697:   ],",
          "6698:   \"bSortClasses\": false,",
          "6699:   \"bProcessing\": true,",
          "6700:   \"bStateSave\": false,",
          "6701:   \"bJQueryUI\": true,",
          "6702:   \"aLengthMenu\": [[50, 100, -1], [50, 100, \"All\"]],",
          "6703:   \"iDisplayLength\": 50,",
          "6704:   language: $.DataTableLanguage",
          "6706:  var mTable = $($.content + ' #monthreport');",
          "6707:  var oTable = mTable.dataTable();",
          "6708:  oTable.fnClearTable();",
          "6710:  $.UsageChart = $($.content + ' #usagegraph');",
          "6711:  $.UsageChart.highcharts({",
          "6713:    type: 'column'",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6768:    text: \"Domoticz.com\"",
          "6769:   },",
          "6770:   title: {",
          "6772:   },",
          "6773:   xAxis: {",
          "6779:   },",
          "6780:   yAxis: {",
          "6781:    title: {",
          "6783:    },",
          "6785:   },",
          "6786:   tooltip: {",
          "6789:   },",
          "6790:   plotOptions: {",
          "6791:    column: {",
          "6792:     minPointLength: 4,",
          "6793:     pointPadding: 0.1,",
          "6799:    }",
          "6800:   },",
          "6801:   legend: {",
          "",
          "[Removed Lines]",
          "6771:    text: $.t('Last Week')",
          "6774:    type: 'datetime',",
          "6775:    dateTimeLabelFormats: {",
          "6776:     day: '%a'",
          "6777:    },",
          "6778:    tickInterval: 24 * 3600 * 1000",
          "6782:     text: $.t('Energy') + ' (kWh)'",
          "6784:    maxPadding: 0.2",
          "6787:    crosshairs: true,",
          "6788:    shared: true",
          "6794:     groupPadding: 0,",
          "6795:     dataLabels: {",
          "6796:      enabled: true,",
          "6797:      color: 'white'",
          "6798:     }",
          "",
          "[Added Lines]",
          "6721:    text: ''",
          "6724:    type: 'datetime'",
          "6727:    min: 0,",
          "6728:    maxPadding: 0.2,",
          "6730:     text: yAxisTitle",
          "6732:    min: 0",
          "6735:    formatter: function () {",
          "6736:     var unit = GetGraphUnit(this.series.name);",
          "6737:     return $.t(Highcharts.dateFormat('%A', this.x)) + ' ' + Highcharts.dateFormat('%B %d', this.x) + '<br/>' + this.series.name + ': ' + this.y + ' ' + unit;",
          "6738:    }",
          "6744:     groupPadding: 0",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6803:   }",
          "6804:  });",
          "6858:      }",
          "6866:      }",
          "6876:       }",
          "6877:      }",
          "6888:   chart: {",
          "6889:    type: 'spline',",
          "6890:    marginRight: 10,",
          "",
          "[Removed Lines]",
          "6806:  $.MonthChart = $($.content + ' #monthgraph');",
          "6807:  $.MonthChart.highcharts({",
          "6808:   chart: {",
          "6809:    type: 'spline',",
          "6810:    marginRight: 10,",
          "6811:    zoomType: 'x',",
          "6812:    resetZoomButton: {",
          "6813:     position: {",
          "6814:      x: -30,",
          "6815:      y: -36",
          "6816:     }",
          "6817:    },",
          "6818:    events: {",
          "6819:     load: function () {",
          "6821:      $.getJSON(\"json.htm?type=graph&sensor=counter&idx=\" + id + \"&range=month\",",
          "6822:       function (data) {",
          "6823:        if (typeof data.result != 'undefined') {",
          "6824:         AddDataToUtilityChart(data, $.MonthChart, switchtype);",
          "6825:         $.MonthChart.highcharts().redraw();",
          "6826:        }",
          "6827:       });",
          "6828:     }",
          "6829:    }",
          "6830:   },",
          "6831:   credits: {",
          "6832:    enabled: true,",
          "6833:    href: \"http://www.domoticz.com\",",
          "6834:    text: \"Domoticz.com\"",
          "6835:   },",
          "6836:   title: {",
          "6837:    text: $.t('Last Month')",
          "6838:   },",
          "6839:   xAxis: {",
          "6840:    type: 'datetime'",
          "6841:   },",
          "6842:   yAxis: {",
          "6843:    title: {",
          "6844:     text: $.t('Energy') + ' (kWh)'",
          "6845:    }",
          "6846:   },",
          "6847:   tooltip: {",
          "6848:    crosshairs: true,",
          "6849:    shared: true",
          "6850:   },",
          "6851:   plotOptions: {",
          "6852:    series: {",
          "6853:     point: {",
          "6854:      events: {",
          "6855:       click: function (event) {",
          "6856:        chartPointClickNewEx(event, false, ShowCounterLog);",
          "6857:       }",
          "6859:     }",
          "6860:    },",
          "6861:    spline: {",
          "6862:     lineWidth: 3,",
          "6863:     states: {",
          "6864:      hover: {",
          "6865:       lineWidth: 3",
          "6867:     },",
          "6868:     marker: {",
          "6869:      enabled: false,",
          "6870:      states: {",
          "6871:       hover: {",
          "6872:        enabled: true,",
          "6873:        symbol: 'circle',",
          "6874:        radius: 5,",
          "6875:        lineWidth: 1",
          "6878:     }",
          "6879:    }",
          "6880:   },",
          "6881:   legend: {",
          "6882:    enabled: true",
          "6883:   }",
          "6884:  });",
          "6886:  $.YearChart = $($.content + ' #yeargraph');",
          "6887:  $.YearChart.highcharts({",
          "",
          "[Added Lines]",
          "6752:  var total = 0;",
          "6753:  var datachart = [];",
          "6755:  $.getJSON(\"json.htm?type=graph&sensor=counter&idx=\" + $.devIdx + \"&range=year&actmonth=\" + actMonth + \"&actyear=\" + actYear,",
          "6756:   function (data) {",
          "6757:    var lastTotal = -1;",
          "6758:    $.each(data.result, function (i, item) {",
          "6759:     var month = parseInt(item.d.substring(5, 7), 10);",
          "6760:     var year = parseInt(item.d.substring(0, 4), 10);",
          "6762:     if ((month == actMonth) && (year == actYear)) {",
          "6763:      var day = parseInt(item.d.substring(8, 10), 10);",
          "6764:      var Usage = parseFloat(item.v);",
          "6765:      var Counter = parseFloat(item.c);",
          "6767:      total += Usage;",
          "6769:      var cdate = Date.UTC(actYear, actMonth - 1, day);",
          "6770:      var cday = $.t(dateFormat(cdate, \"dddd\"));",
          "6771:      datachart.push([cdate, parseFloat(item.v)]);",
          "6773:      var rcost;",
          "6774:      if (($.devSwitchType == 0) || ($.devSwitchType == 4)) {",
          "6776:       rcost = Usage * $.costsT1;",
          "6778:      else if ($.devSwitchType == 1) {",
          "6780:       rcost = Usage * $.costsGas;",
          "6782:      else {",
          "6784:       rcost = Usage * $.costsWater;",
          "6785:      }",
          "6787:      var img;",
          "6788:      if ((lastTotal == -1) || (lastTotal == Usage)) {",
          "6789:       img = '<img src=\"images/equal.png\"></img>';",
          "6790:      }",
          "6791:      else if (Usage < lastTotal) {",
          "6792:       if ($.devSwitchType == 4) {",
          "6793:        img = '<img src=\"images/up.png\" class=\"vflip\"></img>';",
          "6794:       } else {",
          "6795:        img = '<img src=\"images/down.png\"></img>';",
          "6798:      else {",
          "6799:       if ($.devSwitchType == 4) {",
          "6800:        img = '<img src=\"images/down.png\" class=\"vflip\"></img>';",
          "6801:       } else {",
          "6802:        img = '<img src=\"images/up.png\"></img>';",
          "6803:       }",
          "6804:      }",
          "6805:      lastTotal = Usage;",
          "6807:      var addId = oTable.fnAddData([",
          "6808:       day,",
          "6809:       cday,",
          "6810:       Counter.toFixed(3),",
          "6811:       Usage.toFixed(3),",
          "6812:       rcost.toFixed(2),",
          "6813:       img",
          "6814:      ], false);",
          "6815:     }",
          "6816:    });",
          "6818:    $($.content + ' #tu').html(total.toFixed(3));",
          "6820:    var montlycosts;",
          "6821:    if (($.devSwitchType == 0) || ($.devSwitchType == 4)) {",
          "6823:     montlycosts = (total * $.costsT1)",
          "6824:     $.UsageChart.highcharts().addSeries({",
          "6825:      id: 'energy',",
          "6826:      name: ($.devSwitchType == 0) ? $.t('Usage') : $.t('Generated'),",
          "6827:      showInLegend: false,",
          "6828:      color: 'rgba(3,190,252,0.8)',",
          "6829:      yAxis: 0",
          "6830:     });",
          "6831:     var series = $.UsageChart.highcharts().get('energy');",
          "6832:     series.setData(datachart);",
          "6833:    }",
          "6834:    else if ($.devSwitchType == 1) {",
          "6836:     montlycosts = (total * $.costsGas)",
          "6837:     $.UsageChart.highcharts().addSeries({",
          "6838:      id: 'gas',",
          "6839:      name: 'Gas',",
          "6840:      showInLegend: false,",
          "6841:      color: 'rgba(3,190,252,0.8)',",
          "6842:      yAxis: 0",
          "6843:     });",
          "6844:     var series = $.UsageChart.highcharts().get('gas');",
          "6845:     series.setData(datachart);",
          "6846:    }",
          "6847:    else {",
          "6849:     montlycosts = (total * $.costsWater)",
          "6850:     $.UsageChart.highcharts().addSeries({",
          "6851:      id: 'water',",
          "6852:      name: 'Water',",
          "6853:      showInLegend: false,",
          "6854:      color: 'rgba(3,190,252,0.8)',",
          "6855:      yAxis: 0",
          "6856:     });",
          "6857:     var series = $.UsageChart.highcharts().get('water');",
          "6858:     series.setData(datachart);",
          "6859:    }",
          "6860:    $($.content + ' #mc').html(montlycosts.toFixed(2));",
          "6862:    mTable.fnDraw();",
          "6864:    $($.content + ' #monthreport tbody tr').click(function (e) {",
          "6865:     if ($(this).hasClass('row_selected')) {",
          "6866:      $(this).removeClass('row_selected');",
          "6867:     }",
          "6868:     else {",
          "6869:      oTable.$('tr.row_selected').removeClass('row_selected');",
          "6870:      $(this).addClass('row_selected');",
          "6871:     }",
          "6872:    });",
          "6873:   });",
          "6875:  return false;",
          "6876: }",
          "6878: function addLeadingZeros(n, length) {",
          "6879:  var str = n.toString();",
          "6880:  var zeros = \"\";",
          "6881:  for (var i = length - str.length; i > 0; i--)",
          "6882:   zeros += \"0\";",
          "6883:  zeros += str;",
          "6884:  return zeros;",
          "6885: }",
          "6887: function Add2YearTableP1ReportGas(oTable, total, lastTotal, lastMonth, actYear) {",
          "6888:  var rcost;",
          "6889:  if (($.devSwitchType == 0) || ($.devSwitchType == 4)) {",
          "6891:   rcost = total * $.costsT1;",
          "6892:  }",
          "6893:  else if ($.devSwitchType == 1) {",
          "6895:   rcost = total * $.costsGas;",
          "6896:  }",
          "6897:  else {",
          "6899:   rcost = total * $.costsWater;",
          "6900:  }",
          "6902:  var img;",
          "6903:  if ((lastTotal == -1) || (lastTotal == total)) {",
          "6904:   img = '<img src=\"images/equal.png\"></img>';",
          "6905:  }",
          "6906:  else if (total < lastTotal) {",
          "6907:   if ($.devSwitchType == 4) {",
          "6908:    img = '<img src=\"images/up.png\" class=\"vflip\"></img>';",
          "6909:   } else {",
          "6910:    img = '<img src=\"images/down.png\"></img>';",
          "6911:   }",
          "6912:  }",
          "6913:  else {",
          "6914:   if ($.devSwitchType == 4) {",
          "6915:    img = '<img src=\"images/down.png\" class=\"vflip\"></img>';",
          "6916:   } else {",
          "6917:    img = '<img src=\"images/up.png\"></img>';",
          "6918:   }",
          "6919:  }",
          "6921:  var monthtxt = addLeadingZeros(parseInt(lastMonth), 2) + \". \" + $.t($.monthNames[lastMonth - 1]) + \" \";",
          "6922:  monthtxt += '<img src=\"images/next.png\" onclick=\"ShowP1MonthReportGas(' + lastMonth + ',' + actYear + ')\">';",
          "6924:  var addId = oTable.fnAddData([",
          "6925:   monthtxt,",
          "6926:   total.toFixed(3),",
          "6927:   rcost.toFixed(2),",
          "6928:   img",
          "6929:  ], false);",
          "6930:  return total;",
          "6931: }",
          "6933: function ShowP1YearReportGas(actYear) {",
          "6934:  if (actYear == 0) {",
          "6935:   actYear = $.actYear;",
          "6936:  }",
          "6937:  else {",
          "6938:   $.actYear = actYear;",
          "6939:  }",
          "6940:  var htmlcontent = '';",
          "6941:  htmlcontent += $('#toptextyeargas').html();",
          "6942:  htmlcontent += $('#yearreportviewgas').html();",
          "6944:  $($.content).html(htmlcontent);",
          "6945:  $($.content + ' #backbutton').click(function (e) {",
          "6946:   eval($.backfunction)();",
          "6947:  });",
          "6948:  $($.content).i18n();",
          "6950:  $($.content + ' #theader').html(unescape($.devName) + \" \" + actYear);",
          "6951:  $($.content + ' #spanyeargastotalusage').html(($.devSwitchType == 4) ? $.t('Total Generated') : $.t('Total Usage'));",
          "6953:  var yAxisTitle = $.t('Energy') + ' (kWh)';",
          "6954:  if (($.devSwitchType == 0) || ($.devSwitchType == 4)) {",
          "6956:   $($.content + ' #munit').html(\"kWh\");",
          "6957:   $($.content + ' #thyeargasusage').html(($.devSwitchType == 4) ? $.t('Generated') : $.t('Usage'));",
          "6958:  }",
          "6959:  else if ($.devSwitchType == 1) {",
          "6961:   $($.content + ' #munit').html(\"m3\");",
          "6962:   yAxisTitle = $.t('Usage') + ' (m3)';",
          "6963:  }",
          "6964:  else {",
          "6966:   $($.content + ' #munit').html(\"m3\");",
          "6967:   yAxisTitle = $.t('Usage') + ' (m3)';",
          "6968:  }",
          "6970:  $($.content + ' #comboyear').val(actYear);",
          "6972:  $($.content + ' #comboyear').change(function () {",
          "6973:   OnSelChangeYearP1ReportGas();",
          "6974:  });",
          "6975:  $($.content + ' #comboyear').keypress(function () {",
          "6976:   $(this).change();",
          "6977:  });",
          "6979:  $($.content + ' #yearreport').dataTable({",
          "6980:   \"sDom\": '<\"H\"rC>t<\"F\">',",
          "6981:   \"oTableTools\": {",
          "6982:    \"sRowSelect\": \"single\"",
          "6983:   },",
          "6984:   \"aaSorting\": [[0, \"asc\"]],",
          "6985:   \"aoColumnDefs\": [",
          "6986:    { \"bSortable\": false, \"aTargets\": [3] }",
          "6987:   ],",
          "6988:   \"bSortClasses\": false,",
          "6989:   \"bProcessing\": true,",
          "6990:   \"bStateSave\": false,",
          "6991:   \"bJQueryUI\": true,",
          "6992:   \"aLengthMenu\": [[50, 100, -1], [50, 100, \"All\"]],",
          "6993:   \"iDisplayLength\": 50,",
          "6994:   language: $.DataTableLanguage",
          "6995:  });",
          "6997:  var mTable = $($.content + ' #yearreport');",
          "6998:  var oTable = mTable.dataTable();",
          "6999:  oTable.fnClearTable();",
          "7001:  $.UsageChart = $($.content + ' #usagegraph');",
          "7002:  $.UsageChart.highcharts({",
          "7003:   chart: {",
          "7004:    type: 'column'",
          "7005:   },",
          "7006:   credits: {",
          "7007:    enabled: true,",
          "7008:    href: \"http://www.domoticz.com\",",
          "7009:    text: \"Domoticz.com\"",
          "7010:   },",
          "7011:   title: {",
          "7012:    text: ''",
          "7013:   },",
          "7014:   xAxis: {",
          "7015:    type: 'datetime'",
          "7016:   },",
          "7017:   yAxis: {",
          "7018:    min: 0,",
          "7019:    maxPadding: 0.2,",
          "7020:    title: {",
          "7021:     text: yAxisTitle",
          "7022:    },",
          "7023:    min: 0",
          "7024:   },",
          "7025:   tooltip: {",
          "7026:    formatter: function () {",
          "7027:     var unit = GetGraphUnit(this.series.name);",
          "7028:     return $.t(Highcharts.dateFormat('%B', this.x)) + '<br/>' + this.series.name + ': ' + this.y + ' ' + unit;",
          "7029:    }",
          "7030:   },",
          "7031:   plotOptions: {",
          "7032:    column: {",
          "7033:     minPointLength: 4,",
          "7034:     pointPadding: 0.1,",
          "7035:     groupPadding: 0,",
          "7036:     dataLabels: {",
          "7037:      enabled: true,",
          "7038:      color: 'white'",
          "7039:     }",
          "7040:    }",
          "7041:   },",
          "7042:   legend: {",
          "7043:    enabled: true",
          "7044:   }",
          "7045:  });",
          "7047:  var total = 0;",
          "7048:  var global = 0;",
          "7049:  var datachart = [];",
          "7051:  var actual_counter = \"Unknown?\";",
          "7053:  $.getJSON(\"json.htm?type=graph&sensor=counter&idx=\" + $.devIdx + \"&range=year&actyear=\" + actYear,",
          "7054:   function (data) {",
          "7055:    var lastTotal = -1;",
          "7056:    var lastMonth = -1;",
          "7057:    if (typeof data.counter != 'undefined') {",
          "7058:     actual_counter = data.counter;",
          "7059:    }",
          "7061:    $.each(data.result, function (i, item) {",
          "7062:     var month = parseInt(item.d.substring(5, 7), 10);",
          "7063:     var year = parseInt(item.d.substring(0, 4), 10);",
          "7064:     if (year == actYear) {",
          "7065:      if (lastMonth == -1) {",
          "7066:       lastMonth = month;",
          "7067:      }",
          "7068:      if (lastMonth != month) {",
          "7070:       lastTotal = Add2YearTableP1ReportGas(oTable, total, lastTotal, lastMonth, actYear);",
          "7072:       var cdate = Date.UTC(actYear, lastMonth - 1, 1);",
          "7073:       datachart.push([cdate, parseFloat(total.toFixed(3))]);",
          "7075:       lastMonth = month;",
          "7076:       global += total;",
          "7078:       total = 0;",
          "7079:      }",
          "7080:      var day = parseInt(item.d.substring(8, 10), 10);",
          "7081:      var Usage = 0;",
          "7083:      Usage = parseFloat(item.v);",
          "7084:      total += Usage;",
          "7085:     }",
          "7086:    });",
          "7089:    if (total != 0) {",
          "7090:     lastTotal = Add2YearTableP1ReportGas(oTable, total, lastTotal, lastMonth, actYear);",
          "7091:     var cdate = Date.UTC(actYear, lastMonth - 1, 1);",
          "7092:     datachart.push([cdate, parseFloat(total.toFixed(3))]);",
          "7093:     global += lastTotal;",
          "7094:    }",
          "7096:    $($.content + ' #tu').html(global.toFixed(3));",
          "7097:    var montlycosts = 0;",
          "7098:    if (($.devSwitchType == 0) || ($.devSwitchType == 4)) {",
          "7100:     montlycosts = (global * $.costsT1);",
          "7101:     $.UsageChart.highcharts().addSeries({",
          "7102:      id: 'energy',",
          "7103:      name: ($.devSwitchType == 0) ? $.t('Usage') : $.t('Generated'),",
          "7104:      showInLegend: false,",
          "7105:      color: 'rgba(3,190,252,0.8)',",
          "7106:      yAxis: 0",
          "7107:     });",
          "7108:     var series = $.UsageChart.highcharts().get('energy');",
          "7109:     series.setData(datachart);",
          "7110:    }",
          "7111:    else if ($.devSwitchType == 1) {",
          "7113:     montlycosts = (global * $.costsGas);",
          "7114:     $.UsageChart.highcharts().addSeries({",
          "7115:      id: 'gas',",
          "7116:      name: 'Gas',",
          "7117:      showInLegend: false,",
          "7118:      color: 'rgba(3,190,252,0.8)',",
          "7119:      yAxis: 0",
          "7120:     });",
          "7121:     var series = $.UsageChart.highcharts().get('gas');",
          "7122:     series.setData(datachart);",
          "7123:    }",
          "7124:    else {",
          "7126:     montlycosts = (global * $.costsWater);",
          "7127:     $.UsageChart.highcharts().addSeries({",
          "7128:      id: 'water',",
          "7129:      name: 'Water',",
          "7130:      showInLegend: false,",
          "7131:      color: 'rgba(3,190,252,0.8)',",
          "7132:      yAxis: 0",
          "7133:     });",
          "7134:     var series = $.UsageChart.highcharts().get('water');",
          "7135:     series.setData(datachart);",
          "7136:    }",
          "7138:    $($.content + ' #mc').html(montlycosts.toFixed(2));",
          "7139:    $($.content + ' #cntr').html(actual_counter);",
          "7141:    mTable.fnDraw();",
          "7143:    $($.content + ' #yearreport tbody tr').click(function (e) {",
          "7144:     if ($(this).hasClass('row_selected')) {",
          "7145:      $(this).removeClass('row_selected');",
          "7146:     }",
          "7147:     else {",
          "7148:      oTable.$('tr.row_selected').removeClass('row_selected');",
          "7149:      $(this).addClass('row_selected');",
          "7150:     }",
          "7151:    });",
          "7152:   });",
          "7154:  return false;",
          "7155: }",
          "7157: function ShowP1MonthReport(actMonth, actYear) {",
          "7158:  var htmlcontent = '';",
          "7160:  htmlcontent += $('#toptextmonth').html();",
          "7161:  htmlcontent += $('#monthreportview').html();",
          "7162:  $($.content).html(htmlcontent);",
          "7163:  $($.content).i18n();",
          "7165:  $($.content + ' #theader').html(unescape($.devName) + \" \" + $.t($.monthNames[actMonth - 1]) + \" \" + actYear);",
          "7167:  $($.content + ' #monthreport').dataTable({",
          "7168:   \"sDom\": '<\"H\"rC>t<\"F\">',",
          "7169:   \"oTableTools\": {",
          "7170:    \"sRowSelect\": \"single\"",
          "7171:   },",
          "7172:   \"aaSorting\": [[0, \"asc\"]],",
          "7173:   \"aoColumnDefs\": [",
          "7174:    { \"bSortable\": false, \"aTargets\": [10] }",
          "7175:   ],",
          "7176:   \"bSortClasses\": false,",
          "7177:   \"bProcessing\": true,",
          "7178:   \"bStateSave\": false,",
          "7179:   \"bJQueryUI\": true,",
          "7180:   \"aLengthMenu\": [[50, 100, -1], [50, 100, \"All\"]],",
          "7181:   \"iDisplayLength\": 50,",
          "7182:   language: $.DataTableLanguage",
          "7183:  });",
          "7184:  var mTable = $($.content + ' #monthreport');",
          "7185:  var oTable = mTable.dataTable();",
          "7186:  oTable.fnClearTable();",
          "7188:  $.UsageChart = $($.content + ' #usagegraph');",
          "7189:  $.UsageChart.highcharts({",
          "7190:   chart: {",
          "7191:    type: 'column',",
          "7192:    marginRight: 10",
          "7193:   },",
          "7194:   credits: {",
          "7195:    enabled: true,",
          "7196:    href: \"http://www.domoticz.com\",",
          "7197:    text: \"Domoticz.com\"",
          "7198:   },",
          "7199:   title: {",
          "7200:    text: ''",
          "7201:   },",
          "7202:   xAxis: {",
          "7203:    type: 'datetime'",
          "7204:   },",
          "7205:   yAxis: {",
          "7206:    title: {",
          "7207:     text: $.t('Energy') + ' (kWh)'",
          "7208:    },",
          "7209:    min: 0",
          "7210:   },",
          "7211:   tooltip: {",
          "7212:    formatter: function () {",
          "7213:     var unit = GetGraphUnit(this.series.name);",
          "7214:     return $.t(Highcharts.dateFormat('%B', this.x)) + \" \" + Highcharts.dateFormat('%d', this.x) + '<br/>' + $.t(this.series.name) + ': ' + this.y + ' ' + unit + '<br/>Total: ' + this.point.stackTotal + ' ' + unit;",
          "7215:    }",
          "7216:   },",
          "7217:   plotOptions: {",
          "7218:    column: {",
          "7219:     stacking: 'normal',",
          "7220:     minPointLength: 4,",
          "7221:     pointPadding: 0.1,",
          "7222:     groupPadding: 0",
          "7223:    }",
          "7224:   },",
          "7225:   legend: {",
          "7226:    enabled: true",
          "7227:   }",
          "7228:  });",
          "7229:  var datachartT1 = [];",
          "7230:  var datachartT2 = [];",
          "7231:  var datachartR1 = [];",
          "7232:  var datachartR2 = [];",
          "7234:  var totalT1 = 0;",
          "7235:  var totalT2 = 0;",
          "7236:  var totalR1 = 0;",
          "7237:  var totalR2 = 0;",
          "7239:  var bHaveDelivered = false;",
          "7241:  $.getJSON(\"json.htm?type=graph&sensor=counter&idx=\" + $.devIdx + \"&range=year&actmonth=\" + actMonth + \"&actyear=\" + actYear,",
          "7242:   function (data) {",
          "7243:    bHaveDelivered = (typeof data.delivered != 'undefined');",
          "7244:    if (bHaveDelivered == false) {",
          "7245:     $($.content + ' #dreturn').hide();",
          "7246:    }",
          "7247:    else {",
          "7248:     $($.content + ' #dreturn').show();",
          "7249:    }",
          "7251:    oTable.fnSetColumnVis(8, bHaveDelivered);",
          "7252:    oTable.fnSetColumnVis(9, bHaveDelivered);",
          "7253:    oTable.fnSetColumnVis(10, bHaveDelivered);",
          "7254:    oTable.fnSetColumnVis(11, bHaveDelivered);",
          "7255:    oTable.fnSetColumnVis(12, bHaveDelivered);",
          "7256:    oTable.fnSetColumnVis(13, bHaveDelivered);",
          "7258:    var lastTotal = -1;",
          "7260:    $.each(data.result, function (i, item) {",
          "7261:     var month = parseInt(item.d.substring(5, 7), 10);",
          "7262:     var year = parseInt(item.d.substring(0, 4), 10);",
          "7264:     if ((month == actMonth) && (year == actYear)) {",
          "7265:      var day = parseInt(item.d.substring(8, 10), 10);",
          "7266:      var UsageT1 = 0;",
          "7267:      var UsageT2 = 0;",
          "7268:      var ReturnT1 = 0;",
          "7269:      var ReturnT2 = 0;",
          "7271:      UsageT1 = parseFloat(item.v);",
          "7272:      if (typeof item.v2 != 'undefined') {",
          "7273:       UsageT2 = parseFloat(item.v2);",
          "7274:      }",
          "7275:      if (typeof item.r1 != 'undefined') {",
          "7276:       ReturnT1 = parseFloat(item.r1);",
          "7277:      }",
          "7278:      if (typeof item.r2 != 'undefined') {",
          "7279:       ReturnT2 = parseFloat(item.r2);",
          "7280:      }",
          "7282:      var cdate = Date.UTC(actYear, actMonth - 1, day);",
          "7283:      var cday = $.t(dateFormat(cdate, \"dddd\"));",
          "7284:      datachartT1.push([cdate, parseFloat(UsageT1.toFixed(3))]);",
          "7285:      datachartT2.push([cdate, parseFloat(UsageT2.toFixed(3))]);",
          "7286:      datachartR1.push([cdate, parseFloat(ReturnT1.toFixed(3))]);",
          "7287:      datachartR2.push([cdate, parseFloat(ReturnT2.toFixed(3))]);",
          "7289:      totalT1 += UsageT1;",
          "7290:      totalT2 += UsageT2;",
          "7291:      totalR1 += ReturnT1;",
          "7292:      totalR2 += ReturnT2;",
          "7294:      var rcostT1 = UsageT1 * $.costsT1;",
          "7295:      var rcostT2 = UsageT2 * $.costsT2;",
          "7296:      var rcostR1 = -(ReturnT1 * $.costsR1);",
          "7297:      var rcostR2 = -(ReturnT2 * $.costsR2);",
          "7298:      var rTotal = rcostT1 + rcostT2 + rcostR1 + rcostR2;",
          "7300:      var textR1 = \"\";",
          "7301:      var textR2 = \"\";",
          "7302:      var textCostR1 = \"\";",
          "7303:      var textCostR2 = \"\";",
          "7305:      if (ReturnT1 != 0) {",
          "7306:       textR1 = ReturnT1.toFixed(3);",
          "7307:       textCostR1 = rcostR1.toFixed(2);",
          "7308:      }",
          "7309:      if (ReturnT2 != 0) {",
          "7310:       textR2 = ReturnT2.toFixed(3);",
          "7311:       textCostR2 = rcostR2.toFixed(2);",
          "7312:      }",
          "7313:      var CounterT1 = parseFloat(item.c1).toFixed(3);",
          "7314:      var CounterT2 = parseFloat(item.c3).toFixed(3);",
          "7315:      var CounterR1 = parseFloat(item.c2).toFixed(3);",
          "7316:      var CounterR2 = parseFloat(item.c4).toFixed(3);",
          "7318:      var img;",
          "7319:      if ((lastTotal == -1) || (lastTotal == rTotal)) {",
          "7320:       img = '<img src=\"images/equal.png\"></img>';",
          "7321:      }",
          "7322:      else if (rTotal < lastTotal) {",
          "7323:       img = '<img src=\"images/down.png\"></img>';",
          "7324:      }",
          "7325:      else {",
          "7326:       img = '<img src=\"images/up.png\"></img>';",
          "7327:      }",
          "7328:      lastTotal = rTotal;",
          "7330:      var addId = oTable.fnAddData([",
          "7331:       day,",
          "7332:       cday,",
          "7333:       CounterT1,",
          "7334:       UsageT1.toFixed(3),",
          "7335:       rcostT1.toFixed(2),",
          "7336:       CounterT2,",
          "7337:       UsageT2.toFixed(3),",
          "7338:       rcostT2.toFixed(2),",
          "7339:       CounterR1,",
          "7340:       textR1,",
          "7341:       textCostR1,",
          "7342:       CounterR2,",
          "7343:       textR2,",
          "7344:       textCostR2,",
          "7345:       rTotal.toFixed(2),",
          "7346:       img",
          "7347:      ], false);",
          "7348:     }",
          "7349:    });",
          "7351:    if (datachartT1.length > 0) {",
          "7352:     if (datachartT2.length > 0) {",
          "7353:      $.UsageChart.highcharts().addSeries({",
          "7354:       id: 'usage1',",
          "7355:       name: $.t('Usage') + ' 1',",
          "7356:       color: 'rgba(60,130,252,0.8)',",
          "7357:       stack: 'susage',",
          "7358:       yAxis: 0",
          "7359:      });",
          "7360:     }",
          "7361:     else {",
          "7362:      $.UsageChart.highcharts().addSeries({",
          "7363:       id: 'usage1',",
          "7364:       name: 'Usage',",
          "7365:       color: 'rgba(3,190,252,0.8)',",
          "7366:       stack: 'susage',",
          "7367:       yAxis: 0",
          "7368:      });",
          "7369:     }",
          "7370:     series = $.UsageChart.highcharts().get('usage1');",
          "7371:     series.setData(datachartT1);",
          "7372:    }",
          "7373:    if (datachartT2.length > 0) {",
          "7374:     $.UsageChart.highcharts().addSeries({",
          "7375:      id: 'usage2',",
          "7376:      name: $.t('Usage') + ' 2',",
          "7377:      color: 'rgba(3,190,252,0.8)',",
          "7378:      stack: 'susage',",
          "7379:      yAxis: 0",
          "7380:     });",
          "7381:     series = $.UsageChart.highcharts().get('usage2');",
          "7382:     series.setData(datachartT2);",
          "7383:    }",
          "7384:    if (bHaveDelivered) {",
          "7385:     if (datachartR1.length > 0) {",
          "7386:      $.UsageChart.highcharts().addSeries({",
          "7387:       id: 'return1',",
          "7388:       name: $.t('Return') + ' 1',",
          "7389:       color: 'rgba(30,242,110,0.8)',",
          "7390:       stack: 'sreturn',",
          "7391:       yAxis: 0",
          "7392:      });",
          "7393:      series = $.UsageChart.highcharts().get('return1');",
          "7394:      series.setData(datachartR1);",
          "7395:     }",
          "7396:     if (datachartR2.length > 0) {",
          "7397:      $.UsageChart.highcharts().addSeries({",
          "7398:       id: 'return2',",
          "7399:       name: $.t('Return') + ' 2',",
          "7400:       color: 'rgba(3,252,190,0.8)',",
          "7401:       stack: 'sreturn',",
          "7402:       yAxis: 0",
          "7403:      });",
          "7404:      series = $.UsageChart.highcharts().get('return2');",
          "7405:      series.setData(datachartR2);",
          "7406:     }",
          "7407:    }",
          "7409:    $($.content + ' #tut1').html(totalT1.toFixed(3));",
          "7410:    $($.content + ' #tut2').html(totalT2.toFixed(3));",
          "7411:    $($.content + ' #trt1').html(totalR1.toFixed(3));",
          "7412:    $($.content + ' #trt2').html(totalR2.toFixed(3));",
          "7414:    var gtotal = totalT1 + totalT2;",
          "7415:    var greturn = totalR1 + totalR2;",
          "7416:    $($.content + ' #tu').html(gtotal.toFixed(3));",
          "7417:    $($.content + ' #tr').html(greturn.toFixed(3));",
          "7418:    var montlycosts = (totalT1 * $.costsT1) + (totalT2 * $.costsT2) - (totalR1 * $.costsR1) - (totalR2 * $.costsR2);",
          "7419:    $($.content + ' #mc').html(montlycosts.toFixed(2));",
          "7421:    mTable.fnDraw();",
          "7423:    $($.content + ' #monthreport tbody tr').click(function (e) {",
          "7424:     if ($(this).hasClass('row_selected')) {",
          "7425:      $(this).removeClass('row_selected');",
          "7426:     }",
          "7427:     else {",
          "7428:      oTable.$('tr.row_selected').removeClass('row_selected');",
          "7429:      $(this).addClass('row_selected');",
          "7430:     }",
          "7431:    });",
          "7432:   });",
          "7434:  return false;",
          "7435: }",
          "7437: function OnSelChangeYearP1Report() {",
          "7438:  var yearidx = $($.content + ' #comboyear option:selected').val();",
          "7439:  if (typeof yearidx == 'undefined') {",
          "7440:   return;",
          "7441:  }",
          "7442:  ShowP1YearReport(yearidx);",
          "7443: }",
          "7445: function Add2YearTableP1Report(oTable, totalT1, totalT2, totalR1, totalR2, lastTotal, lastMonth, actYear) {",
          "7446:  var rcostT1 = totalT1 * $.costsT1;",
          "7447:  var rcostT2 = totalT2 * $.costsT2;",
          "7448:  var rcostR1 = -(totalR1 * $.costsR1);",
          "7449:  var rcostR2 = -(totalR2 * $.costsR2);",
          "7450:  var rTotal = rcostT1 + rcostT2 + rcostR1 + rcostR2;",
          "7452:  var textR1 = \"\";",
          "7453:  var textR2 = \"\";",
          "7454:  var textCostR1 = \"\";",
          "7455:  var textCostR2 = \"\";",
          "7457:  if (totalR1 != 0) {",
          "7458:   textR1 = totalR1.toFixed(3);",
          "7459:   textCostR1 = rcostR1.toFixed(2);",
          "7460:  }",
          "7461:  if (totalR2 != 0) {",
          "7462:   textR2 = totalR2.toFixed(3);",
          "7463:   textCostR2 = rcostR2.toFixed(2);",
          "7464:  }",
          "7467:  var img;",
          "7468:  if ((lastTotal == -1) || (lastTotal == rTotal)) {",
          "7469:   img = '<img src=\"images/equal.png\"></img>';",
          "7470:  }",
          "7471:  else if (rTotal < lastTotal) {",
          "7472:   img = '<img src=\"images/down.png\"></img>';",
          "7473:  }",
          "7474:  else {",
          "7475:   img = '<img src=\"images/up.png\"></img>';",
          "7476:  }",
          "7478:  var monthtxt = addLeadingZeros(parseInt(lastMonth), 2) + \". \" + $.t($.monthNames[lastMonth - 1]) + \" \";",
          "7479:  monthtxt += '<img src=\"images/next.png\" onclick=\"ShowP1MonthReport(' + lastMonth + ',' + actYear + ')\">';",
          "7481:  var addId = oTable.fnAddData([",
          "7482:   monthtxt,",
          "7483:   totalT1.toFixed(3),",
          "7484:   rcostT1.toFixed(2),",
          "7485:   totalT2.toFixed(3),",
          "7486:   rcostT2.toFixed(2),",
          "7487:   textR1,",
          "7488:   textCostR1,",
          "7489:   textR2,",
          "7490:   textCostR2,",
          "7491:   rTotal.toFixed(2),",
          "7492:   img",
          "7493:  ], false);",
          "7494:  return rTotal;",
          "7495: }",
          "7497: function ShowP1YearReport(actYear) {",
          "7498:  if (actYear == 0) {",
          "7499:   actYear = $.actYear;",
          "7500:  }",
          "7501:  else {",
          "7502:   $.actYear = actYear;",
          "7503:  }",
          "7504:  var htmlcontent = '';",
          "7505:  htmlcontent += $('#toptextyear').html();",
          "7506:  htmlcontent += $('#yearreportview').html();",
          "7508:  $($.content).html(htmlcontent);",
          "7509:  $($.content + ' #backbutton').click(function (e) {",
          "7510:   eval($.backfunction)();",
          "7511:  });",
          "7512:  $($.content).i18n();",
          "7514:  $($.content + ' #theader').html(unescape($.devName) + \" \" + actYear);",
          "7516:  $($.content + ' #comboyear').val(actYear);",
          "7518:  $($.content + ' #comboyear').change(function () {",
          "7519:   OnSelChangeYearP1Report();",
          "7520:  });",
          "7521:  $($.content + ' #comboyear').keypress(function () {",
          "7522:   $(this).change();",
          "7523:  });",
          "7525:  $($.content + ' #yearreport').dataTable({",
          "7526:   \"sDom\": '<\"H\"rC>t<\"F\">',",
          "7527:   \"oTableTools\": {",
          "7528:    \"sRowSelect\": \"single\"",
          "7529:   },",
          "7530:   \"aaSorting\": [[0, \"asc\"]],",
          "7531:   \"aoColumnDefs\": [",
          "7532:    { \"bSortable\": false, \"aTargets\": [10] }",
          "7533:   ],",
          "7534:   \"bSortClasses\": false,",
          "7535:   \"bProcessing\": true,",
          "7536:   \"bStateSave\": false,",
          "7537:   \"bJQueryUI\": true,",
          "7538:   \"aLengthMenu\": [[50, 100, -1], [50, 100, \"All\"]],",
          "7539:   \"iDisplayLength\": 50,",
          "7540:   language: $.DataTableLanguage",
          "7541:  });",
          "7542:  var mTable = $($.content + ' #yearreport');",
          "7543:  var oTable = mTable.dataTable();",
          "7544:  oTable.fnClearTable();",
          "7546:  $.UsageChart = $($.content + ' #usagegraph');",
          "7547:  $.UsageChart.highcharts({",
          "7548:   chart: {",
          "7549:    type: 'column',",
          "7550:    marginRight: 10",
          "7551:   },",
          "7552:   credits: {",
          "7553:    enabled: true,",
          "7554:    href: \"http://www.domoticz.com\",",
          "7555:    text: \"Domoticz.com\"",
          "7556:   },",
          "7557:   title: {",
          "7558:    text: ''",
          "7559:   },",
          "7560:   xAxis: {",
          "7561:    type: 'datetime'",
          "7562:   },",
          "7563:   yAxis: {",
          "7564:    title: {",
          "7565:     text: $.t('Energy') + ' (kWh)'",
          "7566:    },",
          "7567:    min: 0",
          "7568:   },",
          "7569:   tooltip: {",
          "7570:    formatter: function () {",
          "7571:     var unit = GetGraphUnit(this.series.name);",
          "7572:     return $.t(Highcharts.dateFormat('%B', this.x)) + '<br/>' + $.t(this.series.name) + ': ' + this.y + ' ' + unit + '<br/>Total: ' + this.point.stackTotal + ' ' + unit;",
          "7573:    }",
          "7574:   },",
          "7575:   plotOptions: {",
          "7576:    column: {",
          "7577:     stacking: 'normal',",
          "7578:     minPointLength: 4,",
          "7579:     pointPadding: 0.1,",
          "7580:     groupPadding: 0",
          "7581:    }",
          "7582:   },",
          "7583:   legend: {",
          "7584:    enabled: true",
          "7585:   }",
          "7586:  });",
          "7587:  var datachartT1 = [];",
          "7588:  var datachartT2 = [];",
          "7589:  var datachartR1 = [];",
          "7590:  var datachartR2 = [];",
          "7592:  var totalT1 = 0;",
          "7593:  var totalT2 = 0;",
          "7594:  var totalR1 = 0;",
          "7595:  var totalR2 = 0;",
          "7597:  var globalT1 = 0;",
          "7598:  var globalT2 = 0;",
          "7599:  var globalR1 = 0;",
          "7600:  var globalR2 = 0;",
          "7602:  var bHaveDelivered = false;",
          "7604:  $.getJSON(\"json.htm?type=graph&sensor=counter&idx=\" + $.devIdx + \"&range=year&actyear=\" + actYear,",
          "7605:   function (data) {",
          "7606:    bHaveDelivered = (typeof data.delivered != 'undefined');",
          "7607:    if (bHaveDelivered == false) {",
          "7608:     $($.content + ' #dreturn').hide();",
          "7609:    }",
          "7610:    else {",
          "7611:     $($.content + ' #dreturn').show();",
          "7612:    }",
          "7614:    oTable.fnSetColumnVis(5, bHaveDelivered);",
          "7615:    oTable.fnSetColumnVis(6, bHaveDelivered);",
          "7616:    oTable.fnSetColumnVis(7, bHaveDelivered);",
          "7617:    oTable.fnSetColumnVis(8, bHaveDelivered);",
          "7619:    var lastTotal = -1;",
          "7620:    var lastMonth = -1;",
          "7622:    $.each(data.result, function (i, item) {",
          "7623:     var month = parseInt(item.d.substring(5, 7), 10);",
          "7624:     var year = parseInt(item.d.substring(0, 4), 10);",
          "7626:     if (year == actYear) {",
          "7627:      if (lastMonth == -1) {",
          "7628:       lastMonth = month;",
          "7629:      }",
          "7630:      if (lastMonth != month) {",
          "7632:       lastTotal = Add2YearTableP1Report(oTable, totalT1, totalT2, totalR1, totalR2, lastTotal, lastMonth, actYear);",
          "7634:       var cdate = Date.UTC(actYear, lastMonth - 1, 1);",
          "7635:       datachartT1.push([cdate, parseFloat(totalT1.toFixed(3))]);",
          "7636:       datachartT2.push([cdate, parseFloat(totalT2.toFixed(3))]);",
          "7637:       datachartR1.push([cdate, parseFloat(totalR1.toFixed(3))]);",
          "7638:       datachartR2.push([cdate, parseFloat(totalR2.toFixed(3))]);",
          "7640:       lastMonth = month;",
          "7641:       globalT1 += totalT1;",
          "7642:       globalT2 += totalT2;",
          "7643:       globalR1 += totalR1;",
          "7644:       globalR2 += totalR2;",
          "7646:       totalT1 = 0;",
          "7647:       totalT2 = 0;",
          "7648:       totalR1 = 0;",
          "7649:       totalR2 = 0;",
          "7650:      }",
          "7651:      var day = parseInt(item.d.substring(8, 10), 10);",
          "7652:      var UsageT1 = 0;",
          "7653:      var UsageT2 = 0;",
          "7654:      var ReturnT1 = 0;",
          "7655:      var ReturnT2 = 0;",
          "7657:      UsageT1 = parseFloat(item.v);",
          "7658:      if (typeof item.v2 != 'undefined') {",
          "7659:       UsageT2 = parseFloat(item.v2);",
          "7660:      }",
          "7661:      if (typeof item.r1 != 'undefined') {",
          "7662:       ReturnT1 = parseFloat(item.r1);",
          "7663:      }",
          "7664:      if (typeof item.r2 != 'undefined') {",
          "7665:       ReturnT2 = parseFloat(item.r2);",
          "7666:      }",
          "7668:      totalT1 += UsageT1;",
          "7669:      totalT2 += UsageT2;",
          "7670:      totalR1 += ReturnT1;",
          "7671:      totalR2 += ReturnT2;",
          "7672:     }",
          "7673:    });",
          "7676:    if ((totalT1 != 0) || (totalT2 != 0) || (totalR1 != 0) || (totalR2 != 0)) {",
          "7677:     lastTotal = Add2YearTableP1Report(oTable, totalT1, totalT2, totalR1, totalR2, lastTotal, lastMonth, actYear);",
          "7678:     var cdate = Date.UTC(actYear, lastMonth - 1, 1);",
          "7679:     datachartT1.push([cdate, parseFloat(totalT1.toFixed(3))]);",
          "7680:     datachartT2.push([cdate, parseFloat(totalT2.toFixed(3))]);",
          "7681:     datachartR1.push([cdate, parseFloat(totalR1.toFixed(3))]);",
          "7682:     datachartR2.push([cdate, parseFloat(totalR2.toFixed(3))]);",
          "7684:     globalT1 += totalT1;",
          "7685:     globalT2 += totalT2;",
          "7686:     globalR1 += totalR1;",
          "7687:     globalR2 += totalR2;",
          "7688:    }",
          "7690:    if (datachartT1.length > 0) {",
          "7691:     if (datachartT2.length > 0) {",
          "7692:      $.UsageChart.highcharts().addSeries({",
          "7693:       id: 'usage1',",
          "7694:       name: $.t('Usage') + ' 1',",
          "7695:       color: 'rgba(60,130,252,0.8)',",
          "7696:       stack: 'susage',",
          "7697:       yAxis: 0",
          "7698:      });",
          "7699:     }",
          "7700:     else {",
          "7701:      $.UsageChart.highcharts().addSeries({",
          "7702:       id: 'usage1',",
          "7703:       name: 'Usage',",
          "7704:       color: 'rgba(3,190,252,0.8)',",
          "7705:       stack: 'susage',",
          "7706:       yAxis: 0",
          "7707:      });",
          "7708:     }",
          "7709:     series = $.UsageChart.highcharts().get('usage1');",
          "7710:     series.setData(datachartT1);",
          "7711:    }",
          "7712:    if (datachartT2.length > 0) {",
          "7713:     $.UsageChart.highcharts().addSeries({",
          "7714:      id: 'usage2',",
          "7715:      name: $.t('Usage') + ' 2',",
          "7716:      color: 'rgba(3,190,252,0.8)',",
          "7717:      stack: 'susage',",
          "7718:      yAxis: 0",
          "7719:     });",
          "7720:     series = $.UsageChart.highcharts().get('usage2');",
          "7721:     series.setData(datachartT2);",
          "7722:    }",
          "7723:    if (bHaveDelivered) {",
          "7724:     if (datachartR1.length > 0) {",
          "7725:      $.UsageChart.highcharts().addSeries({",
          "7726:       id: 'return1',",
          "7727:       name: $.t('Return') + ' 1',",
          "7728:       color: 'rgba(30,242,110,0.8)',",
          "7729:       stack: 'sreturn',",
          "7730:       yAxis: 0",
          "7731:      });",
          "7732:      series = $.UsageChart.highcharts().get('return1');",
          "7733:      series.setData(datachartR1);",
          "7734:     }",
          "7735:     if (datachartR2.length > 0) {",
          "7736:      $.UsageChart.highcharts().addSeries({",
          "7737:       id: 'return2',",
          "7738:       name: $.t('Return') + ' 2',",
          "7739:       color: 'rgba(3,252,190,0.8)',",
          "7740:       stack: 'sreturn',",
          "7741:       yAxis: 0",
          "7742:      });",
          "7743:      series = $.UsageChart.highcharts().get('return2');",
          "7744:      series.setData(datachartR2);",
          "7745:     }",
          "7746:    }",
          "7748:    $($.content + ' #tut1').html(globalT1.toFixed(3));",
          "7749:    $($.content + ' #tut2').html(globalT2.toFixed(3));",
          "7750:    $($.content + ' #trt1').html(globalR1.toFixed(3));",
          "7751:    $($.content + ' #trt2').html(globalR2.toFixed(3));",
          "7753:    $($.content + ' #cntrt1').html($.CounterT1.toFixed(3));",
          "7754:    $($.content + ' #cntrt2').html($.CounterT2.toFixed(3));",
          "7755:    $($.content + ' #cntrr1').html($.CounterR1.toFixed(3));",
          "7756:    $($.content + ' #cntrr2').html($.CounterR2.toFixed(3));",
          "7758:    var gtotal = globalT1 + globalT2;",
          "7759:    var greturn = globalR1 + globalR2;",
          "7760:    $($.content + ' #tu').html(gtotal.toFixed(3));",
          "7761:    $($.content + ' #tr').html(greturn.toFixed(3));",
          "7762:    var montlycosts = (globalT1 * $.costsT1) + (globalT2 * $.costsT2) - (globalR1 * $.costsR1) - (globalR2 * $.costsR2);",
          "7763:    $($.content + ' #mc').html(montlycosts.toFixed(2));",
          "7765:    mTable.fnDraw();",
          "7767:    $($.content + ' #tbody tr').click(function (e) {",
          "7768:     if ($(this).hasClass('row_selected')) {",
          "7769:      $(this).removeClass('row_selected');",
          "7770:     }",
          "7771:     else {",
          "7772:      oTable.$('tr.row_selected').removeClass('row_selected');",
          "7773:      $(this).addClass('row_selected');",
          "7774:     }",
          "7775:    });",
          "7776:   });",
          "7778:  return false;",
          "7779: }",
          "7781: function ShowCounterLog(contentdiv, backfunction, id, name, switchtype) {",
          "7782:  clearInterval($.myglobals.refreshTimer);",
          "7783:  $(window).scrollTop(0);",
          "7784:  $('#modal').show();",
          "7785:  $.content = contentdiv;",
          "7786:  $.backfunction = backfunction;",
          "7787:  $.devIdx = id;",
          "7788:  $.devName = name;",
          "7789:  if (typeof switchtype != 'undefined') {",
          "7790:   $.devSwitchType = switchtype;",
          "7791:  }",
          "7792:  else {",
          "7793:   switchtype = $.devSwitchType;",
          "7794:  }",
          "7795:  var htmlcontent = '';",
          "7796:  htmlcontent = '<p><center><h2>' + unescape(name) + '</h2></center></p>\\n';",
          "7797:  htmlcontent += $('#dayweekmonthyearlog').html();",
          "7798:  if ((switchtype == 0) || (switchtype == 1) || (switchtype == 2) || (switchtype == 4)) {",
          "7799:   $.costsT1 = 0.2389;",
          "7800:   $.costsT2 = 0.2389;",
          "7801:   $.costsR1 = 0.08;",
          "7802:   $.costsR2 = 0.08;",
          "7803:   $.costsGas = 0.6218;",
          "7804:   $.costsWater = 1.6473;",
          "7805:   $.DividerWater = 1000;",
          "7807:   $.ajax({",
          "7808:    url: \"json.htm?type=command&param=getcosts&idx=\" + $.devIdx,",
          "7809:    async: false,",
          "7810:    dataType: 'json',",
          "7811:    success: function (data) {",
          "7812:     $.costsT1 = parseFloat(data.CostEnergy) / 10000;",
          "7813:     $.costsT2 = parseFloat(data.CostEnergyT2) / 10000;",
          "7814:     $.costsR1 = parseFloat(data.CostEnergyR1) / 10000;",
          "7815:     $.costsR2 = parseFloat(data.CostEnergyR2) / 10000;",
          "7816:     $.costsGas = parseFloat(data.CostGas) / 10000;",
          "7817:     $.costsWater = parseFloat(data.CostWater) / 10000;",
          "7818:     $.DividerWater = 1000;//parseFloat(data.DividerWater);",
          "7819:    }",
          "7820:   });",
          "7822:   $.monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",",
          "7823:    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];",
          "7825:   var d = new Date();",
          "7826:   var actMonth = d.getMonth() + 1;",
          "7827:   var actYear = d.getYear() + 1900;",
          "7828:   $($.content).html(GetBackbuttonHTMLTableWithRight(backfunction, 'ShowP1YearReportGas(' + actYear + ')', $.t('Report')) + htmlcontent);",
          "7829:  }",
          "7830:  else {",
          "7831:   $($.content).html(GetBackbuttonHTMLTable(backfunction) + htmlcontent);",
          "7832:  }",
          "7833:  $($.content).i18n();",
          "7835:  var graph_title = (switchtype == 4) ? $.t('Generated') : $.t('Usage');",
          "7836:  graph_title += ' ' + Get5MinuteHistoryDaysGraphTitle();",
          "7838:  $.DayChart = $($.content + ' #daygraph');",
          "7839:  $.DayChart.highcharts({",
          "7840:   chart: {",
          "7841:    type: 'column',",
          "7842:    marginRight: 10,",
          "7843:    zoomType: 'x',",
          "7844:    events: {",
          "7845:     load: function () {",
          "7847:      $.getJSON(\"json.htm?type=graph&sensor=counter&idx=\" + id + \"&range=day\",",
          "7848:       function (data) {",
          "7849:        if (typeof data.result != 'undefined') {",
          "7850:         AddDataToUtilityChart(data, $.DayChart, switchtype);",
          "7851:         $.DayChart.highcharts().redraw();",
          "7852:        }",
          "7853:       });",
          "7854:     }",
          "7855:    }",
          "7856:   },",
          "7857:   credits: {",
          "7858:    enabled: true,",
          "7859:    href: \"http://www.domoticz.com\",",
          "7860:    text: \"Domoticz.com\"",
          "7861:   },",
          "7862:   title: {",
          "7863:    text: graph_title",
          "7864:   },",
          "7865:   xAxis: {",
          "7866:    type: 'datetime',",
          "7867:    labels: {",
          "7868:     formatter: function () {",
          "7869:      return Highcharts.dateFormat(\"%H:%M\", this.value);",
          "7870:     }",
          "7871:    }",
          "7872:   },",
          "7873:   yAxis: {",
          "7874:    title: {",
          "7875:     text: $.t('Energy') + ' (Wh)'",
          "7876:    }",
          "7877:   },",
          "7878:   tooltip: {",
          "7879:    crosshairs: true,",
          "7880:    shared: true",
          "7881:   },",
          "7882:   plotOptions: {",
          "7883:    series: {",
          "7884:     point: {",
          "7885:      events: {",
          "7886:       click: function (event) {",
          "7887:        chartPointClickNew(event, true, ShowCounterLog);",
          "7888:       }",
          "7889:      }",
          "7890:     }",
          "7891:    },",
          "7892:    column: {",
          "7893:     minPointLength: 4,",
          "7894:     pointPadding: 0.1,",
          "7895:     groupPadding: 0",
          "7896:    }",
          "7897:   },",
          "7898:   legend: {",
          "7899:    enabled: true",
          "7900:   }",
          "7901:  });",
          "7903:  $.WeekChart = $($.content + ' #weekgraph');",
          "7904:  $.WeekChart.highcharts({",
          "7905:   chart: {",
          "7906:    type: 'column',",
          "7907:    marginRight: 10,",
          "7908:    events: {",
          "7909:     load: function () {",
          "7911:      $.getJSON(\"json.htm?type=graph&sensor=counter&idx=\" + id + \"&range=week\",",
          "7912:       function (data) {",
          "7913:        if (typeof data.result != 'undefined') {",
          "7914:         AddDataToUtilityChart(data, $.WeekChart, switchtype);",
          "7915:         $.WeekChart.highcharts().redraw();",
          "7916:        }",
          "7917:       });",
          "7918:     }",
          "7919:    }",
          "7920:   },",
          "7921:   credits: {",
          "7922:    enabled: true,",
          "7923:    href: \"http://www.domoticz.com\",",
          "7924:    text: \"Domoticz.com\"",
          "7925:   },",
          "7926:   title: {",
          "7927:    text: $.t('Last Week')",
          "7928:   },",
          "7929:   xAxis: {",
          "7930:    type: 'datetime',",
          "7931:    dateTimeLabelFormats: {",
          "7932:     day: '%a'",
          "7933:    },",
          "7934:    tickInterval: 24 * 3600 * 1000",
          "7935:   },",
          "7936:   yAxis: {",
          "7937:    title: {",
          "7938:     text: $.t('Energy') + ' (kWh)'",
          "7939:    },",
          "7940:    maxPadding: 0.2",
          "7941:   },",
          "7942:   tooltip: {",
          "7943:    crosshairs: true,",
          "7944:    shared: true",
          "7945:   },",
          "7946:   plotOptions: {",
          "7947:    column: {",
          "7948:     minPointLength: 4,",
          "7949:     pointPadding: 0.1,",
          "7950:     groupPadding: 0,",
          "7951:     dataLabels: {",
          "7952:      enabled: true,",
          "7953:      color: 'white'",
          "7954:     }",
          "7955:    }",
          "7956:   },",
          "7957:   legend: {",
          "7958:    enabled: true",
          "7959:   }",
          "7960:  });",
          "7962:  $.MonthChart = $($.content + ' #monthgraph');",
          "7963:  $.MonthChart.highcharts({",
          "7964:   chart: {",
          "7965:    type: 'spline',",
          "7966:    marginRight: 10,",
          "7967:    zoomType: 'x',",
          "7968:    resetZoomButton: {",
          "7969:     position: {",
          "7970:      x: -30,",
          "7971:      y: -36",
          "7972:     }",
          "7973:    },",
          "7974:    events: {",
          "7975:     load: function () {",
          "7977:      $.getJSON(\"json.htm?type=graph&sensor=counter&idx=\" + id + \"&range=month\",",
          "7978:       function (data) {",
          "7979:        if (typeof data.result != 'undefined') {",
          "7980:         AddDataToUtilityChart(data, $.MonthChart, switchtype);",
          "7981:         $.MonthChart.highcharts().redraw();",
          "7982:        }",
          "7983:       });",
          "7984:     }",
          "7985:    }",
          "7986:   },",
          "7987:   credits: {",
          "7988:    enabled: true,",
          "7989:    href: \"http://www.domoticz.com\",",
          "7990:    text: \"Domoticz.com\"",
          "7991:   },",
          "7992:   title: {",
          "7993:    text: $.t('Last Month')",
          "7994:   },",
          "7995:   xAxis: {",
          "7996:    type: 'datetime'",
          "7997:   },",
          "7998:   yAxis: {",
          "7999:    title: {",
          "8000:     text: $.t('Energy') + ' (kWh)'",
          "8001:    }",
          "8002:   },",
          "8003:   tooltip: {",
          "8004:    crosshairs: true,",
          "8005:    shared: true",
          "8006:   },",
          "8007:   plotOptions: {",
          "8008:    series: {",
          "8009:     point: {",
          "8010:      events: {",
          "8011:       click: function (event) {",
          "8012:        chartPointClickNewEx(event, false, ShowCounterLog);",
          "8013:       }",
          "8014:      }",
          "8015:     }",
          "8016:    },",
          "8017:    spline: {",
          "8018:     lineWidth: 3,",
          "8019:     states: {",
          "8020:      hover: {",
          "8021:       lineWidth: 3",
          "8022:      }",
          "8023:     },",
          "8024:     marker: {",
          "8025:      enabled: false,",
          "8026:      states: {",
          "8027:       hover: {",
          "8028:        enabled: true,",
          "8029:        symbol: 'circle',",
          "8030:        radius: 5,",
          "8031:        lineWidth: 1",
          "8032:       }",
          "8033:      }",
          "8034:     }",
          "8035:    }",
          "8036:   },",
          "8037:   legend: {",
          "8038:    enabled: true",
          "8039:   }",
          "8040:  });",
          "8042:  $.YearChart = $($.content + ' #yeargraph');",
          "8043:  $.YearChart.highcharts({",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6979:  else {",
          "6980:   switchtype = $.devSwitchType;",
          "6981:  }",
          "6986:  var graph_title = (switchtype == 4) ? $.t('Generated') : $.t('Usage');",
          "6987:  graph_title += ' ' + Get5MinuteHistoryDaysGraphTitle();",
          "",
          "[Removed Lines]",
          "6983:     var htmlcontent = $('#dayweekmonthyearlog').html();",
          "6984:  $($.content).html(htmlcontent);",
          "",
          "[Added Lines]",
          "8138:  var htmlcontent = '';",
          "8139:  htmlcontent = '<p><center><h2>' + unescape(name) + '</h2></center></p>\\n';",
          "8140:  htmlcontent += $('#dayweekmonthyearlog').html();",
          "8142:  if ((switchtype == 0) || (switchtype == 1) || (switchtype == 2) || (switchtype == 4)) {",
          "8143:   $.costsT1 = 0.2389;",
          "8144:   $.costsT2 = 0.2389;",
          "8145:   $.costsR1 = 0.08;",
          "8146:   $.costsR2 = 0.08;",
          "8147:   $.costsGas = 0.6218;",
          "8148:   $.costsWater = 1.6473;",
          "8150:   $.ajax({",
          "8151:    url: \"json.htm?type=command&param=getcosts&idx=\" + $.devIdx,",
          "8152:    async: false,",
          "8153:    dataType: 'json',",
          "8154:    success: function (data) {",
          "8155:     $.costsT1 = parseFloat(data.CostEnergy) / 10000;",
          "8156:     $.costsT2 = parseFloat(data.CostEnergyT2) / 10000;",
          "8157:     $.costsR1 = parseFloat(data.CostEnergyR1) / 10000;",
          "8158:     $.costsR2 = parseFloat(data.CostEnergyR2) / 10000;",
          "8159:     $.costsGas = parseFloat(data.CostGas) / 10000;",
          "8160:     $.costsWater = parseFloat(data.CostWater) / 10000;",
          "8161:    }",
          "8162:   });",
          "8164:   $.monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",",
          "8165:    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];",
          "8167:   var d = new Date();",
          "8168:   var actMonth = d.getMonth() + 1;",
          "8169:   var actYear = d.getYear() + 1900;",
          "8170:   $($.content).html(GetBackbuttonHTMLTableWithRight(backfunction, 'ShowP1YearReportGas(' + actYear + ')', $.t('Report')) + htmlcontent);",
          "8171:  }",
          "8172:  else {",
          "8173:   $($.content).html(GetBackbuttonHTMLTable(backfunction) + htmlcontent);",
          "8174:  }",
          "8175:  $($.content).i18n();",
          "",
          "---------------"
        ],
        "www/js/domoticzdevices.js||www/js/domoticzdevices.js": [
          "File: www/js/domoticzdevices.js -> www/js/domoticzdevices.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1013: Device.popup = function (target) {",
          "1014:     var ignorePopupDelay = (Device.popupDelayDevice != \"\");",
          "1015:     Device.popupCancelDelay();",
          "1017:     if (Device.expandVar != null) {",
          "1018:         clearInterval(Device.expandVar);",
          "1019:         Device.expandVar = null;",
          "",
          "[Removed Lines]",
          "1016:     $('.DeviceDetails').css('display', 'none');   // hide all popups",
          "",
          "[Added Lines]",
          "1016:     $('.DeviceDetails').css('display', 'none');   // hide all popups",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1315:     if (arguments.length != 0) {",
          "1316:         this.parent.constructor(item);",
          "1317:         this.image = \"images/counter.png\";",
          "1320:         if (typeof item.CounterToday != 'undefined') {",
          "1321:             this.status += ' ' + $.t(\"Today\") + ': ' + item.CounterToday;",
          "1322:             this.smallStatus = item.CounterToday;",
          "",
          "[Removed Lines]",
          "1318:         this.LogLink = this.onClick = \"window.location.href = '#/Devices/\" + this.index + \"/Log'\";",
          "",
          "[Added Lines]",
          "1318:         switch (item.SubType) {",
          "1319:                         case \"Energy\":",
          "1320:                 this.LogLink = this.onClick = \"ShowSmartLog('#\" + Device.contentTag + \"','\" + Device.backFunction + \"','\" + this.index + \"','\" + this.name + \"', '\" + this.switchTypeVal + \"');\";",
          "1321:                                 break;",
          "1322:                         case \"Gas\":",
          "1323:                 this.LogLink = this.onClick = \"ShowCounterLog('#\" + Device.contentTag + \"','\" + Device.backFunction + \"','\" + this.index + \"','\" + this.name + \"', '\" + this.switchTypeVal + \"');\";",
          "1324:                 break;",
          "1325:             default:",
          "1326:                                 this.LogLink = this.onClick = \"ShowCounterLog('#\" + Device.contentTag + \"','\" + Device.backFunction + \"','\" + this.index + \"','\" + this.name + \"', '\" + this.switchTypeVal + \"');\";",
          "1327:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1366:         }",
          "1367:         switch (this.type) {",
          "1368:             case \"Energy\":",
          "1370:                 this.smallStatus = this.data;",
          "1371:                 break;",
          "1372:             case \"Usage\":",
          "",
          "[Removed Lines]",
          "1369:                 this.LogLink = this.onClick = \"window.location.href = '#/Devices/\" + this.index + \"/Log'\";",
          "",
          "[Added Lines]",
          "1377:                 this.LogLink = this.onClick = \"ShowCounterLogSpline('#\" + Device.contentTag + \"','\" + Device.backFunction + \"','\" + this.index + \"','\" + this.name + \"', '\" + this.switchTypeVal + \"');\";",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1375:             case \"General\":",
          "1376:                 switch (this.subtype) {",
          "1377:                     case \"kWh\":",
          "1379:                         this.smallStatus = this.data;",
          "1380:                         break;",
          "1381:                     case \"Voltage\":",
          "",
          "[Removed Lines]",
          "1378:                         this.LogLink = this.onClick = \"window.location.href = '#/Devices/\" + this.index + \"/Log'\";",
          "",
          "[Added Lines]",
          "1386:                         this.LogLink = this.onClick = \"ShowCounterLogSpline('#\" + Device.contentTag + \"','\" + Device.backFunction + \"','\" + this.index + \"','\" + this.name + \"', '\" + this.switchTypeVal + \"');\";",
          "",
          "---------------"
        ],
        "www/views/log/device_temperature_report.html||www/views/log/device_temperature_report.html": [
          "File: www/views/log/device_temperature_report.html -> www/views/log/device_temperature_report.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <div class=\"container js-report\">",
          "2:     <table class=\"display\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">",
          "3:         <tr>",
          "4:             <a id=\"backbutton\" class=\"btnstylerev\" back-button>{{ :: 'Back'|translate }}</a>&nbsp;",
          "5:             <h1 id=\"theader\">{{ ::vm.title }}</h1>",
          "7:             <td align=\"right\" ng-if=\"::!vm.isMonthView\">",
          "8:                 <label for=\"comboyear\">{{ :: 'Year' | translate }}: </label>",
          "9:                 <select",
          "10:                     id=\"comboyear\"",
          "11:                     class=\"combobox ui-corner-all\"",
          "12:                     style=\"width:64px\"",
          "13:                     ng-model=\"vm.selectedYear\"",
          "14:                     ng-change=\"vm.selectYear()\"",
          "15:                     ng-options=\"year for year in ::vm.getYearsOptions()\">",
          "16:                 </select>",
          "17:             </td>",
          "18:         </tr>",
          "19:     </table>",
          "20:     <br>",
          "21:     <div ng-if=\"::vm.max\">",
          "22:         <span>{{ ::'Hottest Day' | translate }}:</span>",
          "23:         <span>{{ ::vm.max.date }}, {{ ::vm.max.value }} \u00b0{{ ::vm.degreeType}}</span>",
          "24:     </div>",
          "25:     <div ng-if=\"::vm.min\">",
          "26:         <span>{{ ::'Coldest Day' | translate }}:</span>",
          "27:         <span>{{ ::vm.min.date }}, {{ ::vm.min.value }} \u00b0{{ ::vm.degreeType}}</span>",
          "28:     </div>",
          "29:     <div ng-if=\"::vm.degreeDays\">",
          "30:         <span data-i18n=\"Degree Days\">{{ ::'Degree Days' | translate }}:</span>",
          "31:         <span id=\"mddays\">{{ ::vm.degreeDays }}</span>",
          "32:         <br>",
          "33:     </div>",
          "34:     <br>",
          "35:     <div ng-if=\"::vm.noDataAvailable\">",
          "36:         {{ ::'No data available' | translate}}",
          "37:     </div>",
          "38:     <table class=\"display myrighttable\" id=\"reporttable\">",
          "40:     </table>",
          "41:     <br>",
          "43:     <div id=\"usagegraph\" style=\"height: 300px;\"></div>",
          "44:     <br>",
          "45:     <div id=\"variation-graph\" style=\"height: 400px;\"></div>",
          "46: </div>",
          "",
          "---------------"
        ]
      }
    }
  ]
}