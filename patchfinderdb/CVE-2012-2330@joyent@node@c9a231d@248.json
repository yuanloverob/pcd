{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2b9967fbcc560c2b2185fee19f82ea8b9902c644",
      "candidate_info": {
        "commit_hash": "2b9967fbcc560c2b2185fee19f82ea8b9902c644",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/2b9967fbcc560c2b2185fee19f82ea8b9902c644",
        "files": [
          "lib/readline.js"
        ],
        "message": "readline: move the \"setRawMode\" logic into a private function",
        "before_after_code_files": [
          "lib/readline.js||lireadline.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/readline.js||lireadline.js": [
          "File: lib/readline.js -> lireadline.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:     this.line = '';",
          "114:     this.terminal = true;",
          "",
          "[Removed Lines]",
          "111:     if (typeof input.setRawMode === 'function') {",
          "112:       input.setRawMode(true);",
          "113:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143: };",
          "146: Interface.prototype.prompt = function(preserveCursor) {",
          "147:   if (this.paused) this.resume();",
          "148:   if (this.terminal) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "239: Interface.prototype.close = function() {",
          "240:   if (this.closed) return;",
          "241:   if (this.terminal) {",
          "245:   }",
          "246:   this.pause();",
          "247:   this.closed = true;",
          "",
          "[Removed Lines]",
          "242:     if (typeof this.input.setRawMode === 'function') {",
          "243:       this.input.setRawMode(false);",
          "244:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7e5aeac28f06ab17bcdfd4fd8ede6a7bcd95dbaf",
      "candidate_info": {
        "commit_hash": "7e5aeac28f06ab17bcdfd4fd8ede6a7bcd95dbaf",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/7e5aeac28f06ab17bcdfd4fd8ede6a7bcd95dbaf",
        "files": [
          "deps/uv/src/unix/internal.h",
          "deps/uv/src/unix/stream.c",
          "deps/uv/src/unix/tcp.c",
          "deps/uv/test/test-gethostbyname.c",
          "deps/uv/test/test-list.h",
          "deps/uv/test/test-tcp-unexpected-read.c",
          "deps/uv/uv.gyp"
        ],
        "message": "deps: upgrade libuv to 3b8c0da",
        "before_after_code_files": [
          "deps/uv/src/unix/internal.h||deps/uv/src/unix/internal.h",
          "deps/uv/src/unix/stream.c||deps/uv/src/unix/stream.c",
          "deps/uv/src/unix/tcp.c||deps/uv/src/unix/tcp.c",
          "deps/uv/test/test-gethostbyname.c||deps/uv/test/test-gethostbyname.c",
          "deps/uv/test/test-list.h||deps/uv/test/test-list.h",
          "deps/uv/test/test-tcp-unexpected-read.c||deps/uv/test/test-tcp-unexpected-read.c",
          "deps/uv/uv.gyp||deps/uv/uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/src/unix/internal.h||deps/uv/src/unix/internal.h": [
          "File: deps/uv/src/unix/internal.h -> deps/uv/src/unix/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "139: void uv__stream_destroy(uv_stream_t* stream);",
          "140: void uv__server_io(uv_loop_t* loop, uv__io_t* watcher, int events);",
          "141: int uv__accept(int sockfd);",
          "146: int uv_tcp_listen(uv_tcp_t* tcp, int backlog, uv_connection_cb cb);",
          "",
          "[Removed Lines]",
          "142: int uv__connect(uv_connect_t* req, uv_stream_t* stream, struct sockaddr* addr,",
          "143:     socklen_t addrlen, uv_connect_cb cb);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/stream.c||deps/uv/src/unix/stream.c": [
          "File: deps/uv/src/unix/stream.c -> deps/uv/src/unix/stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "784:   if (error == EINPROGRESS)",
          "785:     return;",
          "790:   stream->connect_req = NULL;",
          "791:   uv__req_unregister(stream->loop, req);",
          "793:   if (req->cb) {",
          "794:     uv__set_sys_error(stream->loop, error);",
          "795:     req->cb(req, error ? -1 : 0);",
          "",
          "[Removed Lines]",
          "787:   if (error == 0)",
          "788:     uv__io_start(stream->loop, &stream->read_watcher);",
          "",
          "[Added Lines]",
          "791:   if (stream->flags & UV_TCP_CONNECTING) {",
          "792:     assert(stream->type == UV_TCP);",
          "793:     uv__handle_stop(stream);",
          "794:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "797: }",
          "859: int uv_write2(uv_write_t* req, uv_stream_t* stream, uv_buf_t bufs[], int bufcnt,",
          "860:     uv_stream_t* send_handle, uv_write_cb cb) {",
          "861:   int empty_queue;",
          "",
          "[Removed Lines]",
          "800: int uv__connect(uv_connect_t* req, uv_stream_t* stream, struct sockaddr* addr,",
          "801:     socklen_t addrlen, uv_connect_cb cb) {",
          "802:   int sockfd;",
          "803:   int r;",
          "805:   if (stream->type != UV_TCP)",
          "806:     return uv__set_sys_error(stream->loop, ENOTSOCK);",
          "808:   if (stream->connect_req)",
          "809:     return uv__set_sys_error(stream->loop, EALREADY);",
          "811:   if (stream->fd <= 0) {",
          "812:     sockfd = uv__socket(addr->sa_family, SOCK_STREAM, 0);",
          "814:     if (sockfd == -1)",
          "815:       return uv__set_sys_error(stream->loop, errno);",
          "817:     if (uv__stream_open(stream,",
          "818:                         sockfd,",
          "819:                         UV_STREAM_READABLE | UV_STREAM_WRITABLE)) {",
          "820:       close(sockfd);",
          "821:       return -1;",
          "822:     }",
          "823:   }",
          "825:   stream->delayed_error = 0;",
          "827:   do",
          "828:     r = connect(stream->fd, addr, addrlen);",
          "829:   while (r == -1 && errno == EINTR);",
          "831:   if (r == -1) {",
          "832:     if (errno == EINPROGRESS)",
          "834:     else if (errno == ECONNREFUSED)",
          "839:       stream->delayed_error = errno;",
          "840:     else",
          "841:       return uv__set_sys_error(stream->loop, errno);",
          "842:   }",
          "844:   uv__req_init(stream->loop, req, UV_CONNECT);",
          "845:   req->cb = cb;",
          "846:   req->handle = stream;",
          "847:   ngx_queue_init(&req->queue);",
          "848:   stream->connect_req = req;",
          "850:   uv__io_start(stream->loop, &stream->write_watcher);",
          "852:   if (stream->delayed_error)",
          "853:     uv__io_feed(stream->loop, &stream->write_watcher, UV__IO_WRITE);",
          "855:   return 0;",
          "856: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/tcp.c||deps/uv/src/unix/tcp.c": [
          "File: deps/uv/src/unix/tcp.c -> deps/uv/src/unix/tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: }",
          "37: static int uv__bind(uv_tcp_t* tcp,",
          "38:                     int domain,",
          "39:                     struct sockaddr* addr,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: static int maybe_new_socket(uv_tcp_t* handle, int domain, int flags) {",
          "38:   int sockfd;",
          "40:   if (handle->fd != -1)",
          "41:     return 0;",
          "43:   sockfd = uv__socket(domain, SOCK_STREAM, 0);",
          "45:   if (sockfd == -1)",
          "46:     return uv__set_sys_error(handle->loop, errno);",
          "48:   if (uv__stream_open((uv_stream_t*)handle, sockfd, flags)) {",
          "49:     close(sockfd);",
          "50:     return -1;",
          "51:   }",
          "53:   return 0;",
          "54: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:   saved_errno = errno;",
          "45:   status = -1;",
          "65:   tcp->delayed_error = 0;",
          "66:   if (bind(tcp->fd, addr, addrsize) == -1) {",
          "",
          "[Removed Lines]",
          "47:   if (tcp->fd < 0) {",
          "48:     if ((tcp->fd = uv__socket(domain, SOCK_STREAM, 0)) == -1) {",
          "49:       uv__set_sys_error(tcp->loop, errno);",
          "50:       goto out;",
          "51:     }",
          "53:     if (uv__stream_open((uv_stream_t*)tcp,",
          "54:                         tcp->fd,",
          "55:                         UV_STREAM_READABLE | UV_STREAM_WRITABLE)) {",
          "56:       close(tcp->fd);",
          "57:       tcp->fd = -1;",
          "58:       status = -2;",
          "59:       goto out;",
          "60:     }",
          "61:   }",
          "63:   assert(tcp->fd >= 0);",
          "",
          "[Added Lines]",
          "67:   if (maybe_new_socket(tcp, domain, UV_STREAM_READABLE|UV_STREAM_WRITABLE))",
          "68:     return -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "79: }",
          "82: int uv__tcp_bind(uv_tcp_t* handle, struct sockaddr_in addr) {",
          "83:   return uv__bind(handle,",
          "84:                   AF_INET,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87: static int uv__connect(uv_connect_t* req,",
          "88:                        uv_tcp_t* handle,",
          "89:                        struct sockaddr* addr,",
          "90:                        socklen_t addrlen,",
          "91:                        uv_connect_cb cb) {",
          "92:   int r;",
          "94:   assert(handle->type == UV_TCP);",
          "96:   if (handle->connect_req)",
          "97:     return uv__set_sys_error(handle->loop, EALREADY);",
          "99:   if (maybe_new_socket(handle,",
          "100:                        addr->sa_family,",
          "101:                        UV_STREAM_READABLE|UV_STREAM_WRITABLE)) {",
          "102:     return -1;",
          "103:   }",
          "105:   handle->delayed_error = 0;",
          "107:   do",
          "108:     r = connect(handle->fd, addr, addrlen);",
          "109:   while (r == -1 && errno == EINTR);",
          "111:   if (r == -1) {",
          "112:     if (errno == EINPROGRESS) {",
          "118:       if (!uv__is_active(handle)) {",
          "119:         handle->flags |= UV_TCP_CONNECTING;",
          "120:         uv__handle_start(handle);",
          "121:       }",
          "122:     }",
          "123:     else if (errno == ECONNREFUSED)",
          "128:       handle->delayed_error = errno;",
          "129:     else",
          "130:       return uv__set_sys_error(handle->loop, errno);",
          "131:   }",
          "133:   uv__req_init(handle->loop, req, UV_CONNECT);",
          "134:   req->cb = cb;",
          "135:   req->handle = (uv_stream_t*) handle;",
          "136:   ngx_queue_init(&req->queue);",
          "137:   handle->connect_req = req;",
          "139:   uv__io_start(handle->loop, &handle->write_watcher);",
          "141:   if (handle->delayed_error)",
          "142:     uv__io_feed(handle->loop, &handle->write_watcher, UV__IO_WRITE);",
          "144:   return 0;",
          "145: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "172: int uv_tcp_listen(uv_tcp_t* tcp, int backlog, uv_connection_cb cb) {",
          "177:     return -1;",
          "201:   tcp->connection_cb = cb;",
          "",
          "[Removed Lines]",
          "173:   int r;",
          "175:   if (tcp->delayed_error) {",
          "176:     uv__set_sys_error(tcp->loop, tcp->delayed_error);",
          "178:   }",
          "180:   if (tcp->fd < 0) {",
          "181:     if ((tcp->fd = uv__socket(AF_INET, SOCK_STREAM, 0)) == -1) {",
          "182:       uv__set_sys_error(tcp->loop, errno);",
          "183:       return -1;",
          "184:     }",
          "186:     if (uv__stream_open((uv_stream_t*)tcp, tcp->fd, UV_STREAM_READABLE)) {",
          "187:       close(tcp->fd);",
          "188:       tcp->fd = -1;",
          "189:       return -1;",
          "190:     }",
          "191:   }",
          "193:   assert(tcp->fd >= 0);",
          "195:   r = listen(tcp->fd, backlog);",
          "196:   if (r < 0) {",
          "197:     uv__set_sys_error(tcp->loop, errno);",
          "198:     return -1;",
          "199:   }",
          "",
          "[Added Lines]",
          "239:   if (tcp->delayed_error)",
          "240:     return uv__set_sys_error(tcp->loop, tcp->delayed_error);",
          "242:   if (maybe_new_socket(tcp, AF_INET, UV_STREAM_READABLE))",
          "245:   if (listen(tcp->fd, backlog))",
          "246:     return uv__set_sys_error(tcp->loop, errno);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "211: int uv__tcp_connect(uv_connect_t* req,",
          "216:   int status;",
          "224:   errno = saved_errno;",
          "225:   return status;",
          "226: }",
          "229: int uv__tcp_connect6(uv_connect_t* req,",
          "234:   int status;",
          "242:   errno = saved_errno;",
          "243:   return status;",
          "244: }",
          "",
          "[Removed Lines]",
          "212:                    uv_tcp_t* handle,",
          "213:                    struct sockaddr_in address,",
          "214:                    uv_connect_cb cb) {",
          "215:   int saved_errno = errno;",
          "218:   status = uv__connect(req,",
          "219:                        (uv_stream_t*)handle,",
          "220:                        (struct sockaddr*)&address,",
          "221:                        sizeof address,",
          "222:                        cb);",
          "230:                     uv_tcp_t* handle,",
          "231:                     struct sockaddr_in6 address,",
          "232:                     uv_connect_cb cb) {",
          "233:   int saved_errno = errno;",
          "236:   status = uv__connect(req,",
          "237:                        (uv_stream_t*)handle,",
          "238:                        (struct sockaddr*)&address,",
          "239:                        sizeof address,",
          "240:                        cb);",
          "",
          "[Added Lines]",
          "259:                     uv_tcp_t* handle,",
          "260:                     struct sockaddr_in addr,",
          "261:                     uv_connect_cb cb) {",
          "262:   int saved_errno;",
          "265:   saved_errno = errno;",
          "266:   status = uv__connect(req, handle, (struct sockaddr*)&addr, sizeof addr, cb);",
          "274:                      uv_tcp_t* handle,",
          "275:                      struct sockaddr_in6 addr,",
          "276:                      uv_connect_cb cb) {",
          "277:   int saved_errno;",
          "280:   saved_errno = errno;",
          "281:   status = uv__connect(req, handle, (struct sockaddr*)&addr, sizeof addr, cb);",
          "",
          "---------------"
        ],
        "deps/uv/test/test-gethostbyname.c||deps/uv/test/test-gethostbyname.c": [
          "File: deps/uv/test/test-gethostbyname.c -> deps/uv/test/test-gethostbyname.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: static ares_channel channel;",
          "33: static int ares_bynamecallbacks;",
          "34: static int bynamecallbacksig;",
          "",
          "[Removed Lines]",
          "30: static struct ares_options options;",
          "31: static int optmask;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63: }",
          "79: }",
          "",
          "[Removed Lines]",
          "66: static void prep_tcploopback() {",
          "68:   struct sockaddr_in test_server = uv_ip4_addr(\"127.0.0.1\", 0);",
          "69:   int rc;",
          "71:   optmask = ARES_OPT_SERVERS | ARES_OPT_TCP_PORT | ARES_OPT_FLAGS;",
          "72:   options.servers = &test_server.sin_addr;",
          "73:   options.nservers = 1;",
          "74:   options.tcp_port = htons(TEST_PORT);",
          "75:   options.flags = ARES_FLAG_USEVC;",
          "77:   rc = uv_ares_init_options(uv_default_loop(), &channel, &options, optmask);",
          "78:   ASSERT(rc == ARES_SUCCESS);",
          "",
          "[Added Lines]",
          "64: static void setup_cares() {",
          "65:   int r;",
          "66:   struct ares_options options;",
          "67:   memset(&options, 0, sizeof options);",
          "68:   r = uv_ares_init_options(uv_default_loop(), &channel, &options, 0);",
          "69:   ASSERT(r == ARES_SUCCESS);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91:   }",
          "93:   printf(\"Start basic gethostbyname test\\n\");",
          "96:   ares_bynamecallbacks = 0;",
          "97:   bynamecallbacksig = 7;",
          "",
          "[Removed Lines]",
          "94:   prep_tcploopback();",
          "",
          "[Added Lines]",
          "85:   setup_cares();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "114:   printf(\"Start gethostbyname and gethostbyaddr sequential test\\n\");",
          "117:   ares_bynamecallbacks = 0;",
          "118:   bynamecallbacksig = 7;",
          "",
          "[Removed Lines]",
          "115:   prep_tcploopback();",
          "",
          "[Added Lines]",
          "106:   setup_cares();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "153:   printf(\"Start gethostbyname and gethostbyaddr concurrent test\\n\");",
          "156:   ares_bynamecallbacks = 0;",
          "157:   bynamecallbacksig = 7;",
          "",
          "[Removed Lines]",
          "154:   prep_tcploopback();",
          "",
          "[Added Lines]",
          "145:   setup_cares();",
          "",
          "---------------"
        ],
        "deps/uv/test/test-list.h||deps/uv/test/test-list.h": [
          "File: deps/uv/test/test-list.h -> deps/uv/test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: TEST_DECLARE   (tcp_flags)",
          "57: TEST_DECLARE   (tcp_write_error)",
          "58: TEST_DECLARE   (tcp_write_to_half_open_connection)",
          "59: TEST_DECLARE   (tcp_bind6_error_addrinuse)",
          "60: TEST_DECLARE   (tcp_bind6_error_addrnotavail)",
          "61: TEST_DECLARE   (tcp_bind6_error_fault)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: TEST_DECLARE   (tcp_unexpected_read)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "251:   TEST_ENTRY  (tcp_flags)",
          "252:   TEST_ENTRY  (tcp_write_error)",
          "253:   TEST_ENTRY  (tcp_write_to_half_open_connection)",
          "255:   TEST_ENTRY  (tcp_bind6_error_addrinuse)",
          "256:   TEST_ENTRY  (tcp_bind6_error_addrnotavail)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "255:   TEST_ENTRY  (tcp_unexpected_read)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "342:   TEST_ENTRY  (getaddrinfo_concurrent)",
          "344:   TEST_ENTRY  (gethostbyname)",
          "347:   TEST_ENTRY  (getsockname_tcp)",
          "348:   TEST_ENTRY  (getsockname_udp)",
          "",
          "[Removed Lines]",
          "345:   TEST_HELPER (gethostbyname, tcp4_echo_server)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/test/test-tcp-unexpected-read.c||deps/uv/test/test-tcp-unexpected-read.c": [
          "File: deps/uv/test/test-tcp-unexpected-read.c -> deps/uv/test/test-tcp-unexpected-read.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"uv.h\"",
          "23: #include \"task.h\"",
          "25: static uv_check_t check_handle;",
          "26: static uv_timer_t timer_handle;",
          "27: static uv_tcp_t server_handle;",
          "28: static uv_tcp_t client_handle;",
          "29: static uv_tcp_t peer_handle;",
          "30: static uv_write_t write_req;",
          "31: static uv_connect_t connect_req;",
          "36: static void check_cb(uv_check_t* handle, int status) {",
          "37:   ticks++;",
          "38: }",
          "41: static void timer_cb(uv_timer_t* handle, int status) {",
          "42:   uv_close((uv_handle_t*) &check_handle, NULL);",
          "43:   uv_close((uv_handle_t*) &timer_handle, NULL);",
          "44:   uv_close((uv_handle_t*) &server_handle, NULL);",
          "45:   uv_close((uv_handle_t*) &client_handle, NULL);",
          "46:   uv_close((uv_handle_t*) &peer_handle, NULL);",
          "47: }",
          "50: static uv_buf_t alloc_cb(uv_handle_t* handle, size_t suggested_size) {",
          "51:   ASSERT(0 && \"alloc_cb should not have been called\");",
          "52: }",
          "55: static void read_cb(uv_stream_t* handle, ssize_t nread, uv_buf_t buf) {",
          "56:   ASSERT(0 && \"read_cb should not have been called\");",
          "57: }",
          "60: static void connect_cb(uv_connect_t* req, int status) {",
          "61:   ASSERT(req->handle == (uv_stream_t*) &client_handle);",
          "62:   ASSERT(0 == status);",
          "63: }",
          "66: static void write_cb(uv_write_t* req, int status) {",
          "67:   ASSERT(req->handle == (uv_stream_t*) &peer_handle);",
          "68:   ASSERT(0 == status);",
          "69: }",
          "72: static void connection_cb(uv_stream_t* handle, int status) {",
          "73:   uv_buf_t buf;",
          "75:   buf = uv_buf_init(\"PING\", 4);",
          "77:   ASSERT(0 == status);",
          "78:   ASSERT(0 == uv_tcp_init(uv_default_loop(), &peer_handle));",
          "79:   ASSERT(0 == uv_accept(handle, (uv_stream_t*) &peer_handle));",
          "80:   ASSERT(0 == uv_read_start((uv_stream_t*) &peer_handle, alloc_cb, read_cb));",
          "81:   ASSERT(0 == uv_write(&write_req, (uv_stream_t*) &peer_handle,",
          "82:                        &buf, 1, write_cb));",
          "83: }",
          "86: TEST_IMPL(tcp_unexpected_read) {",
          "87:   struct sockaddr_in addr;",
          "88:   uv_loop_t* loop;",
          "90:   addr = uv_ip4_addr(\"127.0.0.1\", TEST_PORT);",
          "91:   loop = uv_default_loop();",
          "93:   ASSERT(0 == uv_timer_init(loop, &timer_handle));",
          "94:   ASSERT(0 == uv_timer_start(&timer_handle, timer_cb, 1000, 0));",
          "95:   ASSERT(0 == uv_check_init(loop, &check_handle));",
          "96:   ASSERT(0 == uv_check_start(&check_handle, check_cb));",
          "97:   ASSERT(0 == uv_tcp_init(loop, &server_handle));",
          "98:   ASSERT(0 == uv_tcp_init(loop, &client_handle));",
          "99:   ASSERT(0 == uv_tcp_bind(&server_handle, addr));",
          "100:   ASSERT(0 == uv_listen((uv_stream_t*) &server_handle, 1, connection_cb));",
          "101:   ASSERT(0 == uv_tcp_connect(&connect_req, &client_handle, addr, connect_cb));",
          "102:   ASSERT(0 == uv_run(loop));",
          "108:   ASSERT(ticks <= 10);",
          "110:   return 0;",
          "111: }",
          "",
          "---------------"
        ],
        "deps/uv/uv.gyp||deps/uv/uv.gyp": [
          "File: deps/uv/uv.gyp -> deps/uv/uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "355:         'test/test-tcp-write-error.c',",
          "356:         'test/test-tcp-write-to-half-open-connection.c',",
          "357:         'test/test-tcp-writealot.c',",
          "358:         'test/test-threadpool.c',",
          "359:         'test/test-mutexes.c',",
          "360:         'test/test-thread.c',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "358:         'test/test-tcp-unexpected-read.c',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1b7d23e81e9c4d507e96558c52c2a3962f0cd39f",
      "candidate_info": {
        "commit_hash": "1b7d23e81e9c4d507e96558c52c2a3962f0cd39f",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/1b7d23e81e9c4d507e96558c52c2a3962f0cd39f",
        "files": [
          "test/simple/test-cluster-message.js"
        ],
        "message": "Fix test-cluster-message so it passes on Windows\n\nThe test was relying on a particular order of events that cannot be\nguaranteed.\n\nAlso fixes some typos.",
        "before_after_code_files": [
          "test/simple/test-cluster-message.js||test/simple/test-cluster-message.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-cluster-message.js||test/simple/test-cluster-message.js": [
          "File: test/simple/test-cluster-message.js -> test/simple/test-cluster-message.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: }",
          "34: if (cluster.isWorker) {",
          "38:   var server = net.Server();",
          "49:     process.send('message from worker');",
          "50:   });",
          "52:   server.listen(common.PORT, '127.0.0.1');",
          "53: }",
          "",
          "[Removed Lines]",
          "39:   server.on('connection', function(socket) {",
          "42:     process.on('message', function(message) {",
          "43:       socket.write(JSON.stringify({",
          "44:         code: 'received message',",
          "45:         echo: message",
          "46:       }));",
          "47:     });",
          "",
          "[Added Lines]",
          "38:   var socket, message;",
          "40:   function maybeReply() {",
          "41:     if (!socket || !message) return;",
          "44:     socket.write(JSON.stringify({",
          "45:       code: 'received message',",
          "46:       echo: message",
          "47:     }));",
          "48:   }",
          "50:   server.on('connection', function(socket_) {",
          "51:     socket = socket_;",
          "52:     maybeReply();",
          "58:   process.on('message', function(message_) {",
          "59:     message = message_;",
          "60:     maybeReply();",
          "61:   });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:       if (data.code === 'received message') {",
          "106:         check('worker', data.echo === 'message from master');",
          "107:       } else {",
          "109:       }",
          "110:     });",
          "",
          "[Removed Lines]",
          "108:         throw new Error('worng TCP message recived: ' + data);",
          "",
          "[Added Lines]",
          "118:         throw new Error('wrong TCP message recived: ' + data);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b031671138a6b997e934cfafa17f03247c036c71",
      "candidate_info": {
        "commit_hash": "b031671138a6b997e934cfafa17f03247c036c71",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/b031671138a6b997e934cfafa17f03247c036c71",
        "files": [
          "lib/readline.js",
          "lib/tty.js"
        ],
        "message": "tty, readline: fix style errors",
        "before_after_code_files": [
          "lib/readline.js||lireadline.js",
          "lib/tty.js||litty.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/readline.js||lireadline.js": [
          "File: lib/readline.js -> lireadline.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "287:     this.cursor += c.length;",
          "289:     if (this._getCursorPos().cols === 0) {",
          "291:     } else {",
          "293:     }",
          "",
          "[Removed Lines]",
          "290:         this._refreshLine();",
          "292:         this.output.write(c);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/tty.js||litty.js": [
          "File: lib/tty.js -> litty.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:     this.rows = newRows;",
          "105:     this.emit('resize');",
          "106:   }",
          "",
          "[Removed Lines]",
          "107: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "465f57c56f9b915d9c8b4f5549457f3e7276ee06",
      "candidate_info": {
        "commit_hash": "465f57c56f9b915d9c8b4f5549457f3e7276ee06",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/465f57c56f9b915d9c8b4f5549457f3e7276ee06",
        "files": [
          "deps/v8/SConstruct",
          "deps/v8/src/heap.cc",
          "deps/v8/src/version.cc"
        ],
        "message": "Upgrade v8 to 3.6.6.20",
        "before_after_code_files": [
          "deps/v8/src/heap.cc||deps/v8/src/heap.cc",
          "deps/v8/src/version.cc||deps/v8/src/version.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/v8/src/heap.cc||deps/v8/src/heap.cc": [
          "File: deps/v8/src/heap.cc -> deps/v8/src/heap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "563:   PagedSpace* cell_space = Heap::cell_space();",
          "564:   LargeObjectSpace* lo_space = Heap::lo_space();",
          "565:   bool gc_performed = true;",
          "567:     gc_performed = false;",
          "568:     if (!new_space->ReserveSpace(new_space_size)) {",
          "569:       Heap::CollectGarbage(NEW_SPACE);",
          "",
          "[Removed Lines]",
          "566:   while (gc_performed) {",
          "",
          "[Added Lines]",
          "566:   int counter = 0;",
          "567:   static const int kThreshold = 20;",
          "568:   while (gc_performed && counter++ < kThreshold) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "602:       gc_performed = true;",
          "603:     }",
          "604:   }",
          "605: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "608:   if (gc_performed) {",
          "610:     V8::FatalProcessOutOfMemory(\"Heap::ReserveSpace\");",
          "611:   }",
          "",
          "---------------"
        ],
        "deps/v8/src/version.cc||deps/v8/src/version.cc": [
          "File: deps/v8/src/version.cc -> deps/v8/src/version.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #define MAJOR_VERSION     3",
          "36: #define MINOR_VERSION     6",
          "37: #define BUILD_NUMBER      6",
          "41: #define IS_CANDIDATE_VERSION 0",
          "",
          "[Removed Lines]",
          "38: #define PATCH_LEVEL       19",
          "",
          "[Added Lines]",
          "38: #define PATCH_LEVEL       20",
          "",
          "---------------"
        ]
      }
    }
  ]
}