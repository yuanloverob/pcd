{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "713836f913a4af0be745c606c658f17c51cdf77f",
      "candidate_info": {
        "commit_hash": "713836f913a4af0be745c606c658f17c51cdf77f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/713836f913a4af0be745c606c658f17c51cdf77f",
        "files": [
          "LICENSE.md",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Add a LICENSE.md, containing the text of the blessing.\n\nFossilOrigin-Name: cbb7e60272cda518fa1bd8d3e3cd02e031b657fef92a9d4d7ed8c2bfb97be7c8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b3fa58dd7403dbd4d2e9f3ae23d7d1337830d6fef2aa2f137ac5174de0d5828e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0824d5b9a5a84bb5bd56dac23a48ba305077d268",
      "candidate_info": {
        "commit_hash": "0824d5b9a5a84bb5bd56dac23a48ba305077d268",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0824d5b9a5a84bb5bd56dac23a48ba305077d268",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/gencol1.test"
        ],
        "message": "The previous check-in was not quite correct, and introduced a new problem with the USING clause.  Use this version instead.\n\nFossilOrigin-Name: ed28aaa4851202111a502f883ca06359d89b25bba4055c29d7bce2b501cfcc68",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1923efb283e8840fa7436eb20b9d2174ef7cace1690d3b97b572a0db2048b8e3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "566:   if( pExpr->iColumn>=0 && pMatch!=0 ){",
          "567:     int n = pExpr->iColumn;",
          "568:     Table *pTab;",
          "573:     pTab = pExpr->y.pTab;",
          "574:     assert( pTab!=0 );",
          "575:     assert( pMatch->iCursor==pExpr->iTable );",
          "587:     }",
          "589:   }",
          "",
          "[Removed Lines]",
          "569:     testcase( n==BMS-1 );",
          "570:     if( n>=BMS ){",
          "571:       n = BMS-1;",
          "572:     }",
          "576:     if( pTab->tabFlags & TF_HasGenerated ){",
          "577:       Column *pColumn = pTab->aCol + pExpr->iColumn;",
          "578:       if( pColumn->colFlags & COLFLAG_GENERATED ){",
          "579:         testcase( pTab->nCol==63 );",
          "580:         testcase( pTab->nCol==64 );",
          "581:         if( pTab->nCol>=64 ){",
          "582:           pMatch->colUsed = ALLBITS;",
          "583:         }else{",
          "584:           pMatch->colUsed = MASKBIT(pTab->nCol)-1;",
          "585:         }",
          "586:       }",
          "588:     pMatch->colUsed |= ((Bitmask)1)<<n;",
          "",
          "[Added Lines]",
          "572:     if( (pTab->tabFlags & TF_HasGenerated)!=0",
          "573:      && (pTab->aCol[n].colFlags & COLFLAG_GENERATED)!=0",
          "574:     ){",
          "575:       testcase( pTab->nCol==BMS-1 );",
          "576:       testcase( pTab->nCol==BMS );",
          "577:       pMatch->colUsed = pTab->nCol>=BMS ? ALLBITS : MASKBIT(pTab->nCol)-1;",
          "578:     }else{",
          "579:       testcase( n==BMS-1 );",
          "580:       testcase( n==BMS );",
          "581:       if( n>=BMS ) n = BMS-1;",
          "582:       pMatch->colUsed |= ((Bitmask)1)<<n;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "630:       p->iColumn = -1;",
          "631:     }else{",
          "632:       p->iColumn = (ynVar)iCol;",
          "644:       }else{",
          "645:         testcase( iCol==BMS );",
          "646:         testcase( iCol==BMS-1 );",
          "",
          "[Removed Lines]",
          "633:       if( pTab->tabFlags & TF_HasGenerated ){",
          "634:         Column *pColumn = pTab->aCol + iCol;",
          "635:         if( pColumn->colFlags & COLFLAG_GENERATED ){",
          "636:           testcase( pTab->nCol==63 );",
          "637:           testcase( pTab->nCol==64 );",
          "638:           if( pTab->nCol>=64 ){",
          "639:             pItem->colUsed = ALLBITS;",
          "640:           }else{",
          "641:             pItem->colUsed = MASKBIT(pTab->nCol)-1;",
          "642:           }",
          "643:         }",
          "",
          "[Added Lines]",
          "628:       if( (pTab->tabFlags & TF_HasGenerated)!=0",
          "629:        && (pTab->aCol[iCol].colFlags & COLFLAG_GENERATED)!=0",
          "630:       ){",
          "631:         testcase( pTab->nCol==63 );",
          "632:         testcase( pTab->nCol==64 );",
          "633:         pItem->colUsed = pTab->nCol>=64 ? ALLBITS : MASKBIT(pTab->nCol)-1;",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "352:   SELECT y FROM t1 JOIN t1 USING (y,y);",
          "353: } {11}",
          "354: do_execsql_test gencol1-13.11 {",
          "355:   CREATE INDEX t1y ON t1(y);",
          "356:   SELECT y FROM t1 JOIN t1 USING (y,y);",
          "357: } {11}",
          "360: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "355:   SELECT 123 FROM t1 JOIN t1 USING (x);",
          "356: } {123}",
          "357: do_execsql_test gencol1-13.11 {",
          "358:   SELECT 456 FROM t1 JOIN t1 USING (x,x);",
          "359: } {456}",
          "360: do_execsql_test gencol1-13.20 {",
          "364: do_execsql_test gencol1-13.21 {",
          "365:   CREATE INDEX t1x ON t1(x);",
          "366:   SELECT 123 FROM t1 JOIN t1 USING (x);",
          "367: } {123}",
          "368: do_execsql_test gencol1-13.22 {",
          "369:   SELECT 456 FROM t1 JOIN t1 USING (x,x);",
          "370: } {456}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7e427337fe5df62439b980e2e091a89b36001d79",
      "candidate_info": {
        "commit_hash": "7e427337fe5df62439b980e2e091a89b36001d79",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7e427337fe5df62439b980e2e091a89b36001d79",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/util.c"
        ],
        "message": "Faster and smaller implementation of sqlite3StrICmp().\n\nFossilOrigin-Name: 7ac500fb5abfe1ad60f2ffdcc8fbe5ccc1c641bbeed53f00940e9ff78788e53d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/util.c||src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 884b4b7e502b4e991677b53971277adfaf0a04a284f8e483e2553d0f83156b50",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "322: }",
          "323: int sqlite3StrICmp(const char *zLeft, const char *zRight){",
          "324:   unsigned char *a, *b;",
          "326:   a = (unsigned char *)zLeft;",
          "327:   b = (unsigned char *)zRight;",
          "328:   for(;;){",
          "331:     a++;",
          "332:     b++;",
          "333:   }",
          "",
          "[Removed Lines]",
          "325:   int c;",
          "329:     c = (int)UpperToLower[*a] - (int)UpperToLower[*b];",
          "330:     if( c || *a==0 ) break;",
          "",
          "[Added Lines]",
          "325:   int c, x;",
          "329:     c = *a;",
          "330:     x = *b;",
          "331:     if( c==x ){",
          "332:       if( c==0 ) break;",
          "333:     }else{",
          "334:       c = (int)UpperToLower[c] - (int)UpperToLower[x];",
          "335:       if( c ) break;",
          "336:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c45b6771106a0e8505ec20fcf45a9012ccce1ae",
      "candidate_info": {
        "commit_hash": "2c45b6771106a0e8505ec20fcf45a9012ccce1ae",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2c45b6771106a0e8505ec20fcf45a9012ccce1ae",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "src/update.c",
          "test/fkey8.test"
        ],
        "message": "Generate all records for INSERT or UPDATE prior to running foreign key constraint checks, since the FK checks might modify the datatype of registers used to generate the records.  Fix for ticket [e63cbcfd3378afe6980d6].\n\nFossilOrigin-Name: 3c75605b4652ae88659465d832953ac9d467369f9cb417f73b3d8599ec60b18b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "src/update.c||src/update.c",
          "test/fkey8.test||test/fkey8.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 659c551dcc374a0d349ba9419f692e3363839e11d791a17cc35fa1854a674a51",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "814:     int nIdx;",
          "815:     nIdx = sqlite3OpenTableAndIndices(pParse, pTab, OP_OpenWrite, 0, -1, 0,",
          "816:                                       &iDataCur, &iIdxCur);",
          "818:     if( aRegIdx==0 ){",
          "819:       goto insert_cleanup;",
          "820:     }",
          "",
          "[Removed Lines]",
          "817:     aRegIdx = sqlite3DbMallocRawNN(db, sizeof(int)*(nIdx+1));",
          "",
          "[Added Lines]",
          "817:     aRegIdx = sqlite3DbMallocRawNN(db, sizeof(int)*(nIdx+2));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1845:     sqlite3VdbeJumpHere(v, ipkBottom);",
          "1846:   }",
          "1849:   VdbeModuleComment((v, \"END: GenCnstCks(%d)\", seenReplace));",
          "1850: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1858:   if( HasRowid(pTab) ){",
          "1859:     int regRec = aRegIdx[ix];",
          "1860:     sqlite3VdbeAddOp3(v, OP_MakeRecord, regNewData+1, pTab->nCol, regRec);",
          "1861:     sqlite3SetMakeRecordP5(v, pTab);",
          "1862:     if( !bAffinityDone ){",
          "1863:       sqlite3TableAffinity(v, pTab, 0);",
          "1864:     }",
          "1865:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1910:   for(i=0, pIdx=pTab->pIndex; pIdx; pIdx=pIdx->pNext, i++){",
          "1911:     if( aRegIdx[i]==0 ) continue;",
          "1913:     if( pIdx->pPartIdxWhere ){",
          "1914:       sqlite3VdbeAddOp2(v, OP_IsNull, aRegIdx[i], sqlite3VdbeCurrentAddr(v)+2);",
          "1915:       VdbeCoverage(v);",
          "",
          "[Removed Lines]",
          "1912:     bAffinityDone = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1937:     sqlite3VdbeChangeP5(v, pik_flags);",
          "1938:   }",
          "1939:   if( !HasRowid(pTab) ) return;",
          "1947:   if( pParse->nested ){",
          "1948:     pik_flags = 0;",
          "1949:   }else{",
          "",
          "[Removed Lines]",
          "1940:   regData = regNewData + 1;",
          "1941:   regRec = sqlite3GetTempReg(pParse);",
          "1942:   sqlite3VdbeAddOp3(v, OP_MakeRecord, regData, pTab->nCol, regRec);",
          "1943:   sqlite3SetMakeRecordP5(v, pTab);",
          "1944:   if( !bAffinityDone ){",
          "1945:     sqlite3TableAffinity(v, pTab, 0);",
          "1946:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1956:   if( useSeekResult ){",
          "1957:     pik_flags |= OPFLAG_USESEEKRESULT;",
          "1958:   }",
          "1960:   if( !pParse->nested ){",
          "1961:     sqlite3VdbeAppendP4(v, pTab, P4_TABLE);",
          "1962:   }",
          "",
          "[Removed Lines]",
          "1959:   sqlite3VdbeAddOp3(v, OP_Insert, iDataCur, regRec, regNewData);",
          "",
          "[Added Lines]",
          "1967:   sqlite3VdbeAddOp3(v, OP_Insert, iDataCur, aRegIdx[i], regNewData);",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "277:   if( aXRef==0 ) goto update_cleanup;",
          "278:   aRegIdx = aXRef+pTab->nCol;",
          "280:   memset(aToOpen, 1, nIdx+1);",
          "281:   aToOpen[nIdx+1] = 0;",
          "282:   for(i=0; i<pTab->nCol; i++) aXRef[i] = -1;",
          "",
          "[Removed Lines]",
          "276:   aXRef = sqlite3DbMallocRawNN(db, sizeof(int) * (pTab->nCol+nIdx) + nIdx+2 );",
          "279:   aToOpen = (u8*)(aRegIdx+nIdx);",
          "",
          "[Added Lines]",
          "276:   aXRef = sqlite3DbMallocRawNN(db, sizeof(int) * (pTab->nCol+nIdx+1) + nIdx+2 );",
          "279:   aToOpen = (u8*)(aRegIdx+nIdx+1);",
          "",
          "---------------"
        ],
        "test/fkey8.test||test/fkey8.test": [
          "File: test/fkey8.test -> test/fkey8.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "197:   INSERT OR REPLACE INTO t1 VALUES(20000, 20000);",
          "198: }",
          "200: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "200: #-------------------------------------------------------------------------",
          "201: reset_db",
          "202: do_execsql_test 5.0 {",
          "203:   PRAGMA foreign_keys = true;",
          "204:   CREATE TABLE parent(",
          "205:     p TEXT PRIMARY KEY",
          "206:   );",
          "207:   CREATE TABLE child(",
          "208:     c INTEGER UNIQUE,",
          "209:     FOREIGN KEY(c) REFERENCES parent(p) DEFERRABLE INITIALLY DEFERRED",
          "210:   );",
          "211:   BEGIN;",
          "212:     INSERT INTO child VALUES(123);",
          "213:     INSERT INTO parent VALUES('123');",
          "214:   COMMIT;",
          "215: }",
          "216: do_execsql_test 5.1 {",
          "217:   PRAGMA integrity_check;",
          "218: } {ok}",
          "220: do_execsql_test 5.2 {",
          "221:   INSERT INTO parent VALUES(1200);",
          "222:   BEGIN;",
          "223:     INSERT INTO child VALUES(456);",
          "224:     UPDATE parent SET p = '456' WHERE p=1200;",
          "225:   COMMIT;",
          "226: }",
          "227: do_execsql_test 5.3 {",
          "228:   PRAGMA integrity_check;",
          "229: } {ok}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4f9adee289fcc8de83054332212c90f389609d4a",
      "candidate_info": {
        "commit_hash": "4f9adee289fcc8de83054332212c90f389609d4a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4f9adee289fcc8de83054332212c90f389609d4a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/parse.y",
          "src/resolve.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/walker.c",
          "src/window.c",
          "test/filter1.test"
        ],
        "message": "Rework the FILTER clause implementation to share more code with window functions.\n\nFossilOrigin-Name: 5dac8c38dfc3f41c5c8fb49ca35de7fd1b21f269d72e8ba6ba59ed0a4030a54d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/parse.y||src/parse.y",
          "src/resolve.c||src/resolve.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/walker.c||src/walker.c",
          "src/window.c||src/window.c",
          "test/filter1.test||test/filter1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 86ab963cc5743867e0535b78a5776e18c13835aa44bf2009f77642df8407cb3f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1028:   assert( !ExprHasProperty(p, EP_WinFunc) || p->y.pWin!=0 || db->mallocFailed );",
          "1029:   assert( p->op!=TK_FUNCTION || ExprHasProperty(p, EP_TokenOnly|EP_Reduced)",
          "1031: #ifdef SQLITE_DEBUG",
          "1032:   if( ExprHasProperty(p, EP_Leaf) && !ExprHasProperty(p, EP_TokenOnly) ){",
          "1033:     assert( p->pLeft==0 );",
          "",
          "[Removed Lines]",
          "1030:           || p->y.pWin==0 || ExprHasProperty(p, EP_WinFunc|EP_Filter) );",
          "",
          "[Added Lines]",
          "1030:           || p->y.pWin==0 || ExprHasProperty(p, EP_WinFunc) );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1040:     assert( p->x.pList==0 || p->pRight==0 );",
          "1041:     if( p->pLeft && p->op!=TK_SELECT_COLUMN ) sqlite3ExprDeleteNN(db, p->pLeft);",
          "1042:     if( p->pRight ){",
          "1044:       sqlite3ExprDeleteNN(db, p->pRight);",
          "1045:     }else if( ExprHasProperty(p, EP_xIsSelect) ){",
          "1047:       sqlite3SelectDelete(db, p->x.pSelect);",
          "1048:     }else{",
          "1049:       sqlite3ExprListDelete(db, p->x.pList);",
          "1050: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "1059:       }",
          "1060: #endif",
          "1061:     }",
          "",
          "[Removed Lines]",
          "1043:       assert( !ExprHasProperty(p, (EP_WinFunc|EP_Filter)) );",
          "1046:       assert( !ExprHasProperty(p, (EP_WinFunc|EP_Filter)) );",
          "1051:       if( ExprHasProperty(p, (EP_WinFunc|EP_Filter)) ){",
          "1052:         if( ExprHasProperty(p, EP_WinFunc) ){",
          "1053:           assert( p->op==TK_FUNCTION && !ExprHasProperty(p, EP_Filter) );",
          "1054:           sqlite3WindowDelete(db, p->y.pWin);",
          "1055:         }else{",
          "1056:           assert( p->op==TK_FUNCTION || p->op==TK_AGG_FUNCTION );",
          "1057:           sqlite3ExprDeleteNN(db, p->y.pFilter);",
          "1058:         }",
          "",
          "[Added Lines]",
          "1043:       assert( !ExprHasProperty(p, EP_WinFunc) );",
          "1046:       assert( !ExprHasProperty(p, EP_WinFunc) );",
          "1051:       if( ExprHasProperty(p, EP_WinFunc) ){",
          "1052:         sqlite3WindowDelete(db, p->y.pWin);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1273:     }",
          "1277:       zAlloc += dupedExprNodeSize(p, dupFlags);",
          "1278:       if( !ExprHasProperty(pNew, EP_TokenOnly|EP_Leaf) ){",
          "1279:         pNew->pLeft = p->pLeft ?",
          "",
          "[Removed Lines]",
          "1276:     if( ExprHasProperty(pNew, EP_Reduced|EP_TokenOnly|EP_WinFunc|EP_Filter) ){",
          "",
          "[Added Lines]",
          "1270:     if( ExprHasProperty(pNew, EP_Reduced|EP_TokenOnly|EP_WinFunc) ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1286:         pNew->y.pWin = sqlite3WindowDup(db, pNew, p->y.pWin);",
          "1287:         assert( ExprHasProperty(pNew, EP_WinFunc) );",
          "1288:       }",
          "1294:       if( pzBuffer ){",
          "",
          "[Removed Lines]",
          "1289:       if( ExprHasProperty(p, EP_Filter) ){",
          "1290:         pNew->y.pFilter = sqlite3ExprDup(db, p->y.pFilter, 0);",
          "1291:         assert( ExprHasProperty(pNew, EP_Filter) );",
          "1292:       }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1347: static int gatherSelectWindowsCallback(Walker *pWalker, Expr *pExpr){",
          "1348:   if( pExpr->op==TK_FUNCTION && ExprHasProperty(pExpr, EP_WinFunc) ){",
          "1349:     assert( pExpr->y.pWin );",
          "1350:     pExpr->y.pWin->pNextWin = pWalker->u.pSelect->pWin;",
          "1351:     pWalker->u.pSelect->pWin = pExpr->y.pWin;",
          "1352:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1340:     assert( IsWindowFunc(pExpr) );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4852:     return 2;",
          "4853:   }",
          "4854:   if( pA->op!=TK_COLUMN && pA->op!=TK_AGG_COLUMN && pA->u.zToken ){",
          "4856:       if( sqlite3StrICmp(pA->u.zToken,pB->u.zToken)!=0 ) return 2;",
          "4857: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "4867:       if( ExprHasProperty(pA,EP_WinFunc) ){",
          "4869:       }",
          "4870: #endif",
          "4871:     }else if( pA->op==TK_NULL ){",
          "",
          "[Removed Lines]",
          "4855:     if( pA->op==TK_FUNCTION ){",
          "4866:       assert( ExprHasProperty(pA,EP_WinFunc)==ExprHasProperty(pB,EP_WinFunc) );",
          "4868:         if( sqlite3WindowCompare(pParse,pA->y.pWin,pB->y.pWin)!=0 ) return 2;",
          "",
          "[Added Lines]",
          "4846:     if( pA->op==TK_FUNCTION || pA->op==TK_AGG_FUNCTION ){",
          "4849:       assert( pA->op==pB->op );",
          "4850:       if( ExprHasProperty(pA,EP_WinFunc)!=ExprHasProperty(pB,EP_WinFunc) ){",
          "4851:         return 2;",
          "4852:       }",
          "4854:         if( sqlite3WindowCompare(pParse, pA->y.pWin, pB->y.pWin, 1)!=0 ){",
          "4855:           return 2;",
          "4856:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4875:     }else if( ALWAYS(pB->u.zToken!=0) && strcmp(pA->u.zToken,pB->u.zToken)!=0 ){",
          "4876:       return 2;",
          "4877:     }",
          "4886:   }",
          "4887:   if( (pA->flags & EP_Distinct)!=(pB->flags & EP_Distinct) ) return 2;",
          "4888:   if( (combinedFlags & EP_TokenOnly)==0 ){",
          "",
          "[Removed Lines]",
          "4878: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "4879:     else if( pA->op==TK_AGG_FUNCTION ){",
          "4880:       assert( ExprHasProperty(pA, EP_WinFunc)==0 );",
          "4881:       if( sqlite3ExprCompare(pParse, pA->y.pFilter, pB->y.pFilter, iTab) ){",
          "4882:         return 2;",
          "4883:       }",
          "4884:     }",
          "4885: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1044: }",
          "1046: %ifndef SQLITE_OMIT_WINDOWFUNC",
          "1058:   A = sqlite3ExprFunction(pParse, Y, &X, D);",
          "1060: }",
          "1062:   A = sqlite3ExprFunction(pParse, 0, &X, 0);",
          "1064: }",
          "1065: %endif",
          "",
          "[Removed Lines]",
          "1047: %type filter_over {",
          "1048:   struct FunctionTail {",
          "1049:     Window *pWin;",
          "1050:     Expr *pFilter;",
          "1051:   }",
          "1052: }",
          "1053: %destructor filter_over {",
          "1054:   sqlite3WindowDelete(pParse->db, $$.pWin);",
          "1055:   sqlite3ExprDelete(pParse->db, $$.pFilter);",
          "1056: }",
          "1057: expr(A) ::= id(X) LP distinct(D) exprlist(Y) RP filter_over(F). {",
          "1059:   sqlite3WindowAttach(pParse, A, F.pFilter, F.pWin);",
          "1061: expr(A) ::= id(X) LP STAR RP filter_over(F). {",
          "1063:   sqlite3WindowAttach(pParse, A, F.pFilter, F.pWin);",
          "",
          "[Added Lines]",
          "1047: expr(A) ::= id(X) LP distinct(D) exprlist(Y) RP filter_over(Z). {",
          "1049:   sqlite3WindowAttach(pParse, A, Z);",
          "1051: expr(A) ::= id(X) LP STAR RP filter_over(Z). {",
          "1053:   sqlite3WindowAttach(pParse, A, Z);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1673: %type over_clause {Window*}",
          "1674: %destructor over_clause {sqlite3WindowDelete(pParse->db, $$);}",
          "1676: %type range_or_rows {int}",
          "1678: %type frame_bound {struct FrameBound}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1666: %type filter_over {Window*}",
          "1667: %destructor filter_over {sqlite3WindowDelete(pParse->db, $$);}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1737: %destructor window_clause {sqlite3WindowListDelete(pParse->db, $$);}",
          "1738: window_clause(A) ::= WINDOW windowdefn_list(B). { A = B; }",
          "1743: }",
          "1747: }",
          "1751: }",
          "1753: over_clause(A) ::= OVER LP window(Z) RP. {",
          "",
          "[Removed Lines]",
          "1740: filter_over(F) ::= filter_clause(A) over_clause(B). {",
          "1741:   F.pFilter = A;",
          "1742:   F.pWin = B;",
          "1744: filter_over(F) ::= over_clause(B). {",
          "1745:   F.pFilter = 0;",
          "1746:   F.pWin = B;",
          "1748: filter_over(F) ::= filter_clause(A). {",
          "1749:   F.pFilter = A;",
          "1750:   F.pWin = 0;",
          "",
          "[Added Lines]",
          "1733: filter_over(A) ::= filter_clause(F) over_clause(O). {",
          "1734:   O->pFilter = F;",
          "1735:   A = O;",
          "1737: filter_over(A) ::= over_clause(O). {",
          "1738:   A = O;",
          "1740: filter_over(A) ::= filter_clause(F). {",
          "1741:   A = (Window*)sqlite3DbMallocZero(pParse->db, sizeof(Window));",
          "1742:   if( A ){",
          "1743:     A->eFrmType = TK_FILTER;",
          "1744:     A->pFilter = F;",
          "1745:   }",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "751:       int savedAllowFlags = (pNC->ncFlags & (NC_AllowAgg | NC_AllowWin));",
          "753:       assert( !ExprHasProperty(pExpr, EP_xIsSelect) );",
          "754:       zId = pExpr->u.zToken;",
          "755:       nId = sqlite3Strlen30(zId);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "752: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "753:       Window *pWin = (IsWindowFunc(pExpr) ? pExpr->y.pWin : 0);",
          "754: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "827:       if( 0==IN_RENAME_OBJECT ){",
          "828: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "830:         assert( is_agg==0 || (pDef->funcFlags & SQLITE_FUNC_MINMAX)",
          "831:           || (pDef->xValue==0 && pDef->xInverse==0)",
          "832:           || (pDef->xValue && pDef->xInverse && pDef->xSFunc && pDef->xFinalize)",
          "",
          "[Removed Lines]",
          "829:         Window *pWin = (ExprHasProperty(pExpr, EP_WinFunc) ? pExpr->y.pWin : 0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "850:           sqlite3ErrorMsg(pParse, \"misuse of %s function %.*s()\",zType,nId,zId);",
          "851:           pNC->nErr++;",
          "852:           is_agg = 0;",
          "854:           sqlite3ErrorMsg(pParse,",
          "855:               \"filter clause may not be used with non-aggregate %.*s()\",",
          "856:               nId, zId",
          "",
          "[Removed Lines]",
          "853:         }else if( is_agg==0 && ExprHasProperty(pExpr, EP_Filter) ){",
          "",
          "[Added Lines]",
          "854:         }else if( is_agg==0 && ExprHasProperty(pExpr, EP_WinFunc) ){",
          "855:           assert( !IsWindowFunc(pExpr) );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "890:       sqlite3WalkExprList(pWalker, pList);",
          "891:       if( is_agg ){",
          "892: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "894:           Select *pSel = pNC->pWinSelect;",
          "895:           if( IN_RENAME_OBJECT==0 ){",
          "897:           }",
          "901:           if( 0==pSel->pWin",
          "903:           ){",
          "904:             pExpr->y.pWin->pNextWin = pSel->pWin;",
          "905:             pSel->pWin = pExpr->y.pWin;",
          "",
          "[Removed Lines]",
          "893:         if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "896:             sqlite3WindowUpdate(pParse, pSel->pWinDefn, pExpr->y.pWin, pDef);",
          "898:           sqlite3WalkExprList(pWalker, pExpr->y.pWin->pPartition);",
          "899:           sqlite3WalkExprList(pWalker, pExpr->y.pWin->pOrderBy);",
          "900:           sqlite3WalkExpr(pWalker, pExpr->y.pWin->pFilter);",
          "902:            || 0==sqlite3WindowCompare(pParse, pSel->pWin, pExpr->y.pWin)",
          "",
          "[Added Lines]",
          "895:         if( pWin ){",
          "898:             sqlite3WindowUpdate(pParse, pSel->pWinDefn, pWin, pDef);",
          "900:           sqlite3WalkExprList(pWalker, pWin->pPartition);",
          "901:           sqlite3WalkExprList(pWalker, pWin->pOrderBy);",
          "902:           sqlite3WalkExpr(pWalker, pWin->pFilter);",
          "904:            || 0==sqlite3WindowCompare(pParse, pSel->pWin, pWin, 0)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "912:           pExpr->op = TK_AGG_FUNCTION;",
          "913:           pExpr->op2 = 0;",
          "914: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "916: #endif",
          "917:           while( pNC2 && !sqlite3FunctionUsesThisSrc(pExpr, pNC2->pSrcList) ){",
          "918:             pExpr->op2++;",
          "",
          "[Removed Lines]",
          "915:           sqlite3WalkExpr(pWalker, pExpr->y.pFilter);",
          "",
          "[Added Lines]",
          "917:           if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "918:             sqlite3WalkExpr(pWalker, pExpr->y.pWin->pFilter);",
          "919:           }",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4404:   assert( *ppMinMax==0 );",
          "4405:   assert( pFunc->op==TK_AGG_FUNCTION );",
          "4407:     return eRet;",
          "4408:   }",
          "4409:   zFunc = pFunc->u.zToken;",
          "",
          "[Removed Lines]",
          "4406:   if( pEList==0 || pEList->nExpr!=1 || ExprHasProperty(pFunc, EP_Filter) ){",
          "",
          "[Added Lines]",
          "4406:   assert( !IsWindowFunc(pFunc) );",
          "4407:   if( pEList==0 || pEList->nExpr!=1 || ExprHasProperty(pFunc, EP_WinFunc) ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4452:   if( pExpr->op!=TK_AGG_FUNCTION ) return 0;",
          "4453:   if( NEVER(pAggInfo->nFunc==0) ) return 0;",
          "4454:   if( (pAggInfo->aFunc[0].pFunc->funcFlags&SQLITE_FUNC_COUNT)==0 ) return 0;",
          "4457:   return pTab;",
          "4458: }",
          "",
          "[Removed Lines]",
          "4455:   if( ExprHasProperty(pExpr, EP_Distinct|EP_Filter) ) return 0;",
          "",
          "[Added Lines]",
          "4456:   if( ExprHasProperty(pExpr, EP_Distinct|EP_WinFunc) ) return 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5332:     int regAgg;",
          "5333:     ExprList *pList = pF->pExpr->x.pList;",
          "5334:     assert( !ExprHasProperty(pF->pExpr, EP_xIsSelect) );",
          "5337:       addrNext = sqlite3VdbeMakeLabel(pParse);",
          "5338:       sqlite3ExprIfFalse(pParse, pFilter, addrNext, SQLITE_JUMPIFNULL);",
          "5339:     }",
          "",
          "[Removed Lines]",
          "5335:     if( ExprHasProperty(pF->pExpr, EP_Filter) ){",
          "5336:       Expr *pFilter = pF->pExpr->y.pFilter;",
          "",
          "[Added Lines]",
          "5336:     assert( !IsWindowFunc(pF->pExpr) );",
          "5337:     if( ExprHasProperty(pF->pExpr, EP_WinFunc) ){",
          "5338:       Expr *pFilter = pF->pExpr->y.pWin->pFilter;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6236:       sNC.ncFlags |= NC_InAggFunc;",
          "6237:       sqlite3ExprAnalyzeAggList(&sNC, pExpr->x.pList);",
          "6238: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "6242:       }",
          "6243: #endif",
          "6244:       sNC.ncFlags &= ~NC_InAggFunc;",
          "",
          "[Removed Lines]",
          "6239:       assert( !ExprHasProperty(pExpr, EP_WinFunc) );",
          "6240:       if( pExpr->y.pFilter ){",
          "6241:         sqlite3ExprAnalyzeAggregates(&sNC, pExpr->y.pFilter);",
          "",
          "[Added Lines]",
          "6241:       assert( !IsWindowFunc(pExpr) );",
          "6242:       if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "6243:         sqlite3ExprAnalyzeAggregates(&sNC, pExpr->y.pWin->pFilter);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2586: #define IsWindowFunc(p) ( \\",
          "2587:     ExprHasProperty((p), EP_WinFunc) && p->y.pWin->eFrmType!=TK_FILTER \\",
          "2588: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3604: void sqlite3WindowDelete(sqlite3*, Window*);",
          "3605: void sqlite3WindowListDelete(sqlite3 *db, Window *p);",
          "3606: Window *sqlite3WindowAlloc(Parse*, int, int, Expr*, int , Expr*, u8);",
          "3609: void sqlite3WindowCodeInit(Parse*, Window*);",
          "3610: void sqlite3WindowCodeStep(Parse*, Select*, WhereInfo*, int, int);",
          "3611: int sqlite3WindowRewrite(Parse*, Select*);",
          "",
          "[Removed Lines]",
          "3607: void sqlite3WindowAttach(Parse*, Expr*, Expr*, Window*);",
          "3608: int sqlite3WindowCompare(Parse*, Window*, Window*);",
          "",
          "[Added Lines]",
          "3613: void sqlite3WindowAttach(Parse*, Expr*, Window*);",
          "3614: int sqlite3WindowCompare(Parse*, Window*, Window*, int);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3619: #else",
          "3620: # define sqlite3WindowDelete(a,b)",
          "3621: # define sqlite3WindowFunctions()",
          "3623: #endif",
          "",
          "[Removed Lines]",
          "3622: # define sqlite3WindowAttach(a,b,c,d)",
          "",
          "[Added Lines]",
          "3628: # define sqlite3WindowAttach(a,b,c)",
          "",
          "---------------"
        ],
        "src/walker.c||src/walker.c": [
          "File: src/walker.c -> src/walker.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:       if( pExpr->pLeft && walkExpr(pWalker, pExpr->pLeft) ) return WRC_Abort;",
          "64:        assert( pExpr->x.pList==0 || pExpr->pRight==0 );",
          "65:       if( pExpr->pRight ){",
          "67:         pExpr = pExpr->pRight;",
          "68:         continue;",
          "69:       }else if( ExprHasProperty(pExpr, EP_xIsSelect) ){",
          "71:         if( sqlite3WalkSelect(pWalker, pExpr->x.pSelect) ) return WRC_Abort;",
          "72:       }else{",
          "73:         if( pExpr->x.pList ){",
          "74:           if( sqlite3WalkExprList(pWalker, pExpr->x.pList) ) return WRC_Abort;",
          "75:         }",
          "76: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "83:         }",
          "84: #endif",
          "85:       }",
          "",
          "[Removed Lines]",
          "66:         assert( !ExprHasProperty(pExpr, EP_WinFunc|EP_Filter) );",
          "70:         assert( !ExprHasProperty(pExpr, EP_WinFunc|EP_Filter) );",
          "77:         if( ExprHasProperty(pExpr, EP_WinFunc|EP_Filter) ){",
          "78:           if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "79:             if( walkWindowList(pWalker, pExpr->y.pWin) ) return WRC_Abort;",
          "80:           }else if( ExprHasProperty(pExpr, EP_Filter) ){",
          "81:             if( walkExpr(pWalker, pExpr->y.pFilter) ) return WRC_Abort;",
          "82:           }",
          "",
          "[Added Lines]",
          "66:         assert( !ExprHasProperty(pExpr, EP_WinFunc) );",
          "70:         assert( !ExprHasProperty(pExpr, EP_WinFunc) );",
          "77:         if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "78:           if( walkWindowList(pWalker, pExpr->y.pWin) ) return WRC_Abort;",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1197:   if( p ){",
          "1198:     assert( p->op==TK_FUNCTION );",
          "1211:     }",
          "1212:   }else{",
          "1213:     sqlite3WindowDelete(pParse->db, pWin);",
          "1215:   }",
          "1216: }",
          "",
          "[Removed Lines]",
          "1196: void sqlite3WindowAttach(Parse *pParse, Expr *p, Expr *pFilter, Window *pWin){",
          "1199:     if( pWin ){",
          "1200:       p->y.pWin = pWin;",
          "1201:       ExprSetProperty(p, EP_WinFunc);",
          "1202:       pWin->pOwner = p;",
          "1203:       if( p->flags & EP_Distinct ){",
          "1204:         sqlite3ErrorMsg(pParse,",
          "1205:            \"DISTINCT is not supported for window functions\");",
          "1206:       }",
          "1207:       pWin->pFilter = pFilter;",
          "1208:     }else if( pFilter ){",
          "1209:       p->y.pFilter = pFilter;",
          "1210:       ExprSetProperty(p, EP_Filter);",
          "1214:     sqlite3ExprDelete(pParse->db, pFilter);",
          "",
          "[Added Lines]",
          "1196: void sqlite3WindowAttach(Parse *pParse, Expr *p, Window *pWin){",
          "1199:     assert( pWin );",
          "1200:     p->y.pWin = pWin;",
          "1201:     ExprSetProperty(p, EP_WinFunc);",
          "1202:     pWin->pOwner = p;",
          "1203:     if( (p->flags & EP_Distinct) && pWin->eFrmType!=TK_FILTER ){",
          "1204:       sqlite3ErrorMsg(pParse,",
          "1205:           \"DISTINCT is not supported for window functions\"",
          "1206:       );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1223:   if( p1->eFrmType!=p2->eFrmType ) return 1;",
          "1224:   if( p1->eStart!=p2->eStart ) return 1;",
          "1225:   if( p1->eEnd!=p2->eEnd ) return 1;",
          "",
          "[Removed Lines]",
          "1222: int sqlite3WindowCompare(Parse *pParse, Window *p1, Window *p2){",
          "",
          "[Added Lines]",
          "1217: int sqlite3WindowCompare(Parse *pParse, Window *p1, Window *p2, int bFilter){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1228:   if( sqlite3ExprCompare(pParse, p1->pEnd, p2->pEnd, -1) ) return 1;",
          "1229:   if( sqlite3ExprListCompare(p1->pPartition, p2->pPartition, -1) ) return 1;",
          "1230:   if( sqlite3ExprListCompare(p1->pOrderBy, p2->pOrderBy, -1) ) return 1;",
          "1231:   return 0;",
          "1232: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1226:   if( bFilter ){",
          "1227:     if( sqlite3ExprCompare(pParse, p1->pFilter, p2->pFilter, -1) ) return 1;",
          "1228:   }",
          "",
          "---------------"
        ],
        "test/filter1.test||test/filter1.test": [
          "File: test/filter1.test -> test/filter1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:   SELECT count(*) FILTER (WHERE a!=5) FROM t1",
          "56: } {8}",
          "59:   SELECT min(a) FILTER (WHERE a>3) FROM t1 GROUP BY (a%2) ORDER BY 1;",
          "60: } {4 5}",
          "63: #-------------------------------------------------------------------------",
          "64: # Test some errors:",
          "",
          "[Removed Lines]",
          "58: do_execsql_test 1.6 {",
          "",
          "[Added Lines]",
          "58: do_execsql_test 1.7 {",
          "62: do_execsql_test 1.8 {",
          "63:   CREATE VIEW vv AS",
          "64:   SELECT sum(a) FILTER( WHERE a>9 ),",
          "65:          sum(a) FILTER( WHERE a>8 ),",
          "66:          sum(a) FILTER( WHERE a>7 ),",
          "67:          sum(a) FILTER( WHERE a>6 ),",
          "68:          sum(a) FILTER( WHERE a>5 ),",
          "69:          sum(a) FILTER( WHERE a>4 ),",
          "70:          sum(a) FILTER( WHERE a>3 ),",
          "71:          sum(a) FILTER( WHERE a>2 ),",
          "72:          sum(a) FILTER( WHERE a>1 ),",
          "73:          sum(a) FILTER( WHERE a>0 )",
          "74:   FROM t1;",
          "75:   SELECT * FROM vv;",
          "76: } {{} 9 17 24 30 35 39 42 44 45}",
          "",
          "---------------"
        ]
      }
    }
  ]
}