{
  "cve_id": "CVE-2013-7328",
  "cve_desc": "Multiple integer signedness errors in the gdImageCrop function in ext/gd/gd.c in PHP 5.5.x before 5.5.9 allow remote attackers to cause a denial of service (application crash) or obtain sensitive information via an imagecrop function call with a negative value for the (1) x or (2) y dimension, a different vulnerability than CVE-2013-7226.",
  "repo": "php/php-src",
  "patch_hash": "8f4a5373bb71590352fd934028d6dde5bc18530b",
  "patch_info": {
    "commit_hash": "8f4a5373bb71590352fd934028d6dde5bc18530b",
    "repo": "php/php-src",
    "commit_url": "https://github.com/php/php-src/commit/8f4a5373bb71590352fd934028d6dde5bc18530b",
    "files": [
      "NEWS",
      "ext/gd/libgd/gd_crop.c",
      "ext/gd/tests/bug66356.phpt"
    ],
    "message": "Fixed bug #66356 (Heap Overflow Vulnerability in imagecrop())\n\nInitial fix was PHP stuff\nThis one is libgd fix.\n\n- filter invalid crop size\n- dont try to copy on invalid position\n- fix crop size when out of src image\n- fix possible NULL deref\n- fix possible integer overfloow",
    "before_after_code_files": [
      "ext/gd/libgd/gd_crop.c||ext/gd/libgd/gd_crop.c",
      "ext/gd/tests/bug66356.phpt||ext/gd/tests/bug66356.phpt"
    ]
  },
  "patch_diff": {
    "ext/gd/libgd/gd_crop.c||ext/gd/libgd/gd_crop.c": [
      "File: ext/gd/libgd/gd_crop.c -> ext/gd/libgd/gd_crop.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "44: {",
      "45:  gdImagePtr dst;",
      "47:  if (src->trueColor) {",
      "48:   dst = gdImageCreateTrueColor(crop->width, crop->height);",
      "49:   gdImageSaveAlpha(dst, 1);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "48:  if (crop->width<=0 || crop->height<=0) {",
      "49:   return NULL;",
      "50:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "51:   dst = gdImageCreate(crop->width, crop->height);",
      "52:   gdImagePaletteCopy(dst, src);",
      "53:  }",
      "54:  dst->transparent = src->transparent;",
      "58:  }",
      "61:  }",
      "62: #if 0",
      "63: printf(\"rect->x: %i\\nrect->y: %i\\nrect->width: %i\\nrect->height: %i\\n\", crop->x, crop->y, crop->width, crop->height);",
      "64: #endif",
      "67:  } else {",
      "81:    }",
      "82:   }",
      "84:  }",
      "85: }",
      "",
      "[Removed Lines]",
      "56:  if (src->sx < (crop->x + crop->width -1)) {",
      "57:   crop->width = src->sx - crop->x + 1;",
      "59:  if (src->sy < (crop->y + crop->height -1)) {",
      "60:   crop->height = src->sy - crop->y + 1;",
      "65:  if (dst == NULL) {",
      "66:   return NULL;",
      "68:   int y = crop->y;",
      "69:   if (src->trueColor) {",
      "70:    unsigned int dst_y = 0;",
      "71:    while (y < (crop->y + (crop->height - 1))) {",
      "73:     memcpy(dst->tpixels[dst_y++], src->tpixels[y++] + crop->x, crop->width * 4);",
      "74:    }",
      "75:   } else {",
      "76:    int x;",
      "77:    for (y = crop->y; y < (crop->y + (crop->height - 1)); y++) {",
      "78:     for (x = crop->x; x < (crop->x + (crop->width - 1)); x++) {",
      "79:      dst->pixels[y - crop->y][x - crop->x] = src->pixels[y][x];",
      "80:     }",
      "83:   return dst;",
      "",
      "[Added Lines]",
      "60:  if (dst == NULL) {",
      "61:   return NULL;",
      "62:  }",
      "66:  if (crop->x < 0 || crop->x>=src->sx || crop->y<0 || crop->y>=src->sy) {",
      "67:   return dst;",
      "68:  }",
      "71:  if ((src->sx - crop->width) < crop->x) {",
      "72:   crop->width = src->sx - crop->x;",
      "74:  if ((src->sy - crop->height) < crop->y) {",
      "75:   crop->height = src->sy - crop->y;",
      "81:  int y = crop->y;",
      "82:  if (src->trueColor) {",
      "83:   unsigned int dst_y = 0;",
      "84:   while (y < (crop->y + (crop->height - 1))) {",
      "86:    memcpy(dst->tpixels[dst_y++], src->tpixels[y++] + crop->x, crop->width * 4);",
      "87:   }",
      "89:   int x;",
      "90:   for (y = crop->y; y < (crop->y + (crop->height - 1)); y++) {",
      "91:    for (x = crop->x; x < (crop->x + (crop->width - 1)); x++) {",
      "92:     dst->pixels[y - crop->y][x - crop->x] = src->pixels[y][x];",
      "96:  return dst;",
      "",
      "---------------"
    ],
    "ext/gd/tests/bug66356.phpt||ext/gd/tests/bug66356.phpt": [
      "File: ext/gd/tests/bug66356.phpt -> ext/gd/tests/bug66356.phpt",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: --FILE--",
      "8: <?php",
      "9: $img = imagecreatetruecolor(10, 10);",
      "11: $arr = array(\"x\" => \"a\", \"y\" => \"12b\", \"width\" => 10, \"height\" => 10);",
      "13: print_r($arr);",
      "14: ?>",
      "15: --EXPECTF--",
      "16: Array",
      "17: (",
      "18:     [x] => a",
      "",
      "[Removed Lines]",
      "10: $img = imagecrop($img, array(\"x\" => \"a\", \"y\" => 0, \"width\" => 10, \"height\" => 10));",
      "12: $img = imagecrop($img, $arr);",
      "",
      "[Added Lines]",
      "12: var_dump(imagecrop($img, array(\"x\" => \"a\", \"y\" => 0, \"width\" => 10, \"height\" => 10)));",
      "15: var_dump(imagecrop($img, $arr));",
      "19: var_dump(imagecrop($img, array(\"x\" => 0, \"y\" => 0, \"width\" => -1, \"height\" => 10)));",
      "22: var_dump(imagecrop($img, array(\"x\" => -20, \"y\" => -20, \"width\" => 10, \"height\" => 10)));",
      "25: var_dump(imagecrop($img, array(\"x\" => 0x7fffff00, \"y\" => 0, \"width\" => 10, \"height\" => 10)));",
      "29: resource(%d) of type (gd)",
      "30: resource(%d) of type (gd)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "20:     [width] => 10",
      "21:     [height] => 10",
      "22: )",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "38: bool(false)",
      "39: resource(%d) of type (gd)",
      "40: resource(%d) of type (gd)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2938329ce19cb8c4197dec146c3ec887c6f61d01",
      "candidate_info": {
        "commit_hash": "2938329ce19cb8c4197dec146c3ec887c6f61d01",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/2938329ce19cb8c4197dec146c3ec887c6f61d01",
        "files": [
          "NEWS",
          "ext/gd/gd.c",
          "ext/gd/tests/bug66356.phpt",
          "main/php_version.h"
        ],
        "message": "Fixed bug #66356 (Heap Overflow Vulnerability in imagecrop())\n\nAnd also fixed the bug: arguments are altered after some calls",
        "before_after_code_files": [
          "ext/gd/gd.c||ext/gd/gd.c",
          "ext/gd/tests/bug66356.phpt||ext/gd/tests/bug66356.phpt",
          "main/php_version.h||main/php_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/gd/tests/bug66356.phpt||ext/gd/tests/bug66356.phpt"
          ],
          "candidate": [
            "ext/gd/tests/bug66356.phpt||ext/gd/tests/bug66356.phpt"
          ]
        }
      },
      "candidate_diff": {
        "ext/gd/gd.c||ext/gd/gd.c": [
          "File: ext/gd/gd.c -> ext/gd/gd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1538:    break;",
          "1539:   }",
          "1544:  }",
          "1546:  gdImageSetStyle(im, stylearr, index);",
          "",
          "[Removed Lines]",
          "1541:   convert_to_long_ex(item);",
          "1543:   stylearr[index++] = Z_LVAL_PP(item);",
          "",
          "[Added Lines]",
          "1541:   if (Z_TYPE_PP(item) != IS_LONG) {",
          "1542:    zval lval;",
          "1543:    lval = **item;",
          "1544:    zval_copy_ctor(&lval);",
          "1545:    convert_to_long(&lval);",
          "1546:    stylearr[index++] = Z_LVAL(lval);",
          "1547:   } else {",
          "1548:    stylearr[index++] = Z_LVAL_PP(item);",
          "1549:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3347:  for (i = 0; i < npoints; i++) {",
          "3348:   if (zend_hash_index_find(Z_ARRVAL_P(POINTS), (i * 2), (void **) &var) == SUCCESS) {",
          "3352:   }",
          "3353:   if (zend_hash_index_find(Z_ARRVAL_P(POINTS), (i * 2) + 1, (void **) &var) == SUCCESS) {",
          "3357:   }",
          "3358:  }",
          "",
          "[Removed Lines]",
          "3349:    SEPARATE_ZVAL((var));",
          "3350:    convert_to_long(*var);",
          "3351:    points[i].x = Z_LVAL_PP(var);",
          "3354:    SEPARATE_ZVAL(var);",
          "3355:    convert_to_long(*var);",
          "3356:    points[i].y = Z_LVAL_PP(var);",
          "",
          "[Added Lines]",
          "3355:    if (Z_TYPE_PP(var) != IS_LONG) {",
          "3356:     zval lval;",
          "3357:     lval = **var;",
          "3358:     zval_copy_ctor(&lval);",
          "3359:     convert_to_long(&lval);",
          "3360:     points[i].x = Z_LVAL(lval);",
          "3361:    } else {",
          "3362:     points[i].x = Z_LVAL_PP(var);",
          "3363:    }",
          "3366:    if (Z_TYPE_PP(var) != IS_LONG) {",
          "3367:     zval lval;",
          "3368:     lval = **var;",
          "3369:     zval_copy_ctor(&lval);",
          "3370:     convert_to_long(&lval);",
          "3371:     points[i].y = Z_LVAL(lval);",
          "3372:    } else {",
          "3373:     points[i].y = Z_LVAL_PP(var);",
          "3374:    }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4860:    for (j=0; j<3; j++) {",
          "4861:     if (zend_hash_index_find(Z_ARRVAL_PP(var), (j), (void **) &var2) == SUCCESS) {",
          "4865:     } else {",
          "4866:      php_error_docref(NULL TSRMLS_CC, E_WARNING, \"You must have a 3x3 matrix\");",
          "4867:      RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "4862:      SEPARATE_ZVAL(var2);",
          "4863:      convert_to_double(*var2);",
          "4864:      matrix[i][j] = (float)Z_DVAL_PP(var2);",
          "",
          "[Added Lines]",
          "4880:      if (Z_TYPE_PP(var2) != IS_DOUBLE) {",
          "4881:       zval dval;",
          "4882:       dval = **var;",
          "4883:       zval_copy_ctor(&dval);",
          "4884:       convert_to_double(&dval);",
          "4885:       matrix[i][j] = (float)Z_DVAL(dval);",
          "4886:      } else {",
          "4887:       matrix[i][j] = (float)Z_DVAL_PP(var2);",
          "4888:      }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4954:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "4956:  if (zend_hash_find(HASH_OF(z_rect), \"x\", sizeof(\"x\"), (void **)&tmp) != FAILURE) {",
          "4958:  } else {",
          "4959:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Missing x position\");",
          "4960:   RETURN_FALSE;",
          "4961:  }",
          "4963:  if (zend_hash_find(HASH_OF(z_rect), \"y\", sizeof(\"x\"), (void **)&tmp) != FAILURE) {",
          "4965:  } else {",
          "4966:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Missing y position\");",
          "4967:   RETURN_FALSE;",
          "4968:  }",
          "4970:  if (zend_hash_find(HASH_OF(z_rect), \"width\", sizeof(\"width\"), (void **)&tmp) != FAILURE) {",
          "4972:  } else {",
          "4973:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Missing width\");",
          "4974:   RETURN_FALSE;",
          "4975:  }",
          "4977:  if (zend_hash_find(HASH_OF(z_rect), \"height\", sizeof(\"height\"), (void **)&tmp) != FAILURE) {",
          "4979:  } else {",
          "4980:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Missing height\");",
          "4981:   RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "4957:   rect.x = Z_LVAL_PP(tmp);",
          "4964:   rect.y = Z_LVAL_PP(tmp);",
          "4971:   rect.width = Z_LVAL_PP(tmp);",
          "4978:   rect.height = Z_LVAL_PP(tmp);",
          "",
          "[Added Lines]",
          "4981:   if (Z_TYPE_PP(tmp) != IS_LONG) {",
          "4982:    zval lval;",
          "4983:    lval = **tmp;",
          "4984:    zval_copy_ctor(&lval);",
          "4985:    convert_to_long(&lval);",
          "4986:    rect.x = Z_LVAL(lval);",
          "4987:   } else {",
          "4988:    rect.x = Z_LVAL_PP(tmp);",
          "4989:   }",
          "4996:   if (Z_TYPE_PP(tmp) != IS_LONG) {",
          "4997:    zval lval;",
          "4998:    lval = **tmp;",
          "4999:    zval_copy_ctor(&lval);",
          "5000:    convert_to_long(&lval);",
          "5001:    rect.y = Z_LVAL(lval);",
          "5002:   } else {",
          "5003:    rect.y = Z_LVAL_PP(tmp);",
          "5004:   }",
          "5011:   if (Z_TYPE_PP(tmp) != IS_LONG) {",
          "5012:    zval lval;",
          "5013:    lval = **tmp;",
          "5014:    zval_copy_ctor(&lval);",
          "5015:    convert_to_long(&lval);",
          "5016:    rect.width = Z_LVAL(lval);",
          "5017:   } else {",
          "5018:    rect.width = Z_LVAL_PP(tmp);",
          "5019:   }",
          "5026:   if (Z_TYPE_PP(tmp) != IS_LONG) {",
          "5027:    zval lval;",
          "5028:    lval = **tmp;",
          "5029:    zval_copy_ctor(&lval);",
          "5030:    convert_to_long(&lval);",
          "5031:    rect.height = Z_LVAL(lval);",
          "5032:   } else {",
          "5033:    rect.height = Z_LVAL_PP(tmp);",
          "5034:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5124:      affine[i] = Z_DVAL_PP(zval_affine_elem);",
          "5125:      break;",
          "5126:     case IS_STRING:",
          "5129:      break;",
          "5130:     default:",
          "5131:      php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Invalid type for element %i\", i);",
          "",
          "[Removed Lines]",
          "5127:      convert_to_double_ex(zval_affine_elem);",
          "5128:      affine[i] = Z_DVAL_PP(zval_affine_elem);",
          "",
          "[Added Lines]",
          "5183:      {",
          "5184:       zval dval;",
          "5185:       dval = **zval_affine_elem;",
          "5186:       zval_copy_ctor(&dval);",
          "5187:       convert_to_double(&dval);",
          "5188:       affine[i] = Z_DVAL(dval);",
          "5189:      }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5137:  if (z_rect != NULL) {",
          "5138:   if (zend_hash_find(HASH_OF(z_rect), \"x\", sizeof(\"x\"), (void **)&tmp) != FAILURE) {",
          "5141:   } else {",
          "5142:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Missing x position\");",
          "5143:    RETURN_FALSE;",
          "5144:   }",
          "5146:   if (zend_hash_find(HASH_OF(z_rect), \"y\", sizeof(\"x\"), (void **)&tmp) != FAILURE) {",
          "5149:   } else {",
          "5150:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Missing y position\");",
          "5151:    RETURN_FALSE;",
          "5152:   }",
          "5154:   if (zend_hash_find(HASH_OF(z_rect), \"width\", sizeof(\"width\"), (void **)&tmp) != FAILURE) {",
          "5157:   } else {",
          "5158:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Missing width\");",
          "5159:    RETURN_FALSE;",
          "5160:   }",
          "5162:   if (zend_hash_find(HASH_OF(z_rect), \"height\", sizeof(\"height\"), (void **)&tmp) != FAILURE) {",
          "5165:   } else {",
          "5166:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Missing height\");",
          "5167:    RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "5139:    convert_to_long_ex(tmp);",
          "5140:    rect.x = Z_LVAL_PP(tmp);",
          "5147:    convert_to_long_ex(tmp);",
          "5148:    rect.y = Z_LVAL_PP(tmp);",
          "5155:    convert_to_long_ex(tmp);",
          "5156:    rect.width = Z_LVAL_PP(tmp);",
          "5163:    convert_to_long_ex(tmp);",
          "5164:    rect.height = Z_LVAL_PP(tmp);",
          "",
          "[Added Lines]",
          "5200:    if (Z_TYPE_PP(tmp) != IS_LONG) {",
          "5201:     zval lval;",
          "5202:     lval = **tmp;",
          "5203:     zval_copy_ctor(&lval);",
          "5204:     convert_to_long(&lval);",
          "5205:     rect.x = Z_LVAL(lval);",
          "5206:    } else {",
          "5207:     rect.x = Z_LVAL_PP(tmp);",
          "5208:    }",
          "5215:    if (Z_TYPE_PP(tmp) != IS_LONG) {",
          "5216:     zval lval;",
          "5217:     lval = **tmp;",
          "5218:     zval_copy_ctor(&lval);",
          "5219:     convert_to_long(&lval);",
          "5220:     rect.y = Z_LVAL(lval);",
          "5221:    } else {",
          "5222:     rect.y = Z_LVAL_PP(tmp);",
          "5223:    }",
          "5230:    if (Z_TYPE_PP(tmp) != IS_LONG) {",
          "5231:     zval lval;",
          "5232:     lval = **tmp;",
          "5233:     zval_copy_ctor(&lval);",
          "5234:     convert_to_long(&lval);",
          "5235:     rect.width = Z_LVAL(lval);",
          "5236:    } else {",
          "5237:     rect.width = Z_LVAL_PP(tmp);",
          "5238:    }",
          "5245:    if (Z_TYPE_PP(tmp) != IS_LONG) {",
          "5246:     zval lval;",
          "5247:     lval = **tmp;",
          "5248:     zval_copy_ctor(&lval);",
          "5249:     convert_to_long(&lval);",
          "5250:     rect.height = Z_LVAL(lval);",
          "5251:    } else {",
          "5252:     rect.height = Z_LVAL_PP(tmp);",
          "5253:    }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5211:     php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Array expected as options\");",
          "5212:    }",
          "5213:    if (zend_hash_find(HASH_OF(options), \"x\", sizeof(\"x\"), (void **)&tmp) != FAILURE) {",
          "5216:    } else {",
          "5217:     php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Missing x position\");",
          "5218:     RETURN_FALSE;",
          "5219:    }",
          "5221:    if (zend_hash_find(HASH_OF(options), \"y\", sizeof(\"y\"), (void **)&tmp) != FAILURE) {",
          "5224:    } else {",
          "5225:     php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Missing y position\");",
          "5226:     RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "5214:     convert_to_double_ex(tmp);",
          "5215:     x = Z_DVAL_PP(tmp);",
          "5222:     convert_to_double_ex(tmp);",
          "5223:     y = Z_DVAL_PP(tmp);",
          "",
          "[Added Lines]",
          "5303:     if (Z_TYPE_PP(tmp) != IS_DOUBLE) {",
          "5304:      zval dval;",
          "5305:      dval = **tmp;",
          "5306:      zval_copy_ctor(&dval);",
          "5307:      convert_to_double(&dval);",
          "5308:      x = Z_DVAL(dval);",
          "5309:     } else {",
          "5310:      x = Z_DVAL_PP(tmp);",
          "5311:     }",
          "5318:     if (Z_TYPE_PP(tmp) != IS_DOUBLE) {",
          "5319:      zval dval;",
          "5320:      dval = **tmp;",
          "5321:      zval_copy_ctor(&dval);",
          "5322:      convert_to_double(&dval);",
          "5323:      y = Z_DVAL(dval);",
          "5324:     } else {",
          "5325:      y = Z_DVAL_PP(tmp);",
          "5326:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "5300:      m1[i] = Z_DVAL_PP(tmp);",
          "5301:      break;",
          "5302:     case IS_STRING:",
          "5305:      break;",
          "5306:     default:",
          "5307:      php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Invalid type for element %i\", i);",
          "",
          "[Removed Lines]",
          "5303:      convert_to_double_ex(tmp);",
          "5304:      m1[i] = Z_DVAL_PP(tmp);",
          "",
          "[Added Lines]",
          "5406:      {",
          "5407:       zval dval;",
          "5408:       dval = **tmp;",
          "5409:       zval_copy_ctor(&dval);",
          "5410:       convert_to_double(&dval);",
          "5411:       m1[i] = Z_DVAL(dval);",
          "5412:      }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "5317:      m2[i] = Z_DVAL_PP(tmp);",
          "5318:      break;",
          "5319:     case IS_STRING:",
          "5322:      break;",
          "5323:     default:",
          "5324:      php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Invalid type for element %i\", i);",
          "",
          "[Removed Lines]",
          "5320:      convert_to_double_ex(tmp);",
          "5321:      m2[i] = Z_DVAL_PP(tmp);",
          "",
          "[Added Lines]",
          "5428:      {",
          "5429:       zval dval;",
          "5430:       dval = **tmp;",
          "5431:       zval_copy_ctor(&dval);",
          "5432:       convert_to_double(&dval);",
          "5433:       m2[i] = Z_DVAL(dval);",
          "5434:      }",
          "",
          "---------------"
        ],
        "ext/gd/tests/bug66356.phpt||ext/gd/tests/bug66356.phpt": [
          "File: ext/gd/tests/bug66356.phpt -> ext/gd/tests/bug66356.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #66356 (Heap Overflow Vulnerability in imagecrop())",
          "3: --SKIPIF--",
          "4: <?php",
          "5:  if(!extension_loaded('gd')){ die('skip gd extension not available'); }",
          "6: ?>",
          "7: --FILE--",
          "8: <?php",
          "9: $img = imagecreatetruecolor(10, 10);",
          "10: $img = imagecrop($img, array(\"x\" => \"a\", \"y\" => 0, \"width\" => 10, \"height\" => 10));",
          "11: $arr = array(\"x\" => \"a\", \"y\" => \"12b\", \"width\" => 10, \"height\" => 10);",
          "12: $img = imagecrop($img, $arr);",
          "13: print_r($arr);",
          "14: ?>",
          "15: --EXPECTF--",
          "16: Array",
          "17: (",
          "18:     [x] => a",
          "19:     [y] => 12b",
          "20:     [width] => 10",
          "21:     [height] => 10",
          "22: )",
          "",
          "---------------"
        ],
        "main/php_version.h||main/php_version.h": [
          "File: main/php_version.h -> main/php_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #define PHP_MAJOR_VERSION 5",
          "4: #define PHP_MINOR_VERSION 5",
          "6: #define PHP_EXTRA_VERSION \"-dev\"",
          "",
          "[Removed Lines]",
          "5: #define PHP_RELEASE_VERSION 8",
          "7: #define PHP_VERSION \"5.5.8-dev\"",
          "8: #define PHP_VERSION_ID 50508",
          "",
          "[Added Lines]",
          "5: #define PHP_RELEASE_VERSION 5",
          "7: #define PHP_VERSION \"5.5.5-dev\"",
          "8: #define PHP_VERSION_ID 50505",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "af09d8b96a8aacdd7d738fec81b695c1c58368f7",
      "candidate_info": {
        "commit_hash": "af09d8b96a8aacdd7d738fec81b695c1c58368f7",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/af09d8b96a8aacdd7d738fec81b695c1c58368f7",
        "files": [
          "ext/gd/libgd/gd_crop.c",
          "ext/gd/tests/bug66356.phpt"
        ],
        "message": "Fixed Bug #66815 imagecrop(): insufficient fix for NULL defer CVE-2013-7327\n\nThis amends commit 8f4a537, which aimed to correct NULL dereference because of\nmissing check of gdImageCreateTrueColor() / gdImageCreate() return value.  That\ncommit checks for negative crop rectangle width and height, but\ngdImageCreate*() can also return NULL when width * height overflows.  Hence\nNULL deref is still possible, as gdImageSaveAlpha() and gdImagePaletteCopy()\nis called before dst == NULL check.\n\nThis moves NULL check to happen right after gdImageCreate*().  It also removes\nwidth and height check before gdImageCreate*(), as the same check is done by\nimage create functions (with an extra warning).\n\nFrom thoger redhat com",
        "before_after_code_files": [
          "ext/gd/libgd/gd_crop.c||ext/gd/libgd/gd_crop.c",
          "ext/gd/tests/bug66356.phpt||ext/gd/tests/bug66356.phpt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/gd/libgd/gd_crop.c||ext/gd/libgd/gd_crop.c",
            "ext/gd/tests/bug66356.phpt||ext/gd/tests/bug66356.phpt"
          ],
          "candidate": [
            "ext/gd/libgd/gd_crop.c||ext/gd/libgd/gd_crop.c",
            "ext/gd/tests/bug66356.phpt||ext/gd/tests/bug66356.phpt"
          ]
        }
      },
      "candidate_diff": {
        "ext/gd/libgd/gd_crop.c||ext/gd/libgd/gd_crop.c": [
          "File: ext/gd/libgd/gd_crop.c -> ext/gd/libgd/gd_crop.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:  gdImagePtr dst;",
          "46:  int y;",
          "54:  if (src->trueColor) {",
          "55:   dst = gdImageCreateTrueColor(crop->width, crop->height);",
          "56:   gdImageSaveAlpha(dst, 1);",
          "57:  } else {",
          "58:   dst = gdImageCreate(crop->width, crop->height);",
          "59:   gdImagePaletteCopy(dst, src);",
          "60:  }",
          "64:  dst->transparent = src->transparent;",
          "",
          "[Removed Lines]",
          "49:  if (crop->width<=0 || crop->height<=0) {",
          "50:   return NULL;",
          "51:  }",
          "61:  if (dst == NULL) {",
          "62:   return NULL;",
          "63:  }",
          "",
          "[Added Lines]",
          "51:   if (dst == NULL) {",
          "52:    return NULL;",
          "53:   }",
          "57:   if (dst == NULL) {",
          "58:    return NULL;",
          "59:   }",
          "",
          "---------------"
        ],
        "ext/gd/tests/bug66356.phpt||ext/gd/tests/bug66356.phpt": [
          "File: ext/gd/tests/bug66356.phpt -> ext/gd/tests/bug66356.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: var_dump(imagecrop($img, array(\"x\" => 0x7fffff00, \"y\" => 0, \"width\" => 10, \"height\" => 10)));",
          "27: ?>",
          "28: --EXPECTF--",
          "29: resource(%d) of type (gd)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: var_dump(imagecrop($img, array(\"x\" => 0, \"y\" => 0, \"width\" => 65535, \"height\" => 65535)));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:     [width] => 10",
          "36:     [height] => 10",
          "37: )",
          "38: bool(false)",
          "39: resource(%d) of type (gd)",
          "",
          "[Removed Lines]",
          "40: resource(%d) of type (gd)",
          "",
          "[Added Lines]",
          "41: Warning: imagecrop(): gd warning: one parameter to a memory allocation multiplication is negative or zero, failing operation gracefully",
          "42:  in %sbug66356.php on line %d",
          "47: Warning: imagecrop(): gd warning: product of memory allocation multiplication would exceed INT_MAX, failing operation gracefully",
          "48:  in %sbug66356.php on line %d",
          "49: bool(false)",
          "",
          "---------------"
        ]
      }
    }
  ]
}