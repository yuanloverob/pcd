{
  "cve_id": "CVE-2019-19880",
  "cve_desc": "exprListAppendList in window.c in SQLite 3.30.1 allows attackers to trigger an invalid pointer dereference because constant integer values in ORDER BY clauses of window definitions are mishandled.",
  "repo": "sqlite/sqlite",
  "patch_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
  "patch_info": {
    "commit_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/window.c"
    ],
    "message": "When processing constant integer values in ORDER BY clauses of window definitions (see check-in [7e4809eadfe99ebf]) be sure to fully disable the constant value to avoid an invalid pointer dereference if the expression is ever duplicated. This fixes a crash report from Yongheng and Rui.\n\nFossilOrigin-Name: 1ca0bd982ab1183bbafce0d260e4dceda5eb766ed2e7793374a88d1ae0bdd2ca",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8223e79f987feda5c8e51ec52cec6798cca16d070b10558939e2888ca1a25b8e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "895:     int nInit = pList ? pList->nExpr : 0;",
      "896:     for(i=0; i<pAppend->nExpr; i++){",
      "897:       Expr *pDup = sqlite3ExprDup(pParse->db, pAppend->a[i].pExpr, 0);",
      "898:       if( bIntToNull && pDup && pDup->op==TK_INTEGER ){",
      "899:         pDup->op = TK_NULL;",
      "900:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
      "901:       }",
      "902:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
      "903:       if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "898:       assert( pDup==0 || !ExprHasProperty(pDup, EP_MemToken) );",
      "902:         pDup->u.zToken = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "23d3f5d661ecdcef03843d6a27667f2adc3c6661",
      "candidate_info": {
        "commit_hash": "23d3f5d661ecdcef03843d6a27667f2adc3c6661",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/23d3f5d661ecdcef03843d6a27667f2adc3c6661",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fts4merge5.test",
          "test/permutations.test"
        ],
        "message": "Fix a long-standing problem in fts4 incrmental merge.\n\nFossilOrigin-Name: 67da31e24ebb49c4cac81c9e7cfca37ca422555fd0fdb01d8f180890783c84ff",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "test/fts4merge5.test||test/fts4merge5.test",
          "test/permutations.test||test/permutations.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4296:         NodeReader reader;",
          "4297:         pNode = &pWriter->aNodeWriter[i];",
          "4301:           while( reader.aNode && rc==SQLITE_OK ) rc = nodeReaderNext(&reader);",
          "4302:           blobGrowBuffer(&pNode->key, reader.term.n, &rc);",
          "4303:           if( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "4299:         rc = nodeReaderInit(&reader, pNode->block.a, pNode->block.n);",
          "4300:         if( reader.aNode ){",
          "",
          "[Added Lines]",
          "4299:         if( pNode->block.a){",
          "4300:           rc = nodeReaderInit(&reader, pNode->block.a, pNode->block.n);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9f4035f91a9f914797c67afbf19139b2cd25aea48595f7254fe5d18cd693d972",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts4merge5.test||test/fts4merge5.test": [
          "File: test/fts4merge5.test -> test/fts4merge5.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 October 02",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #*************************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this script is testing the FTS4 module.",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "17: set testprefix fts4merge5",
          "19: # If SQLITE_ENABLE_FTS3 is defined, omit this file.",
          "20: ifcapable !fts3 {",
          "21:   finish_test",
          "22:   return",
          "23: }",
          "25: source $testdir/genesis.tcl",
          "27: do_execsql_test 1.1 {",
          "28:   CREATE TABLE t1(docid, words);",
          "29: }",
          "30: fts_kjv_genesis",
          "32: do_execsql_test 1.2 {",
          "33:   CREATE VIRTUAL TABLE x1 USING fts3;",
          "34:   INSERT INTO x1(x1) VALUES('nodesize=64');",
          "35:   INSERT INTO x1(x1) VALUES('maxpending=64');",
          "36: }",
          "38: do_execsql_test 1.3 {",
          "39:   INSERT INTO x1(docid, content) SELECT * FROM t1;",
          "40: }",
          "42: for {set tn 1} {1} {incr tn} {",
          "43:   set tc1 [db total_changes]",
          "44:   do_execsql_test 1.4.$tn.1 {",
          "45:     INSERT INTO x1(x1) VALUES('merge=1,2');",
          "46:   }",
          "47:   set tc2 [db total_changes]",
          "49:   if {($tc2 - $tc1)<2} break",
          "51:   do_execsql_test 1.4.$tn.1 {",
          "52:     INSERT INTO x1(x1) VALUES('integrity-check');",
          "53:   }",
          "54: }",
          "58: finish_test",
          "",
          "---------------"
        ],
        "test/permutations.test||test/permutations.test": [
          "File: test/permutations.test -> test/permutations.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "126:   walcrash2.test e_fkey.test backup.test",
          "128:   fts4merge.test fts4merge2.test fts4merge4.test fts4check.test",
          "129:   fts3cov.test fts3snippet.test fts3corrupt2.test fts3an.test",
          "130:   fts3defer.test fts4langid.test fts3sort.test fts5unicode.test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129:   fts4merge5.test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5f913ecb62200fc735c9222e6a24c0453ecaa8a1",
      "candidate_info": {
        "commit_hash": "5f913ecb62200fc735c9222e6a24c0453ecaa8a1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5f913ecb62200fc735c9222e6a24c0453ecaa8a1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/where.c",
          "test/fts3fuzz001.test"
        ],
        "message": "Use the new SQLITE_IDXTYPE_IPK values (3) on Index.idxType to indicate the fake INTEGER PRIMARY KEY index used during query planning.\n\nFossilOrigin-Name: e22d2f905fe840bea51b536ebedc9b637190ea0a37f16559668d99a61e971411",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/where.c||src/where.c",
          "test/fts3fuzz001.test||test/fts3fuzz001.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 666cf8f6b39ae1f72e82b45e9cacba23caf61370ca0c695b3b14452accbb1a0d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2210:   rc = whereLoopXfer(db, p, pTemplate);",
          "2211:   if( (p->wsFlags & WHERE_VIRTUALTABLE)==0 ){",
          "2212:     Index *pIndex = p->u.btree.pIndex;",
          "2214:       p->u.btree.pIndex = 0;",
          "2215:     }",
          "2216:   }",
          "",
          "[Removed Lines]",
          "2213:     if( pIndex && pIndex->tnum==0 ){",
          "",
          "[Added Lines]",
          "2213:     if( pIndex && pIndex->idxType==SQLITE_IDXTYPE_IPK ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2878:     sPk.onError = OE_Replace;",
          "2879:     sPk.pTable = pTab;",
          "2880:     sPk.szIdxRow = pTab->szTabRow;",
          "2881:     aiRowEstPk[0] = pTab->nRowLogEst;",
          "2882:     aiRowEstPk[1] = 0;",
          "2883:     pFirst = pSrc->pTab->pIndex;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2881:     sPk.idxType = SQLITE_IDXTYPE_IPK;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2968:     b = indexMightHelpWithOrderBy(pBuilder, pProbe, pSrc->iCursor);",
          "2970:     assert( (pWInfo->wctrlFlags & WHERE_ONEPASS_DESIRED)==0 || b==0 );",
          "2973:       pNew->wsFlags = WHERE_IPK;",
          "",
          "[Removed Lines]",
          "2971:     if( pProbe->tnum<=0 ){",
          "",
          "[Added Lines]",
          "2972:     if( pProbe->idxType==SQLITE_IDXTYPE_IPK ){",
          "",
          "---------------"
        ],
        "test/fts3fuzz001.test||test/fts3fuzz001.test": [
          "File: test/fts3fuzz001.test -> test/fts3fuzz001.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:   catchsql {",
          "103:     INSERT INTO t1(t1) VALUES('optimize');",
          "104:   }",
          "106: do_test fts3fuzz001-121 {",
          "107:   catchsql {",
          "108:     INSERT INTO t1(t1) VALUES('integrity-check');",
          "",
          "[Removed Lines]",
          "105: } {0 {}}",
          "",
          "[Added Lines]",
          "105: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "57e141bc28db0ac6fee77e24fadb437758060830",
      "candidate_info": {
        "commit_hash": "57e141bc28db0ac6fee77e24fadb437758060830",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/57e141bc28db0ac6fee77e24fadb437758060830",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/dbtotxt.c"
        ],
        "message": "Fix the filename normalization in the dbtotxt utility program.\n\nFossilOrigin-Name: 29a00a05dd40ff59be340969e1aca4fee41e092f2faa1cea85a3448265a83c2c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/dbtotxt.c||tool/dbtotxt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b0a49d5e6df116bb5eacb60a0bb0f482760aec38bd417d4250d9e57d43bdbb13",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/dbtotxt.c||tool/dbtotxt.c": [
          "File: tool/dbtotxt.c -> tool/dbtotxt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:   }",
          "113:   zBaseName = zInputFile;",
          "114:   for(i=0; zInputFile[i]; i++){",
          "116:   }",
          "117:   printf(\"| size %d pagesize %d filename %s\\n\",(int)szFile,pgsz,zBaseName);",
          "118:   for(i=0; i<szFile; i+=16){",
          "",
          "[Removed Lines]",
          "115:     if( zInputFile[i]=='/' && zInputFile[i+1]!=0 ) zBaseName = zInputFile+1;",
          "",
          "[Added Lines]",
          "115:     if( zInputFile[i]=='/' && zInputFile[i+1]!=0 ) zBaseName = zInputFile+i+1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e04c1ec52aa2d6bbd1f6d9b815219a75abe965b1",
      "candidate_info": {
        "commit_hash": "e04c1ec52aa2d6bbd1f6d9b815219a75abe965b1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e04c1ec52aa2d6bbd1f6d9b815219a75abe965b1",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "New test cases added to test/fuzzdata8.db.\n\nFossilOrigin-Name: 39be3c61bd809cc89bdfdba90afc391ac9c2f81dfd8bb68a9b085b0ca8cd1fba",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bbfb2908ecd113c88e69a0984cbe2550463cdd3a67648b0e4e3578e80630136e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "06baba54b4d097113e8a425010d31f044df57f4b",
      "candidate_info": {
        "commit_hash": "06baba54b4d097113e8a425010d31f044df57f4b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/06baba54b4d097113e8a425010d31f044df57f4b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "src/vdbe.h",
          "src/vdbeaux.c",
          "test/trigger1.test"
        ],
        "message": "Correction to check-in [bec5b6d4d083556d] so that it detects *all* triggers that might perturb the insertion cursor. Ticket [50c09fc2cf0d91ce].\n\nFossilOrigin-Name: 521f1d36282549488a47a434484a24924ee970d29f05a8ae499b7d536bcd692b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "src/vdbe.h||src/vdbe.h",
          "src/vdbeaux.c||src/vdbeaux.c",
          "test/trigger1.test||test/trigger1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1a6e009372cf9571e540812c8607e95a86740112a1091f03e3f632339eccb629",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1064:       sqlite3CompleteInsertion(pParse, pTab, iDataCur, iIdxCur,",
          "1065:           regIns, aRegIdx, 0, appendFlag, bUseSeek",
          "1066:       );",
          "",
          "[Removed Lines]",
          "1061:       bUseSeek = (isReplace==0 || (pTrigger==0 &&",
          "1062:           ((db->flags & SQLITE_ForeignKeys)==0 || sqlite3FkReferences(pTab)==0)",
          "1063:       ));",
          "",
          "[Added Lines]",
          "1061:       bUseSeek = (isReplace==0 || !sqlite3VdbeHasSubProgram(v));",
          "",
          "---------------"
        ],
        "src/vdbe.h||src/vdbe.h": [
          "File: src/vdbe.h -> src/vdbe.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "278: typedef int (*RecordCompare)(int,const void*,UnpackedRecord*);",
          "279: RecordCompare sqlite3VdbeFindCompare(UnpackedRecord*);",
          "282: void sqlite3VdbeLinkSubProgram(Vdbe *, SubProgram *);",
          "285: int sqlite3NotPureFunc(sqlite3_context*);",
          "",
          "[Removed Lines]",
          "281: #ifndef SQLITE_OMIT_TRIGGER",
          "283: #endif",
          "",
          "[Added Lines]",
          "282: int sqlite3VdbeHasSubProgram(Vdbe*);",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1098:   pVdbe->pProgram = p;",
          "1099: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1104: int sqlite3VdbeHasSubProgram(Vdbe *pVdbe){",
          "1105:   return pVdbe->pProgram!=0;",
          "1106: }",
          "",
          "---------------"
        ],
        "test/trigger1.test||test/trigger1.test": [
          "File: test/trigger1.test -> test/trigger1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "782:   DROP TRIGGER r20_3;",
          "783: } {}",
          "785: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "785: # 2019-10-24 ticket 50c09fc2cf0d91ce",
          "786: #",
          "787: db close",
          "788: sqlite3 db :memory:",
          "789: do_execsql_test trigger1-21.1 {",
          "790:   PRAGMA recursive_triggers = true;",
          "791:   CREATE TABLE t0(a, b, c UNIQUE);",
          "792:   CREATE UNIQUE INDEX i0 ON t0(b) WHERE a;",
          "793:   CREATE TRIGGER tr0 AFTER DELETE ON t0 BEGIN",
          "794:     DELETE FROM t0;",
          "795:   END;",
          "796:   INSERT INTO t0(a,b,c) VALUES(0,0,9),(1,1,1);",
          "797:   REPLACE INTO t0(a,b,c) VALUES(2,0,9);",
          "798:   SELECT * FROM t0;",
          "799: } {2 0 9}",
          "",
          "---------------"
        ]
      }
    }
  ]
}