{
  "cve_id": "CVE-2021-3736",
  "cve_desc": "A flaw was found in the Linux kernel. A memory leak problem was found in mbochs_ioctl in samples/vfio-mdev/mbochs.c in Virtual Function I/O (VFIO) Mediated devices. This flaw could allow a local attacker to leak internal kernel information.",
  "repo": "torvalds/linux",
  "patch_hash": "de5494af4815a4c9328536c72741229b7de88e7f",
  "patch_info": {
    "commit_hash": "de5494af4815a4c9328536c72741229b7de88e7f",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/de5494af4815a4c9328536c72741229b7de88e7f",
    "files": [
      "samples/vfio-mdev/mbochs.c"
    ],
    "message": "vfio/mbochs: Fix missing error unwind of mbochs_used_mbytes\n\nConvert mbochs to use an atomic scheme for this like mtty was changed\ninto. The atomic fixes various race conditions with probing. Add the\nmissing error unwind. Also add the missing kfree of mdev_state->pages.\n\nFixes: 681c1615f891 (\"vfio/mbochs: Convert to use vfio_register_group_dev()\")\nReported-by: Cornelia Huck <cohuck@redhat.com>\nCo-developed-by: Alex Williamson <alex.williamson@redhat.com>\nReviewed-by: Christoph Hellwig <hch@lst.de>\nSigned-off-by: Jason Gunthorpe <jgg@nvidia.com>\nReviewed-by: Cornelia Huck <cohuck@redhat.com>\nLink: https://lore.kernel.org/r/2-v4-9ea22c5e6afb+1adf-vfio_reflck_jgg@nvidia.com\nSigned-off-by: Alex Williamson <alex.williamson@redhat.com>",
    "before_after_code_files": [
      "samples/vfio-mdev/mbochs.c||samples/vfio-mdev/mbochs.c"
    ]
  },
  "patch_diff": {
    "samples/vfio-mdev/mbochs.c||samples/vfio-mdev/mbochs.c": [
      "File: samples/vfio-mdev/mbochs.c -> samples/vfio-mdev/mbochs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "129: static struct class *mbochs_class;",
      "130: static struct cdev mbochs_cdev;",
      "131: static struct device mbochs_dev;",
      "133: static const struct vfio_device_ops mbochs_dev_ops;",
      "135: struct vfio_region_info_ext {",
      "",
      "[Removed Lines]",
      "132: static int  mbochs_used_mbytes;",
      "",
      "[Added Lines]",
      "132: static atomic_t mbochs_avail_mbytes;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "508: static int mbochs_probe(struct mdev_device *mdev)",
      "509: {",
      "510:  const struct mbochs_type *type =",
      "511:   &mbochs_types[mdev_get_type_group_id(mdev)];",
      "512:  struct device *dev = mdev_dev(mdev);",
      "513:  struct mdev_state *mdev_state;",
      "514:  int ret = -ENOMEM;",
      "519:  mdev_state = kzalloc(sizeof(struct mdev_state), GFP_KERNEL);",
      "520:  if (mdev_state == NULL)",
      "522:  vfio_init_group_dev(&mdev_state->vdev, &mdev->dev, &mbochs_dev_ops);",
      "524:  mdev_state->vconfig = kzalloc(MBOCHS_CONFIG_SPACE_SIZE, GFP_KERNEL);",
      "",
      "[Removed Lines]",
      "516:  if (type->mbytes + mbochs_used_mbytes > max_mbytes)",
      "517:   return -ENOMEM;",
      "521:   return -ENOMEM;",
      "",
      "[Added Lines]",
      "510:  int avail_mbytes = atomic_read(&mbochs_avail_mbytes);",
      "517:  do {",
      "518:   if (avail_mbytes < type->mbytes)",
      "519:    return -ENOSPC;",
      "520:  } while (!atomic_try_cmpxchg(&mbochs_avail_mbytes, &avail_mbytes,",
      "521:          avail_mbytes - type->mbytes));",
      "525:   goto err_avail;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "549:  mbochs_create_config_space(mdev_state);",
      "550:  mbochs_reset(mdev_state);",
      "554:  ret = vfio_register_group_dev(&mdev_state->vdev);",
      "555:  if (ret)",
      "556:   goto err_mem;",
      "557:  dev_set_drvdata(&mdev->dev, mdev_state);",
      "558:  return 0;",
      "560: err_mem:",
      "561:  kfree(mdev_state->vconfig);",
      "562:  kfree(mdev_state);",
      "563:  return ret;",
      "564: }",
      "",
      "[Removed Lines]",
      "552:  mbochs_used_mbytes += type->mbytes;",
      "",
      "[Added Lines]",
      "562:  kfree(mdev_state->pages);",
      "565: err_avail:",
      "566:  atomic_add(type->mbytes, &mbochs_avail_mbytes);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "567: {",
      "568:  struct mdev_state *mdev_state = dev_get_drvdata(&mdev->dev);",
      "571:  vfio_unregister_group_dev(&mdev_state->vdev);",
      "572:  kfree(mdev_state->pages);",
      "573:  kfree(mdev_state->vconfig);",
      "574:  kfree(mdev_state);",
      "",
      "[Removed Lines]",
      "570:  mbochs_used_mbytes -= mdev_state->type->mbytes;",
      "",
      "[Added Lines]",
      "575:  atomic_add(mdev_state->type->mbytes, &mbochs_avail_mbytes);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1351: {",
      "1352:  const struct mbochs_type *type =",
      "1353:   &mbochs_types[mtype_get_type_group_id(mtype)];",
      "1356:  return sprintf(buf, \"%d\\n\", count);",
      "1357: }",
      "",
      "[Removed Lines]",
      "1354:  int count = (max_mbytes - mbochs_used_mbytes) / type->mbytes;",
      "",
      "[Added Lines]",
      "1358:  int count = atomic_read(&mbochs_avail_mbytes) / type->mbytes;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1433: {",
      "1434:  int ret = 0;",
      "1436:  ret = alloc_chrdev_region(&mbochs_devt, 0, MINORMASK + 1, MBOCHS_NAME);",
      "1437:  if (ret < 0) {",
      "1438:   pr_err(\"Error: failed to register mbochs_dev, err: %d\\n\", ret);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:  atomic_set(&mbochs_avail_mbytes, max_mbytes);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9169cff168ff262b4b78597f542e23843d0c494a",
      "candidate_info": {
        "commit_hash": "9169cff168ff262b4b78597f542e23843d0c494a",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/9169cff168ff262b4b78597f542e23843d0c494a",
        "files": [
          "drivers/gpu/drm/i915/gvt/gvt.c",
          "drivers/s390/cio/vfio_ccw_ops.c",
          "drivers/s390/crypto/vfio_ap_ops.c",
          "drivers/vfio/mdev/mdev_core.c",
          "drivers/vfio/mdev/mdev_sysfs.c",
          "include/linux/mdev.h",
          "samples/vfio-mdev/mbochs.c",
          "samples/vfio-mdev/mdpy.c",
          "samples/vfio-mdev/mtty.c"
        ],
        "message": "vfio/mdev: Correct the function signatures for the mdev_type_attributes\n\nThe driver core standard is to pass in the properly typed object, the\nproperly typed attribute and the buffer data. It stems from the root\nkobject method:\n\n  ssize_t (*show)(struct kobject *kobj, struct kobj_attribute *attr,..)\n\nEach subclass of kobject should provide their own function with the same\nsignature but more specific types, eg struct device uses:\n\n  ssize_t (*show)(struct device *dev, struct device_attribute *attr,..)\n\nIn this case the existing signature is:\n\n  ssize_t (*show)(struct kobject *kobj, struct device *dev,..)\n\nWhere kobj is a 'struct mdev_type *' and dev is 'mdev_type->parent->dev'.\n\nChange the mdev_type related sysfs attribute functions to:\n\n  ssize_t (*show)(struct mdev_type *mtype, struct mdev_type_attribute *attr,..)\n\nIn order to restore type safety and match the driver core standard\n\nThere are no current users of 'attr', but if it is ever needed it would be\nhard to add in retroactively, so do it now.\n\nReviewed-by: Kevin Tian <kevin.tian@intel.com>\nReviewed-by: Cornelia Huck <cohuck@redhat.com>\nReviewed-by: Christoph Hellwig <hch@lst.de>\nSigned-off-by: Jason Gunthorpe <jgg@nvidia.com>\nMessage-Id: <18-v2-d36939638fc6+d54-vfio2_jgg@nvidia.com>\nSigned-off-by: Alex Williamson <alex.williamson@redhat.com>",
        "before_after_code_files": [
          "drivers/gpu/drm/i915/gvt/gvt.c||drivers/gpu/drm/i915/gvt/gvt.c",
          "drivers/s390/cio/vfio_ccw_ops.c||drivers/s390/cio/vfio_ccw_ops.c",
          "drivers/s390/crypto/vfio_ap_ops.c||drivers/s390/crypto/vfio_ap_ops.c",
          "drivers/vfio/mdev/mdev_core.c||drivers/vfio/mdev/mdev_core.c",
          "drivers/vfio/mdev/mdev_sysfs.c||drivers/vfio/mdev/mdev_sysfs.c",
          "include/linux/mdev.h||include/linux/mdev.h",
          "samples/vfio-mdev/mbochs.c||samples/vfio-mdev/mbochs.c",
          "samples/vfio-mdev/mdpy.c||samples/vfio-mdev/mdpy.c",
          "samples/vfio-mdev/mtty.c||samples/vfio-mdev/mtty.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "samples/vfio-mdev/mbochs.c||samples/vfio-mdev/mbochs.c"
          ],
          "candidate": [
            "samples/vfio-mdev/mbochs.c||samples/vfio-mdev/mbochs.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/gpu/drm/i915/gvt/gvt.c||drivers/gpu/drm/i915/gvt/gvt.c": [
          "File: drivers/gpu/drm/i915/gvt/gvt.c -> drivers/gpu/drm/i915/gvt/gvt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:  return &gvt->types[type_group_id];",
          "55: }",
          "59: {",
          "60:  struct intel_vgpu_type *type;",
          "61:  unsigned int num = 0;",
          "65:  if (!type)",
          "66:   num = 0;",
          "67:  else",
          "",
          "[Removed Lines]",
          "57: static ssize_t available_instances_show(struct kobject *kobj,",
          "58:      struct device *dev, char *buf)",
          "62:  void *gvt = kdev_to_i915(dev)->gvt;",
          "64:  type = intel_gvt_find_vgpu_type(gvt, mtype_get_type_group_id(kobj));",
          "",
          "[Added Lines]",
          "57: static ssize_t available_instances_show(struct mdev_type *mtype,",
          "58:      struct mdev_type_attribute *attr,",
          "59:      char *buf)",
          "63:  void *gvt = kdev_to_i915(mtype_get_parent_dev(mtype))->gvt;",
          "65:  type = intel_gvt_find_vgpu_type(gvt, mtype_get_type_group_id(mtype));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:  return sprintf(buf, \"%u\\n\", num);",
          "71: }",
          "75: {",
          "76:  return sprintf(buf, \"%s\\n\", VFIO_DEVICE_API_PCI_STRING);",
          "77: }",
          "81: {",
          "82:  struct intel_vgpu_type *type;",
          "86:  if (!type)",
          "87:   return 0;",
          "",
          "[Removed Lines]",
          "73: static ssize_t device_api_show(struct kobject *kobj, struct device *dev,",
          "74:   char *buf)",
          "79: static ssize_t description_show(struct kobject *kobj, struct device *dev,",
          "80:   char *buf)",
          "83:  void *gvt = kdev_to_i915(dev)->gvt;",
          "85:  type = intel_gvt_find_vgpu_type(gvt, mtype_get_type_group_id(kobj));",
          "",
          "[Added Lines]",
          "74: static ssize_t device_api_show(struct mdev_type *mtype,",
          "75:           struct mdev_type_attribute *attr, char *buf)",
          "80: static ssize_t description_show(struct mdev_type *mtype,",
          "81:     struct mdev_type_attribute *attr, char *buf)",
          "84:  void *gvt = kdev_to_i915(mtype_get_parent_dev(mtype))->gvt;",
          "86:  type = intel_gvt_find_vgpu_type(gvt, mtype_get_type_group_id(mtype));",
          "",
          "---------------"
        ],
        "drivers/s390/cio/vfio_ccw_ops.c||drivers/s390/cio/vfio_ccw_ops.c": [
          "File: drivers/s390/cio/vfio_ccw_ops.c -> drivers/s390/cio/vfio_ccw_ops.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:  return NOTIFY_DONE;",
          "72: }",
          "75: {",
          "76:  return sprintf(buf, \"I/O subchannel (Non-QDIO)\\n\");",
          "77: }",
          "78: static MDEV_TYPE_ATTR_RO(name);",
          "82: {",
          "83:  return sprintf(buf, \"%s\\n\", VFIO_DEVICE_API_CCW_STRING);",
          "84: }",
          "85: static MDEV_TYPE_ATTR_RO(device_api);",
          "89: {",
          "92:  return sprintf(buf, \"%d\\n\", atomic_read(&private->avail));",
          "93: }",
          "",
          "[Removed Lines]",
          "74: static ssize_t name_show(struct kobject *kobj, struct device *dev, char *buf)",
          "80: static ssize_t device_api_show(struct kobject *kobj, struct device *dev,",
          "81:           char *buf)",
          "87: static ssize_t available_instances_show(struct kobject *kobj,",
          "88:      struct device *dev, char *buf)",
          "90:  struct vfio_ccw_private *private = dev_get_drvdata(dev);",
          "",
          "[Added Lines]",
          "74: static ssize_t name_show(struct mdev_type *mtype,",
          "75:     struct mdev_type_attribute *attr, char *buf)",
          "81: static ssize_t device_api_show(struct mdev_type *mtype,",
          "82:           struct mdev_type_attribute *attr, char *buf)",
          "88: static ssize_t available_instances_show(struct mdev_type *mtype,",
          "89:      struct mdev_type_attribute *attr,",
          "90:      char *buf)",
          "92:  struct vfio_ccw_private *private =",
          "93:   dev_get_drvdata(mtype_get_parent_dev(mtype));",
          "",
          "---------------"
        ],
        "drivers/s390/crypto/vfio_ap_ops.c||drivers/s390/crypto/vfio_ap_ops.c": [
          "File: drivers/s390/crypto/vfio_ap_ops.c -> drivers/s390/crypto/vfio_ap_ops.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "366:  return 0;",
          "367: }",
          "370: {",
          "371:  return sprintf(buf, \"%s\\n\", VFIO_AP_MDEV_NAME_HWVIRT);",
          "372: }",
          "374: static MDEV_TYPE_ATTR_RO(name);",
          "378: {",
          "379:  return sprintf(buf, \"%d\\n\",",
          "380:          atomic_read(&matrix_dev->available_instances));",
          "",
          "[Removed Lines]",
          "369: static ssize_t name_show(struct kobject *kobj, struct device *dev, char *buf)",
          "376: static ssize_t available_instances_show(struct kobject *kobj,",
          "377:      struct device *dev, char *buf)",
          "",
          "[Added Lines]",
          "369: static ssize_t name_show(struct mdev_type *mtype,",
          "370:     struct mdev_type_attribute *attr, char *buf)",
          "377: static ssize_t available_instances_show(struct mdev_type *mtype,",
          "378:      struct mdev_type_attribute *attr,",
          "379:      char *buf)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "383: static MDEV_TYPE_ATTR_RO(available_instances);",
          "387: {",
          "388:  return sprintf(buf, \"%s\\n\", VFIO_DEVICE_API_AP_STRING);",
          "389: }",
          "",
          "[Removed Lines]",
          "385: static ssize_t device_api_show(struct kobject *kobj, struct device *dev,",
          "386:           char *buf)",
          "",
          "[Added Lines]",
          "387: static ssize_t device_api_show(struct mdev_type *mtype,",
          "388:           struct mdev_type_attribute *attr, char *buf)",
          "",
          "---------------"
        ],
        "drivers/vfio/mdev/mdev_core.c||drivers/vfio/mdev/mdev_core.c": [
          "File: drivers/vfio/mdev/mdev_core.c -> drivers/vfio/mdev/mdev_core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: {",
          "53: }",
          "54: EXPORT_SYMBOL(mtype_get_type_group_id);",
          "57: static struct mdev_parent *__find_parent_device(struct device *dev)",
          "58: {",
          "",
          "[Removed Lines]",
          "50: unsigned int mtype_get_type_group_id(struct kobject *mtype_kobj)",
          "52:  return container_of(mtype_kobj, struct mdev_type, kobj)->type_group_id;",
          "",
          "[Added Lines]",
          "50: unsigned int mtype_get_type_group_id(struct mdev_type *mtype)",
          "52:  return mtype->type_group_id;",
          "60: struct device *mtype_get_parent_dev(struct mdev_type *mtype)",
          "61: {",
          "62:  return mtype->parent->dev;",
          "63: }",
          "64: EXPORT_SYMBOL(mtype_get_parent_dev);",
          "",
          "---------------"
        ],
        "drivers/vfio/mdev/mdev_sysfs.c||drivers/vfio/mdev/mdev_sysfs.c": [
          "File: drivers/vfio/mdev/mdev_sysfs.c -> drivers/vfio/mdev/mdev_sysfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:  ssize_t ret = -EIO;",
          "28:  if (attr->show)",
          "30:  return ret;",
          "31: }",
          "",
          "[Removed Lines]",
          "29:   ret = attr->show(kobj, type->parent->dev, buf);",
          "",
          "[Added Lines]",
          "29:   ret = attr->show(type, attr, buf);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:  ssize_t ret = -EIO;",
          "41:  if (attr->store)",
          "43:  return ret;",
          "44: }",
          "",
          "[Removed Lines]",
          "42:   ret = attr->store(&type->kobj, type->parent->dev, buf, count);",
          "",
          "[Added Lines]",
          "42:   ret = attr->store(type, attr, buf, count);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "48:  .store = mdev_type_attr_store,",
          "49: };",
          "53: {",
          "54:  char *str;",
          "55:  guid_t uuid;",
          "",
          "[Removed Lines]",
          "51: static ssize_t create_store(struct kobject *kobj, struct device *dev,",
          "52:        const char *buf, size_t count)",
          "",
          "[Added Lines]",
          "51: static ssize_t create_store(struct mdev_type *mtype,",
          "52:        struct mdev_type_attribute *attr, const char *buf,",
          "53:        size_t count)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "67:  if (ret)",
          "68:   return ret;",
          "71:  if (ret)",
          "72:   return ret;",
          "",
          "[Removed Lines]",
          "70:  ret = mdev_device_create(to_mdev_type(kobj), &uuid);",
          "",
          "[Added Lines]",
          "71:  ret = mdev_device_create(mtype, &uuid);",
          "",
          "---------------"
        ],
        "include/linux/mdev.h||include/linux/mdev.h": [
          "File: include/linux/mdev.h -> include/linux/mdev.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: }",
          "49: unsigned int mdev_get_type_group_id(struct mdev_device *mdev);",
          "",
          "[Removed Lines]",
          "50: unsigned int mtype_get_type_group_id(struct kobject *mtype_kobj);",
          "",
          "[Added Lines]",
          "50: unsigned int mtype_get_type_group_id(struct mdev_type *mtype);",
          "51: struct device *mtype_get_parent_dev(struct mdev_type *mtype);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124: struct mdev_type_attribute {",
          "125:  struct attribute attr;",
          "129: };",
          "131: #define MDEV_TYPE_ATTR(_name, _mode, _show, _store)  \\",
          "",
          "[Removed Lines]",
          "126:  ssize_t (*show)(struct kobject *kobj, struct device *dev, char *buf);",
          "127:  ssize_t (*store)(struct kobject *kobj, struct device *dev,",
          "128:     const char *buf, size_t count);",
          "",
          "[Added Lines]",
          "127:  ssize_t (*show)(struct mdev_type *mtype,",
          "128:    struct mdev_type_attribute *attr, char *buf);",
          "129:  ssize_t (*store)(struct mdev_type *mtype,",
          "130:     struct mdev_type_attribute *attr, const char *buf,",
          "131:     size_t count);",
          "",
          "---------------"
        ],
        "samples/vfio-mdev/mbochs.c||samples/vfio-mdev/mbochs.c": [
          "File: samples/vfio-mdev/mbochs.c -> samples/vfio-mdev/mbochs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1330:  NULL,",
          "1331: };",
          "1335: {",
          "1337: }",
          "1338: static MDEV_TYPE_ATTR_RO(name);",
          "1342: {",
          "1343:  const struct mbochs_type *type =",
          "1346:  return sprintf(buf, \"virtual display, %d MB video memory\\n\",",
          "1347:          type ? type->mbytes  : 0);",
          "1348: }",
          "1349: static MDEV_TYPE_ATTR_RO(description);",
          "1353: {",
          "1354:  const struct mbochs_type *type =",
          "1356:  int count = (max_mbytes - mbochs_used_mbytes) / type->mbytes;",
          "1358:  return sprintf(buf, \"%d\\n\", count);",
          "1359: }",
          "1360: static MDEV_TYPE_ATTR_RO(available_instances);",
          "1364: {",
          "1365:  return sprintf(buf, \"%s\\n\", VFIO_DEVICE_API_PCI_STRING);",
          "1366: }",
          "",
          "[Removed Lines]",
          "1333: static ssize_t",
          "1334: name_show(struct kobject *kobj, struct device *dev, char *buf)",
          "1336:  return sprintf(buf, \"%s\\n\", kobj->name);",
          "1340: static ssize_t",
          "1341: description_show(struct kobject *kobj, struct device *dev, char *buf)",
          "1344:   &mbochs_types[mtype_get_type_group_id(kobj)];",
          "1351: static ssize_t",
          "1352: available_instances_show(struct kobject *kobj, struct device *dev, char *buf)",
          "1355:   &mbochs_types[mtype_get_type_group_id(kobj)];",
          "1362: static ssize_t device_api_show(struct kobject *kobj, struct device *dev,",
          "1363:           char *buf)",
          "",
          "[Added Lines]",
          "1333: static ssize_t name_show(struct mdev_type *mtype,",
          "1334:     struct mdev_type_attribute *attr, char *buf)",
          "1336:  const struct mbochs_type *type =",
          "1337:   &mbochs_types[mtype_get_type_group_id(mtype)];",
          "1339:  return sprintf(buf, \"%s\\n\", type->name);",
          "1343: static ssize_t description_show(struct mdev_type *mtype,",
          "1344:     struct mdev_type_attribute *attr, char *buf)",
          "1347:   &mbochs_types[mtype_get_type_group_id(mtype)];",
          "1354: static ssize_t available_instances_show(struct mdev_type *mtype,",
          "1355:      struct mdev_type_attribute *attr,",
          "1356:      char *buf)",
          "1359:   &mbochs_types[mtype_get_type_group_id(mtype)];",
          "1366: static ssize_t device_api_show(struct mdev_type *mtype,",
          "1367:           struct mdev_type_attribute *attr, char *buf)",
          "",
          "---------------"
        ],
        "samples/vfio-mdev/mdpy.c||samples/vfio-mdev/mdpy.c": [
          "File: samples/vfio-mdev/mdpy.c -> samples/vfio-mdev/mdpy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "652:  NULL,",
          "653: };",
          "657: {",
          "659: }",
          "660: static MDEV_TYPE_ATTR_RO(name);",
          "664: {",
          "665:  const struct mdpy_type *type =",
          "668:  return sprintf(buf, \"virtual display, %dx%d framebuffer\\n\",",
          "669:          type ? type->width  : 0,",
          "",
          "[Removed Lines]",
          "655: static ssize_t",
          "656: name_show(struct kobject *kobj, struct device *dev, char *buf)",
          "658:  return sprintf(buf, \"%s\\n\", kobj->name);",
          "662: static ssize_t",
          "663: description_show(struct kobject *kobj, struct device *dev, char *buf)",
          "666:   &mdpy_types[mtype_get_type_group_id(kobj)];",
          "",
          "[Added Lines]",
          "655: static ssize_t name_show(struct mdev_type *mtype,",
          "656:     struct mdev_type_attribute *attr, char *buf)",
          "658:  const struct mdpy_type *type =",
          "659:   &mdpy_types[mtype_get_type_group_id(mtype)];",
          "661:  return sprintf(buf, \"%s\\n\", type->name);",
          "665: static ssize_t description_show(struct mdev_type *mtype,",
          "666:     struct mdev_type_attribute *attr, char *buf)",
          "669:   &mdpy_types[mtype_get_type_group_id(mtype)];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "671: }",
          "672: static MDEV_TYPE_ATTR_RO(description);",
          "676: {",
          "677:  return sprintf(buf, \"%d\\n\", max_devices - mdpy_count);",
          "678: }",
          "679: static MDEV_TYPE_ATTR_RO(available_instances);",
          "683: {",
          "684:  return sprintf(buf, \"%s\\n\", VFIO_DEVICE_API_PCI_STRING);",
          "685: }",
          "",
          "[Removed Lines]",
          "674: static ssize_t",
          "675: available_instances_show(struct kobject *kobj, struct device *dev, char *buf)",
          "681: static ssize_t device_api_show(struct kobject *kobj, struct device *dev,",
          "682:           char *buf)",
          "",
          "[Added Lines]",
          "677: static ssize_t available_instances_show(struct mdev_type *mtype,",
          "678:      struct mdev_type_attribute *attr,",
          "679:      char *buf)",
          "685: static ssize_t device_api_show(struct mdev_type *mtype,",
          "686:           struct mdev_type_attribute *attr, char *buf)",
          "",
          "---------------"
        ],
        "samples/vfio-mdev/mtty.c||samples/vfio-mdev/mtty.c": [
          "File: samples/vfio-mdev/mtty.c -> samples/vfio-mdev/mtty.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1292:  NULL,",
          "1293: };",
          "1297: {",
          "1298:  static const char *name_str[2] = { \"Single port serial\",",
          "1299:         \"Dual port serial\" };",
          "1301:  return sysfs_emit(buf, \"%s\\n\",",
          "1303: }",
          "1305: static MDEV_TYPE_ATTR_RO(name);",
          "1309: {",
          "1310:  struct mdev_state *mds;",
          "1312:  int used = 0;",
          "1314:  list_for_each_entry(mds, &mdev_devices_list, next)",
          "",
          "[Removed Lines]",
          "1295: static ssize_t",
          "1296: name_show(struct kobject *kobj, struct device *dev, char *buf)",
          "1302:      name_str[mtype_get_type_group_id(kobj)]);",
          "1307: static ssize_t",
          "1308: available_instances_show(struct kobject *kobj, struct device *dev, char *buf)",
          "1311:  unsigned int ports = mtype_get_type_group_id(kobj) + 1;",
          "",
          "[Added Lines]",
          "1295: static ssize_t name_show(struct mdev_type *mtype,",
          "1296:     struct mdev_type_attribute *attr, char *buf)",
          "1302:      name_str[mtype_get_type_group_id(mtype)]);",
          "1307: static ssize_t available_instances_show(struct mdev_type *mtype,",
          "1308:      struct mdev_type_attribute *attr,",
          "1309:      char *buf)",
          "1312:  unsigned int ports = mtype_get_type_group_id(mtype) + 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1320: static MDEV_TYPE_ATTR_RO(available_instances);",
          "1325: {",
          "1326:  return sprintf(buf, \"%s\\n\", VFIO_DEVICE_API_PCI_STRING);",
          "1327: }",
          "",
          "[Removed Lines]",
          "1323: static ssize_t device_api_show(struct kobject *kobj, struct device *dev,",
          "1324:           char *buf)",
          "",
          "[Added Lines]",
          "1323: static ssize_t device_api_show(struct mdev_type *mtype,",
          "1324:           struct mdev_type_attribute *attr, char *buf)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "681c1615f8914451cfd432ad30e2f307b6490542",
      "candidate_info": {
        "commit_hash": "681c1615f8914451cfd432ad30e2f307b6490542",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/681c1615f8914451cfd432ad30e2f307b6490542",
        "files": [
          "samples/vfio-mdev/mbochs.c"
        ],
        "message": "vfio/mbochs: Convert to use vfio_register_group_dev()\n\nThis is straightforward conversion, the mdev_state is actually serving as\nthe vfio_device and we can replace all the mdev_get_drvdata()'s and the\nwonky dead code with a simple container_of().\n\nReviewed-by: Christoph Hellwig <hch@lst.de>\nSigned-off-by: Jason Gunthorpe <jgg@nvidia.com>\nSigned-off-by: Christoph Hellwig <hch@lst.de>\nReviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>\nLink: https://lore.kernel.org/r/20210617142218.1877096-11-hch@lst.de\nSigned-off-by: Alex Williamson <alex.williamson@redhat.com>",
        "before_after_code_files": [
          "samples/vfio-mdev/mbochs.c||samples/vfio-mdev/mbochs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "samples/vfio-mdev/mbochs.c||samples/vfio-mdev/mbochs.c"
          ],
          "candidate": [
            "samples/vfio-mdev/mbochs.c||samples/vfio-mdev/mbochs.c"
          ]
        }
      },
      "candidate_diff": {
        "samples/vfio-mdev/mbochs.c||samples/vfio-mdev/mbochs.c": [
          "File: samples/vfio-mdev/mbochs.c -> samples/vfio-mdev/mbochs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "130: static struct cdev mbochs_cdev;",
          "131: static struct device mbochs_dev;",
          "132: static int  mbochs_used_mbytes;",
          "134: struct vfio_region_info_ext {",
          "135:  struct vfio_region_info          base;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133: static const struct vfio_device_ops mbochs_dev_ops;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "162: struct mdev_state {",
          "163:  u8 *vconfig;",
          "164:  u64 bar_mask[3];",
          "165:  u32 memory_bar_mask;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164:  struct vfio_device vdev;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "425:   memcpy(buf, mdev_state->edid_blob + offset, count);",
          "426: }",
          "430: {",
          "433:  struct page *pg;",
          "434:  loff_t poff;",
          "435:  char *map;",
          "",
          "[Removed Lines]",
          "428: static ssize_t mdev_access(struct mdev_device *mdev, char *buf, size_t count,",
          "429:       loff_t pos, bool is_write)",
          "431:  struct mdev_state *mdev_state = mdev_get_drvdata(mdev);",
          "432:  struct device *dev = mdev_dev(mdev);",
          "",
          "[Added Lines]",
          "430: static ssize_t mdev_access(struct mdev_state *mdev_state, char *buf,",
          "431:       size_t count, loff_t pos, bool is_write)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "478:   put_page(pg);",
          "480:  } else {",
          "482:    __func__, is_write ? \"WR\" : \"RD\", pos);",
          "483:   ret = -1;",
          "484:   goto accessfailed;",
          "",
          "[Removed Lines]",
          "481:   dev_dbg(dev, \"%s: %s @0x%llx (unhandled)\\n\",",
          "",
          "[Added Lines]",
          "481:   dev_dbg(mdev_state->vdev.dev, \"%s: %s @0x%llx (unhandled)\\n\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "493:  return ret;",
          "494: }",
          "497: {",
          "499:  u32 size64k = mdev_state->memsize / (64 * 1024);",
          "500:  int i;",
          "",
          "[Removed Lines]",
          "496: static int mbochs_reset(struct mdev_device *mdev)",
          "498:  struct mdev_state *mdev_state = mdev_get_drvdata(mdev);",
          "",
          "[Added Lines]",
          "496: static int mbochs_reset(struct mdev_state *mdev_state)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "506:  return 0;",
          "507: }",
          "510: {",
          "511:  const struct mbochs_type *type =",
          "512:   &mbochs_types[mdev_get_type_group_id(mdev)];",
          "513:  struct device *dev = mdev_dev(mdev);",
          "514:  struct mdev_state *mdev_state;",
          "516:  if (type->mbytes + mbochs_used_mbytes > max_mbytes)",
          "517:   return -ENOMEM;",
          "",
          "[Removed Lines]",
          "509: static int mbochs_create(struct mdev_device *mdev)",
          "",
          "[Added Lines]",
          "508: static int mbochs_probe(struct mdev_device *mdev)",
          "514:  int ret = -ENOMEM;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "519:  mdev_state = kzalloc(sizeof(struct mdev_state), GFP_KERNEL);",
          "520:  if (mdev_state == NULL)",
          "521:   return -ENOMEM;",
          "523:  mdev_state->vconfig = kzalloc(MBOCHS_CONFIG_SPACE_SIZE, GFP_KERNEL);",
          "524:  if (mdev_state->vconfig == NULL)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "522:  vfio_init_group_dev(&mdev_state->vdev, &mdev->dev, &mbochs_dev_ops);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "538:  mutex_init(&mdev_state->ops_lock);",
          "539:  mdev_state->mdev = mdev;",
          "541:  INIT_LIST_HEAD(&mdev_state->dmabufs);",
          "542:  mdev_state->next_id = 1;",
          "",
          "[Removed Lines]",
          "540:  mdev_set_drvdata(mdev, mdev_state);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "547:  mdev_state->edid_regs.edid_offset = MBOCHS_EDID_BLOB_OFFSET;",
          "548:  mdev_state->edid_regs.edid_max_size = sizeof(mdev_state->edid_blob);",
          "549:  mbochs_create_config_space(mdev_state);",
          "552:  mbochs_used_mbytes += type->mbytes;",
          "553:  return 0;",
          "555: err_mem:",
          "556:  kfree(mdev_state->vconfig);",
          "557:  kfree(mdev_state);",
          "559: }",
          "562: {",
          "565:  mbochs_used_mbytes -= mdev_state->type->mbytes;",
          "567:  kfree(mdev_state->pages);",
          "568:  kfree(mdev_state->vconfig);",
          "569:  kfree(mdev_state);",
          "571: }",
          "574:       size_t count, loff_t *ppos)",
          "575: {",
          "576:  unsigned int done = 0;",
          "577:  int ret;",
          "",
          "[Removed Lines]",
          "550:  mbochs_reset(mdev);",
          "558:  return -ENOMEM;",
          "561: static int mbochs_remove(struct mdev_device *mdev)",
          "563:  struct mdev_state *mdev_state = mdev_get_drvdata(mdev);",
          "566:  mdev_set_drvdata(mdev, NULL);",
          "570:  return 0;",
          "573: static ssize_t mbochs_read(struct mdev_device *mdev, char __user *buf,",
          "",
          "[Added Lines]",
          "550:  mbochs_reset(mdev_state);",
          "554:  ret = vfio_register_group_dev(&mdev_state->vdev);",
          "555:  if (ret)",
          "556:   goto err_mem;",
          "557:  dev_set_drvdata(&mdev->dev, mdev_state);",
          "563:  return ret;",
          "566: static void mbochs_remove(struct mdev_device *mdev)",
          "568:  struct mdev_state *mdev_state = dev_get_drvdata(&mdev->dev);",
          "571:  vfio_unregister_group_dev(&mdev_state->vdev);",
          "577: static ssize_t mbochs_read(struct vfio_device *vdev, char __user *buf,",
          "580:  struct mdev_state *mdev_state =",
          "581:   container_of(vdev, struct mdev_state, vdev);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "582:   if (count >= 4 && !(*ppos % 4)) {",
          "583:    u32 val;",
          "587:    if (ret <= 0)",
          "588:     goto read_err;",
          "",
          "[Removed Lines]",
          "585:    ret =  mdev_access(mdev, (char *)&val, sizeof(val),",
          "",
          "[Added Lines]",
          "591:    ret =  mdev_access(mdev_state, (char *)&val, sizeof(val),",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "594:   } else if (count >= 2 && !(*ppos % 2)) {",
          "595:    u16 val;",
          "599:    if (ret <= 0)",
          "600:     goto read_err;",
          "",
          "[Removed Lines]",
          "597:    ret = mdev_access(mdev, (char *)&val, sizeof(val),",
          "",
          "[Added Lines]",
          "603:    ret = mdev_access(mdev_state, (char *)&val, sizeof(val),",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "606:   } else {",
          "607:    u8 val;",
          "611:    if (ret <= 0)",
          "612:     goto read_err;",
          "",
          "[Removed Lines]",
          "609:    ret = mdev_access(mdev, (char *)&val, sizeof(val),",
          "",
          "[Added Lines]",
          "615:    ret = mdev_access(mdev_state, (char *)&val, sizeof(val),",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "629:  return -EFAULT;",
          "630: }",
          "633:        size_t count, loff_t *ppos)",
          "634: {",
          "635:  unsigned int done = 0;",
          "636:  int ret;",
          "",
          "[Removed Lines]",
          "632: static ssize_t mbochs_write(struct mdev_device *mdev, const char __user *buf,",
          "",
          "[Added Lines]",
          "638: static ssize_t mbochs_write(struct vfio_device *vdev, const char __user *buf,",
          "641:  struct mdev_state *mdev_state =",
          "642:   container_of(vdev, struct mdev_state, vdev);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "644:    if (copy_from_user(&val, buf, sizeof(val)))",
          "645:     goto write_err;",
          "649:    if (ret <= 0)",
          "650:     goto write_err;",
          "",
          "[Removed Lines]",
          "647:    ret = mdev_access(mdev, (char *)&val, sizeof(val),",
          "",
          "[Added Lines]",
          "655:    ret = mdev_access(mdev_state, (char *)&val, sizeof(val),",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "656:    if (copy_from_user(&val, buf, sizeof(val)))",
          "657:     goto write_err;",
          "661:    if (ret <= 0)",
          "662:     goto write_err;",
          "",
          "[Removed Lines]",
          "659:    ret = mdev_access(mdev, (char *)&val, sizeof(val),",
          "",
          "[Added Lines]",
          "667:    ret = mdev_access(mdev_state, (char *)&val, sizeof(val),",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "668:    if (copy_from_user(&val, buf, sizeof(val)))",
          "669:     goto write_err;",
          "673:    if (ret <= 0)",
          "674:     goto write_err;",
          "",
          "[Removed Lines]",
          "671:    ret = mdev_access(mdev, (char *)&val, sizeof(val),",
          "",
          "[Added Lines]",
          "679:    ret = mdev_access(mdev_state, (char *)&val, sizeof(val),",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "754:  .fault = mbochs_region_vm_fault,",
          "755: };",
          "758: {",
          "761:  if (vma->vm_pgoff != MBOCHS_MEMORY_BAR_OFFSET >> PAGE_SHIFT)",
          "762:   return -EINVAL;",
          "",
          "[Removed Lines]",
          "757: static int mbochs_mmap(struct mdev_device *mdev, struct vm_area_struct *vma)",
          "759:  struct mdev_state *mdev_state = mdev_get_drvdata(mdev);",
          "",
          "[Added Lines]",
          "765: static int mbochs_mmap(struct vfio_device *vdev, struct vm_area_struct *vma)",
          "767:  struct mdev_state *mdev_state =",
          "768:   container_of(vdev, struct mdev_state, vdev);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "963: static int mbochs_dmabuf_export(struct mbochs_dmabuf *dmabuf)",
          "964: {",
          "965:  struct mdev_state *mdev_state = dmabuf->mdev_state;",
          "967:  DEFINE_DMA_BUF_EXPORT_INFO(exp_info);",
          "968:  struct dma_buf *buf;",
          "",
          "[Removed Lines]",
          "966:  struct device *dev = mdev_dev(mdev_state->mdev);",
          "",
          "[Added Lines]",
          "975:  struct device *dev = mdev_state->vdev.dev;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "991:  return 0;",
          "992: }",
          "995:       struct vfio_region_info_ext *ext)",
          "996: {",
          "997:  struct vfio_region_info *region_info = &ext->base;",
          "1004:  if (region_info->index >= MBOCHS_NUM_REGIONS)",
          "1005:   return -EINVAL;",
          "",
          "[Removed Lines]",
          "994: static int mbochs_get_region_info(struct mdev_device *mdev,",
          "998:  struct mdev_state *mdev_state;",
          "1000:  mdev_state = mdev_get_drvdata(mdev);",
          "1001:  if (!mdev_state)",
          "1002:   return -EINVAL;",
          "",
          "[Added Lines]",
          "1003: static int mbochs_get_region_info(struct mdev_state *mdev_state,",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1047:  return 0;",
          "1048: }",
          "1052: {",
          "1053:  irq_info->count = 0;",
          "1054:  return 0;",
          "1055: }",
          "1059: {",
          "1060:  dev_info->flags = VFIO_DEVICE_FLAGS_PCI;",
          "1061:  dev_info->num_regions = MBOCHS_NUM_REGIONS;",
          "",
          "[Removed Lines]",
          "1050: static int mbochs_get_irq_info(struct mdev_device *mdev,",
          "1051:           struct vfio_irq_info *irq_info)",
          "1057: static int mbochs_get_device_info(struct mdev_device *mdev,",
          "1058:       struct vfio_device_info *dev_info)",
          "",
          "[Added Lines]",
          "1054: static int mbochs_get_irq_info(struct vfio_irq_info *irq_info)",
          "1060: static int mbochs_get_device_info(struct vfio_device_info *dev_info)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1063:  return 0;",
          "1064: }",
          "1067:       struct vfio_device_gfx_plane_info *plane)",
          "1068: {",
          "1071:  struct mbochs_dmabuf *dmabuf;",
          "1072:  struct mbochs_mode mode;",
          "1073:  int ret;",
          "",
          "[Removed Lines]",
          "1066: static int mbochs_query_gfx_plane(struct mdev_device *mdev,",
          "1069:  struct mdev_state *mdev_state = mdev_get_drvdata(mdev);",
          "1070:  struct device *dev = mdev_dev(mdev);",
          "",
          "[Added Lines]",
          "1068: static int mbochs_query_gfx_plane(struct mdev_state *mdev_state,",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1121: done:",
          "1122:  if (plane->drm_plane_type == DRM_PLANE_TYPE_PRIMARY &&",
          "1123:      mdev_state->active_id != plane->dmabuf_id) {",
          "1126:   mdev_state->active_id = plane->dmabuf_id;",
          "1127:  }",
          "1128:  mutex_unlock(&mdev_state->ops_lock);",
          "1129:  return 0;",
          "1130: }",
          "1134: {",
          "1136:  struct mbochs_dmabuf *dmabuf;",
          "1138:  mutex_lock(&mdev_state->ops_lock);",
          "",
          "[Removed Lines]",
          "1124:   dev_dbg(dev, \"%s: primary: %d => %d\\n\", __func__,",
          "1125:    mdev_state->active_id, plane->dmabuf_id);",
          "1132: static int mbochs_get_gfx_dmabuf(struct mdev_device *mdev,",
          "1133:      u32 id)",
          "1135:  struct mdev_state *mdev_state = mdev_get_drvdata(mdev);",
          "",
          "[Added Lines]",
          "1124:   dev_dbg(mdev_state->vdev.dev, \"%s: primary: %d => %d\\n\",",
          "1125:    __func__, mdev_state->active_id, plane->dmabuf_id);",
          "1132: static int mbochs_get_gfx_dmabuf(struct mdev_state *mdev_state, u32 id)",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1154:  return dma_buf_fd(dmabuf->buf, 0);",
          "1155: }",
          "1159: {",
          "1160:  int ret = 0;",
          "1161:  unsigned long minsz, outsz;",
          "",
          "[Removed Lines]",
          "1157: static long mbochs_ioctl(struct mdev_device *mdev, unsigned int cmd,",
          "1158:    unsigned long arg)",
          "",
          "[Added Lines]",
          "1155: static long mbochs_ioctl(struct vfio_device *vdev, unsigned int cmd,",
          "1156:     unsigned long arg)",
          "1158:  struct mdev_state *mdev_state =",
          "1159:   container_of(vdev, struct mdev_state, vdev);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1173:   if (info.argsz < minsz)",
          "1174:    return -EINVAL;",
          "1177:   if (ret)",
          "1178:    return ret;",
          "",
          "[Removed Lines]",
          "1176:   ret = mbochs_get_device_info(mdev, &info);",
          "",
          "[Added Lines]",
          "1176:   ret = mbochs_get_device_info(&info);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1197:   if (outsz > sizeof(info))",
          "1198:    return -EINVAL;",
          "1201:   if (ret)",
          "1202:    return ret;",
          "",
          "[Removed Lines]",
          "1200:   ret = mbochs_get_region_info(mdev, &info);",
          "",
          "[Added Lines]",
          "1200:   ret = mbochs_get_region_info(mdev_state, &info);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1220:       (info.index >= VFIO_PCI_NUM_IRQS))",
          "1221:    return -EINVAL;",
          "1224:   if (ret)",
          "1225:    return ret;",
          "",
          "[Removed Lines]",
          "1223:   ret = mbochs_get_irq_info(mdev, &info);",
          "",
          "[Added Lines]",
          "1223:   ret = mbochs_get_irq_info(&info);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1243:   if (plane.argsz < minsz)",
          "1244:    return -EINVAL;",
          "1247:   if (ret)",
          "1248:    return ret;",
          "",
          "[Removed Lines]",
          "1246:   ret = mbochs_query_gfx_plane(mdev, &plane);",
          "",
          "[Added Lines]",
          "1246:   ret = mbochs_query_gfx_plane(mdev_state, &plane);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1260:   if (get_user(dmabuf_id, (__u32 __user *)arg))",
          "1261:    return -EFAULT;",
          "1264:  }",
          "1266:  case VFIO_DEVICE_SET_IRQS:",
          "1267:   return -EINVAL;",
          "1269:  case VFIO_DEVICE_RESET:",
          "1271:  }",
          "1272:  return -ENOTTY;",
          "1273: }",
          "1276: {",
          "1277:  if (!try_module_get(THIS_MODULE))",
          "1278:   return -ENODEV;",
          "",
          "[Removed Lines]",
          "1263:   return mbochs_get_gfx_dmabuf(mdev, dmabuf_id);",
          "1270:   return mbochs_reset(mdev);",
          "1275: static int mbochs_open(struct mdev_device *mdev)",
          "",
          "[Added Lines]",
          "1263:   return mbochs_get_gfx_dmabuf(mdev_state, dmabuf_id);",
          "1270:   return mbochs_reset(mdev_state);",
          "1275: static int mbochs_open(struct vfio_device *vdev)",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1280:  return 0;",
          "1281: }",
          "1284: {",
          "1286:  struct mbochs_dmabuf *dmabuf, *tmp;",
          "1288:  mutex_lock(&mdev_state->ops_lock);",
          "",
          "[Removed Lines]",
          "1283: static void mbochs_close(struct mdev_device *mdev)",
          "1285:  struct mdev_state *mdev_state = mdev_get_drvdata(mdev);",
          "",
          "[Added Lines]",
          "1283: static void mbochs_close(struct vfio_device *vdev)",
          "1285:  struct mdev_state *mdev_state =",
          "1286:   container_of(vdev, struct mdev_state, vdev);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1306: memory_show(struct device *dev, struct device_attribute *attr,",
          "1307:      char *buf)",
          "1308: {",
          "1312:  return sprintf(buf, \"%d MB\\n\", mdev_state->type->mbytes);",
          "1313: }",
          "",
          "[Removed Lines]",
          "1309:  struct mdev_device *mdev = mdev_from_dev(dev);",
          "1310:  struct mdev_state *mdev_state = mdev_get_drvdata(mdev);",
          "",
          "[Added Lines]",
          "1310:  struct mdev_state *mdev_state = dev_get_drvdata(dev);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1398:  NULL,",
          "1399: };",
          "1401: static const struct mdev_parent_ops mdev_fops = {",
          "1402:  .owner   = THIS_MODULE,",
          "1404:  .supported_type_groups = mdev_type_groups,",
          "1413: };",
          "1415: static const struct file_operations vd_fops = {",
          "",
          "[Removed Lines]",
          "1403:  .mdev_attr_groups = mdev_dev_groups,",
          "1405:  .create   = mbochs_create,",
          "1406:  .remove   = mbochs_remove,",
          "1407:  .open   = mbochs_open,",
          "1408:  .release  = mbochs_close,",
          "1409:  .read   = mbochs_read,",
          "1410:  .write   = mbochs_write,",
          "1411:  .ioctl   = mbochs_ioctl,",
          "1412:  .mmap   = mbochs_mmap,",
          "",
          "[Added Lines]",
          "1401: static const struct vfio_device_ops mbochs_dev_ops = {",
          "1402:  .open = mbochs_open,",
          "1403:  .release = mbochs_close,",
          "1404:  .read = mbochs_read,",
          "1405:  .write = mbochs_write,",
          "1406:  .ioctl = mbochs_ioctl,",
          "1407:  .mmap = mbochs_mmap,",
          "1408: };",
          "1410: static struct mdev_driver mbochs_driver = {",
          "1411:  .driver = {",
          "1412:   .name = \"mbochs\",",
          "1413:   .owner = THIS_MODULE,",
          "1414:   .mod_name = KBUILD_MODNAME,",
          "1415:   .dev_groups = mdev_dev_groups,",
          "1416:  },",
          "1417:  .probe = mbochs_probe,",
          "1418:  .remove = mbochs_remove,",
          "1419: };",
          "1423:  .device_driver  = &mbochs_driver,",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1434:  cdev_add(&mbochs_cdev, mbochs_devt, MINORMASK + 1);",
          "1435:  pr_info(\"%s: major %d\\n\", __func__, MAJOR(mbochs_devt));",
          "1437:  mbochs_class = class_create(THIS_MODULE, MBOCHS_CLASS_NAME);",
          "1438:  if (IS_ERR(mbochs_class)) {",
          "1439:   pr_err(\"Error: failed to register mbochs_dev class\\n\");",
          "1440:   ret = PTR_ERR(mbochs_class);",
          "1442:  }",
          "1443:  mbochs_dev.class = mbochs_class;",
          "1444:  mbochs_dev.release = mbochs_device_release;",
          "",
          "[Removed Lines]",
          "1441:   goto failed1;",
          "",
          "[Added Lines]",
          "1449:  ret = mdev_register_driver(&mbochs_driver);",
          "1450:  if (ret)",
          "1451:   goto err_cdev;",
          "1457:   goto err_driver;",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1447:  ret = device_register(&mbochs_dev);",
          "1448:  if (ret)",
          "1451:  ret = mdev_register_device(&mbochs_dev, &mdev_fops);",
          "1452:  if (ret)",
          "1455:  return 0;",
          "1458:  device_unregister(&mbochs_dev);",
          "1460:  class_destroy(mbochs_class);",
          "1462:  cdev_del(&mbochs_cdev);",
          "1463:  unregister_chrdev_region(mbochs_devt, MINORMASK + 1);",
          "1464:  return ret;",
          "",
          "[Removed Lines]",
          "1449:   goto failed2;",
          "1453:   goto failed3;",
          "1457: failed3:",
          "1459: failed2:",
          "1461: failed1:",
          "",
          "[Added Lines]",
          "1465:   goto err_class;",
          "1469:   goto err_device;",
          "1473: err_device:",
          "1475: err_class:",
          "1477: err_driver:",
          "1478:  mdev_unregister_driver(&mbochs_driver);",
          "1479: err_cdev:",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1470:  mdev_unregister_device(&mbochs_dev);",
          "1472:  device_unregister(&mbochs_dev);",
          "1473:  cdev_del(&mbochs_cdev);",
          "1474:  unregister_chrdev_region(mbochs_devt, MINORMASK + 1);",
          "1475:  class_destroy(mbochs_class);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1491:  mdev_unregister_driver(&mbochs_driver);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "698f99ed5e06946764c3be035ce9d62a2691e08c",
      "candidate_info": {
        "commit_hash": "698f99ed5e06946764c3be035ce9d62a2691e08c",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/698f99ed5e06946764c3be035ce9d62a2691e08c",
        "files": [
          "samples/vfio-mdev/mbochs.c",
          "samples/vfio-mdev/mdpy.c"
        ],
        "message": "vfio/mdev: remove unnecessary NULL check in mbochs_create()\n\nOriginally \"type\" could be NULL and these checks were required, but we\nrecently changed how \"type\" is assigned and that's no longer the case.\nNow \"type\" points to an element in the middle of a non-NULL array.\n\nRemoving the checks does not affect runtime at all, but it makes the\ncode a little bit simpler to read.\n\nFixes: 3d3a360e570616 (\"vfio/mbochs: Use mdev_get_type_group_id()\")\nSigned-off-by: Dan Carpenter <dan.carpenter@oracle.com>\nReviewed-by: Jason Gunthorpe <jgg@nvidia.com>\nMessage-Id: <20210429095327.GY1981@kadam>\nSigned-off-by: Alex Williamson <alex.williamson@redhat.com>",
        "before_after_code_files": [
          "samples/vfio-mdev/mbochs.c||samples/vfio-mdev/mbochs.c",
          "samples/vfio-mdev/mdpy.c||samples/vfio-mdev/mdpy.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "samples/vfio-mdev/mbochs.c||samples/vfio-mdev/mbochs.c"
          ],
          "candidate": [
            "samples/vfio-mdev/mbochs.c||samples/vfio-mdev/mbochs.c"
          ]
        }
      },
      "candidate_diff": {
        "samples/vfio-mdev/mbochs.c||samples/vfio-mdev/mbochs.c": [
          "File: samples/vfio-mdev/mbochs.c -> samples/vfio-mdev/mbochs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "513:  struct device *dev = mdev_dev(mdev);",
          "514:  struct mdev_state *mdev_state;",
          "518:  if (type->mbytes + mbochs_used_mbytes > max_mbytes)",
          "519:   return -ENOMEM;",
          "",
          "[Removed Lines]",
          "516:  if (!type)",
          "517:   type = &mbochs_types[0];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "samples/vfio-mdev/mdpy.c||samples/vfio-mdev/mdpy.c": [
          "File: samples/vfio-mdev/mdpy.c -> samples/vfio-mdev/mdpy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "667:   &mdpy_types[mtype_get_type_group_id(mtype)];",
          "669:  return sprintf(buf, \"virtual display, %dx%d framebuffer\\n\",",
          "672: }",
          "673: static MDEV_TYPE_ATTR_RO(description);",
          "",
          "[Removed Lines]",
          "670:          type ? type->width  : 0,",
          "671:          type ? type->height : 0);",
          "",
          "[Added Lines]",
          "670:          type->width, type->height);",
          "",
          "---------------"
        ]
      }
    }
  ]
}