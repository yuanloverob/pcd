{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3f687dbddf4d725e9f9faf560a665c4256480681",
      "candidate_info": {
        "commit_hash": "3f687dbddf4d725e9f9faf560a665c4256480681",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/3f687dbddf4d725e9f9faf560a665c4256480681",
        "files": [
          "deps/uv/include/uv-private/uv-win.h"
        ],
        "message": "uv: upgrade to b496c122",
        "before_after_code_files": [
          "deps/uv/include/uv-private/uv-win.h||deps/uv/include/uv-private/uv-win.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/include/uv-private/uv-win.h||deps/uv/include/uv-private/uv-win.h": [
          "File: deps/uv/include/uv-private/uv-win.h -> deps/uv/include/uv-private/uv-win.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "355:   uv_write_t ipc_header_write_req;        \\",
          "356:   int ipc_pid;                            \\",
          "357:   uint64_t remaining_ipc_rawdata_bytes;   \\",
          "358:   struct {                                \\",
          "359:     WSAPROTOCOL_INFOW* socket_info;       \\",
          "360:     int tcp_connection;                   \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "358:   unsigned char reserved[sizeof(void*)];  \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2f93eb6102fc7f226e2bca641d6e1bcee14037e4",
      "candidate_info": {
        "commit_hash": "2f93eb6102fc7f226e2bca641d6e1bcee14037e4",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/2f93eb6102fc7f226e2bca641d6e1bcee14037e4",
        "files": [
          "lib/http.js"
        ],
        "message": "http client: Destroy on timeout",
        "before_after_code_files": [
          "lib/http.js||lihttp.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/http.js||lihttp.js": [
          "File: lib/http.js -> lihttp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1471:     onSocket();",
          "1472:   }",
          "1473: };",
          "1476: };",
          "1477: ClientRequest.prototype.setNoDelay = function() {",
          "1478:   this._deferToConnect('setNoDelay', arguments);",
          "1479: };",
          "",
          "[Removed Lines]",
          "1474: ClientRequest.prototype.setTimeout = function() {",
          "1475:   this._deferToConnect('setTimeout', arguments);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1566:   httpSocketSetup(socket);",
          "1568:   socket.setTimeout(2 * 60 * 1000); // 2 minute timeout",
          "1570:     socket.destroy();",
          "1571:   });",
          "",
          "[Removed Lines]",
          "1569:   socket.addListener('timeout', function() {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "18240193ba421695d984c3d73e88de7e1b324e0a",
      "candidate_info": {
        "commit_hash": "18240193ba421695d984c3d73e88de7e1b324e0a",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/18240193ba421695d984c3d73e88de7e1b324e0a",
        "files": [
          "src/node_http_parser.cc",
          "test/simple/test-http-client-parse-error.js"
        ],
        "message": "Expose http parse error codes\n\nCurrently http parse errors do not expose the error details available\nfrom http_parser. This patch exposes the error code as `err.code`.",
        "before_after_code_files": [
          "src/node_http_parser.cc||src/node_http_parser.cc",
          "test/simple/test-http-client-parse-error.js||test/simple/test-http-client-parse-error.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [
            "src/node_http_parser.cc||src/node_http_parser.cc"
          ],
          "candidate": [
            "src/node_http_parser.cc||src/node_http_parser.cc"
          ]
        }
      },
      "candidate_diff": {
        "src/node_http_parser.cc||src/node_http_parser.cc": [
          "File: src/node_http_parser.cc -> src/node_http_parser.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "434:     if (!parser->parser_.upgrade && nparsed != len) {",
          "435:       Local<Value> e = Exception::Error(String::NewSymbol(\"Parse Error\"));",
          "436:       Local<Object> obj = e->ToObject();",
          "437:       obj->Set(String::NewSymbol(\"bytesParsed\"), nparsed_obj);",
          "438:       return scope.Close(e);",
          "439:     } else {",
          "440:       return scope.Close(nparsed_obj);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "435:       enum http_errno err = HTTP_PARSER_ERRNO(&parser->parser_);",
          "440:       obj->Set(String::NewSymbol(\"code\"), String::New(http_errno_name(err)));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "455:     if (parser->got_exception_) return Local<Value>();",
          "457:     if (rv != 0) {",
          "458:       Local<Value> e = Exception::Error(String::NewSymbol(\"Parse Error\"));",
          "459:       Local<Object> obj = e->ToObject();",
          "460:       obj->Set(String::NewSymbol(\"bytesParsed\"), Integer::New(0));",
          "461:       return scope.Close(e);",
          "462:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "461:       enum http_errno err = HTTP_PARSER_ERRNO(&parser->parser_);",
          "466:       obj->Set(String::NewSymbol(\"code\"), String::New(http_errno_name(err)));",
          "",
          "---------------"
        ],
        "test/simple/test-http-client-parse-error.js||test/simple/test-http-client-parse-error.js": [
          "File: test/simple/test-http-client-parse-error.js -> test/simple/test-http-client-parse-error.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:     console.log('got error from client');",
          "49:     srv.close();",
          "50:     assert.ok(e.message.indexOf('Parse Error') >= 0);",
          "51:     parseError = true;",
          "52:   });",
          "53: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:     assert.equal(e.code, 'HPE_INVALID_CONSTANT');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "930fabe43f83343e7f1a41cbfa506cd08be6bfa5",
      "candidate_info": {
        "commit_hash": "930fabe43f83343e7f1a41cbfa506cd08be6bfa5",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/930fabe43f83343e7f1a41cbfa506cd08be6bfa5",
        "files": [
          "common.gypi"
        ],
        "message": "Disable V8 postmortem debugging on Windows\n\nIt is not supported by V8.",
        "before_after_code_files": [
          "common.gypi||common.gypi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "common.gypi||common.gypi": [
          "File: common.gypi -> common.gypi",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:     'library%': 'static_library',    # allow override to 'shared_library' for DLL/.so builds",
          "9:     'component%': 'static_library',  # NB. these names match with what V8 expects",
          "10:     'msvs_multi_core_compile': '0',  # we do enable multicore compiles, but not using the V8 way",
          "12:   },",
          "14:   'target_defaults': {",
          "",
          "[Removed Lines]",
          "11:     'v8_postmortem_support': 'true', # V8's postmortem metadata",
          "",
          "[Added Lines]",
          "12:     # Enable V8's post-mortem debugging only on unix flavors.",
          "13:     'conditions': [",
          "14:       ['OS != \"win\"', {",
          "15:         'v8_postmortem_support': 'true'",
          "16:       }]",
          "17:     ],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "900196e13506bdfb525db1e69072a6a4c18aaba3",
      "candidate_info": {
        "commit_hash": "900196e13506bdfb525db1e69072a6a4c18aaba3",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/900196e13506bdfb525db1e69072a6a4c18aaba3",
        "files": [
          "src/node_crypto.cc",
          "test/simple/test-crypto.js"
        ],
        "message": "crypto: make cipher/decipher accept buffer args",
        "before_after_code_files": [
          "src/node_crypto.cc||src/node_crypto.cc",
          "test/simple/test-crypto.js||test/simple/test-crypto.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_crypto.cc||src/node_crypto.cc": [
          "File: src/node_crypto.cc -> src/node_crypto.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2084:     Cipher *cipher = ObjectWrap::Unwrap<Cipher>(args.This());",
          "2089:       return ThrowException(Exception::Error(String::New(",
          "2090:         \"Must give cipher-type, key\")));",
          "2091:     }",
          "",
          "[Removed Lines]",
          "2086:     cipher->incomplete_base64=NULL;",
          "2088:     if (args.Length() <= 1 || !args[0]->IsString() || !args[1]->IsString()) {",
          "",
          "[Added Lines]",
          "2086:     cipher->incomplete_base64 = NULL;",
          "2088:     if (args.Length() <= 1",
          "2089:         || !args[0]->IsString()",
          "2090:         || !(args[1]->IsString() || Buffer::HasInstance(args[1])))",
          "2091:     {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2122:     HandleScope scope;",
          "2127:       return ThrowException(Exception::Error(String::New(",
          "2128:         \"Must give cipher-type, key, and iv as argument\")));",
          "2129:     }",
          "",
          "[Removed Lines]",
          "2124:     cipher->incomplete_base64=NULL;",
          "2126:     if (args.Length() <= 2 || !args[0]->IsString() || !args[1]->IsString() || !args[2]->IsString()) {",
          "",
          "[Added Lines]",
          "2127:     cipher->incomplete_base64 = NULL;",
          "2129:     if (args.Length() <= 2",
          "2130:         || !args[0]->IsString()",
          "2131:         || !(args[1]->IsString() || Buffer::HasInstance(args[1]))",
          "2132:         || !(args[2]->IsString() || Buffer::HasInstance(args[2])))",
          "2133:     {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2496:     HandleScope scope;",
          "2502:       return ThrowException(Exception::Error(String::New(",
          "2503:         \"Must give cipher-type, key as argument\")));",
          "2504:     }",
          "",
          "[Removed Lines]",
          "2498:     cipher->incomplete_utf8=NULL;",
          "2499:     cipher->incomplete_hex_flag=false;",
          "2501:     if (args.Length() <= 1 || !args[0]->IsString() || !args[1]->IsString()) {",
          "",
          "[Added Lines]",
          "2505:     cipher->incomplete_utf8 = NULL;",
          "2506:     cipher->incomplete_hex_flag = false;",
          "2508:     if (args.Length() <= 1",
          "2509:         || !args[0]->IsString()",
          "2510:         || !(args[1]->IsString() || Buffer::HasInstance(args[1])))",
          "2511:     {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2534:     HandleScope scope;",
          "2540:       return ThrowException(Exception::Error(String::New(",
          "2541:         \"Must give cipher-type, key, and iv as argument\")));",
          "2542:     }",
          "",
          "[Removed Lines]",
          "2536:     cipher->incomplete_utf8=NULL;",
          "2537:     cipher->incomplete_hex_flag=false;",
          "2539:     if (args.Length() <= 2 || !args[0]->IsString() || !args[1]->IsString() || !args[2]->IsString()) {",
          "",
          "[Added Lines]",
          "2546:     cipher->incomplete_utf8 = NULL;",
          "2547:     cipher->incomplete_hex_flag = false;",
          "2549:     if (args.Length() <= 2",
          "2550:         || !args[0]->IsString()",
          "2551:         || !(args[1]->IsString() || Buffer::HasInstance(args[1]))",
          "2552:         || !(args[2]->IsString() || Buffer::HasInstance(args[2])))",
          "2553:     {",
          "",
          "---------------"
        ],
        "test/simple/test-crypto.js||test/simple/test-crypto.js": [
          "File: test/simple/test-crypto.js -> test/simple/test-crypto.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "424:                      .verify(certPem, s2); // binary",
          "425: assert.strictEqual(verified, true, 'sign and verify (binary)');",
          "477: assert.throws(function() {",
          "",
          "[Removed Lines]",
          "428: var plaintext = 'Keep this a secret? No! Tell everyone about node.js!';",
          "429: var cipher = crypto.createCipher('aes192', 'MySecretKey123');",
          "433: var ciph = cipher.update(plaintext, 'utf8', 'hex');",
          "435: ciph += cipher.final('hex');",
          "437: var decipher = crypto.createDecipher('aes192', 'MySecretKey123');",
          "438: var txt = decipher.update(ciph, 'hex', 'utf8');",
          "439: txt += decipher.final('utf8');",
          "441: assert.equal(txt, plaintext, 'encryption and decryption');",
          "445: var plaintext =",
          "446:     '32|RmVZZkFUVmpRRkp0TmJaUm56ZU9qcnJkaXNNWVNpTTU*|iXmckfRWZBGWWELw' +",
          "447:     'eCBsThSsfUHLeRe0KCsK8ooHgxie0zOINpXxfZi/oNG7uq9JWFVCk70gfzQH8ZUJjAfaFg**';",
          "448: var cipher = crypto.createCipher('aes256', '0123456789abcdef');",
          "452: var ciph = cipher.update(plaintext, 'utf8', 'base64');",
          "453: ciph += cipher.final('base64');",
          "455: var decipher = crypto.createDecipher('aes256', '0123456789abcdef');",
          "456: var txt = decipher.update(ciph, 'base64', 'utf8');",
          "457: txt += decipher.final('utf8');",
          "459: assert.equal(txt, plaintext, 'encryption and decryption with Base64');",
          "463: var encryption_key = '0123456789abcd0123456789';",
          "464: var iv = '12345678';",
          "466: var cipher = crypto.createCipheriv('des-ede3-cbc', encryption_key, iv);",
          "467: var ciph = cipher.update(plaintext, 'utf8', 'hex');",
          "468: ciph += cipher.final('hex');",
          "470: var decipher = crypto.createDecipheriv('des-ede3-cbc', encryption_key, iv);",
          "471: var txt = decipher.update(ciph, 'hex', 'utf8');",
          "472: txt += decipher.final('utf8');",
          "474: assert.equal(txt, plaintext, 'encryption and decryption with key and iv');",
          "",
          "[Added Lines]",
          "428: function testCipher1(key) {",
          "430:   var plaintext = 'Keep this a secret? No! Tell everyone about node.js!';",
          "431:   var cipher = crypto.createCipher('aes192', key);",
          "435:   var ciph = cipher.update(plaintext, 'utf8', 'hex');",
          "437:   ciph += cipher.final('hex');",
          "439:   var decipher = crypto.createDecipher('aes192', key);",
          "440:   var txt = decipher.update(ciph, 'hex', 'utf8');",
          "441:   txt += decipher.final('utf8');",
          "443:   assert.equal(txt, plaintext, 'encryption and decryption');",
          "444: }",
          "447: function testCipher2(key) {",
          "450:   var plaintext =",
          "451:       '32|RmVZZkFUVmpRRkp0TmJaUm56ZU9qcnJkaXNNWVNpTTU*|iXmckfRWZBGWWELw' +",
          "452:       'eCBsThSsfUHLeRe0KCsK8ooHgxie0zOINpXxfZi/oNG7uq9JWFVCk70gfzQH8ZUJ' +",
          "453:       'jAfaFg**';",
          "454:   var cipher = crypto.createCipher('aes256', key);",
          "458:   var ciph = cipher.update(plaintext, 'utf8', 'base64');",
          "459:   ciph += cipher.final('base64');",
          "461:   var decipher = crypto.createDecipher('aes256', key);",
          "462:   var txt = decipher.update(ciph, 'base64', 'utf8');",
          "463:   txt += decipher.final('utf8');",
          "465:   assert.equal(txt, plaintext, 'encryption and decryption with Base64');",
          "466: }",
          "469: function testCipher3(key, iv) {",
          "471:   var plaintext =",
          "472:       '32|RmVZZkFUVmpRRkp0TmJaUm56ZU9qcnJkaXNNWVNpTTU*|iXmckfRWZBGWWELw' +",
          "473:       'eCBsThSsfUHLeRe0KCsK8ooHgxie0zOINpXxfZi/oNG7uq9JWFVCk70gfzQH8ZUJ' +",
          "474:       'jAfaFg**';",
          "475:   var cipher = crypto.createCipheriv('des-ede3-cbc', key, iv);",
          "476:   var ciph = cipher.update(plaintext, 'utf8', 'hex');",
          "477:   ciph += cipher.final('hex');",
          "479:   var decipher = crypto.createDecipheriv('des-ede3-cbc', key, iv);",
          "480:   var txt = decipher.update(ciph, 'hex', 'utf8');",
          "481:   txt += decipher.final('utf8');",
          "483:   assert.equal(txt, plaintext, 'encryption and decryption with key and iv');",
          "484: }",
          "487: testCipher1('MySecretKey123');",
          "488: testCipher1(new Buffer('MySecretKey123'));",
          "490: testCipher2('0123456789abcdef');",
          "491: testCipher2(new Buffer('0123456789abcdef'));",
          "493: testCipher3('0123456789abcd0123456789', '12345678');",
          "494: testCipher3('0123456789abcd0123456789', new Buffer('12345678'));",
          "495: testCipher3(new Buffer('0123456789abcd0123456789'), '12345678');",
          "496: testCipher3(new Buffer('0123456789abcd0123456789'), new Buffer('12345678'));",
          "",
          "---------------"
        ]
      }
    }
  ]
}