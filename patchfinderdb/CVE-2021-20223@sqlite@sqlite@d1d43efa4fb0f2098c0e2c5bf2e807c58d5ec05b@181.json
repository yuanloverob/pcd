{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "427af8dc3d52ea18ddeef7ff35d4a022c0522cca",
      "candidate_info": {
        "commit_hash": "427af8dc3d52ea18ddeef7ff35d4a022c0522cca",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/427af8dc3d52ea18ddeef7ff35d4a022c0522cca",
        "files": [
          "ext/misc/decimal.c",
          "manifest",
          "manifest.uuid",
          "test/decimal.test"
        ],
        "message": "Add the decimal_mul() function.\n\nFossilOrigin-Name: 72eee04b67268ad38fd51ff32849f08c0a54cf1b481d5ecb11d77cc9c729ee03",
        "before_after_code_files": [
          "ext/misc/decimal.c||ext/misc/decimal.c",
          "manifest.uuid||manifest.uuid",
          "test/decimal.test||test/decimal.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/decimal.c||ext/misc/decimal.c": [
          "File: ext/misc/decimal.c -> ext/misc/decimal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "310:     memmove(p->a, p->a+i, p->nDigit - i);",
          "311:     p->nDigit -= i;",
          "312:   }",
          "313: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "314:   while( p->nFrac && p->a[p->nDigit-1]==0 ){",
          "315:     p->nFrac--;",
          "316:     p->nDigit--;",
          "317:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "523:   decimal_result(context, p);",
          "524:   decimal_clear(p);",
          "525: }",
          "528: #ifdef _WIN32",
          "529: __declspec(dllexport)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "537: static void decimalMulFunc(",
          "538:   sqlite3_context *context,",
          "539:   int argc,",
          "540:   sqlite3_value **argv",
          "541: ){",
          "542:   Decimal *pA = decimal_new(context, argv[0], 0, 0);",
          "543:   Decimal *pB = decimal_new(context, argv[1], 0, 0);",
          "544:   signed char *acc = 0;",
          "545:   int i, j, k;",
          "546:   if( pA==0 || pA->oom || pA->isNull",
          "547:    || pB==0 || pB->oom || pB->isNull",
          "548:   ){",
          "549:     goto mul_end;",
          "550:   }",
          "551:   acc = sqlite3_malloc64( pA->nDigit + pB->nDigit + 2 );",
          "552:   if( acc==0 ){",
          "553:     sqlite3_result_error_nomem(context);",
          "554:     goto mul_end;",
          "555:   }",
          "556:   memset(acc, 0, pA->nDigit + pB->nDigit + 2);",
          "557:   for(i=pA->nDigit-1; i>=0; i--){",
          "558:     signed char f = pA->a[i];",
          "559:     int carry = 0, x;",
          "560:     for(j=pB->nDigit-1, k=i+j+3; j>=0; j--, k--){",
          "561:       int x = acc[k] + f*pB->a[j] + carry;",
          "562:       acc[k] = x%10;",
          "563:       carry = x/10;",
          "564:     }",
          "565:     x = acc[k] + carry;",
          "566:     acc[k] = x%10;",
          "567:     acc[k-1] += x/10;",
          "568:   }",
          "569:   sqlite3_free(pA->a);",
          "570:   pA->a = acc;",
          "571:   acc = 0;",
          "572:   pA->nDigit += pB->nDigit + 2;",
          "573:   pA->nFrac += pB->nFrac;",
          "574:   pA->sign ^= pB->sign;",
          "575:   decimal_normalize(pA);",
          "576:   decimal_result(context, pA);",
          "578: mul_end:",
          "579:   sqlite3_free(acc);",
          "580:   decimal_free(pA);",
          "581:   decimal_free(pB);",
          "582: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "544:     { \"decimal_cmp\",   2,   decimalCmpFunc     },",
          "545:     { \"decimal_add\",   2,   decimalAddFunc     },",
          "546:     { \"decimal_sub\",   2,   decimalSubFunc     },",
          "547:   };",
          "548:   int i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "603:     { \"decimal_mul\",   2,   decimalMulFunc     },",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4c3b85607feb53462ccc8b89bea699fdb132c402eae597afa33cc40a85c32329",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/decimal.test||test/decimal.test": [
          "File: test/decimal.test -> test/decimal.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:     FROM t3;",
          "116: } {1505500000000000000015055.00000000000000015055}",
          "118: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118: do_execsql_test 5000 {",
          "119:   WITH RECURSIVE c(x,y,z) AS (",
          "120:     VALUES(0,'1','1')",
          "121:     UNION ALL",
          "122:     SELECT x+1, decimal_mul(y,'2'), decimal_mul(z,'0.5')",
          "123:       FROM c WHERE x<32",
          "124:   )",
          "125:   SELECT count(*) FROM c WHERE decimal_mul(y,z)='1';",
          "126: } {33}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8714de97c0137a02a885c8eba79701b22d59ff81",
      "candidate_info": {
        "commit_hash": "8714de97c0137a02a885c8eba79701b22d59ff81",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8714de97c0137a02a885c8eba79701b22d59ff81",
        "files": [
          "main.mk",
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/main.c",
          "src/pager.c",
          "src/pager.h",
          "src/sqliteInt.h",
          "src/wal.c",
          "src/wal.h"
        ],
        "message": "Changes to avoid deadlock in SQLITE_ENABLE_SETLK_TIMEOUT builds.\n\nFossilOrigin-Name: 553423c23142cf0ec219192315d57ce8a0e10c3d8678d28bc110a1a9a7c17cee",
        "before_after_code_files": [
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/main.c||src/main.c",
          "src/pager.c||src/pager.c",
          "src/pager.h||src/pager.h",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/wal.c||src/wal.c",
          "src/wal.h||src/wal.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "423:   $(TOP)/src/vdbeaux.c \\",
          "424:   $(TOP)/src/vdbe.c \\",
          "425:   $(TOP)/src/vdbemem.c \\",
          "426:   $(TOP)/src/where.c \\",
          "427:   $(TOP)/src/wherecode.c \\",
          "428:   $(TOP)/src/whereexpr.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "426:   $(TOP)/src/vdbevtab.c \\",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d1ba026d882f070b351280028e2fa88a3cca59b46d4683302e24c6677e0951b9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3467:     }",
          "3468:   }while( (rc&0xFF)==SQLITE_BUSY && pBt->inTransaction==TRANS_NONE &&",
          "3469:           btreeInvokeBusyHandler(pBt) );",
          "3472:   if( rc==SQLITE_OK ){",
          "3473:     if( p->inTrans==TRANS_NONE ){",
          "",
          "[Removed Lines]",
          "3470:   sqlite3PagerResetLockTimeout(pBt->pPager);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1566:   int tmout = db->busyTimeout;",
          "1567:   int delay, prior;",
          "1594:   assert( count>=0 );",
          "1595:   if( count < NDELAY ){",
          "1596:     delay = delays[count];",
          "",
          "[Removed Lines]",
          "1569: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "1570:   if( sqlite3OsFileControl(pFile,SQLITE_FCNTL_LOCK_TIMEOUT,&tmout)==SQLITE_OK ){",
          "1571:     if( count ){",
          "1582:       if( tmout ){",
          "1583:         tmout = 0;",
          "1584:         sqlite3OsFileControl(pFile, SQLITE_FCNTL_LOCK_TIMEOUT, &tmout);",
          "1585:         return 0;",
          "1586:       }",
          "1587:     }else{",
          "1588:       return 1;",
          "1589:     }",
          "1590:   }",
          "1591: #else",
          "1592:   UNUSED_PARAMETER(pFile);",
          "1593: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1611:   sqlite3 *db = (sqlite3 *)ptr;",
          "1612:   int tmout = ((sqlite3 *)ptr)->busyTimeout;",
          "1614:   if( (count+1)*1000 > tmout ){",
          "1615:     return 0;",
          "1616:   }",
          "",
          "[Removed Lines]",
          "1613:   UNUSED_PARAMETER(pFile);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1631: int sqlite3InvokeBusyHandler(BusyHandler *p, sqlite3_file *pFile){",
          "1632:   int rc;",
          "1633:   if( p->xBusyHandler==0 || p->nBusy<0 ) return 0;",
          "1644:   if( rc==0 ){",
          "1645:     p->nBusy = -1;",
          "1646:   }else{",
          "",
          "[Removed Lines]",
          "1634:   if( p->bExtraFileArg ){",
          "1637:     int (*xTra)(void*,int,sqlite3_file*);",
          "1638:     xTra = (int(*)(void*,int,sqlite3_file*))p->xBusyHandler;",
          "1639:     rc = xTra(p->pBusyArg, p->nBusy, pFile);",
          "1640:   }else{",
          "1642:     rc = p->xBusyHandler(p->pBusyArg, p->nBusy);",
          "1643:   }",
          "",
          "[Added Lines]",
          "1607:   rc = p->xBusyHandler(p->pBusyArg, p->nBusy);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1665:   db->busyHandler.xBusyHandler = xBusy;",
          "1666:   db->busyHandler.pBusyArg = pArg;",
          "1667:   db->busyHandler.nBusy = 0;",
          "1669:   db->busyTimeout = 0;",
          "1670:   sqlite3_mutex_leave(db->mutex);",
          "1671:   return SQLITE_OK;",
          "",
          "[Removed Lines]",
          "1668:   db->busyHandler.bExtraFileArg = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1716:     sqlite3_busy_handler(db, (int(*)(void*,int))sqliteDefaultBusyCallback,",
          "1717:                              (void*)db);",
          "1718:     db->busyTimeout = ms;",
          "1720:   }else{",
          "1721:     sqlite3_busy_handler(db, 0, 0);",
          "1722:   }",
          "",
          "[Removed Lines]",
          "1719:     db->busyHandler.bExtraFileArg = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3359: #endif",
          "3361: #ifdef SQLITE_ENABLE_BYTECODE_VTAB",
          "3363:     rc = sqlite3VdbeBytecodeVtabInit(db);",
          "3364:   }",
          "3365: #endif",
          "",
          "[Removed Lines]",
          "3362:   if( !db->mallocFailed && rc==SQLITE_OK){",
          "",
          "[Added Lines]",
          "3324:   if( !db->mallocFailed && rc==SQLITE_OK ){",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4520:           rc = SQLITE_OK;",
          "4521:         }",
          "4522:         if( rc==SQLITE_OK ){",
          "4524:         }",
          "4525:         if( rc==SQLITE_OK ){",
          "4526:           rc = sqlite3BtreeBeginTrans(pBt, 0, 0);",
          "4528:         }",
          "4529:         if( bUnlock ){",
          "4530:           sqlite3PagerSnapshotUnlock(pPager);",
          "",
          "[Removed Lines]",
          "4523:           rc = sqlite3PagerSnapshotOpen(pPager, pSnapshot);",
          "4527:           sqlite3PagerSnapshotOpen(pPager, 0);",
          "",
          "[Added Lines]",
          "4485:           rc = sqlite3PagerSnapshotOpen(pPager, db, pSnapshot);",
          "4489:           sqlite3PagerSnapshotOpen(pPager, 0, 0);",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5705:   assert( pPg->pgno==1 );",
          "5707:   pPager = pPg->pPager;",
          "5709:   sqlite3PcacheRelease(pPg);",
          "5710:   pagerUnlockIfUnused(pPager);",
          "5711: }",
          "",
          "[Removed Lines]",
          "5708:   sqlite3PagerResetLockTimeout(pPager);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6998:   return pPager->fd;",
          "6999: }",
          "",
          "[Removed Lines]",
          "7001: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "7005: void sqlite3PagerResetLockTimeout(Pager *pPager){",
          "7006:   int x = 0;",
          "7007:   sqlite3OsFileControl(pPager->fd, SQLITE_FCNTL_LOCK_TIMEOUT, &x);",
          "7008: }",
          "7009: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7421:         pPager->walSyncFlags, pPager->pageSize, (u8 *)pPager->pTmpSpace,",
          "7422:         pnLog, pnCkpt",
          "7423:     );",
          "7425:   }",
          "7426:   return rc;",
          "7427: }",
          "",
          "[Removed Lines]",
          "7424:     sqlite3PagerResetLockTimeout(pPager);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7610:   int rc = SQLITE_OK;",
          "7611:   if( pPager->pWal ){",
          "7613:   }else{",
          "7614:     rc = SQLITE_ERROR;",
          "7615:   }",
          "",
          "[Removed Lines]",
          "7609: int sqlite3PagerSnapshotOpen(Pager *pPager, sqlite3_snapshot *pSnapshot){",
          "7612:     sqlite3WalSnapshotOpen(pPager->pWal, pSnapshot);",
          "",
          "[Added Lines]",
          "7597: int sqlite3PagerSnapshotOpen(",
          "7598:   Pager *pPager,",
          "7599:   sqlite3 *db,",
          "7600:   sqlite3_snapshot *pSnapshot",
          "7601: ){",
          "7604:     sqlite3WalSnapshotOpen(pPager->pWal, db, pSnapshot);",
          "",
          "---------------"
        ],
        "src/pager.h||src/pager.h": [
          "File: src/pager.h -> src/pager.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:   int sqlite3PagerOpenWal(Pager *pPager, int *pisOpen);",
          "178:   int sqlite3PagerCloseWal(Pager *pPager, sqlite3*);",
          "179: # ifdef SQLITE_ENABLE_SNAPSHOT",
          "182:   int sqlite3PagerSnapshotRecover(Pager *pPager);",
          "183:   int sqlite3PagerSnapshotCheck(Pager *pPager, sqlite3_snapshot *pSnapshot);",
          "184:   void sqlite3PagerSnapshotUnlock(Pager *pPager);",
          "",
          "[Removed Lines]",
          "180:   int sqlite3PagerSnapshotGet(Pager *pPager, sqlite3_snapshot **ppSnapshot);",
          "181:   int sqlite3PagerSnapshotOpen(Pager *pPager, sqlite3_snapshot *pSnapshot);",
          "",
          "[Added Lines]",
          "180:   int sqlite3PagerSnapshotGet(Pager*, sqlite3_snapshot **ppSnapshot);",
          "181:   int sqlite3PagerSnapshotOpen(Pager*, sqlite3*, sqlite3_snapshot *pSnapshot);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "210: void sqlite3PagerCacheStat(Pager *, int, int, int *);",
          "211: void sqlite3PagerClearCache(Pager*);",
          "212: int sqlite3SectorSize(sqlite3_file *);",
          "220: void sqlite3PagerTruncateImage(Pager*,Pgno);",
          "",
          "[Removed Lines]",
          "213: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "214: void sqlite3PagerResetLockTimeout(Pager *pPager);",
          "215: #else",
          "216: # define sqlite3PagerResetLockTimeout(X)",
          "217: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "466: #endif",
          "467: #ifdef SQLITE_ENABLE_SNAPSHOT",
          "469: #endif",
          "470: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "469: # ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "470:   sqlite3 *dbSnapshot;",
          "471: # endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1128:   u32 aFrameCksum[2] = {0, 0};",
          "",
          "[Removed Lines]",
          "1131: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "1132:   int tmout = 0;",
          "1133:   sqlite3OsFileControl(pWal->pDbFd, SQLITE_FCNTL_LOCK_TIMEOUT, (void*)&tmout);",
          "1134: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2750: int sqlite3WalBeginReadTransaction(Wal *pWal, int *pChanged){",
          "2757: #ifdef SQLITE_ENABLE_SNAPSHOT",
          "2758:   int bChanged = 0;",
          "2759:   WalIndexHdr *pSnapshot = pWal->pSnapshot;",
          "2763: #endif",
          "2765: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "2769: #endif",
          "2771:   do{",
          "",
          "[Removed Lines]",
          "2753: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "2754:   int tmout = 0;",
          "2755: #endif",
          "2760:   if( pSnapshot && memcmp(pSnapshot, &pWal->hdr, sizeof(WalIndexHdr))!=0 ){",
          "2761:     bChanged = 1;",
          "2762:   }",
          "2768:   sqlite3OsFileControl(pWal->pDbFd, SQLITE_FCNTL_LOCK_TIMEOUT, (void*)&tmout);",
          "",
          "[Added Lines]",
          "2756:   if( pSnapshot ){",
          "2757: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "2758:     int busyTimeout = pWal->dbSnapshot->busyTimeout;",
          "2759:     if( busyTimeout ){",
          "2760:       int tmout = busyTimeout;",
          "2761:       sqlite3OsFileControl(pWal->pDbFd,SQLITE_FCNTL_LOCK_TIMEOUT,(void*)&tmout);",
          "2762:     }",
          "2765:     if( memcmp(pSnapshot, &pWal->hdr, sizeof(WalIndexHdr))!=0 ){",
          "2766:       bChanged = 1;",
          "2767:     }",
          "2777:     rc = walLockShared(pWal, WAL_CKPT_LOCK);",
          "2780:     if( busyTimeout ){",
          "2781:       int tmout = 0;",
          "2782:       sqlite3OsFileControl(pWal->pDbFd,SQLITE_FCNTL_LOCK_TIMEOUT,(void*)&tmout);",
          "2783:     }",
          "2784: #endif",
          "2786:     if( rc!=SQLITE_OK ){",
          "2787:       return rc;",
          "2788:     }",
          "2789:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2776:   testcase( rc==SQLITE_PROTOCOL );",
          "2777:   testcase( rc==SQLITE_OK );",
          "2789: #ifdef SQLITE_ENABLE_SNAPSHOT",
          "2790:   if( rc==SQLITE_OK ){",
          "2791:     if( pSnapshot && memcmp(pSnapshot, &pWal->hdr, sizeof(WalIndexHdr))!=0 ){",
          "",
          "[Removed Lines]",
          "2779: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "2784:   if( rc==SQLITE_OK ){",
          "2785:     sqlite3OsFileControl(pWal->pDbFd, SQLITE_FCNTL_LOCK_TIMEOUT, (void*)&tmout);",
          "2786:   }",
          "2787: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2807:       assert( pWal->readLock>0 || pWal->hdr.mxFrame==0 );",
          "2808:       assert( pInfo->aReadMark[pWal->readLock]<=pSnapshot->mxFrame );",
          "2844:       }",
          "2847:       if( rc!=SQLITE_OK ){",
          "2848:         sqlite3WalEndReadTransaction(pWal);",
          "2849:       }",
          "2850:     }",
          "2851:   }",
          "2852: #endif",
          "2853:   return rc;",
          "2854: }",
          "",
          "[Removed Lines]",
          "2822:       rc = walLockShared(pWal, WAL_CKPT_LOCK);",
          "2824:       if( rc==SQLITE_OK ){",
          "2831:         if( !memcmp(pSnapshot->aSalt, pWal->hdr.aSalt, sizeof(pWal->hdr.aSalt))",
          "2832:          && pSnapshot->mxFrame>=pInfo->nBackfillAttempted",
          "2833:         ){",
          "2834:           assert( pWal->readLock>0 );",
          "2835:           memcpy(&pWal->hdr, pSnapshot, sizeof(WalIndexHdr));",
          "2837:         }else{",
          "2838:           rc = SQLITE_ERROR_SNAPSHOT;",
          "2839:         }",
          "2842:         walUnlockShared(pWal, WAL_CKPT_LOCK);",
          "2843:         pWal->minFrame = 1;",
          "",
          "[Added Lines]",
          "2827:       if( !memcmp(pSnapshot->aSalt, pWal->hdr.aSalt, sizeof(pWal->hdr.aSalt))",
          "2828:        && pSnapshot->mxFrame>=pInfo->nBackfillAttempted",
          "2829:       ){",
          "2830:         assert( pWal->readLock>0 );",
          "2831:         memcpy(&pWal->hdr, pSnapshot, sizeof(WalIndexHdr));",
          "2833:       }else{",
          "2834:         rc = SQLITE_ERROR_SNAPSHOT;",
          "2843:       pWal->minFrame = 1;",
          "2852:   if( pSnapshot ){",
          "2853:     walUnlockShared(pWal, WAL_CKPT_LOCK);",
          "2854:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3588:   assert( pWal->ckptLock==0 );",
          "3589:   assert( pWal->writeLock==0 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3590: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "3591:   int bSetLk = 0;",
          "3592: #endif",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3595:   if( pWal->readOnly ) return SQLITE_READONLY;",
          "3596:   WALTRACE((\"WAL%p: checkpoint begins\\n\", pWal));",
          "3611:   }",
          "3631:     }",
          "3632:   }",
          "3635:   if( rc==SQLITE_OK ){",
          "3636:     rc = walIndexReadHdr(pWal, &isChanged);",
          "",
          "[Removed Lines]",
          "3600:   rc = walLockExclusive(pWal, WAL_CKPT_LOCK, 1);",
          "3601:   if( rc ){",
          "3608:     testcase( rc==SQLITE_BUSY );",
          "3609:     testcase( xBusy!=0 );",
          "3610:     return rc;",
          "3612:   pWal->ckptLock = 1;",
          "3623:   if( eMode!=SQLITE_CHECKPOINT_PASSIVE ){",
          "3624:     rc = walBusyLock(pWal, xBusy, pBusyArg, WAL_WRITE_LOCK, 1);",
          "3625:     if( rc==SQLITE_OK ){",
          "3626:       pWal->writeLock = 1;",
          "3627:     }else if( rc==SQLITE_BUSY ){",
          "3628:       eMode2 = SQLITE_CHECKPOINT_PASSIVE;",
          "3629:       xBusy2 = 0;",
          "3630:       rc = SQLITE_OK;",
          "",
          "[Added Lines]",
          "3604: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "3605:   if( db->busyTimeout ){",
          "3606:     int tmout = db->busyTimeout;",
          "3607:     sqlite3_file *fd = pWal->pDbFd;",
          "3608:     if( SQLITE_OK==",
          "3609:         sqlite3OsFileControl(fd, SQLITE_FCNTL_LOCK_TIMEOUT, (void*)&tmout)",
          "3610:     ){",
          "3611:       xBusy2 = 0;",
          "3612:       bSetLk = 1;",
          "3613:     }",
          "3615: #endif",
          "3625:   rc = walLockExclusive(pWal, WAL_CKPT_LOCK, 1);",
          "3626:   testcase( rc==SQLITE_BUSY );",
          "3627:   testcase( rc!=SQLITE_OK && xBusy2!=0 );",
          "3628:   if( rc==SQLITE_OK ){",
          "3629:     pWal->ckptLock = 1;",
          "3640:     if( eMode!=SQLITE_CHECKPOINT_PASSIVE ){",
          "3641:       rc = walBusyLock(pWal, xBusy2, pBusyArg, WAL_WRITE_LOCK, 1);",
          "3642:       if( rc==SQLITE_OK ){",
          "3643:         pWal->writeLock = 1;",
          "3644:       }else if( rc==SQLITE_BUSY ){",
          "3645:         eMode2 = SQLITE_CHECKPOINT_PASSIVE;",
          "3646:         xBusy2 = 0;",
          "3647:         rc = SQLITE_OK;",
          "3648:       }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3665:     memset(&pWal->hdr, 0, sizeof(WalIndexHdr));",
          "3666:   }",
          "3669:   sqlite3WalEndWriteTransaction(pWal);",
          "3672:   WALTRACE((\"WAL%p: checkpoint %s\\n\", pWal, rc ? \"failed\" : \"ok\"));",
          "3673:   return (rc==SQLITE_OK && eMode!=eMode2 ? SQLITE_BUSY : rc);",
          "3674: }",
          "",
          "[Removed Lines]",
          "3670:   walUnlockExclusive(pWal, WAL_CKPT_LOCK, 1);",
          "3671:   pWal->ckptLock = 0;",
          "",
          "[Added Lines]",
          "3687: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "3688:   if( bSetLk ){",
          "3689:     int tmout = 0;",
          "3690:     sqlite3_file *fd = pWal->pDbFd;",
          "3691:     sqlite3OsFileControl(fd, SQLITE_FCNTL_LOCK_TIMEOUT, (void*)&tmout);",
          "3692:   }",
          "3693: #endif",
          "3697:   if( pWal->ckptLock ){",
          "3698:     walUnlockExclusive(pWal, WAL_CKPT_LOCK, 1);",
          "3699:     pWal->ckptLock = 0;",
          "3700:   }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3790:   pWal->pSnapshot = (WalIndexHdr*)pSnapshot;",
          "3791: }",
          "",
          "[Removed Lines]",
          "3789: void sqlite3WalSnapshotOpen(Wal *pWal, sqlite3_snapshot *pSnapshot){",
          "",
          "[Added Lines]",
          "3818: void sqlite3WalSnapshotOpen(",
          "3819:   Wal *pWal,",
          "3820:   sqlite3 *db,",
          "3821:   sqlite3_snapshot *pSnapshot",
          "3822: ){",
          "3824: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "3825:   pWal->dbSnapshot = db;",
          "3826: #endif",
          "",
          "---------------"
        ],
        "src/wal.h||src/wal.h": [
          "File: src/wal.h -> src/wal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "131: #ifdef SQLITE_ENABLE_SNAPSHOT",
          "132: int sqlite3WalSnapshotGet(Wal *pWal, sqlite3_snapshot **ppSnapshot);",
          "134: int sqlite3WalSnapshotRecover(Wal *pWal);",
          "135: int sqlite3WalSnapshotCheck(Wal *pWal, sqlite3_snapshot *pSnapshot);",
          "136: void sqlite3WalSnapshotUnlock(Wal *pWal);",
          "",
          "[Removed Lines]",
          "133: void sqlite3WalSnapshotOpen(Wal *pWal, sqlite3_snapshot *pSnapshot);",
          "",
          "[Added Lines]",
          "133: void sqlite3WalSnapshotOpen(Wal *pWal, sqlite3*, sqlite3_snapshot *pSnapshot);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "451f89a896f01b8e998364e3204c600d9089b802",
      "candidate_info": {
        "commit_hash": "451f89a896f01b8e998364e3204c600d9089b802",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/451f89a896f01b8e998364e3204c600d9089b802",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix incorrect error message when something goes wrong with the sqlite3_dbpage() table-valued function in the .dbinfo command of the CLI.\n\nFossilOrigin-Name: 0dcf002463f5931c3875d2038d2b97298f1800b1cdfa70485d6430ab758f3b25",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 237c10f941cc6cb775693ae87513ff1b816f12b5e9c3d57b057421204d2d02cf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "5067:              \"SELECT data FROM sqlite_dbpage(?1) WHERE pgno=1\",",
          "5068:              -1, &pStmt, 0);",
          "5069:   if( rc ){",
          "5076:     sqlite3_finalize(pStmt);",
          "5077:     return 1;",
          "5078:   }",
          "",
          "[Removed Lines]",
          "5070:     if( !sqlite3_compileoption_used(\"ENABLE_DBPAGE_VTAB\") ){",
          "5071:       utf8_printf(stderr, \"the \\\".dbinfo\\\" command requires the \"",
          "5072:                           \"-DSQLITE_ENABLE_DBPAGE_VTAB compile-time options\\n\");",
          "5073:     }else{",
          "5074:       utf8_printf(stderr, \"error: %s\\n\", sqlite3_errmsg(p->db));",
          "5075:     }",
          "",
          "[Added Lines]",
          "5070:     utf8_printf(stderr, \"error: %s\\n\", sqlite3_errmsg(p->db));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "51f37b2bb81ee44c556ec66ba01077db1d145f86",
      "candidate_info": {
        "commit_hash": "51f37b2bb81ee44c556ec66ba01077db1d145f86",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/51f37b2bb81ee44c556ec66ba01077db1d145f86",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "Cosmetic change to the xfer-optimization to put the OP_RowData opcode closer to the corresponding OP_Insert opcode.  This makes it slightly easier to read and understand the code.\n\nFossilOrigin-Name: 0ea2dbfc9088561d62c3456803cb08d357e4e60f1d21f6ed37315564be4957d3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8130bbb4217bd4a4db1f6bf97115a60bee8b29943bed0c7bdf54bba5edbed8fc",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2789:       addr1 = sqlite3VdbeAddOp2(v, OP_Rowid, iSrc, regRowid);",
          "2790:       assert( (pDest->tabFlags & TF_Autoincrement)==0 );",
          "2791:     }",
          "2793:     if( db->mDbFlags & DBFLAG_Vacuum ){",
          "2794:       sqlite3VdbeAddOp1(v, OP_SeekEnd, iDest);",
          "2795:       insFlags = OPFLAG_NCHANGE|OPFLAG_LASTROWID|",
          "",
          "[Removed Lines]",
          "2792:     sqlite3VdbeAddOp3(v, OP_RowData, iSrc, regData, 1);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2797:     }else{",
          "2798:       insFlags = OPFLAG_NCHANGE|OPFLAG_LASTROWID|OPFLAG_APPEND;",
          "2799:     }",
          "2800:     sqlite3VdbeAddOp4(v, OP_Insert, iDest, regData, regRowid,",
          "2801:                       (char*)pDest, P4_TABLE);",
          "2802:     sqlite3VdbeChangeP5(v, insFlags);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2799:     sqlite3VdbeAddOp3(v, OP_RowData, iSrc, regData, 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2821:     sqlite3VdbeChangeP5(v, OPFLAG_BULKCSR);",
          "2822:     VdbeComment((v, \"%s\", pDestIdx->zName));",
          "2823:     addr1 = sqlite3VdbeAddOp2(v, OP_Rewind, iSrc, 0); VdbeCoverage(v);",
          "2825:     if( db->mDbFlags & DBFLAG_Vacuum ){",
          "",
          "[Removed Lines]",
          "2824:     sqlite3VdbeAddOp3(v, OP_RowData, iSrc, regData, 1);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2849:     if( !HasRowid(pSrc) && pDestIdx->idxType==SQLITE_IDXTYPE_PRIMARYKEY ){",
          "2850:       idxInsFlags |= OPFLAG_NCHANGE;",
          "2851:     }",
          "2852:     sqlite3VdbeAddOp2(v, OP_IdxInsert, iDest, regData);",
          "2853:     sqlite3VdbeChangeP5(v, idxInsFlags|OPFLAG_APPEND);",
          "2854:     sqlite3VdbeAddOp2(v, OP_Next, iSrc, addr1+1); VdbeCoverage(v);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2851:     sqlite3VdbeAddOp3(v, OP_RowData, iSrc, regData, 1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "47937cfd8defac2d926a863dabb3ec0232ca0eb5",
      "candidate_info": {
        "commit_hash": "47937cfd8defac2d926a863dabb3ec0232ca0eb5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/47937cfd8defac2d926a863dabb3ec0232ca0eb5",
        "files": [
          "VERSION",
          "configure",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Increase the version number to 3.33.0 to begin the next release cycle.\n\nFossilOrigin-Name: 790badb390d59062cd2d8d1dec76cc6104c9425610a67503f6be38076b6a458e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 04e1edd8e5821a377407263829ed0d87968c708c9aeb1282107ea6f39a11c1cc",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}