{
  "cve_id": "CVE-2017-3730",
  "cve_desc": "In OpenSSL 1.1.0 before 1.1.0d, if a malicious server supplies bad parameters for a DHE or ECDHE key exchange then this can result in the client attempting to dereference a NULL pointer leading to a client crash. This could be exploited in a Denial of Service attack.",
  "repo": "openssl/openssl",
  "patch_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
  "patch_info": {
    "commit_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "files": [
      "ssl/statem/statem_clnt.c"
    ],
    "message": "Fix missing NULL checks in CKE processing\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c"
    ]
  },
  "patch_diff": {
    "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
      "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2258:         return 0;",
      "2259:     }",
      "2260:     ckey = ssl_generate_pkey(skey);",
      "2261:     dh_clnt = EVP_PKEY_get0_DH(ckey);",
      "2263:     if (dh_clnt == NULL || ssl_derive(s, ckey, skey) == 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2261:     if (ckey == NULL) {",
      "2262:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_DHE, ERR_R_INTERNAL_ERROR);",
      "2263:         return 0;",
      "2264:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2296:     }",
      "2298:     ckey = ssl_generate_pkey(skey);",
      "2300:     if (ssl_derive(s, ckey, skey) == 0) {",
      "2301:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_EVP_LIB);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2304:     if (ckey == NULL) {",
      "2305:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_INTERNAL_ERROR);",
      "2306:         goto err;",
      "2307:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b71079a375116a8a52ed493afcd8f69cb08c195a",
      "candidate_info": {
        "commit_hash": "b71079a375116a8a52ed493afcd8f69cb08c195a",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/b71079a375116a8a52ed493afcd8f69cb08c195a",
        "files": [
          "crypto/rsa/rsa_err.c",
          "crypto/rsa/rsa_sign.c",
          "include/openssl/rsa.h",
          "test/evptests.txt"
        ],
        "message": "Implement RSASSA-PKCS1-v1_5 as specified.\n\nRFC 3447, section 8.2.2, steps 3 and 4 states that verifiers must encode\nthe DigestInfo struct and then compare the result against the public key\noperation result. This implies that one and only one encoding is legal.\n\nOpenSSL instead parses with crypto/asn1, then checks that the encoding\nround-trips, and allows some variations for the parameter. Sufficient\nlaxness in this area can allow signature forgeries, as described in\nhttps://www.imperialviolet.org/2014/09/26/pkcs1.html\n\nAlthough there aren't known attacks against OpenSSL's current scheme,\nthis change makes OpenSSL implement the algorithm as specified. This\navoids the uncertainty and, more importantly, helps grow a healthy\necosystem. Laxness beyond the spec, particularly in implementations\nwhich enjoy wide use, risks harm to the ecosystem for all. A signature\nproducer which only tests against OpenSSL may not notice bugs and\naccidentally become widely deployed. Thus implementations have a\nresponsibility to honor the specification as tightly as is practical.\n\nIn some cases, the damage is permanent and the spec deviation and\nsecurity risk becomes a tax all implementors must forever pay, but not\nhere. Both BoringSSL and Go successfully implemented and deployed\nRSASSA-PKCS1-v1_5 as specified since their respective beginnings, so\nthis change should be compatible enough to pin down in future OpenSSL\nreleases.\n\nSee also https://tools.ietf.org/html/draft-thomson-postel-was-wrong-00\n\nAs a bonus, by not having to deal with sign/verify differences, this\nversion is also somewhat clearer. It also more consistently enforces\ndigest lengths in the verify_recover codepath. The NID_md5_sha1 codepath\nwasn't quite doing this right.\n\nReviewed-by: Kurt Roeckx <kurt@roeckx.be>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n\nGH: #1474\n(cherry picked from commit 608a026494c1e7a14f6d6cfcc5e4994fe2728836)",
        "before_after_code_files": [
          "crypto/rsrsa_err.c||crypto/rsa/rsa_err.c",
          "crypto/rsrsa_sign.c||crypto/rsa/rsa_sign.c",
          "include/openssl/rsa.h||include/openssl/rsa.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/rsrsa_err.c||crypto/rsa/rsa_err.c": [
          "File: crypto/rsrsa_err.c -> crypto/rsa/rsa_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23:     {ERR_FUNC(RSA_F_ENCODE_PKCS1), \"encode_pkcs1\"},",
          "",
          "---------------"
        ],
        "crypto/rsrsa_sign.c||crypto/rsa/rsa_sign.c": [
          "File: crypto/rsrsa_sign.c -> crypto/rsa/rsa_sign.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: static int encode_pkcs1(unsigned char **out, int *out_len, int type,",
          "32:                         const unsigned char *m, unsigned int m_len)",
          "36:     ASN1_TYPE parameter;",
          "38:     uint8_t *der = NULL;",
          "39:     int len;",
          "41:     sig.algor = &algor;",
          "42:     sig.algor->algorithm = OBJ_nid2obj(type);",
          "43:     if (sig.algor->algorithm == NULL) {",
          "44:         RSAerr(RSA_F_ENCODE_PKCS1, RSA_R_UNKNOWN_ALGORITHM_TYPE);",
          "45:         return 0;",
          "46:     }",
          "47:     if (OBJ_length(sig.algor->algorithm) == 0) {",
          "48:         RSAerr(RSA_F_ENCODE_PKCS1,",
          "49:                RSA_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD);",
          "50:         return 0;",
          "51:     }",
          "52:     parameter.type = V_ASN1_NULL;",
          "53:     parameter.value.ptr = NULL;",
          "54:     sig.algor->parameter = &parameter;",
          "56:     sig.digest = &digest;",
          "57:     sig.digest->data = (unsigned char *)m;",
          "58:     sig.digest->length = m_len;",
          "60:     len = i2d_X509_SIG(&sig, &der);",
          "61:     if (len < 0)",
          "62:         return 0;",
          "66:     return 1;",
          "67: }",
          "69: int RSA_sign(int type, const unsigned char *m, unsigned int m_len,",
          "70:              unsigned char *sigret, unsigned int *siglen, RSA *rsa)",
          "71: {",
          "72:     int encrypt_len, encoded_len = 0, ret = 0;",
          "73:     unsigned char *tmps = NULL;",
          "74:     const unsigned char *encoded = NULL;",
          "89:             return 0;",
          "91:         encoded_len = SSL_SIG_LENGTH;",
          "92:         encoded = m;",
          "94:         if (!encode_pkcs1(&tmps, &encoded_len, type, m, m_len))",
          "95:             goto err;",
          "96:         encoded = tmps;",
          "99:     if (encoded_len > RSA_size(rsa) - RSA_PKCS1_PADDING_SIZE) {",
          "101:         goto err;",
          "103:     encrypt_len = RSA_private_encrypt(encoded_len, encoded, sigret, rsa,",
          "104:                                       RSA_PKCS1_PADDING);",
          "105:     if (encrypt_len <= 0)",
          "106:         goto err;",
          "109:     ret = 1;",
          "111: err:",
          "112:     OPENSSL_clear_free(tmps, (size_t)encoded_len);",
          "124: int int_rsa_verify(int type, const unsigned char *m, unsigned int m_len,",
          "128:     int decrypt_len, ret = 0, encoded_len = 0;",
          "129:     unsigned char *decrypt_buf = NULL, *encoded = NULL;",
          "131:     if (siglen != (size_t)RSA_size(rsa)) {",
          "133:         return 0;",
          "137:     decrypt_buf = OPENSSL_malloc(siglen);",
          "138:     if (decrypt_buf == NULL) {",
          "143:     decrypt_len = RSA_public_decrypt((int)siglen, sigbuf, decrypt_buf, rsa,",
          "144:                                      RSA_PKCS1_PADDING);",
          "145:     if (decrypt_len <= 0)",
          "148:     if (type == NID_md5_sha1) {",
          "154:         if (decrypt_len != SSL_SIG_LENGTH) {",
          "156:             goto err;",
          "159:         if (rm != NULL) {",
          "160:             memcpy(rm, decrypt_buf, SSL_SIG_LENGTH);",
          "162:         } else {",
          "163:             if (m_len != SSL_SIG_LENGTH) {",
          "164:                 RSAerr(RSA_F_INT_RSA_VERIFY, RSA_R_INVALID_MESSAGE_LENGTH);",
          "165:                 goto err;",
          "166:             }",
          "168:             if (memcmp(decrypt_buf, m, SSL_SIG_LENGTH) != 0) {",
          "169:                 RSAerr(RSA_F_INT_RSA_VERIFY, RSA_R_BAD_SIGNATURE);",
          "170:                 goto err;",
          "171:             }",
          "173:     } else if (type == NID_mdc2 && decrypt_len == 2 + 16",
          "174:                && decrypt_buf[0] == 0x04 && decrypt_buf[1] == 0x10) {",
          "179:         if (rm != NULL) {",
          "180:             memcpy(rm, decrypt_buf + 2, 16);",
          "182:         } else {",
          "183:             if (m_len != 16) {",
          "184:                 RSAerr(RSA_F_INT_RSA_VERIFY, RSA_R_INVALID_MESSAGE_LENGTH);",
          "185:                 goto err;",
          "186:             }",
          "188:             if (memcmp(m, decrypt_buf + 2, 16) != 0) {",
          "189:                 RSAerr(RSA_F_INT_RSA_VERIFY, RSA_R_BAD_SIGNATURE);",
          "190:                 goto err;",
          "191:             }",
          "192:         }",
          "193:     } else {",
          "199:         if (rm != NULL) {",
          "200:             const EVP_MD *md = EVP_get_digestbynid(type);",
          "201:             if (md == NULL) {",
          "202:                 RSAerr(RSA_F_INT_RSA_VERIFY, RSA_R_UNKNOWN_ALGORITHM_TYPE);",
          "203:                 goto err;",
          "204:             }",
          "206:             m_len = EVP_MD_size(md);",
          "207:             if (m_len > (size_t)decrypt_len) {",
          "208:                 RSAerr(RSA_F_INT_RSA_VERIFY, RSA_R_INVALID_DIGEST_LENGTH);",
          "209:                 goto err;",
          "210:             }",
          "211:             m = decrypt_buf + decrypt_len - m_len;",
          "215:         if (!encode_pkcs1(&encoded, &encoded_len, type, m, m_len))",
          "216:             goto err;",
          "218:         if (encoded_len != decrypt_len",
          "219:             || memcmp(encoded, decrypt_buf, encoded_len) != 0) {",
          "220:             RSAerr(RSA_F_INT_RSA_VERIFY, RSA_R_BAD_SIGNATURE);",
          "225:         if (rm != NULL) {",
          "226:             memcpy(rm, m, m_len);",
          "228:         }",
          "231:     ret = 1;",
          "233: err:",
          "234:     OPENSSL_clear_free(encoded, (size_t)encoded_len);",
          "235:     OPENSSL_clear_free(decrypt_buf, siglen);",
          "236:     return ret;",
          "239: int RSA_verify(int type, const unsigned char *m, unsigned int m_len,",
          "244:         return rsa->meth->rsa_verify(type, m, m_len, sigbuf, siglen, rsa);",
          "247:     return int_rsa_verify(type, m, m_len, NULL, NULL, sigbuf, siglen, rsa);",
          "",
          "---------------"
        ],
        "include/openssl/rsa.h||include/openssl/rsa.h": [
          "File: include/openssl/rsa.h -> include/openssl/rsa.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "464: # define RSA_F_CHECK_PADDING_MD                           140",
          "465: # define RSA_F_INT_RSA_VERIFY                             145",
          "466: # define RSA_F_OLD_RSA_PRIV_DECODE                        147",
          "467: # define RSA_F_PKEY_RSA_CTRL                              143",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "465: # define RSA_F_ENCODE_PKCS1                               146",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5d0634a93bdc18e753d641c4563cb18f685e148f",
      "candidate_info": {
        "commit_hash": "5d0634a93bdc18e753d641c4563cb18f685e148f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/5d0634a93bdc18e753d641c4563cb18f685e148f",
        "files": [
          "crypto/asn1/a_digest.c",
          "crypto/asn1/tasn_new.c",
          "crypto/evp/pmeth_lib.c",
          "crypto/ex_data.c",
          "crypto/x509/x_name.c",
          "ssl/statem/statem_srvr.c"
        ],
        "message": "Combined patch against OpenSSL_1_1_0-stable branch for the following issues:\n\nFixed a memory leak in ASN1_digest and ASN1_item_digest.\nReworked error handling in asn1_item_embed_new.\nFixed error handling in int_ctx_new and EVP_PKEY_CTX_dup.\nFixed a memory leak in CRYPTO_free_ex_data.\nReworked error handing in x509_name_ex_d2i, x509_name_encode and x509_name_canon.\nCheck for null pointer in tls_process_cert_verify.\n\nFixes #2103 #2104 #2105 #2109 #2111 #2115\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2163)",
        "before_after_code_files": [
          "crypto/asn1/a_digest.c||crypto/asn1/a_digest.c",
          "crypto/asn1/tasn_new.c||crypto/asn1/tasn_new.c",
          "crypto/evp/pmeth_lib.c||crypto/evp/pmeth_lib.c",
          "crypto/ex_data.c||crypto/ex_data.c",
          "crypto/x509/x_name.c||crypto/x509/x_name.c",
          "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/asn1/a_digest.c||crypto/asn1/a_digest.c": [
          "File: crypto/asn1/a_digest.c -> crypto/asn1/a_digest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:     p = str;",
          "38:     i2d(data, &p);",
          "41:         return 0;",
          "42:     OPENSSL_free(str);",
          "43:     return (1);",
          "44: }",
          "",
          "[Removed Lines]",
          "40:     if (!EVP_Digest(str, i, md, len, type, NULL))",
          "",
          "[Added Lines]",
          "40:     if (!EVP_Digest(str, i, md, len, type, NULL)) {",
          "41:         OPENSSL_free(str);",
          "43:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:     if (!str)",
          "56:         return (0);",
          "59:         return 0;",
          "60:     OPENSSL_free(str);",
          "61:     return (1);",
          "62: }",
          "",
          "[Removed Lines]",
          "58:     if (!EVP_Digest(str, i, md, len, type, NULL))",
          "",
          "[Added Lines]",
          "60:     if (!EVP_Digest(str, i, md, len, type, NULL)) {",
          "61:         OPENSSL_free(str);",
          "63:     }",
          "",
          "---------------"
        ],
        "crypto/asn1/tasn_new.c||crypto/asn1/tasn_new.c": [
          "File: crypto/asn1/tasn_new.c -> crypto/asn1/tasn_new.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:         }",
          "101:         asn1_set_choice_selector(pval, -1, it);",
          "102:         if (asn1_cb && !asn1_cb(ASN1_OP_NEW_POST, pval, it, NULL))",
          "104:         break;",
          "106:     case ASN1_ITYPE_NDEF_SEQUENCE:",
          "",
          "[Removed Lines]",
          "103:             goto auxerr;",
          "",
          "[Added Lines]",
          "103:             goto auxerr2;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:         }",
          "127:         if (asn1_do_lock(pval, 0, it) < 0)",
          "129:         asn1_enc_init(pval, it);",
          "130:         for (i = 0, tt = it->templates; i < it->tcount; tt++, i++) {",
          "131:             pseqval = asn1_get_field_ptr(pval, tt);",
          "132:             if (!asn1_template_new(pseqval, tt))",
          "134:         }",
          "135:         if (asn1_cb && !asn1_cb(ASN1_OP_NEW_POST, pval, it, NULL))",
          "137:         break;",
          "138:     }",
          "139: #ifndef OPENSSL_NO_CRYPTO_MDEBUG",
          "",
          "[Removed Lines]",
          "128:             goto memerr;",
          "133:                 goto memerr;",
          "136:             goto auxerr;",
          "",
          "[Added Lines]",
          "128:             goto memerr2;",
          "133:                 goto memerr2;",
          "136:             goto auxerr2;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "141: #endif",
          "142:     return 1;",
          "144:  memerr:",
          "145:     ASN1err(ASN1_F_ASN1_ITEM_EMBED_NEW, ERR_R_MALLOC_FAILURE);",
          "146: #ifndef OPENSSL_NO_CRYPTO_MDEBUG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "144:  memerr2:",
          "145:     ASN1_item_ex_free(pval, it);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "148: #endif",
          "149:     return 0;",
          "151:  auxerr:",
          "152:     ASN1err(ASN1_F_ASN1_ITEM_EMBED_NEW, ASN1_R_AUX_ERROR);",
          "154: #ifndef OPENSSL_NO_CRYPTO_MDEBUG",
          "155:     OPENSSL_mem_debug_pop();",
          "156: #endif",
          "",
          "[Removed Lines]",
          "153:     ASN1_item_ex_free(pval, it);",
          "",
          "[Added Lines]",
          "153:  auxerr2:",
          "154:     ASN1_item_ex_free(pval, it);",
          "",
          "---------------"
        ],
        "crypto/evp/pmeth_lib.c||crypto/evp/pmeth_lib.c": [
          "File: crypto/evp/pmeth_lib.c -> crypto/evp/pmeth_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:     if (pmeth->init) {",
          "135:         if (pmeth->init(ret) <= 0) {",
          "136:             EVP_PKEY_CTX_free(ret);",
          "137:             return NULL;",
          "138:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136:             ret->pmeth = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "258:     if (pctx->pmeth->copy(rctx, pctx) > 0)",
          "259:         return rctx;",
          "261:     EVP_PKEY_CTX_free(rctx);",
          "262:     return NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "262:     rctx->pmeth = NULL;",
          "",
          "---------------"
        ],
        "crypto/ex_data.c||crypto/ex_data.c": [
          "File: crypto/ex_data.c -> crypto/ex_data.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "307:     int mx, i;",
          "308:     EX_CALLBACKS *ip;",
          "309:     void *ptr;",
          "310:     EX_CALLBACK *stack[10];",
          "311:     EX_CALLBACK **storage = NULL;",
          "313:     if ((ip = get_and_lock(class_index)) == NULL)",
          "316:     mx = sk_EX_CALLBACK_num(ip->meth);",
          "317:     if (mx > 0) {",
          "",
          "[Removed Lines]",
          "314:         return;",
          "",
          "[Added Lines]",
          "310:     EX_CALLBACK *f;",
          "315:         goto err;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "325:     }",
          "326:     CRYPTO_THREAD_unlock(ex_data_lock);",
          "332:     for (i = 0; i < mx; i++) {",
          "334:             ptr = CRYPTO_get_ex_data(ad, i);",
          "337:         }",
          "338:     }",
          "340:     if (storage != stack)",
          "341:         OPENSSL_free(storage);",
          "342:     sk_void_free(ad->sk);",
          "343:     ad->sk = NULL;",
          "344: }",
          "",
          "[Removed Lines]",
          "328:     if (mx > 0 && storage == NULL) {",
          "329:         CRYPTOerr(CRYPTO_F_CRYPTO_FREE_EX_DATA, ERR_R_MALLOC_FAILURE);",
          "330:         return;",
          "331:     }",
          "333:         if (storage[i] && storage[i]->free_func) {",
          "335:             storage[i]->free_func(obj, ptr, ad, i,",
          "336:                                   storage[i]->argl, storage[i]->argp);",
          "",
          "[Added Lines]",
          "330:         if (storage != NULL)",
          "331:             f = storage[i];",
          "332:         else {",
          "333:             CRYPTO_THREAD_write_lock(ex_data_lock);",
          "334:             f = sk_EX_CALLBACK_value(ip->meth, i);",
          "335:             CRYPTO_THREAD_unlock(ex_data_lock);",
          "336:         }",
          "337:         if (f != NULL && f->free_func != NULL) {",
          "339:             f->free_func(obj, ptr, ad, i, f->argl, f->argp);",
          "345:  err:",
          "",
          "---------------"
        ],
        "crypto/x509/x_name.c||crypto/x509/x_name.c": [
          "File: crypto/x509/x_name.c -> crypto/x509/x_name.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "126: }",
          "129: {",
          "131: }",
          "133: static int x509_name_ex_d2i(ASN1_VALUE **val,",
          "",
          "[Removed Lines]",
          "128: static void name_entry_stack_free(STACK_OF(X509_NAME_ENTRY) *ents)",
          "130:     sk_X509_NAME_ENTRY_pop_free(ents, X509_NAME_ENTRY_free);",
          "",
          "[Added Lines]",
          "128: static void local_sk_X509_NAME_ENTRY_free(STACK_OF(X509_NAME_ENTRY) *ne)",
          "130:     sk_X509_NAME_ENTRY_free(ne);",
          "131: }",
          "133: static void local_sk_X509_NAME_ENTRY_pop_free(STACK_OF(X509_NAME_ENTRY) *ne)",
          "134: {",
          "135:     sk_X509_NAME_ENTRY_pop_free(ne, X509_NAME_ENTRY_free);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "180:             entry->set = i;",
          "181:             if (!sk_X509_NAME_ENTRY_push(nm.x->entries, entry))",
          "182:                 goto err;",
          "183:         }",
          "184:     }",
          "192:     ret = x509_name_canon(nm.x);",
          "193:     if (!ret)",
          "194:         goto err;",
          "195:     nm.x->modified = 0;",
          "198:     return ret;",
          "200:  err:",
          "210:     ASN1err(ASN1_F_X509_NAME_EX_D2I, ERR_R_NESTED_ASN1_ERROR);",
          "211:     return 0;",
          "212: }",
          "",
          "[Removed Lines]",
          "190:     sk_STACK_OF_X509_NAME_ENTRY_pop_free(intname.s, sk_X509_NAME_ENTRY_free);",
          "191:     intname.s = NULL;",
          "205:     if (intname.s != NULL) {",
          "206:         sk_X509_NAME_ENTRY_zero(nm.x->entries);",
          "207:         sk_STACK_OF_X509_NAME_ENTRY_pop_free(intname.s, name_entry_stack_free);",
          "208:     }",
          "209:     X509_NAME_free(nm.x);",
          "",
          "[Added Lines]",
          "188:             sk_X509_NAME_ENTRY_set(entries, j, NULL);",
          "194:     sk_STACK_OF_X509_NAME_ENTRY_pop_free(intname.s,",
          "195:                                          local_sk_X509_NAME_ENTRY_free);",
          "202:     if (nm.x != NULL)",
          "203:         X509_NAME_free(nm.x);",
          "204:     sk_STACK_OF_X509_NAME_ENTRY_pop_free(intname.s,",
          "205:                                          local_sk_X509_NAME_ENTRY_pop_free);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "232:     return ret;",
          "233: }",
          "245: static int x509_name_encode(X509_NAME *a)",
          "246: {",
          "247:     union {",
          "",
          "[Removed Lines]",
          "235: static void local_sk_X509_NAME_ENTRY_free(STACK_OF(X509_NAME_ENTRY) *ne)",
          "236: {",
          "237:     sk_X509_NAME_ENTRY_free(ne);",
          "238: }",
          "240: static void local_sk_X509_NAME_ENTRY_pop_free(STACK_OF(X509_NAME_ENTRY) *ne)",
          "241: {",
          "242:     sk_X509_NAME_ENTRY_pop_free(ne, X509_NAME_ENTRY_free);",
          "243: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "264:             entries = sk_X509_NAME_ENTRY_new_null();",
          "265:             if (!entries)",
          "266:                 goto memerr;",
          "268:                 goto memerr;",
          "269:             set = entry->set;",
          "270:         }",
          "271:         if (!sk_X509_NAME_ENTRY_push(entries, entry))",
          "",
          "[Removed Lines]",
          "267:             if (!sk_STACK_OF_X509_NAME_ENTRY_push(intname.s, entries))",
          "",
          "[Added Lines]",
          "253:             if (!sk_STACK_OF_X509_NAME_ENTRY_push(intname.s, entries)) {",
          "254:                 sk_X509_NAME_ENTRY_free(entries);",
          "256:             }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "333:             entries = sk_X509_NAME_ENTRY_new_null();",
          "334:             if (!entries)",
          "335:                 goto err;",
          "337:                 goto err;",
          "338:             set = entry->set;",
          "339:         }",
          "340:         tmpentry = X509_NAME_ENTRY_new();",
          "",
          "[Removed Lines]",
          "336:             if (!sk_STACK_OF_X509_NAME_ENTRY_push(intname, entries))",
          "",
          "[Added Lines]",
          "324:             if (!sk_STACK_OF_X509_NAME_ENTRY_push(intname, entries)) {",
          "325:                 sk_X509_NAME_ENTRY_free(entries);",
          "327:             }",
          "",
          "---------------"
        ],
        "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c": [
          "File: ssl/statem/statem_srvr.c -> ssl/statem/statem_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2716:     peer = s->session->peer;",
          "2717:     pkey = X509_get0_pubkey(peer);",
          "2718:     type = X509_certificate_type(peer, pkey);",
          "2720:     if (!(type & EVP_PKT_SIGN)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2718:     if (pkey == NULL) {",
          "2719:         al = SSL_AD_INTERNAL_ERROR;",
          "2720:         goto f_err;",
          "2721:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "054ef95f56d5dc9feb6f4b9272d3d8bd27b4d4c6",
      "candidate_info": {
        "commit_hash": "054ef95f56d5dc9feb6f4b9272d3d8bd27b4d4c6",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/054ef95f56d5dc9feb6f4b9272d3d8bd27b4d4c6",
        "files": [
          "Configurations/10-main.conf",
          "Makefile.shared"
        ],
        "message": "Configurations/10-main.cf: AIX \"facelift\".\n\nImprove interchangeability of aix*-gcc targets by linking shared\nlibraries with -static-libgcc, and address linking problems with\nvendor compiler.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(cherry picked from commit f780eaad5be140cf192191b8d79dc3671443e0b2)",
        "before_after_code_files": [
          "Configurations/10-main.conf||Configurations/10-main.conf",
          "Makefile.shared||Makefile.shared"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Configurations/10-main.conf||Configurations/10-main.conf": [
          "File: Configurations/10-main.conf -> Configurations/10-main.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "1142:     },",
          "1144: #### IBM's AIX.",
          "1145:     \"aix-gcc\" => {",
          "1146:         inherit_from     => [ \"BASE_unix\", asm(\"ppc32_asm\") ],",
          "1147:         cc               => \"gcc\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1145:     # Below targets assume AIX >=5. Caveat lector. If you are accustomed",
          "1146:     # to control compilation \"bitness\" by setting $OBJECT_MODE environment",
          "1147:     # variable, then you should know that in OpenSSL case it's considered",
          "1148:     # only in ./config. Once configured, build procedure remains \"deaf\" to",
          "1149:     # current value of $OBJECT_MODE.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1155:         perlasm_scheme   => \"aix32\",",
          "1156:         dso_scheme       => \"dlfcn\",",
          "1157:         shared_target    => \"aix-shared\",",
          "1159:         shared_extension => \".so.\\$(SHLIB_MAJOR).\\$(SHLIB_MINOR)\",",
          "1160:         arflags          => \"-X32\",",
          "1161:     },",
          "",
          "[Removed Lines]",
          "1158:         shared_ldflag    => \"-shared -Wl,-G\",",
          "",
          "[Added Lines]",
          "1163:         shared_ldflag    => \"-shared -static-libgcc -Wl,-G\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1172:         perlasm_scheme   => \"aix64\",",
          "1173:         dso_scheme       => \"dlfcn\",",
          "1174:         shared_target    => \"aix-shared\",",
          "1176:         shared_extension => \".so.\\$(SHLIB_MAJOR).\\$(SHLIB_MINOR)\",",
          "1177:         arflags          => \"-X64\",",
          "1178:     },",
          "1182:     \"aix-cc\" => {",
          "1183:         inherit_from     => [ \"BASE_unix\", asm(\"ppc32_asm\") ],",
          "1184:         cc               => \"cc\",",
          "",
          "[Removed Lines]",
          "1175:         shared_ldflag    => \"-maix64 -shared -Wl,-G\",",
          "1179:     # Below targets assume AIX 5. Idea is to effectively disregard",
          "1180:     # $OBJECT_MODE at build time. $OBJECT_MODE is respected at",
          "1181:     # ./config stage!",
          "",
          "[Added Lines]",
          "1180:         shared_ldflag    => \"-maix64 -shared -static-libgcc -Wl,-G\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1189:         sys_id           => \"AIX\",",
          "1190:         bn_ops           => \"BN_LLONG RC4_CHAR\",",
          "1191:         thread_scheme    => \"pthreads\",",
          "1192:         perlasm_scheme   => \"aix32\",",
          "1193:         dso_scheme       => \"dlfcn\",",
          "1194:         shared_target    => \"aix-shared\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1194:         ex_libs          => threads(\"-lpthreads\"),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1206:         sys_id           => \"AIX\",",
          "1207:         bn_ops           => \"SIXTY_FOUR_BIT_LONG RC4_CHAR\",",
          "1208:         thread_scheme    => \"pthreads\",",
          "1209:         perlasm_scheme   => \"aix64\",",
          "1210:         dso_scheme       => \"dlfcn\",",
          "1211:         shared_target    => \"aix-shared\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1212:         ex_libs          => threads(\"-lpthreads\"),",
          "",
          "---------------"
        ],
        "Makefile.shared||Makefile.shared": [
          "File: Makefile.shared -> Makefile.shared",
          "--- Hunk 1 ---",
          "[Context before]",
          "150: LINK_SO_SHLIB_VIA_O= \\",
          "151:   SHOBJECTS=$(DSTDIR)/lib$(LIBNAME).o; \\",
          "152:   ALL=$$ALLSYMSFLAGS; ALLSYMSFLAGS=; NOALLSYMSFLAGS=; \\",
          "155:   $(LINK_SO) && ( echo rm -f $$SHOBJECTS; rm -f $$SHOBJECTS )",
          "157: LINK_SO_SHLIB_UNPACKED= \\",
          "",
          "[Removed Lines]",
          "153:   ( echo ld $(LDFLAGS) -r -o $$SHOBJECTS.o $$ALL lib$(LIBNAME).a $(LIBEXTRAS); \\",
          "154:     ld $(LDFLAGS) -r -o $$SHOBJECTS.o $$ALL $(DSTDIR)/lib$(LIBNAME).a $(LIBEXTRAS) ); \\",
          "",
          "[Added Lines]",
          "153:   ( echo ld $(LDFLAGS) -r -o $$SHOBJECTS $$ALL lib$(LIBNAME).a $(LIBEXTRAS); \\",
          "154:     ld $(LDFLAGS) -r -o $$SHOBJECTS $$ALL $(DSTDIR)/lib$(LIBNAME).a $(LIBEXTRAS) ); \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "526:  ALLSYMSFLAGS=''; \\",
          "527:  NOALLSYMSFLAGS=''; \\",
          "528:  SHAREDFLAGS='$(CFLAGS) $(SHARED_LDFLAGS) -Wl,-bexpall,-bnolibpath,-bM:SRE'; \\",
          "529:  $(LINK_SO_DSO);",
          "530: link_shlib.aix:",
          "531:  @ $(CALC_VERSIONS); \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "529:  rm -f $(DSTDIR)/$$SHLIB$$SHLIB_SOVER 2>&1 > /dev/null ; \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "536:  ALLSYMSFLAGS='-bnogc'; \\",
          "537:  NOALLSYMSFLAGS=''; \\",
          "538:  SHAREDFLAGS='$(CFLAGS) $(SHARED_LDFLAGS) -Wl,-bexpall,-bnolibpath,-bM:SRE'; \\",
          "539:  $(LINK_SO_SHLIB_VIA_O)",
          "540: link_app.aix:",
          "541:  LDFLAGS=\"$(CFLAGS) $(LDFLAGS) -Wl,-brtl,-blibpath:$(LIBRPATH):$${LIBPATH:-/usr/lib:/lib}\"; \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "540:  rm -f $(DSTDIR)/$$SHLIB$$SHLIB_SOVER 2>&1 > /dev/null ; \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "07bc93f479bb73567b23ceb6c2d96e7cc511edd3",
      "candidate_info": {
        "commit_hash": "07bc93f479bb73567b23ceb6c2d96e7cc511edd3",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/07bc93f479bb73567b23ceb6c2d96e7cc511edd3",
        "files": [
          "crypto/o_time.c"
        ],
        "message": "Remove obsolete comment\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1613)\n(cherry picked from commit 7c120357e5ef434c8a7d1d1c3ba4f2a33266374e)",
        "before_after_code_files": [
          "crypto/o_time.c||crypto/o_time.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/o_time.c||crypto/o_time.c": [
          "File: crypto/o_time.c -> crypto/o_time.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     struct tm *ts = NULL;",
          "54: #if defined(OPENSSL_THREADS) && !defined(OPENSSL_SYS_WIN32) && (!defined(OPENSSL_SYS_VMS) || defined(gmtime_r)) && !defined(OPENSSL_SYS_MACOSX)",
          "60:     ts = result;",
          "61: #elif !defined(OPENSSL_SYS_VMS) || defined(VMS_GMTIME_OK)",
          "62:     ts = gmtime(timer);",
          "",
          "[Removed Lines]",
          "59:     gmtime_r(timer, result);",
          "",
          "[Added Lines]",
          "55:     if (gmtime_r(timer, result) == NULL)",
          "56:         return NULL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5229bbe73909c1f62b8696f20d0a291f7afc767c",
      "candidate_info": {
        "commit_hash": "5229bbe73909c1f62b8696f20d0a291f7afc767c",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/5229bbe73909c1f62b8696f20d0a291f7afc767c",
        "files": [
          "test/ct_test.c"
        ],
        "message": "Add test for CT_POLICY_EVAL_CTX default time\n\nChecks that the epoch_time_in_ms field of CT_POLICY_EVAL_CTX is initialized\nto approximately the current time (as returned by time()) by default. This\nprevents the addition of this field, and its verification during SCT\nvalidation, from breaking existing code that calls SCT_validate directly.\n\nReviewed-by: Viktor Dukhovni <viktor@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1554)\n(cherry picked from commit ebcb536858a271e8812fb9bbafbc0b825e5ece24)",
        "before_after_code_files": [
          "test/ct_test.c||test/ct_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/ct_test.c||test/ct_test.c": [
          "File: test/ct_test.c -> test/ct_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include <ctype.h>",
          "11: #include <stdio.h>",
          "12: #include <stdlib.h>",
          "13: #include <string.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: #include <math.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "548:     EXECUTE_CT_TEST();",
          "549: }",
          "551: int main(int argc, char *argv[])",
          "552: {",
          "553:     int result = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "556: static int test_default_ct_policy_eval_ctx_time_is_now()",
          "557: {",
          "558:     int success = 0;",
          "559:     CT_POLICY_EVAL_CTX *ct_policy_ctx = CT_POLICY_EVAL_CTX_new();",
          "560:     const time_t default_time = CT_POLICY_EVAL_CTX_get_time(ct_policy_ctx) /",
          "561:             1000;",
          "564:     if (fabs(difftime(time(NULL), default_time)) > time_tolerance) {",
          "565:         fprintf(stderr,",
          "566:                 \"Default CT_POLICY_EVAL_CTX time is not approximately now.\\n\");",
          "567:         goto end;",
          "568:     }",
          "570:     success = 1;",
          "571: end:",
          "572:     CT_POLICY_EVAL_CTX_free(ct_policy_ctx);",
          "573:     return success;",
          "574: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "571:     ADD_TEST(test_verify_fails_for_future_sct);",
          "572:     ADD_TEST(test_decode_tls_sct);",
          "573:     ADD_TEST(test_encode_tls_sct);",
          "575:     result = run_tests(argv[0]);",
          "576:     ERR_print_errors_fp(stderr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "599:     ADD_TEST(test_default_ct_policy_eval_ctx_time_is_now);",
          "",
          "---------------"
        ]
      }
    }
  ]
}