{
  "cve_id": "CVE-2022-23570",
  "cve_desc": "Tensorflow is an Open Source Machine Learning Framework. When decoding a tensor from protobuf, TensorFlow might do a null-dereference if attributes of some mutable arguments to some operations are missing from the proto. This is guarded by a `DCHECK`. However, `DCHECK` is a no-op in production builds and an assertion failure in debug builds. In the first case execution proceeds to the dereferencing of the null pointer, whereas in the second case it results in a crash due to the assertion failure. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, and TensorFlow 2.6.3, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "8a513cec4bec15961fbfdedcaa5376522980455c",
  "patch_info": {
    "commit_hash": "8a513cec4bec15961fbfdedcaa5376522980455c",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/8a513cec4bec15961fbfdedcaa5376522980455c",
    "files": [
      "tensorflow/core/framework/full_type_util.cc"
    ],
    "message": "Prevent null dereference read in `SpecializeType()`\n\nFor some adversarial protos, the attribute for a key might not exist.\n\nPiperOrigin-RevId: 408382090\nChange-Id: Ie7eabe532c9ff280fce5dce1f6cdb93c76c2e040",
    "before_after_code_files": [
      "tensorflow/core/framework/full_type_util.cc||tensorflow/core/framework/full_type_util.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/framework/full_type_util.cc||tensorflow/core/framework/full_type_util.cc": [
      "File: tensorflow/core/framework/full_type_util.cc -> tensorflow/core/framework/full_type_util.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "22: #include \"tensorflow/core/framework/op_def.pb.h\"",
      "23: #include \"tensorflow/core/framework/types.h\"",
      "24: #include \"tensorflow/core/platform/statusor.h\"",
      "26: namespace tensorflow {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25: #include \"tensorflow/core/protobuf/error_codes.pb.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "102:       auto* arg = t->mutable_args(i);",
      "103:       if (arg->type_id() == TFT_VAR) {",
      "104:         const auto* attr = attrs.Find(arg->s());",
      "106:         if (attr->value_case() == AttrValue::kList) {",
      "107:           const auto& attr_list = attr->list();",
      "108:           arg->set_type_id(TFT_PRODUCT);",
      "",
      "[Removed Lines]",
      "105:         DCHECK(attr != nullptr);",
      "",
      "[Added Lines]",
      "106:         if (attr == nullptr) {",
      "107:           return Status(",
      "108:               error::INVALID_ARGUMENT,",
      "109:               absl::StrCat(\"Could not find an attribute for key \", arg->s()));",
      "110:         }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "634b80a6ee614cee787befd371f31269911b0d19",
      "candidate_info": {
        "commit_hash": "634b80a6ee614cee787befd371f31269911b0d19",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/634b80a6ee614cee787befd371f31269911b0d19",
        "files": [
          "tensorflow/core/framework/full_type_util.cc",
          "tensorflow/core/framework/full_type_util_test.cc"
        ],
        "message": "Strengthen input verification for SpecializeType by replacing DCHECK with explicit test/status return.\n\nPiperOrigin-RevId: 453436708",
        "before_after_code_files": [
          "tensorflow/core/framework/full_type_util.cc||tensorflow/core/framework/full_type_util.cc",
          "tensorflow/core/framework/full_type_util_test.cc||tensorflow/core/framework/full_type_util_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/framework/full_type_util.cc||tensorflow/core/framework/full_type_util.cc"
          ],
          "candidate": [
            "tensorflow/core/framework/full_type_util.cc||tensorflow/core/framework/full_type_util.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/framework/full_type_util.cc||tensorflow/core/framework/full_type_util.cc": [
          "File: tensorflow/core/framework/full_type_util.cc -> tensorflow/core/framework/full_type_util.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "174: }",
          "176: Status SubstituteForEach(AttrMap& attrs, FullTypeDef& t) {",
          "179:   const auto& cont = t.args(0);",
          "180:   const auto& tmpl = t.args(1);",
          "",
          "[Removed Lines]",
          "177:   DCHECK_EQ(t.args_size(), 3);",
          "",
          "[Added Lines]",
          "177:   if (t.args_size() != 3) {",
          "178:     return Status(error::INVALID_ARGUMENT,",
          "179:                   absl::StrCat(\"illegal FOR_EACH type, expected 3 args, got \",",
          "180:                                t.args_size()));",
          "181:   }",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/full_type_util_test.cc||tensorflow/core/framework/full_type_util_test.cc": [
          "File: tensorflow/core/framework/full_type_util_test.cc -> tensorflow/core/framework/full_type_util_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "491:   EXPECT_EQ(t_actual.args(1).args(0).args(0).args_size(), 0);",
          "492: }",
          "494: TEST(GetArgDefaults, DefaultUnsetFromNoArgs) {",
          "495:   FullTypeDef t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "494: TEST(SpecializeType, ForEachRejectsMalformedInput) {",
          "495:   OpDef op;",
          "496:   FullTypeDef* t = op.add_output_arg()->mutable_experimental_full_type();",
          "497:   t->set_type_id(TFT_FOR_EACH);",
          "498:   t->add_args()->set_type_id(TFT_PRODUCT);",
          "500:   NodeDef ndef;",
          "501:   AttrSlice attrs(ndef);",
          "503:   FullTypeDef ft;",
          "504:   EXPECT_FALSE(SpecializeType(attrs, op, ft).ok());",
          "505: }",
          "507: TEST(SpecializeType, RemovesLegacyVariant) {",
          "508:   OpDef op;",
          "509:   FullTypeDef* t = op.add_output_arg()->mutable_experimental_full_type();",
          "510:   t->set_type_id(TFT_ARRAY);",
          "511:   t->add_args()->set_type_id(TFT_TENSOR);",
          "512:   t->mutable_args(0)->add_args()->set_type_id(TFT_LEGACY_VARIANT);",
          "513:   t->add_args()->set_type_id(TFT_TENSOR);",
          "514:   t->mutable_args(1)->add_args()->set_type_id(TFT_FLOAT);",
          "516:   AttrSlice empty;",
          "518:   FullTypeDef ft;",
          "519:   TF_ASSERT_OK(SpecializeType(empty, op, ft));",
          "521:   EXPECT_EQ(ft.type_id(), TFT_PRODUCT);",
          "522:   EXPECT_EQ(ft.args_size(), 1);",
          "524:   const FullTypeDef& t_actual = ft.args(0);",
          "525:   EXPECT_EQ(t_actual.type_id(), TFT_ARRAY);",
          "526:   EXPECT_EQ(t_actual.args_size(), 0);",
          "527: }",
          "529: TEST(SpecializeType, RemovesLegacyVariantAfterExpansion) {",
          "530:   OpDef op;",
          "531:   FullTypeDef* t = op.add_output_arg()->mutable_experimental_full_type();",
          "532:   t->set_type_id(TFT_ARRAY);",
          "533:   t->add_args()->set_type_id(TFT_TENSOR);",
          "534:   t->mutable_args(0)->add_args()->set_type_id(TFT_VAR);",
          "535:   t->mutable_args(0)->mutable_args(0)->set_s(\"T\");",
          "537:   AttrValue attr;",
          "538:   attr.set_type(DT_VARIANT);",
          "539:   NodeDef ndef;",
          "540:   (*ndef.mutable_attr())[\"T\"] = attr;",
          "542:   AttrSlice attrs(ndef);",
          "544:   FullTypeDef ft;",
          "545:   TF_ASSERT_OK(SpecializeType(attrs, op, ft));",
          "547:   EXPECT_EQ(ft.type_id(), TFT_PRODUCT);",
          "548:   EXPECT_EQ(ft.args_size(), 1);",
          "550:   const FullTypeDef& t_actual = ft.args(0);",
          "551:   EXPECT_EQ(t_actual.type_id(), TFT_ARRAY);",
          "552:   EXPECT_EQ(t_actual.args_size(), 0);",
          "553: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "106ae0ea68d768dce3f1258c0b80a901d07f41d7",
      "candidate_info": {
        "commit_hash": "106ae0ea68d768dce3f1258c0b80a901d07f41d7",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/106ae0ea68d768dce3f1258c0b80a901d07f41d7",
        "files": [
          "tensorflow/core/framework/full_type_util.cc"
        ],
        "message": "Prevent null dereference read in `SpecializeType()`\n\nFor some adversarial protos, the attribute for a key might not exist.\n\nPiperOrigin-RevId: 408382090\nChange-Id: Ie7eabe532c9ff280fce5dce1f6cdb93c76c2e040",
        "before_after_code_files": [
          "tensorflow/core/framework/full_type_util.cc||tensorflow/core/framework/full_type_util.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/framework/full_type_util.cc||tensorflow/core/framework/full_type_util.cc"
          ],
          "candidate": [
            "tensorflow/core/framework/full_type_util.cc||tensorflow/core/framework/full_type_util.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/framework/full_type_util.cc||tensorflow/core/framework/full_type_util.cc": [
          "File: tensorflow/core/framework/full_type_util.cc -> tensorflow/core/framework/full_type_util.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"tensorflow/core/framework/op_def.pb.h\"",
          "23: #include \"tensorflow/core/framework/types.h\"",
          "24: #include \"tensorflow/core/platform/statusor.h\"",
          "26: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #include \"tensorflow/core/protobuf/error_codes.pb.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:       auto* arg = t->mutable_args(i);",
          "94:       if (arg->type_id() == TFT_VAR) {",
          "95:         const auto* attr = attrs.Find(arg->s());",
          "97:         if (attr->value_case() == AttrValue::kList) {",
          "98:           const auto& attr_list = attr->list();",
          "99:           arg->set_type_id(TFT_PRODUCT);",
          "",
          "[Removed Lines]",
          "96:         DCHECK(attr != nullptr);",
          "",
          "[Added Lines]",
          "97:         if (attr == nullptr) {",
          "98:           return Status(",
          "99:               error::INVALID_ARGUMENT,",
          "100:               absl::StrCat(\"Could not find an attribute for key \", arg->s()));",
          "101:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b57d9380a1fd5e44339e904dd9c955e63e42bc64",
      "candidate_info": {
        "commit_hash": "b57d9380a1fd5e44339e904dd9c955e63e42bc64",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/b57d9380a1fd5e44339e904dd9c955e63e42bc64",
        "files": [
          "tensorflow/core/framework/full_type_util.cc"
        ],
        "message": "Prevent null dereference read in `SpecializeType()`\n\nFor some adversarial protos, the attribute for a key might not exist.\n\nPiperOrigin-RevId: 408382090\nChange-Id: Ie7eabe532c9ff280fce5dce1f6cdb93c76c2e040",
        "before_after_code_files": [
          "tensorflow/core/framework/full_type_util.cc||tensorflow/core/framework/full_type_util.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/framework/full_type_util.cc||tensorflow/core/framework/full_type_util.cc"
          ],
          "candidate": [
            "tensorflow/core/framework/full_type_util.cc||tensorflow/core/framework/full_type_util.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/framework/full_type_util.cc||tensorflow/core/framework/full_type_util.cc": [
          "File: tensorflow/core/framework/full_type_util.cc -> tensorflow/core/framework/full_type_util.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"tensorflow/core/framework/op_def.pb.h\"",
          "23: #include \"tensorflow/core/framework/types.h\"",
          "24: #include \"tensorflow/core/platform/statusor.h\"",
          "26: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #include \"tensorflow/core/protobuf/error_codes.pb.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:       auto* arg = t->mutable_args(i);",
          "103:       if (arg->type_id() == TFT_VAR) {",
          "104:         const auto* attr = attrs.Find(arg->s());",
          "106:         if (attr->value_case() == AttrValue::kList) {",
          "107:           const auto& attr_list = attr->list();",
          "108:           arg->set_type_id(TFT_PRODUCT);",
          "",
          "[Removed Lines]",
          "105:         DCHECK(attr != nullptr);",
          "",
          "[Added Lines]",
          "106:         if (attr == nullptr) {",
          "107:           return Status(",
          "108:               error::INVALID_ARGUMENT,",
          "109:               absl::StrCat(\"Could not find an attribute for key \", arg->s()));",
          "110:         }",
          "",
          "---------------"
        ]
      }
    }
  ]
}