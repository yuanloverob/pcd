{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6ab61d7052d3d384e18f99af8dc4d70b42f93153",
      "candidate_info": {
        "commit_hash": "6ab61d7052d3d384e18f99af8dc4d70b42f93153",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6ab61d7052d3d384e18f99af8dc4d70b42f93153",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/insert.c",
          "src/resolve.c",
          "src/update.c",
          "src/vdbe.c"
        ],
        "message": "Minor adjustments for clarity and test coverage.\n\nFossilOrigin-Name: 30065716878d4058e75eb510b0b27b68e5193d04625eb173210de8061f20f499",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/insert.c||src/insert.c",
          "src/resolve.c||src/resolve.c",
          "src/update.c||src/update.c",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 812467fbf04ce00228a8381a5eee471e4e35cc63184a4538129fcd70b7cec979",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1628:   u8 eType = COLFLAG_VIRTUAL;",
          "1629:   Table *pTab = pParse->pNewTable;",
          "1630:   Column *pCol;",
          "1632:   pCol = &(pTab->aCol[pTab->nCol-1]);",
          "1633:   if( IN_DECLARE_VTAB ){",
          "1634:     sqlite3ErrorMsg(pParse, \"virtual tables cannot use computed columns\");",
          "",
          "[Removed Lines]",
          "1631:   if( pTab==0 ) goto generated_done;",
          "",
          "[Added Lines]",
          "1631:   if( NEVER(pTab==0) ) goto generated_done;",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "857:   if( pColumn==0 && nColumn>0 ){",
          "858:     ipkColumn = pTab->iPKey;",
          "859: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "861:       testcase( pTab->tabFlags & TF_HasVirtual );",
          "863:       for(i=ipkColumn-1; i>=0; i--){",
          "864:         if( pTab->aCol[i].colFlags & COLFLAG_GENERATED ){",
          "865:           testcase( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL );",
          "867:           ipkColumn--;",
          "868:         }",
          "869:       }",
          "",
          "[Removed Lines]",
          "860:     if( pTab->tabFlags & TF_HasGenerated ){",
          "862:       testcase( pTab->tabFlags & TF_HasGenerated );",
          "866:           testcase( pTab->aCol[i].colFlags & COLFLAG_GENERATED );",
          "",
          "[Added Lines]",
          "860:     if( ipkColumn>=0 && (pTab->tabFlags & TF_HasGenerated)!=0 ){",
          "862:       testcase( pTab->tabFlags & TF_HasStored );",
          "866:           testcase( pTab->aCol[i].colFlags & COLFLAG_STORED );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2414:     }",
          "2415: #endif",
          "2416:     if( (pDestCol->colFlags & COLFLAG_GENERATED) !=",
          "2417:         (pSrcCol->colFlags & COLFLAG_GENERATED) ){",
          "2419:     }",
          "2420:     if( pDestCol->affinity!=pSrcCol->affinity ){",
          "2422:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2416: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "2441:     if( (pDestCol->colFlags & COLFLAG_GENERATED)!=0 ){",
          "2442:       if( sqlite3ExprCompare(0, pSrcCol->pDflt, pDestCol->pDflt, -1)!=0 ){",
          "2443:         testcase( pDestCol->colFlags & COLFLAG_VIRTUAL );",
          "2444:         testcase( pDestCol->colFlags & COLFLAG_STORED );",
          "2446:       }",
          "2447:     }",
          "2448: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2438:       }",
          "2439:     }",
          "2448:   }",
          "2449:   for(pDestIdx=pDest->pIndex; pDestIdx; pDestIdx=pDestIdx->pNext){",
          "2450:     if( IsUniqueIndex(pDestIdx) ){",
          "",
          "[Removed Lines]",
          "2441:     if( (pDestCol->colFlags & COLFLAG_GENERATED)!=0 ){",
          "2442:       if( sqlite3ExprCompare(0, pSrcCol->pDflt, pDestCol->pDflt, -1)!=0 ){",
          "2443:         testcase( pDestCol->colFlags & COLFLAG_VIRTUAL );",
          "2444:         testcase( pDestCol->colFlags & COLFLAG_STORED );",
          "2446:       }",
          "2447:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "633:     else if( pNC->ncFlags & NC_IsCheck ) zIn = \"CHECK constraints\";",
          "634: #endif",
          "635: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "637: #endif",
          "638:     sqlite3ErrorMsg(pParse, \"%s prohibited in %s\", zMsg, zIn);",
          "639:   }",
          "",
          "[Removed Lines]",
          "636:     else if( pNC->ncFlags & NC_GenCol ) zIn = \"GENERATED ALWAYS AS columns\";",
          "",
          "[Added Lines]",
          "636:     else if( pNC->ncFlags & NC_GenCol ) zIn = \"generated columns\";",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "314:         }",
          "315: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "316:         else if( pTab->aCol[j].colFlags & COLFLAG_GENERATED ){",
          "319:           sqlite3ErrorMsg(pParse,",
          "320:              \"cannot UPDATE generated column \\\"%s\\\"\",",
          "321:              pTab->aCol[j].zName);",
          "",
          "[Removed Lines]",
          "317:           testcase( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL );",
          "318:           testcase( pTab->aCol[i].colFlags & COLFLAG_STORED );",
          "",
          "[Added Lines]",
          "317:           testcase( pTab->aCol[j].colFlags & COLFLAG_VIRTUAL );",
          "318:           testcase( pTab->aCol[j].colFlags & COLFLAG_STORED );",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3375:       p->rc = rc = SQLITE_BUSY;",
          "3376:       goto vdbe_return;",
          "3377:     }",
          "3379:     sqlite3CloseSavepoints(db);",
          "3380:     if( p->rc==SQLITE_OK ){",
          "3381:       rc = SQLITE_DONE;",
          "",
          "[Removed Lines]",
          "3378:     assert( db->nStatement==0 );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9ee94147f086fc9cd4bcf2bcdbb1fab6d1d1f921",
      "candidate_info": {
        "commit_hash": "9ee94147f086fc9cd4bcf2bcdbb1fab6d1d1f921",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9ee94147f086fc9cd4bcf2bcdbb1fab6d1d1f921",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y"
        ],
        "message": "New tokens ALWAYS, GENERATED, and STORED used by generated columns should all be fallback tokens.\n\nFossilOrigin-Name: 13fe6978b7de208d2e27460d824f7fc778cf6ea0aabfe566b32bb410b8816f63",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4d424f3047b48fc441475137f30a719d2f079390c86fe2617710ddfb05c5e240",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "220:   CURRENT FOLLOWING PARTITION PRECEDING RANGE UNBOUNDED",
          "221:   EXCLUDE GROUPS OTHERS TIES",
          "222: %endif SQLITE_OMIT_WINDOWFUNC",
          "223:   REINDEX RENAME CTIME_KW IF",
          "224:   .",
          "225: %wildcard ANY.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "223: %ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "224:   GENERATED ALWAYS STORED",
          "225: %endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8f2b1e4c909df912209c34816ae33bf31cbb20b8",
      "candidate_info": {
        "commit_hash": "8f2b1e4c909df912209c34816ae33bf31cbb20b8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8f2b1e4c909df912209c34816ae33bf31cbb20b8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/index6.test"
        ],
        "message": "Do not assume that \"x IS NOT ?\" implies \"x NOT NULL\" when considering partial indexes. Fix for ticket [8025674847].\n\nFossilOrigin-Name: 0ba6d709b50d92db1542f2ff30535a80184b00dadf759d51e5cae7a6e37b1764",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/index6.test||test/index6.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a194e53670e25a48c2bb51b54755abff88ed6ae2596c5858fb4aac16cb452bdf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4946:   if( pE2->op==TK_NOTNULL",
          "4947:    && pE1->op!=TK_ISNULL",
          "4948:    && pE1->op!=TK_IS",
          "4949:    && pE1->op!=TK_OR",
          "4950:   ){",
          "4951:     Expr *pX = sqlite3ExprSkipCollate(pE1->pLeft);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4949:    && pE1->op!=TK_ISNOT",
          "",
          "---------------"
        ],
        "test/index6.test||test/index6.test": [
          "File: test/index6.test -> test/index6.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "423:   SELECT * FROM t0 WHERE c0 OR 1;",
          "424: } {{}}",
          "426: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "426: # 2019-05-11",
          "427: # Ticket https://sqlite.org/src/tktview/8025674847",
          "428: reset_db",
          "429: do_execsql_test index6-14.1 {",
          "430:   CREATE TABLE IF NOT EXISTS t0 (c0, c1);",
          "431:   CREATE INDEX IF NOT EXISTS i0 ON t0(c0, c1) WHERE c0 NOT NULL;",
          "432:   INSERT INTO t0(c0, c1) VALUES(NULL, 'row');",
          "433:   SELECT * FROM t0 WHERE t0.c0 IS NOT 1;",
          "434: } {{} row}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4a254f98e3fc2b214127f1714d27a2eccc4f7fda",
      "candidate_info": {
        "commit_hash": "4a254f98e3fc2b214127f1714d27a2eccc4f7fda",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4a254f98e3fc2b214127f1714d27a2eccc4f7fda",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Improvements to the LEFT JOIN strength reduction optimization.\n\nFossilOrigin-Name: 548082dfab5d9484279ccc11cd2833ac131b54b7481372b576d7c28bbb3294ea",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4ed905b18847d4dbf5a2570052abced338065f824137b90300f62d77b3159d80",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5231: int sqlite3ExprImpliesNonNullRow(Expr *p, int iTab){",
          "5232:   Walker w;",
          "5233:   p = sqlite3ExprSkipCollateAndLikely(p);",
          "5235:     p = p->pLeft;",
          "5236:   }",
          "5237:   w.xExprCallback = impliesNotNullRow;",
          "5238:   w.xSelectCallback = 0;",
          "",
          "[Removed Lines]",
          "5234:   if( p && p->op==TK_NOTNULL ){",
          "",
          "[Added Lines]",
          "5234:   if( p==0 ) return 0;",
          "5235:   if( p->op==TK_NOTNULL ){",
          "5237:   }else if( p->op==TK_AND ){",
          "5238:     if( sqlite3ExprImpliesNonNullRow(p->pLeft, iTab) ) return 1;",
          "5239:     p = p->pRight;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "069d1b1faf819c9d49a299129caeef9774d73b89",
      "candidate_info": {
        "commit_hash": "069d1b1faf819c9d49a299129caeef9774d73b89",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/069d1b1faf819c9d49a299129caeef9774d73b89",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/between.test"
        ],
        "message": "Avoid transforming TK_COLLATE or TK_UNLIKELY Expr nodes to TK_REFERENCE. Instead, transform the uppermost Expr node in the expression tree that is not of this type.\n\nFossilOrigin-Name: ba7870e292919cf6c2f4b65b63fb0420ba2718eb0a797e0ba5302eec551a4238",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/between.test||test/between.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ca4ddfefc1be1afbf366d87c47f0dd1122350d7ab34ba60020c5babb64a654a4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3391:   p->op2 = p->op;",
          "3392:   p->op = TK_REGISTER;",
          "3393:   p->iTable = iReg;",
          "",
          "[Removed Lines]",
          "3390: static void exprToRegister(Expr *p, int iReg){",
          "",
          "[Added Lines]",
          "3390: static void exprToRegister(Expr *pExpr, int iReg){",
          "3391:   Expr *p = sqlite3ExprSkipCollate(pExpr);",
          "",
          "---------------"
        ],
        "test/between.test||test/between.test": [
          "File: test/between.test -> test/between.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:   }",
          "120: } {4 2 25 27 sort t1 *}",
          "123: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122: #-------------------------------------------------------------------------",
          "123: reset_db",
          "124: do_execsql_test between-2.0 {",
          "125:   CREATE TABLE t1(x TEXT, y TEXT COLLATE nocase);",
          "126:   INSERT INTO t1 VALUES('0', 'abc');",
          "127: }",
          "129: foreach {tn expr res} {",
          "130:   1 \"x                BETWEEN 1 AND '5'\" 0",
          "131:   2 \"x COLLATE binary BETWEEN 1 AND '5'\" 0",
          "132:   3 \"x COLLATE nocase BETWEEN 1 AND '5'\" 0",
          "134:   4 \"y                  BETWEEN 'A' AND 'B'\" 1",
          "135:   5 \"y COLLATE nocase   BETWEEN 'A' AND 'B'\" 1",
          "136:   6 \"y COLLATE binary   BETWEEN 'A' AND 'B'\" 0",
          "137:   7 \"(y COLLATE binary) BETWEEN 'A' AND 'B'\" 0",
          "138: } {",
          "139:   set sql \"SELECT $expr FROM t1\"",
          "140:   do_execsql_test between-2.1.$tn $sql $res",
          "141: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}