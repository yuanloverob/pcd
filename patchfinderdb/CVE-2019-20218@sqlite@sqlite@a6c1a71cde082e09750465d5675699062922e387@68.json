{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ac4085bc2c018c430c3f7d5bd21a5ad6bb64eabb",
      "candidate_info": {
        "commit_hash": "ac4085bc2c018c430c3f7d5bd21a5ad6bb64eabb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ac4085bc2c018c430c3f7d5bd21a5ad6bb64eabb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/view.test"
        ],
        "message": "Fix a problem where self-joins on views that are aggregate queries may return the wrong result.\n\nFossilOrigin-Name: 74ef97bf51dd531a277cf22fa4d42043d93799d5a5bd550812648834460fe0b7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/view.test||test/view.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9b5d943426c9273162ecb4c561eb3b25e843318dd438239c882c9db50f788454",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5482:       continue;",
          "5483:     }",
          "5487:       continue;",
          "",
          "[Removed Lines]",
          "5484:     if( sqlite3ExprCompare(0, pThis->pSelect->pWhere, pS1->pWhere, -1) ){",
          "",
          "[Added Lines]",
          "5484:     if( sqlite3ExprCompare(0, pThis->pSelect->pWhere, pS1->pWhere, -1)",
          "5485:      || sqlite3ExprCompare(0, pThis->pSelect->pHaving, pS1->pHaving, -1)",
          "5486:     ){",
          "",
          "---------------"
        ],
        "test/view.test||test/view.test": [
          "File: test/view.test -> test/view.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "701:   set log",
          "702: } $res",
          "704: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "704: #-------------------------------------------------------------------------",
          "705: do_execsql_test view-26.0 {",
          "706:   CREATE TABLE t16(a, b, c UNIQUE);",
          "707:   INSERT INTO t16 VALUES(1, 1, 1);",
          "708:   INSERT INTO t16 VALUES(2, 2, 2);",
          "709:   INSERT INTO t16 VALUES(3, 3, 3);",
          "710:   CREATE VIEW v16 AS SELECT max(a) AS mx, min(b) AS mn FROM t16 GROUP BY c;",
          "712:   SELECT * FROM v16 AS one, v16 AS two WHERE one.mx=1;",
          "713: } {",
          "714:   1 1 1 1",
          "715:   1 1 2 2",
          "716:   1 1 3 3",
          "717: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "945a3527d5edd76dbb2dd0839434caf2d9c06024",
      "candidate_info": {
        "commit_hash": "945a3527d5edd76dbb2dd0839434caf2d9c06024",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/945a3527d5edd76dbb2dd0839434caf2d9c06024",
        "files": [
          "ext/fts5/fts5Int.h",
          "ext/fts5/fts5_config.c",
          "ext/fts5/fts5_expr.c",
          "ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5faultB.test",
          "ext/fts5/test/fts5multi.test",
          "ext/fts5/test/fts5plan.test",
          "ext/fts5/test/fts5simple.test",
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "src/test1.c",
          "src/treeview.c",
          "test/tkt-18458b1a.test",
          "test/tkt-a7debbe0.test",
          "tool/lemon.c"
        ],
        "message": "Merge latest trunk changes with this branch.\n\nFossilOrigin-Name: 14ef7543465dd14d8fa141fcceb1950b5c2d265a3e862323969d747b39c0cd8c",
        "before_after_code_files": [
          "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h",
          "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c",
          "ext/fts5/fts5_expr.c||ext/fts5/fts5_expr.c",
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5faultB.test||ext/fts5/test/fts5faultB.test",
          "ext/fts5/test/fts5multi.test||ext/fts5/test/fts5multi.test",
          "ext/fts5/test/fts5plan.test||ext/fts5/test/fts5plan.test",
          "ext/fts5/test/fts5simple.test||ext/fts5/test/fts5simple.test",
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "src/test1.c||src/test1.c",
          "src/treeview.c||src/treeview.c",
          "test/tkt-18458b1a.test||test/tkt-18458b1a.test",
          "test/tkt-a7debbe0.test||test/tkt-a7debbe0.test",
          "tool/lemon.c||tool/lemon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h": [
          "File: ext/fts5/fts5Int.h -> ext/fts5/fts5Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "695: i64 sqlite3Fts5ExprRowid(Fts5Expr*);",
          "697: void sqlite3Fts5ExprFree(Fts5Expr*);",
          "700: int sqlite3Fts5ExprInit(Fts5Global*, sqlite3*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "698: int sqlite3Fts5ExprAnd(Fts5Expr **pp1, Fts5Expr *p2);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c": [
          "File: ext/fts5/fts5_config.c -> ext/fts5/fts5_config.c"
        ],
        "ext/fts5/fts5_expr.c||ext/fts5/fts5_expr.c": [
          "File: ext/fts5/fts5_expr.c -> ext/fts5/fts5_expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "309:   }",
          "310: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "312: int sqlite3Fts5ExprAnd(Fts5Expr **pp1, Fts5Expr *p2){",
          "313:   Fts5Parse sParse;",
          "314:   memset(&sParse, 0, sizeof(sParse));",
          "316:   if( *pp1 ){",
          "317:     Fts5Expr *p1 = *pp1;",
          "318:     int nPhrase = p1->nPhrase + p2->nPhrase;",
          "320:     p1->pRoot = sqlite3Fts5ParseNode(&sParse, FTS5_AND, p1->pRoot, p2->pRoot,0);",
          "321:     p2->pRoot = 0;",
          "323:     if( sParse.rc==SQLITE_OK ){",
          "324:       Fts5ExprPhrase **ap = (Fts5ExprPhrase**)sqlite3_realloc(",
          "325:           p1->apExprPhrase, nPhrase * sizeof(Fts5ExprPhrase*)",
          "326:       );",
          "327:       if( ap==0 ){",
          "328:         sParse.rc = SQLITE_NOMEM;",
          "329:       }else{",
          "330:         int i;",
          "331:         memmove(&ap[p2->nPhrase], ap, p1->nPhrase*sizeof(Fts5ExprPhrase*));",
          "332:         for(i=0; i<p2->nPhrase; i++){",
          "333:           ap[i] = p2->apExprPhrase[i];",
          "334:         }",
          "335:         p1->nPhrase = nPhrase;",
          "336:         p1->apExprPhrase = ap;",
          "337:       }",
          "338:     }",
          "339:     sqlite3_free(p2->apExprPhrase);",
          "340:     sqlite3_free(p2);",
          "341:   }else{",
          "343:   }",
          "345:   return sParse.rc;",
          "346: }",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "503:   Fts5Config *pConfig = pTab->pConfig;",
          "504:   const int nCol = pConfig->nCol;",
          "508:   int i;",
          "533:   assert( SQLITE_INDEX_CONSTRAINT_EQ<SQLITE_INDEX_CONSTRAINT_MATCH );",
          "534:   assert( SQLITE_INDEX_CONSTRAINT_GT<SQLITE_INDEX_CONSTRAINT_MATCH );",
          "",
          "[Removed Lines]",
          "506:   int bHasMatch;",
          "507:   int iNext;",
          "510:   struct Constraint {",
          "516:   } aConstraint[] = {",
          "517:     {SQLITE_INDEX_CONSTRAINT_MATCH|SQLITE_INDEX_CONSTRAINT_EQ,",
          "518:                                     FTS5_BI_MATCH,    1, 1, -1},",
          "519:     {SQLITE_INDEX_CONSTRAINT_MATCH|SQLITE_INDEX_CONSTRAINT_EQ,",
          "520:                                     FTS5_BI_RANK,     2, 1, -1},",
          "521:     {SQLITE_INDEX_CONSTRAINT_EQ,    FTS5_BI_ROWID_EQ, 0, 0, -1},",
          "522:     {SQLITE_INDEX_CONSTRAINT_LT|SQLITE_INDEX_CONSTRAINT_LE,",
          "523:                                     FTS5_BI_ROWID_LE, 0, 0, -1},",
          "524:     {SQLITE_INDEX_CONSTRAINT_GT|SQLITE_INDEX_CONSTRAINT_GE,",
          "525:                                     FTS5_BI_ROWID_GE, 0, 0, -1},",
          "526:   };",
          "528:   int aColMap[3];",
          "529:   aColMap[0] = -1;",
          "530:   aColMap[1] = nCol;",
          "531:   aColMap[2] = nCol+1;",
          "",
          "[Added Lines]",
          "530:   char *idxStr;",
          "531:   int iIdxStr = 0;",
          "532:   int iCons = 0;",
          "534:   int bSeenEq = 0;",
          "535:   int bSeenGt = 0;",
          "536:   int bSeenLt = 0;",
          "537:   int bSeenMatch = 0;",
          "538:   int bSeenRank = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "543:     return SQLITE_ERROR;",
          "544:   }",
          "547:   for(i=0; i<pInfo->nConstraint; i++){",
          "548:     struct sqlite3_index_constraint *p = &pInfo->aConstraint[i];",
          "549:     int iCol = p->iColumn;",
          "553:     ){",
          "561:         pInfo->estimatedCost = 1e50;",
          "562:         return SQLITE_OK;",
          "563:       }",
          "571:         }",
          "572:       }",
          "573:     }",
          "574:   }",
          "577:   if( pInfo->nOrderBy==1 ){",
          "578:     int iSort = pInfo->aOrderBy[0].iColumn;",
          "580:       idxFlags |= FTS5_BI_ORDER_RANK;",
          "581:     }else if( iSort==-1 ){",
          "582:       idxFlags |= FTS5_BI_ORDER_ROWID;",
          "",
          "[Removed Lines]",
          "551:     if( (p->op==SQLITE_INDEX_CONSTRAINT_MATCH && iCol>=0 && iCol<=nCol)",
          "552:      || (p->op==SQLITE_INDEX_CONSTRAINT_EQ && iCol==nCol)",
          "555:       if( p->usable ){",
          "556:         idxFlags = (idxFlags & 0xFFFF) | FTS5_BI_MATCH | (iCol << 16);",
          "557:         aConstraint[0].iConsIndex = i;",
          "558:       }else{",
          "564:     }else if( p->op<=SQLITE_INDEX_CONSTRAINT_MATCH ){",
          "565:       int j;",
          "566:       for(j=1; j<ArraySize(aConstraint); j++){",
          "567:         struct Constraint *pC = &aConstraint[j];",
          "568:         if( iCol==aColMap[pC->iCol] && (p->op & pC->op) && p->usable ){",
          "569:           pC->iConsIndex = i;",
          "570:           idxFlags |= pC->fts5op;",
          "579:     if( iSort==(pConfig->nCol+1) && BitFlagTest(idxFlags, FTS5_BI_MATCH) ){",
          "",
          "[Added Lines]",
          "554:   idxStr = (char*)sqlite3_malloc(pInfo->nConstraint * 6 + 1);",
          "555:   if( idxStr==0 ) return SQLITE_NOMEM;",
          "556:   pInfo->idxStr = idxStr;",
          "557:   pInfo->needToFreeIdxStr = 1;",
          "562:     if( p->op==SQLITE_INDEX_CONSTRAINT_MATCH",
          "563:      || (p->op==SQLITE_INDEX_CONSTRAINT_EQ && iCol>=nCol)",
          "566:       if( p->usable==0 || iCol<0 ){",
          "570:         assert( iIdxStr < pInfo->nConstraint*6 + 1 );",
          "571:         idxStr[iIdxStr] = 0;",
          "573:       }else{",
          "574:         if( iCol==nCol+1 ){",
          "575:           if( bSeenRank ) continue;",
          "576:           idxStr[iIdxStr++] = 'r';",
          "577:           bSeenRank = 1;",
          "578:         }else{",
          "579:           bSeenMatch = 1;",
          "580:           idxStr[iIdxStr++] = 'm';",
          "581:           if( iCol<nCol ){",
          "582:             sqlite3_snprintf(6, &idxStr[iIdxStr], \"%d\", iCol);",
          "583:             idxStr += strlen(&idxStr[iIdxStr]);",
          "584:             assert( idxStr[iIdxStr]=='\\0' );",
          "585:           }",
          "586:         }",
          "587:         pInfo->aConstraintUsage[i].argvIndex = ++iCons;",
          "588:         pInfo->aConstraintUsage[i].omit = 1;",
          "590:     }",
          "591:     else if( p->usable && bSeenEq==0",
          "592:       && p->op==SQLITE_INDEX_CONSTRAINT_EQ && iCol<0",
          "593:     ){",
          "594:       idxStr[iIdxStr++] = '=';",
          "595:       bSeenEq = 1;",
          "596:       pInfo->aConstraintUsage[i].argvIndex = ++iCons;",
          "597:     }",
          "598:   }",
          "600:   if( bSeenEq==0 ){",
          "601:     for(i=0; i<pInfo->nConstraint; i++){",
          "602:       struct sqlite3_index_constraint *p = &pInfo->aConstraint[i];",
          "603:       if( p->iColumn<0 && p->usable ){",
          "604:         int op = p->op;",
          "605:         if( op==SQLITE_INDEX_CONSTRAINT_LT || op==SQLITE_INDEX_CONSTRAINT_LE ){",
          "606:           if( bSeenLt ) continue;",
          "607:           idxStr[iIdxStr++] = '<';",
          "608:           pInfo->aConstraintUsage[i].argvIndex = ++iCons;",
          "609:           bSeenLt = 1;",
          "610:         }else",
          "611:         if( op==SQLITE_INDEX_CONSTRAINT_GT || op==SQLITE_INDEX_CONSTRAINT_GE ){",
          "612:           if( bSeenGt ) continue;",
          "613:           idxStr[iIdxStr++] = '>';",
          "614:           pInfo->aConstraintUsage[i].argvIndex = ++iCons;",
          "615:           bSeenGt = 1;",
          "620:   idxStr[iIdxStr] = '\\0';",
          "625:     if( iSort==(pConfig->nCol+1) && bSeenMatch ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "590:   }",
          "601:   }else{",
          "613:   }",
          "615:   pInfo->idxNum = idxFlags;",
          "",
          "[Removed Lines]",
          "593:   bHasMatch = BitFlagTest(idxFlags, FTS5_BI_MATCH);",
          "594:   if( BitFlagTest(idxFlags, FTS5_BI_ROWID_EQ) ){",
          "595:     pInfo->estimatedCost = bHasMatch ? 100.0 : 10.0;",
          "596:     if( bHasMatch==0 ) fts5SetUniqueFlag(pInfo);",
          "597:   }else if( BitFlagAllTest(idxFlags, FTS5_BI_ROWID_LE|FTS5_BI_ROWID_GE) ){",
          "598:     pInfo->estimatedCost = bHasMatch ? 500.0 : 250000.0;",
          "599:   }else if( BitFlagTest(idxFlags, FTS5_BI_ROWID_LE|FTS5_BI_ROWID_GE) ){",
          "600:     pInfo->estimatedCost = bHasMatch ? 750.0 : 750000.0;",
          "602:     pInfo->estimatedCost = bHasMatch ? 1000.0 : 1000000.0;",
          "603:   }",
          "606:   iNext = 1;",
          "607:   for(i=0; i<ArraySize(aConstraint); i++){",
          "608:     struct Constraint *pC = &aConstraint[i];",
          "609:     if( pC->iConsIndex>=0 ){",
          "610:       pInfo->aConstraintUsage[pC->iConsIndex].argvIndex = iNext++;",
          "611:       pInfo->aConstraintUsage[pC->iConsIndex].omit = (unsigned char)pC->omit;",
          "612:     }",
          "",
          "[Added Lines]",
          "639:   if( bSeenEq ){",
          "640:     pInfo->estimatedCost = bSeenMatch ? 100.0 : 10.0;",
          "641:     if( bSeenMatch==0 ) fts5SetUniqueFlag(pInfo);",
          "642:   }else if( bSeenLt && bSeenGt ){",
          "643:     pInfo->estimatedCost = bSeenMatch ? 500.0 : 250000.0;",
          "644:   }else if( bSeenLt || bSeenGt ){",
          "645:     pInfo->estimatedCost = bSeenMatch ? 750.0 : 750000.0;",
          "647:     pInfo->estimatedCost = bSeenMatch ? 1000.0 : 1000000.0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1140:   Fts5Config *pConfig = pTab->p.pConfig;",
          "1141:   Fts5Cursor *pCsr = (Fts5Cursor*)pCursor;",
          "1152:   char **pzErrmsg = pConfig->pzErrmsg;",
          "1157:   if( pCsr->ePlan ){",
          "1158:     fts5FreeCursorComponents(pCsr);",
          "",
          "[Removed Lines]",
          "1154:   UNUSED_PARAM(zUnused);",
          "1155:   UNUSED_PARAM(nVal);",
          "",
          "[Added Lines]",
          "1186:   int i;",
          "1187:   int iIdxStr = 0;",
          "1188:   Fts5Expr *pExpr = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1165:   assert( pCsr->pRank==0 );",
          "1166:   assert( pCsr->zRank==0 );",
          "1167:   assert( pCsr->zRankArgs==0 );",
          "1169:   assert( pzErrmsg==0 || pzErrmsg==&pTab->p.base.zErrMsg );",
          "1170:   pConfig->pzErrmsg = &pTab->p.base.zErrMsg;",
          "1185:   bOrderByRank = ((idxNum & FTS5_BI_ORDER_RANK) ? 1 : 0);",
          "1186:   pCsr->bDesc = bDesc = ((idxNum & FTS5_BI_ORDER_DESC) ? 1 : 0);",
          "",
          "[Removed Lines]",
          "1177:   if( BitFlagTest(idxNum, FTS5_BI_MATCH) ) pMatch = apVal[iVal++];",
          "1178:   if( BitFlagTest(idxNum, FTS5_BI_RANK) ) pRank = apVal[iVal++];",
          "1179:   if( BitFlagTest(idxNum, FTS5_BI_ROWID_EQ) ) pRowidEq = apVal[iVal++];",
          "1180:   if( BitFlagTest(idxNum, FTS5_BI_ROWID_LE) ) pRowidLe = apVal[iVal++];",
          "1181:   if( BitFlagTest(idxNum, FTS5_BI_ROWID_GE) ) pRowidGe = apVal[iVal++];",
          "1182:   iCol = (idxNum>>16);",
          "1183:   assert( iCol>=0 && iCol<=pConfig->nCol );",
          "1184:   assert( iVal==nVal );",
          "",
          "[Added Lines]",
          "1201:   assert( pTab->pSortCsr==0 || nVal==0 );",
          "1207:   for(i=0; i<nVal; i++){",
          "1208:     switch( idxStr[iIdxStr++] ){",
          "1209:       case 'r':",
          "1210:         pRank = apVal[i];",
          "1211:         break;",
          "1212:       case 'm': {",
          "1213:         const char *zText = (const char*)sqlite3_value_text(apVal[i]);",
          "1214:         if( zText==0 ) zText = \"\";",
          "1216:         if( idxStr[iIdxStr]>='0' && idxStr[iIdxStr]<='9' ){",
          "1217:           iCol = 0;",
          "1218:           do{",
          "1219:             iCol = iCol*10 + (idxStr[iIdxStr]-'0');",
          "1220:             iIdxStr++;",
          "1221:           }while( idxStr[iIdxStr]>='0' && idxStr[iIdxStr]<='9' );",
          "1222:         }else{",
          "1223:           iCol = pConfig->nCol;",
          "1224:         }",
          "1226:         if( zText[0]=='*' ){",
          "1230:           rc = fts5SpecialMatch(pTab, pCsr, &zText[1]);",
          "1231:           goto filter_out;",
          "1232:         }else{",
          "1233:           char **pzErr = &pTab->p.base.zErrMsg;",
          "1234:           rc = sqlite3Fts5ExprNew(pConfig, iCol, zText, &pExpr, pzErr);",
          "1235:           if( rc==SQLITE_OK ){",
          "1236:             rc = sqlite3Fts5ExprAnd(&pCsr->pExpr, pExpr);",
          "1237:             pExpr = 0;",
          "1238:           }",
          "1239:           if( rc!=SQLITE_OK ) goto filter_out;",
          "1240:         }",
          "1242:         break;",
          "1243:       }",
          "1244:       case '=':",
          "1245:         pRowidEq = apVal[i];",
          "1246:         break;",
          "1247:       case '<':",
          "1248:         pRowidLe = apVal[i];",
          "1249:         break;",
          "1250:       default: assert( idxStr[iIdxStr-1]=='>' );",
          "1251:         pRowidGe = apVal[i];",
          "1252:         break;",
          "1253:     }",
          "1254:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1210:     assert( pRowidEq==0 && pRowidLe==0 && pRowidGe==0 && pRank==0 );",
          "1212:     assert( pCsr->iLastRowid==LARGEST_INT64 );",
          "1213:     assert( pCsr->iFirstRowid==SMALLEST_INT64 );",
          "1214:     if( pTab->pSortCsr->bDesc ){",
          "",
          "[Removed Lines]",
          "1211:     assert( nVal==0 && pMatch==0 && bOrderByRank==0 && bDesc==0 );",
          "",
          "[Added Lines]",
          "1281:     assert( nVal==0 && bOrderByRank==0 && bDesc==0 );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1221:     pCsr->ePlan = FTS5_PLAN_SOURCE;",
          "1222:     pCsr->pExpr = pTab->pSortCsr->pExpr;",
          "1223:     rc = fts5CursorFirst(pTab, pCsr, bDesc);",
          "1228:     rc = fts5CursorParseRank(pConfig, pCsr, pRank);",
          "1229:     if( rc==SQLITE_OK ){",
          "1235:       }else{",
          "1247:       }",
          "1248:     }",
          "1249:   }else if( pConfig->zContent==0 ){",
          "",
          "[Removed Lines]",
          "1224:   }else if( pMatch ){",
          "1225:     const char *zExpr = (const char*)sqlite3_value_text(apVal[0]);",
          "1226:     if( zExpr==0 ) zExpr = \"\";",
          "1230:       if( zExpr[0]=='*' ){",
          "1234:         rc = fts5SpecialMatch(pTab, pCsr, &zExpr[1]);",
          "1236:         char **pzErr = &pTab->p.base.zErrMsg;",
          "1237:         rc = sqlite3Fts5ExprNew(pConfig, iCol, zExpr, &pCsr->pExpr, pzErr);",
          "1238:         if( rc==SQLITE_OK ){",
          "1239:           if( bOrderByRank ){",
          "1240:             pCsr->ePlan = FTS5_PLAN_SORTED_MATCH;",
          "1241:             rc = fts5CursorFirstSorted(pTab, pCsr, bDesc);",
          "1242:           }else{",
          "1243:             pCsr->ePlan = FTS5_PLAN_MATCH;",
          "1244:             rc = fts5CursorFirst(pTab, pCsr, bDesc);",
          "1245:           }",
          "1246:         }",
          "",
          "[Added Lines]",
          "1294:   }else if( pCsr->pExpr ){",
          "1297:       if( bOrderByRank ){",
          "1298:         pCsr->ePlan = FTS5_PLAN_SORTED_MATCH;",
          "1299:         rc = fts5CursorFirstSorted(pTab, pCsr, bDesc);",
          "1301:         pCsr->ePlan = FTS5_PLAN_MATCH;",
          "1302:         rc = fts5CursorFirst(pTab, pCsr, bDesc);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1260:     );",
          "1261:     if( rc==SQLITE_OK ){",
          "1262:       if( pCsr->ePlan==FTS5_PLAN_ROWID ){",
          "1264:       }else{",
          "1265:         sqlite3_bind_int64(pCsr->pStmt, 1, pCsr->iFirstRowid);",
          "1266:         sqlite3_bind_int64(pCsr->pStmt, 2, pCsr->iLastRowid);",
          "",
          "[Removed Lines]",
          "1263:         sqlite3_bind_value(pCsr->pStmt, 1, apVal[0]);",
          "",
          "[Added Lines]",
          "1319:         sqlite3_bind_value(pCsr->pStmt, 1, pRowidEq);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1269:     }",
          "1270:   }",
          "1272:   pConfig->pzErrmsg = pzErrmsg;",
          "1273:   return rc;",
          "1274: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1328:  filter_out:",
          "1329:   sqlite3Fts5ExprFree(pExpr);",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5faultB.test||ext/fts5/test/fts5faultB.test": [
          "File: ext/fts5/test/fts5faultB.test -> ext/fts5/test/fts5faultB.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:   faultsim_test_result {0 {1 4}}",
          "148: }",
          "151: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150: #-------------------------------------------------------------------------",
          "151: # Test OOM injection in a query with two MATCH expressions",
          "152: #",
          "153: reset_db",
          "154: do_execsql_test 6.0 {",
          "155:   CREATE VIRTUAL TABLE t1 USING fts5(a);",
          "156:   INSERT INTO t1 VALUES('a b c d');  -- 1",
          "157:   INSERT INTO t1 VALUES('d a b c');  -- 2",
          "158:   INSERT INTO t1 VALUES('c d a b');  -- 3",
          "159:   INSERT INTO t1 VALUES('b c d a');  -- 4",
          "160: }",
          "161: do_faultsim_test 6.1 -faults oom* -body {",
          "162:   execsql { SELECT rowid FROM t1 WHERE t1 MATCH 'a' AND t1 MATCH 'b' }",
          "163: } -test {",
          "164:   faultsim_test_result {0 {1 2 3 4}}",
          "165: }",
          "166: do_faultsim_test 6.2 -faults oom* -body {",
          "167:   execsql { SELECT rowid FROM t1 WHERE t1 MATCH 'a OR b' AND t1 MATCH 'c OR d' }",
          "168: } -test {",
          "169:   faultsim_test_result {0 {1 2 3 4}}",
          "170: }",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5multi.test||ext/fts5/test/fts5multi.test": [
          "File: ext/fts5/test/fts5multi.test -> ext/fts5/test/fts5multi.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2014 September 13",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #*************************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this script is testing the FTS5 module.",
          "13: #",
          "15: source [file join [file dirname [info script]] fts5_common.tcl]",
          "16: set testprefix fts5multi",
          "18: # If SQLITE_ENABLE_FTS5 is not defined, omit this file.",
          "19: ifcapable !fts5 {",
          "20:   finish_test",
          "21:   return",
          "22: }",
          "24: fts5_aux_test_functions db",
          "26: do_execsql_test 1.0 {",
          "27:   CREATE VIRTUAL TABLE t1 USING fts5(a, b, c);",
          "28:   INSERT INTO t1 VALUES('gg bb bb'   ,'gg ff gg'   ,'ii ii');",
          "29:   INSERT INTO t1 VALUES('dd dd hh kk','jj'         ,'aa');",
          "30:   INSERT INTO t1 VALUES('kk gg ee'   ,'hh cc'      ,'hh jj aa cc');",
          "31:   INSERT INTO t1 VALUES('hh'         ,'bb jj cc'   ,'kk ii');",
          "32:   INSERT INTO t1 VALUES('kk dd kk ii','aa ee aa'   ,'ee');",
          "33:   INSERT INTO t1 VALUES('ee'         ,'ff gg kk aa','ee ff ee');",
          "34:   INSERT INTO t1 VALUES('ff jj'      ,'gg ee'      ,'kk ee gg kk');",
          "35:   INSERT INTO t1 VALUES('ff ee dd hh','kk ee'      ,'gg dd');",
          "36:   INSERT INTO t1 VALUES('bb'         ,'aa'         ,'bb aa');",
          "37:   INSERT INTO t1 VALUES('hh cc bb'   ,'ff bb'      ,'cc');",
          "38:   INSERT INTO t1 VALUES('jj'         ,'ff dd bb aa','dd dd ff ff');",
          "39:   INSERT INTO t1 VALUES('ff dd gg dd','gg aa bb ff','cc');",
          "40:   INSERT INTO t1 VALUES('ff aa cc jj','kk'         ,'ii dd');",
          "41:   INSERT INTO t1 VALUES('jj dd'      ,'cc'         ,'ii hh ee aa');",
          "42:   INSERT INTO t1 VALUES('ff ii hh'   ,'dd'         ,'gg');",
          "43:   INSERT INTO t1 VALUES('ff dd gg hh','hh'         ,'ff dd');",
          "44:   INSERT INTO t1 VALUES('cc cc'      ,'ff dd ff'   ,'bb');",
          "45:   INSERT INTO t1 VALUES('ii'         ,'bb ii'      ,'jj kk');",
          "46:   INSERT INTO t1 VALUES('ff hh'      ,'hh bb'      ,'bb dd ee');",
          "47:   INSERT INTO t1 VALUES('jj kk'      ,'jj'         ,'gg ff cc');",
          "48:   INSERT INTO t1 VALUES('dd kk'      ,'ii gg'      ,'dd');",
          "49:   INSERT INTO t1 VALUES('cc'         ,'aa ff'      ,'ii');",
          "50:   INSERT INTO t1 VALUES('bb ff bb ii','bb kk bb aa','hh ff ii dd');",
          "51:   INSERT INTO t1 VALUES('aa'         ,'ee bb jj jj','dd');",
          "52:   INSERT INTO t1 VALUES('kk dd cc'   ,'aa jj'      ,'ee aa ff');",
          "53:   INSERT INTO t1 VALUES('aa gg aa'   ,'jj'         ,'ii kk hh gg');",
          "54:   INSERT INTO t1 VALUES('ff hh aa'   ,'jj ii'      ,'hh dd bb jj');",
          "55:   INSERT INTO t1 VALUES('hh'         ,'aa gg kk'   ,'bb ee');",
          "56:   INSERT INTO t1 VALUES('bb'         ,'ee'         ,'gg');",
          "57:   INSERT INTO t1 VALUES('dd kk'      ,'kk bb aa'   ,'ee');",
          "58: }",
          "60: foreach {tn c1 e1 c2 e2} {",
          "61:   1     t1 aa     t1 bb",
          "62:   2     a  aa     b  bb",
          "63:   3     a  \"aa OR bb OR cc\"    b  \"jj OR ii OR hh\"",
          "64:   4     t1  \"aa AND bb\"       t1  \"cc\"",
          "65:   5     c   \"kk\"               b  \"aa OR bb OR cc OR dd OR ee\"",
          "66: } {",
          "67:   if {$c1==\"t1\"} {",
          "68:     set lhs \"( $e1 )\"",
          "69:   } else {",
          "70:     set lhs \"$c1 : ( $e1 )\"",
          "71:   }",
          "72:   if {$c2==\"t1\"} {",
          "73:     set rhs \"( $e2 )\"",
          "74:   } else {",
          "75:     set rhs \"$c2 : ( $e2 )\"",
          "76:   }",
          "78:   set q1 \"t1 MATCH '($lhs) AND ($rhs)'\"",
          "79:   set q2 \"$c1 MATCH '$e1' AND $c2 MATCH '$e2'\"",
          "81:   set ret [execsql \"SELECT rowid FROM t1 WHERE $q1\"]",
          "82:   set N [llength $ret]",
          "83:   do_execsql_test 1.$tn.1.($N) \"SELECT rowid FROM t1 WHERE $q2\" $ret",
          "85:   set ret [execsql \"SELECT fts5_test_poslist(t1) FROM t1 WHERE $q1\"]",
          "86:   do_execsql_test 1.$tn.2.($N) \"",
          "87:     SELECT fts5_test_poslist(t1) FROM t1 WHERE $q2",
          "88:   \" $ret",
          "89: }",
          "91: do_catchsql_test 2.1.1 {",
          "92:   SELECT rowid FROM t1 WHERE t1 MATCH '(NOT' AND t1 MATCH 'aa bb';",
          "93: } {1 {fts5: syntax error near \"NOT\"}}",
          "94: do_catchsql_test 2.1.2 {",
          "95:   SELECT rowid FROM t1 WHERE t1 MATCH 'aa bb' AND t1 MATCH '(NOT';",
          "96: } {1 {fts5: syntax error near \"NOT\"}}",
          "98: finish_test",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5plan.test||ext/fts5/test/fts5plan.test": [
          "File: ext/fts5/test/fts5plan.test -> ext/fts5/test/fts5plan.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: } {",
          "32:   QUERY PLAN",
          "33:   |--SCAN TABLE t1",
          "35: }",
          "37: do_eqp_test 1.2 {",
          "",
          "[Removed Lines]",
          "34:   `--SCAN TABLE f1 VIRTUAL TABLE INDEX 65537:",
          "",
          "[Added Lines]",
          "34:   `--SCAN TABLE f1 VIRTUAL TABLE INDEX 0:m",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:   SELECT * FROM f1 WHERE f1 MATCH ? ORDER BY ff",
          "47: } {",
          "48:   QUERY PLAN",
          "50:   `--USE TEMP B-TREE FOR ORDER BY",
          "51: }",
          "",
          "[Removed Lines]",
          "49:   |--SCAN TABLE f1 VIRTUAL TABLE INDEX 65537:",
          "",
          "[Added Lines]",
          "49:   |--SCAN TABLE f1 VIRTUAL TABLE INDEX 0:m",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61: do_eqp_test 1.5 {",
          "62:   SELECT * FROM f1 WHERE rank MATCH ?",
          "65: finish_test",
          "",
          "[Removed Lines]",
          "63: } {SCAN TABLE f1 VIRTUAL TABLE INDEX 2:}",
          "",
          "[Added Lines]",
          "63: } {SCAN TABLE f1 VIRTUAL TABLE INDEX 0:r}",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5simple.test||ext/fts5/test/fts5simple.test": [
          "File: ext/fts5/test/fts5simple.test -> ext/fts5/test/fts5simple.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "467:   SELECT rowid FROM x1($doc);",
          "468: } {11112}",
          "470: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "470: #-------------------------------------------------------------------------",
          "471: reset_db",
          "472: do_execsql_test 22.0 {",
          "473:   CREATE VIRTUAL TABLE x1 USING fts5(x);",
          "474:   INSERT INTO x1(x) VALUES('a b c');",
          "475:   INSERT INTO x1(x) VALUES('x y z');",
          "476:   INSERT INTO x1(x) VALUES('c b a');",
          "477:   INSERT INTO x1(x) VALUES('z y x');",
          "478: }",
          "480: do_catchsql_test 22.1 {SELECT * FROM x1('')}   {1 {fts5: syntax error near \"\"}}",
          "481: do_catchsql_test 22.2 {SELECT * FROM x1(NULL)} {1 {fts5: syntax error near \"\"}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6aa438ce41d460a6782ae63503128b9140c28ff59c2b2eed48b004acf83e0560",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3478:         }",
          "3479:         sqlite3ExprDelete(db, pExpr);",
          "3480:         pExpr = pNew;",
          "3481:       }",
          "3482:     }",
          "3483:   }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3484:         if( pExpr ){",
          "3485:           if( pExpr->op!=TK_COLUMN && pExpr->op!=TK_COLLATE ){",
          "3486:             CollSeq *pColl = sqlite3ExprCollSeq(pSubst->pParse, pExpr);",
          "3487:             pExpr = sqlite3ExprAddCollateString(pSubst->pParse, pExpr,",
          "3488:                 (pColl ? pColl->zName : \"BINARY\")",
          "3489:             );",
          "3490:           }",
          "3491:           ExprClearProperty(pExpr, EP_Collate);",
          "3492:         }",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7200:     { \"omit-noop-join\",      SQLITE_OmitNoopJoin   },",
          "7201:     { \"stat4\",               SQLITE_Stat4          },",
          "7202:     { \"skip-scan\",           SQLITE_SkipScan       },",
          "7203:   };",
          "7205:   if( objc!=4 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7203:     { \"push-down\",           SQLITE_PushDown       },",
          "",
          "---------------"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "536:     }",
          "538:     case TK_COLLATE: {",
          "540:       sqlite3TreeViewExpr(pView, pExpr->pLeft, 0);",
          "541:       break;",
          "542:     }",
          "",
          "[Removed Lines]",
          "539:       sqlite3TreeViewLine(pView, \"COLLATE %Q\", pExpr->u.zToken);",
          "",
          "[Added Lines]",
          "543:       sqlite3TreeViewLine(pView, \"%sCOLLATE %Q%s\",",
          "544:         !ExprHasProperty(pExpr, EP_Collate) ? \"SOFT-\" : \"\",",
          "545:         pExpr->u.zToken, zFlgs);",
          "",
          "---------------"
        ],
        "test/tkt-18458b1a.test||test/tkt-18458b1a.test": [
          "File: test/tkt-18458b1a.test -> test/tkt-18458b1a.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 September 10",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library. In particular,",
          "12: # that problems related to ticket [18458b1a] have been fixed.",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "17: set testprefix tkt-18458b1a",
          "19: foreach tn {1 2} {",
          "20:   reset_db",
          "21:   if {$tn==1} {",
          "22:     # Disable the flattener and push-down optimizations",
          "23:     optimization_control db query-flattener 0",
          "24:     optimization_control db push-down 0",
          "25:   } else {",
          "26:     # Enable them",
          "27:     optimization_control db query-flattener 1",
          "28:     optimization_control db push-down 1",
          "29:   }",
          "31:   db cache size 0",
          "33:   do_execsql_test $tn.1.1 {",
          "34:     CREATE TABLE t0(c0 COLLATE NOCASE);",
          "35:     INSERT INTO t0(c0) VALUES ('B');",
          "36:     CREATE VIEW v0(c0, c1) AS SELECT DISTINCT t0.c0, 'a' FROM t0;",
          "37:   }",
          "39:   do_execsql_test $tn.1.2 {",
          "40:     SELECT count(*) FROM v0 WHERE c1 >= c0;",
          "41:   } 1",
          "43:   do_execsql_test $tn.1.3 {",
          "44:     SELECT count(*) FROM v0 WHERE NOT NOT (c1 >= c0);",
          "45:   } 1",
          "47:   do_execsql_test $tn.1.4 {",
          "48:     SELECT count(*) FROM v0 WHERE ((c1 >= c0) OR 0+0);",
          "49:   } 1",
          "50: }",
          "52: finish_test",
          "",
          "---------------"
        ],
        "test/tkt-a7debbe0.test||test/tkt-a7debbe0.test": [
          "File: test/tkt-a7debbe0.test -> test/tkt-a7debbe0.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 September 10",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library. In particular,",
          "12: # that problems related to ticket a7debbe0ad1 have been fixed.",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "17: set testprefix tkt-a7debbe0",
          "19: foreach tn {1 2} {",
          "20:   reset_db",
          "21:   if {$tn==1} {",
          "22:     # Disable the flattener",
          "23:     optimization_control db query-flattener 0",
          "24:   } else {",
          "25:     # Enable the flattener",
          "26:     optimization_control db query-flattener 1",
          "27:   }",
          "29:   do_execsql_test $tn.1.0 {",
          "30:     CREATE TABLE t0(xyz INTEGER);",
          "31:     INSERT INTO t0(xyz) VALUES(456);",
          "32:     CREATE VIEW v2(a, B) AS",
          "33:         SELECT 'a', 'B' COLLATE NOCASE FROM t0;",
          "34:     CREATE TABLE t2(a, B COLLATE NOCASE);",
          "35:     INSERT INTO t2 VALUES('a', 'B');",
          "36:     CREATE VIEW v3(a, B) AS",
          "37:         SELECT 'a' COLLATE BINARY, 'B' COLLATE NOCASE FROM t0;",
          "39:     CREATE VIEW v4(a, B) AS",
          "40:         SELECT 'a', +CAST('B' COLLATE NOCASE AS TEXT) FROM t0;",
          "42:     CREATE VIEW v5(a, B) AS",
          "43:         SELECT 'a', ('B' COLLATE NOCASE) || '' FROM t0;",
          "44:   }",
          "46:   # Table t2 and views v2 through v5 should all be equivalent.",
          "47:   do_execsql_test $tn.1.1.1 { SELECT a   >= B FROM t2;         } 1",
          "48:   do_execsql_test $tn.1.1.2 { SELECT 'a' >= 'B' COLLATE NOCASE } 0",
          "49:   do_execsql_test $tn.1.1.3 { SELECT a   >= B FROM v2          } 1",
          "50:   do_execsql_test $tn.1.1.4 { SELECT a   >= B FROM v3          } 1",
          "51:   do_execsql_test $tn.1.1.5 { SELECT a   >= B FROM v4          } 1",
          "52:   do_execsql_test $tn.1.1.6 { SELECT a   >= B FROM v5          } 1",
          "54:   do_execsql_test $tn.1.2.1 { SELECT B   < a FROM t2           } 0",
          "55:   do_execsql_test $tn.1.2.2 { SELECT 'B' COLLATE NOCASE < 'a'  } 0",
          "56:   do_execsql_test $tn.1.2.3 { SELECT B   < a FROM v2           } 0",
          "57:   do_execsql_test $tn.1.2.4 { SELECT B   < a FROM v3           } 0",
          "58:   do_execsql_test $tn.1.2.5 { SELECT a  < B FROM v4           } 0",
          "59:   do_execsql_test $tn.1.2.6 { SELECT a  < B FROM v5           } 0",
          "61:   #-------------------------------------------------------------------------",
          "62:   do_execsql_test $tn.2.0 {",
          "63:     CREATE TABLE t5(a, b COLLATE NOCASE);",
          "64:     INSERT INTO t5 VALUES(1, 'XYZ');",
          "65:   }",
          "67:   # Result should be 0, as column \"xyz\" from the sub-query has implicit",
          "68:   # collation sequence BINARY.",
          "69:   do_execsql_test $tn.2.1 {",
          "70:     SELECT xyz==b FROM ( SELECT a, 'xyz' AS xyz FROM t5 ), t5;",
          "71:   } {0}",
          "73:   # Result should be 1, as literal 'xyz' has no collation sequence, so",
          "74:   # the comparison uses the implicit collation sequence of the RHS - NOCASE.",
          "75:   do_execsql_test $tn.2.2 {",
          "76:     SELECT 'xyz'==b FROM ( SELECT a, 'xyz' AS xyz FROM t5 ), t5;",
          "77:   } {1}",
          "79:   #-----------------------------------------------------------------------",
          "80:   # The test case submitted with the ticket.",
          "81:   #",
          "82:   do_execsql_test $tn.3.0 {",
          "83:     DROP TABLE t0;",
          "84:     DROP VIEW v2;",
          "86:     CREATE TABLE t0(c0);",
          "87:     INSERT INTO t0(c0) VALUES('');",
          "88:     CREATE VIEW v2(c0, c1) AS",
          "89:         SELECT 'B' COLLATE NOCASE, 'a' FROM t0 ORDER BY t0.c0;",
          "90:     SELECT SUM(count) FROM (",
          "91:       SELECT v2.c1 BETWEEN v2.c0 AND v2.c1 as count FROM v2",
          "92:     );",
          "93:   } 1",
          "95:   # The result is 1, as the collation used is the implicit collation sequence",
          "96:   # of v2.c1 - BINARY.",
          "97:   do_execsql_test $tn.3.1 {",
          "98:     SELECT v2.c1 BETWEEN v2.c0 AND v2.c1 as count FROM v2;",
          "99:   } 1",
          "100: }",
          "102: finish_test",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4426:     }",
          "4427:     i++;",
          "4428:   }",
          "4430:   fprintf(out, \"};\\n\"); lineno++;",
          "",
          "[Removed Lines]",
          "4429:   if( j>0 ) fprintf(out, \"\\n\"); lineno++;",
          "",
          "[Added Lines]",
          "4429:   if( j>0 ){ fprintf(out, \"\\n\"); lineno++; }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2a934d75d9595a8f56d6510a023c7289734ebae9",
      "candidate_info": {
        "commit_hash": "2a934d75d9595a8f56d6510a023c7289734ebae9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2a934d75d9595a8f56d6510a023c7289734ebae9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Detect zero-length free slots on btree pages and report that as corruption.\n\nFossilOrigin-Name: c4f0568fde1d4070e7522ec36c0958be7426076002a7fa2da12a46411ab2e92d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0524aaaf45681437c2dca3d31ff26a65bee7bd2074730277c29136635ee0be0f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1573:     }",
          "1574:     iAddr = pc;",
          "1575:     pc = get2byte(&aData[pc]);",
          "1577:       if( pc ){",
          "",
          "[Removed Lines]",
          "1576:     if( pc<iAddr+size ){",
          "",
          "[Added Lines]",
          "1576:     if( pc<=iAddr+size ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9ce3c8ac26ce34b4c55c593f18908a19aa17f91b",
      "candidate_info": {
        "commit_hash": "9ce3c8ac26ce34b4c55c593f18908a19aa17f91b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9ce3c8ac26ce34b4c55c593f18908a19aa17f91b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/expr.c",
          "src/insert.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/vdbe.c",
          "src/where.c",
          "src/wherecode.c",
          "src/window.c",
          "test/view.test",
          "test/window9.test"
        ],
        "message": "Ensure that columns of views and sub-queries that are expressions with no affinity are comparied without any type conversions, as required in the documentation.  Tickets [61c853857f40da49] and [d52a29a9e6bc55c5].\n\nFossilOrigin-Name: 9c8c1092a8ce80e114fcfe8ce780332a6f269b8c87df226242b582d2d825c393",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbe.c||src/vdbe.c",
          "src/where.c||src/where.c",
          "src/wherecode.c||src/wherecode.c",
          "src/window.c||src/window.c",
          "test/view.test||test/view.test",
          "test/window9.test||test/window9.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a29f2a7d07beff64e489e8f824babc6228c4a499fadc0ee701caa60a63baadcd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2160:       addrTop = sqlite3VdbeCurrentAddr(v) + 1;",
          "2161:       sqlite3VdbeAddOp3(v, OP_InitCoroutine, regYield, 0, addrTop);",
          "2162:       if( pParse->nErr ) return;",
          "2164:       if( pSelTab==0 ) return;",
          "2165:       assert( p->aCol==0 );",
          "2166:       p->nCol = pSelTab->nCol;",
          "",
          "[Removed Lines]",
          "2163:       pSelTab = sqlite3ResultSetOfSelect(pParse, pSelect);",
          "",
          "[Added Lines]",
          "2163:       pSelTab = sqlite3ResultSetOfSelect(pParse, pSelect, SQLITE_AFF_BLOB);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2424: #ifndef SQLITE_OMIT_AUTHORIZATION",
          "2425:     xAuth = db->xAuth;",
          "2426:     db->xAuth = 0;",
          "2428:     db->xAuth = xAuth;",
          "2429: #else",
          "2431: #endif",
          "2432:     pParse->nTab = n;",
          "2433:     if( pTable->pCheck ){",
          "",
          "[Removed Lines]",
          "2427:     pSelTab = sqlite3ResultSetOfSelect(pParse, pSel);",
          "2430:     pSelTab = sqlite3ResultSetOfSelect(pParse, pSel);",
          "",
          "[Added Lines]",
          "2427:     pSelTab = sqlite3ResultSetOfSelect(pParse, pSel, SQLITE_AFF_NONE);",
          "2430:     pSelTab = sqlite3ResultSetOfSelect(pParse, pSel, SQLITE_AFF_NONE);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2443:        && pParse->nErr==0",
          "2444:        && pTable->nCol==pSel->pEList->nExpr",
          "2445:       ){",
          "2447:       }",
          "2448:     }else if( pSelTab ){",
          "",
          "[Removed Lines]",
          "2446:         sqlite3SelectAddColumnTypeAndCollation(pParse, pTable, pSel);",
          "",
          "[Added Lines]",
          "2446:         sqlite3SelectAddColumnTypeAndCollation(pParse, pTable, pSel,",
          "2447:                                                SQLITE_AFF_NONE);",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "231: char sqlite3CompareAffinity(Expr *pExpr, char aff2){",
          "232:   char aff1 = sqlite3ExprAffinity(pExpr);",
          "",
          "[Removed Lines]",
          "233:   if( aff1 && aff2 ){",
          "",
          "[Added Lines]",
          "233:   if( aff1>SQLITE_AFF_NONE && aff2>SQLITE_AFF_NONE ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "239:     }else{",
          "240:       return SQLITE_AFF_BLOB;",
          "241:     }",
          "247:   }else{",
          "251:   }",
          "252: }",
          "",
          "[Removed Lines]",
          "242:   }else if( !aff1 && !aff2 ){",
          "246:     return SQLITE_AFF_BLOB;",
          "249:     assert( aff1==0 || aff2==0 );",
          "250:     return (aff1 + aff2);",
          "",
          "[Added Lines]",
          "244:     assert( aff1<=SQLITE_AFF_NONE || aff2<=SQLITE_AFF_NONE );",
          "245:     return (aff1<=SQLITE_AFF_NONE ? aff2 : aff1) | SQLITE_AFF_NONE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "281: int sqlite3IndexAffinityOk(Expr *pExpr, char idx_affinity){",
          "282:   char aff = comparisonAffinity(pExpr);",
          "290:   }",
          "291: }",
          "",
          "[Removed Lines]",
          "283:   switch( aff ){",
          "284:     case SQLITE_AFF_BLOB:",
          "285:       return 1;",
          "286:     case SQLITE_AFF_TEXT:",
          "287:       return idx_affinity==SQLITE_AFF_TEXT;",
          "288:     default:",
          "289:       return sqlite3IsNumericAffinity(idx_affinity);",
          "",
          "[Added Lines]",
          "278:   if( aff<SQLITE_AFF_TEXT ){",
          "279:     return 1;",
          "280:   }",
          "281:   if( aff==SQLITE_AFF_TEXT ){",
          "282:     return idx_affinity==SQLITE_AFF_TEXT;",
          "284:   return sqlite3IsNumericAffinity(idx_affinity);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2800:     struct ExprList_item *pItem;",
          "2801:     int r1, r2, r3;",
          "2802:     affinity = sqlite3ExprAffinity(pLeft);",
          "2804:       affinity = SQLITE_AFF_BLOB;",
          "2805:     }",
          "2806:     if( pKeyInfo ){",
          "",
          "[Removed Lines]",
          "2803:     if( !affinity ){",
          "",
          "[Added Lines]",
          "2797:     if( affinity<=SQLITE_AFF_NONE ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3491:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
          "3492:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
          "3494:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
          "3495:           assert( SQLITE_AFF_BLOB=='A' );",
          "3496:           assert( SQLITE_AFF_TEXT=='B' );",
          "",
          "[Removed Lines]",
          "3493:         if( aff!=SQLITE_AFF_BLOB ){",
          "",
          "[Added Lines]",
          "3487:         if( aff>SQLITE_AFF_BLOB ){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3793:         assert( nFarg==1 );",
          "3794:         aff = sqlite3ExprAffinity(pFarg->a[0].pExpr);",
          "3795:         sqlite3VdbeLoadString(v, target,",
          "3797:         return target;",
          "3798:       }",
          "3799: #endif",
          "",
          "[Removed Lines]",
          "3796:                               aff ? azAff[aff-SQLITE_AFF_BLOB] : \"none\");",
          "",
          "[Added Lines]",
          "3790:                 (aff<=SQLITE_AFF_NONE) ? \"none\" : azAff[aff-SQLITE_AFF_BLOB]);",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:     }",
          "89:     for(n=0; n<pIdx->nColumn; n++){",
          "90:       i16 x = pIdx->aiColumn[n];",
          "91:       if( x>=0 ){",
          "93:       }else if( x==XN_ROWID ){",
          "95:       }else{",
          "97:         assert( x==XN_EXPR );",
          "98:         assert( pIdx->aColExpr!=0 );",
          "99:         aff = sqlite3ExprAffinity(pIdx->aColExpr->a[n].pExpr);",
          "102:       }",
          "103:     }",
          "104:     pIdx->zColAff[n] = 0;",
          "105:   }",
          "",
          "[Removed Lines]",
          "92:         pIdx->zColAff[n] = pTab->aCol[x].affinity;",
          "94:         pIdx->zColAff[n] = SQLITE_AFF_INTEGER;",
          "96:         char aff;",
          "100:         if( aff==0 ) aff = SQLITE_AFF_BLOB;",
          "101:         pIdx->zColAff[n] = aff;",
          "",
          "[Added Lines]",
          "91:       char aff;",
          "93:         aff = pTab->aCol[x].affinity;",
          "95:         aff = SQLITE_AFF_INTEGER;",
          "101:       if( aff<SQLITE_AFF_BLOB ) aff = SQLITE_AFF_BLOB;",
          "102:       pIdx->zColAff[n] = aff;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "139:     }",
          "141:     for(i=0; i<pTab->nCol; i++){",
          "142:       zColAff[i] = pTab->aCol[i].affinity;",
          "143:     }",
          "144:     do{",
          "145:       zColAff[i--] = 0;",
          "147:     pTab->zColAff = zColAff;",
          "148:   }",
          "149:   assert( zColAff!=0 );",
          "",
          "[Removed Lines]",
          "146:     }while( i>=0 && zColAff[i]==SQLITE_AFF_BLOB );",
          "",
          "[Added Lines]",
          "142:       assert( pTab->aCol[i].affinity!=0 );",
          "147:     }while( i>=0 && zColAff[i]<=SQLITE_AFF_BLOB );",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2068:         pCol->colFlags |= COLFLAG_HASTYPE;",
          "2069:       }",
          "2070:     }",
          "2072:     pColl = sqlite3ExprCollSeq(pParse, p);",
          "2073:     if( pColl && pCol->zColl==0 ){",
          "2074:       pCol->zColl = sqlite3DbStrDup(db, pColl->zName);",
          "",
          "[Removed Lines]",
          "2071:     if( pCol->affinity==0 ) pCol->affinity = SQLITE_AFF_BLOB;",
          "",
          "[Added Lines]",
          "2072:     if( pCol->affinity<=SQLITE_AFF_NONE ) pCol->affinity = aff;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2085:   Table *pTab;",
          "2086:   sqlite3 *db = pParse->db;",
          "2087:   u64 savedFlags;",
          "",
          "[Removed Lines]",
          "2084: Table *sqlite3ResultSetOfSelect(Parse *pParse, Select *pSelect){",
          "",
          "[Added Lines]",
          "2085: Table *sqlite3ResultSetOfSelect(Parse *pParse, Select *pSelect, char aff){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2101:   pTab->zName = 0;",
          "2102:   pTab->nRowLogEst = 200; assert( 200==sqlite3LogEst(1048576) );",
          "2103:   sqlite3ColumnsFromExprList(pParse, pSelect->pEList, &pTab->nCol, &pTab->aCol);",
          "2105:   pTab->iPKey = -1;",
          "2106:   if( db->mallocFailed ){",
          "2107:     sqlite3DeleteTable(db, pTab);",
          "",
          "[Removed Lines]",
          "2104:   sqlite3SelectAddColumnTypeAndCollation(pParse, pTab, pSelect);",
          "",
          "[Added Lines]",
          "2105:   sqlite3SelectAddColumnTypeAndCollation(pParse, pTab, pSelect, aff);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5195:       Select *pSel = pFrom->pSelect;",
          "5196:       if( pSel ){",
          "5197:         while( pSel->pPrior ) pSel = pSel->pPrior;",
          "5199:       }",
          "5200:     }",
          "5201:   }",
          "",
          "[Removed Lines]",
          "5198:         sqlite3SelectAddColumnTypeAndCollation(pParse, pTab, pSel);",
          "",
          "[Added Lines]",
          "5199:         sqlite3SelectAddColumnTypeAndCollation(pParse, pTab, pSel,",
          "5200:                                                SQLITE_AFF_NONE);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1883: #define sqlite3IsNumericAffinity(X)  ((X)>=SQLITE_AFF_NUMERIC)",
          "",
          "[Removed Lines]",
          "1877: #define SQLITE_AFF_BLOB     'A'",
          "1878: #define SQLITE_AFF_TEXT     'B'",
          "1879: #define SQLITE_AFF_NUMERIC  'C'",
          "1880: #define SQLITE_AFF_INTEGER  'D'",
          "1881: #define SQLITE_AFF_REAL     'E'",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3911: void sqlite3CommitInternalChanges(sqlite3*);",
          "3912: void sqlite3DeleteColumnNames(sqlite3*,Table*);",
          "3913: int sqlite3ColumnsFromExprList(Parse*,ExprList*,i16*,Column**);",
          "3916: void sqlite3OpenMasterTable(Parse *, int);",
          "3917: Index *sqlite3PrimaryKeyIndex(Table*);",
          "3918: i16 sqlite3ColumnOfIndex(Index*, i16);",
          "",
          "[Removed Lines]",
          "3914: void sqlite3SelectAddColumnTypeAndCollation(Parse*,Table*,Select*);",
          "3915: Table *sqlite3ResultSetOfSelect(Parse*,Select*);",
          "",
          "[Added Lines]",
          "3915: void sqlite3SelectAddColumnTypeAndCollation(Parse*,Table*,Select*,char);",
          "3916: Table *sqlite3ResultSetOfSelect(Parse*,Select*,char);",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1305:   if( !pIdx->zColAff ){",
          "1306:     if( sqlite3IndexAffinityStr(db, pIdx)==0 ) return SQLITE_AFF_BLOB;",
          "1307:   }",
          "1308:   return pIdx->zColAff[iCol];",
          "1309: }",
          "1310: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1308:   assert( pIdx->zColAff[iCol]!=0 );",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "333:   }",
          "334:   assert( v!=0 );",
          "340:     n--;",
          "341:     base++;",
          "342:     zAff++;",
          "343:   }",
          "345:     n--;",
          "346:   }",
          "",
          "[Removed Lines]",
          "339:   while( n>0 && zAff[0]==SQLITE_AFF_BLOB ){",
          "344:   while( n>1 && zAff[n-1]==SQLITE_AFF_BLOB ){",
          "",
          "[Added Lines]",
          "339:   assert( SQLITE_AFF_NONE<SQLITE_AFF_BLOB );",
          "340:   while( n>0 && zAff[0]<=SQLITE_AFF_BLOB ){",
          "345:   while( n>1 && zAff[n-1]<=SQLITE_AFF_BLOB ){",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "994:       p->pSrc->a[0].pSelect = pSub;",
          "995:       sqlite3SrcListAssignCursors(pParse, p->pSrc);",
          "996:       pSub->selFlags |= SF_Expanded;",
          "998:       if( pTab2==0 ){",
          "999:         rc = SQLITE_NOMEM;",
          "1000:       }else{",
          "",
          "[Removed Lines]",
          "997:       pTab2 = sqlite3ResultSetOfSelect(pParse, pSub);",
          "",
          "[Added Lines]",
          "997:       pTab2 = sqlite3ResultSetOfSelect(pParse, pSub, SQLITE_AFF_NONE);",
          "",
          "---------------"
        ],
        "test/view.test||test/view.test": [
          "File: test/view.test -> test/view.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "724:   1 1 3 3",
          "725: }",
          "727: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "727: #-------------------------------------------------------------------------",
          "728: reset_db",
          "729: do_execsql_test view-27.0 {",
          "730:   CREATE TABLE t0(c0 TEXT, c1);",
          "731:   INSERT INTO t0(c0, c1) VALUES (-1, 0);",
          "732:   CREATE VIEW v0(c0, c1) AS SELECT t0.c0, AVG(t0.c1) FROM t0;",
          "733: }",
          "735: do_execsql_test view-27.1 {",
          "736:   SELECT c0, typeof(c0), affinity(c0), c1, typeof(c1), affinity(c1) FROM v0;",
          "737: } {",
          "738:   -1   text text",
          "739:    0.0 real none",
          "740: }",
          "742: do_execsql_test view-27.2 { SELECT c0<c1 FROM v0 } 1",
          "743: do_execsql_test view-27.3 { SELECT c1<c0 FROM v0 } 0",
          "744: do_execsql_test view-27.4 {",
          "745:   SELECT 1 FROM v0 WHERE c1<c0",
          "746: } {}",
          "747: do_execsql_test view-27.5 {",
          "748:   SELECT 1 FROM v0 WHERE c0<c1",
          "749: } {1}",
          "751: do_execsql_test view-27.6 {",
          "752:   SELECT c0<c1 FROM (SELECT t0.c0 AS c0, AVG(t0.c1) AS c1 FROM t0)",
          "753: } 1",
          "754: do_execsql_test view-27.7 {",
          "755:   SELECT c1<c0 FROM (SELECT t0.c0 AS c0, AVG(t0.c1) AS c1 FROM t0)",
          "756: } 0",
          "757: do_execsql_test view-27.8 {",
          "758:   SELECT 1 FROM (SELECT t0.c0 AS c0, AVG(t0.c1) AS c1 FROM t0) WHERE c1<c0",
          "759: } {}",
          "760: do_execsql_test view-27.9 {",
          "761:   SELECT 1 FROM (SELECT t0.c0 AS c0, AVG(t0.c1) AS c1 FROM t0) WHERE c0<c1",
          "762: } {1}",
          "",
          "---------------"
        ],
        "test/window9.test||test/window9.test": [
          "File: test/window9.test -> test/window9.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:       );",
          "132: } {1 {sub-select returns 3 columns - expected 1}}",
          "135: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134: #-------------------------------------------------------------------------",
          "135: reset_db",
          "136: do_execsql_test 4.0 {",
          "137:   CREATE TABLE t1(a, b TEXT);",
          "138:   INSERT INTO t1 VALUES('A', 1), ('A', 2), ('2', 1), ('2', 2);",
          "139: }",
          "141: do_execsql_test 4.1.1 {",
          "142:   SELECT b, b=count(*), '1,2'                   FROM t1 GROUP BY b;",
          "143: } {1 0 1,2 2 1 1,2}",
          "144: do_execsql_test 4.1.2 {",
          "145:   SELECT b, b=count(*), group_concat(b) OVER () FROM t1 GROUP BY b;",
          "146: } {1 0 1,2 2 1 1,2}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "04687f9e03f3058d93f91350729ec85e5dda2c04",
      "candidate_info": {
        "commit_hash": "04687f9e03f3058d93f91350729ec85e5dda2c04",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/04687f9e03f3058d93f91350729ec85e5dda2c04",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fts3corrupt4.test"
        ],
        "message": "Fix an error in fts3_write.c allowing a corrupt database to cause a crash.\n\nFossilOrigin-Name: 6e4a5f22811bcd1485e27073ec96821d448b91b6d1ff1659cc3772449d19a762",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3corrupt4.test||test/fts3corrupt4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3754:     }",
          "3755:     p->iOff += fts3GetVarint32(&p->aNode[p->iOff], &nSuffix);",
          "3758:       return FTS_CORRUPT_VTAB;",
          "3759:     }",
          "3760:     blobGrowBuffer(&p->term, nPrefix+nSuffix, &rc);",
          "",
          "[Removed Lines]",
          "3757:     if( nPrefix>p->iOff || nSuffix>p->nNode-p->iOff ){",
          "",
          "[Added Lines]",
          "3757:     if( nPrefix>p->term.n || nSuffix>p->nNode-p->iOff ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3773:     }",
          "3774:   }",
          "3777:   return rc;",
          "3778: }",
          "",
          "[Removed Lines]",
          "3776:   assert( p->iOff<=p->nNode );",
          "",
          "[Added Lines]",
          "3776:   assert_fts3_nc( p->iOff<=p->nNode );",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 30dc05ac12910d318a737f8d7a0e895e5c42ff4c53472aeebc89f052eac05deb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "3915:   SELECT 'FyzLy'FROM t1 WHERE t1 MATCH 'j';",
          "3916: } {1 {database disk image is malformed}}",
          "3918: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3918: #-------------------------------------------------------------------------",
          "3919: reset_db",
          "3920: do_test 24.0 {",
          "3921:   sqlite3 db {}",
          "3922:   db deserialize [decode_hexdb {",
          "3923: .open --hexdb",
          "3924: | size 28672 pagesize 4096 filename crash-369d042958c29b.db",
          "3925: | page 1 offset 0",
          "3926: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "3927: |     16: 10 00 01 01 00 40 20 20 00 00 03 10 00 00 00 00   .....@  ........",
          "3928: |     96: 00 00 00 00 0d 0e b1 00 06 0d a4 00 0f 8d 0f 21   ...............!",
          "3929: |    112: 0e b9 0d c8 0e 7e 0d a4 00 00 00 00 00 00 00 00   .....~..........",
          "3930: |   3488: 00 00 00 00 22 07 06 17 11 11 01 31 74 61 62 6c   ...........1tabl",
          "3931: |   3504: 65 74 32 74 32 07 43 52 45 41 54 45 20 54 41 42   et2t2.CREATE TAB",
          "3932: |   3520: 4c 45 20 74 32 28 78 29 81 33 05 07 17 1f 1f 01   LE t2(x).3......",
          "3933: |   3536: 82 35 74 61 62 6c 65 74 31 5f 73 65 67 64 69 72   .5tablet1_segdir",
          "3934: |   3552: 74 31 5f 73 65 67 64 69 72 05 43 52 45 41 54 45   t1_segdir.CREATE",
          "3935: |   3568: 20 54 41 42 4c 45 20 27 74 31 5f 73 65 67 64 69    TABLE 't1_segdi",
          "3936: |   3584: 72 27 28 6c 65 76 65 6c 20 49 4e 54 45 47 45 52   r'(level INTEGER",
          "3937: |   3600: 2c 69 64 78 20 49 4e 54 45 47 45 52 2c 73 74 61   ,idx INTEGER,sta",
          "3938: |   3616: 72 74 5f 62 6c 6f 63 6b 20 49 4e 54 45 47 45 52   rt_block INTEGER",
          "3939: |   3632: 2c 6c 65 61 76 65 73 5f 65 6e 64 5f 62 6c 6f 63   ,leaves_end_bloc",
          "3940: |   3648: 6b 20 49 4e 54 45 47 45 52 2c 65 6e 64 5f 62 6c   k INTEGER,end_bl",
          "3941: |   3664: 6f 63 6b 20 49 4e 54 45 47 45 52 2c 72 6f 6f 74   ock INTEGER,root",
          "3942: |   3680: 20 42 4c 4f 42 2c 50 52 49 4d 41 52 59 20 4b 45    BLOB,PRIMARY KE",
          "3943: |   3696: 59 28 6c 65 76 65 6c 2c 20 69 64 78 29 29 31 06   Y(level, idx))1.",
          "3944: |   3712: 06 17 45 1f 01 00 69 6e 64 65 78 73 71 6c 69 74   ..E...indexsqlit",
          "3945: |   3728: 65 5f 61 75 74 6f 69 6e 64 65 78 5f 74 31 5f 73   e_autoindex_t1_s",
          "3946: |   3744: 65 67 64 69 72 5f 31 74 31 5f 73 65 67 64 69 72   egdir_1t1_segdir",
          "3947: |   3760: 06 0f c7 00 08 00 10 00 00 66 04 07 17 23 23 01   .........f...##.",
          "3948: |   3776: 81 13 74 61 62 6c 65 74 31 5f 73 65 67 6d 65 6e   ..tablet1_segmen",
          "3949: |   3792: 64 73 74 31 5f 73 65 67 6d 65 6e 74 73 04 43 52   dst1_segments.CR",
          "3950: |   3808: 45 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 73   EATE TABLE 't1_s",
          "3951: |   3824: 65 67 6d 65 6e 74 73 27 28 62 6c 6f 63 6b 69 64   egments'(blockid",
          "3952: |   3840: 20 49 4e 54 45 47 45 52 20 50 52 49 4d 41 52 59    INTEGER PRIMARY",
          "3953: |   3856: 20 4b 45 59 2c 20 62 6c 6f 63 6b 20 42 4c 4f 42    KEY, block BLOB",
          "3954: |   3872: 29 6a 03 07 17 21 21 01 81 1f 74 61 62 6c 65 74   )j...!!...tablet",
          "3955: |   3888: 31 4f 63 6f 6e 74 65 6e 74 74 31 5f 63 6f 6e 74   1Ocontentt1_cont",
          "3956: |   3904: 65 6e 74 03 43 52 45 41 54 45 20 54 41 42 4c 45   ent.CREATE TABLE",
          "3957: |   3920: 20 27 74 31 5f 63 6f 6e 74 65 6e 74 27 28 64 6f    't1_content'(do",
          "3958: |   3936: 63 69 64 20 49 4e 54 45 47 45 52 20 50 52 39 4d   cid INTEGER PR9M",
          "3959: |   3952: 41 52 59 20 4b 45 59 2c 20 27 63 30 61 27 2c 20   ARY KEY, 'c0a',",
          "3960: |   3968: 27 63 31 62 27 2c 20 27 63 32 63 27 29 38 02 06   'c1b', 'c2c')8..",
          "3961: |   3984: 17 11 11 08 5f 74 61 62 6c 65 74 31 74 31 43 52   ...._tablet1t1CR",
          "3962: |   4000: 45 41 54 45 20 56 49 52 54 55 41 4c 20 54 41 42   EATE VIRTUAL TAB",
          "3963: |   4016: 4c 45 20 74 31 20 55 53 49 4e 47 20 66 74 73 33   LE t1 USING fts3",
          "3964: |   4032: 28 61 2c 62 2c 63 29 00 00 00 00 00 00 00 00 00   (a,b,c).........",
          "3965: | page 3 offset 8192",
          "3966: |      0: 0d 00 00 00 26 0b 48 0e 0f d8 0f af 0f 86 0f 74   ....&.H........t",
          "3967: |     16: 0f 61 0f 4e 0f 2f 0f 0f 0e ef 0e d7 0e be 0e a5   .a.N./..........",
          "3968: |     32: 0e 8d 0e 74 0e 5b 0e 40 0e 24 0e 08 0d ef 0d d5   ...t.[.@.$......",
          "3969: |     48: 0d bb 0d a0 0e 94 03 28 0d 4f 0d 35 0d 1b 05 0b   .......(.O.5....",
          "3970: |     64: 0c da 0c b9 0c 99 0c 78 0c 57 0c 3e 0c 24 0c 0a   .......x.W.>.$..",
          "3971: |   2880: 00 00 00 00 00 00 00 00 81 3f 25 06 00 72 7f 00   .........?%..r..",
          "3972: |   2896: 00 43 4f 4d 50 49 4c 45 52 3d 67 63 63 2d 35 2e   .COMPILER=gcc-5.",
          "3973: |   2912: 34 2e 30 20 32 30 31 36 30 36 30 39 20 44 55 42   4.0 20160609 DUB",
          "3974: |   2928: 55 47 20 45 4e 41 e4 7c 45 20 44 42 53 54 41 54   UG ENA.|E DBSTAT",
          "3975: |   2944: e4 d1 54 41 42 20 45 4e 41 42 4c 45 20 46 54 53   ..TAB ENABLE FTS",
          "3976: |   2960: 34 20 45 4e 41 42 4c 45 20 46 54 53 35 20 45 4e   4 ENABLE FTS5 EN",
          "3977: |   2976: 41 42 4c 45 20 47 45 4f 50 4f 4c 59 20 45 4e 41   ABLE GEOPOLY ENA",
          "3978: |   2992: 42 4c 45 20 4a 53 4f 4e 31 20 45 4e 41 42 4c 45   BLE JSON1 ENABLE",
          "3979: |   3008: 20 4d 45 4d 53 59 53 35 20 45 4e 41 42 4c 45 20    MEMSYS5 ENABLE",
          "3980: |   3024: 42 54 52 45 45 20 4d 41 58 20 4d 45 4d 4f 52 59   BTREE MAX MEMORY",
          "3981: |   3040: 3d 35 30 30 30 30 30 30 30 20 4f 4c 49 54 20 4c   =50000000 OLIT L",
          "3982: |   3056: 4f 41 43 20 45 58 54 45 4e 53 49 4f 4e 21 54 48   OAC EXTENSION!TH",
          "3983: |   3072: 52 45 41 44 53 41 46 45 3d 30 18 24 05 00 25 0f   READSAFE=0.$..%.",
          "3984: |   3088: 19 54 48 52 45 41 44 53 41 46 45 3d 30 58 42 49   .THREADSAFE=0XBI",
          "3985: |   3104: 4e 41 52 59 18 23 05 00 25 0f 19 54 48 52 45 41   NARY.#..%..THREA",
          "3986: |   3120: 44 53 41 4b 75 3d 30 58 4d 4f 43 41 53 45 17 22   DSAKu=0XMOCASE..",
          "3987: |   3136: 05 00 25 0f 17 54 48 52 45 41 44 53 41 46 46 3d   ..%..THREADSAFF=",
          "3988: |   3152: 30 58 52 54 52 49 4d 1f 21 05 00 33 0f 19 4f 4d   0XRTRIM.!..3..OM",
          "3989: |   3168: 49 54 20 4c 4f 41 44 20 45 58 54 45 4e 52 49 4f   IT LOAD EXTENRIO",
          "3990: |   3184: 4e 58 42 49 4e 41 52 59 1f 20 05 00 33 0f 19 4f   NXBINARY. ..3..O",
          "3991: |   3200: 4d 49 54 20 4c 4f 41 44 20 45 58 54 45 4e 53 49   MIT LOAD EXTENSI",
          "3992: |   3216: 4f 4e 58 4e 4f 43 41 53 45 1e 1f 05 00 33 0f 17   ONXNOCASE....3..",
          "3993: |   3232: 4f 4d 49 54 20 4c 4f 41 44 20 45 58 54 45 4e 53   OMIT LOAD EXTENS",
          "3994: |   3248: 49 4f 4e 58 52 54 52 49 4d 1f 1e 05 00 33 0f 19   IONXRTRIM....3..",
          "3995: |   3264: 4d 41 58 20 4d 45 4d 4f 52 59 3d 35 30 30 30 30   MAX MEMORY=50000",
          "3996: |   3280: 30 30 30 58 42 49 4e 41 52 59 1f 1d 05 00 33 0f   000XBINARY....3.",
          "3997: |   3296: 19 4d 41 58 20 4d 45 4d 4f 52 59 3d 35 30 30 30   .MAX MEMORY=5000",
          "3998: |   3312: 30 30 30 30 58 4e 4f 43 41 53 45 1e 1c 05 00 33   0000XNOCASE....3",
          "3999: |   3328: 0f 17 4d 42 b8 20 4d 45 4d 4f 52 59 3d 35 30 30   ..MB. MEMORY=500",
          "4000: |   3344: 30 30 30 30 30 58 52 54 52 49 4d 18 1b 05 00 25   00000XRTRIM....%",
          "4001: |   3360: 0f 19 45 4e 41 42 4c 45 20 52 54 52 45 45 58 42   ..ENABLE RTREEXB",
          "4002: |   3376: 49 4e 41 52 59 18 1a 05 0d a5 0f 19 45 4e 41 42   INARY.......ENAB",
          "4003: |   3392: 4c 45 20 52 54 52 45 45 58 4e 4f 43 41 53 45 17   LE RTREEXNOCASE.",
          "4004: |   3408: 19 1c 00 25 0f 17 45 4e 41 42 4c 45 20 52 54 52   ...%..ENABLE RTR",
          "4005: |   3424: 45 45 58 52 54 52 49 4d 1a 18 05 00 29 0f 19 45   EEXRTRIM....)..E",
          "4006: |   3440: 4e 41 42 4c 45 20 4d 45 4d 53 59 53 35 58 42 49   NABLE MEMSYS5XBI",
          "4007: |   3456: 4e 41 52 59 1a 17 05 00 29 0f 19 45 4e 41 42 4c   NARY....)..ENABL",
          "4008: |   3472: 45 20 4d 45 4d 53 59 53 35 58 4e 4f 43 41 53 45   E MEMSYS5XNOCASE",
          "4009: |   3488: 19 16 05 00 29 0f 17 45 4e 41 42 4c 45 20 4d 45   ....)..ENABLE ME",
          "4010: |   3504: 4d 53 59 53 35 58 52 54 52 49 4d 18 14 05 01 25   MSYS5XRTRIM....%",
          "4011: |   3520: 0f 19 45 4e 12 42 4c 45 20 4a 53 4f 4e 31 58 42   ..EN.BLE JSON1XB",
          "4012: |   3536: 49 4e 41 52 59 18 14 05 00 25 09 d9 45 4e 41 42   INARY....%..ENAB",
          "4013: |   3552: 4c 45 20 4a 53 4f 3e 31 58 4e 4f 43 41 53 45 17   LE JSO>1XNOCASE.",
          "4014: |   3568: 13 05 00 25 0f 17 45 4e 40 42 4c 45 20 4a 53 4f   ...%..EN@BLE JSO",
          "4015: |   3584: 4e 31 58 52 54 52 49 4d 1a 12 05 82 29 0f 19 45   N1XRTRIM....)..E",
          "4016: |   3600: 4e 41 42 4c 45 20 47 45 4f 50 4f 4c 59 58 42 49   NABLE GEOPOLYXBI",
          "4017: |   3616: 4e 41 52 59 1a 11 05 c9 29 e8 19 46 4e 41 42 4c   NARY....)..FNABL",
          "4018: |   3632: 48 c0 47 45 4f 50 4f 4c 59 58 4e 74 43 41 53 45   H.GEOPOLYXNtCASE",
          "4019: |   3648: 19 10 05 00 29 0f 17 45 4e 41 42 4c 45 20 47 45   ....)..ENABLE GE",
          "4020: |   3664: 4f 50 4f 4c 59 58 52 54 52 49 4d 17 0f 05 00 23   OPOLYXRTRIM....#",
          "4021: |   3680: 0f 19 45 4e 41 42 4c 45 30 46 54 53 35 58 42 49   ..ENABLE0FTS5XBI",
          "4022: |   3696: 4e 41 52 59 17 0e 05 00 23 0f 19 45 4e 41 42 4c   NARY....#..ENABL",
          "4023: |   3712: 45 20 46 54 53 35 58 4e 4f 43 41 53 45 16 0e 05   E FTS5XNOCASE...",
          "4024: |   3728: 00 23 0f 17 45 4e 41 42 4c 45 20 46 54 53 35 58   .#..ENABLE FTS5X",
          "4025: |   3744: 52 54 52 49 4d 17 0c 05 00 23 0f 19 45 4e 41 42   RTRIM....#..ENAB",
          "4026: |   3760: 4c 45 20 46 54 53 34 58 42 49 4e 41 52 59 17 0b   LE FTS4XBINARY..",
          "4027: |   3776: 05 00 23 0f 19 45 4e 41 42 4c 45 20 46 54 53 34   ..#..ENABLE FTS4",
          "4028: |   3792: 58 4e 4f 43 41 53 45 16 0a 05 00 23 0f 17 45 4e   XNOCASE....#..EN",
          "4029: |   3808: 41 42 4c 45 20 46 54 53 34 58 52 54 52 49 4d 1e   ABLE FTS4XRTRIM.",
          "4030: |   3824: 09 05 00 31 0f 19 45 4e 42 42 4c 45 20 44 42 53   ...1..ENBBLE DBS",
          "4031: |   3840: 54 41 54 20 56 54 41 42 58 42 49 4e 41 52 59 1e   TAT VTABXBINARY.",
          "4032: |   3856: 08 05 00 31 0f 19 45 4e 41 42 4c 45 20 44 42 53   ...1..ENABLE DBS",
          "4033: |   3872: 54 41 54 20 56 54 41 42 58 4e 4f 43 41 53 45 1d   TAT VTABXNOCASE.",
          "4034: |   3888: 07 05 00 31 0f 17 45 4e 41 42 4c 45 20 44 42 53   ...1..ENABLE DBS",
          "4035: |   3904: 54 41 54 20 56 54 41 42 58 52 54 52 4a 4d 11 06   TAT VTABXRTRJM..",
          "4036: |   3920: 05 f0 17 0f 19 44 45 42 55 47 58 42 49 4e 41 52   .....DEBUGXBINAR",
          "4037: |   3936: 59 11 05 05 00 17 0e 19 44 45 42 55 47 58 4e 4f   Y.......DEBUGXNO",
          "4038: |   3952: 43 41 53 45 10 04 05 00 17 0f 16 44 45 42 55 47   CASE.......DEBUG",
          "4039: |   3968: 58 52 54 52 49 4d 27 03 05 00 43 0f 19 43 4f 4d   XRTRIM'...C..COM",
          "4040: |   3984: 50 49 4c 45 52 3d 67 63 63 2d 35 2e 34 2e 30 20   PILER=gcc-5.4.0",
          "4041: |   4000: 32 30 31 36 30 36 30 39 58 42 49 4e 41 52 59 27   20160609XBINARY'",
          "4042: |   4016: 02 05 00 43 0f 19 43 4f 4d 50 49 4c 45 52 3d 67   ...C..COMPILER=g",
          "4043: |   4032: 63 63 2d 35 2e 34 2e 30 20 32 30 31 36 30 36 30   cc-5.4.0 2016060",
          "4044: |   4048: 39 58 4e 4f 43 41 53 45 26 01 06 00 43 0f 17 43   9XNOCASE&...C..C",
          "4045: |   4064: 4f 4d 50 49 4b 45 52 3d 67 63 63 2d 35 2e 34 2e   OMPIKER=gcc-5.4.",
          "4046: |   4080: 30 20 32 30 31 36 30 36 40 39 58 29 54 52 49 4d   0 201606@9X)TRIM",
          "4047: | page 4 offset 12288",
          "4048: |      0: 0d 00 10 00 00 10 00 00 00 00 00 00 00 01 00 00   ................",
          "4049: | page 5 offset 16384",
          "4050: |      0: 0d 00 00 00 02 0b a0 00 0c ad 0b a0 00 00 00 00   ................",
          "4051: |   2976: 82 0a 02 08 08 09 08 08 17 84 06 30 20 32 35 33   ...........0 253",
          "4052: |   2992: 00 01 30 04 25 06 1b 00 00 08 32 30 31 36 30 36   ..0.%.....201606",
          "4053: |   3008: 30 39 03 25 07 00 00 01 34 03 25 05 00 00 01 35   09.%....4.%....5",
          "4054: |   3024: 03 25 04 00 01 07 30 30 30 30 30 30 30 03 25 1a   .%....0000000.%.",
          "4055: |   3040: 00 00 08 63 6f 6d 70 69 6c 65 72 03 25 02 00 00   ...compiler.%...",
          "4056: |   3056: 06 64 62 73 74 61 74 03 25 0a 00 01 04 65 62 75   .dbstat.%....ebu",
          "4057: |   3072: 67 03 25 08 00 00 06 65 6e 61 62 6c 65 09 25 09   g.%....enable.%.",
          "4058: |   3088: 05 04 04 04 04 04 00 01 08 78 74 65 6e 73 69 6f   .........xtensio",
          "4059: |   3104: 6e 03 25 1d 00 00 04 66 74 73 34 03 25 0d 00 03   n.%....fts4.%...",
          "4060: |   3120: 01 35 03 25 0f 00 00 03 67 63 63 03 25 03 00 01   .5.%....gcc.%...",
          "4061: |   3136: 06 65 6f 70 6f 6c 79 03 25 11 00 00 05 6a 73 6f   .eopoly.%....jso",
          "4062: |   3152: 6e 31 03 25 13 00 00 04 6c 6f 61 64 03 25 1c 00   n1.%....load.%..",
          "4063: |   3168: 00 03 6d 61 78 03 25 18 00 01 05 65 6e 6f 72 79   ..max.%....enory",
          "4064: |   3184: 03 25 19 00 03 04 ce 79 73 4d 03 25 15 00 00 04   .%.....ysM.%....",
          "4065: |   3200: 6f 6d 69 74 03 25 1b 00 00 05 72 74 72 65 65 03   omit.%....rtree.",
          "4066: |   3216: 25 17 00 00 0a 74 68 72 65 61 64 73 61 66 65 03   %....threadsafe.",
          "4067: |   3232: 25 0e 00 00 04 76 74 61 62 03 25 0b 00 86 50 01   %....vtab.%...P.",
          "4068: |   3248: 08 08 08 08 08 17 8d 12 30 20 38 33 35 00 01 30   ........0 835..0",
          "4069: |   3264: 12 01 06 00 01 06 00 01 06 00 1f 03 00 01 03 09   ................",
          "4070: |   3280: 51 03 00 00 08 32 30 31 36 30 36 30 39 09 01 07   Q....20160609...",
          "4071: |   3296: 00 01 07 00 01 07 00 00 01 34 09 01 05 00 01 05   .........4......",
          "4072: |   3312: 00 01 05 00 00 01 35 09 01 04 00 01 04 00 01 04   ......5.........",
          "4073: |   3328: 00 01 07 30 30 30 30 30 30 30 09 1c 04 00 01 04   ...0000000......",
          "4074: |   3344: 00 01 04 00 00 06 62 69 6e 61 72 79 3c 03 01 02   ......binary<...",
          "4075: |   3360: 02 00 03 01 02 02 00 03 01 02 02 00 03 01 02 02   ................",
          "4076: |   3376: 00 03 01 02 02 00 02 f1 02 02 00 03 01 02 02 00   ................",
          "4077: |   3392: 03 01 02 02 00 03 01 02 02 00 03 01 02 02 00 03   ................",
          "4078: |   3408: 01 02 02 00 03 01 02 02 00 00 08 63 6f 6d 70 69   ...........compi",
          "4079: |   3424: 6c 65 72 09 01 02 00 01 02 00 01 02 00 00 06 67   ler............g",
          "4080: |   3440: d2 73 74 61 74 09 07 03 00 01 03 00 01 03 00 01   .stat...........",
          "4081: |   3456: 04 65 62 75 67 09 04 02 00 01 02 00 01 02 00 00   .ebug...........",
          "4082: |   3472: 06 65 6e 6f 82 6c 65 3f 07 02 00 01 02 00 01 02   .eno.le?........",
          "4083: |   3488: b0 01 02 00 01 02 00 11 02 00 01 02 00 01 02 00   ................",
          "4084: |   3504: 01 02 00 01 02 00 01 02 00 01 a6 00 01 02 00 01   ................",
          "4085: |   3520: 02 05 51 02 00 01 02 00 01 02 00 01 02 00 01 02   ..Q.............",
          "4086: |   3536: 00 01 02 00 01 02 00 01 08 78 74 65 6e 73 69 6f   .........xtensio",
          "4087: |   3552: 6e 09 1f 04 00 01 04 00 00 04 00 00 04 66 74 73   n............fts",
          "4088: |   3568: 34 09 0a 03 00 01 03 00 01 03 00 03 01 35 09 0d   4............5..",
          "4089: |   3584: 03 00 01 03 00 01 03 00 00 03 67 63 63 09 01 03   ..........gcc...",
          "4090: |   3600: 00 01 03 00 01 03 00 01 06 65 6f 70 73 6c 79 09   .........eopsly.",
          "4091: |   3616: 10 03 00 01 03 00 01 03 00 00 05 6a 73 6f 6e 31   ...........json1",
          "4092: |   3632: 09 13 03 00 01 03 00 01 03 00 00 04 6c 6f 61 64   ............load",
          "4093: |   3648: 09 1f 03 00 01 03 00 01 03 00 00 03 6d 61 78 09   ............max.",
          "4094: |   3664: 1c 02 00 01 02 00 01 02 00 01 05 65 6d 6f 72 79   ...........emory",
          "4095: |   3680: 09 1c 03 00 01 03 00 01 03 00 03 04 73 79 73 35   ............sys5",
          "4096: |   3696: 09 16 03 00 01 03 00 01 03 00 00 06 6e 6f 63 61   ............noca",
          "4097: |   3712: 73 65 3c 02 01 02 02 00 03 01 12 02 00 03 01 02   se<.............",
          "4098: |   3728: 02 00 03 01 02 02 00 03 01 02 02 00 03 01 02 02   ................",
          "4099: |   3744: 00 03 01 02 02 00 03 01 02 02 00 03 01 02 02 00   ................",
          "4100: |   3760: 03 01 02 02 00 03 01 02 02 00 03 01 02 02 00 00   ................",
          "4101: |   3776: 04 6f 6d 69 74 09 1f 02 00 01 02 00 01 02 00 00   .omit...........",
          "4102: |   3792: 05 72 74 72 65 65 09 19 03 00 01 03 00 01 03 00   .rtree..........",
          "4103: |   3808: 03 02 69 6d 3c 01 01 02 02 00 03 01 02 02 00 03   ..im<...........",
          "4104: |   3824: 01 02 02 00 03 01 02 02 00 03 01 02 02 00 03 01   ................",
          "4105: |   3840: 02 02 00 03 01 02 02 00 03 01 02 02 00 03 01 02   ................",
          "4106: |   3856: 02 00 03 01 02 02 00 03 01 02 02 00 03 01 02 02   ................",
          "4107: |   3872: 00 00 0a 74 68 72 65 61 64 73 61 66 65 09 22 02   ...threadsafe...",
          "4108: |   3888: 00 01 02 00 01 02 00 00 04 76 74 61 62 09 07 04   .........vtab...",
          "4109: |   3904: 00 01 04 00 01 03 ff ff 01 78 b4 01 01 01 01 02   .........x......",
          "4110: |   3920: 00 01 01 01 02 00 01 01 01 02 00 01 01 01 02 00   ................",
          "4111: |   3936: 01 01 01 02 00 01 01 01 02 00 01 01 01 02 00 01   ................",
          "4112: |   3952: 01 01 02 00 01 01 01 07 30 01 01 01 02 00 01 01   ........0.......",
          "4113: |   3968: 01 02 00 11 01 01 02 00 01 01 01 02 00 11 01 01   ................",
          "4114: |   3984: 02 00 01 01 01 02 00 01 01 01 02 00 01 01 01 02   ................",
          "4115: |   4000: 00 01 01 01 02 00 01 01 01 02 00 01 01 01 02 00   ................",
          "4116: |   4016: 01 01 01 01 ff 01 01 01 02 00 01 01 01 02 00 01   ................",
          "4117: |   4032: 01 01 02 00 01 01 01 02 00 01 01 01 02 00 01 01   ................",
          "4118: |   4048: 01 02 00 01 01 09 c2 00 01 01 01 02 00 01 01 01   ................",
          "4119: |   4064: 02 00 01 01 01 02 00 01 01 01 02 00 01 01 01 02   ................",
          "4120: |   4080: 00 01 01 01 02 00 01 01 01 02 00 01 01 01 02 00   ................",
          "4121: | page 6 offset 20480",
          "4122: |      0: 0a 00 00 00 02 0f f5 00 0f fb 0f f5 00 00 00 00   ................",
          "4123: |   4080: 00 00 00 00 00 05 04 08 09 01 02 04 04 08 08 09   ................",
          "4124: | page 7 offset 24576",
          "4125: |      0: 0d 00 00 00 05 0f b8 00 0e f4 0f e9 10 d6 0f c7   ................",
          "4126: |   4016: 00 00 00 00 00 00 00 00 0d 05 02 23 61 75 74 6f   ...........#auto",
          "4127: |   4032: 6d 65 72 67 65 3d 35 0d 04 02 23 6d 65 72 67 65   merge=5...#merge",
          "4128: |   4048: 3d 31 00 00 00 00 00 00 00 00 00 00 00 00 00 00   =1..............",
          "4129: | end crash-369d042958c29b.db",
          "4130: }]} {}",
          "4132: do_catchsql_test 24.1 {",
          "4133:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT '4hE'+x FROM c WHERE x<72)",
          "4134:     INSERT INTO t1(a) SELECT randomblob(2829) FROM c;",
          "4135: } {0 {}}",
          "4137: do_catchsql_test 24.2 {",
          "4138:   UPDATE t1 SET b=quote((true) ) WHERE t1 MATCH 'h';",
          "4139: } {0 {}}",
          "4141: do_catchsql_test 24.3 {",
          "4142:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT 3+x FROM c WHERE x<72)",
          "4143:     INSERT INTO t1(a) SELECT randomblob(2829) FROM c;",
          "4144: } {0 {}}",
          "4146: do_catchsql_test 24.4 {",
          "4147:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT null<<x FROM c WHERE x<72)",
          "4148:     INSERT INTO t1(a) SELECT randomblob(2829) FROM c;",
          "4149: } {0 {}}",
          "4151: do_catchsql_test 24.5 {",
          "4152:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT 3+x FROM c WHERE x<72)",
          "4153:     INSERT INTO t1(a) SELECT randomblob(2829) FROM c;",
          "4154: } {0 {}}",
          "4156: do_catchsql_test 24.7 {",
          "4157:   INSERT INTO t1(t1) SELECT x FROM t2;",
          "4158: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}