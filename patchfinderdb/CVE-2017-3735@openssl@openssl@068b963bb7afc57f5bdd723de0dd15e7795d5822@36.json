{
  "cve_id": "CVE-2017-3735",
  "cve_desc": "While parsing an IPAddressFamily extension in an X.509 certificate, it is possible to do a one-byte overread. This would result in an incorrect text display of the certificate. This bug has been present since 2006 and is present in all versions of OpenSSL before 1.0.2m and 1.1.0g.",
  "repo": "openssl/openssl",
  "patch_hash": "068b963bb7afc57f5bdd723de0dd15e7795d5822",
  "patch_info": {
    "commit_hash": "068b963bb7afc57f5bdd723de0dd15e7795d5822",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/068b963bb7afc57f5bdd723de0dd15e7795d5822",
    "files": [
      "crypto/x509v3/v3_addr.c"
    ],
    "message": "Avoid out-of-bounds read\n\nFixes CVE 2017-3735\n\nReviewed-by: Kurt Roeckx <kurt@roeckx.be>\n(Merged from https://github.com/openssl/openssl/pull/4276)\n\n(cherry picked from commit b23171744b01e473ebbfd6edad70c1c3825ffbcd)",
    "before_after_code_files": [
      "crypto/x509v3/v3_addr.c||crypto/x509v3/v3_addr.c"
    ]
  },
  "patch_diff": {
    "crypto/x509v3/v3_addr.c||crypto/x509v3/v3_addr.c": [
      "File: crypto/x509v3/v3_addr.c -> crypto/x509v3/v3_addr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "85: unsigned int X509v3_addr_get_afi(const IPAddressFamily *f)",
      "86: {",
      "91: }",
      "",
      "[Removed Lines]",
      "87:     return ((f != NULL &&",
      "88:              f->addressFamily != NULL && f->addressFamily->data != NULL)",
      "89:             ? ((f->addressFamily->data[0] << 8) | (f->addressFamily->data[1]))",
      "90:             : 0);",
      "",
      "[Added Lines]",
      "87:     if (f == NULL",
      "88:             || f->addressFamily == NULL",
      "89:             || f->addressFamily->data == NULL",
      "90:             || f->addressFamily->length < 2)",
      "91:         return 0;",
      "92:     return (f->addressFamily->data[0] << 8) | f->addressFamily->data[1];",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a8e047a819b8f8bf8699e0bbfc838e1f23e82051",
      "candidate_info": {
        "commit_hash": "a8e047a819b8f8bf8699e0bbfc838e1f23e82051",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/a8e047a819b8f8bf8699e0bbfc838e1f23e82051",
        "files": [
          "crypto/bn/bn_lib.c",
          "crypto/bn/bn_mont.c"
        ],
        "message": "BN_copy now propagates BN_FLG_CONSTTIME\n\nReviewed-by: Paul Dale <paul.dale@oracle.com>\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/4377)\n\n(cherry picked from commit 9f9442918aeaed5dc2442d81ab8d29fe3e1fb906)",
        "before_after_code_files": [
          "crypto/bn/bn_lib.c||crypto/bn/bn_lib.c",
          "crypto/bn/bn_mont.c||crypto/bn/bn_mont.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/bn/bn_lib.c||crypto/bn/bn_lib.c": [
          "File: crypto/bn/bn_lib.c -> crypto/bn/bn_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "406:     memcpy(a->d, b->d, sizeof(b->d[0]) * b->top);",
          "407: #endif",
          "409:     a->top = b->top;",
          "410:     a->neg = b->neg;",
          "411:     bn_check_top(a);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "409:     if (BN_get_flags(b, BN_FLG_CONSTTIME) != 0)",
          "410:         BN_set_flags(a, BN_FLG_CONSTTIME);",
          "",
          "---------------"
        ],
        "crypto/bn/bn_mont.c||crypto/bn/bn_mont.c": [
          "File: crypto/bn/bn_mont.c -> crypto/bn/bn_mont.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "259:     if (!BN_copy(&(mont->N), mod))",
          "263:     mont->N.neg = 0;",
          "265: #ifdef MONT_WORD",
          "",
          "[Removed Lines]",
          "261:     if (BN_get_flags(mod, BN_FLG_CONSTTIME) != 0)",
          "262:         BN_set_flags(&(mont->N), BN_FLG_CONSTTIME);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5d227f9af07646702e1247836f7fbf1ca9b8a2bc",
      "candidate_info": {
        "commit_hash": "5d227f9af07646702e1247836f7fbf1ca9b8a2bc",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/5d227f9af07646702e1247836f7fbf1ca9b8a2bc",
        "files": [
          "crypto/cms/cms_sd.c"
        ],
        "message": "Check for malloc failure\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/4805)\n\n(cherry picked from commit 378db52bb0177ae03cac3c3ba194bb6dec34a2d7)",
        "before_after_code_files": [
          "crypto/cms/cms_sd.c||crypto/cms/cms_sd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/cms/cms_sd.c||crypto/cms/cms_sd.c": [
          "File: crypto/cms/cms_sd.c -> crypto/cms/cms_sd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "713:     md = EVP_get_digestbyobj(si->digestAlgorithm->algorithm);",
          "714:     if (md == NULL)",
          "715:         return -1;",
          "718:     mctx = si->mctx;",
          "719:     if (EVP_DigestVerifyInit(mctx, &si->pctx, md, NULL, si->pkey) <= 0)",
          "720:         goto err;",
          "",
          "[Removed Lines]",
          "716:     if (si->mctx == NULL)",
          "717:         si->mctx = EVP_MD_CTX_new();",
          "",
          "[Added Lines]",
          "716:     if (si->mctx == NULL && (si->mctx = EVP_MD_CTX_new()) == NULL) {",
          "717:         CMSerr(CMS_F_CMS_SIGNERINFO_VERIFY, ERR_R_MALLOC_FAILURE);",
          "718:         return -1;",
          "719:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "42aebbd557c9deb5746ef9e69241d2de8913fdd5",
      "candidate_info": {
        "commit_hash": "42aebbd557c9deb5746ef9e69241d2de8913fdd5",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/42aebbd557c9deb5746ef9e69241d2de8913fdd5",
        "files": [
          "crypto/evp/e_aes_cbc_hmac_sha1.c",
          "crypto/evp/e_aes_cbc_hmac_sha256.c"
        ],
        "message": "Remove some dead code\n\nThe intention of the removed code was to check if the previous operation\ncarried. However this does not work. The \"mask\" value always ends up being\na constant and is all ones - thus it has no effect. This check is no longer\nrequired because of the previous commit.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3832)\n\n(cherry picked from commit d5475e319575a45b20f560bdfae56cbfb165cb01)",
        "before_after_code_files": [
          "crypto/evp/e_aes_cbc_hmac_sha1.c||crypto/evp/e_aes_cbc_hmac_sha1.c",
          "crypto/evp/e_aes_cbc_hmac_sha256.c||crypto/evp/e_aes_cbc_hmac_sha256.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/evp/e_aes_cbc_hmac_sha1.c||crypto/evp/e_aes_cbc_hmac_sha1.c": [
          "File: crypto/evp/e_aes_cbc_hmac_sha1.c -> crypto/evp/e_aes_cbc_hmac_sha1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "539:             pad = constant_time_select(mask, pad, maxpad);",
          "541:             inp_len = len - (SHA_DIGEST_LENGTH + pad + 1);",
          "546:             key->aux.tls_aad[plen - 2] = inp_len >> 8;",
          "547:             key->aux.tls_aad[plen - 1] = inp_len;",
          "",
          "[Removed Lines]",
          "542:             mask = (0 - ((inp_len - len) >> (sizeof(inp_len) * 8 - 1)));",
          "543:             inp_len &= mask;",
          "544:             ret &= (int)mask;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "crypto/evp/e_aes_cbc_hmac_sha256.c||crypto/evp/e_aes_cbc_hmac_sha256.c": [
          "File: crypto/evp/e_aes_cbc_hmac_sha256.c -> crypto/evp/e_aes_cbc_hmac_sha256.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "549:             pad = constant_time_select(mask, pad, maxpad);",
          "551:             inp_len = len - (SHA256_DIGEST_LENGTH + pad + 1);",
          "556:             key->aux.tls_aad[plen - 2] = inp_len >> 8;",
          "557:             key->aux.tls_aad[plen - 1] = inp_len;",
          "",
          "[Removed Lines]",
          "552:             mask = (0 - ((inp_len - len) >> (sizeof(inp_len) * 8 - 1)));",
          "553:             inp_len &= mask;",
          "554:             ret &= (int)mask;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "64903a26c5855347738825d7724e76e8a89180f3",
      "candidate_info": {
        "commit_hash": "64903a26c5855347738825d7724e76e8a89180f3",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/64903a26c5855347738825d7724e76e8a89180f3",
        "files": [
          "test/run_tests.pl"
        ],
        "message": "test/run_tests.pl: Make sure to exit with a code that's understood universally\n\nTAP::Parser::Aggregator::has_errors may return any number, not just 0\nand 1.  With Perl on VMS, any number from 2 and on is interpreted as a\nVMS status, the 3 lower bits are the encoded severity (1 = SUCCESS,\nfor example), so depending on what has_errors returns, a test failure\nmight be interpreted as a success.  Therefore, it's better to make\nsure the exit code is 0 or 1, nothing else (they are special on VMS,\nand mean SUCCESS or FAILURE, to match Unix conventions).\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3880)\n\n(cherry picked from commit 4549ed12ec3337313c14815438fa9aee88bf1359)",
        "before_after_code_files": [
          "test/run_tests.pl||test/run_tests.pl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/run_tests.pl||test/run_tests.pl": [
          "File: test/run_tests.pl -> test/run_tests.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:     my $harness = $TAP_Harness->new(\\%tapargs);",
          "65:     my $ret = $harness->runtests(sort @tests);",
          "68: }",
          "",
          "[Removed Lines]",
          "67:     exit $ret->has_errors if (ref($ret) eq \"TAP::Parser::Aggregator\");",
          "",
          "[Added Lines]",
          "67:     # $ret->has_errors may be any number, not just 0 or 1.  On VMS, numbers",
          "68:     # from 2 and on are used as is as VMS statuses, which has severity encoded",
          "69:     # in the lower 3 bits.  0 and 1, on the other hand, generate SUCCESS and",
          "70:     # FAILURE, so for currect reporting on all platforms, we make sure the only",
          "71:     # exit codes are 0 and 1.  Double-bang is the trick to do so.",
          "72:     exit !!$ret->has_errors if (ref($ret) eq \"TAP::Parser::Aggregator\");",
          "74:     # If this isn't a TAP::Parser::Aggregator, it's the pre-TAP test harness,",
          "75:     # which simply dies at the end if any test failed, so we don't need to",
          "76:     # bother with any exit code in that case.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e502cc86df9dafded1694fceb3228ee34d11c11a",
      "candidate_info": {
        "commit_hash": "e502cc86df9dafded1694fceb3228ee34d11c11a",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/e502cc86df9dafded1694fceb3228ee34d11c11a",
        "files": [
          "crypto/bn/asm/rsaz-avx2.pl"
        ],
        "message": "bn/asm/rsaz-avx2.pl: fix digit correction bug in rsaz_1024_mul_avx2.\n\nCredit to OSS-Fuzz for finding this.\n\nCVE-2017-3738\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "crypto/bn/asm/rsaz-avx2.pl||crypto/bn/asm/rsaz-avx2.pl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/bn/asm/rsaz-avx2.pl||crypto/bn/asm/rsaz-avx2.pl": [
          "File: crypto/bn/asm/rsaz-avx2.pl -> crypto/bn/asm/rsaz-avx2.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "246:  vmovdqu  32*8-128($ap), $ACC8",
          "248:  lea 192(%rsp), $tp0   # 64+128=192",
          "250:  jmp .LOOP_GRANDE_SQR_1024",
          "252: .align 32",
          "",
          "[Removed Lines]",
          "249:  vpbroadcastq .Land_mask(%rip), $AND_MASK",
          "",
          "[Added Lines]",
          "249:  vmovdqu .Land_mask(%rip), $AND_MASK",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1077:  vpmuludq 32*6-128($np),$Yi,$TEMP1",
          "1078:  vpaddq  $TEMP1,$ACC6,$ACC6",
          "1079:  vpmuludq 32*7-128($np),$Yi,$TEMP2",
          "1081:  vpaddq  $TEMP2,$ACC7,$ACC7",
          "1082:  vpmuludq 32*8-128($np),$Yi,$TEMP0",
          "1084:  vpaddq  $TEMP0,$ACC8,$ACC8",
          "1086:  mov %rbx, %rax",
          "",
          "[Removed Lines]",
          "1080:   vpblendd \\$3, $ZERO, $ACC9, $ACC9 # correct $ACC3",
          "1083:   vpaddq  $ACC9, $ACC3, $ACC3  # correct $ACC3",
          "",
          "[Added Lines]",
          "1080:   vpblendd \\$3, $ZERO, $ACC9, $TEMP1 # correct $ACC3",
          "1083:   vpaddq  $TEMP1, $ACC3, $ACC3  # correct $ACC3",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1093:   vmovdqu -8+32*2-128($ap),$TEMP2",
          "1095:  mov $r1, %rax",
          "1096:  imull $n0, %eax",
          "1097:  and \\$0x1fffffff, %eax",
          "1099:   imulq 16-128($ap),%rbx",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1096:   vpblendd \\$0xfc, $ZERO, $ACC9, $ACC9 # correct $ACC3",
          "1098:   vpaddq  $ACC9,$ACC4,$ACC4  # correct $ACC3",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1329: # But as we underutilize resources, it's possible to correct in",
          "1330: # each iteration with marginal performance loss. But then, as",
          "1331: # we do it in each iteration, we can correct less digits, and",
          "1336: $TEMP0 = $ACC9;",
          "1337: $TEMP3 = $Bi;",
          "1338: $TEMP4 = $Yi;",
          "1339: $code.=<<___;",
          "1341:  vpaddq  (%rsp), $TEMP1, $ACC0",
          "1343:  vpsrlq  \\$29, $ACC0, $TEMP1",
          "",
          "[Removed Lines]",
          "1332: # avoid performance penalties completely. Also note that we",
          "1333: # correct only three digits out of four. This works because",
          "1334: # most significant digit is subjected to less additions.",
          "1340:  vpermq  \\$0, $AND_MASK, $AND_MASK",
          "",
          "[Added Lines]",
          "1334: # avoid performance penalties completely.",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1771: .align 64",
          "1772: .Land_mask:",
          "1774: .Lscatter_permd:",
          "1775:  .long 0,2,4,6,7,7,7,7",
          "1776: .Lgather_permd:",
          "",
          "[Removed Lines]",
          "1773:  .quad 0x1fffffff,0x1fffffff,0x1fffffff,-1",
          "",
          "[Added Lines]",
          "1772:  .quad 0x1fffffff,0x1fffffff,0x1fffffff,0x1fffffff",
          "",
          "---------------"
        ]
      }
    }
  ]
}