{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d4ee61ffc7938e9a1167aadb94b9cf60e4310fe1",
      "candidate_info": {
        "commit_hash": "d4ee61ffc7938e9a1167aadb94b9cf60e4310fe1",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/d4ee61ffc7938e9a1167aadb94b9cf60e4310fe1",
        "files": [
          "test/simple/test-child-process-fork2.js",
          "test/simple/test-isolates.js",
          "test/simple/test-isolates0.js",
          "test/simple/test-isolates1.js",
          "test/simple/test-isolates2.js"
        ],
        "message": "Add failing test-isolates2.js",
        "before_after_code_files": [
          "test/simple/test-child-process-fork2.js||test/simple/test-child-process-fork2.js",
          "test/simple/test-isolates1.js||test/simple/test-isolates1.js",
          "test/simple/test-isolates2.js||test/simple/test-isolates2.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-child-process-fork2.js||test/simple/test-child-process-fork2.js": [
          "File: test/simple/test-child-process-fork2.js -> test/simple/test-child-process-fork2.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: var socketCloses = 0;",
          "28: var N = 10;",
          "32: var messageCount = 0;",
          "",
          "[Removed Lines]",
          "30: var n = fork(common.fixturesDir + '/fork2.js');",
          "",
          "[Added Lines]",
          "30: var options = {",
          "31:   thread: process.TEST_ISOLATE ? true : false",
          "32: };",
          "34: var n = fork(common.fixturesDir + '/fork2.js', [], options);",
          "",
          "---------------"
        ],
        "test/simple/test-isolates1.js||test/simple/test-isolates1.js": [
          "File: test/simple/test-isolates1.js -> test/simple/test-isolates1.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: if (!process.features.isolates) return;",
          "4: var assert = require('assert');",
          "9: process.TEST_ISOLATE = true;",
          "10: require('./test-child-process-fork');",
          "12: var numThreads = process.binding('isolates').count();",
          "13: assert.ok(numThreads > 1);",
          "",
          "---------------"
        ],
        "test/simple/test-isolates2.js||test/simple/test-isolates2.js": [
          "File: test/simple/test-isolates2.js -> test/simple/test-isolates2.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: var assert = require('assert');",
          "9: process.TEST_ISOLATE = true;",
          "12: var numThreads = process.binding('isolates').count();",
          "13: assert.ok(numThreads > 1);",
          "",
          "[Removed Lines]",
          "10: require('./test-child-process-fork');",
          "",
          "[Added Lines]",
          "10: require('./test-child-process-fork2');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "70005be4ffdcfed0ac371873fa79a308ae4cc546",
      "candidate_info": {
        "commit_hash": "70005be4ffdcfed0ac371873fa79a308ae4cc546",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/70005be4ffdcfed0ac371873fa79a308ae4cc546",
        "files": [
          "lib/http.js",
          "lib/net.js",
          "test/simple/test-http-timeout.js"
        ],
        "message": "Fixing ClientRequest setTimeout EventEmitter Leak\n\nThis will fix #3068",
        "before_after_code_files": [
          "lib/http.js||lihttp.js",
          "lib/net.js||linet.js",
          "test/simple/test-http-timeout.js||test/simple/test-http-timeout.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/http.js||lihttp.js": [
          "File: lib/http.js -> lihttp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1471:   this._deferToConnect('setKeepAlive', arguments);",
          "1472: };",
          "1475: exports.request = function(options, cb) {",
          "1476:   if (options.protocol && options.protocol !== 'http:') {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/net.js||linet.js": [
          "File: lib/net.js -> linet.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "173:     }",
          "174:   } else if (msecs === 0) {",
          "175:     timers.unenroll(this);",
          "176:   }",
          "177: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-http-timeout.js||test/simple/test-http-timeout.js": [
          "File: test/simple/test-http-timeout.js -> test/simple/test-http-timeout.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: var common = require('../common');",
          "24: var assert = require('assert');",
          "26: var http = require('http');",
          "28: var port = 12345;",
          "29: var server = http.createServer(function(req, res) {",
          "30:       res.writeHead(200, {'Content-Type': 'text/plain'});",
          "31:       res.end('OK');",
          "32: });",
          "34: var agent = new http.Agent({maxSockets: 1});",
          "36: server.listen(port, function() {",
          "38:   for (var i = 0; i < 11; ++i) {",
          "39:     createRequest().end();",
          "40:   }",
          "42:   function callback(){}",
          "44:   var count = 0;",
          "46:   function createRequest() {",
          "47:     var req = http.request({port: port, path: '/', agent: agent}, function(res) {",
          "49:       req.clearTimeout(callback);",
          "51:       res.on('end', function() {",
          "52:         count++;",
          "54:         if (count == 11) {",
          "55:           server.close();",
          "56:         }",
          "57:       })",
          "58:     });",
          "60:     req.setTimeout(1000, callback);",
          "61:     return req;",
          "62:   }",
          "63: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "07701e7cc85feaeaa0a2a6c8146b0cb3eefc12fe",
      "candidate_info": {
        "commit_hash": "07701e7cc85feaeaa0a2a6c8146b0cb3eefc12fe",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/07701e7cc85feaeaa0a2a6c8146b0cb3eefc12fe",
        "files": [
          "src/node_zlib.cc"
        ],
        "message": "zlib: C++ style fixes",
        "before_after_code_files": [
          "src/node_zlib.cc||src/node_zlib.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_zlib.cc||src/node_zlib.cc": [
          "File: src/node_zlib.cc -> src/node_zlib.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:   }",
          "76:     HandleScope scope;",
          "77:     assert(args.Length() == 7);",
          "",
          "[Removed Lines]",
          "74:   static Handle<Value>",
          "75:   Write(const Arguments& args) {",
          "",
          "[Added Lines]",
          "74:   static Handle<Value> Write(const Arguments& args) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:       assert(Buffer::HasInstance(args[1]));",
          "98:       Local<Object> in_buf;",
          "99:       in_buf = args[1]->ToObject();",
          "103:       assert(in_off + in_len <= Buffer::Length(in_buf));",
          "104:       in = reinterpret_cast<Bytef *>(Buffer::Data(in_buf) + in_off);",
          "",
          "[Removed Lines]",
          "100:       in_off = (size_t)args[2]->Uint32Value();",
          "101:       in_len = (size_t)args[3]->Uint32Value();",
          "",
          "[Added Lines]",
          "99:       in_off = args[2]->Uint32Value();",
          "100:       in_len = args[3]->Uint32Value();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "107:     assert(Buffer::HasInstance(args[4]));",
          "108:     Local<Object> out_buf = args[4]->ToObject();",
          "111:     assert(out_off + out_len <= Buffer::Length(out_buf));",
          "112:     out = reinterpret_cast<Bytef *>(Buffer::Data(out_buf) + out_off);",
          "",
          "[Removed Lines]",
          "109:     out_off = (size_t)args[5]->Uint32Value();",
          "110:     out_len = (size_t)args[6]->Uint32Value();",
          "",
          "[Added Lines]",
          "108:     out_off = args[5]->Uint32Value();",
          "109:     out_len = args[6]->Uint32Value();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "115:     uv_work_t* work_req = &(ctx->work_req_);",
          "117:     ctx->strm_.avail_in = in_len;",
          "119:     ctx->strm_.avail_out = out_len;",
          "120:     ctx->strm_.next_out = out;",
          "121:     ctx->flush_ = flush;",
          "",
          "[Removed Lines]",
          "118:     ctx->strm_.next_in = &(*in);",
          "",
          "[Added Lines]",
          "117:     ctx->strm_.next_in = in;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "143:     ZCtx<mode> *ctx = container_of(work_req, ZCtx<mode>, work_req_);",
          "",
          "[Removed Lines]",
          "141:   static void",
          "142:   Process(uv_work_t* work_req) {",
          "",
          "[Added Lines]",
          "140:   static void Process(uv_work_t* work_req) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "150:       case DEFLATE:",
          "151:       case GZIP:",
          "152:       case DEFLATERAW:",
          "154:         break;",
          "155:       case UNZIP:",
          "156:       case INFLATE:",
          "157:       case GUNZIP:",
          "158:       case INFLATERAW:",
          "160:         break;",
          "161:       default:",
          "162:         assert(0 && \"wtf?\");",
          "",
          "[Removed Lines]",
          "153:         err = deflate(&(ctx->strm_), ctx->flush_);",
          "159:         err = inflate(&(ctx->strm_), ctx->flush_);",
          "",
          "[Added Lines]",
          "151:         err = deflate(&ctx->strm_, ctx->flush_);",
          "157:         err = inflate(&ctx->strm_, ctx->flush_);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "169:   }",
          "174:     HandleScope scope;",
          "175:     ZCtx<mode> *ctx = container_of(work_req, ZCtx<mode>, work_req_);",
          "176:     Local<Integer> avail_out = Integer::New(ctx->strm_.avail_out);",
          "177:     Local<Integer> avail_in = Integer::New(ctx->strm_.avail_in);",
          "",
          "[Removed Lines]",
          "172:   static void",
          "173:   After(uv_work_t* work_req) {",
          "",
          "[Added Lines]",
          "170:   static void After(uv_work_t* work_req) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "187:     ctx->Unref();",
          "188:   }",
          "192:     HandleScope scope;",
          "193:     ZCtx<mode> *ctx = new ZCtx<mode>();",
          "194:     ctx->Wrap(args.This());",
          "",
          "[Removed Lines]",
          "190:   static Handle<Value>",
          "191:   New(const Arguments& args) {",
          "",
          "[Added Lines]",
          "188:   static Handle<Value> New(const Arguments& args) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "196:   }",
          "201:     HandleScope scope;",
          "203:     assert(args.Length() == 4 &&",
          "",
          "[Removed Lines]",
          "199:   static Handle<Value>",
          "200:   Init(const Arguments& args) {",
          "",
          "[Added Lines]",
          "196:   static Handle<Value> Init(const Arguments& args) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "225:     return Undefined();",
          "226:   }",
          "234:     ctx->level_ = level;",
          "235:     ctx->windowBits_ = windowBits;",
          "236:     ctx->memLevel_ = memLevel;",
          "",
          "[Removed Lines]",
          "228:   static void",
          "229:   Init(ZCtx *ctx,",
          "230:        int level,",
          "231:        int windowBits,",
          "232:        int memLevel,",
          "233:        int strategy) {",
          "",
          "[Added Lines]",
          "224:   static void Init(ZCtx *ctx, int level, int windowBits, int memLevel,",
          "225:                    int strategy) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e3c0c86b280854e4ad8db9bd5f6c645ffe9e9966",
      "candidate_info": {
        "commit_hash": "e3c0c86b280854e4ad8db9bd5f6c645ffe9e9966",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/e3c0c86b280854e4ad8db9bd5f6c645ffe9e9966",
        "files": [
          "src/node.js"
        ],
        "message": "Change removed process methods to be non-enumerable.",
        "before_after_code_files": [
          "src/node.js||src/node.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.js||src/node.js": [
          "File: src/node.js -> src/node.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "459:   };",
          "461:   startup.removedMethods = function() {",
          "462:     for (var method in startup._removedProcessMethods) {",
          "463:       var reason = startup._removedProcessMethods[method];",
          "465:     }",
          "466:   };",
          "",
          "[Removed Lines]",
          "464:       process[method] = startup._removedMethod(reason);",
          "",
          "[Added Lines]",
          "462:     var desc = {",
          "463:       configurable: true,",
          "464:       writable: true,",
          "465:       enumerable: false",
          "466:     };",
          "469:       desc.value = startup._removedMethod(reason);",
          "470:       Object.defineProperty(process, method, desc);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ea4b1c1c0c2bf6e86385a84d49995553cc58360f",
      "candidate_info": {
        "commit_hash": "ea4b1c1c0c2bf6e86385a84d49995553cc58360f",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/ea4b1c1c0c2bf6e86385a84d49995553cc58360f",
        "files": [
          "deps/uv/include/uv-private/uv-unix.h",
          "deps/uv/src/unix/core.c",
          "deps/uv/src/unix/sunos.c",
          "deps/uv/src/win/fs.c"
        ],
        "message": "Upgrade libuv to bc4126b",
        "before_after_code_files": [
          "deps/uv/include/uv-private/uv-unix.h||deps/uv/include/uv-private/uv-unix.h",
          "deps/uv/src/unix/core.c||deps/uv/src/unix/core.c",
          "deps/uv/src/unix/sunos.c||deps/uv/src/unix/sunos.c",
          "deps/uv/src/win/fs.c||deps/uv/src/win/fs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/include/uv-private/uv-unix.h||deps/uv/include/uv-private/uv-unix.h": [
          "File: deps/uv/include/uv-private/uv-unix.h -> deps/uv/include/uv-private/uv-unix.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: #include <pwd.h>",
          "37: #include <termios.h>",
          "40: typedef struct {",
          "41:   char* base;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: #if __sun",
          "40: # include <sys/port.h>",
          "41: # include <port.h>",
          "42: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52: typedef void* uv_lib_t;",
          "55: #define UV_LOOP_PRIVATE_FIELDS \\",
          "56:   ares_channel channel; \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60: #if defined(PORT_SOURCE_FILE)",
          "61: # define UV_LOOP_PRIVATE_PLATFORM_FIELDS              \\",
          "62:   ev_io fs_event_watcher;                             \\",
          "63:   int fs_fd;",
          "64: #else",
          "65: # define UV_LOOP_PRIVATE_PLATFORM_FIELDS",
          "66: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62:   ev_timer timer; \\",
          "65: #define UV_REQ_BUFSML_SIZE (4)",
          "",
          "[Removed Lines]",
          "63:   struct ev_loop* ev;",
          "",
          "[Added Lines]",
          "76:   struct ev_loop* ev; \\",
          "77:   UV_LOOP_PRIVATE_PLATFORM_FIELDS",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "207: #elif defined(__sun)",
          "212: #ifdef PORT_SOURCE_FILE",
          "213: # define UV_FS_EVENT_PRIVATE_FIELDS \\",
          "215:   uv_fs_event_cb cb; \\",
          "216:   file_obj_t fo;",
          "",
          "[Removed Lines]",
          "209: #include <sys/port.h>",
          "210: #include <port.h>",
          "214:   ev_io event_watcher; \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/core.c||deps/uv/src/unix/core.c": [
          "File: deps/uv/src/unix/core.c -> deps/uv/src/unix/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include \"uv.h\"",
          "",
          "[Removed Lines]",
          "22: #include \"unix/internal.h\"",
          "",
          "[Added Lines]",
          "22: #include \"internal.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "151:   uv_loop_t* loop = calloc(1, sizeof(uv_loop_t));",
          "152:   loop->ev = ev_loop_new(0);",
          "153:   ev_set_userdata(loop->ev, loop);",
          "154:   return loop;",
          "155: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "154: #if HAVE_PORTS_FS",
          "155:   loop->fs_fd = -1;",
          "156: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "163:   memset(loop, 0, sizeof *loop);",
          "164: #endif",
          "166:   if (loop == default_loop_ptr)",
          "167:     default_loop_ptr = NULL;",
          "168:   else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169: #if HAVE_PORTS_FS",
          "170:   if (loop->fs_fd != -1) {",
          "171:     uv__close(loop->fs_fd);",
          "172:   }",
          "173: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "182:     default_loop_struct.ev = ev_default_loop(EVBACKEND_KQUEUE);",
          "183: #else",
          "184:     default_loop_struct.ev = ev_default_loop(EVFLAG_AUTO);",
          "185: #endif",
          "186:     ev_set_userdata(default_loop_struct.ev, default_loop_ptr);",
          "187:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "194: #endif",
          "195: #if HAVE_PORTS_FS",
          "196:     default_loop_struct.fs_fd = -1;",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/sunos.c||deps/uv/src/unix/sunos.c": [
          "File: deps/uv/src/unix/sunos.c -> deps/uv/src/unix/sunos.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: #if HAVE_PORTS_FS",
          "37: # include <sys/port.h>",
          "38: # include <port.h>",
          "39: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: # define PORT_FIRED 0x69",
          "41: # define PORT_UNUSED 0x0",
          "42: # define PORT_LOADED 0x99",
          "43: # define PORT_DELETED -1",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91: #if HAVE_PORTS_FS",
          "92: static void uv__fs_event_rearm(uv_fs_event_t *handle) {",
          "94:                      PORT_SOURCE_FILE,",
          "95:                      (uintptr_t) &handle->fo,",
          "96:                      FILE_ATTRIB | FILE_MODIFIED,",
          "98:     uv__set_sys_error(handle->loop, errno);",
          "99:   }",
          "100: }",
          "103: static void uv__fs_event_read(EV_P_ ev_io* w, int revents) {",
          "104:   uv_fs_event_t *handle;",
          "105:   timespec_t timeout;",
          "106:   port_event_t pe;",
          "107:   int events;",
          "108:   int r;",
          "112:   do {",
          "114:     do {",
          "115:       memset(&timeout, 0, sizeof timeout);",
          "117:     }",
          "118:     while (r == -1 && errno == EINTR);",
          "120:     if (r == -1 && errno == ETIME)",
          "121:       break;",
          "123:     assert((r == 0) && \"unexpected port_get() error\");",
          "125:     events = 0;",
          "",
          "[Removed Lines]",
          "93:   if (port_associate(handle->fd,",
          "97:                      NULL) == -1) {",
          "110:   handle = container_of(w, uv_fs_event_t, event_watcher);",
          "116:       r = port_get(handle->fd, &pe, &timeout);",
          "",
          "[Added Lines]",
          "98:   if (handle->fd == -1)",
          "99:     return;",
          "101:   if (port_associate(handle->loop->fs_fd,",
          "105:                      handle) == -1) {",
          "108:   handle->fd = PORT_LOADED;",
          "114:   uv_loop_t *loop_;",
          "120:   loop_ = container_of(w, uv_loop_t, fs_event_watcher);",
          "126:       r = port_get(loop_->fs_fd, &pe, &timeout);",
          "132:     handle = (uv_fs_event_t *)pe.portev_user;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "128:     if (pe.portev_events & ~(FILE_ATTRIB | FILE_MODIFIED))",
          "129:       events |= UV_RENAME;",
          "130:     assert(events != 0);",
          "132:     handle->cb(handle, NULL, events, 0);",
          "133:   }",
          "137:     uv__fs_event_rearm(handle);",
          "138: }",
          "",
          "[Removed Lines]",
          "134:   while (handle->fd != -1);",
          "136:   if (handle->fd != -1)",
          "",
          "[Added Lines]",
          "141:     handle->fd = PORT_FIRED;",
          "144:   while (handle->fd != PORT_DELETED);",
          "146:   if (handle->fd != PORT_DELETED)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "144:                      uv_fs_event_cb cb,",
          "145:                      int flags) {",
          "146:   int portfd;",
          "148:   loop->counters.fs_event_init++;",
          "151:   assert(!flags);",
          "156:   }",
          "158:   uv__handle_init(loop, (uv_handle_t*)handle, UV_FS_EVENT);",
          "159:   handle->filename = strdup(filename);",
          "161:   handle->cb = cb;",
          "163:   memset(&handle->fo, 0, sizeof handle->fo);",
          "164:   handle->fo.fo_name = handle->filename;",
          "165:   uv__fs_event_rearm(handle);",
          "171:   return 0;",
          "172: }",
          "175: void uv__fs_event_destroy(uv_fs_event_t* handle) {",
          "180:   free(handle->filename);",
          "181:   handle->filename = NULL;",
          "182:   handle->fo.fo_name = NULL;",
          "",
          "[Removed Lines]",
          "153:   if ((portfd = port_create()) == -1) {",
          "154:     uv__set_sys_error(loop, errno);",
          "155:     return -1;",
          "160:   handle->fd = portfd;",
          "167:   ev_io_init(&handle->event_watcher, uv__fs_event_read, portfd, EV_READ);",
          "168:   ev_io_start(loop->ev, &handle->event_watcher);",
          "169:   ev_unref(loop->ev);",
          "176:   ev_ref(handle->loop->ev);",
          "177:   ev_io_stop(handle->loop->ev, &handle->event_watcher);",
          "178:   uv__close(handle->fd);",
          "179:   handle->fd = -1;",
          "",
          "[Added Lines]",
          "157:   int first_run = 0;",
          "163:   if (loop->fs_fd == -1) {",
          "164:     if ((portfd = port_create()) == -1) {",
          "165:       uv__set_sys_error(loop, errno);",
          "166:       return -1;",
          "167:     }",
          "168:     loop->fs_fd = portfd;",
          "169:     first_run = 1;",
          "174:   handle->fd = PORT_UNUSED;",
          "181:   if (first_run) {",
          "182:     ev_io_init(&loop->fs_event_watcher, uv__fs_event_read, portfd, EV_READ);",
          "183:     ev_io_start(loop->ev, &loop->fs_event_watcher);",
          "184:     ev_unref(loop->ev);",
          "185:   }",
          "192:   if (handle->fd == PORT_FIRED) {",
          "193:     port_dissociate(handle->loop->fs_fd, PORT_SOURCE_FILE, (uintptr_t)&handle->fo);",
          "194:   }",
          "195:   handle->fd = PORT_DELETED;",
          "",
          "---------------"
        ],
        "deps/uv/src/win/fs.c||deps/uv/src/win/fs.c": [
          "File: deps/uv/src/win/fs.c -> deps/uv/src/win/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "248:     goto end;",
          "249:   }",
          "256:   file = CreateFileW(path,",
          "257:                      access,",
          "",
          "[Removed Lines]",
          "252:   if (GetFileAttributesW(path) & FILE_ATTRIBUTE_DIRECTORY) {",
          "253:     attributes |= FILE_FLAG_BACKUP_SEMANTICS;",
          "254:   }",
          "",
          "[Added Lines]",
          "252:   attributes |= FILE_FLAG_BACKUP_SEMANTICS;",
          "",
          "---------------"
        ]
      }
    }
  ]
}