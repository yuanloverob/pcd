{
  "cve_id": "CVE-2019-19926",
  "cve_desc": "multiSelect in select.c in SQLite 3.30.1 mishandles certain errors during parsing, as demonstrated by errors from sqlite3WindowRewrite() calls. NOTE: this vulnerability exists because of an incomplete fix for CVE-2019-19880.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
  "patch_info": {
    "commit_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8428b3b437569338a9d1e10c4cd8154acbe33089",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c"
    ],
    "message": "Continuation of [e2bddcd4c55ba3cb]: Add another spot where it is necessary to abort early due to prior errors in sqlite3WindowRewrite().\n\nFossilOrigin-Name: cba2a2a44cdf138a629109bb0ad088ed4ef67fc66bed3e0373554681a39615d2",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 3d4c0bf8904135fa68c75801bfa738715cacc3b19dc8ad6ef550b11798d4b121",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2809:     }",
      "2810:   #endif",
      "2811:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2812:   if( pParse->nErr ) goto multi_select_end;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c01f41cfa63e413767101a0e71f54f888e446ab4",
      "candidate_info": {
        "commit_hash": "c01f41cfa63e413767101a0e71f54f888e446ab4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c01f41cfa63e413767101a0e71f54f888e446ab4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Updates to a comment to keep it in alignment to the changes on this branch.\n\nFossilOrigin-Name: 7499f74351415e601eb48eff6b6fccd3a78d137f5ea9cd7cac46b904772966de",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9285899120dec24ff2944431ad455d7ae217ef408ae2f1a3e7bdfb897099028c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c"
        ]
      }
    },
    {
      "candidate_hash": "d5deb6b3c4faaf6b6c225f9dd5aa9ca2da81b06c",
      "candidate_info": {
        "commit_hash": "d5deb6b3c4faaf6b6c225f9dd5aa9ca2da81b06c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d5deb6b3c4faaf6b6c225f9dd5aa9ca2da81b06c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/tkt-a7debbe0.test"
        ],
        "message": "Ensure the columns of views and sub-selects in the FROM clause of a select are always assigned implicit collation sequences, just as table columns are. Fix for [a7debbe0].\n\nFossilOrigin-Name: b9ec72203c19c2b95e648ac1dfad74eec98d4ff82581cdc10dc4221ba551728f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/tkt-a7debbe0.test||test/tkt-a7debbe0.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cb3e2be674316e1d39968eb6567f1fe1b72f9d89af49640a9e83f944979c4cf0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3478:         }",
          "3479:         sqlite3ExprDelete(db, pExpr);",
          "3480:         pExpr = pNew;",
          "3481:       }",
          "3482:     }",
          "3483:   }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3485:         if( pSubst->bFlattener && pExpr ){",
          "3486:           if( pExpr->op!=TK_COLUMN && pExpr->op!=TK_COLLATE ){",
          "3487:             CollSeq *pColl = sqlite3ExprCollSeq(pSubst->pParse, pExpr);",
          "3488:             pExpr = sqlite3ExprAddCollateString(pSubst->pParse, pExpr,",
          "3489:                 (pColl ? pColl->zName : \"BINARY\")",
          "3490:             );",
          "3491:           }",
          "3492:           ExprClearProperty(pExpr, EP_Collate);",
          "3493:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4043:       x.iNewTable = iNewParent;",
          "4044:       x.isLeftJoin = isLeftJoin;",
          "4045:       x.pEList = pSub->pEList;",
          "4046:       substSelect(&x, pParent, 0);",
          "4047:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4059:       x.bFlattener = 1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4368:       x.iNewTable = iCursor;",
          "4369:       x.isLeftJoin = 0;",
          "4370:       x.pEList = pSubq->pEList;",
          "4371:       pNew = substExpr(&x, pNew);",
          "4372:       if( pSubq->selFlags & SF_Aggregate ){",
          "4373:         pSubq->pHaving = sqlite3ExprAnd(pParse, pSubq->pHaving, pNew);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4385:       x.bFlattener = 0;",
          "",
          "---------------"
        ],
        "test/tkt-a7debbe0.test||test/tkt-a7debbe0.test": [
          "File: test/tkt-a7debbe0.test -> test/tkt-a7debbe0.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 September 10",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library. In particular,",
          "12: # that problems related to ticket a7debbe0ad1 have been fixed.",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "17: set testprefix tkt-a7debbe0",
          "19: foreach tn {1 2} {",
          "20:   reset_db",
          "21:   if {$tn==1} {",
          "22:     # Disable the flattener",
          "23:     optimization_control db query-flattener 0",
          "24:   } else {",
          "25:     # Enable the flattener",
          "26:     optimization_control db query-flattener 1",
          "27:   }",
          "29:   do_execsql_test $tn.1.0 {",
          "30:     CREATE TABLE t0(xyz INTEGER);",
          "31:     INSERT INTO t0(xyz) VALUES(456);",
          "32:     CREATE VIEW v2(a, B) AS",
          "33:         SELECT 'a', 'B' COLLATE NOCASE FROM t0;",
          "34:     CREATE TABLE t2(a, B COLLATE NOCASE);",
          "35:     INSERT INTO t2 VALUES('a', 'B');",
          "36:     CREATE VIEW v3(a, B) AS",
          "37:         SELECT 'a' COLLATE BINARY, 'B' COLLATE NOCASE FROM t0;",
          "39:     CREATE VIEW v4(a, B) AS",
          "40:         SELECT 'a', +CAST('B' COLLATE NOCASE AS TEXT) FROM t0;",
          "42:     CREATE VIEW v5(a, B) AS",
          "43:         SELECT 'a', ('B' COLLATE NOCASE) || '' FROM t0;",
          "44:   }",
          "46:   # Table t2 and views v2 through v5 should all be equivalent.",
          "47:   do_execsql_test $tn.1.1.1 { SELECT a   >= B FROM t2;         } 1",
          "48:   do_execsql_test $tn.1.1.2 { SELECT 'a' >= 'B' COLLATE NOCASE } 0",
          "49:   do_execsql_test $tn.1.1.3 { SELECT a   >= B FROM v2          } 1",
          "50:   do_execsql_test $tn.1.1.4 { SELECT a   >= B FROM v3          } 1",
          "51:   do_execsql_test $tn.1.1.5 { SELECT a   >= B FROM v4          } 1",
          "52:   do_execsql_test $tn.1.1.6 { SELECT a   >= B FROM v5          } 1",
          "54:   do_execsql_test $tn.1.2.1 { SELECT B   < a FROM t2           } 0",
          "55:   do_execsql_test $tn.1.2.2 { SELECT 'B' COLLATE NOCASE < 'a'  } 0",
          "56:   do_execsql_test $tn.1.2.3 { SELECT B   < a FROM v2           } 0",
          "57:   do_execsql_test $tn.1.2.4 { SELECT B   < a FROM v3           } 0",
          "58:   do_execsql_test $tn.1.2.5 { SELECT a  < B FROM v4           } 0",
          "59:   do_execsql_test $tn.1.2.6 { SELECT a  < B FROM v5           } 0",
          "61:   #-------------------------------------------------------------------------",
          "62:   do_execsql_test $tn.2.0 {",
          "63:     CREATE TABLE t5(a, b COLLATE NOCASE);",
          "64:     INSERT INTO t5 VALUES(1, 'XYZ');",
          "65:   }",
          "67:   # Result should be 0, as column \"xyz\" from the sub-query has implicit",
          "68:   # collation sequence BINARY.",
          "69:   do_execsql_test $tn.2.1 {",
          "70:     SELECT xyz==b FROM ( SELECT a, 'xyz' AS xyz FROM t5 ), t5;",
          "71:   } {0}",
          "73:   # Result should be 1, as literal 'xyz' has no collation sequence, so",
          "74:   # the comparison uses the implicit collation sequence of the RHS - NOCASE.",
          "75:   do_execsql_test $tn.2.2 {",
          "76:     SELECT 'xyz'==b FROM ( SELECT a, 'xyz' AS xyz FROM t5 ), t5;",
          "77:   } {1}",
          "79:   #-----------------------------------------------------------------------",
          "80:   # The test case submitted with the ticket.",
          "81:   #",
          "82:   do_execsql_test $tn.3.0 {",
          "83:     DROP TABLE t0;",
          "84:     DROP VIEW v2;",
          "86:     CREATE TABLE t0(c0);",
          "87:     INSERT INTO t0(c0) VALUES('');",
          "88:     CREATE VIEW v2(c0, c1) AS",
          "89:         SELECT 'B' COLLATE NOCASE, 'a' FROM t0 ORDER BY t0.c0;",
          "90:     SELECT SUM(count) FROM (",
          "91:       SELECT v2.c1 BETWEEN v2.c0 AND v2.c1 as count FROM v2",
          "92:     );",
          "93:   } 1",
          "95:   # The result is 1, as the collation used is the implicit collation sequence",
          "96:   # of v2.c1 - BINARY.",
          "97:   do_execsql_test $tn.3.1 {",
          "98:     SELECT v2.c1 BETWEEN v2.c0 AND v2.c1 as count FROM v2;",
          "99:   } 1",
          "100: }",
          "102: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3756d59bc3bc788b5c5c5c1ca5463b883a5150d6",
      "candidate_info": {
        "commit_hash": "3756d59bc3bc788b5c5c5c1ca5463b883a5150d6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3756d59bc3bc788b5c5c5c1ca5463b883a5150d6",
        "files": [
          "README.md",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Update the README.md file at the top level to talk about how to deal with version names and how to verify the code in Git mirrors.\n\nFossilOrigin-Name: e8c87a0ac1bf434c12a8ab602e7913a89a51898e818f30fa541a9b5708864212",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1d801a3b2c48dc8a918d6da047bc877acf033d5f5c4e1d4b412ba7678ed6f8b3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5e970a8f40b1923558fc86cfe21b1bcc9a0064c2",
      "candidate_info": {
        "commit_hash": "5e970a8f40b1923558fc86cfe21b1bcc9a0064c2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5e970a8f40b1923558fc86cfe21b1bcc9a0064c2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/altertab2.test"
        ],
        "message": "Fix a problem with renaming a column that is used as part of an ORDER BY on a compound SELECT within a database view or trigger.\n\nFossilOrigin-Name: b4b5741366578b25ec6e4c415ab8239215e53b1c900be613575f40a826cfccc9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/altertab2.test||test/altertab2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d45bee36f2c1091a2d32c16ca8921bf4e7c9e40c46d0a36fbcb179ecfafcfbf0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1138:       }else{",
          "1139:         iCol = resolveAsName(pParse, pEList, pE);",
          "1140:         if( iCol==0 ){",
          "1142:           if( !db->mallocFailed ){",
          "1143:             assert(pDup);",
          "1144:             iCol = resolveOrderByTermToExprList(pParse, pSelect, pDup);",
          "1145:           }",
          "1147:         }",
          "1148:       }",
          "1149:       if( iCol>0 ){",
          "",
          "[Removed Lines]",
          "1141:           pDup = sqlite3ExprDup(db, pE, 0);",
          "1146:           sqlite3ExprDelete(db, pDup);",
          "",
          "[Added Lines]",
          "1154:           if( IN_RENAME_OBJECT ){",
          "1155:             pDup = pE;",
          "1156:           }else{",
          "1157:             pDup = sqlite3ExprDup(db, pE, 0);",
          "1158:           }",
          "1163:           if( IN_RENAME_OBJECT ){",
          "1164:             if( iCol>0 ){",
          "1165:               pItem->done = 1;",
          "1166:               break;",
          "1167:             }",
          "1168:           }else{",
          "1169:             sqlite3ExprDelete(db, pDup);",
          "1170:           }",
          "",
          "---------------"
        ],
        "test/altertab2.test||test/altertab2.test": [
          "File: test/altertab2.test -> test/altertab2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "233:   INSERT INTO t2x VALUES(1);",
          "234: } {1 {no such column: b}}",
          "236: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "236: #-------------------------------------------------------------------------",
          "238: do_execsql_test 6.0 {",
          "239:   CREATE TABLE t3(a,b,c,d);",
          "240:   CREATE TRIGGER r3 AFTER INSERT ON t3 WHEN new.a NOT NULL BEGIN",
          "241:     SELECT a,b,c FROM t3 EXCEPT SELECT a,b,c FROM t3 ORDER BY a;",
          "242:     SELECT rowid, * FROM t3;",
          "243:   END;",
          "244: } {}",
          "246: do_execsql_test 6.1 {",
          "247:   ALTER TABLE t3 RENAME TO t3x;",
          "248:   SELECT sql FROM sqlite_master WHERE name = 'r3';",
          "249: } {",
          "250:   {CREATE TRIGGER r3 AFTER INSERT ON \"t3x\" WHEN new.a NOT NULL BEGIN",
          "251:     SELECT a,b,c FROM \"t3x\" EXCEPT SELECT a,b,c FROM \"t3x\" ORDER BY a;",
          "252:     SELECT rowid, * FROM \"t3x\";",
          "253:   END}",
          "254: }",
          "256: do_execsql_test 6.2 {",
          "257:   ALTER TABLE t3x RENAME a TO abcd;",
          "258:   SELECT sql FROM sqlite_master WHERE name = 'r3';",
          "259: } {",
          "260:   {CREATE TRIGGER r3 AFTER INSERT ON \"t3x\" WHEN new.abcd NOT NULL BEGIN",
          "261:     SELECT abcd,b,c FROM \"t3x\" EXCEPT SELECT abcd,b,c FROM \"t3x\" ORDER BY abcd;",
          "262:     SELECT rowid, * FROM \"t3x\";",
          "263:   END}",
          "264: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f116ad8527ccbe57356d5ba95a94a4fa711621e7",
      "candidate_info": {
        "commit_hash": "f116ad8527ccbe57356d5ba95a94a4fa711621e7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f116ad8527ccbe57356d5ba95a94a4fa711621e7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c",
          "test/fkey7.test"
        ],
        "message": "Do not commit an \"OR FAIL\" statement that causes foriegn key constraint violations.\n\nFossilOrigin-Name: 659c551dcc374a0d349ba9419f692e3363839e11d791a17cc35fa1854a674a51",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c",
          "test/fkey7.test||test/fkey7.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8b6691f619ed9a56f6aecbd878ebb447c40984f8767508b248494fd9ec68fbaa",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2896:     }",
          "2900:       sqlite3VdbeCheckFk(p, 0);",
          "2901:     }",
          "",
          "[Removed Lines]",
          "2899:     if( p->rc==SQLITE_OK ){",
          "",
          "[Added Lines]",
          "2899:     if( p->rc==SQLITE_OK || (p->errorAction==OE_Fail && !isSpecialError) ){",
          "",
          "---------------"
        ],
        "test/fkey7.test||test/fkey7.test": [
          "File: test/fkey7.test -> test/fkey7.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:   }",
          "83: }",
          "85: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86: do_execsql_test 4.0 {",
          "87:   PRAGMA foreign_keys = true;",
          "88:   CREATE TABLE parent(",
          "89:     p PRIMARY KEY",
          "90:   );",
          "91:   CREATE TABLE child(",
          "92:     c UNIQUE REFERENCES parent(p)",
          "93:   );",
          "94: }",
          "96: do_catchsql_test 4.1 {",
          "97:   INSERT OR FAIL INTO child VALUES(123), (123);",
          "98: } {1 {FOREIGN KEY constraint failed}}",
          "100: do_execsql_test 4.2 {",
          "101:   SELECT * FROM child;",
          "102: } {}",
          "104: do_execsql_test 4.3 {",
          "105:   PRAGMA foreign_key_check;",
          "106: } {}",
          "108: do_catchsql_test 4.4 {",
          "109:   INSERT INTO parent VALUES(123);",
          "110:   INSERT OR FAIL INTO child VALUES(123), (123);",
          "111: } {1 {UNIQUE constraint failed: child.c}}",
          "113: do_execsql_test 4.5 {",
          "114:   SELECT * FROM child;",
          "115: } {123}",
          "117: do_execsql_test 4.6 {",
          "118:   PRAGMA foreign_key_check;",
          "119: } {}",
          "",
          "---------------"
        ]
      }
    }
  ]
}