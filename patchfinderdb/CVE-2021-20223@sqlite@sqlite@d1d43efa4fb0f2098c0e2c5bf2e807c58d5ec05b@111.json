{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9bb612f2c8d0e1e9672aa019b0f05059b6c24c3a",
      "candidate_info": {
        "commit_hash": "9bb612f2c8d0e1e9672aa019b0f05059b6c24c3a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9bb612f2c8d0e1e9672aa019b0f05059b6c24c3a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/fuzzdata8.db",
          "test/select1.test"
        ],
        "message": "Fix a faulty assert() statement.  Add new test cases.\n\nFossilOrigin-Name: 80ecdb3da4558bb08ee3ec6edbde906ad5b3b8182e672b5ba0d5dfa8041cee0a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/select1.test||test/select1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 091d71939411bf2079098f09ddc0525f11f380119fd27114e2b3eec9a8ac0db4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: char sqlite3ExprAffinity(const Expr *pExpr){",
          "46:   int op;",
          "47:   while( ExprHasProperty(pExpr, EP_Skip|EP_IfNullRow) ){",
          "49:     pExpr = pExpr->pLeft;",
          "50:     assert( pExpr!=0 );",
          "51:   }",
          "",
          "[Removed Lines]",
          "48:     assert( pExpr->op==TK_COLLATE || pExpr->op==TK_IF_NULL_ROW );",
          "",
          "[Added Lines]",
          "48:     assert( pExpr->op==TK_COLLATE",
          "49:          || pExpr->op==TK_IF_NULL_ROW",
          "50:          || (pExpr->op==TK_REGISTER && pExpr->op2==TK_IF_NULL_ROW) );",
          "",
          "---------------"
        ],
        "test/select1.test||test/select1.test": [
          "File: test/select1.test -> test/select1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1201:   SELECT ifnull(a, max((SELECT 123))), count(a) FROM t1 ;",
          "1202: } {10 1}",
          "1204: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1204: # 2020-10-02 dbsqlfuzz find",
          "1205: reset_db",
          "1206: do_execsql_test select-21.1 {",
          "1207:   CREATE TABLE t1(a IMTEGES PRIMARY KEY,R);",
          "1208:   CREATE TABLE t2(x UNIQUE);",
          "1209:   CREATE VIEW v1a(z,y) AS SELECT x IS NULL, x FROM t2;",
          "1210:   SELECT a,(+a)b,(+a)b,(+a)b,NOT EXISTS(SELECT null FROM t2),CASE z WHEN 487 THEN 992 WHEN 391 THEN 203 WHEN 10 THEN '?k<D Q' END,'' FROM t1 LEFT JOIN v1a ON z=b;",
          "1211: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b5b9bf85405f5814d6664dcdb0c78ff962dae39a",
      "candidate_info": {
        "commit_hash": "b5b9bf85405f5814d6664dcdb0c78ff962dae39a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b5b9bf85405f5814d6664dcdb0c78ff962dae39a",
        "files": [
          "ext/misc/ieee754.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "In the one-argument version of the ieee754() extension function, if the argument is an 8-byte blob, interpret that blob as a binary64 floating point and decode it.\n\nFossilOrigin-Name: 4199c1e8aa47d77df3ef598cb6f5418f67970dd00f34823463c85eabfc8d2b77",
        "before_after_code_files": [
          "ext/misc/ieee754.c||ext/misc/ieee754.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/ieee754.c||ext/misc/ieee754.c": [
          "File: ext/misc/ieee754.c -> ext/misc/ieee754.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:     int isNeg;",
          "52:     char zResult[100];",
          "53:     assert( sizeof(m)==sizeof(r) );",
          "56:     if( r<0.0 ){",
          "57:       isNeg = 1;",
          "58:       r = -r;",
          "",
          "[Removed Lines]",
          "54:     if( sqlite3_value_type(argv[0])!=SQLITE_FLOAT ) return;",
          "55:     r = sqlite3_value_double(argv[0]);",
          "",
          "[Added Lines]",
          "54:     if( sqlite3_value_type(argv[0])==SQLITE_BLOB",
          "55:      && sqlite3_value_bytes(argv[0])==sizeof(r)",
          "56:     ){",
          "57:       const unsigned char *x = sqlite3_value_blob(argv[0]);",
          "58:       int i;",
          "59:       sqlite3_uint64 v = 0;",
          "60:       for(i=0; i<sizeof(r); i++){",
          "61:         v = (v<<8) | x[i];",
          "62:       }",
          "63:       memcpy(&r, &v, sizeof(r));",
          "64:     }else{",
          "65:       r = sqlite3_value_double(argv[0]);",
          "66:     }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5391687bf8563b3fdd157b436b2cbb6a0ee5f676727d41bbddfaa8eacc39729b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "43e862723ec680542ca6f608f9963c0993dd7324",
      "candidate_info": {
        "commit_hash": "43e862723ec680542ca6f608f9963c0993dd7324",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/43e862723ec680542ca6f608f9963c0993dd7324",
        "files": [
          "ext/misc/fileio.c",
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "When compiling the shell for WinRT, avoid using Win32 APIs that are unavailable.\n\nFossilOrigin-Name: 85d3dc8c50d8dbb8eac1956e8976e861d3b671e03355ca9257060fa3dca51cc4",
        "before_after_code_files": [
          "ext/misc/fileio.c||ext/misc/fileio.c",
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/fileio.c||ext/misc/fileio.c": [
          "File: ext/misc/fileio.c -> ext/misc/fileio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "395:   if( mtime>=0 ){",
          "396: #if defined(_WIN32)",
          "398:     FILETIME lastAccess;",
          "399:     FILETIME lastWrite;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "397: #if !SQLITE_OS_WINRT",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "424:     }else{",
          "425:       return 1;",
          "426:     }",
          "429:     struct timespec times[2];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "428: #endif",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 10306118e8591e727af477a1a15d136852d21170e645bd0e75f7c88346b037d7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #define _CRT_SECURE_NO_WARNINGS",
          "18: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #if !defined(SQLITE_OS_WINRT)",
          "25: # define SQLITE_OS_WINRT 0",
          "26: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131: #if defined(_WIN32) || defined(WIN32)",
          "143: # endif",
          "148: #else",
          "150:  extern int isatty(int);",
          "",
          "[Removed Lines]",
          "132: # include <io.h>",
          "133: # include <fcntl.h>",
          "134: # define isatty(h) _isatty(h)",
          "135: # ifndef access",
          "136: #  define access(f,m) _access((f),(m))",
          "137: # endif",
          "138: # ifndef unlink",
          "139: #  define unlink _unlink",
          "140: # endif",
          "141: # ifndef strdup",
          "142: #  define strdup _strdup",
          "144: # undef popen",
          "145: # define popen _popen",
          "146: # undef pclose",
          "147: # define pclose _pclose",
          "",
          "[Added Lines]",
          "140: # if SQLITE_OS_WINRT",
          "141: #  define SQLITE_OMIT_POPEN 1",
          "142: # else",
          "143: #  include <io.h>",
          "144: #  include <fcntl.h>",
          "145: #  define isatty(h) _isatty(h)",
          "146: #  ifndef access",
          "147: #   define access(f,m) _access((f),(m))",
          "148: #  endif",
          "149: #  ifndef unlink",
          "150: #   define unlink _unlink",
          "151: #  endif",
          "152: #  ifndef strdup",
          "153: #   define strdup _strdup",
          "154: #  endif",
          "155: #  undef popen",
          "156: #  define popen _popen",
          "157: #  undef pclose",
          "158: #  define pclose _pclose",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "173: #define ToLower(X)  (char)tolower((unsigned char)X)",
          "175: #if defined(_WIN32) || defined(WIN32)",
          "176: #include <windows.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "188: #if SQLITE_OS_WINRT",
          "189: #include <intrin.h>",
          "190: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "192: static void setBinaryMode(FILE *file, int isOutput){",
          "193:   if( isOutput ) fflush(file);",
          "194:   _setmode(_fileno(file), _O_BINARY);",
          "",
          "[Removed Lines]",
          "191: #if defined(_WIN32) || defined(WIN32)",
          "",
          "[Added Lines]",
          "206: #if (defined(_WIN32) || defined(WIN32)) && !SQLITE_OS_WINRT",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "292:   if( getProcessTimesAddr ){",
          "293:     return 1;",
          "294:   } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "310: #if !SQLITE_OS_WINRT",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "308:         FreeLibrary(hinstLib);",
          "309:       }",
          "310:     }",
          "311:   }",
          "312:   return 0;",
          "313: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "327: #endif",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "10227: #ifdef _WIN32",
          "10228: static void printBold(const char *zText){",
          "10229:   HANDLE out = GetStdHandle(STD_OUTPUT_HANDLE);",
          "10230:   CONSOLE_SCREEN_BUFFER_INFO defaultScreenInfo;",
          "10231:   GetConsoleScreenBufferInfo(out, &defaultScreenInfo);",
          "10232:   SetConsoleTextAttribute(out,",
          "10233:          FOREGROUND_RED|FOREGROUND_INTENSITY",
          "10234:   );",
          "10235:   printf(\"%s\", zText);",
          "10236:   SetConsoleTextAttribute(out, defaultScreenInfo.wAttributes);",
          "10237: }",
          "10238: #else",
          "10239: static void printBold(const char *zText){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10246: #if !SQLITE_OS_WINRT",
          "10253: #endif",
          "10255: #if !SQLITE_OS_WINRT",
          "10257: #endif",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "10301:       fgetc(stdin);",
          "10302:     }else{",
          "10303: #if defined(_WIN32) || defined(WIN32)",
          "10304:       DebugBreak();",
          "10305: #elif defined(SIGTRAP)",
          "10306:       raise(SIGTRAP);",
          "10307: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10325: #if SQLITE_OS_WINRT",
          "10326:       __debugbreak();",
          "10327: #else",
          "10329: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4a3a3eb3d75af89b9da530f63ee31c3b2e56b189",
      "candidate_info": {
        "commit_hash": "4a3a3eb3d75af89b9da530f63ee31c3b2e56b189",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4a3a3eb3d75af89b9da530f63ee31c3b2e56b189",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "In the CLI, add the \".oom\" command for debugging builds.\n\nFossilOrigin-Name: 9c3136a722715952d155aae55cbc6d1fb921c6940d8e7d3e32fcba000f6ac1ed",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 85a9b6a92fd5805d5936f02d555af395441607b9eb5f4dae63560b5e65663b00",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "398: static volatile int seenInterrupt = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "400: #ifdef SQLITE_DEBUG",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "448:   exit(1);",
          "449: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "460: #ifdef SQLITE_DEBUG",
          "465: void shellOomFault(void){",
          "466:   if( oomRepeat>0 ){",
          "467:     oomRepeat--;",
          "468:   }else{",
          "469:     oomCounter--;",
          "470:   }",
          "471: }",
          "474: #ifdef SQLITE_DEBUG",
          "478: static void *oomMalloc(int nByte){",
          "479:   if( oomCounter ){",
          "480:     if( oomCounter==1 ){",
          "481:       shellOomFault();",
          "482:       return 0;",
          "483:     }else{",
          "484:       oomCounter--;",
          "485:     }",
          "486:   }",
          "487:   return defaultMalloc(nByte);",
          "488: }",
          "491: #ifdef SQLITE_DEBUG",
          "494: static void registerOomSimulator(void){",
          "495:   sqlite3_mem_methods mem;",
          "496:   sqlite3_config(SQLITE_CONFIG_GETMALLOC, &mem);",
          "497:   defaultMalloc = mem.xMalloc;",
          "498:   mem.xMalloc = oomMalloc;",
          "499:   sqlite3_config(SQLITE_CONFIG_MALLOC, &mem);",
          "500: }",
          "501: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3558:   \"     Other options:\",",
          "3559:   \"       -e    Invoke system text editor\",",
          "3560:   \"       -x    Open in a spreadsheet\",",
          "3561:   \".open ?OPTIONS? ?FILE?   Close existing database and reopen FILE\",",
          "3562:   \"     Options:\",",
          "3563:   \"        --append        Use appendvfs to append database to the end of FILE\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3613: #ifdef SQLITE_DEBUG",
          "3614:   \".oom [--repeat M] [N]    Simulate an OOM error on the N-th allocation\",",
          "3615: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "8039:     }",
          "8040:   }else",
          "8042:   if( c=='o' && strncmp(azArg[0], \"open\", n)==0 && n>=2 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8097: #ifdef SQLITE_DEBUG",
          "8098:   if( c=='o' && strcmp(azArg[0],\"oom\")==0 ){",
          "8099:     int i;",
          "8100:     for(i=1; i<nArg; i++){",
          "8101:       const char *z = azArg[i];",
          "8102:       if( z[0]=='-' && z[1]=='-' ) z++;",
          "8103:       if( strcmp(z,\"-repeat\")==0 ){",
          "8104:         if( i==nArg-1 ){",
          "8105:           raw_printf(p->out, \"missing argument on \\\"%s\\\"\\n\", azArg[i]);",
          "8106:           rc = 1;",
          "8107:         }else{",
          "8108:           oomRepeat = (int)integerValue(azArg[++i]);",
          "8109:         }",
          "8110:       }else if( IsDigit(z[0]) ){",
          "8111:         oomCounter = (int)integerValue(azArg[i]);",
          "8112:       }else{",
          "8113:         raw_printf(p->out, \"unknown argument: \\\"%s\\\"\\n\", azArg[i]);",
          "8114:         raw_printf(p->out, \"Usage: .oom [--repeat N] [M]\\n\");",
          "8115:         rc = 1;",
          "8116:       }",
          "8117:     }",
          "8118:     if( rc==0 ){",
          "8119:       raw_printf(p->out, \"oomCounter = %d\\n\", oomCounter);",
          "8120:       raw_printf(p->out, \"oomRepeat  = %d\\n\", oomRepeat);",
          "8121:     }",
          "8122:   }else",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "10122:   stdin_is_interactive = isatty(0);",
          "10123:   stdout_is_console = isatty(1);",
          "10125: #if !defined(_WIN32_WCE)",
          "10126:   if( getenv(\"SQLITE_DEBUG_BREAK\") ){",
          "10127:     if( isatty(0) && isatty(2) ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10208: #ifdef SQLITE_DEBUG",
          "10209:   registerOomSimulator();",
          "10210: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2a740060870d67738e5c438dac8cd9423871d5e0",
      "candidate_info": {
        "commit_hash": "2a740060870d67738e5c438dac8cd9423871d5e0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2a740060870d67738e5c438dac8cd9423871d5e0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/vdbeInt.h",
          "src/vdbeaux.c",
          "src/vdbemem.c"
        ],
        "message": "Small size reduction and performance improvement in the sqlite3VdbeMemFromBtree() interface used to pull content out of the b-tree and into an sqlite3_value object.\n\nFossilOrigin-Name: ae6dd8d3e921670ee6450453b54245dd71bcfff3fd1bc7fdb7cf4cf9585c3375",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbeInt.h||src/vdbeInt.h",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 57c36a293e16bb4d9652874124ee1447bef278e08664bc8dd0070a0ee2ef1173",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2714:       if( pC->aRow==0 ){",
          "2715:         memset(&sMem, 0, sizeof(sMem));",
          "2717:         if( rc!=SQLITE_OK ) goto abort_due_to_error;",
          "2718:         zData = (u8*)sMem.z;",
          "2719:       }else{",
          "",
          "[Removed Lines]",
          "2716:         rc = sqlite3VdbeMemFromBtree(pC->uc.pCursor, 0, aOffset[0], &sMem);",
          "",
          "[Added Lines]",
          "2716:         rc = sqlite3VdbeMemFromBtreeZeroOffset(pC->uc.pCursor,aOffset[0],&sMem);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5209:     goto too_big;",
          "5210:   }",
          "5211:   testcase( n==0 );",
          "5213:   if( rc ) goto abort_due_to_error;",
          "5214:   if( !pOp->p3 ) Deephemeralize(pOut);",
          "5215:   UPDATE_MAX_BLOBSIZE(pOut);",
          "",
          "[Removed Lines]",
          "5212:   rc = sqlite3VdbeMemFromBtree(pCrsr, 0, n, pOut);",
          "",
          "[Added Lines]",
          "5212:   rc = sqlite3VdbeMemFromBtreeZeroOffset(pCrsr, n, pOut);",
          "",
          "---------------"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "532: int sqlite3VdbeMemNumerify(Mem*);",
          "533: int sqlite3VdbeMemCast(Mem*,u8,u8);",
          "534: int sqlite3VdbeMemFromBtree(BtCursor*,u32,u32,Mem*);",
          "535: void sqlite3VdbeMemRelease(Mem *p);",
          "536: int sqlite3VdbeMemFinalize(Mem*, FuncDef*);",
          "537: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "535: int sqlite3VdbeMemFromBtreeZeroOffset(BtCursor*,u32,Mem*);",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4864:   sqlite3VdbeMemInit(&m, db, 0);",
          "4866:   if( rc ){",
          "4867:     return rc;",
          "4868:   }",
          "",
          "[Removed Lines]",
          "4865:   rc = sqlite3VdbeMemFromBtree(pCur, 0, (u32)nCellKey, &m);",
          "",
          "[Added Lines]",
          "4865:   rc = sqlite3VdbeMemFromBtreeZeroOffset(pCur, (u32)nCellKey, &m);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4944:     return SQLITE_CORRUPT_BKPT;",
          "4945:   }",
          "4946:   sqlite3VdbeMemInit(&m, db, 0);",
          "4948:   if( rc ){",
          "4949:     return rc;",
          "4950:   }",
          "",
          "[Removed Lines]",
          "4947:   rc = sqlite3VdbeMemFromBtree(pCur, 0, (u32)nCellKey, &m);",
          "",
          "[Added Lines]",
          "4947:   rc = sqlite3VdbeMemFromBtreeZeroOffset(pCur, (u32)nCellKey, &m);",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1172: static SQLITE_NOINLINE int vdbeMemFromBtreeResize(",
          "",
          "[Added Lines]",
          "1172: int sqlite3VdbeMemFromBtree(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1192:   }",
          "1193:   return rc;",
          "1194: }",
          "1200: ){",
          "",
          "[Removed Lines]",
          "1195: int sqlite3VdbeMemFromBtree(",
          "",
          "[Added Lines]",
          "1195: int sqlite3VdbeMemFromBtreeZeroOffset(",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1210:   assert( !sqlite3VdbeMemIsRowSet(pMem) );",
          "1216:     pMem->flags = MEM_Blob|MEM_Ephem;",
          "1217:     pMem->n = (int)amt;",
          "1218:   }else{",
          "1220:   }",
          "1222:   return rc;",
          "",
          "[Removed Lines]",
          "1211:   zData = (char *)sqlite3BtreePayloadFetch(pCur, &available);",
          "1212:   assert( zData!=0 );",
          "1214:   if( offset+amt<=available ){",
          "1215:     pMem->z = &zData[offset];",
          "1219:     rc = vdbeMemFromBtreeResize(pCur, offset, amt, pMem);",
          "",
          "[Added Lines]",
          "1209:   pMem->z = (char *)sqlite3BtreePayloadFetch(pCur, &available);",
          "1210:   assert( pMem->z!=0 );",
          "1212:   if( amt<=available ){",
          "1216:     rc = sqlite3VdbeMemFromBtree(pCur, 0, amt, pMem);",
          "",
          "---------------"
        ]
      }
    }
  ]
}