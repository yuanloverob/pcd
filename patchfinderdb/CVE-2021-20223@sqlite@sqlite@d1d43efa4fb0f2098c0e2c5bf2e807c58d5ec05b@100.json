{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7e088a6c0aa2084f13fcae416077dde7e3e30adc",
      "candidate_info": {
        "commit_hash": "7e088a6c0aa2084f13fcae416077dde7e3e30adc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7e088a6c0aa2084f13fcae416077dde7e3e30adc",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "src/vdbeaux.c",
          "src/vdbevtab.c"
        ],
        "message": "Corner-case changes to the bytecode virtual table for testability and correctness.\n\nFossilOrigin-Name: baa720e4a88f268ed95337daab5f434fd3263b00f09101cddc6424765bf3b722",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/vdbevtab.c||src/vdbevtab.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 96dfc71ea599702ef38b60952d03e95dce5a8c534cd943e076e9c76b00e61e65",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3158:             const char *zEQPLine = (const char*)sqlite3_column_text(pExplain,3);",
          "3159:             int iEqpId = sqlite3_column_int(pExplain, 0);",
          "3160:             int iParentId = sqlite3_column_int(pExplain, 1);",
          "3161:             if( zEQPLine[0]=='-' ) eqp_render(pArg);",
          "3162:             eqp_append(pArg, iEqpId, iParentId, zEQPLine);",
          "3163:           }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3161:             if( zEQPLine==0 ) zEQPLine = \"\";",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1849:   fprintf(pOut, zFormat1, pc,",
          "1851:       zCom ? zCom : \"\"",
          "1852:   );",
          "1853:   fflush(pOut);",
          "",
          "[Removed Lines]",
          "1850:       sqlite3OpcodeName(pOp->opcode), pOp->p1, pOp->p2, pOp->p3, zP4, pOp->p5,",
          "",
          "[Added Lines]",
          "1850:       sqlite3OpcodeName(pOp->opcode), pOp->p1, pOp->p2, pOp->p3,",
          "1851:       zP4 ? zP4 : \"\", pOp->p5,",
          "",
          "---------------"
        ],
        "src/vdbevtab.c||src/vdbevtab.c": [
          "File: src/vdbevtab.c -> src/vdbevtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "224:             if( pIdx->tnum==iRoot ){",
          "225:               pCur->zName = pIdx->zName;",
          "226:               pCur->zType = \"index\";",
          "228:             }",
          "229:           }",
          "230:         }",
          "",
          "[Removed Lines]",
          "227:               break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "268:       break;",
          "270:       Op *aOp = pCur->aOp;",
          "271:       if( pCur->iRowid==pCur->iAddr+1 ){",
          "276:          sqlite3_result_text(ctx, aOp[0].p4.z+3, -1, SQLITE_STATIC);",
          "277:       }else{",
          "278:          sqlite3_result_text(ctx, \"(FK)\", 4, SQLITE_STATIC);",
          "",
          "[Removed Lines]",
          "273:       }else if( aOp[0].p4type==P4_DYNAMIC",
          "274:        && aOp[0].p4.z!=0",
          "275:        && strncmp(aOp[0].p4.z,\"-- \", 3)==0 ){",
          "",
          "[Added Lines]",
          "270:       assert( aOp[0].opcode==OP_Init );",
          "271:       assert( aOp[0].p4.z==0 || strncmp(aOp[0].p4.z,\"-\" \"- \",3)==0 );",
          "274:       }else if( aOp[0].p4.z!=0 ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9dce0ef4caee365ed001a8bf0d05adedd374bb37",
      "candidate_info": {
        "commit_hash": "9dce0ef4caee365ed001a8bf0d05adedd374bb37",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9dce0ef4caee365ed001a8bf0d05adedd374bb37",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "src/vdbe.c",
          "test/check.test",
          "test/func4.test"
        ],
        "message": "On an INSERT or UPDATE, perform affinity conversions on new data prior to running CHECK constraints.  Ticket [86ba67afafded936].\n\nFossilOrigin-Name: 1d4f86201dab9a22df9ef8175a7ebf3640e97cdb23a06fb454b4c69bfda3a9af",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "src/vdbe.c||src/vdbe.c",
          "test/check.test||test/check.test",
          "test/func4.test||test/func4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4248980a356f659b10b12c778592996d53c91fae4ea50c8566678da176bdd152",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1670:         continue;",
          "1671:       }",
          "1672:       allOk = sqlite3VdbeMakeLabel(pParse);",
          "1673:       sqlite3VdbeVerifyAbortable(v, onError);",
          "1674:       sqlite3ExprIfTrue(pParse, pExpr, allOk, SQLITE_JUMPIFNULL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1672:       if( bAffinityDone==0 ){",
          "1673:         sqlite3TableAffinity(v, pTab, regNewData+1);",
          "1674:         bAffinityDone = 1;",
          "1675:       }",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2075:       if( (flags1 | flags3)&MEM_Str ){",
          "2076:         if( (flags1 & (MEM_Int|MEM_IntReal|MEM_Real|MEM_Str))==MEM_Str ){",
          "2077:           applyNumericAffinity(pIn1,0);",
          "2079:           flags3 = pIn3->flags;",
          "2080:         }",
          "2081:         if( (flags3 & (MEM_Int|MEM_IntReal|MEM_Real|MEM_Str))==MEM_Str ){",
          "",
          "[Removed Lines]",
          "2078:           testcase( flags3!=pIn3->flags );",
          "",
          "[Added Lines]",
          "2078:           assert( flags3==pIn3->flags );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2098:         sqlite3VdbeMemStringify(pIn1, encoding, 1);",
          "2099:         testcase( (flags1&MEM_Dyn) != (pIn1->flags&MEM_Dyn) );",
          "2100:         flags1 = (pIn1->flags & ~MEM_TypeMask) | (flags1 & MEM_TypeMask);",
          "2102:       }",
          "2103:       if( (flags3 & MEM_Str)==0 && (flags3&(MEM_Int|MEM_Real|MEM_IntReal))!=0 ){",
          "2104:         testcase( pIn3->flags & MEM_Int );",
          "",
          "[Removed Lines]",
          "2101:         if( pIn1==pIn3 ) flags3 = flags1 | MEM_Str;",
          "",
          "[Added Lines]",
          "2101:         if( NEVER(pIn1==pIn3) ) flags3 = flags1 | MEM_Str;",
          "",
          "---------------"
        ],
        "test/check.test||test/check.test": [
          "File: test/check.test -> test/check.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "166:   catchsql {",
          "167:     INSERT INTO t2 VALUES(NULL, NULL, 3.14159);",
          "168:   }",
          "171: # Undocumented behavior:  The CONSTRAINT name clause can follow a constraint.",
          "172: # Such a clause is ignored.  But the parser must accept it for backwards",
          "",
          "[Removed Lines]",
          "169: } {1 {CHECK constraint failed: three}}",
          "",
          "[Added Lines]",
          "169: } {0 {}}",
          "",
          "---------------"
        ],
        "test/func4.test||test/func4.test": [
          "File: test/func4.test -> test/func4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "451:     catchsql {",
          "452:       INSERT INTO t1 (x) VALUES ('1234.00');",
          "453:     }",
          "455:   do_test func4-3.17 {",
          "456:     catchsql {",
          "457:       INSERT INTO t1 (x) VALUES (1234.00);",
          "",
          "[Removed Lines]",
          "454:   } {1 {CHECK constraint failed: t1}}",
          "",
          "[Added Lines]",
          "454:   } {0 {}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "461:     catchsql {",
          "462:       INSERT INTO t1 (x) VALUES ('-9223372036854775809');",
          "463:     }",
          "465:   if {$highPrecision(1)} {",
          "466:     do_test func4-3.19 {",
          "467:       catchsql {",
          "",
          "[Removed Lines]",
          "464:   } {1 {CHECK constraint failed: t1}}",
          "",
          "[Added Lines]",
          "464:   } {0 {}}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "470:     } {1 {CHECK constraint failed: t1}}",
          "471:   }",
          "472:   do_execsql_test func4-3.20 {",
          "476:   ifcapable floatingpoint {",
          "477:     do_execsql_test func4-4.1 {",
          "",
          "[Removed Lines]",
          "473:     SELECT x FROM t1 ORDER BY x;",
          "474:   } {1234 1234 1234}",
          "",
          "[Added Lines]",
          "473:     SELECT x FROM t1 WHERE x>0 ORDER BY x;",
          "474:   } {1234 1234 1234 1234}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fa53284777ce9aed6a0153ce66d472128845f87c",
      "candidate_info": {
        "commit_hash": "fa53284777ce9aed6a0153ce66d472128845f87c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fa53284777ce9aed6a0153ce66d472128845f87c",
        "files": [
          "Makefile.in",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Makefile.in fix so that it works on systems that require a .EXE suffix on executables.\n\nFossilOrigin-Name: f482a4cdfa768941e22c399de8ec29a55e729529eeae86d3832077ad1bef22f3",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1177:    $(TOP)/ext/fts5/fts5_varint.c \\",
          "1178:    $(TOP)/ext/fts5/fts5_vocab.c  \\",
          "1181:  cp $(TOP)/ext/fts5/fts5parse.y .",
          "1182:  rm -f fts5parse.h",
          "1183:  ./lemon$(BEXE) $(OPTS) -S fts5parse.y",
          "",
          "[Removed Lines]",
          "1180: fts5parse.c: $(TOP)/ext/fts5/fts5parse.y lemon",
          "",
          "[Added Lines]",
          "1180: fts5parse.c: $(TOP)/ext/fts5/fts5parse.y lemon$(BEXE)",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f8d5586a8ceca985dcb2d63d0fbad9e271e9e1664720ee698d4947acd5dcc543",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0c52f5a2b02ed67fef90e498273d35a3596e0b9a",
      "candidate_info": {
        "commit_hash": "0c52f5a2b02ed67fef90e498273d35a3596e0b9a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0c52f5a2b02ed67fef90e498273d35a3596e0b9a",
        "files": [
          "ext/misc/appendvfs.c",
          "ext/misc/cksumvfs.c",
          "manifest",
          "manifest.uuid",
          "src/memdb.c",
          "src/os_unix.c",
          "src/os_win.c",
          "src/test_multiplex.c"
        ],
        "message": "Fix other potentiall pointer aliasing problems associated with subclassing of the sqlite3_file object for various VFS implementations.\n\nFossilOrigin-Name: 270ac1a0f232d75537be40abae559004e950b992cb2c7e94cd6de66e96ae17bd",
        "before_after_code_files": [
          "ext/misc/appendvfs.c||ext/misc/appendvfs.c",
          "ext/misc/cksumvfs.c||ext/misc/cksumvfs.c",
          "manifest.uuid||manifest.uuid",
          "src/memdb.c||src/memdb.c",
          "src/os_unix.c||src/os_unix.c",
          "src/os_win.c||src/os_win.c",
          "src/test_multiplex.c||src/test_multiplex.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/appendvfs.c||ext/misc/appendvfs.c": [
          "File: ext/misc/appendvfs.c -> ext/misc/appendvfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "439:   p = (ApndFile*)pFile;",
          "440:   memset(p, 0, sizeof(*p));",
          "441:   pSubFile = ORIGFILE(pFile);",
          "443:   rc = pSubVfs->xOpen(pSubVfs, zName, pSubFile, flags, pOutFlags);",
          "444:   if( rc ) goto apnd_open_done;",
          "445:   rc = pSubFile->pMethods->xFileSize(pSubFile, &sz);",
          "",
          "[Removed Lines]",
          "442:   p->base.pMethods = &apnd_io_methods;",
          "",
          "[Added Lines]",
          "442:   pFile->pMethods = &apnd_io_methods;",
          "",
          "---------------"
        ],
        "ext/misc/cksumvfs.c||ext/misc/cksumvfs.c": [
          "File: ext/misc/cksumvfs.c -> ext/misc/cksumvfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "634:   p = (CksmFile*)pFile;",
          "635:   memset(p, 0, sizeof(*p));",
          "636:   pSubFile = ORIGFILE(pFile);",
          "638:   rc = pSubVfs->xOpen(pSubVfs, zName, pSubFile, flags, pOutFlags);",
          "639:   if( rc ) goto cksm_open_done;",
          "640:   if( flags & SQLITE_OPEN_WAL ){",
          "",
          "[Removed Lines]",
          "637:   p->base.pMethods = &cksm_io_methods;",
          "",
          "[Added Lines]",
          "637:   pFile->pMethods = &cksm_io_methods;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 892e9191dc8f805678a501db1993437ee99a1e1849496a0a24ceec9b84123257",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/memdb.c||src/memdb.c": [
          "File: src/memdb.c -> src/memdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "339:   p->mFlags = SQLITE_DESERIALIZE_RESIZEABLE | SQLITE_DESERIALIZE_FREEONCLOSE;",
          "343:   p->szMax = sqlite3GlobalConfig.mxMemdbSize;",
          "344:   return SQLITE_OK;",
          "345: }",
          "",
          "[Removed Lines]",
          "342:   p->base.pMethods = &memdb_io_methods;",
          "",
          "[Added Lines]",
          "342:   pFile->pMethods = &memdb_io_methods;",
          "",
          "---------------"
        ],
        "src/os_unix.c||src/os_unix.c": [
          "File: src/os_unix.c -> src/os_unix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5692:   if( rc!=SQLITE_OK ){",
          "5693:     if( h>=0 ) robust_close(pNew, h, __LINE__);",
          "5694:   }else{",
          "5696:     OpenCounter(+1);",
          "5697:     verifyDbFile(pNew);",
          "5698:   }",
          "",
          "[Removed Lines]",
          "5695:     pNew->pMethod = pLockingStyle;",
          "",
          "[Added Lines]",
          "5695:     pId->pMethods = pLockingStyle;",
          "",
          "---------------"
        ],
        "src/os_win.c||src/os_win.c": [
          "File: src/os_win.c -> src/os_win.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5266:   }",
          "5268:   sqlite3_free(zTmpname);",
          "5270:   pFile->pVfs = pVfs;",
          "5271:   pFile->h = h;",
          "5272:   if( isReadonly ){",
          "",
          "[Removed Lines]",
          "5269:   pFile->pMethod = pAppData ? pAppData->pMethod : &winIoMethod;",
          "",
          "[Added Lines]",
          "5269:   id->pMethods = pAppData ? pAppData->pMethod : &winIoMethod;",
          "",
          "---------------"
        ],
        "src/test_multiplex.c||src/test_multiplex.c": [
          "File: src/test_multiplex.c -> src/test_multiplex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "592:     if( rc==SQLITE_OK ){",
          "593:       if( pSubOpen->pMethods->iVersion==1 ){",
          "595:       }else{",
          "597:       }",
          "598:     }else{",
          "599:       multiplexFreeComponents(pGroup);",
          "",
          "[Removed Lines]",
          "594:         pMultiplexOpen->base.pMethods = &gMultiplex.sIoMethodsV1;",
          "596:         pMultiplexOpen->base.pMethods = &gMultiplex.sIoMethodsV2;",
          "",
          "[Added Lines]",
          "594:         pConn->pMethods = &gMultiplex.sIoMethodsV1;",
          "596:         pConn->pMethods = &gMultiplex.sIoMethodsV2;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7e1d9512af94e52c4b4d65917ab1f4699d179b1d",
      "candidate_info": {
        "commit_hash": "7e1d9512af94e52c4b4d65917ab1f4699d179b1d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7e1d9512af94e52c4b4d65917ab1f4699d179b1d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/update.c"
        ],
        "message": "Add a couple of \"#ifdef SQLITE_ENABLE_UPDATE_DELETE_LIMIT\" blocks missing from new code on this branch.\n\nFossilOrigin-Name: cc471df04aecf344d0aa47138014c07d3f93462ae1f8ff86ec5589cfb62c658d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/update.c||src/update.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e3c423cb1407c06a3806ae6304e4713c37cd446f4cc399731884e3d009938e57",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "195:   Select *pSelect = 0;",
          "196:   ExprList *pList = 0;",
          "197:   ExprList *pGrp = 0;",
          "198:   sqlite3 *db = pParse->db;",
          "199:   Table *pTab = pTabList->a[0].pTab;",
          "200:   SrcList *pSrc;",
          "201:   Expr *pWhere2;",
          "204:   int eDest;",
          "206:   if( pOrderBy && pLimit==0 ) {",
          "207:     sqlite3ErrorMsg(pParse, \"ORDER BY without LIMIT on UPDATE\");",
          "208:     return;",
          "209:   }",
          "211:   pSrc = sqlite3SrcListDup(db, pTabList, 0);",
          "212:   pWhere2 = sqlite3ExprDup(db, pWhere, 0);",
          "216:   assert( pTabList->nSrc>1 );",
          "217:   if( pSrc ){",
          "",
          "[Removed Lines]",
          "202:   Expr *pLimit2;",
          "203:   ExprList *pOrderBy2;",
          "213:   pLimit2 = sqlite3ExprDup(db, pLimit, 0);",
          "214:   pOrderBy2 = sqlite3ExprListDup(db, pOrderBy, 0);",
          "",
          "[Added Lines]",
          "198:   Expr *pLimit2 = 0;",
          "199:   ExprList *pOrderBy2 = 0;",
          "206: #ifdef SQLITE_ENABLE_UPDATE_DELETE_LIMIT",
          "211:   pOrderBy2 = sqlite3ExprListDup(db, pOrderBy, 0);",
          "212:   pLimit2 = sqlite3ExprDup(db, pLimit, 0);",
          "213: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "222:   if( pPk ){",
          "223:     for(i=0; i<pPk->nKeyCol; i++){",
          "224:       Expr *pNew = exprRowColumn(pParse, pPk->aiColumn[i]);",
          "225:       if( pLimit ){",
          "226:         pGrp = sqlite3ExprListAppend(pParse, pGrp, sqlite3ExprDup(db, pNew, 0));",
          "227:       }",
          "228:       pList = sqlite3ExprListAppend(pParse, pList, pNew);",
          "229:     }",
          "230:     eDest = SRT_Upfrom;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "227: #ifdef SQLITE_ENABLE_UPDATE_DELETE_LIMIT",
          "231: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "236:   }else{",
          "237:     eDest = IsVirtual(pTab) ? SRT_Table : SRT_Upfrom;",
          "238:     pList = sqlite3ExprListAppend(pParse, 0, sqlite3PExpr(pParse,TK_ROW,0,0));",
          "239:     if( pLimit ){",
          "240:       pGrp = sqlite3ExprListAppend(pParse, 0, sqlite3PExpr(pParse,TK_ROW,0,0));",
          "241:     }",
          "242:   }",
          "243:   assert( pChanges || db->mallocFailed );",
          "244:   if( pChanges ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "243: #ifdef SQLITE_ENABLE_UPDATE_DELETE_LIMIT",
          "247: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}