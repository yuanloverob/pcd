{
  "cve_id": "CVE-2017-3731",
  "cve_desc": "If an SSL/TLS server or client is running on a 32-bit host, and a specific cipher is being used, then a truncated packet can cause that server or client to perform an out-of-bounds read, usually resulting in a crash. For OpenSSL 1.1.0, the crash can be triggered when using CHACHA20/POLY1305; users should upgrade to 1.1.0d. For Openssl 1.0.2, the crash can be triggered when using RC4-MD5; users who have not disabled that algorithm should update to 1.0.2k.",
  "repo": "openssl/openssl",
  "patch_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
  "patch_info": {
    "commit_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/00d965474b22b54e4275232bc71ee0c699c5cd21",
    "files": [
      "crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c"
    ],
    "message": "crypto/evp: harden AEAD ciphers.\n\nOriginally a crash in 32-bit build was reported CHACHA20-POLY1305\ncipher. The crash is triggered by truncated packet and is result\nof excessive hashing to the edge of accessible memory. Since hash\noperation is read-only it is not considered to be exploitable\nbeyond a DoS condition. Other ciphers were hardened.\n\nThanks to Robert \u015awi\u0119cki for report.\n\nCVE-2017-3731\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "crypto/evp/e_aes.c||crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
    ]
  },
  "patch_diff": {
    "crypto/evp/e_aes.c||crypto/evp/e_aes.c": [
      "File: crypto/evp/e_aes.c -> crypto/evp/e_aes.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1388:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1389:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1391:             len -= EVP_GCM_TLS_EXPLICIT_IV_LEN;",
      "1394:                 len -= EVP_GCM_TLS_TAG_LEN;",
      "1395:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1396:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1397:         }",
      "",
      "[Removed Lines]",
      "1393:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1391:             if (len < EVP_GCM_TLS_EXPLICIT_IV_LEN)",
      "1392:                 return 0;",
      "1395:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1396:                 if (len < EVP_GCM_TLS_TAG_LEN)",
      "1397:                     return 0;",
      "1399:             }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1946:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1947:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1949:             len -= EVP_CCM_TLS_EXPLICIT_IV_LEN;",
      "1952:                 len -= cctx->M;",
      "1953:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1954:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1955:         }",
      "",
      "[Removed Lines]",
      "1951:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1954:             if (len < EVP_CCM_TLS_EXPLICIT_IV_LEN)",
      "1955:                 return 0;",
      "1958:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1959:                 if (len < cctx->M)",
      "1960:                     return 0;",
      "1962:             }",
      "",
      "---------------"
    ],
    "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c": [
      "File: crypto/evp/e_chacha20_poly1305.c -> crypto/evp/e_chacha20_poly1305.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "398:             len = aad[EVP_AEAD_TLS1_AAD_LEN - 2] << 8 |",
      "399:                   aad[EVP_AEAD_TLS1_AAD_LEN - 1];",
      "400:             if (!ctx->encrypt) {",
      "402:                 memcpy(temp, aad, EVP_AEAD_TLS1_AAD_LEN - 2);",
      "403:                 aad = temp;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "401:                 if (len < POLY1305_BLOCK_SIZE)",
      "402:                     return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6c8e02af7e8d789d2b3dd6efe937b8c64784643f",
      "candidate_info": {
        "commit_hash": "6c8e02af7e8d789d2b3dd6efe937b8c64784643f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/6c8e02af7e8d789d2b3dd6efe937b8c64784643f",
        "files": [
          "engines/afalg/e_afalg.c"
        ],
        "message": "e_afalg: Don't warn about kernel version when pedantic\n\nWhen built with --strict-warnings and the Linux kernel headers don't\nmatch the kernel version, the preprocessor warnings in\nengines/afalg/e_afalg.c cause compilation errors.  Use the macro\nPEDANTIC to avoid those warnings in that case.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2095)\n(cherry picked from commit 97043e46aa7083c787a1efd72ac31ca97ed41610)",
        "before_after_code_files": [
          "engines/afalg/e_afalg.c||engines/afalg/e_afalg.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "engines/afalg/e_afalg.c||engines/afalg/e_afalg.c": [
          "File: engines/afalg/e_afalg.c -> engines/afalg/e_afalg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #define K_MIN2  0",
          "27: #if LINUX_VERSION_CODE <= KERNEL_VERSION(K_MAJ, K_MIN1, K_MIN2) || \\",
          "28:     !defined(AF_ALG)",
          "31: void engine_load_afalg_int(void);",
          "32: void engine_load_afalg_int(void)",
          "33: {",
          "",
          "[Removed Lines]",
          "29: # warning \"AFALG ENGINE requires Kernel Headers >= 4.1.0\"",
          "30: # warning \"Skipping Compilation of AFALG engine\"",
          "",
          "[Added Lines]",
          "29: # ifndef PEDANTIC",
          "30: #  warning \"AFALG ENGINE requires Kernel Headers >= 4.1.0\"",
          "31: #  warning \"Skipping Compilation of AFALG engine\"",
          "32: # endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3a3f9ed140b0e1feeed1b9655091c270df05332f",
      "candidate_info": {
        "commit_hash": "3a3f9ed140b0e1feeed1b9655091c270df05332f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/3a3f9ed140b0e1feeed1b9655091c270df05332f",
        "files": [
          "fuzz/conf.c"
        ],
        "message": "conf fuzzer: also check for an empty file\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n\nGH: #1828\n(cherry picked from commit ea6199ea91ac59ae53686335e436d554cdacd2dc)",
        "before_after_code_files": [
          "fuzz/conf.c||fuzz/conf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fuzz/conf.c||fuzz/conf.c": [
          "File: fuzz/conf.c -> fuzz/conf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: }",
          "22: int FuzzerTestOneInput(const uint8_t *buf, size_t len) {",
          "25:     long eline;",
          "27:     OPENSSL_assert((size_t)BIO_write(in, buf, len) == len);",
          "28:     NCONF_load_bio(conf, in, &eline);",
          "29:     NCONF_free(conf);",
          "",
          "[Removed Lines]",
          "23:     CONF *conf = NCONF_new(NULL);",
          "24:     BIO *in = BIO_new(BIO_s_mem());",
          "",
          "[Added Lines]",
          "23:     CONF *conf;",
          "24:     BIO *in;",
          "27:     if (len == 0)",
          "28:         return 0;",
          "30:     conf = NCONF_new(NULL);",
          "31:     in = BIO_new(BIO_s_mem());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b1f723c503b371776b2ae67a8cb78c8765387174",
      "candidate_info": {
        "commit_hash": "b1f723c503b371776b2ae67a8cb78c8765387174",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/b1f723c503b371776b2ae67a8cb78c8765387174",
        "files": [
          "ssl/record/rec_layer_s3.c",
          "ssl/record/record.h",
          "ssl/ssl_lib.c"
        ],
        "message": "Provide a function to test whether we have unread records pending\n\nAlso updates SSL_has_pending() to use it. This actually fixes a bug in\nSSL_has_pending() which is supposed to return 1 if we have any processed\nor unprocessed data sitting in OpenSSL buffers. However it failed to return\n1 if we had processed non-application data pending.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2875)\n(cherry picked from commit b8c49611bc26c8f9a980b814496a3069cd524b79)",
        "before_after_code_files": [
          "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
          "ssl/record/record.h||ssl/record/record.h",
          "ssl/ssl_lib.c||ssl/ssl_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
          "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:     SSL3_RECORD_release(rl->rrec, SSL_MAX_PIPELINES);",
          "77: }",
          "79: int RECORD_LAYER_read_pending(const RECORD_LAYER *rl)",
          "80: {",
          "81:     return SSL3_BUFFER_get_left(&rl->rbuf) != 0;",
          "82: }",
          "84: int RECORD_LAYER_write_pending(const RECORD_LAYER *rl)",
          "85: {",
          "86:     return (rl->numwpipes > 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86: int RECORD_LAYER_processed_read_pending(const RECORD_LAYER *rl)",
          "87: {",
          "88:     size_t curr_rec = 0, num_recs = RECORD_LAYER_get_numrpipes(rl);",
          "89:     const SSL3_RECORD *rr = rl->rrec;",
          "91:     while (curr_rec < num_recs && SSL3_RECORD_is_read(&rr[curr_rec]))",
          "92:         curr_rec++;",
          "94:     return curr_rec < num_recs;",
          "95: }",
          "",
          "---------------"
        ],
        "ssl/record/record.h||ssl/record/record.h": [
          "File: ssl/record/record.h -> ssl/record/record.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "207: void RECORD_LAYER_clear(RECORD_LAYER *rl);",
          "208: void RECORD_LAYER_release(RECORD_LAYER *rl);",
          "209: int RECORD_LAYER_read_pending(const RECORD_LAYER *rl);",
          "210: int RECORD_LAYER_write_pending(const RECORD_LAYER *rl);",
          "211: int RECORD_LAYER_set_data(RECORD_LAYER *rl, const unsigned char *buf, int len);",
          "212: void RECORD_LAYER_reset_read_sequence(RECORD_LAYER *rl);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "210: int RECORD_LAYER_processed_read_pending(const RECORD_LAYER *rl);",
          "",
          "---------------"
        ],
        "ssl/ssl_lib.c||ssl/ssl_lib.c": [
          "File: ssl/ssl_lib.c -> ssl/ssl_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1317:         return 1;",
          "1319:     return RECORD_LAYER_read_pending(&s->rlayer);",
          "",
          "[Removed Lines]",
          "1316:     if (SSL_pending(s))",
          "",
          "[Added Lines]",
          "1316:     if (RECORD_LAYER_processed_read_pending(&s->rlayer))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9f1dd6a6ff6dadb3b356f74357a85cc3b5002e6d",
      "candidate_info": {
        "commit_hash": "9f1dd6a6ff6dadb3b356f74357a85cc3b5002e6d",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/9f1dd6a6ff6dadb3b356f74357a85cc3b5002e6d",
        "files": [
          "apps/rehash.c"
        ],
        "message": "On VMS, massage the fetch file names to remove the generation number\n\nThe generation number is ';nnn' at the end of the file name fetched\nwith readdir().  Because rehash checks for specific extensions and\ndoesn't expect an additional generation number, the easiest is to\nmassage the received file name early by simply removing the generation\nnumber.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2717)\n(cherry picked from commit 39aceac320a1561d50c7d71ac2560aec7ab8eddb)",
        "before_after_code_files": [
          "apps/rehash.c||apps/rehash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/rehash.c||apps/rehash.c": [
          "File: apps/rehash.c -> apps/rehash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "281:     return *path == '/';",
          "282: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "284: static int massage_filename(char *name)",
          "285: {",
          "286: # ifdef __VMS",
          "287:     char *p = strchr(name, ';');",
          "288:     char *q = p;",
          "290:     if (q != NULL) {",
          "291:         for (q++; *q != '\\0'; q++) {",
          "292:             if (!isdigit(*q))",
          "293:                 return 1;",
          "294:         }",
          "295:     }",
          "298: # endif",
          "299:     return 1;",
          "300: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "316:     }",
          "317:     while ((filename = OPENSSL_DIR_read(&d, dirname)) != NULL) {",
          "318:         if ((copy = strdup(filename)) == NULL",
          "319:                 || sk_OPENSSL_STRING_push(files, copy) == 0) {",
          "320:             BIO_puts(bio_err, \"out of memory\\n\");",
          "321:             exit(1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "337:                 || !massage_filename(copy)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b754f9a3a5bccffc7e8f534fefd13fc0ef7aaf13",
      "candidate_info": {
        "commit_hash": "b754f9a3a5bccffc7e8f534fefd13fc0ef7aaf13",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/b754f9a3a5bccffc7e8f534fefd13fc0ef7aaf13",
        "files": [
          "test/shlibloadtest.c"
        ],
        "message": "test/shlibloadtest: small fixes\n\n- Make sure to initialise SHLIB variables\n- Make sure to make local variables static\n\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1838)\n(cherry picked from commit 3b0478fe03191bedef44644996a5a6da51f77eaf)",
        "before_after_code_files": [
          "test/shlibloadtest.c||test/shlibloadtest.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/shlibloadtest.c||test/shlibloadtest.c": [
          "File: test/shlibloadtest.c -> test/shlibloadtest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: typedef unsigned long (*ERR_get_error_t)(void);",
          "29: typedef unsigned long (*OpenSSL_version_num_t)(void);",
          "39: #ifdef DSO_DLFCN",
          "",
          "[Removed Lines]",
          "31: TLS_method_t TLS_method;",
          "32: SSL_CTX_new_t SSL_CTX_new;",
          "33: SSL_CTX_free_t SSL_CTX_free;",
          "35: ERR_get_error_t ERR_get_error;",
          "36: OpenSSL_version_num_t OpenSSL_version_num;",
          "",
          "[Added Lines]",
          "31: static TLS_method_t TLS_method;",
          "32: static SSL_CTX_new_t SSL_CTX_new;",
          "33: static SSL_CTX_free_t SSL_CTX_free;",
          "35: static ERR_get_error_t ERR_get_error;",
          "36: static OpenSSL_version_num_t OpenSSL_version_num;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43: typedef void * SHLIB;",
          "44: typedef void * SHLIB_SYM;",
          "46: # define SHARED_LIBRARY_SUFFIX \".so\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: # define SHLIB_INIT NULL",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "88: typedef HINSTANCE SHLIB;",
          "89: typedef void * SHLIB_SYM;",
          "91: static int shlib_load(char *filename, SHLIB *lib)",
          "92: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91: # define SHLIB_INIT 0",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "130: int main(int argc, char **argv)",
          "131: {",
          "133:     SSL_CTX *ctx;",
          "134:     union {",
          "135:         void (*func) (void);",
          "",
          "[Removed Lines]",
          "132:     SHLIB ssllib, cryptolib;",
          "",
          "[Added Lines]",
          "134:     SHLIB ssllib = SHLIB_INIT, cryptolib = SHLIB_INIT;",
          "",
          "---------------"
        ]
      }
    }
  ]
}