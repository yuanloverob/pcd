{
  "cve_id": "CVE-2016-6302",
  "cve_desc": "The tls_decrypt_ticket function in ssl/t1_lib.c in OpenSSL before 1.1.0 does not consider the HMAC size during validation of the ticket length, which allows remote attackers to cause a denial of service via a ticket that is too short.",
  "repo": "openssl/openssl",
  "patch_hash": "e97763c92c655dcf4af2860b3abd2bc4c8a267f9",
  "patch_info": {
    "commit_hash": "e97763c92c655dcf4af2860b3abd2bc4c8a267f9",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/e97763c92c655dcf4af2860b3abd2bc4c8a267f9",
    "files": [
      "ssl/t1_lib.c"
    ],
    "message": "Sanity check ticket length.\n\nIf a ticket callback changes the HMAC digest to SHA512 the existing\nsanity checks are not sufficient and an attacker could perform a DoS\nattack with a malformed ticket. Add additional checks based on\nHMAC size.\n\nThanks to Shi Lei for reporting this bug.\n\nCVE-2016-6302\n\nReviewed-by: Viktor Dukhovni <viktor@openssl.org>",
    "before_after_code_files": [
      "ssl/t1_lib.c||ssl/t1_lib.c"
    ]
  },
  "patch_diff": {
    "ssl/t1_lib.c||ssl/t1_lib.c": [
      "File: ssl/t1_lib.c -> ssl/t1_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2969:     HMAC_CTX *hctx = NULL;",
      "2970:     EVP_CIPHER_CTX *ctx;",
      "2971:     SSL_CTX *tctx = s->initial_ctx;",
      "2976:     hctx = HMAC_CTX_new();",
      "2977:     if (hctx == NULL)",
      "",
      "[Removed Lines]",
      "2973:     if (eticklen < 48)",
      "2974:         return 2;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3018:     if (mlen < 0) {",
      "3019:         goto err;",
      "3020:     }",
      "3021:     eticklen -= mlen;",
      "3023:     if (HMAC_Update(hctx, etick, eticklen) <= 0",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3020:     if (eticklen <=",
      "3021:         TLSEXT_KEYNAME_LENGTH + EVP_CIPHER_CTX_iv_length(ctx) + mlen) {",
      "3022:         ret = 2;",
      "3023:         goto err;",
      "3024:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bf7c68177b6fbb80406c60136654b6fefe7e3ba2",
      "candidate_info": {
        "commit_hash": "bf7c68177b6fbb80406c60136654b6fefe7e3ba2",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/bf7c68177b6fbb80406c60136654b6fefe7e3ba2",
        "files": [
          "apps/speed.c",
          "crypto/engine/eng_openssl.c",
          "crypto/evp/p5_crpt2.c",
          "crypto/pkcs12/p12_mutl.c",
          "ssl/statem/statem_srvr.c",
          "ssl/t1_lib.c",
          "test/hmactest.c"
        ],
        "message": "Adapt the rest of the source to the opaque HMAC_CTX\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "apps/speed.c||apps/speed.c",
          "crypto/engine/eng_openssl.c||crypto/engine/eng_openssl.c",
          "crypto/evp/p5_crpt2.c||crypto/evp/p5_crpt2.c",
          "crypto/pkcs12/p12_mutl.c||crypto/pkcs12/p12_mutl.c",
          "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c",
          "ssl/t1_lib.c||ssl/t1_lib.c",
          "test/hmactest.c||test/hmactest.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/t1_lib.c||ssl/t1_lib.c"
          ],
          "candidate": [
            "ssl/t1_lib.c||ssl/t1_lib.c"
          ]
        }
      },
      "candidate_diff": {
        "apps/speed.c||apps/speed.c": [
          "File: apps/speed.c -> apps/speed.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1299: #if !defined(OPENSSL_NO_MD5)",
          "1300:     if (doit[D_HMAC]) {",
          "1305:                      16, EVP_md5(), NULL);",
          "1307:         for (j = 0; j < SIZE_NUM; j++) {",
          "1308:             print_message(names[D_HMAC], c[D_HMAC][j], lengths[j]);",
          "1309:             Time_F(START);",
          "1310:             for (count = 0, run = 1; COND(c[D_HMAC][j]); count++) {",
          "1314:             }",
          "1315:             d = Time_F(STOP);",
          "1316:             print_result(D_HMAC, j, count, d);",
          "1317:         }",
          "1319:     }",
          "1320: #endif",
          "1321:     if (doit[D_SHA1]) {",
          "",
          "[Removed Lines]",
          "1301:         HMAC_CTX hctx = HMAC_CTX_EMPTY;",
          "1303:         HMAC_CTX_init(&hctx);",
          "1304:         HMAC_Init_ex(&hctx, (unsigned char *)\"This is a key...\",",
          "1311:                 HMAC_Init_ex(&hctx, NULL, 0, NULL, NULL);",
          "1312:                 HMAC_Update(&hctx, buf, lengths[j]);",
          "1313:                 HMAC_Final(&hctx, &(hmac[0]), NULL);",
          "1318:         HMAC_CTX_cleanup(&hctx);",
          "",
          "[Added Lines]",
          "1301:         HMAC_CTX *hctx = NULL;",
          "1303:         hctx = HMAC_CTX_new();",
          "1304:         if (hctx == NULL) {",
          "1305:             BIO_printf(bio_err, \"HMAC malloc failure, exiting...\");",
          "1306:             exit(1);",
          "1307:         }",
          "1308:         HMAC_Init_ex(hctx, (unsigned char *)\"This is a key...\",",
          "1315:                 HMAC_Init_ex(hctx, NULL, 0, NULL, NULL);",
          "1316:                 HMAC_Update(hctx, buf, lengths[j]);",
          "1317:                 HMAC_Final(hctx, &(hmac[0]), NULL);",
          "1322:         HMAC_CTX_free(hctx);",
          "",
          "---------------"
        ],
        "crypto/engine/eng_openssl.c||crypto/engine/eng_openssl.c": [
          "File: crypto/engine/eng_openssl.c -> crypto/engine/eng_openssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "450: typedef struct {",
          "454: } OSSL_HMAC_PKEY_CTX;",
          "456: static int ossl_hmac_init(EVP_PKEY_CTX *ctx)",
          "",
          "[Removed Lines]",
          "453:     HMAC_CTX ctx;",
          "",
          "[Added Lines]",
          "453:     HMAC_CTX *ctx;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "461:     if (hctx == NULL)",
          "462:         return 0;",
          "463:     hctx->ktmp.type = V_ASN1_OCTET_STRING;",
          "465:     EVP_PKEY_CTX_set_data(ctx, hctx);",
          "466:     EVP_PKEY_CTX_set0_keygen_info(ctx, NULL, 0);",
          "467: # ifdef TEST_ENG_OPENSSL_HMAC_INIT",
          "",
          "[Removed Lines]",
          "464:     HMAC_CTX_init(&hctx->ctx);",
          "",
          "[Added Lines]",
          "464:     hctx->ctx = HMAC_CTX_new();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "478:     sctx = EVP_PKEY_CTX_get_data(src);",
          "479:     dctx = EVP_PKEY_CTX_get_data(dst);",
          "480:     dctx->md = sctx->md;",
          "484:         return 0;",
          "485:     if (sctx->ktmp.data) {",
          "486:         if (!ASN1_OCTET_STRING_set(&dctx->ktmp,",
          "",
          "[Removed Lines]",
          "482:     HMAC_CTX_cleanup(&dctx->ctx);",
          "483:     if (!HMAC_CTX_copy(&dctx->ctx, &sctx->ctx))",
          "",
          "[Added Lines]",
          "481:     if (!HMAC_CTX_copy(dctx->ctx, sctx->ctx))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "494: {",
          "495:     OSSL_HMAC_PKEY_CTX *hctx = EVP_PKEY_CTX_get_data(ctx);",
          "498:     OPENSSL_clear_free(hctx->ktmp.data, hctx->ktmp.length);",
          "499:     OPENSSL_free(hctx);",
          "500: }",
          "",
          "[Removed Lines]",
          "497:     HMAC_CTX_cleanup(&hctx->ctx);",
          "",
          "[Added Lines]",
          "495:     HMAC_CTX_free(hctx->ctx);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "516: static int ossl_int_update(EVP_MD_CTX *ctx, const void *data, size_t count)",
          "517: {",
          "520:         return 0;",
          "521:     return 1;",
          "522: }",
          "",
          "[Removed Lines]",
          "518:     OSSL_HMAC_PKEY_CTX *hctx = EVP_PKEY_CTX_get_data(ctx->pctx);",
          "519:     if (!HMAC_Update(&hctx->ctx, data, count))",
          "",
          "[Added Lines]",
          "516:     OSSL_HMAC_PKEY_CTX *hctx = EVP_PKEY_CTX_get_data(EVP_MD_CTX_pkey_ctx(ctx));",
          "517:     if (!HMAC_Update(hctx->ctx, data, count))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "524: static int ossl_hmac_signctx_init(EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx)",
          "525: {",
          "526:     EVP_MD_CTX_set_flags(mctx, EVP_MD_CTX_FLAG_NO_INIT);",
          "528:     return 1;",
          "529: }",
          "",
          "[Removed Lines]",
          "527:     mctx->update = ossl_int_update;",
          "",
          "[Added Lines]",
          "525:     EVP_MD_CTX_set_update_fn(mctx, ossl_int_update);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "541:     if (!sig)",
          "542:         return 1;",
          "545:         return 0;",
          "547:     return 1;",
          "",
          "[Removed Lines]",
          "544:     if (!HMAC_Final(&hctx->ctx, sig, &hlen))",
          "",
          "[Added Lines]",
          "542:     if (!HMAC_Final(hctx->ctx, sig, &hlen))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "568:     case EVP_PKEY_CTRL_DIGESTINIT:",
          "569:         pk = EVP_PKEY_CTX_get0_pkey(ctx);",
          "570:         key = EVP_PKEY_get0(pk);",
          "572:             return 0;",
          "573:         break;",
          "",
          "[Removed Lines]",
          "571:         if (!HMAC_Init_ex(&hctx->ctx, key->data, key->length, hctx->md, NULL))",
          "",
          "[Added Lines]",
          "569:         if (!HMAC_Init_ex(hctx->ctx, key->data, key->length, hctx->md, NULL))",
          "",
          "---------------"
        ],
        "crypto/evp/p5_crpt2.c||crypto/evp/p5_crpt2.c": [
          "File: crypto/evp/p5_crpt2.c -> crypto/evp/p5_crpt2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:     unsigned char digtmp[EVP_MAX_MD_SIZE], *p, itmp[4];",
          "86:     int cplen, j, k, tkeylen, mdlen;",
          "87:     unsigned long i = 1;",
          "90:     mdlen = EVP_MD_size(digest);",
          "91:     if (mdlen < 0)",
          "92:         return 0;",
          "95:     p = out;",
          "96:     tkeylen = keylen;",
          "97:     if (!pass)",
          "98:         passlen = 0;",
          "99:     else if (passlen == -1)",
          "100:         passlen = strlen(pass);",
          "103:         return 0;",
          "104:     }",
          "105:     while (tkeylen) {",
          "",
          "[Removed Lines]",
          "88:     HMAC_CTX hctx_tpl = HMAC_CTX_EMPTY, hctx = HMAC_CTX_EMPTY;",
          "94:     HMAC_CTX_init(&hctx_tpl);",
          "101:     if (!HMAC_Init_ex(&hctx_tpl, pass, passlen, digest, NULL)) {",
          "102:         HMAC_CTX_cleanup(&hctx_tpl);",
          "",
          "[Added Lines]",
          "88:     HMAC_CTX *hctx_tpl = NULL, *hctx = NULL;",
          "94:     hctx_tpl = HMAC_CTX_new();",
          "95:     if (hctx_tpl == NULL)",
          "96:         return 0;",
          "103:     if (!HMAC_Init_ex(hctx_tpl, pass, passlen, digest, NULL)) {",
          "104:         HMAC_CTX_free(hctx_tpl);",
          "105:         return 0;",
          "106:     }",
          "107:     hctx = HMAC_CTX_new();",
          "108:     if (hctx == NULL) {",
          "109:         HMAC_CTX_free(hctx_tpl);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115:         itmp[1] = (unsigned char)((i >> 16) & 0xff);",
          "116:         itmp[2] = (unsigned char)((i >> 8) & 0xff);",
          "117:         itmp[3] = (unsigned char)(i & 0xff);",
          "120:             return 0;",
          "121:         }",
          "127:             return 0;",
          "128:         }",
          "130:         memcpy(p, digtmp, cplen);",
          "131:         for (j = 1; j < iter; j++) {",
          "134:                 return 0;",
          "135:             }",
          "140:                 return 0;",
          "141:             }",
          "143:             for (k = 0; k < cplen; k++)",
          "144:                 p[k] ^= digtmp[k];",
          "145:         }",
          "",
          "[Removed Lines]",
          "118:         if (!HMAC_CTX_copy(&hctx, &hctx_tpl)) {",
          "119:             HMAC_CTX_cleanup(&hctx_tpl);",
          "122:         if (!HMAC_Update(&hctx, salt, saltlen)",
          "123:             || !HMAC_Update(&hctx, itmp, 4)",
          "124:             || !HMAC_Final(&hctx, digtmp, NULL)) {",
          "125:             HMAC_CTX_cleanup(&hctx_tpl);",
          "126:             HMAC_CTX_cleanup(&hctx);",
          "129:         HMAC_CTX_cleanup(&hctx);",
          "132:             if (!HMAC_CTX_copy(&hctx, &hctx_tpl)) {",
          "133:                 HMAC_CTX_cleanup(&hctx_tpl);",
          "136:             if (!HMAC_Update(&hctx, digtmp, mdlen)",
          "137:                 || !HMAC_Final(&hctx, digtmp, NULL)) {",
          "138:                 HMAC_CTX_cleanup(&hctx_tpl);",
          "139:                 HMAC_CTX_cleanup(&hctx);",
          "142:             HMAC_CTX_cleanup(&hctx);",
          "",
          "[Added Lines]",
          "125:         if (!HMAC_CTX_copy(hctx, hctx_tpl)) {",
          "126:             HMAC_CTX_free(hctx);",
          "127:             HMAC_CTX_free(hctx_tpl);",
          "130:         if (!HMAC_Update(hctx, salt, saltlen)",
          "131:             || !HMAC_Update(hctx, itmp, 4)",
          "132:             || !HMAC_Final(hctx, digtmp, NULL)) {",
          "133:             HMAC_CTX_free(hctx);",
          "134:             HMAC_CTX_free(hctx_tpl);",
          "137:         HMAC_CTX_cleanup(hctx);",
          "140:             if (!HMAC_CTX_copy(hctx, hctx_tpl)) {",
          "141:                 HMAC_CTX_free(hctx);",
          "142:                 HMAC_CTX_free(hctx_tpl);",
          "145:             if (!HMAC_Update(hctx, digtmp, mdlen)",
          "146:                 || !HMAC_Final(hctx, digtmp, NULL)) {",
          "147:                 HMAC_CTX_free(hctx);",
          "148:                 HMAC_CTX_free(hctx_tpl);",
          "151:             HMAC_CTX_cleanup(hctx);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "147:         i++;",
          "148:         p += cplen;",
          "149:     }",
          "151: # ifdef DEBUG_PKCS5V2",
          "152:     fprintf(stderr, \"Password:\\n\");",
          "153:     h__dump(pass, passlen);",
          "",
          "[Removed Lines]",
          "150:     HMAC_CTX_cleanup(&hctx_tpl);",
          "",
          "[Added Lines]",
          "159:     HMAC_CTX_free(hctx);",
          "160:     HMAC_CTX_free(hctx_tpl);",
          "",
          "---------------"
        ],
        "crypto/pkcs12/p12_mutl.c||crypto/pkcs12/p12_mutl.c": [
          "File: crypto/pkcs12/p12_mutl.c -> crypto/pkcs12/p12_mutl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: # include <stdio.h>",
          "61: # include \"internal/cryptlib.h\"",
          "63: # include <openssl/hmac.h>",
          "64: # include <openssl/rand.h>",
          "65: # include <openssl/pkcs12.h>",
          "",
          "[Removed Lines]",
          "62: #include <openssl/crypto.h>",
          "",
          "[Added Lines]",
          "62: # include <openssl/crypto.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:                    unsigned char *mac, unsigned int *maclen)",
          "92: {",
          "93:     const EVP_MD *md_type;",
          "95:     unsigned char key[EVP_MAX_MD_SIZE], *salt;",
          "96:     int saltlen, iter;",
          "97:     int md_size = 0;",
          "",
          "[Removed Lines]",
          "94:     HMAC_CTX hmac = HMAC_CTX_EMPTY;",
          "",
          "[Added Lines]",
          "94:     HMAC_CTX *hmac = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "133:         PKCS12err(PKCS12_F_PKCS12_GEN_MAC, PKCS12_R_KEY_GEN_ERROR);",
          "134:         return 0;",
          "135:     }",
          "139:                         p12->authsafes->d.data->length)",
          "142:         return 0;",
          "143:     }",
          "145:     return 1;",
          "146: }",
          "",
          "[Removed Lines]",
          "136:     HMAC_CTX_init(&hmac);",
          "137:     if (!HMAC_Init_ex(&hmac, key, md_size, md_type, NULL)",
          "138:         || !HMAC_Update(&hmac, p12->authsafes->d.data->data,",
          "140:         || !HMAC_Final(&hmac, mac, maclen)) {",
          "141:         HMAC_CTX_cleanup(&hmac);",
          "144:     HMAC_CTX_cleanup(&hmac);",
          "",
          "[Added Lines]",
          "136:     hmac = HMAC_CTX_new();",
          "137:     if (!HMAC_Init_ex(hmac, key, md_size, md_type, NULL)",
          "138:         || !HMAC_Update(hmac, p12->authsafes->d.data->data,",
          "140:         || !HMAC_Final(hmac, mac, maclen)) {",
          "141:         HMAC_CTX_free(hmac);",
          "144:     HMAC_CTX_free(hmac);",
          "",
          "---------------"
        ],
        "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c": [
          "File: ssl/statem/statem_srvr.c -> ssl/statem/statem_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3160: {",
          "3161:     unsigned char *senc = NULL;",
          "3162:     EVP_CIPHER_CTX ctx;",
          "3164:     unsigned char *p, *macstart;",
          "3165:     const unsigned char *const_p;",
          "3166:     int len, slen_full, slen;",
          "",
          "[Removed Lines]",
          "3163:     HMAC_CTX hctx = HMAC_CTX_EMPTY;",
          "",
          "[Added Lines]",
          "3163:     HMAC_CTX *hctx = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3187:     }",
          "3189:     EVP_CIPHER_CTX_init(&ctx);",
          "3192:     p = senc;",
          "3193:     if (!i2d_SSL_SESSION(s->session, &p))",
          "",
          "[Removed Lines]",
          "3190:     HMAC_CTX_init(&hctx);",
          "",
          "[Added Lines]",
          "3190:     hctx = HMAC_CTX_new();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3235:     if (tctx->tlsext_ticket_key_cb) {",
          "3238:             goto err;",
          "3239:     } else {",
          "3240:         if (RAND_bytes(iv, 16) <= 0)",
          "",
          "[Removed Lines]",
          "3236:         if (tctx->tlsext_ticket_key_cb(s, key_name, iv, &ctx,",
          "3237:                                        &hctx, 1) < 0)",
          "",
          "[Added Lines]",
          "3236:         if (tctx->tlsext_ticket_key_cb(s, key_name, iv, &ctx, hctx, 1) < 0)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3242:         if (!EVP_EncryptInit_ex(&ctx, EVP_aes_128_cbc(), NULL,",
          "3243:                                 tctx->tlsext_tick_aes_key, iv))",
          "3244:             goto err;",
          "3246:                           EVP_sha256(), NULL))",
          "3247:             goto err;",
          "3248:         memcpy(key_name, tctx->tlsext_tick_key_name, 16);",
          "",
          "[Removed Lines]",
          "3245:         if (!HMAC_Init_ex(&hctx, tctx->tlsext_tick_hmac_key, 16,",
          "",
          "[Added Lines]",
          "3244:         if (!HMAC_Init_ex(hctx, tctx->tlsext_tick_hmac_key, 16,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3272:         goto err;",
          "3273:     p += len;",
          "3276:         goto err;",
          "3278:         goto err;",
          "3280:     EVP_CIPHER_CTX_cleanup(&ctx);",
          "3283:     p += hlen;",
          "",
          "[Removed Lines]",
          "3275:     if (!HMAC_Update(&hctx, macstart, p - macstart))",
          "3277:     if (!HMAC_Final(&hctx, p, &hlen))",
          "3281:     HMAC_CTX_cleanup(&hctx);",
          "",
          "[Added Lines]",
          "3274:     if (!HMAC_Update(hctx, macstart, p - macstart))",
          "3276:     if (!HMAC_Final(hctx, p, &hlen))",
          "3280:     HMAC_CTX_free(hctx);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3295:  err:",
          "3296:     OPENSSL_free(senc);",
          "3297:     EVP_CIPHER_CTX_cleanup(&ctx);",
          "3299:     ossl_statem_set_error(s);",
          "3300:     return 0;",
          "3301: }",
          "",
          "[Removed Lines]",
          "3298:     HMAC_CTX_cleanup(&hctx);",
          "",
          "[Added Lines]",
          "3297:     HMAC_CTX_free(hctx);",
          "",
          "---------------"
        ],
        "ssl/t1_lib.c||ssl/t1_lib.c": [
          "File: ssl/t1_lib.c -> ssl/t1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3041:     const unsigned char *p;",
          "3042:     int slen, mlen, renew_ticket = 0;",
          "3043:     unsigned char tick_hmac[EVP_MAX_MD_SIZE];",
          "3045:     EVP_CIPHER_CTX ctx;",
          "3046:     SSL_CTX *tctx = s->initial_ctx;",
          "3048:     if (eticklen < 48)",
          "3049:         return 2;",
          "3052:     EVP_CIPHER_CTX_init(&ctx);",
          "3053:     if (tctx->tlsext_ticket_key_cb) {",
          "3054:         unsigned char *nctick = (unsigned char *)etick;",
          "3055:         int rv = tctx->tlsext_ticket_key_cb(s, nctick, nctick + 16,",
          "3057:         if (rv < 0)",
          "3058:             return -1;",
          "3059:         if (rv == 0)",
          "",
          "[Removed Lines]",
          "3044:     HMAC_CTX hctx = HMAC_CTX_EMPTY;",
          "3051:     HMAC_CTX_init(&hctx);",
          "3056:                                             &ctx, &hctx, 0);",
          "",
          "[Added Lines]",
          "3045:     HMAC_CTX *hctx = NULL;",
          "3052:     hctx = HMAC_CTX_new();",
          "3053:     if (hctx == NULL)",
          "3054:         return -2;",
          "3059:                                             &ctx, hctx, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3065:         if (memcmp(etick, tctx->tlsext_tick_key_name, 16))",
          "3066:             return 2;",
          "3068:                          EVP_sha256(), NULL) <= 0",
          "3069:                 || EVP_DecryptInit_ex(&ctx, EVP_aes_128_cbc(), NULL,",
          "3070:                                       tctx->tlsext_tick_aes_key,",
          "",
          "[Removed Lines]",
          "3067:         if (HMAC_Init_ex(&hctx, tctx->tlsext_tick_hmac_key, 16,",
          "",
          "[Added Lines]",
          "3070:         if (HMAC_Init_ex(hctx, tctx->tlsext_tick_hmac_key, 16,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3080:     if (mlen < 0) {",
          "3081:         goto err;",
          "3082:     }",
          "3083:     eticklen -= mlen;",
          "3087:         goto err;",
          "3088:     }",
          "3090:     if (CRYPTO_memcmp(tick_hmac, etick + eticklen, mlen)) {",
          "3091:         EVP_CIPHER_CTX_cleanup(&ctx);",
          "3092:         return 2;",
          "",
          "[Removed Lines]",
          "3079:     mlen = HMAC_size(&hctx);",
          "3085:     if (HMAC_Update(&hctx, etick, eticklen) <= 0",
          "3086:             || HMAC_Final(&hctx, tick_hmac, NULL) <= 0) {",
          "3089:     HMAC_CTX_cleanup(&hctx);",
          "",
          "[Added Lines]",
          "3082:     mlen = HMAC_size(hctx);",
          "3088:     if (HMAC_Update(hctx, etick, eticklen) <= 0",
          "3089:             || HMAC_Final(hctx, tick_hmac, NULL) <= 0) {",
          "3092:     HMAC_CTX_free(hctx);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3135:     return 2;",
          "3136: err:",
          "3137:     EVP_CIPHER_CTX_cleanup(&ctx);",
          "3139:     return -1;",
          "3140: }",
          "",
          "[Removed Lines]",
          "3138:     HMAC_CTX_cleanup(&hctx);",
          "",
          "[Added Lines]",
          "3141:     HMAC_CTX_free(hctx);",
          "",
          "---------------"
        ],
        "test/hmactest.c||test/hmactest.c": [
          "File: test/hmactest.c -> test/hmactest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:     char *p;",
          "135: # endif",
          "136:     int err = 0;",
          "138:     unsigned char buf[EVP_MAX_MD_SIZE];",
          "139:     unsigned int len;",
          "",
          "[Removed Lines]",
          "137:     HMAC_CTX ctx = HMAC_CTX_EMPTY, ctx2 = HMAC_CTX_EMPTY;",
          "",
          "[Added Lines]",
          "137:     HMAC_CTX *ctx = NULL, *ctx2 = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "170:         printf(\"Should fail to initialise HMAC with empty MD and key (test 4)\\n\");",
          "171:         err++;",
          "172:         goto test5;",
          "173:     }",
          "175:         printf(\"Should fail HMAC_Update with ctx not set up (test 4)\\n\");",
          "176:         err++;",
          "177:         goto test5;",
          "178:     }",
          "180:         printf(\"Should fail to initialise HMAC with empty key (test 4)\\n\");",
          "181:         err++;",
          "182:         goto test5;",
          "183:     }",
          "185:         printf(\"Should fail HMAC_Update with ctx not set up (test 4)\\n\");",
          "186:         err++;",
          "187:         goto test5;",
          "188:     }",
          "189:     printf(\"test 4 ok\\n\");",
          "190: test5:",
          "194:         printf(\"Should fail to initialise HMAC with empty MD (test 5)\\n\");",
          "195:         err++;",
          "196:         goto test6;",
          "197:     }",
          "199:         printf(\"Should fail HMAC_Update with ctx not set up (test 5)\\n\");",
          "200:         err++;",
          "201:         goto test6;",
          "202:     }",
          "204:         printf(\"Should fail to initialise HMAC with invalid key len(test 5)\\n\");",
          "205:         err++;",
          "206:         goto test6;",
          "207:     }",
          "209:         printf(\"Failed to initialise HMAC (test 5)\\n\");",
          "210:         err++;",
          "211:         goto test6;",
          "212:     }",
          "214:         printf(\"Error updating HMAC with data (test 5)\\n\");",
          "215:         err++;",
          "216:         goto test6;",
          "217:     }",
          "219:         printf(\"Error finalising data (test 5)\\n\");",
          "220:         err++;",
          "221:         goto test6;",
          "",
          "[Removed Lines]",
          "168:     HMAC_CTX_init(&ctx);",
          "169:     if (HMAC_Init_ex(&ctx, NULL, 0, NULL, NULL)) {",
          "174:     if (HMAC_Update(&ctx, test[4].data, test[4].data_len)) {",
          "179:     if (HMAC_Init_ex(&ctx, NULL, 0, EVP_sha1(), NULL)) {",
          "184:     if (HMAC_Update(&ctx, test[4].data, test[4].data_len)) {",
          "191:     HMAC_CTX_cleanup(&ctx);",
          "192:     HMAC_CTX_init(&ctx);",
          "193:     if (HMAC_Init_ex(&ctx, test[4].key, test[4].key_len, NULL, NULL)) {",
          "198:     if (HMAC_Update(&ctx, test[4].data, test[4].data_len)) {",
          "203:     if (HMAC_Init_ex(&ctx, test[4].key, -1, EVP_sha1(), NULL)) {",
          "208:     if (!HMAC_Init_ex(&ctx, test[4].key, test[4].key_len, EVP_sha1(), NULL)) {",
          "213:     if (!HMAC_Update(&ctx, test[4].data, test[4].data_len)) {",
          "218:     if (!HMAC_Final(&ctx, buf, &len)) {",
          "",
          "[Added Lines]",
          "168:     ctx = HMAC_CTX_new();",
          "169:     if (ctx == NULL) {",
          "170:         printf(\"HMAC malloc failure (test 4)\\n\");",
          "171:         err++;",
          "172:         goto end;",
          "173:     }",
          "174:     if (HMAC_Init_ex(ctx, NULL, 0, NULL, NULL)) {",
          "179:     if (HMAC_Update(ctx, test[4].data, test[4].data_len)) {",
          "184:     if (HMAC_Init_ex(ctx, NULL, 0, EVP_sha1(), NULL)) {",
          "189:     if (HMAC_Update(ctx, test[4].data, test[4].data_len)) {",
          "196:     HMAC_CTX_cleanup(ctx);",
          "197:     HMAC_CTX_init(ctx);",
          "198:     if (HMAC_Init_ex(ctx, test[4].key, test[4].key_len, NULL, NULL)) {",
          "203:     if (HMAC_Update(ctx, test[4].data, test[4].data_len)) {",
          "208:     if (HMAC_Init_ex(ctx, test[4].key, -1, EVP_sha1(), NULL)) {",
          "213:     if (!HMAC_Init_ex(ctx, test[4].key, test[4].key_len, EVP_sha1(), NULL)) {",
          "218:     if (!HMAC_Update(ctx, test[4].data, test[4].data_len)) {",
          "223:     if (!HMAC_Final(ctx, buf, &len)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "227:         err++;",
          "228:         goto test6;",
          "229:     }",
          "231:         printf(\"Should disallow changing MD without a new key (test 5)\\n\");",
          "232:         err++;",
          "233:         goto test6;",
          "234:     }",
          "236:         printf(\"Failed to reinitialise HMAC (test 5)\\n\");",
          "237:         err++;",
          "238:         goto test6;",
          "239:     }",
          "241:         printf(\"Error updating HMAC with data (sha256) (test 5)\\n\");",
          "242:         err++;",
          "243:         goto test6;",
          "244:     }",
          "246:         printf(\"Error finalising data (sha256) (test 5)\\n\");",
          "247:         err++;",
          "248:         goto test6;",
          "",
          "[Removed Lines]",
          "230:     if (HMAC_Init_ex(&ctx, NULL, 0, EVP_sha256(), NULL)) {",
          "235:     if (!HMAC_Init_ex(&ctx, test[4].key, test[4].key_len, EVP_sha256(), NULL)) {",
          "240:     if (!HMAC_Update(&ctx, test[5].data, test[5].data_len)) {",
          "245:     if (!HMAC_Final(&ctx, buf, &len)) {",
          "",
          "[Added Lines]",
          "235:     if (HMAC_Init_ex(ctx, NULL, 0, EVP_sha256(), NULL)) {",
          "240:     if (!HMAC_Init_ex(ctx, test[4].key, test[4].key_len, EVP_sha256(), NULL)) {",
          "245:     if (!HMAC_Update(ctx, test[5].data, test[5].data_len)) {",
          "250:     if (!HMAC_Final(ctx, buf, &len)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "254:         err++;",
          "255:         goto test6;",
          "256:     }",
          "258:         printf(\"Failed to reinitialise HMAC with key (test 5)\\n\");",
          "259:         err++;",
          "260:         goto test6;",
          "261:     }",
          "263:         printf(\"Error updating HMAC with data (new key) (test 5)\\n\");",
          "264:         err++;",
          "265:         goto test6;",
          "266:     }",
          "268:         printf(\"Error finalising data (new key) (test 5)\\n\");",
          "269:         err++;",
          "270:         goto test6;",
          "",
          "[Removed Lines]",
          "257:     if (!HMAC_Init_ex(&ctx, test[6].key, test[6].key_len, NULL, NULL)) {",
          "262:     if (!HMAC_Update(&ctx, test[6].data, test[6].data_len)) {",
          "267:     if (!HMAC_Final(&ctx, buf, &len)) {",
          "",
          "[Added Lines]",
          "262:     if (!HMAC_Init_ex(ctx, test[6].key, test[6].key_len, NULL, NULL)) {",
          "267:     if (!HMAC_Update(ctx, test[6].data, test[6].data_len)) {",
          "272:     if (!HMAC_Final(ctx, buf, &len)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "278:         printf(\"test 5 ok\\n\");",
          "279:     }",
          "280: test6:",
          "284:         printf(\"Failed to initialise HMAC (test 6)\\n\");",
          "285:         err++;",
          "286:         goto end;",
          "287:     }",
          "289:         printf(\"Error updating HMAC with data (test 6)\\n\");",
          "290:         err++;",
          "291:         goto end;",
          "292:     }",
          "294:         printf(\"Failed to copy HMAC_CTX (test 6)\\n\");",
          "295:         err++;",
          "296:         goto end;",
          "297:     }",
          "299:         printf(\"Error finalising data (test 6)\\n\");",
          "300:         err++;",
          "301:         goto end;",
          "",
          "[Removed Lines]",
          "281:     HMAC_CTX_cleanup(&ctx);",
          "282:     HMAC_CTX_init(&ctx);",
          "283:     if (!HMAC_Init_ex(&ctx, test[7].key, test[7].key_len, EVP_sha1(), NULL)) {",
          "288:     if (!HMAC_Update(&ctx, test[7].data, test[7].data_len)) {",
          "293:     if (!HMAC_CTX_copy(&ctx2, &ctx)) {",
          "298:     if (!HMAC_Final(&ctx2, buf, &len)) {",
          "",
          "[Added Lines]",
          "286:     HMAC_CTX_cleanup(ctx);",
          "287:     HMAC_CTX_init(ctx);",
          "288:     ctx2 = HMAC_CTX_new();",
          "289:     if (ctx2 == NULL) {",
          "290:         printf(\"HMAC malloc failure (test 6)\\n\");",
          "291:         err++;",
          "292:         goto end;",
          "293:     }",
          "294:     if (!HMAC_Init_ex(ctx, test[7].key, test[7].key_len, EVP_sha1(), NULL)) {",
          "299:     if (!HMAC_Update(ctx, test[7].data, test[7].data_len)) {",
          "304:     if (!HMAC_CTX_copy(ctx2, ctx)) {",
          "309:     if (!HMAC_Final(ctx2, buf, &len)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "309:         printf(\"test 6 ok\\n\");",
          "310:     }",
          "311: end:",
          "313:     EXIT(err);",
          "314: }",
          "",
          "[Removed Lines]",
          "312:     HMAC_CTX_cleanup(&ctx);",
          "",
          "[Added Lines]",
          "323:     HMAC_CTX_free(ctx2);",
          "324:     HMAC_CTX_free(ctx);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "348240c676a1b2beaebb865e8be0b62f88c10b7d",
      "candidate_info": {
        "commit_hash": "348240c676a1b2beaebb865e8be0b62f88c10b7d",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/348240c676a1b2beaebb865e8be0b62f88c10b7d",
        "files": [
          "ssl/record/ssl3_record.c",
          "ssl/s3_cbc.c",
          "ssl/s3_enc.c",
          "ssl/s3_lib.c",
          "ssl/ssl_asn1.c",
          "ssl/ssl_ciph.c",
          "ssl/ssl_lib.c",
          "ssl/ssl_mcnf.c",
          "ssl/ssl_sess.c",
          "ssl/ssl_txt.c",
          "ssl/statem/statem_clnt.c",
          "ssl/statem/statem_dtls.c",
          "ssl/statem/statem_lib.c",
          "ssl/statem/statem_srvr.c",
          "ssl/t1_enc.c",
          "ssl/t1_lib.c",
          "ssl/t1_reneg.c"
        ],
        "message": "Fix misc size_t issues causing Windows warnings in 64 bit\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
          "ssl/s3_cbc.c||ssl/s3_cbc.c",
          "ssl/s3_enc.c||ssl/s3_enc.c",
          "ssl/s3_lib.c||ssl/s3_lib.c",
          "ssl/ssl_asn1.c||ssl/ssl_asn1.c",
          "ssl/ssl_ciph.c||ssl/ssl_ciph.c",
          "ssl/ssl_lib.c||ssl/ssl_lib.c",
          "ssl/ssl_mcnf.c||ssl/ssl_mcnf.c",
          "ssl/ssl_sess.c||ssl/ssl_sess.c",
          "ssl/ssl_txt.c||ssl/ssl_txt.c",
          "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c",
          "ssl/statem/statem_dtls.c||ssl/statem/statem_dtls.c",
          "ssl/statem/statem_lib.c||ssl/statem/statem_lib.c",
          "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c",
          "ssl/t1_enc.c||ssl/t1_enc.c",
          "ssl/t1_lib.c||ssl/t1_lib.c",
          "ssl/t1_reneg.c||ssl/t1_reneg.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/t1_lib.c||ssl/t1_lib.c"
          ],
          "candidate": [
            "ssl/t1_lib.c||ssl/t1_lib.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
          "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1022:     header[8] = rec->type;",
          "1023:     header[9] = (unsigned char)(ssl->version >> 8);",
          "1024:     header[10] = (unsigned char)(ssl->version);",
          "1028:     if (!send && !SSL_USE_ETM(ssl) &&",
          "1029:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
          "",
          "[Removed Lines]",
          "1025:     header[11] = (rec->length) >> 8;",
          "1026:     header[12] = (rec->length) & 0xff;",
          "",
          "[Added Lines]",
          "1025:     header[11] = (unsigned char)(rec->length >> 8);",
          "1026:     header[12] = (unsigned char)(rec->length & 0xff);",
          "",
          "---------------"
        ],
        "ssl/s3_cbc.c||ssl/s3_cbc.c": [
          "File: ssl/s3_cbc.c -> ssl/s3_cbc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "358:     if (k > 0) {",
          "359:         if (is_sslv3) {",
          "",
          "[Removed Lines]",
          "360:             unsigned overhang;",
          "",
          "[Added Lines]",
          "360:             size_t overhang;",
          "",
          "---------------"
        ],
        "ssl/s3_enc.c||ssl/s3_enc.c": [
          "File: ssl/s3_enc.c -> ssl/s3_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "440:     if ((sender != NULL && EVP_DigestUpdate(ctx, sender, len) <= 0)",
          "441:         || EVP_MD_CTX_ctrl(ctx, EVP_CTRL_SSL3_MASTER_SECRET,",
          "443:                            s->session->master_key) <= 0",
          "444:         || EVP_DigestFinal_ex(ctx, p, NULL) <= 0) {",
          "445:         SSLerr(SSL_F_SSL3_FINAL_FINISH_MAC, ERR_R_INTERNAL_ERROR);",
          "",
          "[Removed Lines]",
          "442:                            s->session->master_key_length,",
          "",
          "[Added Lines]",
          "442:                            (int)s->session->master_key_length,",
          "",
          "---------------"
        ],
        "ssl/s3_lib.c||ssl/s3_lib.c": [
          "File: ssl/s3_lib.c -> ssl/s3_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3036:     case SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP:",
          "3039:             return -1;",
          "3042:     case SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP:",
          "3043:         OPENSSL_free(s->tlsext_ocsp_resp);",
          "",
          "[Removed Lines]",
          "3038:         if (s->tlsext_ocsp_resplen == 0)",
          "3040:         return s->tlsext_ocsp_resplen;",
          "",
          "[Added Lines]",
          "3038:         if (s->tlsext_ocsp_resplen == 0",
          "3039:                 || s->tlsext_ocsp_resplen > LONG_MAX)",
          "3041:         return (long)s->tlsext_ocsp_resplen;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3955:         unsigned long Time = (unsigned long)time(NULL);",
          "3956:         unsigned char *p = result;",
          "3957:         l2n(Time, p);",
          "3959:     } else",
          "3961: }",
          "3963: int ssl_generate_master_secret(SSL *s, unsigned char *pms, size_t pmslen,",
          "",
          "[Removed Lines]",
          "3958:         return RAND_bytes(p, len - 4);",
          "3960:         return RAND_bytes(result, len);",
          "",
          "[Added Lines]",
          "3960:         return RAND_bytes(p, (int)(len - 4));",
          "3962:         return RAND_bytes(result, (int)len);",
          "",
          "---------------"
        ],
        "ssl/ssl_asn1.c||ssl/ssl_asn1.c": [
          "File: ssl/ssl_asn1.c -> ssl/ssl_asn1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:                               unsigned char *data, size_t len)",
          "103: {",
          "104:     os->data = data;",
          "106:     os->flags = 0;",
          "108: }",
          "",
          "[Removed Lines]",
          "105:     os->length = len;",
          "",
          "[Added Lines]",
          "105:     os->length = (int)len;",
          "",
          "---------------"
        ],
        "ssl/ssl_ciph.c||ssl/ssl_ciph.c": [
          "File: ssl/ssl_ciph.c -> ssl/ssl_ciph.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:     size_t i;",
          "176:     for (i = 0; i < table_cnt; i++, table++) {",
          "177:         if (table->mask == mask)",
          "179:     }",
          "180:     return -1;",
          "181: }",
          "",
          "[Removed Lines]",
          "178:             return i;",
          "",
          "[Added Lines]",
          "178:             return (int)i;",
          "",
          "---------------"
        ],
        "ssl/ssl_lib.c||ssl/ssl_lib.c": [
          "File: ssl/ssl_lib.c -> ssl/ssl_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "80: struct ssl_async_args {",
          "81:     SSL *s;",
          "82:     void *buf;",
          "84:     enum { READFUNC, WRITEFUNC, OTHERFUNC } type;",
          "85:     union {",
          "86:         int (*func_read) (SSL *, void *, size_t, size_t *);",
          "",
          "[Removed Lines]",
          "83:     int num;",
          "",
          "[Added Lines]",
          "83:     size_t num;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "318:     t->usage = usage;",
          "319:     t->selector = selector;",
          "320:     t->mtype = mtype;",
          "322:     if (t->data == NULL) {",
          "323:         tlsa_free(t);",
          "324:         SSLerr(SSL_F_DANE_TLSA_ADD, ERR_R_MALLOC_FAILURE);",
          "325:         return -1;",
          "326:     }",
          "331:     if (mtype == DANETLS_MATCHING_FULL) {",
          "",
          "[Removed Lines]",
          "321:     t->data = OPENSSL_malloc(ilen);",
          "327:     memcpy(t->data, data, ilen);",
          "328:     t->dlen = ilen;",
          "",
          "[Added Lines]",
          "321:     t->data = OPENSSL_malloc(dlen);",
          "327:     memcpy(t->data, data, dlen);",
          "328:     t->dlen = dlen;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "336:         switch (selector) {",
          "337:         case DANETLS_SELECTOR_CERT:",
          "339:                 dlen != (size_t)(p - data)) {",
          "340:                 tlsa_free(t);",
          "341:                 SSLerr(SSL_F_DANE_TLSA_ADD, SSL_R_DANE_TLSA_BAD_CERTIFICATE);",
          "",
          "[Removed Lines]",
          "338:             if (!d2i_X509(&cert, &p, dlen) || p < data ||",
          "",
          "[Added Lines]",
          "338:             if (!d2i_X509(&cert, &p, ilen) || p < data ||",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "370:             break;",
          "372:         case DANETLS_SELECTOR_SPKI:",
          "374:                 dlen != (size_t)(p - data)) {",
          "375:                 tlsa_free(t);",
          "376:                 SSLerr(SSL_F_DANE_TLSA_ADD, SSL_R_DANE_TLSA_BAD_PUBLIC_KEY);",
          "",
          "[Removed Lines]",
          "373:             if (!d2i_PUBKEY(&pkey, &p, dlen) || p < data ||",
          "",
          "[Added Lines]",
          "373:             if (!d2i_PUBKEY(&pkey, &p, ilen) || p < data ||",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1308: }",
          "1310: int SSL_has_pending(const SSL *s)",
          "",
          "[Removed Lines]",
          "1307:     return pending < INT_MAX ? pending : INT_MAX;",
          "",
          "[Added Lines]",
          "1307:     return pending < INT_MAX ? (int)pending : INT_MAX;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1382:     CRYPTO_atomic_add(&f->cert->references, 1, &i, f->cert->lock);",
          "1383:     ssl_cert_free(t->cert);",
          "1384:     t->cert = f->cert;",
          "1386:         return 0;",
          "1387:     }",
          "",
          "[Removed Lines]",
          "1385:     if (!SSL_set_session_id_context(t, f->sid_ctx, f->sid_ctx_length)) {",
          "",
          "[Added Lines]",
          "1385:     if (!SSL_set_session_id_context(t, f->sid_ctx, (int)f->sid_ctx_length)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1513:     struct ssl_async_args *args;",
          "1514:     SSL *s;",
          "1515:     void *buf;",
          "1518:     args = (struct ssl_async_args *)vargs;",
          "1519:     s = args->s;",
          "",
          "[Removed Lines]",
          "1516:     int num;",
          "",
          "[Added Lines]",
          "1516:     size_t num;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1767:     case SSL_CTRL_CLEAR_MODE:",
          "1768:         return (s->mode &= ~larg);",
          "1769:     case SSL_CTRL_GET_MAX_CERT_LIST:",
          "1771:     case SSL_CTRL_SET_MAX_CERT_LIST:",
          "1775:     case SSL_CTRL_SET_MAX_SEND_FRAGMENT:",
          "1776:         if (larg < 512 || larg > SSL3_RT_MAX_PLAIN_LENGTH)",
          "1777:             return 0;",
          "",
          "[Removed Lines]",
          "1770:         return (s->max_cert_list);",
          "1772:         l = s->max_cert_list;",
          "1773:         s->max_cert_list = larg;",
          "1774:         return (l);",
          "",
          "[Added Lines]",
          "1770:         return (long)(s->max_cert_list);",
          "1772:         if (larg < 0)",
          "1773:             return 0;",
          "1774:         l = (long)s->max_cert_list;",
          "1775:         s->max_cert_list = (size_t)larg;",
          "1776:         return l;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1879:         return 1;",
          "1881:     case SSL_CTRL_GET_MAX_CERT_LIST:",
          "1883:     case SSL_CTRL_SET_MAX_CERT_LIST:",
          "1888:     case SSL_CTRL_SET_SESS_CACHE_SIZE:",
          "1892:     case SSL_CTRL_GET_SESS_CACHE_SIZE:",
          "1894:     case SSL_CTRL_SET_SESS_CACHE_MODE:",
          "1895:         l = ctx->session_cache_mode;",
          "1896:         ctx->session_cache_mode = larg;",
          "",
          "[Removed Lines]",
          "1882:         return (ctx->max_cert_list);",
          "1884:         l = ctx->max_cert_list;",
          "1885:         ctx->max_cert_list = larg;",
          "1886:         return (l);",
          "1889:         l = ctx->session_cache_size;",
          "1890:         ctx->session_cache_size = larg;",
          "1891:         return (l);",
          "1893:         return (ctx->session_cache_size);",
          "",
          "[Added Lines]",
          "1884:         return (long)(ctx->max_cert_list);",
          "1886:         if (larg < 0)",
          "1887:             return 0;",
          "1888:         l = (long)ctx->max_cert_list;",
          "1889:         ctx->max_cert_list = (size_t)larg;",
          "1890:         return l;",
          "1893:         if (larg < 0)",
          "1894:             return 0;",
          "1895:         l = (long)ctx->session_cache_size;",
          "1896:         ctx->session_cache_size = (size_t)larg;",
          "1897:         return l;",
          "1899:         return (long)(ctx->session_cache_size);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3227:                 goto err;",
          "3228:         }",
          "3231:             goto err;",
          "3232:     }",
          "",
          "[Removed Lines]",
          "3230:         if (!SSL_set_session_id_context(ret, s->sid_ctx, s->sid_ctx_length))",
          "",
          "[Added Lines]",
          "3236:         if (!SSL_set_session_id_context(ret, s->sid_ctx,",
          "3237:                                         (int)s->sid_ctx_length))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4068:         goto err;",
          "4070:     p = s->tlsext_ocsp_resp;",
          "4072:     if (rsp == NULL)",
          "4073:         goto err;",
          "",
          "[Removed Lines]",
          "4071:     rsp = d2i_OCSP_RESPONSE(NULL, &p, s->tlsext_ocsp_resplen);",
          "",
          "[Added Lines]",
          "4078:     rsp = d2i_OCSP_RESPONSE(NULL, &p, (int)s->tlsext_ocsp_resplen);",
          "",
          "---------------"
        ],
        "ssl/ssl_mcnf.c||ssl/ssl_mcnf.c": [
          "File: ssl/ssl_mcnf.c -> ssl/ssl_mcnf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:     ssl_names_count = cnt;",
          "74:     for (i = 0; i < ssl_names_count; i++) {",
          "75:         struct ssl_conf_name *ssl_name = ssl_names + i;",
          "77:         STACK_OF(CONF_VALUE) *cmds = NCONF_get_section(cnf, sect->value);",
          "78:         if (sk_CONF_VALUE_num(cmds) <= 0) {",
          "79:             if (cmds == NULL)",
          "",
          "[Removed Lines]",
          "76:         CONF_VALUE *sect = sk_CONF_VALUE_value(cmd_lists, i);",
          "",
          "[Added Lines]",
          "76:         CONF_VALUE *sect = sk_CONF_VALUE_value(cmd_lists, (int)i);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:         ssl_name->cmd_count = cnt;",
          "95:         for (j = 0; j < cnt; j++) {",
          "96:             const char *name;",
          "98:             struct ssl_conf_cmd *cmd = ssl_name->cmds + j;",
          "100:             name = strchr(cmd_conf->name, '.');",
          "",
          "[Removed Lines]",
          "97:             CONF_VALUE *cmd_conf = sk_CONF_VALUE_value(cmds, j);",
          "",
          "[Added Lines]",
          "97:             CONF_VALUE *cmd_conf = sk_CONF_VALUE_value(cmds, (int)j);",
          "",
          "---------------"
        ],
        "ssl/ssl_sess.c||ssl/ssl_sess.c": [
          "File: ssl/ssl_sess.c -> ssl/ssl_sess.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "369:         CRYPTO_THREAD_unlock(s->lock);",
          "371:         memset(ss->session_id, 0, ss->session_id_length);",
          "373:         if (!cb(s, ss->session_id, &tmp)) {",
          "375:             SSLerr(SSL_F_SSL_GET_NEW_SESSION,",
          "",
          "[Removed Lines]",
          "372:         tmp = ss->session_id_length;",
          "",
          "[Added Lines]",
          "372:         tmp = (int)ss->session_id_length;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "391:         ss->session_id_length = tmp;",
          "393:         if (SSL_has_matching_session_id(s, ss->session_id,",
          "395:             SSLerr(SSL_F_SSL_GET_NEW_SESSION, SSL_R_SSL_SESSION_ID_CONFLICT);",
          "396:             SSL_SESSION_free(ss);",
          "397:             return (0);",
          "",
          "[Removed Lines]",
          "394:                                         ss->session_id_length)) {",
          "",
          "[Added Lines]",
          "394:                                         (unsigned int)ss->session_id_length)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "502:         ret == NULL && s->session_ctx->get_session_cb != NULL) {",
          "503:         int copy = 1;",
          "504:         ret = s->session_ctx->get_session_cb(s, PACKET_data(session_id),",
          "506:                                              &copy);",
          "508:         if (ret != NULL) {",
          "",
          "[Removed Lines]",
          "505:                                              PACKET_remaining(session_id),",
          "",
          "[Added Lines]",
          "505:                                              (int)PACKET_remaining(session_id),",
          "",
          "---------------"
        ],
        "ssl/ssl_txt.c||ssl/ssl_txt.c": [
          "File: ssl/ssl_txt.c -> ssl/ssl_txt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "128:     if (x->tlsext_tick) {",
          "129:         if (BIO_puts(bp, \"\\n    TLS session ticket:\\n\") <= 0)",
          "130:             goto err;",
          "131:         if (BIO_dump_indent",
          "133:             <= 0)",
          "134:             goto err;",
          "135:     }",
          "",
          "[Removed Lines]",
          "132:             (bp, (const char *)x->tlsext_tick, x->tlsext_ticklen, 4)",
          "",
          "[Added Lines]",
          "133:             (bp, (const char *)x->tlsext_tick, (int)x->tlsext_ticklen, 4)",
          "",
          "---------------"
        ],
        "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
          "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1358:         return 0;",
          "1359:     }",
          "1361:     if ((s->srp_ctx.N =",
          "1362:          BN_bin2bn(PACKET_data(&prime),",
          "1364:         || (s->srp_ctx.g =",
          "1365:             BN_bin2bn(PACKET_data(&generator),",
          "1367:         || (s->srp_ctx.s =",
          "1368:             BN_bin2bn(PACKET_data(&salt),",
          "1370:         || (s->srp_ctx.B =",
          "1371:             BN_bin2bn(PACKET_data(&server_pub),",
          "1374:         SSLerr(SSL_F_TLS_PROCESS_SKE_SRP, ERR_R_BN_LIB);",
          "1375:         return 0;",
          "",
          "[Removed Lines]",
          "1363:                    PACKET_remaining(&prime), NULL)) == NULL",
          "1366:                       PACKET_remaining(&generator), NULL)) == NULL",
          "1369:                       PACKET_remaining(&salt), NULL)) == NULL",
          "1372:                       PACKET_remaining(&server_pub), NULL)) == NULL) {",
          "",
          "[Added Lines]",
          "1364:                    (int)PACKET_remaining(&prime), NULL)) == NULL",
          "1367:                       (int)PACKET_remaining(&generator), NULL)) == NULL",
          "1370:                       (int)PACKET_remaining(&salt), NULL)) == NULL",
          "1373:                       (int)PACKET_remaining(&server_pub), NULL)) == NULL) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1419:         goto err;",
          "1420:     }",
          "1426:     if (p == NULL || g == NULL || bnpub_key == NULL) {",
          "1428:         SSLerr(SSL_F_TLS_PROCESS_SKE_DHE, ERR_R_BN_LIB);",
          "",
          "[Removed Lines]",
          "1422:     p = BN_bin2bn(PACKET_data(&prime), PACKET_remaining(&prime), NULL);",
          "1423:     g = BN_bin2bn(PACKET_data(&generator), PACKET_remaining(&generator), NULL);",
          "1424:     bnpub_key = BN_bin2bn(PACKET_data(&pub_key), PACKET_remaining(&pub_key),",
          "1425:                           NULL);",
          "",
          "[Added Lines]",
          "1424:     p = BN_bin2bn(PACKET_data(&prime), (int)PACKET_remaining(&prime), NULL);",
          "1425:     g = BN_bin2bn(PACKET_data(&generator), (int)PACKET_remaining(&generator),",
          "1426:                   NULL);",
          "1427:     bnpub_key = BN_bin2bn(PACKET_data(&pub_key),",
          "1428:                           (int)PACKET_remaining(&pub_key), NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1710:             SSLerr(SSL_F_TLS_PROCESS_KEY_EXCHANGE, ERR_R_EVP_LIB);",
          "1711:             goto err;",
          "1712:         }",
          "1713:         if (EVP_VerifyFinal(md_ctx, PACKET_data(&signature),",
          "1716:             EVP_MD_CTX_free(md_ctx);",
          "1717:             al = SSL_AD_DECRYPT_ERROR;",
          "",
          "[Removed Lines]",
          "1714:                             PACKET_remaining(&signature), pkey) <= 0) {",
          "",
          "[Added Lines]",
          "1718:                             (unsigned int)PACKET_remaining(&signature),",
          "1719:                             pkey) <= 0) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2194:     pms[0] = s->client_version >> 8;",
          "2195:     pms[1] = s->client_version & 0xff;",
          "2197:         goto err;",
          "2198:     }",
          "",
          "[Removed Lines]",
          "2196:     if (RAND_bytes(pms + 2, pmslen - 2) <= 0) {",
          "",
          "[Added Lines]",
          "2202:     if (RAND_bytes(pms + 2, (int)(pmslen - 2)) <= 0) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2283: {",
          "2284: #ifndef OPENSSL_NO_EC",
          "2285:     unsigned char *encodedPoint = NULL;",
          "2287:     EVP_PKEY *ckey = NULL, *skey = NULL;",
          "2288:     int ret = 0;",
          "",
          "[Removed Lines]",
          "2286:     int encoded_pt_len = 0;",
          "",
          "[Added Lines]",
          "2292:     size_t encoded_pt_len = 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2375:     }",
          "2377:     if (EVP_PKEY_encrypt_init(pkey_ctx) <= 0",
          "2381:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_GOST, ERR_R_INTERNAL_ERROR);",
          "2382:         goto err;",
          "",
          "[Removed Lines]",
          "2379:         || RAND_bytes(pms, pmslen) <= 0) {",
          "",
          "[Added Lines]",
          "2387:         || RAND_bytes(pms, (int)pmslen) <= 0) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2617:         || !EVP_SignUpdate(mctx, hdata, hdatalen)",
          "2618:         || (s->version == SSL3_VERSION",
          "2619:             && !EVP_MD_CTX_ctrl(mctx, EVP_CTRL_SSL3_MASTER_SECRET,",
          "2621:                                 s->session->master_key))",
          "2622:         || !EVP_SignFinal(mctx, sig, &u, pkey)) {",
          "2623:         SSLerr(SSL_F_TLS_CONSTRUCT_CLIENT_VERIFY, ERR_R_EVP_LIB);",
          "",
          "[Removed Lines]",
          "2620:                                 s->session->master_key_length,",
          "",
          "[Added Lines]",
          "2628:                                 (int)s->session->master_key_length,",
          "",
          "---------------"
        ],
        "ssl/statem/statem_dtls.c||ssl/statem/statem_dtls.c": [
          "File: ssl/statem/statem_dtls.c -> ssl/statem/statem_dtls.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "394: {",
          "398:         return s->max_cert_list;",
          "399:     return max_len;",
          "400: }",
          "",
          "[Removed Lines]",
          "393: static unsigned long dtls1_max_handshake_message_len(const SSL *s)",
          "395:     unsigned long max_len =",
          "396:         DTLS1_HM_HEADER_LENGTH + SSL3_RT_MAX_ENCRYPTED_LENGTH;",
          "397:     if (max_len < (unsigned long)s->max_cert_list)",
          "",
          "[Added Lines]",
          "393: static size_t dtls1_max_handshake_message_len(const SSL *s)",
          "395:     size_t max_len = DTLS1_HM_HEADER_LENGTH + SSL3_RT_MAX_ENCRYPTED_LENGTH;",
          "396:     if (max_len < s->max_cert_list)",
          "",
          "---------------"
        ],
        "ssl/statem/statem_lib.c||ssl/statem/statem_lib.c": [
          "File: ssl/statem/statem_lib.c -> ssl/statem/statem_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "155: MSG_PROCESS_RETURN tls_process_change_cipher_spec(SSL *s, PACKET *pkt)",
          "156: {",
          "157:     int al;",
          "160:     remain = PACKET_remaining(pkt);",
          "",
          "[Removed Lines]",
          "158:     long remain;",
          "",
          "[Added Lines]",
          "158:     size_t remain;",
          "",
          "---------------"
        ],
        "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c": [
          "File: ssl/statem/statem_srvr.c -> ssl/statem/statem_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "888: MSG_PROCESS_RETURN tls_process_client_hello(SSL *s, PACKET *pkt)",
          "889: {",
          "890:     int i, al = SSL_AD_INTERNAL_ERROR;",
          "892:     unsigned long id;",
          "893:     const SSL_CIPHER *c;",
          "894: #ifndef OPENSSL_NO_COMP",
          "",
          "[Removed Lines]",
          "891:     unsigned int j, complen = 0;",
          "",
          "[Added Lines]",
          "891:     unsigned int j;",
          "892:     size_t loop, complen = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1087:         if (SSL_get_options(s) & SSL_OP_COOKIE_EXCHANGE) {",
          "1088:             if (s->ctx->app_verify_cookie_cb != NULL) {",
          "1089:                 if (s->ctx->app_verify_cookie_cb(s, PACKET_data(&cookie),",
          "1092:                     al = SSL_AD_HANDSHAKE_FAILURE;",
          "1093:                     SSLerr(SSL_F_TLS_PROCESS_CLIENT_HELLO,",
          "1094:                            SSL_R_COOKIE_MISMATCH);",
          "",
          "[Removed Lines]",
          "1090:                                                  PACKET_remaining(&cookie)) ==",
          "1091:                     0) {",
          "",
          "[Added Lines]",
          "1091:                         (unsigned int)PACKET_remaining(&cookie)) == 0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1197:     }",
          "1199:     complen = PACKET_remaining(&compression);",
          "1202:             break;",
          "1203:     }",
          "1207:         al = SSL_AD_DECODE_ERROR;",
          "1208:         SSLerr(SSL_F_TLS_PROCESS_CLIENT_HELLO, SSL_R_NO_COMPRESSION_SPECIFIED);",
          "",
          "[Removed Lines]",
          "1200:     for (j = 0; j < complen; j++) {",
          "1201:         if (PACKET_data(&compression)[j] == 0)",
          "1205:     if (j >= complen) {",
          "",
          "[Added Lines]",
          "1200:     for (loop = 0; loop < complen; loop++) {",
          "1201:         if (PACKET_data(&compression)[loop] == 0)",
          "1205:     if (loop >= complen) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1576: #endif",
          "1577: #ifndef OPENSSL_NO_EC",
          "1578:     unsigned char *encodedPoint = NULL;",
          "1580:     int curve_id = 0;",
          "1581: #endif",
          "1582:     EVP_PKEY *pkey;",
          "",
          "[Removed Lines]",
          "1579:     int encodedlen = 0;",
          "",
          "[Added Lines]",
          "1579:     size_t encodedlen = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1910: int tls_construct_certificate_request(SSL *s, WPACKET *pkt)",
          "1911: {",
          "1913:     STACK_OF(X509_NAME) *sk = NULL;",
          "",
          "[Removed Lines]",
          "1912:     int i, nl;",
          "",
          "[Added Lines]",
          "1912:     int i;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1923:     if (SSL_USE_SIGALGS(s)) {",
          "1924:         const unsigned char *psigs;",
          "1926:         if (!WPACKET_start_sub_packet_u16(pkt)",
          "1927:                 || !tls12_copy_sigalgs(s, pkt, psigs, nl)",
          "1928:                 || !WPACKET_close(pkt)) {",
          "",
          "[Removed Lines]",
          "1925:         nl = tls12_get_psigalgs(s, &psigs);",
          "",
          "[Added Lines]",
          "1925:         size_t nl = tls12_get_psigalgs(s, &psigs);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2109:     if (decrypt_len < 0)",
          "2110:         goto err;",
          "",
          "[Removed Lines]",
          "2106:     decrypt_len = RSA_private_decrypt(PACKET_remaining(&enc_premaster),",
          "2107:                                       PACKET_data(&enc_premaster),",
          "2108:                                       rsa_decrypt, rsa, RSA_NO_PADDING);",
          "",
          "[Added Lines]",
          "2107:     decrypt_len = (int)RSA_private_decrypt((int)PACKET_remaining(&enc_premaster),",
          "2108:                                            PACKET_data(&enc_premaster),",
          "2109:                                            rsa_decrypt, rsa, RSA_NO_PADDING);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2386:     unsigned long alg_a;",
          "2387:     int Ttag, Tclass;",
          "2388:     long Tlen;",
          "2390:     const unsigned char *data;",
          "2391:     int ret = 0;",
          "",
          "[Removed Lines]",
          "2389:     long sess_key_len;",
          "",
          "[Added Lines]",
          "2390:     size_t sess_key_len;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2436:         SSLerr(SSL_F_TLS_PROCESS_CKE_GOST, ERR_R_INTERNAL_ERROR);",
          "2437:         goto err;",
          "2438:     }",
          "2439:     if (ASN1_get_object((const unsigned char **)&data, &Tlen, &Ttag,",
          "2441:         || Ttag != V_ASN1_SEQUENCE || Tclass != V_ASN1_UNIVERSAL) {",
          "2443:         SSLerr(SSL_F_TLS_PROCESS_CKE_GOST, SSL_R_DECRYPTION_FAILED);",
          "",
          "[Removed Lines]",
          "2440:                         &Tclass, sess_key_len) != V_ASN1_CONSTRUCTED",
          "",
          "[Added Lines]",
          "2442:                         &Tclass, (long)sess_key_len) != V_ASN1_CONSTRUCTED",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2740:     if (s->version == SSL3_VERSION",
          "2741:         && !EVP_MD_CTX_ctrl(mctx, EVP_CTRL_SSL3_MASTER_SECRET,",
          "2743:                             s->session->master_key)) {",
          "2744:         SSLerr(SSL_F_TLS_PROCESS_CERT_VERIFY, ERR_R_EVP_LIB);",
          "2745:         al = SSL_AD_INTERNAL_ERROR;",
          "",
          "[Removed Lines]",
          "2742:                             s->session->master_key_length,",
          "",
          "[Added Lines]",
          "2744:                             (int)s->session->master_key_length,",
          "",
          "---------------"
        ],
        "ssl/t1_enc.c||ssl/t1_enc.c": [
          "File: ssl/t1_enc.c -> ssl/t1_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:     pctx = EVP_PKEY_CTX_new_id(EVP_PKEY_TLS1_PRF, NULL);",
          "65:     if (pctx == NULL || EVP_PKEY_derive_init(pctx) <= 0",
          "66:         || EVP_PKEY_CTX_set_tls1_prf_md(pctx, md) <= 0",
          "68:         goto err;",
          "71:         goto err;",
          "73:         goto err;",
          "75:         goto err;",
          "77:         goto err;",
          "79:         goto err;",
          "81:     if (EVP_PKEY_derive(pctx, out, &olen) <= 0)",
          "",
          "[Removed Lines]",
          "67:         || EVP_PKEY_CTX_set1_tls1_prf_secret(pctx, sec, slen) <= 0)",
          "70:     if (EVP_PKEY_CTX_add1_tls1_prf_seed(pctx, seed1, seed1_len) <= 0)",
          "72:     if (EVP_PKEY_CTX_add1_tls1_prf_seed(pctx, seed2, seed2_len) <= 0)",
          "74:     if (EVP_PKEY_CTX_add1_tls1_prf_seed(pctx, seed3, seed3_len) <= 0)",
          "76:     if (EVP_PKEY_CTX_add1_tls1_prf_seed(pctx, seed4, seed4_len) <= 0)",
          "78:     if (EVP_PKEY_CTX_add1_tls1_prf_seed(pctx, seed5, seed5_len) <= 0)",
          "",
          "[Added Lines]",
          "67:         || EVP_PKEY_CTX_set1_tls1_prf_secret(pctx, sec, (int)slen) <= 0)",
          "70:     if (EVP_PKEY_CTX_add1_tls1_prf_seed(pctx, seed1, (int)seed1_len) <= 0)",
          "72:     if (EVP_PKEY_CTX_add1_tls1_prf_seed(pctx, seed2, (int)seed2_len) <= 0)",
          "74:     if (EVP_PKEY_CTX_add1_tls1_prf_seed(pctx, seed3, (int)seed3_len) <= 0)",
          "76:     if (EVP_PKEY_CTX_add1_tls1_prf_seed(pctx, seed4, (int)seed4_len) <= 0)",
          "78:     if (EVP_PKEY_CTX_add1_tls1_prf_seed(pctx, seed5, (int)seed5_len) <= 0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "250:     memcpy(mac_secret, ms, i);",
          "252:     if (!(EVP_CIPHER_flags(c) & EVP_CIPH_FLAG_AEAD_CIPHER)) {",
          "253:         mac_key = EVP_PKEY_new_mac_key(mac_type, NULL,",
          "255:         if (mac_key == NULL",
          "256:             || EVP_DigestSignInit(mac_ctx, NULL, m, NULL, mac_key) <= 0) {",
          "257:             EVP_PKEY_free(mac_key);",
          "",
          "[Removed Lines]",
          "254:                                        mac_secret, *mac_secret_size);",
          "",
          "[Added Lines]",
          "255:                                        mac_secret, (int)*mac_secret_size);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "272:     if (EVP_CIPHER_mode(c) == EVP_CIPH_GCM_MODE) {",
          "273:         if (!EVP_CipherInit_ex(dd, c, NULL, key, NULL, (which & SSL3_CC_WRITE))",
          "275:             SSLerr(SSL_F_TLS1_CHANGE_CIPHER_STATE, ERR_R_INTERNAL_ERROR);",
          "276:             goto err2;",
          "277:         }",
          "",
          "[Removed Lines]",
          "274:             || !EVP_CIPHER_CTX_ctrl(dd, EVP_CTRL_GCM_SET_IV_FIXED, k, iv)) {",
          "",
          "[Added Lines]",
          "275:             || !EVP_CIPHER_CTX_ctrl(dd, EVP_CTRL_GCM_SET_IV_FIXED, (int)k,",
          "276:                                     iv)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "285:         if (!EVP_CipherInit_ex(dd, c, NULL, NULL, NULL, (which & SSL3_CC_WRITE))",
          "286:             || !EVP_CIPHER_CTX_ctrl(dd, EVP_CTRL_AEAD_SET_IVLEN, 12, NULL)",
          "287:             || !EVP_CIPHER_CTX_ctrl(dd, EVP_CTRL_AEAD_SET_TAG, taglen, NULL)",
          "289:             || !EVP_CipherInit_ex(dd, NULL, NULL, key, NULL, -1)) {",
          "290:             SSLerr(SSL_F_TLS1_CHANGE_CIPHER_STATE, ERR_R_INTERNAL_ERROR);",
          "291:             goto err2;",
          "",
          "[Removed Lines]",
          "288:             || !EVP_CIPHER_CTX_ctrl(dd, EVP_CTRL_CCM_SET_IV_FIXED, k, iv)",
          "",
          "[Added Lines]",
          "290:             || !EVP_CIPHER_CTX_ctrl(dd, EVP_CTRL_CCM_SET_IV_FIXED, (int)k, iv)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "300:     if ((EVP_CIPHER_flags(c) & EVP_CIPH_FLAG_AEAD_CIPHER) && *mac_secret_size",
          "301:         && !EVP_CIPHER_CTX_ctrl(dd, EVP_CTRL_AEAD_SET_MAC_KEY,",
          "303:         SSLerr(SSL_F_TLS1_CHANGE_CIPHER_STATE, ERR_R_INTERNAL_ERROR);",
          "304:         goto err2;",
          "305:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "304:                                 (int)*mac_secret_size, mac_secret)) {",
          "",
          "---------------"
        ],
        "ssl/t1_lib.c||ssl/t1_lib.c": [
          "File: ssl/t1_lib.c -> ssl/t1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "246:     size_t i;",
          "247:     for (i = 0; i < OSSL_NELEM(nid_list); i++) {",
          "248:         if (nid_list[i].nid == nid)",
          "250:     }",
          "251:     return 0;",
          "252: }",
          "",
          "[Removed Lines]",
          "249:             return i + 1;",
          "",
          "[Added Lines]",
          "249:             return (int)(i + 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1153:     if (tls_use_ticket(s)) {",
          "1155:         if (!s->new_session && s->session && s->session->tlsext_tick)",
          "1156:             ticklen = s->session->tlsext_ticklen;",
          "1157:         else if (s->session && s->tlsext_session_ticket &&",
          "",
          "[Removed Lines]",
          "1154:         int ticklen;",
          "",
          "[Added Lines]",
          "1154:         size_t ticklen;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1663:     if (s->ctx->alpn_select_cb != NULL && s->s3->alpn_proposed != NULL) {",
          "1664:         int r = s->ctx->alpn_select_cb(s, &selected, &selected_len,",
          "1665:                                        s->s3->alpn_proposed,",
          "1667:                                        s->ctx->alpn_select_cb_arg);",
          "1669:         if (r == SSL_TLSEXT_ERR_OK) {",
          "",
          "[Removed Lines]",
          "1666:                                        s->s3->alpn_proposed_len,",
          "",
          "[Added Lines]",
          "1666:                                        (unsigned int)s->s3->alpn_proposed_len,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1826:         if (s->tlsext_debug_cb)",
          "1827:             s->tlsext_debug_cb(s, 0, type, PACKET_data(&extension),",
          "1829:                                s->tlsext_debug_arg);",
          "1831:         if (type == TLSEXT_TYPE_renegotiate) {",
          "",
          "[Removed Lines]",
          "1828:                                PACKET_remaining(&extension),",
          "",
          "[Added Lines]",
          "1828:                                (int)PACKET_remaining(&extension),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1977:         else if (type == TLSEXT_TYPE_session_ticket) {",
          "1978:             if (s->tls_session_ticket_ext_cb &&",
          "1979:                 !s->tls_session_ticket_ext_cb(s, PACKET_data(&extension),",
          "1981:                                               s->tls_session_ticket_ext_cb_arg))",
          "1982:             {",
          "",
          "[Removed Lines]",
          "1980:                                               PACKET_remaining(&extension),",
          "",
          "[Added Lines]",
          "1980:                                               (int)PACKET_remaining(&extension),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2039:                     }",
          "2041:                     id_data = PACKET_data(&responder_id);",
          "2042:                     id = d2i_OCSP_RESPID(NULL, &id_data,",
          "2044:                     if (id == NULL)",
          "2045:                         return 0;",
          "",
          "[Removed Lines]",
          "2043:                                          PACKET_remaining(&responder_id));",
          "",
          "[Added Lines]",
          "2044:                                          (int)PACKET_remaining(&responder_id));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2066:                                                X509_EXTENSION_free);",
          "2067:                     s->tlsext_ocsp_exts =",
          "2068:                         d2i_X509_EXTENSIONS(NULL, &ext_data,",
          "2070:                     if (s->tlsext_ocsp_exts == NULL",
          "2071:                         || ext_data != PACKET_end(&exts)) {",
          "2072:                         return 0;",
          "",
          "[Removed Lines]",
          "2069:                                             PACKET_remaining(&exts));",
          "",
          "[Added Lines]",
          "2070:                                             (int)PACKET_remaining(&exts));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2961:     SSL_SESSION *sess;",
          "2962:     unsigned char *sdec;",
          "2963:     const unsigned char *p;",
          "2965:     unsigned char tick_hmac[EVP_MAX_MD_SIZE];",
          "2966:     HMAC_CTX *hctx = NULL;",
          "2967:     EVP_CIPHER_CTX *ctx;",
          "",
          "[Removed Lines]",
          "2964:     int slen, mlen, renew_ticket = 0, ret = -1;",
          "",
          "[Added Lines]",
          "2965:     int slen, renew_ticket = 0, ret = -1, declen;",
          "2966:     size_t mlen;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3013:     mlen = HMAC_size(hctx);",
          "3015:         goto err;",
          "3016:     }",
          "3018:     if (eticklen <=",
          "3020:         ret = 2;",
          "3021:         goto err;",
          "3022:     }",
          "",
          "[Removed Lines]",
          "3014:     if (mlen < 0) {",
          "3019:         TLSEXT_KEYNAME_LENGTH + EVP_CIPHER_CTX_iv_length(ctx) + (size_t)mlen) {",
          "",
          "[Added Lines]",
          "3015:     if (mlen == 0) {",
          "3020:         TLSEXT_KEYNAME_LENGTH + EVP_CIPHER_CTX_iv_length(ctx) + mlen) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3036:     p = etick + 16 + EVP_CIPHER_CTX_iv_length(ctx);",
          "3037:     eticklen -= 16 + EVP_CIPHER_CTX_iv_length(ctx);",
          "3038:     sdec = OPENSSL_malloc(eticklen);",
          "3040:         EVP_CIPHER_CTX_free(ctx);",
          "3041:         OPENSSL_free(sdec);",
          "3042:         return -1;",
          "3043:     }",
          "3045:         EVP_CIPHER_CTX_free(ctx);",
          "3046:         OPENSSL_free(sdec);",
          "3047:         return 2;",
          "3048:     }",
          "3050:     EVP_CIPHER_CTX_free(ctx);",
          "3051:     ctx = NULL;",
          "3052:     p = sdec;",
          "",
          "[Removed Lines]",
          "3039:     if (sdec == NULL || EVP_DecryptUpdate(ctx, sdec, &slen, p, eticklen) <= 0) {",
          "3044:     if (EVP_DecryptFinal(ctx, sdec + slen, &mlen) <= 0) {",
          "3049:     slen += mlen;",
          "",
          "[Added Lines]",
          "3040:     if (sdec == NULL || EVP_DecryptUpdate(ctx, sdec, &slen, p,",
          "3041:                                           (int)eticklen) <= 0) {",
          "3046:     if (EVP_DecryptFinal(ctx, sdec + slen, &declen) <= 0) {",
          "3051:     slen += declen;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3327: }",
          "3333: {",
          "3334:     const unsigned char *ptmp, *atmp;",
          "3335:     size_t i, j, nmatch = 0;",
          "",
          "[Removed Lines]",
          "3330: static int tls12_shared_sigalgs(SSL *s, TLS_SIGALGS *shsig,",
          "3331:                                 const unsigned char *pref, size_t preflen,",
          "3332:                                 const unsigned char *allow, size_t allowlen)",
          "",
          "[Added Lines]",
          "3332: static size_t tls12_shared_sigalgs(SSL *s, TLS_SIGALGS *shsig,",
          "3333:                                    const unsigned char *pref, size_t preflen,",
          "3334:                                    const unsigned char *allow, size_t allowlen)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3491:                     unsigned char *rsig, unsigned char *rhash)",
          "3492: {",
          "3493:     const unsigned char *psig = s->s3->tmp.peer_sigalgs;",
          "3495:         return 0;",
          "3496:     if (idx >= 0) {",
          "3497:         idx <<= 1;",
          "",
          "[Removed Lines]",
          "3494:     if (psig == NULL)",
          "",
          "[Added Lines]",
          "3496:     size_t numsigalgs = s->s3->tmp.peer_sigalgslen / 2;",
          "3497:     if (psig == NULL || numsigalgs > INT_MAX)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3505:         tls1_lookup_sigalg(phash, psign, psignhash, psig);",
          "3506:     }",
          "3508: }",
          "3510: int SSL_get_shared_sigalgs(SSL *s, int idx,",
          "",
          "[Removed Lines]",
          "3507:     return s->s3->tmp.peer_sigalgslen / 2;",
          "",
          "[Added Lines]",
          "3510:     return (int)numsigalgs;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3512:                            unsigned char *rsig, unsigned char *rhash)",
          "3513: {",
          "3514:     TLS_SIGALGS *shsigalgs = s->cert->shared_sigalgs;",
          "3516:         return 0;",
          "3517:     shsigalgs += idx;",
          "3518:     if (phash)",
          "",
          "[Removed Lines]",
          "3515:     if (!shsigalgs || idx >= (int)s->cert->shared_sigalgslen)",
          "",
          "[Added Lines]",
          "3518:     if (!shsigalgs || idx >= (int)s->cert->shared_sigalgslen",
          "3519:             || s->cert->shared_sigalgslen > INT_MAX)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3526:     if (rhash)",
          "3529: }",
          "3531: #define MAX_SIGALGLEN   (TLSEXT_hash_num * TLSEXT_signature_num * 2)",
          "",
          "[Removed Lines]",
          "3528:     return s->cert->shared_sigalgslen;",
          "",
          "[Added Lines]",
          "3532:     return (int)s->cert->shared_sigalgslen;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "3699:         if (idx == -2) {",
          "3700:             cpk = c->key;",
          "3702:         } else",
          "3703:             cpk = c->pkeys + idx;",
          "3704:         pvalid = s->s3->tmp.valid_flags + idx;",
          "",
          "[Removed Lines]",
          "3701:             idx = cpk - c->pkeys;",
          "",
          "[Added Lines]",
          "3705:             idx = (int)(cpk - c->pkeys);",
          "",
          "---------------"
        ],
        "ssl/t1_reneg.c||ssl/t1_reneg.c": [
          "File: ssl/t1_reneg.c -> ssl/t1_reneg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "72: int ssl_parse_serverhello_renegotiate_ext(SSL *s, PACKET *pkt, int *al)",
          "73: {",
          "75:         + s->s3->previous_server_finished_len;",
          "77:     const unsigned char *data;",
          "",
          "[Removed Lines]",
          "74:     unsigned int expected_len = s->s3->previous_client_finished_len",
          "76:     unsigned int ilen;",
          "",
          "[Added Lines]",
          "74:     size_t expected_len = s->s3->previous_client_finished_len",
          "76:     size_t ilen;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:     OPENSSL_assert(!expected_len || s->s3->previous_server_finished_len);",
          "85:         SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT,",
          "86:                SSL_R_RENEGOTIATION_ENCODING_ERR);",
          "",
          "[Removed Lines]",
          "84:     if (!PACKET_get_1(pkt, &ilen)) {",
          "",
          "[Added Lines]",
          "84:     if (!PACKET_get_1_len(pkt, &ilen)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1053a6e2281d81cd5d04d2d90da2c4905c9c3561",
      "candidate_info": {
        "commit_hash": "1053a6e2281d81cd5d04d2d90da2c4905c9c3561",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/1053a6e2281d81cd5d04d2d90da2c4905c9c3561",
        "files": [
          "include/openssl/ssl.h",
          "ssl/ssl_ciph.c",
          "ssl/ssl_err.c",
          "ssl/ssl_locl.h",
          "ssl/ssl_sess.c",
          "ssl/statem/extensions.c",
          "ssl/statem/extensions_clnt.c",
          "ssl/statem/extensions_srvr.c",
          "ssl/statem/statem_locl.h",
          "ssl/t1_lib.c"
        ],
        "message": "Implement Server side of PSK extension parsing\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2259)",
        "before_after_code_files": [
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "ssl/ssl_ciph.c||ssl/ssl_ciph.c",
          "ssl/ssl_err.c||ssl/ssl_err.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h",
          "ssl/ssl_sess.c||ssl/ssl_sess.c",
          "ssl/statem/extensions.c||ssl/statem/extensions.c",
          "ssl/statem/extensions_clnt.c||ssl/statem/extensions_clnt.c",
          "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c",
          "ssl/statem/statem_locl.h||ssl/statem/statem_locl.h",
          "ssl/t1_lib.c||ssl/t1_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/t1_lib.c||ssl/t1_lib.c"
          ],
          "candidate": [
            "ssl/t1_lib.c||ssl/t1_lib.c"
          ]
        }
      },
      "candidate_diff": {
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2324: # define SSL_F_TLS_GET_MESSAGE_HEADER                     387",
          "2325: # define SSL_F_TLS_PARSE_CLIENTHELLO_TLSEXT               449",
          "2326: # define SSL_F_TLS_PARSE_CTOS_KEY_SHARE                   463",
          "2327: # define SSL_F_TLS_PARSE_CTOS_RENEGOTIATE                 464",
          "2328: # define SSL_F_TLS_PARSE_CTOS_USE_SRTP                    465",
          "2329: # define SSL_F_TLS_PARSE_STOC_KEY_SHARE                   445",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2327: # define SSL_F_TLS_PARSE_CTOS_PSK                         505",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2361: # define SSL_F_TLS_PROCESS_SKE_ECDHE                      420",
          "2362: # define SSL_F_TLS_PROCESS_SKE_PSK_PREAMBLE               421",
          "2363: # define SSL_F_TLS_PROCESS_SKE_SRP                        422",
          "2364: # define SSL_F_TLS_SCAN_CLIENTHELLO_TLSEXT                450",
          "2365: # define SSL_F_TLS_SETUP_HANDSHAKE                        508",
          "2366: # define SSL_F_USE_CERTIFICATE_CHAIN_FILE                 220",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2365: # define SSL_F_TLS_PSK_DO_BINDER                          506",
          "",
          "---------------"
        ],
        "ssl/ssl_ciph.c||ssl/ssl_ciph.c": [
          "File: ssl/ssl_ciph.c -> ssl/ssl_ciph.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2019:     return 1;",
          "2020: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2022: const EVP_MD *ssl_cipher_get_handshake_md(int cipher_id)",
          "2023: {",
          "2024:     const SSL_CIPHER *cipher = ssl3_get_cipher_by_id(cipher_id);",
          "2025:     if (cipher == NULL) {",
          "2027:         return NULL;",
          "2028:     }",
          "2030:     return ssl_md(cipher->algorithm2);",
          "2031: }",
          "",
          "---------------"
        ],
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "370:     {ERR_FUNC(SSL_F_TLS_PARSE_CLIENTHELLO_TLSEXT),",
          "371:      \"tls_parse_clienthello_tlsext\"},",
          "372:     {ERR_FUNC(SSL_F_TLS_PARSE_CTOS_KEY_SHARE), \"tls_parse_ctos_key_share\"},",
          "373:     {ERR_FUNC(SSL_F_TLS_PARSE_CTOS_RENEGOTIATE),",
          "374:      \"tls_parse_ctos_renegotiate\"},",
          "375:     {ERR_FUNC(SSL_F_TLS_PARSE_CTOS_USE_SRTP), \"tls_parse_ctos_use_srtp\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "373:     {ERR_FUNC(SSL_F_TLS_PARSE_CTOS_PSK), \"tls_parse_ctos_psk\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "423:     {ERR_FUNC(SSL_F_TLS_PROCESS_SKE_PSK_PREAMBLE),",
          "424:      \"tls_process_ske_psk_preamble\"},",
          "425:     {ERR_FUNC(SSL_F_TLS_PROCESS_SKE_SRP), \"tls_process_ske_srp\"},",
          "426:     {ERR_FUNC(SSL_F_TLS_SCAN_CLIENTHELLO_TLSEXT),",
          "427:      \"tls_scan_clienthello_tlsext\"},",
          "428:     {ERR_FUNC(SSL_F_TLS_SETUP_HANDSHAKE), \"tls_setup_handshake\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "427:     {ERR_FUNC(SSL_F_TLS_PSK_DO_BINDER), \"tls_psk_do_binder\"},",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1956: __owur int ssl_cipher_get_cert_index(const SSL_CIPHER *c);",
          "1957: __owur const SSL_CIPHER *ssl_get_cipher_by_char(SSL *ssl,",
          "1958:                                                 const unsigned char *ptr);",
          "1959: __owur int ssl_cert_set0_chain(SSL *s, SSL_CTX *ctx, STACK_OF(X509) *chain);",
          "1960: __owur int ssl_cert_set1_chain(SSL *s, SSL_CTX *ctx, STACK_OF(X509) *chain);",
          "1961: __owur int ssl_cert_add0_chain_cert(SSL *s, SSL_CTX *ctx, X509 *x);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1959: __owur const EVP_MD *ssl_cipher_get_handshake_md(int cipher_id);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2193: __owur int tls1_set_server_sigalgs(SSL *s);",
          "2194: __owur int tls_get_ticket_from_client(SSL *s, CLIENTHELLO_MSG *hello,",
          "2195:                                       SSL_SESSION **ret);",
          "2196: __owur int tls_use_ticket(SSL *s);",
          "2198: __owur int tls12_get_sigandhash(SSL *s, WPACKET *pkt, const EVP_PKEY *pk,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2199: #define TICKET_FATAL_ERR_MALLOC     -2",
          "2200: #define TICKET_FATAL_ERR_OTHER      -1",
          "2201: #define TICKET_NO_DECRYPT            2",
          "2202: #define TICKET_SUCCESS               3",
          "2203: #define TICKET_SUCCESS_RENEW         4",
          "2204: __owur int tls_decrypt_ticket(SSL *s, const unsigned char *etick,",
          "2205:                               size_t eticklen, const unsigned char *sess_id,",
          "2206:                               size_t sesslen, SSL_SESSION **psess);",
          "",
          "---------------"
        ],
        "ssl/ssl_sess.c||ssl/ssl_sess.c": [
          "File: ssl/ssl_sess.c -> ssl/ssl_sess.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: #include <openssl/rand.h>",
          "40: #include <openssl/engine.h>",
          "41: #include \"ssl_locl.h\"",
          "43: static void SSL_SESSION_list_remove(SSL_CTX *ctx, SSL_SESSION *s);",
          "44: static void SSL_SESSION_list_add(SSL_CTX *ctx, SSL_SESSION *s);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: #include \"statem/statem_locl.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "460:     SSL_SESSION *ret = NULL;",
          "461:     int fatal = 0;",
          "463:     int r;",
          "483:     }",
          "485:     if (try_session_cache &&",
          "",
          "[Removed Lines]",
          "462:     int try_session_cache = 1;",
          "465:     if (hello->session_id_len == 0)",
          "466:         try_session_cache = 0;",
          "469:     r = tls_get_ticket_from_client(s, hello, &ret);",
          "470:     switch (r) {",
          "472:         fatal = 1;",
          "473:         goto err;",
          "479:         try_session_cache = 0;",
          "480:         break;",
          "481:     default:",
          "482:         abort();",
          "",
          "[Added Lines]",
          "464:     int try_session_cache = 0;",
          "467:     if (SSL_IS_TLS13(s)) {",
          "468:         int al;",
          "470:         if (!tls_parse_extension(s, TLSEXT_IDX_psk, EXT_CLIENT_HELLO,",
          "471:                                  hello->pre_proc_exts, NULL, 0, &al))",
          "472:             return -1;",
          "474:         ret = s->session;",
          "475:     } else {",
          "477:         r = tls_get_ticket_from_client(s, hello, &ret);",
          "478:         switch (r) {",
          "480:             fatal = 1;",
          "481:             goto err;",
          "484:             try_session_cache = 1;",
          "488:             break;",
          "489:         default:",
          "490:             abort();",
          "491:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "628:         goto err;",
          "629:     }",
          "635:     s->verify_result = s->session->verify_result;",
          "636:     return 1;",
          "638:  err:",
          "",
          "[Removed Lines]",
          "631:     s->session_ctx->stats.sess_hit++;",
          "633:     SSL_SESSION_free(s->session);",
          "634:     s->session = ret;",
          "",
          "[Added Lines]",
          "640:     if (!SSL_IS_TLS13(s)) {",
          "642:         SSL_SESSION_free(s->session);",
          "643:         s->session = ret;",
          "644:     }",
          "646:     s->session_ctx->stats.sess_hit++;",
          "",
          "---------------"
        ],
        "ssl/statem/extensions.c||ssl/statem/extensions.c": [
          "File: ssl/statem/extensions.c -> ssl/statem/extensions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "279:         TLSEXT_TYPE_psk,",
          "280:         EXT_CLIENT_HELLO | EXT_TLS1_3_SERVER_HELLO | EXT_TLS_IMPLEMENTATION_ONLY",
          "281:         | EXT_TLS1_3_ONLY,",
          "283:     }",
          "284: };",
          "",
          "[Removed Lines]",
          "282:         NULL, NULL, tls_parse_stoc_psk, NULL, tls_construct_ctos_psk, NULL",
          "",
          "[Added Lines]",
          "282:         NULL, tls_parse_ctos_psk, tls_parse_stoc_psk, NULL,",
          "283:         tls_construct_ctos_psk, NULL",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1003:     return 1;",
          "1004: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1007: int tls_psk_do_binder(SSL *s, const EVP_MD *md, const unsigned char *msgstart,",
          "1008:                       size_t binderoffset, const unsigned char *binderin,",
          "1009:                       unsigned char *binderout,",
          "1010:                       SSL_SESSION *sess, int sign)",
          "1011: {",
          "1012:     EVP_PKEY *mackey = NULL;",
          "1013:     EVP_MD_CTX *mctx = NULL;",
          "1014:     unsigned char hash[EVP_MAX_MD_SIZE], binderkey[EVP_MAX_MD_SIZE];",
          "1015:     unsigned char finishedkey[EVP_MAX_MD_SIZE], tmpbinder[EVP_MAX_MD_SIZE];",
          "1016:     const char resumption_label[] = \"resumption psk binder key\";",
          "1017:     size_t hashsize = EVP_MD_size(md), bindersize;",
          "1018:     int ret = -1;",
          "1021:     if (!tls13_generate_secret(s, md, NULL, sess->master_key,",
          "1022:                                sess->master_key_length,",
          "1023:                                (unsigned char *)&s->early_secret)) {",
          "1024:         SSLerr(SSL_F_TLS_PSK_DO_BINDER, ERR_R_INTERNAL_ERROR);",
          "1025:         goto err;",
          "1026:     }",
          "1032:     mctx = EVP_MD_CTX_new();",
          "1033:     if (mctx == NULL",
          "1034:             || EVP_DigestInit_ex(mctx, md, NULL) <= 0",
          "1035:             || EVP_DigestFinal_ex(mctx, hash, NULL) <= 0) {",
          "1036:         SSLerr(SSL_F_TLS_PSK_DO_BINDER, ERR_R_INTERNAL_ERROR);",
          "1037:         goto err;",
          "1038:     }",
          "1041:     if (!tls13_hkdf_expand(s, md, s->early_secret,",
          "1042:                            (unsigned char *)resumption_label,",
          "1043:                            sizeof(resumption_label) - 1, hash, binderkey,",
          "1044:                            hashsize)) {",
          "1045:         SSLerr(SSL_F_TLS_PSK_DO_BINDER, ERR_R_INTERNAL_ERROR);",
          "1046:         goto err;",
          "1047:     }",
          "1050:     if (!tls13_derive_finishedkey(s, md, binderkey, finishedkey, hashsize)) {",
          "1051:         SSLerr(SSL_F_TLS_PSK_DO_BINDER, ERR_R_INTERNAL_ERROR);",
          "1052:         goto err;",
          "1053:     }",
          "1060:     if (EVP_DigestInit_ex(mctx, md, NULL) <= 0",
          "1061:             || EVP_DigestUpdate(mctx, msgstart, binderoffset) <= 0",
          "1062:             || EVP_DigestFinal_ex(mctx, hash, NULL) <= 0) {",
          "1063:         SSLerr(SSL_F_TLS_PSK_DO_BINDER, ERR_R_INTERNAL_ERROR);",
          "1064:         goto err;",
          "1065:     }",
          "1067:     mackey = EVP_PKEY_new_mac_key(EVP_PKEY_HMAC, NULL, finishedkey, hashsize);",
          "1068:     if (mackey == NULL) {",
          "1069:         SSLerr(SSL_F_TLS_PSK_DO_BINDER, ERR_R_INTERNAL_ERROR);",
          "1070:         goto err;",
          "1071:     }",
          "1073:     if (!sign)",
          "1074:         binderout = tmpbinder;",
          "1076:     bindersize = hashsize;",
          "1077:     if (EVP_DigestSignInit(mctx, NULL, md, NULL, mackey) <= 0",
          "1078:             || EVP_DigestSignUpdate(mctx, hash, hashsize) <= 0",
          "1079:             || EVP_DigestSignFinal(mctx, binderout, &bindersize) <= 0",
          "1080:             || bindersize != hashsize) {",
          "1081:         SSLerr(SSL_F_TLS_PSK_DO_BINDER, ERR_R_INTERNAL_ERROR);",
          "1082:         goto err;",
          "1083:     }",
          "1085:     if (sign) {",
          "1086:         ret = 1;",
          "1087:     } else {",
          "1089:         ret = (CRYPTO_memcmp(binderin, binderout, hashsize) == 0);",
          "1090:     }",
          "1092:  err:",
          "1093:     OPENSSL_cleanse(binderkey, sizeof(binderkey));",
          "1094:     OPENSSL_cleanse(finishedkey, sizeof(finishedkey));",
          "1095:     EVP_PKEY_free(mackey);",
          "1096:     EVP_MD_CTX_free(mctx);",
          "1098:     return ret;",
          "1099: }",
          "",
          "---------------"
        ],
        "ssl/statem/extensions_clnt.c||ssl/statem/extensions_clnt.c": [
          "File: ssl/statem/extensions_clnt.c -> ssl/statem/extensions_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "663:                            int *al)",
          "664: {",
          "665: #ifndef OPENSSL_NO_TLS1_3",
          "667:     uint32_t now, ages, agems;",
          "669:     unsigned char *binder = NULL, *msgstart = NULL;",
          "671:     const EVP_MD *md;",
          "676:     int ret = 0;",
          "678:     s->session->ext.tick_identity = TLSEXT_PSK_BAD_IDENTITY;",
          "",
          "[Removed Lines]",
          "666:     const SSL_CIPHER *cipher;",
          "668:     size_t hashsize, bindersize, binderoffset, msglen;",
          "670:     EVP_PKEY *mackey = NULL;",
          "672:     EVP_MD_CTX *mctx = NULL;",
          "673:     unsigned char hash[EVP_MAX_MD_SIZE], binderkey[EVP_MAX_MD_SIZE];",
          "674:     unsigned char finishedkey[EVP_MAX_MD_SIZE];",
          "675:     const char resumption_label[] = \"resumption psk binder key\";",
          "",
          "[Added Lines]",
          "667:     size_t hashsize, binderoffset, msglen;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "720:     agems += s->session->ext.tick_age_add;",
          "725:         return 1;",
          "726:     }",
          "733:     hashsize = EVP_MD_size(md);",
          "",
          "[Removed Lines]",
          "722:     cipher = ssl3_get_cipher_by_id(s->session->cipher_id);",
          "723:     if (cipher == NULL) {",
          "727:     md = ssl_md(cipher->algorithm2);",
          "728:     if (md == NULL) {",
          "730:         SSLerr(SSL_F_TLS_CONSTRUCT_CTOS_PSK, ERR_R_INTERNAL_ERROR);",
          "731:         return 0;",
          "732:     }",
          "",
          "[Added Lines]",
          "716:     md = ssl_cipher_get_handshake_md(s->session->cipher_id);",
          "717:     if (md == NULL) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "758:     msgstart = WPACKET_get_curr(pkt) - msglen;",
          "814:         SSLerr(SSL_F_TLS_CONSTRUCT_CTOS_PSK, ERR_R_INTERNAL_ERROR);",
          "815:         goto err;",
          "816:     }",
          "",
          "[Removed Lines]",
          "761:     if (!tls13_generate_secret(s, md, NULL, s->session->master_key,",
          "762:                                s->session->master_key_length,",
          "763:                                (unsigned char *)&s->early_secret)) {",
          "764:         SSLerr(SSL_F_TLS_CONSTRUCT_CTOS_PSK, ERR_R_INTERNAL_ERROR);",
          "765:         goto err;",
          "766:     }",
          "772:     mctx = EVP_MD_CTX_new();",
          "773:     if (mctx == NULL",
          "774:             || EVP_DigestInit_ex(mctx, md, NULL) <= 0",
          "775:             || EVP_DigestFinal_ex(mctx, hash, NULL) <= 0) {",
          "776:         SSLerr(SSL_F_TLS_CONSTRUCT_CTOS_PSK, ERR_R_INTERNAL_ERROR);",
          "777:         goto err;",
          "778:     }",
          "781:     if (!tls13_hkdf_expand(s, md, s->early_secret,",
          "782:                            (unsigned char *)resumption_label,",
          "783:                            sizeof(resumption_label) - 1, hash, binderkey,",
          "784:                            hashsize)) {",
          "785:         SSLerr(SSL_F_TLS_CONSTRUCT_CTOS_PSK, ERR_R_INTERNAL_ERROR);",
          "786:         goto err;",
          "787:     }",
          "790:     if (!tls13_derive_finishedkey(s, md, binderkey, finishedkey, hashsize)) {",
          "791:         SSLerr(SSL_F_TLS_CONSTRUCT_CTOS_PSK, ERR_R_INTERNAL_ERROR);",
          "792:         goto err;",
          "793:     }",
          "800:     if (EVP_DigestInit_ex(mctx, md, NULL) <= 0",
          "801:             || EVP_DigestUpdate(mctx, msgstart, binderoffset) <= 0",
          "802:             || EVP_DigestFinal_ex(mctx, hash, NULL) <= 0) {",
          "803:         SSLerr(SSL_F_TLS_CONSTRUCT_CTOS_PSK, ERR_R_INTERNAL_ERROR);",
          "804:         goto err;",
          "805:     }",
          "807:     mackey = EVP_PKEY_new_mac_key(EVP_PKEY_HMAC, NULL, finishedkey, hashsize);",
          "808:     bindersize = hashsize;",
          "809:     if (binderkey == NULL",
          "810:             || EVP_DigestSignInit(mctx, NULL, md, NULL, mackey) <= 0",
          "811:             || EVP_DigestSignUpdate(mctx, hash, hashsize) <= 0",
          "812:             || EVP_DigestSignFinal(mctx, binder, &bindersize) <= 0",
          "813:             || bindersize != hashsize) {",
          "",
          "[Added Lines]",
          "749:     if (tls_psk_do_binder(s, md, msgstart, binderoffset, NULL, binder,",
          "750:                           s->session, 1) != 1) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "820:     ret = 1;",
          "821:  err:",
          "827:     return ret;",
          "828: #else",
          "829:     return 1;",
          "",
          "[Removed Lines]",
          "822:     OPENSSL_cleanse(binderkey, sizeof(binderkey));",
          "823:     OPENSSL_cleanse(finishedkey, sizeof(finishedkey));",
          "824:     EVP_PKEY_free(mackey);",
          "825:     EVP_MD_CTX_free(mctx);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c": [
          "File: ssl/statem/extensions_srvr.c -> ssl/statem/extensions_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "655:         return 0;",
          "656:     }",
          "663:         return 0;",
          "664:     }",
          "",
          "[Removed Lines]",
          "658:     if (!s->hit",
          "659:             && !PACKET_memdup(&supported_groups_list,",
          "660:                               &s->session->ext.supportedgroups,",
          "661:                               &s->session->ext.supportedgroups_len)) {",
          "",
          "[Added Lines]",
          "658:     if (!PACKET_memdup(&supported_groups_list,",
          "659:                        &s->session->ext.supportedgroups,",
          "660:                        &s->session->ext.supportedgroups_len)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "680:     return 1;",
          "681: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "682: int tls_parse_ctos_psk(SSL *s, PACKET *pkt, X509 *x, size_t chainidx, int *al)",
          "683: {",
          "684:     PACKET identities, binders, binder;",
          "685:     size_t binderoffset, hashsize;",
          "686:     SSL_SESSION *sess = NULL;",
          "687:     unsigned int id, i;",
          "688:     const EVP_MD *md = NULL;",
          "690:     if (!PACKET_get_length_prefixed_2(pkt, &identities)) {",
          "692:         return 0;",
          "693:     }",
          "695:     for (id = 0; PACKET_remaining(&identities) != 0; id++) {",
          "696:         PACKET identity;",
          "697:         unsigned long ticket_age;",
          "698:         int ret;",
          "700:         if (!PACKET_get_length_prefixed_2(&identities, &identity)",
          "701:                 || !PACKET_get_net_4(&identities, &ticket_age)) {",
          "703:             return 0;",
          "704:         }",
          "706:         ret = tls_decrypt_ticket(s, PACKET_data(&identity),",
          "707:                                  PACKET_remaining(&identity), NULL, 0, &sess);",
          "708:         if (ret == TICKET_FATAL_ERR_MALLOC || ret == TICKET_FATAL_ERR_OTHER) {",
          "710:             return 0;",
          "711:         }",
          "712:         if (ret == TICKET_NO_DECRYPT)",
          "713:             continue;",
          "715:         md = ssl_cipher_get_handshake_md(sess->cipher_id);",
          "716:         if (md == NULL) {",
          "721:             SSL_SESSION_free(sess);",
          "722:             sess = NULL;",
          "723:             continue;",
          "724:         }",
          "731:         break;",
          "732:     }",
          "734:     if (sess == NULL)",
          "735:         return 1;",
          "737:     binderoffset = PACKET_data(pkt) - (const unsigned char *)s->init_buf->data;",
          "739:     hashsize = EVP_MD_size(md);",
          "741:     if (!PACKET_get_length_prefixed_2(pkt, &binders)) {",
          "743:         goto err;",
          "744:     }",
          "746:     for (i = 0; i <= id; i++) {",
          "747:         if (!PACKET_get_length_prefixed_1(&binders, &binder)) {",
          "749:             goto err;",
          "750:         }",
          "751:     }",
          "753:     if (PACKET_remaining(&binder) != hashsize",
          "754:             || tls_psk_do_binder(s, md,",
          "755:                                  (const unsigned char *)s->init_buf->data,",
          "756:                                  binderoffset, PACKET_data(&binder), NULL,",
          "757:                                  sess, 0) != 1) {",
          "759:         SSLerr(SSL_F_TLS_PARSE_CTOS_PSK, ERR_R_INTERNAL_ERROR);",
          "760:         goto err;",
          "761:     }",
          "763:     sess->ext.tick_identity = id;",
          "764:     SSL_SESSION_free(s->session);",
          "765:     s->session = sess;",
          "767:     return 1;",
          "768: err:",
          "769:     return 0;",
          "770: }",
          "",
          "---------------"
        ],
        "ssl/statem/statem_locl.h||ssl/statem/statem_locl.h": [
          "File: ssl/statem/statem_locl.h -> ssl/statem/statem_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "166: __owur int tls_construct_extensions(SSL *s, WPACKET *pkt, unsigned int context,",
          "167:                                     X509 *x, size_t chainidx, int *al);",
          "170: int tls_parse_ctos_renegotiate(SSL *s, PACKET *pkt, X509 *x, size_t chainidx,",
          "171:                                int *al);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169: __owur int tls_psk_do_binder(SSL *s, const EVP_MD *md,",
          "170:                              const unsigned char *msgstart,",
          "171:                              size_t binderoffset, const unsigned char *binderin,",
          "172:                              unsigned char *binderout,",
          "173:                              SSL_SESSION *sess, int sign);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "202: int tls_parse_ctos_ems(SSL *s, PACKET *pkt, X509 *x, size_t chainidx, int *al);",
          "203: int tls_parse_ctos_psk_kex_modes(SSL *s, PACKET *pkt, X509 *x, size_t chainidx,",
          "204:                                  int *al);",
          "206: int tls_construct_stoc_renegotiate(SSL *s, WPACKET *pkt, X509 *x,",
          "207:                                    size_t chainidx, int *al);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "211: int tls_parse_ctos_psk(SSL *s, PACKET *pkt, X509 *x, size_t chainidx, int *al);",
          "",
          "---------------"
        ],
        "ssl/t1_lib.c||ssl/t1_lib.c": [
          "File: ssl/t1_lib.c -> ssl/t1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #include \"ssl_locl.h\"",
          "21: #include <openssl/ct.h>",
          "27: SSL3_ENC_METHOD const TLSv1_enc_data = {",
          "28:     tls1_enc,",
          "29:     tls1_mac,",
          "",
          "[Removed Lines]",
          "23: static int tls_decrypt_ticket(SSL *s, const unsigned char *tick, size_t ticklen,",
          "24:                               const unsigned char *sess_id, size_t sesslen,",
          "25:                               SSL_SESSION **psess);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1136: {",
          "1137:     SSL_SESSION *sess;",
          "1138:     unsigned char *sdec;",
          "1139:     const unsigned char *p;",
          "1141:     size_t mlen;",
          "1142:     unsigned char tick_hmac[EVP_MAX_MD_SIZE];",
          "1143:     HMAC_CTX *hctx = NULL;",
          "",
          "[Removed Lines]",
          "1133: static int tls_decrypt_ticket(SSL *s, const unsigned char *etick,",
          "1134:                               size_t eticklen, const unsigned char *sess_id,",
          "1135:                               size_t sesslen, SSL_SESSION **psess)",
          "1140:     int slen, renew_ticket = 0, ret = -1, declen;",
          "",
          "[Added Lines]",
          "1131: #define TICKET_FATAL_ERR_MALLOC     -2",
          "1132: #define TICKET_FATAL_ERR_OTHER      -1",
          "1133: #define TICKET_NO_DECRYPT            2",
          "1134: #define TICKET_SUCCESS               3",
          "1135: #define TICKET_SUCCESS_RENEW         4",
          "1136: int tls_decrypt_ticket(SSL *s, const unsigned char *etick, size_t eticklen,",
          "1137:                        const unsigned char *sess_id, size_t sesslen,",
          "1138:                        SSL_SESSION **psess)",
          "1143:     int slen, renew_ticket = 0, ret = TICKET_FATAL_ERR_OTHER, declen;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1148:     hctx = HMAC_CTX_new();",
          "1149:     if (hctx == NULL)",
          "1151:     ctx = EVP_CIPHER_CTX_new();",
          "1152:     if (ctx == NULL) {",
          "1154:         goto err;",
          "1155:     }",
          "1156:     if (tctx->ext.ticket_key_cb) {",
          "",
          "[Removed Lines]",
          "1150:         return -2;",
          "1153:         ret = -2;",
          "",
          "[Added Lines]",
          "1153:         return TICKET_FATAL_ERR_MALLOC;",
          "1156:         ret = TICKET_FATAL_ERR_MALLOC;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1160:         if (rv < 0)",
          "1161:             goto err;",
          "1162:         if (rv == 0) {",
          "1164:             goto err;",
          "1165:         }",
          "1166:         if (rv == 2)",
          "",
          "[Removed Lines]",
          "1163:             ret = 2;",
          "",
          "[Added Lines]",
          "1166:             ret = TICKET_NO_DECRYPT;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1170:         if (memcmp(etick, tctx->ext.tick_key_name,",
          "1171:                    sizeof(tctx->ext.tick_key_name)) != 0) {",
          "1173:             goto err;",
          "1174:         }",
          "1175:         if (HMAC_Init_ex(hctx, tctx->ext.tick_hmac_key,",
          "",
          "[Removed Lines]",
          "1172:             ret = 2;",
          "",
          "[Added Lines]",
          "1175:             ret = TICKET_NO_DECRYPT;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1177:                          EVP_sha256(), NULL) <= 0",
          "1178:             || EVP_DecryptInit_ex(ctx, EVP_aes_256_cbc(), NULL,",
          "1179:                                   tctx->ext.tick_aes_key,",
          "1182:             goto err;",
          "1183:         }",
          "1184:     }",
          "",
          "[Removed Lines]",
          "1180:                                   etick + sizeof(tctx->ext.tick_key_name)) <=",
          "1181:             0) {",
          "",
          "[Added Lines]",
          "1183:                                   etick",
          "1184:                                   + sizeof(tctx->ext.tick_key_name)) <= 0) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1194:     if (eticklen <=",
          "1195:         TLSEXT_KEYNAME_LENGTH + EVP_CIPHER_CTX_iv_length(ctx) + mlen) {",
          "1197:         goto err;",
          "1198:     }",
          "1199:     eticklen -= mlen;",
          "",
          "[Removed Lines]",
          "1196:         ret = 2;",
          "",
          "[Added Lines]",
          "1199:         ret = TICKET_NO_DECRYPT;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1205:     HMAC_CTX_free(hctx);",
          "1206:     if (CRYPTO_memcmp(tick_hmac, etick + eticklen, mlen)) {",
          "1207:         EVP_CIPHER_CTX_free(ctx);",
          "1209:     }",
          "",
          "[Removed Lines]",
          "1208:         return 2;",
          "",
          "[Added Lines]",
          "1211:         return TICKET_NO_DECRYPT;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1216:                                           (int)eticklen) <= 0) {",
          "1217:         EVP_CIPHER_CTX_free(ctx);",
          "1218:         OPENSSL_free(sdec);",
          "1220:     }",
          "1221:     if (EVP_DecryptFinal(ctx, sdec + slen, &declen) <= 0) {",
          "1222:         EVP_CIPHER_CTX_free(ctx);",
          "1223:         OPENSSL_free(sdec);",
          "1225:     }",
          "1226:     slen += declen;",
          "1227:     EVP_CIPHER_CTX_free(ctx);",
          "",
          "[Removed Lines]",
          "1219:         return -1;",
          "1224:         return 2;",
          "",
          "[Added Lines]",
          "1222:         return TICKET_FATAL_ERR_OTHER;",
          "1227:         return TICKET_NO_DECRYPT;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1242:         sess->session_id_length = sesslen;",
          "1244:         if (renew_ticket)",
          "1246:         else",
          "1248:     }",
          "1249:     ERR_clear_error();",
          "1254:  err:",
          "1255:     EVP_CIPHER_CTX_free(ctx);",
          "1256:     HMAC_CTX_free(hctx);",
          "",
          "[Removed Lines]",
          "1245:             return 4;",
          "1247:             return 3;",
          "1253:     return 2;",
          "",
          "[Added Lines]",
          "1248:             return TICKET_SUCCESS_RENEW;",
          "1250:             return TICKET_SUCCESS;",
          "1256:     return TICKET_NO_DECRYPT;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d736bc1a7d45744300b2c81f7296b0d1e550ae0d",
      "candidate_info": {
        "commit_hash": "d736bc1a7d45744300b2c81f7296b0d1e550ae0d",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/d736bc1a7d45744300b2c81f7296b0d1e550ae0d",
        "files": [
          "ssl/ssl_locl.h",
          "ssl/statem/statem_clnt.c",
          "ssl/statem/statem_dtls.c",
          "ssl/t1_lib.c"
        ],
        "message": "Update misc function params in libssl for size_t\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "ssl/ssl_locl.h||ssl/ssl_locl.h",
          "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c",
          "ssl/statem/statem_dtls.c||ssl/statem/statem_dtls.c",
          "ssl/t1_lib.c||ssl/t1_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/t1_lib.c||ssl/t1_lib.c"
          ],
          "candidate": [
            "ssl/t1_lib.c||ssl/t1_lib.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1934: __owur int dtls1_do_write(SSL *s, int type);",
          "1935: void dtls1_set_message_header(SSL *s,",
          "1936:                               unsigned char mt,",
          "1940: int dtls1_write_app_data_bytes(SSL *s, int type, const void *buf_, size_t len,",
          "1941:                                size_t *written);",
          "",
          "[Removed Lines]",
          "1937:                               unsigned long len,",
          "1938:                               unsigned long frag_off, unsigned long frag_len);",
          "",
          "[Added Lines]",
          "1937:                               size_t len,",
          "1938:                               size_t frag_off, size_t frag_len);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2037: #  ifndef OPENSSL_NO_HEARTBEATS",
          "2038: __owur int dtls1_heartbeat(SSL *s);",
          "2039: __owur int dtls1_process_heartbeat(SSL *s, unsigned char *p,",
          "2041: #  endif",
          "2043: __owur int tls_check_serverhello_tlsext_early(SSL *s, const PACKET *ext,",
          "",
          "[Removed Lines]",
          "2040:                                    unsigned int length);",
          "",
          "[Added Lines]",
          "2040:                                    size_t length);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2077: __owur long ssl_get_algorithm2(SSL *s);",
          "2078: __owur int tls12_copy_sigalgs(SSL *s, WPACKET *pkt,",
          "2079:                               const unsigned char *psig, size_t psiglen);",
          "2081: __owur int tls1_process_sigalgs(SSL *s);",
          "2082: __owur size_t tls12_get_psigalgs(SSL *s, const unsigned char **psigs);",
          "2083: __owur int tls12_check_peer_sigalg(const EVP_MD **pmd, SSL *s,",
          "",
          "[Removed Lines]",
          "2080: __owur int tls1_save_sigalgs(SSL *s, const unsigned char *data, int dsize);",
          "",
          "[Added Lines]",
          "2080: __owur int tls1_save_sigalgs(SSL *s, const unsigned char *data, size_t dsize);",
          "",
          "---------------"
        ],
        "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
          "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1780:             goto err;",
          "1781:         }",
          "1782:         memcpy(s->cert->ctypes, data, ctype_num);",
          "1784:         ctype_num = SSL3_CT_NUMBER;",
          "1785:     }",
          "1786:     for (i = 0; i < ctype_num; i++)",
          "",
          "[Removed Lines]",
          "1783:         s->cert->ctype_num = (size_t)ctype_num;",
          "",
          "[Added Lines]",
          "1783:         s->cert->ctype_num = ctype_num;",
          "",
          "---------------"
        ],
        "ssl/statem/statem_dtls.c||ssl/statem/statem_dtls.c": [
          "File: ssl/statem/statem_dtls.c -> ssl/statem/statem_dtls.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1119: }",
          "1121: void dtls1_set_message_header(SSL *s,",
          "1124: {",
          "1125:     if (frag_off == 0) {",
          "1126:         s->d1->handshake_write_seq = s->d1->next_handshake_write_seq;",
          "",
          "[Removed Lines]",
          "1122:                               unsigned char mt, unsigned long len,",
          "1123:                               unsigned long frag_off, unsigned long frag_len)",
          "",
          "[Added Lines]",
          "1122:                               unsigned char mt, size_t len,",
          "1123:                               size_t frag_off, size_t frag_len)",
          "",
          "---------------"
        ],
        "ssl/t1_lib.c||ssl/t1_lib.c": [
          "File: ssl/t1_lib.c -> ssl/t1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #include \"ssl_locl.h\"",
          "21: #include <openssl/ct.h>",
          "24:                               const unsigned char *sess_id, size_t sesslen,",
          "25:                               SSL_SESSION **psess);",
          "26: static int ssl_check_clienthello_tlsext_early(SSL *s);",
          "",
          "[Removed Lines]",
          "23: static int tls_decrypt_ticket(SSL *s, const unsigned char *tick, int ticklen,",
          "",
          "[Added Lines]",
          "23: static int tls_decrypt_ticket(SSL *s, const unsigned char *tick, size_t ticklen,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2965: static int tls_decrypt_ticket(SSL *s, const unsigned char *etick,",
          "2967:                               size_t sesslen, SSL_SESSION **psess)",
          "2968: {",
          "2969:     SSL_SESSION *sess;",
          "",
          "[Removed Lines]",
          "2966:                               int eticklen, const unsigned char *sess_id,",
          "",
          "[Added Lines]",
          "2966:                               size_t eticklen, const unsigned char *sess_id,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3020:     mlen = HMAC_size(hctx);",
          "3021:     if (mlen < 0) {",
          "3022:         goto err;",
          "3023:     }",
          "3025:     if (eticklen <=",
          "3027:         ret = 2;",
          "3028:         goto err;",
          "3029:     }",
          "",
          "[Removed Lines]",
          "3026:         TLSEXT_KEYNAME_LENGTH + EVP_CIPHER_CTX_iv_length(ctx) + mlen) {",
          "",
          "[Added Lines]",
          "3027:         TLSEXT_KEYNAME_LENGTH + EVP_CIPHER_CTX_iv_length(ctx) + (size_t)mlen) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3415: {",
          "3416:     CERT *c = s->cert;",
          "",
          "[Removed Lines]",
          "3414: int tls1_save_sigalgs(SSL *s, const unsigned char *data, int dsize)",
          "",
          "[Added Lines]",
          "3415: int tls1_save_sigalgs(SSL *s, const unsigned char *data, size_t dsize)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1bbe48ab149893a78bf99c8eb8895c928900a16f",
      "candidate_info": {
        "commit_hash": "1bbe48ab149893a78bf99c8eb8895c928900a16f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/1bbe48ab149893a78bf99c8eb8895c928900a16f",
        "files": [
          "ssl/t1_lib.c"
        ],
        "message": "Sanity check ticket length.\n\nIf a ticket callback changes the HMAC digest to SHA512 the existing\nsanity checks are not sufficient and an attacker could perform a DoS\nattack with a malformed ticket. Add additional checks based on\nHMAC size.\n\nThanks to Shi Lei for reporting this bug.\n\nCVE-2016-6302\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit baaabfd8fdcec04a691695fad9a664bea43202b6)",
        "before_after_code_files": [
          "ssl/t1_lib.c||ssl/t1_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "ssl/t1_lib.c||ssl/t1_lib.c"
          ],
          "candidate": [
            "ssl/t1_lib.c||ssl/t1_lib.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/t1_lib.c||ssl/t1_lib.c": [
          "File: ssl/t1_lib.c -> ssl/t1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2273:     HMAC_CTX hctx;",
          "2274:     EVP_CIPHER_CTX ctx;",
          "2275:     SSL_CTX *tctx = s->initial_ctx;",
          "2280:     HMAC_CTX_init(&hctx);",
          "2281:     EVP_CIPHER_CTX_init(&ctx);",
          "",
          "[Removed Lines]",
          "2277:     if (eticklen < 48)",
          "2278:         return 2;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2309:     if (mlen < 0) {",
          "2310:         goto err;",
          "2311:     }",
          "2312:     eticklen -= mlen;",
          "2314:     if (HMAC_Update(&hctx, etick, eticklen) <= 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2311:     if (eticklen <= 16 + EVP_CIPHER_CTX_iv_length(&ctx) + mlen) {",
          "2312:         HMAC_CTX_cleanup(&hctx);",
          "2313:         EVP_CIPHER_CTX_cleanup(&ctx);",
          "2314:         return 2;",
          "2315:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}