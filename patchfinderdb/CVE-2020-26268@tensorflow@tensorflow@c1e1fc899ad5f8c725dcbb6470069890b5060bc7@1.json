{
  "cve_id": "CVE-2020-26268",
  "cve_desc": "In affected versions of TensorFlow the tf.raw_ops.ImmutableConst operation returns a constant tensor created from a memory mapped file which is assumed immutable. However, if the type of the tensor is not an integral type, the operation crashes the Python interpreter as it tries to write to the memory area. If the file is too small, TensorFlow properly returns an error as the memory area has fewer bytes than what is needed for the tensor it creates. However, as soon as there are enough bytes, the above snippet causes a segmentation fault. This is because the allocator used to return the buffer data is not marked as returning an opaque handle since the needed virtual method is not overridden. This is fixed in versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2, and 2.4.0.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "c1e1fc899ad5f8c725dcbb6470069890b5060bc7",
  "patch_info": {
    "commit_hash": "c1e1fc899ad5f8c725dcbb6470069890b5060bc7",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/c1e1fc899ad5f8c725dcbb6470069890b5060bc7",
    "files": [
      "tensorflow/core/kernels/immutable_constant_op.cc"
    ],
    "message": "Mark `MemmappedTensorAllocator` as returning opaque handle.\n\nThis allocator is used for `ImmutableConstantOp` and it returns a handle to the contents of a memory mapped file which is supposed to represent a tensor.\n\nFor tensors of complex types (resources, variables and strings), allocators which are not marked as returning opaque handles will call placement new to initialize each element. This means writing to the buffer. However, in our case, the buffer is immutable and already contains the tensor data. Hence, writing to it is both destructive and causes a crash.\n\nPiperOrigin-RevId: 345786451\nChange-Id: I46369c50fa60b3431709ffe068a728d3061f49c4",
    "before_after_code_files": [
      "tensorflow/core/kernels/immutable_constant_op.cc||tensorflow/core/kernels/immutable_constant_op.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/immutable_constant_op.cc||tensorflow/core/kernels/immutable_constant_op.cc": [
      "File: tensorflow/core/kernels/immutable_constant_op.cc -> tensorflow/core/kernels/immutable_constant_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "63:   void set_delete_on_deallocate() { delete_on_deallocate_ = true; }",
      "65:  private:",
      "66:   std::unique_ptr<ReadOnlyMemoryRegion> memory_region_;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "69:   bool AllocatesOpaqueHandle() const override { return true; }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "35fbc5ce82b56553ec7fda36456ae4414346ed96",
      "candidate_info": {
        "commit_hash": "35fbc5ce82b56553ec7fda36456ae4414346ed96",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/35fbc5ce82b56553ec7fda36456ae4414346ed96",
        "files": [
          "tensorflow/core/kernels/immutable_constant_op.cc"
        ],
        "message": "Mark `MemmappedTensorAllocator` as returning opaque handle.\n\nThis allocator is used for `ImmutableConstantOp` and it returns a handle to the contents of a memory mapped file which is supposed to represent a tensor.\n\nFor tensors of complex types (resources, variables and strings), allocators which are not marked as returning opaque handles will call placement new to initialize each element. This means writing to the buffer. However, in our case, the buffer is immutable and already contains the tensor data. Hence, writing to it is both destructive and causes a crash.\n\nPiperOrigin-RevId: 345786451\nChange-Id: I46369c50fa60b3431709ffe068a728d3061f49c4",
        "before_after_code_files": [
          "tensorflow/core/kernels/immutable_constant_op.cc||tensorflow/core/kernels/immutable_constant_op.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/immutable_constant_op.cc||tensorflow/core/kernels/immutable_constant_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/immutable_constant_op.cc||tensorflow/core/kernels/immutable_constant_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/immutable_constant_op.cc||tensorflow/core/kernels/immutable_constant_op.cc": [
          "File: tensorflow/core/kernels/immutable_constant_op.cc -> tensorflow/core/kernels/immutable_constant_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:   void set_delete_on_deallocate() { delete_on_deallocate_ = true; }",
          "65:  private:",
          "66:   std::unique_ptr<ReadOnlyMemoryRegion> memory_region_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:   bool AllocatesOpaqueHandle() const override { return true; }",
          "",
          "---------------"
        ]
      }
    }
  ]
}