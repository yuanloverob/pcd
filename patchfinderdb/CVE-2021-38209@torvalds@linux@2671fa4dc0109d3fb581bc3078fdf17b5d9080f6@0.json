{
  "cve_id": "CVE-2021-38209",
  "cve_desc": "net/netfilter/nf_conntrack_standalone.c in the Linux kernel before 5.12.2 allows observation of changes in any net namespace because these changes are leaked into all other net namespaces. This is related to the NF_SYSCTL_CT_MAX, NF_SYSCTL_CT_EXPECT_MAX, and NF_SYSCTL_CT_BUCKETS sysctls.",
  "repo": "torvalds/linux",
  "patch_hash": "2671fa4dc0109d3fb581bc3078fdf17b5d9080f6",
  "patch_info": {
    "commit_hash": "2671fa4dc0109d3fb581bc3078fdf17b5d9080f6",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/2671fa4dc0109d3fb581bc3078fdf17b5d9080f6",
    "files": [
      "net/netfilter/nf_conntrack_standalone.c"
    ],
    "message": "netfilter: conntrack: Make global sysctls readonly in non-init netns\n\nThese sysctls point to global variables:\n- NF_SYSCTL_CT_MAX (&nf_conntrack_max)\n- NF_SYSCTL_CT_EXPECT_MAX (&nf_ct_expect_max)\n- NF_SYSCTL_CT_BUCKETS (&nf_conntrack_htable_size_user)\n\nBecause their data pointers are not updated to point to per-netns\nstructures, they must be marked read-only in a non-init_net ns.\nOtherwise, changes in any net namespace are reflected in (leaked into)\nall other net namespaces. This problem has existed since the\nintroduction of net namespaces.\n\nThe current logic marks them read-only only if the net namespace is\nowned by an unprivileged user (other than init_user_ns).\n\nCommit d0febd81ae77 (\"netfilter: conntrack: re-visit sysctls in\nunprivileged namespaces\") \"exposes all sysctls even if the namespace is\nunpriviliged.\" Since we need to mark them readonly in any case, we can\nforego the unprivileged user check altogether.\n\nFixes: d0febd81ae77 (\"netfilter: conntrack: re-visit sysctls in unprivileged namespaces\")\nSigned-off-by: Jonathon Reinhart <Jonathon.Reinhart@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "net/netfilter/nf_conntrack_standalone.c||net/netfilter/nf_conntrack_standalone.c"
    ]
  },
  "patch_diff": {
    "net/netfilter/nf_conntrack_standalone.c||net/netfilter/nf_conntrack_standalone.c": [
      "File: net/netfilter/nf_conntrack_standalone.c -> net/netfilter/nf_conntrack_standalone.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1060:  nf_conntrack_standalone_init_dccp_sysctl(net, table);",
      "1061:  nf_conntrack_standalone_init_gre_sysctl(net, table);",
      "1065:   table[NF_SYSCTL_CT_MAX].mode = 0444;",
      "1066:   table[NF_SYSCTL_CT_EXPECT_MAX].mode = 0444;",
      "1073:   table[NF_SYSCTL_CT_BUCKETS].mode = 0444;",
      "1074:  }",
      "",
      "[Removed Lines]",
      "1064:  if (net->user_ns != &init_user_ns) {",
      "1067:   table[NF_SYSCTL_CT_HELPER].mode = 0444;",
      "1068: #ifdef CONFIG_NF_CONNTRACK_EVENTS",
      "1069:   table[NF_SYSCTL_CT_EVENTS].mode = 0444;",
      "1070: #endif",
      "1071:   table[NF_SYSCTL_CT_BUCKETS].mode = 0444;",
      "1072:  } else if (!net_eq(&init_net, net)) {",
      "",
      "[Added Lines]",
      "1064:  if (!net_eq(&init_net, net)) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7b5974709faf7628a036d3f0f14d4f403f536eac",
      "candidate_info": {
        "commit_hash": "7b5974709faf7628a036d3f0f14d4f403f536eac",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/7b5974709faf7628a036d3f0f14d4f403f536eac",
        "files": [
          "include/net/netfilter/nf_conntrack.h",
          "net/netfilter/nf_conntrack_standalone.c"
        ],
        "message": "netfilter: conntrack: move sysctl pointer to net_generic infra\n\nNo need to keep this in struct net, place it in the net_generic data.\nThe sysctl pointer is removed from struct net in a followup patch.\n\nSigned-off-by: Florian Westphal <fw@strlen.de>\nSigned-off-by: Pablo Neira Ayuso <pablo@netfilter.org>",
        "before_after_code_files": [
          "include/net/netfilter/nf_conntrack.h||include/net/netfilter/nf_conntrack.h",
          "net/netfilter/nf_conntrack_standalone.c||net/netfilter/nf_conntrack_standalone.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/netfilter/nf_conntrack_standalone.c||net/netfilter/nf_conntrack_standalone.c"
          ],
          "candidate": [
            "net/netfilter/nf_conntrack_standalone.c||net/netfilter/nf_conntrack_standalone.c"
          ]
        }
      },
      "candidate_diff": {
        "include/net/netfilter/nf_conntrack.h||include/net/netfilter/nf_conntrack.h": [
          "File: include/net/netfilter/nf_conntrack.h -> include/net/netfilter/nf_conntrack.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:  unsigned int users4;",
          "48:  unsigned int users6;",
          "49:  unsigned int users_bridge;",
          "50: };",
          "52: #include <linux/types.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: #ifdef CONFIG_SYSCTL",
          "51:  struct ctl_table_header *sysctl_header;",
          "52: #endif",
          "",
          "---------------"
        ],
        "net/netfilter/nf_conntrack_standalone.c||net/netfilter/nf_conntrack_standalone.c": [
          "File: net/netfilter/nf_conntrack_standalone.c -> net/netfilter/nf_conntrack_standalone.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1028: static int nf_conntrack_standalone_init_sysctl(struct net *net)",
          "1029: {",
          "1030:  struct nf_udp_net *un = nf_udp_pernet(net);",
          "1031:  struct ctl_table *table;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1030:  struct nf_conntrack_net *cnet = net_generic(net, nf_conntrack_net_id);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1072:   table[NF_SYSCTL_CT_BUCKETS].mode = 0444;",
          "1073:  }",
          "1077:   goto out_unregister_netfilter;",
          "1079:  return 0;",
          "",
          "[Removed Lines]",
          "1075:  net->ct.sysctl_header = register_net_sysctl(net, \"net/netfilter\", table);",
          "1076:  if (!net->ct.sysctl_header)",
          "",
          "[Added Lines]",
          "1076:  cnet->sysctl_header = register_net_sysctl(net, \"net/netfilter\", table);",
          "1077:  if (!cnet->sysctl_header)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1086: static void nf_conntrack_standalone_fini_sysctl(struct net *net)",
          "1087: {",
          "1088:  struct ctl_table *table;",
          "1092:  kfree(table);",
          "1093: }",
          "1094: #else",
          "",
          "[Removed Lines]",
          "1090:  table = net->ct.sysctl_header->ctl_table_arg;",
          "1091:  unregister_net_sysctl_table(net->ct.sysctl_header);",
          "",
          "[Added Lines]",
          "1089:  struct nf_conntrack_net *cnet = net_generic(net, nf_conntrack_net_id);",
          "1092:  table = cnet->sysctl_header->ctl_table_arg;",
          "1093:  unregister_net_sysctl_table(cnet->sysctl_header);",
          "",
          "---------------"
        ]
      }
    }
  ]
}