{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8a6ef65c2c8b39a040c6566bc91841989803631d",
      "candidate_info": {
        "commit_hash": "8a6ef65c2c8b39a040c6566bc91841989803631d",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/8a6ef65c2c8b39a040c6566bc91841989803631d",
        "files": [
          "deps/v8/src/objects.cc",
          "deps/v8/src/objects.h"
        ],
        "message": "Fixing bugs in promotion of elements transitions (r1175). - Fixed invalid memory access when reading enum-cache from descriptor array with elements transitions but 0 real descriptors. - Fixed infinite recursion in the intrusive map iterator when visiting elements transitions. - Properly cached non-fastmode elements transitions.\n\nReview URL: https://chromiumcodereview.appspot.com/10565030\n\ngit-svn-id: https://v8.googlecode.com/svn/branches/bleeding_edge@11841 ce2b1a6d-e550-0410-aec6-3dcde31c8c00",
        "before_after_code_files": [
          "deps/v8/src/objects.cc||deps/v8/src/objects.cc",
          "deps/v8/src/objects.h||deps/v8/src/objects.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/v8/src/objects.cc||deps/v8/src/objects.cc": [
          "File: deps/v8/src/objects.cc -> deps/v8/src/objects.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2243: static Map* FindClosestElementsTransition(Map* map, ElementsKind to_kind) {",
          "2244:   Map* current_map = map;",
          "2245:   int index = GetSequenceIndexFromFastElementsKind(map->elements_kind());",
          "2247:   for (; index < to_index; ++index) {",
          "2248:     Map* next_map = current_map->elements_transition_map();",
          "2249:     if (next_map == NULL) {",
          "",
          "[Removed Lines]",
          "2246:   int to_index = GetSequenceIndexFromFastElementsKind(to_kind);",
          "",
          "[Added Lines]",
          "2246:   int to_index = IsFastElementsKind(to_kind)",
          "2247:       ? GetSequenceIndexFromFastElementsKind(to_kind)",
          "2248:       : GetSequenceIndexFromFastElementsKind(TERMINAL_FAST_ELEMENTS_KIND);",
          "2250:   ASSERT(index <= to_index);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2251:     }",
          "2252:     current_map = next_map;",
          "2253:   }",
          "2255:   return current_map;",
          "2256: }",
          "2259: Map* Map::LookupElementsTransitionMap(ElementsKind to_kind) {",
          "2267:   return NULL;",
          "2268: }",
          "2271: MaybeObject* Map::CreateNextElementsTransition(ElementsKind next_kind) {",
          "2276:     Map* next_map;",
          "2277:     MaybeObject* maybe_next_map =",
          "",
          "[Removed Lines]",
          "2254:   ASSERT(current_map->elements_kind() == to_kind);",
          "2260:   if (this->instance_descriptors()->MayContainTransitions() &&",
          "2261:       IsMoreGeneralElementsKindTransition(this->elements_kind(), to_kind)) {",
          "2262:     Map* to_map = FindClosestElementsTransition(this, to_kind);",
          "2263:     if (to_map->elements_kind() == to_kind) {",
          "2264:       return to_map;",
          "2265:     }",
          "2266:   }",
          "2272:     ASSERT(elements_transition_map() == NULL);",
          "2273:     ASSERT(GetSequenceIndexFromFastElementsKind(elements_kind()) ==",
          "2274:            (GetSequenceIndexFromFastElementsKind(next_kind) - 1));",
          "",
          "[Added Lines]",
          "2259:   if (!IsFastElementsKind(to_kind)) {",
          "2260:     Map* next_map = current_map->elements_transition_map();",
          "2261:     if (next_map != NULL && next_map->elements_kind() == to_kind) {",
          "2262:       return next_map;",
          "2263:     }",
          "2264:     ASSERT(current_map->elements_kind() == TERMINAL_FAST_ELEMENTS_KIND);",
          "2265:   } else {",
          "2266:     ASSERT(current_map->elements_kind() == to_kind);",
          "2267:   }",
          "2273:   Map* to_map = FindClosestElementsTransition(this, to_kind);",
          "2274:   if (to_map->elements_kind() == to_kind) return to_map;",
          "2280:     ASSERT(elements_transition_map() == NULL ||",
          "2281:         ((elements_transition_map()->elements_kind() == DICTIONARY_ELEMENTS ||",
          "2282:           IsExternalArrayElementsKind(",
          "2283:               elements_transition_map()->elements_kind())) &&",
          "2284:          (next_kind == DICTIONARY_ELEMENTS ||",
          "2285:           IsExternalArrayElementsKind(next_kind))));",
          "2286:     ASSERT(!IsFastElementsKind(next_kind) ||",
          "2287:            IsMoreGeneralElementsKindTransition(elements_kind(), next_kind));",
          "2288:     ASSERT(next_kind != elements_kind());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2288: static MaybeObject* AddMissingElementsTransitions(Map* map,",
          "2289:                                                   ElementsKind to_kind) {",
          "2292:   ASSERT(index <= to_index);",
          "2294:   Map* current_map = map;",
          "2298:       MaybeObject* maybe_next_map =",
          "2299:           current_map->CreateNextElementsTransition(next_kind);",
          "2300:       if (!maybe_next_map->To(&current_map)) return maybe_next_map;",
          "2301:   }",
          "2303:   ASSERT(current_map->elements_kind() == to_kind);",
          "2304:   return current_map;",
          "2305: }",
          "",
          "[Removed Lines]",
          "2290:   int index = GetSequenceIndexFromFastElementsKind(map->elements_kind()) + 1;",
          "2291:   int to_index = GetSequenceIndexFromFastElementsKind(to_kind);",
          "2296:   for (; index <= to_index; ++index) {",
          "2297:       ElementsKind next_kind = GetFastElementsKindFromSequenceIndex(index);",
          "",
          "[Added Lines]",
          "2304:   ASSERT(IsFastElementsKind(map->elements_kind()));",
          "2305:   int index = GetSequenceIndexFromFastElementsKind(map->elements_kind());",
          "2306:   int to_index = IsFastElementsKind(to_kind)",
          "2307:       ? GetSequenceIndexFromFastElementsKind(to_kind)",
          "2308:       : GetSequenceIndexFromFastElementsKind(TERMINAL_FAST_ELEMENTS_KIND);",
          "2314:   for (; index < to_index; ++index) {",
          "2315:       ElementsKind next_kind = GetFastElementsKindFromSequenceIndex(index + 1);",
          "2323:   if (!IsFastElementsKind(to_kind)) {",
          "2324:       MaybeObject* maybe_next_map =",
          "2325:           current_map->CreateNextElementsTransition(to_kind);",
          "2326:       if (!maybe_next_map->To(&current_map)) return maybe_next_map;",
          "2327:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2346:       (global_context->object_function()->map() != map()) &&",
          "2347:       !start_map->IsUndefined() && !start_map->is_shared() &&",
          "2353:   if (!allow_store_transition) {",
          "",
          "[Removed Lines]",
          "2349:       IsTransitionableFastElementsKind(from_kind) &&",
          "2350:       IsFastElementsKind(to_kind) &&",
          "2351:       IsMoreGeneralElementsKindTransition(from_kind, to_kind);",
          "",
          "[Added Lines]",
          "2374:       IsFastElementsKind(from_kind);",
          "2377:   if (IsFastElementsKind(to_kind)) {",
          "2378:     allow_store_transition &=",
          "2379:         IsTransitionableFastElementsKind(from_kind) &&",
          "2380:         IsMoreGeneralElementsKindTransition(from_kind, to_kind);",
          "2381:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5765:   Heap* heap = Isolate::Current()->heap();",
          "5767:   FixedArray* result;",
          "5784:   }",
          "5785:   result->set(kBitField3StorageIndex, Smi::FromInt(0));",
          "5786:   result->set(kTransitionsIndex, Smi::FromInt(0));",
          "5787:   return result;",
          "5788: }",
          "",
          "[Removed Lines]",
          "5768:   if (number_of_descriptors == 0) {",
          "5769:     if (shared_mode == MAY_BE_SHARED) {",
          "5770:       return heap->empty_descriptor_array();",
          "5771:     }",
          "5772:     { MaybeObject* maybe_array =",
          "5773:           heap->AllocateFixedArray(kTransitionsIndex + 1);",
          "5774:       if (!maybe_array->To(&result)) return maybe_array;",
          "5775:     }",
          "5776:   } else {",
          "5778:     { MaybeObject* maybe_array =",
          "5779:           heap->AllocateFixedArray(ToKeyIndex(number_of_descriptors));",
          "5780:       if (!maybe_array->To(&result)) return maybe_array;",
          "5781:     }",
          "5782:     result->set(kEnumerationIndexIndex,",
          "5783:                 Smi::FromInt(PropertyDetails::kInitialIndex));",
          "",
          "[Added Lines]",
          "5798:   if (number_of_descriptors == 0 && shared_mode == MAY_BE_SHARED) {",
          "5799:     return heap->empty_descriptor_array();",
          "5800:   }",
          "5802:   { MaybeObject* maybe_array =",
          "5803:         heap->AllocateFixedArray(ToKeyIndex(number_of_descriptors));",
          "5804:     if (!maybe_array->To(&result)) return maybe_array;",
          "5808:   result->set(kEnumerationIndexIndex,",
          "5809:               Smi::FromInt(PropertyDetails::kInitialIndex));",
          "",
          "---------------"
        ],
        "deps/v8/src/objects.h||deps/v8/src/objects.h": [
          "File: deps/v8/src/objects.h -> deps/v8/src/objects.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2443:   int number_of_descriptors() {",
          "2447:     int len = length();",
          "2448:     return len <= kFirstIndex ? 0 : (len - kFirstIndex) / kDescriptorSize;",
          "2449:   }",
          "",
          "[Removed Lines]",
          "2444:     ASSERT(length() > kFirstIndex ||",
          "2445:            length() == kTransitionsIndex ||",
          "2446:            IsEmpty());",
          "",
          "[Added Lines]",
          "2444:     ASSERT(length() >= kFirstIndex || IsEmpty());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2615:   static const int kNotFound = -1;",
          "2617:   static const int kBitField3StorageIndex = 0;",
          "2620:   static const int kFirstIndex = 3;",
          "",
          "[Removed Lines]",
          "2618:   static const int kTransitionsIndex = 1;",
          "2619:   static const int kEnumerationIndexIndex = 2;",
          "",
          "[Added Lines]",
          "2616:   static const int kEnumerationIndexIndex = 1;",
          "2617:   static const int kTransitionsIndex = 2;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2629:   static const int kBitField3StorageOffset = FixedArray::kHeaderSize;",
          "2635:   static const int kEnumCacheBridgeEnumOffset = FixedArray::kHeaderSize;",
          "",
          "[Removed Lines]",
          "2630:   static const int kTransitionsOffset = kBitField3StorageOffset + kPointerSize;",
          "2631:   static const int kEnumerationIndexOffset = kTransitionsOffset + kPointerSize;",
          "2632:   static const int kFirstOffset = kEnumerationIndexOffset + kPointerSize;",
          "",
          "[Added Lines]",
          "2628:   static const int kEnumerationIndexOffset =",
          "2629:       kBitField3StorageOffset + kPointerSize;",
          "2630:   static const int kTransitionsOffset = kEnumerationIndexOffset + kPointerSize;",
          "2631:   static const int kFirstOffset = kTransitionsOffset + kPointerSize;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b4fbf6d27590e0fae42cc39adca9694793efdce1",
      "candidate_info": {
        "commit_hash": "b4fbf6d27590e0fae42cc39adca9694793efdce1",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/b4fbf6d27590e0fae42cc39adca9694793efdce1",
        "files": [
          "lib/http.js"
        ],
        "message": "Fix #3231. Don't try to emit error on a null'ed req object",
        "before_after_code_files": [
          "lib/http.js||lihttp.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/http.js||lihttp.js": [
          "File: lib/http.js -> lihttp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1159:     httpSocketSetup(socket);",
          "1162:       debug('HTTP SOCKET ERROR: ' + err.message + '\\n' + err.stack);",
          "1167:       if (parser) {",
          "1168:         parser.finish();",
          "1169:         freeParser(parser, req);",
          "1170:       }",
          "1171:       socket.destroy();",
          "1172:     }",
          "1173:     socket.on('error', errorListener);",
          "1175:     socket.ondata = function(d, start, end) {",
          "",
          "[Removed Lines]",
          "1161:     var errorListener = function(err) {",
          "1163:       req.emit('error', err);",
          "1166:       req._hadError = true;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a7158de18abe1d423d3e12b97f79a628e4a8dbd",
      "candidate_info": {
        "commit_hash": "9a7158de18abe1d423d3e12b97f79a628e4a8dbd",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/9a7158de18abe1d423d3e12b97f79a628e4a8dbd",
        "files": [
          "deps/uv/src/unix/sunos.c"
        ],
        "message": "Hotfix for #3528 Add strdup in uv_cpu_info",
        "before_after_code_files": [
          "deps/uv/src/unix/sunos.c||deps/uv/src/unix/sunos.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/src/unix/sunos.c||deps/uv/src/unix/sunos.c": [
          "File: deps/uv/src/unix/sunos.c -> deps/uv/src/unix/sunos.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "350:       knp = (kstat_named_t *) kstat_data_lookup(ksp, (char *)\"brand\");",
          "351:       assert(knp->data_type == KSTAT_DATA_STRING);",
          "353:     }",
          "355:     lookup_instance++;",
          "",
          "[Removed Lines]",
          "352:       cpu_info->model = KSTAT_NAMED_STR_PTR(knp);",
          "",
          "[Added Lines]",
          "352:       cpu_info->model = strdup(KSTAT_NAMED_STR_PTR(knp));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1e73e4c62f14e8c68c284b20fd754523af63f157",
      "candidate_info": {
        "commit_hash": "1e73e4c62f14e8c68c284b20fd754523af63f157",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/1e73e4c62f14e8c68c284b20fd754523af63f157",
        "files": [
          "src/node.cc",
          "src/node_isolate.cc",
          "src/node_isolate.h"
        ],
        "message": "isolates: remove global isolates list\n\nNo longer necessary, each isolate now waits until its subordinate isolates have\nexited.",
        "before_after_code_files": [
          "src/node.cc||src/node.cc",
          "src/node_isolate.cc||src/node_isolate.cc",
          "src/node_isolate.h||src/node_isolate.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2709:   StartThread(isolate, argc, argv);",
          "2710:   isolate->Dispose();",
          "2716: #ifndef NDEBUG",
          "2718:   V8::Dispose();",
          "",
          "[Removed Lines]",
          "2714:   node::Isolate::JoinAll();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/node_isolate.cc||src/node_isolate.cc": [
          "File: src/node_isolate.cc -> src/node_isolate.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: static volatile bool initialized;",
          "54: static volatile int id;",
          "55: static volatile int isolate_count;",
          "60: #ifdef NDEBUG",
          "61: # define IF_DEBUG(expr)",
          "",
          "[Removed Lines]",
          "56: static uv_mutex_t list_lock;",
          "57: static ngx_queue_t list_head;",
          "",
          "[Added Lines]",
          "56: static uv_mutex_t isolate_mutex;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "219: void Isolate::Initialize() {",
          "225: }",
          "228: int Isolate::Count() {",
          "253: }",
          "",
          "[Removed Lines]",
          "220:   if (!initialized) {",
          "221:     initialized = true;",
          "222:     if (uv_mutex_init(&list_lock)) abort();",
          "223:     ngx_queue_init(&list_head);",
          "224:   }",
          "229:   return isolate_count;",
          "230: }",
          "233: void Isolate::JoinAll() {",
          "234:   uv_mutex_lock(&list_lock);",
          "236:   while (ngx_queue_empty(&list_head) == false) {",
          "237:     ngx_queue_t* q = ngx_queue_head(&list_head);",
          "238:     assert(q);",
          "239:     Isolate* isolate = ngx_queue_data(q, Isolate, list_member_);",
          "240:     assert(isolate);",
          "243:     uv_mutex_unlock(&list_lock);",
          "245:     uv_thread_join(&isolate->tid_);",
          "248:     uv_mutex_lock(&list_lock);",
          "249:   }",
          "252:   uv_mutex_unlock(&list_lock);",
          "",
          "[Added Lines]",
          "218:   if (initialized) return;",
          "219:   if (uv_mutex_init(&isolate_mutex)) abort();",
          "220:   initialized = true;",
          "225:   int count;",
          "226:   uv_mutex_lock(&isolate_mutex);",
          "227:   count = isolate_count;",
          "228:   uv_mutex_unlock(&isolate_mutex);",
          "229:   return count;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "257:   send_channel_ = NULL; // set (and deleted) by the parent isolate",
          "258:   recv_channel_ = NULL;",
          "262:   assert(initialized && \"node::Isolate::Initialize() hasn't been called\");",
          "264:   id_ = ++id;",
          "266:   if (id_ == 1) {",
          "267:     loop_ = uv_default_loop();",
          "",
          "[Removed Lines]",
          "260:   uv_mutex_lock(&list_lock);",
          "",
          "[Added Lines]",
          "237:   uv_mutex_lock(&isolate_mutex);",
          "239:   isolate_count++;",
          "241:   uv_mutex_unlock(&isolate_mutex);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "272:   ngx_queue_init(&at_exit_callbacks_);",
          "282:   v8_isolate_ = v8::Isolate::New();",
          "283:   assert(v8_isolate_->GetData() == NULL);",
          "284:   v8_isolate_->SetData(this);",
          "",
          "[Removed Lines]",
          "274:   ngx_queue_init(&list_member_);",
          "277:   ngx_queue_insert_tail(&list_head, &list_member_);",
          "278:   isolate_count++;",
          "280:   uv_mutex_unlock(&list_lock);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "338: void Isolate::Dispose() {",
          "341:   NODE_ISOLATE_CHECK(this);",
          "343:   while (!ngx_queue_empty(&at_exit_callbacks_)) {",
          "",
          "[Removed Lines]",
          "339:   uv_mutex_lock(&list_lock);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "359:   v8_isolate_->Dispose();",
          "360:   v8_isolate_ = NULL;",
          "363:   isolate_count--;",
          "364:   assert(isolate_count >= 0);",
          "368: }",
          "",
          "[Removed Lines]",
          "362:   ngx_queue_remove(&list_member_);",
          "365:   assert(isolate_count > 0 || ngx_queue_empty(&list_head));",
          "367:   uv_mutex_unlock(&list_lock);",
          "",
          "[Added Lines]",
          "329:   uv_mutex_lock(&isolate_mutex);",
          "332:   uv_mutex_unlock(&isolate_mutex);",
          "",
          "---------------"
        ],
        "src/node_isolate.h||src/node_isolate.h": [
          "File: src/node_isolate.h -> src/node_isolate.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:   typedef void (*AtExitCallback)(void* arg);",
          "62:   static v8::Handle<v8::Value> Send(const v8::Arguments& args);",
          "64:   static Isolate* GetCurrent() {",
          "",
          "[Removed Lines]",
          "61:   static void JoinAll();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "121:   IsolateChannel* recv_channel_;",
          "122:   uv_loop_t* loop_;",
          "128:   struct globals globals_;",
          "129:   bool globals_init_;",
          "",
          "[Removed Lines]",
          "125:   ngx_queue_t list_member_;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3ec84a11f8ce70bde3a480a80cbe0875f8ea08ae",
      "candidate_info": {
        "commit_hash": "3ec84a11f8ce70bde3a480a80cbe0875f8ea08ae",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/3ec84a11f8ce70bde3a480a80cbe0875f8ea08ae",
        "files": [
          "src/slab_allocator.cc",
          "src/stream_wrap.cc"
        ],
        "message": "Slab allocator: don't attempt to shrink a non-buffer",
        "before_after_code_files": [
          "src/slab_allocator.cc||src/slab_allocator.cc",
          "src/stream_wrap.cc||src/stream_wrap.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/slab_allocator.cc||src/slab_allocator.cc": [
          "File: src/slab_allocator.cc -> src/slab_allocator.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:   assert(!slab_v.IsEmpty());",
          "117:   assert(slab_v->IsObject());",
          "118:   Local<Object> slab = slab_v->ToObject();",
          "120:     last_ptr_ = NULL;",
          "121:     offset_ = ptr - Buffer::Data(slab) + ROUND_UP(size, 16);",
          "122:   }",
          "",
          "[Removed Lines]",
          "119:   if (ptr && ptr == last_ptr_) {",
          "",
          "[Added Lines]",
          "119:   assert(ptr != NULL);",
          "120:   if (ptr == last_ptr_) {",
          "",
          "---------------"
        ],
        "src/stream_wrap.cc||src/stream_wrap.cc": [
          "File: src/stream_wrap.cc -> src/stream_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "163:   assert(wrap->object_.IsEmpty() == false);",
          "169:   if (nread < 0)  {",
          "170:     SetErrno(uv_last_error(uv_default_loop()));",
          "171:     MakeCallback(wrap->object_, \"onread\", 0, NULL);",
          "172:     return;",
          "173:   }",
          "175:   if (nread == 0) return;",
          "176:   assert(static_cast<size_t>(nread) <= buf.len);",
          "",
          "[Removed Lines]",
          "165:   Local<Object> slab = slab_allocator.Shrink(wrap->object_,",
          "166:                                              buf.base,",
          "167:                                              nread < 0 ? 0 : nread);",
          "",
          "[Added Lines]",
          "168:     if (buf.base != NULL) {",
          "169:       slab_allocator.Shrink(wrap->object_, buf.base, 0);",
          "170:     }",
          "177:   assert(buf.base != NULL);",
          "178:   Local<Object> slab = slab_allocator.Shrink(wrap->object_,",
          "179:                                              buf.base,",
          "180:                                              nread);",
          "",
          "---------------"
        ]
      }
    }
  ]
}