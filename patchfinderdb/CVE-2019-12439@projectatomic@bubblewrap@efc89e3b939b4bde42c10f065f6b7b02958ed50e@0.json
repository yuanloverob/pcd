{
  "cve_id": "CVE-2019-12439",
  "cve_desc": "bubblewrap.c in Bubblewrap before 0.3.3 misuses temporary directories in /tmp as a mount point. In some particular configurations (related to XDG_RUNTIME_DIR), a local attacker may abuse this flaw to prevent other users from executing bubblewrap or potentially execute code.",
  "repo": "projectatomic/bubblewrap",
  "patch_hash": "efc89e3b939b4bde42c10f065f6b7b02958ed50e",
  "patch_info": {
    "commit_hash": "efc89e3b939b4bde42c10f065f6b7b02958ed50e",
    "repo": "projectatomic/bubblewrap",
    "commit_url": "https://github.com/projectatomic/bubblewrap/commit/efc89e3b939b4bde42c10f065f6b7b02958ed50e",
    "files": [
      "bubblewrap.c"
    ],
    "message": "Don't create our own temporary mount point for pivot_root\n\nAn attacker could pre-create /tmp/.bubblewrap-$UID and make it a\nnon-directory, non-symlink (in which case mounting our tmpfs would fail,\ncausing denial of service), or make it a symlink under their control\n(potentially allowing bad things if the protected_symlinks sysctl is\nnot enabled).\n\nInstead, temporarily mount the tmpfs on a directory that we are sure\nexists and is not attacker-controlled. /tmp (the directory itself, not\na subdirectory) will do.\n\nFixes: #304\nBug-Debian: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=923557\nSigned-off-by: Simon McVittie <smcv@debian.org>\n\nCloses: #305\nApproved by: cgwalters",
    "before_after_code_files": [
      "bubblewrap.c||bubblewrap.c"
    ]
  },
  "patch_diff": {
    "bubblewrap.c||bubblewrap.c": [
      "File: bubblewrap.c -> bubblewrap.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2046:       char **argv)",
      "2047: {",
      "2048:   mode_t old_umask;",
      "2050:   int clone_flags;",
      "2051:   char *old_cwd = NULL;",
      "2052:   pid_t pid;",
      "",
      "[Removed Lines]",
      "2049:   cleanup_free char *base_path = NULL;",
      "",
      "[Added Lines]",
      "2049:   const char *base_path = NULL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2187:     die_with_error (\"Can't open /proc\");",
      "2200:   __debug__ ((\"creating new namespace\\n\"));",
      "",
      "[Removed Lines]",
      "2191:   base_path = xasprintf (\"/run/user/%d/.bubblewrap\", real_uid);",
      "2192:   if (ensure_dir (base_path, 0755))",
      "2193:     {",
      "2194:       free (base_path);",
      "2195:       base_path = xasprintf (\"/tmp/.bubblewrap-%d\", real_uid);",
      "2196:       if (ensure_dir (base_path, 0755))",
      "2197:         die_with_error (\"Creating root mountpoint failed\");",
      "2198:     }",
      "",
      "[Added Lines]",
      "2195:   base_path = \"/tmp\";",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8f457ee2868ebfd20e311000aa472462c5ce3c84",
      "candidate_info": {
        "commit_hash": "8f457ee2868ebfd20e311000aa472462c5ce3c84",
        "repo": "projectatomic/bubblewrap",
        "commit_url": "https://github.com/projectatomic/bubblewrap/commit/8f457ee2868ebfd20e311000aa472462c5ce3c84",
        "files": [
          "tests/test-run.sh"
        ],
        "message": "tests: Ensure that tmpfs with oldroot/newroot doesn't appear in container\n\nSigned-off-by: Simon McVittie <smcv@collabora.com>\n\nCloses: #305\nApproved by: cgwalters",
        "before_after_code_files": [
          "tests/test-run.sh||tests/test-run.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/test-run.sh||tests/test-run.sh": [
          "File: tests/test-run.sh -> tests/test-run.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:     skip Seems like bwrap is not working at all. Maybe setuid is not working",
          "81: fi",
          "85: # Test help",
          "86: ${BWRAP} --help > help.txt",
          "",
          "[Removed Lines]",
          "83: echo \"1..41\"",
          "",
          "[Added Lines]",
          "83: echo \"1..46\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "278: fi",
          "279: echo \"ok - options like --dev-bind are defanged by --\"",
          "281: echo \"ok - End of test\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "281: if command -v mktemp > /dev/null; then",
          "282:     tempfile=\"$(mktemp /tmp/bwrap-test-XXXXXXXX)\"",
          "283:     echo \"hello\" > \"$tempfile\"",
          "284:     $BWRAP --bind / / cat \"$tempfile\" > stdout",
          "285:     assert_file_has_content stdout hello",
          "286:     echo \"ok - bind-mount of / exposes real /tmp\"",
          "287:     $BWRAP --bind / / --bind /tmp /tmp cat \"$tempfile\" > stdout",
          "288:     assert_file_has_content stdout hello",
          "289:     echo \"ok - bind-mount of /tmp exposes real /tmp\"",
          "290:     if [ -d /mnt ]; then",
          "291:         $BWRAP --bind / / --bind /tmp /mnt cat \"/mnt/${tempfile#/tmp/}\" > stdout",
          "292:         assert_file_has_content stdout hello",
          "293:         echo \"ok - bind-mount of /tmp onto /mnt exposes real /tmp\"",
          "294:     else",
          "295:         echo \"ok - # SKIP /mnt does not exist\"",
          "296:     fi",
          "297: else",
          "298:     echo \"ok - # SKIP mktemp not found\"",
          "299:     echo \"ok - # SKIP mktemp not found\"",
          "300:     echo \"ok - # SKIP mktemp not found\"",
          "301: fi",
          "303: if $RUN test -d /tmp/oldroot; then",
          "304:     assert_not_reached \"/tmp/oldroot should not be visible\"",
          "305: fi",
          "306: if $RUN test -d /tmp/newroot; then",
          "307:     assert_not_reached \"/tmp/newroot should not be visible\"",
          "308: fi",
          "310: echo \"hello\" > input.$$",
          "311: $BWRAP --bind / / --bind \"$(pwd)\" /tmp cat /tmp/input.$$ > stdout",
          "312: assert_file_has_content stdout hello",
          "313: if $BWRAP --bind / / --bind \"$(pwd)\" /tmp test -d /tmp/oldroot; then",
          "314:     assert_not_reached \"/tmp/oldroot should not be visible\"",
          "315: fi",
          "316: if $BWRAP --bind / / --bind \"$(pwd)\" /tmp test -d /tmp/newroot; then",
          "317:     assert_not_reached \"/tmp/newroot should not be visible\"",
          "318: fi",
          "319: echo \"ok - we can mount another directory onto /tmp\"",
          "321: echo \"hello\" > input.$$",
          "322: $RUN --bind \"$(pwd)\" /tmp/here cat /tmp/here/input.$$ > stdout",
          "323: assert_file_has_content stdout hello",
          "324: if $RUN --bind \"$(pwd)\" /tmp/here test -d /tmp/oldroot; then",
          "325:     assert_not_reached \"/tmp/oldroot should not be visible\"",
          "326: fi",
          "327: if $RUN --bind \"$(pwd)\" /tmp/here test -d /tmp/newroot; then",
          "328:     assert_not_reached \"/tmp/newroot should not be visible\"",
          "329: fi",
          "330: echo \"ok - we can mount another directory inside /tmp\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1e90a18a085e324b821a8bd0dc28a27082e43634",
      "candidate_info": {
        "commit_hash": "1e90a18a085e324b821a8bd0dc28a27082e43634",
        "repo": "projectatomic/bubblewrap",
        "commit_url": "https://github.com/projectatomic/bubblewrap/commit/1e90a18a085e324b821a8bd0dc28a27082e43634",
        "files": [
          "bubblewrap.c",
          "utils.c",
          "utils.h"
        ],
        "message": "Don't rely on mkdir returning EEXISTS (fixing NFS)\n\nFor NFS mounts if we call mkdir() on a read-only mount (such as when\nwe've created a read-only bind mount) the kernel will nor return EEXIST\neven when the directory exists, instead returning EROFS.\n\nSo, we add (and use) an ensure_dir() helper that stats before calling\nmkdir.\n\nCloses: #258\nApproved by: giuseppe",
        "before_after_code_files": [
          "bubblewrap.c||bubblewrap.c",
          "utils.c||utils.c",
          "utils.h||utils.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "bubblewrap.c||bubblewrap.c"
          ],
          "candidate": [
            "bubblewrap.c||bubblewrap.c"
          ]
        }
      },
      "candidate_diff": {
        "bubblewrap.c||bubblewrap.c": [
          "File: bubblewrap.c -> bubblewrap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "980:         case SETUP_BIND_MOUNT:",
          "981:           if (source_mode == S_IFDIR)",
          "982:             {",
          "984:                 die_with_error (\"Can't mkdir %s\", op->dest);",
          "985:             }",
          "986:           else if (ensure_file (dest, 0666) != 0)",
          "",
          "[Removed Lines]",
          "983:               if (mkdir (dest, 0755) != 0 && errno != EEXIST)",
          "",
          "[Added Lines]",
          "983:               if (ensure_dir (dest, 0755) != 0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "999:           break;",
          "1001:         case SETUP_MOUNT_PROC:",
          "1003:             die_with_error (\"Can't mkdir %s\", op->dest);",
          "1005:           if (unshare_pid)",
          "",
          "[Removed Lines]",
          "1002:           if (mkdir (dest, 0755) != 0 && errno != EEXIST)",
          "",
          "[Added Lines]",
          "1002:           if (ensure_dir (dest, 0755) != 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1036:           break;",
          "1038:         case SETUP_MOUNT_DEV:",
          "1040:             die_with_error (\"Can't mkdir %s\", op->dest);",
          "1042:           privileged_op (privileged_op_socket,",
          "",
          "[Removed Lines]",
          "1039:           if (mkdir (dest, 0755) != 0 && errno != EEXIST)",
          "",
          "[Added Lines]",
          "1039:           if (ensure_dir (dest, 0755) != 0)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1112:           break;",
          "1114:         case SETUP_MOUNT_TMPFS:",
          "1116:             die_with_error (\"Can't mkdir %s\", op->dest);",
          "1118:           privileged_op (privileged_op_socket,",
          "",
          "[Removed Lines]",
          "1115:           if (mkdir (dest, 0755) != 0 && errno != EEXIST)",
          "",
          "[Added Lines]",
          "1115:           if (ensure_dir (dest, 0755) != 0)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1121:           break;",
          "1123:         case SETUP_MOUNT_MQUEUE:",
          "1125:             die_with_error (\"Can't mkdir %s\", op->dest);",
          "1127:           privileged_op (privileged_op_socket,",
          "",
          "[Removed Lines]",
          "1124:           if (mkdir (dest, 0755) != 0 && errno != EEXIST)",
          "",
          "[Added Lines]",
          "1124:           if (ensure_dir (dest, 0755) != 0)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1130:           break;",
          "1132:         case SETUP_MAKE_DIR:",
          "1134:             die_with_error (\"Can't mkdir %s\", op->dest);",
          "1136:           break;",
          "",
          "[Removed Lines]",
          "1133:           if (mkdir (dest, 0755) != 0 && errno != EEXIST)",
          "",
          "[Added Lines]",
          "1133:           if (ensure_dir (dest, 0755) != 0)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2083:   base_path = xasprintf (\"/run/user/%d/.bubblewrap\", real_uid);",
          "2085:     {",
          "2086:       free (base_path);",
          "2087:       base_path = xasprintf (\"/tmp/.bubblewrap-%d\", real_uid);",
          "2089:         die_with_error (\"Creating root mountpoint failed\");",
          "2090:     }",
          "",
          "[Removed Lines]",
          "2084:   if (mkdir (base_path, 0755) && errno != EEXIST)",
          "2088:       if (mkdir (base_path, 0755) && errno != EEXIST)",
          "",
          "[Added Lines]",
          "2084:   if (ensure_dir (base_path, 0755))",
          "2088:       if (ensure_dir (base_path, 0755))",
          "",
          "---------------"
        ],
        "utils.c||utils.c": [
          "File: utils.c -> utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "593:   return buf.st_mode & S_IFMT;",
          "594: }",
          "597: int",
          "598: mkdir_with_parents (const char *pathname,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "596: int",
          "597: ensure_dir (const char *path,",
          "598:             mode_t      mode)",
          "599: {",
          "600:   struct stat buf;",
          "603:      the mkdir call can fail in the read-only",
          "604:      case with EROFS instead of EEXIST on some",
          "606:   if (stat (path, &buf) == 0)",
          "607:     {",
          "608:       if (!S_ISDIR (buf.st_mode))",
          "609:         {",
          "610:           errno = ENOTDIR;",
          "611:           return -1;",
          "612:         }",
          "614:       return 0;",
          "615:     }",
          "617:   if (mkdir (path, mode) == -1 && errno != EEXIST)",
          "618:     return -1;",
          "620:   return 0;",
          "621: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "601: {",
          "602:   cleanup_free char *fn = NULL;",
          "603:   char *p;",
          "606:   if (pathname == NULL || *pathname == '\\0')",
          "607:     {",
          "",
          "[Removed Lines]",
          "604:   struct stat buf;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "628:       if (!create_last && p == NULL)",
          "629:         break;",
          "642:       if (p)",
          "643:         {",
          "",
          "[Removed Lines]",
          "631:       if (stat (fn, &buf) !=  0)",
          "632:         {",
          "633:           if (mkdir (fn, mode) == -1 && errno != EEXIST)",
          "634:             return -1;",
          "635:         }",
          "636:       else if (!S_ISDIR (buf.st_mode))",
          "637:         {",
          "638:           errno = ENOTDIR;",
          "639:           return -1;",
          "640:         }",
          "",
          "[Added Lines]",
          "658:       if (ensure_dir (fn, mode) != 0)",
          "659:         return -1;",
          "",
          "---------------"
        ],
        "utils.h||utils.h": [
          "File: utils.h -> utils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:                    const char *content);",
          "102: int   ensure_file (const char *path,",
          "103:                    mode_t      mode);",
          "104: int   get_file_mode (const char *pathname);",
          "105: int   mkdir_with_parents (const char *pathname,",
          "106:                           int         mode,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104: int   ensure_dir (const char *path,",
          "105:                   mode_t      mode);",
          "",
          "---------------"
        ]
      }
    }
  ]
}