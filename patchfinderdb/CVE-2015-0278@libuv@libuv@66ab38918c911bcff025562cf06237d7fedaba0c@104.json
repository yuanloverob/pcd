{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1d5c61a8b31257733c41fb507762d3eb56eecb2d",
      "candidate_info": {
        "commit_hash": "1d5c61a8b31257733c41fb507762d3eb56eecb2d",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/1d5c61a8b31257733c41fb507762d3eb56eecb2d",
        "files": [
          "src/win/util.c"
        ],
        "message": "windows: simplify netmask detection in uv_interface_addresses",
        "before_after_code_files": [
          "src/win/util.c||src/win/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/util.c||src/win/util.c": [
          "File: src/win/util.c -> src/win/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "912:     prefix = win_address->FirstPrefix;",
          "915:     for (unicast_address = (IP_ADAPTER_UNICAST_ADDRESS_XP*)",
          "916:                            win_address->FirstUnicastAddress;",
          "919:       struct sockaddr* sa;",
          "938:         uv_address->address.address6 = *((struct sockaddr_in6 *) sa);",
          "940:         uv_address->netmask.netmask6.sin6_family = AF_INET6;",
          "952:       } else {",
          "953:         uv_address->address.address4 = *((struct sockaddr_in *) sa);",
          "955:         uv_address->netmask.netmask4.sin_family = AF_INET;",
          "957:         uv_address->netmask.netmask4.sin_addr.s_addr =",
          "959:       }",
          "964:       uv_address++;",
          "965:     }",
          "",
          "[Removed Lines]",
          "917:          unicast_address != NULL;",
          "918:          unicast_address = unicast_address->Next) {",
          "920:       int prefixlen;",
          "922:       uv_address->name = name_buf;",
          "925:          the prefixlen for each address.  On Vista and newer, we could",
          "927:       if (prefix != NULL) {",
          "928:         prefixlen = prefix->PrefixLength;",
          "929:         prefix = prefix->Next;",
          "930:       } else {",
          "931:         prefixlen = 0;",
          "932:       }",
          "934:       sa = unicast_address->Address.lpSockaddr;",
          "935:       if (sa->sa_family == AF_INET6) {",
          "936:         int i;",
          "941:         prefixlen = prefixlen > 0 ? prefixlen : 128;",
          "942:         for (i = 0; i < 16; ++i) {",
          "943:           int bits;",
          "944:           uint8_t byte_val;",
          "946:           bits = prefixlen < 8 ? prefixlen : 8;",
          "947:           byte_val = ~(0xff >> bits);",
          "948:           prefixlen -= bits;",
          "950:           uv_address->netmask.netmask6.sin6_addr.s6_addr[i] = byte_val;",
          "951:         }",
          "956:         prefixlen = prefixlen > 0 ? prefixlen : 32;",
          "958:           htonl(0xffffffff << (32 - prefixlen));",
          "961:       uv_address->is_internal =",
          "962:           (win_address->IfType == IF_TYPE_SOFTWARE_LOOPBACK);",
          "",
          "[Added Lines]",
          "918:          unicast_address != NULL && prefix != NULL;",
          "919:          unicast_address = unicast_address->Next, prefix = prefix->Next) {",
          "921:       ULONG prefix_len;",
          "923:       sa = unicast_address->Address.lpSockaddr;",
          "924:       prefix_len = prefix->PrefixLength;",
          "926:       memset(uv_address, 0, sizeof *uv_address);",
          "928:       uv_address->name = name_buf;",
          "929:       uv_address->is_internal =",
          "930:           (win_address->IfType == IF_TYPE_SOFTWARE_LOOPBACK);",
          "932:       if (sa->sa_family == AF_INET6) {",
          "936:         memset(uv_address->netmask.netmask6.sin6_addr.s6_addr, 0xff, prefix_len >> 3);",
          "937:         uv_address->netmask.netmask6.sin6_addr.s6_addr[prefix_len >> 3] =",
          "938:             0xff << (8 - prefix_len % 8);",
          "945:             htonl(0xffffffff << (32 - prefix_len));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "499c7976c613ba0291f55d8f2ff69434fbc4c950",
      "candidate_info": {
        "commit_hash": "499c7976c613ba0291f55d8f2ff69434fbc4c950",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/499c7976c613ba0291f55d8f2ff69434fbc4c950",
        "files": [
          "include/uv-private/uv-unix.h",
          "include/uv-private/uv-win.h",
          "include/uv.h",
          "src/fs-poll.c",
          "src/unix/fs.c",
          "src/win/fs.c",
          "test/test-fs-poll.c",
          "test/test-fs.c"
        ],
        "message": "unix, windows: nanosecond resolution for uv_fs_[fl]stat\n\nCloses #739.",
        "before_after_code_files": [
          "include/uv-private/uv-unix.h||include/uv-private/uv-unix.h",
          "include/uv-private/uv-win.h||include/uv-private/uv-win.h",
          "include/uv.h||include/uv.h",
          "src/fs-poll.c||src/fs-poll.c",
          "src/unix/fs.c||src/unix/fs.c",
          "src/win/fs.c||src/win/fs.c",
          "test/test-fs-poll.c||test/test-fs-poll.c",
          "test/test-fs.c||test/test-fs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv-private/uv-unix.h||include/uv-private/uv-unix.h": [
          "File: include/uv-private/uv-unix.h -> include/uv-private/uv-unix.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "122: typedef int uv_file;",
          "123: typedef int uv_os_sock_t;",
          "126: #define UV_ONCE_INIT PTHREAD_ONCE_INIT",
          "",
          "[Removed Lines]",
          "124: typedef struct stat uv_statbuf_t;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/uv-private/uv-win.h||include/uv-private/uv-win.h": [
          "File: include/uv-private/uv-win.h -> include/uv-private/uv-win.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "208: typedef int uv_file;",
          "212: typedef SOCKET uv_os_sock_t;",
          "214: typedef HANDLE uv_thread_t;",
          "",
          "[Removed Lines]",
          "210: typedef struct _stati64 uv_statbuf_t;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "350:                                   int status,",
          "351:                                   struct addrinfo* res);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "353: typedef struct {",
          "354:   long tv_sec;",
          "355:   long tv_nsec;",
          "356: } uv_timespec_t;",
          "359: typedef struct {",
          "360:   uint64_t st_dev;",
          "361:   uint64_t st_mode;",
          "362:   uint64_t st_nlink;",
          "363:   uint64_t st_uid;",
          "364:   uint64_t st_gid;",
          "365:   uint64_t st_rdev;",
          "366:   uint64_t st_ino;",
          "367:   uint64_t st_size;",
          "368:   uint64_t st_blksize;",
          "369:   uint64_t st_blocks;",
          "370:   uv_timespec_t st_atim;",
          "371:   uv_timespec_t st_mtim;",
          "372:   uv_timespec_t st_ctim;",
          "373: } uv_stat_t;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "362: typedef void (*uv_fs_poll_cb)(uv_fs_poll_t* handle,",
          "363:                               int status,",
          "367: typedef void (*uv_signal_cb)(uv_signal_t* handle, int signum);",
          "",
          "[Removed Lines]",
          "364:                               const uv_statbuf_t* prev,",
          "365:                               const uv_statbuf_t* curr);",
          "",
          "[Added Lines]",
          "387:                               const uv_stat_t* prev,",
          "388:                               const uv_stat_t* curr);",
          "",
          "---------------"
        ],
        "src/fs-poll.c||src/fs-poll.c": [
          "File: src/fs-poll.c -> src/fs-poll.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:   uv_fs_poll_cb poll_cb;",
          "36:   uv_timer_t timer_handle;",
          "40: };",
          "43: static void poll_cb(uv_fs_t* req);",
          "44: static void timer_cb(uv_timer_t* timer, int status);",
          "45: static void timer_close_cb(uv_handle_t* handle);",
          "50: int uv_fs_poll_init(uv_loop_t* loop, uv_fs_poll_t* handle) {",
          "",
          "[Removed Lines]",
          "38:   uv_statbuf_t statbuf;",
          "42: static int statbuf_eq(const uv_statbuf_t* a, const uv_statbuf_t* b);",
          "47: static uv_statbuf_t zero_statbuf;",
          "",
          "[Added Lines]",
          "38:   uv_stat_t statbuf;",
          "42: static int statbuf_eq(const uv_stat_t* a, const uv_stat_t* b);",
          "47: static uv_stat_t zero_statbuf;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "139: static void poll_cb(uv_fs_t* req) {",
          "141:   struct poll_ctx* ctx;",
          "142:   uint64_t interval;",
          "",
          "[Removed Lines]",
          "140:   uv_statbuf_t* statbuf;",
          "",
          "[Added Lines]",
          "140:   uv_stat_t* statbuf;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "189: }",
          "227:       && a->st_size == b->st_size",
          "228:       && a->st_mode == b->st_mode",
          "229:       && a->st_uid == b->st_uid",
          "230:       && a->st_gid == b->st_gid",
          "231:       && a->st_ino == b->st_ino",
          "232:       && a->st_dev == b->st_dev;",
          "234: }",
          "",
          "[Removed Lines]",
          "192: static int statbuf_eq(const uv_statbuf_t* a, const uv_statbuf_t* b) {",
          "193: #if defined(_WIN32)",
          "194:   return a->st_mtime == b->st_mtime",
          "195:       && a->st_size == b->st_size",
          "196:       && a->st_mode == b->st_mode;",
          "197: #else",
          "200: # if defined(__linux__)",
          "202:   if (a->st_ctim.tv_nsec != b->st_ctim.tv_nsec) return 0;",
          "203:   if (a->st_mtim.tv_nsec != b->st_mtim.tv_nsec) return 0;",
          "204: #  else",
          "205:   if (a->st_ctimensec != b->st_ctimensec) return 0;",
          "206:   if (a->st_mtimensec != b->st_mtimensec) return 0;",
          "207: #  endif",
          "208: # endif",
          "211: # if defined(__APPLE__)",
          "212: #  if !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)",
          "213:   if (a->st_ctimespec.tv_nsec != b->st_ctimespec.tv_nsec) return 0;",
          "214:   if (a->st_mtimespec.tv_nsec != b->st_mtimespec.tv_nsec) return 0;",
          "215: #  else",
          "216:   if (a->st_ctimensec != b->st_ctimensec) return 0;",
          "217:   if (a->st_mtimensec != b->st_mtimensec) return 0;",
          "218: #  endif",
          "219: # endif",
          "225:   return a->st_ctime == b->st_ctime",
          "226:       && a->st_mtime == b->st_mtime",
          "233: #endif",
          "",
          "[Added Lines]",
          "192: static int statbuf_eq(const uv_stat_t* a, const uv_stat_t* b) {",
          "193:   return a->st_ctim.tv_nsec == b->st_ctim.tv_nsec",
          "194:       && a->st_mtim.tv_nsec == b->st_mtim.tv_nsec",
          "195:       && a->st_ctim.tv_sec == b->st_ctim.tv_sec",
          "196:       && a->st_mtim.tv_sec == b->st_mtim.tv_sec",
          "",
          "---------------"
        ],
        "src/unix/fs.c||src/unix/fs.c": [
          "File: src/unix/fs.c -> src/unix/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "497:   return r;",
          "498: }",
          "501: static void uv__fs_work(struct uv__work* w) {",
          "502:   int retry_on_eintr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "500: static inline void uv__to_stat(struct stat* src, uv_stat_t* dst) {",
          "501:   dst->st_dev = src->st_dev;",
          "502:   dst->st_mode = src->st_mode;",
          "503:   dst->st_nlink = src->st_nlink;",
          "504:   dst->st_uid = src->st_uid;",
          "505:   dst->st_gid = src->st_gid;",
          "506:   dst->st_rdev = src->st_rdev;",
          "507:   dst->st_ino = src->st_ino;",
          "508:   dst->st_size = src->st_size;",
          "509:   dst->st_blksize = src->st_blksize;",
          "510:   dst->st_blocks = src->st_blocks;",
          "512: #if defined(__APPLE__)",
          "513:   dst->st_atim.tv_sec = src->st_atimespec.tv_sec;",
          "514:   dst->st_atim.tv_nsec = src->st_atimespec.tv_nsec;",
          "515:   dst->st_mtim.tv_sec = src->st_mtimespec.tv_sec;",
          "516:   dst->st_mtim.tv_nsec = src->st_mtimespec.tv_nsec;",
          "517:   dst->st_ctim.tv_sec = src->st_ctimespec.tv_sec;",
          "518:   dst->st_ctim.tv_nsec = src->st_ctimespec.tv_nsec;",
          "519: #elif defined(_BSD_SOURCE) || defined(_SVID_SOURCE) || defined(_XOPEN_SOURCE)",
          "520:   dst->st_atim.tv_sec = src->st_atim.tv_sec;",
          "521:   dst->st_atim.tv_nsec = src->st_atim.tv_nsec;",
          "522:   dst->st_mtim.tv_sec = src->st_mtim.tv_sec;",
          "523:   dst->st_mtim.tv_nsec = src->st_mtim.tv_nsec;",
          "524:   dst->st_ctim.tv_sec = src->st_ctim.tv_sec;",
          "525:   dst->st_ctim.tv_nsec = src->st_ctim.tv_nsec;",
          "526: #else",
          "527:   dst->st_atim.tv_sec = src->st_atime;",
          "528:   dst->st_atim.tv_nsec = 0;",
          "529:   dst->st_mtim.tv_sec = src->st_mtime;",
          "530:   dst->st_mtim.tv_nsec = 0;",
          "531:   dst->st_ctim.tv_sec = src->st_ctime;",
          "532:   dst->st_ctim.tv_nsec = 0;",
          "533: #endif",
          "534: }",
          "537: static int uv__fs_stat(const char *path, uv_stat_t *buf) {",
          "538:   struct stat pbuf;",
          "539:   int ret;",
          "540:   ret = stat(path, &pbuf);",
          "541:   uv__to_stat(&pbuf, buf);",
          "542:   return ret;",
          "543: }",
          "546: static int uv__fs_lstat(const char *path, uv_stat_t *buf) {",
          "547:   struct stat pbuf;",
          "548:   int ret;",
          "549:   ret = lstat(path, &pbuf);",
          "550:   uv__to_stat(&pbuf, buf);",
          "551:   return ret;",
          "552: }",
          "555: static int uv__fs_fstat(int fd, uv_stat_t *buf) {",
          "556:   struct stat pbuf;",
          "557:   int ret;",
          "558:   ret = fstat(fd, &pbuf);",
          "559:   uv__to_stat(&pbuf, buf);",
          "560:   return ret;",
          "561: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "521:     X(FCHMOD, fchmod(req->file, req->mode));",
          "522:     X(FCHOWN, fchown(req->file, req->uid, req->gid));",
          "523:     X(FDATASYNC, uv__fs_fdatasync(req));",
          "525:     X(FSYNC, fsync(req->file));",
          "526:     X(FTRUNCATE, ftruncate(req->file, req->off));",
          "527:     X(FUTIME, uv__fs_futime(req));",
          "529:     X(LINK, link(req->path, req->new_path));",
          "530:     X(MKDIR, mkdir(req->path, req->mode));",
          "531:     X(OPEN, open(req->path, req->flags, req->mode));",
          "",
          "[Removed Lines]",
          "524:     X(FSTAT, fstat(req->file, &req->statbuf));",
          "528:     X(LSTAT, lstat(req->path, &req->statbuf));",
          "",
          "[Added Lines]",
          "587:     X(FSTAT, uv__fs_fstat(req->file, &req->statbuf));",
          "591:     X(LSTAT, uv__fs_lstat(req->path, &req->statbuf));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "535:     X(RENAME, rename(req->path, req->new_path));",
          "536:     X(RMDIR, rmdir(req->path));",
          "537:     X(SENDFILE, uv__fs_sendfile(req));",
          "539:     X(SYMLINK, symlink(req->path, req->new_path));",
          "540:     X(UNLINK, unlink(req->path));",
          "541:     X(UTIME, uv__fs_utime(req));",
          "",
          "[Removed Lines]",
          "538:     X(STAT, stat(req->path, &req->statbuf));",
          "",
          "[Added Lines]",
          "601:     X(STAT, uv__fs_stat(req->path, &req->statbuf));",
          "",
          "---------------"
        ],
        "src/win/fs.c||src/win/fs.c": [
          "File: src/win/fs.c -> src/win/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:     return;                                                                 \\",
          "78:   }",
          "80: #define FILETIME_TO_TIME_T(filetime)                                        \\",
          "83: #define TIME_T_TO_FILETIME(time, filetime_ptr)                              \\",
          "84:   do {                                                                      \\",
          "",
          "[Removed Lines]",
          "81:    ((*((uint64_t*) &(filetime)) - 116444736000000000ULL) / 10000000ULL);",
          "",
          "[Added Lines]",
          "80: #define FILETIME_TO_UINT(filetime)                                          \\",
          "81:    (*((uint64_t*) &(filetime)) - 116444736000000000ULL)",
          "84:    (FILETIME_TO_UINT(filetime) / 10000000ULL);",
          "86: #define FILETIME_TO_TIME_NS(filetime, secs)                                 \\",
          "87:    ((FILETIME_TO_UINT(filetime) - (secs * 10000000ULL)) * 100);",
          "89: #define FILETIME_TO_TIMESPEC(ts, filetime)                                  \\",
          "90:    do {                                                                     \\",
          "91:      (ts).tv_sec = FILETIME_TO_TIME_T(filetime);                            \\",
          "92:      (ts).tv_nsec = FILETIME_TO_TIME_NS(filetime, (ts).tv_sec);             \\",
          "93:    } while(0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "808: }",
          "812:   BY_HANDLE_FILE_INFORMATION info;",
          "814:   if (!GetFileInformationByHandle(handle, &info)) {",
          "",
          "[Removed Lines]",
          "811: INLINE static int fs__stat_handle(HANDLE handle, uv_statbuf_t* statbuf) {",
          "",
          "[Added Lines]",
          "822: INLINE static int fs__stat_handle(HANDLE handle, uv_stat_t* statbuf) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "826:   statbuf->st_mode = 0;",
          "828:   if (info.dwFileAttributes & FILE_ATTRIBUTE_REPARSE_POINT) {",
          "829:     if (fs__readlink_handle(handle, NULL, &statbuf->st_size) != 0) {",
          "830:       return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "839:   statbuf->st_blksize = 0;",
          "840:   statbuf->st_blocks = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "846:       ((_S_IREAD|_S_IWRITE) >> 6));",
          "847:   }",
          "853:   statbuf->st_nlink = (info.nNumberOfLinks <= SHRT_MAX) ?",
          "854:                       (short) info.nNumberOfLinks : SHRT_MAX;",
          "",
          "[Removed Lines]",
          "849:   statbuf->st_mtime = FILETIME_TO_TIME_T(info.ftLastWriteTime);",
          "850:   statbuf->st_atime = FILETIME_TO_TIME_T(info.ftLastAccessTime);",
          "851:   statbuf->st_ctime = FILETIME_TO_TIME_T(info.ftCreationTime);",
          "",
          "[Added Lines]",
          "863:   FILETIME_TO_TIMESPEC(statbuf->st_mtim, info.ftLastWriteTime);",
          "864:   FILETIME_TO_TIMESPEC(statbuf->st_atim, info.ftLastAccessTime);",
          "865:   FILETIME_TO_TIMESPEC(statbuf->st_ctim, info.ftCreationTime);",
          "",
          "---------------"
        ],
        "test/test-fs-poll.c||test/test-fs-poll.c": [
          "File: test/test-fs-poll.c -> test/test-fs-poll.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: static void close_cb(uv_handle_t* handle);",
          "31: static void poll_cb(uv_fs_poll_t* handle,",
          "32:                     int status,",
          "36: static uv_fs_poll_t poll_handle;",
          "37: static uv_timer_t timer_handle;",
          "",
          "[Removed Lines]",
          "33:                     const uv_statbuf_t* prev,",
          "34:                     const uv_statbuf_t* curr);",
          "",
          "[Added Lines]",
          "33:                     const uv_stat_t* prev,",
          "34:                     const uv_stat_t* curr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75: static void poll_cb(uv_fs_poll_t* handle,",
          "76:                     int status,",
          "81:   memset(&zero_statbuf, 0, sizeof(zero_statbuf));",
          "",
          "[Removed Lines]",
          "77:                     const uv_statbuf_t* prev,",
          "78:                     const uv_statbuf_t* curr) {",
          "79:   uv_statbuf_t zero_statbuf;",
          "",
          "[Added Lines]",
          "77:                     const uv_stat_t* prev,",
          "78:                     const uv_stat_t* curr) {",
          "79:   uv_stat_t zero_statbuf;",
          "",
          "---------------"
        ],
        "test/test-fs.c||test/test-fs.c": [
          "File: test/test-fs.c -> test/test-fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "107: static void check_permission(const char* filename, int mode) {",
          "108:   int r;",
          "109:   uv_fs_t req;",
          "112:   r = uv_fs_stat(uv_default_loop(), &req, filename, NULL);",
          "113:   ASSERT(r == 0);",
          "",
          "[Removed Lines]",
          "110:   uv_statbuf_t* s;",
          "",
          "[Added Lines]",
          "110:   uv_stat_t* s;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "213: }",
          "215: static void fstat_cb(uv_fs_t* req) {",
          "217:   ASSERT(req->fs_type == UV_FS_FSTAT);",
          "218:   ASSERT(req->result == 0);",
          "219:   ASSERT(s->st_size == sizeof(test_buf));",
          "",
          "[Removed Lines]",
          "216:   struct stat* s = req->ptr;",
          "",
          "[Added Lines]",
          "216:   uv_stat_t* s = req->ptr;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "543: }",
          "545: static void check_utime(const char* path, double atime, double mtime) {",
          "547:   uv_fs_t req;",
          "548:   int r;",
          "",
          "[Removed Lines]",
          "546:   uv_statbuf_t* s;",
          "",
          "[Added Lines]",
          "546:   uv_stat_t* s;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "553:   ASSERT(req.result == 0);",
          "554:   s = &req.statbuf;",
          "563:   ASSERT(s->st_atim.tv_sec  == atime);",
          "564:   ASSERT(s->st_mtim.tv_sec  == mtime);",
          "567:   uv_fs_req_cleanup(&req);",
          "568: }",
          "",
          "[Removed Lines]",
          "556: #if defined(_WIN32) || defined(_AIX)",
          "557:   ASSERT(s->st_atime == atime);",
          "558:   ASSERT(s->st_mtime == mtime);",
          "559: #elif !defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE)",
          "560:   ASSERT(s->st_atimespec.tv_sec  == atime);",
          "561:   ASSERT(s->st_mtimespec.tv_sec  == mtime);",
          "562: #else",
          "565: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "906:   int r;",
          "907:   uv_fs_t req;",
          "908:   uv_file file;",
          "912:   unlink(\"test_file\");",
          "",
          "[Removed Lines]",
          "909:   struct stat* s;",
          "",
          "[Added Lines]",
          "901:   uv_stat_t* s;",
          "902: #ifndef _WIN32",
          "903:   struct stat t;",
          "904: #endif",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "930:   ASSERT(req.result == 0);",
          "931:   s = req.ptr;",
          "932:   ASSERT(s->st_size == sizeof(test_buf));",
          "933:   uv_fs_req_cleanup(&req);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "929: #ifndef _WIN32",
          "930:   r = fstat(file, &t);",
          "931:   ASSERT(r == 0);",
          "933:   ASSERT(s->st_dev == t.st_dev);",
          "934:   ASSERT(s->st_mode == t.st_mode);",
          "935:   ASSERT(s->st_nlink == t.st_nlink);",
          "936:   ASSERT(s->st_uid == t.st_uid);",
          "937:   ASSERT(s->st_gid == t.st_gid);",
          "938:   ASSERT(s->st_rdev == t.st_rdev);",
          "939:   ASSERT(s->st_ino == t.st_ino);",
          "940:   ASSERT(s->st_size == t.st_size);",
          "941:   ASSERT(s->st_blksize == t.st_blksize);",
          "942:   ASSERT(s->st_blocks == t.st_blocks);",
          "943: #if defined(__APPLE__)",
          "944:   ASSERT(s->st_atim.tv_sec == t.st_atimespec.tv_sec);",
          "945:   ASSERT(s->st_atim.tv_nsec == t.st_atimespec.tv_nsec);",
          "946:   ASSERT(s->st_mtim.tv_sec == t.st_mtimespec.tv_sec);",
          "947:   ASSERT(s->st_mtim.tv_nsec == t.st_mtimespec.tv_nsec);",
          "948:   ASSERT(s->st_ctim.tv_sec == t.st_ctimespec.tv_sec);",
          "949:   ASSERT(s->st_ctim.tv_nsec == t.st_ctimespec.tv_nsec);",
          "950: #elif defined(_BSD_SOURCE) || defined(_SVID_SOURCE) || defined(_XOPEN_SOURCE)",
          "951:   ASSERT(s->st_atim.tv_sec == t.st_atim.tv_sec);",
          "952:   ASSERT(s->st_atim.tv_nsec == t.st_atim.tv_nsec);",
          "953:   ASSERT(s->st_mtim.tv_sec == t.st_mtim.tv_sec);",
          "954:   ASSERT(s->st_mtim.tv_nsec == t.st_mtim.tv_nsec);",
          "955:   ASSERT(s->st_ctim.tv_sec == t.st_ctim.tv_sec);",
          "956:   ASSERT(s->st_ctim.tv_nsec == t.st_ctim.tv_nsec);",
          "957: #else",
          "958:   ASSERT(s->st_atim.tv_sec == t.st_atime);",
          "959:   ASSERT(s->st_atim.tv_nsec == 0);",
          "960:   ASSERT(s->st_mtim.tv_sec == t.st_mtime);",
          "961:   ASSERT(s->st_mtim.tv_nsec == 0);",
          "962:   ASSERT(s->st_ctim.tv_sec == t.st_ctime);",
          "963:   ASSERT(s->st_ctim.tv_nsec == 0);",
          "964: #endif",
          "965: #endif",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1383:   r = uv_fs_stat(loop, &req, \"test_dir_symlink\", NULL);",
          "1384:   ASSERT(r == 0);",
          "1386:   uv_fs_req_cleanup(&req);",
          "1388:   r = uv_fs_lstat(loop, &req, \"test_dir_symlink\", NULL);",
          "1389:   ASSERT(r == 0);",
          "1391: #ifdef _WIN32",
          "1393: #else",
          "1395: #endif",
          "1396:   uv_fs_req_cleanup(&req);",
          "",
          "[Removed Lines]",
          "1385:   ASSERT(((struct stat*)req.ptr)->st_mode & S_IFDIR);",
          "1390:   ASSERT(((struct stat*)req.ptr)->st_mode & S_IFLNK);",
          "1392:   ASSERT(((struct stat*)req.ptr)->st_size == strlen(test_dir + 4));",
          "1394:   ASSERT(((struct stat*)req.ptr)->st_size == strlen(test_dir));",
          "",
          "[Added Lines]",
          "1419:   ASSERT(((uv_stat_t*)req.ptr)->st_mode & S_IFDIR);",
          "1424:   ASSERT(((uv_stat_t*)req.ptr)->st_mode & S_IFLNK);",
          "1426:   ASSERT(((uv_stat_t*)req.ptr)->st_size == strlen(test_dir + 4));",
          "1428:   ASSERT(((uv_stat_t*)req.ptr)->st_size == strlen(test_dir));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e525b89b036ec768ce30b32497d4a6bdccf81b11",
      "candidate_info": {
        "commit_hash": "e525b89b036ec768ce30b32497d4a6bdccf81b11",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/e525b89b036ec768ce30b32497d4a6bdccf81b11",
        "files": [
          "Makefile.mingw"
        ],
        "message": "build: allow CC to be overridden on Makefile.mingw",
        "before_after_code_files": [
          "Makefile.mingw||Makefile.mingw"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.mingw||Makefile.mingw": [
          "File: Makefile.mingw -> Makefile.mingw",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: # ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF",
          "13: # OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.",
          "17: CFLAGS += -Wall \\",
          "18:           -Wextra \\",
          "",
          "[Removed Lines]",
          "15: CC = gcc",
          "",
          "[Added Lines]",
          "15: CC ?= gcc",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8a4aa226772ecd4a2daec40d3806c03f001d2619",
      "candidate_info": {
        "commit_hash": "8a4aa226772ecd4a2daec40d3806c03f001d2619",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/8a4aa226772ecd4a2daec40d3806c03f001d2619",
        "files": [
          "include/uv.h"
        ],
        "message": "include: UV_FS_EVENT_RECURSIVE is a flag\n\nIt should not be the same as:\n\n`UV_FS_EVENT_WATCH_ENTRY | UV_FS_EVENT_STAT`\n\nBecause we never meant that, and that's not how it works.",
        "before_after_code_files": [
          "include/uv.h||include/uv.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1876:  UV_FS_EVENT_WATCH_ENTRY = 1,",
          "",
          "[Added Lines]",
          "1876:   UV_FS_EVENT_WATCH_ENTRY = 1,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1893: };",
          "",
          "[Removed Lines]",
          "1892:   UV_FS_EVENT_RECURSIVE = 3",
          "",
          "[Added Lines]",
          "1892:   UV_FS_EVENT_RECURSIVE = 4",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fe8322d27c3d5a3f2f8dd1121e993dcdeeead1db",
      "candidate_info": {
        "commit_hash": "fe8322d27c3d5a3f2f8dd1121e993dcdeeead1db",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/fe8322d27c3d5a3f2f8dd1121e993dcdeeead1db",
        "files": [
          "src/win/core.c",
          "src/win/internal.h"
        ],
        "message": "windows: fix mingw32/debug build\n\nDebug build failed on mingw32 because CRT assertion disable code was stubbed out.\nReplace __declspec(thread) with UV_THREAD_LOCAL which is defined as __thread on GCC.",
        "before_after_code_files": [
          "src/win/core.c||src/win/core.c",
          "src/win/internal.h||src/win/internal.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/core.c||src/win/core.c": [
          "File: src/win/core.c -> src/win/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include <stdio.h>",
          "27: #include <stdlib.h>",
          "28: #include <string.h>",
          "30: #include <crtdbg.h>",
          "33: #include \"uv.h\"",
          "34: #include \"internal.h\"",
          "",
          "[Removed Lines]",
          "29: #if !defined(__MINGW32__)",
          "31: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44: static uv_once_t uv_default_loop_init_guard_ = UV_ONCE_INIT;",
          "53: static int uv__crt_dbg_report_handler(int report_type, char *message, int *ret_val) {",
          "54:   if (uv__crt_assert_enabled || report_type != _CRT_ASSERT)",
          "",
          "[Removed Lines]",
          "47: #if defined(_DEBUG) && !defined(__MINGW32__)",
          "51: __declspec( thread ) int uv__crt_assert_enabled = TRUE;",
          "",
          "[Added Lines]",
          "45: #if defined(_DEBUG)",
          "49: UV_THREAD_LOCAL int uv__crt_assert_enabled = TRUE;",
          "",
          "---------------"
        ],
        "src/win/internal.h||src/win/internal.h": [
          "File: src/win/internal.h -> src/win/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #ifdef _MSC_VER",
          "33: # define INLINE __inline",
          "34: #else",
          "35: # define INLINE inline",
          "36: #endif",
          "39: #ifdef _DEBUG",
          "42: #define UV_BEGIN_DISABLE_CRT_ASSERT()                           \\",
          "43:   {                                                             \\",
          "",
          "[Removed Lines]",
          "40: extern __declspec( thread ) int uv__crt_assert_enabled;",
          "",
          "[Added Lines]",
          "34: # define UV_THREAD_LOCAL __declspec( thread )",
          "37: # define UV_THREAD_LOCAL __thread",
          "43: extern UV_THREAD_LOCAL int uv__crt_assert_enabled;",
          "",
          "---------------"
        ]
      }
    }
  ]
}