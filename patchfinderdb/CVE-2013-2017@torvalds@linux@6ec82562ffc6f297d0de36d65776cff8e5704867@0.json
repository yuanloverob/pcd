{
  "cve_id": "CVE-2013-2017",
  "cve_desc": "The veth (aka virtual Ethernet) driver in the Linux kernel before 2.6.34 does not properly manage skbs during congestion, which allows remote attackers to cause a denial of service (system crash) by leveraging lack of skb consumption in conjunction with a double-free error.",
  "repo": "torvalds/linux",
  "patch_hash": "6ec82562ffc6f297d0de36d65776cff8e5704867",
  "patch_info": {
    "commit_hash": "6ec82562ffc6f297d0de36d65776cff8e5704867",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/6ec82562ffc6f297d0de36d65776cff8e5704867",
    "files": [
      "drivers/net/veth.c",
      "net/core/dev.c"
    ],
    "message": "veth: Dont kfree_skb() after dev_forward_skb()\n\nIn case of congestion, netif_rx() frees the skb, so we must assume\ndev_forward_skb() also consume skb.\n\nBug introduced by commit 445409602c092\n(veth: move loopback logic to common location)\n\nWe must change dev_forward_skb() to always consume skb, and veth to not\ndouble free it.\n\nBug report : http://marc.info/?l=linux-netdev&m=127310770900442&w=3\n\nReported-by: Mart\u00edn Ferrari <martin.ferrari@gmail.com>\nSigned-off-by: Eric Dumazet <eric.dumazet@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "drivers/net/veth.c||drivers/net/veth.c",
      "net/core/dev.c||net/core/dev.c"
    ]
  },
  "patch_diff": {
    "drivers/net/veth.c||drivers/net/veth.c": [
      "File: drivers/net/veth.c -> drivers/net/veth.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "187:  return NETDEV_TX_OK;",
      "189: rx_drop:",
      "191:  rcv_stats->rx_dropped++;",
      "192:  return NETDEV_TX_OK;",
      "193: }",
      "",
      "[Removed Lines]",
      "190:  kfree_skb(skb);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "net/core/dev.c||net/core/dev.c": [
      "File: net/core/dev.c -> net/core/dev.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1465: {",
      "1466:  skb_orphan(skb);",
      "1472:   return NET_RX_DROP;",
      "1474:  skb_set_dev(skb, dev);",
      "1475:  skb->tstamp.tv64 = 0;",
      "1476:  skb->pkt_type = PACKET_HOST;",
      "",
      "[Removed Lines]",
      "1468:  if (!(dev->flags & IFF_UP))",
      "1469:   return NET_RX_DROP;",
      "1471:  if (skb->len > (dev->mtu + dev->hard_header_len))",
      "",
      "[Added Lines]",
      "1468:  if (!(dev->flags & IFF_UP) ||",
      "1469:      (skb->len > (dev->mtu + dev->hard_header_len))) {",
      "1470:   kfree_skb(skb);",
      "1472:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "445409602c09219767c06497c0dc2285eac244ed",
      "candidate_info": {
        "commit_hash": "445409602c09219767c06497c0dc2285eac244ed",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/445409602c09219767c06497c0dc2285eac244ed",
        "files": [
          "drivers/net/veth.c",
          "include/linux/netdevice.h",
          "net/core/dev.c"
        ],
        "message": "veth: move loopback logic to common location\n\nThe veth driver contains code to forward an skb\nfrom the start_xmit function of one network\ndevice into the receive path of another device.\n\nMoving that code into a common location lets us\nreuse the code for direct forwarding of data\nbetween macvlan ports, and possibly in other\ndrivers.\n\nSigned-off-by: Arnd Bergmann <arnd@arndb.de>\nAcked-by: Patrick McHardy <kaber@trash.net>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "drivers/net/veth.c||drivers/net/veth.c",
          "include/linux/netdevice.h||include/linux/netdevice.h",
          "net/core/dev.c||net/core/dev.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/net/veth.c||drivers/net/veth.c",
            "net/core/dev.c||net/core/dev.c"
          ],
          "candidate": [
            "drivers/net/veth.c||drivers/net/veth.c",
            "net/core/dev.c||net/core/dev.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/net/veth.c||drivers/net/veth.c": [
          "File: drivers/net/veth.c -> drivers/net/veth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:  struct veth_net_stats *stats, *rcv_stats;",
          "156:  int length, cpu;",
          "160:  priv = netdev_priv(dev);",
          "161:  rcv = priv->peer;",
          "162:  rcv_priv = netdev_priv(rcv);",
          "",
          "[Removed Lines]",
          "158:  skb_orphan(skb);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "168:  if (!(rcv->flags & IFF_UP))",
          "169:   goto tx_drop;",
          "177:  if (dev->features & NETIF_F_NO_CSUM)",
          "178:   skb->ip_summed = rcv_priv->ip_summed;",
          "186:  stats->tx_bytes += length;",
          "187:  stats->tx_packets++;",
          "",
          "[Removed Lines]",
          "171:  if (skb->len > (rcv->mtu + MTU_PAD))",
          "172:   goto rx_drop;",
          "174:         skb->tstamp.tv64 = 0;",
          "175:  skb->pkt_type = PACKET_HOST;",
          "176:  skb->protocol = eth_type_trans(skb, rcv);",
          "180:  skb->mark = 0;",
          "181:  secpath_reset(skb);",
          "182:  nf_reset(skb);",
          "184:  length = skb->len;",
          "",
          "[Added Lines]",
          "172:  length = skb->len + ETH_HLEN;",
          "173:  if (dev_forward_skb(rcv, skb) != NET_RX_SUCCESS)",
          "174:   goto rx_drop;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "189:  rcv_stats->rx_bytes += length;",
          "190:  rcv_stats->rx_packets++;",
          "193:  return NETDEV_TX_OK;",
          "195: tx_drop:",
          "",
          "[Removed Lines]",
          "192:  netif_rx(skb);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/linux/netdevice.h||include/linux/netdevice.h": [
          "File: include/linux/netdevice.h -> include/linux/netdevice.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1562: extern int  dev_hard_start_xmit(struct sk_buff *skb,",
          "1563:          struct net_device *dev,",
          "1564:          struct netdev_queue *txq);",
          "1566: extern int  netdev_budget;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1565: extern int  dev_forward_skb(struct net_device *dev,",
          "1566:      struct sk_buff *skb);",
          "",
          "---------------"
        ],
        "net/core/dev.c||net/core/dev.c": [
          "File: net/core/dev.c -> net/core/dev.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "105: #include <net/dst.h>",
          "106: #include <net/pkt_sched.h>",
          "107: #include <net/checksum.h>",
          "108: #include <linux/highmem.h>",
          "109: #include <linux/init.h>",
          "110: #include <linux/kmod.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108: #include <net/xfrm.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1419:   skb->tstamp.tv64 = 0;",
          "1420: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1441: int dev_forward_skb(struct net_device *dev, struct sk_buff *skb)",
          "1442: {",
          "1443:  skb_orphan(skb);",
          "1445:  if (!(dev->flags & IFF_UP))",
          "1446:   return NET_RX_DROP;",
          "1448:  if (skb->len > (dev->mtu + dev->hard_header_len))",
          "1449:   return NET_RX_DROP;",
          "1451:  skb_dst_drop(skb);",
          "1452:  skb->tstamp.tv64 = 0;",
          "1453:  skb->pkt_type = PACKET_HOST;",
          "1454:  skb->protocol = eth_type_trans(skb, dev);",
          "1455:  skb->mark = 0;",
          "1456:  secpath_reset(skb);",
          "1457:  nf_reset(skb);",
          "1458:  return netif_rx(skb);",
          "1459: }",
          "1460: EXPORT_SYMBOL_GPL(dev_forward_skb);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "caf586e5f23cebb2a68cbaf288d59dbbf2d74052",
      "candidate_info": {
        "commit_hash": "caf586e5f23cebb2a68cbaf288d59dbbf2d74052",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/caf586e5f23cebb2a68cbaf288d59dbbf2d74052",
        "files": [
          "drivers/net/loopback.c",
          "include/linux/netdevice.h",
          "net/8021q/vlan.h",
          "net/8021q/vlan_core.c",
          "net/8021q/vlan_dev.c",
          "net/core/dev.c",
          "net/ipv4/ip_gre.c",
          "net/ipv4/ipip.c",
          "net/ipv6/ip6_tunnel.c",
          "net/ipv6/ip6mr.c",
          "net/ipv6/sit.c"
        ],
        "message": "net: add a core netdev->rx_dropped counter\n\nIn various situations, a device provides a packet to our stack and we\ndrop it before it enters protocol stack :\n- softnet backlog full (accounted in /proc/net/softnet_stat)\n- bad vlan tag (not accounted)\n- unknown/unregistered protocol (not accounted)\n\nWe can handle a per-device counter of such dropped frames at core level,\nand automatically adds it to the device provided stats (rx_dropped), so\nthat standard tools can be used (ifconfig, ip link, cat /proc/net/dev)\n\nThis is a generalization of commit 8990f468a (net: rx_dropped\naccounting), thus reverting it.\n\nSigned-off-by: Eric Dumazet <eric.dumazet@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "drivers/net/loopback.c||drivers/net/loopback.c",
          "include/linux/netdevice.h||include/linux/netdevice.h",
          "net/8021q/vlan.h||net/8021q/vlan.h",
          "net/8021q/vlan_core.c||net/8021q/vlan_core.c",
          "net/8021q/vlan_dev.c||net/8021q/vlan_dev.c",
          "net/core/dev.c||net/core/dev.c",
          "net/ipv4/ip_gre.c||net/ipv4/ip_gre.c",
          "net/ipv4/ipip.c||net/ipv4/ipip.c",
          "net/ipv6/ip6_tunnel.c||net/ipv6/ip6_tunnel.c",
          "net/ipv6/ip6mr.c||net/ipv6/ip6mr.c",
          "net/ipv6/sit.c||net/ipv6/sit.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/core/dev.c||net/core/dev.c"
          ],
          "candidate": [
            "net/core/dev.c||net/core/dev.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/net/loopback.c||drivers/net/loopback.c": [
          "File: drivers/net/loopback.c -> drivers/net/loopback.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:  u64   packets;",
          "65:  u64   bytes;",
          "66:  struct u64_stats_sync syncp;",
          "68: };",
          "",
          "[Removed Lines]",
          "67:  unsigned long  drops;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:   lb_stats->bytes += len;",
          "91:   lb_stats->packets++;",
          "92:   u64_stats_update_end(&lb_stats->syncp);",
          "96:  return NETDEV_TX_OK;",
          "97: }",
          "",
          "[Removed Lines]",
          "93:  } else",
          "94:   lb_stats->drops++;",
          "",
          "[Added Lines]",
          "92:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101: {",
          "102:  u64 bytes = 0;",
          "103:  u64 packets = 0;",
          "105:  int i;",
          "107:  for_each_possible_cpu(i) {",
          "",
          "[Removed Lines]",
          "104:  u64 drops = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "115:    tbytes = lb_stats->bytes;",
          "116:    tpackets = lb_stats->packets;",
          "117:   } while (u64_stats_fetch_retry(&lb_stats->syncp, start));",
          "119:   bytes   += tbytes;",
          "120:   packets += tpackets;",
          "121:  }",
          "122:  stats->rx_packets = packets;",
          "123:  stats->tx_packets = packets;",
          "126:  stats->rx_bytes   = bytes;",
          "127:  stats->tx_bytes   = bytes;",
          "128:  return stats;",
          "",
          "[Removed Lines]",
          "118:   drops   += lb_stats->drops;",
          "124:  stats->rx_dropped = drops;",
          "125:  stats->rx_errors  = drops;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/linux/netdevice.h||include/linux/netdevice.h": [
          "File: include/linux/netdevice.h -> include/linux/netdevice.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "884:  int   iflink;",
          "886:  struct net_device_stats stats;",
          "888: #ifdef CONFIG_WIRELESS_EXT",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "887:  atomic_long_t  rx_dropped; /* dropped packets by core network",
          "",
          "---------------"
        ],
        "net/8021q/vlan.h||net/8021q/vlan.h": [
          "File: net/8021q/vlan.h -> net/8021q/vlan.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:  u64   rx_multicast;",
          "34:  struct u64_stats_sync syncp;",
          "35:  unsigned long  rx_errors;",
          "37: };",
          "",
          "[Removed Lines]",
          "36:  unsigned long  rx_dropped;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "net/8021q/vlan_core.c||net/8021q/vlan_core.c": [
          "File: net/8021q/vlan_core.c -> net/8021q/vlan_core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:  return polling ? netif_receive_skb(skb) : netif_rx(skb);",
          "35: drop:",
          "36:  dev_kfree_skb_any(skb);",
          "37:  return NET_RX_DROP;",
          "38: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:  atomic_long_inc(&skb->dev->rx_dropped);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123:  return dev_gro_receive(napi, skb);",
          "125: drop:",
          "126:  return GRO_DROP;",
          "127: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:  atomic_long_inc(&skb->dev->rx_dropped);",
          "",
          "---------------"
        ],
        "net/8021q/vlan_dev.c||net/8021q/vlan_dev.c": [
          "File: net/8021q/vlan_dev.c -> net/8021q/vlan_dev.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "225:   }",
          "226:  }",
          "232:  rcu_read_unlock();",
          "233:  return NET_RX_SUCCESS;",
          "235: err_unlock:",
          "236:  rcu_read_unlock();",
          "237: err_free:",
          "238:  kfree_skb(skb);",
          "239:  return NET_RX_DROP;",
          "240: }",
          "",
          "[Removed Lines]",
          "228:  if (unlikely(netif_rx(skb) == NET_RX_DROP)) {",
          "229:   if (rx_stats)",
          "230:    rx_stats->rx_dropped++;",
          "231:  }",
          "",
          "[Added Lines]",
          "228:  netif_rx(skb);",
          "236:  atomic_long_inc(&dev->rx_dropped);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "846:    accum.rx_packets += rxpackets;",
          "847:    accum.rx_bytes   += rxbytes;",
          "848:    accum.rx_multicast += rxmulticast;",
          "850:    accum.rx_errors  += p->rx_errors;",
          "852:   }",
          "853:   stats->rx_packets = accum.rx_packets;",
          "854:   stats->rx_bytes   = accum.rx_bytes;",
          "855:   stats->rx_errors  = accum.rx_errors;",
          "856:   stats->multicast  = accum.rx_multicast;",
          "858:  }",
          "859:  return stats;",
          "860: }",
          "",
          "[Removed Lines]",
          "851:    accum.rx_dropped += p->rx_dropped;",
          "857:   stats->rx_dropped = accum.rx_dropped;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "net/core/dev.c||net/core/dev.c": [
          "File: net/core/dev.c -> net/core/dev.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1483:  skb_orphan(skb);",
          "1484:  nf_reset(skb);",
          "1488:   kfree_skb(skb);",
          "1489:   return NET_RX_DROP;",
          "1490:  }",
          "",
          "[Removed Lines]",
          "1486:  if (!(dev->flags & IFF_UP) ||",
          "1487:      (skb->len > (dev->mtu + dev->hard_header_len))) {",
          "",
          "[Added Lines]",
          "1486:  if (unlikely(!(dev->flags & IFF_UP) ||",
          "1487:        (skb->len > (dev->mtu + dev->hard_header_len)))) {",
          "1488:   atomic_long_inc(&dev->rx_dropped);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2549:  local_irq_restore(flags);",
          "2551:  kfree_skb(skb);",
          "2552:  return NET_RX_DROP;",
          "2553: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2552:  atomic_long_inc(&skb->dev->rx_dropped);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2995:  if (pt_prev) {",
          "2996:   ret = pt_prev->func(skb, skb->dev, pt_prev, orig_dev);",
          "2997:  } else {",
          "2998:   kfree_skb(skb);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3000:   atomic_long_inc(&skb->dev->rx_dropped);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5430:  if (ops->ndo_get_stats64) {",
          "5431:   memset(storage, 0, sizeof(*storage));",
          "5435:   netdev_stats_to_stats64(storage, ops->ndo_get_stats(dev));",
          "5437:  }",
          "5440:  return storage;",
          "5441: }",
          "5442: EXPORT_SYMBOL(dev_get_stats);",
          "",
          "[Removed Lines]",
          "5432:   return ops->ndo_get_stats64(dev, storage);",
          "5433:  }",
          "5434:  if (ops->ndo_get_stats) {",
          "5436:   return storage;",
          "5438:  netdev_stats_to_stats64(storage, &dev->stats);",
          "5439:  dev_txq_stats_fold(dev, storage);",
          "",
          "[Added Lines]",
          "5435:   ops->ndo_get_stats64(dev, storage);",
          "5436:  } else if (ops->ndo_get_stats) {",
          "5438:  } else {",
          "5439:   netdev_stats_to_stats64(storage, &dev->stats);",
          "5440:   dev_txq_stats_fold(dev, storage);",
          "5442:  storage->rx_dropped += atomic_long_read(&dev->rx_dropped);",
          "",
          "---------------"
        ],
        "net/ipv4/ip_gre.c||net/ipv4/ip_gre.c": [
          "File: net/ipv4/ip_gre.c -> net/ipv4/ip_gre.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "679:   skb_reset_network_header(skb);",
          "680:   ipgre_ecn_decapsulate(iph, skb);",
          "685:   rcu_read_unlock();",
          "686:   return 0;",
          "",
          "[Removed Lines]",
          "682:   if (netif_rx(skb) == NET_RX_DROP)",
          "683:    tunnel->dev->stats.rx_dropped++;",
          "",
          "[Added Lines]",
          "682:   netif_rx(skb);",
          "",
          "---------------"
        ],
        "net/ipv4/ipip.c||net/ipv4/ipip.c": [
          "File: net/ipv4/ipip.c -> net/ipv4/ipip.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "415:   ipip_ecn_decapsulate(iph, skb);",
          "420:   rcu_read_unlock();",
          "421:   return 0;",
          "",
          "[Removed Lines]",
          "417:   if (netif_rx(skb) == NET_RX_DROP)",
          "418:    tunnel->dev->stats.rx_dropped++;",
          "",
          "[Added Lines]",
          "417:   netif_rx(skb);",
          "",
          "---------------"
        ],
        "net/ipv6/ip6_tunnel.c||net/ipv6/ip6_tunnel.c": [
          "File: net/ipv6/ip6_tunnel.c -> net/ipv6/ip6_tunnel.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "769:   dscp_ecn_decapsulate(t, ipv6h, skb);",
          "774:   rcu_read_unlock();",
          "775:   return 0;",
          "",
          "[Removed Lines]",
          "771:   if (netif_rx(skb) == NET_RX_DROP)",
          "772:    t->dev->stats.rx_dropped++;",
          "",
          "[Added Lines]",
          "771:   netif_rx(skb);",
          "",
          "---------------"
        ],
        "net/ipv6/ip6mr.c||net/ipv6/ip6mr.c": [
          "File: net/ipv6/ip6mr.c -> net/ipv6/ip6mr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "667:  skb_tunnel_rx(skb, reg_dev);",
          "672:  dev_put(reg_dev);",
          "673:  return 0;",
          "",
          "[Removed Lines]",
          "669:  if (netif_rx(skb) == NET_RX_DROP)",
          "670:   reg_dev->stats.rx_dropped++;",
          "",
          "[Added Lines]",
          "669:  netif_rx(skb);",
          "",
          "---------------"
        ],
        "net/ipv6/sit.c||net/ipv6/sit.c": [
          "File: net/ipv6/sit.c -> net/ipv6/sit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "601:   ipip6_ecn_decapsulate(iph, skb);",
          "606:   rcu_read_unlock();",
          "607:   return 0;",
          "",
          "[Removed Lines]",
          "603:   if (netif_rx(skb) == NET_RX_DROP)",
          "604:    tunnel->dev->stats.rx_dropped++;",
          "",
          "[Added Lines]",
          "603:   netif_rx(skb);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "79b569f0ec53a14c4d71e79d93a8676d9a0fda6d",
      "candidate_info": {
        "commit_hash": "79b569f0ec53a14c4d71e79d93a8676d9a0fda6d",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/79b569f0ec53a14c4d71e79d93a8676d9a0fda6d",
        "files": [
          "net/core/dev.c"
        ],
        "message": "netdev: fix mtu check when TSO is enabled\n\nIn case the device where is coming from the packet has TSO enabled,\nwe should not check the mtu size value as this one could be bigger\nthan the expected value.\n\nThis is the case for the macvlan driver when the lower device has\nTSO enabled. The macvlan inherit this feature and forward the packets\nwithout fragmenting them. Then the packets go through dev_forward_skb\nand are dropped. This patch fix this by checking TSO is not enabled\nwhen we want to check the mtu size.\n\nSigned-off-by: Daniel Lezcano <daniel.lezcano@free.fr>\nAcked-by: \"Eric W. Biederman\" <ebiederm@xmission.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/core/dev.c||net/core/dev.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/core/dev.c||net/core/dev.c"
          ],
          "candidate": [
            "net/core/dev.c||net/core/dev.c"
          ]
        }
      },
      "candidate_diff": {
        "net/core/dev.c||net/core/dev.c": [
          "File: net/core/dev.c -> net/core/dev.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1454:   __net_timestamp(skb);",
          "1455: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1457: static inline bool is_skb_forwardable(struct net_device *dev,",
          "1458:           struct sk_buff *skb)",
          "1459: {",
          "1460:  unsigned int len;",
          "1462:  if (!(dev->flags & IFF_UP))",
          "1463:   return false;",
          "1465:  len = dev->mtu + dev->hard_header_len + VLAN_HLEN;",
          "1466:  if (skb->len <= len)",
          "1467:   return true;",
          "1472:  if (skb_is_gso(skb))",
          "1473:   return true;",
          "1475:  return false;",
          "1476: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1477:  skb_orphan(skb);",
          "1478:  nf_reset(skb);",
          "1482:   atomic_long_inc(&dev->rx_dropped);",
          "1483:   kfree_skb(skb);",
          "1484:   return NET_RX_DROP;",
          "",
          "[Removed Lines]",
          "1480:  if (unlikely(!(dev->flags & IFF_UP) ||",
          "1481:        (skb->len > (dev->mtu + dev->hard_header_len + VLAN_HLEN)))) {",
          "",
          "[Added Lines]",
          "1501:  if (unlikely(!is_skb_forwardable(dev, skb))) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d2ed817766987fd05e69b7da65d4861b38f1aa2a",
      "candidate_info": {
        "commit_hash": "d2ed817766987fd05e69b7da65d4861b38f1aa2a",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/d2ed817766987fd05e69b7da65d4861b38f1aa2a",
        "files": [
          "net/core/dev.c"
        ],
        "message": "net/core: Allow tagged VLAN packets to flow through VETH devices.\n\nWhen there are VLANs on a VETH device, the packets being transmitted\nthrough the VETH device may be 4 bytes bigger than MTU.  A check\nin dev_forward_skb did not take this into account and so dropped\nthese packets.\n\nThis patch is needed at least as far back as 2.6.34.7 and should\nbe considered for -stable.\n\nSigned-off-by: Ben Greear <greearb@candelatech.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/core/dev.c||net/core/dev.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/core/dev.c||net/core/dev.c"
          ],
          "candidate": [
            "net/core/dev.c||net/core/dev.c"
          ]
        }
      },
      "candidate_diff": {
        "net/core/dev.c||net/core/dev.c": [
          "File: net/core/dev.c -> net/core/dev.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1485:  nf_reset(skb);",
          "1487:  if (!(dev->flags & IFF_UP) ||",
          "1489:   kfree_skb(skb);",
          "1490:   return NET_RX_DROP;",
          "1491:  }",
          "",
          "[Removed Lines]",
          "1488:      (skb->len > (dev->mtu + dev->hard_header_len))) {",
          "",
          "[Added Lines]",
          "1488:      (skb->len > (dev->mtu + dev->hard_header_len + VLAN_HLEN))) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}