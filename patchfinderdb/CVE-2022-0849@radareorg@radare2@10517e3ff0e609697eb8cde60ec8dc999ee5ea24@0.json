{
  "cve_id": "CVE-2022-0849",
  "cve_desc": "Use After Free in r_reg_get_name_idx in GitHub repository radareorg/radare2 prior to 5.6.6.",
  "repo": "radareorg/radare2",
  "patch_hash": "10517e3ff0e609697eb8cde60ec8dc999ee5ea24",
  "patch_info": {
    "commit_hash": "10517e3ff0e609697eb8cde60ec8dc999ee5ea24",
    "repo": "radareorg/radare2",
    "commit_url": "https://github.com/radareorg/radare2/commit/10517e3ff0e609697eb8cde60ec8dc999ee5ea24",
    "files": [
      "libr/anal/arch/kvx/kvx-dis.c",
      "libr/core/canal.c"
    ],
    "message": "aaef on arm/thumb switches causes uaf ##crash\n\n* Reported by peacock-doris via huntr.dev\n* Reproducer: poc_uaf_r_reg_get",
    "before_after_code_files": [
      "libr/anal/arch/kvx/kvx-dis.c||libr/anal/arch/kvx/kvx-dis.c",
      "libr/core/canal.c||libr/core/canal.c"
    ]
  },
  "patch_diff": {
    "libr/anal/arch/kvx/kvx-dis.c||libr/anal/arch/kvx/kvx-dis.c": [
      "File: libr/anal/arch/kvx/kvx-dis.c -> libr/anal/arch/kvx/kvx-dis.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "94:  return (major > 1) && (major < 8);",
      "95: }",
      "97: static inline int kvx_is_nop_opcode(ut32 x) {",
      "98:  return ((x)<<1) == 0xFFFFFFFE;",
      "99: }",
      "101: static inline int kvx_opc_match(const opc_t *opc, insn_t *insn) {",
      "102:  int i;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "97: #if UNUSED0",
      "101: #endif",
      "",
      "---------------"
    ],
    "libr/core/canal.c||libr/core/canal.c": [
      "File: libr/core/canal.c -> libr/core/canal.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4727: typedef struct {",
      "4728:  RAnalOp *op;",
      "4729:  RAnalFunction *fcn;",
      "4731:  ut64 initial_sp;",
      "4732: } EsilBreakCtx;",
      "",
      "[Removed Lines]",
      "4730:  const char *spname;",
      "",
      "[Added Lines]",
      "4730:  char *spname;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "5099:  bool gp_fixed = r_config_get_i (core->config, \"anal.gpfixed\");",
      "5100:  RAnalEsil *ESIL = core->anal->esil;",
      "5101:  ut64 refptr = 0LL;",
      "5103:  RAnalOp op = R_EMPTY;",
      "5104:  ut8 *buf = NULL;",
      "5105:  bool end_address_set = false;",
      "",
      "[Removed Lines]",
      "5102:  const char *pcname;",
      "",
      "[Added Lines]",
      "5102:  char *pcname = NULL;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "5188:   r_core_cmd0 (core, \"aeim\");",
      "5189:   ESIL = core->anal->esil;",
      "5190:  }",
      "5193:   eprintf (\"Error: No =SP defined in the reg profile.\\n\");",
      "5194:   return;",
      "5195:  }",
      "5196:  EsilBreakCtx ctx = {",
      "5197:   &op,",
      "5198:   fcn,",
      "",
      "[Removed Lines]",
      "5191:  const char *spname = r_reg_get_name (core->anal->reg, R_REG_NAME_SP);",
      "5192:  if (!spname) {",
      "",
      "[Added Lines]",
      "5191:  const char *kspname = r_reg_get_name (core->anal->reg, R_REG_NAME_SP);",
      "5192:  if (R_STR_ISEMPTY (kspname)) {",
      "5196:  char *spname = strdup (kspname);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "5210:  }",
      "5215:   eprintf (\"Cannot find program counter register in the current profile.\\n\");",
      "5216:   return;",
      "5217:  }",
      "5218:  esil_anal_stop = false;",
      "5219:  r_cons_break_push (cccb, core);",
      "",
      "[Removed Lines]",
      "5213:  pcname = r_reg_get_name (core->anal->reg, R_REG_NAME_PC);",
      "5214:  if (!pcname || !*pcname) {",
      "",
      "[Added Lines]",
      "5214:  const char *kpcname = r_reg_get_name (core->anal->reg, R_REG_NAME_PC);",
      "5215:  if (!kpcname || !*kpcname) {",
      "5219:  pcname = strdup (kpcname);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "5299:   r_anal_op_fini (&op);",
      "5300:   r_asm_set_pc (core->rasm, cur);",
      "5301:   i_old = i;",
      "5303:   if (i > iend) {",
      "5304:    goto repeat;",
      "5305:   }",
      "5307:   if (!r_anal_op (core->anal, &op, cur, buf + i, iend - i, R_ANAL_OP_MASK_ESIL | R_ANAL_OP_MASK_VAL | R_ANAL_OP_MASK_HINT)) {",
      "5308:    i += minopsize - 1; //   XXX dupe in op.size below",
      "5309:   }",
      "",
      "[Removed Lines]",
      "5302: #if 1",
      "5306: #endif",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "5544:    break;",
      "5545:   }",
      "5546:  } while (get_next_i (&ictx, &i));",
      "5547:  r_list_free (ictx.bbl);",
      "5548:  r_list_free (ictx.path);",
      "5549:  r_list_free (ictx.switch_path);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5547:  free (pcname);",
      "5548:  free (spname);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "333bbcd06b85e9544f35c05aa05d4c504e7b8b82",
      "candidate_info": {
        "commit_hash": "333bbcd06b85e9544f35c05aa05d4c504e7b8b82",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/333bbcd06b85e9544f35c05aa05d4c504e7b8b82",
        "files": [
          "libr/core/canal.c",
          "test/db/anal/avr"
        ],
        "message": "Optimize infinite loop on non-quantum computers ##anal (#18846)",
        "before_after_code_files": [
          "libr/core/canal.c||libr/core/canal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/core/canal.c||libr/core/canal.c"
          ],
          "candidate": [
            "libr/core/canal.c||libr/core/canal.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/core/canal.c||libr/core/canal.c": [
          "File: libr/core/canal.c -> libr/core/canal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5043:    if (!bbit->data) {",
          "5044:     return false;",
          "5045:    }",
          "5046:    ctx->cur_bb = bbit->data;",
          "5047:    r_list_push (ctx->path, ctx->cur_bb);",
          "5048:    r_list_delete (ctx->bbl, bbit);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5046:    if (!bbit->data) {",
          "5047:     return false;",
          "5048:    }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5051:  } else if (cur_addr >= ctx->end_addr) {",
          "5052:   return false;",
          "5053:  }",
          "5054:  return true;",
          "5055: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5057:  if (*next_i == 0) {",
          "5058:   return false;",
          "5059:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5209:   if (!r_io_is_valid_offset (core->io, cur, 0)) {",
          "5210:    break;",
          "5211:   }",
          "5212:   {",
          "5213:    RPVector *list = r_meta_get_all_in (core->anal, cur, R_META_TYPE_ANY);",
          "5214:    void **it;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5218: #if 0",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5219:     case R_META_TYPE_DATA:",
          "5220:     case R_META_TYPE_STRING:",
          "5221:     case R_META_TYPE_FORMAT:",
          "5223:      r_pvector_free (list);",
          "5224:      goto repeat;",
          "5225:     default:",
          "5226:      break;",
          "5227:     }",
          "5228:    }",
          "5229:    r_pvector_free (list);",
          "5230:   }",
          "5233:   r_core_seek_arch_bits (core, cur);",
          "",
          "[Removed Lines]",
          "5222:      i += 4;",
          "",
          "[Added Lines]",
          "5230: #if 0",
          "5231:      {",
          "5232:       int msz = r_meta_get_size (core->anal, meta->type);",
          "5233:       i += (msz > 0)? msz: minopsize;",
          "5234:      }",
          "5236:      goto loopback;",
          "5237: #elif 0",
          "5238:      {",
          "5239:       int msz = r_meta_get_size (core->anal, meta->type);",
          "5240:       i += (msz > 0)? msz: minopsize;",
          "5241:       i--;",
          "5242:      }",
          "5243: #else",
          "5244:      i += 4;",
          "5246: #endif",
          "5253: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5239:   r_anal_op_fini (&op);",
          "5240:   r_asm_set_pc (core->rasm, cur);",
          "5241:   i_old = i;",
          "5242:   if (!r_anal_op (core->anal, &op, cur, buf + i, iend - i, R_ANAL_OP_MASK_ESIL | R_ANAL_OP_MASK_VAL | R_ANAL_OP_MASK_HINT)) {",
          "5243:    i += minopsize - 1; //   XXX dupe in op.size below",
          "5244:   }",
          "5246:   if (op.type == R_ANAL_OP_TYPE_ILL || op.type == R_ANAL_OP_TYPE_UNK) {",
          "5248:    r_anal_op_fini (&op);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5265: #if 1",
          "5266:   if (i > iend) {",
          "5267:    goto repeat;",
          "5268:   }",
          "5269: #endif",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5250:   }",
          "5256:   if (op.size < 1) {",
          "5257:    i += minopsize - 1;",
          "5258:    goto repeat;",
          "",
          "[Removed Lines]",
          "5253:   if (i > iend) {",
          "5254:    goto repeat;",
          "5255:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5476:     }",
          "5477:    }",
          "5478:   }",
          "5480:    break;",
          "5481:   }",
          "5482:  } while (get_next_i (&ictx, &i));",
          "",
          "[Removed Lines]",
          "5479:   if (i > iend) {",
          "",
          "[Added Lines]",
          "5503:   if (i >= iend) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "352630295eefa41b6889e93014bacd9202b2acf7",
      "candidate_info": {
        "commit_hash": "352630295eefa41b6889e93014bacd9202b2acf7",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/352630295eefa41b6889e93014bacd9202b2acf7",
        "files": [
          "libr/anal/var.c",
          "libr/bin/p/bin_coff.c",
          "libr/core/canal.c",
          "libr/reg/profile.c"
        ],
        "message": "Polish some asserts here and there (#18927)",
        "before_after_code_files": [
          "libr/anal/var.c||libr/anal/var.c",
          "libr/bin/p/bin_coff.c||libr/bin/p/bin_coff.c",
          "libr/core/canal.c||libr/core/canal.c",
          "libr/reg/profile.c||libr/reg/profile.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/core/canal.c||libr/core/canal.c"
          ],
          "candidate": [
            "libr/core/canal.c||libr/core/canal.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/anal/var.c||libr/anal/var.c": [
          "File: libr/anal/var.c -> libr/anal/var.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1125:   extract_arg (anal, fcn, op, BP, \"+\", R_ANAL_VAR_KIND_BPV);",
          "1126:   extract_arg (anal, fcn, op, BP, \"-\", R_ANAL_VAR_KIND_BPV);",
          "1127:  }",
          "1129: }",
          "1131: static RList *var_generate_list(RAnal *a, RAnalFunction *fcn, int kind) {",
          "",
          "[Removed Lines]",
          "1128:  extract_arg (anal, fcn, op, SP, \"+\", R_ANAL_VAR_KIND_SPV);",
          "",
          "[Added Lines]",
          "1128:  if (SP) {",
          "1129:   extract_arg (anal, fcn, op, SP, \"+\", R_ANAL_VAR_KIND_SPV);",
          "1130:  }",
          "",
          "---------------"
        ],
        "libr/bin/p/bin_coff.c||libr/bin/p/bin_coff.c": [
          "File: libr/bin/p/bin_coff.c -> libr/bin/p/bin_coff.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "285: #define BYTES_PER_IMP_RELOC  8",
          "287: static RList *_relocs_list(RBin *rbin, struct r_bin_coff_obj *bin, bool patch, ut64 imp_map) {",
          "290:  RBinReloc *reloc;",
          "291:  struct coff_reloc *rel;",
          "",
          "[Removed Lines]",
          "288:  r_return_val_if_fail (bin && bin->scn_hdrs, NULL);",
          "",
          "[Added Lines]",
          "288:  r_return_val_if_fail (bin, NULL);",
          "289:  if (!bin->scn_hdrs) {",
          "290:   return NULL;",
          "291:  }",
          "",
          "---------------"
        ],
        "libr/core/canal.c||libr/core/canal.c": [
          "File: libr/core/canal.c -> libr/core/canal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5157:   ESIL = core->anal->esil;",
          "5158:  }",
          "5159:  const char *spname = r_reg_get_name (core->anal->reg, R_REG_NAME_SP);",
          "5160:  EsilBreakCtx ctx = {",
          "5161:   &op,",
          "5162:   fcn,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5160:  if (!spname) {",
          "5161:   eprintf (\"Error: No =SP defined in the reg profile.\\n\");",
          "5162:   return;",
          "5163:  }",
          "",
          "---------------"
        ],
        "libr/reg/profile.c||libr/reg/profile.c": [
          "File: libr/reg/profile.c -> libr/reg/profile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "433:  const char *a2 = r_reg_get_name_by_type (reg, \"A2\");",
          "434:  const char *a3 = r_reg_get_name_by_type (reg, \"A3\");",
          "439:  if (!r0) {",
          "440:   r0 = a0;",
          "441:  }",
          "442:  if (a3 && a2 && a1) {",
          "443:   return r_str_newf (\"%s reg(%s, %s, %s, %s)\", r0, a0, a1, a2, a3);",
          "444:  }",
          "",
          "[Removed Lines]",
          "438:  r_return_val_if_fail (a0, NULL);",
          "",
          "[Added Lines]",
          "439:  if (!r0) {",
          "442:   return NULL;",
          "443:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f48729acd5387a9b3aec6d8529a6cfde30ad94ea",
      "candidate_info": {
        "commit_hash": "f48729acd5387a9b3aec6d8529a6cfde30ad94ea",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/f48729acd5387a9b3aec6d8529a6cfde30ad94ea",
        "files": [
          "libr/bin/mangling/microsoft_demangle.c",
          "libr/bin/pdb/stream_file.c",
          "libr/core/canal.c",
          "libr/util/bdiff.c",
          "libr/util/debruijn.c",
          "libr/util/table.c",
          "shlr/tcc/tccgen.c"
        ],
        "message": "Random null deref and more size_t fixes",
        "before_after_code_files": [
          "libr/bin/mangling/microsoft_demangle.c||libr/bin/mangling/microsoft_demangle.c",
          "libr/bin/pdb/stream_file.c||libr/bin/pdstream_file.c",
          "libr/core/canal.c||libr/core/canal.c",
          "libr/util/bdiff.c||libr/util/bdiff.c",
          "libr/util/debruijn.c||libr/util/debruijn.c",
          "libr/util/table.c||libr/util/table.c",
          "shlr/tcc/tccgen.c||shlr/tcc/tccgen.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/core/canal.c||libr/core/canal.c"
          ],
          "candidate": [
            "libr/core/canal.c||libr/core/canal.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/mangling/microsoft_demangle.c||libr/bin/mangling/microsoft_demangle.c": [
          "File: libr/bin/mangling/microsoft_demangle.c -> libr/bin/mangling/microsoft_demangle.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "678:     tmp += state.amount_of_read_chars + 1;",
          "679:     read_len += state.amount_of_read_chars + 1;",
          "680:    }",
          "682:    if (parse_microsoft_mangled_name (tmp + 2, &demangled, &len) != eDemanglerErrOK) {",
          "683:     break;",
          "684:    }",
          "",
          "[Removed Lines]",
          "681:    char *demangled;",
          "",
          "[Added Lines]",
          "681:    char *demangled = NULL;",
          "",
          "---------------"
        ],
        "libr/bin/pdb/stream_file.c||libr/bin/pdstream_file.c": [
          "File: libr/bin/pdb/stream_file.c -> libr/bin/pdstream_file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: void stream_file_read(R_STREAM_FILE *stream_file, int size, char *res) {",
          "49:  if (size == -1) {",
          "50:   char *pdata = (char *) malloc(stream_file->pages_amount * stream_file->page_size);",
          "51:   if (pdata) {",
          "",
          "[Removed Lines]",
          "48:  int pn_start, off_start, pn_end, off_end;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libr/core/canal.c||libr/core/canal.c": [
          "File: libr/core/canal.c -> libr/core/canal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5125:   }",
          "5126:   r_core_cmd0 (core, \"aeim\");",
          "5127:  }",
          "5128:  EsilBreakCtx ctx = {",
          "5129:   &op,",
          "5130:   fcn,",
          "5133:  };",
          "5134:  ESIL->cb.hook_reg_write = &esilbreak_reg_write;",
          "",
          "[Removed Lines]",
          "5131:   r_reg_get_name (core->anal->reg, R_REG_NAME_SP),",
          "5132:   r_reg_getv (core->anal->reg, ctx.spname)",
          "",
          "[Added Lines]",
          "5128:  const char *spname = r_reg_get_name (core->anal->reg, R_REG_NAME_SP);",
          "5132:   spname,",
          "5133:   r_reg_getv (core->anal->reg, spname)",
          "",
          "---------------"
        ],
        "libr/util/bdiff.c||libr/util/bdiff.c": [
          "File: libr/util/bdiff.c -> libr/util/bdiff.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "87: }",
          "89: static int equatelines(struct line *a, int an, struct line *b, int bn) {",
          "91:  struct pos *h = NULL;",
          "",
          "[Removed Lines]",
          "90:  int i, j, buckets = 1, t, scale;",
          "",
          "[Added Lines]",
          "90:  size_t i, j, t;",
          "91:  size_t scale, buckets = 1;",
          "",
          "---------------"
        ],
        "libr/util/debruijn.c||libr/util/debruijn.c": [
          "File: libr/util/debruijn.c -> libr/util/debruijn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:  if (!charset) {",
          "48:   return NULL;",
          "49:  }",
          "52:  if (!prenecklace_a) {",
          "53:   return NULL;",
          "54:  }",
          "",
          "[Removed Lines]",
          "50:  int size = strlen (charset);",
          "51:  int* prenecklace_a = calloc (size * order, sizeof (int));",
          "",
          "[Added Lines]",
          "50:  size_t size = strlen (charset);",
          "51:  int* prenecklace_a = calloc (size * (size_t)order, sizeof (int));",
          "",
          "---------------"
        ],
        "libr/util/table.c||libr/util/table.c": [
          "File: libr/util/table.c -> libr/util/table.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "644:  RListIter *iter, *iter2;",
          "645:  ut64 uv = r_num_math (NULL, un);",
          "646:  ut64 sum = 0;",
          "648:  size_t lrow = 0;",
          "649:  if (op == 't') {",
          "650:   size_t ll = r_list_length (t->rows);",
          "",
          "[Removed Lines]",
          "647:  int page = 0, page_items = 0;",
          "",
          "[Added Lines]",
          "647:  size_t page = 0, page_items = 0;",
          "",
          "---------------"
        ],
        "shlr/tcc/tccgen.c||shlr/tcc/tccgen.c": [
          "File: shlr/tcc/tccgen.c -> shlr/tcc/tccgen.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2579: static void decl_initializer(CType *type, unsigned long c, int first, int size_only) {",
          "2580:  long long index;",
          "2583:  Sym *s, *f;",
          "2584:  CType *t1;",
          "",
          "[Removed Lines]",
          "2581:  int array_length, n, no_oblock, nb, parlevel, parlevel1, i;",
          "2582:  int size1, align1, expr_type;",
          "",
          "[Added Lines]",
          "2581:  int n, no_oblock, nb, parlevel, parlevel1;",
          "2582:  size_t array_length, size1, i;",
          "2583:  int align1, expr_type;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8317a962e1a53188bccf5d2ea74fd597c46f8a31",
      "candidate_info": {
        "commit_hash": "8317a962e1a53188bccf5d2ea74fd597c46f8a31",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/8317a962e1a53188bccf5d2ea74fd597c46f8a31",
        "files": [
          "libr/anal/var.c",
          "libr/core/canal.c",
          "libr/core/cconfig.c",
          "libr/core/cmd_anal.c",
          "libr/include/r_anal.h",
          "libr/parse/p/parse_arm_pseudo.c",
          "test/db/anal/vars"
        ],
        "message": "Add anal.vars.newstack - configurable improved stack-relative var ##analysis",
        "before_after_code_files": [
          "libr/anal/var.c||libr/anal/var.c",
          "libr/core/canal.c||libr/core/canal.c",
          "libr/core/cconfig.c||libr/core/cconfig.c",
          "libr/core/cmd_anal.c||libr/core/cmd_anal.c",
          "libr/include/r_anal.h||libr/include/r_anal.h",
          "libr/parse/p/parse_arm_pseudo.c||libr/parse/p/parse_arm_pseudo.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/core/canal.c||libr/core/canal.c"
          ],
          "candidate": [
            "libr/core/canal.c||libr/core/canal.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/anal/var.c||libr/anal/var.c": [
          "File: libr/anal/var.c -> libr/anal/var.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1033:    }",
          "1034:   }",
          "1035:   if (varname) {",
          "1042:    RAnalVar *var = r_anal_function_set_var (fcn, frame_off, type, vartype, anal->config->bits / 8, isarg, varname);",
          "1043:    if (var) {",
          "1044:     r_anal_var_set_access (var, reg, op->addr, rw, ptr);",
          "",
          "[Removed Lines]",
          "1036: #if 0",
          "1037:    if (isarg && frame_off > 48) {",
          "1038:     free (varname);",
          "1039:     goto beach;",
          "1040:    }",
          "1041: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1406: }",
          "1408: static void var_field_free(RAnalVarField *field) {",
          "1411:  }",
          "1414: }",
          "1416: R_API RList *r_anal_function_get_var_fields(RAnalFunction *fcn, int kind) {",
          "",
          "[Removed Lines]",
          "1409:  if (!field) {",
          "1410:   return;",
          "1412:  free (field->name);",
          "1413:  free (field);",
          "",
          "[Added Lines]",
          "1403:  if (field) {",
          "1404:   free (field->name);",
          "1405:   free (field);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1512: }",
          "1514: R_API void r_anal_var_list_show(RAnal *anal, RAnalFunction *fcn, int kind, int mode, PJ *pj) {",
          "1515:  RList *list = r_anal_var_list (anal, fcn, kind);",
          "1516:  RAnalVar *var;",
          "1517:  RListIter *iter;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1508:  bool newstack = anal->opt.var_newstack;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1640:     break;",
          "1641:    case R_ANAL_VAR_KIND_SPV:",
          "1642:    {",
          "1644:     if (!var->isarg) {",
          "1645:      char sign = (-var->delta <= fcn->maxstack) ? '+' : '-';",
          "1646:      anal->cb_printf (\"var %s %s @ %s%c0x%x\\n\",",
          "",
          "[Removed Lines]",
          "1643:     int delta = fcn->maxstack + var->delta;",
          "",
          "[Added Lines]",
          "1637:     int delta = newstack? var->delta: fcn->maxstack + var->delta;",
          "",
          "---------------"
        ],
        "libr/core/canal.c||libr/core/canal.c": [
          "File: libr/core/canal.c -> libr/core/canal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5197:  bool cfg_anal_strings = r_config_get_i (core->config, \"anal.strings\");",
          "5198:  bool emu_lazy = r_config_get_b (core->config, \"emu.lazy\");",
          "5199:  bool gp_fixed = r_config_get_b (core->config, \"anal.gpfixed\");",
          "5200:  RAnalEsil *ESIL = core->anal->esil;",
          "5201:  ut64 refptr = 0LL;",
          "5202:  char *pcname = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5202:  bool newstack = r_config_get_b (core->config, \"anal.var.newstack\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5295:   &op,",
          "5296:   fcn,",
          "5297:   spname,",
          "5299:  };",
          "5300:  ESIL->cb.hook_reg_write = &esilbreak_reg_write;",
          "",
          "[Removed Lines]",
          "5298:   r_reg_getv (core->anal->reg, spname)",
          "",
          "[Added Lines]",
          "5301:   r_reg_getv (core->anal->reg, spname) // initial_sp",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5304:  ESIL->cb.hook_mem_write = &esilbreak_mem_write;",
          "5306:  if (fcn && fcn->reg_save_area) {",
          "5308:  }",
          "5311:  const char *kpcname = r_reg_get_name (core->anal->reg, R_REG_NAME_PC);",
          "5313:   R_LOG_ERROR (\"Cannot find program counter register in the current profile\");",
          "5314:   return;",
          "5315:  }",
          "",
          "[Removed Lines]",
          "5307:   r_reg_setv (core->anal->reg, ctx.spname, ctx.initial_sp - fcn->reg_save_area);",
          "5312:  if (!kpcname || !*kpcname) {",
          "",
          "[Added Lines]",
          "5310:   if (newstack) {",
          "5311:    r_reg_setv (core->anal->reg, ctx.spname, fcn->reg_save_area);",
          "5312:   } else {",
          "5313:    r_reg_setv (core->anal->reg, ctx.spname, ctx.initial_sp - fcn->reg_save_area);",
          "5314:   }",
          "5319:  if (R_STR_ISEMPTY (kpcname)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5397:   if (i > iend) {",
          "5398:    goto repeat;",
          "5399:   }",
          "5402:   }",
          "5403:   if (op.type == R_ANAL_OP_TYPE_ILL || op.type == R_ANAL_OP_TYPE_UNK) {",
          "",
          "[Removed Lines]",
          "5400:   if (!r_anal_op (core->anal, &op, cur, buf + i, iend - i, R_ANAL_OP_MASK_ESIL | R_ANAL_OP_MASK_VAL | R_ANAL_OP_MASK_HINT)) {",
          "5401:    i += minopsize - 1; //   XXX dupe in op.size below",
          "",
          "[Added Lines]",
          "5407:   int opflags = R_ANAL_OP_MASK_ESIL | R_ANAL_OP_MASK_VAL | R_ANAL_OP_MASK_HINT;",
          "5408:   if (newstack) {",
          "5409:    opflags |= R_ANAL_OP_MASK_DISASM;",
          "5410:   }",
          "5411:   if (!r_anal_op (core->anal, &op, cur, buf + i, iend - i, opflags)) {",
          "5412:    i += minopsize - 1; // XXX dupe in op.size below",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5499:     add_string_ref (core, op.addr, op.ptr);",
          "5500:    }",
          "5501:    break;",
          "5502:   case R_ANAL_OP_TYPE_ADD:",
          "5504:    if (core->anal->cur && archIsArm) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5513:   case R_ANAL_OP_TYPE_SUB:",
          "5514:    if (newstack && core->anal->cur && archIsArm) {",
          "5515:     if (strstr (op.mnemonic, \" sp,\")) {",
          "5516:      ctx.initial_sp -= op.val;",
          "5517:     }",
          "5518:    }",
          "5519:    break;",
          "",
          "---------------"
        ],
        "libr/core/cconfig.c||libr/core/cconfig.c": [
          "File: libr/core/cconfig.c -> libr/core/cconfig.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "382:  return true;",
          "383: }",
          "385: static bool cb_anal_nonull(void *user, void *data) {",
          "386:  RCore *core = (RCore*) user;",
          "387:  RConfigNode *node = (RConfigNode*) data;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "385: static bool cb_analvars_newstack(void *user, void *data) {",
          "386:  RCore *core = (RCore *)user;",
          "387:  RConfigNode *node = (RConfigNode *)data;",
          "388:  core->anal->opt.var_newstack = node->i_value;",
          "389:  return true;",
          "390: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3383:  SETBPREF (\"anal.types.constraint\", \"false\", \"enable constraint types analysis for variables\");",
          "3384:  SETCB (\"anal.vars\", \"true\", &cb_analvars, \"analyze local variables and arguments\");",
          "3385:  SETCB (\"anal.vars.stackname\", \"false\", &cb_analvars_stackname, \"name variables based on their offset on the stack\");",
          "3386:  SETBPREF (\"anal.vinfun\", \"true\",  \"search values in functions (aav) (false by default to only find on non-code)\");",
          "3387:  SETBPREF (\"anal.vinfunrange\", \"false\",  \"search values outside function ranges (requires anal.vinfun=false)\\n\");",
          "3388:  SETCB (\"anal.norevisit\", \"false\", &cb_analnorevisit, \"do not visit function analysis twice (EXPERIMENTAL)\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3393:  SETCB (\"anal.vars.newstack\", \"false\", &cb_analvars_newstack, \"use new sp-relative variable analysis (EXPERIMENTAL)\");",
          "",
          "---------------"
        ],
        "libr/core/cmd_anal.c||libr/core/cmd_anal.c": [
          "File: libr/core/cmd_anal.c -> libr/core/cmd_anal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1742:    R_LOG_ERROR (\"Cannot find function in 0x%08\"PFMT64x, core->offset);",
          "1743:    return false;",
          "1744:   }",
          "1747:    RAnalOp *op = r_core_anal_op (core, core->offset, R_ANAL_OP_MASK_BASIC);",
          "1748:    const char *new_name = r_str_trim_head_ro (strchr (ostr, ' '));",
          "1749:    if (!new_name) {",
          "",
          "[Removed Lines]",
          "1745:  case 'n':",
          "1746:   if (str[1]) { // \"afvn\"",
          "",
          "[Added Lines]",
          "1745:  case 'n': // \"afvn\"",
          "1746:   if (str[1]) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1827:  case 'f': // \"afvf\"",
          "1828:   __cmd_afvf (core, ostr);",
          "1829:   break;",
          "1832:    p = strchr (ostr, ' ');",
          "1833:    if (!p++) {",
          "1834:     free (ostr);",
          "",
          "[Removed Lines]",
          "1830:  case 't':",
          "1831:   if (fcn) { // \"afvt\"",
          "",
          "[Added Lines]",
          "1830:  case 't': // \"afvt\"",
          "1831:   if (fcn) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1899:    }",
          "1900:   }",
          "1901:   break;",
          "1903:  case 'g': // \"afv[bsr]g\"",
          "1905:    int idx = r_num_math (core->num, str + 2);",
          "1906:    char *vaddr;",
          "1907:    p = strchr (ostr, ' ');",
          "",
          "[Removed Lines]",
          "1902:  case 's': // \"afv[bsr]s\"",
          "1904:   if (str[2] != '\\0') {",
          "",
          "[Added Lines]",
          "1902:  case 's': // \"afv[bsr]s\" // \"afvs\"",
          "1904:   if (str[2]) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1930:    R_LOG_ERROR (\"Missing argument\");",
          "1931:   }",
          "1932:   break;",
          "1934:   bool isarg = false;",
          "1935:   const int size = 4;",
          "1936:   p = strchr (ostr, ' ');",
          "",
          "[Removed Lines]",
          "1933:  case ' ': { // \"afv[bsr]\"",
          "",
          "[Added Lines]",
          "1933:  case ' ': { // \"afvs\" \"afvb\" \"afvr\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1972:    r_str_trim (vartype);",
          "1973:   }",
          "1974:   if (type == 'b') {",
          "1975:    delta -= fcn->bp_off;",
          "1976:   }",
          "1977:   if ((type == 'b') && delta > 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1975:    eprintf (\"DELTA\\n\");",
          "",
          "---------------"
        ],
        "libr/include/r_anal.h||libr/include/r_anal.h": [
          "File: libr/include/r_anal.h -> libr/include/r_anal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "559:  int graph_depth;",
          "560:  bool vars; //analyze local var and arguments",
          "561:  bool varname_stack; // name vars based on their offset in the stack",
          "562:  int cjmpref;",
          "563:  int jmpref;",
          "564:  int jmpabove;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "562:  bool var_newstack; // new sp-relative variable analysis",
          "",
          "---------------"
        ],
        "libr/parse/p/parse_arm_pseudo.c||libr/parse/p/parse_arm_pseudo.c": [
          "File: libr/parse/p/parse_arm_pseudo.c -> libr/parse/p/parse_arm_pseudo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "331:  RListIter *iter;",
          "332:  RAnal *anal = p->analb.anal;",
          "333:  char *oldstr;",
          "334:  char *tstr = strdup (data);",
          "335:  if (!tstr) {",
          "336:   return false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "334:  bool newstack = anal->opt.var_newstack;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "402:   free (oldstr);",
          "403:  }",
          "404:  r_list_foreach (spargs, iter, var) {",
          "412:   }",
          "413:   const char *reg = NULL;",
          "414:   if (p->get_reg_at) {",
          "",
          "[Removed Lines]",
          "405:   st64 delta = p->get_ptr_at",
          "406:    ? p->get_ptr_at (f, var->delta, addr)",
          "407:    : ST64_MAX;",
          "408:   if (delta == ST64_MAX && var->field) {",
          "409:    delta = var->delta;",
          "410:   } else if (delta == ST64_MAX) {",
          "411:    continue;",
          "",
          "[Added Lines]",
          "406:   st64 delta = var->delta;",
          "407:   if (!newstack) {",
          "408:    delta = p->get_ptr_at",
          "409:     ? p->get_ptr_at (f, var->delta, addr)",
          "410:     : ST64_MAX;",
          "411:    if (delta == ST64_MAX && var->field) {",
          "412:     delta = var->delta;",
          "413:    } else if (delta == ST64_MAX) {",
          "414:     continue;",
          "415:    }",
          "",
          "---------------"
        ]
      }
    }
  ]
}