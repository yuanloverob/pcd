{
  "cve_id": "CVE-2019-11940",
  "cve_desc": "In the course of decompressing HPACK inside the HTTP2 protocol, an unexpected sequence of header table resize operations can place the header table into a corrupted state, leading to a use-after-free condition and undefined behavior. This issue affects Proxygen from v0.29.0 until v2017.04.03.00.",
  "repo": "facebook/proxygen",
  "patch_hash": "f43b134cc5c19d8532e7fb670a1c02e85f7a8d4f",
  "patch_info": {
    "commit_hash": "f43b134cc5c19d8532e7fb670a1c02e85f7a8d4f",
    "repo": "facebook/proxygen",
    "commit_url": "https://github.com/facebook/proxygen/commit/f43b134cc5c19d8532e7fb670a1c02e85f7a8d4f",
    "files": [
      "proxygen/lib/http/codec/compress/HeaderTable.cpp",
      "proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp"
    ],
    "message": "Fixing HPACK header table resize issue\n\nSummary: On resizing the header table down and then up again, a resize can be called against the underlying vector that actually sizes it down.  This causes a lot of things to break as the code that does the resizing assumes the underlying vector is only ever resized up.\n\nReviewed By: afrind\n\nDifferential Revision: D4613681\n\nfbshipit-source-id: 35b61cab53d5bc097424d6c779f90b7fdea42002",
    "before_after_code_files": [
      "proxygen/lib/http/codec/compress/HeaderTable.cpp||proxygen/lib/http/codec/compress/HeaderTable.cpp",
      "proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp||proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp"
    ]
  },
  "patch_diff": {
    "proxygen/lib/http/codec/compress/HeaderTable.cpp||proxygen/lib/http/codec/compress/HeaderTable.cpp": [
      "File: proxygen/lib/http/codec/compress/HeaderTable.cpp -> proxygen/lib/http/codec/compress/HeaderTable.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "134: }",
      "136: void HeaderTable::setCapacity(uint32_t capacity) {",
      "137:   auto oldCapacity = capacity_;",
      "138:   capacity_ = capacity;",
      "140:     evict(0);",
      "141:   } else {",
      "144:     uint32_t newLength = (capacity_ >> 5) + 1;",
      "161:           }",
      "162:         }",
      "163:       }",
      "",
      "[Removed Lines]",
      "139:   if (capacity_ <= oldCapacity) {",
      "142:     auto oldTail = tail();",
      "143:     auto oldLength = table_.size();",
      "145:     table_.resize(newLength);",
      "146:     if (size_ > 0 && oldTail > head_) {",
      "149:       std::copy(table_.begin() + oldTail, table_.begin() + oldLength,",
      "150:                 table_.begin() + newLength - (oldLength - oldTail));",
      "152:       for (auto& names_it: names_) {",
      "153:         for (auto& idx: names_it.second) {",
      "154:           if (idx >= oldTail) {",
      "155:             DCHECK_LT(idx + (table_.size() - oldLength), table_.size());",
      "156:             idx += (table_.size() - oldLength);",
      "157:           } else {",
      "160:             break;",
      "",
      "[Added Lines]",
      "143:   if (capacity_ == oldCapacity) {",
      "144:     return;",
      "145:   } else if (capacity_ < oldCapacity) {",
      "153:     if (newLength > table_.size()) {",
      "154:       auto oldTail = tail();",
      "155:       auto oldLength = table_.size();",
      "156:       table_.resize(newLength);",
      "157:       if (size_ > 0 && oldTail > head_) {",
      "160:         std::copy(table_.begin() + oldTail, table_.begin() + oldLength,",
      "161:                   table_.begin() + newLength - (oldLength - oldTail));",
      "163:         for (auto& names_it: names_) {",
      "164:           for (auto& idx: names_it.second) {",
      "165:             if (idx >= oldTail) {",
      "166:               DCHECK_LT(idx + (table_.size() - oldLength), table_.size());",
      "167:               idx += (table_.size() - oldLength);",
      "168:             } else {",
      "171:               break;",
      "172:             }",
      "",
      "---------------"
    ],
    "proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp||proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp": [
      "File: proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp -> proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "25:     EXPECT_EQ(HeaderTable::toInternal(head_, length_, external), internal);",
      "26:   }",
      "28:   uint32_t head_{0};",
      "29:   uint32_t length_{0};",
      "30: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28:   void resizeTable(HeaderTable& table, uint32_t newCapacity, uint32_t newMax) {",
      "29:     table.setCapacity(newCapacity);",
      "32:     EXPECT_LE(table.size(), newMax);",
      "33:   }",
      "35:   void resizeAndFillTable(",
      "36:       HeaderTable& table, HPACKHeader& header, uint32_t newMax,",
      "37:       uint32_t fillCount) {",
      "38:     uint32_t newCapacity = header.bytes() * newMax;",
      "39:     resizeTable(table, newCapacity, newMax);",
      "42:     for (size_t i = 0; i <= fillCount; ++i) {",
      "43:       EXPECT_EQ(table.add(header), true);",
      "44:     }",
      "45:     EXPECT_EQ(table.size(), newMax);",
      "46:     EXPECT_EQ(table.bytes(), newCapacity);",
      "47:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "94:   EXPECT_EQ(table.names().size(), 0);",
      "95: }",
      "98:   HPACKHeader accept(\"accept-encoding\", \"gzip\");",
      "99:   uint32_t max = 10;",
      "100:   uint32_t capacity = accept.bytes() * max;",
      "101:   HeaderTable table(capacity);",
      "104:   for (size_t i = 0; i < max; i++) {",
      "",
      "[Removed Lines]",
      "97: TEST_F(HeaderTableTests, set_capacity) {",
      "",
      "[Added Lines]",
      "118: TEST_F(HeaderTableTests, reduce_capacity) {",
      "123:   EXPECT_GT(table.length(), max);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "168: }",
      "170: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "192: TEST_F(HeaderTableTests, varyCapacity) {",
      "193:   HPACKHeader accept(\"accept-encoding\", \"gzip\");",
      "194:   uint32_t max = 6;",
      "195:   uint32_t capacity = accept.bytes() * max;",
      "196:   HeaderTable table(capacity);",
      "200:   for (size_t i = 0; i <= table.length(); ++i) {",
      "201:     EXPECT_EQ(table.add(accept), true);",
      "202:   }",
      "203:   EXPECT_EQ(table.size(), max);",
      "207:   resizeAndFillTable(table, accept, 4, 5);",
      "211:   resizeAndFillTable(table, accept, 5, 6);",
      "214:   resizeAndFillTable(table, accept, 8, 9);",
      "215: }",
      "217: TEST_F(HeaderTableTests, varyCapacityMalignHeadIndex) {",
      "224:   HPACKHeader accept(\"accept-encoding\", \"gzip\");",
      "225:   uint32_t max = 6;",
      "226:   uint32_t capacity = accept.bytes() * max;",
      "227:   HeaderTable table(capacity);",
      "231:   for (size_t i = 0; i < table.length(); ++i) {",
      "232:     EXPECT_EQ(table.add(accept), true);",
      "233:   }",
      "234:   EXPECT_EQ(table.size(), max);",
      "235:   EXPECT_EQ(table.bytes(), capacity);",
      "241:   string strLargerThanTableCapacity = string(capacity + 1, 'a');",
      "242:   HPACKHeader flush(\"flush\", strLargerThanTableCapacity);",
      "243:   EXPECT_EQ(table.add(flush), false);",
      "244:   EXPECT_EQ(table.size(), 0);",
      "248:   max = 3;",
      "249:   resizeTable(table, accept.bytes() * max, max);",
      "254:   max = 4;",
      "255:   resizeTable(table, accept.bytes() * max, max);",
      "261:   for (size_t i = 0; i <= table.length(); ++i) {",
      "262:     EXPECT_EQ(table.add(accept), true);",
      "263:   }",
      "264:   EXPECT_EQ(table.size(), max);",
      "265: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f299bf14698d4fc74c76ba9605546997b71e4e09",
      "candidate_info": {
        "commit_hash": "f299bf14698d4fc74c76ba9605546997b71e4e09",
        "repo": "facebook/proxygen",
        "commit_url": "https://github.com/facebook/proxygen/commit/f299bf14698d4fc74c76ba9605546997b71e4e09",
        "files": [
          "proxygen/lib/http/codec/compress/HeaderTable.cpp",
          "proxygen/lib/http/codec/compress/HeaderTable.h",
          "proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp"
        ],
        "message": "Allow setCapacity to increase the header table size\n\nSummary: If setCapcitity was called with a larger size, it would update the capacity_, but not resize the table.  This could lead to cases where the table *should* have evicted items on add, but did not, and they were later overwritten, and the table became corrupt.  Instead, handle increasing capacity.\n\nReviewed By: russoue\n\nDifferential Revision: D3498979\n\nfbshipit-source-id: ab0e25989cedbf13eca7bdf128d1936917c85cd5",
        "before_after_code_files": [
          "proxygen/lib/http/codec/compress/HeaderTable.cpp||proxygen/lib/http/codec/compress/HeaderTable.cpp",
          "proxygen/lib/http/codec/compress/HeaderTable.h||proxygen/lib/http/codec/compress/HeaderTable.h",
          "proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp||proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "proxygen/lib/http/codec/compress/HeaderTable.cpp||proxygen/lib/http/codec/compress/HeaderTable.cpp",
            "proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp||proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp"
          ],
          "candidate": [
            "proxygen/lib/http/codec/compress/HeaderTable.cpp||proxygen/lib/http/codec/compress/HeaderTable.cpp",
            "proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp||proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp"
          ]
        }
      },
      "candidate_diff": {
        "proxygen/lib/http/codec/compress/HeaderTable.cpp||proxygen/lib/http/codec/compress/HeaderTable.cpp": [
          "File: proxygen/lib/http/codec/compress/HeaderTable.cpp -> proxygen/lib/http/codec/compress/HeaderTable.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:   head_ = 0;",
          "24:   capacity_ = capacityVal;",
          "28:   names_.clear();",
          "29: }",
          "",
          "[Removed Lines]",
          "26:   length_ = (capacityVal >> 5) + 1;",
          "27:   table_.assign(length_, HPACKHeader());",
          "",
          "[Added Lines]",
          "26:   uint32_t length = (capacityVal >> 5) + 1;",
          "27:   table_.assign(length, HPACKHeader());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134: }",
          "136: void HeaderTable::setCapacity(uint32_t capacity) {",
          "137:   capacity_ = capacity;",
          "139: }",
          "141: uint32_t HeaderTable::evict(uint32_t needed) {",
          "",
          "[Removed Lines]",
          "138:   evict(0);",
          "",
          "[Added Lines]",
          "137:   auto oldCapacity = capacity_;",
          "139:   if (capacity_ <= oldCapacity) {",
          "140:     evict(0);",
          "141:   } else {",
          "142:     auto oldTail = tail();",
          "143:     auto oldLength = table_.size();",
          "144:     uint32_t newLength = (capacity_ >> 5) + 1;",
          "145:     table_.resize(newLength);",
          "146:     if (size_ > 0 && oldTail > head_) {",
          "149:       std::copy(table_.begin() + oldTail, table_.begin() + oldLength,",
          "150:                 table_.begin() + newLength - (oldLength - oldTail));",
          "152:       for (auto& names_it: names_) {",
          "153:         for (auto& idx: names_it.second) {",
          "154:           if (idx >= oldTail) {",
          "155:             DCHECK_LT(idx + (table_.size() - oldLength), table_.size());",
          "156:             idx += (table_.size() - oldLength);",
          "157:           } else {",
          "160:             break;",
          "161:           }",
          "162:         }",
          "163:       }",
          "164:     }",
          "165:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "152: }",
          "154: uint32_t HeaderTable::next(uint32_t i) const {",
          "156: }",
          "158: uint32_t HeaderTable::tail() const {",
          "160: }",
          "162: uint32_t HeaderTable::toExternal(uint32_t internalIndex) const {",
          "164: }",
          "166: uint32_t HeaderTable::toExternal(uint32_t head, uint32_t length,",
          "",
          "[Removed Lines]",
          "155:   return (i + 1) % length_;",
          "159:   return (head_ + length_ - size_ + 1) % length_;",
          "163:   return toExternal(head_, length_, internalIndex);",
          "",
          "[Added Lines]",
          "182:   return (i + 1) % table_.size();",
          "186:   return (head_ + table_.size() - size_ + 1) % table_.size();",
          "190:   return toExternal(head_, table_.size(), internalIndex);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "169: }",
          "171: uint32_t HeaderTable::toInternal(uint32_t externalIndex) const {",
          "173: }",
          "175: uint32_t HeaderTable::toInternal(uint32_t head, uint32_t length,",
          "",
          "[Removed Lines]",
          "172:   return toInternal(head_, length_, externalIndex);",
          "",
          "[Added Lines]",
          "199:   return toInternal(head_, table_.size(), externalIndex);",
          "",
          "---------------"
        ],
        "proxygen/lib/http/codec/compress/HeaderTable.h||proxygen/lib/http/codec/compress/HeaderTable.h": [
          "File: proxygen/lib/http/codec/compress/HeaderTable.h -> proxygen/lib/http/codec/compress/HeaderTable.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:   }",
          "165:   }",
          "167:   bool operator==(const HeaderTable& other) const;",
          "",
          "[Removed Lines]",
          "163:   uint32_t length() const {",
          "164:     return length_;",
          "",
          "[Added Lines]",
          "163:   size_t length() const {",
          "164:     return table_.size();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "213:   std::vector<HPACKHeader> table_;",
          "215:   uint32_t size_{0};    // how many entries we have in the table",
          "217:   uint32_t head_{0};     // points to the first element of the ring",
          "219:   names_map names_;",
          "",
          "[Removed Lines]",
          "216:   uint32_t length_{0};   // number of entries in table_",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp||proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp": [
          "File: proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp -> proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "146:   \"\\n[1] (s=51) Accept-Encoding: gzip\\nreference set: [1, ]\\ntotal size: 51\\n\");",
          "147: }",
          "149: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149: TEST_F(HeaderTableTests, increaseCapacity) {",
          "150:   HPACKHeader accept(\"accept-encoding\", \"gzip\");",
          "151:   uint32_t max = 4;",
          "152:   uint32_t capacity = accept.bytes() * max;",
          "153:   HeaderTable table(capacity);",
          "154:   EXPECT_GT(table.length(), max);",
          "157:   for (size_t i = 0; i < table.length() + 1; i++) {",
          "158:     EXPECT_EQ(table.add(accept), true);",
          "159:   }",
          "160:   EXPECT_EQ(table.size(), max);",
          "161:   EXPECT_EQ(table.getIndex(accept), 4);",
          "163:   max = 8;",
          "164:   table.setCapacity(accept.bytes() * max);",
          "166:   EXPECT_GT(table.length(), max);",
          "168:   EXPECT_EQ(table.getIndex(accept), 4);",
          "170: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "06a7258459ceb76fd6727c3af620be5506926484",
      "candidate_info": {
        "commit_hash": "06a7258459ceb76fd6727c3af620be5506926484",
        "repo": "facebook/proxygen",
        "commit_url": "https://github.com/facebook/proxygen/commit/06a7258459ceb76fd6727c3af620be5506926484",
        "files": [
          "proxygen/lib/http/codec/compress/HeaderTable.cpp",
          "proxygen/lib/http/codec/compress/HeaderTable.h",
          "proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp"
        ],
        "message": "HPACK small improvement on flushing table\n\nSummary: Slightly improved the table path on attempting to add a header larger than the size of the table.\n\nReviewed By: afrind\n\nDifferential Revision: D4615780\n\nfbshipit-source-id: 62f79f390a4fb01984a65b9ae37988c38d1c9fa4",
        "before_after_code_files": [
          "proxygen/lib/http/codec/compress/HeaderTable.cpp||proxygen/lib/http/codec/compress/HeaderTable.cpp",
          "proxygen/lib/http/codec/compress/HeaderTable.h||proxygen/lib/http/codec/compress/HeaderTable.h",
          "proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp||proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "proxygen/lib/http/codec/compress/HeaderTable.cpp||proxygen/lib/http/codec/compress/HeaderTable.cpp",
            "proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp||proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp"
          ],
          "candidate": [
            "proxygen/lib/http/codec/compress/HeaderTable.cpp||proxygen/lib/http/codec/compress/HeaderTable.cpp",
            "proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp||proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp"
          ]
        }
      },
      "candidate_diff": {
        "proxygen/lib/http/codec/compress/HeaderTable.cpp||proxygen/lib/http/codec/compress/HeaderTable.cpp": [
          "File: proxygen/lib/http/codec/compress/HeaderTable.cpp -> proxygen/lib/http/codec/compress/HeaderTable.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:   size_ = 0;",
          "23:   head_ = 0;",
          "24:   capacity_ = capacityVal;",
          "28:   names_.clear();",
          "29: }",
          "31: bool HeaderTable::add(const HPACKHeader& header) {",
          "38:     return false;",
          "39:   }",
          "40:   if (size_ > 0) {",
          "41:     head_ = next(head_);",
          "42:   }",
          "",
          "[Removed Lines]",
          "26:   uint32_t length = (capacityVal >> 5) + 1;",
          "27:   table_.assign(length, HPACKHeader());",
          "33:   if (bytes_ + header.bytes() > capacity_) {",
          "34:     evict(header.bytes());",
          "35:   }",
          "37:   if (bytes_ + header.bytes() > capacity_) {",
          "",
          "[Added Lines]",
          "26:   table_.assign(getMaxTableLength(capacity_), HPACKHeader());",
          "32:   if (header.bytes() > capacity_) {",
          "36:     reset();",
          "41:   if ((bytes_ + header.bytes()) > capacity_) {",
          "42:     evict(header.bytes());",
          "43:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:   return table_[toInternal(i)];",
          "79: }",
          "81: void HeaderTable::removeLast() {",
          "82:   auto t = tail();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86: uint32_t HeaderTable::getMaxTableLength(uint32_t capacityVal) {",
          "90:   return (capacityVal >> 5);",
          "91: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "94:   --size_;",
          "95: }",
          "97: void HeaderTable::setCapacity(uint32_t capacity) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109: void HeaderTable::reset() {",
          "110:   names_.clear();",
          "112:   bytes_ = 0;",
          "113:   size_ = 0;",
          "116: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "114:     if (newLength > table_.size()) {",
          "115:       auto oldTail = tail();",
          "116:       auto oldLength = table_.size();",
          "",
          "[Removed Lines]",
          "113:     uint32_t newLength = (capacity_ >> 5) + 1;",
          "",
          "[Added Lines]",
          "134:     uint32_t newLength = getMaxTableLength(capacity_);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "139: }",
          "141: uint32_t HeaderTable::evict(uint32_t needed) {",
          "143:   while (size_ > 0 && (bytes_ + needed > capacity_)) {",
          "144:     removeLast();",
          "146:   }",
          "148: }",
          "150: bool HeaderTable::isValid(uint32_t index) const {",
          "",
          "[Removed Lines]",
          "142:   uint32_t evicted = 0;",
          "145:     ++evicted;",
          "147:   return evicted;",
          "",
          "[Added Lines]",
          "163:   uint32_t previousSize = size_;",
          "167:   return previousSize - size_;",
          "",
          "---------------"
        ],
        "proxygen/lib/http/codec/compress/HeaderTable.h||proxygen/lib/http/codec/compress/HeaderTable.h": [
          "File: proxygen/lib/http/codec/compress/HeaderTable.h -> proxygen/lib/http/codec/compress/HeaderTable.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:  private:",
          "134:   HeaderTable& operator=(const HeaderTable&); // non-copyable",
          "139:   void removeLast();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140:   uint32_t getMaxTableLength(uint32_t capacityVal);",
          "150:   void reset();",
          "",
          "---------------"
        ],
        "proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp||proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp": [
          "File: proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp -> proxygen/lib/http/codec/compress/test/HeaderTableTests.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:   EXPECT_EQ(table.names().size(), 0);",
          "116: }",
          "119:   HPACKHeader accept(\"accept-encoding\", \"gzip\");",
          "120:   uint32_t max = 10;",
          "121:   uint32_t capacity = accept.bytes() * max;",
          "",
          "[Removed Lines]",
          "118: TEST_F(HeaderTableTests, reduce_capacity) {",
          "",
          "[Added Lines]",
          "118: TEST_F(HeaderTableTests, reduceCapacity) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "259:   EXPECT_EQ(table.size(), max);",
          "260: }",
          "262: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "262: TEST_F(HeaderTableTests, addLargerThanTable) {",
          "264:   uint32_t capacityBytes = 256;",
          "265:   HeaderTable table(capacityBytes);",
          "266:   table.add(HPACKHeader(\"accept-encoding\", \"gzip\"));  // internal index = 0",
          "267:   table.add(HPACKHeader(\"accept-encoding\", \"gzip\"));  // internal index = 1",
          "268:   table.add(HPACKHeader(\"test-encoding\", \"gzip\"));    // internal index = 2",
          "269:   EXPECT_EQ(table.names().size(), 2);",
          "273:   table.add(HPACKHeader(std::string(capacityBytes, 'a'), \"gzip\"));",
          "274:   EXPECT_EQ(table.names().size(), 0);",
          "277:   table.add(HPACKHeader(\"accept-encoding\", \"gzip\"));  // internal index = 3",
          "278:   table.add(HPACKHeader(\"accept-encoding\", \"gzip\"));  // internal index = 4",
          "279:   table.add(HPACKHeader(\"test-encoding\", \"gzip\"));    // internal index = 5",
          "280:   EXPECT_EQ(table.names().size(), 2);",
          "282:   EXPECT_EQ(table.hasName(\"accept-encoding\"), true);",
          "283:   auto it = table.names().find(\"accept-encoding\");",
          "284:   EXPECT_EQ(it->second.size(), 2);",
          "288:   EXPECT_EQ(table.nameIndex(\"accept-encoding\"), 2);",
          "289: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}