{
  "cve_id": "CVE-2022-35963",
  "cve_desc": "TensorFlow is an open source platform for machine learning. The implementation of `FractionalAvgPoolGrad` does not fully validate the input `orig_input_tensor_shape`. This results in an overflow that results in a `CHECK` failure which can be used to trigger a denial of service attack. We have patched the issue in GitHub commit 03a659d7be9a1154fdf5eeac221e5950fec07dad. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "03a659d7be9a1154fdf5eeac221e5950fec07dad",
  "patch_info": {
    "commit_hash": "03a659d7be9a1154fdf5eeac221e5950fec07dad",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/03a659d7be9a1154fdf5eeac221e5950fec07dad",
    "files": [
      "tensorflow/core/kernels/fractional_avg_pool_op.cc",
      "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py"
    ],
    "message": "Fix security vulnerability with FractionalAvgPoolGrad\n\nPiperOrigin-RevId: 462292194",
    "before_after_code_files": [
      "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc",
      "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc": [
      "File: tensorflow/core/kernels/fractional_avg_pool_op.cc -> tensorflow/core/kernels/fractional_avg_pool_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: #include <random>",
      "20: #include <vector>",
      "24: #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"",
      "25: #include \"tensorflow/core/framework/numeric_op.h\"",
      "26: #include \"tensorflow/core/framework/op_kernel.h\"",
      "27: #include \"tensorflow/core/lib/random/random.h\"",
      "28: #include \"tensorflow/core/platform/logging.h\"",
      "29: #include \"tensorflow/core/platform/mutex.h\"",
      "30: #include \"tensorflow/core/util/guarded_philox_random.h\"",
      "32: namespace tensorflow {",
      "33: typedef Eigen::ThreadPoolDevice CPUDevice;",
      "",
      "[Removed Lines]",
      "22: #include \"tensorflow/core/kernels/fractional_pool_common.h\"",
      "",
      "[Added Lines]",
      "26: #include \"tensorflow/core/kernels/fractional_pool_common.h\"",
      "31: #include \"tensorflow/core/util/overflow.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "241:                     orig_input_tensor_shape.NumElements() == 4,",
      "242:                 errors::InvalidArgument(\"original input tensor shape must be\"",
      "243:                                         \"1-dimensional and 4 elements\"));",
      "244:     const Tensor& out_backprop = context->input(1);",
      "245:     const Tensor& row_seq_tensor = context->input(2);",
      "246:     const Tensor& col_seq_tensor = context->input(3);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "245:     int64_t num_elements = 1;",
      "246:     for (int i = 0; i < orig_input_tensor_shape.dims(); i++) {",
      "247:       OP_REQUIRES(context, orig_input_tensor_shape.dim_size(i) > 0,",
      "248:                   errors::InvalidArgument(",
      "249:                       \"orig_input_tensor_shape must be positive, got: \",",
      "250:                       orig_input_tensor_shape.dim_size(i)));",
      "251:       num_elements = MultiplyWithoutOverflow(",
      "252:           num_elements, orig_input_tensor_shape.dim_size(i));",
      "253:       OP_REQUIRES(",
      "254:           context, num_elements > 0,",
      "255:           errors::InvalidArgument(",
      "256:               \"The total elements specified by orig_input_tensor_shape\",",
      "257:               \" is too large. Encountered overflow after multiplying \",",
      "258:               orig_input_tensor_shape.dim_size(i), \", result: \", num_elements));",
      "259:     }",
      "262:     OP_REQUIRES(context, out_backprop.dims() == 4,",
      "263:                 errors::InvalidArgument(\"out_backprop must be 4-dimensional\"));",
      "264:     for (int i = 0; i < out_backprop.dims(); i++) {",
      "265:       OP_REQUIRES(context, out_backprop.dim_size(i) > 0,",
      "266:                   errors::InvalidArgument(",
      "267:                       \"out_backprop must be positive for all dimension, got:\",",
      "268:                       out_backprop.dim_size(i)));",
      "269:     }",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py": [
      "File: tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py -> tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "541:           delta=1e-2)",
      "542:       self.assertLess(gradient_error, error_margin)",
      "545: if __name__ == \"__main__\":",
      "546:   test.main()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "544:   def testInvalidSeqRaiseErrorForFractionalAvgPoolGrad(self):",
      "545:     with self.assertRaises((errors.InvalidArgumentError, ValueError)):",
      "546:       with self.cached_session() as _:",
      "547:         overlapping = True",
      "548:         orig_input_tensor_shape = constant_op.constant(",
      "549:             -1879048192, shape=[4], dtype=dtypes.int64)",
      "550:         out_backprop = constant_op.constant([],",
      "551:                                             shape=[0, 0, 0, 0],",
      "552:                                             dtype=dtypes.float64)",
      "553:         row_pooling_sequence = constant_op.constant(",
      "554:             1, shape=[4], dtype=dtypes.int64)",
      "555:         col_pooling_sequence = constant_op.constant(",
      "556:             1, shape=[4], dtype=dtypes.int64)",
      "557:         t = gen_nn_ops.fractional_avg_pool_grad(",
      "558:             orig_input_tensor_shape=orig_input_tensor_shape,",
      "559:             out_backprop=out_backprop,",
      "560:             row_pooling_sequence=row_pooling_sequence,",
      "561:             col_pooling_sequence=col_pooling_sequence,",
      "562:             overlapping=overlapping)",
      "563:         self.evaluate(t)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "821de3bfe45d815e8884a59d8ca1121e25d39573",
      "candidate_info": {
        "commit_hash": "821de3bfe45d815e8884a59d8ca1121e25d39573",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/821de3bfe45d815e8884a59d8ca1121e25d39573",
        "files": [
          "tensorflow/core/kernels/fractional_avg_pool_op.cc",
          "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py"
        ],
        "message": "Fix security vulnerability with FractionalAvgPoolGrad\n\nPiperOrigin-RevId: 462292194",
        "before_after_code_files": [
          "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc",
          "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc",
            "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc",
            "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc": [
          "File: tensorflow/core/kernels/fractional_avg_pool_op.cc -> tensorflow/core/kernels/fractional_avg_pool_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #include <random>",
          "20: #include <vector>",
          "24: #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"",
          "25: #include \"tensorflow/core/framework/numeric_op.h\"",
          "26: #include \"tensorflow/core/framework/op_kernel.h\"",
          "27: #include \"tensorflow/core/lib/random/random.h\"",
          "28: #include \"tensorflow/core/platform/logging.h\"",
          "29: #include \"tensorflow/core/platform/mutex.h\"",
          "30: #include \"tensorflow/core/util/guarded_philox_random.h\"",
          "32: namespace tensorflow {",
          "33: typedef Eigen::ThreadPoolDevice CPUDevice;",
          "",
          "[Removed Lines]",
          "22: #include \"tensorflow/core/kernels/fractional_pool_common.h\"",
          "",
          "[Added Lines]",
          "26: #include \"tensorflow/core/kernels/fractional_pool_common.h\"",
          "31: #include \"tensorflow/core/util/overflow.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "241:                     orig_input_tensor_shape.NumElements() == 4,",
          "242:                 errors::InvalidArgument(\"original input tensor shape must be\"",
          "243:                                         \"1-dimensional and 4 elements\"));",
          "244:     const Tensor& out_backprop = context->input(1);",
          "245:     const Tensor& row_seq_tensor = context->input(2);",
          "246:     const Tensor& col_seq_tensor = context->input(3);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "245:     int64_t num_elements = 1;",
          "246:     for (int i = 0; i < orig_input_tensor_shape.dims(); i++) {",
          "247:       OP_REQUIRES(context, orig_input_tensor_shape.dim_size(i) > 0,",
          "248:                   errors::InvalidArgument(",
          "249:                       \"orig_input_tensor_shape must be positive, got: \",",
          "250:                       orig_input_tensor_shape.dim_size(i)));",
          "251:       num_elements = MultiplyWithoutOverflow(",
          "252:           num_elements, orig_input_tensor_shape.dim_size(i));",
          "253:       OP_REQUIRES(",
          "254:           context, num_elements > 0,",
          "255:           errors::InvalidArgument(",
          "256:               \"The total elements specified by orig_input_tensor_shape\",",
          "257:               \" is too large. Encountered overflow after multiplying \",",
          "258:               orig_input_tensor_shape.dim_size(i), \", result: \", num_elements));",
          "259:     }",
          "262:     OP_REQUIRES(context, out_backprop.dims() == 4,",
          "263:                 errors::InvalidArgument(\"out_backprop must be 4-dimensional\"));",
          "264:     for (int i = 0; i < out_backprop.dims(); i++) {",
          "265:       OP_REQUIRES(context, out_backprop.dim_size(i) > 0,",
          "266:                   errors::InvalidArgument(",
          "267:                       \"out_backprop must be positive for all dimension, got:\",",
          "268:                       out_backprop.dim_size(i)));",
          "269:     }",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py": [
          "File: tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py -> tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "541:           delta=1e-2)",
          "542:       self.assertLess(gradient_error, error_margin)",
          "545: if __name__ == \"__main__\":",
          "546:   test.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "544:   def testInvalidSeqRaiseErrorForFractionalAvgPoolGrad(self):",
          "545:     with self.assertRaises((errors.InvalidArgumentError, ValueError)):",
          "546:       with self.cached_session() as _:",
          "547:         overlapping = True",
          "548:         orig_input_tensor_shape = constant_op.constant(",
          "549:             -1879048192, shape=[4], dtype=dtypes.int64)",
          "550:         out_backprop = constant_op.constant([],",
          "551:                                             shape=[0, 0, 0, 0],",
          "552:                                             dtype=dtypes.float64)",
          "553:         row_pooling_sequence = constant_op.constant(",
          "554:             1, shape=[4], dtype=dtypes.int64)",
          "555:         col_pooling_sequence = constant_op.constant(",
          "556:             1, shape=[4], dtype=dtypes.int64)",
          "557:         t = gen_nn_ops.fractional_avg_pool_grad(",
          "558:             orig_input_tensor_shape=orig_input_tensor_shape,",
          "559:             out_backprop=out_backprop,",
          "560:             row_pooling_sequence=row_pooling_sequence,",
          "561:             col_pooling_sequence=col_pooling_sequence,",
          "562:             overlapping=overlapping)",
          "563:         self.evaluate(t)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c6327961cadd849834fffe0209dba82bd7a3d791",
      "candidate_info": {
        "commit_hash": "c6327961cadd849834fffe0209dba82bd7a3d791",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/c6327961cadd849834fffe0209dba82bd7a3d791",
        "files": [
          "tensorflow/core/kernels/fractional_avg_pool_op.cc",
          "tensorflow/python/kernel_tests/fractional_avg_pool_op_test.py"
        ],
        "message": "Fix security vulnerability with FractionalAvgPoolGrad\n\nPiperOrigin-RevId: 462292194",
        "before_after_code_files": [
          "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc",
          "tensorflow/python/kernel_tests/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/fractional_avg_pool_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc": [
          "File: tensorflow/core/kernels/fractional_avg_pool_op.cc -> tensorflow/core/kernels/fractional_avg_pool_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #include <random>",
          "20: #include <vector>",
          "24: #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"",
          "25: #include \"tensorflow/core/framework/numeric_op.h\"",
          "26: #include \"tensorflow/core/framework/op_kernel.h\"",
          "27: #include \"tensorflow/core/lib/random/random.h\"",
          "28: #include \"tensorflow/core/platform/logging.h\"",
          "29: #include \"tensorflow/core/platform/mutex.h\"",
          "30: #include \"tensorflow/core/util/guarded_philox_random.h\"",
          "32: namespace tensorflow {",
          "33: typedef Eigen::ThreadPoolDevice CPUDevice;",
          "",
          "[Removed Lines]",
          "22: #include \"tensorflow/core/kernels/fractional_pool_common.h\"",
          "",
          "[Added Lines]",
          "26: #include \"tensorflow/core/kernels/fractional_pool_common.h\"",
          "31: #include \"tensorflow/core/util/overflow.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "241:                     orig_input_tensor_shape.NumElements() == 4,",
          "242:                 errors::InvalidArgument(\"original input tensor shape must be\"",
          "243:                                         \"1-dimensional and 4 elements\"));",
          "244:     const Tensor& out_backprop = context->input(1);",
          "245:     const Tensor& row_seq_tensor = context->input(2);",
          "246:     const Tensor& col_seq_tensor = context->input(3);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "245:     int64_t num_elements = 1;",
          "246:     for (int i = 0; i < orig_input_tensor_shape.dims(); i++) {",
          "247:       OP_REQUIRES(context, orig_input_tensor_shape.dim_size(i) > 0,",
          "248:                   errors::InvalidArgument(",
          "249:                       \"orig_input_tensor_shape must be positive, got: \",",
          "250:                       orig_input_tensor_shape.dim_size(i)));",
          "251:       num_elements = MultiplyWithoutOverflow(",
          "252:           num_elements, orig_input_tensor_shape.dim_size(i));",
          "253:       OP_REQUIRES(",
          "254:           context, num_elements > 0,",
          "255:           errors::InvalidArgument(",
          "256:               \"The total elements specified by orig_input_tensor_shape\",",
          "257:               \" is too large. Encountered overflow after multiplying \",",
          "258:               orig_input_tensor_shape.dim_size(i), \", result: \", num_elements));",
          "259:     }",
          "262:     OP_REQUIRES(context, out_backprop.dims() == 4,",
          "263:                 errors::InvalidArgument(\"out_backprop must be 4-dimensional\"));",
          "264:     for (int i = 0; i < out_backprop.dims(); i++) {",
          "265:       OP_REQUIRES(context, out_backprop.dim_size(i) > 0,",
          "266:                   errors::InvalidArgument(",
          "267:                       \"out_backprop must be positive for all dimension, got:\",",
          "268:                       out_backprop.dim_size(i)));",
          "269:     }",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/fractional_avg_pool_op_test.py": [
          "File: tensorflow/python/kernel_tests/fractional_avg_pool_op_test.py -> tensorflow/python/kernel_tests/fractional_avg_pool_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "545:           delta=1e-2)",
          "546:       self.assertLess(gradient_error, error_margin)",
          "549: if __name__ == \"__main__\":",
          "550:   test.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "548:   def testInvalidSeqRaiseErrorForFractionalAvgPoolGrad(self):",
          "549:     with self.assertRaises((errors.InvalidArgumentError, ValueError)):",
          "550:       with self.cached_session() as _:",
          "551:         overlapping = True",
          "552:         orig_input_tensor_shape = constant_op.constant(",
          "553:             -1879048192, shape=[4], dtype=dtypes.int64)",
          "554:         out_backprop = constant_op.constant([],",
          "555:                                             shape=[0, 0, 0, 0],",
          "556:                                             dtype=dtypes.float64)",
          "557:         row_pooling_sequence = constant_op.constant(",
          "558:             1, shape=[4], dtype=dtypes.int64)",
          "559:         col_pooling_sequence = constant_op.constant(",
          "560:             1, shape=[4], dtype=dtypes.int64)",
          "561:         t = gen_nn_ops.fractional_avg_pool_grad(",
          "562:             orig_input_tensor_shape=orig_input_tensor_shape,",
          "563:             out_backprop=out_backprop,",
          "564:             row_pooling_sequence=row_pooling_sequence,",
          "565:             col_pooling_sequence=col_pooling_sequence,",
          "566:             overlapping=overlapping)",
          "567:         self.evaluate(t)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e0e3375dfc652be606cf3f67e2643b1ac47b627c",
      "candidate_info": {
        "commit_hash": "e0e3375dfc652be606cf3f67e2643b1ac47b627c",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/e0e3375dfc652be606cf3f67e2643b1ac47b627c",
        "files": [
          "tensorflow/core/kernels/fractional_avg_pool_op.cc",
          "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py"
        ],
        "message": "Fix security vulnerability with FractionalAvgPoolGrad\n\nPiperOrigin-RevId: 462292194",
        "before_after_code_files": [
          "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc",
          "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc",
            "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc",
            "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/fractional_avg_pool_op.cc||tensorflow/core/kernels/fractional_avg_pool_op.cc": [
          "File: tensorflow/core/kernels/fractional_avg_pool_op.cc -> tensorflow/core/kernels/fractional_avg_pool_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #include <random>",
          "20: #include <vector>",
          "24: #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"",
          "25: #include \"tensorflow/core/framework/numeric_op.h\"",
          "26: #include \"tensorflow/core/framework/op_kernel.h\"",
          "27: #include \"tensorflow/core/lib/random/random.h\"",
          "28: #include \"tensorflow/core/platform/logging.h\"",
          "29: #include \"tensorflow/core/platform/mutex.h\"",
          "30: #include \"tensorflow/core/util/guarded_philox_random.h\"",
          "32: namespace tensorflow {",
          "33: typedef Eigen::ThreadPoolDevice CPUDevice;",
          "",
          "[Removed Lines]",
          "22: #include \"tensorflow/core/kernels/fractional_pool_common.h\"",
          "",
          "[Added Lines]",
          "26: #include \"tensorflow/core/kernels/fractional_pool_common.h\"",
          "31: #include \"tensorflow/core/util/overflow.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "241:                     orig_input_tensor_shape.NumElements() == 4,",
          "242:                 errors::InvalidArgument(\"original input tensor shape must be\"",
          "243:                                         \"1-dimensional and 4 elements\"));",
          "244:     const Tensor& out_backprop = context->input(1);",
          "245:     const Tensor& row_seq_tensor = context->input(2);",
          "246:     const Tensor& col_seq_tensor = context->input(3);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "245:     int64_t num_elements = 1;",
          "246:     for (int i = 0; i < orig_input_tensor_shape.dims(); i++) {",
          "247:       OP_REQUIRES(context, orig_input_tensor_shape.dim_size(i) > 0,",
          "248:                   errors::InvalidArgument(",
          "249:                       \"orig_input_tensor_shape must be positive, got: \",",
          "250:                       orig_input_tensor_shape.dim_size(i)));",
          "251:       num_elements = MultiplyWithoutOverflow(",
          "252:           num_elements, orig_input_tensor_shape.dim_size(i));",
          "253:       OP_REQUIRES(",
          "254:           context, num_elements > 0,",
          "255:           errors::InvalidArgument(",
          "256:               \"The total elements specified by orig_input_tensor_shape\",",
          "257:               \" is too large. Encountered overflow after multiplying \",",
          "258:               orig_input_tensor_shape.dim_size(i), \", result: \", num_elements));",
          "259:     }",
          "262:     OP_REQUIRES(context, out_backprop.dims() == 4,",
          "263:                 errors::InvalidArgument(\"out_backprop must be 4-dimensional\"));",
          "264:     for (int i = 0; i < out_backprop.dims(); i++) {",
          "265:       OP_REQUIRES(context, out_backprop.dim_size(i) > 0,",
          "266:                   errors::InvalidArgument(",
          "267:                       \"out_backprop must be positive for all dimension, got:\",",
          "268:                       out_backprop.dim_size(i)));",
          "269:     }",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py||tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py": [
          "File: tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py -> tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "541:           delta=1e-2)",
          "542:       self.assertLess(gradient_error, error_margin)",
          "545: if __name__ == \"__main__\":",
          "546:   test.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "544:   def testInvalidSeqRaiseErrorForFractionalAvgPoolGrad(self):",
          "545:     with self.assertRaises((errors.InvalidArgumentError, ValueError)):",
          "546:       with self.cached_session() as _:",
          "547:         overlapping = True",
          "548:         orig_input_tensor_shape = constant_op.constant(",
          "549:             -1879048192, shape=[4], dtype=dtypes.int64)",
          "550:         out_backprop = constant_op.constant([],",
          "551:                                             shape=[0, 0, 0, 0],",
          "552:                                             dtype=dtypes.float64)",
          "553:         row_pooling_sequence = constant_op.constant(",
          "554:             1, shape=[4], dtype=dtypes.int64)",
          "555:         col_pooling_sequence = constant_op.constant(",
          "556:             1, shape=[4], dtype=dtypes.int64)",
          "557:         t = gen_nn_ops.fractional_avg_pool_grad(",
          "558:             orig_input_tensor_shape=orig_input_tensor_shape,",
          "559:             out_backprop=out_backprop,",
          "560:             row_pooling_sequence=row_pooling_sequence,",
          "561:             col_pooling_sequence=col_pooling_sequence,",
          "562:             overlapping=overlapping)",
          "563:         self.evaluate(t)",
          "",
          "---------------"
        ]
      }
    }
  ]
}