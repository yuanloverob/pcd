{
  "cve_id": "CVE-2019-19924",
  "cve_desc": "SQLite 3.30.1 mishandles certain parser-tree rewriting, related to expr.c, vdbeaux.c, and window.c. This is caused by incorrect sqlite3WindowRewrite() error handling.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
  "patch_info": {
    "commit_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8654186b0236d556aa85528c2573ee0b6ab71be3",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/vdbeaux.c",
      "src/window.c"
    ],
    "message": "When an error occurs while rewriting the parser tree for window functions in the sqlite3WindowRewrite() routine, make sure that pParse->nErr is set, and make sure that this shuts down any subsequent code generation that might depend on the transformations that were implemented.  This fixes a problem discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: e2bddcd4c55ba3cbe0130332679ff4b048630d0ced9a8899982edb5a3569ba7f",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/vdbeaux.c||src/vdbeaux.c",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4417c5bf0aabb34ed174f01afd981c924ae965a42128719d8d6735536631d12f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "376:   int addr;",
      "377:   CollSeq *p4;",
      "379:   if( isCommuted ){",
      "380:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
      "381:   }else{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:   if( pParse->nErr ) return 0;",
      "",
      "---------------"
    ],
    "src/vdbeaux.c||src/vdbeaux.c": [
      "File: src/vdbeaux.c -> src/vdbeaux.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1304: static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){",
      "1305:   assert( p->nOp>0 || p->aOp==0 );",
      "1307:   if( p->nOp ){",
      "1308:     assert( p->aOp );",
      "1309:     sqlite3DbFree(p->db, p->aOp[p->nOp-1].zComment);",
      "",
      "[Removed Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );",
      "",
      "[Added Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed",
      "1307:           || p->pParse->nErr>0 );",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "935:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
      "936:     if( pTab==0 ){",
      "938:     }",
      "940:     p->pSrc = 0;",
      "",
      "[Removed Lines]",
      "937:       return SQLITE_NOMEM;",
      "",
      "[Added Lines]",
      "937:       return sqlite3ErrorToParser(db, SQLITE_NOMEM);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1039:     sqlite3DbFree(db, pTab);",
      "1040:   }",
      "1042:   return rc;",
      "1043: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1042:   if( rc && pParse->nErr==0 ){",
      "1043:     assert( pParse->db->mallocFailed );",
      "1044:     return sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
      "1045:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3a07548b0d40b1f08574914aa3a2af07fbbc9596",
      "candidate_info": {
        "commit_hash": "3a07548b0d40b1f08574914aa3a2af07fbbc9596",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3a07548b0d40b1f08574914aa3a2af07fbbc9596",
        "files": [
          "ext/fts5/test/fts5vocab.test",
          "ext/fts5/test/fts5vocab2.test",
          "manifest",
          "manifest.uuid",
          "test/e_select.test",
          "test/triggerF.test",
          "test/unionvtab.test",
          "test/window1.test"
        ],
        "message": "Remove unnecessary whitespace from testcase result strings.\n\nFossilOrigin-Name: ad70f03ceda74163903d247a975666b35fae722a27c48dd3efd31c1164b5627e",
        "before_after_code_files": [
          "ext/fts5/test/fts5vocab.test||ext/fts5/test/fts5vocab.test",
          "ext/fts5/test/fts5vocab2.test||ext/fts5/test/fts5vocab2.test",
          "manifest.uuid||manifest.uuid",
          "test/e_select.test||test/e_select.test",
          "test/triggerF.test||test/triggerF.test",
          "test/unionvtab.test||test/unionvtab.test",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/test/fts5vocab.test||ext/fts5/test/fts5vocab.test": [
          "File: ext/fts5/test/fts5vocab.test -> ext/fts5/test/fts5vocab.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:   3 cnt {} 0 {} 0",
          "80: }",
          "85: do_execsql_test 1.3 {",
          "86:   INSERT INTO t1 VALUES('x y z');",
          "",
          "[Removed Lines]",
          "82: do_execsql_test 1.2.1 { SELECT * FROM v1 } { }",
          "83: do_execsql_test 1.2.2 { SELECT * FROM v2 } { }",
          "",
          "[Added Lines]",
          "82: do_execsql_test 1.2.1 { SELECT * FROM v1 } {}",
          "83: do_execsql_test 1.2.2 { SELECT * FROM v2 } {}",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5vocab2.test||ext/fts5/test/fts5vocab2.test": [
          "File: ext/fts5/test/fts5vocab2.test -> ext/fts5/test/fts5vocab2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "80: do_execsql_test 1.5 {",
          "81:   DELETE FROM t1;",
          "82:   SELECT * FROM v1;",
          "86: #-------------------------------------------------------------------------",
          "87: #",
          "",
          "[Removed Lines]",
          "83: } {",
          "84: }",
          "",
          "[Added Lines]",
          "83: } {}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143: do_execsql_test 2.5 {",
          "144:   DELETE FROM t1;",
          "145:   SELECT * FROM v1;",
          "149: #-------------------------------------------------------------------------",
          "150: #",
          "",
          "[Removed Lines]",
          "146: } {",
          "147: }",
          "",
          "[Added Lines]",
          "145: } {}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "202: do_execsql_test 3.5 {",
          "203:   DELETE FROM t1;",
          "204:   SELECT * FROM v1;",
          "208: finish_test",
          "",
          "[Removed Lines]",
          "205: } {",
          "206: }",
          "",
          "[Added Lines]",
          "203: } {}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 83935b950619855fb3bf05486091804ac2a61fb993c6ec826c89f943264fabc3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/e_select.test||test/e_select.test": [
          "File: test/e_select.test -> test/e_select.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:   0102.1  \"SELECT count(*), max(a) FROM t1 GROUP BY b HAVING count(*)=1\" {",
          "168:     1 a 1 c 1 b",
          "169:   }",
          "172:   1101.1  \"SELECT DISTINCT count(*), max(a) FROM t1 GROUP BY b\" {1 a 1 c 1 b}",
          "173:   1102.1  \"SELECT DISTINCT count(*), max(a) FROM t1",
          "",
          "[Removed Lines]",
          "170:   0102.2  \"SELECT count(*), max(a) FROM t1 GROUP BY b HAVING count(*)=2\" { }",
          "",
          "[Added Lines]",
          "170:   0102.2  \"SELECT count(*), max(a) FROM t1 GROUP BY b HAVING count(*)=2\" {}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "175:     1 a 1 c 1 b",
          "176:   }",
          "177:   1102.2  \"SELECT DISTINCT count(*), max(a) FROM t1",
          "181:   2101.1  \"SELECT ALL count(*), max(a) FROM t1 GROUP BY b\" {1 a 1 c 1 b}",
          "182:   2102.1  \"SELECT ALL count(*), max(a) FROM t1",
          "",
          "[Removed Lines]",
          "178:            GROUP BY b HAVING count(*)=2\" {",
          "179:   }",
          "",
          "[Added Lines]",
          "178:            GROUP BY b HAVING count(*)=2\" {}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "184:     1 a 1 c 1 b",
          "185:   }",
          "186:   2102.2  \"SELECT ALL count(*), max(a) FROM t1",
          "190:   0011.1  \"SELECT 1, 2, 3 WHERE 1 GROUP BY 2\" {1 2 3}",
          "191:   0012.1  \"SELECT 1, 2, 3 WHERE 0 GROUP BY 2 HAVING count(*)=1\" {}",
          "",
          "[Removed Lines]",
          "187:            GROUP BY b HAVING count(*)=2\" {",
          "188:   }",
          "",
          "[Added Lines]",
          "186:            GROUP BY b HAVING count(*)=2\" {}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "204:   0112.1  \"SELECT count(*), max(a) FROM t1",
          "205:            WHERE a='c' GROUP BY b HAVING count(*)=1\" {1 c}",
          "206:   0112.2  \"SELECT count(*), max(a) FROM t1",
          "208:   1111.1  \"SELECT DISTINCT count(*), max(a) FROM t1 WHERE a<'c' GROUP BY b\"",
          "209:           {1 a 1 b}",
          "210:   1112.1  \"SELECT DISTINCT count(*), max(a) FROM t1 WHERE a>'a'",
          "",
          "[Removed Lines]",
          "207:            WHERE 0 GROUP BY b HAVING count(*)=2\" { }",
          "",
          "[Added Lines]",
          "205:            WHERE 0 GROUP BY b HAVING count(*)=2\" {}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "212:     1 c 1 b",
          "213:   }",
          "214:   1112.2  \"SELECT DISTINCT count(*), max(a) FROM t1 WHERE 0",
          "218:   2111.1  \"SELECT ALL count(*), max(a) FROM t1 WHERE b>'one' GROUP BY b\"",
          "219:           {1 c 1 b}",
          "",
          "[Removed Lines]",
          "215:            GROUP BY b HAVING count(*)=2\" {",
          "216:   }",
          "",
          "[Added Lines]",
          "213:            GROUP BY b HAVING count(*)=2\" {}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "222:     1 a 1 c",
          "223:   }",
          "224:   2112.2  \"SELECT ALL count(*), max(a) FROM t1",
          "226: }",
          "",
          "[Removed Lines]",
          "225:            WHERE 0 GROUP BY b HAVING count(*)=2\" { }",
          "",
          "[Added Lines]",
          "222:            WHERE 0 GROUP BY b HAVING count(*)=2\" {}",
          "",
          "---------------"
        ],
        "test/triggerF.test||test/triggerF.test": [
          "File: test/triggerF.test -> test/triggerF.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: foreach {tn sql log} {",
          "25:   2 {",
          "26:     CREATE TRIGGER trd AFTER DELETE ON t1 BEGIN",
          "",
          "[Removed Lines]",
          "23:   1 { } { }",
          "",
          "[Added Lines]",
          "23:   1 {} {}",
          "",
          "---------------"
        ],
        "test/unionvtab.test||test/unionvtab.test": [
          "File: test/unionvtab.test -> test/unionvtab.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "373: }",
          "374: do_execsql_test 4.3.4 {",
          "375:   SELECT * FROM sl WHERE rowid<-9223372036854775808",
          "378: do_execsql_test 4.4.1 {",
          "379:   SELECT * FROM sl WHERE rowid<9223372036854775807",
          "",
          "[Removed Lines]",
          "376: } { }",
          "",
          "[Added Lines]",
          "376: } {}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "394: }",
          "395: do_execsql_test 4.4.4 {",
          "396:   SELECT * FROM sl WHERE rowid>9223372036854775807",
          "399: #-------------------------------------------------------------------------",
          "400: # More than 8 source tables.",
          "",
          "[Removed Lines]",
          "397: } { }",
          "",
          "[Added Lines]",
          "397: } {}",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "591:   SELECT a, rank() OVER(ORDER BY b) FROM t1",
          "592:     INTERSECT",
          "593:   SELECT a, rank() OVER(ORDER BY b DESC) FROM t1;",
          "597: # 2018-12-06",
          "598: # https://www.sqlite.org/src/info/f09fcd17810f65f7",
          "",
          "[Removed Lines]",
          "594: } {",
          "595: }",
          "",
          "[Added Lines]",
          "594: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5df84280692df828b2c76d5a3a7ebf4c877f3900",
      "candidate_info": {
        "commit_hash": "5df84280692df828b2c76d5a3a7ebf4c877f3900",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5df84280692df828b2c76d5a3a7ebf4c877f3900",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "src/sqlite.h.in",
          "src/test1.c",
          "src/vtab.c"
        ],
        "message": "The experimental sqlite3_drop_modules_except() interface.\n\nFossilOrigin-Name: 0851db4d337a87f8b2d3ce2ae9f9c928b9483591ca41a9e39cc01548059b1888",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/test1.c||src/test1.c",
          "src/vtab.c||src/vtab.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5d6f4dfeea75c7dcd8c511545accb9eb4b405a02db034332249ba54794e313d2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3652: #ifdef SQLITE_DEBUG",
          "3653:   \".unmodule NAME ...       Unregister virtual table modules\",",
          "3654: #endif",
          "3655:   \".vfsinfo ?AUX?           Information about the top-level VFS\",",
          "3656:   \".vfslist                 List all available VFSes\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3654:   \"    --allexcept             Unregister everything except those named\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6892:   int nArg = 0;",
          "6893:   int n, c;",
          "6894:   int rc = 0;",
          "6897: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "6898:   if( p->expert.pExpert ){",
          "",
          "[Removed Lines]",
          "6895:   char *azArg[50];",
          "",
          "[Added Lines]",
          "6896:   char *azArg[52];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6906:     while( IsSpace(zLine[h]) ){ h++; }",
          "6907:     if( zLine[h]==0 ) break;",
          "6908:     if( zLine[h]=='\\'' || zLine[h]=='\"' ){",
          "",
          "[Removed Lines]",
          "6905:   while( zLine[h] && nArg<ArraySize(azArg) ){",
          "",
          "[Added Lines]",
          "6906:   while( zLine[h] && nArg<ArraySize(azArg)-1 ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6923:       resolve_backslashes(azArg[nArg-1]);",
          "6924:     }",
          "6925:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6927:   azArg[nArg] = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "9407: #ifdef SQLITE_DEBUG",
          "9408:   if( c=='u' && strncmp(azArg[0], \"unmodule\", n)==0 ){",
          "9409:     int ii;",
          "9410:     if( nArg<2 ){",
          "9412:       rc = 1;",
          "9413:       goto meta_command_exit;",
          "9414:     }",
          "9415:     open_db(p, 0);",
          "9418:     }",
          "9419:   }else",
          "9420: #endif",
          "",
          "[Removed Lines]",
          "9411:       raw_printf(stderr, \"Usage: .unmodule NAME ...\\n\");",
          "9416:     for(ii=1; ii<nArg; ii++){",
          "9417:       sqlite3_create_module(p->db, azArg[ii], 0, 0);",
          "",
          "[Added Lines]",
          "9412:     char *zOpt;",
          "9414:       raw_printf(stderr, \"Usage: .unmodule [--allexcept] NAME ...\\n\");",
          "9419:     zOpt = azArg[1];",
          "9420:     if( zOpt[0]=='-' && zOpt[1]=='-' && zOpt[2]!=0 ) zOpt++;",
          "9421:     if( strcmp(zOpt, \"-allexcept\")==0 ){",
          "9422:       assert( azArg[nArg]==0 );",
          "9423:       sqlite3_drop_modules_except(p->db, nArg>2 ? (const char**)(azArg+2) : 0);",
          "9424:     }else{",
          "9425:       for(ii=1; ii<nArg; ii++){",
          "9426:         sqlite3_create_module(p->db, azArg[ii], 0, 0);",
          "9427:       }",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6655: );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6667: int sqlite3_drop_modules_except(",
          "6670: );",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1110:   return TCL_OK;",
          "1111: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1120: static int SQLITE_TCLAPI test_drop_except(",
          "1121:   void *NotUsed,",
          "1125: ){",
          "1126:   int rc;",
          "1127:   sqlite3 *db;",
          "1129:   if( argc!=2 ){",
          "1130:     Tcl_AppendResult(interp, \"wrong # args: should be \\\"\", argv[0],",
          "1131:        \" DB\\\"\", 0);",
          "1132:     return TCL_ERROR;",
          "1133:   }",
          "1134:   if( getDbPointer(interp, argv[1], &db) ) return TCL_ERROR;",
          "1135:   sqlite3_drop_modules_except(db, argc>2 ? (const char**)(argv+2) : 0);",
          "1136:   return TCL_OK;",
          "1137: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7860:      { \"sqlite3_close_v2\",              (Tcl_CmdProc*)sqlite_test_close_v2  },",
          "7861:      { \"sqlite3_create_function\",       (Tcl_CmdProc*)test_create_function  },",
          "7862:      { \"sqlite3_create_aggregate\",      (Tcl_CmdProc*)test_create_aggregate },",
          "7863:      { \"sqlite_register_test_function\", (Tcl_CmdProc*)test_register_func    },",
          "7864:      { \"sqlite_abort\",                  (Tcl_CmdProc*)sqlite_abort          },",
          "7865:      { \"sqlite_bind\",                   (Tcl_CmdProc*)test_bind             },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7889:      { \"sqlite3_drop_modules_except\",   (Tcl_CmdProc*)test_drop_except      },",
          "",
          "---------------"
        ],
        "src/vtab.c||src/vtab.c": [
          "File: src/vtab.c -> src/vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:   return createModule(db, zName, pModule, pAux, xDestroy);",
          "134: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140: int sqlite3_drop_modules_except(sqlite3 *db, const char** azNames){",
          "141:   HashElem *pThis, *pNext;",
          "142: #ifdef SQLITE_ENABLE_API_ARMOR",
          "143:   if( !sqlite3SafetyCheckOk(db) || zName==0 ) return SQLITE_MISUSE_BKPT;",
          "144: #endif",
          "145:   for(pThis=sqliteHashFirst(&db->aModule); pThis; pThis=pNext){",
          "146:     Module *pMod = (Module*)sqliteHashData(pThis);",
          "147:     pNext = sqliteHashNext(pThis);",
          "148:     if( azNames ){",
          "149:       int ii;",
          "150:       for(ii=0; azNames[ii]!=0 && strcmp(azNames[ii],pMod->zName)!=0; ii++){}",
          "151:       if( azNames[ii]!=0 ) continue;",
          "152:     }",
          "153:     createModule(db, pMod->zName, 0, 0, 0);",
          "154:   }",
          "155:   return SQLITE_OK;",
          "156: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "db36e255d5f7162f6abcdfcafeca4f22668e139c",
      "candidate_info": {
        "commit_hash": "db36e255d5f7162f6abcdfcafeca4f22668e139c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/db36e255d5f7162f6abcdfcafeca4f22668e139c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/rowvalue.test"
        ],
        "message": "Disqualify row-value comparisons for use by an index if the right-hand side has an affinity that does not match the index. Fix for ticket [6ef984af8972c2eb]\n\nFossilOrigin-Name: 5c118617cf08e17a6edfdfba86e3fc49132a780990b68b52724c2aaeac85f506",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/rowvalue.test||test/rowvalue.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c7da1c01f1f239e68c2173ac5748b8c5798271e43bdcee68f51f97cd0ca92bd5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:         pExpr->pLeft->x.pSelect->pEList->a[pExpr->iColumn].pExpr",
          "71:     );",
          "72:   }",
          "73:   return pExpr->affExpr;",
          "74: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:   if( op==TK_VECTOR ){",
          "74:     return sqlite3ExprAffinity(pExpr->x.pList->a[0].pExpr);",
          "75:   }",
          "",
          "---------------"
        ],
        "test/rowvalue.test||test/rowvalue.test": [
          "File: test/rowvalue.test -> test/rowvalue.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "586:   SELECT 3 FROM t0 WHERE (aa,1) <= (SELECT +bb,1);",
          "587: } {0 1 3}",
          "589: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "589: # 2019-10-22 Ticket 6ef984af8972c2eb",
          "590: do_execsql_test 24.100 {",
          "591:   DROP TABLE t0;",
          "592:   CREATE TABLE t0(c0 TEXT PRIMARY KEY);",
          "593:   INSERT INTO t0(c0) VALUES ('');",
          "594:   SELECT (t0.c0, TRUE) > (CAST(0 AS REAL), FALSE) FROM t0;",
          "595:   SELECT 2 FROM t0 WHERE (t0.c0, TRUE) > (CAST('' AS REAL), FALSE);",
          "596: } {1 2}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dbdd93b7e1b6f4e129df36309868a4c1fb002207",
      "candidate_info": {
        "commit_hash": "dbdd93b7e1b6f4e129df36309868a4c1fb002207",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dbdd93b7e1b6f4e129df36309868a4c1fb002207",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "New test cases in test/fuzzdata8.db.\n\nFossilOrigin-Name: 7be6222c9ec44596e4eddd906c831eb1272b90fbdf68641d791f216264feb7cf",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e1724f1d618cfbcfd1e495d8965a395656cfc1114e1bffd4bc3be0bd5cdb6550",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "db5ba5c385496191770a418e27607522474e611c",
      "candidate_info": {
        "commit_hash": "db5ba5c385496191770a418e27607522474e611c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/db5ba5c385496191770a418e27607522474e611c",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/like3.test"
        ],
        "message": "Omit tests of the LIKE optimization in like3.test when SQLITE_ENABLE_ICU is defined.\n\nFossilOrigin-Name: af53c41a127c314c0608f3fd016d3a26896783745e46cd180976a188400cdb75",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/like3.test||test/like3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7be6222c9ec44596e4eddd906c831eb1272b90fbdf68641d791f216264feb7cf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/like3.test||test/like3.test": [
          "File: test/like3.test -> test/like3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "182: # Verify that the LIKE optimization works with an ESCAPE clause when",
          "183: # using PRAGMA case_sensitive_like=ON.",
          "184: #",
          "185: do_execsql_test like3-6.100 {",
          "186:   DROP TABLE IF EXISTS t1;",
          "187:   CREATE TABLE t1(path TEXT COLLATE nocase PRIMARY KEY,a,b,c) WITHOUT ROWID;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185: ifcapable !icu {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "229:   QUERY PLAN",
          "230:   `--SEARCH TABLE t2 USING INDEX t2path2 (path>? AND path<?)",
          "231: }",
          "233: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "233: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}