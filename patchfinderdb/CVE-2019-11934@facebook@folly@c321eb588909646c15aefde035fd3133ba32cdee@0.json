{
  "cve_id": "CVE-2019-11934",
  "cve_desc": "Improper handling of close_notify alerts can result in an out-of-bounds read in AsyncSSLSocket. This issue affects folly prior to v2019.11.04.00.",
  "repo": "facebook/folly",
  "patch_hash": "c321eb588909646c15aefde035fd3133ba32cdee",
  "patch_info": {
    "commit_hash": "c321eb588909646c15aefde035fd3133ba32cdee",
    "repo": "facebook/folly",
    "commit_url": "https://github.com/facebook/folly/commit/c321eb588909646c15aefde035fd3133ba32cdee",
    "files": [
      "folly/io/async/AsyncSSLSocket.cpp",
      "folly/io/async/test/AsyncSSLSocketTest.cpp",
      "folly/io/async/test/AsyncSSLSocketTest.h"
    ],
    "message": "Handle close_notify as standard writeErr in AsyncSSLSocket.\n\nSummary: Fixes CVE-2019-11934\n\nReviewed By: mingtaoy\n\nDifferential Revision: D18020613\n\nfbshipit-source-id: db82bb250e53f0d225f1280bd67bc74abd417836",
    "before_after_code_files": [
      "folly/io/async/AsyncSSLSocket.cpp||folly/io/async/AsyncSSLSocket.cpp",
      "folly/io/async/test/AsyncSSLSocketTest.cpp||folly/io/async/test/AsyncSSLSocketTest.cpp",
      "folly/io/async/test/AsyncSSLSocketTest.h||folly/io/async/test/AsyncSSLSocketTest.h"
    ]
  },
  "patch_diff": {
    "folly/io/async/AsyncSSLSocket.cpp||folly/io/async/AsyncSSLSocket.cpp": [
      "File: folly/io/async/AsyncSSLSocket.cpp -> folly/io/async/AsyncSSLSocket.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "1450:         WRITE_ERROR,",
      "1451:         std::make_unique<SSLException>(SSLError::INVALID_RENEGOTIATION));",
      "1452:   } else {",
      "1456:     auto errError = ERR_get_error();",
      "1457:     VLOG(3) << \"ERROR: AsyncSSLSocket(fd=\" << fd_ << \", state=\" << int(state_)",
      "1458:             << \", sslState=\" << sslState_ << \", events=\" << eventFlags_ << \"): \"",
      "",
      "[Removed Lines]",
      "1453:     if (zero_return(error, rc, errno)) {",
      "1454:       return WriteResult(0);",
      "1455:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1590:         return WriteResult(totalWritten);",
      "1591:       }",
      "1596:     }",
      "1598:     totalWritten += bytes;",
      "",
      "[Removed Lines]",
      "1592:       auto writeResult = interpretSSLError(int(bytes), error);",
      "1593:       if (writeResult.writeReturn < 0) {",
      "1594:         return writeResult;",
      "1595:       } // else fall through to below to correctly record totalWritten",
      "",
      "[Added Lines]",
      "1589:       return interpretSSLError(int(bytes), error);",
      "",
      "---------------"
    ],
    "folly/io/async/test/AsyncSSLSocketTest.cpp||folly/io/async/test/AsyncSSLSocketTest.cpp": [
      "File: folly/io/async/test/AsyncSSLSocketTest.cpp -> folly/io/async/test/AsyncSSLSocketTest.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "808:   cerr << \"SSLClientTimeoutTest test completed\" << endl;",
      "809: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "811: class PerLoopReadCallback : public AsyncTransportWrapper::ReadCallback {",
      "812:  public:",
      "813:   void getReadBuffer(void** bufReturn, size_t* lenReturn) override {",
      "816:   }",
      "818:   void readDataAvailable(size_t len) noexcept override {",
      "819:     VLOG(3) << \"Read of size: \" << len;",
      "820:     s_->setReadCB(nullptr);",
      "821:     s_->getEventBase()->runInLoop([this]() { s_->setReadCB(this); });",
      "822:   }",
      "824:   void readErr(const AsyncSocketException&) noexcept override {}",
      "826:   void readEOF() noexcept override {}",
      "828:   void setSocket(AsyncSocket* s) {",
      "829:     s_ = s;",
      "830:   }",
      "832:  private:",
      "833:   AsyncSocket* s_;",
      "834:   std::array<uint8_t, 1000> buf_;",
      "835: };",
      "837: class CloseNotifyConnector : public AsyncSocket::ConnectCallback {",
      "838:  public:",
      "839:   CloseNotifyConnector(EventBase* evb, const SocketAddress& addr) {",
      "840:     evb_ = evb;",
      "841:     ssl_ = AsyncSSLSocket::newSocket(std::make_shared<SSLContext>(), evb_);",
      "842:     ssl_->connect(this, addr);",
      "843:   }",
      "845:   void connectSuccess() noexcept override {",
      "846:     ssl_->writeChain(nullptr, IOBuf::copyBuffer(\"hi\"));",
      "847:     auto ssl = const_cast<SSL*>(ssl_->getSSL());",
      "848:     SSL_shutdown(ssl);",
      "849:     auto fd = ssl_->detachNetworkSocket();",
      "850:     tcp_.reset(new AsyncSocket(evb_, fd), AsyncSocket::Destructor());",
      "851:     evb_->runAfterDelay(",
      "852:         [this]() {",
      "853:           perLoopReads_.setSocket(tcp_.get());",
      "854:           tcp_->setReadCB(&perLoopReads_);",
      "855:           evb_->runAfterDelay([this]() { tcp_->closeNow(); }, 10);",
      "856:         },",
      "857:         100);",
      "858:   }",
      "860:   void connectErr(const AsyncSocketException& ex) noexcept override {",
      "861:     FAIL() << ex.what();",
      "862:   }",
      "864:  private:",
      "865:   EventBase* evb_;",
      "866:   std::shared_ptr<AsyncSSLSocket> ssl_;",
      "867:   std::shared_ptr<AsyncSocket> tcp_;",
      "868:   PerLoopReadCallback perLoopReads_;",
      "869: };",
      "871: class ErrorCheckingWriteCallback : public AsyncSocket::WriteCallback {",
      "872:  public:",
      "873:   void writeSuccess() noexcept override {}",
      "875:   void writeErr(size_t, const AsyncSocketException& ex) noexcept override {",
      "876:     LOG(ERROR) << \"write error: \" << ex.what();",
      "877:     EXPECT_NE(",
      "878:         ex.getType(),",
      "879:         AsyncSocketException::AsyncSocketExceptionType::SSL_ERROR);",
      "880:   }",
      "881: };",
      "883: class WriteOnEofReadCallback : public ReadCallback {",
      "884:  public:",
      "885:   using ReadCallback::ReadCallback;",
      "887:   void readEOF() noexcept override {",
      "888:     LOG(INFO) << \"Got EOF\";",
      "889:     auto chain = IOBuf::create(0);",
      "890:     for (size_t i = 0; i < 1000 * 1000; i++) {",
      "891:       auto buf = IOBuf::create(10);",
      "892:       buf->append(10);",
      "893:       memset(buf->writableData(), 'x', 10);",
      "894:       chain->prependChain(std::move(buf));",
      "895:     }",
      "896:     socket_->writeChain(&writeCallback_, std::move(chain));",
      "897:   }",
      "899:   void readErr(const AsyncSocketException& ex) noexcept override {",
      "900:     LOG(ERROR) << ex.what();",
      "901:   }",
      "903:  private:",
      "904:   ErrorCheckingWriteCallback writeCallback_;",
      "905: };",
      "907: TEST(AsyncSSLSocketTest, EarlyCloseNotify) {",
      "908:   WriteOnEofReadCallback readCallback(nullptr);",
      "909:   HandshakeCallback handshakeCallback(&readCallback);",
      "910:   SSLServerAcceptCallback acceptCallback(&handshakeCallback);",
      "911:   TestSSLServer server(&acceptCallback);",
      "913:   EventBase eventBase;",
      "914:   CloseNotifyConnector cnc(&eventBase, server.getAddress());",
      "916:   eventBase.loop();",
      "917: }",
      "",
      "---------------"
    ],
    "folly/io/async/test/AsyncSSLSocketTest.h||folly/io/async/test/AsyncSSLSocketTest.h": [
      "File: folly/io/async/test/AsyncSSLSocketTest.h -> folly/io/async/test/AsyncSSLSocketTest.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "390:     currentBuffer.length = len;",
      "395:     socket_->write(wcb_, currentBuffer.buffer, len, writeFlags);",
      "",
      "[Removed Lines]",
      "392:     wcb_->setSocket(socket_);",
      "",
      "[Added Lines]",
      "392:     if (wcb_) {",
      "393:       wcb_->setSocket(socket_);",
      "394:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2586be5b22c43e5813ccdb9b7509d9908add41a0",
      "candidate_info": {
        "commit_hash": "2586be5b22c43e5813ccdb9b7509d9908add41a0",
        "repo": "facebook/folly",
        "commit_url": "https://github.com/facebook/folly/commit/2586be5b22c43e5813ccdb9b7509d9908add41a0",
        "files": [
          "folly/io/async/AsyncSSLSocket.cpp",
          "folly/io/async/AsyncSSLSocket.h",
          "folly/io/async/AsyncSocket.h",
          "folly/io/async/AsyncTransport.h",
          "folly/io/async/DecoratedAsyncTransportWrapper.h",
          "folly/io/async/WriteChainAsyncTransportWrapper.h",
          "folly/io/async/test/AsyncSSLSocketTest.cpp",
          "folly/io/async/test/AsyncSSLSocketTest.h",
          "folly/io/async/test/AsyncSSLSocketTest2.cpp",
          "folly/io/async/test/AsyncSocketTest.h",
          "folly/io/async/test/BlockingSocket.h",
          "folly/io/async/test/MockAsyncTransport.h",
          "folly/io/async/test/WriteChainAsyncTransportWrapperTest.cpp"
        ],
        "message": "Deprecate AsyncTransportWrapper\n\nSummary:\nAll implementations of transports in practice were all AsyncTransportWrappers\n(AsyncSocket, AsyncSSLSocket, AsyncFizzBase, etc.).\n\nAsyncTransportWrapper was confusing. The only additional functionality that\nit provided was the ability to query underlying transports, a piece of\nfunctionality which makes just as much sense on AsyncTransport.\n\nThe simplified model:\n\n\"AsyncTransport deals with bidirectional I/O. It is both an AsyncReader, and\nan AsyncWriter. It may be nested.\"\n\nThis diff changes AsyncTransportWrapper usages in folly to refer to\nAsyncTransport, and aliases AsyncTransportWrapper for compatibility.\n\nReviewed By: yfeldblum\n\nDifferential Revision: D21915048\n\nfbshipit-source-id: 741fad91b8f7c8080f942168f5513b12602cfe9a",
        "before_after_code_files": [
          "folly/io/async/AsyncSSLSocket.cpp||folly/io/async/AsyncSSLSocket.cpp",
          "folly/io/async/AsyncSSLSocket.h||folly/io/async/AsyncSSLSocket.h",
          "folly/io/async/AsyncSocket.h||folly/io/async/AsyncSocket.h",
          "folly/io/async/AsyncTransport.h||folly/io/async/AsyncTransport.h",
          "folly/io/async/DecoratedAsyncTransportWrapper.h||folly/io/async/DecoratedAsyncTransportWrapper.h",
          "folly/io/async/WriteChainAsyncTransportWrapper.h||folly/io/async/WriteChainAsyncTransportWrapper.h",
          "folly/io/async/test/AsyncSSLSocketTest.cpp||folly/io/async/test/AsyncSSLSocketTest.cpp",
          "folly/io/async/test/AsyncSSLSocketTest.h||folly/io/async/test/AsyncSSLSocketTest.h",
          "folly/io/async/test/AsyncSSLSocketTest2.cpp||folly/io/async/test/AsyncSSLSocketTest2.cpp",
          "folly/io/async/test/AsyncSocketTest.h||folly/io/async/test/AsyncSocketTest.h",
          "folly/io/async/test/BlockingSocket.h||folly/io/async/test/BlockingSocket.h",
          "folly/io/async/test/MockAsyncTransport.h||folly/io/async/test/MockAsyncTransport.h",
          "folly/io/async/test/WriteChainAsyncTransportWrapperTest.cpp||folly/io/async/test/WriteChainAsyncTransportWrapperTest.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "folly/io/async/AsyncSSLSocket.cpp||folly/io/async/AsyncSSLSocket.cpp",
            "folly/io/async/test/AsyncSSLSocketTest.cpp||folly/io/async/test/AsyncSSLSocketTest.cpp",
            "folly/io/async/test/AsyncSSLSocketTest.h||folly/io/async/test/AsyncSSLSocketTest.h"
          ],
          "candidate": [
            "folly/io/async/AsyncSSLSocket.cpp||folly/io/async/AsyncSSLSocket.cpp",
            "folly/io/async/test/AsyncSSLSocketTest.cpp||folly/io/async/test/AsyncSSLSocketTest.cpp",
            "folly/io/async/test/AsyncSSLSocketTest.h||folly/io/async/test/AsyncSSLSocketTest.h"
          ]
        }
      },
      "candidate_diff": {
        "folly/io/async/AsyncSSLSocket.cpp||folly/io/async/AsyncSSLSocket.cpp": [
          "File: folly/io/async/AsyncSSLSocket.cpp -> folly/io/async/AsyncSSLSocket.cpp"
        ],
        "folly/io/async/AsyncSSLSocket.h||folly/io/async/AsyncSSLSocket.h": [
          "File: folly/io/async/AsyncSSLSocket.h -> folly/io/async/AsyncSSLSocket.h"
        ],
        "folly/io/async/AsyncSocket.h||folly/io/async/AsyncSocket.h": [
          "File: folly/io/async/AsyncSocket.h -> folly/io/async/AsyncSocket.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: #define SO_NO_TSOCKS 201",
          "74: #endif",
          "77:  public:",
          "78:   using UniquePtr = std::unique_ptr<AsyncSocket, Destructor>;",
          "",
          "[Removed Lines]",
          "76: class AsyncSocket : public AsyncTransportWrapper {",
          "",
          "[Added Lines]",
          "76: class AsyncSocket : public AsyncTransport {",
          "",
          "---------------"
        ],
        "folly/io/async/AsyncTransport.h||folly/io/async/AsyncTransport.h": [
          "File: folly/io/async/AsyncTransport.h -> folly/io/async/AsyncTransport.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "133: constexpr WriteFlags kEorRelevantWriteFlags =",
          "134:     WriteFlags::EOR | WriteFlags::TIMESTAMP_TX;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136: class AsyncReader {",
          "137:  public:",
          "138:   class ReadCallback {",
          "139:    public:",
          "140:     virtual ~ReadCallback() = default;",
          "173:     virtual void getReadBuffer(void** bufReturn, size_t* lenReturn) = 0;",
          "188:     virtual void readDataAvailable(size_t len) noexcept = 0;",
          "215:     virtual bool isBufferMovable() noexcept {",
          "216:       return false;",
          "217:     }",
          "224:     virtual size_t maxBufferSize() const {",
          "225:       return 64 * 1024; // 64K",
          "226:     }",
          "240:     virtual void readBufferAvailable(",
          "241:         std::unique_ptr<IOBuf> /*readBuf*/) noexcept {}",
          "249:     virtual void readEOF() noexcept = 0;",
          "260:     virtual void readErr(const AsyncSocketException& ex) noexcept = 0;",
          "261:   };",
          "264:   virtual void setReadCB(ReadCallback* callback) = 0;",
          "265:   virtual ReadCallback* getReadCallback() const = 0;",
          "267:  protected:",
          "268:   virtual ~AsyncReader() = default;",
          "269: };",
          "271: class AsyncWriter {",
          "272:  public:",
          "273:   class WriteCallback {",
          "274:    public:",
          "275:     virtual ~WriteCallback() = default;",
          "288:     virtual void writeSuccess() noexcept = 0;",
          "296:     virtual void writeErr(",
          "297:         size_t bytesWritten,",
          "298:         const AsyncSocketException& ex) noexcept = 0;",
          "299:   };",
          "310:   virtual void write(",
          "311:       WriteCallback* callback,",
          "312:       const void* buf,",
          "313:       size_t bytes,",
          "314:       WriteFlags flags = WriteFlags::NONE) = 0;",
          "325:   virtual void writev(",
          "326:       WriteCallback* callback,",
          "327:       const iovec* vec,",
          "328:       size_t count,",
          "329:       WriteFlags flags = WriteFlags::NONE) = 0;",
          "340:   virtual void writeChain(",
          "341:       WriteCallback* callback,",
          "342:       std::unique_ptr<IOBuf>&& buf,",
          "343:       WriteFlags flags = WriteFlags::NONE) = 0;",
          "347:   virtual bool setZeroCopy(bool /*enable*/) {",
          "348:     return false;",
          "349:   }",
          "351:   virtual bool getZeroCopy() const {",
          "352:     return false;",
          "353:   }",
          "355:   using ZeroCopyEnableFunc =",
          "356:       std::function<bool(const std::unique_ptr<folly::IOBuf>& buf)>;",
          "358:   virtual void setZeroCopyEnableFunc(ZeroCopyEnableFunc /*func*/) {}",
          "360:  protected:",
          "361:   virtual ~AsyncWriter() = default;",
          "362: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "164:  public:",
          "165:   typedef std::unique_ptr<AsyncTransport, Destructor> UniquePtr;",
          "",
          "[Removed Lines]",
          "163: class AsyncTransport : public DelayedDestruction, public AsyncSocketBase {",
          "",
          "[Added Lines]",
          "391: class AsyncTransport : public DelayedDestruction,",
          "392:                        public AsyncSocketBase,",
          "393:                        public AsyncReader,",
          "394:                        public AsyncWriter {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "498:     }",
          "499:   }",
          "767:     return nullptr;",
          "768:   }",
          "",
          "[Removed Lines]",
          "501:  protected:",
          "502:   ~AsyncTransport() override = default;",
          "503: };",
          "505: class AsyncReader {",
          "506:  public:",
          "507:   class ReadCallback {",
          "508:    public:",
          "509:     virtual ~ReadCallback() = default;",
          "542:     virtual void getReadBuffer(void** bufReturn, size_t* lenReturn) = 0;",
          "557:     virtual void readDataAvailable(size_t len) noexcept = 0;",
          "584:     virtual bool isBufferMovable() noexcept {",
          "585:       return false;",
          "586:     }",
          "593:     virtual size_t maxBufferSize() const {",
          "594:       return 64 * 1024; // 64K",
          "595:     }",
          "609:     virtual void readBufferAvailable(",
          "610:         std::unique_ptr<IOBuf> /*readBuf*/) noexcept {}",
          "618:     virtual void readEOF() noexcept = 0;",
          "629:     virtual void readErr(const AsyncSocketException& ex) noexcept = 0;",
          "630:   };",
          "633:   virtual void setReadCB(ReadCallback* callback) = 0;",
          "634:   virtual ReadCallback* getReadCallback() const = 0;",
          "636:  protected:",
          "637:   virtual ~AsyncReader() = default;",
          "638: };",
          "640: class AsyncWriter {",
          "641:  public:",
          "642:   class WriteCallback {",
          "643:    public:",
          "644:     virtual ~WriteCallback() = default;",
          "657:     virtual void writeSuccess() noexcept = 0;",
          "665:     virtual void writeErr(",
          "666:         size_t bytesWritten,",
          "667:         const AsyncSocketException& ex) noexcept = 0;",
          "668:   };",
          "679:   virtual void write(",
          "680:       WriteCallback* callback,",
          "681:       const void* buf,",
          "682:       size_t bytes,",
          "683:       WriteFlags flags = WriteFlags::NONE) = 0;",
          "694:   virtual void writev(",
          "695:       WriteCallback* callback,",
          "696:       const iovec* vec,",
          "697:       size_t count,",
          "698:       WriteFlags flags = WriteFlags::NONE) = 0;",
          "709:   virtual void writeChain(",
          "710:       WriteCallback* callback,",
          "711:       std::unique_ptr<IOBuf>&& buf,",
          "712:       WriteFlags flags = WriteFlags::NONE) = 0;",
          "716:   virtual bool setZeroCopy(bool /*enable*/) {",
          "717:     return false;",
          "718:   }",
          "720:   virtual bool getZeroCopy() const {",
          "721:     return false;",
          "722:   }",
          "724:   using ZeroCopyEnableFunc =",
          "725:       std::function<bool(const std::unique_ptr<folly::IOBuf>& buf)>;",
          "727:   virtual void setZeroCopyEnableFunc(ZeroCopyEnableFunc /*func*/) {}",
          "729:  protected:",
          "730:   virtual ~AsyncWriter() = default;",
          "731: };",
          "735: class AsyncTransportWrapper : public AsyncTransport,",
          "736:                               public AsyncReader,",
          "737:                               public AsyncWriter {",
          "738:  public:",
          "739:   using UniquePtr = std::unique_ptr<AsyncTransportWrapper, Destructor>;",
          "743:   using ReadCallback = AsyncReader::ReadCallback;",
          "744:   using WriteCallback = AsyncWriter::WriteCallback;",
          "745:   void setReadCB(ReadCallback* callback) override = 0;",
          "746:   ReadCallback* getReadCallback() const override = 0;",
          "747:   void write(",
          "748:       WriteCallback* callback,",
          "749:       const void* buf,",
          "750:       size_t bytes,",
          "751:       WriteFlags flags = WriteFlags::NONE) override = 0;",
          "752:   void writev(",
          "753:       WriteCallback* callback,",
          "754:       const iovec* vec,",
          "755:       size_t count,",
          "756:       WriteFlags flags = WriteFlags::NONE) override = 0;",
          "757:   void writeChain(",
          "758:       WriteCallback* callback,",
          "759:       std::unique_ptr<IOBuf>&& buf,",
          "760:       WriteFlags flags = WriteFlags::NONE) override = 0;",
          "766:   virtual const AsyncTransportWrapper* getWrappedTransport() const {",
          "",
          "[Added Lines]",
          "737:   virtual const AsyncTransport* getWrappedTransport() const {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "775:   template <class T>",
          "776:   const T* getUnderlyingTransport() const {",
          "778:     while (current) {",
          "779:       auto sock = dynamic_cast<const T*>(current);",
          "780:       if (sock) {",
          "",
          "[Removed Lines]",
          "777:     const AsyncTransportWrapper* current = this;",
          "",
          "[Added Lines]",
          "748:     const AsyncTransport* current = this;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "788:   template <class T>",
          "789:   T* getUnderlyingTransport() {",
          "792:   }",
          "793: };",
          "795: } // namespace folly",
          "",
          "[Removed Lines]",
          "790:     return const_cast<T*>(static_cast<const AsyncTransportWrapper*>(this)",
          "791:                               ->getUnderlyingTransport<T>());",
          "",
          "[Added Lines]",
          "761:     return const_cast<T*>(",
          "762:         static_cast<const AsyncTransport*>(this)->getUnderlyingTransport<T>());",
          "765:  protected:",
          "766:   ~AsyncTransport() override = default;",
          "769: using AsyncTransportWrapper = AsyncTransport;",
          "",
          "---------------"
        ],
        "folly/io/async/DecoratedAsyncTransportWrapper.h||folly/io/async/DecoratedAsyncTransportWrapper.h": [
          "File: folly/io/async/DecoratedAsyncTransportWrapper.h -> folly/io/async/DecoratedAsyncTransportWrapper.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: namespace folly {",
          "27: template <class T>",
          "29:  public:",
          "30:   explicit DecoratedAsyncTransportWrapper(typename T::UniquePtr transport)",
          "31:       : transport_(std::move(transport)) {}",
          "34:     return transport_.get();",
          "35:   }",
          "38:   ReadCallback* getReadCallback() const override {",
          "39:     return transport_->getReadCallback();",
          "40:   }",
          "44:     transport_->setReadCB(callback);",
          "45:   }",
          "47:   void write(",
          "49:       const void* buf,",
          "50:       size_t bytes,",
          "51:       folly::WriteFlags flags = folly::WriteFlags::NONE) override {",
          "",
          "[Removed Lines]",
          "28: class DecoratedAsyncTransportWrapper : public folly::AsyncTransportWrapper {",
          "33:   const AsyncTransportWrapper* getWrappedTransport() const override {",
          "42:   void setReadCB(",
          "43:       folly::AsyncTransportWrapper::ReadCallback* callback) override {",
          "48:       folly::AsyncTransportWrapper::WriteCallback* callback,",
          "",
          "[Added Lines]",
          "28: class DecoratedAsyncTransportWrapper : public folly::AsyncTransport {",
          "33:   const AsyncTransport* getWrappedTransport() const override {",
          "42:   void setReadCB(folly::AsyncTransport::ReadCallback* callback) override {",
          "47:       folly::AsyncTransport::WriteCallback* callback,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:   }",
          "55:   void writeChain(",
          "57:       std::unique_ptr<folly::IOBuf>&& buf,",
          "58:       folly::WriteFlags flags = folly::WriteFlags::NONE) override {",
          "59:     transport_->writeChain(callback, std::move(buf), flags);",
          "60:   }",
          "62:   void writev(",
          "64:       const iovec* vec,",
          "65:       size_t bytes,",
          "66:       folly::WriteFlags flags = folly::WriteFlags::NONE) override {",
          "",
          "[Removed Lines]",
          "56:       folly::AsyncTransportWrapper::WriteCallback* callback,",
          "63:       folly::AsyncTransportWrapper::WriteCallback* callback,",
          "",
          "[Added Lines]",
          "55:       folly::AsyncTransport::WriteCallback* callback,",
          "62:       folly::AsyncTransport::WriteCallback* callback,",
          "",
          "---------------"
        ],
        "folly/io/async/WriteChainAsyncTransportWrapper.h||folly/io/async/WriteChainAsyncTransportWrapper.h": [
          "File: folly/io/async/WriteChainAsyncTransportWrapper.h -> folly/io/async/WriteChainAsyncTransportWrapper.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:   using DecoratedAsyncTransportWrapper<T>::DecoratedAsyncTransportWrapper;",
          "34:   void write(",
          "36:       const void* buf,",
          "37:       size_t bytes,",
          "38:       folly::WriteFlags flags = folly::WriteFlags::NONE) override {",
          "",
          "[Removed Lines]",
          "35:       folly::AsyncTransportWrapper::WriteCallback* callback,",
          "",
          "[Added Lines]",
          "35:       AsyncTransport::WriteCallback* callback,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:   }",
          "43:   void writev(",
          "45:       const iovec* vec,",
          "46:       size_t count,",
          "47:       folly::WriteFlags flags = folly::WriteFlags::NONE) override {",
          "",
          "[Removed Lines]",
          "44:       folly::AsyncTransportWrapper::WriteCallback* callback,",
          "",
          "[Added Lines]",
          "44:       AsyncTransport::WriteCallback* callback,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56:   void writeChain(",
          "58:       std::unique_ptr<folly::IOBuf>&& buf,",
          "59:       folly::WriteFlags flags = folly::WriteFlags::NONE) override = 0;",
          "60: };",
          "",
          "[Removed Lines]",
          "57:       folly::AsyncTransportWrapper::WriteCallback* callback,",
          "",
          "[Added Lines]",
          "57:       AsyncTransport::WriteCallback* callback,",
          "",
          "---------------"
        ],
        "folly/io/async/test/AsyncSSLSocketTest.cpp||folly/io/async/test/AsyncSSLSocketTest.cpp": [
          "File: folly/io/async/test/AsyncSSLSocketTest.cpp -> folly/io/async/test/AsyncSSLSocketTest.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "805:   cerr << \"SSLClientTimeoutTest test completed\" << endl;",
          "806: }",
          "809:  public:",
          "810:   void getReadBuffer(void** bufReturn, size_t* lenReturn) override {",
          "",
          "[Removed Lines]",
          "808: class PerLoopReadCallback : public AsyncTransportWrapper::ReadCallback {",
          "",
          "[Added Lines]",
          "808: class PerLoopReadCallback : public AsyncTransport::ReadCallback {",
          "",
          "---------------"
        ],
        "folly/io/async/test/AsyncSSLSocketTest.h||folly/io/async/test/AsyncSSLSocketTest.h": [
          "File: folly/io/async/test/AsyncSSLSocketTest.h -> folly/io/async/test/AsyncSSLSocketTest.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "151:   std::vector<char> ancillaryData_;",
          "152: };",
          "155:  public:",
          "156:   explicit WriteCallbackBase(SendMsgParamsCallbackBase* mcb = nullptr)",
          "157:       : state(STATE_WAITING),",
          "",
          "[Removed Lines]",
          "154: class WriteCallbackBase : public AsyncTransportWrapper::WriteCallback {",
          "",
          "[Added Lines]",
          "154: class WriteCallbackBase : public AsyncTransport::WriteCallback {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "320: };",
          "321: #endif // FOLLY_HAVE_MSG_ERRQUEUE",
          "324:  public:",
          "325:   explicit ReadCallbackBase(WriteCallbackBase* wcb)",
          "326:       : wcb_(wcb), state(STATE_WAITING) {}",
          "",
          "[Removed Lines]",
          "323: class ReadCallbackBase : public AsyncTransportWrapper::ReadCallback {",
          "",
          "[Added Lines]",
          "323: class ReadCallbackBase : public AsyncTransport::ReadCallback {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "771:     AsyncSSLSocket::UniquePtr* serverSock);",
          "773: class BlockingWriteClient : private AsyncSSLSocket::HandshakeCB,",
          "775:  public:",
          "776:   explicit BlockingWriteClient(AsyncSSLSocket::UniquePtr socket)",
          "777:       : socket_(std::move(socket)), bufLen_(2500), iovCount_(2000) {",
          "",
          "[Removed Lines]",
          "774:                             private AsyncTransportWrapper::WriteCallback {",
          "",
          "[Added Lines]",
          "774:                             private AsyncTransport::WriteCallback {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "829: };",
          "831: class BlockingWriteServer : private AsyncSSLSocket::HandshakeCB,",
          "833:  public:",
          "834:   explicit BlockingWriteServer(AsyncSSLSocket::UniquePtr socket)",
          "835:       : socket_(std::move(socket)), bufSize_(2500 * 2000), bytesRead_(0) {",
          "",
          "[Removed Lines]",
          "832:                             private AsyncTransportWrapper::ReadCallback {",
          "",
          "[Added Lines]",
          "832:                             private AsyncTransport::ReadCallback {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "898: };",
          "900: class AlpnClient : private AsyncSSLSocket::HandshakeCB,",
          "902:  public:",
          "903:   explicit AlpnClient(AsyncSSLSocket::UniquePtr socket)",
          "904:       : nextProto(nullptr), nextProtoLength(0), socket_(std::move(socket)) {",
          "",
          "[Removed Lines]",
          "901:                    private AsyncTransportWrapper::WriteCallback {",
          "",
          "[Added Lines]",
          "901:                    private AsyncTransport::WriteCallback {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "932: };",
          "934: class AlpnServer : private AsyncSSLSocket::HandshakeCB,",
          "936:  public:",
          "937:   explicit AlpnServer(AsyncSSLSocket::UniquePtr socket)",
          "938:       : nextProto(nullptr), nextProtoLength(0), socket_(std::move(socket)) {",
          "",
          "[Removed Lines]",
          "935:                    private AsyncTransportWrapper::ReadCallback {",
          "",
          "[Added Lines]",
          "935:                    private AsyncTransport::ReadCallback {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "967: };",
          "969: class RenegotiatingServer : public AsyncSSLSocket::HandshakeCB,",
          "971:  public:",
          "972:   explicit RenegotiatingServer(AsyncSSLSocket::UniquePtr socket)",
          "973:       : socket_(std::move(socket)) {",
          "",
          "[Removed Lines]",
          "970:                             public AsyncTransportWrapper::ReadCallback {",
          "",
          "[Added Lines]",
          "970:                             public AsyncTransport::ReadCallback {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1011: #ifndef OPENSSL_NO_TLSEXT",
          "1012: class SNIClient : private AsyncSSLSocket::HandshakeCB,",
          "1014:  public:",
          "1015:   explicit SNIClient(AsyncSSLSocket::UniquePtr socket)",
          "1016:       : serverNameMatch(false), socket_(std::move(socket)) {",
          "",
          "[Removed Lines]",
          "1013:                   private AsyncTransportWrapper::WriteCallback {",
          "",
          "[Added Lines]",
          "1013:                   private AsyncTransport::WriteCallback {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1042: };",
          "1044: class SNIServer : private AsyncSSLSocket::HandshakeCB,",
          "1046:  public:",
          "1047:   explicit SNIServer(",
          "1048:       AsyncSSLSocket::UniquePtr socket,",
          "",
          "[Removed Lines]",
          "1045:                   private AsyncTransportWrapper::ReadCallback {",
          "",
          "[Added Lines]",
          "1045:                   private AsyncTransport::ReadCallback {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1098: #endif",
          "1100: class SSLClient : public AsyncSocket::ConnectCallback,",
          "1103:  private:",
          "1104:   EventBase* eventBase_;",
          "1105:   std::shared_ptr<AsyncSSLSocket> sslSocket_;",
          "",
          "[Removed Lines]",
          "1101:                   public AsyncTransportWrapper::WriteCallback,",
          "1102:                   public AsyncTransportWrapper::ReadCallback {",
          "",
          "[Added Lines]",
          "1101:                   public AsyncTransport::WriteCallback,",
          "1102:                   public AsyncTransport::ReadCallback {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1251: };",
          "1253: class SSLHandshakeBase : public AsyncSSLSocket::HandshakeCB,",
          "1255:  public:",
          "1256:   explicit SSLHandshakeBase(",
          "1257:       AsyncSSLSocket::UniquePtr socket,",
          "",
          "[Removed Lines]",
          "1254:                          private AsyncTransportWrapper::WriteCallback {",
          "",
          "[Added Lines]",
          "1254:                          private AsyncTransport::WriteCallback {",
          "",
          "---------------"
        ],
        "folly/io/async/test/AsyncSSLSocketTest2.cpp||folly/io/async/test/AsyncSSLSocketTest2.cpp": [
          "File: folly/io/async/test/AsyncSSLSocketTest2.cpp -> folly/io/async/test/AsyncSSLSocketTest2.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: };",
          "58: class AttachDetachClient : public AsyncSocket::ConnectCallback,",
          "61:  private:",
          "",
          "[Removed Lines]",
          "59:                            public AsyncTransportWrapper::WriteCallback,",
          "60:                            public AsyncTransportWrapper::ReadCallback {",
          "",
          "[Added Lines]",
          "59:                            public AsyncTransport::WriteCallback,",
          "60:                            public AsyncTransport::ReadCallback {",
          "",
          "---------------"
        ],
        "folly/io/async/test/AsyncSocketTest.h||folly/io/async/test/AsyncSocketTest.h": [
          "File: folly/io/async/test/AsyncSocketTest.h -> folly/io/async/test/AsyncSocketTest.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:   VoidCallback errorCallback;",
          "56: };",
          "59:  public:",
          "60:   WriteCallback()",
          "61:       : state(STATE_WAITING),",
          "",
          "[Removed Lines]",
          "58: class WriteCallback : public folly::AsyncTransportWrapper::WriteCallback {",
          "",
          "[Added Lines]",
          "58: class WriteCallback : public folly::AsyncTransport::WriteCallback {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:   VoidCallback errorCallback;",
          "89: };",
          "92:  public:",
          "93:   explicit ReadCallback(size_t _maxBufferSz = 4096)",
          "94:       : state(STATE_WAITING),",
          "",
          "[Removed Lines]",
          "91: class ReadCallback : public folly::AsyncTransportWrapper::ReadCallback {",
          "",
          "[Added Lines]",
          "91: class ReadCallback : public folly::AsyncTransport::ReadCallback {",
          "",
          "---------------"
        ],
        "folly/io/async/test/BlockingSocket.h||folly/io/async/test/BlockingSocket.h": [
          "File: folly/io/async/test/BlockingSocket.h -> folly/io/async/test/BlockingSocket.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #include <folly/net/NetworkSocket.h>",
          "25: class BlockingSocket : public folly::AsyncSocket::ConnectCallback,",
          "28:  public:",
          "29:   explicit BlockingSocket(folly::NetworkSocket fd)",
          "30:       : sock_(new folly::AsyncSocket(&eventBase_, fd)) {}",
          "",
          "[Removed Lines]",
          "26:                        public folly::AsyncTransportWrapper::ReadCallback,",
          "27:                        public folly::AsyncTransportWrapper::WriteCallback {",
          "",
          "[Added Lines]",
          "26:                        public folly::AsyncTransport::ReadCallback,",
          "27:                        public folly::AsyncTransport::WriteCallback {",
          "",
          "---------------"
        ],
        "folly/io/async/test/MockAsyncTransport.h||folly/io/async/test/MockAsyncTransport.h": [
          "File: folly/io/async/test/MockAsyncTransport.h -> folly/io/async/test/MockAsyncTransport.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: namespace folly {",
          "24: namespace test {",
          "27:  public:",
          "28:   MOCK_METHOD1(setReadCB, void(ReadCallback*));",
          "29:   MOCK_CONST_METHOD0(getReadCallback, ReadCallback*());",
          "",
          "[Removed Lines]",
          "26: class MockAsyncTransport : public AsyncTransportWrapper {",
          "",
          "[Added Lines]",
          "26: class MockAsyncTransport : public AsyncTransport {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:   MOCK_CONST_METHOD0(getRawBytesReceived, size_t());",
          "65:   MOCK_CONST_METHOD0(isEorTrackingEnabled, bool());",
          "66:   MOCK_METHOD1(setEorTracking, void(bool));",
          "68:   MOCK_CONST_METHOD0(isReplaySafe, bool());",
          "69:   MOCK_METHOD1(",
          "70:       setReplaySafetyCallback,",
          "",
          "[Removed Lines]",
          "67:   MOCK_CONST_METHOD0(getWrappedTransport, AsyncTransportWrapper*());",
          "",
          "[Added Lines]",
          "67:   MOCK_CONST_METHOD0(getWrappedTransport, AsyncTransport*());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "80:   }",
          "81: };",
          "84:  public:",
          "85:   MOCK_METHOD2(getReadBuffer, void(void**, size_t*));",
          "",
          "[Removed Lines]",
          "83: class MockReadCallback : public AsyncTransportWrapper::ReadCallback {",
          "",
          "[Added Lines]",
          "83: class MockReadCallback : public AsyncTransport::ReadCallback {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "111:   }",
          "112: };",
          "115:  public:",
          "116:   MOCK_METHOD0(writeSuccess_, void());",
          "117:   void writeSuccess() noexcept override {",
          "",
          "[Removed Lines]",
          "114: class MockWriteCallback : public AsyncTransportWrapper::WriteCallback {",
          "",
          "[Added Lines]",
          "114: class MockWriteCallback : public AsyncTransport::WriteCallback {",
          "",
          "---------------"
        ],
        "folly/io/async/test/WriteChainAsyncTransportWrapperTest.cpp||folly/io/async/test/WriteChainAsyncTransportWrapperTest.cpp": [
          "File: folly/io/async/test/WriteChainAsyncTransportWrapperTest.cpp -> folly/io/async/test/WriteChainAsyncTransportWrapperTest.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: namespace test {",
          "27: class TestWriteChainAsyncTransportWrapper",
          "29:  public:",
          "30:   TestWriteChainAsyncTransportWrapper()",
          "34:   MOCK_METHOD3(",
          "35:       writeChain,",
          "36:       void(",
          "38:           std::shared_ptr<folly::IOBuf>,",
          "39:           folly::WriteFlags));",
          "",
          "[Removed Lines]",
          "28:     : public WriteChainAsyncTransportWrapper<folly::AsyncTransportWrapper> {",
          "31:       : WriteChainAsyncTransportWrapper<folly::AsyncTransportWrapper>(nullptr) {",
          "32:   }",
          "37:           folly::AsyncTransportWrapper::WriteCallback*,",
          "",
          "[Added Lines]",
          "28:     : public WriteChainAsyncTransportWrapper<folly::AsyncTransport> {",
          "31:       : WriteChainAsyncTransportWrapper<folly::AsyncTransport>(nullptr) {}",
          "36:           folly::AsyncTransport::WriteCallback*,",
          "",
          "---------------"
        ]
      }
    }
  ]
}