{
  "cve_id": "CVE-2019-10664",
  "cve_desc": "Domoticz before 4.10578 allows SQL Injection via the idx parameter in CWebServer::GetFloorplanImage in WebServer.cpp.",
  "repo": "domoticz/domoticz",
  "patch_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
  "patch_info": {
    "commit_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/ee70db46f81afa582c96b887b73bcd2a86feda00",
    "files": [
      "main/WebServer.cpp"
    ],
    "message": "Fixed possible SQL Injection Vulnerability (Thanks to Fabio Carretto!)",
    "before_after_code_files": [
      "main/WebServer.cpp||main/WebServer.cpp"
    ]
  },
  "patch_diff": {
    "main/WebServer.cpp||main/WebServer.cpp": [
      "File: main/WebServer.cpp -> main/WebServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "10772:     return;",
      "10773:    }",
      "10774:    std::vector<std::vector<std::string> > result;",
      "10776:    if (result.empty())",
      "10777:     return;",
      "10778:    reply::set_content(&rep, result[0][0].begin(), result[0][0].end());",
      "",
      "[Removed Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%s\", idx.c_str());",
      "",
      "[Added Lines]",
      "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%d\", atol(idx.c_str()));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e0a2bcf1428f8717925a4804a80456f790a587dc",
      "candidate_info": {
        "commit_hash": "e0a2bcf1428f8717925a4804a80456f790a587dc",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/e0a2bcf1428f8717925a4804a80456f790a587dc",
        "files": [
          "main/SQLHelper.cpp",
          "main/TrendCalculator.cpp",
          "main/TrendCalculator.h",
          "main/WebServer.cpp",
          "main/WindCalculation.cpp",
          "main/WindCalculation.h",
          "main/mainworker.cpp",
          "main/mainworker.h",
          "msbuild/domoticz.vcxproj",
          "msbuild/domoticz.vcxproj.filters",
          "www/app/TemperatureController.js",
          "www/app/app.js",
          "www/html5.appcache",
          "www/images/arrow_down.png",
          "www/images/arrow_stable.png",
          "www/images/arrow_unk.png",
          "www/images/arrow_up.png",
          "www/views/temperature_widget.html"
        ],
        "message": "Added trend calculator (only for temperatures at the moment)",
        "before_after_code_files": [
          "main/SQLHelper.cpp||main/SQLHelper.cpp",
          "main/TrendCalculator.cpp||main/TrendCalculator.cpp",
          "main/TrendCalculator.h||main/TrendCalculator.h",
          "main/WebServer.cpp||main/WebServer.cpp",
          "main/WindCalculation.cpp||main/WindCalculation.cpp",
          "main/WindCalculation.h||main/WindCalculation.h",
          "main/mainworker.cpp||main/mainworker.cpp",
          "main/mainworker.h||main/mainworker.h",
          "msbuild/domoticz.vcxproj||msbuild/domoticz.vcxproj",
          "msbuild/domoticz.vcxproj.filters||msbuild/domoticz.vcxproj.filters",
          "www/app/TemperatureController.js||www/app/TemperatureController.js",
          "www/app/app.js||www/app/app.js",
          "www/html5.appcache||www/html5.appcache",
          "www/views/temperature_widget.html||www/views/temperature_widget.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [
            "main/WebServer.cpp||main/WebServer.cpp"
          ],
          "candidate": [
            "main/WebServer.cpp||main/WebServer.cpp"
          ]
        }
      },
      "candidate_diff": {
        "main/SQLHelper.cpp||main/SQLHelper.cpp": [
          "File: main/SQLHelper.cpp -> main/SQLHelper.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "5235:    int speed = atoi(splitresults[2].c_str());",
          "5236:    int gust = atoi(splitresults[3].c_str());",
          "5239:    if (ittWC != m_mainworker.m_wind_calculator.end())",
          "5240:    {",
          "5241:     int speed_max, gust_max, speed_min, gust_min;",
          "",
          "[Removed Lines]",
          "5238:    std::map<unsigned short, _tWindCalculationStruct>::iterator ittWC = m_mainworker.m_wind_calculator.find(DeviceID);",
          "",
          "[Added Lines]",
          "5238:    std::map<unsigned short, _tWindCalculator>::iterator ittWC = m_mainworker.m_wind_calculator.find(DeviceID);",
          "",
          "---------------"
        ],
        "main/TrendCalculator.cpp||main/TrendCalculator.cpp": [
          "File: main/TrendCalculator.cpp -> main/TrendCalculator.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include \"stdafx.h\"",
          "2: #include \"TrendCalculator.h\"",
          "4: _tTrendCalculator::_tTrendCalculator()",
          "5: {",
          "6:  Init();",
          "7: }",
          "9: void _tTrendCalculator::Init()",
          "10: {",
          "11:  m_state = TENDENCY_UNKNOWN;",
          "12:  m_lastValue = 0;",
          "13:  m_timeLastAvarage=time(NULL);",
          "14:  m_totValues=0;",
          "15:  m_calcValue=0;",
          "16: }",
          "18: _tTrendCalculator::_eTendencyType _tTrendCalculator::AddValueAndReturnTendency(const double Value, const _eTrendAverageTimes TendType)",
          "19: {",
          "20:  m_calcValue += Value;",
          "21:  m_totValues++;",
          "22:  if (m_state == TENDENCY_UNKNOWN)",
          "23:  {",
          "24:   m_state = TENDENCY_STABLE;",
          "25:   m_timeLastAvarage = time(NULL);",
          "26:   m_lastValue = Value; //got to start somewhere",
          "27:  }",
          "28:  else",
          "29:  {",
          "30:   time_t atime = time(NULL);",
          "31:   int AvarageMinutes = (int)TendType;",
          "32:   if (atime - m_timeLastAvarage >= (AvarageMinutes * 60))",
          "33:   {",
          "35:    double curAvr = (m_totValues == 0) ? Value : (m_calcValue / m_totValues);",
          "37:    if (curAvr > m_lastValue)",
          "38:     m_state = TENDENCY_UP;",
          "39:    else if (curAvr < m_lastValue)",
          "40:     m_state = TENDENCY_DOWN;",
          "41:    else",
          "42:     m_state = TENDENCY_STABLE;",
          "44:    m_lastValue = curAvr;",
          "46:    m_calcValue = 0;",
          "47:    m_totValues = 0;",
          "48:    m_timeLastAvarage = atime;",
          "49:   }",
          "50:  }",
          "51:  return m_state;",
          "52: }",
          "",
          "---------------"
        ],
        "main/TrendCalculator.h||main/TrendCalculator.h": [
          "File: main/TrendCalculator.h -> main/TrendCalculator.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #pragma once",
          "3: #include <deque>",
          "5: struct _tTrendCalculator",
          "6: {",
          "7: public:",
          "8:  enum _eTendencyType",
          "9:  {",
          "10:   TENDENCY_UNKNOWN = 0,",
          "11:   TENDENCY_STABLE,",
          "12:   TENDENCY_UP,",
          "13:   TENDENCY_DOWN",
          "14:  };",
          "15:  enum _eTrendAverageTimes",
          "16:  {",
          "17:   TAVERAGE_TEMP = 30,",
          "18:   TAVERAGE_HUM = 30,",
          "19:   TAVERAGE_BARO = 30,",
          "20:   TAVERAGE_USAGE = 15,",
          "21:   TAVERAGE_RAIN = 10,",
          "22:  };",
          "24:  _tTrendCalculator();",
          "26:  void Init();",
          "27:  _eTendencyType AddValueAndReturnTendency(const double Value, const _eTrendAverageTimes TendType);",
          "28:  _eTendencyType m_state;",
          "29: private:",
          "30:  double m_lastValue;",
          "31:  time_t m_timeLastAvarage;",
          "32:  int m_totValues;",
          "33:  double m_calcValue;",
          "34: };",
          "",
          "---------------"
        ],
        "main/WebServer.cpp||main/WebServer.cpp": [
          "File: main/WebServer.cpp -> main/WebServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "8588:      std::string thisIdx = sd[0];",
          "8589:      if ((ii > 0) && thisIdx == root[\"result\"][ii - 1][\"idx\"].asString()) {",
          "8590:       std::string typeOfThisOne = RFX_Type_Desc(dType, 1);",
          "8591:       if (typeOfThisOne == root[\"result\"][ii - 1][\"Type\"].asString()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8590:      int devIdx = atoi(thisIdx.c_str());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9168:       sprintf(szData, \"%.1f %c\", tvalue, tempsign);",
          "9169:       root[\"result\"][ii][\"Data\"] = szData;",
          "9170:       root[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;",
          "9171:      }",
          "9172:      else if (dType == pTypeThermostat1)",
          "9173:      {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9175:       _tTrendCalculator::_eTendencyType tstate = _tTrendCalculator::_eTendencyType::TENDENCY_UNKNOWN;",
          "9176:       uint64_t tID = ((uint64_t)(hardwareID & 0x7FFFFFFF) << 32) | (devIdx & 0x7FFFFFFF);",
          "9177:       if (m_mainworker.m_trend_calculator.find(tID) != m_mainworker.m_trend_calculator.end())",
          "9178:       {",
          "9179:        tstate = m_mainworker.m_trend_calculator[tID].m_state;",
          "9180:       }",
          "9181:       root[\"result\"][ii][\"trend\"] = (int)tstate;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "9190:       root[\"result\"][ii][\"Data\"] = szData;",
          "9191:       root[\"result\"][ii][\"TypeImg\"] = \"temperature\";",
          "9192:       root[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;",
          "9193:      }",
          "9194:      else if (dType == pTypeHUM)",
          "9195:      {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9204:       _tTrendCalculator::_eTendencyType tstate = _tTrendCalculator::_eTendencyType::TENDENCY_UNKNOWN;",
          "9205:       uint64_t tID = ((uint64_t)(hardwareID & 0x7FFFFFFF) << 32) | (devIdx & 0x7FFFFFFF);",
          "9206:       if (m_mainworker.m_trend_calculator.find(tID) != m_mainworker.m_trend_calculator.end())",
          "9207:       {",
          "9208:        tstate = m_mainworker.m_trend_calculator[tID].m_state;",
          "9209:       }",
          "9210:       root[\"result\"][ii][\"trend\"] = (int)tstate;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "9221:        sprintf(szTmp, \"%.2f\", ConvertTemperature(CalculateDewPoint(tempCelcius, humidity), tempsign));",
          "9222:        root[\"result\"][ii][\"DewPoint\"] = szTmp;",
          "9223:       }",
          "9224:      }",
          "9225:      else if (dType == pTypeTEMP_HUM_BARO)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9242:        _tTrendCalculator::_eTendencyType tstate = _tTrendCalculator::_eTendencyType::TENDENCY_UNKNOWN;",
          "9243:        uint64_t tID = ((uint64_t)(hardwareID & 0x7FFFFFFF) << 32) | (devIdx & 0x7FFFFFFF);",
          "9244:        if (m_mainworker.m_trend_calculator.find(tID) != m_mainworker.m_trend_calculator.end())",
          "9245:        {",
          "9246:         tstate = m_mainworker.m_trend_calculator[tID].m_state;",
          "9247:        }",
          "9248:        root[\"result\"][ii][\"trend\"] = (int)tstate;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "9270:        }",
          "9271:        root[\"result\"][ii][\"Data\"] = szData;",
          "9272:        root[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;",
          "9273:       }",
          "9274:      }",
          "9275:      else if (dType == pTypeTEMP_BARO)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9300:        _tTrendCalculator::_eTendencyType tstate = _tTrendCalculator::_eTendencyType::TENDENCY_UNKNOWN;",
          "9301:        uint64_t tID = ((uint64_t)(hardwareID & 0x7FFFFFFF) << 32) | (devIdx & 0x7FFFFFFF);",
          "9302:        if (m_mainworker.m_trend_calculator.find(tID) != m_mainworker.m_trend_calculator.end())",
          "9303:        {",
          "9304:         tstate = m_mainworker.m_trend_calculator[tID].m_state;",
          "9305:        }",
          "9306:        root[\"result\"][ii][\"trend\"] = (int)tstate;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "9292:        );",
          "9293:        root[\"result\"][ii][\"Data\"] = szData;",
          "9294:        root[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;",
          "9295:       }",
          "9296:      }",
          "9297:      else if (dType == pTypeUV)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9330:        _tTrendCalculator::_eTendencyType tstate = _tTrendCalculator::_eTendencyType::TENDENCY_UNKNOWN;",
          "9331:        uint64_t tID = ((uint64_t)(hardwareID & 0x7FFFFFFF) << 32) | (devIdx & 0x7FFFFFFF);",
          "9332:        if (m_mainworker.m_trend_calculator.find(tID) != m_mainworker.m_trend_calculator.end())",
          "9333:        {",
          "9334:         tstate = m_mainworker.m_trend_calculator[tID].m_state;",
          "9335:        }",
          "9336:        root[\"result\"][ii][\"trend\"] = (int)tstate;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "9309:         root[\"result\"][ii][\"Temp\"] = tvalue;",
          "9310:         sprintf(szData, \"%.1f UVI, %.1f&deg; %c\", UVI, tvalue, tempsign);",
          "9311:        }",
          "9312:        else",
          "9313:        {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9354:         _tTrendCalculator::_eTendencyType tstate = _tTrendCalculator::_eTendencyType::TENDENCY_UNKNOWN;",
          "9355:         uint64_t tID = ((uint64_t)(hardwareID & 0x7FFFFFFF) << 32) | (devIdx & 0x7FFFFFFF);",
          "9356:         if (m_mainworker.m_trend_calculator.find(tID) != m_mainworker.m_trend_calculator.end())",
          "9357:         {",
          "9358:          tstate = m_mainworker.m_trend_calculator[tID].m_state;",
          "9359:         }",
          "9360:         root[\"result\"][ii][\"trend\"] = (int)tstate;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "9364:         }",
          "9365:         double tvalue = ConvertTemperature(atof(strarray[5].c_str()), tempsign);",
          "9366:         root[\"result\"][ii][\"Chill\"] = tvalue;",
          "9367:        }",
          "9368:        root[\"result\"][ii][\"Data\"] = sValue;",
          "9369:        root[\"result\"][ii][\"HaveTimeout\"] = bHaveTimeout;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9418:         _tTrendCalculator::_eTendencyType tstate = _tTrendCalculator::_eTendencyType::TENDENCY_UNKNOWN;",
          "9419:         uint64_t tID = ((uint64_t)(hardwareID & 0x7FFFFFFF) << 32) | (devIdx & 0x7FFFFFFF);",
          "9420:         if (m_mainworker.m_trend_calculator.find(tID) != m_mainworker.m_trend_calculator.end())",
          "9421:         {",
          "9422:          tstate = m_mainworker.m_trend_calculator[tID].m_state;",
          "9423:         }",
          "9424:         root[\"result\"][ii][\"trend\"] = (int)tstate;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "9412:         total_real *= AddjMulti;",
          "9413:         rate = (static_cast<float>(atof(strarray[0].c_str())) / 100.0f)*float(AddjMulti);",
          "9416:         root[\"result\"][ii][\"Rain\"] = szTmp;",
          "9417:         sprintf(szTmp, \"%g\", rate);",
          "9418:         root[\"result\"][ii][\"RainRate\"] = szTmp;",
          "",
          "[Removed Lines]",
          "9415:         sprintf(szTmp, \"%.3f\", total_real);",
          "",
          "[Added Lines]",
          "9474:         sprintf(szTmp, \"%.1f\", total_real);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "10253:        root[\"result\"][ii][\"Image\"] = \"Computer\";",
          "10254:        root[\"result\"][ii][\"TypeImg\"] = \"temperature\";",
          "10255:        root[\"result\"][ii][\"Type\"] = \"temperature\";",
          "10256:       }",
          "10257:       else if (dSubType == sTypePercentage)",
          "10258:       {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10315:        _tTrendCalculator::_eTendencyType tstate = _tTrendCalculator::_eTendencyType::TENDENCY_UNKNOWN;",
          "10316:        uint64_t tID = ((uint64_t)(hardwareID & 0x7FFFFFFF) << 32) | (devIdx & 0x7FFFFFFF);",
          "10317:        if (m_mainworker.m_trend_calculator.find(tID) != m_mainworker.m_trend_calculator.end())",
          "10318:        {",
          "10319:         tstate = m_mainworker.m_trend_calculator[tID].m_state;",
          "10320:        }",
          "10321:        root[\"result\"][ii][\"trend\"] = (int)tstate;",
          "",
          "---------------"
        ],
        "main/WindCalculation.cpp||main/WindCalculation.cpp": [
          "File: main/WindCalculation.cpp -> main/WindCalculation.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: #define RAD 57.2957795",
          "17: {",
          "18:  Init();",
          "19: }",
          "22: {",
          "24:  memset(&m_minute_counter,0,sizeof(m_minute_counter));",
          "",
          "[Removed Lines]",
          "16: _tWindCalculationStruct::_tWindCalculationStruct()",
          "21: void _tWindCalculationStruct::Init()",
          "",
          "[Added Lines]",
          "16: _tWindCalculator::_tWindCalculator()",
          "21: void _tWindCalculator::Init()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:  m_MinGust = -1;",
          "34: }",
          "37: {",
          "38:  double dirresult=degree;",
          "39:  if (m_bHaveLastDirection)",
          "",
          "[Removed Lines]",
          "36: double _tWindCalculationStruct::AddValueAndReturnAvarage(double degree)",
          "",
          "[Added Lines]",
          "36: double _tWindCalculator::AddValueAndReturnAvarage(const double degree)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86: }",
          "89: {",
          "90:  int highpos=0;",
          "91:  int highestval=0;",
          "",
          "[Removed Lines]",
          "88: double _tWindCalculationStruct::CalculateAvarage()",
          "",
          "[Added Lines]",
          "88: double _tWindCalculator::CalculateAvarage()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "101:  return highpos*WIND_DEGREE_RESOLUTION;",
          "102: }",
          "105: {",
          "106:  if ((Speed > m_MaxSpeed) || (m_MaxSpeed == -1))",
          "107:  {",
          "",
          "[Removed Lines]",
          "104: void _tWindCalculationStruct::SetSpeedGust(const int Speed, const int Gust)",
          "",
          "[Added Lines]",
          "104: void _tWindCalculator::SetSpeedGust(const int Speed, const int Gust)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "122: }",
          "126: {",
          "127:  MinSpeed = m_MinSpeed;",
          "128:  MaxSpeed = m_MaxSpeed;",
          "",
          "[Removed Lines]",
          "125: void _tWindCalculationStruct::GetMMSpeedGust(int &MinSpeed, int &MaxSpeed, int &MinGust, int &MaxGust)",
          "",
          "[Added Lines]",
          "125: void _tWindCalculator::GetMMSpeedGust(int &MinSpeed, int &MaxSpeed, int &MinGust, int &MaxGust)",
          "",
          "---------------"
        ],
        "main/WindCalculation.h||main/WindCalculation.h": [
          "File: main/WindCalculation.h -> main/WindCalculation.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include <deque>",
          "7: {",
          "8:  int m_minute_counter[100];//WIND_DEGREE_TABLE_COUNT",
          "9:  std::deque<unsigned char> m_history_fifo;",
          "",
          "[Removed Lines]",
          "6: struct _tWindCalculationStruct",
          "",
          "[Added Lines]",
          "6: struct _tWindCalculator",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19:  int m_MinGust;",
          "24:  void Init();",
          "25:  double AddValueAndReturnAvarage(const double degree);",
          "",
          "[Removed Lines]",
          "22:  _tWindCalculationStruct();",
          "",
          "[Added Lines]",
          "22:  _tWindCalculator();",
          "",
          "---------------"
        ],
        "main/mainworker.cpp||main/mainworker.cpp": [
          "File: main/mainworker.cpp -> main/mainworker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "3249:  m_notifications.CheckAndHandleNotification(DevRowIdx, HwdID, ID, procResult.DeviceName, Unit, devType, subType, cmnd, szTmp);",
          "3251:  if (_log.IsDebugLevelEnabled(DEBUG_RECEIVED))",
          "3252:  {",
          "3253:   WriteMessageStart();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3251:  uint64_t tID = ((uint64_t)(HwdID & 0x7FFFFFFF) << 32) | (DevRowIdx & 0x7FFFFFFF);",
          "3252:  m_trend_calculator[tID].AddValueAndReturnTendency(static_cast<double>(chill), _tTrendCalculator::TAVERAGE_TEMP);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3381:  if (DevRowIdx == -1)",
          "3382:   return;",
          "3384:  bool bHandledNotification = false;",
          "3385:  unsigned char humidity = 0;",
          "3386:  if (pResponse->TEMP.subtype == sTypeTEMP5)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3387:  uint64_t tID = ((uint64_t)(HwdID & 0x7FFFFFFF) << 32) | (DevRowIdx & 0x7FFFFFFF);",
          "3388:  m_trend_calculator[tID].AddValueAndReturnTendency(static_cast<double>(temp), _tTrendCalculator::TAVERAGE_TEMP);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3689:  if (DevRowIdx == -1)",
          "3690:   return;",
          "3692:  m_notifications.CheckAndHandleNotification(DevRowIdx, HwdID, ID, procResult.DeviceName, Unit, devType, subType, cmnd, szTmp);",
          "3694:  if (_log.IsDebugLevelEnabled(DEBUG_RECEIVED))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3698:  uint64_t tID = ((uint64_t)(HwdID & 0x7FFFFFFF) << 32) | (DevRowIdx & 0x7FFFFFFF);",
          "3699:  m_trend_calculator[tID].AddValueAndReturnTendency(static_cast<double>(temp), _tTrendCalculator::TAVERAGE_TEMP);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3896:  if (DevRowIdx == -1)",
          "3897:   return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3908:  uint64_t tID = ((uint64_t)(HwdID & 0x7FFFFFFF) << 32) | (DevRowIdx & 0x7FFFFFFF);",
          "3909:  m_trend_calculator[tID].AddValueAndReturnTendency(static_cast<double>(temp), _tTrendCalculator::TAVERAGE_TEMP);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4029:  if (DevRowIdx == -1)",
          "4030:   return;",
          "4032:  m_notifications.CheckAndHandleNotification(DevRowIdx, HwdID, ID, procResult.DeviceName, Unit, devType, subType, cmnd, szTmp);",
          "4034:  if (_log.IsDebugLevelEnabled(DEBUG_RECEIVED))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4044:  uint64_t tID = ((uint64_t)(HwdID & 0x7FFFFFFF) << 32) | (DevRowIdx & 0x7FFFFFFF);",
          "4045:  m_trend_calculator[tID].AddValueAndReturnTendency(static_cast<double>(temp), _tTrendCalculator::TAVERAGE_TEMP);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4130:  if (DevRowIdx == -1)",
          "4131:   return;",
          "4133:  sprintf(szTmp, \"%.1f\", temp);",
          "4134:  uint64_t DevRowIdxTemp = m_sql.UpdateValue(HwdID, ID.c_str(), Unit, pTypeTEMP, sTypeTEMP3, SignalLevel, BatteryLevel, cmnd, szTmp, procResult.DeviceName);",
          "4135:  m_notifications.CheckAndHandleNotification(DevRowIdx, HwdID, ID, procResult.DeviceName, Unit, pTypeTEMP, sTypeTEMP3, temp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4148:  uint64_t tID = ((uint64_t)(HwdID & 0x7FFFFFFF) << 32) | (DevRowIdx & 0x7FFFFFFF);",
          "4149:  m_trend_calculator[tID].AddValueAndReturnTendency(static_cast<double>(temp), _tTrendCalculator::TAVERAGE_TEMP);",
          "",
          "---------------"
        ],
        "main/mainworker.h||main/mainworker.h": [
          "File: main/mainworker.h -> main/mainworker.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: #include \"Camera.h\"",
          "8: #include <deque>",
          "9: #include \"WindCalculation.h\"",
          "10: #include \"StoppableTask.h\"",
          "11: #include \"../tcpserver/TCPServer.h\"",
          "12: #include \"concurrent_queue.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: #include \"TrendCalculator.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "132:  std::vector<int> m_SunRiseSetMins;",
          "133:  std::string m_DayLength;",
          "134:  std::vector<std::string> m_webthemes;",
          "137:  time_t m_LastHeartbeat = 0;",
          "138: private:",
          "",
          "[Removed Lines]",
          "135:  std::map<unsigned short, _tWindCalculationStruct> m_wind_calculator;",
          "",
          "[Added Lines]",
          "136:  std::map<unsigned short, _tWindCalculator> m_wind_calculator;",
          "137:  std::map<uint64_t, _tTrendCalculator> m_trend_calculator;",
          "",
          "---------------"
        ],
        "msbuild/domoticz.vcxproj||msbuild/domoticz.vcxproj": [
          "File: msbuild/domoticz.vcxproj -> msbuild/domoticz.vcxproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "584:     <ClInclude Include=\"..\\main\\mainstructs.h\" />",
          "585:     <ClInclude Include=\"..\\main\\Noncopyable.h\" />",
          "586:     <ClInclude Include=\"..\\main\\StoppableTask.h\" />",
          "587:     <ClInclude Include=\"..\\main\\unzip_iterator.h\" />",
          "588:     <ClInclude Include=\"..\\main\\unzip_stream.h\" />",
          "589:     <ClInclude Include=\"..\\main\\WebServerHelper.h\" />",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "587:     <ClInclude Include=\"..\\main\\TrendCalculator.h\" />",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "888:       <PrecompiledHeader Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">Create</PrecompiledHeader>",
          "889:     </ClCompile>",
          "890:     <ClCompile Include=\"..\\main\\SunRiseSet.cpp\" />",
          "891:     <ClCompile Include=\"..\\main\\WebServerHelper.cpp\" />",
          "892:     <ClCompile Include=\"..\\main\\WindCalculation.cpp\" />",
          "893:     <ClCompile Include=\"..\\MQTT\\logging_mosq.c\">",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "892:     <ClCompile Include=\"..\\main\\TrendCalculator.cpp\" />",
          "",
          "---------------"
        ],
        "msbuild/domoticz.vcxproj.filters||msbuild/domoticz.vcxproj.filters": [
          "File: msbuild/domoticz.vcxproj.filters -> msbuild/domoticz.vcxproj.filters",
          "--- Hunk 1 ---",
          "[Context before]",
          "2146:     <ClInclude Include=\"..\\hardware\\TeleinfoBase.h\">",
          "2147:       <Filter>Devices\\Teleinfo</Filter>",
          "2148:     </ClInclude>",
          "2149:   </ItemGroup>",
          "2150:   <ItemGroup>",
          "2151:     <ClCompile Include=\"..\\webserver\\Base64.cpp\">",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2149:     <ClInclude Include=\"..\\main\\TrendCalculator.h\">",
          "2150:       <Filter>Helpers</Filter>",
          "2151:     </ClInclude>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2922:     <ClCompile Include=\"..\\hardware\\TeleinfoBase.cpp\">",
          "2923:       <Filter>Devices\\Teleinfo</Filter>",
          "2924:     </ClCompile>",
          "2925:   </ItemGroup>",
          "2926:   <ItemGroup>",
          "2927:     <ResourceCompile Include=\"domoticz.rc\">",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2928:     <ClCompile Include=\"..\\main\\TrendCalculator.cpp\">",
          "2929:       <Filter>Helpers</Filter>",
          "2930:     </ClCompile>",
          "",
          "---------------"
        ],
        "www/app/TemperatureController.js||www/app/TemperatureController.js": [
          "File: www/app/TemperatureController.js -> www/app/TemperatureController.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "619:      ctrl.displayChill = function () {",
          "620:       return typeof item.Chill != 'undefined';",
          "621:      };",
          "623:      ctrl.image = function () {",
          "624:       if (typeof item.Temp != 'undefined') {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "623:      ctrl.DisplayTrend = function () {",
          "625:       if (typeof item.trend != 'undefined') {",
          "626:        if (item.trend > 1)",
          "627:         return true;",
          "628:       }",
          "629:       return false;",
          "630:      };",
          "631:      ctrl.TrendState = function () {",
          "632:       if (item.trend == 0) return \"unk\";",
          "633:       if (item.trend == 1) return \"stable\";",
          "634:       if (item.trend == 2) return \"up\";",
          "635:       if (item.trend == 3) return \"down\";",
          "636:       return \"unk\";",
          "637:      };",
          "",
          "---------------"
        ],
        "www/app/app.js||www/app/app.js": [
          "File: www/app/app.js -> www/app/app.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "983:    }",
          "984:    return backgroundClass;",
          "985:   }",
          "987:  });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "986:   $rootScope.DisplayTrend = function (trend) {",
          "987:    alert(item.Name);",
          "989:    if (typeof trend != 'undefined') {",
          "990:     if (trend > 1)",
          "991:      return true;",
          "992:    }",
          "993:    return false;",
          "994:   };",
          "995:   $rootScope.TrendState = function (trend) {",
          "996:    if (trend == 0) return \"unk\";",
          "997:    if (trend == 1) return \"stable\";",
          "998:    if (trend == 2) return \"up\";",
          "999:    if (trend == 3) return \"down\";",
          "1000:    return \"unk\";",
          "1001:   };",
          "",
          "---------------"
        ],
        "www/html5.appcache||www/html5.appcache": [
          "File: www/html5.appcache -> www/html5.appcache",
          "--- Hunk 1 ---",
          "[Context before]",
          "92: images/Amplifier.png",
          "93: images/Amplifier48_Off.png",
          "94: images/Amplifier48_On.png",
          "95: images/back_disabled.png",
          "96: images/back_enabled.png",
          "97: images/back_enabled_hover.png",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95: images/arrow_down.png",
          "96: images/arrow_stable.png",
          "97: images/arrow_unk.png",
          "98: images/arrow_up.png",
          "",
          "---------------"
        ],
        "www/views/temperature_widget.html||www/views/temperature_widget.html": [
          "File: www/views/temperature_widget.html -> www/views/temperature_widget.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:             <tr>",
          "5:                 <td id=\"name\" ng-bind=\"item.Name\"></td>",
          "6:                 <td id=\"bigtext\" class=\"ng-cloak\">",
          "7:                     <span ng-show=\"ctrl.displayTemp()\">{{item.Temp}}&#176; {{tempsign}}</span>",
          "8:                     <span ng-show=\"ctrl.displaySetPoint() && ctrl.isSetPointOn()\">({{item.SetPoint}}&#176; {{tempsign}})</span>",
          "9:                     <span ng-show=\"ctrl.displaySetPoint() && !ctrl.isSetPointOn()\">(Off)</span>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7:      <img ng-show=\"ctrl.DisplayTrend()\" height=\"12\" ng-src=\"images/arrow_{{ctrl.TrendState()}}.png\">",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4d7f35da2cf50547bb296b06824b15961fb6ca6d",
      "candidate_info": {
        "commit_hash": "4d7f35da2cf50547bb296b06824b15961fb6ca6d",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/4d7f35da2cf50547bb296b06824b15961fb6ca6d",
        "files": [
          "main/SQLHelper.h"
        ],
        "message": "Remove ghost functions from header",
        "before_after_code_files": [
          "main/SQLHelper.h||main/SQLHelper.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/SQLHelper.h||main/SQLHelper.h": [
          "File: main/SQLHelper.h -> main/SQLHelper.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "380:  std::string DeleteUserVariable(const std::string &idx);",
          "381:  std::string SaveUserVariable(const std::string &varname, const std::string &vartype, const std::string &varvalue);",
          "382:  std::string UpdateUserVariable(const std::string &idx, const std::string &varname, const std::string &vartype, const std::string &varvalue, const bool eventtrigger);",
          "384:  std::vector<std::vector<std::string> > GetUserVariables();",
          "386:  uint64_t CreateDevice(const int HardwareID, const int SensorType, const int SensorSubType, std::string &devname, const unsigned long nid, const std::string &soptions);",
          "",
          "[Removed Lines]",
          "383:  bool SetUserVariable(const uint64_t idx, const std::string &varvalue, const bool eventtrigger);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "388:  void UpdateDeviceValue(const char * FieldName , std::string &Value , std::string &Idx );",
          "389:  void UpdateDeviceValue(const char * FieldName , int Value , std::string &Idx )   ;",
          "390:  void UpdateDeviceValue(const char * FieldName , float Value , std::string &Idx ) ;",
          "393:  std::string GetDeviceValue(const char * FieldName , const char *Idx );",
          "395:  float getTemperatureFromSValue(const char * sValue);",
          "",
          "[Removed Lines]",
          "391:  double ConvertTemperature(double tempcelcius);",
          "392:  double ConvertTemperatureUnit(double tempcelcius);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fb0468c641b83ae3f0735efd28f9d6ed3e196dc8",
      "candidate_info": {
        "commit_hash": "fb0468c641b83ae3f0735efd28f9d6ed3e196dc8",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/fb0468c641b83ae3f0735efd28f9d6ed3e196dc8",
        "files": [
          "www/js/domoticz.js"
        ],
        "message": "Fixed water graph display",
        "before_after_code_files": [
          "www/js/domoticz.js||www/js/domoticz.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "www/js/domoticz.js||www/js/domoticz.js": [
          "File: www/js/domoticz.js -> www/js/domoticz.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "5841:      datatableUsage1.push([cdate, fValue]);",
          "5842:     }",
          "5843:     else {",
          "5845:     }",
          "5846:    }",
          "5847:    if (typeof item.v2 != 'undefined') {",
          "",
          "[Removed Lines]",
          "5844:      datatableUsage1.push([cdate, parseFloat(item.v) * $.DividerWater]);",
          "",
          "[Added Lines]",
          "5844:      datatableUsage1.push([cdate, parseFloat(item.v) * 1000]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5866:     datatableUsage1.push([cdate, parseFloat(item.v)]);",
          "5867:    }",
          "5868:    else {",
          "5870:    }",
          "5871:    if (typeof item.v2 != 'undefined') {",
          "5872:     datatableUsage2.push([cdate, parseFloat(item.v2)]);",
          "",
          "[Removed Lines]",
          "5869:     datatableUsage1.push([cdate, parseFloat(item.v) * $.DividerWater]);",
          "",
          "[Added Lines]",
          "5869:     datatableUsage1.push([cdate, parseFloat(item.v) * 1000]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a7873a8bd6bedc5414559f6bdfacd1c2e8127b65",
      "candidate_info": {
        "commit_hash": "a7873a8bd6bedc5414559f6bdfacd1c2e8127b65",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/a7873a8bd6bedc5414559f6bdfacd1c2e8127b65",
        "files": [
          "hardware/P1MeterBase.cpp"
        ],
        "message": "Removed inaccurate current sensor from P1 Smart Meter",
        "before_after_code_files": [
          "hardware/P1MeterBase.cpp||hardware/P1MeterBase.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/P1MeterBase.cpp||hardware/P1MeterBase.cpp": [
          "File: hardware/P1MeterBase.cpp -> hardware/P1MeterBase.cpp"
        ]
      }
    },
    {
      "candidate_hash": "1cae667820533598bf1e9f193440567eda5c404d",
      "candidate_info": {
        "commit_hash": "1cae667820533598bf1e9f193440567eda5c404d",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/1cae667820533598bf1e9f193440567eda5c404d",
        "files": [
          "hardware/Rtl433.cpp"
        ],
        "message": "RTL433, corrected char* mistake",
        "before_after_code_files": [
          "hardware/Rtl433.cpp||hardware/Rtl433.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/Rtl433.cpp||hardware/Rtl433.cpp": [
          "File: hardware/Rtl433.cpp -> hardware/Rtl433.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "464:     if (!bHaveSend)",
          "465:     {",
          "468:     }",
          "469:     else",
          "470:     {",
          "",
          "[Removed Lines]",
          "467:      _log.Log(LOG_STATUS, \"Rtl433: Unhandled sensor reading, please report: (%s|%s)\", headerLine.c_str(), line.c_str());",
          "",
          "[Added Lines]",
          "467:      _log.Log(LOG_STATUS, \"Rtl433: Unhandled sensor reading, please report: (%s|%s)\", headerLine.c_str(), line);",
          "",
          "---------------"
        ]
      }
    }
  ]
}