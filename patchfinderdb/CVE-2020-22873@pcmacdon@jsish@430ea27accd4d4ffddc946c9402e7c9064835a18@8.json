{
  "cve_id": "CVE-2020-22873",
  "cve_desc": "Buffer overflow vulnerability in function NumberToPrecisionCmd in jsish before 3.0.7, allows remote attackers to execute arbitrary code.",
  "repo": "pcmacdon/jsish",
  "patch_hash": "430ea27accd4d4ffddc946c9402e7c9064835a18",
  "patch_info": {
    "commit_hash": "430ea27accd4d4ffddc946c9402e7c9064835a18",
    "repo": "pcmacdon/jsish",
    "commit_url": "https://github.com/pcmacdon/jsish/commit/430ea27accd4d4ffddc946c9402e7c9064835a18",
    "files": [
      "src/jsi.h",
      "src/jsiCmds.c",
      "src/jsiCode.c",
      "src/jsiEval.c",
      "src/jsiFilesys.c",
      "src/jsiFunc.c",
      "src/jsiHash.c",
      "src/jsiInterp.c",
      "src/jsiJSON.c",
      "src/jsiMySql.c",
      "src/jsiNumber.c",
      "src/jsiOptions.c",
      "src/jsiPstate.c",
      "src/jsiRegexp.c",
      "src/jsiSqlite.c",
      "src/jsiString.c",
      "src/jsiTree.c",
      "src/jsiUtils.c",
      "src/jsiValue.c",
      "src/jsiWebSocket.c"
    ],
    "message": "Release \"3.0.7\": Fix toPrecision bug \"stack overflow #4\".\n\nFossilOrigin-Name: 6c7f0c37027d7f890b57cb38f776af39b8f81f03e60ceeb0a231a1d21e24b5de",
    "before_after_code_files": [
      "src/jsi.h||src/jsi.h",
      "src/jsiCmds.c||src/jsiCmds.c",
      "src/jsiCode.c||src/jsiCode.c",
      "src/jsiEval.c||src/jsiEval.c",
      "src/jsiFilesys.c||src/jsiFilesys.c",
      "src/jsiFunc.c||src/jsiFunc.c",
      "src/jsiHash.c||src/jsiHash.c",
      "src/jsiInterp.c||src/jsiInterp.c",
      "src/jsiJSON.c||src/jsiJSON.c",
      "src/jsiMySql.c||src/jsiMySql.c",
      "src/jsiNumber.c||src/jsiNumber.c",
      "src/jsiOptions.c||src/jsiOptions.c",
      "src/jsiPstate.c||src/jsiPstate.c",
      "src/jsiRegexp.c||src/jsiRegexp.c",
      "src/jsiSqlite.c||src/jsiSqlite.c",
      "src/jsiString.c||src/jsiString.c",
      "src/jsiTree.c||src/jsiTree.c",
      "src/jsiUtils.c||src/jsiUtils.c",
      "src/jsiValue.c||src/jsiValue.c",
      "src/jsiWebSocket.c||src/jsiWebSocket.c"
    ]
  },
  "patch_diff": {
    "src/jsi.h||src/jsi.h": [
      "File: src/jsi.h -> src/jsi.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: #define JSI_VERSION_MAJOR   3",
      "6: #define JSI_VERSION_MINOR   0",
      "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
      "",
      "[Removed Lines]",
      "7: #define JSI_VERSION_RELEASE 6",
      "",
      "[Added Lines]",
      "7: #define JSI_VERSION_RELEASE 7",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "217:     JSI_BUFSIZ=8192",
      "",
      "[Removed Lines]",
      "216:     JSI_MAX_NUMBER_STRING=50,",
      "",
      "[Added Lines]",
      "216:     JSI_MAX_NUMBER_STRING=100,",
      "",
      "---------------"
    ],
    "src/jsiCmds.c||src/jsiCmds.c": [
      "File: src/jsiCmds.c -> src/jsiCmds.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "845:         Jsi_ObjInsert(interp, nobj, \"name\", Jsi_ValueNewStringDup(interp, name), 0);",
      "846:         Jsi_ObjInsert(interp, nobj, \"version\", Jsi_ValueNewNumber(interp, ptr->version), 0);",
      "847:         Jsi_ObjInsert(interp, nobj, \"lastReq\", Jsi_ValueNewNumber(interp, ptr->lastReq), 0);",
      "849:         jsi_VersionNormalize(ptr->version, buf, sizeof(buf));",
      "850:         Jsi_ObjInsert(interp, nobj, \"verStr\", Jsi_ValueNewStringDup(interp, buf), 0);",
      "851:         const char *cp = (ptr->loadFile?ptr->loadFile:\"\");",
      "",
      "[Removed Lines]",
      "848:         char buf[200];",
      "",
      "[Added Lines]",
      "848:         char buf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1192:     Jsi_Value *vres;",
      "1193:     Jsi_Obj  *ores = Jsi_ObjNew(interp);",
      "1194:     Jsi_Value *nnv;",
      "1197:     vres = Jsi_ValueMakeObject(interp, NULL, ores);",
      "",
      "[Removed Lines]",
      "1195:     char *val, nam[200];",
      "",
      "[Added Lines]",
      "1195:     char *val, nam[JSI_BUFSIZ/2];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2700:     }",
      "2701:     if (bp.line<=0 && !bp.func)",
      "2702:         return Jsi_LogError(\"bad number\");",
      "2704:     bp.id = ++interp->debugOpts.breakIdx;",
      "2705:     bp.enabled = 1;",
      "2706:     snprintf(nbuf, sizeof(nbuf), \"%d\", bp.id);",
      "",
      "[Removed Lines]",
      "2703:     char nbuf[100];",
      "",
      "[Added Lines]",
      "2703:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2718:     if (interp->breakpointHash)",
      "2719:     {",
      "2720:         int num;",
      "2722:         if (Jsi_GetIntFromValue(interp, val, &num) != JSI_OK)",
      "2723:             return Jsi_LogError(\"bad number\");",
      "",
      "[Removed Lines]",
      "2721:         char nbuf[100];",
      "",
      "[Added Lines]",
      "2721:         char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2766:         return Jsi_HashKeysDump(interp, interp->breakpointHash, ret, 0);",
      "2767:     Jsi_Value *val = Jsi_ValueArrayIndex(interp, args, 0);",
      "2768:     int num;",
      "2770:     if (Jsi_GetIntFromValue(interp, val, &num) != JSI_OK)",
      "2771:         return Jsi_LogError(\"bad number\");",
      "",
      "[Removed Lines]",
      "2769:     char nbuf[100];",
      "",
      "[Added Lines]",
      "2769:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "3800:     Jsi_Value *flag = Jsi_ValueArrayIndex(interp, args, 1);",
      "3801:     if (!val) goto bail;",
      "3802:     if (Jsi_ValueIsNumber(interp, val)) {",
      "3804:         Jsi_Number n;",
      "3805:         if (Jsi_GetNumberFromValue(interp, val, &n) != JSI_OK)",
      "3806:             goto bail;",
      "",
      "[Removed Lines]",
      "3803:         char buf[200];",
      "",
      "[Added Lines]",
      "3803:         char buf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "3953:         if (bv)",
      "3954:             interp->timesStart = now;",
      "3955:         else {",
      "3957:             snprintf(buf, sizeof(buf), \" (times = %.6f sec)\\n\", (now-interp->timesStart));",
      "3958:             Jsi_Puts(interp, jsi_Stderr, buf, -1);",
      "3959:         }",
      "",
      "[Removed Lines]",
      "3956:             char buf[100];",
      "",
      "[Added Lines]",
      "3956:             char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiCode.c||src/jsiCode.c": [
      "File: src/jsiCode.c -> src/jsiCode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "436:     if (_JSICASTINT(op->op) < 0 || op->op >= OP_LASTOP) {",
      "437:         snprintf(buf, bsiz, \"Bad opcode[%d] at %d\", op->op, currentip);",
      "438:     }",
      "440:     snprintf(nbuf, sizeof(nbuf), \"%d#%d\", currentip, op->Line);",
      "441:     snprintf(buf, bsiz, \"%-8s %s \", nbuf, jsi_op_names[op->op]);",
      "",
      "[Removed Lines]",
      "439:     char nbuf[100];",
      "",
      "[Added Lines]",
      "439:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiEval.c||src/jsiEval.c": [
      "File: src/jsiEval.c -> src/jsiEval.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "288: static const char *jsi_evalprint(Jsi_Value *v)",
      "289: {",
      "291:     if (!v)",
      "292:         return \"nil\";",
      "293:     if (v->vt == JSI_VT_NUMBER) {",
      "295:     } else if (v->vt == JSI_VT_BOOL) {",
      "297:     } else if (v->vt == JSI_VT_STRING) {",
      "299:     } else if (v->vt == JSI_VT_VARIABLE) {",
      "301:     } else if (v->vt == JSI_VT_NULL) {",
      "303:     } else if (v->vt == JSI_VT_OBJECT) {",
      "305:     } else if (v->vt == JSI_VT_UNDEF) {",
      "307:     }",
      "308:     return buf;",
      "309: }",
      "",
      "[Removed Lines]",
      "290:     static char buf[100];",
      "294:         snprintf(buf, 100, \"NUM:%\" JSI_NUMGFMT \" \", v->d.num);",
      "296:         snprintf(buf, 100, \"BOO:%d\", v->d.val);",
      "298:         snprintf(buf, 100, \"STR:'%s'\", v->d.s.str);",
      "300:         snprintf(buf, 100, \"VAR:%p\", v->d.lval);",
      "302:         snprintf(buf, 100, \"NULL\");",
      "304:         snprintf(buf, 100, \"OBJ:%p\", v->d.obj);",
      "306:         snprintf(buf, 100, \"UNDEFINED\");",
      "",
      "[Added Lines]",
      "290:     static char buf[JSI_MAX_NUMBER_STRING];",
      "294:         snprintf(buf, sizeof(buf), \"NUM:%\" JSI_NUMGFMT \" \", v->d.num);",
      "296:         snprintf(buf, sizeof(buf), \"BOO:%d\", v->d.val);",
      "298:         snprintf(buf, sizeof(buf), \"STR:'%s'\", v->d.s.str);",
      "300:         snprintf(buf, sizeof(buf), \"VAR:%p\", v->d.lval);",
      "302:         snprintf(buf, sizeof(buf), \"NULL\");",
      "304:         snprintf(buf, sizeof(buf), \"OBJ:%p\", v->d.obj);",
      "306:         snprintf(buf, sizeof(buf), \"UNDEFINED\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "403:     jsi_TryList *trylist, jsi_OpCode *ip, Jsi_OpCodes *opcodes)",
      "404: {",
      "405:     int i;",
      "407:     jsi_code_decode(interp, ip, ip - opcodes->codes, buf, sizeof(buf));",
      "408:     Jsi_Printf(interp, jsi_Stderr, \"%p: %-30.200s : THIS=%s, STACK=[\", ip, buf, jsi_evalprint(_this));",
      "409:     for (i = 0; i < interp->framePtr->Sp; ++i) {",
      "",
      "[Removed Lines]",
      "406:     char buf[200];",
      "",
      "[Added Lines]",
      "406:     char buf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1538:                     break;",
      "1539:                 }",
      "1540:                 int bval = 0;",
      "1542:                 Jsi_Value *vv;",
      "1543:                 Jsi_Obj *obj = v->d.obj;",
      "1544:                 if (!cp) {",
      "",
      "[Removed Lines]",
      "1541:                 char nbuf[100];",
      "",
      "[Added Lines]",
      "1541:                 char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2155:     Jsi_IncrRefCount(interp, fargs);",
      "2156:     rc = jsi_evalcode_sub(ps, opcodes, scope, fargs, _this, *vret);",
      "2157:     Jsi_DecrRefCount(interp, fargs);",
      "2159:         if ((interp->evalFlags&JSI_EVAL_RETURN)==0)",
      "2160:             Jsi_ValueMakeUndef(interp, vret);",
      "",
      "[Removed Lines]",
      "2158:     if (interp->didReturn == 0 && !interp->exited) {",
      "",
      "[Added Lines]",
      "2158:     if (interp->didReturn == 0 && !interp->exited && rc == JSI_OK) {",
      "",
      "---------------"
    ],
    "src/jsiFilesys.c||src/jsiFilesys.c": [
      "File: src/jsiFilesys.c -> src/jsiFilesys.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1178:     if ((str = getenv(\"HOME\")) == NULL) {",
      "1179:         struct passwd pwd, *pw;",
      "1181:         if (getpwuid_r(getuid(), &pwd, buf, sizeof(buf), &pw) == 0 && pw->pw_dir)",
      "1182:             str = pw->pw_dir;",
      "1183:     }",
      "",
      "[Removed Lines]",
      "1180:         char buf[20000];",
      "",
      "[Added Lines]",
      "1180:         char buf[JSI_BUFSIZ*3];",
      "",
      "---------------"
    ],
    "src/jsiFunc.c||src/jsiFunc.c": [
      "File: src/jsiFunc.c -> src/jsiFunc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "189: Jsi_RC jsi_ArgTypeCheck(Jsi_Interp *interp, int typ,  Jsi_Value *arg, const char *p1,",
      "190:     const char *p2, int index, Jsi_Func *func, bool isdefault) {",
      "191:     Jsi_RC rc = JSI_OK;",
      "193:     idxBuf[0] = 0;",
      "194:     if (func && arg->vt == JSI_VT_UNDEF && !interp->typeCheck.noundef && index>0 && !isdefault && !(typ&JSI_TT_UNDEFINED)) {",
      "195:         snprintf(idxBuf, sizeof(idxBuf), \" arg %d\", index);",
      "",
      "[Removed Lines]",
      "192:     char idxBuf[200];",
      "",
      "[Added Lines]",
      "192:     char idxBuf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "295:         Jsi_DString dStr = {};",
      "296:         const char *exp = jsi_typeName(interp, typ, &dStr);",
      "297:         const char *vtyp = jsi_TypeName(interp, (Jsi_ttype)atyp);",
      "299:         idxBuf[0] = 0;",
      "300:         if (index>0)",
      "301:             snprintf(idxBuf, sizeof(idxBuf), \" arg %d\", index);",
      "",
      "[Removed Lines]",
      "298:         char idxBuf[200];",
      "",
      "[Added Lines]",
      "298:         char idxBuf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "339:     if (ss==NULL && spec == NULL)",
      "340:         return JSI_OK;",
      "341:     int i, minArgs, maxArgs, mis = 0, varargs = 0;",
      "343:     if (func->type == FC_BUILDIN) {",
      "344:         varargs =  (spec->maxArgs<0);",
      "345:         maxArgs = spec->maxArgs + func->callflags.bits.addargs;",
      "",
      "[Removed Lines]",
      "342:     char nbuf[100];",
      "",
      "[Added Lines]",
      "342:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiHash.c||src/jsiHash.c": [
      "File: src/jsiHash.c -> src/jsiHash.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "623:     void *key = Jsi_HashKeyGet(hPtr);",
      "624:     if (opts->keyType == JSI_KEYS_ONEWORD)",
      "625:         return Jsi_ValueNewNumber(opts->interp, (Jsi_Number)(intptr_t)key);",
      "627:     snprintf(nbuf, sizeof(nbuf), \"%p\", key);",
      "628:     return Jsi_ValueNewStringDup(opts->interp, nbuf);",
      "629: }",
      "",
      "[Removed Lines]",
      "626:     char nbuf[100];",
      "",
      "[Added Lines]",
      "626:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiInterp.c||src/jsiInterp.c": [
      "File: src/jsiInterp.c -> src/jsiInterp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "701: Jsi_Interp* Jsi_Main(Jsi_InterpOpts *opts)",
      "702: {",
      "704:     Jsi_Interp* interp = NULL;",
      "705:     int argc = 0, first = 1;",
      "706:     char **argv = NULL;",
      "",
      "[Removed Lines]",
      "703:     int rc = 0;",
      "",
      "[Added Lines]",
      "703:     Jsi_RC rc = JSI_OK;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "929:     }",
      "930:     if (jsi_deleted) //TODO: rationalize jsi_deleted, jsi_exitCode, etc",
      "931:         return jsi_DoExit(rc==JSI_EXIT?NULL:interp, jsi_exitCode);",
      "934:         Jsi_Value *ret = Jsi_ReturnValue(interp);",
      "935:         if (!Jsi_ValueIsType(interp, ret, JSI_VT_UNDEF)) {",
      "",
      "[Removed Lines]",
      "932:     if (rc == 0) {",
      "",
      "[Added Lines]",
      "932:     if (rc == JSI_OK) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "940:         }",
      "941:     } else {",
      "942:         if (!interp->parent && !interp->isHelp)",
      "944:         return jsi_DoExit(interp, 1);",
      "945:     }",
      "",
      "[Removed Lines]",
      "943:             fputs(\"ERROR\\n\", stderr);",
      "",
      "[Added Lines]",
      "943:             fprintf(stderr, \"ERROR: %s\\n\", interp->errMsgBuf);",
      "",
      "---------------"
    ],
    "src/jsiJSON.c||src/jsiJSON.c": [
      "File: src/jsiJSON.c -> src/jsiJSON.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: static void jsonNewDString(Jsi_Interp *interp, Jsi_DString *dStr, const char* str, int len)",
      "8: {",
      "10:     const char *cp = str;",
      "11:     int ulen;",
      "",
      "[Removed Lines]",
      "9:     char buf[100], *dp = buf;",
      "",
      "[Added Lines]",
      "9:     char buf[JSI_MAX_NUMBER_STRING], *dp = buf;",
      "",
      "---------------"
    ],
    "src/jsiMySql.c||src/jsiMySql.c": [
      "File: src/jsiMySql.c -> src/jsiMySql.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1170: static void mdbEvalSetColumnJSON(MyDbEvalContext *p, int iCol, Jsi_DString *dStr) {",
      "1171:     Jsi_Interp *interp = p->jdb->interp;",
      "1173:     MysqlPrep *prep = p->prep;",
      "1174:     SqlFieldResults *field = prep->fieldResult+iCol;",
      "1175:     if (field->isnull) {",
      "",
      "[Removed Lines]",
      "1172:     char nbuf[200];",
      "",
      "[Added Lines]",
      "1172:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1220: static void mdbEvalSetColumn(MyDbEvalContext *p, int iCol, Jsi_DString *dStr) {",
      "1223:     MysqlPrep *prep = p->prep;",
      "1224:     SqlFieldResults *field = prep->fieldResult+iCol;",
      "1225:     Jsi_Interp *interp = p->jdb->interp;",
      "",
      "[Removed Lines]",
      "1222:     char nbuf[200];",
      "",
      "[Added Lines]",
      "1222:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiNumber.c||src/jsiNumber.c": [
      "File: src/jsiNumber.c -> src/jsiNumber.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "123: static Jsi_RC NumberToFixedCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "124:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "125: {",
      "127:     int prec = 0, skip = 0;",
      "128:     Jsi_Number num;",
      "129:     Jsi_Value *v;",
      "",
      "[Removed Lines]",
      "126:     char buf[100];",
      "",
      "[Added Lines]",
      "126:     char buf[JSI_MAX_NUMBER_STRING+1];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "141: static Jsi_RC NumberToPrecisionCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "142:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "143: {",
      "145:     int prec = 0, skip = 0;",
      "146:     Jsi_Number num;",
      "147:     Jsi_Value *v;",
      "148:     ChkStringN(_this, funcPtr, v);",
      "149:     if (Jsi_GetIntFromValue(interp, Jsi_ValueArrayIndex(interp, args, skip), &prec) != JSI_OK)",
      "150:         return JSI_ERROR;",
      "152:     Jsi_GetDoubleFromValue(interp, v, &num);",
      "153:     snprintf(buf, sizeof(buf),\"%.*\" JSI_NUMFFMT, prec, num);",
      "154:     if (num<0)",
      "",
      "[Removed Lines]",
      "144:     char buf[100];",
      "151:     if (prec<=0) return JSI_ERROR;",
      "",
      "[Added Lines]",
      "144:     char buf[JSI_MAX_NUMBER_STRING*2];",
      "151:     if (prec<=0 || prec>JSI_MAX_NUMBER_STRING) return Jsi_LogError(\"precision must be between 1 and %d\", JSI_MAX_NUMBER_STRING);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "163: static Jsi_RC NumberToExponentialCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "164:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "165: {",
      "167:     int prec = 0, skip = 0;",
      "168:     Jsi_Number num;",
      "169:     Jsi_Value *v;",
      "",
      "[Removed Lines]",
      "166:     char buf[100];",
      "",
      "[Added Lines]",
      "166:     char buf[JSI_MAX_NUMBER_STRING+1];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "191: static Jsi_RC NumberToStringCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "192:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "193: {",
      "195:     int radix = 10, skip = 0, argc = Jsi_ValueGetLength(interp, args);",
      "196:     Jsi_Number num;",
      "197:     Jsi_Value *v;",
      "",
      "[Removed Lines]",
      "194:     char buf[500];",
      "",
      "[Added Lines]",
      "194:     char buf[JSI_MAX_NUMBER_STRING+1];",
      "",
      "---------------"
    ],
    "src/jsiOptions.c||src/jsiOptions.c": [
      "File: src/jsiOptions.c -> src/jsiOptions.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1876:         if (JSI_OK != jsi_EnumToValue(interp, eSpec, outValue, outStr, (void*)&nval, flags))",
      "1877:             return JSI_ERROR;",
      "1878:     } else if (outStr) {",
      "1880:         snprintf(obuf, sizeof(obuf), \"%\" PRId64, inum);",
      "1881:         Jsi_DSAppend(outStr, obuf, NULL);",
      "1882:     } else {",
      "",
      "[Removed Lines]",
      "1879:         char obuf[100];",
      "",
      "[Added Lines]",
      "1879:         char obuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiPstate.c||src/jsiPstate.c": [
      "File: src/jsiPstate.c -> src/jsiPstate.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "239:     l->d.fp = fp;",
      "240:     Jsi_Rewind(ps->interp, fp);",
      "241:     if (skipbang) {",
      "244:             Jsi_Rewind(ps->interp, fp);",
      "245:         }",
      "246:     }",
      "",
      "[Removed Lines]",
      "242:         char buf[1000];",
      "243:         if (Jsi_Gets(ps->interp, fp, buf, 1000) && (buf[0] != '#' || buf[1] != '!')) {",
      "",
      "[Added Lines]",
      "242:         char buf[JSI_BUFSIZ];",
      "243:         if (Jsi_Gets(ps->interp, fp, buf, sizeof(buf)) && (buf[0] != '#' || buf[1] != '!')) {",
      "",
      "---------------"
    ],
    "src/jsiRegexp.c||src/jsiRegexp.c": [
      "File: src/jsiRegexp.c -> src/jsiRegexp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "162:     int r  = regexec(reg, v, 1, &pos, regexec_flags);",
      "164:     if (r >= REG_BADPAT) {",
      "167:         regerror(r, reg, buf, sizeof(buf));",
      "168:         return Jsi_LogError(\"error while matching pattern: %s\", buf);",
      "",
      "[Removed Lines]",
      "165:         char buf[100];",
      "",
      "[Added Lines]",
      "165:         char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiSqlite.c||src/jsiSqlite.c": [
      "File: src/jsiSqlite.c -> src/jsiSqlite.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1396:     bool b;",
      "1397:     if( rc != JSI_OK) {",
      "1399:         snprintf(buf, sizeof(buf), \"error in function: %.200s\", p->zName);",
      "1400:         sqlite3_result_error(context, buf, -1);",
      "",
      "[Removed Lines]",
      "1398:         char buf[250];",
      "",
      "[Added Lines]",
      "1398:         char buf[JSI_BUFSIZ];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1761: static void dbEvalSetColumnJSON(DbEvalContext *p, int iCol, Jsi_DString *dStr) {",
      "1762:     Jsi_Interp *interp = p->jdb->interp;",
      "1765:     sqlite3_stmt *pStmt = p->pPreStmt->pStmt;",
      "",
      "[Removed Lines]",
      "1763:     char nbuf[200];",
      "",
      "[Added Lines]",
      "1763:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1811: static void dbEvalSetColumn(DbEvalContext *p, int iCol, Jsi_DString *dStr) {",
      "1812:     Jsi_Interp *interp = p->jdb->interp;",
      "1815:     sqlite3_stmt *pStmt = p->pPreStmt->pStmt;",
      "",
      "[Removed Lines]",
      "1813:     char nbuf[200];",
      "",
      "[Added Lines]",
      "1813:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2561: static void dbOutputHexBlob(Jsi_DString *dStr, const void *pBlob, int nBlob){",
      "2562:   int i;",
      "2564:   Jsi_DSAppend(dStr, \"X'\", NULL);",
      "2565:   for(i=0; i<nBlob; i++){ snprintf(out, sizeof(out),\"%02x\",zBlob[i]&0xff);Jsi_DSAppend(dStr, out, NULL); }",
      "2566:   Jsi_DSAppend(dStr, \"'\", NULL);",
      "",
      "[Removed Lines]",
      "2563:   char out[100], *zBlob = (char *)pBlob;",
      "",
      "[Added Lines]",
      "2563:   char out[JSI_MAX_NUMBER_STRING], *zBlob = (char *)pBlob;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "4394:     DbEvalContext sEval = {};",
      "4395:     int insert = 0, replace = 0, update = 0;",
      "4397: #ifdef JSI_DB_DSTRING_SIZE",
      "4398:     JSI_DSTRING_VAR(dStr, JSI_DB_DSTRING_SIZE);",
      "4399: #else",
      "",
      "[Removed Lines]",
      "4396:     char nbuf[100], *bPtr;",
      "",
      "[Added Lines]",
      "4396:     char nbuf[JSI_MAX_NUMBER_STRING], *bPtr;",
      "",
      "---------------"
    ],
    "src/jsiString.c||src/jsiString.c": [
      "File: src/jsiString.c -> src/jsiString.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "724:         int match = regexec(regex, p, MAX_SUBREGEX, pmatch, regexec_flags);",
      "726:         if (match >= REG_BADPAT) {",
      "729:             regerror(match, regex, buf, sizeof(buf));",
      "730:             Jsi_LogError(\"error while matching pattern: %s\", buf);",
      "",
      "[Removed Lines]",
      "727:             char buf[100];",
      "",
      "[Added Lines]",
      "727:             char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "895:             return JSI_OK;",
      "896:         }",
      "897:         if (r >= REG_BADPAT) {",
      "900:             regerror(r, reg, buf, sizeof(buf));",
      "901:             Jsi_LogError(\"error while matching pattern: %s\", buf);",
      "",
      "[Removed Lines]",
      "898:             char buf[100];",
      "",
      "[Added Lines]",
      "898:             char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiTree.c||src/jsiTree.c": [
      "File: src/jsiTree.c -> src/jsiTree.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "946:         int n;",
      "947:         int m;",
      "948:     } t1, t2;",
      "951:     wt = Jsi_TreeNew(interp, JSI_KEYS_ONEWORD, NULL);",
      "952:     mt = Jsi_TreeNew(interp, sizeof(struct tdata), NULL);",
      "",
      "[Removed Lines]",
      "949:     char nbuf[100];",
      "",
      "[Added Lines]",
      "949:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1038:     void *key = Jsi_TreeKeyGet(hPtr);",
      "1039:     if (opts->keyType == JSI_KEYS_ONEWORD)",
      "1040:         return Jsi_ValueNewNumber(opts->interp, (Jsi_Number)(intptr_t)key);",
      "1042:     snprintf(nbuf, sizeof(nbuf), \"%p\", key);",
      "1043:     return Jsi_ValueNewStringDup(opts->interp, nbuf);",
      "1044: }",
      "",
      "[Removed Lines]",
      "1041:     char nbuf[100];",
      "",
      "[Added Lines]",
      "1041:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiUtils.c||src/jsiUtils.c": [
      "File: src/jsiUtils.c -> src/jsiUtils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "626: static Jsi_RC jsiValueGetString(Jsi_Interp *interp, Jsi_Value* v, Jsi_DString *dStr, objwalker *owPtr)",
      "627: {",
      "629:     Jsi_DString eStr;",
      "630:     Jsi_DSInit(&eStr);",
      "631:     if (interp->maxDepth>0 && owPtr->depth > interp->maxDepth)",
      "",
      "[Removed Lines]",
      "628:     char buf[100], *str;",
      "",
      "[Added Lines]",
      "628:     char buf[JSI_MAX_NUMBER_STRING], *str;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "943: }",
      "945: static void jsiLNGetMatches(const char *str, linenoiseCompletions *lc) {",
      "947:     const char *cp, *fnam = \"Info.completions\";",
      "948:     int i = 0, len;",
      "949:     int rc, isfile = 0, start = 0, end = Jsi_Strlen(str);",
      "",
      "[Removed Lines]",
      "946:     char buf[1000], pre[1000], hpre[6] = {};",
      "",
      "[Added Lines]",
      "946:     char buf[JSI_BUFSIZ], pre[JSI_BUFSIZ], hpre[6] = {};",
      "",
      "---------------"
    ],
    "src/jsiValue.c||src/jsiValue.c": [
      "File: src/jsiValue.c -> src/jsiValue.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "401:     assert(args->vt == JSI_VT_OBJECT);",
      "402:     if (obj->isarrlist && obj->arr)",
      "403:         return ((index < 0 || (uint)index >= obj->arrCnt) ? NULL : obj->arr[index]);",
      "405:     Jsi_NumberItoA10(index, unibuf, sizeof(unibuf));",
      "406:     v = Jsi_TreeObjGetValue(args->d.obj, unibuf, 0);",
      "407:     return v;",
      "",
      "[Removed Lines]",
      "404:     char unibuf[100];",
      "",
      "[Added Lines]",
      "404:     char unibuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "531:     if (!v)",
      "532:         goto done;",
      "533:     if (lenPtr) *lenPtr = 0;",
      "535:     switch(v->vt) {",
      "536:         case JSI_VT_STRING:",
      "537:             ntxt = v->d.s.str;",
      "",
      "[Removed Lines]",
      "534:     char unibuf[200];",
      "",
      "[Added Lines]",
      "534:     char unibuf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1182:             if (Jsi_ValueIsString(interp, key)) {",
      "1183:                 char *kstr = Jsi_ValueString(interp, key, NULL);",
      "1184:                 if (!Jsi_Strcmp(kstr,\"call\") || !Jsi_Strcmp(kstr,\"apply\") || !Jsi_Strcmp(kstr,\"bind\")) {",
      "1186:                     snprintf(fbuf, sizeof(fbuf), \"Function.%s\", kstr);",
      "1187:                     Jsi_Value *vv = Jsi_NameLookup(interp, fbuf);",
      "1188:                     if (vv)",
      "",
      "[Removed Lines]",
      "1185:                     char fbuf[100];",
      "",
      "[Added Lines]",
      "1185:                     char fbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1379:         }",
      "1380:         return JSI_ERROR;",
      "1381:     }",
      "1383:     Jsi_NumberItoA10(key, unibuf, sizeof(unibuf));",
      "1384:     Jsi_ObjInsert(interp, obj, unibuf, val, flags);",
      "1385:     return JSI_OK;",
      "",
      "[Removed Lines]",
      "1382:     char unibuf[100];",
      "",
      "[Added Lines]",
      "1382:     char unibuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiWebSocket.c||src/jsiWebSocket.c": [
      "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "208:     Jsi_DString recvBuf; // To buffer recv when recvJSON is true.",
      "209:     Jsi_Value *onClose, *onFilter, *onRecv, *onUpload, *onGet, *onUnknown, *rootdir, *headers;",
      "210:     char *lastData;",
      "212: #if (LWS_LIBRARY_VERSION_MAJOR>1)",
      "213:     char filename[PATH_MAX];",
      "214:     long file_length;",
      "",
      "[Removed Lines]",
      "211:     char key[100]; // Lookup key.",
      "",
      "[Added Lines]",
      "211:     char key[JSI_MAX_NUMBER_STRING]; // Lookup key.",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "569: jsi_wsGetHeaders(jsi_wsPss *pss, struct lws *wsi, Jsi_DString* dStr, int lens[], int hmax)",
      "570: {",
      "571:     int n = 0, i = 0, nlen;",
      "573:     const char *cp;",
      "574:     while ((cp = (char*)lws_token_to_string((enum lws_token_indexes)n))) {",
      "575:         int len = lws_hdr_copy(wsi, buf, sizeof(buf), ( enum lws_token_indexes)n);",
      "",
      "[Removed Lines]",
      "572:     char buf[1000];",
      "",
      "[Added Lines]",
      "572:     char buf[JSI_BUFSIZ];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1344:     Jsi_DSFree(&sStr);",
      "1345:     if (cmdPtr->debug>1)",
      "1346:         fprintf(stderr, \"FILE: %s in %s | %s\\n\", buf, cmdPtr->curRoot, Jsi_ValueString(interp, cmdPtr->rootdir, NULL));",
      "1348:     isJsiWeb = (cpde && cmdPtr->jsiFnPattern && Jsi_GlobMatch(cmdPtr->jsiFnPattern, cpde+1, 0));",
      "1349:     bool isgzip = 0;",
      "1350:     if (!ext || !ext[1])",
      "",
      "[Removed Lines]",
      "1347:     char extBuf[100], *cpde = Jsi_Strrchr(buf, '/');",
      "",
      "[Added Lines]",
      "1347:     char extBuf[JSI_BUFSIZ], *cpde = Jsi_Strrchr(buf, '/');",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1836:         if (cmdPtr->post) {",
      "1837:             unsigned char **p = (unsigned char **)in, *end = (*p) + len;",
      "1838:             int n = 0;",
      "1840:             Jsi_ValueString(interp, cmdPtr->post, &n);",
      "1841:             snprintf(buf, sizeof(buf), \"%d\", n);",
      "",
      "[Removed Lines]",
      "1839:             char buf[100];",
      "",
      "[Added Lines]",
      "1839:             char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2228:     case LWS_CALLBACK_CLIENT_ESTABLISHED:",
      "2229:     case LWS_CALLBACK_ESTABLISHED:",
      "2230:         if (cmdPtr->bufferPwr2>0) {",
      "2232:             snprintf(nbuf, sizeof(nbuf), \"%d\", cmdPtr->bufferPwr2);",
      "2233:             lws_set_extension_option(wsi, \"permessage-deflate\", \"rx_buf_size\", nbuf);",
      "2234:             lws_set_extension_option(wsi, \"permessage-deflate\", \"tx_buf_size\", nbuf);",
      "",
      "[Removed Lines]",
      "2231:             char nbuf[100];",
      "",
      "[Added Lines]",
      "2231:             char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2870:     const char *verStr = NULL;",
      "2871:     verStr = lws_get_library_version();",
      "2872:     if (verStr) {",
      "2874:         snprintf(buf, sizeof(buf), \"%s\", verStr);",
      "2875:         cp = Jsi_Strchr(buf, ' ');",
      "2876:         if (cp) *cp = 0;",
      "",
      "[Removed Lines]",
      "2873:         char buf[100], *cp;",
      "",
      "[Added Lines]",
      "2873:         char buf[JSI_MAX_NUMBER_STRING], *cp;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5e0f7fb35c0606f7689bd61d5836b0e266246cfc",
      "candidate_info": {
        "commit_hash": "5e0f7fb35c0606f7689bd61d5836b0e266246cfc",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/5e0f7fb35c0606f7689bd61d5836b0e266246cfc",
        "files": [
          "lib/web/jsi.js",
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiWebSocket.c",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.2\" Add \"Info.locals()\" to return all local funcs/vars in a function.\n\nFossilOrigin-Name: 85d04564da49c7f738ce9dac40f819a21bf4dea18459c8a4d012af3c2f8c9575",
        "before_after_code_files": [
          "lib/web/jsi.js||lib/web/jsi.js",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiWebSocket.c||src/jsiWebSocket.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiWebSocket.c||src/jsiWebSocket.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/web/jsi.js||lib/web/jsi.js": [
          "File: lib/web/jsi.js -> lib/web/jsi.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "688:             if (pat === match)",
          "689:                 return;",
          "690:             if (!partial)",
          "692:             var ss = match.substr(1,match.length-2).split(','), sl = {};",
          "693:             for (i=0; i<ss.length; i++) {",
          "694:                 var st = ss[i].split(':');",
          "",
          "[Removed Lines]",
          "691:                 throw('invalid obj: '+pat+' != '+match);",
          "",
          "[Added Lines]",
          "691:                 throw('matchOjb failed: expected \"'+pat+'\" not \"'+match+'\"');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "696:             }",
          "697:             for (i in msg) {",
          "698:                 if (sl[i] && gettype(msg[i]) === sl[i]) continue;",
          "700:             }",
          "701:         }",
          "",
          "[Removed Lines]",
          "699:                 throw('invalid obj: '+pat+' != '+match);",
          "",
          "[Added Lines]",
          "699:                 throw('matchOjb failed: expected \"'+pat+'\" not \"'+match+'\"');",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 1",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 2",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3420:     return rc;",
          "3421: }",
          "3423: static Jsi_RC InfoCompletionsCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "3424:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "3425: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3423: static Jsi_RC InfoLocalsCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "3424:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "3425: {",
          "3426:     if (!interp->framePtr->funcName)",
          "3427:         return Jsi_LogError(\"Not in function\");",
          "3428:     Jsi_Value *arg = Jsi_ValueArrayIndex(interp, args, 0);",
          "3429:     bool varsOnly = 0;",
          "3430:     if (arg)",
          "3431:         Jsi_ValueGetBoolean(interp, arg, &varsOnly);",
          "3432:     Jsi_ValueMakeObject(interp, ret, NULL);",
          "3433:     Jsi_Value *cs = interp->framePtr->incsc;",
          "3434:     Jsi_Obj *nobj = (*ret)->d.obj;",
          "3435:     Jsi_TreeEntry* tPtr;",
          "3436:     Jsi_TreeSearch search;",
          "3437:     for (tPtr = Jsi_TreeSearchFirst(cs->d.obj->tree, &search, 0, NULL);",
          "3438:         tPtr; tPtr = Jsi_TreeSearchNext(&search)) {",
          "3439:         Jsi_Value *v = (Jsi_Value*)Jsi_TreeValueGet(tPtr);",
          "3440:         if (v==NULL) continue;",
          "3441:         if (Jsi_ValueIsFunction(interp, v)) {",
          "3442:             if (varsOnly) continue;",
          "3443:         } else {",
          "3444:             if (arg && !varsOnly) continue;",
          "3445:         }",
          "3447:         const char* key = (char*)Jsi_TreeKeyGet(tPtr);",
          "3448:         Jsi_ObjInsert(interp, nobj, key, v, 0);",
          "3449:     }",
          "3450:     Jsi_TreeSearchDone(&search);",
          "3452:     return JSI_OK;",
          "3453: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3886: mismatch:",
          "3887:             ok = 0;",
          "3888:             if (interp->asserts && !noerror)",
          "3890:             else",
          "3892:         }",
          "3894:     }",
          "",
          "[Removed Lines]",
          "3889:                 rc = Jsi_LogError(\"mismatch: '%s' != '%s'\", cp, sp);",
          "3891:                 Jsi_LogWarn(\"mismatch: '%s' != '%s'\", cp, sp);",
          "",
          "[Added Lines]",
          "3921:                 rc = Jsi_LogError(\"matchobj failed: expected '%s' not '%s'\", cp, sp);",
          "3923:                 Jsi_LogWarn(\"matchobj failed: expected '%s' not '%s'\", cp, sp);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4728:     { \"execZip\",    InfoExecZipCmd,     0,  0, \"\", .help=\"If executing a .zip file, return file name\", .retType=(uint)JSI_TT_STRING|JSI_TT_VOID },",
          "4729:     { \"files\",      InfoFilesCmd,       0,  0, \"\", .help=\"Return list of all sourced files\", .retType=(uint)JSI_TT_ARRAY },",
          "4730:     { \"funcs\",      InfoFuncsCmd,       0,  1, \"string|regexp|object=void\", .help=\"Return details or list of matching functions\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_OBJECT },",
          "4731:     { \"interp\",     jsi_InterpInfo,     0,  1, \"interp:userobj=void\", .help=\"Return info on given or current interp\", .retType=(uint)JSI_TT_OBJECT },",
          "4732:     { \"isMain\",     InfoIsMainCmd,      0,  0, \"\", .help=\"Return true if current script was the main script invoked from command-line\", .retType=(uint)JSI_TT_BOOLEAN },",
          "4733:     { \"keywords\",   InfoKeywordsCmd,    0,  2, \"isSql=false, name:string=void\", .help=\"Return/lookup reserved keyword\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_BOOLEAN },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4763:     { \"locals\",     InfoLocalsCmd,      0,  1, \"varsOnly:boolean=void\", .help=\"Return functions/vars inside local function\", .retType=(uint)JSI_TT_OBJECT },",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "416:         pss->cnt = cmdPtr->idx++;",
          "417:         pss->wid = sid;",
          "418:         pss->sfd = sfd;",
          "420:         pss->udata = Jsi_ValueNewObj(cmdPtr->interp, NULL);",
          "421:         Jsi_IncrRefCount(cmdPtr->interp, pss->udata);",
          "",
          "[Removed Lines]",
          "419:         snprintf(pss->key, sizeof(pss->key), \"%d%p%d\", sid, pss, (int)cmdPtr->startTime);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1008:             Jsi_DSSetLength(&lStr, llen-2);",
          "1009:             cp += 9;",
          "1010:             llen -= 9;",
          "1012:                 Jsi_DSPrintf(dStr, \"'%s'\", pss->key);",
          "1014:                 Jsi_Value *val = NULL;",
          "1015:                 if (!cmdPtr->udata) {",
          "1016:                     val = Jsi_ValueObjLookup(interp, cmdPtr->udata, cp, 0);",
          "",
          "[Removed Lines]",
          "1011:             if (!Jsi_Strcmp(cp, \"#\"))",
          "1013:             else {",
          "",
          "[Added Lines]",
          "1010:             if (!Jsi_Strcmp(cp, \"#\")) {",
          "1011:                 if (!pss->key[0])",
          "1012:                     snprintf(pss->key, sizeof(pss->key), \"%d%p%d\", pss->wid, pss, (int)cmdPtr->startTime);",
          "1014:             } else {",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "140: Info.prototype.isMain = function():boolean {};",
          "141: Info.prototype.keywords = function(isSql=false, name:string=void):boolean|array {};",
          "142: Info.prototype.level = function(level:number=void):number|array|object {};",
          "143: Info.prototype.lookup = function(name:string):any {};",
          "144: Info.prototype.methods = function(val:string|regexp):array|object {};",
          "145: Info.prototype.named = function(name:string=void):array|userobj {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143: Info.prototype.locals = function(varsOnly:boolean=void):object {};",
          "",
          "---------------"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "552: <tr><td>level</td><td>level(level:number=void):number|array|object </td><td>Return current level or details of a call-stack frame. With no arg, returns the number of the current stack frame level.",
          "553: Otherwise returns details on the specified level.",
          "554: The topmost level is 1, and 0 is the current level, and a negative level translates as relative to the current level.</td></tr>",
          "555: <tr><td>lookup</td><td>lookup(name:string) </td><td>Given string name, lookup and return value, eg: function.</td></tr>",
          "556: <tr><td>methods</td><td>methods(val:string|regexp):array|object </td><td>Return functions and commands.</td></tr>",
          "557: <tr><td>named</td><td>named(name:string=void):array|userobj </td><td>Returns command names for builtin Objects, eg: 'File', 'Interp', sub-Object names, or the named object.</td></tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "555: <tr><td>locals</td><td>locals(varsOnly:boolean=void):object </td><td>Return functions/vars inside local function.</td></tr>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1723: <tr><td>clientName</td><td><i>STRKEY</i></td><td>Client hostname.</td><td><i>readOnly</i></td></tr>",
          "1724: <tr><td>echo</td><td><i>BOOL</i></td><td>LogInfo outputs all websock Send/Recv messages.</td><td><i></i></td></tr>",
          "1725: <tr><td>headers</td><td><i>ARRAY</i></td><td>Headers to send to browser on connection: name/value pairs.</td><td><i></i></td></tr>",
          "1727: <tr><td>onClose</td><td><i>FUNC</i></td><td>Function to call when the websocket connection closes. @function(ws:userobj|null, id:number)</td><td><i></i></td></tr>",
          "1728: <tr><td>onGet</td><td><i>FUNC</i></td><td>Function to call to server handle http-get. @function(ws:userobj, id:number, url:string, query:array)</td><td><i></i></td></tr>",
          "1729: <tr><td>onUnknown</td><td><i>FUNC</i></td><td>Function to call to server out content when no file exists. @function(ws:userobj, id:number, url:string, args:array)</td><td><i></i></td></tr>",
          "",
          "[Removed Lines]",
          "1726: <tr><td>isWebsock</td><td><i>BOOL</i></td><td>Socket has been upgraded to a websocket connection.</td><td><i></i></td></tr>",
          "",
          "[Added Lines]",
          "1727: <tr><td>isWebsock</td><td><i>BOOL</i></td><td>Is a websocket connection.</td><td><i></i></td></tr>",
          "1728: <tr><td>key</td><td><i>STRBUF</i></td><td>String key lookup in ids command for SSI echo ${#}.</td><td><i>readOnly</i></td></tr>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1744: <table border=\"1\" class=\"optstbl table\">",
          "1745: <tr><th>Option</th> <th>Type</th> <th>Description</th><th>Flags</th></tr>",
          "1746: <tr><td>connectCnt</td><td><i>INT</i></td><td>Number of active connections.</td><td><i>readOnly</i></td></tr>",
          "1747: <tr><td>eventCnt</td><td><i>INT</i></td><td>Number of events of any type.</td><td><i></i></td></tr>",
          "1748: <tr><td>eventLast</td><td><i>TIME_T</i></td><td>Time of last event of any type.</td><td><i></i></td></tr>",
          "1749: <tr><td>httpCnt</td><td><i>INT</i></td><td>Number of http reqs.</td><td><i></i></td></tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1749: <tr><td>createTime</td><td><i>TIME_T</i></td><td>Time created.</td><td><i></i></td></tr>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4d93039cb3e592ddf8c49fa8279ae8a23da64743",
      "candidate_info": {
        "commit_hash": "4d93039cb3e592ddf8c49fa8279ae8a23da64743",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/4d93039cb3e592ddf8c49fa8279ae8a23da64743",
        "files": [
          "c-demos/cdata/Makefile",
          "c-demos/cdata/VarTest.jsc",
          "c-demos/cdata/Vimy.jsc",
          "c-demos/cdata/cdatatest.jsi",
          "c-demos/cdata/ext_test.jsi",
          "c-demos/cdata/new/Bee.jsi",
          "c-demos/cdata/vimytest.jsi",
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiCData.c",
          "src/jsiObj.c",
          "src/jsiProto.c",
          "src/jsiStubs.h",
          "src/jsiValue.c",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.1.3\": remove CData JS interface in favour of setters/getters\n\nFossilOrigin-Name: f7ae66de7197cd73af2b0336d96a83ee9bf84bbdc4b5244af2c68f2d8700fe7e",
        "before_after_code_files": [
          "c-demos/cdata/VarTest.jsc||c-demos/cdata/VarTest.jsc",
          "c-demos/cdata/Vimy.jsc||c-demos/cdata/Vimy.jsc",
          "c-demos/cdata/cdatatest.jsi||c-demos/cdata/cdatatest.jsi",
          "c-demos/cdata/ext_test.jsi||c-demos/cdata/ext_test.jsi",
          "c-demos/cdata/new/Bee.jsi||c-demos/cdata/new/Bee.jsi",
          "c-demos/cdata/vimytest.jsi||c-demos/cdata/vimytest.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiCData.c||src/jsiCData.c",
          "src/jsiObj.c||src/jsiObj.c",
          "src/jsiProto.c||src/jsiProto.c",
          "src/jsiStubs.h||src/jsiStubs.h",
          "src/jsiValue.c||src/jsiValue.c",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiValue.c||src/jsiValue.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiValue.c||src/jsiValue.c"
          ]
        }
      },
      "candidate_diff": {
        "c-demos/cdata/VarTest.jsc||c-demos/cdata/VarTest.jsc": [
          "File: c-demos/cdata/VarTest.jsc -> c-demos/cdata/VarTest.jsc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "c-demos/cdata/Vimy.jsc||c-demos/cdata/Vimy.jsc": [
          "File: c-demos/cdata/Vimy.jsc -> c-demos/cdata/Vimy.jsc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "c-demos/cdata/cdatatest.jsi||c-demos/cdata/cdatatest.jsi": [
          "File: c-demos/cdata/cdatatest.jsi -> c-demos/cdata/cdatatest.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "c-demos/cdata/ext_test.jsi||c-demos/cdata/ext_test.jsi": [
          "File: c-demos/cdata/ext_test.jsi -> c-demos/cdata/ext_test.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "111: c.setSpeed('max', 3) ==> accel max 3 times",
          "112: c.fix('brakes', {Max:1, Cnt:2}) ==> undefined",
          "113: c.conf() ==> { callback:null, gear:3, maxSpeed:120, shiftCnt:2 }",
          "123: =!EXPECTEND!=",
          "",
          "[Removed Lines]",
          "114: Car_fix_Data.conf() ==> { arrSize:0, flags:0, help:\"\", keyName:null, keyType:\"number\", mapType:\"none\", maxSize:0, name:\"Car_fix_Data\", noAuto:false, structName:\"Car_fix\", user:0, varParam:\"\" }",
          "115: Car_fix_Data.info() ==> { label:\"\", spec:[ { cName:\"double\", help:\"\", initOnly:false, name:\"Max\", noCase:false, readOnly:false, required:false, size:8, type:\"DOUBLE\" }, { cName:\"int\", help:\"\", initOnly:false, name:\"Cnt\", noCase:false, readOnly:false, required:false, size:4, type:\"INT\" } ], struct:\"Car_fix\" }",
          "116: Car_fix_Data.get() ==> { Cnt:0, Max:0 }",
          "117: Car_fix_Data.get(null) ==> { Cnt:0, Max:0 }",
          "118: Car_fix_Data.set(null,{Cnt:3}) ==> undefined",
          "119: Car_fix_Data.incr(null,'Cnt') ==> 4",
          "120: Car_fix_Data.incr(null,'Max') ==> 1",
          "121: Car_fix_Data.incr(null,'Max', 3.3) ==> 4.3",
          "122: Car_Data.get() ==> { activeCnt:0, loaded:true, newCnt:1 }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "c-demos/cdata/new/Bee.jsi||c-demos/cdata/new/Bee.jsi": [
          "File: c-demos/cdata/new/Bee.jsi -> c-demos/cdata/new/Bee.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:     return load('Bee.so');",
          "6: CEnum('BeeType', 'Drone, Worker, Queen');",
          "7: CStruct('Bee', ` int max; int buzzCnt; int stingCnt; int pollinateCnt; BeeType type; STRING flower; `);",
          "10: let Bee = { // Extension to create Bee commands.",
          "",
          "[Removed Lines]",
          "8: var Bee_Data = new CData('Bee');",
          "",
          "[Added Lines]",
          "10: var b = new CData('Bee'), Bee_Data = b;",
          "12: b.buzzCnt += b.stingCnt*2;",
          "",
          "---------------"
        ],
        "c-demos/cdata/vimytest.jsi||c-demos/cdata/vimytest.jsi": [
          "File: c-demos/cdata/vimytest.jsi -> c-demos/cdata/vimytest.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   1",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 2",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 3",
          "",
          "---------------"
        ],
        "src/jsiCData.c||src/jsiCData.c": [
          "File: src/jsiCData.c -> src/jsiCData.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: } CDataObj;",
          "42: static Jsi_StructSpec*  jsi_csStructGet(Jsi_Interp *interp, const char *name);",
          "47: static Jsi_RC     jsi_csStructInit(Jsi_StructSpec* s, uchar* data);",
          "50: static Jsi_RC jsi_csBitGetSet(Jsi_Interp *interp, void *vrec, Jsi_Wide* valPtr, Jsi_OptionSpec *spec, int idx, bool isSet);",
          "56: static Jsi_OptionTypedef *jsi_csGetTypeSpec(void* p) { Jsi_OptionTypedef *s = (typeof(s))p; SIGASSERT(s, TYPEDEF); return s; }",
          "66: Jsi_HashEntry *jsi_csfindInHash(Jsi_Interp *interp, Jsi_Hash * tbl, const char *name)",
          "",
          "[Removed Lines]",
          "43: static Jsi_StructSpec*   jsi_csFieldGet(Jsi_Interp *interp, const char *name, Jsi_StructSpec* sl);",
          "45: static Jsi_EnumSpec*    jsi_csEnumGet(Jsi_Interp *interp, const char *name);",
          "46: static Jsi_EnumSpec*    jsi_csEnumGetItem(Jsi_Interp *interp, const char *name, Jsi_EnumSpec* sf);",
          "48: static Jsi_RC CDataOptionsConf(Jsi_Interp *interp, Jsi_OptionSpec *specs,  Jsi_Value *args,",
          "49:     void *rec, Jsi_Value **ret, int flags, int skipArgs);",
          "53: static Jsi_StructSpec *jsi_csGetStructSpec(void* p) { Jsi_StructSpec *s = (typeof(s))p; SIGASSERT(s, OPTS_STRUCT); return s; }",
          "54: static Jsi_FieldSpec *jsi_csGetFieldSpec(void* p) { Jsi_FieldSpec *s = (typeof(s))p; SIGASSERT(s, OPTS_FIELD); return s; }",
          "58: static Jsi_FieldSpec*  jsi_csStructFields(Jsi_Interp *interp, const char *name) {",
          "59:     Jsi_StructSpec* sp = jsi_csStructGet(interp, name);",
          "60:     if (!sp)",
          "61:         return NULL;",
          "62:     return jsi_csGetFieldSpec(sp->extData);",
          "63: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "244:     }",
          "245: }",
          "293: void jsi_csInitEnum(Jsi_Interp *interp)",
          "",
          "[Removed Lines]",
          "247: static int jsi_NumWideBytes(Jsi_Wide val) {",
          "248:     if (val < 0x10000)",
          "249:         return (val < 0x100 ? 1 : 2);",
          "250:     return(val < 0x100000000L ? 4 : 8);",
          "251: }",
          "253: static Jsi_RC jsi_csSetupEnum(Jsi_Interp *interp, Jsi_EnumSpec *sl, Jsi_FieldSpec *sf, Jsi_OptionTypedef* st) {",
          "254:     bool isNew;",
          "255:     int cnt = 0;",
          "256:     if (Jsi_HashEntryFind(interp->CTypeHash, sl->name))",
          "257:         return Jsi_LogError(\"enum is c-type: %s\", sl->name);",
          "258:     Jsi_HashEntry *entry = Jsi_HashEntryNew(interp->EnumHash, sl->name, &isNew);",
          "259:     if (!isNew)",
          "260:         return Jsi_LogError(\"duplicate enum: %s\", sl->name);",
          "261:     Jsi_HashValueSet(entry, sl);",
          "263:     sl->extData = (uchar*)sf;",
          "264:     Jsi_Wide maxVal = 0, aval;",
          "265:     while (sf && sf->id != JSI_OPTION_END) {",
          "266:         sf->idx = cnt;",
          "267:         Jsi_HashSet(interp->EnumItemHash, sf->name, sf);",
          "268:         sf->extData = (uchar*)sl;",
          "269:         aval =  sf->value;",
          "270:         if (aval<0) aval = -aval;",
          "271:         if (aval>maxVal) maxVal = aval;",
          "272:         sf++, cnt++;",
          "273:     }",
          "274:     Jsi_HashSet(interp->EnumHash, sl->name, sl);",
          "275:     sl->idx = cnt;",
          "276:     if (!sl->size)",
          "277:         sl->size = cnt;",
          "278:     if (!st) {",
          "279:         st = (typeof(st))Jsi_Calloc(1, sizeof(*st));",
          "280:         SIGINIT(st, TYPEDEF);",
          "281:     }",
          "282:     st->cName = sl->name;",
          "283:     st->idName = \"CUSTOM\";",
          "284:     st->id = JSI_OPTION_CUSTOM;",
          "285:     st->size = jsi_NumWideBytes(aval);",
          "286:     st->flags = jsi_CTYP_DYN_MEMORY|jsi_CTYP_ENUM;",
          "287:     st->extData = (uchar*)sl;",
          "288:     Jsi_HashSet(interp->CTypeHash, st->cName, st);",
          "289:     return JSI_OK;",
          "290: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "328:     return (Jsi_StructSpec *)Jsi_HashGet(interp->StructHash, name, 0);",
          "329: }",
          "382: Jsi_StructSpec *jsi_csStructGet(Jsi_Interp *interp, const char *name)",
          "383: {",
          "384:     if (!name) return NULL;",
          "",
          "[Removed Lines]",
          "332: static Jsi_Value *jsi_csFmtKeyCmd(Jsi_MapEntry* hPtr, Jsi_MapOpts *opts, int flags)",
          "333: {",
          "334:     void *rec = (opts->mapType==JSI_MAP_HASH ? Jsi_HashKeyGet((Jsi_HashEntry*)hPtr): Jsi_TreeKeyGet((Jsi_TreeEntry*)hPtr));",
          "335:     if (!rec) return NULL;",
          "336:     CDataObj *cd = (typeof(cd))opts->user;",
          "337:     assert(cd);",
          "338:     Jsi_Interp *interp = cd->interp;",
          "339:     if (!cd->slKey || !cd->slKey)",
          "340:         return NULL;",
          "341:     Jsi_Value *v = Jsi_ValueNew1(interp);",
          "342:     if (Jsi_OptionsConf(interp, (Jsi_OptionSpec*)cd->keysf, rec, NULL, &v, flags) == JSI_OK)",
          "343:         return v;",
          "344:     Jsi_DecrRefCount(interp, v);",
          "345:     return NULL;",
          "346: }",
          "348: static Jsi_RC jsi_csCDataNew(Jsi_Interp *interp, const char *name, const char *structName,",
          "349:     const char *help, const char *varParm, Jsi_VarSpec *data) {",
          "350:     Jsi_DString dStr;",
          "351:     Jsi_DSInit(&dStr);",
          "352:     Jsi_DSPrintf(&dStr, \"var %s = new CData({name:\\\"%s\\\", structName:\\\"%s\\\"\", name, name, structName);",
          "353:     if (help)",
          "354:         Jsi_DSPrintf(&dStr, \", help:\\\"%s\\\"\", help);",
          "355:     if (varParm)",
          "356:         Jsi_DSPrintf(&dStr, \", varParam:\\\"%s\\\"\", varParm);",
          "357:     Jsi_DSPrintf(&dStr, \"});\");",
          "358:     interp->cdataNewVal = data;",
          "359:     Jsi_RC rc = Jsi_EvalString(interp, Jsi_DSValue(&dStr), 0);",
          "360:     interp->cdataNewVal = NULL;",
          "361:     Jsi_DSFree(&dStr);",
          "362:     return rc;",
          "363: }",
          "365: Jsi_RC jsi_csInitVarDefs(Jsi_Interp *interp)",
          "366: {",
          "367:     Jsi_VarSpec *vd = interp->statics->vars;",
          "368:     int i;",
          "369:     for (i=0; vd[i].name; i++) {",
          "370:         SIGASSERT(vd+i, OPTS_VARDEF);",
          "371:         const char *name = vd[i].name;",
          "372:         const char *structName = vd[i].info;",
          "373:         const char *help = vd[i].help;",
          "374:         const char *varParm = (const char*)vd[i].userData;",
          "376:         if (JSI_OK != jsi_csCDataNew(interp, name, structName, help, varParm, vd+i))",
          "377:             return JSI_ERROR;",
          "378:     }",
          "379:     return JSI_OK;",
          "380: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "402: Jsi_EnumSpec *jsi_csGetEnum(Jsi_Interp *interp, const char *name) {",
          "403:     return (Jsi_EnumSpec *)Jsi_HashGet(interp->EnumHash, name, 0);",
          "404: }",
          "",
          "[Removed Lines]",
          "407: Jsi_EnumSpec *jsi_csEnumGet(Jsi_Interp *interp, const char *name)",
          "408: {",
          "409:     Jsi_EnumSpec *sl, *spec = jsi_csGetEnum(interp, name);",
          "410:     if (spec) return spec;",
          "412:     Jsi_CData_Static *CData_Strs = interp->statics;",
          "413:     while (CData_Strs) {",
          "414:         sl = CData_Strs->enums;",
          "415:         while (sl->name) {",
          "416:             if (!Jsi_Strcmp(name, sl->name))",
          "417:                 return sl;",
          "418:             sl++;",
          "419:         }",
          "420:         CData_Strs = CData_Strs->nextPtr;",
          "421:     }",
          "422:     return NULL;",
          "423: }",
          "428: Jsi_FieldSpec *jsi_csFieldGet(Jsi_Interp *interp, const char *name, Jsi_StructSpec * sl)",
          "429: {",
          "430:     SIGASSERT(sl, OPTS_STRUCT);",
          "431:     Jsi_FieldSpec *sf, *ff = 0, *f = jsi_csGetFieldSpec(sl->extData);",
          "432:     int cnt = 0;",
          "433:     uint len = Jsi_Strlen(name);",
          "434:     sf = f;",
          "435:     SIGASSERT(sf, OPTS_FIELD);",
          "436:     while (sf->id != JSI_OPTION_END) {",
          "437:         if (!Jsi_Strncmp(name, sf->name, len)) {",
          "438:             if (!sf->name[len])",
          "439:                 return sf;",
          "440:             ff = sf;",
          "441:             cnt++;",
          "442:         }",
          "443:         sf++;",
          "444:     }",
          "445:     if (cnt == 1)",
          "446:         return ff;",
          "447:     return 0;",
          "448: }",
          "451: Jsi_EnumSpec *jsi_csEnumGetItem(Jsi_Interp *interp, const char *name, Jsi_EnumSpec * el)",
          "452: {",
          "453:     SIGASSERT(el, OPTS_ENUM);",
          "454:     int cnt = 0;",
          "455:     uint len = Jsi_Strlen(name);",
          "456:     if (!el->extData)",
          "457:         return 0;",
          "458:     Jsi_FieldSpec *ff = NULL, *sf = jsi_csGetFieldSpec(el->extData);",
          "459:     while (sf->id != JSI_OPTION_END) {",
          "460:         if (!Jsi_Strncmp(name, sf->name, len)) {",
          "461:             if (!sf->name[len])",
          "462:                 return sf;",
          "463:             ff = sf;",
          "464:             cnt++;",
          "465:         }",
          "466:         sf++;",
          "467:     }",
          "468:     if (cnt == 1)",
          "469:         return ff;",
          "470:     return 0;",
          "471: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "494:     return JSI_OK;",
          "495: }",
          "899: static Jsi_RC jsi_csValueToFieldType(Jsi_Interp *interp, Jsi_OptionSpec* spec, Jsi_Value *inValue, const char *inStr, void *record, Jsi_Wide flags)",
          "900: {",
          "",
          "[Removed Lines]",
          "497: static Jsi_RC CDataEnumNamesCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "498:                                Jsi_Value **ret, Jsi_Func *funcPtr)",
          "499: {",
          "501:     int argc = Jsi_ValueGetLength(interp, args);",
          "503:     if (argc == 0)",
          "504:         return Jsi_HashKeysDump(interp, interp->EnumHash, ret, 0);",
          "505:     char *arg1 = Jsi_ValueString(interp, Jsi_ValueArrayIndex(interp, args, 0), NULL);",
          "506:     Jsi_EnumSpec *s, *sf;",
          "507:     if (arg1 == NULL || !(s = (Jsi_EnumSpec*)Jsi_HashGet(interp->EnumHash, arg1, 0)))",
          "508:         return Jsi_LogError(\"Unknown enum: %s\", arg1);",
          "509:     Jsi_ValueMakeArrayObject(interp, ret, NULL);",
          "510:     sf = (typeof(sf))s->extData;",
          "511:     int m = 0;",
          "512:     while (sf && sf->id != JSI_OPTION_END)",
          "513:     {",
          "514:         Jsi_ValueArraySet(interp, *ret, Jsi_ValueNewBlobString(interp, sf->name), m++);",
          "515:         sf++;",
          "516:     }",
          "517:     return JSI_OK;",
          "518: }",
          "522: static Jsi_OptionSpec EnumOptions[] =",
          "523: {",
          "524:     JSI_OPT(INT64,      Jsi_EnumSpec, flags,  .help=\"Flags for enum\", jsi_IIOF),",
          "525:     JSI_OPT(STRKEY,     Jsi_EnumSpec, help,   .help=\"Description of enum\", jsi_IIOF ),",
          "526:     JSI_OPT(STRKEY,     Jsi_EnumSpec, name,   .help=\"Name of enum\", jsi_IIOF ),",
          "527:     JSI_OPT(UINT,       Jsi_EnumSpec, idx,    .help=\"Number of items in enum\", jsi_IIRO ),",
          "528:     JSI_OPT_END(Jsi_EnumSpec, .help=\"Options for CData enum\")",
          "529: };",
          "531: static Jsi_OptionSpec EnumFieldOptions[] =",
          "532: {",
          "533:     JSI_OPT(INT64,      Jsi_EnumSpec, flags,  .help=\"Flags for item\", jsi_IIOF),",
          "534:     JSI_OPT(STRKEY,     Jsi_EnumSpec, help,   .help=\"Desciption of item\", jsi_IIOF ),",
          "535:     JSI_OPT(STRKEY,     Jsi_EnumSpec, name,   .help=\"Name of item\", jsi_IIOF ),",
          "536:     JSI_OPT(INT64,      Jsi_EnumSpec, value,  .help=\"Value for item\", jsi_IIOF),",
          "537:     JSI_OPT(UINT,       Jsi_EnumSpec, idx,    .help=\"Index of item in enum\", jsi_IIRO ),",
          "538:     JSI_OPT_END(Jsi_EnumSpec, .help=\"Options for CData item\")",
          "539: };",
          "541: static Jsi_RC CDataEnumFieldConfCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "542:                               Jsi_Value **ret, Jsi_Func *funcPtr)",
          "543: {",
          "545:     Jsi_EnumSpec *ei, *sf;",
          "546:     char *arg1 = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "547:     if (!(sf = jsi_csEnumGet(interp, arg1)))",
          "548:         return Jsi_LogError(\"unknown enum item: %s\", arg1);",
          "549:     ei = 0;",
          "550:     char *arg2 = Jsi_ValueArrayIndexToStr(interp, args, 1, NULL);",
          "551:     if (!(ei = jsi_csEnumGetItem(interp, arg2, sf)))",
          "552:         return JSI_OK;",
          "554:     return CDataOptionsConf(interp, EnumFieldOptions, args, ei, ret, 0, 2);",
          "555: }",
          "557: static Jsi_RC CDataEnumConfCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "558:                               Jsi_Value **ret, Jsi_Func *funcPtr)",
          "559: {",
          "561:     Jsi_EnumSpec *sl;",
          "562:     char *arg1 = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "563:     if (!(sl = jsi_csEnumGet(interp, arg1)))",
          "564:         return Jsi_LogError(\"unknown enum: %s\", arg1);",
          "565:     return CDataOptionsConf(interp, EnumOptions, args, sl, ret, 0, 1);",
          "566: }",
          "569: static Jsi_RC CDataEnumUndefineCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "570:                               Jsi_Value **ret, Jsi_Func *funcPtr)",
          "571: {",
          "573:     char *name = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "574:     Jsi_HashEntry *entry = NULL;",
          "575:     Jsi_OptionTypedef *st = NULL;",
          "576:     if (name) {",
          "577:         entry = Jsi_HashEntryFind(interp->EnumHash, name);",
          "578:         st = Jsi_TypeLookup(interp, name);",
          "579:     }",
          "580:     if (!entry || !st)",
          "581:         return Jsi_LogError(\"Unknown enum: %s\", name);",
          "582:     Jsi_EnumSpec *sf, *sl = (typeof(sl))Jsi_HashValueGet(entry);",
          "583:     if (sl->value)",
          "584:         return Jsi_LogError(\"Enum in use\");",
          "585:     Jsi_HashEntryDelete(entry);",
          "586:     sf = (typeof(sf))sl->extData;",
          "587:     while (sf && sf->id != JSI_OPTION_END) {",
          "588:         entry = Jsi_HashEntryFind(interp->EnumItemHash, name);",
          "589:         if (entry)",
          "590:             Jsi_HashEntryDelete(entry);",
          "591:         sf++;",
          "592:     }",
          "593:     entry = Jsi_HashEntryFind(interp->CTypeHash, name);",
          "594:     if (entry)",
          "595:         Jsi_HashEntryDelete(entry);",
          "596:     else",
          "597:         Jsi_Free(st);",
          "598:     return JSI_OK;",
          "599: }",
          "602: static Jsi_RC CDataEnumDefineCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "603:                                 Jsi_Value **ret, Jsi_Func *funcPtr)",
          "604: {",
          "605:     Jsi_RC rc = JSI_OK;",
          "606:     char **argv = NULL, *cmt, *cp;",
          "607:     Jsi_OptionTypedef *st = NULL;",
          "608:     jsi_csInitType(interp);",
          "609:     Jsi_Value *val = Jsi_ValueArrayIndex(interp, args, 0),",
          "611:     int vlen, flen, i, argc;",
          "612:     Jsi_DString fStr = {};",
          "613:     const char **el, *vstr = Jsi_ValueString(interp, val, &vlen),",
          "615:     if (vstr) {",
          "616:         cmt = Jsi_Strstr(fstr, \"//\");",
          "617:         Jsi_DString tStr = {fstr};",
          "618:         fstr=jsi_TrimStr(Jsi_DSValue(&tStr));",
          "619:         Jsi_SplitStr(fstr, &argc, &argv, (cmt?\"\\n\":\",\"), &fStr);",
          "620:         Jsi_DSFree(&tStr);",
          "621:     } else if (!Jsi_ValueIsArray(interp,flds) || (argc=Jsi_ValueGetLength(interp, flds))<1)",
          "622:         return Jsi_LogError(\"arg 2 must be string or non-empty array\");",
          "624:     Jsi_EnumSpec *sl, *sf, recs[argc+1];",
          "625:     memset(recs, 0, sizeof(recs));",
          "626:     sl = recs+argc;",
          "627:     SIGINIT(sl, OPTS_ENUM);",
          "628:     if (vstr) {",
          "629:         sl->name = Jsi_KeyAdd(interp, vstr);",
          "630:     } else if (Jsi_OptionsProcess(interp, EnumOptions, sl, val, 0) < 0) {",
          "631:         rc = JSI_ERROR;",
          "632:         goto bail;",
          "633:     }",
          "634:     if (!Jsi_StrIsAlnum(sl->name)) {",
          "635:         rc = Jsi_LogError(\"invalid enum name: %s\", sl->name);",
          "636:         goto bail;",
          "637:     }",
          "638:     if (jsi_csEnumGet(interp, sl->name)) {",
          "639:         rc = Jsi_LogError(\"enum already exists: %s\", sl->name);",
          "640:         goto bail;",
          "641:     }",
          "642:     for (i = 0; i<argc; i++) {",
          "643:         sf = recs+i;",
          "644:         SIGINIT(sf, OPTS_FIELD);",
          "645:         sf->idx = i;",
          "646:         if (i)",
          "647:             sf->value = recs[i-1].value+1;",
          "648:         if (!argv)",
          "649:             val = Jsi_ValueArrayIndex(interp, flds, i);",
          "650:         else {",
          "651:             if (cmt) {",
          "652:                 cp = Jsi_Strstr(argv[i], \"//\");",
          "653:                 if (cp) {",
          "655:                     cp += 2;",
          "656:                     cp = jsi_TrimStr(cp);",
          "657:                     sf->help = Jsi_KeyAdd(interp, cp);",
          "658:                 }",
          "659:             }",
          "660:             cp = Jsi_Strchr(argv[i], ',');",
          "661:             if (cp) *cp = 0;",
          "662:             cp = Jsi_Strchr(argv[i], '=');",
          "663:             if (cp) {",
          "665:                 cp = jsi_TrimStr(cp);",
          "666:                 if (Jsi_GetWide(interp, cp, &sf->value, 0) != JSI_OK) {",
          "667:                     rc = Jsi_LogError(\"Bad value\");",
          "668:                     goto bail;",
          "669:                 }",
          "670:             }",
          "671:             cp = jsi_TrimStr(argv[i]);",
          "672:             sf->name = Jsi_KeyAdd(interp, cp);",
          "673:             val = NULL;",
          "674:         }",
          "675:         if (val && Jsi_OptionsProcess(interp, EnumFieldOptions, sf, val, 0) < 0) {",
          "676:             rc = JSI_ERROR;",
          "677:             goto bail;",
          "678:         }",
          "679:         if (Jsi_HashGet(interp->EnumItemHash, sf->name, 0)) {",
          "680:             rc = Jsi_LogError(\"duplicate enum item: %s\", sf->name);",
          "681:             goto bail;",
          "682:         }",
          "683:         if (!Jsi_StrIsAlnum(sf->name)) {",
          "684:             rc = Jsi_LogError(\"invalid enum item name: %s\", sf->name);",
          "685:             goto bail;",
          "686:         }",
          "687:     }",
          "688:     st = (typeof(st))Jsi_Calloc(1, sizeof(*st) + sizeof(char*)*(argc+1)+sizeof(recs));",
          "689:     SIGINIT(st, TYPEDEF);",
          "690:     sf = (typeof(sf))((uchar*)(st + 1));",
          "691:     sl = sf+argc;",
          "692:     el = (typeof(el))(sl + 1);",
          "693:     memcpy(sf, recs, sizeof(recs));",
          "694:     for (i = 0; i<argc; i++)",
          "695:         el[i] = sf[i].name;",
          "696:     sl->id = JSI_OPTION_END;",
          "697:     sl->extData = (uchar*)sf;",
          "698:     sl->data = el;",
          "699:     rc = jsi_csSetupEnum(interp, sl, sf, st);",
          "700: bail:",
          "701:     Jsi_DSFree(&fStr);",
          "702:     if (rc != JSI_OK && st)",
          "703:         Jsi_Free(st);",
          "704:     return rc;",
          "705: }",
          "707: static Jsi_RC CDataEnumValueCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "708:                                Jsi_Value **ret, Jsi_Func *funcPtr)",
          "709: {",
          "711:     const char *arg1, *arg2;",
          "712:     Jsi_EnumSpec *ei, *el = 0;",
          "713:     arg1 = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "714:     arg2 = Jsi_ValueArrayIndexToStr(interp, args, 1, NULL);",
          "715:     if (!(el = jsi_csEnumGet(interp, arg1))) {",
          "716:         return JSI_OK;",
          "717:     }",
          "718:     if (!(ei = jsi_csEnumGetItem(interp, arg2, el)))",
          "719:         return JSI_OK;",
          "720:     Jsi_ValueMakeNumber(interp, ret, ei->value);",
          "721:     return JSI_OK;",
          "722: }",
          "726: static Jsi_RC CDataEnumFindCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "727:                                 Jsi_Value **ret, Jsi_Func *funcPtr)",
          "728: {",
          "730:     Jsi_Value *arg2 = Jsi_ValueArrayIndex(interp, args, 1);",
          "731:     char *arg1 = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "732:     Jsi_EnumSpec *ei, *el;",
          "733:     if (!(el = jsi_csEnumGet(interp, arg1)))",
          "734:         return Jsi_LogError(\"Unknown enum: %s\", arg1);",
          "735:     Jsi_Wide wval;",
          "736:     if (Jsi_GetWideFromValue(interp, arg2, &wval) != JSI_OK)",
          "737:         return JSI_ERROR;",
          "739:     ei = (typeof(ei))el->extData;",
          "740:     uint i;",
          "741:     for (i=0; i<el->size; i++) {",
          "742:         if (wval == (Jsi_Wide)ei[i].value) {",
          "743:             Jsi_ValueMakeStringKey(interp, ret, ei[i].name);",
          "744:             return JSI_OK;",
          "745:         }",
          "746:     }",
          "747:     return JSI_OK;",
          "748: }",
          "750: static Jsi_RC CDataEnumGetDfn(Jsi_Interp *interp, Jsi_EnumSpec * sl, Jsi_DString *dsPtr)",
          "751: {",
          "753:     Jsi_EnumSpec *sf;",
          "754:     Jsi_DString eStr = {};",
          "756:     Jsi_DSAppend(dsPtr, \"{ name: \\\"\", sl->name, \"\\\"\", NULL);",
          "757:     if (sl->flags)",
          "758:         Jsi_DSPrintf(dsPtr, \", flags:%\" PRIx64, sl->flags);",
          "759:     if (sl->help && sl->help[0]) {",
          "760:         Jsi_DSAppend(dsPtr, \", help:\", Jsi_JSONQuote(interp, sl->help, -1, &eStr), NULL);",
          "761:         Jsi_DSFree(&eStr);",
          "762:     }",
          "763:     sf = jsi_csGetFieldSpec(sl->extData);",
          "764:     Jsi_DSAppend(dsPtr, \", fields:[\", NULL);",
          "765:     while (sf->id != JSI_OPTION_END) {",
          "766:         Jsi_DSPrintf(dsPtr, \" { name:\\\"%s\\\", value:%#\" PRIx64, sf->name, (int64_t)sf->value);",
          "767:         if (sf->help && sf->help[0]) {",
          "768:             Jsi_DSAppend(dsPtr, \", help:\", Jsi_JSONQuote(interp, sf->help, -1, &eStr), NULL);",
          "769:             Jsi_DSFree(&eStr);",
          "770:         }",
          "771:         Jsi_DSAppend(dsPtr, \"}\", NULL);",
          "772:         sf++;",
          "773:     }",
          "774:     Jsi_DSAppend(dsPtr, \"]}\", NULL);",
          "775:     return JSI_OK;",
          "776: }",
          "778: static Jsi_RC CDataEnumGetCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "779:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "780: {",
          "782:     char *name = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "783:     Jsi_EnumSpec *sl = jsi_csEnumGet(interp, name);",
          "784:     if (!sl)",
          "785:         return JSI_OK;",
          "786:     JSI_DSTRING_VAR(dsPtr, 400);",
          "787:     Jsi_RC rc = CDataEnumGetDfn(interp, sl, dsPtr);",
          "788:     if (JSI_OK == rc)",
          "789:         rc = Jsi_JSONParse(interp, Jsi_DSValue(dsPtr), ret, 0);",
          "790:     Jsi_DSFree(dsPtr);",
          "791:     return rc;",
          "792: }",
          "794: static Jsi_CmdSpec enumCmds[] = {",
          "795:     {\"add\",     CDataEnumDefineCmd,  2, 2, \"options:object|string, fields:array|string\", .help=\"Create a new enum: value of items same as in fieldconf\", .retType=0, .flags=0, .info=0, .opts=EnumOptions},",
          "796:     {\"conf\",    CDataEnumConfCmd,    1, 2, \"enum:string, options:object|string=void\",.help=\"Configure options for enum\", .retType=0, .flags=0, .info=0, .opts=EnumOptions},",
          "797:     {\"fieldconf\",CDataEnumFieldConfCmd,2, 3, \"enum:string, field:string, options:object|string=void\",.help=\"Configure options for fields\", .retType=0, .flags=0, .info=0, .opts=EnumFieldOptions},",
          "798:     {\"find\",    CDataEnumFindCmd,    2, 2, \"enum:string, intValue:number\", .help=\"Find item with given value in enum\", .retType=(uint)JSI_TT_STRING},",
          "799:     {\"get\",     CDataEnumGetCmd,     1, 1, \"enum:string\", .help=\"Return enum definition\", .retType=(uint)JSI_TT_OBJECT},",
          "800:     {\"names\",   CDataEnumNamesCmd,   0, 1, \"enum:string=void\", .help=\"Return name list of all enums, or items within one enum\", .retType=(uint)JSI_TT_ARRAY},",
          "801:     {\"remove\",  CDataEnumUndefineCmd,1, 1, \"enum:string\",.help=\"Remove an enum\", .retType=0, .flags=0, .info=0, .opts=0},",
          "802:     {\"value\",   CDataEnumValueCmd,   2, 2, \"enum:string, item:string\", .help=\"Return value for given enum item\", .retType=(uint)JSI_TT_NUMBER},",
          "803:     { NULL,   0,0,0,0, .help=\"Enum commands. Note: Enum() is a shortcut for Enum.add()\" }",
          "804: };",
          "808: static Jsi_RC CDataStructGetDfn(Jsi_Interp *interp, Jsi_StructSpec * sl, Jsi_DString *dsPtr)",
          "809: {",
          "811:     Jsi_StructSpec *sf;",
          "812:     Jsi_DString eStr = {};",
          "813:     sf = jsi_csGetFieldSpec(sl->extData);",
          "814:     Jsi_DSPrintf(dsPtr, \"{ \\\"name\\\": \\\"%s\\\", \\\"size\\\":%d\", sl->name, sl->size);",
          "815:     if (sl->flags)",
          "816:         Jsi_DSPrintf(dsPtr, \", \\\"flags\\\":0x%\" PRIx64, sl->flags);",
          "817:     if (sl->help && sl->help[0]) {",
          "818:         Jsi_DSAppend(dsPtr, \", \\\"label\\\":\", Jsi_JSONQuote(interp, sl->help, -1, &eStr), NULL);",
          "819:         Jsi_DSFree(&eStr);",
          "820:     }",
          "821:     if (sl->ssig)",
          "822:         Jsi_DSPrintf(dsPtr, \", \\\"sig\\\":0x%x\", sl->ssig);",
          "823:     Jsi_DSAppend(dsPtr, \", \\\"fields\\\":[\", NULL);",
          "824: #define SSIFNV(s) (s?\"\\\"\":\"\"), (s?s:\"null\"), (s?\"\\\"\":\"\")",
          "825:     while (sf->id != JSI_OPTION_END) {",
          "826:         Jsi_DSPrintf(dsPtr, \" { \\\"name\\\":\\\"%s\\\",  \\\"id\\\":%s%s%s, \\\"size\\\":%d, \\\"bitsize\\\":%d,\"",
          "827:             \"\\\"offset\\\":%d, , \\\"bitoffs\\\":%d, \\\"isbit\\\":%d, \\\"label\\\":\",",
          "828:              sf->name, SSIFNV(sf->tname), sf->size, sf->bits,",
          "829:              sf->offset, sf->boffset, sf->flags&JSI_OPT_IS_BITS?1:0 );",
          "830:         if (sf->help && sf->help[0]) {",
          "831:             Jsi_DSAppend(dsPtr, Jsi_JSONQuote(interp, sf->help, -1, &eStr), NULL);",
          "832:             Jsi_DSFree(&eStr);",
          "833:         } else",
          "834:             Jsi_DSAppend(dsPtr,\"\\\"\\\"\", NULL);",
          "835:         Jsi_DSAppend(dsPtr, \"}\", NULL);",
          "836:         sf++;",
          "837:     }",
          "838:     Jsi_DSAppend(dsPtr, \"]}\", NULL);",
          "839:     return JSI_OK;",
          "840: }",
          "843: static Jsi_RC CDataStructGetCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "844:                                 Jsi_Value **ret, Jsi_Func *funcPtr)",
          "845: {",
          "847:     char *arg1 = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "848:     Jsi_StructSpec *sl = jsi_csStructGet(interp, arg1);",
          "850:     if (!sl)",
          "851:         return Jsi_LogError(\"unkown struct: %s\", arg1);",
          "852:     Jsi_DString dStr = {};",
          "853:     Jsi_RC rc = CDataStructGetDfn(interp, sl, &dStr);",
          "854:     if (JSI_OK == rc)",
          "855:         rc = Jsi_JSONParse(interp, Jsi_DSValue(&dStr), ret, 0);",
          "856:     Jsi_DSFree(&dStr);",
          "857:     return rc;",
          "858: }",
          "860: static Jsi_RC CDataStructNamesCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "861:                                  Jsi_Value **ret, Jsi_Func *funcPtr)",
          "862: {",
          "864:     int argc = Jsi_ValueGetLength(interp, args);",
          "866:     if (argc == 0)",
          "867:         return Jsi_HashKeysDump(interp, interp->StructHash, ret, 0);",
          "868:     char *name = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "869:     Jsi_StructSpec *sf, *sl;",
          "870:     if (name == NULL || !(sl = Jsi_CDataStruct(interp, name)))",
          "871:         return Jsi_LogError(\"Unknown struct: %s\", name);",
          "872:     Jsi_ValueMakeArrayObject(interp, ret, NULL);",
          "873:     sf = (typeof(sf))sl->data;",
          "874:     int m = 0;",
          "875:     while (sf && sf->id != JSI_OPTION_END)",
          "876:     {",
          "877:         Jsi_ValueArraySet(interp, *ret, Jsi_ValueNewBlobString(interp, sf->name), m++);",
          "878:         sf++;",
          "879:     }",
          "880:     return JSI_OK;",
          "881: }",
          "883: static Jsi_RC CDataStructSchemaCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "884:     Jsi_Value **ret, Jsi_Func *funcPtr) {",
          "885:     char *arg1 = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "886:     Jsi_StructSpec *sf = jsi_csStructFields(interp, arg1);",
          "888:     if (!sf)",
          "889:         return Jsi_LogError(\"unkown struct: %s\", arg1);;",
          "891:     Jsi_DString dStr = {};",
          "892:     Jsi_OptionsData(interp, (Jsi_OptionSpec*)sf, &dStr, 1);",
          "893:     Jsi_ValueFromDS(interp, &dStr, ret);",
          "894:     Jsi_DSFree(&dStr);",
          "895:     return JSI_OK;",
          "896: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "935: };",
          "1566: static bool jsi_csBitSetGet(int isSet, uchar *tbuf, int bits, Jsi_UWide *valPtr) {",
          "1567:     union bitfield *bms = (union bitfield *)tbuf;",
          "1568:     Jsi_UWide val = *valPtr;",
          "",
          "[Removed Lines]",
          "939: static Jsi_RC jsi_ValueToIniVal(Jsi_Interp *interp, Jsi_OptionSpec* spec, Jsi_Value *inValue, const char *inStr, void *record, Jsi_Wide flags)",
          "940: {",
          "941:     if (inStr)",
          "942:         return JSI_ERROR;",
          "943:     uchar *data = (uchar*)record, *odata;",
          "945:     int idx = (intptr_t)spec->data;",
          "946:     if (idx<=0 || !inValue)",
          "947:         return Jsi_LogError(\"idx/value not set\");",
          "948:     Jsi_OptionSpec *typePtr = spec-idx;",
          "949:     if (typePtr->id != JSI_OPTION_CUSTOM || typePtr->custom != &jsi_OptSwitchFieldType)",
          "950:         return Jsi_LogError(\"Bad field type\");",
          "951:     const Jsi_OptionTypedef **tsp = (typeof(tsp))(data + typePtr->offset), *tsptr = *tsp, *ssp;",
          "952:     SIGASSERT(tsptr, TYPEDEF);",
          "953:     Jsi_FieldSpec *sf = jsi_csGetFieldSpec(data);",
          "954:     Jsi_StructSpec *sl = jsi_csGetStructSpec(sf->extData);",
          "955:     ssp = sl->type;",
          "956:     SIGASSERT(ssp, TYPEDEF);",
          "957:     odata = ssp->extra;",
          "958:     if (!tsptr->sfmt) {",
          "959:         if (tsptr->flags&jsi_CTYP_STRUCT && tsptr->extra) {",
          "960:             if (!Jsi_ValueIsBoolean(interp, inValue)) Jsi_LogWarn(\"init for struct must be boolean\");",
          "961:             if (!Jsi_ValueIsTrue(interp, inValue)) return JSI_OK;",
          "962:             Jsi_StructSpec *tsl = jsi_csGetStructSpec(tsptr->extData);",
          "963:             int i, n = (sf->arrSize?sf->arrSize:1);",
          "964:             for (i=0; i<n; i++)",
          "965:                 memcpy(odata+sf->offset+i*tsl->size, tsptr->extra, tsl->size);",
          "966:             return JSI_OK;",
          "967:         } else if (!(tsptr->flags&jsi_CTYP_ENUM))",
          "968:             return Jsi_LogError(\"init not supported for type: %s\", tsptr->cName);",
          "969:     }",
          "970:     return jsi_SetOption(interp, sf, \"init\", odata, inValue, flags, interp->isSafe);",
          "971: }",
          "974: static Jsi_RC jsi_IniValToValue(Jsi_Interp *interp, Jsi_OptionSpec* spec, Jsi_Value **outValue, Jsi_DString *outStr, void *record, Jsi_Wide flags)",
          "975: {",
          "976:     if (outStr)",
          "977:         return JSI_ERROR;",
          "978:     uchar *data = (uchar*)record, *odata;",
          "979:     int idx = (intptr_t)spec->data;",
          "980:     if (idx<=0 || !outValue)",
          "981:         return Jsi_LogError(\"idx/value not set\");",
          "982:     Jsi_OptionSpec *typePtr = spec-idx;",
          "983:     if (typePtr->id != JSI_OPTION_CUSTOM || typePtr->custom != &jsi_OptSwitchFieldType)",
          "984:         return Jsi_LogError(\"Bad field type\");",
          "985:     const Jsi_OptionTypedef **tsp = (typeof(tsp))(data + typePtr->offset), *tsptr = *tsp, *ssp;",
          "986:     SIGASSERT(tsptr, TYPEDEF);",
          "987:     Jsi_FieldSpec *sf = jsi_csGetFieldSpec(data);",
          "988:     Jsi_StructSpec *sl = jsi_csGetStructSpec(sf->extData);",
          "989:     ssp = sl->type;",
          "990:     SIGASSERT(ssp, TYPEDEF);",
          "991:     odata = ssp->extra;",
          "992:     if (odata && tsptr->sfmt)",
          "993:         return jsi_GetOption(interp, sf, odata, \"init\", outValue, flags);",
          "995:     Jsi_ValueMakeNull(interp, outValue);",
          "996:     return JSI_OK;",
          "1000: }",
          "1002: Jsi_OptionCustom jsi_OptSwitchIniVal = {",
          "1003:     .name=\"inival\", .parseProc=jsi_ValueToIniVal, .formatProc=jsi_IniValToValue",
          "1004: };",
          "1006: static Jsi_OptionSpec StructOptions[] =",
          "1007: {",
          "1008:     JSI_OPT(UINT32, Jsi_StructSpec, crc,     .help=\"Crc for struct\", jsi_IIOF ),",
          "1009:     JSI_OPT(INT64,  Jsi_StructSpec, flags,   .help=\"Flags for struct\", jsi_IIOF ),",
          "1010:     JSI_OPT(STRKEY, Jsi_StructSpec, help,    .help=\"Struct description\", jsi_IIOF ),",
          "1011:     JSI_OPT(UINT32, Jsi_StructSpec, idx,     .help=\"Number of fields in struct\", jsi_IIRO ),",
          "1012:     JSI_OPT(STRKEY, Jsi_StructSpec, name,    .help=\"Name of struct\", jsi_IIOF|JSI_OPT_REQUIRED ),",
          "1013:     JSI_OPT(UINT,   Jsi_StructSpec, size,    .help=\"Size of struct in bytes\", jsi_IIRO ),",
          "1014:     JSI_OPT(UINT32, Jsi_StructSpec, ssig,    .help=\"Signature for struct\", jsi_IIOF),",
          "1015:     JSI_OPT(INT64,  Jsi_StructSpec, value,   .help=\"Reference count\", jsi_IIRO ),",
          "1016:     JSI_OPT_END(Jsi_StructSpec, .help=\"Options for CData struct create\")",
          "1017: };",
          "1019: static Jsi_OptionSpec StructFieldOptions[] =",
          "1020: {",
          "1021:     JSI_OPT(UINT,   Jsi_StructSpec,   arrSize,.help=\"Size of field if an array\", jsi_IIOF ),",
          "1022:     JSI_OPT(UINT32, Jsi_StructSpec,   bits,   .help=\"Size of bitfield\", jsi_IIOF ),",
          "1023:     JSI_OPT(UINT32, Jsi_StructSpec,   boffset,.help=\"Bit offset of field within struct\", jsi_IIRO ),",
          "1024:     JSI_OPT(INT64,  Jsi_StructSpec,   flags,  .help=\"Flags for field\", jsi_IIOF ),",
          "1025:     JSI_OPT(UINT32, Jsi_StructSpec,   idx,    .help=\"Index of field in struct\", jsi_IIRO ),",
          "1026:     JSI_OPT(STRKEY, Jsi_StructSpec,   help,   .help=\"Field description\", jsi_IIOF ),",
          "1027:     JSI_OPT(STRKEY, Jsi_StructSpec,   info,   .help=\"Info for field\", jsi_IIOF ),",
          "1028:     JSI_OPT(STRKEY, Jsi_StructSpec,   name,   .help=\"Name of field\", jsi_IIOF|JSI_OPT_REQUIRED ),",
          "1029:     JSI_OPT(UINT,   Jsi_StructSpec,   offset, .help=\"Offset of field within struct\", jsi_IIRO ),",
          "1030:     JSI_OPT(UINT,   Jsi_StructSpec,   size,   .help=\"Size of field in struct\", jsi_IIRO ),",
          "1031:     JSI_OPT(CUSTOM, Jsi_StructSpec,   type,   .help=\"Type of field\", jsi_IIOF|JSI_OPT_REQUIRED, .custom=&jsi_OptSwitchFieldType,  .data=NULL ),",
          "1032:     JSI_OPT(CUSTOM, Jsi_StructSpec,   init,   .help=\"Initial value for field\", jsi_IIOF|JSI_OPT_PASS2, .custom=&jsi_OptSwitchIniVal, .data=(void*)1  ),",
          "1033:     JSI_OPT_END(Jsi_StructSpec, .help=\"Options for CData struct field\")",
          "1034: };",
          "1036: static Jsi_RC CDataOptionsConf(Jsi_Interp *interp, Jsi_OptionSpec *specs,  Jsi_Value *args,",
          "1037:     void *rec, Jsi_Value **ret, int flags, int skipArgs)",
          "1038: {",
          "1039:     int argc = Jsi_ValueGetLength(interp, args);",
          "1040:     Jsi_Value *val;",
          "1041:     flags |= JSI_OPTS_IS_UPDATE;",
          "1043:     if (argc == skipArgs)",
          "1044:         return Jsi_OptionsDump(interp, specs, rec, ret, flags);",
          "1045:     val = Jsi_ValueArrayIndex(interp, args, skipArgs);",
          "1046:     Jsi_vtype vtyp = Jsi_ValueTypeGet(val);",
          "1047:     if (vtyp == JSI_VT_STRING) {",
          "1048:         char *str = Jsi_ValueString(interp, val, NULL);",
          "1049:         return Jsi_OptionsGet(interp, specs, rec, str, ret, flags);",
          "1050:     }",
          "1051:     if (vtyp != JSI_VT_OBJECT && vtyp != JSI_VT_NULL)",
          "1052:         return Jsi_LogError(\"expected string, object, or null\");",
          "1053:     if (Jsi_OptionsProcess(interp, specs, rec, val, JSI_OPTS_IS_UPDATE) < 0)",
          "1054:         return JSI_ERROR;",
          "1055:     return JSI_OK;",
          "1056: }",
          "1060: static Jsi_RC CDataStructConfCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1061:                                 Jsi_Value **ret, Jsi_Func *funcPtr)",
          "1062: {",
          "1064:     char *arg1 = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "1065:     Jsi_StructSpec *sl = jsi_csStructGet(interp, arg1);",
          "1066:     if (!sl)",
          "1067:         return Jsi_LogError(\"unknown struct: %s\", arg1);",
          "1068:     return CDataOptionsConf(interp, StructOptions, args, sl, ret, 0, 1);",
          "1069: }",
          "1071: static Jsi_RC CDataStructUndefineCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1072:                               Jsi_Value **ret, Jsi_Func *funcPtr)",
          "1073: {",
          "1075:     char *name = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "1076:     Jsi_HashEntry *entry = NULL;",
          "1077:     if (name)",
          "1078:         entry = Jsi_HashEntryFind(interp->StructHash, name);",
          "1079:     if (!entry)",
          "1080:         return Jsi_LogError(\"Unknown struct: %s\", name);",
          "1081:     Jsi_StructSpec *sl = (typeof(sl))Jsi_HashValueGet(entry);",
          "1082:     if (sl->value)",
          "1083:         return Jsi_LogError(\"Struct in use: %d\", (int)sl->value);",
          "1084:     Jsi_HashEntryDelete(entry);",
          "1085:     entry = Jsi_HashEntryFind(interp->CTypeHash, name);",
          "1086:     if (entry)",
          "1087:         Jsi_HashEntryDelete(entry);",
          "1088:     return JSI_OK;",
          "1089: }",
          "1092: static Jsi_RC CDataStructDefineCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1093:                                 Jsi_Value **ret, Jsi_Func *funcPtr)",
          "1094: {",
          "1096:     Jsi_RC rc = JSI_OK;",
          "1097:     Jsi_OptionTypedef *st = NULL;",
          "1098:     jsi_csInitType(interp);",
          "1099:     Jsi_Value *eval = NULL, *val = Jsi_ValueArrayIndex(interp, args, 0),",
          "1101:     int vlen, flen, i, argc, clen = 0, arrCnt=0;",
          "1102:     Jsi_DString fStr = {};",
          "1103:     char **argv = NULL, *cmt, *eq, *cp, *ce, *cpval, ocp;",
          "1104:     const char *vstr = Jsi_ValueString(interp, val, &vlen),",
          "1106:     if (vstr) {",
          "1107:         cmt = Jsi_Strstr(fstr, \"//\");",
          "1108:         eq = Jsi_Strchr(fstr, '=');",
          "1109:         Jsi_DString tStr = {fstr};",
          "1110:         fstr=jsi_TrimStr(Jsi_DSValue(&tStr));",
          "1111:         Jsi_SplitStr(fstr, &argc, &argv, (cmt?\"\\n\":\";\"), &fStr);",
          "1112:         Jsi_DSFree(&tStr);",
          "1113:         if (!cmt && argc>0 && !argv[argc-1][0])",
          "1114:             argc--;",
          "1115:         if (eq) {",
          "1116:             eval = Jsi_ValueNewArray(interp, NULL, 0);",
          "1117:             Jsi_IncrRefCount(interp, eval);",
          "1118:         }",
          "1119:     } else if (!Jsi_ValueIsArray(interp,flds) || (argc=Jsi_ValueGetLength(interp, flds))<1)",
          "1120:         return Jsi_LogError(\"arg 2 must be string or non-empty array\");",
          "1121:     if (argc>200)",
          "1122:         return Jsi_LogError(\"too many fields: %d>200\", argc);",
          "1123:     Jsi_StructSpec *sl, *sf, recs[argc+2];",
          "1124:     memset(recs, 0, sizeof(recs));",
          "1125:     sl = recs+argc+1;",
          "1126:     sf = recs;",
          "1127:     SIGINIT(sl, OPTS_STRUCT);",
          "1128:     if (vstr) {",
          "1129:         sl->name = Jsi_KeyAdd(interp, vstr);",
          "1130:     } else if (Jsi_OptionsProcess(interp, StructOptions, sl, val, 0) < 0) {",
          "1131:         rc = JSI_ERROR;",
          "1132:         goto bail;",
          "1133:     }",
          "1134:     if (!Jsi_StrIsAlnum(sl->name)) {",
          "1135:         rc = Jsi_LogError(\"invalid struct name: %s\", sl->name);",
          "1136:         goto bail;",
          "1137:     }",
          "1138:     if (jsi_csStructGet(interp, sl->name)) {",
          "1139:         rc = Jsi_LogError(\"struct already exists: %s\", sl->name);",
          "1140:         goto bail;",
          "1141:     }",
          "1142:     for (i = 0; i<argc; i++) {",
          "1143:         Jsi_Number numVal = 0;",
          "1144:         bool bVal, isbitset = 0;",
          "1145:         Jsi_Value *inival = NULL;",
          "1146:         sf = recs+i;",
          "1147:         SIGINIT(sf, OPTS_FIELD);",
          "1148:         if (!argv) {",
          "1149:             val = Jsi_ValueArrayIndex(interp, flds, i);",
          "1150:             if (!val || Jsi_OptionsProcess(interp, StructFieldOptions, sf, val, 0) < 0) {",
          "1151:                 rc = JSI_ERROR;",
          "1152:                 goto bail;",
          "1153:             }",
          "1154:             if (!Jsi_StrIsAlnum(sf->name) || !sf->type) {",
          "1155:                 rc = Jsi_LogError(\"invalid struct field name: %s\", sf->name);",
          "1156:                 goto bail;",
          "1157:             }",
          "1158:             if (!Jsi_ValueObjLookup(interp, val, \"init\", 0) && (sf->type->flags&jsi_CTYP_STRUCT))",
          "1159:                 inival = Jsi_ValueNewBoolean(interp, true);",
          "1160:         } else {",
          "1161:             if (cmt) {",
          "1162:                 cp = Jsi_Strstr(argv[i], \"//\");",
          "1163:                 if (cp) {",
          "1165:                     cp += 2;",
          "1166:                     cp = jsi_TrimStr(cp);",
          "1167:                     sf->help = Jsi_KeyAdd(interp, cp);",
          "1168:                 }",
          "1169:                 cp = Jsi_Strchr(argv[i], ';');",
          "1170:                 if (cp) *cp = 0;",
          "1171:             }",
          "1172:             cp = Jsi_Strchr(argv[i], '=');",
          "1173:             if (cp) {",
          "1174:                 if (!eval)",
          "1175:                     goto bail;",
          "1177:                 cp = jsi_TrimStr(cp);",
          "1178:                 int cplen = Jsi_Strlen(cp);",
          "1179:                 if (cplen>1 && (cp[0] == '\\'' || cp[0] == '\"') && cp[0] == cp[cplen-1]) {",
          "1180:                     cpval = cp+1;",
          "1181:                     cp[cplen-1] = 0;",
          "1182:                     inival = Jsi_ValueNewStringDup(interp, cpval);",
          "1183:                 }",
          "1184:                 else if (Jsi_GetDouble(interp, cp, &numVal) == JSI_OK)",
          "1185:                     inival = Jsi_ValueNewNumber(interp, numVal);",
          "1186:                 else if (Jsi_GetBool(interp, cp, &bVal) == JSI_OK)",
          "1187:                     inival = Jsi_ValueNewBoolean(interp, bVal);",
          "1188:                 else",
          "1189:                     inival = Jsi_ValueNewStringDup(interp, cp);",
          "1190:             }",
          "1191:             cp = argv[i];",
          "1192:             while (*cp && isspace(*cp)) cp++;",
          "1193:             ce = cp;",
          "1194:             while (*ce && !isspace(*ce)) ce++;",
          "1195:             ocp = *ce;",
          "1196:             if (!ocp) {",
          "1197:                 rc = Jsi_LogError(\"bad field: %s\", cp);",
          "1198:                 goto bail;",
          "1199:             }",
          "1201:             sf->type = Jsi_TypeLookup(interp, cp);",
          "1203:             if (!sf->type) {",
          "1204:                 rc = Jsi_LogError(\"unknown type: %s\", argv[i]);",
          "1205:                 goto bail;",
          "1206:             }",
          "1207:             if (!inival && (sf->type->flags&jsi_CTYP_STRUCT))",
          "1208:                 inival = Jsi_ValueNewBoolean(interp, true);",
          "1210:             cp = ce+1;",
          "1211:             while (*cp && isspace(*cp)) cp++;",
          "1212:             ce = cp;",
          "1213:             while (*ce && (isalnum(*ce) || *ce == '_')) ce++;",
          "1214:             ocp = *ce;",
          "1216:             if (!*cp) {",
          "1217:                 rc = Jsi_LogError(\"missing or bad struct field name\");",
          "1218:                 goto bail;",
          "1219:             }",
          "1220:             sf->name = Jsi_KeyAdd(interp, cp);",
          "1221:             if (ocp) {",
          "1222:                 ce++;",
          "1223:                 clen = Jsi_Strlen(ce);",
          "1224:             }",
          "1225:             if (ocp == '@') {",
          "1226:                 isbitset = 1;",
          "1227:             } else",
          "1228:             if (ocp == ':') {",
          "1229:                 int bsiz = -1;",
          "1230:                 if (Jsi_GetInt(interp, ce, &bsiz,10) != JSI_OK || bsiz<=0 || bsiz>64) {",
          "1231:                     rc = Jsi_LogError(\"bad bit size: %s\", ce);",
          "1232:                     goto bail;",
          "1233:                 }",
          "1234:                 sf->bits = bsiz;",
          "1235:             } else if (ocp == '[' && clen>1 && ce[clen-1]==']') {",
          "1236:                 int asiz = -1;",
          "1237:                 ce[clen-1] = 0;",
          "1238:                 if (Jsi_GetInt(interp, ce, &asiz, 10) != JSI_OK || asiz<=0) {",
          "1239:                     rc = Jsi_LogError(\"bad size: %s\", cp);",
          "1240:                     goto bail;",
          "1241:                 }",
          "1242:                 sf->arrSize = asiz;",
          "1243:             } else if (ocp) {",
          "1244:                 rc = Jsi_LogError(\"bad field: %s\", cp);",
          "1245:                 goto bail;",
          "1246:             }",
          "1247:             val = NULL;",
          "1248:         }",
          "1249:         if (inival) {",
          "1250:             Jsi_Value *sval = Jsi_ValueNewObj(interp, NULL);",
          "1251:             Jsi_ValueInsert(interp, sval, \"init\", inival, 0);",
          "1252:             Jsi_ValueArraySet(interp, eval, sval, i);",
          "1253:         }",
          "1254:         bool isEnum = (sf->type && (sf->type->flags&jsi_CTYP_ENUM));",
          "1255:         if (isbitset) {",
          "1256:             if (!isEnum) {",
          "1257:                 rc = Jsi_LogError(\"bitset type is not an enum\");",
          "1258:                 goto bail;",
          "1259:             }",
          "1260:             sf->flags |= JSI_OPT_BITSET_ENUM;",
          "1261:         }",
          "1262:         if (sf->arrSize) {",
          "1263:             if (sf->arrSize>interp->maxArrayList) {",
          "1264:                 rc = Jsi_LogError(\"array size too big: %d >= %d\", sf->arrSize, interp->maxArrayList);",
          "1265:                 goto bail;",
          "1266:             }",
          "1267:             if (sf->bits || isEnum) {",
          "1268:                 rc = Jsi_LogError(\"array of %s unsupported\", (sf->bits?\"bits\":\"enums\"));",
          "1269:                 goto bail;",
          "1270:             }",
          "1271:             arrCnt++;",
          "1272:         }",
          "1273:     }",
          "1274:     recs[argc].id = JSI_OPTION_END;",
          "1275:     rc = jsi_csSetupStruct(interp, sl, recs, recs, argc, &st, arrCnt);",
          "1276:     if (rc != JSI_OK || !st) {",
          "1277:         rc = JSI_ERROR;",
          "1278:         goto bail;",
          "1279:     }",
          "1280:     sl = jsi_csGetStructSpec(st->extData);",
          "1281:     sf = jsi_csGetFieldSpec(sl->extData);",
          "1282:     if (vstr)",
          "1283:         flds = eval;",
          "1284:     for (i = 0; i<argc && flds; i++) {",
          "1285:         val = Jsi_ValueArrayIndex(interp, flds, i);",
          "1286:         if (val && Jsi_OptionsProcess(interp, StructFieldOptions, sf+i, val, JSI_OPT_PASS2) < 0) {",
          "1287:             rc = JSI_ERROR;",
          "1288:             goto bail;",
          "1289:         }",
          "1290:     }",
          "1291: bail:",
          "1292:     if (eval)",
          "1293:         Jsi_DecrRefCount(interp, eval);",
          "1294:     Jsi_DSFree(&fStr);",
          "1295:     if (rc != JSI_OK && st)",
          "1296:         Jsi_HashEntryDelete(st->hPtr);",
          "1297:     return rc;",
          "1298: }",
          "1301: static Jsi_RC CDataStructFieldConfCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1302:                                 Jsi_Value **ret, Jsi_Func *funcPtr)",
          "1303: {",
          "1305:     char *arg1 = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "1306:     Jsi_StructSpec *sf, *sl = jsi_csStructGet(interp, arg1);",
          "1307:     if (!sl)",
          "1308:         return Jsi_LogError(\"unknown struct: %s\", arg1);",
          "1309:     char *arg2 = Jsi_ValueArrayIndexToStr(interp, args, 1, NULL);",
          "1310:     if (!arg2 || !(sf = jsi_csFieldGet(interp, arg2, sl)))",
          "1311:         return Jsi_LogError(\"unknown field: %s\", arg2);",
          "1312:     return CDataOptionsConf(interp, StructFieldOptions, args, sf, ret, 0, 2);",
          "1313: }",
          "1315: static Jsi_CmdSpec structCmds[] =",
          "1316: {",
          "1317:     {\"add\",       CDataStructDefineCmd, 2, 2, \"options:object|string, fields:array|string\", .help=\"Create a struct: field values same as in fieldconf\", .retType=0, .flags=0, .info=0, .opts=StructOptions},",
          "1318:     {\"conf\",      CDataStructConfCmd,   1, 2, \"struct:string, options:object|string=void\", .help=\"Configure options for struct\", .retType=0, .flags=0, .info=0, .opts=StructOptions},",
          "1319:     {\"fieldconf\", CDataStructFieldConfCmd,2,3,\"struct:string, field:string, options:object|string=void\", .help=\"Configure options for fields\", .retType=0, .flags=0, .info=0, .opts=StructFieldOptions},",
          "1320:     {\"get\",       CDataStructGetCmd,    1, 2, \"struct, options:object=void\", .help=\"Return the struct definition\", .retType=(uint)JSI_TT_OBJECT},",
          "1321:     {\"names\",     CDataStructNamesCmd,  0, 1, \"struct:string=void\", .help=\"Return name list of all structs, or fields for one struct\", .retType=(uint)JSI_TT_ARRAY},",
          "1322:     {\"remove\",    CDataStructUndefineCmd,1, 1, \"name:string\",.help=\"Remove a struct\", .retType=0, .flags=0, .info=0, .opts=0},",
          "1323:     {\"schema\",    CDataStructSchemaCmd, 1, 1, \"\", .help=\"Return database schema for struct\", .retType=(uint)JSI_TT_STRING },",
          "1324:     { NULL,   0,0,0,0, .help=\"Struct commands. Note: Struct() is a shortcut for Struct.add()\" }",
          "1325: };",
          "1329: static Jsi_RC jsi_csGetKey(Jsi_Interp *interp, CDataObj *cd, Jsi_Value *arg, void **kPtr, size_t ksize, int anum)",
          "1330: {",
          "1331:     void *kBuf = *kPtr;",
          "1333:     if (!arg)",
          "1334:         return Jsi_LogError(\"missing key arg\");;",
          "1335:     Jsi_Number nval = 0;",
          "1336:     switch (cd->keyType) {",
          "1337:         case JSI_KEYS_STRING:",
          "1338:         case JSI_KEYS_STRINGKEY:",
          "1340:             if (!*kPtr)",
          "1341:                 return Jsi_LogError(\"arg %d: expected string key\", anum);",
          "1342:             break;",
          "1343:         case JSI_KEYS_ONEWORD:",
          "1344:             if (Jsi_ValueGetNumber(interp, arg, &nval) != JSI_OK)",
          "1345:                 return Jsi_LogError(\"arg %d: expected number key\", anum);",
          "1347:             break;",
          "1348:         default: {",
          "1349:             if (!cd->slKey) {",
          "1350: badkey:",
          "1351:                 return Jsi_LogError(\"arg %d: expected struct key\", anum);",
          "1352:             }",
          "1353:             if (arg->vt == JSI_VT_OBJECT && arg->d.obj->ot == JSI_OT_OBJECT) {",
          "1354:                 if (cd->slKey->size>ksize || !kBuf)",
          "1355:                     goto badkey;",
          "1356:                 memset(kBuf, 0, cd->slKey->size);",
          "1357:                 if (Jsi_OptionsConf(interp, (Jsi_OptionSpec*)cd->keysf, kBuf, arg, NULL, 0) != JSI_OK)",
          "1358:                     return JSI_ERROR;",
          "1360:             } else",
          "1361:                 return Jsi_LogError(\"arg %d: expected object key\", anum);",
          "1362:         }",
          "1363:     }",
          "1364:     return JSI_OK;",
          "1365: }",
          "1367: #define FN_dataGetN JSI_INFO(\"If given a name argument, gets data for the named field. \\",
          "1368: Otherwise gets data for all fields in struct.\")",
          "1369: static Jsi_RC CDataGetCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1370:                              Jsi_Value **ret, Jsi_Func *funcPtr)",
          "1371: {",
          "1372:     UdcGet(cd, _this, funcPtr);",
          "1373:     uchar *dptr = NULL;",
          "1374:     Jsi_Value *karg = Jsi_ValueArrayIndex(interp, args, 0);",
          "1375:     char kbuf[BUFSIZ];",
          "1376:     void *key = kbuf;",
          "1377:     bool isNull = (!karg || Jsi_ValueIsNull(interp, karg));",
          "1378:     if (isNull) {",
          "1379:         if (cd->mapPtr || cd->arrSize>1)",
          "1380:             return Jsi_LogError(\"null key used with c-array/map\");",
          "1381:     } else {",
          "1382:         if (!cd->mapPtr && cd->arrSize<=0)",
          "1383:             return Jsi_LogError(\"must be array/map\");",
          "1384:         if (JSI_OK != jsi_csGetKey(interp, cd, karg, &key, sizeof(kbuf), 1))",
          "1385:         return JSI_ERROR;",
          "1386:     }",
          "1388:     dptr = (uchar*)cd->data;",
          "1389:     if (isNull) {",
          "1390:     } else if (cd->mapPtr) {",
          "1391:         Jsi_MapEntry *mPtr = Jsi_MapEntryFind(*cd->mapPtr, key);",
          "1392:         if (mPtr)",
          "1393:             dptr = (uchar*)Jsi_MapValueGet(mPtr);",
          "1394:         else",
          "1395:             return Jsi_LogError(\"arg 1: key not found [%s]\", Jsi_ValueToString(interp, karg, NULL));",
          "1396:     } /*else if (!cd->arrSize)",
          "1398:     else {",
          "1399:         uint kind = (intptr_t)key;",
          "1400:         if (kind>=cd->arrSize)",
          "1401:             return Jsi_LogError(\"array index out of bounds: %d not in 0,%d\", kind, cd->arrSize-1);",
          "1403:         dptr = ((uchar*)cd->data) + cd->sl->size*kind;",
          "1404:         if (cd->isPtrs)",
          "1405:             dptr = ((uchar*)cd->data) + sizeof(void*)*kind;",
          "1406:         else if (cd->isPtr2) {",
          "1407:             dptr = (uchar*)(*(void**)dptr);",
          "1408:             dptr += sizeof(void*)*kind;",
          "1409:         }",
          "1410:     }",
          "1411:     int argc = Jsi_ValueGetLength(interp, args);",
          "1412:     if (argc > 2)",
          "1413:         return Jsi_LogError(\"expected 0 - 2 args\");",
          "1414:     Jsi_Value *arg2 = Jsi_ValueArrayIndex(interp, args, 1);",
          "1415:     return Jsi_OptionsConf(interp, (Jsi_OptionSpec*)cd->sf, dptr, arg2, ret, 0);",
          "1416: }",
          "1418: #define FN_dataSet JSI_INFO(\"Sets data value for given a name argument.\")",
          "1419: static Jsi_RC CDataSetCmd_(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1420:                              Jsi_Value **ret, Jsi_Func *funcPtr, int op)",
          "1421: {",
          "1422:     UdcGet(cd, _this, funcPtr);",
          "1423:     uchar *dptr = NULL;",
          "1424:     Jsi_Value *arg = Jsi_ValueArrayIndex(interp, args, 0);",
          "1425:     char kbuf[BUFSIZ];",
          "1426:     void *key = kbuf;",
          "1427:     bool isNull = Jsi_ValueIsNull(interp, arg);",
          "1428:     if (isNull) {",
          "1429:         if (cd->mapPtr || cd->arrSize)",
          "1430:             return Jsi_LogError(\"null key used with c-array/map\");",
          "1431:     } else {",
          "1432:         if (!cd->mapPtr && cd->arrSize<=0)",
          "1433:             return Jsi_LogError(\"must be array/map\");",
          "1434:         if (JSI_OK != jsi_csGetKey(interp, cd, arg, &key, sizeof(kbuf), 1))",
          "1435:             return JSI_ERROR;",
          "1436:     }",
          "1438:     dptr = (uchar*)cd->data;",
          "1439:     if (isNull) {",
          "1440:     } else if (cd->mapPtr) {",
          "1441:         Jsi_MapEntry *mPtr = Jsi_MapEntryFind(*cd->mapPtr, key);",
          "1442:         if (mPtr)",
          "1443:             dptr = (uchar*)Jsi_MapValueGet(mPtr);",
          "1444:         else {",
          "1445:             bool isNew;",
          "1446:             if (cd->maxSize && Jsi_MapSize(*cd->mapPtr)>=cd->maxSize)",
          "1447:                 return Jsi_LogError(\"map would exceeded maxSize: %d\", cd->maxSize);",
          "1448:             if (!cd->noAuto)",
          "1449:                 mPtr = Jsi_MapEntryNew(*cd->mapPtr, key, &isNew);",
          "1450:             if (!mPtr)",
          "1451:                 return Jsi_LogError(\"arg 1: key not found [%s]\", Jsi_ValueToString(interp, arg, NULL));",
          "1452:             Jsi_StructSpec *sl = cd->sl;",
          "1453:             dptr = (uchar*)Jsi_Calloc(1, sl->size);",
          "1454:             Jsi_MapValueSet(mPtr, dptr);",
          "1455:             jsi_csStructInit(sl, dptr);",
          "1456:         }",
          "1457:     } else if (!cd->arrSize)",
          "1458:         return Jsi_LogError(\"expected a c-array or map\");",
          "1459:     else {",
          "1460:         uint kind = (uintptr_t)key;",
          "1461:         if (kind>=cd->arrSize)",
          "1462:             return Jsi_LogError(\"array index out of bounds: %d not in 0,%d\", kind, cd->arrSize-1);",
          "1463:         dptr = ((uchar*)cd->data) + cd->sl->size*kind;",
          "1464:         if (cd->isPtrs)",
          "1465:             dptr = ((uchar*)cd->data) + sizeof(void*)*kind;",
          "1466:         else if (cd->isPtr2)",
          "1467:             dptr = (uchar*)(*(void**)dptr) + sizeof(void*)*kind;",
          "1468:     }",
          "1469:     int argc = Jsi_ValueGetLength(interp, args);",
          "1470:     Jsi_Value *arg2 = Jsi_ValueArrayIndex(interp, args, 1);",
          "1471:     if (op == 2 && argc == 2) {",
          "1472:     } else if (argc == 2) {",
          "1473:         if (!Jsi_ValueIsObjType(interp, arg2, JSI_OT_OBJECT))",
          "1474:             return Jsi_LogError(\"arg 3: last must be an object with 3 args\");",
          "1475:         return Jsi_OptionsConf(interp, (Jsi_OptionSpec*)cd->sf, dptr, arg2, ret, 0);",
          "1476:     } else if (argc != 3)",
          "1477:         return Jsi_LogError(\"expected 2 or 3 args\");",
          "1478:     const char *cp;",
          "1479:     if (!(cp = Jsi_ValueString(interp, arg2, NULL)))",
          "1480:         return Jsi_LogError(\"with 3 args, string expected for arg 2\");",
          "1481:     Jsi_Value *arg3 = Jsi_ValueArrayIndex(interp, args, 2);",
          "1482:     if (op == 2) {",
          "1483:         if (arg3) {",
          "1484:             if (!Jsi_ValueIsNumber(interp, arg3))",
          "1485:                 return Jsi_LogError(\"expected number\");",
          "1486:         } else {",
          "1487:             arg3 = Jsi_ValueNewNumber(interp, 1);",
          "1488:             Jsi_IncrRefCount(interp, arg3);",
          "1489:         }",
          "1490:     }",
          "1491:     Jsi_RC rc = Jsi_OptionsSet(interp, (Jsi_OptionSpec*)cd->sf, dptr, cp, arg3, (op==2?JSI_OPTS_INCR:0));",
          "1492:     if (op==2 && argc==2)",
          "1493:         Jsi_DecrRefCount(interp, arg3);",
          "1494:     if (op == 2 && rc == JSI_OK) {",
          "1495:         if (interp->typeCheck.strict && Jsi_NumberIsNaN(interp->cdataIncrVal))",
          "1496:             return Jsi_LogError(\"result is NaN\");",
          "1497:         Jsi_ValueMakeNumber(interp, ret, interp->cdataIncrVal);",
          "1498:     }",
          "1499:     return rc;",
          "1500: }",
          "1502: static Jsi_RC CDataSetCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1503:                              Jsi_Value **ret, Jsi_Func *funcPtr) {",
          "1504:     return CDataSetCmd_(interp, args, _this, ret, funcPtr, 1);",
          "1505: }",
          "1507: static Jsi_RC CDataIncrCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1508:                              Jsi_Value **ret, Jsi_Func *funcPtr) {",
          "1509:     return CDataSetCmd_(interp, args, _this, ret, funcPtr, 2);",
          "1510: }",
          "1512: static Jsi_RC CDataInfoCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1513:                               Jsi_Value **ret, Jsi_Func *funcPtr)",
          "1514: {",
          "1515:     UdcGet(cd, _this, funcPtr);",
          "1516:     Jsi_StructSpec *sl = cd->sl;",
          "1517:     Jsi_DString dStr= {};",
          "1518:     const char *sptr = Jsi_DSPrintf(&dStr, \"{struct:\\\"%s\\\", label:\\\"%s\\\"}\", sl->name, cd->help?cd->help:\"\");",
          "1519:     Jsi_RC rc = JSI_ERROR;",
          "1520:     if (!sptr)",
          "1521:         return Jsi_LogError(\"format failed\");",
          "1522:     else",
          "1523:         rc = Jsi_JSONParse(interp, sptr, ret, 0);",
          "1524:     Jsi_DSFree(&dStr);",
          "1525:     if (rc != JSI_OK)",
          "1526:         return rc;",
          "1527:     Jsi_Obj *sobj;",
          "1528:     Jsi_Value *svalue;",
          "1529:     if (cd->sf) {",
          "1530:         sobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
          "1531:         svalue = Jsi_ValueMakeObject(interp, NULL, sobj);",
          "1532:         jsi_DumpOptionSpecs(interp, sobj,(Jsi_OptionSpec*) cd->sf);",
          "1533:         sobj = (*ret)->d.obj;",
          "1534:         Jsi_ObjInsert(interp, sobj, \"spec\", svalue, 0);",
          "1535:     }",
          "1536:     if (cd->slKey) {",
          "1537:         sobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
          "1538:         svalue = Jsi_ValueMakeObject(interp, NULL, sobj);",
          "1539:         jsi_DumpOptionSpecs(interp, sobj, (Jsi_OptionSpec*)cd->slKey);",
          "1540:         sobj = (*ret)->d.obj;",
          "1541:         Jsi_ObjInsert(interp, sobj, \"keySpec\", svalue, 0);",
          "1542:     }    return JSI_OK;",
          "1543: }",
          "1546: const char *csMapTypeStrs[] = { \"none\", \"hash\", \"tree\",  \"list\", NULL };",
          "1547: const char *csKeyTypeStrs[] = { \"string\", \"strkey\", \"number\",  NULL };",
          "1549: static Jsi_OptionSpec CDataOptions[] = {",
          "1550:     JSI_OPT(UINT,     CDataObj, arrSize, .help=\"If an array, its size in elements\", jsi_IIOF ),",
          "1551:     JSI_OPT(UINT,     CDataObj, flags,   .help=\"Flags\", jsi_IIOF|JSI_OPT_FMT_HEX ),",
          "1552:     JSI_OPT(STRKEY,   CDataObj, help,    .help=\"Description of data\", jsi_IIOF ),",
          "1553:     JSI_OPT(STRKEY,   CDataObj, keyName, .help=\"Key struct, for key struct maps\", jsi_IIOF ),",
          "1554:     JSI_OPT(CUSTOM,   CDataObj, keyType, .help=\"Key id\", jsi_IIOF|JSI_OPT_COERCE, .custom=Jsi_Opt_SwitchEnum, .data=csKeyTypeStrs),",
          "1555:     JSI_OPT(CUSTOM,   CDataObj, mapType, .help=\"If a map, its type\", jsi_IIOF, .custom=Jsi_Opt_SwitchEnum, .data=csMapTypeStrs),",
          "1556:     JSI_OPT(UINT,     CDataObj, maxSize, .help=\"Limit the array size or number of keys in a map\" ),",
          "1557:     JSI_OPT(STRKEY,   CDataObj, name,    .help=\"Name (eg. of var assigned to on create)\", jsi_IIOF ),",
          "1558:     JSI_OPT(BOOL,     CDataObj, noAuto,  .help=\"Disable auto-create of map keys in set/incr\"),",
          "1559:     JSI_OPT(STRKEY,   CDataObj, structName,  .help=\"Struct used for storing data\", jsi_IIOF|JSI_OPT_REQUIRED ),",
          "1560:     JSI_OPT(INT64,    CDataObj, user,    .help=\"User data\" ),",
          "1561:     JSI_OPT(STRKEY,   CDataObj, varParam,.help=\"Param for maps/array vars\", jsi_IIOF ),",
          "1562:     JSI_OPT_END(CDataObj, .help=\"Options for CData named\")",
          "1563: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1771:     return JSI_OK;",
          "1772: }",
          "1881: static Jsi_RC jsi_csTypeFree(Jsi_Interp *interp, Jsi_HashEntry *hPtr, void *ptr) {",
          "1882:     if (!ptr) return JSI_OK;",
          "",
          "[Removed Lines]",
          "1774: static Jsi_RC CDataConfCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1775:                               Jsi_Value **ret, Jsi_Func *funcPtr)",
          "1776: {",
          "1777:     UdcGet(cd, _this, funcPtr);",
          "1778:     return CDataOptionsConf(interp, CDataOptions, args, cd, ret, 0, 0);",
          "1779: }",
          "1781: static Jsi_RC CDataNamesCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1782:     Jsi_Value **ret, Jsi_Func *funcPtr) {",
          "1783:     UdcGet(cd, _this, funcPtr);",
          "1784:     if (cd->mapType != JSI_MAP_NONE)",
          "1785:         return Jsi_MapKeysDump(interp, *cd->mapPtr, ret, 0);",
          "1786:     return Jsi_LogError(\"not a map\");;",
          "1787: }",
          "1789: static Jsi_RC CDataUnsetCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1790:                               Jsi_Value **ret, Jsi_Func *funcPtr)",
          "1791: {",
          "1792:     UdcGet(cd, _this, funcPtr);",
          "1793:     Jsi_Value *arg2 = Jsi_ValueArrayIndex(interp, args, 0);",
          "1794:     char kbuf[BUFSIZ];",
          "1795:     void *key = kbuf;",
          "1796:     if (!cd->mapPtr && cd->arrSize<=0)",
          "1797:         return Jsi_LogError(\"can not call unset on non map/array\");",
          "1798:     if (JSI_OK != jsi_csGetKey(interp, cd, arg2, &key, sizeof(kbuf), 2)) {",
          "1799:         return JSI_ERROR;",
          "1800:     }",
          "1801:     uchar *dptr = NULL;",
          "1802:     Jsi_MapEntry *mPtr = Jsi_MapEntryFind(*cd->mapPtr, key);",
          "1803:     if (mPtr)",
          "1804:         dptr = (uchar*)Jsi_MapValueGet(mPtr);",
          "1805:     if (!dptr) {",
          "1806:         if (cd->keyType != JSI_KEYS_ONEWORD)",
          "1807:             return Jsi_LogError(\"no data in map: %s\", (char*)key);",
          "1808:         else",
          "1809:             return Jsi_LogError(\"no data in map: %p\", key);",
          "1810:         return JSI_ERROR;",
          "1811:     }",
          "1812:     Jsi_Free(dptr);",
          "1813:     Jsi_MapEntryDelete(mPtr);",
          "1814:     return JSI_OK;",
          "1816: }",
          "1818: #define FN_cdataConstructor JSI_INFO(\"\\",
          "1819: The 2nd arg is used for function option parsing and will report errors at the callers file:line\")",
          "1820: static Jsi_RC CDataConstructor(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1821:     Jsi_Value **ret, Jsi_Func *funcPtr);",
          "1824: static Jsi_CmdSpec cdataCmds[] =",
          "1825: {",
          "1826:     {\"CData\",     CDataConstructor,1, 2, \"options:string|object=void, inits:object=undefined\",.help=\"Create a new struct or map/array of structs\", .retType=(uint)JSI_TT_USEROBJ, .flags=JSI_CMD_IS_CONSTRUCTOR, .info=FN_cdataConstructor, .opts=CDataOptions},",
          "1827:     {\"conf\",      CDataConfCmd,    0, 1, \"options:object|string=void\",.help=\"Configure options for c-data\", .retType=0, .flags=0, .info=0, .opts=CDataOptions},",
          "1828:     {\"get\"   ,    CDataGetCmd,     0, 2, \"key:string|number|object=null, field:string=void\", .help=\"Get struct/map/array value\", .retType=(uint)JSI_TT_ANY},",
          "1829:     {\"incr\",      CDataIncrCmd,    2, 3, \"key:string|number|object|null, field:object|string, value:number=1\", .help=\"Increment a numeric field: returns the new value\", .retType=(uint)JSI_TT_NUMBER},",
          "1830:     {\"info\",      CDataInfoCmd,    0, 0, \"\", .help=\"Return info for data\", .retType=(uint)JSI_TT_OBJECT},",
          "1831:     {\"names\",     CDataNamesCmd,   0, 0, \"\", .help=\"Return keys for map\", .retType=(uint)JSI_TT_ARRAY },",
          "1832:     {\"set\",       CDataSetCmd,     2, 3, \"key:string|number|object|null, field:object|string, value:any=void\", .help=\"Set a struct/map/array value\", .retType=(uint)JSI_TT_ANY},",
          "1833:     {\"unset\",     CDataUnsetCmd,   1, 1, \"key:string|number|object\", .help=\"Remove entry from map/array\", .retType=(uint)JSI_TT_ANY},",
          "1834:     {NULL}",
          "1835: };",
          "1838: static Jsi_OptionSpec TypeOptions[] = {",
          "1839:     JSI_OPT(STRKEY,   Jsi_OptionTypedef, idName,  .help=\"The id name: usually upcased cName\", jsi_IIOF ),",
          "1840:     JSI_OPT(STRKEY,   Jsi_OptionTypedef, cName,   .help=\"C type name\", jsi_IIOF ),",
          "1841:     JSI_OPT(STRKEY,   Jsi_OptionTypedef, help,    .help=\"Description of id\", jsi_IIOF ),",
          "1842:     JSI_OPT(STRKEY,   Jsi_OptionTypedef, fmt,     .help=\"Printf format for id\", jsi_IIOF ),",
          "1843:     JSI_OPT(STRKEY,   Jsi_OptionTypedef, xfmt,    .help=\"Hex printf format for id\", jsi_IIOF ),",
          "1844:     JSI_OPT(INT64,    Jsi_OptionTypedef, flags,   .help=\"Flags for id\", jsi_IIOF ),",
          "1845:     JSI_OPT(INT,      Jsi_OptionTypedef, size,    .help=\"Size for id\", jsi_IIOF ),",
          "1846:     JSI_OPT(INT64,    Jsi_OptionTypedef, user,    .help=\"User data\" ),",
          "1847:     JSI_OPT_END(Jsi_OptionTypedef, .help=\"Options for CData id\")",
          "1848: };",
          "1850: static Jsi_RC CDataTypeConfCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1851:                               Jsi_Value **ret, Jsi_Func *funcPtr)",
          "1852: {",
          "1854:     char *arg1 = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "1855:     Jsi_OptionTypedef *nd = NULL;",
          "1856:     jsi_csInitType(interp);",
          "1857:     if (arg1)",
          "1858:         nd = (typeof(nd))Jsi_TypeLookup(interp, arg1);",
          "1859:     if (!nd)",
          "1860:         return Jsi_LogError(\"Unknown type: %s\", arg1);",
          "1861:     return CDataOptionsConf(interp, TypeOptions, args, nd, ret, 0, 1);",
          "1862: }",
          "1864: static Jsi_RC CDataTypeNamesCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1865:                               Jsi_Value **ret, Jsi_Func *funcPtr)",
          "1866: {",
          "1868:     jsi_csInitType(interp);",
          "1869:     int argc = Jsi_ValueGetLength(interp, args);",
          "1870:     return Jsi_HashKeysDump(interp, (argc?interp->CTypeHash:interp->TYPEHash), ret, 0);",
          "1871: }",
          "1874: static Jsi_CmdSpec typeCmds[] =",
          "1875: {",
          "1876:     {\"conf\",      CDataTypeConfCmd,    1, 2, \"typ:string, options:object|string=void\",.help=\"Configure options for type\", .retType=0, .flags=0, .info=0, .opts=TypeOptions},",
          "1877:     {\"names\",     CDataTypeNamesCmd,   0, 1, \"ctype=false\", .help=\"Return type names\", .retType=(uint)JSI_TT_ARRAY},",
          "1878:     { NULL,   0,0,0,0, .help=\"Type commands. Note: Type() is a shortcut for Type.conf()\" }",
          "1879: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1888:     return JSI_OK;",
          "1889: }",
          "2128: static Jsi_RC jsi_DoneCData(Jsi_Interp *interp)",
          "2129: {",
          "2130:     if (!interp->SigHash) return JSI_OK;",
          "",
          "[Removed Lines]",
          "1891: static Jsi_RC jsi_csMapFree(Jsi_Interp *interp, Jsi_MapEntry *hPtr, void *ptr) {",
          "1892:     if (!ptr) return JSI_OK;",
          "1893:     Jsi_Free(ptr);",
          "1894:     return JSI_OK;",
          "1895: }",
          "1897: static Jsi_RC jsi_csObjFree(Jsi_Interp *interp, void *data)",
          "1898: {",
          "1899:     CDataObj *cd = (CDataObj *)data;",
          "1900:     cd->sl->value--;",
          "1901:     if (cd->slKey)",
          "1902:         cd->slKey->value--;",
          "1903:     if (cd->isAlloc) {",
          "1904:         if (cd->mapPtr && *cd->mapPtr) {",
          "1905:             Jsi_MapDelete(*cd->mapPtr);",
          "1907:         }",
          "1908:         else if (cd->data) Jsi_Free(cd->data);",
          "1909:     }",
          "1910:     Jsi_Free(cd);",
          "1911:     return JSI_OK;",
          "1912: }",
          "1914: static bool jsi_csObjIsTrue(void *data)",
          "1915: {",
          "1916:     CDataObj *fo = (CDataObj *)data;",
          "1917:     if (!fo->fobj) return JSI_OK;",
          "1918:     else return 1;",
          "1919: }",
          "1921: static bool jsi_csObjEqual(void *data1, void *data2)",
          "1922: {",
          "1923:     return (data1 == data2);",
          "1924: }",
          "1926: static Jsi_UserObjReg cdataobject = {",
          "1927:     \"CData\",",
          "1928:     cdataCmds,",
          "1929:     jsi_csObjFree,",
          "1930:     jsi_csObjIsTrue,",
          "1931:     jsi_csObjEqual",
          "1932: };",
          "1934: static Jsi_RC jsi_csNewCData(Jsi_Interp *interp, CDataObj *cd, int flags) {",
          "1936:     Jsi_StructSpec *slKey = NULL, *keySpec = NULL, *sf = cd->sf, *sl = cd->sl;",
          "1938:     if (!sf)",
          "1939:         cd->sf = sf = jsi_csStructFields(interp, cd->structName);",
          "1940:     if (!sl)",
          "1941:         sl = cd->sl = Jsi_CDataStruct(interp, cd->structName);",
          "1942:     if (!sf)",
          "1943:         return Jsi_LogError(\"missing struct/fields: %s\", cd->structName);",
          "1945:     if (cd->keyName) {",
          "1946:         slKey = keySpec = Jsi_CDataStruct(interp, cd->keyName);",
          "1947:         if (slKey == NULL)",
          "1948:             return Jsi_LogError(\"unknown key struct: %s\", cd->keyName);",
          "1949:     }",
          "1951:     const char *vparm = cd->varParam;",
          "1952:     if (vparm && vparm[0]) {",
          "1953:         char parm[200] = {}, *parms=parm, *ep;",
          "1954:         int plen = Jsi_Strlen(vparm);",
          "1955:         if (plen>=2 && vparm[0] == '[' && vparm[plen-1]==']') {",
          "1956:             snprintf(parm, sizeof(parm), \"%.*s\", plen-2, vparm+1);",
          "1957:             int sz = 0;",
          "1958:             if (parm[0] && isdigit(parm[0])) {",
          "1959:                 sz=strtoul(parm, &ep, 0);",
          "1960:                 if (*ep || sz<=0)",
          "1961:                     return Jsi_LogError(\"bad array size: %s\", vparm);",
          "1962:                 cd->arrSize = sz;",
          "1963:             } else {",
          "1964:                 Jsi_EnumSpec *ei = (typeof(ei))Jsi_HashGet(interp->EnumItemHash, parm, 0);",
          "1965:                 if (!ei || (sz=ei->value)<=0)",
          "1966:                     return Jsi_LogError(\"bad array enum: %s\", vparm);",
          "1967:             }",
          "1969:         } else if (plen>=2 && vparm[0] == '{' && vparm[plen-1]=='}') {",
          "1970:             snprintf(parm, sizeof(parm), \"%.*s\", plen-2, vparm+1);",
          "1971:             cd->mapType = JSI_MAP_TREE;",
          "1972:             if (parms[0]) {",
          "1973:                 const char *ktn = NULL;",
          "1974:                 if (*parms == '#') {",
          "1975:                      cd->mapType = JSI_MAP_HASH;",
          "1976:                      parms++;",
          "1977:                 }",
          "1978:                 if (*parms == '0') {",
          "1979:                     cd->keyType = JSI_KEYS_ONEWORD;",
          "1980:                     if (parms[1])",
          "1981:                         return Jsi_LogError(\"Trailing junk: %s\", vparm);",
          "1982:                 } else if (parms[0] == '@') {",
          "1983:                     slKey = Jsi_CDataStruct(interp, ktn=(parms+1));",
          "1984:                     if (!slKey)",
          "1985:                         return Jsi_LogError(\"unknown key struct: %s\", ktn);",
          "1986:                     cd->keyName = slKey->name;",
          "1987:                 } else if (parms[0])",
          "1988:                         return Jsi_LogError(\"Trailing junk: %s\", vparm);",
          "1989:             }",
          "1991:         } else",
          "1992:             return Jsi_LogError(\"expected either {} or []: %s\", vparm);",
          "1994:     }",
          "1995:     cd->sl->value++;",
          "1997:     if (cd->keyName) {",
          "1998:         cd->slKey = Jsi_CDataStruct(interp, cd->keyName);",
          "1999:         if (!cd->slKey)",
          "2000:             return Jsi_LogError(\"unknown key struct: %s\", cd->keyName);",
          "2001:         cd->keysf = jsi_csStructFields(interp, cd->keyName);",
          "2002:         cd->keyType = (Jsi_Key_Type)slKey->size;",
          "2003:         cd->slKey->value++;",
          "2004:     }",
          "2006:     if (cd->arrSize<=0 && cd->mapType != JSI_MAP_NONE) {",
          "2007:         if (interp->cdataNewVal && interp->cdataNewVal->data)",
          "2008:             cd->mapPtr = (Jsi_Map**)(interp->cdataNewVal->data);",
          "2009:         else",
          "2010:             cd->mapPtr = (Jsi_Map**)&cd->data;",
          "2011:         cd->isAlloc = 1;",
          "2013:         if (cd->slKey) {",
          "2014:             Jsi_MapOpts mo;",
          "2015:             Jsi_MapConf(*cd->mapPtr, &mo, 0);",
          "2016:             mo.fmtKeyProc = jsi_csFmtKeyCmd;",
          "2017:             mo.user = (void*)cd;",
          "2018:             Jsi_MapConf(*cd->mapPtr, &mo, 1);",
          "2019:         }",
          "2020:     } else {",
          "2021:         uint i, sz = (cd->arrSize<=0 ? 1 : cd->arrSize);",
          "2022:         cd->keyType = JSI_KEYS_ONEWORD;",
          "2023:         if (interp->cdataNewVal && interp->cdataNewVal->data)",
          "2024:             cd->data = interp->cdataNewVal->data;",
          "2025:         else {",
          "2026:             cd->isAlloc = 1;",
          "2027:             cd->data = (typeof(cd->data))Jsi_Calloc(sz, cd->sl->size);",
          "2028:         }",
          "2029:         for (i=0; i<sz; i++)",
          "2030:             jsi_csStructInit(sl, (((uchar*)cd->data) + i*cd->sl->size));",
          "2031:     }",
          "2033:     return JSI_OK;",
          "2034: }",
          "2036: static Jsi_RC CDataConstructor(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "2037:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "2038: {",
          "2039:     Jsi_Value *that = _this;",
          "2040:     Jsi_Obj *nobj;",
          "2042:     if (!Jsi_FunctionIsConstructor(funcPtr)) {",
          "2043:         Jsi_Obj *o = Jsi_ObjNew(interp);",
          "2044:         Jsi_PrototypeObjSet(interp, \"CData\", o);",
          "2045:         Jsi_ValueMakeObject(interp, ret, o);",
          "2046:         that = *ret;",
          "2047:     }",
          "2049:     CDataObj *cd = (typeof(cd))Jsi_Calloc(1,sizeof(*cd));",
          "2050:     cd->interp = interp;",
          "2051:     Jsi_Value *val = Jsi_ValueArrayIndex(interp, args, 0);",
          "2052:     Jsi_vtype vtyp = Jsi_ValueTypeGet(val);",
          "2053:     int vlen, isNew = 0;",
          "2054:     const char *vstr = Jsi_ValueString(interp, val, &vlen);",
          "2055:     Jsi_DString dStr = {};",
          "2056:     Jsi_Value *ival = Jsi_ValueArrayIndex(interp, args, 1);",
          "2057:     if (ival && Jsi_ValueIsUndef(interp, ival))",
          "2058:         ival = NULL;",
          "2059:     else if (ival && !Jsi_ValueIsObjType(interp, ival, JSI_OT_OBJECT))",
          "2060:         return Jsi_LogError(\"arg 2: expected object or undef\");",
          "2061:     if (vstr && vlen) {",
          "2062:         char ech = 0;",
          "2063:         const char *nstr = vstr, *cp = vstr;",
          "2064:         while (*cp && (isalnum(*cp) || *cp=='_')) cp++;",
          "2065:         if (*cp) {",
          "2066:             int slen = cp-vstr;",
          "2067:             Jsi_DString sStr = {};",
          "2068:             nstr = Jsi_DSAppendLen(&dStr, vstr, slen);",
          "2069:             if (*cp == '[')",
          "2070:                 ech = ']';",
          "2071:             else if (*cp == '{')",
          "2072:                 ech = '}';",
          "2073:             if (!ech || vstr[vlen-1] != ech) {",
          "2074:                 Jsi_LogError(\"malformed var form is not: STRUCT, STRUCT{...}, STRUCT[...]\");",
          "2075:                 goto errout;",
          "2076:             }",
          "2078:             cd->varParam = Jsi_KeyAdd(interp, Jsi_DSAppendLen(&sStr, cp, vlen-slen));",
          "2079:         }",
          "2080:         cd->structName = Jsi_KeyAdd(interp, nstr);",
          "2081:         val = NULL;",
          "2082:     } else if (vtyp != JSI_VT_OBJECT) {",
          "2083:         Jsi_LogError(\"expected string, object\");",
          "2084:         goto errout;",
          "2085:     }",
          "2086:     if (val && Jsi_OptionsProcess(interp, CDataOptions, cd, val, 0) < 0)",
          "2087:         goto errout;",
          "2089:     if (ival && (cd->mapPtr || cd->arrSize)) {",
          "2090:         Jsi_LogError(\"init can not be used with c-array/map\");",
          "2091:         goto errout;",
          "2092:      }",
          "2094:     if (JSI_OK != jsi_csNewCData(interp, cd, JSI_OPT_NO_SIG))",
          "2095:         goto errout;",
          "2097:     if (ival) {",
          "2098:         interp->callerErr = 1;",
          "2099:         Jsi_RC rc = Jsi_OptionsConf(interp, (Jsi_OptionSpec*)cd->sf, cd->data, ival, ret, 0);",
          "2100:         interp->callerErr = 0;",
          "2101:         if (rc != JSI_OK) {",
          "2102:             isNew = 1;",
          "2103:             goto errout;",
          "2104:         }",
          "2105:     }",
          "2107:     nobj = (Jsi_Obj*)Jsi_ValueGetObj(interp, that);",
          "2108:     cd->objId = Jsi_UserObjNew(interp, &cdataobject, nobj, cd);",
          "2109:     if (cd->objId<0) {",
          "2110:         goto errout;",
          "2111:     }",
          "2112:     cd->fobj = nobj;",
          "2113:     return JSI_OK;",
          "2115: errout:",
          "2116:     Jsi_DSFree(&dStr);",
          "2117:     Jsi_OptionsFree(interp, CDataOptions, cd, 0);",
          "2118:     if (isNew)",
          "2119:        jsi_csObjFree(interp, cd);",
          "2120:     else",
          "2121:         Jsi_Free(cd);",
          "2122:     return JSI_ERROR;",
          "2124: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2145:         return JSI_ERROR;",
          "2146: #endif",
          "2152:     interp->SigHash      = Jsi_HashNew(interp, JSI_KEYS_ONEWORD, NULL);",
          "2153:     interp->StructHash   = Jsi_HashNew(interp, JSI_KEYS_STRING, NULL);",
          "2154:     interp->EnumHash     = Jsi_HashNew(interp, JSI_KEYS_STRING, NULL);",
          "",
          "[Removed Lines]",
          "2148:     Jsi_Hash *fsys = Jsi_UserObjRegister(interp, &cdataobject);",
          "2149:     if (!fsys)",
          "2150:         return Jsi_LogBug(\"Can not init cdata\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2156:     interp->CTypeHash    = Jsi_HashNew(interp, JSI_KEYS_STRING, jsi_csTypeFree);",
          "2157:     interp->TYPEHash     = Jsi_HashNew(interp, JSI_KEYS_STRING, NULL);",
          "2165:         return JSI_ERROR;",
          "2166:     return JSI_OK;",
          "2167: }",
          "",
          "[Removed Lines]",
          "2159:     Jsi_CommandCreateSpecs(interp, cdataobject.name,  cdataCmds,  fsys, JSI_CMDSPEC_ISOBJ);",
          "2160:     Jsi_CommandCreateSpecs(interp, \"CEnum\",  enumCmds,   NULL, 0);",
          "2161:     Jsi_CommandCreateSpecs(interp, \"CStruct\",structCmds, NULL, 0);",
          "2162:     Jsi_CommandCreateSpecs(interp, \"CType\",  typeCmds,   NULL, 0);",
          "2164:     if (Jsi_PkgProvide(interp, cdataobject.name, 1, jsi_InitCData) != JSI_OK)",
          "",
          "[Added Lines]",
          "607:     if (Jsi_PkgProvide(interp, \"CData\", 1, jsi_InitCData) != JSI_OK)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2193:         jsi_csInitStructTables(interp);",
          "2194:         jsi_csInitEnum(interp);",
          "2195:         jsi_csInitEnumItem(interp);",
          "2197:     }",
          "2198:     return rc;",
          "2199: }",
          "",
          "[Removed Lines]",
          "2196:         rc = jsi_csInitVarDefs(interp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiObj.c||src/jsiObj.c": [
          "File: src/jsiObj.c -> src/jsiObj.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "519:     return Jsi_ObjInsert(interp, obj, key, nv, flags);",
          "520: }",
          "522: Jsi_Obj *Jsi_ObjNewObj(Jsi_Interp *interp, Jsi_Value **items, int count)",
          "523: {",
          "524:     Jsi_Obj *obj = Jsi_ObjNewType(interp, JSI_OT_OBJECT);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "522: Jsi_RC Jsi_ObjFreeze(Jsi_Interp *interp, Jsi_Obj *obj, bool freeze, bool modifyOk, bool readCheck) {",
          "523:     bool obnum = !obj->freezeNoModify;",
          "524:     obj->freeze = freeze;",
          "525:     obj->freezeNoModify = !modifyOk;",
          "526:     obj->freezeReadCheck = readCheck;",
          "527:     if (obnum != modifyOk)",
          "528:         jsi_ObjSetFlag(interp, obj, JSI_OM_ISFROZEN, !modifyOk);",
          "529:     return JSI_OK;",
          "530: }",
          "532: Jsi_Hash* Jsi_ObjAccessor(Jsi_Interp *interp, Jsi_Obj *obj, bool isSet, const char *name, Jsi_Value* callback) {",
          "533:     Jsi_Hash *h = NULL;",
          "534:     Jsi_HashEntry *hPtr;",
          "535:     if (isSet) {",
          "536:         if (!obj->setters && callback)",
          "537:             obj->setters = Jsi_HashNew(interp, JSI_KEYS_STRING, jsi_freeValueEntry);",
          "538:         h = obj->setters;",
          "539:     } else {",
          "540:         if (!obj->getters && callback)",
          "541:             obj->getters = Jsi_HashNew(interp, JSI_KEYS_STRING, jsi_freeValueEntry);",
          "542:         h = obj->getters;",
          "543:     }",
          "544:     if (callback) {",
          "545:         bool isNew;",
          "546:         hPtr = Jsi_HashEntryNew(h, name, &isNew);",
          "547:         if (!hPtr || !isNew)",
          "548:             Jsi_LogWarn(\"ignoring duplicate object %s for %s\", isSet?\"set\":\"get\", name);",
          "549:         else {",
          "550:             Jsi_HashValueSet(hPtr, callback);",
          "551:             Jsi_IncrRefCount(interp, callback);",
          "552:         }",
          "553:     } else if (h && name) {",
          "554:         hPtr = Jsi_HashEntryFind(h, name);",
          "555:         if (!hPtr)",
          "556:             Jsi_LogWarn(\"%s accessor not found for %s\", isSet?\"set\":\"get\", name);",
          "557:         else {",
          "558:             callback = Jsi_HashValueGet(hPtr);",
          "559:             if (callback)",
          "560:                 Jsi_DecrRefCount(interp, callback);",
          "561:             Jsi_HashEntryDelete(hPtr);",
          "562:         }",
          "563:     }",
          "564:     return h;",
          "565: }",
          "",
          "---------------"
        ],
        "src/jsiProto.c||src/jsiProto.c": [
          "File: src/jsiProto.c -> src/jsiProto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "398:     obj->freeze = fnum;",
          "399:     obj->freezeNoModify = !bnum;",
          "400:     obj->freezeReadCheck = rnum;",
          "402:         jsi_ObjSetFlag(interp, obj, JSI_OM_ISFROZEN, !bnum);",
          "404:     return JSI_OK;",
          "406: }",
          "",
          "[Removed Lines]",
          "401:     if (obnum != bnum) {",
          "403:     }",
          "",
          "[Added Lines]",
          "401:     if (obnum != bnum)",
          "",
          "---------------"
        ],
        "src/jsiStubs.h||src/jsiStubs.h": [
          "File: src/jsiStubs.h -> src/jsiStubs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #endif",
          "10: #undef JSI_EXTENSION_INI",
          "11: #define JSI_EXTENSION_INI Jsi_Stubs *jsiStubsPtr = NULL;",
          "",
          "[Removed Lines]",
          "8: #define JSI_STUBS_MD5 \"f021be68c79822a0a51be41bcdcd230e\"",
          "",
          "[Added Lines]",
          "8: #define JSI_STUBS_MD5 \"620a82a5186f41bf96d7127b57b6d310\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "451:     Jsi_RC(*_Jsi_ObjGetValues)(Jsi_Interp *interp, Jsi_Obj *obj, Jsi_Value *val);",
          "452:     Jsi_PkgOpts*(*_Jsi_CommandPkgOpts)(Jsi_Interp *interp, Jsi_Func *func);",
          "453:     Jsi_Interp*(*_Jsi_InterpMain)(int argc, char **argv, Jsi_InitProc* initProc);",
          "454:     void *endPtr;",
          "455: } Jsi_Stubs;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "454:     Jsi_RC(*_Jsi_ObjFreeze)(Jsi_Interp *interp, Jsi_Obj *obj, bool freeze, bool modifyOk, bool readCheck);",
          "455:     Jsi_Hash*(*_Jsi_ObjAccessor)(Jsi_Interp *interp, Jsi_Obj *obj, bool isSet, const char *name, Jsi_Value* callback);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "881:     Jsi_ObjGetValues,\\",
          "882:     Jsi_CommandPkgOpts,\\",
          "883:     Jsi_InterpMain,\\",
          "884:     NULL",
          "886: #ifdef JSI_USE_STUBS",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "886:     Jsi_ObjFreeze,\\",
          "887:     Jsi_ObjAccessor,\\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1307: #define Jsi_ObjGetValues(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_ObjGetValues(n0,n1,n2))",
          "1308: #define Jsi_CommandPkgOpts(n0,n1) JSISTUBCALL(jsiStubsPtr, _Jsi_CommandPkgOpts(n0,n1))",
          "1309: #define Jsi_InterpMain(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_InterpMain(n0,n1,n2))",
          "1311: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1314: #define Jsi_ObjFreeze(n0,n1,n2,n3,n4) JSISTUBCALL(jsiStubsPtr, _Jsi_ObjFreeze(n0,n1,n2,n3,n4))",
          "1315: #define Jsi_ObjAccessor(n0,n1,n2,n3,n4) JSISTUBCALL(jsiStubsPtr, _Jsi_ObjAccessor(n0,n1,n2,n3,n4))",
          "",
          "---------------"
        ],
        "src/jsiValue.c||src/jsiValue.c": [
          "File: src/jsiValue.c -> src/jsiValue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1007:     }",
          "1010:     if (obj && value && target->d.obj->freeze) {",
          "1011:         Jsi_Obj *obj = target->d.obj;",
          "1012:         Jsi_Value *v;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1010:     if (!kstr)",
          "1011:         kstr = Jsi_ValueToString(interp, keyval, NULL);",
          "1012:     if (obj && obj->setters) {",
          "1013:         Jsi_Value *v = (Jsi_Value*)Jsi_HashGet(obj->setters, kstr, 0);",
          "1014:         if (v) {",
          "1015:             Jsi_Value *vpargs, *vargs[2], *retStr = Jsi_ValueNew1(interp);",
          "1016:             vargs[0] = value;",
          "1017:             vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, vargs, 1, 0));",
          "1018:             Jsi_IncrRefCount(interp, value);",
          "1019:             Jsi_IncrRefCount(interp, vpargs);",
          "1020:             Jsi_RC rc = Jsi_FunctionInvoke(interp, v, vpargs, &retStr, NULL);",
          "1021:             Jsi_DecrRefCount(interp, vpargs);",
          "1022:             Jsi_DecrRefCount(interp, value);",
          "1023:             Jsi_DecrRefCount(interp, retStr);",
          "1024:             if (rc != JSI_OK || flag&JSI_OM_DONTENUM)",
          "1025:                 return NULL;",
          "1026:             return keyval;// TODO, should not return this!!!",
          "1027:         }",
          "1029:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1028:         target->vt == JSI_VT_OBJECT && target->d.obj->arr) {",
          "1029:         return jsi_ObjArraySetDup(interp, target->d.obj, value, arrayindex);",
          "1030:     }",
          "1052: #if (defined(JSI_HAS___PROTO__) && JSI_HAS___PROTO__==2)",
          "1053:     if (Jsi_Strcmp(kstr, \"__proto__\")==0) {",
          "",
          "[Removed Lines]",
          "1031:     if (!kstr)",
          "1032:         kstr = Jsi_ValueToString(interp, keyval, NULL);",
          "1033:     if (obj && obj->setters) {",
          "1034:         Jsi_Value *v = (Jsi_Value*)Jsi_HashGet(obj->setters, kstr, 0);",
          "1035:         if (v) {",
          "1036:             Jsi_Value *vpargs, *vargs[2], *retStr = Jsi_ValueNew1(interp);",
          "1037:             vargs[0] = value;",
          "1038:             vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, vargs, 1, 0));",
          "1039:             Jsi_IncrRefCount(interp, value);",
          "1040:             Jsi_IncrRefCount(interp, vpargs);",
          "1041:             Jsi_RC rc = Jsi_FunctionInvoke(interp, v, vpargs, &retStr, NULL);",
          "1042:             Jsi_DecrRefCount(interp, vpargs);",
          "1043:             Jsi_DecrRefCount(interp, value);",
          "1044:             Jsi_DecrRefCount(interp, retStr);",
          "1045:             if (rc != JSI_OK || flag&JSI_OM_DONTENUM)",
          "1046:                 return NULL;",
          "1047:             return keyval;// TODO, should not return this!!!",
          "1048:         }",
          "1050:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: Array.prototype.splice = function(start:number, howmany:number=void, ...):array {};",
          "30: Array.prototype.unshift = function(...):number {};",
          "31: var Boolean = function(cmd,args) {};",
          "60: var Channel = function(cmd,args) {};",
          "61: Channel.prototype.close = function():boolean {};",
          "62: Channel.prototype.eof = function():boolean {};",
          "",
          "[Removed Lines]",
          "32: var CData = function(cmd,args) {};",
          "33: CData.prototype.conf = function(options:object|string=void):any {};",
          "34: CData.prototype.get = function(key:string|number|object=null, field:string=void):any {};",
          "35: CData.prototype.incr = function(key:string|number|object|null, field:object|string, value:number=1):number {};",
          "36: CData.prototype.info = function():object {};",
          "37: CData.prototype.names = function():array {};",
          "38: CData.prototype.set = function(key:string|number|object|null, field:object|string, value:any=void):any {};",
          "39: CData.prototype.unset = function(key:string|number|object):any {};",
          "40: var CEnum = function(cmd,args) {};",
          "41: CEnum.prototype.add = function(options:object|string, fields:array|string):any {};",
          "42: CEnum.prototype.conf = function(enum:string, options:object|string=void):any {};",
          "43: CEnum.prototype.fieldconf = function(enum:string, field:string, options:object|string=void):any {};",
          "44: CEnum.prototype.find = function(enum:string, intValue:number):string {};",
          "45: CEnum.prototype.get = function(enum:string):object {};",
          "46: CEnum.prototype.names = function(enum:string=void):array {};",
          "47: CEnum.prototype.remove = function(enum:string):any {};",
          "48: CEnum.prototype.value = function(enum:string, item:string):number {};",
          "49: var CStruct = function(cmd,args) {};",
          "50: CStruct.prototype.add = function(options:object|string, fields:array|string):any {};",
          "51: CStruct.prototype.conf = function(struct:string, options:object|string=void):any {};",
          "52: CStruct.prototype.fieldconf = function(struct:string, field:string, options:object|string=void):any {};",
          "53: CStruct.prototype.get = function(struct, options:object=void):object {};",
          "54: CStruct.prototype.names = function(struct:string=void):array {};",
          "55: CStruct.prototype.remove = function(name:string):any {};",
          "56: CStruct.prototype.schema = function():string {};",
          "57: var CType = function(cmd,args) {};",
          "58: CType.prototype.conf = function(typ:string, options:object|string=void):any {};",
          "59: CType.prototype.names = function(ctype=false):array {};",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: |Boolean|(bool:boolean=false):boolean |Boolean constructor.|",
          "220: ## Channel",
          "",
          "[Removed Lines]",
          "64: ## CData",
          "69: ### Methods",
          "70: |Method|Function Argument Types|Description|",
          "71: |---|---|---|",
          "72: |CData|([options](#options-newcdata):string&#124;object=void, inits:object=undefined):userobj |Create a new struct or map/array of structs.The 2nd arg is used for function option parsing and will report errors at the callers file:line|",
          "73: |conf|([options](#options-cdataconf):object&#124;string=void) |Configure options for c-data.|",
          "74: |get|(key:string&#124;number&#124;object=null, field:string=void) |Get struct/map/array value.|",
          "75: |incr|(key:string&#124;number&#124;object&#124;null, field:object&#124;string, value:number=1):number |Increment a numeric field: returns the new value.|",
          "76: |info|():object |Return info for data.|",
          "77: |names|():array |Return keys for map.|",
          "78: |set|(key:string&#124;number&#124;object&#124;null, field:object&#124;string, value:any=void) |Set a struct/map/array value.|",
          "79: |unset|(key:string&#124;number&#124;object) |Remove entry from map/array.|",
          "80: ### Options \"new\"",
          "81: |Option|Type|Description|Flags|",
          "82: |---|---|---|---|",
          "83: |arrSize|*UINT*|If an array, its size in elements.|initOnly|",
          "84: |flags|*UINT*|Flags.|initOnly|",
          "85: |help|*STRKEY*|Description of data.|initOnly|",
          "86: |keyName|*STRKEY*|Key struct, for key struct maps.|initOnly|",
          "87: |keyType|*STRKEY*|Key id. (one of: **string**, **strkey**, **number**)|initOnly|",
          "88: |mapType|*STRKEY*|If a map, its type. (one of: **none**, **hash**, **tree**, **list**)|initOnly|",
          "89: |maxSize|*UINT*|Limit the array size or number of keys in a map.||",
          "90: |name|*STRKEY*|Name (eg. of var assigned to on create).|initOnly|",
          "91: |noAuto|*BOOL*|Disable auto-create of map keys in set/incr.||",
          "92: |structName|*STRKEY*|Struct used for storing data.|initOnly&#124;required|",
          "93: |user|*INT64*|User data.||",
          "94: |varParam|*STRKEY*|Param for maps/array vars.|initOnly|",
          "97: ## CEnum",
          "101: Enum commands. Note: Enum() is a shortcut for Enum.add().",
          "104: ### Methods",
          "105: |Method|Function Argument Types|Description|",
          "106: |---|---|---|",
          "107: |add|([options](#options-cenumadd):object&#124;string, fields:array&#124;string) |Create a new enum: value of items same as in fieldconf.|",
          "108: |conf|([options](#options-cenumconf):object&#124;string=void) |Configure options for enum.|",
          "109: |fieldconf|([options](#options-cenumfieldconf):object&#124;string=void) |Configure options for fields.|",
          "110: |find|(enum:string, intValue:number):string |Find item with given value in enum.|",
          "111: |get|(enum:string):object |Return enum definition.|",
          "112: |names|(enum:string=void):array |Return name list of all enums, or items within one enum.|",
          "113: |remove|(enum:string) |Remove an enum.|",
          "114: |value|(enum:string, item:string):number |Return value for given enum item.|",
          "115: ### Options \"CEnum.add\"",
          "116: |Option|Type|Description|Flags|",
          "117: |---|---|---|---|",
          "118: |flags|*INT64*|Flags for enum.|initOnly|",
          "119: |help|*STRKEY*|Description of enum.|initOnly|",
          "120: |name|*STRKEY*|Name of enum.|initOnly|",
          "121: |idx|*UINT*|Number of items in enum.|readOnly|",
          "122: ### Options \"CEnum.conf\"",
          "123: |Option|Type|Description|Flags|",
          "124: |---|---|---|---|",
          "125: |flags|*INT64*|Flags for enum.|initOnly|",
          "126: |help|*STRKEY*|Description of enum.|initOnly|",
          "127: |name|*STRKEY*|Name of enum.|initOnly|",
          "128: |idx|*UINT*|Number of items in enum.|readOnly|",
          "129: ### Options \"CEnum.fieldconf\"",
          "130: |Option|Type|Description|Flags|",
          "131: |---|---|---|---|",
          "132: |flags|*INT64*|Flags for item.|initOnly|",
          "133: |help|*STRKEY*|Desciption of item.|initOnly|",
          "134: |name|*STRKEY*|Name of item.|initOnly|",
          "135: |value|*INT64*|Value for item.|initOnly|",
          "136: |idx|*UINT*|Index of item in enum.|readOnly|",
          "139: ## CStruct",
          "143: Struct commands. Note: Struct() is a shortcut for Struct.add().",
          "146: ### Methods",
          "147: |Method|Function Argument Types|Description|",
          "148: |---|---|---|",
          "149: |add|([options](#options-cstructadd):object&#124;string, fields:array&#124;string) |Create a struct: field values same as in fieldconf.|",
          "150: |conf|([options](#options-cstructconf):object&#124;string=void) |Configure options for struct.|",
          "151: |fieldconf|([options](#options-cstructfieldconf):object&#124;string=void) |Configure options for fields.|",
          "152: |get|(struct, options:object=void):object |Return the struct definition.|",
          "153: |names|(struct:string=void):array |Return name list of all structs, or fields for one struct.|",
          "154: |remove|(name:string) |Remove a struct.|",
          "155: |schema|():string |Return database schema for struct.|",
          "156: ### Options \"CStruct.add\"",
          "157: |Option|Type|Description|Flags|",
          "158: |---|---|---|---|",
          "159: |crc|*UINT32*|Crc for struct.|initOnly|",
          "160: |flags|*INT64*|Flags for struct.|initOnly|",
          "161: |help|*STRKEY*|Struct description.|initOnly|",
          "162: |idx|*UINT32*|Number of fields in struct.|readOnly|",
          "163: |name|*STRKEY*|Name of struct.|initOnly&#124;required|",
          "164: |size|*UINT*|Size of struct in bytes.|readOnly|",
          "165: |ssig|*UINT32*|Signature for struct.|initOnly|",
          "166: |value|*INT64*|Reference count.|readOnly|",
          "167: ### Options \"CStruct.conf\"",
          "168: |Option|Type|Description|Flags|",
          "169: |---|---|---|---|",
          "170: |crc|*UINT32*|Crc for struct.|initOnly|",
          "171: |flags|*INT64*|Flags for struct.|initOnly|",
          "172: |help|*STRKEY*|Struct description.|initOnly|",
          "173: |idx|*UINT32*|Number of fields in struct.|readOnly|",
          "174: |name|*STRKEY*|Name of struct.|initOnly&#124;required|",
          "175: |size|*UINT*|Size of struct in bytes.|readOnly|",
          "176: |ssig|*UINT32*|Signature for struct.|initOnly|",
          "177: |value|*INT64*|Reference count.|readOnly|",
          "178: ### Options \"CStruct.fieldconf\"",
          "179: |Option|Type|Description|Flags|",
          "180: |---|---|---|---|",
          "181: |arrSize|*UINT*|Size of field if an array.|initOnly|",
          "182: |bits|*UINT32*|Size of bitfield.|initOnly|",
          "183: |boffset|*UINT32*|Bit offset of field within struct.|readOnly|",
          "184: |flags|*INT64*|Flags for field.|initOnly|",
          "185: |idx|*UINT32*|Index of field in struct.|readOnly|",
          "186: |help|*STRKEY*|Field description.|initOnly|",
          "187: |info|*STRKEY*|Info for field.|initOnly|",
          "188: |name|*STRKEY*|Name of field.|initOnly&#124;required|",
          "189: |offset|*UINT*|Offset of field within struct.|readOnly|",
          "190: |size|*UINT*|Size of field in struct.|readOnly|",
          "191: |type|*CUSTOM*|Type of field.|initOnly&#124;required|",
          "192: |init|*CUSTOM*|Initial value for field.|initOnly|",
          "195: ## CType",
          "199: Type commands. Note: Type() is a shortcut for Type.conf().",
          "202: ### Methods",
          "203: |Method|Function Argument Types|Description|",
          "204: |---|---|---|",
          "205: |conf|([options](#options-ctypeconf):object&#124;string=void) |Configure options for type.|",
          "206: |names|(ctype=false):array |Return type names.|",
          "207: ### Options \"CType.conf\"",
          "208: |Option|Type|Description|Flags|",
          "209: |---|---|---|---|",
          "210: |idName|*STRKEY*|The id name: usually upcased cName.|initOnly|",
          "211: |cName|*STRKEY*|C type name.|initOnly|",
          "212: |help|*STRKEY*|Description of id.|initOnly|",
          "213: |fmt|*STRKEY*|Printf format for id.|initOnly|",
          "214: |xfmt|*STRKEY*|Hex printf format for id.|initOnly|",
          "215: |flags|*INT64*|Flags for id.|initOnly|",
          "216: |size|*INT*|Size for id.|initOnly|",
          "217: |user|*INT64*|User data.||",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
      "candidate_info": {
        "commit_hash": "5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
        "files": [
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiArray.c",
          "src/jsiCmds.c",
          "tests/locals.jsi",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.6\": Fix crashes in Array for \"integer overflow #10\"\n\nFossilOrigin-Name: 50642d64b8f0a4e62df68e59fcb2ef0923c3dbec8fc8a15d38b1ddbe655c38d6",
        "before_after_code_files": [
          "src/jsi.h||src/jsi.h",
          "src/jsiArray.c||src/jsiArray.c",
          "src/jsiCmds.c||src/jsiCmds.c",
          "tests/locals.jsi||tests/locals.jsi",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c"
          ]
        }
      },
      "candidate_diff": {
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 4",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 6",
          "",
          "---------------"
        ],
        "src/jsiArray.c||src/jsiArray.c": [
          "File: src/jsiArray.c -> src/jsiArray.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: #define NO_QSORT_R 1",
          "8: #endif",
          "10: static Jsi_RC jsi_ArrayPushCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "11:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "12: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: static uint jsi_SizeOfArray(Jsi_Interp *interp, Jsi_Obj *obj) {",
          "11:     if (!obj || !obj->arr)",
          "12:         return 0;",
          "13:     return obj->arrCnt;",
          "14: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19:     obj = _this->d.obj;",
          "21:     int argc = Jsi_ValueGetLength(interp, args);",
          "27:     int i;",
          "28:     for (i = 0; i < argc; ++i) {",
          "29:         Jsi_Value *ov = Jsi_ValueArrayIndex(interp, args, i);",
          "",
          "[Removed Lines]",
          "22:     int curlen = Jsi_ObjGetLength(interp, obj);",
          "23:     if (curlen < 0) {",
          "24:         Jsi_ObjSetLength(interp, obj, 0);",
          "25:     }",
          "",
          "[Added Lines]",
          "28:     int curlen = jsi_SizeOfArray(interp, obj);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "31:         Jsi_ValueInsertArray(interp, _this, curlen + i, ov, 0);",
          "32:     }",
          "35:     return JSI_OK;",
          "36: }",
          "",
          "[Removed Lines]",
          "34:     Jsi_ValueMakeNumber(interp, ret, Jsi_ObjGetLength(interp, obj));",
          "",
          "[Added Lines]",
          "36:     Jsi_ValueMakeNumber(interp, ret, jsi_SizeOfArray(interp, obj));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "45:     Jsi_Value *v;",
          "46:     Jsi_Obj *obj;",
          "47:     obj = _this->d.obj;",
          "50:     if (i < 0) {",
          "51:         Jsi_ValueMakeUndef(interp, ret);",
          "",
          "[Removed Lines]",
          "48:     int i = Jsi_ObjGetLength(interp, obj) - 1;",
          "",
          "[Added Lines]",
          "50:     int i = jsi_SizeOfArray(interp, obj) - 1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "78:     int argc, curlen;",
          "79:     Jsi_DString dStr = {};",
          "82:     if (curlen == 0) {",
          "83:         goto bail;",
          "84:     }",
          "",
          "[Removed Lines]",
          "81:     curlen = Jsi_ObjGetLength(interp, _this->d.obj);",
          "",
          "[Added Lines]",
          "83:     curlen = jsi_SizeOfArray(interp, _this->d.obj);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "89:             jstr = Jsi_ValueToString(interp, sc, NULL);",
          "90:     }",
          "93:         goto bail;",
          "94:     }",
          "95:     int i;",
          "",
          "[Removed Lines]",
          "92:     if (0 == (argc=Jsi_ObjGetLength(interp, _this->d.obj))) {",
          "",
          "[Added Lines]",
          "94:     if (0 == (argc=jsi_SizeOfArray(interp, _this->d.obj))) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "233:         return;",
          "234:     }",
          "237:     if (len <= 0) return;",
          "239:     Jsi_Value *v0 = Jsi_ValueArrayIndex(interp, v, 0);",
          "",
          "[Removed Lines]",
          "236:     int len = Jsi_ObjGetLength(interp, v->d.obj);",
          "",
          "[Added Lines]",
          "238:     int len = jsi_SizeOfArray(interp, v->d.obj);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "256: static Jsi_RC jsi_ArrayFlatSub(Jsi_Interp *interp, Jsi_Obj* nobj, Jsi_Value *arr, int depth) {",
          "259:     if (len <= 0) return JSI_OK;",
          "260:     Jsi_RC rc = JSI_OK;",
          "262:     for (i = 0; i < len && rc == JSI_OK; i++) {",
          "263:         Jsi_Value *t = Jsi_ValueArrayIndex(interp, arr, i);",
          "264:         if (t && depth>0 && Jsi_ValueIsArray(interp, t))",
          "",
          "[Removed Lines]",
          "258:     int i, n = 0, len = Jsi_ObjGetLength(interp, arr->d.obj);",
          "261:     int clen = Jsi_ObjGetLength(interp, nobj);",
          "",
          "[Added Lines]",
          "260:     int i, n = 0, len = jsi_SizeOfArray(interp, arr->d.obj);",
          "263:     int clen = jsi_SizeOfArray(interp, nobj);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "302:     obj = _this->d.obj;",
          "304:     argc = Jsi_ValueGetLength(interp, args);",
          "309:     Jsi_ObjListifyArray(interp, obj);",
          "311:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
          "",
          "[Removed Lines]",
          "305:     curlen = Jsi_ObjGetLength(interp, obj);",
          "306:     if (curlen < 0) {",
          "307:         Jsi_ObjSetLength(interp, obj, 0);",
          "308:     }",
          "",
          "[Added Lines]",
          "307:     curlen = jsi_SizeOfArray(interp, obj);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "377:     if (!sthis)",
          "378:         sthis = nthis = Jsi_ValueNew1(interp);",
          "379:     obj = _this->d.obj;",
          "384:     Jsi_ObjListifyArray(interp, obj);",
          "385:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
          "386:     nsiz = obj->arrCnt;",
          "",
          "[Removed Lines]",
          "380:     curlen = Jsi_ObjGetLength(interp, obj);",
          "381:     if (curlen < 0) {",
          "382:         Jsi_ObjSetLength(interp, obj, 0);",
          "383:     }",
          "",
          "[Added Lines]",
          "379:     curlen = jsi_SizeOfArray(interp, obj);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "439:     if (!sthis)",
          "440:         sthis = nthis = Jsi_ValueNew1(interp);",
          "441:     obj = _this->d.obj;",
          "446:     Jsi_ObjListifyArray(interp, obj);",
          "447:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
          "448:     nsiz = obj->arrCnt;",
          "",
          "[Removed Lines]",
          "442:     curlen = Jsi_ObjGetLength(interp, obj);",
          "443:     if (curlen < 0) {",
          "444:         Jsi_ObjSetLength(interp, obj, 0);",
          "445:     }",
          "",
          "[Added Lines]",
          "438:     curlen = jsi_SizeOfArray(interp, obj);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "522:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
          "523:         return Jsi_LogError(\"expected array object\");",
          "524:     Jsi_Obj *obj;",
          "526:     uint i;",
          "527:     Jsi_Value *func, *vpargs;",
          "",
          "[Removed Lines]",
          "525:     int curlen;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "535:         sthis = nthis = Jsi_ValueNew1(interp);",
          "537:     obj = _this->d.obj;",
          "542:     Jsi_ObjListifyArray(interp, obj);",
          "543:     Jsi_RC rc = JSI_OK;",
          "",
          "[Removed Lines]",
          "538:     curlen = Jsi_ObjGetLength(interp, obj);",
          "539:     if (curlen < 0) {",
          "540:         Jsi_ObjSetLength(interp, obj, 0);",
          "541:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "566:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
          "567:         return Jsi_LogError(\"expected array\");",
          "568:     Jsi_Obj *obj;",
          "570:     uint i;",
          "571:     Jsi_RC rc = JSI_OK;",
          "572:     Jsi_Value *func, *vpargs, *sthis = Jsi_ValueArrayIndex(interp, args, 1);",
          "",
          "[Removed Lines]",
          "569:     int curlen;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "579:         sthis = nthis = Jsi_ValueNew1(interp);",
          "581:     obj = _this->d.obj;",
          "586:     Jsi_ObjListifyArray(interp, obj);",
          "587:     int fval = 0;",
          "588:     Jsi_Value *nrPtr = Jsi_ValueNew1(interp);",
          "",
          "[Removed Lines]",
          "582:     curlen = Jsi_ObjGetLength(interp, obj);",
          "583:     if (curlen < 0) {",
          "584:         Jsi_ObjSetLength(interp, obj, 0);",
          "585:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "628:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
          "629:         return Jsi_LogError(\"expected array\");",
          "630:     Jsi_RC rc = JSI_OK;",
          "632:     Jsi_Obj *obj;",
          "633:     Jsi_Value *func, *vpargs, *ini = Jsi_ValueArrayIndex(interp, args, 1);",
          "",
          "[Removed Lines]",
          "631:     int curlen, i;",
          "",
          "[Added Lines]",
          "614:     int i;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "639:     Jsi_Value *nrPtr = Jsi_ValueNew1(interp);",
          "640:     obj = _this->d.obj;",
          "644:     Jsi_ObjListifyArray(interp, obj);",
          "645:     Jsi_Value *vobjs[4];",
          "646:     int n, rev = (op==2);",
          "",
          "[Removed Lines]",
          "641:     curlen = Jsi_ObjGetLength(interp, obj);",
          "642:     if (curlen < 0)",
          "643:         Jsi_ObjSetLength(interp, obj, 0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "717:         goto bail;",
          "718:     }",
          "721:     if (n == 0) {",
          "722:         goto bail;",
          "723:     }",
          "",
          "[Removed Lines]",
          "720:     n = Jsi_ObjGetLength(interp, obj);",
          "",
          "[Added Lines]",
          "700:     n = jsi_SizeOfArray(interp, obj);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "769: static Jsi_RC jsi_ArraySizeOfCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,Jsi_Value **ret, Jsi_Func *funcPtr) {",
          "770:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
          "771:         return Jsi_LogError(\"expected array object\");",
          "773:     Jsi_ValueMakeNumber(interp, ret, i);",
          "774:     return JSI_OK;",
          "775: }",
          "",
          "[Removed Lines]",
          "772:     int i = Jsi_ObjGetLength(interp, _this->d.obj);",
          "",
          "[Added Lines]",
          "752:     int i = jsi_SizeOfArray(interp, _this->d.obj);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "780:     Jsi_Value *v;",
          "781:     Jsi_Obj *obj = _this->d.obj;",
          "782:     Jsi_ObjListifyArray(interp, obj);",
          "785:     if (n<=0) {",
          "786:         Jsi_ValueMakeUndef(interp, ret);",
          "787:     } else {",
          "",
          "[Removed Lines]",
          "783:     uint n = Jsi_ObjGetLength(interp, obj);",
          "784:     assert(n <= obj->arrCnt);",
          "",
          "[Added Lines]",
          "763:     uint n = jsi_SizeOfArray(interp, obj);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "803:     Jsi_Obj *obj = _this->d.obj;",
          "804:     int argc = Jsi_ValueGetLength(interp, args);",
          "809:     if (argc <= 0) {",
          "810:         Jsi_ValueMakeNumber(interp, ret, 0);",
          "811:         return JSI_OK;",
          "",
          "[Removed Lines]",
          "805:     int curlen = Jsi_ObjGetLength(interp, obj);",
          "806:     if (curlen < 0) {",
          "807:         Jsi_ObjSetLength(interp, obj, 0);",
          "808:     }",
          "",
          "[Added Lines]",
          "784:     int curlen = jsi_SizeOfArray(interp, obj);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "825:     }",
          "826:     Jsi_ObjSetLength(interp, obj, curlen+argc);",
          "829:     return JSI_OK;",
          "830: }",
          "",
          "[Removed Lines]",
          "828:     Jsi_ValueMakeNumber(interp, ret, Jsi_ObjGetLength(interp, obj));",
          "",
          "[Added Lines]",
          "804:     Jsi_ValueMakeNumber(interp, ret, jsi_SizeOfArray(interp, obj));",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "841:     Jsi_Obj *obj = _this->d.obj;",
          "844:     if (start && Jsi_GetNumberFromValue(interp, start, &nstart) == JSI_OK) {",
          "845:         istart = (int)nstart;",
          "",
          "[Removed Lines]",
          "842:     n = Jsi_ObjGetLength(interp, obj);",
          "",
          "[Added Lines]",
          "818:     n = jsi_SizeOfArray(interp, obj);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "902:         goto bail;",
          "903:     }",
          "904:     obj = _this->d.obj;",
          "906:     if (Jsi_GetNumberFromValue(interp,start, &nstart) == JSI_OK) {",
          "907:         istart = (int)nstart;",
          "908:         if (istart > n)",
          "",
          "[Removed Lines]",
          "905:     n = Jsi_ObjGetLength(interp, obj);",
          "",
          "[Added Lines]",
          "881:     n = jsi_SizeOfArray(interp, obj);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1166:     argc = Jsi_ValueGetLength(interp, args);",
          "1167:     istart = 0;",
          "1168:     ilen = (argc>=2 ? argc - 2 : 0);",
          "1170:     curlen = n;",
          "1172:     if (!start) {",
          "",
          "[Removed Lines]",
          "1169:     n = Jsi_ObjGetLength(interp, obj);",
          "",
          "[Added Lines]",
          "1145:     n = jsi_SizeOfArray(interp, obj);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1202:     }",
          "1204:     if (curlen < 0) {",
          "1206:     }",
          "1207:     Jsi_ObjListifyArray(interp, obj);",
          "",
          "[Removed Lines]",
          "1205:         Jsi_ObjSetLength(interp, obj, 0);",
          "",
          "[Added Lines]",
          "1181:         Jsi_ObjSetLength(interp, obj, curlen=0);",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4509:     return rc;",
          "4510: }",
          "4512: static const char *jsi_FindHelpStr(const char *fstr, const char *key, Jsi_DString *dPtr) {",
          "4513:     if (!fstr) return \"\";",
          "4514:     Jsi_DSSetLength(dPtr, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4512: static Jsi_RC SysRunMainCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "4513:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "4514: {",
          "4515:     if (jsi_isMain(interp))",
          "4516:         return SysRunModuleCmd(interp, args, _this, ret, funcPtr);",
          "4517:     return JSI_OK;",
          "4518: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4762:     { \"execZip\",    InfoExecZipCmd,     0,  0, \"\", .help=\"If executing a .zip file, return file name\", .retType=(uint)JSI_TT_STRING|JSI_TT_VOID },",
          "4763:     { \"files\",      InfoFilesCmd,       0,  0, \"\", .help=\"Return list of all sourced files\", .retType=(uint)JSI_TT_ARRAY },",
          "4764:     { \"funcs\",      InfoFuncsCmd,       0,  1, \"string|regexp|object=void\", .help=\"Return details or list of matching functions\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_OBJECT },",
          "4766:     { \"interp\",     jsi_InterpInfo,     0,  1, \"interp:userobj=void\", .help=\"Return info on given or current interp\", .retType=(uint)JSI_TT_OBJECT },",
          "4767:     { \"isMain\",     InfoIsMainCmd,      0,  0, \"\", .help=\"Return true if current script was the main script invoked from command-line\", .retType=(uint)JSI_TT_BOOLEAN },",
          "4768:     { \"keywords\",   InfoKeywordsCmd,    0,  2, \"isSql=false, name:string=void\", .help=\"Return/lookup reserved keyword\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_BOOLEAN },",
          "",
          "[Removed Lines]",
          "4765:     { \"locals\",     InfoLocalsCmd,      0,  1, \"varsOnly:boolean=void\", .help=\"Return functions/vars inside local function\", .retType=(uint)JSI_TT_OBJECT },",
          "",
          "[Added Lines]",
          "4773:     { \"locals\",     InfoLocalsCmd,      0,  1, \"filter:boolean=void\", .help=\"Return locals; use filter=true/false just vars/functions\", .retType=(uint)JSI_TT_OBJECT },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4863:     { \"puts\",       SysPutsCmd,      1, -1, \"val, ...\", .help=\"Output one or more values to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_puts },",
          "4864:     { \"quote\",      SysQuoteCmd,     1,  1, \"val:string\", .help=\"Return quoted string\", .retType=(uint)JSI_TT_STRING },",
          "4865:     { \"require\",    SysRequireCmd,   0,  3, \"name:string=void, version:number|string=1, options:object=void\", .help=\"Load/query packages\", .retType=(uint)JSI_TT_NUMBER|JSI_TT_OBJECT|JSI_TT_ARRAY, .flags=0, .info=FN_require, .opts=jsiModuleOptions },",
          "4866:     { \"runModule\",  SysRunModuleCmd, 0,  2, \"cmd:string|null|function=void, conf:array=undefined\", .help=\"Invoke named module. If name is empty, uses file basename. If isMain and no args givine parses console.args\", .retType=(uint)JSI_TT_ANY, .flags=0},",
          "4867:     { \"sleep\",      SysSleepCmd,     0,  1, \"secs:number=1.0\",  .help=\"sleep for N milliseconds, minimum .001\", .retType=(uint)JSI_TT_VOID },",
          "4868: #ifndef JSI_OMIT_EVENT",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4874:     { \"runMain\",    SysRunMainCmd,   0,  2, \"cmd:string|null|function=void, conf:array=undefined\", .help=\"If isMain invokes runModule\", .retType=(uint)JSI_TT_ANY, .flags=0},",
          "",
          "---------------"
        ],
        "tests/locals.jsi||tests/locals.jsi": [
          "File: tests/locals.jsi -> tests/locals.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: function foo() {",
          "4:   function bar() { }",
          "5:   var x = 1;",
          "6: ;  Info.locals();",
          "7: ;  Info.locals(false);",
          "8: ;  Info.locals(true);",
          "9: }",
          "11: foo();",
          "14: =!EXPECTSTART!=",
          "15: Info.locals() ==> { bar:\"function bar() {...}\", x:1 }",
          "16: Info.locals(false) ==> { bar:\"function bar() {...}\" }",
          "17: Info.locals(true) ==> { x:1 }",
          "18: =!EXPECTEND!=",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "140: Info.prototype.isMain = function():boolean {};",
          "141: Info.prototype.keywords = function(isSql=false, name:string=void):boolean|array {};",
          "142: Info.prototype.level = function(level:number=void):number|array|object {};",
          "144: Info.prototype.lookup = function(name:string):any {};",
          "145: Info.prototype.methods = function(val:string|regexp):array|object {};",
          "146: Info.prototype.named = function(name:string=void):array|userobj {};",
          "",
          "[Removed Lines]",
          "143: Info.prototype.locals = function(varsOnly:boolean=void):object {};",
          "",
          "[Added Lines]",
          "143: Info.prototype.locals = function(filter:boolean=void):object {};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "303: System.prototype.puts = function(val, ...):void {};",
          "304: System.prototype.quote = function(val:string):string {};",
          "305: System.prototype.require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
          "306: System.prototype.runModule = function(cmd:string|null|function=void, conf:array=undefined):any {};",
          "307: System.prototype.setInterval = function(callback:function, ms:number):number {};",
          "308: System.prototype.setTimeout = function(callback:function, ms:number):number {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "306: System.prototype.runMain = function(cmd:string|null|function=void, conf:array=undefined):any {};",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "394: var puts = function(val, ...):void {};",
          "395: var quote = function(val:string):string {};",
          "396: var require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
          "397: var runModule = function(cmd:string|null|function=void, conf:array=undefined):any {};",
          "398: var setInterval = function(callback:function, ms:number):number {};",
          "399: var setTimeout = function(callback:function, ms:number):number {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "398: var runMain = function(cmd:string|null|function=void, conf:array=undefined):any {};",
          "",
          "---------------"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "552: <tr><td>level</td><td>level(level:number=void):number|array|object </td><td>Return current level or details of a call-stack frame. With no arg, returns the number of the current stack frame level.",
          "553: Otherwise returns details on the specified level.",
          "554: The topmost level is 1, and 0 is the current level, and a negative level translates as relative to the current level.</td></tr>",
          "556: <tr><td>lookup</td><td>lookup(name:string) </td><td>Given string name, lookup and return value, eg: function.</td></tr>",
          "557: <tr><td>methods</td><td>methods(val:string|regexp):array|object </td><td>Return functions and commands.</td></tr>",
          "558: <tr><td>named</td><td>named(name:string=void):array|userobj </td><td>Returns command names for builtin Objects, eg: 'File', 'Interp', sub-Object names, or the named object.</td></tr>",
          "",
          "[Removed Lines]",
          "555: <tr><td>locals</td><td>locals(varsOnly:boolean=void):object </td><td>Return functions/vars inside local function.</td></tr>",
          "",
          "[Added Lines]",
          "555: <tr><td>locals</td><td>locals(filter:boolean=void):object </td><td>Return locals; use filter=true/false just vars/functions.</td></tr>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1361: With two arguments, returns object containing: version, loadFile, func.",
          "1362: A third argument sets options for package or module.",
          "1363: Note an error is thrown if requested version is greater than actual version.</td></tr>",
          "1364: <tr><td>runModule</td><td>runModule(cmd:string|null|function=void, conf:array=undefined) </td><td>Invoke named module. If name is empty, uses file basename. If isMain and no args givine parses console.args.</td></tr>",
          "1365: <tr><td>setInterval</td><td>setInterval(callback:function, ms:number):number </td><td>Setup recurring function to run every given millisecs.</td></tr>",
          "1366: <tr><td>setTimeout</td><td>setTimeout(callback:function, ms:number):number </td><td>Setup function to run after given millisecs.</td></tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1364: <tr><td>runMain</td><td>runMain(cmd:string|null|function=void, conf:array=undefined) </td><td>If isMain invokes runModule.</td></tr>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f865853f222f32e977ce20640242c71cc6888fc7",
      "candidate_info": {
        "commit_hash": "f865853f222f32e977ce20640242c71cc6888fc7",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/f865853f222f32e977ce20640242c71cc6888fc7",
        "files": [
          "src/jsi.h",
          "src/jsiEval.c",
          "src/jsiFunc.c",
          "src/jsiInt.h",
          "src/jsiProto.c",
          "tests/bind.jsi",
          "tests/prob/bind.js",
          "tools/protos.jsi"
        ],
        "message": "Callback finalize.\n\nFossilOrigin-Name: 40ec67d315a25eecafc91b4ac267de92db06c2a040e2a669aafc32ff83483185",
        "before_after_code_files": [
          "src/jsi.h||src/jsi.h",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiFunc.c||src/jsiFunc.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiProto.c||src/jsiProto.c",
          "tests/bind.jsi||tests/bind.jsi",
          "tests/prob/bind.js||tests/prob/bind.js",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiEval.c||src/jsiEval.c",
            "src/jsiFunc.c||src/jsiFunc.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiEval.c||src/jsiEval.c",
            "src/jsiFunc.c||src/jsiFunc.c"
          ]
        }
      },
      "candidate_diff": {
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 13",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 14",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #define _jsi_THIS (interp->Obj_this)",
          "13: #define _jsi_THISIDX(s) interp->Obj_this[s]",
          "23: static jsi_Pstate* jsiNewParser(Jsi_Interp* interp, const char *codeStr, Jsi_Channel fp, int iseval)",
          "24: {",
          "",
          "[Removed Lines]",
          "15: static Jsi_RC jsi_EvalLogErr(Jsi_Interp *interp, const char *str) { Jsi_LogMsg(interp, JSI_ERROR, \"%s\", str); return JSI_ERROR; }",
          "17: #define _jsi_StrictChk(v) ((strict==0 || !Jsi_NumberIsNaN(v->d.num)) ? JSI_OK : jsi_EvalLogErr(interp, \"value is NaN\"))",
          "18: #define _jsi_StrictChk2(v1,v2)  ((strict==0  || (Jsi_NumberIsNaN(v1->d.num)==0 && Jsi_NumberIsNaN(v2->d.num)==0))  ? JSI_OK : jsi_EvalLogErr(interp, \"value is NaN\"))",
          "19: #define _jsi_StrictUChk(v) ((strict==0 || v->vt != JSI_VT_UNDEF) ? JSI_OK : jsi_EvalLogErr(interp, \"value is undefined\"))",
          "20: #define _jsi_StrictUChk2(v1,v2)  ((strict==0  || (v1->vt != JSI_VT_UNDEF && v2->vt != JSI_VT_UNDEF))  ? JSI_OK : jsi_EvalLogErr(interp, \"value is undefined\"))",
          "21: #define _jsi_StrictUChk3(v1,v2)  ((strict==0  || (v1->vt != JSI_VT_UNDEF || v2->vt == JSI_VT_UNDEF))  ? JSI_OK : jsi_EvalLogErr(interp, \"lhs value undefined in ===/!==\") )",
          "",
          "[Added Lines]",
          "15: static Jsi_RC jsiEvalLogErr(Jsi_Interp *interp, const char *str) { Jsi_LogMsg(interp, JSI_ERROR, \"%s\", str); return JSI_ERROR; }",
          "17: #define _jsi_StrictChk(v) ((strict==0 || !Jsi_NumberIsNaN(v->d.num)) ? JSI_OK : jsiEvalLogErr(interp, \"value is NaN\"))",
          "18: #define _jsi_StrictChk2(v1,v2)  ((strict==0  || (Jsi_NumberIsNaN(v1->d.num)==0 && Jsi_NumberIsNaN(v2->d.num)==0))  ? JSI_OK : jsiEvalLogErr(interp, \"value is NaN\"))",
          "19: #define _jsi_StrictUChk(v) ((strict==0 || v->vt != JSI_VT_UNDEF) ? JSI_OK : jsiEvalLogErr(interp, \"value is undefined\"))",
          "20: #define _jsi_StrictUChk2(v1,v2)  ((strict==0  || (v1->vt != JSI_VT_UNDEF && v2->vt != JSI_VT_UNDEF))  ? JSI_OK : jsiEvalLogErr(interp, \"value is undefined\"))",
          "21: #define _jsi_StrictUChk3(v1,v2)  ((strict==0  || (v1->vt != JSI_VT_UNDEF || v2->vt == JSI_VT_UNDEF))  ? JSI_OK : jsiEvalLogErr(interp, \"lhs value undefined in ===/!==\") )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:     return r;",
          "83: }",
          "86:     int i;",
          "87:     Jsi_Value **v = (Jsi_Value **)Jsi_Realloc(old, cnt* sizeof(Jsi_Value*));",
          "88:     for (i=oldsz; i<cnt; i++)",
          "",
          "[Removed Lines]",
          "85: static Jsi_Value** jsi_ValuesAlloc(Jsi_Interp *interp, int cnt, Jsi_Value**old, int oldsz) {",
          "",
          "[Added Lines]",
          "85: static Jsi_Value** jsiValuesAlloc(Jsi_Interp *interp, int cnt, Jsi_Value**old, int oldsz) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97:         interp->maxStack += STACK_INCR_SIZE;",
          "98:     else",
          "99:         interp->maxStack = STACK_INIT_SIZE;",
          "102: }",
          "104: static void jsiPush(Jsi_Interp* interp, int n) {",
          "",
          "[Removed Lines]",
          "100:     _jsi_STACK = jsi_ValuesAlloc(interp, interp->maxStack, _jsi_STACK, oldsz);",
          "101:     _jsi_THIS = jsi_ValuesAlloc(interp, interp->maxStack, _jsi_THIS, oldsz); //TODO:!!! use interp->framePtr for this.",
          "",
          "[Added Lines]",
          "100:     _jsi_STACK = jsiValuesAlloc(interp, interp->maxStack, _jsi_STACK, oldsz);",
          "101:     _jsi_THIS = jsiValuesAlloc(interp, interp->maxStack, _jsi_THIS, oldsz); //TODO:!!! use interp->framePtr for this.",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "146: }",
          "150: {",
          "151:     Jsi_Value *v;",
          "152:     if (dst->vt != JSI_VT_VARIABLE) {",
          "",
          "[Removed Lines]",
          "149: static Jsi_RC inline jsi_ValueAssign(Jsi_Interp *interp, Jsi_Value *dst, Jsi_Value* src, int lop)",
          "",
          "[Added Lines]",
          "149: static Jsi_RC inline jsiValueAssign(Jsi_Interp *interp, Jsi_Value *dst, Jsi_Value* src, int lop)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "235:     jsiPop(interp, 1);                                          \\",
          "236: }",
          "239:     Jsi_Value *v, *v1 = _jsi_STACK[interp->framePtr->Sp-i1], *v2 = _jsi_STACK[interp->framePtr->Sp-i2], *res = _jsi_TOQ;",
          "240:     int val = 0, l1 = 0, l2 = 0;",
          "241:     bool strict = interp->strict;",
          "",
          "[Removed Lines]",
          "238: static Jsi_RC jsi_logic_less(Jsi_Interp* interp, int i1, int i2) {",
          "",
          "[Added Lines]",
          "238: static Jsi_RC jsiLogicLess(Jsi_Interp* interp, int i1, int i2) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "285:     return JSI_OK;",
          "286: }",
          "289: {",
          "290:     static char buf[JSI_MAX_NUMBER_STRING];",
          "291:     if (!v)",
          "",
          "[Removed Lines]",
          "288: static const char *jsi_evalprint(Jsi_Value *v)",
          "",
          "[Added Lines]",
          "288: static const char *jsiEvalPrint(Jsi_Value *v)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "308:     return buf;",
          "309: }",
          "313: {",
          "314:     interp->framePtr->tryDepth--;",
          "315:     jsi_TryList *t = (*head)->next;",
          "",
          "[Removed Lines]",
          "311: #define pop_try(head) jsi_pop_try(interp, &head)",
          "312: static void jsi_pop_try(Jsi_Interp* interp, jsi_TryList **head)",
          "",
          "[Added Lines]",
          "311: #define pop_try(head) jsiPopTry(interp, &head)",
          "312: static void jsiPopTry(Jsi_Interp* interp, jsi_TryList **head)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "318:     interp->tryList = t;",
          "319: }",
          "322: {",
          "323:     interp->tryList = n;",
          "324:     interp->framePtr->tryDepth++;",
          "",
          "[Removed Lines]",
          "321: static void jsi_push_try(Jsi_Interp* interp, jsi_TryList **head, jsi_TryList *n)",
          "",
          "[Added Lines]",
          "321: static void jsiPushTry(Jsi_Interp* interp, jsi_TryList **head, jsi_TryList *n)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "327: }",
          "331:     &scope, &currentScope, &context_id)",
          "333:   jsi_ScopeChain **scope, Jsi_Value **currentScope, int *context_id) {",
          "",
          "[Removed Lines]",
          "330: #define JSI_RESTORE_SCOPE() jsi_restore_scope(interp, ps, trylist, \\",
          "332: static void jsi_restore_scope(Jsi_Interp* interp, jsi_Pstate *ps, jsi_TryList* trylist,",
          "",
          "[Added Lines]",
          "330: #define JSI_RESTORE_SCOPE() jsiRestoreScope(interp, ps, trylist, \\",
          "332: static void jsiRestoreScope(Jsi_Interp* interp, jsi_Pstate *ps, jsi_TryList* trylist,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "347: }",
          "352:      jsi_ScopeChain **scope, Jsi_Value **currentScope, int *context_id, Jsi_Value *top, const char *nam) {",
          "353:     if (Jsi_InterpGone(interp))",
          "354:         return JSI_ERROR;",
          "",
          "[Removed Lines]",
          "349: #define JSI_DO_THROW(nam) if (jsi_do_throw(interp, ps, &ip, &trylist,&scope, &currentScope, &context_id, (interp->framePtr->Sp?_jsi_TOP:NULL), nam) != JSI_OK) { rc = JSI_ERROR; break; }",
          "351: static int jsi_do_throw(Jsi_Interp *interp, jsi_Pstate *ps, jsi_OpCode **ipp, jsi_TryList **tlp,",
          "",
          "[Added Lines]",
          "349: #define JSI_DO_THROW(nam) if (jsiDoThrow(interp, ps, &ip, &trylist,&scope, &currentScope, &context_id, (interp->framePtr->Sp?_jsi_TOP:NULL), nam) != JSI_OK) { rc = JSI_ERROR; break; }",
          "351: static int jsiDoThrow(Jsi_Interp *interp, jsi_Pstate *ps, jsi_OpCode **ipp, jsi_TryList **tlp,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "376:                 break;",
          "377:             } else if (*ipp >= trylist->d.td.fstart && *ipp < trylist->d.td.fend) {",
          "379:                 trylist = *tlp;",
          "380:             } else Jsi_LogBug(\"Throw within a try, but not in its scope?\");",
          "381:         } else {",
          "384:             trylist = *tlp;",
          "385:         }",
          "386:     }",
          "387:     return JSI_OK;",
          "388: }",
          "391: {",
          "392:     jsi_TryList *n = (jsi_TryList *)Jsi_Calloc(1,sizeof(*n));",
          "",
          "[Removed Lines]",
          "378:                 jsi_pop_try(interp, tlp);",
          "382:             jsi_restore_scope(interp, ps, trylist, scope, currentScope, context_id);",
          "383:             jsi_pop_try(interp, tlp);",
          "390: static jsi_TryList *jsi_trylist_new(jsi_try_op_type t, jsi_ScopeChain *scope_save, Jsi_Value *curscope_save)",
          "",
          "[Added Lines]",
          "378:                 jsiPopTry(interp, tlp);",
          "382:             jsiRestoreScope(interp, ps, trylist, scope, currentScope, context_id);",
          "383:             jsiPopTry(interp, tlp);",
          "390: static jsi_TryList *jsiTrylistNew(jsi_try_op_type t, jsi_ScopeChain *scope_save, Jsi_Value *curscope_save)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "405:     int i;",
          "406:     char buf[JSI_MAX_NUMBER_STRING*2];",
          "407:     jsi_code_decode(interp, ip, ip - opcodes->codes, buf, sizeof(buf));",
          "409:     for (i = 0; i < interp->framePtr->Sp; ++i) {",
          "411:     }",
          "412:     Jsi_Printf(interp, jsi_Stderr, \"]\");",
          "413:     if (ip->fname) {",
          "",
          "[Removed Lines]",
          "408:     Jsi_Printf(interp, jsi_Stderr, \"%p: %-30.200s : THIS=%s, STACK=[\", ip, buf, jsi_evalprint(_this));",
          "410:         Jsi_Printf(interp, jsi_Stderr, \"%s%s\", (i>0?\", \":\"\"), jsi_evalprint(_jsi_STACKIDX(i)));",
          "",
          "[Added Lines]",
          "408:     Jsi_Printf(interp, jsi_Stderr, \"%p: %-30.200s : THIS=%s, STACK=[\", ip, buf, jsiEvalPrint(_this));",
          "410:         Jsi_Printf(interp, jsi_Stderr, \"%s%s\", (i>0?\", \":\"\"), jsiEvalPrint(_jsi_STACKIDX(i)));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "419:     jsi_TryList *tlt = trylist;",
          "420:     for (i = 0; tlt; tlt = tlt->next) i++;",
          "421:     if (ps->last_exception)",
          "423: }",
          "426: {",
          "427:    return Jsi_Strcmp(* (char * const *) p1, * (char * const *) p2);",
          "428: }",
          "431:     int argc, i;",
          "432:     char **argv;",
          "433:     Jsi_DString sStr;",
          "434:     Jsi_DSInit(&sStr);",
          "435:     Jsi_SplitStr(Jsi_DSValue(dStr), &argc, &argv, sep, &sStr);",
          "437:     Jsi_DSSetLength(dStr, 0);",
          "438:     for (i=0; i<argc; i++)",
          "439:         Jsi_DSAppend(dStr, (i?\" \":\"\"), argv[i], NULL);",
          "440:     Jsi_DSFree(&sStr);",
          "441: }",
          "444: {",
          "445:     if (target->vt != JSI_VT_OBJECT) return;",
          "446:     const char *kstr = Jsi_ValueToString(interp, key, NULL);",
          "",
          "[Removed Lines]",
          "422:         Jsi_Printf(interp, jsi_Stderr, \"TL: %d, excpt: %s\\n\", i, jsi_evalprint(ps->last_exception));",
          "425: static int jsi_cmpstringp(const void *p1, const void *p2)",
          "430: void jsi_SortDString(Jsi_Interp *interp, Jsi_DString *dStr, const char *sep) {",
          "436:     qsort(argv, argc, sizeof(char*), jsi_cmpstringp);",
          "443: static void jsi_ValueObjDelete(Jsi_Interp *interp, Jsi_Value *target, Jsi_Value *key, int force)",
          "",
          "[Added Lines]",
          "422:         Jsi_Printf(interp, jsi_Stderr, \"TL: %d, excpt: %s\\n\", i, jsiEvalPrint(ps->last_exception));",
          "425: static int jsiCmpStringp(const void *p1, const void *p2)",
          "430: static void jsiSortDString(Jsi_Interp *interp, Jsi_DString *dStr, const char *sep) {",
          "436:     qsort(argv, argc, sizeof(char*), jsiCmpStringp);",
          "443: static void jsiValueObjDelete(Jsi_Interp *interp, Jsi_Value *target, Jsi_Value *key, int force)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "481:     Jsi_TreeSearchDone(&srch);",
          "482: }",
          "485:     Jsi_DString dStr;",
          "486:     Jsi_DSInit(&dStr);",
          "487:     Jsi_MapEntry *hPtr;",
          "",
          "[Removed Lines]",
          "484: static void jsi_DumpFunctions(Jsi_Interp *interp, const char *spnam) {",
          "",
          "[Added Lines]",
          "484: static void jsiDumpFunctions(Jsi_Interp *interp, const char *spnam) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "558:             }",
          "559:             csi = (csi?csi->next:NULL);",
          "560:         }",
          "562:         if (varname)",
          "563:             spnam = varname;",
          "564:         else if (interp->lastPushStr && !spnam[0])",
          "",
          "[Removed Lines]",
          "561:         jsi_SortDString(interp, &dStr, \" \");",
          "",
          "[Added Lines]",
          "561:         jsiSortDString(interp, &dStr, \" \");",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "708:     }",
          "709: }",
          "712:     Jsi_Value **ret, Jsi_Value *tocall, int discard)",
          "713: {",
          "714:     Jsi_RC rc = JSI_OK;",
          "715:     const char *oldCurFunc = interp->curFunction, *spnam = \"\";",
          "716:     jsi_OpCode *ip = interp->curIp;",
          "717:     int adds, as_constructor = (ip->op == OP_NEWFCALL);",
          "724:     if (tocall->vt == JSI_VT_UNDEF && tocall->f.bits.lookupfailed && tocall->d.lookupFail && !interp->noAutoLoad) {",
          "",
          "[Removed Lines]",
          "711: Jsi_RC jsi_FunctionSubCall(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "718:     double timStart = 0;",
          "719:     int docall;",
          "720:     int calltrc = 0, profile = interp->profile, coverage = interp->coverage;",
          "721:     int tc;",
          "",
          "[Added Lines]",
          "711: static Jsi_RC jsiFunctionSubCall(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "718:     int calltrc = 0;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "731:     if (!Jsi_ValueIsFunction(interp, tocall)) {",
          "735:         rc = JSI_ERROR;",
          "736:         goto empty_func;",
          "737:     }",
          "",
          "[Removed Lines]",
          "734:         jsi_DumpFunctions(interp, spnam);",
          "",
          "[Added Lines]",
          "731:         jsiDumpFunctions(interp, spnam);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "786:         calltrc = (interp->traceCall&jsi_callTraceNew);",
          "787:     }",
          "790:     if (funcPtr->type == FC_BUILDIN) {",
          "791:         funcPtr->callflags.bits.iscons = (as_constructor?JSI_CALL_CONSTRUCTOR:0);",
          "792:         funcPtr->fobj = fobj; // Backlink for bind.",
          "793:         funcPtr->callflags.bits.isdiscard = discard;",
          "794:     }",
          "795:     rc = jsi_FuncCallSub(interp, args, tocall, ret, funcPtr, _this, calltrc);",
          "893:     if (!onam)",
          "894:         funcPtr->name = NULL;",
          "",
          "[Removed Lines]",
          "789: #if 1",
          "796: #else",
          "797:     Jsi_Func *prevActive = interp->activeFunc;",
          "798:     interp->activeFunc = funcPtr;",
          "800:     if (rc != JSI_OK)",
          "801:         goto bail;",
          "802:     funcPtr->callflags.bits.addargs = 0;",
          "803:     jsi_InitLocalVar(interp, args, funcPtr);",
          "805:     Jsi_Value *oc = interp->callee;",
          "806:     interp->callee = tocall;",
          "808:     tc = interp->traceCall;",
          "809:     jsi_PkgInfo *pkg = funcPtr->pkg;",
          "810:     if (pkg) {",
          "811:         tc |= pkg->popts.modConf.traceCall;",
          "812:         profile |= pkg->popts.modConf.profile;",
          "813:         coverage |= pkg->popts.modConf.coverage;",
          "814:     }",
          "816:     if (!calltrc) {",
          "817:         if (funcPtr->type == FC_NORMAL)",
          "818:             calltrc = (tc&jsi_callTraceFuncs);",
          "819:         else",
          "820:             calltrc = (tc&jsi_callTraceCmds);",
          "821:     }",
          "822:     if (calltrc && funcPtr->name)",
          "823:         jsi_TraceFuncCall(interp, funcPtr, ip, _this, args, 0, tc);",
          "827:     interp->activeFunc = funcPtr;",
          "828:     docall = (rc==JSI_OK);",
          "829:     if (profile || coverage) {",
          "830:         interp->profileCnt++;",
          "831:         timStart = jsi_GetTimestamp();",
          "832:     }",
          "833:     if (funcPtr->type == FC_NORMAL) {",
          "834:         if (docall) {",
          "835:             rc = jsi_evalcode(interp->ps, funcPtr, funcPtr->opcodes, tocall->d.obj->d.fobj->scope,",
          "836:                 args, _this, ret);",
          "837:         }",
          "838:         interp->funcCallCnt++;",
          "839:     } else if (!funcPtr->callback) {",
          "840:         rc = Jsi_LogError(\"can not call:\\\"%s()\\\"\", funcPtr->name);",
          "841:     } else {",
          "842:         int oldcf = funcPtr->callflags.i;",
          "843:         funcPtr->callflags.bits.iscons = (as_constructor?JSI_CALL_CONSTRUCTOR:0);",
          "844:         if (funcPtr->f.bits.hasattr)",
          "845:         {",
          "846: #define SPTR(s) (s?s:\"\")",
          "847:             if ((funcPtr->f.bits.isobj) && _this->vt != JSI_VT_OBJECT) {",
          "848:                 rc = JSI_ERROR;",
          "849:                 docall = 0;",
          "850:                 Jsi_LogError(\"'this' is not object: \\\"%s()\\\"\", funcPtr->name);",
          "851:             } else if ((!(funcPtr->f.bits.iscons)) && as_constructor) {",
          "852:                 docall = 0;",
          "853:                 rc = Jsi_LogError(\"can not call as constructor: \\\"%s()\\\"\", funcPtr->name);",
          "854:             } else {",
          "855:                 int aCnt = Jsi_ValueGetLength(interp, args);",
          "856:                 if (aCnt<(cs->minArgs+adds)) {",
          "857:                     rc = Jsi_LogError(\"missing args, expected \\\"%s(%s)\\\" \", cs->name, SPTR(cs->argStr));",
          "858:                     docall = 0;",
          "859:                 } else if (cs->maxArgs>=0 && (aCnt>cs->maxArgs+adds)) {",
          "860:                     rc = Jsi_LogError(\"extra args, expected \\\"%s(%s)\\\" \", cs->name, SPTR(cs->argStr));",
          "861:                     docall = 0;",
          "862:                 }",
          "863:             }",
          "864:         }",
          "865:         if (docall) {",
          "866:             rc = funcPtr->callback(interp, args,",
          "867:                 _this, ret, funcPtr);",
          "868:             interp->cmdCallCnt++;",
          "869:         }",
          "870:         funcPtr->callflags.i = oldcf;",
          "871:     }",
          "872:     interp->callee = oc;",
          "873:     if (profile || coverage) {",
          "874:         double timEnd = jsi_GetTimestamp(), timUsed = (timEnd - timStart);;",
          "875:         assert(timUsed>=0);",
          "876:         funcPtr->allTime += timUsed;",
          "877:         if (interp->framePtr->evalFuncPtr)",
          "878:             interp->framePtr->evalFuncPtr->subTime += timUsed;",
          "879:         else",
          "880:             interp->subTime += timUsed;",
          "881:     }",
          "882:     if (calltrc && (tc&jsi_callTraceReturn) && funcPtr->name)",
          "883:         jsi_TraceFuncCall(interp, funcPtr, ip, _this, NULL, *ret, tc);",
          "884:     if (docall) {",
          "885:         funcPtr->callCnt++;",
          "886:         if (rc == JSI_OK && !as_constructor && funcPtr->retType && (interp->typeCheck.all || interp->typeCheck.run))",
          "887:             rc = jsi_ArgTypeCheck(interp, funcPtr->retType, *ret, \"returned from\", funcPtr->name, 0, funcPtr, 0);",
          "888:     }",
          "889:     interp->activeFunc = prevActive;",
          "891: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "902:         }",
          "903:     }",
          "906:     Jsi_DecrRefCount(interp, _this);",
          "907:     interp->curFunction = oldCurFunc;",
          "909:     return rc;",
          "910: }",
          "913:     Jsi_Interp *interp = ps->interp;",
          "914:     int stackargc = (int)(uintptr_t)ip->data;",
          "915:     jsiVarDeref(interp, stackargc + 1);",
          "",
          "[Removed Lines]",
          "905: bail:",
          "912: Jsi_RC jsiEvalFunction(jsi_Pstate *ps, jsi_OpCode *ip, int discard) {",
          "",
          "[Added Lines]",
          "811: static Jsi_RC jsiEvalFunction(jsi_Pstate *ps, jsi_OpCode *ip, int discard) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "926:         _this = Jsi_ValueDup(interp, _this);",
          "927:         jsiClearThis(interp, tocall_index);",
          "928:     }",
          "931:     jsiPop(interp, stackargc);",
          "932:     jsiClearStack(interp,1);",
          "",
          "[Removed Lines]",
          "929:     Jsi_RC rc = jsi_FunctionSubCall(interp, args, _this, &spretPtr, tocall, discard);",
          "",
          "[Added Lines]",
          "828:     Jsi_RC rc = jsiFunctionSubCall(interp, args, _this, &spretPtr, tocall, discard);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "946:     return rc;",
          "947: }",
          "950:     Jsi_Interp *interp = ps->interp;",
          "951:     jsi_FastVar *fvar = (typeof(fvar))ip->data;",
          "952:     SIGASSERT(fvar,FASTVAR);",
          "",
          "[Removed Lines]",
          "949: static Jsi_RC jsi_PushVar(jsi_Pstate *ps, jsi_OpCode *ip, jsi_ScopeChain *scope, Jsi_Value *currentScope, int context_id) {",
          "",
          "[Added Lines]",
          "848: static Jsi_RC jsiPushVar(jsi_Pstate *ps, jsi_OpCode *ip, jsi_ScopeChain *scope, Jsi_Value *currentScope, int context_id) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "999:     return JSI_OK;",
          "1000: }",
          "1004:     Jsi_Interp *interp = ps->interp;",
          "1005:     Jsi_FuncObj *fo = jsi_FuncObjNew(interp, (Jsi_Func *)ip->data);",
          "",
          "[Removed Lines]",
          "1002: static void jsi_PushFunc(jsi_Pstate *ps, jsi_OpCode *ip, jsi_ScopeChain *scope, Jsi_Value *currentScope) {",
          "",
          "[Added Lines]",
          "901: static void jsiPushFunc(jsi_Pstate *ps, jsi_OpCode *ip, jsi_ScopeChain *scope, Jsi_Value *currentScope) {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1038:     jsiPush(interp,1);",
          "1039: }",
          "1042:     Jsi_Value *currentScope)",
          "1043: {",
          "1044:     Jsi_RC rc = JSI_OK;",
          "",
          "[Removed Lines]",
          "1041: static Jsi_RC jsi_evalSubscript(Jsi_Interp *interp, Jsi_Value *src, Jsi_Value *idx, jsi_OpCode *ip,  jsi_OpCode *end,",
          "",
          "[Added Lines]",
          "940: static Jsi_RC jsiEvalSubscript(Jsi_Interp *interp, Jsi_Value *src, Jsi_Value *idx, jsi_OpCode *ip,  jsi_OpCode *end,",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1129: }",
          "1132:     if (lop == OP_FCALL || lop == OP_NEWFCALL)",
          "1133:         return JSI_OK;",
          "1134:     if (val->f.bits.lookupfailed && val->d.lookupFail)",
          "",
          "[Removed Lines]",
          "1131: static Jsi_RC jsi_ValueAssignCheck(Jsi_Interp *interp, Jsi_Value *val, int lop) {",
          "",
          "[Added Lines]",
          "1030: static Jsi_RC jsiValueAssignCheck(Jsi_Interp *interp, Jsi_Value *val, int lop) {",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1136:     return JSI_OK;",
          "1137: }",
          "1140:      jsi_ScopeChain *scope, Jsi_Value *currentScope,",
          "1141:      Jsi_Value *_this, Jsi_Value *vret)",
          "1142: {",
          "",
          "[Removed Lines]",
          "1139: Jsi_RC jsi_evalcode_sub(jsi_Pstate *ps, Jsi_OpCodes *opcodes,",
          "",
          "[Added Lines]",
          "1038: Jsi_RC jsiEvalCodeSub(jsi_Pstate *ps, Jsi_OpCodes *opcodes,",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1301:                 break;",
          "1302:             }",
          "1303:             case OP_PUSHVAR: {",
          "1305:                 break;",
          "1306:             }",
          "1307:             case OP_PUSHFUN: {",
          "1309:                 break;",
          "1310:             }",
          "1311:             case OP_NEWFCALL:",
          "",
          "[Removed Lines]",
          "1304:                 rc = jsi_PushVar(ps, ip, scope, currentScope, context_id);",
          "1308:                 jsi_PushFunc(ps, ip, scope, currentScope);",
          "",
          "[Added Lines]",
          "1203:                 rc = jsiPushVar(ps, ip, scope, currentScope, context_id);",
          "1207:                 jsiPushFunc(ps, ip, scope, currentScope);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1331:                 break;",
          "1332:             }",
          "1333:             case OP_SUBSCRIPT: {",
          "1335:                 break;",
          "1336:             }",
          "1337:             case OP_ASSIGN: {",
          "",
          "[Removed Lines]",
          "1334:                 rc = jsi_evalSubscript(interp, _jsi_TOQ, _jsi_TOP, ip, end, currentScope);",
          "",
          "[Added Lines]",
          "1233:                 rc = jsiEvalSubscript(interp, _jsi_TOQ, _jsi_TOP, ip, end, currentScope);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1339:                 bool globThis = (sval->vt == JSI_VT_OBJECT && sval->d.obj == interp->csc->d.obj);",
          "1340:                 if ((uintptr_t)ip->data == 1) {",
          "1341:                     jsiVarDeref(interp,1);",
          "1343:                     if (strict && sval->vt == JSI_VT_UNDEF)",
          "1345:                     jsiPop(interp,1);",
          "1346:                 } else {",
          "1347:                     jsiVarDeref(interp, 3);",
          "1348:                     Jsi_Value *v3 = _jsi_STACKIDX(interp->framePtr->Sp-3);",
          "1349:                     if (v3->vt == JSI_VT_OBJECT) {",
          "1350:                         if (strict && sval->vt == JSI_VT_UNDEF)",
          "1352:                         jsi_ValueObjKeyAssign(interp, v3, dval, sval, 0);",
          "1353:                         jsi_ValueDebugLabel(sval, \"assign\", NULL);",
          "1354:                     } else if (strict)",
          "",
          "[Removed Lines]",
          "1342:                     rc = jsi_ValueAssign(interp, dval, sval, lop);",
          "1344:                         rc = jsi_ValueAssignCheck(interp, sval, lop);",
          "1351:                             rc = jsi_ValueAssignCheck(interp, sval, lop);",
          "",
          "[Added Lines]",
          "1241:                     rc = jsiValueAssign(interp, dval, sval, lop);",
          "1243:                         rc = jsiValueAssignCheck(interp, sval, lop);",
          "1250:                             rc = jsiValueAssignCheck(interp, sval, lop);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1581:             }",
          "1582:             case OP_LESS:",
          "1583:                 jsiVarDeref(interp,2);",
          "1585:                 jsiPop(interp,1);",
          "1586:                 break;",
          "1587:             case OP_GREATER:",
          "1588:                 jsiVarDeref(interp,2);",
          "1590:                 jsiPop(interp,1);",
          "1591:                 break;",
          "1592:             case OP_LESSEQU:",
          "1593:                 jsiVarDeref(interp,2);",
          "1595:                 if (rc == JSI_OK)",
          "1596:                     _jsi_TOQ->d.val = !_jsi_TOQ->d.val;",
          "1597:                 jsiPop(interp,1);",
          "1598:                 break;",
          "1599:             case OP_GREATEREQU:",
          "1600:                 jsiVarDeref(interp,2);",
          "1602:                 if (rc == JSI_OK)",
          "1603:                     _jsi_TOQ->d.val = !_jsi_TOQ->d.val;",
          "1604:                 jsiPop(interp,1);",
          "",
          "[Removed Lines]",
          "1584:                 rc = jsi_logic_less(interp,2,1);",
          "1589:                 rc = jsi_logic_less(interp,1,2);",
          "1594:                 rc = jsi_logic_less(interp,1,2);",
          "1601:                 rc = jsi_logic_less(interp,2,1);",
          "",
          "[Added Lines]",
          "1483:                 rc = jsiLogicLess(interp,2,1);",
          "1488:                 rc = jsiLogicLess(interp,1,2);",
          "1493:                 rc = jsiLogicLess(interp,1,2);",
          "1500:                 rc = jsiLogicLess(interp,2,1);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1899:                         if (_jsi_TOQ->vt != JSI_VT_OBJECT) Jsi_LogWarn(\"delete non-object key, ignore\");",
          "1900:                         if (_jsi_TOQ->d.obj == currentScope->d.obj) Jsi_LogWarn(\"Delete arguments\");",
          "1901:                     }",
          "1904:                     jsiPop(interp,2);",
          "1905:                 } else Jsi_LogBug(\"delete\");",
          "",
          "[Removed Lines]",
          "1902:                     jsi_ValueObjDelete(interp, _jsi_TOQ, _jsi_TOP, 0);",
          "",
          "[Added Lines]",
          "1801:                     jsiValueObjDelete(interp, _jsi_TOQ, _jsi_TOP, 0);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1927:             }",
          "1928:             case OP_STRY: {",
          "1929:                 jsi_TryInfo *ti = (jsi_TryInfo *)ip->data;",
          "1933:                 n->d.td.tend = n->d.td.tstart + ti->trylen;",
          "",
          "[Removed Lines]",
          "1930:                 jsi_TryList *n = jsi_trylist_new(jsi_TL_TRY, scope, currentScope);",
          "",
          "[Added Lines]",
          "1829:                 jsi_TryList *n = jsiTrylistNew(jsi_TL_TRY, scope, currentScope);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1939:                 n->inCatch=0;",
          "1940:                 n->inFinal=0;",
          "1943:                 break;",
          "1944:             }",
          "",
          "[Removed Lines]",
          "1942:                 jsi_push_try(interp, &trylist, n);",
          "",
          "[Added Lines]",
          "1841:                 jsiPushTry(interp, &trylist, n);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2060:                 jsiVarDeref(interp,1);",
          "2061:                 Jsi_ValueToObject(interp, _jsi_TOP);",
          "2065:                 n->d.wd.wstart = ip;",
          "2066:                 n->d.wd.wend = n->d.wd.wstart + (uintptr_t)ip->data;",
          "2069:                 interp->framePtr->withDepth++;",
          "",
          "[Removed Lines]",
          "2063:                 jsi_TryList *n = jsi_trylist_new(jsi_TL_WITH, scope, currentScope);",
          "2068:                 jsi_push_try(interp, &trylist, n);",
          "",
          "[Added Lines]",
          "1962:                 jsi_TryList *n = jsiTrylistNew(jsi_TL_WITH, scope, currentScope);",
          "1967:                 jsiPushTry(interp, &trylist, n);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2159:     interp->refCount++;",
          "2160:     interp->level++;",
          "2161:     Jsi_IncrRefCount(interp, fargs);",
          "2163:     Jsi_DecrRefCount(interp, fargs);",
          "2164:     if (interp->didReturn == 0 && !interp->exited && rc == JSI_OK) {",
          "2165:         if ((interp->evalFlags&JSI_EVAL_RETURN)==0)",
          "",
          "[Removed Lines]",
          "2162:     rc = jsi_evalcode_sub(ps, opcodes, scope, fargs, _this, *vret);",
          "",
          "[Added Lines]",
          "2061:     rc = jsiEvalCodeSub(ps, opcodes, scope, fargs, _this, *vret);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2180:     return rc;",
          "2181: }",
          "2184:     if (buf[0]==';' && buf[1] && buf[2]) {",
          "2186:         if (!jOpts[0]) {",
          "",
          "[Removed Lines]",
          "2183: Jsi_RC jsi_JsPreprocessLine(Jsi_Interp* interp, char *buf, size_t bsiz, uint ilen, int jOpts[4], int lineNo) {",
          "",
          "[Added Lines]",
          "2082: static Jsi_RC jsiJsPreprocessLine(Jsi_Interp* interp, char *buf, size_t bsiz, uint ilen, int jOpts[4], int lineNo) {",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2233:     return JSI_OK;",
          "2234: }",
          "2237:     const char *jpp = interp->jsppChars;",
          "2238:     if (!jpp[0] || !jpp[1])",
          "2239:         return JSI_OK;",
          "",
          "[Removed Lines]",
          "2236: Jsi_RC jsi_JsPreprocessLineCB(Jsi_Interp* interp, char *buf, size_t bsiz, uint ilen, int jOpts[4], int lineNo) {",
          "",
          "[Added Lines]",
          "2135: static Jsi_RC jsiJsPreprocessLineCB(Jsi_Interp* interp, char *buf, size_t bsiz, uint ilen, int jOpts[4], int lineNo) {",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2422:                 if (jpp || interp->unitTest)",
          "2423:                     ilen = Jsi_Strlen(buf);",
          "2424:                 if (interp->unitTest && buf[0]==';' && buf[1] && buf[2]) {",
          "2426:                         goto bail;",
          "2427:                 } else if (interp->jsppCallback && interp->jsppChars) {",
          "2429:                         goto bail;",
          "2430:                 }",
          "2431: cont:",
          "",
          "[Removed Lines]",
          "2425:                     if (interp->unitTest&1 && jsi_JsPreprocessLine(interp, buf, sizeof(buf), ilen, jppOpts, cnt) != JSI_OK)",
          "2428:                     if (jsi_JsPreprocessLineCB(interp, buf, sizeof(buf), ilen, jppOpts, cnt) != JSI_OK)",
          "",
          "[Added Lines]",
          "2324:                     if (interp->unitTest&1 && jsiJsPreprocessLine(interp, buf, sizeof(buf), ilen, jppOpts, cnt) != JSI_OK)",
          "2327:                     if (jsiJsPreprocessLineCB(interp, buf, sizeof(buf), ilen, jppOpts, cnt) != JSI_OK)",
          "",
          "---------------"
        ],
        "src/jsiFunc.c||src/jsiFunc.c": [
          "File: src/jsiFunc.c -> src/jsiFunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "771:         return Jsi_LogError(\"argument must be an array\");",
          "773:     Jsi_Value *fthis = Jsi_ValueDup(interp, _this ? _this : tocall);",
          "775:     Jsi_RC rc = jsi_FuncCallSub(interp, args, tocall, ret, funcPtr, fthis, 0);",
          "818:     Jsi_DecrRefCount(interp, fthis);",
          "819:     return rc;",
          "820: }",
          "",
          "[Removed Lines]",
          "774: #if 1",
          "776: #else",
          "777:     Jsi_Func *prevActive = interp->activeFunc;",
          "778:     Jsi_RC rc = jsi_SharedArgs(interp, args, funcPtr, 1);",
          "779:     int calltrc = 0;",
          "780:     int tc = interp->traceCall | (funcPtr->pkg?funcPtr->pkg->popts.modConf.traceCall:0);",
          "781:     interp->callDepth++;",
          "782:     Jsi_IncrRefCount(interp, args);",
          "783:     if (rc == JSI_OK) {",
          "784:         jsi_InitLocalVar(interp, args, funcPtr);",
          "786:         Jsi_Value *oc = interp->callee;",
          "787:         interp->callee = tocall;",
          "788:         if (funcPtr->type == FC_NORMAL) {",
          "789:             if ((tc&jsi_callTraceFuncs) && funcPtr->name)",
          "790:                 calltrc = 1;",
          "791:         } else {",
          "792:             if ((tc&jsi_callTraceCmds) && funcPtr->name)",
          "793:                 calltrc = 1;",
          "794:         }",
          "795:         interp->activeFunc = funcPtr;",
          "796:         if (funcPtr->type == FC_NORMAL) {",
          "797:             if (calltrc)",
          "798:                 jsi_TraceFuncCall(interp, funcPtr, NULL, fthis, args, NULL, tc);",
          "799:             rc = jsi_evalcode(interp->ps, funcPtr, funcPtr->opcodes, tocall->d.obj->d.fobj->scope,",
          "800:                 args, fthis, ret);",
          "801:         } else {",
          "802:             if (calltrc)",
          "803:                 jsi_TraceFuncCall(interp, funcPtr, NULL, fthis, args, NULL, tc);",
          "804:             rc = funcPtr->callback(interp, args, fthis, ret, funcPtr);",
          "805:         }",
          "806:         interp->callee = oc;",
          "807:         funcPtr->callCnt++;",
          "808:     }",
          "809:     interp->callDepth--;",
          "810:     if (rc == JSI_OK && funcPtr->retType)",
          "811:         rc = jsi_ArgTypeCheck(interp, funcPtr->retType, *ret, \"returned from\", funcPtr->name, 0, funcPtr, 0);",
          "812:     if (rc == JSI_OK && calltrc && (tc&jsi_callTraceReturn))",
          "813:         jsi_TraceFuncCall(interp, funcPtr, NULL, fthis, NULL, *ret, tc);",
          "814:     interp->activeFunc = prevActive;",
          "815:     jsi_SharedArgs(interp, args, funcPtr, 0);",
          "816:     Jsi_DecrRefCount(interp, args);",
          "817: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1404: typedef Jsi_RC (*Jsi_Constructor)(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1405:     Jsi_Value **ret, int flags, void *privData);",
          "1409:     Jsi_Value **ret, Jsi_Func *funcPtr, Jsi_Value *fthis, int calltrc);",
          "1410: extern Jsi_RC jsi_AssertCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1411:     Jsi_Value **ret, Jsi_Func *funcPtr);",
          "",
          "[Removed Lines]",
          "1406: extern Jsi_RC jsi_SharedArgs(Jsi_Interp *interp, Jsi_Value *args, Jsi_Func *func, int alloc);",
          "1407: extern void jsi_SetCallee(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *tocall);",
          "1408: extern Jsi_RC jsi_FuncCallSub(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "",
          "[Added Lines]",
          "1406: extern Jsi_RC jsi_FuncCallSub(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *callee,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1428: extern const char *jsi_TypeName(Jsi_Interp *interp, Jsi_ttype otyp);",
          "1429: extern Jsi_RC jsi_ObjectToStringCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1430:     Jsi_Value **ret, Jsi_Func *funcPtr);",
          "1433: extern Jsi_Value* jsi_ValueMakeBlobDup(Jsi_Interp *interp, Jsi_Value **vPtr, unsigned char *s, int len);",
          "1435: extern const char *jsi_GetHomeDir(Jsi_Interp *interp);",
          "",
          "[Removed Lines]",
          "1431: extern Jsi_RC jsi_HasOwnPropertyCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1432:     Jsi_Value **ret, Jsi_Func *funcPtr);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1503: extern Jsi_RC jsi_ArgTypeCheck(Jsi_Interp *interp, int typ, Jsi_Value *arg, const char *p1, const char *p2, int index, Jsi_Func *func, bool isdefault);",
          "1504: extern void jsi_FuncCallCheck(jsi_Pstate *p, jsi_Pline *line, int argc, bool isNew, const char *name, const char *namePre, Jsi_OpCodes *argCodes);",
          "1505: extern Jsi_RC jsi_RunFuncCallCheck(Jsi_Interp *interp, Jsi_Func *func, int argc, const char *name, jsi_Pline *line, Jsi_OpCodes *argCodes, bool isParse);",
          "1507: extern Jsi_ScopeStrs *jsi_ArgsOptAdd(jsi_Pstate *pstate, Jsi_ScopeStrs *a);",
          "1508: extern Jsi_ScopeStrs *jsi_argInsert(jsi_Pstate *pstate, Jsi_ScopeStrs *a, const char *name, Jsi_Value *defValue, jsi_Pline *lPtr, bool prepend);",
          "1509: extern Jsi_ScopeStrs* jsi_ParseArgStr(Jsi_Interp *interp, const char *argStr);",
          "",
          "[Removed Lines]",
          "1506: extern Jsi_RC jsi_FunctionSubCall(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret, Jsi_Value *tocall, int discard);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1511: extern double jsi_GetTimestamp(void);",
          "1512: extern const char *jsi_GetCurFile(Jsi_Interp *interp);",
          "1513: extern void jsi_TypeMismatch(Jsi_Interp* interp);",
          "1515: extern const char* jsi_GetDirective(Jsi_Interp *interp, Jsi_OpCodes *ops, const char *str);",
          "1516: extern Jsi_Value* jsi_CommandCreate(Jsi_Interp *interp, const char *name, Jsi_CmdProc *cmdProc, void *privData, int flags, Jsi_CmdSpec *cspec);",
          "1518: extern Jsi_RC jsi_ParseTypeCheckStr(Jsi_Interp *interp, const char *str);",
          "1519: extern Jsi_Interp *jsi_DoExit(Jsi_Interp *interp, int rc);",
          "1520: extern Jsi_RC jsi_CDataDataSetCmdSub(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this, Jsi_Value **ret, Jsi_Func *funcPtr, int flags);",
          "",
          "[Removed Lines]",
          "1514: extern void jsi_SortDString(Jsi_Interp *interp, Jsi_DString *dStr, const char *sep);",
          "1517: extern int jsi_GetDefaultType(const char *cp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiProto.c||src/jsiProto.c": [
          "File: src/jsiProto.c -> src/jsiProto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: }",
          "55:     if (isdigit(*cp) || *cp == '-' || *cp == '.') return JSI_TT_NUMBER;",
          "56:     if (*cp == 'f' || *cp == 't') return JSI_TT_BOOLEAN;",
          "57:     if (*cp == 'n') return JSI_TT_NULL;",
          "",
          "[Removed Lines]",
          "54: int jsi_GetDefaultType(const char *cp) {",
          "",
          "[Added Lines]",
          "54: static int jsi_GetDefaultType(const char *cp) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:     return ss;",
          "107: }",
          "111: {",
          "112:     int i;",
          "113:     Jsi_RC rc = JSI_OK, nrc = JSI_OK;",
          "",
          "[Removed Lines]",
          "110: Jsi_RC jsi_SharedArgs(Jsi_Interp *interp, Jsi_Value *args, Jsi_Func *func, int alloc)",
          "",
          "[Added Lines]",
          "109: static Jsi_RC jsi_SharedArgs(Jsi_Interp *interp, Jsi_Value *args, Jsi_Func *func, int alloc)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "221:     } else {",
          "222:         if (funcPtr->f.bits.hasattr)",
          "223:         {",
          "226:             if ((funcPtr->f.bits.isobj) && callee->vt != JSI_VT_OBJECT) {",
          "227:                 rc = Jsi_LogError(\"'this' is not object: \\\"%s()\\\"\", funcPtr->name);",
          "228:             } else if ((!(funcPtr->f.bits.iscons)) && as_cons) {",
          "229:                 rc = Jsi_LogError(\"can not call as constructor: \\\"%s()\\\"\", funcPtr->name);",
          "230:             } else {",
          "231:                 int aCnt = Jsi_ValueGetLength(interp, args);",
          "232:                 if (aCnt<(cs->minArgs+adds)) {",
          "234:                 } else if (cs->maxArgs>=0 && (aCnt>cs->maxArgs+adds)) {",
          "236:                 }",
          "237:             }",
          "238:         }",
          "",
          "[Removed Lines]",
          "225: #define SPTR__(s) (s?s:\"\")",
          "233:                     rc = Jsi_LogError(\"missing args, expected \\\"%s(%s)\\\" \", cs->name, SPTR__(cs->argStr));",
          "235:                     rc = Jsi_LogError(\"extra args, expected \\\"%s(%s)\\\" \", cs->name, SPTR__(cs->argStr));",
          "",
          "[Added Lines]",
          "230:                 const char *cstr = cs->argStr;",
          "231:                 if (!cstr) cstr = \"\";",
          "233:                     rc = Jsi_LogError(\"missing args, expected \\\"%s(%s)\\\" \", cs->name, cstr);",
          "235:                     rc = Jsi_LogError(\"extra args, expected \\\"%s(%s)\\\" \", cs->name, cstr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "270:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "271: {",
          "272:     Jsi_FuncObj *fo = funcPtr->fobj;",
          "279:     Jsi_Value *nargs = args, *fargs = fo->bindArgs;",
          "280:     int i, argc = Jsi_ValueGetLength(interp, args);",
          "281:     int fargc = (fargs? Jsi_ValueGetLength(interp, fargs) : 0);",
          "",
          "[Removed Lines]",
          "273:     if (!fo) {",
          "274:         if (interp->callee && Jsi_ValueIsFunction(interp,  interp->callee))",
          "275:             fo = interp->callee->d.obj->d.fobj;",
          "276:         else",
          "277:             return Jsi_LogError(\"bind failure\"); // TODO: fix via \"call\" failure?",
          "278:     }",
          "",
          "[Added Lines]",
          "273:     if (!fo)",
          "274:         return Jsi_LogError(\"bind failure\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "321:     return JSI_OK;",
          "322: }",
          "325:     Jsi_Value **ret)",
          "326: {",
          "327:     if (!Jsi_ValueIsFunction(interp, _this))",
          "",
          "[Removed Lines]",
          "324: Jsi_RC Jsi_FunctionCall(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "",
          "[Added Lines]",
          "321: static Jsi_RC Jsi_FunctionCall(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "332:         return JSI_OK;",
          "333:     Jsi_Func *funcPtr = fo->func;",
          "336:     Jsi_Value *fthis;",
          "337:     Jsi_Value *arg1 = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "331:     if (funcPtr->type == FC_BUILDIN)",
          "332:         funcPtr->fobj = fo; // Backlink for bind.",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "396:     if (!Jsi_ValueIsFunction(interp, _this))",
          "397:         return Jsi_LogError(\"can not execute expression, expression is not a function\");",
          "400:         return JSI_OK;",
          "404:     Jsi_Func *funcPtr = _this->d.obj->d.fobj->func;",
          "409:     Jsi_Value *fthis;",
          "410:     Jsi_Value *arg1 = NULL;",
          "411:     if ((arg1 = Jsi_ValueArrayIndex(interp, args, 0)) && !Jsi_ValueIsUndef(interp, arg1)",
          "",
          "[Removed Lines]",
          "401:     }",
          "",
          "[Added Lines]",
          "398:     if (!_this->d.obj->d.fobj)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "416:     Jsi_ValueToObject(interp, fthis);",
          "420:     Jsi_Value *fargs = Jsi_ValueArrayIndex(interp, args, 1);",
          "421:     if (fargs) {",
          "422:         if (fargs->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, fargs->d.obj)) {",
          "",
          "[Removed Lines]",
          "419:     Jsi_RC res = JSI_ERROR;",
          "",
          "[Added Lines]",
          "412:     Jsi_RC rc = JSI_ERROR;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "428:         fargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewType(interp, JSI_OT_ARRAY));",
          "429:         Jsi_IncrRefCount(interp, fargs);",
          "430:     }",
          "434: done:",
          "435:     if (isalloc)",
          "436:         Jsi_DecrRefCount(interp, fargs);",
          "437:     Jsi_DecrRefCount(interp, fthis);",
          "439: }",
          "",
          "[Removed Lines]",
          "432:     res = jsi_FuncCallSub(interp, fargs, _this, ret, funcPtr, fthis, 0);",
          "438:     return res;",
          "",
          "[Added Lines]",
          "424:     rc = jsi_FuncCallSub(interp, fargs, _this, ret, funcPtr, fthis, 0);",
          "430:     return rc;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "446:     return JSI_OK;",
          "447: }",
          "450:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "451: {",
          "452:     Jsi_Value *v = Jsi_ValueArrayIndex(interp, args,0);",
          "",
          "[Removed Lines]",
          "449: Jsi_RC ObjectMergeCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "",
          "[Added Lines]",
          "441: static Jsi_RC ObjectMergeCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "476: }",
          "478: #if (JSI_HAS___PROTO__==1)",
          "480:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "481: {",
          "482:     Jsi_Value *v = Jsi_ValueArrayIndex(interp, args,0);",
          "",
          "[Removed Lines]",
          "479: Jsi_RC jsi_GetPrototypeOfCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "",
          "[Added Lines]",
          "471: static Jsi_RC jsi_GetPrototypeOfCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "486:     return JSI_OK;",
          "487: }",
          "490:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "491: {",
          "492:     Jsi_Value *v = Jsi_ValueArrayIndex(interp, args,0);",
          "",
          "[Removed Lines]",
          "489: Jsi_RC jsi_SetPrototypeOfCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "",
          "[Added Lines]",
          "481: static Jsi_RC jsi_SetPrototypeOfCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "502: }",
          "503: #endif",
          "506:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "507: {",
          "508:     Jsi_Value *v;",
          "",
          "[Removed Lines]",
          "505: Jsi_RC jsi_HasOwnPropertyCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "",
          "[Added Lines]",
          "497: static Jsi_RC jsi_HasOwnPropertyCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "",
          "---------------"
        ],
        "tests/bind.jsi||tests/bind.jsi": [
          "File: tests/bind.jsi -> tests/bind.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: var pp = puts.bind(null,'XX');",
          "38: ;pp('HI');",
          "41: =!EXPECTSTART!=",
          "42: module.getX() ==> 81",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: function h(a) { return {a: a, th: this}; }",
          "41: var i;",
          "42: ;i= h.bind({str: \"foo\"}, 2);",
          "43: ;i.call({x: 1});",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50: add5(10,11) ==> 21",
          "51: pp('HI') ==> XX HI",
          "52: undefined",
          "53: =!EXPECTEND!=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: i= h.bind({str: \"foo\"}, 2) ==> \"function () { [native code] }\"",
          "59: i.call({x: 1}) ==> { a:2, th:{ str:\"foo\" } }",
          "",
          "---------------"
        ],
        "tests/prob/bind.js||tests/prob/bind.js": [
          "File: tests/prob/bind.js -> tests/prob/bind.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "81da5d1618b3f5b28ee43b40a3c652061be72af0",
      "candidate_info": {
        "commit_hash": "81da5d1618b3f5b28ee43b40a3c652061be72af0",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/81da5d1618b3f5b28ee43b40a3c652061be72af0",
        "files": [
          "src/jsi.h",
          "src/jsiUtils.c"
        ],
        "message": "Release \"3.0.32\": fix non-quoting after using \"help\" interactive\n\nFossilOrigin-Name: e8c5da2a2023e21f020cf76d5151b6700bd461e765c946147d58bfb759b4298b",
        "before_after_code_files": [
          "src/jsi.h||src/jsi.h",
          "src/jsiUtils.c||src/jsiUtils.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiUtils.c||src/jsiUtils.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiUtils.c||src/jsiUtils.c"
          ]
        }
      },
      "candidate_diff": {
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 31",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 32",
          "",
          "---------------"
        ],
        "src/jsiUtils.c||src/jsiUtils.c": [
          "File: src/jsiUtils.c -> src/jsiUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1205:         if (rc == JSI_OK) {",
          "1206:              if (interp->retValue->vt != JSI_VT_UNDEF || interp->subOpts.outUndef) {",
          "1207:                 Jsi_DString eStr = {};",
          "1209:                 Jsi_DSFree(&eStr);",
          "1210:                 fputs(\"\\n\", stdout);",
          "1211:              }",
          "",
          "[Removed Lines]",
          "1208:                 fputs(Jsi_ValueGetDString(interp, interp->retValue, &eStr, hasHelp?0:quote), stdout);",
          "",
          "[Added Lines]",
          "1208:                 fputs(Jsi_ValueGetDString(interp, interp->retValue, &eStr, wantHelp?0:quote), stdout);",
          "",
          "---------------"
        ]
      }
    }
  ]
}