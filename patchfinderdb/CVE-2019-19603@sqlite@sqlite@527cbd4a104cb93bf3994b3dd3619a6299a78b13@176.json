{
  "cve_id": "CVE-2019-19603",
  "cve_desc": "SQLite 3.30.1 mishandles certain SELECT statements with a nonexistent VIEW, leading to an application crash.",
  "repo": "sqlite/sqlite",
  "patch_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
  "patch_info": {
    "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab.test"
    ],
    "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab.test||test/altertab.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "856:       }",
      "857:     }",
      "858:   }else{",
      "861:     ){",
      "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
      "863:                       zName);",
      "864:       return SQLITE_ERROR;",
      "865:     }",
      "866:   }",
      "867:   return SQLITE_OK;",
      "868: }",
      "",
      "[Removed Lines]",
      "859:     if( pParse->nested==0",
      "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
      "",
      "[Added Lines]",
      "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
      "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
      "",
      "[Added Lines]",
      "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
      "2148:   return pMod->pModule->xShadowName(zTail+1);",
      "2149: }",
      "",
      "[Removed Lines]",
      "2150: #else",
      "2151: # define isShadowTableName(x,y) 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2190:   p = pParse->pNewTable;",
      "2191:   if( p==0 ) return;",
      "2194:     p->tabFlags |= TF_Shadow;",
      "2195:   }",
      "",
      "[Removed Lines]",
      "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
      "",
      "[Added Lines]",
      "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
      "4549: #endif",
      "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
      "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
      "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
      "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
      "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
      "4553: #else",
      "4554: # define sqlite3ShadowTableName(A,B) 0",
      "4555: #endif",
      "",
      "---------------"
    ],
    "test/altertab.test||test/altertab.test": [
      "File: test/altertab.test -> test/altertab.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "547:   } {1 {table y1_segments may not be modified}}",
      "549:   do_catchsql_test 16.20 {",
      "554:     DROP TABLE y1_segments;",
      "555:   } {1 {table y1_segments may not be dropped}}",
      "557:   do_execsql_test 16.30 {",
      "558:     ALTER TABLE y1 RENAME TO z1;",
      "559:   }",
      "",
      "[Removed Lines]",
      "550:     ALTER TABLE y1_segments RENAME TO abc;",
      "551:   } {1 {table y1_segments may not be altered}}",
      "553:   do_catchsql_test 16.21 {",
      "",
      "[Added Lines]",
      "553:   do_catchsql_test 16.20 {",
      "554:     ALTER TABLE y1_segments RENAME TO abc;",
      "555:   } {1 {table y1_segments may not be altered}}",
      "556:   sqlite3_db_config db DEFENSIVE 0",
      "557:   do_catchsql_test 16.22 {",
      "558:     ALTER TABLE y1_segments RENAME TO abc;",
      "559:   } {0 {}}",
      "560:   sqlite3_db_config db DEFENSIVE 1",
      "561:   do_catchsql_test 16.23 {",
      "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
      "563:   } {1 {object name reserved for internal use: y1_segments}}",
      "564:   do_catchsql_test 16.24 {",
      "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
      "566:   } {1 {object name reserved for internal use: y1_segments}}",
      "567:   sqlite3_db_config db DEFENSIVE 0",
      "568:   do_catchsql_test 16.25 {",
      "569:     ALTER TABLE abc RENAME TO y1_segments;",
      "570:   } {0 {}}",
      "571:   sqlite3_db_config db DEFENSIVE 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "73bce667015ebf61438a009ef19db0d06842ed07",
      "candidate_info": {
        "commit_hash": "73bce667015ebf61438a009ef19db0d06842ed07",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/73bce667015ebf61438a009ef19db0d06842ed07",
        "files": [
          "ext/misc/fileio.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Use 64-bit APIs in the fileio.c extension.\n\nFossilOrigin-Name: b49d56a0faf012978c50fb8662125ea21bdf5054fddf5975644cbc941c153e70",
        "before_after_code_files": [
          "ext/misc/fileio.c||ext/misc/fileio.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/fileio.c||ext/misc/fileio.c": [
          "File: ext/misc/fileio.c -> ext/misc/fileio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:     fclose(in);",
          "153:     return;",
          "154:   }",
          "156:   if( pBuf==0 ){",
          "157:     sqlite3_result_error_nomem(ctx);",
          "158:     fclose(in);",
          "159:     return;",
          "160:   }",
          "161:   if( 1==fread(pBuf, nIn, 1, in) ){",
          "163:   }else{",
          "164:     sqlite3_result_error_code(ctx, SQLITE_IOERR);",
          "165:     sqlite3_free(pBuf);",
          "",
          "[Removed Lines]",
          "155:   pBuf = sqlite3_malloc( nIn );",
          "162:     sqlite3_result_blob(ctx, pBuf, nIn, sqlite3_free);",
          "",
          "[Added Lines]",
          "155:   pBuf = sqlite3_malloc64( nIn );",
          "162:     sqlite3_result_blob64(ctx, pBuf, nIn, sqlite3_free);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2d7b1d1d41ff69d5465fcb861420816ecb066c25a9015eefdab5fae15a2e1c9f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "87ca8067af3a0d3550eb339b06cac8bd47f010fa",
      "candidate_info": {
        "commit_hash": "87ca8067af3a0d3550eb339b06cac8bd47f010fa",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/87ca8067af3a0d3550eb339b06cac8bd47f010fa",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vtab.c"
        ],
        "message": "Fix the new ability to unregister virtual table modules so that it works for the automatic PRAGMA virtual tables.\n\nFossilOrigin-Name: 5d6f4dfeea75c7dcd8c511545accb9eb4b405a02db034332249ba54794e313d2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vtab.c||src/vtab.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 43e8b14314d876178d487c3b519296ac1de065fdcaa70768e40d684015bceb9d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vtab.c||src/vtab.c": [
          "File: src/vtab.c -> src/vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:       sqlite3DbFree(db, pDel);",
          "73:       pMod = 0;",
          "74:     }else{",
          "75:       sqlite3VtabModuleUnref(db, pDel);",
          "76:     }",
          "77:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75:       sqlite3VtabEponymousTableClear(db, pDel);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "705e73344ed81ea306ea6df8b94fc6b623319def",
      "candidate_info": {
        "commit_hash": "705e73344ed81ea306ea6df8b94fc6b623319def",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/705e73344ed81ea306ea6df8b94fc6b623319def",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/prepare.c"
        ],
        "message": "Omit the check for conflicting shared-cache locks in sqlite3Prepare() if the database connection uses no shared cache.  We might be able to go back and remove this code completely, due to the newer Schema.iGeneration logic, but that will take more analysis.  This check-in gives the speed benefit but not the reduction in code size.\n\nFossilOrigin-Name: 0b73a09270dfafb27f8d1762b547ef8178c9da66f45e7153ff0b76272dfa92f5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/prepare.c||src/prepare.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fc8d45086dc2bcb9bce756088e99e63cbeedf9129139fb0e6a48b43c4f502180",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "614:       }",
          "615:     }",
          "616:   }",
          "",
          "[Removed Lines]",
          "604:   for(i=0; i<db->nDb; i++) {",
          "605:     Btree *pBt = db->aDb[i].pBt;",
          "606:     if( pBt ){",
          "607:       assert( sqlite3BtreeHoldsMutex(pBt) );",
          "608:       rc = sqlite3BtreeSchemaLocked(pBt);",
          "609:       if( rc ){",
          "610:         const char *zDb = db->aDb[i].zDbSName;",
          "611:         sqlite3ErrorWithMsg(db, rc, \"database schema is locked: %s\", zDb);",
          "612:         testcase( db->flags & SQLITE_ReadUncommit );",
          "613:         goto end_prepare;",
          "",
          "[Added Lines]",
          "604:   if( !db->noSharedCache ){",
          "605:     for(i=0; i<db->nDb; i++) {",
          "606:       Btree *pBt = db->aDb[i].pBt;",
          "607:       if( pBt ){",
          "608:         assert( sqlite3BtreeHoldsMutex(pBt) );",
          "609:         rc = sqlite3BtreeSchemaLocked(pBt);",
          "610:         if( rc ){",
          "611:           const char *zDb = db->aDb[i].zDbSName;",
          "612:           sqlite3ErrorWithMsg(db, rc, \"database schema is locked: %s\", zDb);",
          "613:           testcase( db->flags & SQLITE_ReadUncommit );",
          "614:           goto end_prepare;",
          "615:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "130dbc3d96d2f673c75864b032fa7e24a08cb3a4",
      "candidate_info": {
        "commit_hash": "130dbc3d96d2f673c75864b032fa7e24a08cb3a4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/130dbc3d96d2f673c75864b032fa7e24a08cb3a4",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "Add recent interesting cases from dbsqlfuzz.\n\nFossilOrigin-Name: f06ef3d75d85545dd58c6dda10f7ad04fafbb7ae8706b3821be21f86a94795f1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5beb6dc9bc2d3d0003e33488df9c01aaf28c41c30fd9ca35543cbe3ec5a8d9ce",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6117a17323148469048563ff740c8ee4eb9ffaa3",
      "candidate_info": {
        "commit_hash": "6117a17323148469048563ff740c8ee4eb9ffaa3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6117a17323148469048563ff740c8ee4eb9ffaa3",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/affinity2.test"
        ],
        "message": "Avoid running a couple of tests in affinity2.test as part of the valgrind permutations, as the way floating point computations are simulated by valgrind causes them to fail.\n\nFossilOrigin-Name: 7f9a4b6015ac332a04d3e394a6b3210fc95253d8786a261178a5639cb8d9d987",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/affinity2.test||test/affinity2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a561a656ff50efc0103da3988626cea3ef05757403b83960f2aa6c0a48c2765e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/affinity2.test||test/affinity2.test": [
          "File: test/affinity2.test -> test/affinity2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "119: # 2019-08-30 ticket https://www.sqlite.org/src/info/40812aea1fde9594",
          "120: #",
          "131: finish_test",
          "",
          "[Removed Lines]",
          "121: do_execsql_test 600 {",
          "122:   DROP TABLE IF EXISTS t0;",
          "123:   CREATE TABLE t0(c0 REAL UNIQUE);",
          "124:   INSERT INTO t0(c0) VALUES (3175546974276630385);",
          "125:   SELECT 3175546974276630385 < c0 FROM t0;",
          "126: } {1}",
          "127: do_execsql_test 601 {",
          "128:   SELECT 1 FROM t0 WHERE 3175546974276630385 < c0;",
          "129: } {1}",
          "",
          "[Added Lines]",
          "121: # Due to some differences in floating point computations, these tests do not",
          "122: # work under valgrind.",
          "123: #",
          "124: if {![info exists ::G(valgrind)]} {",
          "125:   do_execsql_test 600 {",
          "126:     DROP TABLE IF EXISTS t0;",
          "127:     CREATE TABLE t0(c0 REAL UNIQUE);",
          "128:     INSERT INTO t0(c0) VALUES (3175546974276630385);",
          "129:     SELECT 3175546974276630385 < c0 FROM t0;",
          "130:   } {1}",
          "131:   do_execsql_test 601 {",
          "132:     SELECT 1 FROM t0 WHERE 3175546974276630385 < c0;",
          "133:   } {1}",
          "134: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}