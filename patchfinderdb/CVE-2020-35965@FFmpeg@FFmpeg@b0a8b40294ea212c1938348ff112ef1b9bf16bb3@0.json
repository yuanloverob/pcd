{
  "cve_id": "CVE-2020-35965",
  "cve_desc": "decode_frame in libavcodec/exr.c in FFmpeg 4.3.1 has an out-of-bounds write because of errors in calculations of when to perform memset zero operations.",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "b0a8b40294ea212c1938348ff112ef1b9bf16bb3",
  "patch_info": {
    "commit_hash": "b0a8b40294ea212c1938348ff112ef1b9bf16bb3",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/b0a8b40294ea212c1938348ff112ef1b9bf16bb3",
    "files": [
      "libavcodec/exr.c"
    ],
    "message": "avcodec/exr: skip bottom clearing loop when its outside the image\n\nFixes: signed integer overflow: 1633771809 * 32960 cannot be represented in type 'int'\nFixes: 26532/clusterfuzz-testcase-minimized-ffmpeg_AV_CODEC_ID_EXR_fuzzer-5613925708857344\n\nFound-by: continuous fuzzing process https://github.com/google/oss-fuzz/tree/master/projects/ffmpeg\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
    "before_after_code_files": [
      "libavcodec/exr.c||libavcodec/exr.c"
    ]
  },
  "patch_diff": {
    "libavcodec/exr.c||libavcodec/exr.c": [
      "File: libavcodec/exr.c -> libavcodec/exr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1843:     ymax = FFMAX(0, s->ymax + 1);",
      "1850:         }",
      "1853:     picture->pict_type = AV_PICTURE_TYPE_I;",
      "",
      "[Removed Lines]",
      "1845:     for (i = 0; i < planes; i++) {",
      "1846:         ptr = picture->data[i] + (ymax * picture->linesize[i]);",
      "1847:         for (y = ymax; y < avctx->height; y++) {",
      "1848:             memset(ptr, 0, out_line_size);",
      "1849:             ptr += picture->linesize[i];",
      "1851:     }",
      "",
      "[Added Lines]",
      "1845:     if (ymax < avctx->height)",
      "1846:         for (i = 0; i < planes; i++) {",
      "1847:             ptr = picture->data[i] + (ymax * picture->linesize[i]);",
      "1848:             for (y = ymax; y < avctx->height; y++) {",
      "1849:                 memset(ptr, 0, out_line_size);",
      "1850:                 ptr += picture->linesize[i];",
      "1851:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "af5922a79a13e7ab48679c619bfcbf3a8491de1e",
      "candidate_info": {
        "commit_hash": "af5922a79a13e7ab48679c619bfcbf3a8491de1e",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/af5922a79a13e7ab48679c619bfcbf3a8491de1e",
        "files": [
          "libavcodec/exr.c",
          "tests/fate/image.mak",
          "tests/ref/fate/exr-rgb-b44a-half-negative-4x4",
          "tests/ref/fate/exr-rgb-scanline-b44-half-float-12x8-l1",
          "tests/ref/fate/exr-rgb-scanline-b44-half-float-12x8-l2",
          "tests/ref/fate/exr-rgb-scanline-float-b44",
          "tests/ref/fate/exr-rgb-scanline-float-piz-48x32",
          "tests/ref/fate/exr-rgb-scanline-half-b44-12x8",
          "tests/ref/fate/exr-rgb-scanline-half-b44-13x9",
          "tests/ref/fate/exr-rgb-scanline-half-piz-bw",
          "tests/ref/fate/exr-rgb-scanline-half-piz-color",
          "tests/ref/fate/exr-rgb-scanline-half-piz-dw-t01",
          "tests/ref/fate/exr-rgb-scanline-half-piz-dw-t08",
          "tests/ref/fate/exr-rgb-scanline-none-negative-red",
          "tests/ref/fate/exr-rgb-scanline-pxr24-float-12x8",
          "tests/ref/fate/exr-rgb-scanline-pxr24-float-half-l1",
          "tests/ref/fate/exr-rgb-scanline-pxr24-float-half-l2",
          "tests/ref/fate/exr-rgb-scanline-pxr24-half-float-l1",
          "tests/ref/fate/exr-rgb-scanline-pxr24-half-float-l2",
          "tests/ref/fate/exr-rgb-scanline-pxr24-half-uint32-13x9",
          "tests/ref/fate/exr-rgb-scanline-raw-half-float-l1",
          "tests/ref/fate/exr-rgb-scanline-raw-half-float-l2",
          "tests/ref/fate/exr-rgb-scanline-rle-half-float-l1",
          "tests/ref/fate/exr-rgb-scanline-rle-half-float-l2",
          "tests/ref/fate/exr-rgb-scanline-zip-half-float-l1",
          "tests/ref/fate/exr-rgb-scanline-zip-half-float-l2",
          "tests/ref/fate/exr-rgb-scanline-zip1-half-float-l1",
          "tests/ref/fate/exr-rgb-scanline-zip1-half-float-l1-zero-offsets",
          "tests/ref/fate/exr-rgb-scanline-zip1-half-float-l2",
          "tests/ref/fate/exr-rgb-tile-float-raw-12x8",
          "tests/ref/fate/exr-rgb-tile-float-raw-150x130",
          "tests/ref/fate/exr-rgb-tile-half-float-b44-12x8-l1",
          "tests/ref/fate/exr-rgb-tile-half-float-b44-12x8-l2",
          "tests/ref/fate/exr-rgb-tile-half-raw-12x8",
          "tests/ref/fate/exr-rgb-tile-pxr24-float-half-l1",
          "tests/ref/fate/exr-rgb-tile-pxr24-float-half-l2",
          "tests/ref/fate/exr-rgb-tile-pxr24-half-float-l1",
          "tests/ref/fate/exr-rgb-tile-pxr24-half-float-l2",
          "tests/ref/fate/exr-rgb-tile-raw-half-float-l1",
          "tests/ref/fate/exr-rgb-tile-raw-half-float-l2",
          "tests/ref/fate/exr-rgb-tile-rle-half-float-l1",
          "tests/ref/fate/exr-rgb-tile-rle-half-float-l2",
          "tests/ref/fate/exr-rgb-tile-zip-half-float-l1",
          "tests/ref/fate/exr-rgb-tile-zip-half-float-l2",
          "tests/ref/fate/exr-rgb-tile-zip1-half-float-l1",
          "tests/ref/fate/exr-rgb-tile-zip1-half-float-l2",
          "tests/ref/fate/exr-rgba-multiscanline-half-b44",
          "tests/ref/fate/exr-rgba-scanline-float-half-b44-12x8-l1",
          "tests/ref/fate/exr-rgba-scanline-float-half-b44-12x8-l2",
          "tests/ref/fate/exr-rgba-scanline-float-half-b44-13x9-l1",
          "tests/ref/fate/exr-rgba-scanline-float-half-b44-13x9-l2",
          "tests/ref/fate/exr-rgba-scanline-float-half-b44a-12x8-l1",
          "tests/ref/fate/exr-rgba-scanline-float-half-b44a-12x8-l2",
          "tests/ref/fate/exr-rgba-scanline-float-half-b44a-13x9-l1",
          "tests/ref/fate/exr-rgba-scanline-float-half-b44a-13x9-l2",
          "tests/ref/fate/exr-rgba-zip16-16x32-flag4",
          "tests/ref/fate/exr-slice-pxr24",
          "tests/ref/fate/exr-slice-raw",
          "tests/ref/fate/exr-slice-rle",
          "tests/ref/fate/exr-slice-zip1",
          "tests/ref/fate/exr-slice-zip16",
          "tests/ref/fate/exr-y-scanline-zip-half-12x8",
          "tests/ref/fate/exr-y-tile-zip-half-12x8"
        ],
        "message": "avcodec/exr: output float pixels in float pixel format\n\nchanges since v1\n- default behavior, no longer hidden behind decoder parameter\n- updated tests to reflect change\n\nReviewed-by: Paul B Mahol <onemda@gmail.com>\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
        "before_after_code_files": [
          "libavcodec/exr.c||libavcodec/exr.c",
          "tests/fate/image.mak||tests/fate/image.mak"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/exr.c||libavcodec/exr.c"
          ],
          "candidate": [
            "libavcodec/exr.c||libavcodec/exr.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/exr.c||libavcodec/exr.c": [
          "File: libavcodec/exr.c -> libavcodec/exr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "161:     enum AVColorTransferCharacteristic apply_trc_type;",
          "162:     float gamma;",
          "164: } EXRContext;",
          "",
          "[Removed Lines]",
          "163:     uint16_t gamma_table[65536];",
          "",
          "[Added Lines]",
          "162:     union av_intfloat32 gamma_table[65536];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "225:     return f;",
          "226: }",
          "269: static int zip_uncompress(EXRContext *s, const uint8_t *src, int compressed_size,",
          "270:                           int uncompressed_size, EXRThreadData *td)",
          "271: {",
          "",
          "[Removed Lines]",
          "236: static inline uint16_t exr_flt2uint(int32_t v)",
          "237: {",
          "238:     int32_t exp = v >> 23;",
          "241:     if (exp <= 127 + 7 - 24) // we would shift out all bits anyway",
          "242:         return 0;",
          "243:     if (exp >= 127)",
          "244:         return 0xffff;",
          "245:     v &= 0x007fffff;",
          "246:     return (v + (1 << 23)) >> (127 + 7 - exp);",
          "247: }",
          "256: static inline uint16_t exr_halflt2uint(uint16_t v)",
          "257: {",
          "258:     unsigned exp = 14 - (v >> 10);",
          "259:     if (exp >= 14) {",
          "260:         if (exp == 14)",
          "261:             return (v >> 9) & 1;",
          "262:         else",
          "263:             return (v & 0x8000) ? 0 : 0xffff;",
          "264:     }",
          "265:     v <<= 6;",
          "266:     return (v + (1 << 16)) >> (exp + 1);",
          "267: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1035:     const uint8_t *channel_buffer[4] = { 0 };",
          "1036:     const uint8_t *buf = s->buf;",
          "1037:     uint64_t line_offset, uncompressed_size;",
          "1039:     uint8_t *ptr;",
          "1040:     uint32_t data_size;",
          "1041:     uint64_t line, col = 0;",
          "1042:     uint64_t tile_x, tile_y, tile_level_x, tile_level_y;",
          "1043:     const uint8_t *src;",
          "1046:     int i, x, buf_size = s->buf_size;",
          "1047:     int c, rgb_channel_count;",
          "1048:     float one_gamma = 1.0f / s->gamma;",
          "",
          "[Removed Lines]",
          "1038:     uint16_t *ptr_x;",
          "",
          "[Added Lines]",
          "1001:     int step = s->desc->flags & AV_PIX_FMT_FLAG_FLOAT ? 4 : 2 * s->desc->nb_components;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1175:     if (s->channel_offsets[3] >= 0)",
          "1176:         channel_buffer[3] = src + td->xsize * s->channel_offsets[3];",
          "1188:         }",
          "1215:                     union av_intfloat32 t;",
          "1223:                     }",
          "1227:                 }",
          "1228:             }",
          "1239:             }",
          "1241:             for (x = 0; x < td->xsize; x++) {",
          "1242:                 for (c = 0; c < rgb_channel_count; c++) {",
          "",
          "[Removed Lines]",
          "1178:     ptr = p->data[0] + line * p->linesize[0] + (col * s->desc->nb_components * 2);",
          "1180:     for (i = 0;",
          "1181:          i < td->ysize; i++, ptr += p->linesize[0]) {",
          "1183:         const uint8_t * a;",
          "1184:         const uint8_t *rgb[3];",
          "1186:         for (c = 0; c < rgb_channel_count; c++) {",
          "1187:             rgb[c] = channel_buffer[c];",
          "1190:         if (channel_buffer[3])",
          "1191:             a = channel_buffer[3];",
          "1193:         ptr_x = (uint16_t *) ptr;",
          "1196:         memset(ptr_x, 0, bxmin);",
          "1197:         ptr_x += s->xmin * s->desc->nb_components;",
          "1199:         if (s->pixel_type == EXR_FLOAT) {",
          "1201:             if (trc_func) {",
          "1202:                 for (x = 0; x < td->xsize; x++) {",
          "1203:                     union av_intfloat32 t;",
          "1205:                     for (c = 0; c < rgb_channel_count; c++) {",
          "1206:                         t.i = bytestream_get_le32(&rgb[c]);",
          "1207:                         t.f = trc_func(t.f);",
          "1209:                     }",
          "1210:                     if (channel_buffer[3])",
          "1212:                 }",
          "1213:             } else {",
          "1214:                 for (x = 0; x < td->xsize; x++) {",
          "1216:                     int c;",
          "1218:                     for (c = 0; c < rgb_channel_count; c++) {",
          "1219:                         t.i = bytestream_get_le32(&rgb[c]);",
          "1221:                             t.f = powf(t.f, one_gamma);",
          "1225:                     if (channel_buffer[3])",
          "1229:         } else if (s->pixel_type == EXR_HALF) {",
          "1231:             for (x = 0; x < td->xsize; x++) {",
          "1232:                 int c;",
          "1233:                 for (c = 0; c < rgb_channel_count; c++) {",
          "1235:                 }",
          "1237:                 if (channel_buffer[3])",
          "1240:         } else if (s->pixel_type == EXR_UINT) {",
          "",
          "[Added Lines]",
          "1136:     if (s->desc->flags & AV_PIX_FMT_FLAG_FLOAT) {",
          "1139:         int channel_count = s->channel_offsets[3] >= 0 ? 4 : rgb_channel_count;",
          "1140:         if (s->is_luma) {",
          "1141:             channel_buffer[1] = channel_buffer[0];",
          "1142:             channel_buffer[2] = channel_buffer[0];",
          "1145:         for (c = 0; c < channel_count; c++) {",
          "1146:             int plane = s->desc->comp[c].plane;",
          "1147:             ptr = p->data[plane] + line * p->linesize[plane] + (col * 4);",
          "1149:             for (i = 0; i < td->ysize; i++, ptr += p->linesize[plane]) {",
          "1150:                 const uint8_t *src;",
          "1151:                 union av_intfloat32 *ptr_x;",
          "1153:                 src = channel_buffer[c];",
          "1154:                 ptr_x = (union av_intfloat32 *)ptr;",
          "1157:                 memset(ptr_x, 0, bxmin);",
          "1158:                 ptr_x += s->xmin;",
          "1160:                 if (s->pixel_type == EXR_FLOAT) {",
          "1163:                     if (trc_func && c < 3) {",
          "1164:                         for (x = 0; x < td->xsize; x++) {",
          "1165:                             t.i = bytestream_get_le32(&src);",
          "1166:                             t.f = trc_func(t.f);",
          "1168:                         }",
          "1169:                     } else {",
          "1170:                         for (x = 0; x < td->xsize; x++) {",
          "1171:                             t.i = bytestream_get_le32(&src);",
          "1173:                                 t.f = powf(t.f, one_gamma);",
          "1175:                         }",
          "1176:                     }",
          "1177:                 } else if (s->pixel_type == EXR_HALF) {",
          "1179:                     if (c < 3) {",
          "1180:                         for (x = 0; x < td->xsize; x++) {",
          "1182:                         }",
          "1183:                     } else {",
          "1184:                         for (x = 0; x < td->xsize; x++) {",
          "1186:                         }",
          "1191:                 memset(ptr_x, 0, axmax);",
          "1192:                 channel_buffer[c] += td->channel_line_size;",
          "1194:         }",
          "1195:     } else {",
          "1197:         av_assert1(s->pixel_type == EXR_UINT);",
          "1198:         ptr = p->data[0] + line * p->linesize[0] + (col * s->desc->nb_components * 2);",
          "1200:         for (i = 0; i < td->ysize; i++, ptr += p->linesize[0]) {",
          "1202:             const uint8_t * a;",
          "1203:             const uint8_t *rgb[3];",
          "1204:             uint16_t *ptr_x;",
          "1206:             for (c = 0; c < rgb_channel_count; c++) {",
          "1207:                 rgb[c] = channel_buffer[c];",
          "1210:             if (channel_buffer[3])",
          "1211:                 a = channel_buffer[3];",
          "1213:             ptr_x = (uint16_t *) ptr;",
          "1216:             memset(ptr_x, 0, bxmin);",
          "1217:             ptr_x += s->xmin * s->desc->nb_components;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1246:                 if (channel_buffer[3])",
          "1248:             }",
          "1259:     }",
          "1261:     return 0;",
          "",
          "[Removed Lines]",
          "1249:         }",
          "1252:         memset(ptr_x, 0, axmax);",
          "1254:         channel_buffer[0] += td->channel_line_size;",
          "1255:         channel_buffer[1] += td->channel_line_size;",
          "1256:         channel_buffer[2] += td->channel_line_size;",
          "1257:         if (channel_buffer[3])",
          "1258:             channel_buffer[3] += td->channel_line_size;",
          "",
          "[Added Lines]",
          "1229:             memset(ptr_x, 0, axmax);",
          "1231:             channel_buffer[0] += td->channel_line_size;",
          "1232:             channel_buffer[1] += td->channel_line_size;",
          "1233:             channel_buffer[2] += td->channel_line_size;",
          "1234:             if (channel_buffer[3])",
          "1235:                 channel_buffer[3] += td->channel_line_size;",
          "1236:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1676:     AVFrame *picture = data;",
          "1677:     uint8_t *ptr;",
          "1680:     int out_line_size;",
          "1682:     uint64_t start_offset_table;",
          "",
          "[Removed Lines]",
          "1679:     int y, ret;",
          "",
          "[Added Lines]",
          "1657:     int i, y, ret;",
          "1658:     int planes;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1691:     switch (s->pixel_type) {",
          "1692:     case EXR_FLOAT:",
          "1693:     case EXR_HALF:",
          "1694:     case EXR_UINT:",
          "1695:         if (s->channel_offsets[3] >= 0) {",
          "1696:             if (!s->is_luma) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1673:         if (s->channel_offsets[3] >= 0) {",
          "1674:             if (!s->is_luma) {",
          "1675:                 avctx->pix_fmt = AV_PIX_FMT_GBRAPF32;",
          "1676:             } else {",
          "1678:                 avctx->pix_fmt = AV_PIX_FMT_GBRAPF32;",
          "1679:             }",
          "1680:         } else {",
          "1681:             if (!s->is_luma) {",
          "1682:                 avctx->pix_fmt = AV_PIX_FMT_GBRPF32;",
          "1683:             } else {",
          "1684:                 avctx->pix_fmt = AV_PIX_FMT_GRAYF32;",
          "1685:             }",
          "1686:         }",
          "1687:         break;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1751:     s->desc          = av_pix_fmt_desc_get(avctx->pix_fmt);",
          "1752:     if (!s->desc)",
          "1753:         return AVERROR_INVALIDDATA;",
          "1756:     if (s->is_tile) {",
          "1757:         nb_blocks = ((s->xdelta + s->tile_attr.xSize - 1) / s->tile_attr.xSize) *",
          "",
          "[Removed Lines]",
          "1754:     out_line_size    = avctx->width * 2 * s->desc->nb_components;",
          "",
          "[Added Lines]",
          "1749:     if (s->desc->flags & AV_PIX_FMT_FLAG_FLOAT) {",
          "1750:         planes           = s->desc->nb_components;",
          "1751:         out_line_size    = avctx->width * 4;",
          "1752:     } else {",
          "1753:         planes           = 1;",
          "1754:         out_line_size    = avctx->width * 2 * s->desc->nb_components;",
          "1755:     }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1790:     s->buf      = avpkt->data;",
          "1791:     s->buf_size = avpkt->size;",
          "1798:     }",
          "1800:     s->picture = picture;",
          "",
          "[Removed Lines]",
          "1792:     ptr         = picture->data[0];",
          "1795:     for (y = 0; y < s->ymin; y++) {",
          "1796:         memset(ptr, 0, out_line_size);",
          "1797:         ptr += picture->linesize[0];",
          "",
          "[Added Lines]",
          "1795:     for (i = 0; i < planes; i++) {",
          "1796:         ptr = picture->data[i];",
          "1797:         for (y = 0; y < s->ymin; y++) {",
          "1798:             memset(ptr, 0, out_line_size);",
          "1799:             ptr += picture->linesize[i];",
          "1800:         }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1802:     avctx->execute2(avctx, decode_block, s->thread_data, NULL, nb_blocks);",
          "1809:     }",
          "1811:     picture->pict_type = AV_PICTURE_TYPE_I;",
          "",
          "[Removed Lines]",
          "1805:     ptr = picture->data[0] + ((s->ymax+1) * picture->linesize[0]);",
          "1806:     for (y = s->ymax + 1; y < avctx->height; y++) {",
          "1807:         memset(ptr, 0, out_line_size);",
          "1808:         ptr += picture->linesize[0];",
          "",
          "[Added Lines]",
          "1808:     for (i = 0; i < planes; i++) {",
          "1809:         ptr = picture->data[i] + ((s->ymax+1) * picture->linesize[i]);",
          "1810:         for (y = s->ymax + 1; y < avctx->height; y++) {",
          "1811:             memset(ptr, 0, out_line_size);",
          "1812:             ptr += picture->linesize[i];",
          "1813:         }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1835:         for (i = 0; i < 65536; ++i) {",
          "1836:             t = exr_half2float(i);",
          "1837:             t.f = trc_func(t.f);",
          "1839:         }",
          "1840:     } else {",
          "1841:         if (one_gamma > 0.9999f && one_gamma < 1.0001f) {",
          "1844:         } else {",
          "1845:             for (i = 0; i < 65536; ++i) {",
          "1846:                 t = exr_half2float(i);",
          "1848:                 if (t.f <= 0.0f) {",
          "1850:                 } else {",
          "1851:                     t.f = powf(t.f, one_gamma);",
          "1853:                 }",
          "1854:             }",
          "1855:         }",
          "",
          "[Removed Lines]",
          "1838:             s->gamma_table[i] = exr_flt2uint(t.i);",
          "1842:             for (i = 0; i < 65536; ++i)",
          "1843:                 s->gamma_table[i] = exr_halflt2uint(i);",
          "1849:                     s->gamma_table[i] = exr_halflt2uint(i);",
          "1852:                     s->gamma_table[i] = exr_flt2uint(t.i);",
          "",
          "[Added Lines]",
          "1843:             s->gamma_table[i] = t;",
          "1847:             for (i = 0; i < 65536; ++i) {",
          "1848:                 s->gamma_table[i] = exr_half2float(i);",
          "1849:             }",
          "1855:                     s->gamma_table[i] = t;",
          "1858:                     s->gamma_table[i] = t;",
          "",
          "---------------"
        ],
        "tests/fate/image.mak||tests/fate/image.mak": [
          "File: tests/fate/image.mak -> tests/fate/image.mak",
          "--- Hunk 1 ---",
          "[Context before]",
          "98: fate-dpxparser: CMD = framecrc -f image2pipe -i $(TARGET_SAMPLES)/dpx/lena_4x_concat.dpx -sws_flags +accurate_rnd+bitexact",
          "100: FATE_EXR += fate-exr-slice-raw",
          "103: FATE_EXR += fate-exr-slice-rle",
          "106: FATE_EXR += fate-exr-slice-zip1",
          "109: FATE_EXR += fate-exr-slice-zip16",
          "112: FATE_EXR += fate-exr-slice-pxr24",
          "115: FATE_EXR += fate-exr-rgb-scanline-pxr24-float-12x8",
          "118: FATE_EXR += fate-exr-rgba-multiscanline-half-b44",
          "121: FATE_EXR += fate-exr-rgb-scanline-float-b44",
          "124: FATE_EXR += fate-exr-rgb-scanline-half-b44-12x8",
          "127: FATE_EXR += fate-exr-rgb-scanline-half-b44-13x9",
          "130: FATE_EXR += fate-exr-rgb-tile-float-raw-12x8",
          "133: FATE_EXR += fate-exr-rgb-tile-float-raw-150x130",
          "136: FATE_EXR += fate-exr-rgb-tile-half-raw-12x8",
          "139: FATE_EXR += fate-exr-rgba-scanline-float-half-b44-13x9-l1",
          "142: FATE_EXR += fate-exr-rgba-scanline-float-half-b44-13x9-l2",
          "145: FATE_EXR += fate-exr-rgba-scanline-float-half-b44-12x8-l1",
          "148: FATE_EXR += fate-exr-rgba-scanline-float-half-b44-12x8-l2",
          "151: FATE_EXR += fate-exr-rgba-scanline-float-half-b44a-12x8-l1",
          "154: FATE_EXR += fate-exr-rgba-scanline-float-half-b44a-12x8-l2",
          "157: FATE_EXR += fate-exr-rgba-scanline-float-half-b44a-13x9-l1",
          "160: FATE_EXR += fate-exr-rgba-scanline-float-half-b44a-13x9-l2",
          "163: FATE_EXR += fate-exr-rgb-tile-pxr24-float-half-l1",
          "166: FATE_EXR += fate-exr-rgb-tile-pxr24-float-half-l2",
          "169: FATE_EXR += fate-exr-rgb-tile-pxr24-half-float-l1",
          "172: FATE_EXR += fate-exr-rgb-tile-pxr24-half-float-l2",
          "175: FATE_EXR += fate-exr-rgb-tile-half-float-b44-12x8-l1",
          "178: FATE_EXR += fate-exr-rgb-tile-half-float-b44-12x8-l2",
          "181: FATE_EXR += fate-exr-rgb-tile-zip-half-float-l1",
          "184: FATE_EXR += fate-exr-rgb-tile-zip-half-float-l2",
          "187: FATE_EXR += fate-exr-rgb-tile-zip1-half-float-l1",
          "190: FATE_EXR += fate-exr-rgb-tile-zip1-half-float-l2",
          "193: FATE_EXR += fate-exr-rgb-tile-rle-half-float-l1",
          "196: FATE_EXR += fate-exr-rgb-tile-rle-half-float-l2",
          "199: FATE_EXR += fate-exr-rgb-tile-raw-half-float-l1",
          "202: FATE_EXR += fate-exr-rgb-tile-raw-half-float-l2",
          "205: FATE_EXR += fate-exr-rgb-scanline-b44-half-float-12x8-l1",
          "208: FATE_EXR += fate-exr-rgb-scanline-b44-half-float-12x8-l2",
          "211: FATE_EXR += fate-exr-rgb-scanline-pxr24-half-float-l1",
          "214: FATE_EXR += fate-exr-rgb-scanline-pxr24-half-float-l2",
          "217: FATE_EXR += fate-exr-rgb-scanline-pxr24-float-half-l1",
          "220: FATE_EXR += fate-exr-rgb-scanline-pxr24-float-half-l2",
          "223: FATE_EXR += fate-exr-rgb-scanline-pxr24-half-uint32-13x9",
          "224: fate-exr-rgb-scanline-pxr24-half-uint32-13x9: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_pxr24_half_uint32_13x9.exr -pix_fmt rgb48le",
          "226: FATE_EXR += fate-exr-rgb-scanline-zip-half-float-l1",
          "229: FATE_EXR += fate-exr-rgb-scanline-zip-half-float-l2",
          "232: FATE_EXR += fate-exr-rgb-scanline-zip1-half-float-l1",
          "235: FATE_EXR += fate-exr-rgb-scanline-zip1-half-float-l2",
          "238: FATE_EXR += fate-exr-rgb-scanline-rle-half-float-l1",
          "241: FATE_EXR += fate-exr-rgb-scanline-rle-half-float-l2",
          "244: FATE_EXR += fate-exr-rgb-scanline-raw-half-float-l1",
          "247: FATE_EXR += fate-exr-rgb-scanline-raw-half-float-l2",
          "250: FATE_EXR += fate-exr-rgb-scanline-b44-uint32",
          "251: fate-exr-rgb-scanline-b44-uint32: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_b44_uint32.exr -pix_fmt rgb48le",
          "",
          "[Removed Lines]",
          "101: fate-exr-slice-raw: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgba_slice_raw.exr -pix_fmt rgba64le",
          "104: fate-exr-slice-rle: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgba_slice_rle.exr -pix_fmt rgba64le",
          "107: fate-exr-slice-zip1: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgba_slice_zip1.exr -pix_fmt rgba64le",
          "110: fate-exr-slice-zip16: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgba_slice_zip16.exr -pix_fmt rgba64le",
          "113: fate-exr-slice-pxr24: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_slice_pxr24.exr -pix_fmt rgb48le",
          "116: fate-exr-rgb-scanline-pxr24-float-12x8: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_pxr24_float_12x8.exr -pix_fmt rgb48le",
          "119: fate-exr-rgba-multiscanline-half-b44: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgba_multiscanline_half_b44.exr -pix_fmt rgba64le",
          "122: fate-exr-rgb-scanline-float-b44: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_float_b44.exr -pix_fmt rgb48le",
          "125: fate-exr-rgb-scanline-half-b44-12x8: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_half_b44_12x8.exr -pix_fmt rgb48le",
          "128: fate-exr-rgb-scanline-half-b44-13x9: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_half_b44_13x9.exr -pix_fmt rgb48le",
          "131: fate-exr-rgb-tile-float-raw-12x8: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_tile_float_raw_12x8.exr -pix_fmt rgb48le",
          "134: fate-exr-rgb-tile-float-raw-150x130: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_tile_float_raw_150x130.exr -pix_fmt rgb48le",
          "137: fate-exr-rgb-tile-half-raw-12x8: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_tile_half_raw_12x8.exr -pix_fmt rgb48le",
          "140: fate-exr-rgba-scanline-float-half-b44-13x9-l1: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgba_scanline_float_half_b44_13x9.exr -pix_fmt rgba64le",
          "143: fate-exr-rgba-scanline-float-half-b44-13x9-l2: CMD = framecrc -layer \"VRaySamplerInfo\" -i $(TARGET_SAMPLES)/exr/rgba_scanline_float_half_b44_13x9.exr -pix_fmt rgba64le",
          "146: fate-exr-rgba-scanline-float-half-b44-12x8-l1: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgba_scanline_float_half_b44_12x8.exr -pix_fmt rgba64le",
          "149: fate-exr-rgba-scanline-float-half-b44-12x8-l2: CMD = framecrc -layer \"VRaySamplerInfo\" -i $(TARGET_SAMPLES)/exr/rgba_scanline_float_half_b44_12x8.exr -pix_fmt rgba64le",
          "152: fate-exr-rgba-scanline-float-half-b44a-12x8-l1: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgba_scanline_float_half_b44a_12x8.exr -pix_fmt rgba64le",
          "155: fate-exr-rgba-scanline-float-half-b44a-12x8-l2: CMD = framecrc -layer \"VRaySamplerInfo\" -i $(TARGET_SAMPLES)/exr/rgba_scanline_float_half_b44a_12x8.exr -pix_fmt rgba64le",
          "158: fate-exr-rgba-scanline-float-half-b44a-13x9-l1: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgba_scanline_float_half_b44a_13x9.exr -pix_fmt rgba64le",
          "161: fate-exr-rgba-scanline-float-half-b44a-13x9-l2: CMD = framecrc -layer \"VRaySamplerInfo\" -i $(TARGET_SAMPLES)/exr/rgba_scanline_float_half_b44a_13x9.exr -pix_fmt rgba64le",
          "164: fate-exr-rgb-tile-pxr24-float-half-l1: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_tile_pxr24_float_half.exr -pix_fmt rgb48le",
          "167: fate-exr-rgb-tile-pxr24-float-half-l2: CMD = framecrc -layer \"VRaySamplerInfo\" -i $(TARGET_SAMPLES)/exr/rgb_tile_pxr24_float_half.exr -pix_fmt rgba64le",
          "170: fate-exr-rgb-tile-pxr24-half-float-l1: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_tile_pxr24_half_float.exr -pix_fmt rgb48le",
          "173: fate-exr-rgb-tile-pxr24-half-float-l2: CMD = framecrc -layer \"VRaySamplerInfo\" -i $(TARGET_SAMPLES)/exr/rgb_tile_pxr24_half_float.exr -pix_fmt rgba64le",
          "176: fate-exr-rgb-tile-half-float-b44-12x8-l1: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_tile_half_float_b44_12x8.exr -pix_fmt rgb48le",
          "179: fate-exr-rgb-tile-half-float-b44-12x8-l2: CMD = framecrc -layer \"VRaySamplerInfo\" -i $(TARGET_SAMPLES)/exr/rgb_tile_half_float_b44_12x8.exr -pix_fmt rgba64le",
          "182: fate-exr-rgb-tile-zip-half-float-l1: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_tile_zip_half_float.exr -pix_fmt rgb48le",
          "185: fate-exr-rgb-tile-zip-half-float-l2: CMD = framecrc -layer \"VRaySamplerInfo\" -i $(TARGET_SAMPLES)/exr/rgb_tile_zip_half_float.exr -pix_fmt rgba64le",
          "188: fate-exr-rgb-tile-zip1-half-float-l1: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_tile_zip1_half_float.exr -pix_fmt rgb48le",
          "191: fate-exr-rgb-tile-zip1-half-float-l2: CMD = framecrc -layer \"VRaySamplerInfo\" -i $(TARGET_SAMPLES)/exr/rgb_tile_zip1_half_float.exr -pix_fmt rgba64le",
          "194: fate-exr-rgb-tile-rle-half-float-l1: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_tile_rle_half_float.exr -pix_fmt rgb48le",
          "197: fate-exr-rgb-tile-rle-half-float-l2: CMD = framecrc -layer \"VRaySamplerInfo\" -i $(TARGET_SAMPLES)/exr/rgb_tile_rle_half_float.exr -pix_fmt rgba64le",
          "200: fate-exr-rgb-tile-raw-half-float-l1: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_tile_raw_half_float.exr -pix_fmt rgb48le",
          "203: fate-exr-rgb-tile-raw-half-float-l2: CMD = framecrc -layer \"VRaySamplerInfo\" -i $(TARGET_SAMPLES)/exr/rgb_tile_raw_half_float.exr -pix_fmt rgba64le",
          "206: fate-exr-rgb-scanline-b44-half-float-12x8-l1: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_b44_half_float_12x8.exr -pix_fmt rgb48le",
          "209: fate-exr-rgb-scanline-b44-half-float-12x8-l2: CMD = framecrc -layer \"VRaySamplerInfo\" -i $(TARGET_SAMPLES)/exr/rgb_scanline_b44_half_float_12x8.exr -pix_fmt rgba64le",
          "212: fate-exr-rgb-scanline-pxr24-half-float-l1: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_pxr24_half_float.exr -pix_fmt rgb48le",
          "215: fate-exr-rgb-scanline-pxr24-half-float-l2: CMD = framecrc -layer \"VRaySamplerInfo\" -i $(TARGET_SAMPLES)/exr/rgb_scanline_pxr24_half_float.exr -pix_fmt rgba64le",
          "218: fate-exr-rgb-scanline-pxr24-float-half-l1: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_pxr24_float_half.exr -pix_fmt rgb48le",
          "221: fate-exr-rgb-scanline-pxr24-float-half-l2: CMD = framecrc -layer \"VRaySamplerInfo\" -i $(TARGET_SAMPLES)/exr/rgb_scanline_pxr24_float_half.exr -pix_fmt rgba64le",
          "227: fate-exr-rgb-scanline-zip-half-float-l1: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_zip_half_float.exr -pix_fmt rgb48le",
          "230: fate-exr-rgb-scanline-zip-half-float-l2: CMD = framecrc -layer \"VRaySamplerInfo\" -i $(TARGET_SAMPLES)/exr/rgb_scanline_zip_half_float.exr -pix_fmt rgba64le",
          "233: fate-exr-rgb-scanline-zip1-half-float-l1: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_zip1_half_float.exr -pix_fmt rgb48le",
          "236: fate-exr-rgb-scanline-zip1-half-float-l2: CMD = framecrc -layer \"VRaySamplerInfo\" -i $(TARGET_SAMPLES)/exr/rgb_scanline_zip1_half_float.exr -pix_fmt rgba64le",
          "239: fate-exr-rgb-scanline-rle-half-float-l1: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_rle_half_float.exr -pix_fmt rgb48le",
          "242: fate-exr-rgb-scanline-rle-half-float-l2: CMD = framecrc -layer \"VRaySamplerInfo\" -i $(TARGET_SAMPLES)/exr/rgb_scanline_rle_half_float.exr -pix_fmt rgba64le",
          "245: fate-exr-rgb-scanline-raw-half-float-l1: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_raw_half_float.exr -pix_fmt rgb48le",
          "248: fate-exr-rgb-scanline-raw-half-float-l2: CMD = framecrc -layer \"VRaySamplerInfo\" -i $(TARGET_SAMPLES)/exr/rgb_scanline_raw_half_float.exr -pix_fmt rgba64le",
          "",
          "[Added Lines]",
          "101: fate-exr-slice-raw: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgba_slice_raw.exr -pix_fmt gbrapf32le",
          "104: fate-exr-slice-rle: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgba_slice_rle.exr -pix_fmt gbrapf32le",
          "107: fate-exr-slice-zip1: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgba_slice_zip1.exr -pix_fmt gbrapf32le",
          "110: fate-exr-slice-zip16: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgba_slice_zip16.exr -pix_fmt gbrapf32le",
          "113: fate-exr-slice-pxr24: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_slice_pxr24.exr -pix_fmt gbrpf32le",
          "116: fate-exr-rgb-scanline-pxr24-float-12x8: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_pxr24_float_12x8.exr -pix_fmt gbrpf32le",
          "119: fate-exr-rgba-multiscanline-half-b44: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgba_multiscanline_half_b44.exr -pix_fmt gbrapf32le",
          "122: fate-exr-rgb-scanline-float-b44: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_float_b44.exr -pix_fmt gbrpf32le",
          "125: fate-exr-rgb-scanline-half-b44-12x8: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_half_b44_12x8.exr -pix_fmt gbrpf32le",
          "128: fate-exr-rgb-scanline-half-b44-13x9: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_half_b44_13x9.exr -pix_fmt gbrpf32le",
          "131: fate-exr-rgb-tile-float-raw-12x8: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_tile_float_raw_12x8.exr -pix_fmt gbrpf32le",
          "134: fate-exr-rgb-tile-float-raw-150x130: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_tile_float_raw_150x130.exr -pix_fmt gbrpf32le",
          "137: fate-exr-rgb-tile-half-raw-12x8: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_tile_half_raw_12x8.exr -pix_fmt gbrpf32le",
          "140: fate-exr-rgba-scanline-float-half-b44-13x9-l1: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgba_scanline_float_half_b44_13x9.exr -pix_fmt gbrapf32le",
          "143: fate-exr-rgba-scanline-float-half-b44-13x9-l2: CMD = framecrc -layer \"VRaySamplerInfo\" -i $(TARGET_SAMPLES)/exr/rgba_scanline_float_half_b44_13x9.exr -pix_fmt gbrapf32le",
          "146: fate-exr-rgba-scanline-float-half-b44-12x8-l1: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgba_scanline_float_half_b44_12x8.exr -pix_fmt gbrapf32le",
          "149: fate-exr-rgba-scanline-float-half-b44-12x8-l2: CMD = framecrc -layer \"VRaySamplerInfo\" -i $(TARGET_SAMPLES)/exr/rgba_scanline_float_half_b44_12x8.exr -pix_fmt gbrapf32le",
          "152: fate-exr-rgba-scanline-float-half-b44a-12x8-l1: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgba_scanline_float_half_b44a_12x8.exr -pix_fmt gbrapf32le",
          "155: fate-exr-rgba-scanline-float-half-b44a-12x8-l2: CMD = framecrc -layer \"VRaySamplerInfo\" -i $(TARGET_SAMPLES)/exr/rgba_scanline_float_half_b44a_12x8.exr -pix_fmt gbrapf32le",
          "158: fate-exr-rgba-scanline-float-half-b44a-13x9-l1: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgba_scanline_float_half_b44a_13x9.exr -pix_fmt gbrapf32le",
          "161: fate-exr-rgba-scanline-float-half-b44a-13x9-l2: CMD = framecrc -layer \"VRaySamplerInfo\" -i $(TARGET_SAMPLES)/exr/rgba_scanline_float_half_b44a_13x9.exr -pix_fmt gbrapf32le",
          "164: fate-exr-rgb-tile-pxr24-float-half-l1: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_tile_pxr24_float_half.exr -pix_fmt gbrpf32le",
          "167: fate-exr-rgb-tile-pxr24-float-half-l2: CMD = framecrc -layer \"VRaySamplerInfo\" -i $(TARGET_SAMPLES)/exr/rgb_tile_pxr24_float_half.exr -pix_fmt gbrapf32le",
          "170: fate-exr-rgb-tile-pxr24-half-float-l1: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_tile_pxr24_half_float.exr -pix_fmt gbrpf32le",
          "173: fate-exr-rgb-tile-pxr24-half-float-l2: CMD = framecrc -layer \"VRaySamplerInfo\" -i $(TARGET_SAMPLES)/exr/rgb_tile_pxr24_half_float.exr -pix_fmt gbrapf32le",
          "176: fate-exr-rgb-tile-half-float-b44-12x8-l1: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_tile_half_float_b44_12x8.exr -pix_fmt gbrpf32le",
          "179: fate-exr-rgb-tile-half-float-b44-12x8-l2: CMD = framecrc -layer \"VRaySamplerInfo\" -i $(TARGET_SAMPLES)/exr/rgb_tile_half_float_b44_12x8.exr -pix_fmt gbrapf32le",
          "182: fate-exr-rgb-tile-zip-half-float-l1: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_tile_zip_half_float.exr -pix_fmt gbrpf32le",
          "185: fate-exr-rgb-tile-zip-half-float-l2: CMD = framecrc -layer \"VRaySamplerInfo\" -i $(TARGET_SAMPLES)/exr/rgb_tile_zip_half_float.exr -pix_fmt gbrapf32le",
          "188: fate-exr-rgb-tile-zip1-half-float-l1: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_tile_zip1_half_float.exr -pix_fmt gbrpf32le",
          "191: fate-exr-rgb-tile-zip1-half-float-l2: CMD = framecrc -layer \"VRaySamplerInfo\" -i $(TARGET_SAMPLES)/exr/rgb_tile_zip1_half_float.exr -pix_fmt gbrapf32le",
          "194: fate-exr-rgb-tile-rle-half-float-l1: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_tile_rle_half_float.exr -pix_fmt gbrpf32le",
          "197: fate-exr-rgb-tile-rle-half-float-l2: CMD = framecrc -layer \"VRaySamplerInfo\" -i $(TARGET_SAMPLES)/exr/rgb_tile_rle_half_float.exr -pix_fmt gbrapf32le",
          "200: fate-exr-rgb-tile-raw-half-float-l1: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_tile_raw_half_float.exr -pix_fmt gbrpf32le",
          "203: fate-exr-rgb-tile-raw-half-float-l2: CMD = framecrc -layer \"VRaySamplerInfo\" -i $(TARGET_SAMPLES)/exr/rgb_tile_raw_half_float.exr -pix_fmt gbrapf32le",
          "206: fate-exr-rgb-scanline-b44-half-float-12x8-l1: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_b44_half_float_12x8.exr -pix_fmt gbrpf32le",
          "209: fate-exr-rgb-scanline-b44-half-float-12x8-l2: CMD = framecrc -layer \"VRaySamplerInfo\" -i $(TARGET_SAMPLES)/exr/rgb_scanline_b44_half_float_12x8.exr -pix_fmt gbrapf32le",
          "212: fate-exr-rgb-scanline-pxr24-half-float-l1: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_pxr24_half_float.exr -pix_fmt gbrpf32le",
          "215: fate-exr-rgb-scanline-pxr24-half-float-l2: CMD = framecrc -layer \"VRaySamplerInfo\" -i $(TARGET_SAMPLES)/exr/rgb_scanline_pxr24_half_float.exr -pix_fmt gbrapf32le",
          "218: fate-exr-rgb-scanline-pxr24-float-half-l1: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_pxr24_float_half.exr -pix_fmt gbrpf32le",
          "221: fate-exr-rgb-scanline-pxr24-float-half-l2: CMD = framecrc -layer \"VRaySamplerInfo\" -i $(TARGET_SAMPLES)/exr/rgb_scanline_pxr24_float_half.exr -pix_fmt gbrapf32le",
          "227: fate-exr-rgb-scanline-zip-half-float-l1: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_zip_half_float.exr -pix_fmt gbrpf32le",
          "230: fate-exr-rgb-scanline-zip-half-float-l2: CMD = framecrc -layer \"VRaySamplerInfo\" -i $(TARGET_SAMPLES)/exr/rgb_scanline_zip_half_float.exr -pix_fmt gbrapf32le",
          "233: fate-exr-rgb-scanline-zip1-half-float-l1: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_zip1_half_float.exr -pix_fmt gbrpf32le",
          "236: fate-exr-rgb-scanline-zip1-half-float-l2: CMD = framecrc -layer \"VRaySamplerInfo\" -i $(TARGET_SAMPLES)/exr/rgb_scanline_zip1_half_float.exr -pix_fmt gbrapf32le",
          "239: fate-exr-rgb-scanline-rle-half-float-l1: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_rle_half_float.exr -pix_fmt gbrpf32le",
          "242: fate-exr-rgb-scanline-rle-half-float-l2: CMD = framecrc -layer \"VRaySamplerInfo\" -i $(TARGET_SAMPLES)/exr/rgb_scanline_rle_half_float.exr -pix_fmt gbrapf32le",
          "245: fate-exr-rgb-scanline-raw-half-float-l1: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_raw_half_float.exr -pix_fmt gbrpf32le",
          "248: fate-exr-rgb-scanline-raw-half-float-l2: CMD = framecrc -layer \"VRaySamplerInfo\" -i $(TARGET_SAMPLES)/exr/rgb_scanline_raw_half_float.exr -pix_fmt gbrapf32le",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "254: fate-exr-rgb-scanline-pxr24-uint32: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_pxr24_uint32.exr -pix_fmt rgb48le",
          "256: FATE_EXR += fate-exr-rgb-scanline-zip1-half-float-l1-zero-offsets",
          "259: FATE_EXR += fate-exr-rgb-scanline-half-piz-bw",
          "262: FATE_EXR += fate-exr-rgb-scanline-half-piz-color",
          "265: FATE_EXR += fate-exr-rgb-scanline-half-piz-dw-t01",
          "268: FATE_EXR += fate-exr-rgb-scanline-float-piz-48x32",
          "271: FATE_EXR += fate-exr-rgb-scanline-none-negative-red",
          "275: FATE_EXR += fate-exr-rgb-b44a-half-negative-4x4",
          "278: FATE_EXR += fate-exr-y-tile-zip-half-12x8",
          "281: FATE_EXR += fate-exr-y-scanline-zip-half-12x8",
          "284: FATE_EXR += fate-exr-rgb-scanline-half-piz-dw-t08",
          "287: FATE_EXR += fate-exr-rgba-zip16-16x32-flag4",
          "290: FATE_EXR-$(call DEMDEC, IMAGE2, EXR) += $(FATE_EXR)",
          "",
          "[Removed Lines]",
          "257: fate-exr-rgb-scanline-zip1-half-float-l1-zero-offsets: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_zip1_half_float_zero_offsets.exr -pix_fmt rgb48le",
          "260: fate-exr-rgb-scanline-half-piz-bw: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_half_piz_bw.exr -pix_fmt rgb48le",
          "263: fate-exr-rgb-scanline-half-piz-color: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_half_piz_color.exr -pix_fmt rgb48le",
          "266: fate-exr-rgb-scanline-half-piz-dw-t01: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_half_piz_dw_t01.exr -pix_fmt rgb48le",
          "269: fate-exr-rgb-scanline-float-piz-48x32: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_float_piz_48x32.exr -pix_fmt rgb48le",
          "272: fate-exr-rgb-scanline-none-negative-red: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_none_negative_red.exr -pix_fmt rgb48le",
          "276: fate-exr-rgb-b44a-half-negative-4x4: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_b44a_half_negative_4x4.exr -pix_fmt rgb48le",
          "279: fate-exr-y-tile-zip-half-12x8: CMD = framecrc -i $(TARGET_SAMPLES)/exr/y_tile_zip_half_12x8.exr -pix_fmt gray16le",
          "282: fate-exr-y-scanline-zip-half-12x8: CMD = framecrc -i $(TARGET_SAMPLES)/exr/y_scanline_zip_half_12x8.exr -pix_fmt gray16le",
          "285: fate-exr-rgb-scanline-half-piz-dw-t08: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_half_piz_dw_t08.exr -pix_fmt rgb48le",
          "288: fate-exr-rgba-zip16-16x32-flag4: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgba_zip16_16x32_flag4.exr -pix_fmt rgba64le",
          "",
          "[Added Lines]",
          "257: fate-exr-rgb-scanline-zip1-half-float-l1-zero-offsets: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_zip1_half_float_zero_offsets.exr -pix_fmt gbrpf32le",
          "260: fate-exr-rgb-scanline-half-piz-bw: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_half_piz_bw.exr -pix_fmt gbrpf32le",
          "263: fate-exr-rgb-scanline-half-piz-color: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_half_piz_color.exr -pix_fmt gbrpf32le",
          "266: fate-exr-rgb-scanline-half-piz-dw-t01: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_half_piz_dw_t01.exr -pix_fmt gbrpf32le",
          "269: fate-exr-rgb-scanline-float-piz-48x32: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_float_piz_48x32.exr -pix_fmt gbrpf32le",
          "272: fate-exr-rgb-scanline-none-negative-red: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_none_negative_red.exr -pix_fmt gbrpf32le",
          "276: fate-exr-rgb-b44a-half-negative-4x4: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_b44a_half_negative_4x4.exr -pix_fmt gbrpf32le",
          "279: fate-exr-y-tile-zip-half-12x8: CMD = framecrc -i $(TARGET_SAMPLES)/exr/y_tile_zip_half_12x8.exr -pix_fmt grayf32le",
          "282: fate-exr-y-scanline-zip-half-12x8: CMD = framecrc -i $(TARGET_SAMPLES)/exr/y_scanline_zip_half_12x8.exr -pix_fmt grayf32le",
          "285: fate-exr-rgb-scanline-half-piz-dw-t08: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_half_piz_dw_t08.exr -pix_fmt gbrpf32le",
          "288: fate-exr-rgba-zip16-16x32-flag4: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgba_zip16_16x32_flag4.exr -pix_fmt gbrapf32le",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1c094563fe93cfe0e8b5632efa7b2c6c26b3f205",
      "candidate_info": {
        "commit_hash": "1c094563fe93cfe0e8b5632efa7b2c6c26b3f205",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/1c094563fe93cfe0e8b5632efa7b2c6c26b3f205",
        "files": [
          "libavcodec/exr.c",
          "tests/fate/image.mak",
          "tests/ref/fate/exr-rgb-scanline-float-zip-dw-large",
          "tests/ref/fate/exr-rgb-scanline-half-piz-dw-large",
          "tests/ref/fate/exr-rgb-scanline-half-zip-dw-large",
          "tests/ref/fate/exr-rgb-scanline-half-zip-dw-outside",
          "tests/ref/fate/exr-rgb-scanline-uint32-piz-dw-large",
          "tests/ref/fate/exr-rgb-tile-half-piz-dw-large",
          "tests/ref/fate/exr-rgb-tile-half-zip",
          "tests/ref/fate/exr-rgb-tile-half-zip-dw-outside",
          "tests/ref/fate/exr-rgb-tile-uint32-piz-dw-large",
          "tests/ref/fate/exr-ya-scanline-zip-half-12x8"
        ],
        "message": "avcodec/exr: add support data windows larger or outside display window",
        "before_after_code_files": [
          "libavcodec/exr.c||libavcodec/exr.c",
          "tests/fate/image.mak||tests/fate/image.mak"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/exr.c||libavcodec/exr.c"
          ],
          "candidate": [
            "libavcodec/exr.c||libavcodec/exr.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/exr.c||libavcodec/exr.c": [
          "File: libavcodec/exr.c -> libavcodec/exr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:     const AVPixFmtDescriptor *desc;",
          "136:     int w, h;",
          "139:     uint32_t xdelta, ydelta;",
          "141:     int scan_lines_per_block;",
          "",
          "[Removed Lines]",
          "137:     uint32_t xmax, xmin;",
          "138:     uint32_t ymax, ymin;",
          "",
          "[Added Lines]",
          "137:     int32_t xmax, xmin;",
          "138:     int32_t ymax, ymin;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "995:     uint64_t line_offset, uncompressed_size;",
          "996:     uint8_t *ptr;",
          "997:     uint32_t data_size;",
          "999:     uint64_t tile_x, tile_y, tile_level_x, tile_level_y;",
          "1000:     const uint8_t *src;",
          "1001:     int step = s->desc->flags & AV_PIX_FMT_FLAG_FLOAT ? 4 : 2 * s->desc->nb_components;",
          "1004:     int i, x, buf_size = s->buf_size;",
          "1005:     int c, rgb_channel_count;",
          "1006:     float one_gamma = 1.0f / s->gamma;",
          "",
          "[Removed Lines]",
          "998:     uint64_t line, col = 0;",
          "",
          "[Added Lines]",
          "998:     int line, col = 0;",
          "1002:     int bxmin, axmax, window_xoffset = 0;",
          "1003:     int window_xmin, window_xmax, window_ymin, window_ymax;",
          "1004:     int data_xoffset, data_yoffset, data_window_offset, xsize, ysize;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1029:             return AVERROR_PATCHWELCOME;",
          "1030:         }",
          "1038:         col = s->tile_attr.xSize * tile_x;",
          "1040:         if (line < s->ymin || line > s->ymax ||",
          "1042:             return AVERROR_INVALIDDATA;",
          "1044:         td->ysize = FFMIN(s->tile_attr.ySize, s->ydelta - tile_y * s->tile_attr.ySize);",
          "1045:         td->xsize = FFMIN(s->tile_attr.xSize, s->xdelta - tile_x * s->tile_attr.xSize);",
          "1056:     } else {",
          "",
          "[Removed Lines]",
          "1032:         if (s->xmin || s->ymin) {",
          "1033:             avpriv_report_missing_feature(s->avctx, \"Tiles with xmin/ymin\");",
          "1034:             return AVERROR_PATCHWELCOME;",
          "1035:         }",
          "1037:         line = s->tile_attr.ySize * tile_y;",
          "1041:             col  < s->xmin || col  > s->xmax)",
          "1049:         }",
          "",
          "[Added Lines]",
          "1033:         line = s->ymin + s->tile_attr.ySize * tile_y;",
          "1037:             s->xmin + col  < s->xmin ||  s->xmin + col  > s->xmax)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1081:         }",
          "1082:     }",
          "1085:         av_fast_padded_malloc(&td->tmp, &td->tmp_size, uncompressed_size);",
          "1086:         if (!td->tmp)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1073:     window_xmin = FFMIN(avctx->width, FFMAX(0, s->xmin + col));",
          "1074:     window_xmax = FFMIN(avctx->width, FFMAX(0, s->xmin + col + td->xsize));",
          "1075:     window_ymin = FFMIN(avctx->height, FFMAX(0, line ));",
          "1076:     window_ymax = FFMIN(avctx->height, FFMAX(0, line + td->ysize));",
          "1077:     xsize = window_xmax - window_xmin;",
          "1078:     ysize = window_ymax - window_ymin;",
          "1081:     if (xsize <= 0 || ysize <= 0)",
          "1082:         return 0;",
          "1085:     if(col == 0) {",
          "1086:         window_xmin = 0;",
          "1088:         window_xoffset = FFMAX(0, s->xmin);",
          "1090:         bxmin = window_xoffset * step;",
          "1091:     }",
          "1094:     if(col + td->xsize == s->xdelta) {",
          "1095:         window_xmax = avctx->width;",
          "1097:         axmax = FFMAX(0, (avctx->width - (s->xmax + 1))) * step;",
          "1098:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1121:         src = td->uncompressed_data;",
          "1122:     }",
          "1124:     if (!s->is_luma) {",
          "1128:         rgb_channel_count = 3;",
          "1131:         rgb_channel_count = 1;",
          "1132:     }",
          "1136:     if (s->desc->flags & AV_PIX_FMT_FLAG_FLOAT) {",
          "",
          "[Removed Lines]",
          "1125:         channel_buffer[0] = src + td->xsize * s->channel_offsets[0];",
          "1126:         channel_buffer[1] = src + td->xsize * s->channel_offsets[1];",
          "1127:         channel_buffer[2] = src + td->xsize * s->channel_offsets[2];",
          "1130:         channel_buffer[0] = src + td->xsize * s->channel_offsets[1];",
          "1133:     if (s->channel_offsets[3] >= 0)",
          "1134:         channel_buffer[3] = src + td->xsize * s->channel_offsets[3];",
          "",
          "[Added Lines]",
          "1141:     data_xoffset = FFABS(FFMIN(0, s->xmin + col)) * (s->pixel_type == EXR_HALF ? 2 : 4);",
          "1142:     data_yoffset = FFABS(FFMIN(0, line));",
          "1143:     data_window_offset = (data_yoffset * td->channel_line_size) + data_xoffset;",
          "1146:         channel_buffer[0] = src + (td->xsize * s->channel_offsets[0]) + data_window_offset;",
          "1147:         channel_buffer[1] = src + (td->xsize * s->channel_offsets[1]) + data_window_offset;",
          "1148:         channel_buffer[2] = src + (td->xsize * s->channel_offsets[2]) + data_window_offset;",
          "1151:         channel_buffer[0] = src + (td->xsize * s->channel_offsets[1]) + data_window_offset;",
          "1154:      if (s->channel_offsets[3] >= 0)",
          "1155:         channel_buffer[3] = src + (td->xsize * s->channel_offsets[3]) + data_window_offset;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1145:         for (c = 0; c < channel_count; c++) {",
          "1146:             int plane = s->desc->comp[c].plane;",
          "1150:                 const uint8_t *src;",
          "1151:                 union av_intfloat32 *ptr_x;",
          "",
          "[Removed Lines]",
          "1147:             ptr = p->data[plane] + line * p->linesize[plane] + (col * 4);",
          "1149:             for (i = 0; i < td->ysize; i++, ptr += p->linesize[plane]) {",
          "",
          "[Added Lines]",
          "1168:             ptr = p->data[plane] + window_ymin * p->linesize[plane] + (window_xmin * 4);",
          "1170:             for (i = 0; i < ysize; i++, ptr += p->linesize[plane]) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1157:                 memset(ptr_x, 0, bxmin);",
          "1160:                 if (s->pixel_type == EXR_FLOAT) {",
          "1162:                     union av_intfloat32 t;",
          "1163:                     if (trc_func && c < 3) {",
          "1165:                             t.i = bytestream_get_le32(&src);",
          "1166:                             t.f = trc_func(t.f);",
          "1168:                         }",
          "1169:                     } else {",
          "1171:                             t.i = bytestream_get_le32(&src);",
          "1173:                                 t.f = powf(t.f, one_gamma);",
          "",
          "[Removed Lines]",
          "1158:                 ptr_x += s->xmin;",
          "1164:                         for (x = 0; x < td->xsize; x++) {",
          "1170:                         for (x = 0; x < td->xsize; x++) {",
          "",
          "[Added Lines]",
          "1179:                 ptr_x += window_xoffset;",
          "1185:                         for (x = 0; x < xsize; x++) {",
          "1191:                         for (x = 0; x < xsize; x++) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1177:                 } else if (s->pixel_type == EXR_HALF) {",
          "1179:                     if (c < 3) {",
          "1182:                         }",
          "1183:                     } else {",
          "1186:                         }",
          "1187:                     }",
          "",
          "[Removed Lines]",
          "1180:                         for (x = 0; x < td->xsize; x++) {",
          "1184:                         for (x = 0; x < td->xsize; x++) {",
          "",
          "[Added Lines]",
          "1201:                         for (x = 0; x < xsize; x++) {",
          "1205:                         for (x = 0; x < xsize; x++) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1195:     } else {",
          "1197:         av_assert1(s->pixel_type == EXR_UINT);",
          "1202:             const uint8_t * a;",
          "1203:             const uint8_t *rgb[3];",
          "",
          "[Removed Lines]",
          "1198:         ptr = p->data[0] + line * p->linesize[0] + (col * s->desc->nb_components * 2);",
          "1200:         for (i = 0; i < td->ysize; i++, ptr += p->linesize[0]) {",
          "",
          "[Added Lines]",
          "1219:         ptr = p->data[0] + window_ymin * p->linesize[0] + (window_xmin * s->desc->nb_components * 2);",
          "1221:         for (i = 0; i < ysize; i++, ptr += p->linesize[0]) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1216:             memset(ptr_x, 0, bxmin);",
          "1220:                 for (c = 0; c < rgb_channel_count; c++) {",
          "1222:                 }",
          "",
          "[Removed Lines]",
          "1217:             ptr_x += s->xmin * s->desc->nb_components;",
          "1219:             for (x = 0; x < td->xsize; x++) {",
          "",
          "[Added Lines]",
          "1238:             ptr_x += window_xoffset * s->desc->nb_components;",
          "1240:             for (x = 0; x < xsize; x++) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1654:     AVFrame *picture = data;",
          "1655:     uint8_t *ptr;",
          "1658:     int planes;",
          "1659:     int out_line_size;",
          "",
          "[Removed Lines]",
          "1657:     int i, y, ret;",
          "",
          "[Added Lines]",
          "1678:     int i, y, ret, ymax;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1728:         return AVERROR_PATCHWELCOME;",
          "1729:     }",
          "1738:         av_log(avctx, AV_LOG_ERROR, \"Wrong or missing size information.\\n\");",
          "1739:         return AVERROR_INVALIDDATA;",
          "1740:     }",
          "",
          "[Removed Lines]",
          "1733:     if (s->xmin > s->xmax                  ||",
          "1734:         s->ymin > s->ymax                  ||",
          "1735:         s->xdelta != s->xmax - s->xmin + 1 ||",
          "1736:         s->xmax >= s->w                    ||",
          "1737:         s->ymax >= s->h) {",
          "",
          "[Added Lines]",
          "1754:     if (s->xmin > s->xmax  || s->ymin > s->ymax) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1805:     avctx->execute2(avctx, decode_block, s->thread_data, NULL, nb_blocks);",
          "1808:     for (i = 0; i < planes; i++) {",
          "1811:             memset(ptr, 0, out_line_size);",
          "1812:             ptr += picture->linesize[i];",
          "1813:         }",
          "",
          "[Removed Lines]",
          "1809:         ptr = picture->data[i] + ((s->ymax+1) * picture->linesize[i]);",
          "1810:         for (y = s->ymax + 1; y < avctx->height; y++) {",
          "",
          "[Added Lines]",
          "1824:     ymax = FFMAX(0, s->ymax + 1);",
          "1827:         ptr = picture->data[i] + (ymax * picture->linesize[i]);",
          "1828:         for (y = ymax; y < avctx->height; y++) {",
          "",
          "---------------"
        ],
        "tests/fate/image.mak||tests/fate/image.mak": [
          "File: tests/fate/image.mak -> tests/fate/image.mak",
          "--- Hunk 1 ---",
          "[Context before]",
          "287: FATE_EXR += fate-exr-rgba-zip16-16x32-flag4",
          "288: fate-exr-rgba-zip16-16x32-flag4: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgba_zip16_16x32_flag4.exr -pix_fmt gbrapf32le",
          "290: FATE_EXR-$(call DEMDEC, IMAGE2, EXR) += $(FATE_EXR)",
          "292: FATE_IMAGE += $(FATE_EXR-yes)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "290: FATE_EXR += fate-exr-ya-scanline-zip-half-12x8",
          "291: fate-exr-ya-scanline-zip-half-12x8: CMD = framecrc -i $(TARGET_SAMPLES)/exr/ya_scanline_zip_half_12x8.exr -pix_fmt gbrapf32le",
          "293: FATE_EXR += fate-exr-rgb-tile-half-zip",
          "294: fate-exr-rgb-tile-half-zip: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_tile_half_zip.exr -pix_fmt gbrpf32le",
          "296: FATE_EXR += fate-exr-rgb-scanline-float-zip-dw-large",
          "297: fate-exr-rgb-scanline-float-zip-dw-large: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_float_zip_dw_large.exr -pix_fmt gbrpf32le",
          "299: FATE_EXR += fate-exr-rgb-scanline-half-piz-dw-large",
          "300: fate-exr-rgb-scanline-half-piz-dw-large: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_half_piz_dw_large.exr -pix_fmt gbrpf32le",
          "302: FATE_EXR += fate-exr-rgb-scanline-half-zip-dw-large",
          "303: fate-exr-rgb-scanline-half-zip-dw-large: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_half_zip_dw_large.exr -pix_fmt gbrpf32le",
          "305: FATE_EXR += fate-exr-rgb-scanline-uint32-piz-dw-large",
          "306: fate-exr-rgb-scanline-uint32-piz-dw-large: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_uint32_piz_dw_large.exr -pix_fmt rgb48le",
          "308: FATE_EXR += fate-exr-rgb-tile-half-piz-dw-large",
          "309: fate-exr-rgb-tile-half-piz-dw-large: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_tile_half_piz_dw_large.exr -pix_fmt gbrpf32le",
          "311: FATE_EXR += fate-exr-rgb-tile-uint32-piz-dw-large",
          "312: fate-exr-rgb-tile-uint32-piz-dw-large: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_tile_uint32_piz_dw_large.exr -pix_fmt rgb48le",
          "314: FATE_EXR += fate-exr-rgb-scanline-half-zip-dw-outside",
          "315: fate-exr-rgb-scanline-half-zip-dw-outside: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_scanline_half_zip_dw_outside.exr -pix_fmt gbrpf32le",
          "317: FATE_EXR += fate-exr-rgb-tile-half-zip-dw-outside",
          "318: fate-exr-rgb-tile-half-zip-dw-outside: CMD = framecrc -i $(TARGET_SAMPLES)/exr/rgb_tile_half_zip_dw_outside.exr -pix_fmt gbrpf32le",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "97c89068e9d5fbe1b892e0e4efbf0dad0cbbaaa3",
      "candidate_info": {
        "commit_hash": "97c89068e9d5fbe1b892e0e4efbf0dad0cbbaaa3",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/97c89068e9d5fbe1b892e0e4efbf0dad0cbbaaa3",
        "files": [
          "libavcodec/exr.c"
        ],
        "message": "avcodec/exr: skip bottom clearing loop when its outside the image\n\nFixes: signed integer overflow: 1633771809 * 32960 cannot be represented in type 'int'\nFixes: 26532/clusterfuzz-testcase-minimized-ffmpeg_AV_CODEC_ID_EXR_fuzzer-5613925708857344\n\nFound-by: continuous fuzzing process https://github.com/google/oss-fuzz/tree/master/projects/ffmpeg\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
        "before_after_code_files": [
          "libavcodec/exr.c||libavcodec/exr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/exr.c||libavcodec/exr.c"
          ],
          "candidate": [
            "libavcodec/exr.c||libavcodec/exr.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/exr.c||libavcodec/exr.c": [
          "File: libavcodec/exr.c -> libavcodec/exr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1821:     avctx->execute2(avctx, decode_block, s->thread_data, NULL, nb_blocks);",
          "1828:     }",
          "1830:     picture->pict_type = AV_PICTURE_TYPE_I;",
          "",
          "[Removed Lines]",
          "1824:     ptr = picture->data[0] + ((s->ymax+1) * picture->linesize[0]);",
          "1825:     for (y = s->ymax + 1; y < avctx->height; y++) {",
          "1826:         memset(ptr, 0, out_line_size);",
          "1827:         ptr += picture->linesize[0];",
          "",
          "[Added Lines]",
          "1824:     if ((s->ymax+1) < avctx->height) {",
          "1825:         ptr = picture->data[0] + ((s->ymax+1) * picture->linesize[0]);",
          "1826:         for (y = s->ymax + 1; y < avctx->height; y++) {",
          "1827:             memset(ptr, 0, out_line_size);",
          "1828:             ptr += picture->linesize[0];",
          "1829:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "183fca09b08c56cbd8a27a80996170537f0c2a6c",
      "candidate_info": {
        "commit_hash": "183fca09b08c56cbd8a27a80996170537f0c2a6c",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/183fca09b08c56cbd8a27a80996170537f0c2a6c",
        "files": [
          "libavcodec/exr.c"
        ],
        "message": "avcodec/exr: skip bottom clearing loop when its outside the image\n\nFixes: signed integer overflow: 1633771809 * 32960 cannot be represented in type 'int'\nFixes: 26532/clusterfuzz-testcase-minimized-ffmpeg_AV_CODEC_ID_EXR_fuzzer-5613925708857344\n\nFound-by: continuous fuzzing process https://github.com/google/oss-fuzz/tree/master/projects/ffmpeg\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
        "before_after_code_files": [
          "libavcodec/exr.c||libavcodec/exr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/exr.c||libavcodec/exr.c"
          ],
          "candidate": [
            "libavcodec/exr.c||libavcodec/exr.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/exr.c||libavcodec/exr.c": [
          "File: libavcodec/exr.c -> libavcodec/exr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1821:     avctx->execute2(avctx, decode_block, s->thread_data, NULL, nb_blocks);",
          "1828:     }",
          "1830:     picture->pict_type = AV_PICTURE_TYPE_I;",
          "",
          "[Removed Lines]",
          "1824:     ptr = picture->data[0] + ((s->ymax+1) * picture->linesize[0]);",
          "1825:     for (y = s->ymax + 1; y < avctx->height; y++) {",
          "1826:         memset(ptr, 0, out_line_size);",
          "1827:         ptr += picture->linesize[0];",
          "",
          "[Added Lines]",
          "1824:     if ((s->ymax+1) < avctx->height) {",
          "1825:         ptr = picture->data[0] + ((s->ymax+1) * picture->linesize[0]);",
          "1826:         for (y = s->ymax + 1; y < avctx->height; y++) {",
          "1827:             memset(ptr, 0, out_line_size);",
          "1828:             ptr += picture->linesize[0];",
          "1829:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "af1a0cedb22c287cdc79f230082d9fec87a9823a",
      "candidate_info": {
        "commit_hash": "af1a0cedb22c287cdc79f230082d9fec87a9823a",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/af1a0cedb22c287cdc79f230082d9fec87a9823a",
        "files": [
          "libavcodec/exr.c"
        ],
        "message": "avcodec/exr: skip bottom clearing loop when its outside the image\n\nFixes: signed integer overflow: 1633771809 * 32960 cannot be represented in type 'int'\nFixes: 26532/clusterfuzz-testcase-minimized-ffmpeg_AV_CODEC_ID_EXR_fuzzer-5613925708857344\n\nFound-by: continuous fuzzing process https://github.com/google/oss-fuzz/tree/master/projects/ffmpeg\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
        "before_after_code_files": [
          "libavcodec/exr.c||libavcodec/exr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/exr.c||libavcodec/exr.c"
          ],
          "candidate": [
            "libavcodec/exr.c||libavcodec/exr.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/exr.c||libavcodec/exr.c": [
          "File: libavcodec/exr.c -> libavcodec/exr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1819:     avctx->execute2(avctx, decode_block, s->thread_data, NULL, nb_blocks);",
          "1826:     }",
          "1828:     picture->pict_type = AV_PICTURE_TYPE_I;",
          "",
          "[Removed Lines]",
          "1822:     ptr = picture->data[0] + ((s->ymax+1) * picture->linesize[0]);",
          "1823:     for (y = s->ymax + 1; y < avctx->height; y++) {",
          "1824:         memset(ptr, 0, out_line_size);",
          "1825:         ptr += picture->linesize[0];",
          "",
          "[Added Lines]",
          "1822:     if ((s->ymax+1) < avctx->height) {",
          "1823:         ptr = picture->data[0] + ((s->ymax+1) * picture->linesize[0]);",
          "1824:         for (y = s->ymax + 1; y < avctx->height; y++) {",
          "1825:             memset(ptr, 0, out_line_size);",
          "1826:             ptr += picture->linesize[0];",
          "1827:         }",
          "",
          "---------------"
        ]
      }
    }
  ]
}