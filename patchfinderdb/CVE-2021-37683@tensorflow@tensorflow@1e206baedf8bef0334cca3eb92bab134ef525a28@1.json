{
  "cve_id": "CVE-2021-37683",
  "cve_desc": "TensorFlow is an end-to-end open source platform for machine learning. In affected versions the implementation of division in TFLite is [vulnerable to a division by 0 error](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/div.cc). There is no check that the divisor tensor does not contain zero elements. We have patched the issue in GitHub commit 1e206baedf8bef0334cca3eb92bab134ef525a28. The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "1e206baedf8bef0334cca3eb92bab134ef525a28",
  "patch_info": {
    "commit_hash": "1e206baedf8bef0334cca3eb92bab134ef525a28",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/1e206baedf8bef0334cca3eb92bab134ef525a28",
    "files": [
      "tensorflow/lite/kernels/div.cc"
    ],
    "message": "Prevent a division by 0 in division ops.\n\nPiperOrigin-RevId: 385223169\nChange-Id: Ia4228960b5d2aa44480385f74bdd70d21a3613c3",
    "before_after_code_files": [
      "tensorflow/lite/kernels/div.cc||tensorflow/lite/kernels/div.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/lite/kernels/div.cc||tensorflow/lite/kernels/div.cc": [
      "File: tensorflow/lite/kernels/div.cc -> tensorflow/lite/kernels/div.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "216:   TF_LITE_ENSURE_OK(context,",
      "217:                     GetOutputSafe(context, node, kOutputTensor, &output));",
      "220:     EvalDiv<kernel_type>(context, node, params, data, input1, input2, output);",
      "221:   } else if (output->type == kTfLiteUInt8) {",
      "222:     TF_LITE_ENSURE_OK(",
      "223:         context, EvalQuantized<kernel_type>(context, node, params, data, input1,",
      "224:                                             input2, output));",
      "",
      "[Removed Lines]",
      "219:   if (output->type == kTfLiteFloat32 || output->type == kTfLiteInt32) {",
      "",
      "[Added Lines]",
      "220: #define TF_LITE_CHECK_DIV_NON_ZERO(data_type)                       \\",
      "221:   const auto* input2_data = GetTensorData<data_type>(input2);       \\",
      "222:   const size_t input2_elements = input2->bytes / sizeof(data_type); \\",
      "223:   for (size_t i = 0; i < input2_elements; i++) {                    \\",
      "224:     TF_LITE_ENSURE(context, input2_data[i] != 0);                   \\",
      "225:   }",
      "227:   if (output->type == kTfLiteFloat32) {",
      "230:     EvalDiv<kernel_type>(context, node, params, data, input1, input2, output);",
      "231:   } else if (output->type == kTfLiteInt32) {",
      "232:     TF_LITE_CHECK_DIV_NON_ZERO(int32_t);",
      "235:     TF_LITE_CHECK_DIV_NON_ZERO(uint8_t);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "229:         output->type);",
      "230:     return kTfLiteError;",
      "231:   }",
      "233:   return kTfLiteOk;",
      "234: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: #undef TF_LITE_CHECK_DIV_NON_ZERO",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1adcdfb9d193738ea65fe2b39206129a09ed1824",
      "candidate_info": {
        "commit_hash": "1adcdfb9d193738ea65fe2b39206129a09ed1824",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/1adcdfb9d193738ea65fe2b39206129a09ed1824",
        "files": [
          "tensorflow/lite/kernels/div.cc"
        ],
        "message": "Prevent a division by 0 in division ops.\n\nPiperOrigin-RevId: 385223169\nChange-Id: Ia4228960b5d2aa44480385f74bdd70d21a3613c3",
        "before_after_code_files": [
          "tensorflow/lite/kernels/div.cc||tensorflow/lite/kernels/div.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/div.cc||tensorflow/lite/kernels/div.cc"
          ],
          "candidate": [
            "tensorflow/lite/kernels/div.cc||tensorflow/lite/kernels/div.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/div.cc||tensorflow/lite/kernels/div.cc": [
          "File: tensorflow/lite/kernels/div.cc -> tensorflow/lite/kernels/div.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "216:   TF_LITE_ENSURE_OK(context,",
          "217:                     GetOutputSafe(context, node, kOutputTensor, &output));",
          "220:     EvalDiv<kernel_type>(context, node, params, data, input1, input2, output);",
          "221:   } else if (output->type == kTfLiteUInt8) {",
          "222:     TF_LITE_ENSURE_OK(",
          "223:         context, EvalQuantized<kernel_type>(context, node, params, data, input1,",
          "224:                                             input2, output));",
          "",
          "[Removed Lines]",
          "219:   if (output->type == kTfLiteFloat32 || output->type == kTfLiteInt32) {",
          "",
          "[Added Lines]",
          "220: #define TF_LITE_CHECK_DIV_NON_ZERO(data_type)                       \\",
          "221:   const auto* input2_data = GetTensorData<data_type>(input2);       \\",
          "222:   const size_t input2_elements = input2->bytes / sizeof(data_type); \\",
          "223:   for (size_t i = 0; i < input2_elements; i++) {                    \\",
          "224:     TF_LITE_ENSURE(context, input2_data[i] != 0);                   \\",
          "225:   }",
          "227:   if (output->type == kTfLiteFloat32) {",
          "230:     EvalDiv<kernel_type>(context, node, params, data, input1, input2, output);",
          "231:   } else if (output->type == kTfLiteInt32) {",
          "232:     TF_LITE_CHECK_DIV_NON_ZERO(int32_t);",
          "235:     TF_LITE_CHECK_DIV_NON_ZERO(uint8_t);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "229:         output->type);",
          "230:     return kTfLiteError;",
          "231:   }",
          "233:   return kTfLiteOk;",
          "234: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "246: #undef TF_LITE_CHECK_DIV_NON_ZERO",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1db349944ce9956183dff2704049f2ea4050ce2a",
      "candidate_info": {
        "commit_hash": "1db349944ce9956183dff2704049f2ea4050ce2a",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/1db349944ce9956183dff2704049f2ea4050ce2a",
        "files": [
          "tensorflow/lite/kernels/div.cc"
        ],
        "message": "Prevent a division by 0 in division ops.\n\nPiperOrigin-RevId: 385223169\nChange-Id: Ia4228960b5d2aa44480385f74bdd70d21a3613c3",
        "before_after_code_files": [
          "tensorflow/lite/kernels/div.cc||tensorflow/lite/kernels/div.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/div.cc||tensorflow/lite/kernels/div.cc"
          ],
          "candidate": [
            "tensorflow/lite/kernels/div.cc||tensorflow/lite/kernels/div.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/div.cc||tensorflow/lite/kernels/div.cc": [
          "File: tensorflow/lite/kernels/div.cc -> tensorflow/lite/kernels/div.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "216:   TF_LITE_ENSURE_OK(context,",
          "217:                     GetOutputSafe(context, node, kOutputTensor, &output));",
          "220:     EvalDiv<kernel_type>(context, node, params, data, input1, input2, output);",
          "221:   } else if (output->type == kTfLiteUInt8) {",
          "222:     TF_LITE_ENSURE_OK(",
          "223:         context, EvalQuantized<kernel_type>(context, node, params, data, input1,",
          "224:                                             input2, output));",
          "",
          "[Removed Lines]",
          "219:   if (output->type == kTfLiteFloat32 || output->type == kTfLiteInt32) {",
          "",
          "[Added Lines]",
          "220: #define TF_LITE_CHECK_DIV_NON_ZERO(data_type)                       \\",
          "221:   const auto* input2_data = GetTensorData<data_type>(input2);       \\",
          "222:   const size_t input2_elements = input2->bytes / sizeof(data_type); \\",
          "223:   for (size_t i = 0; i < input2_elements; i++) {                    \\",
          "224:     TF_LITE_ENSURE(context, input2_data[i] != 0);                   \\",
          "225:   }",
          "227:   if (output->type == kTfLiteFloat32) {",
          "230:     EvalDiv<kernel_type>(context, node, params, data, input1, input2, output);",
          "231:   } else if (output->type == kTfLiteInt32) {",
          "232:     TF_LITE_CHECK_DIV_NON_ZERO(int32_t);",
          "235:     TF_LITE_CHECK_DIV_NON_ZERO(uint8_t);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "229:         output->type);",
          "230:     return kTfLiteError;",
          "231:   }",
          "233:   return kTfLiteOk;",
          "234: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "246: #undef TF_LITE_CHECK_DIV_NON_ZERO",
          "",
          "---------------"
        ]
      }
    }
  ]
}