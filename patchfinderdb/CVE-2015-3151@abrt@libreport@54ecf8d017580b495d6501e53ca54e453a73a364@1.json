{
  "cve_id": "CVE-2015-3151",
  "cve_desc": "Directory traversal vulnerability in abrt-dbus in Automatic Bug Reporting Tool (ABRT) allows local users to read, write to, or change ownership of arbitrary files via unspecified vectors to the (1) NewProblem, (2) GetInfo, (3) SetElement, or (4) DeleteElement method.",
  "repo": "abrt/libreport",
  "patch_hash": "54ecf8d017580b495d6501e53ca54e453a73a364",
  "patch_info": {
    "commit_hash": "54ecf8d017580b495d6501e53ca54e453a73a364",
    "repo": "abrt/libreport",
    "commit_url": "https://github.com/abrt/libreport/commit/54ecf8d017580b495d6501e53ca54e453a73a364",
    "files": [
      "src/include/internal_libreport.h",
      "src/lib/concat_path_file.c",
      "tests/Makefile.am",
      "tests/dump_dir.at",
      "tests/testsuite.at"
    ],
    "message": "lib: add a function checking file names\n\nMove the code from ABRT and extend it a bit:\n* allow only 64 characters\n* allow '.' in names (vmcore_dmesg.txt)\n* forbid '/'\n* forbid \".\"\n* forbid \"..\"\n\nRelated: #1214451\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
    "before_after_code_files": [
      "src/include/internal_libreport.h||src/include/internal_libreport.h",
      "src/lib/concat_path_file.c||src/lib/concat_path_file.c",
      "tests/Makefile.am||tests/Makefile.am",
      "tests/dump_dir.at||tests/dump_dir.at",
      "tests/testsuite.at||tests/testsuite.at"
    ]
  },
  "patch_diff": {
    "src/include/internal_libreport.h||src/include/internal_libreport.h": [
      "File: src/include/internal_libreport.h -> src/include/internal_libreport.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "132: #define concat_path_basename libreport_concat_path_basename",
      "133: char *concat_path_basename(const char *path, const char *filename);",
      "136: #define xmalloc_fgets libreport_xmalloc_fgets",
      "137: char *xmalloc_fgets(FILE *file);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "138: #define str_is_correct_filename libreport_str_is_correct_filename",
      "139: bool str_is_correct_filename(const char *str);",
      "",
      "---------------"
    ],
    "src/lib/concat_path_file.c||src/lib/concat_path_file.c": [
      "File: src/lib/concat_path_file.c -> src/lib/concat_path_file.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "57:     free(abspath);",
      "58:     return name;",
      "59: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "61: bool str_is_correct_filename(const char *str)",
      "62: {",
      "63: #define NOT_PRINTABLE(c) (c < ' ' || c == 0x7f)",
      "65:     if (NOT_PRINTABLE(*str) || *str == '/' || *str == '\\0')",
      "66:         return false;",
      "67:     ++str;",
      "69:     if (NOT_PRINTABLE(*str) || *str =='/' || (*str == '\\0' && *(str-1) == '.'))",
      "70:         return false;",
      "71:     ++str;",
      "73:     if (NOT_PRINTABLE(*str) || *str =='/' || (*str == '\\0' && *(str-1) == '.' && *(str-2) == '.'))",
      "74:         return false;",
      "75:     ++str;",
      "77:     for (unsigned i = 0; *str != '\\0' && i < 61; ++str, ++i)",
      "78:         if (NOT_PRINTABLE(*str) || *str == '/')",
      "79:             return false;",
      "81:     return *str == '\\0';",
      "83: #undef NOT_PRINTABLE",
      "84: }",
      "",
      "---------------"
    ],
    "tests/Makefile.am||tests/Makefile.am": [
      "File: tests/Makefile.am -> tests/Makefile.am",
      "--- Hunk 1 ---",
      "[Context before]",
      "42:   report_python.at \\",
      "43:   xfuncs.at \\",
      "44:   string_list.at \\",
      "47: EXTRA_DIST += $(TESTSUITE_AT)",
      "48: TESTSUITE = $(srcdir)/testsuite",
      "",
      "[Removed Lines]",
      "45:   ureport.at",
      "",
      "[Added Lines]",
      "45:   ureport.at \\",
      "46:   dump_dir.at",
      "",
      "---------------"
    ],
    "tests/dump_dir.at||tests/dump_dir.at": [
      "File: tests/dump_dir.at -> tests/dump_dir.at",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: # -*- Autotest -*-",
      "3: AT_BANNER([dump directories])",
      "5: ## ----------------------- ##",
      "6: ## str_is_correct_filename ##",
      "7: ## ----------------------- ##",
      "9: AT_TESTFUN([str_is_correct_filename],",
      "10: [[",
      "11: #include \"internal_libreport.h\"",
      "12: #include <assert.h>",
      "13: #",
      "14: int main(void)",
      "15: {",
      "16:     g_verbose = 3;",
      "18:     assert(str_is_correct_filename(\"\") == false);",
      "19:     assert(str_is_correct_filename(\"/\") == false);",
      "20:     assert(str_is_correct_filename(\"//\") == false);",
      "21:     assert(str_is_correct_filename(\".\") == false);",
      "22:     assert(str_is_correct_filename(\".\") == false);",
      "23:     assert(str_is_correct_filename(\"..\") == false);",
      "24:     assert(str_is_correct_filename(\"..\") == false);",
      "25:     assert(str_is_correct_filename(\"/.\") == false);",
      "26:     assert(str_is_correct_filename(\"//.\") == false);",
      "27:     assert(str_is_correct_filename(\"./\") == false);",
      "28:     assert(str_is_correct_filename(\".//\") == false);",
      "29:     assert(str_is_correct_filename(\"/./\") == false);",
      "30:     assert(str_is_correct_filename(\"/..\") == false);",
      "31:     assert(str_is_correct_filename(\"//..\") == false);",
      "32:     assert(str_is_correct_filename(\"../\") == false);",
      "33:     assert(str_is_correct_filename(\"..//\") == false);",
      "34:     assert(str_is_correct_filename(\"/../\") == false);",
      "35:     assert(str_is_correct_filename(\"/.././\") == false);",
      "37:     assert(str_is_correct_filename(\"looks-good-but-evil/\") == false);",
      "38:     assert(str_is_correct_filename(\"looks-good-but-evil/../../\") == false);",
      "40:     assert(str_is_correct_filename(\".meta-data\") == true);",
      "41:     assert(str_is_correct_filename(\"..meta-meta-data\") == true);",
      "42:     assert(str_is_correct_filename(\"meta-..-data\") == true);",
      "44:     assert(str_is_correct_filename(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890+-\") == true);",
      "45:     assert(str_is_correct_filename(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890+-=\") == false);",
      "47:     return 0;",
      "48: }",
      "49: ]])",
      "",
      "---------------"
    ],
    "tests/testsuite.at||tests/testsuite.at": [
      "File: tests/testsuite.at -> tests/testsuite.at",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: m4_include([report_python.at])",
      "18: m4_include([string_list.at])",
      "19: m4_include([ureport.at])",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: m4_include([dump_dir.at])",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "41ec59db3e6e2f19adc128d8fbd4526976ee2ca2",
      "candidate_info": {
        "commit_hash": "41ec59db3e6e2f19adc128d8fbd4526976ee2ca2",
        "repo": "abrt/libreport",
        "commit_url": "https://github.com/abrt/libreport/commit/41ec59db3e6e2f19adc128d8fbd4526976ee2ca2",
        "files": [
          "src/include/problem_data.h",
          "src/lib/create_dump_dir.c"
        ],
        "message": "lib: allow creating root owned problem directories from problem data\n\nWithout this patch libreport sets the owner of new problem directory\naccording to FILENAME_UID. This approach is not sufficient because ABRT\nhas introduced PrivateReports that should ensure that all problem\ndirectories are owned by root. So ABRT needs a way to tell libreport to\ncreate the new problem directory with uid=0.\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/include/problem_data.h||src/include/problem_data.h",
          "src/lib/create_dump_dir.c||src/lib/create_dump_dir.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/abrt/libreport/pull/343"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/include/problem_data.h||src/include/problem_data.h": [
          "File: src/include/problem_data.h -> src/include/problem_data.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:   @param base_dir_name Location to store the problem data",
          "133: struct dump_dir *create_dump_dir_from_problem_data(problem_data_t *problem_data, const char *base_dir_name);",
          "135: #ifdef __cplusplus",
          "136: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134: struct dump_dir *create_dump_dir_from_problem_data_ext(problem_data_t *problem_data, const char *base_dir_name, uid_t uid);",
          "",
          "---------------"
        ],
        "src/lib/create_dump_dir.c||src/lib/create_dump_dir.c": [
          "File: src/lib/create_dump_dir.c -> src/lib/create_dump_dir.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:     return dd;",
          "31: }",
          "34: {",
          "35:     INITIALIZE_LIBREPORT();",
          "",
          "[Removed Lines]",
          "33: struct dump_dir *create_dump_dir_from_problem_data(problem_data_t *problem_data, const char *base_dir_name)",
          "",
          "[Added Lines]",
          "33: struct dump_dir *create_dump_dir_from_problem_data_ext(problem_data_t *problem_data, const char *base_dir_name, uid_t uid)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:         return NULL;",
          "49:     }",
          "69:     struct timeval tv;",
          "70:     if (gettimeofday(&tv, NULL) < 0)",
          "",
          "[Removed Lines]",
          "51:     uid_t uid = (uid_t)-1L;",
          "52:     char *uid_str = problem_data_get_content_or_NULL(problem_data, FILENAME_UID);",
          "54:     if (uid_str)",
          "55:     {",
          "56:         char *endptr;",
          "57:         errno = 0;",
          "58:         long val = strtol(uid_str, &endptr, 10);",
          "60:         if (errno != 0 || endptr == uid_str || *endptr != '\\0' || INT_MAX < val)",
          "61:         {",
          "62:             error_msg(_(\"uid value is not valid: '%s'\"), uid_str);",
          "63:             return NULL;",
          "64:         }",
          "66:         uid = (uid_t)val;",
          "67:     }",
          "",
          "[Added Lines]",
          "51:     if (uid == (uid_t)-1L)",
          "52:         uid = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144:     problem_id[strlen(problem_id) - strlen(NEW_PD_SUFFIX)] = '\\0';",
          "145:     char* new_path = concat_path_file(base_dir_name, problem_id);",
          "",
          "[Removed Lines]",
          "142:     dd_create_basic_files(dd, uid, NULL);",
          "",
          "[Added Lines]",
          "127:     const uid_t crashed_uid = problem_data_get_content_or_NULL(problem_data, FILENAME_UID) == NULL ? uid : /*uid already saved*/-1;",
          "128:     dd_create_basic_files(dd, crashed_uid, NULL);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "150:     free(problem_id);",
          "151:     return dd;",
          "152: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140: struct dump_dir *create_dump_dir_from_problem_data(problem_data_t *problem_data, const char *base_dir_name)",
          "141: {",
          "142:     uid_t uid = (uid_t)-1L;",
          "143:     char *uid_str = problem_data_get_content_or_NULL(problem_data, FILENAME_UID);",
          "145:     if (uid_str)",
          "146:     {",
          "147:         char *endptr;",
          "148:         errno = 0;",
          "149:         long val = strtol(uid_str, &endptr, 10);",
          "151:         if (errno != 0 || endptr == uid_str || *endptr != '\\0' || INT_MAX < val)",
          "152:         {",
          "153:             error_msg(_(\"uid value is not valid: '%s'\"), uid_str);",
          "154:             return NULL;",
          "155:         }",
          "157:         uid = (uid_t)val;",
          "158:     }",
          "160:     return create_dump_dir_from_problem_data_ext(problem_data, base_dir_name, uid);",
          "161: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b81884dcf41a6ee84c9ef5633acd2193bee60005",
      "candidate_info": {
        "commit_hash": "b81884dcf41a6ee84c9ef5633acd2193bee60005",
        "repo": "abrt/libreport",
        "commit_url": "https://github.com/abrt/libreport/commit/b81884dcf41a6ee84c9ef5633acd2193bee60005",
        "files": [
          "src/include/dump_dir.h",
          "src/lib/dump_dir.c"
        ],
        "message": "dump_dir: allow creating of a new dir w/o chowning it\n\nSplit dd_create() in to dd_create_skeleton() creating the directory and\nintializing struct dd* and dd_reset_ownership() updating UID and GUI to\nthe deemed values.\n\nWe need this because we have to avoid situations where root is using a\ndirectory owned by a regular user.\n\nRelated: #1211835\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/include/dump_dir.h||src/include/dump_dir.h",
          "src/lib/dump_dir.c||src/lib/dump_dir.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/abrt/libreport/pull/343"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/include/dump_dir.h||src/include/dump_dir.h": [
          "File: src/include/dump_dir.h -> src/include/dump_dir.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: void dd_close(struct dump_dir *dd);",
          "62: struct dump_dir *dd_opendir(const char *dir, int flags);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63: struct dump_dir *dd_create_skeleton(const char *dir, uid_t uid, mode_t mode);",
          "64: int dd_reset_ownership(struct dump_dir *dd);",
          "",
          "---------------"
        ],
        "src/lib/dump_dir.c||src/lib/dump_dir.c": [
          "File: src/lib/dump_dir.c -> src/lib/dump_dir.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "515: {",
          "517:     mode_t dir_mode = mode | ((mode & 0444) >> 2);",
          "",
          "[Removed Lines]",
          "514: struct dump_dir *dd_create(const char *dir, uid_t uid, mode_t mode)",
          "",
          "[Added Lines]",
          "517: struct dump_dir *dd_create_skeleton(const char *dir, uid_t uid, mode_t mode)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "601:         else",
          "602:             error_msg(\"User %lu does not exist, using gid 0\", (long)uid);",
          "603: #endif",
          "610:     }",
          "612:     return dd;",
          "613: }",
          "",
          "[Removed Lines]",
          "605:         if (lchown(dir, dd->dd_uid, dd->dd_gid) == -1)",
          "606:         {",
          "607:             perror_msg(\"Can't change '%s' ownership to %lu:%lu\", dir,",
          "608:                        (long)dd->dd_uid, (long)dd->dd_gid);",
          "609:         }",
          "",
          "[Added Lines]",
          "607:     }",
          "609:     return dd;",
          "610: }",
          "615: int dd_reset_ownership(struct dump_dir *dd)",
          "616: {",
          "617:     const int r =lchown(dd->dd_dirname, dd->dd_uid, dd->dd_gid);",
          "618:     if (r < 0)",
          "619:     {",
          "620:         perror_msg(\"Can't change '%s' ownership to %lu:%lu\", dd->dd_dirname,",
          "621:                    (long)dd->dd_uid, (long)dd->dd_gid);",
          "623:     return r;",
          "624: }",
          "628: struct dump_dir *dd_create(const char *dir, uid_t uid, mode_t mode)",
          "629: {",
          "630:     struct dump_dir *dd = dd_create_skeleton(dir, uid, mode);",
          "631:     if (dd == NULL)",
          "632:         return NULL;",
          "635:     dd_reset_ownership(dd);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e705c7ff8b6907422753b44ad2bd9d8293578098",
      "candidate_info": {
        "commit_hash": "e705c7ff8b6907422753b44ad2bd9d8293578098",
        "repo": "abrt/libreport",
        "commit_url": "https://github.com/abrt/libreport/commit/e705c7ff8b6907422753b44ad2bd9d8293578098",
        "files": [
          "src/include/internal_libreport.h",
          "src/lib/copyfd.c"
        ],
        "message": "lib: introduce a new function copy_file_ext\n\nThe new function allows to specify UID, GID and open() flags for both\nsource and destination files.\n\nThis function is need to avoid race conditions and symbolic link issues.\n\nRelated: #1211835\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/include/internal_libreport.h||src/include/internal_libreport.h",
          "src/lib/copyfd.c||src/lib/copyfd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/abrt/libreport/pull/343"
        ],
        "olp_code_files": {
          "patch": [
            "src/include/internal_libreport.h||src/include/internal_libreport.h"
          ],
          "candidate": [
            "src/include/internal_libreport.h||src/include/internal_libreport.h"
          ]
        }
      },
      "candidate_diff": {
        "src/include/internal_libreport.h||src/include/internal_libreport.h": [
          "File: src/include/internal_libreport.h -> src/include/internal_libreport.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "153: off_t copyfd_size(int src_fd, int dst_fd, off_t size, int flags);",
          "154: #define copyfd_exact_size libreport_copyfd_exact_size",
          "155: void copyfd_exact_size(int src_fd, int dst_fd, off_t size);",
          "156: #define copy_file libreport_copy_file",
          "157: off_t copy_file(const char *src_name, const char *dst_name, int mode);",
          "158: #define copy_file_recursive libreport_copy_file_recursive",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "156: #define copy_file_ext libreport_copy_file_ext",
          "157: off_t copy_file_ext(const char *src_name, const char *dst_name, int mode, uid_t uid, gid_t gid, int src_flags, int dst_flags);",
          "",
          "---------------"
        ],
        "src/lib/copyfd.c||src/lib/copyfd.c": [
          "File: src/lib/copyfd.c -> src/lib/copyfd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:  return full_fd_action(fd1, fd2, 0, flags);",
          "150: }",
          "153: {",
          "154:     off_t r;",
          "156:     if (src < 0)",
          "157:     {",
          "158:         perror_msg(\"Can't open '%s'\", src_name);",
          "159:         return -1;",
          "160:     }",
          "162:     if (dst < 0)",
          "163:     {",
          "164:         close(src);",
          "",
          "[Removed Lines]",
          "152: off_t copy_file(const char *src_name, const char *dst_name, int mode)",
          "155:     int src = open(src_name, O_RDONLY);",
          "161:     int dst = open(dst_name, O_WRONLY | O_TRUNC | O_CREAT, mode);",
          "",
          "[Added Lines]",
          "152: off_t copy_file_ext(const char *src_name, const char *dst_name, int mode, uid_t uid, gid_t gid, int src_flags, int dst_flags)",
          "155:     int src = open(src_name, src_flags);",
          "161:     int dst = open(dst_name, dst_flags, mode);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "167:     }",
          "168:     r = copyfd_eof(src, dst, /*flags:*/ 0);",
          "169:     close(src);",
          "170:     close(dst);",
          "171:     return r;",
          "172: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "170:     if (uid != (uid_t)-1L)",
          "171:     {",
          "172:         if (fchown(dst, uid, gid) == -1)",
          "173:         {",
          "174:             perror_msg(\"Can't change '%s' ownership to %lu:%lu\", dst_name, (long)uid, (long)gid);",
          "175:             close(dst);",
          "176:             unlink(dst_name);",
          "177:             return -1;",
          "178:         }",
          "179:     }",
          "184: off_t copy_file(const char *src_name, const char *dst_name, int mode)",
          "185: {",
          "186:     return copy_file_ext(src_name, dst_name, mode, -1, -1, O_RDONLY, O_WRONLY | O_TRUNC | O_CREAT);",
          "187: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "887b961abbd970ee5b00d83574aa1c8e9d92c9dc",
      "candidate_info": {
        "commit_hash": "887b961abbd970ee5b00d83574aa1c8e9d92c9dc",
        "repo": "abrt/libreport",
        "commit_url": "https://github.com/abrt/libreport/commit/887b961abbd970ee5b00d83574aa1c8e9d92c9dc",
        "files": [
          "src/include/internal_libreport.h",
          "src/lib/concat_path_file.c",
          "tests/dump_dir.at"
        ],
        "message": "lib: add a function checking file names\n\nMove the code from ABRT and extend it a bit:\n* allow only 64 characters\n* allow '.' in names (vmcore_dmesg.txt)\n* forbid '/'\n* forbid \".\"\n* forbid \"..\"\n\nRelated: #1214451\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/include/internal_libreport.h||src/include/internal_libreport.h",
          "src/lib/concat_path_file.c||src/lib/concat_path_file.c",
          "tests/dump_dir.at||tests/dump_dir.at"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/include/internal_libreport.h||src/include/internal_libreport.h",
            "src/lib/concat_path_file.c||src/lib/concat_path_file.c",
            "tests/dump_dir.at||tests/dump_dir.at"
          ],
          "candidate": [
            "src/include/internal_libreport.h||src/include/internal_libreport.h",
            "src/lib/concat_path_file.c||src/lib/concat_path_file.c",
            "tests/dump_dir.at||tests/dump_dir.at"
          ]
        }
      },
      "candidate_diff": {
        "src/include/internal_libreport.h||src/include/internal_libreport.h": [
          "File: src/include/internal_libreport.h -> src/include/internal_libreport.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "137: #define concat_path_basename libreport_concat_path_basename",
          "138: char *concat_path_basename(const char *path, const char *filename);",
          "141: #define xmalloc_fgets libreport_xmalloc_fgets",
          "142: char *xmalloc_fgets(FILE *file);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143: #define str_is_correct_filename libreport_str_is_correct_filename",
          "144: bool str_is_correct_filename(const char *str);",
          "",
          "---------------"
        ],
        "src/lib/concat_path_file.c||src/lib/concat_path_file.c": [
          "File: src/lib/concat_path_file.c -> src/lib/concat_path_file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:     free(abspath);",
          "58:     return name;",
          "59: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: bool str_is_correct_filename(const char *str)",
          "62: {",
          "63: #define NOT_PRINTABLE(c) (c < ' ' || c == 0x7f)",
          "65:     if (NOT_PRINTABLE(*str) || *str == '/' || *str == '\\0')",
          "66:         return false;",
          "67:     ++str;",
          "69:     if (NOT_PRINTABLE(*str) || *str =='/' || (*str == '\\0' && *(str-1) == '.'))",
          "70:         return false;",
          "71:     ++str;",
          "73:     if (NOT_PRINTABLE(*str) || *str =='/' || (*str == '\\0' && *(str-1) == '.' && *(str-2) == '.'))",
          "74:         return false;",
          "75:     ++str;",
          "77:     for (unsigned i = 0; *str != '\\0' && i < 61; ++str, ++i)",
          "78:         if (NOT_PRINTABLE(*str) || *str == '/')",
          "79:             return false;",
          "81:     return *str == '\\0';",
          "83: #undef NOT_PRINTABLE",
          "84: }",
          "",
          "---------------"
        ],
        "tests/dump_dir.at||tests/dump_dir.at": [
          "File: tests/dump_dir.at -> tests/dump_dir.at",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:     return 0;",
          "50: }",
          "51: ]])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53: ## ----------------------- ##",
          "54: ## str_is_correct_filename ##",
          "55: ## ----------------------- ##",
          "57: AT_TESTFUN([str_is_correct_filename],",
          "58: [[",
          "59: #include \"internal_libreport.h\"",
          "60: #include <assert.h>",
          "61: #",
          "62: int main(void)",
          "63: {",
          "64:     g_verbose = 3;",
          "66:     assert(str_is_correct_filename(\"\") == false);",
          "67:     assert(str_is_correct_filename(\"/\") == false);",
          "68:     assert(str_is_correct_filename(\"//\") == false);",
          "69:     assert(str_is_correct_filename(\".\") == false);",
          "70:     assert(str_is_correct_filename(\".\") == false);",
          "71:     assert(str_is_correct_filename(\"..\") == false);",
          "72:     assert(str_is_correct_filename(\"..\") == false);",
          "73:     assert(str_is_correct_filename(\"/.\") == false);",
          "74:     assert(str_is_correct_filename(\"//.\") == false);",
          "75:     assert(str_is_correct_filename(\"./\") == false);",
          "76:     assert(str_is_correct_filename(\".//\") == false);",
          "77:     assert(str_is_correct_filename(\"/./\") == false);",
          "78:     assert(str_is_correct_filename(\"/..\") == false);",
          "79:     assert(str_is_correct_filename(\"//..\") == false);",
          "80:     assert(str_is_correct_filename(\"../\") == false);",
          "81:     assert(str_is_correct_filename(\"..//\") == false);",
          "82:     assert(str_is_correct_filename(\"/../\") == false);",
          "83:     assert(str_is_correct_filename(\"/.././\") == false);",
          "85:     assert(str_is_correct_filename(\"looks-good-but-evil/\") == false);",
          "86:     assert(str_is_correct_filename(\"looks-good-but-evil/../../\") == false);",
          "88:     assert(str_is_correct_filename(\".meta-data\") == true);",
          "89:     assert(str_is_correct_filename(\"..meta-meta-data\") == true);",
          "90:     assert(str_is_correct_filename(\"meta-..-data\") == true);",
          "92:     assert(str_is_correct_filename(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890+-\") == true);",
          "93:     assert(str_is_correct_filename(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890+-=\") == false);",
          "95:     return 0;",
          "96: }",
          "97: ]])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2d73940ef07d6626b017559be33ee633ae4aaf86",
      "candidate_info": {
        "commit_hash": "2d73940ef07d6626b017559be33ee633ae4aaf86",
        "repo": "abrt/libreport",
        "commit_url": "https://github.com/abrt/libreport/commit/2d73940ef07d6626b017559be33ee633ae4aaf86",
        "files": [
          "src/include/internal_libreport.h",
          "src/lib/concat_path_file.c",
          "tests/Makefile.am",
          "tests/dump_dir.at",
          "tests/testsuite.at"
        ],
        "message": "lib: add a function checking file names\n\nMove the code from ABRT and extend it a bit:\n* allow only 64 characters\n* allow '.' in names (vmcore_dmesg.txt)\n* forbid '/'\n* forbid \".\"\n* forbid \"..\"\n\nRelated: #1214451\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/include/internal_libreport.h||src/include/internal_libreport.h",
          "src/lib/concat_path_file.c||src/lib/concat_path_file.c",
          "tests/Makefile.am||tests/Makefile.am",
          "tests/dump_dir.at||tests/dump_dir.at",
          "tests/testsuite.at||tests/testsuite.at"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/include/internal_libreport.h||src/include/internal_libreport.h",
            "src/lib/concat_path_file.c||src/lib/concat_path_file.c",
            "tests/Makefile.am||tests/Makefile.am",
            "tests/dump_dir.at||tests/dump_dir.at",
            "tests/testsuite.at||tests/testsuite.at"
          ],
          "candidate": [
            "src/include/internal_libreport.h||src/include/internal_libreport.h",
            "src/lib/concat_path_file.c||src/lib/concat_path_file.c",
            "tests/Makefile.am||tests/Makefile.am",
            "tests/dump_dir.at||tests/dump_dir.at",
            "tests/testsuite.at||tests/testsuite.at"
          ]
        }
      },
      "candidate_diff": {
        "src/include/internal_libreport.h||src/include/internal_libreport.h": [
          "File: src/include/internal_libreport.h -> src/include/internal_libreport.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "128: #define concat_path_basename libreport_concat_path_basename",
          "129: char *concat_path_basename(const char *path, const char *filename);",
          "132: #define xmalloc_fgets libreport_xmalloc_fgets",
          "133: char *xmalloc_fgets(FILE *file);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134: #define str_is_correct_filename libreport_str_is_correct_filename",
          "135: bool str_is_correct_filename(const char *str);",
          "",
          "---------------"
        ],
        "src/lib/concat_path_file.c||src/lib/concat_path_file.c": [
          "File: src/lib/concat_path_file.c -> src/lib/concat_path_file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:     free(abspath);",
          "58:     return name;",
          "59: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: bool str_is_correct_filename(const char *str)",
          "62: {",
          "63: #define NOT_PRINTABLE(c) (c < ' ' || c == 0x7f)",
          "65:     if (NOT_PRINTABLE(*str) || *str == '/' || *str == '\\0')",
          "66:         return false;",
          "67:     ++str;",
          "69:     if (NOT_PRINTABLE(*str) || *str =='/' || (*str == '\\0' && *(str-1) == '.'))",
          "70:         return false;",
          "71:     ++str;",
          "73:     if (NOT_PRINTABLE(*str) || *str =='/' || (*str == '\\0' && *(str-1) == '.' && *(str-2) == '.'))",
          "74:         return false;",
          "75:     ++str;",
          "77:     for (unsigned i = 0; *str != '\\0' && i < 61; ++str, ++i)",
          "78:         if (NOT_PRINTABLE(*str) || *str == '/')",
          "79:             return false;",
          "81:     return *str == '\\0';",
          "83: #undef NOT_PRINTABLE",
          "84: }",
          "",
          "---------------"
        ],
        "tests/Makefile.am||tests/Makefile.am": [
          "File: tests/Makefile.am -> tests/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:   reported_to.at \\",
          "36:   make_description.at \\",
          "37:   xfuncs.at \\",
          "40: EXTRA_DIST += $(TESTSUITE_AT)",
          "41: TESTSUITE = $(srcdir)/testsuite",
          "",
          "[Removed Lines]",
          "38:   ureport.at",
          "",
          "[Added Lines]",
          "38:   ureport.at \\",
          "39:   dump_dir.at",
          "",
          "---------------"
        ],
        "tests/dump_dir.at||tests/dump_dir.at": [
          "File: tests/dump_dir.at -> tests/dump_dir.at",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # -*- Autotest -*-",
          "3: AT_BANNER([dump directories])",
          "5: ## ----------------------- ##",
          "6: ## str_is_correct_filename ##",
          "7: ## ----------------------- ##",
          "9: AT_TESTFUN([str_is_correct_filename],",
          "10: [[",
          "11: #include \"internal_libreport.h\"",
          "12: #include <assert.h>",
          "13: #",
          "14: int main(void)",
          "15: {",
          "16:     g_verbose = 3;",
          "18:     assert(str_is_correct_filename(\"\") == false);",
          "19:     assert(str_is_correct_filename(\"/\") == false);",
          "20:     assert(str_is_correct_filename(\"//\") == false);",
          "21:     assert(str_is_correct_filename(\".\") == false);",
          "22:     assert(str_is_correct_filename(\".\") == false);",
          "23:     assert(str_is_correct_filename(\"..\") == false);",
          "24:     assert(str_is_correct_filename(\"..\") == false);",
          "25:     assert(str_is_correct_filename(\"/.\") == false);",
          "26:     assert(str_is_correct_filename(\"//.\") == false);",
          "27:     assert(str_is_correct_filename(\"./\") == false);",
          "28:     assert(str_is_correct_filename(\".//\") == false);",
          "29:     assert(str_is_correct_filename(\"/./\") == false);",
          "30:     assert(str_is_correct_filename(\"/..\") == false);",
          "31:     assert(str_is_correct_filename(\"//..\") == false);",
          "32:     assert(str_is_correct_filename(\"../\") == false);",
          "33:     assert(str_is_correct_filename(\"..//\") == false);",
          "34:     assert(str_is_correct_filename(\"/../\") == false);",
          "35:     assert(str_is_correct_filename(\"/.././\") == false);",
          "37:     assert(str_is_correct_filename(\"looks-good-but-evil/\") == false);",
          "38:     assert(str_is_correct_filename(\"looks-good-but-evil/../../\") == false);",
          "40:     assert(str_is_correct_filename(\".meta-data\") == true);",
          "41:     assert(str_is_correct_filename(\"..meta-meta-data\") == true);",
          "42:     assert(str_is_correct_filename(\"meta-..-data\") == true);",
          "44:     assert(str_is_correct_filename(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890+-\") == true);",
          "45:     assert(str_is_correct_filename(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890+-=\") == false);",
          "47:     return 0;",
          "48: }",
          "49: ]])",
          "",
          "---------------"
        ],
        "tests/testsuite.at||tests/testsuite.at": [
          "File: tests/testsuite.at -> tests/testsuite.at",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: m4_include([reported_to.at])",
          "11: m4_include([make_description.at])",
          "12: m4_include([ureport.at])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: m4_include([dump_dir.at])",
          "",
          "---------------"
        ]
      }
    }
  ]
}