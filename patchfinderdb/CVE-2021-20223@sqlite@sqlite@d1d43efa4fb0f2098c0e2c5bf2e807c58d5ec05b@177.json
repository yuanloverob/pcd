{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "19d4175d6570133bbde56d12ea51e121a0ec2af6",
      "candidate_info": {
        "commit_hash": "19d4175d6570133bbde56d12ea51e121a0ec2af6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/19d4175d6570133bbde56d12ea51e121a0ec2af6",
        "files": [
          "ext/fts3/fts3_snippet.c",
          "manifest",
          "manifest.uuid",
          "test/fts4aa.test"
        ],
        "message": "Improved detection of corruption in the %_stat table of FTS4. Chromium ticket 1025467.\n\nFossilOrigin-Name: 10f8a3b718e0f47be528fba086c318e1dfe18ead383d01cfa24dedabad41e0a2",
        "before_after_code_files": [
          "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c",
          "manifest.uuid||manifest.uuid",
          "test/fts4aa.test||test/fts4aa.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c": [
          "File: ext/fts3/fts3_snippet.c -> ext/fts3/fts3_snippet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1065:   }",
          "1066:   pEnd = a + n;",
          "1067:   a += sqlite3Fts3GetVarintBounded(a, pEnd, &nDoc);",
          "1069:     return FTS_CORRUPT_VTAB;",
          "1070:   }",
          "1073:   if( paLen ) *paLen = a;",
          "1074:   if( ppEnd ) *ppEnd = pEnd;",
          "",
          "[Removed Lines]",
          "1068:   if( nDoc==0 || a>pEnd ){",
          "",
          "[Added Lines]",
          "1068:   if( nDoc<=0 || a>pEnd ){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ed57c48e4bb337810521bda2da79614313e4835a317ca4eadb52bd67e4eadf98",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts4aa.test||test/fts4aa.test": [
          "File: test/fts4aa.test -> test/fts4aa.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "226:   SELECT quote(matchinfo(t1,'a')) FROM t1 WHERE t1 MATCH 'one two';",
          "227: } {1 {database disk image is malformed}}",
          "232: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "229: # 2019-11-18 https://bugs.chromium.org/p/chromium/issues/detail?id=1025467",
          "230: db close",
          "231: sqlite3 db :memory:",
          "232: do_execsql_test fts4aa-6.10 {",
          "233:   CREATE VIRTUAL TABLE f USING fts4();",
          "234:   INSERT INTO f_segdir VALUES (77,91,0,0,'255 77',x'0001308000004d5c4ddddddd4d4d7b4d4d4d614d8019ff4d05000001204d4d2e4d6e4d4d4d4b4d6c4d004d4d4d4d4d4d3d000000004d5d4d4d645d4d004d4d4d4d4d4d4d4d4d454d6910004d05ffff054d646c4d004d5d4d4d4d4d3d000000004d4d4d4d4d4d4d4d4d4d4d69624d4d4d04004d4d4d4d4d604d4ce1404d554d45');",
          "235:   INSERT INTO f_segdir VALUES (77,108,0,0,'255 77',x'0001310000fa64004d4d4d3c5d4d654d4d4d614d8000ff4d05000001204d4d2e4d6e4d4d4dff4d4d4d4d4d4d00104d4d4d4d000000004d4d4d0400311d4d4d4d4d4d4d4d4d4d684d6910004d05ffff054d4d6c4d004d4d4d4d4d4d3d000000004d4d4d4d644d4d4d4d4d4d69624d4d4d03ed4d4d4d4d4d604d4ce1404d550080');",
          "236:   INSERT INTO f_stat VALUES (0,x'80808080100000000064004d4d4d3c4d4d654d4d4d614d8000ff4df6ff1a00204d4d2e4d6e4d4d4d104d4d4d4d4d4d00104d4d4d4d4d4d69574d4d4d000031044d4d4d3e4d4d4c4d05004d6910');",
          "237:   SELECT quote(matchinfo(f,'pnax')) from f where f match '0 1';",
          "238: } {X'0200000000000000000000000E0000000E00000001000000010000000100000001000000'}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "553948e51433715f32d57e6977db6e0992b7f8cd",
      "candidate_info": {
        "commit_hash": "553948e51433715f32d57e6977db6e0992b7f8cd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/553948e51433715f32d57e6977db6e0992b7f8cd",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "src/window.c",
          "test/window4.tcl",
          "test/window4.test",
          "test/window9.test"
        ],
        "message": "Fix handling of window functions in aggregate queries that have no GROUP BY clause. Also remove a faulty assert causing the error reported in [618156e3].\n\nFossilOrigin-Name: 38e3dd389d142e520c71139ec84aa3c7722992af28a5f93a7f16e0ea176b74bb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "src/window.c||src/window.c",
          "test/window4.tcl||test/window4.tcl",
          "test/window4.test||test/window4.test",
          "test/window9.test||test/window9.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8b437b47266ec2d80d85eafcfdd6949556d6c28d9d67d5f43d89799f0f5b7bd0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:     if( OK_IF_ALWAYS_TRUE(p->pWinDefn) ){",
          "104:       sqlite3WindowListDelete(db, p->pWinDefn);",
          "105:     }",
          "107: #endif",
          "108:     if( OK_IF_ALWAYS_TRUE(p->pWith) ) sqlite3WithDelete(db, p->pWith);",
          "109:     if( bFree ) sqlite3DbFreeNN(db, p);",
          "",
          "[Removed Lines]",
          "106:     assert( p->pWin==0 );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "935:     Table *pTab;",
          "937:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
          "938:     if( pTab==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "936:     u32 selFlags = p->selFlags;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1022:       sqlite3SrcListAssignCursors(pParse, p->pSrc);",
          "1023:       pSub->selFlags |= SF_Expanded;",
          "1024:       pTab2 = sqlite3ResultSetOfSelect(pParse, pSub, SQLITE_AFF_NONE);",
          "1025:       if( pTab2==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1026:       pSub->selFlags |= (selFlags & SF_Aggregate);",
          "",
          "---------------"
        ],
        "test/window4.tcl||test/window4.tcl": [
          "File: test/window4.tcl -> test/window4.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "385:   ) sub;",
          "386: }",
          "388: execsql_test 12.0 {",
          "389:   DROP TABLE IF EXISTS t2;",
          "390:   CREATE TABLE t2(a INTEGER);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "388: execsql_test 11.5 {",
          "389:   SELECT sum( min(t) ) OVER () FROM t8 GROUP BY total;",
          "390: }",
          "391: execsql_test 11.5 {",
          "392:   SELECT sum( max(t) ) OVER () FROM t8 GROUP BY total;",
          "393: }",
          "395: execsql_test 11.7 {",
          "396:   SELECT sum( min(t) ) OVER () FROM t8;",
          "397: }",
          "398: execsql_test 11.8 {",
          "399:   SELECT sum( max(t) ) OVER () FROM t8;",
          "400: }",
          "",
          "---------------"
        ],
        "test/window4.test||test/window4.test": [
          "File: test/window4.test -> test/window4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1324:   ) sub;",
          "1325: } {0   1   2}",
          "1327: do_execsql_test 12.0 {",
          "1328:   DROP TABLE IF EXISTS t2;",
          "1329:   CREATE TABLE t2(a INTEGER);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1327: do_execsql_test 11.5 {",
          "1328:   SELECT sum( min(t) ) OVER () FROM t8 GROUP BY total;",
          "1329: } {5   5}",
          "1331: do_execsql_test 11.5 {",
          "1332:   SELECT sum( max(t) ) OVER () FROM t8 GROUP BY total;",
          "1333: } {10   10}",
          "1335: do_execsql_test 11.7 {",
          "1336:   SELECT sum( min(t) ) OVER () FROM t8;",
          "1337: } {0}",
          "1339: do_execsql_test 11.8 {",
          "1340:   SELECT sum( max(t) ) OVER () FROM t8;",
          "1341: } {10}",
          "",
          "---------------"
        ],
        "test/window9.test||test/window9.test": [
          "File: test/window9.test -> test/window9.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "232:   7.2 8.75 10.0 11.0 15.0",
          "233: }",
          "235: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "235: #-------------------------------------------------------------------------",
          "236: reset_db",
          "237: do_execsql_test 8.1.1 {",
          "238:   CREATE TABLE t1(a, b);",
          "239:   INSERT INTO t1 VALUES(1, 2), (3, 4);",
          "240:   SELECT min( sum(a) ) OVER () FROM t1;",
          "241: } {4}",
          "243: do_execsql_test 8.1.2 {",
          "244:   SELECT min( sum(a) ) OVER () FROM t1 GROUP BY a;",
          "245: } {1 1}",
          "247: do_execsql_test 8.2 {",
          "248:   CREATE VIEW v1 AS",
          "249:     SELECT 0 AS x",
          "250:       UNION",
          "251:     SELECT count() OVER() FROM (SELECT 0)",
          "252:     ORDER BY 1",
          "253:   ;",
          "254: }",
          "256: do_catchsql_test 8.3 {",
          "257:   SELECT min( max((SELECT x FROM v1)) ) OVER()",
          "258: } {1 {misuse of aggregate: max()}}",
          "260: do_execsql_test 8.4 {",
          "261:   SELECT(",
          "262:       SELECT x UNION",
          "263:       SELECT sum( avg((SELECT x FROM v1)) ) OVER()",
          "264:   )",
          "265:   FROM v1;",
          "266: } {0.0}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d3ee3ad12fd53f0db78a2c07917fb4fc310ca72a",
      "candidate_info": {
        "commit_hash": "d3ee3ad12fd53f0db78a2c07917fb4fc310ca72a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d3ee3ad12fd53f0db78a2c07917fb4fc310ca72a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/update.c",
          "test/gencol1.test"
        ],
        "message": "An UPDATE of a table that is indexed by a constant virtual column that uses the one-pass optimization might cause the table seek to be omitted before reaching row DELETE/INSERT.  Fix this by coding an extra OP_Column in that circumstance.  Ticket [ec8abb025e78f40c]\n\nFossilOrigin-Name: e54560495926fbb8a2ce829c677a2dd0066e46b7a8d4ada9d8a34a3426959836",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/update.c||src/update.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a5d7f5d24a239f729de0b8aa5becf5af35ba87160565ee0713c335b8d1bbf12d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "801:     sqlite3GenerateRowIndexDelete(pParse, pTab, iDataCur, iIdxCur, aRegIdx, -1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "803: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "812:     if( eOnePass!=ONEPASS_OFF && (pTab->tabFlags & TF_HasVirtual)!=0 ){",
          "813:       int r1 = sqlite3GetTempReg(pParse);",
          "814:       sqlite3VdbeAddOp3(v, OP_Column, iDataCur, 0, r1);",
          "815:       sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
          "816:     }",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "468:   SELECT a FROM t1 WHERE b='DEF' AND a='def';",
          "469: } {DEF}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "471: # 2019-12-26 ticket ec8abb025e78f40c",
          "472: # An index on a virtual column with a constant value (why would anybody",
          "473: # ever do such a thing?) can cause problems for a one-pass DELETE.",
          "474: #",
          "475: reset_db",
          "476: do_execsql_test gencol1-18.10 {",
          "477:   CREATE TABLE t0(c0 UNIQUE AS(0), c1, c2);",
          "478:   INSERT INTO t0(c1) VALUES(0);",
          "479:   SELECT * FROM t0;",
          "480: } {0 0 {}}",
          "481: do_execsql_test gencol1-18.20 {",
          "482:   UPDATE t0 SET c1=0, c2=0 WHERE c0>=0;",
          "483:   SELECT * FROM t0;",
          "484: } {0 0 0}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7d14ffe4e1fde35a387da5484fac7344298fc884",
      "candidate_info": {
        "commit_hash": "7d14ffe4e1fde35a387da5484fac7344298fc884",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7d14ffe4e1fde35a387da5484fac7344298fc884",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "src/wherecode.c"
        ],
        "message": "Additional corner-case fixes for the in-scan-vs-index or OP_SeekScan optimization.\n\nFossilOrigin-Name: ad5ab24ebd557e7af1d92ab3fbcb3747c04da5ad4ed779fb6391dc94042687dd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c0400f8c0bcb85ba39004feff753eae2f8e82065539e52b5788febd7644c417b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2537:         nIn = sqlite3LogEst(pExpr->x.pList->nExpr);",
          "2538:       }",
          "2540:         LogEst M, logK, safetyMargin;",
          "",
          "[Removed Lines]",
          "2539:       if( pProbe->hasStat1 ){",
          "",
          "[Added Lines]",
          "2539:       if( pProbe->hasStat1 && rLogSize>=10 ){",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1810:       op = aStartOp[(start_constraints<<2) + (startEq<<1) + bRev];",
          "1811:       assert( op!=0 );",
          "1818:         assert( regBignull==0 );",
          "",
          "[Removed Lines]",
          "1812:       assert( op==OP_SeekGE",
          "1813:            || (pLoop->wsFlags & WHERE_IN_SEEKSCAN)==0",
          "1814:            || (db->flags & SQLITE_ReverseOrder)!=0 );",
          "1815:       if( (pLoop->wsFlags & WHERE_IN_SEEKSCAN)!=0",
          "1817:       ){",
          "",
          "[Added Lines]",
          "1812:       if( (pLoop->wsFlags & WHERE_IN_SEEKSCAN)!=0 && op==OP_SeekGE ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "299b102b93f229f152a3f0751f99d9dd8e7da120",
      "candidate_info": {
        "commit_hash": "299b102b93f229f152a3f0751f99d9dd8e7da120",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/299b102b93f229f152a3f0751f99d9dd8e7da120",
        "files": [
          "ext/misc/noop.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Add the new noop_nd() debugging function to the noop.c extension.\n\nFossilOrigin-Name: 72911fb1b010ae093a161b9c0d21cbdedcbc1f924a55f12227fbe342bd978e08",
        "before_after_code_files": [
          "ext/misc/noop.c||ext/misc/noop.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/noop.c||ext/misc/noop.c": [
          "File: ext/misc/noop.c -> ext/misc/noop.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:   rc = sqlite3_create_function(db, \"noop_do\", 1,",
          "54:                      SQLITE_UTF8 | SQLITE_DETERMINISTIC | SQLITE_DIRECTONLY,",
          "55:                      0, noopfunc, 0, 0);",
          "56:   return rc;",
          "57: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:   if( rc ) return rc;",
          "64:   rc = sqlite3_create_function(db, \"noop_nd\", 1,",
          "65:                      SQLITE_UTF8,",
          "66:                      0, noopfunc, 0, 0);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9ce2192b81a81bb8928e3184664694ed2f863ce41c2777cdc35e6b61486aea46",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}