{
  "cve_id": "CVE-2017-3733",
  "cve_desc": "During a renegotiation handshake if the Encrypt-Then-Mac extension is negotiated where it was not in the original handshake (or vice-versa) then this can cause OpenSSL 1.1.0 before 1.1.0e to crash (dependent on ciphersuite). Both clients and servers are affected.",
  "repo": "openssl/openssl",
  "patch_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
  "patch_info": {
    "commit_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "files": [
      "include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h",
      "ssl/t1_enc.c",
      "ssl/t1_lib.c"
    ],
    "message": "Don't change the state of the ETM flags until CCS processing\n\nChanging the ciphersuite during a renegotiation can result in a crash\nleading to a DoS attack. ETM has not been implemented in 1.1.0 for DTLS\nso this is TLS only.\n\nThe problem is caused by changing the flag indicating whether to use ETM\nor not immediately on negotiation of ETM, rather than at CCS. Therefore,\nduring a renegotiation, if the ETM state is changing (usually due to a\nchange of ciphersuite), then an error/crash will occur.\n\nDue to the fact that there are separate CCS messages for read and write\nwe actually now need two flags to determine whether to use ETM or not.\n\nCVE-2017-3733\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl3.h||include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h||ssl/ssl_locl.h",
      "ssl/t1_enc.c||ssl/t1_enc.c",
      "ssl/t1_lib.c||ssl/t1_lib.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl3.h||include/openssl/ssl3.h": [
      "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "264: # define TLS1_FLAGS_SKIP_CERT_VERIFY             0x0010",
      "270: # define TLS1_FLAGS_RECEIVED_EXTMS               0x0200",
      "272: # define SSL3_MT_HELLO_REQUEST                   0",
      "273: # define SSL3_MT_CLIENT_HELLO                    1",
      "274: # define SSL3_MT_SERVER_HELLO                    2",
      "",
      "[Removed Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             0x0100",
      "",
      "[Added Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_READ        0x0100",
      "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             TLS1_FLAGS_ENCRYPT_THEN_MAC_READ",
      "273: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE       0x0400",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
      "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:     if (type == SSL3_RT_APPLICATION_DATA &&",
      "396:         u_len >= 4 * (max_send_fragment = s->max_send_fragment) &&",
      "397:         s->compress == NULL && s->msg_callback == NULL &&",
      "399:         EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_write_ctx)) &",
      "400:         EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK) {",
      "401:         unsigned char aad[13];",
      "",
      "[Removed Lines]",
      "398:         !SSL_USE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "[Added Lines]",
      "398:         !SSL_WRITE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "795:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "796:                                          &(outbuf[j][wr[j].length + eivlen]),",
      "797:                                          1) < 0)",
      "",
      "[Removed Lines]",
      "794:         if (!SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "794:         if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "814:         goto err;",
      "816:     for (j = 0; j < numpipes; j++) {",
      "818:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "819:                                          outbuf[j] + wr[j].length, 1) < 0)",
      "820:                 goto err;",
      "",
      "[Removed Lines]",
      "817:         if (SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "817:         if (SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------"
    ],
    "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
      "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "350:         unsigned char *mac;",
      "351:         mac_size = EVP_MD_CTX_size(s->read_hash);",
      "352:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
      "",
      "[Removed Lines]",
      "349:     if (SSL_USE_ETM(s) && s->read_hash) {",
      "",
      "[Added Lines]",
      "349:     if (SSL_READ_ETM(s) && s->read_hash) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "394:     if ((sess != NULL) &&",
      "395:         (s->enc_read_ctx != NULL) &&",
      "398:         unsigned char *mac = NULL;",
      "399:         unsigned char mac_tmp[EVP_MAX_MD_SIZE];",
      "",
      "[Removed Lines]",
      "396:         (EVP_MD_CTX_md(s->read_hash) != NULL) && !SSL_USE_ETM(s)) {",
      "",
      "[Added Lines]",
      "396:         (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "823:         }",
      "825:         ret = 1;",
      "827:             mac_size = EVP_MD_CTX_size(s->read_hash);",
      "828:         if ((bs != 1) && !send) {",
      "829:             int tmpret;",
      "",
      "[Removed Lines]",
      "826:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "[Added Lines]",
      "826:         if (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "997:     header[11] = (rec->length) >> 8;",
      "998:     header[12] = (rec->length) & 0xff;",
      "1001:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
      "1002:         ssl3_cbc_record_digest_supported(mac_ctx)) {",
      "",
      "[Removed Lines]",
      "1000:     if (!send && !SSL_USE_ETM(ssl) &&",
      "",
      "[Added Lines]",
      "1000:     if (!send && !SSL_READ_ETM(ssl) &&",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1022:             EVP_MD_CTX_free(hmac);",
      "1023:             return -1;",
      "1024:         }",
      "1026:             if (!tls_fips_digest_extra(ssl->enc_read_ctx,",
      "1027:                                        mac_ctx, rec->input,",
      "1028:                                        rec->length, rec->orig_len)) {",
      "",
      "[Removed Lines]",
      "1025:         if (!send && !SSL_USE_ETM(ssl) && FIPS_mode())",
      "",
      "[Added Lines]",
      "1025:         if (!send && !SSL_READ_ETM(ssl) && FIPS_mode())",
      "",
      "---------------"
    ],
    "ssl/ssl_locl.h||ssl/ssl_locl.h": [
      "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "378: # define SSL_CLIENT_USE_SIGALGS(s)        \\",
      "379:     SSL_CLIENT_USE_TLS1_2_CIPHERS(s)",
      "384: # define SSL_PKEY_RSA_ENC        0",
      "",
      "[Removed Lines]",
      "381: # define SSL_USE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC)",
      "",
      "[Added Lines]",
      "381: # define SSL_READ_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_READ)",
      "382: # define SSL_WRITE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1111:     unsigned char *alpn_client_proto_list;",
      "1112:     unsigned alpn_client_proto_list_len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1116:     int tlsext_use_etm;",
      "",
      "---------------"
    ],
    "ssl/t1_enc.c||ssl/t1_enc.c": [
      "File: ssl/t1_enc.c -> ssl/t1_enc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "130: #endif",
      "132:     if (which & SSL3_CC_READ) {",
      "133:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "134:             s->mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM;",
      "135:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133:         if (s->tlsext_use_etm)",
      "134:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "135:         else",
      "136:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "168:         mac_secret = &(s->s3->read_mac_secret[0]);",
      "169:         mac_secret_size = &(s->s3->read_mac_secret_size);",
      "170:     } else {",
      "171:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "172:             s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
      "173:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "176:         if (s->tlsext_use_etm)",
      "177:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "178:         else",
      "179:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "367:     if (s->s3->tmp.key_block_length != 0)",
      "368:         return (1);",
      "373:         SSLerr(SSL_F_TLS1_SETUP_KEY_BLOCK, SSL_R_CIPHER_OR_HASH_UNAVAILABLE);",
      "374:         return (0);",
      "375:     }",
      "",
      "[Removed Lines]",
      "370:     if (!ssl_cipher_get_evp",
      "371:         (s->session, &c, &hash, &mac_type, &mac_secret_size, &comp,",
      "372:          SSL_USE_ETM(s))) {",
      "",
      "[Added Lines]",
      "380:     if (!ssl_cipher_get_evp(s->session, &c, &hash, &mac_type, &mac_secret_size,",
      "381:                             &comp, s->tlsext_use_etm)) {",
      "",
      "---------------"
    ],
    "ssl/t1_lib.c||ssl/t1_lib.c": [
      "File: ssl/t1_lib.c -> ssl/t1_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1674: #endif",
      "1675:     if (!custom_ext_add(s, 1, &ret, limit, al))",
      "1676:         return NULL;",
      "",
      "[Removed Lines]",
      "1677:     if (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) {",
      "",
      "[Added Lines]",
      "1677:     if (s->tlsext_use_etm) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1683:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4",
      "1684:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT",
      "1685:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)",
      "1687:         else {",
      "",
      "[Removed Lines]",
      "1686:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1686:             s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1917:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
      "1918:     s->s3->tmp.peer_sigalgs = NULL;",
      "1921: #ifndef OPENSSL_NO_SRP",
      "1922:     OPENSSL_free(s->srp_ctx.login);",
      "",
      "[Removed Lines]",
      "1919:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1919:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2264:         }",
      "2265: #endif",
      "2266:         else if (type == TLSEXT_TYPE_encrypt_then_mac)",
      "",
      "[Removed Lines]",
      "2267:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2267:             s->tlsext_use_etm = 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2366:                              SSL_DTLSEXT_HB_DONT_SEND_REQUESTS);",
      "2367: #endif",
      "2371:     s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;",
      "",
      "[Removed Lines]",
      "2369:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2369:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2586:             if (s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD",
      "2587:                 && s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)",
      "2589:         } else if (type == TLSEXT_TYPE_extended_master_secret) {",
      "2590:             s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;",
      "2591:             if (!s->hit)",
      "",
      "[Removed Lines]",
      "2588:                 s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2588:                 s->tlsext_use_etm = 1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f5eab25a7c03c5fb1d3fab55c506907f8fbd427e",
      "candidate_info": {
        "commit_hash": "f5eab25a7c03c5fb1d3fab55c506907f8fbd427e",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/f5eab25a7c03c5fb1d3fab55c506907f8fbd427e",
        "files": [
          "apps/speed.c",
          "crypto/evp/e_aes_cbc_hmac_sha1.c",
          "crypto/evp/e_aes_cbc_hmac_sha256.c",
          "crypto/evp/e_rc4.c",
          "crypto/evp/e_rc4_hmac_md5.c",
          "crypto/include/internal/evp_int.h",
          "ssl/record/rec_layer_s3.c"
        ],
        "message": "Cleanup EVP_CIPH/EP_CTRL duplicate defines\n\nRemove duplicate defines from EVP source files.\nMost of them were in evp.h, which is always included.\nAdd new ones evp_int.h\nEVP_CIPH_FLAG_TLS1_1_MULTIBLOCK is now always defined in evp.h, so\nremove conditionals on it\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2201)\n(cherry picked from commit 9d6fcd4295fef7ebc4232aab85718a99d36cc50a)",
        "before_after_code_files": [
          "apps/speed.c||apps/speed.c",
          "crypto/evp/e_aes_cbc_hmac_sha1.c||crypto/evp/e_aes_cbc_hmac_sha1.c",
          "crypto/evp/e_aes_cbc_hmac_sha256.c||crypto/evp/e_aes_cbc_hmac_sha256.c",
          "crypto/evp/e_rc4.c||crypto/evp/e_rc4.c",
          "crypto/evp/e_rc4_hmac_md5.c||crypto/evp/e_rc4_hmac_md5.c",
          "crypto/include/internal/evp_int.h||crypto/include/internal/evp_int.h",
          "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [
            "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c"
          ],
          "candidate": [
            "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c"
          ]
        }
      },
      "candidate_diff": {
        "apps/speed.c||apps/speed.c": [
          "File: apps/speed.c -> apps/speed.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2273: #endif",
          "2275:     if (doit[D_EVP]) {",
          "2277:         if (multiblock && evp_cipher) {",
          "2278:             if (!",
          "2279:                 (EVP_CIPHER_flags(evp_cipher) &",
          "",
          "[Removed Lines]",
          "2276: #ifdef EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2290:             ret = 0;",
          "2291:             goto end;",
          "2292:         }",
          "2294:         for (testnum = 0; testnum < SIZE_NUM; testnum++) {",
          "2295:             if (evp_cipher) {",
          "",
          "[Removed Lines]",
          "2293: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "crypto/evp/e_aes_cbc_hmac_sha1.c||crypto/evp/e_aes_cbc_hmac_sha1.c": [
          "File: crypto/evp/e_aes_cbc_hmac_sha1.c -> crypto/evp/e_aes_cbc_hmac_sha1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include \"internal/evp_int.h\"",
          "22: #include \"internal/constant_time_locl.h\"",
          "40: typedef struct {",
          "41:     AES_KEY ks;",
          "42:     SHA_CTX head, tail, md;",
          "",
          "[Removed Lines]",
          "24: #ifndef EVP_CIPH_FLAG_AEAD_CIPHER",
          "25: # define EVP_CIPH_FLAG_AEAD_CIPHER       0x200000",
          "26: # define EVP_CTRL_AEAD_TLS1_AAD          0x16",
          "27: # define EVP_CTRL_AEAD_SET_MAC_KEY       0x17",
          "28: #endif",
          "30: #if !defined(EVP_CIPH_FLAG_DEFAULT_ASN1)",
          "31: # define EVP_CIPH_FLAG_DEFAULT_ASN1 0",
          "32: #endif",
          "34: #if !defined(EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK)",
          "35: # define EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK 0",
          "36: #endif",
          "38: #define TLS1_1_VERSION 0x0302",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146: # endif",
          "147: # define SHA1_Update sha1_update",
          "151: typedef struct {",
          "152:     unsigned int A[8], B[8], C[8], D[8], E[8];",
          "",
          "[Removed Lines]",
          "149: # if !defined(OPENSSL_NO_MULTIBLOCK) && EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK",
          "",
          "[Added Lines]",
          "133: # if !defined(OPENSSL_NO_MULTIBLOCK)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "842:                 return SHA_DIGEST_LENGTH;",
          "843:             }",
          "844:         }",
          "846:     case EVP_CTRL_TLS1_1_MULTIBLOCK_MAX_BUFSIZE:",
          "847:         return (int)(5 + 16 + ((arg + 20 + 16) & -16));",
          "848:     case EVP_CTRL_TLS1_1_MULTIBLOCK_AAD:",
          "",
          "[Removed Lines]",
          "845: # if !defined(OPENSSL_NO_MULTIBLOCK) && EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK",
          "",
          "[Added Lines]",
          "829: # if !defined(OPENSSL_NO_MULTIBLOCK)",
          "",
          "---------------"
        ],
        "crypto/evp/e_aes_cbc_hmac_sha256.c||crypto/evp/e_aes_cbc_hmac_sha256.c": [
          "File: crypto/evp/e_aes_cbc_hmac_sha256.c -> crypto/evp/e_aes_cbc_hmac_sha256.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"internal/constant_time_locl.h\"",
          "23: #include \"internal/evp_int.h\"",
          "41: typedef struct {",
          "42:     AES_KEY ks;",
          "43:     SHA256_CTX head, tail, md;",
          "",
          "[Removed Lines]",
          "25: #ifndef EVP_CIPH_FLAG_AEAD_CIPHER",
          "26: # define EVP_CIPH_FLAG_AEAD_CIPHER       0x200000",
          "27: # define EVP_CTRL_AEAD_TLS1_AAD          0x16",
          "28: # define EVP_CTRL_AEAD_SET_MAC_KEY       0x17",
          "29: #endif",
          "31: #if !defined(EVP_CIPH_FLAG_DEFAULT_ASN1)",
          "32: # define EVP_CIPH_FLAG_DEFAULT_ASN1 0",
          "33: #endif",
          "35: #if !defined(EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK)",
          "36: # define EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK 0",
          "37: #endif",
          "39: #define TLS1_1_VERSION 0x0302",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "142: # endif",
          "143: # define SHA256_Update sha256_update",
          "147: typedef struct {",
          "148:     unsigned int A[8], B[8], C[8], D[8], E[8], F[8], G[8], H[8];",
          "",
          "[Removed Lines]",
          "145: # if !defined(OPENSSL_NO_MULTIBLOCK) && EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK",
          "",
          "[Added Lines]",
          "129: # if !defined(OPENSSL_NO_MULTIBLOCK)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "819:                 return SHA256_DIGEST_LENGTH;",
          "820:             }",
          "821:         }",
          "823:     case EVP_CTRL_TLS1_1_MULTIBLOCK_MAX_BUFSIZE:",
          "824:         return (int)(5 + 16 + ((arg + 32 + 16) & -16));",
          "825:     case EVP_CTRL_TLS1_1_MULTIBLOCK_AAD:",
          "",
          "[Removed Lines]",
          "822: # if !defined(OPENSSL_NO_MULTIBLOCK) && EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK",
          "",
          "[Added Lines]",
          "806: # if !defined(OPENSSL_NO_MULTIBLOCK)",
          "",
          "---------------"
        ],
        "crypto/evp/e_rc4.c||crypto/evp/e_rc4.c": [
          "File: crypto/evp/e_rc4.c -> crypto/evp/e_rc4.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: # include \"internal/evp_int.h\"",
          "24: typedef struct {",
          "26: } EVP_RC4_KEY;",
          "",
          "[Removed Lines]",
          "22: # define EVP_RC4_KEY_SIZE                16",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "crypto/evp/e_rc4_hmac_md5.c||crypto/evp/e_rc4_hmac_md5.c": [
          "File: crypto/evp/e_rc4_hmac_md5.c -> crypto/evp/e_rc4_hmac_md5.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: # include <openssl/md5.h>",
          "22: # include \"internal/evp_int.h\"",
          "33: typedef struct {",
          "34:     RC4_KEY ks;",
          "35:     MD5_CTX head, tail, md;",
          "",
          "[Removed Lines]",
          "24: # ifndef EVP_CIPH_FLAG_AEAD_CIPHER",
          "25: #  define EVP_CIPH_FLAG_AEAD_CIPHER       0x200000",
          "26: #  define EVP_CTRL_AEAD_TLS1_AAD          0x16",
          "27: #  define EVP_CTRL_AEAD_SET_MAC_KEY       0x17",
          "28: # endif",
          "31: # define EVP_RC4_KEY_SIZE                16",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "crypto/include/internal/evp_int.h||crypto/include/internal/evp_int.h": [
          "File: crypto/include/internal/evp_int.h -> crypto/include/internal/evp_int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "380: void openssl_add_all_ciphers_int(void);",
          "381: void openssl_add_all_digests_int(void);",
          "382: void evp_cleanup_int(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "386: #define EVP_RC4_KEY_SIZE 16",
          "387: #ifndef TLS1_1_VERSION",
          "388: # define TLS1_1_VERSION   0x0302",
          "389: #endif",
          "",
          "---------------"
        ],
        "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
          "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #include <openssl/rand.h>",
          "18: #include \"record_locl.h\"",
          "24: #if     defined(OPENSSL_SMALL_FOOTPRINT) || \\",
          "25:         !(      defined(AES_ASM) &&     ( \\",
          "26:                 defined(__x86_64)       || defined(__x86_64__)  || \\",
          "",
          "[Removed Lines]",
          "20: #ifndef  EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK",
          "21: # define EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK 0",
          "22: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3906d9e8df270641a98afbc3c658e2570db70731",
      "candidate_info": {
        "commit_hash": "3906d9e8df270641a98afbc3c658e2570db70731",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/3906d9e8df270641a98afbc3c658e2570db70731",
        "files": [
          "crypto/objects/obj_dat.c"
        ],
        "message": "Added error checking for OBJ_create\n\nfixes segmentation fault in case of not enough memory for object creation\n\nCLA: trivial\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3157)\n(cherry picked from commit 487a73def65aa6ffedf5baf353e912fe61aa3c7c)",
        "before_after_code_files": [
          "crypto/objects/obj_dat.c||crypto/objects/obj_dat.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/objects/obj_dat.c||crypto/objects/obj_dat.c": [
          "File: crypto/objects/obj_dat.c -> crypto/objects/obj_dat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "694:     tmpoid = OBJ_txt2obj(oid, 1);",
          "697:     if (OBJ_obj2nid(tmpoid) != NID_undef) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "695:     if (tmpoid == NULL)",
          "696:         return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8e4d861c81977db1a914513fc3c00474b897b13d",
      "candidate_info": {
        "commit_hash": "8e4d861c81977db1a914513fc3c00474b897b13d",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/8e4d861c81977db1a914513fc3c00474b897b13d",
        "files": [
          "crypto/x86_64cpuid.pl",
          "crypto/x86cpuid.pl"
        ],
        "message": "crypto/x86*cpuid.pl: move extended feature detection.\n\nExteneded feature flags were not pulled on AMD processors, as result\na number of extensions were effectively masked on Ryzen. Original fix\nfor x86_64cpuid.pl addressed this problem, but messed up processor\nvendor detection. This fix moves extended feature detection past\nbasic feature detection where it belongs. 32-bit counterpart is\nharmonized too.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(cherry picked from commit 1aed5e1ac28790cc915ad03e86e2d5e896a4ea13)",
        "before_after_code_files": [
          "crypto/x86_64cpuid.pl||crypto/x86_64cpuid.pl",
          "crypto/x86cpuid.pl||crypto/x86cpuid.pl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/x86_64cpuid.pl||crypto/x86_64cpuid.pl": [
          "File: crypto/x86_64cpuid.pl -> crypto/x86_64cpuid.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:  mov %rbx,%r8  # save %rbx",
          "68:  xor %eax,%eax",
          "70:  cpuid",
          "71:  mov %eax,%r11d  # max value for standard query level",
          "83:  xor %eax,%eax",
          "84:  cmp \\$0x756e6547,%ebx # \"Genu\"",
          "85:  setne %al",
          "",
          "[Removed Lines]",
          "69:  mov %eax,8(%rdi)  # clear 3rd word",
          "73:  cmp \\$7,%eax",
          "74:  jb .Lno_extended_info",
          "76:  mov \\$7,%eax",
          "77:  xor %ecx,%ecx",
          "78:  cpuid",
          "79:  mov %ebx,8(%rdi)",
          "81: .Lno_extended_info:",
          "",
          "[Added Lines]",
          "69:  mov %eax,8(%rdi)  # clear extended feature flags",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "173:  or %ecx,%r9d  # merge AMD XOP flag",
          "175:  mov %edx,%r10d  # %r9d:%r10d is copy of %ecx:%edx",
          "176:  bt \\$27,%r9d  # check OSXSAVE bit",
          "177:  jnc .Lclear_avx",
          "178:  xor %ecx,%ecx  # XCR0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:  cmp \\$7,%r11d",
          "168:  jb .Lno_extended_info",
          "169:  mov \\$7,%eax",
          "170:  xor %ecx,%ecx",
          "171:  cpuid",
          "172:  mov %ebx,8(%rdi)  # save extended feature flags",
          "173: .Lno_extended_info:",
          "",
          "---------------"
        ],
        "crypto/x86cpuid.pl||crypto/x86cpuid.pl": [
          "File: crypto/x86cpuid.pl -> crypto/x86cpuid.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:  &pop (\"eax\");",
          "31:  &xor (\"ecx\",\"eax\");",
          "32:  &xor (\"eax\",\"eax\");",
          "33:  &bt (\"ecx\",21);",
          "34:  &jnc (&label(\"nocpuid\"));",
          "37:  &cpuid ();",
          "38:  &mov (\"edi\",\"eax\");  # max value for standard query level",
          "",
          "[Removed Lines]",
          "35:  &mov (\"esi\",&wparam(0));",
          "36:  &mov (&DWP(8,\"esi\"),\"eax\"); # clear 3rd word",
          "",
          "[Added Lines]",
          "33:  &mov (\"esi\",&wparam(0));",
          "34:  &mov (&DWP(8,\"esi\"),\"eax\"); # clear extended feature flags",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:  &jmp (&label(\"generic\"));",
          "93: &set_label(\"intel\");",
          "104:  &cmp (\"edi\",4);",
          "106:  &jb (&label(\"nocacheinfo\"));",
          "108:  &mov (\"eax\",4);",
          "109:  &mov (\"ecx\",0);  # query L1D",
          "110:  &cpuid ();",
          "115: &set_label(\"nocacheinfo\");",
          "116:  &mov (\"eax\",1);",
          "",
          "[Removed Lines]",
          "94:  &cmp (\"edi\",7);",
          "95:  &jb (&label(\"cacheinfo\"));",
          "97:  &mov (\"esi\",&wparam(0));",
          "98:  &mov (\"eax\",7);",
          "99:  &xor (\"ecx\",\"ecx\");",
          "100:  &cpuid ();",
          "101:  &mov (&DWP(8,\"esi\"),\"ebx\");",
          "103: &set_label(\"cacheinfo\");",
          "105:  &mov (\"edi\",-1);",
          "111:  &mov (\"edi\",\"eax\");",
          "112:  &shr (\"edi\",14);",
          "113:  &and (\"edi\",0xfff);  # number of cores -1 per L1D",
          "",
          "[Added Lines]",
          "95:  &mov (\"esi\",-1);",
          "101:  &mov (\"esi\",\"eax\");",
          "102:  &shr (\"esi\",14);",
          "103:  &and (\"esi\",0xfff);  # number of cores -1 per L1D",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "128:  &bt (\"edx\",28);  # test hyper-threading bit",
          "129:  &jnc (&label(\"generic\"));",
          "130:  &and (\"edx\",0xefffffff);",
          "132:  &je (&label(\"generic\"));",
          "134:  &or (\"edx\",0x10000000);",
          "",
          "[Removed Lines]",
          "131:  &cmp (\"edi\",0);",
          "",
          "[Added Lines]",
          "121:  &cmp (\"esi\",0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "140: &set_label(\"generic\");",
          "141:  &and (\"ebp\",1<<11);  # isolate AMD XOP flag",
          "142:  &and (\"ecx\",0xfffff7ff); # force 11th bit to 0",
          "144:  &or (\"ebp\",\"ecx\");  # merge AMD XOP flag",
          "147:  &jnc (&label(\"clear_avx\"));",
          "148:  &xor (\"ecx\",\"ecx\");",
          "149:  &data_byte(0x0f,0x01,0xd0); # xgetbv",
          "",
          "[Removed Lines]",
          "143:  &mov (\"esi\",\"edx\");",
          "146:  &bt (\"ecx\",27);  # check OSXSAVE bit",
          "",
          "[Added Lines]",
          "133:  &mov (\"esi\",\"edx\");  # %ebp:%esi is copy of %ecx:%edx",
          "136:  &cmp (\"edi\",7);",
          "137:  &mov (\"edi\",&wparam(0));",
          "138:  &jb (&label(\"no_extended_info\"));",
          "139:  &mov (\"eax\",7);",
          "140:  &xor (\"ecx\",\"ecx\");",
          "141:  &cpuid ();",
          "142:  &mov (&DWP(8,\"edi\"),\"ebx\"); # save extended feature flag",
          "143: &set_label(\"no_extended_info\");",
          "145:  &bt (\"ebp\",27);  # check OSXSAVE bit",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "157:  &and (\"esi\",0xfeffffff); # clear FXSR",
          "158: &set_label(\"clear_avx\");",
          "159:  &and (\"ebp\",0xefffe7ff); # clear AVX, FMA and AMD XOP bits",
          "161:  &and (&DWP(8,\"edi\"),0xffffffdf); # clear AVX2",
          "162: &set_label(\"done\");",
          "163:  &mov (\"eax\",\"esi\");",
          "",
          "[Removed Lines]",
          "160:  &mov (\"edi\",&wparam(0));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "45789c2819e1cb93150061ddaa95fe97da2c0cba",
      "candidate_info": {
        "commit_hash": "45789c2819e1cb93150061ddaa95fe97da2c0cba",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/45789c2819e1cb93150061ddaa95fe97da2c0cba",
        "files": [
          "apps/ca.c"
        ],
        "message": "Fix use before assignment\n\n it was getting the SerialNumber of a previous cert.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2272)\n(cherry picked from commit 0db1fb3fc13c4b1a2b916efbb374f40579b1398f)",
        "before_after_code_files": [
          "apps/ca.c||apps/ca.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/ca.c||apps/ca.c": [
          "File: apps/ca.c -> apps/ca.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "983:             BIO_printf(bio_err, \"writing new certificates\\n\");",
          "984:         for (i = 0; i < sk_X509_num(cert_sk); i++) {",
          "985:             BIO *Cout = NULL;",
          "987:             int k;",
          "988:             char *n;",
          "992:             j = ASN1_STRING_length(serialNumber);",
          "993:             p = (const char *)ASN1_STRING_get0_data(serialNumber);",
          "",
          "[Removed Lines]",
          "986:             ASN1_INTEGER *serialNumber = X509_get_serialNumber(x);",
          "990:             x = sk_X509_value(cert_sk, i);",
          "",
          "[Added Lines]",
          "986:             X509 *xi = sk_X509_value(cert_sk, i);",
          "987:             ASN1_INTEGER *serialNumber = X509_get_serialNumber(xi);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1030:                 perror(buf[2]);",
          "1031:                 goto end;",
          "1032:             }",
          "1035:             BIO_free_all(Cout);",
          "1036:         }",
          "",
          "[Removed Lines]",
          "1033:             write_new_certificate(Cout, x, 0, notext);",
          "1034:             write_new_certificate(Sout, x, output_der, notext);",
          "",
          "[Added Lines]",
          "1032:             write_new_certificate(Cout, xi, 0, notext);",
          "1033:             write_new_certificate(Sout, xi, output_der, notext);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "afe2f42bfc72017a075c21b3695feeba6db27305",
      "candidate_info": {
        "commit_hash": "afe2f42bfc72017a075c21b3695feeba6db27305",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/afe2f42bfc72017a075c21b3695feeba6db27305",
        "files": [
          "engines/afalg/e_afalg.c",
          "engines/afalg/e_afalg.h"
        ],
        "message": "e_afalg.[ch]: fix --strict-warnings with gcc 4.x and 32-bit build.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(cherry picked from commit c27778d8adf7fca3128ece0b7efca09f628008b9)",
        "before_after_code_files": [
          "engines/afalg/e_afalg.c||engines/afalg/e_afalg.c",
          "engines/afalg/e_afalg.h||engines/afalg/e_afalg.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "engines/afalg/e_afalg.c||engines/afalg/e_afalg.c": [
          "File: engines/afalg/e_afalg.c -> engines/afalg/e_afalg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "236:     memset(cb, '\\0', sizeof(*cb));",
          "237:     cb->aio_fildes = sfd;",
          "238:     cb->aio_lio_opcode = IOCB_CMD_PREAD;",
          "248:     cb->aio_offset = 0;",
          "249:     cb->aio_data = 0;",
          "250:     cb->aio_nbytes = len;",
          "",
          "[Removed Lines]",
          "239:     if (sizeof(buf) != sizeof(cb->aio_buf)) {",
          "244:         cb->aio_buf = (uint64_t)(unsigned long)buf;",
          "245:     } else {",
          "246:         cb->aio_buf = (uint64_t)buf;",
          "247:     }",
          "",
          "[Added Lines]",
          "243:     cb->aio_buf = (size_t)buf;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "364:                                 const char *ciphername)",
          "365: {",
          "366:     struct sockaddr_alg sa;",
          "368:     actx->bfd = actx->sfd = -1;",
          "371:     memset(&sa, 0, sizeof(sa));",
          "372:     sa.salg_family = AF_ALG;",
          "",
          "[Removed Lines]",
          "369:     int r = -1;",
          "",
          "[Added Lines]",
          "363:     int r = -1;",
          "",
          "---------------"
        ],
        "engines/afalg/e_afalg.h||engines/afalg/e_afalg.h": [
          "File: engines/afalg/e_afalg.h -> engines/afalg/e_afalg.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #ifndef HEADER_AFALG_H",
          "11: # define HEADER_AFALG_H",
          "13: # ifdef ALG_DEBUG",
          "14: #  define ALG_DGB(x, ...) fprintf(stderr, \"ALG_DBG: \" x, __VA_ARGS__)",
          "15: #  define ALG_INFO(x, ...) fprintf(stderr, \"ALG_INFO: \" x, __VA_ARGS__)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: # if defined(__GNUC__) && __GNUC__ >= 4 && \\",
          "14:      (!defined(__STDC_VERSION__) || __STDC_VERSION__ < 199901L)",
          "15: #  pragma GCC diagnostic ignored \"-Wvariadic-macros\"",
          "16: # endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}