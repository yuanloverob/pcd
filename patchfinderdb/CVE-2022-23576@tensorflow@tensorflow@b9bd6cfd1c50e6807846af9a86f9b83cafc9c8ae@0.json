{
  "cve_id": "CVE-2022-23576",
  "cve_desc": "Tensorflow is an Open Source Machine Learning Framework. The implementation of `OpLevelCostEstimator::CalculateOutputSize` is vulnerable to an integer overflow if an attacker can create an operation which would involve tensors with large enough number of elements. We can have a large enough number of dimensions in `output_shape.dim()` or just a small number of dimensions being large enough to cause an overflow in the multiplication. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "b9bd6cfd1c50e6807846af9a86f9b83cafc9c8ae",
  "patch_info": {
    "commit_hash": "b9bd6cfd1c50e6807846af9a86f9b83cafc9c8ae",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/b9bd6cfd1c50e6807846af9a86f9b83cafc9c8ae",
    "files": [
      "tensorflow/core/grappler/costs/BUILD",
      "tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
    ],
    "message": "Prevent integer overflow in `OpLevelCostEstimator::CalculateOutputSize`.\n\nIn order to not change the API, we return a negative value in case of overflow. A better fix is to change the API to return a status instead.\n\nPiperOrigin-RevId: 408701427\nChange-Id: Idf31e7f0bf18ca824d084fdd355e1f653f145c20",
    "before_after_code_files": [
      "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc": [
      "File: tensorflow/core/grappler/costs/op_level_cost_estimator.cc -> tensorflow/core/grappler/costs/op_level_cost_estimator.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"tensorflow/core/grappler/costs/op_context.h\"",
      "28: #include \"tensorflow/core/grappler/costs/utils.h\"",
      "29: #include \"tensorflow/core/platform/errors.h\"",
      "31: namespace tensorflow {",
      "32: namespace grappler {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "30: #include \"tensorflow/core/util/overflow.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1607:     auto output_shape = MaybeGetMinimumShape(original_output_shape, num_dims,",
      "1608:                                              found_unknown_shapes);",
      "1609:     for (const auto& dim : output_shape.dim()) {",
      "1611:     }",
      "1612:     total_output_size += output_size;",
      "1613:     VLOG(1) << \"Output Size: \" << output_size",
      "",
      "[Removed Lines]",
      "1610:       output_size *= dim.size();",
      "",
      "[Added Lines]",
      "1611:       int64_t new_output_size =",
      "1612:           MultiplyWithoutOverflow(output_size, dim.size());",
      "1613:       if (new_output_size < 0) {",
      "1614:         VLOG(1) << \"Overflow encountered when estimating cost, multiplying \"",
      "1615:                 << output_size << \" with \" << dim.size();",
      "1616:         return -1;",
      "1617:       }",
      "1618:       output_size = new_output_size;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "446ec87bc7bd773643cf7359f25cd9b003d6f9cb",
      "candidate_info": {
        "commit_hash": "446ec87bc7bd773643cf7359f25cd9b003d6f9cb",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/446ec87bc7bd773643cf7359f25cd9b003d6f9cb",
        "files": [
          "tensorflow/core/grappler/costs/BUILD",
          "tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
        ],
        "message": "Prevent integer overflow in `OpLevelCostEstimator::CalculateOutputSize`.\n\nIn order to not change the API, we return a negative value in case of overflow. A better fix is to change the API to return a status instead.\n\nPiperOrigin-RevId: 408701427\nChange-Id: Idf31e7f0bf18ca824d084fdd355e1f653f145c20",
        "before_after_code_files": [
          "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
          ],
          "candidate": [
            "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc": [
          "File: tensorflow/core/grappler/costs/op_level_cost_estimator.cc -> tensorflow/core/grappler/costs/op_level_cost_estimator.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"tensorflow/core/grappler/costs/op_context.h\"",
          "28: #include \"tensorflow/core/grappler/costs/utils.h\"",
          "29: #include \"tensorflow/core/platform/errors.h\"",
          "31: namespace tensorflow {",
          "32: namespace grappler {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: #include \"tensorflow/core/util/overflow.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1607:     auto output_shape = MaybeGetMinimumShape(original_output_shape, num_dims,",
          "1608:                                              found_unknown_shapes);",
          "1609:     for (const auto& dim : output_shape.dim()) {",
          "1611:     }",
          "1612:     total_output_size += output_size;",
          "1613:     VLOG(1) << \"Output Size: \" << output_size",
          "",
          "[Removed Lines]",
          "1610:       output_size *= dim.size();",
          "",
          "[Added Lines]",
          "1611:       int64_t new_output_size =",
          "1612:           MultiplyWithoutOverflow(output_size, dim.size());",
          "1613:       if (new_output_size < 0) {",
          "1614:         VLOG(1) << \"Overflow encountered when estimating cost, multiplying \"",
          "1615:                 << output_size << \" with \" << dim.size();",
          "1616:         return -1;",
          "1617:       }",
          "1618:       output_size = new_output_size;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dee46f8838f84dee3f276610b92602fd60213cc1",
      "candidate_info": {
        "commit_hash": "dee46f8838f84dee3f276610b92602fd60213cc1",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/dee46f8838f84dee3f276610b92602fd60213cc1",
        "files": [
          "tensorflow/core/grappler/costs/BUILD",
          "tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
        ],
        "message": "Prevent integer overflow in `OpLevelCostEstimator::CalculateOutputSize`.\n\nIn order to not change the API, we return a negative value in case of overflow. A better fix is to change the API to return a status instead.\n\nPiperOrigin-RevId: 408701427\nChange-Id: Idf31e7f0bf18ca824d084fdd355e1f653f145c20",
        "before_after_code_files": [
          "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
          ],
          "candidate": [
            "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc": [
          "File: tensorflow/core/grappler/costs/op_level_cost_estimator.cc -> tensorflow/core/grappler/costs/op_level_cost_estimator.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"tensorflow/core/grappler/costs/op_context.h\"",
          "28: #include \"tensorflow/core/grappler/costs/utils.h\"",
          "29: #include \"tensorflow/core/platform/errors.h\"",
          "31: namespace tensorflow {",
          "32: namespace grappler {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: #include \"tensorflow/core/util/overflow.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1598:     auto output_shape = MaybeGetMinimumShape(original_output_shape, num_dims,",
          "1599:                                              found_unknown_shapes);",
          "1600:     for (const auto& dim : output_shape.dim()) {",
          "1602:     }",
          "1603:     total_output_size += output_size;",
          "1604:     VLOG(1) << \"Output Size: \" << output_size",
          "",
          "[Removed Lines]",
          "1601:       output_size *= dim.size();",
          "",
          "[Added Lines]",
          "1602:       int64_t new_output_size =",
          "1603:           MultiplyWithoutOverflow(output_size, dim.size());",
          "1604:       if (new_output_size < 0) {",
          "1605:         VLOG(1) << \"Overflow encountered when estimating cost, multiplying \"",
          "1606:                 << output_size << \" with \" << dim.size();",
          "1607:         return -1;",
          "1608:       }",
          "1609:       output_size = new_output_size;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9cc8c79b3c53a418b88a2f5524c2f39c6d99766a",
      "candidate_info": {
        "commit_hash": "9cc8c79b3c53a418b88a2f5524c2f39c6d99766a",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/9cc8c79b3c53a418b88a2f5524c2f39c6d99766a",
        "files": [
          "tensorflow/core/grappler/costs/BUILD",
          "tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
        ],
        "message": "Prevent integer overflow in `OpLevelCostEstimator::CalculateOutputSize`.\n\nIn order to not change the API, we return a negative value in case of overflow. A better fix is to change the API to return a status instead.\n\nPiperOrigin-RevId: 408701427\nChange-Id: Idf31e7f0bf18ca824d084fdd355e1f653f145c20",
        "before_after_code_files": [
          "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
          ],
          "candidate": [
            "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/grappler/costs/op_level_cost_estimator.cc||tensorflow/core/grappler/costs/op_level_cost_estimator.cc": [
          "File: tensorflow/core/grappler/costs/op_level_cost_estimator.cc -> tensorflow/core/grappler/costs/op_level_cost_estimator.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"tensorflow/core/grappler/costs/op_context.h\"",
          "28: #include \"tensorflow/core/grappler/costs/utils.h\"",
          "29: #include \"tensorflow/core/platform/errors.h\"",
          "31: namespace tensorflow {",
          "32: namespace grappler {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: #include \"tensorflow/core/util/overflow.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1607:     auto output_shape = MaybeGetMinimumShape(original_output_shape, num_dims,",
          "1608:                                              found_unknown_shapes);",
          "1609:     for (const auto& dim : output_shape.dim()) {",
          "1611:     }",
          "1612:     total_output_size += output_size;",
          "1613:     VLOG(1) << \"Output Size: \" << output_size",
          "",
          "[Removed Lines]",
          "1610:       output_size *= dim.size();",
          "",
          "[Added Lines]",
          "1611:       int64_t new_output_size =",
          "1612:           MultiplyWithoutOverflow(output_size, dim.size());",
          "1613:       if (new_output_size < 0) {",
          "1614:         VLOG(1) << \"Overflow encountered when estimating cost, multiplying \"",
          "1615:                 << output_size << \" with \" << dim.size();",
          "1616:         return -1;",
          "1617:       }",
          "1618:       output_size = new_output_size;",
          "",
          "---------------"
        ]
      }
    }
  ]
}