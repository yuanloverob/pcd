{
  "cve_id": "CVE-2020-13397",
  "cve_desc": "An issue was discovered in FreeRDP before 2.1.1. An out-of-bounds (OOB) read vulnerability has been detected in security_fips_decrypt in libfreerdp/core/security.c due to an uninitialized value.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "d6cd14059b257318f176c0ba3ee0a348826a9ef8",
  "patch_info": {
    "commit_hash": "d6cd14059b257318f176c0ba3ee0a348826a9ef8",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/d6cd14059b257318f176c0ba3ee0a348826a9ef8",
    "files": [
      "libfreerdp/core/security.c"
    ],
    "message": "Fixed GHSL-2020-101 missing NULL check\n\n(cherry picked from commit b207dbba35c505bbc3ad5aadc10b34980c6b7e8e)",
    "before_after_code_files": [
      "libfreerdp/core/security.c||libfreerdp/core/security.c"
    ]
  },
  "patch_diff": {
    "libfreerdp/core/security.c||libfreerdp/core/security.c": [
      "File: libfreerdp/core/security.c -> libfreerdp/core/security.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "816: {",
      "817:  size_t olen;",
      "819:  if (!winpr_Cipher_Update(rdp->fips_decrypt, data, length, data, &olen))",
      "820:   return FALSE;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "819:  if (!rdp || !rdp->fips_decrypt)",
      "820:   return FALSE;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0f89e23542c6218c89c80f090f4438d02ebc5b39",
      "candidate_info": {
        "commit_hash": "0f89e23542c6218c89c80f090f4438d02ebc5b39",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/0f89e23542c6218c89c80f090f4438d02ebc5b39",
        "files": [
          "libfreerdp/crypto/crypto.c"
        ],
        "message": "Fixed #6148: multiple ceritificate purposes\n\nOpenSSL certificate verification can only check a single purpose.\nRun the checks with all allowed purposes and accept any.\n\n(cherry picked from commit f3063a589d908a087a295b9217bc5fa34a80fb36)",
        "before_after_code_files": [
          "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/crypto/crypto.c||libfreerdp/crypto/crypto.c": [
          "File: libfreerdp/crypto/crypto.c -> libfreerdp/crypto/crypto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "798: BOOL x509_verify_certificate(CryptoCert cert, const char* certificate_store_path)",
          "799: {",
          "800:  X509_STORE_CTX* csc;",
          "801:  BOOL status = FALSE;",
          "802:  X509_STORE* cert_ctx = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "800:  size_t i;",
          "801:  const int purposes[3] = { X509_PURPOSE_SSL_SERVER, X509_PURPOSE_SSL_CLIENT, X509_PURPOSE_ANY };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "831:   X509_LOOKUP_add_dir(lookup, certificate_store_path, X509_FILETYPE_PEM);",
          "832:  }",
          "839:  X509_STORE_set_flags(cert_ctx, 0);",
          "851:  X509_STORE_free(cert_ctx);",
          "852: end:",
          "853:  return status;",
          "",
          "[Removed Lines]",
          "834:  csc = X509_STORE_CTX_new();",
          "836:  if (csc == NULL)",
          "837:   goto end;",
          "841:  if (!X509_STORE_CTX_init(csc, cert_ctx, cert->px509, cert->px509chain))",
          "842:   goto end;",
          "844:  X509_STORE_CTX_set_purpose(csc, X509_PURPOSE_ANY);",
          "845:  X509_STORE_CTX_set_verify_cb(csc, verify_cb);",
          "847:  if (X509_verify_cert(csc) == 1)",
          "848:   status = TRUE;",
          "850:  X509_STORE_CTX_free(csc);",
          "",
          "[Added Lines]",
          "838:  for (i = 0; i < ARRAYSIZE(purposes); i++)",
          "839:  {",
          "840:   int rc = -1;",
          "841:   int purpose = purposes[i];",
          "842:   csc = X509_STORE_CTX_new();",
          "844:   if (csc == NULL)",
          "845:    goto skip;",
          "846:   if (!X509_STORE_CTX_init(csc, cert_ctx, cert->px509, cert->px509chain))",
          "847:    goto skip;",
          "849:   X509_STORE_CTX_set_purpose(csc, purpose);",
          "850:   X509_STORE_CTX_set_verify_cb(csc, verify_cb);",
          "852:   rc = X509_verify_cert(csc);",
          "853:  skip:",
          "854:   X509_STORE_CTX_free(csc);",
          "855:   if (rc == 1)",
          "856:   {",
          "857:    status = TRUE;",
          "858:    break;",
          "859:   }",
          "860:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dd156de828049b7673fdeb9c261f915cc5bb563c",
      "candidate_info": {
        "commit_hash": "dd156de828049b7673fdeb9c261f915cc5bb563c",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/dd156de828049b7673fdeb9c261f915cc5bb563c",
        "files": [
          "client/X11/xf_client.c",
          "client/X11/xfreerdp.h"
        ],
        "message": "Fixed NULL access of context struct on screen draw\n\nAdded a log message to fix occurances later on.\n\n(cherry picked from commit cfea3fc6ed01aa33c1a935da42572577ba832feb)",
        "before_after_code_files": [
          "client/X11/xf_client.c||client/X11/xf_client.c",
          "client/X11/xfreerdp.h||client/X11/xfreerdp.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "client/X11/xf_client.c||client/X11/xf_client.c": [
          "File: client/X11/xf_client.c -> client/X11/xf_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "223: }",
          "227: {",
          "228:  if (w == 0 || h == 0)",
          "229:  {",
          "230:   WLog_WARN(TAG, \"invalid width and/or height specified: w=%d h=%d\", w, h);",
          "",
          "[Removed Lines]",
          "226: void xf_draw_screen(xfContext* xfc, int x, int y, int w, int h)",
          "",
          "[Added Lines]",
          "226: void xf_draw_screen_(xfContext* xfc, int x, int y, int w, int h, const char* fkt, const char* file,",
          "227:                      int line)",
          "229:  if (!xfc)",
          "230:  {",
          "231:   WLog_DBG(TAG, \"[%s] called from [%s] xfc=%p\", __FUNCTION__, fkt, xfc);",
          "232:   return;",
          "233:  }",
          "",
          "---------------"
        ],
        "client/X11/xfreerdp.h||client/X11/xfreerdp.h": [
          "File: client/X11/xfreerdp.h -> client/X11/xfreerdp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "307: void xf_unlock_x11_(xfContext* xfc, const char* fkt);",
          "309: BOOL xf_picture_transform_required(xfContext* xfc);",
          "312: FREERDP_API DWORD xf_exit_code_from_disconnect_reason(DWORD reason);",
          "",
          "[Removed Lines]",
          "310: void xf_draw_screen(xfContext* xfc, int x, int y, int w, int h);",
          "",
          "[Added Lines]",
          "311: #define xf_draw_screen(_xfc, _x, _y, _w, _h) \\",
          "312:  xf_draw_screen_((_xfc), (_x), (_y), (_w), (_h), __FUNCTION__, __FILE__, __LINE__)",
          "313: void xf_draw_screen_(xfContext* xfc, int x, int y, int w, int h, const char* fkt, const char* file,",
          "314:                      int line);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "819aa2a1645be3a28857023cf167f23f8a5e6038",
      "candidate_info": {
        "commit_hash": "819aa2a1645be3a28857023cf167f23f8a5e6038",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/819aa2a1645be3a28857023cf167f23f8a5e6038",
        "files": [
          "winpr/libwinpr/sspi/sspi_winpr.c"
        ],
        "message": "Fixed BehaviorSanitizer warnings\n\n(cherry picked from commit 0d28390319025c86e7e9d7cc776d88ef24f9db0e)",
        "before_after_code_files": [
          "winpr/libwinpr/sspi/sspi_winpr.c||winpr/libwinpr/sspi/sspi_winpr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/sspi/sspi_winpr.c||winpr/libwinpr/sspi/sspi_winpr.c": [
          "File: winpr/libwinpr/sspi/sspi_winpr.c -> winpr/libwinpr/sspi/sspi_winpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "241:   passwordLength *= 2;",
          "242:  }",
          "247:  free(credentials->identity.User);",
          "248:  free(credentials->identity.Domain);",
          "249:  free(credentials->identity.Password);",
          "",
          "[Removed Lines]",
          "244:  memset(credentials->identity.User, 0, userLength);",
          "245:  memset(credentials->identity.Domain, 0, domainLength);",
          "246:  memset(credentials->identity.Password, 0, passwordLength);",
          "",
          "[Added Lines]",
          "244:  if (credentials->identity.User)",
          "245:   memset(credentials->identity.User, 0, userLength);",
          "246:  if (credentials->identity.Domain)",
          "247:   memset(credentials->identity.Domain, 0, domainLength);",
          "248:  if (credentials->identity.Password)",
          "249:   memset(credentials->identity.Password, 0, passwordLength);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2e28385fbb5efd52dcad58e4acb623f1bd94a640",
      "candidate_info": {
        "commit_hash": "2e28385fbb5efd52dcad58e4acb623f1bd94a640",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/2e28385fbb5efd52dcad58e4acb623f1bd94a640",
        "files": [
          "libfreerdp/codec/mppc.c"
        ],
        "message": "Fixed history buffer reset.\n\n(cherry picked from commit ccc9cbef2d5d0d9f5cf5ec7621f71bed33f41aba)",
        "before_after_code_files": [
          "libfreerdp/codec/mppc.c||libfreerdp/codec/mppc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/codec/mppc.c||libfreerdp/codec/mppc.c": [
          "File: libfreerdp/codec/mppc.c -> libfreerdp/codec/mppc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "772:  ZeroMemory(&(mppc->MatchBuffer), sizeof(mppc->MatchBuffer));",
          "774:  if (flush)",
          "775:   mppc->HistoryOffset = mppc->HistoryBufferSize + 1;",
          "776:  else",
          "777:   mppc->HistoryOffset = 0;",
          "779:  mppc->HistoryPtr = &(mppc->HistoryBuffer[mppc->HistoryOffset]);",
          "780: }",
          "782: MPPC_CONTEXT* mppc_context_new(DWORD CompressionLevel, BOOL Compressor)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "775:  {",
          "777:   mppc->HistoryPtr = mppc->HistoryBuffer;",
          "778:  }",
          "780:  {",
          "783:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5e8f883e7cdc09353c62d294e95e1b720f6ca944",
      "candidate_info": {
        "commit_hash": "5e8f883e7cdc09353c62d294e95e1b720f6ca944",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/5e8f883e7cdc09353c62d294e95e1b720f6ca944",
        "files": [
          "server/proxy/pf_client.c"
        ],
        "message": "server: proxy: use peer load balance info when host is fetched from config\n\n(cherry picked from commit 6f4682a043d20b794540827fe8604354477bb7af)",
        "before_after_code_files": [
          "server/proxy/pf_client.c||server/proxy/pf_client.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "server/proxy/pf_client.c||server/proxy/pf_client.c": [
          "File: server/proxy/pf_client.c -> server/proxy/pf_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:  freerdp_send_error_info(ps->context.rdp);",
          "73: }",
          "76: {",
          "77:  rdpContext* context = (rdpContext*)pc;",
          "78:  pServerContext* ps = pc->pdata->ps;",
          "",
          "[Removed Lines]",
          "75: static BOOL pf_client_load_rdpsnd(pClientContext* pc, proxyConfig* config)",
          "",
          "[Added Lines]",
          "75: static BOOL pf_client_load_rdpsnd(pClientContext* pc)",
          "79:  proxyConfig* config = pc->pdata->config;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:  return TRUE;",
          "99: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102: static BOOL pf_client_passthrough_channels_init(pClientContext* pc)",
          "103: {",
          "104:  pServerContext* ps = pc->pdata->ps;",
          "105:  rdpSettings* settings = pc->context.settings;",
          "106:  proxyConfig* config = pc->pdata->config;",
          "107:  size_t i;",
          "109:  if (settings->ChannelCount + config->PassthroughCount >= settings->ChannelDefArraySize)",
          "110:  {",
          "111:   LOG_ERR(TAG, pc, \"too many channels\");",
          "112:   return FALSE;",
          "113:  }",
          "115:  for (i = 0; i < config->PassthroughCount; i++)",
          "116:  {",
          "117:   const char* channel_name = config->Passthrough[i];",
          "118:   CHANNEL_DEF channel = { 0 };",
          "121:   if (!WTSVirtualChannelManagerIsChannelJoined(ps->vcm, channel_name))",
          "122:   {",
          "123:    LOG_INFO(TAG, ps, \"client did not connected with channel %s, skipping passthrough\",",
          "124:             channel_name);",
          "126:    continue;",
          "127:   }",
          "130:   strncpy(channel.name, channel_name, CHANNEL_NAME_LEN);",
          "132:   settings->ChannelDefArray[settings->ChannelCount++] = channel;",
          "133:  }",
          "135:  return TRUE;",
          "136: }",
          "138: static BOOL pf_client_use_peer_load_balance_info(pClientContext* pc)",
          "139: {",
          "140:  pServerContext* ps = pc->pdata->ps;",
          "141:  rdpSettings* settings = pc->context.settings;",
          "142:  DWORD lb_info_len;",
          "143:  const char* lb_info = freerdp_nego_get_routing_token(&ps->context, &lb_info_len);",
          "144:  if (!lb_info)",
          "145:   return TRUE;",
          "147:  free(settings->LoadBalanceInfo);",
          "149:  settings->LoadBalanceInfoLength = lb_info_len;",
          "150:  settings->LoadBalanceInfo = malloc(settings->LoadBalanceInfoLength);",
          "152:  if (!settings->LoadBalanceInfo)",
          "153:   return FALSE;",
          "155:  CopyMemory(settings->LoadBalanceInfo, lb_info, settings->LoadBalanceInfoLength);",
          "156:  return TRUE;",
          "157: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144:  PubSub_SubscribeChannelDisconnected(instance->context->pubSub,",
          "145:                                      pf_channels_on_client_channel_disconnect);",
          "146:  PubSub_SubscribeErrorInfo(instance->context->pubSub, pf_client_on_error_info);",
          "152:  LOG_INFO(TAG, pc, \"Loading addins\");",
          "154:  {",
          "161:    return FALSE;",
          "183:  }",
          "186:  {",
          "187:   LOG_ERR(TAG, pc, \"Failed to load rdpsnd client\");",
          "188:   return FALSE;",
          "",
          "[Removed Lines]",
          "156:   size_t i;",
          "158:   if (settings->ChannelCount + config->PassthroughCount >= settings->ChannelDefArraySize)",
          "159:   {",
          "160:    LOG_ERR(TAG, pc, \"too many channels\");",
          "162:   }",
          "164:   for (i = 0; i < config->PassthroughCount; i++)",
          "165:   {",
          "166:    const char* channel_name = config->Passthrough[i];",
          "167:    CHANNEL_DEF channel = { 0 };",
          "170:    if (!WTSVirtualChannelManagerIsChannelJoined(ps->vcm, channel_name))",
          "171:    {",
          "172:     LOG_INFO(TAG, ps, \"client did not connected with channel %s, skipping passthrough\",",
          "173:              channel_name);",
          "175:     continue;",
          "176:    }",
          "179:    strncpy(channel.name, channel_name, CHANNEL_NAME_LEN);",
          "181:    settings->ChannelDefArray[settings->ChannelCount++] = channel;",
          "182:   }",
          "185:  if (!pf_client_load_rdpsnd(pc, config))",
          "",
          "[Added Lines]",
          "212:  if (!config->UseLoadBalanceInfo)",
          "218:   if (!pf_client_use_peer_load_balance_info(pc))",
          "222:  if (!pf_client_passthrough_channels_init(pc))",
          "223:   return FALSE;",
          "225:  if (!pf_client_load_rdpsnd(pc))",
          "",
          "---------------"
        ]
      }
    }
  ]
}