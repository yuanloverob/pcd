{
  "cve_id": "CVE-2021-4136",
  "cve_desc": "vim is vulnerable to Heap-based Buffer Overflow",
  "repo": "vim/vim",
  "patch_hash": "605ec91e5a7330d61be313637e495fa02a6dc264",
  "patch_info": {
    "commit_hash": "605ec91e5a7330d61be313637e495fa02a6dc264",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/605ec91e5a7330d61be313637e495fa02a6dc264",
    "files": [
      "src/eval.c",
      "src/testdir/test_lambda.vim",
      "src/version.c"
    ],
    "message": "patch 8.2.3847: illegal memory access when using a lambda with an error\n\nProblem:    Illegal memory access when using a lambda with an error.\nSolution:   Avoid skipping over the NUL after a string.",
    "before_after_code_files": [
      "src/eval.c||src/eval.c",
      "src/testdir/test_lambda.vim||src/testdir/test_lambda.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/eval.c||src/eval.c": [
      "File: src/eval.c -> src/eval.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3871:  ++*arg;",
      "3872:  ret = eval1(arg, rettv, evalarg);",
      "3875:  {",
      "3876:      emsg(_(e_missing_closing_paren));",
      "3877:      ret = FAIL;",
      "3878:  }",
      "3880:     }",
      "3881:     if (ret != OK)",
      "3882:  return FAIL;",
      "",
      "[Removed Lines]",
      "3874:  if (**arg != ')')",
      "3879:  ++*arg;",
      "",
      "[Added Lines]",
      "3874:  if (**arg == ')')",
      "3875:  {",
      "3876:      ++*arg;",
      "3877:  }",
      "3878:  else",
      "",
      "---------------"
    ],
    "src/testdir/test_lambda.vim||src/testdir/test_lambda.vim": [
      "File: src/testdir/test_lambda.vim -> src/testdir/test_lambda.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "64:   call assert_fails('echo {a, a -> a + a}(1, 2)', 'E853:')",
      "65:   call assert_fails('echo {a, b -> a + b)}(1, 2)', 'E451:')",
      "66:   echo assert_fails('echo 10->{a -> a + 2}', 'E107:')",
      "67: endfunc",
      "69: func Test_not_lamda()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "68:   call assert_fails('eval 0->(', \"E110: Missing ')'\")",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "750: static int included_patches[] =",
      "753:     3846,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "753:     3847,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8b91e71441069b1dde9ac9ff9d9a829b1b4aecca",
      "candidate_info": {
        "commit_hash": "8b91e71441069b1dde9ac9ff9d9a829b1b4aecca",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/8b91e71441069b1dde9ac9ff9d9a829b1b4aecca",
        "files": [
          "src/errors.h",
          "src/eval.c",
          "src/testdir/test_lambda.vim",
          "src/version.c"
        ],
        "message": "patch 8.2.4774: crash when using a number for lambda name\n\nProblem:    Crash when using a number for lambda name.\nSolution:   Check the type of the lambda reference.",
        "before_after_code_files": [
          "src/errors.h||src/errors.h",
          "src/eval.c||src/eval.c",
          "src/testdir/test_lambda.vim||src/testdir/test_lambda.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/eval.c||src/eval.c",
            "src/testdir/test_lambda.vim||src/testdir/test_lambda.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/eval.c||src/eval.c",
            "src/testdir/test_lambda.vim||src/testdir/test_lambda.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/errors.h||src/errors.h": [
          "File: src/errors.h -> src/errors.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3259:  INIT(= N_(\"E1273: (NFA regexp) missing value in '\\\\%%%c'\"));",
          "3260: EXTERN char e_no_script_file_name_to_substitute_for_script[]",
          "3261:  INIT(= N_(\"E1274: No script file name to substitute for \\\"<script>\\\"\"));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3262: #ifdef FEAT_EVAL",
          "3263: EXTERN char e_string_or_function_required_for_arrow_parens_expr[]",
          "3264:  INIT(= N_(\"E1275: String or function required for ->(expr)\"));",
          "3265: #endif",
          "",
          "---------------"
        ],
        "src/eval.c||src/eval.c": [
          "File: src/eval.c -> src/eval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4102:  ++*arg;",
          "4103:  ret = eval1(arg, rettv, evalarg);",
          "4106:  {",
          "4108:  }",
          "4110:  {",
          "4113:  }",
          "4114:     }",
          "4115:     if (ret != OK)",
          "4116:  return FAIL;",
          "4118:     {",
          "4119:  if (verbose)",
          "4120:  {",
          "",
          "[Removed Lines]",
          "4105:  if (**arg == ')')",
          "4107:      ++*arg;",
          "4109:  else",
          "4111:      emsg(_(e_missing_closing_paren));",
          "4112:      ret = FAIL;",
          "4117:     else if (**arg != '(')",
          "",
          "[Added Lines]",
          "4105:  if (**arg != ')')",
          "4107:      emsg(_(e_missing_closing_paren));",
          "4108:      return FAIL;",
          "4110:  if (rettv->v_type != VAR_STRING && rettv->v_type != VAR_FUNC",
          "4111:             && rettv->v_type != VAR_PARTIAL)",
          "4113:      emsg(_(e_string_or_function_required_for_arrow_parens_expr));",
          "4114:      return FAIL;",
          "4116:  ++*arg;",
          "4121:     if (**arg != '(')",
          "",
          "---------------"
        ],
        "src/testdir/test_lambda.vim||src/testdir/test_lambda.vim": [
          "File: src/testdir/test_lambda.vim -> src/testdir/test_lambda.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:   echo assert_fails('echo 10->{a -> a + 2}', 'E107:')",
          "68:   call assert_fails('eval 0->(', \"E110: Missing ')'\")",
          "69: endfunc",
          "71: func Test_not_lamda()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:   call assert_fails('eval 0->(3)()', \"E1275:\")",
          "70:   call assert_fails('eval 0->([3])()', \"E1275:\")",
          "71:   call assert_fails('eval 0->({\"a\": 3})()', \"E1275:\")",
          "72:   call assert_fails('eval 0->(xxx)()', \"E121:\")",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "747: static int included_patches[] =",
          "750:     4773,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "750:     4774,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2949cfdbe4335b9abcfeda1be4dfc52090ee1df6",
      "candidate_info": {
        "commit_hash": "2949cfdbe4335b9abcfeda1be4dfc52090ee1df6",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/2949cfdbe4335b9abcfeda1be4dfc52090ee1df6",
        "files": [
          "src/eval.c",
          "src/testdir/test_vim9_assign.vim",
          "src/testdir/test_vim9_builtin.vim",
          "src/testdir/test_vim9_cmd.vim",
          "src/testdir/test_vim9_disassemble.vim",
          "src/testdir/test_vim9_expr.vim",
          "src/testdir/test_vim9_func.vim",
          "src/testdir/test_vim9_script.vim",
          "src/version.c",
          "src/vim9compile.c"
        ],
        "message": "patch 8.2.2257: Vim9: using -> for lambda is ambiguous\n\nProblem:    Vim9: using -> for lambda is ambiguous.\nSolution:   Stop supporting ->, must use =>.",
        "before_after_code_files": [
          "src/eval.c||src/eval.c",
          "src/testdir/test_vim9_assign.vim||src/testdir/test_vim9_assign.vim",
          "src/testdir/test_vim9_builtin.vim||src/testdir/test_vim9_builtin.vim",
          "src/testdir/test_vim9_cmd.vim||src/testdir/test_vim9_cmd.vim",
          "src/testdir/test_vim9_disassemble.vim||src/testdir/test_vim9_disassemble.vim",
          "src/testdir/test_vim9_expr.vim||src/testdir/test_vim9_expr.vim",
          "src/testdir/test_vim9_func.vim||src/testdir/test_vim9_func.vim",
          "src/testdir/test_vim9_script.vim||src/testdir/test_vim9_script.vim",
          "src/version.c||src/version.c",
          "src/vim9compile.c||src/vim9compile.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/eval.c||src/eval.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/eval.c||src/eval.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/eval.c||src/eval.c": [
          "File: src/eval.c -> src/eval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3320:   if (ret == NOTDONE)",
          "3321:       ret = eval_dict(arg, rettv, evalarg, FALSE);",
          "3322:   break;",
          "",
          "[Removed Lines]",
          "3319:     case '{': ret = get_lambda_tv(arg, rettv, in_vim9script(), evalarg);",
          "",
          "[Added Lines]",
          "3319:     case '{': if (in_vim9script())",
          "3320:       ret = NOTDONE;",
          "3321:   else",
          "3322:       ret = get_lambda_tv(arg, rettv, in_vim9script(), evalarg);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3618:     rettv->v_type = VAR_UNKNOWN;",
          "3621:     if (ret != OK)",
          "3622:  return FAIL;",
          "3623:     else if (**arg != '(')",
          "",
          "[Removed Lines]",
          "3620:     ret = get_lambda_tv(arg, rettv, FALSE, evalarg);",
          "",
          "[Added Lines]",
          "3623:     if (**arg == '{')",
          "3624:     {",
          "3626:  ret = get_lambda_tv(arg, rettv, FALSE, evalarg);",
          "3627:     }",
          "3628:     else",
          "3629:     {",
          "3631:  ++*arg;",
          "3632:  ret = eval1(arg, rettv, evalarg);",
          "3634:  if (**arg != ')')",
          "3635:  {",
          "3636:      emsg(_(e_missing_close));",
          "3637:      ret = FAIL;",
          "3638:  }",
          "3639:  ++*arg;",
          "3640:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5646:      if (ret == OK)",
          "5647:      {",
          "5650:       ret = eval_lambda(arg, rettv, evalarg, verbose);",
          "5651:   else",
          "",
          "[Removed Lines]",
          "5648:   if ((*arg)[2] == '{')",
          "",
          "[Added Lines]",
          "5668:   if (((*arg)[2] == '{' && !in_vim9script()) || (*arg)[2] == '(')",
          "",
          "---------------"
        ],
        "src/testdir/test_vim9_assign.vim||src/testdir/test_vim9_assign.vim": [
          "File: src/testdir/test_vim9_assign.vim -> src/testdir/test_vim9_assign.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:   CheckDefFailure(['var x:string'], 'E1069:')",
          "67:   CheckDefFailure(['var x:string = \"x\"'], 'E1069:')",
          "68:   CheckDefFailure(['var a:string = \"x\"'], 'E1069:')",
          "70:   CheckScriptFailure(['var x = \"x\"'], 'E1124:')",
          "72:   var nr: number = 1234",
          "",
          "[Removed Lines]",
          "69:   CheckDefFailure(['var lambda = {-> \"lambda\"}'], 'E704:')",
          "",
          "[Added Lines]",
          "69:   CheckDefFailure(['var lambda = () => \"lambda\"'], 'E704:')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1032:   # check if assign a lambda to a variable which type is func or any.",
          "1033:   var lines =<< trim END",
          "1034:       vim9script",
          "1036:       assert_equal(123, FuncRef())",
          "1038:       assert_equal(123, FuncRef_Func())",
          "1040:       assert_equal(123, FuncRef_Any())",
          "1041:   END",
          "1042:   CheckScriptSuccess(lines)",
          "",
          "[Removed Lines]",
          "1035:       var FuncRef = {-> 123}",
          "1037:       var FuncRef_Func: func = {-> 123}",
          "1039:       var FuncRef_Any: any = {-> 123}",
          "",
          "[Added Lines]",
          "1035:       var FuncRef = () => 123",
          "1037:       var FuncRef_Func: func = () => 123",
          "1039:       var FuncRef_Any: any = () => 123",
          "",
          "---------------"
        ],
        "src/testdir/test_vim9_builtin.vim||src/testdir/test_vim9_builtin.vim": [
          "File: src/testdir/test_vim9_builtin.vim -> src/testdir/test_vim9_builtin.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "231:   assert_equal({a: 1, b: 2}, extend({a: 1, b: 2}, {b: 4}, s:string_keep))",
          "233:   var res: list<dict<any>>",
          "235:   assert_equal([{}, {}], res)",
          "237:   CheckDefFailure(['extend([1, 2], 3)'], 'E1013: Argument 2: type mismatch, expected list<number> but got number')",
          "",
          "[Removed Lines]",
          "234:   extend(res, map([1, 2], {_, v -> {}}))",
          "",
          "[Added Lines]",
          "234:   extend(res, map([1, 2], (_, v) => ({})))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "256: def Wrong_dict_key_type(items: list<number>): list<number>",
          "258: enddef",
          "260: def Test_map_function_arg()",
          "",
          "[Removed Lines]",
          "257:   return filter(items, {_, val -> get({[val]: 1}, 'x')})",
          "",
          "[Added Lines]",
          "257:   return filter(items, (_, val) => get({[val]: 1}, 'x'))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "313: enddef",
          "315: def Test_filter_return_type()",
          "317:   var res = 0",
          "318:   for n in l",
          "319:     res += n",
          "",
          "[Removed Lines]",
          "316:   var l = filter([1, 2, 3], {-> 1})",
          "",
          "[Added Lines]",
          "316:   var l = filter([1, 2, 3], () => 1)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "324: def Test_filter_missing_argument()",
          "325:   var dict = {aa: [1], ab: [2], ac: [3], de: [4]}",
          "327:   res->assert_equal({aa: [1], ac: [3]})",
          "328: enddef",
          "",
          "[Removed Lines]",
          "326:   var res = dict->filter({k -> k =~ 'a' && k !~ 'b'})",
          "",
          "[Added Lines]",
          "326:   var res = dict->filter((k) => k =~ 'a' && k !~ 'b')",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "539: enddef",
          "541: def Test_readdir()",
          "544: enddef",
          "546: def Test_remove_return_type()",
          "",
          "[Removed Lines]",
          "542:    eval expand('sautest')->readdir({e -> e[0] !=# '.'})",
          "543:    eval expand('sautest')->readdirex({e -> e.name[0] !=# '.'})",
          "",
          "[Added Lines]",
          "542:    eval expand('sautest')->readdir((e) => e[0] !=# '.')",
          "543:    eval expand('sautest')->readdirex((e) => e.name[0] !=# '.')",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "566:   setline(1, ['foo', 'bar'])",
          "567:   var val = 0",
          "568:   # skip expr returns boolean",
          "570:   :1",
          "572:   # skip expr returns number, only 0 and 1 are accepted",
          "573:   :1",
          "575:   :1",
          "579: enddef",
          "581: def Test_searchcount()",
          "",
          "[Removed Lines]",
          "569:   search('bar', 'W', 0, 0, {-> val == 1})->assert_equal(2)",
          "571:   search('bar', 'W', 0, 0, {-> val == 0})->assert_equal(0)",
          "574:   search('bar', 'W', 0, 0, {-> 0})->assert_equal(2)",
          "576:   search('bar', 'W', 0, 0, {-> 1})->assert_equal(0)",
          "577:   assert_fails(\"search('bar', '', 0, 0, {-> -1})\", 'E1023:')",
          "578:   assert_fails(\"search('bar', '', 0, 0, {-> -1})\", 'E1023:')",
          "",
          "[Added Lines]",
          "569:   search('bar', 'W', 0, 0, () => val == 1)->assert_equal(2)",
          "571:   search('bar', 'W', 0, 0, () => val == 0)->assert_equal(0)",
          "574:   search('bar', 'W', 0, 0, () => 0)->assert_equal(2)",
          "576:   search('bar', 'W', 0, 0, () => 1)->assert_equal(0)",
          "577:   assert_fails(\"search('bar', '', 0, 0, () => -1)\", 'E1023:')",
          "578:   assert_fails(\"search('bar', '', 0, 0, () => -1)\", 'E1023:')",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "668: def Test_submatch()",
          "669:   var pat = 'A\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)'",
          "671:   var actual = substitute('A123456789', pat, Rep, '')",
          "672:   var expected = \"[['A123456789'], ['1'], ['2'], ['3'], ['4'], ['5'], ['6'], ['7'], ['8'], ['9']]\"",
          "673:   actual->assert_equal(expected)",
          "",
          "[Removed Lines]",
          "670:   var Rep = {-> range(10)->map({_, v -> submatch(v, true)})->string()}",
          "",
          "[Added Lines]",
          "670:   var Rep = () => range(10)->map((_, v) => submatch(v, true))->string()",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "703: enddef",
          "705: def Test_timer_paused()",
          "707:   timer_pause(id, true)",
          "708:   var info = timer_info(id)",
          "709:   info[0]['paused']->assert_equal(1)",
          "",
          "[Removed Lines]",
          "706:   var id = timer_start(50, {-> 0})",
          "",
          "[Added Lines]",
          "706:   var id = timer_start(50, () => 0)",
          "",
          "---------------"
        ],
        "src/testdir/test_vim9_cmd.vim||src/testdir/test_vim9_cmd.vim": [
          "File: src/testdir/test_vim9_cmd.vim -> src/testdir/test_vim9_cmd.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "305: def Test_skipped_expr_linebreak()",
          "306:   if 0",
          "307:     var x = []",
          "309:   endif",
          "310: enddef",
          "",
          "[Removed Lines]",
          "308:                ->map({ -> 0})",
          "",
          "[Added Lines]",
          "308:                ->map(() => 0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "369: def Test_filter_is_not_modifier()",
          "370:   var tags = [{a: 1, b: 2}, {x: 3, y: 4}]",
          "372:   assert_equal([{x: 3, y: 4}], tags)",
          "373: enddef",
          "",
          "[Removed Lines]",
          "371:   filter(tags, { _, v -> has_key(v, 'x') ? 1 : 0 })",
          "",
          "[Added Lines]",
          "371:   filter(tags, ( _, v) => has_key(v, 'x') ? 1 : 0 )",
          "",
          "---------------"
        ],
        "src/testdir/test_vim9_disassemble.vim||src/testdir/test_vim9_disassemble.vim": [
          "File: src/testdir/test_vim9_disassemble.vim -> src/testdir/test_vim9_disassemble.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "896: enddef",
          "898: def WithLambda(): string",
          "900:   return F(\"x\")",
          "901: enddef",
          "",
          "[Removed Lines]",
          "899:   var F = {a -> \"X\" .. a .. \"X\"}",
          "",
          "[Added Lines]",
          "899:   var F = (a) => \"X\" .. a .. \"X\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "904:   assert_equal(\"XxX\", WithLambda())",
          "905:   var instr = execute('disassemble WithLambda')",
          "906:   assert_match('WithLambda\\_s*' ..",
          "908:         '\\d FUNCREF <lambda>\\d\\+\\_s*' ..",
          "909:         '\\d STORE $0\\_s*' ..",
          "910:         'return F(\"x\")\\_s*' ..",
          "",
          "[Removed Lines]",
          "907:         'var F = {a -> \"X\" .. a .. \"X\"}\\_s*' ..",
          "",
          "[Added Lines]",
          "907:         'var F = (a) => \"X\" .. a .. \"X\"\\_s*' ..",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "929: enddef",
          "931: def LambdaWithType(): number",
          "933:   return Ref(g:value)",
          "934: enddef",
          "",
          "[Removed Lines]",
          "932:   var Ref = {a: number -> a + 10}",
          "",
          "[Added Lines]",
          "932:   var Ref = (a: number) => a + 10",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "938:   assert_equal(15, LambdaWithType())",
          "939:   var instr = execute('disassemble LambdaWithType')",
          "940:   assert_match('LambdaWithType\\_s*' ..",
          "942:         '\\d FUNCREF <lambda>\\d\\+\\_s*' ..",
          "943:         '\\d STORE $0\\_s*' ..",
          "944:         'return Ref(g:value)\\_s*' ..",
          "",
          "[Removed Lines]",
          "941:         'var Ref = {a: number -> a + 10}\\_s*' ..",
          "",
          "[Added Lines]",
          "941:         'var Ref = (a: number) => a + 10\\_s*' ..",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1541:         ['{a: 1} is aDict', 'COMPAREDICT is'],",
          "1542:         ['{a: 1} isnot aDict', 'COMPAREDICT isnot'],",
          "1549:         ['77 == g:xx', 'COMPAREANY =='],",
          "1550:         ['77 != g:xx', 'COMPAREANY !='],",
          "",
          "[Removed Lines]",
          "1544:         ['{-> 33} == {-> 44}', 'COMPAREFUNC =='],",
          "1545:         ['{-> 33} != {-> 44}', 'COMPAREFUNC !='],",
          "1546:         ['{-> 33} is {-> 44}', 'COMPAREFUNC is'],",
          "1547:         ['{-> 33} isnot {-> 44}', 'COMPAREFUNC isnot'],",
          "",
          "[Added Lines]",
          "1544:         ['(() => 33) == (() => 44)', 'COMPAREFUNC =='],",
          "1545:         ['(() => 33) != (() => 44)', 'COMPAREFUNC !='],",
          "1546:         ['(() => 33) is (() => 44)', 'COMPAREFUNC is'],",
          "1547:         ['(() => 33) isnot (() => 44)', 'COMPAREFUNC isnot'],",
          "",
          "---------------"
        ],
        "src/testdir/test_vim9_expr.vim||src/testdir/test_vim9_expr.vim": [
          "File: src/testdir/test_vim9_expr.vim -> src/testdir/test_vim9_expr.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "1806: enddef",
          "1808: def LambdaWithComments(): func",
          "1810:             # some comment",
          "1811:             x == 1",
          "1812:             # some comment",
          "1813:             ||",
          "1814:             x == 2",
          "1816: enddef",
          "1818: def LambdaUsingArg(x: number): func",
          "1820:             # some comment",
          "1821:             x == 1",
          "1822:             # some comment",
          "1823:             ||",
          "1824:             x == 2",
          "1826: enddef",
          "1828: def Test_expr7_lambda()",
          "1829:   var lines =<< trim END",
          "1831:       assert_equal('result', La())",
          "1834:       # line continuation inside lambda with \"cond ? expr : expr\" works",
          "1835:       var ll = range(3)",
          "1837:                 ['111']: 111 } : {}",
          "1839:       assert_equal([{}, {111: 111}, {}], ll)",
          "1841:       ll = range(3)",
          "1843:                     == 9",
          "1844:                     || v % 2 ? 111 : 222",
          "1846:       assert_equal([222, 111, 222], ll)",
          "1848:       ll = range(3)",
          "1850:                     != 9",
          "1851:                     && v % 2 == 0 ? 111 : 222",
          "1853:       assert_equal([111, 222, 111], ll)",
          "1856:       assert_equal([{key: 22}], dl)",
          "1858:       dl = [{key: 12}, {['foo']: 34}]",
          "1859:       assert_equal([{key: 12}], filter(dl,",
          "1862:       assert_equal(false, LambdaWithComments()(0))",
          "1863:       assert_equal(true, LambdaWithComments()(1))",
          "",
          "[Removed Lines]",
          "1809:   return {x ->",
          "1815:         }",
          "1819:   return {->",
          "1825:         }",
          "1830:       var La = { -> 'result'}",
          "1832:       assert_equal([1, 3, 5], [1, 2, 3]->map({key, val -> key + val}))",
          "1836:       map(ll, {k, v -> v % 2 ? {",
          "1838:             })",
          "1842:       map(ll, {k, v -> v == 8 || v",
          "1845:             })",
          "1849:       map(ll, {k, v -> v != 8 && v",
          "1852:             })",
          "1855:       var dl = [{key: 0}, {key: 22}]->filter({ _, v -> v['key'] })",
          "1860:             {_, v -> has_key(v, 'key') ? v['key'] == 12 : 0}))",
          "",
          "[Added Lines]",
          "1809:   return (x) =>",
          "1818:   return () =>",
          "1828:       var La = () => 'result'",
          "1830:       assert_equal([1, 3, 5], [1, 2, 3]->map((key, val) => key + val))",
          "1834:       map(ll, (k, v) => v % 2 ? {",
          "1836:             )",
          "1840:       map(ll, (k, v) => v == 8 || v",
          "1843:             )",
          "1847:       map(ll, (k, v) => v != 8 && v",
          "1850:             )",
          "1853:       var dl = [{key: 0}, {key: 22}]->filter(( _, v) => v['key'] )",
          "1858:             (_, v) => has_key(v, 'key') ? v['key'] == 12 : 0))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1867:       assert_equal(false, LambdaUsingArg(0)())",
          "1868:       assert_equal(true, LambdaUsingArg(1)())",
          "1871:       assert_equal([1, 3, 5], res)",
          "1872:   END",
          "1873:   CheckDefAndScriptSuccess(lines)",
          "1880:   # error is in first line of the lambda",
          "1897: enddef",
          "1899: def NewLambdaWithComments(): func",
          "",
          "[Removed Lines]",
          "1870:       var res = map([1, 2, 3], {i: number, v: number -> i + v})",
          "1875:   CheckDefFailure([\"var Ref = {a->a + 1}\"], 'E1004:')",
          "1876:   CheckDefFailure([\"var Ref = {a-> a + 1}\"], 'E1004:')",
          "1877:   CheckDefFailure([\"var Ref = {a ->a + 1}\"], 'E1004:')",
          "1879:   CheckDefFailure([\"filter([1, 2], {k,v -> 1})\"], 'E1069:', 1)",
          "1881:   CheckDefFailure([\"var L = {a -> a + b}\"], 'E1001:', 0)",
          "1883:   assert_equal('xxxyyy', 'xxx'->{a, b -> a .. b}('yyy'))",
          "1885:   CheckDefExecFailure([\"var s = 'asdf'->{a -> a}('x')\"],",
          "1886:         'E1106: One argument too many')",
          "1887:   CheckDefExecFailure([\"var s = 'asdf'->{a -> a}('x', 'y')\"],",
          "1888:         'E1106: 2 arguments too many')",
          "1889:   CheckDefFailure([\"echo 'asdf'->{a -> a}(x)\"], 'E1001:', 1)",
          "1891:   CheckDefSuccess(['var Fx = {a -> {k1: 0,', ' k2: 1}}'])",
          "1892:   CheckDefFailure(['var Fx = {a -> {k1: 0', ' k2: 1}}'], 'E722:', 2)",
          "1893:   CheckDefFailure(['var Fx = {a -> {k1: 0,', ' k2 1}}'], 'E720:', 2)",
          "1895:   CheckDefSuccess(['var Fx = {a -> [0,', ' 1]}'])",
          "1896:   CheckDefFailure(['var Fx = {a -> [0', ' 1]}'], 'E696:', 2)",
          "",
          "[Added Lines]",
          "1868:       var res = map([1, 2, 3], (i: number, v: number) => i + v)",
          "1873:   CheckDefFailure([\"var Ref = (a)=>a + 1\"], 'E1004:')",
          "1874:   CheckDefFailure([\"var Ref = (a)=> a + 1\"], 'E1004:')",
          "1875:   CheckDefFailure([\"var Ref = (a) =>a + 1\"], 'E1004:')",
          "1877:   CheckDefFailure([\"filter([1, 2], (k,v) => 1)\"], 'E1069:', 1)",
          "1879:   CheckDefFailure([\"var L = (a) => a + b\"], 'E1001:', 0)",
          "1881:   assert_equal('xxxyyy', 'xxx'->((a, b) => a .. b)('yyy'))",
          "1883:   CheckDefExecFailure([\"var s = 'asdf'->((a) => a)('x')\"], 'E118:')",
          "1884:   CheckDefExecFailure([\"var s = 'asdf'->((a) => a)('x', 'y')\"], 'E118:')",
          "1885:   CheckDefFailure([\"echo 'asdf'->((a) => a)(x)\"], 'E1001:', 1)",
          "1887:   CheckDefSuccess(['var Fx = (a) => ({k1: 0,', ' k2: 1})'])",
          "1888:   CheckDefFailure(['var Fx = (a) => ({k1: 0', ' k2: 1})'], 'E722:', 2)",
          "1889:   CheckDefFailure(['var Fx = (a) => ({k1: 0,', ' k2 1})'], 'E720:', 2)",
          "1891:   CheckDefSuccess(['var Fx = (a) => [0,', ' 1]'])",
          "1892:   CheckDefFailure(['var Fx = (a) => [0', ' 1]'], 'E696:', 2)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2002: def Test_expr7_lambda_vim9script()",
          "2003:   var lines =<< trim END",
          "2004:       vim9script",
          "2006:      a",
          "2007:        + 2",
          "2009:       assert_equal(12, v)",
          "2010:   END",
          "2011:   CheckScriptSuccess(lines)",
          "",
          "[Removed Lines]",
          "2005:       var v = 10->{a ->",
          "2008:    }()",
          "",
          "[Added Lines]",
          "2001:       var v = 10->((a) =>",
          "2004:             )()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2013:   # nested lambda with line breaks",
          "2014:   lines =<< trim END",
          "2015:       vim9script",
          "2017:  synstack('.', col('.'))",
          "2019:   END",
          "2020:   CheckScriptSuccess(lines)",
          "2021: enddef",
          "",
          "[Removed Lines]",
          "2016:       search('\"', 'cW', 0, 0, {->",
          "2018:  ->map({_, v -> synIDattr(v, 'name')})->len()})",
          "",
          "[Added Lines]",
          "2012:       search('\"', 'cW', 0, 0, () =>",
          "2014:           ->map((_, v) => synIDattr(v, 'name'))->len())",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2089:   CheckDefFailure([\"var x = 'a' .. #{a: 1}\"], 'E1097:', 3)",
          "2091:   CheckDefFailure([\"var x = {a:8}\"], 'E1069:', 1)",
          "2094:   CheckDefFailure([\"var x = {a: 8 , b: 9}\"], 'E1068:', 1)",
          "2095:   CheckDefFailure([\"var x = {a: 1,b: 2}\"], 'E1069:', 1)",
          "",
          "[Removed Lines]",
          "2092:   CheckDefFailure([\"var x = {a : 8}\"], 'E1059:', 1)",
          "2093:   CheckDefFailure([\"var x = {a :8}\"], 'E1059:', 1)",
          "",
          "[Added Lines]",
          "2088:   CheckDefFailure([\"var x = {a : 8}\"], 'E1068:', 1)",
          "2089:   CheckDefFailure([\"var x = {a :8}\"], 'E1068:', 1)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2139:   ['two']: 2,",
          "2140:      }",
          "2141:       assert_equal({one: 1, two: 2}, d)",
          "2142:   END",
          "2143:   CheckScriptSuccess(lines)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2139:       var dd = {k: 123->len()}",
          "2140:       assert_equal(3, dd.k)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2174:       vim9script",
          "2175:       var d = {one : 1}",
          "2176:   END",
          "2179:   lines =<< trim END",
          "2180:       vim9script",
          "",
          "[Removed Lines]",
          "2177:   CheckScriptFailure(lines, 'E1059:', 2)",
          "",
          "[Added Lines]",
          "2176:   CheckScriptFailure(lines, 'E1068:', 2)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2629:       unlet g:false",
          "2631:       assert_equal(true, !test_null_partial())",
          "2634:       assert_equal(true, !test_null_dict())",
          "2635:       assert_equal(true, !{})",
          "",
          "[Removed Lines]",
          "2632:       assert_equal(false, !{-> 'yes'})",
          "",
          "[Added Lines]",
          "2631:       assert_equal(false, !() => 'yes')",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2668:   call CheckDefFailure([\"var x = [1, 2\"], \"E697:\", 2)",
          "2669:   call CheckDefFailure([\"var x = [notfound]\"], \"E1001:\", 1)",
          "2674:   call CheckDefFailure([\"var x = &notexist\"], 'E113:', 1)",
          "2675:   call CheckDefFailure([\"&grepprg = [343]\"], 'E1012:', 1)",
          "",
          "[Removed Lines]",
          "2671:   call CheckDefFailure([\"var x = { -> 123) }\"], \"E451:\", 1)",
          "2672:   call CheckDefFailure([\"var x = 123->{x -> x + 5) }\"], \"E451:\", 1)",
          "",
          "[Added Lines]",
          "2670:   call CheckDefFailure([\"var X = () => 123)\"], \"E488:\", 1)",
          "2671:   call CheckDefFailure([\"var x = 123->((x) => x + 5)\"], \"E107:\", 1)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2691:   call CheckDefFailure([\"'yes'->\", \"Echo()\"], 'E488: Trailing characters: ->', 1)",
          "2693:   call CheckDefExecFailure([\"[1, 2->len()\"], 'E697:', 2)",
          "2695:   call CheckDefExecFailure([\"{['a']: 1->len()\"], 'E723:', 2)",
          "2696: endfunc",
          "",
          "[Removed Lines]",
          "2694:   call CheckDefExecFailure([\"{a: 1->len()\"], 'E1004:', 1)",
          "",
          "[Added Lines]",
          "2693:   call CheckDefExecFailure([\"{a: 1->len()\"], 'E723:', 2)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2726:   # method call",
          "2727:   l = [2, 5, 6]",
          "2729:   assert_equal([2, 6, 8], l)",
          "2731:   # lambda method call",
          "2732:   l = [2, 5]",
          "2734:   assert_equal([2, 5, 8], l)",
          "2736:   # dict member",
          "",
          "[Removed Lines]",
          "2728:   l->map({k, v -> k + v})",
          "2733:   l->{l -> add(l, 8)}()",
          "",
          "[Added Lines]",
          "2727:   l->map((k, v) => k + v)",
          "2732:   l->((l) => add(l, 8))()",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2895: enddef",
          "2897: func Test_expr7_trailing_fails()",
          "2900: endfunc",
          "2902: func Test_expr_fails()",
          "",
          "[Removed Lines]",
          "2898:   call CheckDefFailure(['var l = [2]', 'l->{l -> add(l, 8)}'], 'E107:', 2)",
          "2899:   call CheckDefFailure(['var l = [2]', 'l->{l -> add(l, 8)} ()'], 'E274:', 2)",
          "",
          "[Added Lines]",
          "2897:   call CheckDefFailure(['var l = [2]', 'l->((l) => add(l, 8))'], 'E107:', 2)",
          "2898:   call CheckDefFailure(['var l = [2]', 'l->((l) => add(l, 8)) ()'], 'E274:', 2)",
          "",
          "---------------"
        ],
        "src/testdir/test_vim9_func.vim||src/testdir/test_vim9_func.vim": [
          "File: src/testdir/test_vim9_func.vim -> src/testdir/test_vim9_func.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: enddef",
          "56: def CallMapRecursive(l: list<number>): number",
          "58: enddef",
          "60: def Test_funcdepth_error()",
          "",
          "[Removed Lines]",
          "57:   return map(l, {_, v -> CallMapRecursive([v])})[0]",
          "",
          "[Added Lines]",
          "57:   return map(l, (_, v) => CallMapRecursive([v]))[0]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "310:       vim9script",
          "311:       def Outer()",
          "312:         def g:Inner()",
          "314:         enddef",
          "315:         g:Inner()",
          "316:       enddef",
          "",
          "[Removed Lines]",
          "313:           echo map([1, 2, 3], {_, v -> v + 1})",
          "",
          "[Added Lines]",
          "313:           echo map([1, 2, 3], (_, v) => v + 1)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "509: enddef",
          "511: def Test_call_lambda_args()",
          "515:   var lines =<< trim END",
          "517:       echo Ref(1, 'x')",
          "518:   END",
          "519:   CheckDefFailure(lines, 'E1013: Argument 2: type mismatch, expected number but got string')",
          "",
          "[Removed Lines]",
          "512:   CheckDefFailure(['echo {i -> 0}()'],",
          "513:                   'E119: Not enough arguments for function: {i -> 0}()')",
          "516:       var Ref = {x: number, y: number -> x + y}",
          "",
          "[Added Lines]",
          "512:   CheckDefFailure(['echo ((i) => 0)()'],",
          "513:                   'E119: Not enough arguments for function: ((i) => 0)()')",
          "516:       var Ref = (x: number, y: number) => x + y",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "522: def Test_lambda_uses_assigned_var()",
          "523:   CheckDefSuccess([",
          "524:         'var x: any = \"aaa\"'",
          "526: enddef",
          "528: \" Default arg and varargs",
          "",
          "[Removed Lines]",
          "525:         'x = filter([\"bbb\"], {_, v -> v =~ x})'])",
          "",
          "[Added Lines]",
          "525:         'x = filter([\"bbb\"], (_, v) => v =~ x)'])",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1414: def Test_closure_simple()",
          "1415:   var local = 'some '",
          "1417: enddef",
          "1419: def MakeRef()",
          "1420:   var local = 'some '",
          "1422: enddef",
          "1424: def Test_closure_ref_after_return()",
          "",
          "[Removed Lines]",
          "1416:   RefFunc({s -> local .. s})->assert_equal('some more')",
          "1421:   g:Ref = {s -> local .. s}",
          "",
          "[Added Lines]",
          "1416:   RefFunc((s) => local .. s)->assert_equal('some more')",
          "1421:   g:Ref = (s) => local .. s",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1430: def MakeTwoRefs()",
          "1431:   var local = ['some']",
          "1434: enddef",
          "1436: def Test_closure_two_refs()",
          "",
          "[Removed Lines]",
          "1432:   g:Extend = {s -> local->add(s)}",
          "1433:   g:Read = {-> local}",
          "",
          "[Added Lines]",
          "1432:   g:Extend = (s) => local->add(s)",
          "1433:   g:Read = () => local",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1468: def MakeArgRefs(theArg: string)",
          "1469:   var local = 'loc_val'",
          "1471: enddef",
          "1473: def MakeArgRefsVarargs(theArg: string, ...rest: list<string>)",
          "1474:   var local = 'the_loc'",
          "1476: enddef",
          "1478: def Test_closure_using_argument()",
          "",
          "[Removed Lines]",
          "1470:   g:UseArg = {s -> theArg .. '/' .. local .. '/' .. s}",
          "1475:   g:UseVararg = {s -> theArg .. '/' .. local .. '/' .. s .. '/' .. join(rest)}",
          "",
          "[Added Lines]",
          "1470:   g:UseArg = (s) => theArg .. '/' .. local .. '/' .. s",
          "1475:   g:UseVararg = (s) => theArg .. '/' .. local .. '/' .. s .. '/' .. join(rest)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1527: def Test_call_closure_not_compiled()",
          "1528:   var text = 'text'",
          "1530:   GetResult(g:Ref)->assert_equal('sometext')",
          "1531: enddef",
          "",
          "[Removed Lines]",
          "1529:   g:Ref = {s ->  s .. text}",
          "",
          "[Added Lines]",
          "1529:   g:Ref = (s) =>  s .. text",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1536:     def Func()",
          "1537:       var name = 0",
          "1538:       for i in range(2)",
          "1540:       endfor",
          "1541:     enddef",
          "1542:     Func()",
          "",
          "[Removed Lines]",
          "1539:           timer_start(0, {-> name})",
          "",
          "[Added Lines]",
          "1539:           timer_start(0, () => name)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1549:       vim9script",
          "1550:       def Func()",
          "1551:         var x = 'hello'",
          "1554:       enddef",
          "1555:       Func()",
          "1556:       assert_equal('hello', g:Myclosure())",
          "",
          "[Removed Lines]",
          "1552:         var Closure = {-> x}",
          "1553:         g:Myclosure = {-> Closure()}",
          "",
          "[Added Lines]",
          "1552:         var Closure = () => x",
          "1553:         g:Myclosure = () => Closure()",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1565:       FuncB(0)",
          "1566:     enddef",
          "1567:     def FuncB(n: number): list<string>",
          "1569:     enddef",
          "1570:     FuncA()",
          "1571:   END",
          "",
          "[Removed Lines]",
          "1568:       return map([0], {_, v -> n})",
          "",
          "[Added Lines]",
          "1568:       return map([0], (_, v) => n)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1642:     vim9script",
          "1643:     def Func()",
          "1644:       var x = 4",
          "1647:       var res = Lambda2()",
          "1648:       assert_equal([7, 4], res)",
          "1649:     enddef",
          "",
          "[Removed Lines]",
          "1645:       var Lambda1 = {-> 7}",
          "1646:       var Lambda2 = {-> [Lambda1(), x]}",
          "",
          "[Added Lines]",
          "1645:       var Lambda1 = () => 7",
          "1646:       var Lambda2 = () => [Lambda1(), x]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1653: enddef",
          "1655: def Shadowed(): list<number>",
          "1658: enddef",
          "1660: def Test_lambda_arg_shadows_func()",
          "",
          "[Removed Lines]",
          "1656:   var FuncList: list<func: number> = [{ -> 42}]",
          "1657:   return FuncList->map({_, Shadowed -> Shadowed()})",
          "",
          "[Added Lines]",
          "1656:   var FuncList: list<func: number> = [() => 42]",
          "1657:   return FuncList->map((_, Shadowed) => Shadowed())",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1676:   var lines =<< trim END",
          "1677:       vim9script",
          "1678:       var script = 'test'",
          "1680:   END",
          "1681:   CheckScriptSuccess(lines)",
          "1682: enddef",
          "1684: def Line_continuation_in_lambda(): list<string>",
          "1685:   var x = range(97, 100)",
          "1688:       ->reverse()",
          "1689:   return x",
          "1690: enddef",
          "",
          "[Removed Lines]",
          "1679:       assert_equal(['test'], map(['one'], {-> script}))",
          "1686:       ->map({_, v -> nr2char(v)",
          "1687:           ->toupper()})",
          "",
          "[Added Lines]",
          "1679:       assert_equal(['test'], map(['one'], () => script))",
          "1686:       ->map((_, v) => nr2char(v)",
          "1687:           ->toupper())",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1772: enddef",
          "1774: def TreeWalk(dir: string): list<any>",
          "1776:             fnamemodify(dir .. '/' .. val, ':p')->isdirectory()",
          "1777:                ? {[val]: TreeWalk(dir .. '/' .. val)}",
          "1778:                : val",
          "1780: enddef",
          "1782: def Test_closure_in_map()",
          "",
          "[Removed Lines]",
          "1775:   return readdir(dir)->map({_, val ->",
          "1779:              })",
          "",
          "[Added Lines]",
          "1775:   return readdir(dir)->map((_, val) =>",
          "1779:              )",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1890:         var x = ['a', 'b', 'c']",
          "1891:         if 1",
          "1892:           var y = 'x'",
          "1894:         endif",
          "1895:         var z = x",
          "1896:         assert_equal(['x', 'x', 'x'], z)",
          "",
          "[Removed Lines]",
          "1893:           map(x, {-> y})",
          "",
          "[Added Lines]",
          "1893:           map(x, () => y)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1922:       vim9script",
          "1923:       au BufWinLeave * #",
          "1924:       def Func()",
          "1926:           eval [][0]",
          "1927:       enddef",
          "1928:       nno <F3> <cmd>call <sid>Func()<cr>",
          "",
          "[Removed Lines]",
          "1925:           popup_menu('', {callback: {-> popup_create('', {})->popup_close()}})",
          "",
          "[Added Lines]",
          "1925:           popup_menu('', {callback: () => popup_create('', {})->popup_close()})",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2014:       var d: dict<any>",
          "2015:       def Func()",
          "2016:         try",
          "2018:         catch",
          "2019:         endtry",
          "2020:       enddef",
          "",
          "[Removed Lines]",
          "2017:           g:result = map([], {_, v -> {}[v]})->join() .. d['']",
          "",
          "[Added Lines]",
          "2017:           g:result = map([], (_, v) => ({}[v]))->join() .. d['']",
          "",
          "---------------"
        ],
        "src/testdir/test_vim9_script.vim||src/testdir/test_vim9_script.vim": [
          "File: src/testdir/test_vim9_script.vim -> src/testdir/test_vim9_script.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "1163:   var buf = RunVimInTerminal('-c \"import Foo from ''./XexportCmd.vim''\"', {",
          "1164:                 rows: 6, wait_for_ruler: 0})",
          "1167:   delete('XexportCmd.vim')",
          "1168:   StopVimInTerminal(buf)",
          "",
          "[Removed Lines]",
          "1165:   WaitForAssert({-> assert_match('^E1094:', term_getline(buf, 5))})",
          "",
          "[Added Lines]",
          "1165:   WaitForAssert(() => assert_match('^E1094:', term_getline(buf, 5)))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3064:   # define Afunc() on the command line",
          "3065:   term_sendkeys(buf, \":def Afunc()\\<CR>Bfunc()\\<CR>enddef\\<CR>\")",
          "3066:   term_sendkeys(buf, \":call CheckAndQuit()\\<CR>\")",
          "3069:   call StopVimInTerminal(buf)",
          "3070:   delete('XcallFunc')",
          "",
          "[Removed Lines]",
          "3067:   WaitForAssert({-> assert_equal(['errors: []'], readfile('Xdidcmd'))})",
          "",
          "[Added Lines]",
          "3067:   WaitForAssert(() => assert_equal(['errors: []'], readfile('Xdidcmd')))",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "751: static int included_patches[] =",
          "754:     2256,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "754:     2257,",
          "",
          "---------------"
        ],
        "src/vim9compile.c||src/vim9compile.c": [
          "File: src/vim9compile.c -> src/vim9compile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2987:     return FAIL;",
          "2988: }",
          "",
          "[Removed Lines]",
          "2994:     static int",
          "2995: compile_lambda_call(char_u **arg, cctx_T *cctx)",
          "2996: {",
          "2997:     ufunc_T *ufunc;",
          "2998:     typval_T rettv;",
          "2999:     int  argcount = 1;",
          "3000:     int  ret = FAIL;",
          "3003:     if (get_lambda_tv(arg, &rettv, TRUE, &EVALARG_EVALUATE) == FAIL)",
          "3004:  return FAIL;",
          "3006:     if (**arg != '(')",
          "3007:     {",
          "3008:  if (*skipwhite(*arg) == '(')",
          "3009:      emsg(_(e_nowhitespace));",
          "3010:  else",
          "3011:      semsg(_(e_missing_paren), \"lambda\");",
          "3012:  clear_tv(&rettv);",
          "3013:  return FAIL;",
          "3014:     }",
          "3016:     ufunc = rettv.vval.v_partial->pt_func;",
          "3017:     ++ufunc->uf_refcount;",
          "3018:     clear_tv(&rettv);",
          "3019:     ga_init2(&ufunc->uf_type_list, sizeof(type_T *), 10);",
          "3023:     compile_def_function(ufunc, TRUE, cctx);",
          "3027:     if (compile_arguments(arg, cctx, &argcount) == OK)",
          "3029:  ret = generate_CALL(cctx, ufunc, argcount);",
          "3031:     if (ret == FAIL)",
          "3032:  func_ptr_unref(ufunc);",
          "3033:     return ret;",
          "3034: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3602:      p += 2;",
          "3613:      {",
          "3614:   int     argcount = 1;",
          "3615:   char_u     *expr;",
          "",
          "[Removed Lines]",
          "3605:      if (**arg == '{')",
          "3606:      {",
          "3609:   if (compile_lambda_call(arg, cctx) == FAIL)",
          "3610:       return FAIL;",
          "3611:      }",
          "3612:      else if (**arg == '(')",
          "",
          "[Added Lines]",
          "3559:      if (**arg == '(')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3631:   ++*arg;",
          "3632:   if (**arg != '(')",
          "3633:   {",
          "3635:       return FAIL;",
          "3636:   }",
          "",
          "[Removed Lines]",
          "3634:       semsg(_(e_missing_paren), *arg);",
          "",
          "[Added Lines]",
          "3581:       if (*skipwhite(*arg) == '(')",
          "3582:    emsg(_(e_nowhitespace));",
          "3583:       else",
          "3584:    semsg(_(e_missing_paren), *arg);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4005:       break;",
          "4018:       break;",
          "",
          "[Removed Lines]",
          "4011:  case '{':   // Try parsing as a lambda, if NOTDONE is returned it",
          "4015:       ret = compile_lambda(arg, cctx);",
          "4016:       if (ret == NOTDONE)",
          "4017:    ret = compile_dict(arg, cctx, ppconst);",
          "",
          "[Added Lines]",
          "3960:  case '{':   ret = compile_dict(arg, cctx, ppconst);",
          "",
          "---------------"
        ]
      }
    }
  ]
}