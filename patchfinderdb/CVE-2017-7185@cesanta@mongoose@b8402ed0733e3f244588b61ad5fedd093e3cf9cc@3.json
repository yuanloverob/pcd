{
  "cve_id": "CVE-2017-7185",
  "cve_desc": "Use-after-free vulnerability in the mg_http_multipart_wait_for_boundary function in mongoose.c in Cesanta Mongoose Embedded Web Server Library 6.7 and earlier and Mongoose OS 1.2 and earlier allows remote attackers to cause a denial of service (crash) via a multipart/form-data POST request without a MIME boundary string.",
  "repo": "cesanta/mongoose",
  "patch_hash": "b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
  "patch_info": {
    "commit_hash": "b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
    "repo": "cesanta/mongoose",
    "commit_url": "https://github.com/cesanta/mongoose/commit/b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
    "files": [
      "mongoose.c"
    ],
    "message": "Fix crash in multipart handling\n\nClose cesanta/dev#6974\n\nPUBLISHED_FROM=4d4e4a46eceba10aec8dacb7f8f58bd078c92307",
    "before_after_code_files": [
      "mongoose.c||mongoose.c"
    ]
  },
  "patch_diff": {
    "mongoose.c||mongoose.c": [
      "File: mongoose.c -> mongoose.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "5961:   struct mbuf *io = &c->recv_mbuf;",
      "5962:   struct mg_http_proto_data *pd = mg_http_get_proto_data(c);",
      "5964:   if ((int) io->len < pd->mp_stream.boundary_len + 2) {",
      "5965:     return 0;",
      "5966:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5964:   if (pd->mp_stream.boundary == NULL) {",
      "5965:     pd->mp_stream.state = MPS_FINALIZE;",
      "5966:     DBG((\"Invalid request: boundary not initilaized\"));",
      "5967:     return 0;",
      "5968:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f857f6394f80d1846f13721cf6f761d25d41cc58",
      "candidate_info": {
        "commit_hash": "f857f6394f80d1846f13721cf6f761d25d41cc58",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/f857f6394f80d1846f13721cf6f761d25d41cc58",
        "files": [
          "mongoose.c"
        ],
        "message": "Access QoS field after validating topic length\n\nPUBLISHED_FROM=6f2d9849d75ca1ec2b6dade11ccad8d0c5d4b3bd",
        "before_after_code_files": [
          "mongoose.c||mongoose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c"
        ]
      }
    },
    {
      "candidate_hash": "7d5479985dfa533446255e3558009542c58ff7f3",
      "candidate_info": {
        "commit_hash": "7d5479985dfa533446255e3558009542c58ff7f3",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/7d5479985dfa533446255e3558009542c58ff7f3",
        "files": [
          "mongoose.c"
        ],
        "message": "Enable LWIP net_if locking on ESP32 (doh!)\n\nhttps://forum.mongoose-os.com/discussion/comment/4620/#Comment_4620\n\nPUBLISHED_FROM=679dd48e078615ef4f57d1879957b734f549ef2e",
        "before_after_code_files": [
          "mongoose.c||mongoose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "14195: void mg_lwip_if_remove_conn(struct mg_connection *nc);",
          "14196: time_t mg_lwip_if_poll(struct mg_iface *iface, int timeout_ms);",
          "14199: extern void mgos_lock();",
          "14200: extern void mgos_unlock();",
          "14201: #else",
          "",
          "[Removed Lines]",
          "14198: #ifdef RTOS_SDK",
          "",
          "[Added Lines]",
          "14198: #if defined(RTOS_SDK) || defined(ESP_PLATFORM)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c90cffa68861d1eeff814fe873ecf2ae3c5a019d",
      "candidate_info": {
        "commit_hash": "c90cffa68861d1eeff814fe873ecf2ae3c5a019d",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/c90cffa68861d1eeff814fe873ecf2ae3c5a019d",
        "files": [
          "examples/ESP8266_RTOS/build.sh"
        ],
        "message": "Fix docker invocation\n\nPUBLISHED_FROM=064b5e508017b0115239fc880f21ca08b9422a25",
        "before_after_code_files": [
          "examples/ESP8266_RTOS/build.sh||examples/ESP8266_RTOS/build.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/ESP8266_RTOS/build.sh||examples/ESP8266_RTOS/build.sh": [
          "File: examples/ESP8266_RTOS/build.sh -> examples/ESP8266_RTOS/build.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/bin/bash",
          "3: docker run \\",
          "5:   --entrypoint=/bin/bash $(cat sdk.version) -l -c -x '",
          "6:     export SDK_PATH=/opt/Espressif/ESP8266_RTOS_SDK;",
          "7:     export BIN_PATH=./bin;",
          "",
          "[Removed Lines]",
          "4:   --rm -i -v $(realpath ${PWD}/../..):/src \\",
          "",
          "[Added Lines]",
          "2: REPO=$(cd ../.. && pwd)",
          "5:   --rm -i -v $REPO:/src \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "692f436b3d53d96fede6fa06193559a6c03cd9b6",
      "candidate_info": {
        "commit_hash": "692f436b3d53d96fede6fa06193559a6c03cd9b6",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/692f436b3d53d96fede6fa06193559a6c03cd9b6",
        "files": [
          "mongoose.c"
        ],
        "message": "Make mg_connect_ws accept http:// URLs\n\nAs well as URLs without prefix\n\nPUBLISHED_FROM=ee298f6575603c8b384888633fe16413695ba70d",
        "before_after_code_files": [
          "mongoose.c||mongoose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5113: static void mg_http_conn_destructor(void *proto_data);",
          "5114: struct mg_connection *mg_connect_http_base(",
          "5115:     struct mg_mgr *mgr, MG_CB(mg_event_handler_t ev_handler, void *user_data),",
          "5120: static struct mg_http_proto_data *mg_http_get_proto_data(",
          "5121:     struct mg_connection *c) {",
          "",
          "[Removed Lines]",
          "5116:     struct mg_connect_opts opts, const char *schema, const char *schema_ssl,",
          "5117:     const char *url, struct mg_str *path, struct mg_str *user_info,",
          "5118:     struct mg_str *host);",
          "",
          "[Added Lines]",
          "5116:     struct mg_connect_opts opts, const char *scheme1, const char *scheme2,",
          "5117:     const char *scheme_ssl1, const char *scheme_ssl2, const char *url,",
          "5118:     struct mg_str *path, struct mg_str *user_info, struct mg_str *host);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7119:   mg_asprintf(&purl, sizeof(burl), \"%.*s%.*s\", (int) upstream.len, upstream.p,",
          "7120:               (int) (hm->uri.len - mount.len), hm->uri.p + mount.len);",
          "7125:   LOG(LL_DEBUG, (\"Proxying %.*s to %s (rule: %.*s)\", (int) hm->uri.len,",
          "7126:                  hm->uri.p, purl, (int) mount.len, mount.p));",
          "",
          "[Removed Lines]",
          "7122:   be =",
          "7123:       mg_connect_http_base(nc->mgr, MG_CB(mg_reverse_proxy_handler, NULL), opts,",
          "7124:                            \"http\", \"https\", purl, &path, &user_info, &host);",
          "",
          "[Added Lines]",
          "7122:   be = mg_connect_http_base(nc->mgr, MG_CB(mg_reverse_proxy_handler, NULL),",
          "7123:                             opts, \"http\", NULL, \"https\", NULL, purl, &path,",
          "7124:                             &user_info, &host);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7726: struct mg_connection *mg_connect_http_base(",
          "7727:     struct mg_mgr *mgr, MG_CB(mg_event_handler_t ev_handler, void *user_data),",
          "7731:   struct mg_connection *nc = NULL;",
          "7732:   unsigned int port_i = 0;",
          "7733:   int use_ssl = 0;",
          "",
          "[Removed Lines]",
          "7728:     struct mg_connect_opts opts, const char *schema, const char *schema_ssl,",
          "7729:     const char *url, struct mg_str *path, struct mg_str *user_info,",
          "7730:     struct mg_str *host) {",
          "",
          "[Added Lines]",
          "7728:     struct mg_connect_opts opts, const char *scheme1, const char *scheme2,",
          "7729:     const char *scheme_ssl1, const char *scheme_ssl2, const char *url,",
          "7730:     struct mg_str *path, struct mg_str *user_info, struct mg_str *host) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7741:     goto out;",
          "7742:   }",
          "7745:     use_ssl = 0;",
          "7746:     if (port_i == 0) port_i = 80;",
          "7748:     use_ssl = 1;",
          "7749:     if (port_i == 0) port_i = 443;",
          "7750:   } else {",
          "",
          "[Removed Lines]",
          "7744:   if (mg_vcmp(&scheme, schema) == 0) {",
          "7747:   } else if (mg_vcmp(&scheme, schema_ssl) == 0) {",
          "",
          "[Added Lines]",
          "7744:   if (scheme.len == 0 || mg_vcmp(&scheme, scheme1) == 0 ||",
          "7745:       (scheme2 != NULL && mg_vcmp(&scheme, scheme2) == 0)) {",
          "7748:   } else if (mg_vcmp(&scheme, scheme_ssl1) == 0 ||",
          "7749:              (scheme2 != NULL && mg_vcmp(&scheme, scheme_ssl2) == 0)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7791:   struct mbuf auth;",
          "7792:   struct mg_connection *nc =",
          "7793:       mg_connect_http_base(mgr, MG_CB(ev_handler, user_data), opts, \"http\",",
          "7796:   if (nc == NULL) {",
          "7797:     return NULL;",
          "",
          "[Removed Lines]",
          "7794:                            \"https\", url, &path, &user, &host);",
          "",
          "[Added Lines]",
          "7796:                            NULL, \"https\", NULL, url, &path, &user, &host);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "9304:   struct mg_str null_str = MG_NULL_STR;",
          "9305:   struct mg_str host = MG_NULL_STR, path = MG_NULL_STR, user_info = MG_NULL_STR;",
          "9306:   struct mg_connection *nc =",
          "9309:   if (nc != NULL) {",
          "9310:     mg_send_websocket_handshake3v(nc, path, host, mg_mk_str(protocol),",
          "9311:                                   mg_mk_str(extra_headers), user_info,",
          "",
          "[Removed Lines]",
          "9307:       mg_connect_http_base(mgr, MG_CB(ev_handler, user_data), opts, \"ws\", \"wss\",",
          "9308:                            url, &path, &user_info, &host);",
          "",
          "[Added Lines]",
          "9309:       mg_connect_http_base(mgr, MG_CB(ev_handler, user_data), opts, \"http\",",
          "9310:                            \"ws\", \"https\", \"wss\", url, &path, &user_info, &host);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2fb145d39d87c7ef36c12c47881fa259f28b2ce3",
      "candidate_info": {
        "commit_hash": "2fb145d39d87c7ef36c12c47881fa259f28b2ce3",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/2fb145d39d87c7ef36c12c47881fa259f28b2ce3",
        "files": [
          "docs/overview/build-options/disabling-flags.md",
          "examples/nRF51/http/boards/pca10028/armgcc/Makefile",
          "examples/nRF52/http/boards/pca10040/armgcc/Makefile",
          "mongoose.c",
          "mongoose.h"
        ],
        "message": "Fix DISABLE_MD5 and DISABLE_SHA1 naming\n\nPUBLISHED_FROM=2babde0d0c6add14aa500f4bf1c833715d979c6c",
        "before_after_code_files": [
          "mongoose.c||mongoose.c",
          "mongoose.h||mongoose.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "795: #if !defined(EXCLUDE_COMMON)",
          "",
          "[Removed Lines]",
          "796: #if !DISABLE_MD5",
          "",
          "[Added Lines]",
          "796: #if !CS_DISABLE_MD5",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1206: #if !DISABLE_SHA1 && !defined(EXCLUDE_COMMON)",
          "",
          "[Added Lines]",
          "1206: #if !CS_DISABLE_SHA1 && !defined(EXCLUDE_COMMON)",
          "",
          "---------------"
        ],
        "mongoose.h||mongoose.h": [
          "File: mongoose.h -> mongoose.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1802: #ifndef CS_COMMON_SHA1_H_",
          "1803: #define CS_COMMON_SHA1_H_",
          "1807: #endif",
          "",
          "[Removed Lines]",
          "1805: #ifndef DISABLE_SHA1",
          "1806: #define DISABLE_SHA1 0",
          "1809: #if !DISABLE_SHA1",
          "",
          "[Added Lines]",
          "1805: #ifndef CS_DISABLE_SHA1",
          "1806: #define CS_DISABLE_SHA1 0",
          "1809: #if !CS_DISABLE_SHA1",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1851: #endif",
          "1853: #ifdef __cplusplus",
          "",
          "[Removed Lines]",
          "1849: #ifndef DISABLE_MD5",
          "1850: #define DISABLE_MD5 0",
          "",
          "[Added Lines]",
          "1849: #ifndef CS_DISABLE_MD5",
          "1850: #define CS_DISABLE_MD5 0",
          "",
          "---------------"
        ]
      }
    }
  ]
}