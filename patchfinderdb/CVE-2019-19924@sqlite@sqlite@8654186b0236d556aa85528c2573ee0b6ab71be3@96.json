{
  "cve_id": "CVE-2019-19924",
  "cve_desc": "SQLite 3.30.1 mishandles certain parser-tree rewriting, related to expr.c, vdbeaux.c, and window.c. This is caused by incorrect sqlite3WindowRewrite() error handling.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
  "patch_info": {
    "commit_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8654186b0236d556aa85528c2573ee0b6ab71be3",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/vdbeaux.c",
      "src/window.c"
    ],
    "message": "When an error occurs while rewriting the parser tree for window functions in the sqlite3WindowRewrite() routine, make sure that pParse->nErr is set, and make sure that this shuts down any subsequent code generation that might depend on the transformations that were implemented.  This fixes a problem discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: e2bddcd4c55ba3cbe0130332679ff4b048630d0ced9a8899982edb5a3569ba7f",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/vdbeaux.c||src/vdbeaux.c",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4417c5bf0aabb34ed174f01afd981c924ae965a42128719d8d6735536631d12f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "376:   int addr;",
      "377:   CollSeq *p4;",
      "379:   if( isCommuted ){",
      "380:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
      "381:   }else{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:   if( pParse->nErr ) return 0;",
      "",
      "---------------"
    ],
    "src/vdbeaux.c||src/vdbeaux.c": [
      "File: src/vdbeaux.c -> src/vdbeaux.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1304: static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){",
      "1305:   assert( p->nOp>0 || p->aOp==0 );",
      "1307:   if( p->nOp ){",
      "1308:     assert( p->aOp );",
      "1309:     sqlite3DbFree(p->db, p->aOp[p->nOp-1].zComment);",
      "",
      "[Removed Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );",
      "",
      "[Added Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed",
      "1307:           || p->pParse->nErr>0 );",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "935:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
      "936:     if( pTab==0 ){",
      "938:     }",
      "940:     p->pSrc = 0;",
      "",
      "[Removed Lines]",
      "937:       return SQLITE_NOMEM;",
      "",
      "[Added Lines]",
      "937:       return sqlite3ErrorToParser(db, SQLITE_NOMEM);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1039:     sqlite3DbFree(db, pTab);",
      "1040:   }",
      "1042:   return rc;",
      "1043: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1042:   if( rc && pParse->nErr==0 ){",
      "1043:     assert( pParse->db->mallocFailed );",
      "1044:     return sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
      "1045:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1ab76166e3af6ab6e63615a61785ef489cd7b7de",
      "candidate_info": {
        "commit_hash": "1ab76166e3af6ab6e63615a61785ef489cd7b7de",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1ab76166e3af6ab6e63615a61785ef489cd7b7de",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Change another fts5 assert() that may fail with a corrupt database to an assert_nc().\n\nFossilOrigin-Name: d9653380c455b4bf6c371540d677cbde6d17664c58662b5cc9a12929f46192dd",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1711:   if( p->rc==SQLITE_OK ){",
          "1712:     pIter->iLeafOffset = 4;",
          "1713:     assert_nc( pIter->pLeaf->nn>4 );",
          "1715:     pIter->iPgidxOff = pIter->pLeaf->szLeaf+1;",
          "1716:     fts5SegIterLoadTerm(p, pIter, 0);",
          "1717:     fts5SegIterLoadNPos(p, pIter);",
          "",
          "[Removed Lines]",
          "1714:     assert( fts5LeafFirstTermOff(pIter->pLeaf)==4 );",
          "",
          "[Added Lines]",
          "1714:     assert_nc( fts5LeafFirstTermOff(pIter->pLeaf)==4 );",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "768: SELECT * FROM t1 WHERE t1 MATCH 'abandon';",
          "769: }]} {}",
          "772:   SELECT * FROM t1 WHERE t1 MATCH 'abandon';",
          "773: } {1 {vtable constructor failed: t1}}",
          "775: sqlite3_fts5_may_be_corrupt 0",
          "776: finish_test",
          "",
          "[Removed Lines]",
          "771: do_catchsql_test 14.1 {",
          "",
          "[Added Lines]",
          "771: do_catchsql_test 13.1 {",
          "775: #-------------------------------------------------------------------------",
          "776: reset_db",
          "777: do_test 14.0 {",
          "778:   sqlite3 db {}",
          "779:   db deserialize [decode_hexdb {",
          "780: | size 28672 pagesize 4096 filename c14b.db",
          "781: | page 1 offset 0",
          "782: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "783: |     16: 10 00 01 01 00 40 20 20 00 00 00 01 00 00 00 07   .....@  ........",
          "784: |     32: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "785: |     48: 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00   ................",
          "786: |     80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01   ................",
          "787: |     96: 00 2e 30 38 0d 00 00 00 07 0d d2 00 0f c4 0f 6d   ..08...........m",
          "788: |    112: 0f 02 0e ab 0e 4e 0d f6 0d d2 00 00 00 00 00 00   .....N..........",
          "789: |   3536: 00 00 22 07 06 17 11 11 01 31 74 61 62 6c 65 74   .........1tablet",
          "790: |   3552: 32 74 32 07 43 52 45 41 54 45 20 54 41 42 4c 45   2t2.CREATE TABLE",
          "791: |   3568: 20 74 32 28 78 29 56 06 06 17 1f 1f 01 7d 74 61    t2(x)V.......ta",
          "792: |   3584: 62 6c 65 74 31 5f 63 6f 6e 66 69 67 74 31 5f 63   blet1_configt1_c",
          "793: |   3600: 6f 6e 66 69 67 06 43 52 45 41 54 45 20 54 41 42   onfig.CREATE TAB",
          "794: |   3616: 4c 45 20 27 74 31 5f 63 6f 6e 66 69 67 27 28 6b   LE 't1_config'(k",
          "795: |   3632: 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 76 29    PRIMARY KEY, v)",
          "796: |   3648: 20 57 49 54 48 4f 55 54 20 52 4f 57 49 44 5b 05    WITHOUT ROWID[.",
          "797: |   3664: 07 17 21 21 01 81 01 74 61 62 6c 65 74 31 5f 64   ..!!...tablet1_d",
          "798: |   3680: 6f 63 73 69 7a 65 74 31 5f 64 6f 63 73 69 7a 65   ocsizet1_docsize",
          "799: |   3696: 05 43 52 45 41 54 45 20 54 41 42 4c 45 20 27 74   .CREATE TABLE 't",
          "800: |   3712: 31 5f 64 6f 63 73 69 7a 65 27 28 69 64 20 49 4e   1_docsize'(id IN",
          "801: |   3728: 54 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45   TEGER PRIMARY KE",
          "802: |   3744: 59 2c 20 73 7a 20 42 4c 4f 42 29 55 04 06 17 21   Y, sz BLOB)U...!",
          "803: |   3760: 21 01 77 74 61 62 6c 65 74 31 5f 63 6f 6e 74 65   !.wtablet1_conte",
          "804: |   3776: 6e 74 74 31 5f 63 6f 6e 74 65 6e 74 04 43 52 45   ntt1_content.CRE",
          "805: |   3792: 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 63 6f   ATE TABLE 't1_co",
          "806: |   3808: 6e 74 65 6e 74 27 28 69 64 20 49 4e 54 45 47 45   ntent'(id INTEGE",
          "807: |   3824: 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 63   R PRIMARY KEY, c",
          "808: |   3840: 30 29 69 03 07 17 19 19 01 81 2d 74 61 62 6c 65   0)i.......-table",
          "809: |   3856: 74 31 5f 69 64 78 74 31 5f 69 64 78 03 43 52 45   t1_idxt1_idx.CRE",
          "810: |   3872: 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 69 64   ATE TABLE 't1_id",
          "811: |   3888: 78 27 28 73 65 67 69 64 2c 20 74 65 72 6d 2c 20   x'(segid, term,",
          "812: |   3904: 70 67 6e 6f 2c 20 50 52 49 4d 41 52 59 20 4b 45   pgno, PRIMARY KE",
          "813: |   3920: 59 28 73 65 67 69 64 2c 20 74 65 72 6d 29 29 20   Y(segid, term))",
          "814: |   3936: 57 49 54 48 4f 55 54 20 52 4f 57 49 44 55 02 07   WITHOUT ROWIDU..",
          "815: |   3952: 17 1b 1b 01 81 01 74 61 62 6c 65 74 31 5f 64 61   ......tablet1_da",
          "816: |   3968: 74 61 74 31 5f 64 61 74 61 02 43 52 45 41 54 45   tat1_data.CREATE",
          "817: |   3984: 20 54 41 42 4c 45 20 27 74 31 5f 64 61 74 61 27    TABLE 't1_data'",
          "818: |   4000: 28 69 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d   (id INTEGER PRIM",
          "819: |   4016: 41 52 59 20 4b 45 59 2c 20 62 6c 6f 63 6b 20 42   ARY KEY, block B",
          "820: |   4032: 4c 4f 42 29 3a 01 06 17 11 11 08 63 74 61 62 6c   LOB):......ctabl",
          "821: |   4048: 65 74 31 74 31 43 52 45 41 54 45 20 56 49 52 54   et1t1CREATE VIRT",
          "822: |   4064: 55 41 4c 20 54 41 42 4c 45 20 74 31 20 55 53 49   UAL TABLE t1 USI",
          "823: |   4080: 4e 47 20 66 74 73 35 28 63 6f 6e 74 65 6e 74 29   NG fts5(content)",
          "824: | page 2 offset 4096",
          "825: |      0: 0d 0f ef 00 04 0f 18 00 0f e8 0f 18 0f bd 0f 2c   ...............,",
          "826: |   3856: 00 00 00 00 00 00 00 00 12 0a 03 00 2a 00 00 00   ............*...",
          "827: |   3872: 00 01 02 02 00 02 01 01 01 02 01 01 81 09 88 80   ................",
          "828: |   3888: 80 80 80 01 04 00 82 16 00 00 00 79 06 30 61 62   ...........y.0ab",
          "829: |   3904: 61 63 6b 08 02 07 04 04 6e 64 6f 6e 08 02 05 02   ack.....ndon....",
          "830: |   3920: 05 63 74 69 76 65 04 02 02 04 02 0b 02 04 6c 70   .ctive........lp",
          "831: |   3936: 68 61 08 04 02 0a 02 03 74 6b 6d 06 02 02 03 02   ha......tkm.....",
          "832: |   3952: 6f 6d 08 02 09 05 02 69 63 07 02 02 01 06 62 61   om.....ic.....ba",
          "833: |   3968: 63 6b 75 70 08 02 04 02 05 6f 6f 6d 65 72 05 02   ckup.....oomer..",
          "834: |   3984: 02 01 0c 63 68 61 6e 6e 65 62 6f 6f 6d 65 72 08   ...channeboomer.",
          "835: |   4000: 02 08 07 01 6c 08 02 03 01 04 74 65 73 74 08 02   ....l.....test..",
          "836: |   4016: 06 04 0a 09 0d 0a 08 07 07 0b 0a 11 06 24 84 80   .............$..",
          "837: |   4032: 80 80 80 01 03 00 4e 00 00 00 1e 06 30 61 62 61   ......N.....0aba",
          "838: |   4048: 63 6b 01 02 02 04 02 66 74 02 02 02 04 04 6e 64   ck.....ft.....nd",
          "839: |   4064: 6f 6e 03 02 02 03 9a 07 05 01 03 00 10 08 11 00   on..............",
          "840: |   4080: 00 00 11 24 00 00 00 00 01 01 01 00 01 01 01 01   ...$............",
          "841: | page 3 offset 8192",
          "842: |      0: 0a 00 00 00 02 0f f3 00 0f fa 0f f3 00 00 00 00   ................",
          "843: |   4080: 00 00 00 06 04 01 0c 01 02 02 05 04 09 0c 01 02   ................",
          "844: | page 4 offset 12288",
          "845: |      0: 0d 00 00 00 08 0f 6a 00 0f f6 0f ec 0f e0 0f d5   ......j.........",
          "846: |     16: 0f ca 0f c1 0f b6 0f 6a 00 00 00 00 00 00 00 00   .......j........",
          "847: |   3936: 00 00 00 00 00 00 00 00 00 00 4a 08 04 00 81 19   ..........J.....",
          "848: |   3952: 61 6c 70 68 61 20 63 68 61 6e 6e 65 6c 20 62 61   alpha channel ba",
          "849: |   3968: 63 6b 75 70 20 61 62 61 6e 64 6f 6e 20 74 65 73   ckup abandon tes",
          "850: |   3984: 74 20 61 62 61 63 6b 20 63 68 61 6e 6e 65 62 6f   t aback channebo",
          "851: |   4000: 6f 6d 65 72 20 61 74 6f 6d 20 61 6c 70 68 61 20   omer atom alpha",
          "852: |   4016: 61 63 74 69 76 65 09 07 03 00 19 61 74 6f 6d 69   active.....atomi",
          "853: |   4032: 63 07 06 03 00 15 61 74 6b 6d 09 05 03 00 19 62   c.....atkm.....b",
          "854: |   4048: 6f 6f 6d 65 72 09 04 03 00 19 61 63 74 69 76 65   oomer.....active",
          "855: |   4064: 0a 03 03 00 1b 61 62 61 6e 64 6f 6e 08 02 03 00   .....abandon....",
          "856: |   4080: 17 61 62 61 66 74 08 01 03 00 17 61 62 61 63 6b   .abaft.....aback",
          "857: | page 5 offset 16384",
          "858: |      0: 0d 00 00 00 08 0f d0 00 0f fa 0f f4 0f ee 0f e8   ................",
          "859: |     16: 0f e2 0f dc 0f d6 0f d0 00 00 00 00 00 00 00 00   ................",
          "860: |   4048: 04 08 03 00 0e 0a 04 07 03 00 0e 01 04 06 03 00   ................",
          "861: |   4064: 0e 01 04 05 03 00 0e 01 04 04 03 00 0e 01 04 03   ................",
          "862: |   4080: 03 00 0e 01 04 02 03 00 0e 01 04 01 03 00 0e 01   ................",
          "863: | page 6 offset 20480",
          "864: |      0: 0a 00 00 00 01 0f f4 00 0f f4 00 00 00 00 00 00   ................",
          "865: |   4080: 00 00 00 00 0b 03 1b 01 76 65 72 73 69 6f 6e 04   ........version.",
          "866: | page 7 offset 24576",
          "867: |      0: 0d 00 00 00 03 0f d6 00 0f f4 0f e1 0f d6 00 00   ................",
          "868: |   4048: 00 00 00 00 00 00 09 03 02 1b 72 65 62 75 69 6c   ..........rebuil",
          "869: |   4064: 64 11 02 02 2b 69 6e 74 65 67 72 69 74 79 2d 63   d...+integrity-c",
          "870: |   4080: 68 65 63 6b 0a 01 02 1d 6f 70 74 69 6d 69 7a 65   heck....optimize",
          "871: | end c14b.db",
          "872: }]} {}",
          "874: breakpoint",
          "875: do_catchsql_test 14.1 {",
          "876:   INSERT INTO t1(t1) VALUES('optimize');",
          "877: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d697f6f3ca47350dad30feb529914fc5254fa662ece783408eea963d912918c1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "62e009f3d89c837d83a366215332f0a0d04bfd04",
      "candidate_info": {
        "commit_hash": "62e009f3d89c837d83a366215332f0a0d04bfd04",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/62e009f3d89c837d83a366215332f0a0d04bfd04",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "New test cases in test/fuzzdata8.db.\n\nFossilOrigin-Name: ab2356f580384e4b40d128fc04fd6bc4dfcf50109df77d05d59adcc20f339066",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 177f5f40eabfcfd229ac7f291dfed9e9ee35762e86923a0f356915f389da177d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a407eccb6179ee033b8e83a6eab4734dd075664b",
      "candidate_info": {
        "commit_hash": "a407eccb6179ee033b8e83a6eab4734dd075664b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a407eccb6179ee033b8e83a6eab4734dd075664b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "test/insert.test"
        ],
        "message": "If replace triggers are run during uniqueness checking, then rerun all uniqueness checks a second time using the ABORT algorithm. Fix for ticket [c1e19e12046d23fe]\n\nFossilOrigin-Name: fbac0c65d8464b126d385262d176864add55452ec9e3d5eb76ffee06e820cb9c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "test/insert.test||test/insert.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ea068b099c96b8b9526114732d2a6be186cf381b7329d102778ad25b95510c9e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1483:     }",
          "1484:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1513:   if( (db->flags & (SQLITE_RecTriggers|SQLITE_ForeignKeys))==0 ){",
          "1516:     pTrigger = 0;",
          "1517:     regTrigCnt = 0;",
          "1518:   }else{",
          "1519:     if( db->flags&SQLITE_RecTriggers ){",
          "1520:       pTrigger = sqlite3TriggersExist(pParse, pTab, TK_DELETE, 0, 0);",
          "1521:       regTrigCnt = pTrigger!=0 || sqlite3FkRequired(pParse, pTab, 0, 0);",
          "1522:     }else{",
          "1523:       pTrigger = 0;",
          "1524:       regTrigCnt = sqlite3FkRequired(pParse, pTab, 0, 0);",
          "1525:     }",
          "1526:     if( regTrigCnt ){",
          "1529:       regTrigCnt = ++pParse->nMem;",
          "1530:       sqlite3VdbeAddOp2(v, OP_Integer, 0, regTrigCnt);",
          "1531:       VdbeComment((v, \"trigger count\"));",
          "1532:       lblRecheckOk = sqlite3VdbeMakeLabel(pParse);",
          "1533:       addrRecheck = lblRecheckOk;",
          "1534:     }",
          "1535:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1580:           sqlite3MultiWrite(pParse);",
          "1581:           sqlite3GenerateRowDelete(pParse, pTab, pTrigger, iDataCur, iIdxCur,",
          "1582:                                    regNewData, 1, 0, OE_Replace, 1, -1);",
          "1586:         }else{",
          "1587: #ifdef SQLITE_ENABLE_PREUPDATE_HOOK",
          "1588:           assert( HasRowid(pTab) );",
          "",
          "[Removed Lines]",
          "1575:         Trigger *pTrigger = 0;",
          "1576:         if( db->flags&SQLITE_RecTriggers ){",
          "1577:           pTrigger = sqlite3TriggersExist(pParse, pTab, TK_DELETE, 0, 0);",
          "1578:         }",
          "1579:         if( pTrigger || sqlite3FkRequired(pParse, pTab, 0, 0) ){",
          "1583:           sqlite3VdbeAddOp3(v, OP_NotExists, iDataCur, addrRowidOk, regNewData);",
          "1584:           VdbeCoverage(v);",
          "1585:           sqlite3RowidConstraint(pParse, OE_Abort, pTab);",
          "",
          "[Added Lines]",
          "1626:         if( regTrigCnt ){",
          "1631:           nReplaceTrig++;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1747:     sqlite3VdbeVerifyAbortable(v, onError);",
          "1752:     regR = (pIdx==pPk) ? regIdx : sqlite3GetTempRange(pParse, nPkField);",
          "",
          "[Removed Lines]",
          "1748:     sqlite3VdbeAddOp4Int(v, OP_NoConflict, iThisCur, addrUniqueOk,",
          "1749:                          regIdx, pIdx->nKeyCol); VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "1795:     addrConflictCk =",
          "1796:       sqlite3VdbeAddOp4Int(v, OP_NoConflict, iThisCur, addrUniqueOk,",
          "1797:                            regIdx, pIdx->nKeyCol); VdbeCoverage(v);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1829:         break;",
          "1830:       }",
          "1831:       default: {",
          "1834:         assert( onError==OE_Replace );",
          "1839:           sqlite3MultiWrite(pParse);",
          "1841:         }",
          "1842:         sqlite3GenerateRowDelete(pParse, pTab, pTrigger, iDataCur, iIdxCur,",
          "1843:             regR, nPkField, 0, OE_Replace,",
          "1844:             (pIdx==pPk ? ONEPASS_SINGLE : ONEPASS_OFF), iThisCur);",
          "1848:           sqlite3UniqueConstraint(pParse, OE_Abort, pIdx);",
          "1849:         }",
          "1850:         seenReplace = 1;",
          "1851:         break;",
          "",
          "[Removed Lines]",
          "1832:         Trigger *pTrigger = 0;",
          "1833:         int bRetryConstraintCheck = 0;",
          "1835:         if( db->flags&SQLITE_RecTriggers ){",
          "1836:           pTrigger = sqlite3TriggersExist(pParse, pTab, TK_DELETE, 0, 0);",
          "1837:         }",
          "1838:         if( pTrigger || sqlite3FkRequired(pParse, pTab, 0, 0) ){",
          "1840:           bRetryConstraintCheck = 1;",
          "1845:         if( bRetryConstraintCheck ){",
          "1846:           sqlite3VdbeAddOp4Int(v, OP_NoConflict, iThisCur, addrUniqueOk,",
          "1847:                                regIdx, pIdx->nKeyCol); VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "1883:         nConflictCk = sqlite3VdbeCurrentAddr(v) - addrConflictCk;",
          "1884:         if( regTrigCnt ){",
          "1886:           nReplaceTrig++;",
          "1891:         if( regTrigCnt ){",
          "1898:           VdbeComment((v, \"bypass recheck\"));",
          "1903:           sqlite3VdbeResolveLabel(v, lblRecheckOk);",
          "1904:           lblRecheckOk = sqlite3VdbeMakeLabel(pParse);",
          "1905:           if( pIdx->pPartIdxWhere ){",
          "1908:             sqlite3VdbeAddOp2(v, OP_IsNull, regIdx, lblRecheckOk);",
          "1909:             VdbeCoverage(v);",
          "1910:           }",
          "1914:           pOp = sqlite3VdbeGetOp(v, addrConflictCk);",
          "1915:           while( nConflictCk>0 && !db->mallocFailed ){",
          "1916:             if( sqlite3OpcodeProperty[pOp->opcode]&OPFLG_JUMP ){",
          "1917:               p2 = lblRecheckOk;",
          "1918:             }else{",
          "1919:               p2 = pOp->p2;",
          "1920:             }",
          "1921:             if( pOp->opcode!=OP_IdxRowid ){",
          "1922:               sqlite3VdbeAddOp4(v, pOp->opcode, pOp->p1, p2, pOp->p3,",
          "1923:                                 pOp->p4.z, pOp->p4type);",
          "1924:               sqlite3VdbeChangeP5(v, pOp->p5);",
          "1925:             }",
          "1926:             nConflictCk--;",
          "1927:             pOp++;",
          "1928:           }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1867:     sqlite3VdbeJumpHere(v, ipkBottom);",
          "1868:   }",
          "1871:   if( HasRowid(pTab) ){",
          "1872:     int regRec = aRegIdx[ix];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1955:   testcase( regTrigCnt!=0 && nReplaceTrig==0 );",
          "1956:   if( nReplaceTrig ){",
          "1957:     sqlite3VdbeAddOp2(v, OP_IfNot, regTrigCnt, lblRecheckOk);VdbeCoverage(v);",
          "1958:     if( !pPk ){",
          "1959:       if( isUpdate ){",
          "1960:         sqlite3VdbeAddOp3(v, OP_Eq, regNewData, addrRecheck, regOldData);",
          "1961:         sqlite3VdbeChangeP5(v, SQLITE_NOTNULL);",
          "1962:         VdbeCoverage(v);",
          "1963:       }",
          "1964:       sqlite3VdbeAddOp3(v, OP_NotExists, iDataCur, addrRecheck, regNewData);",
          "1965:       VdbeCoverage(v);",
          "1966:       sqlite3RowidConstraint(pParse, OE_Abort, pTab);",
          "1967:     }else{",
          "1968:       sqlite3VdbeGoto(v, addrRecheck);",
          "1969:     }",
          "1970:     sqlite3VdbeResolveLabel(v, lblRecheckOk);",
          "1971:   }",
          "",
          "---------------"
        ],
        "test/insert.test||test/insert.test": [
          "File: test/insert.test -> test/insert.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "519: } {1 {UNIQUE constraint failed: p1.b}}",
          "520: integrity_check insert-16.7",
          "526: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "522: # 2019-10-25 ticket c1e19e12046d23fe",
          "523: do_catchsql_test insert-17.1 {",
          "524:   PRAGMA temp.recursive_triggers = true;",
          "525:   DROP TABLE IF EXISTS t0;",
          "526:   CREATE TABLE t0(aa, bb);",
          "527:   CREATE UNIQUE INDEX t0bb ON t0(bb);",
          "528:   CREATE TRIGGER \"r17.1\" BEFORE DELETE ON t0",
          "529:     BEGIN INSERT INTO t0(aa,bb) VALUES(99,1);",
          "530:   END;",
          "531:   INSERT INTO t0(aa,bb) VALUES(10,20);",
          "532:   REPLACE INTO t0(aa,bb) VALUES(30,20);",
          "533: } {1 {UNIQUE constraint failed: t0.rowid}}",
          "534: integrity_check insert-17.2",
          "535: do_catchsql_test insert-17.3 {",
          "536:   DROP TABLE IF EXISTS t1;",
          "537:   CREATE TABLE t1(a, b UNIQUE, c UNIQUE);",
          "538:   INSERT INTO t1(a,b,c) VALUES(1,1,1),(2,2,2),(3,3,3),(4,4,4);",
          "539:   CREATE TRIGGER \"r17.3\" AFTER DELETE ON t1 WHEN OLD.c<>3 BEGIN",
          "540:     INSERT INTO t1(rowid,a,b,c) VALUES(100,100,100,3);",
          "541:   END;",
          "542:   REPLACE INTO t1(rowid,a,b,c) VALUES(200,1,2,3);",
          "543: } {1 {UNIQUE constraint failed: t1.c}}",
          "544: integrity_check insert-17.4",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "68748ec50924a77e19498766d5243851ca836d29",
      "candidate_info": {
        "commit_hash": "68748ec50924a77e19498766d5243851ca836d29",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/68748ec50924a77e19498766d5243851ca836d29",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c",
          "test/fuzzdata8.db"
        ],
        "message": "Futher improvements to the IN operator for row-values on virtual tables.\n\nFossilOrigin-Name: bc751fb64d5b08e5ca4c85cd1c6fbf09590fa9dad7e176ba373082ea373655b5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 344d9cb0c726078af6deb4a26bed3aded5b26914bb286d3446d3a4e9150840b7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1305:     iIn = pLevel->u.in.nIn;",
          "1306:     for(j=nConstraint-1; j>=0; j--){",
          "1307:       pTerm = pLoop->aLTerm[j];",
          "1308:       if( j<16 && (pLoop->u.vtab.omitMask>>j)&1 ){",
          "1309:         disableTerm(pLevel, pTerm);",
          "1310:       }else if( (pTerm->eOperator & WO_IN)!=0 &&",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1308:       if( (pTerm->eOperator & WO_IN)!=0 ) iIn--;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1321:         assert( pLevel->u.in.aInLoop!=0 || db->mallocFailed );",
          "1322:         if( !db->mallocFailed ){",
          "1325:           assert( pOp->opcode==OP_Column || pOp->opcode==OP_Rowid );",
          "1326:           assert( pOp->opcode!=OP_Column || pOp->p3==iReg+j+2 );",
          "1327:           assert( pOp->opcode!=OP_Rowid || pOp->p2==iReg+j+2 );",
          "",
          "[Removed Lines]",
          "1323:           assert( iIn>0 );",
          "1324:           pOp = sqlite3VdbeGetOp(v, pLevel->u.in.aInLoop[--iIn].addrInTop);",
          "",
          "[Added Lines]",
          "1324:           assert( iIn>=0 && iIn<pLevel->u.in.nIn );",
          "1325:           pOp = sqlite3VdbeGetOp(v, pLevel->u.in.aInLoop[iIn].addrInTop);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1345:         }",
          "1346:       }",
          "1347:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1349:     assert( iIn==0 || db->mallocFailed );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6c68d7592faa8cc59d5f81f3ba4d506ea4db71ca",
      "candidate_info": {
        "commit_hash": "6c68d7592faa8cc59d5f81f3ba4d506ea4db71ca",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6c68d7592faa8cc59d5f81f3ba4d506ea4db71ca",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/rowvalue.test"
        ],
        "message": "Fix a false-postive in the sqlite3ExprImpliesNonNullRow() decision routine, that resulted in an incorrect LEFT JOIN strength reduction when the WHERE clause contained a row-value comparison. Ticket [02aa2bd02f97d0f2]\n\nFossilOrigin-Name: ea20068e6d97c9349ebcc7d0a01e99ebf08c6f44363f71a0218a1abea209adc5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/rowvalue.test||test/rowvalue.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3be19e1151af1850b65991edb82420f9412a7798dd756c86eaa9ffdde573263a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5230:     case TK_NOTNULL:",
          "5231:     case TK_IS:",
          "5232:     case TK_OR:",
          "5233:     case TK_CASE:",
          "5234:     case TK_IN:",
          "5235:     case TK_FUNCTION:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5233:     case TK_VECTOR:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5239:       testcase( pExpr->op==TK_NOTNULL );",
          "5240:       testcase( pExpr->op==TK_IS );",
          "5241:       testcase( pExpr->op==TK_OR );",
          "5242:       testcase( pExpr->op==TK_CASE );",
          "5243:       testcase( pExpr->op==TK_IN );",
          "5244:       testcase( pExpr->op==TK_FUNCTION );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5243:       testcase( pExpr->op==TK_VECTOR );",
          "",
          "---------------"
        ],
        "test/rowvalue.test||test/rowvalue.test": [
          "File: test/rowvalue.test -> test/rowvalue.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "616:   SELECT 2 FROM t0 WHERE (t0.c0 COLLATE nocase, 0) < ('B', 0);",
          "617: } {1 2}",
          "620: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "619: # 2019-11-04 Ticket 02aa2bd02f97d0f2",
          "620: # The TK_VECTOR operator messes up sqlite3ExprImpliesNonNull() which",
          "621: # causes incorrect LEFT JOIN strength reduction.  TK_VECTOR should be",
          "622: # treated the same as TK_OR.",
          "623: #",
          "624: db close",
          "625: sqlite3 db :memory:",
          "626: do_execsql_test 26.10 {",
          "627:   CREATE TABLE t0(c0);",
          "628:   CREATE TABLE t1(c1);",
          "629:   INSERT INTO t1(c1) VALUES (0);",
          "630:   SELECT (c0, x'') != (NULL, 0) FROM t1 LEFT JOIN t0;",
          "631: } {1}",
          "632: do_execsql_test 26.20 {",
          "633:   SELECT 2 FROM t1 LEFT JOIN t0 ON (c0, x'') != (NULL, 0);",
          "634: } {2}",
          "635: do_execsql_test 26.30 {",
          "636:   SELECT 3 FROM t1 LEFT JOIN t0 WHERE (c0, x'') != (NULL, 0);",
          "637: } {3}",
          "",
          "---------------"
        ]
      }
    }
  ]
}