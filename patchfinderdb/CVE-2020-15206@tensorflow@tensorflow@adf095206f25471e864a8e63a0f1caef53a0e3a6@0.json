{
  "cve_id": "CVE-2020-15206",
  "cve_desc": "In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, changing the TensorFlow's `SavedModel` protocol buffer and altering the name of required keys results in segfaults and data corruption while loading the model. This can cause a denial of service in products using `tensorflow-serving` or other inference-as-a-service installments. Fixed were added in commits f760f88b4267d981e13f4b302c437ae800445968 and fcfef195637c6e365577829c4d67681695956e7d (both going into TensorFlow 2.2.0 and 2.3.0 but not yet backported to earlier versions). However, this was not enough, as #41097 reports a different failure mode. The issue is patched in commit adf095206f25471e864a8e63a0f1caef53a0e3a6, and is released in TensorFlow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "adf095206f25471e864a8e63a0f1caef53a0e3a6",
  "patch_info": {
    "commit_hash": "adf095206f25471e864a8e63a0f1caef53a0e3a6",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/adf095206f25471e864a8e63a0f1caef53a0e3a6",
    "files": [
      "tensorflow/cc/saved_model/loader.cc",
      "tensorflow/cc/saved_model/saved_model_bundle_test.cc",
      "tensorflow/cc/saved_model/testdata/fuzz_generated/bad_node_attr/assets/empty",
      "tensorflow/cc/saved_model/testdata/fuzz_generated/bad_node_attr/saved_model.pb",
      "tensorflow/cc/saved_model/testdata/fuzz_generated/bad_node_attr/variables/variables.data-00000-of-00001",
      "tensorflow/cc/saved_model/testdata/fuzz_generated/bad_node_attr/variables/variables.index"
    ],
    "message": "Validate `NodeDef`s from `FunctionDefLibrary` of a `GraphDef`.\n\nWe already validated `NodeDef`s from a `GraphDef` but missed validating those from the `FunctionDefLibrary`. Thus, some maliciously crafted models could evade detection and cause denial of service due to a `CHECK`-fail.\n\nPiperOrigin-RevId: 332536309\nChange-Id: I052efe919ff1fe2f90815e286a1aa4c54c7b94ff",
    "before_after_code_files": [
      "tensorflow/cc/saved_model/loader.cc||tensorflow/cc/saved_model/loader.cc",
      "tensorflow/cc/saved_model/saved_model_bundle_test.cc||tensorflow/cc/saved_model/saved_model_bundle_test.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/cc/saved_model/loader.cc||tensorflow/cc/saved_model/loader.cc": [
      "File: tensorflow/cc/saved_model/loader.cc -> tensorflow/cc/saved_model/loader.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "21: #include \"tensorflow/cc/saved_model/loader_util.h\"",
      "22: #include \"tensorflow/cc/saved_model/reader.h\"",
      "23: #include \"tensorflow/core/framework/attr_value.pb.h\"",
      "24: #include \"tensorflow/core/framework/node_def.pb.h\"",
      "25: #include \"tensorflow/core/framework/tensor.pb.h\"",
      "26: #include \"tensorflow/core/lib/io/path.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: #include \"tensorflow/core/framework/function.pb.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "76: static Status ValidateSavedTensors(const GraphDef& graph_def) {",
      "77:   for (const auto& node : graph_def.node()) {",
      "89:       }",
      "94:     }",
      "95:   }",
      "96:   return Status::OK();",
      "97: }",
      "",
      "[Removed Lines]",
      "78:     const auto node_iterator = node.attr().find(\"value\");",
      "79:     if (node_iterator != node.attr().end()) {",
      "80:       AttrValue node_value = node_iterator->second;",
      "81:       if (node_value.has_tensor()) {",
      "82:         const PartialTensorShape node_shape(node_value.tensor().tensor_shape());",
      "83:         if (node_shape.num_elements() < 0) {",
      "84:           return errors::FailedPrecondition(",
      "85:               \"Saved model contains node \\\"\", node.name(), \"\\\" (op \\\"\",",
      "86:               node.op(), \"\\\") which initializes from a tensor with \",",
      "87:               node_shape.num_elements(), \" elements\");",
      "88:         }",
      "90:     } else if (node.op() == \"Const\") {",
      "91:       return errors::FailedPrecondition(",
      "92:           \"Saved model contains node \\\"\", node.name(),",
      "93:           \"\\\" which is a constant tensor but no value has been provided\");",
      "",
      "[Added Lines]",
      "77: static Status ValidateNode(const NodeDef& node) {",
      "78:   const auto node_iterator = node.attr().find(\"value\");",
      "79:   if (node_iterator != node.attr().end()) {",
      "80:     AttrValue node_value = node_iterator->second;",
      "81:     if (node_value.has_tensor()) {",
      "82:       const PartialTensorShape node_shape(node_value.tensor().tensor_shape());",
      "83:       if (node_shape.num_elements() < 0) {",
      "84:         return errors::FailedPrecondition(",
      "85:             \"Saved model contains node \\\"\", node.name(), \"\\\" (op \\\"\", node.op(),",
      "86:             \"\\\") which initializes from a tensor with \",",
      "87:             node_shape.num_elements(), \" elements\");",
      "88:       }",
      "89:     }",
      "90:   } else if (node.op() == \"Const\") {",
      "91:     return errors::FailedPrecondition(",
      "92:         \"Saved model contains node \\\"\", node.name(),",
      "93:         \"\\\" which is a constant tensor but no value has been provided\");",
      "94:   }",
      "95:   return Status::OK();",
      "96: }",
      "100:     TF_RETURN_IF_ERROR(ValidateNode(node));",
      "101:   }",
      "103:   if (graph_def.has_library()) {",
      "104:     const FunctionDefLibrary& library = graph_def.library();",
      "105:     for (const auto& function : library.function()) {",
      "106:       for (const auto& node : function.node_def()) {",
      "107:         TF_RETURN_IF_ERROR(ValidateNode(node));",
      "",
      "---------------"
    ],
    "tensorflow/cc/saved_model/saved_model_bundle_test.cc||tensorflow/cc/saved_model/saved_model_bundle_test.cc": [
      "File: tensorflow/cc/saved_model/saved_model_bundle_test.cc -> tensorflow/cc/saved_model/saved_model_bundle_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "45:     \"cc/saved_model/testdata/fuzz_generated/negative_shape\";",
      "46: constexpr char kTestFuzzGeneratedConstWithNoValue[] =",
      "47:     \"cc/saved_model/testdata/fuzz_generated/const_with_no_value\";",
      "49: class LoaderTest : public ::testing::Test {",
      "50:  protected:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "48: constexpr char kTestFuzzGeneratedBadNodeAttr[] =",
      "49:     \"cc/saved_model/testdata/fuzz_generated/bad_node_attr\";",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "328:       std::string::npos);",
      "329: }",
      "331: }  // namespace",
      "332: }  // namespace tensorflow",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333: TEST_F(LoaderTest, BadNodeAttr) {",
      "334:   SavedModelBundle bundle;",
      "335:   RunOptions run_options;",
      "336:   SessionOptions session_options;",
      "338:   const string export_dir =",
      "339:       io::JoinPath(testing::TensorFlowSrcRoot(), kTestFuzzGeneratedBadNodeAttr);",
      "340:   Status st = LoadSavedModel(session_options, run_options, export_dir,",
      "341:                              {kSavedModelTagServe}, &bundle);",
      "342:   EXPECT_FALSE(st.ok());",
      "343:   EXPECT_NE(",
      "344:       st.error_message().find(\"constant tensor but no value has been provided\"),",
      "345:       std::string::npos);",
      "346: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9a64529bd4b8a01ff05480c72dbcc833914f9636",
      "candidate_info": {
        "commit_hash": "9a64529bd4b8a01ff05480c72dbcc833914f9636",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/9a64529bd4b8a01ff05480c72dbcc833914f9636",
        "files": [
          "tensorflow/cc/saved_model/loader.cc"
        ],
        "message": "Validate `NodeDef`s from `FunctionDefLibrary` of a `GraphDef`.\n\nWe already validated `NodeDef`s from a `GraphDef` but missed validating those from the `FunctionDefLibrary`. Thus, some maliciously crafted models could evade detection and cause denial of service due to a `CHECK`-fail.\n\nPiperOrigin-RevId: 332536309\nChange-Id: I052efe919ff1fe2f90815e286a1aa4c54c7b94ff",
        "before_after_code_files": [
          "tensorflow/cc/saved_model/loader.cc||tensorflow/cc/saved_model/loader.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/cc/saved_model/loader.cc||tensorflow/cc/saved_model/loader.cc"
          ],
          "candidate": [
            "tensorflow/cc/saved_model/loader.cc||tensorflow/cc/saved_model/loader.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/cc/saved_model/loader.cc||tensorflow/cc/saved_model/loader.cc": [
          "File: tensorflow/cc/saved_model/loader.cc -> tensorflow/cc/saved_model/loader.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include \"tensorflow/cc/saved_model/loader_util.h\"",
          "22: #include \"tensorflow/cc/saved_model/reader.h\"",
          "23: #include \"tensorflow/core/framework/attr_value.pb.h\"",
          "24: #include \"tensorflow/core/framework/node_def.pb.h\"",
          "25: #include \"tensorflow/core/framework/tensor.pb.h\"",
          "26: #include \"tensorflow/core/lib/io/path.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #include \"tensorflow/core/framework/function.proto.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75: static Status ValidateSavedTensors(const GraphDef& graph_def) {",
          "76:   for (const auto& node : graph_def.node()) {",
          "88:       }",
          "93:     }",
          "94:   }",
          "95:   return Status::OK();",
          "96: }",
          "",
          "[Removed Lines]",
          "77:     const auto node_iterator = node.attr().find(\"value\");",
          "78:     if (node_iterator != node.attr().end()) {",
          "79:       AttrValue node_value = node_iterator->second;",
          "80:       if (node_value.has_tensor()) {",
          "81:         const PartialTensorShape node_shape(node_value.tensor().tensor_shape());",
          "82:         if (node_shape.num_elements() < 0) {",
          "83:           return errors::FailedPrecondition(",
          "84:               \"Saved model contains node \\\"\", node.name(), \"\\\" (op \\\"\",",
          "85:               node.op(), \"\\\") which initializes from a tensor with \",",
          "86:               node_shape.num_elements(), \" elements\");",
          "87:         }",
          "89:     } else if (node.op() == \"Const\") {",
          "90:       return errors::FailedPrecondition(",
          "91:           \"Saved model contains node \\\"\", node.name(),",
          "92:           \"\\\" which is a constant tensor but no value has been provided\");",
          "",
          "[Added Lines]",
          "76: static Status ValidateNode(const NodeDef& node) {",
          "77:   const auto node_iterator = node.attr().find(\"value\");",
          "78:   if (node_iterator != node.attr().end()) {",
          "79:     AttrValue node_value = node_iterator->second;",
          "80:     if (node_value.has_tensor()) {",
          "81:       const PartialTensorShape node_shape(node_value.tensor().tensor_shape());",
          "82:       if (node_shape.num_elements() < 0) {",
          "83:         return errors::FailedPrecondition(",
          "84:             \"Saved model contains node \\\"\", node.name(), \"\\\" (op \\\"\", node.op(),",
          "85:             \"\\\") which initializes from a tensor with \",",
          "86:             node_shape.num_elements(), \" elements\");",
          "87:       }",
          "88:     }",
          "89:   } else if (node.op() == \"Const\") {",
          "90:     return errors::FailedPrecondition(",
          "91:         \"Saved model contains node \\\"\", node.name(),",
          "92:         \"\\\" which is a constant tensor but no value has been provided\");",
          "93:   }",
          "94:   return Status::OK();",
          "95: }",
          "99:     TF_RETURN_IF_ERROR(ValidateNode(node));",
          "100:   }",
          "102:   if (graph_def.has_library()) {",
          "103:     const FunctionDefLibrary& library = graph_def.library();",
          "104:     for (const auto& function : library.function()) {",
          "105:       for (const auto& node : function.node_def()) {",
          "106:  TF_RETURN_IF_ERROR(ValidateNode(node));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "64b4b3295cb29f84d2338a4bf86f4c42e4462750",
      "candidate_info": {
        "commit_hash": "64b4b3295cb29f84d2338a4bf86f4c42e4462750",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/64b4b3295cb29f84d2338a4bf86f4c42e4462750",
        "files": [
          "tensorflow/cc/saved_model/loader.cc"
        ],
        "message": "Validate `NodeDef`s from `FunctionDefLibrary` of a `GraphDef`.\n\nWe already validated `NodeDef`s from a `GraphDef` but missed validating those from the `FunctionDefLibrary`. Thus, some maliciously crafted models could evade detection and cause denial of service due to a `CHECK`-fail.\n\nPiperOrigin-RevId: 332536309\nChange-Id: I052efe919ff1fe2f90815e286a1aa4c54c7b94ff",
        "before_after_code_files": [
          "tensorflow/cc/saved_model/loader.cc||tensorflow/cc/saved_model/loader.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/cc/saved_model/loader.cc||tensorflow/cc/saved_model/loader.cc"
          ],
          "candidate": [
            "tensorflow/cc/saved_model/loader.cc||tensorflow/cc/saved_model/loader.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/cc/saved_model/loader.cc||tensorflow/cc/saved_model/loader.cc": [
          "File: tensorflow/cc/saved_model/loader.cc -> tensorflow/cc/saved_model/loader.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #include \"tensorflow/cc/saved_model/constants.h\"",
          "21: #include \"tensorflow/cc/saved_model/reader.h\"",
          "22: #include \"tensorflow/core/framework/attr_value.pb.h\"",
          "23: #include \"tensorflow/core/framework/node_def.pb.h\"",
          "24: #include \"tensorflow/core/framework/tensor.pb.h\"",
          "25: #include \"tensorflow/core/lib/io/path.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include \"tensorflow/core/framework/function.proto.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75: static Status ValidateSavedTensors(const GraphDef& graph_def) {",
          "76:   for (const auto& node : graph_def.node()) {",
          "88:       }",
          "93:     }",
          "94:   }",
          "95:   return Status::OK();",
          "96: }",
          "",
          "[Removed Lines]",
          "77:     const auto node_iterator = node.attr().find(\"value\");",
          "78:     if (node_iterator != node.attr().end()) {",
          "79:       AttrValue node_value = node_iterator->second;",
          "80:       if (node_value.has_tensor()) {",
          "81:         const PartialTensorShape node_shape(node_value.tensor().tensor_shape());",
          "82:         if (node_shape.num_elements() < 0) {",
          "83:           return errors::FailedPrecondition(",
          "84:               \"Saved model contains node \\\"\", node.name(), \"\\\" (op \\\"\",",
          "85:               node.op(), \"\\\") which initializes from a tensor with \",",
          "86:               node_shape.num_elements(), \" elements\");",
          "87:         }",
          "89:     } else if (node.op() == \"Const\") {",
          "90:       return errors::FailedPrecondition(",
          "91:           \"Saved model contains node \\\"\", node.name(),",
          "92:           \"\\\" which is a constant tensor but no value has been provided\");",
          "",
          "[Added Lines]",
          "76: static Status ValidateNode(const NodeDef& node) {",
          "77:   const auto node_iterator = node.attr().find(\"value\");",
          "78:   if (node_iterator != node.attr().end()) {",
          "79:     AttrValue node_value = node_iterator->second;",
          "80:     if (node_value.has_tensor()) {",
          "81:       const PartialTensorShape node_shape(node_value.tensor().tensor_shape());",
          "82:       if (node_shape.num_elements() < 0) {",
          "83:         return errors::FailedPrecondition(",
          "84:             \"Saved model contains node \\\"\", node.name(), \"\\\" (op \\\"\", node.op(),",
          "85:             \"\\\") which initializes from a tensor with \",",
          "86:             node_shape.num_elements(), \" elements\");",
          "87:       }",
          "88:     }",
          "89:   } else if (node.op() == \"Const\") {",
          "90:     return errors::FailedPrecondition(",
          "91:         \"Saved model contains node \\\"\", node.name(),",
          "92:         \"\\\" which is a constant tensor but no value has been provided\");",
          "93:   }",
          "94:   return Status::OK();",
          "95: }",
          "99:     TF_RETURN_IF_ERROR(ValidateNode(node));",
          "100:   }",
          "102:   if (graph_def.has_library()) {",
          "103:     const FunctionDefLibrary& library = graph_def.library();",
          "104:     for (const auto& function : library.function()) {",
          "105:       for (const auto& node : function.node_def()) {",
          "106:  TF_RETURN_IF_ERROR(ValidateNode(node));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4c1c846f604eb5b287ca74b6d6b571742f118ea7",
      "candidate_info": {
        "commit_hash": "4c1c846f604eb5b287ca74b6d6b571742f118ea7",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/4c1c846f604eb5b287ca74b6d6b571742f118ea7",
        "files": [
          "tensorflow/cc/saved_model/loader.cc"
        ],
        "message": "Validate `NodeDef`s from `FunctionDefLibrary` of a `GraphDef`.\n\nWe already validated `NodeDef`s from a `GraphDef` but missed validating those from the `FunctionDefLibrary`. Thus, some maliciously crafted models could evade detection and cause denial of service due to a `CHECK`-fail.\n\nPiperOrigin-RevId: 332536309\nChange-Id: I052efe919ff1fe2f90815e286a1aa4c54c7b94ff",
        "before_after_code_files": [
          "tensorflow/cc/saved_model/loader.cc||tensorflow/cc/saved_model/loader.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/cc/saved_model/loader.cc||tensorflow/cc/saved_model/loader.cc"
          ],
          "candidate": [
            "tensorflow/cc/saved_model/loader.cc||tensorflow/cc/saved_model/loader.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/cc/saved_model/loader.cc||tensorflow/cc/saved_model/loader.cc": [
          "File: tensorflow/cc/saved_model/loader.cc -> tensorflow/cc/saved_model/loader.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #include \"tensorflow/cc/saved_model/constants.h\"",
          "21: #include \"tensorflow/cc/saved_model/reader.h\"",
          "22: #include \"tensorflow/core/framework/attr_value.pb.h\"",
          "23: #include \"tensorflow/core/framework/node_def.pb.h\"",
          "24: #include \"tensorflow/core/framework/tensor.pb.h\"",
          "25: #include \"tensorflow/core/lib/io/path.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include \"tensorflow/core/framework/function.proto.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74: static Status ValidateSavedTensors(const GraphDef& graph_def) {",
          "75:   for (const auto& node : graph_def.node()) {",
          "87:       }",
          "92:     }",
          "93:   }",
          "94:   return Status::OK();",
          "95: }",
          "",
          "[Removed Lines]",
          "76:     const auto node_iterator = node.attr().find(\"value\");",
          "77:     if (node_iterator != node.attr().end()) {",
          "78:       AttrValue node_value = node_iterator->second;",
          "79:       if (node_value.has_tensor()) {",
          "80:         const PartialTensorShape node_shape(node_value.tensor().tensor_shape());",
          "81:         if (node_shape.num_elements() < 0) {",
          "82:           return errors::FailedPrecondition(",
          "83:               \"Saved model contains node \\\"\", node.name(), \"\\\" (op \\\"\",",
          "84:               node.op(), \"\\\") which initializes from a tensor with \",",
          "85:               node_shape.num_elements(), \" elements\");",
          "86:         }",
          "88:     } else if (node.op() == \"Const\") {",
          "89:       return errors::FailedPrecondition(",
          "90:           \"Saved model contains node \\\"\", node.name(),",
          "91:           \"\\\" which is a constant tensor but no value has been provided\");",
          "",
          "[Added Lines]",
          "75: static Status ValidateNode(const NodeDef& node) {",
          "76:   const auto node_iterator = node.attr().find(\"value\");",
          "77:   if (node_iterator != node.attr().end()) {",
          "78:     AttrValue node_value = node_iterator->second;",
          "79:     if (node_value.has_tensor()) {",
          "80:       const PartialTensorShape node_shape(node_value.tensor().tensor_shape());",
          "81:       if (node_shape.num_elements() < 0) {",
          "82:         return errors::FailedPrecondition(",
          "83:             \"Saved model contains node \\\"\", node.name(), \"\\\" (op \\\"\", node.op(),",
          "84:             \"\\\") which initializes from a tensor with \",",
          "85:             node_shape.num_elements(), \" elements\");",
          "86:       }",
          "87:     }",
          "88:   } else if (node.op() == \"Const\") {",
          "89:     return errors::FailedPrecondition(",
          "90:         \"Saved model contains node \\\"\", node.name(),",
          "91:         \"\\\" which is a constant tensor but no value has been provided\");",
          "92:   }",
          "93:   return Status::OK();",
          "94: }",
          "98:     TF_RETURN_IF_ERROR(ValidateNode(node));",
          "99:   }",
          "101:   if (graph_def.has_library()) {",
          "102:     const FunctionDefLibrary& library = graph_def.library();",
          "103:     for (const auto& function : library.function()) {",
          "104:       for (const auto& node : function.node_def()) {",
          "105:  TF_RETURN_IF_ERROR(ValidateNode(node));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "186d563b38a601abe7c9b71bc2a3cfd40cc2c944",
      "candidate_info": {
        "commit_hash": "186d563b38a601abe7c9b71bc2a3cfd40cc2c944",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/186d563b38a601abe7c9b71bc2a3cfd40cc2c944",
        "files": [
          "tensorflow/cc/saved_model/loader.cc"
        ],
        "message": "Validate `NodeDef`s from `FunctionDefLibrary` of a `GraphDef`.\n\nWe already validated `NodeDef`s from a `GraphDef` but missed validating those from the `FunctionDefLibrary`. Thus, some maliciously crafted models could evade detection and cause denial of service due to a `CHECK`-fail.\n\nPiperOrigin-RevId: 332536309\nChange-Id: I052efe919ff1fe2f90815e286a1aa4c54c7b94ff",
        "before_after_code_files": [
          "tensorflow/cc/saved_model/loader.cc||tensorflow/cc/saved_model/loader.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/cc/saved_model/loader.cc||tensorflow/cc/saved_model/loader.cc"
          ],
          "candidate": [
            "tensorflow/cc/saved_model/loader.cc||tensorflow/cc/saved_model/loader.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/cc/saved_model/loader.cc||tensorflow/cc/saved_model/loader.cc": [
          "File: tensorflow/cc/saved_model/loader.cc -> tensorflow/cc/saved_model/loader.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #include \"tensorflow/cc/saved_model/constants.h\"",
          "21: #include \"tensorflow/cc/saved_model/reader.h\"",
          "22: #include \"tensorflow/core/framework/attr_value.pb.h\"",
          "23: #include \"tensorflow/core/framework/node_def.pb.h\"",
          "24: #include \"tensorflow/core/framework/tensor.pb.h\"",
          "25: #include \"tensorflow/core/lib/io/path.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include \"tensorflow/core/framework/function.proto.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75: static Status ValidateSavedTensors(const GraphDef& graph_def) {",
          "76:   for (const auto& node : graph_def.node()) {",
          "88:       }",
          "93:     }",
          "94:   }",
          "95:   return Status::OK();",
          "96: }",
          "",
          "[Removed Lines]",
          "77:     const auto node_iterator = node.attr().find(\"value\");",
          "78:     if (node_iterator != node.attr().end()) {",
          "79:       AttrValue node_value = node_iterator->second;",
          "80:       if (node_value.has_tensor()) {",
          "81:         const PartialTensorShape node_shape(node_value.tensor().tensor_shape());",
          "82:         if (node_shape.num_elements() < 0) {",
          "83:           return errors::FailedPrecondition(",
          "84:               \"Saved model contains node \\\"\", node.name(), \"\\\" (op \\\"\",",
          "85:               node.op(), \"\\\") which initializes from a tensor with \",",
          "86:               node_shape.num_elements(), \" elements\");",
          "87:         }",
          "89:     } else if (node.op() == \"Const\") {",
          "90:       return errors::FailedPrecondition(",
          "91:           \"Saved model contains node \\\"\", node.name(),",
          "92:           \"\\\" which is a constant tensor but no value has been provided\");",
          "",
          "[Added Lines]",
          "76: static Status ValidateNode(const NodeDef& node) {",
          "77:   const auto node_iterator = node.attr().find(\"value\");",
          "78:   if (node_iterator != node.attr().end()) {",
          "79:     AttrValue node_value = node_iterator->second;",
          "80:     if (node_value.has_tensor()) {",
          "81:       const PartialTensorShape node_shape(node_value.tensor().tensor_shape());",
          "82:       if (node_shape.num_elements() < 0) {",
          "83:         return errors::FailedPrecondition(",
          "84:             \"Saved model contains node \\\"\", node.name(), \"\\\" (op \\\"\", node.op(),",
          "85:             \"\\\") which initializes from a tensor with \",",
          "86:             node_shape.num_elements(), \" elements\");",
          "87:       }",
          "88:     }",
          "89:   } else if (node.op() == \"Const\") {",
          "90:     return errors::FailedPrecondition(",
          "91:         \"Saved model contains node \\\"\", node.name(),",
          "92:         \"\\\" which is a constant tensor but no value has been provided\");",
          "93:   }",
          "94:   return Status::OK();",
          "95: }",
          "99:     TF_RETURN_IF_ERROR(ValidateNode(node));",
          "100:   }",
          "102:   if (graph_def.has_library()) {",
          "103:     const FunctionDefLibrary& library = graph_def.library();",
          "104:     for (const auto& function : library.function()) {",
          "105:       for (const auto& node : function.node_def()) {",
          "106:  TF_RETURN_IF_ERROR(ValidateNode(node));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "05f1d078826805ec55a7e238e2d0d5a4c0cd6733",
      "candidate_info": {
        "commit_hash": "05f1d078826805ec55a7e238e2d0d5a4c0cd6733",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/05f1d078826805ec55a7e238e2d0d5a4c0cd6733",
        "files": [
          "tensorflow/cc/saved_model/loader.cc"
        ],
        "message": "Validate `NodeDef`s from `FunctionDefLibrary` of a `GraphDef`.\n\nWe already validated `NodeDef`s from a `GraphDef` but missed validating those from the `FunctionDefLibrary`. Thus, some maliciously crafted models could evade detection and cause denial of service due to a `CHECK`-fail.\n\nPiperOrigin-RevId: 332536309\nChange-Id: I052efe919ff1fe2f90815e286a1aa4c54c7b94ff",
        "before_after_code_files": [
          "tensorflow/cc/saved_model/loader.cc||tensorflow/cc/saved_model/loader.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/cc/saved_model/loader.cc||tensorflow/cc/saved_model/loader.cc"
          ],
          "candidate": [
            "tensorflow/cc/saved_model/loader.cc||tensorflow/cc/saved_model/loader.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/cc/saved_model/loader.cc||tensorflow/cc/saved_model/loader.cc": [
          "File: tensorflow/cc/saved_model/loader.cc -> tensorflow/cc/saved_model/loader.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #include \"tensorflow/cc/saved_model/constants.h\"",
          "21: #include \"tensorflow/cc/saved_model/reader.h\"",
          "22: #include \"tensorflow/core/framework/attr_value.pb.h\"",
          "23: #include \"tensorflow/core/framework/node_def.pb.h\"",
          "24: #include \"tensorflow/core/framework/tensor.pb.h\"",
          "25: #include \"tensorflow/core/lib/io/path.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include \"tensorflow/core/framework/function.proto.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74: static Status ValidateSavedTensors(const GraphDef& graph_def) {",
          "75:   for (const auto& node : graph_def.node()) {",
          "87:       }",
          "92:     }",
          "93:   }",
          "94:   return Status::OK();",
          "95: }",
          "",
          "[Removed Lines]",
          "76:     const auto node_iterator = node.attr().find(\"value\");",
          "77:     if (node_iterator != node.attr().end()) {",
          "78:       AttrValue node_value = node_iterator->second;",
          "79:       if (node_value.has_tensor()) {",
          "80:         const PartialTensorShape node_shape(node_value.tensor().tensor_shape());",
          "81:         if (node_shape.num_elements() < 0) {",
          "82:           return errors::FailedPrecondition(",
          "83:               \"Saved model contains node \\\"\", node.name(), \"\\\" (op \\\"\",",
          "84:               node.op(), \"\\\") which initializes from a tensor with \",",
          "85:               node_shape.num_elements(), \" elements\");",
          "86:         }",
          "88:     } else if (node.op() == \"Const\") {",
          "89:       return errors::FailedPrecondition(",
          "90:           \"Saved model contains node \\\"\", node.name(),",
          "91:           \"\\\" which is a constant tensor but no value has been provided\");",
          "",
          "[Added Lines]",
          "75: static Status ValidateNode(const NodeDef& node) {",
          "76:   const auto node_iterator = node.attr().find(\"value\");",
          "77:   if (node_iterator != node.attr().end()) {",
          "78:     AttrValue node_value = node_iterator->second;",
          "79:     if (node_value.has_tensor()) {",
          "80:       const PartialTensorShape node_shape(node_value.tensor().tensor_shape());",
          "81:       if (node_shape.num_elements() < 0) {",
          "82:         return errors::FailedPrecondition(",
          "83:             \"Saved model contains node \\\"\", node.name(), \"\\\" (op \\\"\", node.op(),",
          "84:             \"\\\") which initializes from a tensor with \",",
          "85:             node_shape.num_elements(), \" elements\");",
          "86:       }",
          "87:     }",
          "88:   } else if (node.op() == \"Const\") {",
          "89:     return errors::FailedPrecondition(",
          "90:         \"Saved model contains node \\\"\", node.name(),",
          "91:         \"\\\" which is a constant tensor but no value has been provided\");",
          "92:   }",
          "93:   return Status::OK();",
          "94: }",
          "98:     TF_RETURN_IF_ERROR(ValidateNode(node));",
          "99:   }",
          "101:   if (graph_def.has_library()) {",
          "102:     const FunctionDefLibrary& library = graph_def.library();",
          "103:     for (const auto& function : library.function()) {",
          "104:       for (const auto& node : function.node_def()) {",
          "105:  TF_RETURN_IF_ERROR(ValidateNode(node));",
          "",
          "---------------"
        ]
      }
    }
  ]
}