{
  "cve_id": "CVE-2016-4072",
  "cve_desc": "The Phar extension in PHP before 5.5.34, 5.6.x before 5.6.20, and 7.x before 7.0.5 allows remote attackers to execute arbitrary code via a crafted filename, as demonstrated by mishandling of \\0 characters by the phar_analyze_path function in ext/phar/phar.c.",
  "repo": "php/php-src",
  "patch_hash": "1e9b175204e3286d64dfd6c9f09151c31b5e099a",
  "patch_info": {
    "commit_hash": "1e9b175204e3286d64dfd6c9f09151c31b5e099a",
    "repo": "php/php-src",
    "commit_url": "https://github.com/php/php-src/commit/1e9b175204e3286d64dfd6c9f09151c31b5e099a",
    "files": [
      "ext/phar/phar.c",
      "ext/phar/phar_object.c",
      "ext/phar/tests/badparameters.phpt",
      "ext/phar/tests/bug64931/bug64931.phpt",
      "ext/phar/tests/create_path_error.phpt",
      "ext/phar/tests/phar_extract.phpt",
      "ext/phar/tests/phar_isvalidpharfilename.phpt",
      "ext/phar/tests/phar_unlinkarchive.phpt",
      "ext/phar/tests/pharfileinfo_construct.phpt"
    ],
    "message": "Fix bug #71860: Require valid paths for phar filenames",
    "before_after_code_files": [
      "ext/phar/phar.c||ext/phar/phar.c",
      "ext/phar/phar_object.c||ext/phar/phar_object.c",
      "ext/phar/tests/badparameters.phpt||ext/phar/tests/badparameters.phpt",
      "ext/phar/tests/bug64931/bug64931.phpt||ext/phar/tests/bug64931/bug64931.phpt",
      "ext/phar/tests/create_path_error.phpt||ext/phar/tests/create_path_error.phpt",
      "ext/phar/tests/phar_extract.phpt||ext/phar/tests/phar_extract.phpt",
      "ext/phar/tests/phar_isvalidpharfilename.phpt||ext/phar/tests/phar_isvalidpharfilename.phpt",
      "ext/phar/tests/phar_unlinkarchive.phpt||ext/phar/tests/phar_unlinkarchive.phpt",
      "ext/phar/tests/pharfileinfo_construct.phpt||ext/phar/tests/pharfileinfo_construct.phpt"
    ]
  },
  "patch_diff": {
    "ext/phar/phar.c||ext/phar/phar.c": [
      "File: ext/phar/phar.c -> ext/phar/phar.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2196: #endif",
      "2197:  int ext_len;",
      "2199:  if (!strncasecmp(filename, \"phar://\", 7)) {",
      "2200:   filename += 7;",
      "2201:   filename_len -= 7;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2199:  if (CHECK_NULL_PATH(filename, filename_len)) {",
      "2200:   return FAILURE;",
      "2201:  }",
      "",
      "---------------"
    ],
    "ext/phar/phar_object.c||ext/phar/phar_object.c": [
      "File: ext/phar/phar_object.c -> ext/phar/phar_object.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "459:  size_t path_len, actual_len;",
      "460:  phar_archive_data *pphar;",
      "463:   return;",
      "464:  }",
      "",
      "[Removed Lines]",
      "462:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"ss\", &path, &path_len, &actual, &actual_len) == FAILURE) {",
      "",
      "[Added Lines]",
      "462:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"pp\", &path, &path_len, &actual, &actual_len) == FAILURE) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "938:  zend_string *stub;",
      "939:  size_t index_len = 0, webindex_len = 0;",
      "942:   return;",
      "943:  }",
      "",
      "[Removed Lines]",
      "941:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"|ss\", &index, &index_len, &webindex, &webindex_len) == FAILURE) {",
      "",
      "[Added Lines]",
      "941:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"|pp\", &index, &index_len, &webindex, &webindex_len) == FAILURE) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "982:  char *fname, *alias = NULL, *error;",
      "983:  size_t fname_len, alias_len = 0;",
      "986:   return;",
      "987:  }",
      "",
      "[Removed Lines]",
      "985:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"s|s!\", &fname, &fname_len, &alias, &alias_len) == FAILURE) {",
      "",
      "[Added Lines]",
      "985:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"p|s!\", &fname, &fname_len, &alias, &alias_len) == FAILURE) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1062:  int ext_len, is_executable;",
      "1063:  zend_bool executable = 1;",
      "1066:   return;",
      "1067:  }",
      "",
      "[Removed Lines]",
      "1065:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"s|b\", &fname, &fname_len, &executable) == FAILURE) {",
      "",
      "[Added Lines]",
      "1065:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"p|b\", &fname, &fname_len, &executable) == FAILURE) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1134:  is_data = instanceof_function(Z_OBJCE_P(zobj), phar_ce_data);",
      "1136:  if (is_data) {",
      "1138:    return;",
      "1139:   }",
      "1140:  } else {",
      "1142:    return;",
      "1143:   }",
      "1144:  }",
      "",
      "[Removed Lines]",
      "1137:   if (zend_parse_parameters_throw(ZEND_NUM_ARGS(), \"s|ls!l\", &fname, &fname_len, &flags, &alias, &alias_len, &format) == FAILURE) {",
      "1141:   if (zend_parse_parameters_throw(ZEND_NUM_ARGS(), \"s|ls!\", &fname, &fname_len, &flags, &alias, &alias_len) == FAILURE) {",
      "",
      "[Added Lines]",
      "1137:   if (zend_parse_parameters_throw(ZEND_NUM_ARGS(), \"p|ls!l\", &fname, &fname_len, &flags, &alias, &alias_len, &format) == FAILURE) {",
      "1141:   if (zend_parse_parameters_throw(ZEND_NUM_ARGS(), \"p|ls!\", &fname, &fname_len, &flags, &alias, &alias_len) == FAILURE) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1307:  int zname_len, arch_len, entry_len;",
      "1308:  phar_archive_data *phar;",
      "1311:   RETURN_FALSE;",
      "1312:  }",
      "",
      "[Removed Lines]",
      "1310:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"s\", &fname, &fname_len) == FAILURE) {",
      "",
      "[Added Lines]",
      "1310:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"p\", &fname, &fname_len) == FAILURE) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1739:   return;",
      "1740:  }",
      "1743:   RETURN_FALSE;",
      "1744:  }",
      "",
      "[Removed Lines]",
      "1742:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"s|s\", &dir, &dir_len, &regex, &regex_len) == FAILURE) {",
      "",
      "[Added Lines]",
      "1742:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"p|s\", &dir, &dir_len, &regex, &regex_len) == FAILURE) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "2586:   return;",
      "2587:  }",
      "2590:   RETURN_FALSE;",
      "2591:  }",
      "",
      "[Removed Lines]",
      "2589:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"s\", &fname, &fname_len) == FAILURE) {",
      "",
      "[Added Lines]",
      "2589:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"p\", &fname, &fname_len) == FAILURE) {",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "3401:  PHAR_ARCHIVE_OBJECT();",
      "3404:   return;",
      "3405:  }",
      "",
      "[Removed Lines]",
      "3403:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"ss\", &oldfile, &oldfile_len, &newfile, &newfile_len) == FAILURE) {",
      "",
      "[Added Lines]",
      "3403:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"pp\", &oldfile, &oldfile_len, &newfile, &newfile_len) == FAILURE) {",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "3501:  PHAR_ARCHIVE_OBJECT();",
      "3504:   return;",
      "3505:  }",
      "",
      "[Removed Lines]",
      "3503:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"s\", &fname, &fname_len) == FAILURE) {",
      "",
      "[Added Lines]",
      "3503:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"p\", &fname, &fname_len) == FAILURE) {",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "3538:  zend_string *sfname;",
      "3539:  PHAR_ARCHIVE_OBJECT();",
      "3542:   return;",
      "3543:  }",
      "",
      "[Removed Lines]",
      "3541:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"s\", &fname, &fname_len) == FAILURE) {",
      "",
      "[Added Lines]",
      "3541:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"p\", &fname, &fname_len) == FAILURE) {",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "3685:   return;",
      "3686:  }",
      "3690:   return;",
      "3691:  }",
      "",
      "[Removed Lines]",
      "3688:  if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS(), \"sr\", &fname, &fname_len, &zresource) == FAILURE",
      "3689:  && zend_parse_parameters(ZEND_NUM_ARGS(), \"ss\", &fname, &fname_len, &cont_str, &cont_len) == FAILURE) {",
      "",
      "[Added Lines]",
      "3688:  if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS(), \"pr\", &fname, &fname_len, &zresource) == FAILURE",
      "3689:  && zend_parse_parameters(ZEND_NUM_ARGS(), \"ps\", &fname, &fname_len, &cont_str, &cont_len) == FAILURE) {",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "3724:   return;",
      "3725:  }",
      "3728:   return;",
      "3729:  }",
      "",
      "[Removed Lines]",
      "3727:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"s\", &fname, &fname_len) == FAILURE) {",
      "",
      "[Added Lines]",
      "3727:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"p\", &fname, &fname_len) == FAILURE) {",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "3772:  PHAR_ARCHIVE_OBJECT();",
      "3775:   return;",
      "3776:  }",
      "",
      "[Removed Lines]",
      "3774:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"s\", &dirname, &dirname_len) == FAILURE) {",
      "",
      "[Added Lines]",
      "3774:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"p\", &dirname, &dirname_len) == FAILURE) {",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "3797:  PHAR_ARCHIVE_OBJECT();",
      "3800:   return;",
      "3801:  }",
      "",
      "[Removed Lines]",
      "3799:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"s|s\", &fname, &fname_len, &localname, &localname_len) == FAILURE) {",
      "",
      "[Added Lines]",
      "3799:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"p|s\", &fname, &fname_len, &localname, &localname_len) == FAILURE) {",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "3839:  PHAR_ARCHIVE_OBJECT();",
      "3842:   return;",
      "3843:  }",
      "",
      "[Removed Lines]",
      "3841:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"ss\", &localname, &localname_len, &cont_str, &cont_len) == FAILURE) {",
      "",
      "[Added Lines]",
      "3841:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"ps\", &localname, &localname_len, &cont_str, &cont_len) == FAILURE) {",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "4265:  PHAR_ARCHIVE_OBJECT();",
      "4268:   return;",
      "4269:  }",
      "",
      "[Removed Lines]",
      "4267:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"s|z!b\", &pathto, &pathto_len, &zval_files, &overwrite) == FAILURE) {",
      "",
      "[Added Lines]",
      "4267:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"p|z!b\", &pathto, &pathto_len, &zval_files, &overwrite) == FAILURE) {",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "4396:  phar_archive_data *phar_data;",
      "4397:  zval *zobj = getThis(), arg1;",
      "4400:   return;",
      "4401:  }",
      "",
      "[Removed Lines]",
      "4399:  if (zend_parse_parameters_throw(ZEND_NUM_ARGS(), \"s\", &fname, &fname_len) == FAILURE) {",
      "",
      "[Added Lines]",
      "4399:  if (zend_parse_parameters_throw(ZEND_NUM_ARGS(), \"p\", &fname, &fname_len) == FAILURE) {",
      "",
      "---------------"
    ],
    "ext/phar/tests/badparameters.phpt||ext/phar/tests/badparameters.phpt": [
      "File: ext/phar/tests/badparameters.phpt -> ext/phar/tests/badparameters.phpt",
      "--- Hunk 1 ---",
      "[Context before]",
      "147: --EXPECTF--",
      "148: Warning: Phar::mungServer() expects parameter 1 to be array, %string given in %sbadparameters.php on line %d",
      "154: Warning: Phar::canCompress() expects parameter 1 to be integer, %string given in %sbadparameters.php on line %d",
      "158: Warning: Phar::convertToExecutable() expects parameter 1 to be integer, array given in %sbadparameters.php on line %d",
      "160: Warning: Phar::convertToData() expects parameter 1 to be integer, array given in %sbadparameters.php on line %d",
      "163: Cannot write out phar archive, phar is read-only",
      "164: Entry oops does not exist and cannot be deleted",
      "165: %sfiles/frontcontroller10.phar",
      "",
      "[Removed Lines]",
      "150: Warning: Phar::createDefaultStub() expects parameter 1 to be %string, array given in %sbadparameters.php on line %d",
      "152: Warning: Phar::loadPhar() expects parameter 1 to be %string, array given in %sbadparameters.php on line %d",
      "156: Exception: Phar::__construct() expects parameter 1 to be %string, array given in %sbadparameters.php on line %d",
      "162: Warning: PharData::delete() expects parameter 1 to be %string, array given in %sbadparameters.php on line %d",
      "",
      "[Added Lines]",
      "150: Warning: Phar::createDefaultStub() expects parameter 1 to be a valid path, array given in %sbadparameters.php on line %d",
      "152: Warning: Phar::loadPhar() expects parameter 1 to be a valid path, array given in %sbadparameters.php on line %d",
      "156: Exception: Phar::__construct() expects parameter 1 to be a valid path, array given in %sbadparameters.php on line %d",
      "162: Warning: PharData::delete() expects parameter 1 to be a valid path, array given in %sbadparameters.php on line %d",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "186: Warning: Phar::copy() expects exactly 2 parameters, 1 given in %sbadparameters.php on line %d",
      "187: Cannot copy \"a\" to \"b\", phar is read-only",
      "193: Warning: Phar::offsetSet() expects exactly 2 parameters, 1 given in %sbadparameters.php on line %d",
      "196: Write operations disabled by the php.ini setting phar.readonly",
      "202: Warning: Phar::addFromString() expects exactly 2 parameters, 1 given in %sbadparameters.php on line %d",
      "203: Write operations disabled by the php.ini setting phar.readonly",
      "",
      "[Removed Lines]",
      "189: Warning: Phar::offsetExists() expects parameter 1 to be %string, array given in %sbadparameters.php on line %d",
      "191: Warning: Phar::offsetGet() expects parameter 1 to be %string, array given in %sbadparameters.php on line %d",
      "195: Warning: PharData::offsetUnset() expects parameter 1 to be %string, array given in %sbadparameters.php on line %d",
      "198: Warning: Phar::addEmptyDir() expects parameter 1 to be %string, array given in %sbadparameters.php on line %d",
      "200: Warning: Phar::addFile() expects parameter 1 to be %string, array given in %sbadparameters.php on line %d",
      "",
      "[Added Lines]",
      "189: Warning: Phar::offsetExists() expects parameter 1 to be a valid path, array given in %sbadparameters.php on line %d",
      "191: Warning: Phar::offsetGet() expects parameter 1 to be a valid path, array given in %sbadparameters.php on line %d",
      "195: Warning: PharData::offsetUnset() expects parameter 1 to be a valid path, array given in %sbadparameters.php on line %d",
      "198: Warning: Phar::addEmptyDir() expects parameter 1 to be a valid path, array given in %sbadparameters.php on line %d",
      "200: Warning: Phar::addFile() expects parameter 1 to be a valid path, array given in %sbadparameters.php on line %d",
      "",
      "---------------"
    ],
    "ext/phar/tests/bug64931/bug64931.phpt||ext/phar/tests/bug64931/bug64931.phpt": [
      "File: ext/phar/tests/bug64931/bug64931.phpt -> ext/phar/tests/bug64931/bug64931.phpt",
      "--- Hunk 1 ---",
      "[Context before]",
      "48: <?php",
      "49: @unlink(__DIR__.\"/bug64931.phar\");",
      "50: ?>",
      "52: Test",
      "53: CAUGHT: Cannot create any files in magic \".phar\" directory",
      "54: CAUGHT: Cannot create any files in magic \".phar\" directory",
      "55: CAUGHT: Cannot create any files in magic \".phar\" directory",
      "56: CAUGHT: Cannot create any files in magic \".phar\" directory",
      "58: ===DONE===",
      "",
      "[Removed Lines]",
      "51: --EXPECT--",
      "57: CAUGHT: Cannot create any files in magic \".phar\" directory",
      "",
      "[Added Lines]",
      "51: --EXPECTF--",
      "58: Warning: Phar::addFromString() expects parameter 1 to be a valid path, string given in %s/bug64931.php on line %d",
      "",
      "---------------"
    ],
    "ext/phar/tests/create_path_error.phpt||ext/phar/tests/create_path_error.phpt": [
      "File: ext/phar/tests/create_path_error.phpt -> ext/phar/tests/create_path_error.phpt",
      "--- Hunk 1 ---",
      "[Context before]",
      "80: 11:Error: file_put_contents(phar://%s): failed to open stream: phar error: invalid path \"%s\" contains illegal character",
      "81: 12:Error: file_put_contents(phar://%s): failed to open stream: phar error: invalid path \"%s\" contains illegal character",
      "82: 13:Error: file_put_contents(phar://%s): failed to open stream: phar error: invalid path \"%s\" contains illegal character",
      "",
      "[Removed Lines]",
      "83: Exception: Entry a does not exist and cannot be created: phar error: invalid path \"a\" contains illegal character",
      "84: ===DONE===",
      "",
      "[Added Lines]",
      "83: Error: Phar::offsetSet() expects parameter 1 to be a valid path, string given===DONE===",
      "",
      "---------------"
    ],
    "ext/phar/tests/phar_extract.phpt||ext/phar/tests/phar_extract.phpt": [
      "File: ext/phar/tests/phar_extract.phpt -> ext/phar/tests/phar_extract.phpt",
      "--- Hunk 1 ---",
      "[Context before]",
      "138: bool(false)",
      "139: Invalid argument, expected a filename (string) or array of filenames",
      "142: Invalid argument, extraction path must be non-zero length",
      "143: Unable to use path \"%soops\" for extraction, it is a file, must be a directory",
      "144: Invalid argument, array of filenames to extract contains non-string value",
      "",
      "[Removed Lines]",
      "141: Warning: Phar::extractTo() expects parameter 1 to be %string, array given in %sphar_extract.php on line %d",
      "",
      "[Added Lines]",
      "141: Warning: Phar::extractTo() expects parameter 1 to be a valid path, array given in %sphar_extract.php on line %d",
      "",
      "---------------"
    ],
    "ext/phar/tests/phar_isvalidpharfilename.phpt||ext/phar/tests/phar_isvalidpharfilename.phpt": [
      "File: ext/phar/tests/phar_isvalidpharfilename.phpt -> ext/phar/tests/phar_isvalidpharfilename.phpt",
      "--- Hunk 1 ---",
      "[Context before]",
      "76: <?php",
      "77: rmdir(dirname(__FILE__) . '/.phar');",
      "78: --EXPECTF--",
      "81: bool(false)",
      "82: bool(false)",
      "",
      "[Removed Lines]",
      "79: Warning: Phar::isValidPharFilename() expects parameter 1 to be %string, array given in %sphar_isvalidpharfilename.php on line %d",
      "",
      "[Added Lines]",
      "79: Warning: Phar::isValidPharFilename() expects parameter 1 to be a valid path, array given in %sphar_isvalidpharfilename.php on line %d",
      "",
      "---------------"
    ],
    "ext/phar/tests/phar_unlinkarchive.phpt||ext/phar/tests/phar_unlinkarchive.phpt": [
      "File: ext/phar/tests/phar_unlinkarchive.phpt -> ext/phar/tests/phar_unlinkarchive.phpt",
      "--- Hunk 1 ---",
      "[Context before]",
      "90: Unknown phar archive \"%sphar_unlinkarchive.phar\"",
      "91: Unknown phar archive \"%sphar_unlinkarchive.phar.tar\": internal corruption of phar \"%sphar_unlinkarchive.phar.tar\" (truncated entry)",
      "94: bool(false)",
      "95: string(48) \"<?php echo \"first stub\\n\"; __HALT_COMPILER(); ?>\"",
      "96: phar archive \"%sphar_unlinkarchive.phar\" has open file handles or objects.  fclose() all file handles, and unset() all objects prior to calling unlinkArchive()",
      "",
      "[Removed Lines]",
      "93: Warning: Phar::unlinkArchive() expects parameter 1 to be %string, array given in %sphar_unlinkarchive.php on line %d",
      "",
      "[Added Lines]",
      "93: Warning: Phar::unlinkArchive() expects parameter 1 to be a valid path, array given in %sphar_unlinkarchive.php on line %d",
      "",
      "---------------"
    ],
    "ext/phar/tests/pharfileinfo_construct.phpt||ext/phar/tests/pharfileinfo_construct.phpt": [
      "File: ext/phar/tests/pharfileinfo_construct.phpt -> ext/phar/tests/pharfileinfo_construct.phpt",
      "--- Hunk 1 ---",
      "[Context before]",
      "50: <?php unlink(dirname(__FILE__) . '/' . basename(__FILE__, '.clean.php') . '.phar'); ?>",
      "51: --EXPECTF--",
      "52: Cannot open phar file 'phar://%spharfileinfo_construct.phar/oops': internal corruption of phar \"%spharfileinfo_construct.phar\" (truncated entry)",
      "54: Cannot access phar file entry '%s' in archive '%s'",
      "55: Cannot call constructor twice",
      "56: '%s' is not a valid phar archive URL (must have at least phar://filename.phar)",
      "",
      "[Removed Lines]",
      "53: PharFileInfo::__construct() expects parameter 1 to be string, array given",
      "",
      "[Added Lines]",
      "53: PharFileInfo::__construct() expects parameter 1 to be a valid path, array given",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "72281f29dd4691b2f741362d3581162fcf85f502",
      "candidate_info": {
        "commit_hash": "72281f29dd4691b2f741362d3581162fcf85f502",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/72281f29dd4691b2f741362d3581162fcf85f502",
        "files": [
          "ext/phar/phar.c",
          "ext/phar/phar_object.c",
          "ext/phar/tests/badparameters.phpt",
          "ext/phar/tests/bug64931/bug64931.phpt",
          "ext/phar/tests/create_path_error.phpt",
          "ext/phar/tests/phar_extract.phpt",
          "ext/phar/tests/phar_isvalidpharfilename.phpt",
          "ext/phar/tests/phar_unlinkarchive.phpt",
          "ext/phar/tests/pharfileinfo_construct.phpt"
        ],
        "message": "Fix bug #71860: Require valid paths for phar filenames",
        "before_after_code_files": [
          "ext/phar/phar.c||ext/phar/phar.c",
          "ext/phar/phar_object.c||ext/phar/phar_object.c",
          "ext/phar/tests/badparameters.phpt||ext/phar/tests/badparameters.phpt",
          "ext/phar/tests/bug64931/bug64931.phpt||ext/phar/tests/bug64931/bug64931.phpt",
          "ext/phar/tests/create_path_error.phpt||ext/phar/tests/create_path_error.phpt",
          "ext/phar/tests/phar_extract.phpt||ext/phar/tests/phar_extract.phpt",
          "ext/phar/tests/phar_isvalidpharfilename.phpt||ext/phar/tests/phar_isvalidpharfilename.phpt",
          "ext/phar/tests/phar_unlinkarchive.phpt||ext/phar/tests/phar_unlinkarchive.phpt",
          "ext/phar/tests/pharfileinfo_construct.phpt||ext/phar/tests/pharfileinfo_construct.phpt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "ext/phar/phar.c||ext/phar/phar.c",
            "ext/phar/phar_object.c||ext/phar/phar_object.c",
            "ext/phar/tests/badparameters.phpt||ext/phar/tests/badparameters.phpt",
            "ext/phar/tests/bug64931/bug64931.phpt||ext/phar/tests/bug64931/bug64931.phpt",
            "ext/phar/tests/create_path_error.phpt||ext/phar/tests/create_path_error.phpt",
            "ext/phar/tests/phar_extract.phpt||ext/phar/tests/phar_extract.phpt",
            "ext/phar/tests/phar_isvalidpharfilename.phpt||ext/phar/tests/phar_isvalidpharfilename.phpt",
            "ext/phar/tests/phar_unlinkarchive.phpt||ext/phar/tests/phar_unlinkarchive.phpt",
            "ext/phar/tests/pharfileinfo_construct.phpt||ext/phar/tests/pharfileinfo_construct.phpt"
          ],
          "candidate": [
            "ext/phar/phar.c||ext/phar/phar.c",
            "ext/phar/phar_object.c||ext/phar/phar_object.c",
            "ext/phar/tests/badparameters.phpt||ext/phar/tests/badparameters.phpt",
            "ext/phar/tests/bug64931/bug64931.phpt||ext/phar/tests/bug64931/bug64931.phpt",
            "ext/phar/tests/create_path_error.phpt||ext/phar/tests/create_path_error.phpt",
            "ext/phar/tests/phar_extract.phpt||ext/phar/tests/phar_extract.phpt",
            "ext/phar/tests/phar_isvalidpharfilename.phpt||ext/phar/tests/phar_isvalidpharfilename.phpt",
            "ext/phar/tests/phar_unlinkarchive.phpt||ext/phar/tests/phar_unlinkarchive.phpt",
            "ext/phar/tests/pharfileinfo_construct.phpt||ext/phar/tests/pharfileinfo_construct.phpt"
          ]
        }
      },
      "candidate_diff": {
        "ext/phar/phar.c||ext/phar/phar.c": [
          "File: ext/phar/phar.c -> ext/phar/phar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2261: #endif",
          "2262:  int ext_len, free_filename = 0;",
          "2264:  if (!strncasecmp(filename, \"phar://\", 7)) {",
          "2265:   filename += 7;",
          "2266:   filename_len -= 7;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2264:  if (CHECK_NULL_PATH(filename, filename_len)) {",
          "2265:   return FAILURE;",
          "2266:  }",
          "",
          "---------------"
        ],
        "ext/phar/phar_object.c||ext/phar/phar_object.c": [
          "File: ext/phar/phar_object.c -> ext/phar/phar_object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "478:  int fname_len, arch_len, entry_len, path_len, actual_len;",
          "479:  phar_archive_data **pphar;",
          "482:   return;",
          "483:  }",
          "",
          "[Removed Lines]",
          "481:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"ss\", &path, &path_len, &actual, &actual_len) == FAILURE) {",
          "",
          "[Added Lines]",
          "481:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"pp\", &path, &path_len, &actual, &actual_len) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "960:  int index_len = 0, webindex_len = 0;",
          "961:  size_t stub_len;",
          "964:   return;",
          "965:  }",
          "",
          "[Removed Lines]",
          "963:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"|ss\", &index, &index_len, &webindex, &webindex_len) == FAILURE) {",
          "",
          "[Added Lines]",
          "963:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"|pp\", &index, &index_len, &webindex, &webindex_len) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1004:  char *fname, *alias = NULL, *error;",
          "1005:  int fname_len, alias_len = 0;",
          "1008:   return;",
          "1009:  }",
          "",
          "[Removed Lines]",
          "1007:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s|s!\", &fname, &fname_len, &alias, &alias_len) == FAILURE) {",
          "",
          "[Added Lines]",
          "1007:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"p|s!\", &fname, &fname_len, &alias, &alias_len) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1083:  int fname_len, ext_len, is_executable;",
          "1084:  zend_bool executable = 1;",
          "1087:   return;",
          "1088:  }",
          "",
          "[Removed Lines]",
          "1086:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s|b\", &fname, &fname_len, &executable) == FAILURE) {",
          "",
          "[Added Lines]",
          "1086:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"p|b\", &fname, &fname_len, &executable) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1154:  is_data = instanceof_function(Z_OBJCE_P(zobj), phar_ce_data TSRMLS_CC);",
          "1156:  if (is_data) {",
          "1158:    return;",
          "1159:   }",
          "1160:  } else {",
          "1162:    return;",
          "1163:   }",
          "1164:  }",
          "",
          "[Removed Lines]",
          "1157:   if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s|ls!l\", &fname, &fname_len, &flags, &alias, &alias_len, &format) == FAILURE) {",
          "1161:   if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s|ls!\", &fname, &fname_len, &flags, &alias, &alias_len) == FAILURE) {",
          "",
          "[Added Lines]",
          "1157:   if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"p|ls!l\", &fname, &fname_len, &flags, &alias, &alias_len, &format) == FAILURE) {",
          "1161:   if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"p|ls!\", &fname, &fname_len, &flags, &alias, &alias_len) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1326:  int fname_len, zname_len, arch_len, entry_len;",
          "1327:  phar_archive_data *phar;",
          "1330:   RETURN_FALSE;",
          "1331:  }",
          "",
          "[Removed Lines]",
          "1329:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s\", &fname, &fname_len) == FAILURE) {",
          "",
          "[Added Lines]",
          "1329:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"p\", &fname, &fname_len) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1756:   return;",
          "1757:  }",
          "1760:   RETURN_FALSE;",
          "1761:  }",
          "",
          "[Removed Lines]",
          "1759:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s|s\", &dir, &dir_len, &regex, &regex_len) == FAILURE) {",
          "",
          "[Added Lines]",
          "1759:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"p|s\", &dir, &dir_len, &regex, &regex_len) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2628:   return;",
          "2629:  }",
          "2632:   RETURN_FALSE;",
          "2633:  }",
          "",
          "[Removed Lines]",
          "2631:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s\", &fname, &fname_len) == FAILURE) {",
          "",
          "[Added Lines]",
          "2631:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"p\", &fname, &fname_len) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3441:  PHAR_ARCHIVE_OBJECT();",
          "3444:   return;",
          "3445:  }",
          "",
          "[Removed Lines]",
          "3443:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"ss\", &oldfile, &oldfile_len, &newfile, &newfile_len) == FAILURE) {",
          "",
          "[Added Lines]",
          "3443:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"pp\", &oldfile, &oldfile_len, &newfile, &newfile_len) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3547:  PHAR_ARCHIVE_OBJECT();",
          "3550:   return;",
          "3551:  }",
          "",
          "[Removed Lines]",
          "3549:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s\", &fname, &fname_len) == FAILURE) {",
          "",
          "[Added Lines]",
          "3549:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"p\", &fname, &fname_len) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3583:  phar_entry_info *entry;",
          "3584:  PHAR_ARCHIVE_OBJECT();",
          "3587:   return;",
          "3588:  }",
          "",
          "[Removed Lines]",
          "3586:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s\", &fname, &fname_len) == FAILURE) {",
          "",
          "[Added Lines]",
          "3586:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"p\", &fname, &fname_len) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3731:   return;",
          "3732:  }",
          "3736:   return;",
          "3737:  }",
          "",
          "[Removed Lines]",
          "3734:  if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, \"sr\", &fname, &fname_len, &zresource) == FAILURE",
          "3735:  && zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"ss\", &fname, &fname_len, &cont_str, &cont_len) == FAILURE) {",
          "",
          "[Added Lines]",
          "3734:  if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, \"pr\", &fname, &fname_len, &zresource) == FAILURE",
          "3735:  && zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"ps\", &fname, &fname_len, &cont_str, &cont_len) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3770:   return;",
          "3771:  }",
          "3774:   return;",
          "3775:  }",
          "",
          "[Removed Lines]",
          "3773:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s\", &fname, &fname_len) == FAILURE) {",
          "",
          "[Added Lines]",
          "3773:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"p\", &fname, &fname_len) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3818:  PHAR_ARCHIVE_OBJECT();",
          "3821:   return;",
          "3822:  }",
          "",
          "[Removed Lines]",
          "3820:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s\", &dirname, &dirname_len) == FAILURE) {",
          "",
          "[Added Lines]",
          "3820:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"p\", &dirname, &dirname_len) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3843:  PHAR_ARCHIVE_OBJECT();",
          "3846:   return;",
          "3847:  }",
          "",
          "[Removed Lines]",
          "3845:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s|s\", &fname, &fname_len, &localname, &localname_len) == FAILURE) {",
          "",
          "[Added Lines]",
          "3845:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"p|s\", &fname, &fname_len, &localname, &localname_len) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "3887:  PHAR_ARCHIVE_OBJECT();",
          "3890:   return;",
          "3891:  }",
          "",
          "[Removed Lines]",
          "3889:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"ss\", &localname, &localname_len, &cont_str, &cont_len) == FAILURE) {",
          "",
          "[Added Lines]",
          "3889:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"ps\", &localname, &localname_len, &cont_str, &cont_len) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "4314:  PHAR_ARCHIVE_OBJECT();",
          "4317:   return;",
          "4318:  }",
          "",
          "[Removed Lines]",
          "4316:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s|z!b\", &pathto, &pathto_len, &zval_files, &overwrite) == FAILURE) {",
          "",
          "[Added Lines]",
          "4316:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"p|z!b\", &pathto, &pathto_len, &zval_files, &overwrite) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "4452:  phar_archive_data *phar_data;",
          "4453:  zval *zobj = getThis(), arg1;",
          "4456:   return;",
          "4457:  }",
          "",
          "[Removed Lines]",
          "4455:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s\", &fname, &fname_len) == FAILURE) {",
          "",
          "[Added Lines]",
          "4455:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"p\", &fname, &fname_len) == FAILURE) {",
          "",
          "---------------"
        ],
        "ext/phar/tests/badparameters.phpt||ext/phar/tests/badparameters.phpt": [
          "File: ext/phar/tests/badparameters.phpt -> ext/phar/tests/badparameters.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "126: --EXPECTF--",
          "127: Warning: Phar::mungServer() expects parameter 1 to be array, %string given in %sbadparameters.php on line %d",
          "133: Warning: Phar::canCompress() expects parameter 1 to be long, %string given in %sbadparameters.php on line %d",
          "137: Warning: Phar::convertToExecutable() expects parameter 1 to be long, array given in %sbadparameters.php on line %d",
          "139: Warning: Phar::convertToData() expects parameter 1 to be long, array given in %sbadparameters.php on line %d",
          "142: Cannot write out phar archive, phar is read-only",
          "143: Entry oops does not exist and cannot be deleted",
          "144: %sfiles/frontcontroller10.phar",
          "",
          "[Removed Lines]",
          "129: Warning: Phar::createDefaultStub() expects parameter 1 to be %string, array given in %sbadparameters.php on line %d",
          "131: Warning: Phar::loadPhar() expects parameter 1 to be %string, array given in %sbadparameters.php on line %d",
          "135: Warning: Phar::__construct() expects parameter 1 to be %string, array given in %sbadparameters.php on line %d",
          "141: Warning: PharData::delete() expects parameter 1 to be %string, array given in %sbadparameters.php on line %d",
          "",
          "[Added Lines]",
          "129: Warning: Phar::createDefaultStub() expects parameter 1 to be a valid path, array given in %sbadparameters.php on line %d",
          "131: Warning: Phar::loadPhar() expects parameter 1 to be a valid path, array given in %sbadparameters.php on line %d",
          "135: Warning: Phar::__construct() expects parameter 1 to be a valid path, array given in %sbadparameters.php on line %d",
          "141: Warning: PharData::delete() expects parameter 1 to be a valid path, array given in %sbadparameters.php on line %d",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165: Warning: Phar::copy() expects exactly 2 parameters, 1 given in %sbadparameters.php on line %d",
          "166: Cannot copy \"a\" to \"b\", phar is read-only",
          "172: Warning: Phar::offsetSet() expects exactly 2 parameters, 1 given in %sbadparameters.php on line %d",
          "175: Write operations disabled by the php.ini setting phar.readonly",
          "181: Warning: Phar::addFromString() expects exactly 2 parameters, 1 given in %sbadparameters.php on line %d",
          "182: Write operations disabled by the php.ini setting phar.readonly",
          "",
          "[Removed Lines]",
          "168: Warning: Phar::offsetExists() expects parameter 1 to be %string, array given in %sbadparameters.php on line %d",
          "170: Warning: Phar::offsetGet() expects parameter 1 to be %string, array given in %sbadparameters.php on line %d",
          "174: Warning: PharData::offsetUnset() expects parameter 1 to be %string, array given in %sbadparameters.php on line %d",
          "177: Warning: Phar::addEmptyDir() expects parameter 1 to be %string, array given in %sbadparameters.php on line %d",
          "179: Warning: Phar::addFile() expects parameter 1 to be %string, array given in %sbadparameters.php on line %d",
          "",
          "[Added Lines]",
          "168: Warning: Phar::offsetExists() expects parameter 1 to be a valid path, array given in %sbadparameters.php on line %d",
          "170: Warning: Phar::offsetGet() expects parameter 1 to be a valid path, array given in %sbadparameters.php on line %d",
          "174: Warning: PharData::offsetUnset() expects parameter 1 to be a valid path, array given in %sbadparameters.php on line %d",
          "177: Warning: Phar::addEmptyDir() expects parameter 1 to be a valid path, array given in %sbadparameters.php on line %d",
          "179: Warning: Phar::addFile() expects parameter 1 to be a valid path, array given in %sbadparameters.php on line %d",
          "",
          "---------------"
        ],
        "ext/phar/tests/bug64931/bug64931.phpt||ext/phar/tests/bug64931/bug64931.phpt": [
          "File: ext/phar/tests/bug64931/bug64931.phpt -> ext/phar/tests/bug64931/bug64931.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: <?php",
          "49: @unlink(__DIR__.\"/bug64931.phar\");",
          "50: ?>",
          "52: Test",
          "53: CAUGHT: Cannot create any files in magic \".phar\" directory",
          "54: CAUGHT: Cannot create any files in magic \".phar\" directory",
          "55: CAUGHT: Cannot create any files in magic \".phar\" directory",
          "56: CAUGHT: Cannot create any files in magic \".phar\" directory",
          "58: ===DONE===",
          "",
          "[Removed Lines]",
          "51: --EXPECT--",
          "57: CAUGHT: Cannot create any files in magic \".phar\" directory",
          "",
          "[Added Lines]",
          "51: --EXPECTF--",
          "58: Warning: Phar::addFromString() expects parameter 1 to be a valid path, string given in %s/bug64931.php on line %d",
          "",
          "---------------"
        ],
        "ext/phar/tests/create_path_error.phpt||ext/phar/tests/create_path_error.phpt": [
          "File: ext/phar/tests/create_path_error.phpt -> ext/phar/tests/create_path_error.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "80: 11:Error: file_put_contents(phar:///%s): failed to open stream: phar error: invalid path \"%s\" contains illegal character",
          "81: 12:Error: file_put_contents(phar:///%s): failed to open stream: phar error: invalid path \"%s\" contains illegal character",
          "82: 13:Error: file_put_contents(phar:///%s): failed to open stream: phar error: invalid path \"%s\" contains illegal character",
          "",
          "[Removed Lines]",
          "83: Exception: Entry a does not exist and cannot be created: phar error: invalid path \"a\" contains illegal character",
          "84: ===DONE===",
          "",
          "[Added Lines]",
          "83: Error: Phar::offsetSet() expects parameter 1 to be a valid path, string given===DONE===",
          "",
          "---------------"
        ],
        "ext/phar/tests/phar_extract.phpt||ext/phar/tests/phar_extract.phpt": [
          "File: ext/phar/tests/phar_extract.phpt -> ext/phar/tests/phar_extract.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "138: bool(false)",
          "139: Invalid argument, expected a filename (string) or array of filenames",
          "142: Invalid argument, extraction path must be non-zero length",
          "143: Unable to use path \"%soops\" for extraction, it is a file, must be a directory",
          "144: Invalid argument, array of filenames to extract contains non-string value",
          "",
          "[Removed Lines]",
          "141: Warning: Phar::extractTo() expects parameter 1 to be %string, array given in %sphar_extract.php on line %d",
          "",
          "[Added Lines]",
          "141: Warning: Phar::extractTo() expects parameter 1 to be a valid path, array given in %sphar_extract.php on line %d",
          "",
          "---------------"
        ],
        "ext/phar/tests/phar_isvalidpharfilename.phpt||ext/phar/tests/phar_isvalidpharfilename.phpt": [
          "File: ext/phar/tests/phar_isvalidpharfilename.phpt -> ext/phar/tests/phar_isvalidpharfilename.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "76: <?php",
          "77: rmdir(dirname(__FILE__) . '/.phar');",
          "78: --EXPECTF--",
          "81: bool(false)",
          "82: bool(false)",
          "",
          "[Removed Lines]",
          "79: Warning: Phar::isValidPharFilename() expects parameter 1 to be %string, array given in %sphar_isvalidpharfilename.php on line %d",
          "",
          "[Added Lines]",
          "79: Warning: Phar::isValidPharFilename() expects parameter 1 to be a valid path, array given in %sphar_isvalidpharfilename.php on line %d",
          "",
          "---------------"
        ],
        "ext/phar/tests/phar_unlinkarchive.phpt||ext/phar/tests/phar_unlinkarchive.phpt": [
          "File: ext/phar/tests/phar_unlinkarchive.phpt -> ext/phar/tests/phar_unlinkarchive.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "90: Unknown phar archive \"%sphar_unlinkarchive.phar\"",
          "91: Unknown phar archive \"%sphar_unlinkarchive.phar.tar\": internal corruption of phar \"%sphar_unlinkarchive.phar.tar\" (truncated entry)",
          "94: bool(false)",
          "95: string(48) \"<?php echo \"first stub\\n\"; __HALT_COMPILER(); ?>\"",
          "96: phar archive \"%sphar_unlinkarchive.phar\" has open file handles or objects.  fclose() all file handles, and unset() all objects prior to calling unlinkArchive()",
          "",
          "[Removed Lines]",
          "93: Warning: Phar::unlinkArchive() expects parameter 1 to be %string, array given in %sphar_unlinkarchive.php on line %d",
          "",
          "[Added Lines]",
          "93: Warning: Phar::unlinkArchive() expects parameter 1 to be a valid path, array given in %sphar_unlinkarchive.php on line %d",
          "",
          "---------------"
        ],
        "ext/phar/tests/pharfileinfo_construct.phpt||ext/phar/tests/pharfileinfo_construct.phpt": [
          "File: ext/phar/tests/pharfileinfo_construct.phpt -> ext/phar/tests/pharfileinfo_construct.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: --EXPECTF--",
          "48: Cannot open phar file 'phar://%spharfileinfo_construct.phar/oops': internal corruption of phar \"%spharfileinfo_construct.phar\" (truncated entry)",
          "51: Cannot access phar file entry '/oops/I/do/not/exist' in archive '%spharfileinfo_construct.phar'",
          "52: Cannot call constructor twice",
          "53: '%spharfileinfo_construct.php' is not a valid phar archive URL (must have at least phar://filename.phar)",
          "",
          "[Removed Lines]",
          "50: Warning: PharFileInfo::__construct() expects parameter 1 to be %string, array given in %spharfileinfo_construct.php on line %d",
          "",
          "[Added Lines]",
          "50: Warning: PharFileInfo::__construct() expects parameter 1 to be a valid path, array given in %spharfileinfo_construct.php on line %d",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8704e392a1283ca5509a0785fd87f5a39d96036f",
      "candidate_info": {
        "commit_hash": "8704e392a1283ca5509a0785fd87f5a39d96036f",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/8704e392a1283ca5509a0785fd87f5a39d96036f",
        "files": [
          "ext/phar/dirstream.c",
          "ext/phar/dirstream.h",
          "ext/phar/func_interceptors.c",
          "ext/phar/phar.c",
          "ext/phar/phar_internal.h",
          "ext/phar/phar_object.c",
          "ext/phar/stream.c",
          "ext/phar/stream.h",
          "ext/phar/tar.c",
          "ext/phar/util.c",
          "ext/phar/zip.c"
        ],
        "message": "ported ext/phar",
        "before_after_code_files": [
          "ext/phar/dirstream.c||ext/phar/dirstream.c",
          "ext/phar/dirstream.h||ext/phar/dirstream.h",
          "ext/phar/func_interceptors.c||ext/phar/func_interceptors.c",
          "ext/phar/phar.c||ext/phar/phar.c",
          "ext/phar/phar_internal.h||ext/phar/phar_internal.h",
          "ext/phar/phar_object.c||ext/phar/phar_object.c",
          "ext/phar/stream.c||ext/phar/stream.c",
          "ext/phar/stream.h||ext/phar/stream.h",
          "ext/phar/tar.c||ext/phar/tar.c",
          "ext/phar/util.c||ext/phar/util.c",
          "ext/phar/zip.c||ext/phar/zip.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/phar/phar.c||ext/phar/phar.c",
            "ext/phar/phar_object.c||ext/phar/phar_object.c"
          ],
          "candidate": [
            "ext/phar/phar.c||ext/phar/phar.c",
            "ext/phar/phar_object.c||ext/phar/phar_object.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/phar/dirstream.c||ext/phar/dirstream.c": [
          "File: ext/phar/dirstream.c -> ext/phar/dirstream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:  size_t to_read;",
          "96:  HashTable *data = (HashTable *)stream->abstract;",
          "97:  zend_string *str_key;",
          "100:  if (HASH_KEY_NON_EXISTENT == zend_hash_get_current_key_ex(data, &str_key, &unused, 0, &data->nInternalPointer)) {",
          "101:   return 0;",
          "",
          "[Removed Lines]",
          "98:  ulong unused;",
          "",
          "[Added Lines]",
          "98:  php_uint_t unused;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "184:  char *entry, *found, *save;",
          "185:  zend_string *str_key;",
          "186:  uint keylen;",
          "189:  ALLOC_HASHTABLE(data);",
          "190:  zend_hash_init(data, 64, NULL, NULL, 0);",
          "",
          "[Removed Lines]",
          "187:  ulong unused;",
          "",
          "[Added Lines]",
          "187:  php_uint_t unused;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "306:  php_stream *ret;",
          "307:  char *internal_file, *error;",
          "308:  zend_string *str_key;",
          "310:  phar_archive_data *phar;",
          "311:  phar_entry_info *entry = NULL;",
          "312:  uint host_len;",
          "",
          "[Removed Lines]",
          "309:  ulong unused;",
          "",
          "[Added Lines]",
          "309:  php_uint_t unused;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "550:  php_url *resource = NULL;",
          "551:  uint host_len;",
          "552:  zend_string *str_key;",
          "554:  uint path_len;",
          "",
          "[Removed Lines]",
          "553:  ulong unused;",
          "",
          "[Added Lines]",
          "553:  php_uint_t unused;",
          "",
          "---------------"
        ],
        "ext/phar/dirstream.h||ext/phar/dirstream.h": [
          "File: ext/phar/dirstream.h -> ext/phar/dirstream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: static size_t phar_dir_read( php_stream *stream, char *buf, size_t count TSRMLS_DC);",
          "32: static int    phar_dir_close(php_stream *stream, int close_handle TSRMLS_DC);",
          "33: static int    phar_dir_flush(php_stream *stream TSRMLS_DC);",
          "35: #else",
          "36: php_stream* phar_wrapper_open_dir(php_stream_wrapper *wrapper, const char *path, const char *mode, int options, char **opened_path, php_stream_context *context STREAMS_DC TSRMLS_DC);",
          "37: #endif",
          "",
          "[Removed Lines]",
          "34: static int    phar_dir_seek( php_stream *stream, off_t offset, int whence, off_t *newoffset TSRMLS_DC);",
          "",
          "[Added Lines]",
          "34: static int    phar_dir_seek( php_stream *stream, php_off_t offset, int whence, php_off_t *newoffset TSRMLS_DC);",
          "",
          "---------------"
        ],
        "ext/phar/func_interceptors.c||ext/phar/func_interceptors.c": [
          "File: ext/phar/func_interceptors.c -> ext/phar/func_interceptors.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:  zend_string *contents;",
          "99:  zend_bool use_include_path = 0;",
          "100:  php_stream *stream;",
          "103:  zval *zcontext = NULL;",
          "105:  if (!PHAR_G(intercepted)) {",
          "",
          "[Removed Lines]",
          "101:  long offset = -1;",
          "102:  long maxlen = PHP_STREAM_COPY_ALL;",
          "",
          "[Added Lines]",
          "101:  php_int_t offset = -1;",
          "102:  php_int_t maxlen = PHP_STREAM_COPY_ALL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112:  }",
          "116:   goto skip_phar;",
          "117:  }",
          "",
          "[Removed Lines]",
          "115:  if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, \"p|br!ll\", &filename, &filename_len, &use_include_path, &zcontext, &offset, &maxlen) == FAILURE) {",
          "",
          "[Added Lines]",
          "115:  if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, \"p|br!ii\", &filename, &filename_len, &use_include_path, &zcontext, &offset, &maxlen) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "195:    }",
          "197:    if (offset > 0 && php_stream_seek(stream, offset, SEEK_SET) < 0) {",
          "199:     php_stream_close(stream);",
          "200:     RETURN_FALSE;",
          "201:    }",
          "",
          "[Removed Lines]",
          "198:     php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Failed to seek to position %ld in the stream\", offset);",
          "",
          "[Added Lines]",
          "198:     php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Failed to seek to position %pd in the stream\", offset);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "437: {",
          "438:  zval stat_dev, stat_ino, stat_mode, stat_nlink, stat_uid, stat_gid, stat_rdev,",
          "439:    stat_size, stat_atime, stat_mtime, stat_ctime, stat_blksize, stat_blocks;",
          "",
          "[Removed Lines]",
          "436: static void phar_fancy_stat(struct stat *stat_sb, int type, zval *return_value TSRMLS_DC)",
          "",
          "[Added Lines]",
          "436: static void phar_fancy_stat(php_stat_t *stat_sb, int type, zval *return_value TSRMLS_DC)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "478:  switch (type) {",
          "479:  case FS_PERMS:",
          "481:  case FS_INODE:",
          "483:  case FS_SIZE:",
          "485:  case FS_OWNER:",
          "487:  case FS_GROUP:",
          "489:  case FS_ATIME:",
          "490: #ifdef NETWARE",
          "492: #else",
          "494: #endif",
          "495:  case FS_MTIME:",
          "496: #ifdef NETWARE",
          "498: #else",
          "500: #endif",
          "501:  case FS_CTIME:",
          "502: #ifdef NETWARE",
          "504: #else",
          "506: #endif",
          "507:  case FS_TYPE:",
          "508:   if (S_ISLNK(stat_sb->st_mode)) {",
          "",
          "[Removed Lines]",
          "480:   RETURN_INT((long)stat_sb->st_mode);",
          "482:   RETURN_INT((long)stat_sb->st_ino);",
          "484:   RETURN_INT((long)stat_sb->st_size);",
          "486:   RETURN_INT((long)stat_sb->st_uid);",
          "488:   RETURN_INT((long)stat_sb->st_gid);",
          "491:   RETURN_INT((long)stat_sb->st_atime.tv_sec);",
          "493:   RETURN_INT((long)stat_sb->st_atime);",
          "497:   RETURN_INT((long)stat_sb->st_mtime.tv_sec);",
          "499:   RETURN_INT((long)stat_sb->st_mtime);",
          "503:   RETURN_INT((long)stat_sb->st_ctime.tv_sec);",
          "505:   RETURN_INT((long)stat_sb->st_ctime);",
          "",
          "[Added Lines]",
          "480:   RETURN_INT((php_int_t)stat_sb->st_mode);",
          "482:   RETURN_INT((php_int_t)stat_sb->st_ino);",
          "484:   RETURN_INT((php_int_t)stat_sb->st_size);",
          "486:   RETURN_INT((php_int_t)stat_sb->st_uid);",
          "488:   RETURN_INT((php_int_t)stat_sb->st_gid);",
          "491:   RETURN_INT((php_int_t)stat_sb->st_atime.tv_sec);",
          "493:   RETURN_INT((php_int_t)stat_sb->st_atime);",
          "497:   RETURN_INT((php_int_t)stat_sb->st_mtime.tv_sec);",
          "499:   RETURN_INT((php_int_t)stat_sb->st_mtime);",
          "503:   RETURN_INT((php_int_t)stat_sb->st_ctime.tv_sec);",
          "505:   RETURN_INT((php_int_t)stat_sb->st_ctime);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "611:  if (!IS_ABSOLUTE_PATH(filename, filename_length) && !strstr(filename, \"://\")) {",
          "612:   char *arch, *entry, *fname;",
          "613:   int arch_len, entry_len, fname_len;",
          "615:   phar_entry_info *data = NULL;",
          "616:   phar_archive_data *phar;",
          "",
          "[Removed Lines]",
          "614:   struct stat sb = {0};",
          "",
          "[Added Lines]",
          "614:   php_stat_t sb = {0};",
          "",
          "---------------"
        ],
        "ext/phar/phar.c||ext/phar/phar.c": [
          "File: ext/phar/phar.c -> ext/phar/phar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "666: {",
          "667:  char b32[4], *buffer, *endbuffer, *savebuf;",
          "668:  phar_archive_data *mydata = NULL;",
          "669:  phar_entry_info entry;",
          "670:  php_uint32 manifest_len, manifest_count, manifest_flags, manifest_index, tmp_len, sig_flags;",
          "671:  php_uint16 manifest_ver;",
          "673:  int sig_len, register_alias = 0, temp_alias = 0;",
          "674:  char *signature = NULL;",
          "",
          "[Removed Lines]",
          "672:  long offset;",
          "",
          "[Added Lines]",
          "672:  php_int_t offset;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "772:  if (manifest_flags & PHAR_HDR_SIGNATURE) {",
          "773:   char sig_buf[8], *sig_ptr = sig_buf;",
          "775:   size_t end_of_phar;",
          "777:   if (-1 == php_stream_seek(fp, -8, SEEK_END)",
          "",
          "[Removed Lines]",
          "774:   off_t read_len;",
          "",
          "[Added Lines]",
          "774:   php_off_t read_len;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "792:    case PHAR_SIG_OPENSSL: {",
          "793:     php_uint32 signature_len;",
          "794:     char *sig;",
          "798:     if (-1 == php_stream_seek(fp, -12, SEEK_CUR)",
          "",
          "[Removed Lines]",
          "795:     off_t whence;",
          "",
          "[Added Lines]",
          "795:     php_off_t whence;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1536: {",
          "1537:  const char *c;",
          "1540:  if (buf_len < search_len) {",
          "1541:   return NULL;",
          "",
          "[Removed Lines]",
          "1538:  int so_far = 0;",
          "",
          "[Added Lines]",
          "1538:  ptrdiff_t so_far = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1575:  char *pos, test = '\\0';",
          "1576:  const int window_size = 1024;",
          "1581:  size_t got;",
          "1582:  php_uint32 compression = PHAR_FILE_COMPRESSED_NONE;",
          "",
          "[Removed Lines]",
          "1578:  const long readsize = sizeof(buffer) - sizeof(token);",
          "1579:  const long tokenlen = sizeof(token) - 1;",
          "1580:  long halt_offset;",
          "",
          "[Added Lines]",
          "1578:  const php_int_t readsize = sizeof(buffer) - sizeof(token);",
          "1579:  const php_int_t tokenlen = sizeof(token) - 1;",
          "1580:  php_int_t halt_offset;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1960:    }",
          "1961:   } else {",
          "1962:    zend_string *str_key;",
          "1965:    for (zend_hash_internal_pointer_reset(&(PHAR_GLOBALS->phar_fname_map));",
          "1966:     HASH_KEY_NON_EXISTENT != zend_hash_get_current_key_ex(&(PHAR_GLOBALS->phar_fname_map), &str_key, &unused, 0, &PHAR_GLOBALS->phar_fname_map.nInternalPointer);",
          "",
          "[Removed Lines]",
          "1963:    ulong unused;",
          "",
          "[Added Lines]",
          "1963:    php_uint_t unused;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2542:  int halt_offset, restore_alias_len, global_flags = 0, closeoldfile;",
          "2543:  char *pos, has_dirs = 0;",
          "2544:  char manifest[18], entry_buffer[24];",
          "2547:  size_t wrote;",
          "2548:  php_uint32 manifest_len, mytime, loc, new_manifest_count;",
          "2549:  php_uint32 newcrc32;",
          "",
          "[Removed Lines]",
          "2545:  off_t manifest_ftell;",
          "2546:  long offset;",
          "",
          "[Added Lines]",
          "2545:  php_off_t manifest_ftell;",
          "2546:  php_int_t offset;",
          "",
          "---------------"
        ],
        "ext/phar/phar_internal.h||ext/phar/phar_internal.h": [
          "File: ext/phar/phar_internal.h -> ext/phar/phar_internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "249:  char                     *filename;",
          "250:  enum phar_fp_type        fp_type;",
          "257:  php_stream               *fp;",
          "258:  php_stream               *cfp;",
          "259:  int                      fp_refcount;",
          "",
          "[Removed Lines]",
          "252:  long                     offset_abs;",
          "254:  long                     offset;",
          "256:  long                     header_offset;",
          "",
          "[Added Lines]",
          "252:  php_int_t                     offset_abs;",
          "254:  php_int_t                     offset;",
          "256:  php_int_t                     header_offset;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "334: typedef struct _phar_entry_fp_info {",
          "335:  enum phar_fp_type        fp_type;",
          "338: } phar_entry_fp_info;",
          "340: struct _phar_entry_fp {",
          "",
          "[Removed Lines]",
          "337:  long                     offset;",
          "",
          "[Added Lines]",
          "337:  php_int_t                     offset;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "415:  PHAR_GLOBALS->cached_fp[phar->phar_pos].ufp = fp;",
          "416: }",
          "419: {",
          "420:  phar_entry_fp_info *data;",
          "",
          "[Removed Lines]",
          "418: static inline void phar_set_fp_type(phar_entry_info *entry, enum phar_fp_type type, off_t offset TSRMLS_DC)",
          "",
          "[Added Lines]",
          "418: static inline void phar_set_fp_type(phar_entry_info *entry, enum phar_fp_type type, php_off_t offset TSRMLS_DC)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "437:  return PHAR_GLOBALS->cached_fp[entry->phar->phar_pos].manifest[entry->manifest_pos].fp_type;",
          "438: }",
          "441: {",
          "442:  if (!entry->is_persistent) {",
          "443:   return entry->offset;",
          "",
          "[Removed Lines]",
          "440: static inline off_t phar_get_fp_offset(phar_entry_info *entry TSRMLS_DC)",
          "",
          "[Added Lines]",
          "440: static inline php_off_t phar_get_fp_offset(phar_entry_info *entry TSRMLS_DC)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "466:  phar_archive_data        *phar;",
          "467:  php_stream               *fp;",
          "472:  unsigned int             for_write:1;",
          "473:  unsigned int             is_zip:1;",
          "474:  unsigned int             is_tar:1;",
          "",
          "[Removed Lines]",
          "469:  off_t                    position;",
          "471:  off_t                    zero;",
          "",
          "[Added Lines]",
          "469:  php_off_t                    position;",
          "471:  php_off_t                    zero;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "564: phar_entry_info * phar_open_jit(phar_archive_data *phar, phar_entry_info *entry, char **error TSRMLS_DC);",
          "565: int phar_parse_metadata(char **buffer, zval *metadata, int zip_metadata_len TSRMLS_DC);",
          "566: void destroy_phar_manifest_entry(zval *zv);",
          "568: php_stream *phar_get_efp(phar_entry_info *entry, int follow_links TSRMLS_DC);",
          "569: int phar_copy_entry_fp(phar_entry_info *source, phar_entry_info *dest, char **error TSRMLS_DC);",
          "570: int phar_open_entry_fp(phar_entry_info *entry, char **error, int follow_links TSRMLS_DC);",
          "",
          "[Removed Lines]",
          "567: int phar_seek_efp(phar_entry_info *entry, off_t offset, int whence, off_t position, int follow_links TSRMLS_DC);",
          "",
          "[Added Lines]",
          "567: int phar_seek_efp(phar_entry_info *entry, php_off_t offset, int whence, php_off_t position, int follow_links TSRMLS_DC);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "578: int phar_is_tar(char *buf, char *fname);",
          "579: int phar_parse_tarfile(php_stream* fp, char *fname, int fname_len, char *alias, int alias_len, phar_archive_data** pphar, int is_data, php_uint32 compression, char **error TSRMLS_DC);",
          "580: int phar_open_or_create_tar(char *fname, int fname_len, char *alias, int alias_len, int is_data, int options, phar_archive_data** pphar, char **error TSRMLS_DC);",
          "584: int phar_parse_zipfile(php_stream *fp, char *fname, int fname_len, char *alias, int alias_len, phar_archive_data** pphar, char **error TSRMLS_DC);",
          "585: int phar_open_or_create_zip(char *fname, int fname_len, char *alias, int alias_len, int is_data, int options, phar_archive_data** pphar, char **error TSRMLS_DC);",
          "588: #ifdef PHAR_MAIN",
          "589: static int phar_open_from_fp(php_stream* fp, char *fname, int fname_len, char *alias, int alias_len, int options, phar_archive_data** pphar, int is_data, char **error TSRMLS_DC);",
          "",
          "[Removed Lines]",
          "581: int phar_tar_flush(phar_archive_data *phar, char *user_stub, long len, int defaultstub, char **error TSRMLS_DC);",
          "586: int phar_zip_flush(phar_archive_data *archive, char *user_stub, long len, int defaultstub, char **error TSRMLS_DC);",
          "",
          "[Added Lines]",
          "581: int phar_tar_flush(phar_archive_data *phar, char *user_stub, php_int_t len, int defaultstub, char **error TSRMLS_DC);",
          "586: int phar_zip_flush(phar_archive_data *archive, char *user_stub, php_int_t len, int defaultstub, char **error TSRMLS_DC);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "600: phar_entry_info *phar_get_entry_info_dir(phar_archive_data *phar, char *path, int path_len, char dir, char **error, int security TSRMLS_DC);",
          "601: phar_entry_data *phar_get_or_create_entry_data(char *fname, int fname_len, char *path, int path_len, const char *mode, char allow_dir, char **error, int security TSRMLS_DC);",
          "602: int phar_get_entry_data(phar_entry_data **ret, char *fname, int fname_len, char *path, int path_len, const char *mode, char allow_dir, char **error, int security TSRMLS_DC);",
          "604: int phar_detect_phar_fname_ext(const char *filename, int filename_len, const char **ext_str, int *ext_len, int executable, int for_create, int is_complete TSRMLS_DC);",
          "605: int phar_split_fname(const char *filename, int filename_len, char **arch, int *arch_len, char **entry, int *entry_len, int executable, int for_create TSRMLS_DC);",
          "",
          "[Removed Lines]",
          "603: int phar_flush(phar_archive_data *archive, char *user_stub, long len, int convert, char **error TSRMLS_DC);",
          "",
          "[Added Lines]",
          "603: int phar_flush(phar_archive_data *archive, char *user_stub, php_int_t len, int convert, char **error TSRMLS_DC);",
          "",
          "---------------"
        ],
        "ext/phar/phar_object.c||ext/phar/phar_object.c": [
          "File: ext/phar/phar_object.c -> ext/phar/phar_object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:  zend_op_array *new_op_array;",
          "156:  zval result;",
          "157:  php_stream *fp;",
          "160:  switch (code) {",
          "161:   case PHAR_MIME_PHPS:",
          "",
          "[Removed Lines]",
          "158:  off_t position;",
          "",
          "[Added Lines]",
          "158:  php_off_t position;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "211:     if (got > 0) {",
          "212:      PHPWRITE(buf, got);",
          "213:      position += got;",
          "215:       break;",
          "216:      }",
          "217:     }",
          "",
          "[Removed Lines]",
          "214:      if (position == (off_t) info->uncompressed_filesize) {",
          "",
          "[Added Lines]",
          "214:      if (position == (php_off_t) info->uncompressed_filesize) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "947: {",
          "948:  char *alias = NULL, *error;",
          "949:  int alias_len = 0;",
          "953:   return;",
          "954:  }",
          "",
          "[Removed Lines]",
          "950:  long dataoffset = 0;",
          "952:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"|s!l\", &alias, &alias_len, &dataoffset) == FAILURE) {",
          "",
          "[Added Lines]",
          "950:  php_int_t dataoffset = 0;",
          "952:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"|s!i\", &alias, &alias_len, &dataoffset) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1000: PHP_METHOD(Phar, canCompress)",
          "1001: {",
          "1005:   return;",
          "1006:  }",
          "",
          "[Removed Lines]",
          "1002:  long method = 0;",
          "1004:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"|l\", &method) == FAILURE) {",
          "",
          "[Added Lines]",
          "1002:  php_int_t method = 0;",
          "1004:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"|i\", &method) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1109: #else",
          "1110:  char *fname, *alias = NULL, *error, *arch = NULL, *entry = NULL, *save_fname;",
          "1111:  int fname_len, alias_len = 0, arch_len, entry_len, is_data;",
          "1114:  phar_archive_object *phar_obj;",
          "1115:  phar_archive_data   *phar_data;",
          "1116:  zval *zobj = getThis(), arg1, arg2;",
          "",
          "[Removed Lines]",
          "1112:  long flags = SPL_FILE_DIR_SKIPDOTS|SPL_FILE_DIR_UNIXPATHS;",
          "1113:  long format = 0;",
          "",
          "[Added Lines]",
          "1112:  php_int_t flags = SPL_FILE_DIR_SKIPDOTS|SPL_FILE_DIR_UNIXPATHS;",
          "1113:  php_int_t format = 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1120:  is_data = instanceof_function(Z_OBJCE_P(zobj), phar_ce_data TSRMLS_CC);",
          "1122:  if (is_data) {",
          "1124:    return;",
          "1125:   }",
          "1126:  } else {",
          "1128:    return;",
          "1129:   }",
          "1130:  }",
          "",
          "[Removed Lines]",
          "1123:   if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s|ls!l\", &fname, &fname_len, &flags, &alias, &alias_len, &format) == FAILURE) {",
          "1127:   if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s|ls!\", &fname, &fname_len, &flags, &alias, &alias_len) == FAILURE) {",
          "",
          "[Added Lines]",
          "1123:   if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s|is!i\", &fname, &fname_len, &flags, &alias, &alias_len, &format) == FAILURE) {",
          "1127:   if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s|is!\", &fname, &fname_len, &flags, &alias, &alias_len) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1900: PHP_METHOD(Phar, count)",
          "1901: {",
          "1904:  PHAR_ARCHIVE_OBJECT();",
          "1907:   RETURN_FALSE;",
          "1908:  }",
          "",
          "[Removed Lines]",
          "1903:  long mode;",
          "1906:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"|l\", &mode) == FAILURE) {",
          "",
          "[Added Lines]",
          "1903:  php_int_t mode;",
          "1906:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"|i\", &mode) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1918: PHP_METHOD(Phar, isFileFormat)",
          "1919: {",
          "1921:  PHAR_ARCHIVE_OBJECT();",
          "1924:   RETURN_FALSE;",
          "1925:  }",
          "",
          "[Removed Lines]",
          "1920:  long type;",
          "1923:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"l\", &type) == FAILURE) {",
          "",
          "[Added Lines]",
          "1920:  php_int_t type;",
          "1923:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"i\", &type) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1941: {",
          "1942:  char *error;",
          "1944:  phar_entry_info *link;",
          "1946:  if (FAILURE == phar_open_entry_fp(entry, &error, 1 TSRMLS_CC)) {",
          "",
          "[Removed Lines]",
          "1943:  off_t offset;",
          "",
          "[Added Lines]",
          "1943:  php_off_t offset;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2300:  php_uint32 flags;",
          "2301:  zend_object *ret;",
          "2304:  PHAR_ARCHIVE_OBJECT();",
          "2307:   return;",
          "2308:  }",
          "",
          "[Removed Lines]",
          "2303:  long format = 9021976, method = 9021976;",
          "2306:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"|lls\", &format, &method, &ext, &ext_len) == FAILURE) {",
          "",
          "[Added Lines]",
          "2303:  php_int_t format = 9021976, method = 9021976;",
          "2306:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"|iis\", &format, &method, &ext, &ext_len) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2403:  php_uint32 flags;",
          "2404:  zend_object *ret;",
          "2407:  PHAR_ARCHIVE_OBJECT();",
          "2410:   return;",
          "2411:  }",
          "",
          "[Removed Lines]",
          "2406:  long format = 9021976, method = 9021976;",
          "2409:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"|lls\", &format, &method, &ext, &ext_len) == FAILURE) {",
          "",
          "[Added Lines]",
          "2406:  php_int_t format = 9021976, method = 9021976;",
          "2409:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"|iis\", &format, &method, &ext, &ext_len) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2812:  zval *zstub;",
          "2813:  char *stub, *error;",
          "2814:  int stub_len;",
          "2816:  php_stream *stream;",
          "2817:  PHAR_ARCHIVE_OBJECT();",
          "",
          "[Removed Lines]",
          "2815:  long len = -1;",
          "",
          "[Added Lines]",
          "2815:  php_int_t len = -1;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2833:   return;",
          "2834:  }",
          "2837:   if ((php_stream_from_zval_no_verify(stream, zstub)) != NULL) {",
          "2838:    if (len > 0) {",
          "2839:     len = -len;",
          "",
          "[Removed Lines]",
          "2836:  if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, \"r|l\", &zstub, &len) == SUCCESS) {",
          "",
          "[Added Lines]",
          "2836:  if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, \"r|i\", &zstub, &len) == SUCCESS) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2963: PHP_METHOD(Phar, setSignatureAlgorithm)",
          "2964: {",
          "2966:  char *error, *key = NULL;",
          "2967:  int key_len = 0;",
          "",
          "[Removed Lines]",
          "2965:  long algo;",
          "",
          "[Added Lines]",
          "2965:  php_int_t algo;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2974:   return;",
          "2975:  }",
          "2978:   return;",
          "2979:  }",
          "",
          "[Removed Lines]",
          "2977:  if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, \"l|s\", &algo, &key, &key_len) != SUCCESS) {",
          "",
          "[Added Lines]",
          "2977:  if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, \"i|s\", &algo, &key, &key_len) != SUCCESS) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "3134: PHP_METHOD(Phar, compress)",
          "3135: {",
          "3137:  char *ext = NULL;",
          "3138:  int ext_len = 0;",
          "3139:  php_uint32 flags;",
          "3140:  zend_object *ret;",
          "3141:  PHAR_ARCHIVE_OBJECT();",
          "3144:   return;",
          "3145:  }",
          "",
          "[Removed Lines]",
          "3136:  long method;",
          "3143:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"l|s\", &method, &ext, &ext_len) == FAILURE) {",
          "",
          "[Added Lines]",
          "3136:  php_int_t method;",
          "3143:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"i|s\", &method, &ext, &ext_len) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3246: {",
          "3247:  char *error;",
          "3248:  php_uint32 flags;",
          "3250:  PHAR_ARCHIVE_OBJECT();",
          "3253:   return;",
          "3254:  }",
          "",
          "[Removed Lines]",
          "3249:  long method;",
          "3252:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"l\", &method) == FAILURE) {",
          "",
          "[Added Lines]",
          "3249:  php_int_t method;",
          "3252:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"i\", &method) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "4429: PHP_METHOD(PharFileInfo, isCompressed)",
          "4430: {",
          "4433:  PHAR_ENTRY_OBJECT();",
          "4436:   return;",
          "4437:  }",
          "",
          "[Removed Lines]",
          "4432:  long method = 9021976;",
          "4435:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"|l\", &method) == FAILURE) {",
          "",
          "[Added Lines]",
          "4432:  php_int_t method = 9021976;",
          "4435:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"|i\", &method) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "4512: PHP_METHOD(PharFileInfo, chmod)",
          "4513: {",
          "4514:  char *error;",
          "4516:  PHAR_ENTRY_OBJECT();",
          "4518:  if (entry_obj->entry->is_temp_dir) {",
          "",
          "[Removed Lines]",
          "4515:  long perms;",
          "",
          "[Added Lines]",
          "4515:  php_int_t perms;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "4526:   return;",
          "4527:  }",
          "4530:   return;",
          "4531:  }",
          "",
          "[Removed Lines]",
          "4529:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"l\", &perms) == FAILURE) {",
          "",
          "[Added Lines]",
          "4529:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"i\", &perms) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "4775: PHP_METHOD(PharFileInfo, compress)",
          "4776: {",
          "4778:  char *error;",
          "4779:  PHAR_ENTRY_OBJECT();",
          "4782:   return;",
          "4783:  }",
          "",
          "[Removed Lines]",
          "4777:  long method;",
          "4781:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"l\", &method) == FAILURE) {",
          "",
          "[Added Lines]",
          "4777:  php_int_t method;",
          "4781:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"i\", &method) == FAILURE) {",
          "",
          "---------------"
        ],
        "ext/phar/stream.c||ext/phar/stream.c": [
          "File: ext/phar/stream.c -> ext/phar/stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "378:  got = php_stream_read(data->fp, buf, MIN(count, entry->uncompressed_filesize - data->position));",
          "379:  data->position = php_stream_tell(data->fp) - data->zero;",
          "382:  return got;",
          "383: }",
          "",
          "[Removed Lines]",
          "380:  stream->eof = (data->position == (off_t) entry->uncompressed_filesize);",
          "",
          "[Added Lines]",
          "380:  stream->eof = (data->position == (php_off_t) entry->uncompressed_filesize);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "390: {",
          "391:  phar_entry_data *data = (phar_entry_data *)stream->abstract;",
          "392:  phar_entry_info *entry;",
          "393:  int res;",
          "396:  if (data->internal_file->link) {",
          "397:   entry = phar_get_link_source(data->internal_file TSRMLS_CC);",
          "",
          "[Removed Lines]",
          "394:  off_t temp;",
          "",
          "[Added Lines]",
          "394:  php_off_t temp;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "412:   default:",
          "413:    temp = 0;",
          "414:  }",
          "417:   return -1;",
          "418:  }",
          "",
          "[Removed Lines]",
          "415:  if (temp > data->zero + (off_t) entry->uncompressed_filesize) {",
          "",
          "[Added Lines]",
          "415:  if (temp > data->zero + (php_off_t) entry->uncompressed_filesize) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "440:   return -1;",
          "441:  }",
          "442:  data->position = php_stream_tell(data->fp);",
          "444:   data->internal_file->uncompressed_filesize = data->position;",
          "445:  }",
          "446:  data->internal_file->compressed_filesize = data->internal_file->uncompressed_filesize;",
          "",
          "[Removed Lines]",
          "443:  if (data->position > (off_t)data->internal_file->uncompressed_filesize) {",
          "",
          "[Added Lines]",
          "443:  if (data->position > (php_off_t)data->internal_file->uncompressed_filesize) {",
          "",
          "---------------"
        ],
        "ext/phar/stream.h||ext/phar/stream.h": [
          "File: ext/phar/stream.h -> ext/phar/stream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: static size_t phar_stream_read( php_stream *stream, char *buf, size_t count TSRMLS_DC);",
          "35: static int    phar_stream_close(php_stream *stream, int close_handle TSRMLS_DC);",
          "36: static int    phar_stream_flush(php_stream *stream TSRMLS_DC);",
          "38: static int    phar_stream_stat( php_stream *stream, php_stream_statbuf *ssb TSRMLS_DC);",
          "39: END_EXTERN_C()",
          "",
          "[Removed Lines]",
          "37: static int    phar_stream_seek( php_stream *stream, off_t offset, int whence, off_t *newoffset TSRMLS_DC);",
          "",
          "[Added Lines]",
          "37: static int    phar_stream_seek( php_stream *stream, php_off_t offset, int whence, php_off_t *newoffset TSRMLS_DC);",
          "",
          "---------------"
        ],
        "ext/phar/tar.c||ext/phar/tar.c": [
          "File: ext/phar/tar.c -> ext/phar/tar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "256:    phar_tar_number(hdr->size, sizeof(hdr->size));",
          "258:   if (((!old && hdr->prefix[0] == 0) || old) && strlen(hdr->name) == sizeof(\".phar/signature.bin\")-1 && !strncmp(hdr->name, \".phar/signature.bin\", sizeof(\".phar/signature.bin\")-1)) {",
          "261:    if (size > 511) {",
          "262:     if (error) {",
          "",
          "[Removed Lines]",
          "259:    off_t curloc;",
          "",
          "[Added Lines]",
          "259:    php_off_t curloc;",
          "",
          "---------------"
        ],
        "ext/phar/util.c||ext/phar/util.c": [
          "File: ext/phar/util.c -> ext/phar/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: #include <openssl/ssl.h>",
          "39: #include <openssl/pkcs12.h>",
          "40: #else",
          "42: #endif",
          "",
          "[Removed Lines]",
          "41: static int phar_call_openssl_signverify(int is_sign, php_stream *fp, off_t end, char *key, int key_len, char **signature, int *signature_len TSRMLS_DC);",
          "",
          "[Added Lines]",
          "41: static int phar_call_openssl_signverify(int is_sign, php_stream *fp, php_off_t end, char *key, int key_len, char **signature, int *signature_len TSRMLS_DC);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117: }",
          "121: {",
          "122:  php_stream *fp = phar_get_efp(entry, follow_links TSRMLS_CC);",
          "125:  if (!fp) {",
          "126:   return -1;",
          "",
          "[Removed Lines]",
          "123:  off_t temp, eoffset;",
          "",
          "[Added Lines]",
          "123:  php_off_t temp, eoffset;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "154:    temp = 0;",
          "155:  }",
          "158:   return -1;",
          "159:  }",
          "",
          "[Removed Lines]",
          "157:  if (temp > eoffset + (off_t) entry->uncompressed_filesize) {",
          "",
          "[Added Lines]",
          "157:  if (temp > eoffset + (php_off_t) entry->uncompressed_filesize) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "693:  php_stream_filter *filter;",
          "694:  phar_archive_data *phar = entry->phar;",
          "695:  char *filtername;",
          "697:  php_stream *ufp;",
          "698:  phar_entry_data dummy;",
          "",
          "[Removed Lines]",
          "696:  off_t loc;",
          "",
          "[Added Lines]",
          "696:  php_off_t loc;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "786:  php_stream_flush(ufp);",
          "787:  php_stream_filter_remove(filter, 1 TSRMLS_CC);",
          "790:   spprintf(error, 4096, \"phar error: internal corruption of phar \\\"%s\\\" (actual filesize mismatch on file \\\"%s\\\")\", phar->fname, entry->filename);",
          "791:   return FAILURE;",
          "792:  }",
          "",
          "[Removed Lines]",
          "789:  if (php_stream_tell(ufp) - loc != (off_t) entry->uncompressed_filesize) {",
          "",
          "[Added Lines]",
          "789:  if (php_stream_tell(ufp) - loc != (php_off_t) entry->uncompressed_filesize) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1480: {",
          "1481:  int read_size, len;",
          "1483:  unsigned char buf[1024];",
          "1485:  php_stream_rewind(fp);",
          "",
          "[Removed Lines]",
          "1482:  off_t read_len;",
          "",
          "[Added Lines]",
          "1482:  php_off_t read_len;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1577:    while (read_size && (len = php_stream_read(fp, (char*)buf, read_size)) > 0) {",
          "1578:     EVP_VerifyUpdate (&md_ctx, buf, len);",
          "1581:     if (read_len < read_size) {",
          "1582:      read_size = (int)read_len;",
          "",
          "[Removed Lines]",
          "1579:     read_len -= (off_t)len;",
          "",
          "[Added Lines]",
          "1579:     read_len -= (php_off_t)len;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1617:    while ((len = php_stream_read(fp, (char*)buf, read_size)) > 0) {",
          "1618:     PHP_SHA512Update(&context, buf, len);",
          "1620:     if (read_len < read_size) {",
          "1621:      read_size = (int)read_len;",
          "1622:     }",
          "",
          "[Removed Lines]",
          "1619:     read_len -= (off_t)len;",
          "",
          "[Added Lines]",
          "1619:     read_len -= (php_off_t)len;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1650:    while ((len = php_stream_read(fp, (char*)buf, read_size)) > 0) {",
          "1651:     PHP_SHA256Update(&context, buf, len);",
          "1653:     if (read_len < read_size) {",
          "1654:      read_size = (int)read_len;",
          "1655:     }",
          "",
          "[Removed Lines]",
          "1652:     read_len -= (off_t)len;",
          "",
          "[Added Lines]",
          "1652:     read_len -= (php_off_t)len;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1691:    while ((len = php_stream_read(fp, (char*)buf, read_size)) > 0) {",
          "1692:     PHP_SHA1Update(&context, buf, len);",
          "1694:     if (read_len < read_size) {",
          "1695:      read_size = (int)read_len;",
          "1696:     }",
          "",
          "[Removed Lines]",
          "1693:     read_len -= (off_t)len;",
          "",
          "[Added Lines]",
          "1693:     read_len -= (php_off_t)len;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1724:    while ((len = php_stream_read(fp, (char*)buf, read_size)) > 0) {",
          "1725:     PHP_MD5Update(&context, buf, len);",
          "1727:     if (read_len < read_size) {",
          "1728:      read_size = (int)read_len;",
          "1729:     }",
          "",
          "[Removed Lines]",
          "1726:     read_len -= (off_t)len;",
          "",
          "[Added Lines]",
          "1726:     read_len -= (php_off_t)len;",
          "",
          "---------------"
        ],
        "ext/phar/zip.c||ext/phar/zip.c": [
          "File: ext/phar/zip.c -> ext/phar/zip.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "167: {",
          "168:  phar_zip_dir_end locator;",
          "169:  char buf[sizeof(locator) + 65536];",
          "171:  php_uint16 i;",
          "172:  phar_archive_data *mydata = NULL;",
          "173:  phar_entry_info entry = {0};",
          "",
          "[Removed Lines]",
          "170:  long size;",
          "",
          "[Added Lines]",
          "170:  php_int_t size;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "339:  for (i = 0; i < PHAR_GET_16(locator.count); ++i) {",
          "340:   phar_zip_central_dir_file zipentry;",
          "343:   if (sizeof(zipentry) != php_stream_read(fp, (char *) &zipentry, sizeof(zipentry))) {",
          "344:    PHAR_ZIP_FAIL(\"unable to read central directory entry, truncated\");",
          "",
          "[Removed Lines]",
          "341:   off_t beforeus = php_stream_tell(fp);",
          "",
          "[Added Lines]",
          "341:   php_off_t beforeus = php_stream_tell(fp);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "393:   if (entry.filename_len == sizeof(\".phar/signature.bin\")-1 && !strncmp(entry.filename, \".phar/signature.bin\", sizeof(\".phar/signature.bin\")-1)) {",
          "394:    size_t read;",
          "395:    php_stream *sigfile;",
          "397:    char *sig;",
          "399:    now = php_stream_tell(fp);",
          "",
          "[Removed Lines]",
          "396:    off_t now;",
          "",
          "[Added Lines]",
          "396:    php_off_t now;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "448:   phar_add_virtual_dirs(mydata, entry.filename, entry.filename_len TSRMLS_CC);",
          "450:   if (PHAR_GET_16(zipentry.extra_len)) {",
          "452:    if (FAILURE == phar_zip_process_extra(fp, &entry, PHAR_GET_16(zipentry.extra_len) TSRMLS_CC)) {",
          "453:     pefree(entry.filename, entry.is_persistent);",
          "454:     PHAR_ZIP_FAIL(\"Unable to process extra field header for file in central directory\");",
          "",
          "[Removed Lines]",
          "451:    off_t loc = php_stream_tell(fp);",
          "",
          "[Added Lines]",
          "451:    php_off_t loc = php_stream_tell(fp);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "538:   if (!actual_alias && entry.filename_len == sizeof(\".phar/alias.txt\")-1 && !strncmp(entry.filename, \".phar/alias.txt\", sizeof(\".phar/alias.txt\")-1)) {",
          "539:    php_stream_filter *filter;",
          "542:    phar_zip_file_header local;",
          "",
          "[Removed Lines]",
          "540:    off_t saveloc;",
          "",
          "[Added Lines]",
          "540:    php_off_t saveloc;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "790:  phar_zip_central_dir_file central;",
          "791:  struct _phar_zip_pass *p;",
          "792:  php_uint32 newcrc32;",
          "794:  int not_really_modified = 0;",
          "795:  p = (struct _phar_zip_pass*) arg;",
          "",
          "[Removed Lines]",
          "793:  off_t offset;",
          "",
          "[Added Lines]",
          "793:  php_off_t offset;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1108:   char *signature, sigbuf[8];",
          "1109:   phar_entry_info entry = {0};",
          "1110:   php_stream *newfile;",
          "1113:   newfile = php_stream_fopen_tmpfile();",
          "1114:   if (newfile == NULL) {",
          "",
          "[Removed Lines]",
          "1111:   off_t tell, st;",
          "",
          "[Added Lines]",
          "1111:   php_off_t tell, st;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "249a8fd9ae2324c84ede7ecfca6f6026e6d87df6",
      "candidate_info": {
        "commit_hash": "249a8fd9ae2324c84ede7ecfca6f6026e6d87df6",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/249a8fd9ae2324c84ede7ecfca6f6026e6d87df6",
        "files": [
          "ext/phar/tests/bug64931/bug64931.phpt"
        ],
        "message": "Merge branch 'PHP-5.6' into PHP-7.0\n\n* PHP-5.6:\n  fix dir separator in test",
        "before_after_code_files": [
          "ext/phar/tests/bug64931/bug64931.phpt||ext/phar/tests/bug64931/bug64931.phpt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/phar/tests/bug64931/bug64931.phpt||ext/phar/tests/bug64931/bug64931.phpt"
          ],
          "candidate": [
            "ext/phar/tests/bug64931/bug64931.phpt||ext/phar/tests/bug64931/bug64931.phpt"
          ]
        }
      },
      "candidate_diff": {
        "ext/phar/tests/bug64931/bug64931.phpt||ext/phar/tests/bug64931/bug64931.phpt": [
          "File: ext/phar/tests/bug64931/bug64931.phpt -> ext/phar/tests/bug64931/bug64931.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: CAUGHT: Cannot create any files in magic \".phar\" directory",
          "56: CAUGHT: Cannot create any files in magic \".phar\" directory",
          "",
          "[Removed Lines]",
          "58: Warning: Phar::addFromString() expects parameter 1 to be a valid path, string given in %s/bug64931.php on line %d",
          "59: ===DONE===",
          "",
          "[Added Lines]",
          "59: ===DONE===",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6480725007bdc5bab4f24ac481a4cb082074851d",
      "candidate_info": {
        "commit_hash": "6480725007bdc5bab4f24ac481a4cb082074851d",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/6480725007bdc5bab4f24ac481a4cb082074851d",
        "files": [
          "NEWS",
          "ext/phar/phar_object.c",
          "ext/phar/tests/bug64931/bug64931.phpt",
          "ext/phar/tests/bug64931/src/.pharignore"
        ],
        "message": "Fixed bug #64931\n\nphar_add_file is too restrive on filename\n\nCheck for any of '/', '\\\\', '\\0' after \".phar\".",
        "before_after_code_files": [
          "ext/phar/phar_object.c||ext/phar/phar_object.c",
          "ext/phar/tests/bug64931/bug64931.phpt||ext/phar/tests/bug64931/bug64931.phpt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/phar/phar_object.c||ext/phar/phar_object.c",
            "ext/phar/tests/bug64931/bug64931.phpt||ext/phar/tests/bug64931/bug64931.phpt"
          ],
          "candidate": [
            "ext/phar/phar_object.c||ext/phar/phar_object.c",
            "ext/phar/tests/bug64931/bug64931.phpt||ext/phar/tests/bug64931/bug64931.phpt"
          ]
        }
      },
      "candidate_diff": {
        "ext/phar/phar_object.c||ext/phar/phar_object.c": [
          "File: ext/phar/phar_object.c -> ext/phar/phar_object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3622:  phar_entry_data *data;",
          "3623:  php_stream *contents_file;",
          "3626:   zend_throw_exception_ex(spl_ce_BadMethodCallException, 0 TSRMLS_CC, \"Cannot create any files in magic \\\".phar\\\" directory\", (*pphar)->fname);",
          "3627:   return;",
          "3628:  }",
          "",
          "[Removed Lines]",
          "3625:  if (filename_len >= sizeof(\".phar\")-1 && !memcmp(filename, \".phar\", sizeof(\".phar\")-1)) {",
          "",
          "[Added Lines]",
          "3625:  if (filename_len >= sizeof(\".phar\")-1 && !memcmp(filename, \".phar\", sizeof(\".phar\")-1) && (filename[5] == '/' || filename[5] == '\\\\' || filename[5] == '\\0')) {",
          "",
          "---------------"
        ],
        "ext/phar/tests/bug64931/bug64931.phpt||ext/phar/tests/bug64931/bug64931.phpt": [
          "File: ext/phar/tests/bug64931/bug64931.phpt -> ext/phar/tests/bug64931/bug64931.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #64931 (phar_add_file is too restrictive on filename)",
          "3: --SKIPIF--",
          "4: <?php extension_loaded(\"phar\") or die(\"skip need ext/phar support\"); ?>",
          "5: --INI--",
          "6: phar.readonly=0",
          "7: --FILE--",
          "8: <?php",
          "10: echo \"Test\\n\";",
          "12: @unlink(__DIR__.\"/bug64931.phar\");",
          "13: $phar = new Phar(__DIR__.\"/bug64931.phar\");",
          "14: $phar->addFile(__DIR__.\"/src/.pharignore\", \".pharignore\");",
          "15: try {",
          "16:  $phar->addFile(__DIR__.\"/src/.pharignore\", \".phar/gotcha\");",
          "17: } catch (Exception $e) {",
          "18:  echo \"CAUGHT: \". $e->getMessage() .\"\\n\";",
          "19: }",
          "21: try {",
          "22:  $phar->addFromString(\".phar\", \"gotcha\");",
          "23: } catch (Exception $e) {",
          "24:  echo \"CAUGHT: \". $e->getMessage() .\"\\n\";",
          "25: }",
          "27: try {",
          "28:  $phar->addFromString(\".phar//\", \"gotcha\");",
          "29: } catch (Exception $e) {",
          "30:  echo \"CAUGHT: \". $e->getMessage() .\"\\n\";",
          "31: }",
          "33: try {",
          "34:  $phar->addFromString(\".phar\\\\\", \"gotcha\");",
          "35: } catch (Exception $e) {",
          "36:  echo \"CAUGHT: \". $e->getMessage() .\"\\n\";",
          "37: }",
          "39: try {",
          "40:  $phar->addFromString(\".phar\\0\", \"gotcha\");",
          "41: } catch (Exception $e) {",
          "42:  echo \"CAUGHT: \". $e->getMessage() .\"\\n\";",
          "43: }",
          "45: ?>",
          "46: ===DONE===",
          "47: --CLEAN--",
          "48: <?php",
          "49: @unlink(__DIR__.\"/bug64931.phar\");",
          "50: ?>",
          "51: --EXPECT--",
          "52: Test",
          "53: CAUGHT: Cannot create any files in magic \".phar\" directory",
          "54: CAUGHT: Cannot create any files in magic \".phar\" directory",
          "55: CAUGHT: Cannot create any files in magic \".phar\" directory",
          "56: CAUGHT: Cannot create any files in magic \".phar\" directory",
          "57: CAUGHT: Cannot create any files in magic \".phar\" directory",
          "58: ===DONE===",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0922eca0c7fd6864b4b631a48ff366ed10bc24ca",
      "candidate_info": {
        "commit_hash": "0922eca0c7fd6864b4b631a48ff366ed10bc24ca",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/0922eca0c7fd6864b4b631a48ff366ed10bc24ca",
        "files": [
          "ext/phar/phar_object.c"
        ],
        "message": "Made Phar throw exception on bad constructor.",
        "before_after_code_files": [
          "ext/phar/phar_object.c||ext/phar/phar_object.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/phar/phar_object.c||ext/phar/phar_object.c"
          ],
          "candidate": [
            "ext/phar/phar_object.c||ext/phar/phar_object.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/phar/phar_object.c||ext/phar/phar_object.c": [
          "File: ext/phar/phar_object.c -> ext/phar/phar_object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1120:  phar_archive_object *phar_obj;",
          "1121:  phar_archive_data   *phar_data;",
          "1122:  zval *zobj = getThis(), arg1, arg2;",
          "1124:  phar_obj = (phar_archive_object*)((char*)Z_OBJ_P(zobj) - Z_OBJ_P(zobj)->handlers->offset);",
          "1126:  is_data = instanceof_function(Z_OBJCE_P(zobj), phar_ce_data);",
          "1128:  if (is_data) {",
          "1130:    return;",
          "1131:   }",
          "1132:  } else {",
          "1134:    return;",
          "1135:   }",
          "1136:  }",
          "",
          "[Removed Lines]",
          "1129:   if (zend_parse_parameters(ZEND_NUM_ARGS(), \"s|ls!l\", &fname, &fname_len, &flags, &alias, &alias_len, &format) == FAILURE) {",
          "1133:   if (zend_parse_parameters(ZEND_NUM_ARGS(), \"s|ls!\", &fname, &fname_len, &flags, &alias, &alias_len) == FAILURE) {",
          "",
          "[Added Lines]",
          "1123:  zend_error_handling zeh;",
          "1124:  int rv;",
          "1131:   zend_replace_error_handling(EH_THROW, phar_ce_PharException, &zeh TSRMLS_CC);",
          "1132:   rv = zend_parse_parameters(ZEND_NUM_ARGS(), \"s|ls!l\", &fname, &fname_len, &flags, &alias, &alias_len, &format);",
          "1133:   zend_restore_error_handling(&zeh TSRMLS_CC);",
          "1134:   if (rv == FAILURE) {",
          "1138:   zend_replace_error_handling(EH_THROW, phar_ce_PharException, &zeh TSRMLS_CC);",
          "1139:   rv = zend_parse_parameters(ZEND_NUM_ARGS(), \"s|ls!\", &fname, &fname_len, &flags, &alias, &alias_len);",
          "1140:   zend_restore_error_handling(&zeh TSRMLS_CC);",
          "1141:   if (rv == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4343:  phar_entry_info *entry_info;",
          "4344:  phar_archive_data *phar_data;",
          "4345:  zval *zobj = getThis(), arg1;",
          "4348:   return;",
          "4349:  }",
          "",
          "[Removed Lines]",
          "4347:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"s\", &fname, &fname_len) == FAILURE) {",
          "",
          "[Added Lines]",
          "4355:  zend_error_handling zeh;",
          "4356:  int rv;",
          "4358:  zend_replace_error_handling(EH_THROW, phar_ce_PharException, &zeh TSRMLS_CC);",
          "4359:  rv = zend_parse_parameters(ZEND_NUM_ARGS(), \"s\", &fname, &fname_len);",
          "4360:  zend_restore_error_handling(&zeh TSRMLS_CC);",
          "4362:  if (rv == FAILURE) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}