{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c26e78d275134213fa35956b969efa9d5834a664",
      "candidate_info": {
        "commit_hash": "c26e78d275134213fa35956b969efa9d5834a664",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c26e78d275134213fa35956b969efa9d5834a664",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5misc.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a spurious report of corruption that could be made by the fts5 integrity-check in SQLITE_DEBUG builds if the fts5 index contains malformed utf text.\n\nFossilOrigin-Name: a11b393dc2c882cf0b3c47c3405bf43ca1d6459605bd39cccce4d32da653a72d",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5723:   return rc;",
          "5724: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5731: static int fts5TestUtf8(const char *z, int n){",
          "5732:   assert( n>0 );",
          "5733:   int i = 0;",
          "5734:   while( i<n ){",
          "5735:     if( (z[i] & 0x80)==0x00 ){",
          "5736:       i++;",
          "5737:     }else",
          "5738:     if( (z[i] & 0xE0)==0xC0 ){",
          "5739:       if( i+1>=n || (z[i+1] & 0xC0)!=0x80 ) return 1;",
          "5740:       i += 2;",
          "5741:     }else",
          "5742:     if( (z[i] & 0xF0)==0xE0 ){",
          "5743:       if( i+2>=n || (z[i+1] & 0xC0)!=0x80 || (z[i+2] & 0xC0)!=0x80 ) return 1;",
          "5744:       i += 3;",
          "5745:     }else",
          "5746:     if( (z[i] & 0xF8)==0xF0 ){",
          "5747:       if( i+3>=n || (z[i+1] & 0xC0)!=0x80 || (z[i+2] & 0xC0)!=0x80 ) return 1;",
          "5748:       if( (z[i+2] & 0xC0)!=0x80 ) return 1;",
          "5749:       i += 3;",
          "5750:     }else{",
          "5751:       return 1;",
          "5752:     }",
          "5753:   }",
          "5755:   return 0;",
          "5756: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5768:       if( iIdx>0 && rc==SQLITE_OK ){",
          "5769:         int f = flags|FTS5INDEX_QUERY_TEST_NOIDX;",
          "5770:         ck2 = 0;",
          "",
          "[Removed Lines]",
          "5767:     if( p->nPendingData==0 ){",
          "",
          "[Added Lines]",
          "5804:     if( p->nPendingData==0 && 0==fts5TestUtf8(zTerm, nTerm) ){",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test": [
          "File: ext/fts5/test/fts5misc.test -> ext/fts5/test/fts5misc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "250:   -4764623217061966105 8324454597464624651",
          "251: }",
          "254: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253: #-------------------------------------------------------------------------",
          "254: #",
          "255: reset_db",
          "256: do_execsql_test 10.0 {",
          "257:   CREATE VIRTUAL TABLE vt1 USING fts5(c1, c2, prefix = 1, tokenize = \"ascii\");",
          "258:   INSERT INTO vt1 VALUES (x'e4', '\u452c');",
          "259: }",
          "261: do_execsql_test 10.1 {",
          "262:   SELECT quote(CAST(c1 AS blob)), quote(CAST(c2 AS blob)) FROM vt1",
          "263: } {X'E4' X'E494AC'}",
          "265: do_execsql_test 10.2 {",
          "266:   INSERT INTO vt1(vt1) VALUES('integrity-check');",
          "267: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b473ad35c5ce355853e1805a5c0658bda1500775f22f59c6b6759ae990e65aca",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "790b37a2403eb479fcb9e33e0d7622b78524c579",
      "candidate_info": {
        "commit_hash": "790b37a2403eb479fcb9e33e0d7622b78524c579",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/790b37a2403eb479fcb9e33e0d7622b78524c579",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/parse.y",
          "src/select.c",
          "src/sqliteInt.h",
          "src/vdbe.c",
          "src/where.c",
          "test/in4.test"
        ],
        "message": "Omit the \"x IN (y)\" to \"x==y\" optimization of check-in [e68b427afbc82e20] (and ticket [e39d032577df6942]) as it causes difficult affinity problems as demonstrated by ticket [dbaf8a6820be1ece] and the original assertion fault is no longer a factor due to countless other changes of the previous 5 years.\n\nFossilOrigin-Name: 7f5168a76a400fc2e1e40c6950470b1bfb38a0be54fc5518c17c29fdae7d8f1f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/parse.y||src/parse.y",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbe.c||src/vdbe.c",
          "src/where.c||src/where.c",
          "test/in4.test||test/in4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 069c2f4c61f06211a8981abc412afcc1536ece13380b13a70aa99123f8f527cd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: char sqlite3ExprAffinity(Expr *pExpr){",
          "46:   int op;",
          "48:   while( ExprHasProperty(pExpr, EP_Skip) ){",
          "49:     assert( pExpr->op==TK_COLLATE );",
          "50:     pExpr = pExpr->pLeft;",
          "",
          "[Removed Lines]",
          "47:   if( pExpr->flags & EP_Generic ) return 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "156:   Expr *p = pExpr;",
          "157:   while( p ){",
          "158:     int op = p->op;",
          "160:     if( op==TK_REGISTER ) op = p->op2;",
          "161:     if( (op==TK_AGG_COLUMN || op==TK_COLUMN || op==TK_TRIGGER)",
          "162:      && p->y.pTab!=0",
          "",
          "[Removed Lines]",
          "159:     if( p->flags & EP_Generic ) break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1177:       sqlite3ExprUnmapAndDelete(pParse, A);",
          "1178:       A = sqlite3ExprAlloc(pParse->db, TK_INTEGER,&sqlite3IntTokens[N],1);",
          "1206:     }else{",
          "1207:       A = sqlite3PExpr(pParse, TK_IN, A, 0);",
          "1208:       if( A ){",
          "",
          "[Removed Lines]",
          "1179:     }else if( Y->nExpr==1 ){",
          "1196:       Expr *pRHS = Y->a[0].pExpr;",
          "1197:       Y->a[0].pExpr = 0;",
          "1198:       sqlite3ExprListDelete(pParse->db, Y);",
          "1201:       if( ALWAYS(pRHS) ){",
          "1202:         pRHS->flags &= ~EP_Collate;",
          "1203:         pRHS->flags |= EP_Generic;",
          "1204:       }",
          "1205:       A = sqlite3PExpr(pParse, N ? TK_NE : TK_EQ, A, pRHS);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3476:           pNew->iRightJoinTable = pExpr->iRightJoinTable;",
          "3477:           ExprSetProperty(pNew, EP_FromJoin);",
          "3478:         }",
          "3482:         sqlite3ExprDelete(db, pExpr);",
          "3483:         pExpr = pNew;",
          "3484:       }",
          "",
          "[Removed Lines]",
          "3479:         if( pNew && ExprHasProperty(pExpr,EP_Generic) ){",
          "3480:           ExprSetProperty(pNew, EP_Generic);",
          "3481:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5445:   assert( pOp->opcode!=OP_Next",
          "5446:        || pC->seekOp==OP_SeekGT || pC->seekOp==OP_SeekGE",
          "5449:   assert( pOp->opcode!=OP_Prev",
          "5450:        || pC->seekOp==OP_SeekLT || pC->seekOp==OP_SeekLE",
          "5452:        || pC->seekOp==OP_NullRow);",
          "5454:   rc = pOp->p4.xAdvance(pC->uc.pCursor, pOp->p3);",
          "",
          "[Removed Lines]",
          "5447:        || pC->seekOp==OP_Rewind || pC->seekOp==OP_Found",
          "5448:        || pC->seekOp==OP_NullRow|| pC->seekOp==OP_SeekRowid);",
          "5451:        || pC->seekOp==OP_Last",
          "",
          "[Added Lines]",
          "5447:        || pC->seekOp==OP_Rewind || pC->seekOp==OP_Found",
          "5448:        || pC->seekOp==OP_NullRow|| pC->seekOp==OP_SeekRowid",
          "5449:        || pC->seekOp==OP_IfNoHope);",
          "5452:        || pC->seekOp==OP_Last   || pC->seekOp==OP_IfNoHope",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2517:       }else if( ALWAYS(pExpr->x.pList && pExpr->x.pList->nExpr) ){",
          "2519:         nIn = sqlite3LogEst(pExpr->x.pList->nExpr);",
          "2522:       }",
          "2523:       if( pProbe->hasStat1 ){",
          "2524:         LogEst M, logK, safetyMargin;",
          "",
          "[Removed Lines]",
          "2520:         assert( nIn>0 );  /* RHS always has 2 or more terms...  The parser",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/in4.test||test/in4.test": [
          "File: test/in4.test -> test/in4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "226: do_execsql_test in4-3.43 {",
          "227:   SELECT * FROM t3 WHERE x IN (10);",
          "228: } {10 10 10}",
          "233: do_execsql_test in4-3.45 {",
          "234:   SELECT * FROM t3 WHERE x NOT IN (10,11,99999);",
          "235: } {1 1 1}",
          "",
          "[Removed Lines]",
          "229: do_execsql_test in4-3.44 {",
          "230:   EXPLAIN",
          "231:   SELECT * FROM t3 WHERE x IN (10);",
          "232: } {~/OpenEphemeral/}",
          "",
          "[Added Lines]",
          "230: # This test would verify that the \"X IN (Y)\" -> \"X==Y\" optimization",
          "231: # was working.  But we have now taken that optimization out.",
          "232: #do_execsql_test in4-3.44 {",
          "233: #  EXPLAIN",
          "234: #  SELECT * FROM t3 WHERE x IN (10);",
          "235: #} {~/OpenEphemeral/}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "326: do_execsql_test in4-6.1-eqp {",
          "327:   EXPLAIN QUERY PLAN",
          "328:   SELECT * FROM t6a, t6b WHERE a=3 AND b IN (c);",
          "330: do_execsql_test in4-6.2 {",
          "331:   SELECT * FROM t6a, t6b WHERE a=3 AND c IN (b);",
          "332: } {3 4 4 44}",
          "",
          "[Removed Lines]",
          "329: } {~/SCAN/}",
          "",
          "[Added Lines]",
          "332: } {~/SCAN TABLE t6a/}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1cb0263bcd2fcce37ff203527033bea8aeb08ef2",
      "candidate_info": {
        "commit_hash": "1cb0263bcd2fcce37ff203527033bea8aeb08ef2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1cb0263bcd2fcce37ff203527033bea8aeb08ef2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix an obsolete comment in the CLI.  No code changes.\n\nFossilOrigin-Name: fade103cbac1b067f9544935b767f36dc266aceb3269cc84a3ae3b04ad9a4823",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e775ef002dd33e6bcbeec8d4b6ad7f59749e35548c7a59c9fa3bcfdc5cc50730",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in"
        ]
      }
    },
    {
      "candidate_hash": "a1bd5c6aae64da59b5ef91f0fd08200cec8de359",
      "candidate_info": {
        "commit_hash": "a1bd5c6aae64da59b5ef91f0fd08200cec8de359",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a1bd5c6aae64da59b5ef91f0fd08200cec8de359",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c"
        ],
        "message": "Move a local variable declaration into the outermost scope in which it is used. This fixes an ASAN warning.\n\nFossilOrigin-Name: ac3b6021d9437ab1c027850d321f0a3e575b008763d8d515e2347f7d4e7c294b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0f850a25d67a752fe1e9059c0c3f78e00c222113e556a7605fd3c50817b573cb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1081:   Trigger *pNew = pParse->pNewTrigger;",
          "1082:   TriggerStep *pStep;",
          "1083:   NameContext sNC;",
          "1084:   int rc = SQLITE_OK;",
          "1086:   memset(&sNC, 0, sizeof(sNC));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1084:   SrcList sSrc;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1111:       if( pTarget==0 ){",
          "1112:         rc = SQLITE_ERROR;",
          "1113:       }else if( SQLITE_OK==(rc = sqlite3ViewGetColumnNames(pParse, pTarget)) ){",
          "1115:         memset(&sSrc, 0, sizeof(sSrc));",
          "1116:         sSrc.nSrc = 1;",
          "1117:         sSrc.a[0].zName = pStep->zTarget;",
          "",
          "[Removed Lines]",
          "1114:         SrcList sSrc;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
      "candidate_info": {
        "commit_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/54d501092d88c0cf89bec4279951f548fb0b8618",
        "files": [
          "ext/misc/zipfile.c",
          "manifest",
          "manifest.uuid",
          "test/zipfile.test"
        ],
        "message": "Fix the zipfile extension so that INSERT works even if the pathname of the file being inserted is a NULL.  Bug discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
        "before_after_code_files": [
          "ext/misc/zipfile.c||ext/misc/zipfile.c",
          "manifest.uuid||manifest.uuid",
          "test/zipfile.test||test/zipfile.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/zipfile.c||ext/misc/zipfile.c": [
          "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1620:     if( rc==SQLITE_OK ){",
          "1621:       zPath = (const char*)sqlite3_value_text(apVal[2]);",
          "1622:       nPath = (int)strlen(zPath);",
          "1623:       mTime = zipfileGetTime(apVal[4]);",
          "1624:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1622:       if( zPath==0 ) zPath = \"\";",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/zipfile.test||test/zipfile.test": [
          "File: test/zipfile.test -> test/zipfile.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "795:   } {. ./x1.txt ./x2.txt}",
          "796: }",
          "798: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "798: # 2019-12-18 Yongheng and Rui fuzzer",
          "799: #",
          "800: do_execsql_test 13.10 {",
          "801:   DROP TABLE IF EXISTS t0;",
          "802:   DROP TABLE IF EXISTS t1;",
          "803:   CREATE TABLE t0(a,b,c,d,e,f,g);",
          "804:   REPLACE INTO t0(c,b,f) VALUES(10,10,10);",
          "805:   CREATE VIRTUAL TABLE t1 USING zipfile('h.zip');",
          "806:   REPLACE INTO t1 SELECT * FROM t0;",
          "807:   SELECT quote(name),quote(mode),quote(mtime),quote(sz),quote(rawdata),",
          "808:          quote(data),quote(method) FROM t1;",
          "809: } {'' 10 10 2 X'3130' X'3130' 0}",
          "",
          "---------------"
        ]
      }
    }
  ]
}