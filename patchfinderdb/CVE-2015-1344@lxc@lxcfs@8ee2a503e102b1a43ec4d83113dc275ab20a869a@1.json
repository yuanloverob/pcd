{
  "cve_id": "CVE-2015-1344",
  "cve_desc": "The do_write_pids function in lxcfs.c in LXCFS before 0.12 does not properly check permissions, which allows local users to gain privileges by writing a pid to the tasks file.",
  "repo": "lxc/lxcfs",
  "patch_hash": "8ee2a503e102b1a43ec4d83113dc275ab20a869a",
  "patch_info": {
    "commit_hash": "8ee2a503e102b1a43ec4d83113dc275ab20a869a",
    "repo": "lxc/lxcfs",
    "commit_url": "https://github.com/lxc/lxcfs/commit/8ee2a503e102b1a43ec4d83113dc275ab20a869a",
    "files": [
      "lxcfs.c"
    ],
    "message": "Implement privilege check when moving tasks\n\nWhen writing pids to a tasks file in lxcfs, lxcfs was checking\nfor privilege over the tasks file but not over the pid being\nmoved.  Since the cgm_movepid request is done as root on the host,\nnot with the requestor's credentials, we must copy the check which\ncgmanager was doing to ensure that the requesting task is allowed\nto change the victim task's cgroup membership.\n\nThis is CVE-2015-1344\nhttps://bugs.launchpad.net/ubuntu/+source/lxcfs/+bug/1512854\n\nSigned-off-by: Serge Hallyn <serge.hallyn@ubuntu.com>",
    "before_after_code_files": [
      "lxcfs.c||lxcfs.c"
    ]
  },
  "patch_diff": {
    "lxcfs.c||lxcfs.c": [
      "File: lxcfs.c -> lxcfs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1336:  goto loop;",
      "1337: }",
      "1340: {",
      "1341:  int sock[2] = {-1, -1};",
      "1342:  pid_t qpid, cpid = -1;",
      "",
      "[Removed Lines]",
      "1339: static bool do_write_pids(pid_t tpid, const char *contrl, const char *cg, const char *file, const char *buf)",
      "",
      "[Added Lines]",
      "1343: bool hostuid_to_ns(uid_t uid, pid_t pid, uid_t *answer)",
      "1344: {",
      "1345:  FILE *f;",
      "1346:  char line[400];",
      "1348:  sprintf(line, \"/proc/%d/uid_map\", pid);",
      "1349:  if ((f = fopen(line, \"r\")) == NULL) {",
      "1350:   return false;",
      "1351:  }",
      "1354:  fclose(f);",
      "1356:  if (*answer == -1)",
      "1357:   return false;",
      "1358:  return true;",
      "1359: }",
      "1366: void get_pid_creds(pid_t pid, uid_t *uid, gid_t *gid)",
      "1367: {",
      "1368:  char line[400];",
      "1369:  uid_t u;",
      "1370:  gid_t g;",
      "1371:  FILE *f;",
      "1375:  sprintf(line, \"/proc/%d/status\", pid);",
      "1376:  if ((f = fopen(line, \"r\")) == NULL) {",
      "1377:   fprintf(stderr, \"Error opening %s: %s\\n\", line, strerror(errno));",
      "1378:   return;",
      "1379:  }",
      "1380:  while (fgets(line, 400, f)) {",
      "1381:   if (strncmp(line, \"Uid:\", 4) == 0) {",
      "1382:    if (sscanf(line+4, \"%u\", &u) != 1) {",
      "1383:     fprintf(stderr, \"bad uid line for pid %u\\n\", pid);",
      "1384:     fclose(f);",
      "1385:     return;",
      "1386:    }",
      "1388:   } else if (strncmp(line, \"Gid:\", 4) == 0) {",
      "1389:    if (sscanf(line+4, \"%u\", &g) != 1) {",
      "1390:     fprintf(stderr, \"bad gid line for pid %u\\n\", pid);",
      "1391:     fclose(f);",
      "1392:     return;",
      "1393:    }",
      "1395:   }",
      "1396:  }",
      "1397:  fclose(f);",
      "1398: }",
      "1408: bool may_move_pid(pid_t r, uid_t r_uid, pid_t v)",
      "1409: {",
      "1410:  uid_t v_uid, tmpuid;",
      "1411:  gid_t v_gid;",
      "1413:  if (r == v)",
      "1414:   return true;",
      "1415:  if (r_uid == 0)",
      "1416:   return true;",
      "1417:  get_pid_creds(v, &v_uid, &v_gid);",
      "1418:  if (r_uid == v_uid)",
      "1419:   return true;",
      "1420:  if (hostuid_to_ns(r_uid, r, &tmpuid) && tmpuid == 0",
      "1421:    && hostuid_to_ns(v_uid, r, &tmpuid))",
      "1422:   return true;",
      "1423:  return false;",
      "1424: }",
      "1426: static bool do_write_pids(pid_t tpid, uid_t tuid, const char *contrl, const char *cg,",
      "1427:   const char *file, const char *buf)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1379:   if (recv_creds(sock[0], &cred, &v)) {",
      "1380:    if (v == '0') {",
      "1381:     if (fprintf(pids_file, \"%d\", (int) cred.pid) < 0)",
      "1382:      fail = true;",
      "1383:    }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1469:     if (!may_move_pid(tpid, tuid, cred.pid)) {",
      "1470:      fail = true;",
      "1471:      break;",
      "1472:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1450:    strcmp(f->file, \"/cgroup.procs\") == 0 ||",
      "1451:    strcmp(f->file, \"cgroup.procs\") == 0)",
      "1454:  else",
      "1455:   r = cgfs_set_value(f->controller, f->cgroup, f->file, localbuf);",
      "",
      "[Removed Lines]",
      "1453:   r = do_write_pids(fc->pid, f->controller, f->cgroup, f->file, localbuf);",
      "",
      "[Added Lines]",
      "1545:   r = do_write_pids(fc->pid, fc->uid, f->controller, f->cgroup, f->file, localbuf);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "257f639baeab38f607ebb10db7ea6da0e5eba777",
      "candidate_info": {
        "commit_hash": "257f639baeab38f607ebb10db7ea6da0e5eba777",
        "repo": "lxc/lxcfs",
        "commit_url": "https://github.com/lxc/lxcfs/commit/257f639baeab38f607ebb10db7ea6da0e5eba777",
        "files": [
          "lxcfs.c"
        ],
        "message": "avoid strlen in must_strcat_pid\n\nsprintf() already returns the length\n\nSigned-off-by: Wolfgang Bumiller <w.bumiller@proxmox.com>\nSigned-off-by: Serge Hallyn <serge.hallyn@ubuntu.com>",
        "before_after_code_files": [
          "lxcfs.c||lxcfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lxcfs.c||lxcfs.c"
          ],
          "candidate": [
            "lxcfs.c||lxcfs.c"
          ]
        }
      },
      "candidate_diff": {
        "lxcfs.c||lxcfs.c": [
          "File: lxcfs.c -> lxcfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:  char *d = *src;",
          "78:  char tmp[30];",
          "82:  if (!d) {",
          "83:   do {",
          "",
          "[Removed Lines]",
          "80:  sprintf(tmp, \"%d\\n\", (int)pid);",
          "",
          "[Added Lines]",
          "80:  int tmplen = sprintf(tmp, \"%d\\n\", (int)pid);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:   } while (!d);",
          "89:   do {",
          "90:    d = realloc(d, *asz + BUF_RESERVE_SIZE);",
          "91:   } while (!d);",
          "94:  }",
          "97:  d[*sz] = '\\0';",
          "98: }",
          "",
          "[Removed Lines]",
          "88:  } else if (strlen(tmp) + *sz + 1 >= *asz) {",
          "95:  memcpy(d+*sz, tmp, strlen(tmp));",
          "",
          "[Added Lines]",
          "88:  } else if (tmplen + *sz + 1 >= *asz) {",
          "95:  memcpy(d+*sz, tmp, tmplen);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3beb5342423e8f4358395d15d48bdbf3a2dfbfee",
      "candidate_info": {
        "commit_hash": "3beb5342423e8f4358395d15d48bdbf3a2dfbfee",
        "repo": "lxc/lxcfs",
        "commit_url": "https://github.com/lxc/lxcfs/commit/3beb5342423e8f4358395d15d48bdbf3a2dfbfee",
        "files": [
          "lxcfs.c"
        ],
        "message": "simplify and fix must_strcat_pid\n\nLike the last commit by Wolfgang, merge the alloc cases into one\nrealloc.  Dereference *src as it must be after all.\n\nSigned-off-by: Serge Hallyn <serge.hallyn@ubuntu.com>",
        "before_after_code_files": [
          "lxcfs.c||lxcfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lxcfs.c||lxcfs.c"
          ],
          "candidate": [
            "lxcfs.c||lxcfs.c"
          ]
        }
      },
      "candidate_diff": {
        "lxcfs.c||lxcfs.c": [
          "File: lxcfs.c -> lxcfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "75: static void must_strcat_pid(char **src, size_t *sz, size_t *asz, pid_t pid)",
          "76: {",
          "78:  char tmp[30];",
          "80:  int tmplen = sprintf(tmp, \"%d\\n\", (int)pid);",
          "83:   do {",
          "94:  }",
          "98: }",
          "100: static int wait_for_pid(pid_t pid)",
          "",
          "[Removed Lines]",
          "77:  char *d = *src;",
          "82:  if (!d) {",
          "84:    d = malloc(BUF_RESERVE_SIZE);",
          "85:   } while (!d);",
          "88:  } else if (tmplen + *sz + 1 >= *asz) {",
          "89:   do {",
          "90:    d = realloc(src, *asz + BUF_RESERVE_SIZE);",
          "91:   } while (!d);",
          "95:  memcpy(d+*sz, tmp, tmplen);",
          "97:  d[*sz] = '\\0';",
          "",
          "[Added Lines]",
          "81:  if (!*src || tmplen + *sz + 1 >= *asz) {",
          "82:   char *tmp;",
          "84:    tmp = realloc(*src, *asz + BUF_RESERVE_SIZE);",
          "85:   } while (!tmp);",
          "89:  memcpy((*src) +*sz , tmp, tmplen);",
          "91:  (*src)[*sz] = '\\0';",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5b2dfd85345d521a8a32c1690bddeb20d611283d",
      "candidate_info": {
        "commit_hash": "5b2dfd85345d521a8a32c1690bddeb20d611283d",
        "repo": "lxc/lxcfs",
        "commit_url": "https://github.com/lxc/lxcfs/commit/5b2dfd85345d521a8a32c1690bddeb20d611283d",
        "files": [
          "lxcfs.c"
        ],
        "message": "switch to epoll\n\nSigned-off-by: Serge Hallyn <serge.hallyn@ubuntu.com>",
        "before_after_code_files": [
          "lxcfs.c||lxcfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lxcfs.c||lxcfs.c"
          ],
          "candidate": [
            "lxcfs.c||lxcfs.c"
          ]
        }
      },
      "candidate_diff": {
        "lxcfs.c||lxcfs.c": [
          "File: lxcfs.c -> lxcfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #include <linux/sched.h>",
          "24: #include <sys/socket.h>",
          "25: #include <sys/mount.h>",
          "26: #include <wait.h>",
          "28: #ifdef FORTRAVIS",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: #include <sys/epoll.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "847:  return 0;",
          "848: }",
          "851: {",
          "861:   return -1;",
          "862:  return recv(sockfd, buf, len, MSG_DONTWAIT);",
          "863: }",
          "",
          "[Removed Lines]",
          "850: static int msgrecv(int sockfd, void *buf, size_t len)",
          "852:  struct timeval tv;",
          "853:  fd_set rfds;",
          "855:  FD_ZERO(&rfds);",
          "856:  FD_SET(sockfd, &rfds);",
          "857:  tv.tv_sec = 2;",
          "858:  tv.tv_usec = 0;",
          "860:  if (select(sockfd+1, &rfds, NULL, NULL, &tv) <= 0)",
          "",
          "[Added Lines]",
          "851: #define POLLIN_SET ( EPOLLIN | EPOLLHUP | EPOLLRDHUP )",
          "853: static bool wait_for_sock(int sock, int timeout)",
          "855:  struct epoll_event ev;",
          "856:  int epfd, ret;",
          "858:  epfd = epoll_create(1);",
          "859:  if (epfd < 0) {",
          "860:   fprintf(stderr, \"Failed to create epoll socket: %m\\n\");",
          "861:   return false;",
          "862:  }",
          "864:  ev.events = POLLIN_SET;",
          "865:  ev.data.fd = sock;",
          "866:  if (epoll_ctl(epfd, EPOLL_CTL_ADD, sock, &ev) < 0) {",
          "867:   fprintf(stderr, \"Failed adding socket to epoll: %m\\n\");",
          "868:   close(epfd);",
          "869:   return false;",
          "870:  }",
          "872:  ret = epoll_wait(epfd, &ev, 1, timeout);",
          "873:  close(epfd);",
          "875:  if (ret == 0)",
          "876:   return false;",
          "877:  if (ret < 0) {",
          "878:   fprintf(stderr, \"Failure during epoll_wait: %m\\n\");",
          "879:   return false;",
          "880:  }",
          "881:  return true;",
          "882: }",
          "884: static int msgrecv(int sockfd, void *buf, size_t len)",
          "885: {",
          "886:  if (!wait_for_sock(sockfd, 2))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "920:  char buf[1];",
          "921:  int ret;",
          "922:  int optval = 1;",
          "",
          "[Removed Lines]",
          "923:  struct timeval tv;",
          "924:  fd_set rfds;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "949:  msg.msg_iov = &iov;",
          "950:  msg.msg_iovlen = 1;",
          "958:      strerror(errno));",
          "959:   return false;",
          "960:  }",
          "",
          "[Removed Lines]",
          "952:  FD_ZERO(&rfds);",
          "953:  FD_SET(sock, &rfds);",
          "954:  tv.tv_sec = 2;",
          "955:  tv.tv_usec = 0;",
          "956:  if (select(sock+1, &rfds, NULL, NULL, &tv) <= 0) {",
          "957:   fprintf(stderr, \"Failed to select for scm_cred: %s\\n\",",
          "",
          "[Added Lines]",
          "976:  if (!wait_for_sock(sock, 2)) {",
          "977:   fprintf(stderr, \"Timed out waiting for scm_cred: %s\\n\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1008:  int newnsfd = -1, ret, cpipe[2];",
          "1009:  char fnam[100];",
          "1010:  pid_t cpid;",
          "1013:  char v;",
          "1015:  ret = snprintf(fnam, sizeof(fnam), \"/proc/%d/ns/pid\", tpid);",
          "",
          "[Removed Lines]",
          "1011:  struct timeval tv;",
          "1012:  fd_set s;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1042:  }",
          "1051:   _exit(1);",
          "1052:  ret = read(cpipe[0], &v, 1);",
          "1053:  if (ret != sizeof(char) || v != '1')",
          "",
          "[Removed Lines]",
          "1045:  FD_ZERO(&s);",
          "1046:  FD_SET(cpipe[0], &s);",
          "1047:  tv.tv_sec = 1;",
          "1048:  tv.tv_usec = 0;",
          "1049:  ret = select(cpipe[0]+1, &s, NULL, NULL, &tv);",
          "1050:  if (ret <= 0)",
          "",
          "[Added Lines]",
          "1063:  if (!wait_for_sock(cpipe[0], 1))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1072:  bool answer = false;",
          "1073:  char v = '0';",
          "1074:  struct ucred cred;",
          "1076:  size_t sz = 0, asz = 0;",
          "1079:  if (!cgfs_get_value(contrl, cg, file, &tmpdata))",
          "1080:   return false;",
          "",
          "[Removed Lines]",
          "1075:  struct timeval tv;",
          "1077:  fd_set s;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1111:    goto out;",
          "1121:     __func__, strerror(errno));",
          "1122:    goto out;",
          "1123:   }",
          "",
          "[Removed Lines]",
          "1114:   FD_ZERO(&s);",
          "1115:   FD_SET(sock[0], &s);",
          "1116:   tv.tv_sec = 2;",
          "1117:   tv.tv_usec = 0;",
          "1118:   ret = select(sock[0]+1, &s, NULL, NULL, &tv);",
          "1119:   if (ret <= 0) {",
          "1120:    fprintf(stderr, \"%s: select error waiting for pid from child: %s\\n\",",
          "",
          "[Added Lines]",
          "1125:   if (!wait_for_sock(sock[0], 2)) {",
          "1126:    fprintf(stderr, \"%s: timed out waiting for pid from child: %s\\n\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1228:  pid_t vpid;",
          "1229:  struct ucred cred;",
          "1230:  char v;",
          "1233:  int ret;",
          "1235:  cred.uid = 0;",
          "1236:  cred.gid = 0;",
          "1237:  while (1) {",
          "1246:    _exit(1);",
          "1247:   }",
          "1248:   if ((ret = read(sock, &vpid, sizeof(pid_t))) != sizeof(pid_t)) {",
          "",
          "[Removed Lines]",
          "1231:  struct timeval tv;",
          "1232:  fd_set s;",
          "1238:   FD_ZERO(&s);",
          "1239:   FD_SET(sock, &s);",
          "1240:   tv.tv_sec = 2;",
          "1241:   tv.tv_usec = 0;",
          "1242:   ret = select(sock+1, &s, NULL, NULL, &tv);",
          "1243:   if (ret <= 0) {",
          "1244:    fprintf(stderr, \"%s: bad select before read from parent: %s\\n\",",
          "1245:     __func__, strerror(errno));",
          "",
          "[Added Lines]",
          "1242:   if (!wait_for_sock(sock, 2)) {",
          "1243:    fprintf(stderr, \"%s: timeout reading from parent\\n\", __func__);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1269:  int newnsfd = -1, ret, cpipe[2];",
          "1270:  char fnam[100];",
          "1271:  pid_t cpid;",
          "1274:  char v;",
          "1276:  ret = snprintf(fnam, sizeof(fnam), \"/proc/%d/ns/pid\", tpid);",
          "",
          "[Removed Lines]",
          "1272:  fd_set s;",
          "1273:  struct timeval tv;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1314:   goto again;",
          "1315:  ret = read(cpipe[0], &v, 1);",
          "1316:  if (ret != sizeof(char) || v != '1') {",
          "",
          "[Removed Lines]",
          "1308:  FD_ZERO(&s);",
          "1309:  FD_SET(cpipe[0], &s);",
          "1310:  tv.tv_sec = 1;",
          "1311:  tv.tv_usec = 0;",
          "1312:  ret = select(cpipe[0]+1, &s, NULL, NULL, &tv);",
          "1313:  if (ret <= 0)",
          "",
          "[Added Lines]",
          "1304:  if (!wait_for_sock(cpipe[0], 1))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1c4be29a9f9f1797da00efdeb584bce4bc4ef05c",
      "candidate_info": {
        "commit_hash": "1c4be29a9f9f1797da00efdeb584bce4bc4ef05c",
        "repo": "lxc/lxcfs",
        "commit_url": "https://github.com/lxc/lxcfs/commit/1c4be29a9f9f1797da00efdeb584bce4bc4ef05c",
        "files": [
          "lxcfs.c"
        ],
        "message": "fix leak in realloc loop in must_strcat_pid\n\nIf the first realloc() call fails then 'd' becomes NULL,\nsubsequent realloc() retries will behave like malloc() and\nthe the original src pointer is never freed. Further more\nthe newly allocated data then contains uninitialized data\nwhere the previous pids had been stored.\nAvoid this by passing the the original pointer from '*src'\nto realloc().\n\nSigned-off-by: Wolfgang Bumiller <w.bumiller@proxmox.com>\nSigned-off-by: Serge Hallyn <serge.hallyn@ubuntu.com>",
        "before_after_code_files": [
          "lxcfs.c||lxcfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lxcfs.c||lxcfs.c"
          ],
          "candidate": [
            "lxcfs.c||lxcfs.c"
          ]
        }
      },
      "candidate_diff": {
        "lxcfs.c||lxcfs.c": [
          "File: lxcfs.c -> lxcfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:  } else if (tmplen + *sz + 1 >= *asz) {",
          "89:   do {",
          "91:   } while (!d);",
          "",
          "[Removed Lines]",
          "90:    d = realloc(d, *asz + BUF_RESERVE_SIZE);",
          "",
          "[Added Lines]",
          "90:    d = realloc(*src, *asz + BUF_RESERVE_SIZE);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a57cba3c71811372056b3d2842462fa4d70fd1b4",
      "candidate_info": {
        "commit_hash": "a57cba3c71811372056b3d2842462fa4d70fd1b4",
        "repo": "lxc/lxcfs",
        "commit_url": "https://github.com/lxc/lxcfs/commit/a57cba3c71811372056b3d2842462fa4d70fd1b4",
        "files": [
          "lxcfs.c"
        ],
        "message": "caller_may_see_dir: correctly handle tasks in /\n\nSee comment for details.\n\nSigned-off-by: Tycho Andersen <tycho.andersen@canonical.com>",
        "before_after_code_files": [
          "lxcfs.c||lxcfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lxcfs.c||lxcfs.c"
          ],
          "candidate": [
            "lxcfs.c||lxcfs.c"
          ]
        }
      },
      "candidate_diff": {
        "lxcfs.c||lxcfs.c": [
          "File: lxcfs.c -> lxcfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "430:  task_cg = c2 + 1;",
          "431:  target_len = strlen(cg);",
          "432:  task_len = strlen(task_cg);",
          "433:  if (strcmp(cg, task_cg) == 0) {",
          "434:   answer = true;",
          "435:   goto out;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "433:  if (task_len == 0) {",
          "439:   answer = true;",
          "440:   goto out;",
          "441:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}