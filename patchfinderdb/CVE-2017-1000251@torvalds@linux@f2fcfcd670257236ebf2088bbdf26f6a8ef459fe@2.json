{
  "cve_id": "CVE-2017-1000251",
  "cve_desc": "The native Bluetooth stack in the Linux Kernel (BlueZ), starting at the Linux kernel version 2.6.32 and up to and including 4.13.1, are vulnerable to a stack overflow vulnerability in the processing of L2CAP configuration responses resulting in Remote code execution in kernel space.",
  "repo": "torvalds/linux",
  "patch_hash": "f2fcfcd670257236ebf2088bbdf26f6a8ef459fe",
  "patch_info": {
    "commit_hash": "f2fcfcd670257236ebf2088bbdf26f6a8ef459fe",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/f2fcfcd670257236ebf2088bbdf26f6a8ef459fe",
    "files": [
      "include/net/bluetooth/l2cap.h",
      "net/bluetooth/l2cap.c"
    ],
    "message": "Bluetooth: Add configuration support for ERTM and Streaming mode\n\nAdd support to config_req and config_rsp to configure ERTM and Streaming\nmode. If the remote device specifies ERTM or Streaming mode, then the\nsame mode is proposed. Otherwise ERTM or Basic mode is used. And in case\nof a state 2 device, the remote device should propose the same mode. If\nnot, then the channel gets disconnected.\n\nSigned-off-by: Gustavo F. Padovan <gustavo@las.ic.unicamp.br>\nSigned-off-by: Marcel Holtmann <marcel@holtmann.org>",
    "before_after_code_files": [
      "include/net/bluetooth/l2cap.h||include/net/bluetooth/l2cap.h",
      "net/bluetooth/l2cap.c||net/bluetooth/l2cap.c"
    ]
  },
  "patch_diff": {
    "include/net/bluetooth/l2cap.h||include/net/bluetooth/l2cap.h": [
      "File: include/net/bluetooth/l2cap.h -> include/net/bluetooth/l2cap.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "29: #define L2CAP_DEFAULT_MTU  672",
      "30: #define L2CAP_DEFAULT_FLUSH_TO  0xffff",
      "32: #define L2CAP_DEFAULT_MAX_RECEIVE 1",
      "",
      "[Removed Lines]",
      "31: #define L2CAP_DEFAULT_RX_WINDOW  1",
      "",
      "[Added Lines]",
      "30: #define L2CAP_DEFAULT_MIN_MTU  48",
      "32: #define L2CAP_DEFAULT_TX_WINDOW  1",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "272:  __u16  omtu;",
      "273:  __u16  flush_to;",
      "274:  __u8  mode;",
      "275:  __u8  fcs;",
      "276:  __u8  sec_level;",
      "277:  __u8  role_switch;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "276:  __u8  num_conf_req;",
      "277:  __u8  num_conf_rsp;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "280:  __u8  conf_req[64];",
      "281:  __u8  conf_len;",
      "282:  __u8  conf_state;",
      "285:  __u8  ident;",
      "287:  __le16  sport;",
      "289:  struct l2cap_conn *conn;",
      "",
      "[Removed Lines]",
      "283:  __u8  conf_retry;",
      "",
      "[Added Lines]",
      "290:  __u8  remote_tx_win;",
      "291:  __u8  remote_max_tx;",
      "292:  __u16  retrans_timeout;",
      "293:  __u16  monitor_timeout;",
      "294:  __u16  max_pdu_size;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "291:  struct sock  *prev_c;",
      "292: };",
      "301: void l2cap_load(void);",
      "",
      "[Removed Lines]",
      "294: #define L2CAP_CONF_REQ_SENT 0x01",
      "295: #define L2CAP_CONF_INPUT_DONE 0x02",
      "296: #define L2CAP_CONF_OUTPUT_DONE 0x04",
      "297: #define L2CAP_CONF_CONNECT_PEND 0x80",
      "299: #define L2CAP_CONF_MAX_RETRIES 2",
      "",
      "[Added Lines]",
      "303: #define L2CAP_CONF_REQ_SENT       0x01",
      "304: #define L2CAP_CONF_INPUT_DONE     0x02",
      "305: #define L2CAP_CONF_OUTPUT_DONE    0x04",
      "306: #define L2CAP_CONF_MTU_DONE       0x08",
      "307: #define L2CAP_CONF_MODE_DONE      0x10",
      "308: #define L2CAP_CONF_CONNECT_PEND   0x20",
      "309: #define L2CAP_CONF_STATE2_DEVICE  0x80",
      "311: #define L2CAP_CONF_MAX_CONF_REQ 2",
      "312: #define L2CAP_CONF_MAX_CONF_RSP 2",
      "",
      "---------------"
    ],
    "net/bluetooth/l2cap.c||net/bluetooth/l2cap.c": [
      "File: net/bluetooth/l2cap.c -> net/bluetooth/l2cap.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "966:  case L2CAP_MODE_BASIC:",
      "967:   break;",
      "968:  case L2CAP_MODE_ERTM:",
      "969:   if (enable_ertm)",
      "970:    break;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "969:  case L2CAP_MODE_STREAMING:",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1029:  case L2CAP_MODE_BASIC:",
      "1030:   break;",
      "1031:  case L2CAP_MODE_ERTM:",
      "1032:   if (enable_ertm)",
      "1033:    break;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1033:  case L2CAP_MODE_STREAMING:",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1740: }",
      "1742: static int l2cap_build_conf_req(struct sock *sk, void *data)",
      "1743: {",
      "1744:  struct l2cap_pinfo *pi = l2cap_pi(sk);",
      "1745:  struct l2cap_conf_req *req = data;",
      "1747:  void *ptr = req->data;",
      "1749:  BT_DBG(\"sk %p\", sk);",
      "1751:  switch (pi->mode) {",
      "1752:  case L2CAP_MODE_BASIC:",
      "1753:   if (pi->imtu != L2CAP_DEFAULT_MTU)",
      "",
      "[Removed Lines]",
      "1746:  struct l2cap_conf_rfc rfc = { .mode = L2CAP_MODE_BASIC };",
      "",
      "[Added Lines]",
      "1744: static int l2cap_mode_supported(__u8 mode, __u32 feat_mask)",
      "1745: {",
      "1746:  u32 local_feat_mask = l2cap_feat_mask;",
      "1747:  if (enable_ertm)",
      "1748:   local_feat_mask |= L2CAP_FEAT_ERTM;",
      "1750:  switch (mode) {",
      "1751:  case L2CAP_MODE_ERTM:",
      "1752:   return L2CAP_FEAT_ERTM & feat_mask & local_feat_mask;",
      "1753:  case L2CAP_MODE_STREAMING:",
      "1754:   return L2CAP_FEAT_STREAMING & feat_mask & local_feat_mask;",
      "1755:  default:",
      "1756:   return 0x00;",
      "1757:  }",
      "1758: }",
      "1760: static inline __u8 l2cap_select_mode(__u8 mode, __u16 remote_feat_mask)",
      "1761: {",
      "1762:  switch (mode) {",
      "1763:  case L2CAP_MODE_STREAMING:",
      "1764:  case L2CAP_MODE_ERTM:",
      "1765:   if (l2cap_mode_supported(mode, remote_feat_mask))",
      "1766:    return mode;",
      "1768:  default:",
      "1769:   return L2CAP_MODE_BASIC;",
      "1770:  }",
      "1771: }",
      "1777:  struct l2cap_conf_rfc rfc = { .mode = L2CAP_MODE_ERTM };",
      "1782:  if (pi->num_conf_req || pi->num_conf_rsp)",
      "1783:   goto done;",
      "1785:  switch (pi->mode) {",
      "1786:  case L2CAP_MODE_STREAMING:",
      "1787:  case L2CAP_MODE_ERTM:",
      "1788:   pi->conf_state |= L2CAP_CONF_STATE2_DEVICE;",
      "1789:   if (!l2cap_mode_supported(pi->mode, pi->conn->feat_mask)) {",
      "1790:    struct l2cap_disconn_req req;",
      "1791:    req.dcid = cpu_to_le16(pi->dcid);",
      "1792:    req.scid = cpu_to_le16(pi->scid);",
      "1793:    l2cap_send_cmd(pi->conn, l2cap_get_ident(pi->conn),",
      "1794:      L2CAP_DISCONN_REQ, sizeof(req), &req);",
      "1795:   }",
      "1796:   break;",
      "1797:  default:",
      "1798:   pi->mode = l2cap_select_mode(rfc.mode, pi->conn->feat_mask);",
      "1799:   break;",
      "1800:  }",
      "1802: done:",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1757:  case L2CAP_MODE_ERTM:",
      "1758:   rfc.mode            = L2CAP_MODE_ERTM;",
      "1760:   rfc.max_transmit    = L2CAP_DEFAULT_MAX_RECEIVE;",
      "1763:   rfc.max_pdu_size    = cpu_to_le16(L2CAP_DEFAULT_MAX_RX_APDU);",
      "1765:   l2cap_add_conf_opt(&ptr, L2CAP_CONF_RFC,",
      "",
      "[Removed Lines]",
      "1759:   rfc.txwin_size      = L2CAP_DEFAULT_RX_WINDOW;",
      "1761:   rfc.retrans_timeout = cpu_to_le16(L2CAP_DEFAULT_RETRANS_TO);",
      "1762:   rfc.monitor_timeout = cpu_to_le16(L2CAP_DEFAULT_MONITOR_TO);",
      "",
      "[Added Lines]",
      "1811:   rfc.txwin_size      = L2CAP_DEFAULT_TX_WINDOW;",
      "1813:   rfc.retrans_timeout = 0;",
      "1814:   rfc.monitor_timeout = 0;",
      "1815:   rfc.max_pdu_size    = cpu_to_le16(L2CAP_DEFAULT_MAX_RX_APDU);",
      "1817:   l2cap_add_conf_opt(&ptr, L2CAP_CONF_RFC,",
      "1818:      sizeof(rfc), (unsigned long) &rfc);",
      "1819:   break;",
      "1821:  case L2CAP_MODE_STREAMING:",
      "1822:   rfc.mode            = L2CAP_MODE_STREAMING;",
      "1823:   rfc.txwin_size      = 0;",
      "1824:   rfc.max_transmit    = 0;",
      "1825:   rfc.retrans_timeout = 0;",
      "1826:   rfc.monitor_timeout = 0;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1825:   }",
      "1826:  }",
      "1828:  if (result == L2CAP_CONF_SUCCESS) {",
      "1842:    result = L2CAP_CONF_UNACCEPT;",
      "1844:    memset(&rfc, 0, sizeof(rfc));",
      "1848:      sizeof(rfc), (unsigned long) &rfc);",
      "1852:  rsp->scid   = cpu_to_le16(pi->dcid);",
      "1853:  rsp->result = cpu_to_le16(result);",
      "1854:  rsp->flags  = cpu_to_le16(0x0000);",
      "",
      "[Removed Lines]",
      "1832:   if (rfc.mode == L2CAP_MODE_BASIC) {",
      "1833:    if (mtu < pi->omtu)",
      "1834:     result = L2CAP_CONF_UNACCEPT;",
      "1835:    else {",
      "1836:     pi->omtu = mtu;",
      "1837:     pi->conf_state |= L2CAP_CONF_OUTPUT_DONE;",
      "1838:    }",
      "1840:    l2cap_add_conf_opt(&ptr, L2CAP_CONF_MTU, 2, pi->omtu);",
      "1841:   } else {",
      "1845:    rfc.mode = L2CAP_MODE_BASIC;",
      "1847:    l2cap_add_conf_opt(&ptr, L2CAP_CONF_RFC,",
      "1849:   }",
      "1850:  }",
      "",
      "[Added Lines]",
      "1892:  if (pi->num_conf_rsp || pi->num_conf_req)",
      "1893:   goto done;",
      "1895:  switch (pi->mode) {",
      "1896:  case L2CAP_MODE_STREAMING:",
      "1897:  case L2CAP_MODE_ERTM:",
      "1898:   pi->conf_state |= L2CAP_CONF_STATE2_DEVICE;",
      "1899:   if (!l2cap_mode_supported(pi->mode, pi->conn->feat_mask))",
      "1900:    return -ECONNREFUSED;",
      "1901:   break;",
      "1902:  default:",
      "1903:   pi->mode = l2cap_select_mode(rfc.mode, pi->conn->feat_mask);",
      "1904:   break;",
      "1905:  }",
      "1907: done:",
      "1908:  if (pi->mode != rfc.mode) {",
      "1909:   result = L2CAP_CONF_UNACCEPT;",
      "1910:   rfc.mode = pi->mode;",
      "1912:   if (pi->num_conf_rsp == 1)",
      "1913:    return -ECONNREFUSED;",
      "1915:   l2cap_add_conf_opt(&ptr, L2CAP_CONF_RFC,",
      "1916:      sizeof(rfc), (unsigned long) &rfc);",
      "1917:  }",
      "1924:   if (mtu < L2CAP_DEFAULT_MIN_MTU)",
      "1925:    result = L2CAP_CONF_UNACCEPT;",
      "1926:   else {",
      "1927:    pi->omtu = mtu;",
      "1928:    pi->conf_state |= L2CAP_CONF_MTU_DONE;",
      "1929:   }",
      "1930:   l2cap_add_conf_opt(&ptr, L2CAP_CONF_MTU, 2, pi->omtu);",
      "1932:   switch (rfc.mode) {",
      "1933:   case L2CAP_MODE_BASIC:",
      "1934:    pi->fcs = L2CAP_FCS_NONE;",
      "1935:    pi->conf_state |= L2CAP_CONF_MODE_DONE;",
      "1936:    break;",
      "1938:   case L2CAP_MODE_ERTM:",
      "1939:    pi->remote_tx_win = rfc.txwin_size;",
      "1940:    pi->remote_max_tx = rfc.max_transmit;",
      "1941:    pi->max_pdu_size = rfc.max_pdu_size;",
      "1943:    rfc.retrans_timeout = L2CAP_DEFAULT_RETRANS_TO;",
      "1944:    rfc.monitor_timeout = L2CAP_DEFAULT_MONITOR_TO;",
      "1946:    pi->conf_state |= L2CAP_CONF_MODE_DONE;",
      "1947:    break;",
      "1949:   case L2CAP_MODE_STREAMING:",
      "1950:    pi->remote_tx_win = rfc.txwin_size;",
      "1951:    pi->max_pdu_size = rfc.max_pdu_size;",
      "1953:    pi->conf_state |= L2CAP_CONF_MODE_DONE;",
      "1954:    break;",
      "1956:   default:",
      "1960:    rfc.mode = pi->mode;",
      "1961:   }",
      "1963:   l2cap_add_conf_opt(&ptr, L2CAP_CONF_RFC,",
      "1966:   if (result == L2CAP_CONF_SUCCESS)",
      "1967:    pi->conf_state |= L2CAP_CONF_OUTPUT_DONE;",
      "1968:  }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1856:  return ptr - data;",
      "1857: }",
      "1859: static int l2cap_build_conf_rsp(struct sock *sk, void *data, u16 result, u16 flags)",
      "1860: {",
      "1861:  struct l2cap_conf_rsp *rsp = data;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1976: static int l2cap_parse_conf_rsp(struct sock *sk, void *rsp, int len, void *data, u16 *result)",
      "1977: {",
      "1978:  struct l2cap_pinfo *pi = l2cap_pi(sk);",
      "1979:  struct l2cap_conf_req *req = data;",
      "1980:  void *ptr = req->data;",
      "1981:  int type, olen;",
      "1982:  unsigned long val;",
      "1983:  struct l2cap_conf_rfc rfc;",
      "1985:  BT_DBG(\"sk %p, rsp %p, len %d, req %p\", sk, rsp, len, data);",
      "1987:  while (len >= L2CAP_CONF_OPT_SIZE) {",
      "1988:   len -= l2cap_get_conf_opt(&rsp, &type, &olen, &val);",
      "1990:   switch (type) {",
      "1991:   case L2CAP_CONF_MTU:",
      "1992:    if (val < L2CAP_DEFAULT_MIN_MTU) {",
      "1994:     pi->omtu = L2CAP_DEFAULT_MIN_MTU;",
      "1995:    } else",
      "1996:     pi->omtu = val;",
      "1997:    l2cap_add_conf_opt(&ptr, L2CAP_CONF_MTU, 2, pi->omtu);",
      "1998:    break;",
      "2000:   case L2CAP_CONF_FLUSH_TO:",
      "2001:    pi->flush_to = val;",
      "2002:    l2cap_add_conf_opt(&ptr, L2CAP_CONF_FLUSH_TO,",
      "2003:        2, pi->flush_to);",
      "2004:    break;",
      "2006:   case L2CAP_CONF_RFC:",
      "2007:    if (olen == sizeof(rfc))",
      "2008:     memcpy(&rfc, (void *)val, olen);",
      "2010:    if ((pi->conf_state & L2CAP_CONF_STATE2_DEVICE) &&",
      "2011:        rfc.mode != pi->mode)",
      "2012:     return -ECONNREFUSED;",
      "2014:    pi->mode = rfc.mode;",
      "2015:    pi->fcs = 0;",
      "2017:    l2cap_add_conf_opt(&ptr, L2CAP_CONF_RFC,",
      "2018:      sizeof(rfc), (unsigned long) &rfc);",
      "2019:    break;",
      "2020:   }",
      "2021:  }",
      "2023:  if (*result == L2CAP_CONF_SUCCESS) {",
      "2024:   switch (rfc.mode) {",
      "2025:   case L2CAP_MODE_ERTM:",
      "2026:    pi->remote_tx_win   = rfc.txwin_size;",
      "2027:    pi->retrans_timeout = rfc.retrans_timeout;",
      "2028:    pi->monitor_timeout = rfc.monitor_timeout;",
      "2029:    pi->max_pdu_size    = le16_to_cpu(rfc.max_pdu_size);",
      "2030:    break;",
      "2031:   case L2CAP_MODE_STREAMING:",
      "2032:    pi->max_pdu_size    = le16_to_cpu(rfc.max_pdu_size);",
      "2033:    break;",
      "2034:   }",
      "2035:  }",
      "2037:  req->dcid   = cpu_to_le16(pi->dcid);",
      "2038:  req->flags  = cpu_to_le16(0x0000);",
      "2040:  return ptr - data;",
      "2041: }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "2043:   l2cap_send_cmd(conn, l2cap_get_ident(conn), L2CAP_CONF_REQ,",
      "2044:      l2cap_build_conf_req(sk, req), req);",
      "2045:   break;",
      "2047:  case L2CAP_CR_PEND:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2229:   l2cap_pi(sk)->num_conf_req++;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "2102:  len = l2cap_parse_conf_req(sk, rsp);",
      "2104:   goto unlock;",
      "2106:  l2cap_send_cmd(conn, cmd->ident, L2CAP_CONF_RSP, len, rsp);",
      "2109:  l2cap_pi(sk)->conf_len = 0;",
      "",
      "[Removed Lines]",
      "2103:  if (len < 0)",
      "",
      "[Added Lines]",
      "2288:  if (len < 0) {",
      "2289:   struct l2cap_disconn_req req;",
      "2290:   req.dcid = cpu_to_le16(l2cap_pi(sk)->dcid);",
      "2291:   req.scid = cpu_to_le16(l2cap_pi(sk)->scid);",
      "2292:   l2cap_send_cmd(conn, l2cap_get_ident(conn),",
      "2293:      L2CAP_DISCONN_REQ, sizeof(req), &req);",
      "2295:  }",
      "2298:  l2cap_pi(sk)->num_conf_rsp++;",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "2121:   u8 buf[64];",
      "2122:   l2cap_send_cmd(conn, l2cap_get_ident(conn), L2CAP_CONF_REQ,",
      "2123:      l2cap_build_conf_req(sk, buf), buf);",
      "2124:  }",
      "2126: unlock:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2316:   l2cap_pi(sk)->num_conf_req++;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "2150:   break;",
      "2152:  case L2CAP_CONF_UNACCEPT:",
      "2163:   }",
      "2165:  default:",
      "",
      "[Removed Lines]",
      "2153:   if (++l2cap_pi(sk)->conf_retry < L2CAP_CONF_MAX_RETRIES) {",
      "2154:    char req[128];",
      "2160:    l2cap_send_cmd(conn, l2cap_get_ident(conn), L2CAP_CONF_REQ,",
      "2161:       l2cap_build_conf_req(sk, req), req);",
      "2162:    goto done;",
      "",
      "[Added Lines]",
      "2346:   if (l2cap_pi(sk)->num_conf_rsp <= L2CAP_CONF_MAX_CONF_RSP) {",
      "2347:    int len = cmd->len - sizeof(*rsp);",
      "2348:    char req[64];",
      "2351:    result = L2CAP_CONF_SUCCESS;",
      "2352:    len = l2cap_parse_conf_rsp(sk, rsp->data,",
      "2353:        len, req, &result);",
      "2354:    if (len < 0) {",
      "2355:     struct l2cap_disconn_req req;",
      "2356:     req.dcid = cpu_to_le16(l2cap_pi(sk)->dcid);",
      "2357:     req.scid = cpu_to_le16(l2cap_pi(sk)->scid);",
      "2358:     l2cap_send_cmd(conn, l2cap_get_ident(conn),",
      "2359:      L2CAP_DISCONN_REQ, sizeof(req), &req);",
      "2360:     goto done;",
      "2361:    }",
      "2363:    l2cap_send_cmd(conn, l2cap_get_ident(conn),",
      "2364:       L2CAP_CONF_REQ, len, req);",
      "2365:    l2cap_pi(sk)->num_conf_req++;",
      "2366:    if (result != L2CAP_CONF_SUCCESS)",
      "2367:     goto done;",
      "2368:    break;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "86b1b26326279299c93ddb11ab4782d3896bf84c",
      "candidate_info": {
        "commit_hash": "86b1b26326279299c93ddb11ab4782d3896bf84c",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/86b1b26326279299c93ddb11ab4782d3896bf84c",
        "files": [
          "net/bluetooth/l2cap.c"
        ],
        "message": "Bluetooth: Fix endianness issue with L2CAP MPS configuration\n\nIncoming configuration values must be converted to native CPU order\nbefore use.  This fixes a bug where a little-endian MPS value is\ncompared to a native CPU value.  On big-endian processors, this\ncan cause ERTM and streaming mode segmentation to produce PDUs\nthat are larger than the remote stack is expecting, or that would\nproduce fragmented skbs that the current FCS code cannot handle.\n\nSigned-off-by: Mat Martineau <mathewm@codeaurora.org>\nSigned-off-by: Marcel Holtmann <marcel@holtmann.org>",
        "before_after_code_files": [
          "net/bluetooth/l2cap.c||net/bluetooth/l2cap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/bluetooth/l2cap.c||net/bluetooth/l2cap.c"
          ],
          "candidate": [
            "net/bluetooth/l2cap.c||net/bluetooth/l2cap.c"
          ]
        }
      },
      "candidate_diff": {
        "net/bluetooth/l2cap.c||net/bluetooth/l2cap.c": [
          "File: net/bluetooth/l2cap.c -> net/bluetooth/l2cap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2705:   case L2CAP_MODE_ERTM:",
          "2706:    pi->remote_tx_win = rfc.txwin_size;",
          "2707:    pi->remote_max_tx = rfc.max_transmit;",
          "2711:    pi->remote_mps = le16_to_cpu(rfc.max_pdu_size);",
          "",
          "[Removed Lines]",
          "2708:    if (rfc.max_pdu_size > pi->conn->mtu - 10)",
          "2709:     rfc.max_pdu_size = le16_to_cpu(pi->conn->mtu - 10);",
          "",
          "[Added Lines]",
          "2709:    if (le16_to_cpu(rfc.max_pdu_size) > pi->conn->mtu - 10)",
          "2710:     rfc.max_pdu_size = cpu_to_le16(pi->conn->mtu - 10);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2723:    break;",
          "2725:   case L2CAP_MODE_STREAMING:",
          "2729:    pi->remote_mps = le16_to_cpu(rfc.max_pdu_size);",
          "",
          "[Removed Lines]",
          "2726:    if (rfc.max_pdu_size > pi->conn->mtu - 10)",
          "2727:     rfc.max_pdu_size = le16_to_cpu(pi->conn->mtu - 10);",
          "",
          "[Added Lines]",
          "2727:    if (le16_to_cpu(rfc.max_pdu_size) > pi->conn->mtu - 10)",
          "2728:     rfc.max_pdu_size = cpu_to_le16(pi->conn->mtu - 10);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a0e55a32afc2130e5ae506755e4b8eb42a23b568",
      "candidate_info": {
        "commit_hash": "a0e55a32afc2130e5ae506755e4b8eb42a23b568",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/a0e55a32afc2130e5ae506755e4b8eb42a23b568",
        "files": [
          "net/bluetooth/l2cap.c"
        ],
        "message": "Bluetooth: Select Basic Mode as default for SOCK_SEQPACKET\n\nThe default mode for SOCK_SEQPACKET is Basic Mode. So when no\nmode has been specified, Basic Mode shall be used.\n\nThis is important for current application to keep working as\nexpected and not cause a regression.\n\nSigned-off-by: Gustavo F. Padovan <gustavo@las.ic.unicamp.br>\nSigned-off-by: Marcel Holtmann <marcel@holtmann.org>",
        "before_after_code_files": [
          "net/bluetooth/l2cap.c||net/bluetooth/l2cap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/bluetooth/l2cap.c||net/bluetooth/l2cap.c"
          ],
          "candidate": [
            "net/bluetooth/l2cap.c||net/bluetooth/l2cap.c"
          ]
        }
      },
      "candidate_diff": {
        "net/bluetooth/l2cap.c||net/bluetooth/l2cap.c": [
          "File: net/bluetooth/l2cap.c -> net/bluetooth/l2cap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2205: {",
          "2206:  struct l2cap_pinfo *pi = l2cap_pi(sk);",
          "2207:  struct l2cap_conf_req *req = data;",
          "2209:  void *ptr = req->data;",
          "2211:  BT_DBG(\"sk %p\", sk);",
          "",
          "[Removed Lines]",
          "2208:  struct l2cap_conf_rfc rfc = { .mode = L2CAP_MODE_ERTM };",
          "",
          "[Added Lines]",
          "2208:  struct l2cap_conf_rfc rfc = { .mode = L2CAP_MODE_BASIC };",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9b108fc0cf4e79c34a7d5626f5c2c4c529ef6d3f",
      "candidate_info": {
        "commit_hash": "9b108fc0cf4e79c34a7d5626f5c2c4c529ef6d3f",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/9b108fc0cf4e79c34a7d5626f5c2c4c529ef6d3f",
        "files": [
          "net/bluetooth/l2cap.c"
        ],
        "message": "Bluetooth: Fix ERTM error reporting to the userspace\n\nIf any error occurs during transfers we have to tell userspace that\nsomething wrong happened.\n\nSigned-off-by: Gustavo F. Padovan <padovan@profusion.mobi>\nReviewed-by: Jo\u00e3o Paulo Rechi Vita <jprvita@profusion.mobi>\nSigned-off-by: Marcel Holtmann <marcel@holtmann.org>",
        "before_after_code_files": [
          "net/bluetooth/l2cap.c||net/bluetooth/l2cap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/bluetooth/l2cap.c||net/bluetooth/l2cap.c"
          ],
          "candidate": [
            "net/bluetooth/l2cap.c||net/bluetooth/l2cap.c"
          ]
        }
      },
      "candidate_diff": {
        "net/bluetooth/l2cap.c||net/bluetooth/l2cap.c": [
          "File: net/bluetooth/l2cap.c -> net/bluetooth/l2cap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "456:  }",
          "457: }",
          "460: {",
          "461:  struct l2cap_disconn_req req;",
          "",
          "[Removed Lines]",
          "459: static void l2cap_send_disconn_req(struct l2cap_conn *conn, struct sock *sk)",
          "",
          "[Added Lines]",
          "459: static void l2cap_send_disconn_req(struct l2cap_conn *conn, struct sock *sk, int err)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "477:    L2CAP_DISCONN_REQ, sizeof(req), &req);",
          "479:  sk->sk_state = BT_DISCONN;",
          "480: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "480:  sk->sk_err = err;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "770:    struct l2cap_conn *conn = l2cap_pi(sk)->conn;",
          "772:    l2cap_sock_set_timer(sk, sk->sk_sndtimeo);",
          "774:   } else",
          "775:    l2cap_chan_del(sk, reason);",
          "776:   break;",
          "",
          "[Removed Lines]",
          "773:    l2cap_send_disconn_req(conn, sk);",
          "",
          "[Added Lines]",
          "774:    l2cap_send_disconn_req(conn, sk, reason);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1316:  bh_lock_sock(sk);",
          "1317:  if (l2cap_pi(sk)->retry_count >= l2cap_pi(sk)->remote_max_tx) {",
          "1319:   bh_unlock_sock(sk);",
          "1320:   return;",
          "1321:  }",
          "",
          "[Removed Lines]",
          "1318:   l2cap_send_disconn_req(l2cap_pi(sk)->conn, sk);",
          "",
          "[Added Lines]",
          "1319:   l2cap_send_disconn_req(l2cap_pi(sk)->conn, sk, ECONNABORTED);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1424:  if (pi->remote_max_tx &&",
          "1425:    bt_cb(skb)->retries == pi->remote_max_tx) {",
          "1427:   return;",
          "1428:  }",
          "",
          "[Removed Lines]",
          "1426:   l2cap_send_disconn_req(pi->conn, sk);",
          "",
          "[Added Lines]",
          "1427:   l2cap_send_disconn_req(pi->conn, sk, ECONNABORTED);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1464:   if (pi->remote_max_tx &&",
          "1465:     bt_cb(skb)->retries == pi->remote_max_tx) {",
          "1467:    break;",
          "1468:   }",
          "",
          "[Removed Lines]",
          "1466:    l2cap_send_disconn_req(pi->conn, sk);",
          "",
          "[Added Lines]",
          "1467:    l2cap_send_disconn_req(pi->conn, sk, ECONNABORTED);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2191:    err = bt_sock_wait_state(sk, BT_CLOSED,",
          "2192:        sk->sk_lingertime);",
          "2193:  }",
          "2194:  release_sock(sk);",
          "2195:  return err;",
          "2196: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2196:  if (!err && sk->sk_err)",
          "2197:   err = -sk->sk_err;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2462:  case L2CAP_MODE_ERTM:",
          "2463:   pi->conf_state |= L2CAP_CONF_STATE2_DEVICE;",
          "2464:   if (!l2cap_mode_supported(pi->mode, pi->conn->feat_mask))",
          "2466:   break;",
          "2467:  default:",
          "2468:   pi->mode = l2cap_select_mode(rfc.mode, pi->conn->feat_mask);",
          "",
          "[Removed Lines]",
          "2465:    l2cap_send_disconn_req(pi->conn, sk);",
          "",
          "[Added Lines]",
          "2470:    l2cap_send_disconn_req(pi->conn, sk, ECONNRESET);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3031:  len = l2cap_parse_conf_req(sk, rsp);",
          "3032:  if (len < 0) {",
          "3034:   goto unlock;",
          "3035:  }",
          "",
          "[Removed Lines]",
          "3033:   l2cap_send_disconn_req(conn, sk);",
          "",
          "[Added Lines]",
          "3038:   l2cap_send_disconn_req(conn, sk, ECONNRESET);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3100:    char req[64];",
          "3102:    if (len > sizeof(req) - sizeof(struct l2cap_conf_req)) {",
          "3104:     goto done;",
          "3105:    }",
          "",
          "[Removed Lines]",
          "3103:     l2cap_send_disconn_req(conn, sk);",
          "",
          "[Added Lines]",
          "3108:     l2cap_send_disconn_req(conn, sk, ECONNRESET);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3109:    len = l2cap_parse_conf_rsp(sk, rsp->data,",
          "3110:        len, req, &result);",
          "3111:    if (len < 0) {",
          "3113:     goto done;",
          "3114:    }",
          "",
          "[Removed Lines]",
          "3112:     l2cap_send_disconn_req(conn, sk);",
          "",
          "[Added Lines]",
          "3117:     l2cap_send_disconn_req(conn, sk, ECONNRESET);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3124:  default:",
          "3125:   sk->sk_err = ECONNRESET;",
          "3126:   l2cap_sock_set_timer(sk, HZ * 5);",
          "3128:   goto done;",
          "3129:  }",
          "",
          "[Removed Lines]",
          "3127:   l2cap_send_disconn_req(conn, sk);",
          "",
          "[Added Lines]",
          "3132:   l2cap_send_disconn_req(conn, sk, ECONNRESET);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3565:  pi->sdu = NULL;",
          "3567: disconnect:",
          "3569:  kfree_skb(skb);",
          "3570:  return 0;",
          "3571: }",
          "",
          "[Removed Lines]",
          "3568:  l2cap_send_disconn_req(pi->conn, sk);",
          "",
          "[Added Lines]",
          "3573:  l2cap_send_disconn_req(pi->conn, sk, ECONNRESET);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3589:   if (n_tries++ > L2CAP_LOCAL_BUSY_TRIES) {",
          "3590:    err = -EBUSY;",
          "3592:    goto done;",
          "3593:   }",
          "",
          "[Removed Lines]",
          "3591:    l2cap_send_disconn_req(pi->conn, sk);",
          "",
          "[Added Lines]",
          "3596:    l2cap_send_disconn_req(pi->conn, sk, EBUSY);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3866:  if (tx_seq_offset >= pi->tx_win) {",
          "3868:   goto drop;",
          "3869:  }",
          "",
          "[Removed Lines]",
          "3867:   l2cap_send_disconn_req(pi->conn, sk);",
          "",
          "[Added Lines]",
          "3872:   l2cap_send_disconn_req(pi->conn, sk, ECONNRESET);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "4181:    len -= 2;",
          "4183:   if (len > pi->mps) {",
          "4185:    goto drop;",
          "4186:   }",
          "",
          "[Removed Lines]",
          "4184:    l2cap_send_disconn_req(pi->conn, sk);",
          "",
          "[Added Lines]",
          "4189:    l2cap_send_disconn_req(pi->conn, sk, ECONNRESET);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "4199:   if (req_seq_offset > next_tx_seq_offset) {",
          "4201:    goto drop;",
          "4202:   }",
          "4204:   if (__is_iframe(control)) {",
          "4205:    if (len < 0) {",
          "4207:     goto drop;",
          "4208:    }",
          "4210:    l2cap_data_channel_iframe(sk, control, skb);",
          "4211:   } else {",
          "4212:    if (len != 0) {",
          "4214:     goto drop;",
          "4215:    }",
          "",
          "[Removed Lines]",
          "4200:    l2cap_send_disconn_req(pi->conn, sk);",
          "4206:     l2cap_send_disconn_req(pi->conn, sk);",
          "4213:     l2cap_send_disconn_req(pi->conn, sk);",
          "",
          "[Added Lines]",
          "4205:    l2cap_send_disconn_req(pi->conn, sk, ECONNRESET);",
          "4211:     l2cap_send_disconn_req(pi->conn, sk, ECONNRESET);",
          "4218:     l2cap_send_disconn_req(pi->conn, sk, ECONNRESET);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "10467e9e9b89272b25b56688bb276d0830e9ab9a",
      "candidate_info": {
        "commit_hash": "10467e9e9b89272b25b56688bb276d0830e9ab9a",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/10467e9e9b89272b25b56688bb276d0830e9ab9a",
        "files": [
          "net/bluetooth/l2cap.c"
        ],
        "message": "Bluetooth: Add le16 macro to Retransmission and Monitor Timeouts values\n\nFix a possible problem with Big Endian machines.\n\nSigned-off-by: Gustavo F. Padovan <padovan@profusion.mobi>\nReviewed-by: Jo\u00e3o Paulo Rechi Vita <jprvita@profusion.mobi>\nSigned-off-by: Marcel Holtmann <marcel@holtmann.org>",
        "before_after_code_files": [
          "net/bluetooth/l2cap.c||net/bluetooth/l2cap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/bluetooth/l2cap.c||net/bluetooth/l2cap.c"
          ],
          "candidate": [
            "net/bluetooth/l2cap.c||net/bluetooth/l2cap.c"
          ]
        }
      },
      "candidate_diff": {
        "net/bluetooth/l2cap.c||net/bluetooth/l2cap.c": [
          "File: net/bluetooth/l2cap.c -> net/bluetooth/l2cap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2488:    pi->remote_mps = le16_to_cpu(rfc.max_pdu_size);",
          "2493:    pi->conf_state |= L2CAP_CONF_MODE_DONE;",
          "",
          "[Removed Lines]",
          "2490:    rfc.retrans_timeout = L2CAP_DEFAULT_RETRANS_TO;",
          "2491:    rfc.monitor_timeout = L2CAP_DEFAULT_MONITOR_TO;",
          "",
          "[Added Lines]",
          "2490:    rfc.retrans_timeout =",
          "2491:     le16_to_cpu(L2CAP_DEFAULT_RETRANS_TO);",
          "2492:    rfc.monitor_timeout =",
          "2493:     le16_to_cpu(L2CAP_DEFAULT_MONITOR_TO);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2578:   switch (rfc.mode) {",
          "2579:   case L2CAP_MODE_ERTM:",
          "2580:    pi->remote_tx_win   = rfc.txwin_size;",
          "2583:    pi->mps    = le16_to_cpu(rfc.max_pdu_size);",
          "2584:    break;",
          "2585:   case L2CAP_MODE_STREAMING:",
          "",
          "[Removed Lines]",
          "2581:    pi->retrans_timeout = rfc.retrans_timeout;",
          "2582:    pi->monitor_timeout = rfc.monitor_timeout;",
          "",
          "[Added Lines]",
          "2583:    pi->retrans_timeout = le16_to_cpu(rfc.retrans_timeout);",
          "2584:    pi->monitor_timeout = le16_to_cpu(rfc.monitor_timeout);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2634:  switch (rfc.mode) {",
          "2635:  case L2CAP_MODE_ERTM:",
          "2636:   pi->remote_tx_win   = rfc.txwin_size;",
          "2639:   pi->mps    = le16_to_cpu(rfc.max_pdu_size);",
          "2640:   break;",
          "2641:  case L2CAP_MODE_STREAMING:",
          "",
          "[Removed Lines]",
          "2637:   pi->retrans_timeout = rfc.retrans_timeout;",
          "2638:   pi->monitor_timeout = rfc.monitor_timeout;",
          "",
          "[Added Lines]",
          "2639:   pi->retrans_timeout = le16_to_cpu(rfc.retrans_timeout);",
          "2640:   pi->monitor_timeout = le16_to_cpu(rfc.monitor_timeout);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e9aeb2ddd441f0c8699ff04c499d7213730a0f04",
      "candidate_info": {
        "commit_hash": "e9aeb2ddd441f0c8699ff04c499d7213730a0f04",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/e9aeb2ddd441f0c8699ff04c499d7213730a0f04",
        "files": [
          "net/bluetooth/l2cap.c"
        ],
        "message": "Bluetooth: Send ConfigReq after send a ConnectionRsp\n\nThe extended L2CAP features requires that one should initiate a\nConfigReq after send the ConnectionRsp. This patch changes the behaviour\nof the configuration process of our stack.\n\nSigned-off-by: Gustavo F. Padovan <padovan@profusion.mobi>\nSigned-off-by: Marcel Holtmann <marcel@holtmann.org>",
        "before_after_code_files": [
          "net/bluetooth/l2cap.c||net/bluetooth/l2cap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/bluetooth/l2cap.c||net/bluetooth/l2cap.c"
          ],
          "candidate": [
            "net/bluetooth/l2cap.c||net/bluetooth/l2cap.c"
          ]
        }
      },
      "candidate_diff": {
        "net/bluetooth/l2cap.c||net/bluetooth/l2cap.c": [
          "File: net/bluetooth/l2cap.c -> net/bluetooth/l2cap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "74: static void l2cap_sock_close(struct sock *sk);",
          "75: static void l2cap_sock_kill(struct sock *sk);",
          "77: static struct sk_buff *l2cap_build_cmd(struct l2cap_conn *conn,",
          "78:     u8 code, u8 ident, u16 dlen, void *data);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77: static int l2cap_build_conf_req(struct sock *sk, void *data);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "548:    }",
          "549:   } else if (sk->sk_state == BT_CONNECT2) {",
          "550:    struct l2cap_conn_rsp rsp;",
          "551:    rsp.scid = cpu_to_le16(l2cap_pi(sk)->dcid);",
          "552:    rsp.dcid = cpu_to_le16(l2cap_pi(sk)->scid);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "552:    char buf[128];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "571:    l2cap_send_cmd(conn, l2cap_pi(sk)->ident,",
          "572:      L2CAP_CONN_RSP, sizeof(rsp), &rsp);",
          "573:   }",
          "575:   bh_unlock_sock(sk);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "576:    if (l2cap_pi(sk)->conf_state & L2CAP_CONF_REQ_SENT ||",
          "577:      rsp.result != L2CAP_CR_SUCCESS) {",
          "578:     bh_unlock_sock(sk);",
          "579:     continue;",
          "580:    }",
          "582:    l2cap_pi(sk)->conf_state |= L2CAP_CONF_REQ_SENT;",
          "583:    l2cap_send_cmd(conn, l2cap_get_ident(conn), L2CAP_CONF_REQ,",
          "584:       l2cap_build_conf_req(sk, buf), buf);",
          "585:    l2cap_pi(sk)->num_conf_req++;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1898:  if (sk->sk_state == BT_CONNECT2 && bt_sk(sk)->defer_setup) {",
          "1899:   struct l2cap_conn_rsp rsp;",
          "1901:   sk->sk_state = BT_CONFIG;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1913:   struct l2cap_conn *conn = l2cap_pi(sk)->conn;",
          "1914:   u8 buf[128];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1907:   l2cap_send_cmd(l2cap_pi(sk)->conn, l2cap_pi(sk)->ident,",
          "1908:      L2CAP_CONN_RSP, sizeof(rsp), &rsp);",
          "1910:   release_sock(sk);",
          "1911:   return 0;",
          "1912:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1925:   if (l2cap_pi(sk)->conf_state & L2CAP_CONF_REQ_SENT) {",
          "1926:    release_sock(sk);",
          "1927:    return 0;",
          "1928:   }",
          "1930:   l2cap_pi(sk)->conf_state |= L2CAP_CONF_REQ_SENT;",
          "1931:   l2cap_send_cmd(conn, l2cap_get_ident(conn), L2CAP_CONF_REQ,",
          "1932:     l2cap_build_conf_req(sk, buf), buf);",
          "1933:   l2cap_pi(sk)->num_conf_req++;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2613:   }",
          "2614:  }",
          "2617:   goto done;",
          "2619:  switch (pi->mode) {",
          "",
          "[Removed Lines]",
          "2616:  if (pi->num_conf_rsp || pi->num_conf_req)",
          "",
          "[Added Lines]",
          "2641:  if (pi->num_conf_rsp || pi->num_conf_req > 1)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2857:  struct l2cap_chan_list *list = &conn->chan_list;",
          "2858:  struct l2cap_conn_req *req = (struct l2cap_conn_req *) data;",
          "2859:  struct l2cap_conn_rsp rsp;",
          "2861:  int result, status = L2CAP_CS_NO_INFO;",
          "2863:  u16 dcid = 0, scid = __le16_to_cpu(req->scid);",
          "",
          "[Removed Lines]",
          "2860:  struct sock *sk, *parent;",
          "",
          "[Added Lines]",
          "2885:  struct sock *parent, *uninitialized_var(sk);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2966:      L2CAP_INFO_REQ, sizeof(info), &info);",
          "2967:  }",
          "2969:  return 0;",
          "2970: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2994:  if (!(l2cap_pi(sk)->conf_state & L2CAP_CONF_REQ_SENT) &&",
          "2995:     result == L2CAP_CR_SUCCESS) {",
          "2996:   u8 buf[128];",
          "2997:   l2cap_pi(sk)->conf_state |= L2CAP_CONF_REQ_SENT;",
          "2998:   l2cap_send_cmd(conn, l2cap_get_ident(conn), L2CAP_CONF_REQ,",
          "2999:      l2cap_build_conf_req(sk, buf), buf);",
          "3000:   l2cap_pi(sk)->num_conf_req++;",
          "3001:  }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2998:   sk->sk_state = BT_CONFIG;",
          "2999:   l2cap_pi(sk)->ident = 0;",
          "3000:   l2cap_pi(sk)->dcid = dcid;",
          "3002:   l2cap_pi(sk)->conf_state &= ~L2CAP_CONF_CONNECT_PEND;",
          "3004:   l2cap_send_cmd(conn, l2cap_get_ident(conn), L2CAP_CONF_REQ,",
          "3005:      l2cap_build_conf_req(sk, req), req);",
          "3006:   l2cap_pi(sk)->num_conf_req++;",
          "",
          "[Removed Lines]",
          "3001:   l2cap_pi(sk)->conf_state |= L2CAP_CONF_REQ_SENT;",
          "",
          "[Added Lines]",
          "3037:   if (l2cap_pi(sk)->conf_state & L2CAP_CONF_REQ_SENT)",
          "3038:    break;",
          "3040:   l2cap_pi(sk)->conf_state |= L2CAP_CONF_REQ_SENT;",
          "",
          "---------------"
        ]
      }
    }
  ]
}