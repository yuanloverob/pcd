{
  "cve_id": "CVE-2016-6129",
  "cve_desc": "The rsa_verify_hash_ex function in rsa_verify_hash.c in LibTomCrypt, as used in OP-TEE before 2.2.0, does not validate that the message length is equal to the ASN.1 encoded data length, which makes it easier for remote attackers to forge RSA signatures or public certificates by leveraging a Bleichenbacher signature forgery attack.",
  "repo": "libtom/libtomcrypt",
  "patch_hash": "5eb9743410ce4657e9d54fef26a2ee31a1b5dd09",
  "patch_info": {
    "commit_hash": "5eb9743410ce4657e9d54fef26a2ee31a1b5dd09",
    "repo": "libtom/libtomcrypt",
    "commit_url": "https://github.com/libtom/libtomcrypt/commit/5eb9743410ce4657e9d54fef26a2ee31a1b5dd09",
    "files": [
      "src/pk/rsa/rsa_verify_hash.c"
    ],
    "message": "rsa_verify_hash: fix possible bleichenbacher signature attack",
    "before_after_code_files": [
      "src/pk/rsa/rsa_verify_hash.c||src/pk/rsa/rsa_verify_hash.c"
    ]
  },
  "patch_diff": {
    "src/pk/rsa/rsa_verify_hash.c||src/pk/rsa/rsa_verify_hash.c": [
      "File: src/pk/rsa/rsa_verify_hash.c -> src/pk/rsa/rsa_verify_hash.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "103:   } else {",
      "105:     unsigned char *out;",
      "107:     int           decoded;",
      "108:     ltc_asn1_list digestinfo[2], siginfo[2];",
      "",
      "[Removed Lines]",
      "106:     unsigned long outlen, loid[16];",
      "",
      "[Added Lines]",
      "106:     unsigned long outlen, loid[16], reallen;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "145:        goto bail_2;",
      "146:     }",
      "150:         (XMEMCMP(digestinfo[0].data, hash_descriptor[hash_idx].OID, sizeof(unsigned long) * hash_descriptor[hash_idx].OIDlen) == 0) &&",
      "151:         (siginfo[1].size == hashlen) &&",
      "152:         (XMEMCMP(siginfo[1].data, hash, hashlen) == 0)) {",
      "",
      "[Removed Lines]",
      "149:     if ((digestinfo[0].size == hash_descriptor[hash_idx].OIDlen) &&",
      "",
      "[Added Lines]",
      "148:     if ((err = der_length_sequence(siginfo, 2, &reallen)) != CRYPT_OK) {",
      "149:        XFREE(out);",
      "150:        goto bail_2;",
      "151:     }",
      "154:     if ((reallen == outlen) &&",
      "155:         (digestinfo[0].size == hash_descriptor[hash_idx].OIDlen) &&",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "64f887e8f3958a9707a720a3d1fa8439c10d8d21",
      "candidate_info": {
        "commit_hash": "64f887e8f3958a9707a720a3d1fa8439c10d8d21",
        "repo": "libtom/libtomcrypt",
        "commit_url": "https://github.com/libtom/libtomcrypt/commit/64f887e8f3958a9707a720a3d1fa8439c10d8d21",
        "files": [
          "testprof/pkcs_1_test.c"
        ],
        "message": "predictable rand() values please",
        "before_after_code_files": [
          "testprof/pkcs_1_test.c||testprof/pkcs_1_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libtom/libtomcrypt/pull/48"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "testprof/pkcs_1_test.c||testprof/pkcs_1_test.c": [
          "File: testprof/pkcs_1_test.c -> testprof/pkcs_1_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #ifdef LTC_PKCS_1",
          "5: int pkcs_1_test(void)",
          "6: {",
          "7:    unsigned char buf[3][128];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #ifdef LTC_TEST_REAL_RAND",
          "6: #define LTC_TEST_RAND_SEED  time(NULL)",
          "7: #else",
          "8: #define LTC_TEST_RAND_SEED  23",
          "9: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18:       return 1;",
          "19:    }",
          "23:    for (x = 0; x < 100; x++) {",
          "24:       zeromem(buf, sizeof(buf));",
          "",
          "[Removed Lines]",
          "21:    srand(time(NULL));",
          "",
          "[Added Lines]",
          "27:    srand(LTC_TEST_RAND_SEED);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fe1b6eced7ec9fa1b3ff70abc48632fa56a49015",
      "candidate_info": {
        "commit_hash": "fe1b6eced7ec9fa1b3ff70abc48632fa56a49015",
        "repo": "libtom/libtomcrypt",
        "commit_url": "https://github.com/libtom/libtomcrypt/commit/fe1b6eced7ec9fa1b3ff70abc48632fa56a49015",
        "files": [
          "demos/test.c",
          "testprof/makefile",
          "testprof/makefile.icc",
          "testprof/makefile.mingw",
          "testprof/makefile.msvc",
          "testprof/makefile.shared",
          "testprof/pkcs_1_pss_test.c",
          "testprof/tomcrypt_test.h"
        ],
        "message": "add testprof/pkcs_1_pss_test",
        "before_after_code_files": [
          "demos/test.c||demos/test.c",
          "testprof/makefile.icc||testprof/makefile.icc",
          "testprof/makefile.mingw||testprof/makefile.mingw",
          "testprof/makefile.msvc||testprof/makefile.msvc",
          "testprof/makefile.shared||testprof/makefile.shared",
          "testprof/pkcs_1_pss_test.c||testprof/pkcs_1_pss_test.c",
          "testprof/tomcrypt_test.h||testprof/tomcrypt_test.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libtom/libtomcrypt/pull/48"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "demos/test.c||demos/test.c": [
          "File: demos/test.c -> demos/test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:    printf(\"\\nmodes_test....\"); fflush(stdout); x = modes_test();       printf(x ? \"failed\" : \"passed\");if (x) exit(EXIT_FAILURE);",
          "25:    printf(\"\\nder_test......\"); fflush(stdout); x = der_tests();        printf(x ? \"failed\" : \"passed\");if (x) exit(EXIT_FAILURE);",
          "26:    printf(\"\\npkcs_1_test...\"); fflush(stdout); x = pkcs_1_test();      printf(x ? \"failed\" : \"passed\");if (x) exit(EXIT_FAILURE);",
          "27:    printf(\"\\nrsa_test......\"); fflush(stdout); x = rsa_test();         printf(x ? \"failed\" : \"passed\");if (x) exit(EXIT_FAILURE);",
          "28:    printf(\"\\ndh_test.......\"); fflush(stdout); x = dh_test();          printf(x ? \"failed\" : \"passed\");if (x) exit(EXIT_FAILURE);",
          "29:    printf(\"\\necc_test......\"); fflush(stdout); x = ecc_tests();        printf(x ? \"failed\" : \"passed\");if (x) exit(EXIT_FAILURE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27:    printf(\"\\npkcs_1_pss_test....\"); fflush(stdout); x = pkcs_1_pss_test();       printf(x ? \"failed\" : \"passed\");if (x) exit(EXIT_FAILURE);",
          "",
          "---------------"
        ],
        "testprof/makefile.icc||testprof/makefile.icc": [
          "File: testprof/makefile.icc -> testprof/makefile.icc",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: OBJECTS = base64_test.o cipher_hash_test.o der_tests.o no_prng.o                         \\",
          "5: dsa_test.o ecc_test.o mac_test.o modes_test.o pkcs_1_test.o rsa_test.o                   \\",
          "8: ifndef LIBTEST_S",
          "9:    LIBTEST_S = libtomcrypt_prof.a",
          "",
          "[Removed Lines]",
          "6: store_test.o test_driver.o x86_prof.o katja_test.o dh_test.o misc_test.o",
          "",
          "[Added Lines]",
          "6: store_test.o test_driver.o x86_prof.o katja_test.o dh_test.o misc_test.o pkcs_1_pss_test.o",
          "",
          "---------------"
        ],
        "testprof/makefile.mingw||testprof/makefile.mingw": [
          "File: testprof/makefile.mingw -> testprof/makefile.mingw",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: OBJECTS = base64_test.o cipher_hash_test.o der_tests.o no_prng.o                         \\",
          "8: dsa_test.o ecc_test.o mac_test.o misc_test.o modes_test.o pkcs_1_test.o rsa_test.o       \\",
          "11: default: $(LIBTEST_S)",
          "",
          "[Removed Lines]",
          "9: store_test.o test_driver.o x86_prof.o katja_test.o dh_test.o",
          "",
          "[Added Lines]",
          "9: store_test.o test_driver.o x86_prof.o katja_test.o dh_test.o pkcs_1_pss_test.o",
          "",
          "---------------"
        ],
        "testprof/makefile.msvc||testprof/makefile.msvc": [
          "File: testprof/makefile.msvc -> testprof/makefile.msvc",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: OBJECTS=base64_test.obj cipher_hash_test.obj der_tests.obj no_prng.obj \\",
          "4: dsa_test.obj ecc_test.obj mac_test.obj modes_test.obj pkcs_1_test.obj \\",
          "5: rsa_test.obj store_test.obj test_driver.obj x86_prof.obj katja_test.obj \\",
          "8: tomcrypt_prof.lib: $(OBJECTS)",
          "9:  lib /out:tomcrypt_prof.lib $(OBJECTS)",
          "",
          "[Removed Lines]",
          "6: dh_test.obj misc_test.obj",
          "",
          "[Added Lines]",
          "6: dh_test.obj misc_test.obj pkcs_1_pss_test.obj",
          "",
          "---------------"
        ],
        "testprof/makefile.shared||testprof/makefile.shared": [
          "File: testprof/makefile.shared -> testprof/makefile.shared",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: OBJECTS = base64_test.o cipher_hash_test.o der_tests.o no_prng.o                         \\",
          "10: dsa_test.o ecc_test.o mac_test.o modes_test.o pkcs_1_test.o rsa_test.o                   \\",
          "13: ifndef LIBTEST",
          "14:    LIBTEST=libtomcrypt_prof.la",
          "",
          "[Removed Lines]",
          "11: store_test.o test_driver.o x86_prof.o katja_test.o dh_test.o misc_test.o",
          "",
          "[Added Lines]",
          "11: store_test.o test_driver.o x86_prof.o katja_test.o dh_test.o misc_test.o pkcs_1_pss_test.o",
          "",
          "---------------"
        ],
        "testprof/pkcs_1_pss_test.c||testprof/pkcs_1_pss_test.c": [
          "File: testprof/pkcs_1_pss_test.c -> testprof/pkcs_1_pss_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include <tomcrypt_test.h>",
          "3: #ifdef LTC_PKCS_1",
          "5: #include \"../notes/rsa-testvectors/pss-vect.c\"",
          "9: int pkcs_1_pss_test(void)",
          "10: {",
          "11:   int prng_idx = register_prng(&no_prng_desc);",
          "12:   int hash_idx = find_hash(\"sha1\");",
          "13:   unsigned int i;",
          "15:   DO(prng_is_valid(prng_idx));",
          "16:   DO(hash_is_valid(hash_idx));",
          "18:   for (i = 0; i < sizeof(testcases)/sizeof(testcases[0]); ++i) {",
          "19:     testcase_t* t = &testcases[i];",
          "20:     rsa_key k, *key = &k;",
          "21:     DOX(mp_init_multi(&key->e, &key->d, &key->N, &key->dQ,",
          "22:                        &key->dP, &key->qP, &key->p, &key->q, NULL), t->name);",
          "24:     DOX(mp_read_unsigned_bin(key->e, t->rsa.e, t->rsa.e_l), t->name);",
          "25:     DOX(mp_read_unsigned_bin(key->d, t->rsa.d, t->rsa.d_l), t->name);",
          "26:     DOX(mp_read_unsigned_bin(key->N, t->rsa.n, t->rsa.n_l), t->name);",
          "27:     DOX(mp_read_unsigned_bin(key->dQ, t->rsa.dQ, t->rsa.dQ_l), t->name);",
          "28:     DOX(mp_read_unsigned_bin(key->dP, t->rsa.dP, t->rsa.dP_l), t->name);",
          "29:     DOX(mp_read_unsigned_bin(key->qP, t->rsa.qInv, t->rsa.qInv_l), t->name);",
          "30:     DOX(mp_read_unsigned_bin(key->q, t->rsa.q, t->rsa.q_l), t->name);",
          "31:     DOX(mp_read_unsigned_bin(key->p, t->rsa.p, t->rsa.p_l), t->name);",
          "32:     key->type = PK_PRIVATE;",
          "34:     unsigned int j;",
          "35:     for (j = 0; j < sizeof(t->sig)/sizeof(t->sig[0]); ++j) {",
          "36:         rsaSig_t* s = &t->sig[j];",
          "37:         unsigned char buf[20], obuf[256];",
          "38:         unsigned long buflen = sizeof(buf), obuflen = sizeof(obuf);",
          "39:         int stat;",
          "40:         prng_descriptor[prng_idx].add_entropy(s->salt, s->salt_l, NULL);",
          "41:         DOX(hash_memory(hash_idx, s->msg, s->msg_l, buf, &buflen), s->name);",
          "42:         DOX(rsa_sign_hash(buf, buflen, obuf, &obuflen, NULL, prng_idx, hash_idx, s->salt_l, key), s->name);",
          "43:         DOX(memcmp(s->sig, obuf, s->sig_l)==0?CRYPT_OK:CRYPT_FAIL_TESTVECTOR, s->name);",
          "44:         DOX(rsa_verify_hash(obuf, obuflen, buf, buflen, hash_idx, s->salt_l, &stat, key), s->name);",
          "47:     mp_clear_multi(key->d,  key->e, key->N, key->dQ, key->dP, key->qP, key->p, key->q, NULL);",
          "50:   return 0;",
          "51: }",
          "53: #else",
          "55: int pkcs_1_pss_test(void)",
          "56: {",
          "57:    fprintf(stderr, \"NOP\");",
          "58:    return 0;",
          "59: }",
          "61: #endif",
          "",
          "---------------"
        ],
        "testprof/tomcrypt_test.h||testprof/tomcrypt_test.h": [
          "File: testprof/tomcrypt_test.h -> testprof/tomcrypt_test.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: int modes_test(void);",
          "52: int mac_test(void);",
          "53: int pkcs_1_test(void);",
          "54: int store_test(void);",
          "55: int rsa_test(void);",
          "56: int dh_test(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54: int pkcs_1_pss_test(void);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d51715db728d99954219cc42b013db6e48db65c0",
      "candidate_info": {
        "commit_hash": "d51715db728d99954219cc42b013db6e48db65c0",
        "repo": "libtom/libtomcrypt",
        "commit_url": "https://github.com/libtom/libtomcrypt/commit/d51715db728d99954219cc42b013db6e48db65c0",
        "files": [
          "src/pk/pkcs1/pkcs_1_v1_5_decode.c"
        ],
        "message": "pkcs#1 v1.5 decode: fix missing check of PS length in EMSA mode",
        "before_after_code_files": [
          "src/pk/pkcs1/pkcs_1_v1_5_decode.c||src/pk/pkcs1/pkcs_1_v1_5_decode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libtom/libtomcrypt/pull/48"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/pk/pkcs1/pkcs_1_v1_5_decode.c||src/pk/pkcs1/pkcs_1_v1_5_decode.c": [
          "File: src/pk/pkcs1/pkcs_1_v1_5_decode.c -> src/pk/pkcs1/pkcs_1_v1_5_decode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:     }",
          "66:     ps_len = i++ - 2;",
          "72:       result = CRYPT_INVALID_PACKET;",
          "73:       goto bail;",
          "",
          "[Removed Lines]",
          "68:     if ((i >= modulus_len) || (ps_len < 8)) {",
          "",
          "[Added Lines]",
          "68:     if (i >= modulus_len) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87:     ps_len = i - 2;",
          "88:   }",
          "90:   if (*outlen < (msglen - (2 + ps_len + 1))) {",
          "92:     result = CRYPT_BUFFER_OVERFLOW;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89:   if (ps_len < 8)",
          "90:   {",
          "93:     result = CRYPT_INVALID_PACKET;",
          "94:     goto bail;",
          "95:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f86d36c676665993b207639ef66db7d8dbd11c66",
      "candidate_info": {
        "commit_hash": "f86d36c676665993b207639ef66db7d8dbd11c66",
        "repo": "libtom/libtomcrypt",
        "commit_url": "https://github.com/libtom/libtomcrypt/commit/f86d36c676665993b207639ef66db7d8dbd11c66",
        "files": [
          "testprof/rsa_test.c"
        ],
        "message": "rsa_test: improve a bit",
        "before_after_code_files": [
          "testprof/rsa_test.c||testprof/rsa_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libtom/libtomcrypt/pull/48"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "testprof/rsa_test.c||testprof/rsa_test.c": [
          "File: testprof/rsa_test.c -> testprof/rsa_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:    return 0;",
          "101: }",
          "103: int rsa_test(void)",
          "104: {",
          "105:    unsigned char in[1024], out[1024], tmp[1024];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "103: static void _rsa_testPrint(const char* what, const unsigned char* p, const unsigned long l)",
          "104: {",
          "105:   unsigned long x;",
          "106:   fprintf(stderr, \"%s contents: \\n\", what);",
          "107:   for (x = 0; x < l; ) {",
          "108:       fprintf(stderr, \"%02x \", p[x]);",
          "109:       if (!(++x % 16)) {",
          "110:          fprintf(stderr, \"\\n\");",
          "111:       }",
          "112:   }",
          "113:   fprintf(stderr, \"\\n\");",
          "114: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "186:          return 1;",
          "187:       }",
          "188:       if (len2 != rsa_msgsize || memcmp(tmp, in, rsa_msgsize)) {",
          "190:          fprintf(stderr, \"\\nrsa_decrypt_key mismatch, len %lu (second decrypt)\\n\", len2);",
          "207:          return 1;",
          "208:       }",
          "209:    }",
          "",
          "[Removed Lines]",
          "189:          unsigned long x;",
          "191:          fprintf(stderr, \"Original contents: \\n\");",
          "192:          for (x = 0; x < rsa_msgsize; ) {",
          "193:              fprintf(stderr, \"%02x \", in[x]);",
          "194:              if (!(++x % 16)) {",
          "195:                 fprintf(stderr, \"\\n\");",
          "196:              }",
          "197:          }",
          "198:          fprintf(stderr, \"\\n\");",
          "199:          fprintf(stderr, \"Output contents: \\n\");",
          "200:          for (x = 0; x < rsa_msgsize; ) {",
          "201:              fprintf(stderr, \"%02x \", out[x]);",
          "202:              if (!(++x % 16)) {",
          "203:                 fprintf(stderr, \"\\n\");",
          "204:              }",
          "205:          }",
          "206:          fprintf(stderr, \"\\n\");",
          "",
          "[Added Lines]",
          "203:          _rsa_testPrint(\"Original\", in, rsa_msgsize);",
          "204:          _rsa_testPrint(\"Output\", tmp, len2);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "232:       }",
          "233:       if (len2 != rsa_msgsize || memcmp(tmp, in, rsa_msgsize)) {",
          "234:          fprintf(stderr, \"rsa_decrypt_key mismatch len %lu\", len2);",
          "235:          return 1;",
          "236:       }",
          "237:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "233:          _rsa_testPrint(\"Original\", in, rsa_msgsize);",
          "234:          _rsa_testPrint(\"Output\", tmp, len2);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "250:          fprintf(stderr, \"rsa_decrypt_key_ex failed, %d, %d\", stat, stat2);",
          "251:          return 1;",
          "252:       }",
          "254:          fprintf(stderr, \"rsa_decrypt_key_ex mismatch len %lu\", len2);",
          "255:          return 1;",
          "256:       }",
          "257:    }",
          "",
          "[Removed Lines]",
          "253:       if (len2 != rsa_msgsize || memcmp(tmp, in, rsa_msgsize)) {",
          "",
          "[Added Lines]",
          "253:       if (len2 != rsa_msgsize) {",
          "257:       if (memcmp(tmp, in, rsa_msgsize)) {",
          "258:          fprintf(stderr, \"rsa_decrypt_key_ex mismatch data\");",
          "259:          _rsa_testPrint(\"Original\", in, rsa_msgsize);",
          "260:          _rsa_testPrint(\"Output\", tmp, rsa_msgsize);",
          "261:          return 1;",
          "262:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "380:      printf(\"\\nBefore:\");",
          "381:      for (cnt = 0; cnt < len3; ++cnt) {",
          "382:        if (cnt%32 == 0)",
          "384:        printf(\" %02x\", p3[cnt]);",
          "385:      }",
          "386: #endif",
          "",
          "[Removed Lines]",
          "383:          printf(\"\\n%3d:\", cnt);",
          "",
          "[Added Lines]",
          "391:          printf(\"\\n%3lu:\", cnt);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "397:      memmove(&p3[cnt+i], &p3[cnt2], len3-cnt2);",
          "399:      for (cnt = cnt + len3-cnt2+i; cnt < len; ++cnt) {",
          "403:      }",
          "404: #if 0",
          "405:      printf(\"\\nAfter:\");",
          "406:      for (cnt = 0; cnt < len3; ++cnt) {",
          "407:        if (cnt%32 == 0)",
          "409:        printf(\" %02x\", p3[cnt]);",
          "410:      }",
          "411:      printf(\"\\n\");",
          "",
          "[Removed Lines]",
          "400:         do {",
          "401:             p3[cnt] = (unsigned char)rand();",
          "402:         } while (p3[cnt] == 0);",
          "408:          printf(\"\\n%3d:\", cnt);",
          "",
          "[Added Lines]",
          "408:         p3[cnt] = 0;",
          "414:          printf(\"\\n%3lu:\", cnt);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8ce125f8a8893959021186d99c4bf6d8bba81187",
      "candidate_info": {
        "commit_hash": "8ce125f8a8893959021186d99c4bf6d8bba81187",
        "repo": "libtom/libtomcrypt",
        "commit_url": "https://github.com/libtom/libtomcrypt/commit/8ce125f8a8893959021186d99c4bf6d8bba81187",
        "files": [
          "src/pk/rsa/rsa_exptmod.c"
        ],
        "message": "mp_rand() assumes the number of digits and not the bitsize as parameter",
        "before_after_code_files": [
          "src/pk/rsa/rsa_exptmod.c||src/pk/rsa/rsa_exptmod.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libtom/libtomcrypt/pull/48"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/pk/rsa/rsa_exptmod.c||src/pk/rsa/rsa_exptmod.c": [
          "File: src/pk/rsa/rsa_exptmod.c -> src/pk/rsa/rsa_exptmod.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:    if (which == PK_PRIVATE) {",
          "77:       #ifdef LTC_RSA_BLINDING",
          "80:       if (err != CRYPT_OK) {",
          "81:              goto error;",
          "82:       }",
          "",
          "[Removed Lines]",
          "79:       err = mp_rand(rnd, mp_count_bits(key->N));",
          "",
          "[Added Lines]",
          "79:       err = mp_rand(rnd, mp_get_digit_count(key->N));",
          "",
          "---------------"
        ]
      }
    }
  ]
}