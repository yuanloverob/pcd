{
  "cve_id": "CVE-2019-19807",
  "cve_desc": "In the Linux kernel before 5.3.11, sound/core/timer.c has a use-after-free caused by erroneous code refactoring, aka CID-e7af6307a8a5. This is related to snd_timer_open and snd_timer_close_locked. The timeri variable was originally intended to be for a newly created timer instance, but was used for a different purpose after refactoring.",
  "repo": "torvalds/linux",
  "patch_hash": "e7af6307a8a54f0b873960b32b6a644f2d0fbd97",
  "patch_info": {
    "commit_hash": "e7af6307a8a54f0b873960b32b6a644f2d0fbd97",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/e7af6307a8a54f0b873960b32b6a644f2d0fbd97",
    "files": [
      "sound/core/timer.c"
    ],
    "message": "ALSA: timer: Fix incorrectly assigned timer instance\n\nThe clean up commit 41672c0c24a6 (\"ALSA: timer: Simplify error path in\nsnd_timer_open()\") unified the error handling code paths with the\nstandard goto, but it introduced a subtle bug: the timer instance is\nstored in snd_timer_open() incorrectly even if it returns an error.\nThis may eventually lead to UAF, as spotted by fuzzer.\n\nThe culprit is the snd_timer_open() code checks the\nSNDRV_TIMER_IFLG_EXCLUSIVE flag with the common variable timeri.\nThis variable is supposed to be the newly created instance, but we\n(ab-)used it for a temporary check before the actual creation of a\ntimer instance.  After that point, there is another check for the max\nnumber of instances, and it bails out if over the threshold.  Before\nthe refactoring above, it worked fine because the code returned\ndirectly from that point.  After the refactoring, however, it jumps to\nthe unified error path that stores the timeri variable in return --\neven if it returns an error.  Unfortunately this stored value is kept\nin the caller side (snd_timer_user_tselect()) in tu->timeri.  This\ncauses inconsistency later, as if the timer was successfully\nassigned.\n\nIn this patch, we fix it by not re-using timeri variable but a\ntemporary variable for testing the exclusive connection, so timeri\nremains NULL at that point.\n\nFixes: 41672c0c24a6 (\"ALSA: timer: Simplify error path in snd_timer_open()\")\nReported-and-tested-by: Tristan Madani <tristmd@gmail.com>\nCc: <stable@vger.kernel.org>\nLink: https://lore.kernel.org/r/20191106165547.23518-1-tiwai@suse.de\nSigned-off-by: Takashi Iwai <tiwai@suse.de>",
    "before_after_code_files": [
      "sound/core/timer.c||sound/core/timer.c"
    ]
  },
  "patch_diff": {
    "sound/core/timer.c||sound/core/timer.c": [
      "File: sound/core/timer.c -> sound/core/timer.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "284:   goto unlock;",
      "285:  }",
      "286:  if (!list_empty(&timer->open_list_head)) {",
      "288:         struct snd_timer_instance, open_list);",
      "290:    err = -EBUSY;",
      "292:    goto unlock;",
      "293:   }",
      "294:  }",
      "",
      "[Removed Lines]",
      "287:   timeri = list_entry(timer->open_list_head.next,",
      "289:   if (timeri->flags & SNDRV_TIMER_IFLG_EXCLUSIVE) {",
      "291:    timeri = NULL;",
      "",
      "[Added Lines]",
      "287:   struct snd_timer_instance *t =",
      "288:    list_entry(timer->open_list_head.next,",
      "290:   if (t->flags & SNDRV_TIMER_IFLG_EXCLUSIVE) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "41672c0c24a62699d20aab53b98d843b16483053",
      "candidate_info": {
        "commit_hash": "41672c0c24a62699d20aab53b98d843b16483053",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/41672c0c24a62699d20aab53b98d843b16483053",
        "files": [
          "sound/core/timer.c"
        ],
        "message": "ALSA: timer: Simplify error path in snd_timer_open()\n\nJust a minor refactoring to use the standard goto for error paths in\nsnd_timer_open() instead of open code.  The first mutex_lock() is\nmoved to the beginning of the function to make the code clearer.\n\nSigned-off-by: Takashi Iwai <tiwai@suse.de>",
        "before_after_code_files": [
          "sound/core/timer.c||sound/core/timer.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "sound/core/timer.c||sound/core/timer.c"
          ],
          "candidate": [
            "sound/core/timer.c||sound/core/timer.c"
          ]
        }
      },
      "candidate_diff": {
        "sound/core/timer.c||sound/core/timer.c": [
          "File: sound/core/timer.c -> sound/core/timer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "255:  struct snd_timer_instance *timeri = NULL;",
          "256:  int err;",
          "258:  if (tid->dev_class == SNDRV_TIMER_CLASS_SLAVE) {",
          "260:   if (tid->dev_sclass <= SNDRV_TIMER_SCLASS_NONE ||",
          "261:       tid->dev_sclass > SNDRV_TIMER_SCLASS_OSS_SEQUENCER) {",
          "262:    pr_debug(\"ALSA: timer: invalid slave class %i\\n\",",
          "263:      tid->dev_sclass);",
          "265:   }",
          "267:   timeri = snd_timer_instance_new(owner, NULL);",
          "268:   if (!timeri) {",
          "271:   }",
          "272:   timeri->slave_class = tid->dev_sclass;",
          "273:   timeri->slave_id = tid->device;",
          "",
          "[Removed Lines]",
          "264:    return -EINVAL;",
          "266:   mutex_lock(&register_mutex);",
          "269:    mutex_unlock(&register_mutex);",
          "270:    return -ENOMEM;",
          "",
          "[Added Lines]",
          "258:  mutex_lock(&register_mutex);",
          "265:    err = -EINVAL;",
          "266:    goto unlock;",
          "270:    err = -ENOMEM;",
          "271:    goto unlock;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "278:    snd_timer_close_locked(timeri);",
          "279:    timeri = NULL;",
          "280:   }",
          "284:  }",
          "288:  timer = snd_timer_find(tid);",
          "289: #ifdef CONFIG_MODULES",
          "290:  if (!timer) {",
          "",
          "[Removed Lines]",
          "281:   mutex_unlock(&register_mutex);",
          "283:   return err;",
          "287:  mutex_lock(&register_mutex);",
          "",
          "[Added Lines]",
          "282:   goto unlock;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "295:  }",
          "296: #endif",
          "297:  if (!timer) {",
          "300:  }",
          "301:  if (!list_empty(&timer->open_list_head)) {",
          "302:   timeri = list_entry(timer->open_list_head.next,",
          "303:         struct snd_timer_instance, open_list);",
          "304:   if (timeri->flags & SNDRV_TIMER_IFLG_EXCLUSIVE) {",
          "307:   }",
          "308:  }",
          "309:  if (timer->num_instances >= timer->max_instances) {",
          "312:  }",
          "313:  timeri = snd_timer_instance_new(owner, timer);",
          "314:  if (!timeri) {",
          "317:  }",
          "319:  if (timer->card)",
          "",
          "[Removed Lines]",
          "298:   mutex_unlock(&register_mutex);",
          "299:   return -ENODEV;",
          "305:    mutex_unlock(&register_mutex);",
          "306:    return -EBUSY;",
          "310:   mutex_unlock(&register_mutex);",
          "311:   return -EBUSY;",
          "315:   mutex_unlock(&register_mutex);",
          "316:   return -ENOMEM;",
          "",
          "[Added Lines]",
          "296:   err = -ENODEV;",
          "297:   goto unlock;",
          "303:    err = -EBUSY;",
          "304:    timeri = NULL;",
          "305:    goto unlock;",
          "309:   err = -EBUSY;",
          "310:   goto unlock;",
          "314:   err = -ENOMEM;",
          "315:   goto unlock;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "322:  timeri->slave_id = slave_id;",
          "324:  if (list_empty(&timer->open_list_head) && timer->hw.open) {",
          "326:   if (err) {",
          "327:    kfree(timeri->owner);",
          "328:    kfree(timeri);",
          "330:    if (timer->card)",
          "331:     put_device(&timer->card->card_dev);",
          "332:    module_put(timer->module);",
          "335:   }",
          "336:  }",
          "",
          "[Removed Lines]",
          "325:   int err = timer->hw.open(timer);",
          "333:    mutex_unlock(&register_mutex);",
          "334:    return err;",
          "",
          "[Added Lines]",
          "324:   err = timer->hw.open(timer);",
          "328:    timeri = NULL;",
          "333:    goto unlock;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "342:   snd_timer_close_locked(timeri);",
          "343:   timeri = NULL;",
          "344:  }",
          "345:  mutex_unlock(&register_mutex);",
          "347:  return err;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "345:  unlock:",
          "",
          "---------------"
        ]
      }
    }
  ]
}