{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b1dd3db537e98720fc840422f066e6a121983565",
      "candidate_info": {
        "commit_hash": "b1dd3db537e98720fc840422f066e6a121983565",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b1dd3db537e98720fc840422f066e6a121983565",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/cg_anno.tcl"
        ],
        "message": "Tweak the tool/cg_anno.tcl script so that it can run on systems without /usr/bin/tclsh.\n\nFossilOrigin-Name: a026189aa46114d2de4f1da5882aeef9cf446a5aa6ea068d51c27df0d7302ddb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/cg_anno.tcl||tool/cg_anno.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cbb7e60272cda518fa1bd8d3e3cd02e031b657fef92a9d4d7ed8c2bfb97be7c8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/cg_anno.tcl||tool/cg_anno.tcl": [
          "File: tool/cg_anno.tcl -> tool/cg_anno.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #",
          "3: # A wrapper around cg_annotate that sets appropriate command-line options",
          "4: # and rearranges the output so that annotated files occur in a consistent",
          "",
          "[Removed Lines]",
          "1: #!/usr/bin/tclsh",
          "",
          "[Added Lines]",
          "1: #!/bin/sh",
          "2: # \\",
          "3: exec tclsh \"$0\" ${1+\"$@\"}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "92a2824cc61df5683337d61b5a9d190935039326",
      "candidate_info": {
        "commit_hash": "92a2824cc61df5683337d61b5a9d190935039326",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/92a2824cc61df5683337d61b5a9d190935039326",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/build.c",
          "src/expr.c",
          "test/collate1.test"
        ],
        "message": "An improved fix for the dbsqlfuzz-discovered ALWAYS() failure following OOM in sqlite3ExprCollSeq().  This time with a test case (engineered by Dan).\n\nFossilOrigin-Name: 907f7965b335d8d5441f2e386bb190d1f93ffcd45ca98d2d1c621dede491fc5e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/build.c||src/build.c",
          "src/expr.c||src/expr.c",
          "test/collate1.test||test/collate1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 75775c5ab44e497cb19be10397229637f1374f05c3244e8f92d6c54fcea94f5f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1416:   int i;",
          "1417:   RenameCtx *p = pWalker->u.pRename;",
          "1418:   SrcList *pSrc = pSelect->pSrc;",
          "1420:     return WRC_Abort;",
          "1421:   }",
          "1422:   for(i=0; i<pSrc->nSrc; i++){",
          "",
          "[Removed Lines]",
          "1419:   if( NEVER(pSrc==0) ){",
          "",
          "[Added Lines]",
          "1419:   if( pSrc==0 ){",
          "1420:     assert( pWalker->pParse->db->mallocFailed );",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4143: void sqlite3SrcListAssignCursors(Parse *pParse, SrcList *pList){",
          "4144:   int i;",
          "4145:   struct SrcList_item *pItem;",
          "4147:     for(i=0, pItem=pList->a; i<pList->nSrc; i++, pItem++){",
          "4148:       if( pItem->iCursor>=0 ) break;",
          "4149:       pItem->iCursor = pParse->nTab++;",
          "",
          "[Removed Lines]",
          "4146:   if( ALWAYS(pList) ){",
          "",
          "[Added Lines]",
          "4146:   assert(pList || pParse->db->mallocFailed );",
          "4147:   if( pList ){",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "190:           int i;",
          "191:           for(i=0; ALWAYS(i<p->x.pList->nExpr); i++){",
          "192:             if( ExprHasProperty(p->x.pList->a[i].pExpr, EP_Collate) ){",
          "",
          "[Removed Lines]",
          "189:         if( p->x.pList!=0 && ALWAYS(!ExprHasProperty(p, EP_xIsSelect)) ){",
          "",
          "[Added Lines]",
          "189:         if( p->x.pList!=0",
          "190:          && !db->mallocFailed",
          "191:          && ALWAYS(!ExprHasProperty(p, EP_xIsSelect))",
          "192:         ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1530:     pNext = pNew;",
          "1531:   }",
          "1537:   return pRet;",
          "1538: }",
          "1539: #else",
          "",
          "[Removed Lines]",
          "1533:   if( db->mallocFailed ){",
          "1534:     sqlite3SelectDelete(db, pRet);",
          "1535:     pRet = 0;",
          "1536:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/collate1.test||test/collate1.test": [
          "File: test/collate1.test -> test/collate1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "417:   SELECT * FROM t0 WHERE c1 = 1;",
          "418: } {{ } 1}",
          "420: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "420: # 2019-10-09",
          "421: # ALWAYS() macro fails following OOM",
          "422: # Problem detected by dbsqlfuzz.",
          "423: #",
          "424: do_execsql_test 9.0 {",
          "425:   CREATE TABLE t1(a, b);",
          "426:   CREATE TABLE t2(c, d);",
          "427: }",
          "429: do_faultsim_test 9.1 -faults oom* -body {",
          "430:   execsql {",
          "431:     SELECT * FROM (",
          "432:         SELECT b COLLATE nocase IN (SELECT c FROM t2) FROM t1",
          "433:     );",
          "434:   }",
          "435: } -test {",
          "436:   faultsim_test_result {0 {}}",
          "437: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "065f3bf4f2b3dbef086a32a520e4f15e47c164e4",
      "candidate_info": {
        "commit_hash": "065f3bf4f2b3dbef086a32a520e4f15e47c164e4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/065f3bf4f2b3dbef086a32a520e4f15e47c164e4",
        "files": [
          "ext/fts3/fts3_term.c",
          "ext/fts3/unicode/mkunicode.tcl",
          "ext/fts5/fts5_aux.c",
          "ext/fts5/fts5_buffer.c",
          "ext/fts5/fts5_config.c",
          "ext/fts5/fts5_expr.c",
          "ext/fts5/fts5_hash.c",
          "ext/fts5/fts5_main.c",
          "ext/fts5/fts5_storage.c",
          "ext/fts5/fts5_unicode2.c",
          "ext/misc/amatch.c",
          "ext/misc/closure.c",
          "ext/misc/fileio.c",
          "ext/misc/fuzzer.c",
          "ext/misc/unionvtab.c",
          "ext/session/changeset.c",
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzcheck.c"
        ],
        "message": "Fix various harmless compiler warnings seen with MSVC.\n\nFossilOrigin-Name: 1c0fe5b5763fe5cbace9773dcdab742e126d0bd035ab13d61f9d134afa0afc0c",
        "before_after_code_files": [
          "ext/fts3/fts3_term.c||ext/fts3/fts3_term.c",
          "ext/fts3/unicode/mkunicode.tcl||ext/fts3/unicode/mkunicode.tcl",
          "ext/fts5/fts5_aux.c||ext/fts5/fts5_aux.c",
          "ext/fts5/fts5_buffer.c||ext/fts5/fts5_buffer.c",
          "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c",
          "ext/fts5/fts5_expr.c||ext/fts5/fts5_expr.c",
          "ext/fts5/fts5_hash.c||ext/fts5/fts5_hash.c",
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c",
          "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
          "ext/misc/amatch.c||ext/misc/amatch.c",
          "ext/misc/closure.c||ext/misc/closure.c",
          "ext/misc/fileio.c||ext/misc/fileio.c",
          "ext/misc/fuzzer.c||ext/misc/fuzzer.c",
          "ext/misc/unionvtab.c||ext/misc/unionvtab.c",
          "ext/session/changeset.c||ext/session/changeset.c",
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_term.c||ext/fts3/fts3_term.c": [
          "File: ext/fts3/fts3_term.c -> ext/fts3/fts3_term.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:   nByte = sizeof(Fts3termTable) + sizeof(Fts3Table) + nDb + nFts3 + 2;",
          "99:   p = (Fts3termTable *)sqlite3_malloc64(nByte);",
          "100:   if( !p ) return SQLITE_NOMEM;",
          "103:   p->pFts3Tab = (Fts3Table *)&p[1];",
          "104:   p->pFts3Tab->zDb = (char *)&p->pFts3Tab[1];",
          "",
          "[Removed Lines]",
          "101:   memset(p, 0, nByte);",
          "",
          "[Added Lines]",
          "101:   memset(p, 0, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/fts3/unicode/mkunicode.tcl||ext/fts3/unicode/mkunicode.tcl": [
          "File: ext/fts3/unicode/mkunicode.tcl -> ext/fts3/unicode/mkunicode.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "738:         int bToken = aArray[ aFts5UnicodeData[iTbl] & 0x1F ];",
          "739:         int n = (aFts5UnicodeData[iTbl] >> 5) + i;",
          "740:         for(; i<128 && i<n; i++){",
          "742:         }",
          "743:         iTbl++;",
          "744:       }",
          "",
          "[Removed Lines]",
          "741:           aAscii[i] = bToken;",
          "",
          "[Added Lines]",
          "741:           aAscii[i] = (u8)bToken;",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_aux.c||ext/fts5/fts5_aux.c": [
          "File: ext/fts5/fts5_aux.c -> ext/fts5/fts5_aux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "581:     if( p==0 ){",
          "582:       rc = SQLITE_NOMEM;",
          "583:     }else{",
          "585:       p->nPhrase = nPhrase;",
          "586:       p->aIDF = (double*)&p[1];",
          "587:       p->aFreq = &p->aIDF[nPhrase];",
          "",
          "[Removed Lines]",
          "584:       memset(p, 0, nByte);",
          "",
          "[Added Lines]",
          "584:       memset(p, 0, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_buffer.c||ext/fts5/fts5_buffer.c": [
          "File: ext/fts5/fts5_buffer.c -> ext/fts5/fts5_buffer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:       return 1;",
          "29:     }else{",
          "31:       pBuf->p = pNew;",
          "32:     }",
          "33:   }",
          "",
          "[Removed Lines]",
          "30:       pBuf->nSpace = nNew;",
          "",
          "[Added Lines]",
          "30:       pBuf->nSpace = (int)nNew;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "251:     if( pRet==0 ){",
          "252:       if( nByte>0 ) *pRc = SQLITE_NOMEM;",
          "253:     }else{",
          "255:     }",
          "256:   }",
          "257:   return pRet;",
          "",
          "[Removed Lines]",
          "254:       memset(pRet, 0, nByte);",
          "",
          "[Added Lines]",
          "254:       memset(pRet, 0, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c": [
          "File: ext/fts5/fts5_config.c -> ext/fts5/fts5_config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "325:           rc = SQLITE_ERROR;",
          "326:         }else{",
          "327:           rc = sqlite3Fts5GetTokenizer(pGlobal,",
          "329:               pzErr",
          "330:           );",
          "331:         }",
          "",
          "[Removed Lines]",
          "328:               (const char**)azArg, nArg, &pConfig->pTok, &pConfig->pTokApi,",
          "",
          "[Added Lines]",
          "328:               (const char**)azArg, (int)nArg, &pConfig->pTok, &pConfig->pTokApi,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "435:   if( zOut==0 ){",
          "437:   }else{",
          "439:     if( fts5_isopenquote(zOut[0]) ){",
          "440:       int ii = fts5Dequote(zOut);",
          "441:       zRet = &zIn[ii];",
          "",
          "[Removed Lines]",
          "438:     memcpy(zOut, zIn, nIn+1);",
          "",
          "[Added Lines]",
          "438:     memcpy(zOut, zIn, (size_t)(nIn+1));",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_expr.c||ext/fts5/fts5_expr.c": [
          "File: ext/fts5/fts5_expr.c -> ext/fts5/fts5_expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1487:       if( pRet==0 ){",
          "1488:         pParse->rc = SQLITE_NOMEM;",
          "1489:       }else{",
          "1491:       }",
          "1492:     }else if( (pNear->nPhrase % SZALLOC)==0 ){",
          "1493:       int nNew = pNear->nPhrase + SZALLOC;",
          "",
          "[Removed Lines]",
          "1490:         memset(pRet, 0, nByte);",
          "",
          "[Added Lines]",
          "1490:         memset(pRet, 0, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1563:     if( pSyn==0 ){",
          "1564:       rc = SQLITE_NOMEM;",
          "1565:     }else{",
          "1567:       pSyn->zTerm = ((char*)pSyn) + sizeof(Fts5ExprTerm) + sizeof(Fts5Buffer);",
          "1568:       memcpy(pSyn->zTerm, pToken, nToken);",
          "1569:       pSyn->pSynonym = pPhrase->aTerm[pPhrase->nTerm-1].pSynonym;",
          "",
          "[Removed Lines]",
          "1566:       memset(pSyn, 0, nByte);",
          "",
          "[Added Lines]",
          "1566:       memset(pSyn, 0, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1723:       nByte = sizeof(Fts5Colset) + (pColsetOrig->nCol-1) * sizeof(int);",
          "1724:       pColset = (Fts5Colset*)sqlite3Fts5MallocZero(&rc, nByte);",
          "1725:       if( pColset ){",
          "1727:       }",
          "1728:       pNew->pRoot->pNear->pColset = pColset;",
          "1729:     }",
          "",
          "[Removed Lines]",
          "1726:         memcpy(pColset, pColsetOrig, nByte);",
          "",
          "[Added Lines]",
          "1726:         memcpy(pColset, pColsetOrig, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1940:     sqlite3_int64 nByte = sizeof(Fts5Colset) + (pOrig->nCol-1) * sizeof(int);",
          "1941:     pRet = (Fts5Colset*)sqlite3Fts5MallocZero(pRc, nByte);",
          "1942:     if( pRet ){",
          "1944:     }",
          "1945:   }else{",
          "1946:     pRet = 0;",
          "",
          "[Removed Lines]",
          "1943:       memcpy(pRet, pOrig, nByte);",
          "",
          "[Added Lines]",
          "1943:       memcpy(pRet, pOrig, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_hash.c||ext/fts5/fts5_hash.c": [
          "File: ext/fts5/fts5_hash.c -> ext/fts5/fts5_hash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:       rc = SQLITE_NOMEM;",
          "105:     }else{",
          "107:     }",
          "108:   }",
          "109:   return rc;",
          "",
          "[Removed Lines]",
          "106:       memset(pNew->aSlot, 0, nByte);",
          "",
          "[Added Lines]",
          "106:       memset(pNew->aSlot, 0, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "284:     p = (Fts5HashEntry*)sqlite3_malloc64(nByte);",
          "285:     if( !p ) return SQLITE_NOMEM;",
          "286:     memset(p, 0, sizeof(Fts5HashEntry));",
          "288:     zKey = fts5EntryKey(p);",
          "289:     zKey[0] = bByte;",
          "290:     memcpy(&zKey[1], pToken, nToken);",
          "",
          "[Removed Lines]",
          "287:     p->nAlloc = nByte;",
          "",
          "[Added Lines]",
          "287:     p->nAlloc = (int)nByte;",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "633:     pCsr = (Fts5Cursor*)sqlite3_malloc64(nByte);",
          "634:     if( pCsr ){",
          "635:       Fts5Global *pGlobal = pTab->pGlobal;",
          "637:       pCsr->aColumnSize = (int*)&pCsr[1];",
          "638:       pCsr->pNext = pGlobal->pCsr;",
          "639:       pGlobal->pCsr = pCsr;",
          "",
          "[Removed Lines]",
          "636:       memset(pCsr, 0, nByte);",
          "",
          "[Added Lines]",
          "636:       memset(pCsr, 0, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "914:   nByte = sizeof(Fts5Sorter) + sizeof(int) * (nPhrase-1);",
          "915:   pSorter = (Fts5Sorter*)sqlite3_malloc64(nByte);",
          "916:   if( pSorter==0 ) return SQLITE_NOMEM;",
          "918:   pSorter->nIdx = nPhrase;",
          "",
          "[Removed Lines]",
          "917:   memset(pSorter, 0, nByte);",
          "",
          "[Added Lines]",
          "917:   memset(pSorter, 0, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c": [
          "File: ext/fts5/fts5_storage.c -> ext/fts5/fts5_storage.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "290:   if( !p ) return SQLITE_NOMEM;",
          "293:   p->aTotalSize = (i64*)&p[1];",
          "294:   p->pConfig = pConfig;",
          "295:   p->pIndex = pIndex;",
          "",
          "[Removed Lines]",
          "292:   memset(p, 0, nByte);",
          "",
          "[Added Lines]",
          "292:   memset(p, 0, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
          "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "769:     int bToken = aArray[ aFts5UnicodeData[iTbl] & 0x1F ];",
          "770:     int n = (aFts5UnicodeData[iTbl] >> 5) + i;",
          "771:     for(; i<128 && i<n; i++){",
          "773:     }",
          "774:     iTbl++;",
          "775:   }",
          "",
          "[Removed Lines]",
          "772:       aAscii[i] = bToken;",
          "",
          "[Added Lines]",
          "772:       aAscii[i] = (u8)bToken;",
          "",
          "---------------"
        ],
        "ext/misc/amatch.c||ext/misc/amatch.c": [
          "File: ext/misc/amatch.c -> ext/misc/amatch.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "749:     if( q!='[' && q!= '\\'' && q!='\"' && q!='`' ){",
          "751:     }else{",
          "",
          "[Removed Lines]",
          "750:       memcpy(zOut, zIn, nIn+1);",
          "",
          "[Added Lines]",
          "750:       memcpy(zOut, zIn, (size_t)(nIn+1));",
          "",
          "---------------"
        ],
        "ext/misc/closure.c||ext/misc/closure.c": [
          "File: ext/misc/closure.c -> ext/misc/closure.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "433:     if( q!='[' && q!= '\\'' && q!='\"' && q!='`' ){",
          "435:     }else{",
          "",
          "[Removed Lines]",
          "434:       memcpy(zOut, zIn, nIn+1);",
          "",
          "[Added Lines]",
          "434:       memcpy(zOut, zIn, (size_t)(nIn+1));",
          "",
          "---------------"
        ],
        "ext/misc/fileio.c||ext/misc/fileio.c": [
          "File: ext/misc/fileio.c -> ext/misc/fileio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:     fclose(in);",
          "159:     return;",
          "160:   }",
          "162:     sqlite3_result_blob64(ctx, pBuf, nIn, sqlite3_free);",
          "163:   }else{",
          "164:     sqlite3_result_error_code(ctx, SQLITE_IOERR);",
          "",
          "[Removed Lines]",
          "161:   if( nIn==fread(pBuf, 1, nIn, in) ){",
          "",
          "[Added Lines]",
          "161:   if( nIn==fread(pBuf, 1, (size_t)nIn, in) ){",
          "",
          "---------------"
        ],
        "ext/misc/fuzzer.c||ext/misc/fuzzer.c": [
          "File: ext/misc/fuzzer.c -> ext/misc/fuzzer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "458:     if( q!='[' && q!= '\\'' && q!='\"' && q!='`' ){",
          "460:     }else{",
          "",
          "[Removed Lines]",
          "459:       memcpy(zOut, zIn, nIn+1);",
          "",
          "[Added Lines]",
          "459:       memcpy(zOut, zIn, (size_t)(nIn+1));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "525:       memset(pNew, 0, sizeof(*pNew));",
          "526:       pNew->zClassName = (char*)&pNew[1];",
          "529:       zTab = fuzzerDequote(argv[3]);",
          "530:       if( zTab==0 ){",
          "",
          "[Removed Lines]",
          "527:       memcpy(pNew->zClassName, zModule, nModule+1);",
          "",
          "[Added Lines]",
          "527:       memcpy(pNew->zClassName, zModule, (size_t)(nModule+1));",
          "",
          "---------------"
        ],
        "ext/misc/unionvtab.c||ext/misc/unionvtab.c": [
          "File: ext/misc/unionvtab.c -> ext/misc/unionvtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "256:   if( *pRc==SQLITE_OK ){",
          "257:     pRet = sqlite3_malloc64(nByte);",
          "258:     if( pRet ){",
          "260:     }else{",
          "262:     }",
          "",
          "[Removed Lines]",
          "259:       memset(pRet, 0, nByte);",
          "",
          "[Added Lines]",
          "259:       memset(pRet, 0, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "279:     sqlite3_int64 nByte = strlen(zIn) + 1;",
          "280:     zRet = unionMalloc(pRc, nByte);",
          "281:     if( zRet ){",
          "283:     }",
          "284:   }",
          "285:   return zRet;",
          "",
          "[Removed Lines]",
          "282:       memcpy(zRet, zIn, nByte);",
          "",
          "[Added Lines]",
          "282:       memcpy(zRet, zIn, (size_t)nByte);",
          "",
          "---------------"
        ],
        "ext/session/changeset.c||ext/session/changeset.c": [
          "File: ext/session/changeset.c -> ext/session/changeset.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:   pBuf = sqlite3_malloc64( sz ? sz : 1 );",
          "56:   if( pBuf==0 ){",
          "57:     fprintf(stderr, \"cannot allocate %d to hold content of \\\"%s\\\"\\n\",",
          "59:     exit(1);",
          "60:   }",
          "61:   if( sz>0 ){",
          "64:       exit(1);",
          "65:     }",
          "66:     fclose(f);",
          "67:   }",
          "70: }",
          "",
          "[Removed Lines]",
          "58:             sz, zFilename);",
          "62:     if( fread(pBuf, sz, 1, f)!=1 ){",
          "63:       fprintf(stderr, \"cannot read all %d bytes of \\\"%s\\\"\\n\", sz, zFilename);",
          "",
          "[Added Lines]",
          "58:             (int)sz, zFilename);",
          "62:     if( fread(pBuf, (size_t)sz, 1, f)!=1 ){",
          "63:       fprintf(stderr, \"cannot read all %d bytes of \\\"%s\\\"\\n\",",
          "64:               (int)sz, zFilename);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 55be6d0a9fa8a64b9c9c5ed51a2b9144304f7f0870a13b92d5864ac4d54491b6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2015:   assert( pPage->nCell>0",
          "2017:        || CORRUPT_DB );",
          "2019:   pPage->isInit = 1;",
          "",
          "[Removed Lines]",
          "2016:        || get2byteNotZero(&data[5])==pBt->usableSize",
          "",
          "[Added Lines]",
          "2016:        || get2byteNotZero(&data[5])==(int)pBt->usableSize",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "531:     fprintf(stderr, \"Out of memory!\\n\");",
          "532:     exit(1);",
          "533:   }",
          "535:   for(i=k=0; i<n; i++){",
          "536:     unsigned char c = (unsigned char)zIn[i];",
          "537:     if( isxdigit(c) ){",
          "",
          "[Removed Lines]",
          "534:   memset(a, 0, nAlloc);",
          "",
          "[Added Lines]",
          "534:   memset(a, 0, (size_t)nAlloc);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "568:             exit(1);",
          "569:           }",
          "570:           assert( newSize > nAlloc );",
          "572:           nAlloc = newSize;",
          "573:         }",
          "574:         if( j>=(unsigned)mx ){",
          "",
          "[Removed Lines]",
          "571:           memset(a+nAlloc, 0, newSize - nAlloc);",
          "",
          "[Added Lines]",
          "571:           memset(a+nAlloc, 0, (size_t)(newSize - nAlloc));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b8293a5bee4d064b29760da72c2aa9c17485d1a1",
      "candidate_info": {
        "commit_hash": "b8293a5bee4d064b29760da72c2aa9c17485d1a1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b8293a5bee4d064b29760da72c2aa9c17485d1a1",
        "files": [
          "ext/rbu/rbuexpr.test",
          "ext/rbu/sqlite3rbu.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Update RBU so that it supports indexes on expressions.\n\nFossilOrigin-Name: 6bfa44da226fd758a2ee924d1e8e3a742b0635b6d3f922a4a7919cb14b2418e6",
        "before_after_code_files": [
          "ext/rbu/rbuexpr.test||ext/rbu/rbuexpr.test",
          "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rbu/rbuexpr.test||ext/rbu/rbuexpr.test": [
          "File: ext/rbu/rbuexpr.test -> ext/rbu/rbuexpr.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2014 August 30",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "13: source [file join [file dirname [info script]] rbu_common.tcl]",
          "14: set ::testprefix rbuexpr",
          "16: db close",
          "17: sqlite3_shutdown",
          "18: sqlite3_config_uri 1",
          "20: sqlite3 db test.db",
          "22: do_execsql_test 1.0 {",
          "23:   CREATE TABLE t1(a, b, c PRIMARY KEY);",
          "24:   CREATE INDEX i1 ON t1(a, null, b+1);",
          "25:   CREATE INDEX i2 ON t1(a+1, b+1, c+1);",
          "27:   INSERT INTO t1 VALUES(1, 2, 3);",
          "28:   INSERT INTO t1 VALUES(4, 5, 6);",
          "29:   INSERT INTO t1 VALUES(7, 8, 9);",
          "30:   INSERT INTO t1 VALUES(10, 11, 12);",
          "32:   PRAGMA integrity_check;",
          "33: } {ok}",
          "35: forcedelete rbu.db",
          "36: sqlite3 db2 rbu.db",
          "37: do_execsql_test -db db2 1.1 {",
          "38:   CREATE TABLE data_t1(a, b, c, rbu_control);",
          "39:   INSERT INTO data_t1 VALUES(13, 14, 15, 0);",
          "40:   INSERT INTO data_t1 VALUES(NULL, NULL, 6, 1);",
          "41:   INSERT INTO data_t1 VALUES(NULL, 'three', 3, '.x.');",
          "42: }",
          "43: db2 close",
          "44: db close",
          "46: do_test 1.2 {",
          "47:   run_rbu test.db rbu.db",
          "48: } {SQLITE_DONE}",
          "50: sqlite3 db test.db",
          "52: do_execsql_test 1.3 {",
          "53:   SELECT * FROM t1 WHERE a=4;",
          "54: }",
          "56: integrity_check 1.4",
          "58: #-------------------------------------------------------------------------",
          "59: #",
          "60: reset_db",
          "61: do_execsql_test 2.0 {",
          "62:   CREATE TABLE t1(c1, c2, c3, i INTEGER PRIMARY KEY);",
          "63:   INSERT INTO t1 VALUES('one', 'one', 'one', 1);",
          "64:   INSERT INTO t1 VALUES('two', 'two', 'two', 2);",
          "65:   INSERT INTO t1 VALUES('three', 'three', 'three', 3);",
          "66:   INSERT INTO t1 VALUES('four', 'four', 'four', 4);",
          "68:   CREATE INDEX i1 ON t1( substr(c1, 1, 2) );",
          "69:   CREATE INDEX i2 ON t1( c1 || c2 || c3 );",
          "70:   CREATE INDEX i3 ON t1( length(c1) + length(c2) - 1, c3||i );",
          "71: }",
          "73: forcedelete rbu.db",
          "74: sqlite3 db2 rbu.db",
          "75: do_execsql_test -db db2 2.1 {",
          "76:   CREATE TABLE data_t1(c1, c2, c3, i, rbu_control);",
          "77:   INSERT INTO data_t1 VALUES(NULL, NULL, NULL, 2, 1);",
          "78:   INSERT INTO data_t1 VALUES('thirty', NULL, NULL, 3, 'xx..');",
          "79:   INSERT INTO data_t1 VALUES('five', 'five', 'five', 5, 0);",
          "80: }",
          "81: db2 close",
          "83: db close",
          "85: do_test 2.2 {",
          "86:   run_rbu test.db rbu.db",
          "87: } {SQLITE_DONE}",
          "89: sqlite3 db test.db",
          "90: integrity_check 2.3",
          "92: finish_test",
          "",
          "---------------"
        ],
        "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c": [
          "File: ext/rbu/sqlite3rbu.c -> ext/rbu/sqlite3rbu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "182: typedef struct RbuFrame RbuFrame;",
          "183: typedef struct RbuObjIter RbuObjIter;",
          "184: typedef struct RbuState RbuState;",
          "185: typedef struct rbu_vfs rbu_vfs;",
          "186: typedef struct rbu_file rbu_file;",
          "187: typedef struct RbuUpdateStmt RbuUpdateStmt;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185: typedef struct RbuSpan RbuSpan;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "226:   RbuUpdateStmt *pNext;",
          "227: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "230: struct RbuSpan {",
          "231:   const char *zSpan;",
          "232:   int nSpan;",
          "233: };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "280:   RbuUpdateStmt *pRbuUpdate;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "284:   int nIdxCol;",
          "285:   RbuSpan *aIdxCol;",
          "286:   char *zIdxSql;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "809:     sqlite3_free(pUp);",
          "810:     pUp = pTmp;",
          "811:   }",
          "813:   pIter->pSelect = 0;",
          "814:   pIter->pInsert = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "821:   sqlite3_free(pIter->aIdxCol);",
          "822:   sqlite3_free(pIter->zIdxSql);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "816:   pIter->pRbuUpdate = 0;",
          "817:   pIter->pTmpInsert = 0;",
          "818:   pIter->nCol = 0;",
          "819: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "830:   pIter->nIdxCol = 0;",
          "831:   pIter->aIdxCol = 0;",
          "832:   pIter->zIdxSql = 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1089: static char *rbuStrndup(const char *zStr, int *pRc){",
          "1090:   char *zRet = 0;",
          "1100:     }",
          "1101:   }",
          "",
          "[Removed Lines]",
          "1092:   assert( *pRc==SQLITE_OK );",
          "1093:   if( zStr ){",
          "1094:     size_t nCopy = strlen(zStr) + 1;",
          "1095:     zRet = (char*)sqlite3_malloc64(nCopy);",
          "1096:     if( zRet ){",
          "1097:       memcpy(zRet, zStr, nCopy);",
          "1098:     }else{",
          "",
          "[Added Lines]",
          "1106:   if( *pRc==SQLITE_OK ){",
          "1107:     if( zStr ){",
          "1108:       size_t nCopy = strlen(zStr) + 1;",
          "1109:       zRet = (char*)sqlite3_malloc64(nCopy);",
          "1110:       if( zRet ){",
          "1111:         memcpy(zRet, zStr, nCopy);",
          "1112:       }else{",
          "1114:       }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1268:     while( p->rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pXInfo) ){",
          "1269:       int iCid = sqlite3_column_int(pXInfo, 1);",
          "1270:       if( iCid>=0 ) pIter->abIndexed[iCid] = 1;",
          "1271:     }",
          "1272:     rbuFinalize(p, pXInfo);",
          "1273:     bIndex = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1286:       if( iCid==-2 ){",
          "1287:         memset(pIter->abIndexed, 0x01, sizeof(u8)*pIter->nTblCol);",
          "1288:       }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1682:     const char *zCol;",
          "1683:     const char *zType;",
          "1695:       }else{",
          "1697:       }",
          "1702:     }",
          "1705:     if( pIter->bUnique==0 || sqlite3_column_int(pXInfo, 5) ){",
          "1706:       const char *zOrder = (bDesc ? \" DESC\" : \"\");",
          "1707:       zImpPK = sqlite3_mprintf(\"%z%s\\\"rbu_imp_%d%w\\\"%s\",",
          "",
          "[Removed Lines]",
          "1685:     if( iCid<0 ){",
          "1688:       if( pIter->eType==RBU_PK_IPK ){",
          "1689:         int i;",
          "1690:         for(i=0; pIter->abTblPk[i]==0; i++);",
          "1691:         assert( i<pIter->nTblCol );",
          "1692:         zCol = pIter->azTblCol[i];",
          "1693:       }else if( rbuIsVacuum(p) ){",
          "1694:         zCol = \"_rowid_\";",
          "1696:         zCol = \"rbu_rowid\";",
          "1698:       zType = \"INTEGER\";",
          "1699:     }else{",
          "1700:       zCol = pIter->azTblCol[iCid];",
          "1701:       zType = pIter->azTblType[iCid];",
          "1704:     zRet = sqlite3_mprintf(\"%z%s\\\"%w\\\" COLLATE %Q\", zRet, zCom, zCol, zCollate);",
          "",
          "[Added Lines]",
          "1703:     if( iCid==-2 ){",
          "1704:       int iSeq = sqlite3_column_int(pXInfo, 0);",
          "1705:       zRet = sqlite3_mprintf(\"%z%s(%.*s) COLLATE %Q\", zRet, zCom,",
          "1706:           pIter->aIdxCol[iSeq].nSpan, pIter->aIdxCol[iSeq].zSpan, zCollate",
          "1707:       );",
          "1708:       zType = \"\";",
          "1709:     }else {",
          "1710:       if( iCid<0 ){",
          "1713:         if( pIter->eType==RBU_PK_IPK ){",
          "1714:           int i;",
          "1715:           for(i=0; pIter->abTblPk[i]==0; i++);",
          "1716:           assert( i<pIter->nTblCol );",
          "1717:           zCol = pIter->azTblCol[i];",
          "1718:         }else if( rbuIsVacuum(p) ){",
          "1719:           zCol = \"_rowid_\";",
          "1720:         }else{",
          "1721:           zCol = \"rbu_rowid\";",
          "1722:         }",
          "1723:         zType = \"INTEGER\";",
          "1725:         zCol = pIter->azTblCol[iCid];",
          "1726:         zType = pIter->azTblType[iCid];",
          "1728:       zRet = sqlite3_mprintf(\"%z%s\\\"%w\\\" COLLATE %Q\", zRet, zCom,zCol,zCollate);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2181:   int rc = p->rc;",
          "2182:   char *zRet = 0;",
          "2184:   if( rc==SQLITE_OK ){",
          "2185:     rc = prepareAndCollectError(p->dbMain, &pStmt, &p->zErrmsg,",
          "2186:         \"SELECT trim(sql) FROM sqlite_master WHERE type='index' AND name=?\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2210:   assert( pIter->zIdxSql==0 && pIter->nIdxCol==0 && pIter->aIdxCol==0 );",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2190:     int rc2;",
          "2191:     rc = sqlite3_bind_text(pStmt, 1, pIter->zIdx, -1, SQLITE_STATIC);",
          "2192:     if( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){",
          "2194:       if( zSql ){",
          "2196:         int i;",
          "2197:         for(i=0; zSql[i]; i++){",
          "2198:           char c = zSql[i];",
          "2199:           if( c=='(' ){",
          "2200:             nParen++;",
          "2201:           }",
          "2202:           else if( c==')' ){",
          "2203:             nParen--;",
          "2204:             if( nParen==0 ){",
          "2205:               i++;",
          "2206:               break;",
          "2207:             }",
          "2208:           }else if( c=='\"' || c=='\\'' || c=='`' ){",
          "2209:             for(i++; 1; i++){",
          "2210:               if( zSql[i]==c ){",
          "",
          "[Removed Lines]",
          "2193:       const char *zSql = (const char*)sqlite3_column_text(pStmt, 0);",
          "",
          "[Added Lines]",
          "2221:       char *zSql = (char*)sqlite3_column_text(pStmt, 0);",
          "2222:       if( zSql ){",
          "2223:         pIter->zIdxSql = zSql = rbuStrndup(zSql, &rc);",
          "2224:       }",
          "2228:         int iIdxCol = 0;",
          "2229:         int nIdxAlloc = 0;",
          "2234:           if( iIdxCol==nIdxAlloc ){",
          "2235:             RbuSpan *aIdxCol = (RbuSpan*)sqlite3_realloc(",
          "2236:                 pIter->aIdxCol, (nIdxAlloc+16)*sizeof(RbuSpan)",
          "2237:             );",
          "2238:             if( aIdxCol==0 ){",
          "2239:               rc = SQLITE_NOMEM;",
          "2240:               break;",
          "2241:             }",
          "2242:             pIter->aIdxCol = aIdxCol;",
          "2243:             nIdxAlloc += 16;",
          "2244:           }",
          "2247:             if( nParen==0 ){",
          "2248:               assert( iIdxCol==0 );",
          "2249:               pIter->aIdxCol[0].zSpan = &zSql[i+1];",
          "2250:             }",
          "2256:               int nSpan = &zSql[i] - pIter->aIdxCol[iIdxCol].zSpan;",
          "2257:               pIter->aIdxCol[iIdxCol++].nSpan = nSpan;",
          "2261:           }else if( c==',' && nParen==1 ){",
          "2262:             int nSpan = &zSql[i] - pIter->aIdxCol[iIdxCol].zSpan;",
          "2263:             pIter->aIdxCol[iIdxCol++].nSpan = nSpan;",
          "2264:             pIter->aIdxCol[iIdxCol].zSpan = &zSql[i+1];",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2228:         if( zSql[i] ){",
          "2229:           zRet = rbuStrndup(&zSql[i], &rc);",
          "2230:         }",
          "2231:       }",
          "2232:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2288:         pIter->nIdxCol = iIdxCol;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2272:       int nBind = 0;",
          "2274:       assert( pIter->eType!=RBU_PK_VTAB );",
          "2275:       zCollist = rbuObjIterGetIndexCols(",
          "2276:           p, pIter, &zImposterCols, &zImposterPK, &zWhere, &nBind",
          "2277:       );",
          "2278:       zBind = rbuObjIterGetBindlist(p, nBind);",
          "2282:       sqlite3_test_control(SQLITE_TESTCTRL_IMPOSTER, p->dbMain, \"main\", 0, 1);",
          "",
          "[Removed Lines]",
          "2279:       zPart = rbuObjIterGetIndexWhere(p, pIter);",
          "",
          "[Added Lines]",
          "2333:       zPart = rbuObjIterGetIndexWhere(p, pIter);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e1ccf211aa975a6688a27f7dc4cea80784ed8dcfe1950b2fa6eb0a3cb938838a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6d7f18d60cef4bcae013aa8bc57f153f69693b7c",
      "candidate_info": {
        "commit_hash": "6d7f18d60cef4bcae013aa8bc57f153f69693b7c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6d7f18d60cef4bcae013aa8bc57f153f69693b7c",
        "files": [
          "ext/rbu/sqlite3rbu.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a potential memory leak in RBU if the rbu_fossil_delta() SQL function is misused.  Misuse never happens in a working RBU system, so this is not a particularly important fix.\n\nFossilOrigin-Name: 12517d1b15da46bc90bd95bb9c161d7f2ecdd7f28b1b3a5ed4397939ef986061",
        "before_after_code_files": [
          "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c": [
          "File: ext/rbu/sqlite3rbu.c -> ext/rbu/sqlite3rbu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "684:   }else{",
          "685:     nOut2 = rbuDeltaApply(aOrig, nOrig, aDelta, nDelta, aOut);",
          "686:     if( nOut2!=nOut ){",
          "687:       sqlite3_result_error(context, \"corrupt fossil delta\", -1);",
          "688:     }else{",
          "689:       sqlite3_result_blob(context, aOut, nOut, sqlite3_free);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "687:       sqlite3_free(aOut);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f2d400db4dbfb05e2540178ed3662f97f8c57a95f8129886c7081c35e53adf0d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}