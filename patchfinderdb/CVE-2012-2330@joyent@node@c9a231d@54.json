{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b07b39130458b86f2e295fcc833d9fa836cc70b4",
      "candidate_info": {
        "commit_hash": "b07b39130458b86f2e295fcc833d9fa836cc70b4",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/b07b39130458b86f2e295fcc833d9fa836cc70b4",
        "files": [
          "src/node_version.h"
        ],
        "message": "Now working on 0.8.1",
        "before_after_code_files": [
          "src/node_version.h||src/node_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_version.h||src/node_version.h": [
          "File: src/node_version.h -> src/node_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #define NODE_MAJOR_VERSION 0",
          "26: #define NODE_MINOR_VERSION 8",
          "30: #ifndef NODE_STRINGIFY",
          "31: #define NODE_STRINGIFY(n) NODE_STRINGIFY_HELPER(n)",
          "",
          "[Removed Lines]",
          "27: #define NODE_PATCH_VERSION 0",
          "28: #define NODE_VERSION_IS_RELEASE 1",
          "",
          "[Added Lines]",
          "27: #define NODE_PATCH_VERSION 1",
          "28: #define NODE_VERSION_IS_RELEASE 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "91bf18fcc5340262d0672dbebcc1a34bc4a8cd95",
      "candidate_info": {
        "commit_hash": "91bf18fcc5340262d0672dbebcc1a34bc4a8cd95",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/91bf18fcc5340262d0672dbebcc1a34bc4a8cd95",
        "files": [
          "lib/dns.js",
          "src/cares_wrap.cc",
          "test/internet/test-dns.js"
        ],
        "message": "DNS: Support NAPTR queries\n\nAdding support for NAPTR records\nfixes #3170",
        "before_after_code_files": [
          "lib/dns.js||lidns.js",
          "src/cares_wrap.cc||src/cares_wrap.cc",
          "test/internet/test-dns.js||test/internet/test-dns.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/dns.js||lidns.js": [
          "File: lib/dns.js -> lidns.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "169: exports.resolveNs = resolveMap.NS = resolver('queryNs');",
          "170: exports.resolveTxt = resolveMap.TXT = resolver('queryTxt');",
          "171: exports.resolveSrv = resolveMap.SRV = resolver('querySrv');",
          "172: exports.reverse = resolveMap.PTR = resolver('getHostByAddr');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/cares_wrap.cc||src/cares_wrap.cc": [
          "File: src/cares_wrap.cc -> src/cares_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "485:   }",
          "486: };",
          "489: class GetHostByAddrWrap: public QueryWrap {",
          "490:  public:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "488: class QueryNaptrWrap: public QueryWrap {",
          "489:  public:",
          "490:   int Send(const char* name) {",
          "491:     ares_query(ares_channel,",
          "492:                name,",
          "493:                ns_c_in,",
          "494:                ns_t_naptr,",
          "495:                Callback,",
          "496:                GetQueryArg());",
          "497:     return 0;",
          "498:   }",
          "500:  protected:",
          "501:   void Parse(unsigned char* buf, int len) {",
          "502:     HandleScope scope;",
          "504:     ares_naptr_reply* naptr_start;",
          "505:     int status = ares_parse_naptr_reply(buf, len, &naptr_start);",
          "507:     if (status != ARES_SUCCESS) {",
          "508:       this->ParseError(status);",
          "509:       return;",
          "510:     }",
          "512:     Local<Array> naptr_records = Array::New();",
          "513:     Local<String> flags_symbol = String::NewSymbol(\"flags\");",
          "514:     Local<String> service_symbol = String::NewSymbol(\"service\");",
          "515:     Local<String> regexp_symbol = String::NewSymbol(\"regexp\");",
          "516:     Local<String> replacement_symbol = String::NewSymbol(\"replacement\");",
          "517:     Local<String> order_symbol = String::NewSymbol(\"order\");",
          "518:     Local<String> preference_symbol = String::NewSymbol(\"preference\");",
          "520:     int i = 0;",
          "521:     for (ares_naptr_reply* naptr_current = naptr_start;",
          "522:          naptr_current;",
          "523:          naptr_current = naptr_current->next) {",
          "525:       Local<Object> naptr_record = Object::New();",
          "527:       naptr_record->Set(flags_symbol, String::New(naptr_current->flags));",
          "528:       naptr_record->Set(service_symbol, String::New(naptr_current->service));",
          "529:       naptr_record->Set(regexp_symbol, String::New(naptr_current->regexp));",
          "530:       naptr_record->Set(replacement_symbol, String::New(naptr_current->replacement));",
          "531:       naptr_record->Set(order_symbol, Integer::New(naptr_current->order));",
          "532:       naptr_record->Set(preference_symbol, Integer::New(naptr_current->preference));",
          "534:       naptr_records->Set(Integer::New(i++), naptr_record);",
          "535:     }",
          "537:     ares_free_data(naptr_start);",
          "539:     this->CallOnComplete(naptr_records);",
          "540:   }",
          "541: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "746:   NODE_SET_METHOD(target, \"queryNs\", Query<QueryNsWrap>);",
          "747:   NODE_SET_METHOD(target, \"queryTxt\", Query<QueryTxtWrap>);",
          "748:   NODE_SET_METHOD(target, \"querySrv\", Query<QuerySrvWrap>);",
          "749:   NODE_SET_METHOD(target, \"getHostByAddr\", Query<GetHostByAddrWrap>);",
          "750:   NODE_SET_METHOD(target, \"getHostByName\", QueryWithFamily<GetHostByNameWrap>);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "804:   NODE_SET_METHOD(target, \"queryNaptr\", Query<QueryNaptrWrap>);",
          "",
          "---------------"
        ],
        "test/internet/test-dns.js||test/internet/test-dns.js": [
          "File: test/internet/test-dns.js -> test/internet/test-dns.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:   checkWrap(req);",
          "220: });",
          "223: TEST(function test_resolveCname(done) {",
          "224:   var req = dns.resolveCname('www.google.com', function(err, names) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222: TEST(function test_resolveNaptr(done) {",
          "223:   var req = dns.resolveNaptr('sip.voice.google.com', function(err, result) {",
          "224:     if (err) throw err;",
          "226:     assert.ok(result.length > 0);",
          "228:     for (var i = 0; i < result.length; i++) {",
          "229:       var item = result[i];",
          "230:       assert.ok(item);",
          "231:       assert.ok(typeof item === 'object');",
          "233:       assert.ok(typeof item.flags === 'string');",
          "234:       assert.ok(typeof item.service === 'string');",
          "235:       assert.ok(typeof item.regexp === 'string');",
          "236:       assert.ok(typeof item.replacement === 'string');",
          "237:       assert.ok(typeof item.order === 'number');",
          "238:       assert.ok(typeof item.preference === 'number');",
          "239:     }",
          "241:     done();",
          "242:   });",
          "244:   checkWrap(req);",
          "245: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8d5c1201f24a6102d047bd7ec70f30da70a5ea64",
      "candidate_info": {
        "commit_hash": "8d5c1201f24a6102d047bd7ec70f30da70a5ea64",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/8d5c1201f24a6102d047bd7ec70f30da70a5ea64",
        "files": [
          "src/stream_wrap.cc",
          "test/simple/test-net-resume-pause.js"
        ],
        "message": "Check if a stream has a valid fd before read_start\n\nCloses #3118",
        "before_after_code_files": [
          "src/stream_wrap.cc||src/stream_wrap.cc",
          "test/simple/test-net-resume-pause.js||test/simple/test-net-resume-pause.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/stream_wrap.cc||src/stream_wrap.cc": [
          "File: src/stream_wrap.cc -> src/stream_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:   UNWRAP(StreamWrap)",
          "135:   bool ipc_pipe = wrap->stream_->type == UV_NAMED_PIPE &&",
          "136:                   ((uv_pipe_t*)wrap->stream_)->ipc;",
          "137:   int r;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137:   if (wrap->stream_->fd < 0) return scope.Close(Integer::New(1));",
          "",
          "---------------"
        ],
        "test/simple/test-net-resume-pause.js||test/simple/test-net-resume-pause.js": [
          "File: test/simple/test-net-resume-pause.js -> test/simple/test-net-resume-pause.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "25: var net = require('net');",
          "27: var received = false;",
          "30: var client = net.connect(12345, \"localhost\");",
          "31: client.on('error', function(err) {",
          "32:   assert.equal(err.message, 'connect ECONNREFUSED');",
          "33: });",
          "34: client.pause();",
          "35: client.resume();",
          "37: var server = net.createServer(function(socket) {",
          "38:   socket.on('data', function() {",
          "39:     socket.write('important data\\r\\n');",
          "40:   });",
          "42:   socket.on('end', function() {",
          "43:     socket.end();",
          "44:   });",
          "46:   socket.on('close', function(hadError) {",
          "47:     assert.equal(false, hadError);",
          "48:   });",
          "49: });",
          "51: server.listen(common.PORT, function() {",
          "52:   var resumed = false;",
          "54:   var client = net.createConnection(common.PORT);",
          "55:   client.setEncoding('UTF8');",
          "57:   client.on('connect', function() {",
          "58:     client.write('start\\r\\n');",
          "59:     client.pause();",
          "61:     setTimeout(function() {",
          "62:       client.resume();",
          "63:       resumed = true;",
          "64:     }, 500);",
          "65:   });",
          "67:   client.on('data', function(chunk) {",
          "68:     assert.equal('important data\\r\\n', chunk);",
          "70:     assert(resumed, 'got data before resume');",
          "72:     received = true;",
          "73:     client.end();",
          "74:   });",
          "76:   client.on('close', function(hadError) {",
          "77:     assert.equal(false, hadError);",
          "78:     server.close();",
          "79:   });",
          "80: });",
          "82: process.on('exit', function() {",
          "83:   assert(received);",
          "84: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c492d43f4817eb65cd251749bd074df7bb4ebc28",
      "candidate_info": {
        "commit_hash": "c492d43f4817eb65cd251749bd074df7bb4ebc28",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/c492d43f4817eb65cd251749bd074df7bb4ebc28",
        "files": [
          "lib/tls.js"
        ],
        "message": "tls: fix segfault in pummel/test-tls-ci-reneg-attack\n\nCommit 4e5fe2d changed the way how process.nextTick() works:\n\n    process.nextTick(function foo() {\n      process.nextTick(function bar() {\n        // ...\n      });\n    });\n\nBefore said commit, foo() and bar() used to run on separate event loop ticks\nbut that is no longer the case.\n\nHowever, that's exactly the behavior that the TLS renegotiation attack guard\nrelies on. It gets called by OpenSSL and needs to defer the 'error' event to a\nlater tick because the default action is to destroy the TLS context - the same\ncontext that OpenSSL currently operates on.\n\nWhen things change underneath your feet, bad things happen and OpenSSL is no\nexception. Ergo, use setImmediate() instead of process.nextTick() to ensure\nthat the 'error' event is actually emitted at a later tick.\n\nFixes #3840.",
        "before_after_code_files": [
          "lib/tls.js||litls.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/tls.js||litls.js": [
          "File: lib/tls.js -> litls.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "706:       var err = new Error('TLS session renegotiation attack detected.');",
          "707:       if (self.cleartext) self.cleartext.emit('error', err);",
          "708:     });",
          "",
          "[Removed Lines]",
          "705:     process.nextTick(function() {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "99059aad8d654acda4abcfaa68df182b50f2ec90",
      "candidate_info": {
        "commit_hash": "99059aad8d654acda4abcfaa68df182b50f2ec90",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/99059aad8d654acda4abcfaa68df182b50f2ec90",
        "files": [
          "ChangeLog",
          "doc/about/index.html",
          "doc/community/index.html",
          "doc/index.html",
          "doc/logos/index.html",
          "doc/template.html",
          "src/node_version.h"
        ],
        "message": "2012.02.07, Version 0.7.3 (unstable)\n\n* Upgrade V8 to 3.9.2\n\n* Revert support for isolates. (Ben Noordhuis)\n\n* cluster: Cleanup docs, event handling, and process.disconnect (Andreas Madsen)\n\n* gyp_addon: link with node.lib on Windows (Nathan Rajlich)\n\n* http: fix case where http-parser is freed twice (koichik)\n\n* Windows: disable RTTI and exceptions (Bert Belder)",
        "before_after_code_files": [
          "src/node_version.h||src/node_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_version.h||src/node_version.h": [
          "File: src/node_version.h -> src/node_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #define NODE_MAJOR_VERSION 0",
          "30: #define NODE_MINOR_VERSION 7",
          "31: #define NODE_PATCH_VERSION 3",
          "34: #ifndef NODE_STRINGIFY",
          "35: #define NODE_STRINGIFY(n) NODE_STRINGIFY_HELPER(n)",
          "",
          "[Removed Lines]",
          "32: #define NODE_VERSION_IS_RELEASE 0",
          "",
          "[Added Lines]",
          "32: #define NODE_VERSION_IS_RELEASE 1",
          "",
          "---------------"
        ]
      }
    }
  ]
}