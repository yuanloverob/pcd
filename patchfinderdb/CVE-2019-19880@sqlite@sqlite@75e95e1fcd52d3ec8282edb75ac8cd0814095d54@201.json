{
  "cve_id": "CVE-2019-19880",
  "cve_desc": "exprListAppendList in window.c in SQLite 3.30.1 allows attackers to trigger an invalid pointer dereference because constant integer values in ORDER BY clauses of window definitions are mishandled.",
  "repo": "sqlite/sqlite",
  "patch_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
  "patch_info": {
    "commit_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/window.c"
    ],
    "message": "When processing constant integer values in ORDER BY clauses of window definitions (see check-in [7e4809eadfe99ebf]) be sure to fully disable the constant value to avoid an invalid pointer dereference if the expression is ever duplicated. This fixes a crash report from Yongheng and Rui.\n\nFossilOrigin-Name: 1ca0bd982ab1183bbafce0d260e4dceda5eb766ed2e7793374a88d1ae0bdd2ca",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8223e79f987feda5c8e51ec52cec6798cca16d070b10558939e2888ca1a25b8e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "895:     int nInit = pList ? pList->nExpr : 0;",
      "896:     for(i=0; i<pAppend->nExpr; i++){",
      "897:       Expr *pDup = sqlite3ExprDup(pParse->db, pAppend->a[i].pExpr, 0);",
      "898:       if( bIntToNull && pDup && pDup->op==TK_INTEGER ){",
      "899:         pDup->op = TK_NULL;",
      "900:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
      "901:       }",
      "902:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
      "903:       if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "898:       assert( pDup==0 || !ExprHasProperty(pDup, EP_MemToken) );",
      "902:         pDup->u.zToken = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1a9082f6d773fad00926f64650601104827bd319",
      "candidate_info": {
        "commit_hash": "1a9082f6d773fad00926f64650601104827bd319",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1a9082f6d773fad00926f64650601104827bd319",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "test/gencol1.test"
        ],
        "message": "Omit the optimization that reduces the column-count on rowid-table cursors when the table has generated columns, because we do not know what columns the generator expressions might try to access.\n\nFossilOrigin-Name: e6c96ed91e7a96d2bd30ea9df132644ac02d5a321a62f81f8f3984a8e49ed94b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7c52f5478f9ecf5c078208759143ae9de43c1bf191dfcd74acb8bd169d4dc883",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5014:       assert( pTabItem->iCursor==pLevel->iTabCur );",
          "5015:       testcase( pWInfo->eOnePass==ONEPASS_OFF && pTab->nCol==BMS-1 );",
          "5016:       testcase( pWInfo->eOnePass==ONEPASS_OFF && pTab->nCol==BMS );",
          "5018:         Bitmask b = pTabItem->colUsed;",
          "5019:         int n = 0;",
          "5020:         for(; b; b=b>>1, n++){}",
          "",
          "[Removed Lines]",
          "5017:       if( pWInfo->eOnePass==ONEPASS_OFF && pTab->nCol<BMS && HasRowid(pTab) ){",
          "",
          "[Added Lines]",
          "5017:       if( pWInfo->eOnePass==ONEPASS_OFF",
          "5018:        && pTab->nCol<BMS",
          "5019:        && (pTab->tabFlags & (TF_HasGenerated|TF_WithoutRowid))==0",
          "5020:       ){",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:   REPLACE INTO t0(c0,c2,c3) VALUES(0,0,0),(0,0,0);",
          "177: } {1 {FOREIGN KEY constraint failed}}",
          "179: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179: # 2019-11-01 Problem found while adding new foreign key test cases in TH3.",
          "180: db close",
          "181: sqlite3 db :memory:",
          "182: do_execsql_test gencol1-5.100 {",
          "183:   PRAGMA foreign_keys=ON;",
          "184:   CREATE TABLE t1(",
          "185:     gcb AS (b*1),",
          "186:     a INTEGER PRIMARY KEY,",
          "187:     gcc AS (c+0),",
          "188:     b UNIQUE,",
          "189:     gca AS (1*a+0),",
          "190:     c UNIQUE",
          "191:   ) WITHOUT ROWID;",
          "192:   INSERT INTO t1 VALUES(1,2,3);",
          "193:   INSERT INTO t1 VALUES(4,5,6);",
          "194:   INSERT INTO t1 VALUES(7,8,9);",
          "195:   CREATE TABLE t1a(",
          "196:     gcx AS (x+0) REFERENCES t1(a) ON DELETE CASCADE,",
          "197:     id,",
          "198:     x,",
          "199:     gcid AS (1*id)",
          "200:   );",
          "201:   INSERT INTO t1a VALUES(1, 1);",
          "202:   INSERT INTO t1a VALUES(2, 4);",
          "203:   INSERT INTO t1a VALUES(3, 7);",
          "204:   DELETE FROM t1 WHERE b=5;",
          "205:   SELECT id,x,'|' FROM t1a ORDER BY id;",
          "206: } {1 1 | 3 7 |}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c398c65bee850b6b8f24a44852872a27f114535d",
      "candidate_info": {
        "commit_hash": "c398c65bee850b6b8f24a44852872a27f114535d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c398c65bee850b6b8f24a44852872a27f114535d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/os.c",
          "src/os_unix.c",
          "src/os_win.c",
          "src/pager.c",
          "src/sqlite.h.in",
          "src/test_demovfs.c",
          "src/test_vfs.c"
        ],
        "message": "Revise the SQLITE_OPEN_NOFOLLOW so that it actually uses O_NOFOLLOW in the open() system call.  This backs out the SQLITE_ACCESS_SYMLINK value but adds the new SQLITE_OK_SYMLINK return code from the xFullPathname method of sqlite3_vfs when that routine resolves symbolic links. O_NOFOLLOW is always included in open() system calls for journal files.\n\nFossilOrigin-Name: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/os.c||src/os.c",
          "src/os_unix.c||src/os_unix.c",
          "src/os_win.c||src/os_win.c",
          "src/pager.c||src/pager.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/test_demovfs.c||src/test_demovfs.c",
          "src/test_vfs.c||src/test_vfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ac080432b480062507452d3cdbe6c0f759e6f95b65d9862e0462017405ab2b8e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2403:         rc = sqlite3OsFullPathname(pVfs, zFilename,",
          "2404:                                    nFullPathname, zFullPathname);",
          "2405:         if( rc ){",
          "2409:         }",
          "2410:       }",
          "2411: #if SQLITE_THREADSAFE",
          "",
          "[Removed Lines]",
          "2406:           sqlite3_free(zFullPathname);",
          "2407:           sqlite3_free(p);",
          "2408:           return rc;",
          "",
          "[Added Lines]",
          "2406:           if( rc==SQLITE_OK_SYMLINK ){",
          "2407:             rc = SQLITE_OK;",
          "2408:           }else{",
          "2409:             sqlite3_free(zFullPathname);",
          "2410:             sqlite3_free(p);",
          "2411:             return rc;",
          "2412:           }",
          "",
          "---------------"
        ],
        "src/os.c||src/os.c": [
          "File: src/os.c -> src/os.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:   assert( rc==SQLITE_OK || pFile->pMethods==0 );",
          "220:   return rc;",
          "221: }",
          "",
          "[Removed Lines]",
          "218:   rc = pVfs->xOpen(pVfs, zPath, pFile, flags & 0x87f7f, pFlagsOut);",
          "",
          "[Added Lines]",
          "218:   rc = pVfs->xOpen(pVfs, zPath, pFile, flags & 0x1087f7f, pFlagsOut);",
          "",
          "---------------"
        ],
        "src/os_unix.c||src/os_unix.c": [
          "File: src/os_unix.c -> src/os_unix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3685:     if( zDirname[0]!='/' ) zDirname[0] = '.';",
          "3686:     zDirname[1] = 0;",
          "3687:   }",
          "3689:   if( fd>=0 ){",
          "3690:     OSTRACE((\"OPENDIR %-3d %s\\n\", fd, zDirname));",
          "3691:   }",
          "",
          "[Removed Lines]",
          "3688:   fd = robust_open(zDirname, O_RDONLY|O_BINARY, 0);",
          "",
          "[Added Lines]",
          "3688:   fd = robust_open(zDirname, O_RDONLY|O_BINARY|O_NOFOLLOW, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4577:     if( pInode->bProcessLock==0 ){",
          "4578:       if( 0==sqlite3_uri_boolean(pDbFd->zPath, \"readonly_shm\", 0) ){",
          "4580:       }",
          "4581:       if( pShmNode->hShm<0 ){",
          "4583:         if( pShmNode->hShm<0 ){",
          "4584:           rc = unixLogError(SQLITE_CANTOPEN_BKPT, \"open\", zShm);",
          "4585:           goto shm_open_err;",
          "",
          "[Removed Lines]",
          "4579:         pShmNode->hShm = robust_open(zShm, O_RDWR|O_CREAT,(sStat.st_mode&0777));",
          "4582:         pShmNode->hShm = robust_open(zShm, O_RDONLY, (sStat.st_mode&0777));",
          "",
          "[Added Lines]",
          "4579:         pShmNode->hShm = robust_open(zShm, O_RDWR|O_CREAT|O_NOFOLLOW,",
          "4580:                                      (sStat.st_mode&0777));",
          "4583:         pShmNode->hShm = robust_open(zShm, O_RDONLY|O_NOFOLLOW,",
          "4584:                                      (sStat.st_mode&0777));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6039:   if( isReadWrite ) openFlags |= O_RDWR;",
          "6040:   if( isCreate )    openFlags |= O_CREAT;",
          "6041:   if( isExclusive ) openFlags |= (O_EXCL|O_NOFOLLOW);",
          "6044:   if( fd<0 ){",
          "",
          "[Removed Lines]",
          "6042:   openFlags |= (O_LARGEFILE|O_BINARY);",
          "",
          "[Added Lines]",
          "6044:   openFlags |= (O_LARGEFILE|O_BINARY|O_NOFOLLOW);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6251:   SimulateIOError( return SQLITE_IOERR_ACCESS; );",
          "6252:   assert( pResOut!=0 );",
          "6260:   if( flags==SQLITE_ACCESS_EXISTS ){",
          "6261:     struct stat buf;",
          "6265:   }else{",
          "6273:   }",
          "6274:   return SQLITE_OK;",
          "6275: }",
          "",
          "[Removed Lines]",
          "6256:   assert( flags==SQLITE_ACCESS_EXISTS",
          "6257:        || flags==SQLITE_ACCESS_READWRITE",
          "6258:        || flags==SQLITE_ACCESS_SYMLINK );",
          "6263:   }else if( flags==SQLITE_ACCESS_READWRITE ){",
          "6266: #if !defined(HAVE_LSTAT)",
          "6268: #else",
          "6269:     struct stat buf;",
          "6271: #endif",
          "6272:     assert( flags==SQLITE_ACCESS_SYMLINK );",
          "",
          "[Added Lines]",
          "6258:   assert( flags==SQLITE_ACCESS_EXISTS || flags==SQLITE_ACCESS_READWRITE );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6350:     }",
          "6352:     if( bLink ){",
          "6353:       if( zDel==0 ){",
          "6354:         zDel = sqlite3_malloc(nOut);",
          "6355:         if( zDel==0 ) rc = SQLITE_NOMEM_BKPT;",
          "6357:         rc = SQLITE_CANTOPEN_BKPT;",
          "6358:       }",
          "",
          "[Removed Lines]",
          "6356:       }else if( ++nLink>SQLITE_MAX_SYMLINKS ){",
          "",
          "[Added Lines]",
          "6345:       nLink++;",
          "6349:       }else if( nLink>=SQLITE_MAX_SYMLINKS ){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6389:   }while( rc==SQLITE_OK );",
          "6391:   sqlite3_free(zDel);",
          "6392:   return rc;",
          "6394: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6385:   if( rc==SQLITE_OK && nLink ) rc = SQLITE_OK_SYMLINK;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6874:   int fd = -1;",
          "6875:   unixFile *pNew;",
          "6876:   int rc = SQLITE_OK;",
          "6878:   sqlite3_vfs dummyVfs;",
          "6879:   int terrno = 0;",
          "6880:   UnixUnusedFd *pUnused = NULL;",
          "",
          "[Removed Lines]",
          "6877:   int openFlags = O_RDWR | O_CREAT;",
          "",
          "[Added Lines]",
          "6871:   int openFlags = O_RDWR | O_CREAT | O_NOFOLLOW;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6904:     }",
          "6905:   }",
          "6906:   if( fd<0 ){",
          "6908:     fd = robust_open(path, openFlags, 0);",
          "6909:     terrno = errno;",
          "6910:   }",
          "",
          "[Removed Lines]",
          "6907:     openFlags = O_RDONLY;",
          "",
          "[Added Lines]",
          "6901:     openFlags = O_RDONLY | O_NOFOLLOW;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "7030:     goto end_breaklock;",
          "7031:   }",
          "7034:   if( fd<0 ){",
          "7035:     sqlite3_snprintf(sizeof(errmsg), errmsg, \"create failed (%d)\", errno);",
          "7036:     goto end_breaklock;",
          "",
          "[Removed Lines]",
          "7033:   fd = robust_open(tPath, (O_RDWR|O_CREAT|O_EXCL), 0);",
          "",
          "[Added Lines]",
          "7027:   fd = robust_open(tPath, (O_RDWR|O_CREAT|O_EXCL|O_NOFOLLOW), 0);",
          "",
          "---------------"
        ],
        "src/os_win.c||src/os_win.c": [
          "File: src/os_win.c -> src/os_win.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "80: #  define NTDDI_WINTHRESHOLD                0x06040000",
          "81: #endif",
          "",
          "[Removed Lines]",
          "87: #ifndef FILE_ATTRIBUTE_REPARSE_POINT",
          "88: #  define FILE_ATTRIBUTE_REPARSE_POINT      0x00000400",
          "89: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5480:       rc = attr!=INVALID_FILE_ATTRIBUTES &&",
          "5481:              (attr & FILE_ATTRIBUTE_READONLY)==0;",
          "5482:       break;",
          "5487:     default:",
          "5488:       assert(!\"Invalid flags argument\");",
          "5489:   }",
          "",
          "[Removed Lines]",
          "5483:     case SQLITE_ACCESS_SYMLINK:",
          "5484:       rc = attr!=INVALID_FILE_ATTRIBUTES &&",
          "5485:              (attr & FILE_ATTRIBUTE_REPARSE_POINT)!=0;",
          "5486:       break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4791:   if( zFilename && zFilename[0] ){",
          "4792:     const char *z;",
          "4799:     nPathname = pVfs->mxPathname+1;",
          "4800:     zPathname = sqlite3DbMallocRaw(0, nPathname*2);",
          "4801:     if( zPathname==0 ){",
          "",
          "[Removed Lines]",
          "4793:     if( (vfsFlags & SQLITE_OPEN_NOFOLLOW)!=0 ){",
          "4794:       int isLink = 0;",
          "4795:       int rc = sqlite3OsAccess(pVfs, zFilename, SQLITE_ACCESS_SYMLINK, &isLink);",
          "4796:       if( rc==SQLITE_OK && isLink ) rc = SQLITE_CANTOPEN_SYMLINK;",
          "4797:       if( rc ) return rc;",
          "4798:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4803:     }",
          "4805:     rc = sqlite3OsFullPathname(pVfs, zFilename, nPathname, zPathname);",
          "4806:     nPathname = sqlite3Strlen30(zPathname);",
          "4807:     z = zUri = &zFilename[sqlite3Strlen30(zFilename)+1];",
          "4808:     while( *z ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4800:     if( rc!=SQLITE_OK ){",
          "4801:       if( rc==SQLITE_OK_SYMLINK ){",
          "4802:         if( vfsFlags & SQLITE_OPEN_NOFOLLOW ){",
          "4803:           rc = SQLITE_CANTOPEN_SYMLINK;",
          "4804:         }else{",
          "4805:           rc = SQLITE_OK;",
          "4806:         }",
          "4807:       }",
          "4808:     }",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "541: #define SQLITE_WARNING_AUTOINDEX       (SQLITE_WARNING | (1<<8))",
          "542: #define SQLITE_AUTH_USER               (SQLITE_AUTH | (1<<8))",
          "543: #define SQLITE_OK_LOAD_PERMANENTLY     (SQLITE_OK | (1<<8))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "544: #define SQLITE_OK_SYMLINK              (SQLITE_OK | (2<<8))",
          "",
          "---------------"
        ],
        "src/test_demovfs.c||src/test_demovfs.c": [
          "File: src/test_demovfs.c -> src/test_demovfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "512:   );",
          "519:   if( flags==SQLITE_ACCESS_READWRITE ) eAccess = R_OK|W_OK;",
          "520:   if( flags==SQLITE_ACCESS_READ )      eAccess = R_OK;",
          "",
          "[Removed Lines]",
          "514:   if( flags==SQLITE_ACCESS_SYMLINK ){",
          "517:     return SQLITE_OK;",
          "518:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test_vfs.c||src/test_vfs.c": [
          "File: src/test_vfs.c -> src/test_vfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "732:     if( flags==SQLITE_ACCESS_EXISTS ) zArg = \"SQLITE_ACCESS_EXISTS\";",
          "733:     if( flags==SQLITE_ACCESS_READWRITE ) zArg = \"SQLITE_ACCESS_READWRITE\";",
          "734:     if( flags==SQLITE_ACCESS_READ ) zArg = \"SQLITE_ACCESS_READ\";",
          "736:     tvfsExecTcl(p, \"xAccess\",",
          "737:         Tcl_NewStringObj(zPath, -1), Tcl_NewStringObj(zArg, -1), 0, 0",
          "738:     );",
          "",
          "[Removed Lines]",
          "735:     if( flags==SQLITE_ACCESS_SYMLINK ) zArg = \"SQLITE_ACCESS_SYMLINK\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "efa78884a8f0049b73e581c7cc93d3070ab1a453",
      "candidate_info": {
        "commit_hash": "efa78884a8f0049b73e581c7cc93d3070ab1a453",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/efa78884a8f0049b73e581c7cc93d3070ab1a453",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/window1.test"
        ],
        "message": "Fix a problem handling constant integer expressions with collation sequences in PARTITION BY clauses.\n\nFossilOrigin-Name: 155e6649efe8614718be7ac6c3cccf5b073ae57496dc220db5e4313621f5188e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/window.c||src/window.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3a16c0ce4d8851f79f670d94786032c8007619154ece44647dc9cc5b1f9654ff",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "895:     int i;",
          "896:     int nInit = pList ? pList->nExpr : 0;",
          "897:     for(i=0; i<pAppend->nExpr; i++){",
          "899:       Expr *pDup = sqlite3ExprDup(pParse->db, pAppend->a[i].pExpr, 0);",
          "900:       assert( pDup==0 || !ExprHasProperty(pDup, EP_MemToken) );",
          "905:       }",
          "906:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
          "907:       if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;",
          "",
          "[Removed Lines]",
          "898:       int iDummy;",
          "901:       if( bIntToNull && pDup && sqlite3ExprIsInteger(pDup, &iDummy) ){",
          "902:         pDup->op = TK_NULL;",
          "903:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
          "904:         pDup->u.zToken = 0;",
          "",
          "[Added Lines]",
          "900:       if( bIntToNull && pDup ){",
          "901:         int iDummy;",
          "902:         Expr *pSub;",
          "903:         for(pSub=pDup; ExprHasProperty(pSub, EP_Skip); pSub=pSub->pLeft){",
          "904:           assert( pSub );",
          "905:         }",
          "906:         if( sqlite3ExprIsInteger(pSub, &iDummy) ){",
          "907:           pSub->op = TK_NULL;",
          "908:           pSub->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
          "909:           pSub->u.zToken = 0;",
          "910:         }",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1663:                   sum(b) OVER(PARTITION BY min(DISTINCT c), c ORDER BY b)));",
          "1664: } {1 {row value misused}}",
          "1666: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1666: #-------------------------------------------------------------------------",
          "1667: reset_db",
          "1668: do_execsql_test 52.1 {",
          "1669:   CREATE TABLE t1(a, b, c);",
          "1670:   INSERT INTO t1 VALUES('AA','bb',356);",
          "1671:   INSERT INTO t1 VALUES('CC','aa',158);",
          "1672:   INSERT INTO t1 VALUES('BB','aa',399);",
          "1673:   INSERT INTO t1 VALUES('FF','bb',938);",
          "1674: }",
          "1676: do_execsql_test 52.2 {",
          "1677:   SELECT",
          "1678:     count() OVER win1,",
          "1679:     sum(c) OVER win2,",
          "1680:     first_value(c) OVER win2,",
          "1681:     count(a) OVER (ORDER BY b)",
          "1682:       FROM t1",
          "1683:       WINDOW",
          "1684:       win1 AS (ORDER BY a),",
          "1685:     win2 AS (PARTITION BY 6 ORDER BY a",
          "1686:         RANGE BETWEEN 5 PRECEDING AND 0 PRECEDING );",
          "1687: } {",
          "1688:   1 356 356 4",
          "1689:   2 399 399 2",
          "1690:   3 158 158 2",
          "1691:   4 938 938 4",
          "1692: }",
          "1694: do_execsql_test 52.3 {",
          "1695: SELECT",
          "1696:   count() OVER (),",
          "1697:   sum(c) OVER win2,",
          "1698:   first_value(c) OVER win2,",
          "1699:   count(a) OVER (ORDER BY b)",
          "1700: FROM t1",
          "1701: WINDOW",
          "1702:   win1 AS (ORDER BY a),",
          "1703:   win2 AS (PARTITION BY 6 COLLATE binary ORDER BY a",
          "1704:            RANGE BETWEEN 5 PRECEDING AND 0 PRECEDING );",
          "1705: } {",
          "1706:   4 356 356 4",
          "1707:   4 399 399 2",
          "1708:   4 158 158 2",
          "1709:   4 938 938 4",
          "1710: }",
          "1712: do_execsql_test 52.4 {",
          "1713:   SELECT",
          "1714:     count() OVER win1,",
          "1715:     sum(c) OVER win2,",
          "1716:     first_value(c) OVER win2,",
          "1717:     count(a) OVER (ORDER BY b)",
          "1718:   FROM t1",
          "1719:   WINDOW",
          "1720:     win1 AS (ORDER BY a),",
          "1721:     win2 AS (PARTITION BY 6 COLLATE binary ORDER BY a",
          "1722:              RANGE BETWEEN 5 PRECEDING AND 0 PRECEDING );",
          "1723: } {",
          "1724:   1 356 356 4",
          "1725:   2 399 399 2",
          "1726:   3 158 158 2",
          "1727:   4 938 938 4",
          "1728: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8b65e5919d3f36d807d9f50e5ef649eacc77e0fe",
      "candidate_info": {
        "commit_hash": "8b65e5919d3f36d807d9f50e5ef649eacc77e0fe",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8b65e5919d3f36d807d9f50e5ef649eacc77e0fe",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/check.test",
          "test/checkfault.test"
        ],
        "message": "When processing a BETWEEN or CASE expression, avoid transforming a node of the original expression into a TK_REGISTER node. Instead, take a copy and use it instead. Fix for [1be72aab9].\n\nFossilOrigin-Name: 7ef7b23cbb1b9ace9f853238d9133320c153e6c3417e6823ab6394ee1fe56358",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/check.test||test/check.test",
          "test/checkfault.test||test/checkfault.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 84a51a755c18ac8253080db6eec505df894ee3b1e97cfa8e61039ac38001e270",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1086:   return EXPR_FULLSIZE;",
          "1087: }",
          "",
          "[Removed Lines]",
          "1094: static void exprNodeCopy(Expr *pDest, Expr *pSrc){",
          "1095:   memset(pDest, 0, sizeof(Expr));",
          "1096:   memcpy(pDest, pSrc, exprStructSize(pSrc));",
          "1097: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4052:       assert( !ExprHasProperty(pExpr, EP_xIsSelect) && pExpr->x.pList );",
          "4053:       assert(pExpr->x.pList->nExpr > 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4041:       Expr *pDel = 0;",
          "4042:       sqlite3 *db = pParse->db;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4056:       nExpr = pEList->nExpr;",
          "4057:       endLabel = sqlite3VdbeMakeLabel(pParse);",
          "4058:       if( (pX = pExpr->pLeft)!=0 ){",
          "4060:         testcase( pX->op==TK_COLUMN );",
          "4062:         testcase( regFree1==0 );",
          "4063:         memset(&opCompare, 0, sizeof(opCompare));",
          "4064:         opCompare.op = TK_EQ;",
          "4066:         pTest = &opCompare;",
          "",
          "[Removed Lines]",
          "4059:         exprNodeCopy(&tempX, pX);",
          "4061:         exprToRegister(&tempX, exprCodeVector(pParse, &tempX, &regFree1));",
          "4065:         opCompare.pLeft = &tempX;",
          "",
          "[Added Lines]",
          "4051:         pDel = sqlite3ExprDup(db, pX, 0);",
          "4052:         if( db->mallocFailed ){",
          "4053:           sqlite3ExprDelete(db, pDel);",
          "4054:           break;",
          "4055:         }",
          "4057:         exprToRegister(pDel, exprCodeVector(pParse, pDel, &regFree1));",
          "4061:         opCompare.pLeft = pDel;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4090:       }else{",
          "4091:         sqlite3VdbeAddOp2(v, OP_Null, 0, target);",
          "4092:       }",
          "4093:       sqlite3VdbeResolveLabel(v, endLabel);",
          "4094:       break;",
          "4095:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4089:       sqlite3ExprDelete(db, pDel);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4373: ){",
          "4380:   memset(&compLeft, 0, sizeof(Expr));",
          "4381:   memset(&compRight, 0, sizeof(Expr));",
          "4382:   memset(&exprAnd, 0, sizeof(Expr));",
          "4384:   assert( !ExprHasProperty(pExpr, EP_xIsSelect) );",
          "4406:   }",
          "4410:   testcase( xJump==sqlite3ExprIfTrue  && jumpIfNull==0 && regFree1==0 );",
          "",
          "[Removed Lines]",
          "4385:   exprNodeCopy(&exprX, pExpr->pLeft);",
          "4386:   exprAnd.op = TK_AND;",
          "4387:   exprAnd.pLeft = &compLeft;",
          "4388:   exprAnd.pRight = &compRight;",
          "4389:   compLeft.op = TK_GE;",
          "4390:   compLeft.pLeft = &exprX;",
          "4391:   compLeft.pRight = pExpr->x.pList->a[0].pExpr;",
          "4392:   compRight.op = TK_LE;",
          "4393:   compRight.pLeft = &exprX;",
          "4394:   compRight.pRight = pExpr->x.pList->a[1].pExpr;",
          "4395:   exprToRegister(&exprX, exprCodeVector(pParse, &exprX, &regFree1));",
          "4396:   if( xJump ){",
          "4397:     xJump(pParse, &exprAnd, dest, jumpIfNull);",
          "4398:   }else{",
          "4404:     exprX.flags |= EP_FromJoin;",
          "4405:     sqlite3ExprCodeTarget(pParse, &exprAnd, dest);",
          "4407:   sqlite3ReleaseTempReg(pParse, regFree1);",
          "",
          "[Added Lines]",
          "4375:   Expr *pDel = 0;",
          "4376:   sqlite3 *db = pParse->db;",
          "4383:   pDel = sqlite3ExprDup(db, pExpr->pLeft, 0);",
          "4384:   if( db->mallocFailed==0 ){",
          "4385:     exprAnd.op = TK_AND;",
          "4386:     exprAnd.pLeft = &compLeft;",
          "4387:     exprAnd.pRight = &compRight;",
          "4388:     compLeft.op = TK_GE;",
          "4389:     compLeft.pLeft = pDel;",
          "4390:     compLeft.pRight = pExpr->x.pList->a[0].pExpr;",
          "4391:     compRight.op = TK_LE;",
          "4392:     compRight.pLeft = pDel;",
          "4393:     compRight.pRight = pExpr->x.pList->a[1].pExpr;",
          "4394:     exprToRegister(pDel, exprCodeVector(pParse, pDel, &regFree1));",
          "4395:     if( xJump ){",
          "4396:       xJump(pParse, &exprAnd, dest, jumpIfNull);",
          "4397:     }else{",
          "4403:       pDel->flags |= EP_FromJoin;",
          "4404:       sqlite3ExprCodeTarget(pParse, &exprAnd, dest);",
          "4405:     }",
          "4406:     sqlite3ReleaseTempReg(pParse, regFree1);",
          "4408:   sqlite3ExprDelete(db, pDel);",
          "",
          "---------------"
        ],
        "test/check.test||test/check.test": [
          "File: test/check.test -> test/check.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "495:   PRAGMA integrity_check;",
          "496: } {ok}",
          "498: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "498: #-------------------------------------------------------------------------",
          "499: reset_db",
          "500: do_execsql_test 11.0 {",
          "501:   CREATE TABLE t1 (Col0 CHECK(1 COLLATE BINARY BETWEEN 1 AND 1) ) ;",
          "502: }",
          "503: do_execsql_test 11.1 {",
          "504:   INSERT INTO t1 VALUES (NULL);",
          "505: }",
          "506: do_execsql_test 11.2 {",
          "507:   INSERT  INTO t1 VALUES (NULL);",
          "508: }",
          "510: do_execsql_test 11.3 {",
          "511:   CREATE TABLE t2(b, a CHECK(",
          "512:       CASE 'abc' COLLATE nocase WHEN a THEN 1 ELSE 0 END)",
          "513:   );",
          "514: }",
          "515: do_execsql_test 11.4 {",
          "516:   INSERT INTO t2(a) VALUES('abc');",
          "517: }",
          "518: do_execsql_test 11.5 {",
          "519:   INSERT INTO t2(b, a) VALUES(1, 'abc'||'');",
          "520: }",
          "521: do_execsql_test 11.6 {",
          "522:   INSERT INTO t2(b, a) VALUES(2, 'abc');",
          "523: }",
          "525: finish_test",
          "",
          "---------------"
        ],
        "test/checkfault.test||test/checkfault.test": [
          "File: test/checkfault.test -> test/checkfault.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 July 17",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "12: # This file contains fault-injection test cases for the",
          "13: # sqlite3_db_cacheflush API.",
          "14: #",
          "16: set testdir [file dirname $argv0]",
          "17: source $testdir/tester.tcl",
          "18: set testprefix cffault",
          "19: source $testdir/malloc_common.tcl",
          "21: do_execsql_test 1.0 {",
          "22:   CREATE TABLE t1 (Col0 CHECK(1 COLLATE BINARY BETWEEN 1 AND 1) ) ;",
          "23:   CREATE TABLE t2(b, a CHECK(",
          "24:       CASE 'abc' COLLATE nocase WHEN a THEN 1 ELSE 0 END)",
          "25:   );",
          "26: }",
          "28: do_faultsim_test 1.1 -faults oom* -body {",
          "29:   execsql { INSERT INTO t1 VALUES ('ABCDEFG') }",
          "30: } -test {",
          "31:   faultsim_test_result {0 {}}",
          "32: }",
          "34: do_faultsim_test 1.2 -faults oom* -body {",
          "35:   execsql { INSERT INTO t2(a) VALUES('abc') }",
          "36: } -test {",
          "37:   faultsim_test_result {0 {}}",
          "38: }",
          "41: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7b1904e35da41683dbb2dc71b3c55f68726a5008",
      "candidate_info": {
        "commit_hash": "7b1904e35da41683dbb2dc71b3c55f68726a5008",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7b1904e35da41683dbb2dc71b3c55f68726a5008",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pragma.c",
          "test/without_rowid7.test"
        ],
        "message": "Enhance the \"PRAGMA index_info()\" and \"PRAGMA index_xinfo()\" statements so that they allow a WITHOUT ROWID table as their argument, and in that case show the structure of the underlying index used to implement the WITHOUT ROWID table.\n\nFossilOrigin-Name: 62274ff683ba077d8b0fa34ad653ce235a8c5cbfdb7ab8558469af7333d03698",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pragma.c||src/pragma.c",
          "test/without_rowid7.test||test/without_rowid7.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bd9a47a3a2997bfbf9c8a11c5b7196e362974054e58a2fe701778b1580264de8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1157:     Index *pIdx;",
          "1158:     Table *pTab;",
          "1159:     pIdx = sqlite3FindIndex(db, zRight, zDb);",
          "1160:     if( pIdx ){",
          "1161:       int iIdxDb = sqlite3SchemaToIndex(db, pIdx->pSchema);",
          "1162:       int i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1160:     if( pIdx==0 ){",
          "1164:       pTab = sqlite3LocateTable(pParse, LOCATE_NOERR, zRight, zDb);",
          "1165:       if( pTab && !HasRowid(pTab) ){",
          "1166:         pIdx = sqlite3PrimaryKeyIndex(pTab);",
          "1167:       }",
          "1168:     }",
          "",
          "---------------"
        ],
        "test/without_rowid7.test||test/without_rowid7.test": [
          "File: test/without_rowid7.test -> test/without_rowid7.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: do_execsql_test 2.0 {",
          "29: }",
          "31: do_execsql_test 2.1 {",
          "",
          "[Removed Lines]",
          "28:   CREATE TABLE t2(a, b, PRIMARY KEY(a, a COLLATE nocase, a)) WITHOUT ROWID;",
          "",
          "[Added Lines]",
          "28:   CREATE TABLE t2(a, b, PRIMARY KEY(a COLLATE nocase, a)) WITHOUT ROWID;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:   SELECT b FROM t2;",
          "34: } {one}",
          "",
          "[Removed Lines]",
          "37: finish_test",
          "",
          "[Added Lines]",
          "36: do_execsql_test 2.2a {",
          "37:   PRAGMA index_info(t2);",
          "38: } {0 0 a 1 0 a}",
          "39: do_execsql_test 2.2b {",
          "40:   SELECT *, '|' FROM pragma_index_info('t2');",
          "41: } {0 0 a | 1 0 a |}",
          "42: do_execsql_test 2.3a {",
          "43:   PRAGMA index_xinfo(t2);",
          "44: } {0 0 a 0 nocase 1 1 0 a 0 BINARY 1 2 1 b 0 BINARY 0}",
          "45: do_execsql_test 2.3b {",
          "46:   SELECT *, '|' FROM pragma_index_xinfo('t2');",
          "47: } {0 0 a 0 nocase 1 | 1 0 a 0 BINARY 1 | 2 1 b 0 BINARY 0 |}",
          "49: do_execsql_test 2.4 {",
          "50:   CREATE TABLE t3(a, b, PRIMARY KEY(a COLLATE nocase, a));",
          "51:   PRAGMA index_info(t3);",
          "52: } {}",
          "56: finish_test",
          "",
          "---------------"
        ]
      }
    }
  ]
}