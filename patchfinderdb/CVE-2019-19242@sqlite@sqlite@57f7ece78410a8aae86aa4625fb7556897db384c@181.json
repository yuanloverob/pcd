{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d406d0726267d7691e7ce121da100e941bc0845a",
      "candidate_info": {
        "commit_hash": "d406d0726267d7691e7ce121da100e941bc0845a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d406d0726267d7691e7ce121da100e941bc0845a",
        "files": [
          "ext/fts5/fts5_hash.c",
          "ext/fts5/test/fts5aa.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a buffer overread that could occur when running fts5 prefix queries inside a transaction.\n\nFossilOrigin-Name: b3fa58dd7403dbd4d2e9f3ae23d7d1337830d6fef2aa2f137ac5174de0d5828e",
        "before_after_code_files": [
          "ext/fts5/fts5_hash.c||ext/fts5/fts5_hash.c",
          "ext/fts5/test/fts5aa.test||ext/fts5/test/fts5aa.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_hash.c||ext/fts5/fts5_hash.c": [
          "File: ext/fts5/fts5_hash.c -> ext/fts5/fts5_hash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "456:   for(iSlot=0; iSlot<pHash->nSlot; iSlot++){",
          "457:     Fts5HashEntry *pIter;",
          "458:     for(pIter=pHash->aSlot[iSlot]; pIter; pIter=pIter->pHashNext){",
          "460:         Fts5HashEntry *pEntry = pIter;",
          "461:         pEntry->pScanNext = 0;",
          "462:         for(i=0; ap[i]; i++){",
          "",
          "[Removed Lines]",
          "459:       if( pTerm==0 || 0==memcmp(fts5EntryKey(pIter), pTerm, nTerm) ){",
          "",
          "[Added Lines]",
          "459:       if( pTerm==0",
          "460:        || (pIter->nKey+1>=nTerm && 0==memcmp(fts5EntryKey(pIter), pTerm, nTerm))",
          "461:       ){",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5aa.test||ext/fts5/test/fts5aa.test": [
          "File: ext/fts5/test/fts5aa.test -> ext/fts5/test/fts5aa.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "622:     SELECT * FROM t12('aaaa');",
          "623: } {aaaa}",
          "625: }",
          "627: expand_all_sql db",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "625: #-------------------------------------------------------------------------",
          "626: do_execsql_test 25.0 {",
          "627:   CREATE VIRTUAL TABLE t13 USING fts5(x, detail=%DETAIL%);",
          "628: }",
          "629: do_execsql_test 25.1 {",
          "630:   BEGIN;",
          "631:   INSERT INTO t13 VALUES('AAAA');",
          "632: SELECT * FROM t13('BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB*');",
          "634:   END;",
          "635: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 45c73deb440496e848cb24d4c1326d4105dacfee8bbafb115e567051855e6518",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1194904b814d6da63930dee75bc468094706226a",
      "candidate_info": {
        "commit_hash": "1194904b814d6da63930dee75bc468094706226a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1194904b814d6da63930dee75bc468094706226a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/fkey.c",
          "src/parse.y",
          "src/resolve.c",
          "src/sqliteInt.h",
          "src/treeview.c"
        ],
        "message": "Refactor field Expr.affinity into Expr.affExpr to avoid confusion with other fields and variables named \"affinity\" and display affExpr it in sqlite3TreeViewExpr() output.\n\nFossilOrigin-Name: a29f2a7d07beff64e489e8f824babc6228c4a499fadc0ee701caa60a63baadcd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/fkey.c||src/fkey.c",
          "src/parse.y||src/parse.y",
          "src/resolve.c||src/resolve.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/treeview.c||src/treeview.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4b00799bdf107fce8a9dd84fd5bf6597e4f3373659b89aae4a1242be5964726f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:         pExpr->pLeft->x.pSelect->pEList->a[pExpr->iColumn].pExpr",
          "72:     );",
          "73:   }",
          "75: }",
          "",
          "[Removed Lines]",
          "74:   return pExpr->affinity;",
          "",
          "[Added Lines]",
          "74:   return pExpr->affExpr;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4099:     }",
          "4100: #ifndef SQLITE_OMIT_TRIGGER",
          "4101:     case TK_RAISE: {",
          "4106:       );",
          "4107:       if( !pParse->pTriggerTab ){",
          "4108:         sqlite3ErrorMsg(pParse,",
          "4109:                        \"RAISE() may only be used within a trigger-program\");",
          "4110:         return 0;",
          "4111:       }",
          "4113:         sqlite3MayAbort(pParse);",
          "4114:       }",
          "4115:       assert( !ExprHasProperty(pExpr, EP_IntValue) );",
          "4117:         sqlite3VdbeAddOp4(",
          "4118:             v, OP_Halt, SQLITE_OK, OE_Ignore, 0, pExpr->u.zToken,0);",
          "4119:         VdbeCoverage(v);",
          "4120:       }else{",
          "4121:         sqlite3HaltConstraint(pParse, SQLITE_CONSTRAINT_TRIGGER,",
          "4123:       }",
          "4125:       break;",
          "",
          "[Removed Lines]",
          "4102:       assert( pExpr->affinity==OE_Rollback",
          "4103:            || pExpr->affinity==OE_Abort",
          "4104:            || pExpr->affinity==OE_Fail",
          "4105:            || pExpr->affinity==OE_Ignore",
          "4112:       if( pExpr->affinity==OE_Abort ){",
          "4116:       if( pExpr->affinity==OE_Ignore ){",
          "4122:                               pExpr->affinity, pExpr->u.zToken, 0, 0);",
          "",
          "[Added Lines]",
          "4102:       assert( pExpr->affExpr==OE_Rollback",
          "4103:            || pExpr->affExpr==OE_Abort",
          "4104:            || pExpr->affExpr==OE_Fail",
          "4105:            || pExpr->affExpr==OE_Ignore",
          "4112:       if( pExpr->affExpr==OE_Abort ){",
          "4116:       if( pExpr->affExpr==OE_Ignore ){",
          "4122:                               pExpr->affExpr, pExpr->u.zToken, 0, 0);",
          "",
          "---------------"
        ],
        "src/fkey.c||src/fkey.c": [
          "File: src/fkey.c -> src/fkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "478:     if( iCol>=0 && iCol!=pTab->iPKey ){",
          "479:       pCol = &pTab->aCol[iCol];",
          "480:       pExpr->iTable = regBase + iCol + 1;",
          "482:       zColl = pCol->zColl;",
          "483:       if( zColl==0 ) zColl = db->pDfltColl->zName;",
          "484:       pExpr = sqlite3ExprAddCollateString(pParse, pExpr, zColl);",
          "485:     }else{",
          "486:       pExpr->iTable = regBase;",
          "488:     }",
          "489:   }",
          "490:   return pExpr;",
          "",
          "[Removed Lines]",
          "481:       pExpr->affinity = pCol->affinity;",
          "487:       pExpr->affinity = SQLITE_AFF_INTEGER;",
          "",
          "[Added Lines]",
          "481:       pExpr->affExpr = pCol->affinity;",
          "487:       pExpr->affExpr = SQLITE_AFF_INTEGER;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1287:       tFrom.n = nFrom;",
          "1288:       pRaise = sqlite3Expr(db, TK_RAISE, \"FOREIGN KEY constraint failed\");",
          "1289:       if( pRaise ){",
          "1291:       }",
          "1292:       pSelect = sqlite3SelectNew(pParse,",
          "1293:           sqlite3ExprListAppend(pParse, 0, pRaise),",
          "",
          "[Removed Lines]",
          "1290:         pRaise->affinity = OE_Abort;",
          "",
          "[Added Lines]",
          "1290:         pRaise->affExpr = OE_Abort;",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "949:     if( p ){",
          "951:       p->op = (u8)op;",
          "953:       p->flags = EP_Leaf;",
          "954:       p->iAgg = -1;",
          "955:       p->pLeft = p->pRight = 0;",
          "",
          "[Removed Lines]",
          "952:       p->affinity = 0;",
          "",
          "[Added Lines]",
          "952:       p->affExpr = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1508: expr(A) ::= RAISE LP IGNORE RP.  {",
          "1509:   A = sqlite3PExpr(pParse, TK_RAISE, 0, 0);",
          "1510:   if( A ){",
          "1512:   }",
          "1513: }",
          "1514: expr(A) ::= RAISE LP raisetype(T) COMMA nm(Z) RP.  {",
          "1515:   A = sqlite3ExprAlloc(pParse->db, TK_RAISE, &Z, 1);",
          "1516:   if( A ) {",
          "1518:   }",
          "1519: }",
          "1520: %endif  !SQLITE_OMIT_TRIGGER",
          "",
          "[Removed Lines]",
          "1511:     A->affinity = OE_Ignore;",
          "1517:     A->affinity = (char)T;",
          "",
          "[Added Lines]",
          "1511:     A->affExpr = OE_Ignore;",
          "1517:     A->affExpr = (char)T;",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "381:           {",
          "382: #ifndef SQLITE_OMIT_TRIGGER",
          "383:             if( iCol<0 ){",
          "385:             }else if( pExpr->iTable==0 ){",
          "386:               testcase( iCol==31 );",
          "387:               testcase( iCol==32 );",
          "",
          "[Removed Lines]",
          "384:               pExpr->affinity = SQLITE_AFF_INTEGER;",
          "",
          "[Added Lines]",
          "384:               pExpr->affExpr = SQLITE_AFF_INTEGER;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "413:     ){",
          "414:       cnt = 1;",
          "415:       pExpr->iColumn = -1;",
          "417:     }",
          "",
          "[Removed Lines]",
          "416:       pExpr->affinity = SQLITE_AFF_INTEGER;",
          "",
          "[Added Lines]",
          "416:       pExpr->affExpr = SQLITE_AFF_INTEGER;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "402:     sqlite3TreeViewPop(pView);",
          "403:     return;",
          "404:   }",
          "406:     if( ExprHasProperty(pExpr, EP_FromJoin) ){",
          "409:     }else{",
          "411:     }",
          "412:   }else{",
          "413:     zFlgs[0] = 0;",
          "",
          "[Removed Lines]",
          "405:   if( pExpr->flags ){",
          "407:       sqlite3_snprintf(sizeof(zFlgs),zFlgs,\"  flags=0x%x iRJT=%d\",",
          "408:                        pExpr->flags, pExpr->iRightJoinTable);",
          "410:       sqlite3_snprintf(sizeof(zFlgs),zFlgs,\"  flags=0x%x\",pExpr->flags);",
          "",
          "[Added Lines]",
          "405:   if( pExpr->flags || pExpr->affExpr ){",
          "407:       sqlite3_snprintf(sizeof(zFlgs),zFlgs,\"  fg.af=%x.%c iRJT=%d\",",
          "408:                        pExpr->flags, pExpr->affExpr ? pExpr->affExpr : 'n',",
          "409:                        pExpr->iRightJoinTable);",
          "411:       sqlite3_snprintf(sizeof(zFlgs),zFlgs,\"  fg.af=%x.%c\",",
          "412:                        pExpr->flags, pExpr->affExpr ? pExpr->affExpr : 'n');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "635: #ifndef SQLITE_OMIT_TRIGGER",
          "636:     case TK_RAISE: {",
          "637:       const char *zType = \"unk\";",
          "639:         case OE_Rollback:   zType = \"rollback\";  break;",
          "640:         case OE_Abort:      zType = \"abort\";     break;",
          "641:         case OE_Fail:       zType = \"fail\";      break;",
          "",
          "[Removed Lines]",
          "638:       switch( pExpr->affinity ){",
          "",
          "[Added Lines]",
          "640:       switch( pExpr->affExpr ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "676:     sqlite3TreeViewExpr(pView, pExpr->pRight, 0);",
          "677:   }else if( zUniOp ){",
          "678:     sqlite3TreeViewLine(pView, \"%s%s\", zUniOp, zFlgs);",
          "680:   }",
          "681:   sqlite3TreeViewPop(pView);",
          "682: }",
          "",
          "[Removed Lines]",
          "679:     sqlite3TreeViewExpr(pView, pExpr->pLeft, 0);",
          "",
          "[Added Lines]",
          "681:    sqlite3TreeViewExpr(pView, pExpr->pLeft, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8328369740b33c1de8ed362fc70e76d07f1e1159",
      "candidate_info": {
        "commit_hash": "8328369740b33c1de8ed362fc70e76d07f1e1159",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8328369740b33c1de8ed362fc70e76d07f1e1159",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/minmax4.test"
        ],
        "message": "Add tests to ensure that this branch really does fix ticket [f8a7060ece].\n\nFossilOrigin-Name: f892066425671a8a0ac923e3ad4744677f6434a66f97b91afa8141f11f179975",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/minmax4.test||test/minmax4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b49df1fe9b7174ebc60023179e8da628c926e59df3dc01b15d4a28e17807bb97",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/minmax4.test||test/minmax4.test": [
          "File: test/minmax4.test -> test/minmax4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "200:   SELECT MIN(a) FROM t1 WHERE a=123;",
          "201: } {123}",
          "203: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203: #-------------------------------------------------------------------------",
          "204: # Tests for ticket f8a7060ece.",
          "205: #",
          "206: reset_db",
          "207: do_execsql_test 6.1.0 {",
          "208:   CREATE TABLE t1(a, b, c);",
          "209:   INSERT INTO t1 VALUES(NULL, 1, 'x');",
          "210:   CREATE INDEX i1 ON t1(a);",
          "211: }",
          "212: do_execsql_test 6.1.1 {",
          "213:   SELECT min(a), b, c FROM t1 WHERE c='x';",
          "214: } {{} 1 x}",
          "215: do_execsql_test 6.1.2 {",
          "216:   INSERT INTO t1 VALUES(1,    2, 'y');",
          "217: } {}",
          "218: do_execsql_test 6.1.3 {",
          "219:   SELECT min(a), b, c FROM t1 WHERE c='x';",
          "220: } {{} 1 x}",
          "222: do_execsql_test 6.2.0 {",
          "223:   CREATE TABLE t0(c0 UNIQUE, c1);",
          "224:   INSERT INTO t0(c1) VALUES (0);",
          "225:   INSERT INTO t0(c0) VALUES (0);",
          "226:   CREATE VIEW v0(c0, c1) AS",
          "227:       SELECT t0.c1, t0.c0 FROM t0 WHERE CAST(t0.rowid AS INT) = 1;",
          "228: }",
          "229: do_execsql_test 6.2.1 {",
          "230:   SELECT c0, c1 FROM v0;",
          "231: } {0 {}}",
          "232: do_execsql_test 6.2.2 {",
          "233:   SELECT v0.c0, MIN(v0.c1) FROM v0;",
          "234: } {0 {}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fbf6136c78d1754501203449d0d16cef3ab25663",
      "candidate_info": {
        "commit_hash": "fbf6136c78d1754501203449d0d16cef3ab25663",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fbf6136c78d1754501203449d0d16cef3ab25663",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/shell4.test"
        ],
        "message": "Do not attempt to test the shell \".trace\" command in SQLITE_OMIT_TRACE builds.\n\nFossilOrigin-Name: 3839e9098107604e1526c2b1e813c019607077dfe39d7eeb92f3466518dec3b1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/shell4.test||test/shell4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d2cca36adc69d2c8e7707d70cbd75c497eae6a1a3f8a9dd18249ca6804c9db5f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/shell4.test||test/shell4.test": [
          "File: test/shell4.test -> test/shell4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:        [regexp {Autoindex Inserts} $res]",
          "107: } {1 1 1}",
          "109: do_test shell4-2.1 {",
          "110:   catchcmd \":memory:\" \"CREATE TABLE t1(x);\\n.trace --unknown\"",
          "111: } {1 {Unknown option \"--unknown\" on \".trace\"}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109: ifcapable trace {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115: do_test shell4-2.3 {",
          "116:   catchcmd \":memory:\" \".trace stdout\\n.dump\\n.trace off\\n\"",
          "117: } {/^0 {PRAGMA.*}$/}",
          "119: do_test shell4-2.4 {",
          "120:   catchcmd \":memory:\" \".trace stdout\\nCREATE TABLE t1(x);SELECT * FROM t1;\"",
          "121: } {0 {CREATE TABLE t1(x);",
          "",
          "[Removed Lines]",
          "118: ifcapable trace {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "75db74fdaeaeef414793f03c0fea93fb6ed8c92b",
      "candidate_info": {
        "commit_hash": "75db74fdaeaeef414793f03c0fea93fb6ed8c92b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/75db74fdaeaeef414793f03c0fea93fb6ed8c92b",
        "files": [
          "ext/misc/fossildelta.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Improved comments on the fossildelta.c extension.\n\nFossilOrigin-Name: d7d23f0450d659b2c7df34e4df8623ca7b6fe3bd19422e3e9234515214ae8510",
        "before_after_code_files": [
          "ext/misc/fossildelta.c||ext/misc/fossildelta.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/fossildelta.c||ext/misc/fossildelta.c": [
          "File: ext/misc/fossildelta.c -> ext/misc/fossildelta.c"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fd085e9260bec18f968704abb2dd324d954baa121d13b67c3f5b801e9e3834aa",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}