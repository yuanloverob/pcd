{
  "cve_id": "CVE-2022-0712",
  "cve_desc": "NULL Pointer Dereference in GitHub repository radareorg/radare2 prior to 5.6.4.",
  "repo": "radareorg/radare2",
  "patch_hash": "515e592b9bea0612bc63d8e93239ff35bcf645c7",
  "patch_info": {
    "commit_hash": "515e592b9bea0612bc63d8e93239ff35bcf645c7",
    "repo": "radareorg/radare2",
    "commit_url": "https://github.com/radareorg/radare2/commit/515e592b9bea0612bc63d8e93239ff35bcf645c7",
    "files": [
      "libr/bin/p/bin_symbols.c"
    ],
    "message": "Fix null deref in bin.symbols ##crash\n\n* Reported by cnitlrt via huntr.dev",
    "before_after_code_files": [
      "libr/bin/p/bin_symbols.c||libr/bin/p/bin_symbols.c"
    ]
  },
  "patch_diff": {
    "libr/bin/p/bin_symbols.c||libr/bin/p/bin_symbols.c": [
      "File: libr/bin/p/bin_symbols.c -> libr/bin/p/bin_symbols.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "361:  bool found = false;",
      "362:  for (i = 0; i < element->hdr->n_lined_symbols; i++) {",
      "363:   RCoreSymCacheElementSymbol *sym = (RCoreSymCacheElementSymbol *)&element->lined_symbols[i];",
      "364:   ht_uu_find (hash, sym->paddr, &found);",
      "365:   if (found) {",
      "366:    continue;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "364:   if (!sym) {",
      "365:    break;",
      "366:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "669a404b6d98d5db409a5ebadae4e94b34ef5136",
      "candidate_info": {
        "commit_hash": "669a404b6d98d5db409a5ebadae4e94b34ef5136",
        "repo": "radareorg/radare2",
        "commit_url": "https://github.com/radareorg/radare2/commit/669a404b6d98d5db409a5ebadae4e94b34ef5136",
        "files": [
          "libr/bin/format/mach0/coresymbolication.c",
          "libr/bin/p/bin_symbols.c"
        ],
        "message": "Fix oobread and null deref in symbols file parser ##crash\n\n* Reported by @cnitlrt\n* BountyID: af6c3e9e-b7df-4d80-b48f-77fdd17b4038/\n* Reproducer: symoob",
        "before_after_code_files": [
          "libr/bin/format/mach0/coresymbolication.c||libr/bin/format/mach0/coresymbolication.c",
          "libr/bin/p/bin_symbols.c||libr/bin/p/bin_symbols.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/p/bin_symbols.c||libr/bin/p/bin_symbols.c"
          ],
          "candidate": [
            "libr/bin/p/bin_symbols.c||libr/bin/p/bin_symbols.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/format/mach0/coresymbolication.c||libr/bin/format/mach0/coresymbolication.c": [
          "File: libr/bin/format/mach0/coresymbolication.c -> libr/bin/format/mach0/coresymbolication.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "269:   for (i = 0; i < hdr->n_sections && cursor < end; i++) {",
          "270:    ut8 *sect_start = cursor;",
          "271:    RCoreSymCacheElementSection *sect = &result->sections[i];",
          "272:    sect->vaddr = sect->paddr = r_read_ble (cursor, false, bits);",
          "273:    if (sect->vaddr < page_zero_size) {",
          "274:     sect->vaddr += page_zero_size;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "272:    if (cursor + (word_size * 4) > end) {",
          "273:     goto beach;",
          "274:    }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "359:     continue;",
          "360:    }",
          "361:    string_origin = relative_to_strings? b + start_of_strings : cursor;",
          "362:    lsym->flc.file = str_dup_safe (b, string_origin + file_name_off, end);",
          "363:    if (!lsym->flc.file) {",
          "364:     cursor += R_CS_EL_SIZE_LSYM;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "365:    if (!string_origin) {",
          "366:     cursor += R_CS_EL_SIZE_LSYM;",
          "367:     continue;",
          "368:    }",
          "",
          "---------------"
        ],
        "libr/bin/p/bin_symbols.c||libr/bin/p/bin_symbols.c": [
          "File: libr/bin/p/bin_symbols.c -> libr/bin/p/bin_symbols.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "353: }",
          "355: static RList *symbols(RBinFile *bf) {",
          "358:  RCoreSymCacheElement *element = bf->o->bin_obj;",
          "359:  size_t i;",
          "360:  HtUU *hash = ht_uu_new0 ();",
          "361:  if (!hash) {",
          "363:  }",
          "364:  bool found = false;",
          "378:   }",
          "379:  }",
          "380:  if (element->symbols) {",
          "",
          "[Removed Lines]",
          "356:  RList *res = r_list_newf ((RListFree)r_bin_symbol_free);",
          "357:  r_return_val_if_fail (res && bf->o && bf->o->bin_obj, res);",
          "362:   return res;",
          "365:  for (i = 0; i < element->hdr->n_lined_symbols; i++) {",
          "366:   RCoreSymCacheElementSymbol *sym = (RCoreSymCacheElementSymbol *)&element->lined_symbols[i];",
          "367:   if (!sym) {",
          "368:    break;",
          "369:   }",
          "370:   ht_uu_find (hash, sym->paddr, &found);",
          "371:   if (found) {",
          "372:    continue;",
          "373:   }",
          "374:   RBinSymbol *s = bin_symbol_from_symbol (element, sym);",
          "375:   if (s) {",
          "376:    r_list_append (res, s);",
          "377:    ht_uu_insert (hash, sym->paddr, 1);",
          "",
          "[Added Lines]",
          "356:  r_return_val_if_fail (bf && bf->o && bf->o->bin_obj, NULL);",
          "361:   return NULL;",
          "363:  RList *res = r_list_newf ((RListFree)r_bin_symbol_free);",
          "365:  if (element->lined_symbols) {",
          "366:   for (i = 0; i < element->hdr->n_lined_symbols; i++) {",
          "367:    RCoreSymCacheElementSymbol *sym = (RCoreSymCacheElementSymbol *)&element->lined_symbols[i];",
          "368:    if (!sym) {",
          "369:     break;",
          "370:    }",
          "371:    ht_uu_find (hash, sym->paddr, &found);",
          "372:    if (found) {",
          "373:     continue;",
          "374:    }",
          "375:    RBinSymbol *s = bin_symbol_from_symbol (element, sym);",
          "376:    if (s) {",
          "377:     r_list_append (res, s);",
          "378:     ht_uu_insert (hash, sym->paddr, 1);",
          "379:    }",
          "",
          "---------------"
        ]
      }
    }
  ]
}