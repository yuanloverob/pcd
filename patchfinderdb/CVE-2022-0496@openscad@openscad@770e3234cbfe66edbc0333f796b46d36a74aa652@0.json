{
  "cve_id": "CVE-2022-0496",
  "cve_desc": "A vulnerbiility was found in Openscad, where a DXF-format drawing with particular (not necessarily malformed!) properties may cause an out-of-bounds memory access when imported using import().",
  "repo": "openscad/openscad",
  "patch_hash": "770e3234cbfe66edbc0333f796b46d36a74aa652",
  "patch_info": {
    "commit_hash": "770e3234cbfe66edbc0333f796b46d36a74aa652",
    "repo": "openscad/openscad",
    "commit_url": "https://github.com/openscad/openscad/commit/770e3234cbfe66edbc0333f796b46d36a74aa652",
    "files": [
      "src/dxfdata.cc"
    ],
    "message": "add safety to line lookups in DXF import, fixes #4037\n\nAdd safety (test for, and continue past, bad indices).\nReport warnings about bad indices\nAdd variables just to make the array indices easier to read and debug.",
    "before_after_code_files": [
      "src/dxfdata.cc||src/dxfdata.cc"
    ]
  },
  "patch_diff": {
    "src/dxfdata.cc||src/dxfdata.cc": [
      "File: src/dxfdata.cc -> src/dxfdata.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "441:     auto lv = grid.data(this->points[lines[idx].idx[j]][0], this->points[lines[idx].idx[j]][1]);",
      "442:     for (size_t ki = 0; ki < lv.size(); ++ki) {",
      "443:      int k = lv.at(ki);",
      "444:      if (k == idx || lines[k].disabled) continue;",
      "445:      goto next_open_path_j;",
      "446:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "444:                     if (k < 0 || k >= lines.size()) {",
      "445:                         LOG(message_group::Warning,Location::NONE,\"\",",
      "446:                             \"Bad DXF line index in %1$s.\",QuotedString(boostfs_uncomplete(filename, fs::current_path()).generic_string()));",
      "447:                         continue;",
      "448:                     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "466:    auto lv = grid.data(ref_point[0], ref_point[1]);",
      "467:    for (size_t ki = 0; ki < lv.size(); ++ki) {",
      "468:     int k = lv.at(ki);",
      "469:     if (lines[k].disabled) continue;",
      "471:      current_line = k;",
      "472:      current_point = 0;",
      "473:      goto found_next_line_in_open_path;",
      "474:     }",
      "476:      current_line = k;",
      "477:      current_point = 1;",
      "478:      goto found_next_line_in_open_path;",
      "",
      "[Removed Lines]",
      "470:     if (grid.eq(ref_point[0], ref_point[1], this->points[lines[k].idx[0]][0], this->points[lines[k].idx[0]][1])) {",
      "475:     if (grid.eq(ref_point[0], ref_point[1], this->points[lines[k].idx[1]][0], this->points[lines[k].idx[1]][1])) {",
      "",
      "[Added Lines]",
      "474:                 if (k < 0 || k >= lines.size()) {",
      "475:                     LOG(message_group::Warning,Location::NONE,\"\",",
      "476:                         \"Bad DXF line index in %1$s.\",QuotedString(boostfs_uncomplete(filename, fs::current_path()).generic_string()));",
      "477:                     continue;",
      "478:                 }",
      "480:                 auto idk0 = lines[k].idx[0];    // make it easier to read and debug",
      "481:                 auto idk1 = lines[k].idx[1];",
      "482:     if (grid.eq(ref_point[0], ref_point[1], this->points[idk0][0], this->points[idk0][1])) {",
      "487:     if (grid.eq(ref_point[0], ref_point[1], this->points[idk1][0], this->points[idk1][1])) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "501:    auto lv = grid.data(ref_point[0], ref_point[1]);",
      "502:    for (size_t ki = 0; ki < lv.size(); ++ki) {",
      "503:     int k = lv.at(ki);",
      "504:     if (lines[k].disabled) continue;",
      "506:      current_line = k;",
      "507:      current_point = 0;",
      "508:      goto found_next_line_in_closed_path;",
      "509:     }",
      "511:      current_line = k;",
      "512:      current_point = 1;",
      "513:      goto found_next_line_in_closed_path;",
      "",
      "[Removed Lines]",
      "505:     if (grid.eq(ref_point[0], ref_point[1], this->points[lines[k].idx[0]][0], this->points[lines[k].idx[0]][1])) {",
      "510:      if (grid.eq(ref_point[0], ref_point[1], this->points[lines[k].idx[1]][0], this->points[lines[k].idx[1]][1])) {",
      "",
      "[Added Lines]",
      "516:                 if (k < 0 || k >= lines.size()) {",
      "517:                     LOG(message_group::Warning,Location::NONE,\"\",",
      "518:                         \"Bad DXF line index in %1$s.\",QuotedString(boostfs_uncomplete(filename, fs::current_path()).generic_string()));",
      "519:                     continue;",
      "520:                 }",
      "522:                 auto idk0 = lines[k].idx[0];    // make it easier to read and debug",
      "523:                 auto idk1 = lines[k].idx[1];",
      "524:     if (grid.eq(ref_point[0], ref_point[1], this->points[idk0][0], this->points[idk0][1])) {",
      "529:                 if (grid.eq(ref_point[0], ref_point[1], this->points[idk1][0], this->points[idk1][1])) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "00a4692989c4e2f191525f73f24ad8727bacdf41",
      "candidate_info": {
        "commit_hash": "00a4692989c4e2f191525f73f24ad8727bacdf41",
        "repo": "openscad/openscad",
        "commit_url": "https://github.com/openscad/openscad/commit/00a4692989c4e2f191525f73f24ad8727bacdf41",
        "files": [
          "src/dxfdata.cc"
        ],
        "message": "CVE-2022-0496 Out-of-bounds memory access in DXF loader.\n\nPublic issue:\nhttps://github.com/openscad/openscad/issues/4037\n\nFix in master branch:\nhttps://github.com/openscad/openscad/pull/4090",
        "before_after_code_files": [
          "src/dxfdata.cc||src/dxfdata.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/dxfdata.cc||src/dxfdata.cc"
          ],
          "candidate": [
            "src/dxfdata.cc||src/dxfdata.cc"
          ]
        }
      },
      "candidate_diff": {
        "src/dxfdata.cc||src/dxfdata.cc": [
          "File: src/dxfdata.cc -> src/dxfdata.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "441:     auto lv = grid.data(this->points[lines[idx].idx[j]][0], this->points[lines[idx].idx[j]][1]);",
          "442:     for (size_t ki = 0; ki < lv.size(); ++ki) {",
          "443:      int k = lv.at(ki);",
          "444:      if (k == idx || lines[k].disabled) continue;",
          "445:      goto next_open_path_j;",
          "446:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "444:                     if (k < 0 || k >= lines.size()) {",
          "445:                         LOG(message_group::Warning,Location::NONE,\"\",",
          "446:                             \"Bad DXF line index in %1$s.\",QuotedString(boostfs_uncomplete(filename, fs::current_path()).generic_string()));",
          "447:                         continue;",
          "448:                     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "466:    auto lv = grid.data(ref_point[0], ref_point[1]);",
          "467:    for (size_t ki = 0; ki < lv.size(); ++ki) {",
          "468:     int k = lv.at(ki);",
          "469:     if (lines[k].disabled) continue;",
          "471:      current_line = k;",
          "472:      current_point = 0;",
          "473:      goto found_next_line_in_open_path;",
          "474:     }",
          "476:      current_line = k;",
          "477:      current_point = 1;",
          "478:      goto found_next_line_in_open_path;",
          "",
          "[Removed Lines]",
          "470:     if (grid.eq(ref_point[0], ref_point[1], this->points[lines[k].idx[0]][0], this->points[lines[k].idx[0]][1])) {",
          "475:     if (grid.eq(ref_point[0], ref_point[1], this->points[lines[k].idx[1]][0], this->points[lines[k].idx[1]][1])) {",
          "",
          "[Added Lines]",
          "474:                 if (k < 0 || k >= lines.size()) {",
          "475:                     LOG(message_group::Warning,Location::NONE,\"\",",
          "476:                         \"Bad DXF line index in %1$s.\",QuotedString(boostfs_uncomplete(filename, fs::current_path()).generic_string()));",
          "477:                     continue;",
          "478:                 }",
          "480:                 auto idk0 = lines[k].idx[0];    // make it easier to read and debug",
          "481:                 auto idk1 = lines[k].idx[1];",
          "482:     if (grid.eq(ref_point[0], ref_point[1], this->points[idk0][0], this->points[idk0][1])) {",
          "487:     if (grid.eq(ref_point[0], ref_point[1], this->points[idk1][0], this->points[idk1][1])) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "501:    auto lv = grid.data(ref_point[0], ref_point[1]);",
          "502:    for (size_t ki = 0; ki < lv.size(); ++ki) {",
          "503:     int k = lv.at(ki);",
          "504:     if (lines[k].disabled) continue;",
          "506:      current_line = k;",
          "507:      current_point = 0;",
          "508:      goto found_next_line_in_closed_path;",
          "509:     }",
          "511:      current_line = k;",
          "512:      current_point = 1;",
          "513:      goto found_next_line_in_closed_path;",
          "",
          "[Removed Lines]",
          "505:     if (grid.eq(ref_point[0], ref_point[1], this->points[lines[k].idx[0]][0], this->points[lines[k].idx[0]][1])) {",
          "510:      if (grid.eq(ref_point[0], ref_point[1], this->points[lines[k].idx[1]][0], this->points[lines[k].idx[1]][1])) {",
          "",
          "[Added Lines]",
          "516:                 if (k < 0 || k >= lines.size()) {",
          "517:                     LOG(message_group::Warning,Location::NONE,\"\",",
          "518:                         \"Bad DXF line index in %1$s.\",QuotedString(boostfs_uncomplete(filename, fs::current_path()).generic_string()));",
          "519:                     continue;",
          "520:                 }",
          "522:                 auto idk0 = lines[k].idx[0];    // make it easier to read and debug",
          "523:                 auto idk1 = lines[k].idx[1];",
          "524:     if (grid.eq(ref_point[0], ref_point[1], this->points[idk0][0], this->points[idk0][1])) {",
          "529:                 if (grid.eq(ref_point[0], ref_point[1], this->points[idk1][0], this->points[idk1][1])) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}