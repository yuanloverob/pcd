{
  "cve_id": "CVE-2021-36218",
  "cve_desc": "An issue was discovered in SKALE sgxwallet 1.58.3. sgx_disp_ippsAES_GCMEncrypt allows an out-of-bounds write, resulting in a segfault and compromised enclave. This issue describes a buffer overflow, which was resolved prior to v1.77.0 and not reproducible in latest sgxwallet v1.77.0",
  "repo": "skalenetwork/sgxwallet",
  "patch_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
  "patch_info": {
    "commit_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "repo": "skalenetwork/sgxwallet",
    "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "files": [
      "BLSCrypto.cpp",
      "DKGCrypto.cpp",
      "ECDSACrypto.cpp",
      "SEKManager.cpp",
      "SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl",
      "testw.cpp"
    ],
    "message": "SKALE-3205-restart",
    "before_after_code_files": [
      "BLSCrypto.cpp||BLSCrypto.cpp",
      "DKGCrypto.cpp||DKGCrypto.cpp",
      "ECDSACrypto.cpp||ECDSACrypto.cpp",
      "SEKManager.cpp||SEKManager.cpp",
      "SGXWalletServer.cpp||SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
      "testw.cpp||testw.cpp"
    ]
  },
  "patch_diff": {
    "BLSCrypto.cpp||BLSCrypto.cpp": [
      "File: BLSCrypto.cpp -> BLSCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:     CHECK_STATE(_hexArrayLen > 2 * _len);",
      "90:         _hexArray[j * 2] = hexval[((d[j] >> 4) & 0xF)];",
      "91:         _hexArray[j * 2 + 1] = hexval[(d[j]) & 0x0F];",
      "92:     }",
      "",
      "[Removed Lines]",
      "89:     for (int j = 0; j < _len; j++) {",
      "",
      "[Added Lines]",
      "89:     for (uint64_t j = 0; j < _len; j++) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "105:     CHECK_STATE(_bin_len)",
      "110:     CHECK_STATE(len != 2 * _max_length + 1);",
      "",
      "[Removed Lines]",
      "108:     int len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "[Added Lines]",
      "108:     uint64_t len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "121:         int high = char2int((char) _hex[i * 2]);",
      "122:         int low = char2int((char) _hex[i * 2 + 1]);",
      "",
      "[Removed Lines]",
      "120:     for (int i = 0; i < len / 2; i++) {",
      "",
      "[Added Lines]",
      "120:     for (uint64_t i = 0; i < len / 2; i++) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "248:     strncpy(keyArray->data(), _key, BUF_LEN);",
      "252:     sgx_status_t status = trustedEncryptKeyAES(eid, errStatus, errMsg.data(), keyArray->data(), encryptedKey->data(), &encryptedLen);",
      "",
      "[Removed Lines]",
      "250:     unsigned int encryptedLen = 0;",
      "",
      "[Added Lines]",
      "251:     uint64_t encryptedLen = 0;",
      "",
      "---------------"
    ],
    "DKGCrypto.cpp||DKGCrypto.cpp": [
      "File: DKGCrypto.cpp -> DKGCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "135: string gen_dkg_poly(int _t) {",
      "136:     vector<char> errMsg(BUF_LEN, 0);",
      "137:     int errStatus = 0;",
      "140:     vector <uint8_t> encrypted_dkg_secret(BUF_LEN, 0);",
      "145:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
      "147:     uint64_t length = enc_len;;",
      "",
      "[Removed Lines]",
      "138:     uint32_t enc_len = 0;",
      "144:     sgx_status_t status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "[Added Lines]",
      "138:     uint64_t enc_len = 0;",
      "142:     sgx_status_t status = trustedGenDkgSecretAES(",
      "143:             eid, &errStatus,errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "215:     for (int i = 0; i < _n; i++) {",
      "216:         vector <uint8_t> encryptedSkey(BUF_LEN, 0);",
      "218:         vector<char> currentShare(193, 0);",
      "219:         vector<char> sShareG2(320, 0);",
      "",
      "[Removed Lines]",
      "217:         uint32_t decLen;",
      "",
      "[Added Lines]",
      "217:         uint64_t decLen;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "300:         throw SGXException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
      "301:     }",
      "305:     sgx_status_t status = trustedCreateBlsKeyAES(eid, &errStatus, errMsg.data(), s_shares, encr_key, decKeyLen, encr_bls_key,",
      "306:                                                  &enc_bls_len);",
      "",
      "[Removed Lines]",
      "303:     uint32_t enc_bls_len = 0;",
      "",
      "[Added Lines]",
      "303:     uint64_t enc_bls_len = 0;",
      "",
      "---------------"
    ],
    "ECDSACrypto.cpp||ECDSACrypto.cpp": [
      "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:     vector<char> pub_key_x(BUF_LEN, 0);",
      "55:     vector<char> pub_key_y(BUF_LEN, 0);",
      "59:     sgx_status_t status = trustedGenerateEcdsaKeyAES(eid, &errStatus,",
      "60:                                         errMsg.data(), encr_pr_key.data(), &enc_len,",
      "",
      "[Removed Lines]",
      "57:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "57:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SEKManager.cpp||SEKManager.cpp": [
      "File: SEKManager.cpp -> SEKManager.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "52: void create_test_key() {",
      "53:     int errStatus = 0;",
      "54:     vector<char> errMsg(1024, 0);",
      "57:     SAFE_UINT8_BUF(encrypted_key, BUF_LEN);",
      "",
      "[Removed Lines]",
      "55:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "55:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "110:     auto encrypted_SEK = make_shared < vector < uint8_t >> (BUF_LEN, 0);",
      "114:     sgx_status_t status = trustedSetSEK_backup(eid, &err_status, errMsg.data(), encrypted_SEK->data(), &l,",
      "115:                                                SEK.c_str());",
      "",
      "[Removed Lines]",
      "112:     uint32_t l = 0;",
      "",
      "[Added Lines]",
      "112:     uint64_t l = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "127:     vector<char> errMsg(1024, 0);",
      "128:     int err_status = 0;",
      "129:     vector <uint8_t> encrypted_SEK(1024, 0);",
      "132:     SAFE_CHAR_BUF(SEK, 65);",
      "",
      "[Removed Lines]",
      "130:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SGXWalletServer.cpp||SGXWalletServer.cpp": [
      "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "564:         vector<string> public_keys = calculateAllBlsPublicKeys(public_shares);",
      "567:             throw SGXException(UNKNOWN_ERROR, \"\");",
      "568:         }",
      "",
      "[Removed Lines]",
      "566:         if (public_keys.size() != n) {",
      "",
      "[Added Lines]",
      "566:         if (public_keys.size() != (uint64_t)n) {",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c": [
      "File: secure_enclave/AESUtils.c -> secure_enclave/AESUtils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"stdlib.h\"",
      "28: #include <string.h>",
      "30: #include \"AESUtils.h\"",
      "32: sgx_aes_gcm_128bit_key_t AES_key;",
      "33: sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "37:     if (!message) {",
      "38:         LOG_ERROR(\"Null message in AES_encrypt\");",
      "",
      "[Removed Lines]",
      "35: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "",
      "[Added Lines]",
      "37: #define SAFE_CHAR_BUF(__X__, __Y__)  ;char __X__ [ __Y__ ]; memset(__X__, 0, __Y__);",
      "39: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrBufLen, unsigned  char type,",
      "40:                 unsigned char decryptable, uint64_t* resultLen) {",
      "44:     if (!type) {",
      "45:         LOG_ERROR(\"Null type in AES_encrypt\");",
      "46:         return -1;",
      "47:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47:     uint64_t len = strlen(message) + 1;",
      "50:         LOG_ERROR(\"Output buffer too small\");",
      "51:         return -3;",
      "52:     }",
      "54:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "57:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "58:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "59:                                                      NULL, 0,",
      "60:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "62:     return status;",
      "63: }",
      "",
      "[Removed Lines]",
      "49:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "56:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, strlen(message),",
      "",
      "[Added Lines]",
      "61:     if (2 + len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrBufLen ) {",
      "66:     SAFE_CHAR_BUF(fullMessage, len + 2);",
      "68:     fullMessage[0] = type;",
      "69:     fullMessage[1] = decryptable;",
      "71:     strncpy(fullMessage + 2, message, len );",
      "73:     len = len + 2;",
      "74:     message = fullMessage;",
      "78:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96:                                                    NULL, 0,",
      "97:                                                    (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "133: }",
      "",
      "[Removed Lines]",
      "99:   return status;",
      "100: }",
      "105: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "107:     if (!message) {",
      "108:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "109:         return -1;",
      "110:     }",
      "112:     if (!encr_message) {",
      "113:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "114:         return -2;",
      "115:     }",
      "117:     uint64_t len = strlen(message) + 1;",
      "119:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "120:         LOG_ERROR(\"Output buffer too small\");",
      "121:         return -3;",
      "122:     }",
      "124:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "126:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_DH_key, (uint8_t*)message, strlen(message),",
      "127:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "128:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "129:                                                      NULL, 0,",
      "130:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "132:     return status;",
      "135: int AES_decrypt_DH(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) {",
      "137:     if (!message) {",
      "138:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "139:         return -1;",
      "140:     }",
      "142:     if (!encr_message) {",
      "143:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "144:         return -2;",
      "145:     }",
      "148:     if (length < SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE) {",
      "149:         LOG_ERROR(\"length < SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE\");",
      "150:         return -1;",
      "151:     }",
      "155:     uint64_t len = length - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE;",
      "157:     if (msgLen < len) {",
      "158:         LOG_ERROR(\"Output buffer not large enough\");",
      "159:         return -2;",
      "160:     }",
      "162:     sgx_status_t status = sgx_rijndael128GCM_decrypt(&AES_DH_key,",
      "163:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE, len,",
      "164:                                                      (unsigned char*) message,",
      "165:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "166:                                                      NULL, 0,",
      "167:                                                      (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "169:     return status;",
      "170: }",
      "",
      "[Added Lines]",
      "123:   for (int i = 2; i < strlen(message) + 1; i++) {",
      "124:       message[i - 2 ] = message[i];",
      "125:   }",
      "127:   return status;",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h": [
      "File: secure_enclave/AESUtils.h -> secure_enclave/AESUtils.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: extern sgx_aes_gcm_128bit_key_t AES_key;",
      "28: extern sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "31: int AES_decrypt(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) ;",
      "33: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Removed Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Added Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen,",
      "31:                 unsigned char type, unsigned char decryptable, uint64_t* resultLen);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36: void derive_DH_Key();",
      "39: #endif //SGXD_AESUTILS_H",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39: #define ECDSA '1'",
      "40: #define BLS '2'",
      "41: #define DKG '3'",
      "43: #define DECRYPTABLE '1'",
      "44: #define NON_DECRYPTABLE '2'",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
      "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "122:         abort(); \\",
      "123:     } else {called = true;};",
      "126:     CALL_ONCE",
      "127:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "125: void trustedEnclaveInit(uint32_t _logLevel) {",
      "",
      "[Added Lines]",
      "125: void trustedEnclaveInit(uint64_t _logLevel) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "234: void sealHexSEK(int *errStatus, char *errString,",
      "236:     CALL_ONCE",
      "237:     LOG_INFO(__FUNCTION__);",
      "238:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "235:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "235:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "255:                                            (sgx_sealed_data_t *) encrypted_sek);",
      "256:     CHECK_STATUS(\"seal SEK failed after SEK generation\");",
      "260:     CHECK_STATE(encrypt_text_length = plaintextLen);",
      "",
      "[Removed Lines]",
      "258:     uint32_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "258:     uint64_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "263:     SAFE_CHAR_BUF(unsealedKey, BUF_LEN);",
      "264:     uint32_t decLen = BUF_LEN;",
      "267:     CHECK_STATE(add_text_length == 0);",
      "268:     CHECK_STATE(sgx_is_within_enclave(encrypted_sek,sizeof(sgx_sealed_data_t)));",
      "269:     status = sgx_unseal_data((const sgx_sealed_data_t *)encrypted_sek, NULL, NULL,",
      "",
      "[Removed Lines]",
      "266:     uint32_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "266:     uint64_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "279: }",
      "281: void trustedGenerateSEK(int *errStatus, char *errString,",
      "283:     CALL_ONCE",
      "284:     LOG_INFO(__FUNCTION__);",
      "285:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "282:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "282:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "341: }",
      "343: void trustedSetSEK_backup(int *errStatus, char *errString,",
      "345:     CALL_ONCE",
      "346:     LOG_INFO(__FUNCTION__);",
      "347:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "344:                           uint8_t *encrypted_sek, uint32_t *enc_len, const char *sek_hex) {",
      "",
      "[Added Lines]",
      "344:                           uint8_t *encrypted_sek, uint64_t *enc_len, const char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "372: void trustedGenerateEcdsaKeyAES(int *errStatus, char *errString,",
      "374:     LOG_INFO(__FUNCTION__);",
      "375:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint32_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "[Added Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint64_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "410:     }",
      "411:     strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes);",
      "414:     mpz_get_str(arr_skey_str, ECDSA_SKEY_BASE, skey);",
      "415:     n_zeroes = 64 - strlen(arr_skey_str);",
      "416:     for (int i = 0; i < n_zeroes; i++) {",
      "417:         skey_str[i] = '0';",
      "418:     }",
      "419:     strncpy(skey_str + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "421:     snprintf(errString, BUF_LEN, \"skey len is %d\\n\", (int) strlen(skey_str));",
      "424:     CHECK_STATUS(\"ecdsa private key encryption failed\");",
      "430:     CHECK_STATUS2(\"ecdsa private key decr failed with status %d\");",
      "",
      "[Removed Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, ECDSA_SKEY_LEN);SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "420:     skey_str[ECDSA_SKEY_LEN - 1] = 0;",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN);",
      "428:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, BUF_LEN);",
      "414:     SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN,",
      "424:                              ECDSA, NON_DECRYPTABLE, enc_len);",
      "427:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "439: }",
      "441: void trustedGetPublicEcdsaKeyAES(int *errStatus, char *errString,",
      "443:     LOG_DEBUG(__FUNCTION__);",
      "444:     INIT_ERROR_STATE",
      "448:     mpz_t privateKeyMpz;",
      "449:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "442:                                  uint8_t *encryptedPrivateKey, uint32_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "446:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "441:                                  uint8_t *encryptedPrivateKey, uint64_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "445:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "455:     CHECK_STATE(pub_key_x);",
      "456:     CHECK_STATE(pub_key_y);",
      "459:     CHECK_STATUS2(\"AES_decrypt failed with status %d\");",
      "461:     skey[enc_len - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE] = '\\0';",
      "",
      "[Removed Lines]",
      "458:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "457:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "516: static uint64_t sigCounter = 0;",
      "519:                          const char *hash, char *sigR, char *sigS, uint8_t *sig_v, int base) {",
      "520:     LOG_DEBUG(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "518: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "517: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "526:     CHECK_STATE(sigR);",
      "527:     CHECK_STATE(sigS);",
      "531:     mpz_t privateKeyMpz;",
      "532:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "529:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "528:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "534:     mpz_init(msgMpz);",
      "535:     signature sign = signature_init();",
      "539:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "",
      "[Removed Lines]",
      "537:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "536:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "602: void trustedDecryptKeyAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "605:     LOG_DEBUG(__FUNCTION__);",
      "606:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "603:                           uint32_t enc_len, char *key) {",
      "",
      "[Added Lines]",
      "602:                           uint64_t enc_len, char *key) {",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "615:     if (status != 0) {",
      "",
      "[Removed Lines]",
      "613:     int status = AES_decrypt_DH(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "[Added Lines]",
      "612:     int status = AES_decrypt(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "638: void trustedEncryptKeyAES(int *errStatus, char *errString, const char *key,",
      "640:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "639:                           uint8_t *encryptedPrivateKey, uint32_t *enc_len) {",
      "",
      "[Added Lines]",
      "638:                           uint8_t *encryptedPrivateKey, uint64_t *enc_len) {",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "652:     CHECK_STATUS2(\"AES encrypt failed with status %d\");",
      "656:     SAFE_CHAR_BUF(decryptedKey, BUF_LEN);",
      "660:     CHECK_STATUS2(\"trustedDecryptKey failed with status %d\");",
      "",
      "[Removed Lines]",
      "650:     int status = AES_encrypt_DH((char *)key, encryptedPrivateKey, BUF_LEN);",
      "658:     status = AES_decrypt_DH(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "[Added Lines]",
      "649:     int status = AES_encrypt((char *)key, encryptedPrivateKey, BUF_LEN,",
      "650:                              DKG, DECRYPTABLE, enc_len);",
      "656:     status = AES_decrypt(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "672:     if (strncmp(key, decryptedKey, MAX_KEY_LENGTH) != 0) {",
      "673:         snprintf(errString, BUF_LEN, \"Decrypted key does not match original key\");",
      "674:         LOG_ERROR(errString);",
      "675:         goto clean;",
      "676:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "672:         LOG_ERROR(key);",
      "673:         LOG_ERROR(decryptedKey);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "686: void trustedBlsSignMessageAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "688:                               char *_hashY, char *signature) {",
      "689:     LOG_DEBUG(__FUNCTION__);",
      "690:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "687:                               uint32_t enc_len, char *_hashX,",
      "",
      "[Added Lines]",
      "687:                               uint64_t enc_len, char *_hashX,",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "726: }",
      "728: void",
      "730:     LOG_INFO(__FUNCTION__);",
      "731:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
      "",
      "[Added Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t *enc_len, size_t _t) {",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "739:     CHECK_STATUS(\"gen_dkg_poly failed\")",
      "743:     CHECK_STATUS(\"SGX AES encrypt DKG poly failed\");",
      "747:     SAFE_CHAR_BUF(decr_dkg_secret, DKG_BUFER_LENGTH);",
      "",
      "[Removed Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN);",
      "",
      "[Added Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN,",
      "742:                          DKG, DECRYPTABLE, enc_len);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "769: void",
      "770: trustedDecryptDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret,",
      "772:                            uint8_t *decrypted_dkg_secret) {",
      "773:     LOG_INFO(__FUNCTION__);",
      "774:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "771:                            uint32_t enc_len,",
      "",
      "[Added Lines]",
      "772:                            uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "790: }",
      "794:     LOG_INFO(__FUNCTION__);",
      "795:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "793: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint32_t enc_len) {",
      "",
      "[Added Lines]",
      "794: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint64_t enc_len) {",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "810:     LOG_INFO(\"SGX call completed\");",
      "811: }",
      "814:                                        char *result_str, char *s_shareG2, char *pub_keyB, uint8_t _t, uint8_t _n,",
      "815:                                        uint8_t ind) {",
      "817:     LOG_INFO(__FUNCTION__);",
      "818:     INIT_ERROR_STATE",
      "821:     int status;",
      "823:     CHECK_STATE(encrypted_skey);",
      "",
      "[Removed Lines]",
      "813: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint32_t *dec_len,",
      "820:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "814: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint64_t *dec_len,",
      "821:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "828:     LOG_DEBUG(__FUNCTION__);",
      "832:     SAFE_CHAR_BUF(pub_key_x, BUF_LEN);SAFE_CHAR_BUF(pub_key_y, BUF_LEN);",
      "",
      "[Removed Lines]",
      "830:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "831:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "836:     CHECK_STATUS(\"trustedGenerateEcdsaKeyAES failed\");",
      "840:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "838:     status = AES_decrypt(encrypted_skey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "839:     status = AES_decrypt(encrypted_skey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "848:     status = gen_session_key(skey, pub_keyB, common_key);",
      "850:     CHECK_STATUS(\"gen_session_key failed\")",
      "854:     status = calc_secret_share(getThreadLocalDecryptedDkgPoly(), s_share, _t, _n, ind);",
      "855:     CHECK_STATUS(\"calc secret share failed\")",
      "",
      "[Removed Lines]",
      "846:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "852:     SAFE_CHAR_BUF(s_share, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "847:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "853:     SAFE_CHAR_BUF(s_share, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "858:     status = calc_secret_shareG2(s_share, s_shareG2);",
      "859:     CHECK_STATUS(\"invalid decr secret share\");",
      "862:     status=xor_encrypt(common_key, s_share, cypher);",
      "864:     CHECK_STATUS(\"xor_encrypt failed\")",
      "",
      "[Removed Lines]",
      "861:     SAFE_CHAR_BUF(cypher, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "862:     SAFE_CHAR_BUF(cypher, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "875:     LOG_INFO(\"SGX call completed\");",
      "876: }",
      "879:                                char *public_shares,",
      "880:                                unsigned _t, unsigned _n) {",
      "881:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "878: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "879: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "913:     CHECK_STATE(s_share);",
      "914:     CHECK_STATE(encryptedPrivateKey);",
      "918:     mpz_t s;",
      "919:     mpz_init(s);",
      "923:     CHECK_STATUS2(\"AES_decrypt failed (in trustedDkgVerifyAES) with status %d\");",
      "927:     strncpy(encr_sshare, s_share, ECDSA_SKEY_LEN - 1);",
      "931:     status = session_key_recover(skey, s_share, common_key);",
      "933:     CHECK_STATUS(\"session_key_recover failed\");",
      "937:     status=xor_decrypt(common_key, encr_sshare, decr_sshare);",
      "",
      "[Removed Lines]",
      "916:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "921:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "925:     SAFE_CHAR_BUF(encr_sshare, ECDSA_SKEY_LEN);",
      "929:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "935:     SAFE_CHAR_BUF(decr_sshare, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "917:     SAFE_CHAR_BUF(skey,BUF_LEN);",
      "922:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "926:     SAFE_CHAR_BUF(encr_sshare, BUF_LEN);",
      "930:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "936:     SAFE_CHAR_BUF(decr_sshare, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "955: void trustedCreateBlsKeyAES(int *errStatus, char *errString, const char *s_shares,",
      "956:                             uint8_t *encryptedPrivateKey, uint64_t key_len, uint8_t *encr_bls_key,",
      "959:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "957:                             uint32_t *enc_bls_key_len) {",
      "",
      "[Added Lines]",
      "958:                             uint64_t *enc_bls_key_len) {",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "964:     CHECK_STATE(encryptedPrivateKey);",
      "965:     CHECK_STATE(encr_bls_key);",
      "969:     mpz_t sum;",
      "970:     mpz_init(sum);",
      "",
      "[Removed Lines]",
      "967:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "968:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "978:     mpz_init(bls_key);",
      "982:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "984:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "981:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "982:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "1038:     strncpy(key_share + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "1039:     key_share[BLS_KEY_LENGTH - 1] = 0;",
      "1043:     CHECK_STATUS2(\"aes encrypt bls private key failed with status %d \");",
      "1047:     SET_SUCCESS",
      "1048:     clean:",
      "",
      "[Removed Lines]",
      "1041:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN);",
      "",
      "[Added Lines]",
      "1042:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN, BLS, NON_DECRYPTABLE, enc_bls_key_len);",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "1064:     CHECK_STATE(bls_pub_key);",
      "1065:     CHECK_STATE(encryptedPrivateKey);",
      "1071:     CHECK_STATUS2(\"AES decrypt failed %d\");",
      "",
      "[Removed Lines]",
      "1067:     SAFE_CHAR_BUF(skey_hex, ECDSA_SKEY_LEN);",
      "1069:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "1066:     SAFE_CHAR_BUF(skey_hex, BUF_LEN);",
      "1068:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, BUF_LEN);",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
      "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
      "--- Hunk 1 ---",
      "[Context before]",
      "11:  trusted {",
      "12:   include \"sgx_tgmp.h\"",
      "17:         public void trustedGenerateSEK(",
      "18:                                 [out] int *errStatus,",
      "19:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "20:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "22:                                 [out, count = 65] char* hex_SEK);",
      "24:         public void trustedSetSEK(",
      "",
      "[Removed Lines]",
      "14:   public void trustedEnclaveInit(uint32_t _logLevel);",
      "21:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "14:   public void trustedEnclaveInit(uint64_t _logLevel);",
      "21:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30:                                 [out] int *errStatus,",
      "31:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "32:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "34:                                 [in, string] const char* SEK_hex);",
      "36:         public void trustedGenerateEcdsaKeyAES (",
      "37:                                 [out] int *errStatus,",
      "38:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "39:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "41:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "42:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "33:                                 [out] uint32_t *enc_len,",
      "40:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "33:                                 [out] uint64_t *enc_len,",
      "40:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "45:                                 [out] int *errStatus,",
      "46:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "47:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "49:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "50:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "48:                                 uint32_t dec_len,",
      "",
      "[Added Lines]",
      "48:                                 uint64_t dec_len,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "53:                                 [out] int *errStatus,",
      "54:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "55:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "57:                                 [in, string] const char* hash,",
      "58:                                 [out, count = SMALL_BUF_SIZE] char* sig_r,",
      "59:                                 [out, count = SMALL_BUF_SIZE] char* sig_s,",
      "",
      "[Removed Lines]",
      "56:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "56:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "65:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "66:                                 [in, count = SMALL_BUF_SIZE] const char* key,",
      "67:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "70:         public void trustedDecryptKeyAES (",
      "71:                                 [out] int *errStatus,",
      "72:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "73:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "75:                                 [out, count = SMALL_BUF_SIZE] char* key );",
      "77:         public void trustedGenDkgSecretAES (",
      "78:                                 [out] int *errStatus,",
      "79:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "80:                                 [out, count = 3072] uint8_t* encrypted_dkg_secret,",
      "83:         public void trustedDecryptDkgSecretAES (",
      "84:                                 [out] int *errStatus,",
      "85:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "86:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "88:                                 [out, count = 3072] uint8_t* decrypted_dkg_secret",
      "89:                                 );",
      "",
      "[Removed Lines]",
      "68:                                 [out] uint32_t *enc_len);",
      "74:                                 uint32_t enc_len,",
      "81:                                 [out] uint32_t * enc_len, size_t _t);",
      "87:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "68:                                 [out] uint64_t *enc_len);",
      "74:                                 uint64_t enc_len,",
      "81:                                 [out] uint64_t * enc_len, size_t _t);",
      "87:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "92:                                 [out] int *errStatus,",
      "93:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "94:                                 [in, count = 3050] uint8_t* encrypted_poly,",
      "97:         public void trustedGetEncryptedSecretShareAES(",
      "98:                                 [out]int *errStatus,",
      "99:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "100:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_skey,",
      "102:                                 [out, count = 193] char* result_str,",
      "103:                                 [out, count = 320] char* s_shareG2,",
      "104:                                 [in, string] char* pub_keyB,",
      "",
      "[Removed Lines]",
      "95:                                 uint32_t enc_len);",
      "101:                                 [out] uint32_t* dec_len,",
      "",
      "[Added Lines]",
      "95:                                 uint64_t enc_len);",
      "101:                                 [out] uint64_t* dec_len,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "110:                                 [out] int *errStatus,",
      "111:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "112:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "114:                                 [out, count = 10000] char* public_shares,",
      "115:                                 unsigned _t,",
      "116:                                 unsigned _n);",
      "",
      "[Removed Lines]",
      "113:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "113:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "133:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "134:                                 uint64_t key_len,",
      "135:                                 [out, count = SMALL_BUF_SIZE] uint8_t * encr_bls_key,",
      "138:         public void trustedBlsSignMessageAES (",
      "139:                                 [out] int *errStatus,",
      "140:                                 [out, count = TINY_BUF_SIZE] char* err_string,",
      "141:                                 [in, count = TINY_BUF_SIZE] uint8_t* encrypted_key,",
      "143:                                 [in, string] char* hashX ,",
      "144:                                 [in, string] char* hashY,",
      "145:                                 [out, count = SMALL_BUF_SIZE] char* signature);",
      "",
      "[Removed Lines]",
      "136:                                 [out] uint32_t *enc_bls_key_len);",
      "142:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "136:                                 [out] uint64_t *enc_bls_key_len);",
      "142:                                 uint64_t enc_len,",
      "",
      "---------------"
    ],
    "testw.cpp||testw.cpp": [
      "File: testw.cpp -> testw.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "127:     vector<char> pubKeyX(BUF_LEN, 0);",
      "128:     vector<char> pubKeyY(BUF_LEN, 0);",
      "131:     PRINT_SRC_LINE",
      "132:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "133:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "130:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160:     vector <uint8_t> encrPrivKey(BUF_LEN, 0);",
      "161:     vector<char> pubKeyX(BUF_LEN, 0);",
      "162:     vector<char> pubKeyY(BUF_LEN, 0);",
      "164:     PRINT_SRC_LINE",
      "165:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "166:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "163:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "163:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "177:     vector <uint8_t> encPrivKey(BUF_LEN, 0);",
      "178:     vector<char> pubKeyX(BUF_LEN, 0);",
      "179:     vector<char> pubKeyY(BUF_LEN, 0);",
      "182:     PRINT_SRC_LINE",
      "183:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encPrivKey.data(), &encLen, pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "180:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "181:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "291:     vector<char> errMsg(BUF_LEN, 0);",
      "293:     int errStatus = 0;",
      "296:     PRINT_SRC_LINE",
      "297:     auto status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), &encLen, 32);",
      "",
      "[Removed Lines]",
      "294:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "295:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "314:     vector<char> errMsg(BUF_LEN, 0);",
      "316:     int errStatus = 0;",
      "319:     unsigned t = 32, n = 32;",
      "320:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "317:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "318:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "363:     vector<char> result(BUF_LEN, 0);",
      "365:     int errStatus = 0;",
      "368:     vector <uint8_t> encryptedDKGSecret(BUF_LEN, 0);",
      "369:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "366:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "367:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "694: TEST_CASE_METHOD(TestFixture, \"AES encrypt/decrypt\", \"[aes-encrypt-decrypt]\") {",
      "695:     int errStatus = 0;",
      "696:     vector<char> errMsg(BUF_LEN, 0);",
      "698:     string key = SAMPLE_AES_KEY;",
      "699:     vector <uint8_t> encrypted_key(BUF_LEN, 0);",
      "",
      "[Removed Lines]",
      "697:     uint32_t encLen;",
      "",
      "[Added Lines]",
      "698:     uint64_t encLen;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7d1002639a6aa9487af8dc58b4d38b62886cbcc4",
      "candidate_info": {
        "commit_hash": "7d1002639a6aa9487af8dc58b4d38b62886cbcc4",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/7d1002639a6aa9487af8dc58b4d38b62886cbcc4",
        "files": [
          "secure_enclave/secure_enclave.c"
        ],
        "message": "SKALE-2002 add debug logging and fix memory leaks",
        "before_after_code_files": [
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ],
          "candidate": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "194:     if (status != SGX_SUCCESS) {",
          "195:         snprintf(errString, BUF_LEN, \"seal ecsdsa private key failed\");",
          "197:         return;",
          "198:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "197:         mpz_clear(skey);",
          "198:         domain_parameters_clear(curve);",
          "199:         point_clear(Pkey);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "221:     if (status != SGX_SUCCESS) {",
          "222:         snprintf(errString, BUF_LEN, \"sgx_unseal_data failed with status %d\", status);",
          "224:         return;",
          "225:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "228:         domain_parameters_clear(curve);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "229:     if (mpz_set_str(privateKeyMpz, skey, ECDSA_SKEY_BASE) == -1) {",
          "230:         snprintf(errString, BUF_LEN, \"wrong string to init private key\");",
          "232:         mpz_clear(privateKeyMpz);",
          "233:         return;",
          "234:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240:         domain_parameters_clear(curve);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "244:     if (!point_cmp(Pkey, Pkey_test)) {",
          "245:         snprintf(errString, BUF_LEN, \"Points are not equal\");",
          "247:         return;",
          "248:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "257:         mpz_clear(privateKeyMpz);",
          "258:         domain_parameters_clear(curve);",
          "259:         point_clear(Pkey);",
          "260:         point_clear(Pkey_test);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "270:     mpz_clear(privateKeyMpz);",
          "271:     domain_parameters_clear(curve);",
          "272:     point_clear(Pkey);",
          "273: }",
          "275: void trustedEcdsaSign(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint32_t dec_len,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "288:     point_clear(Pkey_test);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "487:     if (*errStatus != 0) {",
          "488:         strncpy(signature, errString, BUF_LEN);",
          "489:         return;",
          "490:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "505:         free(sig);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "592: void trustedSetEncryptedDkgPoly(int *errStatus, char *errString, uint8_t *encrypted_poly) {",
          "593:     memset(decryptedDkgPoly, 0, DKG_BUFER_LENGTH);",
          "594:     uint32_t decr_len;",
          "595:     sgx_status_t status = sgx_unseal_data(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "610:     LOG_DEBUG(__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1185: void trustedDecryptKeyAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
          "1186:                      uint32_t enc_len, char *key) {",
          "1188:     uint32_t decLen;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1202:     LOG_DEBUG(__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1329: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint32_t *dec_len,",
          "1330:                          char *result_str, char *s_shareG2, char *pub_keyB, uint8_t _t, uint8_t _n, uint8_t ind) {",
          "1332:     char skey[ECDSA_SKEY_LEN];",
          "1333:     memset(skey, 0, BUF_LEN);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1335:     LOG_DEBUG(__FUNCTION__);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "70e861f987b6e2cd6b36bfb9c349d2c90302142e",
      "candidate_info": {
        "commit_hash": "70e861f987b6e2cd6b36bfb9c349d2c90302142e",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/70e861f987b6e2cd6b36bfb9c349d2c90302142e",
        "files": [
          "BLSCrypto.cpp",
          "BLSPrivateKeyShareSGX.cpp",
          "DKGCrypto.cpp",
          "ECDSACrypto.cpp",
          "SGXWalletServer.cpp",
          "sgxwallet_common.h"
        ],
        "message": "SKALE-3660 remove semaphore",
        "before_after_code_files": [
          "BLSCrypto.cpp||BLSCrypto.cpp",
          "BLSPrivateKeyShareSGX.cpp||BLSPrivateKeyShareSGX.cpp",
          "DKGCrypto.cpp||DKGCrypto.cpp",
          "ECDSACrypto.cpp||ECDSACrypto.cpp",
          "SGXWalletServer.cpp||SGXWalletServer.cpp",
          "sgxwallet_common.h||sgxwallet_common.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp"
          ],
          "candidate": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp"
          ]
        }
      },
      "candidate_diff": {
        "BLSCrypto.cpp||BLSCrypto.cpp": [
          "File: BLSCrypto.cpp -> BLSCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "185:     sgx_status_t status = SGX_SUCCESS;",
          "193:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
          "",
          "[Removed Lines]",
          "187:     SEMAPHORE_BEGIN",
          "188:             status = trustedBlsSignMessage(eid, &errStatus, errMsg.data(), encryptedKey,",
          "189:                                               sz, xStrArg, yStrArg, signature);",
          "190:     SEMAPHORE_END",
          "",
          "[Added Lines]",
          "187:     status = trustedBlsSignMessage(eid, &errStatus, errMsg.data(), encryptedKey,",
          "188:                                       sz, xStrArg, yStrArg, signature);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227:     sgx_status_t status = SGX_SUCCESS;",
          "234:     HANDLE_TRUSTED_FUNCTION_ERROR(status, *errStatus, errMsg.data());",
          "",
          "[Removed Lines]",
          "229:     SEMAPHORE_BEGIN",
          "230:         status = trustedEncryptKey(eid, errStatus, errMsg.data(), keyArray->data(), encryptedKey->data(),",
          "231:                                       &encryptedLen);",
          "232:     SEMAPHORE_END",
          "",
          "[Added Lines]",
          "227:     status = trustedEncryptKey(eid, errStatus, errMsg.data(), keyArray->data(), encryptedKey->data(),",
          "228:                                &encryptedLen);",
          "",
          "---------------"
        ],
        "BLSPrivateKeyShareSGX.cpp||BLSPrivateKeyShareSGX.cpp": [
          "File: BLSPrivateKeyShareSGX.cpp -> BLSPrivateKeyShareSGX.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "150:     sgx_status_t status = SGX_SUCCESS;",
          "157:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
          "",
          "[Removed Lines]",
          "152:     SEMAPHORE_BEGIN",
          "153:         status = trustedBlsSignMessage(eid, &errStatus, errMsg.data(), encryptedKey,",
          "154:                                           encryptedKeyHex->size() / 2, xStrArg, yStrArg, signature);",
          "155:     SEMAPHORE_END",
          "",
          "[Added Lines]",
          "152:     status = trustedBlsSignMessage(eid, &errStatus, errMsg.data(), encryptedKey,",
          "153:                                       encryptedKeyHex->size() / 2, xStrArg, yStrArg, signature);",
          "",
          "---------------"
        ],
        "DKGCrypto.cpp||DKGCrypto.cpp": [
          "File: DKGCrypto.cpp -> DKGCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "137:     sgx_status_t status = SGX_SUCCESS;",
          "145:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
          "",
          "[Removed Lines]",
          "140:     SEMAPHORE_BEGIN",
          "141:         status = trustedGenDkgSecret(",
          "142:                 eid, &errStatus, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
          "143:     SEMAPHORE_END",
          "",
          "[Added Lines]",
          "139:     status = trustedGenDkgSecret(eid, &errStatus, errMsg.data(), encrypted_dkg_secret.data(),",
          "140:                                  &enc_len, _t);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "177:     sgx_status_t status = SGX_SUCCESS;",
          "185:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
          "",
          "[Removed Lines]",
          "180:     SEMAPHORE_BEGIN",
          "181:         status = trustedGetPublicShares(eid, &errStatus, errMsg.data(), encrDKGPoly.data(), encLen,",
          "182:                                         pubShares.data(), t, n);",
          "183:     SEMAPHORE_END",
          "",
          "[Added Lines]",
          "176:     status = trustedGetPublicShares(eid, &errStatus, errMsg.data(), encrDKGPoly.data(), encLen,",
          "177:                                     pubShares.data(), t, n);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "370:     sgx_status_t status = SGX_SUCCESS;",
          "377:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
          "",
          "[Removed Lines]",
          "372:     SEMAPHORE_BEGIN",
          "373:         status = trustedDkgVerify(eid, &errStatus, errMsg.data(), pshares, encr_sshare, encr_key, decKeyLen, t,",
          "374:                                   ind, &result);",
          "375:     SEMAPHORE_END",
          "",
          "[Added Lines]",
          "366:     status = trustedDkgVerify(eid, &errStatus, errMsg.data(), pshares, encr_sshare, encr_key, decKeyLen, t,",
          "367:                               ind, &result);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "407:     sgx_status_t status = SGX_SUCCESS;",
          "414:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
          "",
          "[Removed Lines]",
          "409:     SEMAPHORE_BEGIN",
          "410:         status = trustedDkgVerifyV2(eid, &errStatus, errMsg.data(), pshares, encr_sshare, encr_key, decKeyLen, t,",
          "411:                                     ind, &result);",
          "412:     SEMAPHORE_END",
          "",
          "[Added Lines]",
          "401:     status = trustedDkgVerifyV2(eid, &errStatus, errMsg.data(), pshares, encr_sshare, encr_key, decKeyLen, t,",
          "402:                                 ind, &result);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "438:     sgx_status_t status = SGX_SUCCESS;",
          "445:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
          "",
          "[Removed Lines]",
          "440:     SEMAPHORE_BEGIN",
          "441:         status = trustedCreateBlsKey(eid, &errStatus, errMsg.data(), s_shares, encr_key, decKeyLen, encr_bls_key,",
          "442:                                      &enc_bls_len);",
          "443:     SEMAPHORE_END",
          "",
          "[Added Lines]",
          "430:     status = trustedCreateBlsKey(eid, &errStatus, errMsg.data(), s_shares, encr_key, decKeyLen, encr_bls_key,",
          "431:                                  &enc_bls_len);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "472:     sgx_status_t status = SGX_SUCCESS;",
          "478:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg1.data());",
          "",
          "[Removed Lines]",
          "474:     SEMAPHORE_BEGIN",
          "475:         status = trustedGetBlsPubKey(eid, &errStatus, errMsg1.data(), encrKey, decKeyLen, pubKey);",
          "476:     SEMAPHORE_END",
          "",
          "[Added Lines]",
          "462:     status = trustedGetBlsPubKey(eid, &errStatus, errMsg1.data(), encrKey, decKeyLen, pubKey);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "558:     sgx_status_t status = SGX_SUCCESS;",
          "563:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg1.data())",
          "565:     return DHKey;",
          "",
          "[Removed Lines]",
          "560:     SEMAPHORE_BEGIN",
          "561:         status = trustedDecryptKey(eid, &errStatus, errMsg1.data(), encryptedDHKey, dhEncLen, DHKey);",
          "562:     SEMAPHORE_END",
          "",
          "[Added Lines]",
          "546:     status = trustedDecryptKey(eid, &errStatus, errMsg1.data(), encryptedDHKey, dhEncLen, DHKey);",
          "",
          "---------------"
        ],
        "ECDSACrypto.cpp||ECDSACrypto.cpp": [
          "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:     sgx_status_t status = SGX_SUCCESS;",
          "68:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus,errMsg.data());",
          "",
          "[Removed Lines]",
          "62:     SEMAPHORE_BEGIN",
          "63:         status = trustedGenerateEcdsaKey(eid, &errStatus,",
          "64:                                    errMsg.data(), encr_pr_key.data(), &enc_len,",
          "65:                                    pub_key_x.data(), pub_key_y.data());",
          "66:     SEMAPHORE_END",
          "",
          "[Added Lines]",
          "62:     status = trustedGenerateEcdsaKey(eid, &errStatus,",
          "63:                                errMsg.data(), encr_pr_key.data(), &enc_len,",
          "64:                                pub_key_x.data(), pub_key_y.data());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:     sgx_status_t status = SGX_SUCCESS;",
          "109:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data())",
          "",
          "[Removed Lines]",
          "104:     SEMAPHORE_BEGIN",
          "105:         status = trustedGetPublicEcdsaKey(eid, &errStatus,",
          "106:                                              errMsg.data(), encrPrKey.data(), enc_len, pubKeyX.data(), pubKeyY.data());",
          "107:     SEMAPHORE_END",
          "",
          "[Added Lines]",
          "102:     status = trustedGetPublicEcdsaKey(eid, &errStatus,",
          "103:                                       errMsg.data(), encrPrKey.data(), enc_len, pubKeyX.data(), pubKeyY.data());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "191:     sgx_status_t status = SGX_SUCCESS;",
          "200:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
          "",
          "[Removed Lines]",
          "193:     SEMAPHORE_BEGIN",
          "194:         status = trustedEcdsaSign(eid, &errStatus,",
          "195:                             errMsg.data(), encryptedKey.data(), decLen, hashHex,",
          "196:                             signatureR.data(),",
          "197:                             signatureS.data(), &signatureV, base);",
          "198:     SEMAPHORE_END",
          "",
          "[Added Lines]",
          "189:     status = trustedEcdsaSign(eid, &errStatus,",
          "190:                         errMsg.data(), encryptedKey.data(), decLen, hashHex,",
          "191:                         signatureR.data(),",
          "192:                         signatureS.data(), &signatureV, base);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "242:     uint64_t enc_len = 0;",
          "244:     sgx_status_t status = SGX_SUCCESS;",
          "250:     if (status != 0) {",
          "251:         throw SGXException(status, string(\"Could not encrypt ECDSA key: \" + string(errString.begin(), errString.end())).c_str());",
          "",
          "[Removed Lines]",
          "245:     SEMAPHORE_BEGIN",
          "246:         status = trustedEncryptKey(eid, &errStatus, errString.data(), key.data(),",
          "247:                                    encryptedKey.data(), &enc_len);",
          "248:     SEMAPHORE_END",
          "",
          "[Added Lines]",
          "240:     status = trustedEncryptKey(eid, &errStatus, errString.data(), key.data(),",
          "241:                                encryptedKey.data(), &enc_len);",
          "",
          "---------------"
        ],
        "SGXWalletServer.cpp||SGXWalletServer.cpp": [
          "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: std::shared_timed_mutex sgxInitMutex;",
          "64: uint64_t initTime;",
          "66: void setFullOptions(uint64_t _logLevel, int _useHTTPS, int _autoconfirm, int _enterBackupKey) {",
          "",
          "[Removed Lines]",
          "61: boost::interprocess::interprocess_semaphore enclaveSemaphore(200);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123: #ifdef SGX_HW_SIM",
          "124: #define NUM_THREADS 16",
          "125: #else",
          "127: #endif",
          "",
          "[Removed Lines]",
          "126: #define NUM_THREADS 1024",
          "",
          "[Added Lines]",
          "122: #define NUM_THREADS 200",
          "",
          "---------------"
        ],
        "sgxwallet_common.h||sgxwallet_common.h": [
          "File: sgxwallet_common.h -> sgxwallet_common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "113: #define FILE_NOT_FOUND -44",
          "114: #define INVALID_DKG_GETSS_PARAMS -45",
          "115: #define INVALID_DKG_GETSS_PUB_KEY_COUNT -46",
          "117: #define INVALID_DKG_VERIFY_ECDSA_KEY_NAME -48",
          "118: #define INVALID_DKG_VERIFY_PARAMS -49",
          "119: #define INVALID_DKG_VERIFY_SS_HEX -50",
          "",
          "[Removed Lines]",
          "116: #define  INVALID_DKG_GETSS_KEY_HEX -47",
          "",
          "[Added Lines]",
          "116: #define INVALID_DKG_GETSS_KEY_HEX -47",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125: #define INVALID_CREATE_BLS_KEY_NAME -56",
          "126: #define INVALID_CREATE_BLS_DKG_PARAMS -57",
          "127: #define INVALID_CREATE_BLS_SHARE -58",
          "129: #define INVALID_DKG_CALCULATE_ALL_PARAMS -60",
          "130: #define INVALID_DKG_CALCULATE_ALL_PUBSHARES -61",
          "131: #define INVALID_DKG_CALCULATE_ALL_PUBSHARES_SIZE -62",
          "132: #define INVALID_DKG_CALCULATE_ALL_PUBSHARES_STRING -63",
          "133: #define INVALID_DKG_CALCULATE_ALL_STRING_PUBSHARES_SLENGTH -64",
          "134: #define INVALID_DKG_CALCULATE_ALL_STRING_PUBKEYS_SIZE -65",
          "136: #define INVALID_DKG_GETSS_V2_PARAMS -63",
          "137: #define INVALID_DKG_GETSS_V2_POLY_NAME -64",
          "138: #define INVALID_DKG_GETSS_V2_PUBKEY_COUNT -65",
          "",
          "[Removed Lines]",
          "128: #define  INVALID_GET_BLS_PUBKEY_NAME -59",
          "135: #define  INVALID_COMPLAINT_RESPONSE_POLY_NAME -66",
          "",
          "[Added Lines]",
          "128: #define INVALID_GET_BLS_PUBKEY_NAME -59",
          "135: #define INVALID_COMPLAINT_RESPONSE_POLY_NAME -66",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "147: #define CONVERT_G2_INCORRECT_STRING_CONVERSION -74",
          "148: #define DELETE_BLS_KEY_INVALID_KEYNAME -75",
          "149: #define DELETE_BLS_KEY_NOT_FOUND -76",
          "151: #define VERIFY_SHARES_V2_INVALID_POLY_HEX -78",
          "152: #define VERIFY_SHARES_V2_INVALID_PUBLIC_SHARES -79",
          "153: #define CREATE_BLS_SHARE_INVALID_KEY_HEX -80",
          "",
          "[Removed Lines]",
          "150: #define  VERIFY_SHARES_INVALID_PUBLIC_SHARES -77",
          "",
          "[Added Lines]",
          "150: #define VERIFY_SHARES_INVALID_PUBLIC_SHARES -77",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "158: #define GET_ECDSA_PUB_KEY_INVALID_KEY_HEX -85",
          "159: #define ECDSA_SIGN_INVALID_KEY_HEX -86",
          "160: #define SET_SEK_INVALID_SEK_HEX -87",
          "163: #define SGX_ENCLAVE_ERROR -666",
          "",
          "[Removed Lines]",
          "161: #define  TEST_INVALID_HEX -88",
          "",
          "[Added Lines]",
          "161: #define TEST_INVALID_HEX -88",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "173: #define TEST_VALUE \"1234567890\"",
          "182: #endif //SGXWALLET_SGXWALLET_COMMON_H",
          "",
          "[Removed Lines]",
          "176: #define SEMAPHORE_BEGIN { semaphore_guard __ENCLAVE__GUARD__(enclaveSemaphore) ;",
          "178: #define SEMAPHORE_END }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "90460056a2522ed01bd4170e6905befd73bd4dd5",
      "candidate_info": {
        "commit_hash": "90460056a2522ed01bd4170e6905befd73bd4dd5",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/90460056a2522ed01bd4170e6905befd73bd4dd5",
        "files": [
          "DKGCrypto.cpp",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl"
        ],
        "message": "SKALE-3430-add-new-ecdsa",
        "before_after_code_files": [
          "DKGCrypto.cpp||DKGCrypto.cpp",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ],
          "candidate": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ]
        }
      },
      "candidate_diff": {
        "DKGCrypto.cpp||DKGCrypto.cpp": [
          "File: DKGCrypto.cpp -> DKGCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "239:     READ_LOCK(sgxInitMutex);",
          "245:     string result;",
          "247:     for (int i = 0; i < _n; i++) {",
          "",
          "[Removed Lines]",
          "241:     status = trustedSetEncryptedDkgPoly(eid, &errStatus, errMsg1.data(), encrDKGPoly.data(), encLen);",
          "243:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg1.data());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "259:         spdlog::debug(\"pubKeyB is {}\", pub_keyB);",
          "261:         sgx_status_t status = SGX_SUCCESS;",
          "263:                                                    currentShare.data(), sShareG2.data(), pubKeyB.data(), _t, _n,",
          "264:                                                    i + 1);",
          "",
          "[Removed Lines]",
          "262:         status = trustedGetEncryptedSecretShare(eid, &errStatus, errMsg1.data(), encryptedSkey.data(), &decLen,",
          "",
          "[Added Lines]",
          "258:         status = trustedGetEncryptedSecretShare(eid, &errStatus,",
          "259:                                                 encrDKGPoly.data(), encLen,",
          "260:                                                 errMsg1.data(), encryptedSkey.data(), &decLen,",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "847:     LOG_INFO(\"SGX call completed\");",
          "848: }",
          "851:                                        char *result_str, char *s_shareG2, char *pub_keyB, uint8_t _t, uint8_t _n,",
          "852:                                        uint8_t ind) {",
          "854:     LOG_INFO(__FUNCTION__);",
          "855:     INIT_ERROR_STATE",
          "",
          "[Removed Lines]",
          "850: void trustedGetEncryptedSecretShare(int *errStatus, char *errString, uint8_t *encrypted_skey, uint64_t *dec_len,",
          "",
          "[Added Lines]",
          "851: void trustedGetEncryptedSecretShare(int *errStatus, char *errString,",
          "852:                                     uint8_t *_encrypted_poly,  uint64_t _enc_len,",
          "853:                                     uint8_t *encrypted_skey, uint64_t *dec_len,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "865:     LOG_DEBUG(__FUNCTION__);",
          "867:     SAFE_CHAR_BUF(skey, BUF_LEN);",
          "869:     SAFE_CHAR_BUF(pub_key_x, BUF_LEN);SAFE_CHAR_BUF(pub_key_y, BUF_LEN);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "871:     trustedSetEncryptedDkgPoly(errStatus, errString, _encrypted_poly, _enc_len);",
          "873:     CHECK_STATUS2(\"trustedSetEncryptedDkgPoly failed with status %d \");",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:                                 [out, count = 3072] uint8_t* decrypted_dkg_secret",
          "89:                                 );",
          "97:         public void trustedGetEncryptedSecretShare(",
          "98:                                 [out]int *errStatus,",
          "99:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
          "100:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_skey,",
          "101:                                 [out] uint64_t* dec_len,",
          "102:                                 [out, count = 193] char* result_str,",
          "",
          "[Removed Lines]",
          "91:         public void trustedSetEncryptedDkgPoly(",
          "92:                                 [out] int *errStatus,",
          "93:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "94:                                 [in, count = 3050] uint8_t* encrypted_poly,",
          "95:                                 uint64_t enc_len);",
          "",
          "[Added Lines]",
          "94:                                 [in, count = 3050] uint8_t* encrypted_poly,",
          "95:                                 uint64_t enc_len,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "85ad2d411f36c643a0bd0eb1cdee540382722162",
      "candidate_info": {
        "commit_hash": "85ad2d411f36c643a0bd0eb1cdee540382722162",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/85ad2d411f36c643a0bd0eb1cdee540382722162",
        "files": [
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl"
        ],
        "message": "SKALE-3067",
        "before_after_code_files": [
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ],
          "candidate": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "218:     clean:",
          "219:     ;",
          "220: }",
          "222: void trustedSetSEK(int *errStatus, char *errString, uint8_t *encrypted_SEK) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "220:     LOG_INFO(\"SGX call completed\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "240:     SET_SUCCESS",
          "241:     clean:",
          "242:     ;",
          "243: }",
          "245: void trustedSetSEK_backup(int *errStatus, char *errString,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "244:     LOG_INFO(\"SGX call completed\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "265:     SET_SUCCESS",
          "266:     clean:",
          "267:     ;",
          "268: }",
          "270: void trustedGenerateEcdsaKeyAES(int *errStatus, char *errString,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "270:     LOG_INFO(\"SGX call completed\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "334:     mpz_clear(seed);",
          "335:     mpz_clear(skey);",
          "336:     point_clear(Pkey);",
          "337: }",
          "339: void trustedGetPublicEcdsaKeyAES(int *errStatus, char *errString,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "340:     LOG_INFO(\"SGX call completed\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "399:     mpz_clear(privateKeyMpz);",
          "400:     point_clear(pKey);",
          "401:     point_clear(pKey_test);",
          "402: }",
          "404: static uint64_t sigCounter = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "406:     LOG_DEBUG(\"SGX call completed\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "482:     mpz_clear(privateKeyMpz);",
          "483:     mpz_clear(msgMpz);",
          "484:     signature_free(sign);",
          "485: }",
          "487: void trustedEncryptKeyAES(int *errStatus, char *errString, const char *key,",
          "488:                           uint8_t *encryptedPrivateKey, uint32_t *enc_len) {",
          "",
          "[Removed Lines]",
          "489:     LOG_DEBUG(__FUNCTION__);",
          "",
          "[Added Lines]",
          "490:     LOG_DEBUG(\"SGX call completed\");",
          "495:     LOG_INFO(__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "527:     SET_SUCCESS",
          "528:     clean:",
          "529:     ;",
          "530: }",
          "567: void trustedBlsSignMessageAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
          "568:                               uint32_t enc_len, char *_hashX,",
          "",
          "[Removed Lines]",
          "532: void trustedDecryptKeyAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
          "533:                           uint32_t enc_len, char *key) {",
          "535:     LOG_DEBUG(__FUNCTION__);",
          "536:     INIT_ERROR_STATE",
          "538:     CHECK_STATE(encryptedPrivateKey);",
          "539:     CHECK_STATE(key);",
          "543:     int status = AES_decrypt(encryptedPrivateKey, enc_len, key, 3072);",
          "545:     if (status != 0) {",
          "547:         snprintf(errString, BUF_LEN, \"aes decrypt failed with status %d\", status);",
          "548:         LOG_ERROR(errString);",
          "549:         goto clean;",
          "550:     }",
          "554:     uint64_t keyLen = strnlen(key, MAX_KEY_LENGTH);",
          "556:     if (keyLen == MAX_KEY_LENGTH) {",
          "557:         snprintf(errString, BUF_LEN, \"Key is not null terminated\");",
          "558:         LOG_ERROR(errString);",
          "559:         goto clean;",
          "560:     }",
          "562:     SET_SUCCESS",
          "563:     clean:",
          "564:     ;",
          "565: }",
          "",
          "[Added Lines]",
          "536:     LOG_INFO(\"SGX call completed\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "595:     SET_SUCCESS",
          "597:     clean:",
          "598:     ;",
          "599: }",
          "601: void",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "570:     LOG_DEBUG(\"SGX call completed\");",
          "574:     LOG_DEBUG(\"SGX call completed\");",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "635:     SET_SUCCESS",
          "636:     clean:",
          "637:     ;",
          "638: }",
          "640: void",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "614:     LOG_INFO(\"SGX call completed\");",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "657:     clean:",
          "658:     ;",
          "659: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "636:     LOG_INFO(\"SGX call completed\");",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "675:     SET_SUCCESS",
          "676:     clean:",
          "677:     ;",
          "678: }",
          "680: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint32_t *dec_len,",
          "681:                                        char *result_str, char *s_shareG2, char *pub_keyB, uint8_t _t, uint8_t _n,",
          "682:                                        uint8_t ind) {",
          "685:     INIT_ERROR_STATE",
          "687:     uint32_t enc_len;",
          "",
          "[Removed Lines]",
          "684:     LOG_DEBUG(__FUNCTION__);",
          "",
          "[Added Lines]",
          "656:     LOG_INFO(\"SGX call completed\");",
          "663:     LOG_INFO(__FUNCTION__);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "739:     clean:",
          "740:     ;",
          "741: }",
          "743: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t enc_len,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "720:     LOG_INFO(\"SGX call completed\");",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "766:     clean:",
          "767:     ;",
          "768: }",
          "770: void trustedDkgVerifyAES(int *errStatus, char *errString, const char *public_shares, const char *s_share,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "748:     LOG_INFO(\"SGX call completed\");",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "812:     clean:",
          "814:     mpz_clear(s);",
          "815: }",
          "817: void trustedCreateBlsKeyAES(int *errStatus, char *errString, const char *s_shares,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "796:     LOG_INFO(\"SGX call completed\");",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "915:     mpz_clear(bls_key);",
          "916:     mpz_clear(sum);",
          "917:     mpz_clear(q);",
          "918: }",
          "920: void",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "900:     LOG_INFO(\"SGX call completed\");",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "942:     SET_SUCCESS",
          "943:     clean:",
          "944:     ;",
          "945: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "928:     LOG_DEBUG(\"SGX call completed\");",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #define ECDSA_ENCR_LEN 93",
          "4: #define ECDSA_BIN_LEN 33",
          "5: #define SMALL_BUF_SIZE 1024",
          "6: #define TINY_BUF_SIZE 256",
          "8: enclave {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: #define VERY_SMALL_BUF_SIZE 512",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "140:                                 [in, count = TINY_BUF_SIZE] uint8_t* encrypted_key,",
          "141:                                 uint32_t enc_len,",
          "142:                                 [in, string] char* hashX ,",
          "144:                                 [out, count = SMALL_BUF_SIZE] char* signature);",
          "146:         public void trustedGetBlsPubKeyAES(",
          "",
          "[Removed Lines]",
          "143:                                 [in, string] char* hashY ,",
          "",
          "[Added Lines]",
          "144:                                 [in, string] char* hashY,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1390120c06e1ceb8d5e9350bcb137ae5dece24d4",
      "candidate_info": {
        "commit_hash": "1390120c06e1ceb8d5e9350bcb137ae5dece24d4",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/1390120c06e1ceb8d5e9350bcb137ae5dece24d4",
        "files": [
          "secure_enclave/secure_enclave.c"
        ],
        "message": "SKALE-2002 fix bug with key length",
        "before_after_code_files": [
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ],
          "candidate": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "971:     }",
          "972:     strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes);",
          "973:     char skey_str[mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2];",
          "975:     snprintf(errString, BUF_LEN, \"skey is %s len %d\\n\", skey_str, strlen(skey_str));",
          "977:     int stat = AES_encrypt(skey_str, encryptedPrivateKey);",
          "",
          "[Removed Lines]",
          "974:     mpz_get_str(skey_str, ECDSA_SKEY_BASE, skey);",
          "",
          "[Added Lines]",
          "975:     char arr_skey_str[mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2];",
          "976:     mpz_get_str(arr_skey_str, ECDSA_SKEY_BASE, skey);",
          "977:     n_zeroes = 64 - strlen(arr_skey_str);",
          "978:     for (int i = 0; i < n_zeroes; i++) {",
          "979:         skey_str[i] = '0';",
          "980:     }",
          "981:     strncpy(skey_str + n_zeroes, arr_skey_str, 65 - n_zeroes);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "992:     stat = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str);",
          "993:     if (stat != 0) {",
          "994:         snprintf(errString + 19 + strlen(skey_str), BUF_LEN, \"ecdsa private key decr failed with status %d\", stat);",
          "996:         return;",
          "997:     }",
          "",
          "[Removed Lines]",
          "995:         errStatus = stat;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1529:         if (common_key == NULL) {",
          "1531:             snprintf(errString, BUF_LEN, \"invalid common_key\");",
          "1532:             mpz_clear(sum);",
          "1533:             return;",
          "1534:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1539:             LOG_ERROR(errString);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1540:             snprintf(errString, BUF_LEN, \"invalid common_key\");",
          "1541:             LOG_ERROR(common_key);",
          "1543:             mpz_clear(sum);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1552:             LOG_ERROR(errString);",
          "",
          "---------------"
        ]
      }
    }
  ]
}