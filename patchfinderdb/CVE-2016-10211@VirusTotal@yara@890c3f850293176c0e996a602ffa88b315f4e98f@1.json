{
  "cve_id": "CVE-2016-10211",
  "cve_desc": "libyara/grammar.y in YARA 3.5.0 allows remote attackers to cause a denial of service (use-after-free and application crash) via a crafted rule that is mishandled in the yr_parser_lookup_loop_variable function.",
  "repo": "VirusTotal/yara",
  "patch_hash": "890c3f850293176c0e996a602ffa88b315f4e98f",
  "patch_info": {
    "commit_hash": "890c3f850293176c0e996a602ffa88b315f4e98f",
    "repo": "VirusTotal/yara",
    "commit_url": "https://github.com/VirusTotal/yara/commit/890c3f850293176c0e996a602ffa88b315f4e98f",
    "files": [
      "libyara/grammar.c",
      "libyara/grammar.y"
    ],
    "message": "Fix issue #575",
    "before_after_code_files": [
      "libyara/grammar.c||libyara/grammar.c",
      "libyara/grammar.y||libyara/grammar.y"
    ]
  },
  "patch_diff": {
    "libyara/grammar.c||libyara/grammar.c": [
      "File: libyara/grammar.c -> libyara/grammar.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "547: #define YYFINAL  2",
      "552: #define YYNTOKENS  72",
      "554: #define YYNNTS  41",
      "",
      "[Removed Lines]",
      "549: #define YYLAST   408",
      "556: #define YYNRULES  121",
      "558: #define YYNSTATES  209",
      "",
      "[Added Lines]",
      "549: #define YYLAST   406",
      "556: #define YYNRULES  122",
      "558: #define YYNSTATES  210",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "612:      472,   485,   502,   503,   509,   508,   524,   523,   539,   553,",
      "613:      554,   559,   560,   561,   562,   567,   652,   698,   756,   801,",
      "614:      802,   806,   831,   867,   913,   935,   944,   953,   968,   980,",
      "622: };",
      "623: #endif",
      "",
      "[Removed Lines]",
      "615:      994,  1007,  1019,  1049,  1018,  1163,  1162,  1241,  1247,  1254,",
      "616:     1253,  1316,  1315,  1376,  1385,  1394,  1403,  1412,  1421,  1430,",
      "617:     1434,  1442,  1443,  1448,  1470,  1482,  1498,  1497,  1503,  1514,",
      "618:     1515,  1520,  1527,  1538,  1539,  1543,  1551,  1555,  1565,  1579,",
      "619:     1595,  1605,  1614,  1639,  1651,  1663,  1679,  1691,  1707,  1752,",
      "620:     1771,  1789,  1807,  1825,  1851,  1869,  1879,  1889,  1899,  1909,",
      "621:     1919,  1929",
      "",
      "[Added Lines]",
      "615:      994,  1007,  1018,  1024,  1054,  1023,  1168,  1167,  1246,  1252,",
      "616:     1259,  1258,  1321,  1320,  1381,  1390,  1399,  1408,  1417,  1426,",
      "617:     1435,  1439,  1447,  1448,  1453,  1475,  1487,  1503,  1502,  1508,",
      "618:     1519,  1520,  1525,  1532,  1543,  1544,  1548,  1556,  1560,  1570,",
      "619:     1584,  1600,  1610,  1619,  1644,  1656,  1668,  1684,  1696,  1712,",
      "620:     1757,  1776,  1794,  1812,  1830,  1856,  1874,  1884,  1894,  1904,",
      "621:     1914,  1924,  1934",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "672: #define yypact_value_is_default(Yystate) \\",
      "673:   (!!((Yystate) == (-73)))",
      "677: #define yytable_value_is_error(Yytable_value) \\",
      "678:   0",
      "",
      "[Removed Lines]",
      "675: #define YYTABLE_NINF -94",
      "",
      "[Added Lines]",
      "675: #define YYTABLE_NINF -95",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "682: static const yytype_int16 yypact[] =",
      "683: {",
      "705: };",
      "",
      "[Removed Lines]",
      "684:      -73,    79,   -73,   -32,    -4,   -73,   -73,    94,   -73,   -73,",
      "685:      -73,   -73,    13,   -73,   -73,   -73,   -73,    -8,    72,     6,",
      "686:      -73,    78,   111,   -73,    61,   122,   123,    82,   -73,    90,",
      "687:      123,   -73,   147,   150,    16,   -73,    96,   147,   -73,   101,",
      "688:       97,   -73,   -73,   -73,   -73,   151,    53,   -73,    48,   -73,",
      "689:      -73,   -73,   149,   145,   -73,    -9,   -73,   103,   107,   -73,",
      "690:      -73,   106,   -73,   -73,   -73,   -73,   -73,   -73,   110,   -73,",
      "691:      -73,   135,    48,   135,    48,   -33,   -73,    64,   -73,   144,",
      "692:      306,   -73,   -73,   135,   108,   135,   135,   135,   135,    -7,",
      "693:      322,   -73,   -73,   -73,    64,   117,   163,   168,   135,    48,",
      "694:      -73,   -73,    -6,   167,   135,   135,   135,   135,   135,   135,",
      "695:      135,   135,   135,   135,   135,   135,   135,   135,   135,   135,",
      "696:      135,    86,    86,   322,   135,   -73,   243,   261,   183,   203,",
      "697:      159,    -6,   -73,   -73,   -73,   279,   121,   125,    95,    48,",
      "698:       48,   -73,   -73,   -73,   -73,   322,   337,   351,   -43,   322,",
      "699:      322,   322,   322,   322,   322,    40,    40,    58,    58,   -73,",
      "700:      -73,   -73,   -73,   -73,   -73,   -73,   -73,   129,   -73,   -73,",
      "701:      -73,   -73,   128,   -73,   -73,    48,   152,   -73,    15,   135,",
      "702:      131,   -73,    95,   -73,   -73,    71,   -73,   223,   135,   133,",
      "703:      -73,   132,   -73,    15,   -73,    73,   129,   -73,    48,   -73,",
      "704:      -73,   135,   134,    31,   322,    48,   -73,    49,   -73",
      "",
      "[Added Lines]",
      "684:      -73,    90,   -73,   -32,   -10,   -73,   -73,    93,   -73,   -73,",
      "685:      -73,   -73,     1,   -73,   -73,   -73,   -73,   -49,     7,   -36,",
      "686:      -73,    20,    26,   -73,   -28,    92,    46,     4,   -73,    40,",
      "687:       46,   -73,   100,   119,    16,   -73,    72,   100,   -73,    77,",
      "688:       83,   -73,   -73,   -73,   -73,   134,    59,   -73,    48,   -73,",
      "689:      -73,   -73,   133,   136,   -73,   -18,   -73,    88,    95,   -73,",
      "690:      -73,    91,   -73,   -73,   -73,   -73,   -73,   -73,   102,   -73,",
      "691:      -73,   126,    48,   126,    48,   -44,   -73,    85,   -73,   127,",
      "692:      297,   -73,   -73,   126,   110,   126,   126,   126,   126,     2,",
      "693:      313,   -73,   -73,   -73,    85,   111,   154,   172,   126,    48,",
      "694:      -73,   -73,    -6,   162,   126,   126,   126,   126,   126,   126,",
      "695:      126,   126,   126,   126,   126,   126,   126,   126,   126,   126,",
      "696:      126,    60,    60,   313,   126,   -73,   234,   252,   174,   194,",
      "697:      -73,   153,    -6,   -73,   -73,   -73,   270,   117,   120,   108,",
      "698:       48,    48,   -73,   -73,   -73,   -73,   313,   328,   342,   349,",
      "699:      313,   313,   313,   313,   313,   313,   113,   113,    53,    53,",
      "700:      -73,   -73,   -73,   -73,   -73,   -73,   -73,   -73,   121,   -73,",
      "701:      -73,   -73,   -73,   124,   -73,   -73,    48,   151,   -73,    -1,",
      "702:      126,   125,   -73,   108,   -73,   -73,    18,   -73,   214,   126,",
      "703:      129,   -73,   143,   -73,    -1,   -73,    63,   121,   -73,    48,",
      "704:      -73,   -73,   126,   144,    31,   313,    48,   -73,    33,   -73",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "714:       23,    22,    12,    24,     0,    14,     0,     0,    10,     0,",
      "715:       13,    25,     0,     0,     0,    26,     0,    15,    32,     0,",
      "716:        0,    28,    27,    30,    31,     0,    34,    33,     0,    11,",
      "723:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,",
      "724:        0,    35,    37,    60,     0,    61,     0,     0,     0,     0,",
      "733: };",
      "736: static const yytype_int16 yypgoto[] =",
      "737: {",
      "742:      -67",
      "743: };",
      "",
      "[Removed Lines]",
      "717:       29,    38,     0,     0,    45,    59,   103,   105,   107,   100,",
      "718:      101,     0,   102,    53,    97,    98,    94,    95,     0,    55,",
      "719:       56,     0,     0,     0,     0,   108,   121,    16,    54,     0,",
      "720:       79,    39,    39,     0,     0,     0,     0,     0,     0,     0,",
      "721:       93,   109,    68,   118,     0,    54,    79,     0,     0,    49,",
      "722:       71,    69,     0,     0,     0,     0,     0,     0,     0,     0,",
      "725:        0,     0,    80,    96,    46,     0,     0,    50,    51,     0,",
      "726:        0,    88,    86,    67,    57,    58,   117,   115,   116,    77,",
      "727:       78,    73,    75,    74,    76,   119,   120,   110,   111,   112,",
      "728:      113,   114,    42,    41,    43,    44,    40,     0,   104,   106,",
      "729:       99,    62,     0,    47,    48,     0,    72,    70,     0,     0,",
      "730:        0,    65,    52,    91,    92,     0,    89,     0,     0,     0,",
      "731:       82,     0,    87,     0,    83,     0,    84,    63,     0,    90,",
      "732:       81,     0,     0,     0,    85,     0,    66,     0,    64",
      "738:      -73,   -73,   199,   218,   -73,   -73,   -73,   -73,   -73,   -73,",
      "739:      -73,   -73,   -73,   -73,   192,   -73,   186,   -73,   -73,   142,",
      "740:      -73,   -73,   -73,   -73,   126,   -48,   -72,   -73,   -73,   -73,",
      "741:      -73,   -73,   -73,    50,   -73,   100,   -73,   -73,    35,   164,",
      "",
      "[Added Lines]",
      "717:       29,    38,     0,     0,    45,    59,   104,   106,   108,   101,",
      "718:      102,     0,   103,    53,    98,    99,    95,    96,     0,    55,",
      "719:       56,     0,     0,     0,     0,   109,   122,    16,    54,     0,",
      "720:       80,    39,    39,     0,     0,     0,     0,     0,     0,     0,",
      "721:       94,   110,    69,   119,     0,    54,    80,     0,     0,    49,",
      "722:       72,    70,     0,     0,     0,     0,     0,     0,     0,     0,",
      "725:       62,     0,     0,    81,    97,    46,     0,     0,    50,    51,",
      "726:        0,     0,    89,    87,    68,    57,    58,   118,   116,   117,",
      "727:       78,    79,    74,    76,    75,    77,   120,   121,   111,   112,",
      "728:      113,   114,   115,    42,    41,    43,    44,    40,     0,   105,",
      "729:      107,   100,    63,     0,    47,    48,     0,    73,    71,     0,",
      "730:        0,     0,    66,    52,    92,    93,     0,    90,     0,     0,",
      "731:        0,    83,     0,    88,     0,    84,     0,    85,    64,     0,",
      "732:       91,    82,     0,     0,     0,    86,     0,    67,     0,    65",
      "738:      -73,   -73,   211,   212,   -73,   -73,   -73,   -73,   -73,   -73,",
      "739:      -73,   -73,   -73,   -73,   189,   -73,   183,   -73,   -73,   139,",
      "740:      -73,   -73,   -73,   -73,   130,   -48,   -72,   -73,   -73,   -73,",
      "741:      -73,   -73,   -73,    41,   -73,   103,   -73,   -73,    29,   164,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "747: {",
      "748:       -1,     1,     5,     6,    17,    33,    25,    28,    40,     7,",
      "749:       15,    19,    21,    30,    31,    37,    38,    52,    53,   121,",
      "752:       80",
      "753: };",
      "",
      "[Removed Lines]",
      "750:      166,    75,   136,   137,    76,    94,    78,   180,   202,   191,",
      "751:      140,   139,   189,   125,   195,   143,   178,   185,   186,    79,",
      "",
      "[Added Lines]",
      "750:      167,    75,   137,   138,    76,    94,    78,   181,   203,   192,",
      "751:      141,   140,   190,   125,   196,   144,   179,   186,   187,    79,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "758: static const yytype_int16 yytable[] =",
      "759: {",
      "797:        0,     0,     0,   114,   115,   116,   117,   118,   119,   120,",
      "801: };",
      "803: static const yytype_int16 yycheck[] =",
      "804: {",
      "809:      107,   108,   109,   110,   111,   112,   113,   114,   115,   116,",
      "842:       -1,    -1,    -1,    51,    52,    53,    54,    55,    56,    57,",
      "846: };",
      "",
      "[Removed Lines]",
      "760:       77,    90,    95,   130,    91,     4,    93,    96,   114,   115,",
      "761:      116,   117,   118,   119,   120,    11,   123,    83,   126,   127,",
      "762:      128,   129,    84,    16,    92,   131,   183,   138,   141,     8,",
      "763:      184,   135,    41,    97,    98,    42,    99,   145,   146,   147,",
      "764:      148,   149,   150,   151,   152,   153,   154,   155,   156,   157,",
      "765:      158,   159,   160,   161,    43,    44,    18,   167,    54,    55,",
      "766:       56,    57,    58,   142,    59,    60,    61,    62,    22,    63,",
      "767:       45,   100,   101,    51,   -36,    64,    65,    66,    67,     2,",
      "768:        3,    68,    20,   -17,   -17,   -17,    69,    70,    23,   100,",
      "769:      101,   176,   177,   116,   117,   118,   119,   120,    12,    13,",
      "770:       14,   206,    71,   182,   100,   101,    72,    73,   162,   163,",
      "771:      164,   165,   187,   118,   119,   120,     4,    74,    24,   208,",
      "772:       54,   196,    56,    57,    58,    26,    59,    60,    61,    62,",
      "773:       27,    63,   179,    29,   204,   -54,   -54,    64,    65,    66,",
      "774:       67,   192,   193,   200,   201,    54,    32,    56,    57,    58,",
      "775:      203,    59,    60,    61,    62,    34,    63,   207,    36,    39,",
      "776:       49,    46,    64,    65,    71,    48,    82,    50,    81,    73,",
      "777:       85,   105,   106,   107,    86,    87,   102,   124,   134,    88,",
      "778:      114,   115,   116,   117,   118,   119,   120,   132,    63,    71,",
      "779:      171,   174,   181,   101,    73,   -93,   175,   197,   103,   104,",
      "780:      188,   198,     9,   205,    88,   105,   106,   107,   108,   109,",
      "781:      110,   111,   112,   113,   114,   115,   116,   117,   118,   119,",
      "782:      120,    10,    35,    47,   122,   105,   106,   107,   199,   144,",
      "783:      190,   172,    89,   133,   114,   115,   116,   117,   118,   119,",
      "784:      120,     0,     0,     0,     0,   105,   106,   107,     0,     0,",
      "785:        0,     0,     0,   170,   114,   115,   116,   117,   118,   119,",
      "786:      120,     0,     0,     0,     0,   105,   106,   107,     0,     0,",
      "787:        0,     0,     0,   133,   114,   115,   116,   117,   118,   119,",
      "788:      120,     0,     0,     0,     0,   105,   106,   107,     0,     0,",
      "789:        0,     0,     0,   194,   114,   115,   116,   117,   118,   119,",
      "790:      120,     0,     0,   105,   106,   107,     0,     0,     0,     0,",
      "791:        0,   168,   114,   115,   116,   117,   118,   119,   120,     0,",
      "792:        0,   105,   106,   107,     0,     0,     0,     0,     0,   169,",
      "793:      114,   115,   116,   117,   118,   119,   120,     0,   -93,     0,",
      "794:        0,   103,   104,     0,     0,     0,     0,   173,   105,   106,",
      "795:      107,   108,   109,   110,   111,   112,   113,   114,   115,   116,",
      "796:      117,   118,   119,   120,   105,   106,   107,     0,     0,     0,",
      "798:      106,   107,     0,     0,     0,     0,     0,     0,   114,   115,",
      "799:      116,   117,   118,   119,   120,   107,     0,     0,     0,     0,",
      "800:        0,     0,   114,   115,   116,   117,   118,   119,   120",
      "805:       48,    68,    74,    10,    71,    37,    73,    74,    51,    52,",
      "806:       53,    54,    55,    56,    57,    19,    83,    26,    85,    86,",
      "807:       87,    88,    31,    10,    72,    32,    11,    99,    34,    61,",
      "808:       15,    98,    16,    66,    67,    19,    69,   104,   105,   106,",
      "810:      117,   118,   119,   120,    38,    39,    64,   124,    10,    11,",
      "811:       12,    13,    14,    69,    16,    17,    18,    19,    62,    21,",
      "812:       54,    40,    41,    20,    21,    27,    28,    29,    30,     0,",
      "813:        1,    33,    10,     4,     5,     6,    38,    39,    10,    40,",
      "814:       41,   139,   140,    53,    54,    55,    56,    57,     4,     5,",
      "815:        6,    70,    54,   175,    40,    41,    58,    59,    22,    23,",
      "816:       24,    25,   179,    55,    56,    57,    37,    69,     7,    70,",
      "817:       10,   188,    12,    13,    14,    64,    16,    17,    18,    19,",
      "818:        8,    21,     3,    10,   201,    40,    41,    27,    28,    29,",
      "819:       30,    70,    71,    70,    71,    10,    64,    12,    13,    14,",
      "820:      198,    16,    17,    18,    19,    65,    21,   205,    11,     9,",
      "821:       63,    65,    27,    28,    54,    64,    21,    16,    19,    59,",
      "822:       67,    42,    43,    44,    67,    69,    32,    69,    10,    69,",
      "823:       51,    52,    53,    54,    55,    56,    57,    70,    21,    54,",
      "824:       31,    70,    64,    41,    59,    32,    71,    64,    35,    36,",
      "825:       69,    69,     3,    69,    69,    42,    43,    44,    45,    46,",
      "826:       47,    48,    49,    50,    51,    52,    53,    54,    55,    56,",
      "827:       57,     3,    30,    37,    82,    42,    43,    44,   193,   103,",
      "828:      180,   131,    68,    70,    51,    52,    53,    54,    55,    56,",
      "829:       57,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    -1,",
      "830:       -1,    -1,    -1,    70,    51,    52,    53,    54,    55,    56,",
      "831:       57,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    -1,",
      "832:       -1,    -1,    -1,    70,    51,    52,    53,    54,    55,    56,",
      "833:       57,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    -1,",
      "834:       -1,    -1,    -1,    70,    51,    52,    53,    54,    55,    56,",
      "835:       57,    -1,    -1,    42,    43,    44,    -1,    -1,    -1,    -1,",
      "836:       -1,    68,    51,    52,    53,    54,    55,    56,    57,    -1,",
      "837:       -1,    42,    43,    44,    -1,    -1,    -1,    -1,    -1,    68,",
      "838:       51,    52,    53,    54,    55,    56,    57,    -1,    32,    -1,",
      "839:       -1,    35,    36,    -1,    -1,    -1,    -1,    68,    42,    43,",
      "840:       44,    45,    46,    47,    48,    49,    50,    51,    52,    53,",
      "841:       54,    55,    56,    57,    42,    43,    44,    -1,    -1,    -1,",
      "843:       43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,    52,",
      "844:       53,    54,    55,    56,    57,    44,    -1,    -1,    -1,    -1,",
      "845:       -1,    -1,    51,    52,    53,    54,    55,    56,    57",
      "",
      "[Added Lines]",
      "760:       77,    90,    95,   130,    91,     4,    93,    96,    83,    11,",
      "761:      184,    16,   131,    84,   185,    18,   123,    20,   126,   127,",
      "762:      128,   129,    97,    98,    92,    99,    22,   139,   142,     8,",
      "763:       23,   136,    41,    24,   132,    42,    26,   146,   147,   148,",
      "764:      149,   150,   151,   152,   153,   154,   155,   156,   157,   158,",
      "765:      159,   160,   161,   162,    43,    44,    29,   168,    54,    55,",
      "766:       56,    57,    58,   143,    59,    60,    61,    62,    32,    63,",
      "767:       45,   100,   101,   100,   101,    64,    65,    66,    67,    51,",
      "768:      -36,    68,   163,   164,   165,   166,    69,    70,   193,   194,",
      "769:        2,     3,   177,   178,   -17,   -17,   -17,    12,    13,    14,",
      "770:       27,   207,    71,   209,   183,    34,    72,    73,   118,   119,",
      "771:      120,    36,    54,   188,    56,    57,    58,    74,    59,    60,",
      "772:       61,    62,   197,    63,   180,   100,   101,     4,    39,    64,",
      "773:       65,    66,    67,   201,   202,   205,    54,    46,    56,    57,",
      "774:       58,    48,    59,    60,    61,    62,    49,    63,   -54,   -54,",
      "775:       50,   204,    81,    64,    65,    85,    71,    82,   208,   102,",
      "776:       87,    73,    86,   105,   106,   107,   116,   117,   118,   119,",
      "777:      120,    88,   114,   115,   116,   117,   118,   119,   120,   124,",
      "778:       71,   133,   135,    63,   172,    73,   -94,   175,   182,   103,",
      "779:      104,   176,   101,   198,   189,    88,   105,   106,   107,   108,",
      "780:      109,   110,   111,   112,   113,   114,   115,   116,   117,   118,",
      "781:      119,   120,   199,   206,     9,    10,   105,   106,   107,    35,",
      "782:       47,   122,   191,   200,   134,   114,   115,   116,   117,   118,",
      "783:      119,   120,    89,   145,     0,   173,   105,   106,   107,     0,",
      "784:        0,     0,     0,     0,   171,   114,   115,   116,   117,   118,",
      "785:      119,   120,     0,     0,     0,     0,   105,   106,   107,     0,",
      "786:        0,     0,     0,     0,   134,   114,   115,   116,   117,   118,",
      "787:      119,   120,     0,     0,     0,     0,   105,   106,   107,     0,",
      "788:        0,     0,     0,     0,   195,   114,   115,   116,   117,   118,",
      "789:      119,   120,     0,     0,   105,   106,   107,     0,     0,     0,",
      "790:        0,     0,   169,   114,   115,   116,   117,   118,   119,   120,",
      "791:        0,     0,   105,   106,   107,     0,     0,     0,     0,     0,",
      "792:      170,   114,   115,   116,   117,   118,   119,   120,     0,   -94,",
      "793:        0,     0,   103,   104,     0,     0,     0,     0,   174,   105,",
      "794:      106,   107,   108,   109,   110,   111,   112,   113,   114,   115,",
      "795:      116,   117,   118,   119,   120,   105,   106,   107,     0,     0,",
      "796:        0,     0,     0,     0,   114,   115,   116,   117,   118,   119,",
      "797:      120,   106,   107,     0,     0,     0,     0,     0,     0,   114,",
      "798:      115,   116,   117,   118,   119,   120,   107,     0,     0,     0,",
      "800:      114,   115,   116,   117,   118,   119,   120",
      "805:       48,    68,    74,     1,    71,    37,    73,    74,    26,    19,",
      "806:       11,    10,    10,    31,    15,    64,    83,    10,    85,    86,",
      "807:       87,    88,    66,    67,    72,    69,    62,    99,    34,    61,",
      "808:       10,    98,    16,     7,    32,    19,    64,   104,   105,   106,",
      "810:      117,   118,   119,   120,    38,    39,    10,   124,    10,    11,",
      "811:       12,    13,    14,    69,    16,    17,    18,    19,    64,    21,",
      "812:       54,    40,    41,    40,    41,    27,    28,    29,    30,    20,",
      "813:       21,    33,    22,    23,    24,    25,    38,    39,    70,    71,",
      "814:        0,     1,   140,   141,     4,     5,     6,     4,     5,     6,",
      "815:        8,    70,    54,    70,   176,    65,    58,    59,    55,    56,",
      "816:       57,    11,    10,   180,    12,    13,    14,    69,    16,    17,",
      "817:       18,    19,   189,    21,     3,    40,    41,    37,     9,    27,",
      "818:       28,    29,    30,    70,    71,   202,    10,    65,    12,    13,",
      "819:       14,    64,    16,    17,    18,    19,    63,    21,    40,    41,",
      "820:       16,   199,    19,    27,    28,    67,    54,    21,   206,    32,",
      "821:       69,    59,    67,    42,    43,    44,    53,    54,    55,    56,",
      "822:       57,    69,    51,    52,    53,    54,    55,    56,    57,    69,",
      "823:       54,    70,    10,    21,    31,    59,    32,    70,    64,    35,",
      "824:       36,    71,    41,    64,    69,    69,    42,    43,    44,    45,",
      "825:       46,    47,    48,    49,    50,    51,    52,    53,    54,    55,",
      "826:       56,    57,    69,    69,     3,     3,    42,    43,    44,    30,",
      "827:       37,    82,   181,   194,    70,    51,    52,    53,    54,    55,",
      "828:       56,    57,    68,   103,    -1,   132,    42,    43,    44,    -1,",
      "829:       -1,    -1,    -1,    -1,    70,    51,    52,    53,    54,    55,",
      "830:       56,    57,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,",
      "831:       -1,    -1,    -1,    -1,    70,    51,    52,    53,    54,    55,",
      "832:       56,    57,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,",
      "833:       -1,    -1,    -1,    -1,    70,    51,    52,    53,    54,    55,",
      "834:       56,    57,    -1,    -1,    42,    43,    44,    -1,    -1,    -1,",
      "835:       -1,    -1,    68,    51,    52,    53,    54,    55,    56,    57,",
      "836:       -1,    -1,    42,    43,    44,    -1,    -1,    -1,    -1,    -1,",
      "837:       68,    51,    52,    53,    54,    55,    56,    57,    -1,    32,",
      "838:       -1,    -1,    35,    36,    -1,    -1,    -1,    -1,    68,    42,",
      "839:       43,    44,    45,    46,    47,    48,    49,    50,    51,    52,",
      "840:       53,    54,    55,    56,    57,    42,    43,    44,    -1,    -1,",
      "841:       -1,    -1,    -1,    -1,    51,    52,    53,    54,    55,    56,",
      "842:       57,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,",
      "843:       52,    53,    54,    55,    56,    57,    44,    -1,    -1,    -1,",
      "845:       51,    52,    53,    54,    55,    56,    57",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "862:       40,    41,    32,    35,    36,    42,    43,    44,    45,    46,",
      "863:       47,    48,    49,    50,    51,    52,    53,    54,    55,    56,",
      "864:       57,    91,    91,   112,    69,   105,   112,   112,   112,   112,",
      "867:      112,   112,   112,   112,   112,   112,   112,   112,   112,   112,",
      "873: };",
      "",
      "[Removed Lines]",
      "865:       10,    32,    70,    70,    10,   112,    94,    95,    98,   103,",
      "866:      102,    34,    69,   107,    96,   112,   112,   112,   112,   112,",
      "868:      112,   112,    22,    23,    24,    25,    92,   112,    68,    68,",
      "869:       70,    31,   107,    68,    70,    71,    97,    97,   108,     3,",
      "870:       99,    64,    98,    11,    15,   109,   110,   112,    69,   104,",
      "871:      105,   101,    70,    71,    70,   106,   112,    64,    69,   110,",
      "872:       70,    71,   100,    97,   112,    69,    70,    97,    70",
      "",
      "[Added Lines]",
      "865:        1,    10,    32,    70,    70,    10,   112,    94,    95,    98,",
      "866:      103,   102,    34,    69,   107,    96,   112,   112,   112,   112,",
      "868:      112,   112,   112,    22,    23,    24,    25,    92,   112,    68,",
      "869:       68,    70,    31,   107,    68,    70,    71,    97,    97,   108,",
      "870:        3,    99,    64,    98,    11,    15,   109,   110,   112,    69,",
      "871:      104,   105,   101,    70,    71,    70,   106,   112,    64,    69,",
      "872:      110,    70,    71,   100,    97,   112,    69,    70,    97,    70",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "881:       86,    86,    87,    87,    89,    88,    90,    88,    88,    91,",
      "882:       91,    92,    92,    92,    92,    93,    93,    93,    93,    94,",
      "883:       94,    95,    95,    96,    97,    98,    98,    98,    98,    98,",
      "888:      112,   112,   112,   112,   112,   112,   112,   112,   112,   112,",
      "889:      112,   112,   112,   112,   112,   112,   112,   112,   112,   112,",
      "891: };",
      "",
      "[Removed Lines]",
      "884:       98,    98,    99,   100,    98,   101,    98,    98,    98,   102,",
      "885:       98,   103,    98,    98,    98,    98,    98,    98,    98,    98,",
      "886:       98,   104,   104,   105,   106,   106,   108,   107,   107,   109,",
      "887:      109,   110,   110,   111,   111,   111,   112,   112,   112,   112,",
      "890:      112,   112",
      "",
      "[Added Lines]",
      "884:       98,    98,    98,    99,   100,    98,   101,    98,    98,    98,",
      "885:      102,    98,   103,    98,    98,    98,    98,    98,    98,    98,",
      "886:       98,    98,   104,   104,   105,   106,   106,   108,   107,   107,",
      "887:      109,   109,   110,   110,   111,   111,   111,   112,   112,   112,",
      "890:      112,   112,   112",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "899:        3,     3,     1,     2,     0,     5,     0,     5,     3,     0,",
      "900:        2,     1,     1,     1,     1,     1,     3,     4,     4,     0,",
      "901:        1,     1,     3,     1,     1,     1,     1,     3,     3,     1,",
      "909: };",
      "",
      "[Removed Lines]",
      "902:        3,     3,     0,     0,    11,     0,     9,     3,     2,     0,",
      "903:        4,     0,     4,     3,     3,     3,     3,     3,     3,     1,",
      "904:        3,     3,     1,     5,     1,     3,     0,     4,     1,     1,",
      "905:        3,     1,     1,     1,     1,     1,     3,     1,     1,     4,",
      "906:        1,     1,     1,     1,     4,     1,     4,     1,     1,     2,",
      "907:        3,     3,     3,     3,     3,     3,     3,     3,     2,     3,",
      "908:        3,     1",
      "",
      "[Added Lines]",
      "902:        3,     3,     3,     0,     0,    11,     0,     9,     3,     2,",
      "903:        0,     4,     0,     4,     3,     3,     3,     3,     3,     3,",
      "904:        1,     3,     3,     1,     5,     1,     3,     0,     4,     1,",
      "905:        1,     3,     1,     1,     1,     1,     1,     3,     1,     1,",
      "906:        4,     1,     1,     1,     1,     4,     1,     4,     1,     1,",
      "907:        2,     3,     3,     3,     3,     3,     3,     3,     3,     2,",
      "908:        3,     3,     1",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "2587:   case 62:",
      "2589:     {",
      "2590:         int var_index;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2589:     {",
      "2590:         compiler->loop_depth--;",
      "2591:         compiler->loop_identifier[compiler->loop_depth] = NULL;",
      "2592:       }",
      "2594:     break;",
      "2596:   case 63:",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "2616:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
      "2617:       }",
      "2619:     break;",
      "2623:     {",
      "2624:         int mem_offset = LOOP_LOCAL_VARS * compiler->loop_depth;",
      "2625:         uint8_t* addr;",
      "",
      "[Removed Lines]",
      "2621:   case 63:",
      "",
      "[Added Lines]",
      "2630:   case 64:",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "2654:         compiler->loop_identifier[compiler->loop_depth] = (yyvsp[-4].c_string);",
      "2655:         compiler->loop_depth++;",
      "2656:       }",
      "2658:     break;",
      "2662:     {",
      "2663:         int mem_offset;",
      "",
      "[Removed Lines]",
      "2660:   case 64:",
      "",
      "[Added Lines]",
      "2669:   case 65:",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "2738:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
      "2739:       }",
      "2741:     break;",
      "2745:     {",
      "2746:         int mem_offset = LOOP_LOCAL_VARS * compiler->loop_depth;",
      "2747:         uint8_t* addr;",
      "",
      "[Removed Lines]",
      "2743:   case 65:",
      "",
      "[Added Lines]",
      "2752:   case 66:",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "2771:         compiler->loop_identifier[compiler->loop_depth] = NULL;",
      "2772:         compiler->loop_depth++;",
      "2773:       }",
      "2775:     break;",
      "2779:     {",
      "2780:         int mem_offset;",
      "",
      "[Removed Lines]",
      "2777:   case 66:",
      "",
      "[Added Lines]",
      "2786:   case 67:",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "2824:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
      "2826:       }",
      "2828:     break;",
      "2832:     {",
      "2833:         yr_parser_emit(yyscanner, OP_OF, NULL);",
      "2835:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
      "2836:       }",
      "2838:     break;",
      "2842:     {",
      "2843:         yr_parser_emit(yyscanner, OP_NOT, NULL);",
      "2845:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
      "2846:       }",
      "2848:     break;",
      "2852:     {",
      "2853:         YR_FIXUP* fixup;",
      "2854:         void* jmp_destination_addr;",
      "",
      "[Removed Lines]",
      "2830:   case 67:",
      "2840:   case 68:",
      "2850:   case 69:",
      "",
      "[Added Lines]",
      "2839:   case 68:",
      "2849:   case 69:",
      "2859:   case 70:",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "2874:         fixup->next = compiler->fixup_stack_head;",
      "2875:         compiler->fixup_stack_head = fixup;",
      "2876:       }",
      "2878:     break;",
      "2882:     {",
      "2883:         YR_FIXUP* fixup;",
      "2884:         uint8_t* and_addr;",
      "",
      "[Removed Lines]",
      "2880:   case 70:",
      "",
      "[Added Lines]",
      "2889:   case 71:",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "2915:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
      "2916:       }",
      "2918:     break;",
      "2922:     {",
      "2923:         YR_FIXUP* fixup;",
      "2924:         void* jmp_destination_addr;",
      "",
      "[Removed Lines]",
      "2920:   case 71:",
      "",
      "[Added Lines]",
      "2929:   case 72:",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "2943:         fixup->next = compiler->fixup_stack_head;",
      "2944:         compiler->fixup_stack_head = fixup;",
      "2945:       }",
      "2947:     break;",
      "2951:     {",
      "2952:         YR_FIXUP* fixup;",
      "2953:         uint8_t* or_addr;",
      "",
      "[Removed Lines]",
      "2949:   case 72:",
      "",
      "[Added Lines]",
      "2958:   case 73:",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "2984:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
      "2985:       }",
      "2987:     break;",
      "2991:     {",
      "2992:         compiler->last_result = yr_parser_reduce_operation(",
      "2993:             yyscanner, \"<\", (yyvsp[-2].expression), (yyvsp[0].expression));",
      "",
      "[Removed Lines]",
      "2989:   case 73:",
      "",
      "[Added Lines]",
      "2998:   case 74:",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "2997:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
      "2998:       }",
      "3000:     break;",
      "3004:     {",
      "3005:         compiler->last_result = yr_parser_reduce_operation(",
      "3006:             yyscanner, \">\", (yyvsp[-2].expression), (yyvsp[0].expression));",
      "",
      "[Removed Lines]",
      "3002:   case 74:",
      "",
      "[Added Lines]",
      "3011:   case 75:",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "3010:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
      "3011:       }",
      "3013:     break;",
      "3017:     {",
      "3018:         compiler->last_result = yr_parser_reduce_operation(",
      "3019:             yyscanner, \"<=\", (yyvsp[-2].expression), (yyvsp[0].expression));",
      "",
      "[Removed Lines]",
      "3015:   case 75:",
      "",
      "[Added Lines]",
      "3024:   case 76:",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "3023:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
      "3024:       }",
      "3026:     break;",
      "3030:     {",
      "3031:         compiler->last_result = yr_parser_reduce_operation(",
      "3032:             yyscanner, \">=\", (yyvsp[-2].expression), (yyvsp[0].expression));",
      "",
      "[Removed Lines]",
      "3028:   case 76:",
      "",
      "[Added Lines]",
      "3037:   case 77:",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "3036:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
      "3037:       }",
      "3039:     break;",
      "3043:     {",
      "3044:         compiler->last_result = yr_parser_reduce_operation(",
      "3045:             yyscanner, \"==\", (yyvsp[-2].expression), (yyvsp[0].expression));",
      "",
      "[Removed Lines]",
      "3041:   case 77:",
      "",
      "[Added Lines]",
      "3050:   case 78:",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "3049:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
      "3050:       }",
      "3052:     break;",
      "3056:     {",
      "3057:         compiler->last_result = yr_parser_reduce_operation(",
      "3058:             yyscanner, \"!=\", (yyvsp[-2].expression), (yyvsp[0].expression));",
      "",
      "[Removed Lines]",
      "3054:   case 78:",
      "",
      "[Added Lines]",
      "3063:   case 79:",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "3062:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
      "3063:       }",
      "3065:     break;",
      "3069:     {",
      "3070:         (yyval.expression) = (yyvsp[0].expression);",
      "3071:       }",
      "3073:     break;",
      "3077:     {",
      "3078:         (yyval.expression) = (yyvsp[-1].expression);",
      "3079:       }",
      "3081:     break;",
      "3085:     { (yyval.integer) = INTEGER_SET_ENUMERATION; }",
      "3087:     break;",
      "3091:     { (yyval.integer) = INTEGER_SET_RANGE; }",
      "3093:     break;",
      "3097:     {",
      "3098:         if ((yyvsp[-3].expression).type != EXPRESSION_TYPE_INTEGER)",
      "3099:         {",
      "",
      "[Removed Lines]",
      "3067:   case 79:",
      "3075:   case 80:",
      "3083:   case 81:",
      "3089:   case 82:",
      "3095:   case 83:",
      "",
      "[Added Lines]",
      "3076:   case 80:",
      "3084:   case 81:",
      "3092:   case 82:",
      "3098:   case 83:",
      "3104:   case 84:",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "3112:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
      "3113:       }",
      "3115:     break;",
      "3119:     {",
      "3120:         if ((yyvsp[0].expression).type != EXPRESSION_TYPE_INTEGER)",
      "3121:         {",
      "",
      "[Removed Lines]",
      "3117:   case 84:",
      "",
      "[Added Lines]",
      "3126:   case 85:",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "3128:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
      "3129:       }",
      "3131:     break;",
      "3135:     {",
      "3136:         if ((yyvsp[0].expression).type != EXPRESSION_TYPE_INTEGER)",
      "3137:         {",
      "",
      "[Removed Lines]",
      "3133:   case 85:",
      "",
      "[Added Lines]",
      "3142:   case 86:",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "3143:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
      "3144:       }",
      "3146:     break;",
      "3150:     {",
      "3152:         yr_parser_emit_with_arg(yyscanner, OP_PUSH, UNDEFINED, NULL, NULL);",
      "3153:       }",
      "3155:     break;",
      "3159:     {",
      "3160:         yr_parser_emit_with_arg(yyscanner, OP_PUSH, UNDEFINED, NULL, NULL);",
      "3161:         yr_parser_emit_pushes_for_strings(yyscanner, \"$*\");",
      "3163:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
      "3164:       }",
      "3166:     break;",
      "3170:     {",
      "3171:         yr_parser_emit_pushes_for_strings(yyscanner, (yyvsp[0].c_string));",
      "3172:         yr_free((yyvsp[0].c_string));",
      "3174:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
      "3175:       }",
      "3177:     break;",
      "3181:     {",
      "3182:         yr_parser_emit_pushes_for_strings(yyscanner, (yyvsp[0].c_string));",
      "3183:         yr_free((yyvsp[0].c_string));",
      "3185:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
      "3186:       }",
      "3188:     break;",
      "3192:     {",
      "3193:         yr_parser_emit_with_arg(yyscanner, OP_PUSH, UNDEFINED, NULL, NULL);",
      "3194:       }",
      "3196:     break;",
      "3200:     {",
      "3201:         yr_parser_emit_with_arg(yyscanner, OP_PUSH, 1, NULL, NULL);",
      "3202:       }",
      "3204:     break;",
      "3208:     {",
      "3209:         (yyval.expression) = (yyvsp[-1].expression);",
      "3210:       }",
      "3212:     break;",
      "3216:     {",
      "3217:         compiler->last_result = yr_parser_emit(",
      "3218:             yyscanner, OP_FILESIZE, NULL);",
      "",
      "[Removed Lines]",
      "3148:   case 86:",
      "3157:   case 88:",
      "3168:   case 91:",
      "3179:   case 92:",
      "3190:   case 94:",
      "3198:   case 95:",
      "3206:   case 96:",
      "3214:   case 97:",
      "",
      "[Added Lines]",
      "3157:   case 87:",
      "3166:   case 89:",
      "3177:   case 92:",
      "3188:   case 93:",
      "3199:   case 95:",
      "3207:   case 96:",
      "3215:   case 97:",
      "3223:   case 98:",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "3222:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3223:         (yyval.expression).value.integer = UNDEFINED;",
      "3224:       }",
      "3226:     break;",
      "3230:     {",
      "3231:         yywarning(yyscanner,",
      "3232:             \"Using deprecated \\\"entrypoint\\\" keyword. Use the \\\"entry_point\\\" \"",
      "",
      "[Removed Lines]",
      "3228:   case 98:",
      "",
      "[Added Lines]",
      "3237:   case 99:",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "3240:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3241:         (yyval.expression).value.integer = UNDEFINED;",
      "3242:       }",
      "3244:     break;",
      "3248:     {",
      "3249:         CHECK_TYPE((yyvsp[-1].expression), EXPRESSION_TYPE_INTEGER, \"intXXXX or uintXXXX\");",
      "",
      "[Removed Lines]",
      "3246:   case 99:",
      "",
      "[Added Lines]",
      "3255:   case 100:",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "3260:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3261:         (yyval.expression).value.integer = UNDEFINED;",
      "3262:       }",
      "3264:     break;",
      "3268:     {",
      "3269:         compiler->last_result = yr_parser_emit_with_arg(",
      "3270:             yyscanner, OP_PUSH, (yyvsp[0].integer), NULL, NULL);",
      "",
      "[Removed Lines]",
      "3266:   case 100:",
      "",
      "[Added Lines]",
      "3275:   case 101:",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "3274:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3275:         (yyval.expression).value.integer = (yyvsp[0].integer);",
      "3276:       }",
      "3278:     break;",
      "3282:     {",
      "3283:         compiler->last_result = yr_parser_emit_with_arg_double(",
      "3284:             yyscanner, OP_PUSH, (yyvsp[0].double_), NULL, NULL);",
      "",
      "[Removed Lines]",
      "3280:   case 101:",
      "",
      "[Added Lines]",
      "3289:   case 102:",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "3288:         (yyval.expression).type = EXPRESSION_TYPE_FLOAT;",
      "3289:       }",
      "3291:     break;",
      "3295:     {",
      "3296:         SIZED_STRING* sized_string;",
      "",
      "[Removed Lines]",
      "3293:   case 102:",
      "",
      "[Added Lines]",
      "3302:   case 103:",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "3316:         (yyval.expression).type = EXPRESSION_TYPE_STRING;",
      "3317:         (yyval.expression).value.sized_string = sized_string;",
      "3318:       }",
      "3320:     break;",
      "3324:     {",
      "3325:         compiler->last_result = yr_parser_reduce_string_identifier(",
      "3326:             yyscanner, (yyvsp[0].c_string), OP_COUNT, UNDEFINED);",
      "",
      "[Removed Lines]",
      "3322:   case 103:",
      "",
      "[Added Lines]",
      "3331:   case 104:",
      "",
      "---------------",
      "--- Hunk 36 ---",
      "[Context before]",
      "3332:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3333:         (yyval.expression).value.integer = UNDEFINED;",
      "3334:       }",
      "3336:     break;",
      "3340:     {",
      "3341:         compiler->last_result = yr_parser_reduce_string_identifier(",
      "3342:             yyscanner, (yyvsp[-3].c_string), OP_OFFSET, UNDEFINED);",
      "",
      "[Removed Lines]",
      "3338:   case 104:",
      "",
      "[Added Lines]",
      "3347:   case 105:",
      "",
      "---------------",
      "--- Hunk 37 ---",
      "[Context before]",
      "3348:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3349:         (yyval.expression).value.integer = UNDEFINED;",
      "3350:       }",
      "3352:     break;",
      "3356:     {",
      "3357:         compiler->last_result = yr_parser_emit_with_arg(",
      "3358:             yyscanner, OP_PUSH, 1, NULL, NULL);",
      "",
      "[Removed Lines]",
      "3354:   case 105:",
      "",
      "[Added Lines]",
      "3363:   case 106:",
      "",
      "---------------",
      "--- Hunk 38 ---",
      "[Context before]",
      "3368:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3369:         (yyval.expression).value.integer = UNDEFINED;",
      "3370:       }",
      "3372:     break;",
      "3376:     {",
      "3377:         compiler->last_result = yr_parser_reduce_string_identifier(",
      "3378:             yyscanner, (yyvsp[-3].c_string), OP_LENGTH, UNDEFINED);",
      "",
      "[Removed Lines]",
      "3374:   case 106:",
      "",
      "[Added Lines]",
      "3383:   case 107:",
      "",
      "---------------",
      "--- Hunk 39 ---",
      "[Context before]",
      "3384:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3385:         (yyval.expression).value.integer = UNDEFINED;",
      "3386:       }",
      "3388:     break;",
      "3392:     {",
      "3393:         compiler->last_result = yr_parser_emit_with_arg(",
      "3394:             yyscanner, OP_PUSH, 1, NULL, NULL);",
      "",
      "[Removed Lines]",
      "3390:   case 107:",
      "",
      "[Added Lines]",
      "3399:   case 108:",
      "",
      "---------------",
      "--- Hunk 40 ---",
      "[Context before]",
      "3404:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3405:         (yyval.expression).value.integer = UNDEFINED;",
      "3406:       }",
      "3408:     break;",
      "3412:     {",
      "3413:         if ((yyvsp[0].expression).type == EXPRESSION_TYPE_INTEGER)  // loop identifier",
      "3414:         {",
      "",
      "[Removed Lines]",
      "3410:   case 108:",
      "",
      "[Added Lines]",
      "3419:   case 109:",
      "",
      "---------------",
      "--- Hunk 41 ---",
      "[Context before]",
      "3454:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
      "3455:       }",
      "3457:     break;",
      "3461:     {",
      "3462:         CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER | EXPRESSION_TYPE_FLOAT, \"-\");",
      "",
      "[Removed Lines]",
      "3459:   case 109:",
      "",
      "[Added Lines]",
      "3468:   case 110:",
      "",
      "---------------",
      "--- Hunk 42 ---",
      "[Context before]",
      "3477:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
      "3478:       }",
      "3480:     break;",
      "3484:     {",
      "3485:         compiler->last_result = yr_parser_reduce_operation(",
      "3486:             yyscanner, \"+\", (yyvsp[-2].expression), (yyvsp[0].expression));",
      "",
      "[Removed Lines]",
      "3482:   case 110:",
      "",
      "[Added Lines]",
      "3491:   case 111:",
      "",
      "---------------",
      "--- Hunk 43 ---",
      "[Context before]",
      "3498:           (yyval.expression).type = EXPRESSION_TYPE_FLOAT;",
      "3499:         }",
      "3500:       }",
      "3502:     break;",
      "3506:     {",
      "3507:         compiler->last_result = yr_parser_reduce_operation(",
      "3508:             yyscanner, \"-\", (yyvsp[-2].expression), (yyvsp[0].expression));",
      "",
      "[Removed Lines]",
      "3504:   case 111:",
      "",
      "[Added Lines]",
      "3513:   case 112:",
      "",
      "---------------",
      "--- Hunk 44 ---",
      "[Context before]",
      "3520:           (yyval.expression).type = EXPRESSION_TYPE_FLOAT;",
      "3521:         }",
      "3522:       }",
      "3524:     break;",
      "3528:     {",
      "3529:         compiler->last_result = yr_parser_reduce_operation(",
      "3530:             yyscanner, \"*\", (yyvsp[-2].expression), (yyvsp[0].expression));",
      "",
      "[Removed Lines]",
      "3526:   case 112:",
      "",
      "[Added Lines]",
      "3535:   case 113:",
      "",
      "---------------",
      "--- Hunk 45 ---",
      "[Context before]",
      "3542:           (yyval.expression).type = EXPRESSION_TYPE_FLOAT;",
      "3543:         }",
      "3544:       }",
      "3546:     break;",
      "3550:     {",
      "3551:         compiler->last_result = yr_parser_reduce_operation(",
      "3552:             yyscanner, \"\\\\\", (yyvsp[-2].expression), (yyvsp[0].expression));",
      "",
      "[Removed Lines]",
      "3548:   case 113:",
      "",
      "[Added Lines]",
      "3557:   case 114:",
      "",
      "---------------",
      "--- Hunk 46 ---",
      "[Context before]",
      "3572:           (yyval.expression).type = EXPRESSION_TYPE_FLOAT;",
      "3573:         }",
      "3574:       }",
      "3576:     break;",
      "3580:     {",
      "3581:         CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, \"%\");",
      "3582:         CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"%\");",
      "",
      "[Removed Lines]",
      "3578:   case 114:",
      "",
      "[Added Lines]",
      "3587:   case 115:",
      "",
      "---------------",
      "--- Hunk 47 ---",
      "[Context before]",
      "3594:           ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
      "3595:         }",
      "3596:       }",
      "3598:     break;",
      "3602:     {",
      "3603:         CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, \"^\");",
      "3604:         CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"^\");",
      "",
      "[Removed Lines]",
      "3600:   case 115:",
      "",
      "[Added Lines]",
      "3609:   case 116:",
      "",
      "---------------",
      "--- Hunk 48 ---",
      "[Context before]",
      "3608:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3609:         (yyval.expression).value.integer = OPERATION(^, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
      "3610:       }",
      "3612:     break;",
      "3616:     {",
      "3617:         CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, \"^\");",
      "3618:         CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"^\");",
      "",
      "[Removed Lines]",
      "3614:   case 116:",
      "",
      "[Added Lines]",
      "3623:   case 117:",
      "",
      "---------------",
      "--- Hunk 49 ---",
      "[Context before]",
      "3622:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3623:         (yyval.expression).value.integer = OPERATION(&, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
      "3624:       }",
      "3626:     break;",
      "3630:     {",
      "3631:         CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, \"|\");",
      "3632:         CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"|\");",
      "",
      "[Removed Lines]",
      "3628:   case 117:",
      "",
      "[Added Lines]",
      "3637:   case 118:",
      "",
      "---------------",
      "--- Hunk 50 ---",
      "[Context before]",
      "3636:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3637:         (yyval.expression).value.integer = OPERATION(|, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
      "3638:       }",
      "3640:     break;",
      "3644:     {",
      "3645:         CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"~\");",
      "",
      "[Removed Lines]",
      "3642:   case 118:",
      "",
      "[Added Lines]",
      "3651:   case 119:",
      "",
      "---------------",
      "--- Hunk 51 ---",
      "[Context before]",
      "3650:         (yyval.expression).value.integer = ((yyvsp[0].expression).value.integer == UNDEFINED) ?",
      "3651:             UNDEFINED : ~((yyvsp[0].expression).value.integer);",
      "3652:       }",
      "3654:     break;",
      "3658:     {",
      "3659:         CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, \"<<\");",
      "3660:         CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"<<\");",
      "",
      "[Removed Lines]",
      "3656:   case 119:",
      "",
      "[Added Lines]",
      "3665:   case 120:",
      "",
      "---------------",
      "--- Hunk 52 ---",
      "[Context before]",
      "3664:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3665:         (yyval.expression).value.integer = OPERATION(<<, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
      "3666:       }",
      "3668:     break;",
      "3672:     {",
      "3673:         CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, \">>\");",
      "3674:         CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \">>\");",
      "",
      "[Removed Lines]",
      "3670:   case 120:",
      "",
      "[Added Lines]",
      "3679:   case 121:",
      "",
      "---------------",
      "--- Hunk 53 ---",
      "[Context before]",
      "3678:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3679:         (yyval.expression).value.integer = OPERATION(>>, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
      "3680:       }",
      "3682:     break;",
      "3686:     {",
      "3687:         (yyval.expression) = (yyvsp[0].expression);",
      "3688:       }",
      "3690:     break;",
      "3694:       default: break;",
      "3695:     }",
      "",
      "[Removed Lines]",
      "3684:   case 121:",
      "",
      "[Added Lines]",
      "3693:   case 122:",
      "",
      "---------------"
    ],
    "libyara/grammar.y||libyara/grammar.y": [
      "File: libyara/grammar.y -> libyara/grammar.y",
      "--- Hunk 1 ---",
      "[Context before]",
      "1016:         $$.type = EXPRESSION_TYPE_BOOLEAN;",
      "1017:       }",
      "1018:     | _FOR_ for_expression _IDENTIFIER_ _IN_",
      "1019:       {",
      "1020:         int var_index;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1018:     | _FOR_ for_expression error",
      "1019:       {",
      "1020:         compiler->loop_depth--;",
      "1021:         compiler->loop_identifier[compiler->loop_depth] = NULL;",
      "1022:       }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "07210d935aec43062403b7e1f446c36026957299",
      "candidate_info": {
        "commit_hash": "07210d935aec43062403b7e1f446c36026957299",
        "repo": "VirusTotal/yara",
        "commit_url": "https://github.com/VirusTotal/yara/commit/07210d935aec43062403b7e1f446c36026957299",
        "files": [
          "libyara/grammar.c",
          "libyara/grammar.h",
          "libyara/grammar.y",
          "libyara/include/yara/integers.h"
        ],
        "message": "Define INT64_MAX in Visual Studio.",
        "before_after_code_files": [
          "libyara/grammar.c||libyara/grammar.c",
          "libyara/grammar.h||libyara/grammar.h",
          "libyara/grammar.y||libyara/grammar.y",
          "libyara/include/yara/integers.h||libyara/include/yara/integers.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libyara/grammar.c||libyara/grammar.c",
            "libyara/grammar.y||libyara/grammar.y"
          ],
          "candidate": [
            "libyara/grammar.c||libyara/grammar.c",
            "libyara/grammar.y||libyara/grammar.y"
          ]
        }
      },
      "candidate_diff": {
        "libyara/grammar.c||libyara/grammar.c": [
          "File: libyara/grammar.c -> libyara/grammar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "77: #include <string.h>",
          "78: #include <limits.h>",
          "79: #include <stddef.h>",
          "82: #include <yara/integers.h>",
          "83: #include <yara/utils.h>",
          "",
          "[Removed Lines]",
          "80: #include <stdint.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "613: static const yytype_uint16 yyrline[] =",
          "614: {",
          "628: };",
          "629: #endif",
          "",
          "[Removed Lines]",
          "615:        0,   226,   226,   228,   229,   230,   231,   232,   237,   250,",
          "616:      259,   249,   282,   285,   313,   316,   343,   348,   349,   354,",
          "617:      355,   361,   364,   382,   395,   432,   433,   438,   454,   467,",
          "618:      480,   493,   510,   511,   517,   516,   532,   531,   547,   561,",
          "619:      562,   567,   568,   569,   570,   575,   660,   706,   764,   809,",
          "620:      810,   814,   841,   879,   921,   943,   952,   961,   976,   988,",
          "621:     1002,  1015,  1026,  1037,  1067,  1036,  1181,  1180,  1259,  1265,",
          "622:     1272,  1271,  1325,  1324,  1376,  1385,  1394,  1403,  1412,  1421,",
          "623:     1430,  1434,  1442,  1443,  1448,  1470,  1482,  1498,  1497,  1503,",
          "624:     1514,  1515,  1520,  1527,  1538,  1539,  1543,  1551,  1555,  1565,",
          "625:     1579,  1595,  1605,  1614,  1639,  1651,  1663,  1679,  1691,  1707,",
          "626:     1752,  1771,  1805,  1840,  1874,  1899,  1917,  1927,  1937,  1947,",
          "627:     1957,  1967,  1977",
          "",
          "[Added Lines]",
          "614:        0,   225,   225,   227,   228,   229,   230,   231,   236,   249,",
          "615:      258,   248,   281,   284,   312,   315,   342,   347,   348,   353,",
          "616:      354,   360,   363,   381,   394,   431,   432,   437,   453,   466,",
          "617:      479,   492,   509,   510,   516,   515,   531,   530,   546,   560,",
          "618:      561,   566,   567,   568,   569,   574,   659,   705,   763,   808,",
          "619:      809,   813,   840,   878,   920,   942,   951,   960,   975,   987,",
          "620:     1001,  1014,  1025,  1036,  1066,  1035,  1180,  1179,  1258,  1264,",
          "621:     1271,  1270,  1324,  1323,  1375,  1384,  1393,  1402,  1411,  1420,",
          "622:     1429,  1433,  1441,  1442,  1447,  1469,  1481,  1497,  1496,  1502,",
          "623:     1513,  1514,  1519,  1526,  1537,  1538,  1542,  1550,  1554,  1564,",
          "624:     1578,  1594,  1604,  1613,  1638,  1650,  1662,  1678,  1690,  1706,",
          "625:     1751,  1770,  1804,  1839,  1873,  1898,  1916,  1926,  1936,  1946,",
          "626:     1956,  1966,  1976",
          "",
          "---------------"
        ],
        "libyara/grammar.h||libyara/grammar.h": [
          "File: libyara/grammar.h -> libyara/grammar.h"
        ],
        "libyara/grammar.y||libyara/grammar.y": [
          "File: libyara/grammar.y -> libyara/grammar.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include <string.h>",
          "36: #include <limits.h>",
          "37: #include <stddef.h>",
          "40: #include <yara/integers.h>",
          "41: #include <yara/utils.h>",
          "",
          "[Removed Lines]",
          "38: #include <stdint.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libyara/include/yara/integers.h||libyara/include/yara/integers.h": [
          "File: libyara/include/yara/integers.h -> libyara/include/yara/integers.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: }",
          "55: #endif",
          "57: #else",
          "62: #include <stdint.h>",
          "64: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: #ifndef INT8_MIN",
          "59: #define INT8_MIN         (-127i8 - 1)",
          "60: #endif",
          "62: #ifndef INT8_MIN",
          "63: #define INT16_MIN        (-32767i16 - 1)",
          "64: #endif",
          "66: #ifndef INT32_MIN",
          "67: #define INT32_MIN        (-2147483647i32 - 1)",
          "68: #endif",
          "70: #ifndef INT64_MIN",
          "71: #define INT64_MIN        (-9223372036854775807i64 - 1)",
          "72: #endif",
          "74: #ifndef INT8_MAX",
          "75: #define INT8_MAX         127i8",
          "76: #endif",
          "78: #ifndef INT16_MAX",
          "79: #define INT16_MAX        32767i16",
          "80: #endif",
          "82: #ifndef INT32_MAX",
          "83: #define INT32_MAX        2147483647i32",
          "84: #endif",
          "86: #ifndef INT64_MAX",
          "87: #define INT64_MAX        9223372036854775807i64",
          "88: #endif",
          "90: #ifndef UINT8_MAX",
          "91: #define UINT8_MAX        0xffui8",
          "92: #endif",
          "94: #ifndef UINT16_MAX",
          "95: #define UINT16_MAX       0xffffui16",
          "96: #endif",
          "98: #ifndef UINT32_MAX",
          "99: #define UINT32_MAX       0xffffffffui32",
          "100: #endif",
          "102: #ifndef UINT64_MAX",
          "103: #define UINT64_MAX       0xffffffffffffffffui64",
          "104: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "41879d00a26fc7c5526f5835ffdf253453e86a7a",
      "candidate_info": {
        "commit_hash": "41879d00a26fc7c5526f5835ffdf253453e86a7a",
        "repo": "VirusTotal/yara",
        "commit_url": "https://github.com/VirusTotal/yara/commit/41879d00a26fc7c5526f5835ffdf253453e86a7a",
        "files": [
          "libyara/grammar.c",
          "libyara/grammar.h",
          "libyara/grammar.y"
        ],
        "message": "Fix memory leak an error occurs parsing a function call.\n\nExample:\n\nimport \"math\"\n\nrule test {\n  condition:\n    # This causes a syntax error because of the trailing comma.\n    math.in_range(5,)\n}",
        "before_after_code_files": [
          "libyara/grammar.c||libyara/grammar.c",
          "libyara/grammar.h||libyara/grammar.h",
          "libyara/grammar.y||libyara/grammar.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libyara/grammar.c||libyara/grammar.c",
            "libyara/grammar.y||libyara/grammar.y"
          ],
          "candidate": [
            "libyara/grammar.c||libyara/grammar.c",
            "libyara/grammar.y||libyara/grammar.y"
          ]
        }
      },
      "candidate_diff": {
        "libyara/grammar.c||libyara/grammar.c": [
          "File: libyara/grammar.c -> libyara/grammar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "607: static const yytype_uint16 yyrline[] =",
          "608: {",
          "622: };",
          "623: #endif",
          "",
          "[Removed Lines]",
          "609:        0,   218,   218,   220,   221,   222,   223,   224,   229,   242,",
          "610:      251,   241,   274,   277,   305,   308,   335,   340,   341,   346,",
          "611:      347,   353,   356,   374,   387,   424,   425,   430,   446,   459,",
          "612:      472,   485,   502,   503,   509,   508,   524,   523,   539,   553,",
          "613:      554,   559,   560,   561,   562,   567,   652,   698,   756,   801,",
          "614:      802,   806,   833,   871,   913,   935,   944,   953,   968,   980,",
          "615:      994,  1007,  1018,  1029,  1059,  1028,  1173,  1172,  1251,  1257,",
          "616:     1264,  1263,  1317,  1316,  1368,  1377,  1386,  1395,  1404,  1413,",
          "617:     1422,  1426,  1434,  1435,  1440,  1462,  1474,  1490,  1489,  1495,",
          "618:     1506,  1507,  1512,  1519,  1530,  1531,  1535,  1543,  1547,  1557,",
          "619:     1571,  1587,  1597,  1606,  1631,  1643,  1655,  1671,  1683,  1699,",
          "620:     1744,  1763,  1781,  1799,  1817,  1843,  1861,  1871,  1881,  1891,",
          "621:     1901,  1911,  1921",
          "",
          "[Added Lines]",
          "609:        0,   220,   220,   222,   223,   224,   225,   226,   231,   244,",
          "610:      253,   243,   276,   279,   307,   310,   337,   342,   343,   348,",
          "611:      349,   355,   358,   376,   389,   426,   427,   432,   448,   461,",
          "612:      474,   487,   504,   505,   511,   510,   526,   525,   541,   555,",
          "613:      556,   561,   562,   563,   564,   569,   654,   700,   758,   803,",
          "614:      804,   808,   835,   873,   915,   937,   946,   955,   970,   982,",
          "615:      996,  1009,  1020,  1031,  1061,  1030,  1175,  1174,  1253,  1259,",
          "616:     1266,  1265,  1319,  1318,  1370,  1379,  1388,  1397,  1406,  1415,",
          "617:     1424,  1428,  1436,  1437,  1442,  1464,  1476,  1492,  1491,  1497,",
          "618:     1508,  1509,  1514,  1521,  1532,  1533,  1537,  1545,  1549,  1559,",
          "619:     1573,  1589,  1599,  1608,  1633,  1645,  1657,  1673,  1685,  1701,",
          "620:     1746,  1765,  1783,  1801,  1819,  1845,  1863,  1873,  1883,  1893,",
          "621:     1903,  1913,  1923",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1333:   switch (yytype)",
          "1334:     {",
          "1337:       { yr_free(((*yyvaluep).c_string)); }",
          "1339:         break;",
          "1343:       { yr_free(((*yyvaluep).c_string)); }",
          "1345:         break;",
          "1349:       { yr_free(((*yyvaluep).c_string)); }",
          "1351:         break;",
          "1355:       { yr_free(((*yyvaluep).c_string)); }",
          "1357:         break;",
          "1361:       { yr_free(((*yyvaluep).c_string)); }",
          "1363:         break;",
          "1367:       { yr_free(((*yyvaluep).c_string)); }",
          "1369:         break;",
          "1373:       { yr_free(((*yyvaluep).sized_string)); }",
          "1375:         break;",
          "1379:       { yr_free(((*yyvaluep).sized_string)); }",
          "1381:         break;",
          "1385:       { yr_free(((*yyvaluep).sized_string)); }",
          "1387:         break;",
          "1390:       default:",
          "1391:         break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1391:       { yr_free(((*yyvaluep).c_string)); }",
          "1393:         break;",
          "1397:       { yr_free(((*yyvaluep).c_string)); }",
          "1399:         break;",
          "",
          "---------------"
        ],
        "libyara/grammar.h||libyara/grammar.h": [
          "File: libyara/grammar.h -> libyara/grammar.h"
        ],
        "libyara/grammar.y||libyara/grammar.y": [
          "File: libyara/grammar.y -> libyara/grammar.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "201: %destructor { yr_free($$); } _HEX_STRING_",
          "202: %destructor { yr_free($$); } _REGEXP_",
          "204: %union {",
          "205:   EXPRESSION      expression;",
          "206:   SIZED_STRING*   sized_string;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203: %destructor { yr_free($$); } arguments",
          "204: %destructor { yr_free($$); } arguments_list",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3921f16018c7354e8f01c26e0f552ea181edb71f",
      "candidate_info": {
        "commit_hash": "3921f16018c7354e8f01c26e0f552ea181edb71f",
        "repo": "VirusTotal/yara",
        "commit_url": "https://github.com/VirusTotal/yara/commit/3921f16018c7354e8f01c26e0f552ea181edb71f",
        "files": [
          "libyara/grammar.c",
          "libyara/grammar.y"
        ],
        "message": "Use %PRId64 instead of %lld for printing int64_t",
        "before_after_code_files": [
          "libyara/grammar.c||libyara/grammar.c",
          "libyara/grammar.y||libyara/grammar.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libyara/grammar.c||libyara/grammar.c",
            "libyara/grammar.y||libyara/grammar.y"
          ],
          "candidate": [
            "libyara/grammar.c||libyara/grammar.c",
            "libyara/grammar.y||libyara/grammar.y"
          ]
        }
      },
      "candidate_diff": {
        "libyara/grammar.c||libyara/grammar.c": [
          "File: libyara/grammar.c -> libyara/grammar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "624:     1431,  1435,  1443,  1444,  1449,  1471,  1483,  1499,  1498,  1504,",
          "625:     1515,  1516,  1521,  1528,  1539,  1540,  1544,  1552,  1556,  1566,",
          "626:     1580,  1596,  1606,  1615,  1640,  1652,  1664,  1680,  1692,  1708,",
          "629: };",
          "630: #endif",
          "",
          "[Removed Lines]",
          "627:     1753,  1772,  1804,  1833,  1861,  1886,  1904,  1914,  1924,  1934,",
          "628:     1944,  1954,  1964",
          "",
          "[Added Lines]",
          "627:     1753,  1772,  1804,  1837,  1869,  1894,  1912,  1922,  1932,  1942,",
          "628:     1952,  1962,  1972",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3546:               (yyvsp[-2].expression).value.integer < INT64_MIN + (yyvsp[0].expression).value.integer)",
          "3547:           {",
          "3548:             yr_compiler_set_error_extra_info_fmt(",
          "3550:             compiler->last_result = ERROR_INTEGER_OVERFLOW;",
          "3551:           }",
          "",
          "[Removed Lines]",
          "3549:                 compiler, \"%lld - %lld\", (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
          "",
          "[Added Lines]",
          "3549:                 compiler,",
          "3550:                 \"%\" PRId64 \" - %\" PRId64,",
          "3551:                 (yyvsp[-2].expression).value.integer,",
          "3552:                 (yyvsp[0].expression).value.integer);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3578:               (yyvsp[-2].expression).value.integer > INT64_MAX / (yyvsp[0].expression).value.integer)",
          "3579:           {",
          "3580:             yr_compiler_set_error_extra_info_fmt(",
          "3582:             compiler->last_result = ERROR_INTEGER_OVERFLOW;",
          "3583:           }",
          "",
          "[Removed Lines]",
          "3581:                 compiler, \"%lld * %lld\", (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
          "",
          "[Added Lines]",
          "3585:                 compiler,",
          "3586:                 \"%\" PRId64 \" * %\" PRId64,",
          "3587:                 (yyvsp[-2].expression).value.integer,",
          "3588:                 (yyvsp[0].expression).value.integer);",
          "",
          "---------------"
        ],
        "libyara/grammar.y||libyara/grammar.y": [
          "File: libyara/grammar.y -> libyara/grammar.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1816:               $1.value.integer < INT64_MIN + $3.value.integer)",
          "1817:           {",
          "1818:             yr_compiler_set_error_extra_info_fmt(",
          "1820:             compiler->last_result = ERROR_INTEGER_OVERFLOW;",
          "1821:           }",
          "",
          "[Removed Lines]",
          "1819:                 compiler, \"%lld - %lld\", $1.value.integer, $3.value.integer);",
          "",
          "[Added Lines]",
          "1819:                 compiler,",
          "1820:                 \"%\" PRId64 \" - %\" PRId64,",
          "1821:                 $1.value.integer,",
          "1822:                 $3.value.integer);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1844:               $1.value.integer > INT64_MAX / $3.value.integer)",
          "1845:           {",
          "1846:             yr_compiler_set_error_extra_info_fmt(",
          "1848:             compiler->last_result = ERROR_INTEGER_OVERFLOW;",
          "1849:           }",
          "",
          "[Removed Lines]",
          "1847:                 compiler, \"%lld * %lld\", $1.value.integer, $3.value.integer);",
          "",
          "[Added Lines]",
          "1851:                 compiler,",
          "1852:                 \"%\" PRId64 \" * %\" PRId64,",
          "1853:                 $1.value.integer,",
          "1854:                 $3.value.integer);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ab906da53ff2a68c6fd6d1fa73f2b7c7bf0bc636",
      "candidate_info": {
        "commit_hash": "ab906da53ff2a68c6fd6d1fa73f2b7c7bf0bc636",
        "repo": "VirusTotal/yara",
        "commit_url": "https://github.com/VirusTotal/yara/commit/ab906da53ff2a68c6fd6d1fa73f2b7c7bf0bc636",
        "files": [
          "libyara/grammar.c",
          "libyara/grammar.y"
        ],
        "message": "Fix issue #597",
        "before_after_code_files": [
          "libyara/grammar.c||libyara/grammar.c",
          "libyara/grammar.y||libyara/grammar.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libyara/grammar.c||libyara/grammar.c",
            "libyara/grammar.y||libyara/grammar.y"
          ],
          "candidate": [
            "libyara/grammar.c||libyara/grammar.c",
            "libyara/grammar.y||libyara/grammar.y"
          ]
        }
      },
      "candidate_diff": {
        "libyara/grammar.c||libyara/grammar.c": [
          "File: libyara/grammar.c -> libyara/grammar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "611:      347,   353,   356,   374,   387,   424,   425,   430,   446,   459,",
          "612:      472,   485,   502,   503,   509,   508,   524,   523,   539,   553,",
          "613:      554,   559,   560,   561,   562,   567,   652,   698,   756,   801,",
          "622: };",
          "623: #endif",
          "",
          "[Removed Lines]",
          "614:      802,   806,   831,   867,   913,   935,   944,   953,   968,   980,",
          "615:      994,  1007,  1018,  1027,  1057,  1026,  1171,  1170,  1249,  1255,",
          "616:     1262,  1261,  1324,  1323,  1384,  1393,  1402,  1411,  1420,  1429,",
          "617:     1438,  1442,  1450,  1451,  1456,  1478,  1490,  1506,  1505,  1511,",
          "618:     1522,  1523,  1528,  1535,  1546,  1547,  1551,  1559,  1563,  1573,",
          "619:     1587,  1603,  1613,  1622,  1647,  1659,  1671,  1687,  1699,  1715,",
          "620:     1760,  1779,  1797,  1815,  1833,  1859,  1877,  1887,  1897,  1907,",
          "621:     1917,  1927,  1937",
          "",
          "[Added Lines]",
          "614:      802,   806,   833,   871,   917,   939,   948,   957,   972,   984,",
          "615:      998,  1011,  1022,  1033,  1063,  1032,  1177,  1176,  1255,  1261,",
          "616:     1268,  1267,  1330,  1329,  1390,  1399,  1408,  1417,  1426,  1435,",
          "617:     1444,  1448,  1456,  1457,  1462,  1484,  1496,  1512,  1511,  1517,",
          "618:     1528,  1529,  1534,  1541,  1552,  1553,  1557,  1565,  1569,  1579,",
          "619:     1593,  1609,  1619,  1628,  1653,  1665,  1677,  1693,  1705,  1721,",
          "620:     1766,  1785,  1803,  1821,  1839,  1865,  1883,  1893,  1903,  1913,",
          "621:     1923,  1933,  1943",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2361:           case EXPRESSION_TYPE_REGEXP:",
          "2362:             strlcpy((yyval.c_string), \"r\", MAX_FUNCTION_ARGS);",
          "2363:             break;",
          "2364:         }",
          "2366:         ERROR_IF((yyval.c_string) == NULL);",
          "2367:       }",
          "2369:     break;",
          "2371:   case 52:",
          "2373:     {",
          "2374:         if (strlen((yyvsp[-2].c_string)) == MAX_FUNCTION_ARGS)",
          "2375:         {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2364:           default:",
          "2365:             assert(FALSE);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2394:             case EXPRESSION_TYPE_REGEXP:",
          "2395:               strlcat((yyvsp[-2].c_string), \"r\", MAX_FUNCTION_ARGS);",
          "2396:               break;",
          "2397:           }",
          "2398:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2399:             default:",
          "2400:               assert(FALSE);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2582:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "2583:       }",
          "2585:     break;",
          "2587:   case 62:",
          "2589:     {",
          "2590:         if (compiler->loop_depth > 0)",
          "2591:         {",
          "2592:           compiler->loop_depth--;",
          "2593:           compiler->loop_identifier[compiler->loop_depth] = NULL;",
          "2594:         }",
          "2595:       }",
          "2597:     break;",
          "2599:   case 63:",
          "2601:     {",
          "2602:         int var_index;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2600:         YYERROR;",
          "",
          "---------------"
        ],
        "libyara/grammar.y||libyara/grammar.y": [
          "File: libyara/grammar.y -> libyara/grammar.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "824:           case EXPRESSION_TYPE_REGEXP:",
          "825:             strlcpy($$, \"r\", MAX_FUNCTION_ARGS);",
          "826:             break;",
          "827:         }",
          "829:         ERROR_IF($$ == NULL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "827:           default:",
          "828:             assert(FALSE);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "853:             case EXPRESSION_TYPE_REGEXP:",
          "854:               strlcat($1, \"r\", MAX_FUNCTION_ARGS);",
          "855:               break;",
          "856:           }",
          "857:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "858:             default:",
          "859:               assert(FALSE);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1022:           compiler->loop_depth--;",
          "1023:           compiler->loop_identifier[compiler->loop_depth] = NULL;",
          "1024:         }",
          "1025:       }",
          "1026:     | _FOR_ for_expression _IDENTIFIER_ _IN_",
          "1027:       {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1030:         YYERROR;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "22d7a948e0eb86fb2c781b2fc712621080927a22",
      "candidate_info": {
        "commit_hash": "22d7a948e0eb86fb2c781b2fc712621080927a22",
        "repo": "VirusTotal/yara",
        "commit_url": "https://github.com/VirusTotal/yara/commit/22d7a948e0eb86fb2c781b2fc712621080927a22",
        "files": [
          "libyara/compiler.c",
          "libyara/grammar.c",
          "libyara/grammar.h",
          "libyara/grammar.y",
          "libyara/include/yara/error.h",
          "tests/test-rules.c"
        ],
        "message": "Check for some integer overflow situations.",
        "before_after_code_files": [
          "libyara/compiler.c||libyara/compiler.c",
          "libyara/grammar.c||libyara/grammar.c",
          "libyara/grammar.h||libyara/grammar.h",
          "libyara/grammar.y||libyara/grammar.y",
          "libyara/include/yara/error.h||libyara/include/yara/error.h",
          "tests/test-rules.c||tests/test-rules.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libyara/grammar.c||libyara/grammar.c",
            "libyara/grammar.y||libyara/grammar.y"
          ],
          "candidate": [
            "libyara/grammar.c||libyara/grammar.c",
            "libyara/grammar.y||libyara/grammar.y"
          ]
        }
      },
      "candidate_diff": {
        "libyara/compiler.c||libyara/compiler.c": [
          "File: libyara/compiler.c -> libyara/compiler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1181:           compiler->last_error_extra_info,",
          "1182:           max_strings_per_rule);",
          "1183:       break;",
          "1184:   }",
          "1186:   return buffer;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1184:     case ERROR_INTEGER_OVERFLOW:",
          "1185:       snprintf(",
          "1186:           buffer,",
          "1187:           buffer_size,",
          "1188:           \"integer overflow in expression \\\"%s\\\"\",",
          "1189:           compiler->last_error_extra_info);",
          "",
          "---------------"
        ],
        "libyara/grammar.c||libyara/grammar.c": [
          "File: libyara/grammar.c -> libyara/grammar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "623:     1430,  1434,  1442,  1443,  1448,  1470,  1482,  1498,  1497,  1503,",
          "624:     1514,  1515,  1520,  1527,  1538,  1539,  1543,  1551,  1555,  1565,",
          "625:     1579,  1595,  1605,  1614,  1639,  1651,  1663,  1679,  1691,  1707,",
          "628: };",
          "629: #endif",
          "",
          "[Removed Lines]",
          "626:     1752,  1771,  1789,  1807,  1825,  1851,  1869,  1879,  1889,  1899,",
          "627:     1909,  1919,  1929",
          "",
          "[Added Lines]",
          "626:     1752,  1771,  1799,  1828,  1856,  1881,  1899,  1909,  1919,  1929,",
          "627:     1939,  1949,  1959",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3491:         fail_if(compiler->last_result != ERROR_SUCCESS);",
          "3492:       }",
          "3494:     break;",
          "3496:   case 111:",
          "3498:     {",
          "3499:         compiler->last_result = yr_parser_reduce_operation(",
          "3500:             yyscanner, \"+\", (yyvsp[-2].expression), (yyvsp[0].expression));",
          "3504:         if ((yyvsp[-2].expression).type == EXPRESSION_TYPE_INTEGER &&",
          "3505:             (yyvsp[0].expression).type == EXPRESSION_TYPE_INTEGER)",
          "3506:         {",
          "3507:           (yyval.expression).value.integer = OPERATION(+, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
          "3508:           (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "3509:         }",
          "",
          "[Removed Lines]",
          "3502:         fail_if(compiler->last_result != ERROR_SUCCESS);",
          "",
          "[Added Lines]",
          "3505:           if (!IS_UNDEFINED((yyvsp[-2].expression).value.integer) &&",
          "3506:               !IS_UNDEFINED((yyvsp[0].expression).value.integer) &&",
          "3507:               (yyvsp[0].expression).value.integer > 0 &&",
          "3508:               (yyvsp[-2].expression).value.integer > INT64_MAX - (yyvsp[0].expression).value.integer)",
          "3509:           {",
          "3510:             yr_compiler_set_error_extra_info_fmt(",
          "3511:                 compiler, \"%lld + %lld\", (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
          "3512:             compiler->last_result = ERROR_INTEGER_OVERFLOW;",
          "3513:           }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3511:         {",
          "3512:           (yyval.expression).type = EXPRESSION_TYPE_FLOAT;",
          "3513:         }",
          "3514:       }",
          "3516:     break;",
          "3518:   case 112:",
          "3520:     {",
          "3521:         compiler->last_result = yr_parser_reduce_operation(",
          "3522:             yyscanner, \"-\", (yyvsp[-2].expression), (yyvsp[0].expression));",
          "3526:         if ((yyvsp[-2].expression).type == EXPRESSION_TYPE_INTEGER &&",
          "3527:             (yyvsp[0].expression).type == EXPRESSION_TYPE_INTEGER)",
          "3528:         {",
          "3529:           (yyval.expression).value.integer = OPERATION(-, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
          "3530:           (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "3531:         }",
          "",
          "[Removed Lines]",
          "3524:         fail_if(compiler->last_result != ERROR_SUCCESS);",
          "",
          "[Added Lines]",
          "3523:         fail_if(compiler->last_result != ERROR_SUCCESS);",
          "3537:           if (!IS_UNDEFINED((yyvsp[-2].expression).value.integer) &&",
          "3538:               !IS_UNDEFINED((yyvsp[0].expression).value.integer) &&",
          "3539:               (yyvsp[-2].expression).value.integer < 0 &&",
          "3540:               (yyvsp[0].expression).value.integer > 0 &&",
          "3541:               (yyvsp[-2].expression).value.integer < INT64_MIN + (yyvsp[0].expression).value.integer)",
          "3542:           {",
          "3543:             yr_compiler_set_error_extra_info_fmt(",
          "3544:                 compiler, \"%lld - %lld\", (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
          "3545:             compiler->last_result = ERROR_INTEGER_OVERFLOW;",
          "3546:           }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3533:         {",
          "3534:           (yyval.expression).type = EXPRESSION_TYPE_FLOAT;",
          "3535:         }",
          "3536:       }",
          "3538:     break;",
          "3540:   case 113:",
          "3542:     {",
          "3543:         compiler->last_result = yr_parser_reduce_operation(",
          "3544:             yyscanner, \"*\", (yyvsp[-2].expression), (yyvsp[0].expression));",
          "3548:         if ((yyvsp[-2].expression).type == EXPRESSION_TYPE_INTEGER &&",
          "3549:             (yyvsp[0].expression).type == EXPRESSION_TYPE_INTEGER)",
          "3550:         {",
          "3551:           (yyval.expression).value.integer = OPERATION(*, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
          "3552:           (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "3553:         }",
          "",
          "[Removed Lines]",
          "3546:         fail_if(compiler->last_result != ERROR_SUCCESS);",
          "",
          "[Added Lines]",
          "3556:         fail_if(compiler->last_result != ERROR_SUCCESS);",
          "3570:           if (!IS_UNDEFINED((yyvsp[-2].expression).value.integer) &&",
          "3571:               !IS_UNDEFINED((yyvsp[0].expression).value.integer) &&",
          "3572:               (yyvsp[0].expression).value.integer != 0 &&",
          "3573:               (yyvsp[-2].expression).value.integer > INT64_MAX / (yyvsp[0].expression).value.integer)",
          "3574:           {",
          "3575:             yr_compiler_set_error_extra_info_fmt(",
          "3576:                 compiler, \"%lld * %lld\", (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
          "3577:             compiler->last_result = ERROR_INTEGER_OVERFLOW;",
          "3578:           }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3555:         {",
          "3556:           (yyval.expression).type = EXPRESSION_TYPE_FLOAT;",
          "3557:         }",
          "3558:       }",
          "3560:     break;",
          "3562:   case 114:",
          "3564:     {",
          "3565:         compiler->last_result = yr_parser_reduce_operation(",
          "3566:             yyscanner, \"\\\\\", (yyvsp[-2].expression), (yyvsp[0].expression));",
          "3570:         if ((yyvsp[-2].expression).type == EXPRESSION_TYPE_INTEGER &&",
          "3571:             (yyvsp[0].expression).type == EXPRESSION_TYPE_INTEGER)",
          "3572:         {",
          "",
          "[Removed Lines]",
          "3568:         fail_if(compiler->last_result != ERROR_SUCCESS);",
          "",
          "[Added Lines]",
          "3588:         fail_if(compiler->last_result != ERROR_SUCCESS);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3578:           else",
          "3579:           {",
          "3580:             compiler->last_result = ERROR_DIVISION_BY_ZERO;",
          "3582:           }",
          "3583:         }",
          "3584:         else",
          "3585:         {",
          "3586:           (yyval.expression).type = EXPRESSION_TYPE_FLOAT;",
          "3587:         }",
          "3588:       }",
          "3590:     break;",
          "3592:   case 115:",
          "3594:     {",
          "3595:         check_type((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, \"%\");",
          "3596:         check_type((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"%\");",
          "",
          "[Removed Lines]",
          "3581:             fail_if(compiler->last_result != ERROR_SUCCESS);",
          "",
          "[Added Lines]",
          "3617:         fail_if(compiler->last_result != ERROR_SUCCESS);",
          "",
          "---------------"
        ],
        "libyara/grammar.h||libyara/grammar.h": [
          "File: libyara/grammar.h -> libyara/grammar.h"
        ],
        "libyara/grammar.y||libyara/grammar.y": [
          "File: libyara/grammar.y -> libyara/grammar.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1773:         compiler->last_result = yr_parser_reduce_operation(",
          "1774:             yyscanner, \"+\", $1, $3);",
          "1778:         if ($1.type == EXPRESSION_TYPE_INTEGER &&",
          "1779:             $3.type == EXPRESSION_TYPE_INTEGER)",
          "1780:         {",
          "1781:           $$.value.integer = OPERATION(+, $1.value.integer, $3.value.integer);",
          "1782:           $$.type = EXPRESSION_TYPE_INTEGER;",
          "1783:         }",
          "",
          "[Removed Lines]",
          "1776:         fail_if(compiler->last_result != ERROR_SUCCESS);",
          "",
          "[Added Lines]",
          "1779:           if (!IS_UNDEFINED($1.value.integer) &&",
          "1780:               !IS_UNDEFINED($3.value.integer) &&",
          "1781:               $3.value.integer > 0 &&",
          "1782:               $1.value.integer > INT64_MAX - $3.value.integer)",
          "1783:           {",
          "1784:             yr_compiler_set_error_extra_info_fmt(",
          "1785:                 compiler, \"%lld + %lld\", $1.value.integer, $3.value.integer);",
          "1786:             compiler->last_result = ERROR_INTEGER_OVERFLOW;",
          "1787:           }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1785:         {",
          "1786:           $$.type = EXPRESSION_TYPE_FLOAT;",
          "1787:         }",
          "1788:       }",
          "1789:     | primary_expression '-' primary_expression",
          "1790:       {",
          "1791:         compiler->last_result = yr_parser_reduce_operation(",
          "1792:             yyscanner, \"-\", $1, $3);",
          "1796:         if ($1.type == EXPRESSION_TYPE_INTEGER &&",
          "1797:             $3.type == EXPRESSION_TYPE_INTEGER)",
          "1798:         {",
          "1799:           $$.value.integer = OPERATION(-, $1.value.integer, $3.value.integer);",
          "1800:           $$.type = EXPRESSION_TYPE_INTEGER;",
          "1801:         }",
          "",
          "[Removed Lines]",
          "1794:         fail_if(compiler->last_result != ERROR_SUCCESS);",
          "",
          "[Added Lines]",
          "1797:         fail_if(compiler->last_result != ERROR_SUCCESS);",
          "1807:           if (!IS_UNDEFINED($1.value.integer) &&",
          "1808:               !IS_UNDEFINED($3.value.integer) &&",
          "1809:               $1.value.integer < 0 &&",
          "1810:               $3.value.integer > 0 &&",
          "1811:               $1.value.integer < INT64_MIN + $3.value.integer)",
          "1812:           {",
          "1813:             yr_compiler_set_error_extra_info_fmt(",
          "1814:                 compiler, \"%lld - %lld\", $1.value.integer, $3.value.integer);",
          "1815:             compiler->last_result = ERROR_INTEGER_OVERFLOW;",
          "1816:           }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1803:         {",
          "1804:           $$.type = EXPRESSION_TYPE_FLOAT;",
          "1805:         }",
          "1806:       }",
          "1807:     | primary_expression '*' primary_expression",
          "1808:       {",
          "1809:         compiler->last_result = yr_parser_reduce_operation(",
          "1810:             yyscanner, \"*\", $1, $3);",
          "1814:         if ($1.type == EXPRESSION_TYPE_INTEGER &&",
          "1815:             $3.type == EXPRESSION_TYPE_INTEGER)",
          "1816:         {",
          "1817:           $$.value.integer = OPERATION(*, $1.value.integer, $3.value.integer);",
          "1818:           $$.type = EXPRESSION_TYPE_INTEGER;",
          "1819:         }",
          "",
          "[Removed Lines]",
          "1812:         fail_if(compiler->last_result != ERROR_SUCCESS);",
          "",
          "[Added Lines]",
          "1826:         fail_if(compiler->last_result != ERROR_SUCCESS);",
          "1836:           if (!IS_UNDEFINED($1.value.integer) &&",
          "1837:               !IS_UNDEFINED($3.value.integer) &&",
          "1838:               $3.value.integer != 0 &&",
          "1839:               $1.value.integer > INT64_MAX / $3.value.integer)",
          "1840:           {",
          "1841:             yr_compiler_set_error_extra_info_fmt(",
          "1842:                 compiler, \"%lld * %lld\", $1.value.integer, $3.value.integer);",
          "1843:             compiler->last_result = ERROR_INTEGER_OVERFLOW;",
          "1844:           }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1821:         {",
          "1822:           $$.type = EXPRESSION_TYPE_FLOAT;",
          "1823:         }",
          "1824:       }",
          "1825:     | primary_expression '\\\\' primary_expression",
          "1826:       {",
          "1827:         compiler->last_result = yr_parser_reduce_operation(",
          "1828:             yyscanner, \"\\\\\", $1, $3);",
          "1832:         if ($1.type == EXPRESSION_TYPE_INTEGER &&",
          "1833:             $3.type == EXPRESSION_TYPE_INTEGER)",
          "1834:         {",
          "",
          "[Removed Lines]",
          "1830:         fail_if(compiler->last_result != ERROR_SUCCESS);",
          "",
          "[Added Lines]",
          "1854:         fail_if(compiler->last_result != ERROR_SUCCESS);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1840:           else",
          "1841:           {",
          "1842:             compiler->last_result = ERROR_DIVISION_BY_ZERO;",
          "1844:           }",
          "1845:         }",
          "1846:         else",
          "1847:         {",
          "1848:           $$.type = EXPRESSION_TYPE_FLOAT;",
          "1849:         }",
          "1850:       }",
          "1851:     | primary_expression '%' primary_expression",
          "1852:       {",
          "",
          "[Removed Lines]",
          "1843:             fail_if(compiler->last_result != ERROR_SUCCESS);",
          "",
          "[Added Lines]",
          "1879:         fail_if(compiler->last_result != ERROR_SUCCESS);",
          "",
          "---------------"
        ],
        "libyara/include/yara/error.h||libyara/include/yara/error.h": [
          "File: libyara/include/yara/error.h -> libyara/include/yara/error.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "94: #define ERROR_REGULAR_EXPRESSION_TOO_COMPLEX    49",
          "95: #define ERROR_INVALID_MODULE_NAME               50",
          "96: #define ERROR_TOO_MANY_STRINGS                  51",
          "99: #define FAIL_ON_ERROR(x) { \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97: #define ERROR_INTEGER_OVERFLOW                  52",
          "",
          "---------------"
        ],
        "tests/test-rules.c||tests/test-rules.c": [
          "File: tests/test-rules.c -> tests/test-rules.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "214:   assert_error(  // integer too long",
          "215:     \"rule test { condition: 0o1000000000000000000000 > 0 }\",",
          "216:     ERROR_SYNTAX_ERROR);",
          "217: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "218:   assert_error(  // integer overflow",
          "219:     \"rule test { condition: 0x7FFFFFFFFFFFFFFF + 1 > 0 }\",",
          "220:     ERROR_INTEGER_OVERFLOW);",
          "222:   assert_error(  // integer overflow",
          "223:     \"rule test { condition: 9223372036854775807 + 1 > 0 }\",",
          "224:     ERROR_INTEGER_OVERFLOW);",
          "226:   assert_error(  // integer overflow",
          "227:     \"rule test { condition: -9223372036854775807 - 2 > 0 }\",",
          "228:     ERROR_INTEGER_OVERFLOW);",
          "230:   assert_error(  // integer overflow",
          "231:     \"rule test { condition: 0x4000000000000000 * 2 }\",",
          "232:     ERROR_INTEGER_OVERFLOW);",
          "",
          "---------------"
        ]
      }
    }
  ]
}