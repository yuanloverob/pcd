{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ac9fa2b8463f46b6ecbc8294aa85224a1585024a",
      "candidate_info": {
        "commit_hash": "ac9fa2b8463f46b6ecbc8294aa85224a1585024a",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/ac9fa2b8463f46b6ecbc8294aa85224a1585024a",
        "files": [
          "lib/_debugger.js"
        ],
        "message": "Removed `rl.on('close', ...)` callback",
        "before_after_code_files": [
          "lib/_debugger.js||li_debugger.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/_debugger.js||li_debugger.js": [
          "File: lib/_debugger.js -> li_debugger.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "754:   this.repl = new repl.REPLServer('debug> ', streams,",
          "755:                                   this.controlEval.bind(this), false, true);",
          "763:   process.on('exit', function() {",
          "764:     self.killChild();",
          "765:   });",
          "",
          "[Removed Lines]",
          "758:   this.repl.rli.addListener('close', function() {",
          "759:     self.killed = true;",
          "760:     self.killChild();",
          "761:   });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7b367a93ce126d4bf5a56e10ee44613c59ffbe84",
      "candidate_info": {
        "commit_hash": "7b367a93ce126d4bf5a56e10ee44613c59ffbe84",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/7b367a93ce126d4bf5a56e10ee44613c59ffbe84",
        "files": [
          "lib/net.js",
          "test/simple/test-net-isip.js"
        ],
        "message": "net: add support for IPv6 addresses ending in ::\n\nModified net.isIP Ipv6 regex to allow for addresses ending in \"::\".\nAdded tests for new IPv6 matching reqex.",
        "before_after_code_files": [
          "lib/net.js||linet.js",
          "test/simple/test-net-isip.js||test/simple/test-net-isip.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/net.js||linet.js": [
          "File: lib/net.js -> linet.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1138:       }",
          "1139:     }",
          "1140:     return 4;",
          "1142:       input)) {",
          "1143:     return 6;",
          "1144:   } else {",
          "",
          "[Removed Lines]",
          "1141:   } else if (/^::|^::1|^([a-fA-F0-9]{1,4}::?){1,7}([a-fA-F0-9]{1,4})$/.test(",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-net-isip.js||test/simple/test-net-isip.js": [
          "File: test/simple/test-net-isip.js -> test/simple/test-net-isip.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: assert.equal(net.isIP('1050:0:0:0:5:600:300c:326b'), 6);",
          "32: assert.equal(net.isIP('2001:252:0:1::2008:6'), 6);",
          "33: assert.equal(net.isIP('2001:dead:beef:1::2008:6'), 6);",
          "34: assert.equal(net.isIP('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff'), 6);",
          "35: assert.equal(net.isIP('::1'), 6);",
          "36: assert.equal(net.isIP('::'), 6);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: assert.equal(net.isIP('2001::'), 6);",
          "35: assert.equal(net.isIP('2001:dead::'), 6);",
          "36: assert.equal(net.isIP('2001:dead:beef::'), 6);",
          "37: assert.equal(net.isIP('2001:dead:beef:1::'), 6);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aab7cb7dfed198db2b39de5ef3a82ea655754084",
      "candidate_info": {
        "commit_hash": "aab7cb7dfed198db2b39de5ef3a82ea655754084",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/aab7cb7dfed198db2b39de5ef3a82ea655754084",
        "files": [
          "test/simple/test-repl.js"
        ],
        "message": "test: fix failing test-repl.js",
        "before_after_code_files": [
          "test/simple/test-repl.js||test/simple/test-repl.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-repl.js||test/simple/test-repl.js": [
          "File: test/simple/test-repl.js -> test/simple/test-repl.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     cur.client.expect = cur.expect;",
          "53:     cur.client.list = list;",
          "54:     if (cur.send.length > 0) {",
          "56:     }",
          "57:   }",
          "58: }",
          "",
          "[Removed Lines]",
          "55:       cur.client.write(cur.send);",
          "",
          "[Added Lines]",
          "55:       cur.client.write(cur.send + '\\n');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "167:       send_expect([",
          "168:         { client: client_tcp, send: '',",
          "169:           expect: prompt_tcp },",
          "171:           expect: ('\\'' + 'invoked 333' + '\\'\\n' + prompt_tcp) },",
          "173:           expect: ('12346' + '\\n' + prompt_tcp) },",
          "174:         { client: client_tcp,",
          "176:           expect: ('42' + '\\n' + prompt_tcp) }",
          "177:       ]);",
          "178:     });",
          "",
          "[Removed Lines]",
          "170:         { client: client_tcp, send: 'invoke_me(333)\\n',",
          "172:         { client: client_tcp, send: 'a += 1\\n',",
          "175:           send: 'require(' + JSON.stringify(moduleFilename) + ').number\\n',",
          "",
          "[Added Lines]",
          "170:         { client: client_tcp, send: 'invoke_me(333)',",
          "172:         { client: client_tcp, send: 'a += 1',",
          "175:           send: 'require(' + JSON.stringify(moduleFilename) + ').number',",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "230:       send_expect([",
          "231:         { client: client_unix, send: '',",
          "232:           expect: prompt_unix },",
          "234:           expect: ('\\'' + message + '\\'\\n' + prompt_unix) },",
          "236:           expect: ('\\'' + 'invoked 987' + '\\'\\n' + prompt_unix) },",
          "238:           expect: ('12345' + '\\n' + prompt_unix) },",
          "240:           expect: ('{ a: 1 }' + '\\n' + prompt_unix) }",
          "241:       ]);",
          "242:     });",
          "",
          "[Removed Lines]",
          "233:         { client: client_unix, send: 'message\\n',",
          "235:         { client: client_unix, send: 'invoke_me(987)\\n',",
          "237:         { client: client_unix, send: 'a = 12345\\n',",
          "239:         { client: client_unix, send: '{a:1}\\n',",
          "",
          "[Added Lines]",
          "233:         { client: client_unix, send: 'message',",
          "235:         { client: client_unix, send: 'invoke_me(987)',",
          "237:         { client: client_unix, send: 'a = 12345',",
          "239:         { client: client_unix, send: '{a:1}',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2637b5c2610ca1f9d7889ea0d572f297b2bd5b2e",
      "candidate_info": {
        "commit_hash": "2637b5c2610ca1f9d7889ea0d572f297b2bd5b2e",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/2637b5c2610ca1f9d7889ea0d572f297b2bd5b2e",
        "files": [
          "lib/dgram.js",
          "lib/net.js"
        ],
        "message": "ref/unref for net.Socket net.Server dgram.Socket",
        "before_after_code_files": [
          "lib/dgram.js||lidgram.js",
          "lib/net.js||linet.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/dgram.js||lidgram.js": [
          "File: lib/dgram.js -> lidgram.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "351: }",
          "355: function errnoException(errorno, syscall) {",
          "356:   var e = new Error(syscall + ' ' + errorno);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/net.js||linet.js": [
          "File: lib/net.js -> linet.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "716: };",
          "719: function afterConnect(status, handle, req, readable, writable) {",
          "720:   var self = handle.owner;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1095:   this._slaves.push(socketList);",
          "1096: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "54a4f99c4e0f3b6b3a0a5182c29051761a50bb2b",
      "candidate_info": {
        "commit_hash": "54a4f99c4e0f3b6b3a0a5182c29051761a50bb2b",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/54a4f99c4e0f3b6b3a0a5182c29051761a50bb2b",
        "files": [
          "lib/fs.js",
          "lib/readline.js"
        ],
        "message": "lint",
        "before_after_code_files": [
          "lib/fs.js||lifs.js",
          "lib/readline.js||lireadline.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/fs.js||lifs.js": [
          "File: lib/fs.js -> lifs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: var O_TRUNC = constants.O_TRUNC || 0;",
          "51: var O_WRONLY = constants.O_WRONLY || 0;",
          "55: fs.Stats = binding.Stats;",
          "",
          "[Removed Lines]",
          "53: var isWindows = process.platform === 'win32'",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1164:   }",
          "1166:   if (this.fd !== null) {",
          "1168:       self._read();",
          "1169:     });",
          "1170:     return;",
          "",
          "[Removed Lines]",
          "1167:     process.nextTick(function () {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/readline.js||lireadline.js": [
          "File: lib/readline.js -> lireadline.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:   if (typeof this.input.setRawMode === 'function') {",
          "146:     return this.input.setRawMode(mode);",
          "147:   }",
          "151: Interface.prototype.prompt = function(preserveCursor) {",
          "",
          "[Removed Lines]",
          "148: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}