{
  "cve_id": "CVE-2017-3733",
  "cve_desc": "During a renegotiation handshake if the Encrypt-Then-Mac extension is negotiated where it was not in the original handshake (or vice-versa) then this can cause OpenSSL 1.1.0 before 1.1.0e to crash (dependent on ciphersuite). Both clients and servers are affected.",
  "repo": "openssl/openssl",
  "patch_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
  "patch_info": {
    "commit_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "files": [
      "include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h",
      "ssl/t1_enc.c",
      "ssl/t1_lib.c"
    ],
    "message": "Don't change the state of the ETM flags until CCS processing\n\nChanging the ciphersuite during a renegotiation can result in a crash\nleading to a DoS attack. ETM has not been implemented in 1.1.0 for DTLS\nso this is TLS only.\n\nThe problem is caused by changing the flag indicating whether to use ETM\nor not immediately on negotiation of ETM, rather than at CCS. Therefore,\nduring a renegotiation, if the ETM state is changing (usually due to a\nchange of ciphersuite), then an error/crash will occur.\n\nDue to the fact that there are separate CCS messages for read and write\nwe actually now need two flags to determine whether to use ETM or not.\n\nCVE-2017-3733\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl3.h||include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h||ssl/ssl_locl.h",
      "ssl/t1_enc.c||ssl/t1_enc.c",
      "ssl/t1_lib.c||ssl/t1_lib.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl3.h||include/openssl/ssl3.h": [
      "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "264: # define TLS1_FLAGS_SKIP_CERT_VERIFY             0x0010",
      "270: # define TLS1_FLAGS_RECEIVED_EXTMS               0x0200",
      "272: # define SSL3_MT_HELLO_REQUEST                   0",
      "273: # define SSL3_MT_CLIENT_HELLO                    1",
      "274: # define SSL3_MT_SERVER_HELLO                    2",
      "",
      "[Removed Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             0x0100",
      "",
      "[Added Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_READ        0x0100",
      "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             TLS1_FLAGS_ENCRYPT_THEN_MAC_READ",
      "273: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE       0x0400",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
      "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:     if (type == SSL3_RT_APPLICATION_DATA &&",
      "396:         u_len >= 4 * (max_send_fragment = s->max_send_fragment) &&",
      "397:         s->compress == NULL && s->msg_callback == NULL &&",
      "399:         EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_write_ctx)) &",
      "400:         EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK) {",
      "401:         unsigned char aad[13];",
      "",
      "[Removed Lines]",
      "398:         !SSL_USE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "[Added Lines]",
      "398:         !SSL_WRITE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "795:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "796:                                          &(outbuf[j][wr[j].length + eivlen]),",
      "797:                                          1) < 0)",
      "",
      "[Removed Lines]",
      "794:         if (!SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "794:         if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "814:         goto err;",
      "816:     for (j = 0; j < numpipes; j++) {",
      "818:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "819:                                          outbuf[j] + wr[j].length, 1) < 0)",
      "820:                 goto err;",
      "",
      "[Removed Lines]",
      "817:         if (SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "817:         if (SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------"
    ],
    "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
      "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "350:         unsigned char *mac;",
      "351:         mac_size = EVP_MD_CTX_size(s->read_hash);",
      "352:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
      "",
      "[Removed Lines]",
      "349:     if (SSL_USE_ETM(s) && s->read_hash) {",
      "",
      "[Added Lines]",
      "349:     if (SSL_READ_ETM(s) && s->read_hash) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "394:     if ((sess != NULL) &&",
      "395:         (s->enc_read_ctx != NULL) &&",
      "398:         unsigned char *mac = NULL;",
      "399:         unsigned char mac_tmp[EVP_MAX_MD_SIZE];",
      "",
      "[Removed Lines]",
      "396:         (EVP_MD_CTX_md(s->read_hash) != NULL) && !SSL_USE_ETM(s)) {",
      "",
      "[Added Lines]",
      "396:         (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "823:         }",
      "825:         ret = 1;",
      "827:             mac_size = EVP_MD_CTX_size(s->read_hash);",
      "828:         if ((bs != 1) && !send) {",
      "829:             int tmpret;",
      "",
      "[Removed Lines]",
      "826:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "[Added Lines]",
      "826:         if (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "997:     header[11] = (rec->length) >> 8;",
      "998:     header[12] = (rec->length) & 0xff;",
      "1001:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
      "1002:         ssl3_cbc_record_digest_supported(mac_ctx)) {",
      "",
      "[Removed Lines]",
      "1000:     if (!send && !SSL_USE_ETM(ssl) &&",
      "",
      "[Added Lines]",
      "1000:     if (!send && !SSL_READ_ETM(ssl) &&",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1022:             EVP_MD_CTX_free(hmac);",
      "1023:             return -1;",
      "1024:         }",
      "1026:             if (!tls_fips_digest_extra(ssl->enc_read_ctx,",
      "1027:                                        mac_ctx, rec->input,",
      "1028:                                        rec->length, rec->orig_len)) {",
      "",
      "[Removed Lines]",
      "1025:         if (!send && !SSL_USE_ETM(ssl) && FIPS_mode())",
      "",
      "[Added Lines]",
      "1025:         if (!send && !SSL_READ_ETM(ssl) && FIPS_mode())",
      "",
      "---------------"
    ],
    "ssl/ssl_locl.h||ssl/ssl_locl.h": [
      "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "378: # define SSL_CLIENT_USE_SIGALGS(s)        \\",
      "379:     SSL_CLIENT_USE_TLS1_2_CIPHERS(s)",
      "384: # define SSL_PKEY_RSA_ENC        0",
      "",
      "[Removed Lines]",
      "381: # define SSL_USE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC)",
      "",
      "[Added Lines]",
      "381: # define SSL_READ_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_READ)",
      "382: # define SSL_WRITE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1111:     unsigned char *alpn_client_proto_list;",
      "1112:     unsigned alpn_client_proto_list_len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1116:     int tlsext_use_etm;",
      "",
      "---------------"
    ],
    "ssl/t1_enc.c||ssl/t1_enc.c": [
      "File: ssl/t1_enc.c -> ssl/t1_enc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "130: #endif",
      "132:     if (which & SSL3_CC_READ) {",
      "133:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "134:             s->mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM;",
      "135:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133:         if (s->tlsext_use_etm)",
      "134:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "135:         else",
      "136:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "168:         mac_secret = &(s->s3->read_mac_secret[0]);",
      "169:         mac_secret_size = &(s->s3->read_mac_secret_size);",
      "170:     } else {",
      "171:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "172:             s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
      "173:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "176:         if (s->tlsext_use_etm)",
      "177:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "178:         else",
      "179:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "367:     if (s->s3->tmp.key_block_length != 0)",
      "368:         return (1);",
      "373:         SSLerr(SSL_F_TLS1_SETUP_KEY_BLOCK, SSL_R_CIPHER_OR_HASH_UNAVAILABLE);",
      "374:         return (0);",
      "375:     }",
      "",
      "[Removed Lines]",
      "370:     if (!ssl_cipher_get_evp",
      "371:         (s->session, &c, &hash, &mac_type, &mac_secret_size, &comp,",
      "372:          SSL_USE_ETM(s))) {",
      "",
      "[Added Lines]",
      "380:     if (!ssl_cipher_get_evp(s->session, &c, &hash, &mac_type, &mac_secret_size,",
      "381:                             &comp, s->tlsext_use_etm)) {",
      "",
      "---------------"
    ],
    "ssl/t1_lib.c||ssl/t1_lib.c": [
      "File: ssl/t1_lib.c -> ssl/t1_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1674: #endif",
      "1675:     if (!custom_ext_add(s, 1, &ret, limit, al))",
      "1676:         return NULL;",
      "",
      "[Removed Lines]",
      "1677:     if (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) {",
      "",
      "[Added Lines]",
      "1677:     if (s->tlsext_use_etm) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1683:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4",
      "1684:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT",
      "1685:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)",
      "1687:         else {",
      "",
      "[Removed Lines]",
      "1686:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1686:             s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1917:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
      "1918:     s->s3->tmp.peer_sigalgs = NULL;",
      "1921: #ifndef OPENSSL_NO_SRP",
      "1922:     OPENSSL_free(s->srp_ctx.login);",
      "",
      "[Removed Lines]",
      "1919:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1919:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2264:         }",
      "2265: #endif",
      "2266:         else if (type == TLSEXT_TYPE_encrypt_then_mac)",
      "",
      "[Removed Lines]",
      "2267:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2267:             s->tlsext_use_etm = 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2366:                              SSL_DTLSEXT_HB_DONT_SEND_REQUESTS);",
      "2367: #endif",
      "2371:     s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;",
      "",
      "[Removed Lines]",
      "2369:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2369:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2586:             if (s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD",
      "2587:                 && s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)",
      "2589:         } else if (type == TLSEXT_TYPE_extended_master_secret) {",
      "2590:             s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;",
      "2591:             if (!s->hit)",
      "",
      "[Removed Lines]",
      "2588:                 s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2588:                 s->tlsext_use_etm = 1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "88a3b5322170444d8d4003f6d8af82c3976c570b",
      "candidate_info": {
        "commit_hash": "88a3b5322170444d8d4003f6d8af82c3976c570b",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/88a3b5322170444d8d4003f6d8af82c3976c570b",
        "files": [
          "crypto/seed/seed.c"
        ],
        "message": "Use _WIN32 over WIN32 for preprocessor conditional\n\nThe intent seems to be that the WIN32 symbol is for things that are a direct\nbyproduct of being a windows-variant configuration and should be used for\nfeature en/disablement on windows systems.  Use of the _WIN32 symbol is more\nwidespread, being used to implement platform portability of more generic code.\n\nWe do define WIN32 in some situations in e_os.h, but that is not included\nuniversally.\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2642)\n(cherry picked from commit ac879ed62a19f3c878f7be3020a1b93cc77f4b38)",
        "before_after_code_files": [
          "crypto/seed/seed.c||crypto/seed/seed.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/seed/seed.c||crypto/seed/seed.c": [
          "File: crypto/seed/seed.c -> crypto/seed/seed.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: # include <stdio.h>",
          "38: # include <stdlib.h>",
          "39: # include <string.h>",
          "41: #  include <memory.h>",
          "42: # endif",
          "",
          "[Removed Lines]",
          "40: # ifdef WIN32",
          "",
          "[Added Lines]",
          "40: # ifdef _WIN32",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9c5a691d578a4debfd6ecacc030a85900906bf0d",
      "candidate_info": {
        "commit_hash": "9c5a691d578a4debfd6ecacc030a85900906bf0d",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/9c5a691d578a4debfd6ecacc030a85900906bf0d",
        "files": [
          "test/handshake_helper.c",
          "test/ssl-tests/17-renegotiate.conf",
          "test/ssl-tests/17-renegotiate.conf.in",
          "test/ssl-tests/18-dtls-renegotiate.conf",
          "test/ssl-tests/18-dtls-renegotiate.conf.in",
          "test/ssl_test_ctx.c",
          "test/ssl_test_ctx.h"
        ],
        "message": "Provide a test for the Encrypt-Then-Mac renegotiation crash\n\nChanging the ciphersuite during a renegotiation can result in a crash\nleading to a DoS attack. ETM has not been implemented in 1.1.0 for DTLS\nso this is TLS only.\n\nThis commit provides a test for the issue.\n\nCVE-2017-3733\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "test/handshake_helper.c||test/handshake_helper.c",
          "test/ssl-tests/17-renegotiate.conf||test/ssl-tests/17-renegotiate.conf",
          "test/ssl-tests/17-renegotiate.conf.in||test/ssl-tests/17-renegotiate.conf.in",
          "test/ssl-tests/18-dtls-renegotiate.conf||test/ssl-tests/18-dtls-renegotiate.conf",
          "test/ssl-tests/18-dtls-renegotiate.conf.in||test/ssl-tests/18-dtls-renegotiate.conf.in",
          "test/ssl_test_ctx.c||test/ssl_test_ctx.c",
          "test/ssl_test_ctx.h||test/ssl_test_ctx.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/handshake_helper.c||test/handshake_helper.c": [
          "File: test/handshake_helper.c -> test/handshake_helper.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "611:                 ret = SSL_renegotiate(peer->ssl);",
          "614:             if (!ret) {",
          "615:                 peer->status = PEER_ERROR;",
          "616:                 return;",
          "",
          "[Removed Lines]",
          "610:             if (SSL_is_server(peer->ssl))",
          "612:             else",
          "613:                 ret = SSL_renegotiate_abbreviated(peer->ssl);",
          "",
          "[Added Lines]",
          "610:             if (SSL_is_server(peer->ssl)) {",
          "612:             } else {",
          "613:                 if (test_ctx->extra.client.reneg_ciphers != NULL) {",
          "614:                     if (!SSL_set_cipher_list(peer->ssl,",
          "615:                                 test_ctx->extra.client.reneg_ciphers)) {",
          "616:                         peer->status = PEER_ERROR;",
          "617:                         return;",
          "618:                     }",
          "619:                     ret = SSL_renegotiate(peer->ssl);",
          "620:                 } else {",
          "621:                     ret = SSL_renegotiate_abbreviated(peer->ssl);",
          "622:                 }",
          "623:             }",
          "",
          "---------------"
        ],
        "test/ssl-tests/17-renegotiate.conf||test/ssl-tests/17-renegotiate.conf": [
          "File: test/ssl-tests/17-renegotiate.conf -> test/ssl-tests/17-renegotiate.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Generated with generate_ssl_tests.pl",
          "5: test-0 = 0-renegotiate-client-no-resume",
          "6: test-1 = 1-renegotiate-client-resume",
          "",
          "[Removed Lines]",
          "3: num_tests = 6",
          "",
          "[Added Lines]",
          "3: num_tests = 10",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8: test-3 = 3-renegotiate-server-resume",
          "9: test-4 = 4-renegotiate-client-auth-require",
          "10: test-5 = 5-renegotiate-client-auth-once",
          "11: # ===========================================================",
          "13: [0-renegotiate-client-no-resume]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: test-6 = 6-renegotiate-aead-to-non-aead",
          "12: test-7 = 7-renegotiate-non-aead-to-aead",
          "13: test-8 = 8-renegotiate-non-aead-to-non-aead",
          "14: test-9 = 9-renegotiate-aead-to-aead",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "178: ResumptionExpected = No",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185: # ===========================================================",
          "187: [6-renegotiate-aead-to-non-aead]",
          "188: ssl_conf = 6-renegotiate-aead-to-non-aead-ssl",
          "190: [6-renegotiate-aead-to-non-aead-ssl]",
          "191: server = 6-renegotiate-aead-to-non-aead-server",
          "192: client = 6-renegotiate-aead-to-non-aead-client",
          "194: [6-renegotiate-aead-to-non-aead-server]",
          "195: Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem",
          "196: CipherString = DEFAULT",
          "197: MaxProtocol = TLSv1.2",
          "198: Options = NoResumptionOnRenegotiation",
          "199: PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem",
          "201: [6-renegotiate-aead-to-non-aead-client]",
          "202: CipherString = AES128-GCM-SHA256",
          "203: VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem",
          "204: VerifyMode = Peer",
          "206: [test-6]",
          "207: ExpectedResult = Success",
          "208: HandshakeMode = RenegotiateClient",
          "209: Method = TLS",
          "210: ResumptionExpected = No",
          "211: client = 6-renegotiate-aead-to-non-aead-client-extra",
          "213: [6-renegotiate-aead-to-non-aead-client-extra]",
          "214: RenegotiateCiphers = AES128-SHA",
          "217: # ===========================================================",
          "219: [7-renegotiate-non-aead-to-aead]",
          "220: ssl_conf = 7-renegotiate-non-aead-to-aead-ssl",
          "222: [7-renegotiate-non-aead-to-aead-ssl]",
          "223: server = 7-renegotiate-non-aead-to-aead-server",
          "224: client = 7-renegotiate-non-aead-to-aead-client",
          "226: [7-renegotiate-non-aead-to-aead-server]",
          "227: Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem",
          "228: CipherString = DEFAULT",
          "229: MaxProtocol = TLSv1.2",
          "230: Options = NoResumptionOnRenegotiation",
          "231: PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem",
          "233: [7-renegotiate-non-aead-to-aead-client]",
          "234: CipherString = AES128-SHA",
          "235: VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem",
          "236: VerifyMode = Peer",
          "238: [test-7]",
          "239: ExpectedResult = Success",
          "240: HandshakeMode = RenegotiateClient",
          "241: Method = TLS",
          "242: ResumptionExpected = No",
          "243: client = 7-renegotiate-non-aead-to-aead-client-extra",
          "245: [7-renegotiate-non-aead-to-aead-client-extra]",
          "246: RenegotiateCiphers = AES128-GCM-SHA256",
          "249: # ===========================================================",
          "251: [8-renegotiate-non-aead-to-non-aead]",
          "252: ssl_conf = 8-renegotiate-non-aead-to-non-aead-ssl",
          "254: [8-renegotiate-non-aead-to-non-aead-ssl]",
          "255: server = 8-renegotiate-non-aead-to-non-aead-server",
          "256: client = 8-renegotiate-non-aead-to-non-aead-client",
          "258: [8-renegotiate-non-aead-to-non-aead-server]",
          "259: Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem",
          "260: CipherString = DEFAULT",
          "261: MaxProtocol = TLSv1.2",
          "262: Options = NoResumptionOnRenegotiation",
          "263: PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem",
          "265: [8-renegotiate-non-aead-to-non-aead-client]",
          "266: CipherString = AES128-SHA",
          "267: VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem",
          "268: VerifyMode = Peer",
          "270: [test-8]",
          "271: ExpectedResult = Success",
          "272: HandshakeMode = RenegotiateClient",
          "273: Method = TLS",
          "274: ResumptionExpected = No",
          "275: client = 8-renegotiate-non-aead-to-non-aead-client-extra",
          "277: [8-renegotiate-non-aead-to-non-aead-client-extra]",
          "278: RenegotiateCiphers = AES256-SHA",
          "281: # ===========================================================",
          "283: [9-renegotiate-aead-to-aead]",
          "284: ssl_conf = 9-renegotiate-aead-to-aead-ssl",
          "286: [9-renegotiate-aead-to-aead-ssl]",
          "287: server = 9-renegotiate-aead-to-aead-server",
          "288: client = 9-renegotiate-aead-to-aead-client",
          "290: [9-renegotiate-aead-to-aead-server]",
          "291: Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem",
          "292: CipherString = DEFAULT",
          "293: MaxProtocol = TLSv1.2",
          "294: Options = NoResumptionOnRenegotiation",
          "295: PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem",
          "297: [9-renegotiate-aead-to-aead-client]",
          "298: CipherString = AES128-GCM-SHA256",
          "299: VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem",
          "300: VerifyMode = Peer",
          "302: [test-9]",
          "303: ExpectedResult = Success",
          "304: HandshakeMode = RenegotiateClient",
          "305: Method = TLS",
          "306: ResumptionExpected = No",
          "307: client = 9-renegotiate-aead-to-aead-client-extra",
          "309: [9-renegotiate-aead-to-aead-client-extra]",
          "310: RenegotiateCiphers = AES256-GCM-SHA384",
          "",
          "---------------"
        ],
        "test/ssl-tests/17-renegotiate.conf.in||test/ssl-tests/17-renegotiate.conf.in": [
          "File: test/ssl-tests/17-renegotiate.conf.in -> test/ssl-tests/17-renegotiate.conf.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:             \"ResumptionExpected\" => \"No\",",
          "103:             \"ExpectedResult\" => \"Success\"",
          "104:         }",
          "106: );",
          "",
          "[Removed Lines]",
          "105:     }",
          "",
          "[Added Lines]",
          "105:     },",
          "106:     {",
          "107:         name => \"renegotiate-aead-to-non-aead\",",
          "108:         server => {",
          "109:             \"Options\" => \"NoResumptionOnRenegotiation\",",
          "110:             \"MaxProtocol\" => \"TLSv1.2\"",
          "111:         },",
          "112:         client => {",
          "113:             \"CipherString\" => \"AES128-GCM-SHA256\",",
          "114:             extra => {",
          "115:                 \"RenegotiateCiphers\" => \"AES128-SHA\"",
          "116:             }",
          "117:         },",
          "118:         test => {",
          "119:             \"Method\" => \"TLS\",",
          "120:             \"HandshakeMode\" => \"RenegotiateClient\",",
          "121:             \"ResumptionExpected\" => \"No\",",
          "122:             \"ExpectedResult\" => \"Success\"",
          "123:         }",
          "124:     },",
          "125:     {",
          "126:         name => \"renegotiate-non-aead-to-aead\",",
          "127:         server => {",
          "128:             \"Options\" => \"NoResumptionOnRenegotiation\",",
          "129:             \"MaxProtocol\" => \"TLSv1.2\"",
          "130:         },",
          "131:         client => {",
          "132:             \"CipherString\" => \"AES128-SHA\",",
          "133:             extra => {",
          "134:                 \"RenegotiateCiphers\" => \"AES128-GCM-SHA256\"",
          "135:             }",
          "136:         },",
          "137:         test => {",
          "138:             \"Method\" => \"TLS\",",
          "139:             \"HandshakeMode\" => \"RenegotiateClient\",",
          "140:             \"ResumptionExpected\" => \"No\",",
          "141:             \"ExpectedResult\" => \"Success\"",
          "142:         }",
          "143:     },",
          "144:     {",
          "145:         name => \"renegotiate-non-aead-to-non-aead\",",
          "146:         server => {",
          "147:             \"Options\" => \"NoResumptionOnRenegotiation\",",
          "148:             \"MaxProtocol\" => \"TLSv1.2\"",
          "149:         },",
          "150:         client => {",
          "151:             \"CipherString\" => \"AES128-SHA\",",
          "152:             extra => {",
          "153:                 \"RenegotiateCiphers\" => \"AES256-SHA\"",
          "154:             }",
          "155:         },",
          "156:         test => {",
          "157:             \"Method\" => \"TLS\",",
          "158:             \"HandshakeMode\" => \"RenegotiateClient\",",
          "159:             \"ResumptionExpected\" => \"No\",",
          "160:             \"ExpectedResult\" => \"Success\"",
          "161:         }",
          "162:     },",
          "163:     {",
          "164:         name => \"renegotiate-aead-to-aead\",",
          "165:         server => {",
          "166:             \"Options\" => \"NoResumptionOnRenegotiation\",",
          "167:             \"MaxProtocol\" => \"TLSv1.2\"",
          "168:         },",
          "169:         client => {",
          "170:             \"CipherString\" => \"AES128-GCM-SHA256\",",
          "171:             extra => {",
          "172:                 \"RenegotiateCiphers\" => \"AES256-GCM-SHA384\"",
          "173:             }",
          "174:         },",
          "175:         test => {",
          "176:             \"Method\" => \"TLS\",",
          "177:             \"HandshakeMode\" => \"RenegotiateClient\",",
          "178:             \"ResumptionExpected\" => \"No\",",
          "179:             \"ExpectedResult\" => \"Success\"",
          "180:         }",
          "181:     },",
          "",
          "---------------"
        ],
        "test/ssl-tests/18-dtls-renegotiate.conf||test/ssl-tests/18-dtls-renegotiate.conf": [
          "File: test/ssl-tests/18-dtls-renegotiate.conf -> test/ssl-tests/18-dtls-renegotiate.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Generated with generate_ssl_tests.pl",
          "5: test-0 = 0-renegotiate-client-no-resume",
          "6: test-1 = 1-renegotiate-client-resume",
          "7: test-2 = 2-renegotiate-server-resume",
          "8: test-3 = 3-renegotiate-client-auth-require",
          "9: test-4 = 4-renegotiate-client-auth-once",
          "10: # ===========================================================",
          "12: [0-renegotiate-client-no-resume]",
          "",
          "[Removed Lines]",
          "3: num_tests = 5",
          "",
          "[Added Lines]",
          "3: num_tests = 9",
          "10: test-5 = 5-renegotiate-aead-to-non-aead",
          "11: test-6 = 6-renegotiate-non-aead-to-aead",
          "12: test-7 = 7-renegotiate-non-aead-to-non-aead",
          "13: test-8 = 8-renegotiate-aead-to-aead",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146: ResumptionExpected = No",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "153: # ===========================================================",
          "155: [5-renegotiate-aead-to-non-aead]",
          "156: ssl_conf = 5-renegotiate-aead-to-non-aead-ssl",
          "158: [5-renegotiate-aead-to-non-aead-ssl]",
          "159: server = 5-renegotiate-aead-to-non-aead-server",
          "160: client = 5-renegotiate-aead-to-non-aead-client",
          "162: [5-renegotiate-aead-to-non-aead-server]",
          "163: Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem",
          "164: CipherString = DEFAULT",
          "165: Options = NoResumptionOnRenegotiation",
          "166: PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem",
          "168: [5-renegotiate-aead-to-non-aead-client]",
          "169: CipherString = AES128-GCM-SHA256",
          "170: VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem",
          "171: VerifyMode = Peer",
          "173: [test-5]",
          "174: ExpectedResult = Success",
          "175: HandshakeMode = RenegotiateClient",
          "176: Method = DTLS",
          "177: ResumptionExpected = No",
          "178: client = 5-renegotiate-aead-to-non-aead-client-extra",
          "180: [5-renegotiate-aead-to-non-aead-client-extra]",
          "181: RenegotiateCiphers = AES128-SHA",
          "184: # ===========================================================",
          "186: [6-renegotiate-non-aead-to-aead]",
          "187: ssl_conf = 6-renegotiate-non-aead-to-aead-ssl",
          "189: [6-renegotiate-non-aead-to-aead-ssl]",
          "190: server = 6-renegotiate-non-aead-to-aead-server",
          "191: client = 6-renegotiate-non-aead-to-aead-client",
          "193: [6-renegotiate-non-aead-to-aead-server]",
          "194: Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem",
          "195: CipherString = DEFAULT",
          "196: Options = NoResumptionOnRenegotiation",
          "197: PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem",
          "199: [6-renegotiate-non-aead-to-aead-client]",
          "200: CipherString = AES128-SHA",
          "201: VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem",
          "202: VerifyMode = Peer",
          "204: [test-6]",
          "205: ExpectedResult = Success",
          "206: HandshakeMode = RenegotiateClient",
          "207: Method = DTLS",
          "208: ResumptionExpected = No",
          "209: client = 6-renegotiate-non-aead-to-aead-client-extra",
          "211: [6-renegotiate-non-aead-to-aead-client-extra]",
          "212: RenegotiateCiphers = AES128-GCM-SHA256",
          "215: # ===========================================================",
          "217: [7-renegotiate-non-aead-to-non-aead]",
          "218: ssl_conf = 7-renegotiate-non-aead-to-non-aead-ssl",
          "220: [7-renegotiate-non-aead-to-non-aead-ssl]",
          "221: server = 7-renegotiate-non-aead-to-non-aead-server",
          "222: client = 7-renegotiate-non-aead-to-non-aead-client",
          "224: [7-renegotiate-non-aead-to-non-aead-server]",
          "225: Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem",
          "226: CipherString = DEFAULT",
          "227: Options = NoResumptionOnRenegotiation",
          "228: PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem",
          "230: [7-renegotiate-non-aead-to-non-aead-client]",
          "231: CipherString = AES128-SHA",
          "232: VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem",
          "233: VerifyMode = Peer",
          "235: [test-7]",
          "236: ExpectedResult = Success",
          "237: HandshakeMode = RenegotiateClient",
          "238: Method = DTLS",
          "239: ResumptionExpected = No",
          "240: client = 7-renegotiate-non-aead-to-non-aead-client-extra",
          "242: [7-renegotiate-non-aead-to-non-aead-client-extra]",
          "243: RenegotiateCiphers = AES256-SHA",
          "246: # ===========================================================",
          "248: [8-renegotiate-aead-to-aead]",
          "249: ssl_conf = 8-renegotiate-aead-to-aead-ssl",
          "251: [8-renegotiate-aead-to-aead-ssl]",
          "252: server = 8-renegotiate-aead-to-aead-server",
          "253: client = 8-renegotiate-aead-to-aead-client",
          "255: [8-renegotiate-aead-to-aead-server]",
          "256: Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem",
          "257: CipherString = DEFAULT",
          "258: Options = NoResumptionOnRenegotiation",
          "259: PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem",
          "261: [8-renegotiate-aead-to-aead-client]",
          "262: CipherString = AES128-GCM-SHA256",
          "263: VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem",
          "264: VerifyMode = Peer",
          "266: [test-8]",
          "267: ExpectedResult = Success",
          "268: HandshakeMode = RenegotiateClient",
          "269: Method = DTLS",
          "270: ResumptionExpected = No",
          "271: client = 8-renegotiate-aead-to-aead-client-extra",
          "273: [8-renegotiate-aead-to-aead-client-extra]",
          "274: RenegotiateCiphers = AES256-GCM-SHA384",
          "",
          "---------------"
        ],
        "test/ssl-tests/18-dtls-renegotiate.conf.in||test/ssl-tests/18-dtls-renegotiate.conf.in": [
          "File: test/ssl-tests/18-dtls-renegotiate.conf.in -> test/ssl-tests/18-dtls-renegotiate.conf.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:             \"ResumptionExpected\" => \"No\",",
          "95:             \"ExpectedResult\" => \"Success\"",
          "96:         }",
          "98: );",
          "",
          "[Removed Lines]",
          "97:     }",
          "",
          "[Added Lines]",
          "97:     },",
          "98:     {",
          "99:         name => \"renegotiate-aead-to-non-aead\",",
          "100:         server => {",
          "101:             \"Options\" => \"NoResumptionOnRenegotiation\"",
          "102:         },",
          "103:         client => {",
          "104:             \"CipherString\" => \"AES128-GCM-SHA256\",",
          "105:             extra => {",
          "106:                 \"RenegotiateCiphers\" => \"AES128-SHA\"",
          "107:             }",
          "108:         },",
          "109:         test => {",
          "110:             \"Method\" => \"DTLS\",",
          "111:             \"HandshakeMode\" => \"RenegotiateClient\",",
          "112:             \"ResumptionExpected\" => \"No\",",
          "113:             \"ExpectedResult\" => \"Success\"",
          "114:         }",
          "115:     },",
          "116:     {",
          "117:         name => \"renegotiate-non-aead-to-aead\",",
          "118:         server => {",
          "119:             \"Options\" => \"NoResumptionOnRenegotiation\"",
          "120:         },",
          "121:         client => {",
          "122:             \"CipherString\" => \"AES128-SHA\",",
          "123:             extra => {",
          "124:                 \"RenegotiateCiphers\" => \"AES128-GCM-SHA256\"",
          "125:             }",
          "126:         },",
          "127:         test => {",
          "128:             \"Method\" => \"DTLS\",",
          "129:             \"HandshakeMode\" => \"RenegotiateClient\",",
          "130:             \"ResumptionExpected\" => \"No\",",
          "131:             \"ExpectedResult\" => \"Success\"",
          "132:         }",
          "133:     },",
          "134:     {",
          "135:         name => \"renegotiate-non-aead-to-non-aead\",",
          "136:         server => {",
          "137:             \"Options\" => \"NoResumptionOnRenegotiation\"",
          "138:         },",
          "139:         client => {",
          "140:             \"CipherString\" => \"AES128-SHA\",",
          "141:             extra => {",
          "142:                 \"RenegotiateCiphers\" => \"AES256-SHA\"",
          "143:             }",
          "144:         },",
          "145:         test => {",
          "146:             \"Method\" => \"DTLS\",",
          "147:             \"HandshakeMode\" => \"RenegotiateClient\",",
          "148:             \"ResumptionExpected\" => \"No\",",
          "149:             \"ExpectedResult\" => \"Success\"",
          "150:         }",
          "151:     },",
          "152:     {",
          "153:         name => \"renegotiate-aead-to-aead\",",
          "154:         server => {",
          "155:             \"Options\" => \"NoResumptionOnRenegotiation\"",
          "156:         },",
          "157:         client => {",
          "158:             \"CipherString\" => \"AES128-GCM-SHA256\",",
          "159:             extra => {",
          "160:                 \"RenegotiateCiphers\" => \"AES256-GCM-SHA384\"",
          "161:             }",
          "162:         },",
          "163:         test => {",
          "164:             \"Method\" => \"DTLS\",",
          "165:             \"HandshakeMode\" => \"RenegotiateClient\",",
          "166:             \"ResumptionExpected\" => \"No\",",
          "167:             \"ExpectedResult\" => \"Success\"",
          "168:         }",
          "169:     },",
          "",
          "---------------"
        ],
        "test/ssl_test_ctx.c||test/ssl_test_ctx.c": [
          "File: test/ssl_test_ctx.c -> test/ssl_test_ctx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "360:                      mode);",
          "361: }",
          "367: static const test_enum ssl_ct_validation_modes[] = {",
          "368:     {\"None\", SSL_TEST_CT_VALIDATION_NONE},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "345: IMPLEMENT_SSL_TEST_STRING_OPTION(SSL_TEST_CLIENT_CONF, client, reneg_ciphers)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "494:     { \"NPNProtocols\", &parse_client_npn_protocols },",
          "495:     { \"ALPNProtocols\", &parse_client_alpn_protocols },",
          "496:     { \"CTValidation\", &parse_ct_validation },",
          "497: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "471:     { \"RenegotiateCiphers\", &parse_client_reneg_ciphers},",
          "",
          "---------------"
        ],
        "test/ssl_test_ctx.h||test/ssl_test_ctx.h": [
          "File: test/ssl_test_ctx.h -> test/ssl_test_ctx.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:     char *npn_protocols;",
          "85:     char *alpn_protocols;",
          "86:     ssl_ct_validation_t ct_validation;",
          "87: } SSL_TEST_CLIENT_CONF;",
          "89: typedef struct {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:     char *reneg_ciphers;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "08c2da0d6a19b5b9a501ff93641cb2ece5b6b6f0",
      "candidate_info": {
        "commit_hash": "08c2da0d6a19b5b9a501ff93641cb2ece5b6b6f0",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/08c2da0d6a19b5b9a501ff93641cb2ece5b6b6f0",
        "files": [
          "crypto/x509/x_all.c"
        ],
        "message": "Fix no-ocsp\n\nThe use of EXFLAG_SET requires the inclusion of openssl/x509v3.h.\nopenssl/ocsp.h does that, except when OCSP is disabled.\n\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2227)\n(cherry picked from commit d62210af2e169d0818c65ff9f20ab5276693b2bf)",
        "before_after_code_files": [
          "crypto/x509/x_all.c||crypto/x509/x_all.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/x509/x_all.c||crypto/x509/x_all.c": [
          "File: crypto/x509/x_all.c -> crypto/x509/x_all.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include <openssl/ocsp.h>",
          "19: #include <openssl/rsa.h>",
          "20: #include <openssl/dsa.h>",
          "22: int X509_verify(X509 *a, EVP_PKEY *r)",
          "23: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #include <openssl/x509v3.h>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "14d4d7eda1d2d83c48db7cbf1928ae6e12339265",
      "candidate_info": {
        "commit_hash": "14d4d7eda1d2d83c48db7cbf1928ae6e12339265",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/14d4d7eda1d2d83c48db7cbf1928ae6e12339265",
        "files": [
          "apps/s_server.c"
        ],
        "message": "Simplify code around next_proto.len by changing 'len' data type.\n\nclean an useless static qualifier and a dead comment.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2278)\n\n(cherry picked from commit f2ff1432fc50e5033471859dc9899eb219278a7a)",
        "before_after_code_files": [
          "apps/s_server.c||apps/s_server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/s_server.c||apps/s_server.c": [
          "File: apps/s_server.c -> apps/s_server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "139: #ifndef OPENSSL_NO_DTLS",
          "140: static int enable_timeouts = 0;",
          "141: static long socket_mtu;",
          "144: static int dtlslisten = 0;",
          "146: #ifndef OPENSSL_NO_PSK",
          "150: static unsigned int psk_server_cb(SSL *ssl, const char *identity,",
          "",
          "[Removed Lines]",
          "143: #endif",
          "147: static char *psk_identity = \"Client_identity\";",
          "",
          "[Added Lines]",
          "141: #endif",
          "144: static const char psk_identity[] = \"Client_identity\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "585: typedef struct tlsextnextprotoctx_st {",
          "586:     unsigned char *data;",
          "588: } tlsextnextprotoctx;",
          "590: static int next_proto_cb(SSL *s, const unsigned char **data,",
          "",
          "[Removed Lines]",
          "587:     unsigned int len;",
          "",
          "[Added Lines]",
          "583:     size_t len;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "919:     tlsextalpnctx alpn_ctx = { NULL, 0 };",
          "920: #ifndef OPENSSL_NO_PSK",
          "923:     char *p;",
          "924: #endif",
          "925: #ifndef OPENSSL_NO_SRP",
          "",
          "[Removed Lines]",
          "922:     static char *psk_identity_hint = NULL;",
          "",
          "[Added Lines]",
          "918:     char *psk_identity_hint = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1519:     }",
          "1520: #if !defined(OPENSSL_NO_NEXTPROTONEG)",
          "1521:     if (next_proto_neg_in) {",
          "1524:         if (next_proto.data == NULL)",
          "1525:             goto end;",
          "1529:     }",
          "1530: #endif",
          "1531:     alpn_ctx.data = NULL;",
          "1532:     if (alpn_in) {",
          "1535:         if (alpn_ctx.data == NULL)",
          "1536:             goto end;",
          "1538:     }",
          "1540:     if (crl_file) {",
          "",
          "[Removed Lines]",
          "1522:         size_t len;",
          "1523:         next_proto.data = next_protos_parse(&len, next_proto_neg_in);",
          "1526:         next_proto.len = len;",
          "1527:     } else {",
          "1528:         next_proto.data = NULL;",
          "1533:         size_t len;",
          "1534:         alpn_ctx.data = next_protos_parse(&len, alpn_in);",
          "1537:         alpn_ctx.len = len;",
          "",
          "[Added Lines]",
          "1518:         next_proto.data = next_protos_parse(&next_proto.len, next_proto_neg_in);",
          "1525:         alpn_ctx.data = next_protos_parse(&alpn_ctx.len, alpn_in);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c1b45e6c1ac1a5bff7b89f73bbcae59809f9b808",
      "candidate_info": {
        "commit_hash": "c1b45e6c1ac1a5bff7b89f73bbcae59809f9b808",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/c1b45e6c1ac1a5bff7b89f73bbcae59809f9b808",
        "files": [
          "include/openssl/engine.h"
        ],
        "message": "Remove ENGINE_load_dasync() (no OPENSSL_INIT_ENGINE_DASYNC already)\n\nFixes: 8d00e30f96fb86b20bc992f626b188c3548fc58c (\"Don't try to init\ndasync internally\")\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>\nCLA: trivial\n(cherry picked from commit b9b5181dd2f52ff0560a33b116396cdae5e48048)",
        "before_after_code_files": [
          "include/openssl/engine.h||include/openssl/engine.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/openssl/engine.h||include/openssl/engine.h": [
          "File: include/openssl/engine.h -> include/openssl/engine.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "334:     OPENSSL_init_crypto(OPENSSL_INIT_ENGINE_PADLOCK, NULL)",
          "335: #  define ENGINE_load_capi() \\",
          "336:     OPENSSL_init_crypto(OPENSSL_INIT_ENGINE_CAPI, NULL)",
          "339: #  define ENGINE_load_afalg() \\",
          "340:     OPENSSL_init_crypto(OPENSSL_INIT_ENGINE_AFALG, NULL)",
          "341: # endif",
          "",
          "[Removed Lines]",
          "337: #  define ENGINE_load_dasync() \\",
          "338:     OPENSSL_init_crypto(OPENSSL_INIT_ENGINE_DASYNC, NULL)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}