{
  "cve_id": "CVE-2015-2778",
  "cve_desc": "Quassel before 0.12-rc1 uses an incorrect data-type size when splitting a message, which allows remote attackers to cause a denial of service (crash) via a long CTCP query containing only multibyte characters.",
  "repo": "quassel/quassel",
  "patch_hash": "b5e38970ffd55e2dd9f706ce75af9a8d7730b1b8",
  "patch_info": {
    "commit_hash": "b5e38970ffd55e2dd9f706ce75af9a8d7730b1b8",
    "repo": "quassel/quassel",
    "commit_url": "https://github.com/quassel/quassel/commit/b5e38970ffd55e2dd9f706ce75af9a8d7730b1b8",
    "files": [
      "src/core/corebasichandler.cpp",
      "src/core/corebasichandler.h",
      "src/core/corenetwork.cpp",
      "src/core/corenetwork.h",
      "src/core/coreuserinputhandler.cpp",
      "src/core/coreuserinputhandler.h",
      "src/core/ctcpparser.cpp"
    ],
    "message": "Improve the message-splitting algorithm for PRIVMSG and CTCP\n\nThis introduces a new message splitting algorithm based on\nQTextBoundaryFinder.  It works by first starting with the entire\nmessage to be sent, encoding it, and checking to see if it is over\nthe maximum message length.  If it is, it uses QTBF to find the\nword boundary most immediately preceding the maximum length.  If no\nsuitable boundary can be found, it falls back to searching for\ngrapheme boundaries.  It repeats this process until the entire\nmessage has been sent.\n\nUnlike what it replaces, the new splitting code is not recursive\nand cannot cause stack overflows.  Additionally, if it is unable\nto split a string, it will give up gracefully and not crash the\ncore or cause a thread to run away.\n\nThis patch fixes two bugs.  The first is garbage characters caused\nby accidentally splitting the string in the middle of a multibyte\ncharacter.  Since the new code splits at a character level instead\nof a byte level, this will no longer be an issue.  The second is\nthe core crash caused by sending an overlength CTCP query (\"/me\")\ncontaining only multibyte characters.  This bug was caused by the\nold CTCP splitter using the byte index from lastParamOverrun() as\na character index for a QString.",
    "before_after_code_files": [
      "src/core/corebasichandler.cpp||src/core/corebasichandler.cpp",
      "src/core/corebasichandler.h||src/core/corebasichandler.h",
      "src/core/corenetwork.cpp||src/core/corenetwork.cpp",
      "src/core/corenetwork.h||src/core/corenetwork.h",
      "src/core/coreuserinputhandler.cpp||src/core/coreuserinputhandler.cpp",
      "src/core/coreuserinputhandler.h||src/core/coreuserinputhandler.h",
      "src/core/ctcpparser.cpp||src/core/ctcpparser.cpp"
    ]
  },
  "patch_diff": {
    "src/core/corebasichandler.cpp||src/core/corebasichandler.cpp": [
      "File: src/core/corebasichandler.cpp -> src/core/corebasichandler.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "33:     connect(this, SIGNAL(putCmd(QString, const QList<QByteArray> &, const QByteArray &)),",
      "34:         network(), SLOT(putCmd(QString, const QList<QByteArray> &, const QByteArray &)));",
      "36:     connect(this, SIGNAL(putRawLine(const QByteArray &)),",
      "37:         network(), SLOT(putRawLine(const QByteArray &)));",
      "38: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "36:     connect(this, SIGNAL(putCmd(QString, const QList<QList<QByteArray>> &, const QByteArray &)),",
      "37:         network(), SLOT(putCmd(QString, const QList<QList<QByteArray>> &, const QByteArray &)));",
      "",
      "---------------"
    ],
    "src/core/corebasichandler.h||src/core/corebasichandler.h": [
      "File: src/core/corebasichandler.h -> src/core/corebasichandler.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "55: signals:",
      "56:     void displayMsg(Message::Type, BufferInfo::Type, const QString &target, const QString &text, const QString &sender = \"\", Message::Flags flags = Message::None);",
      "57:     void putCmd(const QString &cmd, const QList<QByteArray> &params, const QByteArray &prefix = QByteArray());",
      "58:     void putRawLine(const QByteArray &msg);",
      "60: protected:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "58:     void putCmd(const QString &cmd, const QList<QList<QByteArray>> &params, const QByteArray &prefix = QByteArray());",
      "",
      "---------------"
    ],
    "src/core/corenetwork.cpp||src/core/corenetwork.cpp": [
      "File: src/core/corenetwork.cpp -> src/core/corenetwork.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "284: }",
      "287: void CoreNetwork::setChannelJoined(const QString &channel)",
      "288: {",
      "289:     _autoWhoQueue.prepend(channel.toLower()); // prepend so this new chan is the first to be checked",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "287: void CoreNetwork::putCmd(const QString &cmd, const QList<QList<QByteArray>> &params, const QByteArray &prefix)",
      "288: {",
      "289:     QListIterator<QList<QByteArray>> i(params);",
      "290:     while (i.hasNext()) {",
      "291:         QList<QByteArray> msg = i.next();",
      "292:         putCmd(cmd, msg, prefix);",
      "293:     }",
      "294: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "980:         }",
      "981:     }",
      "982: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "995: QList<QList<QByteArray>> CoreNetwork::splitMessage(const QString &cmd, const QString &message, std::function<QList<QByteArray>(QString &)> cmdGenerator)",
      "996: {",
      "997:     QString wrkMsg(message);",
      "998:     QList<QList<QByteArray>> msgsToSend;",
      "1001:     do {",
      "1006:         int splitPos = wrkMsg.size();",
      "1007:         QList<QByteArray> initialSplitMsgEnc = cmdGenerator(wrkMsg);",
      "1008:         int initialOverrun = userInputHandler()->lastParamOverrun(cmd, initialSplitMsgEnc);",
      "1010:         if (initialOverrun) {",
      "1013:             QString splitMsg(wrkMsg);",
      "1014:             QTextBoundaryFinder qtbf(QTextBoundaryFinder::Word, splitMsg);",
      "1015:             qtbf.setPosition(initialSplitMsgEnc[1].size() - initialOverrun);",
      "1016:             QList<QByteArray> splitMsgEnc;",
      "1017:             int overrun = initialOverrun;",
      "1019:             while (overrun) {",
      "1020:                 splitPos = qtbf.toPreviousBoundary();",
      "1025:                 if (splitPos > 0) {",
      "1028:                     splitMsg = splitMsg.left(splitPos);",
      "1029:                     splitMsgEnc = cmdGenerator(splitMsg);",
      "1030:                     overrun = userInputHandler()->lastParamOverrun(cmd, splitMsgEnc);",
      "1031:                 }",
      "1032:                 else {",
      "1038:                     if (qtbf.type() == QTextBoundaryFinder::Word) {",
      "1039:                         splitMsg = wrkMsg;",
      "1040:                         splitPos = splitMsg.size();",
      "1041:                         QTextBoundaryFinder graphemeQtbf(QTextBoundaryFinder::Grapheme, splitMsg);",
      "1042:                         graphemeQtbf.setPosition(initialSplitMsgEnc[1].size() - initialOverrun);",
      "1043:                         qtbf = graphemeQtbf;",
      "1044:                     }",
      "1045:                     else {",
      "1048:                         qWarning() << \"Unexpected failure to split message!\";",
      "1049:                         return msgsToSend;",
      "1050:                     }",
      "1051:                 }",
      "1052:             }",
      "1056:             wrkMsg.remove(0, splitPos);",
      "1057:             msgsToSend.append(splitMsgEnc);",
      "1058:         }",
      "1059:         else{",
      "1062:             wrkMsg.remove(0, splitPos);",
      "1063:             msgsToSend.append(initialSplitMsgEnc);",
      "1064:         }",
      "1065:     } while (wrkMsg.size() > 0);",
      "1067:     return msgsToSend;",
      "1068: }",
      "",
      "---------------"
    ],
    "src/core/corenetwork.h||src/core/corenetwork.h": [
      "File: src/core/corenetwork.h -> src/core/corenetwork.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "41: #include \"coresession.h\"",
      "43: class CoreIdentity;",
      "44: class CoreUserInputHandler;",
      "45: class CoreIgnoreListManager;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "43: #include <functional>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "93:     inline quint16 localPort() const { return socket.localPort(); }",
      "94:     inline quint16 peerPort() const { return socket.peerPort(); }",
      "96: public slots:",
      "97:     virtual void setMyNick(const QString &mynick);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "98:     QList<QList<QByteArray>> splitMessage(const QString &cmd, const QString &message, std::function<QList<QByteArray>(QString &)> cmdGenerator);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "112:     void userInput(BufferInfo bufferInfo, QString msg);",
      "113:     void putRawLine(QByteArray input);",
      "114:     void putCmd(const QString &cmd, const QList<QByteArray> &params, const QByteArray &prefix = QByteArray());",
      "116:     void setChannelJoined(const QString &channel);",
      "117:     void setChannelParted(const QString &channel);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "119:     void putCmd(const QString &cmd, const QList<QList<QByteArray>> &params, const QByteArray &prefix = QByteArray());",
      "",
      "---------------"
    ],
    "src/core/coreuserinputhandler.cpp||src/core/coreuserinputhandler.cpp": [
      "File: src/core/coreuserinputhandler.cpp -> src/core/coreuserinputhandler.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "473:         return;",
      "475:     QString target = msg.section(' ', 0, 0);",
      "478: #ifdef HAVE_QCA2",
      "480: #else",
      "482: #endif",
      "483: }",
      "",
      "[Removed Lines]",
      "476:     QByteArray encMsg = userEncode(target, msg.section(' ', 1));",
      "479:     putPrivmsg(serverEncode(target), encMsg, network()->cipher(target));",
      "481:     putPrivmsg(serverEncode(target), encMsg);",
      "",
      "[Added Lines]",
      "476:     QString msgSection = msg.section(' ', 1);",
      "478:     std::function<QByteArray(const QString &, const QString &)> encodeFunc = [this] (const QString &target, const QString &message) -> QByteArray {",
      "479:         return userEncode(target, message);",
      "480:     };",
      "483:     putPrivmsg(target, msgSection, encodeFunc, network()->cipher(target));",
      "485:     putPrivmsg(target, msgSection, encodeFunc);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "594:     if (bufferInfo.bufferName().isEmpty() || !bufferInfo.acceptsRegularMessages())",
      "595:         return;  // server buffer",
      "598: #ifdef HAVE_QCA2",
      "600: #else",
      "602: #endif",
      "603:     emit displayMsg(Message::Plain, bufferInfo.type(), bufferInfo.bufferName(), msg, network()->myNick(), Message::Self);",
      "604: }",
      "",
      "[Removed Lines]",
      "597:     QByteArray encMsg = channelEncode(bufferInfo.bufferName(), msg);",
      "599:     putPrivmsg(serverEncode(bufferInfo.bufferName()), encMsg, network()->cipher(bufferInfo.bufferName()));",
      "601:     putPrivmsg(serverEncode(bufferInfo.bufferName()), encMsg);",
      "",
      "[Added Lines]",
      "601:     std::function<QByteArray(const QString &, const QString &)> encodeFunc = [this] (const QString &target, const QString &message) -> QByteArray {",
      "602:         return channelEncode(target, message);",
      "603:     };",
      "606:     putPrivmsg(bufferInfo.bufferName(), msg, encodeFunc, network()->cipher(bufferInfo.bufferName()));",
      "608:     putPrivmsg(bufferInfo.bufferName(), msg, encodeFunc);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "763: }",
      "767: {",
      "783: #ifdef HAVE_QCA2",
      "786:         }",
      "787: #endif",
      "816: }",
      "",
      "[Removed Lines]",
      "766: void CoreUserInputHandler::putPrivmsg(const QByteArray &target, const QByteArray &message, Cipher *cipher)",
      "775:     static const char *cmd = \"PRIVMSG\";",
      "776:     static const char *splitter = \" .,-!?\";",
      "778:     int maxSplitPos = message.count();",
      "779:     int splitPos = maxSplitPos;",
      "780:     forever {",
      "781:         QByteArray crypted = message.left(splitPos);",
      "782:         bool isEncrypted = false;",
      "784:         if (cipher && !cipher->key().isEmpty() && !message.isEmpty()) {",
      "785:             isEncrypted = cipher->encrypt(crypted);",
      "788:         int overrun = lastParamOverrun(cmd, QList<QByteArray>() << target << crypted);",
      "789:         if (overrun) {",
      "791:             if (!isEncrypted)",
      "792:                 maxSplitPos = message.count() - overrun;",
      "794:             splitPos = -1;",
      "795:             for (const char *splitChar = splitter; *splitChar != 0; splitChar++) {",
      "796:                 splitPos = qMax(splitPos, message.lastIndexOf(*splitChar, maxSplitPos) + 1); // keep split char on old line",
      "797:             }",
      "798:             if (splitPos <= 0 || splitPos > maxSplitPos)",
      "799:                 splitPos = maxSplitPos;",
      "801:             maxSplitPos = splitPos - 1;",
      "802:             if (maxSplitPos <= 0) { // this should never happen, but who knows...",
      "803:                 qWarning() << tr(\"[Error] Could not encrypt your message: %1\").arg(message.data());",
      "804:                 return;",
      "805:             }",
      "806:             continue; // we never come back here for !encrypted!",
      "807:         }",
      "810:         putCmd(cmd, QList<QByteArray>() << target << crypted);",
      "811:         if (splitPos < message.count())",
      "812:             putPrivmsg(target, message.mid(splitPos), cipher);",
      "814:         return;",
      "815:     }",
      "",
      "[Added Lines]",
      "773: void CoreUserInputHandler::putPrivmsg(const QString &target, const QString &message, std::function<QByteArray(const QString &, const QString &)> encodeFunc, Cipher *cipher)",
      "775:     QString cmd(\"PRIVMSG\");",
      "776:     QByteArray targetEnc = serverEncode(target);",
      "778:     std::function<QList<QByteArray>(QString &)> cmdGenerator = [&] (QString &splitMsg) -> QList<QByteArray> {",
      "779:         QByteArray splitMsgEnc = encodeFunc(target, splitMsg);",
      "782:         if (cipher && !cipher->key().isEmpty() && !splitMsg.isEmpty()) {",
      "783:             cipher->encrypt(splitMsgEnc);",
      "786:         return QList<QByteArray>() << targetEnc << splitMsgEnc;",
      "787:     };",
      "789:     putCmd(cmd, network()->splitMessage(cmd, message, cmdGenerator));",
      "",
      "---------------"
    ],
    "src/core/coreuserinputhandler.h||src/core/coreuserinputhandler.h": [
      "File: src/core/coreuserinputhandler.h -> src/core/coreuserinputhandler.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "88: private:",
      "89:     void doMode(const BufferInfo& bufferInfo, const QChar &addOrRemove, const QChar &mode, const QString &nickList);",
      "90:     void banOrUnban(const BufferInfo &bufferInfo, const QString &text, bool ban);",
      "93: #ifdef HAVE_QCA2",
      "94:     QByteArray encrypt(const QString &target, const QByteArray &message, bool *didEncrypt = 0) const;",
      "",
      "[Removed Lines]",
      "91:     void putPrivmsg(const QByteArray &target, const QByteArray &message, Cipher *cipher = 0);",
      "",
      "[Added Lines]",
      "91:     void putPrivmsg(const QString &target, const QString &message, std::function<QByteArray(const QString &, const QString &)> encodeFunc, Cipher *cipher = 0);",
      "",
      "---------------"
    ],
    "src/core/ctcpparser.cpp||src/core/ctcpparser.cpp": [
      "File: src/core/ctcpparser.cpp -> src/core/ctcpparser.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "313: void CtcpParser::query(CoreNetwork *net, const QString &bufname, const QString &ctcpTag, const QString &message)",
      "314: {",
      "338: }",
      "",
      "[Removed Lines]",
      "315:     QList<QByteArray> params;",
      "316:     params << net->serverEncode(bufname) << lowLevelQuote(pack(net->serverEncode(ctcpTag), net->userEncode(bufname, message)));",
      "318:     static const char *splitter = \" .,-!?\";",
      "319:     int maxSplitPos = message.count();",
      "320:     int splitPos = maxSplitPos;",
      "322:     int overrun = net->userInputHandler()->lastParamOverrun(\"PRIVMSG\", params);",
      "323:     if (overrun) {",
      "324:         maxSplitPos = message.count() - overrun -2;",
      "325:         splitPos = -1;",
      "326:         for (const char *splitChar = splitter; *splitChar != 0; splitChar++) {",
      "327:             splitPos = qMax(splitPos, message.lastIndexOf(*splitChar, maxSplitPos) + 1); // keep split char on old line",
      "328:         }",
      "329:         if (splitPos <= 0 || splitPos > maxSplitPos)",
      "330:             splitPos = maxSplitPos;",
      "332:         params = params.mid(0, 1) <<  lowLevelQuote(pack(net->serverEncode(ctcpTag), net->userEncode(bufname, message.left(splitPos))));",
      "333:     }",
      "334:     net->putCmd(\"PRIVMSG\", params);",
      "336:     if (splitPos < message.count())",
      "337:         query(net, bufname, ctcpTag, message.mid(splitPos));",
      "",
      "[Added Lines]",
      "315:     QString cmd(\"PRIVMSG\");",
      "317:     std::function<QList<QByteArray>(QString &)> cmdGenerator = [&] (QString &splitMsg) -> QList<QByteArray> {",
      "318:         return QList<QByteArray>() << net->serverEncode(bufname) << lowLevelQuote(pack(net->serverEncode(ctcpTag), net->userEncode(bufname, splitMsg)));",
      "319:     };",
      "321:     net->putCmd(cmd, net->splitMessage(cmd, message, cmdGenerator));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "24ab54b5e571ca484f06e3085e70e2a9a0d4aa0e",
      "candidate_info": {
        "commit_hash": "24ab54b5e571ca484f06e3085e70e2a9a0d4aa0e",
        "repo": "quassel/quassel",
        "commit_url": "https://github.com/quassel/quassel/commit/24ab54b5e571ca484f06e3085e70e2a9a0d4aa0e",
        "files": [
          "src/core/ctcpparser.cpp"
        ],
        "message": "Updated Encode to not run additional times.\n\nFixed the issue of the message being encoded twice unnessesarily on\nactions that did not require splitting.",
        "before_after_code_files": [
          "src/core/ctcpparser.cpp||src/core/ctcpparser.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/core/ctcpparser.cpp||src/core/ctcpparser.cpp"
          ],
          "candidate": [
            "src/core/ctcpparser.cpp||src/core/ctcpparser.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/core/ctcpparser.cpp||src/core/ctcpparser.cpp": [
          "File: src/core/ctcpparser.cpp -> src/core/ctcpparser.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "329:         }",
          "330:         if (splitPos <= 0 || splitPos > maxSplitPos)",
          "331:             splitPos = maxSplitPos;",
          "332:     }",
          "336:     if (splitPos < message.count())",
          "337:         query(net, bufname, ctcpTag, message.mid(splitPos));",
          "",
          "[Removed Lines]",
          "333:     newparams << net->serverEncode(bufname) << lowLevelQuote(pack(net->serverEncode(ctcpTag), net->userEncode(bufname, message.left(splitPos))));",
          "334:     net->putCmd(\"PRIVMSG\", newparams);",
          "",
          "[Added Lines]",
          "332:      newparams << net->serverEncode(bufname) << lowLevelQuote(pack(net->serverEncode(ctcpTag), net->userEncode(bufname, message.left(splitPos))));",
          "333:         params = newparams;",
          "335:     net->putCmd(\"PRIVMSG\", params);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "40601ae070413b727a68e35e5b8c619176c661b1",
      "candidate_info": {
        "commit_hash": "40601ae070413b727a68e35e5b8c619176c661b1",
        "repo": "quassel/quassel",
        "commit_url": "https://github.com/quassel/quassel/commit/40601ae070413b727a68e35e5b8c619176c661b1",
        "files": [
          "src/client/networkmodel.cpp",
          "src/client/treemodel.cpp",
          "src/common/cliparser.cpp",
          "src/common/eventmanager.cpp",
          "src/common/ircchannel.cpp",
          "src/common/ircuser.cpp",
          "src/common/network.cpp",
          "src/common/syncableobject.cpp",
          "src/common/util.cpp",
          "src/core/abstractsqlstorage.cpp",
          "src/core/coreircchannel.cpp",
          "src/core/corenetwork.cpp",
          "src/core/coresessioneventprocessor.cpp",
          "src/core/coreuserinputhandler.cpp",
          "src/core/oidentdconfiggenerator.cpp",
          "src/core/postgresqlstorage.cpp",
          "src/core/sqlitestorage.cpp",
          "src/uisupport/uistyle.cpp"
        ],
        "message": "Replace {from,to}Ascii with {from,to}Latin1\n\nThese have been deprecated since Qt 5.0, and rather than use\n{from,to}Local8Bit I've decided to match the original functionality.",
        "before_after_code_files": [
          "src/client/networkmodel.cpp||src/client/networkmodel.cpp",
          "src/client/treemodel.cpp||src/client/treemodel.cpp",
          "src/common/cliparser.cpp||src/common/cliparser.cpp",
          "src/common/eventmanager.cpp||src/common/eventmanager.cpp",
          "src/common/ircchannel.cpp||src/common/ircchannel.cpp",
          "src/common/ircuser.cpp||src/common/ircuser.cpp",
          "src/common/network.cpp||src/common/network.cpp",
          "src/common/syncableobject.cpp||src/common/syncableobject.cpp",
          "src/common/util.cpp||src/common/util.cpp",
          "src/core/abstractsqlstorage.cpp||src/core/abstractsqlstorage.cpp",
          "src/core/coreircchannel.cpp||src/core/coreircchannel.cpp",
          "src/core/corenetwork.cpp||src/core/corenetwork.cpp",
          "src/core/coresessioneventprocessor.cpp||src/core/coresessioneventprocessor.cpp",
          "src/core/coreuserinputhandler.cpp||src/core/coreuserinputhandler.cpp",
          "src/core/oidentdconfiggenerator.cpp||src/core/oidentdconfiggenerator.cpp",
          "src/core/postgresqlstorage.cpp||src/core/postgresqlstorage.cpp",
          "src/core/sqlitestorage.cpp||src/core/sqlitestorage.cpp",
          "src/uisupport/uistyle.cpp||src/uisupport/uistyle.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/core/corenetwork.cpp||src/core/corenetwork.cpp",
            "src/core/coreuserinputhandler.cpp||src/core/coreuserinputhandler.cpp"
          ],
          "candidate": [
            "src/core/corenetwork.cpp||src/core/corenetwork.cpp",
            "src/core/coreuserinputhandler.cpp||src/core/coreuserinputhandler.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/client/networkmodel.cpp||src/client/networkmodel.cpp": [
          "File: src/client/networkmodel.cpp -> src/client/networkmodel.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1102:     if (!mimeContainsBufferList(mimeData))",
          "1103:         return bufferList;",
          "1106:     NetworkId networkId;",
          "1107:     BufferId bufferUid;",
          "1108:     foreach(QString rawBuffer, rawBufferList) {",
          "",
          "[Removed Lines]",
          "1105:     QStringList rawBufferList = QString::fromAscii(mimeData->data(\"application/Quassel/BufferItemList\")).split(\",\");",
          "",
          "[Added Lines]",
          "1105:     QStringList rawBufferList = QString::fromLatin1(mimeData->data(\"application/Quassel/BufferItemList\")).split(\",\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1130:             bufferlist << bufferid;",
          "1131:     }",
          "1135:     return mimeData;",
          "1136: }",
          "",
          "[Removed Lines]",
          "1133:     mimeData->setData(\"application/Quassel/BufferItemList\", bufferlist.join(\",\").toAscii());",
          "",
          "[Added Lines]",
          "1133:     mimeData->setData(\"application/Quassel/BufferItemList\", bufferlist.join(\",\").toLatin1());",
          "",
          "---------------"
        ],
        "src/client/treemodel.cpp||src/client/treemodel.cpp": [
          "File: src/client/treemodel.cpp -> src/client/treemodel.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "304:         return toolTip(column);",
          "305:     case Qt::DisplayRole:",
          "306:     case TreeModel::SortRole: // fallthrough, since SortRole should default to DisplayRole",
          "308:     default:",
          "309:         return QVariant();",
          "310:     }",
          "",
          "[Removed Lines]",
          "307:         return property(_propertyOrder[column].toAscii());",
          "",
          "[Added Lines]",
          "307:         return property(_propertyOrder[column].toLatin1());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "317:         return false;",
          "319:     emit dataChanged(column);",
          "321: }",
          "",
          "[Removed Lines]",
          "320:     return setProperty(_propertyOrder[column].toAscii(), value);",
          "",
          "[Added Lines]",
          "320:     return setProperty(_propertyOrder[column].toLatin1(), value);",
          "",
          "---------------"
        ],
        "src/common/cliparser.cpp||src/common/cliparser.cpp": [
          "File: src/common/cliparser.cpp -> src/common/cliparser.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:             if (nextArg == argsRaw.constEnd() || nextArg->startsWith(\"-\")) {",
          "131:                     if (!addShortArg(CliParserArg::CliArgSwitch, name)) return false;",
          "132:                 }",
          "133:             }",
          "",
          "[Removed Lines]",
          "129:                 for (int i = 0; i < currentArg->mid(1).toAscii().size(); i++) {",
          "130:                     name = currentArg->mid(1).toAscii().at(i);",
          "",
          "[Added Lines]",
          "129:                 for (int i = 0; i < currentArg->mid(1).toLatin1().size(); i++) {",
          "130:                     name = currentArg->mid(1).toLatin1().at(i);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "135:             else {",
          "139:                     qWarning() << \"Warning: Shortoptions may not be combined with other shortoptions or switches\";",
          "140:                     return false;",
          "141:                 }",
          "",
          "[Removed Lines]",
          "138:                 if (currentArg->mid(1).toAscii().size() > 1) {",
          "",
          "[Added Lines]",
          "138:                 if (currentArg->mid(1).toLatin1().size() > 1) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "146:                     skipNext = true;",
          "147:                 }",
          "148:                 else value = currentArg->toLocal8Bit();",
          "151:                 if (skipNext) currentArg++;",
          "152:                 if (!addShortArg(CliParserArg::CliArgOption, name, value)) return false;",
          "",
          "[Removed Lines]",
          "149:                 name = currentArg->mid(1).toAscii().at(0);",
          "",
          "[Added Lines]",
          "149:                 name = currentArg->mid(1).toLatin1().at(0);",
          "",
          "---------------"
        ],
        "src/common/eventmanager.cpp||src/common/eventmanager.cpp": [
          "File: src/common/eventmanager.cpp -> src/common/eventmanager.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "126:         int num = methodSignature.right(3).toUInt();",
          "127:         if (num > 0) {",
          "128:             QString numericSig = methodSignature.left(methodSignature.length() - 3) + \"Numeric\";",
          "130:             if (eventType < 0) {",
          "131:                 qWarning() << Q_FUNC_INFO << \"Could not find EventType\" << numericSig << \"for handling\" << methodSignature;",
          "132:                 return -1;",
          "",
          "[Removed Lines]",
          "129:             eventType = eventEnum().keyToValue(numericSig.toAscii());",
          "",
          "[Added Lines]",
          "129:             eventType = eventEnum().keyToValue(numericSig.toLatin1());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "136:     }",
          "138:     if (eventType < 0)",
          "140:     if (eventType < 0) {",
          "141:         qWarning() << Q_FUNC_INFO << \"Could not find EventType\" << methodSignature;",
          "142:         return -1;",
          "",
          "[Removed Lines]",
          "139:         eventType = eventEnum().keyToValue(methodSignature.toAscii());",
          "",
          "[Added Lines]",
          "139:         eventType = eventEnum().keyToValue(methodSignature.toLatin1());",
          "",
          "---------------"
        ],
        "src/common/ircchannel.cpp||src/common/ircchannel.cpp": [
          "File: src/common/ircchannel.cpp -> src/common/ircchannel.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "98: void IrcChannel::setCodecForEncoding(const QString &name)",
          "99: {",
          "101: }",
          "",
          "[Removed Lines]",
          "100:     setCodecForEncoding(QTextCodec::codecForName(name.toAscii()));",
          "",
          "[Added Lines]",
          "100:     setCodecForEncoding(QTextCodec::codecForName(name.toLatin1()));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "110: void IrcChannel::setCodecForDecoding(const QString &name)",
          "111: {",
          "113: }",
          "",
          "[Removed Lines]",
          "112:     setCodecForDecoding(QTextCodec::codecForName(name.toAscii()));",
          "",
          "[Added Lines]",
          "112:     setCodecForDecoding(QTextCodec::codecForName(name.toLatin1()));",
          "",
          "---------------"
        ],
        "src/common/ircuser.cpp||src/common/ircuser.cpp": [
          "File: src/common/ircuser.cpp -> src/common/ircuser.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "88: void IrcUser::setCodecForEncoding(const QString &name)",
          "89: {",
          "91: }",
          "",
          "[Removed Lines]",
          "90:     setCodecForEncoding(QTextCodec::codecForName(name.toAscii()));",
          "",
          "[Added Lines]",
          "90:     setCodecForEncoding(QTextCodec::codecForName(name.toLatin1()));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100: void IrcUser::setCodecForDecoding(const QString &name)",
          "101: {",
          "103: }",
          "",
          "[Removed Lines]",
          "102:     setCodecForDecoding(QTextCodec::codecForName(name.toAscii()));",
          "",
          "[Added Lines]",
          "102:     setCodecForDecoding(QTextCodec::codecForName(name.toLatin1()));",
          "",
          "---------------"
        ],
        "src/common/network.cpp||src/common/network.cpp": [
          "File: src/common/network.cpp -> src/common/network.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "455:     if (_defaultCodecForEncoding) {",
          "456:         return _defaultCodecForEncoding->fromUnicode(string);",
          "457:     }",
          "459: }",
          "",
          "[Removed Lines]",
          "458:     return string.toAscii();",
          "",
          "[Added Lines]",
          "458:     return string.toLatin1();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "476:     if (_defaultCodecForServer) {",
          "477:         return _defaultCodecForServer->fromUnicode(string);",
          "478:     }",
          "480: }",
          "",
          "[Removed Lines]",
          "479:     return string.toAscii();",
          "",
          "[Added Lines]",
          "479:     return string.toLatin1();",
          "",
          "---------------"
        ],
        "src/common/syncableobject.cpp||src/common/syncableobject.cpp": [
          "File: src/common/syncableobject.cpp -> src/common/syncableobject.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:         QVariant value(variantType, (const void *)0);",
          "126:         QGenericReturnArgument genericvalue = QGenericReturnArgument(method.typeName(), value.data());",
          "129:         properties[SignalProxy::ExtendedMetaObject::methodBaseName(method)] = value;",
          "130:     }",
          "",
          "[Removed Lines]",
          "127:         QMetaObject::invokeMethod(this, methodname.toAscii(), genericvalue);",
          "",
          "[Added Lines]",
          "127:         QMetaObject::invokeMethod(this, methodname.toLatin1(), genericvalue);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "145:             continue;",
          "146:         }",
          "150:         if (propertyIndex == -1 || !meta->property(propertyIndex).isWritable())",
          "151:             setInitValue(propName, iterator.value());",
          "152:         else",
          "155:         iterator++;",
          "156:     }",
          "",
          "[Removed Lines]",
          "148:         int propertyIndex = meta->indexOfProperty(propName.toAscii());",
          "153:             setProperty(propName.toAscii(), iterator.value());",
          "",
          "[Added Lines]",
          "148:         int propertyIndex = meta->indexOfProperty(propName.toLatin1());",
          "153:             setProperty(propName.toLatin1(), iterator.value());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "163:     handlername[7] = handlername[7].toUpper();",
          "165:     QString methodSignature = QString(\"%1(%2)\").arg(handlername).arg(value.typeName());",
          "167:     if (methodIdx <  0) {",
          "169:         methodIdx = metaObject()->indexOfMethod(normedMethodName.constData());",
          "170:     }",
          "171:     if (methodIdx < 0) {",
          "",
          "[Removed Lines]",
          "166:     int methodIdx = metaObject()->indexOfMethod(methodSignature.toAscii().constData());",
          "168:         QByteArray normedMethodName = QMetaObject::normalizedSignature(methodSignature.toAscii().constData());",
          "",
          "[Added Lines]",
          "166:     int methodIdx = metaObject()->indexOfMethod(methodSignature.toLatin1().constData());",
          "168:         QByteArray normedMethodName = QMetaObject::normalizedSignature(methodSignature.toLatin1().constData());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "173:     }",
          "175:     QGenericArgument param(value.typeName(), value.constData());",
          "177: }",
          "",
          "[Removed Lines]",
          "176:     return QMetaObject::invokeMethod(this, handlername.toAscii(), param);",
          "",
          "[Added Lines]",
          "176:     return QMetaObject::invokeMethod(this, handlername.toLatin1(), param);",
          "",
          "---------------"
        ],
        "src/common/util.cpp||src/common/util.cpp": [
          "File: src/common/util.cpp -> src/common/util.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:         return s;",
          "123:     }",
          "126:     return codec->toUnicode(input);",
          "127: }",
          "",
          "[Removed Lines]",
          "125:     if (!codec) return QString::fromAscii(input);",
          "",
          "[Added Lines]",
          "125:     if (!codec) return QString::fromLatin1(input);",
          "",
          "---------------"
        ],
        "src/core/abstractsqlstorage.cpp||src/core/abstractsqlstorage.cpp": [
          "File: src/core/abstractsqlstorage.cpp -> src/core/abstractsqlstorage.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "409:     qWarning() << \"  bound Values:\";",
          "410:     QList<QVariant> list = boundValues();",
          "411:     for (int i = 0; i < list.size(); ++i)",
          "413:     qWarning() << \"  Error Number:\"   << lastError().number();",
          "414:     qWarning() << \"  Error Message:\"   << lastError().text();",
          "415: }",
          "",
          "[Removed Lines]",
          "412:         qWarning() << i << \": \" << list.at(i).toString().toAscii().data();",
          "",
          "[Added Lines]",
          "412:         qWarning() << i << \": \" << list.at(i).toString().toLatin1().data();",
          "",
          "---------------"
        ],
        "src/core/coreircchannel.cpp||src/core/coreircchannel.cpp": [
          "File: src/core/coreircchannel.cpp -> src/core/coreircchannel.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:         if (topic().isEmpty())",
          "62:             return;",
          "65:         setTopic(decodeString(decrypted));",
          "66:     }",
          "67: }",
          "",
          "[Removed Lines]",
          "64:         QByteArray decrypted = cipher()->decryptTopic(topic().toAscii());",
          "",
          "[Added Lines]",
          "64:         QByteArray decrypted = cipher()->decryptTopic(topic().toLatin1());",
          "",
          "---------------"
        ],
        "src/core/corenetwork.cpp||src/core/corenetwork.cpp": [
          "File: src/core/corenetwork.cpp -> src/core/corenetwork.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "269:     if (!prefix.isEmpty())",
          "270:         msg += \":\" + prefix + \" \";",
          "273:     for (int i = 0; i < params.size(); i++) {",
          "274:         msg += \" \";",
          "",
          "[Removed Lines]",
          "271:     msg += cmd.toUpper().toAscii();",
          "",
          "[Added Lines]",
          "271:     msg += cmd.toUpper().toLatin1();",
          "",
          "---------------"
        ],
        "src/core/coresessioneventprocessor.cpp||src/core/coresessioneventprocessor.cpp": [
          "File: src/core/coresessioneventprocessor.cpp -> src/core/coresessioneventprocessor.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:         construct.append(net->saslAccount());",
          "128:         construct.append(QChar(QChar::Null));",
          "129:         construct.append(net->saslPassword());",
          "131:         saslData.prepend(\"AUTHENTICATE \");",
          "132:         net->putRawLine(saslData);",
          "133: #ifdef HAVE_SSL",
          "",
          "[Removed Lines]",
          "130:         QByteArray saslData = QByteArray(construct.toAscii().toBase64());",
          "",
          "[Added Lines]",
          "130:         QByteArray saslData = QByteArray(construct.toLatin1().toBase64());",
          "",
          "---------------"
        ],
        "src/core/coreuserinputhandler.cpp||src/core/coreuserinputhandler.cpp": [
          "File: src/core/coreuserinputhandler.cpp -> src/core/coreuserinputhandler.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "821:     IrcUser *me = network()->me();",
          "824:     if (me)",
          "827:     if (!params.isEmpty()) {",
          "828:         for (int i = 0; i < params.count() - 1; i++) {",
          "",
          "[Removed Lines]",
          "822:     int maxLen = 480 - cmd.toAscii().count(); // educated guess in case we don't know us (yet?)",
          "825:         maxLen = 512 - serverEncode(me->nick()).count() - serverEncode(me->user()).count() - serverEncode(me->host()).count() - cmd.toAscii().count() - 6;",
          "",
          "[Added Lines]",
          "822:     int maxLen = 480 - cmd.toLatin1().count(); // educated guess in case we don't know us (yet?)",
          "825:         maxLen = 512 - serverEncode(me->nick()).count() - serverEncode(me->user()).count() - serverEncode(me->host()).count() - cmd.toLatin1().count() - 6;",
          "",
          "---------------"
        ],
        "src/core/oidentdconfiggenerator.cpp||src/core/oidentdconfiggenerator.cpp": [
          "File: src/core/oidentdconfiggenerator.cpp -> src/core/oidentdconfiggenerator.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:     Q_UNUSED(localAddress) Q_UNUSED(peerAddress) Q_UNUSED(peerPort)",
          "72:     QString ident = identity->ident();",
          "76:     bool ret = writeConfig();",
          "",
          "[Removed Lines]",
          "74:     _quasselConfig.append(_quasselStanzaTemplate.arg(localPort).arg(ident).arg(_configTag).toAscii());",
          "",
          "[Added Lines]",
          "74:     _quasselConfig.append(_quasselStanzaTemplate.arg(localPort).arg(ident).arg(_configTag).toLatin1());",
          "",
          "---------------"
        ],
        "src/core/postgresqlstorage.cpp||src/core/postgresqlstorage.cpp": [
          "File: src/core/postgresqlstorage.cpp -> src/core/postgresqlstorage.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "806:         net.networkId = networksQuery.value(0).toInt();",
          "807:         net.networkName = networksQuery.value(1).toString();",
          "808:         net.identity = networksQuery.value(2).toInt();",
          "812:         net.useRandomServer = networksQuery.value(6).toBool();",
          "813:         net.perform = networksQuery.value(7).toString().split(\"\\n\");",
          "814:         net.useAutoIdentify = networksQuery.value(8).toBool();",
          "",
          "[Removed Lines]",
          "809:         net.codecForServer = networksQuery.value(3).toString().toAscii();",
          "810:         net.codecForEncoding = networksQuery.value(4).toString().toAscii();",
          "811:         net.codecForDecoding = networksQuery.value(5).toString().toAscii();",
          "",
          "[Added Lines]",
          "809:         net.codecForServer = networksQuery.value(3).toString().toLatin1();",
          "810:         net.codecForEncoding = networksQuery.value(4).toString().toLatin1();",
          "811:         net.codecForDecoding = networksQuery.value(5).toString().toLatin1();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1023:             qCritical() << \"  bound Values:\";",
          "1024:             QList<QVariant> list = query.boundValues().values();",
          "1025:             for (int i = 0; i < list.size(); ++i)",
          "1027:             Q_ASSERT(false);",
          "1028:         }",
          "1029:         db.commit();",
          "",
          "[Removed Lines]",
          "1026:                 qCritical() << i << \":\" << list.at(i).toString().toAscii().data();",
          "",
          "[Added Lines]",
          "1026:                 qCritical() << i << \":\" << list.at(i).toString().toLatin1().data();",
          "",
          "---------------"
        ],
        "src/core/sqlitestorage.cpp||src/core/sqlitestorage.cpp": [
          "File: src/core/sqlitestorage.cpp -> src/core/sqlitestorage.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "828:                 net.networkId = networksQuery.value(0).toInt();",
          "829:                 net.networkName = networksQuery.value(1).toString();",
          "830:                 net.identity = networksQuery.value(2).toInt();",
          "834:                 net.useRandomServer = networksQuery.value(6).toInt() == 1 ? true : false;",
          "835:                 net.perform = networksQuery.value(7).toString().split(\"\\n\");",
          "836:                 net.useAutoIdentify = networksQuery.value(8).toInt() == 1 ? true : false;",
          "",
          "[Removed Lines]",
          "831:                 net.codecForServer = networksQuery.value(3).toString().toAscii();",
          "832:                 net.codecForEncoding = networksQuery.value(4).toString().toAscii();",
          "833:                 net.codecForDecoding = networksQuery.value(5).toString().toAscii();",
          "",
          "[Added Lines]",
          "831:                 net.codecForServer = networksQuery.value(3).toString().toLatin1();",
          "832:                 net.codecForEncoding = networksQuery.value(4).toString().toLatin1();",
          "833:                 net.codecForDecoding = networksQuery.value(5).toString().toLatin1();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1110:                 qCritical() << \"  bound Values:\";",
          "1111:                 QList<QVariant> list = query.boundValues().values();",
          "1112:                 for (int i = 0; i < list.size(); ++i)",
          "1114:                 Q_ASSERT(false);",
          "1115:             }",
          "1116:         }",
          "",
          "[Removed Lines]",
          "1113:                     qCritical() << i << \":\" << list.at(i).toString().toAscii().data();",
          "",
          "[Added Lines]",
          "1113:                     qCritical() << i << \":\" << list.at(i).toString().toLatin1().data();",
          "",
          "---------------"
        ],
        "src/uisupport/uistyle.cpp||src/uisupport/uistyle.cpp": [
          "File: src/uisupport/uistyle.cpp -> src/uisupport/uistyle.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "862:         if (chopCount < nick.size())",
          "863:             nick.chop(chopCount);",
          "864:     }",
          "866:     return (_senderHash = (hash & 0xf) + 1);",
          "867: }",
          "",
          "[Removed Lines]",
          "865:     quint16 hash = qChecksum(nick.toAscii().data(), nick.toAscii().size());",
          "",
          "[Added Lines]",
          "865:     quint16 hash = qChecksum(nick.toLatin1().data(), nick.toLatin1().size());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b2c1609b21f5a3e4eb4385ee7f89cefcc4042ec1",
      "candidate_info": {
        "commit_hash": "b2c1609b21f5a3e4eb4385ee7f89cefcc4042ec1",
        "repo": "quassel/quassel",
        "commit_url": "https://github.com/quassel/quassel/commit/b2c1609b21f5a3e4eb4385ee7f89cefcc4042ec1",
        "files": [
          "src/core/ctcpparser.cpp"
        ],
        "message": "Small optimization\n\nNo need to copy the list around.",
        "before_after_code_files": [
          "src/core/ctcpparser.cpp||src/core/ctcpparser.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/core/ctcpparser.cpp||src/core/ctcpparser.cpp"
          ],
          "candidate": [
            "src/core/ctcpparser.cpp||src/core/ctcpparser.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/core/ctcpparser.cpp||src/core/ctcpparser.cpp": [
          "File: src/core/ctcpparser.cpp -> src/core/ctcpparser.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "313: void CtcpParser::query(CoreNetwork *net, const QString &bufname, const QString &ctcpTag, const QString &message)",
          "314: {",
          "315:     QList<QByteArray> params;",
          "317:     params << net->serverEncode(bufname) << lowLevelQuote(pack(net->serverEncode(ctcpTag), net->userEncode(bufname, message)));",
          "319:     static const char *splitter = \" .,-!?\";",
          "",
          "[Removed Lines]",
          "316:     QList<QByteArray> newparams;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "329:         }",
          "330:         if (splitPos <= 0 || splitPos > maxSplitPos)",
          "331:             splitPos = maxSplitPos;",
          "334:     }",
          "335:     net->putCmd(\"PRIVMSG\", params);",
          "",
          "[Removed Lines]",
          "332:      newparams << net->serverEncode(bufname) << lowLevelQuote(pack(net->serverEncode(ctcpTag), net->userEncode(bufname, message.left(splitPos))));",
          "333:         params = newparams;",
          "",
          "[Added Lines]",
          "332:         params = params.mid(0, 1) <<  lowLevelQuote(pack(net->serverEncode(ctcpTag), net->userEncode(bufname, message.left(splitPos))));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "067450ab81038dc8a539d42630871d5a28ae2ddc",
      "candidate_info": {
        "commit_hash": "067450ab81038dc8a539d42630871d5a28ae2ddc",
        "repo": "quassel/quassel",
        "commit_url": "https://github.com/quassel/quassel/commit/067450ab81038dc8a539d42630871d5a28ae2ddc",
        "files": [
          "src/core/coreuserinputhandler.cpp",
          "src/core/coreuserinputhandler.h",
          "src/core/ctcpparser.cpp"
        ],
        "message": "Fixed CTCP Action Spliting\n\nPreviously /me would truncate if it was over the 512 character limit,\nforming a malformed action as the last \\01 character is cut off. Now the\nCTCP Action should autosplit the same way that overflow on normal\nmessages does. Additionally the characters !? were added to the\nsplittable characters list, bringing the new list to \" ,.-!?\"",
        "before_after_code_files": [
          "src/core/coreuserinputhandler.cpp||src/core/coreuserinputhandler.cpp",
          "src/core/coreuserinputhandler.h||src/core/coreuserinputhandler.h",
          "src/core/ctcpparser.cpp||src/core/ctcpparser.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/core/coreuserinputhandler.cpp||src/core/coreuserinputhandler.cpp",
            "src/core/coreuserinputhandler.h||src/core/coreuserinputhandler.h",
            "src/core/ctcpparser.cpp||src/core/ctcpparser.cpp"
          ],
          "candidate": [
            "src/core/coreuserinputhandler.cpp||src/core/coreuserinputhandler.cpp",
            "src/core/coreuserinputhandler.h||src/core/coreuserinputhandler.h",
            "src/core/ctcpparser.cpp||src/core/ctcpparser.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/core/coreuserinputhandler.cpp||src/core/coreuserinputhandler.cpp": [
          "File: src/core/coreuserinputhandler.cpp -> src/core/coreuserinputhandler.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "769:     static const char *cmd = \"PRIVMSG\";",
          "772:     int maxSplitPos = message.count();",
          "773:     int splitPos = maxSplitPos;",
          "",
          "[Removed Lines]",
          "770:     static const char *splitter = \" .,-\";",
          "",
          "[Added Lines]",
          "770:     static const char *splitter = \" .,-!?\";",
          "",
          "---------------"
        ],
        "src/core/coreuserinputhandler.h||src/core/coreuserinputhandler.h": [
          "File: src/core/coreuserinputhandler.h -> src/core/coreuserinputhandler.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:     inline CoreNetwork *coreNetwork() const { return qobject_cast<CoreNetwork *>(parent()); }",
          "38:     void handleUserInput(const BufferInfo &bufferInfo, const QString &text);",
          "40: public slots:",
          "41:     void handleAway(const BufferInfo &bufferInfo, const QString &text);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:     int lastParamOverrun(const QString &cmd, const QList<QByteArray> &params);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87:     void doMode(const BufferInfo& bufferInfo, const QChar &addOrRemove, const QChar &mode, const QString &nickList);",
          "88:     void banOrUnban(const BufferInfo &bufferInfo, const QString &text, bool ban);",
          "89:     void putPrivmsg(const QByteArray &target, const QByteArray &message, Cipher *cipher = 0);",
          "92: #ifdef HAVE_QCA2",
          "93:     QByteArray encrypt(const QString &target, const QByteArray &message, bool *didEncrypt = 0) const;",
          "",
          "[Removed Lines]",
          "90:     int lastParamOverrun(const QString &cmd, const QList<QByteArray> &params);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/core/ctcpparser.cpp||src/core/ctcpparser.cpp": [
          "File: src/core/ctcpparser.cpp -> src/core/ctcpparser.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include \"coresession.h\"",
          "25: #include \"ctcpevent.h\"",
          "26: #include \"messageevent.h\"",
          "28: const QByteArray XDELIM = \"\\001\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #include \"coreuserinputhandler.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "312: void CtcpParser::query(CoreNetwork *net, const QString &bufname, const QString &ctcpTag, const QString &message)",
          "313: {",
          "314:     QList<QByteArray> params;",
          "315:     params << net->serverEncode(bufname) << lowLevelQuote(pack(net->serverEncode(ctcpTag), net->userEncode(bufname, message)));",
          "317: }",
          "",
          "[Removed Lines]",
          "316:     net->putCmd(\"PRIVMSG\", params);",
          "",
          "[Added Lines]",
          "316:     QList<QByteArray> newparams;",
          "319:     static const char *splitter = \" .,-!?\";",
          "320:     int maxSplitPos = message.count();",
          "321:     int splitPos = maxSplitPos;",
          "323:     int overrun = net->userInputHandler()->lastParamOverrun(\"PRIVMSG\", params);",
          "324:     if (overrun) {",
          "325:         maxSplitPos = message.count() - overrun -2;",
          "326:         splitPos = -1;",
          "327:         for (const char *splitChar = splitter; *splitChar != 0; splitChar++) {",
          "328:             splitPos = qMax(splitPos, message.lastIndexOf(*splitChar, maxSplitPos) + 1); // keep split char on old line",
          "329:         }",
          "330:         if (splitPos <= 0 || splitPos > maxSplitPos)",
          "331:             splitPos = maxSplitPos;",
          "332:     }",
          "333:     newparams << net->serverEncode(bufname) << lowLevelQuote(pack(net->serverEncode(ctcpTag), net->userEncode(bufname, message.left(splitPos))));",
          "334:     net->putCmd(\"PRIVMSG\", newparams);",
          "336:     if (splitPos < message.count())",
          "337:         query(net, bufname, ctcpTag, message.mid(splitPos));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5824da2a38a9b01067e6b484ce4f8395859a44cb",
      "candidate_info": {
        "commit_hash": "5824da2a38a9b01067e6b484ce4f8395859a44cb",
        "repo": "quassel/quassel",
        "commit_url": "https://github.com/quassel/quassel/commit/5824da2a38a9b01067e6b484ce4f8395859a44cb",
        "files": [
          "src/core/corebasichandler.cpp",
          "src/core/corebasichandler.h",
          "src/core/corenetwork.cpp",
          "src/core/corenetwork.h",
          "src/core/coreuserinputhandler.cpp",
          "src/core/coreuserinputhandler.h",
          "src/core/ctcpparser.cpp"
        ],
        "message": "Improve the message-splitting algorithm for PRIVMSG and CTCP\n\nThis introduces a new message splitting algorithm based on\nQTextBoundaryFinder.  It works by first starting with the entire\nmessage to be sent, encoding it, and checking to see if it is over\nthe maximum message length.  If it is, it uses QTBF to find the\nword boundary most immediately preceding the maximum length.  If no\nsuitable boundary can be found, it falls back to searching for\ngrapheme boundaries.  It repeats this process until the entire\nmessage has been sent.\n\nUnlike what it replaces, the new splitting code is not recursive\nand cannot cause stack overflows.  Additionally, if it is unable\nto split a string, it will give up gracefully and not crash the\ncore or cause a thread to run away.\n\nThis patch fixes two bugs.  The first is garbage characters caused\nby accidentally splitting the string in the middle of a multibyte\ncharacter.  Since the new code splits at a character level instead\nof a byte level, this will no longer be an issue.  The second is\nthe core crash caused by sending an overlength CTCP query (\"/me\")\ncontaining only multibyte characters.  This bug was caused by the\nold CTCP splitter using the byte index from lastParamOverrun() as\na character index for a QString.",
        "before_after_code_files": [
          "src/core/corebasichandler.cpp||src/core/corebasichandler.cpp",
          "src/core/corebasichandler.h||src/core/corebasichandler.h",
          "src/core/corenetwork.cpp||src/core/corenetwork.cpp",
          "src/core/corenetwork.h||src/core/corenetwork.h",
          "src/core/coreuserinputhandler.cpp||src/core/coreuserinputhandler.cpp",
          "src/core/coreuserinputhandler.h||src/core/coreuserinputhandler.h",
          "src/core/ctcpparser.cpp||src/core/ctcpparser.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/core/corebasichandler.cpp||src/core/corebasichandler.cpp",
            "src/core/corebasichandler.h||src/core/corebasichandler.h",
            "src/core/corenetwork.cpp||src/core/corenetwork.cpp",
            "src/core/corenetwork.h||src/core/corenetwork.h",
            "src/core/coreuserinputhandler.cpp||src/core/coreuserinputhandler.cpp",
            "src/core/coreuserinputhandler.h||src/core/coreuserinputhandler.h",
            "src/core/ctcpparser.cpp||src/core/ctcpparser.cpp"
          ],
          "candidate": [
            "src/core/corebasichandler.cpp||src/core/corebasichandler.cpp",
            "src/core/corebasichandler.h||src/core/corebasichandler.h",
            "src/core/corenetwork.cpp||src/core/corenetwork.cpp",
            "src/core/corenetwork.h||src/core/corenetwork.h",
            "src/core/coreuserinputhandler.cpp||src/core/coreuserinputhandler.cpp",
            "src/core/coreuserinputhandler.h||src/core/coreuserinputhandler.h",
            "src/core/ctcpparser.cpp||src/core/ctcpparser.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/core/corebasichandler.cpp||src/core/corebasichandler.cpp": [
          "File: src/core/corebasichandler.cpp -> src/core/corebasichandler.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:     connect(this, SIGNAL(putCmd(QString, const QList<QByteArray> &, const QByteArray &)),",
          "34:         network(), SLOT(putCmd(QString, const QList<QByteArray> &, const QByteArray &)));",
          "36:     connect(this, SIGNAL(putRawLine(const QByteArray &)),",
          "37:         network(), SLOT(putRawLine(const QByteArray &)));",
          "38: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:     connect(this, SIGNAL(putCmd(QString, const QList<QList<QByteArray>> &, const QByteArray &)),",
          "37:         network(), SLOT(putCmd(QString, const QList<QList<QByteArray>> &, const QByteArray &)));",
          "",
          "---------------"
        ],
        "src/core/corebasichandler.h||src/core/corebasichandler.h": [
          "File: src/core/corebasichandler.h -> src/core/corebasichandler.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: signals:",
          "56:     void displayMsg(Message::Type, BufferInfo::Type, const QString &target, const QString &text, const QString &sender = \"\", Message::Flags flags = Message::None);",
          "57:     void putCmd(const QString &cmd, const QList<QByteArray> &params, const QByteArray &prefix = QByteArray());",
          "58:     void putRawLine(const QByteArray &msg);",
          "60: protected:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58:     void putCmd(const QString &cmd, const QList<QList<QByteArray>> &params, const QByteArray &prefix = QByteArray());",
          "",
          "---------------"
        ],
        "src/core/corenetwork.cpp||src/core/corenetwork.cpp": [
          "File: src/core/corenetwork.cpp -> src/core/corenetwork.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "283: }",
          "286: void CoreNetwork::setChannelJoined(const QString &channel)",
          "287: {",
          "288:     _autoWhoQueue.prepend(channel.toLower()); // prepend so this new chan is the first to be checked",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "286: void CoreNetwork::putCmd(const QString &cmd, const QList<QList<QByteArray>> &params, const QByteArray &prefix)",
          "287: {",
          "288:     QListIterator<QList<QByteArray>> i(params);",
          "289:     while (i.hasNext()) {",
          "290:         QList<QByteArray> msg = i.next();",
          "291:         putCmd(cmd, msg, prefix);",
          "292:     }",
          "293: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "985:         }",
          "986:     }",
          "987: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1000: QList<QList<QByteArray>> CoreNetwork::splitMessage(const QString &cmd, const QString &message, std::function<QList<QByteArray>(QString &)> cmdGenerator)",
          "1001: {",
          "1002:     QString wrkMsg(message);",
          "1003:     QList<QList<QByteArray>> msgsToSend;",
          "1006:     do {",
          "1011:         int splitPos = wrkMsg.size();",
          "1012:         QList<QByteArray> initialSplitMsgEnc = cmdGenerator(wrkMsg);",
          "1013:         int initialOverrun = userInputHandler()->lastParamOverrun(cmd, initialSplitMsgEnc);",
          "1015:         if (initialOverrun) {",
          "1018:             QString splitMsg(wrkMsg);",
          "1019:             QTextBoundaryFinder qtbf(QTextBoundaryFinder::Word, splitMsg);",
          "1020:             qtbf.setPosition(initialSplitMsgEnc[1].size() - initialOverrun);",
          "1021:             QList<QByteArray> splitMsgEnc;",
          "1022:             int overrun = initialOverrun;",
          "1024:             while (overrun) {",
          "1025:                 splitPos = qtbf.toPreviousBoundary();",
          "1030:                 if (splitPos > 0) {",
          "1033:                     splitMsg = splitMsg.left(splitPos);",
          "1034:                     splitMsgEnc = cmdGenerator(splitMsg);",
          "1035:                     overrun = userInputHandler()->lastParamOverrun(cmd, splitMsgEnc);",
          "1036:                 }",
          "1037:                 else {",
          "1043:                     if (qtbf.type() == QTextBoundaryFinder::Word) {",
          "1044:                         splitMsg = wrkMsg;",
          "1045:                         splitPos = splitMsg.size();",
          "1046:                         QTextBoundaryFinder graphemeQtbf(QTextBoundaryFinder::Grapheme, splitMsg);",
          "1047:                         graphemeQtbf.setPosition(initialSplitMsgEnc[1].size() - initialOverrun);",
          "1048:                         qtbf = graphemeQtbf;",
          "1049:                     }",
          "1050:                     else {",
          "1053:                         qWarning() << \"Unexpected failure to split message!\";",
          "1054:                         return msgsToSend;",
          "1055:                     }",
          "1056:                 }",
          "1057:             }",
          "1061:             wrkMsg.remove(0, splitPos);",
          "1062:             msgsToSend.append(splitMsgEnc);",
          "1063:         }",
          "1064:         else{",
          "1067:             wrkMsg.remove(0, splitPos);",
          "1068:             msgsToSend.append(initialSplitMsgEnc);",
          "1069:         }",
          "1070:     } while (wrkMsg.size() > 0);",
          "1072:     return msgsToSend;",
          "1073: }",
          "",
          "---------------"
        ],
        "src/core/corenetwork.h||src/core/corenetwork.h": [
          "File: src/core/corenetwork.h -> src/core/corenetwork.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: #include \"coresession.h\"",
          "43: class CoreIdentity;",
          "44: class CoreUserInputHandler;",
          "45: class CoreIgnoreListManager;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: #include <functional>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:     inline quint16 localPort() const { return socket.localPort(); }",
          "94:     inline quint16 peerPort() const { return socket.peerPort(); }",
          "96: public slots:",
          "97:     virtual void setMyNick(const QString &mynick);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98:     QList<QList<QByteArray>> splitMessage(const QString &cmd, const QString &message, std::function<QList<QByteArray>(QString &)> cmdGenerator);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "112:     void userInput(BufferInfo bufferInfo, QString msg);",
          "113:     void putRawLine(QByteArray input);",
          "114:     void putCmd(const QString &cmd, const QList<QByteArray> &params, const QByteArray &prefix = QByteArray());",
          "116:     void setChannelJoined(const QString &channel);",
          "117:     void setChannelParted(const QString &channel);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "119:     void putCmd(const QString &cmd, const QList<QList<QByteArray>> &params, const QByteArray &prefix = QByteArray());",
          "",
          "---------------"
        ],
        "src/core/coreuserinputhandler.cpp||src/core/coreuserinputhandler.cpp": [
          "File: src/core/coreuserinputhandler.cpp -> src/core/coreuserinputhandler.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "477:         return;",
          "479:     QString target = msg.section(' ', 0, 0);",
          "482: #ifdef HAVE_QCA2",
          "484: #else",
          "486: #endif",
          "487: }",
          "",
          "[Removed Lines]",
          "480:     QByteArray encMsg = userEncode(target, msg.section(' ', 1));",
          "483:     putPrivmsg(serverEncode(target), encMsg, network()->cipher(target));",
          "485:     putPrivmsg(serverEncode(target), encMsg);",
          "",
          "[Added Lines]",
          "480:     QString msgSection = msg.section(' ', 1);",
          "482:     std::function<QByteArray(const QString &, const QString &)> encodeFunc = [this] (const QString &target, const QString &message) -> QByteArray {",
          "483:         return userEncode(target, message);",
          "484:     };",
          "487:     putPrivmsg(target, msgSection, encodeFunc, network()->cipher(target));",
          "489:     putPrivmsg(target, msgSection, encodeFunc);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "588:     if (bufferInfo.bufferName().isEmpty() || !bufferInfo.acceptsRegularMessages())",
          "589:         return;  // server buffer",
          "592: #ifdef HAVE_QCA2",
          "594: #else",
          "596: #endif",
          "597:     emit displayMsg(Message::Plain, bufferInfo.type(), bufferInfo.bufferName(), msg, network()->myNick(), Message::Self);",
          "598: }",
          "",
          "[Removed Lines]",
          "591:     QByteArray encMsg = channelEncode(bufferInfo.bufferName(), msg);",
          "593:     putPrivmsg(serverEncode(bufferInfo.bufferName()), encMsg, network()->cipher(bufferInfo.bufferName()));",
          "595:     putPrivmsg(serverEncode(bufferInfo.bufferName()), encMsg);",
          "",
          "[Added Lines]",
          "595:     std::function<QByteArray(const QString &, const QString &)> encodeFunc = [this] (const QString &target, const QString &message) -> QByteArray {",
          "596:         return channelEncode(target, message);",
          "597:     };",
          "600:     putPrivmsg(bufferInfo.bufferName(), msg, encodeFunc, network()->cipher(bufferInfo.bufferName()));",
          "602:     putPrivmsg(bufferInfo.bufferName(), msg, encodeFunc);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "757: }",
          "761: {",
          "777: #ifdef HAVE_QCA2",
          "780:         }",
          "781: #endif",
          "810: }",
          "",
          "[Removed Lines]",
          "760: void CoreUserInputHandler::putPrivmsg(const QByteArray &target, const QByteArray &message, Cipher *cipher)",
          "769:     static const char *cmd = \"PRIVMSG\";",
          "770:     static const char *splitter = \" .,-!?\";",
          "772:     int maxSplitPos = message.count();",
          "773:     int splitPos = maxSplitPos;",
          "774:     forever {",
          "775:         QByteArray crypted = message.left(splitPos);",
          "776:         bool isEncrypted = false;",
          "778:         if (cipher && !cipher->key().isEmpty() && !message.isEmpty()) {",
          "779:             isEncrypted = cipher->encrypt(crypted);",
          "782:         int overrun = lastParamOverrun(cmd, QList<QByteArray>() << target << crypted);",
          "783:         if (overrun) {",
          "785:             if (!isEncrypted)",
          "786:                 maxSplitPos = message.count() - overrun;",
          "788:             splitPos = -1;",
          "789:             for (const char *splitChar = splitter; *splitChar != 0; splitChar++) {",
          "790:                 splitPos = qMax(splitPos, message.lastIndexOf(*splitChar, maxSplitPos) + 1); // keep split char on old line",
          "791:             }",
          "792:             if (splitPos <= 0 || splitPos > maxSplitPos)",
          "793:                 splitPos = maxSplitPos;",
          "795:             maxSplitPos = splitPos - 1;",
          "796:             if (maxSplitPos <= 0) { // this should never happen, but who knows...",
          "797:                 qWarning() << tr(\"[Error] Could not encrypt your message: %1\").arg(message.data());",
          "798:                 return;",
          "799:             }",
          "800:             continue; // we never come back here for !encrypted!",
          "801:         }",
          "804:         putCmd(cmd, QList<QByteArray>() << target << crypted);",
          "805:         if (splitPos < message.count())",
          "806:             putPrivmsg(target, message.mid(splitPos), cipher);",
          "808:         return;",
          "809:     }",
          "",
          "[Added Lines]",
          "767: void CoreUserInputHandler::putPrivmsg(const QString &target, const QString &message, std::function<QByteArray(const QString &, const QString &)> encodeFunc, Cipher *cipher)",
          "769:     QString cmd(\"PRIVMSG\");",
          "770:     QByteArray targetEnc = serverEncode(target);",
          "772:     std::function<QList<QByteArray>(QString &)> cmdGenerator = [&] (QString &splitMsg) -> QList<QByteArray> {",
          "773:         QByteArray splitMsgEnc = encodeFunc(target, splitMsg);",
          "776:         if (cipher && !cipher->key().isEmpty() && !splitMsg.isEmpty()) {",
          "777:             cipher->encrypt(splitMsgEnc);",
          "780:         return QList<QByteArray>() << targetEnc << splitMsgEnc;",
          "781:     };",
          "783:     putCmd(cmd, network()->splitMessage(cmd, message, cmdGenerator));",
          "",
          "---------------"
        ],
        "src/core/coreuserinputhandler.h||src/core/coreuserinputhandler.h": [
          "File: src/core/coreuserinputhandler.h -> src/core/coreuserinputhandler.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "87: private:",
          "88:     void doMode(const BufferInfo& bufferInfo, const QChar &addOrRemove, const QChar &mode, const QString &nickList);",
          "89:     void banOrUnban(const BufferInfo &bufferInfo, const QString &text, bool ban);",
          "92: #ifdef HAVE_QCA2",
          "93:     QByteArray encrypt(const QString &target, const QByteArray &message, bool *didEncrypt = 0) const;",
          "",
          "[Removed Lines]",
          "90:     void putPrivmsg(const QByteArray &target, const QByteArray &message, Cipher *cipher = 0);",
          "",
          "[Added Lines]",
          "90:     void putPrivmsg(const QString &target, const QString &message, std::function<QByteArray(const QString &, const QString &)> encodeFunc, Cipher *cipher = 0);",
          "",
          "---------------"
        ],
        "src/core/ctcpparser.cpp||src/core/ctcpparser.cpp": [
          "File: src/core/ctcpparser.cpp -> src/core/ctcpparser.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "313: void CtcpParser::query(CoreNetwork *net, const QString &bufname, const QString &ctcpTag, const QString &message)",
          "314: {",
          "338: }",
          "",
          "[Removed Lines]",
          "315:     QList<QByteArray> params;",
          "316:     params << net->serverEncode(bufname) << lowLevelQuote(pack(net->serverEncode(ctcpTag), net->userEncode(bufname, message)));",
          "318:     static const char *splitter = \" .,-!?\";",
          "319:     int maxSplitPos = message.count();",
          "320:     int splitPos = maxSplitPos;",
          "322:     int overrun = net->userInputHandler()->lastParamOverrun(\"PRIVMSG\", params);",
          "323:     if (overrun) {",
          "324:         maxSplitPos = message.count() - overrun -2;",
          "325:         splitPos = -1;",
          "326:         for (const char *splitChar = splitter; *splitChar != 0; splitChar++) {",
          "327:             splitPos = qMax(splitPos, message.lastIndexOf(*splitChar, maxSplitPos) + 1); // keep split char on old line",
          "328:         }",
          "329:         if (splitPos <= 0 || splitPos > maxSplitPos)",
          "330:             splitPos = maxSplitPos;",
          "332:         params = params.mid(0, 1) <<  lowLevelQuote(pack(net->serverEncode(ctcpTag), net->userEncode(bufname, message.left(splitPos))));",
          "333:     }",
          "334:     net->putCmd(\"PRIVMSG\", params);",
          "336:     if (splitPos < message.count())",
          "337:         query(net, bufname, ctcpTag, message.mid(splitPos));",
          "",
          "[Added Lines]",
          "315:     QString cmd(\"PRIVMSG\");",
          "317:     std::function<QList<QByteArray>(QString &)> cmdGenerator = [&] (QString &splitMsg) -> QList<QByteArray> {",
          "318:         return QList<QByteArray>() << net->serverEncode(bufname) << lowLevelQuote(pack(net->serverEncode(ctcpTag), net->userEncode(bufname, splitMsg)));",
          "319:     };",
          "321:     net->putCmd(cmd, net->splitMessage(cmd, message, cmdGenerator));",
          "",
          "---------------"
        ]
      }
    }
  ]
}