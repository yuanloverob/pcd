{
  "cve_id": "CVE-2016-0724",
  "cve_desc": "The (1) core_enrol_get_course_enrolment_methods and (2) enrol_self_get_instance_info web services in Moodle through 2.6.11, 2.7.x before 2.7.12, 2.8.x before 2.8.10, 2.9.x before 2.9.4, and 3.0.x before 3.0.2 do not consider the moodle/course:viewhiddencourses capability, which allows remote authenticated users to obtain sensitive information via a web-service request.",
  "repo": "moodle/moodle",
  "patch_hash": "4323a973d57a41e19e039a850ad71ebcabae73c1",
  "patch_info": {
    "commit_hash": "4323a973d57a41e19e039a850ad71ebcabae73c1",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/4323a973d57a41e19e039a850ad71ebcabae73c1",
    "files": [
      "enrol/externallib.php",
      "enrol/self/externallib.php",
      "enrol/self/tests/externallib_test.php",
      "enrol/tests/externallib_test.php"
    ],
    "message": "MDL-52072 enrol: Fix course visibility checks in external functions",
    "before_after_code_files": [
      "enrol/externallib.php||enrol/externallib.php",
      "enrol/self/externallib.php||enrol/self/externallib.php",
      "enrol/self/tests/externallib_test.php||enrol/self/tests/externallib_test.php",
      "enrol/tests/externallib_test.php||enrol/tests/externallib_test.php"
    ]
  },
  "patch_diff": {
    "enrol/externallib.php||enrol/externallib.php": [
      "File: enrol/externallib.php -> enrol/externallib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "649:     public static function get_course_enrolment_methods($courseid) {",
      "651:         $params = self::validate_parameters(self::get_course_enrolment_methods_parameters(), array('courseid' => $courseid));",
      "657:         $result = array();",
      "658:         $enrolinstances = enrol_get_instances($params['courseid'], true);",
      "",
      "[Removed Lines]",
      "653:         $coursecontext = context_course::instance($params['courseid']);",
      "654:         $categorycontext = $coursecontext->get_parent_context();",
      "655:         self::validate_context($categorycontext);",
      "",
      "[Added Lines]",
      "651:         global $DB;",
      "656:         require_login(null, false, null, false, true);",
      "658:         $course = $DB->get_record('course', array('id' => $params['courseid']), '*', MUST_EXIST);",
      "659:         $context = context_course::instance($course->id);",
      "660:         if (!$course->visible and !has_capability('moodle/course:viewhiddencourses', $context)) {",
      "661:             throw new moodle_exception('coursehidden');",
      "662:         }",
      "",
      "---------------"
    ],
    "enrol/self/externallib.php||enrol/self/externallib.php": [
      "File: enrol/self/externallib.php -> enrol/self/externallib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "66:             throw new moodle_exception('invaliddata', 'error');",
      "67:         }",
      "69:         $enrolinstance = $DB->get_record('enrol', array('id' => $params['instanceid']), '*', MUST_EXIST);",
      "74:         $instanceinfo = (array) $enrolplugin->get_enrol_info($enrolinstance);",
      "75:         if (isset($instanceinfo['requiredparam']->enrolpassword)) {",
      "",
      "[Removed Lines]",
      "70:         $coursecontext = context_course::instance($enrolinstance->courseid);",
      "71:         $categorycontext = $coursecontext->get_parent_context();",
      "72:         self::validate_context($categorycontext);",
      "",
      "[Added Lines]",
      "71:         require_login(null, false, null, false, true);",
      "74:         $course = $DB->get_record('course', array('id' => $enrolinstance->courseid), '*', MUST_EXIST);",
      "75:         $context = context_course::instance($course->id);",
      "76:         if (!$course->visible and !has_capability('moodle/course:viewhiddencourses', $context)) {",
      "77:             throw new moodle_exception('coursehidden');",
      "78:         }",
      "",
      "---------------"
    ],
    "enrol/self/tests/externallib_test.php||enrol/self/tests/externallib_test.php": [
      "File: enrol/self/tests/externallib_test.php -> enrol/self/tests/externallib_test.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "47:         $studentrole = $DB->get_record('role', array('shortname'=>'student'));",
      "48:         $this->assertNotEmpty($studentrole);",
      "53:         $instanceid1 = $selfplugin->add_instance($course, array('status' => ENROL_INSTANCE_ENABLED,",
      "",
      "[Removed Lines]",
      "50:         $course = self::getDataGenerator()->create_course();",
      "",
      "[Added Lines]",
      "50:         $coursedata = new stdClass();",
      "51:         $coursedata->visible = 0;",
      "52:         $course = self::getDataGenerator()->create_course($coursedata);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "68:         $enrolmentmethods = $DB->get_records('enrol', array('courseid' => $course->id, 'status' => ENROL_INSTANCE_ENABLED));",
      "69:         $this->assertCount(3, $enrolmentmethods);",
      "71:         $instanceinfo1 = enrol_self_external::get_instance_info($instanceid1);",
      "72:         $instanceinfo1 = external_api::clean_returnvalue(enrol_self_external::get_instance_info_returns(), $instanceinfo1);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "73:         $this->setAdminUser();",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "95:         $this->assertEquals('Test instance 3', $instanceinfo3['name']);",
      "96:         $this->assertTrue($instanceinfo3['status']);",
      "97:         $this->assertEquals(get_string('password', 'enrol_self'), $instanceinfo3['enrolpassword']);",
      "98:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "103:         $user = self::getDataGenerator()->create_user();",
      "104:         $this->setUser($user);",
      "105:         try {",
      "106:             enrol_self_external::get_instance_info($instanceid3);",
      "107:         } catch (moodle_exception $e) {",
      "108:             $this->assertEquals('coursehidden', $e->errorcode);",
      "109:         }",
      "",
      "---------------"
    ],
    "enrol/tests/externallib_test.php||enrol/tests/externallib_test.php": [
      "File: enrol/tests/externallib_test.php -> enrol/tests/externallib_test.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "428:         $this->assertNotEmpty($studentrole);",
      "430:         $course1 = self::getDataGenerator()->create_course();",
      "434:         $instanceid1 = $selfplugin->add_instance($course1, array('status' => ENROL_INSTANCE_ENABLED,",
      "",
      "[Removed Lines]",
      "431:         $course2 = self::getDataGenerator()->create_course();",
      "",
      "[Added Lines]",
      "431:         $coursedata = new stdClass();",
      "432:         $coursedata->visible = 0;",
      "433:         $course2 = self::getDataGenerator()->create_course($coursedata);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "445:         $enrolmentmethods = $DB->get_records('enrol', array('courseid' => $course1->id, 'status' => ENROL_INSTANCE_ENABLED));",
      "446:         $this->assertCount(2, $enrolmentmethods);",
      "449:         $enrolmentmethods = core_enrol_external::get_course_enrolment_methods($course1->id);",
      "450:         $enrolmentmethods = external_api::clean_returnvalue(core_enrol_external::get_course_enrolment_methods_returns(),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "450:         $this->setAdminUser();",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "474:         $this->assertEquals('self', $enrolmentmethod['type']);",
      "475:         $this->assertTrue($enrolmentmethod['status']);",
      "476:         $this->assertEquals('enrol_self_get_instance_info', $enrolmentmethod['wsfunction']);",
      "477:     }",
      "479:     public function get_enrolled_users_setup($capability) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "483:         $user = self::getDataGenerator()->create_user();",
      "484:         $this->setUser($user);",
      "485:         try {",
      "486:             core_enrol_external::get_course_enrolment_methods($course2->id);",
      "487:         } catch (moodle_exception $e) {",
      "488:             $this->assertEquals('coursehidden', $e->errorcode);",
      "489:         }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "67ee10307f0a7e6a46af2453fa1aa28bc9e129b6",
      "candidate_info": {
        "commit_hash": "67ee10307f0a7e6a46af2453fa1aa28bc9e129b6",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/67ee10307f0a7e6a46af2453fa1aa28bc9e129b6",
        "files": [
          "enrol/externallib.php",
          "enrol/guest/classes/external.php",
          "enrol/self/externallib.php",
          "mod/lti/classes/external.php",
          "question/classes/external.php",
          "tag/classes/external.php"
        ],
        "message": "MDL-54098 external: Remove usage of require_login and $PAGE->set_context",
        "before_after_code_files": [
          "enrol/externallib.php||enrol/externallib.php",
          "enrol/guest/classes/external.php||enrol/guest/classes/external.php",
          "enrol/self/externallib.php||enrol/self/externallib.php",
          "mod/lti/classes/external.php||mod/lti/classes/external.php",
          "question/classes/external.php||question/classes/external.php",
          "tag/classes/external.php||tag/classes/external.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "enrol/externallib.php||enrol/externallib.php",
            "enrol/self/externallib.php||enrol/self/externallib.php"
          ],
          "candidate": [
            "enrol/externallib.php||enrol/externallib.php",
            "enrol/self/externallib.php||enrol/self/externallib.php"
          ]
        }
      },
      "candidate_diff": {
        "enrol/externallib.php||enrol/externallib.php": [
          "File: enrol/externallib.php -> enrol/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "651:         global $DB;",
          "653:         $params = self::validate_parameters(self::get_course_enrolment_methods_parameters(), array('courseid' => $courseid));",
          "658:         $course = $DB->get_record('course', array('id' => $params['courseid']), '*', MUST_EXIST);",
          "659:         $context = context_course::instance($course->id);",
          "",
          "[Removed Lines]",
          "656:         require_login(null, false, null, false, true);",
          "",
          "[Added Lines]",
          "654:         self::validate_context(context_system::instance());",
          "",
          "---------------"
        ],
        "enrol/guest/classes/external.php||enrol/guest/classes/external.php": [
          "File: enrol/guest/classes/external.php -> enrol/guest/classes/external.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:             throw new moodle_exception('invaliddata', 'error');",
          "72:         }",
          "75:         $enrolinstance = $DB->get_record('enrol', array('id' => $params['instanceid']), '*', MUST_EXIST);",
          "77:         $course = $DB->get_record('course', array('id' => $enrolinstance->courseid), '*', MUST_EXIST);",
          "",
          "[Removed Lines]",
          "74:         require_login(null, false, null, false, true);",
          "",
          "[Added Lines]",
          "74:         self::validate_context(context_system::instance());",
          "",
          "---------------"
        ],
        "enrol/self/externallib.php||enrol/self/externallib.php": [
          "File: enrol/self/externallib.php -> enrol/self/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:             throw new moodle_exception('invaliddata', 'error');",
          "68:         }",
          "73:         $enrolinstance = $DB->get_record('enrol', array('id' => $params['instanceid']), '*', MUST_EXIST);",
          "74:         $course = $DB->get_record('course', array('id' => $enrolinstance->courseid), '*', MUST_EXIST);",
          "",
          "[Removed Lines]",
          "71:         require_login(null, false, null, false, true);",
          "",
          "[Added Lines]",
          "70:         self::validate_context(context_system::instance());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:         $course = get_course($params['courseid']);",
          "148:         $context = context_course::instance($course->id);",
          "152:         if (!$course->visible and !has_capability('moodle/course:viewhiddencourses', $context)) {",
          "153:             throw new moodle_exception('coursehidden');",
          "",
          "[Removed Lines]",
          "150:         require_login(null, false, null, false, true);",
          "",
          "[Added Lines]",
          "148:         self::validate_context(context_system::instance());",
          "",
          "---------------"
        ],
        "mod/lti/classes/external.php||mod/lti/classes/external.php": [
          "File: mod/lti/classes/external.php -> mod/lti/classes/external.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "638:         $context = context_system::instance();",
          "640:         self::validate_context($context);",
          "642:         require_capability('moodle/site:config', $context);",
          "644:         if (!empty($toolproxyid)) {",
          "",
          "[Removed Lines]",
          "641:         $PAGE->set_context($context);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "question/classes/external.php||question/classes/external.php": [
          "File: question/classes/external.php -> question/classes/external.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:         );",
          "88:         $warnings = array();",
          "94:         question_flags::update_flag($params['qubaid'], $params['questionid'], $params['qaid'], $params['slot'], $params['checksum'],",
          "",
          "[Removed Lines]",
          "91:         require_login(null, false, null, false, true);",
          "",
          "[Added Lines]",
          "89:         self::validate_context(context_system::instance());",
          "",
          "---------------"
        ],
        "tag/classes/external.php||tag/classes/external.php": [
          "File: tag/classes/external.php -> tag/classes/external.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "192:         $tags = self::validate_parameters(self::get_tags_parameters(), array('tags' => $tags));",
          "196:         $systemcontext = context_system::instance();",
          "197:         $canmanage = has_capability('moodle/tag:manage', $systemcontext);",
          "198:         $canedit = has_capability('moodle/tag:edit', $systemcontext);",
          "",
          "[Removed Lines]",
          "194:         require_login(null, false, null, false, true);",
          "",
          "[Added Lines]",
          "195:         self::validate_context($systemcontext);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "302:         $context = $params['ctx'] ? context::instance_by_id($params['ctx']) : context_system::instance();",
          "304:         self::validate_context($context);",
          "306:         $tag = core_tag_tag::get_by_name($params['tc'], $params['tag'], '*', MUST_EXIST);",
          "",
          "[Removed Lines]",
          "303:         require_login(null, false, null, false, true);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c14e2d624c233ba6b9b983979c5077fb41148da8",
      "candidate_info": {
        "commit_hash": "c14e2d624c233ba6b9b983979c5077fb41148da8",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/c14e2d624c233ba6b9b983979c5077fb41148da8",
        "files": [
          "enrol/externallib.php",
          "enrol/self/externallib.php",
          "enrol/self/tests/externallib_test.php",
          "enrol/tests/externallib_test.php"
        ],
        "message": "MDL-52072 enrol: Fix course visibility checks in external functions",
        "before_after_code_files": [
          "enrol/externallib.php||enrol/externallib.php",
          "enrol/self/externallib.php||enrol/self/externallib.php",
          "enrol/self/tests/externallib_test.php||enrol/self/tests/externallib_test.php",
          "enrol/tests/externallib_test.php||enrol/tests/externallib_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "enrol/externallib.php||enrol/externallib.php",
            "enrol/self/externallib.php||enrol/self/externallib.php",
            "enrol/self/tests/externallib_test.php||enrol/self/tests/externallib_test.php",
            "enrol/tests/externallib_test.php||enrol/tests/externallib_test.php"
          ],
          "candidate": [
            "enrol/externallib.php||enrol/externallib.php",
            "enrol/self/externallib.php||enrol/self/externallib.php",
            "enrol/self/tests/externallib_test.php||enrol/self/tests/externallib_test.php",
            "enrol/tests/externallib_test.php||enrol/tests/externallib_test.php"
          ]
        }
      },
      "candidate_diff": {
        "enrol/externallib.php||enrol/externallib.php": [
          "File: enrol/externallib.php -> enrol/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "607:     public static function get_course_enrolment_methods($courseid) {",
          "609:         $params = self::validate_parameters(self::get_course_enrolment_methods_parameters(), array('courseid' => $courseid));",
          "615:         $result = array();",
          "616:         $enrolinstances = enrol_get_instances($params['courseid'], true);",
          "",
          "[Removed Lines]",
          "611:         $coursecontext = context_course::instance($params['courseid']);",
          "612:         $categorycontext = $coursecontext->get_parent_context();",
          "613:         self::validate_context($categorycontext);",
          "",
          "[Added Lines]",
          "609:         global $DB;",
          "614:         require_login(null, false, null, false, true);",
          "616:         $course = $DB->get_record('course', array('id' => $params['courseid']), '*', MUST_EXIST);",
          "617:         $context = context_course::instance($course->id);",
          "618:         if (!$course->visible and !has_capability('moodle/course:viewhiddencourses', $context)) {",
          "619:             throw new moodle_exception('coursehidden');",
          "620:         }",
          "",
          "---------------"
        ],
        "enrol/self/externallib.php||enrol/self/externallib.php": [
          "File: enrol/self/externallib.php -> enrol/self/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:             throw new moodle_exception('invaliddata', 'error');",
          "67:         }",
          "69:         $enrolinstance = $DB->get_record('enrol', array('id' => $params['instanceid']), '*', MUST_EXIST);",
          "74:         $instanceinfo = (array) $enrolplugin->get_enrol_info($enrolinstance);",
          "75:         if (isset($instanceinfo['requiredparam']->enrolpassword)) {",
          "",
          "[Removed Lines]",
          "70:         $coursecontext = context_course::instance($enrolinstance->courseid);",
          "71:         $categorycontext = $coursecontext->get_parent_context();",
          "72:         self::validate_context($categorycontext);",
          "",
          "[Added Lines]",
          "71:         require_login(null, false, null, false, true);",
          "74:         $course = $DB->get_record('course', array('id' => $enrolinstance->courseid), '*', MUST_EXIST);",
          "75:         $context = context_course::instance($course->id);",
          "76:         if (!$course->visible and !has_capability('moodle/course:viewhiddencourses', $context)) {",
          "77:             throw new moodle_exception('coursehidden');",
          "78:         }",
          "",
          "---------------"
        ],
        "enrol/self/tests/externallib_test.php||enrol/self/tests/externallib_test.php": [
          "File: enrol/self/tests/externallib_test.php -> enrol/self/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:         $studentrole = $DB->get_record('role', array('shortname'=>'student'));",
          "48:         $this->assertNotEmpty($studentrole);",
          "53:         $instanceid1 = $selfplugin->add_instance($course, array('status' => ENROL_INSTANCE_ENABLED,",
          "",
          "[Removed Lines]",
          "50:         $course = self::getDataGenerator()->create_course();",
          "",
          "[Added Lines]",
          "50:         $coursedata = new stdClass();",
          "51:         $coursedata->visible = 0;",
          "52:         $course = self::getDataGenerator()->create_course($coursedata);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:         $enrolmentmethods = $DB->get_records('enrol', array('courseid' => $course->id, 'status' => ENROL_INSTANCE_ENABLED));",
          "69:         $this->assertCount(3, $enrolmentmethods);",
          "71:         $instanceinfo1 = enrol_self_external::get_instance_info($instanceid1);",
          "72:         $instanceinfo1 = external_api::clean_returnvalue(enrol_self_external::get_instance_info_returns(), $instanceinfo1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:         $this->setAdminUser();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95:         $this->assertEquals('Test instance 3', $instanceinfo3['name']);",
          "96:         $this->assertTrue($instanceinfo3['status']);",
          "97:         $this->assertEquals(get_string('password', 'enrol_self'), $instanceinfo3['enrolpassword']);",
          "98:     }",
          "99: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "103:         $user = self::getDataGenerator()->create_user();",
          "104:         $this->setUser($user);",
          "105:         try {",
          "106:             enrol_self_external::get_instance_info($instanceid3);",
          "107:         } catch (moodle_exception $e) {",
          "108:             $this->assertEquals('coursehidden', $e->errorcode);",
          "109:         }",
          "",
          "---------------"
        ],
        "enrol/tests/externallib_test.php||enrol/tests/externallib_test.php": [
          "File: enrol/tests/externallib_test.php -> enrol/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "552:         $this->assertNotEmpty($studentrole);",
          "554:         $course1 = self::getDataGenerator()->create_course();",
          "558:         $instanceid1 = $selfplugin->add_instance($course1, array('status' => ENROL_INSTANCE_ENABLED,",
          "",
          "[Removed Lines]",
          "555:         $course2 = self::getDataGenerator()->create_course();",
          "",
          "[Added Lines]",
          "555:         $coursedata = new stdClass();",
          "556:         $coursedata->visible = 0;",
          "557:         $course2 = self::getDataGenerator()->create_course($coursedata);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "569:         $enrolmentmethods = $DB->get_records('enrol', array('courseid' => $course1->id, 'status' => ENROL_INSTANCE_ENABLED));",
          "570:         $this->assertCount(2, $enrolmentmethods);",
          "573:         $enrolmentmethods = core_enrol_external::get_course_enrolment_methods($course1->id);",
          "574:         $enrolmentmethods = external_api::clean_returnvalue(core_enrol_external::get_course_enrolment_methods_returns(),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "574:         $this->setAdminUser();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "598:         $this->assertEquals('self', $enrolmentmethod['type']);",
          "599:         $this->assertTrue($enrolmentmethod['status']);",
          "600:         $this->assertEquals('enrol_self_get_instance_info', $enrolmentmethod['wsfunction']);",
          "601:     }",
          "602: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "607:         $user = self::getDataGenerator()->create_user();",
          "608:         $this->setUser($user);",
          "609:         try {",
          "610:             core_enrol_external::get_course_enrolment_methods($course2->id);",
          "611:         } catch (moodle_exception $e) {",
          "612:             $this->assertEquals('coursehidden', $e->errorcode);",
          "613:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c4e2c3ba9ba45ed4c4ec80a000d01f5ddc5d1880",
      "candidate_info": {
        "commit_hash": "c4e2c3ba9ba45ed4c4ec80a000d01f5ddc5d1880",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/c4e2c3ba9ba45ed4c4ec80a000d01f5ddc5d1880",
        "files": [
          "enrol/externallib.php",
          "enrol/self/externallib.php",
          "enrol/self/tests/externallib_test.php",
          "enrol/tests/externallib_test.php"
        ],
        "message": "MDL-52072 enrol: Fix course visibility checks in external functions",
        "before_after_code_files": [
          "enrol/externallib.php||enrol/externallib.php",
          "enrol/self/externallib.php||enrol/self/externallib.php",
          "enrol/self/tests/externallib_test.php||enrol/self/tests/externallib_test.php",
          "enrol/tests/externallib_test.php||enrol/tests/externallib_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "enrol/externallib.php||enrol/externallib.php",
            "enrol/self/externallib.php||enrol/self/externallib.php",
            "enrol/self/tests/externallib_test.php||enrol/self/tests/externallib_test.php",
            "enrol/tests/externallib_test.php||enrol/tests/externallib_test.php"
          ],
          "candidate": [
            "enrol/externallib.php||enrol/externallib.php",
            "enrol/self/externallib.php||enrol/self/externallib.php",
            "enrol/self/tests/externallib_test.php||enrol/self/tests/externallib_test.php",
            "enrol/tests/externallib_test.php||enrol/tests/externallib_test.php"
          ]
        }
      },
      "candidate_diff": {
        "enrol/externallib.php||enrol/externallib.php": [
          "File: enrol/externallib.php -> enrol/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "622:     public static function get_course_enrolment_methods($courseid) {",
          "624:         $params = self::validate_parameters(self::get_course_enrolment_methods_parameters(), array('courseid' => $courseid));",
          "630:         $result = array();",
          "631:         $enrolinstances = enrol_get_instances($params['courseid'], true);",
          "",
          "[Removed Lines]",
          "626:         $coursecontext = context_course::instance($params['courseid']);",
          "627:         $categorycontext = $coursecontext->get_parent_context();",
          "628:         self::validate_context($categorycontext);",
          "",
          "[Added Lines]",
          "624:         global $DB;",
          "629:         require_login(null, false, null, false, true);",
          "631:         $course = $DB->get_record('course', array('id' => $params['courseid']), '*', MUST_EXIST);",
          "632:         $context = context_course::instance($course->id);",
          "633:         if (!$course->visible and !has_capability('moodle/course:viewhiddencourses', $context)) {",
          "634:             throw new moodle_exception('coursehidden');",
          "635:         }",
          "",
          "---------------"
        ],
        "enrol/self/externallib.php||enrol/self/externallib.php": [
          "File: enrol/self/externallib.php -> enrol/self/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:             throw new moodle_exception('invaliddata', 'error');",
          "67:         }",
          "69:         $enrolinstance = $DB->get_record('enrol', array('id' => $params['instanceid']), '*', MUST_EXIST);",
          "74:         $instanceinfo = (array) $enrolplugin->get_enrol_info($enrolinstance);",
          "75:         if (isset($instanceinfo['requiredparam']->enrolpassword)) {",
          "",
          "[Removed Lines]",
          "70:         $coursecontext = context_course::instance($enrolinstance->courseid);",
          "71:         $categorycontext = $coursecontext->get_parent_context();",
          "72:         self::validate_context($categorycontext);",
          "",
          "[Added Lines]",
          "71:         require_login(null, false, null, false, true);",
          "74:         $course = $DB->get_record('course', array('id' => $enrolinstance->courseid), '*', MUST_EXIST);",
          "75:         $context = context_course::instance($course->id);",
          "76:         if (!$course->visible and !has_capability('moodle/course:viewhiddencourses', $context)) {",
          "77:             throw new moodle_exception('coursehidden');",
          "78:         }",
          "",
          "---------------"
        ],
        "enrol/self/tests/externallib_test.php||enrol/self/tests/externallib_test.php": [
          "File: enrol/self/tests/externallib_test.php -> enrol/self/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:         $studentrole = $DB->get_record('role', array('shortname'=>'student'));",
          "48:         $this->assertNotEmpty($studentrole);",
          "53:         $instanceid1 = $selfplugin->add_instance($course, array('status' => ENROL_INSTANCE_ENABLED,",
          "",
          "[Removed Lines]",
          "50:         $course = self::getDataGenerator()->create_course();",
          "",
          "[Added Lines]",
          "50:         $coursedata = new stdClass();",
          "51:         $coursedata->visible = 0;",
          "52:         $course = self::getDataGenerator()->create_course($coursedata);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:         $enrolmentmethods = $DB->get_records('enrol', array('courseid' => $course->id, 'status' => ENROL_INSTANCE_ENABLED));",
          "69:         $this->assertCount(3, $enrolmentmethods);",
          "71:         $instanceinfo1 = enrol_self_external::get_instance_info($instanceid1);",
          "72:         $instanceinfo1 = external_api::clean_returnvalue(enrol_self_external::get_instance_info_returns(), $instanceinfo1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:         $this->setAdminUser();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95:         $this->assertEquals('Test instance 3', $instanceinfo3['name']);",
          "96:         $this->assertTrue($instanceinfo3['status']);",
          "97:         $this->assertEquals(get_string('password', 'enrol_self'), $instanceinfo3['enrolpassword']);",
          "98:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "103:         $user = self::getDataGenerator()->create_user();",
          "104:         $this->setUser($user);",
          "105:         try {",
          "106:             enrol_self_external::get_instance_info($instanceid3);",
          "107:         } catch (moodle_exception $e) {",
          "108:             $this->assertEquals('coursehidden', $e->errorcode);",
          "109:         }",
          "",
          "---------------"
        ],
        "enrol/tests/externallib_test.php||enrol/tests/externallib_test.php": [
          "File: enrol/tests/externallib_test.php -> enrol/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "428:         $this->assertNotEmpty($studentrole);",
          "430:         $course1 = self::getDataGenerator()->create_course();",
          "434:         $instanceid1 = $selfplugin->add_instance($course1, array('status' => ENROL_INSTANCE_ENABLED,",
          "",
          "[Removed Lines]",
          "431:         $course2 = self::getDataGenerator()->create_course();",
          "",
          "[Added Lines]",
          "431:         $coursedata = new stdClass();",
          "432:         $coursedata->visible = 0;",
          "433:         $course2 = self::getDataGenerator()->create_course($coursedata);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "445:         $enrolmentmethods = $DB->get_records('enrol', array('courseid' => $course1->id, 'status' => ENROL_INSTANCE_ENABLED));",
          "446:         $this->assertCount(2, $enrolmentmethods);",
          "449:         $enrolmentmethods = core_enrol_external::get_course_enrolment_methods($course1->id);",
          "450:         $enrolmentmethods = external_api::clean_returnvalue(core_enrol_external::get_course_enrolment_methods_returns(),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "450:         $this->setAdminUser();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "474:         $this->assertEquals('self', $enrolmentmethod['type']);",
          "475:         $this->assertTrue($enrolmentmethod['status']);",
          "476:         $this->assertEquals('enrol_self_get_instance_info', $enrolmentmethod['wsfunction']);",
          "477:     }",
          "479:     public function get_enrolled_users_setup($capability) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "483:         $user = self::getDataGenerator()->create_user();",
          "484:         $this->setUser($user);",
          "485:         try {",
          "486:             core_enrol_external::get_course_enrolment_methods($course2->id);",
          "487:         } catch (moodle_exception $e) {",
          "488:             $this->assertEquals('coursehidden', $e->errorcode);",
          "489:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "535fd9678f6b69943247b50581cd85c6973e286e",
      "candidate_info": {
        "commit_hash": "535fd9678f6b69943247b50581cd85c6973e286e",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/535fd9678f6b69943247b50581cd85c6973e286e",
        "files": [
          "enrol/externallib.php",
          "enrol/self/externallib.php",
          "enrol/self/tests/externallib_test.php",
          "enrol/tests/externallib_test.php"
        ],
        "message": "MDL-52072 enrol: Fix course visibility checks in external functions",
        "before_after_code_files": [
          "enrol/externallib.php||enrol/externallib.php",
          "enrol/self/externallib.php||enrol/self/externallib.php",
          "enrol/self/tests/externallib_test.php||enrol/self/tests/externallib_test.php",
          "enrol/tests/externallib_test.php||enrol/tests/externallib_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "enrol/externallib.php||enrol/externallib.php",
            "enrol/self/externallib.php||enrol/self/externallib.php",
            "enrol/self/tests/externallib_test.php||enrol/self/tests/externallib_test.php",
            "enrol/tests/externallib_test.php||enrol/tests/externallib_test.php"
          ],
          "candidate": [
            "enrol/externallib.php||enrol/externallib.php",
            "enrol/self/externallib.php||enrol/self/externallib.php",
            "enrol/self/tests/externallib_test.php||enrol/self/tests/externallib_test.php",
            "enrol/tests/externallib_test.php||enrol/tests/externallib_test.php"
          ]
        }
      },
      "candidate_diff": {
        "enrol/externallib.php||enrol/externallib.php": [
          "File: enrol/externallib.php -> enrol/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "607:     public static function get_course_enrolment_methods($courseid) {",
          "609:         $params = self::validate_parameters(self::get_course_enrolment_methods_parameters(), array('courseid' => $courseid));",
          "615:         $result = array();",
          "616:         $enrolinstances = enrol_get_instances($params['courseid'], true);",
          "",
          "[Removed Lines]",
          "611:         $coursecontext = context_course::instance($params['courseid']);",
          "612:         $categorycontext = $coursecontext->get_parent_context();",
          "613:         self::validate_context($categorycontext);",
          "",
          "[Added Lines]",
          "609:         global $DB;",
          "614:         require_login(null, false, null, false, true);",
          "616:         $course = $DB->get_record('course', array('id' => $params['courseid']), '*', MUST_EXIST);",
          "617:         $context = context_course::instance($course->id);",
          "618:         if (!$course->visible and !has_capability('moodle/course:viewhiddencourses', $context)) {",
          "619:             throw new moodle_exception('coursehidden');",
          "620:         }",
          "",
          "---------------"
        ],
        "enrol/self/externallib.php||enrol/self/externallib.php": [
          "File: enrol/self/externallib.php -> enrol/self/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:             throw new moodle_exception('invaliddata', 'error');",
          "67:         }",
          "69:         $enrolinstance = $DB->get_record('enrol', array('id' => $params['instanceid']), '*', MUST_EXIST);",
          "74:         $instanceinfo = (array) $enrolplugin->get_enrol_info($enrolinstance);",
          "75:         if (isset($instanceinfo['requiredparam']->enrolpassword)) {",
          "",
          "[Removed Lines]",
          "70:         $coursecontext = context_course::instance($enrolinstance->courseid);",
          "71:         $categorycontext = $coursecontext->get_parent_context();",
          "72:         self::validate_context($categorycontext);",
          "",
          "[Added Lines]",
          "71:         require_login(null, false, null, false, true);",
          "74:         $course = $DB->get_record('course', array('id' => $enrolinstance->courseid), '*', MUST_EXIST);",
          "75:         $context = context_course::instance($course->id);",
          "76:         if (!$course->visible and !has_capability('moodle/course:viewhiddencourses', $context)) {",
          "77:             throw new moodle_exception('coursehidden');",
          "78:         }",
          "",
          "---------------"
        ],
        "enrol/self/tests/externallib_test.php||enrol/self/tests/externallib_test.php": [
          "File: enrol/self/tests/externallib_test.php -> enrol/self/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:         $studentrole = $DB->get_record('role', array('shortname'=>'student'));",
          "48:         $this->assertNotEmpty($studentrole);",
          "53:         $instanceid1 = $selfplugin->add_instance($course, array('status' => ENROL_INSTANCE_ENABLED,",
          "",
          "[Removed Lines]",
          "50:         $course = self::getDataGenerator()->create_course();",
          "",
          "[Added Lines]",
          "50:         $coursedata = new stdClass();",
          "51:         $coursedata->visible = 0;",
          "52:         $course = self::getDataGenerator()->create_course($coursedata);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:         $enrolmentmethods = $DB->get_records('enrol', array('courseid' => $course->id, 'status' => ENROL_INSTANCE_ENABLED));",
          "69:         $this->assertCount(3, $enrolmentmethods);",
          "71:         $instanceinfo1 = enrol_self_external::get_instance_info($instanceid1);",
          "72:         $instanceinfo1 = external_api::clean_returnvalue(enrol_self_external::get_instance_info_returns(), $instanceinfo1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:         $this->setAdminUser();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95:         $this->assertEquals('Test instance 3', $instanceinfo3['name']);",
          "96:         $this->assertTrue($instanceinfo3['status']);",
          "97:         $this->assertEquals(get_string('password', 'enrol_self'), $instanceinfo3['enrolpassword']);",
          "98:     }",
          "99: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "103:         $user = self::getDataGenerator()->create_user();",
          "104:         $this->setUser($user);",
          "105:         try {",
          "106:             enrol_self_external::get_instance_info($instanceid3);",
          "107:         } catch (moodle_exception $e) {",
          "108:             $this->assertEquals('coursehidden', $e->errorcode);",
          "109:         }",
          "",
          "---------------"
        ],
        "enrol/tests/externallib_test.php||enrol/tests/externallib_test.php": [
          "File: enrol/tests/externallib_test.php -> enrol/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "405:         $this->assertNotEmpty($studentrole);",
          "407:         $course1 = self::getDataGenerator()->create_course();",
          "411:         $instanceid1 = $selfplugin->add_instance($course1, array('status' => ENROL_INSTANCE_ENABLED,",
          "",
          "[Removed Lines]",
          "408:         $course2 = self::getDataGenerator()->create_course();",
          "",
          "[Added Lines]",
          "408:         $coursedata = new stdClass();",
          "409:         $coursedata->visible = 0;",
          "410:         $course2 = self::getDataGenerator()->create_course($coursedata);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "422:         $enrolmentmethods = $DB->get_records('enrol', array('courseid' => $course1->id, 'status' => ENROL_INSTANCE_ENABLED));",
          "423:         $this->assertCount(2, $enrolmentmethods);",
          "426:         $enrolmentmethods = core_enrol_external::get_course_enrolment_methods($course1->id);",
          "427:         $enrolmentmethods = external_api::clean_returnvalue(core_enrol_external::get_course_enrolment_methods_returns(),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "427:         $this->setAdminUser();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "451:         $this->assertEquals('self', $enrolmentmethod['type']);",
          "452:         $this->assertTrue($enrolmentmethod['status']);",
          "453:         $this->assertEquals('enrol_self_get_instance_info', $enrolmentmethod['wsfunction']);",
          "454:     }",
          "456:     public function get_enrolled_users_setup($capability) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "460:         $user = self::getDataGenerator()->create_user();",
          "461:         $this->setUser($user);",
          "462:         try {",
          "463:             core_enrol_external::get_course_enrolment_methods($course2->id);",
          "464:         } catch (moodle_exception $e) {",
          "465:             $this->assertEquals('coursehidden', $e->errorcode);",
          "466:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "518f8a7cedd5b80e682c34fa81a71e7b7be2d879",
      "candidate_info": {
        "commit_hash": "518f8a7cedd5b80e682c34fa81a71e7b7be2d879",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/518f8a7cedd5b80e682c34fa81a71e7b7be2d879",
        "files": [
          "enrol/externallib.php",
          "enrol/self/externallib.php",
          "enrol/self/tests/externallib_test.php",
          "enrol/tests/externallib_test.php"
        ],
        "message": "MDL-52072 enrol: Fix course visibility checks in external functions",
        "before_after_code_files": [
          "enrol/externallib.php||enrol/externallib.php",
          "enrol/self/externallib.php||enrol/self/externallib.php",
          "enrol/self/tests/externallib_test.php||enrol/self/tests/externallib_test.php",
          "enrol/tests/externallib_test.php||enrol/tests/externallib_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "enrol/externallib.php||enrol/externallib.php",
            "enrol/self/externallib.php||enrol/self/externallib.php",
            "enrol/self/tests/externallib_test.php||enrol/self/tests/externallib_test.php",
            "enrol/tests/externallib_test.php||enrol/tests/externallib_test.php"
          ],
          "candidate": [
            "enrol/externallib.php||enrol/externallib.php",
            "enrol/self/externallib.php||enrol/self/externallib.php",
            "enrol/self/tests/externallib_test.php||enrol/self/tests/externallib_test.php",
            "enrol/tests/externallib_test.php||enrol/tests/externallib_test.php"
          ]
        }
      },
      "candidate_diff": {
        "enrol/externallib.php||enrol/externallib.php": [
          "File: enrol/externallib.php -> enrol/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "622:     public static function get_course_enrolment_methods($courseid) {",
          "624:         $params = self::validate_parameters(self::get_course_enrolment_methods_parameters(), array('courseid' => $courseid));",
          "630:         $result = array();",
          "631:         $enrolinstances = enrol_get_instances($params['courseid'], true);",
          "",
          "[Removed Lines]",
          "626:         $coursecontext = context_course::instance($params['courseid']);",
          "627:         $categorycontext = $coursecontext->get_parent_context();",
          "628:         self::validate_context($categorycontext);",
          "",
          "[Added Lines]",
          "624:         global $DB;",
          "629:         require_login(null, false, null, false, true);",
          "631:         $course = $DB->get_record('course', array('id' => $params['courseid']), '*', MUST_EXIST);",
          "632:         $context = context_course::instance($course->id);",
          "633:         if (!$course->visible and !has_capability('moodle/course:viewhiddencourses', $context)) {",
          "634:             throw new moodle_exception('coursehidden');",
          "635:         }",
          "",
          "---------------"
        ],
        "enrol/self/externallib.php||enrol/self/externallib.php": [
          "File: enrol/self/externallib.php -> enrol/self/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:             throw new moodle_exception('invaliddata', 'error');",
          "67:         }",
          "69:         $enrolinstance = $DB->get_record('enrol', array('id' => $params['instanceid']), '*', MUST_EXIST);",
          "74:         $instanceinfo = (array) $enrolplugin->get_enrol_info($enrolinstance);",
          "75:         if (isset($instanceinfo['requiredparam']->enrolpassword)) {",
          "",
          "[Removed Lines]",
          "70:         $coursecontext = context_course::instance($enrolinstance->courseid);",
          "71:         $categorycontext = $coursecontext->get_parent_context();",
          "72:         self::validate_context($categorycontext);",
          "",
          "[Added Lines]",
          "71:         require_login(null, false, null, false, true);",
          "74:         $course = $DB->get_record('course', array('id' => $enrolinstance->courseid), '*', MUST_EXIST);",
          "75:         $context = context_course::instance($course->id);",
          "76:         if (!$course->visible and !has_capability('moodle/course:viewhiddencourses', $context)) {",
          "77:             throw new moodle_exception('coursehidden');",
          "78:         }",
          "",
          "---------------"
        ],
        "enrol/self/tests/externallib_test.php||enrol/self/tests/externallib_test.php": [
          "File: enrol/self/tests/externallib_test.php -> enrol/self/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:         $studentrole = $DB->get_record('role', array('shortname'=>'student'));",
          "48:         $this->assertNotEmpty($studentrole);",
          "53:         $instanceid1 = $selfplugin->add_instance($course, array('status' => ENROL_INSTANCE_ENABLED,",
          "",
          "[Removed Lines]",
          "50:         $course = self::getDataGenerator()->create_course();",
          "",
          "[Added Lines]",
          "50:         $coursedata = new stdClass();",
          "51:         $coursedata->visible = 0;",
          "52:         $course = self::getDataGenerator()->create_course($coursedata);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:         $enrolmentmethods = $DB->get_records('enrol', array('courseid' => $course->id, 'status' => ENROL_INSTANCE_ENABLED));",
          "69:         $this->assertCount(3, $enrolmentmethods);",
          "71:         $instanceinfo1 = enrol_self_external::get_instance_info($instanceid1);",
          "72:         $instanceinfo1 = external_api::clean_returnvalue(enrol_self_external::get_instance_info_returns(), $instanceinfo1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:         $this->setAdminUser();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95:         $this->assertEquals('Test instance 3', $instanceinfo3['name']);",
          "96:         $this->assertTrue($instanceinfo3['status']);",
          "97:         $this->assertEquals(get_string('password', 'enrol_self'), $instanceinfo3['enrolpassword']);",
          "98:     }",
          "99: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "103:         $user = self::getDataGenerator()->create_user();",
          "104:         $this->setUser($user);",
          "105:         try {",
          "106:             enrol_self_external::get_instance_info($instanceid3);",
          "107:         } catch (moodle_exception $e) {",
          "108:             $this->assertEquals('coursehidden', $e->errorcode);",
          "109:         }",
          "",
          "---------------"
        ],
        "enrol/tests/externallib_test.php||enrol/tests/externallib_test.php": [
          "File: enrol/tests/externallib_test.php -> enrol/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "428:         $this->assertNotEmpty($studentrole);",
          "430:         $course1 = self::getDataGenerator()->create_course();",
          "434:         $instanceid1 = $selfplugin->add_instance($course1, array('status' => ENROL_INSTANCE_ENABLED,",
          "",
          "[Removed Lines]",
          "431:         $course2 = self::getDataGenerator()->create_course();",
          "",
          "[Added Lines]",
          "431:         $coursedata = new stdClass();",
          "432:         $coursedata->visible = 0;",
          "433:         $course2 = self::getDataGenerator()->create_course($coursedata);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "445:         $enrolmentmethods = $DB->get_records('enrol', array('courseid' => $course1->id, 'status' => ENROL_INSTANCE_ENABLED));",
          "446:         $this->assertCount(2, $enrolmentmethods);",
          "449:         $enrolmentmethods = core_enrol_external::get_course_enrolment_methods($course1->id);",
          "450:         $enrolmentmethods = external_api::clean_returnvalue(core_enrol_external::get_course_enrolment_methods_returns(),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "450:         $this->setAdminUser();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "474:         $this->assertEquals('self', $enrolmentmethod['type']);",
          "475:         $this->assertTrue($enrolmentmethod['status']);",
          "476:         $this->assertEquals('enrol_self_get_instance_info', $enrolmentmethod['wsfunction']);",
          "477:     }",
          "479:     public function get_enrolled_users_setup($capability) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "483:         $user = self::getDataGenerator()->create_user();",
          "484:         $this->setUser($user);",
          "485:         try {",
          "486:             core_enrol_external::get_course_enrolment_methods($course2->id);",
          "487:         } catch (moodle_exception $e) {",
          "488:             $this->assertEquals('coursehidden', $e->errorcode);",
          "489:         }",
          "",
          "---------------"
        ]
      }
    }
  ]
}