{
  "cve_id": "CVE-2010-3697",
  "cve_desc": "The wait_for_child_to_die function in main/event.c in FreeRADIUS 2.1.x before 2.1.10, in certain circumstances involving long-term database outages, does not properly handle long queue times for requests, which allows remote attackers to cause a denial of service (daemon crash) by sending many requests.",
  "repo": "alandekok/freeradius-server",
  "patch_hash": "ff94dd35673bba1476594299d31ce8293b8bd223",
  "patch_info": {
    "commit_hash": "ff94dd35673bba1476594299d31ce8293b8bd223",
    "repo": "alandekok/freeradius-server",
    "commit_url": "https://github.com/alandekok/freeradius-server/commit/ff94dd35673bba1476594299d31ce8293b8bd223",
    "files": [
      "src/main/event.c"
    ],
    "message": "Do not delete \"old\" requests until they are free.\n\nIf the request is in the queue for 30+ seconds, do NOT delete it.\nInstead, mark it as \"STOP PROCESSING\", and do \"wait_for_child_to_die\",\nwhich waits for a child thread to pick it up, and acknowledge that it's\ndone.  Once it's marked done, we can finally clean it up.\n\nThis may be the underlying issue behind bug #35",
    "before_after_code_files": [
      "src/main/event.c||src/main/event.c"
    ]
  },
  "patch_diff": {
    "src/main/event.c||src/main/event.c": [
      "File: src/main/event.c -> src/main/event.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "479:  REQUEST *request = ctx;",
      "481:  rad_assert(request->magic == REQUEST_MAGIC);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "482:  remove_from_request_hash(request);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "490:       (pthread_equal(request->child_pid, NO_SUCH_CHILD_PID) == 0))) {",
      "496:    request->delay += (request->delay >> 1);",
      "497:    radlog(L_INFO, \"WARNING: Child is hung for request %u in component %s module %s.\",",
      "498:           request->number, request->component, request->module);",
      "499:   } else {",
      "501:     request->number);",
      "502:   }",
      "503:   tv_add(&request->when, request->delay);",
      "",
      "[Removed Lines]",
      "495:   if (request->delay < (USEC * 60 * 5)) {",
      "500:    RDEBUG2(\"Child is still stuck for request %u\",",
      "",
      "[Added Lines]",
      "496:   if (request->delay < (USEC * request->root->max_request_time)) {",
      "501:    request->delay = USEC * request->root->max_request_time;",
      "502:    RDEBUG2(\"WARNING: Child is still stuck for request %u\",",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "507:  }",
      "509:  RDEBUG2(\"Child is finally responsive for request %u\", request->number);",
      "512: #ifdef WITH_PROXY",
      "513:  if (request->proxy) {",
      "",
      "[Removed Lines]",
      "510:  remove_from_request_hash(request);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1140:  switch (request->child_state) {",
      "1141:  case REQUEST_QUEUED:",
      "1142:  case REQUEST_RUNNING:",
      "1143:   when = request->received;",
      "1144:   when.tv_sec += request->root->max_request_time;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1150: #ifdef HAVE_PTHREAD_H",
      "1151:   if (!have_children)",
      "1152: #endif",
      "1153:   {",
      "1154:    rad_assert(\"We do not have threads, but the request is marked as queued or running in a child thread\" == NULL);",
      "1155:    break;",
      "1156:   }",
      "1158: #ifdef HAVE_PTHREAD_H",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1162:    if (request->delay < (USEC / 10)) {",
      "1163:     request->delay = USEC / 10;",
      "1164:    }",
      "1165:    request->delay += request->delay >> 1;",
      "1174:     request->delay = request->root->max_request_time * USEC;",
      "1175:    }",
      "1178:    request->when = now;",
      "1179:    tv_add(&request->when, request->delay);",
      "",
      "[Removed Lines]",
      "1159:   if (timercmp(&now, &when, <) ||",
      "1160:       ((request->listener->type == RAD_LISTEN_DETAIL) &&",
      "1161:        (request->child_state == REQUEST_QUEUED))) {",
      "1167: #ifdef WITH_DETAIL",
      "1172:    if ((request->listener->type == RAD_LISTEN_DETAIL) &&",
      "1173:        (request->delay > (request->root->max_request_time * USEC))) {",
      "1176: #endif",
      "",
      "[Added Lines]",
      "1179:   if (timercmp(&now, &when, <)) {",
      "1188:    if (request->delay > (request->root->max_request_time * USEC)) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1181:    break;",
      "1182:   }",
      "",
      "[Removed Lines]",
      "1184: #if defined(HAVE_PTHREAD_H)",
      "",
      "[Added Lines]",
      "1198:   request->master_state = REQUEST_STOP_PROCESSING;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1190:   if (have_children &&",
      "1191:       (pthread_equal(request->child_pid, NO_SUCH_CHILD_PID) == 0)) {",
      "1194:    radlog(L_ERR, \"WARNING: Unresponsive child for request %u, in module %s component %s\",",
      "1195:           request->number,",
      "1196:           request->module ? request->module : \"<server core>\",",
      "1197:           request->component ? request->component : \"<server core>\");",
      "1203:   }",
      "1204: #endif",
      "",
      "[Removed Lines]",
      "1192:    request->master_state = REQUEST_STOP_PROCESSING;",
      "1199:    request->delay = USEC / 4;",
      "1200:    tv_add(&request->when, request->delay);",
      "1201:    callback = wait_for_child_to_die;",
      "1202:    break;",
      "1214:   request->child_state = REQUEST_DONE;",
      "",
      "[Added Lines]",
      "1213:   request->delay = USEC;",
      "1214:   tv_add(&request->when, request->delay);",
      "1215:   callback = wait_for_child_to_die;",
      "1216:   break;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a40822f29c0e2d376849d5ed7b09b13d3f704ec1",
      "candidate_info": {
        "commit_hash": "a40822f29c0e2d376849d5ed7b09b13d3f704ec1",
        "repo": "alandekok/freeradius-server",
        "commit_url": "https://github.com/alandekok/freeradius-server/commit/a40822f29c0e2d376849d5ed7b09b13d3f704ec1",
        "files": [
          "src/main/event.c"
        ],
        "message": "Allow to build without pthreads",
        "before_after_code_files": [
          "src/main/event.c||src/main/event.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/event.c||src/main/event.c"
          ],
          "candidate": [
            "src/main/event.c||src/main/event.c"
          ]
        }
      },
      "candidate_diff": {
        "src/main/event.c||src/main/event.c": [
          "File: src/main/event.c -> src/main/event.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "147: }",
          "150: #ifdef WITH_PROXY",
          "151: static REQUEST *lookup_in_proxy_hash(RADIUS_PACKET *reply)",
          "152: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150: static void ev_request_free(REQUEST **prequest)",
          "151: {",
          "152:  REQUEST *request;",
          "154:  if (!prequest || !*prequest) return;",
          "156:  request = *prequest;",
          "158: #ifdef WITH_COA",
          "159:  if (request->coa) {",
          "164:   request->coa->parent = NULL;",
          "165:   ev_request_free(&request->coa);",
          "166:  }",
          "172:  if (request->parent && (request->parent->coa == request)) {",
          "173:   request->parent->coa = NULL;",
          "174:  }",
          "175: #endif",
          "177:  if (request->ev) fr_event_delete(el, &request->ev);",
          "178: #ifdef WITH_PROXY",
          "179:  if (request->in_proxy_hash) remove_from_proxy_hash(request);",
          "180: #endif",
          "181:  if (request->in_request_hash) remove_from_request_hash(request);",
          "183:  request_free(prequest);",
          "184: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "242:    PTHREAD_MUTEX_UNLOCK(&proxy_mutex);",
          "243: }",
          "279: static int proxy_id_alloc(REQUEST *request, RADIUS_PACKET *packet)",
          "280: {",
          "281:  int i, proxy, found;",
          "",
          "[Removed Lines]",
          "245: static void ev_request_free(REQUEST **prequest)",
          "246: {",
          "247:  REQUEST *request;",
          "249:  if (!prequest || !*prequest) return;",
          "251:  request = *prequest;",
          "253: #ifdef WITH_COA",
          "254:  if (request->coa) {",
          "259:   request->coa->parent = NULL;",
          "260:   ev_request_free(&request->coa);",
          "261:  }",
          "267:  if (request->parent && (request->parent->coa == request)) {",
          "268:   request->parent->coa = NULL;",
          "269:  }",
          "270: #endif",
          "272:  if (request->ev) fr_event_delete(el, &request->ev);",
          "273:  if (request->in_proxy_hash) remove_from_proxy_hash(request);",
          "274:  if (request->in_request_hash) remove_from_request_hash(request);",
          "276:  request_free(prequest);",
          "277: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1178:    break;",
          "1179:   }",
          "",
          "[Removed Lines]",
          "1181: #if defined(HAVE_PTHREAD_H) || defined(WITH_PROXY)",
          "",
          "[Added Lines]",
          "1183: #if defined(HAVE_PTHREAD_H)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1648:  request->num_proxied_requests = 1;",
          "1649:  request->num_proxied_responses = 0;",
          "1650:  request->child_pid = NO_SUCH_CHILD_PID;",
          "1652:  update_event_timestamp(request->proxy, request->proxy_when.tv_sec);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1652: #ifdef HAVE_PTHREAD_H",
          "1654: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1818: #ifdef WITH_PROXY",
          "1819:  if (request->proxy) {",
          "1820:   return process_proxy_reply(request);",
          "1822:  }",
          "1824:  return 1;",
          "1825: }",
          "",
          "[Removed Lines]",
          "1821: #endif",
          "",
          "[Added Lines]",
          "1826: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a84026e98f8cae54822f8795c81619acdba23360",
      "candidate_info": {
        "commit_hash": "a84026e98f8cae54822f8795c81619acdba23360",
        "repo": "alandekok/freeradius-server",
        "commit_url": "https://github.com/alandekok/freeradius-server/commit/a84026e98f8cae54822f8795c81619acdba23360",
        "files": [
          "src/main/event.c"
        ],
        "message": "Made warning messages more consistent",
        "before_after_code_files": [
          "src/main/event.c||src/main/event.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/event.c||src/main/event.c"
          ],
          "candidate": [
            "src/main/event.c||src/main/event.c"
          ]
        }
      },
      "candidate_diff": {
        "src/main/event.c||src/main/event.c": [
          "File: src/main/event.c -> src/main/event.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "499:           request->number, request->component, request->module);",
          "500:   } else {",
          "501:    request->delay = USEC * request->root->max_request_time;",
          "503:     request->number);",
          "504:   }",
          "505:   tv_add(&request->when, request->delay);",
          "",
          "[Removed Lines]",
          "502:    RDEBUG2(\"WARNING: Child is still stuck for request %u\",",
          "",
          "[Added Lines]",
          "502:    RDEBUG2(\"WARNING: Child is hung after \\\"max_request_time\\\" for request %u\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1226:   if (have_children &&",
          "1227:       (pthread_equal(request->child_pid, NO_SUCH_CHILD_PID) == 0)) {",
          "1229:           request->number,",
          "1232:   }",
          "1234:   request->delay = USEC;",
          "",
          "[Removed Lines]",
          "1228:    radlog(L_ERR, \"WARNING: Unresponsive child for request %u, in module %s component %s\",",
          "1230:           request->module ? request->module : \"<server core>\",",
          "1231:           request->component ? request->component : \"<server core>\");",
          "",
          "[Added Lines]",
          "1228:    radlog(L_ERR, \"WARNING: Unresponsive child for request %u, in component %s module %s\",",
          "1230:           request->component ? request->component : \"<server core>\",",
          "1231:           request->module ? request->module : \"<server core>\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "17561b7eacb98f9bab89d6fa8a8866b45f4bb093",
      "candidate_info": {
        "commit_hash": "17561b7eacb98f9bab89d6fa8a8866b45f4bb093",
        "repo": "alandekok/freeradius-server",
        "commit_url": "https://github.com/alandekok/freeradius-server/commit/17561b7eacb98f9bab89d6fa8a8866b45f4bb093",
        "files": [
          "src/main/event.c"
        ],
        "message": "Do not delete \"old\" requests until they are free.\n\nIf the request is in the queue for 30+ seconds, do NOT delete it.\nInstead, mark it as \"STOP PROCESSING\", and do \"wait_for_child_to_die\",\nwhich waits for a child thread to pick it up, and acknowledge that it's\ndone.  Once it's marked done, we can finally clean it up.\n\nThis may be the underlying issue behind bug #35",
        "before_after_code_files": [
          "src/main/event.c||src/main/event.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/main/event.c||src/main/event.c"
          ],
          "candidate": [
            "src/main/event.c||src/main/event.c"
          ]
        }
      },
      "candidate_diff": {
        "src/main/event.c||src/main/event.c": [
          "File: src/main/event.c -> src/main/event.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "480:  REQUEST *request = ctx;",
          "482:  rad_assert(request->magic == REQUEST_MAGIC);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "483:  remove_from_request_hash(request);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "491:       (pthread_equal(request->child_pid, NO_SUCH_CHILD_PID) == 0))) {",
          "497:    request->delay += (request->delay >> 1);",
          "498:    radlog_request(L_INFO, 0, request, \"WARNING: Child is hung in component %s module %s.\",",
          "499:           request->component, request->module);",
          "500:   } else {",
          "502:   }",
          "503:   tv_add(&request->when, request->delay);",
          "",
          "[Removed Lines]",
          "496:   if (request->delay < (USEC * 60 * 5)) {",
          "501:    RDEBUG2(\"Child is still stuck\");",
          "",
          "[Added Lines]",
          "497:   if (request->delay < (USEC * request->root->max_request_time)) {",
          "502:    request->delay = USEC * request->root->max_request_time;",
          "503:    RDEBUG2(\"WARNING: Child is still stuck\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "507:  }",
          "509:  RDEBUG2(\"Child is finally responsive\");",
          "512: #ifdef WITH_PROXY",
          "513:  if (request->proxy) {",
          "",
          "[Removed Lines]",
          "510:  remove_from_request_hash(request);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1179:  rad_assert(request->magic == REQUEST_MAGIC);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1182: #ifdef HAVE_PTHREAD_H",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1185:  if (request->listener->status != RAD_LISTEN_STATUS_KNOWN) {",
          "1186:   goto stop_processing;",
          "1187:  }",
          "1189: #ifdef WITH_COA",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1190: #endif",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1206:  switch (request->child_state) {",
          "1207:  case REQUEST_QUEUED:",
          "1208:  case REQUEST_RUNNING:",
          "1209:   when = request->received;",
          "1210:   when.tv_sec += request->root->max_request_time;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1218: #ifdef HAVE_PTHREAD_H",
          "1219:   if (!have_children)",
          "1220: #endif",
          "1221:   {",
          "1222:    rad_assert(\"We do not have threads, but the request is marked as queued or running in a child thread\" == NULL);",
          "1223:    break;",
          "1224:   }",
          "1226: #ifdef HAVE_PTHREAD_H",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1228:    if (request->delay < (USEC / 10)) {",
          "1229:     request->delay = USEC / 10;",
          "1230:    }",
          "1231:    request->delay += request->delay >> 1;",
          "1240:     request->delay = request->root->max_request_time * USEC;",
          "1241:    }",
          "1244:    request->when = now;",
          "1245:    tv_add(&request->when, request->delay);",
          "",
          "[Removed Lines]",
          "1225:   if (timercmp(&now, &when, <) ||",
          "1226:       ((request->listener->type == RAD_LISTEN_DETAIL) &&",
          "1227:        (request->child_state == REQUEST_QUEUED))) {",
          "1233: #ifdef WITH_DETAIL",
          "1238:    if ((request->listener->type == RAD_LISTEN_DETAIL) &&",
          "1239:        (request->delay > (request->root->max_request_time * USEC))) {",
          "1242: #endif",
          "",
          "[Added Lines]",
          "1247:   if (timercmp(&now, &when, <)) {",
          "1256:    if (request->delay > (request->root->max_request_time * USEC)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1248:   }",
          "1250:  stop_processing:",
          "",
          "[Removed Lines]",
          "1251: #if defined(HAVE_PTHREAD_H)",
          "",
          "[Added Lines]",
          "1267:   request->master_state = REQUEST_STOP_PROCESSING;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1257:   if (have_children &&",
          "1258:       (pthread_equal(request->child_pid, NO_SUCH_CHILD_PID) == 0)) {",
          "1262:           request->module ? request->module : \"<server core>\",",
          "1263:           request->component ? request->component : \"<server core>\");",
          "1269:   }",
          "1270: #endif",
          "",
          "[Removed Lines]",
          "1259:    request->master_state = REQUEST_STOP_PROCESSING;",
          "1261:    radlog_request(L_ERR, 0, request, \"WARNING: Unresponsive child in module %s component %s\",",
          "1265:    request->delay = USEC / 4;",
          "1266:    tv_add(&request->when, request->delay);",
          "1267:    callback = wait_for_child_to_die;",
          "1268:    break;",
          "1280:   request->child_state = REQUEST_DONE;",
          "",
          "[Added Lines]",
          "1276:    radlog(L_ERR, \"WARNING: Unresponsive child in module %s component %s\",",
          "1281:   request->delay = USEC;",
          "1282:   tv_add(&request->when, request->delay);",
          "1283:   callback = wait_for_child_to_die;",
          "1284:   break;",
          "",
          "---------------"
        ]
      }
    }
  ]
}