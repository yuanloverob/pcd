{
  "cve_id": "CVE-2011-1493",
  "cve_desc": "Array index error in the rose_parse_national function in net/rose/rose_subr.c in the Linux kernel before 2.6.39 allows remote attackers to cause a denial of service (heap memory corruption) or possibly have unspecified other impact by composing FAC_NATIONAL_DIGIS data that specifies a large number of digipeaters, and then sending this data to a ROSE socket.",
  "repo": "torvalds/linux",
  "patch_hash": "be20250c13f88375345ad99950190685eda51eb8",
  "patch_info": {
    "commit_hash": "be20250c13f88375345ad99950190685eda51eb8",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/be20250c13f88375345ad99950190685eda51eb8",
    "files": [
      "net/rose/rose_subr.c"
    ],
    "message": "ROSE: prevent heap corruption with bad facilities\n\nWhen parsing the FAC_NATIONAL_DIGIS facilities field, it's possible for\na remote host to provide more digipeaters than expected, resulting in\nheap corruption.  Check against ROSE_MAX_DIGIS to prevent overflows, and\nabort facilities parsing on failure.\n\nAdditionally, when parsing the FAC_CCITT_DEST_NSAP and\nFAC_CCITT_SRC_NSAP facilities fields, a remote host can provide a length\nof less than 10, resulting in an underflow in a memcpy size, causing a\nkernel panic due to massive heap corruption.  A length of greater than\n20 results in a stack overflow of the callsign array.  Abort facilities\nparsing on these invalid length values.\n\nSigned-off-by: Dan Rosenberg <drosenberg@vsecurity.com>\nCc: stable@kernel.org\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "net/rose/rose_subr.c||net/rose/rose_subr.c"
    ]
  },
  "patch_diff": {
    "net/rose/rose_subr.c||net/rose/rose_subr.c": [
      "File: net/rose/rose_subr.c -> net/rose/rose_subr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "290:     facilities->source_ndigis = 0;",
      "291:     facilities->dest_ndigis   = 0;",
      "292:     for (pt = p + 2, lg = 0 ; lg < l ; pt += AX25_ADDR_LEN, lg += AX25_ADDR_LEN) {",
      "294:       memcpy(&facilities->dest_digis[facilities->dest_ndigis++], pt, AX25_ADDR_LEN);",
      "296:       memcpy(&facilities->source_digis[facilities->source_ndigis++], pt, AX25_ADDR_LEN);",
      "297:     }",
      "298:    }",
      "299:    p   += l + 2;",
      "",
      "[Removed Lines]",
      "293:      if (pt[6] & AX25_HBIT)",
      "295:      else",
      "",
      "[Added Lines]",
      "293:      if (pt[6] & AX25_HBIT) {",
      "294:       if (facilities->dest_ndigis >= ROSE_MAX_DIGIS)",
      "295:        return -1;",
      "297:      } else {",
      "298:       if (facilities->source_ndigis >= ROSE_MAX_DIGIS)",
      "299:        return -1;",
      "301:      }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "334:   case 0xC0:",
      "335:    l = p[1];",
      "336:    if (*p == FAC_CCITT_DEST_NSAP) {",
      "337:     memcpy(&facilities->source_addr, p + 7, ROSE_ADDR_LEN);",
      "338:     memcpy(callsign, p + 12,   l - 10);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "343:    if (l < 10 || l > 20)",
      "344:     return -1;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "373:    switch (*p) {",
      "375:     len = rose_parse_national(p + 1, facilities, facilities_len - 1);",
      "376:     facilities_len -= len + 1;",
      "377:     p += len + 1;",
      "378:     break;",
      "381:     len = rose_parse_ccitt(p + 1, facilities, facilities_len - 1);",
      "382:     facilities_len -= len + 1;",
      "383:     p += len + 1;",
      "384:     break;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "386:     if (len < 0)",
      "387:      return 0;",
      "394:     if (len < 0)",
      "395:      return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e0bccd315db0c2f919e7fcf9cb60db21d9986f52",
      "candidate_info": {
        "commit_hash": "e0bccd315db0c2f919e7fcf9cb60db21d9986f52",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/e0bccd315db0c2f919e7fcf9cb60db21d9986f52",
        "files": [
          "include/net/rose.h",
          "net/rose/af_rose.c",
          "net/rose/rose_loopback.c",
          "net/rose/rose_route.c",
          "net/rose/rose_subr.c"
        ],
        "message": "rose: Add length checks to CALL_REQUEST parsing\n\nDefine some constant offsets for CALL_REQUEST based on the description\nat <http://www.techfest.com/networking/wan/x25plp.htm> and the\ndefinition of ROSE as using 10-digit (5-byte) addresses.  Use them\nconsistently.  Validate all implicit and explicit facilities lengths.\nValidate the address length byte rather than either trusting or\nassuming its value.\n\nSigned-off-by: Ben Hutchings <ben@decadent.org.uk>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "include/net/rose.h||include/net/rose.h",
          "net/rose/af_rose.c||net/rose/af_rose.c",
          "net/rose/rose_loopback.c||net/rose/rose_loopback.c",
          "net/rose/rose_route.c||net/rose/rose_route.c",
          "net/rose/rose_subr.c||net/rose/rose_subr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/rose/rose_subr.c||net/rose/rose_subr.c"
          ],
          "candidate": [
            "net/rose/rose_subr.c||net/rose/rose_subr.c"
          ]
        }
      },
      "candidate_diff": {
        "include/net/rose.h||include/net/rose.h": [
          "File: include/net/rose.h -> include/net/rose.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: #define ROSE_MIN_LEN   3",
          "17: #define ROSE_GFI   0x10",
          "18: #define ROSE_Q_BIT   0x80",
          "19: #define ROSE_D_BIT   0x40",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: #define ROSE_CALL_REQ_ADDR_LEN_OFF 3",
          "19: #define ROSE_CALL_REQ_DEST_ADDR_OFF 4",
          "20: #define ROSE_CALL_REQ_SRC_ADDR_OFF 9",
          "21: #define ROSE_CALL_REQ_FACILITIES_OFF 14",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "214: extern int  rose_validate_nr(struct sock *, unsigned short);",
          "215: extern void rose_write_internal(struct sock *, int);",
          "216: extern int  rose_decode(struct sk_buff *, int *, int *, int *, int *, int *);",
          "218: extern void rose_disconnect(struct sock *, int, int, int);",
          "",
          "[Removed Lines]",
          "217: extern int  rose_parse_facilities(unsigned char *, struct rose_facilities_struct *);",
          "",
          "[Added Lines]",
          "223: extern int  rose_parse_facilities(unsigned char *, unsigned int, struct rose_facilities_struct *);",
          "",
          "---------------"
        ],
        "net/rose/af_rose.c||net/rose/af_rose.c": [
          "File: net/rose/af_rose.c -> net/rose/af_rose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "978:  struct sock *make;",
          "979:  struct rose_sock *make_rose;",
          "980:  struct rose_facilities_struct facilities;",
          "",
          "[Removed Lines]",
          "981:  int n, len;",
          "",
          "[Added Lines]",
          "981:  int n;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "988:  memset(&facilities, 0x00, sizeof(struct rose_facilities_struct));",
          "993:   rose_transmit_clear_request(neigh, lci, ROSE_INVALID_FACILITY, 76);",
          "994:   return 0;",
          "995:  }",
          "",
          "[Removed Lines]",
          "990:  len  = (((skb->data[3] >> 4) & 0x0F) + 1) >> 1;",
          "991:  len += (((skb->data[3] >> 0) & 0x0F) + 1) >> 1;",
          "992:  if (!rose_parse_facilities(skb->data + len + 4, &facilities)) {",
          "",
          "[Added Lines]",
          "990:  if (!rose_parse_facilities(skb->data + ROSE_CALL_REQ_FACILITIES_OFF,",
          "991:        skb->len - ROSE_CALL_REQ_FACILITIES_OFF,",
          "992:        &facilities)) {",
          "",
          "---------------"
        ],
        "net/rose/rose_loopback.c||net/rose/rose_loopback.c": [
          "File: net/rose/rose_loopback.c -> net/rose/rose_loopback.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:  unsigned int lci_i, lci_o;",
          "75:  while ((skb = skb_dequeue(&loopback_queue)) != NULL) {",
          "76:   lci_i     = ((skb->data[0] << 8) & 0xF00) + ((skb->data[1] << 0) & 0x0FF);",
          "77:   frametype = skb->data[2];",
          "79:   lci_o     = ROSE_DEFAULT_MAXVC + 1 - lci_i;",
          "81:   skb_reset_transport_header(skb);",
          "",
          "[Removed Lines]",
          "78:   dest      = (rose_address *)(skb->data + 4);",
          "",
          "[Added Lines]",
          "76:   if (skb->len < ROSE_MIN_LEN) {",
          "77:    kfree_skb(skb);",
          "78:    continue;",
          "79:   }",
          "82:   if (frametype == ROSE_CALL_REQUEST &&",
          "83:       (skb->len <= ROSE_CALL_REQ_FACILITIES_OFF ||",
          "84:        skb->data[ROSE_CALL_REQ_ADDR_LEN_OFF] !=",
          "85:        ROSE_CALL_REQ_ADDR_LEN_VAL)) {",
          "86:    kfree_skb(skb);",
          "87:    continue;",
          "88:   }",
          "89:   dest      = (rose_address *)(skb->data + ROSE_CALL_REQ_DEST_ADDR_OFF);",
          "",
          "---------------"
        ],
        "net/rose/rose_route.c||net/rose/rose_route.c": [
          "File: net/rose/rose_route.c -> net/rose/rose_route.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "861:  unsigned int lci, new_lci;",
          "862:  unsigned char cause, diagnostic;",
          "863:  struct net_device *dev;",
          "865:  char buf[11];",
          "867: #if 0",
          "",
          "[Removed Lines]",
          "864:  int len, res = 0;",
          "",
          "[Added Lines]",
          "864:  int res = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "869:   return res;",
          "870: #endif",
          "872:  frametype = skb->data[2];",
          "873:  lci = ((skb->data[0] << 8) & 0xF00) + ((skb->data[1] << 0) & 0x0FF);",
          "877:  spin_lock_bh(&rose_neigh_list_lock);",
          "878:  spin_lock_bh(&rose_route_list_lock);",
          "",
          "[Removed Lines]",
          "874:  src_addr  = (rose_address *)(skb->data + 9);",
          "875:  dest_addr = (rose_address *)(skb->data + 4);",
          "",
          "[Added Lines]",
          "872:  if (skb->len < ROSE_MIN_LEN)",
          "873:   return res;",
          "876:  if (frametype == ROSE_CALL_REQUEST &&",
          "877:      (skb->len <= ROSE_CALL_REQ_FACILITIES_OFF ||",
          "878:       skb->data[ROSE_CALL_REQ_ADDR_LEN_OFF] !=",
          "879:       ROSE_CALL_REQ_ADDR_LEN_VAL))",
          "880:   return res;",
          "881:  src_addr  = (rose_address *)(skb->data + ROSE_CALL_REQ_SRC_ADDR_OFF);",
          "882:  dest_addr = (rose_address *)(skb->data + ROSE_CALL_REQ_DEST_ADDR_OFF);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1010:   goto out;",
          "1011:  }",
          "1016:  memset(&facilities, 0x00, sizeof(struct rose_facilities_struct));",
          "1019:   rose_transmit_clear_request(rose_neigh, lci, ROSE_INVALID_FACILITY, 76);",
          "1020:   goto out;",
          "1021:  }",
          "",
          "[Removed Lines]",
          "1013:  len  = (((skb->data[3] >> 4) & 0x0F) + 1) >> 1;",
          "1014:  len += (((skb->data[3] >> 0) & 0x0F) + 1) >> 1;",
          "1018:  if (!rose_parse_facilities(skb->data + len + 4, &facilities)) {",
          "",
          "[Added Lines]",
          "1022:  if (!rose_parse_facilities(skb->data + ROSE_CALL_REQ_FACILITIES_OFF,",
          "1023:        skb->len - ROSE_CALL_REQ_FACILITIES_OFF,",
          "1024:        &facilities)) {",
          "",
          "---------------"
        ],
        "net/rose/rose_subr.c||net/rose/rose_subr.c": [
          "File: net/rose/rose_subr.c -> net/rose/rose_subr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "246:  do {",
          "247:   switch (*p & 0xC0) {",
          "248:   case 0x00:",
          "249:    p   += 2;",
          "250:    n   += 2;",
          "251:    len -= 2;",
          "252:    break;",
          "254:   case 0x40:",
          "255:    if (*p == FAC_NATIONAL_RAND)",
          "256:     facilities->rand = ((p[1] << 8) & 0xFF00) + ((p[2] << 0) & 0x00FF);",
          "257:    p   += 3;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "249:    if (len < 2)",
          "250:     return -1;",
          "257:    if (len < 3)",
          "258:     return -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "260:    break;",
          "262:   case 0x80:",
          "263:    p   += 4;",
          "264:    n   += 4;",
          "265:    len -= 4;",
          "266:    break;",
          "268:   case 0xC0:",
          "269:    l = p[1];",
          "270:    if (*p == FAC_NATIONAL_DEST_DIGI) {",
          "271:     if (!fac_national_digis_received) {",
          "272:      memcpy(&facilities->source_digis[0], p + 2, AX25_ADDR_LEN);",
          "273:      facilities->source_ndigis = 1;",
          "274:     }",
          "275:    }",
          "276:    else if (*p == FAC_NATIONAL_SRC_DIGI) {",
          "277:     if (!fac_national_digis_received) {",
          "278:      memcpy(&facilities->dest_digis[0], p + 2, AX25_ADDR_LEN);",
          "279:      facilities->dest_ndigis = 1;",
          "280:     }",
          "281:    }",
          "282:    else if (*p == FAC_NATIONAL_FAIL_CALL) {",
          "283:     memcpy(&facilities->fail_call, p + 2, AX25_ADDR_LEN);",
          "284:    }",
          "285:    else if (*p == FAC_NATIONAL_FAIL_ADD) {",
          "286:     memcpy(&facilities->fail_addr, p + 3, ROSE_ADDR_LEN);",
          "287:    }",
          "288:    else if (*p == FAC_NATIONAL_DIGIS) {",
          "289:     fac_national_digis_received = 1;",
          "290:     facilities->source_ndigis = 0;",
          "291:     facilities->dest_ndigis   = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "267:    if (len < 4)",
          "268:     return -1;",
          "275:    if (len < 2)",
          "276:     return -1;",
          "278:    if (len < 2 + l)",
          "279:     return -1;",
          "282:      if (l < AX25_ADDR_LEN)",
          "283:       return -1;",
          "290:      if (l < AX25_ADDR_LEN)",
          "291:       return -1;",
          "297:     if (l < AX25_ADDR_LEN)",
          "298:      return -1;",
          "302:     if (l < 1 + ROSE_ADDR_LEN)",
          "303:      return -1;",
          "307:     if (l % AX25_ADDR_LEN)",
          "308:      return -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "319:  do {",
          "320:   switch (*p & 0xC0) {",
          "321:   case 0x00:",
          "322:    p   += 2;",
          "323:    n   += 2;",
          "324:    len -= 2;",
          "325:    break;",
          "327:   case 0x40:",
          "328:    p   += 3;",
          "329:    n   += 3;",
          "330:    len -= 3;",
          "331:    break;",
          "333:   case 0x80:",
          "334:    p   += 4;",
          "335:    n   += 4;",
          "336:    len -= 4;",
          "337:    break;",
          "339:   case 0xC0:",
          "340:    l = p[1];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "342:    if (len < 2)",
          "343:     return -1;",
          "350:    if (len < 3)",
          "351:     return -1;",
          "358:    if (len < 4)",
          "359:     return -1;",
          "366:    if (len < 2)",
          "367:     return -1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "365:  return n;",
          "366: }",
          "369:  struct rose_facilities_struct *facilities)",
          "370: {",
          "371:  int facilities_len, len;",
          "373:  facilities_len = *p++;",
          "376:   return 0;",
          "408:  }",
          "411: }",
          "413: static int rose_create_facilities(unsigned char *buffer, struct rose_sock *rose)",
          "",
          "[Removed Lines]",
          "368: int rose_parse_facilities(unsigned char *p,",
          "375:  if (facilities_len == 0)",
          "378:  while (facilities_len > 0) {",
          "379:   if (*p == 0x00) {",
          "380:    facilities_len--;",
          "381:    p++;",
          "383:    switch (*p) {",
          "385:     len = rose_parse_national(p + 1, facilities, facilities_len - 1);",
          "386:     if (len < 0)",
          "387:      return 0;",
          "388:     facilities_len -= len + 1;",
          "389:     p += len + 1;",
          "390:     break;",
          "393:     len = rose_parse_ccitt(p + 1, facilities, facilities_len - 1);",
          "394:     if (len < 0)",
          "395:      return 0;",
          "396:     facilities_len -= len + 1;",
          "397:     p += len + 1;",
          "398:     break;",
          "400:    default:",
          "401:     printk(KERN_DEBUG \"ROSE: rose_parse_facilities - unknown facilities family %02X\\n\", *p);",
          "402:     facilities_len--;",
          "403:     p++;",
          "404:     break;",
          "405:    }",
          "406:   } else",
          "410:  return 1;",
          "",
          "[Added Lines]",
          "396: int rose_parse_facilities(unsigned char *p, unsigned packet_len,",
          "403:  if (facilities_len == 0 || (unsigned)facilities_len > packet_len)",
          "406:  while (facilities_len >= 3 && *p == 0x00) {",
          "407:   facilities_len--;",
          "408:   p++;",
          "410:   switch (*p) {",
          "412:    len = rose_parse_national(p + 1, facilities, facilities_len - 1);",
          "413:    break;",
          "416:    len = rose_parse_ccitt(p + 1, facilities, facilities_len - 1);",
          "417:    break;",
          "419:   default:",
          "420:    printk(KERN_DEBUG \"ROSE: rose_parse_facilities - unknown facilities family %02X\\n\", *p);",
          "421:    len = 1;",
          "422:    break;",
          "423:   }",
          "425:   if (len < 0)",
          "426:    return 0;",
          "427:   if (WARN_ON(len >= facilities_len))",
          "428:    return 0;",
          "429:   facilities_len -= len + 1;",
          "430:   p += len + 1;",
          "433:  return facilities_len == 0;",
          "",
          "---------------"
        ]
      }
    }
  ]
}