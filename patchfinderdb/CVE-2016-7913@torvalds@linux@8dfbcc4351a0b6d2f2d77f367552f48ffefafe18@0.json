{
  "cve_id": "CVE-2016-7913",
  "cve_desc": "The xc2028_set_config function in drivers/media/tuners/tuner-xc2028.c in the Linux kernel before 4.6 allows local users to gain privileges or cause a denial of service (use-after-free) via vectors involving omission of the firmware name from a certain data structure.",
  "repo": "torvalds/linux",
  "patch_hash": "8dfbcc4351a0b6d2f2d77f367552f48ffefafe18",
  "patch_info": {
    "commit_hash": "8dfbcc4351a0b6d2f2d77f367552f48ffefafe18",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/8dfbcc4351a0b6d2f2d77f367552f48ffefafe18",
    "files": [
      "drivers/media/tuners/tuner-xc2028.c"
    ],
    "message": "[media] xc2028: avoid use after free\n\nIf struct xc2028_config is passed without a firmware name,\nthe following trouble may happen:\n\n[11009.907205] xc2028 5-0061: type set to XCeive xc2028/xc3028 tuner\n[11009.907491] ==================================================================\n[11009.907750] BUG: KASAN: use-after-free in strcmp+0x96/0xb0 at addr ffff8803bd78ab40\n[11009.907992] Read of size 1 by task modprobe/28992\n[11009.907994] =============================================================================\n[11009.907997] BUG kmalloc-16 (Tainted: G        W      ): kasan: bad access detected\n[11009.907999] -----------------------------------------------------------------------------\n\n[11009.908008] INFO: Allocated in xhci_urb_enqueue+0x214/0x14c0 [xhci_hcd] age=0 cpu=3 pid=28992\n[11009.908012] \t___slab_alloc+0x581/0x5b0\n[11009.908014] \t__slab_alloc+0x51/0x90\n[11009.908017] \t__kmalloc+0x27b/0x350\n[11009.908022] \txhci_urb_enqueue+0x214/0x14c0 [xhci_hcd]\n[11009.908026] \tusb_hcd_submit_urb+0x1e8/0x1c60\n[11009.908029] \tusb_submit_urb+0xb0e/0x1200\n[11009.908032] \tusb_serial_generic_write_start+0xb6/0x4c0\n[11009.908035] \tusb_serial_generic_write+0x92/0xc0\n[11009.908039] \tusb_console_write+0x38a/0x560\n[11009.908045] \tcall_console_drivers.constprop.14+0x1ee/0x2c0\n[11009.908051] \tconsole_unlock+0x40d/0x900\n[11009.908056] \tvprintk_emit+0x4b4/0x830\n[11009.908061] \tvprintk_default+0x1f/0x30\n[11009.908064] \tprintk+0x99/0xb5\n[11009.908067] \tkasan_report_error+0x10a/0x550\n[11009.908070] \t__asan_report_load1_noabort+0x43/0x50\n[11009.908074] INFO: Freed in xc2028_set_config+0x90/0x630 [tuner_xc2028] age=1 cpu=3 pid=28992\n[11009.908077] \t__slab_free+0x2ec/0x460\n[11009.908080] \tkfree+0x266/0x280\n[11009.908083] \txc2028_set_config+0x90/0x630 [tuner_xc2028]\n[11009.908086] \txc2028_attach+0x310/0x8a0 [tuner_xc2028]\n[11009.908090] \tem28xx_attach_xc3028.constprop.7+0x1f9/0x30d [em28xx_dvb]\n[11009.908094] \tem28xx_dvb_init.part.3+0x8e4/0x5cf4 [em28xx_dvb]\n[11009.908098] \tem28xx_dvb_init+0x81/0x8a [em28xx_dvb]\n[11009.908101] \tem28xx_register_extension+0xd9/0x190 [em28xx]\n[11009.908105] \tem28xx_dvb_register+0x10/0x1000 [em28xx_dvb]\n[11009.908108] \tdo_one_initcall+0x141/0x300\n[11009.908111] \tdo_init_module+0x1d0/0x5ad\n[11009.908114] \tload_module+0x6666/0x9ba0\n[11009.908117] \tSyS_finit_module+0x108/0x130\n[11009.908120] \tentry_SYSCALL_64_fastpath+0x16/0x76\n[11009.908123] INFO: Slab 0xffffea000ef5e280 objects=25 used=25 fp=0x          (null) flags=0x2ffff8000004080\n[11009.908126] INFO: Object 0xffff8803bd78ab40 @offset=2880 fp=0x0000000000000001\n\n[11009.908130] Bytes b4 ffff8803bd78ab30: 01 00 00 00 2a 07 00 00 9d 28 00 00 01 00 00 00  ....*....(......\n[11009.908133] Object ffff8803bd78ab40: 01 00 00 00 00 00 00 00 b0 1d c3 6a 00 88 ff ff  ...........j....\n[11009.908137] CPU: 3 PID: 28992 Comm: modprobe Tainted: G    B   W       4.5.0-rc1+ #43\n[11009.908140] Hardware name:                  /NUC5i7RYB, BIOS RYBDWi35.86A.0350.2015.0812.1722 08/12/2015\n[11009.908142]  ffff8803bd78a000 ffff8802c273f1b8 ffffffff81932007 ffff8803c6407a80\n[11009.908148]  ffff8802c273f1e8 ffffffff81556759 ffff8803c6407a80 ffffea000ef5e280\n[11009.908153]  ffff8803bd78ab40 dffffc0000000000 ffff8802c273f210 ffffffff8155ccb4\n[11009.908158] Call Trace:\n[11009.908162]  [<ffffffff81932007>] dump_stack+0x4b/0x64\n[11009.908165]  [<ffffffff81556759>] print_trailer+0xf9/0x150\n[11009.908168]  [<ffffffff8155ccb4>] object_err+0x34/0x40\n[11009.908171]  [<ffffffff8155f260>] kasan_report_error+0x230/0x550\n[11009.908175]  [<ffffffff81237d71>] ? trace_hardirqs_off_caller+0x21/0x290\n[11009.908179]  [<ffffffff8155e926>] ? kasan_unpoison_shadow+0x36/0x50\n[11009.908182]  [<ffffffff8155f5c3>] __asan_report_load1_noabort+0x43/0x50\n[11009.908185]  [<ffffffff8155ea00>] ? __asan_register_globals+0x50/0xa0\n[11009.908189]  [<ffffffff8194cea6>] ? strcmp+0x96/0xb0\n[11009.908192]  [<ffffffff8194cea6>] strcmp+0x96/0xb0\n[11009.908196]  [<ffffffffa13ba4ac>] xc2028_set_config+0x15c/0x630 [tuner_xc2028]\n[11009.908200]  [<ffffffffa13bac90>] xc2028_attach+0x310/0x8a0 [tuner_xc2028]\n[11009.908203]  [<ffffffff8155ea78>] ? memset+0x28/0x30\n[11009.908206]  [<ffffffffa13ba980>] ? xc2028_set_config+0x630/0x630 [tuner_xc2028]\n[11009.908211]  [<ffffffffa157a59a>] em28xx_attach_xc3028.constprop.7+0x1f9/0x30d [em28xx_dvb]\n[11009.908215]  [<ffffffffa157aa2a>] ? em28xx_dvb_init.part.3+0x37c/0x5cf4 [em28xx_dvb]\n[11009.908219]  [<ffffffffa157a3a1>] ? hauppauge_hvr930c_init+0x487/0x487 [em28xx_dvb]\n[11009.908222]  [<ffffffffa01795ac>] ? lgdt330x_attach+0x1cc/0x370 [lgdt330x]\n[11009.908226]  [<ffffffffa01793e0>] ? i2c_read_demod_bytes.isra.2+0x210/0x210 [lgdt330x]\n[11009.908230]  [<ffffffff812e87d0>] ? ref_module.part.15+0x10/0x10\n[11009.908233]  [<ffffffff812e56e0>] ? module_assert_mutex_or_preempt+0x80/0x80\n[11009.908238]  [<ffffffffa157af92>] em28xx_dvb_init.part.3+0x8e4/0x5cf4 [em28xx_dvb]\n[11009.908242]  [<ffffffffa157a6ae>] ? em28xx_attach_xc3028.constprop.7+0x30d/0x30d [em28xx_dvb]\n[11009.908245]  [<ffffffff8195222d>] ? string+0x14d/0x1f0\n[11009.908249]  [<ffffffff8195381f>] ? symbol_string+0xff/0x1a0\n[11009.908253]  [<ffffffff81953720>] ? uuid_string+0x6f0/0x6f0\n[11009.908257]  [<ffffffff811a775e>] ? __kernel_text_address+0x7e/0xa0\n[11009.908260]  [<ffffffff8104b02f>] ? print_context_stack+0x7f/0xf0\n[11009.908264]  [<ffffffff812e9846>] ? __module_address+0xb6/0x360\n[11009.908268]  [<ffffffff8137fdc9>] ? is_ftrace_trampoline+0x99/0xe0\n[11009.908271]  [<ffffffff811a775e>] ? __kernel_text_address+0x7e/0xa0\n[11009.908275]  [<ffffffff81240a70>] ? debug_check_no_locks_freed+0x290/0x290\n[11009.908278]  [<ffffffff8104a24b>] ? dump_trace+0x11b/0x300\n[11009.908282]  [<ffffffffa13e8143>] ? em28xx_register_extension+0x23/0x190 [em28xx]\n[11009.908285]  [<ffffffff81237d71>] ? trace_hardirqs_off_caller+0x21/0x290\n[11009.908289]  [<ffffffff8123ff56>] ? trace_hardirqs_on_caller+0x16/0x590\n[11009.908292]  [<ffffffff812404dd>] ? trace_hardirqs_on+0xd/0x10\n[11009.908296]  [<ffffffffa13e8143>] ? em28xx_register_extension+0x23/0x190 [em28xx]\n[11009.908299]  [<ffffffff822dcbb0>] ? mutex_trylock+0x400/0x400\n[11009.908302]  [<ffffffff810021a1>] ? do_one_initcall+0x131/0x300\n[11009.908306]  [<ffffffff81296dc7>] ? call_rcu_sched+0x17/0x20\n[11009.908309]  [<ffffffff8159e708>] ? put_object+0x48/0x70\n[11009.908314]  [<ffffffffa1579f11>] em28xx_dvb_init+0x81/0x8a [em28xx_dvb]\n[11009.908317]  [<ffffffffa13e81f9>] em28xx_register_extension+0xd9/0x190 [em28xx]\n[11009.908320]  [<ffffffffa0150000>] ? 0xffffffffa0150000\n[11009.908324]  [<ffffffffa0150010>] em28xx_dvb_register+0x10/0x1000 [em28xx_dvb]\n[11009.908327]  [<ffffffff810021b1>] do_one_initcall+0x141/0x300\n[11009.908330]  [<ffffffff81002070>] ? try_to_run_init_process+0x40/0x40\n[11009.908333]  [<ffffffff8123ff56>] ? trace_hardirqs_on_caller+0x16/0x590\n[11009.908337]  [<ffffffff8155e926>] ? kasan_unpoison_shadow+0x36/0x50\n[11009.908340]  [<ffffffff8155e926>] ? kasan_unpoison_shadow+0x36/0x50\n[11009.908343]  [<ffffffff8155e926>] ? kasan_unpoison_shadow+0x36/0x50\n[11009.908346]  [<ffffffff8155ea37>] ? __asan_register_globals+0x87/0xa0\n[11009.908350]  [<ffffffff8144da7b>] do_init_module+0x1d0/0x5ad\n[11009.908353]  [<ffffffff812f2626>] load_module+0x6666/0x9ba0\n[11009.908356]  [<ffffffff812e9c90>] ? symbol_put_addr+0x50/0x50\n[11009.908361]  [<ffffffffa1580037>] ? em28xx_dvb_init.part.3+0x5989/0x5cf4 [em28xx_dvb]\n[11009.908366]  [<ffffffff812ebfc0>] ? module_frob_arch_sections+0x20/0x20\n[11009.908369]  [<ffffffff815bc940>] ? open_exec+0x50/0x50\n[11009.908374]  [<ffffffff811671bb>] ? ns_capable+0x5b/0xd0\n[11009.908377]  [<ffffffff812f5e58>] SyS_finit_module+0x108/0x130\n[11009.908379]  [<ffffffff812f5d50>] ? SyS_init_module+0x1f0/0x1f0\n[11009.908383]  [<ffffffff81004044>] ? lockdep_sys_exit_thunk+0x12/0x14\n[11009.908394]  [<ffffffff822e6936>] entry_SYSCALL_64_fastpath+0x16/0x76\n[11009.908396] Memory state around the buggy address:\n[11009.908398]  ffff8803bd78aa00: 00 00 fc fc fc fc fc fc fc fc fc fc fc fc fc fc\n[11009.908401]  ffff8803bd78aa80: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc\n[11009.908403] >ffff8803bd78ab00: fc fc fc fc fc fc fc fc 00 00 fc fc fc fc fc fc\n[11009.908405]                                            ^\n[11009.908407]  ffff8803bd78ab80: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc\n[11009.908409]  ffff8803bd78ac00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc\n[11009.908411] ==================================================================\n\nIn order to avoid it, let's set the cached value of the firmware\nname to NULL after freeing it. While here, return an error if\nthe memory allocation fails.\n\nSigned-off-by: Mauro Carvalho Chehab <mchehab@osg.samsung.com>",
    "before_after_code_files": [
      "drivers/medituners/tuner-xc2028.c||drivers/media/tuners/tuner-xc2028.c"
    ]
  },
  "patch_diff": {
    "drivers/medituners/tuner-xc2028.c||drivers/media/tuners/tuner-xc2028.c": [
      "File: drivers/medituners/tuner-xc2028.c -> drivers/media/tuners/tuner-xc2028.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1406:  priv->ctrl.fname = NULL;",
      "1411:    return -ENOMEM;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0962a763327bd33fd18c3a4d0a613cad0976a930",
      "candidate_info": {
        "commit_hash": "0962a763327bd33fd18c3a4d0a613cad0976a930",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/0962a763327bd33fd18c3a4d0a613cad0976a930",
        "files": [
          "drivers/media/usb/em28xx/em28xx-video.c"
        ],
        "message": "[media] em28xx: avoid divide by zero error\n\n[ 1841.243670] divide error: 0000 [#1] SMP KASAN\n[ 1841.243994] Modules linked in: em28xx_rc rc_core tda18271 drxk em28xx_dvb dvb_core em28xx_alsa mt9v011 em28xx_v4l videobuf2_vmalloc videobuf2_memops videobuf2_v4l2 videobuf2_core em28xx tveeprom v4l2_common videodev media cpufreq_powersave cpufreq_conservative cpufreq_userspace cpufreq_stats parport_pc ppdev lp parport snd_hda_codec_hdmi intel_rapl x86_pkg_temp_thermal intel_powerclamp coretemp kvm_intel kvm iTCO_wdt iTCO_vendor_support irqbypass crct10dif_pclmul crc32_pclmul crc32c_intel ghash_clmulni_intel sha256_ssse3 sha256_generic hmac drbg i915 snd_hda_codec_realtek snd_hda_codec_generic aesni_intel aes_x86_64 lrw gf128mul glue_helper ablk_helper cryptd btusb i2c_algo_bit snd_hda_intel btrtl drm_kms_helper btbcm evdev snd_hda_codec btintel psmouse bluetooth pcspkr snd_hwdep sg drm serio_raw\n[ 1841.244845]  snd_hda_core snd_pcm mei_me rfkill snd_timer mei snd lpc_ich soundcore shpchp i2c_i801 mfd_core battery dw_dmac i2c_designware_platform i2c_designware_core dw_dmac_core video acpi_pad button tpm_tis tpm ext4 crc16 mbcache jbd2 dm_mod hid_generic usbhid sd_mod ahci libahci libata ehci_pci e1000e xhci_pci ptp scsi_mod ehci_hcd xhci_hcd pps_core fan thermal sdhci_acpi sdhci mmc_core i2c_hid hid [last unloaded: tveeprom]\n[ 1841.245342] CPU: 2 PID: 38 Comm: kworker/2:1 Tainted: G        W       4.5.0-rc1+ #43\n[ 1841.245413] Hardware name:                  /NUC5i7RYB, BIOS RYBDWi35.86A.0350.2015.0812.1722 08/12/2015\n[ 1841.245503] Workqueue: events request_module_async [em28xx]\n[ 1841.245557] task: ffff88009df10000 ti: ffff88009df18000 task.ti: ffff88009df18000\n[ 1841.245626] RIP: 0010:[<ffffffffa135a0ad>]  [<ffffffffa135a0ad>] size_to_scale+0xed/0x2c0 [em28xx_v4l]\n[ 1841.245714] RSP: 0018:ffff88009df1faa8  EFLAGS: 00010246\n[ 1841.245756] RAX: 0000000000000000 RBX: 0000000000000000 RCX: ffff8803bb933b38\n[ 1841.245815] RDX: 0000000000000000 RSI: 0000000000000000 RDI: ffff8803bb933b00\n[ 1841.245879] RBP: ffff88009df1fad8 R08: ffff8803bb933b3c R09: 1ffff10077726760\n[ 1841.245944] R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000000\n[ 1841.246006] R13: 0000000000000000 R14: dffffc0000000000 R15: ffff8803b391a130\n[ 1841.246071] FS:  0000000000000000(0000) GS:ffff8803c6900000(0000) knlGS:0000000000000000\n[ 1841.246141] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[ 1841.246194] CR2: 0000000001d97008 CR3: 00000003bdd85000 CR4: 00000000003406e0\n[ 1841.246256] Stack:\n[ 1841.246278]  0000000000000246 ffff8803bb9321f0 ffff8803bb932270 ffffffffa136f7a0\n[ 1841.246359]  0000000000000000 ffff8803bb932130 ffff88009df1fb20 ffffffffa13646a0\n[ 1841.246439]  ffffffffa127f206 ffff8803bb932130 ffff8803bb932130 ffff8803b391a130\n[ 1841.246517] Call Trace:\n[ 1841.246548]  [<ffffffffa13646a0>] em28xx_set_video_format+0x140/0x1e0 [em28xx_v4l]\n\nSigned-off-by: Mauro Carvalho Chehab <mchehab@osg.samsung.com>",
        "before_after_code_files": [
          "drivers/mediusb/em28xx/em28xx-video.c||drivers/media/usem28xx/em28xx-video.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/mediusb/em28xx/em28xx-video.c||drivers/media/usem28xx/em28xx-video.c": [
          "File: drivers/mediusb/em28xx/em28xx-video.c -> drivers/media/usem28xx/em28xx-video.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "210bd104c6acd31c3c6b8b075b3f12d4a9f6b60d",
      "candidate_info": {
        "commit_hash": "210bd104c6acd31c3c6b8b075b3f12d4a9f6b60d",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/210bd104c6acd31c3c6b8b075b3f12d4a9f6b60d",
        "files": [
          "drivers/media/tuners/tuner-xc2028.c"
        ],
        "message": "[media] xc2028: unlock on error in xc2028_set_config()\n\nWe have to unlock before returning -ENOMEM.\n\nFixes: 8dfbcc4351a0 ('[media] xc2028: avoid use after free')\n\nSigned-off-by: Dan Carpenter <dan.carpenter@oracle.com>\nSigned-off-by: Mauro Carvalho Chehab <mchehab@osg.samsung.com>",
        "before_after_code_files": [
          "drivers/media/tuners/tuner-xc2028.c||drivers/media/tuners/tuner-xc2028.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/medituners/tuner-xc2028.c||drivers/media/tuners/tuner-xc2028.c"
          ],
          "candidate": [
            "drivers/media/tuners/tuner-xc2028.c||drivers/media/tuners/tuner-xc2028.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/media/tuners/tuner-xc2028.c||drivers/media/tuners/tuner-xc2028.c": [
          "File: drivers/media/tuners/tuner-xc2028.c -> drivers/media/tuners/tuner-xc2028.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1407:  memcpy(&priv->ctrl, p, sizeof(priv->ctrl));",
          "1408:  if (p->fname) {",
          "1409:   priv->ctrl.fname = kstrdup(p->fname, GFP_KERNEL);",
          "1412:  }",
          "",
          "[Removed Lines]",
          "1410:   if (priv->ctrl.fname == NULL)",
          "1411:    return -ENOMEM;",
          "",
          "[Added Lines]",
          "1410:   if (priv->ctrl.fname == NULL) {",
          "1411:    rc = -ENOMEM;",
          "1412:    goto unlock;",
          "1413:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1440:   } else",
          "1441:    priv->state = XC2028_WAITING_FIRMWARE;",
          "1442:  }",
          "1443:  mutex_unlock(&priv->lock);",
          "1445:  return rc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1445: unlock:",
          "",
          "---------------"
        ]
      }
    }
  ]
}