{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8122c6e9be146d8146da5357060e429afa3d4b4c",
      "candidate_info": {
        "commit_hash": "8122c6e9be146d8146da5357060e429afa3d4b4c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8122c6e9be146d8146da5357060e429afa3d4b4c",
        "files": [
          "ext/fts5/fts5_index.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix variable declaration issue seen with MSVC.\n\nFossilOrigin-Name: 8a6fe3066cf0599fcf2960e8fb3ae39e4e7a61ec81e8ec71d0b5910aee2c16f6",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5734: static int fts5TestUtf8(const char *z, int n){",
          "5736:   int i = 0;",
          "5737:   while( i<n ){",
          "5738:     if( (z[i] & 0x80)==0x00 ){",
          "5739:       i++;",
          "",
          "[Removed Lines]",
          "5735:   assert_nc( n>0 );",
          "",
          "[Added Lines]",
          "5736:   assert_nc( n>0 );",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9f0f5d593a383ec2bebb6513ad566813f5b3dc6f052c61bcd76e8ac557bbb062",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a14de9136722f3a4dd17c4071785f34f68549806",
      "candidate_info": {
        "commit_hash": "a14de9136722f3a4dd17c4071785f34f68549806",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a14de9136722f3a4dd17c4071785f34f68549806",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in"
        ],
        "message": "Improvements to sqlite3_open_v2() documentation.\n\nFossilOrigin-Name: 4c4fd62a092b8db6398c64a92c9ff35915eedcce1079a77aeda81811d94096c4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a684d4ef08a48962c632b598242f5e34c9b2fa3ad6339023fbce8ac91582b5e3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ]
      }
    },
    {
      "candidate_hash": "6e1c45ef2ee3aaea9e1f89e1cfa036c0f112e92c",
      "candidate_info": {
        "commit_hash": "6e1c45ef2ee3aaea9e1f89e1cfa036c0f112e92c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6e1c45ef2ee3aaea9e1f89e1cfa036c0f112e92c",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzcheck.c"
        ],
        "message": "Add the --vdbe-debug option to fuzzcheck.\n\nFossilOrigin-Name: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ae7cbb246bff3717c283869ccf27ce83611422f3801176819465a8d96f6481bf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1320: \"  --sqlid N            Use only SQL where sqlid=N\\n\"",
          "1321: \"  --timeout N          Abort if any single test needs more than N seconds\\n\"",
          "1322: \"  -v|--verbose         Increased output.  Repeat for more output.\\n\"",
          "1323:   );",
          "1324: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1323: \"  --vdbe-debug         Activate VDBE debugging.\\n\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1475:         fatalError(\"timeout is not available on non-unix systems\");",
          "1476: #endif",
          "1477:       }else",
          "1478:       if( strcmp(z,\"verbose\")==0 ){",
          "1479:         quietFlag = 0;",
          "1480:         verboseFlag++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1479:       if( strcmp(z,\"vdbe-debug\")==0 ){",
          "1480:         bVdbeDebug = 1;",
          "1481:       }else",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1821: #ifdef SQLITE_TESTCTRL_PRNG_SEED",
          "1822:           sqlite3_test_control(SQLITE_TESTCTRL_PRNG_SEED, 1, db);",
          "1823: #endif",
          "1824:           do{",
          "1825:             runSql(db, (char*)pSql->a, runFlags);",
          "1826:           }while( timeoutTest );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1828:           if( bVdbeDebug ){",
          "1829:             sqlite3_exec(db, \"PRAGMA vdbe_debug=ON\", 0, 0, 0);",
          "1830:           }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "95063d8c90b8525d3884b598c417c2b281cbeb25",
      "candidate_info": {
        "commit_hash": "95063d8c90b8525d3884b598c417c2b281cbeb25",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/95063d8c90b8525d3884b598c417c2b281cbeb25",
        "files": [
          "ext/misc/cksumvfs.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Do not allow page_size changes on an active cksumvfs database.\n\nFossilOrigin-Name: 2c17cdce26fd935e6d81ff828f4670291fc014013c93b2a1578506598345ee86",
        "before_after_code_files": [
          "ext/misc/cksumvfs.c||ext/misc/cksumvfs.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/cksumvfs.c||ext/misc/cksumvfs.c": [
          "File: ext/misc/cksumvfs.c -> ext/misc/cksumvfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "494:   if( op==SQLITE_FCNTL_PRAGMA ){",
          "495:     char **azArg = (char**)pArg;",
          "496:     assert( azArg[1]!=0 );",
          "498:       char *zArg = azArg[2];",
          "499:       if( zArg!=0 ){",
          "500:         if( (zArg[0]>='1' && zArg[0]<='9')",
          "",
          "[Removed Lines]",
          "497:     if( strcmp(azArg[1],\"checksum_verification\")==0 ){",
          "",
          "[Added Lines]",
          "497:     if( sqlite3_stricmp(azArg[1],\"checksum_verification\")==0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "509:       }",
          "510:       azArg[0] = sqlite3_mprintf(\"%d\",p->verifyCksm);",
          "511:       return SQLITE_OK;",
          "512:     }",
          "513:   }",
          "514:   rc = pFile->pMethods->xFileControl(pFile, op, pArg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "512:     }else if( p->computeCksm && azArg[2]!=0",
          "513:            && sqlite3_stricmp(azArg[1], \"page_size\")==0 ){",
          "515:       return SQLITE_OK;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0dcf002463f5931c3875d2038d2b97298f1800b1cdfa70485d6430ab758f3b25",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "541ef2c36c3c7a42bb563cf80f73681c460a25d1",
      "candidate_info": {
        "commit_hash": "541ef2c36c3c7a42bb563cf80f73681c460a25d1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/541ef2c36c3c7a42bb563cf80f73681c460a25d1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "test/shell1.test"
        ],
        "message": "Enhance the \".filectrl\" command in the CLI to support the --schema option.\n\nFossilOrigin-Name: 698d40db58b76f4094687d46b5c6292702a62168054f9e6a70ee86650a6635f7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "test/shell1.test||test/shell1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: abc1aad74f7b6a1e72fb09936239f2224aa942d16296c6a3de0b8daef4bc8471",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3588:   \".expert                  EXPERIMENTAL. Suggest indexes for queries\",",
          "3589:   \".explain ?on|off|auto?   Change the EXPLAIN formatting mode.  Default: auto\",",
          "3590:   \".filectrl CMD ...        Run various sqlite3_file_control() operations\",",
          "3592:   \".fullschema ?--indent?   Show schema and the content of sqlite_stat tables\",",
          "3593:   \".headers on|off          Turn display of headers on or off\",",
          "3594:   \".help ?-all? ?PATTERN?   Show help text for PATTERN\",",
          "",
          "[Removed Lines]",
          "3591:   \"                           Run \\\".filectrl\\\" with no arguments for details\",",
          "",
          "[Added Lines]",
          "3591:   \"   --schema SCHEMA         Use SCHEMA instead of \\\"main\\\"\",",
          "3592:   \"   --help                  Show CMD details\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7489:       { \"tempfilename\",   SQLITE_FCNTL_TEMPFILENAME,    \"\"               },",
          "7490:       { \"has_moved\",      SQLITE_FCNTL_HAS_MOVED,       \"\"               },",
          "7491:       { \"lock_timeout\",   SQLITE_FCNTL_LOCK_TIMEOUT,    \"MILLISEC\"       },",
          "7492:     };",
          "7493:     int filectrl = -1;",
          "7494:     int iCtrl = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7493:       { \"reserve_bytes\",  SQLITE_FCNTL_RESERVE_BYTES,   \"[N]\"            },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7497:     int n2, i;",
          "7498:     const char *zCmd = 0;",
          "7500:     open_db(p, 0);",
          "7501:     zCmd = nArg>=2 ? azArg[1] : \"help\";",
          "7504:     if( zCmd[0]=='-' && zCmd[1] ){",
          "7505:       zCmd++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7501:     const char *zSchema = 0;",
          "7506:     if( zCmd[0]=='-'",
          "7507:      && (strcmp(zCmd,\"--schema\")==0 || strcmp(zCmd,\"-schema\")==0)",
          "7508:      && nArg>=4",
          "7509:     ){",
          "7510:       zSchema = azArg[2];",
          "7511:       for(i=3; i<nArg; i++) azArg[i-2] = azArg[i];",
          "7512:       nArg -= 2;",
          "7513:       zCmd = azArg[1];",
          "7514:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7541:         case SQLITE_FCNTL_SIZE_LIMIT: {",
          "7542:           if( nArg!=2 && nArg!=3 ) break;",
          "7543:           iRes = nArg==3 ? integerValue(azArg[2]) : -1;",
          "7545:           isOk = 1;",
          "7546:           break;",
          "7547:         }",
          "",
          "[Removed Lines]",
          "7544:           sqlite3_file_control(p->db, 0, SQLITE_FCNTL_SIZE_LIMIT, &iRes);",
          "",
          "[Added Lines]",
          "7557:           sqlite3_file_control(p->db, zSchema, SQLITE_FCNTL_SIZE_LIMIT, &iRes);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7550:           int x;",
          "7551:           if( nArg!=3 ) break;",
          "7552:           x = (int)integerValue(azArg[2]);",
          "7554:           isOk = 2;",
          "7555:           break;",
          "7556:         }",
          "",
          "[Removed Lines]",
          "7553:           sqlite3_file_control(p->db, 0, filectrl, &x);",
          "",
          "[Added Lines]",
          "7566:           sqlite3_file_control(p->db, zSchema, filectrl, &x);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "7559:           int x;",
          "7560:           if( nArg!=2 && nArg!=3 ) break;",
          "7561:           x = nArg==3 ? booleanValue(azArg[2]) : -1;",
          "7563:           iRes = x;",
          "7564:           isOk = 1;",
          "7565:           break;",
          "",
          "[Removed Lines]",
          "7562:           sqlite3_file_control(p->db, 0, filectrl, &x);",
          "",
          "[Added Lines]",
          "7575:           sqlite3_file_control(p->db, zSchema, filectrl, &x);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "7567:         case SQLITE_FCNTL_HAS_MOVED: {",
          "7568:           int x;",
          "7569:           if( nArg!=2 ) break;",
          "7571:           iRes = x;",
          "7572:           isOk = 1;",
          "7573:           break;",
          "",
          "[Removed Lines]",
          "7570:           sqlite3_file_control(p->db, 0, filectrl, &x);",
          "",
          "[Added Lines]",
          "7583:           sqlite3_file_control(p->db, zSchema, filectrl, &x);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "7575:         case SQLITE_FCNTL_TEMPFILENAME: {",
          "7576:           char *z = 0;",
          "7577:           if( nArg!=2 ) break;",
          "7579:           if( z ){",
          "7580:             utf8_printf(p->out, \"%s\\n\", z);",
          "7581:             sqlite3_free(z);",
          "",
          "[Removed Lines]",
          "7578:           sqlite3_file_control(p->db, 0, filectrl, &z);",
          "",
          "[Added Lines]",
          "7591:           sqlite3_file_control(p->db, zSchema, filectrl, &z);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "7583:           isOk = 2;",
          "7584:           break;",
          "7585:         }",
          "7586:       }",
          "7587:     }",
          "7588:     if( isOk==0 && iCtrl>=0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7599:         case SQLITE_FCNTL_RESERVE_BYTES: {",
          "7600:           int x;",
          "7601:           if( nArg>=3 ){",
          "7602:             x = atoi(azArg[2]);",
          "7603:             sqlite3_file_control(p->db, zSchema, filectrl, &x);",
          "7604:           }",
          "7605:           x = -1;",
          "7606:           sqlite3_file_control(p->db, zSchema, filectrl, &x);",
          "7607:           utf8_printf(p->out,\"%d\\n\", x);",
          "7608:           isOk = 2;",
          "7609:           break;",
          "7610:         }",
          "",
          "---------------"
        ],
        "test/shell1.test||test/shell1.test": [
          "File: test/shell1.test -> test/shell1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "493: do_test shell1-3.15.3 {",
          "494:   # too many arguments",
          "495:   catchcmd \"test.db\" \".output FOO BAD\"",
          "498: # .output stdout         Send output to the screen",
          "499: do_test shell1-3.16.1 {",
          "",
          "[Removed Lines]",
          "496: } {1 {Usage: .output [-e|-x|FILE]}}",
          "",
          "[Added Lines]",
          "496: } {1 {ERROR: extra parameter: \"BAD\".  Usage:",
          "497: .output ?FILE?           Send output to FILE or stdout if FILE is omitted",
          "498:    If FILE begins with '|' then open it as a pipe.",
          "499:    Options:",
          "500:      --bom                 Prefix output with a UTF8 byte-order mark",
          "501:      -e                    Send output to the system text editor",
          "502:      -x                    Send output as CSV to a spreadsheet",
          "503: child process exited abnormally}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "502: do_test shell1-3.16.2 {",
          "503:   # too many arguments",
          "504:   catchcmd \"test.db\" \".output stdout BAD\"",
          "507: # .prompt MAIN CONTINUE  Replace the standard prompts",
          "508: do_test shell1-3.17.1 {",
          "",
          "[Removed Lines]",
          "505: } {1 {Usage: .output [-e|-x|FILE]}}",
          "",
          "[Added Lines]",
          "512: } {1 {ERROR: extra parameter: \"BAD\".  Usage:",
          "513: .output ?FILE?           Send output to FILE or stdout if FILE is omitted",
          "514:    If FILE begins with '|' then open it as a pipe.",
          "515:    Options:",
          "516:      --bom                 Prefix output with a UTF8 byte-order mark",
          "517:      -e                    Send output to the system text editor",
          "518:      -x                    Send output as CSV to a spreadsheet",
          "519: child process exited abnormally}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}