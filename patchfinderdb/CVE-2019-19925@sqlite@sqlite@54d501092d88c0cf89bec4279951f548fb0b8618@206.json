{
  "cve_id": "CVE-2019-19925",
  "cve_desc": "zipfileUpdate in ext/misc/zipfile.c in SQLite 3.30.1 mishandles a NULL pathname during an update of a ZIP archive.",
  "repo": "sqlite/sqlite",
  "patch_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
  "patch_info": {
    "commit_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/54d501092d88c0cf89bec4279951f548fb0b8618",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid",
      "test/zipfile.test"
    ],
    "message": "Fix the zipfile extension so that INSERT works even if the pathname of the file being inserted is a NULL.  Bug discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid",
      "test/zipfile.test||test/zipfile.test"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1620:     if( rc==SQLITE_OK ){",
      "1621:       zPath = (const char*)sqlite3_value_text(apVal[2]);",
      "1622:       nPath = (int)strlen(zPath);",
      "1623:       mTime = zipfileGetTime(apVal[4]);",
      "1624:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1622:       if( zPath==0 ) zPath = \"\";",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/zipfile.test||test/zipfile.test": [
      "File: test/zipfile.test -> test/zipfile.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "795:   } {. ./x1.txt ./x2.txt}",
      "796: }",
      "798: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "798: # 2019-12-18 Yongheng and Rui fuzzer",
      "799: #",
      "800: do_execsql_test 13.10 {",
      "801:   DROP TABLE IF EXISTS t0;",
      "802:   DROP TABLE IF EXISTS t1;",
      "803:   CREATE TABLE t0(a,b,c,d,e,f,g);",
      "804:   REPLACE INTO t0(c,b,f) VALUES(10,10,10);",
      "805:   CREATE VIRTUAL TABLE t1 USING zipfile('h.zip');",
      "806:   REPLACE INTO t1 SELECT * FROM t0;",
      "807:   SELECT quote(name),quote(mode),quote(mtime),quote(sz),quote(rawdata),",
      "808:          quote(data),quote(method) FROM t1;",
      "809: } {'' 10 10 2 X'3130' X'3130' 0}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "12bf7127073c26905ef40ae2cf972ffe95d01b6b",
      "candidate_info": {
        "commit_hash": "12bf7127073c26905ef40ae2cf972ffe95d01b6b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/12bf7127073c26905ef40ae2cf972ffe95d01b6b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h"
        ],
        "message": "Change the COLFLAG_NOTAVAIL bitmask so that it fits in the single-byte Walker.eCode field.\n\nFossilOrigin-Name: 53847f5c28bdecfbc7b08685d4dcd0565526f6191491b4827c3c966a4b8d4a85",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 18c3a17dc8c07b12427e372ff86668d5bcb6b34d653c46c48561ed576acefa5b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ]
      }
    },
    {
      "candidate_hash": "455100533256d5bd5d67f9bfac7b6bdabeeacceb",
      "candidate_info": {
        "commit_hash": "455100533256d5bd5d67f9bfac7b6bdabeeacceb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/455100533256d5bd5d67f9bfac7b6bdabeeacceb",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "Load all the latest dbsqlfuzz finds into test/fuzzdata8.db.\n\nFossilOrigin-Name: e744d2dd93a78235e6c1d938b08232183b5ce7e355d1b7daf2199e585b03c106",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 97704cb7d29fa7cc4ea9a6761a7844c1946d637ea2b22d287fc787ae0f63c407",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "25f5383cb8d5ec09b93ae235fd42fcd86e20af54",
      "candidate_info": {
        "commit_hash": "25f5383cb8d5ec09b93ae235fd42fcd86e20af54",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/25f5383cb8d5ec09b93ae235fd42fcd86e20af54",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/sessionfuzz.c"
        ],
        "message": "Remove a debugging printf() left in test/sessionfuzz.c.\n\nFossilOrigin-Name: 73c4abc90264355f3ea6e8c34e5aad6ed665b70fb136c4d416e2a98e46562bbd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/sessionfuzz.c||test/sessionfuzz.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0f2129f59f7df929106e2af876c2976dea6528c1dc1850d64cddb256f20e121a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/sessionfuzz.c||test/sessionfuzz.c": [
          "File: test/sessionfuzz.c -> test/sessionfuzz.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "830: ){",
          "831:   (void)NotUsed;",
          "832:   (void)p;",
          "834:   return SQLITE_CHANGESET_OMIT;",
          "835: }",
          "",
          "[Removed Lines]",
          "833:   printf(\"Conflict %d\\n\", eConflict);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e25007602b08bc237d828260514b4fe12b901ad4",
      "candidate_info": {
        "commit_hash": "e25007602b08bc237d828260514b4fe12b901ad4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e25007602b08bc237d828260514b4fe12b901ad4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Do not use the %lld printf conversion in the platform printf() as some legacy platforms do not support it.\n\nFossilOrigin-Name: f8696b60eec0dcacfe92d9a31cbf1436d674140e5447de0cd1c2f52bff6c2be4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: eaa34626e497d3af132dd8f13eddbbda89365d369ed43212a5f788175b3d6198",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "7396:       utf8_printf(p->out, \"Usage: .filectrl %s %s\\n\", zCmd,aCtrl[iCtrl].zUsage);",
          "7397:       rc = 1;",
          "7398:     }else if( isOk==1 ){",
          "7400:     }",
          "7401:   }else",
          "",
          "[Removed Lines]",
          "7399:       raw_printf(p->out, \"%lld\\n\", iRes);",
          "",
          "[Added Lines]",
          "7399:       char zBuf[100];",
          "7400:       sqlite3_snprintf(sizeof(zBuf), zBuf, \"%lld\", iRes);",
          "7401:       raw_printf(p->out, \"%s\\n\", zBuf);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b6c947251bed7518f5c617892c8ff9d53c68c6a9",
      "candidate_info": {
        "commit_hash": "b6c947251bed7518f5c617892c8ff9d53c68c6a9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b6c947251bed7518f5c617892c8ff9d53c68c6a9",
        "files": [
          "ext/rtree/rtreeI.test",
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "Fix to the rowvalue logic that avoids disabling rowvalue inequality contraints on a virtual table when the virtual table sets the omit flag. The logic has been incorrect since row-values were added.  However, this does not come up often as very few virtual tables implement inequality constraints using the omit flag.  Ticket [f096d191b6641daa]\n\nFossilOrigin-Name: b7810062ec2489e1c5ca6638dbeb0892e4ce376c5c1834a31d1a332ebab8a871",
        "before_after_code_files": [
          "ext/rtree/rtreeI.test||ext/rtree/rtreeI.test",
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtreeI.test||ext/rtree/rtreeI.test": [
          "File: ext/rtree/rtreeI.test -> ext/rtree/rtreeI.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019-12-05",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # Additional test cases",
          "13: if {![info exists testdir]} {",
          "14:   set testdir [file join [file dirname [info script]] .. .. test]",
          "15: }",
          "16: source [file join [file dirname [info script]] rtree_util.tcl]",
          "17: source $testdir/tester.tcl",
          "18: ifcapable !rtree { finish_test ; return }",
          "20: # The following is a test of rowvalue handling on virtual tables that",
          "21: # deal with inequalities and that set the OMIT flag on terms of the",
          "22: # WHERE clause.  This is not specific to rtree.  We just use rtree because",
          "23: # it is a convenient test platform since it has all the right",
          "24: # characteristics.",
          "25: #",
          "26: do_execsql_test rtreeI-1.10 {",
          "27:   CREATE TABLE t1(a);",
          "28:   INSERT INTO t1 VALUES(2);",
          "29:   CREATE VIRTUAL TABLE t2 USING rtree(id,x0,x1);",
          "30:   INSERT INTO t2(id,x0,x1) VALUES(1,2,3);",
          "31: } {}",
          "32: do_execsql_test rtreeI-1.20 {",
          "33:   SELECT 123 FROM t1, t2 WHERE (a,0)>(x0,0);",
          "34: } {}",
          "35: do_execsql_test rtreeI-1.21 {",
          "36:   SELECT 123 FROM t1, t2 WHERE (a,0.1)>(x0,0);",
          "37: } {123}",
          "38: do_execsql_test rtreeI-1.22 {",
          "39:   SELECT 123 FROM t1, t2 WHERE (a,0)>=(x0,0);",
          "40: } {123}",
          "41: do_execsql_test rtreeI-1.23 {",
          "42:   SELECT 123 FROM t1, t2 WHERE (a,0)<=(x0,0);",
          "43: } {123}",
          "44: do_execsql_test rtreeI-1.24 {",
          "45:   SELECT 123 FROM t1, t2 WHERE (a,0)<(x0,0);",
          "46: } {}",
          "47: do_execsql_test rtreeI-1.30 {",
          "48:   SELECT 123 FROM t1, t2 WHERE (x0,0)<(a,0);",
          "49: } {}",
          "50: do_execsql_test rtreeI-1.31 {",
          "51:   SELECT 123 FROM t1, t2 WHERE (x0,0)<(a,0.1);",
          "52: } {123}",
          "53: do_execsql_test rtreeI-1.40 {",
          "54:   SELECT 123 FROM t1, t2 WHERE x1<5 AND id<99 AND (a,0)>(x0,0);",
          "55: } {}",
          "56: do_execsql_test rtreeI-1.41 {",
          "57:   SELECT 123 FROM t1, t2 WHERE x1<5 AND id<99 AND (a,0.5)>(x0,0);",
          "58: } {123}",
          "59: do_execsql_test rtreeI-1.42 {",
          "60:   SELECT 123 FROM t1, t2 WHERE x1<5 AND id<99 AND (a,0)>=(x0,0);",
          "61: } {123}",
          "62: do_execsql_test rtreeI-1.43 {",
          "63:   SELECT 123 FROM t1, t2 WHERE x1<5 AND id<99 AND (a,0)<(x0,0);",
          "64: } {}",
          "65: do_execsql_test rtreeI-1.50 {",
          "66:   SELECT 123 FROM t1, t2 WHERE 5>x1 AND 99>id AND (x0,0)<(a,0);",
          "67: } {}",
          "68: do_execsql_test rtreeI-1.51 {",
          "69:   SELECT 123 FROM t1, t2 WHERE 5>x1 AND 99>id AND (x0,0)<(a,0.5);",
          "70: } {123}",
          "74: finish_test",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7d3e3f6e7e55da41bf776fab094df54fb6a33b2967881d3184cf854c8a637518",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1021:       if( op & (WO_LT|WO_LE|WO_GT|WO_GE)",
          "1022:        && sqlite3ExprIsVector(pTerm->pExpr->pRight)",
          "1023:       ){",
          "1025:         if( op==WO_LT ) pIdxCons[j].op = WO_LE;",
          "1026:         if( op==WO_GT ) pIdxCons[j].op = WO_GE;",
          "1027:       }",
          "",
          "[Removed Lines]",
          "1024:         if( i<16 ) mNoOmit |= (1 << i);",
          "",
          "[Added Lines]",
          "1024:         testcase( j!=i );",
          "1025:         if( j<16 ) mNoOmit |= (1 << j);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3202:       if( iTerm>mxTerm ) mxTerm = iTerm;",
          "3203:       testcase( iTerm==15 );",
          "3204:       testcase( iTerm==16 );",
          "3206:       if( (pTerm->eOperator & WO_IN)!=0 ){",
          "",
          "[Removed Lines]",
          "3205:       if( iTerm<16 && pUsage[i].omit ) pNew->u.vtab.omitMask |= 1<<iTerm;",
          "",
          "[Added Lines]",
          "3206:       if( iTerm<16 && pUsage[i].omit ){",
          "3207:         if( ((1<<i)&mNoOmit)==0 ){",
          "3208:           testcase( i!=iTerm );",
          "3209:           pNew->u.vtab.omitMask |= 1<<iTerm;",
          "3210:         }else{",
          "3211:           testcase( i!=iTerm );",
          "3212:         }",
          "3213:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3215:       }",
          "3216:     }",
          "3217:   }",
          "3220:   pNew->nLTerm = mxTerm+1;",
          "3221:   for(i=0; i<=mxTerm; i++){",
          "",
          "[Removed Lines]",
          "3218:   pNew->u.vtab.omitMask &= ~mNoOmit;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}