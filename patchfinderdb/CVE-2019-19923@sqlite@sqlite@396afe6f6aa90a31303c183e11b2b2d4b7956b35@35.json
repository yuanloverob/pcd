{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e3dadac591ff43340db5421af23d05457fee4688",
      "candidate_info": {
        "commit_hash": "e3dadac591ff43340db5421af23d05457fee4688",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e3dadac591ff43340db5421af23d05457fee4688",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Stricter enforcement of cell sizes when doing balancing operations on the btree, in order to catch file corruption sooner.\n\nFossilOrigin-Name: 12713f320b2c1def273dd8b7833dddaaad5331aba779d4b1ec9aa949814f38fe",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 44ce8baa47192be03c8f11777904c3c07fa5cc5c97b6d8e81572d380995ac688",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6755: static int rebuildPage(",
          "6760: ){",
          "6763:   const int usableSize = pPg->pBt->usableSize;",
          "6764:   u8 * const pEnd = &aData[usableSize];",
          "6766:   u8 *pCellptr = pPg->aCellIdx;",
          "6767:   u8 *pTmp = sqlite3PagerTempSpace(pPg->pBt->pPager);",
          "6768:   u8 *pData;",
          "6773:   pData = pEnd;",
          "6776:     if( SQLITE_WITHIN(pCell,aData,pEnd) ){",
          "6778:       pCell = &pTmp[pCell - aData];",
          "6779:     }",
          "6781:     put2byte(pCellptr, (pData - aData));",
          "6782:     pCellptr += 2;",
          "6783:     if( pData < pCellptr ) return SQLITE_CORRUPT_BKPT;",
          "6787:   }",
          "",
          "[Removed Lines]",
          "6765:   int i;",
          "6770:   i = get2byte(&aData[hdr+5]);",
          "6771:   memcpy(&pTmp[i], &aData[i], usableSize - i);",
          "6774:   for(i=0; i<nCell; i++){",
          "6775:     u8 *pCell = apCell[i];",
          "6777:       if( ((uptr)(pCell+szCell[i]))>(uptr)pEnd ) return SQLITE_CORRUPT_BKPT;",
          "6780:     pData -= szCell[i];",
          "6784:     memcpy(pData, pCell, szCell[i]);",
          "6785:     assert( szCell[i]==pPg->xCellSize(pPg, pCell) || CORRUPT_DB );",
          "6786:     testcase( szCell[i]!=pPg->xCellSize(pPg,pCell) );",
          "",
          "[Added Lines]",
          "6839:   assert( i<iEnd );",
          "6840:   j = get2byte(&aData[hdr+5]);",
          "6841:   memcpy(&pTmp[j], &aData[j], usableSize - j);",
          "6843:   for(k=0; pCArray->ixNx[k]<=i && ALWAYS(k<NB*2); k++){}",
          "6844:   pSrcEnd = pCArray->apEnd[k];",
          "6847:   while( 1/*exit by break*/ ){",
          "6848:     u8 *pCell = pCArray->apCell[i];",
          "6849:     u16 sz = pCArray->szCell[i];",
          "6850:     assert( sz>0 );",
          "6852:       if( ((uptr)(pCell+sz))>(uptr)pEnd ) return SQLITE_CORRUPT_BKPT;",
          "6854:     }else if( (uptr)(pCell+sz)>(uptr)pSrcEnd",
          "6855:            && (uptr)(pCell)<(uptr)pSrcEnd",
          "6856:     ){",
          "6857:       return SQLITE_CORRUPT_BKPT;",
          "6860:     pData -= sz;",
          "6864:     memcpy(pData, pCell, sz);",
          "6865:     assert( sz==pPg->xCellSize(pPg, pCell) || CORRUPT_DB );",
          "6866:     testcase( sz!=pPg->xCellSize(pPg,pCell) );",
          "6867:     i++;",
          "6868:     if( i>=iEnd ) break;",
          "6869:     if( pCArray->ixNx[k]<=i ){",
          "6870:       k++;",
          "6871:       pSrcEnd = pCArray->apEnd[k];",
          "6872:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6825: static int pageInsertArray(",
          "6833: ){",
          "6840:     int sz, rc;",
          "6841:     u8 *pSlot;",
          "6842:     sz = cachedCellSize(pCArray, i);",
          "",
          "[Removed Lines]",
          "6834:   int i;",
          "6835:   u8 *aData = pPg->aData;",
          "6836:   u8 *pData = *ppData;",
          "6837:   int iEnd = iFirst + nCell;",
          "6839:   for(i=iFirst; i<iEnd; i++){",
          "",
          "[Added Lines]",
          "6926:   if( iEnd<=iFirst ) return 0;",
          "6927:   for(k=0; pCArray->ixNx[k]<=i && ALWAYS(k<NB*2); k++){}",
          "6928:   pEnd = pCArray->apEnd[k];",
          "6929:   while( 1 /*Exit by break*/ ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6851:     assert( (pSlot+sz)<=pCArray->apCell[i]",
          "6852:          || pSlot>=(pCArray->apCell[i]+sz)",
          "6853:          || CORRUPT_DB );",
          "6854:     memmove(pSlot, pCArray->apCell[i], sz);",
          "6855:     put2byte(pCellptr, (pSlot - aData));",
          "6856:     pCellptr += 2;",
          "6857:   }",
          "6859:   return 0;",
          "6860: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6944:     if( (uptr)(pCArray->apCell[i]+sz)>(uptr)pEnd",
          "6945:      && (uptr)(pCArray->apCell[i])<(uptr)pEnd",
          "6946:     ){",
          "6947:       assert( CORRUPT_DB );",
          "6948:       (void)SQLITE_CORRUPT_BKPT;",
          "6949:       return 1;",
          "6950:     }",
          "6954:     i++;",
          "6955:     if( i>=iEnd ) break;",
          "6956:     if( pCArray->ixNx[k]<=i ){",
          "6957:       k++;",
          "6958:       pEnd = pCArray->apEnd[k];",
          "6959:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7016:  editpage_fail:",
          "7018:   populateCellCache(pCArray, iNew, nNew);",
          "7020: }",
          "7038: #ifndef SQLITE_OMIT_QUICKBALANCE",
          "",
          "[Removed Lines]",
          "7019:   return rebuildPage(pPg, nNew, &pCArray->apCell[iNew], &pCArray->szCell[iNew]);",
          "",
          "[Added Lines]",
          "7122:   return rebuildPage(pCArray, iNew, nNew, pPg);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7083:     u8 *pCell = pPage->apOvfl[0];",
          "7084:     u16 szCell = pPage->xCellSize(pPage, pCell);",
          "7085:     u8 *pStop;",
          "7087:     assert( sqlite3PagerIswriteable(pNew->pDbPage) );",
          "7088:     assert( pPage->aData[0]==(PTF_INTKEY|PTF_LEAFDATA|PTF_LEAF) );",
          "7089:     zeroPage(pNew, PTF_INTKEY|PTF_LEAFDATA|PTF_LEAF);",
          "7092:     pNew->nFree = pBt->usableSize - pNew->cellOffset - 2 - szCell;",
          "",
          "[Removed Lines]",
          "7090:     rc = rebuildPage(pNew, 1, &pCell, &szCell);",
          "7091:     if( NEVER(rc) ) return rc;",
          "",
          "[Added Lines]",
          "7174:     CellArray b;",
          "7179:     b.nCell = 1;",
          "7180:     b.pRef = pPage;",
          "7181:     b.apCell = &pCell;",
          "7182:     b.szCell = &szCell;",
          "7183:     b.apEnd[0] = pPage->aDataEnd;",
          "7184:     b.ixNx[0] = 2;",
          "7185:     rc = rebuildPage(&b, 0, 1, pNew);",
          "7186:     if( NEVER(rc) ){",
          "7187:       releasePage(pNew);",
          "7188:       return rc;",
          "7189:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "7568:   usableSpace = pBt->usableSize - 12 + leafCorrection;",
          "7569:   for(i=0; i<nOld; i++){",
          "7570:     MemPage *p = apOld[i];",
          "7571:     szNew[i] = usableSpace - p->nFree;",
          "7572:     for(j=0; j<p->nOverflow; j++){",
          "7573:       szNew[i] += 2 + p->xCellSize(p, p->apOvfl[j]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7669:     b.apEnd[i*2] = p->aDataEnd;",
          "7670:     b.apEnd[i*2+1] = pParent->aDataEnd;",
          "7671:     b.ixNx[i*2] = cntOld[i];",
          "7672:     b.ixNx[i*2+1] = cntOld[i]+1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9d30c8ff8fe09e4564fa8b7dd1c7fc9badd5cd2c",
      "candidate_info": {
        "commit_hash": "9d30c8ff8fe09e4564fa8b7dd1c7fc9badd5cd2c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9d30c8ff8fe09e4564fa8b7dd1c7fc9badd5cd2c",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/indexexpr1.test"
        ],
        "message": "Minor fix for test file indexexpr1.test.\n\nFossilOrigin-Name: 0ceab26f15c4c7039647cbccf8939dd5c36a60b70ffeefcd3b415c8d4d8351cd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/indexexpr1.test||test/indexexpr1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 49073b7003330027303c4c776e9f85112f8b99b89f848fec3f953eba501d7505",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/indexexpr1.test||test/indexexpr1.test": [
          "File: test/indexexpr1.test -> test/indexexpr1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "463: # value, be sure to use the REAL value and not the INT value when",
          "464: # computing the expression.",
          "465: #",
          "484: finish_test",
          "",
          "[Removed Lines]",
          "466: do_execsql_test indexexpr-1800 {",
          "467:   DROP TABLE IF EXISTS t0;",
          "468:   CREATE TABLE t0(c0 REAL, c1 TEXT);",
          "469:   CREATE INDEX i0 ON t0(+c0, c0);",
          "470:   INSERT INTO t0(c0) VALUES(0);",
          "471:   SELECT CAST(+ t0.c0 AS BLOB) LIKE 0 FROM t0;",
          "472: } {0}",
          "473: do_execsql_test indexexpr-1810 {",
          "474:   SELECT CAST(+ t0.c0 AS BLOB) LIKE '0.0' FROM t0;",
          "475: } {1}",
          "476: do_execsql_test indexexpr-1820 {",
          "477:   DROP TABLE IF EXISTS t1;",
          "478:   CREATE TABLE t1(x REAL);",
          "479:   CREATE INDEX t1x ON t1(x, +x);",
          "480:   INSERT INTO t1(x) VALUES(2);",
          "481:   SELECT +x FROM t1 WHERE x=2;",
          "482: } {2.0}",
          "",
          "[Added Lines]",
          "466: ifcapable like_match_blobs {",
          "467:   do_execsql_test indexexpr-1800 {",
          "468:     DROP TABLE IF EXISTS t0;",
          "469:     CREATE TABLE t0(c0 REAL, c1 TEXT);",
          "470:     CREATE INDEX i0 ON t0(+c0, c0);",
          "471:     INSERT INTO t0(c0) VALUES(0);",
          "472:     SELECT CAST(+ t0.c0 AS BLOB) LIKE 0 FROM t0;",
          "473:   } {0}",
          "474:   do_execsql_test indexexpr-1810 {",
          "475:     SELECT CAST(+ t0.c0 AS BLOB) LIKE '0.0' FROM t0;",
          "476:   } {1}",
          "477:   do_execsql_test indexexpr-1820 {",
          "478:     DROP TABLE IF EXISTS t1;",
          "479:     CREATE TABLE t1(x REAL);",
          "480:     CREATE INDEX t1x ON t1(x, +x);",
          "481:     INSERT INTO t1(x) VALUES(2);",
          "482:     SELECT +x FROM t1 WHERE x=2;",
          "483:   } {2.0}",
          "484: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "698c86f40de408b954381c7a42f0417704e491a9",
      "candidate_info": {
        "commit_hash": "698c86f40de408b954381c7a42f0417704e491a9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/698c86f40de408b954381c7a42f0417704e491a9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/util.c"
        ],
        "message": "Small performance improvement on the variable-length integer decoder: sqlite3GetVarint().\n\nFossilOrigin-Name: 5df2bf62fcd4dfdaa195062dddbd5ce5420bc239b2649ac8f547e0db34e7f0bb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/util.c||src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7ac500fb5abfe1ad60f2ffdcc8fbe5ccc1c641bbeed53f00940e9ff78788e53d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "918: u8 sqlite3GetVarint(const unsigned char *p, u64 *v){",
          "919:   u32 a,b,s;",
          "926:     return 1;",
          "927:   }",
          "938:     return 2;",
          "939:   }",
          "",
          "[Removed Lines]",
          "921:   a = *p;",
          "923:   if (!(a&0x80))",
          "924:   {",
          "929:   p++;",
          "930:   b = *p;",
          "932:   if (!(b&0x80))",
          "933:   {",
          "934:     a &= 0x7f;",
          "935:     a = a<<7;",
          "936:     a |= b;",
          "",
          "[Added Lines]",
          "921:   if( ((signed char*)p)[0]>=0 ){",
          "925:   if( ((signed char*)p)[1]>=0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "942:   assert( SLOT_2_0 == ((0x7f<<14) | (0x7f)) );",
          "943:   assert( SLOT_4_2_0 == ((0xfU<<28) | (0x7f<<14) | (0x7f)) );",
          "947:   a |= *p;",
          "949:   if (!(a&0x80))",
          "",
          "[Removed Lines]",
          "945:   p++;",
          "946:   a = a<<14;",
          "",
          "[Added Lines]",
          "934:   a = ((u32)p[0])<<14;",
          "935:   b = p[1];",
          "936:   p += 2;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6fcc1ecc99dbf222394bbfe207496b1148ece800",
      "candidate_info": {
        "commit_hash": "6fcc1ecc99dbf222394bbfe207496b1148ece800",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6fcc1ecc99dbf222394bbfe207496b1148ece800",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "In \"PRAGMA vdbe_trace\" output, show the results of OP_Affinity opcodes.\n\nFossilOrigin-Name: 56604bb60a8ebac8d2854628d1b052d594d7effe14be8333977995dc07b65114",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 36dd5b0804797a35d0dc596b6ca4f71813a155c5a470237ab6e3d1bcd9ccc6be",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2769:     assert( pIn1 <= &p->aMem[(p->nMem+1 - p->nCursor)] );",
          "2770:     assert( memIsValid(pIn1) );",
          "2771:     applyAffinity(pIn1, *(zAffinity++), encoding);",
          "2772:     pIn1++;",
          "2773:   }while( zAffinity[0] );",
          "2774:   break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2772:     REGISTER_TRACE((int)(pIn1-aMem), pIn1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4a7e9a25b64489a9d7e8f1d84f0e50cbbb4a7735",
      "candidate_info": {
        "commit_hash": "4a7e9a25b64489a9d7e8f1d84f0e50cbbb4a7735",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4a7e9a25b64489a9d7e8f1d84f0e50cbbb4a7735",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/ossfuzz.c"
        ],
        "message": "Set a low limit on the length of strings and blobs in the OSSFuzz module, in an effort to avoid timeouts when the fuzzer does things like \"randomblob(1e12)\".\n\nFossilOrigin-Name: 119d1609fa415894fdd0aa19440ca1c658bd01910838a4cfadbe0e304b033bfd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/ossfuzz.c||test/ossfuzz.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2c886f3d49c9569e9f6ee28b89b57e2d4004c8972d11da0c23f7b2d2e0c9900a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/ossfuzz.c||test/ossfuzz.c": [
          "File: test/ossfuzz.c -> test/ossfuzz.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:   sqlite3_limit(cx.db, SQLITE_LIMIT_VDBE_OP, 25000);",
          "159:   sqlite3_db_config(cx.db, SQLITE_DBCONFIG_ENABLE_FKEY, uSelector&1, &rc);",
          "160:   uSelector >>= 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161:   sqlite3_limit(cx.db, SQLITE_LIMIT_LENGTH, 50000);",
          "",
          "---------------"
        ]
      }
    }
  ]
}