{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d4f616534693127be35a03dff095b7777b0522a5",
      "candidate_info": {
        "commit_hash": "d4f616534693127be35a03dff095b7777b0522a5",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/d4f616534693127be35a03dff095b7777b0522a5",
        "files": [
          "test/test-fs.c"
        ],
        "message": "test: fix fs_fstat test on sunos\n\nThe tests are no longer compiled with -D_XOPEN_SOURCE=500 when building\nwith autotools. Tell the test explicitly that SunOS systems are\nexpected to have nanosecond fstat(2) granularity.",
        "before_after_code_files": [
          "test/test-fs.c||test/test-fs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/test-fs.c||test/test-fs.c": [
          "File: test/test-fs.c -> test/test-fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "951:   ASSERT(s->st_birthtim.tv_nsec == t.st_birthtimespec.tv_nsec);",
          "952:   ASSERT(s->st_flags == t.st_flags);",
          "953:   ASSERT(s->st_gen == t.st_gen);",
          "955:   ASSERT(s->st_atim.tv_sec == t.st_atim.tv_sec);",
          "956:   ASSERT(s->st_atim.tv_nsec == t.st_atim.tv_nsec);",
          "957:   ASSERT(s->st_mtim.tv_sec == t.st_mtim.tv_sec);",
          "",
          "[Removed Lines]",
          "954: #elif defined(_BSD_SOURCE) || defined(_SVID_SOURCE) || defined(_XOPEN_SOURCE)",
          "",
          "[Added Lines]",
          "954: #elif defined(__sun) || \\",
          "955:       defined(_BSD_SOURCE) || \\",
          "956:       defined(_SVID_SOURCE) || \\",
          "957:       defined(_XOPEN_SOURCE)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ce5470f3ab110cb969bfb5c6a6cacb181bb6700",
      "candidate_info": {
        "commit_hash": "4ce5470f3ab110cb969bfb5c6a6cacb181bb6700",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/4ce5470f3ab110cb969bfb5c6a6cacb181bb6700",
        "files": [
          "src/unix/async.c",
          "src/unix/stream.c"
        ],
        "message": "unix: fix uv__open_cloexec usage\n\nIt returns the fd or the negated errno.",
        "before_after_code_files": [
          "src/unix/async.c||src/unix/async.c",
          "src/unix/stream.c||src/unix/stream.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/async.c||src/unix/async.c": [
          "File: src/unix/async.c -> src/unix/async.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "232:       snprintf(buf, sizeof(buf), \"/proc/self/fd/%d\", pipefd[0]);",
          "233:       fd = uv__open_cloexec(buf, O_RDWR);",
          "235:         uv__close(pipefd[0]);",
          "236:         uv__close(pipefd[1]);",
          "237:         pipefd[0] = fd;",
          "",
          "[Removed Lines]",
          "234:       if (fd != -1) {",
          "",
          "[Added Lines]",
          "234:       if (fd >= 0) {",
          "",
          "---------------"
        ],
        "src/unix/stream.c||src/unix/stream.c": [
          "File: src/unix/stream.c -> src/unix/stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "445: static int uv__emfile_trick(uv_loop_t* loop, int accept_fd) {",
          "446:   int err;",
          "448:   if (loop->emfile_fd == -1)",
          "449:     return -EMFILE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "447:   int emfile_fd;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "457:       uv__close(err);",
          "458:   } while (err >= 0 || err == -EINTR);",
          "461:   return err;",
          "462: }",
          "",
          "[Removed Lines]",
          "460:   SAVE_ERRNO(loop->emfile_fd = uv__open_cloexec(\"/\", O_RDONLY));",
          "",
          "[Added Lines]",
          "461:   emfile_fd = uv__open_cloexec(\"/\", O_RDONLY);",
          "462:   if (emfile_fd >= 0)",
          "463:     loop->emfile_fd = emfile_fd;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4d905fbe07be8aa7eca878435aa2f0b7a48b2d63",
      "candidate_info": {
        "commit_hash": "4d905fbe07be8aa7eca878435aa2f0b7a48b2d63",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/4d905fbe07be8aa7eca878435aa2f0b7a48b2d63",
        "files": [
          "test/echo-server.c"
        ],
        "message": "test: close stream immediately on error\n\nIf there is an error in the uv_read_cb, close the uv_stream_t\nimmediately instead of waiting until the uv_write_cb, and only close the\nstream in after_write() if it hasn't been closed already.",
        "before_after_code_files": [
          "test/echo-server.c||test/echo-server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/echo-server.c||test/echo-server.c": [
          "File: test/echo-server.c -> test/echo-server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:   wr = (write_req_t*) req;",
          "53:   free(wr->buf.base);",
          "57:     return;",
          "72: }",
          "",
          "[Removed Lines]",
          "54:   free(wr);",
          "56:   if (status == 0)",
          "59:   fprintf(stderr, \"uv_write error: %s\\n\", uv_strerror(status));",
          "61:   if (status == UV_ECANCELED)",
          "62:     return;",
          "64:   ASSERT(status == UV_EPIPE);",
          "65:   uv_close((uv_handle_t*)req->handle, on_close);",
          "66: }",
          "69: static void after_shutdown(uv_shutdown_t* req, int status) {",
          "70:   uv_close((uv_handle_t*)req->handle, on_close);",
          "71:   free(req);",
          "",
          "[Added Lines]",
          "55:   if (status == 0) {",
          "56:     free(wr);",
          "58:   }",
          "60:   fprintf(stderr,",
          "61:           \"uv_write error: %s - %s\\n\",",
          "62:           uv_err_name(status),",
          "63:           uv_strerror(status));",
          "65:   if (!uv_is_closing((uv_handle_t*) req->handle))",
          "66:     uv_close((uv_handle_t*) req->handle, on_close);",
          "67:   free(wr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:                        const uv_buf_t* buf) {",
          "78:   int i;",
          "79:   write_req_t *wr;",
          "82:   if (nread < 0) {",
          "",
          "[Removed Lines]",
          "80:   uv_shutdown_t* req;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87:       free(buf->base);",
          "88:     }",
          "93:     return;",
          "94:   }",
          "",
          "[Removed Lines]",
          "90:     req = (uv_shutdown_t*) malloc(sizeof *req);",
          "91:     uv_shutdown(req, handle, after_shutdown);",
          "",
          "[Added Lines]",
          "85:     uv_close((uv_handle_t*) handle, on_close);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b17223cd607718abcd79610a6bd2057f523df971",
      "candidate_info": {
        "commit_hash": "b17223cd607718abcd79610a6bd2057f523df971",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/b17223cd607718abcd79610a6bd2057f523df971",
        "files": [
          "include/uv-win.h",
          "src/win/getnameinfo.c",
          "src/win/tty.c"
        ],
        "message": "build: fix build on MinGW32",
        "before_after_code_files": [
          "include/uv-win.h||include/uv-win.h",
          "src/win/getnameinfo.c||src/win/getnameinfo.c",
          "src/win/tty.c||src/win/tty.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv-win.h||include/uv-win.h": [
          "File: include/uv-win.h -> include/uv-win.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #endif",
          "32: #include <winsock2.h>",
          "33: #include <mswsock.h>",
          "34: #include <ws2tcpip.h>",
          "35: #include <windows.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: #if defined(__MINGW32__) && !defined(__MINGW64_VERSION_MAJOR)",
          "35: typedef struct pollfd {",
          "36:   SOCKET fd;",
          "37:   short  events;",
          "38:   short  revents;",
          "39: } WSAPOLLFD, *PWSAPOLLFD, *LPWSAPOLLFD;",
          "40: #endif",
          "",
          "---------------"
        ],
        "src/win/getnameinfo.c||src/win/getnameinfo.c": [
          "File: src/win/getnameinfo.c -> src/win/getnameinfo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"internal.h\"",
          "28: #include \"req-inl.h\"",
          "31: static void uv__getnameinfo_work(struct uv__work* w) {",
          "32:   uv_getnameinfo_t* req;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: #ifndef GetNameInfo",
          "31: int WSAAPI GetNameInfoW(",
          "32:   const SOCKADDR *pSockaddr,",
          "33:   socklen_t SockaddrLength,",
          "34:   PWCHAR pNodeBuffer,",
          "35:   DWORD NodeBufferSize,",
          "36:   PWCHAR pServiceBuffer,",
          "37:   DWORD ServiceBufferSize,",
          "38:   INT Flags",
          "39: );",
          "40: #endif",
          "",
          "---------------"
        ],
        "src/win/tty.c||src/win/tty.c": [
          "File: src/win/tty.c -> src/win/tty.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: # include <stdint.h>",
          "31: #endif",
          "33: #include \"uv.h\"",
          "34: #include \"internal.h\"",
          "35: #include \"handle-inl.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #ifndef COMMON_LVB_REVERSE_VIDEO",
          "34: # define COMMON_LVB_REVERSE_VIDEO 0x4000",
          "35: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d7c8cffecb56b4a9e2cc2af331d0b70a92040b7e",
      "candidate_info": {
        "commit_hash": "d7c8cffecb56b4a9e2cc2af331d0b70a92040b7e",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/d7c8cffecb56b4a9e2cc2af331d0b70a92040b7e",
        "files": [
          "src/win/tcp.c"
        ],
        "message": "windows: fixed compilation warning",
        "before_after_code_files": [
          "src/win/tcp.c||src/win/tcp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/tcp.c||src/win/tcp.c": [
          "File: src/win/tcp.c -> src/win/tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "275:   }",
          "276: #endif",
          "",
          "[Removed Lines]",
          "274:     setsockopt(handle->socket, IPPROTO_IPV6, IPV6_V6ONLY, &on, sizeof on);",
          "",
          "[Added Lines]",
          "274:     setsockopt(handle->socket,",
          "275:                IPPROTO_IPV6,",
          "276:                IPV6_V6ONLY,",
          "277:                (const char*)&on,",
          "278:                sizeof on);",
          "",
          "---------------"
        ]
      }
    }
  ]
}