{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "060b7fa9745e1439ce1d9be96bb921b98b0a6da3",
      "candidate_info": {
        "commit_hash": "060b7fa9745e1439ce1d9be96bb921b98b0a6da3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/060b7fa9745e1439ce1d9be96bb921b98b0a6da3",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/whereexpr.c",
          "test/like3.test",
          "test/tkt-78e04e52ea.test",
          "test/vtab1.test",
          "test/vtabH.test"
        ],
        "message": "Refactor the LIKE optimization decision logic so that it uses sqlite3AtoF() on both boundary keys to determine if the optimization can be used when the LHS is something that might not have TEXT affinity. Ticket [ce8717f0885af975].  See also [c94369cae9b561b1], [b043a54c3de54b28], [fd76310a5e843e07], and [158290c0abafde67].\n\nFossilOrigin-Name: b4a9e09e60213ccff925d09f0b6e549e2a3e3862856c710f108779e2867dec76",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/whereexpr.c||src/whereexpr.c",
          "test/like3.test||test/like3.test",
          "test/tkt-78e04e52ea.test||test/tkt-78e04e52ea.test",
          "test/vtab1.test||test/vtab1.test",
          "test/vtabH.test||test/vtabH.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c4b405687b010ee20ec02c42913a0540909d0155c88a4a56194fda99c704279e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "264:         zNew[iTo] = 0;",
          "265:         assert( iTo>0 );",
          "284:         ){",
          "289:             sqlite3ExprDelete(db, pPrefix);",
          "290:             sqlite3ValueFree(pVal);",
          "291:             return 0;",
          "",
          "[Removed Lines]",
          "279:         if( sqlite3Isdigit(zNew[0])",
          "280:          || sqlite3Isspace(zNew[0])",
          "281:          || zNew[0]=='-'",
          "282:          || zNew[0]=='+'",
          "283:          || zNew[iTo-1]=='0'-1",
          "285:           if( pLeft->op!=TK_COLUMN",
          "286:            || sqlite3ExprAffinity(pLeft)!=SQLITE_AFF_TEXT",
          "288:           ){",
          "",
          "[Added Lines]",
          "279:         if( pLeft->op!=TK_COLUMN",
          "280:          || sqlite3ExprAffinity(pLeft)!=SQLITE_AFF_TEXT",
          "283:           int isNum;",
          "284:           double rDummy;",
          "285:           isNum = sqlite3AtoF(zNew, &rDummy, iTo, SQLITE_UTF8);",
          "286:           if( isNum<=0 ){",
          "287:             zNew[iTo-1]++;",
          "288:             isNum = sqlite3AtoF(zNew, &rDummy, iTo, SQLITE_UTF8);",
          "289:             zNew[iTo-1]--;",
          "290:           }",
          "291:           if( isNum>0 ){",
          "",
          "---------------"
        ],
        "test/like3.test||test/like3.test": [
          "File: test/like3.test -> test/like3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "198:   SELECT * FROM t0 WHERE t0.c0 LIKE './';",
          "199: } {./}",
          "202: # 2019-02-27",
          "203: # Verify that the LIKE optimization works with an ESCAPE clause when",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "201: # 2019-06-14",
          "202: # Ticket https://www.sqlite.org/src/info/ce8717f0885af975",
          "203: do_execsql_test like3-5.410 {",
          "204:   DROP TABLE IF EXISTS t0;",
          "205:   CREATE TABLE t0(c0 INT UNIQUE COLLATE NOCASE);",
          "206:   INSERT INTO t0(c0) VALUES ('.1%');",
          "207:   SELECT * FROM t0 WHERE t0.c0 LIKE '.1%';",
          "208: } {.1%}",
          "",
          "---------------"
        ],
        "test/tkt-78e04e52ea.test||test/tkt-78e04e52ea.test": [
          "File: test/tkt-78e04e52ea.test -> test/tkt-78e04e52ea.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:   }",
          "42: } {}",
          "43: do_test tkt-78e04-1.4 {",
          "45: } {/*SCAN TABLE  USING COVERING INDEX i1*/}",
          "46: do_test tkt-78e04-1.5 {",
          "47:   execsql {",
          "",
          "[Removed Lines]",
          "44:  db eval {EXPLAIN QUERY PLAN SELECT \"\" FROM \"\" WHERE \"\" LIKE '1abc%';}",
          "",
          "[Added Lines]",
          "44:  db eval {EXPLAIN QUERY PLAN SELECT \"\" FROM \"\" WHERE \"\" LIKE '1e5%';}",
          "",
          "---------------"
        ],
        "test/vtab1.test||test/vtab1.test": [
          "File: test/vtab1.test -> test/vtab1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1311:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ?} 8 9}",
          "1313:   1.3 \"SELECT a FROM e6 WHERE b LIKE '8J%'\" {3 4}",
          "1316:   1.4 \"SELECT a FROM e6 WHERE b LIKE '8j%'\" {3 4}",
          "1318: } {",
          "1319:   set echo_module {}",
          "1320:   do_execsql_test 18.$tn.1 $sql $res",
          "",
          "[Removed Lines]",
          "1314:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b like ?} 8J%}",
          "1317:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b like ?} 8j%}",
          "",
          "[Added Lines]",
          "1314:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b like ?} 8J 8k 8J%}",
          "1317:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b like ?} 8J 8k 8j%}",
          "1319:   1.5 \"SELECT a FROM e6 WHERE b LIKE '8%'\" {3 4}",
          "1320:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b like ?} 8%}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1324: do_execsql_test 18.2.0 {  PRAGMA case_sensitive_like = ON }",
          "1325: foreach {tn sql res filter} {",
          "1329:   2.2 \"SELECT a FROM e6 WHERE b LIKE '8j%'\" {}",
          "1331: } {",
          "1332:   set echo_module {}",
          "1333:   do_execsql_test 18.$tn.1 $sql $res",
          "",
          "[Removed Lines]",
          "1326:   2.1 \"SELECT a FROM e6 WHERE b LIKE '8J%'\" {3 4}",
          "1327:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b like ?} 8J%}",
          "1330:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b like ?} 8j%}",
          "",
          "[Added Lines]",
          "1329:   2.1 \"SELECT a FROM e6 WHERE b LIKE '8%'\" {3 4}",
          "1330:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b like ?} 8%}",
          "1333:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b like ?} 8j 8k 8j%}",
          "1335:   2.3 \"SELECT a FROM e6 WHERE b LIKE '8J%'\" {3 4}",
          "1336:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b like ?} 8J 8K 8J%}",
          "",
          "---------------"
        ],
        "test/vtabH.test||test/vtabH.test": [
          "File: test/vtabH.test -> test/vtabH.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: foreach {tn sql expect} {",
          "34:   1 \"SELECT * FROM e6 WHERE b LIKE '8abc'\" {",
          "37:   }",
          "39:   2 \"SELECT * FROM e6 WHERE b GLOB '8abc'\" {",
          "40:     xBestIndex {SELECT rowid, a, b FROM 't6' WHERE b glob ?}",
          "42:   }",
          "43: } {",
          "44:   do_test 1.$tn {",
          "",
          "[Removed Lines]",
          "35:     xBestIndex {SELECT rowid, a, b FROM 't6' WHERE b like ?}",
          "36:     xFilter {SELECT rowid, a, b FROM 't6' WHERE b like ?} 8abc",
          "41:     xFilter {SELECT rowid, a, b FROM 't6' WHERE b glob ?} 8abc",
          "",
          "[Added Lines]",
          "35:     xBestIndex",
          "36:        {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b like ?}",
          "37:     xFilter",
          "38:        {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b like ?}",
          "39:        8ABC 8abd 8abc",
          "43:      xBestIndex",
          "44:        {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b glob ?}",
          "45:      xFilter",
          "46:        {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b glob ?}",
          "47:        8abc 8abd 8abc",
          "48:   }",
          "49:   3 \"SELECT * FROM e6 WHERE b LIKE '8e/'\" {",
          "50:     xBestIndex {SELECT rowid, a, b FROM 't6' WHERE b like ?}",
          "51:     xFilter {SELECT rowid, a, b FROM 't6' WHERE b like ?} 8e/",
          "52:   }",
          "53:   4 \"SELECT * FROM e6 WHERE b GLOB '8e/'\" {",
          "55:     xFilter {SELECT rowid, a, b FROM 't6' WHERE b glob ?} 8e/",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c06ede105dd2789a595b59ab2a6b7add3396f9e8",
      "candidate_info": {
        "commit_hash": "c06ede105dd2789a595b59ab2a6b7add3396f9e8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c06ede105dd2789a595b59ab2a6b7add3396f9e8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/tclsqlite.c",
          "test/tclsqlite.test"
        ],
        "message": "Add the new \"bind_fallback\" method to the \"sqlite3\" object in the TCL interface.\n\nFossilOrigin-Name: c7f70b6d96338dba201e005104e7f7148c1a8cd767ab05e35b44617c4c797bc5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/tclsqlite.c||src/tclsqlite.c",
          "test/tclsqlite.test||test/tclsqlite.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 00ae0c6c4815366bd2f36bc054b13bc7b568dd0a3caceddf0eba4db33f010ee4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/tclsqlite.c||src/tclsqlite.c": [
          "File: src/tclsqlite.c -> src/tclsqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "549:   if( pDb->zProfile ){",
          "550:     Tcl_Free(pDb->zProfile);",
          "551:   }",
          "552:   if( pDb->zAuth ){",
          "553:     Tcl_Free(pDb->zAuth);",
          "554:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "553:   if( pDb->zBindFallback ){",
          "554:     Tcl_Free(pDb->zBindFallback);",
          "555:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1388:     const char *zVar = sqlite3_bind_parameter_name(pStmt, i);",
          "1389:     if( zVar!=0 && (zVar[0]=='$' || zVar[0]==':' || zVar[0]=='@') ){",
          "1390:       Tcl_Obj *pVar = Tcl_GetVar2Ex(interp, &zVar[1], 0, 0);",
          "1391:       if( pVar ){",
          "1392:         int n;",
          "1393:         u8 *data;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1397:       if( pVar==0 && pDb->zBindFallback!=0 ){",
          "1398:         Tcl_Obj *pCmd;",
          "1399:         int rx;",
          "1400:         pCmd = Tcl_NewStringObj(pDb->zBindFallback, -1);",
          "1401:         Tcl_IncrRefCount(pCmd);",
          "1402:         Tcl_ListObjAppendElement(interp, pCmd, Tcl_NewStringObj(zVar,-1));",
          "1403:         if( needResultReset ) Tcl_ResetResult(interp);",
          "1404:         needResultReset = 1;",
          "1405:         rx = Tcl_EvalObjEx(interp, pCmd, TCL_EVAL_DIRECT);",
          "1406:         Tcl_DecrRefCount(pCmd);",
          "1407:         if( rx==TCL_OK ){",
          "1408:           pVar = Tcl_GetObjResult(interp);",
          "1409:         }else if( rx==TCL_ERROR ){",
          "1410:           rc = TCL_ERROR;",
          "1411:           break;",
          "1412:         }else{",
          "1413:           pVar = 0;",
          "1414:         }",
          "1415:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1423:       }else{",
          "1424:         sqlite3_bind_null(pStmt, i);",
          "1425:       }",
          "1426:     }",
          "1427:   }",
          "1428:   pPreStmt->nParm = iParm;",
          "1432: }",
          "",
          "[Removed Lines]",
          "1431:   return TCL_OK;",
          "",
          "[Added Lines]",
          "1451:       if( needResultReset ) Tcl_ResetResult(pDb->interp);",
          "1456:   if( needResultReset && rc==TCL_OK ) Tcl_ResetResult(pDb->interp);",
          "1458:   return rc;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1887:   int choice;",
          "1888:   int rc = TCL_OK;",
          "1889:   static const char *DB_strs[] = {",
          "1904:   };",
          "1905:   enum DB_enum {",
          "1919:   };",
          "",
          "[Removed Lines]",
          "1890:     \"authorizer\",             \"backup\",                \"busy\",",
          "1891:     \"cache\",                  \"changes\",               \"close\",",
          "1892:     \"collate\",                \"collation_needed\",      \"commit_hook\",",
          "1893:     \"complete\",               \"copy\",                  \"deserialize\",",
          "1894:     \"enable_load_extension\",  \"errorcode\",             \"eval\",",
          "1895:     \"exists\",                 \"function\",              \"incrblob\",",
          "1896:     \"interrupt\",              \"last_insert_rowid\",     \"nullvalue\",",
          "1897:     \"onecolumn\",              \"preupdate\",             \"profile\",",
          "1898:     \"progress\",               \"rekey\",                 \"restore\",",
          "1899:     \"rollback_hook\",          \"serialize\",             \"status\",",
          "1900:     \"timeout\",                \"total_changes\",         \"trace\",",
          "1901:     \"trace_v2\",               \"transaction\",           \"unlock_notify\",",
          "1902:     \"update_hook\",            \"version\",               \"wal_hook\",",
          "1903:     0",
          "1906:     DB_AUTHORIZER,            DB_BACKUP,               DB_BUSY,",
          "1907:     DB_CACHE,                 DB_CHANGES,              DB_CLOSE,",
          "1908:     DB_COLLATE,               DB_COLLATION_NEEDED,     DB_COMMIT_HOOK,",
          "1909:     DB_COMPLETE,              DB_COPY,                 DB_DESERIALIZE,",
          "1910:     DB_ENABLE_LOAD_EXTENSION, DB_ERRORCODE,            DB_EVAL,",
          "1911:     DB_EXISTS,                DB_FUNCTION,             DB_INCRBLOB,",
          "1912:     DB_INTERRUPT,             DB_LAST_INSERT_ROWID,    DB_NULLVALUE,",
          "1913:     DB_ONECOLUMN,             DB_PREUPDATE,            DB_PROFILE,",
          "1914:     DB_PROGRESS,              DB_REKEY,                DB_RESTORE,",
          "1915:     DB_ROLLBACK_HOOK,         DB_SERIALIZE,            DB_STATUS,",
          "1916:     DB_TIMEOUT,               DB_TOTAL_CHANGES,        DB_TRACE,",
          "1917:     DB_TRACE_V2,              DB_TRANSACTION,          DB_UNLOCK_NOTIFY,",
          "1918:     DB_UPDATE_HOOK,           DB_VERSION,              DB_WAL_HOOK",
          "",
          "[Added Lines]",
          "1917:     \"authorizer\",             \"backup\",                \"bind_fallback\",",
          "1918:     \"busy\",                   \"cache\",                 \"changes\",",
          "1919:     \"close\",                  \"collate\",               \"collation_needed\",",
          "1920:     \"commit_hook\",            \"complete\",              \"copy\",",
          "1921:     \"deserialize\",            \"enable_load_extension\", \"errorcode\",",
          "1922:     \"eval\",                   \"exists\",                \"function\",",
          "1923:     \"incrblob\",               \"interrupt\",             \"last_insert_rowid\",",
          "1924:     \"nullvalue\",              \"onecolumn\",             \"preupdate\",",
          "1925:     \"profile\",                \"progress\",              \"rekey\",",
          "1926:     \"restore\",                \"rollback_hook\",         \"serialize\",",
          "1927:     \"status\",                 \"timeout\",               \"total_changes\",",
          "1928:     \"trace\",                  \"trace_v2\",              \"transaction\",",
          "1929:     \"unlock_notify\",          \"update_hook\",           \"version\",",
          "1930:     \"wal_hook\",               0",
          "1933:     DB_AUTHORIZER,            DB_BACKUP,               DB_BIND_FALLBACK,",
          "1934:     DB_BUSY,                  DB_CACHE,                DB_CHANGES,",
          "1935:     DB_CLOSE,                 DB_COLLATE,              DB_COLLATION_NEEDED,",
          "1936:     DB_COMMIT_HOOK,           DB_COMPLETE,             DB_COPY,",
          "1937:     DB_DESERIALIZE,           DB_ENABLE_LOAD_EXTENSION,DB_ERRORCODE,",
          "1938:     DB_EVAL,                  DB_EXISTS,               DB_FUNCTION,",
          "1939:     DB_INCRBLOB,              DB_INTERRUPT,            DB_LAST_INSERT_ROWID,",
          "1940:     DB_NULLVALUE,             DB_ONECOLUMN,            DB_PREUPDATE,",
          "1941:     DB_PROFILE,               DB_PROGRESS,             DB_REKEY,",
          "1942:     DB_RESTORE,               DB_ROLLBACK_HOOK,        DB_SERIALIZE,",
          "1943:     DB_STATUS,                DB_TIMEOUT,              DB_TOTAL_CHANGES,",
          "1944:     DB_TRACE,                 DB_TRACE_V2,             DB_TRANSACTION,",
          "1945:     DB_UNLOCK_NOTIFY,         DB_UPDATE_HOOK,          DB_VERSION,",
          "1946:     DB_WAL_HOOK",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2037:     break;",
          "2038:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2086:   case DB_BIND_FALLBACK: {",
          "2087:     if( objc>3 ){",
          "2088:       Tcl_WrongNumArgs(interp, 2, objv, \"?CALLBACK?\");",
          "2089:       return TCL_ERROR;",
          "2090:     }else if( objc==2 ){",
          "2091:       if( pDb->zBindFallback ){",
          "2092:         Tcl_AppendResult(interp, pDb->zBindFallback, (char*)0);",
          "2093:       }",
          "2094:     }else{",
          "2095:       char *zCallback;",
          "2096:       int len;",
          "2097:       if( pDb->zBindFallback ){",
          "2098:         Tcl_Free(pDb->zBindFallback);",
          "2099:       }",
          "2100:       zCallback = Tcl_GetStringFromObj(objv[2], &len);",
          "2101:       if( zCallback && len>0 ){",
          "2102:         pDb->zBindFallback = Tcl_Alloc( len + 1 );",
          "2103:         memcpy(pDb->zBindFallback, zCallback, len+1);",
          "2104:       }else{",
          "2105:         pDb->zBindFallback = 0;",
          "2106:       }",
          "2107:     }",
          "2108:     break;",
          "2109:   }",
          "",
          "---------------"
        ],
        "test/tclsqlite.test||test/tclsqlite.test": [
          "File: test/tclsqlite.test -> test/tclsqlite.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: do_test tcl-1.2 {",
          "43:   set v [catch {db bogus} msg]",
          "44:   lappend v $msg",
          "46: do_test tcl-1.2.1 {",
          "47:   set v [catch {db cache bogus} msg]",
          "48:   lappend v $msg",
          "",
          "[Removed Lines]",
          "45: } {1 {bad option \"bogus\": must be authorizer, backup, busy, cache, changes, close, collate, collation_needed, commit_hook, complete, copy, deserialize, enable_load_extension, errorcode, eval, exists, function, incrblob, interrupt, last_insert_rowid, nullvalue, onecolumn, preupdate, profile, progress, rekey, restore, rollback_hook, serialize, status, timeout, total_changes, trace, trace_v2, transaction, unlock_notify, update_hook, version, or wal_hook}}",
          "",
          "[Added Lines]",
          "45: } {1 {bad option \"bogus\": must be authorizer, backup, bind_fallback, busy, cache, changes, close, collate, collation_needed, commit_hook, complete, copy, deserialize, enable_load_extension, errorcode, eval, exists, function, incrblob, interrupt, last_insert_rowid, nullvalue, onecolumn, preupdate, profile, progress, rekey, restore, rollback_hook, serialize, status, timeout, total_changes, trace, trace_v2, transaction, unlock_notify, update_hook, version, or wal_hook}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "791:   list [catch { db function xyz -n object ret } msg] $msg",
          "792: } {1 {bad option \"-n\": must be -argcount, -deterministic or -returntype}}",
          "",
          "[Removed Lines]",
          "794: finish_test",
          "",
          "[Added Lines]",
          "794: # 2019-02-28: The \"bind_fallback\" command.",
          "795: #",
          "796: do_test 18.100 {",
          "797:   unset -nocomplain bindings abc def ghi jkl mno e01 e02",
          "798:   set bindings(abc) [expr {1+2}]",
          "799:   set bindings(def) {hello}",
          "800:   set bindings(ghi) [expr {3.1415926*1.0}]",
          "801:   proc bind_callback {nm} {",
          "802:     global bindings",
          "803:     set n2 [string range $nm 1 end]",
          "804:     if {[info exists bindings($n2)]} {",
          "805:       return $bindings($n2)",
          "806:     }",
          "807:     if {[string match e* $n2]} {",
          "808:       error \"no such variable: $nm\"",
          "809:     }",
          "810:     return -code return {}",
          "811:   }",
          "812:   db bind_fallback bind_callback",
          "813:   db eval {SELECT $abc, typeof($abc), $def, typeof($def), $ghi, typeof($ghi)}",
          "814: } {3 integer hello text 3.1415926 real}",
          "815: do_test 18.110 {",
          "816:   db eval {SELECT quote(@def), typeof(@def)}",
          "817: } {X'68656C6C6F' blob}",
          "818: do_execsql_test 18.120 {",
          "819:   SELECT typeof($mno);",
          "820: } {null}",
          "821: do_catchsql_test 18.130 {",
          "822:   SELECT $e01;",
          "823: } {1 {no such variable: $e01}}",
          "824: do_test 18.140 {",
          "825:   db bind_fallback",
          "826: } {bind_callback}",
          "827: do_test 18.200 {",
          "828:   db bind_fallback {}",
          "829:   db eval {SELECT $abc, typeof($abc), $def, typeof($def), $ghi, typeof($ghi)}",
          "830: } {{} null {} null {} null}",
          "831: do_test 18.300 {",
          "832:   unset -nocomplain bindings",
          "833:   proc bind_callback {nm} {lappend ::bindings $nm}",
          "834:   db bind_fallback bind_callback",
          "835:   db eval {SELECT $abc, @def, $ghi(123), :mno}",
          "836:   set bindings",
          "837: } {{$abc} @def {$ghi(123)} :mno}",
          "838: do_test 18.900 {",
          "839:   set rc [catch {db bind_fallback a b} msg]",
          "840:   lappend rc $msg",
          "841: } {1 {wrong # args: should be \"db bind_fallback ?CALLBACK?\"}}",
          "842: do_test 18.910 {",
          "843:   db bind_fallback bind_fallback_does_not_exist",
          "844: } {}",
          "845: do_catchsql_test 19.911 {",
          "846:   SELECT $abc, typeof($abc), $def, typeof($def), $ghi, typeof($ghi);",
          "847: } {1 {invalid command name \"bind_fallback_does_not_exist\"}}",
          "848: db bind_fallback {}",
          "850: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "73bce667015ebf61438a009ef19db0d06842ed07",
      "candidate_info": {
        "commit_hash": "73bce667015ebf61438a009ef19db0d06842ed07",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/73bce667015ebf61438a009ef19db0d06842ed07",
        "files": [
          "ext/misc/fileio.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Use 64-bit APIs in the fileio.c extension.\n\nFossilOrigin-Name: b49d56a0faf012978c50fb8662125ea21bdf5054fddf5975644cbc941c153e70",
        "before_after_code_files": [
          "ext/misc/fileio.c||ext/misc/fileio.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/fileio.c||ext/misc/fileio.c": [
          "File: ext/misc/fileio.c -> ext/misc/fileio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:     fclose(in);",
          "153:     return;",
          "154:   }",
          "156:   if( pBuf==0 ){",
          "157:     sqlite3_result_error_nomem(ctx);",
          "158:     fclose(in);",
          "159:     return;",
          "160:   }",
          "161:   if( 1==fread(pBuf, nIn, 1, in) ){",
          "163:   }else{",
          "164:     sqlite3_result_error_code(ctx, SQLITE_IOERR);",
          "165:     sqlite3_free(pBuf);",
          "",
          "[Removed Lines]",
          "155:   pBuf = sqlite3_malloc( nIn );",
          "162:     sqlite3_result_blob(ctx, pBuf, nIn, sqlite3_free);",
          "",
          "[Added Lines]",
          "155:   pBuf = sqlite3_malloc64( nIn );",
          "162:     sqlite3_result_blob64(ctx, pBuf, nIn, sqlite3_free);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2d7b1d1d41ff69d5465fcb861420816ecb066c25a9015eefdab5fae15a2e1c9f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "87ca8067af3a0d3550eb339b06cac8bd47f010fa",
      "candidate_info": {
        "commit_hash": "87ca8067af3a0d3550eb339b06cac8bd47f010fa",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/87ca8067af3a0d3550eb339b06cac8bd47f010fa",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vtab.c"
        ],
        "message": "Fix the new ability to unregister virtual table modules so that it works for the automatic PRAGMA virtual tables.\n\nFossilOrigin-Name: 5d6f4dfeea75c7dcd8c511545accb9eb4b405a02db034332249ba54794e313d2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vtab.c||src/vtab.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 43e8b14314d876178d487c3b519296ac1de065fdcaa70768e40d684015bceb9d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vtab.c||src/vtab.c": [
          "File: src/vtab.c -> src/vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:       sqlite3DbFree(db, pDel);",
          "73:       pMod = 0;",
          "74:     }else{",
          "75:       sqlite3VtabModuleUnref(db, pDel);",
          "76:     }",
          "77:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75:       sqlite3VtabEponymousTableClear(db, pDel);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "705e73344ed81ea306ea6df8b94fc6b623319def",
      "candidate_info": {
        "commit_hash": "705e73344ed81ea306ea6df8b94fc6b623319def",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/705e73344ed81ea306ea6df8b94fc6b623319def",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/prepare.c"
        ],
        "message": "Omit the check for conflicting shared-cache locks in sqlite3Prepare() if the database connection uses no shared cache.  We might be able to go back and remove this code completely, due to the newer Schema.iGeneration logic, but that will take more analysis.  This check-in gives the speed benefit but not the reduction in code size.\n\nFossilOrigin-Name: 0b73a09270dfafb27f8d1762b547ef8178c9da66f45e7153ff0b76272dfa92f5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/prepare.c||src/prepare.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fc8d45086dc2bcb9bce756088e99e63cbeedf9129139fb0e6a48b43c4f502180",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "614:       }",
          "615:     }",
          "616:   }",
          "",
          "[Removed Lines]",
          "604:   for(i=0; i<db->nDb; i++) {",
          "605:     Btree *pBt = db->aDb[i].pBt;",
          "606:     if( pBt ){",
          "607:       assert( sqlite3BtreeHoldsMutex(pBt) );",
          "608:       rc = sqlite3BtreeSchemaLocked(pBt);",
          "609:       if( rc ){",
          "610:         const char *zDb = db->aDb[i].zDbSName;",
          "611:         sqlite3ErrorWithMsg(db, rc, \"database schema is locked: %s\", zDb);",
          "612:         testcase( db->flags & SQLITE_ReadUncommit );",
          "613:         goto end_prepare;",
          "",
          "[Added Lines]",
          "604:   if( !db->noSharedCache ){",
          "605:     for(i=0; i<db->nDb; i++) {",
          "606:       Btree *pBt = db->aDb[i].pBt;",
          "607:       if( pBt ){",
          "608:         assert( sqlite3BtreeHoldsMutex(pBt) );",
          "609:         rc = sqlite3BtreeSchemaLocked(pBt);",
          "610:         if( rc ){",
          "611:           const char *zDb = db->aDb[i].zDbSName;",
          "612:           sqlite3ErrorWithMsg(db, rc, \"database schema is locked: %s\", zDb);",
          "613:           testcase( db->flags & SQLITE_ReadUncommit );",
          "614:           goto end_prepare;",
          "615:         }",
          "",
          "---------------"
        ]
      }
    }
  ]
}