{
  "cve_id": "CVE-2022-35937",
  "cve_desc": "TensorFlow is an open source platform for machine learning. The `GatherNd` function takes arguments that determine the sizes of inputs and outputs. If the inputs given are greater than or equal to the sizes of the outputs, an out-of-bounds memory read is triggered. This issue has been patched in GitHub commit 595a65a3e224a0362d7e68c2213acfc2b499a196. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "595a65a3e224a0362d7e68c2213acfc2b499a196",
  "patch_info": {
    "commit_hash": "595a65a3e224a0362d7e68c2213acfc2b499a196",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/595a65a3e224a0362d7e68c2213acfc2b499a196",
    "files": [
      "tensorflow/lite/kernels/gather_nd.cc",
      "tensorflow/lite/kernels/gather_nd_test.cc",
      "tensorflow/lite/kernels/internal/reference/reference_ops.h"
    ],
    "message": "Return a TFLite error if gather_nd will result in reading invalid memory\n\nPiperOrigin-RevId: 463054033",
    "before_after_code_files": [
      "tensorflow/lite/kernels/gather_nd.cc||tensorflow/lite/kernels/gather_nd.cc",
      "tensorflow/lite/kernels/gather_nd_test.cc||tensorflow/lite/kernels/gather_nd_test.cc",
      "tensorflow/lite/kernels/internal/reference/reference_ops.h||tensorflow/lite/kernels/internal/reference/reference_ops.h"
    ]
  },
  "patch_diff": {
    "tensorflow/lite/kernels/gather_nd.cc||tensorflow/lite/kernels/gather_nd.cc": [
      "File: tensorflow/lite/kernels/gather_nd.cc -> tensorflow/lite/kernels/gather_nd.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "15: #include <stdint.h>",
      "17: #include \"tensorflow/lite/c/common.h\"",
      "18: #include \"tensorflow/lite/kernels/internal/optimized/optimized_ops.h\"",
      "19: #include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: #include \"tensorflow/lite/c/c_api_types.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "102: }",
      "104: template <typename ParamsT, typename IndicesT>",
      "108:       GetTensorShape(params), GetTensorData<ParamsT>(params),",
      "109:       GetTensorShape(indices), GetTensorData<IndicesT>(indices),",
      "110:       GetTensorShape(output), GetTensorData<ParamsT>(output));",
      "112: }",
      "114: template <typename IndicesT>",
      "",
      "[Removed Lines]",
      "105: TfLiteStatus GatherNd(const TfLiteTensor* params, const TfLiteTensor* indices,",
      "106:                       TfLiteTensor* output) {",
      "107:   reference_ops::GatherNd(",
      "111:   return kTfLiteOk;",
      "",
      "[Added Lines]",
      "106: TfLiteStatus GatherNd(TfLiteContext* context, const TfLiteTensor* params,",
      "107:                       const TfLiteTensor* indices, TfLiteTensor* output) {",
      "108:   const TfLiteStatus status = reference_ops::GatherNd(",
      "112:   if (status != kTfLiteOk) {",
      "113:     TF_LITE_KERNEL_LOG(context, \"gather_nd index out of bounds\");",
      "114:   }",
      "115:   return status;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "137:   switch (params->type) {",
      "138:     case kTfLiteFloat32:",
      "140:     case kTfLiteUInt8:",
      "142:     case kTfLiteInt8:",
      "144:     case kTfLiteInt16:",
      "146:     case kTfLiteInt32:",
      "148:     case kTfLiteInt64:",
      "150:     case kTfLiteString:",
      "151:       return GatherNdString<IndicesT>(params, indices, output);",
      "152:     default:",
      "",
      "[Removed Lines]",
      "139:       return GatherNd<float, IndicesT>(params, indices, output);",
      "141:       return GatherNd<uint8_t, IndicesT>(params, indices, output);",
      "143:       return GatherNd<int8_t, IndicesT>(params, indices, output);",
      "145:       return GatherNd<int16_t, IndicesT>(params, indices, output);",
      "147:       return GatherNd<int32_t, IndicesT>(params, indices, output);",
      "149:       return GatherNd<int64_t, IndicesT>(params, indices, output);",
      "",
      "[Added Lines]",
      "143:       return GatherNd<float, IndicesT>(context, params, indices, output);",
      "145:       return GatherNd<uint8_t, IndicesT>(context, params, indices, output);",
      "147:       return GatherNd<int8_t, IndicesT>(context, params, indices, output);",
      "149:       return GatherNd<int16_t, IndicesT>(context, params, indices, output);",
      "151:       return GatherNd<int32_t, IndicesT>(context, params, indices, output);",
      "153:       return GatherNd<int64_t, IndicesT>(context, params, indices, output);",
      "",
      "---------------"
    ],
    "tensorflow/lite/kernels/gather_nd_test.cc||tensorflow/lite/kernels/gather_nd_test.cc": [
      "File: tensorflow/lite/kernels/gather_nd_test.cc -> tensorflow/lite/kernels/gather_nd_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "73:   EXPECT_THAT(m.GetOutput<float>(), ElementsAreArray({1.1, 2.2}));",
      "74: }",
      "76: TEST(GatherNdOpTest, SliceIndexingIntoMatrix) {",
      "77:   GatherNdOpModel m({TensorType_FLOAT32, {2, 2}}, {TensorType_INT32, {2, 1}});",
      "78:   m.SetInput<float>({1.1, 1.2, 2.1, 2.2});",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "76: TEST(GatherNdOpTest, ErrorOnOutOfBoundsTooLarge) {",
      "77:   GatherNdOpModel m({TensorType_FLOAT32, {2, 2}}, {TensorType_INT32, {2, 2}});",
      "78:   m.SetInput<float>({1.1, 1.2, 2.1, 2.2});",
      "79:   m.SetPositions<int32_t>({0, 0, 2, 0});",
      "80:   EXPECT_EQ(m.Invoke(), kTfLiteError);",
      "81:   m.SetPositions<int32_t>({0, 0, 1, 2});",
      "82:   EXPECT_EQ(m.Invoke(), kTfLiteError);",
      "83: }",
      "85: TEST(GatherNdOpTest, ErrorOnOutOfBoundsNegative) {",
      "86:   GatherNdOpModel m({TensorType_FLOAT32, {2, 2}}, {TensorType_INT32, {2, 2}});",
      "87:   m.SetInput<float>({1.1, 1.2, 2.1, 2.2});",
      "88:   m.SetPositions<int32_t>({1, -1, 1, 1});",
      "89:   EXPECT_EQ(m.Invoke(), kTfLiteError);",
      "90: }",
      "",
      "---------------"
    ],
    "tensorflow/lite/kernels/internal/reference/reference_ops.h||tensorflow/lite/kernels/internal/reference/reference_ops.h": [
      "File: tensorflow/lite/kernels/internal/reference/reference_ops.h -> tensorflow/lite/kernels/internal/reference/reference_ops.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "29: #include \"third_party/eigen3/Eigen/Core\"",
      "30: #include \"fixedpoint/fixedpoint.h\"",
      "31: #include \"ruy/profiler/instrumentation.h\"  // from @ruy",
      "32: #include \"tensorflow/lite/c/common.h\"",
      "33: #include \"tensorflow/lite/kernels/internal/common.h\"",
      "34: #include \"tensorflow/lite/kernels/internal/quantization_util.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "32: #include \"tensorflow/lite/c/c_api_types.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "595:   return ret;",
      "596: }",
      "598: template <typename ParamsT, typename IndicesT = int32>",
      "604:   ruy::profiler::ScopeLabel label(\"GatherNd\");",
      "606:   const GatherNdHelperResult res = GatherNdHelper(params_shape, indices_shape);",
      "607:   for (int i = 0; i < res.n_slices; ++i) {",
      "609:     for (int j = 0; j < res.indices_nd; ++j) {",
      "610:       from_pos += indices_data[i * res.indices_nd + j] * res.dims_to_count[j];",
      "611:     }",
      "612:     std::memcpy(output_data + i * res.slice_size, params_data + from_pos,",
      "613:                 sizeof(ParamsT) * res.slice_size);",
      "614:   }",
      "615: }",
      "617: #ifndef TF_LITE_STATIC_MEMORY",
      "",
      "[Removed Lines]",
      "599: inline void GatherNd(const RuntimeShape& params_shape,",
      "600:                      const ParamsT* params_data,",
      "601:                      const RuntimeShape& indices_shape,",
      "602:                      const IndicesT* indices_data,",
      "603:                      const RuntimeShape& output_shape, ParamsT* output_data) {",
      "608:     int from_pos = 0;",
      "",
      "[Added Lines]",
      "603: inline TfLiteStatus GatherNd(const RuntimeShape& params_shape,",
      "604:                              const ParamsT* params_data,",
      "605:                              const RuntimeShape& indices_shape,",
      "606:                              const IndicesT* indices_data,",
      "607:                              const RuntimeShape& output_shape,",
      "608:                              ParamsT* output_data) {",
      "613:     int64_t from_pos = 0;",
      "617:     if (from_pos < 0 || from_pos + res.slice_size > params_shape.FlatSize()) {",
      "618:       return kTfLiteError;",
      "619:     }",
      "623:   return kTfLiteOk;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bb6a0383ed553c286f87ca88c207f6774d5c4a8f",
      "candidate_info": {
        "commit_hash": "bb6a0383ed553c286f87ca88c207f6774d5c4a8f",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/bb6a0383ed553c286f87ca88c207f6774d5c4a8f",
        "files": [
          "tensorflow/lite/kernels/gather_nd.cc"
        ],
        "message": "Prevent heap OOB read in TFLite's `gather_nd.cc`.\n\nPassing negative indices is illegal but there was a missing check so that resulted in OOB accesses.\n\nPiperOrigin-RevId: 387208551\nChange-Id: I6b7a8a62d3e7c13a16d81619e5bc23ae2cdbc7fd",
        "before_after_code_files": [
          "tensorflow/lite/kernels/gather_nd.cc||tensorflow/lite/kernels/gather_nd.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/gather_nd.cc||tensorflow/lite/kernels/gather_nd.cc"
          ],
          "candidate": [
            "tensorflow/lite/kernels/gather_nd.cc||tensorflow/lite/kernels/gather_nd.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/gather_nd.cc||tensorflow/lite/kernels/gather_nd.cc": [
          "File: tensorflow/lite/kernels/gather_nd.cc -> tensorflow/lite/kernels/gather_nd.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "123: template <typename IndicesT>",
          "124: TfLiteStatus EvalGatherNd(TfLiteContext* context, const TfLiteTensor* params,",
          "125:                           const TfLiteTensor* indices, TfLiteTensor* output) {",
          "126:   switch (params->type) {",
          "127:     case kTfLiteFloat32:",
          "128:       return GatherNd<float, IndicesT>(params, indices, output);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "126:   bool indices_has_only_positive_elements = true;",
          "127:   const auto* indices_values = GetTensorData<IndicesT>(indices);",
          "128:   const size_t num_indices = indices->bytes / sizeof(IndicesT);",
          "129:   for (size_t i = 0; i < num_indices; i++) {",
          "130:     if (indices_values[i] < 0) {",
          "131:       indices_has_only_positive_elements = false;",
          "132:       break;",
          "133:     }",
          "134:   }",
          "135:   TF_LITE_ENSURE(context, indices_has_only_positive_elements);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "266558ac4c1f361e9a178ee9d3f0ce2e648ae499",
      "candidate_info": {
        "commit_hash": "266558ac4c1f361e9a178ee9d3f0ce2e648ae499",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/266558ac4c1f361e9a178ee9d3f0ce2e648ae499",
        "files": [
          "tensorflow/lite/kernels/gather_nd.cc",
          "tensorflow/lite/kernels/gather_nd_test.cc",
          "tensorflow/lite/kernels/internal/reference/reference_ops.h"
        ],
        "message": "Return a TFLite error if gather_nd over a string will result in reading invalid memory\n\nPiperOrigin-RevId: 463117906",
        "before_after_code_files": [
          "tensorflow/lite/kernels/gather_nd.cc||tensorflow/lite/kernels/gather_nd.cc",
          "tensorflow/lite/kernels/gather_nd_test.cc||tensorflow/lite/kernels/gather_nd_test.cc",
          "tensorflow/lite/kernels/internal/reference/reference_ops.h||tensorflow/lite/kernels/internal/reference/reference_ops.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/gather_nd.cc||tensorflow/lite/kernels/gather_nd.cc",
            "tensorflow/lite/kernels/gather_nd_test.cc||tensorflow/lite/kernels/gather_nd_test.cc",
            "tensorflow/lite/kernels/internal/reference/reference_ops.h||tensorflow/lite/kernels/internal/reference/reference_ops.h"
          ],
          "candidate": [
            "tensorflow/lite/kernels/gather_nd.cc||tensorflow/lite/kernels/gather_nd.cc",
            "tensorflow/lite/kernels/gather_nd_test.cc||tensorflow/lite/kernels/gather_nd_test.cc",
            "tensorflow/lite/kernels/internal/reference/reference_ops.h||tensorflow/lite/kernels/internal/reference/reference_ops.h"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/gather_nd.cc||tensorflow/lite/kernels/gather_nd.cc": [
          "File: tensorflow/lite/kernels/gather_nd.cc -> tensorflow/lite/kernels/gather_nd.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "103: }",
          "105: template <typename ParamsT, typename IndicesT>",
          "109:       GetTensorShape(params), GetTensorData<ParamsT>(params),",
          "110:       GetTensorShape(indices), GetTensorData<IndicesT>(indices),",
          "111:       GetTensorShape(output), GetTensorData<ParamsT>(output));",
          "116: }",
          "118: template <typename IndicesT>",
          "119: TfLiteStatus GatherNdString(const TfLiteTensor* params,",
          "120:                             const TfLiteTensor* indices, TfLiteTensor* output) {",
          "122:       GetTensorShape(params), params, GetTensorShape(indices),",
          "123:       GetTensorData<IndicesT>(indices), GetTensorShape(output), output);",
          "125: }",
          "127: template <typename IndicesT>",
          "",
          "[Removed Lines]",
          "106: TfLiteStatus GatherNd(TfLiteContext* context, const TfLiteTensor* params,",
          "107:                       const TfLiteTensor* indices, TfLiteTensor* output) {",
          "108:   const TfLiteStatus status = reference_ops::GatherNd(",
          "112:   if (status != kTfLiteOk) {",
          "113:     TF_LITE_KERNEL_LOG(context, \"gather_nd index out of bounds\");",
          "114:   }",
          "115:   return status;",
          "121:   reference_ops::GatherNdString(",
          "124:   return kTfLiteOk;",
          "",
          "[Added Lines]",
          "106: TfLiteStatus GatherNd(const TfLiteTensor* params, const TfLiteTensor* indices,",
          "107:                       TfLiteTensor* output) {",
          "108:   return reference_ops::GatherNd(",
          "117:   return reference_ops::GatherNdString(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138:   }",
          "139:   TF_LITE_ENSURE(context, indices_has_only_positive_elements);",
          "141:   switch (params->type) {",
          "142:     case kTfLiteFloat32:",
          "144:     case kTfLiteUInt8:",
          "146:     case kTfLiteInt8:",
          "148:     case kTfLiteInt16:",
          "150:     case kTfLiteInt32:",
          "152:     case kTfLiteInt64:",
          "154:     case kTfLiteString:",
          "156:     default:",
          "157:       TF_LITE_KERNEL_LOG(context,",
          "158:                          \"Params type '%s' are not supported by gather_nd.\",",
          "159:                          TfLiteTypeGetName(params->type));",
          "160:       return kTfLiteError;",
          "161:   }",
          "162: }",
          "164: TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {",
          "",
          "[Removed Lines]",
          "143:       return GatherNd<float, IndicesT>(context, params, indices, output);",
          "145:       return GatherNd<uint8_t, IndicesT>(context, params, indices, output);",
          "147:       return GatherNd<int8_t, IndicesT>(context, params, indices, output);",
          "149:       return GatherNd<int16_t, IndicesT>(context, params, indices, output);",
          "151:       return GatherNd<int32_t, IndicesT>(context, params, indices, output);",
          "153:       return GatherNd<int64_t, IndicesT>(context, params, indices, output);",
          "155:       return GatherNdString<IndicesT>(params, indices, output);",
          "",
          "[Added Lines]",
          "136:   TfLiteStatus status = kTfLiteError;",
          "139:       status = GatherNd<float, IndicesT>(params, indices, output);",
          "140:       break;",
          "142:       status = GatherNd<uint8_t, IndicesT>(params, indices, output);",
          "143:       break;",
          "145:       status = GatherNd<int8_t, IndicesT>(params, indices, output);",
          "146:       break;",
          "148:       status = GatherNd<int16_t, IndicesT>(params, indices, output);",
          "149:       break;",
          "151:       status = GatherNd<int32_t, IndicesT>(params, indices, output);",
          "152:       break;",
          "154:       status = GatherNd<int64_t, IndicesT>(params, indices, output);",
          "155:       break;",
          "157:       status = GatherNdString<IndicesT>(params, indices, output);",
          "158:       break;",
          "165:   if (status != kTfLiteOk) {",
          "166:     TF_LITE_KERNEL_LOG(context, \"gather_nd index out of bounds\");",
          "167:   }",
          "168:   return status;",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/gather_nd_test.cc||tensorflow/lite/kernels/gather_nd_test.cc": [
          "File: tensorflow/lite/kernels/gather_nd_test.cc -> tensorflow/lite/kernels/gather_nd_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "359: TEST(GatherNdOpTest, StringInt32) {",
          "360:   GatherNdOpModel m({TensorType_STRING, {3, 2, 3}}, {TensorType_INT32, {2, 2}});",
          "364:   m.SetPositions<int32_t>({0, 1, 1, 0});",
          "365:   ASSERT_EQ(m.Invoke(), kTfLiteOk);",
          "",
          "[Removed Lines]",
          "361:   m.SetInput<std::string>({\"A\", \"B\", \"C\", \"D\", \"E\", \"F\",  //",
          "362:                            \"G\", \"H\", \"I\", \"J\", \"K\", \"L\",  //",
          "363:                            \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\"});",
          "",
          "[Added Lines]",
          "361:   m.SetInput<std::string>({\"A\", \"B\", \"C\",  //",
          "362:                            \"D\", \"E\", \"F\",  //",
          "364:                            \"G\", \"H\", \"I\",  //",
          "365:                            \"J\", \"K\", \"L\",  //",
          "367:                            \"M\", \"N\", \"O\",  //",
          "368:                            \"P\", \"Q\", \"R\"});",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "371: TEST(GatherNdOpTest, StringInt64) {",
          "372:   GatherNdOpModel m({TensorType_STRING, {3, 2, 3}}, {TensorType_INT64, {2, 2}});",
          "376:   m.SetPositions<int64_t>({0LL, 1LL, 1LL, 0LL});",
          "377:   ASSERT_EQ(m.Invoke(), kTfLiteOk);",
          "",
          "[Removed Lines]",
          "373:   m.SetInput<std::string>({\"A\", \"B\", \"C\", \"D\", \"E\", \"F\",  //",
          "374:                            \"G\", \"H\", \"I\", \"J\", \"K\", \"L\",  //",
          "375:                            \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\"});",
          "",
          "[Added Lines]",
          "378:   m.SetInput<std::string>({\"A\", \"B\", \"C\",  //",
          "379:                            \"D\", \"E\", \"F\",  //",
          "381:                            \"G\", \"H\", \"I\",  //",
          "382:                            \"J\", \"K\", \"L\",  //",
          "384:                            \"M\", \"N\", \"O\",  //",
          "385:                            \"P\", \"Q\", \"R\"});",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "380:               ElementsAreArray({\"D\", \"E\", \"F\", \"G\", \"H\", \"I\"}));",
          "381: }",
          "383: TEST(GatherNdOpTest, EmptyParamsAndIndex) {",
          "384:   GatherNdOpModel m({TensorType_FLOAT32, {1, 0}}, {TensorType_INT32, {0, 2}});",
          "385:   ASSERT_EQ(m.Invoke(), kTfLiteOk);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "393: TEST(GatherNdOpTest, StringOutOfBoundsTooLarge) {",
          "394:   GatherNdOpModel m({TensorType_STRING, {3, 2, 3}}, {TensorType_INT32, {2, 2}});",
          "395:   m.SetInput<std::string>({\"A\", \"B\", \"C\",  //",
          "396:                            \"D\", \"E\", \"F\",  //",
          "398:                            \"G\", \"H\", \"I\",  //",
          "399:                            \"J\", \"K\", \"L\",  //",
          "401:                            \"M\", \"N\", \"O\",  //",
          "402:                            \"P\", \"Q\", \"R\"});",
          "403:   m.SetPositions<int32_t>({0, 0, 3, 0});",
          "404:   ASSERT_EQ(m.Invoke(), kTfLiteError);",
          "405:   m.SetPositions<int32_t>({0, 0, 2, 2});",
          "406:   ASSERT_EQ(m.Invoke(), kTfLiteError);",
          "407: }",
          "409: TEST(GatherNdOpTest, StringOutOfBoundsNegative) {",
          "410:   GatherNdOpModel m({TensorType_STRING, {3, 2, 3}}, {TensorType_INT32, {2, 2}});",
          "411:   m.SetInput<std::string>({\"A\", \"B\", \"C\",  //",
          "412:                            \"D\", \"E\", \"F\",  //",
          "414:                            \"G\", \"H\", \"I\",  //",
          "415:                            \"J\", \"K\", \"L\",  //",
          "417:                            \"M\", \"N\", \"O\",  //",
          "418:                            \"P\", \"Q\", \"R\"});",
          "419:   m.SetPositions<int32_t>({1, -1, 0, 0});",
          "420:   ASSERT_EQ(m.Invoke(), kTfLiteError);",
          "421: }",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/internal/reference/reference_ops.h||tensorflow/lite/kernels/internal/reference/reference_ops.h": [
          "File: tensorflow/lite/kernels/internal/reference/reference_ops.h -> tensorflow/lite/kernels/internal/reference/reference_ops.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "624: }",
          "626: #ifndef TF_LITE_STATIC_MEMORY",
          "627: template <typename IndicesT = int32>",
          "634:   ruy::profiler::ScopeLabel label(\"GatherNdString\");",
          "636:   const GatherNdHelperResult res = GatherNdHelper(params_shape, indices_shape);",
          "637:   DynamicBuffer buffer;",
          "638:   for (int i = 0; i < res.n_slices; ++i) {",
          "640:     for (int j = 0; j < res.indices_nd; ++j) {",
          "641:       from_pos += indices_data[i * res.indices_nd + j] * res.dims_to_count[j];",
          "642:     }",
          "643:     for (int j = 0; j < res.slice_size; ++j) {",
          "644:       buffer.AddString(GetString(params_data, from_pos + j));",
          "645:     }",
          "646:   }",
          "647:   buffer.WriteToTensor(output_data, /*new_shape=*/nullptr);",
          "648: }",
          "649: #endif",
          "",
          "[Removed Lines]",
          "628: inline void GatherNdString(const RuntimeShape& params_shape,",
          "629:                            const TfLiteTensor* params_data,",
          "630:                            const RuntimeShape& indices_shape,",
          "631:                            const IndicesT* indices_data,",
          "632:                            const RuntimeShape& output_shape,",
          "633:                            TfLiteTensor* output_data) {",
          "639:     int from_pos = 0;",
          "",
          "[Added Lines]",
          "631: inline TfLiteStatus GatherNdString(const RuntimeShape& params_shape,",
          "632:                                    const TfLiteTensor* params_data,",
          "633:                                    const RuntimeShape& indices_shape,",
          "634:                                    const IndicesT* indices_data,",
          "635:                                    const RuntimeShape& output_shape,",
          "636:                                    TfLiteTensor* output_data) {",
          "642:     int64_t from_pos = 0;",
          "646:     if (from_pos < 0 || from_pos + res.slice_size > params_shape.FlatSize()) {",
          "647:       return kTfLiteError;",
          "648:     }",
          "654:   return kTfLiteOk;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e53ded57aec61fa23ce44b8b9cc3bf6b47ddee96",
      "candidate_info": {
        "commit_hash": "e53ded57aec61fa23ce44b8b9cc3bf6b47ddee96",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/e53ded57aec61fa23ce44b8b9cc3bf6b47ddee96",
        "files": [
          "tensorflow/lite/kernels/gather_nd.cc",
          "tensorflow/lite/kernels/gather_nd_test.cc",
          "tensorflow/lite/kernels/internal/reference/reference_ops.h"
        ],
        "message": "Return a TFLite error if gather_nd will result in reading invalid memory\n\nPiperOrigin-RevId: 463054033",
        "before_after_code_files": [
          "tensorflow/lite/kernels/gather_nd.cc||tensorflow/lite/kernels/gather_nd.cc",
          "tensorflow/lite/kernels/gather_nd_test.cc||tensorflow/lite/kernels/gather_nd_test.cc",
          "tensorflow/lite/kernels/internal/reference/reference_ops.h||tensorflow/lite/kernels/internal/reference/reference_ops.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/gather_nd.cc||tensorflow/lite/kernels/gather_nd.cc",
            "tensorflow/lite/kernels/gather_nd_test.cc||tensorflow/lite/kernels/gather_nd_test.cc",
            "tensorflow/lite/kernels/internal/reference/reference_ops.h||tensorflow/lite/kernels/internal/reference/reference_ops.h"
          ],
          "candidate": [
            "tensorflow/lite/kernels/gather_nd.cc||tensorflow/lite/kernels/gather_nd.cc",
            "tensorflow/lite/kernels/gather_nd_test.cc||tensorflow/lite/kernels/gather_nd_test.cc",
            "tensorflow/lite/kernels/internal/reference/reference_ops.h||tensorflow/lite/kernels/internal/reference/reference_ops.h"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/gather_nd.cc||tensorflow/lite/kernels/gather_nd.cc": [
          "File: tensorflow/lite/kernels/gather_nd.cc -> tensorflow/lite/kernels/gather_nd.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: #include <stdint.h>",
          "17: #include \"tensorflow/lite/c/common.h\"",
          "18: #include \"tensorflow/lite/kernels/internal/optimized/optimized_ops.h\"",
          "19: #include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: #include \"tensorflow/lite/c/c_api_types.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102: }",
          "104: template <typename ParamsT, typename IndicesT>",
          "108:       GetTensorShape(params), GetTensorData<ParamsT>(params),",
          "109:       GetTensorShape(indices), GetTensorData<IndicesT>(indices),",
          "110:       GetTensorShape(output), GetTensorData<ParamsT>(output));",
          "112: }",
          "114: template <typename IndicesT>",
          "",
          "[Removed Lines]",
          "105: TfLiteStatus GatherNd(const TfLiteTensor* params, const TfLiteTensor* indices,",
          "106:                       TfLiteTensor* output) {",
          "107:   reference_ops::GatherNd(",
          "111:   return kTfLiteOk;",
          "",
          "[Added Lines]",
          "106: TfLiteStatus GatherNd(TfLiteContext* context, const TfLiteTensor* params,",
          "107:                       const TfLiteTensor* indices, TfLiteTensor* output) {",
          "108:   const TfLiteStatus status = reference_ops::GatherNd(",
          "112:   if (status != kTfLiteOk) {",
          "113:     TF_LITE_KERNEL_LOG(context, \"gather_nd index out of bounds\");",
          "114:   }",
          "115:   return status;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "137:   switch (params->type) {",
          "138:     case kTfLiteFloat32:",
          "140:     case kTfLiteUInt8:",
          "142:     case kTfLiteInt8:",
          "144:     case kTfLiteInt16:",
          "146:     case kTfLiteInt32:",
          "148:     case kTfLiteInt64:",
          "150:     case kTfLiteString:",
          "151:       return GatherNdString<IndicesT>(params, indices, output);",
          "152:     default:",
          "",
          "[Removed Lines]",
          "139:       return GatherNd<float, IndicesT>(params, indices, output);",
          "141:       return GatherNd<uint8_t, IndicesT>(params, indices, output);",
          "143:       return GatherNd<int8_t, IndicesT>(params, indices, output);",
          "145:       return GatherNd<int16_t, IndicesT>(params, indices, output);",
          "147:       return GatherNd<int32_t, IndicesT>(params, indices, output);",
          "149:       return GatherNd<int64_t, IndicesT>(params, indices, output);",
          "",
          "[Added Lines]",
          "143:       return GatherNd<float, IndicesT>(context, params, indices, output);",
          "145:       return GatherNd<uint8_t, IndicesT>(context, params, indices, output);",
          "147:       return GatherNd<int8_t, IndicesT>(context, params, indices, output);",
          "149:       return GatherNd<int16_t, IndicesT>(context, params, indices, output);",
          "151:       return GatherNd<int32_t, IndicesT>(context, params, indices, output);",
          "153:       return GatherNd<int64_t, IndicesT>(context, params, indices, output);",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/gather_nd_test.cc||tensorflow/lite/kernels/gather_nd_test.cc": [
          "File: tensorflow/lite/kernels/gather_nd_test.cc -> tensorflow/lite/kernels/gather_nd_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:   EXPECT_THAT(m.GetOutput<float>(), ElementsAreArray({1.1, 2.2}));",
          "74: }",
          "76: TEST(GatherNdOpTest, SliceIndexingIntoMatrix) {",
          "77:   GatherNdOpModel m({TensorType_FLOAT32, {2, 2}}, {TensorType_INT32, {2, 1}});",
          "78:   m.SetInput<float>({1.1, 1.2, 2.1, 2.2});",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76: TEST(GatherNdOpTest, ErrorOnOutOfBoundsTooLarge) {",
          "77:   GatherNdOpModel m({TensorType_FLOAT32, {2, 2}}, {TensorType_INT32, {2, 2}});",
          "78:   m.SetInput<float>({1.1, 1.2, 2.1, 2.2});",
          "79:   m.SetPositions<int32_t>({0, 0, 2, 0});",
          "80:   EXPECT_EQ(m.Invoke(), kTfLiteError);",
          "81:   m.SetPositions<int32_t>({0, 0, 1, 2});",
          "82:   EXPECT_EQ(m.Invoke(), kTfLiteError);",
          "83: }",
          "85: TEST(GatherNdOpTest, ErrorOnOutOfBoundsNegative) {",
          "86:   GatherNdOpModel m({TensorType_FLOAT32, {2, 2}}, {TensorType_INT32, {2, 2}});",
          "87:   m.SetInput<float>({1.1, 1.2, 2.1, 2.2});",
          "88:   m.SetPositions<int32_t>({1, -1, 1, 1});",
          "89:   EXPECT_EQ(m.Invoke(), kTfLiteError);",
          "90: }",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/internal/reference/reference_ops.h||tensorflow/lite/kernels/internal/reference/reference_ops.h": [
          "File: tensorflow/lite/kernels/internal/reference/reference_ops.h -> tensorflow/lite/kernels/internal/reference/reference_ops.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include \"third_party/eigen3/Eigen/Core\"",
          "30: #include \"fixedpoint/fixedpoint.h\"",
          "31: #include \"ruy/profiler/instrumentation.h\"  // from @ruy",
          "32: #include \"tensorflow/lite/c/common.h\"",
          "33: #include \"tensorflow/lite/kernels/internal/common.h\"",
          "34: #include \"tensorflow/lite/kernels/internal/quantization_util.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #include \"tensorflow/lite/c/c_api_types.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "581:   return ret;",
          "582: }",
          "584: template <typename ParamsT, typename IndicesT = int32>",
          "590:   ruy::profiler::ScopeLabel label(\"GatherNd\");",
          "592:   const GatherNdHelperResult res = GatherNdHelper(params_shape, indices_shape);",
          "593:   for (int i = 0; i < res.n_slices; ++i) {",
          "595:     for (int j = 0; j < res.indices_nd; ++j) {",
          "596:       from_pos += indices_data[i * res.indices_nd + j] * res.dims_to_count[j];",
          "597:     }",
          "598:     std::memcpy(output_data + i * res.slice_size, params_data + from_pos,",
          "599:                 sizeof(ParamsT) * res.slice_size);",
          "600:   }",
          "601: }",
          "603: #ifndef TF_LITE_STATIC_MEMORY",
          "",
          "[Removed Lines]",
          "585: inline void GatherNd(const RuntimeShape& params_shape,",
          "586:                      const ParamsT* params_data,",
          "587:                      const RuntimeShape& indices_shape,",
          "588:                      const IndicesT* indices_data,",
          "589:                      const RuntimeShape& output_shape, ParamsT* output_data) {",
          "594:     int from_pos = 0;",
          "",
          "[Added Lines]",
          "589: inline TfLiteStatus GatherNd(const RuntimeShape& params_shape,",
          "590:                              const ParamsT* params_data,",
          "591:                              const RuntimeShape& indices_shape,",
          "592:                              const IndicesT* indices_data,",
          "593:                              const RuntimeShape& output_shape,",
          "594:                              ParamsT* output_data) {",
          "599:     int64_t from_pos = 0;",
          "603:     if (from_pos < 0 || from_pos + res.slice_size > params_shape.FlatSize()) {",
          "604:       return kTfLiteError;",
          "605:     }",
          "609:   return kTfLiteOk;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "58cb8c2e10c1b3359a35668f7b5a3d8df27f8f3a",
      "candidate_info": {
        "commit_hash": "58cb8c2e10c1b3359a35668f7b5a3d8df27f8f3a",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/58cb8c2e10c1b3359a35668f7b5a3d8df27f8f3a",
        "files": [
          "tensorflow/lite/kernels/gather_nd.cc",
          "tensorflow/lite/kernels/gather_nd_test.cc",
          "tensorflow/lite/kernels/internal/reference/reference_ops.h"
        ],
        "message": "Return a TFLite error if gather_nd will result in reading invalid memory\n\nPiperOrigin-RevId: 463054033",
        "before_after_code_files": [
          "tensorflow/lite/kernels/gather_nd.cc||tensorflow/lite/kernels/gather_nd.cc",
          "tensorflow/lite/kernels/gather_nd_test.cc||tensorflow/lite/kernels/gather_nd_test.cc",
          "tensorflow/lite/kernels/internal/reference/reference_ops.h||tensorflow/lite/kernels/internal/reference/reference_ops.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/gather_nd.cc||tensorflow/lite/kernels/gather_nd.cc",
            "tensorflow/lite/kernels/gather_nd_test.cc||tensorflow/lite/kernels/gather_nd_test.cc",
            "tensorflow/lite/kernels/internal/reference/reference_ops.h||tensorflow/lite/kernels/internal/reference/reference_ops.h"
          ],
          "candidate": [
            "tensorflow/lite/kernels/gather_nd.cc||tensorflow/lite/kernels/gather_nd.cc",
            "tensorflow/lite/kernels/gather_nd_test.cc||tensorflow/lite/kernels/gather_nd_test.cc",
            "tensorflow/lite/kernels/internal/reference/reference_ops.h||tensorflow/lite/kernels/internal/reference/reference_ops.h"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/gather_nd.cc||tensorflow/lite/kernels/gather_nd.cc": [
          "File: tensorflow/lite/kernels/gather_nd.cc -> tensorflow/lite/kernels/gather_nd.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: #include <stdint.h>",
          "17: #include \"tensorflow/lite/c/common.h\"",
          "18: #include \"tensorflow/lite/kernels/internal/optimized/optimized_ops.h\"",
          "19: #include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: #include \"tensorflow/lite/c/c_api_types.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102: }",
          "104: template <typename ParamsT, typename IndicesT>",
          "108:       GetTensorShape(params), GetTensorData<ParamsT>(params),",
          "109:       GetTensorShape(indices), GetTensorData<IndicesT>(indices),",
          "110:       GetTensorShape(output), GetTensorData<ParamsT>(output));",
          "112: }",
          "114: template <typename IndicesT>",
          "",
          "[Removed Lines]",
          "105: TfLiteStatus GatherNd(const TfLiteTensor* params, const TfLiteTensor* indices,",
          "106:                       TfLiteTensor* output) {",
          "107:   reference_ops::GatherNd(",
          "111:   return kTfLiteOk;",
          "",
          "[Added Lines]",
          "106: TfLiteStatus GatherNd(TfLiteContext* context, const TfLiteTensor* params,",
          "107:                       const TfLiteTensor* indices, TfLiteTensor* output) {",
          "108:   const TfLiteStatus status = reference_ops::GatherNd(",
          "112:   if (status != kTfLiteOk) {",
          "113:     TF_LITE_KERNEL_LOG(context, \"gather_nd index out of bounds\");",
          "114:   }",
          "115:   return status;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "137:   switch (params->type) {",
          "138:     case kTfLiteFloat32:",
          "140:     case kTfLiteUInt8:",
          "142:     case kTfLiteInt8:",
          "144:     case kTfLiteInt16:",
          "146:     case kTfLiteInt32:",
          "148:     case kTfLiteInt64:",
          "150:     case kTfLiteString:",
          "151:       return GatherNdString<IndicesT>(params, indices, output);",
          "152:     default:",
          "",
          "[Removed Lines]",
          "139:       return GatherNd<float, IndicesT>(params, indices, output);",
          "141:       return GatherNd<uint8_t, IndicesT>(params, indices, output);",
          "143:       return GatherNd<int8_t, IndicesT>(params, indices, output);",
          "145:       return GatherNd<int16_t, IndicesT>(params, indices, output);",
          "147:       return GatherNd<int32_t, IndicesT>(params, indices, output);",
          "149:       return GatherNd<int64_t, IndicesT>(params, indices, output);",
          "",
          "[Added Lines]",
          "143:       return GatherNd<float, IndicesT>(context, params, indices, output);",
          "145:       return GatherNd<uint8_t, IndicesT>(context, params, indices, output);",
          "147:       return GatherNd<int8_t, IndicesT>(context, params, indices, output);",
          "149:       return GatherNd<int16_t, IndicesT>(context, params, indices, output);",
          "151:       return GatherNd<int32_t, IndicesT>(context, params, indices, output);",
          "153:       return GatherNd<int64_t, IndicesT>(context, params, indices, output);",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/gather_nd_test.cc||tensorflow/lite/kernels/gather_nd_test.cc": [
          "File: tensorflow/lite/kernels/gather_nd_test.cc -> tensorflow/lite/kernels/gather_nd_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:   EXPECT_THAT(m.GetOutput<float>(), ElementsAreArray({1.1, 2.2}));",
          "74: }",
          "76: TEST(GatherNdOpTest, SliceIndexingIntoMatrix) {",
          "77:   GatherNdOpModel m({TensorType_FLOAT32, {2, 2}}, {TensorType_INT32, {2, 1}});",
          "78:   m.SetInput<float>({1.1, 1.2, 2.1, 2.2});",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76: TEST(GatherNdOpTest, ErrorOnOutOfBoundsTooLarge) {",
          "77:   GatherNdOpModel m({TensorType_FLOAT32, {2, 2}}, {TensorType_INT32, {2, 2}});",
          "78:   m.SetInput<float>({1.1, 1.2, 2.1, 2.2});",
          "79:   m.SetPositions<int32_t>({0, 0, 2, 0});",
          "80:   EXPECT_EQ(m.Invoke(), kTfLiteError);",
          "81:   m.SetPositions<int32_t>({0, 0, 1, 2});",
          "82:   EXPECT_EQ(m.Invoke(), kTfLiteError);",
          "83: }",
          "85: TEST(GatherNdOpTest, ErrorOnOutOfBoundsNegative) {",
          "86:   GatherNdOpModel m({TensorType_FLOAT32, {2, 2}}, {TensorType_INT32, {2, 2}});",
          "87:   m.SetInput<float>({1.1, 1.2, 2.1, 2.2});",
          "88:   m.SetPositions<int32_t>({1, -1, 1, 1});",
          "89:   EXPECT_EQ(m.Invoke(), kTfLiteError);",
          "90: }",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/internal/reference/reference_ops.h||tensorflow/lite/kernels/internal/reference/reference_ops.h": [
          "File: tensorflow/lite/kernels/internal/reference/reference_ops.h -> tensorflow/lite/kernels/internal/reference/reference_ops.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include \"third_party/eigen3/Eigen/Core\"",
          "30: #include \"fixedpoint/fixedpoint.h\"",
          "31: #include \"ruy/profiler/instrumentation.h\"  // from @ruy",
          "32: #include \"tensorflow/lite/c/common.h\"",
          "33: #include \"tensorflow/lite/kernels/internal/common.h\"",
          "34: #include \"tensorflow/lite/kernels/internal/quantization_util.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #include \"tensorflow/lite/c/c_api_types.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "971:   return ret;",
          "972: }",
          "974: template <typename ParamsT, typename IndicesT = int32>",
          "980:   ruy::profiler::ScopeLabel label(\"GatherNd\");",
          "982:   const GatherNdHelperResult res = GatherNdHelper(params_shape, indices_shape);",
          "983:   for (int i = 0; i < res.n_slices; ++i) {",
          "985:     for (int j = 0; j < res.indices_nd; ++j) {",
          "986:       from_pos += indices_data[i * res.indices_nd + j] * res.dims_to_count[j];",
          "987:     }",
          "988:     std::memcpy(output_data + i * res.slice_size, params_data + from_pos,",
          "989:                 sizeof(ParamsT) * res.slice_size);",
          "990:   }",
          "991: }",
          "993: #ifndef TF_LITE_STATIC_MEMORY",
          "",
          "[Removed Lines]",
          "975: inline void GatherNd(const RuntimeShape& params_shape,",
          "976:                      const ParamsT* params_data,",
          "977:                      const RuntimeShape& indices_shape,",
          "978:                      const IndicesT* indices_data,",
          "979:                      const RuntimeShape& output_shape, ParamsT* output_data) {",
          "984:     int from_pos = 0;",
          "",
          "[Added Lines]",
          "979: inline TfLiteStatus GatherNd(const RuntimeShape& params_shape,",
          "980:                              const ParamsT* params_data,",
          "981:                              const RuntimeShape& indices_shape,",
          "982:                              const IndicesT* indices_data,",
          "983:                              const RuntimeShape& output_shape,",
          "984:                              ParamsT* output_data) {",
          "989:     int64_t from_pos = 0;",
          "993:     if (from_pos < 0 || from_pos + res.slice_size > params_shape.FlatSize()) {",
          "994:       return kTfLiteError;",
          "995:     }",
          "999:   return kTfLiteOk;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f6cb52b05f793ea352050d90e04276151aaa5bbf",
      "candidate_info": {
        "commit_hash": "f6cb52b05f793ea352050d90e04276151aaa5bbf",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/f6cb52b05f793ea352050d90e04276151aaa5bbf",
        "files": [
          "tensorflow/lite/kernels/gather_nd.cc",
          "tensorflow/lite/kernels/gather_nd_test.cc",
          "tensorflow/lite/kernels/internal/reference/reference_ops.h"
        ],
        "message": "Return a TFLite error if gather_nd will result in reading invalid memory\n\nPiperOrigin-RevId: 463054033",
        "before_after_code_files": [
          "tensorflow/lite/kernels/gather_nd.cc||tensorflow/lite/kernels/gather_nd.cc",
          "tensorflow/lite/kernels/gather_nd_test.cc||tensorflow/lite/kernels/gather_nd_test.cc",
          "tensorflow/lite/kernels/internal/reference/reference_ops.h||tensorflow/lite/kernels/internal/reference/reference_ops.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/gather_nd.cc||tensorflow/lite/kernels/gather_nd.cc",
            "tensorflow/lite/kernels/gather_nd_test.cc||tensorflow/lite/kernels/gather_nd_test.cc",
            "tensorflow/lite/kernels/internal/reference/reference_ops.h||tensorflow/lite/kernels/internal/reference/reference_ops.h"
          ],
          "candidate": [
            "tensorflow/lite/kernels/gather_nd.cc||tensorflow/lite/kernels/gather_nd.cc",
            "tensorflow/lite/kernels/gather_nd_test.cc||tensorflow/lite/kernels/gather_nd_test.cc",
            "tensorflow/lite/kernels/internal/reference/reference_ops.h||tensorflow/lite/kernels/internal/reference/reference_ops.h"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/gather_nd.cc||tensorflow/lite/kernels/gather_nd.cc": [
          "File: tensorflow/lite/kernels/gather_nd.cc -> tensorflow/lite/kernels/gather_nd.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: #include <stdint.h>",
          "17: #include \"tensorflow/lite/c/common.h\"",
          "18: #include \"tensorflow/lite/kernels/internal/optimized/optimized_ops.h\"",
          "19: #include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: #include \"tensorflow/lite/c/c_api_types.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102: }",
          "104: template <typename ParamsT, typename IndicesT>",
          "108:       GetTensorShape(params), GetTensorData<ParamsT>(params),",
          "109:       GetTensorShape(indices), GetTensorData<IndicesT>(indices),",
          "110:       GetTensorShape(output), GetTensorData<ParamsT>(output));",
          "112: }",
          "114: template <typename IndicesT>",
          "",
          "[Removed Lines]",
          "105: TfLiteStatus GatherNd(const TfLiteTensor* params, const TfLiteTensor* indices,",
          "106:                       TfLiteTensor* output) {",
          "107:   reference_ops::GatherNd(",
          "111:   return kTfLiteOk;",
          "",
          "[Added Lines]",
          "106: TfLiteStatus GatherNd(TfLiteContext* context, const TfLiteTensor* params,",
          "107:                       const TfLiteTensor* indices, TfLiteTensor* output) {",
          "108:   const TfLiteStatus status = reference_ops::GatherNd(",
          "112:   if (status != kTfLiteOk) {",
          "113:     TF_LITE_KERNEL_LOG(context, \"gather_nd index out of bounds\");",
          "114:   }",
          "115:   return status;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "137:   switch (params->type) {",
          "138:     case kTfLiteFloat32:",
          "140:     case kTfLiteUInt8:",
          "142:     case kTfLiteInt8:",
          "144:     case kTfLiteInt16:",
          "146:     case kTfLiteInt32:",
          "148:     case kTfLiteInt64:",
          "150:     case kTfLiteString:",
          "151:       return GatherNdString<IndicesT>(params, indices, output);",
          "152:     default:",
          "",
          "[Removed Lines]",
          "139:       return GatherNd<float, IndicesT>(params, indices, output);",
          "141:       return GatherNd<uint8_t, IndicesT>(params, indices, output);",
          "143:       return GatherNd<int8_t, IndicesT>(params, indices, output);",
          "145:       return GatherNd<int16_t, IndicesT>(params, indices, output);",
          "147:       return GatherNd<int32_t, IndicesT>(params, indices, output);",
          "149:       return GatherNd<int64_t, IndicesT>(params, indices, output);",
          "",
          "[Added Lines]",
          "143:       return GatherNd<float, IndicesT>(context, params, indices, output);",
          "145:       return GatherNd<uint8_t, IndicesT>(context, params, indices, output);",
          "147:       return GatherNd<int8_t, IndicesT>(context, params, indices, output);",
          "149:       return GatherNd<int16_t, IndicesT>(context, params, indices, output);",
          "151:       return GatherNd<int32_t, IndicesT>(context, params, indices, output);",
          "153:       return GatherNd<int64_t, IndicesT>(context, params, indices, output);",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/gather_nd_test.cc||tensorflow/lite/kernels/gather_nd_test.cc": [
          "File: tensorflow/lite/kernels/gather_nd_test.cc -> tensorflow/lite/kernels/gather_nd_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:   EXPECT_THAT(m.GetOutput<float>(), ElementsAreArray({1.1, 2.2}));",
          "74: }",
          "76: TEST(GatherNdOpTest, SliceIndexingIntoMatrix) {",
          "77:   GatherNdOpModel m({TensorType_FLOAT32, {2, 2}}, {TensorType_INT32, {2, 1}});",
          "78:   m.SetInput<float>({1.1, 1.2, 2.1, 2.2});",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76: TEST(GatherNdOpTest, ErrorOnOutOfBoundsTooLarge) {",
          "77:   GatherNdOpModel m({TensorType_FLOAT32, {2, 2}}, {TensorType_INT32, {2, 2}});",
          "78:   m.SetInput<float>({1.1, 1.2, 2.1, 2.2});",
          "79:   m.SetPositions<int32_t>({0, 0, 2, 0});",
          "80:   EXPECT_EQ(m.Invoke(), kTfLiteError);",
          "81:   m.SetPositions<int32_t>({0, 0, 1, 2});",
          "82:   EXPECT_EQ(m.Invoke(), kTfLiteError);",
          "83: }",
          "85: TEST(GatherNdOpTest, ErrorOnOutOfBoundsNegative) {",
          "86:   GatherNdOpModel m({TensorType_FLOAT32, {2, 2}}, {TensorType_INT32, {2, 2}});",
          "87:   m.SetInput<float>({1.1, 1.2, 2.1, 2.2});",
          "88:   m.SetPositions<int32_t>({1, -1, 1, 1});",
          "89:   EXPECT_EQ(m.Invoke(), kTfLiteError);",
          "90: }",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/internal/reference/reference_ops.h||tensorflow/lite/kernels/internal/reference/reference_ops.h": [
          "File: tensorflow/lite/kernels/internal/reference/reference_ops.h -> tensorflow/lite/kernels/internal/reference/reference_ops.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include \"third_party/eigen3/Eigen/Core\"",
          "30: #include \"fixedpoint/fixedpoint.h\"",
          "31: #include \"ruy/profiler/instrumentation.h\"  // from @ruy",
          "32: #include \"tensorflow/lite/c/common.h\"",
          "33: #include \"tensorflow/lite/kernels/internal/common.h\"",
          "34: #include \"tensorflow/lite/kernels/internal/quantization_util.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #include \"tensorflow/lite/c/c_api_types.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "971:   return ret;",
          "972: }",
          "974: template <typename ParamsT, typename IndicesT = int32>",
          "980:   ruy::profiler::ScopeLabel label(\"GatherNd\");",
          "982:   const GatherNdHelperResult res = GatherNdHelper(params_shape, indices_shape);",
          "983:   for (int i = 0; i < res.n_slices; ++i) {",
          "985:     for (int j = 0; j < res.indices_nd; ++j) {",
          "986:       from_pos += indices_data[i * res.indices_nd + j] * res.dims_to_count[j];",
          "987:     }",
          "988:     std::memcpy(output_data + i * res.slice_size, params_data + from_pos,",
          "989:                 sizeof(ParamsT) * res.slice_size);",
          "990:   }",
          "991: }",
          "993: #ifndef TF_LITE_STATIC_MEMORY",
          "",
          "[Removed Lines]",
          "975: inline void GatherNd(const RuntimeShape& params_shape,",
          "976:                      const ParamsT* params_data,",
          "977:                      const RuntimeShape& indices_shape,",
          "978:                      const IndicesT* indices_data,",
          "979:                      const RuntimeShape& output_shape, ParamsT* output_data) {",
          "984:     int from_pos = 0;",
          "",
          "[Added Lines]",
          "979: inline TfLiteStatus GatherNd(const RuntimeShape& params_shape,",
          "980:                              const ParamsT* params_data,",
          "981:                              const RuntimeShape& indices_shape,",
          "982:                              const IndicesT* indices_data,",
          "983:                              const RuntimeShape& output_shape,",
          "984:                              ParamsT* output_data) {",
          "989:     int64_t from_pos = 0;",
          "993:     if (from_pos < 0 || from_pos + res.slice_size > params_shape.FlatSize()) {",
          "994:       return kTfLiteError;",
          "995:     }",
          "999:   return kTfLiteOk;",
          "",
          "---------------"
        ]
      }
    }
  ]
}