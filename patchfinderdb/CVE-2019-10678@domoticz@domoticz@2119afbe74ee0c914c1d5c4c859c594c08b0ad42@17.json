{
  "cve_id": "CVE-2019-10678",
  "cve_desc": "Domoticz before 4.10579 neglects to categorize \\n and \\r as insecure argument options.",
  "repo": "domoticz/domoticz",
  "patch_hash": "2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
  "patch_info": {
    "commit_hash": "2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
    "files": [
      "main/Helper.cpp"
    ],
    "message": "Do not allow enters/returns in arguments (thanks to Fabio Carretto)",
    "before_after_code_files": [
      "main/Helper.cpp||main/Helper.cpp"
    ]
  },
  "patch_diff": {
    "main/Helper.cpp||main/Helper.cpp": [
      "File: main/Helper.cpp -> main/Helper.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "1014:  \"$\",",
      "1015:  \"<\",",
      "1016:  \">\",",
      "1017:  NULL",
      "1018: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1017:  \"\\n\",",
      "1018:  \"\\r\",",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4bebb985dd213010e73f78174db7a40345af866e",
      "candidate_info": {
        "commit_hash": "4bebb985dd213010e73f78174db7a40345af866e",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/4bebb985dd213010e73f78174db7a40345af866e",
        "files": [
          "History.txt",
          "hardware/OpenZWave.cpp",
          "hardware/ZWaveBase.h"
        ],
        "message": "- Implemented: OpenZWave, support for Seismic Intensity sensor",
        "before_after_code_files": [
          "hardware/OpenZWave.cpp||hardware/OpenZWave.cpp",
          "hardware/ZWaveBase.h||hardware/ZWaveBase.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/OpenZWave.cpp||hardware/OpenZWave.cpp": [
          "File: hardware/OpenZWave.cpp -> hardware/OpenZWave.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:  SCALEID_MOISTRUE,",
          "59:  SCALEID_TANK_CAPACITY,",
          "60:  SCALEID_RAIN_RATE,",
          "61: };",
          "63: struct _tAlarmNameToIndexMapping",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:  SCALEID_SEISMIC_INTENSITY,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1757:     if (m_pManager->GetValueAsFloat(vID, &fValue) == true)",
          "1758:     {",
          "1759:      _device.floatValue = fValue;",
          "1761:      _device.scaleMultiply = 1;",
          "1762:      _device.devType = ZDTYPE_SENSOR_VOLTAGE;",
          "1763:      InsertDevice(_device);",
          "1764:     }",
          "",
          "[Removed Lines]",
          "1760:      _device.scaleID = SCALEID_VOLTAGE;",
          "",
          "[Added Lines]",
          "1762:      _device.scaleID = SCALEID_VOLTAGE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1772:     if (m_pManager->GetValueAsFloat(vID, &fValue) == true)",
          "1773:     {",
          "1774:      _device.floatValue = fValue;",
          "1776:      _device.scaleMultiply = 1;",
          "1777:      _device.devType = ZDTYPE_SENSOR_AMPERE;",
          "1778:      InsertDevice(_device);",
          "1779:     }",
          "",
          "[Removed Lines]",
          "1775:      _device.scaleID = SCALEID_CURRENT;",
          "",
          "[Added Lines]",
          "1777:      _device.scaleID = SCALEID_CURRENT;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1786:     if (m_pManager->GetValueAsFloat(vID, &fValue) == true)",
          "1787:     {",
          "1788:      _device.floatValue = fValue;",
          "1790:      _device.scaleMultiply = 1;",
          "1791:      _device.devType = ZDTYPE_SENSOR_PERCENTAGE;",
          "1792:      InsertDevice(_device);",
          "1793:     }",
          "",
          "[Removed Lines]",
          "1789:      _device.scaleID = SCALEID_POWERFACTOR;",
          "",
          "[Added Lines]",
          "1791:      _device.scaleID = SCALEID_POWERFACTOR;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1800:     if (m_pManager->GetValueAsFloat(vID, &fValue) == true)",
          "1801:     {",
          "1802:      _device.floatValue = fValue;",
          "1804:      _device.scaleMultiply = 1;",
          "1805:      _device.devType = ZDTYPE_SENSOR_GAS;",
          "1806:      InsertDevice(_device);",
          "1807:     }",
          "",
          "[Removed Lines]",
          "1803:      _device.scaleID = SCALEID_GAS;",
          "",
          "[Added Lines]",
          "1805:      _device.scaleID = SCALEID_GAS;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1814:     if (m_pManager->GetValueAsFloat(vID, &fValue) == true)",
          "1815:     {",
          "1816:      _device.floatValue = fValue;",
          "1818:      _device.scaleMultiply = 1;",
          "1819:      _device.devType = ZDTYPE_SENSOR_WATER;",
          "1820:      InsertDevice(_device);",
          "1821:     }",
          "",
          "[Removed Lines]",
          "1817:      _device.scaleID = SCALEID_WATER;",
          "",
          "[Added Lines]",
          "1819:      _device.scaleID = SCALEID_WATER;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1984:     if (m_pManager->GetValueAsFloat(vID, &fValue) == true)",
          "1985:     {",
          "1986:      _device.floatValue = fValue;",
          "1988:      _device.scaleMultiply = 1;",
          "1989:      _device.devType = ZDTYPE_SENSOR_GAS;",
          "1990:      InsertDevice(_device);",
          "1991:     }",
          "",
          "[Removed Lines]",
          "1987:      _device.scaleID = SCALEID_GAS;",
          "",
          "[Added Lines]",
          "1989:      _device.scaleID = SCALEID_GAS;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1998:     if (m_pManager->GetValueAsFloat(vID, &fValue) == true)",
          "1999:     {",
          "2000:      _device.floatValue = fValue;",
          "2002:      _device.scaleMultiply = 1;",
          "2003:      _device.devType = ZDTYPE_SENSOR_WATER;",
          "2004:      InsertDevice(_device);",
          "2005:     }",
          "",
          "[Removed Lines]",
          "2001:      _device.scaleID = SCALEID_WATER;",
          "",
          "[Added Lines]",
          "2003:      _device.scaleID = SCALEID_WATER;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2012:     if (m_pManager->GetValueAsFloat(vID, &fValue) == true)",
          "2013:     {",
          "2014:      _device.floatValue = fValue;",
          "2016:      _device.scaleMultiply = 1;",
          "2017:      _device.devType = ZDTYPE_SENSOR_CO2;",
          "2018:      InsertDevice(_device);",
          "2019:     }",
          "",
          "[Removed Lines]",
          "2015:      _device.scaleID = SCALEID_CO2;",
          "",
          "[Added Lines]",
          "2017:      _device.scaleID = SCALEID_CO2;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2026:     if (m_pManager->GetValueAsFloat(vID, &fValue) == true)",
          "2027:     {",
          "2028:      _device.floatValue = fValue;",
          "2030:      _device.scaleMultiply = 1;",
          "2031:      _device.devType = ZDTYPE_SENSOR_MOISTURE;",
          "2032:      InsertDevice(_device);",
          "2033:     }",
          "",
          "[Removed Lines]",
          "2029:      _device.scaleID = SCALEID_MOISTRUE;",
          "",
          "[Added Lines]",
          "2031:      _device.scaleID = SCALEID_MOISTRUE;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2040:     if (m_pManager->GetValueAsFloat(vID, &fValue) == true)",
          "2041:     {",
          "2042:      _device.floatValue = fValue;",
          "2044:      _device.scaleMultiply = 1;",
          "2045:      _device.devType = ZDTYPE_SENSOR_TANK_CAPACITY;",
          "2046:      InsertDevice(_device);",
          "2047:     }",
          "",
          "[Removed Lines]",
          "2043:      _device.scaleID = SCALEID_TANK_CAPACITY;",
          "",
          "[Added Lines]",
          "2045:      _device.scaleID = SCALEID_TANK_CAPACITY;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2054:     if (m_pManager->GetValueAsFloat(vID, &fValue) == true)",
          "2055:     {",
          "2056:      _device.floatValue = fValue;",
          "2057:      _device.devType = ZDTYPE_SWITCH_NORMAL;",
          "2058:      InsertDevice(_device);",
          "2059:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2058:      _device.scaleMultiply = 1;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2066:     if (m_pManager->GetValueAsFloat(vID, &fValue) == true)",
          "2067:     {",
          "2068:      _device.floatValue = fValue;",
          "2070:      _device.scaleMultiply = 1;",
          "2071:      _device.devType = ZDTYPE_SENSOR_CUSTOM;",
          "2072:      _device.custom_label = \"mm/h\";",
          "2073:      InsertDevice(_device);",
          "2074:     }",
          "2075:    }",
          "2076:   }",
          "2077:   else",
          "2078:   {",
          "2079:    _log.Log(LOG_STATUS, \"OpenZWave: Value_Added: Unhandled Label: %s, Unit: %s\", vLabel.c_str(), vUnits.c_str());",
          "",
          "[Removed Lines]",
          "2069:      _device.scaleID = SCALEID_RAIN_RATE;",
          "",
          "[Added Lines]",
          "2072:      _device.scaleID = SCALEID_RAIN_RATE;",
          "2079:   else if (vLabel == \"Seismic Intensity\")",
          "2080:   {",
          "2081:    if (vType == OpenZWave::ValueID::ValueType_Decimal)",
          "2082:    {",
          "2083:     if (m_pManager->GetValueAsFloat(vID, &fValue) == true)",
          "2084:     {",
          "2085:      _device.floatValue = fValue;",
          "2086:      _device.scaleMultiply = 1;",
          "2087:      _device.scaleID = SCALEID_SEISMIC_INTENSITY;",
          "2088:      _device.devType = ZDTYPE_SENSOR_PERCENTAGE;",
          "2089:      InsertDevice(_device);",
          "2090:     }",
          "2091:    }",
          "2092:   }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2577:    scaleID = SCALEID_TANK_CAPACITY;",
          "2578:   else if (vLabel == \"Rain Rate\")",
          "2579:    scaleID = SCALEID_RAIN_RATE;",
          "2581:   sstr << \".\" << scaleID;",
          "2582:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2596:   else if (vLabel == \"Seismic Intensity\")",
          "2597:    scaleID = SCALEID_SEISMIC_INTENSITY;",
          "",
          "---------------"
        ],
        "hardware/ZWaveBase.h||hardware/ZWaveBase.h": [
          "File: hardware/ZWaveBase.h -> hardware/ZWaveBase.h"
        ]
      }
    },
    {
      "candidate_hash": "d7382d001a626dec8b6b53da997f88a63a355f9e",
      "candidate_info": {
        "commit_hash": "d7382d001a626dec8b6b53da997f88a63a355f9e",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/d7382d001a626dec8b6b53da997f88a63a355f9e",
        "files": [
          "History.txt",
          "main/RFXNames.cpp"
        ],
        "message": "Fixed: Light Log Set 'Level' for RGB switches",
        "before_after_code_files": [
          "main/RFXNames.cpp||main/RFXNames.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/RFXNames.cpp||main/RFXNames.cpp": [
          "File: main/RFXNames.cpp -> main/RFXNames.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1638:    lstatus = \"On\";",
          "1639:    break;",
          "1640:   case Color_SetBrightnessLevel:",
          "1642:    break;",
          "1643:   case Color_SetColorToWhite:",
          "1644:    lstatus = \"Set to White\";",
          "",
          "[Removed Lines]",
          "1641:    lstatus = \"Set Level\";",
          "",
          "[Added Lines]",
          "1641:    sprintf(szTmp, \"Set Level: %d %%\", llevel);",
          "1642:    if (sValue != \"0\")",
          "1643:     lstatus = szTmp;",
          "1644:    else",
          "1645:     lstatus = \"Off\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "89676963da43a53c3589edb57e6a8928d145960b",
      "candidate_info": {
        "commit_hash": "89676963da43a53c3589edb57e6a8928d145960b",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/89676963da43a53c3589edb57e6a8928d145960b",
        "files": [
          "hardware/plugins/Plugins.cpp"
        ],
        "message": "Improvement: Add StartupFolder to Parameters handed to plugins",
        "before_after_code_files": [
          "hardware/plugins/Plugins.cpp||hardware/plugins/Plugins.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/plugins/Plugins.cpp||hardware/plugins/Plugins.cpp": [
          "File: hardware/plugins/Plugins.cpp -> hardware/plugins/Plugins.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #define GETSTATE(m) ((struct module_state*)PyModule_GetState(m))",
          "34: extern std::string szWWWFolder;",
          "35: extern std::string szAppVersion;",
          "36: extern std::string szAppHash;",
          "37: extern std::string szAppDate;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: extern std::string szStartupFolder;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1128:      std::vector<std::string> sd = *itt;",
          "1129:      const char* pChar = sd[0].c_str();",
          "1130:      ADD_STRING_TO_DICT(pParamsDict, \"HomeFolder\", m_HomeFolder);",
          "1131:      ADD_STRING_TO_DICT(pParamsDict, \"Version\", m_Version);",
          "1132:      ADD_STRING_TO_DICT(pParamsDict, \"Author\", m_Author);",
          "1133:      ADD_STRING_TO_DICT(pParamsDict, \"Name\", sd[0]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1132:      ADD_STRING_TO_DICT(pParamsDict, \"StartupFolder\", szStartupFolder);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "927e3c43ec2d4d7f1910c9c169b9e4ca512fc61b",
      "candidate_info": {
        "commit_hash": "927e3c43ec2d4d7f1910c9c169b9e4ca512fc61b",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/927e3c43ec2d4d7f1910c9c169b9e4ca512fc61b",
        "files": [
          "push/InfluxPush.cpp"
        ],
        "message": "Influxdb pusher, add timestamp again",
        "before_after_code_files": [
          "push/InfluxPush.cpp||push/InfluxPush.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "push/InfluxPush.cpp||push/InfluxPush.cpp": [
          "File: push/InfluxPush.cpp -> push/InfluxPush.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:  sURL << m_InfluxIP << \":\" << m_InfluxPort << \"/write?\";",
          "69:  if ((!m_InfluxUsername.empty()) && (!m_InfluxPassword.empty()))",
          "70:   sURL << \"u=\" << m_InfluxUsername << \"&p=\" << base64_decode(m_InfluxPassword) << \"&\";",
          "72:  m_szURL = sURL.str();",
          "73: }",
          "",
          "[Removed Lines]",
          "71:  sURL << \"db=\" << m_InfluxDatabase;",
          "",
          "[Added Lines]",
          "71:  sURL << \"db=\" << m_InfluxDatabase << \"&precision=s\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "195:   std::vector<_tPushItem>::iterator itt = _items2do.begin();",
          "196:   while (itt != _items2do.end())",
          "197:   {",
          "198:    std::stringstream sziData;",
          "199:    sziData << itt->skey << \" value=\" << itt->svalue;",
          "200:    if (m_bInfluxDebugActive) {",
          "201:     _log.Log(LOG_NORM, \"InfluxLink: value %s\", sziData.str().c_str());",
          "202:    }",
          "206:    sSendData += sziData.str();",
          "207:    ++itt;",
          "208:   }",
          "",
          "[Removed Lines]",
          "204:    if (!sSendData.empty())",
          "205:     sSendData += \"\\n\";",
          "",
          "[Added Lines]",
          "198:    if (!sSendData.empty())",
          "199:     sSendData += \"\\n\";",
          "206:    sziData << \" \" << itt->stimestamp;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "210:   std::string sResult;",
          "211:   if (!HTTPClient::POST(m_szURL, sSendData, ExtraHeaders, sResult, true, true))",
          "212:   {",
          "214:   }",
          "215:  }",
          "216: }",
          "",
          "[Removed Lines]",
          "213:    _log.Log(LOG_ERROR, \"InfluxLink: Error sending data to InfluxDB server! (check address/port/database)\");",
          "",
          "[Added Lines]",
          "214:    _log.Log(LOG_ERROR, \"InfluxLink: Error sending data to InfluxDB server! (check address/port/database/username/password)\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e9a6c38c391d1747b091f286a54d1ff5953d9cb2",
      "candidate_info": {
        "commit_hash": "e9a6c38c391d1747b091f286a54d1ff5953d9cb2",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/e9a6c38c391d1747b091f286a54d1ff5953d9cb2",
        "files": [
          "main/mainworker.cpp"
        ],
        "message": "Removed debug line",
        "before_after_code_files": [
          "main/mainworker.cpp||main/mainworker.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/mainworker.cpp||main/mainworker.cpp": [
          "File: main/mainworker.cpp -> main/mainworker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "906:   pHardware = new I2C(ID, I2C::I2CTYPE_BME280, Address, SerialPort, Mode1);",
          "907:   break;",
          "908:  case HTYPE_RaspberryMCP23017:",
          "910:   pHardware = new I2C(ID, I2C::I2CTYPE_MCP23017, Address, SerialPort, Mode1);",
          "911:   break;",
          "912:  case HTYPE_Wunderground:",
          "",
          "[Removed Lines]",
          "909:   _log.Log(LOG_NORM, \"MainWorker::AddHardwareFromParams HTYPE_RaspberryMCP23017\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}