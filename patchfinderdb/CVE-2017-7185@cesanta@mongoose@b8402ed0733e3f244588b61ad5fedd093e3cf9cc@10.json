{
  "cve_id": "CVE-2017-7185",
  "cve_desc": "Use-after-free vulnerability in the mg_http_multipart_wait_for_boundary function in mongoose.c in Cesanta Mongoose Embedded Web Server Library 6.7 and earlier and Mongoose OS 1.2 and earlier allows remote attackers to cause a denial of service (crash) via a multipart/form-data POST request without a MIME boundary string.",
  "repo": "cesanta/mongoose",
  "patch_hash": "b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
  "patch_info": {
    "commit_hash": "b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
    "repo": "cesanta/mongoose",
    "commit_url": "https://github.com/cesanta/mongoose/commit/b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
    "files": [
      "mongoose.c"
    ],
    "message": "Fix crash in multipart handling\n\nClose cesanta/dev#6974\n\nPUBLISHED_FROM=4d4e4a46eceba10aec8dacb7f8f58bd078c92307",
    "before_after_code_files": [
      "mongoose.c||mongoose.c"
    ]
  },
  "patch_diff": {
    "mongoose.c||mongoose.c": [
      "File: mongoose.c -> mongoose.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "5961:   struct mbuf *io = &c->recv_mbuf;",
      "5962:   struct mg_http_proto_data *pd = mg_http_get_proto_data(c);",
      "5964:   if ((int) io->len < pd->mp_stream.boundary_len + 2) {",
      "5965:     return 0;",
      "5966:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5964:   if (pd->mp_stream.boundary == NULL) {",
      "5965:     pd->mp_stream.state = MPS_FINALIZE;",
      "5966:     DBG((\"Invalid request: boundary not initilaized\"));",
      "5967:     return 0;",
      "5968:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "acfc66cd60f5bfa7dc4d37194d72855c201e5710",
      "candidate_info": {
        "commit_hash": "acfc66cd60f5bfa7dc4d37194d72855c201e5710",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/acfc66cd60f5bfa7dc4d37194d72855c201e5710",
        "files": [
          "mongoose.c"
        ],
        "message": "Correctly report bytes sent via SSL\n\nThis prevented hexdump from showing data sent over SSL when using LWIP net_if\n\nPUBLISHED_FROM=aa520a27bdd21294484c52bf33c8580f3b4bad65",
        "before_after_code_files": [
          "mongoose.c||mongoose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "15099:   int ret = mg_ssl_if_write(nc, nc->send_mbuf.buf, len);",
          "15100:   DBG((\"%p SSL_write %u = %d, %d\", nc, len, ret));",
          "15101:   if (ret > 0) {",
          "15102:     mbuf_remove(&nc->send_mbuf, ret);",
          "15103:     mbuf_trim(&nc->send_mbuf);",
          "15104:     cs->last_ssl_write_size = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15102:     mg_if_sent_cb(nc, ret);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ceb2f1da41d1876132b0753291f57ecf4bee5df8",
      "candidate_info": {
        "commit_hash": "ceb2f1da41d1876132b0753291f57ecf4bee5df8",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/ceb2f1da41d1876132b0753291f57ecf4bee5df8",
        "files": [
          "examples/big_upload/ajax_upload_demo/index.html",
          "examples/big_upload/big_upload.c",
          "examples/big_upload/index.html"
        ],
        "message": "Update upload example\n\nPUBLISHED_FROM=a28c1da3f0dd597792439246313ca39984ab7536",
        "before_after_code_files": [
          "examples/big_upload/big_upload.c||examples/big_upload/big_upload.c",
          "examples/big_upload/ajax_upload_demo/index.html||examples/big_upload/index.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/big_upload/big_upload.c||examples/big_upload/big_upload.c": [
          "File: examples/big_upload/big_upload.c -> examples/big_upload/big_upload.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:   size_t bytes_written;",
          "18: };",
          "36: static void handle_upload(struct mg_connection *nc, int ev, void *p) {",
          "37:   struct file_writer_data *data = (struct file_writer_data *) nc->user_data;",
          "38:   struct mg_http_multipart_part *mp = (struct mg_http_multipart_part *) p;",
          "",
          "[Removed Lines]",
          "20: static void handle_request(struct mg_connection *nc) {",
          "22:   mg_printf(nc, \"%s\",",
          "23:             \"HTTP/1.1 200 OK\\r\\n\"",
          "24:             \"Content-Type: text/html\\r\\n\"",
          "25:             \"Connection: close\\r\\n\"",
          "26:             \"\\r\\n\"",
          "27:             \"<html><body>Upload example.\"",
          "28:             \"<form method=\\\"POST\\\" action=\\\"/upload\\\" \"",
          "29:             \"  enctype=\\\"multipart/form-data\\\">\"",
          "30:             \"<input type=\\\"file\\\" name=\\\"file\\\" /> <br/>\"",
          "31:             \"<input type=\\\"submit\\\" value=\\\"Upload\\\" />\"",
          "32:             \"</form></body></html>\");",
          "33:   nc->flags |= MG_F_SEND_AND_CLOSE;",
          "34: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83: }",
          "85: static void ev_handler(struct mg_connection *nc, int ev, void *ev_data) {",
          "105:   if (ev == MG_EV_HTTP_REQUEST) {",
          "114:   }",
          "115: }",
          "117: int main(void) {",
          "118:   struct mg_mgr mgr;",
          "121:   mg_mgr_init(&mgr, NULL);",
          "124:   s_http_server_opts.document_root = \".\";  // Serve current directory",
          "135:   printf(\"Starting web server on port %s\\n\", s_http_port);",
          "136:   for (;;) {",
          "",
          "[Removed Lines]",
          "86:   (void) ev_data;",
          "87:   if (ev == MG_EV_HTTP_REQUEST) {",
          "88:     mg_printf(nc, \"%s\",",
          "89:               \"HTTP/1.1 200 OK\\r\\n\"",
          "90:               \"Content-Type: text/html\\r\\n\"",
          "91:               \"Connection: close\\r\\n\"",
          "92:               \"\\r\\n\"",
          "93:               \"<html><body>Upload example.\"",
          "94:               \"Navigate to <a \"",
          "95:               \"href=\\\"simple_upload_demo\\\">/simple_upload_demo</a> for \"",
          "96:               \"uploading using submit \"",
          "97:               \"or to <a href=\\\"/ajax_upload_demo\\\">/ajax_upload_demo</a> for \"",
          "98:               \"uploading using ajax\"",
          "99:               \"</form></body></html>\");",
          "100:     nc->flags |= MG_F_SEND_AND_CLOSE;",
          "101:   }",
          "102: }",
          "104: static void upload_demo_handler(struct mg_connection *nc, int ev, void *p) {",
          "106:     (void) p;",
          "107:     handle_request(nc);",
          "108:   }",
          "109: }",
          "111: static void ajax_demo_handler(struct mg_connection *nc, int ev, void *p) {",
          "112:   if (ev == MG_EV_HTTP_REQUEST) {",
          "113:     mg_serve_http(nc, (struct http_message *) p, s_http_server_opts);",
          "119:   struct mg_connection *nc;",
          "122:   nc = mg_bind(&mgr, s_http_port, ev_handler);",
          "126:   mg_register_http_endpoint(nc, \"/upload\", handle_upload MG_UD_ARG(NULL));",
          "127:   mg_register_http_endpoint(nc, \"/ajax_upload_demo\",",
          "128:                             ajax_demo_handler MG_UD_ARG(NULL));",
          "129:   mg_register_http_endpoint(nc, \"/simple_upload_demo\",",
          "130:                             upload_demo_handler MG_UD_ARG(NULL));",
          "133:   mg_set_protocol_http_websocket(nc);",
          "",
          "[Added Lines]",
          "71:     mg_serve_http(nc, ev_data, s_http_server_opts);",
          "77:   struct mg_connection *c;",
          "80:   c = mg_bind(&mgr, s_http_port, ev_handler);",
          "81:   if (c == NULL) {",
          "82:     fprintf(stderr, \"Cannot start server on port %s\\n\", s_http_port);",
          "83:     exit(EXIT_FAILURE);",
          "84:   }",
          "87:   mg_register_http_endpoint(c, \"/upload\", handle_upload MG_UD_ARG(NULL));",
          "90:   mg_set_protocol_http_websocket(c);",
          "",
          "---------------"
        ],
        "examples/big_upload/ajax_upload_demo/index.html||examples/big_upload/index.html": [
          "File: examples/big_upload/ajax_upload_demo/index.html -> examples/big_upload/index.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: </head>",
          "37: <body>",
          "38:   <form method=\"post\" id=\"filename\" name=\"filename\" onsubmit=\"return uploadFile();\">",
          "39:     <label>Select a file:</label><br>",
          "40:     <input type=\"file\" id=\"file\" name=\"file\" required />",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:   <h1>Upload file using standard form upload</h1>",
          "40:   <form method=\"POST\" action=\"/upload\" enctype=\"multipart/form-data\">",
          "41:     <label>Select a file:</label><br>",
          "42:     <input type=\"file\" name=\"file\" />",
          "43:     <input type=\"submit\" value=\"Upload\" />",
          "44:   </form>",
          "46:   <h1>Upload file using Ajax - that also gives progress report</h1>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "09e4254718300644ccc90c28aa0a32975d49237b",
      "candidate_info": {
        "commit_hash": "09e4254718300644ccc90c28aa0a32975d49237b",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/09e4254718300644ccc90c28aa0a32975d49237b",
        "files": [
          "examples/mqtt_over_websocket_server/Makefile",
          "examples/mqtt_over_websocket_server/mqtt_over_websocket_server.c",
          "mongoose.c",
          "mongoose.h"
        ],
        "message": "Add mqtt_over_websocket_server example\n\nFixed bug in websocket handshake:\nnow adding Sec-WebSocket-Protocol header in handshake response.\n\nPUBLISHED_FROM=e4a71ff9dc4aeec63db40cb7f356dc5b25c1215a",
        "before_after_code_files": [
          "examples/mqtt_over_websocket_server/mqtt_over_websocket_server.c||examples/mqtt_over_websocket_server/mqtt_over_websocket_server.c",
          "mongoose.c||mongoose.c",
          "mongoose.h||mongoose.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "examples/mqtt_over_websocket_server/mqtt_over_websocket_server.c||examples/mqtt_over_websocket_server/mqtt_over_websocket_server.c": [
          "File: examples/mqtt_over_websocket_server/mqtt_over_websocket_server.c -> examples/mqtt_over_websocket_server/mqtt_over_websocket_server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #include \"mongoose.h\"",
          "20: static const char *s_mqtt_address = \"0.0.0.0:1883\";",
          "21: static const char *s_http_address = \"0.0.0.0:8080\";",
          "23: static void unproxy(struct mg_connection *c) {",
          "24:   struct mg_connection *pc = (struct mg_connection *) c->user_data;",
          "25:   if (pc != NULL) {",
          "26:     pc->flags |= MG_F_CLOSE_IMMEDIATELY;",
          "27:     pc->user_data = NULL;",
          "28:     c->user_data = NULL;",
          "29:   }",
          "30:   printf(\"Closing connection %p\\n\", c);",
          "31: }",
          "33: static void proxy_handler(struct mg_connection *c, int ev, void *ev_data) {",
          "34:   if (ev == MG_EV_POLL) return;",
          "35:   printf(\"%p %s EVENT %d %p\\n\", c, __func__, ev, ev_data);",
          "36:   switch (ev) {",
          "37:     case MG_EV_CLOSE: {",
          "38:       unproxy(c);",
          "39:       break;",
          "40:     }",
          "41:     case MG_EV_RECV: {",
          "42:       struct mg_connection *pc = (struct mg_connection *) c->user_data;",
          "43:       if (pc != NULL) {",
          "44:         mg_send_websocket_frame(pc, WEBSOCKET_OP_BINARY, c->recv_mbuf.buf,",
          "45:                                 c->recv_mbuf.len);",
          "46:         mbuf_remove(&c->recv_mbuf, c->recv_mbuf.len);",
          "47:       }",
          "48:       break;",
          "49:     }",
          "50:   }",
          "51: }",
          "53: static void http_handler(struct mg_connection *c, int ev, void *ev_data) {",
          "54:   struct mg_connection *pc = (struct mg_connection *) c->user_data;",
          "55:   if (ev == MG_EV_POLL) return;",
          "56:   printf(\"%p %s EVENT %d %p\\n\", c, __func__, ev, ev_data);",
          "58:   switch (ev) {",
          "59:     case MG_EV_WEBSOCKET_HANDSHAKE_DONE: {",
          "60:       pc = mg_connect(c->mgr, s_mqtt_address, proxy_handler);",
          "61:       pc->user_data = c;",
          "62:       c->user_data = pc;",
          "63:       printf(\"Created proxy connection %p\\n\", pc);",
          "64:       break;",
          "65:     }",
          "66:     case MG_EV_WEBSOCKET_FRAME: {",
          "67:       struct websocket_message *wm = (struct websocket_message *) ev_data;",
          "68:       if (pc != NULL) {",
          "69:         printf(\"Forwarding %d bytes\\n\", (int) wm->size);",
          "70:         mg_send(pc, wm->data, wm->size);",
          "71:       }",
          "72:       break;",
          "73:     }",
          "74:     case MG_EV_CLOSE: {",
          "75:       unproxy(c);",
          "76:       break;",
          "77:     }",
          "78:   }",
          "79: }",
          "81: static void mqtt_handler(struct mg_connection *c, int ev, void *ev_data) {",
          "82:   if (ev == MG_EV_POLL) return;",
          "83:   printf(\"%p %s EVENT %d %p\\n\", c, __func__, ev, ev_data);",
          "85:   switch (ev) {",
          "86:     case MG_EV_CLOSE:",
          "87:       printf(\"Closing MQTT connection %p\\n\", c);",
          "88:       break;",
          "89:   }",
          "90:   mg_mqtt_broker(c, ev, ev_data);",
          "91: }",
          "93: static void start_mqtt_server(struct mg_mgr *mgr, const char *addr) {",
          "94:   struct mg_connection *c;",
          "95:   static struct mg_mqtt_broker brk;  // static is important - must not perish",
          "96:   if ((c = mg_bind(mgr, addr, mqtt_handler)) == NULL) {",
          "97:     fprintf(stderr, \"Cannot start MQTT server on port [%s]\\n\", addr);",
          "98:     exit(EXIT_FAILURE);",
          "99:   }",
          "100:   mg_mqtt_broker_init(&brk, NULL);",
          "101:   c->user_data = &brk;",
          "102:   mg_set_protocol_mqtt(c);",
          "103:   printf(\"MQTT server started on %s\\n\", addr);",
          "104: }",
          "106: static void start_http_server(struct mg_mgr *mgr, const char *addr) {",
          "107:   struct mg_connection *c;",
          "108:   if ((c = mg_bind(mgr, addr, http_handler)) == NULL) {",
          "109:     fprintf(stderr, \"Cannot start HTTP server on port [%s]\\n\", addr);",
          "110:     exit(EXIT_FAILURE);",
          "111:   }",
          "112:   mg_set_protocol_http_websocket(c);",
          "113:   printf(\"HTTP server started on %s\\n\", addr);",
          "114: }",
          "116: int main(void) {",
          "117:   struct mg_mgr mgr;",
          "118:   mg_mgr_init(&mgr, NULL);",
          "119:   start_http_server(&mgr, s_http_address);",
          "120:   start_mqtt_server(&mgr, s_mqtt_address);",
          "121:   for (;;) {",
          "122:     mg_mgr_poll(&mgr, 1000);",
          "123:   }",
          "124: }",
          "",
          "---------------"
        ],
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "140: MG_INTERNAL void mg_ws_handler(struct mg_connection *nc, int ev,",
          "141:                                void *ev_data MG_UD_ARG(void *user_data));",
          "142: MG_INTERNAL void mg_ws_handshake(struct mg_connection *nc,",
          "144: #endif",
          "",
          "[Removed Lines]",
          "143:                                  const struct mg_str *key);",
          "",
          "[Added Lines]",
          "143:                                  const struct mg_str *key,",
          "144:                                  struct http_message *);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6021:               hm);",
          "6022:       if (!(nc->flags & (MG_F_CLOSE_IMMEDIATELY | MG_F_SEND_AND_CLOSE))) {",
          "6023:         if (nc->send_mbuf.len == 0) {",
          "6025:         }",
          "6026:         mg_call(nc, nc->handler, nc->user_data, MG_EV_WEBSOCKET_HANDSHAKE_DONE,",
          "6027:                 NULL);",
          "",
          "[Removed Lines]",
          "6024:           mg_ws_handshake(nc, vec);",
          "",
          "[Added Lines]",
          "6025:           mg_ws_handshake(nc, vec, hm);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "9164:   unsigned char *p = (unsigned char *) nc->recv_mbuf.buf, *buf = p,",
          "9171:   if (reass && !mg_is_ws_first_fragment(p[0]) &&",
          "",
          "[Removed Lines]",
          "9167:   int ok, reass = buf_len > 0 && mg_is_ws_fragment(p[0]) &&",
          "9168:                   !(nc->flags & MG_F_WEBSOCKET_NO_DEFRAG);",
          "",
          "[Added Lines]",
          "9168:   int ok;",
          "9169:   int reass = buf_len > 0 && mg_is_ws_fragment(p[0]) &&",
          "9170:               !(nc->flags & MG_F_WEBSOCKET_NO_DEFRAG);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "9418: #endif",
          "9420: MG_INTERNAL void mg_ws_handshake(struct mg_connection *nc,",
          "9422:   static const char *magic = \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\";",
          "9423:   const uint8_t *msgs[2] = {(const uint8_t *) key->p, (const uint8_t *) magic};",
          "9424:   const size_t msg_lens[2] = {key->len, 36};",
          "9425:   unsigned char sha[20];",
          "9426:   char b64_sha[30];",
          "9428:   mg_hash_sha1_v(2, msgs, msg_lens, sha);",
          "9429:   mg_base64_encode(sha, sizeof(sha), b64_sha);",
          "9431:             \"HTTP/1.1 101 Switching Protocols\\r\\n\"",
          "9432:             \"Upgrade: websocket\\r\\n\"",
          "9436:   DBG((\"%p %.*s %s\", nc, (int) key->len, key->p, b64_sha));",
          "9437: }",
          "",
          "[Removed Lines]",
          "9421:                                  const struct mg_str *key) {",
          "9430:   mg_printf(nc, \"%s%s%s\",",
          "9433:             \"Connection: Upgrade\\r\\n\"",
          "9434:             \"Sec-WebSocket-Accept: \",",
          "9435:             b64_sha, \"\\r\\n\\r\\n\");",
          "",
          "[Added Lines]",
          "9423:                                  const struct mg_str *key,",
          "9424:                                  struct http_message *hm) {",
          "9430:   struct mg_str *s;",
          "9434:   mg_printf(nc, \"%s\",",
          "9437:             \"Connection: Upgrade\\r\\n\");",
          "9439:   s = mg_get_http_header(hm, \"Sec-WebSocket-Protocol\");",
          "9440:   if (s != NULL) {",
          "9441:     mg_printf(nc, \"Sec-WebSocket-Protocol: %.*s\\r\\n\", (int) s->len, s->p);",
          "9442:   }",
          "9443:   mg_printf(nc, \"Sec-WebSocket-Accept: %s%s\", b64_sha, \"\\r\\n\\r\\n\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "9996:       break;",
          "9997:   }",
          "10000: }",
          "10002: static void mqtt_handler(struct mg_connection *nc, int ev,",
          "",
          "[Removed Lines]",
          "9999:   return end - io->buf;",
          "",
          "[Added Lines]",
          "10008:   mm->len = end - io->buf;",
          "10009:   return mm->len;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "10008:   nc->handler(nc, ev, ev_data MG_UD_ARG(user_data));",
          "10010:   switch (ev) {",
          "10011:     case MG_EV_RECV: {",
          "10013:       while (1) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10021:     case MG_EV_ACCEPT:",
          "10022:       if (nc->proto_data == NULL) mg_set_protocol_mqtt(nc);",
          "10023:       break;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "10027:         LOG(LL_DEBUG, (\"Send PINGREQ\"));",
          "10028:         mg_mqtt_ping(nc);",
          "10029:       }",
          "10030:     }",
          "10031:   }",
          "10032: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10043:       break;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "10439:   switch (ev) {",
          "10440:     case MG_EV_ACCEPT:",
          "10443:       break;",
          "10444:     case MG_EV_MQTT_CONNECT:",
          "",
          "[Removed Lines]",
          "10441:       mg_set_protocol_mqtt(nc);",
          "",
          "[Added Lines]",
          "10455:       if (nc->proto_data == NULL) mg_set_protocol_mqtt(nc);",
          "",
          "---------------"
        ],
        "mongoose.h||mongoose.h": [
          "File: mongoose.h -> mongoose.h"
        ]
      }
    },
    {
      "candidate_hash": "27094896b19b46d1eed0bc5346d4b0dc3c2e3cd6",
      "candidate_info": {
        "commit_hash": "27094896b19b46d1eed0bc5346d4b0dc3c2e3cd6",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/27094896b19b46d1eed0bc5346d4b0dc3c2e3cd6",
        "files": [
          "mongoose.c",
          "mongoose.h"
        ],
        "message": "mOS filesystem refactoring: introduce VFS\n\nWith different filesystem implementations and storage drivers, like grown-ups have :)\nThis is not currently used to add any new functionality, we still have\nonly one FS and driver on ESP8266 and ESP32; CC3200 has two: SPIFFS and SLFS.\nThis will be used soon to implement filesystems on additional SPI flash chips and SD cards.\n\nPUBLISHED_FROM=293960fef82952c505e9b1925aac7724c7308362",
        "before_after_code_files": [
          "mongoose.c||mongoose.c",
          "mongoose.h||mongoose.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "12596: extern int set_errno(int e);",
          "12597: static const char *drop_dir(const char *fname, bool *is_slfs);",
          "",
          "[Added Lines]",
          "12596: int set_errno(int e);",
          "12597: const char *drop_dir(const char *fname, bool *is_slfs);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12657:   _u32 am = 0;",
          "12658:   fi->size = (size_t) -1;",
          "12659:   int rw = (flags & 3);",
          "12660:   if (rw == O_RDONLY) {",
          "12661:     SlFsFileInfo_t sl_fi;",
          "12662:     _i32 r = sl_FsGetInfo((const _u8 *) pathname, 0, &sl_fi);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12660:   size_t new_size = FS_SLFS_MAX_FILE_SIZE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "12671:       return set_errno(ENOTSUP);",
          "12672:     }",
          "12673:     if (flags & O_CREAT) {",
          "12675:       for (i = 0; i < MAX_OPEN_SLFS_FILES; i++) {",
          "12676:         if (s_sl_file_size_hints[i].name != NULL &&",
          "12677:             strcmp(s_sl_file_size_hints[i].name, pathname) == 0) {",
          "12679:           MG_FREE(s_sl_file_size_hints[i].name);",
          "12680:           s_sl_file_size_hints[i].name = NULL;",
          "12681:           break;",
          "12682:         }",
          "12683:       }",
          "12686:     } else {",
          "12687:       am = FS_MODE_OPEN_WRITE;",
          "12688:     }",
          "12689:   }",
          "12690:   _i32 r = sl_FsOpen((_u8 *) pathname, am, NULL, &fi->fh);",
          "12693:   if (r == SL_FS_OK) {",
          "12694:     fi->pos = 0;",
          "12695:     r = fd;",
          "",
          "[Removed Lines]",
          "12674:       size_t i, size = FS_SLFS_MAX_FILE_SIZE;",
          "12678:           size = s_sl_file_size_hints[i].size;",
          "12684:       DBG((\"creating %s with max size %d\", pathname, (int) size));",
          "12685:       am = FS_MODE_OPEN_CREATE(size, 0);",
          "12691:   DBG((\"sl_FsOpen(%s, 0x%x) = %d, %d\", pathname, (int) am, (int) r,",
          "12692:        (int) fi->fh));",
          "",
          "[Added Lines]",
          "12675:       size_t i;",
          "12679:           new_size = s_sl_file_size_hints[i].size;",
          "12685:       am = FS_MODE_OPEN_CREATE(new_size, 0);",
          "12691:   LOG(LL_DEBUG, (\"sl_FsOpen(%s, 0x%x) sz %u = %d, %d\", pathname, (int) am,",
          "12692:                  (unsigned int) new_size, (int) r, (int) fi->fh));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "12704:   struct sl_fd_info *fi = &s_sl_fds[fd];",
          "12705:   if (fi->fh <= 0) return set_errno(EBADF);",
          "12706:   _i32 r = sl_FsClose(fi->fh, NULL, NULL, 0);",
          "12708:   s_sl_fds[fd].fh = -1;",
          "12709:   return set_errno(sl_fs_to_errno(r));",
          "12710: }",
          "",
          "[Removed Lines]",
          "12707:   DBG((\"sl_FsClose(%d) = %d\", (int) fi->fh, (int) r));",
          "",
          "[Added Lines]",
          "12707:   LOG(LL_DEBUG, (\"sl_FsClose(%d) = %d\", (int) fi->fh, (int) r));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "12817: #if MG_NET_IF == MG_NET_IF_SIMPLELINK && \\",
          "12818:     (defined(MG_FS_SLFS) || defined(MG_FS_SPIFFS))",
          "12820: #include <errno.h>",
          "12821: #include <stdbool.h>",
          "12822: #include <stdio.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12820: int set_errno(int e) {",
          "12821:   errno = e;",
          "12822:   return (e == 0 ? 0 : -1);",
          "12823: }",
          "12825: const char *drop_dir(const char *fname, bool *is_slfs) {",
          "12826:   if (is_slfs != NULL) {",
          "12828:     if (*is_slfs) fname += 3;",
          "12829:   }",
          "12831:   if (fname[0] == '.' && fname[1] == '/') {",
          "12832:     fname += 2;",
          "12833:   }",
          "12838:   if (fname[0] == '/' && strchr(fname + 1, '/') == NULL) {",
          "12839:     fname++;",
          "12840:   }",
          "12841:   return fname;",
          "12842: }",
          "12844: #if !defined(MG_FS_NO_VFS)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "12881: enum fd_type {",
          "12882:   FD_INVALID,",
          "12883:   FD_SYS,",
          "",
          "[Removed Lines]",
          "12857: int set_errno(int e) {",
          "12858:   errno = e;",
          "12859:   return (e == 0 ? 0 : -1);",
          "12860: }",
          "12862: static const char *drop_dir(const char *fname, bool *is_slfs) {",
          "12863:   if (is_slfs != NULL) {",
          "12865:     if (*is_slfs) fname += 3;",
          "12866:   }",
          "12868:   if (fname[0] == '.' && fname[1] == '/') {",
          "12869:     fname += 2;",
          "12870:   }",
          "12875:   if (fname[0] == '/' && strchr(fname + 1, '/') == NULL) {",
          "12876:     fname++;",
          "12877:   }",
          "12878:   return fname;",
          "12879: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "13836: struct mg_ssl_if_ctx {",
          "13837:   char *ssl_cert;",
          "13838:   char *ssl_key;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13839: #ifndef MG_SSL_IF_SIMPLELINK_SLFS_PREFIX",
          "13840: #define MG_SSL_IF_SIMPLELINK_SLFS_PREFIX \"SL:\"",
          "13841: #endif",
          "13843: #define MG_SSL_IF_SIMPLELINK_SLFS_PREFIX_LEN \\",
          "13844:   (sizeof(MG_SSL_IF_SIMPLELINK_SLFS_PREFIX) - 1)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "13897:   pf = fopen(pem_file, \"r\");",
          "13898:   if (pf == NULL) goto clean;",
          "13899:   remove(der_file);",
          "13901:   df = fopen(der_file, \"w\");",
          "13902:   if (df == NULL) goto clean;",
          "13903:   while (1) {",
          "",
          "[Removed Lines]",
          "13900:   fs_slfs_set_new_file_size(der_file + 3, 2048);",
          "",
          "[Added Lines]",
          "13910:   fs_slfs_set_new_file_size(der_file + MG_SSL_IF_SIMPLELINK_SLFS_PREFIX_LEN,",
          "13911:                             2048);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "13939:   }",
          "13940:   char *der_file = NULL;",
          "13944:   if (der_file == NULL) return NULL;",
          "13945:   bool result = false;",
          "13946:   cs_stat_t st;",
          "",
          "[Removed Lines]",
          "13942:   int l = mg_asprintf(&der_file, 0, \"SL:%.*s.der\", (int) (pem_ext - pem_file),",
          "13943:                       pem_file);",
          "",
          "[Added Lines]",
          "13953:   int l = mg_asprintf(&der_file, 0, MG_SSL_IF_SIMPLELINK_SLFS_PREFIX \"%.*s.der\",",
          "13954:                       (int) (pem_ext - pem_file), pem_file);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "13953:   }",
          "13954:   if (result) {",
          "13957:   } else {",
          "13958:     MG_FREE(der_file);",
          "13959:     der_file = NULL;",
          "",
          "[Removed Lines]",
          "13956:     memmove(der_file, der_file + 3, l - 2 /* including \\0 */);",
          "",
          "[Added Lines]",
          "13967:     memmove(der_file, der_file + MG_SSL_IF_SIMPLELINK_SLFS_PREFIX_LEN,",
          "13968:             l - 2 /* including \\0 */);",
          "",
          "---------------"
        ],
        "mongoose.h||mongoose.h": [
          "File: mongoose.h -> mongoose.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "538: #define SIZE_T_FMT \"u\"",
          "539: typedef struct stat cs_stat_t;",
          "540: #define DIRSEP '/'",
          "541: #define CS_DEFINE_DIRENT",
          "543: #define to64(x) strtoll(x, NULL, 10)",
          "544: #define INT64_FMT PRId64",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "541: #if !defined(MGOS_VFS_DEFINE_DIRENT)",
          "543: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "700: };",
          "702: int _stat(const char *pathname, struct stat *st);",
          "705: #define __S_IFMT 0170000",
          "",
          "[Removed Lines]",
          "703: #define stat(a, b) _stat(a, b)",
          "",
          "[Added Lines]",
          "705: int stat(const char *pathname, struct stat *st);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a2192ae4839d9a6981cc47de1e3621bec2261865",
      "candidate_info": {
        "commit_hash": "a2192ae4839d9a6981cc47de1e3621bec2261865",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/a2192ae4839d9a6981cc47de1e3621bec2261865",
        "files": [
          "mongoose.c"
        ],
        "message": "Add mbuf_append result check\n\nPUBLISHED_FROM=967a7ff3684e548ddbfe92365f7718a99e14d098",
        "before_after_code_files": [
          "mongoose.c||mongoose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "11620:   prev_io_len = io->len;",
          "11622:   ptr = io->buf + prev_io_len;",
          "",
          "[Removed Lines]",
          "11621:   mbuf_append(io, NULL, packet_size);",
          "",
          "[Added Lines]",
          "11621:   if (mbuf_append(io, NULL, packet_size) == 0) return MG_COAP_ERROR;",
          "",
          "---------------"
        ]
      }
    }
  ]
}