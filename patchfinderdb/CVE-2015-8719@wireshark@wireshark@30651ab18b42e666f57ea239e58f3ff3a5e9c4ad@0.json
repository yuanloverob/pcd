{
  "cve_id": "CVE-2015-8719",
  "cve_desc": "The dissect_dns_answer function in epan/dissectors/packet-dns.c in the DNS dissector in Wireshark 1.12.x before 1.12.9 mishandles the EDNS0 Client Subnet option, which allows remote attackers to cause a denial of service (application crash) via a crafted packet.",
  "repo": "wireshark/wireshark",
  "patch_hash": "30651ab18b42e666f57ea239e58f3ff3a5e9c4ad",
  "patch_info": {
    "commit_hash": "30651ab18b42e666f57ea239e58f3ff3a5e9c4ad",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/30651ab18b42e666f57ea239e58f3ff3a5e9c4ad",
    "files": [
      "epan/dissectors/packet-dns.c"
    ],
    "message": "DNS: Ignore Client Subnet option's data length when > 16\n\nWhen DNS Client Subnet length is > 16, the limit coming from avoid stack smashing with tvb_memcpy\n\nIssue reported by Boaz\n\nBug:10988\nChange-Id: I6103ba47fac9817410c7fc399c18e96c66ab8438\nReviewed-on: https://code.wireshark.org/review/7308\nReviewed-by: Alexis La Goutte <alexis.lagoutte@gmail.com>\nPetri-Dish: Alexis La Goutte <alexis.lagoutte@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Peter Wu <peter@lekensteyn.nl>\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-dns.c||epan/dissectors/packet-dns.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-dns.c||epan/dissectors/packet-dns.c": [
      "File: epan/dissectors/packet-dns.c -> epan/dissectors/packet-dns.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2760:           case O_CLIENT_SUBNET:{",
      "2761:             guint16 family;",
      "2762:             union {",
      "2763:               guint32 addr;",
      "2764:               guint8 bytes[16];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2762:             guint16 addr_len = optlen - 4;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2772:             proto_tree_add_item(rropt_tree, hf_dns_opt_client_scope, tvb, cur_offset, 1, ENC_BIG_ENDIAN);",
      "2773:             cur_offset += 1;",
      "2776:               expert_add_info(pinfo, rroptlen, &ei_dns_opt_bad_length);",
      "2780:             }",
      "2782:             switch(family) {",
      "2783:               case AFNUM_INET:",
      "2784:               proto_tree_add_ipv4(rropt_tree, hf_dns_opt_client_addr4, tvb,",
      "2786:               break;",
      "2787:               case AFNUM_INET6:",
      "2788:               proto_tree_add_ipv6(rropt_tree, hf_dns_opt_client_addr6, tvb,",
      "2790:               break;",
      "2791:               default:",
      "2792:               proto_tree_add_item(rropt_tree, hf_dns_opt_client_addr, tvb, cur_offset, (optlen - 4),",
      "",
      "[Removed Lines]",
      "2775:             if (optlen-4 > 16) {",
      "2779:               optlen = 20;",
      "2781:             tvb_memcpy(tvb, ip_addr.bytes, cur_offset, (optlen - 4));",
      "2785:                                   cur_offset, (optlen - 4), ip_addr.addr);",
      "2789:                                   cur_offset, (optlen - 4), ip_addr.bytes);",
      "",
      "[Added Lines]",
      "2776:             if (addr_len > 16) {",
      "2780:               addr_len = 16;",
      "2782:             tvb_memcpy(tvb, ip_addr.bytes, cur_offset, addr_len);",
      "2786:                                   cur_offset, addr_len, ip_addr.addr);",
      "2790:                                   cur_offset, addr_len, ip_addr.bytes);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "960ac0b0b15261a5bcb7435b613febd123d4e0be",
      "candidate_info": {
        "commit_hash": "960ac0b0b15261a5bcb7435b613febd123d4e0be",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/960ac0b0b15261a5bcb7435b613febd123d4e0be",
        "files": [
          "epan/dissectors/packet-dns.c"
        ],
        "message": "DNS: Ignore Client Subnet option's data length when > 16\n\nWhen DNS Client Subnet length is > 16, the limit coming from avoid stack smashing with tvb_memcpy\n\nIssue reported by Boaz\n\nBug:10988\nChange-Id: I6103ba47fac9817410c7fc399c18e96c66ab8438\nReviewed-on: https://code.wireshark.org/review/7308\nReviewed-by: Alexis La Goutte <alexis.lagoutte@gmail.com>\nPetri-Dish: Alexis La Goutte <alexis.lagoutte@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Peter Wu <peter@lekensteyn.nl>\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 30651ab18b42e666f57ea239e58f3ff3a5e9c4ad)\nReviewed-on: https://code.wireshark.org/review/11824\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-dns.c||epan/dissectors/packet-dns.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-dns.c||epan/dissectors/packet-dns.c"
          ],
          "candidate": [
            "epan/dissectors/packet-dns.c||epan/dissectors/packet-dns.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-dns.c||epan/dissectors/packet-dns.c": [
          "File: epan/dissectors/packet-dns.c -> epan/dissectors/packet-dns.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2686:           case O_CLIENT_SUBNET:{",
          "2687:             guint16 family;",
          "2688:             union {",
          "2689:               guint32 addr;",
          "2690:               guint8 bytes[16];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2688:             guint16 addr_len = optlen - 4;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2698:             proto_tree_add_item(rropt_tree, hf_dns_opt_client_scope, tvb, cur_offset, 1, ENC_BIG_ENDIAN);",
          "2699:             cur_offset += 1;",
          "2702:               expert_add_info(pinfo, rroptlen, &ei_dns_opt_bad_length);",
          "2706:             }",
          "2708:             switch(family) {",
          "2709:               case AFNUM_INET:",
          "2710:               proto_tree_add_ipv4(rropt_tree, hf_dns_opt_client_addr4, tvb,",
          "2712:               break;",
          "2713:               case AFNUM_INET6:",
          "2714:               proto_tree_add_ipv6(rropt_tree, hf_dns_opt_client_addr6, tvb,",
          "2716:               break;",
          "2717:               default:",
          "2718:               proto_tree_add_item(rropt_tree, hf_dns_opt_client_addr, tvb, cur_offset, (optlen - 4),",
          "",
          "[Removed Lines]",
          "2701:             if (optlen-4 > 16) {",
          "2705:               optlen = 20;",
          "2707:             tvb_memcpy(tvb, ip_addr.bytes, cur_offset, (optlen - 4));",
          "2711:                                   cur_offset, (optlen - 4), ip_addr.addr);",
          "2715:                                   cur_offset, (optlen - 4), ip_addr.bytes);",
          "",
          "[Added Lines]",
          "2702:             if (addr_len > 16) {",
          "2706:               addr_len = 16;",
          "2708:             tvb_memcpy(tvb, ip_addr.bytes, cur_offset, addr_len);",
          "2712:                                   cur_offset, addr_len, ip_addr.addr);",
          "2716:                                   cur_offset, addr_len, ip_addr.bytes);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9039c2b53312ed3103a48bf685d50b0d54470e09",
      "candidate_info": {
        "commit_hash": "9039c2b53312ed3103a48bf685d50b0d54470e09",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/9039c2b53312ed3103a48bf685d50b0d54470e09",
        "files": [
          "epan/dissectors/packet-dns.c"
        ],
        "message": "DNS: Ignore Client Subnet option's data length when > 16\n\nWhen DNS Client Subnet length is > 16, the limit coming from avoid stack smashing with tvb_memcpy\n\nIssue reported by Boaz\n\nBug:10988\nChange-Id: I6103ba47fac9817410c7fc399c18e96c66ab8438\nReviewed-on: https://code.wireshark.org/review/7308\nReviewed-by: Alexis La Goutte <alexis.lagoutte@gmail.com>\nPetri-Dish: Alexis La Goutte <alexis.lagoutte@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Peter Wu <peter@lekensteyn.nl>\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 30651ab18b42e666f57ea239e58f3ff3a5e9c4ad)\nReviewed-on: https://code.wireshark.org/review/11824\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\n(cherry picked from commit 960ac0b0b15261a5bcb7435b613febd123d4e0be)\nReviewed-on: https://code.wireshark.org/review/13757\nReviewed-by: Balint Reczey <balint@balintreczey.hu>",
        "before_after_code_files": [
          "epan/dissectors/packet-dns.c||epan/dissectors/packet-dns.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-dns.c||epan/dissectors/packet-dns.c"
          ],
          "candidate": [
            "epan/dissectors/packet-dns.c||epan/dissectors/packet-dns.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-dns.c||epan/dissectors/packet-dns.c": [
          "File: epan/dissectors/packet-dns.c -> epan/dissectors/packet-dns.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2653:           case O_CLIENT_SUBNET:{",
          "2654:             guint16 family;",
          "2655:             union {",
          "2656:               guint32 addr;",
          "2657:               guint8 bytes[16];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2655:             guint16 addr_len = optlen - 4;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2665:             proto_tree_add_item(rropt_tree, hf_dns_opt_client_scope, tvb, cur_offset, 1, ENC_BIG_ENDIAN);",
          "2666:             cur_offset += 1;",
          "2669:               expert_add_info(pinfo, rroptlen, &ei_dns_opt_bad_length);",
          "2673:             }",
          "2675:             switch(family) {",
          "2676:               case AFNUM_INET:",
          "2677:               proto_tree_add_ipv4(rropt_tree, hf_dns_opt_client_addr4, tvb,",
          "2679:               break;",
          "2680:               case AFNUM_INET6:",
          "2681:               proto_tree_add_ipv6(rropt_tree, hf_dns_opt_client_addr6, tvb,",
          "2683:               break;",
          "2684:               default:",
          "2685:               proto_tree_add_item(rropt_tree, hf_dns_opt_client_addr, tvb, cur_offset, (optlen - 4),",
          "",
          "[Removed Lines]",
          "2668:             if (optlen-4 > 16) {",
          "2672:               optlen = 20;",
          "2674:             tvb_memcpy(tvb, ip_addr.bytes, cur_offset, (optlen - 4));",
          "2678:                                   cur_offset, (optlen - 4), ip_addr.addr);",
          "2682:                                   cur_offset, (optlen - 4), ip_addr.bytes);",
          "",
          "[Added Lines]",
          "2669:             if (addr_len > 16) {",
          "2673:               addr_len = 16;",
          "2675:             tvb_memcpy(tvb, ip_addr.bytes, cur_offset, addr_len);",
          "2679:                                   cur_offset, addr_len, ip_addr.addr);",
          "2683:                                   cur_offset, addr_len, ip_addr.bytes);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c3f57b2258cd39ceb57a13e1fbf6a2f77e1c4249",
      "candidate_info": {
        "commit_hash": "c3f57b2258cd39ceb57a13e1fbf6a2f77e1c4249",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/c3f57b2258cd39ceb57a13e1fbf6a2f77e1c4249",
        "files": [
          "epan/dissectors/packet-6lowpan.c",
          "epan/dissectors/packet-bgp.c",
          "epan/dissectors/packet-dcerpc.c",
          "epan/dissectors/packet-diameter.c",
          "epan/dissectors/packet-dns.c",
          "epan/dissectors/packet-eigrp.c",
          "epan/dissectors/packet-ftp.c",
          "epan/dissectors/packet-icmpv6.c",
          "epan/dissectors/packet-ipv6.c",
          "epan/dissectors/packet-isis-clv.c",
          "epan/dissectors/packet-isis-lsp.c",
          "epan/dissectors/packet-nfs.c",
          "epan/dissectors/packet-nsip.c",
          "epan/dissectors/packet-ospf.c",
          "epan/dissectors/packet-packetbb.c",
          "epan/dissectors/packet-pim.c",
          "epan/dissectors/packet-ppcap.c",
          "epan/dissectors/packet-ppp.c",
          "epan/dissectors/packet-rtpproxy.c",
          "epan/dissectors/packet-sasp.c",
          "epan/dissectors/packet-socks.c",
          "epan/dissectors/packet-stun.c",
          "epan/dissectors/packet-wccp.c",
          "epan/dissectors/packet-wsp.c",
          "epan/dissectors/packet-zebra.c",
          "epan/proto.c",
          "epan/proto.h",
          "plugins/wimaxasncp/packet-wimaxasncp.c"
        ],
        "message": "Change proto_tree_add_ipv6() to take a struct e_in6_addr pointer\n\ntvb_get_ipv6() takes a struct e_in6_addr *, use that here too.\n\nChange-Id: Id8b368daa05c151a61d4bc01dc88c00da13e9c88\nReviewed-on: https://code.wireshark.org/review/10953\nReviewed-by: Michael Mann <mmann78@netscape.net>\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Balint Reczey <balint@balintreczey.hu>\nReviewed-by: Alexis La Goutte <alexis.lagoutte@gmail.com>\n(cherry picked from commit a643d14187c5a201d21bdb0786acc5e27b73a3a1)\nReviewed-on: https://code.wireshark.org/review/11008",
        "before_after_code_files": [
          "epan/dissectors/packet-6lowpan.c||epan/dissectors/packet-6lowpan.c",
          "epan/dissectors/packet-bgp.c||epan/dissectors/packet-bgp.c",
          "epan/dissectors/packet-dcerpc.c||epan/dissectors/packet-dcerpc.c",
          "epan/dissectors/packet-diameter.c||epan/dissectors/packet-diameter.c",
          "epan/dissectors/packet-dns.c||epan/dissectors/packet-dns.c",
          "epan/dissectors/packet-eigrp.c||epan/dissectors/packet-eigrp.c",
          "epan/dissectors/packet-ftp.c||epan/dissectors/packet-ftp.c",
          "epan/dissectors/packet-icmpv6.c||epan/dissectors/packet-icmpv6.c",
          "epan/dissectors/packet-ipv6.c||epan/dissectors/packet-ipv6.c",
          "epan/dissectors/packet-isis-clv.c||epan/dissectors/packet-isis-clv.c",
          "epan/dissectors/packet-isis-lsp.c||epan/dissectors/packet-isis-lsp.c",
          "epan/dissectors/packet-nfs.c||epan/dissectors/packet-nfs.c",
          "epan/dissectors/packet-nsip.c||epan/dissectors/packet-nsip.c",
          "epan/dissectors/packet-ospf.c||epan/dissectors/packet-ospf.c",
          "epan/dissectors/packet-packetbb.c||epan/dissectors/packet-packetbb.c",
          "epan/dissectors/packet-pim.c||epan/dissectors/packet-pim.c",
          "epan/dissectors/packet-ppcap.c||epan/dissectors/packet-ppcap.c",
          "epan/dissectors/packet-ppp.c||epan/dissectors/packet-ppp.c",
          "epan/dissectors/packet-rtpproxy.c||epan/dissectors/packet-rtpproxy.c",
          "epan/dissectors/packet-sasp.c||epan/dissectors/packet-sasp.c",
          "epan/dissectors/packet-socks.c||epan/dissectors/packet-socks.c",
          "epan/dissectors/packet-stun.c||epan/dissectors/packet-stun.c",
          "epan/dissectors/packet-wccp.c||epan/dissectors/packet-wccp.c",
          "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c",
          "epan/dissectors/packet-zebra.c||epan/dissectors/packet-zebra.c",
          "epan/proto.c||epan/proto.c",
          "epan/proto.h||epan/proto.h",
          "plugins/wimaxasncp/packet-wimaxasncp.c||plugins/wimaxasncp/packet-wimaxasncp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-dns.c||epan/dissectors/packet-dns.c"
          ],
          "candidate": [
            "epan/dissectors/packet-dns.c||epan/dissectors/packet-dns.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-6lowpan.c||epan/dissectors/packet-6lowpan.c": [
          "File: epan/dissectors/packet-6lowpan.c -> epan/dissectors/packet-6lowpan.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1215:     if (tree) {",
          "1216:         proto_tree_add_ipv6(tree, hf_6lowpan_source, tvb, offset>>3,",
          "1218:     }",
          "",
          "[Removed Lines]",
          "1217:                 BITS_TO_BYTE_LEN(offset, (bit_offset-offset)), (guint8 *)&ipv6.ip6_src);",
          "",
          "[Added Lines]",
          "1217:                 BITS_TO_BYTE_LEN(offset, (bit_offset-offset)), &ipv6.ip6_src);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1247:     if (tree) {",
          "1248:         proto_tree_add_ipv6(tree, hf_6lowpan_dest, tvb, offset>>3,",
          "1250:     }",
          "",
          "[Removed Lines]",
          "1249:                 BITS_TO_BYTE_LEN(offset, (bit_offset-offset)), (guint8 *)&ipv6.ip6_dst);",
          "",
          "[Added Lines]",
          "1249:                 BITS_TO_BYTE_LEN(offset, (bit_offset-offset)), &ipv6.ip6_dst);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1664:     if (tree) {",
          "1666:     }",
          "1669:     if (tree && sctx->plen) {",
          "1670:         proto_item *ti;",
          "1672:         PROTO_ITEM_SET_GENERATED(ti);",
          "1673:         if ( sctx->frame ) {",
          "1674:             ti = proto_tree_add_uint(iphc_tree, hf_6lowpan_iphc_sctx_origin, tvb, 0, 0, sctx->frame);",
          "",
          "[Removed Lines]",
          "1665:         proto_tree_add_ipv6(tree, hf_6lowpan_source, tvb, offset, length, (guint8 *)&ipv6.ip6_src);",
          "1671:         ti = proto_tree_add_ipv6(iphc_tree, hf_6lowpan_iphc_sctx_prefix, tvb, 0, 0, (guint8 *)&sctx->prefix);",
          "",
          "[Added Lines]",
          "1665:         proto_tree_add_ipv6(tree, hf_6lowpan_source, tvb, offset, length, &ipv6.ip6_src);",
          "1671:         ti = proto_tree_add_ipv6(iphc_tree, hf_6lowpan_iphc_sctx_prefix, tvb, 0, 0, &sctx->prefix);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1791:     if (tree) {",
          "1793:     }",
          "1796:     if (tree && dctx->plen) {",
          "1797:         proto_item *ti;",
          "1799:         PROTO_ITEM_SET_GENERATED(ti);",
          "1800:         if ( dctx->frame ) {",
          "1801:             ti = proto_tree_add_uint(iphc_tree, hf_6lowpan_iphc_dctx_origin, tvb, 0, 0, dctx->frame);",
          "",
          "[Removed Lines]",
          "1792:         proto_tree_add_ipv6(tree, hf_6lowpan_dest, tvb, offset, length, (guint8 *)&ipv6.ip6_dst);",
          "1798:         ti = proto_tree_add_ipv6(iphc_tree, hf_6lowpan_iphc_dctx_prefix, tvb, 0, 0, (guint8 *)&dctx->prefix);",
          "",
          "[Added Lines]",
          "1792:         proto_tree_add_ipv6(tree, hf_6lowpan_dest, tvb, offset, length, &ipv6.ip6_dst);",
          "1798:         ti = proto_tree_add_ipv6(iphc_tree, hf_6lowpan_iphc_dctx_prefix, tvb, 0, 0, &dctx->prefix);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-bgp.c||epan/dissectors/packet-bgp.c": [
          "File: epan/dissectors/packet-bgp.c -> epan/dissectors/packet-bgp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1857:             address_to_str(wmem_packet_scope(), &addr_str), plen);",
          "1858:     proto_tree_add_uint_format(prefix_tree, hf_bgp_prefix_length, tvb, offset, 1, plen, \"%s prefix length: %u\",",
          "1859:         tag, plen);",
          "1862:     return(1 + length);",
          "1863: }",
          "",
          "[Removed Lines]",
          "1860:     proto_tree_add_ipv6(prefix_tree, hf_addr, tvb, offset + 1, length,",
          "1861:             addr.bytes);",
          "",
          "[Added Lines]",
          "1860:     proto_tree_add_ipv6(prefix_tree, hf_addr, tvb, offset + 1, length, &addr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1895:             address_to_str(wmem_packet_scope(), &addr_str), plen);",
          "1896:     proto_tree_add_item(prefix_tree, hf_bgp_flowspec_nlri_ipv6_pref_len, tvb, offset + plength_place, 1, ENC_BIG_ENDIAN);",
          "1897:     proto_tree_add_item(prefix_tree, hf_bgp_flowspec_nlri_ipv6_pref_offset, tvb, offset + poffset_place, 1, ENC_BIG_ENDIAN);",
          "1900:     if (parent_item != NULL)",
          "1901:       proto_item_append_text(parent_item, \" (%s/%u)\",",
          "1902:                              address_to_str(wmem_packet_scope(), &addr_str), plen);",
          "",
          "[Removed Lines]",
          "1898:     proto_tree_add_ipv6(prefix_tree, hf_addr, tvb, offset + 2, length,",
          "1899:             addr.bytes);",
          "",
          "[Added Lines]",
          "1897:     proto_tree_add_ipv6(prefix_tree, hf_addr, tvb, offset + 2, length, &addr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4306:                 proto_tree_add_item(prefix_tree, hf_bgp_mp_nlri_tnl_id, tvb,",
          "4307:                                     start_offset + 1, 2, ENC_BIG_ENDIAN);",
          "4311:                 break;",
          "",
          "[Removed Lines]",
          "4308:                 proto_tree_add_ipv6(prefix_tree, hf_addr6, tvb, offset, length, ip6addr.bytes);",
          "",
          "[Added Lines]",
          "4306:                 proto_tree_add_ipv6(prefix_tree, hf_addr6, tvb, offset, length, &ip6addr);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-dcerpc.c||epan/dissectors/packet-dcerpc.c": [
          "File: epan/dissectors/packet-dcerpc.c -> epan/dissectors/packet-dcerpc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4583:             case RTS_IPV6: {",
          "4584:                struct e_in6_addr addr6;",
          "4585:                tvb_get_ipv6(tvb, offset, &addr6);",
          "4587:                offset += 16;",
          "4588:             } break;",
          "4589:             }",
          "",
          "[Removed Lines]",
          "4586:                proto_tree_add_ipv6_format_value(cn_rts_command_tree, hf_dcerpc_cmd_client_ipv6, tvb, offset, 16, (const guint8 *)&addr6, \"%s\", get_hostname6(&addr6));",
          "",
          "[Added Lines]",
          "4586:                proto_tree_add_ipv6_format_value(cn_rts_command_tree, hf_dcerpc_cmd_client_ipv6, tvb, offset, 16, &addr6, \"%s\", get_hostname6(&addr6));",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-diameter.c||epan/dissectors/packet-diameter.c": [
          "File: epan/dissectors/packet-diameter.c -> epan/dissectors/packet-diameter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "510:   memset(&value.bytes, 0, sizeof(value));",
          "511:   tvb_memcpy(tvb, (guint8 *)&value.bytes, 2, prefix_len_bytes);",
          "512:   value.bytes[prefix_len_bytes] = value.bytes[prefix_len_bytes] & (0xff<<(prefix_len % 8));",
          "514:   SET_ADDRESS(&addr, AT_IPv6, 16, value.bytes);",
          "515:   diam_sub_dis->avp_str = wmem_strdup_printf(wmem_packet_scope(), \"%s/%u\", address_to_str(wmem_packet_scope(), &addr), prefix_len);",
          "516:  }",
          "",
          "[Removed Lines]",
          "513:   proto_tree_add_ipv6(tree, hf_framed_ipv6_prefix_ipv6, tvb, 2, prefix_len_bytes, value.bytes);",
          "",
          "[Added Lines]",
          "513:   proto_tree_add_ipv6(tree, hf_framed_ipv6_prefix_ipv6, tvb, 2, prefix_len_bytes, &value);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-dns.c||epan/dissectors/packet-dns.c": [
          "File: epan/dissectors/packet-dns.c -> epan/dissectors/packet-dns.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2633:       proto_tree_add_item(rr_tree, hf_dns_a6_prefix_len,tvb, a6_offset, 1, ENC_BIG_ENDIAN);",
          "2634:       a6_offset++;",
          "2635:       if (suf_len) {",
          "2637:         a6_offset += suf_octet_count;",
          "2638:       }",
          "2639:       if (pre_len > 0) {",
          "",
          "[Removed Lines]",
          "2636:         proto_tree_add_ipv6(rr_tree, hf_dns_a6_address_suffix,tvb, a6_offset, suf_octet_count, suffix.bytes);",
          "",
          "[Added Lines]",
          "2636:         proto_tree_add_ipv6(rr_tree, hf_dns_a6_address_suffix,tvb, a6_offset, suf_octet_count, &suffix);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2747:               break;",
          "2748:               case AFNUM_INET6:",
          "2749:               proto_tree_add_ipv6(rropt_tree, hf_dns_opt_client_addr6, tvb,",
          "2751:               break;",
          "2752:               default:",
          "2753:               proto_tree_add_item(rropt_tree, hf_dns_opt_client_addr, tvb, cur_offset, (optlen - 4),",
          "",
          "[Removed Lines]",
          "2750:                                   cur_offset, addr_len, ip_addr.bytes);",
          "",
          "[Added Lines]",
          "2750:                                   cur_offset, addr_len, (struct e_in6_addr *)&ip_addr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2812:           addr_copy = (guint8 *)wmem_alloc0(wmem_file_scope(), 16);",
          "2813:           tvb_memcpy(tvb, (guint8 *)addr_copy, cur_offset, afdpart_len);",
          "2816:            proto_tree_add_item(rr_tree, hf_dns_apl_afdpart_data, tvb, cur_offset, afdpart_len, ENC_NA);",
          "2817:         }",
          "",
          "[Removed Lines]",
          "2814:           proto_tree_add_ipv6(rr_tree, hf_dns_apl_afdpart_ipv6, tvb, cur_offset, afdpart_len, addr_copy);",
          "",
          "[Added Lines]",
          "2814:           proto_tree_add_ipv6(rr_tree, hf_dns_apl_afdpart_ipv6, tvb, cur_offset, afdpart_len, (struct e_in6_addr *)addr_copy);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-eigrp.c||epan/dissectors/packet-eigrp.c": [
          "File: epan/dissectors/packet-eigrp.c -> epan/dissectors/packet-eigrp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1179:             }",
          "1181:             SET_ADDRESS(&addr_str, AT_IPv6, 16, addr.bytes);",
          "1185:             proto_item_append_text(ti,\"  %c   %s/%u\", first ? '=':',',",
          "",
          "[Removed Lines]",
          "1182:             ti_dst = proto_tree_add_ipv6(tree, hf_eigrp_ipv6_destination, tvb, offset, addr_len, addr.bytes);",
          "",
          "[Added Lines]",
          "1182:             ti_dst = proto_tree_add_ipv6(tree, hf_eigrp_ipv6_destination, tvb, offset, addr_len, &addr);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ftp.c||epan/dissectors/packet-ftp.c": [
          "File: epan/dissectors/packet-ftp.c -> epan/dissectors/packet-ftp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "783:             }",
          "784:             else if (eprt_af == EPRT_AF_IPv6) {",
          "785:                 proto_tree_add_ipv6(reqresp_tree, hf_ftp_eprt_ipv6,",
          "787:                 SET_ADDRESS(&ftp_ip_address, AT_IPv6, 16, eprt_ipv6);",
          "788:             }",
          "",
          "[Removed Lines]",
          "786:                         tvb, eprt_offset, eprt_ip_len, (const guint8 *)eprt_ipv6);",
          "",
          "[Added Lines]",
          "786:                         tvb, eprt_offset, eprt_ip_len, (const struct e_in6_addr *)eprt_ipv6);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "831:                 else if (ftp_ip_address.type == AT_IPv6) {",
          "832:                     addr_it = proto_tree_add_ipv6(reqresp_tree,",
          "833:                             hf_ftp_epsv_ipv6, tvb, 0, 0,",
          "835:                     PROTO_ITEM_SET_GENERATED(addr_it);",
          "836:                 }",
          "",
          "[Removed Lines]",
          "834:                             (const guint8*)ftp_ip_address.data);",
          "",
          "[Added Lines]",
          "834:                             (const struct e_in6_addr *)ftp_ip_address.data);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-icmpv6.c||epan/dissectors/packet-icmpv6.c": [
          "File: epan/dissectors/packet-icmpv6.c -> epan/dissectors/packet-icmpv6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1947:                     case 16:",
          "1948:                         memset(&prefix, 0, sizeof(prefix));",
          "1949:                         tvb_memcpy(tvb, (guint8 *)&prefix.bytes, opt_offset, 8);",
          "1951:                         SET_ADDRESS(&prefix_addr, AT_IPv6, 16, prefix.bytes);",
          "1952:                         proto_item_append_text(ti, \" %s/%d\", address_to_str(wmem_packet_scope(), &prefix_addr), prefix_len);",
          "1953:                         opt_offset += 8;",
          "",
          "[Removed Lines]",
          "1950:                         proto_tree_add_ipv6(icmp6opt_tree, hf_icmpv6_opt_prefix, tvb, opt_offset, 8, prefix.bytes);",
          "",
          "[Added Lines]",
          "1950:                         proto_tree_add_ipv6(icmp6opt_tree, hf_icmpv6_opt_prefix, tvb, opt_offset, 8, &prefix);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2246:                         break;",
          "2247:                     case 16:",
          "2248:                         tvb_memcpy(tvb, (guint8 *)&context_prefix.bytes, opt_offset, 8);",
          "2250:                         SET_ADDRESS(&context_prefix_addr, AT_IPv6, 16, context_prefix.bytes);",
          "2251:                         proto_item_append_text(ti, \" %s/%d\", address_to_str(wmem_packet_scope(), &context_prefix_addr), context_len);",
          "2252:                         opt_offset += 8;",
          "",
          "[Removed Lines]",
          "2249:                         proto_tree_add_ipv6(icmp6opt_tree, hf_icmpv6_opt_6co_context_prefix, tvb, opt_offset, 8, context_prefix.bytes);",
          "",
          "[Added Lines]",
          "2249:                         proto_tree_add_ipv6(icmp6opt_tree, hf_icmpv6_opt_6co_context_prefix, tvb, opt_offset, 8, &context_prefix);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2422:                     case 14:",
          "2423:                         memset(&prefix, 0, sizeof(prefix));",
          "2424:                         tvb_memcpy(tvb, (guint8 *)&prefix.bytes, opt_offset, 8);",
          "2426:                         SET_ADDRESS(&prefix_addr, AT_IPv6, 16, prefix.bytes);",
          "2427:                         proto_item_append_text(ti, \" %s/%d\", address_to_str(wmem_packet_scope(), &prefix_addr), prefix_len);",
          "2428:                         opt_offset += 8;",
          "",
          "[Removed Lines]",
          "2425:                         proto_tree_add_ipv6(icmp6opt_tree, hf_icmpv6_rpl_opt_route_prefix, tvb, opt_offset, 8, prefix.bytes);",
          "",
          "[Added Lines]",
          "2425:                         proto_tree_add_ipv6(icmp6opt_tree, hf_icmpv6_rpl_opt_route_prefix, tvb, opt_offset, 8, &prefix);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2509:                     case 10:",
          "2510:                         memset(&target_prefix, 0, sizeof(target_prefix));",
          "2511:                         tvb_memcpy(tvb, (guint8 *)&target_prefix.bytes, opt_offset, 8);",
          "2513:                         SET_ADDRESS(&target_prefix_addr, AT_IPv6, 16, target_prefix.bytes);",
          "2514:                         proto_item_append_text(ti, \" %s/%d\", address_to_str(wmem_packet_scope(), &target_prefix_addr), prefix_len);",
          "2515:                         opt_offset += 8;",
          "",
          "[Removed Lines]",
          "2512:                         proto_tree_add_ipv6(icmp6opt_tree, hf_icmpv6_rpl_opt_target_prefix, tvb, opt_offset, 8, target_prefix.bytes);",
          "",
          "[Added Lines]",
          "2512:                         proto_tree_add_ipv6(icmp6opt_tree, hf_icmpv6_rpl_opt_target_prefix, tvb, opt_offset, 8, &target_prefix);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2735:                 while (num_of_addr--) {",
          "2736:                     memset(addr, 0, sizeof(addr));",
          "2737:                     memcpy(addr + compr, tvb_get_ptr(tvb, opt_offset, addr_len), addr_len);",
          "2739:                     opt_offset += addr_len;",
          "2740:                 }",
          "",
          "[Removed Lines]",
          "2738:                     proto_tree_add_ipv6(flag_tree, hf_icmpv6_rpl_opt_route_discovery_addr_vec_addr, tvb, opt_offset, addr_len, addr);",
          "",
          "[Added Lines]",
          "2738:                     proto_tree_add_ipv6(flag_tree, hf_icmpv6_rpl_opt_route_discovery_addr_vec_addr, tvb, opt_offset, addr_len, (struct e_in6_addr *)addr);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ipv6.c||epan/dissectors/packet-ipv6.c": [
          "File: epan/dissectors/packet-ipv6.c -> epan/dissectors/packet-ipv6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "971:                 memcpy((guint8 *)addr, (guint8 *)&dstAddr, sizeof(dstAddr));",
          "972:                 tvb_memcpy(tvb, (guint8 *)addr + cmprI, offset, (16-cmprI));",
          "974:                 PROTO_ITEM_SET_GENERATED(ti);",
          "975:                 offset += (16-cmprI);",
          "976:                 segments--;",
          "",
          "[Removed Lines]",
          "973:                 ti = proto_tree_add_ipv6(rthdr_tree, hf_ipv6_routing_rpl_fulladdr, tvb, offset, (16-cmprI), (guint8 *)addr);",
          "",
          "[Added Lines]",
          "973:                 ti = proto_tree_add_ipv6(rthdr_tree, hf_ipv6_routing_rpl_fulladdr, tvb, offset, (16-cmprI), addr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1030:                 memcpy((guint8 *)addr, (guint8 *)&dstAddr, sizeof(dstAddr));",
          "1031:                 tvb_memcpy(tvb, (guint8 *)addr + cmprE, offset, (16-cmprE));",
          "1033:                 PROTO_ITEM_SET_GENERATED(ti);",
          "",
          "[Removed Lines]",
          "1032:                 ti = proto_tree_add_ipv6(rthdr_tree, hf_ipv6_routing_rpl_fulladdr, tvb, offset, (16-cmprE), (guint8 *)addr);",
          "",
          "[Added Lines]",
          "1032:                 ti = proto_tree_add_ipv6(rthdr_tree, hf_ipv6_routing_rpl_fulladdr, tvb, offset, (16-cmprE), addr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2096:                             offset + IP6H_SRC, 16, ENC_NA);",
          "2097:         ti = proto_tree_add_ipv6(ipv6_tree, hf_ipv6_addr, tvb,",
          "2098:                                  offset + IP6H_SRC,",
          "2100:         PROTO_ITEM_SET_HIDDEN(ti);",
          "2101:         name = address_to_display(wmem_packet_scope(), &pinfo->src);",
          "2102:         if (ipv6_summary_in_tree) {",
          "",
          "[Removed Lines]",
          "2099:                                  16, (guint8 *)&ipv6->ip6_src);",
          "",
          "[Added Lines]",
          "2099:                                  16, &ipv6->ip6_src);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2184:                             offset + IP6H_DST, 16, ENC_NA);",
          "2185:         ti = proto_tree_add_ipv6(ipv6_tree, hf_ipv6_addr, tvb,",
          "2186:                                  offset + IP6H_DST,",
          "2188:         PROTO_ITEM_SET_HIDDEN(ti);",
          "2189:         name = address_to_display(wmem_packet_scope(), &pinfo->dst);",
          "2190:         if (ipv6_summary_in_tree) {",
          "",
          "[Removed Lines]",
          "2187:                                  16, (guint8 *)&ipv6->ip6_dst);",
          "",
          "[Added Lines]",
          "2187:                                  16, &ipv6->ip6_dst);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-isis-clv.c||epan/dissectors/packet-isis-clv.c": [
          "File: epan/dissectors/packet-isis-clv.c -> epan/dissectors/packet-isis-clv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "309: isis_dissect_ipv6_int_clv(proto_tree *tree, packet_info* pinfo, tvbuff_t *tvb, expert_field* expert,",
          "310:     int offset, int length, int tree_id)",
          "311: {",
          "314:     if ( length <= 0 ) {",
          "315:         return;",
          "",
          "[Removed Lines]",
          "312:     guint8 addr [16];",
          "",
          "[Added Lines]",
          "312:     struct e_in6_addr addr;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "321:                 \"Short IPv6 interface address (%d vs 16)\",length );",
          "322:             return;",
          "323:         }",
          "325:         if ( tree ) {",
          "327:         }",
          "328:         offset += 16;",
          "329:         length -= 16;",
          "",
          "[Removed Lines]",
          "324:         tvb_memcpy(tvb, addr, offset, sizeof(addr));",
          "326:             proto_tree_add_ipv6(tree, tree_id, tvb, offset, 16, addr);",
          "",
          "[Added Lines]",
          "324:         tvb_get_ipv6(tvb, offset, &addr);",
          "326:             proto_tree_add_ipv6(tree, tree_id, tvb, offset, 16, &addr);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-isis-lsp.c||epan/dissectors/packet-isis-lsp.c": [
          "File: epan/dissectors/packet-isis-lsp.c -> epan/dissectors/packet-isis-lsp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1459:         SET_ADDRESS(&prefix_addr, AT_IPv6, 16, prefix.bytes);",
          "1460:         proto_tree_add_ipv6_format_value(subtree, hf_isis_lsp_ipv6_reachability_ipv6_prefix, tvb, offset+6, byte_length,",
          "1463:         proto_tree_add_item(subtree, hf_isis_lsp_ipv6_reachability_metric, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1464:         proto_tree_add_item(subtree, hf_isis_lsp_ipv6_reachability_distribution, tvb, offset+4, 1, ENC_NA);",
          "",
          "[Removed Lines]",
          "1461:                              (guint8*)&prefix, \"IPv6 prefix: %s/%u\", address_to_str(wmem_packet_scope(), &prefix_addr), bit_length);",
          "",
          "[Added Lines]",
          "1461:                             &prefix, \"IPv6 prefix: %s/%u\", address_to_str(wmem_packet_scope(), &prefix_addr), bit_length);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-nfs.c||epan/dissectors/packet-nfs.c": [
          "File: epan/dissectors/packet-nfs.c -> epan/dissectors/packet-nfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7389:    ipv6.bytes[0] = b1; ipv6.bytes[1] = b2; ipv6.bytes[2] = b3; ipv6.bytes[3] = b4;",
          "7390:    ipv6.bytes[4] = b5; ipv6.bytes[5] = b6; ipv6.bytes[6] = b7; ipv6.bytes[7] = b8;",
          "7391:    SET_ADDRESS(&addr, AT_IPv6, 16, &ipv6);",
          "7393:     address_to_str(wmem_packet_scope(), &addr), protocol, port);",
          "7394:    PROTO_ITEM_SET_GENERATED(ti);",
          "7395:   } else {",
          "",
          "[Removed Lines]",
          "7392:    ti = proto_tree_add_ipv6_format(tree, hf_nfs4_universal_address_ipv6, tvb, addr_offset, offset-addr_offset, ipv6.bytes, \"IPv6 address %s, protocol=%s, port=%u\",",
          "",
          "[Added Lines]",
          "7392:    ti = proto_tree_add_ipv6_format(tree, hf_nfs4_universal_address_ipv6, tvb, addr_offset, offset-addr_offset, &ipv6, \"IPv6 address %s, protocol=%s, port=%u\",",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-nsip.c||epan/dissectors/packet-nsip.c": [
          "File: epan/dissectors/packet-nsip.c -> epan/dissectors/packet-nsip.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "542:     tvb_get_ipv6(bi->tvb, bi->offset+1, &ip6_addr);",
          "543:     proto_tree_add_ipv6(bi->nsip_tree, hf_nsip_ip_address_ipv4,",
          "544:         bi->tvb, ie_start_offset, ie->total_length,",
          "546:     break;",
          "547:   default:",
          "",
          "[Removed Lines]",
          "545:         (guint8 *)&ip6_addr);",
          "",
          "[Added Lines]",
          "545:         &ip6_addr);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ospf.c||epan/dissectors/packet-ospf.c": [
          "File: epan/dissectors/packet-ospf.c -> epan/dissectors/packet-ospf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3066:     }",
          "3067:     if (address_family == OSPF_AF_6) {",
          "3068:         proto_tree_add_ipv6(tree, hf_ospf_v3_address_prefix_ipv6, tvb, offset, bytes_to_process,",
          "3070:     } else {",
          "3071:         proto_tree_add_item(tree, hf_ospf_v3_address_prefix_ipv4, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3072:     }",
          "",
          "[Removed Lines]",
          "3069:                             prefix.bytes);",
          "",
          "[Added Lines]",
          "3069:                             &prefix);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-packetbb.c||epan/dissectors/packet-packetbb.c": [
          "File: epan/dissectors/packet-packetbb.c -> epan/dissectors/packet-packetbb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "470:         break;",
          "471:       case 1:",
          "472:         addrValue_item = proto_tree_add_ipv6(addr_tree, hf_packetbb_addr_value[addressType],",
          "474:         break;",
          "475:       case 2:",
          "476:         addrValue_item = proto_tree_add_ether(addr_tree, hf_packetbb_addr_value[addressType],",
          "",
          "[Removed Lines]",
          "473:             tvb, mid_index, block_index + block_length - mid_index, addr);",
          "",
          "[Added Lines]",
          "473:             tvb, mid_index, block_index + block_length - mid_index, (struct e_in6_addr *)addr);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-pim.c||epan/dissectors/packet-pim.c": [
          "File: epan/dissectors/packet-pim.c -> epan/dissectors/packet-pim.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "691:             if (label)",
          "692:             {",
          "693:                 ti = proto_tree_add_ipv6_format(tree, hf_ip6, tvb, offset, 2 + len,",
          "695:             }",
          "696:             else",
          "697:             {",
          "699:             }",
          "700:             break;",
          "701:         }",
          "",
          "[Removed Lines]",
          "694:                         (guint8 *)&ipv6, \"%s: %s\", label, tvb_ip6_to_str(tvb, offset + 2));",
          "698:                 ti = proto_tree_add_ipv6(tree, hf_ip6, tvb, offset, 2 + len, (guint8 *)&ipv6);",
          "",
          "[Added Lines]",
          "694:                         &ipv6, \"%s: %s\", label, tvb_ip6_to_str(tvb, offset + 2));",
          "698:                 ti = proto_tree_add_ipv6(tree, hf_ip6, tvb, offset, 2 + len, &ipv6);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "727:             if (label)",
          "728:             {",
          "729:                 ti = proto_tree_add_ipv6_format(tree, hf_ip6, tvb, offset, 4 + len,",
          "731:             }",
          "732:             else",
          "733:             {",
          "735:             }",
          "736:             proto_item_append_text(ti, \"/%u\", mask_len);",
          "737:             break;",
          "",
          "[Removed Lines]",
          "730:                         (guint8 *)&ipv6, \"%s: %s\", label, tvb_ip6_to_str(tvb, offset + 4));",
          "734:                 ti = proto_tree_add_ipv6(tree, hf_ip6, tvb, offset, 4 + len, (guint8 *)&ipv6);",
          "",
          "[Added Lines]",
          "730:                         &ipv6, \"%s: %s\", label, tvb_ip6_to_str(tvb, offset + 4));",
          "734:                 ti = proto_tree_add_ipv6(tree, hf_ip6, tvb, offset, 4 + len, &ipv6);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "765:             if (label)",
          "766:             {",
          "767:                 ti = proto_tree_add_ipv6_format(tree, hf_ip6, tvb, offset, 4 + len,",
          "769:             }",
          "770:             else",
          "771:             {",
          "773:                                                       \"%s\", tvb_ip6_to_str(tvb, offset + 4));",
          "774:             }",
          "775:             proto_item_append_text(ti, \"/%u\", mask_len);",
          "",
          "[Removed Lines]",
          "768:                         (guint8 *)&ipv6, \"%s: %s\", label, tvb_ip6_to_str(tvb, offset + 4));",
          "772:                 ti = proto_tree_add_ipv6_format_value(tree, hf_ip6, tvb, offset, 4 + len, (guint8 *)&ipv6,",
          "",
          "[Added Lines]",
          "768:                         &ipv6, \"%s: %s\", label, tvb_ip6_to_str(tvb, offset + 4));",
          "772:                 ti = proto_tree_add_ipv6_format_value(tree, hf_ip6, tvb, offset, 4 + len, &ipv6,",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ppcap.c||epan/dissectors/packet-ppcap.c": [
          "File: epan/dissectors/packet-ppcap.c -> epan/dissectors/packet-ppcap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "312:   {",
          "313:    struct e_in6_addr value;",
          "314:    tvb_get_ipv6(tvb, offset, &value);",
          "316:    TVB_SET_ADDRESS(&pinfo->net_src, AT_IPv6, tvb, offset, 6);",
          "317:    COPY_ADDRESS_SHALLOW(&pinfo->src, &pinfo->net_src);",
          "318:   }",
          "",
          "[Removed Lines]",
          "315:    proto_tree_add_ipv6(ppcap_tree1, hf_ppcap_source_ip_address2, tvb, offset, msg_len, (guint8*)&value);",
          "",
          "[Added Lines]",
          "315:    proto_tree_add_ipv6(ppcap_tree1, hf_ppcap_source_ip_address2, tvb, offset, msg_len, &value);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "405:    struct e_in6_addr value;",
          "407:    tvb_get_ipv6(tvb, offset,&value);",
          "409:    TVB_SET_ADDRESS(&pinfo->net_dst, AT_IPv6, tvb, offset, 6);",
          "410:    COPY_ADDRESS_SHALLOW(&pinfo->dst, &pinfo->net_dst);",
          "411:   }",
          "",
          "[Removed Lines]",
          "408:    proto_tree_add_ipv6(ppcap_tree1, hf_ppcap_destination_ip_address2, tvb, offset, msg_len, (guint8*)&value);",
          "",
          "[Added Lines]",
          "408:    proto_tree_add_ipv6(ppcap_tree1, hf_ppcap_destination_ip_address2, tvb, offset, msg_len, &value);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ppp.c||epan/dissectors/packet-ppp.c": [
          "File: epan/dissectors/packet-ppp.c -> epan/dissectors/packet-ppp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3599:         tvb_memcpy(tvb, &ad->bytes[8], offset + 3, 8);",
          "3600:         SET_ADDRESS(&addr, AT_IPv6, 16, ad->bytes);",
          "3602:             \"%s: %s\", val_to_str_const(pdnaddtype, vsncp_pdntype_vals, \"Unknown\"),",
          "3603:             address_to_str(wmem_packet_scope(), &addr));",
          "3604:         break;",
          "",
          "[Removed Lines]",
          "3601:         proto_tree_add_ipv6_format(field_tree, hf_vsncp_pdn_ipv6, tvb, offset + 3, length - 3, ad->bytes,",
          "",
          "[Added Lines]",
          "3601:         proto_tree_add_ipv6_format(field_tree, hf_vsncp_pdn_ipv6, tvb, offset + 3, length - 3, ad,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3612:         tvb_memcpy(tvb, &ad->bytes[8], offset + 3, 8);",
          "3613:         SET_ADDRESS(&addr, AT_IPv6, 16, ad->bytes);",
          "3615:             \"%s: %s\", val_to_str_const(pdnaddtype, vsncp_pdntype_vals, \"Unknown\"),",
          "3616:             address_to_str(wmem_packet_scope(), &addr));",
          "3617:         proto_tree_add_ipv4_format(field_tree, hf_vsncp_pdn_ipv4, tvb, offset + 11, length - 11,",
          "",
          "[Removed Lines]",
          "3614:         proto_tree_add_ipv6_format(field_tree, hf_vsncp_pdn_ipv6, tvb, offset + 3, length - 3, ad->bytes,",
          "",
          "[Added Lines]",
          "3614:         proto_tree_add_ipv6_format(field_tree, hf_vsncp_pdn_ipv6, tvb, offset + 3, length - 3, ad,",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-rtpproxy.c||epan/dissectors/packet-rtpproxy.c": [
          "File: epan/dissectors/packet-rtpproxy.c -> epan/dissectors/packet-rtpproxy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "497:         if(ipv6){",
          "498:             if(str_to_ip6((char*)tvb_get_string_enc(wmem_packet_scope(), tvb, begin, offset - begin, ENC_ASCII), ipaddr))",
          "500:             else",
          "501:                 proto_tree_add_expert(rtpproxy_tree, pinfo, &ei_rtpproxy_bad_ipv6, tvb, begin, offset - begin);",
          "502:         }",
          "",
          "[Removed Lines]",
          "499:                 proto_tree_add_ipv6(rtpproxy_tree, hf_rtpproxy_notify_ipv6, tvb, begin, offset - begin, (const guint8 *)ipaddr);",
          "",
          "[Added Lines]",
          "499:                 proto_tree_add_ipv6(rtpproxy_tree, hf_rtpproxy_notify_ipv6, tvb, begin, offset - begin, (const struct e_in6_addr*)ipaddr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "515:         if (pinfo->src.type == AT_IPv4)",
          "516:             ti = proto_tree_add_ipv4(rtpproxy_tree, hf_rtpproxy_notify_ipv4, tvb, begin, 0, ((guint32*)(pinfo->src.data))[0]);",
          "517:         else",
          "519:         PROTO_ITEM_SET_GENERATED(ti);",
          "520:         proto_tree_add_uint(rtpproxy_tree, hf_rtpproxy_notify_port, tvb, begin, end - begin,",
          "521:             (guint16) g_ascii_strtoull((gchar*)tvb_get_string_enc(wmem_packet_scope(), tvb, begin, end - begin, ENC_ASCII), NULL, 10));",
          "",
          "[Removed Lines]",
          "518:             ti = proto_tree_add_ipv6(rtpproxy_tree, hf_rtpproxy_notify_ipv6, tvb, begin, 0, (const guint8 *)(pinfo->src.data));",
          "",
          "[Added Lines]",
          "518:             ti = proto_tree_add_ipv6(rtpproxy_tree, hf_rtpproxy_notify_ipv6, tvb, begin, 0, (const struct e_in6_addr *)(pinfo->src.data));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "705:                 }",
          "706:                 else{",
          "707:                     if(str_to_ip6((char*)tvb_get_string_enc(wmem_packet_scope(), tvb, offset, new_offset - offset, ENC_ASCII), ipaddr))",
          "709:                     else",
          "710:                         proto_tree_add_expert(rtpproxy_tree, pinfo, &ei_rtpproxy_bad_ipv6, tvb, offset, new_offset - offset);",
          "711:                 }",
          "",
          "[Removed Lines]",
          "708:                         proto_tree_add_ipv6(rtpproxy_tree, hf_rtpproxy_ipv6, tvb, offset, new_offset - offset, (const guint8 *)ipaddr);",
          "",
          "[Added Lines]",
          "708:                         proto_tree_add_ipv6(rtpproxy_tree, hf_rtpproxy_ipv6, tvb, offset, new_offset - offset, (const struct e_in6_addr *)ipaddr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "874:                     addr.type = AT_IPv6;",
          "875:                     addr.len  = 16;",
          "876:                     addr.data = wmem_memdup(wmem_packet_scope(), ipaddr, 16);",
          "878:                 }",
          "879:                 else",
          "880:                     proto_tree_add_expert(rtpproxy_tree, pinfo, &ei_rtpproxy_bad_ipv6, tvb, offset, tmp);",
          "",
          "[Removed Lines]",
          "877:                     proto_tree_add_ipv6(rtpproxy_tree, hf_rtpproxy_ipv6, tvb, offset, tmp, (const guint8 *)ipaddr);",
          "",
          "[Added Lines]",
          "877:                     proto_tree_add_ipv6(rtpproxy_tree, hf_rtpproxy_ipv6, tvb, offset, tmp, (const struct e_in6_addr *)ipaddr);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-sasp.c||epan/dissectors/packet-sasp.c": [
          "File: epan/dissectors/packet-sasp.c -> epan/dissectors/packet-sasp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "658:     lab_len = tvb_get_guint8(tvb, offset+23);",
          "660:     memdatacomp = proto_tree_add_ipv6_format(pay_load, hf_sasp_memdatacomp_ip,",
          "662:         \"Member Data Comp (%s)\", ip_str);",
          "664:     memdatacomp_tree = proto_item_add_subtree(memdatacomp, ett_sasp_memdatacomp);",
          "",
          "[Removed Lines]",
          "661:         tvb, offset, 24+lab_len, (guint8*)&ipv6_address,",
          "",
          "[Added Lines]",
          "661:         tvb, offset, 24+lab_len, &ipv6_address,",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-socks.c||epan/dissectors/packet-socks.c": [
          "File: epan/dissectors/packet-socks.c -> epan/dissectors/packet-socks.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1114:                 PROTO_ITEM_SET_GENERATED(ti);",
          "1115:             } else if (hash_info->dst_addr.type == AT_IPv6) {",
          "1116:                 ti = proto_tree_add_ipv6( socks_tree, hf_socks_ip6_dst, tvb,",
          "1118:                 PROTO_ITEM_SET_GENERATED(ti);",
          "1119:             }",
          "",
          "[Removed Lines]",
          "1117:                     offset, 0, (const guint8*)hash_info->dst_addr.data);",
          "",
          "[Added Lines]",
          "1117:                     offset, 0, (const struct e_in6_addr *)hash_info->dst_addr.data);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-stun.c||epan/dissectors/packet-stun.c": [
          "File: epan/dissectors/packet-stun.c -> epan/dissectors/packet-stun.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1090:                         IPv6[2] = IPv6[2] ^ g_htonl(transaction_id[1]);",
          "1091:                         IPv6[3] = IPv6[3] ^ g_htonl(transaction_id[2]);",
          "1092:                         ti = proto_tree_add_ipv6(att_tree, hf_stun_att_ipv6, tvb, offset+4, 16,",
          "1094:                         PROTO_ITEM_SET_GENERATED(ti);",
          "1095:                     }",
          "",
          "[Removed Lines]",
          "1093:                                                  (const guint8 *)IPv6);",
          "",
          "[Added Lines]",
          "1093:                                                  (const struct e_in6_addr *)IPv6);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-wccp.c||epan/dissectors/packet-wccp.c": [
          "File: epan/dissectors/packet-wccp.c -> epan/dissectors/packet-wccp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "681:         if (addr_index == 0) {",
          "683:         }",
          "",
          "[Removed Lines]",
          "682:           return proto_tree_add_ipv6(tree, hf_ipv6, tvb, offset, length, ipv6_zero.bytes);",
          "",
          "[Added Lines]",
          "682:           return proto_tree_add_ipv6(tree, hf_ipv6, tvb, offset, length, &ipv6_zero);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "692:         if (addr_table->table_ipv6 != NULL) {",
          "694:         }",
          "696:         return proto_tree_add_uint_format_value(tree, hf_index, tvb, offset, length, host_addr,",
          "",
          "[Removed Lines]",
          "693:           return proto_tree_add_ipv6(tree, hf_ipv6, tvb, offset, length, addr_table->table_ipv6[addr_index-1].bytes);",
          "",
          "[Added Lines]",
          "693:           return proto_tree_add_ipv6(tree, hf_ipv6, tvb, offset, length, &(addr_table->table_ipv6[addr_index-1]));",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c": [
          "File: epan/dissectors/packet-wsp.c -> epan/dissectors/packet-wsp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4015:             if (tree) {",
          "4016:                 proto_tree_add_ipv6 (addr_tree,",
          "4017:                     hf_address_ipv6_addr,",
          "4019:             }",
          "",
          "[Removed Lines]",
          "4018:                     tvb, offset, 16, (guint8 *)&address_ipv6);",
          "",
          "[Added Lines]",
          "4018:                     tvb, offset, 16, &address_ipv6);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-zebra.c||epan/dissectors/packet-zebra.c": [
          "File: epan/dissectors/packet-zebra.c -> epan/dissectors/packet-zebra.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "370:   tvb_memcpy(tvb, buffer6, offset,",
          "371:       MIN((unsigned) PSIZE(prefixlen), sizeof buffer6));",
          "372:   proto_tree_add_ipv6(tree, hf_zebra_prefix6,",
          "374:  }else {",
          "375:   prefix4 = 0;",
          "376:   tvb_memcpy(tvb, (guint8 *)&prefix4, offset,",
          "",
          "[Removed Lines]",
          "373:         tvb, offset, PSIZE(prefixlen), buffer6);",
          "",
          "[Added Lines]",
          "373:         tvb, offset, PSIZE(prefixlen), (struct e_in6_addr *)buffer6);",
          "",
          "---------------"
        ],
        "epan/proto.c||epan/proto.c": [
          "File: epan/proto.c -> epan/proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2923: proto_item *",
          "2924: proto_tree_add_ipv6(proto_tree *tree, int hfindex, tvbuff_t *tvb, gint start,",
          "2926: {",
          "2927:  proto_item   *pi;",
          "2928:  header_field_info *hfinfo;",
          "",
          "[Removed Lines]",
          "2925:       gint length, const guint8* value_ptr)",
          "",
          "[Added Lines]",
          "2925:       gint length, const struct e_in6_addr *value_ptr)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2932:  DISSECTOR_ASSERT_FIELD_TYPE(hfinfo, FT_IPv6);",
          "2934:  pi = proto_tree_add_pi(tree, hfinfo, tvb, start, &length);",
          "2937:  return pi;",
          "2938: }",
          "",
          "[Removed Lines]",
          "2935:  proto_tree_set_ipv6(PNODE_FINFO(pi), value_ptr);",
          "",
          "[Added Lines]",
          "2935:  proto_tree_set_ipv6(PNODE_FINFO(pi), value_ptr->bytes);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2940: proto_item *",
          "2941: proto_tree_add_ipv6_format_value(proto_tree *tree, int hfindex, tvbuff_t *tvb,",
          "2942:      gint start, gint length,",
          "2944:      const char *format, ...)",
          "2945: {",
          "2946:  proto_item   *pi;",
          "",
          "[Removed Lines]",
          "2943:      const guint8* value_ptr,",
          "",
          "[Added Lines]",
          "2943:      const struct e_in6_addr *value_ptr,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2959: proto_item *",
          "2960: proto_tree_add_ipv6_format(proto_tree *tree, int hfindex, tvbuff_t *tvb,",
          "2962:       const char *format, ...)",
          "2963: {",
          "2964:  proto_item   *pi;",
          "",
          "[Removed Lines]",
          "2961:       gint start, gint length, const guint8* value_ptr,",
          "",
          "[Added Lines]",
          "2961:       gint start, gint length,",
          "2962:       const struct e_in6_addr *value_ptr,",
          "",
          "---------------"
        ],
        "epan/proto.h||epan/proto.h": [
          "File: epan/proto.h -> epan/proto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1397: WS_DLL_PUBLIC proto_item *",
          "1398: proto_tree_add_ipv6(proto_tree *tree, int hfindex, tvbuff_t *tvb, gint start,",
          "1402:     the string for the value and with the field name being included",
          "",
          "[Removed Lines]",
          "1399:  gint length, const guint8* value_ptr);",
          "",
          "[Added Lines]",
          "1399:  gint length, const struct e_in6_addr *value_ptr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1413: WS_DLL_PUBLIC proto_item *",
          "1414: proto_tree_add_ipv6_format_value(proto_tree *tree, int hfindex, tvbuff_t *tvb,",
          "1416:  ...) G_GNUC_PRINTF(7,8);",
          "",
          "[Removed Lines]",
          "1415:  gint start, gint length, const guint8* value_ptr, const char *format,",
          "",
          "[Added Lines]",
          "1415:  gint start, gint length, const struct e_in6_addr *value_ptr, const char *format,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1429: WS_DLL_PUBLIC proto_item *",
          "1430: proto_tree_add_ipv6_format(proto_tree *tree, int hfindex, tvbuff_t *tvb, gint start,",
          "1434:  @param tree the tree to append this item to",
          "",
          "[Removed Lines]",
          "1431:  gint length, const guint8* value_ptr, const char *format, ...) G_GNUC_PRINTF(7,8);",
          "",
          "[Added Lines]",
          "1431:  gint length, const struct e_in6_addr *value_ptr, const char *format, ...) G_GNUC_PRINTF(7,8);",
          "",
          "---------------"
        ],
        "plugins/wimaxasncp/packet-wimaxasncp.c||plugins/wimaxasncp/packet-wimaxasncp.c": [
          "File: plugins/wimaxasncp/packet-wimaxasncp.c -> plugins/wimaxasncp/packet-wimaxasncp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "633:     proto_tree_add_ipv6_format(",
          "634:         tree, hf_value,",
          "636:         \"Value: %s\", addr_res);",
          "638:     proto_item_append_text(",
          "",
          "[Removed Lines]",
          "635:         tvb, offset, 16, (guint8 *)&ip,",
          "",
          "[Added Lines]",
          "635:         tvb, offset, 16, &ip,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a643d14187c5a201d21bdb0786acc5e27b73a3a1",
      "candidate_info": {
        "commit_hash": "a643d14187c5a201d21bdb0786acc5e27b73a3a1",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/a643d14187c5a201d21bdb0786acc5e27b73a3a1",
        "files": [
          "epan/dissectors/packet-6lowpan.c",
          "epan/dissectors/packet-bgp.c",
          "epan/dissectors/packet-dcerpc.c",
          "epan/dissectors/packet-diameter.c",
          "epan/dissectors/packet-dns.c",
          "epan/dissectors/packet-eigrp.c",
          "epan/dissectors/packet-ftp.c",
          "epan/dissectors/packet-icmpv6.c",
          "epan/dissectors/packet-ipv6.c",
          "epan/dissectors/packet-isis-clv.c",
          "epan/dissectors/packet-isis-lsp.c",
          "epan/dissectors/packet-nfs.c",
          "epan/dissectors/packet-nsip.c",
          "epan/dissectors/packet-ospf.c",
          "epan/dissectors/packet-packetbb.c",
          "epan/dissectors/packet-pim.c",
          "epan/dissectors/packet-ppcap.c",
          "epan/dissectors/packet-ppp.c",
          "epan/dissectors/packet-rtpproxy.c",
          "epan/dissectors/packet-sasp.c",
          "epan/dissectors/packet-socks.c",
          "epan/dissectors/packet-stun.c",
          "epan/dissectors/packet-wccp.c",
          "epan/dissectors/packet-wsp.c",
          "epan/dissectors/packet-zebra.c",
          "epan/proto.c",
          "epan/proto.h",
          "plugins/wimaxasncp/packet-wimaxasncp.c"
        ],
        "message": "Change proto_tree_add_ipv6() to take a struct e_in6_addr pointer\n\ntvb_get_ipv6() takes a struct e_in6_addr *, use that here too.\n\nChange-Id: Id8b368daa05c151a61d4bc01dc88c00da13e9c88\nReviewed-on: https://code.wireshark.org/review/10953\nReviewed-by: Michael Mann <mmann78@netscape.net>\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Balint Reczey <balint@balintreczey.hu>\nReviewed-by: Alexis La Goutte <alexis.lagoutte@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-6lowpan.c||epan/dissectors/packet-6lowpan.c",
          "epan/dissectors/packet-bgp.c||epan/dissectors/packet-bgp.c",
          "epan/dissectors/packet-dcerpc.c||epan/dissectors/packet-dcerpc.c",
          "epan/dissectors/packet-diameter.c||epan/dissectors/packet-diameter.c",
          "epan/dissectors/packet-dns.c||epan/dissectors/packet-dns.c",
          "epan/dissectors/packet-eigrp.c||epan/dissectors/packet-eigrp.c",
          "epan/dissectors/packet-ftp.c||epan/dissectors/packet-ftp.c",
          "epan/dissectors/packet-icmpv6.c||epan/dissectors/packet-icmpv6.c",
          "epan/dissectors/packet-ipv6.c||epan/dissectors/packet-ipv6.c",
          "epan/dissectors/packet-isis-clv.c||epan/dissectors/packet-isis-clv.c",
          "epan/dissectors/packet-isis-lsp.c||epan/dissectors/packet-isis-lsp.c",
          "epan/dissectors/packet-nfs.c||epan/dissectors/packet-nfs.c",
          "epan/dissectors/packet-nsip.c||epan/dissectors/packet-nsip.c",
          "epan/dissectors/packet-ospf.c||epan/dissectors/packet-ospf.c",
          "epan/dissectors/packet-packetbb.c||epan/dissectors/packet-packetbb.c",
          "epan/dissectors/packet-pim.c||epan/dissectors/packet-pim.c",
          "epan/dissectors/packet-ppcap.c||epan/dissectors/packet-ppcap.c",
          "epan/dissectors/packet-ppp.c||epan/dissectors/packet-ppp.c",
          "epan/dissectors/packet-rtpproxy.c||epan/dissectors/packet-rtpproxy.c",
          "epan/dissectors/packet-sasp.c||epan/dissectors/packet-sasp.c",
          "epan/dissectors/packet-socks.c||epan/dissectors/packet-socks.c",
          "epan/dissectors/packet-stun.c||epan/dissectors/packet-stun.c",
          "epan/dissectors/packet-wccp.c||epan/dissectors/packet-wccp.c",
          "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c",
          "epan/dissectors/packet-zebra.c||epan/dissectors/packet-zebra.c",
          "epan/proto.c||epan/proto.c",
          "epan/proto.h||epan/proto.h",
          "plugins/wimaxasncp/packet-wimaxasncp.c||plugins/wimaxasncp/packet-wimaxasncp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-dns.c||epan/dissectors/packet-dns.c"
          ],
          "candidate": [
            "epan/dissectors/packet-dns.c||epan/dissectors/packet-dns.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-6lowpan.c||epan/dissectors/packet-6lowpan.c": [
          "File: epan/dissectors/packet-6lowpan.c -> epan/dissectors/packet-6lowpan.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1216:     if (tree) {",
          "1217:         proto_tree_add_ipv6(tree, hf_6lowpan_source, tvb, offset>>3,",
          "1219:     }",
          "",
          "[Removed Lines]",
          "1218:                 BITS_TO_BYTE_LEN(offset, (bit_offset-offset)), (guint8 *)&ipv6.ip6_src);",
          "",
          "[Added Lines]",
          "1218:                 BITS_TO_BYTE_LEN(offset, (bit_offset-offset)), &ipv6.ip6_src);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1248:     if (tree) {",
          "1249:         proto_tree_add_ipv6(tree, hf_6lowpan_dest, tvb, offset>>3,",
          "1251:     }",
          "",
          "[Removed Lines]",
          "1250:                 BITS_TO_BYTE_LEN(offset, (bit_offset-offset)), (guint8 *)&ipv6.ip6_dst);",
          "",
          "[Added Lines]",
          "1250:                 BITS_TO_BYTE_LEN(offset, (bit_offset-offset)), &ipv6.ip6_dst);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1665:     if (tree) {",
          "1667:     }",
          "1670:     if (tree && sctx->plen) {",
          "1671:         proto_item *ti;",
          "1673:         PROTO_ITEM_SET_GENERATED(ti);",
          "1674:         if ( sctx->frame ) {",
          "1675:             ti = proto_tree_add_uint(iphc_tree, hf_6lowpan_iphc_sctx_origin, tvb, 0, 0, sctx->frame);",
          "",
          "[Removed Lines]",
          "1666:         proto_tree_add_ipv6(tree, hf_6lowpan_source, tvb, offset, length, (guint8 *)&ipv6.ip6_src);",
          "1672:         ti = proto_tree_add_ipv6(iphc_tree, hf_6lowpan_iphc_sctx_prefix, tvb, 0, 0, (guint8 *)&sctx->prefix);",
          "",
          "[Added Lines]",
          "1666:         proto_tree_add_ipv6(tree, hf_6lowpan_source, tvb, offset, length, &ipv6.ip6_src);",
          "1672:         ti = proto_tree_add_ipv6(iphc_tree, hf_6lowpan_iphc_sctx_prefix, tvb, 0, 0, &sctx->prefix);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1792:     if (tree) {",
          "1794:     }",
          "1797:     if (tree && dctx->plen) {",
          "1798:         proto_item *ti;",
          "1800:         PROTO_ITEM_SET_GENERATED(ti);",
          "1801:         if ( dctx->frame ) {",
          "1802:             ti = proto_tree_add_uint(iphc_tree, hf_6lowpan_iphc_dctx_origin, tvb, 0, 0, dctx->frame);",
          "",
          "[Removed Lines]",
          "1793:         proto_tree_add_ipv6(tree, hf_6lowpan_dest, tvb, offset, length, (guint8 *)&ipv6.ip6_dst);",
          "1799:         ti = proto_tree_add_ipv6(iphc_tree, hf_6lowpan_iphc_dctx_prefix, tvb, 0, 0, (guint8 *)&dctx->prefix);",
          "",
          "[Added Lines]",
          "1793:         proto_tree_add_ipv6(tree, hf_6lowpan_dest, tvb, offset, length, &ipv6.ip6_dst);",
          "1799:         ti = proto_tree_add_ipv6(iphc_tree, hf_6lowpan_iphc_dctx_prefix, tvb, 0, 0, &dctx->prefix);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-bgp.c||epan/dissectors/packet-bgp.c": [
          "File: epan/dissectors/packet-bgp.c -> epan/dissectors/packet-bgp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1859:             address_to_str(wmem_packet_scope(), &addr_str), plen);",
          "1860:     proto_tree_add_uint_format(prefix_tree, hf_bgp_prefix_length, tvb, offset, 1, plen, \"%s prefix length: %u\",",
          "1861:         tag, plen);",
          "1864:     return(1 + length);",
          "1865: }",
          "",
          "[Removed Lines]",
          "1862:     proto_tree_add_ipv6(prefix_tree, hf_addr, tvb, offset + 1, length,",
          "1863:             addr.bytes);",
          "",
          "[Added Lines]",
          "1862:     proto_tree_add_ipv6(prefix_tree, hf_addr, tvb, offset + 1, length, &addr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1897:             address_to_str(wmem_packet_scope(), &addr_str), plen);",
          "1898:     proto_tree_add_item(prefix_tree, hf_bgp_flowspec_nlri_ipv6_pref_len, tvb, offset + plength_place, 1, ENC_BIG_ENDIAN);",
          "1899:     proto_tree_add_item(prefix_tree, hf_bgp_flowspec_nlri_ipv6_pref_offset, tvb, offset + poffset_place, 1, ENC_BIG_ENDIAN);",
          "1902:     if (parent_item != NULL)",
          "1903:       proto_item_append_text(parent_item, \" (%s/%u)\",",
          "1904:                              address_to_str(wmem_packet_scope(), &addr_str), plen);",
          "",
          "[Removed Lines]",
          "1900:     proto_tree_add_ipv6(prefix_tree, hf_addr, tvb, offset + 2, length,",
          "1901:             addr.bytes);",
          "",
          "[Added Lines]",
          "1899:     proto_tree_add_ipv6(prefix_tree, hf_addr, tvb, offset + 2, length, &addr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4308:                 proto_tree_add_item(prefix_tree, hf_bgp_mp_nlri_tnl_id, tvb,",
          "4309:                                     start_offset + 1, 2, ENC_BIG_ENDIAN);",
          "4313:                 break;",
          "",
          "[Removed Lines]",
          "4310:                 proto_tree_add_ipv6(prefix_tree, hf_addr6, tvb, offset, length, ip6addr.bytes);",
          "",
          "[Added Lines]",
          "4308:                 proto_tree_add_ipv6(prefix_tree, hf_addr6, tvb, offset, length, &ip6addr);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-dcerpc.c||epan/dissectors/packet-dcerpc.c": [
          "File: epan/dissectors/packet-dcerpc.c -> epan/dissectors/packet-dcerpc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4583:             case RTS_IPV6: {",
          "4584:                struct e_in6_addr addr6;",
          "4585:                tvb_get_ipv6(tvb, offset, &addr6);",
          "4587:                offset += 16;",
          "4588:             } break;",
          "4589:             }",
          "",
          "[Removed Lines]",
          "4586:                proto_tree_add_ipv6_format_value(cn_rts_command_tree, hf_dcerpc_cmd_client_ipv6, tvb, offset, 16, (const guint8 *)&addr6, \"%s\", get_hostname6(&addr6));",
          "",
          "[Added Lines]",
          "4586:                proto_tree_add_ipv6_format_value(cn_rts_command_tree, hf_dcerpc_cmd_client_ipv6, tvb, offset, 16, &addr6, \"%s\", get_hostname6(&addr6));",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-diameter.c||epan/dissectors/packet-diameter.c": [
          "File: epan/dissectors/packet-diameter.c -> epan/dissectors/packet-diameter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "510:   memset(&value.bytes, 0, sizeof(value));",
          "511:   tvb_memcpy(tvb, (guint8 *)&value.bytes, 2, prefix_len_bytes);",
          "512:   value.bytes[prefix_len_bytes] = value.bytes[prefix_len_bytes] & (0xff<<(prefix_len % 8));",
          "514:   SET_ADDRESS(&addr, AT_IPv6, 16, value.bytes);",
          "515:   diam_sub_dis->avp_str = wmem_strdup_printf(wmem_packet_scope(), \"%s/%u\", address_to_str(wmem_packet_scope(), &addr), prefix_len);",
          "516:  }",
          "",
          "[Removed Lines]",
          "513:   proto_tree_add_ipv6(tree, hf_framed_ipv6_prefix_ipv6, tvb, 2, prefix_len_bytes, value.bytes);",
          "",
          "[Added Lines]",
          "513:   proto_tree_add_ipv6(tree, hf_framed_ipv6_prefix_ipv6, tvb, 2, prefix_len_bytes, &value);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-dns.c||epan/dissectors/packet-dns.c": [
          "File: epan/dissectors/packet-dns.c -> epan/dissectors/packet-dns.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2633:       proto_tree_add_item(rr_tree, hf_dns_a6_prefix_len,tvb, a6_offset, 1, ENC_BIG_ENDIAN);",
          "2634:       a6_offset++;",
          "2635:       if (suf_len) {",
          "2637:         a6_offset += suf_octet_count;",
          "2638:       }",
          "2639:       if (pre_len > 0) {",
          "",
          "[Removed Lines]",
          "2636:         proto_tree_add_ipv6(rr_tree, hf_dns_a6_address_suffix,tvb, a6_offset, suf_octet_count, suffix.bytes);",
          "",
          "[Added Lines]",
          "2636:         proto_tree_add_ipv6(rr_tree, hf_dns_a6_address_suffix,tvb, a6_offset, suf_octet_count, &suffix);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2747:               break;",
          "2748:               case AFNUM_INET6:",
          "2749:               proto_tree_add_ipv6(rropt_tree, hf_dns_opt_client_addr6, tvb,",
          "2751:               break;",
          "2752:               default:",
          "2753:               proto_tree_add_item(rropt_tree, hf_dns_opt_client_addr, tvb, cur_offset, (optlen - 4),",
          "",
          "[Removed Lines]",
          "2750:                                   cur_offset, addr_len, ip_addr.bytes);",
          "",
          "[Added Lines]",
          "2750:                                   cur_offset, addr_len, (struct e_in6_addr *)&ip_addr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2812:           addr_copy = (guint8 *)wmem_alloc0(wmem_file_scope(), 16);",
          "2813:           tvb_memcpy(tvb, (guint8 *)addr_copy, cur_offset, afdpart_len);",
          "2816:            proto_tree_add_item(rr_tree, hf_dns_apl_afdpart_data, tvb, cur_offset, afdpart_len, ENC_NA);",
          "2817:         }",
          "",
          "[Removed Lines]",
          "2814:           proto_tree_add_ipv6(rr_tree, hf_dns_apl_afdpart_ipv6, tvb, cur_offset, afdpart_len, addr_copy);",
          "",
          "[Added Lines]",
          "2814:           proto_tree_add_ipv6(rr_tree, hf_dns_apl_afdpart_ipv6, tvb, cur_offset, afdpart_len, (struct e_in6_addr *)addr_copy);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-eigrp.c||epan/dissectors/packet-eigrp.c": [
          "File: epan/dissectors/packet-eigrp.c -> epan/dissectors/packet-eigrp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1179:             }",
          "1181:             SET_ADDRESS(&addr_str, AT_IPv6, 16, addr.bytes);",
          "1185:             proto_item_append_text(ti,\"  %c   %s/%u\", first ? '=':',',",
          "",
          "[Removed Lines]",
          "1182:             ti_dst = proto_tree_add_ipv6(tree, hf_eigrp_ipv6_destination, tvb, offset, addr_len, addr.bytes);",
          "",
          "[Added Lines]",
          "1182:             ti_dst = proto_tree_add_ipv6(tree, hf_eigrp_ipv6_destination, tvb, offset, addr_len, &addr);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ftp.c||epan/dissectors/packet-ftp.c": [
          "File: epan/dissectors/packet-ftp.c -> epan/dissectors/packet-ftp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "783:             }",
          "784:             else if (eprt_af == EPRT_AF_IPv6) {",
          "785:                 proto_tree_add_ipv6(reqresp_tree, hf_ftp_eprt_ipv6,",
          "787:                 SET_ADDRESS(&ftp_ip_address, AT_IPv6, 16, eprt_ipv6);",
          "788:             }",
          "",
          "[Removed Lines]",
          "786:                         tvb, eprt_offset, eprt_ip_len, (const guint8 *)eprt_ipv6);",
          "",
          "[Added Lines]",
          "786:                         tvb, eprt_offset, eprt_ip_len, (const struct e_in6_addr *)eprt_ipv6);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "831:                 else if (ftp_ip_address.type == AT_IPv6) {",
          "832:                     addr_it = proto_tree_add_ipv6(reqresp_tree,",
          "833:                             hf_ftp_epsv_ipv6, tvb, 0, 0,",
          "835:                     PROTO_ITEM_SET_GENERATED(addr_it);",
          "836:                 }",
          "",
          "[Removed Lines]",
          "834:                             (const guint8*)ftp_ip_address.data);",
          "",
          "[Added Lines]",
          "834:                             (const struct e_in6_addr *)ftp_ip_address.data);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-icmpv6.c||epan/dissectors/packet-icmpv6.c": [
          "File: epan/dissectors/packet-icmpv6.c -> epan/dissectors/packet-icmpv6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1947:                     case 16:",
          "1948:                         memset(&prefix, 0, sizeof(prefix));",
          "1949:                         tvb_memcpy(tvb, (guint8 *)&prefix.bytes, opt_offset, 8);",
          "1951:                         SET_ADDRESS(&prefix_addr, AT_IPv6, 16, prefix.bytes);",
          "1952:                         proto_item_append_text(ti, \" %s/%d\", address_to_str(wmem_packet_scope(), &prefix_addr), prefix_len);",
          "1953:                         opt_offset += 8;",
          "",
          "[Removed Lines]",
          "1950:                         proto_tree_add_ipv6(icmp6opt_tree, hf_icmpv6_opt_prefix, tvb, opt_offset, 8, prefix.bytes);",
          "",
          "[Added Lines]",
          "1950:                         proto_tree_add_ipv6(icmp6opt_tree, hf_icmpv6_opt_prefix, tvb, opt_offset, 8, &prefix);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2246:                         break;",
          "2247:                     case 16:",
          "2248:                         tvb_memcpy(tvb, (guint8 *)&context_prefix.bytes, opt_offset, 8);",
          "2250:                         SET_ADDRESS(&context_prefix_addr, AT_IPv6, 16, context_prefix.bytes);",
          "2251:                         proto_item_append_text(ti, \" %s/%d\", address_to_str(wmem_packet_scope(), &context_prefix_addr), context_len);",
          "2252:                         opt_offset += 8;",
          "",
          "[Removed Lines]",
          "2249:                         proto_tree_add_ipv6(icmp6opt_tree, hf_icmpv6_opt_6co_context_prefix, tvb, opt_offset, 8, context_prefix.bytes);",
          "",
          "[Added Lines]",
          "2249:                         proto_tree_add_ipv6(icmp6opt_tree, hf_icmpv6_opt_6co_context_prefix, tvb, opt_offset, 8, &context_prefix);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2422:                     case 14:",
          "2423:                         memset(&prefix, 0, sizeof(prefix));",
          "2424:                         tvb_memcpy(tvb, (guint8 *)&prefix.bytes, opt_offset, 8);",
          "2426:                         SET_ADDRESS(&prefix_addr, AT_IPv6, 16, prefix.bytes);",
          "2427:                         proto_item_append_text(ti, \" %s/%d\", address_to_str(wmem_packet_scope(), &prefix_addr), prefix_len);",
          "2428:                         opt_offset += 8;",
          "",
          "[Removed Lines]",
          "2425:                         proto_tree_add_ipv6(icmp6opt_tree, hf_icmpv6_rpl_opt_route_prefix, tvb, opt_offset, 8, prefix.bytes);",
          "",
          "[Added Lines]",
          "2425:                         proto_tree_add_ipv6(icmp6opt_tree, hf_icmpv6_rpl_opt_route_prefix, tvb, opt_offset, 8, &prefix);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2509:                     case 10:",
          "2510:                         memset(&target_prefix, 0, sizeof(target_prefix));",
          "2511:                         tvb_memcpy(tvb, (guint8 *)&target_prefix.bytes, opt_offset, 8);",
          "2513:                         SET_ADDRESS(&target_prefix_addr, AT_IPv6, 16, target_prefix.bytes);",
          "2514:                         proto_item_append_text(ti, \" %s/%d\", address_to_str(wmem_packet_scope(), &target_prefix_addr), prefix_len);",
          "2515:                         opt_offset += 8;",
          "",
          "[Removed Lines]",
          "2512:                         proto_tree_add_ipv6(icmp6opt_tree, hf_icmpv6_rpl_opt_target_prefix, tvb, opt_offset, 8, target_prefix.bytes);",
          "",
          "[Added Lines]",
          "2512:                         proto_tree_add_ipv6(icmp6opt_tree, hf_icmpv6_rpl_opt_target_prefix, tvb, opt_offset, 8, &target_prefix);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2735:                 while (num_of_addr--) {",
          "2736:                     memset(addr, 0, sizeof(addr));",
          "2737:                     memcpy(addr + compr, tvb_get_ptr(tvb, opt_offset, addr_len), addr_len);",
          "2739:                     opt_offset += addr_len;",
          "2740:                 }",
          "",
          "[Removed Lines]",
          "2738:                     proto_tree_add_ipv6(flag_tree, hf_icmpv6_rpl_opt_route_discovery_addr_vec_addr, tvb, opt_offset, addr_len, addr);",
          "",
          "[Added Lines]",
          "2738:                     proto_tree_add_ipv6(flag_tree, hf_icmpv6_rpl_opt_route_discovery_addr_vec_addr, tvb, opt_offset, addr_len, (struct e_in6_addr *)addr);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ipv6.c||epan/dissectors/packet-ipv6.c": [
          "File: epan/dissectors/packet-ipv6.c -> epan/dissectors/packet-ipv6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "967:                 memcpy((guint8 *)addr, (guint8 *)&dstAddr, sizeof(dstAddr));",
          "968:                 tvb_memcpy(tvb, (guint8 *)addr + cmprI, offset, (16-cmprI));",
          "970:                 PROTO_ITEM_SET_GENERATED(ti);",
          "971:                 offset += (16-cmprI);",
          "972:                 segments--;",
          "",
          "[Removed Lines]",
          "969:                 ti = proto_tree_add_ipv6(rthdr_tree, hf_ipv6_routing_rpl_fulladdr, tvb, offset, (16-cmprI), (guint8 *)addr);",
          "",
          "[Added Lines]",
          "969:                 ti = proto_tree_add_ipv6(rthdr_tree, hf_ipv6_routing_rpl_fulladdr, tvb, offset, (16-cmprI), addr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1026:                 memcpy((guint8 *)addr, (guint8 *)&dstAddr, sizeof(dstAddr));",
          "1027:                 tvb_memcpy(tvb, (guint8 *)addr + cmprE, offset, (16-cmprE));",
          "1029:                 PROTO_ITEM_SET_GENERATED(ti);",
          "",
          "[Removed Lines]",
          "1028:                 ti = proto_tree_add_ipv6(rthdr_tree, hf_ipv6_routing_rpl_fulladdr, tvb, offset, (16-cmprE), (guint8 *)addr);",
          "",
          "[Added Lines]",
          "1028:                 ti = proto_tree_add_ipv6(rthdr_tree, hf_ipv6_routing_rpl_fulladdr, tvb, offset, (16-cmprE), addr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2090:                             offset + IP6H_SRC, 16, ENC_NA);",
          "2091:         ti = proto_tree_add_ipv6(ipv6_tree, hf_ipv6_addr, tvb,",
          "2092:                                  offset + IP6H_SRC,",
          "2094:         PROTO_ITEM_SET_HIDDEN(ti);",
          "2095:         name = address_to_display(wmem_packet_scope(), &pinfo->src);",
          "2096:         if (ipv6_summary_in_tree) {",
          "",
          "[Removed Lines]",
          "2093:                                  16, (guint8 *)&ipv6->ip6_src);",
          "",
          "[Added Lines]",
          "2093:                                  16, &ipv6->ip6_src);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2178:                             offset + IP6H_DST, 16, ENC_NA);",
          "2179:         ti = proto_tree_add_ipv6(ipv6_tree, hf_ipv6_addr, tvb,",
          "2180:                                  offset + IP6H_DST,",
          "2182:         PROTO_ITEM_SET_HIDDEN(ti);",
          "2183:         name = address_to_display(wmem_packet_scope(), &pinfo->dst);",
          "2184:         if (ipv6_summary_in_tree) {",
          "",
          "[Removed Lines]",
          "2181:                                  16, (guint8 *)&ipv6->ip6_dst);",
          "",
          "[Added Lines]",
          "2181:                                  16, &ipv6->ip6_dst);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-isis-clv.c||epan/dissectors/packet-isis-clv.c": [
          "File: epan/dissectors/packet-isis-clv.c -> epan/dissectors/packet-isis-clv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "309: isis_dissect_ipv6_int_clv(proto_tree *tree, packet_info* pinfo, tvbuff_t *tvb, expert_field* expert,",
          "310:     int offset, int length, int tree_id)",
          "311: {",
          "314:     if ( length <= 0 ) {",
          "315:         return;",
          "",
          "[Removed Lines]",
          "312:     guint8 addr [16];",
          "",
          "[Added Lines]",
          "312:     struct e_in6_addr addr;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "321:                 \"Short IPv6 interface address (%d vs 16)\",length );",
          "322:             return;",
          "323:         }",
          "325:         if ( tree ) {",
          "327:         }",
          "328:         offset += 16;",
          "329:         length -= 16;",
          "",
          "[Removed Lines]",
          "324:         tvb_memcpy(tvb, addr, offset, sizeof(addr));",
          "326:             proto_tree_add_ipv6(tree, tree_id, tvb, offset, 16, addr);",
          "",
          "[Added Lines]",
          "324:         tvb_get_ipv6(tvb, offset, &addr);",
          "326:             proto_tree_add_ipv6(tree, tree_id, tvb, offset, 16, &addr);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-isis-lsp.c||epan/dissectors/packet-isis-lsp.c": [
          "File: epan/dissectors/packet-isis-lsp.c -> epan/dissectors/packet-isis-lsp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1459:         SET_ADDRESS(&prefix_addr, AT_IPv6, 16, prefix.bytes);",
          "1460:         proto_tree_add_ipv6_format_value(subtree, hf_isis_lsp_ipv6_reachability_ipv6_prefix, tvb, offset+6, byte_length,",
          "1463:         proto_tree_add_item(subtree, hf_isis_lsp_ipv6_reachability_metric, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1464:         proto_tree_add_item(subtree, hf_isis_lsp_ipv6_reachability_distribution, tvb, offset+4, 1, ENC_NA);",
          "",
          "[Removed Lines]",
          "1461:                              (guint8*)&prefix, \"IPv6 prefix: %s/%u\", address_to_str(wmem_packet_scope(), &prefix_addr), bit_length);",
          "",
          "[Added Lines]",
          "1461:                             &prefix, \"IPv6 prefix: %s/%u\", address_to_str(wmem_packet_scope(), &prefix_addr), bit_length);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-nfs.c||epan/dissectors/packet-nfs.c": [
          "File: epan/dissectors/packet-nfs.c -> epan/dissectors/packet-nfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7389:    ipv6.bytes[0] = b1; ipv6.bytes[1] = b2; ipv6.bytes[2] = b3; ipv6.bytes[3] = b4;",
          "7390:    ipv6.bytes[4] = b5; ipv6.bytes[5] = b6; ipv6.bytes[6] = b7; ipv6.bytes[7] = b8;",
          "7391:    SET_ADDRESS(&addr, AT_IPv6, 16, &ipv6);",
          "7393:     address_to_str(wmem_packet_scope(), &addr), protocol, port);",
          "7394:    PROTO_ITEM_SET_GENERATED(ti);",
          "7395:   } else {",
          "",
          "[Removed Lines]",
          "7392:    ti = proto_tree_add_ipv6_format(tree, hf_nfs4_universal_address_ipv6, tvb, addr_offset, offset-addr_offset, ipv6.bytes, \"IPv6 address %s, protocol=%s, port=%u\",",
          "",
          "[Added Lines]",
          "7392:    ti = proto_tree_add_ipv6_format(tree, hf_nfs4_universal_address_ipv6, tvb, addr_offset, offset-addr_offset, &ipv6, \"IPv6 address %s, protocol=%s, port=%u\",",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-nsip.c||epan/dissectors/packet-nsip.c": [
          "File: epan/dissectors/packet-nsip.c -> epan/dissectors/packet-nsip.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "542:     tvb_get_ipv6(bi->tvb, bi->offset+1, &ip6_addr);",
          "543:     proto_tree_add_ipv6(bi->nsip_tree, hf_nsip_ip_address_ipv4,",
          "544:         bi->tvb, ie_start_offset, ie->total_length,",
          "546:     break;",
          "547:   default:",
          "",
          "[Removed Lines]",
          "545:         (guint8 *)&ip6_addr);",
          "",
          "[Added Lines]",
          "545:         &ip6_addr);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ospf.c||epan/dissectors/packet-ospf.c": [
          "File: epan/dissectors/packet-ospf.c -> epan/dissectors/packet-ospf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3066:     }",
          "3067:     if (address_family == OSPF_AF_6) {",
          "3068:         proto_tree_add_ipv6(tree, hf_ospf_v3_address_prefix_ipv6, tvb, offset, bytes_to_process,",
          "3070:     } else {",
          "3071:         proto_tree_add_item(tree, hf_ospf_v3_address_prefix_ipv4, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "3072:     }",
          "",
          "[Removed Lines]",
          "3069:                             prefix.bytes);",
          "",
          "[Added Lines]",
          "3069:                             &prefix);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-packetbb.c||epan/dissectors/packet-packetbb.c": [
          "File: epan/dissectors/packet-packetbb.c -> epan/dissectors/packet-packetbb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "470:         break;",
          "471:       case 1:",
          "472:         addrValue_item = proto_tree_add_ipv6(addr_tree, hf_packetbb_addr_value[addressType],",
          "474:         break;",
          "475:       case 2:",
          "476:         addrValue_item = proto_tree_add_ether(addr_tree, hf_packetbb_addr_value[addressType],",
          "",
          "[Removed Lines]",
          "473:             tvb, mid_index, block_index + block_length - mid_index, addr);",
          "",
          "[Added Lines]",
          "473:             tvb, mid_index, block_index + block_length - mid_index, (struct e_in6_addr *)addr);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-pim.c||epan/dissectors/packet-pim.c": [
          "File: epan/dissectors/packet-pim.c -> epan/dissectors/packet-pim.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "691:             if (label)",
          "692:             {",
          "693:                 ti = proto_tree_add_ipv6_format(tree, hf_ip6, tvb, offset, 2 + len,",
          "695:             }",
          "696:             else",
          "697:             {",
          "699:             }",
          "700:             break;",
          "701:         }",
          "",
          "[Removed Lines]",
          "694:                         (guint8 *)&ipv6, \"%s: %s\", label, tvb_ip6_to_str(tvb, offset + 2));",
          "698:                 ti = proto_tree_add_ipv6(tree, hf_ip6, tvb, offset, 2 + len, (guint8 *)&ipv6);",
          "",
          "[Added Lines]",
          "694:                         &ipv6, \"%s: %s\", label, tvb_ip6_to_str(tvb, offset + 2));",
          "698:                 ti = proto_tree_add_ipv6(tree, hf_ip6, tvb, offset, 2 + len, &ipv6);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "727:             if (label)",
          "728:             {",
          "729:                 ti = proto_tree_add_ipv6_format(tree, hf_ip6, tvb, offset, 4 + len,",
          "731:             }",
          "732:             else",
          "733:             {",
          "735:             }",
          "736:             proto_item_append_text(ti, \"/%u\", mask_len);",
          "737:             break;",
          "",
          "[Removed Lines]",
          "730:                         (guint8 *)&ipv6, \"%s: %s\", label, tvb_ip6_to_str(tvb, offset + 4));",
          "734:                 ti = proto_tree_add_ipv6(tree, hf_ip6, tvb, offset, 4 + len, (guint8 *)&ipv6);",
          "",
          "[Added Lines]",
          "730:                         &ipv6, \"%s: %s\", label, tvb_ip6_to_str(tvb, offset + 4));",
          "734:                 ti = proto_tree_add_ipv6(tree, hf_ip6, tvb, offset, 4 + len, &ipv6);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "765:             if (label)",
          "766:             {",
          "767:                 ti = proto_tree_add_ipv6_format(tree, hf_ip6, tvb, offset, 4 + len,",
          "769:             }",
          "770:             else",
          "771:             {",
          "773:                                                       \"%s\", tvb_ip6_to_str(tvb, offset + 4));",
          "774:             }",
          "775:             proto_item_append_text(ti, \"/%u\", mask_len);",
          "",
          "[Removed Lines]",
          "768:                         (guint8 *)&ipv6, \"%s: %s\", label, tvb_ip6_to_str(tvb, offset + 4));",
          "772:                 ti = proto_tree_add_ipv6_format_value(tree, hf_ip6, tvb, offset, 4 + len, (guint8 *)&ipv6,",
          "",
          "[Added Lines]",
          "768:                         &ipv6, \"%s: %s\", label, tvb_ip6_to_str(tvb, offset + 4));",
          "772:                 ti = proto_tree_add_ipv6_format_value(tree, hf_ip6, tvb, offset, 4 + len, &ipv6,",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ppcap.c||epan/dissectors/packet-ppcap.c": [
          "File: epan/dissectors/packet-ppcap.c -> epan/dissectors/packet-ppcap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "312:   {",
          "313:    struct e_in6_addr value;",
          "314:    tvb_get_ipv6(tvb, offset, &value);",
          "316:    TVB_SET_ADDRESS(&pinfo->net_src, AT_IPv6, tvb, offset, 6);",
          "317:    COPY_ADDRESS_SHALLOW(&pinfo->src, &pinfo->net_src);",
          "318:   }",
          "",
          "[Removed Lines]",
          "315:    proto_tree_add_ipv6(ppcap_tree1, hf_ppcap_source_ip_address2, tvb, offset, msg_len, (guint8*)&value);",
          "",
          "[Added Lines]",
          "315:    proto_tree_add_ipv6(ppcap_tree1, hf_ppcap_source_ip_address2, tvb, offset, msg_len, &value);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "405:    struct e_in6_addr value;",
          "407:    tvb_get_ipv6(tvb, offset,&value);",
          "409:    TVB_SET_ADDRESS(&pinfo->net_dst, AT_IPv6, tvb, offset, 6);",
          "410:    COPY_ADDRESS_SHALLOW(&pinfo->dst, &pinfo->net_dst);",
          "411:   }",
          "",
          "[Removed Lines]",
          "408:    proto_tree_add_ipv6(ppcap_tree1, hf_ppcap_destination_ip_address2, tvb, offset, msg_len, (guint8*)&value);",
          "",
          "[Added Lines]",
          "408:    proto_tree_add_ipv6(ppcap_tree1, hf_ppcap_destination_ip_address2, tvb, offset, msg_len, &value);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ppp.c||epan/dissectors/packet-ppp.c": [
          "File: epan/dissectors/packet-ppp.c -> epan/dissectors/packet-ppp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3599:         tvb_memcpy(tvb, &ad->bytes[8], offset + 3, 8);",
          "3600:         SET_ADDRESS(&addr, AT_IPv6, 16, ad->bytes);",
          "3602:             \"%s: %s\", val_to_str_const(pdnaddtype, vsncp_pdntype_vals, \"Unknown\"),",
          "3603:             address_to_str(wmem_packet_scope(), &addr));",
          "3604:         break;",
          "",
          "[Removed Lines]",
          "3601:         proto_tree_add_ipv6_format(field_tree, hf_vsncp_pdn_ipv6, tvb, offset + 3, length - 3, ad->bytes,",
          "",
          "[Added Lines]",
          "3601:         proto_tree_add_ipv6_format(field_tree, hf_vsncp_pdn_ipv6, tvb, offset + 3, length - 3, ad,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3612:         tvb_memcpy(tvb, &ad->bytes[8], offset + 3, 8);",
          "3613:         SET_ADDRESS(&addr, AT_IPv6, 16, ad->bytes);",
          "3615:             \"%s: %s\", val_to_str_const(pdnaddtype, vsncp_pdntype_vals, \"Unknown\"),",
          "3616:             address_to_str(wmem_packet_scope(), &addr));",
          "3617:         proto_tree_add_ipv4_format(field_tree, hf_vsncp_pdn_ipv4, tvb, offset + 11, length - 11,",
          "",
          "[Removed Lines]",
          "3614:         proto_tree_add_ipv6_format(field_tree, hf_vsncp_pdn_ipv6, tvb, offset + 3, length - 3, ad->bytes,",
          "",
          "[Added Lines]",
          "3614:         proto_tree_add_ipv6_format(field_tree, hf_vsncp_pdn_ipv6, tvb, offset + 3, length - 3, ad,",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-rtpproxy.c||epan/dissectors/packet-rtpproxy.c": [
          "File: epan/dissectors/packet-rtpproxy.c -> epan/dissectors/packet-rtpproxy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "497:         if(ipv6){",
          "498:             if(str_to_ip6((char*)tvb_get_string_enc(wmem_packet_scope(), tvb, begin, offset - begin, ENC_ASCII), ipaddr))",
          "500:             else",
          "501:                 proto_tree_add_expert(rtpproxy_tree, pinfo, &ei_rtpproxy_bad_ipv6, tvb, begin, offset - begin);",
          "502:         }",
          "",
          "[Removed Lines]",
          "499:                 proto_tree_add_ipv6(rtpproxy_tree, hf_rtpproxy_notify_ipv6, tvb, begin, offset - begin, (const guint8 *)ipaddr);",
          "",
          "[Added Lines]",
          "499:                 proto_tree_add_ipv6(rtpproxy_tree, hf_rtpproxy_notify_ipv6, tvb, begin, offset - begin, (const struct e_in6_addr*)ipaddr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "515:         if (pinfo->src.type == AT_IPv4)",
          "516:             ti = proto_tree_add_ipv4(rtpproxy_tree, hf_rtpproxy_notify_ipv4, tvb, begin, 0, ((guint32*)(pinfo->src.data))[0]);",
          "517:         else",
          "519:         PROTO_ITEM_SET_GENERATED(ti);",
          "520:         proto_tree_add_uint(rtpproxy_tree, hf_rtpproxy_notify_port, tvb, begin, end - begin,",
          "521:             (guint16) g_ascii_strtoull((gchar*)tvb_get_string_enc(wmem_packet_scope(), tvb, begin, end - begin, ENC_ASCII), NULL, 10));",
          "",
          "[Removed Lines]",
          "518:             ti = proto_tree_add_ipv6(rtpproxy_tree, hf_rtpproxy_notify_ipv6, tvb, begin, 0, (const guint8 *)(pinfo->src.data));",
          "",
          "[Added Lines]",
          "518:             ti = proto_tree_add_ipv6(rtpproxy_tree, hf_rtpproxy_notify_ipv6, tvb, begin, 0, (const struct e_in6_addr *)(pinfo->src.data));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "705:                 }",
          "706:                 else{",
          "707:                     if(str_to_ip6((char*)tvb_get_string_enc(wmem_packet_scope(), tvb, offset, new_offset - offset, ENC_ASCII), ipaddr))",
          "709:                     else",
          "710:                         proto_tree_add_expert(rtpproxy_tree, pinfo, &ei_rtpproxy_bad_ipv6, tvb, offset, new_offset - offset);",
          "711:                 }",
          "",
          "[Removed Lines]",
          "708:                         proto_tree_add_ipv6(rtpproxy_tree, hf_rtpproxy_ipv6, tvb, offset, new_offset - offset, (const guint8 *)ipaddr);",
          "",
          "[Added Lines]",
          "708:                         proto_tree_add_ipv6(rtpproxy_tree, hf_rtpproxy_ipv6, tvb, offset, new_offset - offset, (const struct e_in6_addr *)ipaddr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "874:                     addr.type = AT_IPv6;",
          "875:                     addr.len  = 16;",
          "876:                     addr.data = wmem_memdup(wmem_packet_scope(), ipaddr, 16);",
          "878:                 }",
          "879:                 else",
          "880:                     proto_tree_add_expert(rtpproxy_tree, pinfo, &ei_rtpproxy_bad_ipv6, tvb, offset, tmp);",
          "",
          "[Removed Lines]",
          "877:                     proto_tree_add_ipv6(rtpproxy_tree, hf_rtpproxy_ipv6, tvb, offset, tmp, (const guint8 *)ipaddr);",
          "",
          "[Added Lines]",
          "877:                     proto_tree_add_ipv6(rtpproxy_tree, hf_rtpproxy_ipv6, tvb, offset, tmp, (const struct e_in6_addr *)ipaddr);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-sasp.c||epan/dissectors/packet-sasp.c": [
          "File: epan/dissectors/packet-sasp.c -> epan/dissectors/packet-sasp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "658:     lab_len = tvb_get_guint8(tvb, offset+23);",
          "660:     memdatacomp = proto_tree_add_ipv6_format(pay_load, hf_sasp_memdatacomp_ip,",
          "662:         \"Member Data Comp (%s)\", ip_str);",
          "664:     memdatacomp_tree = proto_item_add_subtree(memdatacomp, ett_sasp_memdatacomp);",
          "",
          "[Removed Lines]",
          "661:         tvb, offset, 24+lab_len, (guint8*)&ipv6_address,",
          "",
          "[Added Lines]",
          "661:         tvb, offset, 24+lab_len, &ipv6_address,",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-socks.c||epan/dissectors/packet-socks.c": [
          "File: epan/dissectors/packet-socks.c -> epan/dissectors/packet-socks.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1114:                 PROTO_ITEM_SET_GENERATED(ti);",
          "1115:             } else if (hash_info->dst_addr.type == AT_IPv6) {",
          "1116:                 ti = proto_tree_add_ipv6( socks_tree, hf_socks_ip6_dst, tvb,",
          "1118:                 PROTO_ITEM_SET_GENERATED(ti);",
          "1119:             }",
          "",
          "[Removed Lines]",
          "1117:                     offset, 0, (const guint8*)hash_info->dst_addr.data);",
          "",
          "[Added Lines]",
          "1117:                     offset, 0, (const struct e_in6_addr *)hash_info->dst_addr.data);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-stun.c||epan/dissectors/packet-stun.c": [
          "File: epan/dissectors/packet-stun.c -> epan/dissectors/packet-stun.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1090:                         IPv6[2] = IPv6[2] ^ g_htonl(transaction_id[1]);",
          "1091:                         IPv6[3] = IPv6[3] ^ g_htonl(transaction_id[2]);",
          "1092:                         ti = proto_tree_add_ipv6(att_tree, hf_stun_att_ipv6, tvb, offset+4, 16,",
          "1094:                         PROTO_ITEM_SET_GENERATED(ti);",
          "1095:                     }",
          "",
          "[Removed Lines]",
          "1093:                                                  (const guint8 *)IPv6);",
          "",
          "[Added Lines]",
          "1093:                                                  (const struct e_in6_addr *)IPv6);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-wccp.c||epan/dissectors/packet-wccp.c": [
          "File: epan/dissectors/packet-wccp.c -> epan/dissectors/packet-wccp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "681:         if (addr_index == 0) {",
          "683:         }",
          "",
          "[Removed Lines]",
          "682:           return proto_tree_add_ipv6(tree, hf_ipv6, tvb, offset, length, ipv6_zero.bytes);",
          "",
          "[Added Lines]",
          "682:           return proto_tree_add_ipv6(tree, hf_ipv6, tvb, offset, length, &ipv6_zero);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "692:         if (addr_table->table_ipv6 != NULL) {",
          "694:         }",
          "696:         return proto_tree_add_uint_format_value(tree, hf_index, tvb, offset, length, host_addr,",
          "",
          "[Removed Lines]",
          "693:           return proto_tree_add_ipv6(tree, hf_ipv6, tvb, offset, length, addr_table->table_ipv6[addr_index-1].bytes);",
          "",
          "[Added Lines]",
          "693:           return proto_tree_add_ipv6(tree, hf_ipv6, tvb, offset, length, &(addr_table->table_ipv6[addr_index-1]));",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c": [
          "File: epan/dissectors/packet-wsp.c -> epan/dissectors/packet-wsp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4015:             if (tree) {",
          "4016:                 proto_tree_add_ipv6 (addr_tree,",
          "4017:                     hf_address_ipv6_addr,",
          "4019:             }",
          "",
          "[Removed Lines]",
          "4018:                     tvb, offset, 16, (guint8 *)&address_ipv6);",
          "",
          "[Added Lines]",
          "4018:                     tvb, offset, 16, &address_ipv6);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-zebra.c||epan/dissectors/packet-zebra.c": [
          "File: epan/dissectors/packet-zebra.c -> epan/dissectors/packet-zebra.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "370:   tvb_memcpy(tvb, buffer6, offset,",
          "371:       MIN((unsigned) PSIZE(prefixlen), sizeof buffer6));",
          "372:   proto_tree_add_ipv6(tree, hf_zebra_prefix6,",
          "374:  }else {",
          "375:   prefix4 = 0;",
          "376:   tvb_memcpy(tvb, (guint8 *)&prefix4, offset,",
          "",
          "[Removed Lines]",
          "373:         tvb, offset, PSIZE(prefixlen), buffer6);",
          "",
          "[Added Lines]",
          "373:         tvb, offset, PSIZE(prefixlen), (struct e_in6_addr *)buffer6);",
          "",
          "---------------"
        ],
        "epan/proto.c||epan/proto.c": [
          "File: epan/proto.c -> epan/proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2923: proto_item *",
          "2924: proto_tree_add_ipv6(proto_tree *tree, int hfindex, tvbuff_t *tvb, gint start,",
          "2926: {",
          "2927:  proto_item   *pi;",
          "2928:  header_field_info *hfinfo;",
          "",
          "[Removed Lines]",
          "2925:       gint length, const guint8* value_ptr)",
          "",
          "[Added Lines]",
          "2925:       gint length, const struct e_in6_addr *value_ptr)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2932:  DISSECTOR_ASSERT_FIELD_TYPE(hfinfo, FT_IPv6);",
          "2934:  pi = proto_tree_add_pi(tree, hfinfo, tvb, start, &length);",
          "2937:  return pi;",
          "2938: }",
          "",
          "[Removed Lines]",
          "2935:  proto_tree_set_ipv6(PNODE_FINFO(pi), value_ptr);",
          "",
          "[Added Lines]",
          "2935:  proto_tree_set_ipv6(PNODE_FINFO(pi), value_ptr->bytes);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2940: proto_item *",
          "2941: proto_tree_add_ipv6_format_value(proto_tree *tree, int hfindex, tvbuff_t *tvb,",
          "2942:      gint start, gint length,",
          "2944:      const char *format, ...)",
          "2945: {",
          "2946:  proto_item   *pi;",
          "",
          "[Removed Lines]",
          "2943:      const guint8* value_ptr,",
          "",
          "[Added Lines]",
          "2943:      const struct e_in6_addr *value_ptr,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2959: proto_item *",
          "2960: proto_tree_add_ipv6_format(proto_tree *tree, int hfindex, tvbuff_t *tvb,",
          "2962:       const char *format, ...)",
          "2963: {",
          "2964:  proto_item   *pi;",
          "",
          "[Removed Lines]",
          "2961:       gint start, gint length, const guint8* value_ptr,",
          "",
          "[Added Lines]",
          "2961:       gint start, gint length,",
          "2962:       const struct e_in6_addr *value_ptr,",
          "",
          "---------------"
        ],
        "epan/proto.h||epan/proto.h": [
          "File: epan/proto.h -> epan/proto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1397: WS_DLL_PUBLIC proto_item *",
          "1398: proto_tree_add_ipv6(proto_tree *tree, int hfindex, tvbuff_t *tvb, gint start,",
          "1402:     the string for the value and with the field name being included",
          "",
          "[Removed Lines]",
          "1399:  gint length, const guint8* value_ptr);",
          "",
          "[Added Lines]",
          "1399:  gint length, const struct e_in6_addr *value_ptr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1413: WS_DLL_PUBLIC proto_item *",
          "1414: proto_tree_add_ipv6_format_value(proto_tree *tree, int hfindex, tvbuff_t *tvb,",
          "1416:  ...) G_GNUC_PRINTF(7,8);",
          "",
          "[Removed Lines]",
          "1415:  gint start, gint length, const guint8* value_ptr, const char *format,",
          "",
          "[Added Lines]",
          "1415:  gint start, gint length, const struct e_in6_addr *value_ptr, const char *format,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1429: WS_DLL_PUBLIC proto_item *",
          "1430: proto_tree_add_ipv6_format(proto_tree *tree, int hfindex, tvbuff_t *tvb, gint start,",
          "1434:  @param tree the tree to append this item to",
          "",
          "[Removed Lines]",
          "1431:  gint length, const guint8* value_ptr, const char *format, ...) G_GNUC_PRINTF(7,8);",
          "",
          "[Added Lines]",
          "1431:  gint length, const struct e_in6_addr *value_ptr, const char *format, ...) G_GNUC_PRINTF(7,8);",
          "",
          "---------------"
        ],
        "plugins/wimaxasncp/packet-wimaxasncp.c||plugins/wimaxasncp/packet-wimaxasncp.c": [
          "File: plugins/wimaxasncp/packet-wimaxasncp.c -> plugins/wimaxasncp/packet-wimaxasncp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "633:     proto_tree_add_ipv6_format(",
          "634:         tree, hf_value,",
          "636:         \"Value: %s\", addr_res);",
          "638:     proto_item_append_text(",
          "",
          "[Removed Lines]",
          "635:         tvb, offset, 16, (guint8 *)&ip,",
          "",
          "[Added Lines]",
          "635:         tvb, offset, 16, &ip,",
          "",
          "---------------"
        ]
      }
    }
  ]
}