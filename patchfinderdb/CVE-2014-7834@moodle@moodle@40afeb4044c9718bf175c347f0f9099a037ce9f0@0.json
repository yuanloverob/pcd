{
  "cve_id": "CVE-2014-7834",
  "cve_desc": "mod/forum/externallib.php in Moodle 2.6.x before 2.6.6 and 2.7.x before 2.7.3 does not verify group permissions, which allows remote authenticated users to access a forum via the forum_get_discussions web service.",
  "repo": "moodle/moodle",
  "patch_hash": "40afeb4044c9718bf175c347f0f9099a037ce9f0",
  "patch_info": {
    "commit_hash": "40afeb4044c9718bf175c347f0f9099a037ce9f0",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/40afeb4044c9718bf175c347f0f9099a037ce9f0",
    "files": [
      "mod/forum/externallib.php",
      "mod/forum/tests/externallib_test.php"
    ],
    "message": "MDL-45303 Web Services: forum_discussions not checking groups",
    "before_after_code_files": [
      "mod/forum/externallib.php||mod/forum/externallib.php",
      "mod/forum/tests/externallib_test.php||mod/forum/tests/externallib_test.php"
    ]
  },
  "patch_diff": {
    "mod/forum/externallib.php||mod/forum/externallib.php": [
      "File: mod/forum/externallib.php -> mod/forum/externallib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "209:         $arrdiscussions = array();",
      "215:         $arrusers = array();",
      "",
      "[Removed Lines]",
      "211:         $arrcourseschecked = array();",
      "213:         $arrcoursesforuminfo = array();",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "218:         foreach ($forumids as $id) {",
      "220:             $forum = $DB->get_record('forum', array('id' => $id), '*', MUST_EXIST);",
      "244:             $modcontext = context_module::instance($cm->id);",
      "246:             require_capability('mod/forum:viewdiscussion', $modcontext);",
      "254:                 }",
      "255:             }",
      "261:                 foreach ($discussions as $discussion) {",
      "266:                     }",
      "267:                     $usernamefields = user_picture::fields();",
      "269:                     if (empty($arrusers[$discussion->userid])) {",
      "",
      "[Removed Lines]",
      "222:             if (!in_array($forum->course, $arrcourseschecked)) {",
      "224:                 self::validate_context(context_course::instance($forum->course));",
      "226:                 $arrcourseschecked[] = $forum->course;",
      "227:             }",
      "229:             if (!isset($arrcoursesforuminfo[$forum->course])) {",
      "230:                 $modinfo = get_fast_modinfo($forum->course);",
      "231:                 $arrcoursesforuminfo[$forum->course] = $modinfo->get_instances_of('forum');",
      "232:             }",
      "234:             if (empty($arrcoursesforuminfo[$forum->course][$forum->id])) {",
      "235:                 throw new moodle_exception('invalidmodule', 'error');",
      "236:             }",
      "238:             $cm = $arrcoursesforuminfo[$forum->course][$forum->id];",
      "240:             if (!$cm->uservisible) {",
      "241:                 throw new moodle_exception('nopermissiontoshow', 'error');",
      "242:             }",
      "248:             $canviewfullname = has_capability('moodle/site:viewfullnames', $modcontext);",
      "250:             $unreads = array();",
      "251:             if ($cantrack = forum_tp_can_track_forums($forum)) {",
      "252:                 if ($forumtracked = forum_tp_is_tracked($forum)) {",
      "253:                     $unreads = forum_get_discussions_unread($cm);",
      "257:             $replies = forum_count_discussion_replies($id);",
      "259:             $order = 'timemodified DESC';",
      "260:             if ($discussions = $DB->get_records('forum_discussions', array('forum' => $id), $order, '*', $limitfrom, $limitnum)) {",
      "264:                     if ($forum->type == 'qanda' && !forum_user_has_posted($discussion->forum, $discussion->id, $USER->id)) {",
      "265:                         require_capability('mod/forum:viewqandawithoutposting', $modcontext);",
      "",
      "[Added Lines]",
      "217:             $course = get_course($forum->course);",
      "219:             $modinfo = get_fast_modinfo($course);",
      "220:             $forums  = $modinfo->get_instances_of('forum');",
      "221:             $cm = $forums[$forum->id];",
      "227:             self::validate_context($modcontext);",
      "232:             $params = array();",
      "234:             $groupselect = \"\";",
      "235:             $groupmode = groups_get_activity_groupmode($cm, $course);",
      "237:             if ($groupmode and $groupmode != VISIBLEGROUPS and !has_capability('moodle/site:accessallgroups', $modcontext)) {",
      "239:                 $usergroups = groups_get_user_groups($course->id);",
      "240:                 if (!empty($usergroups['0'])) {",
      "241:                     list($sql, $params) = $DB->get_in_or_equal($usergroups['0']);",
      "242:                     $groupselect = \"AND (groupid $sql OR groupid = -1)\";",
      "245:             array_unshift($params, $id);",
      "246:             $select = \"forum = ? $groupselect\";",
      "248:             if ($discussions = $DB->get_records_select('forum_discussions', $select, $params, 'timemodified DESC', '*',",
      "249:                                                             $limitfrom, $limitnum)) {",
      "252:                 $canviewfullname = has_capability('moodle/site:viewfullnames', $modcontext);",
      "254:                 $unreads = array();",
      "255:                 if ($cantrack = forum_tp_can_track_forums($forum)) {",
      "256:                     if ($forumtracked = forum_tp_is_tracked($forum)) {",
      "257:                         $unreads = forum_get_discussions_unread($cm);",
      "258:                     }",
      "259:                 }",
      "261:                 $replies = forum_count_discussion_replies($id);",
      "265:                     if (!forum_user_can_see_discussion($forum, $discussion, $modcontext)) {",
      "266:                         continue;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "301:                     if (!empty($replies[$discussion->id])) {",
      "302:                          $return->numreplies = (int) $replies[$discussion->id]->replies;",
      "303:                          $return->lastpost = (int) $replies[$discussion->id]->lastpostid;",
      "305:                         $return->numreplies = 0;",
      "306:                         $return->lastpost = (int) $discussion->firstpost;",
      "309:                     $lastpost = $DB->get_record('forum_posts', array('id' => $return->lastpost), '*', MUST_EXIST);",
      "310:                     if (empty($arrusers[$lastpost->userid])) {",
      "",
      "[Removed Lines]",
      "304:                      } else { // No replies, so the last post will be the first post.",
      "307:                      }",
      "",
      "[Added Lines]",
      "306:                     } else { // No replies, so the last post will be the first post.",
      "309:                     }",
      "",
      "---------------"
    ],
    "mod/forum/tests/externallib_test.php||mod/forum/tests/externallib_test.php": [
      "File: mod/forum/tests/externallib_test.php -> mod/forum/tests/externallib_test.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "205:         $record->trackingtype = FORUM_TRACKING_FORCED;",
      "206:         $forum2 = self::getDataGenerator()->create_module('forum', $record);",
      "214:         $record = new stdClass();",
      "215:         $record->course = $course1->id;",
      "",
      "[Removed Lines]",
      "209:         $record = new stdClass();",
      "210:         $record->course = $course2->id;",
      "211:         $forum3 = self::getDataGenerator()->create_module('forum', $record);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "223:         $record->forum = $forum2->id;",
      "224:         $discussion2 = self::getDataGenerator()->get_plugin_generator('mod_forum')->create_discussion($record);",
      "233:         $record = new stdClass();",
      "234:         $record->discussion = $discussion1->id;",
      "",
      "[Removed Lines]",
      "226:         $record = new stdClass();",
      "227:         $record->course = $course2->id;",
      "228:         $record->userid = $user2->id;",
      "229:         $record->forum = $forum3->id;",
      "230:         $discussion3 = self::getDataGenerator()->get_plugin_generator('mod_forum')->create_discussion($record);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "255:         $discussion2reply2 = self::getDataGenerator()->get_plugin_generator('mod_forum')->create_post($record);",
      "266:         $this->assertEquals(7, $DB->count_records_select('forum_posts', 'discussion = :discussion1 OR discussion = :discussion2',",
      "",
      "[Removed Lines]",
      "258:         $this->assertEquals(3, $DB->count_records_select('forum', 'id = :forum1 OR id = :forum2 OR id = :forum3',",
      "259:                 array('forum1' => $forum1->id, 'forum2' => $forum2->id, 'forum3' => $forum3->id)));",
      "262:         $this->assertEquals(3, $DB->count_records_select('forum_discussions', 'forum = :forum1 OR forum = :forum2",
      "263:                 OR forum = :forum3', array('forum1' => $forum1->id, 'forum2' => $forum2->id, 'forum3' => $forum3->id)));",
      "",
      "[Added Lines]",
      "247:         $this->assertEquals(2, $DB->count_records_select('forum', 'id = :forum1 OR id = :forum2',",
      "248:                 array('forum1' => $forum1->id, 'forum2' => $forum2->id)));",
      "251:         $this->assertEquals(2, $DB->count_records_select('forum_discussions', 'forum = :forum1 OR forum = :forum2',",
      "252:                                                             array('forum1' => $forum1->id, 'forum2' => $forum2->id)));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "289:         $newrole = create_role('Role 2', 'role2', 'Role 2 description');",
      "290:         $this->assignUserCapability('mod/forum:viewdiscussion', $context->id, $newrole);",
      "298:         $expecteddiscussions = array();",
      "299:         $expecteddiscussions[$discussion1->id] = array(",
      "",
      "[Removed Lines]",
      "293:         $cm = get_coursemodule_from_id('forum', $forum3->cmid, 0, false, MUST_EXIST);",
      "294:         $context = context_module::instance($cm->id);",
      "295:         $this->assignUserCapability('mod/forum:viewdiscussion', $context->id, $newrole);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "350:                 'lastuserpicture' => $user3->picture,",
      "351:                 'lastuseremail' => $user3->email",
      "352:             );",
      "383:         external_api::clean_returnvalue(mod_forum_external::get_forum_discussions_returns(), $discussions);",
      "384:         $this->assertEquals($expecteddiscussions, $discussions);",
      "387:         $DB->delete_records('forum_posts', array('id' => $discussion2reply1->id));",
      "396:         $this->unassignUserCapability('mod/forum:viewdiscussion', null, null, $course1->id);",
      "",
      "[Removed Lines]",
      "353:             $expecteddiscussions[$discussion3->id] = array(",
      "354:                 'id' => $discussion3->id,",
      "355:                 'course' => $discussion3->course,",
      "356:                 'forum' => $discussion3->forum,",
      "357:                 'name' => $discussion3->name,",
      "358:                 'firstpost' => $discussion3->firstpost,",
      "359:                 'userid' => $discussion3->userid,",
      "360:                 'groupid' => $discussion3->groupid,",
      "361:                 'assessed' => $discussion3->assessed,",
      "362:                 'timemodified' => $discussion3->timemodified,",
      "363:                 'usermodified' => $discussion3->usermodified,",
      "364:                 'timestart' => $discussion3->timestart,",
      "365:                 'timeend' => $discussion3->timeend,",
      "366:                 'firstuserfullname' => fullname($user2),",
      "367:                 'firstuserimagealt' => $user2->imagealt,",
      "368:                 'firstuserpicture' => $user2->picture,",
      "369:                 'firstuseremail' => $user2->email,",
      "370:                 'subject' => $discussion3->name,",
      "371:                 'numreplies' => 0,",
      "372:                 'numunread' => 1,",
      "373:                 'lastpost' => $discussion3->firstpost,",
      "374:                 'lastuserid' => $user2->id,",
      "375:                 'lastuserfullname' => fullname($user2),",
      "376:                 'lastuserimagealt' => $user2->imagealt,",
      "377:                 'lastuserpicture' => $user2->picture,",
      "378:                 'lastuseremail' => $user2->email",
      "379:             );",
      "382:         $discussions = mod_forum_external::get_forum_discussions(array($forum1->id, $forum2->id, $forum3->id));",
      "388:         try {",
      "389:             mod_forum_external::get_forum_discussions(array($forum2->id));",
      "390:             $this->fail('Exception expected due to attempting to access qanda forum without posting.');",
      "391:         } catch (moodle_exception $e) {",
      "392:             $this->assertEquals('nopermissions', $e->errorcode);",
      "393:         }",
      "",
      "[Added Lines]",
      "339:         $discussions = mod_forum_external::get_forum_discussions(array($forum1->id, $forum2->id));",
      "345:         $this->assertDebuggingCalled();",
      "349:         $discussions = mod_forum_external::get_forum_discussions(array($forum2->id));",
      "350:         $discussions = external_api::clean_returnvalue(mod_forum_external::get_forum_discussions_returns(), $discussions);",
      "351:         $this->assertEquals(0, count($discussions));",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "400:         } catch (moodle_exception $e) {",
      "401:             $this->assertEquals('nopermissions', $e->errorcode);",
      "402:         }",
      "405:         $enrol->unenrol_user($instance2, $user1->id);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "361:         $this->assertDebuggingCalled();",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "411:         } catch (moodle_exception $e) {",
      "412:             $this->assertEquals('requireloginerror', $e->errorcode);",
      "413:         }",
      "414:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "373:         $this->assertDebuggingCalled();",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "54f5401149fa55993c4a14add5c198b231e6bdcf",
      "candidate_info": {
        "commit_hash": "54f5401149fa55993c4a14add5c198b231e6bdcf",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/54f5401149fa55993c4a14add5c198b231e6bdcf",
        "files": [
          "mod/forum/externallib.php",
          "mod/forum/lib.php",
          "mod/forum/tests/externallib_test.php"
        ],
        "message": "MDL-50489 forum: Handle qanda forums in get_forum_discussions_paginated\n\nI removed the last qanda checks in forum_user_can_see_discussion because they are not necessary and\nthey make the external function fail.\n\nA user in a qanda forum can always see a discussion (he needs to see the discussion to be able to reply).\nWhat he cannot see are the other user posts unless he has replied to the discussion once and the edition period\n(usually 30 minutes) has ended.\n\nNote also that forum_user_can_see_discussion was originally only used when displaying forums in blog format\nin order to display the button show more or not, this is the reason this wasn't detected before.",
        "before_after_code_files": [
          "mod/forum/externallib.php||mod/forum/externallib.php",
          "mod/forum/lib.php||mod/forum/lib.php",
          "mod/forum/tests/externallib_test.php||mod/forum/tests/externallib_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mod/forum/externallib.php||mod/forum/externallib.php",
            "mod/forum/tests/externallib_test.php||mod/forum/tests/externallib_test.php"
          ],
          "candidate": [
            "mod/forum/externallib.php||mod/forum/externallib.php",
            "mod/forum/tests/externallib_test.php||mod/forum/tests/externallib_test.php"
          ]
        }
      },
      "candidate_diff": {
        "mod/forum/externallib.php||mod/forum/externallib.php": [
          "File: mod/forum/externallib.php -> mod/forum/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "625:         require_once($CFG->dirroot . \"/mod/forum/lib.php\");",
          "627:         $warnings = array();",
          "629:         $params = self::validate_parameters(self::get_forum_discussions_paginated_parameters(),",
          "630:             array(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "628:         $discussions = array();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "668:         require_capability('mod/forum:viewdiscussion', $modcontext, null, true, 'noviewdiscussionspermission', 'forum');",
          "670:         $sort = 'd.' . $sortby . ' ' . $sortdirection;",
          "674:             $canviewfullname = has_capability('moodle/site:viewfullnames', $modcontext);",
          "",
          "[Removed Lines]",
          "671:         $discussions = forum_get_discussions($cm, $sort, true, -1, -1, true, $page, $perpage);",
          "673:         if ($discussions) {",
          "",
          "[Added Lines]",
          "672:         $alldiscussions = forum_get_discussions($cm, $sort, true, -1, -1, true, $page, $perpage);",
          "674:         if ($alldiscussions) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "684:             $replies = forum_count_discussion_replies($forumid, $sort, -1, $page, $perpage);",
          "689:                     $warning = array();",
          "691:                     $warning['item'] = 'post';",
          "",
          "[Removed Lines]",
          "686:             foreach ($discussions as $did => $discussion) {",
          "688:                 if (!forum_user_can_see_discussion($forum, $discussion, $modcontext)) {",
          "",
          "[Added Lines]",
          "687:             foreach ($alldiscussions as $discussion) {",
          "691:                 $discussionrec = clone $discussion;",
          "692:                 $discussionrec->id = $discussion->discussion;",
          "693:                 if (!forum_user_can_see_discussion($forum, $discussionrec, $modcontext)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "762:                     }",
          "763:                 }",
          "766:             }",
          "767:         }",
          "",
          "[Removed Lines]",
          "765:                 $discussions[$did] = (array) $discussion;",
          "",
          "[Added Lines]",
          "770:                 $discussions[] = $discussion;",
          "",
          "---------------"
        ],
        "mod/forum/lib.php||mod/forum/lib.php": [
          "File: mod/forum/lib.php -> mod/forum/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "5134:         return false;",
          "5135:     }",
          "5142:     return true;",
          "5143: }",
          "",
          "[Removed Lines]",
          "5137:     if ($forum->type == 'qanda' &&",
          "5138:             !forum_user_has_posted($forum->id, $discussion->id, $user->id) &&",
          "5139:             !has_capability('mod/forum:viewqandawithoutposting', $context)) {",
          "5140:         return false;",
          "5141:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "mod/forum/tests/externallib_test.php||mod/forum/tests/externallib_test.php": [
          "File: mod/forum/tests/externallib_test.php -> mod/forum/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "343:         $this->assertDebuggingCalled();",
          "346:         $DB->delete_records('forum_posts', array('id' => $discussion2reply1->id));",
          "347:         $discussions = mod_forum_external::get_forum_discussions(array($forum2->id));",
          "348:         $discussions = external_api::clean_returnvalue(mod_forum_external::get_forum_discussions_returns(), $discussions);",
          "352:         $this->unassignUserCapability('mod/forum:viewdiscussion', null, null, $course1->id);",
          "",
          "[Removed Lines]",
          "349:         $this->assertEquals(0, count($discussions));",
          "",
          "[Added Lines]",
          "349:         $this->assertEquals(1, count($discussions));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "652:             $this->assertEquals('requireloginerror', $e->errorcode);",
          "653:         }",
          "654:     }",
          "655: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "659:     public function test_mod_forum_get_forum_discussions_paginated_qanda() {",
          "661:         $this->resetAfterTest(true);",
          "664:         $course = self::getDataGenerator()->create_course();",
          "666:         $user1 = self::getDataGenerator()->create_user();",
          "667:         $user2 = self::getDataGenerator()->create_user();",
          "670:         $record = new stdClass();",
          "671:         $record->course = $course->id;",
          "672:         $record->type = 'qanda';",
          "673:         $forum = self::getDataGenerator()->create_module('forum', $record);",
          "676:         $discussionrecord = new stdClass();",
          "677:         $discussionrecord->course = $course->id;",
          "678:         $discussionrecord->userid = $user2->id;",
          "679:         $discussionrecord->forum = $forum->id;",
          "680:         $discussion = self::getDataGenerator()->get_plugin_generator('mod_forum')->create_discussion($discussionrecord);",
          "682:         self::setAdminUser();",
          "683:         $discussions = mod_forum_external::get_forum_discussions_paginated($forum->id);",
          "684:         $discussions = external_api::clean_returnvalue(mod_forum_external::get_forum_discussions_paginated_returns(), $discussions);",
          "686:         $this->assertCount(1, $discussions['discussions']);",
          "687:         $this->assertCount(0, $discussions['warnings']);",
          "689:         self::setUser($user1);",
          "690:         $this->getDataGenerator()->enrol_user($user1->id, $course->id);",
          "692:         $discussions = mod_forum_external::get_forum_discussions_paginated($forum->id);",
          "693:         $discussions = external_api::clean_returnvalue(mod_forum_external::get_forum_discussions_paginated_returns(), $discussions);",
          "695:         $this->assertCount(1, $discussions['discussions']);",
          "696:         $this->assertCount(0, $discussions['warnings']);",
          "698:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1fee2cd4e926678085ced049752999f2bbf57d02",
      "candidate_info": {
        "commit_hash": "1fee2cd4e926678085ced049752999f2bbf57d02",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/1fee2cd4e926678085ced049752999f2bbf57d02",
        "files": [
          "mod/forum/externallib.php"
        ],
        "message": "MDL-44408 Add \"pagination\" to WebService get_forum_discussions",
        "before_after_code_files": [
          "mod/forum/externallib.php||mod/forum/externallib.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mod/forum/externallib.php||mod/forum/externallib.php"
          ],
          "candidate": [
            "mod/forum/externallib.php||mod/forum/externallib.php"
          ]
        }
      },
      "candidate_diff": {
        "mod/forum/externallib.php||mod/forum/externallib.php": [
          "File: mod/forum/externallib.php -> mod/forum/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "161:             array(",
          "162:                 'forumids' => new external_multiple_structure(new external_value(PARAM_INT, 'forum ID',",
          "163:                         '', VALUE_REQUIRED, '', NULL_NOT_ALLOWED), 'Array of Forum IDs', VALUE_REQUIRED),",
          "164:             )",
          "165:         );",
          "166:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164:                 'limitfrom' => new external_value(PARAM_INT, 'limit from', VALUE_OPTIONAL, 0),",
          "165:                 'limitnum' => new external_value(PARAM_INT, 'limit number', VALUE_OPTIONAL, 0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "177:         global $CFG, $DB, $USER;",
          "179:         require_once($CFG->dirroot . \"/mod/forum/lib.php\");",
          "186:         $arrdiscussions = array();",
          "",
          "[Removed Lines]",
          "176:     public static function get_forum_discussions($forumids) {",
          "182:         $params = self::validate_parameters(self::get_forum_discussions_parameters(), array('forumids' => $forumids));",
          "183:         $forumids = $params['forumids'];",
          "",
          "[Added Lines]",
          "181:     public static function get_forum_discussions($forumids, $limitfrom = 0, $limitnum = 0) {",
          "187:         $params = self::validate_parameters(self::get_forum_discussions_parameters(),",
          "188:             array(",
          "189:                 'forumids'  => $forumids,",
          "190:                 'limitfrom' => $limitfrom,",
          "191:                 'limitnum'  => $limitnum,",
          "192:             ));",
          "193:         $forumids  = $params['forumids'];",
          "194:         $limitfrom = $params['limitfrom'];",
          "195:         $limitnum  = $params['limitnum'];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "234:             $replies = forum_count_discussion_replies($id);",
          "237:                 foreach ($discussions as $discussion) {",
          "",
          "[Removed Lines]",
          "236:             if ($discussions = $DB->get_records('forum_discussions', array('forum' => $id))) {",
          "",
          "[Added Lines]",
          "248:             if ($discussions = $DB->get_records('forum_discussions', array('forum' => $id), '', '*', $limitfrom, $limitnum)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "039c81f0985e08ad69324d462545d8117089a668",
      "candidate_info": {
        "commit_hash": "039c81f0985e08ad69324d462545d8117089a668",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/039c81f0985e08ad69324d462545d8117089a668",
        "files": [
          "mod/forum/externallib.php",
          "mod/forum/lib.php",
          "mod/forum/tests/externallib_test.php"
        ],
        "message": "MDL-50489 forum: Handle qanda forums in get_forum_discussions_paginated\n\nI removed the last qanda checks in forum_user_can_see_discussion because they are not necessary and\nthey make the external function fail.\n\nA user in a qanda forum can always see a discussion (he needs to see the discussion to be able to reply).\nWhat he cannot see are the other user posts unless he has replied to the discussion once and the edition period\n(usually 30 minutes) has ended.\n\nNote also that forum_user_can_see_discussion was originally only used when displaying forums in blog format\nin order to display the button show more or not, this is the reason this wasn't detected before.",
        "before_after_code_files": [
          "mod/forum/externallib.php||mod/forum/externallib.php",
          "mod/forum/lib.php||mod/forum/lib.php",
          "mod/forum/tests/externallib_test.php||mod/forum/tests/externallib_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mod/forum/externallib.php||mod/forum/externallib.php",
            "mod/forum/tests/externallib_test.php||mod/forum/tests/externallib_test.php"
          ],
          "candidate": [
            "mod/forum/externallib.php||mod/forum/externallib.php",
            "mod/forum/tests/externallib_test.php||mod/forum/tests/externallib_test.php"
          ]
        }
      },
      "candidate_diff": {
        "mod/forum/externallib.php||mod/forum/externallib.php": [
          "File: mod/forum/externallib.php -> mod/forum/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "625:         require_once($CFG->dirroot . \"/mod/forum/lib.php\");",
          "627:         $warnings = array();",
          "629:         $params = self::validate_parameters(self::get_forum_discussions_paginated_parameters(),",
          "630:             array(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "628:         $discussions = array();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "668:         require_capability('mod/forum:viewdiscussion', $modcontext, null, true, 'noviewdiscussionspermission', 'forum');",
          "670:         $sort = 'd.' . $sortby . ' ' . $sortdirection;",
          "674:             $canviewfullname = has_capability('moodle/site:viewfullnames', $modcontext);",
          "",
          "[Removed Lines]",
          "671:         $discussions = forum_get_discussions($cm, $sort, true, -1, -1, true, $page, $perpage);",
          "673:         if ($discussions) {",
          "",
          "[Added Lines]",
          "672:         $alldiscussions = forum_get_discussions($cm, $sort, true, -1, -1, true, $page, $perpage);",
          "674:         if ($alldiscussions) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "684:             $replies = forum_count_discussion_replies($forumid, $sort, -1, $page, $perpage);",
          "689:                     $warning = array();",
          "691:                     $warning['item'] = 'post';",
          "",
          "[Removed Lines]",
          "686:             foreach ($discussions as $did => $discussion) {",
          "688:                 if (!forum_user_can_see_discussion($forum, $discussion, $modcontext)) {",
          "",
          "[Added Lines]",
          "687:             foreach ($alldiscussions as $discussion) {",
          "691:                 $discussionrec = clone $discussion;",
          "692:                 $discussionrec->id = $discussion->discussion;",
          "693:                 if (!forum_user_can_see_discussion($forum, $discussionrec, $modcontext)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "762:                     }",
          "763:                 }",
          "766:             }",
          "767:         }",
          "",
          "[Removed Lines]",
          "765:                 $discussions[$did] = (array) $discussion;",
          "",
          "[Added Lines]",
          "770:                 $discussions[] = $discussion;",
          "",
          "---------------"
        ],
        "mod/forum/lib.php||mod/forum/lib.php": [
          "File: mod/forum/lib.php -> mod/forum/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "5134:         return false;",
          "5135:     }",
          "5142:     return true;",
          "5143: }",
          "",
          "[Removed Lines]",
          "5137:     if ($forum->type == 'qanda' &&",
          "5138:             !forum_user_has_posted($forum->id, $discussion->id, $user->id) &&",
          "5139:             !has_capability('mod/forum:viewqandawithoutposting', $context)) {",
          "5140:         return false;",
          "5141:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "mod/forum/tests/externallib_test.php||mod/forum/tests/externallib_test.php": [
          "File: mod/forum/tests/externallib_test.php -> mod/forum/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "343:         $this->assertDebuggingCalled();",
          "346:         $DB->delete_records('forum_posts', array('id' => $discussion2reply1->id));",
          "347:         $discussions = mod_forum_external::get_forum_discussions(array($forum2->id));",
          "348:         $discussions = external_api::clean_returnvalue(mod_forum_external::get_forum_discussions_returns(), $discussions);",
          "352:         $this->unassignUserCapability('mod/forum:viewdiscussion', null, null, $course1->id);",
          "",
          "[Removed Lines]",
          "349:         $this->assertEquals(0, count($discussions));",
          "",
          "[Added Lines]",
          "349:         $this->assertEquals(1, count($discussions));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "652:             $this->assertEquals('requireloginerror', $e->errorcode);",
          "653:         }",
          "654:     }",
          "655: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "659:     public function test_mod_forum_get_forum_discussions_paginated_qanda() {",
          "661:         $this->resetAfterTest(true);",
          "664:         $course = self::getDataGenerator()->create_course();",
          "666:         $user1 = self::getDataGenerator()->create_user();",
          "667:         $user2 = self::getDataGenerator()->create_user();",
          "670:         $record = new stdClass();",
          "671:         $record->course = $course->id;",
          "672:         $record->type = 'qanda';",
          "673:         $forum = self::getDataGenerator()->create_module('forum', $record);",
          "676:         $discussionrecord = new stdClass();",
          "677:         $discussionrecord->course = $course->id;",
          "678:         $discussionrecord->userid = $user2->id;",
          "679:         $discussionrecord->forum = $forum->id;",
          "680:         $discussion = self::getDataGenerator()->get_plugin_generator('mod_forum')->create_discussion($discussionrecord);",
          "682:         self::setAdminUser();",
          "683:         $discussions = mod_forum_external::get_forum_discussions_paginated($forum->id);",
          "684:         $discussions = external_api::clean_returnvalue(mod_forum_external::get_forum_discussions_paginated_returns(), $discussions);",
          "686:         $this->assertCount(1, $discussions['discussions']);",
          "687:         $this->assertCount(0, $discussions['warnings']);",
          "689:         self::setUser($user1);",
          "690:         $this->getDataGenerator()->enrol_user($user1->id, $course->id);",
          "692:         $discussions = mod_forum_external::get_forum_discussions_paginated($forum->id);",
          "693:         $discussions = external_api::clean_returnvalue(mod_forum_external::get_forum_discussions_paginated_returns(), $discussions);",
          "695:         $this->assertCount(1, $discussions['discussions']);",
          "696:         $this->assertCount(0, $discussions['warnings']);",
          "698:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4595c79b74e69f1906ebc6567c92d9aad786c738",
      "candidate_info": {
        "commit_hash": "4595c79b74e69f1906ebc6567c92d9aad786c738",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/4595c79b74e69f1906ebc6567c92d9aad786c738",
        "files": [
          "mod/forum/externallib.php"
        ],
        "message": "MDL-44408 Adding missing order (so we start looking for newest discussions)",
        "before_after_code_files": [
          "mod/forum/externallib.php||mod/forum/externallib.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mod/forum/externallib.php||mod/forum/externallib.php"
          ],
          "candidate": [
            "mod/forum/externallib.php||mod/forum/externallib.php"
          ]
        }
      },
      "candidate_diff": {
        "mod/forum/externallib.php||mod/forum/externallib.php": [
          "File: mod/forum/externallib.php -> mod/forum/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "246:             $replies = forum_count_discussion_replies($id);",
          "249:                 foreach ($discussions as $discussion) {",
          "",
          "[Removed Lines]",
          "248:             if ($discussions = $DB->get_records('forum_discussions', array('forum' => $id), '', '*', $limitfrom, $limitnum)) {",
          "",
          "[Added Lines]",
          "248:             $order = 'timemodified DESC';",
          "249:             if ($discussions = $DB->get_records('forum_discussions', array('forum' => $id), $order, '*', $limitfrom, $limitnum)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e2ede4262f2bd8304fb359fd8b1124813712f180",
      "candidate_info": {
        "commit_hash": "e2ede4262f2bd8304fb359fd8b1124813712f180",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/e2ede4262f2bd8304fb359fd8b1124813712f180",
        "files": [
          "lib/db/services.php",
          "mod/forum/db/services.php",
          "mod/forum/externallib.php",
          "mod/forum/tests/externallib_test.php",
          "mod/forum/tests/generator/lib.php"
        ],
        "message": "MDL-30106 forum: New web service mod_forum_get_forum_discussion_posts",
        "before_after_code_files": [
          "lib/db/services.php||lib/db/services.php",
          "mod/forum/db/services.php||mod/forum/db/services.php",
          "mod/forum/externallib.php||mod/forum/externallib.php",
          "mod/forum/tests/externallib_test.php||mod/forum/tests/externallib_test.php",
          "mod/forum/tests/generator/lib.php||mod/forum/tests/generator/lib.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mod/forum/externallib.php||mod/forum/externallib.php",
            "mod/forum/tests/externallib_test.php||mod/forum/tests/externallib_test.php"
          ],
          "candidate": [
            "mod/forum/externallib.php||mod/forum/externallib.php",
            "mod/forum/tests/externallib_test.php||mod/forum/tests/externallib_test.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "947:             'message_airnotifier_is_system_configured',",
          "948:             'message_airnotifier_are_notification_preferences_configured',",
          "949:             'core_grades_get_grades',",
          "951:         'enabled' => 0,",
          "952:         'restrictedusers' => 0,",
          "953:         'shortname' => MOODLE_OFFICIAL_MOBILE_SERVICE,",
          "",
          "[Removed Lines]",
          "950:             'core_grades_update_grades'),",
          "",
          "[Added Lines]",
          "950:             'core_grades_update_grades',",
          "951:             'mod_forum_get_forums_by_courses',",
          "952:             'mod_forum_get_forum_discussions',",
          "953:             'mod_forum_get_forum_discussion_posts'),",
          "",
          "---------------"
        ],
        "mod/forum/db/services.php||mod/forum/db/services.php": [
          "File: mod/forum/db/services.php -> mod/forum/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:         'description' => 'Returns a list of forum discussions contained within a given set of forums.',",
          "44:         'type' => 'read',",
          "45:         'capabilities' => 'mod/forum:viewdiscussion, mod/forum:viewqandawithoutposting'",
          "46:     )",
          "47: );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:     ),",
          "48:     'mod_forum_get_forum_discussion_posts' => array(",
          "49:         'classname' => 'mod_forum_external',",
          "50:         'methodname' => 'get_forum_discussion_posts',",
          "51:         'classpath' => 'mod/forum/externallib.php',",
          "52:         'description' => 'Returns a list of forum posts for a discussion.',",
          "53:         'type' => 'read',",
          "54:         'capabilities' => 'mod/forum:viewdiscussion, mod/forum:viewqandawithoutposting'",
          "",
          "---------------"
        ],
        "mod/forum/externallib.php||mod/forum/externallib.php": [
          "File: mod/forum/externallib.php -> mod/forum/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "354:             )",
          "355:         );",
          "356:     }",
          "357: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "364:     public static function get_forum_discussion_posts_parameters() {",
          "365:         return new external_function_parameters (",
          "366:             array(",
          "367:                 'discussionid' => new external_value(PARAM_INT, 'discussion ID', VALUE_REQUIRED),",
          "368:                 'sortby' => new external_value(PARAM_ALPHA,",
          "369:                     'sort by this element: id, created or modified', VALUE_DEFAULT, 'created'),",
          "370:                 'sortdirection' => new external_value(PARAM_ALPHA, 'sort direction: ASC or DESC', VALUE_DEFAULT, 'DESC')",
          "371:             )",
          "372:         );",
          "373:     }",
          "385:     public static function get_forum_discussion_posts($discussionid, $sortby = \"id\", $sortdirection = \"ASC\") {",
          "386:         global $CFG, $DB, $USER;",
          "388:         $warnings = array();",
          "391:         $params = self::validate_parameters(self::get_forum_discussion_posts_parameters(),",
          "392:             array(",
          "393:                 'discussionid' => $discussionid,",
          "394:                 'sortby' => $sortby,",
          "395:                 'sortdirection' => $sortdirection));",
          "398:         $discussionid   = $params['discussionid'];",
          "399:         $sortby         = $params['sortby'];",
          "400:         $sortdirection  = $params['sortdirection'];",
          "402:         $sortallowedvalues = array('id', 'created', 'modified');",
          "403:         if (!in_array($sortby, $sortallowedvalues)) {",
          "404:             throw new invalid_parameter_exception('Invalid value for sortby parameter (value: ' . $sortby . '),' .",
          "405:                 'allowed values are: ' . implode(',', $sortallowedvalues));",
          "406:         }",
          "408:         $sortdirection = strtoupper($sortdirection);",
          "409:         $directionallowedvalues = array('ASC', 'DESC');",
          "410:         if (!in_array($sortdirection, $directionallowedvalues)) {",
          "411:             throw new invalid_parameter_exception('Invalid value for sortdirection parameter (value: ' . $sortdirection . '),' .",
          "412:                 'allowed values are: ' . implode(',', $directionallowedvalues));",
          "413:         }",
          "415:         $discussion = $DB->get_record('forum_discussions', array('id' => $discussionid), '*', MUST_EXIST);",
          "416:         $forum = $DB->get_record('forum', array('id' => $discussion->forum), '*', MUST_EXIST);",
          "417:         $course = $DB->get_record('course', array('id' => $forum->course), '*', MUST_EXIST);",
          "418:         $cm = get_coursemodule_from_instance('forum', $forum->id, $course->id, false, MUST_EXIST);",
          "421:         $modcontext = context_module::instance($cm->id);",
          "422:         self::validate_context($modcontext);",
          "425:         require_once($CFG->dirroot . \"/mod/forum/lib.php\");",
          "428:         require_capability('mod/forum:viewdiscussion', $modcontext, null, true, 'noviewdiscussionspermission', 'forum');",
          "430:         if (! $post = forum_get_post_full($discussion->firstpost)) {",
          "431:             throw new moodle_exception('notexists', 'forum');",
          "432:         }",
          "435:         if (!forum_user_can_see_post($forum, $discussion, $post, null, $cm)) {",
          "436:             throw new moodle_exception('noviewdiscussionspermission', 'forum');",
          "437:         }",
          "439:         $canviewfullname = has_capability('moodle/site:viewfullnames', $modcontext);",
          "442:         $canreply = forum_user_can_post($forum, $discussion, $USER, $cm, $course, $modcontext);",
          "444:         $forumtracked = forum_tp_is_tracked($forum);",
          "446:         $sort = 'p.' . $sortby . ' ' . $sortdirection;",
          "447:         $posts = forum_get_all_discussion_posts($discussion->id, $sort, $forumtracked);",
          "449:         foreach ($posts as $pid => $post) {",
          "451:             if (!forum_user_can_see_post($forum, $discussion, $post, null, $cm)) {",
          "452:                 $warning = array();",
          "453:                 $warning['item'] = 'post';",
          "454:                 $warning['itemid'] = $post->id;",
          "455:                 $warning['warningcode'] = '1';",
          "456:                 $warning['message'] = 'You can\\'t see this post';",
          "457:                 $warnings[] = $warning;",
          "458:                 continue;",
          "459:             }",
          "462:             if (!isset($post->postread)) {",
          "463:                 $posts[$pid]->postread = false;",
          "464:             }",
          "465:             $posts[$pid]->canreply = $canreply;",
          "466:             $posts[$pid]->children = array();",
          "467:             if (!empty($posts[$pid]->children)) {",
          "468:                 $posts[$pid]->children = array_keys($posts[$pid]->children);",
          "469:             }",
          "471:             $user = new stdclass();",
          "472:             $user = username_load_fields_from_object($user, $post);",
          "473:             $posts[$pid]->userfullname = fullname($user, $canviewfullname);",
          "475:             $posts[$pid] = (array) $post;",
          "476:         }",
          "478:         $result = array();",
          "479:         $result['posts'] = $posts;",
          "480:         $result['warnings'] = $warnings;",
          "481:         return $result;",
          "482:     }",
          "490:     public static function get_forum_discussion_posts_returns() {",
          "491:         return new external_single_structure(",
          "492:             array(",
          "493:                 'posts' => new external_multiple_structure(",
          "494:                         new external_single_structure(",
          "495:                             array(",
          "496:                                 'id' => new external_value(PARAM_INT, 'Post id'),",
          "497:                                 'discussion' => new external_value(PARAM_INT, 'Discussion id'),",
          "498:                                 'parent' => new external_value(PARAM_INT, 'Parent id'),",
          "499:                                 'userid' => new external_value(PARAM_INT, 'User id'),",
          "500:                                 'created' => new external_value(PARAM_INT, 'Creation time'),",
          "501:                                 'modified' => new external_value(PARAM_INT, 'Time modified'),",
          "502:                                 'mailed' => new external_value(PARAM_INT, 'Mailed?'),",
          "503:                                 'subject' => new external_value(PARAM_TEXT, 'The post subject'),",
          "504:                                 'message' => new external_value(PARAM_RAW, 'The post message'),",
          "505:                                 'messageformat' => new external_value(PARAM_INT, 'The post message format'),",
          "506:                                 'messagetrust' => new external_value(PARAM_INT, 'Can we trust?'),",
          "507:                                 'attachment' => new external_value(PARAM_RAW, 'Attachments'),",
          "508:                                 'totalscore' => new external_value(PARAM_INT, 'The post message total score'),",
          "509:                                 'mailnow' => new external_value(PARAM_INT, 'Mail now?'),",
          "510:                                 'children' => new external_multiple_structure(new external_value(PARAM_INT, 'children post id')),",
          "511:                                 'canreply' => new external_value(PARAM_BOOL, 'The user can reply to posts?'),",
          "512:                                 'postread' => new external_value(PARAM_BOOL, 'The post was read'),",
          "513:                                 'userfullname' => new external_value(PARAM_TEXT, 'Post author full name')",
          "514:                             ), 'post'",
          "515:                         )",
          "516:                     ),",
          "517:                 'warnings' => new external_warnings()",
          "518:             )",
          "519:         );",
          "520:     }",
          "",
          "---------------"
        ],
        "mod/forum/tests/externallib_test.php||mod/forum/tests/externallib_test.php": [
          "File: mod/forum/tests/externallib_test.php -> mod/forum/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "384:             $this->assertEquals('requireloginerror', $e->errorcode);",
          "385:         }",
          "386:     }",
          "387: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "391:     public function test_mod_forum_get_forum_discussion_posts() {",
          "392:         global $CFG;",
          "394:         $this->resetAfterTest(true);",
          "397:         $CFG->forum_trackreadposts = true;",
          "400:         $record = new stdClass();",
          "401:         $record->trackforums = true;",
          "402:         $user1 = self::getDataGenerator()->create_user($record);",
          "404:         $user2 = self::getDataGenerator()->create_user();",
          "405:         $user3 = self::getDataGenerator()->create_user();",
          "408:         self::setUser($user1);",
          "411:         $course1 = self::getDataGenerator()->create_course();",
          "414:         $record = new stdClass();",
          "415:         $record->course = $course1->id;",
          "416:         $record->trackingtype = FORUM_TRACKING_OFF;",
          "417:         $forum1 = self::getDataGenerator()->create_module('forum', $record);",
          "418:         $forum1context = context_module::instance($forum1->cmid);",
          "421:         $record = new stdClass();",
          "422:         $record->course = $course1->id;",
          "423:         $record->userid = $user1->id;",
          "424:         $record->forum = $forum1->id;",
          "425:         $discussion1 = self::getDataGenerator()->get_plugin_generator('mod_forum')->create_discussion($record);",
          "427:         $record = new stdClass();",
          "428:         $record->course = $course1->id;",
          "429:         $record->userid = $user2->id;",
          "430:         $record->forum = $forum1->id;",
          "431:         $discussion2 = self::getDataGenerator()->get_plugin_generator('mod_forum')->create_discussion($record);",
          "434:         $record = new stdClass();",
          "435:         $record->discussion = $discussion1->id;",
          "436:         $record->parent = $discussion1->firstpost;",
          "437:         $record->userid = $user2->id;",
          "438:         $discussion1reply1 = self::getDataGenerator()->get_plugin_generator('mod_forum')->create_post($record);",
          "440:         $record->parent = $discussion1reply1->id;",
          "441:         $record->userid = $user3->id;",
          "442:         $discussion1reply2 = self::getDataGenerator()->get_plugin_generator('mod_forum')->create_post($record);",
          "445:         $enrol = enrol_get_plugin('manual');",
          "448:         $this->getDataGenerator()->enrol_user($user1->id, $course1->id);",
          "449:         $this->getDataGenerator()->enrol_user($user2->id, $course1->id);",
          "450:         $this->getDataGenerator()->enrol_user($user3->id, $course1->id);",
          "453:         $expectedposts = array(",
          "454:             'posts' => array(),",
          "455:             'warnings' => array(),",
          "456:         );",
          "457:         $expectedposts['posts'][] = array(",
          "458:             'id' => $discussion1reply2->id,",
          "459:             'discussion' => $discussion1reply2->discussion,",
          "460:             'parent' => $discussion1reply2->parent,",
          "461:             'userid' => $discussion1reply2->userid,",
          "462:             'created' => $discussion1reply2->created,",
          "463:             'modified' => $discussion1reply2->modified,",
          "464:             'mailed' => $discussion1reply2->mailed,",
          "465:             'subject' => $discussion1reply2->subject,",
          "466:             'message' => file_rewrite_pluginfile_urls($discussion1reply2->message, 'pluginfile.php',",
          "467:                     $forum1context->id, 'mod_forum', 'post', $discussion1reply2->id),",
          "468:             'messageformat' => $discussion1reply2->messageformat,",
          "469:             'messagetrust' => $discussion1reply2->messagetrust,",
          "470:             'attachment' => $discussion1reply2->attachment,",
          "471:             'totalscore' => $discussion1reply2->totalscore,",
          "472:             'mailnow' => $discussion1reply2->mailnow,",
          "473:             'children' => array(),",
          "474:             'canreply' => true,",
          "475:             'postread' => false,",
          "476:             'userfullname' => fullname($user3)",
          "477:         );",
          "478:         $expectedposts['posts'][] = array(",
          "479:             'id' => $discussion1reply1->id,",
          "480:             'discussion' => $discussion1reply1->discussion,",
          "481:             'parent' => $discussion1reply1->parent,",
          "482:             'userid' => $discussion1reply1->userid,",
          "483:             'created' => $discussion1reply1->created,",
          "484:             'modified' => $discussion1reply1->modified,",
          "485:             'mailed' => $discussion1reply1->mailed,",
          "486:             'subject' => $discussion1reply1->subject,",
          "487:             'message' => file_rewrite_pluginfile_urls($discussion1reply1->message, 'pluginfile.php',",
          "488:                     $forum1context->id, 'mod_forum', 'post', $discussion1reply1->id),",
          "489:             'messageformat' => $discussion1reply1->messageformat,",
          "490:             'messagetrust' => $discussion1reply1->messagetrust,",
          "491:             'attachment' => $discussion1reply1->attachment,",
          "492:             'totalscore' => $discussion1reply1->totalscore,",
          "493:             'mailnow' => $discussion1reply1->mailnow,",
          "494:             'children' => array(),",
          "495:             'canreply' => true,",
          "496:             'postread' => false,",
          "497:             'userfullname' => fullname($user2)",
          "498:         );",
          "501:         $posts = mod_forum_external::get_forum_discussion_posts($discussion1->id, 'modified', 'DESC');",
          "502:         $posts = external_api::clean_returnvalue(mod_forum_external::get_forum_discussion_posts_returns(), $posts);",
          "503:         $this->assertEquals(3, count($posts['posts']));",
          "506:         array_pop($posts['posts']);",
          "507:         $this->assertEquals($expectedposts, $posts);",
          "510:         $posts = mod_forum_external::get_forum_discussion_posts($discussion2->id, 'modified', 'DESC');",
          "511:         $posts = external_api::clean_returnvalue(mod_forum_external::get_forum_discussion_posts_returns(), $posts);",
          "512:         $this->assertEquals(1, count($posts['posts']));",
          "514:     }",
          "",
          "---------------"
        ],
        "mod/forum/tests/generator/lib.php||mod/forum/tests/generator/lib.php": [
          "File: mod/forum/tests/generator/lib.php -> mod/forum/tests/generator/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "198:             $record['modified'] = $time;",
          "199:         }",
          "201:         $record = (object) $record;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "201:         if (!isset($record['mailed'])) {",
          "202:             $record['mailed'] = 1;",
          "203:         }",
          "205:         if (!isset($record['messageformat'])) {",
          "206:             $record['messageformat'] = 1;",
          "207:         }",
          "209:         if (!isset($record['messagetrust'])) {",
          "210:             $record['messagetrust'] = 1;",
          "211:         }",
          "213:         if (!isset($record['attachment'])) {",
          "214:             $record['attachment'] = \"\";",
          "215:         }",
          "217:         if (!isset($record['totalscore'])) {",
          "218:             $record['totalscore'] = 0;",
          "219:         }",
          "221:         if (!isset($record['mailnow'])) {",
          "222:             $record['mailnow'] = 0;",
          "223:         }",
          "",
          "---------------"
        ]
      }
    }
  ]
}