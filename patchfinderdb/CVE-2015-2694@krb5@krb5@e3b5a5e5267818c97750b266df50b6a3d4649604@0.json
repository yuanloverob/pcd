{
  "cve_id": "CVE-2015-2694",
  "cve_desc": "The kdcpreauth modules in MIT Kerberos 5 (aka krb5) 1.12.x and 1.13.x before 1.13.2 do not properly track whether a client's request has been validated, which allows remote attackers to bypass an intended preauthentication requirement by providing (1) zero bytes of data or (2) an arbitrary realm name, related to plugins/preauth/otp/main.c and plugins/preauth/pkinit/pkinit_srv.c.",
  "repo": "krb5/krb5",
  "patch_hash": "e3b5a5e5267818c97750b266df50b6a3d4649604",
  "patch_info": {
    "commit_hash": "e3b5a5e5267818c97750b266df50b6a3d4649604",
    "repo": "krb5/krb5",
    "commit_url": "https://github.com/krb5/krb5/commit/e3b5a5e5267818c97750b266df50b6a3d4649604",
    "files": [
      "src/plugins/preauth/otp/main.c",
      "src/plugins/preauth/pkinit/pkinit_srv.c"
    ],
    "message": "Prevent requires_preauth bypass [CVE-2015-2694]\n\nIn the OTP kdcpreauth module, don't set the TKT_FLG_PRE_AUTH bit until\nthe request is successfully verified.  In the PKINIT kdcpreauth\nmodule, don't respond with code 0 on empty input or an unconfigured\nrealm.  Together these bugs could cause the KDC preauth framework to\nerroneously treat a request as pre-authenticated.\n\nCVE-2015-2694:\n\nIn MIT krb5 1.12 and later, when the KDC is configured with PKINIT\nsupport, an unauthenticated remote attacker can bypass the\nrequires_preauth flag on a client principal and obtain a ciphertext\nencrypted in the principal's long-term key.  This ciphertext could be\nused to conduct an off-line dictionary attack against the user's\npassword.\n\n    CVSSv2 Vector: AV:N/AC:M/Au:N/C:P/I:P/A:N/E:POC/RL:OF/RC:C\n\nticket: 8160 (new)\ntarget_version: 1.13.2\ntags: pullup\nsubject: requires_preauth bypass in PKINIT-enabled KDC [CVE-2015-2694]",
    "before_after_code_files": [
      "src/plugins/preauth/otp/main.c||src/plugins/preauth/otp/main.c",
      "src/plugins/preauth/pkinit/pkinit_srv.c||src/plugins/preauth/pkinit/pkinit_srv.c"
    ]
  },
  "patch_diff": {
    "src/plugins/preauth/otp/main.c||src/plugins/preauth/otp/main.c": [
      "File: src/plugins/preauth/otp/main.c -> src/plugins/preauth/otp/main.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "42: struct request_state {",
      "43:     krb5_kdcpreauth_verify_respond_fn respond;",
      "44:     void *arg;",
      "45: };",
      "47: static krb5_error_code",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "45:     krb5_enc_tkt_part *enc_tkt_reply;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "159:     if (retval == 0 && response != otp_response_success)",
      "160:         retval = KRB5_PREAUTH_FAILED;",
      "162:     rs.respond(rs.arg, retval, NULL, NULL, NULL);",
      "163: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "163:     if (retval == 0)",
      "164:         rs.enc_tkt_reply->flags |= TKT_FLG_PRE_AUTH;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "263:     krb5_data d, plaintext;",
      "264:     char *config;",
      "269:     armor_key = cb->fast_armor(context, rock);",
      "270:     if (armor_key == NULL) {",
      "",
      "[Removed Lines]",
      "266:     enc_tkt_reply->flags |= TKT_FLG_PRE_AUTH;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "298:         goto error;",
      "299:     }",
      "302:     rs = k5alloc(sizeof(struct request_state), &retval);",
      "303:     if (rs == NULL)",
      "304:         goto error;",
      "305:     rs->arg = arg;",
      "306:     rs->respond = respond;",
      "309:     retval = cb->get_string(context, rock, \"otp\", &config);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "310:     rs->enc_tkt_reply = enc_tkt_reply;",
      "",
      "---------------"
    ],
    "src/plugins/preauth/pkinit/pkinit_srv.c||src/plugins/preauth/pkinit/pkinit_srv.c": [
      "File: src/plugins/preauth/pkinit/pkinit_srv.c -> src/plugins/preauth/pkinit/pkinit_srv.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "302:     pkiDebug(\"pkinit_verify_padata: entered!\\n\");",
      "303:     if (data == NULL || data->length <= 0 || data->contents == NULL) {",
      "305:         return;",
      "306:     }",
      "",
      "[Removed Lines]",
      "304:         (*respond)(arg, 0, NULL, NULL, NULL);",
      "",
      "[Added Lines]",
      "304:         (*respond)(arg, EINVAL, NULL, NULL, NULL);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "314:     plgctx = pkinit_find_realm_context(context, moddata, request->server);",
      "315:     if (plgctx == NULL) {",
      "317:         return;",
      "318:     }",
      "",
      "[Removed Lines]",
      "316:         (*respond)(arg, 0, NULL, NULL, NULL);",
      "",
      "[Added Lines]",
      "316:         (*respond)(arg, EINVAL, NULL, NULL, NULL);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "df8afc60d970a7176a55ffe7ce21cfd57ba423cd",
      "candidate_info": {
        "commit_hash": "df8afc60d970a7176a55ffe7ce21cfd57ba423cd",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/df8afc60d970a7176a55ffe7ce21cfd57ba423cd",
        "files": [
          "src/plugins/preauth/otp/main.c",
          "src/plugins/preauth/pkinit/pkinit_srv.c"
        ],
        "message": "Prevent requires_preauth bypass [CVE-2015-2694]\n\nIn the OTP kdcpreauth module, don't set the TKT_FLG_PRE_AUTH bit until\nthe request is successfully verified.  In the PKINIT kdcpreauth\nmodule, don't respond with code 0 on empty input or an unconfigured\nrealm.  Together these bugs could cause the KDC preauth framework to\nerroneously treat a request as pre-authenticated.\n\nCVE-2015-2694:\n\nIn MIT krb5 1.12 and later, when the KDC is configured with PKINIT\nsupport, an unauthenticated remote attacker can bypass the\nrequires_preauth flag on a client principal and obtain a ciphertext\nencrypted in the principal's long-term key.  This ciphertext could be\nused to conduct an off-line dictionary attack against the user's\npassword.\n\n    CVSSv2 Vector: AV:N/AC:M/Au:N/C:P/I:P/A:N/E:POC/RL:OF/RC:C\n\n(cherry picked from commit e3b5a5e5267818c97750b266df50b6a3d4649604)\n\nticket: 8160\nversion_fixed: 1.13.2\nstatus: resolved",
        "before_after_code_files": [
          "src/plugins/preauth/otp/main.c||src/plugins/preauth/otp/main.c",
          "src/plugins/preauth/pkinit/pkinit_srv.c||src/plugins/preauth/pkinit/pkinit_srv.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/plugins/preauth/otp/main.c||src/plugins/preauth/otp/main.c",
            "src/plugins/preauth/pkinit/pkinit_srv.c||src/plugins/preauth/pkinit/pkinit_srv.c"
          ],
          "candidate": [
            "src/plugins/preauth/otp/main.c||src/plugins/preauth/otp/main.c",
            "src/plugins/preauth/pkinit/pkinit_srv.c||src/plugins/preauth/pkinit/pkinit_srv.c"
          ]
        }
      },
      "candidate_diff": {
        "src/plugins/preauth/otp/main.c||src/plugins/preauth/otp/main.c": [
          "File: src/plugins/preauth/otp/main.c -> src/plugins/preauth/otp/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: struct request_state {",
          "43:     krb5_kdcpreauth_verify_respond_fn respond;",
          "44:     void *arg;",
          "45: };",
          "47: static krb5_error_code",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:     krb5_enc_tkt_part *enc_tkt_reply;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159:     if (retval == 0 && response != otp_response_success)",
          "160:         retval = KRB5_PREAUTH_FAILED;",
          "162:     rs.respond(rs.arg, retval, NULL, NULL, NULL);",
          "163: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "163:     if (retval == 0)",
          "164:         rs.enc_tkt_reply->flags |= TKT_FLG_PRE_AUTH;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "263:     krb5_data d, plaintext;",
          "264:     char *config;",
          "269:     armor_key = cb->fast_armor(context, rock);",
          "270:     if (armor_key == NULL) {",
          "",
          "[Removed Lines]",
          "266:     enc_tkt_reply->flags |= TKT_FLG_PRE_AUTH;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "298:         goto error;",
          "299:     }",
          "302:     rs = k5alloc(sizeof(struct request_state), &retval);",
          "303:     if (rs == NULL)",
          "304:         goto error;",
          "305:     rs->arg = arg;",
          "306:     rs->respond = respond;",
          "309:     retval = cb->get_string(context, rock, \"otp\", &config);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "310:     rs->enc_tkt_reply = enc_tkt_reply;",
          "",
          "---------------"
        ],
        "src/plugins/preauth/pkinit/pkinit_srv.c||src/plugins/preauth/pkinit/pkinit_srv.c": [
          "File: src/plugins/preauth/pkinit/pkinit_srv.c -> src/plugins/preauth/pkinit/pkinit_srv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "302:     pkiDebug(\"pkinit_verify_padata: entered!\\n\");",
          "303:     if (data == NULL || data->length <= 0 || data->contents == NULL) {",
          "305:         return;",
          "306:     }",
          "",
          "[Removed Lines]",
          "304:         (*respond)(arg, 0, NULL, NULL, NULL);",
          "",
          "[Added Lines]",
          "304:         (*respond)(arg, EINVAL, NULL, NULL, NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "314:     plgctx = pkinit_find_realm_context(context, moddata, request->server);",
          "315:     if (plgctx == NULL) {",
          "317:         return;",
          "318:     }",
          "",
          "[Removed Lines]",
          "316:         (*respond)(arg, 0, NULL, NULL, NULL);",
          "",
          "[Added Lines]",
          "316:         (*respond)(arg, EINVAL, NULL, NULL, NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b0c571e709c72da799ccc15fb5755f7910170e33",
      "candidate_info": {
        "commit_hash": "b0c571e709c72da799ccc15fb5755f7910170e33",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/b0c571e709c72da799ccc15fb5755f7910170e33",
        "files": [
          "src/plugins/preauth/otp/main.c",
          "src/plugins/preauth/pkinit/pkinit_srv.c"
        ],
        "message": "Prevent requires_preauth bypass [CVE-2015-2694]\n\nIn the OTP kdcpreauth module, don't set the TKT_FLG_PRE_AUTH bit until\nthe request is successfully verified.  In the PKINIT kdcpreauth\nmodule, don't respond with code 0 on empty input or an unconfigured\nrealm.  Together these bugs could cause the KDC preauth framework to\nerroneously treat a request as pre-authenticated.\n\nCVE-2015-2694:\n\nIn MIT krb5 1.12 and later, when the KDC is configured with PKINIT\nsupport, an unauthenticated remote attacker can bypass the\nrequires_preauth flag on a client principal and obtain a ciphertext\nencrypted in the principal's long-term key.  This ciphertext could be\nused to conduct an off-line dictionary attack against the user's\npassword.\n\n    CVSSv2 Vector: AV:N/AC:M/Au:N/C:P/I:P/A:N/E:POC/RL:OF/RC:C\n\n(cherry picked from commit e3b5a5e5267818c97750b266df50b6a3d4649604)\n(cherry picked from commit df8afc60d970a7176a55ffe7ce21cfd57ba423cd)\n\nticket: 8194 (new)\nversion_fixed: 1.12.4\nstatus: resolved",
        "before_after_code_files": [
          "src/plugins/preauth/otp/main.c||src/plugins/preauth/otp/main.c",
          "src/plugins/preauth/pkinit/pkinit_srv.c||src/plugins/preauth/pkinit/pkinit_srv.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/plugins/preauth/otp/main.c||src/plugins/preauth/otp/main.c",
            "src/plugins/preauth/pkinit/pkinit_srv.c||src/plugins/preauth/pkinit/pkinit_srv.c"
          ],
          "candidate": [
            "src/plugins/preauth/otp/main.c||src/plugins/preauth/otp/main.c",
            "src/plugins/preauth/pkinit/pkinit_srv.c||src/plugins/preauth/pkinit/pkinit_srv.c"
          ]
        }
      },
      "candidate_diff": {
        "src/plugins/preauth/otp/main.c||src/plugins/preauth/otp/main.c": [
          "File: src/plugins/preauth/otp/main.c -> src/plugins/preauth/otp/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: struct request_state {",
          "43:     krb5_kdcpreauth_verify_respond_fn respond;",
          "44:     void *arg;",
          "45: };",
          "47: static krb5_error_code",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:     krb5_enc_tkt_part *enc_tkt_reply;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159:     if (retval == 0 && response != otp_response_success)",
          "160:         retval = KRB5_PREAUTH_FAILED;",
          "162:     rs.respond(rs.arg, retval, NULL, NULL, NULL);",
          "163: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "163:     if (retval == 0)",
          "164:         rs.enc_tkt_reply->flags |= TKT_FLG_PRE_AUTH;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "263:     krb5_data d, plaintext;",
          "264:     char *config;",
          "269:     armor_key = cb->fast_armor(context, rock);",
          "270:     if (armor_key == NULL) {",
          "",
          "[Removed Lines]",
          "266:     enc_tkt_reply->flags |= TKT_FLG_PRE_AUTH;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "298:         goto error;",
          "299:     }",
          "302:     rs = k5alloc(sizeof(struct request_state), &retval);",
          "303:     if (rs == NULL)",
          "304:         goto error;",
          "305:     rs->arg = arg;",
          "306:     rs->respond = respond;",
          "309:     retval = cb->get_string(context, rock, \"otp\", &config);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "310:     rs->enc_tkt_reply = enc_tkt_reply;",
          "",
          "---------------"
        ],
        "src/plugins/preauth/pkinit/pkinit_srv.c||src/plugins/preauth/pkinit/pkinit_srv.c": [
          "File: src/plugins/preauth/pkinit/pkinit_srv.c -> src/plugins/preauth/pkinit/pkinit_srv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "307:     pkiDebug(\"pkinit_verify_padata: entered!\\n\");",
          "308:     if (data == NULL || data->length <= 0 || data->contents == NULL) {",
          "310:         return;",
          "311:     }",
          "",
          "[Removed Lines]",
          "309:         (*respond)(arg, 0, NULL, NULL, NULL);",
          "",
          "[Added Lines]",
          "309:         (*respond)(arg, EINVAL, NULL, NULL, NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "319:     plgctx = pkinit_find_realm_context(context, moddata, request->server);",
          "320:     if (plgctx == NULL) {",
          "322:         return;",
          "323:     }",
          "",
          "[Removed Lines]",
          "321:         (*respond)(arg, 0, NULL, NULL, NULL);",
          "",
          "[Added Lines]",
          "321:         (*respond)(arg, EINVAL, NULL, NULL, NULL);",
          "",
          "---------------"
        ]
      }
    }
  ]
}