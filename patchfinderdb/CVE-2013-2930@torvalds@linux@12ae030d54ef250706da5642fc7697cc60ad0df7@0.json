{
  "cve_id": "CVE-2013-2930",
  "cve_desc": "The perf_trace_event_perm function in kernel/trace/trace_event_perf.c in the Linux kernel before 3.12.2 does not properly restrict access to the perf subsystem, which allows local users to enable function tracing via a crafted application.",
  "repo": "torvalds/linux",
  "patch_hash": "12ae030d54ef250706da5642fc7697cc60ad0df7",
  "patch_info": {
    "commit_hash": "12ae030d54ef250706da5642fc7697cc60ad0df7",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/12ae030d54ef250706da5642fc7697cc60ad0df7",
    "files": [
      "kernel/trace/trace_event_perf.c"
    ],
    "message": "perf/ftrace: Fix paranoid level for enabling function tracer\n\nThe current default perf paranoid level is \"1\" which has\n\"perf_paranoid_kernel()\" return false, and giving any operations that\nuse it, access to normal users. Unfortunately, this includes function\ntracing and normal users should not be allowed to enable function\ntracing by default.\n\nThe proper level is defined at \"-1\" (full perf access), which\n\"perf_paranoid_tracepoint_raw()\" will only give access to. Use that\ncheck instead for enabling function tracing.\n\nReported-by: Dave Jones <davej@redhat.com>\nReported-by: Vince Weaver <vincent.weaver@maine.edu>\nTested-by: Vince Weaver <vincent.weaver@maine.edu>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Ingo Molnar <mingo@kernel.org>\nCc: Jiri Olsa <jolsa@redhat.com>\nCc: Frederic Weisbecker <fweisbec@gmail.com>\nCc: stable@vger.kernel.org # 3.4+\nCVE: CVE-2013-2930\nFixes: ced39002f5ea (\"ftrace, perf: Add support to use function tracepoint in perf\")\nSigned-off-by: Steven Rostedt <rostedt@goodmis.org>",
    "before_after_code_files": [
      "kernel/trace/trace_event_perf.c||kernel/trace/trace_event_perf.c"
    ]
  },
  "patch_diff": {
    "kernel/trace/trace_event_perf.c||kernel/trace/trace_event_perf.c": [
      "File: kernel/trace/trace_event_perf.c -> kernel/trace/trace_event_perf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: {",
      "28:  if (ftrace_event_is_function(tp_event) &&",
      "30:   return -EPERM;",
      "",
      "[Removed Lines]",
      "29:      perf_paranoid_kernel() && !capable(CAP_SYS_ADMIN))",
      "",
      "[Added Lines]",
      "29:      perf_paranoid_tracepoint_raw() && !capable(CAP_SYS_ADMIN))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cfa77bc4af2c75c0781ee76cde2dd104c6c8e2b7",
      "candidate_info": {
        "commit_hash": "cfa77bc4af2c75c0781ee76cde2dd104c6c8e2b7",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/cfa77bc4af2c75c0781ee76cde2dd104c6c8e2b7",
        "files": [
          "kernel/trace/trace_event_perf.c"
        ],
        "message": "perf: Disallow user-space callchains for function trace events\n\nRecent issues with user space callchains processing within\npage fault handler tracing showed as Peter said 'there's\njust too much fail surface'.\n\nRelated list discussions:\n\n  http://marc.info/?t=139302086500001&r=1&w=2\n  http://marc.info/?t=139301437300003&r=1&w=2\n\nSuggested-by: Peter Zijlstra <a.p.zijlstra@chello.nl>\nSigned-off-by: Jiri Olsa <jolsa@redhat.com>\nCc: Paul Mackerras <paulus@samba.org>\nCc: Arnaldo Carvalho de Melo <acme@ghostprotocols.net>\nCc: \"H. Peter Anvin\" <hpa@zytor.com>\nCc: Vince Weaver <vincent.weaver@maine.edu>\nCc: Steven Rostedt <rostedt@goodmis.org>\nSigned-off-by: Peter Zijlstra <peterz@infradead.org>\nLink: http://lkml.kernel.org/r/1393775800-13524-2-git-send-email-jolsa@redhat.com\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
        "before_after_code_files": [
          "kernel/trace/trace_event_perf.c||kernel/trace/trace_event_perf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "kernel/trace/trace_event_perf.c||kernel/trace/trace_event_perf.c"
          ],
          "candidate": [
            "kernel/trace/trace_event_perf.c||kernel/trace/trace_event_perf.c"
          ]
        }
      },
      "candidate_diff": {
        "kernel/trace/trace_event_perf.c||kernel/trace/trace_event_perf.c": [
          "File: kernel/trace/trace_event_perf.c -> kernel/trace/trace_event_perf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:  }",
          "39:  if (!(p_event->attr.sample_type & PERF_SAMPLE_RAW))",
          "",
          "[Removed Lines]",
          "34:  if (ftrace_event_is_function(tp_event) &&",
          "35:      perf_paranoid_tracepoint_raw() && !capable(CAP_SYS_ADMIN))",
          "36:   return -EPERM;",
          "",
          "[Added Lines]",
          "34:  if (ftrace_event_is_function(tp_event)) {",
          "35:   if (perf_paranoid_tracepoint_raw() && !capable(CAP_SYS_ADMIN))",
          "36:    return -EPERM;",
          "43:   if (!p_event->attr.exclude_callchain_user)",
          "44:    return -EINVAL;",
          "45:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}