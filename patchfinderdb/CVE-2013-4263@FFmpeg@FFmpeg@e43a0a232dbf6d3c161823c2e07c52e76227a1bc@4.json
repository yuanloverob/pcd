{
  "cve_id": "CVE-2013-4263",
  "cve_desc": "libavfilter in FFmpeg before 2.0.1 has unspecified impact and remote vectors related to a crafted \"plane,\" which triggers an out-of-bounds heap write.",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "e43a0a232dbf6d3c161823c2e07c52e76227a1bc",
  "patch_info": {
    "commit_hash": "e43a0a232dbf6d3c161823c2e07c52e76227a1bc",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/e43a0a232dbf6d3c161823c2e07c52e76227a1bc",
    "files": [
      "libavfilter/vf_boxblur.c",
      "libavfilter/vf_delogo.c",
      "libavfilter/vf_fieldmatch.c",
      "libavfilter/vf_fieldorder.c",
      "libavfilter/vf_gradfun.c",
      "libavfilter/vf_hflip.c",
      "libavfilter/vf_kerndeint.c",
      "libavfilter/vf_lut.c",
      "libavfilter/vf_pad.c",
      "libavfilter/vf_showinfo.c",
      "libavfilter/vf_vignette.c"
    ],
    "message": "avfilter: fix plane validity checks\n\nFixes out of array accesses\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
    "before_after_code_files": [
      "libavfilter/vf_boxblur.c||libavfilter/vf_boxblur.c",
      "libavfilter/vf_delogo.c||libavfilter/vf_delogo.c",
      "libavfilter/vf_fieldmatch.c||libavfilter/vf_fieldmatch.c",
      "libavfilter/vf_fieldorder.c||libavfilter/vf_fieldorder.c",
      "libavfilter/vf_gradfun.c||libavfilter/vf_gradfun.c",
      "libavfilter/vf_hflip.c||libavfilter/vf_hflip.c",
      "libavfilter/vf_kerndeint.c||libavfilter/vf_kerndeint.c",
      "libavfilter/vf_lut.c||libavfilter/vf_lut.c",
      "libavfilter/vf_pad.c||libavfilter/vf_pad.c",
      "libavfilter/vf_showinfo.c||libavfilter/vf_showinfo.c",
      "libavfilter/vf_vignette.c||libavfilter/vf_vignette.c"
    ]
  },
  "patch_diff": {
    "libavfilter/vf_boxblur.c||libavfilter/vf_boxblur.c": [
      "File: libavfilter/vf_boxblur.c -> libavfilter/vf_boxblur.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "313:     }",
      "314:     av_frame_copy_props(out, in);",
      "317:         hblur(out->data[plane], out->linesize[plane],",
      "318:               in ->data[plane], in ->linesize[plane],",
      "319:               w[plane], h[plane], s->radius[plane], s->power[plane],",
      "320:               s->temp);",
      "323:         vblur(out->data[plane], out->linesize[plane],",
      "324:               out->data[plane], out->linesize[plane],",
      "325:               w[plane], h[plane], s->radius[plane], s->power[plane],",
      "",
      "[Removed Lines]",
      "316:     for (plane = 0; in->data[plane] && plane < 4; plane++)",
      "322:     for (plane = 0; in->data[plane] && plane < 4; plane++)",
      "",
      "[Added Lines]",
      "316:     for (plane = 0; plane < 4 && in->data[plane] && in->linesize[plane]; plane++)",
      "322:     for (plane = 0; plane < 4 && in->data[plane] && in->linesize[plane]; plane++)",
      "",
      "---------------"
    ],
    "libavfilter/vf_delogo.c||libavfilter/vf_delogo.c": [
      "File: libavfilter/vf_delogo.c -> libavfilter/vf_delogo.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "237:     if (!sar.num)",
      "238:         sar.num = sar.den = 1;",
      "241:         int hsub = plane == 1 || plane == 2 ? hsub0 : 0;",
      "242:         int vsub = plane == 1 || plane == 2 ? vsub0 : 0;",
      "",
      "[Removed Lines]",
      "240:     for (plane = 0; plane < 4 && in->data[plane]; plane++) {",
      "",
      "[Added Lines]",
      "240:     for (plane = 0; plane < 4 && in->data[plane] && in->linesize[plane]; plane++) {",
      "",
      "---------------"
    ],
    "libavfilter/vf_fieldmatch.c||libavfilter/vf_fieldmatch.c": [
      "File: libavfilter/vf_fieldmatch.c -> libavfilter/vf_fieldmatch.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "608:                         const AVFrame *src, int field)",
      "609: {",
      "610:     int plane;",
      "612:         av_image_copy_plane(dst->data[plane] + field*dst->linesize[plane], dst->linesize[plane] << 1,",
      "613:                             src->data[plane] + field*src->linesize[plane], src->linesize[plane] << 1,",
      "614:                             get_width(fm, src, plane), get_height(fm, src, plane) / 2);",
      "",
      "[Removed Lines]",
      "611:     for (plane = 0; plane < 4 && src->data[plane]; plane++)",
      "",
      "[Added Lines]",
      "611:     for (plane = 0; plane < 4 && src->data[plane] && src->linesize[plane]; plane++)",
      "",
      "---------------"
    ],
    "libavfilter/vf_fieldorder.c||libavfilter/vf_fieldorder.c": [
      "File: libavfilter/vf_fieldorder.c -> libavfilter/vf_fieldorder.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "106:             \"picture will move %s one line\\n\",",
      "107:             s->dst_tff ? \"up\" : \"down\");",
      "108:     h = frame->height;",
      "110:         line_step = frame->linesize[plane];",
      "111:         line_size = s->line_size[plane];",
      "112:         data = frame->data[plane];",
      "",
      "[Removed Lines]",
      "109:     for (plane = 0; plane < 4 && frame->data[plane]; plane++) {",
      "",
      "[Added Lines]",
      "109:     for (plane = 0; plane < 4 && frame->data[plane] && frame->linesize[plane]; plane++) {",
      "",
      "---------------"
    ],
    "libavfilter/vf_gradfun.c||libavfilter/vf_gradfun.c": [
      "File: libavfilter/vf_gradfun.c -> libavfilter/vf_gradfun.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "199:         av_frame_copy_props(out, in);",
      "200:     }",
      "203:         int w = inlink->w;",
      "204:         int h = inlink->h;",
      "205:         int r = s->radius;",
      "",
      "[Removed Lines]",
      "202:     for (p = 0; p < 4 && in->data[p]; p++) {",
      "",
      "[Added Lines]",
      "202:     for (p = 0; p < 4 && in->data[p] && in->linesize[p]; p++) {",
      "",
      "---------------"
    ],
    "libavfilter/vf_hflip.c||libavfilter/vf_hflip.c": [
      "File: libavfilter/vf_hflip.c -> libavfilter/vf_hflip.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "90:     if (av_pix_fmt_desc_get(inlink->format)->flags & AV_PIX_FMT_FLAG_PAL)",
      "91:         memcpy(out->data[1], in->data[1], AVPALETTE_SIZE);",
      "94:         const int width  = (plane == 1 || plane == 2) ? FF_CEIL_RSHIFT(inlink->w, s->hsub) : inlink->w;",
      "95:         const int height = (plane == 1 || plane == 2) ? FF_CEIL_RSHIFT(inlink->h, s->vsub) : inlink->h;",
      "96:         step = s->max_step[plane];",
      "",
      "[Removed Lines]",
      "93:     for (plane = 0; plane < 4 && in->data[plane]; plane++) {",
      "",
      "[Added Lines]",
      "93:     for (plane = 0; plane < 4 && in->data[plane] && in->linesize[plane]; plane++) {",
      "",
      "---------------"
    ],
    "libavfilter/vf_kerndeint.c||libavfilter/vf_kerndeint.c": [
      "File: libavfilter/vf_kerndeint.c -> libavfilter/vf_kerndeint.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "150:     av_frame_copy_props(outpic, inpic);",
      "151:     outpic->interlaced_frame = 0;",
      "154:         h = plane == 0 ? inlink->h : FF_CEIL_RSHIFT(inlink->h, kerndeint->vsub);",
      "155:         bwidth = kerndeint->tmp_bwidth[plane];",
      "",
      "[Removed Lines]",
      "153:     for (plane = 0; inpic->data[plane] && plane < 4; plane++) {",
      "",
      "[Added Lines]",
      "153:     for (plane = 0; plane < 4 && inpic->data[plane] && inpic->linesize[plane]; plane++) {",
      "",
      "---------------"
    ],
    "libavfilter/vf_lut.c||libavfilter/vf_lut.c": [
      "File: libavfilter/vf_lut.c -> libavfilter/vf_lut.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "304:         }",
      "305:     } else {",
      "308:             int vsub = plane == 1 || plane == 2 ? s->vsub : 0;",
      "309:             int hsub = plane == 1 || plane == 2 ? s->hsub : 0;",
      "310:             int h = FF_CEIL_RSHIFT(inlink->h, vsub);",
      "",
      "[Removed Lines]",
      "307:         for (plane = 0; plane < 4 && in->data[plane]; plane++) {",
      "",
      "[Added Lines]",
      "307:         for (plane = 0; plane < 4 && in->data[plane] && in->linesize[plane]; plane++) {",
      "",
      "---------------"
    ],
    "libavfilter/vf_pad.c||libavfilter/vf_pad.c": [
      "File: libavfilter/vf_pad.c -> libavfilter/vf_pad.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "214:     frame->width  = w;",
      "215:     frame->height = h;",
      "218:         int hsub = s->draw.hsub[plane];",
      "219:         int vsub = s->draw.vsub[plane];",
      "220:         frame->data[plane] += (s->x >> hsub) * s->draw.pixelstep[plane] +",
      "",
      "[Removed Lines]",
      "217:     for (plane = 0; plane < 4 && frame->data[plane]; plane++) {",
      "",
      "[Added Lines]",
      "217:     for (plane = 0; plane < 4 && frame->data[plane] && frame->linesize[plane]; plane++) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "311:         int i;",
      "313:         out = in;",
      "315:             int hsub = s->draw.hsub[i];",
      "316:             int vsub = s->draw.vsub[i];",
      "317:             out->data[i] -= (s->x >> hsub) * s->draw.pixelstep[i] +",
      "",
      "[Removed Lines]",
      "314:         for (i = 0; i < 4 && out->data[i]; i++) {",
      "",
      "[Added Lines]",
      "314:         for (i = 0; i < 4 && out->data[i] && out->linesize[i]; i++) {",
      "",
      "---------------"
    ],
    "libavfilter/vf_showinfo.c||libavfilter/vf_showinfo.c": [
      "File: libavfilter/vf_showinfo.c -> libavfilter/vf_showinfo.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "38:     uint32_t plane_checksum[4] = {0}, checksum = 0;",
      "39:     int i, plane, vsub = desc->log2_chroma_h;",
      "42:         int64_t linesize = av_image_get_linesize(frame->format, frame->width, plane);",
      "43:         uint8_t *data = frame->data[plane];",
      "44:         int h = plane == 1 || plane == 2 ? FF_CEIL_RSHIFT(inlink->h, vsub) : inlink->h;",
      "",
      "[Removed Lines]",
      "41:     for (plane = 0; plane < 4 && frame->data[plane]; plane++) {",
      "",
      "[Added Lines]",
      "41:     for (plane = 0; plane < 4 && frame->data[plane] && frame->linesize[plane]; plane++) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "68:            av_get_picture_type_char(frame->pict_type),",
      "69:            checksum, plane_checksum[0]);",
      "72:         av_log(ctx, AV_LOG_INFO, \" %08X\", plane_checksum[plane]);",
      "73:     av_log(ctx, AV_LOG_INFO, \"]\\n\");",
      "",
      "[Removed Lines]",
      "71:     for (plane = 1; plane < 4 && frame->data[plane]; plane++)",
      "",
      "[Added Lines]",
      "71:     for (plane = 1; plane < 4 && frame->data[plane] && frame->linesize[plane]; plane++)",
      "",
      "---------------"
    ],
    "libavfilter/vf_vignette.c||libavfilter/vf_vignette.c": [
      "File: libavfilter/vf_vignette.c -> libavfilter/vf_vignette.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "239:     } else {",
      "240:         int plane;",
      "243:             uint8_t       *dst = out->data[plane];",
      "244:             const uint8_t *src = in ->data[plane];",
      "245:             const float *fmap = s->fmap;",
      "",
      "[Removed Lines]",
      "242:         for (plane = 0; plane < 4 && in->data[plane]; plane++) {",
      "",
      "[Added Lines]",
      "242:         for (plane = 0; plane < 4 && in->data[plane] && in->linesize[plane]; plane++) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "31d8467d82d41d9a6720d4b4bd7bf60eab547d5e",
      "candidate_info": {
        "commit_hash": "31d8467d82d41d9a6720d4b4bd7bf60eab547d5e",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/31d8467d82d41d9a6720d4b4bd7bf60eab547d5e",
        "files": [
          "Changelog",
          "doc/filters.texi",
          "libavfilter/Makefile",
          "libavfilter/allfilters.c",
          "libavfilter/avfilter.h",
          "libavfilter/vf_showinfo.c"
        ],
        "message": "lavfi: add showinfo filter",
        "before_after_code_files": [
          "libavfilter/allfilters.c||libavfilter/allfilters.c",
          "libavfilter/avfilter.h||libavfilter/avfilter.h",
          "libavfilter/vf_showinfo.c||libavfilter/vf_showinfo.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavfilter/vf_showinfo.c||libavfilter/vf_showinfo.c"
          ],
          "candidate": [
            "libavfilter/vf_showinfo.c||libavfilter/vf_showinfo.c"
          ]
        }
      },
      "candidate_diff": {
        "libavfilter/allfilters.c||libavfilter/allfilters.c": [
          "File: libavfilter/allfilters.c -> libavfilter/allfilters.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:     REGISTER_FILTER (SETPTS,      setpts,      vf);",
          "67:     REGISTER_FILTER (SETSAR,      setsar,      vf);",
          "68:     REGISTER_FILTER (SETTB,       settb,       vf);",
          "69:     REGISTER_FILTER (SLICIFY,     slicify,     vf);",
          "70:     REGISTER_FILTER (TRANSPOSE,   transpose,   vf);",
          "71:     REGISTER_FILTER (UNSHARP,     unsharp,     vf);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:     REGISTER_FILTER (SHOWINFO,    showinfo,    vf);",
          "",
          "---------------"
        ],
        "libavfilter/avfilter.h||libavfilter/avfilter.h": [
          "File: libavfilter/avfilter.h -> libavfilter/avfilter.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"libavutil/samplefmt.h\"",
          "28: #define LIBAVFILTER_VERSION_MAJOR  2",
          "32: #define LIBAVFILTER_VERSION_INT AV_VERSION_INT(LIBAVFILTER_VERSION_MAJOR, \\",
          "33:                                                LIBAVFILTER_VERSION_MINOR, \\",
          "",
          "[Removed Lines]",
          "29: #define LIBAVFILTER_VERSION_MINOR  3",
          "30: #define LIBAVFILTER_VERSION_MICRO  1",
          "",
          "[Added Lines]",
          "29: #define LIBAVFILTER_VERSION_MINOR  1",
          "30: #define LIBAVFILTER_VERSION_MICRO  0",
          "",
          "---------------"
        ],
        "libavfilter/vf_showinfo.c||libavfilter/vf_showinfo.c": [
          "File: libavfilter/vf_showinfo.c -> libavfilter/vf_showinfo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: #include \"libavutil/adler32.h\"",
          "26: #include \"libavutil/imgutils.h\"",
          "27: #include \"libavutil/pixdesc.h\"",
          "28: #include \"avfilter.h\"",
          "30: typedef struct {",
          "31:     unsigned int frame;",
          "32: } ShowInfoContext;",
          "34: static av_cold int init(AVFilterContext *ctx, const char *args, void *opaque)",
          "35: {",
          "36:     ShowInfoContext *showinfo = ctx->priv;",
          "37:     showinfo->frame = 0;",
          "38:     return 0;",
          "39: }",
          "41: static void end_frame(AVFilterLink *inlink)",
          "42: {",
          "43:     AVFilterContext *ctx = inlink->dst;",
          "44:     ShowInfoContext *showinfo = ctx->priv;",
          "45:     AVFilterBufferRef *picref = inlink->cur_buf;",
          "46:     uint32_t plane_crc[4], crc = 0;",
          "47:     int plane;",
          "49:     for (plane = 0; plane < 4; plane++) {",
          "50:         size_t linesize = av_image_get_linesize(picref->format, picref->video->w, plane);",
          "51:         plane_crc[plane] = av_adler32_update(0  , picref->data[plane], linesize);",
          "52:         crc              = av_adler32_update(crc, picref->data[plane], linesize);",
          "53:     }",
          "55:     av_log(ctx, AV_LOG_INFO,",
          "56:            \"n:%d pts:%\"PRId64\" pts_time:%f pos:%\"PRId64\" \"",
          "57:            \"fmt:%s sar:%d/%d s:%dx%d i:%c iskey:%d type:%c \"",
          "58:            \"crc:%u plane_crc:[%u %u %u %u]\\n\",",
          "59:            showinfo->frame,",
          "60:            picref->pts, picref ->pts * av_q2d(inlink->time_base), picref->pos,",
          "61:            av_pix_fmt_descriptors[picref->format].name,",
          "62:            picref->video->pixel_aspect.num, picref->video->pixel_aspect.den,",
          "63:            picref->video->w, picref->video->h,",
          "66:            picref->video->key_frame,",
          "67:            av_get_picture_type_char(picref->video->pict_type),",
          "68:            crc, plane_crc[0], plane_crc[1], plane_crc[2], plane_crc[3]);",
          "70:     showinfo->frame++;",
          "71:     avfilter_end_frame(inlink->dst->outputs[0]);",
          "72: }",
          "74: AVFilter avfilter_vf_showinfo = {",
          "75:     .name        = \"showinfo\",",
          "76:     .description = NULL_IF_CONFIG_SMALL(\"Show textual information for each video frame.\"),",
          "78:     .priv_size = sizeof(ShowInfoContext),",
          "79:     .init      = init,",
          "81:     .inputs    = (AVFilterPad[]) {{ .name = \"default\",",
          "82:                                     .type             = AVMEDIA_TYPE_VIDEO,",
          "83:                                     .get_video_buffer = avfilter_null_get_video_buffer,",
          "84:                                     .start_frame      = avfilter_null_start_frame,",
          "85:                                     .end_frame        = end_frame,",
          "86:                                     .min_perms       = AV_PERM_READ, },",
          "87:                                   { .name = NULL}},",
          "89:     .outputs   = (AVFilterPad[]) {{ .name             = \"default\",",
          "90:                                     .type             = AVMEDIA_TYPE_VIDEO },",
          "91:                                   { .name = NULL}},",
          "92: };",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bb82ea797fb6538308af84310118d8006b150318",
      "candidate_info": {
        "commit_hash": "bb82ea797fb6538308af84310118d8006b150318",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/bb82ea797fb6538308af84310118d8006b150318",
        "files": [
          "libavfilter/vf_showinfo.c"
        ],
        "message": "showinfo: fix computation of Adler checksum\n\nPreviously the code was computing the checksum only for the first line\nof each plane.",
        "before_after_code_files": [
          "libavfilter/vf_showinfo.c||libavfilter/vf_showinfo.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavfilter/vf_showinfo.c||libavfilter/vf_showinfo.c"
          ],
          "candidate": [
            "libavfilter/vf_showinfo.c||libavfilter/vf_showinfo.c"
          ]
        }
      },
      "candidate_diff": {
        "libavfilter/vf_showinfo.c||libavfilter/vf_showinfo.c": [
          "File: libavfilter/vf_showinfo.c -> libavfilter/vf_showinfo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:     AVFilterContext *ctx = inlink->dst;",
          "44:     ShowInfoContext *showinfo = ctx->priv;",
          "45:     AVFilterBufferRef *picref = inlink->cur_buf;",
          "50:         size_t linesize = av_image_get_linesize(picref->format, picref->video->w, plane);",
          "53:     }",
          "55:     av_log(ctx, AV_LOG_INFO,",
          "",
          "[Removed Lines]",
          "46:     uint32_t plane_crc[4], crc = 0;",
          "47:     int plane;",
          "49:     for (plane = 0; plane < 4; plane++) {",
          "51:         plane_crc[plane] = av_adler32_update(0  , picref->data[plane], linesize);",
          "52:         crc              = av_adler32_update(crc, picref->data[plane], linesize);",
          "",
          "[Added Lines]",
          "46:     uint32_t plane_crc[4] = {0}, crc = 0;",
          "47:     int i, plane, vsub = av_pix_fmt_descriptors[inlink->format].log2_chroma_h;",
          "49:     for (plane = 0; picref->data[plane] && plane < 4; plane++) {",
          "51:         uint8_t *data = picref->data[plane];",
          "52:         int h = plane == 1 || plane == 2 ? inlink->h >> vsub : inlink->h;",
          "54:         for (i = 0; i < h; i++) {",
          "55:             plane_crc[plane] = av_adler32_update(plane_crc[plane], data, linesize);",
          "56:             crc = av_adler32_update(crc, data, linesize);",
          "57:             data += picref->linesize[plane];",
          "58:         }",
          "",
          "---------------"
        ]
      }
    }
  ]
}