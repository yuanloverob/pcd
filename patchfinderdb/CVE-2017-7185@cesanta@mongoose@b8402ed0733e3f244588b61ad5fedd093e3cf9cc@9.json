{
  "cve_id": "CVE-2017-7185",
  "cve_desc": "Use-after-free vulnerability in the mg_http_multipart_wait_for_boundary function in mongoose.c in Cesanta Mongoose Embedded Web Server Library 6.7 and earlier and Mongoose OS 1.2 and earlier allows remote attackers to cause a denial of service (crash) via a multipart/form-data POST request without a MIME boundary string.",
  "repo": "cesanta/mongoose",
  "patch_hash": "b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
  "patch_info": {
    "commit_hash": "b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
    "repo": "cesanta/mongoose",
    "commit_url": "https://github.com/cesanta/mongoose/commit/b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
    "files": [
      "mongoose.c"
    ],
    "message": "Fix crash in multipart handling\n\nClose cesanta/dev#6974\n\nPUBLISHED_FROM=4d4e4a46eceba10aec8dacb7f8f58bd078c92307",
    "before_after_code_files": [
      "mongoose.c||mongoose.c"
    ]
  },
  "patch_diff": {
    "mongoose.c||mongoose.c": [
      "File: mongoose.c -> mongoose.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "5961:   struct mbuf *io = &c->recv_mbuf;",
      "5962:   struct mg_http_proto_data *pd = mg_http_get_proto_data(c);",
      "5964:   if ((int) io->len < pd->mp_stream.boundary_len + 2) {",
      "5965:     return 0;",
      "5966:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5964:   if (pd->mp_stream.boundary == NULL) {",
      "5965:     pd->mp_stream.state = MPS_FINALIZE;",
      "5966:     DBG((\"Invalid request: boundary not initilaized\"));",
      "5967:     return 0;",
      "5968:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bf7dd7ac6301b34368e08e2e754eb879fe40b677",
      "candidate_info": {
        "commit_hash": "bf7dd7ac6301b34368e08e2e754eb879fe40b677",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/bf7dd7ac6301b34368e08e2e754eb879fe40b677",
        "files": [
          "docs/c-api/http_server.h/mg_register_http_endpoint.md",
          "examples/big_upload/big_upload.c",
          "mongoose.c",
          "mongoose.h"
        ],
        "message": "Add separate userdata for each http endpoint hdlr\n\nPUBLISHED_FROM=29a204c2c7f35724b6f1e8435edb94869da2362c",
        "before_after_code_files": [
          "examples/big_upload/big_upload.c||examples/big_upload/big_upload.c",
          "mongoose.c||mongoose.c",
          "mongoose.h||mongoose.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "examples/big_upload/big_upload.c||examples/big_upload/big_upload.c": [
          "File: examples/big_upload/big_upload.c -> examples/big_upload/big_upload.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:   mg_mgr_init(&mgr, NULL);",
          "99:   nc = mg_bind(&mgr, s_http_port, ev_handler);",
          "103:   mg_set_protocol_http_websocket(nc);",
          "",
          "[Removed Lines]",
          "101:   mg_register_http_endpoint(nc, \"/upload\", handle_upload);",
          "",
          "[Added Lines]",
          "101:   mg_register_http_endpoint(nc, \"/upload\", handle_upload MG_UD_ARG(NULL));",
          "",
          "---------------"
        ],
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "62: MG_INTERNAL int mg_parse_address(const char *str, union socket_address *sa,",
          "63:                                  int *proto, char *host, size_t host_len);",
          "64: MG_INTERNAL void mg_call(struct mg_connection *nc,",
          "66: void mg_forward(struct mg_connection *from, struct mg_connection *to);",
          "67: MG_INTERNAL void mg_add_conn(struct mg_mgr *mgr, struct mg_connection *c);",
          "68: MG_INTERNAL void mg_remove_conn(struct mg_connection *c);",
          "",
          "[Removed Lines]",
          "65:                          mg_event_handler_t ev_handler, int ev, void *ev_data);",
          "",
          "[Added Lines]",
          "65:                          mg_event_handler_t ev_handler, void *user_data, int ev,",
          "66:                          void *ev_data);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2021: }",
          "2023: MG_INTERNAL void mg_call(struct mg_connection *nc,",
          "2025:   if (ev_handler == NULL) {",
          "",
          "[Removed Lines]",
          "2024:                          mg_event_handler_t ev_handler, int ev, void *ev_data) {",
          "",
          "[Added Lines]",
          "2025:                          mg_event_handler_t ev_handler, void *user_data, int ev,",
          "2026:                          void *ev_data) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2051:   if (ev_handler != NULL) {",
          "2052:     unsigned long flags_before = nc->flags;",
          "2053:     size_t recv_mbuf_before = nc->recv_mbuf.len, recved;",
          "2055:     recved = (recv_mbuf_before - nc->recv_mbuf.len);",
          "2057:     if (ev_handler == nc->handler && nc->flags != flags_before) {",
          "",
          "[Removed Lines]",
          "2054:     ev_handler(nc, ev, ev_data MG_UD_ARG(nc->user_data));",
          "",
          "[Added Lines]",
          "2056:     ev_handler(nc, ev, ev_data MG_UD_ARG(user_data));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2067:          ev_handler == nc->handler ? \"user\" : \"proto\", nc->flags,",
          "2068:          (int) nc->recv_mbuf.len, (int) nc->send_mbuf.len));",
          "2069:   }",
          "2070: }",
          "2072: void mg_if_timer(struct mg_connection *c, double now) {",
          "2073:   if (c->ev_timer_time > 0 && now >= c->ev_timer_time) {",
          "2074:     double old_value = c->ev_timer_time;",
          "",
          "[Removed Lines]",
          "2075:     mg_call(c, NULL, MG_EV_TIMER, &now);",
          "",
          "[Added Lines]",
          "2072: #if !MG_ENABLE_CALLBACK_USERDATA",
          "2073:   (void) user_data;",
          "2074: #endif",
          "2080:     mg_call(c, NULL, c->user_data, MG_EV_TIMER, &now);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2086: void mg_if_poll(struct mg_connection *nc, time_t now) {",
          "2087:   if (!(nc->flags & MG_F_SSL) || (nc->flags & MG_F_SSL_HANDSHAKE_DONE)) {",
          "2089:   }",
          "2090: }",
          "",
          "[Removed Lines]",
          "2088:     mg_call(nc, NULL, MG_EV_POLL, &now);",
          "",
          "[Added Lines]",
          "2093:     mg_call(nc, NULL, nc->user_data, MG_EV_POLL, &now);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2108:   DBG((\"%p %lu %d\", conn, conn->flags, conn->sock));",
          "2109:   mg_remove_conn(conn);",
          "2110:   conn->iface->vtable->destroy_conn(conn);",
          "2112:   mg_destroy_conn(conn, 0 /* destroy_if */);",
          "2113: }",
          "",
          "[Removed Lines]",
          "2111:   mg_call(conn, NULL, MG_EV_CLOSE, NULL);",
          "",
          "[Added Lines]",
          "2116:   mg_call(conn, NULL, conn->user_data, MG_EV_CLOSE, NULL);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2452:                          size_t sa_len) {",
          "2453:   (void) sa_len;",
          "2454:   nc->sa = *sa;",
          "2456: }",
          "2458: void mg_send(struct mg_connection *nc, const void *buf, int len) {",
          "",
          "[Removed Lines]",
          "2455:   mg_call(nc, NULL, MG_EV_ACCEPT, &nc->sa);",
          "",
          "[Added Lines]",
          "2460:   mg_call(nc, NULL, nc->user_data, MG_EV_ACCEPT, &nc->sa);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2473:   if (num_sent < 0) {",
          "2474:     nc->flags |= MG_F_CLOSE_IMMEDIATELY;",
          "2475:   }",
          "2477: }",
          "2479: MG_INTERNAL void mg_recv_common(struct mg_connection *nc, void *buf, int len,",
          "",
          "[Removed Lines]",
          "2476:   mg_call(nc, NULL, MG_EV_SEND, &num_sent);",
          "",
          "[Added Lines]",
          "2481:   mg_call(nc, NULL, nc->user_data, MG_EV_SEND, &num_sent);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2502:     mbuf_append(&nc->recv_mbuf, buf, len);",
          "2503:     MG_FREE(buf);",
          "2504:   }",
          "2506: }",
          "2508: void mg_if_recv_tcp_cb(struct mg_connection *nc, void *buf, int len, int own) {",
          "",
          "[Removed Lines]",
          "2505:   mg_call(nc, NULL, MG_EV_RECV, &len);",
          "",
          "[Added Lines]",
          "2510:   mg_call(nc, NULL, nc->user_data, MG_EV_RECV, &len);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2551:         nc->flags |= MG_F_SEND_AND_CLOSE;",
          "2552:         mg_add_conn(lc->mgr, nc);",
          "2554:       } else {",
          "2555:         DBG((\"OOM\"));",
          "",
          "[Removed Lines]",
          "2553:         mg_call(nc, NULL, MG_EV_ACCEPT, &nc->sa);",
          "",
          "[Added Lines]",
          "2558:         mg_call(nc, NULL, nc->user_data, MG_EV_ACCEPT, &nc->sa);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2594:   if (err != 0) {",
          "2595:     nc->flags |= MG_F_CLOSE_IMMEDIATELY;",
          "2596:   }",
          "2598: }",
          "2600: #if MG_ENABLE_ASYNC_RESOLVER",
          "",
          "[Removed Lines]",
          "2597:   mg_call(nc, NULL, MG_EV_CONNECT, &err);",
          "",
          "[Added Lines]",
          "2602:   mg_call(nc, NULL, nc->user_data, MG_EV_CONNECT, &err);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2633:   if (e == MG_RESOLVE_TIMEOUT) {",
          "2634:     double now = mg_time();",
          "2636:   }",
          "2643:   mg_destroy_conn(nc, 1 /* destroy_if */);",
          "2644: }",
          "2645: #endif",
          "",
          "[Removed Lines]",
          "2635:     mg_call(nc, NULL, MG_EV_TIMER, &now);",
          "2641:   mg_call(nc, NULL, MG_EV_CONNECT, &failure);",
          "2642:   mg_call(nc, NULL, MG_EV_CLOSE, NULL);",
          "",
          "[Added Lines]",
          "2640:     mg_call(nc, NULL, nc->user_data, MG_EV_TIMER, &now);",
          "2646:   mg_call(nc, NULL, nc->user_data, MG_EV_CONNECT, &failure);",
          "2647:   mg_call(nc, NULL, nc->user_data, MG_EV_CLOSE, NULL);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "5021:   const char *name;",
          "5022:   size_t name_len;",
          "5023:   mg_event_handler_t handler;",
          "5024: };",
          "5026: enum mg_http_multipart_stream_state {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5029: #if MG_ENABLE_CALLBACK_USERDATA",
          "5030:   void *user_data;",
          "5031: #endif",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "5504:     nc->flags &= ~MG_F_DELETE_CHUNK;",
          "5508:     if (nc->flags & MG_F_DELETE_CHUNK) {",
          "",
          "[Removed Lines]",
          "5505:     mg_call(nc, nc->handler, MG_EV_HTTP_CHUNK, hm);",
          "",
          "[Added Lines]",
          "5513:     mg_call(nc, nc->handler, nc->user_data, MG_EV_HTTP_CHUNK, hm);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "5523:   return body_len;",
          "5524: }",
          "5528:   struct mg_http_proto_data *pd;",
          "5530:   int matched, matched_max = 0;",
          "5531:   struct mg_http_endpoint *ep;",
          "",
          "[Removed Lines]",
          "5526: static mg_event_handler_t mg_http_get_endpoint_handler(",
          "5527:     struct mg_connection *nc, struct mg_str *uri_path) {",
          "5529:   mg_event_handler_t ret = NULL;",
          "",
          "[Added Lines]",
          "5534: struct mg_http_endpoint *mg_http_get_endpoint_handler(struct mg_connection *nc,",
          "5535:                                                       struct mg_str *uri_path) {",
          "5537:   struct mg_http_endpoint *ret = NULL;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "5542:     if ((matched = mg_match_prefix_n(name_s, *uri_path)) != -1) {",
          "5543:       if (matched > matched_max) {",
          "5546:         matched_max = matched;",
          "5547:       }",
          "5548:     }",
          "",
          "[Removed Lines]",
          "5545:         ret = ep->handler;",
          "",
          "[Added Lines]",
          "5553:         ret = ep;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "5556: static void mg_http_call_endpoint_handler(struct mg_connection *nc, int ev,",
          "5557:                                           struct http_message *hm) {",
          "5558:   struct mg_http_proto_data *pd = mg_http_get_proto_data(nc);",
          "5565:   }",
          "5568: }",
          "5570: #if MG_ENABLE_HTTP_STREAMING_MULTIPART",
          "",
          "[Removed Lines]",
          "5560:   if (pd->endpoint_handler == NULL || ev == MG_EV_HTTP_REQUEST) {",
          "5561:     pd->endpoint_handler =",
          "5562:         ev == MG_EV_HTTP_REQUEST",
          "5563:             ? mg_http_get_endpoint_handler(nc->listener, &hm->uri)",
          "5564:             : NULL;",
          "5566:   mg_call(nc, pd->endpoint_handler ? pd->endpoint_handler : nc->handler, ev,",
          "5567:           hm);",
          "",
          "[Added Lines]",
          "5567:   void *user_data = nc->user_data;",
          "5569:   if (ev == MG_EV_HTTP_REQUEST) {",
          "5570:     struct mg_http_endpoint *ep =",
          "5571:         mg_http_get_endpoint_handler(nc->listener, &hm->uri);",
          "5572:     if (ep != NULL) {",
          "5573:       pd->endpoint_handler = ep->handler;",
          "5574: #if MG_ENABLE_CALLBACK_USERDATA",
          "5575:       user_data = ep->user_data;",
          "5576: #endif",
          "5577:     }",
          "5579:   mg_call(nc, pd->endpoint_handler ? pd->endpoint_handler : nc->handler,",
          "5580:           user_data, ev, hm);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "5627:       mp.var_name = pd->mp_stream.var_name;",
          "5628:       mp.file_name = pd->mp_stream.file_name;",
          "5629:       mg_call(nc, (pd->endpoint_handler ? pd->endpoint_handler : nc->handler),",
          "5631:       mp.var_name = NULL;",
          "5632:       mp.file_name = NULL;",
          "5633:       mg_call(nc, (pd->endpoint_handler ? pd->endpoint_handler : nc->handler),",
          "5635:     } else",
          "5636: #endif",
          "5637:         if (io->len > 0 && mg_parse_http(io->buf, io->len, hm, is_req) > 0) {",
          "",
          "[Removed Lines]",
          "5630:               MG_EV_HTTP_PART_END, &mp);",
          "5634:               MG_EV_HTTP_MULTIPART_REQUEST_END, &mp);",
          "",
          "[Added Lines]",
          "5643:               nc->user_data, MG_EV_HTTP_PART_END, &mp);",
          "5647:               nc->user_data, MG_EV_HTTP_MULTIPART_REQUEST_END, &mp);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "5652:   }",
          "5653: #endif",
          "5657:   if (ev == MG_EV_RECV) {",
          "5658:     struct mg_str *s;",
          "",
          "[Removed Lines]",
          "5655:   mg_call(nc, nc->handler, ev, ev_data);",
          "",
          "[Added Lines]",
          "5668:   mg_call(nc, nc->handler, nc->user_data, ev, ev_data);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "5697:       mbuf_remove(io, req_len);",
          "5698:       nc->proto_handler = mg_ws_handler;",
          "5699:       nc->flags |= MG_F_IS_WEBSOCKET;",
          "5701:       mg_ws_handler(nc, MG_EV_RECV, ev_data MG_UD_ARG(user_data));",
          "5702:     } else if (nc->listener != NULL &&",
          "5703:                (vec = mg_get_http_header(hm, \"Sec-WebSocket-Key\")) != NULL) {",
          "5707:       mbuf_remove(io, req_len);",
          "",
          "[Removed Lines]",
          "5700:       mg_call(nc, nc->handler, MG_EV_WEBSOCKET_HANDSHAKE_DONE, NULL);",
          "5704:       mg_event_handler_t handler;",
          "",
          "[Added Lines]",
          "5713:       mg_call(nc, nc->handler, nc->user_data, MG_EV_WEBSOCKET_HANDSHAKE_DONE,",
          "5714:               NULL);",
          "5718:       struct mg_http_endpoint *ep;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "5719:       }",
          "5723:       if (!(nc->flags & (MG_F_CLOSE_IMMEDIATELY | MG_F_SEND_AND_CLOSE))) {",
          "5724:         if (nc->send_mbuf.len == 0) {",
          "5725:           mg_ws_handshake(nc, vec);",
          "5726:         }",
          "5728:         mg_ws_handler(nc, MG_EV_RECV, ev_data MG_UD_ARG(user_data));",
          "5729:       }",
          "5730:     }",
          "",
          "[Removed Lines]",
          "5716:       handler = mg_http_get_endpoint_handler(nc->listener, &hm->uri);",
          "5717:       if (handler != NULL) {",
          "5718:         nc->handler = handler;",
          "5722:       mg_call(nc, nc->handler, MG_EV_WEBSOCKET_HANDSHAKE_REQUEST, hm);",
          "5727:         mg_call(nc, nc->handler, MG_EV_WEBSOCKET_HANDSHAKE_DONE, NULL);",
          "",
          "[Added Lines]",
          "5730:       ep = mg_http_get_endpoint_handler(nc->listener, &hm->uri);",
          "5731:       if (ep != NULL) {",
          "5732:         nc->handler = ep->handler;",
          "5733: #if MG_ENABLE_CALLBACK_USERDATA",
          "5734:         nc->user_data = ep->user_data;",
          "5735: #endif",
          "5739:       mg_call(nc, nc->handler, nc->user_data, MG_EV_WEBSOCKET_HANDSHAKE_REQUEST,",
          "5740:               hm);",
          "5745:         mg_call(nc, nc->handler, nc->user_data, MG_EV_WEBSOCKET_HANDSHAKE_DONE,",
          "5746:                 NULL);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "5805:   struct mg_http_proto_data *pd = mg_http_get_proto_data(nc);",
          "5806:   struct mg_str *ct;",
          "5807:   struct mbuf *io = &nc->recv_mbuf;",
          "5809:   char boundary[100];",
          "5810:   int boundary_len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5827:   void *user_data = nc->user_data;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "5842:     nc->flags |= MG_F_CLOSE_IMMEDIATELY;",
          "5843:   } else {",
          "5844:     pd->mp_stream.state = MPS_BEGIN;",
          "5845:     pd->mp_stream.boundary = strdup(boundary);",
          "5846:     pd->mp_stream.boundary_len = strlen(boundary);",
          "5847:     pd->mp_stream.var_name = pd->mp_stream.file_name = NULL;",
          "5852:     }",
          "5856:     mbuf_remove(io, req_len);",
          "5857:   }",
          "",
          "[Removed Lines]",
          "5849:     pd->endpoint_handler = mg_http_get_endpoint_handler(nc->listener, &hm->uri);",
          "5850:     if (pd->endpoint_handler == NULL) {",
          "5851:       pd->endpoint_handler = nc->handler;",
          "5854:     mg_call(nc, pd->endpoint_handler, MG_EV_HTTP_MULTIPART_REQUEST, hm);",
          "",
          "[Added Lines]",
          "5864:     struct mg_http_endpoint *ep = NULL;",
          "5869:     pd->endpoint_handler = nc->handler;",
          "5871:     ep = mg_http_get_endpoint_handler(nc->listener, &hm->uri);",
          "5872:     if (ep != NULL) {",
          "5873:       pd->endpoint_handler = ep->handler;",
          "5874: #if MG_ENABLE_CALLBACK_USERDATA",
          "5875:       user_data = ep->user_data;",
          "5876: #endif",
          "5879:     mg_call(nc, pd->endpoint_handler, user_data, MG_EV_HTTP_MULTIPART_REQUEST,",
          "5880:             hm);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "5872:   mp.user_data = pd->mp_stream.user_data;",
          "5873:   mp.data.p = data;",
          "5874:   mp.data.len = data_len;",
          "5876:   pd->mp_stream.user_data = mp.user_data;",
          "5877: }",
          "",
          "[Removed Lines]",
          "5875:   mg_call(c, pd->endpoint_handler, ev, &mp);",
          "",
          "[Added Lines]",
          "5901:   mg_call(c, pd->endpoint_handler, c->user_data, ev, &mp);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "7834: }",
          "7836: void mg_register_http_endpoint(struct mg_connection *nc, const char *uri_path,",
          "7838:   struct mg_http_proto_data *pd = NULL;",
          "7839:   struct mg_http_endpoint *new_ep = NULL;",
          "",
          "[Removed Lines]",
          "7837:                                mg_event_handler_t handler) {",
          "",
          "[Added Lines]",
          "7863:                                MG_CB(mg_event_handler_t handler,",
          "7864:                                      void *user_data)) {",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "7846:   new_ep->name = strdup(uri_path);",
          "7847:   new_ep->name_len = strlen(new_ep->name);",
          "7848:   new_ep->handler = handler;",
          "7849:   new_ep->next = pd->endpoints;",
          "7850:   pd->endpoints = new_ep;",
          "7851: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7876: #if MG_ENABLE_CALLBACK_USERDATA",
          "7877:   new_ep->user_data = user_data;",
          "7878: #endif",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "8480:         cctx.req = hm;",
          "8481:         cctx.file = mg_mk_str(path);",
          "8482:         cctx.arg = mg_mk_str(p + d_call.len + 1);",
          "8486: #if MG_ENABLE_HTTP_SSI_EXEC",
          "8487:       } else if (strncmp(p, d_exec.p, d_exec.len) == 0) {",
          "8488:         do_ssi_exec(nc, p + d_exec.len + 1);",
          "",
          "[Removed Lines]",
          "8483:         mg_call(nc, NULL, MG_EV_SSI_CALL,",
          "8485:         mg_call(nc, NULL, MG_EV_SSI_CALL_CTX, &cctx);",
          "",
          "[Added Lines]",
          "8513:         mg_call(nc, NULL, nc->user_data, MG_EV_SSI_CALL,",
          "8515:         mg_call(nc, NULL, nc->user_data, MG_EV_SSI_CALL_CTX, &cctx);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "8846: static void mg_handle_incoming_websocket_frame(struct mg_connection *nc,",
          "8847:                                                struct websocket_message *wsm) {",
          "8848:   if (wsm->flags & 0x8) {",
          "8850:   } else {",
          "8852:   }",
          "8853: }",
          "",
          "[Removed Lines]",
          "8849:     mg_call(nc, nc->handler, MG_EV_WEBSOCKET_CONTROL_FRAME, wsm);",
          "8851:     mg_call(nc, nc->handler, MG_EV_WEBSOCKET_FRAME, wsm);",
          "",
          "[Added Lines]",
          "8879:     mg_call(nc, nc->handler, nc->user_data, MG_EV_WEBSOCKET_CONTROL_FRAME, wsm);",
          "8881:     mg_call(nc, nc->handler, nc->user_data, MG_EV_WEBSOCKET_FRAME, wsm);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "9072: MG_INTERNAL void mg_ws_handler(struct mg_connection *nc, int ev,",
          "9073:                                void *ev_data MG_UD_ARG(void *user_data)) {",
          "9076:   switch (ev) {",
          "9077:     case MG_EV_RECV:",
          "",
          "[Removed Lines]",
          "9074:   mg_call(nc, nc->handler, ev, ev_data);",
          "",
          "[Added Lines]",
          "9104:   mg_call(nc, nc->handler, nc->user_data, ev, ev_data);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "12057:   switch (ev) {",
          "12058:     case MG_EV_CONNECT:",
          "12059:       if (*(int *) ev_data != 0) {",
          "12061:         break;",
          "12062:       }",
          "",
          "[Removed Lines]",
          "12060:         mg_call(c, sd->hander, MG_SNTP_FAILED, NULL);",
          "",
          "[Added Lines]",
          "12090:         mg_call(c, sd->hander, c->user_data, MG_SNTP_FAILED, NULL);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "12067:         mg_set_timer(c, mg_time() + 10);",
          "12068:         sd->count++;",
          "12069:       } else {",
          "12071:         c->flags |= MG_F_CLOSE_IMMEDIATELY;",
          "12072:       }",
          "12073:       break;",
          "12074:     case MG_SNTP_MALFORMED_REPLY:",
          "12076:       c->flags |= MG_F_CLOSE_IMMEDIATELY;",
          "12077:       break;",
          "12078:     case MG_SNTP_REPLY:",
          "12080:       c->flags |= MG_F_CLOSE_IMMEDIATELY;",
          "12081:       break;",
          "12082:     case MG_EV_CLOSE:",
          "",
          "[Removed Lines]",
          "12070:         mg_call(c, sd->hander, MG_SNTP_FAILED, NULL);",
          "12075:       mg_call(c, sd->hander, MG_SNTP_FAILED, NULL);",
          "12079:       mg_call(c, sd->hander, MG_SNTP_REPLY, ev_data);",
          "",
          "[Added Lines]",
          "12100:         mg_call(c, sd->hander, c->user_data, MG_SNTP_FAILED, NULL);",
          "12105:       mg_call(c, sd->hander, c->user_data, MG_SNTP_FAILED, NULL);",
          "12109:       mg_call(c, sd->hander, c->user_data, MG_SNTP_REPLY, ev_data);",
          "",
          "---------------"
        ],
        "mongoose.h||mongoose.h": [
          "File: mongoose.h -> mongoose.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4794: void mg_register_http_endpoint(struct mg_connection *nc, const char *uri_path,",
          "",
          "[Removed Lines]",
          "4795:                                mg_event_handler_t handler);",
          "",
          "[Added Lines]",
          "4795:                                MG_CB(mg_event_handler_t handler,",
          "4796:                                      void *user_data));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c416012f9702794c33d29ecc2445ac6e828f2aef",
      "candidate_info": {
        "commit_hash": "c416012f9702794c33d29ecc2445ac6e828f2aef",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/c416012f9702794c33d29ecc2445ac6e828f2aef",
        "files": [
          "mongoose.c"
        ],
        "message": "MGOS SNTP support for ESP8266 and ESP32\n\nPUBLISHED_FROM=8e07541e7a3b951dcfd08381b46f6143773eae45",
        "before_after_code_files": [
          "mongoose.c||mongoose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "11846: #ifndef MG_SNMP_NO_DELAY_CORRECTION",
          "11847:   uint32_t sec;",
          "11849:   memcpy(&buf[40], &sec, sizeof(sec));",
          "11850: #endif",
          "",
          "[Removed Lines]",
          "11848:   sec = htonl(mg_time() + SNTP_TIME_OFFSET);",
          "",
          "[Added Lines]",
          "11848:   sec = htonl((uint32_t)(mg_time() + SNTP_TIME_OFFSET));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0aaba7a461341916f61929e0a8ea871055d8dd73",
      "candidate_info": {
        "commit_hash": "0aaba7a461341916f61929e0a8ea871055d8dd73",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/0aaba7a461341916f61929e0a8ea871055d8dd73",
        "files": [
          "mongoose.c",
          "mongoose.h"
        ],
        "message": "Add cs_timegm\n\nWhich is a slightly modified version from\nhttps://stackoverflow.com/questions/283166/easy-way-to-convert-a-struct-tm-expressed-in-utc-to-time-t-type\n\nPUBLISHED_FROM=b73f920ca42c45473c23337782e815306bdf69f1",
        "before_after_code_files": [
          "mongoose.c||mongoose.c",
          "mongoose.h||mongoose.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "781:   return now;",
          "782: }",
          "783: #ifdef MG_MODULE_LINES",
          "784: #line 1 \"common/cs_endian.h\"",
          "785: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "784: double cs_timegm(const struct tm *tm) {",
          "786:   static const int month_day[12] = {0,   31,  59,  90,  120, 151,",
          "787:                                     181, 212, 243, 273, 304, 334};",
          "790:   int month = tm->tm_mon % 12;",
          "791:   int year = tm->tm_year + tm->tm_mon / 12;",
          "792:   int year_for_leap;",
          "793:   int64_t rt;",
          "796:     month += 12;",
          "797:     --year;",
          "798:   }",
          "801:   year_for_leap = (month > 1) ? year + 1 : year;",
          "803:   rt =",
          "805:       +",
          "806:       60 *",
          "808:            +",
          "810:                  +",
          "816:   return rt < 0 ? -1 : (double) rt;",
          "817: }",
          "",
          "---------------"
        ],
        "mongoose.h||mongoose.h": [
          "File: mongoose.h -> mongoose.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1797: #ifndef CS_COMMON_CS_TIME_H_",
          "1798: #define CS_COMMON_CS_TIME_H_",
          "1802: #ifdef __cplusplus",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1800: #include <time.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1807: double cs_time(void);",
          "1809: #ifdef __cplusplus",
          "1810: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1815: double cs_timegm(const struct tm *tm);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6517af3deaa54b6478b393bc6dd09ed2fae8531a",
      "candidate_info": {
        "commit_hash": "6517af3deaa54b6478b393bc6dd09ed2fae8531a",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/6517af3deaa54b6478b393bc6dd09ed2fae8531a",
        "files": [
          "mongoose.h"
        ],
        "message": "CC3220 blinky\n\nIgnore all the mess, this is just the beginning...\n\nPUBLISHED_FROM=41ab3c5af0b1d07204619dd4d8dc2e84b6a54f32",
        "before_after_code_files": [
          "mongoose.h||mongoose.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "mongoose.h||mongoose.h": [
          "File: mongoose.h -> mongoose.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: #define CS_P_WINDOWS 2",
          "47: #define CS_P_ESP32 15",
          "48: #define CS_P_ESP8266 3",
          "49: #define CS_P_CC3200 4",
          "50: #define CS_P_MSP432 5",
          "52: #define CS_P_TM4C129 14",
          "53: #define CS_P_MBED 7",
          "54: #define CS_P_WINCE 8",
          "",
          "[Removed Lines]",
          "51: #define CS_P_CC3100 6",
          "",
          "[Added Lines]",
          "49: #define CS_P_CC3100 6",
          "51: #define CS_P_CC3220 17",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "719: #define S_ISDIR(mode) __S_ISTYPE((mode), __S_IFDIR)",
          "720: #define S_ISREG(mode) __S_ISTYPE((mode), __S_IFREG)",
          "723: #define va_copy(apc, ap) ((apc) = (ap))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "725: #if __TI_COMPILER_VERSION__ < 16000000",
          "727: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1115: #undef fd_set",
          "1116: #endif",
          "1120: #define PROVISIONING_API_H_",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1122: #if CS_PLATFORM == CS_P_CC3220",
          "1123: #include <ti/drivers/net/wifi/porting/user.h>",
          "1124: #include <ti/drivers/net/wifi/simplelink.h>",
          "1125: #include <ti/drivers/net/wifi/netapp.h>",
          "1126: #else",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "08353731ef55c40cfbb1310d361602882ba94f41",
      "candidate_info": {
        "commit_hash": "08353731ef55c40cfbb1310d361602882ba94f41",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/08353731ef55c40cfbb1310d361602882ba94f41",
        "files": [
          "mongoose.c"
        ],
        "message": "Fix MQTT PUB{ACK,REC,REL,COMP} and UNSUBACK flags\n\nFlags should be 0 for all of these, except PUBREL (flags = 2).\n\nPUBLISHED_FROM=46bf63fe12020d4cb493e52ceb3bae0291484b40",
        "before_after_code_files": [
          "mongoose.c||mongoose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "9933: static void mg_send_mqtt_short_command(struct mg_connection *nc, uint8_t cmd,",
          "9934:                                        uint16_t message_id) {",
          "9935:   uint16_t message_id_net = htons(message_id);",
          "9936:   mg_send(nc, &message_id_net, 2);",
          "9938: }",
          "9940: void mg_mqtt_puback(struct mg_connection *nc, uint16_t message_id) {",
          "",
          "[Removed Lines]",
          "9937:   mg_mqtt_prepend_header(nc, cmd, MG_MQTT_QOS(1), 2);",
          "",
          "[Added Lines]",
          "9936:   uint8_t flags = (cmd == MG_MQTT_CMD_PUBREL ? 2 : 0);",
          "9938:   mg_mqtt_prepend_header(nc, cmd, flags, 2 /* len */);",
          "",
          "---------------"
        ]
      }
    }
  ]
}