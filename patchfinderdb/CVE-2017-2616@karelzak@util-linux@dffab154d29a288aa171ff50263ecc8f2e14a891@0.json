{
  "cve_id": "CVE-2017-2616",
  "cve_desc": "A race condition was found in util-linux before 2.32.1 in the way su handled the management of child processes. A local authenticated attacker could use this flaw to kill other processes with root privileges under specific conditions.",
  "repo": "karelzak/util-linux",
  "patch_hash": "dffab154d29a288aa171ff50263ecc8f2e14a891",
  "patch_info": {
    "commit_hash": "dffab154d29a288aa171ff50263ecc8f2e14a891",
    "repo": "karelzak/util-linux",
    "commit_url": "https://github.com/karelzak/util-linux/commit/dffab154d29a288aa171ff50263ecc8f2e14a891",
    "files": [
      "login-utils/su-common.c"
    ],
    "message": "su: properly clear child PID\n\nReported-by: Tobias St\u00f6ckmann <tobias@stoeckmann.org>\nSigned-off-by: Karel Zak <kzak@redhat.com>",
    "before_after_code_files": [
      "login-utils/su-common.c||login-utils/su-common.c"
    ]
  },
  "patch_diff": {
    "login-utils/su-common.c||login-utils/su-common.c": [
      "File: login-utils/su-common.c -> login-utils/su-common.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "368:             }",
      "369:           else",
      "370:             status = WEXITSTATUS (status);",
      "371:         }",
      "372:       else if (caught_signal)",
      "373:         status = caught_signal + 128;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "373:    child = (pid_t) -1;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "377:   else",
      "378:     status = 1;",
      "381:     {",
      "382:       fprintf (stderr, _(\"\\nSession terminated, killing shell...\"));",
      "383:       kill (child, SIGTERM);",
      "",
      "[Removed Lines]",
      "380:   if (caught_signal)",
      "",
      "[Added Lines]",
      "383:   if (caught_signal && child != (pid_t)-1)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "388:   if (caught_signal)",
      "389:     {",
      "",
      "[Removed Lines]",
      "390:       sleep (2);",
      "391:       kill (child, SIGKILL);",
      "392:       fprintf (stderr, _(\" ...killed.\\n\"));",
      "",
      "[Added Lines]",
      "393:       if (child != (pid_t)-1)",
      "394:  {",
      "395:    sleep (2);",
      "396:    kill (child, SIGKILL);",
      "397:    fprintf (stderr, _(\" ...killed.\\n\"));",
      "398:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "665f36bed9335adc1c30b69652957ee21d84cfbd",
      "candidate_info": {
        "commit_hash": "665f36bed9335adc1c30b69652957ee21d84cfbd",
        "repo": "karelzak/util-linux",
        "commit_url": "https://github.com/karelzak/util-linux/commit/665f36bed9335adc1c30b69652957ee21d84cfbd",
        "files": [
          "login-utils/su-common.c"
        ],
        "message": "su: keep old sigactions in control struct\n\nSigned-off-by: Karel Zak <kzak@redhat.com>",
        "before_after_code_files": [
          "login-utils/su-common.c||login-utils/su-common.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "login-utils/su-common.c||login-utils/su-common.c"
          ],
          "candidate": [
            "login-utils/su-common.c||login-utils/su-common.c"
          ]
        }
      },
      "candidate_diff": {
        "login-utils/su-common.c||login-utils/su-common.c": [
          "File: login-utils/su-common.c -> login-utils/su-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:  EXIT_ENOENT = 127",
          "100: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102: enum {",
          "103:  SIGTERM_IDX = 0,",
          "104:  SIGINT_IDX,",
          "105:  SIGQUIT_IDX,",
          "107:  SIGNALS_IDX_COUNT",
          "108: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "362: static void create_watching_parent(struct su_context *su)",
          "363: {",
          "372:  sigset_t ourset;",
          "373:  int status;",
          "",
          "[Removed Lines]",
          "364:  enum {",
          "365:   SIGTERM_IDX = 0,",
          "366:   SIGINT_IDX,",
          "367:   SIGQUIT_IDX,",
          "369:   SIGNALS_IDX_COUNT",
          "370:  };",
          "371:  struct sigaction oldact[SIGNALS_IDX_COUNT];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "404:  DBG(SIG, ul_debug(\"initialize signals\"));",
          "407:  sigfillset(&ourset);",
          "408:  if (sigprocmask(SIG_BLOCK, &ourset, NULL)) {",
          "",
          "[Removed Lines]",
          "405:  memset(oldact, 0, sizeof(oldact));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "439:   if (!caught_signal",
          "440:       && !su->same_session",
          "444:    warn(_(\"cannot set signal handler for session\"));",
          "445:    caught_signal = true;",
          "",
          "[Removed Lines]",
          "441:       && (sigaction(SIGINT, &action, &oldact[SIGINT_IDX])",
          "442:          || sigaction(SIGQUIT, &action, &oldact[SIGQUIT_IDX]))) {",
          "",
          "[Added Lines]",
          "442:       && (sigaction(SIGINT, &action, &su->oldact[SIGINT_IDX])",
          "443:          || sigaction(SIGQUIT, &action, &su->oldact[SIGQUIT_IDX]))) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "449:   if (!caught_signal",
          "452:    warn(_(\"cannot set signal handler\"));",
          "453:    caught_signal = true;",
          "",
          "[Removed Lines]",
          "450:        && sigaction(SIGTERM, &action, &oldact[SIGTERM_IDX])) {",
          "",
          "[Added Lines]",
          "451:        && sigaction(SIGTERM, &action, &su->oldact[SIGTERM_IDX])) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "494:   DBG(SIG, ul_debug(\"restore signals setting\"));",
          "495:   switch (caught_signal) {",
          "496:   case SIGTERM:",
          "498:    break;",
          "499:   case SIGINT:",
          "501:    break;",
          "502:   case SIGQUIT:",
          "504:    break;",
          "505:   default:",
          "",
          "[Removed Lines]",
          "497:    sigaction(SIGTERM, &oldact[SIGTERM_IDX], NULL);",
          "500:    sigaction(SIGINT, &oldact[SIGINT_IDX], NULL);",
          "503:    sigaction(SIGQUIT, &oldact[SIGQUIT_IDX], NULL);",
          "",
          "[Added Lines]",
          "498:    sigaction(SIGTERM, &su->oldact[SIGTERM_IDX], NULL);",
          "501:    sigaction(SIGINT, &su->oldact[SIGINT_IDX], NULL);",
          "504:    sigaction(SIGQUIT, &su->oldact[SIGQUIT_IDX], NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8ce9c38690103fa18fc17fa209996ce747186cd4",
      "candidate_info": {
        "commit_hash": "8ce9c38690103fa18fc17fa209996ce747186cd4",
        "repo": "karelzak/util-linux",
        "commit_url": "https://github.com/karelzak/util-linux/commit/8ce9c38690103fa18fc17fa209996ce747186cd4",
        "files": [
          "login-utils/su-common.c"
        ],
        "message": "su: unblock signals is all initialized\n\nThis patch a little bit reorders signals initialization. The original\ncode unblocks SIGINT SIGQUIT before signal handler is set for the\nsignals. It means there is a small possible race.\n\nIt seems better to compose wanted mask, setup handlers and then\nunblock all the wanted signals.\n\nSigned-off-by: Karel Zak <kzak@redhat.com>",
        "before_after_code_files": [
          "login-utils/su-common.c||login-utils/su-common.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "login-utils/su-common.c||login-utils/su-common.c"
          ],
          "candidate": [
            "login-utils/su-common.c||login-utils/su-common.c"
          ]
        }
      },
      "candidate_diff": {
        "login-utils/su-common.c||login-utils/su-common.c": [
          "File: login-utils/su-common.c -> login-utils/su-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "382:   action.sa_handler = su_catch_sig;",
          "383:   sigemptyset(&action.sa_mask);",
          "384:   action.sa_flags = 0;",
          "385:   sigemptyset(&ourset);",
          "387:   if (!su->same_session",
          "388:       && (sigaddset(&ourset, SIGINT)",
          "389:          || sigaddset(&ourset, SIGQUIT))) {",
          "392:    caught_signal = true;",
          "393:   }",
          "394:   if (!caught_signal",
          "395:       && (sigaddset(&ourset, SIGTERM)",
          "401:    caught_signal = true;",
          "402:   }",
          "403:   if (!caught_signal",
          "404:       && !su->same_session",
          "405:       && (sigaction(SIGINT, &action, &oldact[SIGINT_IDX])",
          "406:          || sigaction(SIGQUIT, &action, &oldact[SIGQUIT_IDX]))) {",
          "408:    warn(_(\"cannot set signal handler\"));",
          "409:    caught_signal = true;",
          "410:   }",
          "411:  }",
          "",
          "[Removed Lines]",
          "391:    warn(_(\"cannot set signal handler\"));",
          "396:          || sigaddset(&ourset, SIGALRM)",
          "397:          || sigaction(SIGTERM, &action, &oldact[SIGTERM_IDX])",
          "398:          || sigprocmask(SIG_UNBLOCK, &ourset, NULL))) {",
          "400:    warn(_(\"cannot set signal handler\"));",
          "",
          "[Added Lines]",
          "390:    warn(_(\"cannot initialize signal mask for session\"));",
          "396:          || sigaddset(&ourset, SIGALRM))) {",
          "398:    warn(_(\"cannot initialize signal mask\"));",
          "408:    warn(_(\"cannot set signal handler for session\"));",
          "409:    caught_signal = true;",
          "410:   }",
          "413:   if (!caught_signal",
          "414:        && sigaction(SIGTERM, &action, &oldact[SIGTERM_IDX])) {",
          "421:   if (!caught_signal",
          "422:       && sigprocmask(SIG_UNBLOCK, &ourset, NULL)) {",
          "424:    warn(_(\"cannot set signal mask\"));",
          "425:    caught_signal = true;",
          "426:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2260e493d6a4ef690c34d878c63f1cff6533b62a",
      "candidate_info": {
        "commit_hash": "2260e493d6a4ef690c34d878c63f1cff6533b62a",
        "repo": "karelzak/util-linux",
        "commit_url": "https://github.com/karelzak/util-linux/commit/2260e493d6a4ef690c34d878c63f1cff6533b62a",
        "files": [
          "login-utils/su-common.c"
        ],
        "message": "su: add debug.h stuff\n\nSigned-off-by: Karel Zak <kzak@redhat.com>",
        "before_after_code_files": [
          "login-utils/su-common.c||login-utils/su-common.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "login-utils/su-common.c||login-utils/su-common.c"
          ],
          "candidate": [
            "login-utils/su-common.c||login-utils/su-common.c"
          ]
        }
      },
      "candidate_diff": {
        "login-utils/su-common.c||login-utils/su-common.c": [
          "File: login-utils/su-common.c -> login-utils/su-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: #include \"logindefs.h\"",
          "55: #include \"su-common.h\"",
          "58: #define PAM_SRVNAME_SU \"su\"",
          "59: #define PAM_SRVNAME_SU_L \"su-l\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: #include \"debug.h\"",
          "59: UL_DEBUG_DEFINE_MASK(su);",
          "60: UL_DEBUG_DEFINE_MASKNAMES(su) = UL_DEBUG_EMPTY_MASKNAMES;",
          "62: #define SU_DEBUG_INIT  (1 << 1)",
          "63: #define SU_DEBUG_PAM  (1 << 2)",
          "64: #define SU_DEBUG_PARENT  (1 << 3)",
          "65: #define SU_DEBUG_TTY  (1 << 4)",
          "66: #define SU_DEBUG_LOG  (1 << 5)",
          "67: #define SU_DEBUG_MISC  (1 << 6)",
          "68: #define SU_DEBUG_SIG  (1 << 7)",
          "69: #define SU_DEBUG_ALL  0xFFFF",
          "71: #define DBG(m, x)       __UL_DBG(su, SU_DEBUG_, m, x)",
          "72: #define ON_DBG(m, x)    __UL_DBG_CALL(su, SU_DEBUG_, m, x)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:  caught_signal = sig;",
          "121: }",
          "123: static void init_tty(struct su_context *su)",
          "124: {",
          "125:  su->isterm = isatty(STDIN_FILENO) ? 1 : 0;",
          "126:  if (su->isterm)",
          "127:   get_terminal_name(NULL, &su->tty_name, &su->tty_number);",
          "128: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141: static void su_init_debug(void)",
          "142: {",
          "143:  __UL_INIT_DEBUG(su, SU_DEBUG_, 0, SU_DEBUG);",
          "144: }",
          "149:  DBG(TTY, ul_debug(\"initilize [is-term=%s]\", su->isterm ? \"true\" : \"false\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "133: static void log_syslog(struct su_context *su, bool successful)",
          "134: {",
          "135:  openlog(program_invocation_short_name, 0, LOG_AUTH);",
          "136:  syslog(LOG_NOTICE, \"%s(to %s) %s on %s\",",
          "137:         successful ? \"\" :",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159:  DBG(LOG, ul_debug(\"syslog logging\"));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "149:  struct utmpx ut;",
          "150:  struct timeval tv;",
          "152:  memset(&ut, 0, sizeof(ut));",
          "153:  strncpy(ut.ut_user,",
          "154:   su->pwd && su->pwd->pw_name ? su->pwd->pw_name : \"(unknown)\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178:  DBG(LOG, ul_debug(\"btmp logging\"));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "191: {",
          "192:  const int errsv = errno;",
          "194:  if (su->pam_has_session)",
          "195:   pam_close_session(su->pamh, 0);",
          "196:  if (su->pam_has_cred)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222:  DBG(PAM, ul_debug(\"cleanup\"));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "203: static void supam_export_environment(struct su_context *su)",
          "204: {",
          "208:  while (env && *env) {",
          "209:   if (putenv(*env) != 0)",
          "",
          "[Removed Lines]",
          "206:  char **env = pam_getenvlist(su->pamh);",
          "",
          "[Added Lines]",
          "235:  char **env;",
          "237:  DBG(PAM, ul_debug(\"init environ[]\"));",
          "240:  env = pam_getenvlist(su->pamh);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "221:      (su->simulate_login ? PAM_SRVNAME_RUNUSER_L : PAM_SRVNAME_RUNUSER) :",
          "222:      (su->simulate_login ? PAM_SRVNAME_SU_L : PAM_SRVNAME_SU);",
          "224:  rc = pam_start(srvname, su->pwd->pw_name, &su->conv, &su->pamh);",
          "225:  if (is_pam_failure(rc))",
          "226:   goto done;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "258:  DBG(PAM, ul_debug(\"start [name: %s]\", srvname));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "259:  if (is_pam_failure(rc)) {",
          "260:   const char *msg;",
          "262:   log_btmp(su);",
          "264:   msg = pam_strerror(su->pamh, rc);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "298:   DBG(PAM, ul_debug(\"authentication failed\"));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "271: static void supam_open_session(struct su_context *su)",
          "272: {",
          "275:  if (is_pam_failure(rc)) {",
          "276:   supam_cleanup(su, rc);",
          "277:   errx(EXIT_FAILURE, _(\"cannot open session: %s\"),",
          "",
          "[Removed Lines]",
          "273:  int rc = pam_open_session(su->pamh, 0);",
          "",
          "[Added Lines]",
          "310:  int rc;",
          "312:  DBG(PAM, ul_debug(\"opening session\"));",
          "314:  rc = pam_open_session(su->pamh, 0);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "288:  struct sigaction oldact[3];",
          "289:  int status = 0;",
          "291:  switch ((int) (child = fork())) {",
          "293:   supam_cleanup(su, PAM_ABORT);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "331:  DBG(MISC, ul_debug(\"forking...\"));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "298:   return;",
          "301:   break;",
          "302:  }",
          "304:  memset(oldact, 0, sizeof(oldact));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "343:   DBG(MISC, ul_debug(\"child [pid=%d]\", (int) child));",
          "348:  DBG(SIG, ul_debug(\"initialize signals\"));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "347:  }",
          "348:  if (!caught_signal) {",
          "349:   pid_t pid;",
          "350:   for (;;) {",
          "351:    pid = waitpid(child, &status, WUNTRACED);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "396:   DBG(SIG, ul_debug(\"waiting for child\"));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "370:    status = caught_signal + 128;",
          "371:   else",
          "372:    status = 1;",
          "373:  } else",
          "374:   status = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "421:   DBG(SIG, ul_debug(\"child is dead [status=%d]\", status));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "381:  supam_cleanup(su, PAM_SUCCESS);",
          "383:  if (caught_signal) {",
          "384:   sleep(2);",
          "385:   kill(child, SIGKILL);",
          "386:   fprintf(stderr, _(\" ...killed.\\n\"));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "433:   DBG(SIG, ul_debug(\"killing child\"));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "394:   switch (caught_signal) {",
          "395:   case SIGTERM:",
          "396:    sigaction(SIGTERM, &oldact[0], NULL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "444:   DBG(SIG, ul_debug(\"restore signals setting\"));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "407:    caught_signal = SIGKILL;",
          "408:    break;",
          "409:   }",
          "410:   kill(getpid(), caught_signal);",
          "411:  }",
          "412:  exit(status);",
          "413: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "461:   DBG(SIG, ul_debug(\"self-send %d signal\", caught_signal));",
          "465:  DBG(MISC, ul_debug(\"exiting [rc=%d]\", status));",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "416: {",
          "417:  int rc;",
          "419:  if (pw->pw_uid)",
          "420:   rc = logindefs_setenv(\"PATH\", \"ENV_PATH\", _PATH_DEFPATH);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "473:  DBG(MISC, ul_debug(\"setting PATH\"));",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "430: {",
          "431:  const struct passwd *pw = su->pwd;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "490:  DBG(MISC, ul_debug(\"modify environ[]\"));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "475: {",
          "476:  int rc;",
          "478:  errno = 0;",
          "479:  if (ngroups)",
          "480:   rc = setgroups(ngroups, groups);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "537:  DBG(MISC, ul_debug(\"initialize groups\"));",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "497: static void change_identity(const struct passwd *pw)",
          "498: {",
          "499:  if (setgid(pw->pw_gid))",
          "500:   err(EXIT_FAILURE, _(\"cannot set group id\"));",
          "501:  if (setuid(pw->pw_uid))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "560:  DBG(MISC, ul_debug(\"changing identity [GID=%d, UID=%d]\", pw->pw_gid, pw->pw_uid));",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "516:  size_t argno = 1;",
          "517:  int rc;",
          "519:  if (su->simulate_login) {",
          "520:   char *arg0;",
          "521:   char *shell_basename;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "582:  DBG(MISC, ul_debug(\"starting shell [shell=%s, command=%s]\", shell, command));",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "632: {",
          "633:  struct su_context *su = (struct su_context *) data;",
          "635:  logindefs_load_file(su->runuser ? _PATH_LOGINDEFS_RUNUSER : _PATH_LOGINDEFS_SU);",
          "636:  logindefs_load_file(_PATH_LOGINDEFS);",
          "637: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "700:  DBG(MISC, ul_debug(\"loading logindefs\"));",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "662:  if (!gr)",
          "663:   errx(EXIT_FAILURE, _(\"group %s does not exist\"), name);",
          "666:  (*groups)[*ngroups] = gr->gr_gid;",
          "667:  (*ngroups)++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "731:  DBG(MISC, ul_debug(\"add %s group [name=%s, GID=%d]\", name, gr->gr_name, (int) gr->gr_gid));",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "709:  textdomain(PACKAGE);",
          "710:  atexit(close_stdout);",
          "712:  su->conv.appdata_ptr = (void *) su;",
          "714:  while ((optc =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "780:  su_init_debug();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "983652abc1de5a9fecc1a3028a0aa990b3ecb352",
      "candidate_info": {
        "commit_hash": "983652abc1de5a9fecc1a3028a0aa990b3ecb352",
        "repo": "karelzak/util-linux",
        "commit_url": "https://github.com/karelzak/util-linux/commit/983652abc1de5a9fecc1a3028a0aa990b3ecb352",
        "files": [
          "login-utils/su-common.c"
        ],
        "message": "su: fix indention\n\nYes, I know... this patch is horrible. We all hate this in git\nhistory, but the original indention from coreutils has been so\ncrazy...\n\nSigned-off-by: Karel Zak <kzak@redhat.com>",
        "before_after_code_files": [
          "login-utils/su-common.c||login-utils/su-common.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "login-utils/su-common.c||login-utils/su-common.c"
          ],
          "candidate": [
            "login-utils/su-common.c||login-utils/su-common.c"
          ]
        }
      },
      "candidate_diff": {
        "login-utils/su-common.c||login-utils/su-common.c": [
          "File: login-utils/su-common.c -> login-utils/su-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: };",
          "46: #include <config.h>",
          "",
          "[Removed Lines]",
          "40: enum",
          "41: {",
          "42:   EXIT_CANNOT_INVOKE = 126,",
          "43:   EXIT_ENOENT = 127",
          "",
          "[Added Lines]",
          "40: enum {",
          "41:  EXIT_CANNOT_INVOKE = 126,",
          "42:  EXIT_ENOENT = 127",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51: #include <grp.h>",
          "52: #include <security/pam_appl.h>",
          "53: #ifdef HAVE_SECURITY_PAM_MISC_H",
          "55: #elif defined(HAVE_SECURITY_OPENPAM_H)",
          "57: #endif",
          "58: #include <signal.h>",
          "59: #include <sys/wait.h>",
          "",
          "[Removed Lines]",
          "54: # include <security/pam_misc.h>",
          "56: # include <security/openpam.h>",
          "",
          "[Added Lines]",
          "53: #include <security/pam_misc.h>",
          "55: #include <security/openpam.h>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97: extern char **environ;",
          "98: #endif",
          "104: static bool fast_startup;",
          "",
          "[Removed Lines]",
          "100: static void run_shell (char const *, char const *, char **, size_t)",
          "101:      __attribute__ ((__noreturn__));",
          "",
          "[Added Lines]",
          "99: static void run_shell(char const *, char const *, char **, size_t)",
          "100:     __attribute__ ((__noreturn__));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "129: static const struct passwd *",
          "130: current_getpwuid(void)",
          "131: {",
          "146: }",
          "",
          "[Removed Lines]",
          "132:   uid_t ruid;",
          "142:   errno = 0;",
          "143:   ruid = getuid ();",
          "145:   return errno == 0 ? getpwuid (ruid) : NULL;",
          "",
          "[Added Lines]",
          "130:  uid_t ruid;",
          "140:  errno = 0;",
          "141:  ruid = getuid();",
          "143:  return errno == 0 ? getpwuid(ruid) : NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "151: static void",
          "152: log_syslog(struct passwd const * const pw, const bool successful)",
          "153: {",
          "",
          "[Removed Lines]",
          "154:   const char *new_user, *old_user, *tty;",
          "156:   new_user = pw->pw_name;",
          "159:   old_user = getlogin ();",
          "160:   if (!old_user)",
          "161:     {",
          "164:       const struct passwd *pwd = current_getpwuid();",
          "165:       old_user = pwd ? pwd->pw_name : \"\";",
          "166:     }",
          "168:   if (get_terminal_name(NULL, &tty, NULL) != 0 || !tty)",
          "169:     tty = \"none\";",
          "171:   openlog (program_invocation_short_name, 0 , LOG_AUTH);",
          "172:   syslog (LOG_NOTICE, \"%s(to %s) %s on %s\",",
          "173:    successful ? \"\" :",
          "174:    su_mode == RUNUSER_MODE ? \"FAILED RUNUSER \" : \"FAILED SU \",",
          "175:    new_user, old_user, tty);",
          "176:   closelog ();",
          "177: }",
          "",
          "[Added Lines]",
          "152:  const char *new_user, *old_user, *tty;",
          "154:  new_user = pw->pw_name;",
          "157:  old_user = getlogin();",
          "158:  if (!old_user) {",
          "161:   const struct passwd *pwd = current_getpwuid();",
          "162:   old_user = pwd ? pwd->pw_name : \"\";",
          "163:  }",
          "165:  if (get_terminal_name(NULL, &tty, NULL) != 0 || !tty)",
          "166:   tty = \"none\";",
          "168:  openlog(program_invocation_short_name, 0, LOG_AUTH);",
          "169:  syslog(LOG_NOTICE, \"%s(to %s) %s on %s\",",
          "170:         successful ? \"\" :",
          "171:         su_mode == RUNUSER_MODE ? \"FAILED RUNUSER \" : \"FAILED SU \",",
          "172:         new_user, old_user, tty);",
          "173:  closelog();",
          "174: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "207:  updwtmpx(_PATH_BTMP, &ut);",
          "208: }",
          "213: {",
          "214:  if (suppress_pam_info",
          "218:   return PAM_SUCCESS;",
          "219: #ifdef HAVE_SECURITY_PAM_MISC_H",
          "220:  return misc_conv(num_msg, msg, resp, appdata_ptr);",
          "",
          "[Removed Lines]",
          "211: static int su_pam_conv(int num_msg, const struct pam_message **msg,",
          "212:                        struct pam_response **resp, void *appdata_ptr)",
          "215:      && num_msg == 1",
          "216:      && msg",
          "217:      && msg[0]->msg_style == PAM_TEXT_INFO)",
          "",
          "[Added Lines]",
          "206: static int",
          "207: su_pam_conv(int num_msg, const struct pam_message **msg,",
          "208:      struct pam_response **resp, void *appdata_ptr)",
          "211:      && num_msg == 1 && msg && msg[0]->msg_style == PAM_TEXT_INFO)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "223: #endif",
          "224: }",
          "228:  su_pam_conv,",
          "229:  NULL",
          "230: };",
          "232: static void",
          "234: {",
          "246: }",
          "249: static void",
          "251: {",
          "253: }",
          "256: static void",
          "258: {",
          "269: }",
          "271: static void",
          "273: {",
          "336:  }",
          "359:  }",
          "397:  }",
          "424: }",
          "426: static void",
          "428: {",
          "507: }",
          "509: static void",
          "510: set_path(const struct passwd * const pw)",
          "511: {",
          "521: }",
          "",
          "[Removed Lines]",
          "226: static struct pam_conv conv =",
          "227: {",
          "233: cleanup_pam (const int retcode)",
          "235:   const int saved_errno = errno;",
          "237:   if (_pam_session_opened)",
          "238:     pam_close_session (pamh, 0);",
          "240:   if (_pam_cred_established)",
          "241:     pam_setcred (pamh, PAM_DELETE_CRED | PAM_SILENT);",
          "243:   pam_end(pamh, retcode);",
          "245:   errno = saved_errno;",
          "250: su_catch_sig (int sig)",
          "252:   caught_signal = sig;",
          "257: export_pamenv (void)",
          "259:   char **env;",
          "262:   env = pam_getenvlist (pamh);",
          "263:   while (env && *env)",
          "264:     {",
          "265:       if (putenv (*env) != 0)",
          "266:  err (EXIT_FAILURE, NULL);",
          "267:       env++;",
          "268:     }",
          "272: create_watching_parent (void)",
          "274:   pid_t child;",
          "275:   sigset_t ourset;",
          "276:   struct sigaction oldact[3];",
          "277:   int status = 0;",
          "278:   const int retval = pam_open_session (pamh, 0);",
          "280:   if (is_pam_failure(retval))",
          "281:     {",
          "282:       cleanup_pam (retval);",
          "283:       errx (EXIT_FAILURE, _(\"cannot open session: %s\"),",
          "284:       pam_strerror (pamh, retval));",
          "285:     }",
          "286:   else",
          "287:     _pam_session_opened = 1;",
          "289:   memset(oldact, 0, sizeof(oldact));",
          "291:   child = fork ();",
          "292:   if (child == (pid_t) -1)",
          "293:     {",
          "294:       cleanup_pam (PAM_ABORT);",
          "295:       err (EXIT_FAILURE, _(\"cannot create child process\"));",
          "296:     }",
          "299:   if (child == 0)",
          "300:     return;",
          "306:   if (chdir (\"/\") != 0)",
          "307:     warn (_(\"cannot change directory to %s\"), \"/\");",
          "309:   sigfillset (&ourset);",
          "310:   if (sigprocmask (SIG_BLOCK, &ourset, NULL))",
          "311:     {",
          "312:       warn (_(\"cannot block signals\"));",
          "313:       caught_signal = true;",
          "314:     }",
          "315:   if (!caught_signal)",
          "316:     {",
          "317:       struct sigaction action;",
          "318:       action.sa_handler = su_catch_sig;",
          "319:       sigemptyset (&action.sa_mask);",
          "320:       action.sa_flags = 0;",
          "321:       sigemptyset (&ourset);",
          "322:     if (!same_session)",
          "323:       {",
          "324:         if (sigaddset(&ourset, SIGINT) || sigaddset(&ourset, SIGQUIT))",
          "325:           {",
          "326:             warn (_(\"cannot set signal handler\"));",
          "327:             caught_signal = true;",
          "328:           }",
          "329:       }",
          "330:     if (!caught_signal && (sigaddset(&ourset, SIGTERM)",
          "331:                     || sigaddset(&ourset, SIGALRM)",
          "332:                     || sigaction(SIGTERM, &action, &oldact[0])",
          "333:                     || sigprocmask(SIG_UNBLOCK, &ourset, NULL))) {",
          "334:    warn (_(\"cannot set signal handler\"));",
          "335:    caught_signal = true;",
          "337:     if (!caught_signal && !same_session && (sigaction(SIGINT, &action, &oldact[1])",
          "338:                                      || sigaction(SIGQUIT, &action, &oldact[2])))",
          "339:       {",
          "340:         warn (_(\"cannot set signal handler\"));",
          "341:         caught_signal = true;",
          "342:       }",
          "343:     }",
          "344:   if (!caught_signal)",
          "345:     {",
          "346:       pid_t pid;",
          "347:       for (;;)",
          "348:  {",
          "349:    pid = waitpid (child, &status, WUNTRACED);",
          "351:    if (pid != (pid_t)-1 && WIFSTOPPED (status))",
          "352:      {",
          "353:        kill (getpid (), SIGSTOP);",
          "355:        kill (pid, SIGCONT);",
          "356:      }",
          "357:    else",
          "358:      break;",
          "360:       if (pid != (pid_t)-1)",
          "361:         {",
          "362:           if (WIFSIGNALED (status))",
          "363:             {",
          "364:               fprintf (stderr, \"%s%s\\n\", strsignal (WTERMSIG (status)),",
          "365:                        WCOREDUMP (status) ? _(\" (core dumped)\") : \"\");",
          "366:               status = WTERMSIG (status) + 128;",
          "367:             }",
          "368:           else",
          "369:             status = WEXITSTATUS (status);",
          "372:    child = (pid_t) -1;",
          "373:         }",
          "374:       else if (caught_signal)",
          "375:         status = caught_signal + 128;",
          "376:       else",
          "377:         status = 1;",
          "378:     }",
          "379:   else",
          "380:     status = 1;",
          "382:   if (caught_signal && child != (pid_t)-1)",
          "383:     {",
          "384:       fprintf (stderr, _(\"\\nSession terminated, killing shell...\"));",
          "385:       kill (child, SIGTERM);",
          "386:     }",
          "388:   cleanup_pam (PAM_SUCCESS);",
          "390:   if (caught_signal)",
          "391:     {",
          "392:       if (child != (pid_t)-1)",
          "393:  {",
          "394:    sleep (2);",
          "395:    kill (child, SIGKILL);",
          "396:    fprintf (stderr, _(\" ...killed.\\n\"));",
          "405:       switch (caught_signal) {",
          "406:         case SIGTERM:",
          "407:           sigaction(SIGTERM, &oldact[0], NULL);",
          "408:           break;",
          "409:         case SIGINT:",
          "410:           sigaction(SIGINT, &oldact[1], NULL);",
          "411:           break;",
          "412:         case SIGQUIT:",
          "413:           sigaction(SIGQUIT, &oldact[2], NULL);",
          "414:           break;",
          "415:         default:",
          "418:           caught_signal = SIGKILL;",
          "419:           break;",
          "420:       }",
          "421:       kill(getpid(), caught_signal);",
          "422:     }",
          "423:   exit (status);",
          "427: authenticate (const struct passwd * const pw)",
          "429:   const struct passwd *lpw = NULL;",
          "430:   const char *cp, *srvname = NULL;",
          "431:   int retval;",
          "433:   switch (su_mode) {",
          "434:   case SU_MODE:",
          "435:     srvname = simulate_login ? PAM_SRVNAME_SU_L : PAM_SRVNAME_SU;",
          "436:     break;",
          "437:   case RUNUSER_MODE:",
          "438:     srvname = simulate_login ? PAM_SRVNAME_RUNUSER_L : PAM_SRVNAME_RUNUSER;",
          "439:     break;",
          "440:   default:",
          "441:     abort();",
          "442:     break;",
          "443:   }",
          "445:   retval = pam_start (srvname, pw->pw_name, &conv, &pamh);",
          "446:   if (is_pam_failure(retval))",
          "447:     goto done;",
          "449:   if (isatty (0) && (cp = ttyname (0)) != NULL)",
          "450:     {",
          "451:       const char *tty;",
          "453:       if (strncmp (cp, \"/dev/\", 5) == 0)",
          "454:  tty = cp + 5;",
          "455:       else",
          "456:  tty = cp;",
          "457:       retval = pam_set_item (pamh, PAM_TTY, tty);",
          "458:       if (is_pam_failure(retval))",
          "459:  goto done;",
          "460:     }",
          "462:   lpw = current_getpwuid ();",
          "463:   if (lpw && lpw->pw_name)",
          "464:     {",
          "465:       retval = pam_set_item (pamh, PAM_RUSER, (const void *) lpw->pw_name);",
          "466:       if (is_pam_failure(retval))",
          "467:  goto done;",
          "468:     }",
          "470:   if (su_mode == RUNUSER_MODE)",
          "471:     {",
          "476:       if (restricted)",
          "477:  errx(EXIT_FAILURE, _(\"may not be used by non-root users\"));",
          "478:       return;",
          "479:     }",
          "481:   retval = pam_authenticate (pamh, 0);",
          "482:   if (is_pam_failure(retval))",
          "483:     goto done;",
          "485:   retval = pam_acct_mgmt (pamh, 0);",
          "486:   if (retval == PAM_NEW_AUTHTOK_REQD)",
          "487:     {",
          "489:       retval = pam_chauthtok (pamh, PAM_CHANGE_EXPIRED_AUTHTOK);",
          "490:     }",
          "492: done:",
          "494:   log_syslog(pw, !is_pam_failure(retval));",
          "496:   if (is_pam_failure(retval))",
          "497:     {",
          "498:       const char *msg;",
          "500:       log_btmp(pw);",
          "502:       msg  = pam_strerror(pamh, retval);",
          "503:       pam_end(pamh, retval);",
          "504:       sleep (getlogindefs_num (\"FAIL_DELAY\", 1));",
          "505:       errx (EXIT_FAILURE, \"%s\", msg?msg:_(\"incorrect password\"));",
          "506:     }",
          "512:   int r;",
          "513:   if (pw->pw_uid)",
          "514:     r = logindefs_setenv(\"PATH\", \"ENV_PATH\", _PATH_DEFPATH);",
          "516:   else if ((r = logindefs_setenv(\"PATH\", \"ENV_ROOTPATH\", NULL)) != 0)",
          "517:     r = logindefs_setenv(\"PATH\", \"ENV_SUPATH\", _PATH_DEFPATH_ROOT);",
          "519:   if (r != 0)",
          "520:     err (EXIT_FAILURE,  _(\"failed to set the %s environment variable\"), \"PATH\");",
          "",
          "[Added Lines]",
          "220: static struct pam_conv conv = {",
          "226: cleanup_pam(const int retcode)",
          "228:  const int saved_errno = errno;",
          "230:  if (_pam_session_opened)",
          "231:   pam_close_session(pamh, 0);",
          "233:  if (_pam_cred_established)",
          "234:   pam_setcred(pamh, PAM_DELETE_CRED | PAM_SILENT);",
          "236:  pam_end(pamh, retcode);",
          "238:  errno = saved_errno;",
          "243: su_catch_sig(int sig)",
          "245:  caught_signal = sig;",
          "250: export_pamenv(void)",
          "252:  char **env;",
          "255:  env = pam_getenvlist(pamh);",
          "256:  while (env && *env) {",
          "257:   if (putenv(*env) != 0)",
          "258:    err(EXIT_FAILURE, NULL);",
          "259:   env++;",
          "260:  }",
          "264: create_watching_parent(void)",
          "266:  pid_t child;",
          "267:  sigset_t ourset;",
          "268:  struct sigaction oldact[3];",
          "269:  int status = 0;",
          "270:  int retval;",
          "272:  retval = pam_open_session(pamh, 0);",
          "273:  if (is_pam_failure(retval)) {",
          "274:   cleanup_pam(retval);",
          "275:   errx(EXIT_FAILURE, _(\"cannot open session: %s\"),",
          "276:        pam_strerror(pamh, retval));",
          "277:  } else",
          "278:   _pam_session_opened = 1;",
          "280:  memset(oldact, 0, sizeof(oldact));",
          "282:  child = fork();",
          "283:  if (child == (pid_t) - 1) {",
          "284:   cleanup_pam(PAM_ABORT);",
          "285:   err(EXIT_FAILURE, _(\"cannot create child process\"));",
          "289:  if (child == 0)",
          "290:   return;",
          "296:  if (chdir(\"/\") != 0)",
          "297:   warn(_(\"cannot change directory to %s\"), \"/\");",
          "299:  sigfillset(&ourset);",
          "300:  if (sigprocmask(SIG_BLOCK, &ourset, NULL)) {",
          "301:   warn(_(\"cannot block signals\"));",
          "302:   caught_signal = true;",
          "304:  if (!caught_signal) {",
          "305:   struct sigaction action;",
          "306:   action.sa_handler = su_catch_sig;",
          "307:   sigemptyset(&action.sa_mask);",
          "308:   action.sa_flags = 0;",
          "309:   sigemptyset(&ourset);",
          "310:   if (!same_session) {",
          "311:    if (sigaddset(&ourset, SIGINT)",
          "312:        || sigaddset(&ourset, SIGQUIT)) {",
          "313:     warn(_(\"cannot set signal handler\"));",
          "314:     caught_signal = true;",
          "315:    }",
          "316:   }",
          "317:   if (!caught_signal && (sigaddset(&ourset, SIGTERM)",
          "318:            || sigaddset(&ourset, SIGALRM)",
          "319:            || sigaction(SIGTERM, &action,",
          "320:           &oldact[0])",
          "321:            || sigprocmask(SIG_UNBLOCK, &ourset,",
          "322:             NULL))) {",
          "323:    warn(_(\"cannot set signal handler\"));",
          "324:    caught_signal = true;",
          "325:   }",
          "326:   if (!caught_signal && !same_session",
          "327:       && (sigaction(SIGINT, &action, &oldact[1])",
          "328:    || sigaction(SIGQUIT, &action, &oldact[2]))) {",
          "329:    warn(_(\"cannot set signal handler\"));",
          "330:    caught_signal = true;",
          "331:   }",
          "332:  }",
          "333:  if (!caught_signal) {",
          "334:   pid_t pid;",
          "335:   for (;;) {",
          "336:    pid = waitpid(child, &status, WUNTRACED);",
          "338:    if (pid != (pid_t) - 1 && WIFSTOPPED(status)) {",
          "339:     kill(getpid(), SIGSTOP);",
          "341:     kill(pid, SIGCONT);",
          "342:    } else",
          "343:     break;",
          "344:   }",
          "345:   if (pid != (pid_t) - 1) {",
          "346:    if (WIFSIGNALED(status)) {",
          "347:     fprintf(stderr, \"%s%s\\n\",",
          "348:      strsignal(WTERMSIG(status)),",
          "349:      WCOREDUMP(status) ? _(\" (core dumped)\")",
          "350:      : \"\");",
          "351:     status = WTERMSIG(status) + 128;",
          "352:    } else",
          "353:     status = WEXITSTATUS(status);",
          "354:   } else if (caught_signal)",
          "355:    status = caught_signal + 128;",
          "356:   else",
          "357:    status = 1;",
          "358:  } else",
          "359:   status = 1;",
          "361:  if (caught_signal) {",
          "362:   fprintf(stderr, _(\"\\nSession terminated, killing shell...\"));",
          "363:   kill(child, SIGTERM);",
          "366:  cleanup_pam(PAM_SUCCESS);",
          "368:  if (caught_signal) {",
          "369:   sleep(2);",
          "370:   kill(child, SIGKILL);",
          "371:   fprintf(stderr, _(\" ...killed.\\n\"));",
          "379:   switch (caught_signal) {",
          "380:   case SIGTERM:",
          "381:    sigaction(SIGTERM, &oldact[0], NULL);",
          "382:    break;",
          "383:   case SIGINT:",
          "384:    sigaction(SIGINT, &oldact[1], NULL);",
          "385:    break;",
          "386:   case SIGQUIT:",
          "387:    sigaction(SIGQUIT, &oldact[2], NULL);",
          "388:    break;",
          "389:   default:",
          "392:    caught_signal = SIGKILL;",
          "393:    break;",
          "394:   }",
          "395:   kill(getpid(), caught_signal);",
          "396:  }",
          "397:  exit(status);",
          "401: authenticate(const struct passwd *pw)",
          "403:  const struct passwd *lpw = NULL;",
          "404:  const char *cp, *srvname = NULL;",
          "405:  int retval;",
          "407:  switch (su_mode) {",
          "408:  case SU_MODE:",
          "409:   srvname = simulate_login ? PAM_SRVNAME_SU_L : PAM_SRVNAME_SU;",
          "410:   break;",
          "411:  case RUNUSER_MODE:",
          "412:   srvname =",
          "413:       simulate_login ? PAM_SRVNAME_RUNUSER_L :",
          "414:       PAM_SRVNAME_RUNUSER;",
          "415:   break;",
          "416:  default:",
          "417:   abort();",
          "418:   break;",
          "419:  }",
          "421:  retval = pam_start(srvname, pw->pw_name, &conv, &pamh);",
          "422:  if (is_pam_failure(retval))",
          "423:   goto done;",
          "425:  if (isatty(0) && (cp = ttyname(0)) != NULL) {",
          "426:   const char *tty;",
          "428:   if (strncmp(cp, \"/dev/\", 5) == 0)",
          "429:    tty = cp + 5;",
          "430:   else",
          "431:    tty = cp;",
          "432:   retval = pam_set_item(pamh, PAM_TTY, tty);",
          "433:   if (is_pam_failure(retval))",
          "434:    goto done;",
          "435:  }",
          "437:  lpw = current_getpwuid();",
          "438:  if (lpw && lpw->pw_name) {",
          "439:   retval =",
          "440:       pam_set_item(pamh, PAM_RUSER, (const void *)lpw->pw_name);",
          "441:   if (is_pam_failure(retval))",
          "442:    goto done;",
          "443:  }",
          "445:  if (su_mode == RUNUSER_MODE) {",
          "450:   if (restricted)",
          "451:    errx(EXIT_FAILURE,",
          "452:         _(\"may not be used by non-root users\"));",
          "453:   return;",
          "454:  }",
          "456:  retval = pam_authenticate(pamh, 0);",
          "457:  if (is_pam_failure(retval))",
          "458:   goto done;",
          "460:  retval = pam_acct_mgmt(pamh, 0);",
          "461:  if (retval == PAM_NEW_AUTHTOK_REQD) {",
          "463:   retval = pam_chauthtok(pamh, PAM_CHANGE_EXPIRED_AUTHTOK);",
          "464:  }",
          "466:  done:",
          "468:  log_syslog(pw, !is_pam_failure(retval));",
          "470:  if (is_pam_failure(retval)) {",
          "471:   const char *msg;",
          "473:   log_btmp(pw);",
          "475:   msg = pam_strerror(pamh, retval);",
          "476:   pam_end(pamh, retval);",
          "477:   sleep(getlogindefs_num(\"FAIL_DELAY\", 1));",
          "478:   errx(EXIT_FAILURE, \"%s\", msg ? msg : _(\"incorrect password\"));",
          "479:  }",
          "485:  int r;",
          "486:  if (pw->pw_uid)",
          "487:   r = logindefs_setenv(\"PATH\", \"ENV_PATH\", _PATH_DEFPATH);",
          "489:  else if ((r = logindefs_setenv(\"PATH\", \"ENV_ROOTPATH\", NULL)) != 0)",
          "490:   r = logindefs_setenv(\"PATH\", \"ENV_SUPATH\", _PATH_DEFPATH_ROOT);",
          "492:  if (r != 0)",
          "493:   err(EXIT_FAILURE,",
          "494:       _(\"failed to set the %s environment variable\"), \"PATH\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "526: static void",
          "527: modify_environment (const struct passwd * const pw, const char * const shell)",
          "528: {",
          "570: }",
          "",
          "[Removed Lines]",
          "529:   if (simulate_login)",
          "530:     {",
          "533:       char *term = getenv (\"TERM\");",
          "534:       if (term)",
          "535:  term = xstrdup (term);",
          "536:       environ = xmalloc ((6 + !!term) * sizeof (char *));",
          "537:       environ[0] = NULL;",
          "538:       if (term) {",
          "539:  xsetenv (\"TERM\", term, 1);",
          "540:  free(term);",
          "541:       }",
          "542:       xsetenv (\"HOME\", pw->pw_dir, 1);",
          "543:       if (shell)",
          "544:  xsetenv (\"SHELL\", shell, 1);",
          "545:       xsetenv (\"USER\", pw->pw_name, 1);",
          "546:       xsetenv (\"LOGNAME\", pw->pw_name, 1);",
          "547:       set_path(pw);",
          "548:     }",
          "549:   else",
          "550:     {",
          "553:       if (change_environment)",
          "554:         {",
          "555:           xsetenv (\"HOME\", pw->pw_dir, 1);",
          "556:    if (shell)",
          "557:             xsetenv (\"SHELL\", shell, 1);",
          "558:    if (getlogindefs_bool (\"ALWAYS_SET_PATH\", 0))",
          "559:      set_path(pw);",
          "561:           if (pw->pw_uid)",
          "562:             {",
          "563:               xsetenv (\"USER\", pw->pw_name, 1);",
          "564:               xsetenv (\"LOGNAME\", pw->pw_name, 1);",
          "565:             }",
          "566:         }",
          "567:     }",
          "569:   export_pamenv ();",
          "",
          "[Added Lines]",
          "503:  if (simulate_login) {",
          "506:   char *term = getenv(\"TERM\");",
          "507:   if (term)",
          "508:    term = xstrdup(term);",
          "509:   environ = xmalloc((6 + ! !term) * sizeof(char *));",
          "510:   environ[0] = NULL;",
          "511:   if (term) {",
          "512:    xsetenv(\"TERM\", term, 1);",
          "513:    free(term);",
          "514:   }",
          "515:   xsetenv(\"HOME\", pw->pw_dir, 1);",
          "516:   if (shell)",
          "517:    xsetenv(\"SHELL\", shell, 1);",
          "518:   xsetenv(\"USER\", pw->pw_name, 1);",
          "519:   xsetenv(\"LOGNAME\", pw->pw_name, 1);",
          "520:   set_path(pw);",
          "521:  } else {",
          "524:   if (change_environment) {",
          "525:    xsetenv(\"HOME\", pw->pw_dir, 1);",
          "526:    if (shell)",
          "527:     xsetenv(\"SHELL\", shell, 1);",
          "528:    if (getlogindefs_bool(\"ALWAYS_SET_PATH\", 0))",
          "529:     set_path(pw);",
          "531:    if (pw->pw_uid) {",
          "532:     xsetenv(\"USER\", pw->pw_name, 1);",
          "533:     xsetenv(\"LOGNAME\", pw->pw_name, 1);",
          "534:    }",
          "535:   }",
          "536:  }",
          "538:  export_pamenv();",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "574: static void",
          "575: init_groups (const struct passwd * const pw, const gid_t * const groups, const size_t num_groups)",
          "576: {",
          "598: }",
          "600: static void",
          "601: change_identity (const struct passwd * const pw)",
          "602: {",
          "607: }",
          "",
          "[Removed Lines]",
          "577:   int retval;",
          "579:   errno = 0;",
          "581:   if (num_groups)",
          "582:     retval = setgroups (num_groups, groups);",
          "583:   else",
          "584:     retval = initgroups (pw->pw_name, pw->pw_gid);",
          "586:   if (retval == -1)",
          "587:     {",
          "588:       cleanup_pam (PAM_ABORT);",
          "589:       err (EXIT_FAILURE, _(\"cannot set groups\"));",
          "590:     }",
          "591:   endgrent ();",
          "593:   retval = pam_setcred (pamh, PAM_ESTABLISH_CRED);",
          "594:   if (is_pam_failure(retval))",
          "595:     errx (EXIT_FAILURE, \"%s\", pam_strerror (pamh, retval));",
          "596:   else",
          "597:     _pam_cred_established = 1;",
          "603:   if (setgid (pw->pw_gid))",
          "604:     err (EXIT_FAILURE,  _(\"cannot set group id\"));",
          "605:   if (setuid (pw->pw_uid))",
          "606:     err (EXIT_FAILURE,  _(\"cannot set user id\"));",
          "",
          "[Added Lines]",
          "546:  int retval;",
          "548:  errno = 0;",
          "550:  if (num_groups)",
          "551:   retval = setgroups(num_groups, groups);",
          "552:  else",
          "553:   retval = initgroups(pw->pw_name, pw->pw_gid);",
          "555:  if (retval == -1) {",
          "556:   cleanup_pam(PAM_ABORT);",
          "557:   err(EXIT_FAILURE, _(\"cannot set groups\"));",
          "558:  }",
          "559:  endgrent();",
          "561:  retval = pam_setcred(pamh, PAM_ESTABLISH_CRED);",
          "562:  if (is_pam_failure(retval))",
          "563:   errx(EXIT_FAILURE, \"%s\", pam_strerror(pamh, retval));",
          "564:  else",
          "565:   _pam_cred_established = 1;",
          "571:  if (setgid(pw->pw_gid))",
          "572:   err(EXIT_FAILURE, _(\"cannot set group id\"));",
          "573:  if (setuid(pw->pw_uid))",
          "574:   err(EXIT_FAILURE, _(\"cannot set user id\"));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "615: run_shell (char const * const shell, char const * const command, char ** const additional_args,",
          "616:     const size_t n_additional_args)",
          "617: {",
          "651: }",
          "",
          "[Removed Lines]",
          "618:   const size_t n_args = 1 + fast_startup + 2 * !!command + n_additional_args + 1;",
          "619:   const char **args = xcalloc (n_args, sizeof *args);",
          "620:   size_t argno = 1;",
          "622:   if (simulate_login)",
          "623:     {",
          "624:       char *arg0;",
          "625:       const char *shell_basename;",
          "627:       shell_basename = basename (shell);",
          "628:       arg0 = xmalloc (strlen (shell_basename) + 2);",
          "629:       arg0[0] = '-';",
          "630:       strcpy (arg0 + 1, shell_basename);",
          "631:       args[0] = arg0;",
          "632:     }",
          "633:   else",
          "634:     args[0] = basename (shell);",
          "635:   if (fast_startup)",
          "636:     args[argno++] = \"-f\";",
          "637:   if (command)",
          "638:     {",
          "639:       args[argno++] = \"-c\";",
          "640:       args[argno++] = command;",
          "641:     }",
          "642:   memcpy (args + argno, additional_args, n_additional_args * sizeof *args);",
          "643:   args[argno + n_additional_args] = NULL;",
          "644:   execv (shell, (char **) args);",
          "646:   {",
          "647:     int exit_status = (errno == ENOENT ? EXIT_ENOENT : EXIT_CANNOT_INVOKE);",
          "648:     warn (_(\"failed to execute %s\"), shell);",
          "649:     exit (exit_status);",
          "650:   }",
          "",
          "[Added Lines]",
          "586:  size_t n_args =",
          "587:      1 + fast_startup + 2 * ! !command + n_additional_args + 1;",
          "588:  char const **args = xcalloc(n_args, sizeof *args);",
          "589:  size_t argno = 1;",
          "591:  if (simulate_login) {",
          "592:   char *arg0;",
          "593:   char *shell_basename;",
          "595:   shell_basename = basename(shell);",
          "596:   arg0 = xmalloc(strlen(shell_basename) + 2);",
          "597:   arg0[0] = '-';",
          "598:   strcpy(arg0 + 1, shell_basename);",
          "599:   args[0] = arg0;",
          "600:  } else",
          "601:   args[0] = basename(shell);",
          "602:  if (fast_startup)",
          "603:   args[argno++] = \"-f\";",
          "604:  if (command) {",
          "605:   args[argno++] = \"-c\";",
          "606:   args[argno++] = command;",
          "607:  }",
          "608:  memcpy(args + argno, additional_args, n_additional_args * sizeof *args);",
          "609:  args[argno + n_additional_args] = NULL;",
          "610:  execv(shell, (char **)args);",
          "612:  {",
          "613:   int exit_status =",
          "614:       (errno == ENOENT ? EXIT_ENOENT : EXIT_CANNOT_INVOKE);",
          "615:   warn(_(\"failed to execute %s\"), shell);",
          "616:   exit(exit_status);",
          "617:  }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "656: static bool",
          "657: restricted_shell (const char * const shell)",
          "658: {",
          "668:  }",
          "672: }",
          "676: {",
          "715: }",
          "719: {",
          "733: }",
          "",
          "[Removed Lines]",
          "659:   char *line;",
          "661:   setusershell ();",
          "662:   while ((line = getusershell ()) != NULL)",
          "663:     {",
          "664:       if (*line != '#' && !strcmp (line, shell))",
          "665:  {",
          "666:    endusershell ();",
          "667:    return false;",
          "669:     }",
          "670:   endusershell ();",
          "671:   return true;",
          "674: static void __attribute__((__noreturn__))",
          "675: usage(void)",
          "677:   if (su_mode == RUNUSER_MODE) {",
          "678:     fputs(USAGE_HEADER, stdout);",
          "679:     printf (_(\" %s [options] -u <user> [[--] <command>]\\n\"), program_invocation_short_name);",
          "680:     printf (_(\" %s [options] [-] [<user> [<argument>...]]\\n\"), program_invocation_short_name);",
          "681:     fputs (_(\"\\n\"",
          "682:     \"Run <command> with the effective user ID and group ID of <user>.  If -u is\\n\"",
          "683:     \"not given, fall back to su(1)-compatible semantics and execute standard shell.\\n\"",
          "684:     \"The options -c, -f, -l, and -s are mutually exclusive with -u.\\n\"), stdout);",
          "686:     fputs(USAGE_OPTIONS, stdout);",
          "688:     fputs (_(\" -u, --user <user>             username\\n\"), stdout);",
          "690:   } else {",
          "691:     fputs(USAGE_HEADER, stdout);",
          "692:     printf (_(\" %s [options] [-] [<user> [<argument>...]]\\n\"), program_invocation_short_name);",
          "693:     fputs (_(\"\\n\"",
          "694:     \"Change the effective user ID and group ID to that of <user>.\\n\"",
          "695:     \"A mere - implies -l.  If <user> is not given, root is assumed.\\n\"), stdout);",
          "697:     fputs(USAGE_OPTIONS, stdout);",
          "698:   }",
          "700:   fputs (_(\" -m, -p, --preserve-environment  do not reset environment variables\\n\"), stdout);",
          "701:   fputs (_(\" -g, --group <group>             specify the primary group\\n\"), stdout);",
          "702:   fputs (_(\" -G, --supp-group <group>        specify a supplemental group\\n\\n\"), stdout);",
          "704:   fputs (_(\" -, -l, --login                  make the shell a login shell\\n\"), stdout);",
          "705:   fputs (_(\" -c, --command <command>         pass a single command to the shell with -c\\n\"), stdout);",
          "706:   fputs (_(\" --session-command <command>     pass a single command to the shell with -c\\n\"",
          "707:            \"                                   and do not create a new session\\n\"), stdout);",
          "708:   fputs (_(\" -f, --fast                      pass -f to the shell (for csh or tcsh)\\n\"), stdout);",
          "709:   fputs (_(\" -s, --shell <shell>             run <shell> if /etc/shells allows it\\n\"), stdout);",
          "711:   fputs(USAGE_SEPARATOR, stdout);",
          "712:   printf(USAGE_HELP_OPTIONS(33));",
          "713:   printf(USAGE_MAN_TAIL(su_mode == SU_MODE ? \"su(1)\" : \"runuser(1)\"));",
          "714:   exit(EXIT_SUCCESS);",
          "717: static",
          "718: void load_config(void)",
          "720:   switch (su_mode) {",
          "721:   case SU_MODE:",
          "722:     logindefs_load_file(_PATH_LOGINDEFS_SU);",
          "723:     break;",
          "724:   case RUNUSER_MODE:",
          "725:     logindefs_load_file(_PATH_LOGINDEFS_RUNUSER);",
          "726:     break;",
          "727:   default:",
          "728:     abort();",
          "729:     break;",
          "730:   }",
          "732:   logindefs_load_file(_PATH_LOGINDEFS);",
          "",
          "[Added Lines]",
          "626:  char *line;",
          "628:  setusershell();",
          "629:  while ((line = getusershell()) != NULL) {",
          "630:   if (*line != '#' && !strcmp(line, shell)) {",
          "631:    endusershell();",
          "632:    return false;",
          "633:   }",
          "635:  endusershell();",
          "636:  return true;",
          "640: static void __attribute__ ((__noreturn__)) usage(int status)",
          "642:  if (su_mode == RUNUSER_MODE) {",
          "643:   fputs(USAGE_HEADER, stdout);",
          "644:   printf(_(\" %s [options] -u <user> <command>\\n\"),",
          "645:          program_invocation_short_name);",
          "646:   printf(_(\" %s [options] [-] [<user> [<argument>...]]\\n\"),",
          "647:          program_invocation_short_name);",
          "648:   fputs(_",
          "649:         (\"\\n\"",
          "650:          \"Run <command> with the effective user ID and group ID of <user>.  If -u is\\n\"",
          "651:          \"not given, fall back to su(1)-compatible semantics and execute standard shell.\\n\"",
          "652:          \"The options -c, -f, -l, and -s are mutually exclusive with -u.\\n\"),",
          "653:         stdout);",
          "655:   fputs(USAGE_OPTIONS, stdout);",
          "657:   fputs(_(\" -u, --user <user>             username\\n\"), stdout);",
          "659:  } else {",
          "660:   fputs(USAGE_HEADER, stdout);",
          "661:   printf(_(\" %s [options] [-] [<user> [<argument>...]]\\n\"),",
          "662:          program_invocation_short_name);",
          "663:   fputs(_",
          "664:         (\"\\n\"",
          "665:          \"Change the effective user ID and group ID to that of <user>.\\n\"",
          "666:          \"A mere - implies -l.  If <user> is not given, root is assumed.\\n\"),",
          "667:         stdout);",
          "669:   fputs(USAGE_OPTIONS, stdout);",
          "670:  }",
          "672:  fputs(_",
          "673:        (\" -m, -p, --preserve-environment  do not reset environment variables\\n\"),",
          "674:        stdout);",
          "675:  fputs(_(\" -g, --group <group>             specify the primary group\\n\"),",
          "676:        stdout);",
          "677:  fputs(_",
          "678:        (\" -G, --supp-group <group>        specify a supplemental group\\n\\n\"),",
          "679:        stdout);",
          "681:  fputs(_",
          "682:        (\" -, -l, --login                  make the shell a login shell\\n\"),",
          "683:        stdout);",
          "684:  fputs(_",
          "685:        (\" -c, --command <command>         pass a single command to the shell with -c\\n\"),",
          "686:        stdout);",
          "687:  fputs(_",
          "688:        (\" --session-command <command>     pass a single command to the shell with -c\\n\"",
          "689:         \"                                   and do not create a new session\\n\"),",
          "690:        stdout);",
          "691:  fputs(_",
          "692:        (\" -f, --fast                      pass -f to the shell (for csh or tcsh)\\n\"),",
          "693:        stdout);",
          "694:  fputs(_",
          "695:        (\" -s, --shell <shell>             run <shell> if /etc/shells allows it\\n\"),",
          "696:        stdout);",
          "698:  fputs(USAGE_SEPARATOR, stdout);",
          "699:  printf(USAGE_HELP_OPTIONS(22));",
          "700:  printf(USAGE_MAN_TAIL(su_mode == SU_MODE ? \"su(1)\" : \"runuser(1)\"));",
          "701:  exit(status);",
          "704: static void",
          "705: load_config(void)",
          "707:  switch (su_mode) {",
          "708:  case SU_MODE:",
          "709:   logindefs_load_file(_PATH_LOGINDEFS_SU);",
          "710:   break;",
          "711:  case RUNUSER_MODE:",
          "712:   logindefs_load_file(_PATH_LOGINDEFS_RUNUSER);",
          "713:   break;",
          "714:  }",
          "716:  logindefs_load_file(_PATH_LOGINDEFS);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "738: static int",
          "739: evaluate_uid(void)",
          "740: {",
          "746: }",
          "748: static gid_t",
          "750: {",
          "768: }",
          "770: int",
          "772: {",
          "869:  }",
          "",
          "[Removed Lines]",
          "741:   const uid_t ruid = getuid();",
          "742:   const uid_t euid = geteuid();",
          "745:   return (uid_t) 0 == ruid && ruid == euid ? 0 : 1;",
          "749: add_supp_group(const char *name, gid_t **groups, size_t *ngroups)",
          "751:   struct group *gr;",
          "753:   if (*ngroups >= NGROUPS_MAX)",
          "754:     errx(EXIT_FAILURE,",
          "755:  P_(\"specifying more than %d supplemental group is not possible\",",
          "756:     \"specifying more than %d supplemental groups is not possible\",",
          "757:       NGROUPS_MAX - 1), NGROUPS_MAX - 1);",
          "759:   gr = getgrnam(name);",
          "760:   if (!gr)",
          "761:     errx(EXIT_FAILURE, _(\"group %s does not exist\"), name);",
          "764:   (*groups)[*ngroups] = gr->gr_gid;",
          "765:   (*ngroups)++;",
          "767:   return gr->gr_gid;",
          "771: su_main (int argc, char **argv, int mode)",
          "773:   int optc;",
          "774:   const char *new_user = DEFAULT_USER, *runuser_user = NULL;",
          "775:   const char *command = NULL;",
          "776:   int request_same_session = 0;",
          "777:   const char *shell = NULL;",
          "778:   struct passwd *pw;",
          "779:   struct passwd pw_copy;",
          "781:   gid_t *groups = NULL;",
          "782:   size_t ngroups = 0;",
          "783:   bool use_supp = false;",
          "784:   bool use_gid = false;",
          "785:   gid_t gid = 0;",
          "787:   static const struct option longopts[] = {",
          "788:     {\"command\", required_argument, NULL, 'c'},",
          "789:     {\"session-command\", required_argument, NULL, 'C'},",
          "790:     {\"fast\", no_argument, NULL, 'f'},",
          "791:     {\"login\", no_argument, NULL, 'l'},",
          "792:     {\"preserve-environment\", no_argument, NULL, 'p'},",
          "793:     {\"shell\", required_argument, NULL, 's'},",
          "794:     {\"group\", required_argument, NULL, 'g'},",
          "795:     {\"supp-group\", required_argument, NULL, 'G'},",
          "797:     {\"help\", no_argument, NULL, 'h'},",
          "798:     {\"version\", no_argument, NULL, 'V'},",
          "799:     {NULL, 0, NULL, 0}",
          "800:   };",
          "802:   setlocale (LC_ALL, \"\");",
          "803:   bindtextdomain (PACKAGE, LOCALEDIR);",
          "804:   textdomain (PACKAGE);",
          "805:   atexit(close_stdout);",
          "807:   su_mode = mode;",
          "808:   fast_startup = false;",
          "809:   simulate_login = false;",
          "810:   change_environment = true;",
          "812:   while ((optc = getopt_long (argc, argv, \"c:fg:G:lmps:u:hV\", longopts, NULL)) != -1)",
          "813:     {",
          "814:       switch (optc)",
          "815:  {",
          "816:  case 'c':",
          "817:    command = optarg;",
          "818:    break;",
          "820:         case 'C':",
          "821:           command = optarg;",
          "822:           request_same_session = 1;",
          "823:           break;",
          "825:  case 'f':",
          "826:    fast_startup = true;",
          "827:    break;",
          "829:  case 'g':",
          "830:    use_gid = true;",
          "831:    gid = add_supp_group(optarg, &groups, &ngroups);",
          "832:    break;",
          "834:  case 'G':",
          "835:    use_supp = true;",
          "836:    add_supp_group(optarg, &groups, &ngroups);",
          "837:    break;",
          "839:  case 'l':",
          "840:    simulate_login = true;",
          "841:    break;",
          "843:  case 'm':",
          "844:  case 'p':",
          "845:    change_environment = false;",
          "846:    break;",
          "848:  case 's':",
          "849:    shell = optarg;",
          "850:    break;",
          "852:  case 'u':",
          "853:    if (su_mode != RUNUSER_MODE) {",
          "854:      warnx(_(\"invalid option -- 'u'\"));",
          "855:      errtryhelp(EXIT_FAILURE);",
          "856:    }",
          "857:    runuser_user = optarg;",
          "858:    break;",
          "860:  case 'h':",
          "861:    usage();",
          "863:  case 'V':",
          "864:    printf(UTIL_LINUX_VERSION);",
          "865:    exit(EXIT_SUCCESS);",
          "867:  default:",
          "868:    errtryhelp(EXIT_FAILURE);",
          "870:     }",
          "872:   restricted = evaluate_uid ();",
          "874:   if (optind < argc && !strcmp (argv[optind], \"-\"))",
          "875:     {",
          "876:       simulate_login = true;",
          "877:       ++optind;",
          "878:     }",
          "880:   if (simulate_login && !change_environment) {",
          "881:     warnx(_(\"ignoring --preserve-environment, it's mutually exclusive with --login\"));",
          "882:     change_environment = true;",
          "883:   }",
          "885:   switch (su_mode) {",
          "886:   case RUNUSER_MODE:",
          "887:     if (runuser_user) {",
          "889:       new_user = runuser_user;",
          "890:       if (shell || fast_startup || command || simulate_login) {",
          "891:         errx(EXIT_FAILURE,",
          "892:     _(\"options --{shell,fast,command,session-command,login} and \"",
          "893:       \"--user are mutually exclusive\"));",
          "894:       }",
          "895:       if (optind == argc)",
          "896:         errx(EXIT_FAILURE, _(\"no command was specified\"));",
          "898:       break;",
          "899:     }",
          "904:   case SU_MODE:",
          "905:     if (optind < argc)",
          "906:       new_user = argv[optind++];",
          "907:     break;",
          "908:   default:",
          "909:     abort();",
          "910:     break;",
          "911:   }",
          "913:   if ((use_supp || use_gid) && restricted)",
          "914:     errx(EXIT_FAILURE, _(\"only root can specify alternative groups\"));",
          "916:   logindefs_load_defaults = load_config;",
          "918:   pw = getpwnam (new_user);",
          "919:   if (! (pw && pw->pw_name && pw->pw_name[0] && pw->pw_dir && pw->pw_dir[0]",
          "920:   && pw->pw_passwd))",
          "921:     errx (EXIT_FAILURE, _(\"user %s does not exist\"), new_user);",
          "924:      copy instead.  Otherwise, some systems (e.g. Linux) would clobber",
          "925:      the static data through the getlogin call from log_su.",
          "926:      Also, make sure pw->pw_shell is a nonempty string.",
          "927:      It may be NULL when NEW_USER is a username that is retrieved via NIS (YP),",
          "929:   pw_copy = *pw;",
          "930:   pw = &pw_copy;",
          "931:   pw->pw_name = xstrdup (pw->pw_name);",
          "932:   pw->pw_passwd = xstrdup (pw->pw_passwd);",
          "933:   pw->pw_dir = xstrdup (pw->pw_dir);",
          "934:   pw->pw_shell = xstrdup (pw->pw_shell && pw->pw_shell[0]",
          "935:      ? pw->pw_shell",
          "936:      : DEFAULT_SHELL);",
          "937:   endpwent ();",
          "939:   if (use_supp && !use_gid)",
          "940:     pw->pw_gid = groups[0];",
          "941:   else if (use_gid)",
          "942:     pw->pw_gid = gid;",
          "944:   authenticate (pw);",
          "946:   if (request_same_session || !command || !pw->pw_uid)",
          "947:     same_session = 1;",
          "950:   if (runuser_user) {",
          "951:     shell = NULL;",
          "952:   } else {",
          "953:     if (!shell && !change_environment)",
          "954:       shell = getenv (\"SHELL\");",
          "955:     if (shell && getuid () != 0 && restricted_shell (pw->pw_shell))",
          "956:       {",
          "958:     probably a uucp account or has restricted access.  Don't",
          "959:     compromise the account by allowing access with a standard",
          "961:  warnx (_(\"using restricted shell %s\"), pw->pw_shell);",
          "962:  shell = NULL;",
          "963:       }",
          "964:     shell = xstrdup (shell ? shell : pw->pw_shell);",
          "965:   }",
          "967:   init_groups (pw, groups, ngroups);",
          "969:   if (!simulate_login || command)",
          "972:   create_watching_parent ();",
          "975:   change_identity (pw);",
          "976:   if (!same_session)",
          "977:     setsid ();",
          "982:   modify_environment (pw, shell);",
          "984:   if (simulate_login && chdir (pw->pw_dir) != 0)",
          "985:     warn (_(\"warning: cannot change directory to %s\"), pw->pw_dir);",
          "987:   if (shell)",
          "988:     run_shell (shell, command, argv + optind, max (0, argc - optind));",
          "989:   else {",
          "990:     execvp(argv[optind], &argv[optind]);",
          "991:     err(EXIT_FAILURE, _(\"failed to execute %s\"), argv[optind]);",
          "992:   }",
          "993: }",
          "",
          "[Added Lines]",
          "725:  const uid_t ruid = getuid();",
          "726:  const uid_t euid = geteuid();",
          "729:  return (uid_t) 0 == ruid && ruid == euid ? 0 : 1;",
          "733: add_supp_group(const char *name, gid_t ** groups, size_t * ngroups)",
          "735:  struct group *gr;",
          "737:  if (*ngroups >= NGROUPS_MAX)",
          "738:   errx(EXIT_FAILURE,",
          "739:        P_",
          "740:        (\"specifying more than %d supplemental group is not possible\",",
          "741:         \"specifying more than %d supplemental groups is not possible\",",
          "742:         NGROUPS_MAX - 1), NGROUPS_MAX - 1);",
          "744:  gr = getgrnam(name);",
          "745:  if (!gr)",
          "746:   errx(EXIT_FAILURE, _(\"group %s does not exist\"), name);",
          "749:  (*groups)[*ngroups] = gr->gr_gid;",
          "750:  (*ngroups)++;",
          "752:  return gr->gr_gid;",
          "756: su_main(int argc, char **argv, int mode)",
          "758:  int optc;",
          "759:  const char *new_user = DEFAULT_USER, *runuser_user = NULL;",
          "760:  char *command = NULL;",
          "761:  int request_same_session = 0;",
          "762:  char *shell = NULL;",
          "763:  struct passwd *pw;",
          "764:  struct passwd pw_copy;",
          "766:  gid_t *groups = NULL;",
          "767:  size_t ngroups = 0;",
          "768:  bool use_supp = false;",
          "769:  bool use_gid = false;",
          "770:  gid_t gid = 0;",
          "772:  static const struct option longopts[] = {",
          "773:   {\"command\", required_argument, NULL, 'c'},",
          "774:   {\"session-command\", required_argument, NULL, 'C'},",
          "775:   {\"fast\", no_argument, NULL, 'f'},",
          "776:   {\"login\", no_argument, NULL, 'l'},",
          "777:   {\"preserve-environment\", no_argument, NULL, 'p'},",
          "778:   {\"shell\", required_argument, NULL, 's'},",
          "779:   {\"group\", required_argument, NULL, 'g'},",
          "780:   {\"supp-group\", required_argument, NULL, 'G'},",
          "782:   {\"help\", no_argument, 0, 'h'},",
          "783:   {\"version\", no_argument, 0, 'V'},",
          "784:   {NULL, 0, NULL, 0}",
          "785:  };",
          "787:  setlocale(LC_ALL, \"\");",
          "788:  bindtextdomain(PACKAGE, LOCALEDIR);",
          "789:  textdomain(PACKAGE);",
          "790:  atexit(close_stdout);",
          "792:  su_mode = mode;",
          "793:  fast_startup = false;",
          "794:  simulate_login = false;",
          "795:  change_environment = true;",
          "797:  while ((optc =",
          "798:   getopt_long(argc, argv, \"c:fg:G:lmps:u:hV\", longopts,",
          "799:        NULL)) != -1) {",
          "800:   switch (optc) {",
          "801:   case 'c':",
          "802:    command = optarg;",
          "803:    break;",
          "805:   case 'C':",
          "806:    command = optarg;",
          "807:    request_same_session = 1;",
          "808:    break;",
          "810:   case 'f':",
          "811:    fast_startup = true;",
          "812:    break;",
          "814:   case 'g':",
          "815:    use_gid = true;",
          "816:    gid = add_supp_group(optarg, &groups, &ngroups);",
          "817:    break;",
          "819:   case 'G':",
          "820:    use_supp = true;",
          "821:    add_supp_group(optarg, &groups, &ngroups);",
          "822:    break;",
          "824:   case 'l':",
          "825:    simulate_login = true;",
          "826:    break;",
          "828:   case 'm':",
          "829:   case 'p':",
          "830:    change_environment = false;",
          "831:    break;",
          "833:   case 's':",
          "834:    shell = optarg;",
          "835:    break;",
          "837:   case 'u':",
          "838:    if (su_mode != RUNUSER_MODE)",
          "839:     usage(EXIT_FAILURE);",
          "840:    runuser_user = optarg;",
          "841:    break;",
          "843:   case 'h':",
          "844:    usage(0);",
          "846:   case 'V':",
          "847:    printf(UTIL_LINUX_VERSION);",
          "848:    exit(EXIT_SUCCESS);",
          "850:   default:",
          "851:    usage(EXIT_FAILURE);",
          "852:   }",
          "853:  }",
          "855:  restricted = evaluate_uid();",
          "857:  if (optind < argc && !strcmp(argv[optind], \"-\")) {",
          "858:   simulate_login = true;",
          "859:   ++optind;",
          "860:  }",
          "862:  if (simulate_login && !change_environment) {",
          "863:   warnx(_",
          "864:         (\"ignoring --preserve-environment, it's mutually exclusive with --login\"));",
          "865:   change_environment = true;",
          "866:  }",
          "868:  switch (su_mode) {",
          "869:  case RUNUSER_MODE:",
          "870:   if (runuser_user) {",
          "872:    new_user = runuser_user;",
          "873:    if (shell || fast_startup || command || simulate_login) {",
          "874:     errx(EXIT_FAILURE,",
          "875:          _",
          "876:          (\"options --{shell,fast,command,session-command,login} and \"",
          "877:           \"--user are mutually exclusive\"));",
          "878:    }",
          "879:    if (optind == argc)",
          "880:     errx(EXIT_FAILURE,",
          "881:          _(\"no command was specified\"));",
          "883:    break;",
          "884:   }",
          "888:  case SU_MODE:",
          "889:   if (optind < argc)",
          "890:    new_user = argv[optind++];",
          "891:   break;",
          "892:  }",
          "894:  if ((use_supp || use_gid) && restricted)",
          "895:   errx(EXIT_FAILURE,",
          "896:        _(\"only root can specify alternative groups\"));",
          "898:  logindefs_load_defaults = load_config;",
          "900:  pw = getpwnam(new_user);",
          "901:  if (!(pw && pw->pw_name && pw->pw_name[0] && pw->pw_dir && pw->pw_dir[0]",
          "902:        && pw->pw_passwd))",
          "903:   errx(EXIT_FAILURE, _(\"user %s does not exist\"), new_user);",
          "906:     copy instead.  Otherwise, some systems (e.g. Linux) would clobber",
          "907:     the static data through the getlogin call from log_su.",
          "908:     Also, make sure pw->pw_shell is a nonempty string.",
          "909:     It may be NULL when NEW_USER is a username that is retrieved via NIS (YP),",
          "911:  pw_copy = *pw;",
          "912:  pw = &pw_copy;",
          "913:  pw->pw_name = xstrdup(pw->pw_name);",
          "914:  pw->pw_passwd = xstrdup(pw->pw_passwd);",
          "915:  pw->pw_dir = xstrdup(pw->pw_dir);",
          "916:  pw->pw_shell = xstrdup(pw->pw_shell && pw->pw_shell[0]",
          "917:           ? pw->pw_shell : DEFAULT_SHELL);",
          "918:  endpwent();",
          "920:  if (use_supp && !use_gid)",
          "921:   pw->pw_gid = groups[0];",
          "922:  else if (use_gid)",
          "923:   pw->pw_gid = gid;",
          "925:  authenticate(pw);",
          "927:  if (request_same_session || !command || !pw->pw_uid)",
          "928:   same_session = 1;",
          "931:  if (runuser_user) {",
          "932:   shell = NULL;",
          "933:  } else {",
          "934:   if (!shell && !change_environment)",
          "935:    shell = getenv(\"SHELL\");",
          "936:   if (shell && getuid() != 0 && restricted_shell(pw->pw_shell)) {",
          "938:       probably a uucp account or has restricted access.  Don't",
          "939:       compromise the account by allowing access with a standard",
          "941:    warnx(_(\"using restricted shell %s\"), pw->pw_shell);",
          "942:    shell = NULL;",
          "943:   }",
          "944:   shell = xstrdup(shell ? shell : pw->pw_shell);",
          "947:  init_groups(pw, groups, ngroups);",
          "949:  if (!simulate_login || command)",
          "952:  create_watching_parent();",
          "955:  change_identity(pw);",
          "956:  if (!same_session)",
          "957:   setsid();",
          "962:  modify_environment(pw, shell);",
          "964:  if (simulate_login && chdir(pw->pw_dir) != 0)",
          "965:   warn(_(\"warning: cannot change directory to %s\"), pw->pw_dir);",
          "967:  if (shell)",
          "968:   run_shell(shell, command, argv + optind, max(0, argc - optind));",
          "969:  else {",
          "970:   execvp(argv[optind], &argv[optind]);",
          "971:   err(EXIT_FAILURE, _(\"failed to execute %s\"), argv[optind]);",
          "972:  }",
          "973: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6b28328255aa1248931947a4d1521288bde01837",
      "candidate_info": {
        "commit_hash": "6b28328255aa1248931947a4d1521288bde01837",
        "repo": "karelzak/util-linux",
        "commit_url": "https://github.com/karelzak/util-linux/commit/6b28328255aa1248931947a4d1521288bde01837",
        "files": [
          "login-utils/su-common.c"
        ],
        "message": "su: properly clear child PID\n\nThe patch from master branch, somehow lost during su refactoring\nrebase.\n\nReported-by: Tobias St\u00f6ckmann <tobias@stoeckmann.org>\nSigned-off-by: Karel Zak <kzak@redhat.com>",
        "before_after_code_files": [
          "login-utils/su-common.c||login-utils/su-common.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "login-utils/su-common.c||login-utils/su-common.c"
          ],
          "candidate": [
            "login-utils/su-common.c||login-utils/su-common.c"
          ]
        }
      },
      "candidate_diff": {
        "login-utils/su-common.c||login-utils/su-common.c": [
          "File: login-utils/su-common.c -> login-utils/su-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "418:   else",
          "419:    status = 1;",
          "422:  } else",
          "423:   status = 1;",
          "426:   fprintf(stderr, _(\"\\nSession terminated, killing shell...\"));",
          "427:   kill(child, SIGTERM);",
          "428:  }",
          "",
          "[Removed Lines]",
          "421:   DBG(SIG, ul_debug(\"child is dead [status=%d]\", status));",
          "425:  if (caught_signal) {",
          "",
          "[Added Lines]",
          "421:   DBG(SIG, ul_debug(\"child %d is dead [status=%d]\", child, status));",
          "426:  if (caught_signal && child != (pid_t)-1) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "430:  supam_cleanup(su, PAM_SUCCESS);",
          "432:  if (caught_signal) {",
          "",
          "[Removed Lines]",
          "433:   DBG(SIG, ul_debug(\"killing child\"));",
          "434:   sleep(2);",
          "435:   kill(child, SIGKILL);",
          "436:   fprintf(stderr, _(\" ...killed.\\n\"));",
          "",
          "[Added Lines]",
          "434:   if (child != (pid_t)-1) {",
          "435:    DBG(SIG, ul_debug(\"killing child\"));",
          "436:    sleep(2);",
          "437:    kill(child, SIGKILL);",
          "438:    fprintf(stderr, _(\" ...killed.\\n\"));",
          "439:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}