{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4a62581b3220aac365075a1ab5d86ffc2a083149",
      "candidate_info": {
        "commit_hash": "4a62581b3220aac365075a1ab5d86ffc2a083149",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4a62581b3220aac365075a1ab5d86ffc2a083149",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in"
        ],
        "message": "Improvements to the documentation of sqlite3_create_collation().\n\nFossilOrigin-Name: fa866aec56deca8cc1b70814215bbdc683f41bc0826da0f8804d952de429820c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1c3e5c20a9e6f501befa2bf6241a1b5190872bd83b765dac67065d252d04ea4f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ]
      }
    },
    {
      "candidate_hash": "bc4974c81bd4cda9900185a655b577f19a894e03",
      "candidate_info": {
        "commit_hash": "bc4974c81bd4cda9900185a655b577f19a894e03",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bc4974c81bd4cda9900185a655b577f19a894e03",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/fkey.c"
        ],
        "message": "The SET DEFAULT and SET NULL conflict resolution actions for foreign key constraints should cause an error when they appear on a generated column.\n\nFossilOrigin-Name: b47513d2b32b61ba42c1e9b59287d28f6fee231e6c65de2a3aa19effbbaf1e7f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/fkey.c||src/fkey.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0a2eb949f8a759e5745d9468c8183d3c0b4b30e0fa2a14b3062620eb9e1d5c1d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/fkey.c||src/fkey.c": [
          "File: src/fkey.c -> src/fkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1269:             sqlite3ExprAlloc(db, TK_ID, &tNew, 0),",
          "1270:             sqlite3ExprAlloc(db, TK_ID, &tToCol, 0));",
          "1271:         }else if( action==OE_SetDflt ){",
          "1273:           if( pDflt ){",
          "1274:             pNew = sqlite3ExprDup(db, pDflt, 0);",
          "1275:           }else{",
          "",
          "[Removed Lines]",
          "1272:           Expr *pDflt = pFKey->pFrom->aCol[iFromCol].pDflt;",
          "",
          "[Added Lines]",
          "1272:           Column *pCol = pFKey->pFrom->aCol + iFromCol;",
          "1273:           Expr *pDflt;",
          "1274:           if( pCol->colFlags & COLFLAG_GENERATED ){",
          "1275:             testcase( pCol->colFlags & COLFLAG_VIRTUAL );",
          "1276:             testcase( pCol->colFlags & COLFLAG_STORED );",
          "1277:             pDflt = 0;",
          "1278:           }else{",
          "1279:             pDflt = pCol->pDflt;",
          "1280:           }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "23e3c340b5ab58df67cc132df82f1c29d39cbb5d",
      "candidate_info": {
        "commit_hash": "23e3c340b5ab58df67cc132df82f1c29d39cbb5d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/23e3c340b5ab58df67cc132df82f1c29d39cbb5d",
        "files": [
          "ext/expert/sqlite3expert.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Avoid another potential OOB read in sqlite3expert.c.\n\nFossilOrigin-Name: 0ccea80092f16e7f17f4c4de4f8be3fdef217199fcc08ace37e179c1b22c1294",
        "before_after_code_files": [
          "ext/expert/sqlite3expert.c||ext/expert/sqlite3expert.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/expert/sqlite3expert.c||ext/expert/sqlite3expert.c": [
          "File: ext/expert/sqlite3expert.c -> ext/expert/sqlite3expert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1137:       for(i=0; i<nDetail; i++){",
          "1138:         const char *zIdx = 0;",
          "1140:           zIdx = &zDetail[i+13];",
          "1142:           zIdx = &zDetail[i+22];",
          "1143:         }",
          "1144:         if( zIdx ){",
          "",
          "[Removed Lines]",
          "1139:         if( memcmp(&zDetail[i], \" USING INDEX \", 13)==0 ){",
          "1141:         }else if( memcmp(&zDetail[i], \" USING COVERING INDEX \", 22)==0 ){",
          "",
          "[Added Lines]",
          "1139:         if( i+13<nDetail && memcmp(&zDetail[i], \" USING INDEX \", 13)==0 ){",
          "1141:         }else if( i+22<nDetail",
          "1142:             && memcmp(&zDetail[i], \" USING COVERING INDEX \", 22)==0",
          "1143:         ){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4218c7b71fb6b227dbe4b852718584c150164af2d84e067cb810aa602554a609",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e6a85962e754fded78939a826093baaf7869af4d",
      "candidate_info": {
        "commit_hash": "e6a85962e754fded78939a826093baaf7869af4d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e6a85962e754fded78939a826093baaf7869af4d",
        "files": [
          "ext/misc/uint.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Add the UINT collating sequence extension.  The implementation is copied out of the \"natsort\" branch.\n\nFossilOrigin-Name: 6f46c6e3e3c471ca864d7596e0211ee90316b784c8fe22c7ae177c9d29731dc7",
        "before_after_code_files": [
          "ext/misc/uint.c||ext/misc/uint.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/uint.c||ext/misc/uint.c": [
          "File: ext/misc/uint.c -> ext/misc/uint.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: #include \"sqlite3ext.h\"",
          "31: SQLITE_EXTENSION_INIT1",
          "32: #include <assert.h>",
          "33: #include <string.h>",
          "34: #include <ctype.h>",
          "40: static int uintCollFunc(",
          "41:   void *notUsed,",
          "42:   int nKey1, const void *pKey1,",
          "43:   int nKey2, const void *pKey2",
          "44: ){",
          "45:   const unsigned char *zA = (const unsigned char*)pKey1;",
          "46:   const unsigned char *zB = (const unsigned char*)pKey2;",
          "47:   int i=0, j=0, x;",
          "48:   while( i<nKey1 && j<nKey2 ){",
          "49:     x = zA[i] - zB[j];",
          "50:     if( isdigit(zA[i]) ){",
          "51:       int k;",
          "52:       if( !isdigit(zB[j]) ) return x;",
          "53:       while( i<nKey1 && zA[i]=='0' ){ i++; }",
          "54:       while( j<nKey2 && zB[j]=='0' ){ j++; }",
          "55:       k = 0;",
          "56:       while( i+k<nKey1 && isdigit(zA[i+k])",
          "57:              && j+k<nKey2 && isdigit(zB[j+k]) ){",
          "58:         k++;",
          "59:       }",
          "60:       if( i+k<nKey1 && isdigit(zA[i+k]) ){",
          "61:         return +1;",
          "62:       }else if( j+k<nKey2 && isdigit(zB[j+k]) ){",
          "63:         return -1;",
          "64:       }else{",
          "65:         x = memcmp(zA+i, zB+j, k);",
          "66:         if( x ) return x;",
          "67:         i += k;",
          "68:         j += k;",
          "69:       }",
          "70:     }else if( x ){",
          "71:       return x;",
          "72:     }else{",
          "73:       i++;",
          "74:       j++;",
          "75:     }",
          "76:   }",
          "77:   return (nKey1 - i) - (nKey2 - j);",
          "78: }",
          "80: #ifdef _WIN32",
          "81: __declspec(dllexport)",
          "82: #endif",
          "83: int sqlite3_uint_init(",
          "84:   sqlite3 *db,",
          "85:   char **pzErrMsg,",
          "86:   const sqlite3_api_routines *pApi",
          "87: ){",
          "88:   SQLITE_EXTENSION_INIT2(pApi);",
          "90:   return sqlite3_create_collation(db, \"uint\", SQLITE_UTF8, 0, uintCollFunc);",
          "91: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 85d3dc8c50d8dbb8eac1956e8976e861d3b671e03355ca9257060fa3dca51cc4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
      "candidate_info": {
        "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pragma.c",
          "test/gencol1.test"
        ],
        "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pragma.c||src/pragma.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1596:           if( j==pTab->iPKey ) continue;",
          "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
          "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
          "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
          "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
          "1602:                               pTab->aCol[j].zName);",
          "",
          "[Removed Lines]",
          "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
          "",
          "[Added Lines]",
          "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
          "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
          "1601:           }",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
          "329: } {1 {FOREIGN KEY constraint failed}}",
          "331: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "331: # 2019-12-09 ticket bd8c280671ba44a7",
          "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
          "333: # generate a code sequence that does not end with OP_Column.  So check to",
          "334: # make sure that the last instruction generated is an OP_column prior to",
          "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
          "336: # PRAGMA integrity_check code.",
          "337: #",
          "338: sqlite3 db :memory:",
          "339: do_execsql_test gencol1-12.10 {",
          "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
          "341:   INSERT INTO t0(c0) VALUES (0);",
          "342:   PRAGMA integrity_check;",
          "343: } {ok}",
          "",
          "---------------"
        ]
      }
    }
  ]
}