{
  "cve_id": "CVE-2014-0160",
  "cve_desc": "The (1) TLS and (2) DTLS implementations in OpenSSL 1.0.1 before 1.0.1g do not properly handle Heartbeat Extension packets, which allows remote attackers to obtain sensitive information from process memory via crafted packets that trigger a buffer over-read, as demonstrated by reading private keys, related to d1_both.c and t1_lib.c, aka the Heartbleed bug.",
  "repo": "openssl/openssl",
  "patch_hash": "731f431497f463f3a2a97236fe0187b11c44aead",
  "patch_info": {
    "commit_hash": "731f431497f463f3a2a97236fe0187b11c44aead",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/731f431497f463f3a2a97236fe0187b11c44aead",
    "files": [
      "CHANGES",
      "ssl/d1_both.c",
      "ssl/t1_lib.c"
    ],
    "message": "Add heartbeat extension bounds check.\n\nA missing bounds check in the handling of the TLS heartbeat extension\ncan be used to reveal up to 64k of memory to a connected client or\nserver.\n\nThanks for Neel Mehta of Google Security for discovering this bug and to\nAdam Langley <agl@chromium.org> and Bodo Moeller <bmoeller@acm.org> for\npreparing the fix (CVE-2014-0160)\n(cherry picked from commit 96db9023b881d7cd9f379b0c154650d6c108e9a3)",
    "before_after_code_files": [
      "ssl/d1_both.c||ssl/d1_both.c",
      "ssl/t1_lib.c||ssl/t1_lib.c"
    ]
  },
  "patch_diff": {
    "ssl/d1_both.c||ssl/d1_both.c": [
      "File: ssl/d1_both.c -> ssl/d1_both.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1330:  unsigned int payload;",
      "1338:  if (s->msg_callback)",
      "1339:   s->msg_callback(0, s->version, TLS1_RT_HEARTBEAT,",
      "1340:    &s->s3->rrec.data[0], s->s3->rrec.length,",
      "1341:    s, s->msg_callback_arg);",
      "1343:  if (hbtype == TLS1_HB_REQUEST)",
      "1344:   {",
      "1345:   unsigned char *buffer, *bp;",
      "1346:   int r;",
      "1353:   bp = buffer;",
      "",
      "[Removed Lines]",
      "1334:  hbtype = *p++;",
      "1335:  n2s(p, payload);",
      "1336:  pl = p;",
      "1352:   buffer = OPENSSL_malloc(1 + 2 + payload + padding);",
      "",
      "[Added Lines]",
      "1339:  if (1 + 2 + 16 > s->s3->rrec.length)",
      "1341:  hbtype = *p++;",
      "1342:  n2s(p, payload);",
      "1343:  if (1 + 2 + payload + 16 > s->s3->rrec.length)",
      "1345:  pl = p;",
      "1350:   unsigned int write_length = 1 /* heartbeat type */ +",
      "1351:          2 /* heartbeat length */ +",
      "1352:          payload + padding;",
      "1355:   if (write_length > SSL3_RT_MAX_PLAIN_LENGTH)",
      "1356:    return 0;",
      "1362:   buffer = OPENSSL_malloc(write_length);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1361:   RAND_pseudo_bytes(bp, padding);",
      "1365:   if (r >= 0 && s->msg_callback)",
      "1366:    s->msg_callback(1, s->version, TLS1_RT_HEARTBEAT,",
      "1368:     s, s->msg_callback_arg);",
      "1370:   OPENSSL_free(buffer);",
      "",
      "[Removed Lines]",
      "1363:   r = dtls1_write_bytes(s, TLS1_RT_HEARTBEAT, buffer, 3 + payload + padding);",
      "1367:     buffer, 3 + payload + padding,",
      "",
      "[Added Lines]",
      "1373:   r = dtls1_write_bytes(s, TLS1_RT_HEARTBEAT, buffer, write_length);",
      "1377:     buffer, write_length,",
      "",
      "---------------"
    ],
    "ssl/t1_lib.c||ssl/t1_lib.c": [
      "File: ssl/t1_lib.c -> ssl/t1_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3969:  unsigned int payload;",
      "3977:  if (s->msg_callback)",
      "3978:   s->msg_callback(0, s->version, TLS1_RT_HEARTBEAT,",
      "3979:    &s->s3->rrec.data[0], s->s3->rrec.length,",
      "3980:    s, s->msg_callback_arg);",
      "3982:  if (hbtype == TLS1_HB_REQUEST)",
      "3983:   {",
      "3984:   unsigned char *buffer, *bp;",
      "",
      "[Removed Lines]",
      "3973:  hbtype = *p++;",
      "3974:  n2s(p, payload);",
      "3975:  pl = p;",
      "",
      "[Added Lines]",
      "3978:  if (1 + 2 + 16 > s->s3->rrec.length)",
      "3980:  hbtype = *p++;",
      "3981:  n2s(p, payload);",
      "3982:  if (1 + 2 + payload + 16 > s->s3->rrec.length)",
      "3984:  pl = p;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d15f5df70d890f9bd71a4d665699cb96f441f741",
      "candidate_info": {
        "commit_hash": "d15f5df70d890f9bd71a4d665699cb96f441f741",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/d15f5df70d890f9bd71a4d665699cb96f441f741",
        "files": [
          "ssl/d1_both.c"
        ],
        "message": "dtls1_process_heartbeat: check for NULL after allocating buffer\n\nSigned-off-by: Kurt Roeckx <kurt@roeckx.be>\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "ssl/d1_both.c||ssl/d1_both.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ],
          "candidate": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/d1_both.c||ssl/d1_both.c": [
          "File: ssl/d1_both.c -> ssl/d1_both.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1394:   buffer = OPENSSL_malloc(write_length);",
          "1395:   bp = buffer;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1395:   if (buffer == NULL)",
          "1396:    return -1;",
          "",
          "---------------"
        ]
      }
    }
  ]
}