{
  "cve_id": "CVE-2019-10678",
  "cve_desc": "Domoticz before 4.10579 neglects to categorize \\n and \\r as insecure argument options.",
  "repo": "domoticz/domoticz",
  "patch_hash": "2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
  "patch_info": {
    "commit_hash": "2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
    "files": [
      "main/Helper.cpp"
    ],
    "message": "Do not allow enters/returns in arguments (thanks to Fabio Carretto)",
    "before_after_code_files": [
      "main/Helper.cpp||main/Helper.cpp"
    ]
  },
  "patch_diff": {
    "main/Helper.cpp||main/Helper.cpp": [
      "File: main/Helper.cpp -> main/Helper.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "1014:  \"$\",",
      "1015:  \"<\",",
      "1016:  \">\",",
      "1017:  NULL",
      "1018: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1017:  \"\\n\",",
      "1018:  \"\\r\",",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1cacdddf1d772c31d81d8c42eb3a342c454a288a",
      "candidate_info": {
        "commit_hash": "1cacdddf1d772c31d81d8c42eb3a342c454a288a",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/1cacdddf1d772c31d81d8c42eb3a342c454a288a",
        "files": [
          "hardware/plugins/Plugins.cpp"
        ],
        "message": "Added Parameter entry to inform plugin the language that the Domoticz UI is using",
        "before_after_code_files": [
          "hardware/plugins/Plugins.cpp||hardware/plugins/Plugins.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/plugins/Plugins.cpp||hardware/plugins/Plugins.cpp": [
          "File: hardware/plugins/Plugins.cpp -> hardware/plugins/Plugins.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1122:    }",
          "1123:    Py_DECREF(pObj);",
          "1125:    std::vector<std::vector<std::string> > result;",
          "1126:    result = m_sql.safe_query(\"SELECT Name, Address, Port, SerialPort, Username, Password, Extra, Mode1, Mode2, Mode3, Mode4, Mode5, Mode6 FROM Hardware WHERE (ID==%d)\", m_HwdID);",
          "1127:    if (!result.empty())",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1125:    std::string sLanguage = \"en\";",
          "1126:    m_sql.GetPreferencesVar(\"Language\", sLanguage);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1136:      ADD_STRING_TO_DICT(pParamsDict, \"UserDataFolder\", szUserDataFolder);",
          "1137:      ADD_STRING_TO_DICT(pParamsDict, \"WebRoot\", szWebRoot);",
          "1138:      ADD_STRING_TO_DICT(pParamsDict, \"Database\", dbasefile);",
          "1139:      ADD_STRING_TO_DICT(pParamsDict, \"Version\", m_Version);",
          "1140:      ADD_STRING_TO_DICT(pParamsDict, \"Author\", m_Author);",
          "1141:      ADD_STRING_TO_DICT(pParamsDict, \"Name\", sd[0]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1142:      ADD_STRING_TO_DICT(pParamsDict, \"Language\", sLanguage);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f2d389bdba7605434f81365491cab9c72b6a236e",
      "candidate_info": {
        "commit_hash": "f2d389bdba7605434f81365491cab9c72b6a236e",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/f2d389bdba7605434f81365491cab9c72b6a236e",
        "files": [
          "main/mainworker.cpp"
        ],
        "message": "Scene activation code will now always be handled as ON (fixes #2624)",
        "before_after_code_files": [
          "main/mainworker.cpp||main/mainworker.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/mainworker.cpp||main/mainworker.cpp": [
          "File: main/mainworker.cpp -> main/mainworker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "12462:   offaction = sds[3];",
          "12463:   status = sds[4];",
          "12469:   }",
          "12471:   m_sql.HandleOnOffAction((nValue == 1), onaction, offaction);",
          "12472:  }",
          "",
          "[Removed Lines]",
          "12466:   if (switchcmd == \"Toggle\") {",
          "12467:    nValue = (atoi(status.c_str()) == 0 ? 1 : 0);",
          "12468:    switchcmd = (nValue == 1 ? \"On\" : \"Off\");",
          "",
          "[Added Lines]",
          "12463:   if (scenetype == SGTYPE_GROUP)",
          "12464:   {",
          "12466:    if (switchcmd == \"Toggle\") {",
          "12467:     nValue = (atoi(status.c_str()) == 0 ? 1 : 0);",
          "12468:     switchcmd = (nValue == 1 ? \"On\" : \"Off\");",
          "12469:    }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12669:      std::stringstream s_str(sd[0]);",
          "12670:      s_str >> ID;",
          "12671:      int scenetype = atoi(sd[2].c_str());",
          "12673:      if ((scenetype == SGTYPE_SCENE) && (!sCode.empty()))",
          "12674:      {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12672:      int rnValue = nValue;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "12676:       int iCode = atoi(sCode.c_str());",
          "12677:       if (iCode != nValue)",
          "12678:        continue;",
          "12679:      }",
          "12681:      std::string lstatus = \"\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12680:       rnValue = 1; //A Scene can only be activated (On)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "12684:      bool bHaveGroupCmd = false;",
          "12685:      int maxDimLevel = 0;",
          "12688:      std::string switchcmd = (IsLightSwitchOn(lstatus) == true) ? \"On\" : \"Off\";",
          "12690:      m_sql.AddTaskItem(_tTaskItem::SwitchSceneEvent(0.2f, ID, switchcmd, \"SceneTrigger\"));",
          "",
          "[Removed Lines]",
          "12687:      GetLightStatus(dType, dSubType, STYPE_OnOff, nValue, sValue, lstatus, llevel, bHaveDimmer, maxDimLevel, bHaveGroupCmd);",
          "",
          "[Added Lines]",
          "12689:      GetLightStatus(dType, dSubType, STYPE_OnOff, rnValue, sValue, lstatus, llevel, bHaveDimmer, maxDimLevel, bHaveGroupCmd);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9d7a24683ead964d28ed05c8fec6427cc5db0a3e",
      "candidate_info": {
        "commit_hash": "9d7a24683ead964d28ed05c8fec6427cc5db0a3e",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/9d7a24683ead964d28ed05c8fec6427cc5db0a3e",
        "files": [
          "hardware/RFXBase.cpp",
          "main/RFXNames.cpp",
          "main/RFXtrx.h",
          "main/mainworker.cpp",
          "main/mainworker.h",
          "push/BasePush.cpp"
        ],
        "message": "Updated RFXCom SDK",
        "before_after_code_files": [
          "hardware/RFXBase.cpp||hardware/RFXBase.cpp",
          "main/RFXNames.cpp||main/RFXNames.cpp",
          "main/RFXtrx.h||main/RFXtrx.h",
          "main/mainworker.cpp||main/mainworker.cpp",
          "main/mainworker.h||main/mainworker.h",
          "push/BasePush.cpp||push/BasePush.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/RFXBase.cpp||hardware/RFXBase.cpp": [
          "File: hardware/RFXBase.cpp -> hardware/RFXBase.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "154:   return (pLen == 0x0B);",
          "155:  case pTypeASYNCDATA:",
          "156:   return (pLen > 0x03);",
          "157:  default:",
          "158:   return false;//unknown Type",
          "159:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "157:  case pTypeWEATHER:",
          "158:   return (pLen == 0x1F);",
          "159:  case pTypeSOLAR:",
          "160:   return (pLen == 0x0A);",
          "",
          "---------------"
        ],
        "main/RFXNames.cpp||main/RFXNames.cpp": [
          "File: main/RFXNames.cpp -> main/RFXNames.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "529:  { pTypeEvohomeWater, \"Heating\" , \"evohome\" },",
          "530:  { pTypeEvohomeRelay, \"Heating\" , \"evohome\" },",
          "531:  { pTypeGeneralSwitch, \"Light/Switch\", \"lightbulb\" },",
          "532:  { 0, NULL, NULL }",
          "533:  };",
          "534:  if (snum == 1)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "532:  { pTypeWEATHER, \"Weather\" , \"weather\" },",
          "533:  { pTypeSOLAR, \"Solar\" , \"solar\" },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "586:  { pTypeRAIN, sTypeRAIN6, \"LaCrosse TX5\" },",
          "587:  { pTypeRAIN, sTypeRAIN7, \"Alecto\" },",
          "588:  { pTypeRAIN, sTypeRAIN8, \"Davis\" },",
          "590:  { pTypeRAIN, sTypeRAINWU, \"WWW\" },",
          "592:  { pTypeWIND, sTypeWIND1, \"WTGR800\" },",
          "",
          "[Removed Lines]",
          "589:  { pTypeRAIN, sTypeRAIN9, \"Alecto WCH2010\" },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "596:  { pTypeWIND, sTypeWIND5, \"UPM WDS500\" },",
          "597:  { pTypeWIND, sTypeWIND6, \"LaCrosse WS2300\" },",
          "598:  { pTypeWIND, sTypeWIND7, \"Alecto WS4500\" },",
          "600:  { pTypeWIND, sTypeWINDNoTemp, \"Weather Station\" },",
          "601:  { pTypeWIND, sTypeWINDNoTempNoChill, \"Wind\" },",
          "",
          "[Removed Lines]",
          "599:  { pTypeWIND, sTypeWIND8, \"Alecto ACH2010\" },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "604:  { pTypeUV, sTypeUV2, \"UVN800\" },",
          "605:  { pTypeUV, sTypeUV3, \"TFA\" },",
          "607:  { pTypeLighting1, sTypeX10, \"X10\" },",
          "608:  { pTypeLighting1, sTypeARC, \"ARC\" },",
          "609:  { pTypeLighting1, sTypeAB400D, \"ELRO AB400\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "606:  { pTypeWEATHER, sTypeWEATHER1, \"Alecto ACH2010\" },",
          "607:  { pTypeWEATHER, sTypeWEATHER2, \"Alecto WS5500\" },",
          "609:  { pTypeSOLAR, sTypeSOLAR1, \"Davis\" },",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "778:  { pTypeChime, sTypeByronSX, \"ByronSX\" },",
          "779:  { pTypeChime, sTypeByronMP001, \"Byron MP001\" },",
          "780:  { pTypeChime, sTypeSelectPlus, \"SelectPlus\" },",
          "782:  { pTypeChime, sTypeEnvivo, \"Envivo\" },",
          "784:  { pTypeFan, sTypeSiemensSF01 , \"Siemens SF01\" },",
          "785:  { pTypeFan, sTypeItho , \"Itho CVE RFT\" },",
          "",
          "[Removed Lines]",
          "781:  { pTypeChime, sTypeSelectPlus3, \"SelectPlus3\" },",
          "",
          "[Added Lines]",
          "785:  { pTypeChime, sTypeByronBY, \"SelectPlus3\" },",
          "787:  { pTypeChime, sTypeAlfawise, \"Alfawise\" },",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "821:  { pTypeFS20, sTypeFHT8V, \"FHT 8V valve\" },",
          "822:  { pTypeFS20, sTypeFHT80, \"FHT80 door/window sensor\" },",
          "824:  { pTypeGeneralSwitch, sSwitchTypeX10, \"X10\" },",
          "825:  { pTypeGeneralSwitch, sSwitchTypeARC, \"ARC\" },",
          "826:  { pTypeGeneralSwitch, sSwitchTypeAB400D, \"ELRO AB400\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "829:  { pTypeWEATHER, sTypeWEATHER1, \"Alecto ACH2010\" },",
          "830:  { pTypeWEATHER, sTypeWEATHER2, \"Alecto WS5500\" },",
          "832:  { pTypeSOLAR, sTypeSOLAR1, \"Davis\" },",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3674:   dtype = pTypeGeneralSwitch;",
          "3675:   if (subtype == sTypeByronSX) subtype = sSwitchTypeByronSX;",
          "3676:   if (subtype == sTypeSelectPlus) subtype = sSwitchTypeSelectPlus;",
          "3678:   if (subtype == sTypeByronMP001) subtype = sSwitchTypeByronMP001;",
          "3679:  }",
          "3680:  else if (dtype == pTypeSecurity1) {",
          "",
          "[Removed Lines]",
          "3677:   if (subtype == sTypeSelectPlus3) subtype = sSwitchTypeSelectPlus3;",
          "",
          "[Added Lines]",
          "3687:   if (subtype == sTypeByronBY) subtype = sSwitchTypeSelectPlus3;",
          "",
          "---------------"
        ],
        "main/RFXtrx.h||main/RFXtrx.h": [
          "File: main/RFXtrx.h -> main/RFXtrx.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: ALL RIGHTS RESERVED. This code is owned by RFXCOM, and is protected under",
          "15: Netherlands Copyright Laws and Treaties and shall be subject to the",
          "",
          "[Removed Lines]",
          "12: Copyright 2011-2018, RFXCOM",
          "",
          "[Added Lines]",
          "12: Copyright 2011-2019, RFXCOM",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: SDK version 9.23",
          "31:  Async data subtypes changed",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: SDK version 9.24",
          "31:  Chime Alfawise, dBell added",
          "32:  SelectPlus3 changed to ByronBY",
          "33:  Async Get Settings added",
          "34:  868 protocol selection bits updated and changed",
          "35:  WEATHER & SOLAR structures added",
          "36:  ACH2010 moved to WEATHER",
          "37:  WS5500 added",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "447: #define msg3_868_DAVISAU 0x02 //Davis AU",
          "448: #define msg3_868_DAVISUS 0x04 //Davis US",
          "449: #define msg3_868_DAVISEU 0x08 //Davis EU",
          "452: #define msg3_868_ALECTO 0x40 //Alecto ACH2010",
          "453: #define msg3_868_UNDEC 0x80  //Enable undecoded",
          "458: #define msg4_868_RFU3 0x08  //RFU",
          "461: #define msg4_868_RFU6 0x40  //RFU",
          "462: #define msg4_868_RFU7 0x80  //RFU",
          "",
          "[Removed Lines]",
          "450: #define msg3_868_RFU4 0x10  //RFU",
          "451: #define msg3_868_LACROSSE 0x20 //LaCrosse",
          "455: #define msg4_868_EDISIO 0x01 //Edisio",
          "456: #define msg4_868_RFU1 0x02  //RFU",
          "457: #define msg4_868_RFU2 0x04  //RFU",
          "459: #define msg4_868_FS20 0x10  //FS20",
          "460: #define msg4_868_PROGUARD 0x20 //Proguard",
          "",
          "[Added Lines]",
          "459: #define msg3_868_LACROSSE 0x10  //LACROSSE",
          "460: #define msg3_868_ALECTO5500 0x20 //Alecto WS5500",
          "464: #define msg4_868_EDISIO 0x01 //EDISIO",
          "465: #define msg4_868_LWRF 0x02  //LightwaveRF",
          "466: #define msg4_868_FS20 0x04  //FS20",
          "468: #define msg4_868_RFU4 0x10  //RFU",
          "469: #define msg4_868_RFU5 0x20  //RFU",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "465: #define msg5_868_RFU1 0x02  //RFU",
          "466: #define msg5_868_RFU2 0x04  //RFU",
          "467: #define msg5_868_RFU3 0x08  //RFU",
          "471: #define msg5_868_VISONIC 0x80 //Visonic",
          "474: #define msg6_868_RFU1 0x02  //RFU",
          "475: #define msg6_868_RFU2 0x04  //RFU",
          "476: #define msg6_868_RFU3 0x08  //RFU",
          "477: #define msg6_868_RFU4 0x10  //RFU",
          "482: #define pTypeRecXmitMessage 0x02",
          "483: #define sTypeReceiverLockError 0x00",
          "",
          "[Removed Lines]",
          "468: #define msg5_868_RFU4 0x10  //RFU",
          "469: #define msg5_868_RFU5 0x20  //RFU",
          "470: #define msg5_868_MEI 0x40  //Meiantech,Atlantic",
          "473: #define msg6_868_KEELOQ 0x01 //Keeloq",
          "478: #define msg6_868_RFU5 0x20  //RFU",
          "479: #define msg6_868_RFU6 0x40  //RFU",
          "480: #define msg6_868_RFU7 0x80  //RFU",
          "",
          "[Added Lines]",
          "477: #define msg5_868_PROGUARD  0x10 //Proguard",
          "478: #define msg5_868_KEELOQ 0x20    //KEELOQ",
          "479: #define msg5_868_MEIANTECH 0x40 //Meiantech,Atlantic",
          "482: #define msg6_868_RFU0 0x01  //RFU",
          "487: #define msg6_868_HONCHIME 0x20 //Honeywell Chime",
          "488: #define msg6_868_ITHOECO 0x40 //Itho CVE ECO RFT",
          "489: #define msg6_868_ITHO 0x80  //Itho CVE RFT",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "683: #define sTypeByronSX 0x0",
          "684: #define sTypeByronMP001 0x1",
          "685: #define sTypeSelectPlus 0x2",
          "687: #define sTypeEnvivo 0x4",
          "688: #define chime_sound0 0x1",
          "689: #define chime_sound1 0x3",
          "690: #define chime_sound2 0x5",
          "",
          "[Removed Lines]",
          "686: #define sTypeSelectPlus3 0x3",
          "",
          "[Added Lines]",
          "695: #define sTypeByronBY 0x3",
          "697: #define sTypeAlfawise 0x5",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1075: #define sTypeRAIN6 0x6   //TX5",
          "1076: #define sTypeRAIN7 0x7   //Alecto",
          "1077: #define sTypeRAIN8 0x8   //Davis",
          "1081: #define pTypeWIND 0x56",
          "",
          "[Removed Lines]",
          "1078: #define sTypeRAIN9 0x9   //Alecto WCH2010",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1086: #define sTypeWIND5 0x5   //UPM, Davis",
          "1087: #define sTypeWIND6 0x6   //WS2300",
          "1088: #define sTypeWIND7 0x7   //Alecto WS4500",
          "1092: #define pTypeUV 0x57",
          "",
          "[Removed Lines]",
          "1089: #define sTypeWIND8 0x8   //Alecto ACH2010",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1138: #define asyncdisable 0x0",
          "1139: #define asyncreceiveP1 0x1",
          "1140: #define asyncreceiveTeleinfo 0x2",
          "1142: #define asyncbaud110 0x0",
          "1143: #define asyncbaud300 0x1",
          "1144: #define asyncbaud600 0x2",
          "",
          "[Removed Lines]",
          "1141: #define asyncreceiveRAW 0x3",
          "",
          "[Added Lines]",
          "1149: #define asyncreceiveRAW 0xFE //not yet implemented",
          "1150: #define asyncreceiveGetSettings 0xFF",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1222: #define fs20_sOn_last_dim_level_period 0x1A",
          "1223: #define fs20_sReset 0x1B",
          "1226: #define pTypeRAW 0x7F",
          "1227: #define sTypeRAW1 0x0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1235: #define pTypeWEATHER 0x76",
          "1236: #define sTypeWEATHER1 0x1   //Alecto ACH2010",
          "1237: #define sTypeWEATHER2 0x2   //Alecto WS5500",
          "1240: #define pTypeSOLAR 0x77",
          "1241: #define sTypeSOLAR1 0x1   //Davis",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1364:   BYTE UNDECODEDenabled : 1;",
          "1365:   BYTE ALECTOenabled : 1;",
          "1368:   BYTE DAVISEUenabled : 1;",
          "1369:   BYTE DAVISUSenabled : 1;",
          "1370:   BYTE DAVISAUenabled : 1;",
          "",
          "[Removed Lines]",
          "1366:   BYTE MSG3Reserved5 : 1;",
          "1367:   BYTE MSG3Reserved4 : 1;",
          "",
          "[Added Lines]",
          "1384:   BYTE ALECTO5500enabled : 1;",
          "1385:   BYTE LACROSSEenabled : 1;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1374:   BYTE MSG4Reserved7 : 1;",
          "1375:   BYTE MSG4Reserved6 : 1;",
          "1378:   BYTE MSG4Reserved3 : 1;",
          "1381:   BYTE EDISIOenabled : 1;",
          "1384:   BYTE VISONICenabled : 1;",
          "1388:   BYTE MSG5Reserved3 : 1;",
          "1389:   BYTE MSG5Reserved2 : 1;",
          "1390:   BYTE MSG5Reserved1 : 1;",
          "1391:   BYTE MSG5Reserved0 : 1; //note: keep this order",
          "1397:   BYTE    MSG6Reserved4 : 1;",
          "1398:   BYTE    MSG6Reserved3 : 1;",
          "1399:   BYTE    MSG6Reserved2 : 1;",
          "1400:   BYTE    MSG6Reserved1 : 1;",
          "1402: #else",
          "1404:   BYTE MSG3Reserved0 : 1;",
          "1405:   BYTE DAVISAUenabled : 1;",
          "1406:   BYTE DAVISUSenabled : 1;",
          "1407:   BYTE DAVISEUenabled : 1;",
          "1410:   BYTE ALECTOenabled : 1;",
          "1411:   BYTE UNDECODEDenabled : 1;",
          "1414:   BYTE EDISIOenabled : 1;",
          "1418:   BYTE FS20enabled : 1;",
          "1420:   BYTE MSG4Reserved6 : 1;",
          "1421:   BYTE MSG4Reserved7 : 1;",
          "",
          "[Removed Lines]",
          "1376:   BYTE PROGUARDenabled : 1;",
          "1377:   BYTE FS20enabled : 1;",
          "1379:   BYTE MSG4Reserved2 : 1;",
          "1380:   BYTE MSG4Reserved1 : 1;",
          "1385:   BYTE MSG5Reserved6 : 1;",
          "1386:   BYTE MSG5Reserved5 : 1;",
          "1387:   BYTE MSG5Reserved4 : 1;",
          "1394:   BYTE    MSG6Reserved7 : 1;",
          "1395:   BYTE    MSG6Reserved6 : 1;",
          "1396:   BYTE    MSG6Reserved5 : 1;",
          "1401:   BYTE    KEELOQenabled : 1;",
          "1408:   BYTE MSG3Reserved4 : 1;",
          "1409:   BYTE MSG3Reserved5 : 1;",
          "1415:   BYTE MSG4Reserved1 : 1;",
          "1416:   BYTE MSG4Reserved2 : 1;",
          "1417:   BYTE MSG4Reserved3 : 1;",
          "1419:   BYTE PROGUARDenabled : 1;",
          "",
          "[Added Lines]",
          "1394:   BYTE MSG4Reserved5 : 1;",
          "1395:   BYTE MSG4Reserved4 : 1;",
          "1397:   BYTE FS20enabled : 1;",
          "1398:   BYTE LWRFenabled : 1;",
          "1403:   BYTE MEIANTECHenabled : 1;",
          "1404:   BYTE KEELOQenabled : 1;",
          "1405:   BYTE PROGUARDenabled : 1;",
          "1412:   BYTE    ITHOenabled : 1;",
          "1413:   BYTE    ITHOecoenabled : 1;",
          "1414:   BYTE    HONEYWELLenabled : 1;",
          "1419:   BYTE    MSG6Reserved0 : 1;",
          "1426:   BYTE LACROSSEenabled : 1;",
          "1427:   BYTE ALECTO5500enabled : 1;",
          "1433:   BYTE LWRFenabled : 1;",
          "1435:   BYTE MSG4Reserved3 : 1;",
          "1436:   BYTE MSG4Reserved4 : 1;",
          "1437:   BYTE MSG4Reserved5 : 1;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1425:   BYTE MSG5Reserved1 : 1;",
          "1426:   BYTE MSG5Reserved2 : 1;",
          "1427:   BYTE MSG5Reserved3 : 1;",
          "1431:   BYTE VISONICenabled : 1;",
          "1435:   BYTE    MSG6Reserved1 : 1;",
          "1436:   BYTE    MSG6Reserved2 : 1;",
          "1437:   BYTE    MSG6Reserved3 : 1;",
          "1438:   BYTE    MSG6Reserved4 : 1;",
          "1442: #endif",
          "1444:   BYTE msg7;",
          "",
          "[Removed Lines]",
          "1428:   BYTE MSG5Reserved4 : 1;",
          "1429:   BYTE MSG5Reserved5 : 1;",
          "1430:   BYTE MSG5Reserved6 : 1;",
          "1434:   BYTE    KEELOQenabled : 1;",
          "1439:   BYTE    MSG6Reserved5 : 1;",
          "1440:   BYTE    MSG6Reserved6 : 1;",
          "1441:   BYTE    MSG6Reserved7 : 1;",
          "",
          "[Added Lines]",
          "1446:   BYTE PROGUARDenabled : 1;",
          "1447:   BYTE    KEELOQenabled : 1;",
          "1448:   BYTE MEIANTECHenabled : 1;",
          "1452:   BYTE    MSG6Reserved0 : 1;",
          "1457:   BYTE    HONEYWELLenabled : 1;",
          "1458:   BYTE    ITHOecoenabled : 1;",
          "1459:   BYTE    ITHOenabled : 1;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2538: #endif",
          "2539:     } FS20;",
          "2541:  struct {",
          "2542:  BYTE packetlength;",
          "2543:  BYTE packettype;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2559:  struct {",
          "2560:   BYTE packetlength;",
          "2561:   BYTE packettype;",
          "2562:   BYTE subtype;",
          "2563:   BYTE seqnbr;",
          "2564:   BYTE id1;",
          "2565:   BYTE id2;",
          "2566:   BYTE directionhigh;",
          "2567:   BYTE directionlow;",
          "2568:   BYTE av_speedhigh;",
          "2569:   BYTE av_speedlow;",
          "2570:   BYTE gusthigh;",
          "2571:   BYTE gustlow;",
          "2572: #ifdef IS_BIG_ENDIAN",
          "2573:   BYTE temperaturesign : 1;",
          "2574:   BYTE temperaturehigh : 7;",
          "2575: #else",
          "2576:   BYTE temperaturehigh : 7;",
          "2577:   BYTE temperaturesign : 1;",
          "2578: #endif",
          "2579:   BYTE temperaturelow;",
          "2580: #ifdef IS_BIG_ENDIAN",
          "2581:   BYTE chillsign : 1;",
          "2582:   BYTE chillhigh : 7;",
          "2583: #else",
          "2584:   BYTE chillhigh : 7;",
          "2585:   BYTE chillsign : 1;",
          "2586: #endif",
          "2587:   BYTE chilllow;",
          "2588:   BYTE humidity;",
          "2589:   BYTE humidity_status;",
          "2590:   BYTE rainratehigh;",
          "2591:   BYTE rainratelow;",
          "2592:   BYTE raintotal1; //high byte",
          "2593:   BYTE raintotal2;",
          "2594:   BYTE raintotal3; //low byte",
          "2595:   BYTE uv;",
          "2596:   BYTE solarhigh;",
          "2597:   BYTE solarlow;",
          "2598:   BYTE barohigh;",
          "2599:   BYTE barolow;",
          "2600:   BYTE forecast;",
          "2601:   BYTE rfu1;",
          "2602:   BYTE rfu2;",
          "2603: #ifdef IS_BIG_ENDIAN",
          "2604:   BYTE rssi : 4;",
          "2605:   BYTE battery_level : 4;",
          "2606: #else",
          "2607:   BYTE battery_level : 4;",
          "2608:   BYTE rssi : 4;",
          "2609: #endif",
          "2610:  } WEATHER;",
          "2612:  struct {",
          "2613:   BYTE packetlength;",
          "2614:   BYTE packettype;",
          "2615:   BYTE subtype;",
          "2616:   BYTE seqnbr;",
          "2617:   BYTE id1;",
          "2618:   BYTE id2;",
          "2619:   BYTE solarhigh;",
          "2620:   BYTE solarlow;",
          "2621:   BYTE rfu1;",
          "2622:   BYTE rfu2;",
          "2623: #ifdef IS_BIG_ENDIAN",
          "2624:   BYTE rssi : 4;",
          "2625:   BYTE battery_level : 4;",
          "2626: #else",
          "2627:   BYTE battery_level : 4;",
          "2628:   BYTE rssi : 4;",
          "2629: #endif",
          "2630:  } SOLAR;",
          "",
          "---------------"
        ],
        "main/mainworker.cpp||main/mainworker.cpp": [
          "File: main/mainworker.cpp -> main/mainworker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "972:   pHardware = new CDummy(ID);",
          "973:   break;",
          "974:  case HTYPE_Tellstick: {",
          "981:  case HTYPE_EVOHOME_SCRIPT:",
          "982:   pHardware = new CEvohomeScript(ID);",
          "983:   break;",
          "",
          "[Removed Lines]",
          "975:             CTellstick* tellstick;",
          "976:             if (CTellstick::Create(&tellstick, ID, Mode1, Mode2)) {",
          "977:                 pHardware = tellstick;",
          "978:             }",
          "979:         }",
          "980:   break;",
          "",
          "[Added Lines]",
          "975:   CTellstick* tellstick;",
          "976:   if (CTellstick::Create(&tellstick, ID, Mode1, Mode2)) {",
          "977:    pHardware = tellstick;",
          "978:   }",
          "979:  }",
          "980:         break;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2388:   case pTypeASYNCDATA:",
          "2389:    decode_ASyncData(HwdID, HwdType, reinterpret_cast<const tRBUF *>(pRXCommand), procResult);",
          "2390:    break;",
          "2391:   default:",
          "2392:    _log.Log(LOG_ERROR, \"UNHANDLED PACKET TYPE:      FS20 %02X\", pRXCommand[1]);",
          "2393:    return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2391:   case pTypeWEATHER:",
          "2392:    decode_Weather(HwdID, HwdType, reinterpret_cast<const tRBUF *>(pRXCommand), procResult);",
          "2393:    break;",
          "2394:   case pTypeSOLAR:",
          "2395:    decode_Solar(HwdID, HwdType, reinterpret_cast<const tRBUF *>(pRXCommand), procResult);",
          "2396:    break;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3062:   case sTypeRAIN8:",
          "3063:    WriteMessage(\"subtype       = RAIN8 - Davis\");",
          "3064:    break;",
          "3068:   case sTypeRAINWU:",
          "3069:    WriteMessage(\"subtype       = Weather Underground (Total Rain)\");",
          "3070:    break;",
          "",
          "[Removed Lines]",
          "3065:   case sTypeRAIN9:",
          "3066:    WriteMessage(\"subtype       = RAIN9 - Alecto WCH2010\");",
          "3067:    break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3268:   case sTypeWIND7:",
          "3269:    WriteMessage(\"subtype       = WIND7 - Alecto WS4500\");",
          "3270:    break;",
          "3274:   case sTypeWINDNoTemp:",
          "3275:    WriteMessage(\"subtype       = Weather Station\");",
          "3276:    break;",
          "",
          "[Removed Lines]",
          "3271:   case sTypeWIND8:",
          "3272:    WriteMessage(\"subtype       = WIND8 - Alecto ACH2010\");",
          "3273:    break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6002:    sprintf(szTmp, \"ID            = %02X%02X\", pResponse->CHIME.id1, pResponse->CHIME.id2);",
          "6003:    WriteMessage(szTmp);",
          "6004:    break;",
          "6006:    WriteMessage(\"subtype       = SelectPlus200689103\");",
          "6007:    sprintf(szTmp, \"Sequence nbr  = %d\", pResponse->CHIME.seqnbr);",
          "6008:    WriteMessage(szTmp);",
          "",
          "[Removed Lines]",
          "6005:   case sTypeSelectPlus3:",
          "",
          "[Added Lines]",
          "6005:   case sTypeByronBY:",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6016:    sprintf(szTmp, \"ID            = %02X%02X\", pResponse->CHIME.id1, pResponse->CHIME.id2);",
          "6017:    WriteMessage(szTmp);",
          "6018:    break;",
          "6019:   default:",
          "6020:    sprintf(szTmp, \"ERROR: Unknown Sub type for Packet type= %02X:%02X\", pResponse->CHIME.packettype, pResponse->CHIME.subtype);",
          "6021:    WriteMessage(szTmp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6019:   case sTypeAlfawise:",
          "6020:    WriteMessage(\"subtype       = Alfawise\");",
          "6021:    sprintf(szTmp, \"Sequence nbr  = %d\", pResponse->CHIME.seqnbr);",
          "6022:    WriteMessage(szTmp);",
          "6023:    sprintf(szTmp, \"ID            = %02X%02X\", pResponse->CHIME.id1, pResponse->CHIME.id2);",
          "6024:    WriteMessage(szTmp);",
          "6025:    break;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "10575:   return;",
          "10577:  if (",
          "10579:   (pHardware->HwdType == HTYPE_RFXtrx315) ||",
          "10580:   (pHardware->HwdType == HTYPE_RFXtrx433) ||",
          "10581:   (pHardware->HwdType == HTYPE_RFXtrx868) ||",
          "",
          "[Removed Lines]",
          "10578:   (pHardware->m_HwdID == 999)||",
          "",
          "[Added Lines]",
          "10585:   (pHardware->m_HwdID == 999) ||",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "10849:  m_notifications.CheckAndHandleNotification(DevRowIdx, HwdID, ID, procResult.DeviceName, 1, devType, subType, (float)counter2);",
          "10850: }",
          "10852: bool MainWorker::GetSensorData(const uint64_t idx, int &nValue, std::string &sValue)",
          "10853: {",
          "10854:  std::vector<std::vector<std::string> > result;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10859: void MainWorker::decode_Weather(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "10860: {",
          "10863:  unsigned short windID = (pResponse->WIND.id1 * 256) + pResponse->WIND.id2;",
          "10864:  char szTmp[100];",
          "10865:  sprintf(szTmp, \"%d\", windID);",
          "10866:  std::string ID = szTmp;",
          "10868:  unsigned char devType = pTypeWEATHER;",
          "10869:  unsigned char subType = pResponse->WEATHER.subtype;",
          "10870:  unsigned char Unit = 0;",
          "10871:  unsigned char cmnd = 0;",
          "10872:  unsigned char SignalLevel = pResponse->WEATHER.rssi;",
          "10873:  unsigned char BatteryLevel = get_BateryLevel(HwdType, false, pResponse->WEATHER.battery_level & 0x0F);",
          "10875:  double dDirection;",
          "10876:  dDirection = (double)(pResponse->WEATHER.directionhigh * 256) + pResponse->WEATHER.directionlow;",
          "10877:  dDirection = m_wind_calculator[windID].AddValueAndReturnAvarage(dDirection);",
          "10879:  std::string strDirection;",
          "10880:  if (dDirection > 348.75 || dDirection < 11.26)",
          "10881:   strDirection = \"N\";",
          "10882:  else if (dDirection < 33.76)",
          "10883:   strDirection = \"NNE\";",
          "10884:  else if (dDirection < 56.26)",
          "10885:   strDirection = \"NE\";",
          "10886:  else if (dDirection < 78.76)",
          "10887:   strDirection = \"ENE\";",
          "10888:  else if (dDirection < 101.26)",
          "10889:   strDirection = \"E\";",
          "10890:  else if (dDirection < 123.76)",
          "10891:   strDirection = \"ESE\";",
          "10892:  else if (dDirection < 146.26)",
          "10893:   strDirection = \"SE\";",
          "10894:  else if (dDirection < 168.76)",
          "10895:   strDirection = \"SSE\";",
          "10896:  else if (dDirection < 191.26)",
          "10897:   strDirection = \"S\";",
          "10898:  else if (dDirection < 213.76)",
          "10899:   strDirection = \"SSW\";",
          "10900:  else if (dDirection < 236.26)",
          "10901:   strDirection = \"SW\";",
          "10902:  else if (dDirection < 258.76)",
          "10903:   strDirection = \"WSW\";",
          "10904:  else if (dDirection < 281.26)",
          "10905:   strDirection = \"W\";",
          "10906:  else if (dDirection < 303.76)",
          "10907:   strDirection = \"WNW\";",
          "10908:  else if (dDirection < 326.26)",
          "10909:   strDirection = \"NW\";",
          "10910:  else if (dDirection < 348.76)",
          "10911:   strDirection = \"NNW\";",
          "10912:  else",
          "10913:   strDirection = \"---\";",
          "10915:  dDirection = round(dDirection);",
          "10917:  int intSpeed = (pResponse->WEATHER.av_speedhigh * 256) + pResponse->WEATHER.av_speedlow;",
          "10918:  int intGust = (pResponse->WEATHER.gusthigh * 256) + pResponse->WEATHER.gustlow;",
          "10920:  m_wind_calculator[windID].SetSpeedGust(intSpeed, intGust);",
          "10922:  float temp = 0, chill = 0;",
          "10923:  if (!pResponse->WEATHER.temperaturesign)",
          "10924:  {",
          "10925:   temp = float((pResponse->WEATHER.temperaturehigh * 256) + pResponse->WEATHER.temperaturelow) / 10.0f;",
          "10926:  }",
          "10927:  else",
          "10928:  {",
          "10929:   temp = -(float(((pResponse->WEATHER.temperaturehigh & 0x7F) * 256) + pResponse->WEATHER.temperaturelow) / 10.0f);",
          "10930:  }",
          "10931:  if ((temp < -200) || (temp > 380))",
          "10932:  {",
          "10933:   WriteMessage(\" Invalid Temperature\");",
          "10934:   return;",
          "10935:  }",
          "10937:  float AddjValue = 0.0f;",
          "10938:  float AddjMulti = 1.0f;",
          "10939:  m_sql.GetAddjustment(HwdID, ID.c_str(), Unit, devType, subType, AddjValue, AddjMulti);",
          "10940:  temp += AddjValue;",
          "10942:  if (!pResponse->WEATHER.chillsign)",
          "10943:  {",
          "10944:   chill = float((pResponse->WEATHER.chillhigh * 256) + pResponse->WEATHER.chilllow) / 10.0f;",
          "10945:  }",
          "10946:  else",
          "10947:  {",
          "10948:   chill = -(float(((pResponse->WEATHER.chillhigh) & 0x7F) * 256 + pResponse->WEATHER.chilllow) / 10.0f);",
          "10949:  }",
          "10950:  chill += AddjValue;",
          "10952:  sprintf(szTmp, \"%.2f;%s;%d;%d;%.1f;%.1f\", dDirection, strDirection.c_str(), intSpeed, intGust, temp, chill);",
          "10953:  uint64_t DevRowIdx = m_sql.UpdateValue(HwdID, ID.c_str(), Unit, devType, subType, SignalLevel, BatteryLevel, cmnd, szTmp, procResult.DeviceName);",
          "10954:  if (DevRowIdx == -1)",
          "10955:   return;",
          "10956:  procResult.DeviceRowIdx = DevRowIdx;",
          "10958:  m_notifications.CheckAndHandleNotification(DevRowIdx, HwdID, ID, procResult.DeviceName, Unit, devType, subType, cmnd, szTmp);",
          "10960:  uint64_t tID = ((uint64_t)(HwdID & 0x7FFFFFFF) << 32) | (DevRowIdx & 0x7FFFFFFF);",
          "10961:  m_trend_calculator[tID].AddValueAndReturnTendency(static_cast<double>(chill), _tTrendCalculator::TAVERAGE_TEMP);",
          "10963:  CDomoticzHardwareBase* pHardware = GetHardware(HwdID);",
          "10964:  if (pHardware)",
          "10965:  {",
          "10966:   CRFXBase *pRFXDevice = reinterpret_cast<CRFXBase *>(pHardware);",
          "10968:   if (subType = sTypeWEATHER2)",
          "10969:   {",
          "10970:    int Humidity = (int)pResponse->WEATHER.humidity;",
          "10971:    unsigned char HumidityStatus = pResponse->WEATHER.humidity_status;",
          "10973:    MySensorsBase *pMySensorDevice = reinterpret_cast<MySensorsBase*>(pHardware);",
          "10975:    pRFXDevice->SendTempHumSensor(windID, BatteryLevel, temp, Humidity, procResult.DeviceName, SignalLevel);",
          "10976:   }",
          "10979:   if ((subType = sTypeWEATHER1) || (subType = sTypeWEATHER2))",
          "10980:   {",
          "10981:    float TotalRain = 0;",
          "10983:    if (subType = sTypeWEATHER1)",
          "10984:    {",
          "10985:     TotalRain = float((pResponse->WEATHER.raintotal2 * 256) + (pResponse->WEATHER.raintotal3)) * 0.3f;",
          "10986:    }",
          "10987:    else if (subType = sTypeWEATHER2)",
          "10988:    {",
          "10989:     TotalRain = float((pResponse->WEATHER.raintotal2 * 256) + (pResponse->WEATHER.raintotal3)) * 0.254f;",
          "10990:    }",
          "10991:    pRFXDevice->SendRainSensor(windID, BatteryLevel, TotalRain, procResult.DeviceName, SignalLevel);",
          "10992:   }",
          "10995:   if (subType = sTypeWEATHER2)",
          "10996:   {",
          "10997:    float UV = (float)pResponse->WEATHER.uv;",
          "10998:    pRFXDevice->SendUVSensor(windID, 1, BatteryLevel, UV, procResult.DeviceName, SignalLevel);",
          "10999:   }",
          "11002:   if (subType = sTypeWEATHER2)",
          "11003:   {",
          "11004:    float radiation = (float)((pResponse->WEATHER.solarhigh * 256) + pResponse->WEATHER.solarlow);",
          "11005:    _tGeneralDevice gdevice;",
          "11006:    gdevice.subtype = sTypeSolarRadiation;",
          "11007:    gdevice.intval1 = windID;",
          "11008:    gdevice.floatval1 = radiation;",
          "11009:    decode_General(HwdID, HwdType, pResponse, procResult, SignalLevel, BatteryLevel);",
          "11010:   }",
          "11011:  }",
          "11012: }",
          "11014: void MainWorker::decode_Solar(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "11015: {",
          "11016:  unsigned char SignalLevel = pResponse->SOLAR.rssi;",
          "11017:  unsigned char BatteryLevel = get_BateryLevel(HwdType, false, pResponse->SOLAR.battery_level & 0x0F);",
          "11019:  _tGeneralDevice gdevice;",
          "11020:  gdevice.subtype = sTypeSolarRadiation;",
          "11021:  gdevice.intval1 = (pResponse->SOLAR.id1 * 256) + pResponse->SOLAR.id2;",
          "11022:  gdevice.floatval1 = float((pResponse->SOLAR.solarhigh * 256) + float(pResponse->SOLAR.solarlow)) / 100.f;",
          "11023:  decode_General(HwdID, HwdType, pResponse, procResult, SignalLevel, BatteryLevel);",
          "11024:  procResult.bProcessBatteryValue = false;",
          "11025: }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "13044:   if (diff > 60)",
          "13045:   {",
          "13046:    _log.Log(LOG_ERROR, \"%s thread seems to have ended unexpectedly (last update %f seconds ago)\", itt.first.c_str(), diff);",
          "13060:   }",
          "13061:  }",
          "",
          "[Removed Lines]",
          "13048:    if (itt.second.second) // If the stalled component is marked as critical, call abort / raise signal",
          "13049:    {",
          "13050:     if (!IsDebuggerPresent())",
          "13051:     {",
          "13052: #ifdef WIN32",
          "13053:      abort();",
          "13054: #else",
          "13055:      raise(SIGUSR1);",
          "13056: #endif",
          "13057:     }",
          "13058:    }",
          "",
          "[Added Lines]",
          "13223:       if (itt.second.second) // If the stalled component is marked as critical, call abort / raise signal",
          "13224:       {",
          "13225:        if (!IsDebuggerPresent())",
          "13226:        {",
          "13227:    #ifdef WIN32",
          "13228:         abort();",
          "13229:    #else",
          "13230:         raise(SIGUSR1);",
          "13231:    #endif",
          "13232:        }",
          "13233:       }",
          "",
          "---------------"
        ],
        "main/mainworker.h||main/mainworker.h": [
          "File: main/mainworker.h -> main/mainworker.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "288:  void decode_CartelectronicEncoder(const int HwdID, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult);",
          "289:  void decode_ASyncPort(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult);",
          "290:  void decode_ASyncData(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult);",
          "291: };",
          "293: extern MainWorker m_mainworker;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "291:  void decode_Weather(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult);",
          "292:  void decode_Solar(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult);",
          "",
          "---------------"
        ],
        "push/BasePush.cpp||push/BasePush.cpp": [
          "File: push/BasePush.cpp -> push/BasePush.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:   { pTypeRAIN, sTypeRAIN6, \"Rain rate,Total rain\" },",
          "70:   { pTypeRAIN, sTypeRAIN7, \"Rain rate,Total rain\" },",
          "71:   { pTypeRAIN, sTypeRAIN8, \"Rain rate,Total rain\" },",
          "73:   { pTypeRAIN, sTypeRAINWU, \"Rain rate,Total rain\" },",
          "75:   { pTypeWIND, sTypeWIND1, \"Direction,Direction string,Speed,Gust,Temperature,Chill\" },",
          "",
          "[Removed Lines]",
          "72:   { pTypeRAIN, sTypeRAIN9, \"Rain rate,Total rain\" },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:   { pTypeWIND, sTypeWIND5, \"Direction,Direction string,Speed,Gust,Temperature,Chill\" },",
          "80:   { pTypeWIND, sTypeWIND6, \"Direction,Direction string,Speed,Gust,Temperature,Chill\" },",
          "81:   { pTypeWIND, sTypeWIND7, \"Direction,Direction string,Speed,Gust,Temperature,Chill\" },",
          "83:   { pTypeWIND, sTypeWINDNoTemp, \"Direction,Direction string,Speed,Gust,Chill\" },",
          "84:   { pTypeWIND, sTypeWINDNoTempNoChill, \"Direction,Direction string,Speed,Gust\" },",
          "",
          "[Removed Lines]",
          "82:   { pTypeWIND, sTypeWIND8, \"Direction,Direction string,Speed,Gust,Temperature,Chill\" },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "267:   { pTypeChime, sTypeByronSX, \"Status\" },",
          "268:   { pTypeChime, sTypeByronMP001, \"Status\" },",
          "269:   { pTypeChime, sTypeSelectPlus, \"Status\" },",
          "271:   { pTypeChime, sTypeEnvivo, \"Status\" },",
          "273:   { pTypeTEMP_RAIN, sTypeTR1, \"Temperature,Total rain\" },",
          "",
          "[Removed Lines]",
          "270:   { pTypeChime, sTypeSelectPlus3, \"Status\" },",
          "",
          "[Added Lines]",
          "268:   { pTypeChime, sTypeByronBY, \"Status\" },",
          "270:   { pTypeChime, sTypeAlfawise, \"Status\" },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eebede1216219bf59505c60c2c68aff54803ced7",
      "candidate_info": {
        "commit_hash": "eebede1216219bf59505c60c2c68aff54803ced7",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/eebede1216219bf59505c60c2c68aff54803ced7",
        "files": [
          "main/SQLHelper.cpp",
          "main/SQLHelper.h"
        ],
        "message": "Removed ghost function",
        "before_after_code_files": [
          "main/SQLHelper.cpp||main/SQLHelper.cpp",
          "main/SQLHelper.h||main/SQLHelper.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/SQLHelper.cpp||main/SQLHelper.cpp": [
          "File: main/SQLHelper.cpp -> main/SQLHelper.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "8162:  safe_query(\"UPDATE DeviceStatus SET %s=%4.2f , LastUpdate='%s' WHERE (ID == %s )\", FieldName, Value, TimeToString(NULL, TF_DateTime).c_str(), Idx.c_str());",
          "8163: }",
          "8176: bool CSQLHelper::InsertCustomIconFromZip(const std::string &szZip, std::string &ErrorMessage)",
          "8177: {",
          "",
          "[Removed Lines]",
          "8166: float CSQLHelper::getTemperatureFromSValue(const char * sValue)",
          "8167: {",
          "8168:  std::vector<std::string> splitresults;",
          "8169:  StringSplit(sValue, \";\", splitresults);",
          "8170:  if (splitresults.size() < 1)",
          "8171:   return 0;",
          "8172:  else",
          "8173:   return (float)atof(splitresults[0].c_str());",
          "8174: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "main/SQLHelper.h||main/SQLHelper.h": [
          "File: main/SQLHelper.h -> main/SQLHelper.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "391:  void UpdateDeviceValue(const char * FieldName , float Value , std::string &Idx ) ;",
          "392:  std::string GetDeviceValue(const char * FieldName , const char *Idx );",
          "396:  bool GetPreferencesVar(const std::string &Key, double &Value);",
          "397:  void UpdatePreferencesVar(const std::string &Key, const double Value);",
          "398:  void DeletePreferencesVar(const std::string &Key);",
          "",
          "[Removed Lines]",
          "394:  float getTemperatureFromSValue(const char * sValue);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cfe0171d895179407f4b9c0df823fab033a72cd4",
      "candidate_info": {
        "commit_hash": "cfe0171d895179407f4b9c0df823fab033a72cd4",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/cfe0171d895179407f4b9c0df823fab033a72cd4",
        "files": [
          "main/EventSystem.h"
        ],
        "message": "Initializing default values of result structure",
        "before_after_code_files": [
          "main/EventSystem.h||main/EventSystem.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/EventSystem.h||main/EventSystem.h": [
          "File: main/EventSystem.h -> main/EventSystem.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:  struct _tActionParseResults",
          "43:  {",
          "44:   std::string sCommand;",
          "51:  };",
          "52: public:",
          "53:  enum _eReason",
          "",
          "[Removed Lines]",
          "45:   float fForSec;",
          "46:   float fAfterSec;",
          "47:   float fRandomSec;",
          "48:   int iRepeat;",
          "49:   float fRepeatSec;",
          "50:   bool bEventTrigger;",
          "",
          "[Added Lines]",
          "45:   float fForSec = 0;",
          "46:   float fAfterSec = 0;",
          "47:   float fRandomSec = 0;",
          "48:   int iRepeat = 0;",
          "49:   float fRepeatSec = 0;",
          "50:   bool bEventTrigger = 0;",
          "",
          "---------------"
        ]
      }
    }
  ]
}