{
  "cve_id": "CVE-2019-19070",
  "cve_desc": "A memory leak in the spi_gpio_probe() function in drivers/spi/spi-gpio.c in the Linux kernel through 5.3.11 allows attackers to cause a denial of service (memory consumption) by triggering devm_add_action_or_reset() failures, aka CID-d3b0ffa1d75d. NOTE: third parties dispute the relevance of this because the system must have already been out of memory before the probe began",
  "repo": "torvalds/linux",
  "patch_hash": "d3b0ffa1d75d5305ebe34735598993afbb8a869d",
  "patch_info": {
    "commit_hash": "d3b0ffa1d75d5305ebe34735598993afbb8a869d",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/d3b0ffa1d75d5305ebe34735598993afbb8a869d",
    "files": [
      "drivers/spi/spi-gpio.c"
    ],
    "message": "spi: gpio: prevent memory leak in spi_gpio_probe\n\nIn spi_gpio_probe an SPI master is allocated via spi_alloc_master, but\nthis controller should be released if devm_add_action_or_reset fails,\notherwise memory leaks. In order to avoid leak spi_contriller_put must\nbe called in case of failure for devm_add_action_or_reset.\n\nFixes: 8b797490b4db (\"spi: gpio: Make sure spi_master_put() is called in every error path\")\nSigned-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>\nLink: https://lore.kernel.org/r/20190930205241.5483-1-navid.emamdoost@gmail.com\nSigned-off-by: Mark Brown <broonie@kernel.org>",
    "before_after_code_files": [
      "drivers/spi/spi-gpio.c||drivers/spi/spi-gpio.c"
    ]
  },
  "patch_diff": {
    "drivers/spi/spi-gpio.c||drivers/spi/spi-gpio.c": [
      "File: drivers/spi/spi-gpio.c -> drivers/spi/spi-gpio.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "371:   return -ENOMEM;",
      "373:  status = devm_add_action_or_reset(&pdev->dev, spi_gpio_put, master);",
      "375:   return status;",
      "377:  if (of_id)",
      "378:   status = spi_gpio_probe_dt(pdev, master);",
      "",
      "[Removed Lines]",
      "374:  if (status)",
      "",
      "[Added Lines]",
      "374:  if (status) {",
      "375:   spi_master_put(master);",
      "377:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8b797490b4db09492acda4b4a4a4355d2311a614",
      "candidate_info": {
        "commit_hash": "8b797490b4db09492acda4b4a4a4355d2311a614",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/8b797490b4db09492acda4b4a4a4355d2311a614",
        "files": [
          "drivers/spi/spi-gpio.c"
        ],
        "message": "spi: gpio: Make sure spi_master_put() is called in every error path\n\nThere's a number of failure paths in spi_gpio_probe() that do not call\nspi_master_put() potentially leaking memory. Fix this problem by\nregistering a cleanup funciont via devm_add_action_or_reset() right\nafter SPI controller is allocated.\n\nSigned-off-by: Andrey Smirnov <andrew.smirnov@gmail.com>\nCc: Mark Brown <broonie@kernel.org>\nCc: Chris Healy <cphealy@gmail.com>\nCc: linux-spi@vger.kernel.org\nCc: linux-kernel@vger.kernel.org\nSigned-off-by: Mark Brown <broonie@kernel.org>",
        "before_after_code_files": [
          "drivers/spi/spi-gpio.c||drivers/spi/spi-gpio.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/spi/spi-gpio.c||drivers/spi/spi-gpio.c"
          ],
          "candidate": [
            "drivers/spi/spi-gpio.c||drivers/spi/spi-gpio.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/spi/spi-gpio.c||drivers/spi/spi-gpio.c": [
          "File: drivers/spi/spi-gpio.c -> drivers/spi/spi-gpio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "362:  return 0;",
          "363: }",
          "365: static int spi_gpio_probe(struct platform_device *pdev)",
          "366: {",
          "367:  int    status;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "365: static void spi_gpio_put(void *data)",
          "366: {",
          "367:  spi_master_put(data);",
          "368: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "377:  if (!master)",
          "378:   return -ENOMEM;",
          "380:  if (of_id)",
          "381:   status = spi_gpio_probe_dt(pdev, master);",
          "382:  else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "385:  status = devm_add_action_or_reset(&pdev->dev, spi_gpio_put, master);",
          "386:  if (status)",
          "387:   return status;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "428:  }",
          "429:  bb->setup_transfer = spi_bitbang_setup_transfer;",
          "436: }",
          "438: static int spi_gpio_remove(struct platform_device *pdev)",
          "",
          "[Removed Lines]",
          "431:  status = spi_bitbang_start(&spi_gpio->bitbang);",
          "432:  if (status)",
          "433:   spi_master_put(master);",
          "435:  return status;",
          "",
          "[Added Lines]",
          "440:  return spi_bitbang_start(&spi_gpio->bitbang);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "445:  spi_bitbang_stop(&spi_gpio->bitbang);",
          "449:  return 0;",
          "450: }",
          "",
          "[Removed Lines]",
          "447:  spi_master_put(spi_gpio->bitbang.master);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}