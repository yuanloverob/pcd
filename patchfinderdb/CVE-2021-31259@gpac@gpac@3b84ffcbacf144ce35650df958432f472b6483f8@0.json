{
  "cve_id": "CVE-2021-31259",
  "cve_desc": "The gf_isom_cenc_get_default_info_internal function in GPAC 1.0.1 allows attackers to cause a denial of service (NULL pointer dereference) via a crafted file in the MP4Box command.",
  "repo": "gpac/gpac",
  "patch_hash": "3b84ffcbacf144ce35650df958432f472b6483f8",
  "patch_info": {
    "commit_hash": "3b84ffcbacf144ce35650df958432f472b6483f8",
    "repo": "gpac/gpac",
    "commit_url": "https://github.com/gpac/gpac/commit/3b84ffcbacf144ce35650df958432f472b6483f8",
    "files": [
      "src/isomedia/drm_sample.c"
    ],
    "message": "fixed #1735",
    "before_after_code_files": [
      "src/isomedia/drm_sample.c||src/isomedia/drm_sample.c"
    ]
  },
  "patch_diff": {
    "src/isomedia/drm_sample.c||src/isomedia/drm_sample.c": [
      "File: src/isomedia/drm_sample.c -> src/isomedia/drm_sample.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1686:     seig_entry = gf_list_get(sgdesc->group_descriptions, sgdesc->default_description_index-1);",
      "1687:    else",
      "1688:     seig_entry = gf_list_get(sgdesc->group_descriptions, 0);",
      "1690:     seig_entry = NULL;",
      "1691:    break;",
      "1692:   }",
      "",
      "[Removed Lines]",
      "1689:    if (!seig_entry->key_info[0])",
      "",
      "[Added Lines]",
      "1689:    if (seig_entry && !seig_entry->key_info[0])",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f966d85ee940b0a19dbbe972bc9ff042a98d7264",
      "candidate_info": {
        "commit_hash": "f966d85ee940b0a19dbbe972bc9ff042a98d7264",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/f966d85ee940b0a19dbbe972bc9ff042a98d7264",
        "files": [
          "include/gpac/internal/isomedia_dev.h",
          "include/gpac/isomedia.h",
          "src/filters/decrypt_cenc_isma.c",
          "src/filters/encrypt_cenc_isma.c",
          "src/filters/mux_isom.c",
          "src/isomedia/box_code_base.c",
          "src/isomedia/box_code_drm.c",
          "src/isomedia/box_dump.c",
          "src/isomedia/drm_sample.c",
          "testsuite"
        ],
        "message": "remove tenc for multikey and update to latest mkey aux info of 23001-7",
        "before_after_code_files": [
          "include/gpac/internal/isomedia_dev.h||include/gpac/internal/isomedia_dev.h",
          "include/gpac/isomedia.h||include/gpac/isomedia.h",
          "src/filters/decrypt_cenc_isma.c||src/filters/decrypt_cenc_isma.c",
          "src/filters/encrypt_cenc_isma.c||src/filters/encrypt_cenc_isma.c",
          "src/filters/mux_isom.c||src/filters/mux_isom.c",
          "src/isomedia/box_code_base.c||src/isomedia/box_code_base.c",
          "src/isomedia/box_code_drm.c||src/isomedia/box_code_drm.c",
          "src/isomedia/box_dump.c||src/isomedia/box_dump.c",
          "src/isomedia/drm_sample.c||src/isomedia/drm_sample.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/isomedia/drm_sample.c||src/isomedia/drm_sample.c"
          ],
          "candidate": [
            "src/isomedia/drm_sample.c||src/isomedia/drm_sample.c"
          ]
        }
      },
      "candidate_diff": {
        "include/gpac/internal/isomedia_dev.h||include/gpac/internal/isomedia_dev.h": [
          "File: include/gpac/internal/isomedia_dev.h -> include/gpac/internal/isomedia_dev.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3378:  u8 crypt_byte_block, skip_byte_block;",
          "3379:  u8 isProtected;",
          "3383: } GF_TrackEncryptionBox;",
          "3385: typedef struct __piff_tenc_box",
          "",
          "[Removed Lines]",
          "3381:  u32 key_info_size;",
          "3382:  u8 *key_info;",
          "",
          "[Added Lines]",
          "3382:  u8 key_info[37];",
          "",
          "---------------"
        ],
        "include/gpac/isomedia.h||include/gpac/isomedia.h": [
          "File: include/gpac/isomedia.h -> include/gpac/isomedia.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5066:  GF_ISOM_CBCS_SCHEME = GF_4CC('c','b','c','s'),",
          "5068:  GF_ISOM_PIFF_SCHEME = GF_4CC('p','i','f','f'),",
          "5069: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5070:  GF_ISOM_SVE1_SCHEME = GF_4CC('s','v','e','1'),",
          "",
          "---------------"
        ],
        "src/filters/decrypt_cenc_isma.c||src/filters/decrypt_cenc_isma.c": [
          "File: src/filters/decrypt_cenc_isma.c -> src/filters/decrypt_cenc_isma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1039:   for (k=0; k<nb_iv_init; k++) {",
          "1040:    u8 IV_size;",
          "1043:    if (!kidx || (kidx>cstr->nb_crypts)) {",
          "1044:     GF_LOG(GF_LOG_ERROR, GF_LOG_AUTHOR, (\"[CENC] Corrupted CENC sai, kidx %d but valid range is [1,%d]\\n\", kidx, cstr->nb_crypts));",
          "",
          "[Removed Lines]",
          "1041:    u8 kidx = gf_bs_read_u8(ctx->bs_r);",
          "",
          "[Added Lines]",
          "1041:    u16 kidx = gf_bs_read_u16(ctx->bs_r);",
          "",
          "---------------"
        ],
        "src/filters/encrypt_cenc_isma.c||src/filters/encrypt_cenc_isma.c": [
          "File: src/filters/encrypt_cenc_isma.c -> src/filters/encrypt_cenc_isma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1421:  if (multi_key) {",
          "1422:   gf_bs_write_u16(sai_bs, nb_iv_init);",
          "1423:   for (i=0; i<nb_keys; i++) {",
          "1424:    if (cstr->tci->keys[i].IV_size) {",
          "1426:     gf_bs_write_data(sai_bs, cstr->keys[i].IV, cstr->tci->keys[i].IV_size);",
          "1427:    }",
          "1428:   }",
          "",
          "[Removed Lines]",
          "1425:     gf_bs_write_u8(sai_bs, i+1);",
          "",
          "[Added Lines]",
          "1426:     gf_bs_write_u16(sai_bs, i+1);",
          "",
          "---------------"
        ],
        "src/filters/mux_isom.c||src/filters/mux_isom.c": [
          "File: src/filters/mux_isom.c -> src/filters/mux_isom.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3194:  } else {",
          "3196:   e = GF_OK;",
          "3198:    needs_seig = GF_TRUE;",
          "3200:    needs_seig = GF_TRUE;",
          "3202:    needs_seig = GF_TRUE;",
          "3204:   if (needs_seig) {",
          "",
          "[Removed Lines]",
          "3197:   if (tkw->def_crypt_byte_block != crypt_byte_block)",
          "3199:   if (tkw->def_skip_byte_block != skip_byte_block)",
          "3201:   if (tkw->def_cenc_key_info_crc != tkw->cenc_key_info_crc)",
          "",
          "[Added Lines]",
          "3198:   if (tkw->cenc_ki->value.data.ptr[0])",
          "3200:   else if (tkw->def_crypt_byte_block != crypt_byte_block)",
          "3202:   else if (tkw->def_skip_byte_block != skip_byte_block)",
          "3203:    needs_seig = GF_TRUE;",
          "3204:   else if (tkw->def_cenc_key_info_crc != tkw->cenc_key_info_crc)",
          "",
          "---------------"
        ],
        "src/isomedia/box_code_base.c||src/isomedia/box_code_base.c": [
          "File: src/isomedia/box_code_base.c -> src/isomedia/box_code_base.c"
        ],
        "src/isomedia/box_code_drm.c||src/isomedia/box_code_drm.c": [
          "File: src/isomedia/box_code_drm.c -> src/isomedia/box_code_drm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "857: void tenc_box_del(GF_Box *s)",
          "858: {",
          "861:  gf_free(s);",
          "862: }",
          "864: GF_Err tenc_box_read(GF_Box *s, GF_BitStream *bs)",
          "865: {",
          "867:  GF_TrackEncryptionBox *ptr = (GF_TrackEncryptionBox*)s;",
          "869:  ISOM_DECREASE_SIZE(ptr, 3);",
          "874:  if (!ptr->version) {",
          "875:   gf_bs_read_u8(bs); //reserved",
          "",
          "[Removed Lines]",
          "859:  GF_TrackEncryptionBox *ptr = (GF_TrackEncryptionBox*)s;",
          "860:  if (ptr->key_info) gf_free(ptr->key_info);",
          "866:  Bool is_mkey;",
          "871:  is_mkey = gf_bs_read_int(bs, 1);",
          "872:  gf_bs_read_int(bs, 7); //reserved",
          "",
          "[Added Lines]",
          "864:  u8 iv_size;",
          "869:  gf_bs_read_u8(bs); //reserved",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "878:   ptr->skip_byte_block = gf_bs_read_int(bs, 4);",
          "879:  }",
          "880:  ptr->isProtected = gf_bs_read_u8(bs);",
          "921:  }",
          "922:  return GF_OK;",
          "923: }",
          "",
          "[Removed Lines]",
          "881:  if (is_mkey) {",
          "882:   ISOM_DECREASE_SIZE(ptr, 2);",
          "883:   u32 num_keys = gf_bs_peek_bits(bs, 16, 0);",
          "884:   if (num_keys * 17 > ptr->size)",
          "885:    return GF_NON_COMPLIANT_BITSTREAM;",
          "886:   ptr->key_info_size = (u32) (1+ptr->size+2); //we just did a decrease_size(2) before the peek",
          "887:   ptr->key_info = gf_malloc(sizeof(char) * ptr->key_info_size);",
          "888:   if (!ptr->key_info) return GF_OUT_OF_MEM;",
          "889:   ptr->key_info[0] = 1;",
          "890:   gf_bs_read_data(bs, ptr->key_info+1, ptr->key_info_size-1);",
          "891:   ptr->size = 0;",
          "892:   if (!gf_cenc_validate_key_info(ptr->key_info, ptr->key_info_size))",
          "893:    return GF_ISOM_INVALID_FILE;",
          "894:  } else {",
          "895:   bin128 KID;",
          "896:   u8 iv_size, const_iv_size=0;",
          "897:   ISOM_DECREASE_SIZE(ptr, 17);",
          "899:   iv_size = gf_bs_read_u8(bs);",
          "900:   gf_bs_read_data(bs, (char *) KID, 16);",
          "901:   if (!iv_size && ptr->isProtected) {",
          "902:    ISOM_DECREASE_SIZE(ptr, 1);",
          "903:    const_iv_size = gf_bs_read_u8(bs);",
          "904:   }",
          "905:   ptr->key_info_size = 20;",
          "906:   if (! iv_size && ptr->isProtected)",
          "907:    ptr->key_info_size += 1 + const_iv_size;",
          "909:   ptr->key_info = gf_malloc(sizeof(char) * ptr->key_info_size);",
          "910:   if (!ptr->key_info) return GF_OUT_OF_MEM;",
          "911:   ptr->key_info[0] = 0;",
          "912:   ptr->key_info[1] = 0;",
          "913:   ptr->key_info[2] = 0;",
          "914:   ptr->key_info[3] = iv_size;",
          "915:   memcpy(ptr->key_info+4, KID, 16);",
          "916:   if (! iv_size && ptr->isProtected) {",
          "917:    ptr->key_info[20] = const_iv_size;",
          "918:    ISOM_DECREASE_SIZE(ptr, const_iv_size);",
          "919:    gf_bs_read_data(bs, ptr->key_info+21, const_iv_size);",
          "920:   }",
          "",
          "[Added Lines]",
          "880:  ISOM_DECREASE_SIZE(ptr, 17);",
          "882:  ptr->key_info[0] = 0;",
          "883:  ptr->key_info[1] = 0;",
          "884:  ptr->key_info[2] = 0;",
          "885:  ptr->key_info[3] = iv_size = gf_bs_read_u8(bs);",
          "886:  gf_bs_read_data(bs, ptr->key_info+4, 16);",
          "887:  if (!iv_size && ptr->isProtected) {",
          "888:   ISOM_DECREASE_SIZE(ptr, 1);",
          "889:   iv_size = ptr->key_info[20] = gf_bs_read_u8(bs);",
          "890:   ISOM_DECREASE_SIZE(ptr, ptr->key_info[20]);",
          "891:   gf_bs_read_data(bs, ptr->key_info+21, iv_size);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "927: GF_Err tenc_box_write(GF_Box *s, GF_BitStream *bs)",
          "928: {",
          "929:  GF_Err e;",
          "931:  GF_TrackEncryptionBox *ptr = (GF_TrackEncryptionBox *) s;",
          "932:  if (!s) return GF_BAD_PARAM;",
          "933:  e = gf_isom_full_box_write(s, bs);",
          "934:  if (e) return e;",
          "941:  if (!ptr->version) {",
          "943:  } else {",
          "944:   gf_bs_write_int(bs, ptr->crypt_byte_block, 4);",
          "945:   gf_bs_write_int(bs, ptr->skip_byte_block, 4);",
          "946:  }",
          "947:  gf_bs_write_u8(bs, ptr->isProtected);",
          "963:  }",
          "964:  return GF_OK;",
          "965: }",
          "967: GF_Err tenc_box_size(GF_Box *s)",
          "968: {",
          "970:  GF_TrackEncryptionBox *ptr = (GF_TrackEncryptionBox*)s;",
          "971:  ptr->size += 3;",
          "986:  }",
          "987:  return GF_OK;",
          "988: }",
          "",
          "[Removed Lines]",
          "930:  Bool is_mkey;",
          "936:  is_mkey = (ptr->key_info && ptr->key_info[0]) ? GF_TRUE : GF_FALSE;",
          "938:  gf_bs_write_int(bs, is_mkey, 1);",
          "939:  gf_bs_write_int(bs, 0, 7); //reserved",
          "942:   gf_bs_write_u8(bs, 0x0); //reserved",
          "948:  if (is_mkey) {",
          "949:   gf_bs_write_data(bs, ptr->key_info+1, ptr->key_info_size-1);",
          "950:  } else if (ptr->key_info) {",
          "951:   gf_bs_write_u8(bs, ptr->key_info[3]);",
          "952:   gf_bs_write_data(bs, ptr->key_info + 4, 16);",
          "953:   if ((ptr->isProtected == 1) && !ptr->key_info[3]) {",
          "954:    gf_bs_write_u8(bs, ptr->key_info[20]);",
          "955:    gf_bs_write_data(bs, ptr->key_info + 21, ptr->key_info[20]);",
          "956:   }",
          "957:  }",
          "959:  else {",
          "960:   gf_bs_write_u8(bs, 8);",
          "961:   gf_bs_write_u64(bs, 0);",
          "962:   gf_bs_write_u64(bs, 0);",
          "969:  Bool is_mkey;",
          "973:  if (!ptr->key_info) {",
          "974:   ptr->size += 17;",
          "975:   return GF_OK;",
          "976:  }",
          "978:  is_mkey = ptr->key_info[0] ? GF_TRUE : GF_FALSE;",
          "979:  if (is_mkey) {",
          "980:   ptr->size += ptr->key_info_size - 1;",
          "981:  } else {",
          "982:   ptr->size += 17;",
          "983:   if ((ptr->isProtected == 1) && ! ptr->key_info[3]) {",
          "984:    ptr->size += 1 + ptr->key_info[20];",
          "985:   }",
          "",
          "[Added Lines]",
          "906:  gf_bs_write_u8(bs, 0); //reserved",
          "909:   gf_bs_write_u8(bs, 0); //reserved",
          "916:  gf_bs_write_u8(bs, ptr->key_info[3]);",
          "917:  gf_bs_write_data(bs, ptr->key_info + 4, 16);",
          "918:  if ((ptr->isProtected == 1) && !ptr->key_info[3]) {",
          "919:   gf_bs_write_u8(bs, ptr->key_info[20]);",
          "920:   gf_bs_write_data(bs, ptr->key_info + 21, ptr->key_info[20]);",
          "930:  ptr->size += 17;",
          "931:  if ((ptr->isProtected == 1) && ! ptr->key_info[3]) {",
          "932:   ptr->size += 1 + ptr->key_info[20];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1444:     u32 j;",
          "1445:     u32 nb_iv_init = gf_bs_read_u16(bs);",
          "1446:     for (j=0; j<nb_iv_init; j++) {",
          "1448:      IV_size = key_info_get_iv_size(key_info, nb_keys, idx, NULL, NULL);",
          "1449:      if (!IV_size) {",
          "1450:       gf_isom_cenc_samp_aux_info_del(sai);",
          "",
          "[Removed Lines]",
          "1447:      u8 idx = gf_bs_read_u8(bs);",
          "",
          "[Added Lines]",
          "1394:      u8 idx = gf_bs_read_u16(bs);",
          "",
          "---------------"
        ],
        "src/isomedia/box_dump.c||src/isomedia/box_dump.c": [
          "File: src/isomedia/box_dump.c -> src/isomedia/box_dump.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4846:     gf_fprintf(trace, \">\\n\");",
          "4847:     for (k=0; k<nb_keys; k++) {",
          "4849:       break;",
          "4850:      u8 iv_size = seig->key_info[kpos];",
          "4851:      gf_fprintf(trace, \"<CENCKey IV_size=\\\"%d\\\" KID=\\\"\", iv_size);",
          "4852:      dump_data_hex(trace, seig->key_info+kpos+1, 16);",
          "4853:      kpos += 17;",
          "4854:      if ((seig->IsProtected == 1) && !iv_size) {",
          "4855:       if (kpos + 1 >= seig->key_info_size)",
          "4856:        break;",
          "4857:       u8 const_IV_size = seig->key_info[kpos];",
          "4859:       if (kpos + 1 + const_IV_size >= seig->key_info_size)",
          "4860:        break;",
          "4861:       dump_data_hex(trace, (char *)seig->key_info + kpos + 1, const_IV_size);",
          "",
          "[Removed Lines]",
          "4848:      if (kpos + 17 >= seig->key_info_size)",
          "4858:       gf_fprintf(trace, \"\\\" constant_IV_size=\\\"%d\\\"  constant_IV=\\\"\", const_IV_size);",
          "",
          "[Added Lines]",
          "4848:      if (kpos + 17 > seig->key_info_size)",
          "4854:      gf_fprintf(trace, \"\\\"\");",
          "4859:       gf_fprintf(trace, \" constant_IV_size=\\\"%d\\\"  constant_IV=\\\"\", const_IV_size);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5047: GF_Err tenc_box_dump(GF_Box *a, FILE * trace)",
          "5048: {",
          "5050:  GF_TrackEncryptionBox *ptr = (GF_TrackEncryptionBox*) a;",
          "5051:  if (!a) return GF_BAD_PARAM;",
          "",
          "[Removed Lines]",
          "5049:  Bool is_mkey;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5055:  gf_fprintf(trace, \"isEncrypted=\\\"%d\\\"\", ptr->isProtected);",
          "5099:  }",
          "5100:  if (!ptr->size) {",
          "5101:   gf_fprintf(trace, \" IV_size=\\\"\\\" KID=\\\"\\\" constant_IV_size=\\\"\\\" constant_IV=\\\"\\\" crypt_byte_block=\\\"\\\" skip_byte_block=\\\"\\\">\\n\");",
          "5102:   gf_fprintf(trace, \"<TENCKey IV_size=\\\"\\\" KID=\\\"\\\" const_IV_size=\\\"\\\" constIV=\\\"\\\"/>\\n\");",
          "",
          "[Removed Lines]",
          "5057:  is_mkey = (ptr->key_info && ptr->key_info[0]) ? GF_TRUE : GF_FALSE;",
          "5059:  if (is_mkey) {",
          "5060:   u32 i, kpos=3, nb_keys;",
          "5061:   nb_keys = ptr->key_info[1];",
          "5062:   nb_keys <<= 8;",
          "5063:   nb_keys |= ptr->key_info[2];",
          "5065:   gf_fprintf(trace, \">\\n\");",
          "5066:   for (i=0; i<nb_keys; i++) {",
          "5067:    u8 IV_size = ptr->key_info[kpos];",
          "5068:    gf_fprintf(trace, \"<TENCKey\");",
          "5069:    if (IV_size)",
          "5070:     gf_fprintf(trace, \" IV_size=\\\"%d\\\"\", IV_size);",
          "5072:    gf_fprintf(trace, \" KID=\\\"\");",
          "5073:    dump_data_hex(trace, (char *) ptr->key_info + kpos + 1, 16);",
          "5074:    gf_fprintf(trace, \"\\\"\");",
          "5075:    kpos += 17;",
          "5077:    if (!IV_size) {",
          "5078:     IV_size = ptr->key_info[kpos];",
          "5079:     gf_fprintf(trace, \" const_IV_size=\\\"%d\\\"\", IV_size);",
          "5080:     gf_fprintf(trace, \" constIV=\\\"\");",
          "5081:     dump_data_hex(trace, (char *) ptr->key_info + kpos + 1, IV_size);",
          "5082:     gf_fprintf(trace, \"\\\"\");",
          "5083:     kpos += 1 + IV_size;",
          "5084:    }",
          "5085:    gf_fprintf(trace, \"/>\\n\");",
          "5086:   }",
          "5087:  } else if (ptr->key_info) {",
          "5088:   if (ptr->key_info[3])",
          "5089:    gf_fprintf(trace, \" IV_size=\\\"%d\\\" KID=\\\"\", ptr->key_info[3]);",
          "5090:   else {",
          "5091:    gf_fprintf(trace, \" constant_IV_size=\\\"%d\\\" constant_IV=\\\"\", ptr->key_info[20]);",
          "5092:    dump_data_hex(trace, (char *) ptr->key_info+21, ptr->key_info[20]);",
          "5093:    gf_fprintf(trace, \"\\\"  KID=\\\"\");",
          "5094:   }",
          "5095:   dump_data_hex(trace, (char *) ptr->key_info+4, 16);",
          "5096:   if (ptr->version)",
          "5097:    gf_fprintf(trace, \"\\\" crypt_byte_block=\\\"%d\\\" skip_byte_block=\\\"%d\", ptr->crypt_byte_block, ptr->skip_byte_block);",
          "5098:   gf_fprintf(trace, \"\\\">\\n\");",
          "",
          "[Added Lines]",
          "5057:  if (ptr->key_info[3])",
          "5058:   gf_fprintf(trace, \" IV_size=\\\"%d\\\" KID=\\\"\", ptr->key_info[3]);",
          "5059:  else {",
          "5060:   gf_fprintf(trace, \" constant_IV_size=\\\"%d\\\" constant_IV=\\\"\", ptr->key_info[20]);",
          "5061:   dump_data_hex(trace, (char *) ptr->key_info+21, ptr->key_info[20]);",
          "5062:   gf_fprintf(trace, \"\\\"  KID=\\\"\");",
          "5064:  dump_data_hex(trace, (char *) ptr->key_info+4, 16);",
          "5065:  if (ptr->version)",
          "5066:   gf_fprintf(trace, \"\\\" crypt_byte_block=\\\"%d\\\" skip_byte_block=\\\"%d\", ptr->crypt_byte_block, ptr->skip_byte_block);",
          "5067:  gf_fprintf(trace, \"\\\">\\n\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5224:    }",
          "5225:    for (k=0; k<nb_ivs; k++) {",
          "5226:     u32 pos;",
          "5228:     u8 mk_iv_size = key_info_get_iv_size(sai->key_info, nb_keys, idx, NULL, NULL);",
          "5229:     assert(mk_iv_size);",
          "5230:     pos = (u32) gf_bs_get_position(bs);",
          "",
          "[Removed Lines]",
          "5227:     u8 idx = gf_bs_read_u8(bs);",
          "",
          "[Added Lines]",
          "5196:     u16 idx = gf_bs_read_u16(bs);",
          "",
          "---------------"
        ],
        "src/isomedia/drm_sample.c||src/isomedia/drm_sample.c": [
          "File: src/isomedia/drm_sample.c -> src/isomedia/drm_sample.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "675:   if (!sinf) continue;",
          "679:    return GF_FALSE;",
          "682:   return GF_TRUE;",
          "684:  }",
          "685:  return GF_FALSE;",
          "",
          "[Removed Lines]",
          "678:   if (!sinf->info || (!sinf->info->tenc && !sinf->info->piff_tenc) || !sinf->scheme_type)",
          "",
          "[Added Lines]",
          "678:   if (!sinf->scheme_type)",
          "681:   switch (sinf->scheme_type->scheme_type) {",
          "682:   case GF_ISOM_CENC_SCHEME:",
          "683:   case GF_ISOM_CBC_SCHEME:",
          "684:   case GF_ISOM_CENS_SCHEME:",
          "685:   case GF_ISOM_CBCS_SCHEME:",
          "686:   case GF_ISOM_SVE1_SCHEME:",
          "687:    return GF_TRUE;",
          "688:   default:",
          "689:    return GF_FALSE;",
          "690:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "739:   sinf->info->piff_tenc->key_info[2] = 0;",
          "740:   sinf->info->piff_tenc->key_info[3] = key_info[3];",
          "741:   memcpy(sinf->info->piff_tenc->key_info+4, key_info+4, 16*sizeof(char));",
          "743:   sinf->info->tenc = (GF_TrackEncryptionBox *)gf_isom_box_new_parent(&sinf->info->child_boxes, GF_ISOM_BOX_TYPE_TENC);",
          "744:   if (!sinf->info->tenc) return GF_OUT_OF_MEM;",
          "",
          "[Removed Lines]",
          "742:  } else {",
          "",
          "[Added Lines]",
          "750:  }",
          "752:  else if (!key_info[0]) {",
          "753:   if (key_info_size<20) return GF_BAD_PARAM;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "749:    sinf->info->tenc->crypt_byte_block = default_crypt_byte_block;",
          "750:    sinf->info->tenc->skip_byte_block = default_skip_byte_block;",
          "751:   }",
          "756:  }",
          "757:  return GF_OK;",
          "758: }",
          "",
          "[Removed Lines]",
          "752:   sinf->info->tenc->key_info_size = key_info_size;",
          "753:   sinf->info->tenc->key_info = gf_malloc(sizeof(u8) * key_info_size);",
          "754:   if (!sinf->info->tenc->key_info) return GF_OUT_OF_MEM;",
          "755:   memcpy(sinf->info->tenc->key_info, key_info, sizeof(u8) * key_info_size);",
          "",
          "[Added Lines]",
          "763:   if (key_info_size>37) key_info_size = 37;",
          "764:   memcpy(sinf->info->tenc->key_info, key_info, key_info_size);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1609:  return GF_OK;",
          "1610: }",
          "1612: void gf_isom_cenc_get_default_info_internal(GF_TrackBox *trak, u32 sampleDescriptionIndex, u32 *container_type, Bool *default_IsEncrypted, u8 *crypt_byte_block, u8 *skip_byte_block, const u8 **key_info, u32 *key_info_size)",
          "1613: {",
          "1614:  GF_ProtectionSchemeInfoBox *sinf;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1621: u32 gf_isom_has_cenc_sample_group_ex(GF_TrackBox *trak);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1647:   if (crypt_byte_block) *crypt_byte_block = sinf->info->tenc->crypt_byte_block;",
          "1648:   if (skip_byte_block) *skip_byte_block = sinf->info->tenc->skip_byte_block;",
          "1649:   if (key_info) *key_info = sinf->info->tenc->key_info;",
          "1653:   if (container_type) *container_type = GF_ISOM_BOX_TYPE_SENC;",
          "",
          "[Removed Lines]",
          "1650:   if (key_info_size) *key_info_size = sinf->info->tenc->key_info_size;",
          "",
          "[Added Lines]",
          "1661:   if (key_info_size) {",
          "1663:    if (!sinf->info->tenc->key_info[3])",
          "1665:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1659:   if (container_type) *container_type = GF_ISOM_BOX_UUID_PSEC;",
          "1660:  } else {",
          "1664:   }",
          "1668:  }",
          "1670:  if (container_type && trak->sample_encryption) {",
          "",
          "[Removed Lines]",
          "1661:   if (! trak->moov->mov->is_smooth) {",
          "1662:    trak->moov->mov->is_smooth = GF_TRUE;",
          "1663:    GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[iso file] senc box without tenc, assuming MS smooth+piff\\n\"));",
          "1665:   if (default_IsEncrypted) *default_IsEncrypted = GF_TRUE;",
          "1667:   if (container_type) *container_type = GF_ISOM_BOX_UUID_PSEC;",
          "",
          "[Added Lines]",
          "1676:   u32 i, count = 0;",
          "1677:   GF_CENCSampleEncryptionGroupEntry *seig_entry = NULL;",
          "1679:   if (!trak->moov->mov->is_smooth)",
          "1680:    count = gf_list_count(trak->Media->information->sampleTable->sampleGroupsDescription);",
          "1682:   for (i=0; i<count; i++) {",
          "1683:    GF_SampleGroupDescriptionBox *sgdesc = (GF_SampleGroupDescriptionBox*)gf_list_get(trak->Media->information->sampleTable->sampleGroupsDescription, i);",
          "1684:    if (sgdesc->grouping_type!=GF_ISOM_SAMPLE_GROUP_SEIG) continue;",
          "1685:    if (sgdesc->default_description_index)",
          "1686:     seig_entry = gf_list_get(sgdesc->group_descriptions, sgdesc->default_description_index-1);",
          "1687:    else",
          "1688:     seig_entry = gf_list_get(sgdesc->group_descriptions, 0);",
          "1689:    if (!seig_entry->key_info[0])",
          "1690:     seig_entry = NULL;",
          "1691:    break;",
          "1692:   }",
          "1693:   if (seig_entry) {",
          "1694:    if (default_IsEncrypted) *default_IsEncrypted = seig_entry->IsProtected;",
          "1695:    if (crypt_byte_block) *crypt_byte_block = seig_entry->crypt_byte_block;",
          "1696:    if (skip_byte_block) *skip_byte_block = seig_entry->skip_byte_block;",
          "1697:    if (key_info) *key_info = seig_entry->key_info;",
          "1698:    if (key_info_size) *key_info_size = seig_entry->key_info_size;",
          "1699:    if (container_type) *container_type = GF_ISOM_BOX_TYPE_SENC;",
          "1700:   } else {",
          "1701:    if (! trak->moov->mov->is_smooth ) {",
          "1702:     trak->moov->mov->is_smooth = GF_TRUE;",
          "1703:     GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[iso file] senc box without tenc, assuming MS smooth+piff\\n\"));",
          "1704:    }",
          "1705:    if (default_IsEncrypted) *default_IsEncrypted = GF_TRUE;",
          "1707:    if (container_type) *container_type = GF_ISOM_BOX_UUID_PSEC;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cf06b29b5d28246059af5dd028ccc03ab372e950",
      "candidate_info": {
        "commit_hash": "cf06b29b5d28246059af5dd028ccc03ab372e950",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/cf06b29b5d28246059af5dd028ccc03ab372e950",
        "files": [
          "include/gpac/internal/isomedia_dev.h",
          "include/gpac/isomedia.h",
          "src/isomedia/box_code_3gpp.c",
          "src/isomedia/box_code_base.c",
          "src/isomedia/box_code_drm.c",
          "src/isomedia/box_dump.c",
          "src/isomedia/box_funcs.c",
          "src/isomedia/drm_sample.c",
          "src/isomedia/hinting.c",
          "src/isomedia/isom_intern.c",
          "src/isomedia/isom_read.c",
          "src/isomedia/media.c",
          "src/isomedia/movie_fragments.c",
          "src/isomedia/sample_descs.c",
          "src/isomedia/track.c",
          "src/media_tools/webvtt.c"
        ],
        "message": "Merged smooth and piff , fixes in cenc detection/default init",
        "before_after_code_files": [
          "include/gpac/internal/isomedia_dev.h||include/gpac/internal/isomedia_dev.h",
          "include/gpac/isomedia.h||include/gpac/isomedia.h",
          "src/isomedia/box_code_3gpp.c||src/isomedia/box_code_3gpp.c",
          "src/isomedia/box_code_base.c||src/isomedia/box_code_base.c",
          "src/isomedia/box_code_drm.c||src/isomedia/box_code_drm.c",
          "src/isomedia/box_dump.c||src/isomedia/box_dump.c",
          "src/isomedia/box_funcs.c||src/isomedia/box_funcs.c",
          "src/isomedia/drm_sample.c||src/isomedia/drm_sample.c",
          "src/isomedia/hinting.c||src/isomedia/hinting.c",
          "src/isomedia/isom_intern.c||src/isomedia/isom_intern.c",
          "src/isomedia/isom_read.c||src/isomedia/isom_read.c",
          "src/isomedia/media.c||src/isomedia/media.c",
          "src/isomedia/movie_fragments.c||src/isomedia/movie_fragments.c",
          "src/isomedia/sample_descs.c||src/isomedia/sample_descs.c",
          "src/isomedia/track.c||src/isomedia/track.c",
          "src/media_tools/webvtt.c||src/media_tools/webvtt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/isomedia/drm_sample.c||src/isomedia/drm_sample.c"
          ],
          "candidate": [
            "src/isomedia/drm_sample.c||src/isomedia/drm_sample.c"
          ]
        }
      },
      "candidate_diff": {
        "include/gpac/internal/isomedia_dev.h||include/gpac/internal/isomedia_dev.h": [
          "File: include/gpac/internal/isomedia_dev.h -> include/gpac/internal/isomedia_dev.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:  tmp->type = __4cc;",
          "86: #define ISOM_DECREASE_SIZE(__ptr, bytes) if (__ptr->size < (bytes) ) {\\",
          "88:    return GF_ISOM_INVALID_FILE; \\",
          "89:   }\\",
          "90:   __ptr->size -= bytes; \\",
          "",
          "[Removed Lines]",
          "87:    GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[isom] not enough bytes in box %s: %d left, reading %d\\n\", gf_4cc_to_str(__ptr->type), __ptr->size, (bytes) )); \\",
          "",
          "[Added Lines]",
          "87:    GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[isom] not enough bytes in box %s: %d left, reading %d (file %s, line %d)\\n\", gf_4cc_to_str(__ptr->type), __ptr->size, (bytes), __FILE__, __LINE__ )); \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "936: void gf_isom_sample_entry_init(GF_SampleEntryBox *ptr);",
          "937: void gf_isom_sample_entry_predestroy(GF_SampleEntryBox *ptr);",
          "939: typedef struct",
          "940: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "938: GF_Err gf_isom_base_sample_entry_read(GF_SampleEntryBox *ptr, GF_BitStream *bs);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1444:  u16 trackPriority;",
          "1445:  u32 currentEntryIndex;",
          "1447:  Bool no_sync_found;",
          "1448: } GF_SampleTableBox;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1449:  struct __sample_encryption_box *senc;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1997:  GF_List *sai_sizes;",
          "1998:  GF_List *sai_offsets;",
          "2001:  struct __sample_encryption_box *sample_encryption;",
          "",
          "[Removed Lines]",
          "2000:  struct __piff_sample_enc_box *piff_sample_encryption;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2742: } GF_PIFFProtectionSystemHeaderBox;",
          "2746: {",
          "2747:  GF_ISOM_UUID_BOX",
          "2748:  u8 version;",
          "2749:  u32 flags;",
          "2752:  u64 bs_offset;",
          "",
          "[Removed Lines]",
          "2745: typedef struct __piff_sample_enc_box",
          "",
          "[Added Lines]",
          "2748: typedef struct __sample_encryption_box",
          "2754:  Bool is_piff;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2759:  GF_SampleAuxiliaryInfoSizeBox *cenc_saiz;",
          "2760:  GF_SampleAuxiliaryInfoOffsetBox *cenc_saio;",
          "2765:  u32 AlgorithmID;",
          "2766:  u8 IV_size;",
          "2767:  bin128 KID;",
          "2788: } GF_SampleEncryptionBox;",
          "2790: typedef struct __traf_mss_timeext_box",
          "",
          "[Removed Lines]",
          "2769: } GF_PIFFSampleEncryptionBox;",
          "2771: typedef struct __sample_encryption_box",
          "2772: {",
          "2773:  GF_ISOM_UUID_BOX",
          "2774:  u8 version;",
          "2775:  u32 flags;",
          "2778:  u64 bs_offset;",
          "2780: #ifndef GPAC_DISABLE_ISOM_FRAGMENTS",
          "2782:  GF_TrackFragmentBox *traf;",
          "2783: #endif",
          "2785:  GF_SampleAuxiliaryInfoSizeBox *cenc_saiz;",
          "2786:  GF_SampleAuxiliaryInfoOffsetBox *cenc_saio;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2797:  u64 fragment_duration_in_track_timescale;",
          "2798: } GF_MSSTimeExtBox;",
          "2801: GF_SampleEncryptionBox * gf_isom_create_samp_enc_box(u8 version, u32 flags);",
          "2803: void gf_isom_cenc_get_default_info_ex(GF_TrackBox *trak, u32 sampleDescriptionIndex, u32 *default_IsEncrypted, u8 *default_IV_size, bin128 *default_KID);",
          "2804: void gf_isom_cenc_get_default_pattern_info_ex(GF_TrackBox *trak, u32 sampleDescriptionIndex, u8 *default_crypt_byte_block, u8 *default_skip_byte_block);",
          "2805: #ifndef GPAC_DISABLE_ISOM_FRAGMENTS",
          "2807:           u8 *crypt_byte_block, u8 *skip_byte_block, u8 *constant_IV_size, bin128 *constant_IV);",
          "2808: GF_Err senc_Parse(GF_BitStream *bs, GF_TrackBox *trak, GF_TrackFragmentBox *traf, GF_SampleEncryptionBox *ptr);",
          "2809: #else",
          "2811:           u8 *crypt_byte_block, u8 *skip_byte_block, u8 *constant_IV_size, bin128 *constant_IV);",
          "2812: GF_Err senc_Parse(GF_BitStream *bs, GF_TrackBox *trak, void *traf, GF_SampleEncryptionBox *ptr);",
          "2813: #endif",
          "",
          "[Removed Lines]",
          "2800: GF_PIFFSampleEncryptionBox *gf_isom_create_piff_psec_box(u8 version, u32 flags, u32 AlgorithmID, u8 IV_size, bin128 KID);",
          "2806: GF_Err gf_isom_get_sample_cenc_info_ex(GF_TrackBox *trak, GF_TrackFragmentBox *traf, u32 sample_number, u32 *IsEncrypted, u8 *IV_size, bin128 *KID,",
          "2810: GF_Err gf_isom_get_sample_cenc_info_ex(GF_TrackBox *trak, void *traf, u32 sample_number, u32 *IsEncrypted, u8 *IV_size, bin128 *KID,",
          "",
          "[Added Lines]",
          "2784: GF_SampleEncryptionBox *gf_isom_create_piff_psec_box(u8 version, u32 flags, u32 AlgorithmID, u8 IV_size, bin128 KID);",
          "2790: GF_Err gf_isom_get_sample_cenc_info_ex(GF_TrackBox *trak, GF_TrackFragmentBox *traf, GF_SampleEncryptionBox *senc, u32 sample_number, u32 *IsEncrypted, u8 *IV_size, bin128 *KID,",
          "2794: GF_Err gf_isom_get_sample_cenc_info_ex(GF_TrackBox *trak, void *traf, uGF_SampleEncryptionBox *senc, 32 sample_number, u32 *IsEncrypted, u8 *IV_size, bin128 *KID,",
          "",
          "---------------"
        ],
        "include/gpac/isomedia.h||include/gpac/isomedia.h": [
          "File: include/gpac/isomedia.h -> include/gpac/isomedia.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "575: u8 gf_isom_is_track_enabled(GF_ISOFile *the_file, u32 trackNumber);",
          "581: u64 gf_isom_get_track_duration(GF_ISOFile *the_file, u32 trackNumber);",
          "",
          "[Removed Lines]",
          "578: u8 gf_isom_is_track_encrypted(GF_ISOFile *the_file, u32 trackNumber);",
          "",
          "[Added Lines]",
          "578: Bool gf_isom_is_track_encrypted(GF_ISOFile *the_file, u32 trackNumber);",
          "",
          "---------------"
        ],
        "src/isomedia/box_code_3gpp.c||src/isomedia/box_code_3gpp.c": [
          "File: src/isomedia/box_code_3gpp.c -> src/isomedia/box_code_3gpp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "297: GF_Err tx3g_Read(GF_Box *s, GF_BitStream *bs)",
          "298: {",
          "299:  GF_Tx3gSampleEntryBox *ptr = (GF_Tx3gSampleEntryBox*)s;",
          "301:  if (ptr->size < 18 + GPP_BOX_SIZE + GPP_STYLE_SIZE) return GF_ISOM_INVALID_FILE;",
          "305:  ptr->displayFlags = gf_bs_read_u32(bs);",
          "306:  ptr->horizontal_justification = gf_bs_read_u8(bs);",
          "307:  ptr->vertical_justification = gf_bs_read_u8(bs);",
          "",
          "[Removed Lines]",
          "303:  gf_bs_read_data(bs, ptr->reserved, 6);",
          "304:  ptr->dataReferenceIndex = gf_bs_read_u16(bs);",
          "",
          "[Added Lines]",
          "299:  GF_Err e;",
          "304:  e = gf_isom_base_sample_entry_read((GF_SampleEntryBox *)ptr, bs);",
          "305:  if (e) return e;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "318: GF_Err text_Read(GF_Box *s, GF_BitStream *bs)",
          "319: {",
          "320:  u16 pSize;",
          "321:  GF_TextSampleEntryBox *ptr = (GF_TextSampleEntryBox*)s;",
          "",
          "[Removed Lines]",
          "322:  gf_bs_read_data(bs, ptr->reserved, 6);",
          "323:  ptr->dataReferenceIndex = gf_bs_read_u16(bs);",
          "",
          "[Added Lines]",
          "322:  GF_Err e;",
          "326:  e = gf_isom_base_sample_entry_read((GF_SampleEntryBox *)ptr, bs);",
          "327:  if (e) return e;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1129: }",
          "1130: GF_Err dims_Read(GF_Box *s, GF_BitStream *bs)",
          "1131: {",
          "1132:  GF_DIMSSampleEntryBox *p = (GF_DIMSSampleEntryBox *)s;",
          "1135:  ISOM_DECREASE_SIZE(p, 8);",
          "1136:  return gf_isom_box_array_read(s, bs, dims_AddBox);",
          "1137: }",
          "",
          "[Removed Lines]",
          "1133:  gf_bs_read_data(bs, p->reserved, 6);",
          "1134:  p->dataReferenceIndex = gf_bs_read_u16(bs);",
          "",
          "[Added Lines]",
          "1136:  GF_Err e;",
          "1139:  e = gf_isom_base_sample_entry_read((GF_SampleEntryBox *)p, bs);",
          "1140:  if (e) return e;",
          "",
          "---------------"
        ],
        "src/isomedia/box_code_base.c||src/isomedia/box_code_base.c": [
          "File: src/isomedia/box_code_base.c -> src/isomedia/box_code_base.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3477:  case GF_ISOM_BOX_TYPE_HMHD:",
          "3478:  case GF_ISOM_BOX_TYPE_GMHD:",
          "3479:   if (ptr->InfoHeader) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "3482:   return GF_OK;",
          "3484:  case GF_ISOM_BOX_TYPE_DINF:",
          "3485:   if (ptr->dataInformation) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "3488:   return GF_OK;",
          "3490:  case GF_ISOM_BOX_TYPE_STBL:",
          "3491:   if (ptr->sampleTable ) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "3494:   return GF_OK;",
          "3495:  default:",
          "3496:   return gf_isom_box_add_default(s, a);",
          "",
          "[Removed Lines]",
          "3481:    ptr->InfoHeader = a;",
          "3487:    ptr->dataInformation = (GF_DataInformationBox *)a;",
          "3493:    ptr->sampleTable = (GF_SampleTableBox *)a;",
          "",
          "[Added Lines]",
          "3480:   ptr->InfoHeader = a;",
          "3485:   ptr->dataInformation = (GF_DataInformationBox *)a;",
          "3490:   ptr->sampleTable = (GF_SampleTableBox *)a;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3502: GF_Err minf_Read(GF_Box *s, GF_BitStream *bs)",
          "3503: {",
          "3504:  GF_Err e;",
          "3505:  e = gf_isom_box_array_read(s, bs, minf_AddBox);",
          "3507:   GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Missing DataInformationBox\\n\"));",
          "3509:  }",
          "3510:  return e;",
          "3511: }",
          "",
          "[Removed Lines]",
          "3506:  if (!((GF_MediaInformationBox *)s)->dataInformation) {",
          "3508:   e = GF_ISOM_INVALID_FILE;",
          "",
          "[Added Lines]",
          "3501:  GF_MediaInformationBox *ptr = (GF_MediaInformationBox *)s;",
          "3504:  if (! ptr->dataInformation) {",
          "3505:   GF_Box *dinf, *dref;",
          "3506:   Bool dump_mode = GF_FALSE;",
          "3512:   dinf = gf_isom_box_new(GF_ISOM_BOX_TYPE_DINF);",
          "3513:   if (!dinf) return GF_OUT_OF_MEM;",
          "3514:   if (ptr->InfoHeader && gf_list_find(ptr->other_boxes, ptr->InfoHeader)>=0) dump_mode = GF_TRUE;",
          "3515:   if (ptr->sampleTable && gf_list_find(ptr->other_boxes, ptr->sampleTable)>=0) dump_mode = GF_TRUE;",
          "3517:   ptr->dataInformation = (GF_DataInformationBox *)dinf;",
          "3519:   dref = gf_isom_box_new(GF_ISOM_BOX_TYPE_DREF);",
          "3520:   if (!dref) return GF_OUT_OF_MEM;",
          "3521:   e = dinf_AddBox(dinf, dref);",
          "3523:   if (dump_mode) {",
          "3524:    gf_list_add(ptr->other_boxes, ptr->dataInformation);",
          "3525:    if (!dinf->other_boxes) dinf->other_boxes = gf_list_new();",
          "3526:    gf_list_add(dinf->other_boxes, dref);",
          "3527:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4029: GF_Err mp4s_Read(GF_Box *s, GF_BitStream *bs)",
          "4030: {",
          "4031:  GF_MPEGSampleEntryBox *ptr = (GF_MPEGSampleEntryBox *)s;",
          "4034:  ISOM_DECREASE_SIZE(ptr, 8);",
          "4035:  return gf_isom_box_array_read(s, bs, mp4s_AddBox);",
          "4036: }",
          "",
          "[Removed Lines]",
          "4032:  gf_bs_read_data(bs, ptr->reserved, 6);",
          "4033:  ptr->dataReferenceIndex = gf_bs_read_u16(bs);",
          "",
          "[Added Lines]",
          "4050:  GF_Err e;",
          "4053:  e = gf_isom_base_sample_entry_read((GF_SampleEntryBox *)ptr, bs);",
          "4054:  if (e) return e;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6439:  if (ptr->sdtp) gf_isom_box_del((GF_Box *) ptr->sdtp);",
          "6440:  if (ptr->sub_samples) gf_isom_box_array_del(ptr->sub_samples);",
          "6441:  if (ptr->tfdt) gf_isom_box_del((GF_Box *) ptr->tfdt);",
          "6443:  if (ptr->sample_encryption) gf_isom_box_del((GF_Box *) ptr->sample_encryption);",
          "6444:  gf_isom_box_array_del(ptr->TrackRuns);",
          "6445:  if (ptr->sampleGroups) gf_isom_box_array_del(ptr->sampleGroups);",
          "",
          "[Removed Lines]",
          "6442:  if (ptr->piff_sample_encryption) gf_isom_box_del((GF_Box *) ptr->piff_sample_encryption);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6487:   if (!ptr->sai_offsets) ptr->sai_offsets = gf_list_new();",
          "6488:   gf_list_add(ptr->sai_offsets, a);",
          "6489:   return GF_OK;",
          "6490:  case GF_ISOM_BOX_TYPE_UUID:",
          "6491:   if ( ((GF_UUIDBox *)a)->internal_4cc==GF_ISOM_BOX_UUID_PSEC) {",
          "6495:    return GF_OK;",
          "6496:   } else {",
          "6497:    return gf_isom_box_add_default(s, a);",
          "6498:   }",
          "6499:  case GF_ISOM_BOX_TYPE_SENC:",
          "6500:   if (ptr->sample_encryption) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "6502:   ptr->sample_encryption->traf = ptr;",
          "6503:   return GF_OK;",
          "6504:  default:",
          "",
          "[Removed Lines]",
          "6492:    if (ptr->piff_sample_encryption) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "6493:     ptr->piff_sample_encryption = (GF_PIFFSampleEncryptionBox *)a;",
          "6494:    ptr->piff_sample_encryption->traf = ptr;",
          "6501:    ptr->sample_encryption = (GF_SampleEncryptionBox *)a;",
          "",
          "[Added Lines]",
          "6514:    if (ptr->sample_encryption) ERROR_ON_DUPLICATED_BOX(a, ptr)",
          "6515:    ptr->sample_encryption = (GF_SampleEncryptionBox *)a;",
          "6516:    ptr->sample_encryption->traf = ptr;",
          "6523:   ptr->sample_encryption = (GF_SampleEncryptionBox *)a;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6630:  e = gf_isom_box_array_write(s, ptr->TrackRuns, bs);",
          "6631:  if (e) return e;",
          "6635:   if (e) return e;",
          "6636:  }",
          "6637:  if (ptr->tfxd) {",
          "6638:   e = gf_isom_box_write((GF_Box *) ptr->tfxd, bs);",
          "6639:   if (e) return e;",
          "6640:  }",
          "6646:  return GF_OK;",
          "6647: }",
          "",
          "[Removed Lines]",
          "6633:  if (ptr->piff_sample_encryption) {",
          "6634:   e = gf_isom_box_write((GF_Box *) ptr->piff_sample_encryption, bs);",
          "6642:  if (ptr->sample_encryption) {",
          "6643:   e = gf_isom_box_write((GF_Box *) ptr->sample_encryption, bs);",
          "6644:   if (e) return e;",
          "6645:  }",
          "",
          "[Added Lines]",
          "6655:  if (ptr->sample_encryption) {",
          "6656:   e = gf_isom_box_write((GF_Box *) ptr->sample_encryption, bs);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6656:   if (e) return e;",
          "6657:   ptr->size += ptr->tfhd->size;",
          "6658:  }",
          "6664:  if (ptr->sub_samples) {",
          "6665:   e = gf_isom_box_array_size(s, ptr->sub_samples);",
          "6666:   if (e) return e;",
          "",
          "[Removed Lines]",
          "6659:  if (ptr->piff_sample_encryption) {",
          "6660:   e = gf_isom_box_size((GF_Box *) ptr->piff_sample_encryption);",
          "6661:   if (e) return e;",
          "6662:   ptr->size += ptr->piff_sample_encryption->size;",
          "6663:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6895:   default:",
          "6896:   {",
          "6897:    GF_GenericSampleEntryBox *genm;",
          "6899:    gf_list_rem(trak->Media->information->sampleTable->SampleDescription->other_boxes, i-1);",
          "6900:    genm = (GF_GenericSampleEntryBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_GNRM);",
          "6901:    genm->size = a->size-8;",
          "6902:    bs = gf_bs_new(a->data, a->dataSize, GF_BITSTREAM_READ);",
          "6905:    genm->size -= 8;",
          "6907:    if (gf_bs_available(bs)) {",
          "",
          "[Removed Lines]",
          "6903:    gf_bs_read_data(bs, genm->reserved, 6);",
          "6904:    genm->dataReferenceIndex = gf_bs_read_u16(bs);",
          "",
          "[Added Lines]",
          "6910:    GF_Err e;",
          "6918:    e = gf_isom_base_sample_entry_read((GF_SampleEntryBox *)genm, bs);",
          "6919:    if (e) return;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "8238: GF_Err metx_Read(GF_Box *s, GF_BitStream *bs)",
          "8239: {",
          "8240:  u32 size, i;",
          "8241:  char *str;",
          "8242:  GF_MetaDataSampleEntryBox *ptr = (GF_MetaDataSampleEntryBox*)s;",
          "8247:  size = (u32) ptr->size - 8;",
          "8248:  str = gf_malloc(sizeof(char)*size);",
          "",
          "[Removed Lines]",
          "8244:  gf_bs_read_data(bs, ptr->reserved, 6);",
          "8245:  ptr->dataReferenceIndex = gf_bs_read_u16(bs);",
          "",
          "[Added Lines]",
          "8257:  GF_Err e;",
          "8261:  e = gf_isom_base_sample_entry_read((GF_SampleEntryBox *)ptr, bs);",
          "8262:  if (e) return e;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "8671: GF_Err lsr1_Read(GF_Box *s, GF_BitStream *bs)",
          "8672: {",
          "8673:  GF_LASeRSampleEntryBox *ptr = (GF_LASeRSampleEntryBox*)s;",
          "8677:  ISOM_DECREASE_SIZE(ptr, 8);",
          "",
          "[Removed Lines]",
          "8674:  gf_bs_read_data(bs, ptr->reserved, 6);",
          "8675:  ptr->dataReferenceIndex = gf_bs_read_u16(bs);",
          "",
          "[Added Lines]",
          "8690:  GF_Err e;",
          "8693:  e = gf_isom_base_sample_entry_read((GF_SampleEntryBox *)ptr, bs);",
          "8694:  if (e) return e;",
          "",
          "---------------"
        ],
        "src/isomedia/box_code_drm.c||src/isomedia/box_code_drm.c": [
          "File: src/isomedia/box_code_drm.c -> src/isomedia/box_code_drm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1089: GF_Box *piff_psec_New()",
          "1090: {",
          "1092:  tmp->internal_4cc = GF_ISOM_BOX_UUID_PSEC;",
          "1093:  return (GF_Box *)tmp;",
          "1094: }",
          "1096: void piff_psec_del(GF_Box *s)",
          "1097: {",
          "1099:  while (gf_list_count(ptr->samp_aux_info)) {",
          "1100:   GF_CENCSampleAuxInfo *sai = (GF_CENCSampleAuxInfo *)gf_list_get(ptr->samp_aux_info, 0);",
          "1101:   if (sai) gf_isom_cenc_samp_aux_info_del(sai);",
          "",
          "[Removed Lines]",
          "1091:  ISOM_DECL_BOX_ALLOC(GF_PIFFSampleEncryptionBox, GF_ISOM_BOX_TYPE_UUID);",
          "1098:  GF_PIFFSampleEncryptionBox *ptr = (GF_PIFFSampleEncryptionBox *)s;",
          "",
          "[Added Lines]",
          "1091:  ISOM_DECL_BOX_ALLOC(GF_SampleEncryptionBox, GF_ISOM_BOX_TYPE_UUID);",
          "1093:  tmp->is_piff = GF_TRUE;",
          "1099:  GF_SampleEncryptionBox *ptr = (GF_SampleEncryptionBox *)s;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1109: GF_Err piff_psec_Read(GF_Box *s, GF_BitStream *bs)",
          "1110: {",
          "1113:  if (ptr->size<4) return GF_ISOM_INVALID_FILE;",
          "1114:  ptr->version = gf_bs_read_u8(bs);",
          "1115:  ptr->flags = gf_bs_read_u24(bs);",
          "",
          "[Removed Lines]",
          "1111:  u32 sample_count, i, j;",
          "1112:  GF_PIFFSampleEncryptionBox *ptr = (GF_PIFFSampleEncryptionBox *)s;",
          "",
          "[Added Lines]",
          "1112:  u32 sample_count;",
          "1113:  GF_SampleEncryptionBox *ptr = (GF_SampleEncryptionBox *)s;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1124:  if (ptr->IV_size == 0)",
          "1125:   ptr->IV_size = 8; //default to 8",
          "1157:  sample_count = gf_bs_read_u32(bs);",
          "1159:  if (ptr->IV_size != 8 && ptr->IV_size != 16) {",
          "1160:   GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[iso file] PIFF PSEC box incorrect IV size: %u - shall be 8 or 16\\n\", ptr->IV_size));",
          "1161:   return GF_BAD_PARAM;",
          "1162:  }",
          "1185:  return GF_OK;",
          "1186: }",
          "",
          "[Removed Lines]",
          "1127:  sample_count = gf_bs_read_u32(bs);",
          "1128:  ISOM_DECREASE_SIZE(ptr, 4);",
          "1129:  if (ptr->IV_size != 8 && ptr->IV_size != 16) {",
          "1130:   GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[iso file] PIFF PSEC box incorrect IV size: %u - shall be 8 or 16\\n\", ptr->IV_size));",
          "1131:   return GF_BAD_PARAM;",
          "1132:  }",
          "1134:  ptr->samp_aux_info = gf_list_new();",
          "1135:  for (i=0; i<sample_count; ++i) {",
          "1136:   GF_CENCSampleAuxInfo *sai;",
          "1137:   GF_SAFEALLOC(sai, GF_CENCSampleAuxInfo);",
          "1138:   if (!sai) return GF_OUT_OF_MEM;",
          "1140:   sai->IV_size = ptr->IV_size;",
          "1141:   gf_bs_read_data(bs, (char *) sai->IV, ptr->IV_size);",
          "1142:   ISOM_DECREASE_SIZE(ptr, ptr->IV_size);",
          "1143:   if (ptr->flags & 2) {",
          "1144:    sai->subsample_count = gf_bs_read_u16(bs);",
          "1145:    sai->subsamples = gf_malloc(sai->subsample_count*sizeof(GF_CENCSubSampleEntry));",
          "1146:    for (j = 0; j < sai->subsample_count; ++j) {",
          "1147:     sai->subsamples[j].bytes_clear_data = gf_bs_read_u16(bs);",
          "1148:     sai->subsamples[j].bytes_encrypted_data = gf_bs_read_u32(bs);",
          "1149:    }",
          "1150:    ISOM_DECREASE_SIZE(ptr, (2+sai->subsample_count*6) );",
          "1151:   }",
          "1152:   gf_list_add(ptr->samp_aux_info, sai);",
          "1153:  }",
          "1154:  if (ptr->IV_size == 0)",
          "1155:   ptr->IV_size = 8; //default to 8",
          "1158:  ptr->size -= 4;",
          "1164:  ptr->samp_aux_info = gf_list_new();",
          "1165:  for (i=0; i<sample_count; ++i) {",
          "1166:   GF_CENCSampleAuxInfo *sai;",
          "1167:   GF_SAFEALLOC(sai, GF_CENCSampleAuxInfo);",
          "1168:   sai->IV_size = ptr->IV_size;",
          "1169:   gf_bs_read_data(bs, sai->IV, ptr->IV_size);",
          "1170:   ptr->size -= ptr->IV_size;",
          "1171:   if (ptr->flags & 2) {",
          "1172:    sai->subsample_count = gf_bs_read_u16(bs);",
          "1173:    sai->subsamples = gf_malloc(sai->subsample_count*sizeof(GF_CENCSubSampleEntry));",
          "1174:    for (j = 0; j < sai->subsample_count; ++j) {",
          "1175:     sai->subsamples[j].bytes_clear_data = gf_bs_read_u16(bs);",
          "1176:     sai->subsamples[j].bytes_encrypted_data = gf_bs_read_u32(bs);",
          "1177:    }",
          "1178:    ptr->size -= 2+sai->subsample_count*6;",
          "1179:   }",
          "1180:   gf_list_add(ptr->samp_aux_info, sai);",
          "1181:  }",
          "1183:  ptr->bs_offset = gf_bs_get_position(bs);",
          "1184:  assert(ptr->size == 0);",
          "",
          "[Added Lines]",
          "1128:  ptr->bs_offset = gf_bs_get_position(bs);",
          "1131:  ISOM_DECREASE_SIZE(ptr, 4);",
          "1137:  ptr->size = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1215: {",
          "1216:  GF_Err e;",
          "1217:  u32 sample_count;",
          "1219:  if (!s) return GF_BAD_PARAM;",
          "1221:  e = gf_isom_box_write_header(s, bs);",
          "",
          "[Removed Lines]",
          "1218:  GF_PIFFSampleEncryptionBox *ptr = (GF_PIFFSampleEncryptionBox *) s;",
          "",
          "[Added Lines]",
          "1171:  GF_SampleEncryptionBox *ptr = (GF_SampleEncryptionBox *) s;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1252: GF_Err piff_psec_Size(GF_Box *s)",
          "1253: {",
          "1254:  u32 i, sample_count;",
          "1257:  ptr->size += 4;",
          "1258:  if (ptr->flags & 1) {",
          "",
          "[Removed Lines]",
          "1255:  GF_PIFFSampleEncryptionBox *ptr = (GF_PIFFSampleEncryptionBox*)s;",
          "",
          "[Added Lines]",
          "1208:  GF_SampleEncryptionBox *ptr = (GF_SampleEncryptionBox*)s;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1341: }",
          "1343: #ifndef GPAC_DISABLE_ISOM_FRAGMENTS",
          "1345: #else",
          "1347: #endif",
          "1348: {",
          "1349:  GF_Err e;",
          "",
          "[Removed Lines]",
          "1344: GF_Err senc_Parse(GF_BitStream *bs, GF_TrackBox *trak, GF_TrackFragmentBox *traf, GF_SampleEncryptionBox *ptr)",
          "1346: GF_Err senc_Parse(GF_BitStream *bs, GF_TrackBox *trak, void *traf, GF_SampleEncryptionBox *ptr)",
          "",
          "[Added Lines]",
          "1297: GF_Err senc_Parse(GF_BitStream *bs, GF_TrackBox *trak, GF_TrackFragmentBox *traf, GF_SampleEncryptionBox *senc)",
          "1299: GF_Err senc_Parse(GF_BitStream *bs, GF_TrackBox *trak, void *traf, GF_SampleEncryptionBox *senc)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1355:   return GF_BAD_PARAM;",
          "1356: #endif",
          "1360:  count = gf_bs_read_u32(bs);",
          "1362:  for (i=0; i<count; i++) {",
          "1363:   u32 is_encrypted;",
          "1364:   u32 samp_count;",
          "",
          "[Removed Lines]",
          "1358:  gf_bs_seek(bs, ptr->bs_offset);",
          "1361:  if (!ptr->samp_aux_info) ptr->samp_aux_info = gf_list_new();",
          "",
          "[Added Lines]",
          "1311:  gf_bs_seek(bs, senc->bs_offset);",
          "1314:  if (!senc->samp_aux_info) senc->samp_aux_info = gf_list_new();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1370:   if (trak) samp_count += trak->sample_count_at_seg_start;",
          "1371: #endif",
          "1374:   if (e) {",
          "1375:    GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[isobmf] could not get cenc info for sample %d: %s\\n\", samp_count, gf_error_to_string(e) ));",
          "1376:    return e;",
          "1377:   }",
          "1378:   if (is_encrypted) {",
          "1379:    gf_bs_read_data(bs, (char *)sai->IV, sai->IV_size);",
          "1381:     sai->subsample_count = gf_bs_read_u16(bs);",
          "1382:     sai->subsamples = (GF_CENCSubSampleEntry *)gf_malloc(sai->subsample_count*sizeof(GF_CENCSubSampleEntry));",
          "1383:     for (j = 0; j < sai->subsample_count; j++) {",
          "",
          "[Removed Lines]",
          "1373:   e = gf_isom_get_sample_cenc_info_ex(trak, traf, samp_count, &is_encrypted, &sai->IV_size, NULL, NULL, NULL, NULL, NULL);",
          "1380:    if (ptr->flags & 0x00000002) {",
          "",
          "[Added Lines]",
          "1326:   e = gf_isom_get_sample_cenc_info_ex(trak, traf, senc, samp_count, &is_encrypted, &sai->IV_size, NULL, NULL, NULL, NULL, NULL);",
          "1334:    if (senc->flags & 0x00000002) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1386:     }",
          "1387:    }",
          "1388:   }",
          "1390:  }",
          "1391:  gf_bs_seek(bs, pos);",
          "1392:  return GF_OK;",
          "",
          "[Removed Lines]",
          "1389:   gf_list_add(ptr->samp_aux_info, sai);",
          "",
          "[Added Lines]",
          "1343:   gf_list_add(senc->samp_aux_info, sai);",
          "",
          "---------------"
        ],
        "src/isomedia/box_dump.c||src/isomedia/box_dump.c": [
          "File: src/isomedia/box_dump.c -> src/isomedia/box_dump.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2282:  gf_isom_box_array_dump(p->TrackRuns, trace);",
          "2283:  if (p->sai_sizes) gf_isom_box_array_dump(p->sai_sizes, trace);",
          "2284:  if (p->sai_offsets) gf_isom_box_array_dump(p->sai_offsets, trace);",
          "2286:  if (p->sample_encryption) gf_isom_box_dump(p->sample_encryption, trace);",
          "2287:  gf_isom_box_dump_done(\"TrackFragmentBox\", a, trace);",
          "2288:  return GF_OK;",
          "",
          "[Removed Lines]",
          "2285:  if (p->piff_sample_encryption) gf_isom_box_dump(p->piff_sample_encryption, trace);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4541: GF_Err piff_psec_dump(GF_Box *a, FILE * trace)",
          "4542: {",
          "4543:  u32 i, j, sample_count;",
          "4545:  if (!a) return GF_BAD_PARAM;",
          "4547:  gf_isom_box_dump_start(a, \"PIFFSampleEncryptionBox\", trace);",
          "",
          "[Removed Lines]",
          "4544:  GF_PIFFSampleEncryptionBox *ptr = (GF_PIFFSampleEncryptionBox *) a;",
          "",
          "[Added Lines]",
          "4543:  GF_SampleEncryptionBox *ptr = (GF_SampleEncryptionBox *) a;",
          "",
          "---------------"
        ],
        "src/isomedia/box_funcs.c||src/isomedia/box_funcs.c": [
          "File: src/isomedia/box_funcs.c -> src/isomedia/box_funcs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1164:  BOX_DEFINE_S(GF_ISOM_BOX_UUID_TFXD, tfxd, \"traf\", \"smooth\"),",
          "1165:  BOX_DEFINE_S(GF_ISOM_BOX_UUID_MSSM, uuid, \"file\", \"smooth\"),",
          "1166:  BOX_DEFINE_S(GF_ISOM_BOX_UUID_TFRF, uuid, \"traf\", \"smooth\")",
          "",
          "[Removed Lines]",
          "1161:  FBOX_DEFINE_S(GF_ISOM_BOX_UUID_TENC, piff_tenc, \"schi\", 0, \"smooth\"),",
          "1162:  FBOX_DEFINE_S(GF_ISOM_BOX_UUID_PSEC, piff_psec, \"trak traf\", 0, \"smooth\"),",
          "1163:  FBOX_DEFINE_S(GF_ISOM_BOX_UUID_PSSH, piff_pssh, \"moov moof\", 0, \"smooth\"),",
          "",
          "[Added Lines]",
          "1161:  BOX_DEFINE_S(GF_ISOM_BOX_UUID_TENC, piff_tenc, \"schi\", \"smooth\"),",
          "1162:  BOX_DEFINE_S(GF_ISOM_BOX_UUID_PSEC, piff_psec, \"trak traf\", \"smooth\"),",
          "1163:  BOX_DEFINE_S(GF_ISOM_BOX_UUID_PSSH, piff_pssh, \"moov moof\", \"smooth\"),",
          "",
          "---------------"
        ],
        "src/isomedia/drm_sample.c||src/isomedia/drm_sample.c": [
          "File: src/isomedia/drm_sample.c -> src/isomedia/drm_sample.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "554:  trak = gf_isom_get_track_from_file(the_file, trackNumber);",
          "555:  if (!trak) return GF_FALSE;",
          "557:  sinf = isom_get_sinf_entry(trak, sampleDescriptionIndex, GF_ISOM_CENC_SCHEME, NULL);",
          "558:  if (!sinf) sinf = isom_get_sinf_entry(trak, sampleDescriptionIndex, GF_ISOM_CBC_SCHEME, NULL);",
          "559:  if (!sinf) sinf = isom_get_sinf_entry(trak, sampleDescriptionIndex, GF_ISOM_CENS_SCHEME, NULL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "557:  if (trak->Media->information->sampleTable->senc) return GF_TRUE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "838: {",
          "842:  if (!psec)",
          "843:   return NULL;",
          "844:  psec->version = version;",
          "845:  psec->flags = flags;",
          "846:  if (psec->flags & 0x1) {",
          "847:   psec->AlgorithmID = AlgorithmID;",
          "848:   psec->IV_size = IV_size;",
          "",
          "[Removed Lines]",
          "837: GF_PIFFSampleEncryptionBox * gf_isom_create_piff_psec_box(u8 version, u32 flags, u32 AlgorithmID, u8 IV_size, bin128 KID)",
          "839:  GF_PIFFSampleEncryptionBox *psec;",
          "841:  psec = (GF_PIFFSampleEncryptionBox *) gf_isom_box_new(GF_ISOM_BOX_UUID_PSEC);",
          "",
          "[Added Lines]",
          "839: GF_SampleEncryptionBox * gf_isom_create_piff_psec_box(u8 version, u32 flags, u32 AlgorithmID, u8 IV_size, bin128 KID)",
          "841:  GF_SampleEncryptionBox *psec;",
          "843:  psec = (GF_SampleEncryptionBox *) gf_isom_box_new(GF_ISOM_BOX_UUID_PSEC);",
          "848:  psec->is_piff = GF_TRUE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1147:  return e;",
          "1148: }",
          "1163: GF_EXPORT",
          "1164: GF_Err gf_isom_cenc_get_sample_aux_info(GF_ISOFile *the_file, u32 trackNumber, u32 sampleNumber, GF_CENCSampleAuxInfo **sai, u32 *container_type)",
          "1165: {",
          "1166:  GF_TrackBox *trak;",
          "1167:  GF_SampleTableBox *stbl;",
          "1170:  GF_CENCSampleAuxInfo *a_sai;",
          "1171:  u8 IV_size;",
          "1172:  u32 is_Protected;",
          "",
          "[Removed Lines]",
          "1150: static Bool get_enc_box_type(GF_Box *box, u32 *type)",
          "1151: {",
          "1152:  if ((box->type == GF_ISOM_BOX_TYPE_UUID) && (((GF_UUIDBox *)box)->internal_4cc == GF_ISOM_BOX_UUID_PSEC)) {",
          "1154:   return GF_TRUE;",
          "1155:  } else if (box->type == GF_ISOM_BOX_TYPE_SENC) {",
          "1157:   return GF_TRUE;",
          "1158:  } else {",
          "1159:   return GF_FALSE;",
          "1160:  }",
          "1161: }",
          "1168:  GF_Box *a_box = NULL;",
          "1169:  u32 i, type;",
          "",
          "[Added Lines]",
          "1159:  GF_SampleEncryptionBox *senc = NULL;",
          "1160:  u32 type;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1177:  if (!stbl)",
          "1178:   return GF_BAD_PARAM;",
          "1185:  }",
          "1187:  if (container_type) *container_type = type;",
          "",
          "[Removed Lines]",
          "1180:  type = 0;",
          "1181:  for (i = 0; i < gf_list_count(stbl->other_boxes); i++) {",
          "1182:   a_box = (GF_Box*)gf_list_get(stbl->other_boxes, i++);",
          "1183:   if (get_enc_box_type(a_box, &type) == GF_TRUE)",
          "1184:    break;",
          "",
          "[Added Lines]",
          "1171:  senc = trak->Media->information->sampleTable->senc;",
          "1172:  if (!senc)",
          "1173:   return GF_BAD_PARAM;",
          "1175:  if ((senc->type == GF_ISOM_BOX_TYPE_UUID) && (((GF_UUIDBox *)senc)->internal_4cc == GF_ISOM_BOX_UUID_PSEC)) {",
          "1176:   type = GF_ISOM_BOX_UUID_PSEC;",
          "1177:  } else if (senc->type == GF_ISOM_BOX_TYPE_SENC) {",
          "1178:   type = GF_ISOM_BOX_TYPE_SENC;",
          "1179:  } else {",
          "1180:   type = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1198:  }",
          "1201:  if (!is_Protected) {",
          "1202:   GF_SAFEALLOC( (*sai),  GF_CENCSampleAuxInfo);",
          "1203:   return GF_OK;",
          "",
          "[Removed Lines]",
          "1200:  gf_isom_get_sample_cenc_info_ex(trak, NULL, sampleNumber, &is_Protected, &IV_size, NULL, NULL, NULL, NULL, NULL);",
          "",
          "[Added Lines]",
          "1196:  gf_isom_get_sample_cenc_info_ex(trak, NULL, senc, sampleNumber, &is_Protected, &IV_size, NULL, NULL, NULL, NULL, NULL);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1211:  a_sai = NULL;",
          "1212:  switch (type) {",
          "1213:  case GF_ISOM_BOX_UUID_PSEC:",
          "1216:   break;",
          "1217:  case GF_ISOM_BOX_TYPE_SENC:",
          "1220:   break;",
          "1221:  }",
          "1222:  if (!a_sai)",
          "",
          "[Removed Lines]",
          "1214:   if (a_box)",
          "1215:    a_sai = (GF_CENCSampleAuxInfo *)gf_list_get(((GF_PIFFSampleEncryptionBox *)a_box)->samp_aux_info, sampleNumber-1);",
          "1218:   if (a_box)",
          "1219:    a_sai = (GF_CENCSampleAuxInfo *)gf_list_get(((GF_SampleEncryptionBox *)a_box)->samp_aux_info, sampleNumber-1);",
          "",
          "[Added Lines]",
          "1210:   if (senc)",
          "1211:    a_sai = (GF_CENCSampleAuxInfo *)gf_list_get(((GF_SampleEncryptionBox *)senc)->samp_aux_info, sampleNumber-1);",
          "1214:   if (senc)",
          "1215:    a_sai = (GF_CENCSampleAuxInfo *)gf_list_get(((GF_SampleEncryptionBox *)senc)->samp_aux_info, sampleNumber-1);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1225:  GF_SAFEALLOC( (*sai),  GF_CENCSampleAuxInfo);",
          "1226:  if (! (*sai) ) return GF_OUT_OF_MEM;",
          "1228:   u8 size = ((*sai)->IV_size != 0) ? (*sai)->IV_size : 8/*default for modern PIFF/CENC with AES-CTR*/;",
          "1229:   memmove((*sai)->IV, a_sai->IV, size);",
          "1230:   (*sai)->subsample_count = a_sai->subsample_count;",
          "",
          "[Removed Lines]",
          "1227:  if (a_box) {",
          "",
          "[Added Lines]",
          "1223:  if (senc) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1254:   if (default_IsEncrypted) *default_IsEncrypted = sinf->info->tenc->isProtected;",
          "1255:   if (default_IV_size) *default_IV_size = sinf->info->tenc->Per_Sample_IV_Size;",
          "1256:   if (default_KID) memmove(*default_KID, sinf->info->tenc->KID, 16);",
          "1257:  }",
          "1258: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1253:  } else {",
          "1254:   if (! trak->moov->mov->is_smooth) {",
          "1255:    trak->moov->mov->is_smooth = GF_TRUE;",
          "1256:    GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[iso file] senc box without tenc, assuming MS smooth+piff\\n\"));",
          "1257:   }",
          "1258:   if (default_IsEncrypted) *default_IsEncrypted = GF_TRUE;",
          "1260:   if (default_IV_size) *default_IV_size = 0;",
          "",
          "---------------"
        ],
        "src/isomedia/hinting.c||src/isomedia/hinting.c": [
          "File: src/isomedia/hinting.c -> src/isomedia/hinting.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: GF_Err ghnt_Read(GF_Box *s, GF_BitStream *bs)",
          "54: {",
          "55:  GF_HintSampleEntryBox *ptr = (GF_HintSampleEntryBox *)s;",
          "56:  if (ptr == NULL) return GF_BAD_PARAM;",
          "58:  if (ptr->size < 16) return GF_ISOM_INVALID_FILE;",
          "62:  ptr->HintTrackVersion = gf_bs_read_u16(bs);",
          "63:  ptr->LastCompatibleVersion = gf_bs_read_u16(bs);",
          "",
          "[Removed Lines]",
          "60:  gf_bs_read_data(bs, ptr->reserved, 6);",
          "61:  ptr->dataReferenceIndex = gf_bs_read_u16(bs);",
          "",
          "[Added Lines]",
          "55:  GF_Err e;",
          "61:  e = gf_isom_base_sample_entry_read((GF_SampleEntryBox *)ptr, bs);",
          "62:  if (e) return e;",
          "",
          "---------------"
        ],
        "src/isomedia/isom_intern.c||src/isomedia/isom_intern.c": [
          "File: src/isomedia/isom_intern.c -> src/isomedia/isom_intern.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "379:        }",
          "380:       }",
          "383:        GF_TrackBox *trak = GetTrackbyID(mov->moov, traf->tfhd->trackID);",
          "385:        if (e) return e;",
          "386:       }",
          "387:      }",
          "",
          "[Removed Lines]",
          "382:       if (traf->trex && traf->trex->track && (traf->piff_sample_encryption || traf->sample_encryption)) {",
          "384:        e = senc_Parse(mov->movieFileMap->bs, trak, traf, traf->piff_sample_encryption ? (GF_SampleEncryptionBox *) traf->piff_sample_encryption : traf->sample_encryption);",
          "",
          "[Added Lines]",
          "382:       if (traf->trex && traf->trex->track && traf->sample_encryption) {",
          "384:        e = senc_Parse(mov->movieFileMap->bs, trak, traf, traf->sample_encryption);",
          "",
          "---------------"
        ],
        "src/isomedia/isom_read.c||src/isomedia/isom_read.c": [
          "File: src/isomedia/isom_read.c -> src/isomedia/isom_read.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:    char szH[3], *data = val+5;",
          "178:    u32 i, len = (u32) strlen(data);",
          "179:    for (i=0; i<len; i+=2) {",
          "180:     szH[0] = data[i];",
          "181:     szH[1] = data[i+1];",
          "182:     szH[2] = 0;",
          "184:     CodecParamLen++;",
          "185:    }",
          "186:   }",
          "",
          "[Removed Lines]",
          "183:     sscanf(szH, \"%X\", &CodecParams[CodecParamLen]);",
          "",
          "[Added Lines]",
          "180:     u32 v;",
          "185:     sscanf(szH, \"%X\", &v);",
          "186:     CodecParams[CodecParamLen] = (char) v;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1303: }",
          "1305: GF_EXPORT",
          "1307: {",
          "1308:  GF_TrackBox *trak;",
          "1309:  GF_Box *entry;",
          "",
          "[Removed Lines]",
          "1306: u8 gf_isom_is_track_encrypted(GF_ISOFile *the_file, u32 trackNumber)",
          "",
          "[Added Lines]",
          "1309: Bool gf_isom_is_track_encrypted(GF_ISOFile *the_file, u32 trackNumber)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1311:  if (!trak) return 2;",
          "1312:  entry = (GF_Box*)gf_list_get(trak->Media->information->sampleTable->SampleDescription->other_boxes, 0);",
          "1313:  if (!entry) return 2;",
          "1315: }",
          "1317: GF_EXPORT",
          "",
          "[Removed Lines]",
          "1314:  return IsMP4EncryptedDescription(entry->type);",
          "",
          "[Added Lines]",
          "1317:  if (IsMP4EncryptedDescription(entry->type)) return GF_TRUE;",
          "1319:  if (gf_isom_is_cenc_media(the_file, trackNumber, 1))",
          "1320:   return GF_TRUE;",
          "1322:  return GF_FALSE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3903: GF_EXPORT",
          "3904: #ifndef GPAC_DISABLE_ISOM_FRAGMENTS",
          "3906: #else",
          "3908: #endif",
          "3909: {",
          "3910:  GF_SampleGroupBox *sample_group;",
          "",
          "[Removed Lines]",
          "3905: GF_Err gf_isom_get_sample_cenc_info_ex(GF_TrackBox *trak, GF_TrackFragmentBox *traf, u32 sample_number, u32 *IsEncrypted, u8 *IV_size, bin128 *KID, u8 *crypt_byte_block, u8 *skip_byte_block, u8 *constant_IV_size, bin128 *constant_IV)",
          "3907: GF_Err gf_isom_get_sample_cenc_info_ex(GF_TrackBox *trak, void *traf, u32 sample_number, u32 *IsEncrypted, u8 *IV_size, bin128 *KID, u8 *crypt_byte_block, u8 *skip_byte_block, u8 *constant_IV_size, bin128 *constant_IV)",
          "",
          "[Added Lines]",
          "3913: GF_Err gf_isom_get_sample_cenc_info_ex(GF_TrackBox *trak, GF_TrackFragmentBox *traf, GF_SampleEncryptionBox *senc, u32 sample_number, u32 *IsEncrypted, u8 *IV_size, bin128 *KID, u8 *crypt_byte_block, u8 *skip_byte_block, u8 *constant_IV_size, bin128 *constant_IV)",
          "3915: GF_Err gf_isom_get_sample_cenc_info_ex(GF_TrackBox *trak, void *traf, GF_SampleEncryptionBox *senc, u32 sample_number, u32 *IsEncrypted, u8 *IV_size, bin128 *KID, u8 *crypt_byte_block, u8 *skip_byte_block, u8 *constant_IV_size, bin128 *constant_IV)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3925:  if (constant_IV_size) *constant_IV_size = 0;",
          "3926:  if (constant_IV) memset(*constant_IV, 0, 16);",
          "3928: #ifdef GPAC_DISABLE_ISOM_FRAGMENTS",
          "3929:  if (traf)",
          "3930:   return GF_BAD_PARAM;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3936:  if (!senc) return GF_BAD_PARAM;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3989:  }",
          "3990: #endif",
          "3994:  sgdesc = NULL;",
          "",
          "[Removed Lines]",
          "3992:  if (!group_desc_index) return GF_OK;",
          "",
          "[Added Lines]",
          "4002:  if (!group_desc_index) goto exit;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4023:  if (constant_IV_size) *constant_IV_size = entry->constant_IV_size;",
          "4024:  if (constant_IV) memmove(*constant_IV, entry->constant_IV, 16);",
          "4026:  return GF_OK;",
          "4027: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4036: exit:",
          "4039:  if ((senc->is_piff || trak->moov->mov->is_smooth) && !(*IV_size) ) {",
          "4040:   if (!senc->is_piff) {",
          "4041:    senc->is_piff = GF_TRUE;",
          "4042:    senc->IV_size=8;",
          "4043:   }",
          "4044:   assert(senc->IV_size);",
          "4047:  }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4030: GF_Err gf_isom_get_sample_cenc_info(GF_ISOFile *movie, u32 track, u32 sample_number, u32 *IsEncrypted, u8 *IV_size, bin128 *KID,",
          "4031:          u8 *crypt_byte_block, u8 *skip_byte_block, u8 *constant_IV_size, bin128 *constant_IV)",
          "4032: {",
          "4036: }",
          "4038: GF_EXPORT",
          "",
          "[Removed Lines]",
          "4033:  GF_TrackBox *trak;",
          "4034:  trak = gf_isom_get_track_from_file(movie, track);",
          "4035:  return gf_isom_get_sample_cenc_info_ex(trak, NULL, sample_number, IsEncrypted, IV_size, KID, crypt_byte_block, skip_byte_block, constant_IV_size, constant_IV);",
          "",
          "[Added Lines]",
          "4056:  GF_TrackBox *trak = gf_isom_get_track_from_file(movie, track);",
          "4057:  GF_SampleEncryptionBox *senc = trak->Media->information->sampleTable->senc;",
          "4059:  return gf_isom_get_sample_cenc_info_ex(trak, NULL, senc, sample_number, IsEncrypted, IV_size, KID, crypt_byte_block, skip_byte_block, constant_IV_size, constant_IV);",
          "",
          "---------------"
        ],
        "src/isomedia/media.c||src/isomedia/media.c": [
          "File: src/isomedia/media.c -> src/isomedia/media.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "464:   if (e) return e;",
          "465:  }",
          "469:          ) {",
          "470:   e = gf_isom_nalu_sample_rewrite(mdia, *samp, sampleNumber, (GF_MPEGVisualSampleEntryBox *)entry);",
          "471:   if (e) return e;",
          "",
          "[Removed Lines]",
          "467:  else if (gf_isom_is_nalu_based_entry(mdia, entry) &&",
          "468:           !gf_isom_is_track_encrypted(mdia->mediaTrack->moov->mov, gf_isom_get_tracknum_from_id(mdia->mediaTrack->moov, mdia->mediaTrack->Header->trackID))",
          "",
          "[Added Lines]",
          "467:  else if (gf_isom_is_nalu_based_entry(mdia, entry)",
          "",
          "---------------"
        ],
        "src/isomedia/movie_fragments.c||src/isomedia/movie_fragments.c": [
          "File: src/isomedia/movie_fragments.c -> src/isomedia/movie_fragments.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1859:   switch (boxType) {",
          "1860:   case GF_ISOM_BOX_UUID_PSEC:",
          "1863:     if (!psec) return GF_ISOM_INVALID_FILE;",
          "1866:    }",
          "1872:    break;",
          "1873:   case GF_ISOM_BOX_TYPE_SENC:",
          "1874:    if (!traf->sample_encryption) {",
          "",
          "[Removed Lines]",
          "1861:    if (!traf->piff_sample_encryption) {",
          "1862:     GF_PIFFSampleEncryptionBox *psec = (GF_PIFFSampleEncryptionBox *) src_trak->piff_psec;",
          "1864:     traf->piff_sample_encryption = gf_isom_create_piff_psec_box(1, 0, psec->AlgorithmID, psec->IV_size, psec->KID);",
          "1865:     traf->piff_sample_encryption->traf = traf;",
          "1868:    if (!traf->piff_sample_encryption) {",
          "1869:     return GF_IO_ERR;",
          "1870:    }",
          "1871:    senc = (GF_SampleEncryptionBox *) traf->piff_sample_encryption;",
          "",
          "[Added Lines]",
          "1862:    if (!traf->sample_encryption) {",
          "1863:     GF_SampleEncryptionBox *psec = (GF_SampleEncryptionBox *) src_trak->piff_psec;",
          "1865:     traf->sample_encryption = gf_isom_create_piff_psec_box(1, 0, psec->AlgorithmID, psec->IV_size, psec->KID);",
          "1866:     if (!traf->sample_encryption)",
          "1867:      return GF_OUT_OF_MEM;",
          "1868:     traf->sample_encryption->traf = traf;",
          "1871:    senc = (GF_SampleEncryptionBox *) traf->sample_encryption;",
          "",
          "---------------"
        ],
        "src/isomedia/sample_descs.c||src/isomedia/sample_descs.c": [
          "File: src/isomedia/sample_descs.c -> src/isomedia/sample_descs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #ifndef GPAC_DISABLE_ISOM",
          "30: void gf_isom_sample_entry_predestroy(GF_SampleEntryBox *ptr)",
          "31: {",
          "32:  if (ptr->protections) gf_isom_box_array_del(ptr->protections);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: GF_Err gf_isom_base_sample_entry_read(GF_SampleEntryBox *ptr, GF_BitStream *bs)",
          "32: {",
          "33:  gf_bs_read_data(bs, ptr->reserved, 6);",
          "34:  ptr->dataReferenceIndex = gf_bs_read_u16(bs);",
          "35:  if (!ptr->dataReferenceIndex) {",
          "36:   GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[ISO file] dataReferenceIndex set to 0 in sample entry, overriding to 1\\n\"));",
          "37:   ptr->dataReferenceIndex = 1;",
          "38:  }",
          "39:  return GF_OK;",
          "40: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50: GF_Err gf_isom_video_sample_entry_read(GF_VisualSampleEntryBox *ptr, GF_BitStream *bs)",
          "51: {",
          "52:  if (ptr->size < 78) return GF_ISOM_INVALID_FILE;",
          "53:  ptr->size -= 78;",
          "56:  ptr->version = gf_bs_read_u16(bs);",
          "57:  ptr->revision = gf_bs_read_u16(bs);",
          "58:  ptr->vendor = gf_bs_read_u32(bs);",
          "",
          "[Removed Lines]",
          "54:  gf_bs_read_data(bs, ptr->reserved, 6);",
          "55:  ptr->dataReferenceIndex = gf_bs_read_u16(bs);",
          "",
          "[Added Lines]",
          "64:  GF_Err e;",
          "67:  e = gf_isom_base_sample_entry_read((GF_SampleEntryBox *)ptr, bs);",
          "68:  if (e) return e;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "114: GF_Err gf_isom_audio_sample_entry_read(GF_AudioSampleEntryBox *ptr, GF_BitStream *bs)",
          "115: {",
          "116:  if (ptr->size<28) return GF_ISOM_INVALID_FILE;",
          "120:  ptr->version = gf_bs_read_u16(bs);",
          "121:  ptr->revision = gf_bs_read_u16(bs);",
          "122:  ptr->vendor = gf_bs_read_u32(bs);",
          "",
          "[Removed Lines]",
          "118:  gf_bs_read_data(bs, ptr->reserved, 6);",
          "119:  ptr->dataReferenceIndex = gf_bs_read_u16(bs);",
          "",
          "[Added Lines]",
          "130:  GF_Err e;",
          "133:  e = gf_isom_base_sample_entry_read((GF_SampleEntryBox *)ptr, bs);",
          "134:  if (e) return e;",
          "",
          "---------------"
        ],
        "src/isomedia/track.c||src/isomedia/track.c": [
          "File: src/isomedia/track.c -> src/isomedia/track.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "644:  if (gf_isom_is_cenc_media(trak->moov->mov, gf_isom_get_tracknum_from_id(trak->moov, trak->Header->trackID), 1)",
          "647:   GF_SampleEncryptionBox *senc = NULL;",
          "648:   GF_List *sais = NULL;",
          "651:    for (i = 0; i < gf_list_count(trak->Media->information->sampleTable->other_boxes); i++) {",
          "652:     GF_Box *a = (GF_Box *)gf_list_get(trak->Media->information->sampleTable->other_boxes, i);",
          "653:     if ((a->type ==GF_ISOM_BOX_TYPE_UUID) && (((GF_UUIDBox *)a)->internal_4cc == GF_ISOM_BOX_UUID_PSEC)) {",
          "654:      senc = (GF_SampleEncryptionBox *)a;",
          "655:      break;",
          "656:     }",
          "670:      senc = (GF_SampleEncryptionBox *)a;",
          "671:      break;",
          "672:     }",
          "673:    }",
          "674:    if (!senc) {",
          "676:     if (!trak->Media->information->sampleTable->other_boxes) trak->Media->information->sampleTable->other_boxes = gf_list_new();",
          "677:     gf_list_add(trak->Media->information->sampleTable->other_boxes, senc);",
          "678:    }",
          "680:    sais = traf->sample_encryption->samp_aux_info;",
          "",
          "[Removed Lines]",
          "645:   || traf->piff_sample_encryption || traf->sample_encryption) {",
          "650:   if (traf->piff_sample_encryption) {",
          "657:    }",
          "658:    if (!senc) {",
          "659:     senc = (GF_SampleEncryptionBox *)gf_isom_create_piff_psec_box(1, 0x2, 0, 0, NULL);",
          "660:     if (!trak->Media->information->sampleTable->other_boxes) trak->Media->information->sampleTable->other_boxes = gf_list_new();",
          "661:     gf_list_add(trak->Media->information->sampleTable->other_boxes, senc);",
          "662:    }",
          "664:    sais = traf->piff_sample_encryption->samp_aux_info;",
          "665:   }",
          "666:   else if (traf->sample_encryption) {",
          "667:    for (i = 0; i < gf_list_count(trak->Media->information->sampleTable->other_boxes); i++) {",
          "668:     GF_Box *a = (GF_Box *)gf_list_get(trak->Media->information->sampleTable->other_boxes, i);",
          "669:     if (a->type ==GF_ISOM_BOX_TYPE_SENC) {",
          "675:     senc = gf_isom_create_samp_enc_box(1, 0x2);",
          "",
          "[Added Lines]",
          "645:   || traf->sample_encryption) {",
          "650:   if (traf->sample_encryption) {",
          "653:     if (a->type != traf->sample_encryption->type) continue;",
          "659:     else if (a->type ==GF_ISOM_BOX_TYPE_SENC) {",
          "665:     if (traf->sample_encryption->is_piff) {",
          "666:      senc = (GF_SampleEncryptionBox *)gf_isom_create_piff_psec_box(1, 0x2, 0, 0, NULL);",
          "667:     } else {",
          "668:      senc = gf_isom_create_samp_enc_box(1, 0x2);",
          "669:     }",
          "673:     assert(trak->Media->information->sampleTable->senc == NULL);",
          "676:     trak->Media->information->sampleTable->senc = senc;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "708:    if (saiz && saio) {",
          "709:     for (i = 0; i < saiz->sample_count; i++) {",
          "710:      GF_CENCSampleAuxInfo *sai;",
          "713:      u64 cur_position;",
          "714:      if (nb_saio != 1)",
          "715:       offset = (saio->version ? saio->offsets_large[i] : saio->offsets[i]) + moof_offset;",
          "",
          "[Removed Lines]",
          "711:      char *buffer;",
          "712:      GF_BitStream *bs;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "718:      cur_position = gf_bs_get_position(trak->moov->mov->movieFileMap->bs);",
          "719:      gf_bs_seek(trak->moov->mov->movieFileMap->bs, offset);",
          "724:      GF_SAFEALLOC(sai, GF_CENCSampleAuxInfo);",
          "727:      if (size > 16) {",
          "729:       sai->subsamples = (GF_CENCSubSampleEntry *)gf_malloc(sizeof(GF_CENCSubSampleEntry)*sai->subsample_count);",
          "730:       for (j = 0; j < sai->subsample_count; j++) {",
          "733:       }",
          "735:      }",
          "736:      gf_list_add(senc->samp_aux_info, sai);",
          "737:      if (sai->subsample_count) senc->flags = 0x00000002;",
          "738:      gf_isom_cenc_merge_saiz_saio(senc, trak->Media->information->sampleTable, offset, size);",
          "",
          "[Removed Lines]",
          "720:      buffer = (char *)gf_malloc(size);",
          "721:      gf_bs_read_data(trak->moov->mov->movieFileMap->bs, buffer, size);",
          "722:      gf_bs_seek(trak->moov->mov->movieFileMap->bs, cur_position);",
          "725:      bs = gf_bs_new(buffer, size, GF_BITSTREAM_READ);",
          "726:      gf_bs_read_data(bs, (char *)sai->IV, 16);",
          "728:       sai->subsample_count = gf_bs_read_u16(bs);",
          "731:        sai->subsamples[j].bytes_clear_data = gf_bs_read_u16(bs);",
          "732:        sai->subsamples[j].bytes_encrypted_data = gf_bs_read_u32(bs);",
          "734:       gf_bs_del(bs);",
          "",
          "[Added Lines]",
          "721:      gf_bs_read_data(trak->moov->mov->movieFileMap->bs, (char *)sai->IV, 16);",
          "723:       sai->subsample_count = gf_bs_read_u16(trak->moov->mov->movieFileMap->bs);",
          "726:        sai->subsamples[j].bytes_clear_data = gf_bs_read_u16(trak->moov->mov->movieFileMap->bs);",
          "727:        sai->subsamples[j].bytes_encrypted_data = gf_bs_read_u32(trak->moov->mov->movieFileMap->bs);",
          "731:      gf_bs_seek(trak->moov->mov->movieFileMap->bs, cur_position);",
          "",
          "---------------"
        ],
        "src/media_tools/webvtt.c||src/media_tools/webvtt.c": [
          "File: src/media_tools/webvtt.c -> src/media_tools/webvtt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "181: GF_Err wvtt_Read(GF_Box *s, GF_BitStream *bs)",
          "182: {",
          "183:  GF_WebVTTSampleEntryBox *wvtt = (GF_WebVTTSampleEntryBox *)s;",
          "186:  wvtt->size -= 8;",
          "187:  return gf_isom_box_array_read(s, bs, wvtt_Add);",
          "188: }",
          "",
          "[Removed Lines]",
          "184:  gf_bs_read_data(bs, wvtt->reserved, 6);",
          "185:  wvtt->dataReferenceIndex = gf_bs_read_u16(bs);",
          "",
          "[Added Lines]",
          "183:  GF_Err e;",
          "185:  e = gf_isom_base_sample_entry_read((GF_SampleEntryBox *)wvtt, bs);",
          "186:  if (e) return e;",
          "",
          "---------------"
        ]
      }
    }
  ]
}