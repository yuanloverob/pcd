{
  "cve_id": "CVE-2015-9252",
  "cve_desc": "An issue was discovered in QPDF before 7.0.0. Endless recursion causes stack exhaustion in QPDFTokenizer::resolveLiteral() in QPDFTokenizer.cc, related to the QPDF::resolve function in QPDF.cc.",
  "repo": "qpdf/qpdf",
  "patch_hash": "701b518d5c56a1449825a3a37a716c58e05e1c3e",
  "patch_info": {
    "commit_hash": "701b518d5c56a1449825a3a37a716c58e05e1c3e",
    "repo": "qpdf/qpdf",
    "commit_url": "https://github.com/qpdf/qpdf/commit/701b518d5c56a1449825a3a37a716c58e05e1c3e",
    "files": [
      "ChangeLog",
      "include/qpdf/QPDF.hh",
      "libqpdf/QPDF.cc",
      "qpdf/qpdf.testcov",
      "qpdf/qtest/qpdf.test",
      "qpdf/qtest/qpdf/issue-51.out",
      "qpdf/qtest/qpdf/issue-51.pdf"
    ],
    "message": "Detect recursion loops resolving objects (fixes #51)\n\nDuring parsing of an object, sometimes parts of the object have to be\nresolved. An example is stream lengths. If such an object directly or\nindirectly points to the object being parsed, it can cause an infinite\nloop. Guard against all cases of re-entrant resolution of objects.",
    "before_after_code_files": [
      "include/qpdf/QPDF.hh||include/qpdf/QPDF.hh",
      "libqpdf/QPDF.cc||libqpdf/QPDF.cc",
      "qpdf/qpdf.testcov||qpdf/qpdf.testcov",
      "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
    ]
  },
  "patch_diff": {
    "include/qpdf/QPDF.hh||include/qpdf/QPDF.hh": [
      "File: include/qpdf/QPDF.hh -> include/qpdf/QPDF.hh",
      "--- Hunk 1 ---",
      "[Context before]",
      "603:         int gen;",
      "604:     };",
      "606:     void parse(char const* password);",
      "607:     void warn(QPDFExc const& e);",
      "608:     void setTrailer(QPDFObjectHandle obj);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "606:     class ResolveRecorder",
      "607:     {",
      "608:       public:",
      "609:         ResolveRecorder(QPDF* qpdf, QPDFObjGen const& og) :",
      "610:             qpdf(qpdf),",
      "611:             og(og)",
      "612:         {",
      "613:             qpdf->resolving.insert(og);",
      "614:         }",
      "615:         virtual ~ResolveRecorder()",
      "616:         {",
      "617:             this->qpdf->resolving.erase(og);",
      "618:         }",
      "619:       private:",
      "620:         QPDF* qpdf;",
      "621:         QPDFObjGen og;",
      "622:     };",
      "623:     friend class ResolveRecorder;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1065:     std::map<QPDFObjGen, QPDFXRefEntry> xref_table;",
      "1066:     std::set<int> deleted_objects;",
      "1067:     std::map<QPDFObjGen, ObjCache> obj_cache;",
      "1068:     QPDFObjectHandle trailer;",
      "1069:     std::vector<QPDFObjectHandle> all_pages;",
      "1070:     std::map<QPDFObjGen, int> pageobj_to_pages_pos;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1087:     std::set<QPDFObjGen> resolving;",
      "",
      "---------------"
    ],
    "libqpdf/QPDF.cc||libqpdf/QPDF.cc": [
      "File: libqpdf/QPDF.cc -> libqpdf/QPDF.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "1473:     QPDFObjGen og(objid, generation);",
      "1474:     if (! this->obj_cache.count(og))",
      "1475:     {",
      "1476:  if (! this->xref_table.count(og))",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1474:     if (this->resolving.count(og))",
      "1475:     {",
      "1479:  QTC::TC(\"qpdf\", \"QPDF recursion loop in resolve\");",
      "1480:  warn(QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),",
      "1481:        \"\", this->file->getLastOffset(),",
      "1482:        \"loop detected resolving object \" +",
      "1483:        QUtil::int_to_string(objid) + \" \" +",
      "1484:        QUtil::int_to_string(generation)));",
      "1485:         return new QPDF_Null;",
      "1486:     }",
      "1487:     ResolveRecorder rr(this, og);",
      "",
      "---------------"
    ],
    "qpdf/qpdf.testcov||qpdf/qpdf.testcov": [
      "File: qpdf/qpdf.testcov -> qpdf/qpdf.testcov",
      "--- Hunk 1 ---",
      "[Context before]",
      "276: QPDFObjectHandle indirect with 0 objid 0",
      "277: QPDF object id 0 0",
      "278: QPDF caught recursive xref reconstruction 0",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "279: QPDF recursion loop in resolve 0",
      "",
      "---------------"
    ],
    "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test": [
      "File: qpdf/qtest/qpdf.test -> qpdf/qtest/qpdf.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "206: show_ntests();",
      "207: # ----------",
      "208: $td->notify(\"--- Miscellaneous Tests ---\");",
      "211: $td->runtest(\"qpdf version\",",
      "212:       {$td->COMMAND => \"qpdf --version\"},",
      "",
      "[Removed Lines]",
      "209: $n_tests += 81;",
      "",
      "[Added Lines]",
      "209: $n_tests += 82;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "221: # Files to reproduce various bugs",
      "222: foreach my $d (",
      "223:     [\"99\", \"object 0\"],",
      "224:     [\"99b\", \"object 0\"],",
      "225:     [\"100\",\"xref reconstruction loop\"],",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "223:     [\"51\", \"resolve loop\"],",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5993c3e83c6f83b36045c75a03ffb1da3d1d283c",
      "candidate_info": {
        "commit_hash": "5993c3e83c6f83b36045c75a03ffb1da3d1d283c",
        "repo": "qpdf/qpdf",
        "commit_url": "https://github.com/qpdf/qpdf/commit/5993c3e83c6f83b36045c75a03ffb1da3d1d283c",
        "files": [
          "ChangeLog",
          "include/qpdf/QUtil.hh",
          "libqpdf/QUtil.cc",
          "libtests/qtest/qutil/other-file",
          "libtests/qtest/qutil/qutil.out",
          "libtests/qutil.cc",
          "qpdf/qpdf.cc",
          "qpdf/qpdf.testcov",
          "qpdf/qtest/qpdf.test"
        ],
        "message": "Detect input file = output file (fixes #29)",
        "before_after_code_files": [
          "include/qpdf/QUtil.hh||include/qpdf/QUtil.hh",
          "libqpdf/QUtil.cc||libqpdf/QUtil.cc",
          "libtests/qutil.cc||libtests/qutil.cc",
          "qpdf/qpdf.cc||qpdf/qpdf.cc",
          "qpdf/qpdf.testcov||qpdf/qpdf.testcov",
          "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "qpdf/qpdf.testcov||qpdf/qpdf.testcov",
            "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
          ],
          "candidate": [
            "qpdf/qpdf.testcov||qpdf/qpdf.testcov",
            "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
          ]
        }
      },
      "candidate_diff": {
        "include/qpdf/QUtil.hh||include/qpdf/QUtil.hh": [
          "File: include/qpdf/QUtil.hh -> include/qpdf/QUtil.hh",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:     QPDF_DLL",
          "75:     qpdf_offset_t tell(FILE* stream);",
          "77:     QPDF_DLL",
          "78:     char* copy_string(std::string const&);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:     QPDF_DLL",
          "78:     bool same_file(char const* name1, char const* name2);",
          "",
          "---------------"
        ],
        "libqpdf/QUtil.cc||libqpdf/QUtil.cc": [
          "File: libqpdf/QUtil.cc -> libqpdf/QUtil.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include <io.h>",
          "25: #else",
          "26: #include <unistd.h>",
          "27: #endif",
          "29: std::string",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #include <sys/stat.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "188: #endif",
          "189: }",
          "191: char*",
          "192: QUtil::copy_string(std::string const& str)",
          "193: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "192: bool",
          "193: QUtil::same_file(char const* name1, char const* name2)",
          "194: {",
          "195:     if ((name1 == 0) || (strlen(name1) == 0) ||",
          "196:         (name2 == 0) || (strlen(name2) == 0))",
          "197:     {",
          "198:         return false;",
          "199:     }",
          "200: #ifdef _WIN32",
          "201:     HANDLE fh1 = CreateFile(name1, GENERIC_READ, FILE_SHARE_READ,",
          "202:                             NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);",
          "203:     HANDLE fh2 = CreateFile(name2, GENERIC_READ, FILE_SHARE_READ,",
          "204:                             NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);",
          "205:     BY_HANDLE_FILE_INFORMATION fi1;",
          "206:     BY_HANDLE_FILE_INFORMATION fi2;",
          "207:     bool same = false;",
          "208:     if ((fh1 != INVALID_HANDLE_VALUE) &&",
          "209:         (fh2 != INVALID_HANDLE_VALUE) &&",
          "210:         GetFileInformationByHandle(fh1, &fi1) &&",
          "211:         GetFileInformationByHandle(fh2, &fi2) &&",
          "212:         (fi1.dwVolumeSerialNumber == fi2.dwVolumeSerialNumber) &&",
          "213:         (fi1.nFileIndexLow == fi2.nFileIndexLow) &&",
          "214:         (fi1.nFileIndexHigh == fi2.nFileIndexHigh))",
          "215:     {",
          "216:         same = true;",
          "217:     }",
          "218:     if (fh1 != INVALID_HANDLE_VALUE)",
          "219:     {",
          "220:         CloseHandle(fh1);",
          "221:     }",
          "222:     if (fh2 != INVALID_HANDLE_VALUE)",
          "223:     {",
          "224:         CloseHandle(fh2);",
          "225:     }",
          "226:     return same;",
          "227: #else",
          "228:     struct stat st1;",
          "229:     struct stat st2;",
          "230:     if ((stat(name1, &st1) == 0) &&",
          "231:         (stat(name2, &st2) == 0) &&",
          "232:         (st1.st_ino == st2.st_ino) &&",
          "233:         (st1.st_dev == st2.st_dev))",
          "234:     {",
          "235:         return true;",
          "236:     }",
          "237: #endif",
          "238:     return false;",
          "239: }",
          "",
          "---------------"
        ],
        "libtests/qutil.cc||libtests/qutil.cc": [
          "File: libtests/qutil.cc -> libtests/qutil.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "140:     print_whoami(\"a\\\\b\\\\c\\\\quack4.exe\");",
          "141: }",
          "143: int main(int argc, char* argv[])",
          "144: {",
          "145:     try",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143: void assert_same_file(char const* file1, char const* file2, bool expected)",
          "144: {",
          "145:     bool actual = QUtil::same_file(file1, file2);",
          "146:     std::cout << \"file1: -\" << (file1 ? file1 : \"(null)\") << \"-, file2: -\"",
          "147:               << (file2 ? file2 : \"(null)\") << \"-; same: \"",
          "148:               << actual << \": \" << ((actual == expected) ? \"PASS\" : \"FAIL\")",
          "149:               << std::endl;",
          "150: }",
          "152: void same_file_test()",
          "153: {",
          "154:     try",
          "155:     {",
          "156:         fclose(QUtil::safe_fopen(\"qutil.out\", \"r\"));",
          "157:         fclose(QUtil::safe_fopen(\"other-file\", \"r\"));",
          "158:     }",
          "159:     catch (std::exception)",
          "160:     {",
          "161:         std::cout << \"same_file_test expects to have qutil.out and other-file\"",
          "162:             \" exist in the current directory\\n\";",
          "163:         return;",
          "164:     }",
          "165:     assert_same_file(\"qutil.out\", \"./qutil.out\", true);",
          "166:     assert_same_file(\"qutil.out\", \"qutil.out\", true);",
          "167:     assert_same_file(\"qutil.out\", \"other-file\", false);",
          "168:     assert_same_file(\"qutil.out\", \"\", false);",
          "169:     assert_same_file(\"qutil.out\", 0, false);",
          "170:     assert_same_file(\"\", \"qutil.out\", false);",
          "171: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155:  to_utf8_test();",
          "156:  std::cout << \"----\" << std::endl;",
          "157:  get_whoami_test();",
          "158:     }",
          "159:     catch (std::exception& e)",
          "160:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "188:  std::cout << \"----\" << std::endl;",
          "189:  same_file_test();",
          "",
          "---------------"
        ],
        "qpdf/qpdf.cc||qpdf/qpdf.cc": [
          "File: qpdf/qpdf.cc -> qpdf/qpdf.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1361:  usage(\"no output file may be given for this option\");",
          "1362:     }",
          "1364:     try",
          "1365:     {",
          "1366:  QPDF pdf;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1364:     if (QUtil::same_file(infilename, outfilename))",
          "1365:     {",
          "1366:         QTC::TC(\"qpdf\", \"qpdf same file error\");",
          "1367:         usage(\"input file and output file are the same; this would cause input file to be lost\");",
          "1368:     }",
          "",
          "---------------"
        ],
        "qpdf/qpdf.testcov||qpdf/qpdf.testcov": [
          "File: qpdf/qpdf.testcov -> qpdf/qpdf.testcov",
          "--- Hunk 1 ---",
          "[Context before]",
          "284: QPDFObjectHandle non-stream in parsecontent 0",
          "285: QPDFObjectHandle errors in parsecontent 0",
          "286: QPDF stream with non-space 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "287: qpdf same file error 0",
          "",
          "---------------"
        ],
        "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test": [
          "File: qpdf/qtest/qpdf.test -> qpdf/qtest/qpdf.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "206: show_ntests();",
          "207: # ----------",
          "208: $td->notify(\"--- Miscellaneous Tests ---\");",
          "211: $td->runtest(\"qpdf version\",",
          "212:       {$td->COMMAND => \"qpdf --version\"},",
          "",
          "[Removed Lines]",
          "209: $n_tests += 93;",
          "",
          "[Added Lines]",
          "209: $n_tests += 94;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "641:               $td->EXIT_STATUS => 3},",
          "642:              $td->NORMALIZE_NEWLINES);",
          "645: show_ntests();",
          "646: # ----------",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "644: $td->runtest(\"don't overwrite self\",",
          "645:              {$td->COMMAND => \"qpdf a.pdf a.pdf\"},",
          "646:              {$td->REGEXP => \"input file and output file are the same.*\",",
          "647:               $td->EXIT_STATUS => 2});",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f37d399d825fc70155a3634c26463a24a2e17035",
      "candidate_info": {
        "commit_hash": "f37d399d825fc70155a3634c26463a24a2e17035",
        "repo": "qpdf/qpdf",
        "commit_url": "https://github.com/qpdf/qpdf/commit/f37d399d825fc70155a3634c26463a24a2e17035",
        "files": [
          "ChangeLog",
          "include/qpdf/QPDFWriter.hh",
          "libqpdf/QPDFWriter.cc",
          "qpdf/qpdf.cc",
          "qpdf/qtest/qpdf.test",
          "qpdf/qtest/qpdf/newline-before-endstream.pdf"
        ],
        "message": "Add newline-before-endstream option (fixes #103)",
        "before_after_code_files": [
          "include/qpdf/QPDFWriter.hh||include/qpdf/QPDFWriter.hh",
          "libqpdf/QPDFWriter.cc||libqpdf/QPDFWriter.cc",
          "qpdf/qpdf.cc||qpdf/qpdf.cc",
          "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
          ],
          "candidate": [
            "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
          ]
        }
      },
      "candidate_diff": {
        "include/qpdf/QPDFWriter.hh||include/qpdf/QPDFWriter.hh": [
          "File: include/qpdf/QPDFWriter.hh -> include/qpdf/QPDFWriter.hh",
          "--- Hunk 1 ---",
          "[Context before]",
          "161:     QPDF_DLL",
          "162:     void setPreserveUnreferencedObjects(bool);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "166:     QPDF_DLL",
          "167:     void setNewlineBeforeEndstream(bool);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "434:     bool qdf_mode;",
          "435:     bool precheck_streams;",
          "436:     bool preserve_unreferenced_objects;",
          "437:     bool static_id;",
          "438:     bool suppress_original_object_ids;",
          "439:     bool direct_stream_lengths;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "442:     bool newline_before_endstream;",
          "",
          "---------------"
        ],
        "libqpdf/QPDFWriter.cc||libqpdf/QPDFWriter.cc": [
          "File: libqpdf/QPDFWriter.cc -> libqpdf/QPDFWriter.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:     qdf_mode = false;",
          "60:     precheck_streams = false;",
          "61:     preserve_unreferenced_objects = false;",
          "62:     static_id = false;",
          "63:     suppress_original_object_ids = false;",
          "64:     direct_stream_lengths = true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:     newline_before_endstream = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "190:     this->preserve_unreferenced_objects = val;",
          "191: }",
          "193: void",
          "194: QPDFWriter::setMinimumPDFVersion(std::string const& version)",
          "195: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "194: void",
          "195: QPDFWriter::setNewlineBeforeEndstream(bool val)",
          "196: {",
          "197:     this->newline_before_endstream = val;",
          "198: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1580:  char last_char = this->pipeline->getLastChar();",
          "1581:  popPipelineStack();",
          "1584:  {",
          "1585:      if (last_char != '\\n')",
          "1586:      {",
          "",
          "[Removed Lines]",
          "1583:  if (this->qdf_mode)",
          "",
          "[Added Lines]",
          "1590:  if (this->qdf_mode || this->newline_before_endstream)",
          "",
          "---------------"
        ],
        "qpdf/qpdf.cc||qpdf/qpdf.cc": [
          "File: qpdf/qpdf.cc -> qpdf/qpdf.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "204: --ignore-xref-streams     tells qpdf to ignore any cross-reference streams\\n\\",
          "205: --precheck-streams        precheck ability to decode streams\\n\\",
          "206: --preserve-unreferenced   preserve unreferenced objects\\n\\",
          "207: --qdf                     turns on \\\"QDF mode\\\" (below)\\n\\",
          "208: --min-version=version     sets the minimum PDF version of the output file\\n\\",
          "209: --force-version=version   forces this to be the PDF version of the output file\\n\\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207: --newline-before-endstream  always put a newline before endstream\\n\\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1032:     bool qdf_mode = false;",
          "1033:     bool precheck_streams = false;",
          "1034:     bool preserve_unreferenced_objects = false;",
          "1035:     std::string min_version;",
          "1036:     std::string force_version;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1036:     bool newline_before_endstream = false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1225:      {",
          "1226:   preserve_unreferenced_objects = true;",
          "1227:      }",
          "1228:      else if (strcmp(arg, \"min-version\") == 0)",
          "1229:      {",
          "1230:   if (parameter == 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1230:      else if (strcmp(arg, \"newline-before-endstream\") == 0)",
          "1231:      {",
          "1232:   newline_before_endstream = true;",
          "1233:      }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1724:             {",
          "1725:                 w.setPreserveUnreferencedObjects(true);",
          "1726:             }",
          "1727:      if (normalize_set)",
          "1728:      {",
          "1729:   w.setContentNormalization(normalize);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1733:             if (newline_before_endstream)",
          "1734:             {",
          "1735:                 w.setNewlineBeforeEndstream(true);",
          "1736:             }",
          "",
          "---------------"
        ],
        "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test": [
          "File: qpdf/qtest/qpdf.test -> qpdf/qtest/qpdf.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "206: show_ntests();",
          "207: # ----------",
          "208: $td->notify(\"--- Miscellaneous Tests ---\");",
          "211: $td->runtest(\"qpdf version\",",
          "212:       {$td->COMMAND => \"qpdf --version\"},",
          "",
          "[Removed Lines]",
          "209: $n_tests += 89;",
          "",
          "[Added Lines]",
          "209: $n_tests += 91;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "618:               $td->EXIT_STATUS => 3},",
          "619:              $td->NORMALIZE_NEWLINES);",
          "622: show_ntests();",
          "623: # ----------",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "621: $td->runtest(\"newline before endstream\",",
          "622:              {$td->COMMAND =>",
          "623:                   \"qpdf --static-id --newline-before-endstream\" .",
          "624:                   \" minimal.pdf a.pdf\"},",
          "625:              {$td->STRING => \"\", $td->EXIT_STATUS => 0},",
          "626:              $td->NORMALIZE_NEWLINES);",
          "627: $td->runtest(\"check output\",",
          "628:              {$td->FILE => \"a.pdf\"},",
          "629:              {$td->FILE => \"newline-before-endstream.pdf\"});",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ac3c81a8edcb44e2669485630d6718c96a6ad6e9",
      "candidate_info": {
        "commit_hash": "ac3c81a8edcb44e2669485630d6718c96a6ad6e9",
        "repo": "qpdf/qpdf",
        "commit_url": "https://github.com/qpdf/qpdf/commit/ac3c81a8edcb44e2669485630d6718c96a6ad6e9",
        "files": [
          "ChangeLog",
          "qpdf/qtest/qpdf.test",
          "qpdf/qtest/qpdf/issue-117.out",
          "qpdf/qtest/qpdf/issue-117.pdf",
          "qpdf/qtest/qpdf/issue-118.out",
          "qpdf/qtest/qpdf/issue-118.pdf",
          "qpdf/qtest/qpdf/issue-119.out",
          "qpdf/qtest/qpdf/issue-119.pdf",
          "qpdf/qtest/qpdf/issue-120.out",
          "qpdf/qtest/qpdf/issue-120.pdf"
        ],
        "message": "Include tests for other infinite loop bugs\n\nfixes #117\nfixes #118\nfixes #119\nfixes #120\n\nSeveral other infinite loop bugs were fixed by previous changes.\nInclude their test files in the test suite.",
        "before_after_code_files": [
          "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
          ],
          "candidate": [
            "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
          ]
        }
      },
      "candidate_diff": {
        "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test": [
          "File: qpdf/qtest/qpdf.test -> qpdf/qtest/qpdf.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "206: show_ntests();",
          "207: # ----------",
          "208: $td->notify(\"--- Miscellaneous Tests ---\");",
          "211: $td->runtest(\"qpdf version\",",
          "212:       {$td->COMMAND => \"qpdf --version\"},",
          "",
          "[Removed Lines]",
          "209: $n_tests += 82;",
          "",
          "[Added Lines]",
          "209: $n_tests += 86;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "225:     [\"99b\", \"object 0\"],",
          "226:     [\"100\",\"xref reconstruction loop\"],",
          "227:     [\"101\", \"resolve for exception text\"],",
          "228:     )",
          "229: {",
          "230:     my ($n, $description) = @$d;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "228:     [\"117\", \"other infinite loop\"],",
          "229:     [\"118\", \"other infinite loop\"],",
          "230:     [\"119\", \"other infinite loop\"],",
          "231:     [\"120\", \"other infinite loop\"],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b389268f16fcd571bbc57ef848caba25490a1b86",
      "candidate_info": {
        "commit_hash": "b389268f16fcd571bbc57ef848caba25490a1b86",
        "repo": "qpdf/qpdf",
        "commit_url": "https://github.com/qpdf/qpdf/commit/b389268f16fcd571bbc57ef848caba25490a1b86",
        "files": [
          "ChangeLog",
          "include/qpdf/QPDFObjectHandle.hh",
          "libqpdf/QPDFObjectHandle.cc",
          "qpdf/qpdf.testcov",
          "qpdf/qtest/qpdf.test",
          "qpdf/qtest/qpdf/content-stream-errors.out",
          "qpdf/qtest/qpdf/eof-in-inline-image.out",
          "qpdf/qtest/qpdf/split-content-stream-errors.out",
          "qpdf/qtest/qpdf/split-content-stream-errors.pdf",
          "qpdf/qtest/qpdf/split-content-stream.out",
          "qpdf/qtest/qpdf/split-content-stream.pdf"
        ],
        "message": "Better handle split content streams (fixes #73)\n\nWhen parsing content streams, allow content to be split arbitrarily\nacross stream boundaries.",
        "before_after_code_files": [
          "include/qpdf/QPDFObjectHandle.hh||include/qpdf/QPDFObjectHandle.hh",
          "libqpdf/QPDFObjectHandle.cc||libqpdf/QPDFObjectHandle.cc",
          "qpdf/qpdf.testcov||qpdf/qpdf.testcov",
          "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "qpdf/qpdf.testcov||qpdf/qpdf.testcov",
            "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
          ],
          "candidate": [
            "qpdf/qpdf.testcov||qpdf/qpdf.testcov",
            "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
          ]
        }
      },
      "candidate_diff": {
        "include/qpdf/QPDFObjectHandle.hh||include/qpdf/QPDFObjectHandle.hh": [
          "File: include/qpdf/QPDFObjectHandle.hh -> include/qpdf/QPDFObjectHandle.hh",
          "--- Hunk 1 ---",
          "[Context before]",
          "623:         bool in_array, bool in_dictionary,",
          "624:         bool content_stream);",
          "625:     static void parseContentStream_internal(",
          "629:     static void warn(QPDF*, QPDFExc const&);",
          "",
          "[Removed Lines]",
          "626:         QPDFObjectHandle stream, ParserCallbacks* callbacks);",
          "",
          "[Added Lines]",
          "626:         PointerHolder<Buffer> stream_data,",
          "627:         std::string const& description,",
          "628:         ParserCallbacks* callbacks);",
          "",
          "---------------"
        ],
        "libqpdf/QPDFObjectHandle.cc||libqpdf/QPDFObjectHandle.cc": [
          "File: libqpdf/QPDFObjectHandle.cc -> libqpdf/QPDFObjectHandle.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: #include <qpdf/QPDF_Dictionary.hh>",
          "14: #include <qpdf/QPDF_Stream.hh>",
          "15: #include <qpdf/QPDF_Reserved.hh>",
          "16: #include <qpdf/BufferInputSource.hh>",
          "17: #include <qpdf/QPDFExc.hh>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: #include <qpdf/Pl_Buffer.hh>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "739:     {",
          "740:         streams.push_back(stream_or_array);",
          "741:     }",
          "742:     for (std::vector<QPDFObjectHandle>::iterator iter = streams.begin();",
          "743:          iter != streams.end(); ++iter)",
          "744:     {",
          "745:         QPDFObjectHandle stream = *iter;",
          "746:         if (! stream.isStream())",
          "747:         {",
          "750:         }",
          "752:         {",
          "758:         }",
          "759:     }",
          "760:     callbacks->handleEOF();",
          "761: }",
          "763: void",
          "765:                                               ParserCallbacks* callbacks)",
          "766: {",
          "769:     size_t length = stream_data->getSize();",
          "773:     PointerHolder<InputSource> input =",
          "774:         new BufferInputSource(description, stream_data.getPointer());",
          "775:     QPDFTokenizer tokenizer;",
          "",
          "[Removed Lines]",
          "748:             throw std::logic_error(",
          "749:                 \"QPDFObjectHandle: parseContentStream called on non-stream\");",
          "751:         try",
          "753:             parseContentStream_internal(stream, callbacks);",
          "754:         }",
          "755:         catch (TerminateParsing&)",
          "756:         {",
          "757:             return;",
          "764: QPDFObjectHandle::parseContentStream_internal(QPDFObjectHandle stream,",
          "767:     stream.assertStream();",
          "768:     PointerHolder<Buffer> stream_data = stream.getStreamData();",
          "770:     std::string description = \"content stream object \" +",
          "771:         QUtil::int_to_string(stream.getObjectID()) + \" \" +",
          "772:         QUtil::int_to_string(stream.getGeneration());",
          "",
          "[Added Lines]",
          "743:     Pl_Buffer buf(\"concatenated stream data buffer\");",
          "744:     std::string all_description = \"content stream objects\";",
          "745:     bool first = true;",
          "752:             QTC::TC(\"qpdf\", \"QPDFObjectHandle non-stream in parsecontent\");",
          "753:             warn(stream.getOwningQPDF(),",
          "754:                  QPDFExc(qpdf_e_damaged_pdf, \"content stream\",",
          "755:                          \"\", 0,",
          "756:                          \"ignoring non-stream while parsing content streams\"));",
          "758:         else",
          "760:             std::string og = QUtil::int_to_string(stream.getObjectID()) + \" \" +",
          "761:                 QUtil::int_to_string(stream.getGeneration());",
          "762:             std::string description = \"content stream object \" + og;",
          "763:             if (first)",
          "764:             {",
          "765:                 first = false;",
          "766:             }",
          "767:             else",
          "768:             {",
          "769:                 all_description += \",\";",
          "770:             }",
          "771:             all_description += \" \" + og;",
          "772:             if (! stream.pipeStreamData(&buf, true, false, false, false))",
          "773:             {",
          "774:                 QTC::TC(\"qpdf\", \"QPDFObjectHandle errors in parsecontent\");",
          "775:                 warn(stream.getOwningQPDF(),",
          "776:                      QPDFExc(qpdf_e_damaged_pdf, \"content stream\",",
          "777:                              description, 0,",
          "778:                              \"errors while decoding content stream\"));",
          "779:             }",
          "782:     PointerHolder<Buffer> stream_data = buf.getBuffer();",
          "783:     try",
          "784:     {",
          "785:         parseContentStream_internal(stream_data, all_description, callbacks);",
          "786:     }",
          "787:     catch (TerminateParsing&)",
          "788:     {",
          "789:         return;",
          "790:     }",
          "795: QPDFObjectHandle::parseContentStream_internal(PointerHolder<Buffer> stream_data,",
          "796:                                               std::string const& description,",
          "",
          "---------------"
        ],
        "qpdf/qpdf.testcov||qpdf/qpdf.testcov": [
          "File: qpdf/qpdf.testcov -> qpdf/qpdf.testcov",
          "--- Hunk 1 ---",
          "[Context before]",
          "281: QPDF resolve failure to null 0",
          "282: QPDFWriter precheck stream 0",
          "283: QPDFWriter preserve unreferenced standard 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "284: QPDFObjectHandle non-stream in parsecontent 0",
          "285: QPDFObjectHandle errors in parsecontent 0",
          "",
          "---------------"
        ],
        "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test": [
          "File: qpdf/qtest/qpdf.test -> qpdf/qtest/qpdf.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "206: show_ntests();",
          "207: # ----------",
          "208: $td->notify(\"--- Miscellaneous Tests ---\");",
          "211: $td->runtest(\"qpdf version\",",
          "212:       {$td->COMMAND => \"qpdf --version\"},",
          "",
          "[Removed Lines]",
          "209: $n_tests += 86;",
          "",
          "[Added Lines]",
          "209: $n_tests += 88;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "604:              {$td->FILE => \"no-space-in-xref.out\", $td->EXIT_STATUS => 0},",
          "605:              $td->NORMALIZE_NEWLINES);",
          "607: show_ntests();",
          "608: # ----------",
          "609: $td->notify(\"--- Numeric range parsing tests ---\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "607: # An array is split across multiple content streams starting object",
          "608: # 42. This was reported in github issue 73. The file is modified from",
          "609: # that example.",
          "610: $td->runtest(\"parse split content stream\",",
          "611:              {$td->COMMAND => \"qpdf --check split-content-stream.pdf\"},",
          "612:              {$td->FILE => \"split-content-stream.out\", $td->EXIT_STATUS => 0},",
          "613:              $td->NORMALIZE_NEWLINES);",
          "614: $td->runtest(\"split content stream errors\",",
          "615:              {$td->COMMAND => \"qpdf --check split-content-stream-errors.pdf\"},",
          "616:              {$td->FILE => \"split-content-stream-errors.out\",",
          "617:               $td->EXIT_STATUS => 3},",
          "618:              $td->NORMALIZE_NEWLINES);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d0e99f195a987c483bbb6c5449cf39bee34e08a1",
      "candidate_info": {
        "commit_hash": "d0e99f195a987c483bbb6c5449cf39bee34e08a1",
        "repo": "qpdf/qpdf",
        "commit_url": "https://github.com/qpdf/qpdf/commit/d0e99f195a987c483bbb6c5449cf39bee34e08a1",
        "files": [
          "ChangeLog",
          "TODO",
          "include/qpdf/QPDF.hh",
          "include/qpdf/QPDFObject.hh",
          "include/qpdf/QPDFObjectHandle.hh",
          "ispell-words",
          "libqpdf/QPDF.cc",
          "libqpdf/QPDFExc.cc",
          "libqpdf/QPDFObject.cc",
          "libqpdf/QPDFObjectHandle.cc",
          "libqpdf/QPDFTokenizer.cc",
          "libqpdf/QPDF_Array.cc",
          "libqpdf/QPDF_Dictionary.cc",
          "libqpdf/QPDF_Stream.cc",
          "libqpdf/QPDF_linearization.cc",
          "libqpdf/qpdf/QPDF_Array.hh",
          "libqpdf/qpdf/QPDF_Dictionary.hh",
          "libqpdf/qpdf/QPDF_Stream.hh",
          "qpdf/qpdf.testcov",
          "qpdf/qtest/qpdf.test",
          "qpdf/qtest/qpdf/bad16-recover.out",
          "qpdf/qtest/qpdf/bad16.out",
          "qpdf/qtest/qpdf/bad18-recover.out",
          "qpdf/qtest/qpdf/bad18.out",
          "qpdf/qtest/qpdf/bad19-recover.out",
          "qpdf/qtest/qpdf/bad19.out",
          "qpdf/qtest/qpdf/bad20-recover.out",
          "qpdf/qtest/qpdf/bad20.out",
          "qpdf/qtest/qpdf/bad21-recover.out",
          "qpdf/qtest/qpdf/bad21.out",
          "qpdf/qtest/qpdf/bad29-recover.out",
          "qpdf/qtest/qpdf/bad29.out",
          "qpdf/qtest/qpdf/issue-100.out",
          "qpdf/qtest/qpdf/issue-101.out",
          "qpdf/qtest/qpdf/issue-146.out",
          "qpdf/qtest/qpdf/issue-51.out",
          "qpdf/qtest/qpdf/linearization-bounds-1.out",
          "qpdf/qtest/qpdf/object-types-os.out",
          "qpdf/qtest/qpdf/object-types-os.pdf",
          "qpdf/qtest/qpdf/object-types.out",
          "qpdf/qtest/qpdf/object-types.pdf",
          "qpdf/test_driver.cc"
        ],
        "message": "More robust handling of type errors\n\nGive objects descriptions and context so it is possible to issue\nwarnings instead of fatal errors for attempts to access objects of the\nwrong type.",
        "before_after_code_files": [
          "include/qpdf/QPDF.hh||include/qpdf/QPDF.hh",
          "include/qpdf/QPDFObject.hh||include/qpdf/QPDFObject.hh",
          "include/qpdf/QPDFObjectHandle.hh||include/qpdf/QPDFObjectHandle.hh",
          "libqpdf/QPDF.cc||libqpdf/QPDF.cc",
          "libqpdf/QPDFExc.cc||libqpdf/QPDFExc.cc",
          "libqpdf/QPDFObject.cc||libqpdf/QPDFObject.cc",
          "libqpdf/QPDFObjectHandle.cc||libqpdf/QPDFObjectHandle.cc",
          "libqpdf/QPDFTokenizer.cc||libqpdf/QPDFTokenizer.cc",
          "libqpdf/QPDF_Array.cc||libqpdf/QPDF_Array.cc",
          "libqpdf/QPDF_Dictionary.cc||libqpdf/QPDF_Dictionary.cc",
          "libqpdf/QPDF_Stream.cc||libqpdf/QPDF_Stream.cc",
          "libqpdf/QPDF_linearization.cc||libqpdf/QPDF_linearization.cc",
          "libqpdf/qpdf/QPDF_Array.hh||libqpdf/qpdf/QPDF_Array.hh",
          "libqpdf/qpdf/QPDF_Dictionary.hh||libqpdf/qpdf/QPDF_Dictionary.hh",
          "libqpdf/qpdf/QPDF_Stream.hh||libqpdf/qpdf/QPDF_Stream.hh",
          "qpdf/qpdf.testcov||qpdf/qpdf.testcov",
          "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test",
          "qpdf/test_driver.cc||qpdf/test_driver.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/qpdf/QPDF.hh||include/qpdf/QPDF.hh",
            "libqpdf/QPDF.cc||libqpdf/QPDF.cc",
            "qpdf/qpdf.testcov||qpdf/qpdf.testcov",
            "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
          ],
          "candidate": [
            "include/qpdf/QPDF.hh||include/qpdf/QPDF.hh",
            "libqpdf/QPDF.cc||libqpdf/QPDF.cc",
            "qpdf/qpdf.testcov||qpdf/qpdf.testcov",
            "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
          ]
        }
      },
      "candidate_diff": {
        "include/qpdf/QPDF.hh||include/qpdf/QPDF.hh": [
          "File: include/qpdf/QPDF.hh -> include/qpdf/QPDF.hh",
          "--- Hunk 1 ---",
          "[Context before]",
          "703:  PointerHolder<InputSource> input, int objid, int generation,",
          "704:  qpdf_offset_t stream_offset);",
          "705:     QPDFTokenizer::Token readToken(PointerHolder<InputSource>,",
          "707:                                    size_t max_len = 0);",
          "709:     QPDFObjectHandle readObjectAtOffset(",
          "",
          "[Removed Lines]",
          "706:                                    bool allow_bad = false,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/qpdf/QPDFObject.hh||include/qpdf/QPDFObject.hh": [
          "File: include/qpdf/QPDFObject.hh -> include/qpdf/QPDFObject.hh",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #define __QPDFOBJECT_HH__",
          "25: #include <qpdf/DLL.h>",
          "27: #include <string>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: #include <qpdf/PointerHolder.hh>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: class QPDFObject",
          "33: {",
          "34:   public:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:     QPDFObject();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "84:     };",
          "85:     friend class ObjAccessor;",
          "87:   protected:",
          "88:     virtual void releaseResolved() {}",
          "89: };",
          "91: #endif // __QPDFOBJECT_HH__",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89:     virtual void setDescription(QPDF*, std::string const&);",
          "90:     bool getDescription(QPDF*&, std::string&);",
          "91:     bool hasDescription();",
          "96:   private:",
          "97:     QPDFObject(QPDFObject const&);",
          "98:     QPDFObject& operator=(QPDFObject const&);",
          "99:     class Members",
          "100:     {",
          "101:         friend class QPDFObject;",
          "102:       public:",
          "103:         ~Members();",
          "104:       private:",
          "105:         Members();",
          "106:         QPDF* owning_qpdf;",
          "107:         std::string object_description;",
          "108:     };",
          "109:     PointerHolder<Members> m;",
          "",
          "---------------"
        ],
        "include/qpdf/QPDFObjectHandle.hh||include/qpdf/QPDFObjectHandle.hh": [
          "File: include/qpdf/QPDFObjectHandle.hh -> include/qpdf/QPDFObjectHandle.hh",
          "--- Hunk 1 ---",
          "[Context before]",
          "398:     QPDF_DLL",
          "399:     static QPDFObjectHandle newReserved(QPDF* qpdf);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "410:     QPDF_DLL",
          "411:     void setObjectDescription(QPDF* owning_qpdf,",
          "412:                               std::string const& object_description);",
          "413:     QPDF_DLL",
          "414:     bool hasObjectDescription();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "500:     QPDF_DLL",
          "503:     QPDF_DLL",
          "504:     void removeKey(std::string const& key);",
          "",
          "[Removed Lines]",
          "501:     void replaceKey(std::string const& key, QPDFObjectHandle const&);",
          "",
          "[Added Lines]",
          "516:     void replaceKey(std::string const& key, QPDFObjectHandle);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "832:  QPDF* qpdf, int objid, int generation,",
          "833:  QPDFObjectHandle stream_dict, qpdf_offset_t offset, size_t length);",
          "836:     void dereference();",
          "837:     void makeDirectInternal(std::set<int>& visited);",
          "838:     void releaseResolved();",
          "839:     static QPDFObjectHandle parseInternal(",
          "840:         PointerHolder<InputSource> input,",
          "841:         std::string const& object_description,",
          "",
          "[Removed Lines]",
          "835:     void assertType(char const* type_name, bool istype) const;",
          "",
          "[Added Lines]",
          "853:     void typeWarning(char const* expected_type,",
          "854:                      std::string const& warning);",
          "855:     void objectWarning(std::string const& warning);",
          "856:     void assertType(char const* type_name, bool istype);",
          "860:     static void setObjectDescriptionFromInput(",
          "861:         QPDFObjectHandle, QPDF*, std::string const&,",
          "862:         PointerHolder<InputSource>, qpdf_offset_t);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "869:         bool initialized;",
          "872:         int objid;   // 0 for direct object",
          "873:         int generation;",
          "874:         PointerHolder<QPDFObject> obj;",
          "",
          "[Removed Lines]",
          "871:         QPDF* qpdf;   // 0 for direct object",
          "",
          "[Added Lines]",
          "895:         QPDF* qpdf;",
          "",
          "---------------"
        ],
        "libqpdf/QPDF.cc||libqpdf/QPDF.cc": [
          "File: libqpdf/QPDF.cc -> libqpdf/QPDF.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "106: QPDF::QPDF() :",
          "107:     m(new Members())",
          "108: {",
          "109: }",
          "111: QPDF::~QPDF()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109:     m->tokenizer.allowEOF();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "272: bool",
          "273: QPDF::findStartxref()",
          "274: {",
          "276:     if (t == QPDFTokenizer::Token(QPDFTokenizer::tt_word, \"startxref\"))",
          "277:     {",
          "279:         if (t.getType() == QPDFTokenizer::tt_integer)",
          "280:         {",
          "",
          "[Removed Lines]",
          "275:     QPDFTokenizer::Token t = readToken(this->m->file, true);",
          "278:         t = readToken(this->m->file, true);",
          "",
          "[Added Lines]",
          "276:     QPDFTokenizer::Token t = readToken(this->m->file);",
          "279:         t = readToken(this->m->file);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "421:         this->m->file->findAndSkipNextEOL();",
          "422:         qpdf_offset_t next_line_start = this->m->file->tell();",
          "423:         this->m->file->seek(line_start, SEEK_SET);",
          "425:         qpdf_offset_t token_start =",
          "426:             this->m->file->tell() - t1.getValue().length();",
          "427:         if (token_start >= next_line_start)",
          "",
          "[Removed Lines]",
          "424:         QPDFTokenizer::Token t1 = readToken(this->m->file, true, MAX_LEN);",
          "",
          "[Added Lines]",
          "425:         QPDFTokenizer::Token t1 = readToken(this->m->file, MAX_LEN);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "440:             if (t1.getType() == QPDFTokenizer::tt_integer)",
          "441:             {",
          "442:                 QPDFTokenizer::Token t2 =",
          "444:                 QPDFTokenizer::Token t3 =",
          "446:                 if ((t2.getType() == QPDFTokenizer::tt_integer) &&",
          "447:                     (t3 == QPDFTokenizer::Token(QPDFTokenizer::tt_word, \"obj\")))",
          "448:                 {",
          "",
          "[Removed Lines]",
          "443:                     readToken(this->m->file, true, MAX_LEN);",
          "445:                     readToken(this->m->file, true, MAX_LEN);",
          "",
          "[Added Lines]",
          "444:                     readToken(this->m->file, MAX_LEN);",
          "446:                     readToken(this->m->file, MAX_LEN);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1429: QPDF::findEndstream()",
          "1430: {",
          "1433:     if ((t.getType() == QPDFTokenizer::tt_word) &&",
          "1434:         ((t.getValue() == \"endobj\") ||",
          "1435:          (t.getValue() == \"endstream\")))",
          "",
          "[Removed Lines]",
          "1432:     QPDFTokenizer::Token t = readToken(this->m->file, true, 20);",
          "",
          "[Added Lines]",
          "1433:     QPDFTokenizer::Token t = readToken(this->m->file, 20);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1522: }",
          "1524: QPDFTokenizer::Token",
          "1527: {",
          "1528:     return this->m->tokenizer.readToken(",
          "1530: }",
          "1532: QPDFObjectHandle",
          "",
          "[Removed Lines]",
          "1525: QPDF::readToken(PointerHolder<InputSource> input,",
          "1526:                 bool allow_bad, size_t max_len)",
          "1529:         input, this->m->last_object_description, allow_bad, max_len);",
          "",
          "[Added Lines]",
          "1526: QPDF::readToken(PointerHolder<InputSource> input, size_t max_len)",
          "1529:         input, this->m->last_object_description, true, max_len);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1730:     }",
          "1731:     ResolveRecorder rr(this, og);",
          "1734:     {",
          "1741:  QPDFXRefEntry const& entry = this->m->xref_table[og];",
          "1743:         try",
          "1744:         {",
          "1745:             switch (entry.getType())",
          "",
          "[Removed Lines]",
          "1733:     if (! this->m->obj_cache.count(og))",
          "1735:  if (! this->m->xref_table.count(og))",
          "1736:  {",
          "1738:      return new QPDF_Null;",
          "1739:  }",
          "1742:         bool success = false;",
          "",
          "[Added Lines]",
          "1734:     if ((! this->m->obj_cache.count(og)) && this->m->xref_table.count(og))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1768:                               QUtil::int_to_string(generation) +",
          "1769:                               \" has unexpected xref entry type\");",
          "1770:             }",
          "1772:         }",
          "1773:         catch (QPDFExc& e)",
          "1774:         {",
          "",
          "[Removed Lines]",
          "1771:             success = true;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1782:                          QUtil::int_to_string(generation) +",
          "1783:                          \": error reading object: \" + e.what()));",
          "1784:         }",
          "1792:     }",
          "1795: }",
          "1797: void",
          "",
          "[Removed Lines]",
          "1785:         if (! success)",
          "1786:         {",
          "1787:             QTC::TC(\"qpdf\", \"QPDF resolve failure to null\");",
          "1788:             QPDFObjectHandle oh = QPDFObjectHandle::newNull();",
          "1789:             this->m->obj_cache[og] =",
          "1790:                 ObjCache(QPDFObjectHandle::ObjAccessor::getObject(oh), -1, -1);",
          "1791:         }",
          "1794:     return this->m->obj_cache[og].object;",
          "",
          "[Added Lines]",
          "1778:     }",
          "1779:     if (this->m->obj_cache.count(og) == 0)",
          "1780:     {",
          "1781:         QTC::TC(\"qpdf\", \"QPDF resolve failure to null\");",
          "1782:         QPDFObjectHandle oh = QPDFObjectHandle::newNull();",
          "1783:         this->m->obj_cache[og] =",
          "1784:             ObjCache(QPDFObjectHandle::ObjAccessor::getObject(oh), -1, -1);",
          "1787:     PointerHolder<QPDFObject> result(this->m->obj_cache[og].object);",
          "1788:     if (! result->hasDescription())",
          "1789:     {",
          "1790:         result->setDescription(",
          "1791:             this,",
          "1792:             \"object \" + QUtil::int_to_string(objid) + \" \" +",
          "1793:             QUtil::int_to_string(generation));",
          "1794:     }",
          "1795:     return result;",
          "",
          "---------------"
        ],
        "libqpdf/QPDFExc.cc||libqpdf/QPDFExc.cc": [
          "File: libqpdf/QPDFExc.cc -> libqpdf/QPDFExc.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:     }",
          "33:     if (! (object.empty() && offset == 0))",
          "34:     {",
          "36:  if (! object.empty())",
          "37:  {",
          "38:      result += object;",
          "",
          "[Removed Lines]",
          "35:  result += \" (\";",
          "",
          "[Added Lines]",
          "35:         if (! filename.empty())",
          "36:         {",
          "37:             result += \" (\";",
          "38:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:  {",
          "46:      result += \"offset \" + QUtil::int_to_string(offset);",
          "47:  }",
          "49:     }",
          "50:     if (! result.empty())",
          "51:     {",
          "",
          "[Removed Lines]",
          "48:  result += \")\";",
          "",
          "[Added Lines]",
          "51:         if (! filename.empty())",
          "52:         {",
          "53:             result += \")\";",
          "54:         }",
          "",
          "---------------"
        ],
        "libqpdf/QPDFObject.cc||libqpdf/QPDFObject.cc": [
          "File: libqpdf/QPDFObject.cc -> libqpdf/QPDFObject.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include <qpdf/QPDFObject.hh>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: QPDFObject::Members::Members() :",
          "4:     owning_qpdf(0)",
          "5: {",
          "6: }",
          "8: QPDFObject::Members::~Members()",
          "9: {",
          "10: }",
          "12: QPDFObject::QPDFObject() :",
          "13:     m(new Members)",
          "14: {",
          "15: }",
          "17: void",
          "18: QPDFObject::setDescription(QPDF* qpdf, std::string const& description)",
          "19: {",
          "20:     this->m->owning_qpdf = qpdf;",
          "21:     this->m->object_description = description;",
          "22: }",
          "24: bool",
          "25: QPDFObject::getDescription(QPDF*& qpdf, std::string& description)",
          "26: {",
          "27:     qpdf = this->m->owning_qpdf;",
          "28:     description = this->m->object_description;",
          "29:     return this->m->owning_qpdf;",
          "30: }",
          "32: bool",
          "33: QPDFObject::hasDescription()",
          "34: {",
          "35:     return this->m->owning_qpdf;",
          "36: }",
          "",
          "---------------"
        ],
        "libqpdf/QPDFObjectHandle.cc||libqpdf/QPDFObjectHandle.cc": [
          "File: libqpdf/QPDFObjectHandle.cc -> libqpdf/QPDFObjectHandle.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "190:     }",
          "191: }",
          "193: bool",
          "194: QPDFObjectHandle::isInitialized() const",
          "195: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "193: void",
          "194: QPDFObjectHandle::setObjectDescriptionFromInput(",
          "195:     QPDFObjectHandle object, QPDF* context,",
          "196:     std::string const& description, PointerHolder<InputSource> input,",
          "197:     qpdf_offset_t offset)",
          "198: {",
          "199:     object.setObjectDescription(",
          "200:         context,",
          "201:         input->getName() + \", \" + description +",
          "202:         \" at offset \" + QUtil::int_to_string(offset));",
          "203: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "282:     }",
          "283:     else",
          "284:     {",
          "286:     }",
          "287:     return result;",
          "288: }",
          "",
          "[Removed Lines]",
          "285:  throw std::logic_error(\"getNumericValue called for non-numeric object\");",
          "",
          "[Added Lines]",
          "297:         typeWarning(\"number\", \"returning 0\");",
          "298:         QTC::TC(\"qpdf\", \"QPDFObjectHandle numeric non-numeric\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "363: bool",
          "364: QPDFObjectHandle::getBoolValue()",
          "365: {",
          "368: }",
          "",
          "[Removed Lines]",
          "366:     assertBool();",
          "367:     return dynamic_cast<QPDF_Bool*>(m->obj.getPointer())->getVal();",
          "",
          "[Added Lines]",
          "379:     if (isBool())",
          "380:     {",
          "381:         return dynamic_cast<QPDF_Bool*>(m->obj.getPointer())->getVal();",
          "382:     }",
          "383:     else",
          "384:     {",
          "385:         typeWarning(\"boolean\", \"returning false\");",
          "386:         QTC::TC(\"qpdf\", \"QPDFObjectHandle boolean returning false\");",
          "387:         return false;",
          "388:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "372: long long",
          "373: QPDFObjectHandle::getIntValue()",
          "374: {",
          "377: }",
          "",
          "[Removed Lines]",
          "375:     assertInteger();",
          "376:     return dynamic_cast<QPDF_Integer*>(m->obj.getPointer())->getVal();",
          "",
          "[Added Lines]",
          "396:     if (isInteger())",
          "397:     {",
          "398:         return dynamic_cast<QPDF_Integer*>(m->obj.getPointer())->getVal();",
          "399:     }",
          "400:     else",
          "401:     {",
          "402:         typeWarning(\"integer\", \"returning 0\");",
          "403:         QTC::TC(\"qpdf\", \"QPDFObjectHandle integer returning 0\");",
          "404:         return 0;",
          "405:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "381: std::string",
          "382: QPDFObjectHandle::getRealValue()",
          "383: {",
          "386: }",
          "",
          "[Removed Lines]",
          "384:     assertReal();",
          "385:     return dynamic_cast<QPDF_Real*>(m->obj.getPointer())->getVal();",
          "",
          "[Added Lines]",
          "413:     if (isReal())",
          "414:     {",
          "415:         return dynamic_cast<QPDF_Real*>(m->obj.getPointer())->getVal();",
          "416:     }",
          "417:     else",
          "418:     {",
          "419:         typeWarning(\"real\", \"returning 0.0\");",
          "420:         QTC::TC(\"qpdf\", \"QPDFObjectHandle real returning 0.0\");",
          "421:         return \"0.0\";",
          "422:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "390: std::string",
          "391: QPDFObjectHandle::getName()",
          "392: {",
          "395: }",
          "",
          "[Removed Lines]",
          "393:     assertName();",
          "394:     return dynamic_cast<QPDF_Name*>(m->obj.getPointer())->getName();",
          "",
          "[Added Lines]",
          "430:     if (isName())",
          "431:     {",
          "432:         return dynamic_cast<QPDF_Name*>(m->obj.getPointer())->getName();",
          "433:     }",
          "434:     else",
          "435:     {",
          "436:         typeWarning(\"name\", \"returning dummy name\");",
          "437:         QTC::TC(\"qpdf\", \"QPDFObjectHandle name returning dummy name\");",
          "438:         return \"/QPDFFakeName\";",
          "439:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "399: std::string",
          "400: QPDFObjectHandle::getStringValue()",
          "401: {",
          "404: }",
          "406: std::string",
          "407: QPDFObjectHandle::getUTF8Value()",
          "408: {",
          "411: }",
          "",
          "[Removed Lines]",
          "402:     assertString();",
          "403:     return dynamic_cast<QPDF_String*>(m->obj.getPointer())->getVal();",
          "409:     assertString();",
          "410:     return dynamic_cast<QPDF_String*>(m->obj.getPointer())->getUTF8Val();",
          "",
          "[Added Lines]",
          "447:     if (isString())",
          "448:     {",
          "449:         return dynamic_cast<QPDF_String*>(m->obj.getPointer())->getVal();",
          "450:     }",
          "451:     else",
          "452:     {",
          "453:         typeWarning(\"string\", \"returning empty string\");",
          "454:         QTC::TC(\"qpdf\", \"QPDFObjectHandle string returning empty string\");",
          "455:         return \"\";",
          "456:     }",
          "462:     if (isString())",
          "463:     {",
          "464:         return dynamic_cast<QPDF_String*>(m->obj.getPointer())->getUTF8Val();",
          "465:     }",
          "466:     else",
          "467:     {",
          "468:         typeWarning(\"string\", \"returning empty string\");",
          "469:         QTC::TC(\"qpdf\", \"QPDFObjectHandle string returning empty utf8\");",
          "470:         return \"\";",
          "471:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "415: std::string",
          "416: QPDFObjectHandle::getOperatorValue()",
          "417: {",
          "420: }",
          "422: std::string",
          "423: QPDFObjectHandle::getInlineImageValue()",
          "424: {",
          "427: }",
          "",
          "[Removed Lines]",
          "418:     assertOperator();",
          "419:     return dynamic_cast<QPDF_Operator*>(m->obj.getPointer())->getVal();",
          "425:     assertInlineImage();",
          "426:     return dynamic_cast<QPDF_InlineImage*>(m->obj.getPointer())->getVal();",
          "",
          "[Added Lines]",
          "479:     if (isOperator())",
          "480:     {",
          "481:         return dynamic_cast<QPDF_Operator*>(m->obj.getPointer())->getVal();",
          "482:     }",
          "483:     else",
          "484:     {",
          "485:         typeWarning(\"operator\", \"returning fake value\");",
          "486:         QTC::TC(\"qpdf\", \"QPDFObjectHandle operator returning fake value\");",
          "487:         return \"QPDFFAKE\";",
          "488:     }",
          "494:     if (isInlineImage())",
          "495:     {",
          "496:         return dynamic_cast<QPDF_InlineImage*>(m->obj.getPointer())->getVal();",
          "497:     }",
          "498:     else",
          "499:     {",
          "500:         typeWarning(\"inlineimage\", \"returning empty data\");",
          "501:         QTC::TC(\"qpdf\", \"QPDFObjectHandle inlineimage returning empty data\");",
          "502:         return \"\";",
          "503:     }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "431: int",
          "432: QPDFObjectHandle::getArrayNItems()",
          "433: {",
          "436: }",
          "438: QPDFObjectHandle",
          "439: QPDFObjectHandle::getArrayItem(int n)",
          "440: {",
          "443: }",
          "445: std::vector<QPDFObjectHandle>",
          "446: QPDFObjectHandle::getArrayAsVector()",
          "447: {",
          "450: }",
          "",
          "[Removed Lines]",
          "434:     assertArray();",
          "435:     return dynamic_cast<QPDF_Array*>(m->obj.getPointer())->getNItems();",
          "441:     assertArray();",
          "442:     return dynamic_cast<QPDF_Array*>(m->obj.getPointer())->getItem(n);",
          "448:     assertArray();",
          "449:     return dynamic_cast<QPDF_Array*>(m->obj.getPointer())->getAsVector();",
          "",
          "[Added Lines]",
          "511:     if (isArray())",
          "512:     {",
          "513:         return dynamic_cast<QPDF_Array*>(m->obj.getPointer())->getNItems();",
          "514:     }",
          "515:     else",
          "516:     {",
          "517:         typeWarning(\"array\", \"treating as empty\");",
          "518:         QTC::TC(\"qpdf\", \"QPDFObjectHandle array treating as empty\");",
          "519:         return 0;",
          "520:     }",
          "526:     QPDFObjectHandle result;",
          "527:     if (isArray() && (n < getArrayNItems()) && (n >= 0))",
          "528:     {",
          "529:         result = dynamic_cast<QPDF_Array*>(m->obj.getPointer())->getItem(n);",
          "530:     }",
          "531:     else",
          "532:     {",
          "533:         result = newNull();",
          "534:         if (isArray())",
          "535:         {",
          "536:             objectWarning(\"returning null for out of bounds array access\");",
          "537:             QTC::TC(\"qpdf\", \"QPDFObjectHandle array bounds\");",
          "538:         }",
          "539:         else",
          "540:         {",
          "541:             typeWarning(\"array\", \"returning null\");",
          "542:             QTC::TC(\"qpdf\", \"QPDFObjectHandle array null for non-array\");",
          "543:         }",
          "544:         QPDF* context = 0;",
          "545:         std::string description;",
          "546:         if (this->m->obj->getDescription(context, description))",
          "547:         {",
          "548:             result.setObjectDescription(",
          "549:                 context,",
          "550:                 description +",
          "551:                 \" -> null returned from invalid array access\");",
          "552:         }",
          "553:     }",
          "554:     return result;",
          "560:     std::vector<QPDFObjectHandle> result;",
          "561:     if (isArray())",
          "562:     {",
          "563:         result = dynamic_cast<QPDF_Array*>(m->obj.getPointer())->getAsVector();",
          "564:     }",
          "565:     else",
          "566:     {",
          "567:         typeWarning(\"array\", \"treating as empty\");",
          "568:         QTC::TC(\"qpdf\", \"QPDFObjectHandle array treating as empty vector\");",
          "569:     }",
          "570:     return result;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "454: void",
          "455: QPDFObjectHandle::setArrayItem(int n, QPDFObjectHandle const& item)",
          "456: {",
          "459: }",
          "461: void",
          "462: QPDFObjectHandle::setArrayFromVector(std::vector<QPDFObjectHandle> const& items)",
          "463: {",
          "466: }",
          "468: void",
          "469: QPDFObjectHandle::insertItem(int at, QPDFObjectHandle const& item)",
          "470: {",
          "473: }",
          "475: void",
          "476: QPDFObjectHandle::appendItem(QPDFObjectHandle const& item)",
          "477: {",
          "480: }",
          "482: void",
          "483: QPDFObjectHandle::eraseItem(int at)",
          "484: {",
          "487: }",
          "",
          "[Removed Lines]",
          "457:     assertArray();",
          "458:     return dynamic_cast<QPDF_Array*>(m->obj.getPointer())->setItem(n, item);",
          "464:     assertArray();",
          "465:     return dynamic_cast<QPDF_Array*>(m->obj.getPointer())->setFromVector(items);",
          "471:     assertArray();",
          "472:     return dynamic_cast<QPDF_Array*>(m->obj.getPointer())->insertItem(at, item);",
          "478:     assertArray();",
          "479:     return dynamic_cast<QPDF_Array*>(m->obj.getPointer())->appendItem(item);",
          "485:     assertArray();",
          "486:     return dynamic_cast<QPDF_Array*>(m->obj.getPointer())->eraseItem(at);",
          "",
          "[Added Lines]",
          "578:     if (isArray())",
          "579:     {",
          "580:         dynamic_cast<QPDF_Array*>(m->obj.getPointer())->setItem(n, item);",
          "581:     }",
          "582:     else",
          "583:     {",
          "584:         typeWarning(\"array\", \"ignoring attempt to set item\");",
          "585:         QTC::TC(\"qpdf\", \"QPDFObjectHandle array ignoring set item\");",
          "586:     }",
          "592:     if (isArray())",
          "593:     {",
          "594:         dynamic_cast<QPDF_Array*>(m->obj.getPointer())->setFromVector(items);",
          "595:     }",
          "596:     else",
          "597:     {",
          "598:         typeWarning(\"array\", \"ignoring attempt to replace items\");",
          "599:         QTC::TC(\"qpdf\", \"QPDFObjectHandle array ignoring replace items\");",
          "600:     }",
          "606:     if (isArray())",
          "607:     {",
          "608:         dynamic_cast<QPDF_Array*>(m->obj.getPointer())->insertItem(at, item);",
          "609:     }",
          "610:     else",
          "611:     {",
          "612:         typeWarning(\"array\", \"ignoring attempt to insert item\");",
          "613:         QTC::TC(\"qpdf\", \"QPDFObjectHandle array ignoring insert item\");",
          "614:     }",
          "620:     if (isArray())",
          "621:     {",
          "622:         dynamic_cast<QPDF_Array*>(m->obj.getPointer())->appendItem(item);",
          "623:     }",
          "624:     else",
          "625:     {",
          "626:         typeWarning(\"array\", \"ignoring attempt to append item\");",
          "627:         QTC::TC(\"qpdf\", \"QPDFObjectHandle array ignoring append item\");",
          "628:     }",
          "634:     if (isArray() && (at < getArrayNItems()) && (at >= 0))",
          "635:     {",
          "636:         dynamic_cast<QPDF_Array*>(m->obj.getPointer())->eraseItem(at);",
          "637:     }",
          "638:     else",
          "639:     {",
          "640:         if (isArray())",
          "641:         {",
          "642:             objectWarning(\"ignoring attempt to erase out of bounds array item\");",
          "643:             QTC::TC(\"qpdf\", \"QPDFObjectHandle erase array bounds\");",
          "644:         }",
          "645:         else",
          "646:         {",
          "647:             typeWarning(\"array\", \"ignoring attempt to erase item\");",
          "648:             QTC::TC(\"qpdf\", \"QPDFObjectHandle array ignoring erase item\");",
          "649:         }",
          "650:     }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "491: bool",
          "492: QPDFObjectHandle::hasKey(std::string const& key)",
          "493: {",
          "496: }",
          "498: QPDFObjectHandle",
          "499: QPDFObjectHandle::getKey(std::string const& key)",
          "500: {",
          "503: }",
          "505: std::set<std::string>",
          "506: QPDFObjectHandle::getKeys()",
          "507: {",
          "510: }",
          "512: std::map<std::string, QPDFObjectHandle>",
          "513: QPDFObjectHandle::getDictAsMap()",
          "514: {",
          "517: }",
          "",
          "[Removed Lines]",
          "494:     assertDictionary();",
          "495:     return dynamic_cast<QPDF_Dictionary*>(m->obj.getPointer())->hasKey(key);",
          "501:     assertDictionary();",
          "502:     return dynamic_cast<QPDF_Dictionary*>(m->obj.getPointer())->getKey(key);",
          "508:     assertDictionary();",
          "509:     return dynamic_cast<QPDF_Dictionary*>(m->obj.getPointer())->getKeys();",
          "515:     assertDictionary();",
          "516:     return dynamic_cast<QPDF_Dictionary*>(m->obj.getPointer())->getAsMap();",
          "",
          "[Added Lines]",
          "658:     if (isDictionary())",
          "659:     {",
          "660:         return dynamic_cast<QPDF_Dictionary*>(m->obj.getPointer())->hasKey(key);",
          "661:     }",
          "662:     else",
          "663:     {",
          "664:         typeWarning(\"dictionary\",",
          "665:                     \"returning false for a key containment request\");",
          "666:         QTC::TC(\"qpdf\", \"QPDFObjectHandle dictionary false for hasKey\");",
          "667:         return false;",
          "668:     }",
          "674:     QPDFObjectHandle result;",
          "675:     if (isDictionary())",
          "676:     {",
          "677:         result = dynamic_cast<QPDF_Dictionary*>(",
          "678:             m->obj.getPointer())->getKey(key);",
          "679:     }",
          "680:     else",
          "681:     {",
          "682:         typeWarning(",
          "683:             \"dictionary\", \"returning null for attempted key retrieval\");",
          "684:         QTC::TC(\"qpdf\", \"QPDFObjectHandle dictionary null for getKey\");",
          "685:         result = newNull();",
          "686:         QPDF* qpdf = 0;",
          "687:         std::string description;",
          "688:         if (this->m->obj->getDescription(qpdf, description))",
          "689:         {",
          "690:             result.setObjectDescription(",
          "691:                 qpdf,",
          "692:                 description +",
          "693:                 \" -> null returned from getting key \" +",
          "694:                 key + \" from non-Dictionary\");",
          "695:         }",
          "696:     }",
          "697:     return result;",
          "703:     std::set<std::string> result;",
          "704:     if (isDictionary())",
          "705:     {",
          "706:         result = dynamic_cast<QPDF_Dictionary*>(m->obj.getPointer())->getKeys();",
          "707:     }",
          "708:     else",
          "709:     {",
          "710:         typeWarning(\"dictionary\", \"treating as empty\");",
          "711:         QTC::TC(\"qpdf\", \"QPDFObjectHandle dictionary empty set for getKeys\");",
          "712:     }",
          "713:     return result;",
          "719:     std::map<std::string, QPDFObjectHandle> result;",
          "720:     if (isDictionary())",
          "721:     {",
          "722:         result = dynamic_cast<QPDF_Dictionary*>(",
          "723:             m->obj.getPointer())->getAsMap();",
          "724:     }",
          "725:     else",
          "726:     {",
          "727:         typeWarning(\"dictionary\", \"treating as empty\");",
          "728:         QTC::TC(\"qpdf\", \"QPDFObjectHandle dictionary empty map for asMap\");",
          "729:     }",
          "730:     return result;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "552: void",
          "553: QPDFObjectHandle::replaceKey(std::string const& key,",
          "555: {",
          "559: }",
          "561: void",
          "562: QPDFObjectHandle::removeKey(std::string const& key)",
          "563: {",
          "566: }",
          "568: void",
          "569: QPDFObjectHandle::replaceOrRemoveKey(std::string const& key,",
          "570:          QPDFObjectHandle value)",
          "571: {",
          "575: }",
          "",
          "[Removed Lines]",
          "554:        QPDFObjectHandle const& value)",
          "556:     assertDictionary();",
          "557:     return dynamic_cast<QPDF_Dictionary*>(",
          "558:  m->obj.getPointer())->replaceKey(key, value);",
          "564:     assertDictionary();",
          "565:     return dynamic_cast<QPDF_Dictionary*>(m->obj.getPointer())->removeKey(key);",
          "572:     assertDictionary();",
          "573:     return dynamic_cast<QPDF_Dictionary*>(",
          "574:  m->obj.getPointer())->replaceOrRemoveKey(key, value);",
          "",
          "[Added Lines]",
          "768:        QPDFObjectHandle value)",
          "770:     if (isDictionary())",
          "771:     {",
          "772:         dynamic_cast<QPDF_Dictionary*>(",
          "773:             m->obj.getPointer())->replaceKey(key, value);",
          "774:     }",
          "775:     else",
          "776:     {",
          "777:         typeWarning(\"dictionary\", \"ignoring key replacement request\");",
          "778:         QTC::TC(\"qpdf\", \"QPDFObjectHandle dictionary ignoring replaceKey\");",
          "779:     }",
          "785:     if (isDictionary())",
          "786:     {",
          "787:         dynamic_cast<QPDF_Dictionary*>(m->obj.getPointer())->removeKey(key);",
          "788:     }",
          "789:     else",
          "790:     {",
          "791:         typeWarning(\"dictionary\", \"ignoring key removal request\");",
          "792:         QTC::TC(\"qpdf\", \"QPDFObjectHandle dictionary ignoring removeKey\");",
          "793:     }",
          "800:     if (isDictionary())",
          "801:     {",
          "802:         dynamic_cast<QPDF_Dictionary*>(",
          "803:             m->obj.getPointer())->replaceOrRemoveKey(key, value);",
          "804:     }",
          "805:     else",
          "806:     {",
          "807:         typeWarning(\"dictionary\", \"ignoring key removal/replacement request\");",
          "808:         QTC::TC(\"qpdf\", \"QPDFObjectHandle dictionary ignoring removereplace\");",
          "809:     }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1173:     std::vector<parser_state_e> state_stack;",
          "1174:     state_stack.push_back(st_top);",
          "1175:     std::vector<qpdf_offset_t> offset_stack;",
          "1177:     bool done = false;",
          "1178:     while (! done)",
          "1179:     {",
          "1180:         std::vector<QPDFObjectHandle>& olist = olist_stack.back();",
          "1181:         parser_state_e state = state_stack.back();",
          "1184:  object = QPDFObjectHandle();",
          "1186:  QPDFTokenizer::Token token =",
          "1189:  switch (token.getType())",
          "1190:  {",
          "1191:           case QPDFTokenizer::tt_eof:",
          "1193:             {",
          "1202:             }",
          "1203:             break;",
          "1205:    case QPDFTokenizer::tt_brace_open:",
          "1206:    case QPDFTokenizer::tt_brace_close:",
          "1207:      QTC::TC(\"qpdf\", \"QPDFObjectHandle bad brace\");",
          "",
          "[Removed Lines]",
          "1176:     offset_stack.push_back(input->tell());",
          "1182:         qpdf_offset_t offset = offset_stack.back();",
          "1187:             tokenizer.readToken(input, object_description);",
          "1192:             if (content_stream)",
          "1194:                 state = st_eof;",
          "1195:             }",
          "1196:             else",
          "1197:             {",
          "1200:                 throw std::logic_error(",
          "1201:                     \"EOF received while not in content stream mode\");",
          "",
          "[Added Lines]",
          "1411:     qpdf_offset_t offset = input->tell();",
          "1412:     offset_stack.push_back(offset);",
          "1418:         offset = offset_stack.back();",
          "1423:             tokenizer.readToken(input, object_description, true);",
          "1428:             if (! content_stream)",
          "1430:                 QTC::TC(\"qpdf\", \"QPDFObjectHandle eof in parseInternal\");",
          "1431:                 warn(context,",
          "1432:                      QPDFExc(qpdf_e_damaged_pdf, input->getName(),",
          "1433:                              object_description,",
          "1434:                              input->getLastOffset(),",
          "1435:                              \"unexpected EOF\"));",
          "1437:             state = st_eof;",
          "1440:           case QPDFTokenizer::tt_bad:",
          "1441:      QTC::TC(\"qpdf\", \"QPDFObjectHandle bad token in parse\");",
          "1442:             warn(context,",
          "1443:                  QPDFExc(qpdf_e_damaged_pdf, input->getName(),",
          "1444:                          object_description,",
          "1445:                          input->getLastOffset(),",
          "1446:                          token.getErrorMessage()));",
          "1447:             object = newNull();",
          "1448:      break;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1375:                              \"parse error while reading object\"));",
          "1376:             }",
          "1377:             done = true;",
          "1379:             break;",
          "1381:           case st_dictionary:",
          "1382:           case st_array:",
          "1383:             olist.push_back(object);",
          "1384:             break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1625:             if (! content_stream)",
          "1626:             {",
          "1627:                 object = newNull();",
          "1628:             }",
          "1633:             setObjectDescriptionFromInput(",
          "1634:                 object, context, object_description, input,",
          "1635:                 input->getLastOffset());",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1402:             if (old_state == st_array)",
          "1403:             {",
          "1404:                 object = newArray(olist);",
          "1405:             }",
          "1406:             else if (old_state == st_dictionary)",
          "1407:             {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1658:                 setObjectDescriptionFromInput(",
          "1659:                     object, context, object_description, input, offset);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1458:                                  \"dictionary ended prematurely; \"",
          "1459:                                  \"using null as value for last key\"));",
          "1460:                         val = newNull();",
          "1461:                     }",
          "1462:                     else",
          "1463:                     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1716:                         setObjectDescriptionFromInput(",
          "1717:                             val, context, object_description, input, offset);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1466:                     dict[key_obj.getName()] = val;",
          "1467:                 }",
          "1468:                 object = newDictionary(dict);",
          "1469:             }",
          "1470:             olist_stack.pop_back();",
          "1471:             offset_stack.pop_back();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1726:                 setObjectDescriptionFromInput(",
          "1727:                     object, context, object_description, input, offset);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1480:         }",
          "1481:     }",
          "1483:     return object;",
          "1484: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1742:     setObjectDescriptionFromInput(",
          "1743:         object, context, object_description, input, offset);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1635:     return result;",
          "1636: }",
          "1638: QPDFObjectHandle",
          "1639: QPDFObjectHandle::shallowCopy()",
          "1640: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1899: void",
          "1900: QPDFObjectHandle::setObjectDescription(QPDF* owning_qpdf,",
          "1901:                                        std::string const& object_description)",
          "1902: {",
          "1903:     if (isInitialized() && this->m->obj.getPointer())",
          "1904:     {",
          "1905:         this->m->obj->setDescription(owning_qpdf, object_description);",
          "1906:     }",
          "1907: }",
          "1909: bool",
          "1910: QPDFObjectHandle::hasObjectDescription()",
          "1911: {",
          "1912:     if (isInitialized() && this->m->obj.getPointer())",
          "1913:     {",
          "1914:         return this->m->obj->hasDescription();",
          "1915:     }",
          "1916:     return false;",
          "1917: }",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1793: }",
          "1795: void",
          "1797: {",
          "1798:     if (! istype)",
          "1799:     {",
          "1800:  throw std::logic_error(std::string(\"operation for \") + type_name +",
          "1802:     }",
          "1803: }",
          "1805: void",
          "1806: QPDFObjectHandle::assertNull()",
          "1807: {",
          "1809: }",
          "1811: void",
          "1812: QPDFObjectHandle::assertBool()",
          "1813: {",
          "1815: }",
          "1817: void",
          "1818: QPDFObjectHandle::assertInteger()",
          "1819: {",
          "1821: }",
          "1823: void",
          "1824: QPDFObjectHandle::assertReal()",
          "1825: {",
          "1827: }",
          "1829: void",
          "1830: QPDFObjectHandle::assertName()",
          "1831: {",
          "1833: }",
          "1835: void",
          "1836: QPDFObjectHandle::assertString()",
          "1837: {",
          "1839: }",
          "1841: void",
          "1842: QPDFObjectHandle::assertOperator()",
          "1843: {",
          "1845: }",
          "1847: void",
          "1848: QPDFObjectHandle::assertInlineImage()",
          "1849: {",
          "1851: }",
          "1853: void",
          "1854: QPDFObjectHandle::assertArray()",
          "1855: {",
          "1857: }",
          "1859: void",
          "1860: QPDFObjectHandle::assertDictionary()",
          "1861: {",
          "1863: }",
          "1865: void",
          "1866: QPDFObjectHandle::assertStream()",
          "1867: {",
          "1869: }",
          "1871: void",
          "1872: QPDFObjectHandle::assertReserved()",
          "1873: {",
          "1875: }",
          "1877: void",
          "",
          "[Removed Lines]",
          "1796: QPDFObjectHandle::assertType(char const* type_name, bool istype) const",
          "1801:           \" object attempted on object of wrong type\");",
          "1808:     assertType(\"Null\", isNull());",
          "1814:     assertType(\"Boolean\", isBool());",
          "1820:     assertType(\"Integer\", isInteger());",
          "1826:     assertType(\"Real\", isReal());",
          "1832:     assertType(\"Name\", isName());",
          "1838:     assertType(\"String\", isString());",
          "1844:     assertType(\"Operator\", isOperator());",
          "1850:     assertType(\"InlineImage\", isInlineImage());",
          "1856:     assertType(\"Array\", isArray());",
          "1862:     assertType(\"Dictionary\", isDictionary());",
          "1868:     assertType(\"Stream\", isStream());",
          "1874:     assertType(\"Reserved\", isReserved());",
          "",
          "[Added Lines]",
          "2077: QPDFObjectHandle::typeWarning(char const* expected_type,",
          "2078:                               std::string const& warning)",
          "2079: {",
          "2080:     QPDF* context = 0;",
          "2081:     std::string description;",
          "2082:     if (this->m->obj->getDescription(context, description))",
          "2083:     {",
          "2084:         warn(context,",
          "2085:              QPDFExc(",
          "2086:                  qpdf_e_damaged_pdf,",
          "2087:                  \"\", description, 0,",
          "2088:                  std::string(\"operation for \") + expected_type +",
          "2089:                  \" attempted on object of type \" +",
          "2090:                  getTypeName() + \": \" + warning));",
          "2091:     }",
          "2092:     else",
          "2093:     {",
          "2094:         assertType(expected_type, false);",
          "2095:     }",
          "2096: }",
          "2098: void",
          "2099: QPDFObjectHandle::objectWarning(std::string const& warning)",
          "2100: {",
          "2101:     QPDF* context = 0;",
          "2102:     std::string description;",
          "2103:     if (this->m->obj->getDescription(context, description))",
          "2104:     {",
          "2105:         warn(context,",
          "2106:              QPDFExc(",
          "2107:                  qpdf_e_damaged_pdf,",
          "2108:                  \"\", description, 0,",
          "2109:                  warning));",
          "2110:     }",
          "2111:     else",
          "2112:     {",
          "2113:         throw std::logic_error(warning);",
          "2114:     }",
          "2115: }",
          "2117: void",
          "2118: QPDFObjectHandle::assertType(char const* type_name, bool istype)",
          "2123:           \" attempted on object of type \" +",
          "2124:                                getTypeName());",
          "2131:     assertType(\"null\", isNull());",
          "2137:     assertType(\"boolean\", isBool());",
          "2143:     assertType(\"integer\", isInteger());",
          "2149:     assertType(\"real\", isReal());",
          "2155:     assertType(\"name\", isName());",
          "2161:     assertType(\"string\", isString());",
          "2167:     assertType(\"operator\", isOperator());",
          "2173:     assertType(\"inlineimage\", isInlineImage());",
          "2179:     assertType(\"array\", isArray());",
          "2185:     assertType(\"dictionary\", isDictionary());",
          "2191:     assertType(\"stream\", isStream());",
          "2197:     assertType(\"reserved\", isReserved());",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1887: void",
          "1888: QPDFObjectHandle::assertScalar()",
          "1889: {",
          "1891: }",
          "1893: void",
          "1894: QPDFObjectHandle::assertNumber()",
          "1895: {",
          "1897: }",
          "1899: bool",
          "",
          "[Removed Lines]",
          "1890:     assertType(\"Scalar\", isScalar());",
          "1896:     assertType(\"Number\", isNumber());",
          "",
          "[Added Lines]",
          "2213:     assertType(\"scalar\", isScalar());",
          "2219:     assertType(\"number\", isNumber());",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1928:      this->m->qpdf, this->m->objid, this->m->generation);",
          "1929:  if (obj.getPointer() == 0)",
          "1930:  {",
          "1932:      this->m->obj = new QPDF_Null();",
          "1933:  }",
          "1934:         else if (dynamic_cast<QPDF_Reserved*>(obj.getPointer()))",
          "",
          "[Removed Lines]",
          "1931:      QTC::TC(\"qpdf\", \"QPDFObjectHandle indirect to unknown\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libqpdf/QPDFTokenizer.cc||libqpdf/QPDFTokenizer.cc": [
          "File: libqpdf/QPDFTokenizer.cc -> libqpdf/QPDFTokenizer.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "640:                 presented_eof = true;",
          "641:                 if ((this->m->type == tt_eof) && (! this->m->allow_eof))",
          "642:                 {",
          "644:                     this->m->type = tt_bad;",
          "645:                     this->m->error_message = \"unexpected EOF\";",
          "646:                     offset = input->getLastOffset();",
          "",
          "[Removed Lines]",
          "643:                     QTC::TC(\"qpdf\", \"QPDFTokenizer EOF when not allowed\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "677:  input->unreadCh(char_to_unread);",
          "678:     }",
          "682:     if (token.getType() == tt_bad)",
          "683:     {",
          "",
          "[Removed Lines]",
          "680:     input->setLastOffset(offset);",
          "",
          "[Added Lines]",
          "682:     if (token.getType() != tt_eof)",
          "683:     {",
          "684:         input->setLastOffset(offset);",
          "685:     }",
          "",
          "---------------"
        ],
        "libqpdf/QPDF_Array.cc||libqpdf/QPDF_Array.cc": [
          "File: libqpdf/QPDF_Array.cc -> libqpdf/QPDF_Array.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include <qpdf/QPDF_Array.hh>",
          "2: #include <stdexcept>",
          "4: QPDF_Array::QPDF_Array(std::vector<QPDFObjectHandle> const& items) :",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: #include <qpdf/QUtil.hh>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:     return \"array\";",
          "47: }",
          "49: int",
          "50: QPDF_Array::getNItems() const",
          "51: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: void",
          "51: QPDF_Array::setDescription(QPDF* qpdf, std::string const& description)",
          "52: {",
          "53:     this->QPDFObject::setDescription(qpdf, description);",
          "54: }",
          "",
          "---------------"
        ],
        "libqpdf/QPDF_Dictionary.cc||libqpdf/QPDF_Dictionary.cc": [
          "File: libqpdf/QPDF_Dictionary.cc -> libqpdf/QPDF_Dictionary.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:     return \"dictionary\";",
          "52: }",
          "54: bool",
          "55: QPDF_Dictionary::hasKey(std::string const& key)",
          "56: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54: void",
          "55: QPDF_Dictionary::setDescription(QPDF* qpdf, std::string const& description)",
          "56: {",
          "57:     this->QPDFObject::setDescription(qpdf, description);",
          "58: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:     }",
          "71:     else",
          "72:     {",
          "74:     }",
          "75: }",
          "",
          "[Removed Lines]",
          "73:  return QPDFObjectHandle::newNull();",
          "",
          "[Added Lines]",
          "79:         QPDFObjectHandle null = QPDFObjectHandle::newNull();",
          "80:         QPDF* qpdf = 0;",
          "81:         std::string description;",
          "82:         if (getDescription(qpdf, description))",
          "83:         {",
          "84:             null.setObjectDescription(",
          "85:                 qpdf, description + \" -> dictionary key \" + key);",
          "86:         }",
          "87:  return null;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "93: std::map<std::string, QPDFObjectHandle> const&",
          "94: QPDF_Dictionary::getAsMap() const",
          "95: {",
          "97:     return this->items;",
          "98: }",
          "100: void",
          "101: QPDF_Dictionary::replaceKey(std::string const& key,",
          "103: {",
          "105:     this->items[key] = value;",
          "",
          "[Removed Lines]",
          "102:        QPDFObjectHandle const& value)",
          "",
          "[Added Lines]",
          "115:        QPDFObjectHandle value)",
          "",
          "---------------"
        ],
        "libqpdf/QPDF_Stream.cc||libqpdf/QPDF_Stream.cc": [
          "File: libqpdf/QPDF_Stream.cc -> libqpdf/QPDF_Stream.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:      \"stream object instantiated with non-dictionary \"",
          "40:      \"object for dictionary\");",
          "41:     }",
          "42: }",
          "44: QPDF_Stream::~QPDF_Stream()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42:     setStreamDescription();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:     return \"stream\";",
          "86: }",
          "88: QPDFObjectHandle",
          "89: QPDF_Stream::getDict() const",
          "90: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89: void",
          "90: QPDF_Stream::setDescription(QPDF* qpdf, std::string const& description)",
          "91: {",
          "92:     this->QPDFObject::setDescription(qpdf, description);",
          "93:     setDictDescription();",
          "94: }",
          "96: void",
          "97: QPDF_Stream::setStreamDescription()",
          "98: {",
          "99:     setDescription(",
          "100:         this->qpdf,",
          "101:         \"stream object \" + QUtil::int_to_string(this->objid) + \" \" +",
          "102:         QUtil::int_to_string(this->generation));",
          "103: }",
          "105: void",
          "106: QPDF_Stream::setDictDescription()",
          "107: {",
          "108:     QPDF* qpdf = 0;",
          "109:     std::string description;",
          "110:     if ((! this->stream_dict.hasObjectDescription()) &&",
          "111:         getDescription(qpdf, description))",
          "112:     {",
          "113:         this->stream_dict.setObjectDescription(",
          "114:             qpdf, description + \" -> stream dictionary\");",
          "115:     }",
          "116: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "688: QPDF_Stream::replaceDict(QPDFObjectHandle new_dict)",
          "689: {",
          "690:     this->stream_dict = new_dict;",
          "691:     QPDFObjectHandle length_obj = new_dict.getKey(\"/Length\");",
          "692:     if (length_obj.isInteger())",
          "693:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "721:     setDictDescription();",
          "",
          "---------------"
        ],
        "libqpdf/QPDF_linearization.cc||libqpdf/QPDF_linearization.cc": [
          "File: libqpdf/QPDF_linearization.cc -> libqpdf/QPDF_linearization.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:             ++p;",
          "122:         }",
          "128:         if ((t1.getType() == QPDFTokenizer::tt_integer) &&",
          "129:             (t2.getType() == QPDFTokenizer::tt_integer) &&",
          "130:             (t3 == QPDFTokenizer::Token(QPDFTokenizer::tt_word, \"obj\")) &&",
          "",
          "[Removed Lines]",
          "124:         QPDFTokenizer::Token t1 = readToken(this->m->file, true);",
          "125:         QPDFTokenizer::Token t2 = readToken(this->m->file, true);",
          "126:         QPDFTokenizer::Token t3 = readToken(this->m->file, true);",
          "127:         QPDFTokenizer::Token t4 = readToken(this->m->file, true);",
          "",
          "[Added Lines]",
          "124:         QPDFTokenizer::Token t1 = readToken(this->m->file);",
          "125:         QPDFTokenizer::Token t2 = readToken(this->m->file);",
          "126:         QPDFTokenizer::Token t3 = readToken(this->m->file);",
          "127:         QPDFTokenizer::Token t4 = readToken(this->m->file);",
          "",
          "---------------"
        ],
        "libqpdf/qpdf/QPDF_Array.hh||libqpdf/qpdf/QPDF_Array.hh": [
          "File: libqpdf/qpdf/QPDF_Array.hh -> libqpdf/qpdf/QPDF_Array.hh",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:     virtual std::string unparse();",
          "15:     virtual QPDFObject::object_type_e getTypeCode() const;",
          "16:     virtual char const* getTypeName() const;",
          "18:     int getNItems() const;",
          "19:     QPDFObjectHandle getItem(int n) const;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17:     virtual void setDescription(QPDF*, std::string const&);",
          "",
          "---------------"
        ],
        "libqpdf/qpdf/QPDF_Dictionary.hh||libqpdf/qpdf/QPDF_Dictionary.hh": [
          "File: libqpdf/qpdf/QPDF_Dictionary.hh -> libqpdf/qpdf/QPDF_Dictionary.hh",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:     virtual std::string unparse();",
          "17:     virtual QPDFObject::object_type_e getTypeCode() const;",
          "18:     virtual char const* getTypeName() const;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19:     virtual void setDescription(QPDF*, std::string const&);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:     std::map<std::string, QPDFObjectHandle> const& getAsMap() const;",
          "31:     void removeKey(std::string const& key);",
          "",
          "[Removed Lines]",
          "29:     void replaceKey(std::string const& key, QPDFObjectHandle const&);",
          "",
          "[Added Lines]",
          "30:     void replaceKey(std::string const& key, QPDFObjectHandle);",
          "",
          "---------------"
        ],
        "libqpdf/qpdf/QPDF_Stream.hh||libqpdf/qpdf/QPDF_Stream.hh": [
          "File: libqpdf/qpdf/QPDF_Stream.hh -> libqpdf/qpdf/QPDF_Stream.hh",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:     virtual std::string unparse();",
          "20:     virtual QPDFObject::object_type_e getTypeCode() const;",
          "21:     virtual char const* getTypeName() const;",
          "22:     QPDFObjectHandle getDict() const;",
          "23:     bool isDataModified() const;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:     virtual void setDescription(QPDF*, std::string const&);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:                     int& colors, int& bits_per_component,",
          "67:                     bool& early_code_change);",
          "68:     void warn(QPDFExc const& e);",
          "70:     QPDF* qpdf;",
          "71:     int objid;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:     void setDictDescription();",
          "71:     void setStreamDescription();",
          "",
          "---------------"
        ],
        "qpdf/qpdf.testcov||qpdf/qpdf.testcov": [
          "File: qpdf/qpdf.testcov -> qpdf/qpdf.testcov",
          "--- Hunk 1 ---",
          "[Context before]",
          "105: QPDF recovered in readObjectAtOffset 0",
          "106: QPDF recovered stream length 0",
          "107: QPDF found wrong endstream in recovery 0",
          "109: QPDF_Stream pipeStreamData with null pipeline 0",
          "110: QPDFWriter not recompressing /FlateDecode 0",
          "111: QPDF_encryption xref stream from encrypted file 0",
          "",
          "[Removed Lines]",
          "108: QPDFObjectHandle indirect to unknown 0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "300: qpdf-c called qpdf_set_preserve_unreferenced_objects 0",
          "301: qpdf-c called qpdf_set_newline_before_endstream 0",
          "302: QPDF_Stream TIFF predictor 0",
          "304: QPDFTokenizer inline image at EOF 0",
          "305: Pl_QPDFTokenizer found ID 0",
          "306: QPDFObjectHandle non-stream in stream array 0",
          "307: QPDFObjectHandle coalesce called on stream 0",
          "308: QPDFObjectHandle coalesce provide stream data 0",
          "309: QPDF_Stream bad token at end during normalize 0",
          "",
          "[Removed Lines]",
          "303: QPDFTokenizer EOF when not allowed 0",
          "",
          "[Added Lines]",
          "308: QPDFObjectHandle bad token in parse 0",
          "309: QPDFObjectHandle eof in parseInternal 0",
          "310: QPDFObjectHandle array bounds 0",
          "311: QPDFObjectHandle boolean returning false 0",
          "312: QPDFObjectHandle integer returning 0 0",
          "313: QPDFObjectHandle real returning 0.0 0",
          "314: QPDFObjectHandle name returning dummy name 0",
          "315: QPDFObjectHandle string returning empty string 0",
          "316: QPDFObjectHandle string returning empty utf8 0",
          "317: QPDFObjectHandle operator returning fake value 0",
          "318: QPDFObjectHandle inlineimage returning empty data 0",
          "319: QPDFObjectHandle array treating as empty 0",
          "320: QPDFObjectHandle array null for non-array 0",
          "321: QPDFObjectHandle array treating as empty vector 0",
          "322: QPDFObjectHandle array ignoring set item 0",
          "323: QPDFObjectHandle array ignoring replace items 0",
          "324: QPDFObjectHandle array ignoring insert item 0",
          "325: QPDFObjectHandle array ignoring append item 0",
          "326: QPDFObjectHandle array ignoring erase item 0",
          "327: QPDFObjectHandle dictionary false for hasKey 0",
          "328: QPDFObjectHandle dictionary null for getKey 0",
          "329: QPDFObjectHandle dictionary empty set for getKeys 0",
          "330: QPDFObjectHandle dictionary empty map for asMap 0",
          "331: QPDFObjectHandle dictionary ignoring replaceKey 0",
          "332: QPDFObjectHandle dictionary ignoring removeKey 0",
          "333: QPDFObjectHandle dictionary ignoring removereplace 0",
          "334: QPDFObjectHandle numeric non-numeric 0",
          "335: QPDFObjectHandle erase array bounds 0",
          "",
          "---------------"
        ],
        "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test": [
          "File: qpdf/qtest/qpdf.test -> qpdf/qtest/qpdf.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "212:     [\"99\", \"object 0\", 2],",
          "213:     [\"99b\", \"object 0\", 2],",
          "214:     [\"100\", \"xref reconstruction loop\", 2],",
          "216:     [\"117\", \"other infinite loop\", 2],",
          "217:     [\"118\", \"other infinite loop\", 2],",
          "218:     [\"119\", \"other infinite loop\", 3],",
          "",
          "[Removed Lines]",
          "215:     [\"101\", \"resolve for exception text\", 2],",
          "",
          "[Added Lines]",
          "215:     [\"101\", \"resolve for exception text\", 3],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "735:              $td->NORMALIZE_NEWLINES);",
          "737: show_ntests();",
          "738: # ----------",
          "739: $td->notify(\"--- Coalesce contents ---\");",
          "740: $n_tests += 6;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "738: # ----------",
          "739: $td->notify(\"--- Type checks ---\");",
          "740: $n_tests += 4;",
          "741: # Whenever object-types.pdf is edited, object-types-os.pdf should be",
          "742: # regenerated.",
          "743: $td->runtest(\"ensure object-types-os is up-to-date\",",
          "744:              {$td->COMMAND =>",
          "745:                   \"qpdf\" .",
          "746:                   \" --object-streams=generate\" .",
          "747:                   \" --deterministic-id\" .",
          "748:                   \" --stream-data=uncompress\" .",
          "749:                   \" object-types.pdf a.pdf\"},",
          "750:              {$td->STRING => \"\", $td->EXIT_STATUS => 0});",
          "751: $td->runtest(\"check file\",",
          "752:              {$td->FILE => \"a.pdf\"},",
          "753:              {$td->FILE => \"object-types-os.pdf\"});",
          "754: $td->runtest(\"type checks\",",
          "755:              {$td->COMMAND => \"test_driver 42 object-types.pdf\"},",
          "756:              {$td->FILE => \"object-types.out\",",
          "757:               $td->EXIT_STATUS => 0},",
          "758:              $td->NORMALIZE_NEWLINES);",
          "759: $td->runtest(\"type checks with object streams\",",
          "760:              {$td->COMMAND => \"test_driver 42 object-types-os.pdf\"},",
          "761:              {$td->FILE => \"object-types-os.out\",",
          "762:               $td->EXIT_STATUS => 0},",
          "763:              $td->NORMALIZE_NEWLINES);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1200: # have error conditions that used to be fatal but are now considered",
          "1201: # non-fatal.",
          "1202: my %badtest_overrides = ();",
          "1204: {",
          "1205:     $badtest_overrides{$_} = 0;",
          "1206: }",
          "",
          "[Removed Lines]",
          "1203: for(6, 12..15, 17, 22..28, 30..32, 34, 36)",
          "",
          "[Added Lines]",
          "1230: for(6, 12..15, 17, 18..32, 34, 36)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1243: # though in some cases it may.  Acrobat Reader would not be able to",
          "1244: # recover any of these files any better.",
          "1245: my %recover_failures = ();",
          "1247: {",
          "1248:     $recover_failures{$_} = 1;",
          "1249: }",
          "",
          "[Removed Lines]",
          "1246: for (1, 7, 16, 18..21, 29, 35)",
          "",
          "[Added Lines]",
          "1273: for (1, 7, 16, 35)",
          "",
          "---------------"
        ],
        "qpdf/test_driver.cc||qpdf/test_driver.cc": [
          "File: qpdf/test_driver.cc -> qpdf/test_driver.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1390:         w.setStaticID(true);",
          "1391:         w.write();",
          "1392:     }",
          "1393:     else",
          "1394:     {",
          "1395:  throw std::runtime_error(std::string(\"invalid test \") +",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1393:     else if (n == 42)",
          "1394:     {",
          "1397:         QPDFObjectHandle qtest = pdf.getTrailer().getKey(\"/QTest\");",
          "1398:         QPDFObjectHandle array = qtest.getKey(\"/Dictionary\").getKey(\"/Key2\");",
          "1399:         QPDFObjectHandle dictionary = qtest.getKey(\"/Dictionary\");",
          "1400:         QPDFObjectHandle integer = qtest.getKey(\"/Integer\");",
          "1401:         QPDFObjectHandle null = QPDFObjectHandle::newNull();",
          "1402:         assert(array.isArray());",
          "1403:         assert(dictionary.isDictionary());",
          "1404:         assert(\"\" == qtest.getStringValue());",
          "1405:         array.getArrayItem(-1).assertNull();",
          "1406:         array.getArrayItem(16059).assertNull();",
          "1407:         integer.getArrayItem(0).assertNull();",
          "1408:         integer.appendItem(null);",
          "1409:         array.eraseItem(-1);",
          "1410:         array.eraseItem(16059);",
          "1411:         integer.eraseItem(0);",
          "1412:         integer.insertItem(0, null);",
          "1413:         integer.setArrayFromVector(std::vector<QPDFObjectHandle>());",
          "1414:         integer.setArrayItem(0, null);",
          "1415:         assert(0 == integer.getArrayNItems());",
          "1416:         assert(integer.getArrayAsVector().empty());",
          "1417:         assert(false == integer.getBoolValue());",
          "1418:         assert(integer.getDictAsMap().empty());",
          "1419:         assert(integer.getKeys().empty());",
          "1420:         assert(false == integer.hasKey(\"/Potato\"));",
          "1421:         integer.removeKey(\"/Potato\");",
          "1422:         integer.replaceOrRemoveKey(\"/Potato\", null);",
          "1423:         integer.replaceOrRemoveKey(\"/Potato\", QPDFObjectHandle::newInteger(1));",
          "1424:         integer.replaceKey(\"/Potato\", QPDFObjectHandle::newInteger(1));",
          "1425:         qtest.getKey(\"/Integer\").getKey(\"/Potato\");",
          "1426:         assert(integer.getInlineImageValue().empty());",
          "1427:         assert(0 == dictionary.getIntValue());",
          "1428:         assert(\"/QPDFFakeName\" == integer.getName());",
          "1429:         assert(\"QPDFFAKE\" == integer.getOperatorValue());",
          "1430:         assert(\"0.0\" == dictionary.getRealValue());",
          "1431:         assert(integer.getStringValue().empty());",
          "1432:         assert(integer.getUTF8Value().empty());",
          "1433:         assert(0.0 == dictionary.getNumericValue());",
          "1435:         std::cerr << \"One error\\n\";",
          "1436:         assert(array.getArrayItem(0).getStringValue().empty());",
          "1437:         std::cerr << \"One error\\n\";",
          "1438:         assert(dictionary.getKey(\"/Quack\").getStringValue().empty());",
          "1439:         assert(array.getArrayItem(1).isDictionary());",
          "1440:         assert(array.getArrayItem(1).getKey(\"/K\").isArray());",
          "1441:         assert(array.getArrayItem(1).getKey(\"/K\").getArrayItem(0).isName());",
          "1442:         assert(\"/V\" ==",
          "1443:                array.getArrayItem(1).getKey(\"/K\").getArrayItem(0).getName());",
          "1444:         std::cerr << \"Two errors\\n\";",
          "1445:         assert(array.getArrayItem(16059).getStringValue().empty());",
          "1446:         std::cerr << \"One error\\n\";",
          "1447:         array.getArrayItem(1).getKey(\"/K\").getArrayItem(0).getStringValue();",
          "1449:         QPDFObjectHandle page = pdf.getAllPages()[0];",
          "1450:         assert(\"/QPDFFakeName\" ==",
          "1451:                page.getKey(\"/Contents\").getDict().getKey(\"/Potato\").getName());",
          "1452:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}