{
  "cve_id": "CVE-2017-6504",
  "cve_desc": "WebUI in qBittorrent before 3.3.11 did not set the X-Frame-Options header, which could potentially lead to clickjacking.",
  "repo": "qbittorrent/qBittorrent",
  "patch_hash": "f5ad04766f4abaa78374ff03704316f8ce04627d",
  "patch_info": {
    "commit_hash": "f5ad04766f4abaa78374ff03704316f8ce04627d",
    "repo": "qbittorrent/qBittorrent",
    "commit_url": "https://github.com/qbittorrent/qBittorrent/commit/f5ad04766f4abaa78374ff03704316f8ce04627d",
    "files": [
      "src/base/http/types.h",
      "src/webui/abstractwebapplication.cpp"
    ],
    "message": "[WebUI] Avoid clickjacking attacks",
    "before_after_code_files": [
      "src/base/http/types.h||src/base/http/types.h",
      "src/webui/abstractwebapplication.cpp||src/webui/abstractwebapplication.cpp"
    ]
  },
  "patch_diff": {
    "src/base/http/types.h||src/base/http/types.h": [
      "File: src/base/http/types.h -> src/base/http/types.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "43:     const QString HEADER_CONTENT_ENCODING = \"Content-Encoding\";",
      "44:     const QString HEADER_CONTENT_LENGTH = \"Content-Length\";",
      "45:     const QString HEADER_CACHE_CONTROL = \"Cache-Control\";",
      "47:     const QString CONTENT_TYPE_CSS = \"text/css; charset=UTF-8\";",
      "48:     const QString CONTENT_TYPE_GIF = \"image/gif\";",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "46:     const QString HEADER_X_FRAME_OPTIONS = \"X-Frame-Options\";",
      "",
      "---------------"
    ],
    "src/webui/abstractwebapplication.cpp||src/webui/abstractwebapplication.cpp": [
      "File: src/webui/abstractwebapplication.cpp -> src/webui/abstractwebapplication.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "103:     request_ = request;",
      "104:     env_ = env;",
      "108:     sessionInitialize();",
      "109:     if (!sessionActive() && !isAuthNeeded())",
      "",
      "[Removed Lines]",
      "106:     clear(); // clear response",
      "",
      "[Added Lines]",
      "107:     clear();",
      "110:     header(Http::HEADER_X_FRAME_OPTIONS, \"SAMEORIGIN\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "45c21f62f9a9230eb5d57c03de13f4a9b419bcee",
      "candidate_info": {
        "commit_hash": "45c21f62f9a9230eb5d57c03de13f4a9b419bcee",
        "repo": "qbittorrent/qBittorrent",
        "commit_url": "https://github.com/qbittorrent/qBittorrent/commit/45c21f62f9a9230eb5d57c03de13f4a9b419bcee",
        "files": [
          "src/base/http/types.h"
        ],
        "message": "[WebAPI] Convert all header name constants to lowercase\n\nThis save us another transition when some day we implements HTTP/2\n(which all headers are in lowercase).",
        "before_after_code_files": [
          "src/base/http/types.h||src/base/http/types.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/base/http/types.h||src/base/http/types.h"
          ],
          "candidate": [
            "src/base/http/types.h||src/base/http/types.h"
          ]
        }
      },
      "candidate_diff": {
        "src/base/http/types.h||src/base/http/types.h": [
          "File: src/base/http/types.h -> src/base/http/types.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: namespace Http",
          "39: {",
          "46:     const char HEADER_HOST[] = \"host\";",
          "47:     const char HEADER_ORIGIN[] = \"origin\";",
          "48:     const char HEADER_REFERER[] = \"referer\";",
          "51:     const char HEADER_X_FORWARDED_HOST[] = \"x-forwarded-host\";",
          "55:     const char CONTENT_TYPE_CSS[] = \"text/css; charset=UTF-8\";",
          "56:     const char CONTENT_TYPE_GIF[] = \"image/gif\";",
          "",
          "[Removed Lines]",
          "40:     const char HEADER_CACHE_CONTROL[] = \"Cache-Control\";",
          "41:     const char HEADER_CONTENT_ENCODING[] = \"Content-Encoding\";",
          "42:     const char HEADER_CONTENT_LENGTH[] = \"Content-Length\";",
          "43:     const char HEADER_CONTENT_SECURITY_POLICY[] = \"Content-Security-Policy\";",
          "44:     const char HEADER_CONTENT_TYPE[] = \"Content-Type\";",
          "45:     const char HEADER_DATE[] = \"Date\";",
          "49:     const char HEADER_SET_COOKIE[] = \"Set-Cookie\";",
          "50:     const char HEADER_X_CONTENT_TYPE_OPTIONS[] = \"X-Content-Type-Options\";",
          "52:     const char HEADER_X_FRAME_OPTIONS[] = \"X-Frame-Options\";",
          "53:     const char HEADER_X_XSS_PROTECTION[] = \"X-XSS-Protection\";",
          "",
          "[Added Lines]",
          "40:     const char HEADER_CACHE_CONTROL[] = \"cache-control\";",
          "41:     const char HEADER_CONTENT_ENCODING[] = \"content-encoding\";",
          "42:     const char HEADER_CONTENT_LENGTH[] = \"content-length\";",
          "43:     const char HEADER_CONTENT_SECURITY_POLICY[] = \"content-security-policy\";",
          "44:     const char HEADER_CONTENT_TYPE[] = \"content-type\";",
          "45:     const char HEADER_DATE[] = \"date\";",
          "49:     const char HEADER_SET_COOKIE[] = \"set-cookie\";",
          "50:     const char HEADER_X_CONTENT_TYPE_OPTIONS[] = \"x-content-type-options\";",
          "52:     const char HEADER_X_FRAME_OPTIONS[] = \"x-frame-options\";",
          "53:     const char HEADER_X_XSS_PROTECTION[] = \"x-xss-protection\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7756dd80f38a51752cfb0df917744c2680ca923b",
      "candidate_info": {
        "commit_hash": "7756dd80f38a51752cfb0df917744c2680ca923b",
        "repo": "qbittorrent/qBittorrent",
        "commit_url": "https://github.com/qbittorrent/qBittorrent/commit/7756dd80f38a51752cfb0df917744c2680ca923b",
        "files": [
          "src/base/http/types.h",
          "src/webui/abstractwebapplication.cpp"
        ],
        "message": "[WebUI]: add X-XSS-Protection, X-Content-Type-Options, CSP header",
        "before_after_code_files": [
          "src/base/http/types.h||src/base/http/types.h",
          "src/webui/abstractwebapplication.cpp||src/webui/abstractwebapplication.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/base/http/types.h||src/base/http/types.h",
            "src/webui/abstractwebapplication.cpp||src/webui/abstractwebapplication.cpp"
          ],
          "candidate": [
            "src/base/http/types.h||src/base/http/types.h",
            "src/webui/abstractwebapplication.cpp||src/webui/abstractwebapplication.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/base/http/types.h||src/base/http/types.h": [
          "File: src/base/http/types.h -> src/base/http/types.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:     const QString HEADER_CONTENT_LENGTH = \"Content-Length\";",
          "45:     const QString HEADER_CACHE_CONTROL = \"Cache-Control\";",
          "46:     const QString HEADER_X_FRAME_OPTIONS = \"X-Frame-Options\";",
          "48:     const QString CONTENT_TYPE_CSS = \"text/css; charset=UTF-8\";",
          "49:     const QString CONTENT_TYPE_GIF = \"image/gif\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:     const QString HEADER_X_XSS_PROTECTION = \"X-XSS-Protection\";",
          "48:     const QString HEADER_X_CONTENT_TYPE_OPTIONS = \"X-Content-Type-Options\";",
          "49:     const QString HEADER_CONTENT_SECURITY_POLICY = \"Content-Security-Policy\";",
          "",
          "---------------"
        ],
        "src/webui/abstractwebapplication.cpp||src/webui/abstractwebapplication.cpp": [
          "File: src/webui/abstractwebapplication.cpp -> src/webui/abstractwebapplication.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:     header(Http::HEADER_X_FRAME_OPTIONS, \"SAMEORIGIN\");",
          "112:     sessionInitialize();",
          "113:     if (!sessionActive() && !isAuthNeeded())",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:     header(Http::HEADER_X_XSS_PROTECTION, \"1; mode=block\");",
          "112:     header(Http::HEADER_X_CONTENT_TYPE_OPTIONS, \"nosniff\");",
          "113:     header(Http::HEADER_CONTENT_SECURITY_POLICY, \"default-src 'self' 'unsafe-inline' 'unsafe-eval';\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "829e1399ca03642b49078e4959df14deb442cece",
      "candidate_info": {
        "commit_hash": "829e1399ca03642b49078e4959df14deb442cece",
        "repo": "qbittorrent/qBittorrent",
        "commit_url": "https://github.com/qbittorrent/qBittorrent/commit/829e1399ca03642b49078e4959df14deb442cece",
        "files": [
          "src/base/http/types.h"
        ],
        "message": "Convert Qstring to char arrays\n\nCleanup header\nSort constants",
        "before_after_code_files": [
          "src/base/http/types.h||src/base/http/types.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/base/http/types.h||src/base/http/types.h"
          ],
          "candidate": [
            "src/base/http/types.h||src/base/http/types.h"
          ]
        }
      },
      "candidate_diff": {
        "src/base/http/types.h||src/base/http/types.h": [
          "File: src/base/http/types.h -> src/base/http/types.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #ifndef HTTP_TYPES_H",
          "30: #define HTTP_TYPES_H",
          "34: #include <QHostAddress>",
          "35: #include <QVector>",
          "37: #include \"base/types.h\"",
          "39: namespace Http",
          "40: {",
          "60:     struct Environment",
          "61:     {",
          "",
          "[Removed Lines]",
          "32: #include <QString>",
          "33: #include <QMap>",
          "41:     const QString HEADER_SET_COOKIE = \"Set-Cookie\";",
          "42:     const QString HEADER_CONTENT_TYPE = \"Content-Type\";",
          "43:     const QString HEADER_CONTENT_ENCODING = \"Content-Encoding\";",
          "44:     const QString HEADER_CONTENT_LENGTH = \"Content-Length\";",
          "45:     const QString HEADER_CACHE_CONTROL = \"Cache-Control\";",
          "46:     const QString HEADER_X_FRAME_OPTIONS = \"X-Frame-Options\";",
          "47:     const QString HEADER_X_XSS_PROTECTION = \"X-XSS-Protection\";",
          "48:     const QString HEADER_X_CONTENT_TYPE_OPTIONS = \"X-Content-Type-Options\";",
          "49:     const QString HEADER_CONTENT_SECURITY_POLICY = \"Content-Security-Policy\";",
          "50:     const QString HEADER_DATE = \"Date\";",
          "52:     const QString CONTENT_TYPE_CSS = \"text/css; charset=UTF-8\";",
          "53:     const QString CONTENT_TYPE_GIF = \"image/gif\";",
          "54:     const QString CONTENT_TYPE_HTML = \"text/html; charset=UTF-8\";",
          "55:     const QString CONTENT_TYPE_JS = \"application/javascript; charset=UTF-8\";",
          "56:     const QString CONTENT_TYPE_JSON = \"application/json\";",
          "57:     const QString CONTENT_TYPE_PNG = \"image/png\";",
          "58:     const QString CONTENT_TYPE_TXT = \"text/plain; charset=UTF-8\";",
          "",
          "[Added Lines]",
          "33: #include <QString>",
          "40:     const char HEADER_CACHE_CONTROL[] = \"Cache-Control\";",
          "41:     const char HEADER_CONTENT_ENCODING[] = \"Content-Encoding\";",
          "42:     const char HEADER_CONTENT_LENGTH[] = \"Content-Length\";",
          "43:     const char HEADER_CONTENT_SECURITY_POLICY[] = \"Content-Security-Policy\";",
          "44:     const char HEADER_CONTENT_TYPE[] = \"Content-Type\";",
          "45:     const char HEADER_DATE[] = \"Date\";",
          "46:     const char HEADER_SET_COOKIE[] = \"Set-Cookie\";",
          "47:     const char HEADER_X_CONTENT_TYPE_OPTIONS[] = \"X-Content-Type-Options\";",
          "48:     const char HEADER_X_FRAME_OPTIONS[] = \"X-Frame-Options\";",
          "49:     const char HEADER_X_XSS_PROTECTION[] = \"X-XSS-Protection\";",
          "51:     const char CONTENT_TYPE_CSS[] = \"text/css; charset=UTF-8\";",
          "52:     const char CONTENT_TYPE_GIF[] = \"image/gif\";",
          "53:     const char CONTENT_TYPE_HTML[] = \"text/html; charset=UTF-8\";",
          "54:     const char CONTENT_TYPE_JS[] = \"application/javascript; charset=UTF-8\";",
          "55:     const char CONTENT_TYPE_JSON[] = \"application/json\";",
          "56:     const char CONTENT_TYPE_PNG[] = \"image/png\";",
          "57:     const char CONTENT_TYPE_TXT[] = \"text/plain; charset=UTF-8\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4b2266a8e23d262b2ad7ce7b63a44ef70f1e90e9",
      "candidate_info": {
        "commit_hash": "4b2266a8e23d262b2ad7ce7b63a44ef70f1e90e9",
        "repo": "qbittorrent/qBittorrent",
        "commit_url": "https://github.com/qbittorrent/qBittorrent/commit/4b2266a8e23d262b2ad7ce7b63a44ef70f1e90e9",
        "files": [
          "src/base/http/responsegenerator.cpp",
          "src/base/http/responsegenerator.h",
          "src/base/http/types.h"
        ],
        "message": "Send Date http header\n\nIt's not strict required but often expected.\nchange class to namespace\ncleanup header",
        "before_after_code_files": [
          "src/base/http/responsegenerator.cpp||src/base/http/responsegenerator.cpp",
          "src/base/http/responsegenerator.h||src/base/http/responsegenerator.h",
          "src/base/http/types.h||src/base/http/types.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/base/http/types.h||src/base/http/types.h"
          ],
          "candidate": [
            "src/base/http/types.h||src/base/http/types.h"
          ]
        }
      },
      "candidate_diff": {
        "src/base/http/responsegenerator.cpp||src/base/http/responsegenerator.cpp": [
          "File: src/base/http/responsegenerator.cpp -> src/base/http/responsegenerator.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #include \"responsegenerator.h\"",
          "35: using namespace Http;",
          "37: QByteArray ResponseGenerator::generate(Response response)",
          "",
          "[Removed Lines]",
          "32: #include \"base/utils/gzip.h\"",
          "",
          "[Added Lines]",
          "34: #include <QDateTime>",
          "36: #include \"base/utils/gzip.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:     }",
          "51:     response.headers[HEADER_CONTENT_LENGTH] = QString::number(response.content.length());",
          "53:     QString ret(QLatin1String(\"HTTP/1.1 %1 %2\\r\\n%3\\r\\n\"));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:     response.headers[HEADER_DATE] = httpDate();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "65:     return ret.toUtf8() + response.content;",
          "66: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72: QString ResponseGenerator::httpDate()",
          "73: {",
          "77:     return QLocale::c().toString(QDateTime::currentDateTimeUtc(), QLatin1String(\"ddd, dd MMM yyyy HH:mm:ss\"))",
          "78:         .append(QLatin1String(\" GMT\"));",
          "79: }",
          "",
          "---------------"
        ],
        "src/base/http/responsegenerator.h||src/base/http/responsegenerator.h": [
          "File: src/base/http/responsegenerator.h -> src/base/http/responsegenerator.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: namespace Http",
          "39: {",
          "41:     {",
          "44:     };",
          "45: }",
          "",
          "[Removed Lines]",
          "40:     class ResponseGenerator",
          "42:     public:",
          "43:         static QByteArray generate(Response response);",
          "",
          "[Added Lines]",
          "40:     namespace ResponseGenerator",
          "42:         QByteArray generate(Response response);",
          "43:         QString httpDate();",
          "",
          "---------------"
        ],
        "src/base/http/types.h||src/base/http/types.h": [
          "File: src/base/http/types.h -> src/base/http/types.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     const QString HEADER_X_XSS_PROTECTION = \"X-XSS-Protection\";",
          "48:     const QString HEADER_X_CONTENT_TYPE_OPTIONS = \"X-Content-Type-Options\";",
          "49:     const QString HEADER_CONTENT_SECURITY_POLICY = \"Content-Security-Policy\";",
          "51:     const QString CONTENT_TYPE_CSS = \"text/css; charset=UTF-8\";",
          "52:     const QString CONTENT_TYPE_GIF = \"image/gif\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:     const QString HEADER_DATE = \"Date\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f9f7a8cbf26c713417e8bea3441d6f28ffe63655",
      "candidate_info": {
        "commit_hash": "f9f7a8cbf26c713417e8bea3441d6f28ffe63655",
        "repo": "qbittorrent/qBittorrent",
        "commit_url": "https://github.com/qbittorrent/qBittorrent/commit/f9f7a8cbf26c713417e8bea3441d6f28ffe63655",
        "files": [
          "src/base/http/types.h",
          "src/webui/abstractwebapplication.cpp"
        ],
        "message": "[WebUI] Avoid clickjacking attacks",
        "before_after_code_files": [
          "src/base/http/types.h||src/base/http/types.h",
          "src/webui/abstractwebapplication.cpp||src/webui/abstractwebapplication.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/base/http/types.h||src/base/http/types.h",
            "src/webui/abstractwebapplication.cpp||src/webui/abstractwebapplication.cpp"
          ],
          "candidate": [
            "src/base/http/types.h||src/base/http/types.h",
            "src/webui/abstractwebapplication.cpp||src/webui/abstractwebapplication.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/base/http/types.h||src/base/http/types.h": [
          "File: src/base/http/types.h -> src/base/http/types.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:     const QString HEADER_CONTENT_ENCODING = \"Content-Encoding\";",
          "44:     const QString HEADER_CONTENT_LENGTH = \"Content-Length\";",
          "45:     const QString HEADER_CACHE_CONTROL = \"Cache-Control\";",
          "47:     const QString CONTENT_TYPE_CSS = \"text/css; charset=UTF-8\";",
          "48:     const QString CONTENT_TYPE_GIF = \"image/gif\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:     const QString HEADER_X_FRAME_OPTIONS = \"X-Frame-Options\";",
          "",
          "---------------"
        ],
        "src/webui/abstractwebapplication.cpp||src/webui/abstractwebapplication.cpp": [
          "File: src/webui/abstractwebapplication.cpp -> src/webui/abstractwebapplication.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:     request_ = request;",
          "102:     env_ = env;",
          "106:     sessionInitialize();",
          "107:     if (!sessionActive() && !isAuthNeeded())",
          "",
          "[Removed Lines]",
          "104:     clear(); // clear response",
          "",
          "[Added Lines]",
          "105:     clear();",
          "108:     header(Http::HEADER_X_FRAME_OPTIONS, \"SAMEORIGIN\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}