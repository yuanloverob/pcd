{
  "cve_id": "CVE-2018-16391",
  "cve_desc": "Several buffer overflows when handling responses from a Muscle Card in muscle_list_files in libopensc/card-muscle.c in OpenSC before 0.19.0-rc1 could be used by attackers able to supply crafted smartcards to cause a denial of service (application crash) or possibly have unspecified other impact.",
  "repo": "OpenSC/OpenSC",
  "patch_hash": "360e95d45ac4123255a4c796db96337f332160ad",
  "patch_info": {
    "commit_hash": "360e95d45ac4123255a4c796db96337f332160ad",
    "repo": "OpenSC/OpenSC",
    "commit_url": "https://github.com/OpenSC/OpenSC/commit/360e95d45ac4123255a4c796db96337f332160ad",
    "files": [
      "src/libopensc/card-cac.c",
      "src/libopensc/card-epass2003.c",
      "src/libopensc/card-muscle.c",
      "src/libopensc/card-tcos.c",
      "src/libopensc/pkcs15-esteid.c",
      "src/libopensc/pkcs15-gemsafeV1.c",
      "src/libopensc/pkcs15-sc-hsm.c",
      "src/libopensc/sc.c",
      "src/tools/cryptoflex-tool.c",
      "src/tools/egk-tool.c",
      "src/tools/util.c"
    ],
    "message": "fixed out of bounds writes\n\nThanks to Eric Sesterhenn from X41 D-SEC GmbH\nfor reporting the problems.",
    "before_after_code_files": [
      "src/libopensc/card-cac.c||src/libopensc/card-cac.c",
      "src/libopensc/card-epass2003.c||src/libopensc/card-epass2003.c",
      "src/libopensc/card-muscle.c||src/libopensc/card-muscle.c",
      "src/libopensc/card-tcos.c||src/libopensc/card-tcos.c",
      "src/libopensc/pkcs15-esteid.c||src/libopensc/pkcs15-esteid.c",
      "src/libopensc/pkcs15-gemsafeV1.c||src/libopensc/pkcs15-gemsafeV1.c",
      "src/libopensc/pkcs15-sc-hsm.c||src/libopensc/pkcs15-sc-hsm.c",
      "src/libopensc/sc.c||src/libopensc/sc.c",
      "src/tools/cryptoflex-tool.c||src/tools/cryptoflex-tool.c",
      "src/tools/egk-tool.c||src/tools/egk-tool.c",
      "src/tools/util.c||src/tools/util.c"
    ]
  },
  "patch_diff": {
    "src/libopensc/card-cac.c||src/libopensc/card-cac.c": [
      "File: src/libopensc/card-cac.c -> src/libopensc/card-cac.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "794:         }",
      "795:  if (priv->cac_id_len) {",
      "796:   serial->len = MIN(priv->cac_id_len, SC_MAX_SERIALNR);",
      "798:   SC_FUNC_RETURN(card->ctx, SC_LOG_DEBUG_NORMAL, SC_SUCCESS);",
      "799:  }",
      "800:  SC_FUNC_RETURN(card->ctx, SC_LOG_DEBUG_NORMAL, SC_ERROR_FILE_NOT_FOUND);",
      "",
      "[Removed Lines]",
      "797:   memcpy(serial->value, priv->cac_id, priv->cac_id_len);",
      "",
      "[Added Lines]",
      "797:   memcpy(serial->value, priv->cac_id, serial->len);",
      "",
      "---------------"
    ],
    "src/libopensc/card-epass2003.c||src/libopensc/card-epass2003.c": [
      "File: src/libopensc/card-epass2003.c -> src/libopensc/card-epass2003.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "951:  while (0x80 != plaintext[cipher_len - 2] && (cipher_len - 2 > 0))",
      "952:   cipher_len--;",
      "955:   return -1;",
      "957:  memcpy(out, plaintext, cipher_len - 2);",
      "",
      "[Removed Lines]",
      "954:  if (2 == cipher_len)",
      "",
      "[Added Lines]",
      "954:  if (2 == cipher_len || *out_len < cipher_len - 2)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "977:  r = sc_check_sw(card, sm->sw1, sm->sw2);",
      "978:  if (r == SC_SUCCESS) {",
      "979:   if (exdata->sm) {",
      "980:    if (0 != decrypt_response(card, sm->resp, sm->resplen, plain->resp, &len))",
      "981:     return SC_ERROR_CARD_CMD_FAILED;",
      "982:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "980:    len = plain->resplen;",
      "",
      "---------------"
    ],
    "src/libopensc/card-muscle.c||src/libopensc/card-muscle.c": [
      "File: src/libopensc/card-muscle.c -> src/libopensc/card-muscle.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "518:  mscfs_check_cache(priv->fs);",
      "520:  for(x = 0; x < fs->cache.size; x++) {",
      "522:   sc_debug(card->ctx, SC_LOG_DEBUG_NORMAL,",
      "523:    \"FILE: %02X%02X%02X%02X\\n\",",
      "524:    oid[0],oid[1],oid[2],oid[3]);",
      "",
      "[Removed Lines]",
      "521:   u8* oid= fs->cache.array[x].objectId.id;",
      "",
      "[Added Lines]",
      "521:   u8* oid = fs->cache.array[x].objectId.id;",
      "522:   if (bufLen < 2)",
      "523:    break;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "527:    buf[1] = oid[3];",
      "529:    buf += 2;",
      "531:   }",
      "532:  }",
      "533:  return count;",
      "",
      "[Removed Lines]",
      "530:    count+=2;",
      "",
      "[Added Lines]",
      "532:    count += 2;",
      "533:    bufLen -= 2;",
      "",
      "---------------"
    ],
    "src/libopensc/card-tcos.c||src/libopensc/card-tcos.c": [
      "File: src/libopensc/card-tcos.c -> src/libopensc/card-tcos.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "408:  file->path = *in_path;",
      "410:  for(i=2; i+1<apdu.resplen && i+1+apdu.resp[i+1]<apdu.resplen; i+=2+apdu.resp[i+1]){",
      "412:   unsigned char type=apdu.resp[i], *d=apdu.resp+i+2;",
      "414:   switch (type) {",
      "",
      "[Removed Lines]",
      "411:   int j, len=apdu.resp[i+1];",
      "",
      "[Added Lines]",
      "411:   size_t j, len=apdu.resp[i+1];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "432:    file->id = (d[0]<<8) | d[1];",
      "433:    break;",
      "434:   case 0x84:",
      "437:    break;",
      "438:   case 0x86:",
      "439:    sc_file_set_sec_attr(file, d, len);",
      "",
      "[Removed Lines]",
      "435:    memcpy(file->name, d, len);",
      "436:    file->namelen = len;",
      "",
      "[Added Lines]",
      "435:    file->namelen = MIN(sizeof file->name, len);",
      "436:    memcpy(file->name, d, file->namelen);",
      "",
      "---------------"
    ],
    "src/libopensc/pkcs15-esteid.c||src/libopensc/pkcs15-esteid.c": [
      "File: src/libopensc/pkcs15-esteid.c -> src/libopensc/pkcs15-esteid.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "80:  r = sc_read_record (card, SC_ESTEID_PD_DOCUMENT_NR, buff, sizeof(buff), SC_RECORD_BY_REC_NR);",
      "81:  SC_TEST_RET(card->ctx, SC_LOG_DEBUG_NORMAL, r, \"read document number failed\");",
      "83:  set_string (&p15card->tokeninfo->serial_number, (const char *) buff);",
      "85:  p15card->tokeninfo->flags = SC_PKCS15_TOKEN_PRN_GENERATION",
      "",
      "[Removed Lines]",
      "82:  buff[r] = '\\0';",
      "",
      "[Added Lines]",
      "82:  buff[MIN((size_t) r, (sizeof buff)-1)] = '\\0';",
      "",
      "---------------"
    ],
    "src/libopensc/pkcs15-gemsafeV1.c||src/libopensc/pkcs15-gemsafeV1.c": [
      "File: src/libopensc/pkcs15-gemsafeV1.c -> src/libopensc/pkcs15-gemsafeV1.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "212:   if (ibuf[ind+1] == 0xFE) {",
      "213:    gemsafe_prkeys[i].ref = ibuf[ind+4];",
      "214:    sc_log(card->ctx, \"Key container %d is allocated and uses key_ref %d\",",
      "",
      "[Removed Lines]",
      "211:  while (ibuf[ind] == 0x01) {",
      "",
      "[Added Lines]",
      "211:  while (ibuf[ind] == 0x01 && i < gemsafe_cert_max) {",
      "",
      "---------------"
    ],
    "src/libopensc/pkcs15-sc-hsm.c||src/libopensc/pkcs15-sc-hsm.c": [
      "File: src/libopensc/pkcs15-sc-hsm.c -> src/libopensc/pkcs15-sc-hsm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "837:   r = read_file(p15card, (u8 *) \"\\x2F\\x02\", efbin, &len, 1);",
      "838:   LOG_TEST_RET(card->ctx, r, \"Skipping optional EF.C_DevAut\");",
      "846:   }",
      "848:   ptr = efbin;",
      "",
      "[Removed Lines]",
      "841:   ptr = realloc(priv->EF_C_DevAut, len);",
      "842:   if (ptr) {",
      "843:    memcpy(ptr, efbin, len);",
      "844:    priv->EF_C_DevAut = ptr;",
      "845:    priv->EF_C_DevAut_len = len;",
      "",
      "[Added Lines]",
      "840:   if (len > 0) {",
      "842:    ptr = realloc(priv->EF_C_DevAut, len);",
      "843:    if (ptr) {",
      "844:     memcpy(ptr, efbin, len);",
      "845:     priv->EF_C_DevAut = ptr;",
      "846:     priv->EF_C_DevAut_len = len;",
      "847:    }",
      "",
      "---------------"
    ],
    "src/libopensc/sc.c||src/libopensc/sc.c": [
      "File: src/libopensc/sc.c -> src/libopensc/sc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "628:   return SC_ERROR_INVALID_ARGUMENTS;",
      "629:  }",
      "632:   if (file->sec_attr != NULL)",
      "633:    free(file->sec_attr);",
      "634:   file->sec_attr = NULL;",
      "",
      "[Removed Lines]",
      "631:  if (sec_attr == NULL) {",
      "",
      "[Added Lines]",
      "631:  if (sec_attr == NULL || sec_attr_len) {",
      "",
      "---------------"
    ],
    "src/tools/cryptoflex-tool.c||src/tools/cryptoflex-tool.c": [
      "File: src/tools/cryptoflex-tool.c -> src/tools/cryptoflex-tool.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "21: #include \"config.h\"",
      "23: #include \"libopensc/sc-ossl-compat.h\"",
      "24: #include <openssl/bn.h>",
      "25: #include <openssl/rsa.h>",
      "26: #include <openssl/x509.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: #include \"libopensc/internal.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "331:   fprintf(stderr, \"Unable to select public key file: %s\\n\", sc_strerror(r));",
      "332:   return 2;",
      "333:  }",
      "335:  sc_file_free(file);",
      "336:  r = sc_read_binary(card, 0, buf, bufsize, 0);",
      "337:  if (r < 0) {",
      "",
      "[Removed Lines]",
      "334:  bufsize = file->size;",
      "",
      "[Added Lines]",
      "335:  bufsize = MIN(file->size, sizeof buf);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "382:  e = sc_file_get_acl_entry(file, SC_AC_OP_READ);",
      "383:  if (e == NULL || e->method == SC_AC_NEVER)",
      "384:   return 10;",
      "386:  sc_file_free(file);",
      "387:  r = sc_read_binary(card, 0, buf, bufsize, 0);",
      "388:  if (r < 0) {",
      "",
      "[Removed Lines]",
      "385:  bufsize = file->size;",
      "",
      "[Added Lines]",
      "386:  bufsize = MIN(file->size, sizeof buf);",
      "",
      "---------------"
    ],
    "src/tools/egk-tool.c||src/tools/egk-tool.c": [
      "File: src/tools/egk-tool.c -> src/tools/egk-tool.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   goto err;",
      "150:  }",
      "153:  p = realloc(*data, len);",
      "154:  if (!p) {",
      "155:   goto err;",
      "",
      "[Removed Lines]",
      "152:  len = file ? file->size : 4096;",
      "",
      "[Added Lines]",
      "152:  len = file && file->size > 0 ? file->size : 4096;",
      "",
      "---------------"
    ],
    "src/tools/util.c||src/tools/util.c": [
      "File: src/tools/util.c -> src/tools/util.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "339:    strcpy(buf, \"????\");",
      "340:    break;",
      "341:   }",
      "344:   e = e->next;",
      "345:  }",
      "347:  return line;",
      "348: }",
      "",
      "[Removed Lines]",
      "342:   strcat(line, buf);",
      "343:   strcat(line, \" \");",
      "",
      "[Added Lines]",
      "342:   strncat(line, buf, sizeof line);",
      "343:   strncat(line, \" \", sizeof line);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "39bd1ddd58dda4d09ba69d712f51293adbe30b9f",
      "candidate_info": {
        "commit_hash": "39bd1ddd58dda4d09ba69d712f51293adbe30b9f",
        "repo": "OpenSC/OpenSC",
        "commit_url": "https://github.com/OpenSC/OpenSC/commit/39bd1ddd58dda4d09ba69d712f51293adbe30b9f",
        "files": [
          "src/libopensc/sc.c"
        ],
        "message": "fixed wrong condition\n\nfixes https://github.com/OpenSC/OpenSC/issues/1465",
        "before_after_code_files": [
          "src/libopensc/sc.c||src/libopensc/sc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/libopensc/sc.c||src/libopensc/sc.c"
          ],
          "candidate": [
            "src/libopensc/sc.c||src/libopensc/sc.c"
          ]
        }
      },
      "candidate_diff": {
        "src/libopensc/sc.c||src/libopensc/sc.c": [
          "File: src/libopensc/sc.c -> src/libopensc/sc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "628:   return SC_ERROR_INVALID_ARGUMENTS;",
          "629:  }",
          "632:   if (file->sec_attr != NULL)",
          "633:    free(file->sec_attr);",
          "634:   file->sec_attr = NULL;",
          "",
          "[Removed Lines]",
          "631:  if (sec_attr == NULL || sec_attr_len) {",
          "",
          "[Added Lines]",
          "631:  if (sec_attr == NULL || sec_attr_len == 0) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "83f45cda2af16b65264103fbe0394fd422f0120d",
      "candidate_info": {
        "commit_hash": "83f45cda2af16b65264103fbe0394fd422f0120d",
        "repo": "OpenSC/OpenSC",
        "commit_url": "https://github.com/OpenSC/OpenSC/commit/83f45cda2af16b65264103fbe0394fd422f0120d",
        "files": [
          "src/libopensc/card-setcos.c",
          "src/libopensc/errors.c",
          "src/libopensc/errors.h",
          "src/libopensc/simpletlv.c",
          "src/tools/util.c"
        ],
        "message": "Added bounds checking to sc_simpletlv_read_tag()\n\n- Logic is identical to sc_asn1_read_tag()\n- Fixes out of bounds access e.g. in cac_parse_CCC",
        "before_after_code_files": [
          "src/libopensc/card-setcos.c||src/libopensc/card-setcos.c",
          "src/libopensc/errors.c||src/libopensc/errors.c",
          "src/libopensc/errors.h||src/libopensc/errors.h",
          "src/libopensc/simpletlv.c||src/libopensc/simpletlv.c",
          "src/tools/util.c||src/tools/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/tools/util.c||src/tools/util.c"
          ],
          "candidate": [
            "src/tools/util.c||src/tools/util.c"
          ]
        }
      },
      "candidate_diff": {
        "src/libopensc/card-setcos.c||src/libopensc/card-setcos.c": [
          "File: src/libopensc/card-setcos.c -> src/libopensc/card-setcos.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "793:    break;",
          "",
          "[Removed Lines]",
          "791:   int iACLen   = buf[iOffset] & 0x0F;",
          "792:   if ((size_t) iACLen > len)",
          "",
          "[Added Lines]",
          "791:   size_t iACLen   = buf[iOffset] & 0x0F;",
          "792:   if (iACLen > len)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "810:    if(iKeyLen) {",
          "811:     int iSC;",
          "813:      break;",
          "814:     iSC = buf[iOffset+iACLen];",
          "",
          "[Removed Lines]",
          "812:     if (len < 1+iACLen)",
          "",
          "[Added Lines]",
          "812:     if (len < 1+(size_t)iACLen)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "834:      break;",
          "836:     iMethod = SC_AC_CHV;",
          "",
          "[Removed Lines]",
          "833:     if (len < 1+1+1+iParmLen)",
          "",
          "[Added Lines]",
          "833:     if (len < 1+1+1+(size_t)iParmLen)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "874:    if (buf[iOffset] & 0x20) {",
          "875:     int iSC;",
          "877:      break;",
          "878:     iSC = buf[iOffset + iACLen];",
          "",
          "[Removed Lines]",
          "876:     if (len < 1 + iACLen)",
          "",
          "[Added Lines]",
          "876:     if (len < 1 + (size_t)iACLen)",
          "",
          "---------------"
        ],
        "src/libopensc/errors.c||src/libopensc/errors.c": [
          "File: src/libopensc/errors.c -> src/libopensc/errors.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:   \"Unable to load external module\",",
          "105:   \"EF offset too large\",",
          "106:   \"Not implemented\"",
          "107:  };",
          "108:  const int int_base = -SC_ERROR_INTERNAL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107:   \"Invalid Simple TLV object\",",
          "108:   \"Premature end of Simple TLV stream\",",
          "",
          "---------------"
        ],
        "src/libopensc/errors.h||src/libopensc/errors.h": [
          "File: src/libopensc/errors.h -> src/libopensc/errors.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "95: #define SC_ERROR_CANNOT_LOAD_MODULE  -1414",
          "96: #define SC_ERROR_OFFSET_TOO_LARGE  -1415",
          "97: #define SC_ERROR_NOT_IMPLEMENTED  -1416",
          "100: #define SC_ERROR_PKCS15INIT   -1500",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98: #define SC_ERROR_INVALID_TLV_OBJECT  -1417",
          "99: #define SC_ERROR_TLV_END_OF_CONTENTS -1418",
          "",
          "---------------"
        ],
        "src/libopensc/simpletlv.c||src/libopensc/simpletlv.c": [
          "File: src/libopensc/simpletlv.c -> src/libopensc/simpletlv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "74: int",
          "75: sc_simpletlv_read_tag(u8 **buf, size_t buflen, u8 *tag_out, size_t *taglen)",
          "76: {",
          "78:  u8 *p = *buf;",
          "83:  }",
          "87:  if (len == 0xff) {",
          "92:   }",
          "94:   len = lebytes2ushort(p);",
          "96:  }",
          "99:  return SC_SUCCESS;",
          "100: }",
          "",
          "[Removed Lines]",
          "77:  size_t len;",
          "80:  if (buflen < 2) {",
          "82:   return SC_ERROR_INVALID_ARGUMENTS;",
          "86:  len = *p++;",
          "89:   if (buflen < 4) {",
          "91:    return SC_ERROR_INVALID_ARGUMENTS;",
          "95:   p+=2;",
          "",
          "[Added Lines]",
          "77:  u8 tag;",
          "78:  size_t left = buflen, len;",
          "83:  if (left < 2) {",
          "84:   return SC_ERROR_INVALID_TLV_OBJECT;",
          "86:  tag = *p;",
          "87:  p++;",
          "88:  len = *p;",
          "89:  p++;",
          "90:  left -= 2;",
          "94:   if (left < 2) {",
          "95:    return SC_ERROR_INVALID_TLV_OBJECT;",
          "99:   p += 2;",
          "100:   left -= 2;",
          "107:  if (len > left)",
          "108:   return SC_ERROR_TLV_END_OF_CONTENTS;",
          "",
          "---------------"
        ],
        "src/tools/util.c||src/tools/util.c": [
          "File: src/tools/util.c -> src/tools/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include <ctype.h>",
          "32: #include \"util.h\"",
          "33: #include \"ui/notify.h\"",
          "35: int",
          "36: is_string_valid_atr(const char *atr_str)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: #include \"common/compat_strlcat.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "339:    strcpy(buf, \"????\");",
          "340:    break;",
          "341:   }",
          "344:   e = e->next;",
          "345:  }",
          "",
          "[Removed Lines]",
          "342:   strncat(line, buf, sizeof line);",
          "343:   strncat(line, \" \", sizeof line);",
          "",
          "[Added Lines]",
          "343:   strlcat(line, buf, sizeof line);",
          "344:   strlcat(line, \" \", sizeof line);",
          "",
          "---------------"
        ]
      }
    }
  ]
}