{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3e4f6c43b88e4e41912719b1678afb0c187def23",
      "candidate_info": {
        "commit_hash": "3e4f6c43b88e4e41912719b1678afb0c187def23",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3e4f6c43b88e4e41912719b1678afb0c187def23",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "src/sqliteInt.h"
        ],
        "message": "A minor variation on check-in [1685610ef8e0dc] which (hopefully) makes the logic a little easier to follow.  Also disallows the use of the double-quoted string hack in the query expression used for VACUUM INTO, which is not strictly required, but moves us toward the goal of disallowing the double-quoted string hack everywhere.\n\nFossilOrigin-Name: 3e1b55f3ab85710ed81574904718205c7370b5f0b5a41029e961486d2e3f37c7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1685610ef8e0dc9218b02461ceab14dc6114f4f5ef7fcda0da395094aff443e1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "477:   if( cnt==0 && zTab==0 ){",
          "478:     assert( pExpr->op==TK_ID );",
          "479:     if( ExprHasProperty(pExpr,EP_DblQuoted)",
          "481:     ){",
          "",
          "[Removed Lines]",
          "480:      && 0==(pTopNC->ncFlags&NC_NewSchema)",
          "",
          "[Added Lines]",
          "480:      && 0==(pTopNC->ncFlags&NC_NoDblQStr)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1771:   sNC.pParse = pParse;",
          "1772:   sNC.pSrcList = &sSrc;",
          "1773:   sNC.ncFlags = type;",
          "1776:   }",
          "1777:   if( (rc = sqlite3ResolveExprNames(&sNC, pExpr))!=SQLITE_OK ) return rc;",
          "1778:   if( pList ) rc = sqlite3ResolveExprListNames(&sNC, pList);",
          "",
          "[Removed Lines]",
          "1774:   if( pTab && !pParse->db->init.busy && !sqlite3WritableSchema(pParse->db) ){",
          "1775:     sNC.ncFlags |= NC_NewSchema;",
          "",
          "[Added Lines]",
          "1774:   if( !pParse->db->init.busy && !sqlite3WritableSchema(pParse->db) ){",
          "1775:     sNC.ncFlags |= NC_NoDblQStr;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2796: #define NC_NoDblQStr 0x10000 /* Do not allow double-quoted string hack.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f95909c7648942e7157722c33b5e5f9293bf3436",
      "candidate_info": {
        "commit_hash": "f95909c7648942e7157722c33b5e5f9293bf3436",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f95909c7648942e7157722c33b5e5f9293bf3436",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "Fixes for WITHOUT ROWID tables with VIRTUAL columns and an INTEGER PRIMARY KEY.\n\nFossilOrigin-Name: 86074da0fd2949e231898ef0bc672d90fd89cefa49fb0eb50ff398fbdd91d1ad",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 85bc4524d76999080faa4474e8880d2b6a2ac3a7f6a76239af4de1a42f8138c8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1226:     pCol->colFlags |= COLFLAG_HASTYPE;",
          "1227:   }",
          "1228:   p->nCol++;",
          "1229:   pParse->constraintName.n = 0;",
          "1230: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1229:   p->nNVCol++;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1591:       goto generated_error;",
          "1592:     }",
          "1593:   }",
          "1594:   pCol->colFlags |= eType;",
          "1595:   assert( TF_HasVirtual==COLFLAG_VIRTUAL );",
          "1596:   assert( TF_HasStored==COLFLAG_STORED );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1595:   if( eType==COLFLAG_VIRTUAL ) pTab->nNVCol--;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2156:   assert( !db->mallocFailed );",
          "2157:   p = pParse->pNewTable;",
          "2158:   if( p==0 ) return;",
          "2161:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
          "2162:     p->tabFlags |= TF_Shadow;",
          "",
          "[Removed Lines]",
          "2159:   p->nNVCol = p->nCol;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2197:       return;",
          "2198:     }",
          "2199:     p->tabFlags |= TF_WithoutRowid | TF_NoVisibleRowid;",
          "2200:   }",
          "2202: #ifndef SQLITE_OMIT_CHECK",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2201:     convertToWithoutRowidTable(pParse, p);",
          "2203:   iDb = sqlite3SchemaToIndex(db, p->pSchema);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2212:     for(ii=0; ii<p->nCol; ii++){",
          "2213:       u32 colFlags = p->aCol[ii].colFlags;",
          "2214:       if( (colFlags & (COLFLAG_STORED|COLFLAG_VIRTUAL))!=0 ){",
          "2219:         sqlite3ResolveSelfReference(pParse, p, NC_GenCol,",
          "2220:                                     p->aCol[ii].pDflt, 0);",
          "2221:       }",
          "",
          "[Removed Lines]",
          "2215:         if( colFlags & COLFLAG_VIRTUAL ){",
          "2216:           p->nNVCol--;",
          "2217:           assert( p->nNVCol>=0 );",
          "2218:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2223:   }",
          "2224: #endif",
          "2235:   estimateTableWidth(p);",
          "2236:   for(pIdx=p->pIndex; pIdx; pIdx=pIdx->pNext){",
          "",
          "[Removed Lines]",
          "2227:   if( (tabOpts & TF_WithoutRowid)!=0 ){",
          "2228:     convertToWithoutRowidTable(pParse, p);",
          "2229:   }",
          "2231:   iDb = sqlite3SchemaToIndex(db, p->pSchema);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cd30064bd502b9b42a4e0c0e04850f09cefa2617",
      "candidate_info": {
        "commit_hash": "cd30064bd502b9b42a4e0c0e04850f09cefa2617",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cd30064bd502b9b42a4e0c0e04850f09cefa2617",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata1.db",
          "test/gencol1.test"
        ],
        "message": "Add all fuzz-test cases received from Yongheng Chen and Rui Zhong.  Also fix a minor problem in gencol1.test cases.\n\nFossilOrigin-Name: ac080432b480062507452d3cdbe6c0f759e6f95b65d9862e0462017405ab2b8e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a0ab42f779b9a96f4e43879210dfaba8fa593de77fc0ec0e2e6f116d9301ea59",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "246: # 2019-11-21 Problems in the new generated column logic",
          "247: # reported by Yongheng Chen and Rui Zhong",
          "248: do_execsql_test gencol1-9.10 {",
          "249:   DROP TABLE t1;",
          "250:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
          "251:   INSERT INTO t1 VALUES(17);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "249:   PRAGMA foreign_keys=OFF;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c2b893a7e0688556eed1a4150942742bb4d5c977",
      "candidate_info": {
        "commit_hash": "c2b893a7e0688556eed1a4150942742bb4d5c977",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c2b893a7e0688556eed1a4150942742bb4d5c977",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/util.c"
        ],
        "message": "Performance enhancement in sqlite3AtoF().  About 8% faster.\n\nFossilOrigin-Name: 81721aa54587e20d031d528fb6b74d91671a6e950fa926dc63f4284466e70f0e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/util.c||src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2e2ebad3ab636c4c65814ad41d417b105be8e254d609d0e08fbba4c5bd107bf3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "425:   double result;",
          "429:   assert( enc==SQLITE_UTF8 || enc==SQLITE_UTF16LE || enc==SQLITE_UTF16BE );",
          "",
          "[Removed Lines]",
          "426:   int nDigits = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "454:   }",
          "458:     s = s*10 + (*z - '0');",
          "460:   }",
          "465:   if( z>=zEnd ) goto do_atof_calc;",
          "",
          "[Removed Lines]",
          "457:   while( z<zEnd && sqlite3Isdigit(*z) && s<((LARGEST_INT64-9)/10) ){",
          "459:     z+=incr; nDigits++;",
          "464:   while( z<zEnd && sqlite3Isdigit(*z) ){ z+=incr; nDigits++; d++; }",
          "",
          "[Added Lines]",
          "457:   while( z<zEnd && sqlite3Isdigit(*z) ){",
          "459:     z+=incr; nDigit++;",
          "460:     if( s>=((LARGEST_INT64-9)/10) ){",
          "463:       while( z<zEnd && sqlite3Isdigit(*z) ){ z+=incr; d++; }",
          "464:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "473:       if( s<((LARGEST_INT64-9)/10) ){",
          "474:         s = s*10 + (*z - '0');",
          "475:         d--;",
          "476:       }",
          "478:     }",
          "479:   }",
          "480:   if( z>=zEnd ) goto do_atof_calc;",
          "",
          "[Removed Lines]",
          "477:       z+=incr; nDigits++;",
          "",
          "[Added Lines]",
          "477:         nDigit++;",
          "479:       z+=incr;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "585: #else",
          "586:   return !sqlite3Atoi64(z, pResult, length, enc);",
          "",
          "[Removed Lines]",
          "584:   return z==zEnd && nDigits>0 && eValid && nonNum==0;",
          "",
          "[Added Lines]",
          "586:   return z==zEnd && nDigit>0 && eValid && nonNum==0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fd15e18d7fe9bea571c52324a6eae25f3e2b4ebc",
      "candidate_info": {
        "commit_hash": "fd15e18d7fe9bea571c52324a6eae25f3e2b4ebc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fd15e18d7fe9bea571c52324a6eae25f3e2b4ebc",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "src/select.c",
          "src/sqliteInt.h"
        ],
        "message": "Make sure any window definitions in an ORDER BY clause are removed from the SELECT statement if the ORDER BY clause gets optimized out.\n\nFossilOrigin-Name: 23b119671f0be3c6b72cf2dc5f7707a0626766db7aa56529ab00d33d1a0a1bee",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2bf5a4c16457562dc942bcc6ec06d9b4e795ef3ea8e31550e18857bbebd08a76",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1323: }",
          "",
          "[Removed Lines]",
          "1317: static void resolveRemoveWindows(Select *pSelect, Expr *pExpr){",
          "1318:   Walker sWalker;",
          "1319:   memset(&sWalker, 0, sizeof(Walker));",
          "1320:   sWalker.xExprCallback = resolveRemoveWindowsCb;",
          "1321:   sWalker.u.pSelect = pSelect;",
          "1322:   sqlite3WalkExpr(&sWalker, pExpr);",
          "1324: #else",
          "1325: # define resolveRemoveWindows(x,y)",
          "1326: #endif",
          "",
          "[Added Lines]",
          "1318: void sqlite3WindowRemoveExprFromSelect(Select *pSelect, Expr *pExpr){",
          "1319:   if( pSelect->pWin ){",
          "1320:     Walker sWalker;",
          "1321:     memset(&sWalker, 0, sizeof(Walker));",
          "1322:     sWalker.xExprCallback = resolveRemoveWindowsCb;",
          "1323:     sWalker.u.pSelect = pSelect;",
          "1324:     sqlite3WalkExpr(&sWalker, pExpr);",
          "1325:   }",
          "1332: void sqlite3WindowRemoveExprListFromSelect(Select *pSelect, ExprList *pList){",
          "1333:   if( pList && pSelect->pWin ){",
          "1334:     int i;",
          "1335:     Walker sWalker;",
          "1336:     memset(&sWalker, 0, sizeof(Walker));",
          "1337:     sWalker.xExprCallback = resolveRemoveWindowsCb;",
          "1338:     sWalker.u.pSelect = pSelect;",
          "1339:     for(i=0; i<pList->nExpr; i++){",
          "1340:       sqlite3WalkExpr(&sWalker, pList->a[i].pExpr);",
          "1341:     }",
          "1342:   }",
          "1343: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1398:         pItem->u.x.iOrderByCol = j+1;",
          "1399:       }",
          "1400:     }",
          "",
          "[Removed Lines]",
          "1397:         resolveRemoveWindows(pSelect, pE);",
          "",
          "[Added Lines]",
          "1415:         sqlite3WindowRemoveExprFromSelect(pSelect, pE);",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5661:            pDest->eDest==SRT_DistQueue || pDest->eDest==SRT_Fifo);",
          "5664:     sqlite3ExprListDelete(db, p->pOrderBy);",
          "5665:     p->pOrderBy = 0;",
          "5666:     p->selFlags &= ~SF_Distinct;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5664:     sqlite3WindowRemoveExprListFromSelect(p, p->pOrderBy);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3627: void sqlite3WindowFunctions(void);",
          "3628: void sqlite3WindowChain(Parse*, Window*, Window*);",
          "3629: Window *sqlite3WindowAssemble(Parse*, Window*, ExprList*, ExprList*, Token*);",
          "3630: #else",
          "3631: # define sqlite3WindowDelete(a,b)",
          "3632: # define sqlite3WindowFunctions()",
          "3633: # define sqlite3WindowAttach(a,b,c)",
          "3634: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3630: void sqlite3WindowRemoveExprFromSelect(Select*,Expr*);",
          "3631: void sqlite3WindowRemoveExprListFromSelect(Select*,ExprList*);",
          "3636: # define sqlite3WindowRemoveExprFromSelect(Select*,Expr*);",
          "3637: # define sqlite3WindowRemoveExprListFromSelect(Select*,ExprList*);",
          "",
          "---------------"
        ]
      }
    }
  ]
}