{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a407eccb6179ee033b8e83a6eab4734dd075664b",
      "candidate_info": {
        "commit_hash": "a407eccb6179ee033b8e83a6eab4734dd075664b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a407eccb6179ee033b8e83a6eab4734dd075664b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "test/insert.test"
        ],
        "message": "If replace triggers are run during uniqueness checking, then rerun all uniqueness checks a second time using the ABORT algorithm. Fix for ticket [c1e19e12046d23fe]\n\nFossilOrigin-Name: fbac0c65d8464b126d385262d176864add55452ec9e3d5eb76ffee06e820cb9c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "test/insert.test||test/insert.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ea068b099c96b8b9526114732d2a6be186cf381b7329d102778ad25b95510c9e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1483:     }",
          "1484:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1513:   if( (db->flags & (SQLITE_RecTriggers|SQLITE_ForeignKeys))==0 ){",
          "1516:     pTrigger = 0;",
          "1517:     regTrigCnt = 0;",
          "1518:   }else{",
          "1519:     if( db->flags&SQLITE_RecTriggers ){",
          "1520:       pTrigger = sqlite3TriggersExist(pParse, pTab, TK_DELETE, 0, 0);",
          "1521:       regTrigCnt = pTrigger!=0 || sqlite3FkRequired(pParse, pTab, 0, 0);",
          "1522:     }else{",
          "1523:       pTrigger = 0;",
          "1524:       regTrigCnt = sqlite3FkRequired(pParse, pTab, 0, 0);",
          "1525:     }",
          "1526:     if( regTrigCnt ){",
          "1529:       regTrigCnt = ++pParse->nMem;",
          "1530:       sqlite3VdbeAddOp2(v, OP_Integer, 0, regTrigCnt);",
          "1531:       VdbeComment((v, \"trigger count\"));",
          "1532:       lblRecheckOk = sqlite3VdbeMakeLabel(pParse);",
          "1533:       addrRecheck = lblRecheckOk;",
          "1534:     }",
          "1535:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1580:           sqlite3MultiWrite(pParse);",
          "1581:           sqlite3GenerateRowDelete(pParse, pTab, pTrigger, iDataCur, iIdxCur,",
          "1582:                                    regNewData, 1, 0, OE_Replace, 1, -1);",
          "1586:         }else{",
          "1587: #ifdef SQLITE_ENABLE_PREUPDATE_HOOK",
          "1588:           assert( HasRowid(pTab) );",
          "",
          "[Removed Lines]",
          "1575:         Trigger *pTrigger = 0;",
          "1576:         if( db->flags&SQLITE_RecTriggers ){",
          "1577:           pTrigger = sqlite3TriggersExist(pParse, pTab, TK_DELETE, 0, 0);",
          "1578:         }",
          "1579:         if( pTrigger || sqlite3FkRequired(pParse, pTab, 0, 0) ){",
          "1583:           sqlite3VdbeAddOp3(v, OP_NotExists, iDataCur, addrRowidOk, regNewData);",
          "1584:           VdbeCoverage(v);",
          "1585:           sqlite3RowidConstraint(pParse, OE_Abort, pTab);",
          "",
          "[Added Lines]",
          "1626:         if( regTrigCnt ){",
          "1631:           nReplaceTrig++;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1747:     sqlite3VdbeVerifyAbortable(v, onError);",
          "1752:     regR = (pIdx==pPk) ? regIdx : sqlite3GetTempRange(pParse, nPkField);",
          "",
          "[Removed Lines]",
          "1748:     sqlite3VdbeAddOp4Int(v, OP_NoConflict, iThisCur, addrUniqueOk,",
          "1749:                          regIdx, pIdx->nKeyCol); VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "1795:     addrConflictCk =",
          "1796:       sqlite3VdbeAddOp4Int(v, OP_NoConflict, iThisCur, addrUniqueOk,",
          "1797:                            regIdx, pIdx->nKeyCol); VdbeCoverage(v);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1829:         break;",
          "1830:       }",
          "1831:       default: {",
          "1834:         assert( onError==OE_Replace );",
          "1839:           sqlite3MultiWrite(pParse);",
          "1841:         }",
          "1842:         sqlite3GenerateRowDelete(pParse, pTab, pTrigger, iDataCur, iIdxCur,",
          "1843:             regR, nPkField, 0, OE_Replace,",
          "1844:             (pIdx==pPk ? ONEPASS_SINGLE : ONEPASS_OFF), iThisCur);",
          "1848:           sqlite3UniqueConstraint(pParse, OE_Abort, pIdx);",
          "1849:         }",
          "1850:         seenReplace = 1;",
          "1851:         break;",
          "",
          "[Removed Lines]",
          "1832:         Trigger *pTrigger = 0;",
          "1833:         int bRetryConstraintCheck = 0;",
          "1835:         if( db->flags&SQLITE_RecTriggers ){",
          "1836:           pTrigger = sqlite3TriggersExist(pParse, pTab, TK_DELETE, 0, 0);",
          "1837:         }",
          "1838:         if( pTrigger || sqlite3FkRequired(pParse, pTab, 0, 0) ){",
          "1840:           bRetryConstraintCheck = 1;",
          "1845:         if( bRetryConstraintCheck ){",
          "1846:           sqlite3VdbeAddOp4Int(v, OP_NoConflict, iThisCur, addrUniqueOk,",
          "1847:                                regIdx, pIdx->nKeyCol); VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "1883:         nConflictCk = sqlite3VdbeCurrentAddr(v) - addrConflictCk;",
          "1884:         if( regTrigCnt ){",
          "1886:           nReplaceTrig++;",
          "1891:         if( regTrigCnt ){",
          "1898:           VdbeComment((v, \"bypass recheck\"));",
          "1903:           sqlite3VdbeResolveLabel(v, lblRecheckOk);",
          "1904:           lblRecheckOk = sqlite3VdbeMakeLabel(pParse);",
          "1905:           if( pIdx->pPartIdxWhere ){",
          "1908:             sqlite3VdbeAddOp2(v, OP_IsNull, regIdx, lblRecheckOk);",
          "1909:             VdbeCoverage(v);",
          "1910:           }",
          "1914:           pOp = sqlite3VdbeGetOp(v, addrConflictCk);",
          "1915:           while( nConflictCk>0 && !db->mallocFailed ){",
          "1916:             if( sqlite3OpcodeProperty[pOp->opcode]&OPFLG_JUMP ){",
          "1917:               p2 = lblRecheckOk;",
          "1918:             }else{",
          "1919:               p2 = pOp->p2;",
          "1920:             }",
          "1921:             if( pOp->opcode!=OP_IdxRowid ){",
          "1922:               sqlite3VdbeAddOp4(v, pOp->opcode, pOp->p1, p2, pOp->p3,",
          "1923:                                 pOp->p4.z, pOp->p4type);",
          "1924:               sqlite3VdbeChangeP5(v, pOp->p5);",
          "1925:             }",
          "1926:             nConflictCk--;",
          "1927:             pOp++;",
          "1928:           }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1867:     sqlite3VdbeJumpHere(v, ipkBottom);",
          "1868:   }",
          "1871:   if( HasRowid(pTab) ){",
          "1872:     int regRec = aRegIdx[ix];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1955:   testcase( regTrigCnt!=0 && nReplaceTrig==0 );",
          "1956:   if( nReplaceTrig ){",
          "1957:     sqlite3VdbeAddOp2(v, OP_IfNot, regTrigCnt, lblRecheckOk);VdbeCoverage(v);",
          "1958:     if( !pPk ){",
          "1959:       if( isUpdate ){",
          "1960:         sqlite3VdbeAddOp3(v, OP_Eq, regNewData, addrRecheck, regOldData);",
          "1961:         sqlite3VdbeChangeP5(v, SQLITE_NOTNULL);",
          "1962:         VdbeCoverage(v);",
          "1963:       }",
          "1964:       sqlite3VdbeAddOp3(v, OP_NotExists, iDataCur, addrRecheck, regNewData);",
          "1965:       VdbeCoverage(v);",
          "1966:       sqlite3RowidConstraint(pParse, OE_Abort, pTab);",
          "1967:     }else{",
          "1968:       sqlite3VdbeGoto(v, addrRecheck);",
          "1969:     }",
          "1970:     sqlite3VdbeResolveLabel(v, lblRecheckOk);",
          "1971:   }",
          "",
          "---------------"
        ],
        "test/insert.test||test/insert.test": [
          "File: test/insert.test -> test/insert.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "519: } {1 {UNIQUE constraint failed: p1.b}}",
          "520: integrity_check insert-16.7",
          "526: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "522: # 2019-10-25 ticket c1e19e12046d23fe",
          "523: do_catchsql_test insert-17.1 {",
          "524:   PRAGMA temp.recursive_triggers = true;",
          "525:   DROP TABLE IF EXISTS t0;",
          "526:   CREATE TABLE t0(aa, bb);",
          "527:   CREATE UNIQUE INDEX t0bb ON t0(bb);",
          "528:   CREATE TRIGGER \"r17.1\" BEFORE DELETE ON t0",
          "529:     BEGIN INSERT INTO t0(aa,bb) VALUES(99,1);",
          "530:   END;",
          "531:   INSERT INTO t0(aa,bb) VALUES(10,20);",
          "532:   REPLACE INTO t0(aa,bb) VALUES(30,20);",
          "533: } {1 {UNIQUE constraint failed: t0.rowid}}",
          "534: integrity_check insert-17.2",
          "535: do_catchsql_test insert-17.3 {",
          "536:   DROP TABLE IF EXISTS t1;",
          "537:   CREATE TABLE t1(a, b UNIQUE, c UNIQUE);",
          "538:   INSERT INTO t1(a,b,c) VALUES(1,1,1),(2,2,2),(3,3,3),(4,4,4);",
          "539:   CREATE TRIGGER \"r17.3\" AFTER DELETE ON t1 WHEN OLD.c<>3 BEGIN",
          "540:     INSERT INTO t1(rowid,a,b,c) VALUES(100,100,100,3);",
          "541:   END;",
          "542:   REPLACE INTO t1(rowid,a,b,c) VALUES(200,1,2,3);",
          "543: } {1 {UNIQUE constraint failed: t1.c}}",
          "544: integrity_check insert-17.4",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0062ddd4c946b727cb9b2e876878fa133e5738f7",
      "candidate_info": {
        "commit_hash": "0062ddd4c946b727cb9b2e876878fa133e5738f7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0062ddd4c946b727cb9b2e876878fa133e5738f7",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix another potential buffer overread in fts5.\n\nFossilOrigin-Name: 14fba4cc5db2bc206f024bfa5dd82fffdbc7577162da2c3b15a91cc1c91f3846",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4784:   Fts5Buffer *pBuf",
          "4785: ){",
          "4786:   int nData = pMulti->base.nData;",
          "4787:   assert( nData>0 );",
          "4789:     fts5BufferSafeAppendVarint(pBuf, iDelta);",
          "4790:     fts5BufferSafeAppendVarint(pBuf, nData*2);",
          "4791:     fts5BufferSafeAppendBlob(pBuf, pMulti->base.pData, nData);",
          "4792:   }",
          "4793: }",
          "",
          "[Removed Lines]",
          "4788:   if( p->rc==SQLITE_OK && 0==fts5BufferGrow(&p->rc, pBuf, nData+9+9) ){",
          "",
          "[Added Lines]",
          "4787:   int nByte = nData + 9 + 9 + FTS5_DATA_ZERO_PADDING;",
          "4789:   if( p->rc==SQLITE_OK && 0==fts5BufferGrow(&p->rc, pBuf, nByte) ){",
          "4793:     memset(&pBuf->p[pBuf->n], 0, FTS5_DATA_ZERO_PADDING);",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "7343:     INSERT INTO t1(a) SELECT randomblob(3000) FROM c;",
          "7344: } {1 {database disk image is malformed}}",
          "7349: sqlite3_fts5_may_be_corrupt 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7346: #-------------------------------------------------------------------------",
          "7347: reset_db",
          "7348: do_test 54.0 {",
          "7349:   sqlite3 db {}",
          "7350:   db deserialize [decode_hexdb {",
          "7351: | size 24576 pagesize 4096 filename crash-03a1855566d9ae.db",
          "7352: | page 1 offset 0",
          "7353: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "7354: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 06   .....@  ........",
          "7355: |     32: 00 00 00 00 00 00 00 00 00 00 00 06 00 00 00 04   ................",
          "7356: |     48: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "7357: |     96: 00 00 00 00 0d 00 00 00 06 0e 0f 00 0f aa 0f 53   ...............S",
          "7358: |    112: 0e e8 0e 8b 0e 33 0e 0f 00 00 00 00 00 00 00 00   .....3..........",
          "7359: |   3584: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 22   ................",
          "7360: |   3600: 06 06 17 11 11 01 31 74 61 62 6c 65 62 62 62 62   ......1tablebbbb",
          "7361: |   3616: 06 43 52 45 41 54 45 20 54 41 42 4c 45 20 62 62   .CREATE TABLE bb",
          "7362: |   3632: 28 61 29 56 05 06 17 1f 1f 01 7d 74 61 62 6c 65   (a)V.......table",
          "7363: |   3648: 74 31 5f 63 2a 6e 66 69 67 74 31 5f 63 6f 6e 66   t1_c*nfigt1_conf",
          "7364: |   3664: 69 67 05 43 52 45 41 54 45 20 54 41 42 4c 45 20   ig.CREATE TABLE",
          "7365: |   3680: 27 74 31 5f 63 6f 6e 66 69 67 27 28 6b 20 50 52   't1_config'(k PR",
          "7366: |   3696: 49 4d 41 52 59 20 4b 45 59 2c 20 76 29 20 57 49   IMARY KEY, v) WI",
          "7367: |   3712: 54 48 4f 55 54 20 52 4f 57 49 44 5b 04 07 17 21   THOUT ROWID[...!",
          "7368: |   3728: 21 01 81 01 74 61 62 6c 65 74 31 5f 64 6f 73 73   !...tablet1_doss",
          "7369: |   3744: 69 7a 65 74 31 5f 64 6f 63 73 69 7a 65 04 43 52   izet1_docsize.CR",
          "7370: |   3760: 45 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 64   EATE TABLE 't1_d",
          "7371: |   3776: 6f 63 73 69 7a 65 27 28 69 64 20 49 4e 54 45 47   ocsize'(id INTEG",
          "7372: |   3792: 45 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20   ER PRIMARY KEY,",
          "7373: |   3808: 73 7a 20 42 4c 4f 42 29 69 03 07 17 19 19 01 81   sz BLOB)i.......",
          "7374: |   3824: 2d 74 61 62 6c 65 74 31 5f 69 64 78 74 31 5f 69   -tablet1_idxt1_i",
          "7375: |   3840: 64 78 03 43 52 45 41 54 45 20 54 41 42 4c 45 20   dx.CREATE TABLE",
          "7376: |   3856: 27 74 31 5f 69 64 78 27 28 73 65 67 69 64 2c 20   't1_idx'(segid,",
          "7377: |   3872: 74 65 72 6d 2c 20 70 67 6e 6f 2c 20 50 52 49 4d   term, pgno, PRIM",
          "7378: |   3888: 41 52 59 20 4b 45 59 28 73 65 67 69 64 2c 20 74   ARY KEY(segid, t",
          "7379: |   3904: 65 72 6d 29 29 20 57 49 54 48 4f 55 54 20 52 4f   erm)) WITHOUT RO",
          "7380: |   3920: 57 49 44 55 02 07 17 1b 1b 01 81 01 74 61 62 6c   WIDU........tabl",
          "7381: |   3936: 65 74 31 5f 64 61 74 61 74 31 5f 64 61 74 61 02   et1_datat1_data.",
          "7382: |   3952: 43 52 45 41 54 45 20 54 41 42 4c 45 20 27 74 31   CREATE TABLE 't1",
          "7383: |   3968: 5f 64 61 74 61 27 28 69 64 20 49 4e 54 45 47 45   _data'(id INTEGE",
          "7384: |   3984: 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 62   R PRIMARY KEY, b",
          "7385: |   4000: 6c 6f 63 6b 20 42 4c 4f 42 29 54 01 07 17 11 11   lock BLOB)T.....",
          "7386: |   4016: 08 81 15 74 61 62 6c 65 74 31 74 31 43 52 45 41   ...tablet1t1CREA",
          "7387: |   4032: 54 45 20 56 49 52 54 55 41 4c 20 54 41 42 4c 45   TE VIRTUAL TABLE",
          "7388: |   4048: 20 74 31 20 55 53 49 4e 47 20 66 74 73 35 28 61    t1 USING fts5(a",
          "7389: |   4064: 2c 62 2c 70 72 65 66 69 78 3d 22 32 2c 32 2c 33   ,b,prefix=.2,2,3",
          "7390: |   4080: 2c 34 22 2c 20 63 6f 6e 74 65 6e 74 3d 22 22 29   ,4., content=..)",
          "7391: | page 2 offset 4096",
          "7392: |      0: 0d 0b 6a 00 37 09 4c 02 0f e7 09 4c 0f c6 0f a4   ..j.7.L....L....",
          "7393: |     16: 0f 88 0f 6d 0f 4b 0f 2c 0f 0e 0e ec 0e cd 0e ad   ...m.K.,........",
          "7394: |     32: 0e 8e 0e 6c 0e 4b 0e 29 0e 08 0d e6 0d c4 0d b5   ...l.K.)........",
          "7395: |     48: 0d 97 0d 76 0d 54 0d 31 0d 15 0c f3 0c d3 0c b5   ...v.T.1........",
          "7396: |     64: 0c 95 0c 73 0c 54 0c 32 0c 10 0b ee 0b cd 0b b0   ...s.T.2........",
          "7397: |     80: 0b 8d 0b 7e 0b 48 0b 2e 0b 0b 0a ef 0a cc 0a ad   ...~.H..........",
          "7398: |     96: 0a 8c 0a 6d 0a 4d 0a 2b 0a 0c 09 ec 09 ca 09 a8   ...m.M.+........",
          "7399: |    112: 09 86 09 63 0f f1 00 00 00 00 00 00 00 00 00 00   ...c............",
          "7400: |   2368: 00 00 00 00 00 00 00 00 00 00 00 00 15 0a 03 00   ................",
          "7401: |   2384: 30 00 00 00 01 01 03 35 00 03 01 01 12 02 01 12   0......5........",
          "7402: |   2400: 03 01 11 1c 8c 80 80 80 80 10 03 00 3e 00 00 00   ............>...",
          "7403: |   2416: 17 01 05 05 34 74 61 62 6c 03 02 03 01 04 77 68   ....4tabl.....wh",
          "7404: |   2432: 65 72 03 02 06 09 1b 8c 80 80 80 80 0f 03 00 3c   er.............<",
          "7405: |   2448: 00 00 00 16 05 34 66 74 73 34 03 02 02 01 04 6e   .....4fts4.....n",
          "7406: |   2464: 75 6d 62 03 06 01 04 09 1b 8c 80 80 80 80 0e 03   umb.............",
          "7407: |   2480: 00 3c 00 00 00 16 04 33 74 68 65 03 06 01 01 04   .<.....3the.....",
          "7408: |   2496: 01 03 77 68 65 03 02 04 04 0a 1b 8c 80 80 80 80   ..whe...........",
          "7409: |   2512: 0d 03 00 3c 00 00 00 16 04 33 6e 75 6d 03 06 01   ...<.....3num...",
          "7410: |   2528: 01 05 01 03 74 61 62 05 62 03 04 0a 19 8c 80 80   ....tab.b.......",
          "7411: |   2544: 80 80 0c 03 00 38 00 00 00 14 03 39 a7 68 03 02   .....8.....9.h..",
          "7412: |   2560: 04 10 04 33 66 74 73 03 02 02 04 07 18 8c 80 80   ...3fts.........",
          "7413: |   2576: 80 80 0b 03 00 36 00 00 00 13 03 32 74 61 03 02   .....6.....2ta..",
          "7414: |   2592: 03 02 01 68 03 06 01 01 04 04 07 1b 8c 80 80 80   ...h............",
          "7415: |   2608: 80 0a 03 00 3c 00 00 00 16 03 32 6e 75 03 06 01   ....<.....2nu...",
          "7416: |   2624: 01 05 01 02 6f 66 03 06 01 01 06 04 09 19 8c 80   ....of..........",
          "7417: |   2640: 80 80 80 09 03 00 38 00 00 00 14 03 32 66 74 03   ......8.....2ft.",
          "7418: |   2656: 02 02 01 02 69 73 03 06 01 01 03 04 07 18 8c 80   ....is..........",
          "7419: |   2672: 80 80 80 08 03 00 36 00 00 00 13 02 31 74 03 08   ......6.....1t..",
          "7420: |   2688: 03 01 01 04 01 01 77 03 02 04 04 09 1a 8c 80 80   ......w.........",
          "7421: |   2704: 80 80 07 03 00 3a ff 00 00 15 02 31 6e 03 08 01   .....:.....1n...",
          "7422: |   2720: 01 02 05 01 01 6f 03 06 01 01 06 04 09 18 8c 80   .....o..........",
          "7423: |   2736: 80 80 80 06 03 00 36 00 00 00 13 04 02 31 66 03   ......6......1f.",
          "7424: |   2752: 02 02 01 01 69 03 06 01 01 03 05 06 1c 8c 80 80   ....i...........",
          "7425: |   2768: 80 80 05 03 00 3e 00 00 00 17 04 30 74 68 65 03   .....>.....0the.",
          "7426: |   2784: 06 01 01 04 01 05 77 68 65 72 65 03 02 04 0a 15   ......where.....",
          "7427: |   2800: 8c 80 80 80 80 04 03 00 30 00 00 00 11 01 01 06   ........0.......",
          "7428: |   2816: 06 30 74 61 62 6c cc 03 02 03 07 1c 8c 80 80 80   .0tabl..........",
          "7429: |   2832: 80 03 03 00 3e 00 00 00 17 07 30 6e 75 6d 62 65   ....>.....0numbe",
          "7430: |   2848: 72 03 06 01 01 05 01 02 6f 66 03 06 04 0d 13 8c   r.......of......",
          "7431: |   2864: 80 80 80 80 02 03 00 2c 00 00 00 0f 01 01 03 02   .......,........",
          "7432: |   2880: 30 6e 03 06 01 01 02 07 1b 8c 80 80 80 80 01 03   0n..............",
          "7433: |   2896: 00 3c 00 00 00 16 08 30 66 74 73 34 61 75 78 03   .<.....0fts4aux.",
          "7434: |   2912: 02 02 01 02 69 73 03 06 04 0c 00 00 00 14 2a 00   ....is........*.",
          "7435: |   2928: 00 00 01 01 02 24 00 02 01 01 12 02 01 12 08 88   .....$..........",
          "7436: |   2944: 80 80 80 80 12 03 00 16 00 00 00 05 02 1c 88 80   ................",
          "7437: |   2960: 80 80 80 11 03 00 3e 00 00 00 17 05 34 72 6f 77   ......>.....4row",
          "7438: |   2976: 73 02 06 01 01 05 01 04 74 68 65 72 02 02 04 0b   s.......ther....",
          "7439: |   2992: 15 88 80 80 80 80 10 03 00 30 00 00 00 11 02 01   .........0......",
          "7440: |   3008: 01 07 05 34 62 65 74 77 02 02 04 08 1b 88 80 80   ...4betw........",
          "7441: |   3024: 80 80 0f 03 00 3c 00 00 00 16 04 04 33 72 6f 77   .....<......3row",
          "7442: |   3040: 02 06 01 01 05 01 03 74 68 65 02 08 05 0a 1b 88   .......the......",
          "7443: |   3056: 80 80 80 80 0e 03 05 0c 00 00 00 16 01 01 02 04   ................",
          "7444: |   3072: 33 61 72 65 02 02 03 01 03 62 65 74 02 02 07 08   3are.....bet....",
          "7445: |   3088: 1b 88 80 80 80 80 0d 03 00 3c 00 00 00 16 03 32   .........<.....2",
          "7446: |   3104: 84 68 02 08 02 01 01 07 00 04 33 61 6e 64 02 06   .h........3and..",
          "7447: |   3120: 04 0a 1b 88 80 80 80 80 0c 03 00 3c 00 00 00 16   ...........<....",
          "7448: |   3136: 03 32 69 6e 02 06 01 01 06 01 02 72 6f 02 06 01   .2in.......ro...",
          "7449: |   3152: 01 05 04 09 18 88 80 80 80 80 0b 03 00 36 00 00   .............6..",
          "7450: |   3168: 00 13 02 03 32 61 72 02 02 03 01 02 62 65 02 02   ....2ar.....be..",
          "7451: |   3184: 04 05 07 1b 88 80 80 80 80 0a 03 00 3c 00 00 00   ............<...",
          "7452: |   3200: 16 02 31 74 02 08 02 01 01 07 00 03 32 61 6e 02   ..1t........2an.",
          "7453: |   3216: 06 01 01 04 09 19 88 80 80 80 80 09 03 00 38 00   ..............8.",
          "7454: |   3232: 00 00 14 02 31 6e 02 06 01 01 03 01 01 72 02 06   ....1n.......r..",
          "7455: |   3248: 01 01 05 04 08 17 88 80 80 80 80 08 03 00 34 00   ..............4.",
          "7456: |   3264: 00 00 12 02 31 62 02 02 04 01 01 69 02 06 01 01   ....1b.....i....",
          "7457: |   3280: 06 04 06 19 88 80 80 80 80 07 03 00 38 00 00 00   ............8...",
          "7458: |   3296: 14 04 02 31 32 02 02 05 01 01 61 02 08 03 01 01   ...12.....a.....",
          "7459: |   3312: 02 05 06 1b 88 80 80 80 80 06 03 00 3c 00 00 00   ............<...",
          "7460: |   3328: 16 06 30 74 68 65 72 65 02 12 02 00 02 31 31 02   ..0there.....11.",
          "7461: |   3344: 06 11 01 04 0a 15 88 80 80 80 80 05 03 00 30 00   ..............0.",
          "7462: |   3360: 00 00 11 01 01 05 04 30 74 68 65 02 06 01 01 07   .......0the.....",
          "7463: |   3376: 07 1c 88 80 80 80 80 04 03 00 3e 00 00 00 17 01   ..........>.....",
          "7464: |   3392: 01 06 02 30 6e 02 06 01 01 03 01 04 72 6f 77 73   ...0n.......rows",
          "7465: |   3408: 02 06 07 08 1b 88 80 80 80 80 03 03 00 3c 00 00   .............<..",
          "7466: |   3424: 00 16 08 30 62 65 74 77 65 65 6e 02 02 04 01 02   ...0between.....",
          "7467: |   3440: 69 6e 02 06 04 0c 1a 88 80 80 80 80 02 03 00 3a   in.............:",
          "7468: |   3456: 08 f0 00 15 04 30 61 6e 64 02 06 01 01 02 02 02   .....0and.......",
          "7469: |   3472: 72 65 02 02 03 04 0a 17 88 80 80 80 80 01 03 00   re..............",
          "7470: |   3488: 34 00 00 00 12 02 30 31 02 06 01 01 04 01 01 32   4.....01.......2",
          "7471: |   3504: 02 02 06 04 08 08 84 80 80 80 80 12 03 00 16 00   ................",
          "7472: |   3520: 00 00 05 04 1b 84 80 80 80 80 11 03 00 3c 00 00   .............<..",
          "7473: |   3536: 00 16 05 34 74 61 62 6c 01 06 01 01 05 02 03 65   ...4tabl.......e",
          "7474: |   3552: 72 6d 01 02 04 0b 1b 84 80 80 80 80 10 03 00 3c   rm.............<",
          "7475: |   3568: 00 00 00 16 05 34 65 61 63 68 01 02 03 01 04 70   .....4each.....p",
          "7476: |   3584: 72 65 73 01 02 05 04 09 1a 84 80 80 80 80 0f 03   res.............",
          "7477: |   3600: 00 3a 00 00 00 15 04 33 74 65 72 01 02 04 02 02   .:.....3ter.....",
          "7478: |   3616: 68 65 01 06 01 01 03 04 08 1b 84 80 80 80 80 0e   he..............",
          "7479: |   3632: 03 00 3c 00 00 00 16 04 33 70 72 65 01 02 05 01   ..<.....3pre....",
          "7480: |   3648: 03 74 61 62 01 06 01 01 05 04 08 1a 84 80 80 80   .tab............",
          "7481: |   3664: 80 0d 03 00 3a 00 00 00 15 04 33 66 6f 72 01 02   ....:.....3for..",
          "7482: |   3680: 02 02 02 74 73 01 06 01 01 04 04 08 1b 84 80 80   ...ts...........",
          "7483: |   3696: 80 80 0c 03 00 3c 00 00 00 16 03 32 74 68 01 06   .....<.....2th..",
          "7484: |   3712: 01 01 03 00 04 33 65 61 63 01 02 03 04 09 18 84   .....3eac.......",
          "7485: |   3728: 80 80 80 80 0b 03 00 36 00 00 00 13 03 32 74 61   .......6.....2ta",
          "7486: |   3744: 01 06 01 01 05 02 01 65 00 02 04 04 09 19 84 80   .......e........",
          "7487: |   3760: 80 80 80 0a 03 00 38 00 00 00 14 03 32 69 6e 01   ......8.....2in.",
          "7488: |   3776: 06 01 01 02 01 02 70 72 01 02 05 04 09 18 84 80   ......pr........",
          "7489: |   3792: 80 80 80 09 03 00 36 00 00 00 13 03 32 66 6f 01   ......6.....2fo.",
          "7490: |   3808: 02 02 02 01 74 01 06 01 01 04 04 07 1b 84 80 80   ....t...........",
          "7491: |   3824: 80 80 08 03 00 3c 00 00 00 16 02 31 74 01 0a 04   .....<.....1t...",
          "7492: |   3840: 01 01 03 04 00 03 32 65 61 01 02 03 04 0a 17 84   ......2ea.......",
          "7493: |   3856: 80 80 80 80 07 03 00 34 00 00 00 12 02 31 69 01   .......4.....1i.",
          "7494: |   3872: 06 01 01 02 de 01 70 01 02 05 04 08 18 84 80 80   ......p.........",
          "7495: |   3888: 80 80 06 03 00 36 00 00 00 13 02 31 65 01 02 03   .....6.....1e...",
          "7496: |   3904: 01 01 66 01 08 02 01 01 04 04 06 1b 84 80 80 80   ..f.............",
          "7497: |   3920: 80 05 03 00 3c 00 00 00 16 05 30 74 65 72 6d 01   ....<.....0term.",
          "7498: |   3936: 02 04 02 02 68 65 01 06 01 01 03 04 09 14 84 80   ....he..........",
          "7499: |   3952: 80 80 80 04 03 00 2e 00 00 00 10 06 30 74 61 62   ............0tab",
          "7500: |   3968: 6c 65 01 06 01 01 05 04 15 84 80 80 80 80 03 03   le..............",
          "7501: |   3984: 00 30 00 00 00 11 02 08 30 70 72 65 73 65 6e 74   .0......0present",
          "7502: |   4000: 01 02 05 05 1b 84 80 80 80 80 02 03 00 3c 00 00   .............<..",
          "7503: |   4016: 00 16 04 30 66 74 73 01 06 01 01 04 01 02 69 6e   ...0fts.......in",
          "7504: |   4032: 01 06 01 01 04 0a 1a 84 80 80 80 80 01 03 00 3a   ...............:",
          "7505: |   4048: 00 00 00 15 05 30 65 61 63 68 00 f2 03 01 03 66   .....0each.....f",
          "7506: |   4064: 6f 72 01 02 02 04 09 06 01 03 00 12 03 0b 0f 00   or..............",
          "7507: |   4080: 00 08 8c 80 80 80 80 11 03 00 16 00 00 00 05 04   ................",
          "7508: | page 3 offset 8192",
          "7509: |      0: 0a 00 00 00 32 0e 4f 00 0f fa 0f f1 0f e9 0f e1   ....2.O.........",
          "7510: |     16: 0f d8 0f d1 0f c9 0f c1 0f b9 0f b1 0f a9 0f a0   ................",
          "7511: |     32: 0f 98 0f 90 0f 87 0f 80 0f 78 0f 71 0f 68 0f 5f   .........x.q.h._",
          "7512: |     48: 0f 56 0f 4d 0f 41 0f 38 0f 2f 0f 26 0f 1d 0f 13   .V.M.A.8./.&....",
          "7513: |     64: 0f 0a 0f 01 0e f7 0e ee 0e e6 0e dd 0e d6 0e cd   ................",
          "7514: |     80: 0e c3 0e ba 0e b0 0e a8 0e 9f 0e 96 0e 8e 0e 85   ................",
          "7515: |     96: 0e 7c 0e 73 0e 6a 0e 60 0e 58 0e 4f 00 00 00 00   .|.s.j.`.X.O....",
          "7516: |   3648: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 08   ................",
          "7517: |   3664: 04 01 10 01 03 34 74 20 07 04 01 0e 01 03 34 1e   .....4t ......4.",
          "7518: |   3680: 09 04 01 12 01 03 33 74 68 1c 08 04 01 10 01 03   ......3th.......",
          "7519: |   3696: 33 6e 1a 08 04 01 10 01 03 32 77 18 08 04 01 10   3n.......2w.....",
          "7520: |   3712: 01 03 32 74 16 08 04 01 10 01 03 32 6e 14 07 04   ..2t.......2n...",
          "7521: |   3728: 01 0e 01 03 32 12 08 04 01 10 01 03 31 74 10 08   ....2.......1t..",
          "7522: |   3744: 04 01 10 01 03 31 6e 0e 07 04 01 0e 01 03 31 0c   .....1n.......1.",
          "7523: |   3760: 09 04 01 12 01 03 30 74 68 0a 08 04 01 10 01 03   ......0th.......",
          "7524: |   3776: 30 74 08 09 04 01 12 01 03 30 6e 75 06 08 04 01   0t.......0nu....",
          "7525: |   3792: 10 01 03 30 6e 04 06 04 01 0c 01 05 52 08 04 01   ...0n.......R...",
          "7526: |   3808: 10 01 02 34 72 22 07 04 01 0e 01 02 34 20 08 04   ...4r.......4 ..",
          "7527: |   3824: 01 10 01 02 33 72 1e 09 04 01 12 01 02 33 61 72   ....3r.......3ar",
          "7528: |   3840: 1c 08 04 01 10 01 02 32 74 1a 08 04 01 10 b3 02   .......2t.......",
          "7529: |   3856: 32 69 18 09 04 01 12 01 02 32 61 72 16 08 04 01   2i.......2ar....",
          "7530: |   3872: 10 01 02 31 74 14 08 04 01 10 01 02 31 6e 12 08   ...1t.......1n..",
          "7531: |   3888: 04 01 10 01 02 31 62 10 08 04 01 10 01 02 31 32   .....1b.......12",
          "7532: |   3904: 0e 0b 04 01 16 01 02 30 74 68 65 72 0c 08 04 01   .......0ther....",
          "7533: |   3920: 10 01 02 30 74 0a 08 04 01 10 01 02 30 6e 08 08   ...0t.......0n..",
          "7534: |   3936: 04 01 10 01 02 30 62 06 08 04 01 10 01 02 30 61   .....0b.......0a",
          "7535: |   3952: 04 06 04 01 0c 01 02 02 07 04 09 10 01 34 74 22   .............4t.",
          "7536: |   3968: 06 04 09 0e 01 34 20 08 04 09 12 01 33 74 65 1e   .....4 .....3te.",
          "7537: |   3984: 07 04 09 10 01 33 70 1c 07 f4 09 11 01 33 66 1a   .....3p......3f.",
          "7538: |   4000: 08 04 09 12 01 32 74 68 18 07 04 09 10 01 32 e4   .....2th......2.",
          "7539: |   4016: 16 07 04 09 10 01 32 69 14 07 04 09 10 01 32 66   ......2i......2f",
          "7540: |   4032: 12 07 04 09 10 01 31 74 10 07 04 09 10 01 31 69   ......1t......1i",
          "7541: |   4048: 0e 06 04 09 0e 01 31 0c 08 04 09 12 01 30 74 65   ......1......0te",
          "7542: |   4064: 0a 07 04 09 10 01 30 74 08 07 04 09 10 01 30 70   ......0t......0p",
          "7543: |   4080: 06 08 04 09 12 01 30 66 74 04 05 04 09 0c 01 02   ......0ft.......",
          "7544: | page 4 offset 12288",
          "7545: |      0: 0d 00 00 00 03 0f eb 00 0f f9 0f f2 0f eb 00 00   ................",
          "7546: |   4064: 00 00 00 00 00 00 00 00 00 00 00 05 03 03 00 10   ................",
          "7547: |   4080: 03 05 05 02 03 00 10 04 06 05 01 03 00 10 04 04   ................",
          "7548: | page 5 offset 16384",
          "7549: |      0: 0a 00 00 00 02 0f eb 00 0f eb 0f f4 00 00 00 00   ................",
          "7550: |   4064: 00 00 00 00 00 00 00 00 00 00 00 08 03 15 01 70   ...............p",
          "7551: |   4080: 67 73 7a 18 0b 03 1b 01 76 65 72 73 69 6f 6e 04   gsz.....version.",
          "7552: | page 6 offset 20480",
          "7553: |      0: 0d 00 00 00 03 0f f2 00 0f fc 0f f7 0f f2 00 00   ................",
          "7554: |   4080: 00 00 23 03 02 01 03 03 02 02 01 02 02 00 f2 09   ..#.............",
          "7555: | end crash-03a1855566d9ae.db",
          "7556: }]} {}",
          "7558: do_catchsql_test 54.1 {",
          "7559:   SELECT rowid==-1 FROM t1('t*');",
          "7560: } {0 {0 0 0}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e608085d3f7e3cc0015fde626e205ee9842ef3cd06dc879fbbc7f2067c592965",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9930cfe878dfedf36ff4010a3781ba1758308c28",
      "candidate_info": {
        "commit_hash": "9930cfe878dfedf36ff4010a3781ba1758308c28",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9930cfe878dfedf36ff4010a3781ba1758308c28",
        "files": [
          "ext/fts3/fts3_write.c",
          "ext/fts5/test/fts5misc.test",
          "manifest",
          "manifest.uuid",
          "test/altertab3.test",
          "test/fts3misc.test"
        ],
        "message": "Fix a problem in fts3 causing it to report corruption if a doclist contains consectutive rowid entries that differ by more than 2^63.\n\nFossilOrigin-Name: 0b0a3048f9df88bbc8979f2ac5247bee7d7bc1e585faca252610d2fcbe36d51d",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test",
          "manifest.uuid||manifest.uuid",
          "test/altertab3.test||test/altertab3.test",
          "test/fts3misc.test||test/fts3misc.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2967:           sqlite3_int64 iDelta;",
          "2968:           if( p->bDescIdx && nDoclist>0 ){",
          "2969:             iDelta = iPrev - iDocid;",
          "2970:           }else{",
          "2971:             iDelta = iDocid - iPrev;",
          "2972:           }",
          "2978:           nByte = sqlite3Fts3VarintLen(iDelta) + (isRequirePos?nList+1:0);",
          "2979:           if( nDoclist+nByte>pCsr->nBuffer ){",
          "",
          "[Removed Lines]",
          "2973:           if( iDelta<=0 && (nDoclist>0 || iDelta!=iDocid) ){",
          "2974:             return FTS_CORRUPT_VTAB;",
          "2975:           }",
          "2976:           assert( nDoclist>0 || iDelta==iDocid );",
          "",
          "[Added Lines]",
          "2969:             if( iPrev<=iDocid ) return FTS_CORRUPT_VTAB;",
          "2972:             if( nDoclist>0 && iPrev>=iDocid ) return FTS_CORRUPT_VTAB;",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test": [
          "File: ext/fts5/test/fts5misc.test -> ext/fts5/test/fts5misc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "226:   INSERT INTO vt0(c0) VALUES (x'd1');",
          "227: }",
          "230: do_execsql_test 8.1 {",
          "231:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "232: }",
          "235: finish_test",
          "",
          "[Removed Lines]",
          "229: breakpoint",
          "",
          "[Added Lines]",
          "233: #-------------------------------------------------------------------------",
          "234: #",
          "235: reset_db",
          "236: do_execsql_test 9.0 {",
          "237:   CREATE VIRTUAL TABLE t1 using FTS5(mailcontent);",
          "238:   insert into t1(rowid, mailcontent) values",
          "239:       (-4764623217061966105, 'we are going to upgrade'),",
          "240:       (8324454597464624651, 'we are going to upgrade');",
          "241: }",
          "243: do_execsql_test 9.1 {",
          "244:   INSERT INTO t1(t1) VALUES('integrity-check');",
          "245: }",
          "247: do_execsql_test 9.2 {",
          "248:   SELECT rowid FROM t1('upgrade');",
          "249: } {",
          "250:   -4764623217061966105 8324454597464624651",
          "251: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f4285297e1e7ebef90bfc0f71402a4e1726d31bc15b69fec13a1f0d98fed1f08",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "381:   END}",
          "382: }",
          "385: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "383: #-------------------------------------------------------------------------",
          "384: reset_db",
          "385: do_execsql_test 18.1 {",
          "386:   CREATE TABLE t1(a,b);",
          "387:   CREATE TRIGGER r1 AFTER INSERT ON t1 BEGIN",
          "388:     SELECT a, b FROM t1",
          "389:     INTERSECT SELECT b,a FROM t1",
          "390:     ORDER BY b IN (",
          "391:         SELECT a UNION SELECT b",
          "392:         FROM t1",
          "393:         ORDER BY b COLLATE nocase",
          "394:         )",
          "395:     ;",
          "396:   END;",
          "397: }",
          "399: do_catchsql_test 18.2 {",
          "400:     SELECT a, b FROM t1",
          "401:     INTERSECT",
          "402:     SELECT b,a FROM t1",
          "403:     ORDER BY b IN (",
          "404:         SELECT a UNION SELECT b",
          "405:         FROM t1",
          "406:         ORDER BY b COLLATE nocase",
          "407:         );",
          "408: } {1 {1st ORDER BY term does not match any column in the result set}}",
          "410: do_catchsql_test 18.3 {",
          "411:   ALTER TABLE t1 RENAME TO t1x;",
          "412: } {1 {error in trigger r1: 1st ORDER BY term does not match any column in the result set}}",
          "",
          "---------------"
        ],
        "test/fts3misc.test||test/fts3misc.test": [
          "File: test/fts3misc.test -> test/fts3misc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "283:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "284: }",
          "286: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "286: #-------------------------------------------------------------------------",
          "287: #",
          "288: reset_db",
          "289: do_execsql_test 9.0 {",
          "290:   CREATE VIRTUAL TABLE t1 using fts4(mailcontent);",
          "291:   insert into t1(rowid, mailcontent) values",
          "292:       (-4764623217061966105, 'we are going to upgrade'),",
          "293:       (8324454597464624651, 'we are going to upgrade');",
          "294: }",
          "296: do_execsql_test 9.1 {",
          "297:   INSERT INTO t1(t1) VALUES('integrity-check');",
          "298: }",
          "300: do_execsql_test 9.2 {",
          "301:   SELECT rowid FROM t1 WHERE t1 MATCH 'upgrade';",
          "302: } {",
          "303:   -4764623217061966105 8324454597464624651",
          "304: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a0536ab0faa89601c2bf14bc192746fc23d09d1",
      "candidate_info": {
        "commit_hash": "0a0536ab0faa89601c2bf14bc192746fc23d09d1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0a0536ab0faa89601c2bf14bc192746fc23d09d1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Make the \".schema\" command in the CLI resistant to corrupt database files.\n\nFossilOrigin-Name: f22c7e229ea4626c5268d61de3964521cf6a2735290cbd1518d68731ba6cca90",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3eae4e301e3e4bcf14e96066f77be1434c5d4b3daadb10153cd36382589ac128",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1683: static void printSchemaLine(FILE *out, const char *z, const char *zTail){",
          "1684:   if( sqlite3_strglob(\"CREATE TABLE ['\\\"]*\", z)==0 ){",
          "1685:     utf8_printf(out, \"CREATE TABLE IF NOT EXISTS %s%s\", z+13, zTail);",
          "1686:   }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1684:   if( z==0 ) return;",
          "1685:   if( zTail==0 ) return;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "119e1ffc5eb7783dbee1553f0239c3fea587a11d",
      "candidate_info": {
        "commit_hash": "119e1ffc5eb7783dbee1553f0239c3fea587a11d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/119e1ffc5eb7783dbee1553f0239c3fea587a11d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "The defragmentPage() routine detects corruption in the first-free-slot fields at offset 1 in the header and throws an error, rather than asserting.\n\nFossilOrigin-Name: fb125bd338ab32b33d02fe61b76497b6d4a2a160056d6e759e15c94903e61a41",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e3fde56da46e9592143b8beeee5eba4d74b8ef67edb7bf73a85edd2e0f7a8d21",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1433:   if( (int)data[hdr+7]<=nMaxFrag ){",
          "1434:     int iFree = get2byte(&data[hdr+1]);",
          "1440:     if( iFree ){",
          "1441:       int iFree2 = get2byte(&data[iFree]);",
          "1442:       if( iFree2>usableSize-4 ) return SQLITE_CORRUPT_PAGE(pPage);",
          "",
          "[Removed Lines]",
          "1439:     assert( iFree<=usableSize-4 );",
          "",
          "[Added Lines]",
          "1435:     if( iFree>usableSize-4 ) return SQLITE_CORRUPT_PAGE(pPage);",
          "",
          "---------------"
        ]
      }
    }
  ]
}