{
  "cve_id": "CVE-2019-12098",
  "cve_desc": "In the client side of Heimdal before 7.6.0, failure to verify anonymous PKINIT PA-PKINIT-KX key exchange permits a man-in-the-middle attack. This issue is in krb5_init_creds_step in lib/krb5/init_creds_pw.c.",
  "repo": "heimdal/heimdal",
  "patch_hash": "2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
  "patch_info": {
    "commit_hash": "2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
    "repo": "heimdal/heimdal",
    "commit_url": "https://github.com/heimdal/heimdal/commit/2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
    "files": [
      "lib/krb5/init_creds_pw.c",
      "lib/krb5/krb5_locl.h",
      "lib/krb5/pkinit.c"
    ],
    "message": "CVE-2019-12098: krb5: always confirm PA-PKINIT-KX for anon PKINIT\n\nRFC8062 Section 7 requires verification of the PA-PKINIT-KX key excahnge\nwhen anonymous PKINIT is used.  Failure to do so can permit an active\nattacker to become a man-in-the-middle.\n\nIntroduced by a1ef548600c5bb51cf52a9a9ea12676506ede19f.  First tagged\nrelease Heimdal 1.4.0.\n\nCVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N (4.8)\n\nChange-Id: I6cc1c0c24985936468af08693839ac6c3edda133\nSigned-off-by: Jeffrey Altman <jaltman@auristor.com>\nApproved-by: Jeffrey Altman <jaltman@auritor.com>\n(cherry picked from commit 38c797e1ae9b9c8f99ae4aa2e73957679031fd2b)",
    "before_after_code_files": [
      "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c",
      "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h",
      "lib/krb5/pkinit.c||lib/krb5/pkinit.c"
    ]
  },
  "patch_diff": {
    "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c": [
      "File: lib/krb5/init_creds_pw.c -> lib/krb5/init_creds_pw.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2267:            &ctx->req_buffer,",
      "2268:            NULL,",
      "2269:            NULL);",
      "2270:      if (ret == 0)",
      "2271:   ret = copy_EncKDCRepPart(&rep.enc_part, &ctx->enc_part);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2270:      if (ret == 0 && ctx->pk_init_ctx) {",
      "2271:   PA_DATA *pa_pkinit_kx;",
      "2272:   int idx = 0;",
      "2274:   pa_pkinit_kx =",
      "2275:       krb5_find_padata(rep.kdc_rep.padata->val,",
      "2276:          rep.kdc_rep.padata->len,",
      "2277:          KRB5_PADATA_PKINIT_KX,",
      "2278:          &idx);",
      "2280:   ret = _krb5_pk_kx_confirm(context, ctx->pk_init_ctx,",
      "2281:        ctx->fast_state.reply_key,",
      "2282:        &ctx->cred.session,",
      "2283:        pa_pkinit_kx);",
      "2284:   if (ret)",
      "2285:       krb5_set_error_message(context, ret,",
      "2286:         N_(\"Failed to confirm PA-PKINIT-KX\", \"\"));",
      "2287:   else if (pa_pkinit_kx != NULL)",
      "2288:       ctx->ic_flags |= KRB5_INIT_CREDS_PKINIT_KX_VALID;",
      "2289:      }",
      "",
      "---------------"
    ],
    "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h": [
      "File: lib/krb5/krb5_locl.h -> lib/krb5/krb5_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "208: #define KRB5_INIT_CREDS_CANONICALIZE  1",
      "209: #define KRB5_INIT_CREDS_NO_C_CANON_CHECK 2",
      "210: #define KRB5_INIT_CREDS_NO_C_NO_EKU_CHECK 4",
      "211:     struct {",
      "212:         krb5_gic_process_last_req func;",
      "213:         void *ctx;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "211: #define KRB5_INIT_CREDS_PKINIT_KX_VALID  32",
      "",
      "---------------"
    ],
    "lib/krb5/pkinit.c||lib/krb5/pkinit.c": [
      "File: lib/krb5/pkinit.c -> lib/krb5/pkinit.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1220:     return ret;",
      "1221: }",
      "1223: static krb5_error_code",
      "1224: pk_rd_pa_reply_dh(krb5_context context,",
      "1225:     const heim_octet_string *indata,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1230: KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL",
      "1231: _krb5_pk_kx_confirm(krb5_context context,",
      "1232:       krb5_pk_init_ctx ctx,",
      "1233:       krb5_keyblock *reply_key,",
      "1234:       krb5_keyblock *session_key,",
      "1235:       PA_DATA *pa_pkinit_kx)",
      "1236: {",
      "1237:     krb5_error_code ret;",
      "1238:     EncryptedData ed;",
      "1239:     krb5_keyblock ck, sk_verify;",
      "1240:     krb5_crypto ck_crypto = NULL;",
      "1241:     krb5_crypto rk_crypto = NULL;",
      "1242:     size_t len;",
      "1243:     krb5_data data;",
      "1244:     krb5_data p1 = { sizeof(\"PKINIT\") - 1, \"PKINIT\" };",
      "1245:     krb5_data p2 = { sizeof(\"KEYEXCHANGE\") - 1, \"KEYEXCHANGE\" };",
      "1247:     heim_assert(ctx != NULL, \"PKINIT context is non-NULL\");",
      "1248:     heim_assert(reply_key != NULL, \"reply key is non-NULL\");",
      "1249:     heim_assert(session_key != NULL, \"session key is non-NULL\");",
      "1252:     if (pa_pkinit_kx == NULL)",
      "1253:  return ctx->anonymous ? KRB5_KDCREP_MODIFIED : 0;",
      "1255:     memset(&ed, 0, sizeof(ed));",
      "1256:     krb5_keyblock_zero(&ck);",
      "1257:     krb5_keyblock_zero(&sk_verify);",
      "1258:     krb5_data_zero(&data);",
      "1260:     ret = decode_EncryptedData(pa_pkinit_kx->padata_value.data,",
      "1261:           pa_pkinit_kx->padata_value.length,",
      "1262:           &ed, &len);",
      "1263:     if (ret)",
      "1264:  goto out;",
      "1266:     if (len != pa_pkinit_kx->padata_value.length) {",
      "1267:  ret = KRB5_KDCREP_MODIFIED;",
      "1268:  goto out;",
      "1269:     }",
      "1271:     ret = krb5_crypto_init(context, reply_key, 0, &rk_crypto);",
      "1272:     if (ret)",
      "1273:  goto out;",
      "1275:     ret = krb5_decrypt_EncryptedData(context, rk_crypto,",
      "1276:          KRB5_KU_PA_PKINIT_KX,",
      "1277:          &ed, &data);",
      "1278:     if (ret)",
      "1279:  goto out;",
      "1281:     ret = decode_EncryptionKey(data.data, data.length,",
      "1282:           &ck, &len);",
      "1283:     if (ret)",
      "1284:  goto out;",
      "1286:     ret = krb5_crypto_init(context, &ck, 0, &ck_crypto);",
      "1287:     if (ret)",
      "1288:  goto out;",
      "1290:     ret = krb5_crypto_fx_cf2(context, ck_crypto, rk_crypto,",
      "1291:         &p1, &p2, session_key->keytype,",
      "1292:         &sk_verify);",
      "1293:     if (ret)",
      "1294:  goto out;",
      "1296:     if (sk_verify.keytype != session_key->keytype ||",
      "1297:  krb5_data_ct_cmp(&sk_verify.keyvalue, &session_key->keyvalue) != 0) {",
      "1298:  ret = KRB5_KDCREP_MODIFIED;",
      "1299:  goto out;",
      "1300:     }",
      "1302: out:",
      "1303:     free_EncryptedData(&ed);",
      "1304:     krb5_free_keyblock_contents(context, &ck);",
      "1305:     krb5_free_keyblock_contents(context, &sk_verify);",
      "1306:     if (ck_crypto)",
      "1307:  krb5_crypto_destroy(context, ck_crypto);",
      "1308:     if (rk_crypto)",
      "1309:  krb5_crypto_destroy(context, rk_crypto);",
      "1310:     krb5_data_free(&data);",
      "1312:     return ret;",
      "1313: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f000d703224376d658f99b0765c2d8e3b757b98f",
      "candidate_info": {
        "commit_hash": "f000d703224376d658f99b0765c2d8e3b757b98f",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/f000d703224376d658f99b0765c2d8e3b757b98f",
        "files": [
          "lib/kadm5/Makefile.am",
          "lib/kadm5/ipropd_master.c",
          "lib/kadm5/kadm5_locl.h",
          "lib/kadm5/test_pw_quality.c"
        ],
        "message": "Align inclusion of krb5_locl.h with master",
        "before_after_code_files": [
          "lib/kadm5/Makefile.am||lib/kadm5/Makefile.am",
          "lib/kadm5/ipropd_master.c||lib/kadm5/ipropd_master.c",
          "lib/kadm5/kadm5_locl.h||lib/kadm5/kadm5_locl.h",
          "lib/kadm5/test_pw_quality.c||lib/kadm5/test_pw_quality.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/kadm5/Makefile.am||lib/kadm5/Makefile.am": [
          "File: lib/kadm5/Makefile.am -> lib/kadm5/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: include $(top_srcdir)/Makefile.am.common",
          "5: libkadm5srv_la_CPPFLAGS = -I$(srcdir)/../krb5",
          "8: lib_LTLIBRARIES = libkadm5srv.la libkadm5clnt.la",
          "9: libkadm5srv_la_LDFLAGS = -version-info 8:1:0",
          "",
          "[Removed Lines]",
          "6: ipropd_master_CPPFLAGS = -I$(srcdir)/../krb5",
          "",
          "[Added Lines]",
          "6: libkadm5clnt_la_CPPFLAGS = -I$(srcdir)/../krb5",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: libexec_PROGRAMS = ipropd-master ipropd-slave",
          "34: default_keys_SOURCES = default_keys.c",
          "36: kadm5includedir = $(includedir)/kadm5",
          "37: buildkadm5include = $(buildinclude)/kadm5",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: default_keys_CPPFLAGS = -I$(srcdir)/../krb5",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "125: nodist_iprop_log_SOURCES = iprop-commands.c",
          "127: ipropd_master_SOURCES = ipropd_master.c ipropd_common.c iprop.h kadm5_locl.h",
          "129: ipropd_slave_SOURCES = ipropd_slave.c ipropd_common.c iprop.h kadm5_locl.h",
          "131: man_MANS = kadm5_pwcheck.3 iprop.8 iprop-log.8",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129: ipropd_master_CPPFLAGS = -I$(srcdir)/../krb5",
          "132: ipropd_slave_CPPFLAGS = -I$(srcdir)/../krb5",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "154:  $(LIB_dlopen) \\",
          "155:  $(LIB_pidfile)",
          "158: iprop-commands.c iprop-commands.h: iprop-commands.in",
          "159:  $(SLC) $(srcdir)/iprop-commands.in",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "160: iprop_log_CPPFLAGS = -I$(srcdir)/../krb5",
          "",
          "---------------"
        ],
        "lib/kadm5/ipropd_master.c||lib/kadm5/ipropd_master.c": [
          "File: lib/kadm5/ipropd_master.c -> lib/kadm5/ipropd_master.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"iprop.h\"",
          "36: #include <rtbl.h>",
          "",
          "[Removed Lines]",
          "34: #include <krb5_locl.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/kadm5/kadm5_locl.h||lib/kadm5/kadm5_locl.h": [
          "File: lib/kadm5/kadm5_locl.h -> lib/kadm5/kadm5_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "80: #include <netdb.h>",
          "81: #endif",
          "82: #include <fnmatch.h>",
          "83: #include \"admin.h\"",
          "84: #include \"kadm5_err.h\"",
          "85: #include <hdb.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83: #include <krb5_locl.h>",
          "",
          "---------------"
        ],
        "lib/kadm5/test_pw_quality.c||lib/kadm5/test_pw_quality.c": [
          "File: lib/kadm5/test_pw_quality.c -> lib/kadm5/test_pw_quality.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include <getarg.h>",
          "39: static int version_flag;",
          "40: static int help_flag;",
          "",
          "[Removed Lines]",
          "34: #include \"kadm5_locl.h\"",
          "37: RCSID(\"$Id$\");",
          "",
          "[Added Lines]",
          "34: #include <string.h>",
          "35: #include <stdlib.h>",
          "38: #include <roken.h>",
          "39: #include <krb5.h>",
          "41: #include \"admin.h\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1293b21e13e8374a4a27629b34bd269c119cd03c",
      "candidate_info": {
        "commit_hash": "1293b21e13e8374a4a27629b34bd269c119cd03c",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/1293b21e13e8374a4a27629b34bd269c119cd03c",
        "files": [
          "kadmin/load.c"
        ],
        "message": "Disable sync during kadmin load\n\n(cherry picked from commit 7d5f8bb051ca84592d1196bf5d5522da5a50f9d6)\n\nChange-Id: I1fb60d697a4f80be1336dd0980f0758eb6436bbb",
        "before_after_code_files": [
          "kadmin/load.c||kadmin/load.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kadmin/load.c||kadmin/load.c": [
          "File: kadmin/load.c -> kadmin/load.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "453:  fclose(f);",
          "454:  return 1;",
          "455:     }",
          "456:     for (lineno = 1;",
          "457:          (ret2 = my_fgetln(f, &line, &linesz, &linelen)) == 0 && linelen > 0;",
          "458:   ++lineno) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "456:     (void) db->hdb_set_sync(context, db, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "608:     }",
          "609:     free(line);",
          "610:     if (ret2)",
          "612:     (void) kadm5_log_end(kadm_handle);",
          "613:     ret2 = db->hdb_close(context, db);",
          "614:     if (ret2)",
          "",
          "[Removed Lines]",
          "611:         ret = ret2;",
          "",
          "[Added Lines]",
          "612:  ret = ret2;",
          "613:     ret2 = db->hdb_set_sync(context, db, 1);",
          "614:     if (ret2)",
          "615:         krb5_err(context, 1, ret, \"failed to sync the HDB\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4b2c3ea03277a42ff7d424e634213d15913229e2",
      "candidate_info": {
        "commit_hash": "4b2c3ea03277a42ff7d424e634213d15913229e2",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/4b2c3ea03277a42ff7d424e634213d15913229e2",
        "files": [
          "kuser/kinit.c",
          "tests/kdc/check-kdc.in"
        ],
        "message": "kuser: allow kinit to renew anonymous PKINIT tickets\n\nAnonymous PKINIT tickets discard the realm information used to locate the\nissuing AS. Store the issuing realm in the credentials cache in order to locate\na KDC which can renew them.\n\n(cherry picked from commit d89b5cb966c41015fad524027107dd2d241b44e8)",
        "before_after_code_files": [
          "kuser/kinit.c||kuser/kinit.c",
          "tests/kdc/check-kdc.in||tests/kdc/check-kdc.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kuser/kinit.c||kuser/kinit.c": [
          "File: kuser/kinit.c -> kuser/kinit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "206:     { \"help\",  0,   arg_flag, &help_flag, NULL, NULL }",
          "207: };",
          "209: static void",
          "210: usage(int ret)",
          "211: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "209: static char *",
          "210: get_default_realm(krb5_context context);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "236:       krb5_principal start_ticket_server)",
          "237: {",
          "238:     krb5_error_code ret;",
          "240:     const char *cfg_names_w_pname[] = {\"fast_avail\", NULL};",
          "241:     krb5_data cfg_data;",
          "242:     size_t i;",
          "",
          "[Removed Lines]",
          "239:     const char *cfg_names[] = {\"realm-config\", \"FriendlyName\", NULL};",
          "",
          "[Added Lines]",
          "242:     const char *cfg_names[] = {\"realm-config\", \"FriendlyName\", \"anon-pkinit-realm\", NULL};",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "276:     return 0;",
          "277: }",
          "279: static krb5_error_code",
          "280: renew_validate(krb5_context context,",
          "281:         int renew,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "282: static krb5_error_code",
          "283: get_anon_pkinit_tgs_name(krb5_context context,",
          "284:     krb5_ccache ccache,",
          "285:     krb5_principal *tgs_name)",
          "286: {",
          "287:     krb5_error_code ret;",
          "288:     krb5_data data;",
          "289:     char *realm;",
          "291:     ret = krb5_cc_get_config(context, ccache, NULL, \"anon-pkinit-realm\", &data);",
          "292:     if (ret == 0) {",
          "293:  realm = malloc(data.length + 1);",
          "294:  memcpy(realm, data.data, data.length);",
          "295:  realm[data.length] = '\\0';",
          "296:     } else",
          "297:  realm = get_default_realm(context);",
          "299:     ret = krb5_make_principal(context, tgs_name, realm,",
          "300:          KRB5_TGS_NAME, realm, NULL);",
          "301:     free(realm);",
          "303:     return ret;",
          "304: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "296:  krb5_warn(context, ret, \"krb5_cc_get_principal\");",
          "297:  return ret;",
          "298:     }",
          "300:     if (ret) {",
          "301:  krb5_warn(context, ret, \"get_server\");",
          "302:  goto out;",
          "",
          "[Removed Lines]",
          "299:     ret = get_server(context, in.client, server, &in.server);",
          "",
          "[Added Lines]",
          "327:     if (server == NULL &&",
          "328:  krb5_principal_is_anonymous(context, in.client,",
          "329:         KRB5_ANON_MATCH_UNAUTHENTICATED))",
          "330:  ret = get_anon_pkinit_tgs_name(context, cache, &in.server);",
          "331:     else",
          "332:  ret = get_server(context, in.client, server, &in.server);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "776:  krb5_cc_set_config(context, ccache, NULL, \"realm-config\", &data);",
          "777:     }",
          "779: out:",
          "780:     krb5_get_init_creds_opt_free(context, opt);",
          "781:     if (ctx)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "812:     if (anonymous_pkinit) {",
          "813:  krb5_data data;",
          "815:  data.length = strlen(principal->realm);",
          "816:  data.data = principal->realm;",
          "818:  krb5_cc_set_config(context, ccache, NULL, \"anon-pkinit-realm\", &data);",
          "819:     }",
          "",
          "---------------"
        ],
        "tests/kdc/check-kdc.in||tests/kdc/check-kdc.in": [
          "File: tests/kdc/check-kdc.in -> tests/kdc/check-kdc.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "737: if test \"$pkinit\" = yes -a \"$rsa\" = yes ; then",
          "739:     echo \"try anonymous pkinit\"; > messages.log",
          "741:  { ec=1 ; eval \"${testfailed}\"; }",
          "742:     ${kgetcred} ${server}@${R} || { ec=1 ; eval \"${testfailed}\"; }",
          "743:     ${kdestroy}",
          "745:     for type in \"\" \"--pk-use-enckey\"; do",
          "",
          "[Removed Lines]",
          "740:     ${kinit} -n @${R} || \\",
          "",
          "[Added Lines]",
          "740:     ${kinit} --renewable -n @${R} || \\",
          "743:     ${kinit} --renew || { ec=1 ; eval \"${testfailed}\"; }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dcc81499c3c6130454cc0ef7c6e56a09dc2ac350",
      "candidate_info": {
        "commit_hash": "dcc81499c3c6130454cc0ef7c6e56a09dc2ac350",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/dcc81499c3c6130454cc0ef7c6e56a09dc2ac350",
        "files": [
          "lib/hcrypto/evp-pkcs11.c"
        ],
        "message": "hcrypto PKCS#11 backend: fix 5995db43564f31537c52c823851bf2b565543cc7\n\nThe cherry pick of 934d5e09bf3ba0774d303da53446e5ff94daae01 dropped\nthe initialization of p11_module_load() *ppFunctionList to NULL.\n\nChange-Id: I0b07315c040340c7ca95ff87fd985c6c7e865aeb",
        "before_after_code_files": [
          "lib/hcrypto/evp-pkcs11.c||lib/hcrypto/evp-pkcs11.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/hcrypto/evp-pkcs11.c||lib/hcrypto/evp-pkcs11.c": [
          "File: lib/hcrypto/evp-pkcs11.c -> lib/hcrypto/evp-pkcs11.c"
        ]
      }
    },
    {
      "candidate_hash": "b1ad2cdd134ad480d6b569c8d7fafa492eeb7325",
      "candidate_info": {
        "commit_hash": "b1ad2cdd134ad480d6b569c8d7fafa492eeb7325",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/b1ad2cdd134ad480d6b569c8d7fafa492eeb7325",
        "files": [
          "lib/hdb/hdb-sqlite.c"
        ],
        "message": "Set def page size for HDB SQLite3 backend to 8KB\n\n(cherry picked from commit e3cc7dfb94826aa709a617fb8e59ab07db584f92)",
        "before_after_code_files": [
          "lib/hdb/hdb-sqlite.c||lib/hdb/hdb-sqlite.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/hdb/hdb-sqlite.c||lib/hdb/hdb-sqlite.c": [
          "File: lib/hdb/hdb-sqlite.c -> lib/hdb/hdb-sqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "419:         created_file = 1;",
          "421:         ret = hdb_sqlite_exec_stmt(context, hsdb,",
          "422:                                    HDBSQLITE_CREATE_TABLES,",
          "423:                                    HDB_ERR_UK_SERROR);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "421:         hdb_sqlite_exec_stmt(context, hsdb,",
          "422:                              \"PRAGMA main.page_size = 8192\",",
          "423:                              HDB_ERR_UK_SERROR);",
          "",
          "---------------"
        ]
      }
    }
  ]
}