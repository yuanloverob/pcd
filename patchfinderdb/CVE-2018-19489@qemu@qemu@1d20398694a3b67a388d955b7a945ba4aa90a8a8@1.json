{
  "cve_id": "CVE-2018-19489",
  "cve_desc": "v9fs_wstat in hw/9pfs/9p.c in QEMU allows guest OS users to cause a denial of service (crash) because of a race condition during file renaming.",
  "repo": "qemu/qemu",
  "patch_hash": "1d20398694a3b67a388d955b7a945ba4aa90a8a8",
  "patch_info": {
    "commit_hash": "1d20398694a3b67a388d955b7a945ba4aa90a8a8",
    "repo": "qemu/qemu",
    "commit_url": "https://github.com/qemu/qemu/commit/1d20398694a3b67a388d955b7a945ba4aa90a8a8",
    "files": [
      "hw/9pfs/9p.c"
    ],
    "message": "9p: fix QEMU crash when renaming files\n\nWhen using the 9P2000.u version of the protocol, the following shell\ncommand line in the guest can cause QEMU to crash:\n\n    while true; do rm -rf aa; mkdir -p a/b & touch a/b/c & mv a aa; done\n\nWith 9P2000.u, file renaming is handled by the WSTAT command. The\nv9fs_wstat() function calls v9fs_complete_rename(), which calls\nv9fs_fix_path() for every fid whose path is affected by the change.\nThe involved calls to v9fs_path_copy() may race with any other access\nto the fid path performed by some worker thread, causing a crash like\nshown below:\n\nThread 12 \"qemu-system-x86\" received signal SIGSEGV, Segmentation fault.\n0x0000555555a25da2 in local_open_nofollow (fs_ctx=0x555557d958b8, path=0x0,\n flags=65536, mode=0) at hw/9pfs/9p-local.c:59\n59          while (*path && fd != -1) {\n(gdb) bt\n#0  0x0000555555a25da2 in local_open_nofollow (fs_ctx=0x555557d958b8,\n path=0x0, flags=65536, mode=0) at hw/9pfs/9p-local.c:59\n#1  0x0000555555a25e0c in local_opendir_nofollow (fs_ctx=0x555557d958b8,\n path=0x0) at hw/9pfs/9p-local.c:92\n#2  0x0000555555a261b8 in local_lstat (fs_ctx=0x555557d958b8,\n fs_path=0x555556b56858, stbuf=0x7fff84830ef0) at hw/9pfs/9p-local.c:185\n#3  0x0000555555a2b367 in v9fs_co_lstat (pdu=0x555557d97498,\n path=0x555556b56858, stbuf=0x7fff84830ef0) at hw/9pfs/cofile.c:53\n#4  0x0000555555a1e9e2 in v9fs_stat (opaque=0x555557d97498)\n at hw/9pfs/9p.c:1083\n#5  0x0000555555e060a2 in coroutine_trampoline (i0=-669165424, i1=32767)\n at util/coroutine-ucontext.c:116\n#6  0x00007fffef4f5600 in __start_context () at /lib64/libc.so.6\n#7  0x0000000000000000 in  ()\n(gdb)\n\nThe fix is to take the path write lock when calling v9fs_complete_rename(),\nlike in v9fs_rename().\n\nImpact:  DoS triggered by unprivileged guest users.\n\nFixes: CVE-2018-19489\nCc: P J P <ppandit@redhat.com>\nReported-by: zhibin hu <noirfate@gmail.com>\nReviewed-by: Prasad J Pandit <pjp@fedoraproject.org>\nSigned-off-by: Greg Kurz <groug@kaod.org>",
    "before_after_code_files": [
      "hw/9pfs/9p.c||hw/9pfs/9p.c"
    ]
  },
  "patch_diff": {
    "hw/9pfs/9p.c||hw/9pfs/9p.c": [
      "File: hw/9pfs/9p.c -> hw/9pfs/9p.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2855:     struct stat stbuf;",
      "2856:     V9fsFidState *fidp;",
      "2857:     V9fsPDU *pdu = opaque;",
      "2859:     v9fs_stat_init(&v9stat);",
      "2860:     err = pdu_unmarshal(pdu, offset, \"dwS\", &fid, &unused, &v9stat);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2858:     V9fsState *s = pdu->s;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2920:         }",
      "2921:     }",
      "2922:     if (v9stat.name.size != 0) {",
      "2923:         err = v9fs_complete_rename(pdu, fidp, -1, &v9stat.name);",
      "2924:         if (err < 0) {",
      "2925:             goto out;",
      "2926:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2924:         v9fs_path_write_lock(s);",
      "2926:         v9fs_path_unlock(s);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8f1d22d97046052424c7daf7c657bb68a816c540",
      "candidate_info": {
        "commit_hash": "8f1d22d97046052424c7daf7c657bb68a816c540",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/8f1d22d97046052424c7daf7c657bb68a816c540",
        "files": [
          "tests/vhost-user-bridge.c"
        ],
        "message": "vhost-user-bridge: fix recvmsg iovlen\n\nAfter iov_discard_front(), the iov may be smaller than its initial\nsize. Fixes the heap-buffer-overflow spotted by ASAN:\n\n==9036==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6060000001e0 at pc 0x7fe632eca3f0 bp 0x7ffddc4a05a0 sp 0x7ffddc49fd48\nWRITE of size 32 at 0x6060000001e0 thread T0\n    #0 0x7fe632eca3ef  (/lib64/libasan.so.5+0x773ef)\n    #1 0x7fe632ecad23 in __interceptor_recvmsg (/lib64/libasan.so.5+0x77d23)\n    #2 0x561e7491936b in vubr_backend_recv_cb /home/elmarco/src/qemu/tests/vhost-user-bridge.c:333\n    #3 0x561e74917711 in dispatcher_wait /home/elmarco/src/qemu/tests/vhost-user-bridge.c:160\n    #4 0x561e7491c3b5 in vubr_run /home/elmarco/src/qemu/tests/vhost-user-bridge.c:725\n    #5 0x561e7491c85c in main /home/elmarco/src/qemu/tests/vhost-user-bridge.c:806\n    #6 0x7fe631a6c412 in __libc_start_main (/lib64/libc.so.6+0x24412)\n    #7 0x561e7491667d in _start (/home/elmarco/src/qemu/build/tests/vhost-user-bridge+0x3967d)\n\n0x6060000001e0 is located 0 bytes to the right of 64-byte region [0x6060000001a0,0x6060000001e0)\nallocated by thread T0 here:\n    #0 0x7fe632f42848 in __interceptor_malloc (/lib64/libasan.so.5+0xef848)\n    #1 0x561e7493acd8 in virtqueue_alloc_element /home/elmarco/src/qemu/contrib/libvhost-user/libvhost-user.c:1848\n    #2 0x561e7493c2a8 in vu_queue_pop /home/elmarco/src/qemu/contrib/libvhost-user/libvhost-user.c:1954\n    #3 0x561e749189bf in vubr_backend_recv_cb /home/elmarco/src/qemu/tests/vhost-user-bridge.c:297\n    #4 0x561e74917711 in dispatcher_wait /home/elmarco/src/qemu/tests/vhost-user-bridge.c:160\n    #5 0x561e7491c3b5 in vubr_run /home/elmarco/src/qemu/tests/vhost-user-bridge.c:725\n    #6 0x561e7491c85c in main /home/elmarco/src/qemu/tests/vhost-user-bridge.c:806\n    #7 0x7fe631a6c412 in __libc_start_main (/lib64/libc.so.6+0x24412)\n\nSUMMARY: AddressSanitizer: heap-buffer-overflow (/lib64/libasan.so.5+0x773ef)\nShadow bytes around the buggy address:\n  0x0c0c7fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c0c7fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c0c7fff8000: fa fa fa fa 00 00 00 00 00 00 05 fa fa fa fa fa\n  0x0c0c7fff8010: 00 00 00 00 00 00 00 00 fa fa fa fa fd fd fd fd\n  0x0c0c7fff8020: fd fd fd fd fa fa fa fa fd fd fd fd fd fd fd fd\n=>0x0c0c7fff8030: fa fa fa fa 00 00 00 00 00 00 00 00[fa]fa fa fa\n  0x0c0c7fff8040: fd fd fd fd fd fd fd fd fa fa fa fa fd fd fd fd\n  0x0c0c7fff8050: fd fd fd fd fa fa fa fa fd fd fd fd fd fd fd fd\n  0x0c0c7fff8060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c0c7fff8070: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c0c7fff8080: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n\nSigned-off-by: Marc-Andr\u00e9 Lureau <marcandre.lureau@redhat.com>\nMessage-Id: <20181109173028.3372-1-marcandre.lureau@redhat.com>\nSigned-off-by: Paolo BOnzini <pbonzini@redhat.com>",
        "before_after_code_files": [
          "tests/vhost-user-bridge.c||tests/vhost-user-bridge.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/vhost-user-bridge.c||tests/vhost-user-bridge.c": [
          "File: tests/vhost-user-bridge.c -> tests/vhost-user-bridge.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "323:             .msg_name = (struct sockaddr *) &vubr->backend_udp_dest,",
          "324:             .msg_namelen = sizeof(struct sockaddr_in),",
          "325:             .msg_iov = sg,",
          "327:             .msg_flags = MSG_DONTWAIT,",
          "328:         };",
          "329:         do {",
          "",
          "[Removed Lines]",
          "326:             .msg_iovlen = elem->in_num,",
          "",
          "[Added Lines]",
          "326:             .msg_iovlen = num,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0c57893d62596d1d91779452be3b38b4b72ecd04",
      "candidate_info": {
        "commit_hash": "0c57893d62596d1d91779452be3b38b4b72ecd04",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/0c57893d62596d1d91779452be3b38b4b72ecd04",
        "files": [
          "vl.c"
        ],
        "message": "vl: Avoid crash when -mon is underspecified\n\nA quick coredump on an incomplete command line:\n./x86_64-softmmu/qemu-system-x86_64 -mon mode=control,pretty=on\n\n #0  0x00007ffff723d9e4 in g_str_hash () at /lib64/libglib-2.0.so.0\n #1  0x00007ffff723ce38 in g_hash_table_lookup () at /lib64/libglib-2.0.so.0\n #2  0x0000555555cc0073 in object_class_property_find (klass=0x5555566a94b0, name=0x0, errp=0x0) at qom/object.c:1135\n #3  0x0000555555cc004b in object_class_property_find (klass=0x5555566a9440, name=0x0, errp=0x0) at qom/object.c:1129\n #4  0x0000555555cbfe6e in object_property_find (obj=0x5555568348c0, name=0x0, errp=0x0) at qom/object.c:1080\n #5  0x0000555555cc183d in object_resolve_path_component (parent=0x5555568348c0, part=0x0) at qom/object.c:1762\n #6  0x0000555555d82071 in qemu_chr_find (name=0x0) at chardev/char.c:802\n #7  0x00005555559d77cb in mon_init_func (opaque=0x0, opts=0x5555566b65a0, errp=0x0) at vl.c:2291\n\nFix it to instead fail gracefully.\n\nSigned-off-by: Eric Blake <eblake@redhat.com>\nMessage-Id: <20181023213600.364086-1-eblake@redhat.com>\nReviewed-by: Paolo Bonzini <pbonzini@redhat.com>\nReviewed-by: Philippe Mathieu-Daud\u00e9 <philmd@redhat.com>\nReviewed-by: Peter Xu <peterx@redhat.com>\nSigned-off-by: Markus Armbruster <armbru@redhat.com>",
        "before_after_code_files": [
          "vl.c||vl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "vl.c||vl.c": [
          "File: vl.c -> vl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2323:     }",
          "2325:     chardev = qemu_opt_get(opts, \"chardev\");",
          "2326:     chr = qemu_chr_find(chardev);",
          "2327:     if (chr == NULL) {",
          "2328:         error_setg(errp, \"chardev \\\"%s\\\" not found\", chardev);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2326:     if (!chardev) {",
          "2327:         error_report(\"chardev is required\");",
          "2328:         exit(1);",
          "2329:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "00382fa85126edc63720480fd22458e1af4e58c7",
      "candidate_info": {
        "commit_hash": "00382fa85126edc63720480fd22458e1af4e58c7",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/00382fa85126edc63720480fd22458e1af4e58c7",
        "files": [
          "qobject/json-parser.c",
          "tests/qemu-iotests/229"
        ],
        "message": "json: Fix to reject duplicate object member names\n\nThe JSON parser happily accepts duplicate object member names.  The\nlast value wins.  Reproducer #1:\n\n    $ qemu-system-x86_64 -qmp stdio\n    {\"QMP\": {\"version\": {\"qemu\": {\"micro\": 93, \"minor\": 0, \"major\": 3},\n    \"package\": \"v3.1.0-rc3-7-g87a45d86ed\"}, \"capabilities\": []}}\n    {'execute':'qmp_capabilities'}\n    {\"return\": {}}\n    {'execute':'blockdev-add','arguments':{'driver':'null-co',\n     'node-name':'foo','node-name':'bar'}}\n    {\"return\": {}}\n    {'execute':'query-named-block-nodes'}\n    {\"return\": [{ [...] \"node-name\": \"bar\" [...] }]}\n\nReproducer #2 is iotest 229.\n\nFix the parser to reject duplicates, and fix iotest 229 not to use\nthem.\n\nReported-by: Max Reitz <mreitz@redhat.com>\nSigned-off-by: Markus Armbruster <armbru@redhat.com>\nMessage-Id: <20181206121743.20762-1-armbru@redhat.com>\nReviewed-by: Daniel P. Berrang\u00e9 <berrange@redhat.com>\nReviewed-by: Philippe Mathieu-Daud\u00e9 <philmd@redhat.com>\n[Trailing whitespace tidied up]\nSigned-off-by: Markus Armbruster <armbru@redhat.com>",
        "before_after_code_files": [
          "qobject/json-parser.c||qobject/json-parser.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "qobject/json-parser.c||qobject/json-parser.c": [
          "File: qobject/json-parser.c -> qobject/json-parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "288:         goto out;",
          "289:     }",
          "291:     qdict_put_obj(dict, qstring_get_str(key), value);",
          "293:     qobject_unref(key);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "291:     if (qdict_haskey(dict, qstring_get_str(key))) {",
          "292:         parse_error(ctxt, token, \"duplicate key\");",
          "293:         goto out;",
          "294:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d12ade5732c4d2d293735a39b4bd943da8d64db6",
      "candidate_info": {
        "commit_hash": "d12ade5732c4d2d293735a39b4bd943da8d64db6",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/d12ade5732c4d2d293735a39b4bd943da8d64db6",
        "files": [
          "block/mirror.c"
        ],
        "message": "mirror: fix dead-lock\n\nLet start from the beginning:\n\nCommit b9e413dd375 (in 2.9)\n\"block: explicitly acquire aiocontext in aio callbacks that need it\"\nadded pairs of aio_context_acquire/release to mirror_write_complete and\nmirror_read_complete, when they were aio callbacks for blk_aio_* calls.\n\nThen, commit 2e1990b26e5 (in 3.0) \"block/mirror: Convert to coroutines\"\ndropped these blk_aio_* calls, than mirror_write_complete and\nmirror_read_complete are not callbacks more, and don't need additional\naiocontext acquiring. Furthermore, mirror_read_complete calls\nblk_co_pwritev inside these pair of aio_context_acquire/release, which\nleads to the following dead-lock with mirror:\n\n (gdb) info thr\n   Id   Target Id         Frame\n   3    Thread (LWP 145412) \"qemu-system-x86\" syscall ()\n   2    Thread (LWP 145416) \"qemu-system-x86\" __lll_lock_wait ()\n * 1    Thread (LWP 145411) \"qemu-system-x86\" __lll_lock_wait ()\n\n (gdb) bt\n #0  __lll_lock_wait ()\n #1  _L_lock_812 ()\n #2  __GI___pthread_mutex_lock\n #3  qemu_mutex_lock_impl (mutex=0x561032dce420 <qemu_global_mutex>,\n     file=0x5610327d8654 \"util/main-loop.c\", line=236) at\n     util/qemu-thread-posix.c:66\n #4  qemu_mutex_lock_iothread_impl\n #5  os_host_main_loop_wait (timeout=480116000) at util/main-loop.c:236\n #6  main_loop_wait (nonblocking=0) at util/main-loop.c:497\n #7  main_loop () at vl.c:1892\n #8  main\n\nPrinting contents of qemu_global_mutex, I see that \"__owner = 145416\",\nso, thr1 is main loop, and now it wants BQL, which is owned by thr2.\n\n (gdb) thr 2\n (gdb) bt\n #0  __lll_lock_wait ()\n #1  _L_lock_870 ()\n #2  __GI___pthread_mutex_lock\n #3  qemu_mutex_lock_impl (mutex=0x561034d25dc0, ...\n #4  aio_context_acquire (ctx=0x561034d25d60)\n #5  dma_blk_cb\n #6  dma_blk_io\n #7  dma_blk_read\n #8  ide_dma_cb\n #9  bmdma_cmd_writeb\n #10 bmdma_write\n #11 memory_region_write_accessor\n #12 access_with_adjusted_size\n #15 flatview_write\n #16 address_space_write\n #17 address_space_rw\n #18 kvm_handle_io\n #19 kvm_cpu_exec\n #20 qemu_kvm_cpu_thread_fn\n #21 qemu_thread_start\n #22 start_thread\n #23 clone ()\n\nPrinting mutex in fr 2, I see \"__owner = 145411\", so thr2 wants aio\ncontext mutex, which is owned by thr1. Classic dead-lock.\n\nThen, let's check that aio context is hold by mirror coroutine: just\nprint coroutine stack of first tracked request in mirror job target:\n\n (gdb) [...]\n (gdb) qemu coroutine 0x561035dd0860\n #0  qemu_coroutine_switch\n #1  qemu_coroutine_yield\n #2  qemu_co_mutex_lock_slowpath\n #3  qemu_co_mutex_lock\n #4  qcow2_co_pwritev\n #5  bdrv_driver_pwritev\n #6  bdrv_aligned_pwritev\n #7  bdrv_co_pwritev\n #8  blk_co_pwritev\n #9  mirror_read_complete () at block/mirror.c:232\n #10 mirror_co_read () at block/mirror.c:370\n #11 coroutine_trampoline\n #12 __start_context\n\nYes it is mirror_read_complete calling blk_co_pwritev after acquiring\naio context.\n\nSigned-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>\nReviewed-by: Max Reitz <mreitz@redhat.com>\nSigned-off-by: Kevin Wolf <kwolf@redhat.com>",
        "before_after_code_files": [
          "block/mirror.c||block/mirror.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "block/mirror.c||block/mirror.c": [
          "File: block/mirror.c -> block/mirror.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "199: {",
          "200:     MirrorBlockJob *s = op->s;",
          "203:     if (ret < 0) {",
          "204:         BlockErrorAction action;",
          "",
          "[Removed Lines]",
          "202:     aio_context_acquire(blk_get_aio_context(s->common.blk));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "209:             s->ret = ret;",
          "210:         }",
          "211:     }",
          "212:     mirror_iteration_done(op, ret);",
          "214: }",
          "216: static void coroutine_fn mirror_read_complete(MirrorOp *op, int ret)",
          "217: {",
          "218:     MirrorBlockJob *s = op->s;",
          "221:     if (ret < 0) {",
          "222:         BlockErrorAction action;",
          "",
          "[Removed Lines]",
          "213:     aio_context_release(blk_get_aio_context(s->common.blk));",
          "220:     aio_context_acquire(blk_get_aio_context(s->common.blk));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "228:         }",
          "230:         mirror_iteration_done(op, ret);",
          "235:     }",
          "237: }",
          "",
          "[Removed Lines]",
          "231:     } else {",
          "232:         ret = blk_co_pwritev(s->target, op->offset,",
          "233:                              op->qiov.size, &op->qiov, 0);",
          "234:         mirror_write_complete(op, ret);",
          "236:     aio_context_release(blk_get_aio_context(s->common.blk));",
          "",
          "[Added Lines]",
          "229:         return;",
          "232:     ret = blk_co_pwritev(s->target, op->offset, op->qiov.size, &op->qiov, 0);",
          "233:     mirror_write_complete(op, ret);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "34f1f3e06d8824740d3bc41556f8300f0fb463cf",
      "candidate_info": {
        "commit_hash": "34f1f3e06d8824740d3bc41556f8300f0fb463cf",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/34f1f3e06d8824740d3bc41556f8300f0fb463cf",
        "files": [
          "monitor.c"
        ],
        "message": "monitor: avoid potential dead-lock when cleaning up\n\nWhen a monitor is connected to a Spice chardev, the monitor cleanup\ncan dead-lock:\n\n #0  0x00007f43446637fd in __lll_lock_wait () at /lib64/libpthread.so.0\n #1  0x00007f434465ccf4 in pthread_mutex_lock () at /lib64/libpthread.so.0\n #2  0x0000556dd79f22ba in qemu_mutex_lock_impl (mutex=0x556dd81c9220 <monitor_lock>, file=0x556dd7ae3648 \"/home/elmarco/src/qq/monitor.c\", line=645) at /home/elmarco/src/qq/util/qemu-thread-posix.c:66\n #3  0x0000556dd7431bd5 in monitor_qapi_event_queue (event=QAPI_EVENT_SPICE_DISCONNECTED, qdict=0x556dd9abc850, errp=0x7fffb7bbddd8) at /home/elmarco/src/qq/monitor.c:645\n #4  0x0000556dd79d476b in qapi_event_send_spice_disconnected (server=0x556dd98ee760, client=0x556ddaaa8560, errp=0x556dd82180d0 <error_abort>) at qapi/qapi-events-ui.c:149\n #5  0x0000556dd7870fc1 in channel_event (event=3, info=0x556ddad1b590) at /home/elmarco/src/qq/ui/spice-core.c:235\n #6  0x00007f434560a6bb in reds_handle_channel_event (reds=<optimized out>, event=3, info=0x556ddad1b590) at reds.c:316\n #7  0x00007f43455f393b in main_dispatcher_self_handle_channel_event (info=0x556ddad1b590, event=3, self=0x556dd9a7d8c0) at main-dispatcher.c:197\n #8  0x00007f43455f393b in main_dispatcher_channel_event (self=0x556dd9a7d8c0, event=event@entry=3, info=0x556ddad1b590) at main-dispatcher.c:197\n #9  0x00007f4345612833 in red_stream_push_channel_event (s=s@entry=0x556ddae2ef40, event=event@entry=3) at red-stream.c:414\n #10 0x00007f434561286b in red_stream_free (s=0x556ddae2ef40) at red-stream.c:388\n #11 0x00007f43455f9ddc in red_channel_client_finalize (object=0x556dd9bb21a0) at red-channel-client.c:347\n #12 0x00007f434b5f9fb9 in g_object_unref () at /lib64/libgobject-2.0.so.0\n #13 0x00007f43455fc212 in red_channel_client_push (rcc=0x556dd9bb21a0) at red-channel-client.c:1341\n #14 0x0000556dd76081ba in spice_port_set_fe_open (chr=0x556dd9925e20, fe_open=0) at /home/elmarco/src/qq/chardev/spice.c:241\n #15 0x0000556dd796d74a in qemu_chr_fe_set_open (be=0x556dd9a37c00, fe_open=0) at /home/elmarco/src/qq/chardev/char-fe.c:340\n #16 0x0000556dd796d4d9 in qemu_chr_fe_set_handlers (b=0x556dd9a37c00, fd_can_read=0x0, fd_read=0x0, fd_event=0x0, be_change=0x0, opaque=0x0, context=0x0, set_open=true) at /home/elmarco/src/qq/chardev/char-fe.c:280\n #17 0x0000556dd796d359 in qemu_chr_fe_deinit (b=0x556dd9a37c00, del=false) at /home/elmarco/src/qq/chardev/char-fe.c:233\n #18 0x0000556dd7432240 in monitor_data_destroy (mon=0x556dd9a37c00) at /home/elmarco/src/qq/monitor.c:786\n #19 0x0000556dd743b968 in monitor_cleanup () at /home/elmarco/src/qq/monitor.c:4683\n #20 0x0000556dd75ce776 in main (argc=3, argv=0x7fffb7bbe458, envp=0x7fffb7bbe478) at /home/elmarco/src/qq/vl.c:4660\n\nBecause spice code tries to emit a \"disconnected\" signal on the\nmonitors. Fix this dead-lock by releasing the monitor lock for\nflush/destroy.\n\nmonitor_lock protects mon_list, monitor_qapi_event_state and\nmonitor_destroyed. monitor_flush() and monitor_data_destroy() don't\naccess any of those variables.\n\nmonitor_cleanup()'s loop is safe because it uses\nQTAILQ_FOREACH_SAFE(), and no further monitor can be added after\ncalling monitor_cleanup() thanks to monitor_destroyed check in\nmonitor_list_append().\n\nSigned-off-by: Marc-Andr\u00e9 Lureau <marcandre.lureau@redhat.com>\nReviewed-by: Markus Armbruster <armbru@redhat.com>\nMessage-Id: <20181205203737.9011-8-marcandre.lureau@redhat.com>\nSigned-off-by: Markus Armbruster <armbru@redhat.com>",
        "before_after_code_files": [
          "monitor.c||monitor.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "monitor.c||monitor.c": [
          "File: monitor.c -> monitor.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4651:     monitor_destroyed = true;",
          "4652:     QTAILQ_FOREACH_SAFE(mon, &mon_list, entry, next) {",
          "4653:         QTAILQ_REMOVE(&mon_list, mon, entry);",
          "4654:         monitor_flush(mon);",
          "4655:         monitor_data_destroy(mon);",
          "4656:         g_free(mon);",
          "4657:     }",
          "4658:     qemu_mutex_unlock(&monitor_lock);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4655:         qemu_mutex_unlock(&monitor_lock);",
          "4658:         qemu_mutex_lock(&monitor_lock);",
          "",
          "---------------"
        ]
      }
    }
  ]
}