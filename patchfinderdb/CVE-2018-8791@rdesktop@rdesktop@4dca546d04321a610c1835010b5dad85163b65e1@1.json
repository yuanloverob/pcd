{
  "cve_id": "CVE-2018-8791",
  "cve_desc": "rdesktop versions up to and including v1.8.3 contain an Out-Of-Bounds Read in function rdpdr_process() that results in an information leak.",
  "repo": "rdesktop/rdesktop",
  "patch_hash": "4dca546d04321a610c1835010b5dad85163b65e1",
  "patch_info": {
    "commit_hash": "4dca546d04321a610c1835010b5dad85163b65e1",
    "repo": "rdesktop/rdesktop",
    "commit_url": "https://github.com/rdesktop/rdesktop/commit/4dca546d04321a610c1835010b5dad85163b65e1",
    "files": [
      "asn.c",
      "bitmap.c",
      "cliprdr.c",
      "constants.h",
      "cssp.c",
      "lspci.c",
      "mcs.c",
      "orders.c",
      "proto.h",
      "rdp.c",
      "rdpdr.c",
      "rdpsnd.c",
      "seamless.c",
      "secure.c",
      "stream.h",
      "types.h"
    ],
    "message": "Malicious RDP server security fixes\n\nThis commit includes fixes for a set of 21 vulnerabilities in\nrdesktop when a malicious RDP server is used.\n\nAll vulnerabilities was identified and reported by Eyal Itkin.\n\n * Add rdp_protocol_error function that is used in several fixes\n * Refactor of process_bitmap_updates\n * Fix possible integer overflow in s_check_rem() on 32bit arch\n * Fix memory corruption in process_bitmap_data - CVE-2018-8794\n * Fix remote code execution in process_bitmap_data - CVE-2018-8795\n * Fix remote code execution in process_plane - CVE-2018-8797\n * Fix Denial of Service in mcs_recv_connect_response - CVE-2018-20175\n * Fix Denial of Service in mcs_parse_domain_params - CVE-2018-20175\n * Fix Denial of Service in sec_parse_crypt_info - CVE-2018-20176\n * Fix Denial of Service in sec_recv - CVE-2018-20176\n * Fix minor information leak in rdpdr_process - CVE-2018-8791\n * Fix Denial of Service in cssp_read_tsrequest - CVE-2018-8792\n * Fix remote code execution in cssp_read_tsrequest - CVE-2018-8793\n * Fix Denial of Service in process_bitmap_data - CVE-2018-8796\n * Fix minor information leak in rdpsnd_process_ping - CVE-2018-8798\n * Fix Denial of Service in process_secondary_order - CVE-2018-8799\n * Fix remote code execution in in ui_clip_handle_data - CVE-2018-8800\n * Fix major information leak in ui_clip_handle_data - CVE-2018-20174\n * Fix memory corruption in rdp_in_unistr - CVE-2018-20177\n * Fix Denial of Service in process_demand_active - CVE-2018-20178\n * Fix remote code execution in lspci_process - CVE-2018-20179\n * Fix remote code execution in rdpsnddbg_process - CVE-2018-20180\n * Fix remote code execution in seamless_process - CVE-2018-20181\n * Fix remote code execution in seamless_process_line - CVE-2018-20182",
    "before_after_code_files": [
      "asn.c||asn.c",
      "bitmap.c||bitmap.c",
      "cliprdr.c||cliprdr.c",
      "constants.h||constants.h",
      "cssp.c||cssp.c",
      "lspci.c||lspci.c",
      "mcs.c||mcs.c",
      "orders.c||orders.c",
      "proto.h||proto.h",
      "rdp.c||rdp.c",
      "rdpdr.c||rdpdr.c",
      "rdpsnd.c||rdpsnd.c",
      "seamless.c||seamless.c",
      "secure.c||secure.c",
      "stream.h||stream.h",
      "types.h||types.h"
    ]
  },
  "patch_diff": {
    "asn.c||asn.c": [
      "File: asn.c -> asn.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: RD_BOOL",
      "26: {",
      "27:  int tag, len;",
      "",
      "[Removed Lines]",
      "25: ber_parse_header(STREAM s, int tagval, int *length)",
      "",
      "[Added Lines]",
      "25: ber_parse_header(STREAM s, int tagval, uint32 *length)",
      "",
      "---------------"
    ],
    "bitmap.c||bitmap.c": [
      "File: bitmap.c -> bitmap.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "794:      replen = revcode;",
      "795:      collen = 0;",
      "796:     }",
      "798:     {",
      "799:      color = CVAL(in);",
      "",
      "[Removed Lines]",
      "797:     while (collen > 0)",
      "",
      "[Added Lines]",
      "797:     while (indexw < width && collen > 0)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "802:      indexw++;",
      "803:      collen--;",
      "804:     }",
      "806:     {",
      "808:      out += 4;",
      "",
      "[Removed Lines]",
      "805:     while (replen > 0)",
      "",
      "[Added Lines]",
      "805:     while (indexw < width && replen > 0)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "824:      replen = revcode;",
      "825:      collen = 0;",
      "826:     }",
      "828:     {",
      "829:      x = CVAL(in);",
      "830:      if (x & 1)",
      "",
      "[Removed Lines]",
      "827:     while (collen > 0)",
      "",
      "[Added Lines]",
      "827:     while (indexw < width && collen > 0)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "844:      indexw++;",
      "845:      collen--;",
      "846:     }",
      "848:     {",
      "849:      x = last_line[indexw * 4] + color;",
      "",
      "[Removed Lines]",
      "847:     while (replen > 0)",
      "",
      "[Added Lines]",
      "847:     while (indexw < width && replen > 0)",
      "",
      "---------------"
    ],
    "cliprdr.c||cliprdr.c": [
      "File: cliprdr.c -> cliprdr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "118:  uint16 type, status;",
      "119:  uint32 length, format;",
      "120:  uint8 *data;",
      "122:  in_uint16_le(s, type);",
      "123:  in_uint16_le(s, status);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "121:  struct stream packet = *s;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "127:  logger(Clipboard, Debug, \"cliprdr_process(), type=%d, status=%d, length=%d\", type, status,",
      "128:         length);",
      "130:  if (status == CLIPRDR_ERROR)",
      "131:  {",
      "132:   switch (type)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "131:  if (!s_check_rem(s, length))",
      "132:  {",
      "133:   rdp_protocol_error(\"cliprdr_process(), consume of packet from stream would overrun\", &packet);",
      "134:  }",
      "",
      "---------------"
    ],
    "constants.h||constants.h": [
      "File: constants.h -> constants.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "751: #define ENC_SALTED_CHECKSUM  0x0010",
      "752: #define NO_BITMAP_COMPRESSION_HDR 0x0400",
      "755: #define NEGOTIATEORDERSUPPORT 0x0002",
      "756: #define ZEROBOUNDSDELTASSUPPORT 0x0008",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "755: #define BITMAP_COMPRESSION              0x0001",
      "",
      "---------------"
    ],
    "cssp.c||cssp.c": [
      "File: cssp.c -> cssp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "595:  STREAM s;",
      "596:  int length;",
      "597:  int tagval;",
      "599:  s = tcp_recv(NULL, 4);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "598:  struct stream packet;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "624:  s = tcp_recv(s, length);",
      "627:  if (!ber_in_header(s, &tagval, &length) ||",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "626:  packet = *s;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "632:  if (!ber_in_header(s, &tagval, &length) ||",
      "633:      tagval != (BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 0))",
      "634:   return False;",
      "635:  in_uint8s(s, length);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "638:  if (!s_check_rem(s, length))",
      "639:  {",
      "640:    rdp_protocol_error(\"cssp_read_tsrequest(), consume of version from stream would overrun\",",
      "641:         &packet);",
      "642:  }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "653:   if (!ber_in_header(s, &tagval, &length) || tagval != BER_TAG_OCTET_STRING)",
      "654:    return False;",
      "657:   out_uint8p(token, s->p, length);",
      "658:   s_mark_end(token);",
      "659:  }",
      "",
      "[Removed Lines]",
      "656:   token->end = token->p = token->data;",
      "",
      "[Added Lines]",
      "664:   if (!s_check_rem(s, length))",
      "665:   {",
      "666:    rdp_protocol_error(\"cssp_read_tsrequest(), consume of token from stream would overrun\",",
      "667:         &packet);",
      "668:   }",
      "670:   s_realloc(token, length);",
      "671:   s_reset(token);",
      "",
      "---------------"
    ],
    "lspci.c||lspci.c": [
      "File: lspci.c -> lspci.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2:    rdesktop: A Remote Desktop Protocol client.",
      "3:    Support for the Matrox \"lspci\" channel",
      "6:    This program is free software: you can redistribute it and/or modify",
      "7:    it under the terms of the GNU General Public License as published by",
      "",
      "[Removed Lines]",
      "4:    Copyright (C) 2005 Matrox Graphics Inc.",
      "",
      "[Added Lines]",
      "4:    Copyright (C) 2005 Matrox Graphics Inc.",
      "5:    Copyright 2018 Henrik Andersson <hean01@cendio.se> for Cendio AB",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "134:  unsigned int pkglen;",
      "135:  static char *rest = NULL;",
      "136:  char *buf;",
      "138:  pkglen = s->end - s->p;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "138:  struct stream packet = *s;",
      "140:  if (!s_check(s))",
      "141:  {",
      "142:   rdp_protocol_error(\"lspci_process(), stream is in unstable state\", &packet);",
      "143:  }",
      "",
      "---------------"
    ],
    "mcs.c||mcs.c": [
      "File: mcs.c -> mcs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "45: static RD_BOOL",
      "46: mcs_parse_domain_params(STREAM s)",
      "47: {",
      "50:  ber_parse_header(s, MCS_TAG_DOMAIN_PARAMS, &length);",
      "51:  in_uint8s(s, length);",
      "53:  return s_check(s);",
      "",
      "[Removed Lines]",
      "48:  int length;",
      "",
      "[Added Lines]",
      "48:  uint32 length;",
      "49:  struct stream packet = *s;",
      "53:  if (!s_check_rem(s, length))",
      "54:  {",
      "55:   rdp_protocol_error(\"mcs_parse_domain_params(), consume domain params from stream would overrun\", &packet);",
      "56:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "89: {",
      "90:  UNUSED(mcs_data);",
      "91:  uint8 result;",
      "93:  STREAM s;",
      "94:  RD_BOOL is_fastpath;",
      "95:  uint8 fastpath_hdr;",
      "",
      "[Removed Lines]",
      "92:  int length;",
      "",
      "[Added Lines]",
      "99:  uint32 length;",
      "101:  struct stream packet;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "100:  if (s == NULL)",
      "101:   return False;",
      "103:  ber_parse_header(s, MCS_CONNECT_RESPONSE, &length);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "111:  packet = *s;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "113:  ber_parse_header(s, BER_TAG_INTEGER, &length);",
      "115:  mcs_parse_domain_params(s);",
      "117:  ber_parse_header(s, BER_TAG_OCTET_STRING, &length);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "126:  if (!s_check_rem(s, length))",
      "127:  {",
      "128:   rdp_protocol_error(\"mcs_recv_connect_response(), consume connect id from stream would overrun\", &packet);",
      "129:  }",
      "",
      "---------------"
    ],
    "orders.c||orders.c": [
      "File: orders.c -> orders.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1259:  uint16 flags;",
      "1260:  uint8 type;",
      "1261:  uint8 *next_order;",
      "1263:  in_uint16_le(s, length);",
      "1265:  in_uint8(s, type);",
      "1267:  next_order = s->p + (sint16) length + 7;",
      "1269:  switch (type)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1262:  struct stream packet = *s;",
      "1268:  if (!s_check_rem(s, length + 7))",
      "1269:  {",
      "1270:   rdp_protocol_error(\"process_secondary_order(), next order pointer would overrun stream\", &packet);",
      "1271:  }",
      "",
      "---------------"
    ],
    "proto.h||proto.h": [
      "File: proto.h -> proto.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "164:       char *directory, RD_BOOL reconnect);",
      "165: void rdp_reset_state(void);",
      "166: void rdp_disconnect(void);",
      "168: int get_device_index(RD_NTHANDLE handle);",
      "169: void convert_to_unix_filename(char *filename);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "167: void rdp_protocol_error(const char *message, STREAM s);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "225: RD_BOOL ber_in_header(STREAM s, int *tagval, int *length);",
      "226: void ber_out_header(STREAM s, int tagval, int length);",
      "228: void ber_out_integer(STREAM s, int value);",
      "229: void ber_out_sequence(STREAM s, STREAM contents);",
      "",
      "[Removed Lines]",
      "227: RD_BOOL ber_parse_header(STREAM s, int tagval, int *length);",
      "",
      "[Added Lines]",
      "228: RD_BOOL ber_parse_header(STREAM s, int tagval, uint32 *length);",
      "",
      "---------------"
    ],
    "rdp.c||rdp.c": [
      "File: rdp.c -> rdp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "285:  size_t ibl, obl;",
      "286:  char *pin, *pout;",
      "289:  if (!icv_utf16_to_local)",
      "290:  {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "288:  struct stream packet = *s;",
      "290:  if ((in_len < 0) || ((uint32)in_len >= (RD_UINT32_MAX / 2)))",
      "291:  {",
      "292:   logger(Protocol, Error, \"rdp_in_unistr(), length of unicode data is out of bounds.\");",
      "293:   abort();",
      "294:  }",
      "296:  if (!s_check_rem(s, in_len))",
      "297:  {",
      "298:   rdp_protocol_error(\"rdp_in_unistr(), consume of unicode data from stream would overrun\", &packet);",
      "299:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1211: {",
      "1212:  uint8 type;",
      "1213:  uint16 len_src_descriptor, len_combined_caps;",
      "1216:  rd_create_ui();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1227:  struct stream packet = *s;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1218:  in_uint32_le(s, g_rdp_shareid);",
      "1219:  in_uint16_le(s, len_src_descriptor);",
      "1220:  in_uint16_le(s, len_combined_caps);",
      "1221:  in_uint8s(s, len_src_descriptor);",
      "1223:  logger(Protocol, Debug, \"process_demand_active(), shareid=0x%x\", g_rdp_shareid);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1236:  if (!s_check_rem(s, len_src_descriptor))",
      "1237:  {",
      "1238:   rdp_protocol_error(\"rdp_demand_active(), consume of source descriptor from stream would overrun\", &packet);",
      "1239:  }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1390:  }",
      "1391: }",
      "1396: {",
      "1398:  uint16 left, top, right, bottom, width, height;",
      "1400:  uint8 *data, *bmpdata;",
      "1403:  logger(Protocol, Debug, \"%s()\", __func__);",
      "1453:   bmpdata = (uint8 *) xmalloc(width * height * Bpp);",
      "1455:   {",
      "1457:   }",
      "1464:   xfree(bmpdata);",
      "1465:  }",
      "1466: }",
      "",
      "[Removed Lines]",
      "1394: void",
      "1395: process_bitmap_updates(STREAM s)",
      "1397:  uint16 num_updates;",
      "1399:  uint16 cx, cy, bpp, Bpp, compress, bufsize, size;",
      "1401:  int i;",
      "1405:  in_uint16_le(s, num_updates);",
      "1407:  for (i = 0; i < num_updates; i++)",
      "1408:  {",
      "1409:   in_uint16_le(s, left);",
      "1410:   in_uint16_le(s, top);",
      "1411:   in_uint16_le(s, right);",
      "1412:   in_uint16_le(s, bottom);",
      "1413:   in_uint16_le(s, width);",
      "1414:   in_uint16_le(s, height);",
      "1415:   in_uint16_le(s, bpp);",
      "1416:   Bpp = (bpp + 7) / 8;",
      "1417:   in_uint16_le(s, compress);",
      "1418:   in_uint16_le(s, bufsize);",
      "1420:   cx = right - left + 1;",
      "1421:   cy = bottom - top + 1;",
      "1423:   logger(Graphics, Debug,",
      "1424:          \"process_bitmap_updates(), [%d,%d,%d,%d], [%d,%d], bpp=%d, compression=%d\",",
      "1425:          left, top, right, bottom, width, height, Bpp, compress);",
      "1427:   if (!compress)",
      "1428:   {",
      "1429:    int y;",
      "1430:    bmpdata = (uint8 *) xmalloc(width * height * Bpp);",
      "1431:    for (y = 0; y < height; y++)",
      "1432:    {",
      "1433:     in_uint8a(s, &bmpdata[(height - y - 1) * (width * Bpp)],",
      "1434:        width * Bpp);",
      "1435:    }",
      "1436:    ui_paint_bitmap(left, top, cx, cy, width, height, bmpdata);",
      "1437:    xfree(bmpdata);",
      "1438:    continue;",
      "1439:   }",
      "1442:   if (compress & 0x400)",
      "1443:   {",
      "1444:    size = bufsize;",
      "1445:   }",
      "1446:   else",
      "1447:   {",
      "1449:    in_uint16_le(s, size);",
      "1451:   }",
      "1452:   in_uint8p(s, data, size);",
      "1454:   if (bitmap_decompress(bmpdata, width, height, data, size, Bpp))",
      "1456:    ui_paint_bitmap(left, top, cx, cy, width, height, bmpdata);",
      "1458:   else",
      "1459:   {",
      "1460:    logger(Graphics, Warning,",
      "1461:           \"process_bitmap_updates(), failed to decompress bitmap\");",
      "1462:   }",
      "",
      "[Added Lines]",
      "1413: static void",
      "1414: process_bitmap_data(STREAM s)",
      "1417:  uint16 cx, cy, bpp, Bpp, flags, bufsize, size;",
      "1422:  struct stream packet = *s;",
      "1431:  Bpp = (bpp + 7) / 8;",
      "1435:  cx = right - left + 1;",
      "1436:  cy = bottom - top + 1;",
      "1439:   this code. The value of bpp is not passed to",
      "1440:   ui_paint_bitmap() which relies on g_server_bpp for drawing",
      "1441:   the bitmap data.",
      "1443:   Does this means that we can sanity check bpp with g_server_bpp ?",
      "1446:  if (Bpp == 0 || width == 0 || height == 0)",
      "1447:  {",
      "1448:         logger(Protocol, Warning, \"%s(), [%d,%d,%d,%d], [%d,%d], bpp=%d, flags=%x\", __func__,",
      "1449:     left, top, right, bottom, width, height, bpp, flags);",
      "1450:   rdp_protocol_error(\"TS_BITMAP_DATA, unsafe size of bitmap data received from server\", &packet);",
      "1451:  }",
      "1453:  if ((RD_UINT32_MAX / Bpp) <= (width * height))",
      "1454:  {",
      "1455:   logger(Protocol, Warning, \"%s(), [%d,%d,%d,%d], [%d,%d], bpp=%d, flags=%x\", __func__,",
      "1456:     left, top, right, bottom, width, height, bpp, flags);",
      "1457:   rdp_protocol_error(\"TS_BITMAP_DATA, unsafe size of bitmap data received from server\", &packet);",
      "1458:  }",
      "1460:  if (flags == 0)",
      "1461:  {",
      "1463:   int y;",
      "1465:   for (y = 0; y < height; y++)",
      "1467:    in_uint8a(s, &bmpdata[(height - y - 1) * (width * Bpp)], width * Bpp);",
      "1470:   ui_paint_bitmap(left, top, cx, cy, width, height, bmpdata);",
      "1472:   return;",
      "1473:  }",
      "1475:  if (flags & NO_BITMAP_COMPRESSION_HDR)",
      "1476:  {",
      "1477:   size = bufsize;",
      "1478:  }",
      "1479:  else",
      "1480:  {",
      "1486:  }",
      "1489:  if (!s_check_rem(s, size))",
      "1490:  {",
      "1491:   rdp_protocol_error(\"process_bitmap_data(), consume of bitmap data from stream would overrun\", &packet);",
      "1492:  }",
      "1493:  in_uint8p(s, data, size);",
      "1494:  bmpdata = (uint8 *) xmalloc(width * height * Bpp);",
      "1495:  if (bitmap_decompress(bmpdata, width, height, data, size, Bpp))",
      "1496:  {",
      "1497:   ui_paint_bitmap(left, top, cx, cy, width, height, bmpdata);",
      "1498:  }",
      "1499:  else",
      "1500:  {",
      "1501:   logger(Protocol, Warning, \"%s(), failed to decompress bitmap\", __func__);",
      "1502:  }",
      "1504:  xfree(bmpdata);",
      "1505: }",
      "1508: void",
      "1509: process_bitmap_updates(STREAM s)",
      "1510: {",
      "1511:  int i;",
      "1512:  uint16 num_updates;",
      "1516:  for (i = 0; i < num_updates; i++)",
      "1517:  {",
      "1518:   process_bitmap_data(s);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2013:  logger(Protocol, Debug, \"%s()\", __func__);",
      "2014:  sec_disconnect();",
      "2015: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2073:    A protocol error is defined as:",
      "2075:     - A value is outside specified range for example;",
      "2076:       bpp for a bitmap is not allowed to be greater than the",
      "2077:       value 32 but is represented by a byte in protocol.",
      "2080: void",
      "2081: rdp_protocol_error(const char *message, STREAM s)",
      "2082: {",
      "2083:  logger(Protocol, Error, \"%s(), %s\", __func__, message);",
      "2084:  if (s)",
      "2085:   hexdump(s->p, s_length(s));",
      "2086:  exit(0);",
      "2087: }",
      "",
      "---------------"
    ],
    "rdpdr.c||rdpdr.c": [
      "File: rdpdr.c -> rdpdr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "854:  uint16 vmin;",
      "855:  uint16 component;",
      "856:  uint16 pakid;",
      "858:  logger(Protocol, Debug, \"rdpdr_process()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "857:  struct stream packet = *s;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "880:     if (vmin < 0x000c)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "881:        so lets check that we actually got",
      "882:        valid data from stream to prevent",
      "884:     if (!s_check(s))",
      "885:     {",
      "886:      rdp_protocol_error(\"rdpdr_process(), consume of g_client_id from stream did overrun\", &packet);",
      "887:     }",
      "",
      "---------------"
    ],
    "rdpsnd.c||rdpsnd.c": [
      "File: rdpsnd.c -> rdpsnd.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "269:  uint16 tick;",
      "270:  uint16 packsize;",
      "271:  STREAM out;",
      "273:  in_uint16_le(in, tick);",
      "274:  in_uint16_le(in, packsize);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "272:  struct stream packet = *in;",
      "274:  if (!s_check_rem(in, 4))",
      "275:  {",
      "276:   rdp_protocol_error(\"rdpsnd_process_training(), consume of training data from stream would overrun\", &packet);",
      "277:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "445:  static char *rest = NULL;",
      "446:  char *buf;",
      "448:  pkglen = s->end - s->p;",
      "450:  buf = (char *) xmalloc(pkglen + 1);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "454:  if (!s_check(s))",
      "455:  {",
      "456:   rdp_protocol_error(\"rdpsnddbg_process(), stream is in unstable state\", s);",
      "457:  }",
      "",
      "---------------"
    ],
    "seamless.c||seamless.c": [
      "File: seamless.c -> seamless.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "169:    icon_buf[len] = strtol(byte, NULL, 16);",
      "170:    len++;",
      "171:   }",
      "173:   ui_seamless_seticon(id, tok5, width, height, chunk, icon_buf, len);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "172:    if ((size_t)len >= sizeof(icon_buf))",
      "173:    {",
      "174:     logger(Protocol, Warning, \"seamless_process_line(), icon data would overrun icon_buf\");",
      "175:     break;",
      "176:    }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "370: {",
      "371:  unsigned int pkglen;",
      "372:  char *buf;",
      "374:  pkglen = s->end - s->p;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:  struct stream packet = *s;",
      "381:  if (!s_check(s))",
      "382:  {",
      "383:   rdp_protocol_error(\"seamless_process(), stream is in unstable state\", &packet);",
      "384:  }",
      "",
      "---------------"
    ],
    "secure.c||secure.c": [
      "File: secure.c -> secure.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "296: void",
      "297: sec_decrypt(uint8 * data, int length)",
      "298: {",
      "299:  if (g_sec_decrypt_use_count == 4096)",
      "300:  {",
      "301:   sec_update(g_sec_decrypt_key, g_sec_decrypt_update_key);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "299:  if (length <= 0)",
      "300:   return;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "848:  uint16 sec_flags;",
      "849:  uint16 channel;",
      "850:  STREAM s;",
      "852:  while ((s = mcs_recv(&channel, is_fastpath, &fastpath_hdr)) != NULL)",
      "853:  {",
      "854:   if (*is_fastpath == True)",
      "855:   {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "854:  struct stream packet;",
      "858:   packet = *s;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "859:    fastpath_flags = (fastpath_hdr & 0xC0) >> 6;",
      "860:    if (fastpath_flags & FASTPATH_OUTPUT_ENCRYPTED)",
      "861:    {",
      "863:     sec_decrypt(s->p, s->end - s->p);",
      "864:    }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "867:     if (!s_check_rem(s, 8)) {",
      "868:      rdp_protocol_error(\"sec_recv(), consume fastpath signature from stream would overrun\", &packet);",
      "869:     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "875:    {",
      "876:     if (sec_flags & SEC_ENCRYPT)",
      "877:     {",
      "879:      sec_decrypt(s->p, s->end - s->p);",
      "880:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "887:      if (!s_check_rem(s, 8)) {",
      "888:       rdp_protocol_error(\"sec_recv(), consume encrypt signature from stream would overrun\", &packet);",
      "889:      }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "889:     {",
      "890:      uint8 swapbyte;",
      "893:      sec_decrypt(s->p, s->end - s->p);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "905:      if (!s_check_rem(s, 8)) {",
      "906:       rdp_protocol_error(\"sec_recv(), consume redirect signature from stream would overrun\", &packet);",
      "907:      }",
      "",
      "---------------"
    ],
    "stream.h||stream.h": [
      "File: stream.h -> stream.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "54: #define s_pop_layer(s,h) (s)->p = (s)->h;",
      "55: #define s_mark_end(s)  (s)->end = (s)->p;",
      "56: #define s_check(s)  ((s)->p <= (s)->end)",
      "58: #define s_check_end(s)  ((s)->p == (s)->end)",
      "59: #define s_length(s)  ((s)->end - (s)->data)",
      "60: #define s_left(s)               ((s)->size - ((s)->p - (s)->data))",
      "",
      "[Removed Lines]",
      "57: #define s_check_rem(s,n) ((s)->p + n <= (s)->end)",
      "",
      "[Added Lines]",
      "57: #define s_check_rem(s,n) (s_check(s) && (n <= (s)->end - (s)->p))",
      "",
      "---------------"
    ],
    "types.h||types.h": [
      "File: types.h -> types.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "43: typedef unsigned int uint32;",
      "44: typedef signed int sint32;",
      "46: typedef void *RD_HBITMAP;",
      "47: typedef void *RD_HGLYPH;",
      "48: typedef void *RD_HCOLOURMAP;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "46: #define RD_UINT32_MAX (uint32)(-1)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d8b0f3782a12f92fe6ca606f05b3753f4e79f342",
      "candidate_info": {
        "commit_hash": "d8b0f3782a12f92fe6ca606f05b3753f4e79f342",
        "repo": "rdesktop/rdesktop",
        "commit_url": "https://github.com/rdesktop/rdesktop/commit/d8b0f3782a12f92fe6ca606f05b3753f4e79f342",
        "files": [
          "cliprdr.c",
          "cssp.c",
          "mcs.c",
          "orders.c",
          "proto.h",
          "rdp.c",
          "rdpsnd.c",
          "secure.c"
        ],
        "message": "Give source code info in rdp_protocol_error()\n\nMakes it easier to debug things by seeing exactly where the protocol\nhandling crashed.",
        "before_after_code_files": [
          "cliprdr.c||cliprdr.c",
          "cssp.c||cssp.c",
          "mcs.c||mcs.c",
          "orders.c||orders.c",
          "proto.h||proto.h",
          "rdp.c||rdp.c",
          "rdpsnd.c||rdpsnd.c",
          "secure.c||secure.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cliprdr.c||cliprdr.c",
            "cssp.c||cssp.c",
            "mcs.c||mcs.c",
            "orders.c||orders.c",
            "proto.h||proto.h",
            "rdp.c||rdp.c",
            "rdpsnd.c||rdpsnd.c",
            "secure.c||secure.c"
          ],
          "candidate": [
            "cliprdr.c||cliprdr.c",
            "cssp.c||cssp.c",
            "mcs.c||mcs.c",
            "orders.c||orders.c",
            "proto.h||proto.h",
            "rdp.c||rdp.c",
            "rdpsnd.c||rdpsnd.c",
            "secure.c||secure.c"
          ]
        }
      },
      "candidate_diff": {
        "cliprdr.c||cliprdr.c": [
          "File: cliprdr.c -> cliprdr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:  if (!s_check_rem(s, length))",
          "132:  {",
          "134:  }",
          "136:  if (status == CLIPRDR_ERROR)",
          "",
          "[Removed Lines]",
          "133:   rdp_protocol_error(\"cliprdr_process(), consume of packet from stream would overrun\", &packet);",
          "",
          "[Added Lines]",
          "133:   rdp_protocol_error(\"consume of packet from stream would overrun\", &packet);",
          "",
          "---------------"
        ],
        "cssp.c||cssp.c": [
          "File: cssp.c -> cssp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "638:  if (!s_check_rem(s, length))",
          "639:  {",
          "641:         &packet);",
          "642:  }",
          "643:  in_uint8s(s, length);",
          "",
          "[Removed Lines]",
          "640:    rdp_protocol_error(\"cssp_read_tsrequest(), consume of version from stream would overrun\",",
          "",
          "[Added Lines]",
          "640:    rdp_protocol_error(\"consume of version from stream would overrun\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "664:   if (!s_check_rem(s, length))",
          "665:   {",
          "667:         &packet);",
          "668:   }",
          "",
          "[Removed Lines]",
          "666:    rdp_protocol_error(\"cssp_read_tsrequest(), consume of token from stream would overrun\",",
          "",
          "[Added Lines]",
          "666:    rdp_protocol_error(\"consume of token from stream would overrun\",",
          "",
          "---------------"
        ],
        "mcs.c||mcs.c": [
          "File: mcs.c -> mcs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:  if (!s_check_rem(s, length))",
          "54:  {",
          "56:  }",
          "58:  in_uint8s(s, length);",
          "",
          "[Removed Lines]",
          "55:   rdp_protocol_error(\"mcs_parse_domain_params(), consume domain params from stream would overrun\", &packet);",
          "",
          "[Added Lines]",
          "55:   rdp_protocol_error(\"consume domain params from stream would overrun\", &packet);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126:  if (!s_check_rem(s, length))",
          "127:  {",
          "129:  }",
          "131:  mcs_parse_domain_params(s);",
          "",
          "[Removed Lines]",
          "128:   rdp_protocol_error(\"mcs_recv_connect_response(), consume connect id from stream would overrun\", &packet);",
          "",
          "[Added Lines]",
          "128:   rdp_protocol_error(\"consume connect id from stream would overrun\", &packet);",
          "",
          "---------------"
        ],
        "orders.c||orders.c": [
          "File: orders.c -> orders.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1273:  if (!s_check_rem(s, length))",
          "1274:  {",
          "1276:  }",
          "1278:  next_order = s->p + length;",
          "",
          "[Removed Lines]",
          "1275:   rdp_protocol_error(\"process_secondary_order(), next order pointer would overrun stream\", &packet);",
          "",
          "[Added Lines]",
          "1275:   rdp_protocol_error(\"next order pointer would overrun stream\", &packet);",
          "",
          "---------------"
        ],
        "proto.h||proto.h": [
          "File: proto.h -> proto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "165:       char *directory, RD_BOOL reconnect);",
          "166: void rdp_reset_state(void);",
          "167: void rdp_disconnect(void);",
          "170: int get_device_index(RD_NTHANDLE handle);",
          "171: void convert_to_unix_filename(char *filename);",
          "",
          "[Removed Lines]",
          "168: void rdp_protocol_error(const char *message, STREAM s);",
          "",
          "[Added Lines]",
          "168: #define rdp_protocol_error(m, s) _rdp_protocol_error(__FILE__, __LINE__, __func__, m, s)",
          "169: void _rdp_protocol_error(const char *file, int line, const char *func,",
          "170:     const char *message, STREAM s);",
          "",
          "---------------"
        ],
        "rdp.c||rdp.c": [
          "File: rdp.c -> rdp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "299:  if (!s_check_rem(s, in_len))",
          "300:  {",
          "302:  }",
          "",
          "[Removed Lines]",
          "301:   rdp_protocol_error(\"rdp_in_unistr(), consume of unicode data from stream would overrun\", &packet);",
          "",
          "[Added Lines]",
          "301:   rdp_protocol_error(\"consume of unicode data from stream would overrun\", &packet);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1270:  if (!s_check_rem(s, len_src_descriptor))",
          "1271:  {",
          "1273:  }",
          "1274:  in_uint8s(s, len_src_descriptor);",
          "",
          "[Removed Lines]",
          "1272:   rdp_protocol_error(\"rdp_demand_active(), consume of source descriptor from stream would overrun\", &packet);",
          "",
          "[Added Lines]",
          "1272:   rdp_protocol_error(\"consume of source descriptor from stream would overrun\", &packet);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1523:  if (!s_check_rem(s, size))",
          "1524:  {",
          "1526:  }",
          "1527:  in_uint8p(s, data, size);",
          "1528:  bmpdata = (uint8 *) xmalloc(width * height * Bpp);",
          "",
          "[Removed Lines]",
          "1525:   rdp_protocol_error(\"process_bitmap_data(), consume of bitmap data from stream would overrun\", &packet);",
          "",
          "[Added Lines]",
          "1525:   rdp_protocol_error(\"consume of bitmap data from stream would overrun\", &packet);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2114: void",
          "2116: {",
          "2118:  if (s)",
          "2119:   hexdump(s->p, s_length(s));",
          "2120:  exit(0);",
          "",
          "[Removed Lines]",
          "2115: rdp_protocol_error(const char *message, STREAM s)",
          "2117:  logger(Protocol, Error, \"%s(), %s\", __func__, message);",
          "",
          "[Added Lines]",
          "2115: _rdp_protocol_error(const char *file, int line, const char *func,",
          "2116:       const char *message, STREAM s)",
          "2118:  logger(Protocol, Error, \"%s:%d: %s(), %s\", file, line, func, message);",
          "",
          "---------------"
        ],
        "rdpsnd.c||rdpsnd.c": [
          "File: rdpsnd.c -> rdpsnd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "274:  if (!s_check_rem(in, 4))",
          "275:  {",
          "277:  }",
          "279:  in_uint16_le(in, tick);",
          "",
          "[Removed Lines]",
          "276:   rdp_protocol_error(\"rdpsnd_process_training(), consume of training data from stream would overrun\", &packet);",
          "",
          "[Added Lines]",
          "276:   rdp_protocol_error(\"consume of training data from stream would overrun\", &packet);",
          "",
          "---------------"
        ],
        "secure.c||secure.c": [
          "File: secure.c -> secure.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "873:    if (fastpath_flags & FASTPATH_OUTPUT_ENCRYPTED)",
          "874:    {",
          "875:     if (!s_check_rem(s, 8)) {",
          "877:     }",
          "",
          "[Removed Lines]",
          "876:      rdp_protocol_error(\"sec_recv(), consume fastpath signature from stream would overrun\", &packet);",
          "",
          "[Added Lines]",
          "876:      rdp_protocol_error(\"consume fastpath signature from stream would overrun\", &packet);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "893:     if (sec_flags & SEC_ENCRYPT)",
          "894:     {",
          "895:      if (!s_check_rem(s, 8)) {",
          "897:      }",
          "",
          "[Removed Lines]",
          "896:       rdp_protocol_error(\"sec_recv(), consume encrypt signature from stream would overrun\", &packet);",
          "",
          "[Added Lines]",
          "896:       rdp_protocol_error(\"consume encrypt signature from stream would overrun\", &packet);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "911:      uint8 swapbyte;",
          "913:      if (!s_check_rem(s, 8)) {",
          "915:      }",
          "",
          "[Removed Lines]",
          "914:       rdp_protocol_error(\"sec_recv(), consume redirect signature from stream would overrun\", &packet);",
          "",
          "[Added Lines]",
          "914:       rdp_protocol_error(\"consume redirect signature from stream would overrun\", &packet);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "25b84123336bec6e85cb0b7d61c6fb902ae44825",
      "candidate_info": {
        "commit_hash": "25b84123336bec6e85cb0b7d61c6fb902ae44825",
        "repo": "rdesktop/rdesktop",
        "commit_url": "https://github.com/rdesktop/rdesktop/commit/25b84123336bec6e85cb0b7d61c6fb902ae44825",
        "files": [
          "channels.c",
          "cliprdr.c",
          "cssp.c",
          "licence.c",
          "lspci.c",
          "mcs.c",
          "orders.c",
          "printercache.c",
          "rdp.c",
          "rdp5.c",
          "rdpdr.c",
          "rdpsnd.c",
          "rdpsnd_alsa.c",
          "rdpsnd_libao.c",
          "rdpsnd_oss.c",
          "rdpsnd_pulse.c",
          "rdpsnd_sgi.c",
          "rdpsnd_sun.c",
          "scard.c",
          "seamless.c",
          "secure.c",
          "stream.h",
          "tcp.c"
        ],
        "message": "Avoid poking around in STREAM internals\n\nIt's easy to make mistakes this way, and bypassed the normal bounds\nchecking. So make sure we always use macros or functions.",
        "before_after_code_files": [
          "channels.c||channels.c",
          "cliprdr.c||cliprdr.c",
          "cssp.c||cssp.c",
          "licence.c||licence.c",
          "lspci.c||lspci.c",
          "mcs.c||mcs.c",
          "orders.c||orders.c",
          "printercache.c||printercache.c",
          "rdp.c||rdp.c",
          "rdp5.c||rdp5.c",
          "rdpdr.c||rdpdr.c",
          "rdpsnd.c||rdpsnd.c",
          "rdpsnd_alsa.c||rdpsnd_alsa.c",
          "rdpsnd_libao.c||rdpsnd_libao.c",
          "rdpsnd_oss.c||rdpsnd_oss.c",
          "rdpsnd_pulse.c||rdpsnd_pulse.c",
          "rdpsnd_sgi.c||rdpsnd_sgi.c",
          "rdpsnd_sun.c||rdpsnd_sun.c",
          "scard.c||scard.c",
          "seamless.c||seamless.c",
          "secure.c||secure.c",
          "stream.h||stream.h",
          "tcp.c||tcp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cliprdr.c||cliprdr.c",
            "cssp.c||cssp.c",
            "lspci.c||lspci.c",
            "mcs.c||mcs.c",
            "orders.c||orders.c",
            "rdp.c||rdp.c",
            "rdpdr.c||rdpdr.c",
            "rdpsnd.c||rdpsnd.c",
            "seamless.c||seamless.c",
            "secure.c||secure.c",
            "stream.h||stream.h"
          ],
          "candidate": [
            "cliprdr.c||cliprdr.c",
            "cssp.c||cssp.c",
            "lspci.c||lspci.c",
            "mcs.c||mcs.c",
            "orders.c||orders.c",
            "rdp.c||rdp.c",
            "rdpdr.c||rdpdr.c",
            "rdpsnd.c||rdpsnd.c",
            "seamless.c||seamless.c",
            "secure.c||secure.c",
            "stream.h||stream.h"
          ]
        }
      },
      "candidate_diff": {
        "channels.c||channels.c": [
          "File: channels.c -> channels.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "186: channel_process(STREAM s, uint16 mcs_channel)",
          "187: {",
          "188:  uint32 length, flags;",
          "190:  VCHANNEL *channel = NULL;",
          "191:  unsigned int i;",
          "192:  STREAM in;",
          "",
          "[Removed Lines]",
          "189:  uint32 thislength;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "214:   in = &channel->in;",
          "215:   if (flags & CHANNEL_FLAG_FIRST)",
          "216:   {",
          "223:   }",
          "229:   if (flags & CHANNEL_FLAG_LAST)",
          "230:   {",
          "233:    channel->process(in);",
          "234:   }",
          "235:  }",
          "",
          "[Removed Lines]",
          "217:    if (length > in->size)",
          "218:    {",
          "219:     in->data = (uint8 *) xrealloc(in->data, length);",
          "220:     in->size = length;",
          "221:    }",
          "222:    in->p = in->data;",
          "225:   thislength = MIN(s_remaining(s), in->data + in->size - in->p);",
          "226:   memcpy(in->p, s->p, thislength);",
          "227:   in->p += thislength;",
          "231:    in->end = in->p;",
          "232:    in->p = in->data;",
          "",
          "[Added Lines]",
          "216:    s_realloc(in, length);",
          "217:    s_reset(in);",
          "220:   out_uint8stream(in, s, s_remaining(s));",
          "224:    s_mark_end(in);",
          "225:    s_seek(in, 0);",
          "",
          "---------------"
        ],
        "cliprdr.c||cliprdr.c": [
          "File: cliprdr.c -> cliprdr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:  uint16 type, status;",
          "120:  uint32 length, format;",
          "121:  uint8 *data;",
          "124:  in_uint16_le(s, type);",
          "125:  in_uint16_le(s, status);",
          "126:  in_uint32_le(s, length);",
          "129:  logger(Clipboard, Debug, \"cliprdr_process(), type=%d, status=%d, length=%d\", type, status,",
          "130:         length);",
          "137:  if (status == CLIPRDR_ERROR)",
          "138:  {",
          "139:   switch (type)",
          "",
          "[Removed Lines]",
          "122:  struct stream packet = *s;",
          "127:  data = s->p;",
          "132:  if (!s_check_rem(s, length))",
          "133:  {",
          "134:   rdp_protocol_error(\"consume of packet from stream would overrun\", &packet);",
          "135:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "161:    ui_clip_sync();",
          "162:    break;",
          "163:   case CLIPRDR_FORMAT_ANNOUNCE:",
          "164:    ui_clip_format_announce(data, length);",
          "165:    cliprdr_send_packet(CLIPRDR_FORMAT_ACK, CLIPRDR_RESPONSE, NULL, 0);",
          "166:    return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "157:    in_uint8p(s, data, length);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "171:    ui_clip_request_data(format);",
          "172:    break;",
          "173:   case CLIPRDR_DATA_RESPONSE:",
          "174:    ui_clip_handle_data(data, length);",
          "175:    break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "168:    in_uint8p(s, data, length);",
          "",
          "---------------"
        ],
        "cssp.c||cssp.c": [
          "File: cssp.c -> cssp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:  out = s_alloc(size);",
          "40:  ber_out_header(out, tagval, s_length(in));",
          "42:  s_mark_end(out);",
          "44:  return out;",
          "",
          "[Removed Lines]",
          "41:  out_uint8a(out, in->data, s_length(in));",
          "",
          "[Added Lines]",
          "41:  out_stream(out, in);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "148:  gss_buffer_desc inbuf, outbuf;",
          "149:  STREAM out;",
          "152:  inbuf.length = s_length(in);",
          "154:  major_status = gss_wrap(&minor_status, ctx, True,",
          "155:     GSS_C_QOP_DEFAULT, &inbuf, &conf_state, &outbuf);",
          "",
          "[Removed Lines]",
          "151:  inbuf.value = in->data;",
          "",
          "[Added Lines]",
          "151:  s_seek(in, 0);",
          "153:  in_uint8p(in, inbuf.value, s_length(in));",
          "154:  s_seek(in, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "189:  int conf_state;",
          "190:  STREAM out;",
          "193:  inbuf.length = s_length(in);",
          "195:  major_status = gss_unwrap(&minor_status, ctx, &inbuf, &outbuf, &conf_state, &qop_state);",
          "",
          "[Removed Lines]",
          "192:  inbuf.value = in->data;",
          "",
          "[Added Lines]",
          "194:  s_seek(in, 0);",
          "196:  in_uint8p(in, inbuf.value, s_length(in));",
          "197:  s_seek(in, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "231:  h2 = ber_wrap_hdr_data(BER_TAG_OCTET_STRING, &tmp);",
          "232:  h1 = ber_wrap_hdr_data(BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 0, h2);",
          "233:  s_realloc(&message, s_length(&message) + s_length(h1));",
          "235:  s_mark_end(&message);",
          "236:  s_free(h2);",
          "237:  s_free(h1);",
          "",
          "[Removed Lines]",
          "234:  out_uint8a(&message, h1->data, s_length(h1));",
          "",
          "[Added Lines]",
          "238:  out_stream(&message, h1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "244:  h2 = ber_wrap_hdr_data(BER_TAG_OCTET_STRING, &tmp);",
          "245:  h1 = ber_wrap_hdr_data(BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 1, h2);",
          "246:  s_realloc(&message, s_length(&message) + s_length(h1));",
          "248:  s_mark_end(&message);",
          "249:  s_free(h2);",
          "250:  s_free(h1);",
          "",
          "[Removed Lines]",
          "247:  out_uint8a(&message, h1->data, s_length(h1));",
          "",
          "[Added Lines]",
          "251:  out_stream(&message, h1);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "256:  h2 = ber_wrap_hdr_data(BER_TAG_OCTET_STRING, &tmp);",
          "257:  h1 = ber_wrap_hdr_data(BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 2, h2);",
          "258:  s_realloc(&message, s_length(&message) + s_length(h1));",
          "260:  s_mark_end(&message);",
          "261:  s_free(h2);",
          "262:  s_free(h1);",
          "",
          "[Removed Lines]",
          "259:  out_uint8a(&message, h1->data, s_length(h1));",
          "",
          "[Added Lines]",
          "263:  out_stream(&message, h1);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "292:  h2 = ber_wrap_hdr_data(BER_TAG_INTEGER, &tmp);",
          "293:  h1 = ber_wrap_hdr_data(BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 0, h2);",
          "294:  s_realloc(&message, s_length(&message) + s_length(h1));",
          "296:  s_mark_end(&message);",
          "297:  s_free(h2);",
          "298:  s_free(h1);",
          "",
          "[Removed Lines]",
          "295:  out_uint8a(&message, h1->data, s_length(h1));",
          "",
          "[Added Lines]",
          "299:  out_stream(&message, h1);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "306:   h2 = ber_wrap_hdr_data(BER_TAG_OCTET_STRING, &tmp);",
          "307:   h1 = ber_wrap_hdr_data(BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 1, h2);",
          "308:   s_realloc(&message, s_length(&message) + s_length(h1));",
          "310:   s_mark_end(&message);",
          "311:   s_free(h2);",
          "312:   s_free(h1);",
          "",
          "[Removed Lines]",
          "309:   out_uint8a(&message, h1->data, s_length(h1));",
          "",
          "[Added Lines]",
          "313:   out_stream(&message, h1);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "321:   h2 = ber_wrap_hdr_data(BER_TAG_OCTET_STRING, &tmp);",
          "322:   h1 = ber_wrap_hdr_data(BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 2, h2);",
          "323:   s_realloc(&message, s_length(&message) + s_length(h1));",
          "325:   s_mark_end(&message);",
          "326:   s_free(h2);",
          "327:   s_free(h1);",
          "",
          "[Removed Lines]",
          "324:   out_uint8a(&message, h1->data, s_length(h1));",
          "",
          "[Added Lines]",
          "328:   out_stream(&message, h1);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "336:   h2 = ber_wrap_hdr_data(BER_TAG_OCTET_STRING, &tmp);",
          "337:   h1 = ber_wrap_hdr_data(BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 3, h2);",
          "338:   s_realloc(&message, s_length(&message) + s_length(h1));",
          "340:   s_mark_end(&message);",
          "341:   s_free(h2);",
          "342:   s_free(h1);",
          "",
          "[Removed Lines]",
          "339:   out_uint8a(&message, h1->data, s_length(h1));",
          "",
          "[Added Lines]",
          "343:   out_stream(&message, h1);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "351:   h2 = ber_wrap_hdr_data(BER_TAG_OCTET_STRING, &tmp);",
          "352:   h1 = ber_wrap_hdr_data(BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 4, h2);",
          "353:   s_realloc(&message, s_length(&message) + s_length(h1));",
          "355:   s_mark_end(&message);",
          "356:   s_free(h2);",
          "357:   s_free(h1);",
          "",
          "[Removed Lines]",
          "354:   out_uint8a(&message, h1->data, s_length(h1));",
          "",
          "[Added Lines]",
          "358:   out_stream(&message, h1);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "384:  h2 = ber_wrap_hdr_data(BER_TAG_OCTET_STRING, &tmp);",
          "385:  h1 = ber_wrap_hdr_data(BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 0, h2);",
          "386:  s_realloc(&message, s_length(&message) + s_length(h1));",
          "388:  s_mark_end(&message);",
          "389:  s_free(h2);",
          "390:  s_free(h1);",
          "",
          "[Removed Lines]",
          "387:  out_uint8a(&message, h1->data, s_length(h1));",
          "",
          "[Added Lines]",
          "391:  out_stream(&message, h1);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "394:       g_sc_container_name, g_sc_csp_name);",
          "395:  h1 = ber_wrap_hdr_data(BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 1, h2);",
          "396:  s_realloc(&message, s_length(&message) + s_length(h1));",
          "398:  s_mark_end(&message);",
          "399:  s_free(h2);",
          "400:  s_free(h1);",
          "",
          "[Removed Lines]",
          "397:  out_uint8a(&message, h1->data, s_length(h1));",
          "",
          "[Added Lines]",
          "401:  out_stream(&message, h1);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "408:   h2 = ber_wrap_hdr_data(BER_TAG_OCTET_STRING, &tmp);",
          "409:   h1 = ber_wrap_hdr_data(BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 2, h2);",
          "410:   s_realloc(&message, s_length(&message) + s_length(h1));",
          "412:   s_mark_end(&message);",
          "413:   s_free(h2);",
          "414:   s_free(h1);",
          "",
          "[Removed Lines]",
          "411:   out_uint8a(&message, h1->data, s_length(h1));",
          "",
          "[Added Lines]",
          "415:   out_stream(&message, h1);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "423:   h2 = ber_wrap_hdr_data(BER_TAG_OCTET_STRING, &tmp);",
          "424:   h1 = ber_wrap_hdr_data(BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 3, h2);",
          "425:   s_realloc(&message, s_length(&message) + s_length(h1));",
          "427:   s_mark_end(&message);",
          "428:   s_free(h2);",
          "429:   s_free(h1);",
          "",
          "[Removed Lines]",
          "426:   out_uint8a(&message, h1->data, s_length(h1));",
          "",
          "[Added Lines]",
          "430:   out_stream(&message, h1);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "464:  h2 = ber_wrap_hdr_data(BER_TAG_INTEGER, &tmp);",
          "465:  h1 = ber_wrap_hdr_data(BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 0, h2);",
          "466:  s_realloc(&message, s_length(&message) + s_length(h1));",
          "468:  s_mark_end(&message);",
          "469:  s_free(h2);",
          "470:  s_free(h1);",
          "",
          "[Removed Lines]",
          "467:  out_uint8a(&message, h1->data, s_length(h1));",
          "",
          "[Added Lines]",
          "471:  out_stream(&message, h1);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "482:  h2 = ber_wrap_hdr_data(BER_TAG_OCTET_STRING, h3);",
          "483:  h1 = ber_wrap_hdr_data(BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 1, h2);",
          "484:  s_realloc(&message, s_length(&message) + s_length(h1));",
          "486:  s_mark_end(&message);",
          "487:  s_free(h3);",
          "488:  s_free(h2);",
          "",
          "[Removed Lines]",
          "485:  out_uint8a(&message, h1->data, s_length(h1));",
          "",
          "[Added Lines]",
          "489:  out_stream(&message, h1);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "518:  h2 = ber_wrap_hdr_data(BER_TAG_INTEGER, &tmp);",
          "519:  h1 = ber_wrap_hdr_data(BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 0, h2);",
          "520:  s_realloc(&message, s_length(&message) + s_length(h1));",
          "522:  s_mark_end(&message);",
          "523:  s_free(h2);",
          "524:  s_free(h1);",
          "",
          "[Removed Lines]",
          "521:  out_uint8a(&message, h1->data, s_length(h1));",
          "",
          "[Added Lines]",
          "525:  out_stream(&message, h1);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "532:   h2 = ber_wrap_hdr_data(BER_TAG_SEQUENCE | BER_TAG_CONSTRUCTED, h3);",
          "533:   h1 = ber_wrap_hdr_data(BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 1, h2);",
          "534:   s_realloc(&message, s_length(&message) + s_length(h1));",
          "536:   s_mark_end(&message);",
          "537:   s_free(h5);",
          "538:   s_free(h4);",
          "",
          "[Removed Lines]",
          "535:   out_uint8a(&message, h1->data, s_length(h1));",
          "",
          "[Added Lines]",
          "539:   out_stream(&message, h1);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "548:   h1 = ber_wrap_hdr_data(BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 2, h2);",
          "550:   s_realloc(&message, s_length(&message) + s_length(h1));",
          "553:   s_free(h2);",
          "554:   s_free(h1);",
          "",
          "[Removed Lines]",
          "551:   out_uint8a(&message, h1->data, s_length(h1));",
          "",
          "[Added Lines]",
          "555:   out_stream(&message, h1);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "561:   h1 = ber_wrap_hdr_data(BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 3, h2);",
          "563:   s_realloc(&message, s_length(&message) + s_length(h1));",
          "565:   s_mark_end(&message);",
          "566:   s_free(h2);",
          "567:   s_free(h1);",
          "",
          "[Removed Lines]",
          "564:   out_uint8a(&message, h1->data, s_length(h1));",
          "",
          "[Added Lines]",
          "568:   out_stream(&message, h1);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "573:  h1 = ber_wrap_hdr_data(BER_TAG_SEQUENCE | BER_TAG_CONSTRUCTED, &message);",
          "574:  s = tcp_init(s_length(h1));",
          "576:  s_mark_end(s);",
          "577:  s_free(h1);",
          "",
          "[Removed Lines]",
          "575:  out_uint8a(s, h1->data, s_length(h1));",
          "",
          "[Added Lines]",
          "579:  out_stream(s, h1);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "600:  if (s == NULL)",
          "601:   return NULL;",
          "609:   return NULL;",
          "623:  s = tcp_recv(s, length);",
          "629:   return NULL;",
          "632:  if (!ber_in_header(s, &tagval, &length) ||",
          "",
          "[Removed Lines]",
          "604:  if (s->p[0] != (BER_TAG_SEQUENCE | BER_TAG_CONSTRUCTED))",
          "605:  {",
          "606:   logger(Protocol, Error,",
          "607:          \"cssp_read_tsrequest(), expected BER_TAG_SEQUENCE|BER_TAG_CONSTRUCTED, got %x\",",
          "608:          s->p[0]);",
          "610:  }",
          "613:  if (s->p[1] < 0x80)",
          "614:   length = s->p[1] - 2;",
          "615:  else if (s->p[1] == 0x81)",
          "616:   length = s->p[2] - 1;",
          "617:  else if (s->p[1] == 0x82)",
          "618:   length = (s->p[2] << 8) | s->p[3];",
          "619:  else",
          "620:   return NULL;",
          "624:  packet = *s;",
          "627:  if (!ber_in_header(s, &tagval, &length) ||",
          "628:      tagval != (BER_TAG_SEQUENCE | BER_TAG_CONSTRUCTED))",
          "",
          "[Added Lines]",
          "608:  if (!ber_in_header(s, &tagval, &length) ||",
          "609:      tagval != (BER_TAG_SEQUENCE | BER_TAG_CONSTRUCTED))",
          "614:  length -= s_remaining(s);",
          "618:  if (s == NULL)",
          "620:  packet = *s;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "666:   }",
          "668:   out = s_alloc(length);",
          "670:   s_mark_end(out);",
          "671:   s_seek(out, 0);",
          "672:  }",
          "",
          "[Removed Lines]",
          "669:   out_uint8a(out, s->p, length);",
          "",
          "[Added Lines]",
          "660:   out_uint8stream(out, s, length);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "681:    return NULL;",
          "683:   out = s_alloc(length);",
          "685:   s_mark_end(out);",
          "686:   s_seek(out, 0);",
          "687:  }",
          "",
          "[Removed Lines]",
          "684:   out_uint8a(out, s->p, length);",
          "",
          "[Added Lines]",
          "675:   out_uint8stream(out, s, length);",
          "",
          "---------------"
        ],
        "licence.c||licence.c": [
          "File: licence.c -> licence.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "277: static void",
          "278: licence_process_new_license(STREAM s)",
          "279: {",
          "280:  RDSSL_RC4 crypt_key;",
          "281:  uint32 length;",
          "282:  int i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "280:  unsigned char *data;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "286:  if (!s_check_rem(s, length))",
          "287:   return;",
          "289:  rdssl_rc4_set_key(&crypt_key, g_licence_key, 16);",
          "293:  in_uint8s(s, 4); // skip dwVersion",
          "",
          "[Removed Lines]",
          "290:  rdssl_rc4_crypt(&crypt_key, s->p, s->p, length);",
          "",
          "[Added Lines]",
          "290:  inout_uint8p(s, data, length);",
          "293:  rdssl_rc4_crypt(&crypt_key, data, data, length);",
          "295:  s_seek(s, s_tell(s) - length);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "304:  }",
          "306:  g_licence_issued = True;",
          "308: }",
          "",
          "[Removed Lines]",
          "307:  save_licence(s->p, length);",
          "",
          "[Added Lines]",
          "312:  in_uint8p(s, data, length);",
          "313:  save_licence(data, length);",
          "",
          "---------------"
        ],
        "lspci.c||lspci.c": [
          "File: lspci.c -> lspci.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "139:  pkglen = s_remaining(s);",
          "141:  buf = xmalloc(pkglen + 1);",
          "143:  str_handle_lines(buf, &rest, lspci_process_line, NULL);",
          "144:  xfree(buf);",
          "145: }",
          "",
          "[Removed Lines]",
          "142:  STRNCPY(buf, (char *) s->p, pkglen + 1);",
          "",
          "[Added Lines]",
          "142:  in_uint8a(s, buf, pkglen);",
          "143:  buf[pkglen] = '\\0';",
          "",
          "---------------"
        ],
        "mcs.c||mcs.c": [
          "File: mcs.c -> mcs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "62: static void",
          "63: mcs_send_connect_initial(STREAM mcs_data)",
          "64: {",
          "66:  int length = 9 + 3 * 34 + 4 + datalen;",
          "67:  STREAM s;",
          "68:  logger(Protocol, Debug, \"%s()\", __func__);",
          "",
          "[Removed Lines]",
          "65:  int datalen = mcs_data->end - mcs_data->data;",
          "",
          "[Added Lines]",
          "65:  int datalen = s_length(mcs_data);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "139:     length = mcs_data->size;",
          "140:     }",
          "146:  return s_check_end(s);",
          "147: }",
          "",
          "[Removed Lines]",
          "142:     in_uint8a(s, mcs_data->data, length);",
          "143:     mcs_data->p = mcs_data->data;",
          "144:     mcs_data->end = mcs_data->data + length;",
          "",
          "[Added Lines]",
          "142:     s_reset(mcs_data);",
          "143:     in_uint8stream(s, mcs_data, length);",
          "144:     s_mark_end(mcs_data);",
          "145:     s_seek(mcs_data, 0);",
          "",
          "---------------"
        ],
        "orders.c||orders.c": [
          "File: orders.c -> orders.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #include \"rdesktop.h\"",
          "21: #include \"orders.h\"",
          "24: static RDP_ORDER_STATE g_order_state;",
          "25: extern RDP_VERSION g_rdp_version;",
          "",
          "[Removed Lines]",
          "23: extern uint8 *g_next_packet;",
          "",
          "[Added Lines]",
          "23: extern size_t g_next_packet;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1252:  sint16 length;",
          "1253:  uint16 flags;",
          "1254:  uint8 type;",
          "1256:  struct stream packet = *s;",
          "1258:  in_uint16_le(s, length);",
          "",
          "[Removed Lines]",
          "1255:  uint8 *next_order;",
          "",
          "[Added Lines]",
          "1255:  size_t next_order;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1269:   rdp_protocol_error(\"next order pointer would overrun stream\", &packet);",
          "1270:  }",
          "1274:  switch (type)",
          "1275:  {",
          "",
          "[Removed Lines]",
          "1272:  next_order = s->p + length;",
          "",
          "[Added Lines]",
          "1272:  next_order = s_tell(s) + length;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1306:           \"process_secondary_order(), unhandled secondary order %d\", type);",
          "1307:  }",
          "1310: }",
          "",
          "[Removed Lines]",
          "1309:  s->p = next_order;",
          "",
          "[Added Lines]",
          "1309:  s_seek(s, next_order);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1448:  }",
          "1449: #if 0",
          "1452:   logger(Graphics, Error, \"process_orders(), %d bytes remaining\",",
          "1454: #endif",
          "1456: }",
          "",
          "[Removed Lines]",
          "1451:  if (s->p != g_next_packet)",
          "1453:          (int) (g_next_packet - s->p));",
          "",
          "[Added Lines]",
          "1451:  if (s_tell(s) != g_next_packet)",
          "1453:          (int) (g_next_packet - s_tell(s)));",
          "",
          "---------------"
        ],
        "printercache.c||printercache.c": [
          "File: printercache.c -> printercache.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "238: {",
          "239:  uint32 type, printer_length, driver_length, printer_unicode_length, blob_length;",
          "240:  char device_name[9], *printer, *driver;",
          "242:  printer = driver = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "241:  size_t blob_start;",
          "242:  unsigned char *blob;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "279:    {",
          "280:     rdp_in_unistr(s, printer_unicode_length, &printer,",
          "281:            &printer_unicode_length);",
          "284:     free(printer);",
          "285:    }",
          "286:    break;",
          "",
          "[Removed Lines]",
          "282:     if (printer)",
          "283:      printercache_save_blob(printer, s->p, blob_length);",
          "",
          "[Added Lines]",
          "284:     if (printer) {",
          "285:      in_uint8p(s, blob, blob_length);",
          "286:      printercache_save_blob(printer, blob, blob_length);",
          "287:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "294:     in_uint32_be(s, driver_length);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "296:    blob_start = s_tell(s);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "309:    break;",
          "310:   default:",
          "311:    logger(Protocol, Warning,",
          "",
          "[Removed Lines]",
          "305:     s->p = s->p - 19;",
          "307:    printercache_save_blob(device_name, s->p,",
          "308:             driver_length + printer_length + 19);",
          "",
          "[Added Lines]",
          "310:    s_seek(s, blob_start);",
          "312:    blob_length = driver_length + printer_length + 19;",
          "313:    in_uint8p(s, blob, blob_length);",
          "314:    printercache_save_blob(device_name, blob, blob_length);",
          "",
          "---------------"
        ],
        "rdp.c||rdp.c": [
          "File: rdp.c -> rdp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: RD_BOOL g_exit_mainloop = False;",
          "63: uint32 g_rdp_shareid;",
          "65: extern RDPCOMP g_mppc_dict;",
          "",
          "[Removed Lines]",
          "62: uint8 *g_next_packet;",
          "",
          "[Added Lines]",
          "62: size_t g_next_packet;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "142:  while (1)",
          "143:  {",
          "146:   {",
          "147:    rdp_s = sec_recv(&is_fastpath);",
          "148:    if (rdp_s == NULL)",
          "",
          "[Removed Lines]",
          "145:   if ((rdp_s == NULL) || (g_next_packet >= rdp_s->end) || (g_next_packet == NULL))",
          "",
          "[Added Lines]",
          "148:   if (g_next_packet == 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "155:     continue;",
          "156:    }",
          "159:   }",
          "160:   else",
          "161:   {",
          "163:   }",
          "",
          "[Removed Lines]",
          "158:    g_next_packet = rdp_s->p;",
          "162:    rdp_s->p = g_next_packet;",
          "",
          "[Added Lines]",
          "161:    g_next_packet = s_tell(rdp_s);",
          "165:    s_seek(rdp_s, g_next_packet);",
          "166:    if (s_check_end(rdp_s))",
          "167:    {",
          "168:     g_next_packet = 0;",
          "169:     continue;",
          "170:    }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "172:  logger(Protocol, Debug, \"rdp_recv(), RDP packet #%d, type 0x%x\", ++g_packetno, *type);",
          "175:  return rdp_s;",
          "176: }",
          "",
          "[Removed Lines]",
          "174:  g_next_packet += length;",
          "",
          "[Added Lines]",
          "182:  if (!s_check_rem(rdp_s, length))",
          "183:  {",
          "184:   rdp_protocol_error(\"not enough data for PDU\", rdp_s);",
          "185:  }",
          "187:  g_next_packet = s_tell(rdp_s) + length;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "242:  static iconv_t icv_local_to_utf16;",
          "243:  size_t ibl, obl;",
          "247:  if (string == NULL || len == 0)",
          "",
          "[Removed Lines]",
          "244:  char *pin, *pout;",
          "",
          "[Added Lines]",
          "258:  char *pin;",
          "259:  unsigned char *pout;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "263:  ibl = strlen(string);",
          "264:  obl = len + 2;",
          "265:  pin = string;",
          "272:  {",
          "273:   logger(Protocol, Error, \"rdp_out_unistr(), iconv(2) fail, errno %d\", errno);",
          "274:   abort();",
          "275:  }",
          "278: }",
          "",
          "[Removed Lines]",
          "266:  pout = (char *) s->p;",
          "268:  memset(pout, 0, len + 4);",
          "271:  if (iconv(icv_local_to_utf16, (char **) &pin, &ibl, &pout, &obl) == (size_t) - 1)",
          "277:  s->p += len + 2;",
          "",
          "[Added Lines]",
          "281:  out_uint8p(s, pout, len + 2);",
          "283:  memset(pout, 0, len + 2);",
          "286:  if (iconv(icv_local_to_utf16, (char **) &pin, &ibl, (char **)&pout, &obl) == (size_t) - 1)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "286: {",
          "287:  static iconv_t icv_utf16_to_local;",
          "288:  size_t ibl, obl;",
          "291:  struct stream packet = *s;",
          "",
          "[Removed Lines]",
          "289:  char *pin, *pout;",
          "",
          "[Added Lines]",
          "302:  unsigned char *pin;",
          "303:  char *pout;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "324:  ibl = in_len;",
          "325:  obl = *str_size - 1;",
          "327:  pout = *string;",
          "329:  if (iconv(icv_utf16_to_local, (char **) &pin, &ibl, &pout, &obl) == (size_t) - 1)",
          "",
          "[Removed Lines]",
          "326:  pin = (char *) s->p;",
          "",
          "[Added Lines]",
          "340:  in_uint8p(s, pin, in_len);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "344:   abort();",
          "345:  }",
          "352:  if (*string)",
          "",
          "[Removed Lines]",
          "348:  s->p += in_len;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1219: rdp_process_server_caps(STREAM s, uint16 length)",
          "1220: {",
          "1221:  int n;",
          "1223:  uint16 ncapsets, capset_type, capset_length;",
          "1225:  logger(Protocol, Debug, \"%s()\", __func__);",
          "1229:  in_uint16_le(s, ncapsets);",
          "1232:  for (n = 0; n < ncapsets; n++)",
          "1233:  {",
          "1235:    return;",
          "1237:   in_uint16_le(s, capset_type);",
          "1238:   in_uint16_le(s, capset_length);",
          "1242:   switch (capset_type)",
          "1243:   {",
          "",
          "[Removed Lines]",
          "1222:  uint8 *next, *start;",
          "1227:  start = s->p;",
          "1234:   if (s->p > start + length)",
          "1240:   next = s->p + capset_length - 4;",
          "",
          "[Added Lines]",
          "1233:  size_t next, start;",
          "1238:  start = s_tell(s);",
          "1245:   if (s_tell(s) > start + length)",
          "1251:   next = s_tell(s) + capset_length - 4;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1256:     break;",
          "1257:   }",
          "1260:  }",
          "1261: }",
          "",
          "[Removed Lines]",
          "1259:   s->p = next;",
          "",
          "[Added Lines]",
          "1270:   s_seek(s, next);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1726:  uint16 clen;",
          "1727:  uint32 len;",
          "1729:  uint32 roff, rlen;",
          "1731:  struct stream *ns = &(g_mppc_dict.ns);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1740:  uint8 *buf;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1742:   if (len > RDP_MPPC_DICT_SIZE)",
          "1743:    logger(Protocol, Error,",
          "1744:           \"process_data_pdu(), error decompressed packet size exceeds max\");",
          "1746:    logger(Protocol, Error,",
          "1747:           \"process_data_pdu(), error while decompressing packet\");",
          "1761:   s = ns;",
          "1762:  }",
          "",
          "[Removed Lines]",
          "1745:   if (mppc_expand(s->p, clen, ctype, &roff, &rlen) == -1)",
          "1752:   ns->data = (uint8 *) xrealloc(ns->data, rlen);",
          "1754:   memcpy((ns->data), (unsigned char *) (g_mppc_dict.hist + roff), rlen);",
          "1756:   ns->size = rlen;",
          "1757:   ns->end = (ns->data + ns->size);",
          "1758:   ns->p = ns->data;",
          "1759:   ns->rdp_hdr = ns->p;",
          "",
          "[Added Lines]",
          "1757:   in_uint8p(s, buf, clen);",
          "1758:   if (mppc_expand(buf, clen, ctype, &roff, &rlen) == -1)",
          "1765:   s_realloc(ns, rlen);",
          "1766:   s_reset(ns);",
          "1768:   out_uint8a(ns, (unsigned char *) (g_mppc_dict.hist + roff), rlen);",
          "1770:   s_mark_end(ns);",
          "1771:   s_seek(ns, 0);",
          "1772:   s_push_layer(ns, rdp_hdr, 0);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2056:     logger(Protocol, Warning,",
          "2057:            \"rdp_loop(), unhandled PDU type %d received\", type);",
          "2058:   }",
          "2060:  }",
          "2061:  return True;",
          "2062: }",
          "",
          "[Removed Lines]",
          "2059:   cont = g_next_packet < s->end;",
          "",
          "[Added Lines]",
          "2072:   cont = g_next_packet < s_length(s);",
          "",
          "---------------"
        ],
        "rdp5.c||rdp5.c": [
          "File: rdp5.c -> rdp5.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"rdesktop.h\"",
          "26: extern RDPCOMP g_mppc_dict;",
          "",
          "[Removed Lines]",
          "24: extern uint8 *g_next_packet;",
          "",
          "[Added Lines]",
          "24: extern size_t g_next_packet;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78: {",
          "79:  uint16 length;",
          "80:  uint8 hdr, code, frag, comp, ctype = 0;",
          "83:  uint32 roff, rlen;",
          "84:  struct stream *ns = &(g_mppc_dict.ns);",
          "85:  struct stream *ts;",
          "",
          "[Removed Lines]",
          "81:  uint8 *next;",
          "",
          "[Added Lines]",
          "81:  size_t next;",
          "83:  uint8 *buf;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87:  static STREAM assembled[16] = { 0 };",
          "89:  ui_begin_update();",
          "91:  {",
          "",
          "[Removed Lines]",
          "90:  while (s->p < s->end)",
          "",
          "[Added Lines]",
          "91:  while (!s_check_end(s))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "105:   if (ctype & RDP_MPPC_COMPRESSED)",
          "106:   {",
          "108:     logger(Protocol, Error,",
          "109:            \"process_ts_fp_update_pdu(), error while decompressing packet\");",
          "121:    length = rlen;",
          "122:    ts = ns;",
          "",
          "[Removed Lines]",
          "103:   g_next_packet = next = s->p + length;",
          "107:    if (mppc_expand(s->p, length, ctype, &roff, &rlen) == -1)",
          "112:    ns->data = (uint8 *) xrealloc(ns->data, rlen);",
          "114:    memcpy((ns->data), (unsigned char *) (g_mppc_dict.hist + roff), rlen);",
          "116:    ns->size = rlen;",
          "117:    ns->end = (ns->data + ns->size);",
          "118:    ns->p = ns->data;",
          "119:    ns->rdp_hdr = ns->p;",
          "",
          "[Added Lines]",
          "104:   g_next_packet = next = s_tell(s) + length;",
          "108:    in_uint8p(s, buf, length);",
          "109:    if (mppc_expand(buf, length, ctype, &roff, &rlen) == -1)",
          "114:    s_realloc(ns, rlen);",
          "115:    s_reset(ns);",
          "117:    out_uint8a(ns, (unsigned char *) (g_mppc_dict.hist + roff), rlen);",
          "119:    s_mark_end(ns);",
          "120:    s_seek(ns, 0);",
          "121:    s_push_layer(ns, rdp_hdr, 0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "140:     s_reset(assembled[code]);",
          "141:    }",
          "145:    if (frag == FASTPATH_FRAGMENT_LAST)",
          "146:    {",
          "147:     s_mark_end(assembled[code]);",
          "149:     process_ts_fp_update_by_code(assembled[code], code);",
          "150:    }",
          "151:   }",
          "154:  }",
          "155:  ui_end_update();",
          "156: }",
          "",
          "[Removed Lines]",
          "143:    out_uint8a(assembled[code], ts->p, length);",
          "148:     assembled[code]->p = assembled[code]->data;",
          "153:   s->p = next;",
          "",
          "[Added Lines]",
          "145:    out_uint8stream(assembled[code], ts, length);",
          "150:     s_seek(assembled[code], 0);",
          "155:   s_seek(s, next);",
          "",
          "---------------"
        ],
        "rdpdr.c||rdpdr.c": [
          "File: rdpdr.c -> rdpdr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "411:   request,",
          "412:   file,",
          "413:   info_level,",
          "415:   id,",
          "416:   major,",
          "417:   minor,",
          "",
          "[Removed Lines]",
          "414:   buffer_len,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "424:  char *filename;",
          "425:  uint32 filename_len;",
          "429:  DEVICE_FNS *fns;",
          "430:  RD_BOOL rw_blocking = True;",
          "431:  RD_NTSTATUS status = RD_STATUS_INVALID_DEVICE_REQUEST;",
          "",
          "[Removed Lines]",
          "427:  uint8 *buffer, *pst_buf;",
          "428:  struct stream out;",
          "",
          "[Added Lines]",
          "426:  uint8 *pst_buf;",
          "427:  STREAM out;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "439:  filename = NULL;",
          "445:  if (device >= RDPDR_MAX_DEVICES)",
          "446:  {",
          "447:   logger(Protocol, Error,",
          "448:          \"rdpdr_process_irp(), invalid irp device=0x%lx, file=0x%lx, id=0x%lx, major=0x%lx, minor=0x%lx\",",
          "449:          device, file, id, major, minor);",
          "451:   return;",
          "452:  }",
          "",
          "[Removed Lines]",
          "441:  buffer_len = 0;",
          "442:  buffer = (uint8 *) xmalloc(1024);",
          "443:  buffer[0] = 0;",
          "450:   xfree(buffer);",
          "",
          "[Added Lines]",
          "440:  out = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "486:    logger(Protocol, Error,",
          "487:           \"rdpdr_process_irp(), received IRP for unknown device type %ld\",",
          "488:           device);",
          "490:    return;",
          "491:  }",
          "",
          "[Removed Lines]",
          "489:    xfree(buffer);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "520:           flags_and_attributes, filename, &result);",
          "522:    free(filename);",
          "524:    break;",
          "526:   case IRP_MJ_CLOSE:",
          "",
          "[Removed Lines]",
          "523:    buffer_len = 1;",
          "",
          "[Added Lines]",
          "518:    out = s_alloc(1);",
          "519:    out_uint8(out, 0);",
          "520:    s_mark_end(out);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "559:    {",
          "566:     status = fns->read(file, buffer, length, offset, &result);",
          "568:     break;",
          "569:    }",
          "",
          "[Removed Lines]",
          "560:     buffer = (uint8 *) xrealloc((void *) buffer, length);",
          "561:     if (!buffer)",
          "562:     {",
          "563:      status = RD_STATUS_CANCELLED;",
          "564:      break;",
          "565:     }",
          "567:     buffer_len = result;",
          "",
          "[Added Lines]",
          "557:     uint8* buffer;",
          "558:     out = s_alloc(length);",
          "559:     out_uint8p(out, buffer, length);",
          "562:     s_mark_end(out);",
          "563:     s_seek(out, result);",
          "564:     s_mark_end(out);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "588:    break;",
          "589:   case IRP_MJ_WRITE:",
          "593:    if (!fns->write)",
          "594:    {",
          "",
          "[Removed Lines]",
          "591:    buffer_len = 1;",
          "",
          "[Added Lines]",
          "588:    out = s_alloc(1);",
          "589:    out_uint8(out, 0);",
          "590:    s_mark_end(out);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "614:    {",
          "616:     break;",
          "617:    }",
          "",
          "[Removed Lines]",
          "615:     status = fns->write(file, s->p, length, offset, &result);",
          "",
          "[Added Lines]",
          "614:     unsigned char *data;",
          "615:     in_uint8p(s, data, length);",
          "616:     status = fns->write(file, data, length, offset, &result);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "645:    }",
          "646:    in_uint32_le(s, info_level);",
          "653:    break;",
          "",
          "[Removed Lines]",
          "648:    out.data = out.p = buffer;",
          "649:    out.size = sizeof(buffer);",
          "650:    status = disk_query_information(file, info_level, &out);",
          "651:    result = buffer_len = out.p - out.data;",
          "",
          "[Added Lines]",
          "649:    out = s_alloc(1024);",
          "650:    status = disk_query_information(file, info_level, out);",
          "651:    s_mark_end(out);",
          "652:    result = s_length(out);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "663:    in_uint32_le(s, info_level);",
          "669:    break;",
          "671:   case IRP_MJ_QUERY_VOLUME_INFORMATION:",
          "",
          "[Removed Lines]",
          "665:    out.data = out.p = buffer;",
          "666:    out.size = sizeof(buffer);",
          "667:    status = disk_set_information(file, info_level, s, &out);",
          "668:    result = buffer_len = out.p - out.data;",
          "",
          "[Added Lines]",
          "666:    out = s_alloc(1024);",
          "667:    status = disk_set_information(file, info_level, s, out);",
          "668:    s_mark_end(out);",
          "669:    result = s_length(out);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "679:    in_uint32_le(s, info_level);",
          "685:    break;",
          "687:   case IRP_MJ_DIRECTORY_CONTROL:",
          "",
          "[Removed Lines]",
          "681:    out.data = out.p = buffer;",
          "682:    out.size = sizeof(buffer);",
          "683:    status = disk_query_volume_information(file, info_level, &out);",
          "684:    result = buffer_len = out.p - out.data;",
          "",
          "[Added Lines]",
          "682:    out = s_alloc(1024);",
          "683:    status = disk_query_volume_information(file, info_level, out);",
          "684:    s_mark_end(out);",
          "685:    result = s_length(out);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "707:        convert_to_unix_filename(filename);",
          "708:      }",
          "712:      status = disk_query_directory(file, info_level, filename,",
          "718:      free(filename);",
          "719:      break;",
          "",
          "[Removed Lines]",
          "710:      out.data = out.p = buffer;",
          "711:      out.size = sizeof(buffer);",
          "713:               &out);",
          "714:      result = buffer_len = out.p - out.data;",
          "715:      if (!buffer_len)",
          "716:       buffer_len++;",
          "",
          "[Added Lines]",
          "711:      out = s_alloc(1024);",
          "713:               out);",
          "714:      s_mark_end(out);",
          "715:      if (!s_length(out))",
          "716:      {",
          "717:       out_uint8(out, 0);",
          "718:       s_mark_end(out);",
          "719:      }",
          "720:      result = s_length(out);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "760:    in_uint8s(s, 0x14);",
          "775: #ifdef WITH_SCARD",
          "776:    scardSetInfo(g_epoch, device, id, bytes_out + 0x14);",
          "777: #endif",
          "782:    if (status == RD_STATUS_PENDING)",
          "",
          "[Removed Lines]",
          "763:    buffer = (uint8 *) xrealloc((void *) buffer, bytes_out + 0x14);",
          "764:    if (!buffer)",
          "765:    {",
          "766:     status = RD_STATUS_CANCELLED;",
          "767:     break;",
          "768:    }",
          "770:    out.data = out.p = buffer;",
          "773:    out.size = bytes_out + 0x14;",
          "778:    status = fns->device_control(file, request, s, &out);",
          "779:    result = buffer_len = out.p - out.data;",
          "",
          "[Added Lines]",
          "767:    out = s_alloc(bytes_out + 0x14);",
          "772:    status = fns->device_control(file, request, s, out);",
          "773:    s_mark_end(out);",
          "774:    result = s_length(out);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "806:    in_uint32_le(s, info_level);",
          "812:    status = RD_STATUS_SUCCESS;",
          "814:    break;",
          "816:   default:",
          "",
          "[Removed Lines]",
          "808:    out.data = out.p = buffer;",
          "809:    out.size = sizeof(buffer);",
          "813:    result = buffer_len = out.p - out.data;",
          "",
          "[Added Lines]",
          "803:    out = s_alloc(1024);",
          "807:    s_mark_end(out);",
          "808:    result = s_length(out);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "823:  if (status != RD_STATUS_PENDING)",
          "824:  {",
          "825:   rdpdr_send_completion(device, id, status, result, buffer, buffer_len);",
          "826:  }",
          "830: }",
          "832: static void",
          "",
          "[Removed Lines]",
          "827:  if (buffer)",
          "828:   xfree(buffer);",
          "829:  buffer = NULL;",
          "",
          "[Added Lines]",
          "820:   size_t buffer_len;",
          "821:   uint8 *buffer;",
          "823:   if (out != NULL)",
          "824:   {",
          "825:    buffer_len = s_length(out);",
          "826:    s_seek(out, 0);",
          "827:    in_uint8p(out, buffer, buffer_len);",
          "828:   }",
          "829:   else",
          "830:   {",
          "831:    buffer_len = 0;",
          "832:    buffer = NULL;",
          "833:   }",
          "837:  if (out)",
          "838:   s_free(out);",
          "",
          "---------------"
        ],
        "rdpsnd.c||rdpsnd.c": [
          "File: rdpsnd.c -> rdpsnd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: struct audio_packet packet_queue[MAX_QUEUE];",
          "66: static uint8 packet_opcode;",
          "67: static struct stream packet;",
          "69: void (*wave_out_play) (void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: static size_t packet_len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "295: rdpsnd_process_packet(uint8 opcode, STREAM s)",
          "296: {",
          "297:  uint16 vol_left, vol_right;",
          "301:  switch (opcode)",
          "302:  {",
          "",
          "[Removed Lines]",
          "298:  static uint16 tick, format;",
          "299:  static uint8 packet_index;",
          "",
          "[Added Lines]",
          "300:  uint16 tick, format;",
          "301:  uint8 packet_index;",
          "302:  unsigned int size;",
          "303:  unsigned char *data;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "345:     current_format = format;",
          "346:    }",
          "351:    return;",
          "352:    break;",
          "353:   case SNDC_CLOSE:",
          "",
          "[Removed Lines]",
          "348:    rdpsnd_queue_write(rdpsnd_dsp_process",
          "349:         (s->p, s_remaining(s), current_driver,",
          "350:          &formats[current_format]), tick, packet_index);",
          "",
          "[Added Lines]",
          "352:    size = s_remaining(s);",
          "353:    in_uint8p(s, data, size);",
          "354:    rdpsnd_queue_write(rdpsnd_dsp_process(data, size,",
          "355:              current_driver,",
          "356:              &formats[current_format]),",
          "357:         tick, packet_index);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "382: static void",
          "383: rdpsnd_process(STREAM s)",
          "384: {",
          "387:  while (!s_check_end(s))",
          "388:  {",
          "391:   {",
          "392:    if (!s_check_rem(s, 4))",
          "393:    {",
          "",
          "[Removed Lines]",
          "385:  uint16 len;",
          "390:   if (packet.size == 0)",
          "",
          "[Added Lines]",
          "395:   if (packet_len == 0)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "397:    }",
          "398:    in_uint8(s, packet_opcode);",
          "402:    logger(Sound, Debug, \"rdpsnd_process(), Opcode = 0x%x Length= %d\",",
          "408:   }",
          "409:   else",
          "410:   {",
          "414:    if (packet_opcode == SNDC_WAVE)",
          "415:    {",
          "419:     {",
          "420:      logger(Sound, Debug,",
          "421:             \"rdpsnd_process(), eating 4 bytes of %d bytes...\",",
          "",
          "[Removed Lines]",
          "400:    in_uint16_le(s, len);",
          "403:           (int) packet_opcode, (int) len);",
          "405:    packet.p = packet.data;",
          "406:    packet.end = packet.data + len;",
          "407:    packet.size = len;",
          "411:    len = MIN(s_remaining(s), s_remaining(&packet));",
          "416:     if ((packet.p - packet.data) < 12)",
          "417:      len = MIN(len, 12 - (packet.p - packet.data));",
          "418:     else if ((packet.p - packet.data) == 12)",
          "",
          "[Added Lines]",
          "405:    in_uint16_le(s, packet_len);",
          "408:           (int) packet_opcode, (int) packet_len);",
          "412:    uint16 len;",
          "414:    len = MIN(s_remaining(s), packet_len - s_length(&packet));",
          "419:     if (s_length(&packet) < 12)",
          "420:      len = MIN(len, 12 - s_length(&packet));",
          "421:     else if (s_length(&packet) == 12)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "425:     }",
          "426:    }",
          "430:   }",
          "434:   {",
          "436:    rdpsnd_process_packet(packet_opcode, &packet);",
          "438:   }",
          "439:  }",
          "440: }",
          "",
          "[Removed Lines]",
          "428:    in_uint8a(s, packet.p, len);",
          "429:    packet.p += len;",
          "433:   if (packet.p == packet.end)",
          "435:    packet.p = packet.data;",
          "437:    packet.size = 0;",
          "",
          "[Added Lines]",
          "431:    in_uint8stream(s, &packet, len);",
          "433:    s_mark_end(&packet);",
          "437:   if (s_length(&packet) == packet_len)",
          "439:    s_seek(&packet, 0);",
          "441:    packet_len = 0;",
          "442:    s_reset(&packet);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "457:  pkglen = s_remaining(s);",
          "459:  buf = (char *) xmalloc(pkglen + 1);",
          "462:  str_handle_lines(buf, &rest, rdpsnddbg_line_handler, NULL);",
          "",
          "[Removed Lines]",
          "460:  STRNCPY(buf, (char *) s->p, pkglen + 1);",
          "",
          "[Added Lines]",
          "465:  in_uint8a(s, buf, pkglen);",
          "466:  buf[pkglen] = '\\0';",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "514:  drivers = NULL;",
          "520:  rdpsnd_channel =",
          "521:   channel_register(\"rdpsnd\", CHANNEL_OPTION_INITIALIZED | CHANNEL_OPTION_ENCRYPT_RDP,",
          "",
          "[Removed Lines]",
          "516:  packet.data = (uint8 *) xmalloc(65536);",
          "517:  packet.p = packet.end = packet.data;",
          "518:  packet.size = 0;",
          "",
          "[Added Lines]",
          "522:  s_realloc(&packet, 65536);",
          "",
          "---------------"
        ],
        "rdpsnd_alsa.c||rdpsnd_alsa.c": [
          "File: rdpsnd_alsa.c -> rdpsnd_alsa.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "358:  struct audio_packet *packet;",
          "359:  STREAM out;",
          "360:  int len;",
          "361:  static long prev_s, prev_us;",
          "362:  int duration;",
          "363:  struct timeval tv;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "361:  const unsigned char *data;",
          "362:  size_t before;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "381:  next_tick = rdpsnd_queue_next_tick();",
          "383:  len = s_remaining(out) / (samplewidth_out * audiochannels_out);",
          "385:  {",
          "386:   snd_pcm_prepare(out_handle);",
          "387:   len = 0;",
          "388:  }",
          "391:  gettimeofday(&tv, NULL);",
          "",
          "[Removed Lines]",
          "384:  if ((len = snd_pcm_writei(out_handle, out->p, ((MAX_FRAMES < len) ? MAX_FRAMES : len))) < 0)",
          "389:  out->p += (len * samplewidth_out * audiochannels_out);",
          "",
          "[Added Lines]",
          "385:  before = s_tell(out);",
          "388:  len = MIN(len, MAX_FRAMES);",
          "389:  in_uint8p(out, data, len);",
          "391:  len = snd_pcm_writei(out_handle, data, len);",
          "392:  if (len < 0)",
          "399:  s_seek(out, before + len * samplewidth_out * audiochannels_out);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "395:  if (packet->tick > next_tick)",
          "396:   next_tick += 65536;",
          "399:  {",
          "400:   snd_pcm_sframes_t delay_frames;",
          "401:   unsigned long delay_us;",
          "",
          "[Removed Lines]",
          "398:  if ((out->p == out->end) || duration > next_tick - packet->tick + 500)",
          "",
          "[Added Lines]",
          "408:  if (s_check_end(out) || duration > next_tick - packet->tick + 500)",
          "",
          "---------------"
        ],
        "rdpsnd_libao.c||rdpsnd_libao.c": [
          "File: rdpsnd_libao.c -> rdpsnd_libao.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "148: {",
          "149:  struct audio_packet *packet;",
          "150:  STREAM out;",
          "151:  int len;",
          "152:  static long prev_s, prev_us;",
          "153:  int duration;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151:  unsigned char *data;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "172:  next_tick = rdpsnd_queue_next_tick();",
          "174:  len = MIN(WAVEOUTLEN, s_remaining(out));",
          "178:  gettimeofday(&tv, NULL);",
          "",
          "[Removed Lines]",
          "175:  ao_play(o_device, (char *) out->p, len);",
          "176:  out->p += len;",
          "",
          "[Added Lines]",
          "176:  in_uint8p(out, data, len);",
          "177:  ao_play(o_device, (char *) data, len);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "182:  if (packet->tick > next_tick)",
          "183:   next_tick += 65536;",
          "186:  {",
          "187:   unsigned int delay_us;",
          "",
          "[Removed Lines]",
          "185:  if ((out->p == out->end) || duration > next_tick - packet->tick + 500)",
          "",
          "[Added Lines]",
          "186:  if (s_check_end(out) || duration > next_tick - packet->tick + 500)",
          "",
          "---------------"
        ],
        "rdpsnd_oss.c||rdpsnd_oss.c": [
          "File: rdpsnd_oss.c -> rdpsnd_oss.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "402:  struct audio_packet *packet;",
          "403:  ssize_t len;",
          "404:  STREAM out;",
          "406:  assert(dsp_fd != -1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "405:  size_t before;",
          "406:  const unsigned char *data;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "412:  packet = rdpsnd_queue_current_packet();",
          "413:  out = packet->s;",
          "418:  if (len == -1)",
          "419:  {",
          "420:   if (errno != EWOULDBLOCK)",
          "",
          "[Removed Lines]",
          "415:  len = s_remaining(out);",
          "417:  len = write(dsp_fd, out->p, (len > MAX_LEN) ? MAX_LEN : len);",
          "",
          "[Added Lines]",
          "417:  before = s_tell(out);",
          "419:  len = MIN(s_remaining(out), MAX_LEN);",
          "420:  in_uint8p(out, data, len);",
          "422:  len = write(dsp_fd, data, len);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "430:  dsp_broken = False;",
          "435:  {",
          "436:   int delay_bytes;",
          "437:   unsigned long delay_us;",
          "",
          "[Removed Lines]",
          "432:  out->p += len;",
          "434:  if (out->p == out->end)",
          "",
          "[Added Lines]",
          "438:  s_seek(out, before + len);",
          "440:  if (s_check_end(out))",
          "",
          "---------------"
        ],
        "rdpsnd_pulse.c||rdpsnd_pulse.c": [
          "File: rdpsnd_pulse.c -> rdpsnd_pulse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1195:   audio_size = MIN(s_remaining(out), avail_space);",
          "1196:   if (audio_size)",
          "1197:   {",
          "1198:    if (pa_stream_write",
          "1200:    {",
          "1201:     err = pa_context_errno(context);",
          "1202:     logger(Sound, Error, \"pulse_play(), pa_stream_write: %s\",",
          "",
          "[Removed Lines]",
          "1199:        (playback_stream, out->p, audio_size, NULL, 0, playback_seek) != 0)",
          "",
          "[Added Lines]",
          "1198:    unsigned char *data;",
          "1200:    in_uint8p(out, data, audio_size);",
          "1202:        (playback_stream, data, audio_size, NULL, 0, playback_seek) != 0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1207:     playback_seek = PA_SEEK_RELATIVE;",
          "1208:   }",
          "1213:   {",
          "1214:    ret = pa_stream_get_latency(playback_stream, &delay, NULL);",
          "1215:    if (ret != 0 && (err = pa_context_errno(context)) == PA_ERR_NODATA)",
          "",
          "[Removed Lines]",
          "1210:   out->p += audio_size;",
          "1212:   if (out->p == out->end)",
          "",
          "[Added Lines]",
          "1213:   if (s_check_end(out))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1252:  pa_threaded_mainloop_unlock(mainloop);",
          "1255:   rdpsnd_queue_next(delay);",
          "1257:  return result;",
          "",
          "[Removed Lines]",
          "1254:  if (out->p == out->end)",
          "",
          "[Added Lines]",
          "1255:  if (s_check_end(out))",
          "",
          "---------------"
        ],
        "rdpsnd_sgi.c||rdpsnd_sgi.c": [
          "File: rdpsnd_sgi.c -> rdpsnd_sgi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "246:  struct audio_packet *packet;",
          "247:  ssize_t len;",
          "248:  STREAM out;",
          "249:  int gf;",
          "251:  while (1)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "249:  unsigned char *data;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "257:   out = packet->s;",
          "259:   len = s_remaining(out);",
          "265:   {",
          "266:    gf = alGetFilled(output_port);",
          "267:    if (gf < (4 * maxFillable / 10))",
          "",
          "[Removed Lines]",
          "261:   alWriteFrames(output_port, out->p, len / combinedFrameSize);",
          "263:   out->p += len;",
          "264:   if (out->p == out->end)",
          "",
          "[Added Lines]",
          "261:   in_uint8p(out, data, len);",
          "263:   alWriteFrames(output_port, data, len / combinedFrameSize);",
          "265:   if (s_check_end(out))",
          "",
          "---------------"
        ],
        "rdpsnd_sun.c||rdpsnd_sun.c": [
          "File: rdpsnd_sun.c -> rdpsnd_sun.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "411:  struct audio_packet *packet;",
          "412:  ssize_t len;",
          "413:  STREAM out;",
          "416:  if (rdpsnd_queue_empty())",
          "417:   return;",
          "419:  packet = rdpsnd_queue_current_packet();",
          "425:  if (len == -1)",
          "426:  {",
          "427:   if (errno != EWOULDBLOCK)",
          "",
          "[Removed Lines]",
          "420:  out = &packet->s;",
          "422:  len = s_remaining(out);",
          "424:  len = write(dsp_fd, out->p, (len > MAX_LEN) ? MAX_LEN : len);",
          "",
          "[Added Lines]",
          "414:  size_t before;",
          "415:  const unsigned char *data;",
          "422:  out = packet->s;",
          "424:  before = s_tell(out);",
          "426:  len = MIN(s_remaining(out), MAX_LEN);",
          "427:  in_uint8p(out, data, len);",
          "429:  len = write(dsp_fd, data, len);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "440:  dsp_broken = False;",
          "445:  {",
          "446:   audio_info_t info;",
          "447:   uint_t delay_samples;",
          "",
          "[Removed Lines]",
          "442:  out->p += len;",
          "444:  if (out->p == out->end)",
          "",
          "[Added Lines]",
          "448:  s_seek(out, before + len);",
          "450:  if (s_check_end(out))",
          "",
          "---------------"
        ],
        "scard.c||scard.c": [
          "File: scard.c -> scard.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "562: static void",
          "563: outForceAlignment(STREAM out, unsigned int seed)",
          "564: {",
          "566:  if (add > 0)",
          "567:   out_uint8s(out, add);",
          "568: }",
          "",
          "[Removed Lines]",
          "565:  SERVER_DWORD add = (seed - (out->p - out->data) % seed) % seed;",
          "",
          "[Added Lines]",
          "565:  SERVER_DWORD add = (seed - s_tell(out) % seed) % seed;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "639: inReaderName(PMEM_HANDLE * handle, STREAM in, char **destination, RD_BOOL wide)",
          "640: {",
          "641:  SERVER_DWORD dataLength;",
          "643:  in_uint32_le(in, dataLength);",
          "644:  inRepos(in, inString(handle, in, destination, dataLength, wide));",
          "645: }",
          "",
          "[Removed Lines]",
          "642:  in->p += 0x08;",
          "",
          "[Added Lines]",
          "642:  in_uint8s(in, 0x08);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "717:  out_uint32_le(out, 0x00000004);",
          "718:  out_uint32_le(out, hContext);",
          "719:  outForceAlignment(out, 8);",
          "720:  return rv;",
          "721: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "720:  s_mark_end(out);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "727:  MYPCSC_SCARDCONTEXT myHContext;",
          "728:  SERVER_SCARDCONTEXT hContext;",
          "731:  in_uint32_le(in, hContext);",
          "732:  myHContext = _scard_handle_list_get_pcsc_handle(hContext);",
          "",
          "[Removed Lines]",
          "730:  in->p += 0x1C;",
          "",
          "[Added Lines]",
          "731:  in_uint8s(in, 0x1C);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "752:  }",
          "754:  outForceAlignment(out, 8);",
          "755:  return rv;",
          "756: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "756:  s_mark_end(out);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "762:  SERVER_SCARDCONTEXT hContext;",
          "763:  MYPCSC_SCARDCONTEXT myHContext;",
          "766:  in_uint32_le(in, hContext);",
          "768:  myHContext = _scard_handle_list_get_pcsc_handle(hContext);",
          "",
          "[Removed Lines]",
          "765:  in->p += 0x1C;",
          "",
          "[Added Lines]",
          "767:  in_uint8s(in, 0x1C);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "786:  }",
          "788:  outForceAlignment(out, 8);",
          "789:  return rv;",
          "790: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "791:  s_mark_end(out);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "799:  MYPCSC_SCARDCONTEXT myHContext;",
          "800:  SERVER_DWORD dataLength;",
          "801:  MYPCSC_DWORD cchReaders = readerArraySize;",
          "803:  char *readers, *cur;",
          "804:  PMEM_HANDLE lcHandle = NULL;",
          "807:  in_uint32_le(in, hContext);",
          "808:  myHContext = _scard_handle_list_get_pcsc_handle(hContext);",
          "810:  logger(SmartCard, Debug, \"TS_SCardListReaders(), context: 0x%08x [0x%lx])\",",
          "811:         (unsigned) hContext, myHContext);",
          "815:  out_uint32_le(out, 0x01760650);",
          "819:  dataLength = 0;",
          "",
          "[Removed Lines]",
          "802:  unsigned char *plen1, *plen2, *pend;",
          "806:  in->p += 0x2C;",
          "813:  plen1 = out->p;",
          "816:  plen2 = out->p;",
          "",
          "[Added Lines]",
          "805:  size_t plen1, plen2, pend;",
          "809:  in_uint8s(in, 0x2C);",
          "816:  plen1 = s_tell(out);",
          "819:  plen2 = s_tell(out);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "863:  dataLength += outString(out, \"\\0\", wide);",
          "864:  outRepos(out, dataLength);",
          "868:  out_uint32_le(out, dataLength);",
          "870:  out_uint32_le(out, dataLength);",
          "873:  outForceAlignment(out, 8);",
          "874:  SC_xfreeallmemory(&lcHandle);",
          "875:  return rv;",
          "876: }",
          "",
          "[Removed Lines]",
          "866:  pend = out->p;",
          "867:  out->p = plen1;",
          "869:  out->p = plen2;",
          "871:  out->p = pend;",
          "",
          "[Added Lines]",
          "869:  s_mark_end(out);",
          "871:  pend = s_tell(out);",
          "872:  s_seek(out, plen1);",
          "874:  s_seek(out, plen2);",
          "876:  s_seek(out, pend);",
          "879:  s_mark_end(out);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "891:  MYPCSC_DWORD dwActiveProtocol;",
          "892:  PMEM_HANDLE lcHandle = NULL;",
          "895:  in_uint32_le(in, dwShareMode);",
          "896:  in_uint32_le(in, dwPreferredProtocol);",
          "897:  inReaderName(&lcHandle, in, &szReader, wide);",
          "899:  in_uint32_le(in, hContext);",
          "901:  myHContext = _scard_handle_list_get_pcsc_handle(hContext);",
          "",
          "[Removed Lines]",
          "894:  in->p += 0x1C;",
          "898:  in->p += 0x04;",
          "",
          "[Added Lines]",
          "900:  in_uint8s(in, 0x1C);",
          "904:  in_uint8s(in, 0x04);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "966:  out_uint32_le(out, hCard);",
          "968:  outForceAlignment(out, 8);",
          "969:  SC_xfreeallmemory(&lcHandle);",
          "970:  return rv;",
          "971: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "975:  s_mark_end(out);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "982:  SERVER_DWORD dwInitialization;",
          "983:  MYPCSC_DWORD dwActiveProtocol;",
          "986:  in_uint32_le(in, dwShareMode);",
          "987:  in_uint32_le(in, dwPreferredProtocol);",
          "988:  in_uint32_le(in, dwInitialization);",
          "990:  in_uint32_le(in, hContext);",
          "992:  in_uint32_le(in, hCard);",
          "",
          "[Removed Lines]",
          "985:  in->p += 0x20;",
          "989:  in->p += 0x04;",
          "991:  in->p += 0x04;",
          "",
          "[Added Lines]",
          "992:  in_uint8s(in, 0x20);",
          "996:  in_uint8s(in, 0x04);",
          "998:  in_uint8s(in, 0x04);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1015:  out_uint32_le(out, (SERVER_DWORD) dwActiveProtocol);",
          "1016:  outForceAlignment(out, 8);",
          "1017:  return rv;",
          "1018: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1024:  s_mark_end(out);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1027:  MYPCSC_SCARDHANDLE myHCard;",
          "1028:  SERVER_DWORD dwDisposition;",
          "1031:  in_uint32_le(in, dwDisposition);",
          "1033:  in_uint32_le(in, hContext);",
          "1035:  in_uint32_le(in, hCard);",
          "1037:  myHContext = _scard_handle_list_get_pcsc_handle(hContext);",
          "",
          "[Removed Lines]",
          "1030:  in->p += 0x20;",
          "1032:  in->p += 0x04;",
          "1034:  in->p += 0x04;",
          "",
          "[Added Lines]",
          "1038:  in_uint8s(in, 0x20);",
          "1040:  in_uint8s(in, 0x04);",
          "1042:  in_uint8s(in, 0x04);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1076:  }",
          "1078:  outForceAlignment(out, 8);",
          "1079:  return rv;",
          "1080: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1087:  s_mark_end(out);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1162:  long i;",
          "1163:  PMEM_HANDLE lcHandle = NULL;",
          "1166:  in_uint32_le(in, dwTimeout);",
          "1167:  in_uint32_le(in, dwCount);",
          "1169:  in_uint32_le(in, hContext);",
          "1172:  myHContext = _scard_handle_list_get_pcsc_handle(hContext);",
          "",
          "[Removed Lines]",
          "1165:  in->p += 0x18;",
          "1168:  in->p += 0x08;",
          "1170:  in->p += 0x04;",
          "",
          "[Added Lines]",
          "1174:  in_uint8s(in, 0x18);",
          "1177:  in_uint8s(in, 0x08);",
          "1179:  in_uint8s(in, 0x04);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1197:    {",
          "1198:     SERVER_DWORD dataLength;",
          "1201:     in_uint32_le(in, dataLength);",
          "1202:     inRepos(in,",
          "1203:      inString(&lcHandle, in, (char **) &(cur->szReader),",
          "",
          "[Removed Lines]",
          "1200:     in->p += 0x08;",
          "",
          "[Added Lines]",
          "1209:     in_uint8s(in, 0x08);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1259:       sizeof(SERVER_SCARD_READERSTATE_A) - 2 * sizeof(unsigned char *));",
          "1260:  }",
          "1261:  outForceAlignment(out, 8);",
          "1262:  SC_xfreeallmemory(&lcHandle);",
          "1263:  return rv;",
          "1264: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1271:  s_mark_end(out);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1270:  SERVER_SCARDCONTEXT hContext;",
          "1271:  MYPCSC_SCARDCONTEXT myHContext;",
          "1274:  in_uint32_le(in, hContext);",
          "1276:  myHContext = _scard_handle_list_get_pcsc_handle(hContext);",
          "",
          "[Removed Lines]",
          "1273:  in->p += 0x1C;",
          "",
          "[Added Lines]",
          "1283:  in_uint8s(in, 0x1C);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1289:   logger(SmartCard, Debug, \"TS_SCardCancel(), success\");",
          "1290:  }",
          "1291:  outForceAlignment(out, 8);",
          "1292:  return rv;",
          "1293: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1302:  s_mark_end(out);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1309:  MYPCSC_LPSCARD_READERSTATE_A myRsArray;",
          "1310:  PMEM_HANDLE lcHandle = NULL;",
          "1313:  in_uint32_le(in, hContext);",
          "1314:  in_uint32_le(in, atrMaskCount);",
          "1315:  pAtrMasks = SC_xmalloc(&lcHandle, atrMaskCount * sizeof(SCARD_ATRMASK_L));",
          "",
          "[Removed Lines]",
          "1312:  in->p += 0x2C;",
          "",
          "[Added Lines]",
          "1323:  in_uint8s(in, 0x2C);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1424:  }",
          "1426:  outForceAlignment(out, 8);",
          "1427:  SC_xfreeallmemory(&lcHandle);",
          "1428:  return rv;",
          "1429: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1438:  s_mark_end(out);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1435:  SERVER_SCARDCONTEXT hCard;",
          "1436:  MYPCSC_SCARDCONTEXT myHCard;",
          "1439:  in_uint32_le(in, hCard);",
          "1440:  myHCard = _scard_handle_list_get_pcsc_handle(hCard);",
          "1441:  logger(SmartCard, Debug, \"TS_SCardBeginTransaction(), hcard: 0x%08x [0x%lx])\",",
          "",
          "[Removed Lines]",
          "1438:  in->p += 0x30;",
          "",
          "[Added Lines]",
          "1450:  in_uint8s(in, 0x30);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1451:   logger(SmartCard, Debug, \"TS_SCardBeginTransaction(), success\");",
          "1452:  }",
          "1453:  outForceAlignment(out, 8);",
          "1454:  return rv;",
          "1455: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1466:  s_mark_end(out);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1462:  MYPCSC_SCARDCONTEXT myHCard;",
          "1463:  SERVER_DWORD dwDisposition = 0;",
          "1466:  in_uint32_le(in, dwDisposition);",
          "1468:  in_uint32_le(in, hCard);",
          "1470:  myHCard = _scard_handle_list_get_pcsc_handle(hCard);",
          "",
          "[Removed Lines]",
          "1465:  in->p += 0x20;",
          "1467:  in->p += 0x0C;",
          "",
          "[Added Lines]",
          "1478:  in_uint8s(in, 0x20);",
          "1480:  in_uint8s(in, 0x0C);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1483:   logger(SmartCard, Debug, \"TS_SCardEndTransaction(), success\");",
          "1484:  }",
          "1485:  outForceAlignment(out, 8);",
          "1486:  return rv;",
          "1487: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1499:  s_mark_end(out);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1531:  PMEM_HANDLE lcHandle = NULL;",
          "1535:  in_uint32_le(in, map[0]);",
          "1537:  in_uint32_le(in, map[1]);",
          "1538:  pioSendPci = SC_xmalloc(&lcHandle, sizeof(SERVER_SCARD_IO_REQUEST));",
          "1539:  if (!pioSendPci)",
          "",
          "[Removed Lines]",
          "1534:  in->p += 0x14;",
          "1536:  in->p += 0x04;",
          "",
          "[Added Lines]",
          "1548:  in_uint8s(in, 0x14);",
          "1550:  in_uint8s(in, 0x04);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1551:  if (srv_buf_len <= cbRecvLength)",
          "1552:   cbRecvLength = srv_buf_len;",
          "1555:  in_uint32_le(in, hCard);",
          "1556:  myHCard = _scard_handle_list_get_pcsc_handle(hCard);",
          "",
          "[Removed Lines]",
          "1554:  in->p += 0x04;",
          "",
          "[Added Lines]",
          "1568:  in_uint8s(in, 0x04);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1695:   outBufferFinish(out, (char *) recvBuf, cbRecvLength);",
          "1696:  }",
          "1697:  outForceAlignment(out, 8);",
          "1698:  SC_xfreeallmemory(&lcHandle);",
          "1699:  return rv;",
          "1700: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1712:  s_mark_end(out);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1712:  char *readerName;",
          "1713:  unsigned char *atr;",
          "1716:  in_uint32_le(in, dwReaderLen);",
          "1717:  in_uint32_le(in, dwAtrLen);",
          "1719:  in_uint32_le(in, hCard);",
          "1721:  myHCard = _scard_handle_list_get_pcsc_handle(hCard);",
          "1722:  logger(SmartCard, Debug,",
          "1723:         \"TS_SCardStatus(), hcard: 0x%08x [0x%08lx], reader len: %d bytes, atr len: %d bytes\",",
          "",
          "[Removed Lines]",
          "1715:  in->p += 0x24;",
          "1718:  in->p += 0x0C;",
          "1720:  in->p += 0x04;",
          "",
          "[Added Lines]",
          "1730:  in_uint8s(in, 0x24);",
          "1733:  in_uint8s(in, 0x0C);",
          "1735:  in_uint8s(in, 0x04);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1790:   else",
          "1791:    dwState = 0x00000000;",
          "1794:   out_uint32_le(out, dwReaderLen);",
          "1795:   out_uint32_le(out, 0x00020000);",
          "1796:   out_uint32_le(out, dwState);",
          "",
          "[Removed Lines]",
          "1793:   void *p_len1 = out->p;",
          "",
          "[Added Lines]",
          "1808:   size_t p_len1 = s_tell(out);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1802:   }",
          "1803:   out_uint32_le(out, dwAtrLen);",
          "1806:   out_uint32_le(out, dwReaderLen);",
          "1807:   dataLength = outString(out, readerName, wide);",
          "1808:   dataLength += outString(out, \"\\0\", wide);",
          "1809:   outRepos(out, dataLength);",
          "1812:   out_uint32_le(out, dataLength);",
          "1814:   out_uint32_le(out, dataLength);",
          "1816:  }",
          "1817:  outForceAlignment(out, 8);",
          "1818:  SC_xfreeallmemory(&lcHandle);",
          "1819:  return rv;",
          "1820: }",
          "",
          "[Removed Lines]",
          "1805:   void *p_len2 = out->p;",
          "1810:   void *psave = out->p;",
          "1811:   out->p = p_len1;",
          "1813:   out->p = p_len2;",
          "1815:   out->p = psave;",
          "",
          "[Added Lines]",
          "1820:   size_t p_len2 = s_tell(out);",
          "1825:   s_mark_end(out);",
          "1826:   size_t psave = s_tell(out);",
          "1827:   s_seek(out, p_len1);",
          "1829:   s_seek(out, p_len2);",
          "1831:   s_seek(out, psave);",
          "1834:  s_mark_end(out);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1831:  char *readerName;",
          "1832:  unsigned char *atr;",
          "1835:  in_uint32_le(in, dwAtrLen);",
          "1837:  in_uint32_le(in, hCard);",
          "1839:  myHCard = _scard_handle_list_get_pcsc_handle(hCard);",
          "1841:  logger(SmartCard, Debug, \"TS_SCardState(), hcard: 0x%08x [0x%08lx], atrlen: %d bytes\",",
          "",
          "[Removed Lines]",
          "1834:  in->p += 0x24;",
          "1836:  in->p += 0x0C;",
          "1838:  in->p += 0x04;",
          "",
          "[Added Lines]",
          "1851:  in_uint8s(in, 0x24);",
          "1853:  in_uint8s(in, 0x0C);",
          "1855:  in_uint8s(in, 0x04);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1905:   outRepos(out, dwAtrLen);",
          "1906:  }",
          "1907:  outForceAlignment(out, 8);",
          "1908:  SC_xfreeallmemory(&lcHandle);",
          "1909:  return rv;",
          "1910: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1925:  s_mark_end(out);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1926:  char *szGroups;",
          "1927:  PMEM_HANDLE lcHandle = NULL;",
          "1930:  in_uint32_le(in, dwGroups);",
          "1932:  in_uint32_le(in, hContext);",
          "1934:  myHContext = _scard_handle_list_get_pcsc_handle(hContext);",
          "",
          "[Removed Lines]",
          "1929:  in->p += 0x20;",
          "1931:  in->p += 0x04;",
          "",
          "[Added Lines]",
          "1947:  in_uint8s(in, 0x20);",
          "1949:  in_uint8s(in, 0x04);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1974:  out_uint32_le(out, 0x00000000);",
          "1976:  outForceAlignment(out, 8);",
          "1977:  SC_xfreeallmemory(&lcHandle);",
          "1978:  return rv;",
          "1979: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1995:  s_mark_end(out);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1990:  unsigned char *pbAttr;",
          "1991:  PMEM_HANDLE lcHandle = NULL;",
          "1994:  in_uint32_le(in, dwAttrId);",
          "1996:  in_uint32_le(in, dwAttrLen);",
          "1998:  in_uint32_le(in, hCard);",
          "1999:  myHCard = _scard_handle_list_get_pcsc_handle(hCard);",
          "",
          "[Removed Lines]",
          "1993:  in->p += 0x20;",
          "1995:  in->p += 0x04;",
          "1997:  in->p += 0x0C;",
          "",
          "[Added Lines]",
          "2012:  in_uint8s(in, 0x20);",
          "2014:  in_uint8s(in, 0x04);",
          "2016:  in_uint8s(in, 0x0C);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2044:   out_uint32_le(out, 0x00000000);",
          "2045:  }",
          "2046:  outForceAlignment(out, 8);",
          "2047:  return rv;",
          "2048: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2066:  s_mark_end(out);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2060:  unsigned char *pbAttr;",
          "2061:  PMEM_HANDLE lcHandle = NULL;",
          "2064:  in_uint32_le(in, dwAttrId);",
          "2066:  in_uint32_le(in, dwAttrLen);",
          "2068:  in_uint32_le(in, hCard);",
          "2069:  myHCard = scHandleToMyPCSC(hCard);",
          "",
          "[Removed Lines]",
          "2063:  in->p += 0x20;",
          "2065:  in->p += 0x04;",
          "2067:  in->p += 0x0C;",
          "",
          "[Added Lines]",
          "2083:  in_uint8s(in, 0x20);",
          "2085:  in_uint8s(in, 0x04);",
          "2087:  in_uint8s(in, 0x0C);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2098:  out_uint32_le(out, 0x00000000);",
          "2099:  out_uint32_le(out, 0x00000000);",
          "2100:  outForceAlignment(out, 8);",
          "2101:  SC_xfreeallmemory(&lcHandle);",
          "2102:  return rv;",
          "2103: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2121:  s_mark_end(out);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2123:  pInBuffer = NULL;",
          "2124:  pOutBuffer = NULL;",
          "2127:  in_uint32_le(in, map[0]);",
          "2129:  in_uint32_le(in, map[1]);",
          "2130:  in_uint32_le(in, dwControlCode);",
          "2131:  in_uint32_le(in, nInBufferSize);",
          "2132:  in_uint32_le(in, map[2]);",
          "2134:  in_uint32_le(in, nOutBufferSize);",
          "2136:  in_uint32_le(in, hContext);",
          "2138:  in_uint32_le(in, hCard);",
          "2139:  if (map[2] & INPUT_LINKED)",
          "2140:  {",
          "",
          "[Removed Lines]",
          "2126:  in->p += 0x14;",
          "2128:  in->p += 0x04;",
          "2133:  in->p += 0x04;",
          "2135:  in->p += 0x04;",
          "2137:  in->p += 0x04;",
          "",
          "[Added Lines]",
          "2147:  in_uint8s(in, 0x14);",
          "2149:  in_uint8s(in, 0x04);",
          "2154:  in_uint8s(in, 0x04);",
          "2156:  in_uint8s(in, 0x04);",
          "2158:  in_uint8s(in, 0x04);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2241:  }",
          "2243:  outForceAlignment(out, 8);",
          "2244:  SC_xfreeallmemory(&lcHandle);",
          "2245:  return rv;",
          "2246: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2265:  s_mark_end(out);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2260: {",
          "2261:  UNUSED(handle);",
          "2262:  SERVER_DWORD Result = 0x00000000;",
          "2264:  SERVER_DWORD addToEnd = 0;",
          "",
          "[Removed Lines]",
          "2263:  unsigned char *psize, *pend, *pStatusCode;",
          "",
          "[Added Lines]",
          "2285:  size_t psize, pend, pStatusCode;",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2272:  out_uint32_le(out, 0xCCCCCCCC);",
          "2280:  switch (request)",
          "",
          "[Removed Lines]",
          "2273:  psize = out->p;",
          "2277:  pStatusCode = out->p;",
          "",
          "[Added Lines]",
          "2295:  psize = s_tell(out);",
          "2299:  pStatusCode = s_tell(out);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "2410: #if 0",
          "2411:  out_uint32_le(out, 0x00000000);",
          "2412: #endif",
          "2417:  out_uint32_le(out, pend - psize - 16);",
          "2420:  out_uint32_le(out, Result);",
          "2425:  addToEnd = (pend - pStatusCode) % 16;",
          "2426:  if (addToEnd < 16 && addToEnd > 0)",
          "2427:  {",
          "2428:   out_uint8s(out, addToEnd);",
          "2429:  }",
          "2431:  if (Result == SCARD_E_INSUFFICIENT_BUFFER) return RD_STATUS_BUFFER_TOO_SMALL;",
          "",
          "[Removed Lines]",
          "2414:  pend = out->p;",
          "2416:  out->p = psize;",
          "2419:  out->p = pStatusCode;",
          "2422:  out->p = pend;",
          "",
          "[Added Lines]",
          "2435:  s_mark_end(out);",
          "2438:  pend = s_tell(out);",
          "2440:  s_seek(out, psize);",
          "2443:  s_seek(out, pStatusCode);",
          "2446:  s_seek(out, pend);",
          "2453:   s_mark_end(out);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "2574:  RD_NTSTATUS status;",
          "2575:  size_t buffer_len = 0;",
          "2576:  status = scard_device_control(data->handle, data->request, data->in, data->out, data->srv_buf_len);",
          "2580:     back to server due to it's considered as abandoned.",
          "2582:  if (data->epoch == curEpoch)",
          "2585:  SC_destroyThreadData(data);",
          "2586: }",
          "",
          "[Removed Lines]",
          "2577:  buffer_len = (size_t) data->out->p - (size_t) data->out->data;",
          "2583:   rdpdr_send_completion(data->device, data->id, status, buffer_len, data->out->data, buffer_len);",
          "",
          "[Added Lines]",
          "2602:  buffer_len = s_tell(data->out);",
          "2608:  {",
          "2609:   uint8 *buf;",
          "2610:   s_seek(data->out, 0);",
          "2611:   in_uint8p(data->out, buf, buffer_len);",
          "2612:   rdpdr_send_completion(data->device, data->id, status, buffer_len, buf, buffer_len);",
          "2613:  }",
          "",
          "---------------"
        ],
        "seamless.c||seamless.c": [
          "File: seamless.c -> seamless.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "380:  pkglen = s_remaining(s);",
          "382:  buf = xmalloc(pkglen + 1);",
          "384:  str_handle_lines(buf, &seamless_rest, seamless_line_handler, NULL);",
          "386:  xfree(buf);",
          "",
          "[Removed Lines]",
          "383:  STRNCPY(buf, (char *) s->p, pkglen + 1);",
          "",
          "[Added Lines]",
          "383:  in_uint8a(s, buf, pkglen);",
          "384:  buf[pkglen] = '\\0';",
          "",
          "---------------"
        ],
        "secure.c||secure.c": [
          "File: secure.c -> secure.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "352:  if (flags & SEC_ENCRYPT)",
          "353:  {",
          "354:   flags &= ~SEC_ENCRYPT;",
          "355:   datalen = s_remaining(s) - 8;",
          "358:  }",
          "360:  mcs_send_to_channel(s, channel);",
          "",
          "[Removed Lines]",
          "356:   sec_sign(s->p, 8, g_sec_sign_key, g_rc4_key_len, s->p + 8, datalen);",
          "357:   sec_encrypt(s->p + 8, datalen);",
          "",
          "[Added Lines]",
          "354:   unsigned char *data;",
          "357:   inout_uint8p(s, data, datalen + 8);",
          "358:   sec_sign(data, 8, g_sec_sign_key, g_rc4_key_len, data + 8, datalen);",
          "359:   sec_encrypt(data + 8, datalen);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "587:  RDSSL_CERT *cacert, *server_cert;",
          "588:  RDSSL_RKEY *server_public_key;",
          "589:  uint16 tag, length;",
          "592:  logger(Protocol, Debug, \"%s()\", __func__);",
          "",
          "[Removed Lines]",
          "590:  uint8 *next_tag, *end;",
          "",
          "[Added Lines]",
          "592:  size_t next_tag;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "613:  in_uint8p(s, *server_random, random_len);",
          "618:  {",
          "620:   return False;",
          "621:  }",
          "",
          "[Removed Lines]",
          "616:  end = s->p + rsa_info_len;",
          "617:  if (end > s->end)",
          "619:   logger(Protocol, Error, \"sec_parse_crypt_info(), end > s->end\");",
          "",
          "[Added Lines]",
          "618:  if (!s_check_rem(s, rsa_info_len))",
          "620:   logger(Protocol, Error, \"sec_parse_crypt_info(), !s_check_rem(s, rsa_info_len)\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "627:          \"sec_parse_crypt_info(), We're going for the RDP4-style encryption\");",
          "631:   {",
          "632:    in_uint16_le(s, tag);",
          "633:    in_uint16_le(s, length);",
          "637:    switch (tag)",
          "638:    {",
          "",
          "[Removed Lines]",
          "630:   while (s->p < end)",
          "635:    next_tag = s->p + length;",
          "",
          "[Added Lines]",
          "631:   while (!s_check_end(s))",
          "636:    next_tag = s_tell(s) + length;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "663:             tag);",
          "664:    }",
          "667:   }",
          "668:  }",
          "669:  else",
          "670:  {",
          "671:   uint32 certcount;",
          "673:   logger(Protocol, Debug,",
          "674:          \"sec_parse_crypt_info(), We're going for the RDP5-style encryption\");",
          "",
          "[Removed Lines]",
          "666:    s->p = next_tag;",
          "",
          "[Added Lines]",
          "667:    s_seek(s, next_tag);",
          "673:   unsigned char *certdata;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "684:    uint32 ignorelen;",
          "685:    RDSSL_CERT *ignorecert;",
          "687:    in_uint32_le(s, ignorelen);",
          "690:    if (ignorecert == NULL)",
          "692:     logger(Protocol, Error,",
          "",
          "[Removed Lines]",
          "688:    ignorecert = rdssl_cert_read(s->p, ignorelen);",
          "689:    in_uint8s(s, ignorelen);",
          "",
          "[Added Lines]",
          "688:    unsigned char *ignoredata;",
          "691:    in_uint8p(s, ignoredata, ignorelen);",
          "692:    ignorecert = rdssl_cert_read(ignoredata, ignorelen);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "706:      http://www.cs.auckland.ac.nz/~pgut001/pubs/x509guide.txt",
          "708:   in_uint32_le(s, cacert_len);",
          "709:   logger(Protocol, Debug,",
          "710:          \"sec_parse_crypt_info(), server CA Certificate length is %d\", cacert_len);",
          "713:   if (NULL == cacert)",
          "714:   {",
          "715:    logger(Protocol, Error,",
          "",
          "[Removed Lines]",
          "711:   cacert = rdssl_cert_read(s->p, cacert_len);",
          "712:   in_uint8s(s, cacert_len);",
          "",
          "[Added Lines]",
          "712:   in_uint8p(s, certdata, cacert_len);",
          "715:   cacert = rdssl_cert_read(certdata, cacert_len);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "717:    return False;",
          "718:   }",
          "719:   in_uint32_le(s, cert_len);",
          "720:   logger(Protocol, Debug, \"sec_parse_crypt_info(), certificate length is %d\",",
          "721:          cert_len);",
          "724:   if (NULL == server_cert)",
          "725:   {",
          "726:    rdssl_cert_free(cacert);",
          "",
          "[Removed Lines]",
          "722:   server_cert = rdssl_cert_read(s->p, cert_len);",
          "723:   in_uint8s(s, cert_len);",
          "",
          "[Added Lines]",
          "723:   in_uint8p(s, certdata, cert_len);",
          "726:   server_cert = rdssl_cert_read(certdata, cert_len);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "814: sec_process_mcs_data(STREAM s)",
          "815: {",
          "816:  uint16 tag, length;",
          "818:  uint8 len;",
          "",
          "[Removed Lines]",
          "817:  uint8 *next_tag;",
          "",
          "[Added Lines]",
          "820:  size_t next_tag;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "823:   in_uint8(s, len);",
          "824:  logger(Protocol, Debug, \"%s()\", __func__);",
          "827:  {",
          "828:   in_uint16_le(s, tag);",
          "829:   in_uint16_le(s, length);",
          "",
          "[Removed Lines]",
          "826:  while (s->p < s->end)",
          "",
          "[Added Lines]",
          "829:  while (!s_check_end(s))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "831:   if (length <= 4)",
          "832:    return;",
          "836:   switch (tag)",
          "837:   {",
          "",
          "[Removed Lines]",
          "834:   next_tag = s->p + length - 4;",
          "",
          "[Added Lines]",
          "837:   next_tag = s_tell(s) + length - 4;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "856:     logger(Protocol, Warning, \"Unhandled response tag 0x%x\", tag);",
          "857:   }",
          "860:  }",
          "861: }",
          "",
          "[Removed Lines]",
          "859:   s->p = next_tag;",
          "",
          "[Added Lines]",
          "862:   s_seek(s, next_tag);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "869:  uint16 channel;",
          "870:  STREAM s;",
          "871:  struct stream packet;",
          "873:  while ((s = mcs_recv(&channel, is_fastpath, &fastpath_hdr)) != NULL)",
          "874:  {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "875:  size_t data_offset;",
          "876:  unsigned char *data;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "886:     }",
          "890:    }",
          "891:    return s;",
          "892:   }",
          "894:   if (g_encryption || (!g_licence_issued && !g_licence_error_result))",
          "895:   {",
          "897:    in_uint16_le(s, sec_flags);",
          "900:    if (g_encryption)",
          "901:    {",
          "902:     if (sec_flags & SEC_ENCRYPT)",
          "903:     {",
          "904:      if (!s_check_rem(s, 8)) {",
          "",
          "[Removed Lines]",
          "889:     sec_decrypt(s->p, s_remaining(s));",
          "",
          "[Added Lines]",
          "895:     data_offset = s_tell(s);",
          "897:     inout_uint8p(s, data, s_remaining(s));",
          "898:     sec_decrypt(data, s_remaining(s));",
          "900:     s_seek(s, data_offset);",
          "907:    data_offset = s_tell(s);",
          "915:     data_offset = s_tell(s);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "906:      }",
          "910:     }",
          "912:     if (sec_flags & SEC_LICENSE_PKT)",
          "913:     {",
          "914:      licence_process(s);",
          "915:      continue;",
          "916:     }",
          "",
          "[Removed Lines]",
          "909:      sec_decrypt(s->p, s_remaining(s));",
          "",
          "[Added Lines]",
          "925:      data_offset = s_tell(s);",
          "927:      inout_uint8p(s, data, s_remaining(s));",
          "928:      sec_decrypt(data, s_remaining(s));",
          "933:      s_seek(s, data_offset);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "924:      }",
          "931:      {",
          "933:          This isn't good, but we're going to do a byte for byte",
          "",
          "[Removed Lines]",
          "927:      sec_decrypt(s->p, s_remaining(s));",
          "930:      if (s->p[0] == 0 && s->p[1] == 4)",
          "",
          "[Added Lines]",
          "948:      data_offset = s_tell(s);",
          "950:      inout_uint8p(s, data, s_remaining(s));",
          "951:      sec_decrypt(data, s_remaining(s));",
          "954:      if (data[0] == 0 && data[1] == 4)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "935:          where XX YY is the little endian length. We're going to",
          "936:          use 04 00 as the PDU type, so after our swap this will look",
          "949:      }",
          "950:     }",
          "951:    }",
          "",
          "[Removed Lines]",
          "938:       swapbyte = s->p[0];",
          "939:       s->p[0] = s->p[2];",
          "940:       s->p[2] = swapbyte;",
          "942:       swapbyte = s->p[1];",
          "943:       s->p[1] = s->p[3];",
          "944:       s->p[3] = swapbyte;",
          "946:       swapbyte = s->p[2];",
          "947:       s->p[2] = s->p[3];",
          "948:       s->p[3] = swapbyte;",
          "",
          "[Added Lines]",
          "962:       swapbyte = data[0];",
          "963:       data[0] = data[2];",
          "964:       data[2] = swapbyte;",
          "966:       swapbyte = data[1];",
          "967:       data[1] = data[3];",
          "968:       data[3] = swapbyte;",
          "970:       swapbyte = data[2];",
          "971:       data[2] = data[3];",
          "972:       data[3] = swapbyte;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "956:      licence_process(s);",
          "957:      continue;",
          "958:     }",
          "960:    }",
          "961:   }",
          "963:   if (channel != MCS_GLOBAL_CHANNEL)",
          "",
          "[Removed Lines]",
          "959:     s->p -= 4;",
          "",
          "[Added Lines]",
          "985:    s_seek(s, data_offset);",
          "",
          "---------------"
        ],
        "stream.h||stream.h": [
          "File: stream.h -> stream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "153: #define out_stream(s, v) out_uint8a(s, (v)->data, s_length((v)))",
          "155: #define next_be(s,v)  { s_assert_r(s, 1); v = ((v) << 8) + *((s)->p++); }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "156: #define inout_uint8p(s,v,n) { s_assert_r(s, n); s_assert_w(s, n); v = (s)->p; (s)->p += n; }",
          "",
          "---------------"
        ],
        "tcp.c||tcp.c": [
          "File: tcp.c -> tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "109: void",
          "110: tcp_send(STREAM s)",
          "111: {",
          "115:  if (g_network_error == True)",
          "116:   return;",
          "",
          "[Removed Lines]",
          "112:  int length = s->end - s->data;",
          "113:  int sent, total = 0;",
          "",
          "[Added Lines]",
          "112:  size_t before;",
          "113:  int length, sent;",
          "114:  unsigned char *data;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:  scard_lock(SCARD_LOCK_TCP);",
          "120: #endif",
          "123:  {",
          "124:   if (g_ssl_initialized) {",
          "126:    if (sent <= 0) {",
          "127:     if (gnutls_error_is_fatal(sent)) {",
          "128: #ifdef WITH_SCARD",
          "",
          "[Removed Lines]",
          "122:  while (total < length)",
          "125:    sent = gnutls_record_send(g_tls_session, s->data + total, length - total);",
          "",
          "[Added Lines]",
          "123:  s_seek(s, 0);",
          "125:  while (!s_check_end(s))",
          "127:   before = s_tell(s);",
          "128:   length = s_remaining(s);",
          "129:   in_uint8p(s, data, length);",
          "132:    sent = gnutls_record_send(g_tls_session, data, length);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "139:   }",
          "140:   else",
          "141:   {",
          "143:    if (sent <= 0)",
          "144:    {",
          "145:     if (sent == -1 && TCP_BLOCKS)",
          "",
          "[Removed Lines]",
          "142:    sent = send(g_sock, s->data + total, length - total, 0);",
          "",
          "[Added Lines]",
          "149:    sent = send(g_sock, data, length, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "159:     }",
          "160:    }",
          "161:   }",
          "163:  }",
          "164: #ifdef WITH_SCARD",
          "165:  scard_unlock(SCARD_LOCK_TCP);",
          "",
          "[Removed Lines]",
          "162:   total += sent;",
          "",
          "[Added Lines]",
          "171:   s_seek(s, before + sent);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "170: STREAM",
          "171: tcp_recv(STREAM s, uint32 length)",
          "172: {",
          "174:  int rcvd = 0;",
          "176:  if (g_network_error == True)",
          "",
          "[Removed Lines]",
          "173:  uint32 new_length, end_offset, p_offset;",
          "",
          "[Added Lines]",
          "182:  size_t before;",
          "183:  unsigned char *data;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "179:  if (s == NULL)",
          "180:  {",
          "188:   s = &g_in;",
          "189:  }",
          "190:  else",
          "191:  {",
          "203:  }",
          "205:  while (length > 0)",
          "",
          "[Removed Lines]",
          "182:   if (length > g_in.size)",
          "183:   {",
          "184:    g_in.data = (uint8 *) xrealloc(g_in.data, length);",
          "185:    g_in.size = length;",
          "186:   }",
          "187:   g_in.end = g_in.p = g_in.data;",
          "193:   new_length = (s->end - s->data) + length;",
          "194:   if (new_length > s->size)",
          "195:   {",
          "196:    p_offset = s->p - s->data;",
          "197:    end_offset = s->end - s->data;",
          "198:    s->data = (uint8 *) xrealloc(s->data, new_length);",
          "199:    s->size = new_length;",
          "200:    s->p = s->data + p_offset;",
          "201:    s->end = s->data + end_offset;",
          "202:   }",
          "",
          "[Added Lines]",
          "192:   s_realloc(&g_in, length);",
          "193:   s_reset(&g_in);",
          "199:   s_realloc(s, s_length(s) + length);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "215:     return NULL;",
          "216:   }",
          "218:   if (g_ssl_initialized) {",
          "221:    if (rcvd < 0) {",
          "222:     if (gnutls_error_is_fatal(rcvd)) {",
          "",
          "[Removed Lines]",
          "219:    rcvd = gnutls_record_recv(g_tls_session, s->end, length);",
          "",
          "[Added Lines]",
          "215:   before = s_tell(s);",
          "216:   s_seek(s, s_length(s));",
          "218:   out_uint8p(s, data, length);",
          "220:   s_seek(s, before);",
          "223:    rcvd = gnutls_record_recv(g_tls_session, data, length);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "231:   }",
          "232:   else",
          "233:   {",
          "235:    if (rcvd < 0)",
          "236:    {",
          "237:     if (rcvd == -1 && TCP_BLOCKS)",
          "",
          "[Removed Lines]",
          "234:    rcvd = recv(g_sock, s->end, length, 0);",
          "",
          "[Added Lines]",
          "238:    rcvd = recv(g_sock, data, length, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "75221eb3c52a160fc8737bcb47b487d2df1579ff",
      "candidate_info": {
        "commit_hash": "75221eb3c52a160fc8737bcb47b487d2df1579ff",
        "repo": "rdesktop/rdesktop",
        "commit_url": "https://github.com/rdesktop/rdesktop/commit/75221eb3c52a160fc8737bcb47b487d2df1579ff",
        "files": [
          "channels.c",
          "cliprdr.c",
          "cssp.c",
          "iso.c",
          "licence.c",
          "lspci.c",
          "mcs.c",
          "rdp.c",
          "rdp5.c",
          "rdpdr.c",
          "scard.c",
          "seamless.c",
          "secure.c",
          "stream.h"
        ],
        "message": "Separate behaviour of out_uint8a and out_uint8p\n\nMake them more match in_uint8a and in_uint8p in that one copies and\nthe other just gives you a pointer and it is up to the caller how\nto fill it in. This can be useful when other APIs are used to\ngenerate the data as it avoids a temporary buffer.",
        "before_after_code_files": [
          "channels.c||channels.c",
          "cliprdr.c||cliprdr.c",
          "cssp.c||cssp.c",
          "iso.c||iso.c",
          "licence.c||licence.c",
          "lspci.c||lspci.c",
          "mcs.c||mcs.c",
          "rdp.c||rdp.c",
          "rdp5.c||rdp5.c",
          "rdpdr.c||rdpdr.c",
          "scard.c||scard.c",
          "seamless.c||seamless.c",
          "secure.c||secure.c",
          "stream.h||stream.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cliprdr.c||cliprdr.c",
            "cssp.c||cssp.c",
            "lspci.c||lspci.c",
            "mcs.c||mcs.c",
            "rdp.c||rdp.c",
            "rdpdr.c||rdpdr.c",
            "seamless.c||seamless.c",
            "secure.c||secure.c",
            "stream.h||stream.h"
          ],
          "candidate": [
            "cliprdr.c||cliprdr.c",
            "cssp.c||cssp.c",
            "lspci.c||lspci.c",
            "mcs.c||mcs.c",
            "rdp.c||rdp.c",
            "rdpdr.c||rdpdr.c",
            "seamless.c||seamless.c",
            "secure.c||secure.c",
            "stream.h||stream.h"
          ]
        }
      },
      "candidate_diff": {
        "channels.c||channels.c": [
          "File: channels.c -> channels.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:   s = sec_init(g_encryption ? SEC_ENCRYPT : 0, thislength + 8);",
          "135:   out_uint32_le(s, length);",
          "136:   out_uint32_le(s, flags);",
          "138:   s_mark_end(s);",
          "139:   sec_send_to_channel(s, g_encryption ? SEC_ENCRYPT : 0, channel->mcs_id);",
          "",
          "[Removed Lines]",
          "137:   out_uint8p(s, data, thislength);",
          "",
          "[Added Lines]",
          "137:   out_uint8a(s, data, thislength);",
          "",
          "---------------"
        ],
        "cliprdr.c||cliprdr.c": [
          "File: cliprdr.c -> cliprdr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:  out_uint16_le(s, type);",
          "49:  out_uint16_le(s, status);",
          "50:  out_uint32_le(s, length);",
          "53:  s_mark_end(s);",
          "54:  channel_send(s, cliprdr_channel);",
          "",
          "[Removed Lines]",
          "51:  out_uint8p(s, data, length);",
          "",
          "[Added Lines]",
          "51:  out_uint8a(s, data, length);",
          "",
          "---------------"
        ],
        "cssp.c||cssp.c": [
          "File: cssp.c -> cssp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:  out = s_alloc(size);",
          "40:  ber_out_header(out, tagval, s_length(in));",
          "42:  s_mark_end(out);",
          "44:  return out;",
          "",
          "[Removed Lines]",
          "41:  out_uint8p(out, in->data, s_length(in));",
          "",
          "[Added Lines]",
          "41:  out_uint8a(out, in->data, s_length(in));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "171:  out->data = out->p = xmalloc(outbuf.length);",
          "172:  out->size = outbuf.length;",
          "174:  s_mark_end(out);",
          "176:  gss_release_buffer(&minor_status, &outbuf);",
          "",
          "[Removed Lines]",
          "173:  out_uint8p(out, outbuf.value, outbuf.length);",
          "",
          "[Added Lines]",
          "173:  out_uint8a(out, outbuf.value, outbuf.length);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "202:  out->data = out->p = xmalloc(outbuf.length);",
          "203:  out->size = outbuf.length;",
          "205:  s_mark_end(out);",
          "207:  gss_release_buffer(&minor_status, &outbuf);",
          "",
          "[Removed Lines]",
          "204:  out_uint8p(out, outbuf.value, outbuf.length);",
          "",
          "[Added Lines]",
          "204:  out_uint8a(out, outbuf.value, outbuf.length);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "229:  h2 = ber_wrap_hdr_data(BER_TAG_OCTET_STRING, &tmp);",
          "230:  h1 = ber_wrap_hdr_data(BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 0, h2);",
          "231:  s_realloc(&message, s_length(&message) + s_length(h1));",
          "233:  s_mark_end(&message);",
          "234:  s_free(h2);",
          "235:  s_free(h1);",
          "",
          "[Removed Lines]",
          "232:  out_uint8p(&message, h1->data, s_length(h1));",
          "",
          "[Added Lines]",
          "232:  out_uint8a(&message, h1->data, s_length(h1));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "242:  h2 = ber_wrap_hdr_data(BER_TAG_OCTET_STRING, &tmp);",
          "243:  h1 = ber_wrap_hdr_data(BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 1, h2);",
          "244:  s_realloc(&message, s_length(&message) + s_length(h1));",
          "246:  s_mark_end(&message);",
          "247:  s_free(h2);",
          "248:  s_free(h1);",
          "",
          "[Removed Lines]",
          "245:  out_uint8p(&message, h1->data, s_length(h1));",
          "",
          "[Added Lines]",
          "245:  out_uint8a(&message, h1->data, s_length(h1));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "254:  h2 = ber_wrap_hdr_data(BER_TAG_OCTET_STRING, &tmp);",
          "255:  h1 = ber_wrap_hdr_data(BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 2, h2);",
          "256:  s_realloc(&message, s_length(&message) + s_length(h1));",
          "258:  s_mark_end(&message);",
          "259:  s_free(h2);",
          "260:  s_free(h1);",
          "",
          "[Removed Lines]",
          "257:  out_uint8p(&message, h1->data, s_length(h1));",
          "",
          "[Added Lines]",
          "257:  out_uint8a(&message, h1->data, s_length(h1));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "290:  h2 = ber_wrap_hdr_data(BER_TAG_INTEGER, &tmp);",
          "291:  h1 = ber_wrap_hdr_data(BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 0, h2);",
          "292:  s_realloc(&message, s_length(&message) + s_length(h1));",
          "294:  s_mark_end(&message);",
          "295:  s_free(h2);",
          "296:  s_free(h1);",
          "",
          "[Removed Lines]",
          "293:  out_uint8p(&message, h1->data, s_length(h1));",
          "",
          "[Added Lines]",
          "293:  out_uint8a(&message, h1->data, s_length(h1));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "304:   h2 = ber_wrap_hdr_data(BER_TAG_OCTET_STRING, &tmp);",
          "305:   h1 = ber_wrap_hdr_data(BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 1, h2);",
          "306:   s_realloc(&message, s_length(&message) + s_length(h1));",
          "308:   s_mark_end(&message);",
          "309:   s_free(h2);",
          "310:   s_free(h1);",
          "",
          "[Removed Lines]",
          "307:   out_uint8p(&message, h1->data, s_length(h1));",
          "",
          "[Added Lines]",
          "307:   out_uint8a(&message, h1->data, s_length(h1));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "319:   h2 = ber_wrap_hdr_data(BER_TAG_OCTET_STRING, &tmp);",
          "320:   h1 = ber_wrap_hdr_data(BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 2, h2);",
          "321:   s_realloc(&message, s_length(&message) + s_length(h1));",
          "323:   s_mark_end(&message);",
          "324:   s_free(h2);",
          "325:   s_free(h1);",
          "",
          "[Removed Lines]",
          "322:   out_uint8p(&message, h1->data, s_length(h1));",
          "",
          "[Added Lines]",
          "322:   out_uint8a(&message, h1->data, s_length(h1));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "334:   h2 = ber_wrap_hdr_data(BER_TAG_OCTET_STRING, &tmp);",
          "335:   h1 = ber_wrap_hdr_data(BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 3, h2);",
          "336:   s_realloc(&message, s_length(&message) + s_length(h1));",
          "338:   s_mark_end(&message);",
          "339:   s_free(h2);",
          "340:   s_free(h1);",
          "",
          "[Removed Lines]",
          "337:   out_uint8p(&message, h1->data, s_length(h1));",
          "",
          "[Added Lines]",
          "337:   out_uint8a(&message, h1->data, s_length(h1));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "349:   h2 = ber_wrap_hdr_data(BER_TAG_OCTET_STRING, &tmp);",
          "350:   h1 = ber_wrap_hdr_data(BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 4, h2);",
          "351:   s_realloc(&message, s_length(&message) + s_length(h1));",
          "353:   s_mark_end(&message);",
          "354:   s_free(h2);",
          "355:   s_free(h1);",
          "",
          "[Removed Lines]",
          "352:   out_uint8p(&message, h1->data, s_length(h1));",
          "",
          "[Added Lines]",
          "352:   out_uint8a(&message, h1->data, s_length(h1));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "382:  h2 = ber_wrap_hdr_data(BER_TAG_OCTET_STRING, &tmp);",
          "383:  h1 = ber_wrap_hdr_data(BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 0, h2);",
          "384:  s_realloc(&message, s_length(&message) + s_length(h1));",
          "386:  s_mark_end(&message);",
          "387:  s_free(h2);",
          "388:  s_free(h1);",
          "",
          "[Removed Lines]",
          "385:  out_uint8p(&message, h1->data, s_length(h1));",
          "",
          "[Added Lines]",
          "385:  out_uint8a(&message, h1->data, s_length(h1));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "392:       g_sc_container_name, g_sc_csp_name);",
          "393:  h1 = ber_wrap_hdr_data(BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 1, h2);",
          "394:  s_realloc(&message, s_length(&message) + s_length(h1));",
          "396:  s_mark_end(&message);",
          "397:  s_free(h2);",
          "398:  s_free(h1);",
          "",
          "[Removed Lines]",
          "395:  out_uint8p(&message, h1->data, s_length(h1));",
          "",
          "[Added Lines]",
          "395:  out_uint8a(&message, h1->data, s_length(h1));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "406:   h2 = ber_wrap_hdr_data(BER_TAG_OCTET_STRING, &tmp);",
          "407:   h1 = ber_wrap_hdr_data(BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 2, h2);",
          "408:   s_realloc(&message, s_length(&message) + s_length(h1));",
          "410:   s_mark_end(&message);",
          "411:   s_free(h2);",
          "412:   s_free(h1);",
          "",
          "[Removed Lines]",
          "409:   out_uint8p(&message, h1->data, s_length(h1));",
          "",
          "[Added Lines]",
          "409:   out_uint8a(&message, h1->data, s_length(h1));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "421:   h2 = ber_wrap_hdr_data(BER_TAG_OCTET_STRING, &tmp);",
          "422:   h1 = ber_wrap_hdr_data(BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 3, h2);",
          "423:   s_realloc(&message, s_length(&message) + s_length(h1));",
          "425:   s_mark_end(&message);",
          "426:   s_free(h2);",
          "427:   s_free(h1);",
          "",
          "[Removed Lines]",
          "424:   out_uint8p(&message, h1->data, s_length(h1));",
          "",
          "[Added Lines]",
          "424:   out_uint8a(&message, h1->data, s_length(h1));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "462:  h2 = ber_wrap_hdr_data(BER_TAG_INTEGER, &tmp);",
          "463:  h1 = ber_wrap_hdr_data(BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 0, h2);",
          "464:  s_realloc(&message, s_length(&message) + s_length(h1));",
          "466:  s_mark_end(&message);",
          "467:  s_free(h2);",
          "468:  s_free(h1);",
          "",
          "[Removed Lines]",
          "465:  out_uint8p(&message, h1->data, s_length(h1));",
          "",
          "[Added Lines]",
          "465:  out_uint8a(&message, h1->data, s_length(h1));",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "480:  h2 = ber_wrap_hdr_data(BER_TAG_OCTET_STRING, h3);",
          "481:  h1 = ber_wrap_hdr_data(BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 1, h2);",
          "482:  s_realloc(&message, s_length(&message) + s_length(h1));",
          "484:  s_mark_end(&message);",
          "485:  s_free(h3);",
          "486:  s_free(h2);",
          "",
          "[Removed Lines]",
          "483:  out_uint8p(&message, h1->data, s_length(h1));",
          "",
          "[Added Lines]",
          "483:  out_uint8a(&message, h1->data, s_length(h1));",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "516:  h2 = ber_wrap_hdr_data(BER_TAG_INTEGER, &tmp);",
          "517:  h1 = ber_wrap_hdr_data(BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 0, h2);",
          "518:  s_realloc(&message, s_length(&message) + s_length(h1));",
          "520:  s_mark_end(&message);",
          "521:  s_free(h2);",
          "522:  s_free(h1);",
          "",
          "[Removed Lines]",
          "519:  out_uint8p(&message, h1->data, s_length(h1));",
          "",
          "[Added Lines]",
          "519:  out_uint8a(&message, h1->data, s_length(h1));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "530:   h2 = ber_wrap_hdr_data(BER_TAG_SEQUENCE | BER_TAG_CONSTRUCTED, h3);",
          "531:   h1 = ber_wrap_hdr_data(BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 1, h2);",
          "532:   s_realloc(&message, s_length(&message) + s_length(h1));",
          "534:   s_mark_end(&message);",
          "535:   s_free(h5);",
          "536:   s_free(h4);",
          "",
          "[Removed Lines]",
          "533:   out_uint8p(&message, h1->data, s_length(h1));",
          "",
          "[Added Lines]",
          "533:   out_uint8a(&message, h1->data, s_length(h1));",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "546:   h1 = ber_wrap_hdr_data(BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 2, h2);",
          "548:   s_realloc(&message, s_length(&message) + s_length(h1));",
          "551:   s_free(h2);",
          "552:   s_free(h1);",
          "",
          "[Removed Lines]",
          "549:   out_uint8p(&message, h1->data, s_length(h1));",
          "",
          "[Added Lines]",
          "549:   out_uint8a(&message, h1->data, s_length(h1));",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "559:   h1 = ber_wrap_hdr_data(BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 3, h2);",
          "561:   s_realloc(&message, s_length(&message) + s_length(h1));",
          "563:   s_mark_end(&message);",
          "564:   s_free(h2);",
          "565:   s_free(h1);",
          "",
          "[Removed Lines]",
          "562:   out_uint8p(&message, h1->data, s_length(h1));",
          "",
          "[Added Lines]",
          "562:   out_uint8a(&message, h1->data, s_length(h1));",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "571:  h1 = ber_wrap_hdr_data(BER_TAG_SEQUENCE | BER_TAG_CONSTRUCTED, &message);",
          "572:  s = tcp_init(s_length(h1));",
          "574:  s_mark_end(s);",
          "575:  s_free(h1);",
          "",
          "[Removed Lines]",
          "573:  out_uint8p(s, h1->data, s_length(h1));",
          "",
          "[Added Lines]",
          "573:  out_uint8a(s, h1->data, s_length(h1));",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "665:   s_realloc(token, length);",
          "666:   s_reset(token);",
          "668:   s_mark_end(token);",
          "669:  }",
          "",
          "[Removed Lines]",
          "667:   out_uint8p(token, s->p, length);",
          "",
          "[Added Lines]",
          "667:   out_uint8a(token, s->p, length);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "785:     s_realloc(&token, output_tok.length);",
          "786:    s_reset(&token);",
          "789:    s_mark_end(&token);",
          "791:    if (!cssp_send_tsrequest(&token, NULL, NULL))",
          "",
          "[Removed Lines]",
          "788:    out_uint8p(&token, output_tok.value, output_tok.length);",
          "",
          "[Added Lines]",
          "788:    out_uint8a(&token, output_tok.value, output_tok.length);",
          "",
          "---------------"
        ],
        "iso.c||iso.c": [
          "File: iso.c -> iso.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:  out_uint8(s, 0x0a);",
          "",
          "[Removed Lines]",
          "81:  out_uint8p(s, \"Cookie: mstshash=\", strlen(\"Cookie: mstshash=\"));",
          "82:  out_uint8p(s, username, strlen(username));",
          "",
          "[Added Lines]",
          "81:  out_uint8a(s, \"Cookie: mstshash=\", strlen(\"Cookie: mstshash=\"));",
          "82:  out_uint8a(s, username, strlen(username));",
          "",
          "---------------"
        ],
        "licence.c||licence.c": [
          "File: licence.c -> licence.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:  out_uint16(s, 0);",
          "80:  out_uint16_le(s, 0x0201);",
          "83:  out_uint16_le(s, 2);",
          "84:  out_uint16_le(s, (SEC_MODULUS_SIZE + SEC_PADDING_SIZE));",
          "86:  out_uint8s(s, SEC_PADDING_SIZE);",
          "88:  out_uint16_le(s, 1);",
          "89:  out_uint16_le(s, licence_size);",
          "92:  out_uint16_le(s, 1);",
          "93:  out_uint16_le(s, LICENCE_HWID_SIZE);",
          "98:  s_mark_end(s);",
          "99:  sec_send(s, sec_flags);",
          "",
          "[Removed Lines]",
          "82:  out_uint8p(s, client_random, SEC_RANDOM_SIZE);",
          "85:  out_uint8p(s, rsa_data, SEC_MODULUS_SIZE);",
          "90:  out_uint8p(s, licence_data, licence_size);",
          "94:  out_uint8p(s, hwid, LICENCE_HWID_SIZE);",
          "96:  out_uint8p(s, signature, LICENCE_SIGNATURE_SIZE);",
          "",
          "[Added Lines]",
          "82:  out_uint8a(s, client_random, SEC_RANDOM_SIZE);",
          "85:  out_uint8a(s, rsa_data, SEC_MODULUS_SIZE);",
          "90:  out_uint8a(s, licence_data, licence_size);",
          "94:  out_uint8a(s, hwid, LICENCE_HWID_SIZE);",
          "96:  out_uint8a(s, signature, LICENCE_SIGNATURE_SIZE);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:  out_uint16(s, 0);",
          "121:  out_uint16_le(s, 0xff01);",
          "124:  out_uint16_le(s, 2);",
          "125:  out_uint16_le(s, (SEC_MODULUS_SIZE + SEC_PADDING_SIZE));",
          "127:  out_uint8s(s, SEC_PADDING_SIZE);",
          "130:  out_uint16_le(s, BB_CLIENT_USER_NAME_BLOB);",
          "131:  out_uint16_le(s, userlen);",
          "135:  out_uint16_le(s, BB_CLIENT_MACHINE_NAME_BLOB);",
          "136:  out_uint16_le(s, hostlen);",
          "139:  s_mark_end(s);",
          "140:  sec_send(s, sec_flags);",
          "",
          "[Removed Lines]",
          "123:  out_uint8p(s, client_random, SEC_RANDOM_SIZE);",
          "126:  out_uint8p(s, rsa_data, SEC_MODULUS_SIZE);",
          "132:  out_uint8p(s, user, userlen);",
          "137:  out_uint8p(s, host, hostlen);",
          "",
          "[Added Lines]",
          "123:  out_uint8a(s, client_random, SEC_RANDOM_SIZE);",
          "126:  out_uint8a(s, rsa_data, SEC_MODULUS_SIZE);",
          "132:  out_uint8a(s, user, userlen);",
          "137:  out_uint8a(s, host, hostlen);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "205:  out_uint16_le(s, 1);",
          "206:  out_uint16_le(s, LICENCE_TOKEN_SIZE);",
          "209:  out_uint16_le(s, 1);",
          "210:  out_uint16_le(s, LICENCE_HWID_SIZE);",
          "215:  s_mark_end(s);",
          "216:  sec_send(s, sec_flags);",
          "",
          "[Removed Lines]",
          "207:  out_uint8p(s, token, LICENCE_TOKEN_SIZE);",
          "211:  out_uint8p(s, crypt_hwid, LICENCE_HWID_SIZE);",
          "213:  out_uint8p(s, signature, LICENCE_SIGNATURE_SIZE);",
          "",
          "[Added Lines]",
          "207:  out_uint8a(s, token, LICENCE_TOKEN_SIZE);",
          "211:  out_uint8a(s, crypt_hwid, LICENCE_HWID_SIZE);",
          "213:  out_uint8a(s, signature, LICENCE_SIGNATURE_SIZE);",
          "",
          "---------------"
        ],
        "lspci.c||lspci.c": [
          "File: lspci.c -> lspci.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "164:  len = strlen(output);",
          "165:  s = channel_init(lspci_channel, len);",
          "167:  channel_send(s, lspci_channel);",
          "168: }",
          "",
          "[Removed Lines]",
          "166:  out_uint8p(s, output, len) s_mark_end(s);",
          "",
          "[Added Lines]",
          "166:  out_uint8a(s, output, len) s_mark_end(s);",
          "",
          "---------------"
        ],
        "mcs.c||mcs.c": [
          "File: mcs.c -> mcs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:  ber_out_header(s, BER_TAG_OCTET_STRING, datalen);",
          "87:  s_mark_end(s);",
          "88:  iso_send(s);",
          "",
          "[Removed Lines]",
          "85:  out_uint8p(s, mcs_data->data, datalen);",
          "",
          "[Added Lines]",
          "85:  out_uint8a(s, mcs_data->data, datalen);",
          "",
          "---------------"
        ],
        "rdp.c||rdp.c": [
          "File: rdp.c -> rdp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "470:   if (g_redirect == True && 0 < g_redirect_cookie_len)",
          "471:   {",
          "473:   }",
          "474:   else",
          "475:   {",
          "",
          "[Removed Lines]",
          "472:    out_uint8p(s, g_redirect_cookie, g_redirect_cookie_len);",
          "",
          "[Added Lines]",
          "472:    out_uint8a(s, g_redirect_cookie, g_redirect_cookie_len);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1096:  out_uint16_le(s, sizeof(RDP_SOURCE));",
          "1097:  out_uint16_le(s, caplen);",
          "",
          "[Removed Lines]",
          "1099:  out_uint8p(s, RDP_SOURCE, sizeof(RDP_SOURCE));",
          "",
          "[Added Lines]",
          "1099:  out_uint8a(s, RDP_SOURCE, sizeof(RDP_SOURCE));",
          "",
          "---------------"
        ],
        "rdp5.c||rdp5.c": [
          "File: rdp5.c -> rdp5.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "140:     s_reset(assembled[code]);",
          "141:    }",
          "145:    if (frag == FASTPATH_FRAGMENT_LAST)",
          "146:    {",
          "",
          "[Removed Lines]",
          "143:    out_uint8p(assembled[code], ts->p, length);",
          "",
          "[Added Lines]",
          "143:    out_uint8a(assembled[code], ts->p, length);",
          "",
          "---------------"
        ],
        "rdpdr.c||rdpdr.c": [
          "File: rdpdr.c -> rdpdr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "385:  out_uint32_le(s, status);",
          "386:  out_uint32_le(s, result);",
          "387:  if (length)",
          "389:  s_mark_end(s);",
          "391:  logger(Protocol, Debug, \"rdpdr_send_completion()\");",
          "",
          "[Removed Lines]",
          "388:   out_uint8p(s, buffer, length);",
          "",
          "[Added Lines]",
          "388:   out_uint8a(s, buffer, length);",
          "",
          "---------------"
        ],
        "scard.c||scard.c": [
          "File: scard.c -> scard.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "548:  {",
          "549:   if (header < length)",
          "550:    length = header;",
          "552:   outRepos(out, length);",
          "553:  }",
          "554: }",
          "",
          "[Removed Lines]",
          "551:   out_uint8p(out, buffer, length);",
          "",
          "[Added Lines]",
          "551:   out_uint8a(out, buffer, length);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "624:     buffer[2 * i] = reader[i];",
          "625:    buffer[2 * i + 1] = '\\0';",
          "626:   }",
          "628:  }",
          "629:  else",
          "630:  {",
          "632:  }",
          "634:  SC_xfreeallmemory(&lcHandle);",
          "",
          "[Removed Lines]",
          "627:   out_uint8p(out, buffer, 2 * dataLength);",
          "631:   out_uint8p(out, reader, dataLength);",
          "",
          "[Added Lines]",
          "627:   out_uint8a(out, buffer, 2 * dataLength);",
          "631:   out_uint8a(out, reader, dataLength);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1255:   cur->dwEventState = swap32(cur->dwEventState);",
          "1256:   cur->cbAtr = swap32(cur->cbAtr);",
          "1259:       sizeof(SERVER_SCARD_READERSTATE_A) - 2 * sizeof(unsigned char *));",
          "1260:  }",
          "1261:  outForceAlignment(out, 8);",
          "",
          "[Removed Lines]",
          "1258:   out_uint8p(out, (void *) ((unsigned char **) cur + 2),",
          "",
          "[Added Lines]",
          "1258:   out_uint8a(out, (void *) ((unsigned char **) cur + 2),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1419:   rsCur->dwEventState = swap32(rsCur->dwEventState);",
          "1420:   rsCur->cbAtr = swap32(rsCur->cbAtr);",
          "1423:       sizeof(SCARD_READERSTATE) - 2 * sizeof(unsigned char *));",
          "1424:  }",
          "",
          "[Removed Lines]",
          "1422:   out_uint8p(out, (void *) ((unsigned char **) rsCur + 2),",
          "",
          "[Added Lines]",
          "1422:   out_uint8a(out, (void *) ((unsigned char **) rsCur + 2),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1795:   out_uint32_le(out, 0x00020000);",
          "1796:   out_uint32_le(out, dwState);",
          "1797:   out_uint32_le(out, dwProtocol);",
          "1799:   if (dwAtrLen < 32)",
          "1800:   {",
          "1801:    out_uint8s(out, 32 - dwAtrLen);",
          "",
          "[Removed Lines]",
          "1798:   out_uint8p(out, atr, dwAtrLen);",
          "",
          "[Added Lines]",
          "1798:   out_uint8a(out, atr, dwAtrLen);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1901:   out_uint32_le(out, dwAtrLen);",
          "1902:   out_uint32_le(out, 0x00000001);",
          "1903:   out_uint32_le(out, dwAtrLen);",
          "1905:   outRepos(out, dwAtrLen);",
          "1906:  }",
          "1907:  outForceAlignment(out, 8);",
          "",
          "[Removed Lines]",
          "1904:   out_uint8p(out, atr, dwAtrLen);",
          "",
          "[Added Lines]",
          "1904:   out_uint8a(out, atr, dwAtrLen);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2038:   }",
          "2039:   else",
          "2040:   {",
          "2042:   }",
          "2043:   outRepos(out, dwAttrLen);",
          "2044:   out_uint32_le(out, 0x00000000);",
          "",
          "[Removed Lines]",
          "2041:    out_uint8p(out, pbAttr, dwAttrLen);",
          "",
          "[Added Lines]",
          "2041:    out_uint8a(out, pbAttr, dwAttrLen);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2236:  out_uint32_le(out, nBytesReturned);",
          "2237:  if (nBytesReturned > 0)",
          "2238:  {",
          "2240:   outRepos(out, nBytesReturned);",
          "2241:  }",
          "",
          "[Removed Lines]",
          "2239:   out_uint8p(out, pOutBuffer, nBytesReturned);",
          "",
          "[Added Lines]",
          "2239:   out_uint8a(out, pOutBuffer, nBytesReturned);",
          "",
          "---------------"
        ],
        "seamless.c||seamless.c": [
          "File: seamless.c -> seamless.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "440:  len++;",
          "442:  s = channel_init(seamless_channel, len);",
          "445:  logger(Core, Debug, \"seamless_send(), sending '%s'\", buf);",
          "",
          "[Removed Lines]",
          "443:  out_uint8p(s, buf, len) s_mark_end(s);",
          "",
          "[Added Lines]",
          "443:  out_uint8a(s, buf, len) s_mark_end(s);",
          "",
          "---------------"
        ],
        "secure.c||secure.c": [
          "File: secure.c -> secure.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "384:  s = sec_init(flags, length + 4);",
          "386:  out_uint32_le(s, length);",
          "388:  out_uint8s(s, SEC_PADDING_SIZE);",
          "390:  s_mark_end(s);",
          "",
          "[Removed Lines]",
          "387:  out_uint8p(s, g_sec_crypted_random, g_server_public_key_len);",
          "",
          "[Added Lines]",
          "387:  out_uint8a(s, g_sec_crypted_random, g_server_public_key_len);",
          "",
          "---------------"
        ],
        "stream.h||stream.h": [
          "File: stream.h -> stream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "127: #endif",
          "129: #define in_uint8(s,v)  { s_assert_r(s, 1); v = *((s)->p++); }",
          "130: #define in_uint8p(s,v,n) { s_assert_r(s, n); v = (s)->p; (s)->p += n; }",
          "131: #define in_uint8a(s,v,n) { s_assert_r(s, n); memcpy(v,(s)->p,n); (s)->p += n; }",
          "132: #define in_uint8s(s,n)  { s_assert_r(s, n); (s)->p += n; }",
          "133: #define out_uint8(s,v)  { s_assert_w(s, 1); *((s)->p++) = v; }",
          "136: #define out_uint8s(s,n)  { s_assert_w(s, n); memset((s)->p,0,n); (s)->p += n; }",
          "139: #define next_be(s,v)  { s_assert_r(s, 1); v = ((v) << 8) + *((s)->p++); }",
          "",
          "[Removed Lines]",
          "134: #define out_uint8p(s,v,n) { s_assert_w(s, n); memcpy((s)->p,v,n); (s)->p += n; }",
          "135: #define out_uint8a(s,v,n) out_uint8p(s,v,n);",
          "137: #define out_stream(s, v)        out_uint8p(s, (v)->data, s_length((v)))",
          "",
          "[Added Lines]",
          "137: #define out_uint8p(s,v,n) { s_assert_w(s, n); v = (s)->p; (s)->p += n; }",
          "139: #define out_uint8a(s,v,n) { s_assert_w(s, n); memcpy((s)->p,v,n); (s)->p += n; }",
          "141: #define out_stream(s, v) out_uint8a(s, (v)->data, s_length((v)))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "90219aac4118a55536d940241f741687dacdeac8",
      "candidate_info": {
        "commit_hash": "90219aac4118a55536d940241f741687dacdeac8",
        "repo": "rdesktop/rdesktop",
        "commit_url": "https://github.com/rdesktop/rdesktop/commit/90219aac4118a55536d940241f741687dacdeac8",
        "files": [
          "stream.h"
        ],
        "message": "Add bounds checks to stream handling\n\nProtect against buffer overflow and overrun bugs in the protocol\nhandling.",
        "before_after_code_files": [
          "stream.h||stream.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "stream.h||stream.h"
          ],
          "candidate": [
            "stream.h||stream.h"
          ]
        }
      },
      "candidate_diff": {
        "stream.h||stream.h": [
          "File: stream.h -> stream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: #define s_push_layer(s,h,n) { (s)->h = (s)->p; (s)->p += n; }",
          "56: #define s_pop_layer(s,h) (s)->p = (s)->h;",
          "57: #define s_mark_end(s)  (s)->end = (s)->p;",
          "59: #define s_check_end(s)  ((s)->p == (s)->end)",
          "60: #define s_length(s)  ((s)->end - (s)->data)",
          "63: #if defined(L_ENDIAN) && !defined(NEED_ALIGN)",
          "70: #else",
          "73:     v += *((s)->p++) << 16; v += *((s)->p++) << 24; }",
          "75:     v += *((s)->p++) << 32; v += *((s)->p++) << 40; \\",
          "76:     v += *((s)->p++) << 48; v += *((s)->p++) << 56; }",
          "80: #endif",
          "83: #if defined(B_ENDIAN) && !defined(NEED_ALIGN)",
          "91: #define B_ENDIAN_PREFERRED",
          "92: #define in_uint16(s,v)  in_uint16_be(s,v)",
          "",
          "[Removed Lines]",
          "58: #define s_check_rem(s,n) (((s)->p <= (s)->end) && (n <= (s)->end - (s)->p))",
          "61: #define s_left(s)               ((s)->size - ((s)->p - (s)->data))",
          "64: #define in_uint16_le(s,v) { v = *(uint16 *)((s)->p); (s)->p += 2; }",
          "65: #define in_uint32_le(s,v) { v = *(uint32 *)((s)->p); (s)->p += 4; }",
          "66: #define in_uint64_le(s,v) { v = *(uint64 *)((s)->p); (s)->p += 8; }",
          "67: #define out_uint16_le(s,v) { *(uint16 *)((s)->p) = v; (s)->p += 2; }",
          "68: #define out_uint32_le(s,v) { *(uint32 *)((s)->p) = v; (s)->p += 4; }",
          "69: #define out_uint64_le(s,v) { *(uint64 *)((s)->p) = v; (s)->p += 8; }",
          "71: #define in_uint16_le(s,v) { v = *((s)->p++); v += *((s)->p++) << 8; }",
          "72: #define in_uint32_le(s,v) { in_uint16_le(s,v) \\",
          "74: #define in_uint64_le(s,v) { in_uint32_le(s,v) \\",
          "77: #define out_uint16_le(s,v) { *((s)->p++) = (v) & 0xff; *((s)->p++) = ((v) >> 8) & 0xff; }",
          "78: #define out_uint32_le(s,v) { out_uint16_le(s, (v) & 0xffff); out_uint16_le(s, ((v) >> 16) & 0xffff); }",
          "79: #define out_uint64_le(s,v) { out_uint32_le(s, (v) & 0xffffffff); out_uint32_le(s, ((v) >> 32) & 0xffffffff); }",
          "84: #define in_uint16_be(s,v) { v = *(uint16 *)((s)->p); (s)->p += 2; }",
          "85: #define in_uint32_be(s,v) { v = *(uint32 *)((s)->p); (s)->p += 4; }",
          "86: #define in_uint64_be(s,v) { v = *(uint64 *)((s)->p); (s)->p += 8; }",
          "87: #define out_uint16_be(s,v) { *(uint16 *)((s)->p) = v; (s)->p += 2; }",
          "88: #define out_uint32_be(s,v) { *(uint32 *)((s)->p) = v; (s)->p += 4; }",
          "89: #define out_uint64_be(s,v) { *(uint64 *)((s)->p) = v; (s)->p += 8; }",
          "",
          "[Added Lines]",
          "58: #define s_check_rem(s,n) (((s)->p <= (s)->end) && ((size_t)n <= (size_t)((s)->end - (s)->p)))",
          "61: #define s_left(s)  ((s)->size - (size_t)((s)->p - (s)->data))",
          "64: #define s_assert_r(s,n)  { if (!s_check_rem(s, n)) rdp_protocol_error( \"unexpected stream overrun\", s); }",
          "65: #define s_assert_w(s,n)  { if (s_left(s) < (size_t)n) { logger(Core, Error, \"%s:%d: %s(), %s\", __FILE__, __LINE__, __func__, \"unexpected stream overrun\"); exit(0); } }",
          "68: #define in_uint16_le(s,v) { s_assert_r(s, 2); v = *(uint16 *)((s)->p); (s)->p += 2; }",
          "69: #define in_uint32_le(s,v) { s_assert_r(s, 4); v = *(uint32 *)((s)->p); (s)->p += 4; }",
          "70: #define in_uint64_le(s,v) { s_assert_r(s, 8); v = *(uint64 *)((s)->p); (s)->p += 8; }",
          "71: #define out_uint16_le(s,v) { s_assert_w(s, 2); *(uint16 *)((s)->p) = v; (s)->p += 2; }",
          "72: #define out_uint32_le(s,v) { s_assert_w(s, 4); *(uint32 *)((s)->p) = v; (s)->p += 4; }",
          "73: #define out_uint64_le(s,v) { s_assert_w(s, 8); *(uint64 *)((s)->p) = v; (s)->p += 8; }",
          "75: #define in_uint16_le(s,v) { s_assert_r(s, 2); v = *((s)->p++); v += *((s)->p++) << 8; }",
          "76: #define in_uint32_le(s,v) { s_assert_r(s, 4); in_uint16_le(s,v) \\",
          "78: #define in_uint64_le(s,v) { s_assert_r(s, 8); in_uint32_le(s,v) \\",
          "81: #define out_uint16_le(s,v) { s_assert_w(s, 2); *((s)->p++) = (v) & 0xff; *((s)->p++) = ((v) >> 8) & 0xff; }",
          "82: #define out_uint32_le(s,v) { s_assert_w(s, 4); out_uint16_le(s, (v) & 0xffff); out_uint16_le(s, ((v) >> 16) & 0xffff); }",
          "83: #define out_uint64_le(s,v) { s_assert_w(s, 8); out_uint32_le(s, (v) & 0xffffffff); out_uint32_le(s, ((v) >> 32) & 0xffffffff); }",
          "88: #define in_uint16_be(s,v) { s_assert_r(s, 2); v = *(uint16 *)((s)->p); (s)->p += 2; }",
          "89: #define in_uint32_be(s,v) { s_assert_r(s, 4); v = *(uint32 *)((s)->p); (s)->p += 4; }",
          "90: #define in_uint64_be(s,v) { s_assert_r(s, 8); v = *(uint64 *)((s)->p); (s)->p += 8; }",
          "91: #define out_uint16_be(s,v) { s_assert_w(s, 2); *(uint16 *)((s)->p) = v; (s)->p += 2; }",
          "92: #define out_uint32_be(s,v) { s_assert_w(s, 4); *(uint32 *)((s)->p) = v; (s)->p += 4; }",
          "93: #define out_uint64_be(s,v) { s_assert_w(s, 8); *(uint64 *)((s)->p) = v; (s)->p += 8; }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98: #define out_uint64(s,v)  out_uint64_be(s,v)",
          "100: #else",
          "107: #endif",
          "109: #ifndef B_ENDIAN_PREFERRED",
          "",
          "[Removed Lines]",
          "101: #define in_uint16_be(s,v) { v = *((s)->p++); next_be(s,v); }",
          "102: #define in_uint32_be(s,v) { in_uint16_be(s,v); next_be(s,v); next_be(s,v); }",
          "103: #define in_uint64_be(s,v) { in_uint32_be(s,v); next_be(s,v); next_be(s,v); next_be(s,v); next_be(s,v); }",
          "104: #define out_uint16_be(s,v) { *((s)->p++) = ((v) >> 8) & 0xff; *((s)->p++) = (v) & 0xff; }",
          "105: #define out_uint32_be(s,v) { out_uint16_be(s, ((v) >> 16) & 0xffff); out_uint16_be(s, (v) & 0xffff); }",
          "106: #define out_uint64_be(s,v) { out_uint32_be(s, ((v) >> 32) & 0xffffffff); out_uint32_be(s, (v) & 0xffffffff); }",
          "",
          "[Added Lines]",
          "105: #define in_uint16_be(s,v) { s_assert_r(s, 2); v = *((s)->p++); next_be(s,v); }",
          "106: #define in_uint32_be(s,v) { s_assert_r(s, 4); in_uint16_be(s,v); next_be(s,v); next_be(s,v); }",
          "107: #define in_uint64_be(s,v) { s_assert_r(s, 8); in_uint32_be(s,v); next_be(s,v); next_be(s,v); next_be(s,v); next_be(s,v); }",
          "108: #define out_uint16_be(s,v) { s_assert_w(s, 2); *((s)->p++) = ((v) >> 8) & 0xff; *((s)->p++) = (v) & 0xff; }",
          "109: #define out_uint32_be(s,v) { s_assert_w(s, 4); out_uint16_be(s, ((v) >> 16) & 0xffff); out_uint16_be(s, (v) & 0xffff); }",
          "110: #define out_uint64_be(s,v) { s_assert_w(s, 8); out_uint32_be(s, ((v) >> 32) & 0xffffffff); out_uint32_be(s, (v) & 0xffffffff); }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "115: #define out_uint64(s,v)  out_uint64_le(s,v)",
          "116: #endif",
          "122: #define in_skip(s,n)  in_uint8s(s,n)",
          "125: #define out_uint8a(s,v,n) out_uint8p(s,v,n);",
          "127: #define out_stream(s, v)        out_uint8p(s, (v)->data, s_length((v)))",
          "",
          "[Removed Lines]",
          "118: #define in_uint8(s,v)  v = *((s)->p++);",
          "119: #define in_uint8p(s,v,n) { v = (s)->p; (s)->p += n; }",
          "120: #define in_uint8a(s,v,n) { memcpy(v,(s)->p,n); (s)->p += n; }",
          "121: #define in_uint8s(s,n)  (s)->p += n;",
          "123: #define out_uint8(s,v)  *((s)->p++) = v;",
          "124: #define out_uint8p(s,v,n) { memcpy((s)->p,v,n); (s)->p += n; }",
          "126: #define out_uint8s(s,n)  { memset((s)->p,0,n); (s)->p += n; }",
          "129: #define next_be(s,v)  v = ((v) << 8) + *((s)->p++);",
          "",
          "[Added Lines]",
          "122: #define in_uint8(s,v)  { s_assert_r(s, 1); v = *((s)->p++); }",
          "123: #define in_uint8p(s,v,n) { s_assert_r(s, n); v = (s)->p; (s)->p += n; }",
          "124: #define in_uint8a(s,v,n) { s_assert_r(s, n); memcpy(v,(s)->p,n); (s)->p += n; }",
          "125: #define in_uint8s(s,n)  { s_assert_r(s, n); (s)->p += n; }",
          "127: #define out_uint8(s,v)  { s_assert_w(s, 1); *((s)->p++) = v; }",
          "128: #define out_uint8p(s,v,n) { s_assert_w(s, n); memcpy((s)->p,v,n); (s)->p += n; }",
          "130: #define out_uint8s(s,n)  { s_assert_w(s, n); memset((s)->p,0,n); (s)->p += n; }",
          "133: #define next_be(s,v)  { s_assert_r(s, 1); v = ((v) << 8) + *((s)->p++); }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "58d8f78eea62f6a200bdeb89491b93df4f2e80ff",
      "candidate_info": {
        "commit_hash": "58d8f78eea62f6a200bdeb89491b93df4f2e80ff",
        "repo": "rdesktop/rdesktop",
        "commit_url": "https://github.com/rdesktop/rdesktop/commit/58d8f78eea62f6a200bdeb89491b93df4f2e80ff",
        "files": [
          "mcs.c",
          "rdp.c",
          "secure.c"
        ],
        "message": "Add lots of protocol debug logging\n\nSigned-off-by: Henrik Andersson <hean01@cendio.com>\nSigned-off-by: Karl Mikaelsson <derfian@cendio.se>",
        "before_after_code_files": [
          "mcs.c||mcs.c",
          "rdp.c||rdp.c",
          "secure.c||secure.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mcs.c||mcs.c",
            "rdp.c||rdp.c",
            "secure.c||secure.c"
          ],
          "candidate": [
            "mcs.c||mcs.c",
            "rdp.c||rdp.c",
            "secure.c||secure.c"
          ]
        }
      },
      "candidate_diff": {
        "mcs.c||mcs.c": [
          "File: mcs.c -> mcs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:  int datalen = mcs_data->end - mcs_data->data;",
          "60:  int length = 9 + 3 * 34 + 4 + datalen;",
          "61:  STREAM s;",
          "63:  s = iso_init(length + 5);",
          "65:  ber_out_header(s, MCS_CONNECT_INITIAL, length);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:  logger(Protocol, Debug, \"%s()\", __func__);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:  uint8 result;",
          "91:  int length;",
          "92:  STREAM s;",
          "94:  s = iso_recv(NULL);",
          "95:  if (s == NULL)",
          "96:   return False;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93:  logger(Protocol, Debug, \"%s()\", __func__);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "131: mcs_send_edrq(void)",
          "132: {",
          "133:  STREAM s;",
          "135:  s = iso_init(5);",
          "137:  out_uint8(s, (MCS_EDRQ << 2));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134:  logger(Protocol, Debug, \"%s()\", __func__);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "147: mcs_send_aurq(void)",
          "148: {",
          "149:  STREAM s;",
          "151:  s = iso_init(1);",
          "153:  out_uint8(s, (MCS_AURQ << 2));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150:  logger(Protocol, Debug, \"%s()\", __func__);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "162: {",
          "163:  uint8 opcode, result;",
          "164:  STREAM s;",
          "166:  s = iso_recv(NULL);",
          "167:  if (s == NULL)",
          "168:   return False;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165:  logger(Protocol, Debug, \"%s()\", __func__);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "211: {",
          "212:  uint8 opcode, result;",
          "213:  STREAM s;",
          "215:  s = iso_recv(NULL);",
          "216:  if (s == NULL)",
          "217:   return False;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214:  logger(Protocol, Debug, \"%s()\", __func__);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "337: mcs_connect_start(char *server, char *username, char *domain, char *password,",
          "338:     RD_BOOL reconnect, uint32 * selected_protocol)",
          "339: {",
          "340:  return iso_connect(server, username, domain, password, reconnect, selected_protocol);",
          "341: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "340:  logger(Protocol, Debug, \"%s()\", __func__);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "345: {",
          "346:  unsigned int i;",
          "348:  mcs_send_connect_initial(mcs_data);",
          "349:  if (!mcs_recv_connect_response(mcs_data))",
          "350:   goto error;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "349:  logger(Protocol, Debug, \"%s()\", __func__);",
          "",
          "---------------"
        ],
        "rdp.c||rdp.c": [
          "File: rdp.c -> rdp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "513: {",
          "514:  STREAM s;",
          "516:  s = rdp_init_data(4);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "516:  logger(Protocol, Debug, \"%s()\", __func__);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "528: {",
          "529:  STREAM s;",
          "531:  s = rdp_init_data(16);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "533:  logger(Protocol, Debug, \"%s()\", __func__);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "550:  STREAM s;",
          "551:  static enum RDP_SUPPRESS_STATUS current_status = ALLOW_DISPLAY_UPDATES;",
          "553:  if (current_status == allowupdates)",
          "554:   return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "557:  logger(Protocol, Debug, \"%s()\", __func__);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "584:  HASH_KEY keylist[BMPCACHE2_NUM_PSTCELLS];",
          "585:  uint32 num_keys, offset, count, flags;",
          "587:  offset = 0;",
          "588:  num_keys = pstcache_enumerate(2, keylist);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "593:  logger(Protocol, Debug, \"%s()\", __func__);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "626: {",
          "627:  STREAM s;",
          "629:  s = rdp_init_data(8);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "637:  logger(Protocol, Debug, \"%s()\", __func__);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "752: rdp_out_bmpcache_caps(STREAM s)",
          "753: {",
          "754:  int Bpp;",
          "755:  out_uint16_le(s, RDP_CAPSET_BMPCACHE);",
          "756:  out_uint16_le(s, RDP_CAPLEN_BMPCACHE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "766:  logger(Protocol, Debug, \"%s()\", __func__);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "990:   RDP_CAPLEN_LARGE_POINTER +",
          "991:   4 /* w2k fix, sessionid */ ;",
          "993:  if (g_rdp_version >= RDP_V5)",
          "994:  {",
          "995:   caplen += RDP_CAPLEN_BMPCACHE2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1006:  logger(Protocol, Debug, \"%s()\", __func__);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1052: {",
          "1055:  in_uint8s(s, 10);",
          "1056:  in_uint16_le(s, pad2octetsB);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1070:  logger(Protocol, Debug, \"%s()\", __func__);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1065: {",
          "1066:  uint16 depth;",
          "1068:  in_uint16_le(s, depth);",
          "1069:  in_uint8s(s, 6);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1085:  logger(Protocol, Debug, \"%s()\", __func__);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1101:  uint8 *next, *start;",
          "1102:  uint16 ncapsets, capset_type, capset_length;",
          "1104:  start = s->p;",
          "1106:  in_uint16_le(s, ncapsets);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1123:  logger(Protocol, Debug, \"%s()\", __func__);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1213: void",
          "1214: process_colour_pointer_pdu(STREAM s)",
          "1215: {",
          "1216:  process_colour_pointer_common(s, 24);",
          "1217: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1237:  logger(Protocol, Debug, \"%s()\", __func__);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1221: process_new_pointer_pdu(STREAM s)",
          "1222: {",
          "1223:  int xor_bpp;",
          "1225:  in_uint16_le(s, xor_bpp);",
          "1226:  process_colour_pointer_common(s, xor_bpp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1247:  logger(Protocol, Debug, \"%s()\", __func__);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1231: process_cached_pointer_pdu(STREAM s)",
          "1232: {",
          "1233:  uint16 cache_idx;",
          "1235:  in_uint16_le(s, cache_idx);",
          "1236:  ui_set_cursor(cache_get_cursor(cache_idx));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1259:  logger(Protocol, Debug, \"%s()\", __func__);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1241: process_system_pointer_pdu(STREAM s)",
          "1242: {",
          "1243:  uint32 system_pointer_type;",
          "1244:  in_uint32_le(s, system_pointer_type);",
          "1246:  set_system_pointer(system_pointer_type);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1271:  logger(Protocol, Debug, \"%s()\", __func__);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1272:  uint16 message_type;",
          "1273:  uint16 x, y;",
          "1275:  in_uint16_le(s, message_type);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1304:  logger(Protocol, Debug, \"%s()\", __func__);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1316:  uint8 *data, *bmpdata;",
          "1317:  int i;",
          "1319:  in_uint16_le(s, num_updates);",
          "1321:  for (i = 0; i < num_updates; i++)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1350:  logger(Protocol, Debug, \"%s()\", __func__);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1422:  switch (update_type)",
          "1423:  {",
          "1424:   case RDP_UPDATE_ORDERS:",
          "1426:    in_uint16_le(s, count);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1458:    logger(Protocol, Debug, \"%s(), RDP_UPDATE_ORDERS\", __func__);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1429:    break;",
          "1431:   case RDP_UPDATE_BITMAP:",
          "1432:    process_bitmap_updates(s);",
          "1433:    break;",
          "1435:   case RDP_UPDATE_PALETTE:",
          "1436:    process_palette(s);",
          "1437:    break;",
          "1439:   case RDP_UPDATE_SYNCHRONIZE:",
          "1440:    break;",
          "1442:   default:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1467:    logger(Protocol, Debug, \"%s(), RDP_UPDATE_BITMAP\", __func__);",
          "1472:    logger(Protocol, Debug, \"%s(), RDP_UPDATE_PALETTE\", __func__);",
          "1477:    logger(Protocol, Debug, \"%s(), RDP_UPDATE_SYNCHRONIZE\", __func__);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1455:  uint32 len;",
          "1456:  uint32 version;",
          "1459:  in_uint32_le(s, fieldspresent);",
          "1460:  if (fieldspresent & LOGON_EX_AUTORECONNECTCOOKIE)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1496:  logger(Protocol, Debug, \"%s()\", __func__);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1626:  uint32 len;",
          "1627:  uint16 redirect_identifier;",
          "1630:  g_redirect = True;",
          "1631:  free(g_redirect_server);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1669:  logger(Protocol, Debug, \"%s()\", __func__);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1900: void",
          "1901: rdp_reset_state(void)",
          "1902: {",
          "1904:  g_rdp_shareid = 0;",
          "1905:  g_exit_mainloop = False;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1945:  logger(Protocol, Debug, \"%s()\", __func__);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1910: void",
          "1911: rdp_disconnect(void)",
          "1912: {",
          "1913:  sec_disconnect();",
          "1914: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1956:  logger(Protocol, Debug, \"%s()\", __func__);",
          "",
          "---------------"
        ],
        "secure.c||secure.c": [
          "File: secure.c -> secure.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "399:  uint16 colorsupport = RNS_UD_24BPP_SUPPORT | RNS_UD_16BPP_SUPPORT | RNS_UD_32BPP_SUPPORT;",
          "400:  uint32 physwidth, physheight, desktopscale, devicescale;",
          "402:  if (g_rdp_version >= RDP_V5)",
          "403:   rdpversion = RDP_50;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "402:  logger(Protocol, Debug, \"%s()\", __func__);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "571:  uint16 tag, length;",
          "572:  uint8 *next_tag, *end;",
          "576:  if (crypt_level == 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "576:  logger(Protocol, Debug, \"%s()\", __func__);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "755:  uint8 exponent[SEC_EXPONENT_SIZE];",
          "756:  uint32 rc4_key_size;",
          "758:  memset(modulus, 0, sizeof(modulus));",
          "759:  memset(exponent, 0, sizeof(exponent));",
          "760:  if (!sec_parse_crypt_info(s, &rc4_key_size, &server_random, modulus, exponent))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "762:  logger(Protocol, Debug, \"%s()\", __func__);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "795:  in_uint8(s, len);",
          "796:  if (len & 0x80)",
          "797:   in_uint8(s, len);",
          "799:  while (s->p < s->end)",
          "800:  {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "804:  logger(Protocol, Debug, \"%s()\", __func__);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "809:   switch (tag)",
          "810:   {",
          "811:    case SEC_TAG_SRV_INFO:",
          "812:     sec_process_srv_info(s);",
          "813:     break;",
          "815:    case SEC_TAG_SRV_CRYPT:",
          "816:     sec_process_crypt_info(s);",
          "817:     break;",
          "819:    case SEC_TAG_SRV_CHANNELS:",
          "821:        use it to map RDP5 channels to MCS",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "819:     logger(Protocol, Debug, \"%s(), SEC_TAG_SRV_INFO\", __func__);",
          "824:     logger(Protocol, Debug, \"%s(), SEC_TAG_SRV_CRYPT\", __func__);",
          "829:     logger(Protocol, Debug, \"%s(), SEC_TAG_SRV_CHANNELS\", __func__);",
          "",
          "---------------"
        ]
      }
    }
  ]
}