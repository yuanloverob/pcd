{
  "cve_id": "CVE-2021-41864",
  "cve_desc": "prealloc_elems_and_freelist in kernel/bpf/stackmap.c in the Linux kernel before 5.14.12 allows unprivileged users to trigger an eBPF multiplication integer overflow with a resultant out-of-bounds write.",
  "repo": "torvalds/linux",
  "patch_hash": "30e29a9a2bc6a4888335a6ede968b75cd329657a",
  "patch_info": {
    "commit_hash": "30e29a9a2bc6a4888335a6ede968b75cd329657a",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/30e29a9a2bc6a4888335a6ede968b75cd329657a",
    "files": [
      "kernel/bpf/stackmap.c"
    ],
    "message": "bpf: Fix integer overflow in prealloc_elems_and_freelist()\n\nIn prealloc_elems_and_freelist(), the multiplication to calculate the\nsize passed to bpf_map_area_alloc() could lead to an integer overflow.\nAs a result, out-of-bounds write could occur in pcpu_freelist_populate()\nas reported by KASAN:\n\n[...]\n[   16.968613] BUG: KASAN: slab-out-of-bounds in pcpu_freelist_populate+0xd9/0x100\n[   16.969408] Write of size 8 at addr ffff888104fc6ea0 by task crash/78\n[   16.970038]\n[   16.970195] CPU: 0 PID: 78 Comm: crash Not tainted 5.15.0-rc2+ #1\n[   16.970878] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.13.0-1ubuntu1.1 04/01/2014\n[   16.972026] Call Trace:\n[   16.972306]  dump_stack_lvl+0x34/0x44\n[   16.972687]  print_address_description.constprop.0+0x21/0x140\n[   16.973297]  ? pcpu_freelist_populate+0xd9/0x100\n[   16.973777]  ? pcpu_freelist_populate+0xd9/0x100\n[   16.974257]  kasan_report.cold+0x7f/0x11b\n[   16.974681]  ? pcpu_freelist_populate+0xd9/0x100\n[   16.975190]  pcpu_freelist_populate+0xd9/0x100\n[   16.975669]  stack_map_alloc+0x209/0x2a0\n[   16.976106]  __sys_bpf+0xd83/0x2ce0\n[...]\n\nThe possibility of this overflow was originally discussed in [0], but\nwas overlooked.\n\nFix the integer overflow by changing elem_size to u64 from u32.\n\n  [0] https://lore.kernel.org/bpf/728b238e-a481-eb50-98e9-b0f430ab01e7@gmail.com/\n\nFixes: 557c0c6e7df8 (\"bpf: convert stackmap to pre-allocation\")\nSigned-off-by: Tatsuhiko Yasumatsu <th.yasumatsu@gmail.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nLink: https://lore.kernel.org/bpf/20210930135545.173698-1-th.yasumatsu@gmail.com",
    "before_after_code_files": [
      "kernel/bpf/stackmap.c||kernel/bpf/stackmap.c"
    ]
  },
  "patch_diff": {
    "kernel/bpf/stackmap.c||kernel/bpf/stackmap.c": [
      "File: kernel/bpf/stackmap.c -> kernel/bpf/stackmap.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "64: static int prealloc_elems_and_freelist(struct bpf_stack_map *smap)",
      "65: {",
      "67:  int err;",
      "69:  smap->elems = bpf_map_area_alloc(elem_size * smap->map.max_entries,",
      "",
      "[Removed Lines]",
      "66:  u32 elem_size = sizeof(struct stack_map_bucket) + smap->map.value_size;",
      "",
      "[Added Lines]",
      "66:  u64 elem_size = sizeof(struct stack_map_bucket) +",
      "67:    (u64)smap->map.value_size;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bb9464e08309f6befe80866f5be51778ca355ee9",
      "candidate_info": {
        "commit_hash": "bb9464e08309f6befe80866f5be51778ca355ee9",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/bb9464e08309f6befe80866f5be51778ca355ee9",
        "files": [
          "fs/ext4/super.c"
        ],
        "message": "ext4: flush s_error_work before journal destroy in ext4_fill_super\n\nThe error path in ext4_fill_super forget to flush s_error_work before\njournal destroy, and it may trigger the follow bug since\nflush_stashed_error_work can run concurrently with journal destroy\nwithout any protection for sbi->s_journal.\n\n[32031.740193] EXT4-fs (loop66): get root inode failed\n[32031.740484] EXT4-fs (loop66): mount failed\n[32031.759805] ------------[ cut here ]------------\n[32031.759807] kernel BUG at fs/jbd2/transaction.c:373!\n[32031.760075] invalid opcode: 0000 [#1] SMP PTI\n[32031.760336] CPU: 5 PID: 1029268 Comm: kworker/5:1 Kdump: loaded\n4.18.0\n[32031.765112] Call Trace:\n[32031.765375]  ? __switch_to_asm+0x35/0x70\n[32031.765635]  ? __switch_to_asm+0x41/0x70\n[32031.765893]  ? __switch_to_asm+0x35/0x70\n[32031.766148]  ? __switch_to_asm+0x41/0x70\n[32031.766405]  ? _cond_resched+0x15/0x40\n[32031.766665]  jbd2__journal_start+0xf1/0x1f0 [jbd2]\n[32031.766934]  jbd2_journal_start+0x19/0x20 [jbd2]\n[32031.767218]  flush_stashed_error_work+0x30/0x90 [ext4]\n[32031.767487]  process_one_work+0x195/0x390\n[32031.767747]  worker_thread+0x30/0x390\n[32031.768007]  ? process_one_work+0x390/0x390\n[32031.768265]  kthread+0x10d/0x130\n[32031.768521]  ? kthread_flush_work_fn+0x10/0x10\n[32031.768778]  ret_from_fork+0x35/0x40\n\nstatic int start_this_handle(...)\n    BUG_ON(journal->j_flags & JBD2_UNMOUNT); <---- Trigger this\n\nBesides, after we enable fast commit, ext4_fc_replay can add work to\ns_error_work but return success, so the latter journal destroy in\next4_load_journal can trigger this problem too.\n\nFix this problem with two steps:\n1. Call ext4_commit_super directly in ext4_handle_error for the case\n   that called from ext4_fc_replay\n2. Since it's hard to pair the init and flush for s_error_work, we'd\n   better add a extras flush_work before journal destroy in\n   ext4_fill_super\n\nBesides, this patch will call ext4_commit_super in ext4_handle_error for\nany nojournal case too. But it seems safe since the reason we call\nschedule_work was that we should save error info to sb through journal\nif available. Conversely, for the nojournal case, it seems useless delay\ncommit superblock to s_error_work.\n\nFixes: c92dc856848f (\"ext4: defer saving error info from atomic context\")\nFixes: 2d01ddc86606 (\"ext4: save error info to sb through journal if available\")\nCc: stable@kernel.org\nSigned-off-by: yangerkun <yangerkun@huawei.com>\nReviewed-by: Jan Kara <jack@suse.cz>\nSigned-off-by: Theodore Ts'o <tytso@mit.edu>\nLink: https://lore.kernel.org/r/20210924093917.1953239-1-yangerkun@huawei.com",
        "before_after_code_files": [
          "fs/ext4/super.c||fs/ext4/super.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fs/ext4/super.c||fs/ext4/super.c": [
          "File: fs/ext4/super.c -> fs/ext4/super.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "664:    schedule_work(&EXT4_SB(sb)->s_error_work);",
          "665:   else",
          "666:    ext4_commit_super(sb);",
          "",
          "[Removed Lines]",
          "663:   if (continue_fs)",
          "",
          "[Added Lines]",
          "663:   if (continue_fs && journal)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5050:  sbi->s_ea_block_cache = NULL;",
          "5052:  if (sbi->s_journal) {",
          "5053:   jbd2_journal_destroy(sbi->s_journal);",
          "5054:   sbi->s_journal = NULL;",
          "5055:  }",
          "5056: failed_mount3a:",
          "5057:  ext4_es_unregister_shrinker(sbi);",
          "5058: failed_mount3:",
          "5059:  flush_work(&sbi->s_error_work);",
          "5060:  del_timer_sync(&sbi->s_err_report);",
          "5061:  ext4_stop_mmpd(sbi);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5054:   flush_work(&sbi->s_error_work);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "528a4ab45300fa6283556d9b48e26b45a8aa15c4",
      "candidate_info": {
        "commit_hash": "528a4ab45300fa6283556d9b48e26b45a8aa15c4",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/528a4ab45300fa6283556d9b48e26b45a8aa15c4",
        "files": [
          "kernel/scs.c"
        ],
        "message": "scs: Release kasan vmalloc poison in scs_free process\n\nSince scs allocation is moved to vmalloc region, the\nshadow stack is protected by kasan_posion_vmalloc.\nHowever, the vfree_atomic operation needs to access\nits context for scs_free process and causes kasan error\nas the dump info below.\n\nThis patch Adds kasan_unpoison_vmalloc() before vfree_atomic,\nwhich aligns to the prior flow as using kmem_cache.\nThe vmalloc region will go back posioned in the following\nvumap() operations.\n\n ==================================================================\n BUG: KASAN: vmalloc-out-of-bounds in llist_add_batch+0x60/0xd4\n Write of size 8 at addr ffff8000100b9000 by task kthreadd/2\n\n CPU: 0 PID: 2 Comm: kthreadd Not tainted 5.15.0-rc2-11681-g92477dd1faa6-dirty #1\n Hardware name: linux,dummy-virt (DT)\n Call trace:\n  dump_backtrace+0x0/0x43c\n  show_stack+0x1c/0x2c\n  dump_stack_lvl+0x68/0x84\n  print_address_description+0x80/0x394\n  kasan_report+0x180/0x1dc\n  __asan_report_store8_noabort+0x48/0x58\n  llist_add_batch+0x60/0xd4\n  vfree_atomic+0x60/0xe0\n  scs_free+0x1dc/0x1fc\n  scs_release+0xa4/0xd4\n  free_task+0x30/0xe4\n  __put_task_struct+0x1ec/0x2e0\n  delayed_put_task_struct+0x5c/0xa0\n  rcu_do_batch+0x62c/0x8a0\n  rcu_core+0x60c/0xc14\n  rcu_core_si+0x14/0x24\n  __do_softirq+0x19c/0x68c\n  irq_exit+0x118/0x2dc\n  handle_domain_irq+0xcc/0x134\n  gic_handle_irq+0x7c/0x1bc\n  call_on_irq_stack+0x40/0x70\n  do_interrupt_handler+0x78/0x9c\n  el1_interrupt+0x34/0x60\n  el1h_64_irq_handler+0x1c/0x2c\n  el1h_64_irq+0x78/0x7c\n  _raw_spin_unlock_irqrestore+0x40/0xcc\n  sched_fork+0x4f0/0xb00\n  copy_process+0xacc/0x3648\n  kernel_clone+0x168/0x534\n  kernel_thread+0x13c/0x1b0\n  kthreadd+0x2bc/0x400\n  ret_from_fork+0x10/0x20\n\n Memory state around the buggy address:\n  ffff8000100b8f00: f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8\n  ffff8000100b8f80: f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8\n >ffff8000100b9000: f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8\n                    ^\n  ffff8000100b9080: f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8\n  ffff8000100b9100: f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8\n ==================================================================\n\nSuggested-by: Kuan-Ying Lee <kuan-ying.lee@mediatek.com>\nAcked-by: Will Deacon <will@kernel.org>\nTested-by: Will Deacon <will@kernel.org>\nReviewed-by: Sami Tolvanen <samitolvanen@google.com>\nSigned-off-by: Yee Lee <yee.lee@mediatek.com>\nFixes: a2abe7cbd8fe (\"scs: switch to vmapped shadow stacks\")\nLink: https://lore.kernel.org/r/20210930081619.30091-1-yee.lee@mediatek.com\nSigned-off-by: Will Deacon <will@kernel.org>",
        "before_after_code_files": [
          "kernel/scs.c||kernel/scs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kernel/scs.c||kernel/scs.c": [
          "File: kernel/scs.c -> kernel/scs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:   if (this_cpu_cmpxchg(scs_cache[i], 0, s) == NULL)",
          "79:    return;",
          "81:  vfree_atomic(s);",
          "82: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:  kasan_unpoison_vmalloc(s, SCS_SIZE);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "560ee196fe9e5037e5015e2cdb14b3aecb1cd7dc",
      "candidate_info": {
        "commit_hash": "560ee196fe9e5037e5015e2cdb14b3aecb1cd7dc",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/560ee196fe9e5037e5015e2cdb14b3aecb1cd7dc",
        "files": [
          "net/sched/sch_fifo.c"
        ],
        "message": "net_sched: fix NULL deref in fifo_set_limit()\n\nsyzbot reported another NULL deref in fifo_set_limit() [1]\n\nI could repro the issue with :\n\nunshare -n\ntc qd add dev lo root handle 1:0 tbf limit 200000 burst 70000 rate 100Mbit\ntc qd replace dev lo parent 1:0 pfifo_fast\ntc qd change dev lo root handle 1:0 tbf limit 300000 burst 70000 rate 100Mbit\n\npfifo_fast does not have a change() operation.\nMake fifo_set_limit() more robust about this.\n\n[1]\nBUG: kernel NULL pointer dereference, address: 0000000000000000\nPGD 1cf99067 P4D 1cf99067 PUD 7ca49067 PMD 0\nOops: 0010 [#1] PREEMPT SMP KASAN\nCPU: 1 PID: 14443 Comm: syz-executor959 Not tainted 5.15.0-rc3-syzkaller #0\nHardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011\nRIP: 0010:0x0\nCode: Unable to access opcode bytes at RIP 0xffffffffffffffd6.\nRSP: 0018:ffffc9000e2f7310 EFLAGS: 00010246\nRAX: dffffc0000000000 RBX: ffffffff8d6ecc00 RCX: 0000000000000000\nRDX: 0000000000000000 RSI: ffff888024c27910 RDI: ffff888071e34000\nRBP: ffff888071e34000 R08: 0000000000000001 R09: ffffffff8fcfb947\nR10: 0000000000000001 R11: 0000000000000000 R12: ffff888024c27910\nR13: ffff888071e34018 R14: 0000000000000000 R15: ffff88801ef74800\nFS:  00007f321d897700(0000) GS:ffff8880b9d00000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: ffffffffffffffd6 CR3: 00000000722c3000 CR4: 00000000003506e0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\nDR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\nCall Trace:\n fifo_set_limit net/sched/sch_fifo.c:242 [inline]\n fifo_set_limit+0x198/0x210 net/sched/sch_fifo.c:227\n tbf_change+0x6ec/0x16d0 net/sched/sch_tbf.c:418\n qdisc_change net/sched/sch_api.c:1332 [inline]\n tc_modify_qdisc+0xd9a/0x1a60 net/sched/sch_api.c:1634\n rtnetlink_rcv_msg+0x413/0xb80 net/core/rtnetlink.c:5572\n netlink_rcv_skb+0x153/0x420 net/netlink/af_netlink.c:2504\n netlink_unicast_kernel net/netlink/af_netlink.c:1314 [inline]\n netlink_unicast+0x533/0x7d0 net/netlink/af_netlink.c:1340\n netlink_sendmsg+0x86d/0xdb0 net/netlink/af_netlink.c:1929\n sock_sendmsg_nosec net/socket.c:704 [inline]\n sock_sendmsg+0xcf/0x120 net/socket.c:724\n ____sys_sendmsg+0x6e8/0x810 net/socket.c:2409\n ___sys_sendmsg+0xf3/0x170 net/socket.c:2463\n __sys_sendmsg+0xe5/0x1b0 net/socket.c:2492\n do_syscall_x64 arch/x86/entry/common.c:50 [inline]\n do_syscall_64+0x35/0xb0 arch/x86/entry/common.c:80\n entry_SYSCALL_64_after_hwframe+0x44/0xae\n\nFixes: fb0305ce1b03 (\"net-sched: consolidate default fifo qdisc setup\")\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nReported-by: syzbot <syzkaller@googlegroups.com>\nLink: https://lore.kernel.org/r/20210930212239.3430364-1-eric.dumazet@gmail.com\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>",
        "before_after_code_files": [
          "net/sched/sch_fifo.c||net/sched/sch_fifo.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/sched/sch_fifo.c||net/sched/sch_fifo.c": [
          "File: net/sched/sch_fifo.c -> net/sched/sch_fifo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "233:  if (strncmp(q->ops->id + 1, \"fifo\", 4) != 0)",
          "234:   return 0;",
          "236:  nla = kmalloc(nla_attr_size(sizeof(struct tc_fifo_qopt)), GFP_KERNEL);",
          "237:  if (nla) {",
          "238:   nla->nla_type = RTM_NEWQDISC;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "236:  if (!q->ops->change)",
          "237:   return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a2c2f0826e2b75560b31daf1cd9a755ab93cf4c6",
      "candidate_info": {
        "commit_hash": "a2c2f0826e2b75560b31daf1cd9a755ab93cf4c6",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/a2c2f0826e2b75560b31daf1cd9a755ab93cf4c6",
        "files": [
          "fs/ext4/fast_commit.c"
        ],
        "message": "ext4: limit the number of blocks in one ADD_RANGE TLV\n\nNow EXT4_FC_TAG_ADD_RANGE uses ext4_extent to track the\nnewly-added blocks, but the limit on the max value of\nee_len field is ignored, and it can lead to BUG_ON as\nshown below when running command \"fallocate -l 128M file\"\non a fast_commit-enabled fs:\n\n  kernel BUG at fs/ext4/ext4_extents.h:199!\n  invalid opcode: 0000 [#1] SMP PTI\n  CPU: 3 PID: 624 Comm: fallocate Not tainted 5.14.0-rc6+ #1\n  Hardware name: QEMU Standard PC (i440FX + PIIX, 1996)\n  RIP: 0010:ext4_fc_write_inode_data+0x1f3/0x200\n  Call Trace:\n   ? ext4_fc_write_inode+0xf2/0x150\n   ext4_fc_commit+0x93b/0xa00\n   ? ext4_fallocate+0x1ad/0x10d0\n   ext4_sync_file+0x157/0x340\n   ? ext4_sync_file+0x157/0x340\n   vfs_fsync_range+0x49/0x80\n   do_fsync+0x3d/0x70\n   __x64_sys_fsync+0x14/0x20\n   do_syscall_64+0x3b/0xc0\n   entry_SYSCALL_64_after_hwframe+0x44/0xae\n\nSimply fixing it by limiting the number of blocks\nin one EXT4_FC_TAG_ADD_RANGE TLV.\n\nFixes: aa75f4d3daae (\"ext4: main fast-commit commit path\")\nCc: stable@kernel.org\nSigned-off-by: Hou Tao <houtao1@huawei.com>\nSigned-off-by: Theodore Ts'o <tytso@mit.edu>\nLink: https://lore.kernel.org/r/20210820044505.474318-1-houtao1@huawei.com",
        "before_after_code_files": [
          "fs/ext4/fast_commit.c||fs/ext4/fast_commit.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fs/ext4/fast_commit.c||fs/ext4/fast_commit.c": [
          "File: fs/ext4/fast_commit.c -> fs/ext4/fast_commit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "892:          sizeof(lrange), (u8 *)&lrange, crc))",
          "893:     return -ENOSPC;",
          "894:   } else {",
          "895:    fc_ext.fc_ino = cpu_to_le32(inode->i_ino);",
          "896:    ex = (struct ext4_extent *)&fc_ext.fc_ex;",
          "897:    ex->ee_block = cpu_to_le32(map.m_lblk);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "895:    unsigned int max = (map.m_flags & EXT4_MAP_UNWRITTEN) ?",
          "896:     EXT_UNWRITTEN_MAX_LEN : EXT_INIT_MAX_LEN;",
          "899:    map.m_len = min(max, map.m_len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dbb4cfea6efe979ed153bd59a6a527a90d3d0ab3",
      "candidate_info": {
        "commit_hash": "dbb4cfea6efe979ed153bd59a6a527a90d3d0ab3",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/dbb4cfea6efe979ed153bd59a6a527a90d3d0ab3",
        "files": [
          "drivers/media/pci/netup_unidvb/netup_unidvb_core.c"
        ],
        "message": "media: netup_unidvb: handle interrupt properly according to the firmware\n\nThe interrupt handling should be related to the firmware version. If\nthe driver matches an old firmware, then the driver should not handle\ninterrupt such as i2c or dma, otherwise it will cause some errors.\n\nThis log reveals it:\n\n[   27.708641] INFO: trying to register non-static key.\n[   27.710851] The code is fine but needs lockdep annotation, or maybe\n[   27.712010] you didn't initialize this object before use?\n[   27.712396] turning off the locking correctness validator.\n[   27.712787] CPU: 2 PID: 0 Comm: swapper/2 Not tainted 5.12.4-g70e7f0549188-dirty #169\n[   27.713349] Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org 04/01/2014\n[   27.714149] Call Trace:\n[   27.714329]  <IRQ>\n[   27.714480]  dump_stack+0xba/0xf5\n[   27.714737]  register_lock_class+0x873/0x8f0\n[   27.715052]  ? __lock_acquire+0x323/0x1930\n[   27.715353]  __lock_acquire+0x75/0x1930\n[   27.715636]  lock_acquire+0x1dd/0x3e0\n[   27.715905]  ? netup_i2c_interrupt+0x19/0x310\n[   27.716226]  _raw_spin_lock_irqsave+0x4b/0x60\n[   27.716544]  ? netup_i2c_interrupt+0x19/0x310\n[   27.716863]  netup_i2c_interrupt+0x19/0x310\n[   27.717178]  netup_unidvb_isr+0xd3/0x160\n[   27.717467]  __handle_irq_event_percpu+0x53/0x3e0\n[   27.717808]  handle_irq_event_percpu+0x35/0x90\n[   27.718129]  handle_irq_event+0x39/0x60\n[   27.718409]  handle_fasteoi_irq+0xc2/0x1d0\n[   27.718707]  __common_interrupt+0x7f/0x150\n[   27.719008]  common_interrupt+0xb4/0xd0\n[   27.719289]  </IRQ>\n[   27.719446]  asm_common_interrupt+0x1e/0x40\n[   27.719747] RIP: 0010:native_safe_halt+0x17/0x20\n[   27.720084] Code: 07 0f 00 2d 8b ee 4c 00 f4 5d c3 0f 1f 84 00 00 00 00 00 8b 05 72 95 17 02 55 48 89 e5 85 c0 7e 07 0f 00 2d 6b ee 4c 00 fb f4 <5d> c3 cc cc cc cc cc cc cc 55 48 89 e5 e8 67 53 ff ff 8b 0d 29 f6\n[   27.721386] RSP: 0018:ffffc9000008fe90 EFLAGS: 00000246\n[   27.721758] RAX: 0000000000000000 RBX: 0000000000000002 RCX: 0000000000000000\n[   27.722262] RDX: 0000000000000000 RSI: ffffffff85f7c054 RDI: ffffffff85ded4e6\n[   27.722770] RBP: ffffc9000008fe90 R08: 0000000000000001 R09: 0000000000000001\n[   27.723277] R10: 0000000000000000 R11: 0000000000000001 R12: ffffffff86a75408\n[   27.723781] R13: 0000000000000000 R14: 0000000000000000 R15: ffff888100260000\n[   27.724289]  default_idle+0x9/0x10\n[   27.724537]  arch_cpu_idle+0xa/0x10\n[   27.724791]  default_idle_call+0x6e/0x250\n[   27.725082]  do_idle+0x1f0/0x2d0\n[   27.725326]  cpu_startup_entry+0x18/0x20\n[   27.725613]  start_secondary+0x11f/0x160\n[   27.725902]  secondary_startup_64_no_verify+0xb0/0xbb\n[   27.726272] BUG: kernel NULL pointer dereference, address: 0000000000000002\n[   27.726768] #PF: supervisor read access in kernel mode\n[   27.727138] #PF: error_code(0x0000) - not-present page\n[   27.727507] PGD 8000000118688067 P4D 8000000118688067 PUD 10feab067 PMD 0\n[   27.727999] Oops: 0000 [#1] PREEMPT SMP PTI\n[   27.728302] CPU: 2 PID: 0 Comm: swapper/2 Not tainted 5.12.4-g70e7f0549188-dirty #169\n[   27.728861] Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org 04/01/2014\n[   27.729660] RIP: 0010:netup_i2c_interrupt+0x23/0x310\n[   27.730019] Code: 0f 1f 80 00 00 00 00 55 48 89 e5 41 55 41 54 53 48 89 fb e8 af 6e 95 fd 48 89 df e8 e7 9f 1c 01 49 89 c5 48 8b 83 48 08 00 00 <66> 44 8b 60 02 44 89 e0 48 8b 93 48 08 00 00 83 e0 f8 66 89 42 02\n[   27.731339] RSP: 0018:ffffc90000118e90 EFLAGS: 00010046\n[   27.731716] RAX: 0000000000000000 RBX: ffff88810803c4d8 RCX: 0000000000000000\n[   27.732223] RDX: 0000000000000001 RSI: ffffffff85d37b94 RDI: ffff88810803c4d8\n[   27.732727] RBP: ffffc90000118ea8 R08: 0000000000000000 R09: 0000000000000001\n[   27.733239] R10: ffff88810803c4f0 R11: 61646e6f63657320 R12: 0000000000000000\n[   27.733745] R13: 0000000000000046 R14: ffff888101041000 R15: ffff8881081b2400\n[   27.734251] FS:  0000000000000000(0000) GS:ffff88817bc80000(0000) knlGS:0000000000000000\n[   27.734821] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[   27.735228] CR2: 0000000000000002 CR3: 0000000108194000 CR4: 00000000000006e0\n[   27.735735] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\n[   27.736241] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\n[   27.736744] Call Trace:\n[   27.736924]  <IRQ>\n[   27.737074]  netup_unidvb_isr+0xd3/0x160\n[   27.737363]  __handle_irq_event_percpu+0x53/0x3e0\n[   27.737706]  handle_irq_event_percpu+0x35/0x90\n[   27.738028]  handle_irq_event+0x39/0x60\n[   27.738306]  handle_fasteoi_irq+0xc2/0x1d0\n[   27.738602]  __common_interrupt+0x7f/0x150\n[   27.738899]  common_interrupt+0xb4/0xd0\n[   27.739176]  </IRQ>\n[   27.739331]  asm_common_interrupt+0x1e/0x40\n[   27.739633] RIP: 0010:native_safe_halt+0x17/0x20\n[   27.739967] Code: 07 0f 00 2d 8b ee 4c 00 f4 5d c3 0f 1f 84 00 00 00 00 00 8b 05 72 95 17 02 55 48 89 e5 85 c0 7e 07 0f 00 2d 6b ee 4c 00 fb f4 <5d> c3 cc cc cc cc cc cc cc 55 48 89 e5 e8 67 53 ff ff 8b 0d 29 f6\n[   27.741275] RSP: 0018:ffffc9000008fe90 EFLAGS: 00000246\n[   27.741647] RAX: 0000000000000000 RBX: 0000000000000002 RCX: 0000000000000000\n[   27.742148] RDX: 0000000000000000 RSI: ffffffff85f7c054 RDI: ffffffff85ded4e6\n[   27.742652] RBP: ffffc9000008fe90 R08: 0000000000000001 R09: 0000000000000001\n[   27.743154] R10: 0000000000000000 R11: 0000000000000001 R12: ffffffff86a75408\n[   27.743652] R13: 0000000000000000 R14: 0000000000000000 R15: ffff888100260000\n[   27.744157]  default_idle+0x9/0x10\n[   27.744405]  arch_cpu_idle+0xa/0x10\n[   27.744658]  default_idle_call+0x6e/0x250\n[   27.744948]  do_idle+0x1f0/0x2d0\n[   27.745190]  cpu_startup_entry+0x18/0x20\n[   27.745475]  start_secondary+0x11f/0x160\n[   27.745761]  secondary_startup_64_no_verify+0xb0/0xbb\n[   27.746123] Modules linked in:\n[   27.746348] Dumping ftrace buffer:\n[   27.746596]    (ftrace buffer empty)\n[   27.746852] CR2: 0000000000000002\n[   27.747094] ---[ end trace ebafd46f83ab946d ]---\n[   27.747424] RIP: 0010:netup_i2c_interrupt+0x23/0x310\n[   27.747778] Code: 0f 1f 80 00 00 00 00 55 48 89 e5 41 55 41 54 53 48 89 fb e8 af 6e 95 fd 48 89 df e8 e7 9f 1c 01 49 89 c5 48 8b 83 48 08 00 00 <66> 44 8b 60 02 44 89 e0 48 8b 93 48 08 00 00 83 e0 f8 66 89 42 02\n[   27.749082] RSP: 0018:ffffc90000118e90 EFLAGS: 00010046\n[   27.749461] RAX: 0000000000000000 RBX: ffff88810803c4d8 RCX: 0000000000000000\n[   27.749966] RDX: 0000000000000001 RSI: ffffffff85d37b94 RDI: ffff88810803c4d8\n[   27.750471] RBP: ffffc90000118ea8 R08: 0000000000000000 R09: 0000000000000001\n[   27.750976] R10: ffff88810803c4f0 R11: 61646e6f63657320 R12: 0000000000000000\n[   27.751480] R13: 0000000000000046 R14: ffff888101041000 R15: ffff8881081b2400\n[   27.751986] FS:  0000000000000000(0000) GS:ffff88817bc80000(0000) knlGS:0000000000000000\n[   27.752560] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[   27.752970] CR2: 0000000000000002 CR3: 0000000108194000 CR4: 00000000000006e0\n[   27.753481] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\n[   27.753984] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\n[   27.754487] Kernel panic - not syncing: Fatal exception in interrupt\n[   27.755033] Dumping ftrace buffer:\n[   27.755279]    (ftrace buffer empty)\n[   27.755534] Kernel Offset: disabled\n[   27.755785] Rebooting in 1 seconds..\n\nSigned-off-by: Zheyu Ma <zheyuma97@gmail.com>\nSigned-off-by: Sean Young <sean@mess.org>\nSigned-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>",
        "before_after_code_files": [
          "drivers/medipci/netup_unidvb/netup_unidvb_core.c||drivers/media/pci/netup_unidvnetup_unidvb_core.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/medipci/netup_unidvb/netup_unidvb_core.c||drivers/media/pci/netup_unidvnetup_unidvb_core.c": [
          "File: drivers/medipci/netup_unidvb/netup_unidvb_core.c -> drivers/media/pci/netup_unidvnetup_unidvb_core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}