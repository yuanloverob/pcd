{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "150dfbd2c87b115095e850fe01c2aed9612e0246",
      "candidate_info": {
        "commit_hash": "150dfbd2c87b115095e850fe01c2aed9612e0246",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/150dfbd2c87b115095e850fe01c2aed9612e0246",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/altertab3.test",
          "test/corruptC.test",
          "test/memdb1.test",
          "test/pragma4.test"
        ],
        "message": "Fix minor problems in tcl test scripts.\n\nFossilOrigin-Name: 56b664185e3e56ad22e0c16a5b946fc8204d4d33221b6b4269d6d650dfd9969c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/altertab3.test||test/altertab3.test",
          "test/corruptC.test||test/corruptC.test",
          "test/memdb1.test||test/memdb1.test",
          "test/pragma4.test||test/pragma4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: edd87cd606ce264f181c16bbe889adeb8b27e90914f914c0f5d7b68c2dc2d7bd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:   COMMIT;",
          "100: }",
          "101: do_execsql_test 4.1.3 {",
          "106: do_catchsql_test 4.2.1 {",
          "",
          "[Removed Lines]",
          "102:   SELECT * FROM sqlite_master WHERE type='table' AND name!='t1';",
          "103: } {table t3 t3 3 {CREATE TABLE t3(e, f)}}",
          "",
          "[Added Lines]",
          "102:   SELECT type, name, tbl_name, sql",
          "103:   FROM sqlite_master WHERE type='table' AND name!='t1';",
          "104: } {table t3 t3 {CREATE TABLE t3(e, f)}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:   COMMIT;",
          "112: }",
          "113: do_execsql_test 4.2.3 {",
          "117: #-------------------------------------------------------------------------",
          "118: reset_db",
          "",
          "[Removed Lines]",
          "114:   SELECT * FROM sqlite_master WHERE type='table' AND name!='t1';",
          "115: } {table t3 t3 3 {CREATE TABLE t3(e, f)}}",
          "",
          "[Added Lines]",
          "115:   SELECT type, name, tbl_name, sql",
          "116:   FROM sqlite_master WHERE type='table' AND name!='t1';",
          "117: } {table t3 t3 {CREATE TABLE t3(e, f)}}",
          "",
          "---------------"
        ],
        "test/corruptC.test||test/corruptC.test": [
          "File: test/corruptC.test -> test/corruptC.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:   sqlite3 db test.db",
          "99:   catchsql {PRAGMA integrity_check}",
          "102: # test that a corrupt content offset size is handled (seed 5649)",
          "103: #",
          "",
          "[Removed Lines]",
          "100: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "100: } {0 {{*** in database main ***",
          "101: Page 3: free space corruption}}}",
          "",
          "---------------"
        ],
        "test/memdb1.test||test/memdb1.test": [
          "File: test/memdb1.test -> test/memdb1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "186: } {1 {wrong # args: should be \"db serialize ?DATABASE?\"}}",
          "188: #-------------------------------------------------------------------------",
          "201:   }",
          "204: finish_test",
          "",
          "[Removed Lines]",
          "189: reset_db",
          "190: do_execsql_test 700 {",
          "191:   CREATE TABLE t1(a, b);",
          "192:   PRAGMA schema_version = 0;",
          "193: }",
          "194: do_test 710 {",
          "195:   set ser [db serialize main]",
          "196:   db close",
          "197:   sqlite3 db",
          "198:   db deserialize main $ser",
          "199:   catchsql {",
          "200:     CREATE VIRTUAL TABLE t1 USING rtree(id, a, b, c, d);",
          "202: } {1 {table t1 already exists}}",
          "",
          "[Added Lines]",
          "189: ifcapable vtab {",
          "190:   reset_db",
          "191:   do_execsql_test 700 {",
          "192:     CREATE TABLE t1(a, b);",
          "193:     PRAGMA schema_version = 0;",
          "195:   do_test 710 {",
          "196:     set ser [db serialize main]",
          "197:     db close",
          "198:     sqlite3 db",
          "199:     db deserialize main $ser",
          "200:     catchsql {",
          "201:       CREATE VIRTUAL TABLE t1 USING rtree(id, a, b, c, d);",
          "202:     }",
          "203:   } {1 {table t1 already exists}}",
          "204: }",
          "",
          "---------------"
        ],
        "test/pragma4.test||test/pragma4.test": [
          "File: test/pragma4.test -> test/pragma4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:   execsql { DROP INDEX i1 } db3",
          "175:   execsql { DROP INDEX i2 } db2",
          "176: } {}",
          "177: ifcapable vtab {",
          "178:   do_execsql_test 4.3.5 { SELECT * FROM pragma_index_info('i1') }",
          "179:   do_execsql_test 4.3.6 { SELECT * FROM pragma_index_info('i2') }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "177: if {[permutation]==\"prepare\"} { catchsql { SELECT * FROM sqlite_master } }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "192:   execsql { DROP INDEX i1 } db3",
          "193:   execsql { DROP INDEX i2 } db2",
          "194: } {}",
          "195: ifcapable vtab {",
          "196:   do_execsql_test 4.4.5 { SELECT * FROM pragma_index_list('t1') } {}",
          "197:   do_execsql_test 4.4.6 { SELECT * FROM pragma_index_list('t2') } {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196: if {[permutation]==\"prepare\"} {",
          "197:   catchsql { SELECT * FROM sqlite_master, aux.sqlite_master }",
          "198: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "216:   execsql { DROP TABLE c1 } db3",
          "217:   execsql { DROP TABLE c2 } db2",
          "218: } {}",
          "219: ifcapable vtab {",
          "220:   do_execsql_test 4.5.4 { SELECT * FROM pragma_foreign_key_list('c1') }",
          "221:   do_execsql_test 4.5.5 { SELECT * FROM pragma_foreign_key_list('c2') }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "223: if {[permutation]==\"prepare\"} {",
          "224:   catchsql { SELECT * FROM sqlite_master, aux.sqlite_master }",
          "225: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ae3977a8f30bb859b858c36d03f07319ba210615",
      "candidate_info": {
        "commit_hash": "ae3977a8f30bb859b858c36d03f07319ba210615",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ae3977a8f30bb859b858c36d03f07319ba210615",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "Fix the xfer optimization for generated columns, so that VACUUM works again.\n\nFossilOrigin-Name: 8f67b89b04622c1509dc102a83be7a80057dc791625804fc2c294089c98b97e4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c21959d4eb5d742a097a98e1874c0bf132dc962a97a65be1ab22d6ca3cf2b261",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2290:     }",
          "2291: #endif",
          "2292:     if( pDestCol->affinity!=pSrcCol->affinity ){",
          "2294:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2292:     if( (pDestCol->colFlags & COLFLAG_GENERATED) !=",
          "2293:         (pSrcCol->colFlags & COLFLAG_GENERATED) ){",
          "2295:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2300:     }",
          "2303:       assert( pDestCol->pDflt==0 || pDestCol->pDflt->op==TK_SPAN );",
          "2304:       assert( pSrcCol->pDflt==0 || pSrcCol->pDflt->op==TK_SPAN );",
          "2305:       if( (pDestCol->pDflt==0)!=(pSrcCol->pDflt==0)",
          "",
          "[Removed Lines]",
          "2302:     if( i>0 ){",
          "",
          "[Added Lines]",
          "2306:     if( (pDestCol->colFlags & COLFLAG_GENERATED)==0 && i>0 ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2310:       }",
          "2311:     }",
          "2312:   }",
          "2313:   for(pDestIdx=pDest->pIndex; pDestIdx; pDestIdx=pDestIdx->pNext){",
          "2314:     if( IsUniqueIndex(pDestIdx) ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2317:     if( (pDestCol->colFlags & COLFLAG_GENERATED)!=0 ){",
          "2318:       if( sqlite3ExprCompare(0, pSrcCol->pDflt, pDestCol->pDflt, -1)!=0 ){",
          "2320:       }",
          "2321:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eb4a61a30cff88326069684788321dc5e01224fb",
      "candidate_info": {
        "commit_hash": "eb4a61a30cff88326069684788321dc5e01224fb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/eb4a61a30cff88326069684788321dc5e01224fb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Merge accidental fork in trunk.\n\nFossilOrigin-Name: ec9373031d76b34163a45d0ed05e43c0c9d585c8d47aa255f670340673bc7875",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7ccf2e7d413adb109c61456a5f46e87d38884801dbaab93297a17e3050014b59",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3884:   if( fgets(zLine, sizeof(zLine), in)==0 ) goto readHexDb_error;",
          "3885:   rc = sscanf(zLine, \"| size %d pagesize %d\", &n, &pgsz);",
          "3886:   if( rc!=2 ) goto readHexDb_error;",
          "3889:   if( a==0 ){",
          "3890:     utf8_printf(stderr, \"Out of memory!\\n\");",
          "3891:     goto readHexDb_error;",
          "",
          "[Removed Lines]",
          "3887:   if( n<=0 ) goto readHexDb_error;",
          "3888:   a = sqlite3_malloc( n );",
          "",
          "[Added Lines]",
          "3887:   if( n<0 ) goto readHexDb_error;",
          "3888:   a = sqlite3_malloc( n ? n : 1 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3924:   return a;",
          "3926: readHexDb_error:",
          "3928:     fclose(in);",
          "3929:   }else{",
          "3930:     while( fgets(zLine, sizeof(zLine), p->in)!=0 ){",
          "",
          "[Removed Lines]",
          "3927:   if( in!=stdin ){",
          "",
          "[Added Lines]",
          "3927:   if( in!=p->in ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4166:       }else{",
          "4167:         aData = readHexDb(p, &nData);",
          "4168:         if( aData==0 ){",
          "4170:           return;",
          "4171:         }",
          "4172:       }",
          "",
          "[Removed Lines]",
          "4169:           utf8_printf(stderr, \"Error in hexdb input\\n\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6ca644818b163eaebae657f816f907335ed0b068",
      "candidate_info": {
        "commit_hash": "6ca644818b163eaebae657f816f907335ed0b068",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6ca644818b163eaebae657f816f907335ed0b068",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/memdb.c",
          "src/shell.c.in",
          "src/sqlite.h.in",
          "src/tclsqlite.c",
          "test/memdb1.test"
        ],
        "message": "Enhancements to deserialize: (1) Add the SQLITE_FCNTL_SIZE_LIMIT file control to set a maximum size for an in-memory database, defaulting to SQLITE_MEMDB_DEFAULT_MAXSIZE or 1GiB.  (2) Honor the SQLITE_DESERIALIZE_READONLY flag. (3) Enhance the TCL interface to support -maxsize N and -readonly BOOLEAN. (4) Add the --maxsize option to the \".open\" command and on the command-line for the CLI.\n\nFossilOrigin-Name: 30f08d58882819a69e353bcc1b6b349664bbfbe00aa1c115ba44a9fd899fcc5b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/memdb.c||src/memdb.c",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/tclsqlite.c||src/tclsqlite.c",
          "test/memdb1.test||test/memdb1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e148cdad35520e6684cfeba23b003f60b55f83a6bf621aff16be8aa5612cdcee",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/memdb.c||src/memdb.c": [
          "File: src/memdb.c -> src/memdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: struct MemFile {",
          "42: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: #ifndef SQLITE_MEMDB_DEFAULT_MAXSIZE",
          "47: # define SQLITE_MEMDB_DEFAULT_MAXSIZE 1073741824",
          "48: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "160:   if( (p->mFlags & SQLITE_DESERIALIZE_RESIZEABLE)==0 || p->nMmap>0 ){",
          "161:     return SQLITE_FULL;",
          "162:   }",
          "163:   pNew = sqlite3_realloc64(p->aData, newSz);",
          "164:   if( pNew==0 ) return SQLITE_NOMEM;",
          "165:   p->aData = pNew;",
          "167:   return SQLITE_OK;",
          "168: }",
          "",
          "[Removed Lines]",
          "166:   p->szMax = newSz;",
          "",
          "[Added Lines]",
          "169:   if( newSz>p->szMax ){",
          "170:     return SQLITE_FULL;",
          "171:   }",
          "172:   newSz *= 2;",
          "173:   if( newSz>p->szMax ) newSz = p->szMax;",
          "177:   p->szAlloc = newSz;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "177:   sqlite_int64 iOfst",
          "178: ){",
          "179:   MemFile *p = (MemFile *)pFile;",
          "180:   if( iOfst+iAmt>p->sz ){",
          "181:     int rc;",
          "184:     ){",
          "185:       return rc;",
          "186:     }",
          "",
          "[Removed Lines]",
          "182:     if( iOfst+iAmt>p->szMax",
          "183:      && (rc = memdbEnlarge(p, (iOfst+iAmt)*2))!=SQLITE_OK",
          "",
          "[Added Lines]",
          "191:   if( p->mFlags & SQLITE_DESERIALIZE_READONLY ) return SQLITE_READONLY;",
          "194:     if( iOfst+iAmt>p->szAlloc",
          "195:      && (rc = memdbEnlarge(p, iOfst+iAmt))!=SQLITE_OK",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "251:     rc = SQLITE_OK;",
          "252:   }",
          "253:   return rc;",
          "254: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265:   if( op==SQLITE_FCNTL_SIZE_LIMIT ){",
          "266:     sqlite3_int64 iLimit = *(sqlite3_int64*)pArg;",
          "267:     if( iLimit<p->sz ){",
          "268:       if( iLimit<0 ){",
          "269:         iLimit = p->szMax;",
          "270:       }else{",
          "271:         iLimit = p->sz;",
          "272:       }",
          "273:     }",
          "274:     p->szMax = iLimit;",
          "276:     rc = SQLITE_OK;",
          "277:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "313:   p->base.pMethods = &memdb_io_methods;",
          "314:   return SQLITE_OK;",
          "315: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "339:   p->szMax = SQLITE_MEMDB_DEFAULT_MAXSIZE;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "560:   }else{",
          "561:     p->aData = pData;",
          "562:     p->sz = szDb;",
          "563:     p->szMax = szBuf;",
          "564:     p->mFlags = mFlags;",
          "565:     rc = SQLITE_OK;",
          "566:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "589:     p->szAlloc = szBuf;",
          "591:     if( p->szMax<SQLITE_MEMDB_DEFAULT_MAXSIZE ){",
          "592:       p->szMax = SQLITE_MEMDB_DEFAULT_MAXSIZE;",
          "593:     }",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3449: #ifdef SQLITE_ENABLE_DESERIALIZE",
          "3450:   \"        --deserialize   Load into memory useing sqlite3_deserialize()\",",
          "3451:   \"        --hexdb         Load the output of \\\"dbtotxt\\\" as an in-memory database\",",
          "3452: #endif",
          "3453:   \"        --new           Initialize FILE to an empty database\",",
          "3454:   \"        --readonly      Open FILE readonly\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3453:   \"        --maxsize N     Maximum size for --hexdb or --deserialized database\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3927:       if( rc ){",
          "3928:         utf8_printf(stderr, \"Error: sqlite3_deserialize() returns %d\\n\", rc);",
          "3929:       }",
          "3930:     }",
          "3931: #endif",
          "3932:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3932:       if( p->szMax>0 ){",
          "3933:         sqlite3_file_control(p->db, \"main\", SQLITE_FCNTL_SIZE_LIMIT, &p->szMax);",
          "3934:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6841:     sqlite3_free(p->zFreeOnClose);",
          "6842:     p->zFreeOnClose = 0;",
          "6843:     p->openMode = SHELL_OPEN_UNSPEC;",
          "6845:     for(iName=1; iName<nArg && azArg[iName][0]=='-'; iName++){",
          "6846:       const char *z = azArg[iName];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6849:     p->szMax = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6859:         p->openMode = SHELL_OPEN_DESERIALIZE;",
          "6860:       }else if( optionMatch(z, \"hexdb\") ){",
          "6861:         p->openMode = SHELL_OPEN_HEXDB;",
          "6863:       }else if( z[0]=='-' ){",
          "6864:         utf8_printf(stderr, \"unknown option: %s\\n\", z);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6868:       }else if( optionMatch(z, \"maxsize\") && iName+1<nArg ){",
          "6869:         p->szMax = integerValue(azArg[++iName]);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "8549:   \"   -column              set output mode to 'column'\\n\"",
          "8550:   \"   -cmd COMMAND         run \\\"COMMAND\\\" before reading stdin\\n\"",
          "8551:   \"   -csv                 set output mode to 'csv'\\n\"",
          "8552:   \"   -echo                print commands before execution\\n\"",
          "8553:   \"   -init FILENAME       read/process named file\\n\"",
          "8554:   \"   -[no]header          turn headers on or off\\n\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8560: #if defined(SQLITE_ENABLE_DESERIALIZE)",
          "8561:   \"   -deserialize         open the database using sqlite3_deserialize()\\n\"",
          "8562: #endif",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "8561:   \"   -line                set output mode to 'line'\\n\"",
          "8562:   \"   -list                set output mode to 'list'\\n\"",
          "8563:   \"   -lookaside SIZE N    use N entries of SZ bytes for lookaside memory\\n\"",
          "8564:   \"   -mmap N              default mmap size set to N\\n\"",
          "8565: #ifdef SQLITE_ENABLE_MULTIPLEX",
          "8566:   \"   -multiplex           enable the multiplexor VFS\\n\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8575: #if defined(SQLITE_ENABLE_DESERIALIZE)",
          "8576:   \"   -maxsize N           maximum size for a --deserialize database\\n\"",
          "8577: #endif",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "8871: #ifdef SQLITE_ENABLE_DESERIALIZE",
          "8872:     }else if( strcmp(z,\"-deserialize\")==0 ){",
          "8873:       data.openMode = SHELL_OPEN_DESERIALIZE;",
          "8874: #endif",
          "8875:     }else if( strcmp(z,\"-readonly\")==0 ){",
          "8876:       data.openMode = SHELL_OPEN_READONLY;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8888:     }else if( strcmp(z,\"-maxsize\")==0 && i+1<argc ){",
          "8889:       data.szMax = integerValue(argv[++i]);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "8972: #ifdef SQLITE_ENABLE_DESERIALIZE",
          "8973:     }else if( strcmp(z,\"-deserialize\")==0 ){",
          "8974:       data.openMode = SHELL_OPEN_DESERIALIZE;",
          "8975: #endif",
          "8976:     }else if( strcmp(z,\"-readonly\")==0 ){",
          "8977:       data.openMode = SHELL_OPEN_READONLY;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8991:     }else if( strcmp(z,\"-maxsize\")==0 && i+1<argc ){",
          "8992:       data.szMax = integerValue(argv[++i]);",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1131: #define SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITE  33",
          "1132: #define SQLITE_FCNTL_LOCK_TIMEOUT           34",
          "1133: #define SQLITE_FCNTL_DATA_VERSION           35",
          "1136: #define SQLITE_GET_LOCKPROXYFILE      SQLITE_FCNTL_GET_LOCKPROXYFILE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1143: #define SQLITE_FCNTL_SIZE_LIMIT             36",
          "",
          "---------------"
        ],
        "src/tclsqlite.c||src/tclsqlite.c": [
          "File: src/tclsqlite.c -> src/tclsqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2428:                      (char*)0);",
          "2429:     rc = TCL_ERROR;",
          "2430: #else",
          "2433:     unsigned char *pBA;",
          "2434:     unsigned char *pData;",
          "2435:     int len, xrc;",
          "2444:       Tcl_WrongNumArgs(interp, 2, objv, \"?DATABASE? VALUE\");",
          "2445:       rc = TCL_ERROR;",
          "2446:       break;",
          "2447:     }",
          "2448:     pBA = Tcl_GetByteArrayFromObj(pValue, &len);",
          "2449:     pData = sqlite3_malloc64( len );",
          "2450:     if( pData==0 && len>0 ){",
          "2451:       Tcl_AppendResult(interp, \"out of memory\", (char*)0);",
          "2452:       rc = TCL_ERROR;",
          "2453:     }else{",
          "2454:       if( len>0 ) memcpy(pData, pBA, len);",
          "2458:       if( xrc ){",
          "2459:         Tcl_AppendResult(interp, \"unable to set MEMDB content\", (char*)0);",
          "2460:         rc = TCL_ERROR;",
          "2461:       }",
          "2462:     }",
          "2463: #endif",
          "2464:     break;",
          "2465:   }",
          "",
          "[Removed Lines]",
          "2431:     const char *zSchema;",
          "2432:     Tcl_Obj *pValue;",
          "2437:     if( objc==3 ){",
          "2438:       zSchema = 0;",
          "2439:       pValue = objv[2];",
          "2440:     }else if( objc==4 ){",
          "2441:       zSchema = Tcl_GetString(objv[2]);",
          "2442:       pValue = objv[3];",
          "2443:     }else{",
          "2455:       xrc = sqlite3_deserialize(pDb->db, zSchema, pData, len, len,",
          "2456:                 SQLITE_DESERIALIZE_FREEONCLOSE |",
          "2457:                 SQLITE_DESERIALIZE_RESIZEABLE);",
          "",
          "[Added Lines]",
          "2431:     const char *zSchema = 0;",
          "2432:     Tcl_Obj *pValue = 0;",
          "2436:     sqlite3_int64 mxSize = 0;",
          "2437:     int i;",
          "2438:     int isReadonly = 0;",
          "2441:     if( objc<3 ){",
          "2446:     for(i=2; i<objc-1; i++){",
          "2447:       const char *z = Tcl_GetString(objv[i]);",
          "2448:       if( strcmp(z,\"-maxsize\")==0 && i<objc-2 ){",
          "2449:         rc = Tcl_GetWideIntFromObj(interp, objv[++i], &mxSize);",
          "2450:         if( rc ) goto deserialize_error;",
          "2451:         continue;",
          "2452:       }",
          "2453:       if( strcmp(z,\"-readonly\")==0 && i<objc-2 ){",
          "2454:         rc = Tcl_GetBooleanFromObj(interp, objv[++i], &isReadonly);",
          "2455:         if( rc ) goto deserialize_error;",
          "2456:         continue;",
          "2457:       }",
          "2458:       if( zSchema==0 && i==objc-2 && z[0]!='-' ){",
          "2459:         zSchema = z;",
          "2460:         continue;",
          "2461:       }",
          "2462:       Tcl_AppendResult(interp, \"unknown option: \", z, (char*)0);",
          "2463:       rc = TCL_ERROR;",
          "2464:       goto deserialize_error;",
          "2465:     }",
          "2466:     pValue = objv[objc-1];",
          "2473:       int flags;",
          "2475:       if( isReadonly ){",
          "2476:         flags = SQLITE_DESERIALIZE_FREEONCLOSE | SQLITE_DESERIALIZE_READONLY;",
          "2477:       }else{",
          "2478:         flags = SQLITE_DESERIALIZE_FREEONCLOSE | SQLITE_DESERIALIZE_RESIZEABLE;",
          "2479:       }",
          "2480:       xrc = sqlite3_deserialize(pDb->db, zSchema, pData, len, len, flags);",
          "2485:       if( mxSize>0 ){",
          "2486:         sqlite3_file_control(pDb->db, zSchema,SQLITE_FCNTL_SIZE_LIMIT,&mxSize);",
          "2487:       }",
          "2489: deserialize_error:",
          "",
          "---------------"
        ],
        "test/memdb1.test||test/memdb1.test": [
          "File: test/memdb1.test -> test/memdb1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:   PRAGMA page_count;",
          "73: } {2}",
          "75: # Build a largish on-disk database and serialize it.  Verify that the",
          "76: # serialization works.",
          "77: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75: do_test 150 {",
          "76:   catch {db deserialize -unknown 1 $db1} msg",
          "77:   set msg",
          "78: } {unknown option: -unknown}",
          "79: do_test 151 {",
          "80:   db deserialize -readonly 1 $db1",
          "81:   db eval {SELECT * FROM t1}",
          "82: } {1 2}",
          "83: do_test 152 {",
          "84:   catchsql {INSERT INTO t1 VALUES(3,4);}",
          "85: } {1 {attempt to write a readonly database}}",
          "87: breakpoint",
          "88: do_test 160 {",
          "89:   db deserialize -maxsize 32768 $db1",
          "90:   db eval {SELECT * FROM t1}",
          "91: } {1 2}",
          "92: do_test 161 {",
          "93:   db eval {INSERT INTO t1 VALUES(3,4); SELECT * FROM t1}",
          "94: } {1 2 3 4}",
          "95: do_test 162 {",
          "96:   catchsql {INSERT INTO t1 VALUES(5,randomblob(100000))}",
          "97: } {1 {database or disk is full}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "154: do_test 610 {",
          "155:   set rc [catch {db deserialize a b c} msg]",
          "156:   lappend rc $msg",
          "158: do_test 620 {",
          "159:   set rc [catch {db serialize a b} msg]",
          "160:   lappend rc $msg",
          "",
          "[Removed Lines]",
          "157: } {1 {wrong # args: should be \"db deserialize ?DATABASE? VALUE\"}}",
          "",
          "[Added Lines]",
          "182: } {1 {unknown option: a}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "158931ab640fe6b0d3829d0321d04a4315e6e6cb",
      "candidate_info": {
        "commit_hash": "158931ab640fe6b0d3829d0321d04a4315e6e6cb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/158931ab640fe6b0d3829d0321d04a4315e6e6cb",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/badutf2.test",
          "test/journal3.test",
          "test/shell1.test",
          "test/wal2.test"
        ],
        "message": "Test case changes so that they work with both Tcl8.6 and Tcl8.7.\n\nFossilOrigin-Name: 7b771405a9adc3ec191156be4ebe7122f4c698d88d69ae2134c75acb8d8feebb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/badutf2.test||test/badutf2.test",
          "test/journal3.test||test/journal3.test",
          "test/shell1.test||test/shell1.test",
          "test/wal2.test||test/wal2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: dd248c186a157b5ed60bbdae669b31237b8354c1a7e6ed64d377904043bd57ee",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/badutf2.test||test/badutf2.test": [
          "File: test/badutf2.test -> test/badutf2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:     } $uval",
          "99:   }",
          "108:   ifcapable debug {",
          "109:     do_test badutf2-5.1.$i {",
          "",
          "[Removed Lines]",
          "101:   do_test badutf2-4.1.$i {",
          "102:     sqlite3_reset $S",
          "103:     sqlite3_bind_text $S 1 $xstr $len",
          "104:     sqlite3_step $S",
          "105:     utf8_to_ustr2 [ sqlite3_column_text $S 0 ]",
          "106:   } $ustr",
          "",
          "[Added Lines]",
          "101:   # Tcl 8.7 and later do automatic bad-utf8 correction for",
          "102:   # characters 0x80 thru 0x9f so test case 5 does not work here.",
          "103:   if {$i==5 && $tcl_version>=8.7} {",
          "104:      # no-op",
          "105:   } else {",
          "106:     do_test badutf2-4.1.$i {",
          "107:       sqlite3_reset $S",
          "108:       sqlite3_bind_text $S 1 $xstr $len",
          "109:       sqlite3_step $S",
          "110:       utf8_to_ustr2 [ sqlite3_column_text $S 0 ]",
          "111:     } $ustr",
          "112:   }",
          "",
          "---------------"
        ],
        "test/journal3.test||test/journal3.test": [
          "File: test/journal3.test -> test/journal3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:   } {",
          "39:     db close",
          "40:     #set effective [format %.5o [expr $permissions & ~$umask]]",
          "41:     set effective $permissions",
          "42:     do_test journal3-1.2.$tn.1 {",
          "43:       catch { forcedelete test.db-journal }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:     if {$tcl_version>=8.7} {",
          "42:        regsub {^00} $permissions {0o} permissions",
          "43:     }",
          "",
          "---------------"
        ],
        "test/shell1.test||test/shell1.test": [
          "File: test/shell1.test -> test/shell1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1022:     if {$i==0x0D || ($tcl_platform(platform)==\"windows\" && $i==0x1A)} {",
          "1023:       continue",
          "1024:     }",
          "1025:     if {$i>=0xE0 && $tcl_platform(os)==\"OpenBSD\"}  continue",
          "1026:     if {$i>=0xE0 && $i<=0xEF && $tcl_platform(os)==\"Linux\"}  continue",
          "1027:     set hex [format %02X $i]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1025:     # Tcl 8.7 maps 0x80 through 0x9f into valid UTF8.  So skip those tests.",
          "1026:     if {$i>=0x80 && $i<=0x9f} continue",
          "",
          "---------------"
        ],
        "test/wal2.test||test/wal2.test": [
          "File: test/wal2.test -> test/wal2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1085:     set effective [format %.5o [expr $permissions & ~$umask]]",
          "1086:     do_test wal2-12.2.$tn.1 {",
          "1087:       file attributes test.db -permissions $permissions",
          "1089:     } $permissions",
          "1090:     do_test wal2-12.2.$tn.2 {",
          "1091:       list [file exists test.db-wal] [file exists test.db-shm]",
          "",
          "[Removed Lines]",
          "1088:       file attributes test.db -permissions",
          "",
          "[Added Lines]",
          "1088:       string map {o 0} [file attributes test.db -permissions]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1096:       list [file exists test.db-wal] [file exists test.db-shm]",
          "1097:     } {1 1}",
          "1098:     do_test wal2-12.2.$tn.4 {",
          "1100:     } [list $effective $effective]",
          "1101:     do_test wal2-12.2.$tn.5 {",
          "1102:       db close",
          "",
          "[Removed Lines]",
          "1099:       list [file attr test.db-wal -perm] [file attr test.db-shm -perm]",
          "",
          "[Added Lines]",
          "1099:       set x [list [file attr test.db-wal -perm] [file attr test.db-shm -perm]]",
          "1100:       string map {o 0} $x",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1154:       set     L [file attr test.db -perm]",
          "1155:       lappend L [file attr test.db-wal -perm]",
          "1156:       lappend L [file attr test.db-shm -perm]",
          "1157:     } [list $db_perm $wal_perm $shm_perm]",
          "1159:     # If $can_open is true, then it should be possible to open a database",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1158:       string map {o 0} $L",
          "",
          "---------------"
        ]
      }
    }
  ]
}