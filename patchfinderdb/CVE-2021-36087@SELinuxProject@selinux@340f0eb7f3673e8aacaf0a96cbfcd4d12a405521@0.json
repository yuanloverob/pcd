{
  "cve_id": "CVE-2021-36087",
  "cve_desc": "The CIL compiler in SELinux 3.2 has a heap-based buffer over-read in ebitmap_match_any (called indirectly from cil_check_neverallow). This occurs because there is sometimes a lack of checks for invalid statements in an optional block.",
  "repo": "SELinuxProject/selinux",
  "patch_hash": "340f0eb7f3673e8aacaf0a96cbfcd4d12a405521",
  "patch_info": {
    "commit_hash": "340f0eb7f3673e8aacaf0a96cbfcd4d12a405521",
    "repo": "SELinuxProject/selinux",
    "commit_url": "https://github.com/SELinuxProject/selinux/commit/340f0eb7f3673e8aacaf0a96cbfcd4d12a405521",
    "files": [
      "libsepol/cil/src/cil_build_ast.c",
      "libsepol/cil/src/cil_resolve_ast.c"
    ],
    "message": "libsepol/cil: Check for statements not allowed in optional blocks\n\nWhile there are some checks for invalid statements in an optional\nblock when resolving the AST, there are no checks when building the\nAST.\n\nOSS-Fuzz found the following policy which caused a null dereference\nin cil_tree_get_next_path().\n  (blockinherit b3)\n  (sid SID)\n  (sidorder(SID))\n  (optional o\n    (ibpkeycon :(1 0)s)\n    (block b3\n      (filecon\"\"block())\n      (filecon\"\"block())))\n\nThe problem is that the blockinherit copies block b3 before\nthe optional block is disabled. When the optional is disabled,\nblock b3 is deleted along with everything else in the optional.\nLater, when filecon statements with the same path are found an\nerror message is produced and in trying to find out where the block\nwas copied from, the reference to the deleted block is used. The\nerror handling code assumes (rightly) that if something was copied\nfrom a block then that block should still exist.\n\nIt is clear that in-statements, blocks, and macros cannot be in an\noptional, because that allows nodes to be copied from the optional\nblock to somewhere outside even though the optional could be disabled\nlater. When optionals are disabled the AST is reset and the\nresolution is restarted at the point of resolving macro calls, so\nanything resolved before macro calls will never be re-resolved.\nThis includes tunableifs, in-statements, blockinherits,\nblockabstracts, and macro definitions. Tunable declarations also\ncannot be in an optional block because they are needed to resolve\ntunableifs. It should be fine to allow blockinherit statements in\nan optional, because that is copying nodes from outside the optional\nto the optional and if the optional is later disabled, everything\nwill be deleted anyway.\n\nCheck and quit with an error if a tunable declaration, in-statement,\nblock, blockabstract, or macro definition is found within an\noptional when either building or resolving the AST.\n\nSigned-off-by: James Carter <jwcart2@gmail.com>",
    "before_after_code_files": [
      "libsepol/cil/src/cil_build_ast.c||libsepol/cil/src/cil_build_ast.c",
      "libsepol/cil/src/cil_resolve_ast.c||libsepol/cil/src/cil_resolve_ast.c"
    ]
  },
  "patch_diff": {
    "libsepol/cil/src/cil_build_ast.c||libsepol/cil/src/cil_build_ast.c": [
      "File: libsepol/cil/src/cil_build_ast.c -> libsepol/cil/src/cil_build_ast.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "52:  struct cil_tree_node *tunif;",
      "53:  struct cil_tree_node *in;",
      "54:  struct cil_tree_node *macro;",
      "55:  struct cil_tree_node *boolif;",
      "56: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "55:  struct cil_tree_node *optional;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "6071:  struct cil_tree_node *tunif = args->tunif;",
      "6072:  struct cil_tree_node *in = args->in;",
      "6073:  struct cil_tree_node *macro = args->macro;",
      "6074:  struct cil_tree_node *boolif = args->boolif;",
      "6075:  struct cil_tree_node *ast_node = NULL;",
      "6076:  int rc = SEPOL_ERR;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6075:  struct cil_tree_node *optional = args->optional;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "6121:   }",
      "6122:  }",
      "6124:  if (boolif != NULL) {",
      "6125:   if (parse_current->data != CIL_KEY_TUNABLEIF &&",
      "6126:    parse_current->data != CIL_KEY_CALL &&",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6126:  if (optional != NULL) {",
      "6127:   if (parse_current->data == CIL_KEY_TUNABLE ||",
      "6128:    parse_current->data == CIL_KEY_IN ||",
      "6129:    parse_current->data == CIL_KEY_BLOCK ||",
      "6130:    parse_current->data == CIL_KEY_BLOCKABSTRACT ||",
      "6131:    parse_current->data == CIL_KEY_MACRO) {",
      "6132:    rc = SEPOL_ERR;",
      "6133:    cil_tree_log(parse_current, CIL_ERR, \"%s is not allowed in optionals\", (char *)parse_current->data);",
      "6134:    goto exit;",
      "6135:   }",
      "6136:  }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "6462:   args->macro = ast;",
      "6463:  }",
      "6465:  if (ast->flavor == CIL_BOOLEANIF) {",
      "6466:   args->boolif = ast;",
      "6467:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6479:  if (ast->flavor == CIL_OPTIONAL) {",
      "6480:   args->optional = ast;",
      "6481:  }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "6492:   args->macro = NULL;",
      "6493:  }",
      "6495:  if (ast->flavor == CIL_BOOLEANIF) {",
      "6496:   args->boolif = NULL;",
      "6497:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6513:  if (ast->flavor == CIL_OPTIONAL) {",
      "6514:   struct cil_tree_node *n = ast->parent;",
      "6515:   args->optional = NULL;",
      "6517:   while (n && n->flavor != CIL_ROOT) {",
      "6518:    if (n->flavor == CIL_OPTIONAL) {",
      "6519:     args->optional = n;",
      "6520:     break;",
      "6521:    }",
      "6522:    n = n->parent;",
      "6523:   }",
      "6524:  }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "6520:  extra_args.tunif = NULL;",
      "6521:  extra_args.in = NULL;",
      "6522:  extra_args.macro = NULL;",
      "6523:  extra_args.boolif = NULL;",
      "6525:  rc = cil_tree_walk(parse_tree, __cil_build_ast_node_helper, __cil_build_ast_first_child_helper, __cil_build_ast_last_child_helper, &extra_args);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6554:  extra_args.optional = NULL;",
      "",
      "---------------"
    ],
    "libsepol/cil/src/cil_resolve_ast.c||libsepol/cil/src/cil_resolve_ast.c": [
      "File: libsepol/cil/src/cil_resolve_ast.c -> libsepol/cil/src/cil_resolve_ast.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3809:  if (optional != NULL) {",
      "3810:   if (node->flavor == CIL_TUNABLE ||",
      "3811:       node->flavor == CIL_MACRO) {",
      "3813:    cil_tree_log(node, CIL_ERR, \"%s statement is not allowed in optionals\", cil_node_to_string(node));",
      "3814:    rc = SEPOL_ERR;",
      "3815:    goto exit;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3811:    node->flavor == CIL_IN ||",
      "3812:    node->flavor == CIL_BLOCK ||",
      "3813:    node->flavor == CIL_BLOCKABSTRACT ||",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ca339eb49da6fe5b191de5c3ee7196453fa14e23",
      "candidate_info": {
        "commit_hash": "ca339eb49da6fe5b191de5c3ee7196453fa14e23",
        "repo": "SELinuxProject/selinux",
        "commit_url": "https://github.com/SELinuxProject/selinux/commit/ca339eb49da6fe5b191de5c3ee7196453fa14e23",
        "files": [
          "libsepol/cil/src/cil_build_ast.c",
          "libsepol/cil/src/cil_resolve_ast.c"
        ],
        "message": "libsepol/cil: Make invalid statement error messages consistent\n\nUse a consistent style for the error messages when an invalid\nstatement is found within tunableif, in-statement, block, macro,\noptional, and booleanif blocks.\n\nSigned-off-by: James Carter <jwcart2@gmail.com>",
        "before_after_code_files": [
          "libsepol/cil/src/cil_build_ast.c||libsepol/cil/src/cil_build_ast.c",
          "libsepol/cil/src/cil_resolve_ast.c||libsepol/cil/src/cil_resolve_ast.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libsepol/cil/src/cil_build_ast.c||libsepol/cil/src/cil_build_ast.c",
            "libsepol/cil/src/cil_resolve_ast.c||libsepol/cil/src/cil_resolve_ast.c"
          ],
          "candidate": [
            "libsepol/cil/src/cil_build_ast.c||libsepol/cil/src/cil_build_ast.c",
            "libsepol/cil/src/cil_resolve_ast.c||libsepol/cil/src/cil_resolve_ast.c"
          ]
        }
      },
      "candidate_diff": {
        "libsepol/cil/src/cil_build_ast.c||libsepol/cil/src/cil_build_ast.c": [
          "File: libsepol/cil/src/cil_build_ast.c -> libsepol/cil/src/cil_build_ast.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6095:  if (tunif != NULL) {",
          "6096:   if (parse_current->data == CIL_KEY_TUNABLE) {",
          "6097:    rc = SEPOL_ERR;",
          "6100:    goto exit;",
          "6101:   }",
          "6102:  }",
          "",
          "[Removed Lines]",
          "6098:    cil_tree_log(parse_current, CIL_ERR, \"Found tunable\");",
          "6099:    cil_log(CIL_ERR, \"Tunables cannot be defined within tunableif statement\\n\");",
          "",
          "[Added Lines]",
          "6098:    cil_tree_log(parse_current, CIL_ERR, \"%s is not allowed in tunableif\", (char *)parse_current->data);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6105:   if (parse_current->data == CIL_KEY_TUNABLE ||",
          "6106:    parse_current->data == CIL_KEY_IN) {",
          "6107:    rc = SEPOL_ERR;",
          "6110:    goto exit;",
          "6111:   }",
          "6112:  }",
          "",
          "[Removed Lines]",
          "6108:    cil_tree_log(parse_current, CIL_ERR, \"Found in-statement\");",
          "6109:    cil_log(CIL_ERR, \"in-statements cannot be defined within in-statements\\n\");",
          "",
          "[Added Lines]",
          "6107:    cil_tree_log(parse_current, CIL_ERR, \"%s is not allowed in in-statement\", (char *)parse_current->data);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6119:    parse_current->data == CIL_KEY_BLOCKABSTRACT ||",
          "6120:    parse_current->data == CIL_KEY_MACRO) {",
          "6121:    rc = SEPOL_ERR;",
          "6123:    goto exit;",
          "6124:   }",
          "6125:  }",
          "",
          "[Removed Lines]",
          "6122:    cil_tree_log(parse_current, CIL_ERR, \"%s is not allowed in macros\", (char *)parse_current->data);",
          "",
          "[Added Lines]",
          "6120:    cil_tree_log(parse_current, CIL_ERR, \"%s is not allowed in macro\", (char *)parse_current->data);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6131:    parse_current->data == CIL_KEY_BLOCKABSTRACT ||",
          "6132:    parse_current->data == CIL_KEY_MACRO) {",
          "6133:    rc = SEPOL_ERR;",
          "6135:    goto exit;",
          "6136:   }",
          "6137:  }",
          "",
          "[Removed Lines]",
          "6134:    cil_tree_log(parse_current, CIL_ERR, \"%s is not allowed in optionals\", (char *)parse_current->data);",
          "",
          "[Added Lines]",
          "6132:    cil_tree_log(parse_current, CIL_ERR, \"%s is not allowed in optional\", (char *)parse_current->data);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6148:    parse_current->data != CIL_KEY_TYPECHANGE &&",
          "6149:    parse_current->data != CIL_KEY_TYPEMEMBER) {",
          "6150:    rc = SEPOL_ERR;",
          "6152:    if (((struct cil_booleanif*)boolif->data)->preserved_tunable) {",
          "6155:    } else {",
          "6158:    }",
          "6159:    goto exit;",
          "6160:   }",
          "",
          "[Removed Lines]",
          "6151:    cil_tree_log(parse_current, CIL_ERR, \"Found %s\", (char*)parse_current->data);",
          "6153:     cil_log(CIL_ERR, \"%s cannot be defined within tunableif statement (treated as a booleanif due to preserve-tunables)\\n\",",
          "6154:       (char*)parse_current->data);",
          "6156:     cil_log(CIL_ERR, \"%s cannot be defined within booleanif statement\\n\",",
          "6157:       (char*)parse_current->data);",
          "",
          "[Added Lines]",
          "6150:     cil_tree_log(parse_current, CIL_ERR, \"%s is not allowed in tunableif being treated as a booleanif\", (char *)parse_current->data);",
          "6152:     cil_tree_log(parse_current, CIL_ERR, \"%s is not allowed in booleanif\", (char *)parse_current->data);",
          "",
          "---------------"
        ],
        "libsepol/cil/src/cil_resolve_ast.c||libsepol/cil/src/cil_resolve_ast.c": [
          "File: libsepol/cil/src/cil_resolve_ast.c -> libsepol/cil/src/cil_resolve_ast.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3789:  if (block != NULL) {",
          "3790:   if (node->flavor == CIL_CAT ||",
          "3791:       node->flavor == CIL_SENS) {",
          "3793:    rc = SEPOL_ERR;",
          "3794:    goto exit;",
          "3795:   }",
          "",
          "[Removed Lines]",
          "3792:    cil_tree_log(node, CIL_ERR, \"%s statement is not allowed in blocks\", cil_node_to_string(node));",
          "",
          "[Added Lines]",
          "3792:    cil_tree_log(node, CIL_ERR, \"%s is not allowed in block\", cil_node_to_string(node));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3802:       node->flavor == CIL_BLOCKINHERIT ||",
          "3803:       node->flavor == CIL_BLOCKABSTRACT ||",
          "3804:       node->flavor == CIL_MACRO) {",
          "3806:    rc = SEPOL_ERR;",
          "3807:    goto exit;",
          "3808:   }",
          "",
          "[Removed Lines]",
          "3805:    cil_tree_log(node, CIL_ERR, \"%s statement is not allowed in macros\", cil_node_to_string(node));",
          "",
          "[Added Lines]",
          "3805:    cil_tree_log(node, CIL_ERR, \"%s is not allowed in macro\", cil_node_to_string(node));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3814:    node->flavor == CIL_BLOCK ||",
          "3815:    node->flavor == CIL_BLOCKABSTRACT ||",
          "3816:       node->flavor == CIL_MACRO) {",
          "3818:    rc = SEPOL_ERR;",
          "3819:    goto exit;",
          "3820:   }",
          "",
          "[Removed Lines]",
          "3817:    cil_tree_log(node, CIL_ERR, \"%s statement is not allowed in optionals\", cil_node_to_string(node));",
          "",
          "[Added Lines]",
          "3817:    cil_tree_log(node, CIL_ERR, \"%s is not allowed in optional\", cil_node_to_string(node));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3836:   }",
          "3837:   if (rc == SEPOL_ERR) {",
          "3838:    if (((struct cil_booleanif*)boolif->data)->preserved_tunable) {",
          "3840:    } else {",
          "3842:    }",
          "3843:    goto exit;",
          "3844:   }",
          "",
          "[Removed Lines]",
          "3839:     cil_tree_log(node, CIL_ERR, \"%s statement is not allowed in booleanifs (tunableif treated as a booleanif)\", cil_node_to_string(node));",
          "3841:     cil_tree_log(node, CIL_ERR, \"%s statement is not allowed in booleanifs\", cil_node_to_string(node));",
          "",
          "[Added Lines]",
          "3839:     cil_tree_log(node, CIL_ERR, \"%s is not allowed in tunableif being treated as a booleanif\", cil_node_to_string(node));",
          "3841:     cil_tree_log(node, CIL_ERR, \"%s is not allowed in booleanif\", cil_node_to_string(node));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "05e8f155d5cdbf6f997199a31651d43512605cf3",
      "candidate_info": {
        "commit_hash": "05e8f155d5cdbf6f997199a31651d43512605cf3",
        "repo": "SELinuxProject/selinux",
        "commit_url": "https://github.com/SELinuxProject/selinux/commit/05e8f155d5cdbf6f997199a31651d43512605cf3",
        "files": [
          "libsepol/cil/src/cil_build_ast.c"
        ],
        "message": "libsepol/cil: Refactor the function __cil_build_ast_node_helper()\n\nRefactor the function __cil_build_ast_node_helper() by moving the\ncheck for illegal statements and the large if-then-else statement\nto determine which function to call to parse the policy statements\nto different functions.\n\nThere is no need to keep walking the nodes of a policy statement\nthat has already been completely parsed. This means that the\nremaining nodes of any policy statement that does not contain a list\nof policy statements can be skipped. This was done inconsistently\nbefore. The following policy statements now have all nodes after\nthe first one skipped: blockinherit, blockabstract, classcommon,\nuser, userattribute, userbounds, userprefix, type, typeattribute,\ntypealias, typealiasactual, typebounds, typepermissive, role,\nuserrole, roletype, roletransition, roleallow, roleattribute,\nrolebounds, bool, tunable, typetransition, typechange, typemember,\nsensitivity, sensitivityalias, senistivityaliasactual, category,\ncategoryalias, categoryaliasactual, and ipaddr. The only policy\nstatements that do contain a list of policy statements are:\nblock, in, tunableif, booleanif, true (conditional block), false\n(conditional block), macro, optional, and src_info.\n\nSigned-off-by: James Carter <jwcart2@gmail.com>",
        "before_after_code_files": [
          "libsepol/cil/src/cil_build_ast.c||libsepol/cil/src/cil_build_ast.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libsepol/cil/src/cil_build_ast.c||libsepol/cil/src/cil_build_ast.c"
          ],
          "candidate": [
            "libsepol/cil/src/cil_build_ast.c||libsepol/cil/src/cil_build_ast.c"
          ]
        }
      },
      "candidate_diff": {
        "libsepol/cil/src/cil_build_ast.c||libsepol/cil/src/cil_build_ast.c": [
          "File: libsepol/cil/src/cil_build_ast.c -> libsepol/cil/src/cil_build_ast.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6108:  free(info);",
          "6109: }",
          "6112: {",
          "6140:   if (parse_current->data == CIL_KEY_TUNABLE) {",
          "6142:    cil_tree_log(parse_current, CIL_ERR, \"%s is not allowed in tunableif\", (char *)parse_current->data);",
          "6144:   }",
          "6145:  }",
          "6148:   if (parse_current->data == CIL_KEY_TUNABLE ||",
          "6149:    parse_current->data == CIL_KEY_IN) {",
          "6151:    cil_tree_log(parse_current, CIL_ERR, \"%s is not allowed in in-statement\", (char *)parse_current->data);",
          "6153:   }",
          "6154:  }",
          "6157:   if (parse_current->data == CIL_KEY_TUNABLE ||",
          "6158:    parse_current->data == CIL_KEY_IN ||",
          "6159:    parse_current->data == CIL_KEY_BLOCK ||",
          "6160:    parse_current->data == CIL_KEY_BLOCKINHERIT ||",
          "6161:    parse_current->data == CIL_KEY_BLOCKABSTRACT ||",
          "6162:    parse_current->data == CIL_KEY_MACRO) {",
          "6164:    cil_tree_log(parse_current, CIL_ERR, \"%s is not allowed in macro\", (char *)parse_current->data);",
          "6166:   }",
          "6167:  }",
          "6170:   if (parse_current->data == CIL_KEY_TUNABLE ||",
          "6171:    parse_current->data == CIL_KEY_IN ||",
          "6172:    parse_current->data == CIL_KEY_BLOCK ||",
          "6173:    parse_current->data == CIL_KEY_BLOCKABSTRACT ||",
          "6174:    parse_current->data == CIL_KEY_MACRO) {",
          "6176:    cil_tree_log(parse_current, CIL_ERR, \"%s is not allowed in optional\", (char *)parse_current->data);",
          "6178:   }",
          "6179:  }",
          "6182:   if (parse_current->data != CIL_KEY_TUNABLEIF &&",
          "6183:    parse_current->data != CIL_KEY_CALL &&",
          "6184:    parse_current->data != CIL_KEY_CONDTRUE &&",
          "",
          "[Removed Lines]",
          "6111: int __cil_build_ast_node_helper(struct cil_tree_node *parse_current, uint32_t *finished, void *extra_args)",
          "6113:  struct cil_args_build *args = extra_args;",
          "6114:  struct cil_db *db = args->db;",
          "6115:  struct cil_tree_node *ast_current = args->ast;",
          "6116:  struct cil_tree_node *tunif = args->tunif;",
          "6117:  struct cil_tree_node *in = args->in;",
          "6118:  struct cil_tree_node *macro = args->macro;",
          "6119:  struct cil_tree_node *optional = args->optional;",
          "6120:  struct cil_tree_node *boolif = args->boolif;",
          "6121:  struct cil_tree_node *ast_node = NULL;",
          "6122:  int rc = SEPOL_ERR;",
          "6124:  if (parse_current->parent->cl_head != parse_current) {",
          "6126:   rc = SEPOL_OK;",
          "6127:   goto exit;",
          "6128:  } else if (parse_current->data == NULL) {",
          "6131:   if (parse_current->parent->parent == NULL) {",
          "6132:    rc = SEPOL_OK;",
          "6133:   } else {",
          "6134:    cil_tree_log(parse_current, CIL_ERR, \"Keyword expected after open parenthesis\");",
          "6135:   }",
          "6136:   goto exit;",
          "6137:  }",
          "6139:  if (tunif != NULL) {",
          "6141:    rc = SEPOL_ERR;",
          "6143:    goto exit;",
          "6147:  if (in != NULL) {",
          "6150:    rc = SEPOL_ERR;",
          "6152:    goto exit;",
          "6156:  if (macro != NULL) {",
          "6163:    rc = SEPOL_ERR;",
          "6165:    goto exit;",
          "6169:  if (optional != NULL) {",
          "6175:    rc = SEPOL_ERR;",
          "6177:    goto exit;",
          "6181:  if (boolif != NULL) {",
          "",
          "[Added Lines]",
          "6111: static int check_for_illegal_statement(struct cil_tree_node *parse_current, struct cil_args_build *args)",
          "6113:  if (args->tunif != NULL) {",
          "6116:    return SEPOL_ERR;",
          "6120:  if (args->in != NULL) {",
          "6124:    return SEPOL_ERR;",
          "6128:  if (args->macro != NULL) {",
          "6136:    return SEPOL_ERR;",
          "6140:  if (args->optional != NULL) {",
          "6147:    return SEPOL_ERR;",
          "6151:  if (args->boolif != NULL) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6189:    parse_current->data != CIL_KEY_TYPETRANSITION &&",
          "6190:    parse_current->data != CIL_KEY_TYPECHANGE &&",
          "6191:    parse_current->data != CIL_KEY_TYPEMEMBER) {",
          "6194:     cil_tree_log(parse_current, CIL_ERR, \"%s is not allowed in tunableif being treated as a booleanif\", (char *)parse_current->data);",
          "6195:    } else {",
          "6196:     cil_tree_log(parse_current, CIL_ERR, \"%s is not allowed in booleanif\", (char *)parse_current->data);",
          "6197:    }",
          "6199:   }",
          "6200:  }",
          "6208:  if (parse_current->data == CIL_KEY_BLOCK) {",
          "6210:  } else if (parse_current->data == CIL_KEY_BLOCKINHERIT) {",
          "6212:  } else if (parse_current->data == CIL_KEY_BLOCKABSTRACT) {",
          "6214:  } else if (parse_current->data == CIL_KEY_IN) {",
          "6216:  } else if (parse_current->data == CIL_KEY_CLASS) {",
          "6220:  } else if (parse_current->data == CIL_KEY_CLASSORDER) {",
          "6223:  } else if (parse_current->data == CIL_KEY_MAP_CLASS) {",
          "6226:  } else if (parse_current->data == CIL_KEY_CLASSMAPPING) {",
          "6229:  } else if (parse_current->data == CIL_KEY_CLASSPERMISSION) {",
          "6232:  } else if (parse_current->data == CIL_KEY_CLASSPERMISSIONSET) {",
          "6235:  } else if (parse_current->data == CIL_KEY_COMMON) {",
          "6238:  } else if (parse_current->data == CIL_KEY_CLASSCOMMON) {",
          "6240:  } else if (parse_current->data == CIL_KEY_SID) {",
          "6243:  } else if (parse_current->data == CIL_KEY_SIDCONTEXT) {",
          "6246:  } else if (parse_current->data == CIL_KEY_SIDORDER) {",
          "6249:  } else if (parse_current->data == CIL_KEY_USER) {",
          "6251:  } else if (parse_current->data == CIL_KEY_USERATTRIBUTE) {",
          "6253:  } else if (parse_current->data == CIL_KEY_USERATTRIBUTESET) {",
          "6256:  } else if (parse_current->data == CIL_KEY_USERLEVEL) {",
          "6259:  } else if (parse_current->data == CIL_KEY_USERRANGE) {",
          "6262:  } else if (parse_current->data == CIL_KEY_USERBOUNDS) {",
          "6264:  } else if (parse_current->data == CIL_KEY_USERPREFIX) {",
          "6266:  } else if (parse_current->data == CIL_KEY_SELINUXUSER) {",
          "6269:  } else if (parse_current->data == CIL_KEY_SELINUXUSERDEFAULT) {",
          "6272:  } else if (parse_current->data == CIL_KEY_TYPE) {",
          "6274:  } else if (parse_current->data == CIL_KEY_TYPEATTRIBUTE) {",
          "6276:  } else if (parse_current->data == CIL_KEY_TYPEATTRIBUTESET) {",
          "6279:  } else if (parse_current->data == CIL_KEY_EXPANDTYPEATTRIBUTE) {",
          "6282:  } else if (parse_current->data == CIL_KEY_TYPEALIAS) {",
          "6284:  } else if (parse_current->data == CIL_KEY_TYPEALIASACTUAL) {",
          "6286:  } else if (parse_current->data == CIL_KEY_TYPEBOUNDS) {",
          "6288:  } else if (parse_current->data == CIL_KEY_TYPEPERMISSIVE) {",
          "6290:  } else if (parse_current->data == CIL_KEY_RANGETRANSITION) {",
          "6293:  } else if (parse_current->data == CIL_KEY_ROLE) {",
          "6295:  } else if (parse_current->data == CIL_KEY_USERROLE) {",
          "6297:  } else if (parse_current->data == CIL_KEY_ROLETYPE) {",
          "6299:  } else if (parse_current->data == CIL_KEY_ROLETRANSITION) {",
          "6301:  } else if (parse_current->data == CIL_KEY_ROLEALLOW) {",
          "6303:  } else if (parse_current->data == CIL_KEY_ROLEATTRIBUTE) {",
          "6305:  } else if (parse_current->data == CIL_KEY_ROLEATTRIBUTESET) {",
          "6308:  } else if (parse_current->data == CIL_KEY_ROLEBOUNDS) {",
          "6310:  } else if (parse_current->data == CIL_KEY_BOOL) {",
          "6312:  } else if (parse_current->data == CIL_KEY_BOOLEANIF) {",
          "6314:  } else if(parse_current->data == CIL_KEY_TUNABLE) {",
          "6315:   if (db->preserve_tunables) {",
          "6317:   } else {",
          "6319:   }",
          "6320:  } else if (parse_current->data == CIL_KEY_TUNABLEIF) {",
          "6321:   if (db->preserve_tunables) {",
          "6323:   } else {",
          "6325:   }",
          "6326:  } else if (parse_current->data == CIL_KEY_CONDTRUE) {",
          "6328:  } else if (parse_current->data == CIL_KEY_CONDFALSE) {",
          "6330:  } else if (parse_current->data == CIL_KEY_ALLOW) {",
          "6334:  } else if (parse_current->data == CIL_KEY_AUDITALLOW) {",
          "6337:  } else if (parse_current->data == CIL_KEY_DONTAUDIT) {",
          "6340:  } else if (parse_current->data == CIL_KEY_NEVERALLOW) {",
          "6343:  } else if (parse_current->data == CIL_KEY_ALLOWX) {",
          "6346:  } else if (parse_current->data == CIL_KEY_AUDITALLOWX) {",
          "6349:  } else if (parse_current->data == CIL_KEY_DONTAUDITX) {",
          "6352:  } else if (parse_current->data == CIL_KEY_NEVERALLOWX) {",
          "6355:  } else if (parse_current->data == CIL_KEY_PERMISSIONX) {",
          "6358:  } else if (parse_current->data == CIL_KEY_TYPETRANSITION) {",
          "6360:  } else if (parse_current->data == CIL_KEY_TYPECHANGE) {",
          "6362:  } else if (parse_current->data == CIL_KEY_TYPEMEMBER) {",
          "6364:  } else if (parse_current->data == CIL_KEY_SENSITIVITY) {",
          "6366:  } else if (parse_current->data == CIL_KEY_SENSALIAS) {",
          "6368:  } else if (parse_current->data == CIL_KEY_SENSALIASACTUAL) {",
          "6370:  } else if (parse_current->data == CIL_KEY_CATEGORY) {",
          "6372:  } else if (parse_current->data == CIL_KEY_CATALIAS) {",
          "6374:  } else if (parse_current->data == CIL_KEY_CATALIASACTUAL) {",
          "6376:  } else if (parse_current->data == CIL_KEY_CATSET) {",
          "6379:  } else if (parse_current->data == CIL_KEY_CATORDER) {",
          "6382:  } else if (parse_current->data == CIL_KEY_SENSITIVITYORDER) {",
          "6385:  } else if (parse_current->data == CIL_KEY_SENSCAT) {",
          "6388:  } else if (parse_current->data == CIL_KEY_LEVEL) {",
          "6391:  } else if (parse_current->data == CIL_KEY_LEVELRANGE) {",
          "6394:  } else if (parse_current->data == CIL_KEY_CONSTRAIN) {",
          "6397:  } else if (parse_current->data == CIL_KEY_MLSCONSTRAIN) {",
          "6400:  } else if (parse_current->data == CIL_KEY_VALIDATETRANS) {",
          "6403:  } else if (parse_current->data == CIL_KEY_MLSVALIDATETRANS) {",
          "6406:  } else if (parse_current->data == CIL_KEY_CONTEXT) {",
          "6409:  } else if (parse_current->data == CIL_KEY_FILECON) {",
          "6412:  } else if (parse_current->data == CIL_KEY_IBPKEYCON) {",
          "6415:  } else if (parse_current->data == CIL_KEY_IBENDPORTCON) {",
          "6418:  } else if (parse_current->data == CIL_KEY_PORTCON) {",
          "6421:  } else if (parse_current->data == CIL_KEY_NODECON) {",
          "6424:  } else if (parse_current->data == CIL_KEY_GENFSCON) {",
          "6427:  } else if (parse_current->data == CIL_KEY_NETIFCON) {",
          "6430:  } else if (parse_current->data == CIL_KEY_PIRQCON) {",
          "6433:  } else if (parse_current->data == CIL_KEY_IOMEMCON) {",
          "6436:  } else if (parse_current->data == CIL_KEY_IOPORTCON) {",
          "6439:  } else if (parse_current->data == CIL_KEY_PCIDEVICECON) {",
          "6442:  } else if (parse_current->data == CIL_KEY_DEVICETREECON) {",
          "6445:  } else if (parse_current->data == CIL_KEY_FSUSE) {",
          "6448:  } else if (parse_current->data == CIL_KEY_MACRO) {",
          "6450:  } else if (parse_current->data == CIL_KEY_CALL) {",
          "6453:  } else if (parse_current->data == CIL_KEY_POLICYCAP) {",
          "6456:  } else if (parse_current->data == CIL_KEY_OPTIONAL) {",
          "6458:  } else if (parse_current->data == CIL_KEY_IPADDR) {",
          "6460:  } else if (parse_current->data == CIL_KEY_DEFAULTUSER) {",
          "6463:  } else if (parse_current->data == CIL_KEY_DEFAULTROLE) {",
          "6466:  } else if (parse_current->data == CIL_KEY_DEFAULTTYPE) {",
          "6469:  } else if (parse_current->data == CIL_KEY_DEFAULTRANGE) {",
          "6472:  } else if (parse_current->data == CIL_KEY_HANDLEUNKNOWN) {",
          "6475:  } else if (parse_current->data == CIL_KEY_MLS) {",
          "6478:  } else if (parse_current->data == CIL_KEY_SRC_INFO) {",
          "6480:  } else {",
          "6481:   cil_log(CIL_ERR, \"Error: Unknown keyword %s\\n\", (char *)parse_current->data);",
          "6482:   rc = SEPOL_ERR;",
          "6483:  }",
          "6485:  if (rc == SEPOL_OK) {",
          "6488:   } else {",
          "6490:   }",
          "6494:  } else {",
          "6496:  }",
          "6500: }",
          "6503: {",
          "6504:  struct cil_args_build *args = extra_args;",
          "6509:  }",
          "6513:  }",
          "6517:  }",
          "6521:  }",
          "6524:   args->boolif = ast;",
          "6525:  }",
          "",
          "[Removed Lines]",
          "6192:    rc = SEPOL_ERR;",
          "6193:    if (((struct cil_booleanif*)boolif->data)->preserved_tunable) {",
          "6198:    goto exit;",
          "6202:  cil_tree_node_init(&ast_node);",
          "6204:  ast_node->parent = ast_current;",
          "6205:  ast_node->line = parse_current->line;",
          "6206:  ast_node->hll_offset = parse_current->hll_offset;",
          "6209:   rc = cil_gen_block(db, parse_current, ast_node, 0);",
          "6211:   rc = cil_gen_blockinherit(db, parse_current, ast_node);",
          "6213:   rc = cil_gen_blockabstract(db, parse_current, ast_node);",
          "6215:   rc = cil_gen_in(db, parse_current, ast_node);",
          "6217:   rc = cil_gen_class(db, parse_current, ast_node);",
          "6221:   rc = cil_gen_classorder(db, parse_current, ast_node);",
          "6224:   rc = cil_gen_map_class(db, parse_current, ast_node);",
          "6227:   rc = cil_gen_classmapping(db, parse_current, ast_node);",
          "6230:   rc = cil_gen_classpermission(db, parse_current, ast_node);",
          "6233:   rc = cil_gen_classpermissionset(db, parse_current, ast_node);",
          "6236:   rc = cil_gen_common(db, parse_current, ast_node);",
          "6239:   rc = cil_gen_classcommon(db, parse_current, ast_node);",
          "6241:   rc = cil_gen_sid(db, parse_current, ast_node);",
          "6244:   rc = cil_gen_sidcontext(db, parse_current, ast_node);",
          "6247:   rc = cil_gen_sidorder(db, parse_current, ast_node);",
          "6250:   rc = cil_gen_user(db, parse_current, ast_node);",
          "6252:   rc = cil_gen_userattribute(db, parse_current, ast_node);",
          "6254:   rc = cil_gen_userattributeset(db, parse_current, ast_node);",
          "6257:   rc = cil_gen_userlevel(db, parse_current, ast_node);",
          "6260:   rc = cil_gen_userrange(db, parse_current, ast_node);",
          "6263:   rc = cil_gen_bounds(db, parse_current, ast_node, CIL_USER);",
          "6265:   rc = cil_gen_userprefix(db, parse_current, ast_node);",
          "6267:   rc = cil_gen_selinuxuser(db, parse_current, ast_node);",
          "6270:   rc = cil_gen_selinuxuserdefault(db, parse_current, ast_node);",
          "6273:   rc = cil_gen_type(db, parse_current, ast_node);",
          "6275:   rc = cil_gen_typeattribute(db, parse_current, ast_node);",
          "6277:   rc = cil_gen_typeattributeset(db, parse_current, ast_node);",
          "6280:   rc = cil_gen_expandtypeattribute(db, parse_current, ast_node);",
          "6283:   rc = cil_gen_alias(db, parse_current, ast_node, CIL_TYPEALIAS);",
          "6285:   rc = cil_gen_aliasactual(db, parse_current, ast_node, CIL_TYPEALIASACTUAL);",
          "6287:   rc = cil_gen_bounds(db, parse_current, ast_node, CIL_TYPE);",
          "6289:   rc = cil_gen_typepermissive(db, parse_current, ast_node);",
          "6291:   rc = cil_gen_rangetransition(db, parse_current, ast_node);",
          "6294:   rc = cil_gen_role(db, parse_current, ast_node);",
          "6296:   rc = cil_gen_userrole(db, parse_current, ast_node);",
          "6298:   rc = cil_gen_roletype(db, parse_current, ast_node);",
          "6300:   rc = cil_gen_roletransition(parse_current, ast_node);",
          "6302:   rc = cil_gen_roleallow(db, parse_current, ast_node);",
          "6304:   rc = cil_gen_roleattribute(db, parse_current, ast_node);",
          "6306:   rc = cil_gen_roleattributeset(db, parse_current, ast_node);",
          "6309:   rc = cil_gen_bounds(db, parse_current, ast_node, CIL_ROLE);",
          "6311:   rc = cil_gen_bool(db, parse_current, ast_node, CIL_FALSE);",
          "6313:   rc = cil_gen_boolif(db, parse_current, ast_node, CIL_FALSE);",
          "6316:    rc = cil_gen_bool(db, parse_current, ast_node, CIL_TRUE);",
          "6318:    rc = cil_gen_tunable(db, parse_current, ast_node);",
          "6322:    rc = cil_gen_boolif(db, parse_current, ast_node, CIL_TRUE);",
          "6324:    rc = cil_gen_tunif(db, parse_current, ast_node);",
          "6327:   rc = cil_gen_condblock(db, parse_current, ast_node, CIL_CONDTRUE);",
          "6329:   rc = cil_gen_condblock(db, parse_current, ast_node, CIL_CONDFALSE);",
          "6331:   rc = cil_gen_avrule(parse_current, ast_node, CIL_AVRULE_ALLOWED);",
          "6335:   rc = cil_gen_avrule(parse_current, ast_node, CIL_AVRULE_AUDITALLOW);",
          "6338:   rc = cil_gen_avrule(parse_current, ast_node, CIL_AVRULE_DONTAUDIT);",
          "6341:   rc = cil_gen_avrule(parse_current, ast_node, CIL_AVRULE_NEVERALLOW);",
          "6344:   rc = cil_gen_avrulex(parse_current, ast_node, CIL_AVRULE_ALLOWED);",
          "6347:   rc = cil_gen_avrulex(parse_current, ast_node, CIL_AVRULE_AUDITALLOW);",
          "6350:   rc = cil_gen_avrulex(parse_current, ast_node, CIL_AVRULE_DONTAUDIT);",
          "6353:   rc = cil_gen_avrulex(parse_current, ast_node, CIL_AVRULE_NEVERALLOW);",
          "6356:   rc = cil_gen_permissionx(db, parse_current, ast_node);",
          "6359:   rc = cil_gen_typetransition(db, parse_current, ast_node);",
          "6361:   rc = cil_gen_type_rule(parse_current, ast_node, CIL_TYPE_CHANGE);",
          "6363:   rc = cil_gen_type_rule(parse_current, ast_node, CIL_TYPE_MEMBER);",
          "6365:   rc = cil_gen_sensitivity(db, parse_current, ast_node);",
          "6367:   rc = cil_gen_alias(db, parse_current, ast_node, CIL_SENSALIAS);",
          "6369:   rc = cil_gen_aliasactual(db, parse_current, ast_node, CIL_SENSALIASACTUAL);",
          "6371:   rc = cil_gen_category(db, parse_current, ast_node);",
          "6373:   rc = cil_gen_alias(db, parse_current, ast_node, CIL_CATALIAS);",
          "6375:   rc = cil_gen_aliasactual(db, parse_current, ast_node, CIL_CATALIASACTUAL);",
          "6377:   rc = cil_gen_catset(db, parse_current, ast_node);",
          "6380:   rc = cil_gen_catorder(db, parse_current, ast_node);",
          "6383:   rc = cil_gen_sensitivityorder(db, parse_current, ast_node);",
          "6386:   rc = cil_gen_senscat(db, parse_current, ast_node);",
          "6389:   rc = cil_gen_level(db, parse_current, ast_node);",
          "6392:   rc = cil_gen_levelrange(db, parse_current, ast_node);",
          "6395:   rc = cil_gen_constrain(db, parse_current, ast_node, CIL_CONSTRAIN);",
          "6398:   rc = cil_gen_constrain(db, parse_current, ast_node, CIL_MLSCONSTRAIN);",
          "6401:   rc = cil_gen_validatetrans(db, parse_current, ast_node, CIL_VALIDATETRANS);",
          "6404:   rc = cil_gen_validatetrans(db, parse_current, ast_node, CIL_MLSVALIDATETRANS);",
          "6407:   rc = cil_gen_context(db, parse_current, ast_node);",
          "6410:   rc = cil_gen_filecon(db, parse_current, ast_node);",
          "6413:   rc = cil_gen_ibpkeycon(db, parse_current, ast_node);",
          "6416:   rc = cil_gen_ibendportcon(db, parse_current, ast_node);",
          "6419:   rc = cil_gen_portcon(db, parse_current, ast_node);",
          "6422:   rc = cil_gen_nodecon(db, parse_current, ast_node);",
          "6425:   rc = cil_gen_genfscon(db, parse_current, ast_node);",
          "6428:   rc = cil_gen_netifcon(db, parse_current, ast_node);",
          "6431:   rc = cil_gen_pirqcon(db, parse_current, ast_node);",
          "6434:   rc = cil_gen_iomemcon(db, parse_current, ast_node);",
          "6437:   rc = cil_gen_ioportcon(db, parse_current, ast_node);",
          "6440:   rc = cil_gen_pcidevicecon(db, parse_current, ast_node);",
          "6443:   rc = cil_gen_devicetreecon(db, parse_current, ast_node);",
          "6446:   rc = cil_gen_fsuse(db, parse_current, ast_node);",
          "6449:   rc = cil_gen_macro(db, parse_current, ast_node);",
          "6451:   rc = cil_gen_call(db, parse_current, ast_node);",
          "6454:   rc = cil_gen_policycap(db, parse_current, ast_node);",
          "6457:   rc = cil_gen_optional(db, parse_current, ast_node);",
          "6459:   rc = cil_gen_ipaddr(db, parse_current, ast_node);",
          "6461:   rc = cil_gen_default(parse_current, ast_node, CIL_DEFAULTUSER);",
          "6464:   rc = cil_gen_default(parse_current, ast_node, CIL_DEFAULTROLE);",
          "6467:   rc = cil_gen_default(parse_current, ast_node, CIL_DEFAULTTYPE);",
          "6470:   rc = cil_gen_defaultrange(parse_current, ast_node);",
          "6473:   rc = cil_gen_handleunknown(parse_current, ast_node);",
          "6476:   rc = cil_gen_mls(parse_current, ast_node);",
          "6479:   rc = cil_gen_src_info(parse_current, ast_node);",
          "6486:   if (ast_current->cl_head == NULL) {",
          "6487:    ast_current->cl_head = ast_node;",
          "6489:    ast_current->cl_tail->next = ast_node;",
          "6491:   ast_current->cl_tail = ast_node;",
          "6492:   ast_current = ast_node;",
          "6493:   args->ast = ast_current;",
          "6495:   cil_tree_node_destroy(&ast_node);",
          "6498: exit:",
          "6499:  return rc;",
          "6502: int __cil_build_ast_first_child_helper(__attribute__((unused)) struct cil_tree_node *parse_current, void *extra_args)",
          "6505:  struct cil_tree_node *ast = args->ast;",
          "6507:  if (ast->flavor == CIL_TUNABLEIF) {",
          "6508:   args->tunif = ast;",
          "6511:  if (ast->flavor == CIL_IN) {",
          "6512:   args->in = ast;",
          "6515:  if (ast->flavor == CIL_MACRO) {",
          "6516:   args->macro = ast;",
          "6519:  if (ast->flavor == CIL_OPTIONAL) {",
          "6520:   args->optional = ast;",
          "6523:  if (ast->flavor == CIL_BOOLEANIF) {",
          "",
          "[Added Lines]",
          "6162:    if (((struct cil_booleanif*)args->boolif->data)->preserved_tunable) {",
          "6167:    return SEPOL_ERR;",
          "6171:  return SEPOL_OK;",
          "6172: }",
          "6174: static struct cil_tree_node * parse_statement(struct cil_db *db, struct cil_tree_node *parse_current, struct cil_tree_node *ast_parent)",
          "6175: {",
          "6176:  struct cil_tree_node *new_ast_node = NULL;",
          "6177:  int rc = SEPOL_ERR;",
          "6179:  cil_tree_node_init(&new_ast_node);",
          "6180:  new_ast_node->parent = ast_parent;",
          "6181:  new_ast_node->line = parse_current->line;",
          "6182:  new_ast_node->hll_offset = parse_current->hll_offset;",
          "6185:   rc = cil_gen_block(db, parse_current, new_ast_node, 0);",
          "6187:   rc = cil_gen_blockinherit(db, parse_current, new_ast_node);",
          "6189:   rc = cil_gen_blockabstract(db, parse_current, new_ast_node);",
          "6191:   rc = cil_gen_in(db, parse_current, new_ast_node);",
          "6193:   rc = cil_gen_class(db, parse_current, new_ast_node);",
          "6195:   rc = cil_gen_classorder(db, parse_current, new_ast_node);",
          "6197:   rc = cil_gen_map_class(db, parse_current, new_ast_node);",
          "6199:   rc = cil_gen_classmapping(db, parse_current, new_ast_node);",
          "6201:   rc = cil_gen_classpermission(db, parse_current, new_ast_node);",
          "6203:   rc = cil_gen_classpermissionset(db, parse_current, new_ast_node);",
          "6205:   rc = cil_gen_common(db, parse_current, new_ast_node);",
          "6207:   rc = cil_gen_classcommon(db, parse_current, new_ast_node);",
          "6209:   rc = cil_gen_sid(db, parse_current, new_ast_node);",
          "6211:   rc = cil_gen_sidcontext(db, parse_current, new_ast_node);",
          "6213:   rc = cil_gen_sidorder(db, parse_current, new_ast_node);",
          "6215:   rc = cil_gen_user(db, parse_current, new_ast_node);",
          "6217:   rc = cil_gen_userattribute(db, parse_current, new_ast_node);",
          "6219:   rc = cil_gen_userattributeset(db, parse_current, new_ast_node);",
          "6221:   rc = cil_gen_userlevel(db, parse_current, new_ast_node);",
          "6223:   rc = cil_gen_userrange(db, parse_current, new_ast_node);",
          "6225:   rc = cil_gen_bounds(db, parse_current, new_ast_node, CIL_USER);",
          "6227:   rc = cil_gen_userprefix(db, parse_current, new_ast_node);",
          "6229:   rc = cil_gen_selinuxuser(db, parse_current, new_ast_node);",
          "6231:   rc = cil_gen_selinuxuserdefault(db, parse_current, new_ast_node);",
          "6233:   rc = cil_gen_type(db, parse_current, new_ast_node);",
          "6235:   rc = cil_gen_typeattribute(db, parse_current, new_ast_node);",
          "6237:   rc = cil_gen_typeattributeset(db, parse_current, new_ast_node);",
          "6239:   rc = cil_gen_expandtypeattribute(db, parse_current, new_ast_node);",
          "6241:   rc = cil_gen_alias(db, parse_current, new_ast_node, CIL_TYPEALIAS);",
          "6243:   rc = cil_gen_aliasactual(db, parse_current, new_ast_node, CIL_TYPEALIASACTUAL);",
          "6245:   rc = cil_gen_bounds(db, parse_current, new_ast_node, CIL_TYPE);",
          "6247:   rc = cil_gen_typepermissive(db, parse_current, new_ast_node);",
          "6249:   rc = cil_gen_rangetransition(db, parse_current, new_ast_node);",
          "6251:   rc = cil_gen_role(db, parse_current, new_ast_node);",
          "6253:   rc = cil_gen_userrole(db, parse_current, new_ast_node);",
          "6255:   rc = cil_gen_roletype(db, parse_current, new_ast_node);",
          "6257:   rc = cil_gen_roletransition(parse_current, new_ast_node);",
          "6259:   rc = cil_gen_roleallow(db, parse_current, new_ast_node);",
          "6261:   rc = cil_gen_roleattribute(db, parse_current, new_ast_node);",
          "6263:   rc = cil_gen_roleattributeset(db, parse_current, new_ast_node);",
          "6265:   rc = cil_gen_bounds(db, parse_current, new_ast_node, CIL_ROLE);",
          "6267:   rc = cil_gen_bool(db, parse_current, new_ast_node, CIL_FALSE);",
          "6269:   rc = cil_gen_boolif(db, parse_current, new_ast_node, CIL_FALSE);",
          "6272:    rc = cil_gen_bool(db, parse_current, new_ast_node, CIL_TRUE);",
          "6274:    rc = cil_gen_tunable(db, parse_current, new_ast_node);",
          "6278:    rc = cil_gen_boolif(db, parse_current, new_ast_node, CIL_TRUE);",
          "6280:    rc = cil_gen_tunif(db, parse_current, new_ast_node);",
          "6283:   rc = cil_gen_condblock(db, parse_current, new_ast_node, CIL_CONDTRUE);",
          "6285:   rc = cil_gen_condblock(db, parse_current, new_ast_node, CIL_CONDFALSE);",
          "6287:   rc = cil_gen_avrule(parse_current, new_ast_node, CIL_AVRULE_ALLOWED);",
          "6289:   rc = cil_gen_avrule(parse_current, new_ast_node, CIL_AVRULE_AUDITALLOW);",
          "6291:   rc = cil_gen_avrule(parse_current, new_ast_node, CIL_AVRULE_DONTAUDIT);",
          "6293:   rc = cil_gen_avrule(parse_current, new_ast_node, CIL_AVRULE_NEVERALLOW);",
          "6295:   rc = cil_gen_avrulex(parse_current, new_ast_node, CIL_AVRULE_ALLOWED);",
          "6297:   rc = cil_gen_avrulex(parse_current, new_ast_node, CIL_AVRULE_AUDITALLOW);",
          "6299:   rc = cil_gen_avrulex(parse_current, new_ast_node, CIL_AVRULE_DONTAUDIT);",
          "6301:   rc = cil_gen_avrulex(parse_current, new_ast_node, CIL_AVRULE_NEVERALLOW);",
          "6303:   rc = cil_gen_permissionx(db, parse_current, new_ast_node);",
          "6305:   rc = cil_gen_typetransition(db, parse_current, new_ast_node);",
          "6307:   rc = cil_gen_type_rule(parse_current, new_ast_node, CIL_TYPE_CHANGE);",
          "6309:   rc = cil_gen_type_rule(parse_current, new_ast_node, CIL_TYPE_MEMBER);",
          "6311:   rc = cil_gen_sensitivity(db, parse_current, new_ast_node);",
          "6313:   rc = cil_gen_alias(db, parse_current, new_ast_node, CIL_SENSALIAS);",
          "6315:   rc = cil_gen_aliasactual(db, parse_current, new_ast_node, CIL_SENSALIASACTUAL);",
          "6317:   rc = cil_gen_category(db, parse_current, new_ast_node);",
          "6319:   rc = cil_gen_alias(db, parse_current, new_ast_node, CIL_CATALIAS);",
          "6321:   rc = cil_gen_aliasactual(db, parse_current, new_ast_node, CIL_CATALIASACTUAL);",
          "6323:   rc = cil_gen_catset(db, parse_current, new_ast_node);",
          "6325:   rc = cil_gen_catorder(db, parse_current, new_ast_node);",
          "6327:   rc = cil_gen_sensitivityorder(db, parse_current, new_ast_node);",
          "6329:   rc = cil_gen_senscat(db, parse_current, new_ast_node);",
          "6331:   rc = cil_gen_level(db, parse_current, new_ast_node);",
          "6333:   rc = cil_gen_levelrange(db, parse_current, new_ast_node);",
          "6335:   rc = cil_gen_constrain(db, parse_current, new_ast_node, CIL_CONSTRAIN);",
          "6337:   rc = cil_gen_constrain(db, parse_current, new_ast_node, CIL_MLSCONSTRAIN);",
          "6339:   rc = cil_gen_validatetrans(db, parse_current, new_ast_node, CIL_VALIDATETRANS);",
          "6341:   rc = cil_gen_validatetrans(db, parse_current, new_ast_node, CIL_MLSVALIDATETRANS);",
          "6343:   rc = cil_gen_context(db, parse_current, new_ast_node);",
          "6345:   rc = cil_gen_filecon(db, parse_current, new_ast_node);",
          "6347:   rc = cil_gen_ibpkeycon(db, parse_current, new_ast_node);",
          "6349:   rc = cil_gen_ibendportcon(db, parse_current, new_ast_node);",
          "6351:   rc = cil_gen_portcon(db, parse_current, new_ast_node);",
          "6353:   rc = cil_gen_nodecon(db, parse_current, new_ast_node);",
          "6355:   rc = cil_gen_genfscon(db, parse_current, new_ast_node);",
          "6357:   rc = cil_gen_netifcon(db, parse_current, new_ast_node);",
          "6359:   rc = cil_gen_pirqcon(db, parse_current, new_ast_node);",
          "6361:   rc = cil_gen_iomemcon(db, parse_current, new_ast_node);",
          "6363:   rc = cil_gen_ioportcon(db, parse_current, new_ast_node);",
          "6365:   rc = cil_gen_pcidevicecon(db, parse_current, new_ast_node);",
          "6367:   rc = cil_gen_devicetreecon(db, parse_current, new_ast_node);",
          "6369:   rc = cil_gen_fsuse(db, parse_current, new_ast_node);",
          "6371:   rc = cil_gen_macro(db, parse_current, new_ast_node);",
          "6373:   rc = cil_gen_call(db, parse_current, new_ast_node);",
          "6375:   rc = cil_gen_policycap(db, parse_current, new_ast_node);",
          "6377:   rc = cil_gen_optional(db, parse_current, new_ast_node);",
          "6379:   rc = cil_gen_ipaddr(db, parse_current, new_ast_node);",
          "6381:   rc = cil_gen_default(parse_current, new_ast_node, CIL_DEFAULTUSER);",
          "6383:   rc = cil_gen_default(parse_current, new_ast_node, CIL_DEFAULTROLE);",
          "6385:   rc = cil_gen_default(parse_current, new_ast_node, CIL_DEFAULTTYPE);",
          "6387:   rc = cil_gen_defaultrange(parse_current, new_ast_node);",
          "6389:   rc = cil_gen_handleunknown(parse_current, new_ast_node);",
          "6391:   rc = cil_gen_mls(parse_current, new_ast_node);",
          "6393:   rc = cil_gen_src_info(parse_current, new_ast_node);",
          "6400:   if (ast_parent->cl_head == NULL) {",
          "6401:    ast_parent->cl_head = new_ast_node;",
          "6403:    ast_parent->cl_tail->next = new_ast_node;",
          "6405:   ast_parent->cl_tail = new_ast_node;",
          "6407:   cil_tree_node_destroy(&new_ast_node);",
          "6408:   new_ast_node = NULL;",
          "6411:  return new_ast_node;",
          "6414: int __cil_build_ast_node_helper(struct cil_tree_node *parse_current, uint32_t *finished, void *extra_args)",
          "6417:  struct cil_tree_node *new_ast_node = NULL;",
          "6418:  int rc = SEPOL_ERR;",
          "6420:  if (parse_current->parent->cl_head != parse_current) {",
          "6422:   return SEPOL_OK;",
          "6423:  } else if (parse_current->data == NULL) {",
          "6426:   if (parse_current->parent->parent == NULL) {",
          "6427:    return SEPOL_OK;",
          "6428:   } else {",
          "6429:    cil_tree_log(parse_current, CIL_ERR, \"Keyword expected after open parenthesis\");",
          "6430:    return SEPOL_ERR;",
          "6431:   }",
          "6434:  rc = check_for_illegal_statement(parse_current, args);",
          "6435:  if (rc != SEPOL_OK) {",
          "6436:   return SEPOL_ERR;",
          "6439:  new_ast_node = parse_statement(args->db, parse_current, args->ast);",
          "6440:  if (!new_ast_node) {",
          "6441:   return SEPOL_ERR;",
          "6444:  args->ast = new_ast_node;",
          "6446:  if (parse_current->data != CIL_KEY_BLOCK &&",
          "6447:   parse_current->data != CIL_KEY_IN &&",
          "6448:   parse_current->data != CIL_KEY_TUNABLEIF &&",
          "6449:   parse_current->data != CIL_KEY_BOOLEANIF &&",
          "6450:   parse_current->data != CIL_KEY_CONDTRUE &&",
          "6451:   parse_current->data != CIL_KEY_CONDFALSE &&",
          "6452:   parse_current->data != CIL_KEY_MACRO &&",
          "6453:   parse_current->data != CIL_KEY_OPTIONAL &&",
          "6454:   parse_current->data != CIL_KEY_SRC_INFO) {",
          "6459:  return SEPOL_OK;",
          "6460: }",
          "6462: int __cil_build_ast_first_child_helper(__attribute__((unused)) struct cil_tree_node *parse_current, void *extra_args)",
          "6463: {",
          "6464:  struct cil_args_build *args = extra_args;",
          "6465:  struct cil_tree_node *ast = args->ast;",
          "6467:  if (ast->flavor == CIL_TUNABLEIF) {",
          "6468:   args->tunif = ast;",
          "6469:  } else if (ast->flavor == CIL_IN) {",
          "6470:   args->in = ast;",
          "6471:  } else if (ast->flavor == CIL_MACRO) {",
          "6472:   args->macro = ast;",
          "6473:  } else if (ast->flavor == CIL_OPTIONAL) {",
          "6474:   args->optional = ast;",
          "6475:  } else if (ast->flavor == CIL_BOOLEANIF) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}