{
  "cve_id": "CVE-2011-4594",
  "cve_desc": "The __sys_sendmsg function in net/socket.c in the Linux kernel before 3.1 allows local users to cause a denial of service (system crash) via crafted use of the sendmmsg system call, leading to an incorrect pointer dereference.",
  "repo": "torvalds/linux",
  "patch_hash": "bc909d9ddbf7778371e36a651d6e4194b1cc7d4c",
  "patch_info": {
    "commit_hash": "bc909d9ddbf7778371e36a651d6e4194b1cc7d4c",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/bc909d9ddbf7778371e36a651d6e4194b1cc7d4c",
    "files": [
      "net/socket.c"
    ],
    "message": "sendmmsg/sendmsg: fix unsafe user pointer access\n\nDereferencing a user pointer directly from kernel-space without going\nthrough the copy_from_user family of functions is a bad idea. Two of\nsuch usages can be found in the sendmsg code path called from sendmmsg,\nadded by\n\ncommit c71d8ebe7a4496fb7231151cb70a6baa0cb56f9a upstream.\ncommit 5b47b8038f183b44d2d8ff1c7d11a5c1be706b34 in the 3.0-stable tree.\n\nUsages are performed through memcmp() and memcpy() directly. Fix those\nby using the already copied msg_sys structure instead of the __user *msg\nstructure. Note that msg_sys can be set to NULL by verify_compat_iovec()\nor verify_iovec(), which requires additional NULL pointer checks.\n\nSigned-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>\nSigned-off-by: David Goulet <dgoulet@ev0ke.net>\nCC: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>\nCC: Anton Blanchard <anton@samba.org>\nCC: David S. Miller <davem@davemloft.net>\nCC: stable <stable@kernel.org>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "net/socket.c||net/socket.c"
    ]
  },
  "patch_diff": {
    "net/socket.c||net/socket.c": [
      "File: net/socket.c -> net/socket.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1970:       used_address->name_len)) {",
      "1971:   err = sock_sendmsg_nosec(sock, msg_sys, total_len);",
      "1972:   goto out_freectl;",
      "",
      "[Removed Lines]",
      "1968:  if (used_address && used_address->name_len == msg_sys->msg_namelen &&",
      "1969:      !memcmp(&used_address->name, msg->msg_name,",
      "",
      "[Added Lines]",
      "1968:  if (used_address && msg_sys->msg_name &&",
      "1969:      used_address->name_len == msg_sys->msg_namelen &&",
      "1970:      !memcmp(&used_address->name, msg_sys->msg_name,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1979:  if (used_address && err >= 0) {",
      "1980:   used_address->name_len = msg_sys->msg_namelen;",
      "1983:  }",
      "1985: out_freectl:",
      "",
      "[Removed Lines]",
      "1981:   memcpy(&used_address->name, msg->msg_name,",
      "1982:          used_address->name_len);",
      "",
      "[Added Lines]",
      "1982:   if (msg_sys->msg_name)",
      "1983:    memcpy(&used_address->name, msg_sys->msg_name,",
      "1984:           used_address->name_len);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "228e548e602061b08ee8e8966f567c12aa079682",
      "candidate_info": {
        "commit_hash": "228e548e602061b08ee8e8966f567c12aa079682",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/228e548e602061b08ee8e8966f567c12aa079682",
        "files": [
          "arch/powerpc/include/asm/systbl.h",
          "arch/powerpc/include/asm/unistd.h",
          "arch/sparc/include/asm/unistd.h",
          "arch/sparc/kernel/systbls_32.S",
          "arch/sparc/kernel/systbls_64.S",
          "arch/x86/ia32/ia32entry.S",
          "arch/x86/include/asm/unistd_32.h",
          "arch/x86/include/asm/unistd_64.h",
          "arch/x86/kernel/syscall_table_32.S",
          "include/linux/net.h",
          "include/linux/socket.h",
          "include/linux/syscalls.h",
          "include/net/compat.h",
          "kernel/sys_ni.c",
          "net/compat.c",
          "net/socket.c"
        ],
        "message": "net: Add sendmmsg socket system call\n\nThis patch adds a multiple message send syscall and is the send\nversion of the existing recvmmsg syscall. This is heavily\nbased on the patch by Arnaldo that added recvmmsg.\n\nI wrote a microbenchmark to test the performance gains of using\nthis new syscall:\n\nhttp://ozlabs.org/~anton/junkcode/sendmmsg_test.c\n\nThe test was run on a ppc64 box with a 10 Gbit network card. The\nbenchmark can send both UDP and RAW ethernet packets.\n\n64B UDP\n\nbatch   pkts/sec\n1       804570\n2       872800 (+ 8 %)\n4       916556 (+14 %)\n8       939712 (+17 %)\n16      952688 (+18 %)\n32      956448 (+19 %)\n64      964800 (+20 %)\n\n64B raw socket\n\nbatch   pkts/sec\n1       1201449\n2       1350028 (+12 %)\n4       1461416 (+22 %)\n8       1513080 (+26 %)\n16      1541216 (+28 %)\n32      1553440 (+29 %)\n64      1557888 (+30 %)\n\nWe see a 20% improvement in throughput on UDP send and 30%\non raw socket send.\n\n[ Add sparc syscall entries. -DaveM ]\n\nSigned-off-by: Anton Blanchard <anton@samba.org>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "arch/powerpc/include/asm/systbl.h||arch/powerpc/include/asm/systbl.h",
          "arch/powerpc/include/asm/unistd.h||arch/powerpc/include/asm/unistd.h",
          "arch/sparc/include/asm/unistd.h||arch/sparc/include/asm/unistd.h",
          "arch/sparc/kernel/systbls_32.S||arch/sparc/kernel/systbls_32.S",
          "arch/sparc/kernel/systbls_64.S||arch/sparc/kernel/systbls_64.S",
          "arch/x86/ia32/ia32entry.S||arch/x86/ia32/ia32entry.S",
          "arch/x86/include/asm/unistd_32.h||arch/x86/include/asm/unistd_32.h",
          "arch/x86/include/asm/unistd_64.h||arch/x86/include/asm/unistd_64.h",
          "arch/x86/kernel/syscall_table_32.S||arch/x86/kernel/syscall_table_32.S",
          "include/linux/net.h||include/linux/net.h",
          "include/linux/socket.h||include/linux/socket.h",
          "include/linux/syscalls.h||include/linux/syscalls.h",
          "include/net/compat.h||include/net/compat.h",
          "kernel/sys_ni.c||kernel/sys_ni.c",
          "net/compat.c||net/compat.c",
          "net/socket.c||net/socket.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/socket.c||net/socket.c"
          ],
          "candidate": [
            "net/socket.c||net/socket.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/powerpc/include/asm/systbl.h||arch/powerpc/include/asm/systbl.h": [
          "File: arch/powerpc/include/asm/systbl.h -> arch/powerpc/include/asm/systbl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "352: COMPAT_SYS_SPU(open_by_handle_at)",
          "353: COMPAT_SYS_SPU(clock_adjtime)",
          "354: SYSCALL_SPU(syncfs)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "355: COMPAT_SYS_SPU(sendmmsg)",
          "",
          "---------------"
        ],
        "arch/powerpc/include/asm/unistd.h||arch/powerpc/include/asm/unistd.h": [
          "File: arch/powerpc/include/asm/unistd.h -> arch/powerpc/include/asm/unistd.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "371: #define __NR_open_by_handle_at 346",
          "372: #define __NR_clock_adjtime 347",
          "373: #define __NR_syncfs  348",
          "375: #ifdef __KERNEL__",
          "379: #define __NR__exit __NR_exit",
          "380: #define NR_syscalls __NR_syscalls",
          "",
          "[Removed Lines]",
          "377: #define __NR_syscalls  349",
          "",
          "[Added Lines]",
          "374: #define __NR_sendmmsg  349",
          "378: #define __NR_syscalls  350",
          "",
          "---------------"
        ],
        "arch/sparc/include/asm/unistd.h||arch/sparc/include/asm/unistd.h": [
          "File: arch/sparc/include/asm/unistd.h -> arch/sparc/include/asm/unistd.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "404: #define __NR_open_by_handle_at 333",
          "405: #define __NR_clock_adjtime 334",
          "406: #define __NR_syncfs  335",
          "410: #ifdef __32bit_syscall_numbers__",
          "",
          "[Removed Lines]",
          "408: #define NR_syscalls  336",
          "",
          "[Added Lines]",
          "407: #define __NR_sendmmsg  336",
          "409: #define NR_syscalls  337",
          "",
          "---------------"
        ],
        "arch/sparc/kernel/systbls_32.S||arch/sparc/kernel/systbls_32.S": [
          "File: arch/sparc/kernel/systbls_32.S -> arch/sparc/kernel/systbls_32.S"
        ],
        "arch/sparc/kernel/systbls_64.S||arch/sparc/kernel/systbls_64.S": [
          "File: arch/sparc/kernel/systbls_64.S -> arch/sparc/kernel/systbls_64.S",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:  .word compat_sys_pwritev, compat_sys_rt_tgsigqueueinfo, sys_perf_event_open, compat_sys_recvmmsg, sys_fanotify_init",
          "",
          "[Removed Lines]",
          "88:  .word sys_syncfs",
          "",
          "[Added Lines]",
          "88:  .word sys_syncfs, compat_sys_sendmmsg",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "163:  .word sys_pwritev, sys_rt_tgsigqueueinfo, sys_perf_event_open, sys_recvmmsg, sys_fanotify_init",
          "",
          "[Removed Lines]",
          "165:  .word sys_syncfs",
          "",
          "[Added Lines]",
          "165:  .word sys_syncfs, sys_sendmmsg",
          "",
          "---------------"
        ],
        "arch/x86/ia32/ia32entry.S||arch/x86/ia32/ia32entry.S": [
          "File: arch/x86/ia32/ia32entry.S -> arch/x86/ia32/ia32entry.S"
        ],
        "arch/x86/include/asm/unistd_32.h||arch/x86/include/asm/unistd_32.h": [
          "File: arch/x86/include/asm/unistd_32.h -> arch/x86/include/asm/unistd_32.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "350: #define __NR_open_by_handle_at  342",
          "351: #define __NR_clock_adjtime 343",
          "352: #define __NR_syncfs             344",
          "354: #ifdef __KERNEL__",
          "358: #define __ARCH_WANT_IPC_PARSE_VERSION",
          "359: #define __ARCH_WANT_OLD_READDIR",
          "",
          "[Removed Lines]",
          "356: #define NR_syscalls 345",
          "",
          "[Added Lines]",
          "353: #define __NR_sendmmsg  345",
          "357: #define NR_syscalls 346",
          "",
          "---------------"
        ],
        "arch/x86/include/asm/unistd_64.h||arch/x86/include/asm/unistd_64.h": [
          "File: arch/x86/include/asm/unistd_64.h -> arch/x86/include/asm/unistd_64.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "677: __SYSCALL(__NR_clock_adjtime, sys_clock_adjtime)",
          "678: #define __NR_syncfs                             306",
          "679: __SYSCALL(__NR_syncfs, sys_syncfs)",
          "681: #ifndef __NO_STUBS",
          "682: #define __ARCH_WANT_OLD_READDIR",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "680: #define __NR_sendmmsg    307",
          "681: __SYSCALL(__NR_sendmmsg, sys_sendmmsg)",
          "",
          "---------------"
        ],
        "arch/x86/kernel/syscall_table_32.S||arch/x86/kernel/syscall_table_32.S": [
          "File: arch/x86/kernel/syscall_table_32.S -> arch/x86/kernel/syscall_table_32.S"
        ],
        "include/linux/net.h||include/linux/net.h": [
          "File: include/linux/net.h -> include/linux/net.h"
        ],
        "include/linux/socket.h||include/linux/socket.h": [
          "File: include/linux/socket.h -> include/linux/socket.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "334: extern int __sys_recvmmsg(int fd, struct mmsghdr __user *mmsg, unsigned int vlen,",
          "335:      unsigned int flags, struct timespec *timeout);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "336: extern int __sys_sendmmsg(int fd, struct mmsghdr __user *mmsg,",
          "337:      unsigned int vlen, unsigned int flags);",
          "",
          "---------------"
        ],
        "include/linux/syscalls.h||include/linux/syscalls.h": [
          "File: include/linux/syscalls.h -> include/linux/syscalls.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "610: asmlinkage long sys_sendto(int, void __user *, size_t, unsigned,",
          "611:     struct sockaddr __user *, int);",
          "612: asmlinkage long sys_sendmsg(int fd, struct msghdr __user *msg, unsigned flags);",
          "613: asmlinkage long sys_recv(int, void __user *, size_t, unsigned);",
          "614: asmlinkage long sys_recvfrom(int, void __user *, size_t, unsigned,",
          "615:     struct sockaddr __user *, int __user *);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "613: asmlinkage long sys_sendmmsg(int fd, struct mmsghdr __user *msg,",
          "614:         unsigned int vlen, unsigned flags);",
          "",
          "---------------"
        ],
        "include/net/compat.h||include/net/compat.h": [
          "File: include/net/compat.h -> include/net/compat.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: extern int get_compat_msghdr(struct msghdr *, struct compat_msghdr __user *);",
          "44: extern int verify_compat_iovec(struct msghdr *, struct iovec *, struct sockaddr *, int);",
          "45: extern asmlinkage long compat_sys_sendmsg(int,struct compat_msghdr __user *,unsigned);",
          "46: extern asmlinkage long compat_sys_recvmsg(int,struct compat_msghdr __user *,unsigned);",
          "47: extern asmlinkage long compat_sys_recvmmsg(int, struct compat_mmsghdr __user *,",
          "48:         unsigned, unsigned,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: extern asmlinkage long compat_sys_sendmmsg(int, struct compat_mmsghdr __user *,",
          "47:         unsigned, unsigned);",
          "",
          "---------------"
        ],
        "kernel/sys_ni.c||kernel/sys_ni.c": [
          "File: kernel/sys_ni.c -> kernel/sys_ni.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: cond_syscall(compat_sys_getsockopt);",
          "47: cond_syscall(sys_shutdown);",
          "48: cond_syscall(sys_sendmsg);",
          "49: cond_syscall(compat_sys_sendmsg);",
          "50: cond_syscall(sys_recvmsg);",
          "51: cond_syscall(sys_recvmmsg);",
          "52: cond_syscall(compat_sys_recvmsg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: cond_syscall(sys_sendmmsg);",
          "51: cond_syscall(compat_sys_sendmmsg);",
          "",
          "---------------"
        ],
        "net/compat.c||net/compat.c": [
          "File: net/compat.c -> net/compat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "724: #define AL(x) ((x) * sizeof(u32))",
          "726:  AL(0), AL(3), AL(3), AL(3), AL(2), AL(3),",
          "727:  AL(3), AL(3), AL(4), AL(4), AL(4), AL(6),",
          "728:  AL(6), AL(2), AL(5), AL(5), AL(3), AL(3),",
          "730: };",
          "731: #undef AL",
          "",
          "[Removed Lines]",
          "725: static unsigned char nas[20] = {",
          "729:  AL(4), AL(5)",
          "",
          "[Added Lines]",
          "725: static unsigned char nas[21] = {",
          "729:  AL(4), AL(5), AL(4)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "735:  return sys_sendmsg(fd, (struct msghdr __user *)msg, flags | MSG_CMSG_COMPAT);",
          "736: }",
          "738: asmlinkage long compat_sys_recvmsg(int fd, struct compat_msghdr __user *msg, unsigned int flags)",
          "739: {",
          "740:  return sys_recvmsg(fd, (struct msghdr __user *)msg, flags | MSG_CMSG_COMPAT);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "738: asmlinkage long compat_sys_sendmmsg(int fd, struct compat_mmsghdr __user *mmsg,",
          "739:         unsigned vlen, unsigned int flags)",
          "740: {",
          "741:  return __sys_sendmmsg(fd, (struct mmsghdr __user *)mmsg, vlen,",
          "742:          flags | MSG_CMSG_COMPAT);",
          "743: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "780:  u32 a[6];",
          "781:  u32 a0, a1;",
          "784:   return -EINVAL;",
          "785:  if (copy_from_user(a, args, nas[call]))",
          "786:   return -EFAULT;",
          "",
          "[Removed Lines]",
          "783:  if (call < SYS_SOCKET || call > SYS_RECVMMSG)",
          "",
          "[Added Lines]",
          "790:  if (call < SYS_SOCKET || call > SYS_SENDMMSG)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "839:  case SYS_SENDMSG:",
          "840:   ret = compat_sys_sendmsg(a0, compat_ptr(a1), a[2]);",
          "841:   break;",
          "842:  case SYS_RECVMSG:",
          "843:   ret = compat_sys_recvmsg(a0, compat_ptr(a1), a[2]);",
          "844:   break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "849:  case SYS_SENDMMSG:",
          "850:   ret = compat_sys_sendmmsg(a0, compat_ptr(a1), a[2], a[3]);",
          "851:   break;",
          "",
          "---------------"
        ],
        "net/socket.c||net/socket.c": [
          "File: net/socket.c -> net/socket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "551: }",
          "552: EXPORT_SYMBOL(sock_tx_timestamp);",
          "556: {",
          "557:  struct sock_iocb *si = kiocb_to_siocb(iocb);",
          "560:  sock_update_classid(sock->sk);",
          "",
          "[Removed Lines]",
          "554: static inline int __sock_sendmsg(struct kiocb *iocb, struct socket *sock,",
          "555:      struct msghdr *msg, size_t size)",
          "558:  int err;",
          "",
          "[Added Lines]",
          "554: static inline int __sock_sendmsg_nosec(struct kiocb *iocb, struct socket *sock,",
          "555:            struct msghdr *msg, size_t size)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "564:  si->msg = msg;",
          "565:  si->size = size;",
          "571:  return sock->ops->sendmsg(iocb, sock, msg, size);",
          "572: }",
          "574: int sock_sendmsg(struct socket *sock, struct msghdr *msg, size_t size)",
          "575: {",
          "576:  struct kiocb iocb;",
          "",
          "[Removed Lines]",
          "567:  err = security_socket_sendmsg(sock, msg, size);",
          "568:  if (err)",
          "569:   return err;",
          "",
          "[Added Lines]",
          "569: static inline int __sock_sendmsg(struct kiocb *iocb, struct socket *sock,",
          "570:      struct msghdr *msg, size_t size)",
          "571: {",
          "572:  int err = security_socket_sendmsg(sock, msg, size);",
          "574:  return err ?: __sock_sendmsg_nosec(iocb, sock, msg, size);",
          "575: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "586: }",
          "587: EXPORT_SYMBOL(sock_sendmsg);",
          "589: int kernel_sendmsg(struct socket *sock, struct msghdr *msg,",
          "590:      struct kvec *vec, size_t num, size_t size)",
          "591: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "592: int sock_sendmsg_nosec(struct socket *sock, struct msghdr *msg, size_t size)",
          "593: {",
          "594:  struct kiocb iocb;",
          "595:  struct sock_iocb siocb;",
          "596:  int ret;",
          "598:  init_sync_kiocb(&iocb, NULL);",
          "599:  iocb.private = &siocb;",
          "600:  ret = __sock_sendmsg_nosec(&iocb, sock, msg, size);",
          "601:  if (-EIOCBQUEUED == ret)",
          "602:   ret = wait_on_sync_kiocb(&iocb);",
          "603:  return ret;",
          "604: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1863: #define COMPAT_NAMELEN(msg) COMPAT_MSG(msg, msg_namelen)",
          "1864: #define COMPAT_FLAGS(msg) COMPAT_MSG(msg, msg_flags)",
          "1871: {",
          "1872:  struct compat_msghdr __user *msg_compat =",
          "1873:      (struct compat_msghdr __user *)msg;",
          "1875:  struct sockaddr_storage address;",
          "1876:  struct iovec iovstack[UIO_FASTIOV], *iov = iovstack;",
          "1877:  unsigned char ctl[sizeof(struct cmsghdr) + 20]",
          "1878:      __attribute__ ((aligned(sizeof(__kernel_size_t))));",
          "1880:  unsigned char *ctl_buf = ctl;",
          "1882:  int err, ctl_len, iov_size, total_len;",
          "1885:  err = -EFAULT;",
          "1886:  if (MSG_CMSG_COMPAT & flags) {",
          "1888:    return -EFAULT;",
          "1890:   return -EFAULT;",
          "1897:  err = -EMSGSIZE;",
          "1902:  err = -ENOMEM;",
          "1905:   iov = sock_kmalloc(sock->sk, iov_size, GFP_KERNEL);",
          "1906:   if (!iov)",
          "1908:  }",
          "1911:  if (MSG_CMSG_COMPAT & flags) {",
          "1913:        (struct sockaddr *)&address,",
          "1914:        VERIFY_READ);",
          "1915:  } else",
          "1917:        (struct sockaddr *)&address,",
          "1918:        VERIFY_READ);",
          "1919:  if (err < 0)",
          "",
          "[Removed Lines]",
          "1870: SYSCALL_DEFINE3(sendmsg, int, fd, struct msghdr __user *, msg, unsigned, flags)",
          "1874:  struct socket *sock;",
          "1881:  struct msghdr msg_sys;",
          "1883:  int fput_needed;",
          "1887:   if (get_compat_msghdr(&msg_sys, msg_compat))",
          "1889:  } else if (copy_from_user(&msg_sys, msg, sizeof(struct msghdr)))",
          "1892:  sock = sockfd_lookup_light(fd, &err, &fput_needed);",
          "1893:  if (!sock)",
          "1894:   goto out;",
          "1898:  if (msg_sys.msg_iovlen > UIO_MAXIOV)",
          "1899:   goto out_put;",
          "1903:  iov_size = msg_sys.msg_iovlen * sizeof(struct iovec);",
          "1904:  if (msg_sys.msg_iovlen > UIO_FASTIOV) {",
          "1907:    goto out_put;",
          "1912:   err = verify_compat_iovec(&msg_sys, iov,",
          "1916:   err = verify_iovec(&msg_sys, iov,",
          "",
          "[Added Lines]",
          "1883: static int __sys_sendmsg(struct socket *sock, struct msghdr __user *msg,",
          "1884:     struct msghdr *msg_sys, unsigned flags, int nosec)",
          "1898:   if (get_compat_msghdr(msg_sys, msg_compat))",
          "1900:  } else if (copy_from_user(msg_sys, msg, sizeof(struct msghdr)))",
          "1905:  if (msg_sys->msg_iovlen > UIO_MAXIOV)",
          "1906:   goto out;",
          "1910:  iov_size = msg_sys->msg_iovlen * sizeof(struct iovec);",
          "1911:  if (msg_sys->msg_iovlen > UIO_FASTIOV) {",
          "1914:    goto out;",
          "1919:   err = verify_compat_iovec(msg_sys, iov,",
          "1923:   err = verify_iovec(msg_sys, iov,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1923:  err = -ENOBUFS;",
          "1926:   goto out_freeiov;",
          "1928:  if ((MSG_CMSG_COMPAT & flags) && ctl_len) {",
          "1929:   err =",
          "1931:            sizeof(ctl));",
          "1932:   if (err)",
          "1933:    goto out_freeiov;",
          "1936:  } else if (ctl_len) {",
          "1937:   if (ctl_len > sizeof(ctl)) {",
          "1938:    ctl_buf = sock_kmalloc(sock->sk, ctl_len, GFP_KERNEL);",
          "",
          "[Removed Lines]",
          "1925:  if (msg_sys.msg_controllen > INT_MAX)",
          "1927:  ctl_len = msg_sys.msg_controllen;",
          "1930:       cmsghdr_from_user_compat_to_kern(&msg_sys, sock->sk, ctl,",
          "1934:   ctl_buf = msg_sys.msg_control;",
          "1935:   ctl_len = msg_sys.msg_controllen;",
          "",
          "[Added Lines]",
          "1932:  if (msg_sys->msg_controllen > INT_MAX)",
          "1934:  ctl_len = msg_sys->msg_controllen;",
          "1937:       cmsghdr_from_user_compat_to_kern(msg_sys, sock->sk, ctl,",
          "1941:   ctl_buf = msg_sys->msg_control;",
          "1942:   ctl_len = msg_sys->msg_controllen;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1941:   }",
          "1942:   err = -EFAULT;",
          "1948:   if (copy_from_user(ctl_buf,",
          "1950:        ctl_len))",
          "1951:    goto out_freectl;",
          "1953:  }",
          "1956:  if (sock->file->f_flags & O_NONBLOCK)",
          "1960: out_freectl:",
          "1961:  if (ctl_buf != ctl)",
          "",
          "[Removed Lines]",
          "1949:        (void __user __force *)msg_sys.msg_control,",
          "1952:   msg_sys.msg_control = ctl_buf;",
          "1954:  msg_sys.msg_flags = flags;",
          "1957:   msg_sys.msg_flags |= MSG_DONTWAIT;",
          "1958:  err = sock_sendmsg(sock, &msg_sys, total_len);",
          "",
          "[Added Lines]",
          "1956:        (void __user __force *)msg_sys->msg_control,",
          "1959:   msg_sys->msg_control = ctl_buf;",
          "1961:  msg_sys->msg_flags = flags;",
          "1964:   msg_sys->msg_flags |= MSG_DONTWAIT;",
          "1965:  err = (nosec ? sock_sendmsg_nosec : sock_sendmsg)(sock, msg_sys,",
          "1966:          total_len);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1963: out_freeiov:",
          "1964:  if (iov != iovstack)",
          "1965:   sock_kfree_s(sock->sk, iov, iov_size);",
          "1967:  fput_light(sock->file, fput_needed);",
          "1968: out:",
          "1969:  return err;",
          "1970: }",
          "1972: static int __sys_recvmsg(struct socket *sock, struct msghdr __user *msg,",
          "1973:     struct msghdr *msg_sys, unsigned flags, int nosec)",
          "1974: {",
          "",
          "[Removed Lines]",
          "1966: out_put:",
          "",
          "[Added Lines]",
          "1974: out:",
          "1975:  return err;",
          "1976: }",
          "1982: SYSCALL_DEFINE3(sendmsg, int, fd, struct msghdr __user *, msg, unsigned, flags)",
          "1983: {",
          "1984:  int fput_needed, err;",
          "1985:  struct msghdr msg_sys;",
          "1986:  struct socket *sock = sockfd_lookup_light(fd, &err, &fput_needed);",
          "1988:  if (!sock)",
          "1989:   goto out;",
          "1991:  err = __sys_sendmsg(sock, msg, &msg_sys, flags, 0);",
          "2002: int __sys_sendmmsg(int fd, struct mmsghdr __user *mmsg, unsigned int vlen,",
          "2003:      unsigned int flags)",
          "2004: {",
          "2005:  int fput_needed, err, datagrams;",
          "2006:  struct socket *sock;",
          "2007:  struct mmsghdr __user *entry;",
          "2008:  struct compat_mmsghdr __user *compat_entry;",
          "2009:  struct msghdr msg_sys;",
          "2011:  datagrams = 0;",
          "2013:  sock = sockfd_lookup_light(fd, &err, &fput_needed);",
          "2014:  if (!sock)",
          "2015:   return err;",
          "2017:  err = sock_error(sock->sk);",
          "2018:  if (err)",
          "2019:   goto out_put;",
          "2021:  entry = mmsg;",
          "2022:  compat_entry = (struct compat_mmsghdr __user *)mmsg;",
          "2024:  while (datagrams < vlen) {",
          "2028:   if (MSG_CMSG_COMPAT & flags) {",
          "2029:    err = __sys_sendmsg(sock, (struct msghdr __user *)compat_entry,",
          "2030:          &msg_sys, flags, datagrams);",
          "2031:    if (err < 0)",
          "2032:     break;",
          "2033:    err = __put_user(err, &compat_entry->msg_len);",
          "2034:    ++compat_entry;",
          "2035:   } else {",
          "2036:    err = __sys_sendmsg(sock, (struct msghdr __user *)entry,",
          "2037:          &msg_sys, flags, datagrams);",
          "2038:    if (err < 0)",
          "2039:     break;",
          "2040:    err = put_user(err, &entry->msg_len);",
          "2041:    ++entry;",
          "2042:   }",
          "2044:   if (err)",
          "2045:    break;",
          "2046:   ++datagrams;",
          "2047:  }",
          "2049: out_put:",
          "2050:  fput_light(sock->file, fput_needed);",
          "2052:  if (err == 0)",
          "2053:   return datagrams;",
          "2055:  if (datagrams != 0) {",
          "2060:   if (err != -EAGAIN) {",
          "2067:    sock->sk->sk_err = -err;",
          "2068:   }",
          "2070:   return datagrams;",
          "2071:  }",
          "2073:  return err;",
          "2074: }",
          "2076: SYSCALL_DEFINE4(sendmmsg, int, fd, struct mmsghdr __user *, mmsg,",
          "2077:   unsigned int, vlen, unsigned int, flags)",
          "2078: {",
          "2079:  return __sys_sendmmsg(fd, mmsg, vlen, flags);",
          "2080: }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2214: #ifdef __ARCH_WANT_SYS_SOCKETCALL",
          "2216: #define AL(x) ((x) * sizeof(unsigned long))",
          "2218:  AL(0), AL(3), AL(3), AL(3), AL(2), AL(3),",
          "2219:  AL(3), AL(3), AL(4), AL(4), AL(4), AL(6),",
          "2220:  AL(6), AL(2), AL(5), AL(5), AL(3), AL(3),",
          "2222: };",
          "2224: #undef AL",
          "",
          "[Removed Lines]",
          "2217: static const unsigned char nargs[20] = {",
          "2221:  AL(4), AL(5)",
          "",
          "[Added Lines]",
          "2327: static const unsigned char nargs[21] = {",
          "2331:  AL(4), AL(5), AL(4)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2238:  int err;",
          "2239:  unsigned int len;",
          "2242:   return -EINVAL;",
          "2244:  len = nargs[call];",
          "",
          "[Removed Lines]",
          "2241:  if (call < 1 || call > SYS_RECVMMSG)",
          "",
          "[Added Lines]",
          "2351:  if (call < 1 || call > SYS_SENDMMSG)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2313:  case SYS_SENDMSG:",
          "2314:   err = sys_sendmsg(a0, (struct msghdr __user *)a1, a[2]);",
          "2315:   break;",
          "2316:  case SYS_RECVMSG:",
          "2317:   err = sys_recvmsg(a0, (struct msghdr __user *)a1, a[2]);",
          "2318:   break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2426:  case SYS_SENDMMSG:",
          "2427:   err = sys_sendmmsg(a0, (struct mmsghdr __user *)a1, a[2], a[3]);",
          "2428:   break;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c71d8ebe7a4496fb7231151cb70a6baa0cb56f9a",
      "candidate_info": {
        "commit_hash": "c71d8ebe7a4496fb7231151cb70a6baa0cb56f9a",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/c71d8ebe7a4496fb7231151cb70a6baa0cb56f9a",
        "files": [
          "net/socket.c"
        ],
        "message": "net: Fix security_socket_sendmsg() bypass problem.\n\nThe sendmmsg() introduced by commit 228e548e \"net: Add sendmmsg socket system\ncall\" is capable of sending to multiple different destination addresses.\n\nSMACK is using destination's address for checking sendmsg() permission.\nHowever, security_socket_sendmsg() is called for only once even if multiple\ndifferent destination addresses are passed to sendmmsg().\n\nTherefore, we need to call security_socket_sendmsg() for each destination\naddress rather than only the first destination address.\n\nSince calling security_socket_sendmsg() every time when only single destination\naddress was passed to sendmmsg() is a waste of time, omit calling\nsecurity_socket_sendmsg() unless destination address of previous datagram and\nthat of current datagram differs.\n\nSigned-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>\nAcked-by: Anton Blanchard <anton@samba.org>\nCc: stable <stable@kernel.org> [3.0+]\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/socket.c||net/socket.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/socket.c||net/socket.c"
          ],
          "candidate": [
            "net/socket.c||net/socket.c"
          ]
        }
      },
      "candidate_diff": {
        "net/socket.c||net/socket.c": [
          "File: net/socket.c -> net/socket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1871: #define COMPAT_NAMELEN(msg) COMPAT_MSG(msg, msg_namelen)",
          "1872: #define COMPAT_FLAGS(msg) COMPAT_MSG(msg, msg_flags)",
          "1874: static int __sys_sendmsg(struct socket *sock, struct msghdr __user *msg,",
          "1876: {",
          "1877:  struct compat_msghdr __user *msg_compat =",
          "1878:      (struct compat_msghdr __user *)msg;",
          "",
          "[Removed Lines]",
          "1875:     struct msghdr *msg_sys, unsigned flags, int nosec)",
          "",
          "[Added Lines]",
          "1874: struct used_address {",
          "1875:  struct sockaddr_storage name;",
          "1876:  unsigned int name_len;",
          "1877: };",
          "1880:     struct msghdr *msg_sys, unsigned flags,",
          "1881:     struct used_address *used_address)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1954:  if (sock->file->f_flags & O_NONBLOCK)",
          "1955:   msg_sys->msg_flags |= MSG_DONTWAIT;",
          "1959: out_freectl:",
          "1960:  if (ctl_buf != ctl)",
          "",
          "[Removed Lines]",
          "1956:  err = (nosec ? sock_sendmsg_nosec : sock_sendmsg)(sock, msg_sys,",
          "1957:          total_len);",
          "",
          "[Added Lines]",
          "1968:  if (used_address && used_address->name_len == msg_sys->msg_namelen &&",
          "1969:      !memcmp(&used_address->name, msg->msg_name,",
          "1970:       used_address->name_len)) {",
          "1971:   err = sock_sendmsg_nosec(sock, msg_sys, total_len);",
          "1972:   goto out_freectl;",
          "1973:  }",
          "1974:  err = sock_sendmsg(sock, msg_sys, total_len);",
          "1979:  if (used_address && err >= 0) {",
          "1980:   used_address->name_len = msg_sys->msg_namelen;",
          "1981:   memcpy(&used_address->name, msg->msg_name,",
          "1982:          used_address->name_len);",
          "1983:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1979:  if (!sock)",
          "1980:   goto out;",
          "1984:  fput_light(sock->file, fput_needed);",
          "1985: out:",
          "",
          "[Removed Lines]",
          "1982:  err = __sys_sendmsg(sock, msg, &msg_sys, flags, 0);",
          "",
          "[Added Lines]",
          "2008:  err = __sys_sendmsg(sock, msg, &msg_sys, flags, NULL);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1998:  struct mmsghdr __user *entry;",
          "1999:  struct compat_mmsghdr __user *compat_entry;",
          "2000:  struct msghdr msg_sys;",
          "2002:  if (vlen > UIO_MAXIOV)",
          "2003:   vlen = UIO_MAXIOV;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2027:  struct used_address used_address;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2008:  if (!sock)",
          "2009:   return err;",
          "2011:  entry = mmsg;",
          "2012:  compat_entry = (struct compat_mmsghdr __user *)mmsg;",
          "2013:  err = 0;",
          "2015:  while (datagrams < vlen) {",
          "2019:   if (MSG_CMSG_COMPAT & flags) {",
          "2020:    err = __sys_sendmsg(sock, (struct msghdr __user *)compat_entry,",
          "2022:    if (err < 0)",
          "2023:     break;",
          "2024:    err = __put_user(err, &compat_entry->msg_len);",
          "2025:    ++compat_entry;",
          "2026:   } else {",
          "2027:    err = __sys_sendmsg(sock, (struct msghdr __user *)entry,",
          "2029:    if (err < 0)",
          "2030:     break;",
          "2031:    err = put_user(err, &entry->msg_len);",
          "",
          "[Removed Lines]",
          "2021:          &msg_sys, flags, datagrams);",
          "2028:          &msg_sys, flags, datagrams);",
          "",
          "[Added Lines]",
          "2038:  used_address.name_len = UINT_MAX;",
          "2046:          &msg_sys, flags, &used_address);",
          "2053:          &msg_sys, flags, &used_address);",
          "",
          "---------------"
        ]
      }
    }
  ]
}