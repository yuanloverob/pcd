{
  "cve_id": "CVE-2012-1571",
  "cve_desc": "file before 5.11 and libmagic allow remote attackers to cause a denial of service (crash) via a crafted Composite Document File (CDF) file that triggers (1) an out-of-bounds read or (2) an invalid pointer dereference.",
  "repo": "glensc/file",
  "patch_hash": "1aec04dbf8a24b8a6ba64c4f74efa0628e36db0b",
  "patch_info": {
    "commit_hash": "1aec04dbf8a24b8a6ba64c4f74efa0628e36db0b",
    "repo": "glensc/file",
    "commit_url": "https://github.com/glensc/file/commit/1aec04dbf8a24b8a6ba64c4f74efa0628e36db0b",
    "files": [
      "src/cdf.c"
    ],
    "message": "Fix bounds checks again.",
    "before_after_code_files": [
      "src/cdf.c||src/cdf.c"
    ]
  },
  "patch_diff": {
    "src/cdf.c||src/cdf.c": [
      "File: src/cdf.c -> src/cdf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: #include \"file.h\"",
      "37: #ifndef lint",
      "39: #endif",
      "41: #include <assert.h>",
      "",
      "[Removed Lines]",
      "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.48 2012/02/17 05:27:45 christos Exp $\")",
      "",
      "[Added Lines]",
      "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.49 2012/02/20 20:04:37 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "351: cdf_read_short_sector(const cdf_stream_t *sst, void *buf, size_t offs,",
      "352:     size_t len, const cdf_header_t *h, cdf_secid_t id)",
      "353: {",
      "355:  size_t pos = CDF_SHORT_SEC_POS(h, id);",
      "356:  assert(ss == len);",
      "358:   DPRINTF((\"Out of bounds read %\" SIZE_T_FORMAT \"u > %\"",
      "359:       SIZE_T_FORMAT \"u\\n\",",
      "361:   return -1;",
      "362:  }",
      "363:  (void)memcpy(((char *)buf) + offs,",
      "",
      "[Removed Lines]",
      "354:  size_t ss = CDF_SEC_SIZE(h);",
      "357:  if (pos > ss * sst->sst_len) {",
      "360:       pos, ss * sst->sst_len));",
      "",
      "[Added Lines]",
      "355:  size_t ss = CDF_SHORT_SEC_SIZE(h);",
      "358:  if (pos > CDF_SEC_SIZE(h) * sst->sst_len) {",
      "361:       pos, CDF_SEC_SIZE(h) * sst->sst_len));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "529:     const cdf_sat_t *ssat, const cdf_stream_t *sst,",
      "530:     cdf_secid_t sid, size_t len, cdf_stream_t *scn)",
      "531: {",
      "533:  scn->sst_len = cdf_count_chain(ssat, sid, CDF_SEC_SIZE(h));",
      "534:  scn->sst_dirlen = len;",
      "",
      "[Removed Lines]",
      "532:  size_t ss = CDF_SEC_SIZE(h), i, j;",
      "",
      "[Added Lines]",
      "533:  size_t ss = CDF_SHORT_SEC_SIZE(h), i, j;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "798:  if (cdf_check_stream_offset(sst, h, e, 0, __LINE__) == -1)",
      "799:   goto out;",
      "800:  for (i = 0; i < sh.sh_properties; i++) {",
      "801:   q = (const uint8_t *)(const void *)",
      "804:   if (q > e) {",
      "805:    DPRINTF((\"Ran of the end %p > %p\\n\", q, e));",
      "806:    goto out;",
      "807:   }",
      "808:   inp[i].pi_id = CDF_GETUINT32(p, i << 1);",
      "809:   inp[i].pi_type = CDF_GETUINT32(q, 0);",
      "813:   if (inp[i].pi_type & CDF_VECTOR) {",
      "814:    nelements = CDF_GETUINT32(q, 1);",
      "815:    o = 2;",
      "",
      "[Removed Lines]",
      "802:       ((const char *)(const void *)p +",
      "803:       CDF_GETUINT32(p, (i << 1) + 1)) - 2 * sizeof(uint32_t);",
      "810:   DPRINTF((\"%\" SIZE_T_FORMAT \"u) id=%x type=%x offs=0x%tx,0x%x\\n\", i,",
      "811:       inp[i].pi_id, inp[i].pi_type, q - p,",
      "812:       CDF_GETUINT32(p, (i << 1) + 1)));",
      "",
      "[Added Lines]",
      "802:   size_t ofs = CDF_GETUINT32(p, (i << 1) + 1);",
      "804:       ((const char *)(const void *)p + ofs",
      "805:       - 2 * sizeof(uint32_t));",
      "812:   DPRINTF((\"%\" SIZE_T_FORMAT \"u) id=%x type=%x offs=0x%tx,0x%x\\n\",",
      "813:       i, inp[i].pi_id, inp[i].pi_type, q - p, offs));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a1b0f6a231a67e899b97a0f2a7fd2f2238f706a0",
      "candidate_info": {
        "commit_hash": "a1b0f6a231a67e899b97a0f2a7fd2f2238f706a0",
        "repo": "glensc/file",
        "commit_url": "https://github.com/glensc/file/commit/a1b0f6a231a67e899b97a0f2a7fd2f2238f706a0",
        "files": [
          "src/cdf.c",
          "src/file.h"
        ],
        "message": "mv __arraycount() define to file.h",
        "before_after_code_files": [
          "src/cdf.c||src/cdf.c",
          "src/file.h||src/file.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cdf.c||src/cdf.c"
          ],
          "candidate": [
            "src/cdf.c||src/cdf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.44 2011/08/26 13:38:28 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.45 2011/08/28 08:38:48 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58: #include \"cdf.h\"",
          "64: #ifdef CDF_DEBUG",
          "65: #define DPRINTF(a) printf a, fflush(stdout)",
          "66: #else",
          "",
          "[Removed Lines]",
          "60: #ifndef __arraycount",
          "61: #define __arraycount(a) (sizeof(a) / sizeof(a[0]))",
          "62: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/file.h||src/file.h": [
          "File: src/file.h -> src/file.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "86: #endif",
          "87: #define public",
          "89: #ifndef __GNUC_PREREQ__",
          "90: #ifdef __GNUC__",
          "91: #define __GNUC_PREREQ__(x, y)      \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89: #ifndef __arraycount",
          "90: #define __arraycount(a) (sizeof(a) / sizeof(a[0]))",
          "91: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7f209b74e3255fa938fdc6789e9717575d698c50",
      "candidate_info": {
        "commit_hash": "7f209b74e3255fa938fdc6789e9717575d698c50",
        "repo": "glensc/file",
        "commit_url": "https://github.com/glensc/file/commit/7f209b74e3255fa938fdc6789e9717575d698c50",
        "files": [
          "ChangeLog",
          "src/cdf.c"
        ],
        "message": "fix cdf buffer setting offset.",
        "before_after_code_files": [
          "src/cdf.c||src/cdf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cdf.c||src/cdf.c"
          ],
          "candidate": [
            "src/cdf.c||src/cdf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.41 2011/02/10 17:03:16 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.42 2011/02/10 21:35:05 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "846:    for (j = 0; j < nelements; j++, i++) {",
          "847:     uint32_t l = CDF_GETUINT32(q, o);",
          "848:     inp[i].pi_str.s_len = l;",
          "851:     DPRINTF((\"l = %d, r = %d, s = %s\\n\", l,",
          "852:         CDF_ROUND(l, sizeof(l)),",
          "853:         inp[i].pi_str.s_buf));",
          "",
          "[Removed Lines]",
          "849:     inp[i].pi_str.s_buf =",
          "850:         (const char *)(const void *)(&q[o4 + 1]);",
          "",
          "[Added Lines]",
          "849:     inp[i].pi_str.s_buf = (const char *)",
          "850:         (const void *)(&q[o4 + sizeof(l)]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "631915cc9517b9752ece0b49a98faa78f11dd32a",
      "candidate_info": {
        "commit_hash": "631915cc9517b9752ece0b49a98faa78f11dd32a",
        "repo": "glensc/file",
        "commit_url": "https://github.com/glensc/file/commit/631915cc9517b9752ece0b49a98faa78f11dd32a",
        "files": [
          "src/cdf.c"
        ],
        "message": "PR/193: avoid zerodivide",
        "before_after_code_files": [
          "src/cdf.c||src/cdf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cdf.c||src/cdf.c"
          ],
          "candidate": [
            "src/cdf.c||src/cdf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.43 2011/03/30 19:48:13 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.44 2011/08/26 13:38:28 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "376:    break;",
          "378: #define CDF_SEC_LIMIT (UINT32_MAX / (4 * ss))",
          "380:      i > CDF_SEC_LIMIT) {",
          "381:   DPRINTF((\"Number of sectors in master SAT too big %u %\"",
          "382:       SIZE_T_FORMAT \"u\\n\", h->h_num_sectors_in_master_sat, i));",
          "",
          "[Removed Lines]",
          "379:  if (h->h_num_sectors_in_master_sat > CDF_SEC_LIMIT / nsatpersec ||",
          "",
          "[Added Lines]",
          "379:  if ((nsatpersec > 0 &&",
          "380:      h->h_num_sectors_in_master_sat > CDF_SEC_LIMIT / nsatpersec) ||",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d68a455e1a8d81bc7991c7ad0f07b24697b1ff6e",
      "candidate_info": {
        "commit_hash": "d68a455e1a8d81bc7991c7ad0f07b24697b1ff6e",
        "repo": "glensc/file",
        "commit_url": "https://github.com/glensc/file/commit/d68a455e1a8d81bc7991c7ad0f07b24697b1ff6e",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/cdf.c",
          "src/elfclass.h",
          "src/file.h",
          "src/pread.c",
          "src/readelf.c"
        ],
        "message": "- use pread - add reading of section header names to determine if an ELF file is stripped   (Jan Kaluza)",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/cdf.c||src/cdf.c",
          "src/elfclass.h||src/elfclass.h",
          "src/file.h||src/file.h",
          "src/pread.c||src/pread.c",
          "src/readelf.c||src/readelf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cdf.c||src/cdf.c"
          ],
          "candidate": [
            "src/cdf.c||src/cdf.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "140: AC_CHECK_FUNCS(strerror strndup strtoul mkstemp mkostemp utimes utime wcwidth strtof)",
          "142: dnl Provide implementation of some required functions if necessary",
          "145: dnl Checks for libraries",
          "146: AC_CHECK_LIB(z,gzopen)",
          "",
          "[Removed Lines]",
          "143: AC_REPLACE_FUNCS(getopt_long asprintf vasprintf strlcpy strlcat getline ctime_r asctime_r)",
          "",
          "[Added Lines]",
          "143: AC_REPLACE_FUNCS(getopt_long asprintf vasprintf strlcpy strlcat getline ctime_r asctime_r pread)",
          "",
          "---------------"
        ],
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.50 2012/02/20 22:35:29 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.51 2012/03/20 18:28:02 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "296:  if (info->i_fd == -1)",
          "297:   return -1;",
          "300:   return -1;",
          "303:   return -1;",
          "305:  return (ssize_t)len;",
          "",
          "[Removed Lines]",
          "299:  if (lseek(info->i_fd, off, SEEK_SET) == (off_t)-1)",
          "302:  if (read(info->i_fd, buf, len) != (ssize_t)len)",
          "",
          "[Added Lines]",
          "301:  if (pread(info->i_fd, buf, len, off) != (ssize_t)len)",
          "",
          "---------------"
        ],
        "src/elfclass.h||src/elfclass.h": [
          "File: src/elfclass.h -> src/elfclass.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:       (off_t)elf_getu(swap, elfhdr.e_shoff),",
          "60:       elf_getu16(swap, elfhdr.e_shnum),",
          "61:       (size_t)elf_getu16(swap, elfhdr.e_shentsize),",
          "63:    return -1;",
          "64:   break;",
          "",
          "[Removed Lines]",
          "62:       fsize, &flags, elf_getu16(swap, elfhdr.e_machine)) == -1)",
          "",
          "[Added Lines]",
          "62:       fsize, &flags, elf_getu16(swap, elfhdr.e_machine),",
          "63:       (int)elf_getu16(swap, elfhdr.e_shstrndx)) == -1)",
          "",
          "---------------"
        ],
        "src/file.h||src/file.h": [
          "File: src/file.h -> src/file.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "484: #define strtoul(a, b, c) strtol(a, b, c)",
          "485: #endif",
          "487: #ifndef HAVE_VASPRINTF",
          "488: int vasprintf(char **, const char *, va_list);",
          "489: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "487: #ifndef HAVE_PREAD",
          "488: ssize_t pread(int, void *, size_t, off_t);",
          "489: #endif",
          "",
          "---------------"
        ],
        "src/pread.c||src/pread.c": [
          "File: src/pread.c -> src/pread.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include \"file.h\"",
          "2: #ifndef lint",
          "3: FILE_RCSID(\"@(#)$File: ctime_r.c,v 1.1 2012/05/15 17:14:36 christos Exp $\")",
          "5: #include <fcntl.h>",
          "6: #include <unistd.h>",
          "8: ssize_t",
          "9: pread(int fd, void *buf, ssize_t len, off_t off) {",
          "10:  if (lseek(fd, off, SEEK_SET) == (off_t)-1)",
          "11:   return -1;",
          "13:  return read(fd, buf, len);",
          "14: }",
          "",
          "---------------"
        ],
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.93 2012/10/31 17:03:41 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.94 2012/12/13 13:48:31 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: private int dophn_exec(struct magic_set *, int, int, int, off_t, int, size_t,",
          "49:     off_t, int *, int);",
          "50: private int doshn(struct magic_set *, int, int, int, off_t, int, size_t,",
          "52: private size_t donote(struct magic_set *, void *, size_t, size_t, int,",
          "53:     int, size_t, int *);",
          "",
          "[Removed Lines]",
          "51:     off_t, int *, int);",
          "",
          "[Added Lines]",
          "51:     off_t, int *, int, int);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "133: #define elf_getu32(swap, value) getu32(swap, value)",
          "134: #ifdef USE_ARRAY_FOR_64BIT_TYPES",
          "135: # define elf_getu64(swap, array) \\",
          "138: #else",
          "139: # define elf_getu64(swap, value) getu64(swap, value)",
          "140: #endif",
          "142: #define xsh_addr (clazz == ELFCLASS32   \\",
          "145: #define xsh_sizeof (clazz == ELFCLASS32   \\",
          "149:     ? elf_getu32(swap, sh32.sh_size) \\",
          "150:     : elf_getu64(swap, sh64.sh_size))",
          "151: #define xsh_offset (off_t)(clazz == ELFCLASS32  \\",
          "",
          "[Removed Lines]",
          "136:  ((swap ? ((uint64_t)elf_getu32(swap, array[0])) << 32 : elf_getu32(swap, array[0])) + \\",
          "137:   (swap ? elf_getu32(swap, array[1]) : ((uint64_t)elf_getu32(swap, array[1]) << 32)))",
          "143:     ? (void *) &sh32   \\",
          "144:     : (void *) &sh64)",
          "146:     ? sizeof sh32    \\",
          "147:     : sizeof sh64)",
          "148: #define xsh_size (clazz == ELFCLASS32   \\",
          "",
          "[Added Lines]",
          "136:     ((swap ? ((uint64_t)elf_getu32(swap, array[0])) << 32 \\",
          "137:      : elf_getu32(swap, array[0])) + \\",
          "138:      (swap ? elf_getu32(swap, array[1]) : \\",
          "139:      ((uint64_t)elf_getu32(swap, array[1]) << 32)))",
          "145:     ? (void *)&sh32   \\",
          "146:     : (void *)&sh64)",
          "148:     ? sizeof(sh32)    \\",
          "149:     : sizeof(sh64))",
          "150: #define xsh_size (size_t)(clazz == ELFCLASS32  \\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "154: #define xsh_type (clazz == ELFCLASS32   \\",
          "155:     ? elf_getu32(swap, sh32.sh_type) \\",
          "156:     : elf_getu32(swap, sh64.sh_type))",
          "157: #define xph_addr (clazz == ELFCLASS32   \\",
          "158:     ? (void *) &ph32   \\",
          "159:     : (void *) &ph64)",
          "160: #define xph_sizeof (clazz == ELFCLASS32   \\",
          "163: #define xph_type (clazz == ELFCLASS32   \\",
          "164:     ? elf_getu32(swap, ph32.p_type) \\",
          "165:     : elf_getu32(swap, ph64.p_type))",
          "",
          "[Removed Lines]",
          "161:     ? sizeof ph32    \\",
          "162:     : sizeof ph64)",
          "",
          "[Added Lines]",
          "159: #define xsh_name     (clazz == ELFCLASS32   \\",
          "160:     ? elf_getu32(swap, sh32.sh_name) \\",
          "161:     : elf_getu32(swap, sh64.sh_name))",
          "166:     ? sizeof(ph32)    \\",
          "167:     : sizeof(ph64))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "175:     ? elf_getu32(swap, ph32.p_filesz) \\",
          "176:     : elf_getu64(swap, ph64.p_filesz)))",
          "177: #define xnh_addr (clazz == ELFCLASS32   \\",
          "180: #define xph_memsz (size_t)((clazz == ELFCLASS32  \\",
          "181:     ? elf_getu32(swap, ph32.p_memsz) \\",
          "182:     : elf_getu64(swap, ph64.p_memsz)))",
          "",
          "[Removed Lines]",
          "178:     ? (void *) &nh32   \\",
          "179:     : (void *) &nh64)",
          "",
          "[Added Lines]",
          "183:     ? (void *)&nh32   \\",
          "184:     : (void *)&nh64)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "196:     ? prpsoffsets32[i]   \\",
          "197:     : prpsoffsets64[i])",
          "198: #define xcap_addr (clazz == ELFCLASS32   \\",
          "201: #define xcap_sizeof (clazz == ELFCLASS32   \\",
          "202:     ? sizeof cap32    \\",
          "203:     : sizeof cap64)",
          "",
          "[Removed Lines]",
          "199:     ? (void *) &cap32   \\",
          "200:     : (void *) &cap64)",
          "",
          "[Added Lines]",
          "204:     ? (void *)&cap32   \\",
          "205:     : (void *)&cap64)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "299: {",
          "300:  Elf32_Phdr ph32;",
          "301:  Elf64_Phdr ph64;",
          "303:  unsigned char nbuf[BUFSIZ];",
          "304:  ssize_t bufsize;",
          "",
          "[Removed Lines]",
          "302:  size_t offset;",
          "",
          "[Added Lines]",
          "307:  size_t offset, len;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "315:  for ( ; num; num--) {",
          "321:    file_badread(ms);",
          "322:    return -1;",
          "323:   }",
          "",
          "[Removed Lines]",
          "316:   if (lseek(fd, off, SEEK_SET) == (off_t)-1) {",
          "317:    file_badseek(ms);",
          "318:    return -1;",
          "319:   }",
          "320:   if (read(fd, xph_addr, xph_sizeof) == -1) {",
          "",
          "[Added Lines]",
          "321:   if (pread(fd, xph_addr, xph_sizeof, off) == -1) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "345:    file_badread(ms);",
          "346:    return -1;",
          "347:   }",
          "",
          "[Removed Lines]",
          "338:   if (lseek(fd, xph_offset, SEEK_SET) == (off_t)-1) {",
          "339:    file_badseek(ms);",
          "340:    return -1;",
          "341:   }",
          "342:   bufsize = read(fd, nbuf,",
          "343:       ((xph_filesz < sizeof(nbuf)) ? xph_filesz : sizeof(nbuf)));",
          "344:   if (bufsize == -1) {",
          "",
          "[Added Lines]",
          "339:   len = xph_filesz < sizeof(nbuf) ? xph_filesz : sizeof(nbuf);",
          "340:   if ((bufsize = pread(fd, nbuf, len, xph_offset)) == -1) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "852: private int",
          "853: doshn(struct magic_set *ms, int clazz, int swap, int fd, off_t off, int num,",
          "855: {",
          "856:  Elf32_Shdr sh32;",
          "857:  Elf64_Shdr sh64;",
          "858:  int stripped = 1;",
          "859:  void *nbuf;",
          "864:  if (size != xsh_sizeof) {",
          "865:   if (file_printf(ms, \", corrupted section header size\") == -1)",
          "",
          "[Removed Lines]",
          "854:     size_t size, off_t fsize, int *flags, int mach)",
          "860:  off_t noff, coff;",
          "",
          "[Added Lines]",
          "850:     size_t size, off_t fsize, int *flags, int mach, int strtab)",
          "856:  off_t noff, coff, name_off;",
          "859:  char name[50];",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "867:   return 0;",
          "868:  }",
          "870:  for ( ; num; num--) {",
          "876:    file_badread(ms);",
          "877:    return -1;",
          "878:   }",
          "",
          "[Removed Lines]",
          "871:   if (lseek(fd, off, SEEK_SET) == (off_t)-1) {",
          "872:    file_badseek(ms);",
          "873:    return -1;",
          "874:   }",
          "875:   if (read(fd, xsh_addr, xsh_sizeof) == -1) {",
          "",
          "[Added Lines]",
          "868:  name_off = off * size * strtab;",
          "870:  if (pread(fd, name, sizeof(name), name_off + xsh_name) == -1) {",
          "871:   file_badread(ms);",
          "872:   return -1;",
          "873:  }",
          "874:  name[sizeof(name) - 1] = '\\0';",
          "875:  if (strcmp(name, \".debug_info\") == 0)",
          "876:   stripped = 0;",
          "879:   if (pread(fd, xsh_addr, xsh_sizeof, off) == -1) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "898:   switch (xsh_type) {",
          "899:   case SHT_NOTE:",
          "901:     file_error(ms, errno, \"Cannot allocate memory\"",
          "902:         \" for note\");",
          "903:     return -1;",
          "904:    }",
          "907:     file_badread(ms);",
          "908:     free(nbuf);",
          "909:     return -1;",
          "910:    }",
          "918:    noff = 0;",
          "919:    for (;;) {",
          "920:     if (noff >= (off_t)xsh_size)",
          "921:      break;",
          "922:     noff = donote(ms, nbuf, (size_t)noff,",
          "925:     if (noff == 0)",
          "926:      break;",
          "927:    }",
          "",
          "[Removed Lines]",
          "900:    if ((nbuf = malloc((size_t)xsh_size)) == NULL) {",
          "905:    if ((noff = lseek(fd, (off_t)xsh_offset, SEEK_SET)) ==",
          "906:        (off_t)-1) {",
          "911:    if (read(fd, nbuf, (size_t)xsh_size) !=",
          "912:        (ssize_t)xsh_size) {",
          "913:     free(nbuf);",
          "914:     file_badread(ms);",
          "915:     return -1;",
          "916:    }",
          "923:         (size_t)xsh_size, clazz, swap, 4,",
          "924:         flags);",
          "",
          "[Added Lines]",
          "904:    if ((nbuf = malloc(xsh_size)) == NULL) {",
          "909:    if (pread(fd, nbuf, xsh_size, xsh_offset) == -1) {",
          "920:         xsh_size, clazz, swap, 4, flags);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "939:     goto skip;",
          "940:    }",
          "944:     file_badseek(ms);",
          "945:     return -1;",
          "946:    }",
          "",
          "[Removed Lines]",
          "942:    if (lseek(fd, (off_t)xsh_offset, SEEK_SET) ==",
          "943:        (off_t)-1) {",
          "",
          "[Added Lines]",
          "938:    if (lseek(fd, xsh_offset, SEEK_SET) == (off_t)-1) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1063:  const char *shared_libraries = \"\";",
          "1064:  unsigned char nbuf[BUFSIZ];",
          "1065:  ssize_t bufsize;",
          "1068:  if (size != xph_sizeof) {",
          "1069:   if (file_printf(ms, \", corrupted program header size\") == -1)",
          "",
          "[Removed Lines]",
          "1066:  size_t offset, align;",
          "",
          "[Added Lines]",
          "1061:  size_t offset, align, len;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1072:  }",
          "1074:    for ( ; num; num--) {",
          "1082:    return -1;",
          "1083:   }",
          "",
          "[Removed Lines]",
          "1075:   if (lseek(fd, off, SEEK_SET) == (off_t)-1) {",
          "1076:    file_badseek(ms);",
          "1077:    return -1;",
          "1078:   }",
          "1080:     if (read(fd, xph_addr, xph_sizeof) == -1) {",
          "1081:      file_badread(ms);",
          "",
          "[Added Lines]",
          "1070:   if (pread(fd, xph_addr, xph_sizeof, off) == -1) {",
          "1071:    file_badread(ms);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1125:    if (bufsize == -1) {",
          "1126:     file_badread(ms);",
          "1127:     return -1;",
          "",
          "[Removed Lines]",
          "1119:    if (lseek(fd, xph_offset, SEEK_SET) == (off_t)-1) {",
          "1120:     file_badseek(ms);",
          "1121:     return -1;",
          "1122:    }",
          "1123:    bufsize = read(fd, nbuf, ((xph_filesz < sizeof(nbuf)) ?",
          "1124:        xph_filesz : sizeof(nbuf)));",
          "",
          "[Added Lines]",
          "1109:    len = xph_filesz < sizeof(nbuf) ? xph_filesz",
          "1110:        : sizeof(nbuf);",
          "1111:    bufsize = pread(fd, nbuf, len, xph_offset);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "67ebc2c1c8eca60c7390f99482b5f52ed14d45a8",
      "candidate_info": {
        "commit_hash": "67ebc2c1c8eca60c7390f99482b5f52ed14d45a8",
        "repo": "glensc/file",
        "commit_url": "https://github.com/glensc/file/commit/67ebc2c1c8eca60c7390f99482b5f52ed14d45a8",
        "files": [
          "src/cdf.c",
          "src/readcdf.c"
        ],
        "message": "PR/135: Use a different heuristic to recognize a word document if it missing the application name in the properties.",
        "before_after_code_files": [
          "src/cdf.c||src/cdf.c",
          "src/readcdf.c||src/readcdf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cdf.c||src/cdf.c"
          ],
          "candidate": [
            "src/cdf.c||src/cdf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.42 2011/02/10 21:35:05 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.43 2011/03/30 19:48:13 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75: #define NEED_SWAP (cdf_bo.u == (uint32_t)0x01020304)",
          "80: #define CDF_GETUINT32(x, y) cdf_getuint32(x, y)",
          "99: {",
          "100:  uint16_t rv;",
          "101:  uint8_t *s = (uint8_t *)(void *)&sv;",
          "",
          "[Removed Lines]",
          "77: #define CDF_TOLE8(x) ((uint64_t)(NEED_SWAP ? cdf_tole8(x) : (uint64_t)(x)))",
          "78: #define CDF_TOLE4(x) ((uint32_t)(NEED_SWAP ? cdf_tole4(x) : (uint32_t)(x)))",
          "79: #define CDF_TOLE2(x) ((uint16_t)(NEED_SWAP ? cdf_tole2(x) : (uint16_t)(x)))",
          "86: static uint32_t",
          "87: cdf_getuint32(const uint8_t *p, size_t offs)",
          "88: {",
          "89:  uint32_t rv;",
          "90:  (void)memcpy(&rv, p + offs * sizeof(uint32_t), sizeof(rv));",
          "91:  return CDF_TOLE4(rv);",
          "92: }",
          "97: uint16_t",
          "98: cdf_tole2(uint16_t sv)",
          "",
          "[Added Lines]",
          "77: #define CDF_TOLE8(x) ((uint64_t)(NEED_SWAP ? _cdf_tole8(x) : (uint64_t)(x)))",
          "78: #define CDF_TOLE4(x) ((uint32_t)(NEED_SWAP ? _cdf_tole4(x) : (uint32_t)(x)))",
          "79: #define CDF_TOLE2(x) ((uint16_t)(NEED_SWAP ? _cdf_tole2(x) : (uint16_t)(x)))",
          "85: static uint16_t",
          "86: _cdf_tole2(uint16_t sv)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "113: {",
          "114:  uint32_t rv;",
          "115:  uint8_t *s = (uint8_t *)(void *)&sv;",
          "",
          "[Removed Lines]",
          "111: uint32_t",
          "112: cdf_tole4(uint32_t sv)",
          "",
          "[Added Lines]",
          "99: static uint32_t",
          "100: _cdf_tole4(uint32_t sv)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "129: {",
          "130:  uint64_t rv;",
          "131:  uint8_t *s = (uint8_t *)(void *)&sv;",
          "",
          "[Removed Lines]",
          "127: uint64_t",
          "128: cdf_tole8(uint64_t sv)",
          "",
          "[Added Lines]",
          "115: static uint64_t",
          "116: _cdf_tole8(uint64_t sv)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "141:  return rv;",
          "142: }",
          "144: #define CDF_UNPACK(a) \\",
          "145:     (void)memcpy(&(a), &buf[len], sizeof(a)), len += sizeof(a)",
          "146: #define CDF_UNPACKA(a) \\",
          "147:     (void)memcpy((a), &buf[len], sizeof(a)), len += sizeof(a)",
          "149: void",
          "150: cdf_swap_header(cdf_header_t *h)",
          "151: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136: static uint32_t",
          "137: cdf_getuint32(const uint8_t *p, size_t offs)",
          "138: {",
          "139:  uint32_t rv;",
          "140:  (void)memcpy(&rv, p + offs * sizeof(uint32_t), sizeof(rv));",
          "141:  return CDF_TOLE4(rv);",
          "142: }",
          "149: uint16_t",
          "150: cdf_tole2(uint16_t sv)",
          "151: {",
          "152:  return CDF_TOLE2(sv);",
          "153: }",
          "155: uint32_t",
          "156: cdf_tole4(uint32_t sv)",
          "157: {",
          "158:  return CDF_TOLE4(sv);",
          "159: }",
          "161: uint64_t",
          "162: cdf_tole8(uint64_t sv)",
          "163: {",
          "164:  return CDF_TOLE8(sv);",
          "165: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1204:  size_t count;",
          "1206:  (void)&h;",
          "1208:   return;",
          "1209:  (void)fprintf(stderr, \"Endian: %x\\n\", ssi.si_byte_order);",
          "1210:  (void)fprintf(stderr, \"Os Version %d.%d\\n\", ssi.si_os_version & 0xff,",
          "",
          "[Removed Lines]",
          "1207:  if (cdf_unpack_summary_info(sst, &ssi, &info, &count) == -1)",
          "",
          "[Added Lines]",
          "1225:  if (cdf_unpack_summary_info(sst, h, &ssi, &info, &count) == -1)",
          "",
          "---------------"
        ],
        "src/readcdf.c||src/readcdf.c": [
          "File: src/readcdf.c -> src/readcdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"file.h\"",
          "28: #ifndef lint",
          "30: #endif",
          "32: #include <stdlib.h>",
          "",
          "[Removed Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.24 2011/02/10 17:03:16 christos Exp $\")",
          "",
          "[Added Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.25 2011/02/10 21:35:05 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:         cdf_timestamp_t tp;",
          "49:         struct timespec ts;",
          "50:         char buf[64];",
          "52:         const char *s;",
          "53:         int len;",
          "",
          "[Removed Lines]",
          "51:         const char *str = \"vnd.ms-office\";",
          "",
          "[Added Lines]",
          "51:         const char *str = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "142:                 }",
          "143:         }",
          "144:         if (!NOTMIME(ms)) {",
          "147:         }",
          "148:         return 1;",
          "149: }",
          "",
          "[Removed Lines]",
          "145:                 if (file_printf(ms, \"application/%s\", str) == -1)",
          "146:                         return -1;",
          "",
          "[Added Lines]",
          "145:   if (str == NULL)",
          "146:    return 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "263: #endif",
          "264:         if ((i = cdf_file_summary_info(ms, &h, &scn)) == -1)",
          "265:                 expn = \"Can't expand summary_info\";",
          "266:         free(scn.sst_tab);",
          "267: out4:",
          "268:         free(sst.sst_tab);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "266:  if (i == 0) {",
          "267:   const char *str = \"vnd.ms-office\";",
          "268:   cdf_directory_t *d;",
          "269:   char name[__arraycount(d->d_name)];",
          "270:   size_t j, k;",
          "271:   for (j = 0; j < dir.dir_len; j++) {",
          "272:       d = &dir.dir_tab[j];",
          "273:       for (k = 0; k < sizeof(name); k++)",
          "274:    name[k] = (char)cdf_tole2(d->d_name[k]);",
          "275:       if (strstr(name, \"WordDocument\") == 0) {",
          "276:    str = \"msword\";",
          "277:    break;",
          "278:       }",
          "279:   }",
          "280:                 if (file_printf(ms, \"application/%s\", str) == -1)",
          "281:                         return -1;",
          "282:   i = 1;",
          "283:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}