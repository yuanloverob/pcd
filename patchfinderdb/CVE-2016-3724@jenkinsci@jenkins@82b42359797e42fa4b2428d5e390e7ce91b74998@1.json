{
  "cve_id": "CVE-2016-3724",
  "cve_desc": "Jenkins before 2.3 and LTS before 1.651.2 allow remote authenticated users with extended read access to obtain sensitive password information by reading a job configuration.",
  "repo": "jenkinsci/jenkins",
  "patch_hash": "82b42359797e42fa4b2428d5e390e7ce91b74998",
  "patch_info": {
    "commit_hash": "82b42359797e42fa4b2428d5e390e7ce91b74998",
    "repo": "jenkinsci/jenkins",
    "commit_url": "https://github.com/jenkinsci/jenkins/commit/82b42359797e42fa4b2428d5e390e7ce91b74998",
    "files": [
      "core/src/main/java/hudson/Functions.java",
      "test/src/test/java/lib/form/PasswordTest.java",
      "test/src/test/resources/lib/form/PasswordTest/VulnerableProperty/config.jelly"
    ],
    "message": "[SECURITY-266] Conceal ciphertext from the web UI for a user who has no Item.CONFIGURE permission.",
    "before_after_code_files": [
      "core/src/main/java/hudson/Functions.java||core/src/main/java/hudson/Functions.java",
      "test/src/test/java/lib/form/PasswordTest.java||test/src/test/java/lib/form/PasswordTest.java",
      "test/src/test/resources/lib/form/PasswordTest/VulnerableProperty/config.jelly||test/src/test/resources/lib/form/PasswordTest/VulnerableProperty/config.jelly"
    ]
  },
  "patch_diff": {
    "core/src/main/java/hudson/Functions.java||core/src/main/java/hudson/Functions.java": [
      "File: core/src/main/java/hudson/Functions.java -> core/src/main/java/hudson/Functions.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "1716:     public String getPasswordValue(Object o) {",
      "1717:         if (o==null)    return null;",
      "1719:         if (getIsUnitTest()) {",
      "1720:             throw new SecurityException(\"attempted to render plaintext \u2018\" + o + \"\u2019 in password field; use a getter of type Secret instead\");",
      "1721:         }",
      "",
      "[Removed Lines]",
      "1718:         if (o instanceof Secret)    return ((Secret)o).getEncryptedValue();",
      "",
      "[Added Lines]",
      "1718:         if (o instanceof Secret) {",
      "1719:             StaplerRequest req = Stapler.getCurrentRequest();",
      "1720:             if (req != null) {",
      "1721:                 Item item = req.findAncestorObject(Item.class);",
      "1722:                 if (item != null && !item.hasPermission(Item.CONFIGURE)) {",
      "1723:                     return \"<some secret>\";",
      "1724:                 }",
      "1725:             }",
      "1726:             return ((Secret) o).getEncryptedValue();",
      "1727:         }",
      "",
      "---------------"
    ],
    "test/src/test/java/lib/form/PasswordTest.java||test/src/test/java/lib/form/PasswordTest.java": [
      "File: test/src/test/java/lib/form/PasswordTest.java -> test/src/test/java/lib/form/PasswordTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "28: import hudson.Extension;",
      "29: import hudson.model.Describable;",
      "30: import hudson.model.Descriptor;",
      "31: import hudson.util.Secret;",
      "32: import org.jvnet.hudson.test.HudsonTestCase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "31: import hudson.model.FreeStyleProject;",
      "32: import hudson.model.Item;",
      "33: import hudson.model.JobProperty;",
      "34: import hudson.model.JobPropertyDescriptor;",
      "35: import hudson.security.GlobalMatrixAuthorizationStrategy;",
      "37: import jenkins.model.Jenkins;",
      "38: import static org.hamcrest.Matchers.containsString;",
      "39: import static org.hamcrest.Matchers.not;",
      "40: import static org.junit.Assert.assertThat;",
      "42: import org.jvnet.hudson.test.Issue;",
      "43: import org.jvnet.hudson.test.TestExtension;",
      "44: import org.kohsuke.stapler.DataBoundConstructor;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "55:             return null;",
      "56:         }",
      "57:     }",
      "58: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "71:     @Issue(\"SECURITY-266\")",
      "72:     public void testExposedCiphertext() throws Exception {",
      "73:         boolean saveEnabled = Item.EXTENDED_READ.getEnabled();",
      "74:         try {",
      "75:             jenkins.setSecurityRealm(createDummySecurityRealm());",
      "77:             GlobalMatrixAuthorizationStrategy pmas = new GlobalMatrixAuthorizationStrategy();",
      "78:             pmas.add(Jenkins.ADMINISTER, \"admin\");",
      "79:             pmas.add(Jenkins.READ, \"dev\");",
      "80:             pmas.add(Item.READ, \"dev\");",
      "81:             Item.EXTENDED_READ.setEnabled(true);",
      "82:             pmas.add(Item.EXTENDED_READ, \"dev\");",
      "83:             jenkins.setAuthorizationStrategy(pmas);",
      "84:             Secret secret = Secret.fromString(\"s3cr3t\");",
      "85:             FreeStyleProject p = createFreeStyleProject(\"p\");",
      "86:             p.addProperty(new VulnerableProperty(secret));",
      "87:             WebClient wc = createWebClient();",
      "88:             wc.login(\"admin\");",
      "89:             HtmlPage configure = wc.getPage(p, \"configure\");",
      "90:             assertThat(configure.getWebResponse().getContentAsString(), containsString(secret.getEncryptedValue()));",
      "91:             submit(configure.getFormByName(\"config\"));",
      "92:             VulnerableProperty vp = p.getProperty(VulnerableProperty.class);",
      "93:             assertNotNull(vp);",
      "94:             assertEquals(secret, vp.secret);",
      "95:             wc.login(\"dev\");",
      "96:             configure = wc.getPage(p, \"configure\");",
      "97:             assertThat(configure.getWebResponse().getContentAsString(), not(containsString(secret.getEncryptedValue())));",
      "98:         } finally {",
      "99:             Item.EXTENDED_READ.setEnabled(saveEnabled);",
      "100:         }",
      "101:     }",
      "102:     public static class VulnerableProperty extends JobProperty<FreeStyleProject> {",
      "103:         public final Secret secret;",
      "104:         @DataBoundConstructor",
      "105:         public VulnerableProperty(Secret secret) {",
      "106:             this.secret = secret;",
      "107:         }",
      "108:         @TestExtension(\"testExposedCiphertext\")",
      "109:         public static class DescriptorImpl extends JobPropertyDescriptor {",
      "110:             @Override // TODO delete in 1.635+",
      "111:             public String getDisplayName() {",
      "112:                 return \"VulnerableProperty\";",
      "113:             }",
      "114:         }",
      "115:     }",
      "",
      "---------------"
    ],
    "test/src/test/resources/lib/form/PasswordTest/VulnerableProperty/config.jelly||test/src/test/resources/lib/form/PasswordTest/VulnerableProperty/config.jelly": [
      "File: test/src/test/resources/lib/form/PasswordTest/VulnerableProperty/config.jelly -> test/src/test/resources/lib/form/PasswordTest/VulnerableProperty/config.jelly",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "2: <!--",
      "3: The MIT License",
      "5: Copyright 2016 CloudBees, Inc.",
      "7: Permission is hereby granted, free of charge, to any person obtaining a copy",
      "8: of this software and associated documentation files (the \"Software\"), to deal",
      "9: in the Software without restriction, including without limitation the rights",
      "10: to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
      "11: copies of the Software, and to permit persons to whom the Software is",
      "12: furnished to do so, subject to the following conditions:",
      "14: The above copyright notice and this permission notice shall be included in",
      "15: all copies or substantial portions of the Software.",
      "17: THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
      "18: IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
      "19: FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
      "20: AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
      "21: LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
      "22: OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",
      "23: THE SOFTWARE.",
      "24: -->",
      "26: <?jelly escape-by-default='true'?>",
      "27: <j:jelly xmlns:j=\"jelly:core\" xmlns:f=\"/lib/form\">",
      "28:     <f:entry field=\"secret\" title=\"secret\">",
      "29:         <f:password/>",
      "30:     </f:entry>",
      "31: </j:jelly>",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3d655938189af46d40e55268c280b6dcaa3770cd",
      "candidate_info": {
        "commit_hash": "3d655938189af46d40e55268c280b6dcaa3770cd",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/3d655938189af46d40e55268c280b6dcaa3770cd",
        "files": [
          "core/src/main/java/hudson/model/AbstractItem.java",
          "core/src/main/java/hudson/model/Item.java",
          "core/src/main/java/hudson/model/ItemGroupMixIn.java",
          "test/src/test/java/lib/form/PasswordTest.java"
        ],
        "message": "[SECURITY-266] Protecting ItemGroupMixIn.copy (used by both CLI and REST).",
        "before_after_code_files": [
          "core/src/main/java/hudson/model/AbstractItem.java||core/src/main/java/hudson/model/AbstractItem.java",
          "core/src/main/java/hudson/model/Item.java||core/src/main/java/hudson/model/Item.java",
          "core/src/main/java/hudson/model/ItemGroupMixIn.java||core/src/main/java/hudson/model/ItemGroupMixIn.java",
          "test/src/test/java/lib/form/PasswordTest.java||test/src/test/java/lib/form/PasswordTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/src/test/java/lib/form/PasswordTest.java||test/src/test/java/lib/form/PasswordTest.java"
          ],
          "candidate": [
            "test/src/test/java/lib/form/PasswordTest.java||test/src/test/java/lib/form/PasswordTest.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/model/AbstractItem.java||core/src/main/java/hudson/model/AbstractItem.java": [
          "File: core/src/main/java/hudson/model/AbstractItem.java -> core/src/main/java/hudson/model/AbstractItem.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "602:         Util.deleteRecursive(getRootDir());",
          "603:     }",
          "",
          "[Removed Lines]",
          "605:     private static final Pattern SECRET_PATTERN = Pattern.compile(\">(\" + Secret.ENCRYPTED_VALUE_PATTERN + \")<\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "625:         rsp.sendError(SC_BAD_REQUEST);",
          "626:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "627:     static final Pattern SECRET_PATTERN = Pattern.compile(\">(\" + Secret.ENCRYPTED_VALUE_PATTERN + \")<\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "642:             Matcher matcher = SECRET_PATTERN.matcher(xml);",
          "643:             StringBuffer cleanXml = new StringBuffer();",
          "644:             while (matcher.find()) {",
          "647:                     matcher.appendReplacement(cleanXml, \">********<\");",
          "648:                 }",
          "649:             }",
          "",
          "[Removed Lines]",
          "645:                 String text = matcher.group(1);",
          "646:                 if (Secret.decrypt(text) != null) {",
          "",
          "[Added Lines]",
          "645:                 if (Secret.decrypt(matcher.group(1)) != null) {",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/model/Item.java||core/src/main/java/hudson/model/Item.java": [
          "File: core/src/main/java/hudson/model/Item.java -> core/src/main/java/hudson/model/Item.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: import hudson.security.Permission;",
          "36: import hudson.security.PermissionGroup;",
          "37: import hudson.security.AccessControlled;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: import hudson.util.Secret;",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/model/ItemGroupMixIn.java||core/src/main/java/hudson/model/ItemGroupMixIn.java": [
          "File: core/src/main/java/hudson/model/ItemGroupMixIn.java -> core/src/main/java/hudson/model/ItemGroupMixIn.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import hudson.XmlFile;",
          "28: import hudson.model.listeners.ItemListener;",
          "29: import hudson.security.AccessControlled;",
          "30: import hudson.util.CopyOnWriteMap;",
          "31: import hudson.util.Function1;",
          "32: import jenkins.model.Jenkins;",
          "33: import jenkins.util.xml.XMLUtils;",
          "34: import org.kohsuke.stapler.StaplerRequest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import hudson.security.AccessDeniedException2;",
          "33: import hudson.util.Secret;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47: import java.util.Map;",
          "48: import java.util.logging.Level;",
          "49: import java.util.logging.Logger;",
          "50: import jenkins.security.NotReallyRoleSensitiveCallable;",
          "51: import org.xml.sax.SAXException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: import java.util.regex.Matcher;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "221:     public synchronized <T extends TopLevelItem> T copy(T src, String name) throws IOException {",
          "222:         acl.checkPermission(Item.CREATE);",
          "223:         src.checkPermission(Item.EXTENDED_READ);",
          "224:         src.getDescriptor().checkApplicableIn(parent);",
          "225:         acl.getACL().checkCreatePermission(parent, src.getDescriptor());",
          "227:         T result = (T)createProject(src.getDescriptor(),name,false);",
          "233:         final File rootDir = result.getRootDir();",
          "",
          "[Removed Lines]",
          "230:         Util.copyFile(Items.getConfigFile(src).getFile(),Items.getConfigFile(result).getFile());",
          "",
          "[Added Lines]",
          "227:         XmlFile srcConfigFile = Items.getConfigFile(src);",
          "228:         if (!src.hasPermission(Item.CONFIGURE)) {",
          "229:             Matcher matcher = AbstractItem.SECRET_PATTERN.matcher(srcConfigFile.asString());",
          "230:             while (matcher.find()) {",
          "231:                 if (Secret.decrypt(matcher.group(1)) != null) {",
          "232:                     throw new AccessDeniedException2(Jenkins.getAuthentication(), Item.CONFIGURE);",
          "233:                 }",
          "234:             }",
          "235:         }",
          "242:         Util.copyFile(srcConfigFile.getFile(), Items.getConfigFile(result).getFile());",
          "",
          "---------------"
        ],
        "test/src/test/java/lib/form/PasswordTest.java||test/src/test/java/lib/form/PasswordTest.java": [
          "File: test/src/test/java/lib/form/PasswordTest.java -> test/src/test/java/lib/form/PasswordTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import com.gargoylesoftware.htmlunit.html.HtmlInput;",
          "28: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
          "29: import hudson.Extension;",
          "30: import hudson.cli.GetJobCommand;",
          "31: import hudson.model.Describable;",
          "32: import hudson.model.Descriptor;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import hudson.cli.CopyJobCommand;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: import hudson.util.Secret;",
          "40: import java.io.ByteArrayOutputStream;",
          "41: import java.io.PrintStream;",
          "42: import java.util.Collections;",
          "43: import java.util.Locale;",
          "44: import jenkins.model.Jenkins;",
          "45: import static org.hamcrest.Matchers.containsString;",
          "46: import static org.hamcrest.Matchers.not;",
          "47: import static org.junit.Assert.assertThat;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: import java.util.Arrays;",
          "47: import org.acegisecurity.Authentication;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87:             pmas.add(Item.READ, \"dev\");",
          "88:             Item.EXTENDED_READ.setEnabled(true);",
          "89:             pmas.add(Item.EXTENDED_READ, \"dev\");",
          "90:             jenkins.setAuthorizationStrategy(pmas);",
          "91:             Secret s = Secret.fromString(\"s3cr3t\");",
          "92:             String sEnc = s.getEncryptedValue();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93:             pmas.add(Item.CREATE, \"dev\"); // so we can show CopyJobCommand would barf; more realistic would be to grant it only in a subfolder",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "109:             assertThat(xmlAdmin, containsString(\"<description>\" + p.getDescription() + \"</description>\"));",
          "111:             GetJobCommand getJobCommand = new GetJobCommand();",
          "113:             ByteArrayOutputStream baos = new ByteArrayOutputStream();",
          "115:             assertEquals(xmlAdmin, baos.toString(configXml.getWebResponse().getContentCharset()));",
          "116:             wc.login(\"dev\");",
          "117:             configure = wc.getPage(p, \"configure\");",
          "118:             assertThat(configure.getWebResponse().getContentAsString(), not(containsString(sEnc)));",
          "",
          "[Removed Lines]",
          "112:             getJobCommand.setTransportAuth(User.get(\"admin\").impersonate());",
          "114:             getJobCommand.main(Collections.singletonList(p.getFullName()), Locale.ENGLISH, System.in, new PrintStream(baos), System.err);",
          "",
          "[Added Lines]",
          "117:             Authentication adminAuth = User.get(\"admin\").impersonate();",
          "118:             getJobCommand.setTransportAuth(adminAuth);",
          "120:             String pName = p.getFullName();",
          "121:             getJobCommand.main(Collections.singletonList(pName), Locale.ENGLISH, System.in, new PrintStream(baos), System.err);",
          "123:             CopyJobCommand copyJobCommand = new CopyJobCommand();",
          "124:             copyJobCommand.setTransportAuth(adminAuth);",
          "125:             String pAdminName = pName + \"-admin\";",
          "126:             assertEquals(0, copyJobCommand.main(Arrays.asList(pName, pAdminName), Locale.ENGLISH, System.in, System.out, System.err));",
          "127:             FreeStyleProject pAdmin = jenkins.getItemByFullName(pAdminName, FreeStyleProject.class);",
          "128:             assertNotNull(pAdmin);",
          "129:             pAdmin.setDisplayName(p.getDisplayName()); // counteract DisplayNameListener",
          "130:             assertEquals(p.getConfigFile().asString(), pAdmin.getConfigFile().asString());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "121:             assertThat(xmlDev, not(containsString(sEnc)));",
          "122:             assertEquals(xmlAdmin.replace(sEnc, \"********\"), xmlDev);",
          "123:             getJobCommand = new GetJobCommand();",
          "125:             baos = new ByteArrayOutputStream();",
          "127:             assertEquals(xmlDev, baos.toString(configXml.getWebResponse().getContentCharset()));",
          "128:         } finally {",
          "129:             Item.EXTENDED_READ.setEnabled(saveEnabled);",
          "130:         }",
          "",
          "[Removed Lines]",
          "124:             getJobCommand.setTransportAuth(User.get(\"dev\").impersonate());",
          "126:             getJobCommand.main(Collections.singletonList(p.getFullName()), Locale.ENGLISH, System.in, new PrintStream(baos), System.err);",
          "",
          "[Added Lines]",
          "140:             Authentication devAuth = User.get(\"dev\").impersonate();",
          "141:             getJobCommand.setTransportAuth(devAuth);",
          "143:             getJobCommand.main(Collections.singletonList(pName), Locale.ENGLISH, System.in, new PrintStream(baos), System.err);",
          "145:             copyJobCommand = new CopyJobCommand();",
          "146:             copyJobCommand.setTransportAuth(devAuth);",
          "147:             String pDevName = pName + \"-dev\";",
          "148:             assertThat(copyJobCommand.main(Arrays.asList(pName, pDevName), Locale.ENGLISH, System.in, System.out, System.err), not(0));",
          "149:             assertNull(jenkins.getItemByFullName(pDevName, FreeStyleProject.class));",
          "",
          "---------------"
        ]
      }
    }
  ]
}