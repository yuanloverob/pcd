{
  "cve_id": "CVE-2018-16056",
  "cve_desc": "In Wireshark 2.6.0 to 2.6.2, 2.4.0 to 2.4.8, and 2.2.0 to 2.2.16, the Bluetooth Attribute Protocol dissector could crash. This was addressed in epan/dissectors/packet-btatt.c by verifying that a dissector for a specific UUID exists.",
  "repo": "wireshark/wireshark",
  "patch_hash": "f98fbce64cb230e94a2cafc410a3cedad657b485",
  "patch_info": {
    "commit_hash": "f98fbce64cb230e94a2cafc410a3cedad657b485",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/f98fbce64cb230e94a2cafc410a3cedad657b485",
    "files": [
      "epan/dissectors/packet-btatt.c"
    ],
    "message": "Don't assume a given btgatt.uuid0xXXXX dissector exists.\n\nThey're not guaranteed to have been registered.\n\nBug: 14994\nChange-Id: I11c2b2d4d8a7dd020a0ef3d700b29b0859bc68ca\nReviewed-on: https://code.wireshark.org/review/28805\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
    "before_after_code_files": [
      "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c": [
      "File: epan/dissectors/packet-btatt.c -> epan/dissectors/packet-btatt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4275: static gint",
      "4276: btatt_dissect_attribute_handle(guint16 handle, tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, btatt_data_t *att_data);",
      "4278: static gint",
      "4279: dissect_attribute_value(proto_tree *tree, proto_item *patron_item, packet_info *pinfo, tvbuff_t *old_tvb,",
      "4280:         gint old_offset, gint length, guint16 handle, bluetooth_uuid_t uuid, btatt_data_t *att_data)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4278: static int",
      "4279: btatt_call_dissector_by_dissector_name_with_data(const char *dissector_name,",
      "4280:         tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
      "4281: {",
      "4282:  dissector_handle_t handle;",
      "4284:  handle = find_dissector(dissector_name);",
      "4285:  if (handle != NULL)",
      "4286:   return call_dissector_with_data(handle, tvb, pinfo, tree, data);",
      "4287:  else",
      "4288:   return call_data_dissector(tvb, pinfo, tree);",
      "4289: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4828:             proto_tree_add_item(tree, hf_btatt_value_trigger_setting_analog, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
      "4829:             offset += 2;",
      "4830:         } else if (value == 4) {",
      "4832:             offset += 1;",
      "4833:         } else if (value == 5 || value == 6) {",
      "4834:             proto_tree_add_item(tree, hf_btatt_value_trigger_setting_analog_one, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
      "",
      "[Removed Lines]",
      "4831:             call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a56\"), tvb_new_subset_length_caplen(tvb, offset, 1, 1), pinfo, tree, att_data);",
      "",
      "[Added Lines]",
      "4844:             btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a56\", tvb_new_subset_length_caplen(tvb, offset, 1, 1), pinfo, tree, att_data);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "5283:         if (bluetooth_gatt_has_no_parameter(att_data->opcode))",
      "5284:             break;",
      "5287:         offset += 9;",
      "5290:         offset += 2;",
      "5293:         offset += 4;",
      "5295:         break;",
      "",
      "[Removed Lines]",
      "5286:         call_dissector_with_data(find_dissector(\"btgatt.uuid0x2A0C\"), tvb_new_subset_length_caplen(tvb, offset, 9, 9), pinfo, tree, att_data);",
      "5289:         call_dissector_with_data(find_dissector(\"btgatt.uuid0x2A0F\"), tvb_new_subset_length_caplen(tvb, offset, 2, 2), pinfo, tree, att_data);",
      "5292:         call_dissector_with_data(find_dissector(\"btgatt.uuid0x2A14\"), tvb_new_subset_length_caplen(tvb, offset, 4, 4), pinfo, tree, att_data);",
      "",
      "[Added Lines]",
      "5299:         btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2A0C\", tvb_new_subset_length_caplen(tvb, offset, 9, 9), pinfo, tree, att_data);",
      "5302:         btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2A0F\", tvb_new_subset_length_caplen(tvb, offset, 2, 2), pinfo, tree, att_data);",
      "5305:         btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2A14\", tvb_new_subset_length_caplen(tvb, offset, 4, 4), pinfo, tree, att_data);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "6596:         if (bluetooth_gatt_has_no_parameter(att_data->opcode))",
      "6597:             break;",
      "6600:         offset += 1;",
      "6603:         offset += 2;",
      "6605:         break;",
      "",
      "[Removed Lines]",
      "6599:         call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a56\"), tvb_new_subset_length_caplen(tvb, offset, 1, 1), pinfo, tree, att_data);",
      "6602:         call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a58\"), tvb_new_subset_length_caplen(tvb, offset, 2, 2), pinfo, tree, att_data);",
      "",
      "[Added Lines]",
      "6612:         btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a56\", tvb_new_subset_length_caplen(tvb, offset, 1, 1), pinfo, tree, att_data);",
      "6615:         btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a58\", tvb_new_subset_length_caplen(tvb, offset, 2, 2), pinfo, tree, att_data);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "6696:             sub_item = proto_tree_add_item(tree, hf_btatt_plx_spot_check_measurement_timestamp, tvb, offset, 7, ENC_NA);",
      "6697:             sub_tree = proto_item_add_subtree(sub_item, ett_btatt_value);",
      "6700:             offset += 7;",
      "6701:         }",
      "",
      "[Removed Lines]",
      "6699:             call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a08\"), tvb_new_subset_length_caplen(tvb, offset, 7, 7), pinfo, sub_tree, att_data);",
      "",
      "[Added Lines]",
      "6712:             btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a08\", tvb_new_subset_length_caplen(tvb, offset, 7, 7), pinfo, sub_tree, att_data);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "9269:         sub_item = proto_tree_add_item(tree, hf_btatt_ots_object_first_created, tvb, offset, 7, ENC_NA);",
      "9270:         sub_tree = proto_item_add_subtree(sub_item, ett_btatt_value);",
      "9273:         offset += 7;",
      "9275:         break;",
      "",
      "[Removed Lines]",
      "9272:         call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a08\"), tvb_new_subset_length_caplen(tvb, offset, 7, 7), pinfo, sub_tree, att_data);",
      "",
      "[Added Lines]",
      "9285:         btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a08\", tvb_new_subset_length_caplen(tvb, offset, 7, 7), pinfo, sub_tree, att_data);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "9288:         sub_item = proto_tree_add_item(tree, hf_btatt_ots_object_last_modified, tvb, offset, 7, ENC_NA);",
      "9289:         sub_tree = proto_item_add_subtree(sub_item, ett_btatt_value);",
      "9292:         offset += 7;",
      "9294:         break;",
      "",
      "[Removed Lines]",
      "9291:         call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a08\"), tvb_new_subset_length_caplen(tvb, offset, 7, 7), pinfo, sub_tree, att_data);",
      "",
      "[Added Lines]",
      "9304:         btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a08\", tvb_new_subset_length_caplen(tvb, offset, 7, 7), pinfo, sub_tree, att_data);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "9495:             break;",
      "9499:             offset += 7;",
      "9502:             offset += 7;",
      "9504:             break;",
      "",
      "[Removed Lines]",
      "9498:             call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a08\"), tvb_new_subset_length_caplen(tvb, offset, 7, 7), pinfo, tree, att_data);",
      "9501:             call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a08\"), tvb_new_subset_length_caplen(tvb, offset, 7, 7), pinfo, tree, att_data);",
      "",
      "[Added Lines]",
      "9511:             btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a08\", tvb_new_subset_length_caplen(tvb, offset, 7, 7), pinfo, tree, att_data);",
      "9514:             btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a08\", tvb_new_subset_length_caplen(tvb, offset, 7, 7), pinfo, tree, att_data);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "10db757c350b5427eb668ad8a20607a9ea28c099",
      "candidate_info": {
        "commit_hash": "10db757c350b5427eb668ad8a20607a9ea28c099",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/10db757c350b5427eb668ad8a20607a9ea28c099",
        "files": [
          "epan/dissectors/packet-btatt.c"
        ],
        "message": "Don't assume a given btgatt.uuid0xXXXX dissector exists.\n\nThey're not guaranteed to have been registered.\n\nBug: 14994\nChange-Id: I11c2b2d4d8a7dd020a0ef3d700b29b0859bc68ca\nReviewed-on: https://code.wireshark.org/review/28805\nReviewed-by: Guy Harris <guy@alum.mit.edu>\n(cherry picked from commit f98fbce64cb230e94a2cafc410a3cedad657b485)\nReviewed-on: https://code.wireshark.org/review/28806",
        "before_after_code_files": [
          "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c"
          ],
          "candidate": [
            "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c": [
          "File: epan/dissectors/packet-btatt.c -> epan/dissectors/packet-btatt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4205: static gint",
          "4206: btatt_dissect_attribute_handle(guint16 handle, tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, btatt_data_t *att_data);",
          "4208: static gint",
          "4209: dissect_attribute_value(proto_tree *tree, proto_item *patron_item, packet_info *pinfo, tvbuff_t *old_tvb,",
          "4210:         gint old_offset, gint length, guint16 handle, bluetooth_uuid_t uuid, btatt_data_t *att_data)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4208: static int",
          "4209: btatt_call_dissector_by_dissector_name_with_data(const char *dissector_name,",
          "4210:         tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "4211: {",
          "4212:  dissector_handle_t handle;",
          "4214:  handle = find_dissector(dissector_name);",
          "4215:  if (handle != NULL)",
          "4216:   return call_dissector_with_data(handle, tvb, pinfo, tree, data);",
          "4217:  else",
          "4218:   return call_data_dissector(tvb, pinfo, tree);",
          "4219: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4728:             proto_tree_add_item(tree, hf_btatt_value_trigger_setting_analog, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4729:             offset += 2;",
          "4730:         } else if (value == 4) {",
          "4732:             offset += 1;",
          "4733:         } else if (value == 5 || value == 6) {",
          "4734:             proto_tree_add_item(tree, hf_btatt_value_trigger_setting_analog_one, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "",
          "[Removed Lines]",
          "4731:             call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a56\"), tvb_new_subset_length_caplen(tvb, offset, 1, 1), pinfo, tree, att_data);",
          "",
          "[Added Lines]",
          "4744:             btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a56\", tvb_new_subset_length_caplen(tvb, offset, 1, 1), pinfo, tree, att_data);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6443:         if (bluetooth_gatt_has_no_parameter(att_data->opcode))",
          "6444:             break;",
          "6447:         offset += 1;",
          "6450:         offset += 2;",
          "6452:         break;",
          "",
          "[Removed Lines]",
          "6446:         call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a56\"), tvb_new_subset_length_caplen(tvb, offset, 1, 1), pinfo, tree, att_data);",
          "6449:         call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a58\"), tvb_new_subset_length_caplen(tvb, offset, 2, 2), pinfo, tree, att_data);",
          "",
          "[Added Lines]",
          "6459:         btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a56\", tvb_new_subset_length_caplen(tvb, offset, 1, 1), pinfo, tree, att_data);",
          "6462:         btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a58\", tvb_new_subset_length_caplen(tvb, offset, 2, 2), pinfo, tree, att_data);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6543:             sub_item = proto_tree_add_item(tree, hf_btatt_plx_spot_check_measurement_timestamp, tvb, offset, 7, ENC_NA);",
          "6544:             sub_tree = proto_item_add_subtree(sub_item, ett_btatt_value);",
          "6547:             offset += 7;",
          "6548:         }",
          "",
          "[Removed Lines]",
          "6546:             call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a08\"), tvb_new_subset_length_caplen(tvb, offset, 7, 7), pinfo, sub_tree, att_data);",
          "",
          "[Added Lines]",
          "6559:             btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a08\", tvb_new_subset_length_caplen(tvb, offset, 7, 7), pinfo, sub_tree, att_data);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "9116:         sub_item = proto_tree_add_item(tree, hf_btatt_ots_object_first_created, tvb, offset, 7, ENC_NA);",
          "9117:         sub_tree = proto_item_add_subtree(sub_item, ett_btatt_value);",
          "9120:         offset += 7;",
          "9122:         break;",
          "",
          "[Removed Lines]",
          "9119:         call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a08\"), tvb_new_subset_length_caplen(tvb, offset, 7, 7), pinfo, sub_tree, att_data);",
          "",
          "[Added Lines]",
          "9132:         btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a08\", tvb_new_subset_length_caplen(tvb, offset, 7, 7), pinfo, sub_tree, att_data);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "9135:         sub_item = proto_tree_add_item(tree, hf_btatt_ots_object_last_modified, tvb, offset, 7, ENC_NA);",
          "9136:         sub_tree = proto_item_add_subtree(sub_item, ett_btatt_value);",
          "9139:         offset += 7;",
          "9141:         break;",
          "",
          "[Removed Lines]",
          "9138:         call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a08\"), tvb_new_subset_length_caplen(tvb, offset, 7, 7), pinfo, sub_tree, att_data);",
          "",
          "[Added Lines]",
          "9151:         btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a08\", tvb_new_subset_length_caplen(tvb, offset, 7, 7), pinfo, sub_tree, att_data);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "9342:             break;",
          "9346:             offset += 7;",
          "9349:             offset += 7;",
          "9351:             break;",
          "",
          "[Removed Lines]",
          "9345:             call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a08\"), tvb_new_subset_length_caplen(tvb, offset, 7, 7), pinfo, tree, att_data);",
          "9348:             call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a08\"), tvb_new_subset_length_caplen(tvb, offset, 7, 7), pinfo, tree, att_data);",
          "",
          "[Added Lines]",
          "9358:             btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a08\", tvb_new_subset_length_caplen(tvb, offset, 7, 7), pinfo, tree, att_data);",
          "9361:             btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a08\", tvb_new_subset_length_caplen(tvb, offset, 7, 7), pinfo, tree, att_data);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e5f6e70687c525aef1550ac872f9198cffef2a1c",
      "candidate_info": {
        "commit_hash": "e5f6e70687c525aef1550ac872f9198cffef2a1c",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/e5f6e70687c525aef1550ac872f9198cffef2a1c",
        "files": [
          "epan/dissectors/packet-btatt.c"
        ],
        "message": "Don't assume a given btgatt.uuid0xXXXX dissector exists.\n\nThey're not guaranteed to have been registered.\n\nBug: 14994\nChange-Id: I11c2b2d4d8a7dd020a0ef3d700b29b0859bc68ca\nReviewed-on: https://code.wireshark.org/review/28805\nReviewed-by: Guy Harris <guy@alum.mit.edu>\n(cherry picked from commit f98fbce64cb230e94a2cafc410a3cedad657b485)\nReviewed-on: https://code.wireshark.org/review/28808",
        "before_after_code_files": [
          "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c"
          ],
          "candidate": [
            "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c": [
          "File: epan/dissectors/packet-btatt.c -> epan/dissectors/packet-btatt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4020:     return offset + 2;",
          "4021: }",
          "4023: static gint",
          "4024: dissect_attribute_value(proto_tree *tree, proto_item *patron_item, packet_info *pinfo, tvbuff_t *old_tvb,",
          "4025:         gint old_offset, gint length, guint16 handle, bluetooth_uuid_t uuid, btatt_data_t *att_data)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4023: static int",
          "4024: btatt_call_dissector_by_dissector_name_with_data(const char *dissector_name,",
          "4025:         tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "4026: {",
          "4027:  dissector_handle_t handle;",
          "4029:  handle = find_dissector(dissector_name);",
          "4030:  if (handle != NULL)",
          "4031:   return call_dissector_with_data(handle, tvb, pinfo, tree, data);",
          "4032:  else",
          "4033:   return call_data_dissector(tvb, pinfo, tree);",
          "4034: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4541:             proto_tree_add_item(tree, hf_btatt_value_trigger_setting_analog, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4542:             offset += 2;",
          "4543:         } else if (value == 4) {",
          "4545:             offset += 1;",
          "4546:         } else if (value == 5 || value == 6) {",
          "4547:             proto_tree_add_item(tree, hf_btatt_value_trigger_setting_analog_one, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "",
          "[Removed Lines]",
          "4544:             call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a56\"), tvb_new_subset(tvb, offset, 1, 1), pinfo, tree, att_data);",
          "",
          "[Added Lines]",
          "4557:             btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a56\", tvb_new_subset(tvb, offset, 1, 1), pinfo, tree, att_data);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6180:         if (bluetooth_gatt_has_no_parameter(att_data->opcode))",
          "6181:             break;",
          "6184:         offset += 1;",
          "6187:         offset += 2;",
          "6189:         break;",
          "",
          "[Removed Lines]",
          "6183:         call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a56\"), tvb_new_subset(tvb, offset, 1, 1), pinfo, tree, att_data);",
          "6186:         call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a58\"), tvb_new_subset(tvb, offset, 2, 2), pinfo, tree, att_data);",
          "",
          "[Added Lines]",
          "6196:         btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a56\", tvb_new_subset(tvb, offset, 1, 1), pinfo, tree, att_data);",
          "6199:         btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a58\", tvb_new_subset(tvb, offset, 2, 2), pinfo, tree, att_data);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6280:             sub_item = proto_tree_add_item(tree, hf_btatt_plx_spot_check_measurement_timestamp, tvb, offset, 7, ENC_NA);",
          "6281:             sub_tree = proto_item_add_subtree(sub_item, ett_btatt_value);",
          "6284:             offset += 7;",
          "6285:         }",
          "",
          "[Removed Lines]",
          "6283:             call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a08\"), tvb_new_subset(tvb, offset, 7, 7), pinfo, sub_tree, att_data);",
          "",
          "[Added Lines]",
          "6296:             btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a08\", tvb_new_subset(tvb, offset, 7, 7), pinfo, sub_tree, att_data);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "8848:         sub_item = proto_tree_add_item(tree, hf_btatt_ots_object_first_created, tvb, offset, 7, ENC_NA);",
          "8849:         sub_tree = proto_item_add_subtree(sub_item, ett_btatt_value);",
          "8852:         offset += 7;",
          "8854:         break;",
          "",
          "[Removed Lines]",
          "8851:         call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a08\"), tvb_new_subset(tvb, offset, 7, 7), pinfo, sub_tree, att_data);",
          "",
          "[Added Lines]",
          "8864:         btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a08\", tvb_new_subset(tvb, offset, 7, 7), pinfo, sub_tree, att_data);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "8867:         sub_item = proto_tree_add_item(tree, hf_btatt_ots_object_last_modified, tvb, offset, 7, ENC_NA);",
          "8868:         sub_tree = proto_item_add_subtree(sub_item, ett_btatt_value);",
          "8871:         offset += 7;",
          "8873:         break;",
          "",
          "[Removed Lines]",
          "8870:         call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a08\"), tvb_new_subset(tvb, offset, 7, 7), pinfo, sub_tree, att_data);",
          "",
          "[Added Lines]",
          "8883:         btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a08\", tvb_new_subset(tvb, offset, 7, 7), pinfo, sub_tree, att_data);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "9074:             break;",
          "9078:             offset += 7;",
          "9081:             offset += 7;",
          "9083:             break;",
          "",
          "[Removed Lines]",
          "9077:             call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a08\"), tvb_new_subset(tvb, offset, 7, 7), pinfo, tree, att_data);",
          "9080:             call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a08\"), tvb_new_subset(tvb, offset, 7, 7), pinfo, tree, att_data);",
          "",
          "[Added Lines]",
          "9090:             btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a08\", tvb_new_subset(tvb, offset, 7, 7), pinfo, tree, att_data);",
          "9093:             btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a08\", tvb_new_subset(tvb, offset, 7, 7), pinfo, tree, att_data);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4be24806b2a5dc9dec6e0d77899b03b8b212384c",
      "candidate_info": {
        "commit_hash": "4be24806b2a5dc9dec6e0d77899b03b8b212384c",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/4be24806b2a5dc9dec6e0d77899b03b8b212384c",
        "files": [
          "epan/dissectors/packet-btatt.c"
        ],
        "message": "Don't assume a given btgatt.uuid0xXXXX dissector exists.\n\nThey're not guaranteed to have been registered.\n\nBug: 14994\nChange-Id: I11c2b2d4d8a7dd020a0ef3d700b29b0859bc68ca\nReviewed-on: https://code.wireshark.org/review/28805\nReviewed-by: Guy Harris <guy@alum.mit.edu>\n(cherry picked from commit f98fbce64cb230e94a2cafc410a3cedad657b485)\nReviewed-on: https://code.wireshark.org/review/28807",
        "before_after_code_files": [
          "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c"
          ],
          "candidate": [
            "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c": [
          "File: epan/dissectors/packet-btatt.c -> epan/dissectors/packet-btatt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4047: static gint",
          "4048: btatt_dissect_attribute_handle(guint16 handle, tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, btatt_data_t *att_data);",
          "4050: static gint",
          "4051: dissect_attribute_value(proto_tree *tree, proto_item *patron_item, packet_info *pinfo, tvbuff_t *old_tvb,",
          "4052:         gint old_offset, gint length, guint16 handle, bluetooth_uuid_t uuid, btatt_data_t *att_data)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4050: static int",
          "4051: btatt_call_dissector_by_dissector_name_with_data(const char *dissector_name,",
          "4052:         tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "4053: {",
          "4054:  dissector_handle_t handle;",
          "4056:  handle = find_dissector(dissector_name);",
          "4057:  if (handle != NULL)",
          "4058:   return call_dissector_with_data(handle, tvb, pinfo, tree, data);",
          "4059:  else",
          "4060:   return call_data_dissector(tvb, pinfo, tree);",
          "4061: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4570:             proto_tree_add_item(tree, hf_btatt_value_trigger_setting_analog, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "4571:             offset += 2;",
          "4572:         } else if (value == 4) {",
          "4574:             offset += 1;",
          "4575:         } else if (value == 5 || value == 6) {",
          "4576:             proto_tree_add_item(tree, hf_btatt_value_trigger_setting_analog_one, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "",
          "[Removed Lines]",
          "4573:             call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a56\"), tvb_new_subset_length_caplen(tvb, offset, 1, 1), pinfo, tree, att_data);",
          "",
          "[Added Lines]",
          "4586:             btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a56\", tvb_new_subset_length_caplen(tvb, offset, 1, 1), pinfo, tree, att_data);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6277:         if (bluetooth_gatt_has_no_parameter(att_data->opcode))",
          "6278:             break;",
          "6281:         offset += 1;",
          "6284:         offset += 2;",
          "6286:         break;",
          "",
          "[Removed Lines]",
          "6280:         call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a56\"), tvb_new_subset_length_caplen(tvb, offset, 1, 1), pinfo, tree, att_data);",
          "6283:         call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a58\"), tvb_new_subset_length_caplen(tvb, offset, 2, 2), pinfo, tree, att_data);",
          "",
          "[Added Lines]",
          "6293:         btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a56\", tvb_new_subset_length_caplen(tvb, offset, 1, 1), pinfo, tree, att_data);",
          "6296:         btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a58\", tvb_new_subset_length_caplen(tvb, offset, 2, 2), pinfo, tree, att_data);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6377:             sub_item = proto_tree_add_item(tree, hf_btatt_plx_spot_check_measurement_timestamp, tvb, offset, 7, ENC_NA);",
          "6378:             sub_tree = proto_item_add_subtree(sub_item, ett_btatt_value);",
          "6381:             offset += 7;",
          "6382:         }",
          "",
          "[Removed Lines]",
          "6380:             call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a08\"), tvb_new_subset_length_caplen(tvb, offset, 7, 7), pinfo, sub_tree, att_data);",
          "",
          "[Added Lines]",
          "6393:             btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a08\", tvb_new_subset_length_caplen(tvb, offset, 7, 7), pinfo, sub_tree, att_data);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "8950:         sub_item = proto_tree_add_item(tree, hf_btatt_ots_object_first_created, tvb, offset, 7, ENC_NA);",
          "8951:         sub_tree = proto_item_add_subtree(sub_item, ett_btatt_value);",
          "8954:         offset += 7;",
          "8956:         break;",
          "",
          "[Removed Lines]",
          "8953:         call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a08\"), tvb_new_subset_length_caplen(tvb, offset, 7, 7), pinfo, sub_tree, att_data);",
          "",
          "[Added Lines]",
          "8966:         btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a08\", tvb_new_subset_length_caplen(tvb, offset, 7, 7), pinfo, sub_tree, att_data);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "8969:         sub_item = proto_tree_add_item(tree, hf_btatt_ots_object_last_modified, tvb, offset, 7, ENC_NA);",
          "8970:         sub_tree = proto_item_add_subtree(sub_item, ett_btatt_value);",
          "8973:         offset += 7;",
          "8975:         break;",
          "",
          "[Removed Lines]",
          "8972:         call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a08\"), tvb_new_subset_length_caplen(tvb, offset, 7, 7), pinfo, sub_tree, att_data);",
          "",
          "[Added Lines]",
          "8985:         btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a08\", tvb_new_subset_length_caplen(tvb, offset, 7, 7), pinfo, sub_tree, att_data);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "9176:             break;",
          "9180:             offset += 7;",
          "9183:             offset += 7;",
          "9185:             break;",
          "",
          "[Removed Lines]",
          "9179:             call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a08\"), tvb_new_subset_length_caplen(tvb, offset, 7, 7), pinfo, tree, att_data);",
          "9182:             call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a08\"), tvb_new_subset_length_caplen(tvb, offset, 7, 7), pinfo, tree, att_data);",
          "",
          "[Added Lines]",
          "9192:             btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a08\", tvb_new_subset_length_caplen(tvb, offset, 7, 7), pinfo, tree, att_data);",
          "9195:             btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a08\", tvb_new_subset_length_caplen(tvb, offset, 7, 7), pinfo, tree, att_data);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "954fe24e418723df7bac6be146528947ca11d060",
      "candidate_info": {
        "commit_hash": "954fe24e418723df7bac6be146528947ca11d060",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/954fe24e418723df7bac6be146528947ca11d060",
        "files": [
          "epan/dissectors/packet-btatt.c"
        ],
        "message": "If the dissector isn't registered, you shouldn't be calling it.\n\nReport a dissector bug, rather than calling the data dissector.\n\nChange-Id: I7bde1001a48d2443acf2dc7caa83434e0972aab7\nReviewed-on: https://code.wireshark.org/review/28814\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
        "before_after_code_files": [
          "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c"
          ],
          "candidate": [
            "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c": [
          "File: epan/dissectors/packet-btatt.c -> epan/dissectors/packet-btatt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4285:  if (handle != NULL)",
          "4286:   return call_dissector_with_data(handle, tvb, pinfo, tree, data);",
          "4287:  else",
          "4289: }",
          "4291: static gint",
          "",
          "[Removed Lines]",
          "4288:   return call_data_dissector(tvb, pinfo, tree);",
          "",
          "[Added Lines]",
          "4288:   REPORT_DISSECTOR_BUG(\"Dissector %s not registered\", dissector_name);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e62a8bd5db75622269f5b62e4f991919d9bc7b72",
      "candidate_info": {
        "commit_hash": "e62a8bd5db75622269f5b62e4f991919d9bc7b72",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/e62a8bd5db75622269f5b62e4f991919d9bc7b72",
        "files": [
          "epan/dissectors/packet-btatt.c"
        ],
        "message": "In bgatt.uuid0xXXXX names, hex digits in XXXX are lower case.\n\nThe dissectors are registered using lower-case a through f; call them\nthat way.\n\nXXX - why is this not just done with a dissector table with an unsigned\ninteger key?\n\nBug: 14994\nChange-Id: I73dbfe8ea0cc3545d67f5315d3cd8ac1eee3385f\nReviewed-on: https://code.wireshark.org/review/28818\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
        "before_after_code_files": [
          "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c"
          ],
          "candidate": [
            "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c": [
          "File: epan/dissectors/packet-btatt.c -> epan/dissectors/packet-btatt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5296:         if (bluetooth_gatt_has_no_parameter(att_data->opcode))",
          "5297:             break;",
          "5300:         offset += 9;",
          "5303:         offset += 2;",
          "5306:         offset += 4;",
          "5308:         break;",
          "",
          "[Removed Lines]",
          "5299:         btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2A0C\", tvb_new_subset_length_caplen(tvb, offset, 9, 9), pinfo, tree, att_data);",
          "5302:         btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2A0F\", tvb_new_subset_length_caplen(tvb, offset, 2, 2), pinfo, tree, att_data);",
          "5305:         btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2A14\", tvb_new_subset_length_caplen(tvb, offset, 4, 4), pinfo, tree, att_data);",
          "",
          "[Added Lines]",
          "5299:         btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a0c\", tvb_new_subset_length_caplen(tvb, offset, 9, 9), pinfo, tree, att_data);",
          "5302:         btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a0f\", tvb_new_subset_length_caplen(tvb, offset, 2, 2), pinfo, tree, att_data);",
          "5305:         btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a14\", tvb_new_subset_length_caplen(tvb, offset, 4, 4), pinfo, tree, att_data);",
          "",
          "---------------"
        ]
      }
    }
  ]
}