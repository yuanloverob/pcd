{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0a0e89fa2136ffdcecff19916c22f25f4fca55c5",
      "candidate_info": {
        "commit_hash": "0a0e89fa2136ffdcecff19916c22f25f4fca55c5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0a0e89fa2136ffdcecff19916c22f25f4fca55c5",
        "files": [
          "ext/misc/blobio.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix an error message on the blobread() extension function so that it says \"read\" instead of \"write\".\n\nFossilOrigin-Name: 7cbb9a5fe835d01be158edd1e2f9d553dc257f2d27b53a5d5bf6660d0bd101c4",
        "before_after_code_files": [
          "ext/misc/blobio.c||ext/misc/blobio.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/blobio.c||ext/misc/blobio.c": [
          "File: ext/misc/blobio.c -> ext/misc/blobio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:   sqlite3_blob_close(pBlob);",
          "77:   if( rc ){",
          "78:     sqlite3_free(aData);",
          "80:   }else{",
          "81:     sqlite3_result_blob(context, aData, nData, sqlite3_free);",
          "82:   }",
          "",
          "[Removed Lines]",
          "79:     sqlite3_result_error(context, \"BLOB write failed\", -1);",
          "",
          "[Added Lines]",
          "79:     sqlite3_result_error(context, \"BLOB read failed\", -1);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c86ca3f0220a5f9e7f7f1818f6e1220d851f3ebed6a5f0aae6ac38309bd2930e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c7d12f4ad4283f1b3a09d140c489319c9d2eb8f8",
      "candidate_info": {
        "commit_hash": "c7d12f4ad4283f1b3a09d140c489319c9d2eb8f8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c7d12f4ad4283f1b3a09d140c489319c9d2eb8f8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "src/whereInt.h",
          "src/whereexpr.c",
          "test/index6.test"
        ],
        "message": "When we play games with COLLATE in order to commute an operator in the WHERE clause processing, be sure not to use the commuted operator to qualify a partial index, as insufficient COLLATE information is preserved to verify that the expression will correctly qualify the index. Ticket [767a8cbc6d20bd68]\n\nFossilOrigin-Name: 5351e920f489562f959ab8a376ff720f845ea165e0cdc7c3a271aac53c2aa64a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "src/whereInt.h||src/whereInt.h",
          "src/whereexpr.c||src/whereexpr.c",
          "test/index6.test||test/index6.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6e7b4527d32cc1be0294614b9d7363d4b59cf654a954b86515b3f6888975ce73",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2800:   }",
          "2801:   if( pParse->db->flags & SQLITE_EnableQPSG ) pParse = 0;",
          "2802:   for(i=0, pTerm=pWC->a; i<pWC->nTerm; i++, pTerm++){",
          "2804:     if( (!ExprHasProperty(pExpr, EP_FromJoin) || pExpr->iRightJoinTable==iTab)",
          "2805:      && sqlite3ExprImpliesExpr(pParse, pExpr, pWhere, iTab)",
          "2806:     ){",
          "",
          "[Removed Lines]",
          "2803:     Expr *pExpr = pTerm->pExpr;",
          "",
          "[Added Lines]",
          "2803:     Expr *pExpr;",
          "2804:     if( pTerm->wtFlags & TERM_NOPARTIDX ) continue;",
          "2805:     pExpr = pTerm->pExpr;",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:   u16 expRight = (pExpr->pRight->flags & EP_Collate);",
          "123:   u16 expLeft = (pExpr->pLeft->flags & EP_Collate);",
          "124:   assert( allowedOp(pExpr->op) && pExpr->op!=TK_IN );",
          "125:   if( expRight==expLeft ){",
          "",
          "[Removed Lines]",
          "121: static void exprCommute(Parse *pParse, Expr *pExpr){",
          "",
          "[Added Lines]",
          "126: static u16 exprCommute(Parse *pParse, Expr *pExpr){",
          "129:   u16 wtFlags = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130:       pExpr->pRight->flags &= ~EP_Collate;",
          "131:     }else if( sqlite3ExprCollSeq(pParse, pExpr->pLeft)!=0 ){",
          "135:       pExpr->pLeft->flags |= EP_Collate;",
          "136:     }",
          "137:   }",
          "138:   SWAP(Expr*,pExpr->pRight,pExpr->pLeft);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137:       wtFlags |= TERM_NOPARTIDX;",
          "143:       wtFlags |= TERM_NOPARTIDX;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144:     assert( pExpr->op>=TK_GT && pExpr->op<=TK_GE );",
          "145:     pExpr->op = ((pExpr->op-TK_GT)^2)+TK_GT;",
          "146:   }",
          "147: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155:   return wtFlags;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1140:         pDup = pExpr;",
          "1141:         pNew = pTerm;",
          "1142:       }",
          "1144:       pNew->leftCursor = aiCurCol[0];",
          "1145:       pNew->u.leftColumn = aiCurCol[1];",
          "1146:       testcase( (prereqLeft | extraRight) != prereqLeft );",
          "",
          "[Removed Lines]",
          "1143:       exprCommute(pParse, pDup);",
          "",
          "[Added Lines]",
          "1152:       pNew->wtFlags |= exprCommute(pParse, pDup);",
          "",
          "---------------"
        ],
        "test/index6.test||test/index6.test": [
          "File: test/index6.test -> test/index6.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "462:   SELECT 1 FROM t0 WHERE (c0 IS FALSE) IN (FALSE);",
          "463: } {1}",
          "466: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "465: # 2019-09-03",
          "466: # Ticket https://sqlite.org/src/info/767a8cbc6d20bd68",
          "467: do_execsql_test index6-16.1 {",
          "468:   DROP TABLE t0;",
          "469:   CREATE TABLE t0(c0 COLLATE NOCASE, c1);",
          "470:   CREATE INDEX i0 ON t0(0) WHERE c0 >= c1;",
          "471:   INSERT INTO t0 VALUES('a', 'B');",
          "472:   SELECT c1 <= c0, c0 >= c1 FROM t0;",
          "473: } {1 0}",
          "474: do_execsql_test index6-16.2 {",
          "475:   SELECT 2 FROM t0 WHERE c0 >= c1;",
          "476: } {}",
          "477: do_execsql_test index6-16.3 {",
          "478:   SELECT 3 FROM t0 WHERE c1 <= c0;",
          "479: } {3}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b336d1ab83e9a7803e3247c6d87ec6ffdc568224",
      "candidate_info": {
        "commit_hash": "b336d1ab83e9a7803e3247c6d87ec6ffdc568224",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b336d1ab83e9a7803e3247c6d87ec6ffdc568224",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Add a call to sqlite3FaultSim(410) inside of btreeRestoreCursorPosition() to simplify testing of error scenarios.\n\nFossilOrigin-Name: bb643bac535ac7d5fb4c13edb8782cd13540bbc7d2b2deb689f4ca8d1914f422",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fb125bd338ab32b33d02fe61b76497b6d4a2a160056d6e759e15c94903e61a41",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "840:     return pCur->skipNext;",
          "841:   }",
          "842:   pCur->eState = CURSOR_INVALID;",
          "844:   if( rc==SQLITE_OK ){",
          "845:     sqlite3_free(pCur->pKey);",
          "846:     pCur->pKey = 0;",
          "",
          "[Removed Lines]",
          "843:   rc = btreeMoveto(pCur, pCur->pKey, pCur->nKey, 0, &skipNext);",
          "",
          "[Added Lines]",
          "843:   if( sqlite3FaultSim(410) ){",
          "844:     rc = SQLITE_IOERR;",
          "845:   }else{",
          "846:     rc = btreeMoveto(pCur, pCur->pKey, pCur->nKey, 0, &skipNext);",
          "847:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fbd79cc585d62868ccf2e08d44f3f65db744287a",
      "candidate_info": {
        "commit_hash": "fbd79cc585d62868ccf2e08d44f3f65db744287a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fbd79cc585d62868ccf2e08d44f3f65db744287a",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/fts5_storage.c",
          "ext/fts5/test/fts5misc.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix problems with using the fts5 'rebuild' command inside a transaction that contains other updates of the same table. Fix for [e258f008].\n\nFossilOrigin-Name: 238e0835714696aba0631f288fcc30ec5fddb43893d469c6bf017f386b3cddee",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c",
          "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5235: int sqlite3Fts5IndexReinit(Fts5Index *p){",
          "5236:   Fts5Structure s;",
          "5237:   fts5StructureInvalidate(p);",
          "5238:   memset(&s, 0, sizeof(Fts5Structure));",
          "5239:   fts5DataWrite(p, FTS5_AVERAGES_ROWID, (const u8*)\"\", 0);",
          "5240:   fts5StructureWrite(p, &s);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5238:   fts5IndexDiscardData(p);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c": [
          "File: ext/fts5/fts5_storage.c -> ext/fts5/fts5_storage.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "560:   Fts5Config *pConfig = p->pConfig;",
          "561:   int rc;",
          "564:   rc = fts5ExecPrintf(pConfig->db, 0,",
          "565:       \"DELETE FROM %Q.'%q_data';\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "563:   p->bTotalsValid = 0;",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test": [
          "File: ext/fts5/test/fts5misc.test -> ext/fts5/test/fts5misc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "122: }",
          "125: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124: #-------------------------------------------------------------------------",
          "125: reset_db",
          "126: do_execsql_test 4.0 {",
          "127:   CREATE VIRTUAL TABLE vt0 USING fts5(c0);",
          "128:   INSERT INTO vt0(c0) VALUES ('xyz');",
          "129: }",
          "131: do_execsql_test 4.1 {",
          "132:   BEGIN;",
          "133:     INSERT INTO vt0(c0) VALUES ('abc');",
          "134:     INSERT INTO vt0(vt0) VALUES('rebuild');",
          "135:   COMMIT;",
          "136: }",
          "138: do_execsql_test 4.2 {",
          "139:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "140: }",
          "142: do_execsql_test 4.3 {",
          "143:   BEGIN;",
          "144:     INSERT INTO vt0(vt0) VALUES('rebuild');",
          "145:     INSERT INTO vt0(vt0) VALUES('rebuild');",
          "146:   COMMIT;",
          "147: }",
          "149: do_execsql_test 4.4 {",
          "150:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "151: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8ab0aebdb3c2d6fb3160b2c58ce6cc0495a6ddd960878a6395958c837f3d1b71",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9c5f73433974bb186237917997550307177d0378",
      "candidate_info": {
        "commit_hash": "9c5f73433974bb186237917997550307177d0378",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9c5f73433974bb186237917997550307177d0378",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/walfault2.test"
        ],
        "message": "Avoid attempting to delete a file while it is still open in walfault2.test.\n\nFossilOrigin-Name: 9d54a63d6e3cd47b483cf0ee868a5e7f638bcb0e3cbdeaecc667f293b87a3e99",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/walfault2.test||test/walfault2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4371a0c46ee7bfbc0a1507796bd9eefd3371adad81b8dda214d018854316727b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/walfault2.test||test/walfault2.test": [
          "File: test/walfault2.test -> test/walfault2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: faultsim_save_and_close",
          "38: do_faultsim_test 1 -prep {",
          "39:   faultsim_restore",
          "40:   sqlite3 db file:test.db?psow=0 -uri 1",
          "41:   file_control_powersafe_overwrite db 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:   catch { db close }",
          "",
          "---------------"
        ]
      }
    }
  ]
}