{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "56e34c2f814905a8fc3329485c64a70d59d8eeba",
      "candidate_info": {
        "commit_hash": "56e34c2f814905a8fc3329485c64a70d59d8eeba",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/56e34c2f814905a8fc3329485c64a70d59d8eeba",
        "files": [
          "lib/http.js"
        ],
        "message": "http: fix deprecation warning module ID\n\nMea culpa, I told @mmalecki wrong",
        "before_after_code_files": [
          "lib/http.js||lihttp.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/http.js||lihttp.js": [
          "File: lib/http.js -> lihttp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1591: function Client(port, host) {",
          "1594:                 ' and will be removed in the near future. Do not use it.');",
          "1595:   host = host || 'localhost';",
          "1596:   port = port || 80;",
          "",
          "[Removed Lines]",
          "1593:   util._deprecationWarning('http.Client', 'http.Client is a legacy interface' +",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "052e63f27f7b1edf5635d6a266653fe77c42941c",
      "candidate_info": {
        "commit_hash": "052e63f27f7b1edf5635d6a266653fe77c42941c",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/052e63f27f7b1edf5635d6a266653fe77c42941c",
        "files": [
          "deps/v8/src/platform-macos.cc",
          "deps/v8/test/cctest/test-api.cc"
        ],
        "message": "v8: fix semaphore on MacOS\n\nLanded upstream: https://chromiumcodereview.appspot.com/10867009/",
        "before_after_code_files": [
          "deps/v8/src/platform-macos.cc||deps/v8/src/platform-macos.cc",
          "deps/v8/test/cctest/test-api.cc||deps/v8/test/cctest/test-api.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/v8/src/platform-macos.cc||deps/v8/src/platform-macos.cc": [
          "File: deps/v8/src/platform-macos.cc -> deps/v8/src/platform-macos.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "682: class MacOSSemaphore : public Semaphore {",
          "683:  public:",
          "684:   explicit MacOSSemaphore(int count) {",
          "686:   }",
          "688:   ~MacOSSemaphore() {",
          "690:   }",
          "697:   bool Wait(int timeout);",
          "",
          "[Removed Lines]",
          "685:     semaphore_create(mach_task_self(), &semaphore_, SYNC_POLICY_FIFO, count);",
          "689:     semaphore_destroy(mach_task_self(), semaphore_);",
          "695:   void Wait() { semaphore_wait(semaphore_); }",
          "",
          "[Added Lines]",
          "685:     int r;",
          "686:     r = semaphore_create(mach_task_self(),",
          "687:                          &semaphore_,",
          "688:                          SYNC_POLICY_FIFO,",
          "689:                          count);",
          "690:     ASSERT(r == KERN_SUCCESS);",
          "694:     int r;",
          "695:     r = semaphore_destroy(mach_task_self(), semaphore_);",
          "696:     ASSERT(r == KERN_SUCCESS);",
          "699:   void Wait() {",
          "700:     int r;",
          "701:     do {",
          "702:       r = semaphore_wait(semaphore_);",
          "703:       ASSERT(r == KERN_SUCCESS || r == KERN_ABORTED);",
          "704:     } while (r == KERN_ABORTED);",
          "705:   }",
          "",
          "---------------"
        ],
        "deps/v8/test/cctest/test-api.cc||deps/v8/test/cctest/test-api.cc": [
          "File: deps/v8/test/cctest/test-api.cc -> deps/v8/test/cctest/test-api.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include <limits.h>",
          "30: #include \"v8.h\"",
          "32: #include \"api.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: #ifndef WIN32",
          "31: #include <signal.h>  // kill",
          "32: #include <unistd.h>  // getpid",
          "33: #endif  // WIN32",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17017:   CHECK(context->Global()->Get(v8_str(\"y_from_obj\"))->IsUndefined());",
          "17018:   CHECK(context->Global()->Get(v8_str(\"y_from_subobj\"))->IsUndefined());",
          "17019: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17027: #ifndef WIN32",
          "17028: class ThreadInterruptTest {",
          "17029:  public:",
          "17030:   ThreadInterruptTest() : sem_(NULL), sem_value_(0) { }",
          "17031:   ~ThreadInterruptTest() { delete sem_; }",
          "17033:   void RunTest() {",
          "17034:     sem_ = i::OS::CreateSemaphore(0);",
          "17036:     InterruptThread i_thread(this);",
          "17037:     i_thread.Start();",
          "17039:     sem_->Wait();",
          "17040:     CHECK_EQ(kExpectedValue, sem_value_);",
          "17041:   }",
          "17043:  private:",
          "17044:   static const int kExpectedValue = 1;",
          "17046:   class InterruptThread : public i::Thread {",
          "17047:    public:",
          "17048:     explicit InterruptThread(ThreadInterruptTest* test)",
          "17049:         : Thread(\"InterruptThread\"), test_(test) {}",
          "17051:     virtual void Run() {",
          "17052:       struct sigaction action;",
          "17055:       i::OS::Sleep(100);",
          "17058:       memset(&action, 0, sizeof(action));",
          "17059:       action.sa_handler = SignalHandler;",
          "17060:       sigaction(SIGCHLD, &action, NULL);",
          "17063:       kill(getpid(), SIGCHLD);",
          "17066:       i::OS::Sleep(100);",
          "17069:       test_->sem_value_ = 1;",
          "17070:       test_->sem_->Signal();",
          "17071:     }",
          "17073:     static void SignalHandler(int signal) {",
          "17074:     }",
          "17076:    private:",
          "17077:      ThreadInterruptTest* test_;",
          "17078:      struct sigaction sa_;",
          "17079:   };",
          "17081:   i::Semaphore* sem_;",
          "17082:   volatile int sem_value_;",
          "17083: };",
          "17086: THREADED_TEST(SemaphoreInterruption) {",
          "17087:   ThreadInterruptTest().RunTest();",
          "17088: }",
          "17089: #endif  // WIN32",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "52f0c37d0912f3a348ef52788be604ccbd9d1a07",
      "candidate_info": {
        "commit_hash": "52f0c37d0912f3a348ef52788be604ccbd9d1a07",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/52f0c37d0912f3a348ef52788be604ccbd9d1a07",
        "files": [
          "deps/v8/src/frames-inl.h",
          "deps/v8/src/frames.h",
          "deps/v8/src/runtime.cc"
        ],
        "message": "Runtime_NotifyDeoptimized should search for function activation in all thread stacks.\n\nR=fschneider@chromium.org\nBUG=v8:1763\n\nReview URL: http://codereview.chromium.org/8240004\n\ngit-svn-id: https://v8.googlecode.com/svn/branches/bleeding_edge@9588 ce2b1a6d-e550-0410-aec6-3dcde31c8c00",
        "before_after_code_files": [
          "deps/v8/src/frames-inl.h||deps/v8/src/frames-inl.h",
          "deps/v8/src/frames.h||deps/v8/src/frames.h",
          "deps/v8/src/runtime.cc||deps/v8/src/runtime.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/v8/src/frames-inl.h||deps/v8/src/frames-inl.h": [
          "File: deps/v8/src/frames-inl.h -> deps/v8/src/frames-inl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "197:   if (!done()) Advance();",
          "198: }",
          "200: template<typename Iterator>",
          "201: inline JavaScriptFrame* JavaScriptFrameIteratorTemp<Iterator>::frame() const {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "201: template<typename Iterator>",
          "202: inline JavaScriptFrameIteratorTemp<Iterator>::JavaScriptFrameIteratorTemp(",
          "203:     Isolate* isolate, ThreadLocalTop* top)",
          "204:     : iterator_(isolate, top) {",
          "205:   if (!done()) Advance();",
          "206: }",
          "",
          "---------------"
        ],
        "deps/v8/src/frames.h||deps/v8/src/frames.h": [
          "File: deps/v8/src/frames.h -> deps/v8/src/frames.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "711:   inline explicit JavaScriptFrameIteratorTemp(Isolate* isolate);",
          "714:   explicit JavaScriptFrameIteratorTemp(StackFrame::Id id) { AdvanceToId(id); }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "713:   inline JavaScriptFrameIteratorTemp(Isolate* isolate, ThreadLocalTop* top);",
          "",
          "---------------"
        ],
        "deps/v8/src/runtime.cc||deps/v8/src/runtime.cc": [
          "File: deps/v8/src/runtime.cc -> deps/v8/src/runtime.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "8201: }",
          "8204: RUNTIME_FUNCTION(MaybeObject*, Runtime_NotifyDeoptimized) {",
          "8205:   HandleScope scope(isolate);",
          "8206:   ASSERT(args.length() == 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8204: class ActivationsFinder : public ThreadVisitor {",
          "8205:  public:",
          "8206:   explicit ActivationsFinder(JSFunction* function)",
          "8207:       : function_(function), has_activations_(false) {}",
          "8209:   void VisitThread(Isolate* isolate, ThreadLocalTop* top) {",
          "8210:     if (has_activations_) return;",
          "8212:     for (JavaScriptFrameIterator it(isolate, top); !it.done(); it.Advance()) {",
          "8213:       JavaScriptFrame* frame = it.frame();",
          "8214:       if (frame->is_optimized() && frame->function() == function_) {",
          "8215:         has_activations_ = true;",
          "8216:         return;",
          "8217:       }",
          "8218:     }",
          "8219:   }",
          "8221:   bool has_activations() { return has_activations_; }",
          "8223:  private:",
          "8224:   JSFunction* function_;",
          "8225:   bool has_activations_;",
          "8226: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8247:     return isolate->heap()->undefined_value();",
          "8248:   }",
          "8252:   while (!it.done()) {",
          "8253:     JavaScriptFrame* frame = it.frame();",
          "8254:     if (frame->is_optimized() && frame->function() == *function) {",
          "8256:     }",
          "8257:     it.Advance();",
          "8258:   }",
          "8261:     if (FLAG_trace_deopt) {",
          "8262:       PrintF(\"[removing optimized code for: \");",
          "8263:       function->PrintName();",
          "",
          "[Removed Lines]",
          "8251:   int activations = 0;",
          "8255:       activations++;",
          "8260:   if (activations == 0) {",
          "",
          "[Added Lines]",
          "8276:   bool has_other_activations = false;",
          "8280:       has_other_activations = true;",
          "8281:       break;",
          "8286:   if (!has_other_activations) {",
          "8287:     ActivationsFinder activations_finder(*function);",
          "8288:     isolate->thread_manager()->IterateArchivedThreads(&activations_finder);",
          "8289:     has_other_activations = activations_finder.has_activations();",
          "8290:   }",
          "8292:   if (!has_other_activations) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "98b4596a46eec9b3b06d3074aad24f5b80373638",
      "candidate_info": {
        "commit_hash": "98b4596a46eec9b3b06d3074aad24f5b80373638",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/98b4596a46eec9b3b06d3074aad24f5b80373638",
        "files": [
          "src/node.js"
        ],
        "message": "process: lint",
        "before_after_code_files": [
          "src/node.js||src/node.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.js||src/node.js": [
          "File: src/node.js -> src/node.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "266:     var module = new Module(name);",
          "267:     module.filename = path.join(cwd, name);",
          "268:     module.paths = Module._nodeModulePaths(cwd);",
          "270:     if (process._print_eval) console.log(result);",
          "271:   }",
          "",
          "[Removed Lines]",
          "269:     var result = module._compile('return eval(process._eval)',  name);",
          "",
          "[Added Lines]",
          "269:     var result = module._compile('return eval(process._eval)', name);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5fba3b85c5a50b6b8c9061d951dc09da8a221d40",
      "candidate_info": {
        "commit_hash": "5fba3b85c5a50b6b8c9061d951dc09da8a221d40",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/5fba3b85c5a50b6b8c9061d951dc09da8a221d40",
        "files": [
          "lib/fs.js"
        ],
        "message": "fs: fix ReferenceError in truncateSync()\n\nFixes a minor oversight introduced in 168a555, resulting in the following error:\n\n  fs.js:467\n      return fs.ftruncateSync(path, len, callback);\n                                         ^\n  ReferenceError: callback is not defined\n      at Object.fs.truncateSync (fs.js:467:40)",
        "before_after_code_files": [
          "lib/fs.js||lifs.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/fs.js||lifs.js": [
          "File: lib/fs.js -> lifs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "464: fs.truncateSync = function(path, len) {",
          "465:   if (typeof path === 'number') {",
          "468:   }",
          "469:   if (typeof len === 'undefined') {",
          "470:     len = 0;",
          "",
          "[Removed Lines]",
          "467:     return fs.ftruncateSync(path, len, callback);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}