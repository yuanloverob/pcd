{
  "cve_id": "CVE-2017-3730",
  "cve_desc": "In OpenSSL 1.1.0 before 1.1.0d, if a malicious server supplies bad parameters for a DHE or ECDHE key exchange then this can result in the client attempting to dereference a NULL pointer leading to a client crash. This could be exploited in a Denial of Service attack.",
  "repo": "openssl/openssl",
  "patch_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
  "patch_info": {
    "commit_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "files": [
      "ssl/statem/statem_clnt.c"
    ],
    "message": "Fix missing NULL checks in CKE processing\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c"
    ]
  },
  "patch_diff": {
    "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
      "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2258:         return 0;",
      "2259:     }",
      "2260:     ckey = ssl_generate_pkey(skey);",
      "2261:     dh_clnt = EVP_PKEY_get0_DH(ckey);",
      "2263:     if (dh_clnt == NULL || ssl_derive(s, ckey, skey) == 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2261:     if (ckey == NULL) {",
      "2262:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_DHE, ERR_R_INTERNAL_ERROR);",
      "2263:         return 0;",
      "2264:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2296:     }",
      "2298:     ckey = ssl_generate_pkey(skey);",
      "2300:     if (ssl_derive(s, ckey, skey) == 0) {",
      "2301:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_EVP_LIB);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2304:     if (ckey == NULL) {",
      "2305:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_INTERNAL_ERROR);",
      "2306:         goto err;",
      "2307:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a905d13bbbd25c0976ba39a0f2e55033eeca26d7",
      "candidate_info": {
        "commit_hash": "a905d13bbbd25c0976ba39a0f2e55033eeca26d7",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/a905d13bbbd25c0976ba39a0f2e55033eeca26d7",
        "files": [
          "test/recipes/70-test_sslcbcpadding.t"
        ],
        "message": "Don't test quite so many of them.\n\nAvoid making the CI blow up.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>\n(cherry picked from commit 5cf6d7c51f16fd78de7921dc441e24897c8b3cc6)",
        "before_after_code_files": [
          "test/recipes/70-test_sslcbcpadding.t||test/recipes/70-test_sslcbcpadding.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/recipes/70-test_sslcbcpadding.t||test/recipes/70-test_sslcbcpadding.t": [
          "File: test/recipes/70-test_sslcbcpadding.t -> test/recipes/70-test_sslcbcpadding.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:     (!$ENV{HARNESS_ACTIVE} || $ENV{HARNESS_VERBOSE})",
          "35: );",
          "39: my $bad_padding_offset = -1;",
          "42: $proxy->start() or plan skip_all => \"Unable to start up Proxy for tests\";",
          "43: ok(TLSProxy::Message->success(), \"Maximally-padded record test\");",
          "48:     $proxy->clear();",
          "49:     $proxy->start() or plan skip_all => \"Unable to start up Proxy for tests\";;",
          "50:     ok(TLSProxy::Message->fail(), \"Invalid padding byte $bad_padding_offset\");",
          "51: }",
          "",
          "[Removed Lines]",
          "37: plan tests => 1 + 256;",
          "41: # Test 1: Maximally-padded records are accepted.",
          "45: # Tests 2 through 257: Invalid padding.",
          "46: for ($bad_padding_offset = 0; $bad_padding_offset < 256;",
          "47:      $bad_padding_offset++) {",
          "",
          "[Added Lines]",
          "39: # TODO: We could test all 256 values, but then the log file gets too large for",
          "40: # CI. See https://github.com/openssl/openssl/issues/1440.",
          "41: my @test_offsets = (0, 128, 254, 255);",
          "43: plan tests => 1 + scalar(@test_offsets);",
          "45: # Test that maximally-padded records are accepted.",
          "49: # Test that invalid padding is rejected.",
          "50: foreach my $offset (@test_offsets) {",
          "52:     $bad_padding_offset = $offset;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c565e99a14bf43f11d006d36612fe7943f9e817f",
      "candidate_info": {
        "commit_hash": "c565e99a14bf43f11d006d36612fe7943f9e817f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/c565e99a14bf43f11d006d36612fe7943f9e817f",
        "files": [
          "crypto/x509/t_crl.c",
          "crypto/x509/t_req.c"
        ],
        "message": "Fix undefined behaviour when printing the X509 and CRL version\n\nFound by oss-fuzz\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\nGH: #2231\n(cherry picked from commit c2ce477f1f3c0a98802fb087b0cf4b0a99ea2b1d)",
        "before_after_code_files": [
          "crypto/x509/t_crl.c||crypto/x509/t_crl.c",
          "crypto/x509/t_req.c||crypto/x509/t_req.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/x509/t_crl.c||crypto/x509/t_crl.c": [
          "File: crypto/x509/t_crl.c -> crypto/x509/t_crl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:     BIO_printf(out, \"Certificate Revocation List (CRL):\\n\");",
          "46:     l = X509_CRL_get_version(x);",
          "48:     X509_CRL_get0_signature(x, &sig, &sig_alg);",
          "49:     X509_signature_print(out, sig_alg, NULL);",
          "50:     p = X509_NAME_oneline(X509_CRL_get_issuer(x), NULL, 0);",
          "",
          "[Removed Lines]",
          "47:     BIO_printf(out, \"%8sVersion %lu (0x%lx)\\n\", \"\", l + 1, l);",
          "",
          "[Added Lines]",
          "47:     if (l >= 0 && l <= 1)",
          "48:         BIO_printf(out, \"%8sVersion %ld (0x%lx)\\n\", \"\", l + 1, (unsigned long)l);",
          "49:     else",
          "50:         BIO_printf(out, \"%8sVersion unknown (%ld)\\n\", \"\", l);",
          "",
          "---------------"
        ],
        "crypto/x509/t_req.c||crypto/x509/t_req.c": [
          "File: crypto/x509/t_req.c -> crypto/x509/t_req.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:     }",
          "61:     if (!(cflag & X509_FLAG_NO_VERSION)) {",
          "62:         l = X509_REQ_get_version(x);",
          "65:     }",
          "66:     if (!(cflag & X509_FLAG_NO_SUBJECT)) {",
          "67:         if (BIO_printf(bp, \"        Subject:%c\", mlch) <= 0)",
          "",
          "[Removed Lines]",
          "63:         if (BIO_printf(bp, \"%8sVersion: %ld (0x%lx)\\n\", \"\", l + 1, l) <= 0)",
          "64:             goto err;",
          "",
          "[Added Lines]",
          "63:         if (l >= 0 && l <= 2) {",
          "64:             if (BIO_printf(bp, \"%8sVersion: %ld (0x%lx)\\n\", \"\", l + 1, (unsigned long)l) <= 0)",
          "65:                 goto err;",
          "66:         } else {",
          "67:             if (BIO_printf(bp, \"%8sVersion: Unknown (%ld)\\n\", \"\", l) <= 0)",
          "68:                 goto err;",
          "69:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a1b791225f2913ace014071bfb9099790ef468e5",
      "candidate_info": {
        "commit_hash": "a1b791225f2913ace014071bfb9099790ef468e5",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/a1b791225f2913ace014071bfb9099790ef468e5",
        "files": [
          "apps/apps.c"
        ],
        "message": "apps/apps.c: initialize and de-initialize engine around key loading\n\nBefore loading a key from an engine, it may need to be initialized.\nWhen done loading the key, we must de-initialize the engine.\n(if the engine is already initialized somehow, only the reference\ncounter will be incremented then decremented)\n\nReviewed-by: Stephen Henson <steve@openssl.org>\n(cherry picked from commit 49e476a5382602d0bad1139d6f1f66ddbc7959d6)",
        "before_after_code_files": [
          "apps/apps.c||apps/apps.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/apps.c||apps/apps.c": [
          "File: apps/apps.c -> apps/apps.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "692:             BIO_printf(bio_err, \"no engine specified\\n\");",
          "693:         else {",
          "694: #ifndef OPENSSL_NO_ENGINE",
          "696:             if (pkey == NULL) {",
          "697:                 BIO_printf(bio_err, \"cannot load %s from engine\\n\", key_descrip);",
          "698:                 ERR_print_errors(bio_err);",
          "",
          "[Removed Lines]",
          "695:             pkey = ENGINE_load_private_key(e, file, ui_method, &cb_data);",
          "",
          "[Added Lines]",
          "695:             if (ENGINE_init(e)) {",
          "696:                 pkey = ENGINE_load_private_key(e, file, ui_method, &cb_data);",
          "697:                 ENGINE_finish(e);",
          "698:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b81aadde0c7d35038aec89c5350512d7d2914cdb",
      "candidate_info": {
        "commit_hash": "b81aadde0c7d35038aec89c5350512d7d2914cdb",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/b81aadde0c7d35038aec89c5350512d7d2914cdb",
        "files": [
          "crypto/rand/rand_egd.c"
        ],
        "message": "RAND_egd_bytes: No need to check RAND_status on connection error.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1886)\n(cherry picked from commit c2114afc1622ff0113974b3696e557ea8bf7ffb4)",
        "before_after_code_files": [
          "crypto/rand/rand_egd.c||crypto/rand/rand_egd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/rand/rand_egd.c||crypto/rand/rand_egd.c": [
          "File: crypto/rand/rand_egd.c -> crypto/rand/rand_egd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "231:     int num, ret = -1;",
          "233:     num = RAND_query_egd_bytes(path, NULL, bytes);",
          "234:     if (RAND_status() == 1)",
          "235:         ret = num;",
          "236:  err:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "234:     if (num < 0)",
          "235:         goto err;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "df7681e46825d4a86df5dd73317d88923166a506",
      "candidate_info": {
        "commit_hash": "df7681e46825d4a86df5dd73317d88923166a506",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/df7681e46825d4a86df5dd73317d88923166a506",
        "files": [
          "test/sslapitest.c"
        ],
        "message": "Add a test for large messages\n\nEnsure that we send a large message during the test suite.\n\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>\n(cherry picked from commit 84d5549e692e63a16fa1b11603e4098fc31746e9)",
        "before_after_code_files": [
          "test/sslapitest.c||test/sslapitest.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/sslapitest.c||test/sslapitest.c": [
          "File: test/sslapitest.c -> test/sslapitest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: static int cdummyarg = 1;",
          "29: static X509 *ocspcert = NULL;",
          "31: static int ocsp_server_cb(SSL *s, void *arg)",
          "32: {",
          "33:     int *argi = (int *)arg;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: #define NUM_EXTRA_CERTS 40",
          "33: static int execute_test_large_message(const SSL_METHOD *smeth,",
          "34:                                       const SSL_METHOD *cmeth)",
          "35: {",
          "36:     SSL_CTX *cctx = NULL, *sctx = NULL;",
          "37:     SSL *clientssl = NULL, *serverssl = NULL;",
          "38:     int testresult = 0;",
          "39:     int i;",
          "40:     BIO *certbio = BIO_new_file(cert, \"r\");",
          "41:     X509 *chaincert = NULL;",
          "42:     int certlen;",
          "44:     if (certbio == NULL) {",
          "45:         printf(\"Can't load the certficate file\\n\");",
          "46:         goto end;",
          "47:     }",
          "48:     chaincert = PEM_read_bio_X509(certbio, NULL, NULL, NULL);",
          "50:     if (!create_ssl_ctx_pair(smeth, cmeth, &sctx,",
          "51:                              &cctx, cert, privkey)) {",
          "52:         printf(\"Unable to create SSL_CTX pair\\n\");",
          "53:         goto end;",
          "54:     }",
          "55:     BIO_free(certbio);",
          "56:     certbio = NULL;",
          "65:     certlen = i2d_X509(chaincert, NULL);",
          "66:     OPENSSL_assert((certlen * NUM_EXTRA_CERTS)",
          "67:                    > ((SSL3_RT_MAX_PLAIN_LENGTH * 4) / 3));",
          "68:     for (i = 0; i < NUM_EXTRA_CERTS; i++) {",
          "69:         if (!X509_up_ref(chaincert)) {",
          "70:             printf(\"Unable to up ref cert\\n\");",
          "71:             goto end;",
          "72:         }",
          "73:         if (!SSL_CTX_add_extra_chain_cert(sctx, chaincert)) {",
          "74:             printf(\"Unable to add extra chain cert %d\\n\", i);",
          "75:             X509_free(chaincert);",
          "76:             goto end;",
          "77:         }",
          "78:     }",
          "80:     if (!create_ssl_objects(sctx, cctx, &serverssl, &clientssl, NULL, NULL)) {",
          "81:         printf(\"Unable to create SSL objects\\n\");",
          "82:         goto end;",
          "83:     }",
          "85:     if (!create_ssl_connection(serverssl, clientssl)) {",
          "86:         printf(\"Unable to create SSL connection\\n\");",
          "87:         goto end;",
          "88:     }",
          "90:     testresult = 1;",
          "92:  end:",
          "93:     X509_free(chaincert);",
          "94:     SSL_free(serverssl);",
          "95:     SSL_free(clientssl);",
          "96:     SSL_CTX_free(sctx);",
          "97:     SSL_CTX_free(cctx);",
          "99:     return testresult;",
          "100: }",
          "102: static int test_large_message_tls(void)",
          "103: {",
          "104:     return execute_test_large_message(TLS_server_method(), TLS_client_method());",
          "105: }",
          "107: static int test_large_message_dtls(void)",
          "108: {",
          "109:     return execute_test_large_message(DTLS_server_method(),",
          "110:                                       DTLS_client_method());",
          "111: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "774:     CRYPTO_set_mem_debug(1);",
          "775:     CRYPTO_mem_ctrl(CRYPTO_MEM_CHECK_ON);",
          "777:     ADD_TEST(test_tlsext_status_type);",
          "778:     ADD_TEST(test_session_with_only_int_cache);",
          "779:     ADD_TEST(test_session_with_only_ext_cache);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "859:     ADD_TEST(test_large_message_tls);",
          "860:     ADD_TEST(test_large_message_dtls);",
          "",
          "---------------"
        ]
      }
    }
  ]
}