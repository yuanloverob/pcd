{
  "cve_id": "CVE-2014-9729",
  "cve_desc": "The udf_read_inode function in fs/udf/inode.c in the Linux kernel before 3.18.2 does not ensure a certain data-structure size consistency, which allows local users to cause a denial of service (system crash) via a crafted UDF filesystem image.",
  "repo": "torvalds/linux",
  "patch_hash": "e159332b9af4b04d882dbcfe1bb0117f0a6d4b58",
  "patch_info": {
    "commit_hash": "e159332b9af4b04d882dbcfe1bb0117f0a6d4b58",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/e159332b9af4b04d882dbcfe1bb0117f0a6d4b58",
    "files": [
      "fs/udf/inode.c"
    ],
    "message": "udf: Verify i_size when loading inode\n\nVerify that inode size is sane when loading inode with data stored in\nICB. Otherwise we may get confused later when working with the inode and\ninode size is too big.\n\nCC: stable@vger.kernel.org\nReported-by: Carl Henrik Lunde <chlunde@ping.uio.no>\nSigned-off-by: Jan Kara <jack@suse.cz>",
    "before_after_code_files": [
      "fs/udf/inode.c||fs/udf/inode.c"
    ]
  },
  "patch_diff": {
    "fs/udf/inode.c||fs/udf/inode.c": [
      "File: fs/udf/inode.c -> fs/udf/inode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1489:  }",
      "1490:  inode->i_generation = iinfo->i_unique;",
      "1492:  switch (fe->icbTag.fileType) {",
      "1493:  case ICBTAG_FILE_TYPE_DIRECTORY:",
      "1494:   inode->i_op = &udf_dir_inode_operations;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1493:  if (iinfo->i_alloc_type == ICBTAG_FLAG_AD_IN_ICB) {",
      "1498:   if (iinfo->i_lenAlloc != inode->i_size)",
      "1499:    goto out;",
      "1501:   if (inode->i_size > inode->i_sb->s_blocksize -",
      "1502:      udf_file_entry_alloc_offset(inode))",
      "1503:    goto out;",
      "1504:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "79144954278d4bb5989f8b903adcac7a20ff2a5a",
      "candidate_info": {
        "commit_hash": "79144954278d4bb5989f8b903adcac7a20ff2a5a",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/79144954278d4bb5989f8b903adcac7a20ff2a5a",
        "files": [
          "fs/udf/inode.c"
        ],
        "message": "udf: Remove repeated loads blocksize\n\nStore blocksize in a local variable in udf_fill_inode() since it is used\na lot of times.\n\nSigned-off-by: Jan Kara <jack@suse.cz>",
        "before_after_code_files": [
          "fs/udf/inode.c||fs/udf/inode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/udf/inode.c||fs/udf/inode.c"
          ],
          "candidate": [
            "fs/udf/inode.c||fs/udf/inode.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/udf/inode.c||fs/udf/inode.c": [
          "File: fs/udf/inode.c -> fs/udf/inode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1288:  struct kernel_lb_addr *iloc = &iinfo->i_location;",
          "1289:  unsigned int link_count;",
          "1290:  unsigned int indirections = 0;",
          "1291:  int ret = -EIO;",
          "1293: reread:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1291:  int bs = inode->i_sb->s_blocksize;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1374:  if (fe->descTag.tagIdent == cpu_to_le16(TAG_IDENT_EFE)) {",
          "1375:   iinfo->i_efe = 1;",
          "1376:   iinfo->i_use = 0;",
          "1378:      sizeof(struct extendedFileEntry));",
          "1379:   if (ret)",
          "1380:    goto out;",
          "1381:   memcpy(iinfo->i_ext.i_data,",
          "1382:          bh->b_data + sizeof(struct extendedFileEntry),",
          "1385:  } else if (fe->descTag.tagIdent == cpu_to_le16(TAG_IDENT_FE)) {",
          "1386:   iinfo->i_efe = 0;",
          "1387:   iinfo->i_use = 0;",
          "1390:   if (ret)",
          "1391:    goto out;",
          "1392:   memcpy(iinfo->i_ext.i_data,",
          "1393:          bh->b_data + sizeof(struct fileEntry),",
          "1395:  } else if (fe->descTag.tagIdent == cpu_to_le16(TAG_IDENT_USE)) {",
          "1396:   iinfo->i_efe = 0;",
          "1397:   iinfo->i_use = 1;",
          "1398:   iinfo->i_lenAlloc = le32_to_cpu(",
          "1399:     ((struct unallocSpaceEntry *)bh->b_data)->",
          "1400:      lengthAllocDescs);",
          "1402:      sizeof(struct unallocSpaceEntry));",
          "1403:   if (ret)",
          "1404:    goto out;",
          "1405:   memcpy(iinfo->i_ext.i_data,",
          "1406:          bh->b_data + sizeof(struct unallocSpaceEntry),",
          "1409:   return 0;",
          "1410:  }",
          "",
          "[Removed Lines]",
          "1377:   ret = udf_alloc_i_data(inode, inode->i_sb->s_blocksize -",
          "1383:          inode->i_sb->s_blocksize -",
          "1384:      sizeof(struct extendedFileEntry));",
          "1388:   ret = udf_alloc_i_data(inode, inode->i_sb->s_blocksize -",
          "1389:       sizeof(struct fileEntry));",
          "1394:          inode->i_sb->s_blocksize - sizeof(struct fileEntry));",
          "1401:   ret = udf_alloc_i_data(inode, inode->i_sb->s_blocksize -",
          "1407:          inode->i_sb->s_blocksize -",
          "1408:      sizeof(struct unallocSpaceEntry));",
          "",
          "[Added Lines]",
          "1378:   ret = udf_alloc_i_data(inode, bs -",
          "1384:          bs - sizeof(struct extendedFileEntry));",
          "1388:   ret = udf_alloc_i_data(inode, bs - sizeof(struct fileEntry));",
          "1393:          bs - sizeof(struct fileEntry));",
          "1400:   ret = udf_alloc_i_data(inode, bs -",
          "1406:          bs - sizeof(struct unallocSpaceEntry));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1498:   if (iinfo->i_lenAlloc != inode->i_size)",
          "1499:    goto out;",
          "1503:    goto out;",
          "1504:  }",
          "",
          "[Removed Lines]",
          "1501:   if (inode->i_size > inode->i_sb->s_blocksize -",
          "1502:      udf_file_entry_alloc_offset(inode))",
          "",
          "[Added Lines]",
          "1499:   if (inode->i_size > bs - udf_file_entry_alloc_offset(inode))",
          "",
          "---------------"
        ]
      }
    }
  ]
}