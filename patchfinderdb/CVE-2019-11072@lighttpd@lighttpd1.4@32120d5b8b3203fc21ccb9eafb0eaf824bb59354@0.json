{
  "cve_id": "CVE-2019-11072",
  "cve_desc": "lighttpd before 1.4.54 has a signed integer overflow, which might allow remote attackers to cause a denial of service (application crash) or possibly have unspecified other impact via a malicious HTTP GET request, as demonstrated by mishandling of /%2F? in burl_normalize_2F_to_slash_fix in burl.c. NOTE: The developer states \"The feature which can be abused to cause the crash is a new feature in lighttpd 1.4.50, and is not enabled by default. It must be explicitly configured in the config file (e.g. lighttpd.conf). Certain input will trigger an abort() in lighttpd when that feature is enabled. lighttpd detects the underflow or realloc() will fail (in both 32-bit and 64-bit executables), also detected in lighttpd. Either triggers an explicit abort() by lighttpd. This is not exploitable beyond triggering the explicit abort() with subsequent application exit.",
  "repo": "lighttpd/lighttpd1.4",
  "patch_hash": "32120d5b8b3203fc21ccb9eafb0eaf824bb59354",
  "patch_info": {
    "commit_hash": "32120d5b8b3203fc21ccb9eafb0eaf824bb59354",
    "repo": "lighttpd/lighttpd1.4",
    "commit_url": "https://github.com/lighttpd/lighttpd1.4/commit/32120d5b8b3203fc21ccb9eafb0eaf824bb59354",
    "files": [
      "src/burl.c",
      "src/t/test_burl.c"
    ],
    "message": "[core] fix abort in http-parseopts (fixes #2945)\n\nfix abort in server.http-parseopts with url-path-2f-decode enabled\n\n(thx stze)\n\nx-ref:\n  \"Security - SIGABRT during GET request handling with url-path-2f-decode enabled\"\n  https://redmine.lighttpd.net/issues/2945",
    "before_after_code_files": [
      "src/burl.c||src/burl.c",
      "src/t/test_burl.c||src/t/test_burl.c"
    ]
  },
  "patch_diff": {
    "src/burl.c||src/burl.c": [
      "File: src/burl.c -> src/burl.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "252:         }",
      "253:     }",
      "254:     if (qs >= 0) {",
      "257:     }",
      "258:     buffer_string_set_length(b, j);",
      "259:     return qs;",
      "",
      "[Removed Lines]",
      "255:         memmove(s+j, s+qs, blen - qs);",
      "256:         j += blen - qs;",
      "",
      "[Added Lines]",
      "255:         const int qslen = blen - qs;",
      "256:         memmove(s+j, s+qs, (size_t)qslen);",
      "257:         qs = j;",
      "258:         j += qslen;",
      "",
      "---------------"
    ],
    "src/t/test_burl.c||src/t/test_burl.c": [
      "File: src/t/test_burl.c -> src/t/test_burl.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "97:     flags |= HTTP_PARSEOPT_URL_NORMALIZE_PATH_2F_DECODE;",
      "98:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/a/b?c=/\"), CONST_STR_LEN(\"/a/b?c=/\"));",
      "99:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/a/b?c=%2f\"), CONST_STR_LEN(\"/a/b?c=/\"));",
      "100:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/a%2fb\"), CONST_STR_LEN(\"/a/b\"));",
      "101:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/a%2Fb\"), CONST_STR_LEN(\"/a/b\"));",
      "102:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/a%2fb?c=/\"), CONST_STR_LEN(\"/a/b?c=/\"));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "100:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"%2f?\"), CONST_STR_LEN(\"/?\"));",
      "101:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/%2f?\"), CONST_STR_LEN(\"//?\"));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3eb7902e10ba75b3f2eb159e244d0d8e5037ccd2",
      "candidate_info": {
        "commit_hash": "3eb7902e10ba75b3f2eb159e244d0d8e5037ccd2",
        "repo": "lighttpd/lighttpd1.4",
        "commit_url": "https://github.com/lighttpd/lighttpd1.4/commit/3eb7902e10ba75b3f2eb159e244d0d8e5037ccd2",
        "files": [
          ".gitignore",
          "src/CMakeLists.txt",
          "src/Makefile.am",
          "src/SConscript",
          "src/base.h",
          "src/burl.c",
          "src/burl.h",
          "src/configfile.c",
          "src/keyvalue.c",
          "src/keyvalue.h",
          "src/meson.build",
          "src/mod_redirect.c",
          "src/mod_rewrite.c",
          "src/request.c",
          "src/request.h",
          "src/response.c",
          "src/server.c",
          "src/t/test_burl.c",
          "src/t/test_request.c"
        ],
        "message": "[core] server.http-parseopts URL normalization opt (fixes #1720)\n\nserver.http-parseopts = ( ... ) URL normalization options\n\nNote: *not applied* to CONNECT method\n\nNote: In a future release, URL normalization likely enabled by default\n  (normalize URL, reject control chars, remove . and .. path segments)\n  To prepare for this change, lighttpd.conf configurations should\n  explicitly select desired behavior by enabling or disabling:\n    server.http-parseopts = ( \"url-normalize\" => \"enable\", ... )\n    server.http-parseopts = ( \"url-normalize\" => \"disable\" )\n\nx-ref:\n  \"lighttpd ... compares URIs to patterns in the (1) url.redirect and (2) url.rewrite configuration settings before performing URL decoding, which might allow remote attackers to bypass intended access restrictions, and obtain sensitive information or possibly modify data.\"\n  https://www.cvedetails.com/cve/CVE-2008-4359/\n  \"Rewrite/redirect rules and URL encoding\"\n  https://redmine.lighttpd.net/issues/1720",
        "before_after_code_files": [
          "src/Makefile.am||src/Makefile.am",
          "src/base.h||src/base.h",
          "src/burl.c||src/burl.c",
          "src/burl.h||src/burl.h",
          "src/configfile.c||src/configfile.c",
          "src/keyvalue.c||src/keyvalue.c",
          "src/keyvalue.h||src/keyvalue.h",
          "src/meson.build||src/meson.build",
          "src/mod_redirect.c||src/mod_redirect.c",
          "src/mod_rewrite.c||src/mod_rewrite.c",
          "src/request.c||src/request.c",
          "src/request.h||src/request.h",
          "src/response.c||src/response.c",
          "src/server.c||src/server.c",
          "src/t/test_burl.c||src/t/test_burl.c",
          "src/t/test_request.c||src/t/test_request.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/burl.c||src/burl.c",
            "src/t/test_burl.c||src/t/test_burl.c"
          ],
          "candidate": [
            "src/burl.c||src/burl.c",
            "src/t/test_burl.c||src/t/test_burl.c"
          ]
        }
      },
      "candidate_diff": {
        "src/Makefile.am||src/Makefile.am": [
          "File: src/Makefile.am -> src/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: AM_CFLAGS = $(FAM_CFLAGS) $(LIBUNWIND_CFLAGS)",
          "4: sbin_PROGRAMS=lighttpd lighttpd-angel",
          "5: LEMON=$(top_builddir)/src/lemon$(BUILD_EXEEXT)",
          "7: TESTS=\\",
          "8:  t/test_buffer$(EXEEXT) \\",
          "9:  t/test_base64$(EXEEXT) \\",
          "10:  t/test_configfile$(EXEEXT) \\",
          "11:  t/test_request$(EXEEXT)",
          "",
          "[Removed Lines]",
          "3: noinst_PROGRAMS=t/test_buffer t/test_base64 t/test_configfile t/test_request",
          "",
          "[Added Lines]",
          "3: noinst_PROGRAMS=\\",
          "4:  t/test_buffer \\",
          "5:  t/test_burl \\",
          "6:  t/test_base64 \\",
          "7:  t/test_configfile \\",
          "8:  t/test_request",
          "15:  t/test_burl$(EXEEXT) \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56: MAINTAINERCLEANFILES = configparser.c configparser.h mod_ssi_exprparser.c mod_ssi_exprparser.h",
          "57: CLEANFILES = versionstamp.h versionstamp.h.tmp lemon$(BUILD_EXEEXT)",
          "60:  http_kv.c keyvalue.c chunk.c  \\",
          "61:  http_chunk.c stream.c fdevent.c gw_backend.c \\",
          "62:  stat_cache.c plugin.c joblist.c etag.c array.c \\",
          "",
          "[Removed Lines]",
          "59: common_src=base64.c buffer.c log.c \\",
          "",
          "[Added Lines]",
          "66: common_src=base64.c buffer.c burl.c log.c \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "384: mod_wstunnel_la_LIBADD = $(common_libadd) $(CRYPTO_LIB)",
          "388:  response.h request.h fastcgi.h chunk.h \\",
          "389:  first.h settings.h http_chunk.h \\",
          "390:  algo_sha1.h md5.h http_auth.h http_vhostdb.h stream.h \\",
          "",
          "[Removed Lines]",
          "387: hdr = server.h base64.h buffer.h network.h log.h http_kv.h keyvalue.h \\",
          "",
          "[Added Lines]",
          "394: hdr = server.h base64.h buffer.h burl.h network.h log.h http_kv.h keyvalue.h \\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "517: t_test_base64_SOURCES = t/test_base64.c base64.c buffer.c",
          "518: t_test_base64_LDADD = $(LIBUNWIND_LIBS)",
          "520: t_test_configfile_SOURCES = t/test_configfile.c buffer.c array.c data_config.c data_string.c http_kv.c vector.c log.c sock_addr.c",
          "521: t_test_configfile_LDADD = $(PCRE_LIB) $(LIBUNWIND_LIBS)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "527: t_test_burl_SOURCES = t/test_burl.c burl.c buffer.c",
          "528: t_test_burl_LDADD = $(LIBUNWIND_LIBS)",
          "",
          "---------------"
        ],
        "src/base.h||src/base.h": [
          "File: src/base.h -> src/base.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "360:  unsigned short http_header_strict;",
          "361:  unsigned short http_host_strict;",
          "362:  unsigned short http_host_normalize;",
          "363:  unsigned short high_precision_timestamps;",
          "364:  time_t loadts;",
          "365:  double loadavg[3];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "363:  unsigned short http_url_normalize;",
          "",
          "---------------"
        ],
        "src/burl.c||src/burl.c": [
          "File: src/burl.c -> src/burl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include \"first.h\"",
          "2: #include \"burl.h\"",
          "4: #include <string.h>",
          "6: #include \"buffer.h\"",
          "8: static const char hex_chars_uc[] = \"0123456789ABCDEF\";",
          "11: static const char encoded_chars_http_uri_reqd[] = {",
          "13:   0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F",
          "31: };",
          "35: #define li_cton(c,n) \\",
          "36:   (((n) = (c) - '0') <= 9 || (((n) = ((c)&0xdf) - 'A') <= 5 ? ((n) += 10) : 0))",
          "42: #define li_utf8_invalid_byte(b) ((b) >= 0xF5 || ((b)|0x1) == 0xC1)",
          "45: static int burl_is_unreserved (const int c)",
          "46: {",
          "47:     return (light_isalnum(c) || c == '-' || c == '.' || c == '_' || c == '~');",
          "48: }",
          "51: static int burl_normalize_basic_unreserved_fix (buffer *b, buffer *t, int i, int qs)",
          "52: {",
          "53:     int j = i;",
          "54:     const int used = (int)buffer_string_length(b);",
          "55:     const unsigned char * const s = (unsigned char *)b->ptr;",
          "56:     unsigned char * const p =",
          "57:       (unsigned char *)buffer_string_prepare_copy(t,i+(used-i)*3+1);",
          "58:     unsigned int n1, n2;",
          "59:     memcpy(p, s, (size_t)i);",
          "60:     for (; i < used; ++i, ++j) {",
          "61:         if (!encoded_chars_http_uri_reqd[s[i]]) {",
          "62:             if (s[i] == '?' && -1 == qs) qs = j;",
          "63:             p[j] = s[i];",
          "64:         }",
          "65:         else if (s[i]=='%' && li_cton(s[i+1], n1) && li_cton(s[i+2], n2)) {",
          "66:             const unsigned int x = (n1 << 4) | n2;",
          "67:             if (burl_is_unreserved(x)) {",
          "68:                 p[j] = x;",
          "69:             }",
          "70:             else {",
          "71:                 p[j]   = '%';",
          "74:                 if (li_utf8_invalid_byte(x)) qs = -2;",
          "75:             }",
          "76:             i+=2;",
          "77:         }",
          "79:         else {",
          "80:             p[j]   = '%';",
          "81:             p[++j] = hex_chars_uc[(s[i] >> 4) & 0xF];",
          "82:             p[++j] = hex_chars_uc[s[i] & 0xF];",
          "83:             if (li_utf8_invalid_byte(s[i])) qs = -2;",
          "84:         }",
          "85:     }",
          "86:     buffer_commit(t, (size_t)j);",
          "87:     buffer_copy_buffer(b, t);",
          "88:     return qs;",
          "89: }",
          "92: static int burl_normalize_basic_unreserved (buffer *b, buffer *t)",
          "93: {",
          "94:     const unsigned char * const s = (unsigned char *)b->ptr;",
          "95:     const int used = (int)buffer_string_length(b);",
          "96:     unsigned int n1, n2, x;",
          "97:     int qs = -1;",
          "99:     for (int i = 0; i < used; ++i) {",
          "100:         if (!encoded_chars_http_uri_reqd[s[i]]) {",
          "101:             if (s[i] == '?' && -1 == qs) qs = i;",
          "102:         }",
          "103:         else if (s[i]=='%' && li_cton(s[i+1], n1) && li_cton(s[i+2], n2)",
          "104:                  && !burl_is_unreserved((x = (n1 << 4) | n2))) {",
          "105:             if (li_utf8_invalid_byte(x)) qs = -2;",
          "108:             i+=2;",
          "109:         }",
          "111:             buffer_string_set_length(b, (size_t)i);",
          "112:             break;",
          "113:         }",
          "114:         else {",
          "115:             qs = burl_normalize_basic_unreserved_fix(b, t, i, qs);",
          "116:             break;",
          "117:         }",
          "118:     }",
          "120:     return qs;",
          "121: }",
          "124: static int burl_normalize_basic_required_fix (buffer *b, buffer *t, int i, int qs)",
          "125: {",
          "126:     int j = i;",
          "127:     const int used = (int)buffer_string_length(b);",
          "128:     const unsigned char * const s = (unsigned char *)b->ptr;",
          "129:     unsigned char * const p =",
          "130:       (unsigned char *)buffer_string_prepare_copy(t,i+(used-i)*3+1);",
          "131:     unsigned int n1, n2;",
          "132:     memcpy(p, s, (size_t)i);",
          "133:     for (; i < used; ++i, ++j) {",
          "134:         if (!encoded_chars_http_uri_reqd[s[i]]) {",
          "135:             if (s[i] == '?' && -1 == qs) qs = j;",
          "136:             p[j] = s[i];",
          "137:         }",
          "138:         else if (s[i]=='%' && li_cton(s[i+1], n1) && li_cton(s[i+2], n2)) {",
          "139:             const unsigned int x = (n1 << 4) | n2;",
          "140:             if (!encoded_chars_http_uri_reqd[x]",
          "141:                 && (qs < 0 ? (x!='/'&&x!='?') : (x!='&'&&x!='='&&x!=';'))) {",
          "142:                 p[j] = x;",
          "143:             }",
          "144:             else {",
          "145:                 p[j]   = '%';",
          "148:                 if (li_utf8_invalid_byte(x)) qs = -2;",
          "149:             }",
          "150:             i+=2;",
          "151:         }",
          "153:         else {",
          "154:             p[j]   = '%';",
          "155:             p[++j] = hex_chars_uc[(s[i] >> 4) & 0xF];",
          "156:             p[++j] = hex_chars_uc[s[i] & 0xF];",
          "157:             if (li_utf8_invalid_byte(s[i])) qs = -2;",
          "158:         }",
          "159:     }",
          "160:     buffer_commit(t, (size_t)j);",
          "161:     buffer_copy_buffer(b, t);",
          "162:     return qs;",
          "163: }",
          "166: static int burl_normalize_basic_required (buffer *b, buffer *t)",
          "167: {",
          "168:     const unsigned char * const s = (unsigned char *)b->ptr;",
          "169:     const int used = (int)buffer_string_length(b);",
          "170:     unsigned int n1, n2, x;",
          "171:     int qs = -1;",
          "173:     for (int i = 0; i < used; ++i) {",
          "174:         if (!encoded_chars_http_uri_reqd[s[i]]) {",
          "175:             if (s[i] == '?' && -1 == qs) qs = i;",
          "176:         }",
          "177:         else if (s[i]=='%' && li_cton(s[i+1], n1) && li_cton(s[i+2], n2)",
          "178:                  && (encoded_chars_http_uri_reqd[(x = (n1 << 4) | n2)]",
          "179:                      ||(qs < 0 ? (x=='/'||x=='?') : (x=='&'||x=='='||x==';')))){",
          "180:             if (li_utf8_invalid_byte(x)) qs = -2;",
          "183:             i+=2;",
          "184:         }",
          "186:             buffer_string_set_length(b, (size_t)i);",
          "187:             break;",
          "188:         }",
          "189:         else {",
          "190:             qs = burl_normalize_basic_required_fix(b, t, i, qs);",
          "191:             break;",
          "192:         }",
          "193:     }",
          "195:     return qs;",
          "196: }",
          "199: static int burl_contains_ctrls (const buffer *b)",
          "200: {",
          "201:     const char * const s = b->ptr;",
          "202:     const int used = (int)buffer_string_length(b);",
          "203:     for (int i = 0; i < used; ++i) {",
          "204:         if (s[i] == '%' && (s[i+1] < '2' || (s[i+1] == '7' && s[i+2] == 'F')))",
          "205:             return 1;",
          "206:     }",
          "207:     return 0;",
          "208: }",
          "211: static void burl_normalize_qs20_to_plus_fix (buffer *b, int i)",
          "212: {",
          "213:     char * const s = b->ptr;",
          "214:     const int used = (int)buffer_string_length(b);",
          "215:     int j = i;",
          "216:     for (; i < used; ++i, ++j) {",
          "217:         s[j] = s[i];",
          "218:         if (s[i] == '%' && s[i+1] == '2' && s[i+2] == '0') {",
          "219:             s[j] = '+';",
          "220:             i+=2;",
          "221:         }",
          "222:     }",
          "223:     buffer_string_set_length(b, j);",
          "224: }",
          "227: static void burl_normalize_qs20_to_plus (buffer *b, int qs)",
          "228: {",
          "229:     const char * const s = b->ptr;",
          "230:     const int used = qs < 0 ? 0 : (int)buffer_string_length(b);",
          "231:     int i;",
          "232:     if (qs < 0) return;",
          "233:     for (i = qs+1; i < used; ++i) {",
          "234:         if (s[i] == '%' && s[i+1] == '2' && s[i+2] == '0') break;",
          "235:     }",
          "236:     if (i != used) burl_normalize_qs20_to_plus_fix(b, i);",
          "237: }",
          "240: static int burl_normalize_2F_to_slash_fix (buffer *b, int qs, int i)",
          "241: {",
          "242:     char * const s = b->ptr;",
          "243:     const int blen = (int)buffer_string_length(b);",
          "244:     const int used = qs < 0 ? blen : qs;",
          "245:     int j = i;",
          "246:     for (; i < used; ++i, ++j) {",
          "247:         s[j] = s[i];",
          "248:         if (s[i] == '%' && s[i+1] == '2' && s[i+2] == 'F') {",
          "249:             s[j] = '/';",
          "250:             i+=2;",
          "251:         }",
          "252:     }",
          "253:     if (qs >= 0) {",
          "254:         memmove(s+j, s+qs, blen - qs);",
          "255:         j += blen - qs;",
          "256:     }",
          "257:     buffer_string_set_length(b, j);",
          "258:     return qs;",
          "259: }",
          "262: static int burl_normalize_2F_to_slash (buffer *b, int qs, int flags)",
          "263: {",
          "265:     const char * const s = b->ptr;",
          "266:     const int used = qs < 0 ? (int)buffer_string_length(b) : qs;",
          "267:     for (int i = 0; i < used; ++i) {",
          "268:         if (s[i] == '%' && s[i+1] == '2' && s[i+2] == 'F') {",
          "269:             return (flags & HTTP_PARSEOPT_URL_NORMALIZE_PATH_2F_DECODE)",
          "270:               ? burl_normalize_2F_to_slash_fix(b, qs, i)",
          "272:         }",
          "273:     }",
          "274:     return qs;",
          "275: }",
          "278: static int burl_normalize_path (buffer *b, buffer *t, int qs, int flags)",
          "279: {",
          "280:     const unsigned char * const s = (unsigned char *)b->ptr;",
          "281:     const int used = (int)buffer_string_length(b);",
          "282:     int path_simplify = 0;",
          "283:     for (int i = 0, len = qs < 0 ? used : qs; i < len; ++i) {",
          "284:         if (s[i] == '.' && (s[i+1] != '.' || ++i)",
          "285:             && (s[i+1] == '/' || s[i+1] == '?' || s[i+1] == '\\0')) {",
          "286:             path_simplify = 1;",
          "287:             break;",
          "288:         }",
          "289:         do { ++i; } while (i < len && s[i] != '/');",
          "291:             path_simplify = 1;",
          "292:             break;",
          "293:         }",
          "294:     }",
          "296:     if (path_simplify) {",
          "297:         if (flags & HTTP_PARSEOPT_URL_NORMALIZE_PATH_DOTSEG_REJECT) return -2;",
          "298:         if (qs >= 0) {",
          "299:             buffer_copy_string_len(t, b->ptr+qs, used - qs);",
          "300:             buffer_string_set_length(b, qs);",
          "301:         }",
          "303:         buffer_path_simplify(b, b);",
          "305:         if (qs >= 0) {",
          "306:             qs = (int)buffer_string_length(b);",
          "307:             buffer_append_string_len(b, CONST_BUF_LEN(t));",
          "308:         }",
          "309:     }",
          "311:     return qs;",
          "312: }",
          "315: int burl_normalize (buffer *b, buffer *t, int flags)",
          "316: {",
          "317:     int qs;",
          "319:   #if defined(__WIN32) || defined(__CYGWIN__)",
          "324:     if (flags & HTTP_PARSEOPT_URL_NORMALIZE_PATH_BACKSLASH_TRANS) {",
          "325:         for (char *p = b->ptr; *p != '?' && *p != '\\0'; ++p) {",
          "326:             if (*p == '\\\\') *p = '/';",
          "327:         }",
          "328:     }",
          "329:   #endif",
          "331:     qs = (flags & HTTP_PARSEOPT_URL_NORMALIZE_REQUIRED)",
          "332:       ? burl_normalize_basic_required(b, t)",
          "333:       : burl_normalize_basic_unreserved(b, t);",
          "334:     if (-2 == qs) return -2;",
          "336:     if (flags & HTTP_PARSEOPT_URL_NORMALIZE_CTRLS_REJECT) {",
          "337:         if (burl_contains_ctrls(b)) return -2;",
          "338:     }",
          "340:     if (flags & (HTTP_PARSEOPT_URL_NORMALIZE_PATH_2F_DECODE",
          "341:                 |HTTP_PARSEOPT_URL_NORMALIZE_PATH_2F_REJECT)) {",
          "342:         qs = burl_normalize_2F_to_slash(b, qs, flags);",
          "343:         if (-2 == qs) return -2;",
          "344:     }",
          "346:     if (flags & (HTTP_PARSEOPT_URL_NORMALIZE_PATH_DOTSEG_REMOVE",
          "347:                 |HTTP_PARSEOPT_URL_NORMALIZE_PATH_DOTSEG_REJECT)) {",
          "348:         qs = burl_normalize_path(b, t, qs, flags);",
          "349:         if (-2 == qs) return -2;",
          "350:     }",
          "352:     if (flags & HTTP_PARSEOPT_URL_NORMALIZE_QUERY_20_PLUS) {",
          "353:         if (qs >= 0) burl_normalize_qs20_to_plus(b, qs);",
          "354:     }",
          "356:     return qs;",
          "357: }",
          "",
          "---------------"
        ],
        "src/burl.h||src/burl.h": [
          "File: src/burl.h -> src/burl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #ifndef INCLUDED_BURL_H",
          "2: #define INCLUDED_BURL_H",
          "3: #include \"first.h\"",
          "5: #include \"buffer.h\"",
          "7: enum burl_opts_e {",
          "8:   HTTP_PARSEOPT_HEADER_STRICT  = 0x1",
          "9:  ,HTTP_PARSEOPT_HOST_STRICT    = 0x2",
          "10:  ,HTTP_PARSEOPT_HOST_NORMALIZE = 0x4",
          "14:  ,HTTP_PARSEOPT_URL_NORMALIZE_CTRLS_REJECT        =0x40",
          "17:  ,HTTP_PARSEOPT_URL_NORMALIZE_PATH_2F_REJECT      =0x200",
          "19:  ,HTTP_PARSEOPT_URL_NORMALIZE_PATH_DOTSEG_REJECT  =0x800",
          "20:  ,HTTP_PARSEOPT_URL_NORMALIZE_QUERY_20_PLUS       =0x1000",
          "21: };",
          "23: int burl_normalize (buffer *b, buffer *t, int flags);",
          "25: #endif",
          "",
          "---------------"
        ],
        "src/configfile.c||src/configfile.c": [
          "File: src/configfile.c -> src/configfile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include \"first.h\"",
          "3: #include \"base.h\"",
          "4: #include \"fdevent.h\"",
          "5: #include \"log.h\"",
          "6: #include \"stream.h\"",
          "8: #include \"configparser.h\"",
          "9: #include \"configfile.h\"",
          "11: #include \"stat_cache.h\"",
          "13: #include <sys/stat.h>",
          "",
          "[Removed Lines]",
          "10: #include \"request.h\"",
          "",
          "[Added Lines]",
          "4: #include \"burl.h\"",
          "6: #include \"keyvalue.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63: }",
          "64: #endif",
          "66: static int config_insert(server *srv) {",
          "67:  size_t i;",
          "68:  int ret = 0;",
          "69:  buffer *stat_cache_string;",
          "71:  config_values_t cv[] = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: static int config_http_parseopts (server *srv, array *a) {",
          "68:     unsigned short int opts = srv->srvconf.http_url_normalize;",
          "69:     unsigned short int decode_2f = 1;",
          "70:     int rc = 1;",
          "71:     if (!array_is_kvstring(a)) {",
          "72:         log_error_write(srv, __FILE__, __LINE__, \"s\",",
          "73:                         \"unexpected value for server.http-parseopts; \"",
          "74:                         \"expected list of \\\"key\\\" => \\\"[enable|disable]\\\"\");",
          "75:         return 0;",
          "76:     }",
          "77:     for (size_t i = 0; i < a->used; ++i) {",
          "78:         const data_string * const ds = (data_string *)a->data[i];",
          "79:         unsigned short int opt;",
          "80:         if (buffer_is_equal_string(ds->key, CONST_STR_LEN(\"url-normalize\")))",
          "81:             opt = HTTP_PARSEOPT_URL_NORMALIZE;",
          "82:         else if (buffer_is_equal_string(ds->key, CONST_STR_LEN(\"url-normalize-unreserved\")))",
          "83:             opt = HTTP_PARSEOPT_URL_NORMALIZE_UNRESERVED;",
          "84:         else if (buffer_is_equal_string(ds->key, CONST_STR_LEN(\"url-normalize-required\")))",
          "85:             opt = HTTP_PARSEOPT_URL_NORMALIZE_REQUIRED;",
          "86:         else if (buffer_is_equal_string(ds->key, CONST_STR_LEN(\"url-ctrls-reject\")))",
          "87:             opt = HTTP_PARSEOPT_URL_NORMALIZE_CTRLS_REJECT;",
          "88:         else if (buffer_is_equal_string(ds->key, CONST_STR_LEN(\"url-path-backslash-trans\")))",
          "89:             opt = HTTP_PARSEOPT_URL_NORMALIZE_PATH_BACKSLASH_TRANS;",
          "90:         else if (buffer_is_equal_string(ds->key, CONST_STR_LEN(\"url-path-2f-decode\")))",
          "91:             opt = HTTP_PARSEOPT_URL_NORMALIZE_PATH_2F_DECODE;",
          "92:         else if (buffer_is_equal_string(ds->key, CONST_STR_LEN(\"url-path-2f-reject\")))",
          "93:             opt = HTTP_PARSEOPT_URL_NORMALIZE_PATH_2F_REJECT;",
          "94:         else if (buffer_is_equal_string(ds->key, CONST_STR_LEN(\"url-path-dotseg-remove\")))",
          "95:             opt = HTTP_PARSEOPT_URL_NORMALIZE_PATH_DOTSEG_REMOVE;",
          "96:         else if (buffer_is_equal_string(ds->key, CONST_STR_LEN(\"url-path-dotseg-reject\")))",
          "97:             opt = HTTP_PARSEOPT_URL_NORMALIZE_PATH_DOTSEG_REJECT;",
          "98:         else if (buffer_is_equal_string(ds->key, CONST_STR_LEN(\"url-query-20-plus\")))",
          "99:             opt = HTTP_PARSEOPT_URL_NORMALIZE_QUERY_20_PLUS;",
          "100:         else {",
          "101:             log_error_write(srv, __FILE__, __LINE__, \"sb\",",
          "102:                             \"unrecognized key for server.http-parseopts:\",",
          "103:                             ds->key);",
          "104:             rc = 0;",
          "105:             continue;",
          "106:         }",
          "107:         if (buffer_is_equal_string(ds->value, CONST_STR_LEN(\"enable\")))",
          "108:             opts |= opt;",
          "109:         else if (buffer_is_equal_string(ds->value, CONST_STR_LEN(\"disable\"))) {",
          "110:             opts &= ~opt;",
          "111:             if (opt == HTTP_PARSEOPT_URL_NORMALIZE) {",
          "112:                 opts = 0;",
          "113:                 break;",
          "114:             }",
          "115:             if (opt == HTTP_PARSEOPT_URL_NORMALIZE_PATH_2F_DECODE) {",
          "116:                 decode_2f = 0;",
          "117:             }",
          "118:         }",
          "119:         else {",
          "120:             log_error_write(srv, __FILE__, __LINE__, \"sbsbs\",",
          "121:                             \"unrecognized value for server.http-parseopts:\",",
          "122:                             ds->key, \"=>\", ds->value,",
          "123:                             \"(expect \\\"[enable|disable]\\\")\");",
          "124:             rc = 0;",
          "125:         }",
          "126:     }",
          "127:     if (opts != 0) {",
          "128:         opts |= HTTP_PARSEOPT_URL_NORMALIZE;",
          "129:         if ((opts & (HTTP_PARSEOPT_URL_NORMALIZE_PATH_2F_DECODE",
          "130:                     |HTTP_PARSEOPT_URL_NORMALIZE_PATH_2F_REJECT))",
          "131:                  == (HTTP_PARSEOPT_URL_NORMALIZE_PATH_2F_DECODE",
          "132:                     |HTTP_PARSEOPT_URL_NORMALIZE_PATH_2F_REJECT)) {",
          "133:             log_error_write(srv, __FILE__, __LINE__, \"s\",",
          "134:                             \"conflicting options in server.http-parseopts:\"",
          "135:                             \"url-path-2f-decode, url-path-2f-reject\");",
          "136:             rc = 0;",
          "137:         }",
          "138:         if ((opts & (HTTP_PARSEOPT_URL_NORMALIZE_PATH_DOTSEG_REMOVE",
          "139:                     |HTTP_PARSEOPT_URL_NORMALIZE_PATH_DOTSEG_REJECT))",
          "140:                  == (HTTP_PARSEOPT_URL_NORMALIZE_PATH_DOTSEG_REMOVE",
          "141:                     |HTTP_PARSEOPT_URL_NORMALIZE_PATH_DOTSEG_REJECT)) {",
          "142:             log_error_write(srv, __FILE__, __LINE__, \"s\",",
          "143:                             \"conflicting options in server.http-parseopts:\"",
          "144:                             \"url-path-dotseg-remove, url-path-dotseg-reject\");",
          "145:             rc = 0;",
          "146:         }",
          "147:         if (!(opts & (HTTP_PARSEOPT_URL_NORMALIZE_UNRESERVED",
          "148:                      |HTTP_PARSEOPT_URL_NORMALIZE_REQUIRED))) {",
          "149:             opts |= HTTP_PARSEOPT_URL_NORMALIZE_UNRESERVED;",
          "150:             if (decode_2f",
          "151:                 && !(opts & HTTP_PARSEOPT_URL_NORMALIZE_PATH_2F_REJECT))",
          "152:                 opts |= HTTP_PARSEOPT_URL_NORMALIZE_PATH_2F_DECODE;",
          "153:         }",
          "154:     }",
          "155:     srv->srvconf.http_url_normalize = opts;",
          "156:     return rc;",
          "157: }",
          "163:  array *http_parseopts;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "204:  cv[74].destination = &(srv->srvconf.http_host_normalize);",
          "205:  cv[78].destination = &(srv->srvconf.max_request_field_size);",
          "206:  cv[80].destination = srv->srvconf.syslog_facility;",
          "208:  srv->config_storage = calloc(1, srv->config_context->used * sizeof(specific_config *));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "302:  http_parseopts = array_init();",
          "303:  cv[82].destination = http_parseopts;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "214:  for (i = 0; i < srv->config_context->used; i++) {",
          "216:   specific_config *s;",
          "218:   s = calloc(1, sizeof(specific_config));",
          "",
          "[Removed Lines]",
          "215:   data_config const* config = (data_config const*)srv->config_context->data[i];",
          "",
          "[Added Lines]",
          "312:   data_config * const config = (data_config *)srv->config_context->data[i];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "363:    }",
          "364:   }",
          "366: #if !(defined HAVE_LIBSSL && defined HAVE_OPENSSL_SSL_H)",
          "367:   if (s->ssl_enabled) {",
          "368:    log_error_write(srv, __FILE__, __LINE__, \"s\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "463:   if (0 == i) {",
          "464:                     if (!config_http_parseopts(srv, http_parseopts)) {",
          "465:    ret = HANDLER_ERROR;",
          "466:    break;",
          "467:                     }",
          "468:                 }",
          "470:   if (srv->srvconf.http_url_normalize",
          "471:       && COMP_HTTP_QUERY_STRING == config->comp) {",
          "472:    switch(config->cond) {",
          "473:    case CONFIG_COND_NE:",
          "474:    case CONFIG_COND_EQ:",
          "477:     pcre_keyvalue_burl_normalize_key(config->string, srv->tmp_buf);",
          "478:     break;",
          "479:    case CONFIG_COND_NOMATCH:",
          "480:    case CONFIG_COND_MATCH:",
          "481:     pcre_keyvalue_burl_normalize_key(config->string, srv->tmp_buf);",
          "482:     if (!data_config_pcre_compile(config)) {",
          "483:      ret = HANDLER_ERROR;",
          "484:     }",
          "485:     break;",
          "486:    default:",
          "487:     break;",
          "488:    }",
          "489:    if (HANDLER_ERROR == ret) break;",
          "490:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "372:   }",
          "373: #endif",
          "374:  }",
          "376:  {",
          "377:   specific_config *s = srv->config_storage[0];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "501:  array_free(http_parseopts);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "380:     |(srv->srvconf.http_host_strict    ?(HTTP_PARSEOPT_HOST_STRICT",
          "381:                                         |HTTP_PARSEOPT_HOST_NORMALIZE):0)",
          "382:     |(srv->srvconf.http_host_normalize ?(HTTP_PARSEOPT_HOST_NORMALIZE):0);",
          "383:  }",
          "385:  if (0 != stat_cache_choose_engine(srv, stat_cache_string)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "510:   s->http_parseopts |= srv->srvconf.http_url_normalize;",
          "",
          "---------------"
        ],
        "src/keyvalue.c||src/keyvalue.c": [
          "File: src/keyvalue.c -> src/keyvalue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "200:     return HANDLER_GO_ON;",
          "201: }",
          "202: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "208: #define li_cton(c,n) \\",
          "209:   (((n) = (c) - '0') <= 9 || (((n) = ((c)&0xdf) - 'A') <= 5 ? ((n) += 10) : 0))",
          "211: static void pcre_keyvalue_burl_percent_toupper (buffer *b)",
          "212: {",
          "213:     const unsigned char * const s = (unsigned char *)b->ptr;",
          "214:     const int used = (int)buffer_string_length(b);",
          "215:     unsigned int n1, n2;",
          "216:     for (int i = 0; i < used; ++i) {",
          "217:         if (s[i]=='%' && li_cton(s[i+1],n1) && li_cton(s[i+2],n2)) {",
          "220:             i+=2;",
          "221:         }",
          "222:     }",
          "223: }",
          "225: static void pcre_keyvalue_burl_percent_percent_toupper (buffer *b)",
          "226: {",
          "227:     const unsigned char * const s = (unsigned char *)b->ptr;",
          "228:     const int used = (int)buffer_string_length(b);",
          "229:     unsigned int n1, n2;",
          "230:     for (int i = 0; i < used; ++i) {",
          "231:         if (s[i] == '%' && s[i+1]=='%'",
          "232:             && li_cton(s[i+2],n1) && li_cton(s[i+3],n2)) {",
          "235:             i+=3;",
          "236:         }",
          "237:     }",
          "238: }",
          "240: static const char hex_chars_uc[] = \"0123456789ABCDEF\";",
          "242: static void pcre_keyvalue_burl_percent_high_UTF8 (buffer *b, buffer *t)",
          "243: {",
          "244:     const unsigned char * const s = (unsigned char *)b->ptr;",
          "245:     unsigned char *p;",
          "246:     const int used = (int)buffer_string_length(b);",
          "247:     unsigned int count = 0, j = 0;",
          "248:     for (int i = 0; i < used; ++i) {",
          "249:         if (s[i] > 0x7F) ++count;",
          "250:     }",
          "251:     if (0 == count) return;",
          "253:     p = (unsigned char *)buffer_string_prepare_copy(t, used+(count*2));",
          "254:     for (int i = 0; i < used; ++i, ++j) {",
          "255:         if (s[i] <= 0x7F)",
          "256:             p[j] = s[i];",
          "257:         else {",
          "258:             p[j]   = '%';",
          "259:             p[++j] = hex_chars_uc[(s[i] >> 4) & 0xF];",
          "260:             p[++j] = hex_chars_uc[s[i] & 0xF];",
          "261:         }",
          "262:     }",
          "263:     buffer_commit(t, j);",
          "264:     buffer_copy_buffer(b, t);",
          "265: }",
          "267: static void pcre_keyvalue_burl_percent_percent_high_UTF8 (buffer *b, buffer *t)",
          "268: {",
          "269:     const unsigned char * const s = (unsigned char *)b->ptr;",
          "270:     unsigned char *p;",
          "271:     const int used = (int)buffer_string_length(b);",
          "272:     unsigned int count = 0, j = 0;",
          "273:     for (int i = 0; i < used; ++i) {",
          "274:         if (s[i] > 0x7F) ++count;",
          "275:     }",
          "276:     if (0 == count) return;",
          "278:     p = (unsigned char *)buffer_string_prepare_copy(t, used+(count*3));",
          "279:     for (int i = 0; i < used; ++i, ++j) {",
          "280:         if (s[i] <= 0x7F)",
          "281:             p[j] = s[i];",
          "282:         else {",
          "283:             p[j]   = '%';",
          "284:             p[++j] = '%';",
          "285:             p[++j] = hex_chars_uc[(s[i] >> 4) & 0xF];",
          "286:             p[++j] = hex_chars_uc[s[i] & 0xF];",
          "287:         }",
          "288:     }",
          "289:     buffer_commit(t, j);",
          "290:     buffer_copy_buffer(b, t);",
          "291: }",
          "311: void pcre_keyvalue_burl_normalize_key (buffer *k, buffer *t)",
          "312: {",
          "313:     pcre_keyvalue_burl_percent_toupper(k);",
          "314:     pcre_keyvalue_burl_percent_high_UTF8(k, t);",
          "315: }",
          "317: void pcre_keyvalue_burl_normalize_value (buffer *v, buffer *t)",
          "318: {",
          "319:     pcre_keyvalue_burl_percent_percent_toupper(v);",
          "320:     pcre_keyvalue_burl_percent_percent_high_UTF8(v, t);",
          "321: }",
          "",
          "---------------"
        ],
        "src/keyvalue.h||src/keyvalue.h": [
          "File: src/keyvalue.h -> src/keyvalue.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: int pcre_keyvalue_buffer_append(struct server *srv, pcre_keyvalue_buffer *kvb, buffer *key, buffer *value);",
          "24: void pcre_keyvalue_buffer_free(pcre_keyvalue_buffer *kvb);",
          "25: handler_t pcre_keyvalue_buffer_process(pcre_keyvalue_buffer *kvb, pcre_keyvalue_ctx *ctx, buffer *input, buffer *result);",
          "27: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: void pcre_keyvalue_burl_normalize_key(buffer *k, buffer *t);",
          "27: void pcre_keyvalue_burl_normalize_value(buffer *v, buffer *t);",
          "",
          "---------------"
        ],
        "src/meson.build||src/meson.build": [
          "File: src/meson.build -> src/meson.build",
          "--- Hunk 1 ---",
          "[Context before]",
          "539:  'array.c',",
          "540:  'base64.c',",
          "541:  'buffer.c',",
          "542:  'chunk.c',",
          "543:  'configfile-glue.c',",
          "544:  'connections-glue.c',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "542:  'burl.c',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "692:  build_by_default: false,",
          "693: ))",
          "695: test('test_base64', executable('test_base64',",
          "696:  sources: ['t/test_base64.c', 'buffer.c', 'base64.c'],",
          "697:  dependencies: common_flags + libunwind,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "696: test('test_burl', executable('test_burl',",
          "697:  sources: ['t/test_burl.c', 'burl.c', 'buffer.c'],",
          "698:  dependencies: common_flags + libunwind,",
          "699:  build_by_default: false,",
          "700: ))",
          "",
          "---------------"
        ],
        "src/mod_redirect.c||src/mod_redirect.c": [
          "File: src/mod_redirect.c -> src/mod_redirect.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:   for (j = 0; j < da->value->used; j++) {",
          "100:    data_string *ds = (data_string *)da->value->data[j];",
          "101:    if (0 != pcre_keyvalue_buffer_append(srv, s->redirect, ds->key, ds->value)) {",
          "102:     log_error_write(srv, __FILE__, __LINE__, \"sb\",",
          "103:       \"pcre-compile failed for\", ds->key);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101:    if (srv->srvconf.http_url_normalize) {",
          "102:     pcre_keyvalue_burl_normalize_key(ds->key, srv->tmp_buf);",
          "103:     pcre_keyvalue_burl_normalize_value(ds->value, srv->tmp_buf);",
          "104:    }",
          "",
          "---------------"
        ],
        "src/mod_rewrite.c||src/mod_rewrite.c": [
          "File: src/mod_rewrite.c -> src/mod_rewrite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:   for (j = 0; j < da->value->used; j++) {",
          "87:    data_string *ds = (data_string *)da->value->data[j];",
          "88:    if (0 != pcre_keyvalue_buffer_append(srv, kvb, ds->key, ds->value)) {",
          "89:     log_error_write(srv, __FILE__, __LINE__, \"sb\",",
          "90:       \"pcre-compile failed for\", ds->key);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:    if (srv->srvconf.http_url_normalize) {",
          "89:     pcre_keyvalue_burl_normalize_key(ds->key, srv->tmp_buf);",
          "90:     pcre_keyvalue_burl_normalize_value(ds->value, srv->tmp_buf);",
          "91:    }",
          "",
          "---------------"
        ],
        "src/request.c||src/request.c": [
          "File: src/request.c -> src/request.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include \"request.h\"",
          "4: #include \"base.h\"",
          "5: #include \"http_kv.h\"",
          "6: #include \"log.h\"",
          "7: #include \"sock_addr.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #include \"burl.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "652:     jlen = buffer_string_length(con->request.uri);",
          "654:      for (j = 0; j < jlen && request_uri_is_valid_char(con->request.uri->ptr[j]); j++) ;",
          "655:     } else {",
          "656:      char *z = memchr(con->request.uri->ptr, '\\0', jlen);",
          "",
          "[Removed Lines]",
          "653:     if (http_header_strict) {",
          "",
          "[Added Lines]",
          "654:     if ((con->conf.http_parseopts & HTTP_PARSEOPT_URL_NORMALIZE_CTRLS_REJECT)) {",
          "656:     } else if (http_header_strict) {",
          "",
          "---------------"
        ],
        "src/request.h||src/request.h": [
          "File: src/request.h -> src/request.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include \"base_decls.h\"",
          "6: #include \"buffer.h\"",
          "14: int http_request_parse(server *srv, connection *con);",
          "15: int http_request_host_normalize(buffer *b, int scheme_port);",
          "16: int http_request_host_policy(connection *con, buffer *b, const buffer *scheme);",
          "",
          "[Removed Lines]",
          "8: typedef enum {",
          "9:   HTTP_PARSEOPT_HEADER_STRICT  = 1",
          "10:  ,HTTP_PARSEOPT_HOST_STRICT    = 2",
          "11:  ,HTTP_PARSEOPT_HOST_NORMALIZE = 4",
          "12: } http_parseopts_e;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/response.c||src/response.c": [
          "File: src/response.c -> src/response.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include \"response.h\"",
          "4: #include \"base.h\"",
          "5: #include \"fdevent.h\"",
          "6: #include \"http_kv.h\"",
          "7: #include \"log.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #include \"burl.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "278:  if (con->mode == DIRECT && buffer_is_empty(con->physical.path)) {",
          "",
          "[Removed Lines]",
          "281:      if (!con->async_callback) {",
          "284:   char *qstr;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "298:   config_cond_cache_reset(srv, con);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "293:      if (!con->async_callback) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "331:   buffer_copy_buffer(con->uri.authority, con->request.http_host);",
          "332:   buffer_to_lower(con->uri.authority);",
          "345:    buffer_copy_buffer(con->uri.path_raw, con->request.uri);",
          "359:    buffer_copy_buffer(con->uri.path, con->uri.path_raw);",
          "364:   }",
          "",
          "[Removed Lines]",
          "335:   if (NULL != (qstr = strchr(con->request.uri->ptr, '#'))) {",
          "336:    buffer_string_set_length(con->request.uri, qstr - con->request.uri->ptr);",
          "337:   }",
          "340:   if (NULL != (qstr = strchr(con->request.uri->ptr, '?'))) {",
          "341:    buffer_copy_string    (con->uri.query, qstr + 1);",
          "342:    buffer_copy_string_len(con->uri.path_raw, con->request.uri->ptr, qstr - con->request.uri->ptr);",
          "343:   } else {",
          "344:    buffer_reset     (con->uri.query);",
          "346:   }",
          "354:   if (con->request.http_method == HTTP_METHOD_OPTIONS &&",
          "355:       con->uri.path_raw->ptr[0] == '*' && con->uri.path_raw->ptr[1] == '\\0') {",
          "357:    buffer_copy_buffer(con->uri.path, con->uri.path_raw);",
          "358:   } else if (con->request.http_method == HTTP_METHOD_CONNECT) {",
          "360:   } else {",
          "361:    buffer_copy_buffer(srv->tmp_buf, con->uri.path_raw);",
          "362:    buffer_urldecode_path(srv->tmp_buf);",
          "363:    buffer_path_simplify(con->uri.path, srv->tmp_buf);",
          "",
          "[Added Lines]",
          "331:   if (con->request.http_method == HTTP_METHOD_CONNECT",
          "332:       || (con->request.http_method == HTTP_METHOD_OPTIONS",
          "333:    && con->request.uri->ptr[0] == '*'",
          "334:    && con->request.uri->ptr[1] == '\\0')) {",
          "337:    buffer_copy_buffer(con->uri.path, con->uri.path_raw);",
          "338:    buffer_reset(con->uri.query);",
          "339:   } else {",
          "340:    char *qstr;",
          "341:    if (con->conf.http_parseopts & HTTP_PARSEOPT_URL_NORMALIZE) {",
          "343:     int qs = burl_normalize(con->request.uri, srv->tmp_buf, con->conf.http_parseopts);",
          "344:     if (-2 == qs) {",
          "345:      log_error_write(srv, __FILE__, __LINE__, \"sb\",",
          "346:        \"invalid character in URI -> 400\",",
          "347:        con->request.uri);",
          "348:      con->keep_alive = 0;",
          "350:      con->file_finished = 1;",
          "351:      return HANDLER_FINISHED;",
          "352:     }",
          "353:     qstr = (-1 == qs) ? NULL : con->request.uri->ptr+qs;",
          "359:     con->header_len -= len;",
          "360:     len = buffer_string_length(con->request.uri);",
          "361:     con->header_len += len;",
          "362:     if (len > MAX_HTTP_REQUEST_URI) {",
          "363:      con->keep_alive = 0;",
          "365:      con->file_finished = 1;",
          "366:      return HANDLER_FINISHED;",
          "367:     }",
          "368:     if (con->header_len > MAX_HTTP_REQUEST_HEADER) {",
          "369:      log_error_write(srv, __FILE__, __LINE__, \"sds\",",
          "370:        \"request header fields too large:\", con->header_len, \"-> 431\");",
          "371:      con->keep_alive = 0;",
          "373:      con->file_finished = 1;",
          "374:      return HANDLER_FINISHED;",
          "375:     }",
          "376:          #endif",
          "377:    } else {",
          "379:     if (qstr) buffer_string_set_length(con->request.uri, qstr - con->request.uri->ptr);",
          "380:     qstr = strchr(con->request.uri->ptr, '?');",
          "381:    }",
          "384:    if (NULL != qstr) {",
          "385:     const char * const pstr = con->request.uri->ptr;",
          "386:     const size_t plen = (size_t)(qstr - pstr);",
          "387:     const size_t rlen = buffer_string_length(con->request.uri);",
          "388:     buffer_copy_string_len(con->uri.query, qstr + 1, rlen - plen - 1);",
          "389:     buffer_copy_string_len(con->uri.path_raw, pstr, plen);",
          "390:    } else {",
          "391:     buffer_reset(con->uri.query);",
          "392:     buffer_copy_buffer(con->uri.path_raw, con->request.uri);",
          "393:    }",
          "402:    buffer_urldecode_path(con->uri.path);",
          "403:    buffer_path_simplify(con->uri.path, con->uri.path);",
          "",
          "---------------"
        ],
        "src/server.c||src/server.c": [
          "File: src/server.c -> src/server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include \"server.h\"",
          "4: #include \"buffer.h\"",
          "5: #include \"network.h\"",
          "6: #include \"log.h\"",
          "7: #include \"rand.h\"",
          "10: #include \"chunk.h\"",
          "11: #include \"http_auth.h\"",
          "13: #include \"http_vhostdb.h\"",
          "14: #include \"fdevent.h\"",
          "15: #include \"connections.h\"",
          "",
          "[Removed Lines]",
          "8: #include \"response.h\"",
          "9: #include \"request.h\"",
          "12: #include \"http_chunk.h\"",
          "",
          "[Added Lines]",
          "5: #include \"burl.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "287:  srv->srvconf.http_header_strict  = 1;",
          "289:  srv->srvconf.http_host_normalize = 0;",
          "290:  srv->srvconf.high_precision_timestamps = 0;",
          "291:  srv->srvconf.max_request_field_size = 8192;",
          "292:  srv->srvconf.loadavg[0] = 0.0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "288:  srv->srvconf.http_url_normalize = HTTP_PARSEOPT_URL_NORMALIZE",
          "289:      | HTTP_PARSEOPT_URL_NORMALIZE_UNRESERVED",
          "290:      | HTTP_PARSEOPT_URL_NORMALIZE_CTRLS_REJECT",
          "291:      | HTTP_PARSEOPT_URL_NORMALIZE_PATH_BACKSLASH_TRANS",
          "292:      | HTTP_PARSEOPT_URL_NORMALIZE_PATH_2F_DECODE",
          "293:      | HTTP_PARSEOPT_URL_NORMALIZE_PATH_DOTSEG_REMOVE;",
          "",
          "---------------"
        ],
        "src/t/test_burl.c||src/t/test_burl.c": [
          "File: src/t/test_burl.c -> src/t/test_burl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include \"first.h\"",
          "3: #include <stdio.h>",
          "4: #include <stdlib.h>",
          "6: #include \"burl.h\"",
          "8: static void run_burl_normalize (buffer *psrc, buffer *ptmp, int flags, int line, const char *in, size_t in_len, const char *out, size_t out_len) {",
          "9:     int qs;",
          "10:     buffer_copy_string_len(psrc, in, in_len);",
          "11:     qs = burl_normalize(psrc, ptmp, flags);",
          "12:     if (out_len == (size_t)-2) {",
          "13:         if (-2 == qs) return;",
          "14:         fprintf(stderr,",
          "15:                 \"%s.%d: %s('%s') failed: expected error, got '%s'\\n\",",
          "16:                 __FILE__, line, __func__+4, in, psrc->ptr);",
          "17:     }",
          "18:     else {",
          "19:         if (buffer_is_equal_string(psrc, out, out_len)) return;",
          "20:         fprintf(stderr,",
          "21:                 \"%s.%d: %s('%s') failed: expected '%s', got '%s'\\n\",",
          "22:                 __FILE__, line, __func__+4, in, out, psrc->ptr);",
          "23:     }",
          "24:     fflush(stderr);",
          "25:     abort();",
          "26: }",
          "28: static void test_burl_normalize (void) {",
          "29:     buffer *psrc = buffer_init();",
          "30:     buffer *ptmp = buffer_init();",
          "31:     int flags;",
          "33:     flags = HTTP_PARSEOPT_URL_NORMALIZE_UNRESERVED;",
          "34:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/\"), CONST_STR_LEN(\"/\"));",
          "35:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/abc\"), CONST_STR_LEN(\"/abc\"));",
          "36:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/abc/\"), CONST_STR_LEN(\"/abc/\"));",
          "37:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/abc/def\"), CONST_STR_LEN(\"/abc/def\"));",
          "38:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/abc?\"), CONST_STR_LEN(\"/abc?\"));",
          "39:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/abc?d\"), CONST_STR_LEN(\"/abc?d\"));",
          "40:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/abc?d=\"), CONST_STR_LEN(\"/abc?d=\"));",
          "41:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/abc?d=e\"), CONST_STR_LEN(\"/abc?d=e\"));",
          "42:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/abc?d=e&\"), CONST_STR_LEN(\"/abc?d=e&\"));",
          "43:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/abc?d=e&f\"), CONST_STR_LEN(\"/abc?d=e&f\"));",
          "44:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/abc?d=e&f=g\"), CONST_STR_LEN(\"/abc?d=e&f=g\"));",
          "45:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/abc?d=e&f=g#\"), CONST_STR_LEN(\"/abc?d=e&f=g\"));",
          "46:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/abc?d=e&f=g#any\"), CONST_STR_LEN(\"/abc?d=e&f=g\"));",
          "47:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/%2F\"), CONST_STR_LEN(\"/%2F\"));",
          "48:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/%2f\"), CONST_STR_LEN(\"/%2F\"));",
          "49:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/%20\"), CONST_STR_LEN(\"/%20\"));",
          "50:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/%2b\"), CONST_STR_LEN(\"/%2B\"));",
          "51:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/%2B\"), CONST_STR_LEN(\"/%2B\"));",
          "52:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/%3a\"), CONST_STR_LEN(\"/%3A\"));",
          "53:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/%3A\"), CONST_STR_LEN(\"/%3A\"));",
          "54:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/~test%20\u00e4_\"), CONST_STR_LEN(\"/~test%20%C3%A4_\"));",
          "55:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/\\375\"), \"\", (size_t)-2);",
          "56:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/\\376\"), \"\", (size_t)-2);",
          "57:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/\\377\"), \"\", (size_t)-2);",
          "59:     flags = HTTP_PARSEOPT_URL_NORMALIZE_REQUIRED;",
          "60:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/\"), CONST_STR_LEN(\"/\"));",
          "61:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/abc\"), CONST_STR_LEN(\"/abc\"));",
          "62:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/abc/\"), CONST_STR_LEN(\"/abc/\"));",
          "63:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/abc/def\"), CONST_STR_LEN(\"/abc/def\"));",
          "64:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/abc?\"), CONST_STR_LEN(\"/abc?\"));",
          "65:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/abc?d\"), CONST_STR_LEN(\"/abc?d\"));",
          "66:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/abc?d=\"), CONST_STR_LEN(\"/abc?d=\"));",
          "67:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/abc?d=e\"), CONST_STR_LEN(\"/abc?d=e\"));",
          "68:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/abc?d=e&\"), CONST_STR_LEN(\"/abc?d=e&\"));",
          "69:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/abc?d=e&f\"), CONST_STR_LEN(\"/abc?d=e&f\"));",
          "70:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/abc?d=e&f=g\"), CONST_STR_LEN(\"/abc?d=e&f=g\"));",
          "71:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/abc?d=e&f=g#\"), CONST_STR_LEN(\"/abc?d=e&f=g\"));",
          "72:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/abc?d=e&f=g#any\"), CONST_STR_LEN(\"/abc?d=e&f=g\"));",
          "73:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/%2F\"), CONST_STR_LEN(\"/%2F\"));",
          "74:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/%2f\"), CONST_STR_LEN(\"/%2F\"));",
          "75:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/%20\"), CONST_STR_LEN(\"/%20\"));",
          "76:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/%2b\"), CONST_STR_LEN(\"/+\"));",
          "77:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/%2B\"), CONST_STR_LEN(\"/+\"));",
          "78:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/%3a\"), CONST_STR_LEN(\"/:\"));",
          "79:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/%3A\"), CONST_STR_LEN(\"/:\"));",
          "80:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/~test%20\u00e4_\"), CONST_STR_LEN(\"/~test%20%C3%A4_\"));",
          "81:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/\\375\"), \"\", (size_t)-2);",
          "82:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/\\376\"), \"\", (size_t)-2);",
          "83:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/\\377\"), \"\", (size_t)-2);",
          "85:     flags |= HTTP_PARSEOPT_URL_NORMALIZE_CTRLS_REJECT;",
          "86:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/\\a\"), \"\", (size_t)-2);",
          "87:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/\\t\"), \"\", (size_t)-2);",
          "88:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/\\r\"), \"\", (size_t)-2);",
          "89:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/\\177\"), \"\", (size_t)-2);",
          "91:   #if defined(__WIN32) || defined(__CYGWIN__)",
          "92:     flags |= HTTP_PARSEOPT_URL_NORMALIZE_PATH_BACKSLASH_TRANS;",
          "93:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/a\\\\b\"), CONST_STR_LEN(\"/a/b\"));",
          "94:   #endif",
          "96:     flags |= HTTP_PARSEOPT_URL_NORMALIZE_PATH_2F_DECODE;",
          "97:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/a/b?c=/\"), CONST_STR_LEN(\"/a/b?c=/\"));",
          "98:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/a/b?c=%2f\"), CONST_STR_LEN(\"/a/b?c=/\"));",
          "99:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/a%2fb\"), CONST_STR_LEN(\"/a/b\"));",
          "100:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/a%2Fb\"), CONST_STR_LEN(\"/a/b\"));",
          "101:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/a%2fb?c=/\"), CONST_STR_LEN(\"/a/b?c=/\"));",
          "102:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/a%2fb?c=%2f\"), CONST_STR_LEN(\"/a/b?c=/\"));",
          "103:     flags &= ~HTTP_PARSEOPT_URL_NORMALIZE_PATH_2F_DECODE;",
          "105:     flags |= HTTP_PARSEOPT_URL_NORMALIZE_PATH_2F_REJECT;",
          "106:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/a%2fb\"), \"\", (size_t)-2);",
          "107:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/a%2Fb\"), \"\", (size_t)-2);",
          "108:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/a/b?c=%2f\"), CONST_STR_LEN(\"/a/b?c=/\"));",
          "109:     flags &= ~HTTP_PARSEOPT_URL_NORMALIZE_PATH_2F_REJECT;",
          "111:     flags |= HTTP_PARSEOPT_URL_NORMALIZE_PATH_DOTSEG_REMOVE;",
          "112:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"./a/b\"), CONST_STR_LEN(\"/a/b\"));",
          "113:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"../a/b\"), CONST_STR_LEN(\"/a/b\"));",
          "114:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/a/./b\"), CONST_STR_LEN(\"/a/b\"));",
          "115:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/a/../b\"), CONST_STR_LEN(\"/b\"));",
          "116:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/a/b/.\"), CONST_STR_LEN(\"/a/b/\"));",
          "117:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/a/b/..\"), CONST_STR_LEN(\"/a/\"));",
          "118:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/a/../b/..\"), CONST_STR_LEN(\"/\"));",
          "119:     flags &= ~HTTP_PARSEOPT_URL_NORMALIZE_PATH_DOTSEG_REMOVE;",
          "121:     flags |= HTTP_PARSEOPT_URL_NORMALIZE_PATH_DOTSEG_REJECT;",
          "122:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"./a/b\"), \"\", (size_t)-2);",
          "123:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"../a/b\"), \"\", (size_t)-2);",
          "124:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/a/./b\"), \"\", (size_t)-2);",
          "125:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/a/../b\"), \"\", (size_t)-2);",
          "126:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/a/b/.\"), \"\", (size_t)-2);",
          "127:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/a/b/..\"), \"\", (size_t)-2);",
          "128:     flags &= ~HTTP_PARSEOPT_URL_NORMALIZE_PATH_DOTSEG_REJECT;",
          "130:     flags |= HTTP_PARSEOPT_URL_NORMALIZE_QUERY_20_PLUS;",
          "131:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/a/b?c=d+e\"), CONST_STR_LEN(\"/a/b?c=d+e\"));",
          "132:     run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/a/b?c=d%20e\"), CONST_STR_LEN(\"/a/b?c=d+e\"));",
          "133:     flags &= ~HTTP_PARSEOPT_URL_NORMALIZE_QUERY_20_PLUS;",
          "135:     buffer_free(psrc);",
          "136:     buffer_free(ptmp);",
          "137: }",
          "139: int main (void) {",
          "140:     test_burl_normalize();",
          "141:     return 0;",
          "142: }",
          "",
          "---------------"
        ],
        "src/t/test_request.c||src/t/test_request.c": [
          "File: src/t/test_request.c -> src/t/test_request.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include <stdio.h>",
          "7: #include \"base.h\"",
          "9: static void test_request_connection_reset(connection *con)",
          "10: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: #include \"burl.h\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}