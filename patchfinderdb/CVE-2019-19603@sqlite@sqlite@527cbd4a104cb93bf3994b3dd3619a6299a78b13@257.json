{
  "cve_id": "CVE-2019-19603",
  "cve_desc": "SQLite 3.30.1 mishandles certain SELECT statements with a nonexistent VIEW, leading to an application crash.",
  "repo": "sqlite/sqlite",
  "patch_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
  "patch_info": {
    "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab.test"
    ],
    "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab.test||test/altertab.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "856:       }",
      "857:     }",
      "858:   }else{",
      "861:     ){",
      "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
      "863:                       zName);",
      "864:       return SQLITE_ERROR;",
      "865:     }",
      "866:   }",
      "867:   return SQLITE_OK;",
      "868: }",
      "",
      "[Removed Lines]",
      "859:     if( pParse->nested==0",
      "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
      "",
      "[Added Lines]",
      "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
      "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
      "",
      "[Added Lines]",
      "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
      "2148:   return pMod->pModule->xShadowName(zTail+1);",
      "2149: }",
      "",
      "[Removed Lines]",
      "2150: #else",
      "2151: # define isShadowTableName(x,y) 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2190:   p = pParse->pNewTable;",
      "2191:   if( p==0 ) return;",
      "2194:     p->tabFlags |= TF_Shadow;",
      "2195:   }",
      "",
      "[Removed Lines]",
      "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
      "",
      "[Added Lines]",
      "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
      "4549: #endif",
      "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
      "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
      "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
      "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
      "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
      "4553: #else",
      "4554: # define sqlite3ShadowTableName(A,B) 0",
      "4555: #endif",
      "",
      "---------------"
    ],
    "test/altertab.test||test/altertab.test": [
      "File: test/altertab.test -> test/altertab.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "547:   } {1 {table y1_segments may not be modified}}",
      "549:   do_catchsql_test 16.20 {",
      "554:     DROP TABLE y1_segments;",
      "555:   } {1 {table y1_segments may not be dropped}}",
      "557:   do_execsql_test 16.30 {",
      "558:     ALTER TABLE y1 RENAME TO z1;",
      "559:   }",
      "",
      "[Removed Lines]",
      "550:     ALTER TABLE y1_segments RENAME TO abc;",
      "551:   } {1 {table y1_segments may not be altered}}",
      "553:   do_catchsql_test 16.21 {",
      "",
      "[Added Lines]",
      "553:   do_catchsql_test 16.20 {",
      "554:     ALTER TABLE y1_segments RENAME TO abc;",
      "555:   } {1 {table y1_segments may not be altered}}",
      "556:   sqlite3_db_config db DEFENSIVE 0",
      "557:   do_catchsql_test 16.22 {",
      "558:     ALTER TABLE y1_segments RENAME TO abc;",
      "559:   } {0 {}}",
      "560:   sqlite3_db_config db DEFENSIVE 1",
      "561:   do_catchsql_test 16.23 {",
      "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
      "563:   } {1 {object name reserved for internal use: y1_segments}}",
      "564:   do_catchsql_test 16.24 {",
      "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
      "566:   } {1 {object name reserved for internal use: y1_segments}}",
      "567:   sqlite3_db_config db DEFENSIVE 0",
      "568:   do_catchsql_test 16.25 {",
      "569:     ALTER TABLE abc RENAME TO y1_segments;",
      "570:   } {0 {}}",
      "571:   sqlite3_db_config db DEFENSIVE 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dd668c26b5d7a7526638e39239844e01a1d251e0",
      "candidate_info": {
        "commit_hash": "dd668c26b5d7a7526638e39239844e01a1d251e0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dd668c26b5d7a7526638e39239844e01a1d251e0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/in.test"
        ],
        "message": "When applying the IN_INDEX_NOOP optimization and the LHS has REAL affinity, also apply REAL affinity to each element of the RHS. Ticket [2841e99d104c6436].\n\nFossilOrigin-Name: 88833a9c2849c959a37a80e0e4d2b211ce3c83a48319724c89b172b060c876b4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/in.test||test/in.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0c946f0846b2835f8facca806a4d4ecc2b2e97343de245a0d91716d998b2a829",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3124:     int r2, regToFree;",
          "3125:     int regCkNull = 0;",
          "3126:     int ii;",
          "3127:     assert( !ExprHasProperty(pExpr, EP_xIsSelect) );",
          "3128:     if( destIfNull!=destIfFalse ){",
          "3129:       regCkNull = sqlite3GetTempReg(pParse);",
          "3130:       sqlite3VdbeAddOp3(v, OP_BitAnd, rLhs, rLhs, regCkNull);",
          "3131:     }",
          "3132:     for(ii=0; ii<pList->nExpr; ii++){",
          "3133:       r2 = sqlite3ExprCodeTemp(pParse, pList->a[ii].pExpr, &regToFree);",
          "3134:       if( regCkNull && sqlite3ExprCanBeNull(pList->a[ii].pExpr) ){",
          "3135:         sqlite3VdbeAddOp3(v, OP_BitAnd, regCkNull, r2, regCkNull);",
          "3136:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3133:     bLhsReal = sqlite3ExprAffinity(pExpr->pLeft)==SQLITE_AFF_REAL;",
          "3136:       if( bLhsReal ){",
          "3137:         sqlite3VdbeAddOp4(v, OP_Affinity, r2, 1, 0, \"E\", P4_STATIC);",
          "3138:       }",
          "",
          "---------------"
        ],
        "test/in.test||test/in.test": [
          "File: test/in.test -> test/in.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "759:   SELECT * FROM t0 WHERE '1' IN (t0.c0);",
          "760: } {}",
          "763: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "762: # 2019-09-02 ticket https://www.sqlite.org/src/info/2841e99d104c6436",
          "763: # For the IN_INDEX_NOOP optimization, apply REAL affinity to the LHS",
          "764: # values prior to comparison if the RHS has REAL affinity.",
          "765: #",
          "766: do_execsql_test in-19.1 {",
          "767:   DROP TABLE IF EXISTS t0;",
          "768:   CREATE TABLE t0(c0 REAL UNIQUE);",
          "769:   INSERT INTO t0(c0) VALUES(2.07093491255203046E18);",
          "770:   SELECT 1 FROM t0 WHERE c0 IN ('2070934912552030444');",
          "771: } {1}",
          "772: do_execsql_test in-19.2 {",
          "773:   SELECT c0 IN ('2070934912552030444') FROM t0;",
          "774: } {1}",
          "775: do_execsql_test in-19.3 {",
          "776:   SELECT c0 IN ('2070934912552030444',2,3) FROM t0;",
          "777: } {1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "922b35801d8bdbb9365cbde7d44e66293f616e13",
      "candidate_info": {
        "commit_hash": "922b35801d8bdbb9365cbde7d44e66293f616e13",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/922b35801d8bdbb9365cbde7d44e66293f616e13",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test_journal.c"
        ],
        "message": "Update an assert() in test_journal.c to take the new \"VACUUM INTO\" functionality into account.\n\nFossilOrigin-Name: 0e6249cb958a40ead0edf6e75a2c46e8657db3d358c5fe78a9dc0fa5ed7ad929",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test_journal.c||src/test_journal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9d54a63d6e3cd47b483cf0ee868a5e7f638bcb0e3cbdeaecc667f293b87a3e99",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test_journal.c||src/test_journal.c": [
          "File: src/test_journal.c -> src/test_journal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "564:       assert( pgno>p->nPage || sqlite3BitvecTest(p->pWritable, pgno) );",
          "565:     }",
          "566:   }",
          "",
          "[Removed Lines]",
          "563:       assert( pgno<=p->nPage || p->nSync>0 );",
          "",
          "[Added Lines]",
          "563:       assert( p->nPage==0 || pgno<=p->nPage || p->nSync>0 );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d4a591dd6beaa33223b153abe092c8e61d6bde0a",
      "candidate_info": {
        "commit_hash": "d4a591dd6beaa33223b153abe092c8e61d6bde0a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d4a591dd6beaa33223b153abe092c8e61d6bde0a",
        "files": [
          "ext/misc/fileio.c",
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in",
          "src/window.c"
        ],
        "message": "Fix harmless compiler warnings.\n\nFossilOrigin-Name: a063f7c426d1ac066bf05cc03288f49b1c92e06a8cb2bc271cce9bd3022a74ea",
        "before_after_code_files": [
          "ext/misc/fileio.c||ext/misc/fileio.c",
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/fileio.c||ext/misc/fileio.c": [
          "File: ext/misc/fileio.c -> ext/misc/fileio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:     fclose(in);",
          "159:     return;",
          "160:   }",
          "162:     sqlite3_result_blob64(ctx, pBuf, nIn, sqlite3_free);",
          "163:   }else{",
          "164:     sqlite3_result_error_code(ctx, SQLITE_IOERR);",
          "",
          "[Removed Lines]",
          "161:   if( nIn==fread(pBuf, 1, (size_t)nIn, in) ){",
          "",
          "[Added Lines]",
          "161:   if( nIn==(sqlite3_int64)fread(pBuf, 1, (size_t)nIn, in) ){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c6da39115d3e2b0fd3a03c4bcae8ee8b05a6bbd6b11f8c54712fbff6387f610d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "189: #ifndef SQLITE_OMIT_COMPILEOPTION_DIAGS",
          "190: int sqlite3_compileoption_used(const char *zOptName);",
          "191: const char *sqlite3_compileoption_get(int N);",
          "192: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "192: #else",
          "193: # define sqlite3_compileoption_used(X) 0",
          "194: # define sqlite3_compileoption_get(X)  ((void*)0)",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "332: ){",
          "333:   struct CallCount *p;",
          "334:   UNUSED_PARAMETER(nArg); assert( nArg==0 );",
          "335:   p = (struct CallCount*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "336:   if( p ){",
          "337:     p->nTotal++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "335:   UNUSED_PARAMETER(apArg);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "344: ){",
          "345:   struct CallCount *p;",
          "346:   UNUSED_PARAMETER(nArg); assert( nArg==0 );",
          "347:   p = (struct CallCount*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "348:   p->nStep++;",
          "349: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "348:   UNUSED_PARAMETER(apArg);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "375: ){",
          "376:   struct CallCount *p;",
          "377:   UNUSED_PARAMETER(nArg); assert( nArg==0 );",
          "378:   p = (struct CallCount*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "379:   if( p ){",
          "380:     p->nTotal++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "380:   UNUSED_PARAMETER(apArg);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "387: ){",
          "388:   struct CallCount *p;",
          "389:   UNUSED_PARAMETER(nArg); assert( nArg==0 );",
          "390:   p = (struct CallCount*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "391:   p->nStep++;",
          "392: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "393:   UNUSED_PARAMETER(apArg);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "442: ){",
          "443:   struct NtileCtx *p;",
          "444:   assert( nArg==1 ); UNUSED_PARAMETER(nArg);",
          "445:   p = (struct NtileCtx*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "446:   p->iRow++;",
          "447: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "449:   UNUSED_PARAMETER(apArg);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "217ca657d82f2324d6c5a97598bf4f77ebbb1fe7",
      "candidate_info": {
        "commit_hash": "217ca657d82f2324d6c5a97598bf4f77ebbb1fe7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/217ca657d82f2324d6c5a97598bf4f77ebbb1fe7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/attach.c",
          "src/main.c",
          "src/resolve.c",
          "src/sqlite.h.in",
          "src/sqliteInt.h",
          "src/tclsqlite.c",
          "src/treeview.c",
          "test/func.test",
          "test/tclsqlite.test"
        ],
        "message": "The SQLITE_DIRECTONLY flag, when added to sqlite3_create_function() prevents the function from being used inside a trigger or view.\n\nFossilOrigin-Name: de767376987f7668b0770c4920f1532e341b5a27f797d69c0f5e92b87d036170",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/attach.c||src/attach.c",
          "src/main.c||src/main.c",
          "src/resolve.c||src/resolve.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/tclsqlite.c||src/tclsqlite.c",
          "src/treeview.c||src/treeview.c",
          "test/func.test||test/func.test",
          "test/tclsqlite.test||test/tclsqlite.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 31e34fa3390196cdc3178bf120224b08df5ec58fa2c77079ede6e9461a430dad",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/attach.c||src/attach.c": [
          "File: src/attach.c -> src/attach.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "561: ){",
          "562:   while( pExpr ){",
          "563:     if( pExpr->op==TK_VARIABLE ){",
          "564:       if( pFix->pParse->db->init.busy ){",
          "565:         pExpr->op = TK_NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "563:     ExprSetProperty(pExpr, EP_Indirect);",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1718:   }",
          "1720:   assert( SQLITE_FUNC_CONSTANT==SQLITE_DETERMINISTIC );",
          "1722:   enc &= (SQLITE_FUNC_ENCMASK|SQLITE_ANY);",
          "1724: #ifndef SQLITE_OMIT_UTF16",
          "",
          "[Removed Lines]",
          "1721:   extraFlags = enc &  SQLITE_DETERMINISTIC;",
          "",
          "[Added Lines]",
          "1721:   assert( SQLITE_FUNC_DIRECT==SQLITE_DIRECTONLY );",
          "1722:   extraFlags = enc &  (SQLITE_DETERMINISTIC|SQLITE_DIRECTONLY);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1781:   p->u.pDestructor = pDestructor;",
          "1782:   p->funcFlags = (p->funcFlags & SQLITE_FUNC_ENCMASK) | extraFlags;",
          "1783:   testcase( p->funcFlags & SQLITE_DETERMINISTIC );",
          "1784:   p->xSFunc = xSFunc ? xSFunc : xStep;",
          "1785:   p->xFinalize = xFinal;",
          "1786:   p->xValue = xValue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1785:   testcase( p->funcFlags & SQLITE_DIRECTONLY );",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "824:           no_such_func = 1;",
          "825:           pDef = 0;",
          "826:         }",
          "827:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "826:         }else",
          "827:         if( (pDef->funcFlags & SQLITE_FUNC_DIRECT)!=0",
          "828:          && ExprHasProperty(pExpr, EP_Indirect)",
          "829:          && !IN_RENAME_OBJECT",
          "830:         ){",
          "833:           sqlite3ErrorMsg(pParse, \"%s() prohibited in triggers and views\",",
          "834:                           pDef->zName);",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "4981: #define SQLITE_DETERMINISTIC    0x800",
          "",
          "[Added Lines]",
          "4991: #define SQLITE_DETERMINISTIC    0x000000800",
          "4992: #define SQLITE_DIRECTONLY       0x000080000",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/tclsqlite.c||src/tclsqlite.c": [
          "File: src/tclsqlite.c -> src/tclsqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2845:       if( n>1 && strncmp(z, \"-deterministic\",n)==0 ){",
          "2846:         flags |= SQLITE_DETERMINISTIC;",
          "2847:       }else",
          "2848:       if( n>1 && strncmp(z, \"-returntype\", n)==0 ){",
          "2849:         const char *azType[] = {\"integer\", \"real\", \"text\", \"blob\", \"any\", 0};",
          "2850:         assert( SQLITE_INTEGER==1 && SQLITE_FLOAT==2 && SQLITE_TEXT==3 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2854:       if( n>1 && strncmp(z, \"-directonly\",n)==0 ){",
          "2855:         flags |= SQLITE_DIRECTONLY;",
          "2856:       }else",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2860:         eType++;",
          "2861:       }else{",
          "2862:         Tcl_AppendResult(interp, \"bad option \\\"\", z,",
          "2864:         );",
          "2865:         return TCL_ERROR;",
          "2866:       }",
          "",
          "[Removed Lines]",
          "2863:             \"\\\": must be -argcount, -deterministic or -returntype\", (char*)0",
          "",
          "[Added Lines]",
          "2872:             \"\\\": must be -argcount, -deterministic, -directonly,\"",
          "2873:             \" or -returntype\", (char*)0",
          "",
          "---------------"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "557: #endif",
          "558:       }",
          "559:       if( pExpr->op==TK_AGG_FUNCTION ){",
          "562:       }else{",
          "564:       }",
          "565:       if( pFarg ){",
          "566:         sqlite3TreeViewExprList(pView, pFarg, pWin!=0, 0);",
          "",
          "[Removed Lines]",
          "560:         sqlite3TreeViewLine(pView, \"AGG_FUNCTION%d %Q\",",
          "561:                              pExpr->op2, pExpr->u.zToken);",
          "563:         sqlite3TreeViewLine(pView, \"FUNCTION %Q\", pExpr->u.zToken);",
          "",
          "[Added Lines]",
          "560:         sqlite3TreeViewLine(pView, \"AGG_FUNCTION%d %Q%s\",",
          "561:                              pExpr->op2, pExpr->u.zToken, zFlgs);",
          "563:         sqlite3TreeViewLine(pView, \"FUNCTION %Q%s\", pExpr->u.zToken, zFlgs);",
          "",
          "---------------"
        ],
        "test/func.test||test/func.test": [
          "File: test/func.test -> test/func.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1419:   SELECT test_frombind(x.a,y.b,x.c,:123,y.e,x.f,$xyz+y.f) FROM t1 x, t1 y;",
          "1420: } {8}",
          "1425: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1422: # 2019-08-15",
          "1423: # Direct-only functions.",
          "1424: #",
          "1425: proc testdirectonly {x} {return [expr {$x*2}]}",
          "1426: do_test func-33.1 {",
          "1427:   db func testdirectonly -directonly testdirectonly",
          "1428:   db eval {SELECT testdirectonly(15)}",
          "1429: } {30}",
          "1430: do_catchsql_test func-33.2 {",
          "1431:   CREATE VIEW v33(y) AS SELECT testdirectonly(15);",
          "1432:   SELECT * FROM v33;",
          "1433: } {1 {testdirectonly() prohibited in triggers and views}}",
          "1434: do_execsql_test func-33.3 {",
          "1435:   SELECT * FROM (SELECT testdirectonly(15)) AS v33;",
          "1436: } {30}",
          "1437: do_execsql_test func-33.4 {",
          "1438:   WITH c(x) AS (SELECT testdirectonly(15))",
          "1439:   SELECT * FROM c;",
          "1440: } {30}",
          "1441: do_catchsql_test func-33.5 {",
          "1442:   WITH c(x) AS (SELECT * FROM v33)",
          "1443:   SELECT * FROM c;",
          "1444: } {1 {testdirectonly() prohibited in triggers and views}}",
          "1445: do_execsql_test func-33.10 {",
          "1446:   CREATE TABLE t33a(a,b);",
          "1447:   CREATE TABLE t33b(x,y);",
          "1448:   CREATE TRIGGER r1 AFTER INSERT ON t33a BEGIN",
          "1449:     INSERT INTO t33b(x,y) VALUES(testdirectonly(new.a),new.b);",
          "1450:   END;",
          "1451: } {}",
          "1452: do_catchsql_test func-33.11 {",
          "1453:   INSERT INTO t33a VALUES(1,2);",
          "1454: } {1 {testdirectonly() prohibited in triggers and views}}",
          "1455: do_execsql_test func-33.20 {",
          "1456:   ALTER TABLE t33a RENAME COLUMN a TO aaa;",
          "1457:   SELECT sql FROM sqlite_master WHERE name='r1';",
          "1458: } {{CREATE TRIGGER r1 AFTER INSERT ON t33a BEGIN",
          "1459:     INSERT INTO t33b(x,y) VALUES(testdirectonly(new.aaa),new.b);",
          "1460:   END}}",
          "",
          "---------------"
        ],
        "test/tclsqlite.test||test/tclsqlite.test": [
          "File: test/tclsqlite.test -> test/tclsqlite.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "790: do_test 17.6.3 {",
          "791:   list [catch { db function xyz -n object ret } msg] $msg",
          "794: # 2019-02-28: The \"bind_fallback\" command.",
          "795: #",
          "",
          "[Removed Lines]",
          "792: } {1 {bad option \"-n\": must be -argcount, -deterministic or -returntype}}",
          "",
          "[Added Lines]",
          "792: } {1 {bad option \"-n\": must be -argcount, -deterministic, -directonly, or -returntype}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2e6d83bc498c7f3c49c72ac96887228336966db3",
      "candidate_info": {
        "commit_hash": "2e6d83bc498c7f3c49c72ac96887228336966db3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2e6d83bc498c7f3c49c72ac96887228336966db3",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/main.c",
          "src/os.c",
          "src/shell.c.in",
          "src/test1.c",
          "test/dbfuzz2.c",
          "test/fuzzcheck.c"
        ],
        "message": "Give the SQLITE_TESTCTRL_PRNG_SEED two arguments.  The second argument if not NULL is a pointer to a database connection which seeds the connection from its schema cookie.  In this way, fuzzers can control the PRNG seed.\n\nFossilOrigin-Name: 49aa34480622cce4d7a72c59d9cfa8336886387acec8ee15b72f295ea1a52d8c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/main.c||src/main.c",
          "src/os.c||src/os.c",
          "src/shell.c.in||src/shell.c.in",
          "src/test1.c||src/test1.c",
          "test/dbfuzz2.c||test/dbfuzz2.c",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c71098409c98af8360f8f28b9238a12ec764018a5782e8ff03fdf5db54031d6e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6897:   assert( i<iEnd );",
          "6898:   j = get2byte(&aData[hdr+5]);",
          "6900:   memcpy(&pTmp[j], &aData[j], usableSize - j);",
          "6902:   for(k=0; pCArray->ixNx[k]<=i && ALWAYS(k<NB*2); k++){}",
          "",
          "[Removed Lines]",
          "6899:   if( NEVER(j>(u32)usableSize) ){ j = 0; }",
          "",
          "[Added Lines]",
          "6899:   if( j>(u32)usableSize ){ j = 0; }",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3824:       break;",
          "3825:     }",
          "3832:     case SQLITE_TESTCTRL_PRNG_SEED: {",
          "3834:       break;",
          "3835:     }",
          "",
          "[Removed Lines]",
          "3833:       sqlite3Config.iPrngSeed = va_arg(ap, unsigned int);",
          "",
          "[Added Lines]",
          "3848:       int x = va_arg(ap, int);",
          "3849:       int y;",
          "3850:       sqlite3 *db = va_arg(ap, sqlite3*);",
          "3851:       assert( db==0 || db->aDb[0].pSchema!=0 );",
          "3852:       if( db && (y = db->aDb[0].pSchema->schema_cookie)!=0 ){ x = y; }",
          "3853:       sqlite3Config.iPrngSeed = x;",
          "3854:       sqlite3_randomness(0,0);",
          "",
          "---------------"
        ],
        "src/os.c||src/os.c": [
          "File: src/os.c -> src/os.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "260: int sqlite3OsRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){",
          "261:   if( sqlite3Config.iPrngSeed ){",
          "262:     memset(zBufOut, 0, nByte);",
          "264:     memcpy(zBufOut, &sqlite3Config.iPrngSeed, nByte);",
          "265:     return SQLITE_OK;",
          "266:   }else{",
          "",
          "[Removed Lines]",
          "263:     if( nByte>sizeof(unsigned) ) nByte = sizeof(unsigned int);",
          "",
          "[Added Lines]",
          "263:     if( ALWAYS(nByte>sizeof(unsigned)) ) nByte = sizeof(unsigned int);",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "9152:       { \"pending_byte\",       SQLITE_TESTCTRL_PENDING_BYTE,  \"OFFSET  \"           },",
          "9153:       { \"prng_restore\",       SQLITE_TESTCTRL_PRNG_RESTORE,  \"\"                   },",
          "9154:       { \"prng_save\",          SQLITE_TESTCTRL_PRNG_SAVE,     \"\"                   },",
          "9156:       { \"reserve\",            SQLITE_TESTCTRL_RESERVE,       \"BYTES-OF-RESERVE\"   },",
          "9157:     };",
          "9158:     int testctrl = -1;",
          "",
          "[Removed Lines]",
          "9155:       { \"prng_seed\",          SQLITE_TESTCTRL_PRNG_SEED,     \"SEED\"               },",
          "",
          "[Added Lines]",
          "9155:       { \"prng_seed\",          SQLITE_TESTCTRL_PRNG_SEED,     \"SEED ?db?\"          },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9229:         case SQLITE_TESTCTRL_PENDING_BYTE:",
          "9231:           if( nArg==3 ){",
          "9232:             unsigned int opt = (unsigned int)integerValue(azArg[2]);",
          "9233:             rc2 = sqlite3_test_control(testctrl, opt);",
          "",
          "[Removed Lines]",
          "9230:         case SQLITE_TESTCTRL_PRNG_SEED:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "9235:           }",
          "9236:           break;",
          "9239:         case SQLITE_TESTCTRL_ASSERT:",
          "9240:         case SQLITE_TESTCTRL_ALWAYS:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9238:         case SQLITE_TESTCTRL_PRNG_SEED:",
          "9239:           if( nArg==3 || nArg==4 ){",
          "9240:             int i = (int)integerValue(azArg[2]);",
          "9241:             sqlite3 *db;",
          "9242:             if( nArg==3 ){",
          "9243:               db = 0;",
          "9244:             }else{",
          "9245:               db = p->db;",
          "9247:               sqlite3_table_column_metadata(db, 0, \"x\", 0, 0, 0, 0, 0, 0);",
          "9248:             }",
          "9249:             rc2 = sqlite3_test_control(testctrl, i, db);",
          "9250:             isOk = 3;",
          "9251:           }",
          "9252:           break;",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6389: ){",
          "6393:     return TCL_ERROR;",
          "6394:   }",
          "6395:   if( Tcl_GetIntFromObj(interp,objv[0],&i) ) return TCL_ERROR;",
          "6398:   return TCL_OK;",
          "6399: }",
          "",
          "[Removed Lines]",
          "6390:   unsigned int i;",
          "6391:   if( objc!=2 ){",
          "6392:     Tcl_WrongNumArgs(interp, 1, objv, \"PRNG-SEED-TEXT\");",
          "6396:   sqlite3_test_control(SQLITE_TESTCTRL_PRNG_SEED, (unsigned int)i);",
          "6397:   sqlite3_randomness(0,0);",
          "",
          "[Added Lines]",
          "6400:   int i = 0;",
          "6401:   sqlite3 *db = 0;",
          "6402:   if( objc!=2 && objc!=3 ){",
          "6403:     Tcl_WrongNumArgs(interp, 1, objv, \"SEED ?DB?\");",
          "6407:   if( objc==3 && getDbPointer(interp, Tcl_GetString(objv[2]), &db) ){",
          "6408:     return TCL_ERROR;",
          "6409:   }",
          "6410:   sqlite3_test_control(SQLITE_TESTCTRL_PRNG_SEED, i, db);",
          "",
          "---------------"
        ],
        "test/dbfuzz2.c||test/dbfuzz2.c": [
          "File: test/dbfuzz2.c -> test/dbfuzz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "212:     sqlite3_progress_handler(db, 10, progress_handler, 0);",
          "213:   }",
          "214: #ifdef SQLITE_TESTCTRL_PRNG_SEED",
          "217: #endif",
          "218:   for(i=0; i<sizeof(azSql)/sizeof(azSql[0]); i++){",
          "219:     if( eVerbosity>=1 ){",
          "",
          "[Removed Lines]",
          "215:   sqlite3_test_control(SQLITE_TESTCTRL_PRNG_SEED, 0);",
          "216:   sqlite3_randomness(0,0);",
          "",
          "[Added Lines]",
          "215:   sqlite3_test_control(SQLITE_TESTCTRL_PRNG_SEED, 1, db);",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1807:           }",
          "1808: #endif",
          "1809: #ifdef SQLITE_TESTCTRL_PRNG_SEED",
          "1812: #endif",
          "1813:           do{",
          "1814:             runSql(db, (char*)pSql->a, runFlags);",
          "",
          "[Removed Lines]",
          "1810:           sqlite3_test_control(SQLITE_TESTCTRL_PRNG_SEED, 0);",
          "1811:           sqlite3_randomness(0,0);",
          "",
          "[Added Lines]",
          "1810:           sqlite3_test_control(SQLITE_TESTCTRL_PRNG_SEED, 1, db);",
          "",
          "---------------"
        ]
      }
    }
  ]
}