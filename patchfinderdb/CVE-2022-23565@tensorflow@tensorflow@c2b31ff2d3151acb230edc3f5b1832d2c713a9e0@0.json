{
  "cve_id": "CVE-2022-23565",
  "cve_desc": "Tensorflow is an Open Source Machine Learning Framework. An attacker can trigger denial of service via assertion failure by altering a `SavedModel` on disk such that `AttrDef`s of some operation are duplicated. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "c2b31ff2d3151acb230edc3f5b1832d2c713a9e0",
  "patch_info": {
    "commit_hash": "c2b31ff2d3151acb230edc3f5b1832d2c713a9e0",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/c2b31ff2d3151acb230edc3f5b1832d2c713a9e0",
    "files": [
      "tensorflow/core/framework/op_def_util.cc"
    ],
    "message": "Remove a `DCHECK`-fail, log an error instead.\n\n`DCHECK` in debug mode results in crashes. TensorFlow has had multiple vulnerabilities due to this.\n\nOutside of debug mode, `DCHECK` is a no-op.\n\nA better alternative is to report an error to the log buffer and continue. This should happen both in debug mode and in prod mode.\n\nPiperOrigin-RevId: 408375925\nChange-Id: Id5b3e19c73f3fbe0cc4bba26ca44ff9607bb6356",
    "before_after_code_files": [
      "tensorflow/core/framework/op_def_util.cc||tensorflow/core/framework/op_def_util.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/framework/op_def_util.cc||tensorflow/core/framework/op_def_util.cc": [
      "File: tensorflow/core/framework/op_def_util.cc -> tensorflow/core/framework/op_def_util.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "821:     const protobuf::RepeatedPtrField<OpDef::AttrDef>& a2) {",
      "822:   std::unordered_map<string, const OpDef::AttrDef*> a1_set;",
      "823:   for (const OpDef::AttrDef& def : a1) {",
      "827:     a1_set[def.name()] = &def;",
      "828:   }",
      "829:   for (const OpDef::AttrDef& def : a2) {",
      "",
      "[Removed Lines]",
      "824:     DCHECK(a1_set.find(def.name()) == a1_set.end())",
      "825:         << \"AttrDef names must be unique, but '\" << def.name()",
      "826:         << \"' appears more than once\";",
      "",
      "[Added Lines]",
      "824:     if (a1_set.find(def.name()) != a1_set.end()) {",
      "825:       LOG(ERROR) << \"AttrDef names must be unique, but '\" << def.name()",
      "826:                  << \"' appears more than once\";",
      "827:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b7b1a154aeeffd605c89c502a1a86e0caf4dee6f",
      "candidate_info": {
        "commit_hash": "b7b1a154aeeffd605c89c502a1a86e0caf4dee6f",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/b7b1a154aeeffd605c89c502a1a86e0caf4dee6f",
        "files": [
          "tensorflow/core/framework/op_def_util.cc"
        ],
        "message": "Remove a `DCHECK`-fail, log an error instead.\n\n`DCHECK` in debug mode results in crashes. TensorFlow has had multiple vulnerabilities due to this.\n\nOutside of debug mode, `DCHECK` is a no-op.\n\nA better alternative is to report an error to the log buffer and continue. This should happen both in debug mode and in prod mode.\n\nPiperOrigin-RevId: 408375925\nChange-Id: Id5b3e19c73f3fbe0cc4bba26ca44ff9607bb6356",
        "before_after_code_files": [
          "tensorflow/core/framework/op_def_util.cc||tensorflow/core/framework/op_def_util.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/framework/op_def_util.cc||tensorflow/core/framework/op_def_util.cc"
          ],
          "candidate": [
            "tensorflow/core/framework/op_def_util.cc||tensorflow/core/framework/op_def_util.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/framework/op_def_util.cc||tensorflow/core/framework/op_def_util.cc": [
          "File: tensorflow/core/framework/op_def_util.cc -> tensorflow/core/framework/op_def_util.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "818:     const protobuf::RepeatedPtrField<OpDef::AttrDef>& a2) {",
          "819:   std::unordered_map<string, const OpDef::AttrDef*> a1_set;",
          "820:   for (const OpDef::AttrDef& def : a1) {",
          "824:     a1_set[def.name()] = &def;",
          "825:   }",
          "826:   for (const OpDef::AttrDef& def : a2) {",
          "",
          "[Removed Lines]",
          "821:     DCHECK(a1_set.find(def.name()) == a1_set.end())",
          "822:         << \"AttrDef names must be unique, but '\" << def.name()",
          "823:         << \"' appears more than once\";",
          "",
          "[Added Lines]",
          "821:     if (a1_set.find(def.name()) != a1_set.end()) {",
          "822:       LOG(ERROR) << \"AttrDef names must be unique, but '\" << def.name()",
          "823:                  << \"' appears more than once\";",
          "824:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "37f538dc3838b4bd1bfc4d095da4b8eb49d10015",
      "candidate_info": {
        "commit_hash": "37f538dc3838b4bd1bfc4d095da4b8eb49d10015",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/37f538dc3838b4bd1bfc4d095da4b8eb49d10015",
        "files": [
          "tensorflow/core/framework/op_def_util.cc"
        ],
        "message": "Remove a `DCHECK`-fail, log an error instead.\n\n`DCHECK` in debug mode results in crashes. TensorFlow has had multiple vulnerabilities due to this.\n\nOutside of debug mode, `DCHECK` is a no-op.\n\nA better alternative is to report an error to the log buffer and continue. This should happen both in debug mode and in prod mode.\n\nPiperOrigin-RevId: 408375925\nChange-Id: Id5b3e19c73f3fbe0cc4bba26ca44ff9607bb6356",
        "before_after_code_files": [
          "tensorflow/core/framework/op_def_util.cc||tensorflow/core/framework/op_def_util.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/framework/op_def_util.cc||tensorflow/core/framework/op_def_util.cc"
          ],
          "candidate": [
            "tensorflow/core/framework/op_def_util.cc||tensorflow/core/framework/op_def_util.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/framework/op_def_util.cc||tensorflow/core/framework/op_def_util.cc": [
          "File: tensorflow/core/framework/op_def_util.cc -> tensorflow/core/framework/op_def_util.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "821:     const protobuf::RepeatedPtrField<OpDef::AttrDef>& a2) {",
          "822:   std::unordered_map<string, const OpDef::AttrDef*> a1_set;",
          "823:   for (const OpDef::AttrDef& def : a1) {",
          "827:     a1_set[def.name()] = &def;",
          "828:   }",
          "829:   for (const OpDef::AttrDef& def : a2) {",
          "",
          "[Removed Lines]",
          "824:     DCHECK(a1_set.find(def.name()) == a1_set.end())",
          "825:         << \"AttrDef names must be unique, but '\" << def.name()",
          "826:         << \"' appears more than once\";",
          "",
          "[Added Lines]",
          "824:     if (a1_set.find(def.name()) != a1_set.end()) {",
          "825:       LOG(ERROR) << \"AttrDef names must be unique, but '\" << def.name()",
          "826:                  << \"' appears more than once\";",
          "827:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1fa0089e85548bf014dfea05bc69d582a7764efc",
      "candidate_info": {
        "commit_hash": "1fa0089e85548bf014dfea05bc69d582a7764efc",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/1fa0089e85548bf014dfea05bc69d582a7764efc",
        "files": [
          "tensorflow/core/framework/op_def_util.cc"
        ],
        "message": "Remove a `DCHECK`-fail, log an error instead.\n\n`DCHECK` in debug mode results in crashes. TensorFlow has had multiple vulnerabilities due to this.\n\nOutside of debug mode, `DCHECK` is a no-op.\n\nA better alternative is to report an error to the log buffer and continue. This should happen both in debug mode and in prod mode.\n\nPiperOrigin-RevId: 408375925\nChange-Id: Id5b3e19c73f3fbe0cc4bba26ca44ff9607bb6356",
        "before_after_code_files": [
          "tensorflow/core/framework/op_def_util.cc||tensorflow/core/framework/op_def_util.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/framework/op_def_util.cc||tensorflow/core/framework/op_def_util.cc"
          ],
          "candidate": [
            "tensorflow/core/framework/op_def_util.cc||tensorflow/core/framework/op_def_util.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/framework/op_def_util.cc||tensorflow/core/framework/op_def_util.cc": [
          "File: tensorflow/core/framework/op_def_util.cc -> tensorflow/core/framework/op_def_util.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "821:     const protobuf::RepeatedPtrField<OpDef::AttrDef>& a2) {",
          "822:   std::unordered_map<string, const OpDef::AttrDef*> a1_set;",
          "823:   for (const OpDef::AttrDef& def : a1) {",
          "827:     a1_set[def.name()] = &def;",
          "828:   }",
          "829:   for (const OpDef::AttrDef& def : a2) {",
          "",
          "[Removed Lines]",
          "824:     DCHECK(a1_set.find(def.name()) == a1_set.end())",
          "825:         << \"AttrDef names must be unique, but '\" << def.name()",
          "826:         << \"' appears more than once\";",
          "",
          "[Added Lines]",
          "824:     if (a1_set.find(def.name()) != a1_set.end()) {",
          "825:       LOG(ERROR) << \"AttrDef names must be unique, but '\" << def.name()",
          "826:                  << \"' appears more than once\";",
          "827:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}