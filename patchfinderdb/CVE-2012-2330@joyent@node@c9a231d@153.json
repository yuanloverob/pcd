{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f94b85db83630e95ea1744ecfcff76c6157d3d1c",
      "candidate_info": {
        "commit_hash": "f94b85db83630e95ea1744ecfcff76c6157d3d1c",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/f94b85db83630e95ea1744ecfcff76c6157d3d1c",
        "files": [
          "deps/v8/src/objects-inl.h",
          "deps/v8/src/objects.cc",
          "deps/v8/src/objects.h",
          "deps/v8/test/cctest/test-heap.cc",
          "deps/v8/test/mjsunit/fast-prototype.js"
        ],
        "message": "Revert part of 11727 as it sometimes tanked V8 benchmark (raytrace) performance for reasons that are not obvious. Now we make objects into fast-case objects when they are made prototypes for other objects, but we do not mark objects that are already fast case with a bit that helps keep them in fast case. Review URL: https://chromiumcodereview.appspot.com/10556004\n\ngit-svn-id: https://v8.googlecode.com/svn/branches/bleeding_edge@11831 ce2b1a6d-e550-0410-aec6-3dcde31c8c00",
        "before_after_code_files": [
          "deps/v8/src/objects-inl.h||deps/v8/src/objects-inl.h",
          "deps/v8/src/objects.cc||deps/v8/src/objects.cc",
          "deps/v8/src/objects.h||deps/v8/src/objects.h",
          "deps/v8/test/cctest/test-heap.cc||deps/v8/test/cctest/test-heap.cc",
          "deps/v8/test/mjsunit/fast-prototype.js||deps/v8/test/mjsunit/fast-prototype.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/v8/src/objects-inl.h||deps/v8/src/objects-inl.h": [
          "File: deps/v8/src/objects-inl.h -> deps/v8/src/objects-inl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1616:   int inobject = map()->inobject_properties();",
          "1618:   int limit;",
          "1621:     limit = Max(inobject, kMaxFastProperties);",
          "1622:   } else {",
          "1623:     limit = Max(inobject, kFastPropertiesSoftLimit);",
          "",
          "[Removed Lines]",
          "1619:   if (store_mode == CERTAINLY_NOT_STORE_FROM_KEYED ||",
          "1620:       map()->used_for_prototype()) {",
          "",
          "[Added Lines]",
          "1619:   if (store_mode == CERTAINLY_NOT_STORE_FROM_KEYED) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2982: }",
          "2999: JSFunction* Map::unchecked_constructor() {",
          "3000:   return reinterpret_cast<JSFunction*>(READ_FIELD(this, kConstructorOffset));",
          "3001: }",
          "",
          "[Removed Lines]",
          "2985: void Map::set_used_for_prototype(bool value) {",
          "2986:   if (value) {",
          "2987:     set_bit_field3(bit_field3() | (1 << kUsedForPrototype));",
          "2988:   } else {",
          "2989:     set_bit_field3(bit_field3() & ~(1 << kUsedForPrototype));",
          "2990:   }",
          "2991: }",
          "2994: bool Map::used_for_prototype() {",
          "2995:   return ((1 << kUsedForPrototype) & bit_field3()) != 0;",
          "2996: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/v8/src/objects.cc||deps/v8/src/objects.cc": [
          "File: deps/v8/src/objects.cc -> deps/v8/src/objects.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "7517:   Map* proto_map = map();",
          "7546:   }",
          "7547:   return this;",
          "7548: }",
          "",
          "[Removed Lines]",
          "7518:   if (!proto_map->used_for_prototype()) {",
          "7519:     if (!HasFastProperties()) {",
          "7520:       MaybeObject* new_proto = TransformToFastProperties(0);",
          "7521:       if (new_proto->IsFailure()) return new_proto;",
          "7522:       ASSERT(new_proto == this);",
          "7523:       proto_map = map();",
          "7524:       if (!proto_map->is_shared()) {",
          "7525:         proto_map->set_used_for_prototype(true);",
          "7526:       }",
          "7527:     } else {",
          "7528:       Heap* heap = GetHeap();",
          "7531:       Map* new_map =",
          "7532:           proto_map->GetPrototypeTransition(heap->the_hole_value());",
          "7533:       if (new_map == NULL) {",
          "7534:         MaybeObject* maybe_new_map =",
          "7535:             proto_map->CopyDropTransitions(DescriptorArray::MAY_BE_SHARED);",
          "7536:         if (!maybe_new_map->To<Map>(&new_map)) return maybe_new_map;",
          "7537:         new_map->set_used_for_prototype(true);",
          "7538:         MaybeObject* ok =",
          "7539:             proto_map->PutPrototypeTransition(heap->the_hole_value(),",
          "7540:                                               new_map);",
          "7541:         if (ok->IsFailure()) return ok;",
          "7542:       }",
          "7543:       ASSERT(!proto_map->is_shared() && !new_map->is_shared());",
          "7544:       set_map(new_map);",
          "7545:     }",
          "",
          "[Added Lines]",
          "7518:   if (!HasFastProperties()) {",
          "7519:     MaybeObject* new_proto = TransformToFastProperties(0);",
          "7520:     if (new_proto->IsFailure()) return new_proto;",
          "7521:     ASSERT(new_proto == this);",
          "7522:     proto_map = map();",
          "",
          "---------------"
        ],
        "deps/v8/src/objects.h||deps/v8/src/objects.h": [
          "File: deps/v8/src/objects.h -> deps/v8/src/objects.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4749:   inline void set_is_shared(bool value);",
          "4750:   inline bool is_shared();",
          "4762:   inline void set_is_access_check_needed(bool access_check_needed);",
          "",
          "[Removed Lines]",
          "4757:   inline void set_used_for_prototype(bool value);",
          "4758:   inline bool used_for_prototype();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5043:   static const int kIsShared = 0;",
          "5044:   static const int kFunctionWithPrototype = 1;",
          "5047:   typedef FixedBodyDescriptor<kPointerFieldsBeginOffset,",
          "5048:                               kPointerFieldsEndOffset,",
          "",
          "[Removed Lines]",
          "5045:   static const int kUsedForPrototype = 2;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/v8/test/cctest/test-heap.cc||deps/v8/test/cctest/test-heap.cc": [
          "File: deps/v8/test/cctest/test-heap.cc -> deps/v8/test/cctest/test-heap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1580:               v8::Context::GetCurrent()->Global()->Get(v8_str(\"base\"))));",
          "1587:   HEAP->CollectAllGarbage(Heap::kNoGCFlags);",
          "1589:   CHECK_EQ(transitions, baseObject->map()->NumberOfProtoTransitions());",
          "",
          "[Removed Lines]",
          "1586:   CHECK_EQ(11, baseObject->map()->NumberOfProtoTransitions());",
          "1588:   const int transitions = 11 - 3;",
          "",
          "[Added Lines]",
          "1583:   CHECK_EQ(10, baseObject->map()->NumberOfProtoTransitions());",
          "1585:   const int transitions = 10 - 3;",
          "",
          "---------------"
        ],
        "deps/v8/test/mjsunit/fast-prototype.js||deps/v8/test/mjsunit/fast-prototype.js": [
          "File: deps/v8/test/mjsunit/fast-prototype.js -> deps/v8/test/mjsunit/fast-prototype.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:     assertTrue(%HasFastProperties(proto));",
          "73:     AddProps(proto);",
          "76:   }",
          "77:   if (same_map_as && !add_first) {",
          "78:     assertTrue(%HaveSameMap(same_map_as, proto));",
          "",
          "[Removed Lines]",
          "75:     assertTrue(%HasFastProperties(proto));",
          "",
          "[Added Lines]",
          "75:     assertFalse(%HasFastProperties(proto));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d3d83d7b909d34784b9cb96faa8541542630b9d6",
      "candidate_info": {
        "commit_hash": "d3d83d7b909d34784b9cb96faa8541542630b9d6",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/d3d83d7b909d34784b9cb96faa8541542630b9d6",
        "files": [
          "src/node.cc",
          "test/simple/test-process-hrtime.js"
        ],
        "message": "process: throw a TypeError when anything but an Array is passed to hrtime()\n\nFixes #3664.",
        "before_after_code_files": [
          "src/node.cc||src/node.cc",
          "test/simple/test-process-hrtime.js||test/simple/test-process-hrtime.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1691:   if (args.Length() > 0) {",
          "1693:     Local<Array> inArray = Local<Array>::Cast(args[0]);",
          "1694:     uint64_t seconds = inArray->Get(0)->Uint32Value();",
          "1695:     uint64_t nanos = inArray->Get(1)->Uint32Value();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1693:     if (!args[0]->IsArray()) {",
          "1694:       Local<Value> exception = Exception::TypeError(",
          "1695:           String::New(\"process.hrtime() only accepts an Array tuple.\"));",
          "1696:       return ThrowException(exception);",
          "1697:     }",
          "",
          "---------------"
        ],
        "test/simple/test-process-hrtime.js||test/simple/test-process-hrtime.js": [
          "File: test/simple/test-process-hrtime.js -> test/simple/test-process-hrtime.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "26: var tuple = process.hrtime();",
          "29: validateTuple(tuple);",
          "32: validateTuple(process.hrtime(tuple));",
          "35: assert.throws(function() {",
          "36:   process.hrtime(1);",
          "37: });",
          "39: function validateTuple(tuple) {",
          "40:   assert(Array.isArray(tuple));",
          "41:   assert.equal(2, tuple.length);",
          "42:   tuple.forEach(function (v) {",
          "43:     assert.equal('number', typeof v);",
          "44:     assert(isFinite(v));",
          "45:   });",
          "46: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1fb9cfcdb197c108c1bd80f031c488242d761a1b",
      "candidate_info": {
        "commit_hash": "1fb9cfcdb197c108c1bd80f031c488242d761a1b",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/1fb9cfcdb197c108c1bd80f031c488242d761a1b",
        "files": [
          "deps/v8/src/debug-agent.cc"
        ],
        "message": "v8: debug: fix error handling in SendConnectMessage()\n\nThe old error handling code checked if the return value of Socket::Send() != 0,\nwhich is wrong because Socket::Send() can write less bytes than requested or\nreturn -1 on error.",
        "before_after_code_files": [
          "deps/v8/src/debug-agent.cc||deps/v8/src/debug-agent.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/v8/src/debug-agent.cc||deps/v8/src/debug-agent.cc": [
          "File: deps/v8/src/debug-agent.cc -> deps/v8/src/debug-agent.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "323:                                            const char* embedding_host) {",
          "324:   static const int kBufferSize = 80;",
          "325:   char buffer[kBufferSize];  // Sending buffer.",
          "327:   int len;",
          "330:   len = OS::SNPrintF(Vector<char>(buffer, kBufferSize),",
          "331:                      \"Type: connect\\r\\n\");",
          "335:   len = OS::SNPrintF(Vector<char>(buffer, kBufferSize),",
          "336:                      \"V8-Version: %s\\r\\n\", v8::V8::GetVersion());",
          "340:   len = OS::SNPrintF(Vector<char>(buffer, kBufferSize),",
          "341:                      \"Protocol-Version: 1\\r\\n\");",
          "345:   if (embedding_host != NULL) {",
          "346:     len = OS::SNPrintF(Vector<char>(buffer, kBufferSize),",
          "347:                        \"Embedding-Host: %s\\r\\n\", embedding_host);",
          "350:   }",
          "352:   len = OS::SNPrintF(Vector<char>(buffer, kBufferSize),",
          "353:                      \"%s: 0\\r\\n\", kContentLength);",
          "358:   len = OS::SNPrintF(Vector<char>(buffer, kBufferSize), \"\\r\\n\");",
          "",
          "[Removed Lines]",
          "326:   bool ok;",
          "332:   ok = conn->Send(buffer, len);",
          "333:   if (!ok) return false;",
          "337:   ok = conn->Send(buffer, len);",
          "338:   if (!ok) return false;",
          "342:   ok = conn->Send(buffer, len);",
          "343:   if (!ok) return false;",
          "348:     ok = conn->Send(buffer, len);",
          "349:     if (!ok) return false;",
          "354:   ok = conn->Send(buffer, len);",
          "355:   if (!ok) return false;",
          "359:   ok = conn->Send(buffer, len);",
          "360:   if (!ok) return false;",
          "",
          "[Added Lines]",
          "327:   int r;",
          "332:   r = conn->Send(buffer, len);",
          "333:   if (r != len) return false;",
          "337:   r = conn->Send(buffer, len);",
          "338:   if (r != len) return false;",
          "342:   r = conn->Send(buffer, len);",
          "343:   if (r != len) return false;",
          "348:     r = conn->Send(buffer, len);",
          "349:     if (r != len) return false;",
          "354:   r = conn->Send(buffer, len);",
          "355:   if (r != len) return false;",
          "359:   r = conn->Send(buffer, len);",
          "360:   if (r != len) return false;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f0c5165f81e1e326322619857b16689fe27fc978",
      "candidate_info": {
        "commit_hash": "f0c5165f81e1e326322619857b16689fe27fc978",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/f0c5165f81e1e326322619857b16689fe27fc978",
        "files": [
          "deps/http_parser/.mailmap",
          "deps/http_parser/AUTHORS",
          "deps/http_parser/Makefile",
          "deps/http_parser/README.md",
          "deps/http_parser/http_parser.c",
          "deps/http_parser/http_parser.h",
          "deps/http_parser/test.c"
        ],
        "message": "http_parser: upgrade to 62110ef",
        "before_after_code_files": [
          "deps/http_parser/http_parser.c||deps/http_parser/http_parser.c",
          "deps/http_parser/http_parser.h||deps/http_parser/http_parser.h",
          "deps/http_parser/test.c||deps/http_parser/test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/http_parser/http_parser.c||deps/http_parser/http_parser.c": [
          "File: deps/http_parser/http_parser.c -> deps/http_parser/http_parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include <assert.h>",
          "26: #include <stddef.h>",
          "29: #ifndef MIN",
          "30: # define MIN(a,b) ((a) < (b) ? (a) : (b))",
          "",
          "[Removed Lines]",
          "24: #include <http_parser.h>",
          "",
          "[Added Lines]",
          "24: #include \"http_parser.h\"",
          "27: #include <ctype.h>",
          "28: #include <stdlib.h>",
          "29: #include <string.h>",
          "30: #include <limits.h>",
          "32: #ifndef ULLONG_MAX",
          "34: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: #endif",
          "49: do {                                                                 \\",
          "50:   if (settings->on_##FOR) {                                          \\",
          "51:     if (0 != settings->on_##FOR(parser)) {                           \\",
          "52:       SET_ERRNO(HPE_CB_##FOR);                                       \\",
          "54:     }                                                                \\",
          "55:   }                                                                  \\",
          "56: } while (0)",
          "65: do {                                                                 \\",
          "66:   if (FOR##_mark) {                                                  \\",
          "67:     if (settings->on_##FOR) {                                        \\",
          "72:         SET_ERRNO(HPE_CB_##FOR);                                     \\",
          "74:       }                                                              \\",
          "75:     }                                                                \\",
          "76:     FOR##_mark = NULL;                                               \\",
          "77:   }                                                                  \\",
          "78: } while (0)",
          "81: #define PROXY_CONNECTION \"proxy-connection\"",
          "",
          "[Removed Lines]",
          "48: #define CALLBACK2(FOR)                                               \\",
          "53:       return (p - data);                                             \\",
          "59: #define MARK(FOR)                                                    \\",
          "60: do {                                                                 \\",
          "61:   FOR##_mark = p;                                                    \\",
          "62: } while (0)",
          "64: #define CALLBACK(FOR)                                                \\",
          "68:       if (0 != settings->on_##FOR(parser,                            \\",
          "69:                                  FOR##_mark,                         \\",
          "70:                                  p - FOR##_mark))                    \\",
          "71:       {                                                              \\",
          "73:         return (p - data);                                           \\",
          "",
          "[Added Lines]",
          "56: #define CALLBACK_NOTIFY_(FOR, ER)                                    \\",
          "58:   assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \\",
          "59:                                                                      \\",
          "63:     }                                                                \\",
          "64:                                                                      \\",
          "66:     if (HTTP_PARSER_ERRNO(parser) != HPE_OK) {                       \\",
          "67:       return (ER);                                                   \\",
          "73: #define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)",
          "76: #define CALLBACK_NOTIFY_NOADVANCE(FOR)  CALLBACK_NOTIFY_(FOR, p - data)",
          "79: #define CALLBACK_DATA_(FOR, LEN, ER)                                 \\",
          "81:   assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \\",
          "82:                                                                      \\",
          "85:       if (0 != settings->on_##FOR(parser, FOR##_mark, (LEN))) {      \\",
          "87:       }                                                              \\",
          "88:                                                                      \\",
          "90:       if (HTTP_PARSER_ERRNO(parser) != HPE_OK) {                     \\",
          "91:         return (ER);                                                 \\",
          "99: #define CALLBACK_DATA(FOR)                                           \\",
          "100:     CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)",
          "103: #define CALLBACK_DATA_NOADVANCE(FOR)                                 \\",
          "104:     CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)",
          "107: #define MARK(FOR)                                                    \\",
          "108: do {                                                                 \\",
          "109:   if (!FOR##_mark) {                                                 \\",
          "110:     FOR##_mark = p;                                                  \\",
          "111:   }                                                                  \\",
          "112: } while (0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "113:   , \"SUBSCRIBE\"",
          "114:   , \"UNSUBSCRIBE\"",
          "115:   , \"PATCH\"",
          "116:   };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150:   , \"PURGE\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "134:         0,       0,       0,       0,       0,       0,       0,       0,",
          "140:        '0',     '1',     '2',     '3',     '4',     '5',     '6',     '7',",
          "",
          "[Removed Lines]",
          "136:        ' ',      '!',     '\"',     '#',     '$',     '%',     '&',    '\\'',",
          "138:         0,       0,      '*',     '+',      0,      '-',     '.',     '/',",
          "",
          "[Added Lines]",
          "171:         0,      '!',      0,      '#',     '$',     '%',     '&',    '\\'',",
          "173:         0,       0,      '*',     '+',      0,      '-',     '.',      0,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "156:        'p',     'q',     'r',     's',     't',     'u',     'v',     'w',",
          "161: static const int8_t unhex[256] =",
          "",
          "[Removed Lines]",
          "158:        'x',     'y',     'z',      0,      '|',     '}',     '~',       0 };",
          "",
          "[Added Lines]",
          "193:        'x',     'y',     'z',      0,      '|',      0,      '~',       0 };",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "231:   , s_req_schema",
          "232:   , s_req_schema_slash",
          "233:   , s_req_schema_slash_slash",
          "234:   , s_req_host",
          "235:   , s_req_port",
          "236:   , s_req_path",
          "237:   , s_req_query_string_start",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "269:   , s_req_host_start",
          "270:   , s_req_host_v6_start",
          "271:   , s_req_host_v6",
          "272:   , s_req_host_v6_end",
          "274:   , s_req_port_start",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "261:   , s_chunk_size",
          "262:   , s_chunk_parameters",
          "263:   , s_chunk_size_almost_done",
          "265:   , s_headers_almost_done",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "306:   , s_headers_done",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "275:   , s_body_identity",
          "276:   , s_body_identity_eof",
          "277:   };",
          "283: enum header_states",
          "",
          "[Removed Lines]",
          "280: #define PARSING_HEADER(state) (state <= s_headers_almost_done)",
          "",
          "[Added Lines]",
          "320:   , s_message_done",
          "324: #define PARSING_HEADER(state) (state <= s_headers_done)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "311: #define CR                  '\\r'",
          "312: #define LF                  '\\n'",
          "313: #define LOWER(c)            (unsigned char)(c | 0x20)",
          "315: #define IS_ALPHA(c)         (LOWER(c) >= 'a' && LOWER(c) <= 'z')",
          "316: #define IS_NUM(c)           ((c) >= '0' && (c) <= '9')",
          "317: #define IS_ALPHANUM(c)      (IS_ALPHA(c) || IS_NUM(c))",
          "319: #if HTTP_PARSER_STRICT",
          "320: #define IS_URL_CHAR(c)      (normal_url_char[(unsigned char) (c)])",
          "321: #define IS_HOST_CHAR(c)     (IS_ALPHANUM(c) || (c) == '.' || (c) == '-')",
          "322: #else",
          "323: #define IS_URL_CHAR(c)                                                         \\",
          "324:   (normal_url_char[(unsigned char) (c)] || ((c) & 0x80))",
          "325: #define IS_HOST_CHAR(c)                                                        \\",
          "",
          "[Removed Lines]",
          "314: #define TOKEN(c)            (tokens[(unsigned char)c])",
          "",
          "[Added Lines]",
          "361: #define IS_HEX(c)           (IS_NUM(c) || (LOWER(c) >= 'a' && LOWER(c) <= 'f'))",
          "364: #define TOKEN(c)            (tokens[(unsigned char)c])",
          "368: #define TOKEN(c)            ((c == ' ') ? ' ' : tokens[(unsigned char)c])",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "355: };",
          "356: #undef HTTP_STRERROR_GEN",
          "359: size_t http_parser_execute (http_parser *parser,",
          "360:                             const http_parser_settings *settings,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "404: int http_message_needs_eof(http_parser *parser);",
          "417: static enum state",
          "418: parse_url_char(enum state s, const char ch)",
          "419: {",
          "420:   assert(!isspace(ch));",
          "422:   switch (s) {",
          "423:     case s_req_spaces_before_url:",
          "428:       if (ch == '/' || ch == '*') {",
          "429:         return s_req_path;",
          "430:       }",
          "432:       if (IS_ALPHA(ch)) {",
          "433:         return s_req_schema;",
          "434:       }",
          "436:       break;",
          "438:     case s_req_schema:",
          "439:       if (IS_ALPHA(ch)) {",
          "440:         return s;",
          "441:       }",
          "443:       if (ch == ':') {",
          "444:         return s_req_schema_slash;",
          "445:       }",
          "447:       break;",
          "449:     case s_req_schema_slash:",
          "450:       if (ch == '/') {",
          "451:         return s_req_schema_slash_slash;",
          "452:       }",
          "454:       break;",
          "456:     case s_req_schema_slash_slash:",
          "457:       if (ch == '/') {",
          "458:         return s_req_host_start;",
          "459:       }",
          "461:       break;",
          "463:     case s_req_host_start:",
          "464:       if (ch == '[') {",
          "465:         return s_req_host_v6_start;",
          "466:       }",
          "468:       if (IS_HOST_CHAR(ch)) {",
          "469:         return s_req_host;",
          "470:       }",
          "472:       break;",
          "474:     case s_req_host:",
          "475:       if (IS_HOST_CHAR(ch)) {",
          "476:         return s_req_host;",
          "477:       }",
          "480:     case s_req_host_v6_end:",
          "481:       switch (ch) {",
          "482:         case ':':",
          "483:           return s_req_port_start;",
          "485:         case '/':",
          "486:           return s_req_path;",
          "488:         case '?':",
          "489:           return s_req_query_string_start;",
          "490:       }",
          "492:       break;",
          "494:     case s_req_host_v6:",
          "495:       if (ch == ']') {",
          "496:         return s_req_host_v6_end;",
          "497:       }",
          "500:     case s_req_host_v6_start:",
          "501:       if (IS_HEX(ch) || ch == ':') {",
          "502:         return s_req_host_v6;",
          "503:       }",
          "504:       break;",
          "506:     case s_req_port:",
          "507:       switch (ch) {",
          "508:         case '/':",
          "509:           return s_req_path;",
          "511:         case '?':",
          "512:           return s_req_query_string_start;",
          "513:       }",
          "516:     case s_req_port_start:",
          "517:       if (IS_NUM(ch)) {",
          "518:         return s_req_port;",
          "519:       }",
          "521:       break;",
          "523:     case s_req_path:",
          "524:       if (IS_URL_CHAR(ch)) {",
          "525:         return s;",
          "526:       }",
          "528:       switch (ch) {",
          "529:         case '?':",
          "530:           return s_req_query_string_start;",
          "532:         case '#':",
          "533:           return s_req_fragment_start;",
          "534:       }",
          "536:       break;",
          "538:     case s_req_query_string_start:",
          "539:     case s_req_query_string:",
          "540:       if (IS_URL_CHAR(ch)) {",
          "541:         return s_req_query_string;",
          "542:       }",
          "544:       switch (ch) {",
          "545:         case '?':",
          "547:           return s_req_query_string;",
          "549:         case '#':",
          "550:           return s_req_fragment_start;",
          "551:       }",
          "553:       break;",
          "555:     case s_req_fragment_start:",
          "556:       if (IS_URL_CHAR(ch)) {",
          "557:         return s_req_fragment;",
          "558:       }",
          "560:       switch (ch) {",
          "561:         case '?':",
          "562:           return s_req_fragment;",
          "564:         case '#':",
          "565:           return s;",
          "566:       }",
          "568:       break;",
          "570:     case s_req_fragment:",
          "571:       if (IS_URL_CHAR(ch)) {",
          "572:         return s;",
          "573:       }",
          "575:       switch (ch) {",
          "576:         case '?':",
          "577:         case '#':",
          "578:           return s;",
          "579:       }",
          "581:       break;",
          "583:     default:",
          "584:       break;",
          "585:   }",
          "588:   return s_dead;",
          "589: }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "363: {",
          "364:   char c, ch;",
          "365:   int8_t unhex_val;",
          "376:   const char *header_field_mark = 0;",
          "377:   const char *header_value_mark = 0;",
          "378:   const char *url_mark = 0;",
          "381:   if (HTTP_PARSER_ERRNO(parser) != HPE_OK) {",
          "382:     return 0;",
          "383:   }",
          "388:   if (len == 0) {",
          "390:       case s_body_identity_eof:",
          "392:         return 0;",
          "394:       case s_dead:",
          "",
          "[Removed Lines]",
          "366:   const char *p = data, *pe;",
          "367:   int64_t to_read;",
          "368:   enum state state;",
          "369:   enum header_states header_state;",
          "370:   uint64_t index = parser->index;",
          "371:   uint64_t nread = parser->nread;",
          "374:      variable, saving stack space, but it seems more clear to have them",
          "385:   state = (enum state) parser->state;",
          "386:   header_state = (enum header_states) parser->header_state;",
          "389:     switch (state) {",
          "391:         CALLBACK2(message_complete);",
          "",
          "[Added Lines]",
          "598:   const char *p = data;",
          "602:   const char *body_mark = 0;",
          "610:     switch (parser->state) {",
          "615:         CALLBACK_NOTIFY_NOADVANCE(message_complete);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "404:   }",
          "408:     header_field_mark = data;",
          "410:     header_value_mark = data;",
          "416:     url_mark = data;",
          "419:     ch = *p;",
          "425:         SET_ERRNO(HPE_HEADER_OVERFLOW);",
          "426:         goto error;",
          "427:       }",
          "428:     }",
          "432:       case s_dead:",
          "436:         SET_ERRNO(HPE_CLOSED_CONNECTION);",
          "437:         goto error;",
          "",
          "[Removed Lines]",
          "407:   if (state == s_header_field)",
          "409:   if (state == s_header_value)",
          "411:   if (state == s_req_path || state == s_req_schema || state == s_req_schema_slash",
          "412:       || state == s_req_schema_slash_slash || state == s_req_port",
          "413:       || state == s_req_query_string_start || state == s_req_query_string",
          "414:       || state == s_req_host",
          "415:       || state == s_req_fragment_start || state == s_req_fragment)",
          "418:   for (p=data, pe=data+len; p != pe; p++) {",
          "421:     if (PARSING_HEADER(state)) {",
          "422:       ++nread;",
          "424:       if (nread > HTTP_MAX_HEADER_SIZE) {",
          "430:     switch (state) {",
          "",
          "[Added Lines]",
          "631:   if (parser->state == s_header_field)",
          "633:   if (parser->state == s_header_value)",
          "635:   switch (parser->state) {",
          "636:   case s_req_path:",
          "637:   case s_req_schema:",
          "638:   case s_req_schema_slash:",
          "639:   case s_req_schema_slash_slash:",
          "640:   case s_req_host_start:",
          "641:   case s_req_host_v6_start:",
          "642:   case s_req_host_v6:",
          "643:   case s_req_host_v6_end:",
          "644:   case s_req_host:",
          "645:   case s_req_port_start:",
          "646:   case s_req_port:",
          "647:   case s_req_query_string_start:",
          "648:   case s_req_query_string:",
          "649:   case s_req_fragment_start:",
          "650:   case s_req_fragment:",
          "652:     break;",
          "653:   }",
          "655:   for (p=data; p != data + len; p++) {",
          "658:     if (PARSING_HEADER(parser->state)) {",
          "659:       ++parser->nread;",
          "661:       if (parser->nread > HTTP_MAX_HEADER_SIZE) {",
          "667:     reexecute_byte:",
          "668:     switch (parser->state) {",
          "674:         if (ch == CR || ch == LF)",
          "675:           break;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "441:         if (ch == CR || ch == LF)",
          "442:           break;",
          "443:         parser->flags = 0;",
          "451:           parser->type = HTTP_REQUEST;",
          "453:         }",
          "454:         break;",
          "455:       }",
          "457:       case s_res_or_resp_H:",
          "458:         if (ch == 'T') {",
          "459:           parser->type = HTTP_RESPONSE;",
          "461:         } else {",
          "462:           if (ch != 'E') {",
          "463:             SET_ERRNO(HPE_INVALID_CONSTANT);",
          "",
          "[Removed Lines]",
          "444:         parser->content_length = -1;",
          "446:         CALLBACK2(message_begin);",
          "448:         if (ch == 'H')",
          "449:           state = s_res_or_resp_H;",
          "450:         else {",
          "452:           goto start_req_method_assign;",
          "460:           state = s_res_HT;",
          "",
          "[Added Lines]",
          "685:         parser->content_length = ULLONG_MAX;",
          "687:         if (ch == 'H') {",
          "688:           parser->state = s_res_or_resp_H;",
          "690:           CALLBACK_NOTIFY(message_begin);",
          "691:         } else {",
          "693:           parser->state = s_start_req;",
          "694:           goto reexecute_byte;",
          "703:           parser->state = s_res_HT;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "467:           parser->type = HTTP_REQUEST;",
          "468:           parser->method = HTTP_HEAD;",
          "471:         }",
          "472:         break;",
          "474:       case s_start_res:",
          "475:       {",
          "476:         parser->flags = 0;",
          "481:         switch (ch) {",
          "482:           case 'H':",
          "484:             break;",
          "486:           case CR:",
          "",
          "[Removed Lines]",
          "469:           index = 2;",
          "470:           state = s_req_method;",
          "477:         parser->content_length = -1;",
          "479:         CALLBACK2(message_begin);",
          "483:             state = s_res_H;",
          "",
          "[Added Lines]",
          "712:           parser->index = 2;",
          "713:           parser->state = s_req_method;",
          "720:         parser->content_length = ULLONG_MAX;",
          "724:             parser->state = s_res_H;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "491:             SET_ERRNO(HPE_INVALID_CONSTANT);",
          "492:             goto error;",
          "493:         }",
          "494:         break;",
          "495:       }",
          "497:       case s_res_H:",
          "498:         STRICT_CHECK(ch != 'T');",
          "500:         break;",
          "502:       case s_res_HT:",
          "503:         STRICT_CHECK(ch != 'T');",
          "505:         break;",
          "507:       case s_res_HTT:",
          "508:         STRICT_CHECK(ch != 'P');",
          "510:         break;",
          "512:       case s_res_HTTP:",
          "513:         STRICT_CHECK(ch != '/');",
          "515:         break;",
          "517:       case s_res_first_http_major:",
          "",
          "[Removed Lines]",
          "499:         state = s_res_HT;",
          "504:         state = s_res_HTT;",
          "509:         state = s_res_HTTP;",
          "514:         state = s_res_first_http_major;",
          "",
          "[Added Lines]",
          "736:         CALLBACK_NOTIFY(message_begin);",
          "742:         parser->state = s_res_HT;",
          "747:         parser->state = s_res_HTT;",
          "752:         parser->state = s_res_HTTP;",
          "757:         parser->state = s_res_first_http_major;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "521:         }",
          "523:         parser->http_major = ch - '0';",
          "525:         break;",
          "528:       case s_res_http_major:",
          "529:       {",
          "530:         if (ch == '.') {",
          "532:           break;",
          "533:         }",
          "",
          "[Removed Lines]",
          "524:         state = s_res_http_major;",
          "531:           state = s_res_first_http_minor;",
          "",
          "[Added Lines]",
          "767:         parser->state = s_res_http_major;",
          "774:           parser->state = s_res_first_http_minor;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "556:         }",
          "558:         parser->http_minor = ch - '0';",
          "560:         break;",
          "563:       case s_res_http_minor:",
          "564:       {",
          "565:         if (ch == ' ') {",
          "567:           break;",
          "568:         }",
          "",
          "[Removed Lines]",
          "559:         state = s_res_http_minor;",
          "566:           state = s_res_first_status_code;",
          "",
          "[Added Lines]",
          "802:         parser->state = s_res_http_minor;",
          "809:           parser->state = s_res_first_status_code;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "594:           goto error;",
          "595:         }",
          "596:         parser->status_code = ch - '0';",
          "598:         break;",
          "599:       }",
          "",
          "[Removed Lines]",
          "597:         state = s_res_status_code;",
          "",
          "[Added Lines]",
          "840:         parser->state = s_res_status_code;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "603:         if (!IS_NUM(ch)) {",
          "604:           switch (ch) {",
          "605:             case ' ':",
          "607:               break;",
          "608:             case CR:",
          "610:               break;",
          "611:             case LF:",
          "613:               break;",
          "614:             default:",
          "615:               SET_ERRNO(HPE_INVALID_STATUS);",
          "",
          "[Removed Lines]",
          "606:               state = s_res_status;",
          "609:               state = s_res_line_almost_done;",
          "612:               state = s_header_field_start;",
          "",
          "[Added Lines]",
          "849:               parser->state = s_res_status;",
          "852:               parser->state = s_res_line_almost_done;",
          "855:               parser->state = s_header_field_start;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "635:         if (ch == CR) {",
          "637:           break;",
          "638:         }",
          "640:         if (ch == LF) {",
          "642:           break;",
          "643:         }",
          "644:         break;",
          "646:       case s_res_line_almost_done:",
          "647:         STRICT_CHECK(ch != LF);",
          "649:         break;",
          "651:       case s_start_req:",
          "",
          "[Removed Lines]",
          "636:           state = s_res_line_almost_done;",
          "641:           state = s_header_field_start;",
          "648:         state = s_header_field_start;",
          "",
          "[Added Lines]",
          "879:           parser->state = s_res_line_almost_done;",
          "884:           parser->state = s_header_field_start;",
          "891:         parser->state = s_header_field_start;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "653:         if (ch == CR || ch == LF)",
          "654:           break;",
          "655:         parser->flags = 0;",
          "660:         if (!IS_ALPHA(ch)) {",
          "661:           SET_ERRNO(HPE_INVALID_METHOD);",
          "662:           goto error;",
          "663:         }",
          "666:         parser->method = (enum http_method) 0;",
          "668:         switch (ch) {",
          "669:           case 'C': parser->method = HTTP_CONNECT; /* or COPY, CHECKOUT */ break;",
          "670:           case 'D': parser->method = HTTP_DELETE; break;",
          "",
          "[Removed Lines]",
          "656:         parser->content_length = -1;",
          "658:         CALLBACK2(message_begin);",
          "665:       start_req_method_assign:",
          "667:         index = 1;",
          "",
          "[Added Lines]",
          "899:         parser->content_length = ULLONG_MAX;",
          "907:         parser->index = 1;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "685:             SET_ERRNO(HPE_INVALID_METHOD);",
          "686:             goto error;",
          "687:         }",
          "689:         break;",
          "690:       }",
          "",
          "[Removed Lines]",
          "688:         state = s_req_method;",
          "",
          "[Added Lines]",
          "928:         parser->state = s_req_method;",
          "930:         CALLBACK_NOTIFY(message_begin);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "698:         }",
          "700:         matcher = method_strings[parser->method];",
          "705:         } else if (parser->method == HTTP_CONNECT) {",
          "707:             parser->method = HTTP_CHECKOUT;",
          "709:             parser->method = HTTP_COPY;",
          "710:           } else {",
          "711:             goto error;",
          "712:           }",
          "713:         } else if (parser->method == HTTP_MKCOL) {",
          "715:             parser->method = HTTP_MOVE;",
          "717:             parser->method = HTTP_MERGE;",
          "719:             parser->method = HTTP_MSEARCH;",
          "721:             parser->method = HTTP_MKACTIVITY;",
          "722:           } else {",
          "723:             goto error;",
          "724:           }",
          "726:           if (ch == 'R') {",
          "728:           } else if (ch == 'U') {",
          "730:           } else if (ch == 'A') {",
          "731:             parser->method = HTTP_PATCH;",
          "732:           } else {",
          "733:             goto error;",
          "734:           }",
          "738:           parser->method = HTTP_PROPPATCH;",
          "739:         } else {",
          "740:           SET_ERRNO(HPE_INVALID_METHOD);",
          "741:           goto error;",
          "742:         }",
          "745:         break;",
          "746:       }",
          "747:       case s_req_spaces_before_url:",
          "748:       {",
          "749:         if (ch == ' ') break;",
          "755:         }",
          "765:         }",
          "769:       }",
          "771:       case s_req_schema:",
          "784:       case s_req_schema_slash:",
          "789:       case s_req_schema_slash_slash:",
          "823:       {",
          "825:         switch (ch) {",
          "829:           case ' ':",
          "856:           case CR:",
          "862:           case LF:",
          "876:             goto error;",
          "910:           default:",
          "913:         }",
          "948:         break;",
          "949:       }",
          "951:       case s_req_fragment_start:",
          "987:       case s_req_fragment:",
          "988:       {",
          "991:         switch (ch) {",
          "992:           case ' ':",
          "995:             break;",
          "996:           case CR:",
          "1002:           case LF:",
          "1004:             parser->http_major = 0;",
          "1005:             parser->http_minor = 9;",
          "1010:             break;",
          "1011:           default:",
          "1014:         }",
          "1015:         break;",
          "1016:       }",
          "",
          "[Removed Lines]",
          "701:         if (ch == ' ' && matcher[index] == '\\0') {",
          "702:           state = s_req_spaces_before_url;",
          "703:         } else if (ch == matcher[index]) {",
          "706:           if (index == 1 && ch == 'H') {",
          "708:           } else if (index == 2  && ch == 'P') {",
          "714:           if (index == 1 && ch == 'O') {",
          "716:           } else if (index == 1 && ch == 'E') {",
          "718:           } else if (index == 1 && ch == '-') {",
          "720:           } else if (index == 2 && ch == 'A') {",
          "725:         } else if (index == 1 && parser->method == HTTP_POST) {",
          "729:             parser->method = HTTP_PUT;",
          "735:         } else if (index == 2 && parser->method == HTTP_UNLOCK && ch == 'S') {",
          "736:           parser->method = HTTP_UNSUBSCRIBE;",
          "737:         } else if (index == 4 && parser->method == HTTP_PROPFIND && ch == 'P') {",
          "744:         ++index;",
          "751:         if (ch == '/' || ch == '*') {",
          "752:           MARK(url);",
          "753:           state = s_req_path;",
          "754:           break;",
          "761:         if (IS_ALPHA(ch) || (parser->method == HTTP_CONNECT && IS_NUM(ch))) {",
          "762:           MARK(url);",
          "763:           state = (parser->method == HTTP_CONNECT) ? s_req_host : s_req_schema;",
          "764:           break;",
          "767:         SET_ERRNO(HPE_INVALID_URL);",
          "768:         goto error;",
          "772:       {",
          "773:         if (IS_ALPHA(ch)) break;",
          "775:         if (ch == ':') {",
          "776:           state = s_req_schema_slash;",
          "777:           break;",
          "778:         }",
          "780:         SET_ERRNO(HPE_INVALID_URL);",
          "781:         goto error;",
          "782:       }",
          "785:         STRICT_CHECK(ch != '/');",
          "786:         state = s_req_schema_slash_slash;",
          "787:         break;",
          "790:         STRICT_CHECK(ch != '/');",
          "791:         state = s_req_host;",
          "792:         break;",
          "794:       case s_req_host:",
          "795:       {",
          "796:         if (IS_HOST_CHAR(ch)) break;",
          "797:         switch (ch) {",
          "798:           case ':':",
          "799:             state = s_req_port;",
          "800:             break;",
          "801:           case '/':",
          "802:             state = s_req_path;",
          "803:             break;",
          "804:           case ' ':",
          "809:             CALLBACK(url);",
          "810:             state = s_req_http_start;",
          "811:             break;",
          "812:           case '?':",
          "813:             state = s_req_query_string_start;",
          "814:             break;",
          "815:           default:",
          "816:             SET_ERRNO(HPE_INVALID_HOST);",
          "817:             goto error;",
          "818:         }",
          "819:         break;",
          "820:       }",
          "822:       case s_req_port:",
          "824:         if (IS_NUM(ch)) break;",
          "826:           case '/':",
          "827:             state = s_req_path;",
          "828:             break;",
          "834:             CALLBACK(url);",
          "835:             state = s_req_http_start;",
          "836:             break;",
          "837:           case '?':",
          "838:             state = s_req_query_string_start;",
          "839:             break;",
          "840:           default:",
          "841:             SET_ERRNO(HPE_INVALID_PORT);",
          "842:             goto error;",
          "843:         }",
          "844:         break;",
          "845:       }",
          "847:       case s_req_path:",
          "848:       {",
          "849:         if (IS_URL_CHAR(ch)) break;",
          "851:         switch (ch) {",
          "852:           case ' ':",
          "853:             CALLBACK(url);",
          "854:             state = s_req_http_start;",
          "855:             break;",
          "857:             CALLBACK(url);",
          "858:             parser->http_major = 0;",
          "859:             parser->http_minor = 9;",
          "860:             state = s_req_line_almost_done;",
          "861:             break;",
          "863:             CALLBACK(url);",
          "864:             parser->http_major = 0;",
          "865:             parser->http_minor = 9;",
          "866:             state = s_header_field_start;",
          "867:             break;",
          "868:           case '?':",
          "869:             state = s_req_query_string_start;",
          "870:             break;",
          "871:           case '#':",
          "872:             state = s_req_fragment_start;",
          "873:             break;",
          "874:           default:",
          "875:             SET_ERRNO(HPE_INVALID_PATH);",
          "877:         }",
          "878:         break;",
          "879:       }",
          "881:       case s_req_query_string_start:",
          "882:       {",
          "883:         if (IS_URL_CHAR(ch)) {",
          "884:           state = s_req_query_string;",
          "885:           break;",
          "886:         }",
          "888:         switch (ch) {",
          "889:           case '?':",
          "891:           case ' ':",
          "892:             CALLBACK(url);",
          "893:             state = s_req_http_start;",
          "894:             break;",
          "895:           case CR:",
          "896:             CALLBACK(url);",
          "897:             parser->http_major = 0;",
          "898:             parser->http_minor = 9;",
          "899:             state = s_req_line_almost_done;",
          "900:             break;",
          "901:           case LF:",
          "902:             CALLBACK(url);",
          "903:             parser->http_major = 0;",
          "904:             parser->http_minor = 9;",
          "905:             state = s_header_field_start;",
          "906:             break;",
          "907:           case '#':",
          "908:             state = s_req_fragment_start;",
          "909:             break;",
          "911:             SET_ERRNO(HPE_INVALID_QUERY_STRING);",
          "912:             goto error;",
          "914:         break;",
          "915:       }",
          "917:       case s_req_query_string:",
          "918:       {",
          "919:         if (IS_URL_CHAR(ch)) break;",
          "921:         switch (ch) {",
          "922:           case '?':",
          "924:             break;",
          "925:           case ' ':",
          "926:             CALLBACK(url);",
          "927:             state = s_req_http_start;",
          "928:             break;",
          "929:           case CR:",
          "930:             CALLBACK(url);",
          "931:             parser->http_major = 0;",
          "932:             parser->http_minor = 9;",
          "933:             state = s_req_line_almost_done;",
          "934:             break;",
          "935:           case LF:",
          "936:             CALLBACK(url);",
          "937:             parser->http_major = 0;",
          "938:             parser->http_minor = 9;",
          "939:             state = s_header_field_start;",
          "940:             break;",
          "941:           case '#':",
          "942:             state = s_req_fragment_start;",
          "943:             break;",
          "944:           default:",
          "945:             SET_ERRNO(HPE_INVALID_QUERY_STRING);",
          "946:             goto error;",
          "947:         }",
          "952:       {",
          "953:         if (IS_URL_CHAR(ch)) {",
          "954:           state = s_req_fragment;",
          "955:           break;",
          "956:         }",
          "958:         switch (ch) {",
          "959:           case ' ':",
          "960:             CALLBACK(url);",
          "961:             state = s_req_http_start;",
          "962:             break;",
          "963:           case CR:",
          "964:             CALLBACK(url);",
          "965:             parser->http_major = 0;",
          "966:             parser->http_minor = 9;",
          "967:             state = s_req_line_almost_done;",
          "968:             break;",
          "969:           case LF:",
          "970:             CALLBACK(url);",
          "971:             parser->http_major = 0;",
          "972:             parser->http_minor = 9;",
          "973:             state = s_header_field_start;",
          "974:             break;",
          "975:           case '?':",
          "976:             state = s_req_fragment;",
          "977:             break;",
          "978:           case '#':",
          "979:             break;",
          "980:           default:",
          "981:             SET_ERRNO(HPE_INVALID_FRAGMENT);",
          "982:             goto error;",
          "983:         }",
          "984:         break;",
          "985:       }",
          "989:         if (IS_URL_CHAR(ch)) break;",
          "993:             CALLBACK(url);",
          "994:             state = s_req_http_start;",
          "997:             CALLBACK(url);",
          "998:             parser->http_major = 0;",
          "999:             parser->http_minor = 9;",
          "1000:             state = s_req_line_almost_done;",
          "1001:             break;",
          "1003:             CALLBACK(url);",
          "1006:             state = s_header_field_start;",
          "1007:             break;",
          "1008:           case '?':",
          "1009:           case '#':",
          "1012:             SET_ERRNO(HPE_INVALID_FRAGMENT);",
          "1013:             goto error;",
          "",
          "[Added Lines]",
          "944:         if (ch == ' ' && matcher[parser->index] == '\\0') {",
          "945:           parser->state = s_req_spaces_before_url;",
          "946:         } else if (ch == matcher[parser->index]) {",
          "949:           if (parser->index == 1 && ch == 'H') {",
          "951:           } else if (parser->index == 2  && ch == 'P') {",
          "957:           if (parser->index == 1 && ch == 'O') {",
          "959:           } else if (parser->index == 1 && ch == 'E') {",
          "961:           } else if (parser->index == 1 && ch == '-') {",
          "963:           } else if (parser->index == 2 && ch == 'A') {",
          "968:         } else if (parser->index == 1 && parser->method == HTTP_POST) {",
          "978:         } else if (parser->index == 2) {",
          "979:           if (parser->method == HTTP_PUT) {",
          "980:             if (ch == 'R') parser->method = HTTP_PURGE;",
          "981:           } else if (parser->method == HTTP_UNLOCK) {",
          "982:             if (ch == 'S') parser->method = HTTP_UNSUBSCRIBE;",
          "983:           }",
          "984:         } else if (parser->index == 4 && parser->method == HTTP_PROPFIND && ch == 'P') {",
          "991:         ++parser->index;",
          "999:         MARK(url);",
          "1000:         if (parser->method == HTTP_CONNECT) {",
          "1001:           parser->state = s_req_host_start;",
          "1004:         parser->state = parse_url_char((enum state)parser->state, ch);",
          "1005:         if (parser->state == s_dead) {",
          "1006:           SET_ERRNO(HPE_INVALID_URL);",
          "1007:           goto error;",
          "1010:         break;",
          "1016:       case s_req_host_start:",
          "1017:       case s_req_host_v6_start:",
          "1018:       case s_req_host_v6:",
          "1019:       case s_req_port_start:",
          "1026:             SET_ERRNO(HPE_INVALID_URL);",
          "1029:             parser->state = parse_url_char((enum state)parser->state, ch);",
          "1030:             if (parser->state == s_dead) {",
          "1031:               SET_ERRNO(HPE_INVALID_URL);",
          "1032:               goto error;",
          "1033:             }",
          "1039:       case s_req_host:",
          "1040:       case s_req_host_v6_end:",
          "1041:       case s_req_port:",
          "1042:       case s_req_path:",
          "1043:       case s_req_query_string_start:",
          "1044:       case s_req_query_string:",
          "1050:             parser->state = s_req_http_start;",
          "1051:             CALLBACK_DATA(url);",
          "1057:             parser->state = (ch == CR) ?",
          "1058:               s_req_line_almost_done :",
          "1059:               s_header_field_start;",
          "1060:             CALLBACK_DATA(url);",
          "1063:             parser->state = parse_url_char((enum state)parser->state, ch);",
          "1064:             if (parser->state == s_dead) {",
          "1065:               SET_ERRNO(HPE_INVALID_URL);",
          "1066:               goto error;",
          "1067:             }",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1018:       case s_req_http_start:",
          "1019:         switch (ch) {",
          "1020:           case 'H':",
          "1022:             break;",
          "1023:           case ' ':",
          "1024:             break;",
          "",
          "[Removed Lines]",
          "1021:             state = s_req_http_H;",
          "",
          "[Added Lines]",
          "1075:             parser->state = s_req_http_H;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1031:       case s_req_http_H:",
          "1032:         STRICT_CHECK(ch != 'T');",
          "1034:         break;",
          "1036:       case s_req_http_HT:",
          "1037:         STRICT_CHECK(ch != 'T');",
          "1039:         break;",
          "1041:       case s_req_http_HTT:",
          "1042:         STRICT_CHECK(ch != 'P');",
          "1044:         break;",
          "1046:       case s_req_http_HTTP:",
          "1047:         STRICT_CHECK(ch != '/');",
          "1049:         break;",
          "",
          "[Removed Lines]",
          "1033:         state = s_req_http_HT;",
          "1038:         state = s_req_http_HTT;",
          "1043:         state = s_req_http_HTTP;",
          "1048:         state = s_req_first_http_major;",
          "",
          "[Added Lines]",
          "1087:         parser->state = s_req_http_HT;",
          "1092:         parser->state = s_req_http_HTT;",
          "1097:         parser->state = s_req_http_HTTP;",
          "1102:         parser->state = s_req_first_http_major;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1056:         }",
          "1058:         parser->http_major = ch - '0';",
          "1060:         break;",
          "1063:       case s_req_http_major:",
          "1064:       {",
          "1065:         if (ch == '.') {",
          "1067:           break;",
          "1068:         }",
          "",
          "[Removed Lines]",
          "1059:         state = s_req_http_major;",
          "1066:           state = s_req_first_http_minor;",
          "",
          "[Added Lines]",
          "1113:         parser->state = s_req_http_major;",
          "1120:           parser->state = s_req_first_http_minor;",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1091:         }",
          "1093:         parser->http_minor = ch - '0';",
          "1095:         break;",
          "1098:       case s_req_http_minor:",
          "1099:       {",
          "1100:         if (ch == CR) {",
          "1102:           break;",
          "1103:         }",
          "1105:         if (ch == LF) {",
          "1107:           break;",
          "1108:         }",
          "",
          "[Removed Lines]",
          "1094:         state = s_req_http_minor;",
          "1101:           state = s_req_line_almost_done;",
          "1106:           state = s_header_field_start;",
          "",
          "[Added Lines]",
          "1148:         parser->state = s_req_http_minor;",
          "1155:           parser->state = s_req_line_almost_done;",
          "1160:           parser->state = s_header_field_start;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1133:           goto error;",
          "1134:         }",
          "1137:         break;",
          "1138:       }",
          "1140:       case s_header_field_start:",
          "1142:       {",
          "1143:         if (ch == CR) {",
          "1145:           break;",
          "1146:         }",
          "1148:         if (ch == LF) {",
          "1153:         }",
          "1155:         c = TOKEN(ch);",
          "",
          "[Removed Lines]",
          "1136:         state = s_header_field_start;",
          "1141:       header_field_start:",
          "1144:           state = s_headers_almost_done;",
          "1151:           state = s_headers_almost_done;",
          "1152:           goto headers_almost_done;",
          "",
          "[Added Lines]",
          "1190:         parser->state = s_header_field_start;",
          "1197:           parser->state = s_headers_almost_done;",
          "1204:           parser->state = s_headers_almost_done;",
          "1205:           goto reexecute_byte;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1162:         MARK(header_field);",
          "1167:         switch (c) {",
          "1168:           case 'c':",
          "1170:             break;",
          "1172:           case 'p':",
          "1174:             break;",
          "1176:           case 't':",
          "1178:             break;",
          "1180:           case 'u':",
          "1182:             break;",
          "1184:           default:",
          "1186:             break;",
          "1187:         }",
          "1188:         break;",
          "",
          "[Removed Lines]",
          "1164:         index = 0;",
          "1165:         state = s_header_field;",
          "1169:             header_state = h_C;",
          "1173:             header_state = h_matching_proxy_connection;",
          "1177:             header_state = h_matching_transfer_encoding;",
          "1181:             header_state = h_matching_upgrade;",
          "1185:             header_state = h_general;",
          "",
          "[Added Lines]",
          "1217:         parser->index = 0;",
          "1218:         parser->state = s_header_field;",
          "1222:             parser->header_state = h_C;",
          "1226:             parser->header_state = h_matching_proxy_connection;",
          "1230:             parser->header_state = h_matching_transfer_encoding;",
          "1234:             parser->header_state = h_matching_upgrade;",
          "1238:             parser->header_state = h_general;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1193:         c = TOKEN(ch);",
          "1195:         if (c) {",
          "1197:             case h_general:",
          "1198:               break;",
          "1200:             case h_C:",
          "1203:               break;",
          "1205:             case h_CO:",
          "1208:               break;",
          "1210:             case h_CON:",
          "1212:               switch (c) {",
          "1213:                 case 'n':",
          "1215:                   break;",
          "1216:                 case 't':",
          "1218:                   break;",
          "1219:                 default:",
          "1221:                   break;",
          "1222:               }",
          "1223:               break;",
          "",
          "[Removed Lines]",
          "1196:           switch (header_state) {",
          "1201:               index++;",
          "1202:               header_state = (c == 'o' ? h_CO : h_general);",
          "1206:               index++;",
          "1207:               header_state = (c == 'n' ? h_CON : h_general);",
          "1211:               index++;",
          "1214:                   header_state = h_matching_connection;",
          "1217:                   header_state = h_matching_content_length;",
          "1220:                   header_state = h_general;",
          "",
          "[Added Lines]",
          "1249:           switch (parser->header_state) {",
          "1254:               parser->index++;",
          "1255:               parser->header_state = (c == 'o' ? h_CO : h_general);",
          "1259:               parser->index++;",
          "1260:               parser->header_state = (c == 'n' ? h_CON : h_general);",
          "1264:               parser->index++;",
          "1267:                   parser->header_state = h_matching_connection;",
          "1270:                   parser->header_state = h_matching_content_length;",
          "1273:                   parser->header_state = h_general;",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1227:             case h_matching_connection:",
          "1234:               }",
          "1235:               break;",
          "1239:             case h_matching_proxy_connection:",
          "1246:               }",
          "1247:               break;",
          "1251:             case h_matching_content_length:",
          "1258:               }",
          "1259:               break;",
          "1263:             case h_matching_transfer_encoding:",
          "1270:               }",
          "1271:               break;",
          "1275:             case h_matching_upgrade:",
          "1282:               }",
          "1283:               break;",
          "",
          "[Removed Lines]",
          "1228:               index++;",
          "1229:               if (index > sizeof(CONNECTION)-1",
          "1230:                   || c != CONNECTION[index]) {",
          "1231:                 header_state = h_general;",
          "1232:               } else if (index == sizeof(CONNECTION)-2) {",
          "1233:                 header_state = h_connection;",
          "1240:               index++;",
          "1241:               if (index > sizeof(PROXY_CONNECTION)-1",
          "1242:                   || c != PROXY_CONNECTION[index]) {",
          "1243:                 header_state = h_general;",
          "1244:               } else if (index == sizeof(PROXY_CONNECTION)-2) {",
          "1245:                 header_state = h_connection;",
          "1252:               index++;",
          "1253:               if (index > sizeof(CONTENT_LENGTH)-1",
          "1254:                   || c != CONTENT_LENGTH[index]) {",
          "1255:                 header_state = h_general;",
          "1256:               } else if (index == sizeof(CONTENT_LENGTH)-2) {",
          "1257:                 header_state = h_content_length;",
          "1264:               index++;",
          "1265:               if (index > sizeof(TRANSFER_ENCODING)-1",
          "1266:                   || c != TRANSFER_ENCODING[index]) {",
          "1267:                 header_state = h_general;",
          "1268:               } else if (index == sizeof(TRANSFER_ENCODING)-2) {",
          "1269:                 header_state = h_transfer_encoding;",
          "1276:               index++;",
          "1277:               if (index > sizeof(UPGRADE)-1",
          "1278:                   || c != UPGRADE[index]) {",
          "1279:                 header_state = h_general;",
          "1280:               } else if (index == sizeof(UPGRADE)-2) {",
          "1281:                 header_state = h_upgrade;",
          "",
          "[Added Lines]",
          "1281:               parser->index++;",
          "1282:               if (parser->index > sizeof(CONNECTION)-1",
          "1283:                   || c != CONNECTION[parser->index]) {",
          "1284:                 parser->header_state = h_general;",
          "1285:               } else if (parser->index == sizeof(CONNECTION)-2) {",
          "1286:                 parser->header_state = h_connection;",
          "1293:               parser->index++;",
          "1294:               if (parser->index > sizeof(PROXY_CONNECTION)-1",
          "1295:                   || c != PROXY_CONNECTION[parser->index]) {",
          "1296:                 parser->header_state = h_general;",
          "1297:               } else if (parser->index == sizeof(PROXY_CONNECTION)-2) {",
          "1298:                 parser->header_state = h_connection;",
          "1305:               parser->index++;",
          "1306:               if (parser->index > sizeof(CONTENT_LENGTH)-1",
          "1307:                   || c != CONTENT_LENGTH[parser->index]) {",
          "1308:                 parser->header_state = h_general;",
          "1309:               } else if (parser->index == sizeof(CONTENT_LENGTH)-2) {",
          "1310:                 parser->header_state = h_content_length;",
          "1317:               parser->index++;",
          "1318:               if (parser->index > sizeof(TRANSFER_ENCODING)-1",
          "1319:                   || c != TRANSFER_ENCODING[parser->index]) {",
          "1320:                 parser->header_state = h_general;",
          "1321:               } else if (parser->index == sizeof(TRANSFER_ENCODING)-2) {",
          "1322:                 parser->header_state = h_transfer_encoding;",
          "1329:               parser->index++;",
          "1330:               if (parser->index > sizeof(UPGRADE)-1",
          "1331:                   || c != UPGRADE[parser->index]) {",
          "1332:                 parser->header_state = h_general;",
          "1333:               } else if (parser->index == sizeof(UPGRADE)-2) {",
          "1334:                 parser->header_state = h_upgrade;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1286:             case h_content_length:",
          "1287:             case h_transfer_encoding:",
          "1288:             case h_upgrade:",
          "1290:               break;",
          "1292:             default:",
          "",
          "[Removed Lines]",
          "1289:               if (ch != ' ') header_state = h_general;",
          "",
          "[Added Lines]",
          "1342:               if (ch != ' ') parser->header_state = h_general;",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1297:         }",
          "1299:         if (ch == ':') {",
          "1302:           break;",
          "1303:         }",
          "1305:         if (ch == CR) {",
          "1308:           break;",
          "1309:         }",
          "1311:         if (ch == LF) {",
          "1314:           break;",
          "1315:         }",
          "",
          "[Removed Lines]",
          "1300:           CALLBACK(header_field);",
          "1301:           state = s_header_value_start;",
          "1306:           state = s_header_almost_done;",
          "1307:           CALLBACK(header_field);",
          "1312:           CALLBACK(header_field);",
          "1313:           state = s_header_field_start;",
          "",
          "[Added Lines]",
          "1353:           parser->state = s_header_value_start;",
          "1354:           CALLBACK_DATA(header_field);",
          "1359:           parser->state = s_header_almost_done;",
          "1360:           CALLBACK_DATA(header_field);",
          "1365:           parser->state = s_header_field_start;",
          "1366:           CALLBACK_DATA(header_field);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1325:         MARK(header_value);",
          "1330:         if (ch == CR) {",
          "1334:           break;",
          "1335:         }",
          "1337:         if (ch == LF) {",
          "1340:           break;",
          "1341:         }",
          "1343:         c = LOWER(ch);",
          "1346:           case h_upgrade:",
          "1347:             parser->flags |= F_UPGRADE;",
          "1349:             break;",
          "1351:           case h_transfer_encoding:",
          "1353:             if ('c' == c) {",
          "1355:             } else {",
          "1357:             }",
          "1358:             break;",
          "",
          "[Removed Lines]",
          "1327:         state = s_header_value;",
          "1328:         index = 0;",
          "1331:           CALLBACK(header_value);",
          "1332:           header_state = h_general;",
          "1333:           state = s_header_almost_done;",
          "1338:           CALLBACK(header_value);",
          "1339:           state = s_header_field_start;",
          "1345:         switch (header_state) {",
          "1348:             header_state = h_general;",
          "1354:               header_state = h_matching_transfer_encoding_chunked;",
          "1356:               header_state = h_general;",
          "",
          "[Added Lines]",
          "1380:         parser->state = s_header_value;",
          "1381:         parser->index = 0;",
          "1384:           parser->header_state = h_general;",
          "1385:           parser->state = s_header_almost_done;",
          "1386:           CALLBACK_DATA(header_value);",
          "1391:           parser->state = s_header_field_start;",
          "1392:           CALLBACK_DATA(header_value);",
          "1398:         switch (parser->header_state) {",
          "1401:             parser->header_state = h_general;",
          "1407:               parser->header_state = h_matching_transfer_encoding_chunked;",
          "1409:               parser->header_state = h_general;",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1369:           case h_connection:",
          "1371:             if (c == 'k') {",
          "1374:             } else if (c == 'c') {",
          "1376:             } else {",
          "1378:             }",
          "1379:             break;",
          "1381:           default:",
          "1383:             break;",
          "1384:         }",
          "1385:         break;",
          "",
          "[Removed Lines]",
          "1372:               header_state = h_matching_connection_keep_alive;",
          "1375:               header_state = h_matching_connection_close;",
          "1377:               header_state = h_general;",
          "1382:             header_state = h_general;",
          "",
          "[Added Lines]",
          "1425:               parser->header_state = h_matching_connection_keep_alive;",
          "1428:               parser->header_state = h_matching_connection_close;",
          "1430:               parser->header_state = h_general;",
          "1435:             parser->header_state = h_general;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1389:       {",
          "1391:         if (ch == CR) {",
          "1394:           break;",
          "1395:         }",
          "1397:         if (ch == LF) {",
          "1400:         }",
          "1402:         c = LOWER(ch);",
          "1405:           case h_general:",
          "1406:             break;",
          "",
          "[Removed Lines]",
          "1392:           CALLBACK(header_value);",
          "1393:           state = s_header_almost_done;",
          "1398:           CALLBACK(header_value);",
          "1399:           goto header_almost_done;",
          "1404:         switch (header_state) {",
          "",
          "[Added Lines]",
          "1445:           parser->state = s_header_almost_done;",
          "1446:           CALLBACK_DATA(header_value);",
          "1451:           parser->state = s_header_almost_done;",
          "1452:           CALLBACK_DATA_NOADVANCE(header_value);",
          "1453:           goto reexecute_byte;",
          "1458:         switch (parser->header_state) {",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1411:             break;",
          "1413:           case h_content_length:",
          "1414:             if (ch == ' ') break;",
          "1415:             if (!IS_NUM(ch)) {",
          "1416:               SET_ERRNO(HPE_INVALID_CONTENT_LENGTH);",
          "1417:               goto error;",
          "1418:             }",
          "1422:             break;",
          "1425:           case h_matching_transfer_encoding_chunked:",
          "1432:             }",
          "1433:             break;",
          "1436:           case h_matching_connection_keep_alive:",
          "1443:             }",
          "1444:             break;",
          "1447:           case h_matching_connection_close:",
          "1453:             }",
          "1454:             break;",
          "1456:           case h_transfer_encoding_chunked:",
          "1457:           case h_connection_keep_alive:",
          "1458:           case h_connection_close:",
          "1460:             break;",
          "1462:           default:",
          "1465:             break;",
          "1466:         }",
          "1467:         break;",
          "1468:       }",
          "1470:       case s_header_almost_done:",
          "1472:       {",
          "1473:         STRICT_CHECK(ch != LF);",
          "1478:           case h_connection_keep_alive:",
          "1479:             parser->flags |= F_CONNECTION_KEEP_ALIVE;",
          "1480:             break;",
          "",
          "[Removed Lines]",
          "1420:             parser->content_length *= 10;",
          "1421:             parser->content_length += ch - '0';",
          "1426:             index++;",
          "1427:             if (index > sizeof(CHUNKED)-1",
          "1428:                 || c != CHUNKED[index]) {",
          "1429:               header_state = h_general;",
          "1430:             } else if (index == sizeof(CHUNKED)-2) {",
          "1431:               header_state = h_transfer_encoding_chunked;",
          "1437:             index++;",
          "1438:             if (index > sizeof(KEEP_ALIVE)-1",
          "1439:                 || c != KEEP_ALIVE[index]) {",
          "1440:               header_state = h_general;",
          "1441:             } else if (index == sizeof(KEEP_ALIVE)-2) {",
          "1442:               header_state = h_connection_keep_alive;",
          "1448:             index++;",
          "1449:             if (index > sizeof(CLOSE)-1 || c != CLOSE[index]) {",
          "1450:               header_state = h_general;",
          "1451:             } else if (index == sizeof(CLOSE)-2) {",
          "1452:               header_state = h_connection_close;",
          "1459:             if (ch != ' ') header_state = h_general;",
          "1463:             state = s_header_value;",
          "1464:             header_state = h_general;",
          "1471:       header_almost_done:",
          "1475:         state = s_header_value_lws;",
          "1477:         switch (header_state) {",
          "",
          "[Added Lines]",
          "1468:           {",
          "1469:             uint64_t t;",
          "1478:             t = parser->content_length;",
          "1479:             t *= 10;",
          "1480:             t += ch - '0';",
          "1483:             if (t < parser->content_length || t == ULLONG_MAX) {",
          "1484:               SET_ERRNO(HPE_INVALID_CONTENT_LENGTH);",
          "1485:               goto error;",
          "1486:             }",
          "1488:             parser->content_length = t;",
          "1490:           }",
          "1494:             parser->index++;",
          "1495:             if (parser->index > sizeof(CHUNKED)-1",
          "1496:                 || c != CHUNKED[parser->index]) {",
          "1497:               parser->header_state = h_general;",
          "1498:             } else if (parser->index == sizeof(CHUNKED)-2) {",
          "1499:               parser->header_state = h_transfer_encoding_chunked;",
          "1505:             parser->index++;",
          "1506:             if (parser->index > sizeof(KEEP_ALIVE)-1",
          "1507:                 || c != KEEP_ALIVE[parser->index]) {",
          "1508:               parser->header_state = h_general;",
          "1509:             } else if (parser->index == sizeof(KEEP_ALIVE)-2) {",
          "1510:               parser->header_state = h_connection_keep_alive;",
          "1516:             parser->index++;",
          "1517:             if (parser->index > sizeof(CLOSE)-1 || c != CLOSE[parser->index]) {",
          "1518:               parser->header_state = h_general;",
          "1519:             } else if (parser->index == sizeof(CLOSE)-2) {",
          "1520:               parser->header_state = h_connection_close;",
          "1527:             if (ch != ' ') parser->header_state = h_general;",
          "1531:             parser->state = s_header_value;",
          "1532:             parser->header_state = h_general;",
          "1542:         parser->state = s_header_value_lws;",
          "1544:         switch (parser->header_state) {",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1487:           default:",
          "1488:             break;",
          "1489:         }",
          "1490:         break;",
          "1491:       }",
          "1493:       case s_header_value_lws:",
          "1494:       {",
          "1495:         if (ch == ' ' || ch == '\\t')",
          "1497:         else",
          "1498:         {",
          "1501:         }",
          "1502:         break;",
          "1503:       }",
          "1505:       case s_headers_almost_done:",
          "1507:       {",
          "1508:         STRICT_CHECK(ch != LF);",
          "1510:         if (parser->flags & F_TRAILING) {",
          "1514:           break;",
          "1515:         }",
          "1529:         if (settings->on_headers_complete) {",
          "1530:           switch (settings->on_headers_complete(parser)) {",
          "",
          "[Removed Lines]",
          "1496:           state = s_header_value_start;",
          "1499:           state = s_header_field_start;",
          "1500:           goto header_field_start;",
          "1506:       headers_almost_done:",
          "1512:           CALLBACK2(message_complete);",
          "1513:           state = NEW_MESSAGE();",
          "1517:         nread = 0;",
          "1519:         if (parser->flags & F_UPGRADE || parser->method == HTTP_CONNECT) {",
          "1520:           parser->upgrade = 1;",
          "1521:         }",
          "",
          "[Added Lines]",
          "1564:           parser->state = s_header_value_start;",
          "1567:           parser->state = s_header_field_start;",
          "1568:           goto reexecute_byte;",
          "1579:           parser->state = NEW_MESSAGE();",
          "1580:           CALLBACK_NOTIFY(message_complete);",
          "1584:         parser->state = s_headers_done;",
          "1587:         parser->upgrade =",
          "1588:           (parser->flags & F_UPGRADE || parser->method == HTTP_CONNECT);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1536:               break;",
          "1538:             default:",
          "1540:               SET_ERRNO(HPE_CB_headers_complete);",
          "1542:           }",
          "1543:         }",
          "1546:         if (parser->upgrade) {",
          "1548:           return (p - data) + 1;",
          "1549:         }",
          "1551:         if (parser->flags & F_SKIPBODY) {",
          "1554:         } else if (parser->flags & F_CHUNKED) {",
          "1557:         } else {",
          "1558:           if (parser->content_length == 0) {",
          "1565:           } else {",
          "1570:             } else {",
          "1573:             }",
          "1574:           }",
          "1575:         }",
          "",
          "[Removed Lines]",
          "1539:               parser->state = state;",
          "1547:           CALLBACK2(message_complete);",
          "1552:           CALLBACK2(message_complete);",
          "1553:           state = NEW_MESSAGE();",
          "1556:           state = s_chunk_size_start;",
          "1560:             CALLBACK2(message_complete);",
          "1561:             state = NEW_MESSAGE();",
          "1562:           } else if (parser->content_length > 0) {",
          "1564:             state = s_body_identity;",
          "1566:             if (parser->type == HTTP_REQUEST || http_should_keep_alive(parser)) {",
          "1568:               CALLBACK2(message_complete);",
          "1569:               state = NEW_MESSAGE();",
          "1572:               state = s_body_identity_eof;",
          "",
          "[Added Lines]",
          "1614:         if (HTTP_PARSER_ERRNO(parser) != HPE_OK) {",
          "1615:           return p - data;",
          "1616:         }",
          "1618:         goto reexecute_byte;",
          "1619:       }",
          "1621:       case s_headers_done:",
          "1622:       {",
          "1623:         STRICT_CHECK(ch != LF);",
          "1625:         parser->nread = 0;",
          "1629:           parser->state = NEW_MESSAGE();",
          "1630:           CALLBACK_NOTIFY(message_complete);",
          "1635:           parser->state = NEW_MESSAGE();",
          "1636:           CALLBACK_NOTIFY(message_complete);",
          "1639:           parser->state = s_chunk_size_start;",
          "1643:             parser->state = NEW_MESSAGE();",
          "1644:             CALLBACK_NOTIFY(message_complete);",
          "1645:           } else if (parser->content_length != ULLONG_MAX) {",
          "1647:             parser->state = s_body_identity;",
          "1649:             if (parser->type == HTTP_REQUEST ||",
          "1650:                 !http_message_needs_eof(parser)) {",
          "1652:               parser->state = NEW_MESSAGE();",
          "1653:               CALLBACK_NOTIFY(message_complete);",
          "1656:               parser->state = s_body_identity_eof;",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1578:       }",
          "1580:       case s_body_identity:",
          "1590:         }",
          "1591:         break;",
          "1594:       case s_body_identity_eof:",
          "1600:         break;",
          "1602:       case s_chunk_size_start:",
          "1603:       {",
          "1605:         assert(parser->flags & F_CHUNKED);",
          "1607:         unhex_val = unhex[(unsigned char)ch];",
          "",
          "[Removed Lines]",
          "1581:         to_read = MIN(pe - p, (int64_t)parser->content_length);",
          "1582:         if (to_read > 0) {",
          "1583:           if (settings->on_body) settings->on_body(parser, p, to_read);",
          "1584:           p += to_read - 1;",
          "1585:           parser->content_length -= to_read;",
          "1586:           if (parser->content_length == 0) {",
          "1587:             CALLBACK2(message_complete);",
          "1588:             state = NEW_MESSAGE();",
          "1589:           }",
          "1595:         to_read = pe - p;",
          "1596:         if (to_read > 0) {",
          "1597:           if (settings->on_body) settings->on_body(parser, p, to_read);",
          "1598:           p += to_read - 1;",
          "1599:         }",
          "1604:         assert(nread == 1);",
          "",
          "[Added Lines]",
          "1665:       {",
          "1666:         uint64_t to_read = MIN(parser->content_length,",
          "1667:                                (uint64_t) ((data + len) - p));",
          "1669:         assert(parser->content_length != 0",
          "1670:             && parser->content_length != ULLONG_MAX);",
          "1677:         MARK(body);",
          "1678:         parser->content_length -= to_read;",
          "1679:         p += to_read - 1;",
          "1681:         if (parser->content_length == 0) {",
          "1682:           parser->state = s_message_done;",
          "1693:           CALLBACK_DATA_(body, p - body_mark + 1, p - data);",
          "1694:           goto reexecute_byte;",
          "1698:       }",
          "1702:         MARK(body);",
          "1703:         p = data + len - 1;",
          "1705:         break;",
          "1707:       case s_message_done:",
          "1708:         parser->state = NEW_MESSAGE();",
          "1709:         CALLBACK_NOTIFY(message_complete);",
          "1714:         assert(parser->nread == 1);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1611:         }",
          "1613:         parser->content_length = unhex_val;",
          "1615:         break;",
          "1616:       }",
          "1618:       case s_chunk_size:",
          "1619:       {",
          "1620:         assert(parser->flags & F_CHUNKED);",
          "1622:         if (ch == CR) {",
          "1624:           break;",
          "1625:         }",
          "",
          "[Removed Lines]",
          "1614:         state = s_chunk_size;",
          "1623:           state = s_chunk_size_almost_done;",
          "",
          "[Added Lines]",
          "1724:         parser->state = s_chunk_size;",
          "1730:         uint64_t t;",
          "1735:           parser->state = s_chunk_size_almost_done;",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1629:         if (unhex_val == -1) {",
          "1630:           if (ch == ';' || ch == ' ') {",
          "1632:             break;",
          "1633:           }",
          "",
          "[Removed Lines]",
          "1631:             state = s_chunk_parameters;",
          "",
          "[Added Lines]",
          "1743:             parser->state = s_chunk_parameters;",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1636:           goto error;",
          "1637:         }",
          "1641:         break;",
          "1642:       }",
          "",
          "[Removed Lines]",
          "1639:         parser->content_length *= 16;",
          "1640:         parser->content_length += unhex_val;",
          "",
          "[Added Lines]",
          "1751:         t = parser->content_length;",
          "1752:         t *= 16;",
          "1753:         t += unhex_val;",
          "1756:         if (t < parser->content_length || t == ULLONG_MAX) {",
          "1757:           SET_ERRNO(HPE_INVALID_CONTENT_LENGTH);",
          "1758:           goto error;",
          "1759:         }",
          "1761:         parser->content_length = t;",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1646:         assert(parser->flags & F_CHUNKED);",
          "1648:         if (ch == CR) {",
          "1650:           break;",
          "1651:         }",
          "1652:         break;",
          "",
          "[Removed Lines]",
          "1649:           state = s_chunk_size_almost_done;",
          "",
          "[Added Lines]",
          "1770:           parser->state = s_chunk_size_almost_done;",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1657:         assert(parser->flags & F_CHUNKED);",
          "1658:         STRICT_CHECK(ch != LF);",
          "1662:         if (parser->content_length == 0) {",
          "1663:           parser->flags |= F_TRAILING;",
          "1665:         } else {",
          "1667:         }",
          "1668:         break;",
          "1669:       }",
          "1671:       case s_chunk_data:",
          "1672:       {",
          "1684:         }",
          "1687:         break;",
          "1688:       }",
          "1690:       case s_chunk_data_almost_done:",
          "1691:         assert(parser->flags & F_CHUNKED);",
          "1692:         STRICT_CHECK(ch != CR);",
          "1694:         break;",
          "1696:       case s_chunk_data_done:",
          "1697:         assert(parser->flags & F_CHUNKED);",
          "1698:         STRICT_CHECK(ch != LF);",
          "1700:         break;",
          "1702:       default:",
          "",
          "[Removed Lines]",
          "1660:         nread = 0;",
          "1664:           state = s_header_field_start;",
          "1666:           state = s_chunk_data;",
          "1673:         assert(parser->flags & F_CHUNKED);",
          "1675:         to_read = MIN(pe - p, (int64_t)(parser->content_length));",
          "1677:         if (to_read > 0) {",
          "1678:           if (settings->on_body) settings->on_body(parser, p, to_read);",
          "1679:           p += to_read - 1;",
          "1680:         }",
          "1682:         if (to_read == parser->content_length) {",
          "1683:           state = s_chunk_data_almost_done;",
          "1686:         parser->content_length -= to_read;",
          "1693:         state = s_chunk_data_done;",
          "1699:         state = s_chunk_size_start;",
          "",
          "[Added Lines]",
          "1781:         parser->nread = 0;",
          "1785:           parser->state = s_header_field_start;",
          "1787:           parser->state = s_chunk_data;",
          "1794:         uint64_t to_read = MIN(parser->content_length,",
          "1795:                                (uint64_t) ((data + len) - p));",
          "1797:         assert(parser->flags & F_CHUNKED);",
          "1798:         assert(parser->content_length != 0",
          "1799:             && parser->content_length != ULLONG_MAX);",
          "1804:         MARK(body);",
          "1805:         parser->content_length -= to_read;",
          "1806:         p += to_read - 1;",
          "1808:         if (parser->content_length == 0) {",
          "1809:           parser->state = s_chunk_data_almost_done;",
          "1817:         assert(parser->content_length == 0);",
          "1819:         parser->state = s_chunk_data_done;",
          "1820:         CALLBACK_DATA(body);",
          "1826:         parser->nread = 0;",
          "1827:         parser->state = s_chunk_size_start;",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1706:     }",
          "1707:   }",
          "1718:   return len;",
          "",
          "[Removed Lines]",
          "1709:   CALLBACK(header_field);",
          "1710:   CALLBACK(header_value);",
          "1711:   CALLBACK(url);",
          "1713:   parser->state = state;",
          "1714:   parser->header_state = header_state;",
          "1715:   parser->index = index;",
          "1716:   parser->nread = nread;",
          "",
          "[Added Lines]",
          "1847:   assert(((header_field_mark ? 1 : 0) +",
          "1848:           (header_value_mark ? 1 : 0) +",
          "1849:           (url_mark ? 1 : 0)  +",
          "1850:           (body_mark ? 1 : 0)) <= 1);",
          "1852:   CALLBACK_DATA_NOADVANCE(header_field);",
          "1853:   CALLBACK_DATA_NOADVANCE(header_value);",
          "1854:   CALLBACK_DATA_NOADVANCE(url);",
          "1855:   CALLBACK_DATA_NOADVANCE(body);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1726: }",
          "1729: int",
          "1730: http_should_keep_alive (http_parser *parser)",
          "1731: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1869: int",
          "1870: http_message_needs_eof (http_parser *parser)",
          "1871: {",
          "1872:   if (parser->type == HTTP_REQUEST) {",
          "1873:     return 0;",
          "1874:   }",
          "1881:     return 0;",
          "1882:   }",
          "1884:   if ((parser->flags & F_CHUNKED) || parser->content_length != ULLONG_MAX) {",
          "1885:     return 0;",
          "1886:   }",
          "1888:   return 1;",
          "1889: }",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1734:     if (parser->flags & F_CONNECTION_CLOSE) {",
          "1735:       return 0;",
          "1738:     }",
          "1739:   } else {",
          "1744:       return 0;",
          "1745:     }",
          "1746:   }",
          "1747: }",
          "",
          "[Removed Lines]",
          "1736:     } else {",
          "1737:       return 1;",
          "1741:     if (parser->flags & F_CONNECTION_KEEP_ALIVE) {",
          "1742:       return 1;",
          "1743:     } else {",
          "",
          "[Added Lines]",
          "1902:     if (!(parser->flags & F_CONNECTION_KEEP_ALIVE)) {",
          "1907:   return !http_message_needs_eof(parser);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1756: void",
          "1757: http_parser_init (http_parser *parser, enum http_parser_type t)",
          "1758: {",
          "1759:   parser->type = t;",
          "1760:   parser->state = (t == HTTP_REQUEST ? s_start_req : (t == HTTP_RESPONSE ? s_start_res : s_start_req_or_res));",
          "1766: }",
          "1768: const char *",
          "",
          "[Removed Lines]",
          "1761:   parser->nread = 0;",
          "1762:   parser->upgrade = 0;",
          "1763:   parser->flags = 0;",
          "1764:   parser->method = 0;",
          "1765:   parser->http_errno = 0;",
          "",
          "[Added Lines]",
          "1921:   memset(parser, 0, sizeof(*parser));",
          "1922:   parser->data = data;",
          "1925:   parser->http_errno = HPE_OK;",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1776:   assert(err < (sizeof(http_strerror_tab)/sizeof(http_strerror_tab[0])));",
          "1777:   return http_strerror_tab[err].description;",
          "1778: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1940: int",
          "1941: http_parser_parse_url(const char *buf, size_t buflen, int is_connect,",
          "1942:                       struct http_parser_url *u)",
          "1943: {",
          "1944:   enum state s;",
          "1945:   const char *p;",
          "1946:   enum http_parser_url_fields uf, old_uf;",
          "1948:   u->port = u->field_set = 0;",
          "1949:   s = is_connect ? s_req_host_start : s_req_spaces_before_url;",
          "1950:   uf = old_uf = UF_MAX;",
          "1952:   for (p = buf; p < buf + buflen; p++) {",
          "1953:     s = parse_url_char(s, *p);",
          "1956:     switch (s) {",
          "1957:       case s_dead:",
          "1958:         return 1;",
          "1961:       case s_req_schema_slash:",
          "1962:       case s_req_schema_slash_slash:",
          "1963:       case s_req_host_start:",
          "1964:       case s_req_host_v6_start:",
          "1965:       case s_req_host_v6_end:",
          "1966:       case s_req_port_start:",
          "1967:       case s_req_query_string_start:",
          "1968:       case s_req_fragment_start:",
          "1969:         continue;",
          "1971:       case s_req_schema:",
          "1972:         uf = UF_SCHEMA;",
          "1973:         break;",
          "1975:       case s_req_host:",
          "1976:       case s_req_host_v6:",
          "1977:         uf = UF_HOST;",
          "1978:         break;",
          "1980:       case s_req_port:",
          "1981:         uf = UF_PORT;",
          "1982:         break;",
          "1984:       case s_req_path:",
          "1985:         uf = UF_PATH;",
          "1986:         break;",
          "1988:       case s_req_query_string:",
          "1989:         uf = UF_QUERY;",
          "1990:         break;",
          "1992:       case s_req_fragment:",
          "1993:         uf = UF_FRAGMENT;",
          "1994:         break;",
          "1996:       default:",
          "1997:         assert(!\"Unexpected state\");",
          "1998:         return 1;",
          "1999:     }",
          "2002:     if (uf == old_uf) {",
          "2003:       u->field_data[uf].len++;",
          "2004:       continue;",
          "2005:     }",
          "2007:     u->field_data[uf].off = p - buf;",
          "2008:     u->field_data[uf].len = 1;",
          "2010:     u->field_set |= (1 << uf);",
          "2011:     old_uf = uf;",
          "2012:   }",
          "2015:   if (is_connect && u->field_set != ((1 << UF_HOST)|(1 << UF_PORT))) {",
          "2016:     return 1;",
          "2017:   }",
          "2020:   switch (s) {",
          "2021:   case s_req_host_v6_start:",
          "2022:   case s_req_host_v6:",
          "2023:   case s_req_host_v6_end:",
          "2024:   case s_req_host:",
          "2025:   case s_req_port_start:",
          "2026:     return 1;",
          "2027:   default:",
          "2028:     break;",
          "2029:   }",
          "2031:   if (u->field_set & (1 << UF_PORT)) {",
          "2033:     unsigned long v = strtoul(buf + u->field_data[UF_PORT].off, NULL, 10);",
          "2036:     if (v > 0xffff) {",
          "2037:       return 1;",
          "2038:     }",
          "2040:     u->port = (uint16_t) v;",
          "2041:   }",
          "2043:   return 0;",
          "2044: }",
          "2046: void",
          "2047: http_parser_pause(http_parser *parser, int paused) {",
          "2052:   if (HTTP_PARSER_ERRNO(parser) == HPE_OK ||",
          "2053:       HTTP_PARSER_ERRNO(parser) == HPE_PAUSED) {",
          "2054:     SET_ERRNO((paused) ? HPE_PAUSED : HPE_OK);",
          "2055:   } else {",
          "2056:     assert(0 && \"Attempting to pause parser in error state\");",
          "2057:   }",
          "2058: }",
          "",
          "---------------"
        ],
        "deps/http_parser/http_parser.h||deps/http_parser/http_parser.h": [
          "File: deps/http_parser/http_parser.h -> deps/http_parser/http_parser.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #define HTTP_PARSER_VERSION_MINOR 0",
          "30: #include <sys/types.h>",
          "32: typedef __int8 int8_t;",
          "33: typedef unsigned __int8 uint8_t;",
          "34: typedef __int16 int16_t;",
          "",
          "[Removed Lines]",
          "31: #if defined(_WIN32) && !defined(__MINGW32__) && !defined(_MSC_VER)",
          "",
          "[Added Lines]",
          "31: #if defined(_WIN32) && !defined(__MINGW32__) && (!defined(_MSC_VER) || _MSC_VER<1600)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "116:   , HTTP_UNSUBSCRIBE",
          "118:   , HTTP_PATCH",
          "119:   };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "119:   , HTTP_PURGE",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "143:                                                                      \\",
          "145:   XX(CB_message_begin, \"the on_message_begin callback failed\")       \\",
          "148:   XX(CB_url, \"the on_url callback failed\")                           \\",
          "150:   XX(CB_header_field, \"the on_header_field callback failed\")         \\",
          "151:   XX(CB_header_value, \"the on_header_value callback failed\")         \\",
          "152:   XX(CB_headers_complete, \"the on_headers_complete callback failed\") \\",
          "",
          "[Removed Lines]",
          "146:   XX(CB_path, \"the on_path callback failed\")                         \\",
          "147:   XX(CB_query_string, \"the on_query_string callback failed\")         \\",
          "149:   XX(CB_fragment, \"the on_fragment callback failed\")                 \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "177:   XX(INVALID_CONSTANT, \"invalid constant string\")                    \\",
          "178:   XX(INVALID_INTERNAL_STATE, \"encountered unexpected internal state\")\\",
          "179:   XX(STRICT, \"strict mode assertion failed\")                         \\",
          "180:   XX(UNKNOWN, \"an unknown error occurred\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178:   XX(PAUSED, \"parser is paused\")                                     \\",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "202: struct http_parser {",
          "214:   unsigned short http_major;",
          "215:   unsigned short http_minor;",
          "218:   unsigned char http_errno : 7;",
          "",
          "[Removed Lines]",
          "204:   unsigned char type : 2;",
          "206:   unsigned char state;",
          "207:   unsigned char header_state;",
          "208:   unsigned char index;",
          "210:   uint32_t nread;",
          "211:   int64_t content_length;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "244: };",
          "247: void http_parser_init(http_parser *parser, enum http_parser_type type);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "246: enum http_parser_url_fields",
          "247:   { UF_SCHEMA           = 0",
          "248:   , UF_HOST             = 1",
          "249:   , UF_PORT             = 2",
          "250:   , UF_PATH             = 3",
          "251:   , UF_QUERY            = 4",
          "252:   , UF_FRAGMENT         = 5",
          "253:   , UF_MAX              = 6",
          "254:   };",
          "264: struct http_parser_url {",
          "268:   struct {",
          "271:   } field_data[UF_MAX];",
          "272: };",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "271: const char *http_errno_description(enum http_errno err);",
          "273: #ifdef __cplusplus",
          "274: }",
          "275: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "302: int http_parser_parse_url(const char *buf, size_t buflen,",
          "303:                           int is_connect,",
          "304:                           struct http_parser_url *u);",
          "307: void http_parser_pause(http_parser *parser, int paused);",
          "",
          "---------------"
        ],
        "deps/http_parser/test.c||deps/http_parser/test.c": [
          "File: deps/http_parser/test.c -> deps/http_parser/test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:   enum http_parser_type type;",
          "45:   enum http_method method;",
          "46:   int status_code;",
          "47:   char request_url[MAX_ELEMENT_SIZE];",
          "48:   char body[MAX_ELEMENT_SIZE];",
          "49:   size_t body_size;",
          "50:   int num_headers;",
          "51:   enum { NONE=0, FIELD, VALUE } last_header_element;",
          "52:   char headers [MAX_HEADERS][2][MAX_ELEMENT_SIZE];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:   char request_path[MAX_ELEMENT_SIZE];",
          "49:   char fragment[MAX_ELEMENT_SIZE];",
          "50:   char query_string[MAX_ELEMENT_SIZE];",
          "53:   uint16_t port;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68: static struct message messages[5];",
          "69: static int num_messages;",
          "72: const struct message requests[] =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74: static http_parser_settings *current_pause_parser;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83:   ,.http_major= 1",
          "84:   ,.http_minor= 1",
          "85:   ,.method= HTTP_GET",
          "86:   ,.request_url= \"/test\"",
          "87:   ,.num_headers= 3",
          "88:   ,.headers=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91:   ,.query_string= \"\"",
          "92:   ,.fragment= \"\"",
          "93:   ,.request_path= \"/test\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "111:   ,.http_major= 1",
          "112:   ,.http_minor= 1",
          "113:   ,.method= HTTP_GET",
          "114:   ,.request_url= \"/favicon.ico\"",
          "115:   ,.num_headers= 8",
          "116:   ,.headers=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122:   ,.query_string= \"\"",
          "123:   ,.fragment= \"\"",
          "124:   ,.request_path= \"/favicon.ico\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "137:   ,.http_major= 1",
          "138:   ,.http_minor= 1",
          "139:   ,.method= HTTP_GET",
          "140:   ,.request_url= \"/dumbfuck\"",
          "141:   ,.num_headers= 1",
          "142:   ,.headers=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151:   ,.query_string= \"\"",
          "152:   ,.fragment= \"\"",
          "153:   ,.request_path= \"/dumbfuck\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "155:   ,.http_major= 1",
          "156:   ,.http_minor= 1",
          "157:   ,.method= HTTP_GET",
          "159:   ,.request_url= \"/forums/1/topics/2375?page=1#posts-17408\"",
          "160:   ,.num_headers= 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "172:   ,.query_string= \"page=1\"",
          "173:   ,.fragment= \"posts-17408\"",
          "174:   ,.request_path= \"/forums/1/topics/2375\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "171:   ,.http_major= 1",
          "172:   ,.http_minor= 1",
          "173:   ,.method= HTTP_GET",
          "174:   ,.request_url= \"/get_no_headers_no_body/world\"",
          "175:   ,.num_headers= 0",
          "176:   ,.body= \"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "191:   ,.query_string= \"\"",
          "192:   ,.fragment= \"\"",
          "193:   ,.request_path= \"/get_no_headers_no_body/world\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "187:   ,.http_major= 1",
          "188:   ,.http_minor= 1",
          "189:   ,.method= HTTP_GET",
          "190:   ,.request_url= \"/get_one_header_no_body\"",
          "191:   ,.num_headers= 1",
          "192:   ,.headers=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "210:   ,.query_string= \"\"",
          "211:   ,.fragment= \"\"",
          "212:   ,.request_path= \"/get_one_header_no_body\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "207:   ,.http_major= 1",
          "208:   ,.http_minor= 0",
          "209:   ,.method= HTTP_GET",
          "210:   ,.request_url= \"/get_funky_content_length_body_hello\"",
          "211:   ,.num_headers= 1",
          "212:   ,.headers=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "233:   ,.query_string= \"\"",
          "234:   ,.fragment= \"\"",
          "235:   ,.request_path= \"/get_funky_content_length_body_hello\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "229:   ,.http_major= 1",
          "230:   ,.http_minor= 1",
          "231:   ,.method= HTTP_POST",
          "232:   ,.request_url= \"/post_identity_body_world?q=search#hey\"",
          "233:   ,.num_headers= 3",
          "234:   ,.headers=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "258:   ,.query_string= \"q=search\"",
          "259:   ,.fragment= \"hey\"",
          "260:   ,.request_path= \"/post_identity_body_world\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "253:   ,.http_major= 1",
          "254:   ,.http_minor= 1",
          "255:   ,.method= HTTP_POST",
          "256:   ,.request_url= \"/post_chunked_all_your_base\"",
          "257:   ,.num_headers= 1",
          "258:   ,.headers=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "285:   ,.query_string= \"\"",
          "286:   ,.fragment= \"\"",
          "287:   ,.request_path= \"/post_chunked_all_your_base\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "276:   ,.http_major= 1",
          "277:   ,.http_minor= 1",
          "278:   ,.method= HTTP_POST",
          "279:   ,.request_url= \"/two_chunks_mult_zero_end\"",
          "280:   ,.num_headers= 1",
          "281:   ,.headers=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311:   ,.query_string= \"\"",
          "312:   ,.fragment= \"\"",
          "313:   ,.request_path= \"/two_chunks_mult_zero_end\"",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "301:   ,.http_major= 1",
          "302:   ,.http_minor= 1",
          "303:   ,.method= HTTP_POST",
          "304:   ,.request_url= \"/chunked_w_trailing_headers\"",
          "305:   ,.num_headers= 3",
          "306:   ,.headers=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "339:   ,.query_string= \"\"",
          "340:   ,.fragment= \"\"",
          "341:   ,.request_path= \"/chunked_w_trailing_headers\"",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "326:   ,.http_major= 1",
          "327:   ,.http_minor= 1",
          "328:   ,.method= HTTP_POST",
          "329:   ,.request_url= \"/chunked_w_bullshit_after_length\"",
          "330:   ,.num_headers= 1",
          "331:   ,.headers=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "367:   ,.query_string= \"\"",
          "368:   ,.fragment= \"\"",
          "369:   ,.request_path= \"/chunked_w_bullshit_after_length\"",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "343:   ,.http_major= 1",
          "344:   ,.http_minor= 1",
          "345:   ,.method= HTTP_GET",
          "346:   ,.request_url= \"/with_\\\"stupid\\\"_quotes?foo=\\\"bar\\\"\"",
          "347:   ,.num_headers= 0",
          "348:   ,.headers= { }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "387:   ,.query_string= \"foo=\\\"bar\\\"\"",
          "388:   ,.fragment= \"\"",
          "389:   ,.request_path= \"/with_\\\"stupid\\\"_quotes\"",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "366:   ,.http_major= 1",
          "367:   ,.http_minor= 0",
          "368:   ,.method= HTTP_GET",
          "369:   ,.request_url= \"/test\"",
          "370:   ,.num_headers= 3",
          "371:   ,.headers= { { \"Host\", \"0.0.0.0:5000\" }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "413:   ,.query_string= \"\"",
          "414:   ,.fragment= \"\"",
          "415:   ,.request_path= \"/test\"",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "386:   ,.http_major= 1",
          "387:   ,.http_minor= 1",
          "388:   ,.method= HTTP_GET",
          "389:   ,.request_url= \"/test.cgi?foo=bar?baz\"",
          "390:   ,.num_headers= 0",
          "391:   ,.headers= {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "436:   ,.query_string= \"foo=bar?baz\"",
          "437:   ,.fragment= \"\"",
          "438:   ,.request_path= \"/test.cgi\"",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "404:   ,.http_major= 1",
          "405:   ,.http_minor= 1",
          "406:   ,.method= HTTP_GET",
          "407:   ,.request_url= \"/test\"",
          "408:   ,.num_headers= 0",
          "409:   ,.headers= { }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "457:   ,.query_string= \"\"",
          "458:   ,.fragment= \"\"",
          "459:   ,.request_path= \"/test\"",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "428:   ,.http_major= 1",
          "429:   ,.http_minor= 1",
          "430:   ,.method= HTTP_GET",
          "431:   ,.request_url= \"/demo\"",
          "432:   ,.num_headers= 7",
          "433:   ,.upgrade=\"Hot diggity dogg\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "484:   ,.query_string= \"\"",
          "485:   ,.fragment= \"\"",
          "486:   ,.request_path= \"/demo\"",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "456:   ,.http_major= 1",
          "457:   ,.http_minor= 0",
          "458:   ,.method= HTTP_CONNECT",
          "459:   ,.request_url= \"0-home0.netscape.com:443\"",
          "460:   ,.num_headers= 2",
          "461:   ,.upgrade=\"some data\\r\\nand yet even more data\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "515:   ,.query_string= \"\"",
          "516:   ,.fragment= \"\"",
          "517:   ,.request_path= \"\"",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "475:   ,.http_major= 1",
          "476:   ,.http_minor= 1",
          "477:   ,.method= HTTP_REPORT",
          "478:   ,.request_url= \"/test\"",
          "479:   ,.num_headers= 0",
          "480:   ,.headers= {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "537:   ,.query_string= \"\"",
          "538:   ,.fragment= \"\"",
          "539:   ,.request_path= \"/test\"",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "491:   ,.http_major= 0",
          "492:   ,.http_minor= 9",
          "493:   ,.method= HTTP_GET",
          "494:   ,.request_url= \"/\"",
          "495:   ,.num_headers= 0",
          "496:   ,.headers= {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "556:   ,.query_string= \"\"",
          "557:   ,.fragment= \"\"",
          "558:   ,.request_path= \"/\"",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "510:   ,.http_major= 1",
          "511:   ,.http_minor= 1",
          "512:   ,.method= HTTP_MSEARCH",
          "513:   ,.request_url= \"*\"",
          "514:   ,.num_headers= 3",
          "515:   ,.headers= { { \"HOST\", \"239.255.255.250:1900\" }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "578:   ,.query_string= \"\"",
          "579:   ,.fragment= \"\"",
          "580:   ,.request_path= \"*\"",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "536:   ,.http_major= 1",
          "537:   ,.http_minor= 1",
          "538:   ,.method= HTTP_GET",
          "539:   ,.request_url= \"/\"",
          "540:   ,.num_headers= 2",
          "541:   ,.headers= { { \"Line1\", \"abcdefghijklmno qrs\" }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "607:   ,.query_string= \"\"",
          "608:   ,.fragment= \"\"",
          "609:   ,.request_path= \"/\"",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "555:   ,.http_major= 1",
          "556:   ,.http_minor= 1",
          "557:   ,.method= HTTP_GET",
          "558:   ,.request_url= \"http://hypnotoad.org?hail=all\"",
          "559:   ,.num_headers= 0",
          "560:   ,.headers= { }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "629:   ,.query_string= \"hail=all\"",
          "630:   ,.fragment= \"\"",
          "631:   ,.request_path= \"\"",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "571:   ,.http_major= 1",
          "572:   ,.http_minor= 1",
          "573:   ,.method= HTTP_GET",
          "574:   ,.request_url= \"http://hypnotoad.org:1234?hail=all\"",
          "575:   ,.num_headers= 0",
          "576:   ,.headers= { }",
          "577:   ,.body= \"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "648:   ,.query_string= \"hail=all\"",
          "649:   ,.fragment= \"\"",
          "650:   ,.request_path= \"\"",
          "652:   ,.port= 1234",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "587:   ,.http_major= 1",
          "588:   ,.http_minor= 1",
          "589:   ,.method= HTTP_GET",
          "590:   ,.request_url= \"http://hypnotoad.org:1234\"",
          "591:   ,.num_headers= 0",
          "592:   ,.headers= { }",
          "593:   ,.body= \"\"",
          "594:   }",
          "596: #if !HTTP_PARSER_STRICT",
          "598: , {.name= \"utf-8 path request\"",
          "599:   ,.type= HTTP_REQUEST",
          "600:   ,.raw= \"GET /\u03b4\u00b6/\u03b4t/pope?q=1#narf HTTP/1.1\\r\\n\"",
          "",
          "[Removed Lines]",
          "597: #define UTF8_PATH_REQ 24",
          "",
          "[Added Lines]",
          "668:   ,.query_string= \"\"",
          "669:   ,.fragment= \"\"",
          "670:   ,.request_path= \"\"",
          "672:   ,.port= 1234",
          "678: #define PATCH_REQ 24",
          "679: , {.name = \"PATCH request\"",
          "680:   ,.type= HTTP_REQUEST",
          "681:   ,.raw= \"PATCH /file.txt HTTP/1.1\\r\\n\"",
          "682:          \"Host: www.example.com\\r\\n\"",
          "683:          \"Content-Type: application/example\\r\\n\"",
          "684:          \"If-Match: \\\"e0023aa4e\\\"\\r\\n\"",
          "685:          \"Content-Length: 10\\r\\n\"",
          "686:          \"\\r\\n\"",
          "687:          \"cccccccccc\"",
          "688:   ,.should_keep_alive= TRUE",
          "689:   ,.message_complete_on_eof= FALSE",
          "690:   ,.http_major= 1",
          "691:   ,.http_minor= 1",
          "692:   ,.method= HTTP_PATCH",
          "693:   ,.query_string= \"\"",
          "694:   ,.fragment= \"\"",
          "695:   ,.request_path= \"/file.txt\"",
          "696:   ,.request_url= \"/file.txt\"",
          "697:   ,.num_headers= 4",
          "698:   ,.headers= { { \"Host\", \"www.example.com\" }",
          "699:              , { \"Content-Type\", \"application/example\" }",
          "700:              , { \"If-Match\", \"\\\"e0023aa4e\\\"\" }",
          "701:              , { \"Content-Length\", \"10\" }",
          "702:              }",
          "703:   ,.body= \"cccccccccc\"",
          "704:   }",
          "706: #define CONNECT_CAPS_REQUEST 25",
          "707: , {.name = \"connect caps request\"",
          "708:   ,.type= HTTP_REQUEST",
          "709:   ,.raw= \"CONNECT HOME0.NETSCAPE.COM:443 HTTP/1.0\\r\\n\"",
          "710:          \"User-agent: Mozilla/1.1N\\r\\n\"",
          "711:          \"Proxy-authorization: basic aGVsbG86d29ybGQ=\\r\\n\"",
          "712:          \"\\r\\n\"",
          "713:   ,.should_keep_alive= FALSE",
          "714:   ,.message_complete_on_eof= FALSE",
          "715:   ,.http_major= 1",
          "716:   ,.http_minor= 0",
          "717:   ,.method= HTTP_CONNECT",
          "718:   ,.query_string= \"\"",
          "719:   ,.fragment= \"\"",
          "720:   ,.request_path= \"\"",
          "721:   ,.request_url= \"HOME0.NETSCAPE.COM:443\"",
          "722:   ,.num_headers= 2",
          "723:   ,.upgrade=\"\"",
          "724:   ,.headers= { { \"User-agent\", \"Mozilla/1.1N\" }",
          "725:              , { \"Proxy-authorization\", \"basic aGVsbG86d29ybGQ=\" }",
          "726:              }",
          "727:   ,.body= \"\"",
          "728:   }",
          "731: #define UTF8_PATH_REQ 26",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "605:   ,.http_major= 1",
          "606:   ,.http_minor= 1",
          "607:   ,.method= HTTP_GET",
          "608:   ,.request_url= \"/\u03b4\u00b6/\u03b4t/pope?q=1#narf\"",
          "609:   ,.num_headers= 1",
          "610:   ,.headers= { {\"Host\", \"github.com\" }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "742:   ,.query_string= \"q=1\"",
          "743:   ,.fragment= \"narf\"",
          "744:   ,.request_path= \"/\u03b4\u00b6/\u03b4t/pope\"",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "612:   ,.body= \"\"",
          "613:   }",
          "616: , {.name = \"hostname underscore\"",
          "617:   ,.type= HTTP_REQUEST",
          "618:   ,.raw= \"CONNECT home_0.netscape.com:443 HTTP/1.0\\r\\n\"",
          "",
          "[Removed Lines]",
          "615: #define HOSTNAME_UNDERSCORE 25",
          "",
          "[Added Lines]",
          "752: #define HOSTNAME_UNDERSCORE 27",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "624:   ,.http_major= 1",
          "625:   ,.http_minor= 0",
          "626:   ,.method= HTTP_CONNECT",
          "627:   ,.request_url= \"home_0.netscape.com:443\"",
          "628:   ,.num_headers= 2",
          "629:   ,.upgrade=\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "764:   ,.query_string= \"\"",
          "765:   ,.fragment= \"\"",
          "766:   ,.request_path= \"\"",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "634:   }",
          "641:          \"Host: www.example.com\\r\\n\"",
          "645:          \"\\r\\n\"",
          "647:   ,.should_keep_alive= TRUE",
          "648:   ,.message_complete_on_eof= FALSE",
          "649:   ,.http_major= 1",
          "650:   ,.http_minor= 1",
          "653:   ,.num_headers= 4",
          "654:   ,.headers= { { \"Host\", \"www.example.com\" }",
          "658:              }",
          "660:   }",
          "664:   ,.type= HTTP_REQUEST",
          "668:          \"\\r\\n\"",
          "670:   ,.message_complete_on_eof= FALSE",
          "671:   ,.http_major= 1",
          "680:   ,.body= \"\"",
          "681:   }",
          "",
          "[Removed Lines]",
          "637: #define PATCH_REQ 26",
          "638: , {.name = \"PATCH request\"",
          "639:   ,.type= HTTP_REQUEST",
          "640:   ,.raw= \"PATCH /file.txt HTTP/1.1\\r\\n\"",
          "642:          \"Content-Type: application/example\\r\\n\"",
          "643:          \"If-Match: \\\"e0023aa4e\\\"\\r\\n\"",
          "644:          \"Content-Length: 10\\r\\n\"",
          "646:          \"cccccccccc\"",
          "651:   ,.method= HTTP_PATCH",
          "652:   ,.request_url= \"/file.txt\"",
          "655:              , { \"Content-Type\", \"application/example\" }",
          "656:              , { \"If-Match\", \"\\\"e0023aa4e\\\"\" }",
          "657:              , { \"Content-Length\", \"10\" }",
          "659:   ,.body= \"cccccccccc\"",
          "662: #define CONNECT_CAPS_REQUEST 27",
          "663: , {.name = \"connect caps request\"",
          "665:   ,.raw= \"CONNECT HOME0.NETSCAPE.COM:443 HTTP/1.0\\r\\n\"",
          "666:          \"User-agent: Mozilla/1.1N\\r\\n\"",
          "667:          \"Proxy-authorization: basic aGVsbG86d29ybGQ=\\r\\n\"",
          "669:   ,.should_keep_alive= FALSE",
          "672:   ,.http_minor= 0",
          "673:   ,.method= HTTP_CONNECT",
          "674:   ,.request_url= \"HOME0.NETSCAPE.COM:443\"",
          "675:   ,.num_headers= 2",
          "676:   ,.upgrade=\"\"",
          "677:   ,.headers= { { \"User-agent\", \"Mozilla/1.1N\" }",
          "678:              , { \"Proxy-authorization\", \"basic aGVsbG86d29ybGQ=\" }",
          "679:              }",
          "",
          "[Added Lines]",
          "778: #define EAT_TRAILING_CRLF_NO_CONNECTION_CLOSE 28",
          "779: , {.name = \"eat CRLF between requests, no \\\"Connection: close\\\" header\"",
          "780:   ,.raw= \"POST / HTTP/1.1\\r\\n\"",
          "782:          \"Content-Type: application/x-www-form-urlencoded\\r\\n\"",
          "783:          \"Content-Length: 4\\r\\n\"",
          "790:   ,.method= HTTP_POST",
          "791:   ,.query_string= \"\"",
          "792:   ,.fragment= \"\"",
          "793:   ,.request_path= \"/\"",
          "794:   ,.request_url= \"/\"",
          "795:   ,.num_headers= 3",
          "796:   ,.upgrade= 0",
          "797:   ,.headers= { { \"Host\", \"www.example.com\" }",
          "798:              , { \"Content-Type\", \"application/x-www-form-urlencoded\" }",
          "799:              , { \"Content-Length\", \"4\" }",
          "800:              }",
          "801:   ,.body= \"q=42\"",
          "802:   }",
          "805: #define EAT_TRAILING_CRLF_WITH_CONNECTION_CLOSE 29",
          "806: , {.name = \"eat CRLF between requests even if \\\"Connection: close\\\" is set\"",
          "807:   ,.raw= \"POST / HTTP/1.1\\r\\n\"",
          "808:          \"Host: www.example.com\\r\\n\"",
          "809:          \"Content-Type: application/x-www-form-urlencoded\\r\\n\"",
          "810:          \"Content-Length: 4\\r\\n\"",
          "811:          \"Connection: close\\r\\n\"",
          "812:          \"\\r\\n\"",
          "814:   ,.should_keep_alive= FALSE",
          "816:   ,.http_major= 1",
          "817:   ,.http_minor= 1",
          "818:   ,.method= HTTP_POST",
          "819:   ,.query_string= \"\"",
          "820:   ,.fragment= \"\"",
          "821:   ,.request_path= \"/\"",
          "822:   ,.request_url= \"/\"",
          "824:   ,.upgrade= 0",
          "826:              , { \"Content-Type\", \"application/x-www-form-urlencoded\" }",
          "827:              , { \"Content-Length\", \"4\" }",
          "828:              , { \"Connection\", \"close\" }",
          "830:   ,.body= \"q=42\"",
          "833: #define PURGE_REQ 30",
          "834: , {.name = \"PURGE request\"",
          "836:   ,.raw= \"PURGE /file.txt HTTP/1.1\\r\\n\"",
          "837:          \"Host: www.example.com\\r\\n\"",
          "839:   ,.should_keep_alive= TRUE",
          "842:   ,.http_minor= 1",
          "843:   ,.method= HTTP_PURGE",
          "844:   ,.query_string= \"\"",
          "845:   ,.fragment= \"\"",
          "846:   ,.request_path= \"/file.txt\"",
          "847:   ,.request_url= \"/file.txt\"",
          "848:   ,.num_headers= 1",
          "849:   ,.headers= { { \"Host\", \"www.example.com\" } }",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "780: , {.name= \"404 no headers no body\"",
          "781:   ,.type= HTTP_RESPONSE",
          "782:   ,.raw= \"HTTP/1.1 404 Not Found\\r\\n\\r\\n\"",
          "785:   ,.http_major= 1",
          "786:   ,.http_minor= 1",
          "787:   ,.status_code= 404",
          "",
          "[Removed Lines]",
          "783:   ,.should_keep_alive= TRUE",
          "784:   ,.message_complete_on_eof= FALSE",
          "",
          "[Added Lines]",
          "953:   ,.should_keep_alive= FALSE",
          "954:   ,.message_complete_on_eof= TRUE",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "795: , {.name= \"301 no response phrase\"",
          "796:   ,.type= HTTP_RESPONSE",
          "797:   ,.raw= \"HTTP/1.1 301\\r\\n\\r\\n\"",
          "800:   ,.http_major= 1",
          "801:   ,.http_minor= 1",
          "802:   ,.status_code= 301",
          "",
          "[Removed Lines]",
          "798:   ,.should_keep_alive = TRUE",
          "799:   ,.message_complete_on_eof= FALSE",
          "",
          "[Added Lines]",
          "968:   ,.should_keep_alive = FALSE",
          "969:   ,.message_complete_on_eof= TRUE",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "945:   ,.body= \"\"",
          "946:   }",
          "983: , {.name= \"field underscore\"",
          "984:   ,.type= HTTP_RESPONSE",
          "",
          "[Removed Lines]",
          "948: #define SPACE_IN_FIELD_RES 9",
          "950: , {.name= \"field space\"",
          "951:   ,.type= HTTP_RESPONSE",
          "952:   ,.raw= \"HTTP/1.1 200 OK\\r\\n\"",
          "953:          \"Server: Microsoft-IIS/6.0\\r\\n\"",
          "954:          \"X-Powered-By: ASP.NET\\r\\n\"",
          "956:          \"Content-Type: text/xml\\r\\n\"",
          "957:          \"Content-Length: 16\\r\\n\"",
          "958:          \"Date: Fri, 23 Jul 2010 18:45:38 GMT\\r\\n\"",
          "959:          \"Connection: keep-alive\\r\\n\"",
          "960:          \"\\r\\n\"",
          "962:   ,.should_keep_alive= TRUE",
          "963:   ,.message_complete_on_eof= FALSE",
          "964:   ,.http_major= 1",
          "965:   ,.http_minor= 1",
          "966:   ,.status_code= 200",
          "967:   ,.num_headers= 7",
          "968:   ,.headers=",
          "969:     { { \"Server\",  \"Microsoft-IIS/6.0\" }",
          "970:     , { \"X-Powered-By\", \"ASP.NET\" }",
          "971:     , { \"en-US Content-Type\", \"text/xml\" }",
          "972:     , { \"Content-Type\", \"text/xml\" }",
          "973:     , { \"Content-Length\", \"16\" }",
          "974:     , { \"Date\", \"Fri, 23 Jul 2010 18:45:38 GMT\" }",
          "975:     , { \"Connection\", \"keep-alive\" }",
          "976:     }",
          "977:   ,.body= \"<xml>hello</xml>\"",
          "978:   }",
          "981: #define RES_FIELD_UNDERSCORE 10",
          "",
          "[Added Lines]",
          "1118: #define RES_FIELD_UNDERSCORE 9",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1018:   ,.body= \"\"",
          "1019:   }",
          "1023: , {.name= \"non-ASCII in status line\"",
          "1024:   ,.type= HTTP_RESPONSE",
          "",
          "[Removed Lines]",
          "1021: #define NON_ASCII_IN_STATUS_LINE 11",
          "",
          "[Added Lines]",
          "1158: #define NON_ASCII_IN_STATUS_LINE 10",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1041:   ,.body= \"\"",
          "1042:   }",
          "1046: , {.name= \"http version 0.9\"",
          "1047:   ,.type= HTTP_RESPONSE",
          "",
          "[Removed Lines]",
          "1044: #define HTTP_VERSION_0_9 12",
          "",
          "[Added Lines]",
          "1181: #define HTTP_VERSION_0_9 11",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1057:     {}",
          "1058:   ,.body= \"\"",
          "1059:   }",
          "1062: };",
          "1064: int",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1198: #define NO_CONTENT_LENGTH_NO_TRANSFER_ENCODING_RESPONSE 12",
          "1203: , {.name= \"neither content-length nor transfer-encoding response\"",
          "1204:   ,.type= HTTP_RESPONSE",
          "1205:   ,.raw= \"HTTP/1.1 200 OK\\r\\n\"",
          "1206:          \"Content-Type: text/plain\\r\\n\"",
          "1207:          \"\\r\\n\"",
          "1208:          \"hello world\"",
          "1209:   ,.should_keep_alive= FALSE",
          "1210:   ,.message_complete_on_eof= TRUE",
          "1211:   ,.http_major= 1",
          "1212:   ,.http_minor= 1",
          "1213:   ,.status_code= 200",
          "1214:   ,.num_headers= 1",
          "1215:   ,.headers=",
          "1216:     { { \"Content-Type\", \"text/plain\" }",
          "1217:     }",
          "1218:   ,.body= \"hello world\"",
          "1219:   }",
          "1221: #define NO_BODY_HTTP10_KA_200 13",
          "1222: , {.name= \"HTTP/1.0 with keep-alive and EOF-terminated 200 status\"",
          "1223:   ,.type= HTTP_RESPONSE",
          "1224:   ,.raw= \"HTTP/1.0 200 OK\\r\\n\"",
          "1225:          \"Connection: keep-alive\\r\\n\"",
          "1226:          \"\\r\\n\"",
          "1227:   ,.should_keep_alive= FALSE",
          "1228:   ,.message_complete_on_eof= TRUE",
          "1229:   ,.http_major= 1",
          "1230:   ,.http_minor= 0",
          "1231:   ,.status_code= 200",
          "1232:   ,.num_headers= 1",
          "1233:   ,.headers=",
          "1234:     { { \"Connection\", \"keep-alive\" }",
          "1235:     }",
          "1236:   ,.body_size= 0",
          "1237:   ,.body= \"\"",
          "1238:   }",
          "1240: #define NO_BODY_HTTP10_KA_204 14",
          "1241: , {.name= \"HTTP/1.0 with keep-alive and a 204 status\"",
          "1242:   ,.type= HTTP_RESPONSE",
          "1243:   ,.raw= \"HTTP/1.0 204 No content\\r\\n\"",
          "1244:          \"Connection: keep-alive\\r\\n\"",
          "1245:          \"\\r\\n\"",
          "1246:   ,.should_keep_alive= TRUE",
          "1247:   ,.message_complete_on_eof= FALSE",
          "1248:   ,.http_major= 1",
          "1249:   ,.http_minor= 0",
          "1250:   ,.status_code= 204",
          "1251:   ,.num_headers= 1",
          "1252:   ,.headers=",
          "1253:     { { \"Connection\", \"keep-alive\" }",
          "1254:     }",
          "1255:   ,.body_size= 0",
          "1256:   ,.body= \"\"",
          "1257:   }",
          "1259: #define NO_BODY_HTTP11_KA_200 15",
          "1260: , {.name= \"HTTP/1.1 with an EOF-terminated 200 status\"",
          "1261:   ,.type= HTTP_RESPONSE",
          "1262:   ,.raw= \"HTTP/1.1 200 OK\\r\\n\"",
          "1263:          \"\\r\\n\"",
          "1264:   ,.should_keep_alive= FALSE",
          "1265:   ,.message_complete_on_eof= TRUE",
          "1266:   ,.http_major= 1",
          "1267:   ,.http_minor= 1",
          "1268:   ,.status_code= 200",
          "1269:   ,.num_headers= 0",
          "1270:   ,.headers={}",
          "1271:   ,.body_size= 0",
          "1272:   ,.body= \"\"",
          "1273:   }",
          "1275: #define NO_BODY_HTTP11_KA_204 16",
          "1276: , {.name= \"HTTP/1.1 with a 204 status\"",
          "1277:   ,.type= HTTP_RESPONSE",
          "1278:   ,.raw= \"HTTP/1.1 204 No content\\r\\n\"",
          "1279:          \"\\r\\n\"",
          "1280:   ,.should_keep_alive= TRUE",
          "1281:   ,.message_complete_on_eof= FALSE",
          "1282:   ,.http_major= 1",
          "1283:   ,.http_minor= 1",
          "1284:   ,.status_code= 204",
          "1285:   ,.num_headers= 0",
          "1286:   ,.headers={}",
          "1287:   ,.body_size= 0",
          "1288:   ,.body= \"\"",
          "1289:   }",
          "1291: #define NO_BODY_HTTP11_NOKA_204 17",
          "1292: , {.name= \"HTTP/1.1 with a 204 status and keep-alive disabled\"",
          "1293:   ,.type= HTTP_RESPONSE",
          "1294:   ,.raw= \"HTTP/1.1 204 No content\\r\\n\"",
          "1295:          \"Connection: close\\r\\n\"",
          "1296:          \"\\r\\n\"",
          "1297:   ,.should_keep_alive= FALSE",
          "1298:   ,.message_complete_on_eof= FALSE",
          "1299:   ,.http_major= 1",
          "1300:   ,.http_minor= 1",
          "1301:   ,.status_code= 204",
          "1302:   ,.num_headers= 1",
          "1303:   ,.headers=",
          "1304:     { { \"Connection\", \"close\" }",
          "1305:     }",
          "1306:   ,.body_size= 0",
          "1307:   ,.body= \"\"",
          "1308:   }",
          "1310: #define NO_BODY_HTTP11_KA_CHUNKED_200 18",
          "1311: , {.name= \"HTTP/1.1 with chunked endocing and a 200 response\"",
          "1312:   ,.type= HTTP_RESPONSE",
          "1313:   ,.raw= \"HTTP/1.1 200 OK\\r\\n\"",
          "1314:          \"Transfer-Encoding: chunked\\r\\n\"",
          "1315:          \"\\r\\n\"",
          "1316:          \"0\\r\\n\"",
          "1317:          \"\\r\\n\"",
          "1318:   ,.should_keep_alive= TRUE",
          "1319:   ,.message_complete_on_eof= FALSE",
          "1320:   ,.http_major= 1",
          "1321:   ,.http_minor= 1",
          "1322:   ,.status_code= 200",
          "1323:   ,.num_headers= 1",
          "1324:   ,.headers=",
          "1325:     { { \"Transfer-Encoding\", \"chunked\" }",
          "1326:     }",
          "1327:   ,.body_size= 0",
          "1328:   ,.body= \"\"",
          "1329:   }",
          "1331: #if !HTTP_PARSER_STRICT",
          "1332: #define SPACE_IN_FIELD_RES 19",
          "1334: , {.name= \"field space\"",
          "1335:   ,.type= HTTP_RESPONSE",
          "1336:   ,.raw= \"HTTP/1.1 200 OK\\r\\n\"",
          "1337:          \"Server: Microsoft-IIS/6.0\\r\\n\"",
          "1338:          \"X-Powered-By: ASP.NET\\r\\n\"",
          "1340:          \"Content-Type: text/xml\\r\\n\"",
          "1341:          \"Content-Length: 16\\r\\n\"",
          "1342:          \"Date: Fri, 23 Jul 2010 18:45:38 GMT\\r\\n\"",
          "1343:          \"Connection: keep-alive\\r\\n\"",
          "1344:          \"\\r\\n\"",
          "1346:   ,.should_keep_alive= TRUE",
          "1347:   ,.message_complete_on_eof= FALSE",
          "1348:   ,.http_major= 1",
          "1349:   ,.http_minor= 1",
          "1350:   ,.status_code= 200",
          "1351:   ,.num_headers= 7",
          "1352:   ,.headers=",
          "1353:     { { \"Server\",  \"Microsoft-IIS/6.0\" }",
          "1354:     , { \"X-Powered-By\", \"ASP.NET\" }",
          "1355:     , { \"en-US Content-Type\", \"text/xml\" }",
          "1356:     , { \"Content-Type\", \"text/xml\" }",
          "1357:     , { \"Content-Length\", \"16\" }",
          "1358:     , { \"Date\", \"Fri, 23 Jul 2010 18:45:38 GMT\" }",
          "1359:     , { \"Connection\", \"keep-alive\" }",
          "1360:     }",
          "1361:   ,.body= \"<xml>hello</xml>\"",
          "1362:   }",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1158:   return 0;",
          "1159: }",
          "1161: static http_parser_settings settings =",
          "1162:   {.on_message_begin = message_begin_cb",
          "1163:   ,.on_header_field = header_field_cb",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1467: int",
          "1468: dontcall_message_begin_cb (http_parser *p)",
          "1469: {",
          "1470:   if (p) { } // gcc",
          "1471:   fprintf(stderr, \"\\n\\n*** on_message_begin() called on paused parser ***\\n\\n\");",
          "1472:   exit(1);",
          "1473: }",
          "1475: int",
          "1476: dontcall_header_field_cb (http_parser *p, const char *buf, size_t len)",
          "1477: {",
          "1478:   if (p || buf || len) { } // gcc",
          "1479:   fprintf(stderr, \"\\n\\n*** on_header_field() called on paused parser ***\\n\\n\");",
          "1480:   exit(1);",
          "1481: }",
          "1483: int",
          "1484: dontcall_header_value_cb (http_parser *p, const char *buf, size_t len)",
          "1485: {",
          "1486:   if (p || buf || len) { } // gcc",
          "1487:   fprintf(stderr, \"\\n\\n*** on_header_value() called on paused parser ***\\n\\n\");",
          "1488:   exit(1);",
          "1489: }",
          "1491: int",
          "1492: dontcall_request_url_cb (http_parser *p, const char *buf, size_t len)",
          "1493: {",
          "1494:   if (p || buf || len) { } // gcc",
          "1495:   fprintf(stderr, \"\\n\\n*** on_request_url() called on paused parser ***\\n\\n\");",
          "1496:   exit(1);",
          "1497: }",
          "1499: int",
          "1500: dontcall_body_cb (http_parser *p, const char *buf, size_t len)",
          "1501: {",
          "1502:   if (p || buf || len) { } // gcc",
          "1503:   fprintf(stderr, \"\\n\\n*** on_body_cb() called on paused parser ***\\n\\n\");",
          "1504:   exit(1);",
          "1505: }",
          "1507: int",
          "1508: dontcall_headers_complete_cb (http_parser *p)",
          "1509: {",
          "1510:   if (p) { } // gcc",
          "1511:   fprintf(stderr, \"\\n\\n*** on_headers_complete() called on paused \"",
          "1512:                   \"parser ***\\n\\n\");",
          "1513:   exit(1);",
          "1514: }",
          "1516: int",
          "1517: dontcall_message_complete_cb (http_parser *p)",
          "1518: {",
          "1519:   if (p) { } // gcc",
          "1520:   fprintf(stderr, \"\\n\\n*** on_message_complete() called on paused \"",
          "1521:                   \"parser ***\\n\\n\");",
          "1522:   exit(1);",
          "1523: }",
          "1525: static http_parser_settings settings_dontcall =",
          "1526:   {.on_message_begin = dontcall_message_begin_cb",
          "1527:   ,.on_header_field = dontcall_header_field_cb",
          "1528:   ,.on_header_value = dontcall_header_value_cb",
          "1529:   ,.on_url = dontcall_request_url_cb",
          "1530:   ,.on_body = dontcall_body_cb",
          "1531:   ,.on_headers_complete = dontcall_headers_complete_cb",
          "1532:   ,.on_message_complete = dontcall_message_complete_cb",
          "1533:   };",
          "1539: int",
          "1540: pause_message_begin_cb (http_parser *p)",
          "1541: {",
          "1542:   http_parser_pause(p, 1);",
          "1544:   return message_begin_cb(p);",
          "1545: }",
          "1547: int",
          "1548: pause_header_field_cb (http_parser *p, const char *buf, size_t len)",
          "1549: {",
          "1550:   http_parser_pause(p, 1);",
          "1552:   return header_field_cb(p, buf, len);",
          "1553: }",
          "1555: int",
          "1556: pause_header_value_cb (http_parser *p, const char *buf, size_t len)",
          "1557: {",
          "1558:   http_parser_pause(p, 1);",
          "1560:   return header_value_cb(p, buf, len);",
          "1561: }",
          "1563: int",
          "1564: pause_request_url_cb (http_parser *p, const char *buf, size_t len)",
          "1565: {",
          "1566:   http_parser_pause(p, 1);",
          "1568:   return request_url_cb(p, buf, len);",
          "1569: }",
          "1571: int",
          "1572: pause_body_cb (http_parser *p, const char *buf, size_t len)",
          "1573: {",
          "1574:   http_parser_pause(p, 1);",
          "1576:   return body_cb(p, buf, len);",
          "1577: }",
          "1579: int",
          "1580: pause_headers_complete_cb (http_parser *p)",
          "1581: {",
          "1582:   http_parser_pause(p, 1);",
          "1584:   return headers_complete_cb(p);",
          "1585: }",
          "1587: int",
          "1588: pause_message_complete_cb (http_parser *p)",
          "1589: {",
          "1590:   http_parser_pause(p, 1);",
          "1592:   return message_complete_cb(p);",
          "1593: }",
          "1595: static http_parser_settings settings_pause =",
          "1596:   {.on_message_begin = pause_message_begin_cb",
          "1597:   ,.on_header_field = pause_header_field_cb",
          "1598:   ,.on_header_value = pause_header_value_cb",
          "1599:   ,.on_url = pause_request_url_cb",
          "1600:   ,.on_body = pause_body_cb",
          "1601:   ,.on_headers_complete = pause_headers_complete_cb",
          "1602:   ,.on_message_complete = pause_message_complete_cb",
          "1603:   };",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1227:   return nparsed;",
          "1228: }",
          "1230: static inline int",
          "1231: check_str_eq (const struct message *m,",
          "1232:               const char *prop,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1674: size_t parse_pause (const char *buf, size_t len)",
          "1675: {",
          "1676:   size_t nparsed;",
          "1677:   http_parser_settings s = settings_pause;",
          "1679:   currently_parsing_eof = (len == 0);",
          "1680:   current_pause_parser = &s;",
          "1681:   nparsed = http_parser_execute(parser, current_pause_parser, buf, len);",
          "1682:   return nparsed;",
          "1683: }",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1267: #define MESSAGE_CHECK_NUM_EQ(expected, found, prop) \\",
          "1268:   if (!check_num_eq(expected, #prop, expected->prop, found->prop)) return 0",
          "1271: int",
          "1272: message_eq (int index, const struct message *expected)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1725: #define MESSAGE_CHECK_URL_EQ(u, expected, found, prop, fn)           \\",
          "1726: do {                                                                 \\",
          "1727:   char ubuf[256];                                                    \\",
          "1728:                                                                      \\",
          "1729:   if ((u)->field_set & (1 << (fn))) {                                \\",
          "1730:     memcpy(ubuf, (found)->request_url + (u)->field_data[(fn)].off,   \\",
          "1731:       (u)->field_data[(fn)].len);                                    \\",
          "1732:     ubuf[(u)->field_data[(fn)].len] = '\\0';                          \\",
          "1733:   } else {                                                           \\",
          "1734:     ubuf[0] = '\\0';                                                  \\",
          "1735:   }                                                                  \\",
          "1736:                                                                      \\",
          "1737:   check_str_eq(expected, #prop, expected->prop, ubuf);               \\",
          "1738: } while(0)",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1294:   MESSAGE_CHECK_STR_EQ(expected, m, request_url);",
          "1295:   if (expected->body_size) {",
          "1296:     MESSAGE_CHECK_NUM_EQ(expected, m, body_size);",
          "1297:   } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1768:   if (*m->request_url && m->method != HTTP_CONNECT) {",
          "1769:     struct http_parser_url u;",
          "1771:     if (http_parser_parse_url(m->request_url, strlen(m->request_url), 0, &u)) {",
          "1772:       fprintf(stderr, \"\\n\\n*** failed to parse URL %s ***\\n\\n\",",
          "1773:         m->request_url);",
          "1774:       exit(1);",
          "1775:     }",
          "1777:     m->port = (u.field_set & (1 << UF_PORT)) ?",
          "1778:       u.port : 0;",
          "1780:     MESSAGE_CHECK_URL_EQ(&u, expected, m, query_string, UF_QUERY);",
          "1781:     MESSAGE_CHECK_URL_EQ(&u, expected, m, fragment, UF_FRAGMENT);",
          "1782:     MESSAGE_CHECK_URL_EQ(&u, expected, m, request_path, UF_PATH);",
          "1783:     MESSAGE_CHECK_NUM_EQ(expected, m, port);",
          "1784:   }",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1420:   fprintf(stderr, \"^\\n\\nerror location: %u\\n\", (unsigned int)error_location);",
          "1421: }",
          "1424: void",
          "1425: test_message (const struct message *message)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1914: void",
          "1915: test_preserve_data (void)",
          "1916: {",
          "1917:   char my_data[] = \"application-specific data\";",
          "1918:   http_parser parser;",
          "1919:   parser.data = my_data;",
          "1920:   http_parser_init(&parser, HTTP_REQUEST);",
          "1921:   if (parser.data != my_data) {",
          "1922:     printf(\"\\n*** parser.data not preserved accross http_parser_init ***\\n\\n\");",
          "1923:     exit(1);",
          "1924:   }",
          "1925: }",
          "1927: struct url_test {",
          "1928:   const char *name;",
          "1929:   const char *url;",
          "1930:   int is_connect;",
          "1931:   struct http_parser_url u;",
          "1932:   int rv;",
          "1933: };",
          "1935: const struct url_test url_tests[] =",
          "1936: { {.name=\"proxy request\"",
          "1937:   ,.url=\"http://hostname/\"",
          "1938:   ,.is_connect=0",
          "1939:   ,.u=",
          "1940:     {.field_set=(1 << UF_SCHEMA) | (1 << UF_HOST) | (1 << UF_PATH)",
          "1941:     ,.port=0",
          "1942:     ,.field_data=",
          "1949:       }",
          "1950:     }",
          "1951:   ,.rv=0",
          "1952:   }",
          "1954: , {.name=\"CONNECT request\"",
          "1955:   ,.url=\"hostname:443\"",
          "1956:   ,.is_connect=1",
          "1957:   ,.u=",
          "1958:     {.field_set=(1 << UF_HOST) | (1 << UF_PORT)",
          "1959:     ,.port=443",
          "1960:     ,.field_data=",
          "1967:       }",
          "1968:     }",
          "1969:   ,.rv=0",
          "1970:   }",
          "1972: , {.name=\"proxy ipv6 request\"",
          "1973:   ,.url=\"http://[1:2::3:4]/\"",
          "1974:   ,.is_connect=0",
          "1975:   ,.u=",
          "1976:     {.field_set=(1 << UF_SCHEMA) | (1 << UF_HOST) | (1 << UF_PATH)",
          "1977:     ,.port=0",
          "1978:     ,.field_data=",
          "1985:       }",
          "1986:     }",
          "1987:   ,.rv=0",
          "1988:   }",
          "1990: , {.name=\"CONNECT ipv6 address\"",
          "1991:   ,.url=\"[1:2::3:4]:443\"",
          "1992:   ,.is_connect=1",
          "1993:   ,.u=",
          "1994:     {.field_set=(1 << UF_HOST) | (1 << UF_PORT)",
          "1995:     ,.port=443",
          "1996:     ,.field_data=",
          "2003:       }",
          "2004:     }",
          "2005:   ,.rv=0",
          "2006:   }",
          "2008: , {.name=\"extra ? in query string\"",
          "2009:   ,.url=\"http://a.tbcdn.cn/p/fp/2010c/??fp-header-min.css,fp-base-min.css,fp-channel-min.css,fp-product-min.css,fp-mall-min.css,fp-category-min.css,fp-sub-min.css,fp-gdp4p-min.css,fp-css3-min.css,fp-misc-min.css?t=20101022.css\"",
          "2010:   ,.is_connect=0",
          "2011:   ,.u=",
          "2012:     {.field_set=(1<<UF_SCHEMA) | (1<<UF_HOST) | (1<<UF_PATH) | (1<<UF_QUERY)",
          "2013:     ,.port=0",
          "2014:     ,.field_data=",
          "2021:       }",
          "2022:     }",
          "2023:   ,.rv=0",
          "2024:   }",
          "2026: , {.name=\"proxy empty host\"",
          "2027:   ,.url=\"http://:443/\"",
          "2028:   ,.is_connect=0",
          "2029:   ,.rv=1",
          "2030:   }",
          "2032: , {.name=\"proxy empty port\"",
          "2033:   ,.url=\"http://hostname:/\"",
          "2034:   ,.is_connect=0",
          "2035:   ,.rv=1",
          "2036:   }",
          "2038: , {.name=\"CONNECT empty host\"",
          "2039:   ,.url=\":443\"",
          "2040:   ,.is_connect=1",
          "2041:   ,.rv=1",
          "2042:   }",
          "2044: , {.name=\"CONNECT empty port\"",
          "2045:   ,.url=\"hostname:\"",
          "2046:   ,.is_connect=1",
          "2047:   ,.rv=1",
          "2048:   }",
          "2050: , {.name=\"CONNECT with extra bits\"",
          "2051:   ,.url=\"hostname:443/\"",
          "2052:   ,.is_connect=1",
          "2053:   ,.rv=1",
          "2054:   }",
          "2055: };",
          "2057: void",
          "2058: dump_url (const char *url, const struct http_parser_url *u)",
          "2059: {",
          "2060:   char part[512];",
          "2061:   unsigned int i;",
          "2063:   printf(\"\\tfield_set: 0x%x, port: %u\\n\", u->field_set, u->port);",
          "2064:   for (i = 0; i < UF_MAX; i++) {",
          "2065:     if ((u->field_set & (1 << i)) == 0) {",
          "2066:       printf(\"\\tfield_data[%u]: unset\\n\", i);",
          "2067:       continue;",
          "2068:     }",
          "2070:     memcpy(part, url + u->field_data[i].off, u->field_data[i].len);",
          "2071:     part[u->field_data[i].len] = '\\0';",
          "2073:     printf(\"\\tfield_data[%u]: off: %u len: %u part: \\\"%s\\\"\\n\",",
          "2074:            i,",
          "2075:            u->field_data[i].off,",
          "2076:            u->field_data[i].len,",
          "2077:            part);",
          "2078:   }",
          "2079: }",
          "2081: void",
          "2082: test_parse_url (void)",
          "2083: {",
          "2084:   struct http_parser_url u;",
          "2085:   const struct url_test *test;",
          "2086:   unsigned int i;",
          "2087:   int rv;",
          "2089:   for (i = 0; i < (sizeof(url_tests) / sizeof(url_tests[0])); i++) {",
          "2090:     test = &url_tests[i];",
          "2091:     memset(&u, 0, sizeof(u));",
          "2093:     rv = http_parser_parse_url(test->url,",
          "2094:                                strlen(test->url),",
          "2095:                                test->is_connect,",
          "2096:                                &u);",
          "2098:     if (test->rv == 0) {",
          "2099:       if (rv != 0) {",
          "2100:         printf(\"\\n*** http_parser_parse_url(\\\"%s\\\") \\\"%s\\\" test failed, \"",
          "2101:                \"unexpected rv %d ***\\n\\n\", test->url, test->name, rv);",
          "2102:         exit(1);",
          "2103:       }",
          "2105:       if (memcmp(&u, &test->u, sizeof(u)) != 0) {",
          "2106:         printf(\"\\n*** http_parser_parse_url(\\\"%s\\\") \\\"%s\\\" failed ***\\n\",",
          "2107:                test->url, test->name);",
          "2109:         printf(\"target http_parser_url:\\n\");",
          "2110:         dump_url(test->url, &test->u);",
          "2111:         printf(\"result http_parser_url:\\n\");",
          "2112:         dump_url(test->url, &u);",
          "2114:         exit(1);",
          "2115:       }",
          "2116:     } else {",
          "2118:       if (rv == 0) {",
          "2119:         printf(\"\\n*** http_parser_parse_url(\\\"%s\\\") \\\"%s\\\" test failed, \"",
          "2120:                \"unexpected rv %d ***\\n\\n\", test->url, test->name, rv);",
          "2121:         exit(1);",
          "2122:       }",
          "2123:     }",
          "2124:   }",
          "2125: }",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1576:   exit(1);",
          "1577: }",
          "1579: void",
          "1580: test_no_overflow_long_body (int req, size_t length)",
          "1581: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2282: static void",
          "2283: test_content_length_overflow (const char *buf, size_t buflen, int expect_ok)",
          "2284: {",
          "2285:   http_parser parser;",
          "2286:   http_parser_init(&parser, HTTP_RESPONSE);",
          "2287:   http_parser_execute(&parser, &settings_null, buf, buflen);",
          "2289:   if (expect_ok)",
          "2290:     assert(HTTP_PARSER_ERRNO(&parser) == HPE_OK);",
          "2291:   else",
          "2292:     assert(HTTP_PARSER_ERRNO(&parser) == HPE_INVALID_CONTENT_LENGTH);",
          "2293: }",
          "2295: void",
          "2296: test_header_content_length_overflow_error (void)",
          "2297: {",
          "2298: #define X(size)                                                               \\",
          "2299:   \"HTTP/1.1 200 OK\\r\\n\"                                                       \\",
          "2300:   \"Content-Length: \" #size \"\\r\\n\"                                             \\",
          "2301:   \"\\r\\n\"",
          "2305: #undef X",
          "2309: }",
          "2311: void",
          "2312: test_chunk_content_length_overflow_error (void)",
          "2313: {",
          "2314: #define X(size)                                                               \\",
          "2315:     \"HTTP/1.1 200 OK\\r\\n\"                                                     \\",
          "2316:     \"Transfer-Encoding: chunked\\r\\n\"                                          \\",
          "2317:     \"\\r\\n\"                                                                    \\",
          "2318:     #size \"\\r\\n\"                                                              \\",
          "2319:     \"...\"",
          "2323: #undef X",
          "2327: }",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1814:   return buf;",
          "1815: }",
          "1818: int",
          "1819: main (void)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2569: void",
          "2570: test_message_pause (const struct message *msg)",
          "2571: {",
          "2572:   char *buf = (char*) msg->raw;",
          "2573:   size_t buflen = strlen(msg->raw);",
          "2574:   size_t nread;",
          "2576:   parser_init(msg->type);",
          "2578:   do {",
          "2579:     nread = parse_pause(buf, buflen);",
          "2583:     if (messages[0].message_complete_cb_called &&",
          "2584:         msg->upgrade &&",
          "2585:         parser->upgrade) {",
          "2586:       messages[0].upgrade = buf + nread;",
          "2587:       goto test;",
          "2588:     }",
          "2590:     if (nread < buflen) {",
          "2593:       if (HTTP_PARSER_ERRNO(parser) == HPE_STRICT) {",
          "2594:         parser_free();",
          "2595:         return;",
          "2596:       }",
          "2598:       assert (HTTP_PARSER_ERRNO(parser) == HPE_PAUSED);",
          "2599:     }",
          "2601:     buf += nread;",
          "2602:     buflen -= nread;",
          "2603:     http_parser_pause(parser, 0);",
          "2604:   } while (buflen > 0);",
          "2606:   nread = parse_pause(NULL, 0);",
          "2607:   assert (nread == 0);",
          "2609: test:",
          "2610:   if (num_messages != 1) {",
          "2611:     printf(\"\\n*** num_messages != 1 after testing '%s' ***\\n\\n\", msg->name);",
          "2612:     exit(1);",
          "2613:   }",
          "2615:   if(!message_eq(0, msg)) exit(1);",
          "2617:   parser_free();",
          "2618: }",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1828:   for (request_count = 0; requests[request_count].name; request_count++);",
          "1829:   for (response_count = 0; responses[response_count].name; response_count++);",
          "1833:   test_header_overflow_error(HTTP_REQUEST);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2634:   test_preserve_data();",
          "2635:   test_parse_url();",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1838:   test_no_overflow_long_body(HTTP_RESPONSE, 1000);",
          "1839:   test_no_overflow_long_body(HTTP_RESPONSE, 100000);",
          "1843:   for (i = 0; i < response_count; i++) {",
          "1844:     test_message(&responses[i]);",
          "1845:   }",
          "1847:   for (i = 0; i < response_count; i++) {",
          "1848:     if (!responses[i].should_keep_alive) continue;",
          "1849:     for (j = 0; j < response_count; j++) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2647:   test_header_content_length_overflow_error();",
          "2648:   test_chunk_content_length_overflow_error();",
          "2656:   for (i = 0; i < response_count; i++) {",
          "2657:     test_message_pause(&responses[i]);",
          "2658:   }",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1889:   printf(\"response scan 1/2      \");",
          "1890:   test_scan( &responses[TRAILING_SPACE_ON_CHUNKED_BODY]",
          "1892:            , &responses[NO_REASON_PHRASE]",
          "1893:            );",
          "",
          "[Removed Lines]",
          "1891:            , &responses[NO_HEADERS_NO_BODY_404]",
          "",
          "[Added Lines]",
          "2704:            , &responses[NO_BODY_HTTP10_KA_204]",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "2019:     test_message(&requests[i]);",
          "2020:   }",
          "2024:   for (i = 0; i < request_count; i++) {",
          "2025:     if (!requests[i].should_keep_alive) continue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2835:   for (i = 0; i < request_count; i++) {",
          "2836:     test_message_pause(&requests[i]);",
          "2837:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6768d2fc936ea4d8786897ea9c5c415efedb5b24",
      "candidate_info": {
        "commit_hash": "6768d2fc936ea4d8786897ea9c5c415efedb5b24",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/6768d2fc936ea4d8786897ea9c5c415efedb5b24",
        "files": [
          "doc/about/index.html",
          "doc/api_assets/style.css",
          "doc/community/index.html",
          "doc/index.html",
          "doc/logos/index.html",
          "doc/pipe.css",
          "doc/sh.css",
          "doc/template.html",
          "tools/doctool/doctool.js"
        ],
        "message": "doc: Pixel-nudging",
        "before_after_code_files": [
          "tools/doctool/doctool.js||tools/doctool/doctool.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/doctool/doctool.js||tools/doctool/doctool.js": [
          "File: tools/doctool/doctool.js -> tools/doctool/doctool.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:       output = output.replace(\"{{section}}\", filename+\" - \")",
          "131:     } else {",
          "132:       output = output.replace(\"{{section}}\", \"\");",
          "133:       output = output.replace(/<body([^>]*)>/, '<body class=\"'+filename+'\" $1>');",
          "134:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132:       if (filename === \"index\") {",
          "133:         html = '<div id=\"toc\">' + html + '</div>';",
          "134:       }",
          "",
          "---------------"
        ]
      }
    }
  ]
}