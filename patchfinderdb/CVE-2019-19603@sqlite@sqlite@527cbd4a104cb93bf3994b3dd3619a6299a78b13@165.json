{
  "cve_id": "CVE-2019-19603",
  "cve_desc": "SQLite 3.30.1 mishandles certain SELECT statements with a nonexistent VIEW, leading to an application crash.",
  "repo": "sqlite/sqlite",
  "patch_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
  "patch_info": {
    "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab.test"
    ],
    "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab.test||test/altertab.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "856:       }",
      "857:     }",
      "858:   }else{",
      "861:     ){",
      "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
      "863:                       zName);",
      "864:       return SQLITE_ERROR;",
      "865:     }",
      "866:   }",
      "867:   return SQLITE_OK;",
      "868: }",
      "",
      "[Removed Lines]",
      "859:     if( pParse->nested==0",
      "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
      "",
      "[Added Lines]",
      "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
      "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
      "",
      "[Added Lines]",
      "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
      "2148:   return pMod->pModule->xShadowName(zTail+1);",
      "2149: }",
      "",
      "[Removed Lines]",
      "2150: #else",
      "2151: # define isShadowTableName(x,y) 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2190:   p = pParse->pNewTable;",
      "2191:   if( p==0 ) return;",
      "2194:     p->tabFlags |= TF_Shadow;",
      "2195:   }",
      "",
      "[Removed Lines]",
      "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
      "",
      "[Added Lines]",
      "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
      "4549: #endif",
      "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
      "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
      "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
      "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
      "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
      "4553: #else",
      "4554: # define sqlite3ShadowTableName(A,B) 0",
      "4555: #endif",
      "",
      "---------------"
    ],
    "test/altertab.test||test/altertab.test": [
      "File: test/altertab.test -> test/altertab.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "547:   } {1 {table y1_segments may not be modified}}",
      "549:   do_catchsql_test 16.20 {",
      "554:     DROP TABLE y1_segments;",
      "555:   } {1 {table y1_segments may not be dropped}}",
      "557:   do_execsql_test 16.30 {",
      "558:     ALTER TABLE y1 RENAME TO z1;",
      "559:   }",
      "",
      "[Removed Lines]",
      "550:     ALTER TABLE y1_segments RENAME TO abc;",
      "551:   } {1 {table y1_segments may not be altered}}",
      "553:   do_catchsql_test 16.21 {",
      "",
      "[Added Lines]",
      "553:   do_catchsql_test 16.20 {",
      "554:     ALTER TABLE y1_segments RENAME TO abc;",
      "555:   } {1 {table y1_segments may not be altered}}",
      "556:   sqlite3_db_config db DEFENSIVE 0",
      "557:   do_catchsql_test 16.22 {",
      "558:     ALTER TABLE y1_segments RENAME TO abc;",
      "559:   } {0 {}}",
      "560:   sqlite3_db_config db DEFENSIVE 1",
      "561:   do_catchsql_test 16.23 {",
      "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
      "563:   } {1 {object name reserved for internal use: y1_segments}}",
      "564:   do_catchsql_test 16.24 {",
      "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
      "566:   } {1 {object name reserved for internal use: y1_segments}}",
      "567:   sqlite3_db_config db DEFENSIVE 0",
      "568:   do_catchsql_test 16.25 {",
      "569:     ALTER TABLE abc RENAME TO y1_segments;",
      "570:   } {0 {}}",
      "571:   sqlite3_db_config db DEFENSIVE 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2a98b586c8f4c9b00e64d77668917ce8fc0304b9",
      "candidate_info": {
        "commit_hash": "2a98b586c8f4c9b00e64d77668917ce8fc0304b9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2a98b586c8f4c9b00e64d77668917ce8fc0304b9",
        "files": [
          "ext/misc/fossildelta.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Enhance the xBestIndex method on delta_parse() to return SQLITE_CONSTRAINT if no delta argument is supplied.\n\nFossilOrigin-Name: f16d127c3b4a735afae1fc236bcf90f31adff079c7d3a896f901d908ff8b8532",
        "before_after_code_files": [
          "ext/misc/fossildelta.c||ext/misc/fossildelta.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/fossildelta.c||ext/misc/fossildelta.c": [
          "File: ext/misc/fossildelta.c -> ext/misc/fossildelta.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "974:   pIdxInfo->idxNum = 0;",
          "975:   pIdxInfo->estimatedCost = (double)0x7fffffff;",
          "976:   pIdxInfo->estimatedRows = 0x7fffffff;",
          "978: }",
          "",
          "[Removed Lines]",
          "977:   return SQLITE_OK;",
          "",
          "[Added Lines]",
          "977:   return SQLITE_CONSTRAINT;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d91fcc267bf1be795dfdb1fbfb40c2aea79ddff247a51d26462136c325b7a6d3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "13b876773cea566018aa76c820971709445c8ec5",
      "candidate_info": {
        "commit_hash": "13b876773cea566018aa76c820971709445c8ec5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/13b876773cea566018aa76c820971709445c8ec5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "test/recover.test"
        ],
        "message": "Fix a problem with running the \".recover\" command on a database that is zero pages in size.\n\nFossilOrigin-Name: 47fa65343e46c7782a173174952c637c5621e16229ece258dc7e7a556683ca0c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "test/recover.test||test/recover.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d99bb0c11d62f629bf59da037827af73a9b814e65815006e0cbca1bc41f42e25",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6621:     \"WITH pages(i, maxlen) AS (\"",
          "6622:     \"  SELECT page_count, (\"",
          "6623:     \"    SELECT max(field+1) FROM sqlite_dbdata WHERE pgno=page_count\"",
          "6625:     \"    UNION ALL\"",
          "6626:     \"  SELECT i-1, (\"",
          "6627:     \"    SELECT max(field+1) FROM sqlite_dbdata WHERE pgno=i-1\"",
          "",
          "[Removed Lines]",
          "6624:     \"  ) FROM pragma_page_count\"",
          "",
          "[Added Lines]",
          "6624:     \"  ) FROM pragma_page_count WHERE page_count>0\"",
          "",
          "---------------"
        ],
        "test/recover.test||test/recover.test": [
          "File: test/recover.test -> test/recover.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:   2 2 3 {} 8 9 7",
          "128: }",
          "130: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130: #-------------------------------------------------------------------------",
          "131: reset_db",
          "132: do_recover_test 3.0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "75b0821e999cb14d4081a6ff8090e28e49e5bc7e",
      "candidate_info": {
        "commit_hash": "75b0821e999cb14d4081a6ff8090e28e49e5bc7e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/75b0821e999cb14d4081a6ff8090e28e49e5bc7e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/resolve.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/window.c",
          "test/window9.test"
        ],
        "message": "Remove Window objects from the corresponding Select.pWin list when they are deleted.\n\nFossilOrigin-Name: d23f33168222dfa40a67dc7de58057418151989e81429e4af47617e86db04667",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/resolve.c||src/resolve.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c",
          "test/window9.test||test/window9.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 23b119671f0be3c6b72cf2dc5f7707a0626766db7aa56529ab00d33d1a0a1bee",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1327: static int gatherSelectWindowsCallback(Walker *pWalker, Expr *pExpr){",
          "1328:   if( pExpr->op==TK_FUNCTION && ExprHasProperty(pExpr, EP_WinFunc) ){",
          "1330:     assert( IsWindowFunc(pExpr) );",
          "1333:   }",
          "1334:   return WRC_Continue;",
          "1335: }",
          "",
          "[Removed Lines]",
          "1329:     assert( pExpr->y.pWin );",
          "1331:     pExpr->y.pWin->pNextWin = pWalker->u.pSelect->pWin;",
          "1332:     pWalker->u.pSelect->pWin = pExpr->y.pWin;",
          "",
          "[Added Lines]",
          "1329:     Select *pSelect = pWalker->u.pSelect;",
          "1330:     Window *pWin = pExpr->y.pWin;",
          "1331:     assert( pWin );",
          "1333:     if( pSelect->pWin ){",
          "1335:       pSelect->pWin->ppThis = &pWin->pNextWin;",
          "1336:     }",
          "1337:     pWin->pNextWin = pSelect->pWin;",
          "1338:     pWin->ppThis = &pSelect->pWin;",
          "1339:     pSelect->pWin = pWin;",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "901: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "902:         if( pWin ){",
          "903:           Select *pSel = pNC->pWinSelect;",
          "904:           if( IN_RENAME_OBJECT==0 ){",
          "905:             sqlite3WindowUpdate(pParse, pSel->pWinDefn, pWin, pDef);",
          "906:           }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "904:           assert( pWin==pExpr->y.pWin );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "910:           if( 0==pSel->pWin",
          "911:            || 0==sqlite3WindowCompare(pParse, pSel->pWin, pWin, 0)",
          "912:           ){",
          "915:           }",
          "916:           pNC->ncFlags |= NC_HasWin;",
          "917:         }else",
          "",
          "[Removed Lines]",
          "913:             pExpr->y.pWin->pNextWin = pSel->pWin;",
          "914:             pSel->pWin = pExpr->y.pWin;",
          "",
          "[Added Lines]",
          "914:             pWin->pNextWin = pSel->pWin;",
          "915:             if( pSel->pWin ){",
          "916:               pSel->pWin->ppThis = &pWin->pNextWin;",
          "917:             }",
          "918:             pSel->pWin = pWin;",
          "919:             pWin->ppThis = &pSel->pWin;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1296: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "1301: static int resolveRemoveWindowsCb(Walker *pWalker, Expr *pExpr){",
          "1302:   if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "1309:     }",
          "1310:   }",
          "1311:   return WRC_Continue;",
          "",
          "[Removed Lines]",
          "1303:     Window **pp;",
          "1304:     for(pp=&pWalker->u.pSelect->pWin; *pp; pp=&(*pp)->pNextWin){",
          "1305:       if( *pp==pExpr->y.pWin ){",
          "1307:         break;",
          "1308:       }",
          "",
          "[Added Lines]",
          "1307:     Window *pWin = pExpr->y.pWin;",
          "1308:     if( pWin->ppThis ){",
          "1310:       if( pWin->pNextWin ) pWin->pNextWin->ppThis = pWin->ppThis;",
          "1311:       pWin->ppThis = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1319:   if( pSelect->pWin ){",
          "1320:     Walker sWalker;",
          "1321:     memset(&sWalker, 0, sizeof(Walker));",
          "",
          "[Removed Lines]",
          "1318: void sqlite3WindowRemoveExprFromSelect(Select *pSelect, Expr *pExpr){",
          "",
          "[Added Lines]",
          "1321: static void windowRemoveExprFromSelect(Select *pSelect, Expr *pExpr){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1324:     sqlite3WalkExpr(&sWalker, pExpr);",
          "1325:   }",
          "1326: }",
          "",
          "[Removed Lines]",
          "1332: void sqlite3WindowRemoveExprListFromSelect(Select *pSelect, ExprList *pList){",
          "1333:   if( pList && pSelect->pWin ){",
          "1334:     int i;",
          "1335:     Walker sWalker;",
          "1336:     memset(&sWalker, 0, sizeof(Walker));",
          "1337:     sWalker.xExprCallback = resolveRemoveWindowsCb;",
          "1338:     sWalker.u.pSelect = pSelect;",
          "1339:     for(i=0; i<pList->nExpr; i++){",
          "1340:       sqlite3WalkExpr(&sWalker, pList->a[i].pExpr);",
          "1341:     }",
          "1342:   }",
          "1343: }",
          "",
          "[Added Lines]",
          "1330: #else",
          "1331: # define windowRemoveExprFromSelect(a, b)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1416:         pItem->u.x.iOrderByCol = j+1;",
          "1417:       }",
          "1418:     }",
          "",
          "[Removed Lines]",
          "1415:         sqlite3WindowRemoveExprFromSelect(pSelect, pE);",
          "",
          "[Added Lines]",
          "1403:         windowRemoveExprFromSelect(pSelect, pE);",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:     }",
          "103: #endif",
          "104:     if( OK_IF_ALWAYS_TRUE(p->pWith) ) sqlite3WithDelete(db, p->pWith);",
          "105:     if( bFree ) sqlite3DbFreeNN(db, p);",
          "106:     p = pPrior;",
          "107:     bFree = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105:     assert( p->pWin==0 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5661:            pDest->eDest==SRT_DistQueue || pDest->eDest==SRT_Fifo);",
          "5665:     sqlite3ExprListDelete(db, p->pOrderBy);",
          "5666:     p->pOrderBy = 0;",
          "5667:     p->selFlags &= ~SF_Distinct;",
          "",
          "[Removed Lines]",
          "5664:     sqlite3WindowRemoveExprListFromSelect(p, p->pOrderBy);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3627: void sqlite3WindowFunctions(void);",
          "3628: void sqlite3WindowChain(Parse*, Window*, Window*);",
          "3629: Window *sqlite3WindowAssemble(Parse*, Window*, ExprList*, ExprList*, Token*);",
          "3632: #else",
          "3633: # define sqlite3WindowDelete(a,b)",
          "3634: # define sqlite3WindowFunctions()",
          "3635: # define sqlite3WindowAttach(a,b,c)",
          "3638: #endif",
          "",
          "[Removed Lines]",
          "3630: void sqlite3WindowRemoveExprFromSelect(Select*,Expr*);",
          "3631: void sqlite3WindowRemoveExprListFromSelect(Select*,ExprList*);",
          "3636: # define sqlite3WindowRemoveExprFromSelect(Select*,Expr*);",
          "3637: # define sqlite3WindowRemoveExprListFromSelect(Select*,ExprList*);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1023: void sqlite3WindowDelete(sqlite3 *db, Window *p){",
          "1024:   if( p ){",
          "1025:     sqlite3ExprDelete(db, p->pFilter);",
          "1026:     sqlite3ExprListDelete(db, p->pPartition);",
          "1027:     sqlite3ExprListDelete(db, p->pOrderBy);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1025:     if( p->ppThis ){",
          "1027:       if( p->pNextWin ) p->pNextWin->ppThis = p->ppThis;",
          "1028:     }",
          "",
          "---------------"
        ],
        "test/window9.test||test/window9.test": [
          "File: test/window9.test -> test/window9.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:   SELECT b=='2', rank() OVER (ORDER BY a) FROM t1",
          "99: } {1 1   0 2}",
          "101: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101: #-------------------------------------------------------------------------",
          "102: reset_db",
          "103: do_execsql_test 3.0 {",
          "104:   CREATE TABLE t1(a);",
          "105:   CREATE TABLE t2(a,b,c);",
          "106: }",
          "108: do_execsql_test 3.1 {",
          "109:   SELECT EXISTS(SELECT 1 FROM t1 ORDER BY sum(a) OVER ()) FROM t1;",
          "110: }",
          "112: do_execsql_test 3.2 {",
          "113:   SELECT sum(a) OVER () FROM t2",
          "114:    ORDER BY EXISTS(SELECT 1 FROM t2 ORDER BY sum(a) OVER ());",
          "115: }",
          "117: do_catchsql_test 3.3 {",
          "118:   SELECT a, sum(a) OVER (ORDER BY a DESC) FROM t2",
          "119:   ORDER BY EXISTS(",
          "120:     SELECT 1 FROM t2 ORDER BY sum(a) OVER (ORDER BY a)",
          "121:   ) OVER (ORDER BY a);",
          "122: } {1 {near \"OVER\": syntax error}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "57494adcc52b3b9d58aa6f8d1076b0444832081e",
      "candidate_info": {
        "commit_hash": "57494adcc52b3b9d58aa6f8d1076b0444832081e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/57494adcc52b3b9d58aa6f8d1076b0444832081e",
        "files": [
          "Makefile.msc",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Attempt to detect when the MSVC linker requires the /MACHINE argument.\n\nFossilOrigin-Name: 3e355846217785c30f518d31a5541172c4213c0d8559c3f8638a047cd745c98e",
        "before_after_code_files": [
          "Makefile.msc||Makefile.msc",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1089: LTLINKOPTS = /NOLOGO /MACHINE:$(PLATFORM)",
          "1090: LTLIBOPTS = /NOLOGO /MACHINE:$(PLATFORM)",
          "1091: !ELSE",
          "1092: LTLINKOPTS = /NOLOGO",
          "1093: LTLIBOPTS = /NOLOGO",
          "1094: !ENDIF",
          "1096: # When compiling for use in the WinRT environment, the following",
          "1097: # linker option must be used to mark the executable as runnable",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1092: !IFDEF VISUALSTUDIOVERSION",
          "1093: !IF \"$(VISUALSTUDIOVERSION)\">=\"12.0\"",
          "1094: LTLINKOPTS = /NOLOGO /MACHINE:x86",
          "1095: LTLIBOPTS = /NOLOGO /MACHINE:x86",
          "1096: !ELSE",
          "1097: LTLINKOPTS = /NOLOGO",
          "1098: LTLIBOPTS = /NOLOGO",
          "1099: !ENDIF",
          "1100: !ELSE",
          "1104: !ENDIF",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ecbae90aef63ed6d07d474416900db36ff6dd9c2ed1bbb5f4d883b6838156be1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b560a7194dd9cde79d4d9b409bcfe1c059c0fe77",
      "candidate_info": {
        "commit_hash": "b560a7194dd9cde79d4d9b409bcfe1c059c0fe77",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b560a7194dd9cde79d4d9b409bcfe1c059c0fe77",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/window.c"
        ],
        "message": "Remove rows from the ephemeral table used by window functions once they are no longer required.\n\nFossilOrigin-Name: 6ad553192051eaa0c6d929baacde2de07b93c6d09de861028bbce55a2c9bfdd3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b1322ffb6e63a110998068bf4f0a903028bd4fc0464ae1e517d745fb46423f39",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8828:   assert( pCur->curFlags & BTCF_WriteFlag );",
          "8829:   assert( hasSharedCacheTableLock(p, pCur->pgnoRoot, pCur->pKeyInfo!=0, 2) );",
          "8830:   assert( !hasReadConflicts(p, pCur->pgnoRoot) );",
          "8833:   assert( (flags & ~(BTREE_SAVEPOSITION | BTREE_AUXDELETE))==0 );",
          "8835:   iCellDepth = pCur->iPage;",
          "8836:   iCellIdx = pCur->ix;",
          "",
          "[Removed Lines]",
          "8831:   assert( pCur->ix<pCur->pPage->nCell );",
          "8832:   assert( pCur->eState==CURSOR_VALID );",
          "",
          "[Added Lines]",
          "8832:   if( pCur->eState==CURSOR_REQUIRESEEK ){",
          "8833:     rc = btreeRestoreCursorPosition(pCur);",
          "8834:     if( rc ) return rc;",
          "8835:   }",
          "8836:   assert( pCur->eState==CURSOR_VALID );",
          "8837:   assert( pCur->ix<pCur->pPage->nCell );",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "611:         { cume_distName,    TK_GROUPS, TK_FOLLOWING, TK_UNBOUNDED },",
          "612:         { ntileName,        TK_ROWS,   TK_CURRENT,   TK_UNBOUNDED },",
          "613:         { leadName,         TK_ROWS,   TK_UNBOUNDED, TK_UNBOUNDED },",
          "614:       };",
          "615:       int i;",
          "616:       for(i=0; i<ArraySize(aUp); i++){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "614:         { lagName,          TK_ROWS,   TK_UNBOUNDED, TK_CURRENT },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1472:   return regArg;",
          "1473: }",
          "",
          "[Removed Lines]",
          "1475: #if 0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1483:     FuncDef *pFunc = pWin->pFunc;",
          "1484:     if( (pFunc->zName==nth_valueName)",
          "1485:      || (pFunc->zName==first_valueName)",
          "1487:      || (pFunc->zName==lagName)",
          "1488:     ){",
          "1489:       return 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1486:      || (pFunc->zName==leadName)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1491:   }",
          "1492:   return 0;",
          "1493: }",
          "",
          "[Removed Lines]",
          "1494: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1539:   int regGosub;",
          "1540:   int addrGosub;",
          "1541:   int regArg;",
          "1543:   WindowCsrAndReg start;",
          "1544:   WindowCsrAndReg current;",
          "1545:   WindowCsrAndReg end;",
          "1546: };",
          "1548: #define WINDOW_RETURN_ROW 1",
          "1549: #define WINDOW_AGGINVERSE 2",
          "1550: #define WINDOW_AGGSTEP    3",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1542:   int eDelete;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1701:       break;",
          "1702:   }",
          "1704:   if( jumpOnEof ){",
          "1705:     sqlite3VdbeAddOp2(v, OP_Next, csr, sqlite3VdbeCurrentAddr(v)+2);",
          "1706:     ret = sqlite3VdbeAddOp0(v, OP_Goto);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1708:   if( op==p->eDelete ){",
          "1709:     sqlite3VdbeAddOp1(v, OP_Delete, csr);",
          "1710:     sqlite3VdbeChangeP5(v, OPFLAG_SAVEPOSITION);",
          "1711:   }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1712:   }",
          "1714:   if( bPeer ){",
          "1716:     int nReg = (pMWin->pOrderBy ? pMWin->pOrderBy->nExpr : 0);",
          "1717:     int regTmp = (nReg ? sqlite3GetTempRange(pParse, nReg) : 0);",
          "1718:     windowReadPeerValues(p, csr, regTmp);",
          "",
          "[Removed Lines]",
          "1715:     int addr;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2154:   s.start.csr = s.current.csr+2;",
          "2155:   s.end.csr = s.current.csr+3;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2171:   switch( pMWin->eStart ){",
          "2172:     case TK_FOLLOWING: {",
          "2173:       sqlite3 *db = pParse->db;",
          "2174:       sqlite3_value *pVal = 0;",
          "2175:       sqlite3ValueFromExpr(db, pMWin->pStart, db->enc,SQLITE_AFF_NUMERIC,&pVal);",
          "2176:       if( pVal && sqlite3_value_int(pVal)>0 ){",
          "2177:         s.eDelete = WINDOW_RETURN_ROW;",
          "2178:       }",
          "2179:       sqlite3ValueFree(pVal);",
          "2180:       break;",
          "2181:     }",
          "2182:     case TK_UNBOUNDED:",
          "2183:       if( windowCacheFrame(pMWin)==0 ){",
          "2184:         if( pMWin->eEnd==TK_PRECEDING ){",
          "2185:           s.eDelete = WINDOW_AGGSTEP;",
          "2186:         }else{",
          "2187:           s.eDelete = WINDOW_RETURN_ROW;",
          "2188:         }",
          "2189:       }",
          "2190:       break;",
          "2191:     default:",
          "2192:       s.eDelete = WINDOW_AGGINVERSE;",
          "2193:       break;",
          "2194:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}