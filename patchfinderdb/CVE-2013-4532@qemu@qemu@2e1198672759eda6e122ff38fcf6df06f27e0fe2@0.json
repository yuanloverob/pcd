{
  "cve_id": "CVE-2013-4532",
  "cve_desc": "Qemu 1.1.2+dfsg to 2.1+dfsg suffers from a buffer overrun which could potentially result in arbitrary code execution on the host with the privileges of the QEMU process.",
  "repo": "qemu/qemu",
  "patch_hash": "2e1198672759eda6e122ff38fcf6df06f27e0fe2",
  "patch_info": {
    "commit_hash": "2e1198672759eda6e122ff38fcf6df06f27e0fe2",
    "repo": "qemu/qemu",
    "commit_url": "https://github.com/qemu/qemu/commit/2e1198672759eda6e122ff38fcf6df06f27e0fe2",
    "files": [
      "hw/net/stellaris_enet.c"
    ],
    "message": "hw/net/stellaris_enet: Convert to vmstate\n\nConvert this device to use vmstate for its save/load, including\nproviding a post_load function that sanitizes inbound data to\navoid possible buffer overflows if it is malicious.\n\nThe sanitizing fixes CVE-2013-4532 (though nobody should be\nrelying on the security properties of most of the unmaintained\nARM board models anyway, and migration doesn't actually\nwork on this board due to issues in other device models).\n\nSigned-off-by: Peter Maydell <peter.maydell@linaro.org>\nReviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>\nReviewed-by: Michael S. Tsirkin <mst@redhat.com>",
    "before_after_code_files": [
      "hw/net/stellaris_enet.c||hw/net/stellaris_enet.c"
    ]
  },
  "patch_diff": {
    "hw/net/stellaris_enet.c||hw/net/stellaris_enet.c": [
      "File: hw/net/stellaris_enet.c -> hw/net/stellaris_enet.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "46: #define STELLARIS_ENET(obj) \\",
      "47:     OBJECT_CHECK(stellaris_enet_state, (obj), TYPE_STELLARIS_ENET)",
      "49: typedef struct {",
      "50:     SysBusDevice parent_obj;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "49: typedef struct {",
      "50:     uint8_t data[2048];",
      "51:     uint32_t len;",
      "52: } StellarisEnetRxFrame;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "59:     uint32_t mtxd;",
      "60:     uint32_t mrxd;",
      "61:     uint32_t np;",
      "63:     uint8_t tx_fifo[2048];",
      "72:     NICState *nic;",
      "73:     NICConf conf;",
      "74:     qemu_irq irq;",
      "75:     MemoryRegion mmio;",
      "76: } stellaris_enet_state;",
      "78: static void stellaris_enet_update(stellaris_enet_state *s)",
      "79: {",
      "80:     qemu_set_irq(s->irq, (s->ris & s->im) != 0);",
      "",
      "[Removed Lines]",
      "62:     int tx_fifo_len;",
      "66:     struct {",
      "67:         uint8_t data[2048];",
      "68:         int len;",
      "69:     } rx[31];",
      "70:     int rx_fifo_offset;",
      "71:     int next_packet;",
      "",
      "[Added Lines]",
      "67:     uint32_t tx_fifo_len;",
      "71:     StellarisEnetRxFrame rx[31];",
      "72:     uint32_t rx_fifo_offset;",
      "73:     uint32_t next_packet;",
      "80: static const VMStateDescription vmstate_rx_frame = {",
      "81:     .name = \"stellaris_enet/rx_frame\",",
      "82:     .version_id = 1,",
      "83:     .minimum_version_id = 1,",
      "84:     .fields = (VMStateField[]) {",
      "85:         VMSTATE_UINT8_ARRAY(data, StellarisEnetRxFrame, 2048),",
      "86:         VMSTATE_UINT32(len, StellarisEnetRxFrame),",
      "87:         VMSTATE_END_OF_LIST()",
      "88:     }",
      "89: };",
      "91: static int stellaris_enet_post_load(void *opaque, int version_id)",
      "92: {",
      "93:     stellaris_enet_state *s = opaque;",
      "94:     int i;",
      "99:     if (s->next_packet >= ARRAY_SIZE(s->rx)) {",
      "100:         return -1;",
      "101:     }",
      "103:     if (s->np > ARRAY_SIZE(s->rx)) {",
      "104:         return -1;",
      "105:     }",
      "107:     for (i = 0; i < ARRAY_SIZE(s->rx); i++) {",
      "108:         if (s->rx[i].len > ARRAY_SIZE(s->rx[i].data)) {",
      "109:             return -1;",
      "110:         }",
      "111:     }",
      "113:     if (s->rx_fifo_offset > ARRAY_SIZE(s->rx[0].data) - 4) {",
      "114:         return -1;",
      "115:     }",
      "117:     if (s->tx_fifo_len > ARRAY_SIZE(s->tx_fifo)) {",
      "118:         return -1;",
      "119:     }",
      "121:     return 0;",
      "122: }",
      "124: static const VMStateDescription vmstate_stellaris_enet = {",
      "125:     .name = \"stellaris_enet\",",
      "126:     .version_id = 2,",
      "127:     .minimum_version_id = 2,",
      "128:     .post_load = stellaris_enet_post_load,",
      "129:     .fields = (VMStateField[]) {",
      "130:         VMSTATE_UINT32(ris, stellaris_enet_state),",
      "131:         VMSTATE_UINT32(im, stellaris_enet_state),",
      "132:         VMSTATE_UINT32(rctl, stellaris_enet_state),",
      "133:         VMSTATE_UINT32(tctl, stellaris_enet_state),",
      "134:         VMSTATE_UINT32(thr, stellaris_enet_state),",
      "135:         VMSTATE_UINT32(mctl, stellaris_enet_state),",
      "136:         VMSTATE_UINT32(mdv, stellaris_enet_state),",
      "137:         VMSTATE_UINT32(mtxd, stellaris_enet_state),",
      "138:         VMSTATE_UINT32(mrxd, stellaris_enet_state),",
      "139:         VMSTATE_UINT32(np, stellaris_enet_state),",
      "140:         VMSTATE_UINT32(tx_fifo_len, stellaris_enet_state),",
      "141:         VMSTATE_UINT8_ARRAY(tx_fifo, stellaris_enet_state, 2048),",
      "142:         VMSTATE_STRUCT_ARRAY(rx, stellaris_enet_state, 31, 1,",
      "143:                              vmstate_rx_frame, StellarisEnetRxFrame),",
      "144:         VMSTATE_UINT32(rx_fifo_offset, stellaris_enet_state),",
      "145:         VMSTATE_UINT32(next_packet, stellaris_enet_state),",
      "146:         VMSTATE_END_OF_LIST()",
      "147:     }",
      "148: };",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "379:     s->tx_fifo_len = 0;",
      "380: }",
      "439: static void stellaris_enet_cleanup(NetClientState *nc)",
      "440: {",
      "441:     stellaris_enet_state *s = qemu_get_nic_opaque(nc);",
      "",
      "[Removed Lines]",
      "382: static void stellaris_enet_save(QEMUFile *f, void *opaque)",
      "383: {",
      "384:     stellaris_enet_state *s = (stellaris_enet_state *)opaque;",
      "385:     int i;",
      "387:     qemu_put_be32(f, s->ris);",
      "388:     qemu_put_be32(f, s->im);",
      "389:     qemu_put_be32(f, s->rctl);",
      "390:     qemu_put_be32(f, s->tctl);",
      "391:     qemu_put_be32(f, s->thr);",
      "392:     qemu_put_be32(f, s->mctl);",
      "393:     qemu_put_be32(f, s->mdv);",
      "394:     qemu_put_be32(f, s->mtxd);",
      "395:     qemu_put_be32(f, s->mrxd);",
      "396:     qemu_put_be32(f, s->np);",
      "397:     qemu_put_be32(f, s->tx_fifo_len);",
      "398:     qemu_put_buffer(f, s->tx_fifo, sizeof(s->tx_fifo));",
      "399:     for (i = 0; i < 31; i++) {",
      "400:         qemu_put_be32(f, s->rx[i].len);",
      "401:         qemu_put_buffer(f, s->rx[i].data, sizeof(s->rx[i].data));",
      "403:     }",
      "404:     qemu_put_be32(f, s->next_packet);",
      "405:     qemu_put_be32(f, s->rx_fifo_offset);",
      "406: }",
      "408: static int stellaris_enet_load(QEMUFile *f, void *opaque, int version_id)",
      "409: {",
      "410:     stellaris_enet_state *s = (stellaris_enet_state *)opaque;",
      "411:     int i;",
      "413:     if (version_id != 1)",
      "414:         return -EINVAL;",
      "416:     s->ris = qemu_get_be32(f);",
      "417:     s->im = qemu_get_be32(f);",
      "418:     s->rctl = qemu_get_be32(f);",
      "419:     s->tctl = qemu_get_be32(f);",
      "420:     s->thr = qemu_get_be32(f);",
      "421:     s->mctl = qemu_get_be32(f);",
      "422:     s->mdv = qemu_get_be32(f);",
      "423:     s->mtxd = qemu_get_be32(f);",
      "424:     s->mrxd = qemu_get_be32(f);",
      "425:     s->np = qemu_get_be32(f);",
      "426:     s->tx_fifo_len = qemu_get_be32(f);",
      "427:     qemu_get_buffer(f, s->tx_fifo, sizeof(s->tx_fifo));",
      "428:     for (i = 0; i < 31; i++) {",
      "429:         s->rx[i].len = qemu_get_be32(f);",
      "430:         qemu_get_buffer(f, s->rx[i].data, sizeof(s->rx[i].data));",
      "432:     }",
      "433:     s->next_packet = qemu_get_be32(f);",
      "434:     s->rx_fifo_offset = qemu_get_be32(f);",
      "436:     return 0;",
      "437: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "467:     qemu_format_nic_info_str(qemu_get_queue(s->nic), s->conf.macaddr.a);",
      "469:     stellaris_enet_reset(s);",
      "472:     return 0;",
      "473: }",
      "",
      "[Removed Lines]",
      "470:     register_savevm(dev, \"stellaris_enet\", -1, 1,",
      "471:                     stellaris_enet_save, stellaris_enet_load, s);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "476: {",
      "477:     stellaris_enet_state *s = STELLARIS_ENET(dev);",
      "481:     memory_region_destroy(&s->mmio);",
      "482: }",
      "",
      "[Removed Lines]",
      "479:     unregister_savevm(DEVICE(s), \"stellaris_enet\", s);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "494:     k->init = stellaris_enet_init;",
      "495:     dc->unrealize = stellaris_enet_unrealize;",
      "496:     dc->props = stellaris_enet_properties;",
      "497: }",
      "499: static const TypeInfo stellaris_enet_info = {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "508:     dc->vmsd = &vmstate_stellaris_enet;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c6fa443b3dab9f49fb157b0164f5852fde68ed3b",
      "candidate_info": {
        "commit_hash": "c6fa443b3dab9f49fb157b0164f5852fde68ed3b",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/c6fa443b3dab9f49fb157b0164f5852fde68ed3b",
        "files": [
          "hw/net/stellaris_enet.c"
        ],
        "message": "hw/net/stellaris_enet: Rewrite tx fifo handling code\n\nThe datasheet is clear that the frame length written to the DATA\nregister is actually stored in the TX FIFO; this means we don't\nneed to keep both tx_frame_len and tx_fifo_len state separately.\n\nSigned-off-by: Peter Maydell <peter.maydell@linaro.org>\nReviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>",
        "before_after_code_files": [
          "hw/net/stellaris_enet.c||hw/net/stellaris_enet.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "hw/net/stellaris_enet.c||hw/net/stellaris_enet.c"
          ],
          "candidate": [
            "hw/net/stellaris_enet.c||hw/net/stellaris_enet.c"
          ]
        }
      },
      "candidate_diff": {
        "hw/net/stellaris_enet.c||hw/net/stellaris_enet.c": [
          "File: hw/net/stellaris_enet.c -> hw/net/stellaris_enet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:     uint32_t mtxd;",
          "60:     uint32_t mrxd;",
          "61:     uint32_t np;",
          "63:     int tx_fifo_len;",
          "64:     uint8_t tx_fifo[2048];",
          "",
          "[Removed Lines]",
          "62:     int tx_frame_len;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:     qemu_set_irq(s->irq, (s->ris & s->im) != 0);",
          "83: }",
          "86: static ssize_t stellaris_enet_receive(NetClientState *nc, const uint8_t *buf, size_t size)",
          "87: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87: static inline int stellaris_txpacket_datalen(stellaris_enet_state *s)",
          "88: {",
          "89:     return s->tx_fifo[0] | (s->tx_fifo[1] << 8);",
          "90: }",
          "96: static inline bool stellaris_txpacket_complete(stellaris_enet_state *s)",
          "97: {",
          "98:     int framelen = stellaris_txpacket_datalen(s);",
          "99:     framelen += 16;",
          "100:     if (!(s->tctl & SE_TCTL_CRC)) {",
          "101:         framelen += 4;",
          "102:     }",
          "108:     framelen = MIN(framelen, ARRAY_SIZE(s->tx_fifo));",
          "109:     return s->tx_fifo_len >= framelen;",
          "110: }",
          "113: static void stellaris_enet_send(stellaris_enet_state *s)",
          "114: {",
          "115:     int framelen = stellaris_txpacket_datalen(s);",
          "121:     framelen += 14;",
          "122:     if ((s->tctl & SE_TCTL_PADEN) && framelen < 60) {",
          "123:         memset(&s->tx_fifo[framelen + 2], 0, 60 - framelen);",
          "124:         framelen = 60;",
          "125:     }",
          "132:     framelen = MIN(framelen, ARRAY_SIZE(s->tx_fifo) - 2);",
          "133:     qemu_send_packet(qemu_get_queue(s->nic), s->tx_fifo + 2, framelen);",
          "134:     s->tx_fifo_len = 0;",
          "135:     s->ris |= SE_INT_TXEMP;",
          "136:     stellaris_enet_update(s);",
          "137:     DPRINTF(\"Done TX\\n\");",
          "138: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "215:         DPRINTF(\"IRQ ack %02x/%02x\\n\", value, s->ris);",
          "216:         stellaris_enet_update(s);",
          "220:         break;",
          "222:         DPRINTF(\"IRQ mask %02x/%02x\\n\", value, s->ris);",
          "",
          "[Removed Lines]",
          "218:         if (value & SE_INT_TXER)",
          "219:             s->tx_frame_len = -1;",
          "",
          "[Added Lines]",
          "273:         if (value & SE_INT_TXER) {",
          "274:             s->tx_fifo_len = 0;",
          "275:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "235:         s->tctl = value;",
          "236:         break;",
          "243:                 s->ris |= SE_INT_TXER;",
          "244:                 stellaris_enet_update(s);",
          "276:             }",
          "277:         }",
          "278:         break;",
          "280:         s->conf.macaddr.a[0] = value;",
          "",
          "[Removed Lines]",
          "238:         if (s->tx_frame_len == -1) {",
          "239:             s->tx_frame_len = value & 0xffff;",
          "240:             if (s->tx_frame_len > 2032) {",
          "241:                 DPRINTF(\"TX frame too long (%d)\\n\", s->tx_frame_len);",
          "242:                 s->tx_frame_len = 0;",
          "245:             } else {",
          "246:                 DPRINTF(\"Start TX frame len=%d\\n\", s->tx_frame_len);",
          "248:                 s->tx_frame_len += 14;",
          "249:                 if ((s->tctl & SE_TCTL_CRC) == 0)",
          "250:                     s->tx_frame_len += 4;",
          "251:                 s->tx_fifo_len = 0;",
          "252:                 s->tx_fifo[s->tx_fifo_len++] = value >> 16;",
          "253:                 s->tx_fifo[s->tx_fifo_len++] = value >> 24;",
          "254:             }",
          "255:         } else {",
          "256:             if (s->tx_fifo_len + 4 <= ARRAY_SIZE(s->tx_fifo)) {",
          "257:                 s->tx_fifo[s->tx_fifo_len++] = value;",
          "258:                 s->tx_fifo[s->tx_fifo_len++] = value >> 8;",
          "259:                 s->tx_fifo[s->tx_fifo_len++] = value >> 16;",
          "260:                 s->tx_fifo[s->tx_fifo_len++] = value >> 24;",
          "261:             }",
          "262:             if (s->tx_fifo_len >= s->tx_frame_len) {",
          "264:                 if ((s->tctl & SE_TCTL_CRC) == 0)",
          "265:                     s->tx_frame_len -= 4;",
          "266:                 if ((s->tctl & SE_TCTL_PADEN) && s->tx_frame_len < 60) {",
          "267:                     memset(&s->tx_fifo[s->tx_frame_len], 0, 60 - s->tx_frame_len);",
          "268:                     s->tx_frame_len = 60;",
          "269:                 }",
          "270:                 qemu_send_packet(qemu_get_queue(s->nic), s->tx_fifo,",
          "271:                                  s->tx_frame_len);",
          "272:                 s->tx_frame_len = -1;",
          "273:                 s->ris |= SE_INT_TXEMP;",
          "274:                 stellaris_enet_update(s);",
          "275:                 DPRINTF(\"Done TX\\n\");",
          "",
          "[Added Lines]",
          "294:         if (s->tx_fifo_len == 0) {",
          "296:             int framelen = value & 0xffff;",
          "297:             if (framelen > 2032) {",
          "298:                 DPRINTF(\"TX frame too long (%d)\\n\", framelen);",
          "301:                 break;",
          "305:         if (s->tx_fifo_len + 4 <= ARRAY_SIZE(s->tx_fifo)) {",
          "306:             s->tx_fifo[s->tx_fifo_len++] = value;",
          "307:             s->tx_fifo[s->tx_fifo_len++] = value >> 8;",
          "308:             s->tx_fifo[s->tx_fifo_len++] = value >> 16;",
          "309:             s->tx_fifo[s->tx_fifo_len++] = value >> 24;",
          "310:         }",
          "312:         if (stellaris_txpacket_complete(s)) {",
          "313:             stellaris_enet_send(s);",
          "314:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "326:     s->im = SE_INT_PHY | SE_INT_MD | SE_INT_RXER | SE_INT_FOV | SE_INT_TXEMP",
          "327:             | SE_INT_TXER | SE_INT_RX;",
          "328:     s->thr = 0x3f;",
          "330: }",
          "332: static void stellaris_enet_save(QEMUFile *f, void *opaque)",
          "",
          "[Removed Lines]",
          "329:     s->tx_frame_len = -1;",
          "",
          "[Added Lines]",
          "366:     s->tx_fifo_len = 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "344:     qemu_put_be32(f, s->mtxd);",
          "345:     qemu_put_be32(f, s->mrxd);",
          "346:     qemu_put_be32(f, s->np);",
          "348:     qemu_put_be32(f, s->tx_fifo_len);",
          "349:     qemu_put_buffer(f, s->tx_fifo, sizeof(s->tx_fifo));",
          "350:     for (i = 0; i < 31; i++) {",
          "",
          "[Removed Lines]",
          "347:     qemu_put_be32(f, s->tx_frame_len);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "375:     s->mtxd = qemu_get_be32(f);",
          "376:     s->mrxd = qemu_get_be32(f);",
          "377:     s->np = qemu_get_be32(f);",
          "379:     s->tx_fifo_len = qemu_get_be32(f);",
          "380:     qemu_get_buffer(f, s->tx_fifo, sizeof(s->tx_fifo));",
          "381:     for (i = 0; i < 31; i++) {",
          "",
          "[Removed Lines]",
          "378:     s->tx_frame_len = qemu_get_be32(f);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "889ac2a32fd803f7222524d8f56aded1c3cbad3c",
      "candidate_info": {
        "commit_hash": "889ac2a32fd803f7222524d8f56aded1c3cbad3c",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/889ac2a32fd803f7222524d8f56aded1c3cbad3c",
        "files": [
          "hw/net/stellaris_enet.c"
        ],
        "message": "hw/net/stellaris_enet: Get rid of rx_fifo pointer\n\nThe rx_fifo pointer is awkward to migrate, and is actually\nredundant since it is always possible to determine it from\nthe current rx[].len/.data and rx_fifo_len. Remove both\nrx_fifo and rx_fifo_len from the state, replacing them with\na simple rx_fifo_offset which points at the current location\nin the RX fifo.\n\nSigned-off-by: Peter Maydell <peter.maydell@linaro.org>\nReviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>",
        "before_after_code_files": [
          "hw/net/stellaris_enet.c||hw/net/stellaris_enet.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "hw/net/stellaris_enet.c||hw/net/stellaris_enet.c"
          ],
          "candidate": [
            "hw/net/stellaris_enet.c||hw/net/stellaris_enet.c"
          ]
        }
      },
      "candidate_diff": {
        "hw/net/stellaris_enet.c||hw/net/stellaris_enet.c": [
          "File: hw/net/stellaris_enet.c -> hw/net/stellaris_enet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:         uint8_t data[2048];",
          "68:         int len;",
          "69:     } rx[31];",
          "72:     int next_packet;",
          "73:     NICState *nic;",
          "74:     NICConf conf;",
          "",
          "[Removed Lines]",
          "70:     uint8_t *rx_fifo;",
          "71:     int rx_fifo_len;",
          "",
          "[Added Lines]",
          "70:     int rx_fifo_offset;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "217:         return s->tctl;",
          "227:         }",
          "234:             s->next_packet++;",
          "235:             if (s->next_packet >= 31)",
          "236:                 s->next_packet = 0;",
          "",
          "[Removed Lines]",
          "219:         if (s->rx_fifo_len == 0) {",
          "220:             if (s->np == 0) {",
          "221:                 BADF(\"RX underflow\\n\");",
          "222:                 return 0;",
          "223:             }",
          "224:             s->rx_fifo_len = s->rx[s->next_packet].len;",
          "225:             s->rx_fifo = s->rx[s->next_packet].data;",
          "226:             DPRINTF(\"RX FIFO start packet len=%d\\n\", s->rx_fifo_len);",
          "228:         val = s->rx_fifo[0] | (s->rx_fifo[1] << 8) | (s->rx_fifo[2] << 16)",
          "229:               | (s->rx_fifo[3] << 24);",
          "230:         s->rx_fifo += 4;",
          "231:         s->rx_fifo_len -= 4;",
          "232:         if (s->rx_fifo_len <= 0) {",
          "233:             s->rx_fifo_len = 0;",
          "",
          "[Added Lines]",
          "218:     {",
          "219:         uint8_t *rx_fifo;",
          "221:         if (s->np == 0) {",
          "222:             BADF(\"RX underflow\\n\");",
          "223:             return 0;",
          "226:         rx_fifo = s->rx[s->next_packet].data + s->rx_fifo_offset;",
          "228:         val = rx_fifo[0] | (rx_fifo[1] << 8) | (rx_fifo[2] << 16)",
          "229:               | (rx_fifo[3] << 24);",
          "230:         s->rx_fifo_offset += 4;",
          "231:         if (s->rx_fifo_offset >= s->rx[s->next_packet].len) {",
          "232:             s->rx_fifo_offset = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "238:             DPRINTF(\"RX done np=%d\\n\", s->np);",
          "239:         }",
          "240:         return val;",
          "242:         return s->conf.macaddr.a[0] | (s->conf.macaddr.a[1] << 8)",
          "243:             | (s->conf.macaddr.a[2] << 16)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "292:         s->rctl = value;",
          "293:         if (value & SE_RCTL_RSTFIFO) {",
          "295:             s->np = 0;",
          "296:             stellaris_enet_update(s);",
          "297:         }",
          "298:         break;",
          "",
          "[Removed Lines]",
          "294:             s->rx_fifo_len = 0;",
          "",
          "[Added Lines]",
          "295:             s->rx_fifo_offset = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "403:     }",
          "404:     qemu_put_be32(f, s->next_packet);",
          "407: }",
          "409: static int stellaris_enet_load(QEMUFile *f, void *opaque, int version_id)",
          "",
          "[Removed Lines]",
          "405:     qemu_put_be32(f, s->rx_fifo - s->rx[s->next_packet].data);",
          "406:     qemu_put_be32(f, s->rx_fifo_len);",
          "",
          "[Added Lines]",
          "405:     qemu_put_be32(f, s->rx_fifo_offset);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "433:     }",
          "434:     s->next_packet = qemu_get_be32(f);",
          "438:     return 0;",
          "439: }",
          "",
          "[Removed Lines]",
          "435:     s->rx_fifo = s->rx[s->next_packet].data + qemu_get_be32(f);",
          "436:     s->rx_fifo_len = qemu_get_be32(f);",
          "",
          "[Added Lines]",
          "434:     s->rx_fifo_offset = qemu_get_be32(f);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a9171c4fb570b9c6f65955de03d3e38d2e9b0fdf",
      "candidate_info": {
        "commit_hash": "a9171c4fb570b9c6f65955de03d3e38d2e9b0fdf",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/a9171c4fb570b9c6f65955de03d3e38d2e9b0fdf",
        "files": [
          "hw/net/stellaris_enet.c"
        ],
        "message": "hw/net/stellaris_enet: Correctly implement the TR and THR registers\n\nPacket transmission for the stellaris ethernet controller can be triggered\nin one of two ways:\n * by setting a threshold value in the THR register; when the FIFO\n   fill level reaches the threshold, the h/w starts transmitting.\n   Software has to finish filling the FIFO before the transmit\n   process completes to avoid a (silent) underrun\n * by software writing to the TR register to explicitly trigger\n   transmission\n\nSince QEMU transmits packets instantaneously (from the guest's\npoint of view), implement \"transmit based on threshold\" with\nour existing mechanism of \"transmit as soon as we have the whole\npacket\", with the additional wrinkle that we don't transmit if\nthe packet size is below the specified threshold, and implement\n\"transmit by specific request\" properly.\n\nSigned-off-by: Peter Maydell <peter.maydell@linaro.org>\nReviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>",
        "before_after_code_files": [
          "hw/net/stellaris_enet.c||hw/net/stellaris_enet.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "hw/net/stellaris_enet.c||hw/net/stellaris_enet.c"
          ],
          "candidate": [
            "hw/net/stellaris_enet.c||hw/net/stellaris_enet.c"
          ]
        }
      },
      "candidate_diff": {
        "hw/net/stellaris_enet.c||hw/net/stellaris_enet.c": [
          "File: hw/net/stellaris_enet.c -> hw/net/stellaris_enet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:     return s->tx_fifo_len >= framelen;",
          "110: }",
          "113: static void stellaris_enet_send(stellaris_enet_state *s)",
          "114: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115: static inline bool stellaris_tx_thr_reached(stellaris_enet_state *s)",
          "116: {",
          "117:     return (s->thr < 0x3f &&",
          "118:             (s->tx_fifo_len >= 4 * (s->thr * 8 + 1)));",
          "119: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "309:             s->tx_fifo[s->tx_fifo_len++] = value >> 24;",
          "310:         }",
          "313:             stellaris_enet_send(s);",
          "314:         }",
          "315:         break;",
          "",
          "[Removed Lines]",
          "312:         if (stellaris_txpacket_complete(s)) {",
          "",
          "[Added Lines]",
          "321:         if (stellaris_tx_thr_reached(s) && stellaris_txpacket_complete(s)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "339:         s->mtxd = value & 0xff;",
          "340:         break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "351:         if (value & 1) {",
          "352:             stellaris_enet_send(s);",
          "353:         }",
          "354:         break;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2fa30abadfa2f9f3c47044f677e74988db274d0c",
      "candidate_info": {
        "commit_hash": "2fa30abadfa2f9f3c47044f677e74988db274d0c",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/2fa30abadfa2f9f3c47044f677e74988db274d0c",
        "files": [
          "hw/net/stellaris_enet.c"
        ],
        "message": "stellaris_enet: QOM cast cleanup\n\nSigned-off-by: Andreas F\u00e4rber <afaerber@suse.de>",
        "before_after_code_files": [
          "hw/net/stellaris_enet.c||hw/net/stellaris_enet.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "hw/net/stellaris_enet.c||hw/net/stellaris_enet.c"
          ],
          "candidate": [
            "hw/net/stellaris_enet.c||hw/net/stellaris_enet.c"
          ]
        }
      },
      "candidate_diff": {
        "hw/net/stellaris_enet.c||hw/net/stellaris_enet.c": [
          "File: hw/net/stellaris_enet.c -> hw/net/stellaris_enet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: #define SE_TCTL_CRC     0x04",
          "43: #define SE_TCTL_DUPLEX  0x08",
          "45: typedef struct {",
          "47:     uint32_t ris;",
          "48:     uint32_t im;",
          "49:     uint32_t rctl;",
          "",
          "[Removed Lines]",
          "46:     SysBusDevice busdev;",
          "",
          "[Added Lines]",
          "45: #define TYPE_STELLARIS_ENET \"stellaris_enet\"",
          "46: #define STELLARIS_ENET(obj) \\",
          "47:     OBJECT_CHECK(stellaris_enet_state, (obj), TYPE_STELLARIS_ENET)",
          "50:     SysBusDevice parent_obj;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "386: {",
          "387:     stellaris_enet_state *s = qemu_get_nic_opaque(nc);",
          "391:     memory_region_destroy(&s->mmio);",
          "",
          "[Removed Lines]",
          "389:     unregister_savevm(&s->busdev.qdev, \"stellaris_enet\", s);",
          "",
          "[Added Lines]",
          "394:     unregister_savevm(DEVICE(s), \"stellaris_enet\", s);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "401:     .cleanup = stellaris_enet_cleanup,",
          "402: };",
          "405: {",
          "408:     memory_region_init_io(&s->mmio, OBJECT(s), &stellaris_enet_ops, s,",
          "409:                           \"stellaris_enet\", 0x1000);",
          "412:     qemu_macaddr_default_if_unset(&s->conf.macaddr);",
          "414:     s->nic = qemu_new_nic(&net_stellaris_enet_info, &s->conf,",
          "416:     qemu_format_nic_info_str(qemu_get_queue(s->nic), s->conf.macaddr.a);",
          "418:     stellaris_enet_reset(s);",
          "420:                     stellaris_enet_save, stellaris_enet_load, s);",
          "421:     return 0;",
          "422: }",
          "",
          "[Removed Lines]",
          "404: static int stellaris_enet_init(SysBusDevice *dev)",
          "406:     stellaris_enet_state *s = FROM_SYSBUS(stellaris_enet_state, dev);",
          "410:     sysbus_init_mmio(dev, &s->mmio);",
          "411:     sysbus_init_irq(dev, &s->irq);",
          "415:                           object_get_typename(OBJECT(dev)), dev->qdev.id, s);",
          "419:     register_savevm(&s->busdev.qdev, \"stellaris_enet\", -1, 1,",
          "",
          "[Added Lines]",
          "409: static int stellaris_enet_init(SysBusDevice *sbd)",
          "411:     DeviceState *dev = DEVICE(sbd);",
          "412:     stellaris_enet_state *s = STELLARIS_ENET(dev);",
          "416:     sysbus_init_mmio(sbd, &s->mmio);",
          "417:     sysbus_init_irq(sbd, &s->irq);",
          "421:                           object_get_typename(OBJECT(dev)), dev->id, s);",
          "425:     register_savevm(dev, \"stellaris_enet\", -1, 1,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "436: }",
          "438: static const TypeInfo stellaris_enet_info = {",
          "440:     .parent        = TYPE_SYS_BUS_DEVICE,",
          "441:     .instance_size = sizeof(stellaris_enet_state),",
          "442:     .class_init    = stellaris_enet_class_init,",
          "",
          "[Removed Lines]",
          "439:     .name          = \"stellaris_enet\",",
          "",
          "[Added Lines]",
          "445:     .name          = TYPE_STELLARIS_ENET,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5c10495ab1546d5d12b51a97817051e9ec98d0f6",
      "candidate_info": {
        "commit_hash": "5c10495ab1546d5d12b51a97817051e9ec98d0f6",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/5c10495ab1546d5d12b51a97817051e9ec98d0f6",
        "files": [
          "hw/net/stellaris_enet.c"
        ],
        "message": "hw/net/stellaris_enet: Restructure tx_fifo code to avoid buffer overrun\n\nThe current tx_fifo code has a corner case where the guest can overrun\nthe fifo buffer: if automatic CRCs are disabled we allow the guest to write\nthe CRC word even if there isn't actually space for it in the FIFO.\nThe datasheet is unclear about exactly how the hardware deals with this\nsituation; the most plausible answer seems to be that the CRC word is\njust lost.\n\nImplement this fix by separating the \"can we stuff another word in the\nFIFO\" logic from the \"should we transmit the packet now\" check. This\nalso moves us closer to the real hardware, which has a number of ways\nit can be configured to trigger sending the packet, some of which we\ndon't implement.\n\nSigned-off-by: Peter Maydell <peter.maydell@linaro.org>\nReviewed-by: Dr. David Alan Gilbert <dgilbert@redhat.com>\nCc: qemu-stable@nongnu.org",
        "before_after_code_files": [
          "hw/net/stellaris_enet.c||hw/net/stellaris_enet.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "hw/net/stellaris_enet.c||hw/net/stellaris_enet.c"
          ],
          "candidate": [
            "hw/net/stellaris_enet.c||hw/net/stellaris_enet.c"
          ]
        }
      },
      "candidate_diff": {
        "hw/net/stellaris_enet.c||hw/net/stellaris_enet.c": [
          "File: hw/net/stellaris_enet.c -> hw/net/stellaris_enet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "253:                 s->tx_fifo[s->tx_fifo_len++] = value >> 24;",
          "254:             }",
          "255:         } else {",
          "260:             if (s->tx_fifo_len >= s->tx_frame_len) {",
          "262:                 if ((s->tctl & SE_TCTL_CRC) == 0)",
          "",
          "[Removed Lines]",
          "256:             s->tx_fifo[s->tx_fifo_len++] = value;",
          "257:             s->tx_fifo[s->tx_fifo_len++] = value >> 8;",
          "258:             s->tx_fifo[s->tx_fifo_len++] = value >> 16;",
          "259:             s->tx_fifo[s->tx_fifo_len++] = value >> 24;",
          "",
          "[Added Lines]",
          "256:             if (s->tx_fifo_len + 4 <= ARRAY_SIZE(s->tx_fifo)) {",
          "257:                 s->tx_fifo[s->tx_fifo_len++] = value;",
          "258:                 s->tx_fifo[s->tx_fifo_len++] = value >> 8;",
          "259:                 s->tx_fifo[s->tx_fifo_len++] = value >> 16;",
          "260:                 s->tx_fifo[s->tx_fifo_len++] = value >> 24;",
          "261:             }",
          "",
          "---------------"
        ]
      }
    }
  ]
}