{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f347077e786b1ca78d44e2c77b1bc1366735af76",
      "candidate_info": {
        "commit_hash": "f347077e786b1ca78d44e2c77b1bc1366735af76",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/f347077e786b1ca78d44e2c77b1bc1366735af76",
        "files": [
          "lib/net.js",
          "lib/tls.js",
          "test/simple/test-tls-connect-pipe.js"
        ],
        "message": "tls: support unix domain socket/named pipe in tls.connect",
        "before_after_code_files": [
          "lib/net.js||linet.js",
          "lib/tls.js||litls.js",
          "test/simple/test-tls-connect-pipe.js||test/simple/test-tls-connect-pipe.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/net.js||linet.js": [
          "File: lib/net.js -> linet.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:   var cb = args[args.length - 1];",
          "107:   return (typeof cb === 'function') ? [options, cb] : [options];",
          "108: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/tls.js||litls.js": [
          "File: lib/tls.js -> litls.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1207:   }",
          "1215:   var socket = options.socket ? options.socket : new net.Stream();",
          "",
          "[Removed Lines]",
          "1186: exports.connect = function(/* [port, host], options, cb */) {",
          "1187:   var options, port, host, cb;",
          "1189:   if (typeof arguments[0] === 'object') {",
          "1190:     options = arguments[0];",
          "1191:   } else if (typeof arguments[1] === 'object') {",
          "1192:     options = arguments[1];",
          "1193:     port = arguments[0];",
          "1194:   } else if (typeof arguments[2] === 'object') {",
          "1195:     options = arguments[2];",
          "1196:     port = arguments[0];",
          "1197:     host = arguments[1];",
          "1198:   } else {",
          "1201:     if (typeof arguments[0] === 'number') {",
          "1202:       port = arguments[0];",
          "1203:     }",
          "1204:     if (typeof arguments[1] === 'string') {",
          "1205:       host = arguments[1];",
          "1206:     }",
          "1209:   options = util._extend({ port: port, host: host }, options || {});",
          "1211:   if (typeof arguments[arguments.length - 1] === 'function') {",
          "1212:     cb = arguments[arguments.length - 1];",
          "1213:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1235:   }",
          "1237:   if (!options.socket) {",
          "1239:       port: options.port,",
          "1240:       host: options.host,",
          "1241:       localAddress: options.localAddress",
          "1243:   }",
          "1245:   pair.on('secure', function() {",
          "",
          "[Removed Lines]",
          "1238:     socket.connect({",
          "1242:     });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-tls-connect-pipe.js||test/simple/test-tls-connect-pipe.js": [
          "File: test/simple/test-tls-connect-pipe.js -> test/simple/test-tls-connect-pipe.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var tls = require('tls');",
          "25: var fs = require('fs');",
          "27: var clientConnected = 0;",
          "28: var serverConnected = 0;",
          "30: var options = {",
          "31:   key: fs.readFileSync(common.fixturesDir + '/keys/agent1-key.pem'),",
          "32:   cert: fs.readFileSync(common.fixturesDir + '/keys/agent1-cert.pem')",
          "33: };",
          "35: var server = tls.Server(options, function(socket) {",
          "36:   ++serverConnected;",
          "37:   server.close();",
          "38: });",
          "39: server.listen(common.PIPE, function() {",
          "40:   var client = tls.connect(common.PIPE, function() {",
          "41:     ++clientConnected;",
          "42:     client.end();",
          "43:   });",
          "44: });",
          "46: process.on('exit', function() {",
          "47:   assert.equal(clientConnected, 1);",
          "48:   assert.equal(serverConnected, 1);",
          "49: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f64989e63b9cf11c88e46b422de6234fc4699039",
      "candidate_info": {
        "commit_hash": "f64989e63b9cf11c88e46b422de6234fc4699039",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/f64989e63b9cf11c88e46b422de6234fc4699039",
        "files": [
          "lib/fs.js",
          "test/simple/test-fs-read-stream-fd.js"
        ],
        "message": "fs: fix ReadStream fails to read from existing fd\n\nA ReadStream constructed from an existing file descriptor failed to start\nreading automatically. Avoids a userspace call to ReadStream.prototype._read().",
        "before_after_code_files": [
          "lib/fs.js||lifs.js",
          "test/simple/test-fs-read-stream-fd.js||test/simple/test-fs-read-stream-fd.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/fs.js||lifs.js": [
          "File: lib/fs.js -> lifs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1050:   }",
          "1052:   if (this.fd !== null) {",
          "1053:     return;",
          "1054:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-fs-read-stream-fd.js||test/simple/test-fs-read-stream-fd.js": [
          "File: test/simple/test-fs-read-stream-fd.js -> test/simple/test-fs-read-stream-fd.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var fs = require('fs');",
          "23: var assert = require('assert');",
          "24: var path = require('path');",
          "26: var common = require('../common');",
          "28: var file = path.join(common.tmpDir, '/read_stream_fd_test.txt');",
          "29: var input = 'hello world';",
          "30: var output = '';",
          "31: var fd, stream;",
          "33: fs.writeFileSync(file, input);",
          "34: fd = fs.openSync(file, 'r');",
          "36: stream = fs.createReadStream(null, { fd: fd, encoding: 'utf8' });",
          "37: stream.on('data', function(data) {",
          "38:   output += data;",
          "39: });",
          "41: process.on('exit', function() {",
          "42:   fs.unlinkSync(file);",
          "43:   assert.equal(output, input);",
          "44: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "65242abc3bdc249916a22daad289c005a7d93ead",
      "candidate_info": {
        "commit_hash": "65242abc3bdc249916a22daad289c005a7d93ead",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/65242abc3bdc249916a22daad289c005a7d93ead",
        "files": [
          "test/simple/test-fs-realpath.js"
        ],
        "message": "Fix fs.realpath tests so that they actually run",
        "before_after_code_files": [
          "test/simple/test-fs-realpath.js||test/simple/test-fs-realpath.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-fs-realpath.js||test/simple/test-fs-realpath.js": [
          "File: test/simple/test-fs-realpath.js -> test/simple/test-fs-realpath.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "79: }",
          "83:   var ncalls = 0;",
          "85:   fs.realpath('/this/path/does/not/exist', function(err, s) {",
          "86:     assert(err);",
          "87:     assert(!s);",
          "88:     ncalls++;",
          "89:   });",
          "91:   process.on('exit', function() {",
          "",
          "[Removed Lines]",
          "82: function test_simple_error_callback() {",
          "",
          "[Added Lines]",
          "82: function test_simple_error_callback(cb) {",
          "89:     cb();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "360: function test_up_multiple(cb) {",
          "366:   var abedabed = tmp('abedabed'.split('').join('/'));",
          "369:   var abedabeda = tmp('abedabeda'.split('').join('/'));",
          "370:   var abedabeda_real = tmp('a');",
          "",
          "[Removed Lines]",
          "361:   fs.mkdirSync(common.tmpDir + '/a', 0755);",
          "362:   fs.mkdirSync(common.tmpDir + '/a/b', 0755);",
          "363:   fs.symlinkSync(common.tmpDir + '/a/d', '..');",
          "364:   fs.symlinkSync(common.tmpDir + '/a/b/e', '..');",
          "367:   var abedabeda_real = tmp('');",
          "",
          "[Added Lines]",
          "362:   console.error('test_up_multiple');",
          "363:   fs.mkdirSync(tmp('a'), 0755);",
          "364:   fs.mkdirSync(tmp('a/b'), 0755);",
          "365:   fs.symlinkSync('..', tmp('a/d'), 'dir');",
          "366:   unlink.push(tmp('a/d'));",
          "367:   fs.symlinkSync('..', tmp('a/b/e'), 'dir');",
          "368:   unlink.push(tmp('a/b/e'));",
          "371:   var abedabed_real = tmp('');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "435: }",
          "437: function test_lying_cache_liar(cb) {",
          "440:   console.log('test_lying_cache_liar');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "442:   var n = 2;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "448:   assert.equal(cache['/foo/bar/baz/bluff'], rps);",
          "449:   fs.realpath('/1/2/3/4/5/6/7', cache, function(er, rp) {",
          "450:     assert.equal(cache['/1/2/3/4/5/6/7'], rp);",
          "451:   });",
          "453:   var test = '/a/b/c/d',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "457:     if (--n === 0) cb();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "456:   assert.equal(expect, actual);",
          "457:   fs.realpath(test, cache, function(er, actual) {",
          "458:     assert.equal(expect, actual);",
          "459:   });",
          "460: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "466:     if (--n === 0) cb();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "474:   test_non_symlinks,",
          "475:   test_escape_cwd,",
          "476:   test_abs_with_kids,",
          "478: ];",
          "479: var numtests = tests.length;",
          "480: function runNextTest(err) {",
          "481:   if (err) throw err;",
          "482:   var test = tests.shift();",
          "486: }",
          "487: getAbsPaths(function(er) {",
          "488:   if (er) throw er;",
          "489:   var tmpDirs = ['cycles', 'cycles/folder'];",
          "",
          "[Removed Lines]",
          "477:   test_lying_cache_liar",
          "483:   if (!test) console.log(numtests +",
          "484:                          ' subtests completed OK for fs.realpath');",
          "485:   else test(runNextTest);",
          "",
          "[Added Lines]",
          "485:   test_lying_cache_liar,",
          "486:   test_up_multiple",
          "489: var testsRun = 0;",
          "493:   if (!test) {",
          "494:     return console.log(numtests +",
          "495:                        ' subtests completed OK for fs.realpath');",
          "496:   }",
          "497:   testsRun++;",
          "498:   test(runNextTest);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "495:     fs.mkdirSync(t, 0700);",
          "496:   });",
          "497:   fs.writeFileSync(tmp('cycles/root.js'), \"console.error('roooot!');\");",
          "498:   runNextTest();",
          "499: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "512:   console.error('start tests');",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "510: process.on('exit', function() {",
          "511:   unlink.forEach(function(path) { try {fs.unlinkSync(path);} catch (e) {} });",
          "512:   assert.equal(async_completed, async_expected);",
          "513: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "526:   assert.equal(numtests, testsRun);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d4ed2e61f7acf9359c6c5c74674677f8f0c0db77",
      "candidate_info": {
        "commit_hash": "d4ed2e61f7acf9359c6c5c74674677f8f0c0db77",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/d4ed2e61f7acf9359c6c5c74674677f8f0c0db77",
        "files": [
          "src/node_crypto.cc"
        ],
        "message": "Add Todo comments about domain-ifying crypto",
        "before_after_code_files": [
          "src/node_crypto.cc||src/node_crypto.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_crypto.cc||src/node_crypto.cc": [
          "File: src/node_crypto.cc -> src/node_crypto.cc"
        ]
      }
    },
    {
      "candidate_hash": "02f24f54ba4cbe6f4d8e6eecd6eb08c07a4569bd",
      "candidate_info": {
        "commit_hash": "02f24f54ba4cbe6f4d8e6eecd6eb08c07a4569bd",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/02f24f54ba4cbe6f4d8e6eecd6eb08c07a4569bd",
        "files": [
          "test/addons/shared-buffer/binding.cc",
          "test/addons/shared-buffer/binding.gyp",
          "test/addons/shared-buffer/test.js"
        ],
        "message": "Add shared-buffer isolate addon test",
        "before_after_code_files": [
          "test/addons/shared-buffer/binding.cc||test/addons/shared-buffer/binding.cc",
          "test/addons/shared-buffer/binding.gyp||test/addons/shared-buffer/binding.gyp",
          "test/addons/shared-buffer/test.js||test/addons/shared-buffer/test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/addons/shared-buffer/binding.cc||test/addons/shared-buffer/binding.cc": [
          "File: test/addons/shared-buffer/binding.cc -> test/addons/shared-buffer/binding.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include <node.h>",
          "2: #include <v8.h>",
          "3: #include <uv.h>",
          "5: using namespace v8;",
          "7: extern \"C\" {",
          "8:   void init(Handle<Object> target);",
          "9: }",
          "12: #define BUFSIZE 1024",
          "13: static uint8_t buf[BUFSIZE];",
          "14: static uv_mutex_t lock;",
          "17: Handle<Value> Get(const Arguments& args) {",
          "18:   HandleScope scope;",
          "20:   int index = args[0]->Uint32Value();",
          "22:   if (index < 0 || BUFSIZE <= index) {",
          "23:     return ThrowException(Exception::Error(String::New(\"out of bounds\")));",
          "24:   }",
          "26:   return scope.Close(Integer::New(buf[index]));",
          "27: }",
          "30: Handle<Value> Set(const Arguments& args) {",
          "31:   uv_mutex_lock(&lock);",
          "32:   HandleScope scope;",
          "34:   int index = args[0]->Uint32Value();",
          "36:   if (index < 0 || BUFSIZE <= index) {",
          "37:     return ThrowException(Exception::Error(String::New(\"out of bounds\")));",
          "38:   }",
          "40:   buf[index] = args[1]->Uint32Value();",
          "42:   Local<Integer> val = Integer::New(buf[index]);",
          "44:   uv_mutex_unlock(&lock);",
          "46:   return scope.Close(val);",
          "47: }",
          "50: void init(Handle<Object> target) {",
          "51:   NODE_SET_METHOD(target, \"get\", Get);",
          "52:   NODE_SET_METHOD(target, \"set\", Set);",
          "53:   target->Set(String::New(\"length\"), Integer::New(BUFSIZE));",
          "54:   uv_mutex_init(&lock);",
          "55: }",
          "",
          "---------------"
        ],
        "test/addons/shared-buffer/binding.gyp||test/addons/shared-buffer/binding.gyp": [
          "File: test/addons/shared-buffer/binding.gyp -> test/addons/shared-buffer/binding.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: {",
          "2:   'targets': [",
          "3:     {",
          "4:       'target_name': 'binding',",
          "5:       'sources': [ 'binding.cc' ]",
          "6:     }",
          "7:   ]",
          "8: }",
          "",
          "---------------"
        ],
        "test/addons/shared-buffer/test.js||test/addons/shared-buffer/test.js": [
          "File: test/addons/shared-buffer/test.js -> test/addons/shared-buffer/test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: var assert = require('assert');",
          "2: var binding = require('./out/Release/binding');",
          "4: console.log(\"binding.length =\", binding.length);",
          "6: if (process.tid === 1) {",
          "7:   var isolate = process._newIsolate(process.argv);",
          "8:   for (var i = 0; i < binding.length; i++) {",
          "9:     console.log('parent',",
          "10:                 'binding.set(' + i + ', ' + i + ')',",
          "11:                 binding.set(i, i));",
          "12:   }",
          "13: } else {",
          "14:   for (var i = 0; i < binding.length; i++) {",
          "15:     console.log('child', 'binding.get(' + i + ')', binding.get(i));",
          "16:   }",
          "17: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}