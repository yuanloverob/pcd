{
  "cve_id": "CVE-2017-7184",
  "cve_desc": "The xfrm_replay_verify_len function in net/xfrm/xfrm_user.c in the Linux kernel through 4.10.6 does not validate certain size data after an XFRM_MSG_NEWAE update, which allows local users to obtain root privileges or cause a denial of service (heap-based out-of-bounds access) by leveraging the CAP_NET_ADMIN capability, as demonstrated during a Pwn2Own competition at CanSecWest 2017 for the Ubuntu 16.10 linux-image-* package 4.8.0.41.52.",
  "repo": "torvalds/linux",
  "patch_hash": "f843ee6dd019bcece3e74e76ad9df0155655d0df",
  "patch_info": {
    "commit_hash": "f843ee6dd019bcece3e74e76ad9df0155655d0df",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/f843ee6dd019bcece3e74e76ad9df0155655d0df",
    "files": [
      "net/xfrm/xfrm_user.c"
    ],
    "message": "xfrm_user: validate XFRM_MSG_NEWAE incoming ESN size harder\n\nKees Cook has pointed out that xfrm_replay_state_esn_len() is subject to\nwrapping issues.  To ensure we are correctly ensuring that the two ESN\nstructures are the same size compare both the overall size as reported\nby xfrm_replay_state_esn_len() and the internal length are the same.\n\nCVE-2017-7184\nSigned-off-by: Andy Whitcroft <apw@canonical.com>\nAcked-by: Steffen Klassert <steffen.klassert@secunet.com>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
    "before_after_code_files": [
      "net/xfrm/xfrm_user.c||net/xfrm/xfrm_user.c"
    ]
  },
  "patch_diff": {
    "net/xfrm/xfrm_user.c||net/xfrm/xfrm_user.c": [
      "File: net/xfrm/xfrm_user.c -> net/xfrm/xfrm_user.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "412:  up = nla_data(rp);",
      "413:  ulen = xfrm_replay_state_esn_len(up);",
      "416:   return -EINVAL;",
      "418:  if (up->replay_window > up->bmp_len * sizeof(__u32) * 8)",
      "",
      "[Removed Lines]",
      "415:  if (nla_len(rp) < ulen || xfrm_replay_state_esn_len(replay_esn) != ulen)",
      "",
      "[Added Lines]",
      "417:  if (nla_len(rp) < ulen ||",
      "418:      xfrm_replay_state_esn_len(replay_esn) != ulen ||",
      "419:      replay_esn->bmp_len != up->bmp_len)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5e708e47c44366453c33373940455a75fd33f635",
      "candidate_info": {
        "commit_hash": "5e708e47c44366453c33373940455a75fd33f635",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/5e708e47c44366453c33373940455a75fd33f635",
        "files": [
          "include/net/xfrm.h",
          "net/xfrm/xfrm_user.c"
        ],
        "message": "xfrm: make xfrm_replay_state_esn_len() return unsigned int\n\nReplay detection bitmaps can't have negative length.\n\nComparisons with nla_len() are left signed just in case negative value\ncan sneak in there.\n\nPropagate unsignedness for code size savings:\n\n\tadd/remove: 0/0 grow/shrink: 0/5 up/down: 0/-38 (-38)\n\tfunction                                     old     new   delta\n\txfrm_state_construct                        1802    1800      -2\n\txfrm_update_ae_params                        295     289      -6\n\txfrm_state_migrate                          1345    1339      -6\n\txfrm_replay_notify_esn                       349     337     -12\n\txfrm_replay_notify_bmp                       345     333     -12\n\nSigned-off-by: Alexey Dobriyan <adobriyan@gmail.com>\nSigned-off-by: Steffen Klassert <steffen.klassert@secunet.com>",
        "before_after_code_files": [
          "include/net/xfrm.h||include/net/xfrm.h",
          "net/xfrm/xfrm_user.c||net/xfrm/xfrm_user.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/xfrm/xfrm_user.c||net/xfrm/xfrm_user.c"
          ],
          "candidate": [
            "net/xfrm/xfrm_user.c||net/xfrm/xfrm_user.c"
          ]
        }
      },
      "candidate_diff": {
        "include/net/xfrm.h||include/net/xfrm.h": [
          "File: include/net/xfrm.h -> include/net/xfrm.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1779:  return sizeof(*alg) + ((alg->alg_key_len + 7) / 8);",
          "1780: }",
          "1783: {",
          "1784:  return sizeof(*replay_esn) + replay_esn->bmp_len * sizeof(__u32);",
          "1785: }",
          "",
          "[Removed Lines]",
          "1782: static inline int xfrm_replay_state_esn_len(struct xfrm_replay_state_esn *replay_esn)",
          "",
          "[Added Lines]",
          "1782: static inline unsigned int xfrm_replay_state_esn_len(struct xfrm_replay_state_esn *replay_esn)",
          "",
          "---------------"
        ],
        "net/xfrm/xfrm_user.c||net/xfrm/xfrm_user.c": [
          "File: net/xfrm/xfrm_user.c -> net/xfrm/xfrm_user.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:   if (rs->bmp_len > XFRMA_REPLAY_ESN_MAX / sizeof(rs->bmp[0]) / 8)",
          "131:    return -EINVAL;",
          "134:       nla_len(rt) != sizeof(*rs))",
          "135:    return -EINVAL;",
          "136:  }",
          "",
          "[Removed Lines]",
          "133:   if (nla_len(rt) < xfrm_replay_state_esn_len(rs) &&",
          "",
          "[Added Lines]",
          "133:   if (nla_len(rt) < (int)xfrm_replay_state_esn_len(rs) &&",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "404:       struct nlattr *rp)",
          "405: {",
          "406:  struct xfrm_replay_state_esn *up;",
          "409:  if (!replay_esn || !rp)",
          "410:   return 0;",
          "",
          "[Removed Lines]",
          "407:  int ulen;",
          "",
          "[Added Lines]",
          "407:  unsigned int ulen;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "418:      xfrm_replay_state_esn_len(replay_esn) != ulen ||",
          "419:      replay_esn->bmp_len != up->bmp_len)",
          "420:   return -EINVAL;",
          "",
          "[Removed Lines]",
          "417:  if (nla_len(rp) < ulen ||",
          "",
          "[Added Lines]",
          "417:  if (nla_len(rp) < (int)ulen ||",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "430:            struct nlattr *rta)",
          "431: {",
          "432:  struct xfrm_replay_state_esn *p, *pp, *up;",
          "435:  if (!rta)",
          "436:   return 0;",
          "438:  up = nla_data(rta);",
          "439:  klen = xfrm_replay_state_esn_len(up);",
          "442:  p = kzalloc(klen, GFP_KERNEL);",
          "443:  if (!p)",
          "",
          "[Removed Lines]",
          "433:  int klen, ulen;",
          "440:  ulen = nla_len(rta) >= klen ? klen : sizeof(*up);",
          "",
          "[Added Lines]",
          "433:  unsigned int klen, ulen;",
          "440:  ulen = nla_len(rta) >= (int)klen ? klen : sizeof(*up);",
          "",
          "---------------"
        ]
      }
    }
  ]
}