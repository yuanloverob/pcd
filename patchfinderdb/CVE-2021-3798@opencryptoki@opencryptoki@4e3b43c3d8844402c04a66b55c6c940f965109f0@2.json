{
  "cve_id": "CVE-2021-3798",
  "cve_desc": "A flaw was found in openCryptoki. The openCryptoki Soft token does not check if an EC key is valid when an EC key is created via C_CreateObject, nor when C_DeriveKey is used with ECDH public data. This may allow a malicious user to extract the private key by performing an invalid curve attack.",
  "repo": "opencryptoki/opencryptoki",
  "patch_hash": "4e3b43c3d8844402c04a66b55c6c940f965109f0",
  "patch_info": {
    "commit_hash": "4e3b43c3d8844402c04a66b55c6c940f965109f0",
    "repo": "opencryptoki/opencryptoki",
    "commit_url": "https://github.com/opencryptoki/opencryptoki/commit/4e3b43c3d8844402c04a66b55c6c940f965109f0",
    "files": [
      "usr/lib/soft_stdll/soft_specific.c"
    ],
    "message": "SOFT: Check the EC Key on C_CreateObject and C_DeriveKey\n\nWhen constructing an OpenSSL EC public or private key from PKCS#11\nattributes or ECDH public data, check that the key is valid, i.e. that\nthe point is on the curve.\n\nThis prevents one from creating an EC key object via C_CreateObject with\ninvalid key data. It also prevents C_DeriveKey to derive a secret using\nECDH with an EC public key (public data) that uses a different curve\nor is invalid by other means.\n\nSigned-off-by: Ingo Franzki <ifranzki@linux.ibm.com>",
    "before_after_code_files": [
      "usr/lib/soft_stdll/soft_specific.c||usr/lib/soft_stdll/soft_specific.c"
    ]
  },
  "patch_diff": {
    "usr/lib/soft_stdll/soft_specific.c||usr/lib/soft_stdll/soft_specific.c": [
      "File: usr/lib/soft_stdll/soft_specific.c -> usr/lib/soft_stdll/soft_specific.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4365:         goto out;",
      "4366:     }",
      "4368: out:",
      "4369:     if (allocated && ecpoint != NULL)",
      "4370:         free(ecpoint);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4368:     if (!EC_KEY_check_key(ec_key)) {",
      "4369:         TRACE_ERROR(\"EC_KEY_check_key failed\\n\");",
      "4370:         rc = CKR_PUBLIC_KEY_INVALID;",
      "4371:         goto out;",
      "4372:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4404:         goto out;",
      "4405:     }",
      "4407: out:",
      "4408:     if (point != NULL)",
      "4409:         EC_POINT_free(point);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4413:     if (!EC_KEY_check_key(ec_key)) {",
      "4414:         TRACE_ERROR(\"EC_KEY_check_key failed\\n\");",
      "4415:         rc = CKR_FUNCTION_FAILED;",
      "4416:         goto out;",
      "4417:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "68885de4d17907f38cbe1137fc6899a98954903c",
      "candidate_info": {
        "commit_hash": "68885de4d17907f38cbe1137fc6899a98954903c",
        "repo": "opencryptoki/opencryptoki",
        "commit_url": "https://github.com/opencryptoki/opencryptoki/commit/68885de4d17907f38cbe1137fc6899a98954903c",
        "files": [
          "usr/lib/ep11_stdll/ep11_specific.c"
        ],
        "message": "[EP11] Fix memory leak on DSA key creation\n\nLSAN reported\n```\n=================================================================\n==591951==ERROR: LeakSanitizer: detected memory leaks\n\nDirect leak of 444 byte(s) in 1 object(s) allocated from:\n    #0 0x3ff9413085d in __interceptor_malloc (/usr/lib64/libasan.so.6+0xb085d)\n    #1 0x3ff8cafaee7 in import_DSA_key usr/lib/ep11_stdll/ep11_specific.c:3330\n    #2 0x3ff8cafaee7 in token_specific_object_add usr/lib/ep11_stdll/ep11_specific.c:3874\n    #3 0x3ff8ca40591 in object_mgr_add usr/lib/common/obj_mgr.c:107\n    #4 0x3ff8cab707f in SC_CreateObject usr/lib/ep11_stdll/new_host.c:1585\n    #5 0x3ff8ef38a75 in C_CreateObject usr/lib/api/api_interface.c:594\n    #6 0x1011f1b in createABPublicDSAKey testcases/crypto/abfunc.c:362\n    #7 0x1017e5f in do_CreateKeyObjects testcases/crypto/abfunc.c:713\n    #8 0x101e7b3 in testdriver testcases/crypto/abfunc.c:1090\n    #9 0x100208b in main testcases/crypto/abfunc.c:1149\n    #10 0x3ff9352bdb3 in __libc_start_main (/usr/lib64/libc.so.6+0x2bdb3)\n    #11 0x10023ed  (/root/code/opencryptoki/testcases/crypto/ab_tests+0x10023ed)\n```\n\nSigned-off-by: Juergen Christ <jchrist@linux.ibm.com>",
        "before_after_code_files": [
          "usr/lib/ep11_stdll/ep11_specific.c||usr/lib/ep11_stdll/ep11_specific.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "usr/lib/ep11_stdll/ep11_specific.c||usr/lib/ep11_stdll/ep11_specific.c": [
          "File: usr/lib/ep11_stdll/ep11_specific.c -> usr/lib/ep11_stdll/ep11_specific.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3332:         rc = ber_encode_DSAPublicKey(FALSE, &data, &data_len,",
          "3333:                                      prime, subprime, base, value);",
          "3334:         if (rc != CKR_OK) {",
          "",
          "[Removed Lines]",
          "3328:         rc = ber_encode_DSAPublicKey(TRUE, &data, &data_len,",
          "3329:                                      prime, subprime, base, value);",
          "3330:         data = malloc(data_len);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e5fc87dde2cb6e2af16ee964deba45faac8bf418",
      "candidate_info": {
        "commit_hash": "e5fc87dde2cb6e2af16ee964deba45faac8bf418",
        "repo": "opencryptoki/opencryptoki",
        "commit_url": "https://github.com/opencryptoki/opencryptoki/commit/e5fc87dde2cb6e2af16ee964deba45faac8bf418",
        "files": [
          "usr/lib/common/data_obj.c"
        ],
        "message": "Support CKA_OBJECT_ID for CKO_DATA objects\n\nPer PKCS#11 data objects support the CKA_OBJECT_ID attribute.\n\nSigned-off-by: Ingo Franzki <ifranzki@linux.ibm.com>",
        "before_after_code_files": [
          "usr/lib/common/data_obj.c||usr/lib/common/data_obj.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "usr/lib/common/data_obj.c||usr/lib/common/data_obj.c": [
          "File: usr/lib/common/data_obj.c -> usr/lib/common/data_obj.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     CK_ATTRIBUTE *class_attr = NULL;",
          "53:     CK_ATTRIBUTE *app_attr = NULL;",
          "54:     CK_ATTRIBUTE *value_attr = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:     CK_ATTRIBUTE *objid_attr = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:         (CK_ATTRIBUTE *) malloc(sizeof(CK_ATTRIBUTE) + sizeof(CK_OBJECT_CLASS));",
          "65:     app_attr = (CK_ATTRIBUTE *) malloc(sizeof(CK_ATTRIBUTE));",
          "66:     value_attr = (CK_ATTRIBUTE *) malloc(sizeof(CK_ATTRIBUTE));",
          "69:         if (class_attr)",
          "70:             free(class_attr);",
          "71:         if (app_attr)",
          "72:             free(app_attr);",
          "73:         if (value_attr)",
          "74:             free(value_attr);",
          "75:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_HOST_MEMORY));",
          "76:         return CKR_HOST_MEMORY;",
          "77:     }",
          "",
          "[Removed Lines]",
          "68:     if (!class_attr || !app_attr || !value_attr) {",
          "",
          "[Added Lines]",
          "68:     objid_attr = (CK_ATTRIBUTE *) malloc(sizeof(CK_ATTRIBUTE));",
          "70:     if (!class_attr || !app_attr || !value_attr || !objid_attr) {",
          "77:         if (objid_attr)",
          "78:             free(objid_attr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "84:     value_attr->ulValueLen = 0; // empty byte array",
          "85:     value_attr->pValue = NULL;",
          "87:     class_attr->type = CKA_CLASS;",
          "88:     class_attr->ulValueLen = sizeof(CK_OBJECT_CLASS);",
          "89:     class_attr->pValue = (CK_BYTE *) class_attr + sizeof(CK_ATTRIBUTE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91:     objid_attr->type = CKA_OBJECT_ID;",
          "92:     objid_attr->ulValueLen = 0; // empty byte array",
          "93:     objid_attr->pValue = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "92:     template_update_attribute(tmpl, class_attr);",
          "93:     template_update_attribute(tmpl, app_attr);",
          "94:     template_update_attribute(tmpl, value_attr);",
          "96:     return CKR_OK;",
          "97: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "103:     template_update_attribute(tmpl, objid_attr);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "111:     switch (attr->type) {",
          "112:     case CKA_APPLICATION:",
          "113:     case CKA_VALUE:",
          "114:         return CKR_OK;",
          "115:     default:",
          "116:         return template_validate_base_attribute(tmpl, attr, mode);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "123:     case CKA_OBJECT_ID:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4486a9f4fdc5e65b479d519d5fb12d5c9aefef1b",
      "candidate_info": {
        "commit_hash": "4486a9f4fdc5e65b479d519d5fb12d5c9aefef1b",
        "repo": "opencryptoki/opencryptoki",
        "commit_url": "https://github.com/opencryptoki/opencryptoki/commit/4486a9f4fdc5e65b479d519d5fb12d5c9aefef1b",
        "files": [
          "usr/lib/common/new_host.c",
          "usr/lib/ep11_stdll/new_host.c",
          "usr/lib/icsf_stdll/new_host.c"
        ],
        "message": "Correct error handling of C_Sign/Verify/Update/Final\n\nPKCS#11 states \"A call to C_SignUpdate which results in an error\nterminates the current signature operation.\"\n\nThus argument checking must be performed after the obtaining the\nsession, so that the operation can be terminated in case of an argument\nerror.\n\nSigned-off-by: Ingo Franzki <ifranzki@linux.ibm.com>",
        "before_after_code_files": [
          "usr/lib/common/new_host.c||usr/lib/common/new_host.c",
          "usr/lib/ep11_stdll/new_host.c||usr/lib/ep11_stdll/new_host.c",
          "usr/lib/icsf_stdll/new_host.c||usr/lib/icsf_stdll/new_host.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "usr/lib/common/new_host.c||usr/lib/common/new_host.c": [
          "File: usr/lib/common/new_host.c -> usr/lib/common/new_host.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2794:         goto done;",
          "2795:     }",
          "2803:     sess = session_mgr_find(tokdata, sSession->sessionh);",
          "2804:     if (!sess) {",
          "2805:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_SESSION_HANDLE_INVALID));",
          "",
          "[Removed Lines]",
          "2797:     if (!pData || !pulSignatureLen) {",
          "2798:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_ARGUMENTS_BAD));",
          "2799:         rc = CKR_ARGUMENTS_BAD;",
          "2800:         goto done;",
          "2801:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2807:         goto done;",
          "2808:     }",
          "2810:     if (sess->sign_ctx.active == FALSE) {",
          "2811:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_OPERATION_NOT_INITIALIZED));",
          "2812:         rc = CKR_OPERATION_NOT_INITIALIZED;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2804:     if (!pData || !pulSignatureLen) {",
          "2805:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_ARGUMENTS_BAD));",
          "2806:         rc = CKR_ARGUMENTS_BAD;",
          "2807:         goto done;",
          "2808:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2849:         goto done;",
          "2850:     }",
          "2858:     sess = session_mgr_find(tokdata, sSession->sessionh);",
          "2859:     if (!sess) {",
          "2860:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_SESSION_HANDLE_INVALID));",
          "",
          "[Removed Lines]",
          "2852:     if (!pPart && ulPartLen != 0) {",
          "2853:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_ARGUMENTS_BAD));",
          "2854:         rc = CKR_ARGUMENTS_BAD;",
          "2855:         goto done;",
          "2856:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2862:         goto done;",
          "2863:     }",
          "2865:     if (sess->sign_ctx.active == FALSE) {",
          "2866:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_OPERATION_NOT_INITIALIZED));",
          "2867:         rc = CKR_OPERATION_NOT_INITIALIZED;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2859:     if (!pPart && ulPartLen != 0) {",
          "2860:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_ARGUMENTS_BAD));",
          "2861:         rc = CKR_ARGUMENTS_BAD;",
          "2862:         goto done;",
          "2863:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2899:         goto done;",
          "2900:     }",
          "2908:     sess = session_mgr_find(tokdata, sSession->sessionh);",
          "2909:     if (!sess) {",
          "2910:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_SESSION_HANDLE_INVALID));",
          "",
          "[Removed Lines]",
          "2902:     if (!pulSignatureLen) {",
          "2903:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_ARGUMENTS_BAD));",
          "2904:         rc = CKR_ARGUMENTS_BAD;",
          "2905:         goto done;",
          "2906:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2912:         goto done;",
          "2913:     }",
          "2915:     if (sess->sign_ctx.active == FALSE) {",
          "2916:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_OPERATION_NOT_INITIALIZED));",
          "2917:         rc = CKR_OPERATION_NOT_INITIALIZED;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2909:     if (!pulSignatureLen) {",
          "2910:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_ARGUMENTS_BAD));",
          "2911:         rc = CKR_ARGUMENTS_BAD;",
          "2912:         goto done;",
          "2913:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3014:         goto done;",
          "3015:     }",
          "3023:     sess = session_mgr_find(tokdata, sSession->sessionh);",
          "3024:     if (!sess) {",
          "3025:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_SESSION_HANDLE_INVALID));",
          "",
          "[Removed Lines]",
          "3017:     if (!pData || !pulSignatureLen) {",
          "3018:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_ARGUMENTS_BAD));",
          "3019:         rc = CKR_ARGUMENTS_BAD;",
          "3020:         goto done;",
          "3021:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3027:         goto done;",
          "3028:     }",
          "3030:     if ((sess->sign_ctx.active == FALSE) || (sess->sign_ctx.recover == FALSE)) {",
          "3031:         rc = CKR_OPERATION_NOT_INITIALIZED;",
          "3032:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_OPERATION_NOT_INITIALIZED));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3024:     if (!pData || !pulSignatureLen) {",
          "3025:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_ARGUMENTS_BAD));",
          "3026:         rc = CKR_ARGUMENTS_BAD;",
          "3027:         goto done;",
          "3028:     }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3128:         goto done;",
          "3129:     }",
          "3137:     sess = session_mgr_find(tokdata, sSession->sessionh);",
          "3138:     if (!sess) {",
          "3139:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_SESSION_HANDLE_INVALID));",
          "",
          "[Removed Lines]",
          "3131:     if (!pData || !pSignature) {",
          "3132:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_ARGUMENTS_BAD));",
          "3133:         rc = CKR_ARGUMENTS_BAD;",
          "3134:         goto done;",
          "3135:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3141:         goto done;",
          "3142:     }",
          "3144:     if (sess->verify_ctx.active == FALSE) {",
          "3145:         rc = CKR_OPERATION_NOT_INITIALIZED;",
          "3146:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_OPERATION_NOT_INITIALIZED));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3138:     if (!pData || !pSignature) {",
          "3139:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_ARGUMENTS_BAD));",
          "3140:         rc = CKR_ARGUMENTS_BAD;",
          "3141:         goto done;",
          "3142:     }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3178:         goto done;",
          "3179:     }",
          "3187:     sess = session_mgr_find(tokdata, sSession->sessionh);",
          "3188:     if (!sess) {",
          "3189:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_SESSION_HANDLE_INVALID));",
          "",
          "[Removed Lines]",
          "3181:     if (!pPart && ulPartLen != 0) {",
          "3182:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_ARGUMENTS_BAD));",
          "3183:         rc = CKR_ARGUMENTS_BAD;",
          "3184:         goto done;",
          "3185:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3191:         goto done;",
          "3192:     }",
          "3194:     if (sess->verify_ctx.active == FALSE) {",
          "3195:         rc = CKR_OPERATION_NOT_INITIALIZED;",
          "3196:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_OPERATION_NOT_INITIALIZED));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3188:     if (!pPart && ulPartLen != 0) {",
          "3189:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_ARGUMENTS_BAD));",
          "3190:         rc = CKR_ARGUMENTS_BAD;",
          "3191:         goto done;",
          "3192:     }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3228:         goto done;",
          "3229:     }",
          "3237:     sess = session_mgr_find(tokdata, sSession->sessionh);",
          "3238:     if (!sess) {",
          "3239:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_SESSION_HANDLE_INVALID));",
          "",
          "[Removed Lines]",
          "3231:     if (!pSignature) {",
          "3232:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_ARGUMENTS_BAD));",
          "3233:         rc = CKR_ARGUMENTS_BAD;",
          "3234:         goto done;",
          "3235:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3241:         goto done;",
          "3242:     }",
          "3244:     if (sess->verify_ctx.active == FALSE) {",
          "3245:         rc = CKR_OPERATION_NOT_INITIALIZED;",
          "3246:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_OPERATION_NOT_INITIALIZED));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3238:     if (!pSignature) {",
          "3239:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_ARGUMENTS_BAD));",
          "3240:         rc = CKR_ARGUMENTS_BAD;",
          "3241:         goto done;",
          "3242:     }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3339:         goto done;",
          "3340:     }",
          "3348:     sess = session_mgr_find(tokdata, sSession->sessionh);",
          "3349:     if (!sess) {",
          "3350:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_SESSION_HANDLE_INVALID));",
          "",
          "[Removed Lines]",
          "3342:     if (!pSignature || !pulDataLen) {",
          "3343:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_ARGUMENTS_BAD));",
          "3344:         rc = CKR_ARGUMENTS_BAD;",
          "3345:         goto done;",
          "3346:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "3352:         goto done;",
          "3353:     }",
          "3355:     if ((sess->verify_ctx.active == FALSE) ||",
          "3356:         (sess->verify_ctx.recover == FALSE)) {",
          "3357:         rc = CKR_OPERATION_NOT_INITIALIZED;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3349:     if (!pSignature || !pulDataLen) {",
          "3350:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_ARGUMENTS_BAD));",
          "3351:         rc = CKR_ARGUMENTS_BAD;",
          "3352:         goto done;",
          "3353:     }",
          "",
          "---------------"
        ],
        "usr/lib/ep11_stdll/new_host.c||usr/lib/ep11_stdll/new_host.c": [
          "File: usr/lib/ep11_stdll/new_host.c -> usr/lib/ep11_stdll/new_host.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2921:         goto done;",
          "2922:     }",
          "2930:     sess = session_mgr_find(tokdata, sSession->sessionh);",
          "2931:     if (!sess) {",
          "2932:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_SESSION_HANDLE_INVALID));",
          "",
          "[Removed Lines]",
          "2924:     if (!pData || !pulSignatureLen) {",
          "2925:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_ARGUMENTS_BAD));",
          "2926:         rc = CKR_ARGUMENTS_BAD;",
          "2927:         goto done;",
          "2928:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2934:         goto done;",
          "2935:     }",
          "2937:     if (sess->sign_ctx.active == FALSE) {",
          "2938:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_OPERATION_NOT_INITIALIZED));",
          "2939:         rc = CKR_OPERATION_NOT_INITIALIZED;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2931:     if (!pData || !pulSignatureLen) {",
          "2932:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_ARGUMENTS_BAD));",
          "2933:         rc = CKR_ARGUMENTS_BAD;",
          "2934:         goto done;",
          "2935:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3005:         goto done;",
          "3006:     }",
          "3014:     sess = session_mgr_find(tokdata, sSession->sessionh);",
          "3015:     if (!sess) {",
          "3016:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_SESSION_HANDLE_INVALID));",
          "",
          "[Removed Lines]",
          "3008:     if (!pPart && ulPartLen != 0) {",
          "3009:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_ARGUMENTS_BAD));",
          "3010:         rc = CKR_ARGUMENTS_BAD;",
          "3011:         goto done;",
          "3012:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3018:         goto done;",
          "3019:     }",
          "3021:     if (sess->sign_ctx.active == FALSE) {",
          "3022:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_OPERATION_NOT_INITIALIZED));",
          "3023:         rc = CKR_OPERATION_NOT_INITIALIZED;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3015:     if (!pPart && ulPartLen != 0) {",
          "3016:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_ARGUMENTS_BAD));",
          "3017:         rc = CKR_ARGUMENTS_BAD;",
          "3018:         goto done;",
          "3019:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3087:         goto done;",
          "3088:     }",
          "3096:     sess = session_mgr_find(tokdata, sSession->sessionh);",
          "3097:     if (!sess) {",
          "3098:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_SESSION_HANDLE_INVALID));",
          "",
          "[Removed Lines]",
          "3090:     if (!pulSignatureLen) {",
          "3091:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_ARGUMENTS_BAD));",
          "3092:         rc = CKR_ARGUMENTS_BAD;",
          "3093:         goto done;",
          "3094:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3100:         goto done;",
          "3101:     }",
          "3103:     if (sess->sign_ctx.active == FALSE) {",
          "3104:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_OPERATION_NOT_INITIALIZED));",
          "3105:         rc = CKR_OPERATION_NOT_INITIALIZED;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3097:     if (!pulSignatureLen) {",
          "3098:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_ARGUMENTS_BAD));",
          "3099:         rc = CKR_ARGUMENTS_BAD;",
          "3100:         goto done;",
          "3101:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3296:         goto done;",
          "3297:     }",
          "3305:     sess = session_mgr_find(tokdata, sSession->sessionh);",
          "3306:     if (!sess) {",
          "3307:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_SESSION_HANDLE_INVALID));",
          "",
          "[Removed Lines]",
          "3299:     if (!pData || !pSignature) {",
          "3300:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_ARGUMENTS_BAD));",
          "3301:         rc = CKR_ARGUMENTS_BAD;",
          "3302:         goto done;",
          "3303:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3309:         goto done;",
          "3310:     }",
          "3312:     if (sess->verify_ctx.active == FALSE) {",
          "3313:         rc = CKR_OPERATION_NOT_INITIALIZED;",
          "3314:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_OPERATION_NOT_INITIALIZED));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3306:     if (!pData || !pSignature) {",
          "3307:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_ARGUMENTS_BAD));",
          "3308:         rc = CKR_ARGUMENTS_BAD;",
          "3309:         goto done;",
          "3310:     }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3375:         goto done;",
          "3376:     }",
          "3384:     sess = session_mgr_find(tokdata, sSession->sessionh);",
          "3385:     if (!sess) {",
          "3386:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_SESSION_HANDLE_INVALID));",
          "",
          "[Removed Lines]",
          "3378:     if (!pPart && ulPartLen != 0) {",
          "3379:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_ARGUMENTS_BAD));",
          "3380:         rc = CKR_ARGUMENTS_BAD;",
          "3381:         goto done;",
          "3382:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3388:         goto done;",
          "3389:     }",
          "3391:     if (sess->verify_ctx.active == FALSE) {",
          "3392:         rc = CKR_OPERATION_NOT_INITIALIZED;",
          "3393:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_OPERATION_NOT_INITIALIZED));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3385:     if (!pPart && ulPartLen != 0) {",
          "3386:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_ARGUMENTS_BAD));",
          "3387:         rc = CKR_ARGUMENTS_BAD;",
          "3388:         goto done;",
          "3389:     }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3456:         goto done;",
          "3457:     }",
          "3465:     sess = session_mgr_find(tokdata, sSession->sessionh);",
          "3466:     if (!sess) {",
          "3467:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_SESSION_HANDLE_INVALID));",
          "",
          "[Removed Lines]",
          "3459:     if (!pSignature) {",
          "3460:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_ARGUMENTS_BAD));",
          "3461:         rc = CKR_ARGUMENTS_BAD;",
          "3462:         goto done;",
          "3463:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3469:         goto done;",
          "3470:     }",
          "3472:     if (sess->verify_ctx.active == FALSE) {",
          "3473:         rc = CKR_OPERATION_NOT_INITIALIZED;",
          "3474:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_OPERATION_NOT_INITIALIZED));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3466:     if (!pSignature) {",
          "3467:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_ARGUMENTS_BAD));",
          "3468:         rc = CKR_ARGUMENTS_BAD;",
          "3469:         goto done;",
          "3470:     }",
          "",
          "---------------"
        ],
        "usr/lib/icsf_stdll/new_host.c||usr/lib/icsf_stdll/new_host.c": [
          "File: usr/lib/icsf_stdll/new_host.c -> usr/lib/icsf_stdll/new_host.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2231:         goto done;",
          "2232:     }",
          "2240:     sess = session_mgr_find(tokdata, sSession->sessionh);",
          "2241:     if (!sess) {",
          "2242:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_SESSION_HANDLE_INVALID));",
          "",
          "[Removed Lines]",
          "2234:     if (!pData || !pulSignatureLen) {",
          "2235:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_ARGUMENTS_BAD));",
          "2236:         rc = CKR_ARGUMENTS_BAD;",
          "2237:         goto done;",
          "2238:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2247:     sess->handle = sSession->sessionh;",
          "2249:     if (sess->sign_ctx.active == FALSE) {",
          "2250:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_OPERATION_NOT_INITIALIZED));",
          "2251:         rc = CKR_OPERATION_NOT_INITIALIZED;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2243:     if (!pData || !pulSignatureLen) {",
          "2244:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_ARGUMENTS_BAD));",
          "2245:         rc = CKR_ARGUMENTS_BAD;",
          "2246:         goto done;",
          "2247:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2285:         goto done;",
          "2286:     }",
          "2294:     sess = session_mgr_find(tokdata, sSession->sessionh);",
          "2295:     if (!sess) {",
          "2296:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_SESSION_HANDLE_INVALID));",
          "",
          "[Removed Lines]",
          "2288:     if (!pPart && ulPartLen != 0) {",
          "2289:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_ARGUMENTS_BAD));",
          "2290:         rc = CKR_ARGUMENTS_BAD;",
          "2291:         goto done;",
          "2292:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2301:     sess->handle = sSession->sessionh;",
          "2303:     if (sess->sign_ctx.active == FALSE) {",
          "2304:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_OPERATION_NOT_INITIALIZED));",
          "2305:         rc = CKR_OPERATION_NOT_INITIALIZED;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2297:     if (!pPart && ulPartLen != 0) {",
          "2298:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_ARGUMENTS_BAD));",
          "2299:         rc = CKR_ARGUMENTS_BAD;",
          "2300:         goto done;",
          "2301:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2335:         goto done;",
          "2336:     }",
          "2344:     sess = session_mgr_find(tokdata, sSession->sessionh);",
          "2345:     if (!sess) {",
          "2346:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_SESSION_HANDLE_INVALID));",
          "",
          "[Removed Lines]",
          "2338:     if (!pulSignatureLen) {",
          "2339:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_ARGUMENTS_BAD));",
          "2340:         rc = CKR_ARGUMENTS_BAD;",
          "2341:         goto done;",
          "2342:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2351:     sess->handle = sSession->sessionh;",
          "2353:     if (sess->sign_ctx.active == FALSE) {",
          "2354:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_OPERATION_NOT_INITIALIZED));",
          "2355:         rc = CKR_OPERATION_NOT_INITIALIZED;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2347:     if (!pulSignatureLen) {",
          "2348:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_ARGUMENTS_BAD));",
          "2349:         rc = CKR_ARGUMENTS_BAD;",
          "2350:         goto done;",
          "2351:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2488:         goto done;",
          "2489:     }",
          "2497:     sess = session_mgr_find(tokdata, sSession->sessionh);",
          "2498:     if (!sess) {",
          "2499:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_SESSION_HANDLE_INVALID));",
          "",
          "[Removed Lines]",
          "2491:     if (!pData || !pSignature) {",
          "2492:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_ARGUMENTS_BAD));",
          "2493:         rc = CKR_ARGUMENTS_BAD;",
          "2494:         goto done;",
          "2495:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2504:     sess->handle = sSession->sessionh;",
          "2506:     if (sess->verify_ctx.active == FALSE) {",
          "2507:         rc = CKR_OPERATION_NOT_INITIALIZED;",
          "2508:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_OPERATION_NOT_INITIALIZED));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2500:     if (!pData || !pSignature) {",
          "2501:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_ARGUMENTS_BAD));",
          "2502:         rc = CKR_ARGUMENTS_BAD;",
          "2503:         goto done;",
          "2504:     }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2540:         goto done;",
          "2541:     }",
          "2549:     sess = session_mgr_find(tokdata, sSession->sessionh);",
          "2550:     if (!sess) {",
          "2551:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_SESSION_HANDLE_INVALID));",
          "",
          "[Removed Lines]",
          "2543:     if (!pPart && ulPartLen != 0) {",
          "2544:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_ARGUMENTS_BAD));",
          "2545:         rc = CKR_ARGUMENTS_BAD;",
          "2546:         goto done;",
          "2547:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2556:     sess->handle = sSession->sessionh;",
          "2558:     if (sess->verify_ctx.active == FALSE) {",
          "2559:         rc = CKR_OPERATION_NOT_INITIALIZED;",
          "2560:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_OPERATION_NOT_INITIALIZED));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2552:     if (!pPart && ulPartLen != 0) {",
          "2553:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_ARGUMENTS_BAD));",
          "2554:         rc = CKR_ARGUMENTS_BAD;",
          "2555:         goto done;",
          "2556:     }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2591:         goto done;",
          "2592:     }",
          "2600:     sess = session_mgr_find(tokdata, sSession->sessionh);",
          "2601:     if (!sess) {",
          "2602:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_SESSION_HANDLE_INVALID));",
          "",
          "[Removed Lines]",
          "2594:     if (!pSignature) {",
          "2595:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_ARGUMENTS_BAD));",
          "2596:         rc = CKR_ARGUMENTS_BAD;",
          "2597:         goto done;",
          "2598:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2607:     sess->handle = sSession->sessionh;",
          "2609:     if (sess->verify_ctx.active == FALSE) {",
          "2610:         rc = CKR_OPERATION_NOT_INITIALIZED;",
          "2611:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_OPERATION_NOT_INITIALIZED));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2603:     if (!pSignature) {",
          "2604:         TRACE_ERROR(\"%s\\n\", ock_err(ERR_ARGUMENTS_BAD));",
          "2605:         rc = CKR_ARGUMENTS_BAD;",
          "2606:         goto done;",
          "2607:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ff74d0d93df308af549b6d1251b36024383b7a0f",
      "candidate_info": {
        "commit_hash": "ff74d0d93df308af549b6d1251b36024383b7a0f",
        "repo": "opencryptoki/opencryptoki",
        "commit_url": "https://github.com/opencryptoki/opencryptoki/commit/ff74d0d93df308af549b6d1251b36024383b7a0f",
        "files": [
          "usr/lib/common/template.c"
        ],
        "message": "Don't allow CKA_COPYABLE to be set to TRUE during C_CopyObject\n\nPKCS#11: \"The Cryptoki attributes which can be modified during\nthe course of a C_CopyObject operation are the same as the Cryptoki\nattributes which are described as being modifiable, plus the three\nspecial attributes CKA_TOKEN, CKA_PRIVATE, CKA_MODIFIABLE and\nCKA_DESTROYABLE.\"\n\nCKA_COPYABLE can not be set to TRUE once it was set to FALSE, so it\nalso can not be set to TRUE during C_CopyObject.\n\nSigned-off-by: Ingo Franzki <ifranzki@linux.ibm.com>",
        "before_after_code_files": [
          "usr/lib/common/template.c||usr/lib/common/template.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "usr/lib/common/template.c||usr/lib/common/template.c": [
          "File: usr/lib/common/template.c -> usr/lib/common/template.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1908:             TRACE_ERROR(\"%s\\n\", ock_err(ERR_ATTRIBUTE_VALUE_INVALID));",
          "1909:             return CKR_ATTRIBUTE_VALUE_INVALID;",
          "1910:         }",
          "1912:                      MODE_UNWRAP)) != 0)",
          "1913:             return CKR_OK;",
          "1914:         if (attr->pValue != NULL && *(CK_BBOOL *)attr->pValue == FALSE)",
          "",
          "[Removed Lines]",
          "1911:         if ((mode & (MODE_CREATE | MODE_COPY | MODE_DERIVE | MODE_KEYGEN |",
          "",
          "[Added Lines]",
          "1911:         if ((mode & (MODE_CREATE | MODE_DERIVE | MODE_KEYGEN |",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ccfd8b494bf8ddb441352d2d6129e0384660504e",
      "candidate_info": {
        "commit_hash": "ccfd8b494bf8ddb441352d2d6129e0384660504e",
        "repo": "opencryptoki/opencryptoki",
        "commit_url": "https://github.com/opencryptoki/opencryptoki/commit/ccfd8b494bf8ddb441352d2d6129e0384660504e",
        "files": [
          "usr/include/pkcs11types.h",
          "usr/lib/common/p11util.c",
          "usr/sbin/pkcsslotd/err.c"
        ],
        "message": "Add missing attributes\n\nUpdate pkcs11types.h to define all attributes specified by\nPKCS#11.\n\nSigned-off-by: Ingo Franzki <ifranzki@linux.ibm.com>",
        "before_after_code_files": [
          "usr/include/pkcs11types.h||usr/include/pkcs11types.h",
          "usr/lib/common/p11util.c||usr/lib/common/p11util.c",
          "usr/sbin/pkcsslotd/err.c||usr/sbin/pkcsslotd/err.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "usr/include/pkcs11types.h||usr/include/pkcs11types.h": [
          "File: usr/include/pkcs11types.h -> usr/include/pkcs11types.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "476: #define CKA_ATTR_TYPES         0x00000085",
          "477: #define CKA_TRUSTED            0x00000086",
          "479: #define CKA_KEY_TYPE           0x00000100",
          "480: #define CKA_SUBJECT            0x00000101",
          "481: #define CKA_ID                 0x00000102",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "479: #define CKA_CERTIFICATE_CATEGORY        0x00000087",
          "480: #define CKA_JAVA_MIDP_SECURITY_DOMAIN   0x00000088",
          "481: #define CKA_URL                         0x00000089",
          "482: #define CKA_HASH_OF_SUBJECT_PUBLIC_KEY  0x0000008A",
          "483: #define CKA_HASH_OF_ISSUER_PUBLIC_KEY   0x0000008B",
          "484: #define CKA_NAME_HASH_ALGORITHM         0x0000008C",
          "485: #define CKA_CHECK_VALUE                 0x00000090",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "500: #define CKA_EXPONENT_1         0x00000126",
          "501: #define CKA_EXPONENT_2         0x00000127",
          "502: #define CKA_COEFFICIENT        0x00000128",
          "503: #define CKA_PRIME              0x00000130",
          "504: #define CKA_SUBPRIME           0x00000131",
          "505: #define CKA_BASE               0x00000132",
          "507: #define CKA_PRIME_BITS         0x00000133",
          "508: #define CKA_SUBPRIME_BITS      0x00000134",
          "510: #define CKA_VALUE_BITS         0x00000160",
          "511: #define CKA_VALUE_LEN          0x00000161",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "511: #define CKA_PUBLIC_KEY_INFO    0x00000129",
          "518: #define CKA_SUB_PRIME_BITS     CKA_SUBPRIME_BITS",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "521: #define CKA_KEY_GEN_MECHANISM  0x00000166",
          "522: #define CKA_MODIFIABLE         0x00000170",
          "524: #define CKA_ECDSA_PARAMS       0x00000180",
          "525: #define CKA_EC_PARAMS          0x00000180",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "533: #define CKA_COPYABLE           0x00000171",
          "534: #define CKA_DESTROYABLE        0x00000172",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "528: #define CKA_SECONDARY_AUTH     0x00000200",
          "529: #define CKA_AUTH_PIN_FLAGS     0x00000201",
          "530: #define CKA_ALWAYS_AUTHENTICATE 0x00000202",
          "531: #define CKA_HW_FEATURE_TYPE    0x00000300",
          "532: #define CKA_RESET_ON_INIT      0x00000301",
          "533: #define CKA_HAS_RESET          0x00000302",
          "535: #define CKA_WRAP_TEMPLATE        (CKF_ARRAY_ATTRIBUTE|0x00000211UL)",
          "536: #define CKA_UNWRAP_TEMPLATE      (CKF_ARRAY_ATTRIBUTE|0x00000212UL)",
          "538: #define CKA_PROFILE_ID         0x00000601UL",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "543: #define CKA_WRAP_WITH_TRUSTED  0x00000210",
          "550: #define CKA_DERIVE_TEMPLATE      (CKF_ARRAY_ATTRIBUTE|0x00000213)",
          "",
          "---------------"
        ],
        "usr/lib/common/p11util.c||usr/lib/common/p11util.c": [
          "File: usr/lib/common/p11util.c -> usr/lib/common/p11util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:     case CKA_OWNER:",
          "192:     case CKA_ATTR_TYPES:",
          "193:     case CKA_TRUSTED:",
          "194:     case CKA_IBM_RESTRICTABLE:",
          "195:     case CKA_IBM_NEVER_MODIFIABLE:",
          "196:     case CKA_IBM_RETAINKEY:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "194:     case CKA_WRAP_WITH_TRUSTED:",
          "195:     case CKA_CERTIFICATE_CATEGORY:",
          "196:     case CKA_JAVA_MIDP_SECURITY_DOMAIN:",
          "197:     case CKA_URL:",
          "198:     case CKA_HASH_OF_SUBJECT_PUBLIC_KEY:",
          "199:     case CKA_HASH_OF_ISSUER_PUBLIC_KEY:",
          "200:     case CKA_NAME_HASH_ALGORITHM:",
          "201:     case CKA_CHECK_VALUE:",
          "202:     case CKA_PUBLIC_KEY_INFO:",
          "203:     case CKA_COPYABLE:",
          "204:     case CKA_DESTROYABLE:",
          "",
          "---------------"
        ],
        "usr/sbin/pkcsslotd/err.c||usr/sbin/pkcsslotd/err.c": [
          "File: usr/sbin/pkcsslotd/err.c -> usr/sbin/pkcsslotd/err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "657:     CONSTINFO(CKA_MODIFIABLE),",
          "658:     CONSTINFO(CKA_ECDSA_PARAMS),",
          "659:     CONSTINFO(CKA_EC_POINT),",
          "660:     CONSTINFO(CKA_VENDOR_DEFINED),",
          "661:     CONSTINFO(CKA_IBM_OPAQUE),",
          "662:     CONSTINFO(CKA_IBM_RESTRICTABLE),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "660:     CONSTINFO(CKA_WRAP_WITH_TRUSTED),",
          "661:     CONSTINFO(CKA_CERTIFICATE_CATEGORY),",
          "662:     CONSTINFO(CKA_JAVA_MIDP_SECURITY_DOMAIN),",
          "663:     CONSTINFO(CKA_URL),",
          "664:     CONSTINFO(CKA_HASH_OF_SUBJECT_PUBLIC_KEY),",
          "665:     CONSTINFO(CKA_HASH_OF_ISSUER_PUBLIC_KEY),",
          "666:     CONSTINFO(CKA_NAME_HASH_ALGORITHM),",
          "667:     CONSTINFO(CKA_CHECK_VALUE),",
          "668:     CONSTINFO(CKA_PUBLIC_KEY_INFO),",
          "669:     CONSTINFO(CKA_COPYABLE),",
          "670:     CONSTINFO(CKA_DESTROYABLE),",
          "",
          "---------------"
        ]
      }
    }
  ]
}