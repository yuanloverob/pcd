{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a634c9e653713cfed97f4409486470bc817f514f",
      "candidate_info": {
        "commit_hash": "a634c9e653713cfed97f4409486470bc817f514f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a634c9e653713cfed97f4409486470bc817f514f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Window functions are never constant.\n\nFossilOrigin-Name: 35f0b5a8c7921f7419eeb11be8201fd6988047042fcaeffa297fc322bc480c1f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 54410f0e7710542d5159d0449898598d2b7f7676bfd993644ca47da1bf1fcdac",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1943:     case TK_FUNCTION:",
          "1945:         return WRC_Continue;",
          "1946:       }else{",
          "1947:         pWalker->eCode = 0;",
          "",
          "[Removed Lines]",
          "1944:       if( pWalker->eCode>=4 || ExprHasProperty(pExpr,EP_ConstFunc) ){",
          "",
          "[Added Lines]",
          "1944:       if( (pWalker->eCode>=4 || ExprHasProperty(pExpr,EP_ConstFunc))",
          "1945:        && !ExprHasProperty(pExpr, EP_WinFunc)",
          "1946:       ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a046643820b0401625b7c0ba5b2d1aa482f3fccd",
      "candidate_info": {
        "commit_hash": "a046643820b0401625b7c0ba5b2d1aa482f3fccd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a046643820b0401625b7c0ba5b2d1aa482f3fccd",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzdata8.db"
        ],
        "message": "More robust handling of corrupt database file in the rebalance operation of the btree logic.\n\nFossilOrigin-Name: 97704cb7d29fa7cc4ea9a6761a7844c1946d637ea2b22d287fc787ae0f63c407",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7c862c4655841e1263cf548d01f5b4331685ab7d396494891cad0a5f50c63e16",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6825:   assert( i<iEnd );",
          "6826:   j = get2byte(&aData[hdr+5]);",
          "6827:   memcpy(&pTmp[j], &aData[j], usableSize - j);",
          "6829:   for(k=0; pCArray->ixNx[k]<=i && ALWAYS(k<NB*2); k++){}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6827:   if( NEVER(j>usableSize) ){ j = 0; }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7037: #endif",
          "7040:   if( iOld<iNew ){",
          "7041:     int nShift = pageFreeArray(pPg, iOld, iNew-iOld, pCArray);",
          "7042:     memmove(pPg->aCellIdx, &pPg->aCellIdx[nShift*2], nCell*2);",
          "7043:     nCell -= nShift;",
          "7044:   }",
          "7045:   if( iNewEnd < iOldEnd ){",
          "7047:   }",
          "7049:   pData = &aData[get2byteNotZero(&aData[hdr+5])];",
          "",
          "[Removed Lines]",
          "7046:     nCell -= pageFreeArray(pPg, iNewEnd, iOldEnd - iNewEnd, pCArray);",
          "",
          "[Added Lines]",
          "7041:   assert( nCell>=0 );",
          "7044:     if( nShift>nCell ) return SQLITE_CORRUPT_BKPT;",
          "7049:     int nTail = pageFreeArray(pPg, iNewEnd, iOldEnd - iNewEnd, pCArray);",
          "7050:     assert( nCell>=nTail );",
          "7051:     nCell -= nTail;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7053:   if( iNew<iOld ){",
          "7054:     int nAdd = MIN(nNew,iOld-iNew);",
          "7055:     assert( (iOld-iNew)<nNew || nCell==0 || CORRUPT_DB );",
          "7056:     pCellptr = pPg->aCellIdx;",
          "7057:     memmove(&pCellptr[nAdd*2], pCellptr, nCell*2);",
          "7058:     if( pageInsertArray(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7061:     assert( nAdd>=0 );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7067:     int iCell = (iOld + pPg->aiOvfl[i]) - iNew;",
          "7068:     if( iCell>=0 && iCell<nNew ){",
          "7069:       pCellptr = &pPg->aCellIdx[iCell * 2];",
          "7070:       memmove(&pCellptr[2], pCellptr, (nCell - iCell) * 2);",
          "7071:       nCell++;",
          "7072:       if( pageInsertArray(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7076:       assert( nCell>=iCell );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7077:   }",
          "7080:   pCellptr = &pPg->aCellIdx[nCell*2];",
          "7081:   if( pageInsertArray(",
          "7082:         pPg, pBegin, &pData, pCellptr,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7087:   assert( nCell>=0 );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "86ec1eddde7fc593a6f9c86f31bc6c7c8217bae2",
      "candidate_info": {
        "commit_hash": "86ec1eddde7fc593a6f9c86f31bc6c7c8217bae2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/86ec1eddde7fc593a6f9c86f31bc6c7c8217bae2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "Do not place arbitrary restrictions on the length of the failure message for a uniqueness constraint.\n\nFossilOrigin-Name: 037da798fa5510ba7c776831ebcd683a85dca28e25bc657ff17bb2b08c3d406e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4c77fbbe5d54248821161d708d0631fab65659bef31f95a61af681d4639f5918",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4398:   StrAccum errMsg;",
          "4399:   Table *pTab = pIdx->pTable;",
          "4402:   if( pIdx->aColExpr ){",
          "4403:     sqlite3_str_appendf(&errMsg, \"index '%q'\", pIdx->zName);",
          "4404:   }else{",
          "",
          "[Removed Lines]",
          "4401:   sqlite3StrAccumInit(&errMsg, pParse->db, 0, 0, 200);",
          "",
          "[Added Lines]",
          "4401:   sqlite3StrAccumInit(&errMsg, pParse->db, 0, 0,",
          "4402:                       pParse->db->aLimit[SQLITE_LIMIT_LENGTH]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6d2566dfc2d38beb03665867df144aae5cc9eba1",
      "candidate_info": {
        "commit_hash": "6d2566dfc2d38beb03665867df144aae5cc9eba1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6d2566dfc2d38beb03665867df144aae5cc9eba1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/tkt-3a77c9714e.test"
        ],
        "message": "Always clear the temporary register cache after coding a subroutine.\n\nFossilOrigin-Name: b6f2a7f9cdb547c925f08306df82519e41a7a0dd2cabd9861a48917bb6eef845",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/tkt-3a77c9714e.test||test/tkt-3a77c9714e.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 40e29a47d1266c16a4992e43579a51addcc632503099c4cd128f77dd4e67da3c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2868:     sqlite3VdbeAddOp1(v, OP_Return, pExpr->y.sub.regReturn);",
          "2869:     sqlite3VdbeChangeP1(v, pExpr->y.sub.iAddr-1, sqlite3VdbeCurrentAddr(v)-1);",
          "2870:   }",
          "2871: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2870:     sqlite3ClearTempRegCache(pParse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2978:     sqlite3VdbeAddOp1(v, OP_Return, pExpr->y.sub.regReturn);",
          "2979:     sqlite3VdbeChangeP1(v, pExpr->y.sub.iAddr-1, sqlite3VdbeCurrentAddr(v)-1);",
          "2980:   }",
          "2982:   return rReg;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2981:     sqlite3ClearTempRegCache(pParse);",
          "",
          "---------------"
        ],
        "test/tkt-3a77c9714e.test||test/tkt-3a77c9714e.test": [
          "File: test/tkt-3a77c9714e.test -> test/tkt-3a77c9714e.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "",
          "[Removed Lines]",
          "1: # 2011 December 06",
          "",
          "[Added Lines]",
          "1: # 2011-12-06",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:     )",
          "69: } {FACTORING FACTOR SWIMMING SWIMM}",
          "72: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71: # Similar problem discovered by dbsqlfuzz on 2019-09-18",
          "72: #",
          "73: do_execsql_test 3.0 {",
          "74:   DROP TABLE IF EXISTS t1;",
          "75:   CREATE TABLE t1(i INT PRIMARY KEY, a, b);",
          "76:   INSERT INTO t1 VALUES(NULL,'one','i');",
          "77:   CREATE INDEX i1a ON t1(a);",
          "78:   CREATE INDEX i1b ON t1(b);",
          "79:   SELECT (SELECT 1",
          "80:             FROM (SELECT 1 FROM t1 WHERE a=1 OR b='i')",
          "81:            WHERE a='o'",
          "82:               OR b IN (SELECT a=('b' IN (SELECT 'a'))))",
          "83:     FROM t1;",
          "84: } {{}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a42325e7313c3391fc045d084653000871c9f347",
      "candidate_info": {
        "commit_hash": "a42325e7313c3391fc045d084653000871c9f347",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a42325e7313c3391fc045d084653000871c9f347",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "The OP_Eq and OP_Ne operators have a special P5 value SQLITE_NOTNULL that asserts that the values are not null.  Except that is not always true for a corrupt database.  Adjust the assert() and add a testcase() to make this point clear.\n\nFossilOrigin-Name: a3fdb2c78d23b94d68dc08126b22d03152ac6068496a42402cdfb336cd4a7e33",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 48438bb35b48955a1df83ef90f0ef6c9cfed0b16d2e938f36d74ad9d53b4b5b4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1926:       assert( pOp->opcode==OP_Eq || pOp->opcode==OP_Ne );",
          "1927:       assert( (flags1 & MEM_Cleared)==0 );",
          "1929:       if( (flags1&flags3&MEM_Null)!=0",
          "1930:        && (flags3&MEM_Cleared)==0",
          "1931:       ){",
          "",
          "[Removed Lines]",
          "1928:       assert( (pOp->p5 & SQLITE_JUMPIFNULL)==0 );",
          "",
          "[Added Lines]",
          "1928:       assert( (pOp->p5 & SQLITE_JUMPIFNULL)==0 || CORRUPT_DB );",
          "1929:       testcase( (pOp->p5 & SQLITE_JUMPIFNULL)!=0 );",
          "",
          "---------------"
        ]
      }
    }
  ]
}