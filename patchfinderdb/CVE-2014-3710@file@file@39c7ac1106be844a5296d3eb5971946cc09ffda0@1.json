{
  "cve_id": "CVE-2014-3710",
  "cve_desc": "The donote function in readelf.c in file through 5.20, as used in the Fileinfo component in PHP 5.4.34, does not ensure that sufficient note headers are present, which allows remote attackers to cause a denial of service (out-of-bounds read and application crash) via a crafted ELF file.",
  "repo": "file/file",
  "patch_hash": "39c7ac1106be844a5296d3eb5971946cc09ffda0",
  "patch_info": {
    "commit_hash": "39c7ac1106be844a5296d3eb5971946cc09ffda0",
    "repo": "file/file",
    "commit_url": "https://github.com/file/file/commit/39c7ac1106be844a5296d3eb5971946cc09ffda0",
    "files": [
      "ChangeLog",
      "src/readelf.c"
    ],
    "message": "Fix note bounds reading, Francisco Alonso / Red Hat",
    "before_after_code_files": [
      "src/readelf.c||src/readelf.c"
    ]
  },
  "patch_diff": {
    "src/readelf.c||src/readelf.c": [
      "File: src/readelf.c -> src/readelf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"file.h\"",
      "29: #ifndef lint",
      "31: #endif",
      "33: #ifdef BUILTIN_ELF",
      "",
      "[Removed Lines]",
      "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.102 2014/03/11 21:00:13 christos Exp $\")",
      "",
      "[Added Lines]",
      "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.103 2014/05/02 02:25:10 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "477:  uint32_t namesz, descsz;",
      "478:  unsigned char *nbuf = CAST(unsigned char *, vbuf);",
      "480:  (void)memcpy(xnh_addr, &nbuf[offset], xnh_sizeof);",
      "481:  offset += xnh_sizeof;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "480:  if (xnh_sizeof + offset > size) {",
      "484:   return xnh_sizeof + offset;",
      "485:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4f2c3a679da0d6eef33ecd6f77d472930c407fc8",
      "candidate_info": {
        "commit_hash": "4f2c3a679da0d6eef33ecd6f77d472930c407fc8",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/4f2c3a679da0d6eef33ecd6f77d472930c407fc8",
        "files": [
          "src/readelf.c"
        ],
        "message": "handle more empty interpreters.",
        "before_after_code_files": [
          "src/readelf.c||src/readelf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.112 2014/12/11 12:34:24 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.113 2014/12/11 14:10:53 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1225:   switch (xph_type) {",
          "1226:   case PT_INTERP:",
          "1228:     nbuf[bufsize - 1] = '\\0';",
          "1229:     interp = (const char *)nbuf;",
          "1230:    } else",
          "",
          "[Removed Lines]",
          "1227:    if (bufsize) {",
          "",
          "[Added Lines]",
          "1227:    if (bufsize && nbuf[0]) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "477c444748faf4875fa522220a1792c635927c9e",
      "candidate_info": {
        "commit_hash": "477c444748faf4875fa522220a1792c635927c9e",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/477c444748faf4875fa522220a1792c635927c9e",
        "files": [
          "src/readelf.c"
        ],
        "message": "Complain if alignments are < 4 and repair.",
        "before_after_code_files": [
          "src/readelf.c||src/readelf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.105 2014/11/22 16:04:29 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.106 2014/11/22 23:57:44 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1201:   switch (xph_type) {",
          "1202:   case PT_NOTE:",
          "1204:     if (file_printf(ms,",
          "1205:         \", invalid note alignment 0x%lx\",",
          "1206:         (unsigned long)align) == -1)",
          "",
          "[Removed Lines]",
          "1203:    if ((align = xph_align) & 0x80000000UL) {",
          "",
          "[Added Lines]",
          "1203:    if (((align = xph_align) & 0x80000000UL) != 0 ||",
          "1204:        align < 4) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a02398dde8087d55dccf04e13ec0a0bbf7c24ae2",
      "candidate_info": {
        "commit_hash": "a02398dde8087d55dccf04e13ec0a0bbf7c24ae2",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/a02398dde8087d55dccf04e13ec0a0bbf7c24ae2",
        "files": [
          "ChangeLog",
          "src/file.h",
          "src/funcs.c",
          "src/readelf.c",
          "src/softmagic.c"
        ],
        "message": "* change printable -> file_printable and use it in more places for safety * in ELF, instead of \"(uses dynamic libraries)\" when PT_INTERP   is present print the interpreter name.",
        "before_after_code_files": [
          "src/file.h||src/file.h",
          "src/funcs.c||src/funcs.c",
          "src/readelf.c||src/readelf.c",
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/file.h||src/file.h": [
          "File: src/file.h -> src/file.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "476:     size_t *);",
          "477: protected size_t file_pstring_length_size(const struct magic *);",
          "478: protected size_t file_pstring_get_length(const struct magic *, const char *);",
          "479: #ifdef __EMX__",
          "480: protected int file_os2_apptype(struct magic_set *, const char *, const void *,",
          "481:     size_t);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "479: protected char * file_printable(char *, size_t, const char *);",
          "",
          "---------------"
        ],
        "src/funcs.c||src/funcs.c": [
          "File: src/funcs.c -> src/funcs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "33: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.76 2014/11/28 02:35:05 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: funcs.c,v 1.77 2014/11/28 02:46:39 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "531:  free(pb);",
          "532:  return rbuf;",
          "533: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "538: protected char *",
          "539: file_printable(char *buf, size_t bufsiz, const char *str)",
          "540: {",
          "541:  char *ptr, *eptr;",
          "542:  const unsigned char *s = (const unsigned char *)str;",
          "544:  for (ptr = buf, eptr = ptr + bufsiz - 1; ptr < eptr && *s; s++) {",
          "545:   if (isprint(*s)) {",
          "547:    continue;",
          "548:   }",
          "549:   if (ptr >= eptr + 4)",
          "550:    break;",
          "555:  }",
          "557:  return buf;",
          "558: }",
          "",
          "---------------"
        ],
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.110 2014/12/09 02:47:07 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.111 2014/12/09 02:47:45 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "489: #endif",
          "490:  uint32_t namesz, descsz;",
          "491:  unsigned char *nbuf = CAST(unsigned char *, vbuf);",
          "493:  if (xnh_sizeof + offset > size) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "492:  char sbuf[512];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "740:    if (file_printf(ms, \", from '%.31s'\",",
          "742:     return size;",
          "",
          "[Removed Lines]",
          "741:        &nbuf[doff + 0x7c]) == -1)",
          "",
          "[Added Lines]",
          "742:        file_printable(sbuf, sizeof(sbuf),",
          "743:        (const char *)&nbuf[doff + 0x7c])) == -1)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1163:  Elf32_Phdr ph32;",
          "1164:  Elf64_Phdr ph64;",
          "1165:  const char *linking_style = \"statically\";",
          "1167:  unsigned char nbuf[BUFSIZ];",
          "1168:  ssize_t bufsize;",
          "1169:  size_t offset, align, len;",
          "",
          "[Removed Lines]",
          "1166:  const char *shared_libraries = \"\";",
          "",
          "[Added Lines]",
          "1168:  const char *interp = \"\";",
          "1170:  char ibuf[BUFSIZ];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1181:   }",
          "1183:   off += size;",
          "1186:   switch (xph_type) {",
          "1187:   case PT_DYNAMIC:",
          "1188:    linking_style = \"dynamically\";",
          "1189:    break;",
          "1190:   case PT_INTERP:",
          "1192:    break;",
          "1193:   default:",
          "1194:    if (fsize != SIZE_UNKNOWN && xph_offset > fsize) {",
          "",
          "[Removed Lines]",
          "1191:    shared_libraries = \" (uses shared libs)\";",
          "",
          "[Added Lines]",
          "1187:   bufsize = 0;",
          "1188:   align = 4;",
          "1195:   case PT_NOTE:",
          "1197:     continue;",
          "1198:    if (((align = xph_align) & 0x80000000UL) != 0 ||",
          "1199:        align < 4) {",
          "1200:     if (file_printf(ms,",
          "1201:         \", invalid note alignment 0x%lx\",",
          "1202:         (unsigned long)align) == -1)",
          "1203:      return -1;",
          "1204:     align = 4;",
          "1205:    }",
          "1208:    len = xph_filesz < sizeof(nbuf) ? xph_filesz",
          "1209:        : sizeof(nbuf);",
          "1210:    bufsize = pread(fd, nbuf, len, xph_offset);",
          "1211:    if (bufsize == -1) {",
          "1212:     file_badread(ms);",
          "1213:     return -1;",
          "1214:    }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1202:   switch (xph_type) {",
          "1211:    }",
          "1225:    offset = 0;",
          "1226:    for (;;) {",
          "1227:     if (offset >= (size_t)bufsize)",
          "",
          "[Removed Lines]",
          "1203:   case PT_NOTE:",
          "1204:    if (((align = xph_align) & 0x80000000UL) != 0 ||",
          "1205:        align < 4) {",
          "1206:     if (file_printf(ms,",
          "1207:         \", invalid note alignment 0x%lx\",",
          "1208:         (unsigned long)align) == -1)",
          "1209:      return -1;",
          "1210:     align = 4;",
          "1212:    if (sh_num)",
          "1213:     break;",
          "1218:    len = xph_filesz < sizeof(nbuf) ? xph_filesz",
          "1219:        : sizeof(nbuf);",
          "1220:    bufsize = pread(fd, nbuf, len, xph_offset);",
          "1221:    if (bufsize == -1) {",
          "1222:     file_badread(ms);",
          "1223:     return -1;",
          "1224:    }",
          "",
          "[Added Lines]",
          "1226:   case PT_INTERP:",
          "1227:    if (bufsize) {",
          "1228:     nbuf[bufsize - 1] = '\\0';",
          "1229:     interp = (const char *)nbuf;",
          "1231:    break;",
          "1232:   case PT_NOTE:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1237:    break;",
          "1238:   }",
          "1239:  }",
          "1241:      == -1)",
          "1243:  return 0;",
          "1244: }",
          "",
          "[Removed Lines]",
          "1240:  if (file_printf(ms, \", %s linked%s\", linking_style, shared_libraries)",
          "1242:      return -1;",
          "",
          "[Added Lines]",
          "1252:  if (file_printf(ms, \", %s linked\", linking_style)",
          "1254:   return -1;",
          "1255:  if (interp[0])",
          "1256:   if (file_printf(ms, \", interpreter %s\",",
          "1257:       file_printable(ibuf, sizeof(ibuf), interp)) == -1)",
          "1258:    return -1;",
          "",
          "---------------"
        ],
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.202 2014/11/28 02:46:39 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.203 2014/12/04 15:22:05 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "404: }",
          "429: private int32_t",
          "430: mprint(struct magic_set *ms, struct magic *m)",
          "431: {",
          "",
          "[Removed Lines]",
          "407: static char *",
          "408: printable(char *buf, size_t bufsiz, const char *str)",
          "409: {",
          "410:  char *ptr, *eptr;",
          "411:  const unsigned char *s = (const unsigned char *)str;",
          "413:  for (ptr = buf, eptr = ptr + bufsiz - 1; ptr < eptr && *s; s++) {",
          "414:   if (isprint(*s)) {",
          "416:    continue;",
          "417:   }",
          "418:   if (ptr >= eptr + 4)",
          "419:    break;",
          "424:  }",
          "426:  return buf;",
          "427: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "433:  float vf;",
          "434:  double vd;",
          "435:  int64_t t = 0;",
          "437:  union VALUETYPE *p = &ms->ms_value;",
          "439:    switch (m->type) {",
          "",
          "[Removed Lines]",
          "436:   char buf[128], tbuf[26];",
          "",
          "[Added Lines]",
          "414:   char buf[128], tbuf[26], sbuf[512];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "527:    case FILE_BESTRING16:",
          "528:    case FILE_LESTRING16:",
          "529:   if (m->reln == '=' || m->reln == '!') {",
          "531:     return -1;",
          "532:    t = ms->offset + m->vallen;",
          "533:   }",
          "534:   else {",
          "536:    char *str = p->s;",
          "",
          "[Removed Lines]",
          "530:    if (file_printf(ms, F(ms, m, \"%s\"), m->value.s) == -1)",
          "535:    char sbuf[512];",
          "",
          "[Added Lines]",
          "508:    if (file_printf(ms, F(ms, m, \"%s\"),",
          "509:        file_printable(sbuf, sizeof(sbuf), m->value.s))",
          "510:        == -1)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "555:    }",
          "557:    if (file_printf(ms, F(ms, m, \"%s\"),",
          "559:     return -1;",
          "561:    if (m->type == FILE_PSTRING)",
          "",
          "[Removed Lines]",
          "558:        printable(sbuf, sizeof(sbuf), str)) == -1)",
          "",
          "[Added Lines]",
          "537:        file_printable(sbuf, sizeof(sbuf), str)) == -1)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "659:    file_oomem(ms, ms->search.rm_len);",
          "660:    return -1;",
          "661:   }",
          "663:   free(cp);",
          "665:   if (rval == -1)",
          "",
          "[Removed Lines]",
          "662:   rval = file_printf(ms, F(ms, m, \"%s\"), cp);",
          "",
          "[Added Lines]",
          "641:   rval = file_printf(ms, F(ms, m, \"%s\"),",
          "642:       file_printable(sbuf, sizeof(sbuf), cp));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "673:  }",
          "675:  case FILE_SEARCH:",
          "677:    return -1;",
          "678:   if ((m->str_flags & REGEX_OFFSET_START))",
          "679:    t = ms->search.offset;",
          "",
          "[Removed Lines]",
          "676:     if (file_printf(ms, F(ms, m, \"%s\"), m->value.s) == -1)",
          "",
          "[Added Lines]",
          "656:     if (file_printf(ms, F(ms, m, \"%s\"),",
          "657:       file_printable(sbuf, sizeof(sbuf), m->value.s)) == -1)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7ddb2abc9055a99376e2a00335a568f3a363a86b",
      "candidate_info": {
        "commit_hash": "7ddb2abc9055a99376e2a00335a568f3a363a86b",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/7ddb2abc9055a99376e2a00335a568f3a363a86b",
        "files": [
          "src/readelf.c"
        ],
        "message": "print empty if we could not read the interpreter.",
        "before_after_code_files": [
          "src/readelf.c||src/readelf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.111 2014/12/09 02:47:45 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.112 2014/12/11 12:34:24 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1227:    if (bufsize) {",
          "1228:     nbuf[bufsize - 1] = '\\0';",
          "1229:     interp = (const char *)nbuf;",
          "1231:    break;",
          "1232:   case PT_NOTE:",
          "",
          "[Removed Lines]",
          "1230:    }",
          "",
          "[Added Lines]",
          "1230:    } else",
          "1231:     interp = \"*empty*\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c8451af8ab0c2e2a93ce93b9c68257d31576cc85",
      "candidate_info": {
        "commit_hash": "c8451af8ab0c2e2a93ce93b9c68257d31576cc85",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/c8451af8ab0c2e2a93ce93b9c68257d31576cc85",
        "files": [
          "src/readelf.c",
          "src/readelf.h"
        ],
        "message": "- split netbsd and freebsd version printing into separate functions - don't let the NetBSD pax note end the search for notes - add 2 more NetBSD notes",
        "before_after_code_files": [
          "src/readelf.c||src/readelf.c",
          "src/readelf.h||src/readelf.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.97 2013/03/06 03:35:30 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.98 2013/09/20 00:39:43 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "344: }",
          "345: #endif",
          "347: private size_t",
          "348: donote(struct magic_set *ms, void *vbuf, size_t offset, size_t size,",
          "349:     int clazz, int swap, size_t align, int *flags)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "347: static void",
          "348: do_note_netbsd_version(struct magic_set *ms, int swap, void *v)",
          "349: {",
          "350:  uint32_t desc;",
          "351:  (void)memcpy(&desc, v, sizeof(desc));",
          "352:  desc = elf_getu32(swap, desc);",
          "354:  if (file_printf(ms, \", for NetBSD\") == -1)",
          "355:   return;",
          "368:  if (desc > 100000000U) {",
          "369:   uint32_t ver_patch = (desc / 100) % 100;",
          "370:   uint32_t ver_rel = (desc / 10000) % 100;",
          "371:   uint32_t ver_min = (desc / 1000000) % 100;",
          "372:   uint32_t ver_maj = desc / 100000000;",
          "374:   if (file_printf(ms, \" %u.%u\", ver_maj, ver_min) == -1)",
          "375:    return;",
          "376:   if (ver_rel == 0 && ver_patch != 0) {",
          "377:    if (file_printf(ms, \".%u\", ver_patch) == -1)",
          "378:     return;",
          "379:   } else if (ver_rel != 0) {",
          "380:    while (ver_rel > 26) {",
          "381:     if (file_printf(ms, \"Z\") == -1)",
          "382:      return;",
          "383:     ver_rel -= 26;",
          "384:    }",
          "385:    if (file_printf(ms, \"%c\", 'A' + ver_rel - 1)",
          "386:        == -1)",
          "387:     return;",
          "388:   }",
          "389:  }",
          "390: }",
          "392: static void",
          "393: do_note_freebsd_version(struct magic_set *ms, int swap, void *v)",
          "394: {",
          "395:  uint32_t desc;",
          "397:  (void)memcpy(&desc, v, sizeof(desc));",
          "398:  desc = elf_getu32(swap, desc);",
          "399:  if (file_printf(ms, \", for FreeBSD\") == -1)",
          "400:   return;",
          "428:  if (desc == 460002) {",
          "429:   if (file_printf(ms, \" 4.6.2\") == -1)",
          "430:    return;",
          "431:  } else if (desc < 460100) {",
          "432:   if (file_printf(ms, \" %d.%d\", desc / 100000,",
          "433:       desc / 10000 % 10) == -1)",
          "434:    return;",
          "435:   if (desc / 1000 % 10 > 0)",
          "436:    if (file_printf(ms, \".%d\", desc / 1000 % 10) == -1)",
          "437:     return;",
          "438:   if ((desc % 1000 > 0) || (desc % 100000 == 0))",
          "439:    if (file_printf(ms, \" (%d)\", desc) == -1)",
          "440:     return;",
          "441:  } else if (desc < 500000) {",
          "442:   if (file_printf(ms, \" %d.%d\", desc / 100000,",
          "443:       desc / 10000 % 10 + desc / 1000 % 10) == -1)",
          "444:    return;",
          "445:   if (desc / 100 % 10 > 0) {",
          "446:    if (file_printf(ms, \" (%d)\", desc) == -1)",
          "447:     return;",
          "448:   } else if (desc / 10 % 10 > 0) {",
          "449:    if (file_printf(ms, \".%d\", desc / 10 % 10) == -1)",
          "450:     return;",
          "451:   }",
          "452:  } else {",
          "453:   if (file_printf(ms, \" %d.%d\", desc / 100000,",
          "454:       desc / 1000 % 100) == -1)",
          "455:    return;",
          "456:   if ((desc / 100 % 10 > 0) ||",
          "457:       (desc % 100000 / 100 == 0)) {",
          "458:    if (file_printf(ms, \" (%d)\", desc) == -1)",
          "459:     return;",
          "460:   } else if (desc / 10 % 10 > 0) {",
          "461:    if (file_printf(ms, \".%d\", desc / 10 % 10) == -1)",
          "462:     return;",
          "463:   }",
          "464:  }",
          "465: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "488:        pax[i]) == -1)",
          "489:     return size;",
          "490:   }",
          "492:  }",
          "521:     return size;",
          "534:    }",
          "535:   }",
          "537:   return size;",
          "538:  }",
          "546:    return size;",
          "613:   }",
          "616:  }",
          "618:  if (namesz == 8 && strcmp((char *)&nbuf[noff], \"OpenBSD\") == 0 &&",
          "",
          "[Removed Lines]",
          "494:  if (namesz == 7 && strcmp((char *)&nbuf[noff], \"NetBSD\") == 0 &&",
          "495:      xnh_type == NT_NETBSD_VERSION && descsz == 4) {",
          "496:   uint32_t desc;",
          "497:   (void)memcpy(&desc, &nbuf[doff], sizeof(desc));",
          "498:   desc = elf_getu32(swap, desc);",
          "500:   if (file_printf(ms, \", for NetBSD\") == -1)",
          "501:    return size;",
          "514:   if (desc > 100000000U) {",
          "515:    uint32_t ver_patch = (desc / 100) % 100;",
          "516:    uint32_t ver_rel = (desc / 10000) % 100;",
          "517:    uint32_t ver_min = (desc / 1000000) % 100;",
          "518:    uint32_t ver_maj = desc / 100000000;",
          "520:    if (file_printf(ms, \" %u.%u\", ver_maj, ver_min) == -1)",
          "522:    if (ver_rel == 0 && ver_patch != 0) {",
          "523:     if (file_printf(ms, \".%u\", ver_patch) == -1)",
          "524:      return size;",
          "525:    } else if (ver_rel != 0) {",
          "526:     while (ver_rel > 26) {",
          "527:      if (file_printf(ms, \"Z\") == -1)",
          "528:       return size;",
          "529:      ver_rel -= 26;",
          "530:     }",
          "531:     if (file_printf(ms, \"%c\", 'A' + ver_rel - 1)",
          "532:         == -1)",
          "533:      return size;",
          "540:  if (namesz == 8 && strcmp((char *)&nbuf[noff], \"FreeBSD\") == 0 &&",
          "541:      xnh_type == NT_FREEBSD_VERSION && descsz == 4) {",
          "542:   uint32_t desc;",
          "543:   (void)memcpy(&desc, &nbuf[doff], sizeof(desc));",
          "544:   desc = elf_getu32(swap, desc);",
          "545:   if (file_printf(ms, \", for FreeBSD\") == -1)",
          "574:   if (desc == 460002) {",
          "575:    if (file_printf(ms, \" 4.6.2\") == -1)",
          "576:     return size;",
          "577:   } else if (desc < 460100) {",
          "578:    if (file_printf(ms, \" %d.%d\", desc / 100000,",
          "579:        desc / 10000 % 10) == -1)",
          "580:     return size;",
          "581:    if (desc / 1000 % 10 > 0)",
          "582:     if (file_printf(ms, \".%d\", desc / 1000 % 10)",
          "583:         == -1)",
          "584:      return size;",
          "585:    if ((desc % 1000 > 0) || (desc % 100000 == 0))",
          "586:     if (file_printf(ms, \" (%d)\", desc) == -1)",
          "587:      return size;",
          "588:   } else if (desc < 500000) {",
          "589:    if (file_printf(ms, \" %d.%d\", desc / 100000,",
          "590:        desc / 10000 % 10 + desc / 1000 % 10) == -1)",
          "591:     return size;",
          "592:    if (desc / 100 % 10 > 0) {",
          "593:     if (file_printf(ms, \" (%d)\", desc) == -1)",
          "594:      return size;",
          "595:    } else if (desc / 10 % 10 > 0) {",
          "596:     if (file_printf(ms, \".%d\", desc / 10 % 10)",
          "597:         == -1)",
          "598:      return size;",
          "599:    }",
          "600:   } else {",
          "601:    if (file_printf(ms, \" %d.%d\", desc / 100000,",
          "602:        desc / 1000 % 100) == -1)",
          "603:     return size;",
          "604:    if ((desc / 100 % 10 > 0) ||",
          "605:        (desc % 100000 / 100 == 0)) {",
          "606:     if (file_printf(ms, \" (%d)\", desc) == -1)",
          "607:      return size;",
          "608:    } else if (desc / 10 % 10 > 0) {",
          "609:     if (file_printf(ms, \".%d\", desc / 10 % 10)",
          "610:         == -1)",
          "611:      return size;",
          "612:    }",
          "615:   return size;",
          "",
          "[Added Lines]",
          "613:  if (namesz == 7 && strcmp((char *)&nbuf[noff], \"NetBSD\") == 0) {",
          "614:   switch (xnh_type) {",
          "615:   case NT_NETBSD_VERSION:",
          "616:    if (descsz == 4) {",
          "617:     do_note_netbsd_version(ms, swap, &nbuf[doff]);",
          "621:    break;",
          "622:   case NT_NETBSD_MARCH:",
          "623:    if (file_printf(ms, \", compiled for: %.*s\", (int)descsz,",
          "624:        (const char *)&nbuf[doff]) == -1)",
          "625:     return size;",
          "626:    break;",
          "627:   case NT_NETBSD_CMODEL:",
          "628:    if (file_printf(ms, \", compiler model: %.*s\",",
          "629:        (int)descsz, (const char *)&nbuf[doff]) == -1)",
          "630:     return size;",
          "631:    break;",
          "632:   default:",
          "633:    if (file_printf(ms, \", note=%u\", xnh_type) == -1)",
          "634:     return size;",
          "635:    break;",
          "640:  if (namesz == 8 && strcmp((char *)&nbuf[noff], \"FreeBSD\") == 0) {",
          "641:       if (xnh_type == NT_FREEBSD_VERSION && descsz == 4) {",
          "642:    do_note_freebsd_version(ms, swap, &nbuf[doff]);",
          "",
          "---------------"
        ],
        "src/readelf.h||src/readelf.h": [
          "File: src/readelf.h -> src/readelf.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "276: typedef struct {",
          "277:  Elf32_Word c_tag;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "283: #define NT_NETBSD_MARCH  5",
          "293: #define NT_NETBSD_CMODEL 6",
          "295: #if !defined(ELFSIZE) && defined(ARCH_ELFSIZE)",
          "296: #define ELFSIZE ARCH_ELFSIZE",
          "297: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}