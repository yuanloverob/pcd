{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "725a9c7f6c0d406cac38d41d286c023dd5896417",
      "candidate_info": {
        "commit_hash": "725a9c7f6c0d406cac38d41d286c023dd5896417",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/725a9c7f6c0d406cac38d41d286c023dd5896417",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzcheck.c"
        ],
        "message": "In fuzzcheck, activate vdbe_debug for dbsqlfuzz cases when using the -vvvvv verbosity level or above.\n\nFossilOrigin-Name: 2e6f7c2aced49824a38b3494b796a8ec73aa7a90b51159f670596df15ed1c5ab",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1ef24e89c9630fd383ba32f5aefcf9c27907f27f5072f3537a1cfd75a093a8d7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "793:     sqlite3_file_control(cx.db, \"main\", SQLITE_FCNTL_SIZE_LIMIT, &x);",
          "794:   }",
          "798:   sqlite3_set_authorizer(cx.db, block_troublesome_sql, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "797:   if( eVerbosity>=5 ){",
          "798:     sqlite3_exec(cx.db, \"PRAGMA vdbe_debug=ON;\", 0, 0, 0);",
          "799:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1242:   return (int)(isNeg? -v : v);",
          "1243: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1254: static int numberOfVChar(const char *z){",
          "1255:   int N = 0;",
          "1256:   while( z[0] && z[0]=='v' ){",
          "1257:     z++;",
          "1258:     N++;",
          "1259:   }",
          "1260:   return z[0]==0 ? N : 0;",
          "1261: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1421:         fatalError(\"timeout is not available on non-unix systems\");",
          "1422: #endif",
          "1423:       }else",
          "1425:         quietFlag = 0;",
          "1426:         verboseFlag++;",
          "1427:         eVerbosity++;",
          "1428:         if( verboseFlag>1 ) runFlags |= SQL_TRACE;",
          "1429:       }else",
          "1430:       if( strcmp(z,\"version\")==0 ){",
          "1431:         int ii;",
          "1432:         const char *z;",
          "",
          "[Removed Lines]",
          "1424:       if( strcmp(z,\"verbose\")==0 || strcmp(z,\"v\")==0 ){",
          "",
          "[Added Lines]",
          "1443:       if( strcmp(z,\"verbose\")==0 ){",
          "1449:       if( (nV = numberOfVChar(z))>=1 ){",
          "1450:         quietFlag = 0;",
          "1451:         verboseFlag += nV;",
          "1452:         eVerbosity += nV;",
          "1453:         if( verboseFlag>1 ) runFlags |= SQL_TRACE;",
          "1454:       }else",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1cd382e3500588126a91692377254bb807276d83",
      "candidate_info": {
        "commit_hash": "1cd382e3500588126a91692377254bb807276d83",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1cd382e3500588126a91692377254bb807276d83",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/indexexpr2.test"
        ],
        "message": "Avoid assuming that for \"~ (? OR TRUE)\" to be true, \"?\" must not be NULL, just as we do for \"NOT (? OR TRUE)\". Fix for ticket [c0390363].\n\nFossilOrigin-Name: 84ae41fd2f50cb7c0c3f6522d0f94817e1bbf96eae5316279e3e32cee4e46e91",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/indexexpr2.test||test/indexexpr2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c465d0eb478e42045e08efe8b6fa64d4bd4d747cdf743beae4608562b014169e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5027:     }",
          "5028:     case TK_SPAN:",
          "5029:     case TK_COLLATE:",
          "5031:     case TK_UPLUS:",
          "5032:     case TK_UMINUS: {",
          "5033:       return exprImpliesNotNull(pParse, p->pLeft, pNN, iTab, seenNot);",
          "",
          "[Removed Lines]",
          "5030:     case TK_BITNOT:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5037:       if( p->op2!=TK_IS ) return 0;",
          "5038:       return exprImpliesNotNull(pParse, p->pLeft, pNN, iTab, seenNot);",
          "5039:     }",
          "5040:     case TK_NOT: {",
          "5041:       return exprImpliesNotNull(pParse, p->pLeft, pNN, iTab, 1);",
          "5042:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5039:     case TK_BITNOT:",
          "",
          "---------------"
        ],
        "test/indexexpr2.test||test/indexexpr2.test": [
          "File: test/indexexpr2.test -> test/indexexpr2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "295:   REINDEX;",
          "296: } {}",
          "300: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "298: #-------------------------------------------------------------------------",
          "299: reset_db",
          "300: do_execsql_test 8.0 {",
          "301:   CREATE TABLE t0(c0);",
          "302:   CREATE INDEX i0 ON t0(c0) WHERE c0 NOT NULL;",
          "303:   INSERT INTO t0(c0) VALUES (NULL);",
          "304: }",
          "306: breakpoint",
          "307: do_execsql_test 8.1 {",
          "308:   SELECT * FROM t0 WHERE ~('' BETWEEN t0.c0 AND TRUE);",
          "309: } {{}}",
          "311: do_execsql_test 8.2 {",
          "312:   SELECT ~('' BETWEEN t0.c0 AND TRUE) FROM t0;",
          "313: } {-1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
      "candidate_info": {
        "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/sqliteInt.h",
          "test/altertab.test"
        ],
        "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/altertab.test||test/altertab.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "856:       }",
          "857:     }",
          "858:   }else{",
          "861:     ){",
          "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
          "863:                       zName);",
          "864:       return SQLITE_ERROR;",
          "865:     }",
          "866:   }",
          "867:   return SQLITE_OK;",
          "868: }",
          "",
          "[Removed Lines]",
          "859:     if( pParse->nested==0",
          "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
          "",
          "[Added Lines]",
          "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
          "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
          "",
          "[Added Lines]",
          "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
          "2148:   return pMod->pModule->xShadowName(zTail+1);",
          "2149: }",
          "",
          "[Removed Lines]",
          "2150: #else",
          "2151: # define isShadowTableName(x,y) 0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2190:   p = pParse->pNewTable;",
          "2191:   if( p==0 ) return;",
          "2194:     p->tabFlags |= TF_Shadow;",
          "2195:   }",
          "",
          "[Removed Lines]",
          "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
          "",
          "[Added Lines]",
          "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
          "4549: #endif",
          "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
          "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
          "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
          "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
          "4553: #else",
          "4554: # define sqlite3ShadowTableName(A,B) 0",
          "4555: #endif",
          "",
          "---------------"
        ],
        "test/altertab.test||test/altertab.test": [
          "File: test/altertab.test -> test/altertab.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "547:   } {1 {table y1_segments may not be modified}}",
          "549:   do_catchsql_test 16.20 {",
          "554:     DROP TABLE y1_segments;",
          "555:   } {1 {table y1_segments may not be dropped}}",
          "557:   do_execsql_test 16.30 {",
          "558:     ALTER TABLE y1 RENAME TO z1;",
          "559:   }",
          "",
          "[Removed Lines]",
          "550:     ALTER TABLE y1_segments RENAME TO abc;",
          "551:   } {1 {table y1_segments may not be altered}}",
          "553:   do_catchsql_test 16.21 {",
          "",
          "[Added Lines]",
          "553:   do_catchsql_test 16.20 {",
          "554:     ALTER TABLE y1_segments RENAME TO abc;",
          "555:   } {1 {table y1_segments may not be altered}}",
          "556:   sqlite3_db_config db DEFENSIVE 0",
          "557:   do_catchsql_test 16.22 {",
          "558:     ALTER TABLE y1_segments RENAME TO abc;",
          "559:   } {0 {}}",
          "560:   sqlite3_db_config db DEFENSIVE 1",
          "561:   do_catchsql_test 16.23 {",
          "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
          "563:   } {1 {object name reserved for internal use: y1_segments}}",
          "564:   do_catchsql_test 16.24 {",
          "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
          "566:   } {1 {object name reserved for internal use: y1_segments}}",
          "567:   sqlite3_db_config db DEFENSIVE 0",
          "568:   do_catchsql_test 16.25 {",
          "569:     ALTER TABLE abc RENAME TO y1_segments;",
          "570:   } {0 {}}",
          "571:   sqlite3_db_config db DEFENSIVE 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6f1644c0f963c8d1d7388d6e52f60a6604aae2c1",
      "candidate_info": {
        "commit_hash": "6f1644c0f963c8d1d7388d6e52f60a6604aae2c1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6f1644c0f963c8d1d7388d6e52f60a6604aae2c1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/treeview.c"
        ],
        "message": "Show the pointer address for Window objects in the TreeView display.\n\nFossilOrigin-Name: 1ae70ad2ffd36c27b154940126c5e3ed00c05c0d8761d9320a65a03b1b4e4dc6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/treeview.c||src/treeview.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d6a07433421ac9a475ff0014587f0beefdf88ce89aef9443f8a20cd26083731f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "317:   }",
          "318:   pView = sqlite3TreeViewPush(pView, more);",
          "319:   if( pWin->zName ){",
          "321:   }else{",
          "323:   }",
          "324:   if( pWin->zBase )    nElement++;",
          "325:   if( pWin->pOrderBy ) nElement++;",
          "",
          "[Removed Lines]",
          "320:     sqlite3TreeViewLine(pView, \"OVER %s\", pWin->zName);",
          "322:     sqlite3TreeViewLine(pView, \"OVER\");",
          "",
          "[Added Lines]",
          "320:     sqlite3TreeViewLine(pView, \"OVER %s (%p)\", pWin->zName, pWin);",
          "322:     sqlite3TreeViewLine(pView, \"OVER (%p)\", pWin);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "01ef55e0f55e3dd49f4d70177e6e03e540a1eae5",
      "candidate_info": {
        "commit_hash": "01ef55e0f55e3dd49f4d70177e6e03e540a1eae5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/01ef55e0f55e3dd49f4d70177e6e03e540a1eae5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "Fix sqlite3ColumnOfIndex() to account for virtual columns.\n\nFossilOrigin-Name: 447271123e3b467d9271a4c0cf27f47af2f865c9298b8c355d9e766411a1f422",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 450c48766c8e62653d074c95f69b0576de3880d183a1d1e5992d88b6fce6cc39",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "883: i16 sqlite3ColumnOfIndex(Index *pIdx, i16 iCol){",
          "884:   int i;",
          "885:   for(i=0; i<pIdx->nColumn; i++){",
          "886:     if( iCol==pIdx->aiColumn[i] ) return i;",
          "887:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "885: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "886:   Table *pTab = pIdx->pTable;",
          "887:   if( pTab->tabFlags & TF_HasVirtual ){",
          "888:     for(i=0; i<=iCol; i++){",
          "889:       if( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL ) iCol++;",
          "890:     }",
          "891:   }",
          "892: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}