{
  "cve_id": "CVE-2019-19880",
  "cve_desc": "exprListAppendList in window.c in SQLite 3.30.1 allows attackers to trigger an invalid pointer dereference because constant integer values in ORDER BY clauses of window definitions are mishandled.",
  "repo": "sqlite/sqlite",
  "patch_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
  "patch_info": {
    "commit_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/window.c"
    ],
    "message": "When processing constant integer values in ORDER BY clauses of window definitions (see check-in [7e4809eadfe99ebf]) be sure to fully disable the constant value to avoid an invalid pointer dereference if the expression is ever duplicated. This fixes a crash report from Yongheng and Rui.\n\nFossilOrigin-Name: 1ca0bd982ab1183bbafce0d260e4dceda5eb766ed2e7793374a88d1ae0bdd2ca",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8223e79f987feda5c8e51ec52cec6798cca16d070b10558939e2888ca1a25b8e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "895:     int nInit = pList ? pList->nExpr : 0;",
      "896:     for(i=0; i<pAppend->nExpr; i++){",
      "897:       Expr *pDup = sqlite3ExprDup(pParse->db, pAppend->a[i].pExpr, 0);",
      "898:       if( bIntToNull && pDup && pDup->op==TK_INTEGER ){",
      "899:         pDup->op = TK_NULL;",
      "900:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
      "901:       }",
      "902:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
      "903:       if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "898:       assert( pDup==0 || !ExprHasProperty(pDup, EP_MemToken) );",
      "902:         pDup->u.zToken = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b336d1ab83e9a7803e3247c6d87ec6ffdc568224",
      "candidate_info": {
        "commit_hash": "b336d1ab83e9a7803e3247c6d87ec6ffdc568224",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b336d1ab83e9a7803e3247c6d87ec6ffdc568224",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Add a call to sqlite3FaultSim(410) inside of btreeRestoreCursorPosition() to simplify testing of error scenarios.\n\nFossilOrigin-Name: bb643bac535ac7d5fb4c13edb8782cd13540bbc7d2b2deb689f4ca8d1914f422",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fb125bd338ab32b33d02fe61b76497b6d4a2a160056d6e759e15c94903e61a41",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "840:     return pCur->skipNext;",
          "841:   }",
          "842:   pCur->eState = CURSOR_INVALID;",
          "844:   if( rc==SQLITE_OK ){",
          "845:     sqlite3_free(pCur->pKey);",
          "846:     pCur->pKey = 0;",
          "",
          "[Removed Lines]",
          "843:   rc = btreeMoveto(pCur, pCur->pKey, pCur->nKey, 0, &skipNext);",
          "",
          "[Added Lines]",
          "843:   if( sqlite3FaultSim(410) ){",
          "844:     rc = SQLITE_IOERR;",
          "845:   }else{",
          "846:     rc = btreeMoveto(pCur, pCur->pKey, pCur->nKey, 0, &skipNext);",
          "847:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "baa3458920680941e93f9e9a382e9539fba44642",
      "candidate_info": {
        "commit_hash": "baa3458920680941e93f9e9a382e9539fba44642",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/baa3458920680941e93f9e9a382e9539fba44642",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/journal3.test"
        ],
        "message": "Modify journal3.test so that it can handle Tcl command \"file attr <file> -perm\" returning octal values in either \"00755\" or \"0o755\" format.\n\nFossilOrigin-Name: b0b655625cf491c832a259d29a67660b8d5943c201617900a83d0660b2673377",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/journal3.test||test/journal3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 75e31b1d56781fc4d28aea6c7f1393a18fd34870a5beb92df81c088d61351b4a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/journal3.test||test/journal3.test": [
          "File: test/journal3.test -> test/journal3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:   } {",
          "39:     db close",
          "40:     #set effective [format %.5o [expr $permissions & ~$umask]]",
          "41:     if {$tcl_version>=8.7} {",
          "42:        regsub {^00} $permissions {0o} permissions",
          "43:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:     set res \"/[regsub {^00} $permissions {0.}]/\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:       catch { forcedelete test.db-journal }",
          "47:       file attributes test.db -permissions $permissions",
          "48:       file attributes test.db -permissions",
          "50:     do_test journal3-1.2.$tn.2 { file exists test.db-journal } {0}",
          "51:     do_test journal3-1.2.$tn.3 {",
          "52:       sqlite3 db test.db",
          "",
          "[Removed Lines]",
          "49:     } $permissions",
          "",
          "[Added Lines]",
          "50:     } $res",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:     } {1}",
          "59:     do_test journal3-1.2.$tn.4 {",
          "60:       file attr test.db-journal -perm",
          "62:     do_execsql_test journal3-1.2.$tn.5 { ROLLBACK } {}",
          "63:   }",
          "",
          "[Removed Lines]",
          "61:     } $effective",
          "",
          "[Added Lines]",
          "62:     } $res",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "31999c5cac3b01dc8a17a9148f8129d33109e240",
      "candidate_info": {
        "commit_hash": "31999c5cac3b01dc8a17a9148f8129d33109e240",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/31999c5cac3b01dc8a17a9148f8129d33109e240",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/malloc.c",
          "src/pragma.c",
          "test/fuzzcheck.c",
          "test/ossfuzz.c",
          "test/tester.tcl"
        ],
        "message": "Fix a bug in the hard_heap_limit pragma so that it returns the new value of the hard_heap_limit, not the soft_heap_limit.  Change SQLITE_MAX_MEMORY so that it works by setting the default hard_heap_limit value.\n\nFossilOrigin-Name: 33fd0c3abcad5555a150990a22d9c1bab99e79be01143fccb9fafc9b52cf92c8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/malloc.c||src/malloc.c",
          "src/pragma.c||src/pragma.c",
          "test/fuzzcheck.c||test/fuzzcheck.c",
          "test/ossfuzz.c||test/ossfuzz.c",
          "test/tester.tcl||test/tester.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b8a631fd30d0732505679230684b3362c965438197a2b11518f01a77599c9202",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/malloc.c||src/malloc.c": [
          "File: src/malloc.c -> src/malloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #endif",
          "33: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: #ifndef SQLITE_MAX_MEMORY",
          "39: # define SQLITE_MAX_MEMORY 0",
          "40: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:   int nearlyFull;",
          "50: #define mem0 GLOBAL(struct Mem0Global, mem0)",
          "",
          "[Removed Lines]",
          "48: } mem0 = { 0, 0, 0 };",
          "",
          "[Added Lines]",
          "55: } mem0 = { 0, SQLITE_MAX_MEMORY, SQLITE_MAX_MEMORY, 0 };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "233:   nFull = sqlite3GlobalConfig.m.xRoundup(n);",
          "242:   sqlite3StatusHighwater(SQLITE_STATUS_MALLOC_SIZE, n);",
          "243:   if( mem0.alarmThreshold>0 ){",
          "244:     sqlite3_int64 nUsed = sqlite3StatusValue(SQLITE_STATUS_MEMORY_USED);",
          "",
          "[Removed Lines]",
          "235: #ifdef SQLITE_MAX_MEMORY",
          "236:   if( sqlite3StatusValue(SQLITE_STATUS_MEMORY_USED)+nFull>SQLITE_MAX_MEMORY ){",
          "238:     return;",
          "239:   }",
          "240: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2106:       sqlite3_int64 iPrior = sqlite3_hard_heap_limit64(-1);",
          "2107:       if( N>0 && (iPrior==0 || iPrior>N) ) sqlite3_hard_heap_limit64(N);",
          "2108:     }",
          "2110:     break;",
          "2111:   }",
          "",
          "[Removed Lines]",
          "2109:     returnSingleInt(v, sqlite3_soft_heap_limit64(-1));",
          "",
          "[Added Lines]",
          "2109:     returnSingleInt(v, sqlite3_hard_heap_limit64(-1));",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "454: static int lengthLimit = 1000000;",
          "457: static int vdbeOpLimit = 25000;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "457: static sqlite3_int64 heapLimit = 1000000000;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "777:   if( lengthLimit>0 ){",
          "778:     sqlite3_limit(cx.db, SQLITE_LIMIT_LENGTH, lengthLimit);",
          "779:   }",
          "781:   if( nDb>=20 && aDb[18]==2 && aDb[19]==2 ){",
          "782:     aDb[18] = aDb[19] = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "783:   sqlite3_hard_heap_limit64(heapLimit);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1391:         infoFlag = 1;",
          "1392:       }else",
          "1393:       if( strcmp(z,\"limit-mem\")==0 ){",
          "1398:         if( i>=argc-1 ) fatalError(\"missing arguments on %s\", argv[i]);",
          "1399:         nMem = integerValue(argv[++i]);",
          "1401:       }else",
          "1402:       if( strcmp(z,\"limit-vdbe\")==0 ){",
          "1403:         vdbeLimitFlag = 1;",
          "",
          "[Removed Lines]",
          "1394: #if !defined(SQLITE_ENABLE_MEMSYS3) && !defined(SQLITE_ENABLE_MEMSYS5)",
          "1395:         fatalError(\"the %s option requires -DSQLITE_ENABLE_MEMSYS5 or _MEMSYS3\",",
          "1396:                    argv[i]);",
          "1397: #else",
          "1400: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1586:           ossFuzzThisDb = sqlite3_column_int(pStmt,1);",
          "1587:           if( verboseFlag ) printf(\"Config: oss-fuzz=%d\\n\", ossFuzzThisDb);",
          "1588:         }",
          "1594:           nMemThisDb = sqlite3_column_int(pStmt,1);",
          "1595:           if( verboseFlag ) printf(\"Config: limit-mem=%d\\n\", nMemThisDb);",
          "1597:         }",
          "1598:       }",
          "1599:       sqlite3_finalize(pStmt);",
          "",
          "[Removed Lines]",
          "1589:         if( strcmp(zName, \"limit-mem\")==0 && !nativeMalloc ){",
          "1590: #if !defined(SQLITE_ENABLE_MEMSYS3) && !defined(SQLITE_ENABLE_MEMSYS5)",
          "1591:           fatalError(\"the limit-mem option requires -DSQLITE_ENABLE_MEMSYS5\"",
          "1592:                      \" or _MEMSYS3\");",
          "1593: #else",
          "1596: #endif",
          "",
          "[Added Lines]",
          "1588:         if( strcmp(zName, \"limit-mem\")==0 ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1722:     sqlite3_shutdown();",
          "1727:       }",
          "1729:     }",
          "",
          "[Removed Lines]",
          "1723:     if( nMemThisDb>0 && !nativeMalloc ){",
          "1724:       pHeap = realloc(pHeap, nMemThisDb);",
          "1725:       if( pHeap==0 ){",
          "1726:         fatalError(\"failed to allocate %d bytes of heap memory\", nMem);",
          "1728:       sqlite3_config(SQLITE_CONFIG_HEAP, pHeap, nMemThisDb, 128);",
          "",
          "[Added Lines]",
          "1717:     if( nMemThisDb>0 && nMem==0 ){",
          "1718:       if( !nativeMalloc ){",
          "1719:         pHeap = realloc(pHeap, nMemThisDb);",
          "1720:         if( pHeap==0 ){",
          "1721:           fatalError(\"failed to allocate %d bytes of heap memory\", nMem);",
          "1722:         }",
          "1723:         sqlite3_config(SQLITE_CONFIG_HEAP, pHeap, nMemThisDb, 128);",
          "1724:       }else{",
          "1725:         sqlite3_hard_heap_limit64((sqlite3_int64)nMemThisDb);",
          "1727:     }else{",
          "1728:       sqlite3_hard_heap_limit64(0);",
          "",
          "---------------"
        ],
        "test/ossfuzz.c||test/ossfuzz.c": [
          "File: test/ossfuzz.c -> test/ossfuzz.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:   sqlite3_limit(cx.db, SQLITE_LIMIT_VDBE_OP, 25000);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159:   sqlite3_hard_heap_limit64(20000000);",
          "",
          "---------------"
        ],
        "test/tester.tcl||test/tester.tcl": [
          "File: test/tester.tcl -> test/tester.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "388:   puts {Options:",
          "389:   --pause                  Wait for user input before continuing",
          "390:   --soft-heap-limit=N      Set the soft-heap-limit to N",
          "391:   --maxerror=N             Quit after N errors",
          "392:   --verbose=(0|1)          Control the amount of output.  Default '1'",
          "393:   --output=FILE            set --verbose=2 and output to FILE.  Implies -q",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "391:   --hard-heap-limit=N      Set the hard-heap-limit to N",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "408:   #",
          "409:   #   --pause",
          "410:   #   --soft-heap-limit=NN",
          "411:   #   --maxerror=NN",
          "412:   #   --malloctrace=N",
          "413:   #   --backtrace=N",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "412:   #   --hard-heap-limit=NN",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "424:   #   --help",
          "425:   #",
          "426:   set cmdlinearg(soft-heap-limit)    0",
          "427:   set cmdlinearg(maxerror)        1000",
          "428:   set cmdlinearg(malloctrace)        0",
          "429:   set cmdlinearg(backtrace)         10",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "429:   set cmdlinearg(hard-heap-limit)    0",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "450:       {^-+soft-heap-limit=.+$} {",
          "451:         foreach {dummy cmdlinearg(soft-heap-limit)} [split $a =] break",
          "452:       }",
          "453:       {^-+maxerror=.+$} {",
          "454:         foreach {dummy cmdlinearg(maxerror)} [split $a =] break",
          "455:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "456:       {^-+hard-heap-limit=.+$} {",
          "457:         foreach {dummy cmdlinearg(hard-heap-limit)} [split $a =] break",
          "458:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "586: # way if an individual test file changes the soft-heap-limit, it",
          "587: # will be reset at the start of the next test file.",
          "588: #",
          "591: # Create a test database",
          "592: #",
          "",
          "[Removed Lines]",
          "589: sqlite3_soft_heap_limit $cmdlinearg(soft-heap-limit)",
          "",
          "[Added Lines]",
          "595: sqlite3_soft_heap_limit64 $cmdlinearg(soft-heap-limit)",
          "596: sqlite3_hard_heap_limit64 $cmdlinearg(hard-heap-limit)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1207:   db close",
          "1208:   sqlite3_reset_auto_extension",
          "1211:   set nTest [incr_ntest]",
          "1212:   set nErr [set_test_counter errors]",
          "",
          "[Removed Lines]",
          "1210:   sqlite3_soft_heap_limit 0",
          "",
          "[Added Lines]",
          "1217:   sqlite3_soft_heap_limit64 0",
          "1218:   sqlite3_hard_heap_limit64 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "73bacb7f93eab9f4bd5a65cbc4ae242acf63c9e3",
      "candidate_info": {
        "commit_hash": "73bacb7f93eab9f4bd5a65cbc4ae242acf63c9e3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/73bacb7f93eab9f4bd5a65cbc4ae242acf63c9e3",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata1.db"
        ],
        "message": "Add more test cases from Yongheng Chen and Rui Zhong.\n\nFossilOrigin-Name: f24e6ca4f23008212ec05cace9202dbeb37ee34530ead91fac2f5e3eac7f6347",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "725dd72400872da94dcfb6af48128905b93d57fe",
      "candidate_info": {
        "commit_hash": "725dd72400872da94dcfb6af48128905b93d57fe",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/725dd72400872da94dcfb6af48128905b93d57fe",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/analyze.c",
          "src/where.c",
          "test/analyzeC.test"
        ],
        "message": "Ensure that the optional \"sz=N\" parameter that can be manually added to the end of an sqlite_stat1 entry does not have an N value that is too small. Ticket [e4598ecbdd18bd82]\n\nFossilOrigin-Name: 98357d8c1263920b33a3648ef9214a63c99728bafa7a8d3dd6a1241b2303fd42",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/analyze.c||src/analyze.c",
          "src/where.c||src/where.c",
          "test/analyzeC.test||test/analyzeC.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4f5b2d938194fab7627486e2ced633def2c90d9d3328e3700612feb9dbfa3d9a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/analyze.c||src/analyze.c": [
          "File: src/analyze.c -> src/analyze.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1450:       if( sqlite3_strglob(\"unordered*\", z)==0 ){",
          "1451:         pIndex->bUnordered = 1;",
          "1452:       }else if( sqlite3_strglob(\"sz=[0-9]*\", z)==0 ){",
          "1454:       }else if( sqlite3_strglob(\"noskipscan*\", z)==0 ){",
          "1455:         pIndex->noSkipScan = 1;",
          "1456:       }",
          "",
          "[Removed Lines]",
          "1453:         pIndex->szIdxRow = sqlite3LogEst(sqlite3Atoi(z+3));",
          "",
          "[Added Lines]",
          "1453:         int sz = sqlite3Atoi(z+3);",
          "1454:         if( sz<2 ) sz = 2;",
          "1455:         pIndex->szIdxRow = sqlite3LogEst(sz);",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2673:     rCostIdx = pNew->nOut + 1 + (15*pProbe->szIdxRow)/pSrc->pTab->szTabRow;",
          "2674:     pNew->rRun = sqlite3LogEstAdd(rLogSize, rCostIdx);",
          "2675:     if( (pNew->wsFlags & (WHERE_IDX_ONLY|WHERE_IPK))==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2673:     assert( pSrc->pTab->szTabRow>0 );",
          "",
          "---------------"
        ],
        "test/analyzeC.test||test/analyzeC.test": [
          "File: test/analyzeC.test -> test/analyzeC.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:   SELECT count(a) FROM t1;",
          "133: } {/.*INDEX t1ca.*/}",
          "136: # The sz=NNN parameter works even if there is other extraneous text",
          "137: # in the sqlite_stat1.stat column.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "135: # 2019-08-15.",
          "136: # Ticket https://www.sqlite.org/src/tktview/e4598ecbdd18bd82945f602901",
          "137: # The sz=N parameter in the sqlite_stat1 table needs to have a value of",
          "138: # 2 or more to avoid a division by zero in the query planner.",
          "139: #",
          "140: do_execsql_test 4.4 {",
          "141:   DROP TABLE IF EXISTS t44;",
          "142:   CREATE TABLE t44(a PRIMARY KEY);",
          "143:   INSERT INTO sqlite_stat1 VALUES('t44',null,'sz=0');",
          "144:   ANALYZE sqlite_master;",
          "145:   SELECT 0 FROM t44 WHERE a IN(1,2,3);",
          "146: } {}",
          "",
          "---------------"
        ]
      }
    }
  ]
}