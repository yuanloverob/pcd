{
  "cve_id": "CVE-2013-0869",
  "cve_desc": "The field_end function in libavcodec/h264.c in FFmpeg before 1.1.2 allows remote attackers to have an unspecified impact via crafted H.264 data, related to an SPS and slice mismatch and an out-of-bounds array access.",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "695af8eed642ff0104834495652d1ee784a4c14d",
  "patch_info": {
    "commit_hash": "695af8eed642ff0104834495652d1ee784a4c14d",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/695af8eed642ff0104834495652d1ee784a4c14d",
    "files": [
      "libavcodec/h264.c"
    ],
    "message": "h264: skip error concealment when SPS and slices are mismatching\n\nFixes out of array accesses\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
    "before_after_code_files": [
      "libavcodec/h264.c||libavcodec/h264.c"
    ]
  },
  "patch_diff": {
    "libavcodec/h264.c||libavcodec/h264.c": [
      "File: libavcodec/h264.c -> libavcodec/h264.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2371:         ff_er_frame_end(s);",
      "2373:     ff_MPV_frame_end(s);",
      "",
      "[Removed Lines]",
      "2370:     if (!FIELD_PICTURE && h->current_slice)",
      "",
      "[Added Lines]",
      "2370:     if (!FIELD_PICTURE && h->current_slice && !h->sps.new)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1934bb75361e7859873c6bf94ee1ceb17981c550",
      "candidate_info": {
        "commit_hash": "1934bb75361e7859873c6bf94ee1ceb17981c550",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/1934bb75361e7859873c6bf94ee1ceb17981c550",
        "files": [
          "libavcodec/h264.c"
        ],
        "message": "h264: skip error concealment when SPS and slices are mismatching\n\nFixes out of array accesses\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\n(cherry picked from commit 695af8eed642ff0104834495652d1ee784a4c14d)\n\nConflicts:\n\n\tlibavcodec/h264.c",
        "before_after_code_files": [
          "libavcodec/h264.c||libavcodec/h264.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/h264.c||libavcodec/h264.c"
          ],
          "candidate": [
            "libavcodec/h264.c||libavcodec/h264.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/h264.c||libavcodec/h264.c": [
          "File: libavcodec/h264.c -> libavcodec/h264.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2787:         ff_er_frame_end(s);",
          "2789:     ff_MPV_frame_end(s);",
          "",
          "[Removed Lines]",
          "2786:     if (!FIELD_PICTURE)",
          "",
          "[Added Lines]",
          "2786:     if (!FIELD_PICTURE && h->current_slice && !h->sps.new)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eaa9d2cd6b8c1e2722d5bfc56ea67fde865200ce",
      "candidate_info": {
        "commit_hash": "eaa9d2cd6b8c1e2722d5bfc56ea67fde865200ce",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/eaa9d2cd6b8c1e2722d5bfc56ea67fde865200ce",
        "files": [
          "libavcodec/h264.c"
        ],
        "message": "h264: skip error concealment when SPS and slices are mismatching\n\nFixes out of array accesses\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\n(cherry picked from commit 695af8eed642ff0104834495652d1ee784a4c14d)\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavcodec/h264.c||libavcodec/h264.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/h264.c||libavcodec/h264.c"
          ],
          "candidate": [
            "libavcodec/h264.c||libavcodec/h264.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/h264.c||libavcodec/h264.c": [
          "File: libavcodec/h264.c -> libavcodec/h264.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2355:         ff_er_frame_end(s);",
          "2357:     ff_MPV_frame_end(s);",
          "",
          "[Removed Lines]",
          "2354:     if (!FIELD_PICTURE && h->current_slice)",
          "",
          "[Added Lines]",
          "2354:     if (!FIELD_PICTURE && h->current_slice && !h->sps.new)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d4e649cca6de9e5b25f8ebb28c82a95bd24a9e9c",
      "candidate_info": {
        "commit_hash": "d4e649cca6de9e5b25f8ebb28c82a95bd24a9e9c",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/d4e649cca6de9e5b25f8ebb28c82a95bd24a9e9c",
        "files": [
          "configure",
          "libavcodec/h264.c",
          "libavcodec/h264.h"
        ],
        "message": "h264: make it possible to compile without error_resilience.\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavcodec/h264.c||libavcodec/h264.c",
          "libavcodec/h264.h||libavcodec/h264.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/h264.c||libavcodec/h264.c"
          ],
          "candidate": [
            "libavcodec/h264.c||libavcodec/h264.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/h264.c||libavcodec/h264.c": [
          "File: libavcodec/h264.c -> libavcodec/h264.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1270:     h->ref_cache[1][scan8[7]  + 1] =",
          "1271:     h->ref_cache[1][scan8[13] + 1] = PART_NOT_AVAILABLE;",
          "1274:     er->avctx          = h->avctx;",
          "1275:     er->dsp            = &h->dsp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1273:     if (CONFIG_ERROR_RESILIENCE) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1309:     er->dc_val[2] = er->dc_val[1] + c_size;",
          "1310:     for (i = 0; i < yc_size; i++)",
          "1311:         h->dc_val_base[i] = 1024;",
          "1313:     return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1313:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1340:     h->dequant_coeff_pps = -1;",
          "1345:     ff_videodsp_init(&h->vdsp, 8);",
          "1347:     memset(h->pps.scaling_matrix4, 16, 6 * 16 * sizeof(uint8_t));",
          "",
          "[Removed Lines]",
          "1342:     h->dsp.dct_bits = 16;",
          "1344:     ff_dsputil_init(&h->dsp, h->avctx);",
          "",
          "[Added Lines]",
          "1344:     if (CONFIG_ERROR_RESILIENCE) {",
          "1345:         h->dsp.dct_bits = 16;",
          "1347:         ff_dsputil_init(&h->dsp, h->avctx);",
          "1348:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1765:     h->cur_pic     = *h->cur_pic_ptr;",
          "1766:     h->cur_pic.f.extended_data = h->cur_pic.f.data;",
          "1772:     assert(h->linesize && h->uvlinesize);",
          "",
          "[Removed Lines]",
          "1768:     ff_er_frame_start(&h->er);",
          "1769:     h->er.last_pic =",
          "1770:     h->er.next_pic = NULL;",
          "",
          "[Added Lines]",
          "1772:     if (CONFIG_ERROR_RESILIENCE) {",
          "1773:         ff_er_frame_start(&h->er);",
          "1774:         h->er.last_pic =",
          "1775:         h->er.next_pic = NULL;",
          "1776:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2781:         h->er.cur_pic  = h->cur_pic_ptr;",
          "2782:         ff_er_frame_end(&h->er);",
          "2783:     }",
          "",
          "[Removed Lines]",
          "2780:     if (!FIELD_PICTURE && h->current_slice && !h->sps.new) {",
          "",
          "[Added Lines]",
          "2786:     if (CONFIG_ERROR_RESILIENCE &&",
          "2787:         !FIELD_PICTURE && h->current_slice && !h->sps.new) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2880:             ff_h264qpel_init(&h->h264qpel, h->sps.bit_depth_luma);",
          "2881:             ff_h264_pred_init(&h->hpc, h->avctx->codec_id, h->sps.bit_depth_luma,",
          "2882:                               h->sps.chroma_format_idc);",
          "2885:             ff_videodsp_init(&h->vdsp, h->sps.bit_depth_luma);",
          "2886:         } else {",
          "2887:             av_log(h->avctx, AV_LOG_ERROR, \"Unsupported bit depth: %d\\n\",",
          "",
          "[Removed Lines]",
          "2883:             h->dsp.dct_bits = h->sps.bit_depth_luma > 8 ? 32 : 16;",
          "2884:             ff_dsputil_init(&h->dsp, h->avctx);",
          "",
          "[Added Lines]",
          "2890:             if (CONFIG_ERROR_RESILIENCE) {",
          "2891:                 h->dsp.dct_bits = h->sps.bit_depth_luma > 8 ? 32 : 16;",
          "2892:                 ff_dsputil_init(&h->dsp, h->avctx);",
          "2893:             }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3043:             H264Context *c;",
          "3044:             c = h->thread_context[i] = av_mallocz(sizeof(H264Context));",
          "3045:             c->avctx       = h->avctx;",
          "3047:             c->vdsp        = h->vdsp;",
          "3048:             c->h264dsp     = h->h264dsp;",
          "3049:             c->h264qpel    = h->h264qpel;",
          "",
          "[Removed Lines]",
          "3046:             c->dsp         = h->dsp;",
          "",
          "[Added Lines]",
          "3055:             if (CONFIG_ERROR_RESILIENCE) {",
          "3056:                 c->dsp         = h->dsp;",
          "3057:             }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4152: static void er_add_slice(H264Context *h, int startx, int starty,",
          "4153:                          int endx, int endy, int status)",
          "4154: {",
          "4159: }",
          "4161: static int decode_slice(struct AVCodecContext *avctx, void *arg)",
          "",
          "[Removed Lines]",
          "4155:     ERContext *er = &h->er;",
          "4157:     er->ref_count = h->ref_count[0];",
          "4158:     ff_er_add_slice(er, startx, starty, endx, endy, status);",
          "",
          "[Added Lines]",
          "4166:     if (CONFIG_ERROR_RESILIENCE) {",
          "4167:         ERContext *er = &h->er;",
          "4169:         er->ref_count = h->ref_count[0];",
          "4170:         ff_er_add_slice(er, startx, starty, endx, endy, status);",
          "4171:     }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4344:         av_assert0(context_count > 0);",
          "4345:         for (i = 1; i < context_count; i++) {",
          "4346:             hx                    = h->thread_context[i];",
          "4348:             hx->x264_build        = h->x264_build;",
          "4349:         }",
          "",
          "[Removed Lines]",
          "4347:             hx->er.error_count  = 0;",
          "",
          "[Added Lines]",
          "4360:             if (CONFIG_ERROR_RESILIENCE) {",
          "4361:                 hx->er.error_count = 0;",
          "4362:             }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4357:         h->mb_y              = hx->mb_y;",
          "4358:         h->droppable         = hx->droppable;",
          "4359:         h->picture_structure = hx->picture_structure;",
          "4362:     }",
          "4364:     return 0;",
          "",
          "[Removed Lines]",
          "4360:         for (i = 1; i < context_count; i++)",
          "4361:             h->er.error_count += h->thread_context[i]->er.error_count;",
          "",
          "[Added Lines]",
          "4375:         if (CONFIG_ERROR_RESILIENCE) {",
          "4376:             for (i = 1; i < context_count; i++)",
          "4377:                 h->er.error_count += h->thread_context[i]->er.error_count;",
          "4378:         }",
          "",
          "---------------"
        ],
        "libavcodec/h264.h||libavcodec/h264.h": [
          "File: libavcodec/h264.h -> libavcodec/h264.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "257: typedef struct H264Context {",
          "258:     AVCodecContext *avctx;",
          "260:     VideoDSPContext vdsp;",
          "261:     H264DSPContext h264dsp;",
          "262:     H264ChromaContext h264chroma;",
          "",
          "[Removed Lines]",
          "259:     DSPContext       dsp;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "264:     MotionEstContext me;",
          "265:     ParseContext parse_context;",
          "266:     GetBitContext gb;",
          "267:     ERContext er;",
          "269:     Picture *DPB;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "266:     DSPContext       dsp;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7fa00653a550c0d24b3951c0f9fed6350ecf5ce4",
      "candidate_info": {
        "commit_hash": "7fa00653a550c0d24b3951c0f9fed6350ecf5ce4",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/7fa00653a550c0d24b3951c0f9fed6350ecf5ce4",
        "files": [
          "libavcodec/h264.c",
          "libavcodec/h264.h",
          "libavcodec/h264_cabac.c",
          "libavcodec/h264_loopfilter.c",
          "libavcodec/h264_refs.c"
        ],
        "message": "h264: add a parameter to the FIELD_PICTURE macro.\n\nThis way it does not look like a constant.",
        "before_after_code_files": [
          "libavcodec/h264.c||libavcodec/h264.c",
          "libavcodec/h264.h||libavcodec/h264.h",
          "libavcodec/h264_cabac.c||libavcodec/h264_cabac.c",
          "libavcodec/h264_loopfilter.c||libavcodec/h264_loopfilter.c",
          "libavcodec/h264_refs.c||libavcodec/h264_refs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/h264.c||libavcodec/h264.c"
          ],
          "candidate": [
            "libavcodec/h264.c||libavcodec/h264.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/h264.c||libavcodec/h264.c": [
          "File: libavcodec/h264.c -> libavcodec/h264.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "751:                 row <<= MB_MBAFF(h);",
          "752:                 nrefs[list]--;",
          "755:                     ff_thread_await_progress(&ref_pic->tf,",
          "756:                                              FFMIN((row >> 1) - !(row & 1),",
          "757:                                                    pic_height - 1),",
          "",
          "[Removed Lines]",
          "754:                 if (!FIELD_PICTURE && ref_field_picture) { // frame referencing two fields",
          "",
          "[Added Lines]",
          "754:                 if (!FIELD_PICTURE(h) && ref_field_picture) { // frame referencing two fields",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "759:                     ff_thread_await_progress(&ref_pic->tf,",
          "760:                                              FFMIN((row >> 1), pic_height - 1),",
          "761:                                              0);",
          "763:                     ff_thread_await_progress(&ref_pic->tf,",
          "764:                                              FFMIN(row * 2 + ref_field,",
          "765:                                                    pic_height - 1),",
          "766:                                              0);",
          "768:                     ff_thread_await_progress(&ref_pic->tf,",
          "769:                                              FFMIN(row, pic_height - 1),",
          "770:                                              ref_field);",
          "",
          "[Removed Lines]",
          "762:                 } else if (FIELD_PICTURE && !ref_field_picture) { // field referencing one field of a frame",
          "767:                 } else if (FIELD_PICTURE) {",
          "",
          "[Added Lines]",
          "762:                 } else if (FIELD_PICTURE(h) && !ref_field_picture) { // field referencing one field of a frame",
          "767:                 } else if (FIELD_PICTURE(h)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2805:         h->er.cur_pic  = h->cur_pic_ptr;",
          "2806:         h->er.last_pic = h->ref_count[0] ? &h->ref_list[0][0] : NULL;",
          "2807:         h->er.next_pic = h->ref_count[1] ? &h->ref_list[1][0] : NULL;",
          "",
          "[Removed Lines]",
          "2804:     if (!FIELD_PICTURE) {",
          "",
          "[Added Lines]",
          "2804:     if (!FIELD_PICTURE(h)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3098:     first_mb_in_slice = get_ue_golomb(&h->gb);",
          "3100:     if (first_mb_in_slice == 0) { // FIXME better field boundary detection",
          "3102:             field_end(h, 1);",
          "3103:         }",
          "",
          "[Removed Lines]",
          "3101:         if (h0->current_slice && FIELD_PICTURE) {",
          "",
          "[Added Lines]",
          "3101:         if (h0->current_slice && FIELD_PICTURE(h)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3327:             assert(h0->cur_pic_ptr->reference != DELAYED_PIC_REF);",
          "3333:                 if (!last_pic_droppable && last_pic_structure != PICT_FRAME) {",
          "",
          "[Removed Lines]",
          "3330:             if (!FIELD_PICTURE || h->picture_structure == last_pic_structure) {",
          "",
          "[Added Lines]",
          "3330:             if (!FIELD_PICTURE(h) || h->picture_structure == last_pic_structure) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3411:             assert(h0->cur_pic_ptr->reference != DELAYED_PIC_REF);",
          "3417:                 h0->cur_pic_ptr = NULL;",
          "3419:             } else {",
          "3420:                 if (h0->cur_pic_ptr->frame_num != h->frame_num) {",
          "",
          "[Removed Lines]",
          "3414:             if (!FIELD_PICTURE || h->picture_structure == last_pic_structure) {",
          "3418:                 h0->first_field = FIELD_PICTURE;",
          "",
          "[Added Lines]",
          "3414:             if (!FIELD_PICTURE(h) || h->picture_structure == last_pic_structure) {",
          "3418:                 h0->first_field = FIELD_PICTURE(h);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3430:             }",
          "3431:         } else {",
          "3434:         }",
          "3437:             if (h264_frame_start(h) < 0) {",
          "3438:                 h0->first_field = 0;",
          "3439:                 return -1;",
          "",
          "[Removed Lines]",
          "3433:             h0->first_field = FIELD_PICTURE;",
          "3436:         if (!FIELD_PICTURE || h0->first_field) {",
          "",
          "[Added Lines]",
          "3433:             h0->first_field = FIELD_PICTURE(h);",
          "3436:         if (!FIELD_PICTURE(h) || h0->first_field) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4059: static void decode_finish_row(H264Context *h)",
          "4060: {",
          "4063:     int height         =  16      << FRAME_MBAFF(h);",
          "4064:     int deblock_border = (16 + 4) << FRAME_MBAFF(h);",
          "",
          "[Removed Lines]",
          "4061:     int top            = 16 * (h->mb_y      >> FIELD_PICTURE);",
          "4062:     int pic_height     = 16 *  h->mb_height >> FIELD_PICTURE;",
          "",
          "[Added Lines]",
          "4061:     int top            = 16 * (h->mb_y      >> FIELD_PICTURE(h));",
          "4062:     int pic_height     = 16 *  h->mb_height >> FIELD_PICTURE(h);",
          "",
          "---------------"
        ],
        "libavcodec/h264.h||libavcodec/h264.h": [
          "File: libavcodec/h264.h -> libavcodec/h264.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "62: #define MB_MBAFF(h)    h->mb_mbaff",
          "63: #define MB_FIELD(h)    h->mb_field_decoding_flag",
          "64: #define FRAME_MBAFF(h) h->mb_aff_frame",
          "66: #define LEFT_MBS 2",
          "67: #define LTOP     0",
          "68: #define LBOT     1",
          "",
          "[Removed Lines]",
          "65: #define FIELD_PICTURE (h->picture_structure != PICT_FRAME)",
          "",
          "[Added Lines]",
          "65: #define FIELD_PICTURE(h) (h->picture_structure != PICT_FRAME)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71: #define MB_MBAFF(h)      0",
          "72: #define MB_FIELD(h)      0",
          "73: #define FRAME_MBAFF(h)   0",
          "75: #undef  IS_INTERLACED",
          "76: #define IS_INTERLACED(mb_type) 0",
          "77: #define LEFT_MBS 1",
          "",
          "[Removed Lines]",
          "74: #define FIELD_PICTURE 0",
          "",
          "[Added Lines]",
          "74: #define FIELD_PICTURE(h) 0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "79: #define LBOT     0",
          "80: #define LEFT(i)  0",
          "81: #endif",
          "84: #ifndef CABAC",
          "85: #define CABAC h->pps.cabac",
          "",
          "[Removed Lines]",
          "82: #define FIELD_OR_MBAFF_PICTURE (FRAME_MBAFF(h) || FIELD_PICTURE)",
          "",
          "[Added Lines]",
          "82: #define FIELD_OR_MBAFF_PICTURE (FRAME_MBAFF(h) || FIELD_PICTURE(h))",
          "",
          "---------------"
        ],
        "libavcodec/h264_cabac.c||libavcodec/h264_cabac.c": [
          "File: libavcodec/h264_cabac.c -> libavcodec/h264_cabac.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1341:     }else{",
          "1342:         int mb_xy = h->mb_xy;",
          "1343:         mba_xy = mb_xy - 1;",
          "1345:     }",
          "1347:     if( h->slice_table[mba_xy] == h->slice_num && !IS_SKIP(h->cur_pic.mb_type[mba_xy] ))",
          "",
          "[Removed Lines]",
          "1344:         mbb_xy = mb_xy - (h->mb_stride << FIELD_PICTURE);",
          "",
          "[Added Lines]",
          "1344:         mbb_xy = mb_xy - (h->mb_stride << FIELD_PICTURE(h));",
          "",
          "---------------"
        ],
        "libavcodec/h264_loopfilter.c||libavcodec/h264_loopfilter.c": [
          "File: libavcodec/h264_loopfilter.c -> libavcodec/h264_loopfilter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "271:     if( IS_INTRA(mb_type) ) {",
          "272:         static const int16_t bS4[4] = {4,4,4,4};",
          "273:         static const int16_t bS3[4] = {3,3,3,3};",
          "275:         if(left_type)",
          "276:             filter_mb_edgev( &img_y[4*0<<pixel_shift], linesize, bS4, qp0, a, b, h, 1);",
          "277:         if( IS_8x8DCT(mb_type) ) {",
          "",
          "[Removed Lines]",
          "274:         const int16_t *bSH = FIELD_PICTURE ? bS3 : bS4;",
          "",
          "[Added Lines]",
          "274:         const int16_t *bSH = FIELD_PICTURE(h) ? bS3 : bS4;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "372:             int step =  1+(mb_type>>24); //IS_8x8DCT(mb_type) ? 2 : 1;",
          "373:             edges = 4 - 3*((mb_type>>3) & !(h->cbp & 15)); //(mb_type & MB_TYPE_16x16) && !(h->cbp & 15) ? 1 : 4;",
          "374:             h->h264dsp.h264_loop_filter_strength( bS, h->non_zero_count_cache, h->ref_cache, h->mv_cache,",
          "376:         }",
          "377:         if( IS_INTRA(left_type) )",
          "378:             AV_WN64A(bS[0][0], 0x0004000400040004ULL);",
          "379:         if( IS_INTRA(top_type) )",
          "382: #define FILTER(hv,dir,edge,intra)\\",
          "383:         if(AV_RN64A(bS[dir][edge])) {                                   \\",
          "",
          "[Removed Lines]",
          "375:                                               h->list_count==2, edges, step, mask_edge0, mask_edge1, FIELD_PICTURE);",
          "380:             AV_WN64A(bS[1][0], FIELD_PICTURE ? 0x0003000300030003ULL : 0x0004000400040004ULL);",
          "",
          "[Added Lines]",
          "375:                                               h->list_count==2, edges, step, mask_edge0, mask_edge1, FIELD_PICTURE(h));",
          "380:             AV_WN64A(bS[1][0], FIELD_PICTURE(h) ? 0x0003000300030003ULL : 0x0004000400040004ULL);",
          "",
          "---------------"
        ],
        "libavcodec/h264_refs.c||libavcodec/h264_refs.c": [
          "File: libavcodec/h264_refs.c -> libavcodec/h264_refs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:         int cur_poc, list;",
          "123:         int lens[2];",
          "126:             cur_poc = h->cur_pic_ptr->field_poc[h->picture_structure == PICT_BOTTOM_FIELD];",
          "127:         else",
          "128:             cur_poc = h->cur_pic_ptr->poc;",
          "",
          "[Removed Lines]",
          "125:         if (FIELD_PICTURE)",
          "",
          "[Added Lines]",
          "125:         if (FIELD_PICTURE(h))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "191: static int pic_num_extract(H264Context *h, int pic_num, int *structure)",
          "192: {",
          "195:         if (!(pic_num & 1))",
          "",
          "[Removed Lines]",
          "194:     if (FIELD_PICTURE) {",
          "",
          "[Added Lines]",
          "194:     if (FIELD_PICTURE(h)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "291:                             COPY_PICTURE(&h->ref_list[list][i], &h->ref_list[list][i - 1]);",
          "292:                         }",
          "293:                         COPY_PICTURE(&h->ref_list[list][index], ref);",
          "295:                             pic_as_field(&h->ref_list[list][index], pic_structure);",
          "296:                         }",
          "297:                     }",
          "",
          "[Removed Lines]",
          "294:                         if (FIELD_PICTURE) {",
          "",
          "[Added Lines]",
          "294:                         if (FIELD_PICTURE(h)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "525:     if (h->short_ref_count &&",
          "526:         h->long_ref_count + h->short_ref_count == h->sps.ref_frame_count &&",
          "528:         mmco[0].opcode        = MMCO_SHORT2UNUSED;",
          "529:         mmco[0].short_pic_num = h->short_ref[h->short_ref_count - 1]->frame_num;",
          "530:         mmco_index            = 1;",
          "532:             mmco[0].short_pic_num *= 2;",
          "533:             mmco[1].opcode         = MMCO_SHORT2UNUSED;",
          "534:             mmco[1].short_pic_num  = mmco[0].short_pic_num + 1;",
          "",
          "[Removed Lines]",
          "527:         !(FIELD_PICTURE && !h->first_field && h->cur_pic_ptr->reference)) {",
          "531:         if (FIELD_PICTURE) {",
          "",
          "[Added Lines]",
          "527:         !(FIELD_PICTURE(h) && !h->first_field && h->cur_pic_ptr->reference)) {",
          "531:         if (FIELD_PICTURE(h)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "751:                     if (long_arg >= 32 ||",
          "752:                         (long_arg >= 16 && !(opcode == MMCO_SET_MAX_LONG &&",
          "753:                                              long_arg == 16) &&",
          "755:                         av_log(h->avctx, AV_LOG_ERROR,",
          "756:                                \"illegal long ref in memory management control \"",
          "757:                                \"operation %d\\n\", opcode);",
          "",
          "[Removed Lines]",
          "754:                          !(opcode == MMCO_LONG2UNUSED && FIELD_PICTURE))) {",
          "",
          "[Added Lines]",
          "754:                          !(opcode == MMCO_LONG2UNUSED && FIELD_PICTURE(h)))) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4fb1221e66dba5556cecf980b220792457cf7a83",
      "candidate_info": {
        "commit_hash": "4fb1221e66dba5556cecf980b220792457cf7a83",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/4fb1221e66dba5556cecf980b220792457cf7a83",
        "files": [
          "libavcodec/h264.c",
          "libavcodec/h264_cabac.c",
          "libavcodec/h264_cavlc.c",
          "libavcodec/h264_mb_template.c",
          "libavcodec/h264_mvpred.h",
          "libavcodec/h264dsp.c",
          "libavcodec/vda_h264.c"
        ],
        "message": "h264: reduce whitespace differences to libav\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavcodec/h264.c||libavcodec/h264.c",
          "libavcodec/h264_cabac.c||libavcodec/h264_cabac.c",
          "libavcodec/h264_cavlc.c||libavcodec/h264_cavlc.c",
          "libavcodec/h264_mb_template.c||libavcodec/h264_mb_template.c",
          "libavcodec/h264_mvpred.h||libavcodec/h264_mvpred.h",
          "libavcodec/h264dsp.c||libavcodec/h264dsp.c",
          "libavcodec/vda_h264.c||libavcodec/vda_h264.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/h264.c||libavcodec/h264.c"
          ],
          "candidate": [
            "libavcodec/h264.c||libavcodec/h264.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/h264.c||libavcodec/h264.c": [
          "File: libavcodec/h264.c -> libavcodec/h264.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2159:     if (cur->reference == 0)",
          "2160:         cur->reference = DELAYED_PIC_REF;",
          "2163:     out_idx = 0;",
          "2164:     for (i = 1; h->delayed_pic[i] &&",
          "2165:                 !h->delayed_pic[i]->f.key_frame &&",
          "",
          "[Removed Lines]",
          "2162:     out = h->delayed_pic[0];",
          "",
          "[Added Lines]",
          "2162:     out     = h->delayed_pic[0];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2988:         h->er.cur_pic  = h->cur_pic_ptr;",
          "2989:         ff_er_frame_end(&h->er);",
          "2990:     }",
          "",
          "[Removed Lines]",
          "2986:     if (CONFIG_ERROR_RESILIENCE &&",
          "2987:         !FIELD_PICTURE(h) && h->current_slice && !h->sps.new) {",
          "",
          "[Added Lines]",
          "2986:     if (CONFIG_ERROR_RESILIENCE && !FIELD_PICTURE(h) && h->current_slice && !h->sps.new) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3302:             c->height            = h->height;",
          "3303:             c->linesize          = h->linesize;",
          "3304:             c->uvlinesize        = h->uvlinesize;",
          "3307:             c->qscale            = h->qscale;",
          "3308:             c->droppable         = h->droppable;",
          "3309:             c->data_partitioning = h->data_partitioning;",
          "",
          "[Removed Lines]",
          "3305:             c->chroma_x_shift = h->chroma_x_shift;",
          "3306:             c->chroma_y_shift = h->chroma_y_shift;",
          "",
          "[Added Lines]",
          "3304:             c->chroma_x_shift    = h->chroma_x_shift;",
          "3305:             c->chroma_y_shift    = h->chroma_y_shift;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4758:                                         decode_rbsp_trailing(h, ptr + dst_length - 1));",
          "4760:             if (h->avctx->debug & FF_DEBUG_STARTCODE)",
          "4763:             if (h->is_avc && (nalsize != consumed) && nalsize)",
          "4764:                 av_log(h->avctx, AV_LOG_DEBUG,",
          "",
          "[Removed Lines]",
          "4761:                 av_log(h->avctx, AV_LOG_DEBUG, \"NAL %d/%d at %d/%d length %d pass %d\\n\", hx->nal_unit_type, hx->nal_ref_idc, buf_index, buf_size, dst_length, pass);",
          "",
          "[Added Lines]",
          "4760:                 av_log(h->avctx, AV_LOG_DEBUG,",
          "4761:                        \"NAL %d/%d at %d/%d length %d pass %d\\n\",",
          "4762:                        hx->nal_unit_type, hx->nal_ref_idc, buf_index, buf_size, dst_length, pass);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4860:                 }",
          "4862:                 h->cur_pic_ptr->f.key_frame |=",
          "4865:                 if (hx->nal_unit_type == NAL_IDR_SLICE ||",
          "4866:                     h->recovery_frame == h->frame_num) {",
          "",
          "[Removed Lines]",
          "4863:                         (hx->nal_unit_type == NAL_IDR_SLICE);",
          "",
          "[Added Lines]",
          "4864:                     (hx->nal_unit_type == NAL_IDR_SLICE);",
          "",
          "---------------"
        ],
        "libavcodec/h264_cabac.c||libavcodec/h264_cabac.c": [
          "File: libavcodec/h264_cabac.c -> libavcodec/h264_cabac.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1728:         } \\",
          "1729:     } while ( coeff_count );",
          "1736: #ifdef CABAC_ON_STACK",
          "1737:             h->cabac.range     = cc.range     ;",
          "1738:             h->cabac.low       = cc.low       ;",
          "",
          "[Removed Lines]",
          "1731:         if (h->pixel_shift) {",
          "1732:             STORE_BLOCK(int32_t)",
          "1733:         } else {",
          "1734:             STORE_BLOCK(int16_t)",
          "1735:         }",
          "",
          "[Added Lines]",
          "1730:     if (h->pixel_shift) {",
          "1731:         STORE_BLOCK(int32_t)",
          "1732:     } else {",
          "1733:         STORE_BLOCK(int16_t)",
          "1734:     }",
          "",
          "---------------"
        ],
        "libavcodec/h264_cavlc.c||libavcodec/h264_cavlc.c": [
          "File: libavcodec/h264_cavlc.c -> libavcodec/h264_cavlc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "866:         }",
          "868:         for(list=0; list<h->list_count; list++){",
          "870:             for(i=0; i<4; i++){",
          "871:                 if(IS_DIRECT(h->sub_mb_type[i])) continue;",
          "872:                 if(IS_DIR(h->sub_mb_type[i], 0, list)){",
          "",
          "[Removed Lines]",
          "869:             int ref_count= IS_REF0(mb_type) ? 1 : local_ref_count[list];",
          "",
          "[Added Lines]",
          "869:             int ref_count = IS_REF0(mb_type) ? 1 : local_ref_count[list];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "948:                     if(IS_DIR(mb_type, 0, list)){",
          "949:                         if(local_ref_count[list]==1){",
          "950:                             val= 0;",
          "952:                             val= get_bits1(&h->gb)^1;",
          "953:                         }else{",
          "954:                             val= get_ue_golomb_31(&h->gb);",
          "956:                                 av_log(h->avctx, AV_LOG_ERROR, \"ref %u overflow\\n\", val);",
          "957:                                 return -1;",
          "958:                             }",
          "",
          "[Removed Lines]",
          "951:                         }else if(local_ref_count[list]==2){",
          "955:                             if(val >= local_ref_count[list]){",
          "",
          "[Added Lines]",
          "951:                         } else if(local_ref_count[list]==2){",
          "955:                             if (val >= local_ref_count[list]){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "976:                     for(i=0; i<2; i++){",
          "977:                         unsigned int val;",
          "978:                         if(IS_DIR(mb_type, i, list)){",
          "980:                                 val= 0;",
          "982:                                 val= get_bits1(&h->gb)^1;",
          "983:                             }else{",
          "984:                                 val= get_ue_golomb_31(&h->gb);",
          "986:                                     av_log(h->avctx, AV_LOG_ERROR, \"ref %u overflow\\n\", val);",
          "987:                                     return -1;",
          "988:                                 }",
          "",
          "[Removed Lines]",
          "979:                             if(local_ref_count[list] == 1){",
          "981:                             }else if(local_ref_count[list] == 2){",
          "985:                                 if(val >= local_ref_count[list]){",
          "",
          "[Added Lines]",
          "979:                             if(local_ref_count[list] == 1) {",
          "981:                             } else if(local_ref_count[list] == 2) {",
          "985:                                 if (val >= local_ref_count[list]){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1015:                         if(IS_DIR(mb_type, i, list)){ //FIXME optimize",
          "1016:                             if(local_ref_count[list]==1){",
          "1017:                                 val= 0;",
          "1019:                                 val= get_bits1(&h->gb)^1;",
          "1020:                             }else{",
          "1021:                                 val= get_ue_golomb_31(&h->gb);",
          "1023:                                     av_log(h->avctx, AV_LOG_ERROR, \"ref %u overflow\\n\", val);",
          "1024:                                     return -1;",
          "1025:                                 }",
          "",
          "[Removed Lines]",
          "1018:                             }else if(local_ref_count[list]==2){",
          "1022:                                 if(val >= local_ref_count[list]){",
          "",
          "[Added Lines]",
          "1018:                             } else if(local_ref_count[list]==2){",
          "1022:                                 if (val >= local_ref_count[list]){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1142:                 for(chroma_idx=0; chroma_idx<2; chroma_idx++){",
          "1143:                     const uint32_t *qmul = h->dequant4_coeff[chroma_idx+1+(IS_INTRA( mb_type ) ? 0:3)][h->chroma_qp[chroma_idx]];",
          "1144:                     int16_t *mb = h->mb + (16*(16 + 16*chroma_idx) << pixel_shift);",
          "1148:                             if (decode_residual(h, gb, mb, index, scan + 1, qmul, 15) < 0)",
          "1149:                                 return -1;",
          "1151:                         }",
          "1152:                     }",
          "1153:                 }",
          "",
          "[Removed Lines]",
          "1145:                     for (i8x8=0; i8x8<num_c8x8; i8x8++) {",
          "1146:                         for (i4x4=0; i4x4<4; i4x4++) {",
          "1147:                             const int index= 16 + 16*chroma_idx + 8*i8x8 + i4x4;",
          "1150:                             mb += 16<<pixel_shift;",
          "",
          "[Added Lines]",
          "1145:                     for (i8x8 = 0; i8x8<num_c8x8; i8x8++) {",
          "1146:                         for (i4x4 = 0; i4x4 < 4; i4x4++) {",
          "1147:                             const int index = 16 + 16*chroma_idx + 8*i8x8 + i4x4;",
          "1150:                             mb += 16 << pixel_shift;",
          "",
          "---------------"
        ],
        "libavcodec/h264_mb_template.c||libavcodec/h264_mb_template.c": [
          "File: libavcodec/h264_mb_template.c -> libavcodec/h264_mb_template.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:             if (SIMPLE || !CONFIG_GRAY || !(h->flags & CODEC_FLAG_GRAY)) {",
          "139:                 if (!h->sps.chroma_format_idc) {",
          "140:                     for (i = 0; i < 8; i++) {",
          "143:                     }",
          "144:                 } else {",
          "145:                     const uint8_t *src_cb = h->intra_pcm_ptr + 256;",
          "",
          "[Removed Lines]",
          "141:                         memset(dest_cb + i*uvlinesize, 1 << (bit_depth - 1), 8);",
          "142:                         memset(dest_cr + i*uvlinesize, 1 << (bit_depth - 1), 8);",
          "",
          "[Added Lines]",
          "141:                         memset(dest_cb + i * uvlinesize, 1 << (bit_depth - 1), 8);",
          "142:                         memset(dest_cr + i * uvlinesize, 1 << (bit_depth - 1), 8);",
          "",
          "---------------"
        ],
        "libavcodec/h264_mvpred.h||libavcodec/h264_mvpred.h": [
          "File: libavcodec/h264_mvpred.h -> libavcodec/h264_mvpred.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "663:                 ref_cache[4 - 1 * 8] = topright_type ? LIST_NOT_USED",
          "664:                                                      : PART_NOT_AVAILABLE;",
          "665:             }",
          "667:                 if (USES_LIST(topleft_type, list)) {",
          "668:                     const int b_xy  = h->mb2b_xy[topleft_xy] + 3 + b_stride +",
          "669:                                       (h->topleft_partition & 2 * b_stride);",
          "",
          "[Removed Lines]",
          "666:             if(ref_cache[2 - 1*8] < 0 || ref_cache[4 - 1*8] < 0){",
          "",
          "[Added Lines]",
          "666:             if(ref_cache[2 - 1*8] < 0 || ref_cache[4 - 1 * 8] < 0) {",
          "",
          "---------------"
        ],
        "libavcodec/h264dsp.c||libavcodec/h264dsp.c": [
          "File: libavcodec/h264dsp.c -> libavcodec/h264dsp.c"
        ],
        "libavcodec/vda_h264.c||libavcodec/vda_h264.c": [
          "File: libavcodec/vda_h264.c -> libavcodec/vda_h264.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: };",
          "41: {",
          "42:     struct vda_context *vda_ctx = vda_hw_ctx;",
          "",
          "[Removed Lines]",
          "36: static void vda_decoder_callback (void *vda_hw_ctx,",
          "37:                                   CFDictionaryRef user_info,",
          "38:                                   OSStatus status,",
          "39:                                   uint32_t infoFlags,",
          "40:                                   CVImageBufferRef image_buffer)",
          "",
          "[Added Lines]",
          "36: static void vda_decoder_callback(void *vda_hw_ctx,",
          "37:                                  CFDictionaryRef user_info,",
          "38:                                  OSStatus status,",
          "39:                                  uint32_t infoFlags,",
          "40:                                  CVImageBufferRef image_buffer)",
          "",
          "---------------"
        ]
      }
    }
  ]
}