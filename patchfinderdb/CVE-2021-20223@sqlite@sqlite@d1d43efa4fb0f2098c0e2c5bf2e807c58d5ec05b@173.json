{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1e7c00e695ff7fe8ab92e34e5793636b6cf3f420",
      "candidate_info": {
        "commit_hash": "1e7c00e695ff7fe8ab92e34e5793636b6cf3f420",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1e7c00e695ff7fe8ab92e34e5793636b6cf3f420",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "test/without_rowid1.test"
        ],
        "message": "Fix the xferCompatibleIndex() function so that it recognizes that a PRIMARY KEY index for a WITHOUT ROWID table is different from a UNIQUE constraint index on the primary key.  Ticket [302027baf1374498]\n\nFossilOrigin-Name: 34f64f11ca481996b1ff1686bdc5e278946635b6856cd1fe2355fce8e298e0f8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "test/without_rowid1.test||test/without_rowid1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 104a2beb57037f9353ffa77096aae0eb64e4682e667f31623bfd3d064dd8d881",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2367:   int i;",
          "2368:   assert( pDest && pSrc );",
          "2369:   assert( pDest->pTable!=pSrc->pTable );",
          "2372:   }",
          "2373:   if( pDest->onError!=pSrc->onError ){",
          "",
          "[Removed Lines]",
          "2370:   if( pDest->nKeyCol!=pSrc->nKeyCol ){",
          "",
          "[Added Lines]",
          "2370:   if( pDest->nKeyCol!=pSrc->nKeyCol || pDest->nColumn!=pSrc->nColumn ){",
          "",
          "---------------"
        ],
        "test/without_rowid1.test||test/without_rowid1.test": [
          "File: test/without_rowid1.test -> test/without_rowid1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "430:   PRAGMA integrity_check;",
          "431: } {ok}",
          "434: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "433: # 2019-11-07 ticket https://www.sqlite.org/src/info/302027baf1374498",
          "434: # The xferCompatibleIndex() function confuses a PRIMARY KEY index",
          "435: # with a UNIQUE index.",
          "436: #",
          "437: do_execsql_test 13.10 {",
          "438:   DROP TABLE IF EXISTS t0;",
          "439:   DROP TABLE IF EXISTS t1;",
          "440:   CREATE TABLE t0(",
          "441:     c0,",
          "442:     c1 UNIQUE,",
          "443:     PRIMARY KEY(c1, c1)",
          "444:   ) WITHOUT ROWID;",
          "445:   INSERT INTO t0(c0,c1) VALUES('abc','xyz');",
          "446:   CREATE TABLE t1(",
          "447:     c0,",
          "448:     c1 UNIQUE,",
          "449:     PRIMARY KEY(c1, c1)",
          "450:   ) WITHOUT ROWID;",
          "451:   INSERT INTO t1 SELECT * FROM t0;",
          "452:   PRAGMA integrity_check;",
          "453:   SELECT * FROM t0, t1;",
          "454: } {ok abc xyz abc xyz}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "44a5c86c6cfb2f7dde549c1336eb6a0d547239c3",
      "candidate_info": {
        "commit_hash": "44a5c86c6cfb2f7dde549c1336eb6a0d547239c3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/44a5c86c6cfb2f7dde549c1336eb6a0d547239c3",
        "files": [
          "ext/misc/stmt.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Minor change to the sqlite_stmt virtual table, for test coverage.\n\nFossilOrigin-Name: 838987b2097c4b7acaa65aea99cfdaf199f04d76bcf6ef12743c60b338a965f7",
        "before_after_code_files": [
          "ext/misc/stmt.c||ext/misc/stmt.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/stmt.c||ext/misc/stmt.c": [
          "File: ext/misc/stmt.c -> ext/misc/stmt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "168:       sqlite3_result_int(ctx, sqlite3_stmt_busy(pCur->pStmt));",
          "169:       break;",
          "170:     }",
          "172:       i = SQLITE_STMTSTATUS_MEMUSED +",
          "173:             STMT_COLUMN_NSCAN - SQLITE_STMTSTATUS_FULLSCAN_STEP;",
          "",
          "[Removed Lines]",
          "171:     case STMT_COLUMN_MEM: {",
          "",
          "[Added Lines]",
          "171:     default: {",
          "172:       assert( i==STMT_COLUMN_MEM );",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 729f2397358d0382e255ba0058bf70bc9ed410b7621a67466da13de437d3ba5c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e9261dbd53b1ebb631f4dcc3d2cc85dd3c9471e6",
      "candidate_info": {
        "commit_hash": "e9261dbd53b1ebb631f4dcc3d2cc85dd3c9471e6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e9261dbd53b1ebb631f4dcc3d2cc85dd3c9471e6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/btree.h",
          "src/pager.c",
          "src/pager.h",
          "src/pragma.c",
          "src/sqliteInt.h"
        ],
        "message": "Initial changes to allow database up to 281TB in size.\n\nFossilOrigin-Name: 9cb7da9bdb666ea40771513b89591dca275f1e92092b39190df747e3797178a3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/btree.h||src/btree.h",
          "src/pager.c||src/pager.c",
          "src/pager.h||src/pager.h",
          "src/pragma.c||src/pragma.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 020dbfa2aef20e5872cc3e785d99f45903843401292114b5092b9c8aa829b9c3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2937:   sqlite3BtreeEnter(p);",
          "2938:   n = sqlite3PagerMaxPageCount(p->pBt->pPager, mxPage);",
          "2939:   sqlite3BtreeLeave(p);",
          "",
          "[Removed Lines]",
          "2935: int sqlite3BtreeMaxPageCount(Btree *p, int mxPage){",
          "2936:   int n;",
          "",
          "[Added Lines]",
          "2935: Pgno sqlite3BtreeMaxPageCount(Btree *p, Pgno mxPage){",
          "2936:   Pgno n;",
          "",
          "---------------"
        ],
        "src/btree.h||src/btree.h": [
          "File: src/btree.h -> src/btree.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "71: int sqlite3BtreeSetPagerFlags(Btree*,unsigned);",
          "72: int sqlite3BtreeSetPageSize(Btree *p, int nPagesize, int nReserve, int eFix);",
          "73: int sqlite3BtreeGetPageSize(Btree*);",
          "75: u32 sqlite3BtreeLastPage(Btree*);",
          "76: int sqlite3BtreeSecureDelete(Btree*,int);",
          "77: int sqlite3BtreeGetRequestedReserve(Btree*);",
          "",
          "[Removed Lines]",
          "74: int sqlite3BtreeMaxPageCount(Btree*,int);",
          "",
          "[Added Lines]",
          "74: Pgno sqlite3BtreeMaxPageCount(Btree*,Pgno);",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3767:   if( mxPage>0 ){",
          "3768:     pPager->mxPgno = mxPage;",
          "3769:   }",
          "",
          "[Removed Lines]",
          "3766: int sqlite3PagerMaxPageCount(Pager *pPager, int mxPage){",
          "",
          "[Added Lines]",
          "3766: Pgno sqlite3PagerMaxPageCount(Pager *pPager, Pgno mxPage){",
          "",
          "---------------"
        ],
        "src/pager.h||src/pager.h": [
          "File: src/pager.h -> src/pager.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "129: void sqlite3PagerSetBusyHandler(Pager*, int(*)(void *), void *);",
          "130: int sqlite3PagerSetPagesize(Pager*, u32*, int);",
          "132: void sqlite3PagerSetCachesize(Pager*, int);",
          "133: int sqlite3PagerSetSpillsize(Pager*, int);",
          "134: void sqlite3PagerSetMmapLimit(Pager *, sqlite3_int64);",
          "",
          "[Removed Lines]",
          "131: int sqlite3PagerMaxPageCount(Pager*, int);",
          "",
          "[Added Lines]",
          "131: Pgno sqlite3PagerMaxPageCount(Pager*, Pgno);",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "612:   case PragTyp_PAGE_COUNT: {",
          "613:     int iReg;",
          "614:     sqlite3CodeVerifySchema(pParse, iDb);",
          "615:     iReg = ++pParse->nMem;",
          "616:     if( sqlite3Tolower(zLeft[0])=='p' ){",
          "617:       sqlite3VdbeAddOp2(v, OP_Pagecount, iDb, iReg);",
          "618:     }else{",
          "621:     }",
          "622:     sqlite3VdbeAddOp2(v, OP_ResultRow, iReg, 1);",
          "623:     break;",
          "",
          "[Removed Lines]",
          "619:       sqlite3VdbeAddOp3(v, OP_MaxPgcnt, iDb, iReg,",
          "620:                         sqlite3AbsInt32(sqlite3Atoi(zRight)));",
          "",
          "[Added Lines]",
          "614:     i64 x = 0;",
          "620:       if( zRight && sqlite3DecOrHexToI64(zRight,&x)==0 ){",
          "621:         if( x<0 ) x = 0;",
          "622:         else if( x>0xfffffffe ) x = 0xfffffffe;",
          "623:       }else{",
          "624:         x = 0;",
          "625:       }",
          "626:       sqlite3VdbeAddOp3(v, OP_MaxPgcnt, iDb, iReg, (int)x);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1189: #include \"btree.h\"",
          "1190: #include \"vdbe.h\"",
          "1192: #include \"pcache.h\"",
          "1193: #include \"os.h\"",
          "1194: #include \"mutex.h\"",
          "",
          "[Removed Lines]",
          "1191: #include \"pager.h\"",
          "",
          "[Added Lines]",
          "1189: #include \"pager.h\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3b9f154bb7c2f5382a998ce7ca1312654ddea587",
      "candidate_info": {
        "commit_hash": "3b9f154bb7c2f5382a998ce7ca1312654ddea587",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3b9f154bb7c2f5382a998ce7ca1312654ddea587",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/os_unix.c"
        ],
        "message": "Do not use O_NOFOLLOW when opening a directory just to call fsync() on that directory.\n\nFossilOrigin-Name: 2fc80ef16ce5878311ab88a0c64631813572ffbb71f75363b4619c9667e0926b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/os_unix.c||src/os_unix.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 698d40db58b76f4094687d46b5c6292702a62168054f9e6a70ee86650a6635f7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/os_unix.c||src/os_unix.c": [
          "File: src/os_unix.c -> src/os_unix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3685:     if( zDirname[0]!='/' ) zDirname[0] = '.';",
          "3686:     zDirname[1] = 0;",
          "3687:   }",
          "3689:   if( fd>=0 ){",
          "3690:     OSTRACE((\"OPENDIR %-3d %s\\n\", fd, zDirname));",
          "3691:   }",
          "",
          "[Removed Lines]",
          "3688:   fd = robust_open(zDirname, O_RDONLY|O_BINARY|O_NOFOLLOW, 0);",
          "",
          "[Added Lines]",
          "3688:   fd = robust_open(zDirname, O_RDONLY|O_BINARY, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "522ebfa7cee96fb325a22ea3a2464a63485886a8",
      "candidate_info": {
        "commit_hash": "522ebfa7cee96fb325a22ea3a2464a63485886a8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/522ebfa7cee96fb325a22ea3a2464a63485886a8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/gencol1.test"
        ],
        "message": "Whenever a generated column is used, assume that all columns are used.\n\nFossilOrigin-Name: 6601da58032d18ae00b466c0f2077fb2b1ecd84225b56e1787724bea478eedc9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "561:     if( n>=BMS ){",
          "562:       n = BMS-1;",
          "563:     }",
          "564:     assert( pMatch->iCursor==pExpr->iTable );",
          "565:     pMatch->colUsed |= ((Bitmask)1)<<n;",
          "566:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "573:     assert( pExpr->y.pTab!=0 );",
          "575:     if( pExpr->y.pTab->tabFlags & TF_HasGenerated ){",
          "576:       Column *pCol = pExpr->y.pTab->aCol + pExpr->iColumn;",
          "577:       if( pCol->colFlags & COLFLAG_GENERATED ) n = BMS-1;",
          "578:     }",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "246: # 2019-11-21 Problems in the new generated column logic",
          "247: # reported by Yongheng Chen and Rui Zhong",
          "248: do_execsql_test gencol1-9.10 {",
          "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
          "252:   INSERT INTO t1 VALUES(17);",
          "253:   CREATE TABLE t2(cc);",
          "254:   INSERT INTO t2 VALUES(41);",
          "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
          "256: } {41 17 17}",
          "259: finish_test",
          "",
          "[Removed Lines]",
          "249:   DROP TABLE IF EXISTS t1;",
          "250:   DROP TABLE IF EXISTS t2;",
          "",
          "[Added Lines]",
          "249:   DROP TABLE t1;",
          "256: do_execsql_test gencol1-9.20 {",
          "257:   CREATE TABLE t3(aa INT PRIMARY KEY, bb UNIQUE AS(aa));",
          "258:   INSERT INTO t3 VALUES(1);",
          "259:   SELECT 100, * FROM t3;",
          "260:   DELETE FROM t3 WHERE (SELECT bb FROM t3);",
          "261:   SELECT 200, * FROM t3;",
          "262: } {100 1 1}",
          "",
          "---------------"
        ]
      }
    }
  ]
}