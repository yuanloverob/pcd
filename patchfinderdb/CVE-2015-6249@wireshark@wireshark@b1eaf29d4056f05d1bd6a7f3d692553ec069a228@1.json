{
  "cve_id": "CVE-2015-6249",
  "cve_desc": "The dissect_wccp2r1_address_table_info function in epan/dissectors/packet-wccp.c in the WCCP dissector in Wireshark 1.12.x before 1.12.7 does not prevent the conflicting use of a table for both IPv4 and IPv6 addresses, which allows remote attackers to cause a denial of service (application crash) via a crafted packet.",
  "repo": "wireshark/wireshark",
  "patch_hash": "b1eaf29d4056f05d1bd6a7f3d692553ec069a228",
  "patch_info": {
    "commit_hash": "b1eaf29d4056f05d1bd6a7f3d692553ec069a228",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/b1eaf29d4056f05d1bd6a7f3d692553ec069a228",
    "files": [
      "epan/dissectors/packet-wccp.c"
    ],
    "message": "WCCP - Only populate address table once and presume first address table type is the one that should populate it.\n\nPing-Bug: 11358\nChange-Id: Ieed093b4aa263026772450f95dd5fa18280f9b76\nReviewed-on: https://code.wireshark.org/review/9648\nReviewed-by: Michael Mann <mmann78@netscape.net>",
    "before_after_code_files": [
      "epan/dissectors/packet-wccp.c||epan/dissectors/packet-wccp.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-wccp.c||epan/dissectors/packet-wccp.c": [
      "File: epan/dissectors/packet-wccp.c -> epan/dissectors/packet-wccp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1854:   EAT(4);",
      "1856:   if (wccp_wccp_address_table.in_use == FALSE) {",
      "1858:     wccp_wccp_address_table.family = family;",
      "1859:     wccp_wccp_address_table.table_length =  table_length;",
      "",
      "[Removed Lines]",
      "1857:     wccp_wccp_address_table.in_use = TRUE;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1897:     case 1:",
      "1899:       addr  =  tvb_ip_to_str(tvb, offset);",
      "1901:         wccp_wccp_address_table.table_ipv4[i] = tvb_get_ntohl(tvb, offset);",
      "1902:       break;",
      "1903:     case 2:",
      "1905:       addr = tvb_ip6_to_str(tvb, offset);",
      "1907:         tvb_get_ipv6(tvb, offset, &(wccp_wccp_address_table.table_ipv6[i]));",
      "1908:       break;",
      "1909:     default:",
      "",
      "[Removed Lines]",
      "1900:       if ((wccp_wccp_address_table.table_ipv4 != NULL) && ((address_length * i) < wccp_wccp_address_table.table_length))",
      "1906:       if ((wccp_wccp_address_table.table_ipv6 != NULL) && ((address_length * i) < wccp_wccp_address_table.table_length))",
      "",
      "[Added Lines]",
      "1899:       if ((wccp_wccp_address_table.in_use == FALSE) &&",
      "1900:           (wccp_wccp_address_table.table_ipv4 != NULL) &&",
      "1901:           ((address_length * i) < wccp_wccp_address_table.table_length))",
      "1907:       if ((wccp_wccp_address_table.in_use == FALSE) &&",
      "1908:           (wccp_wccp_address_table.table_ipv6 != NULL) &&",
      "1909:           (i < wccp_wccp_address_table.table_length))",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1916:       pi = proto_tree_add_string_format_value(element_tree, hf_address_table_element, tvb,",
      "1917:                                               offset, address_length, addr,",
      "1918:                                               \"%d: %s\", i+1, addr);",
      "1920:         expert_add_info_format(pinfo, pi, &ei_wccp_length_bad, \"Ran out of space to store address\");",
      "1921:     }",
      "1922:     EAT(address_length);",
      "1923:   }",
      "1925:   return length;",
      "1926: }",
      "",
      "[Removed Lines]",
      "1919:       if ((address_length * i) > wccp_wccp_address_table.table_length)",
      "",
      "[Added Lines]",
      "1922:       if (i > wccp_wccp_address_table.table_length)",
      "1928:   wccp_wccp_address_table.in_use = TRUE;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a442a1c0e815fd61416cf408bd74d85a042ccc6a",
      "candidate_info": {
        "commit_hash": "a442a1c0e815fd61416cf408bd74d85a042ccc6a",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/a442a1c0e815fd61416cf408bd74d85a042ccc6a",
        "files": [
          "epan/dissectors/packet-wccp.c"
        ],
        "message": "WCCP: initialize address table to 0\n\nIt prevents an uninitialized access later on if an exception is triggered before filling the table\n\nBug: 10806\nChange-Id: I8f75fb18cd8d033013c34093f9d6c8762f23452b\nReviewed-on: https://code.wireshark.org/review/6056\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-wccp.c||epan/dissectors/packet-wccp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-wccp.c||epan/dissectors/packet-wccp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-wccp.c||epan/dissectors/packet-wccp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-wccp.c||epan/dissectors/packet-wccp.c": [
          "File: epan/dissectors/packet-wccp.c -> epan/dissectors/packet-wccp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1891:   case 1:",
          "1892:     if (wccp_wccp_address_table.table_ipv4 == NULL)",
          "1893:       wccp_wccp_address_table.table_ipv4 = (guint32 *)",
          "1895:     if (address_length != 4) {",
          "1896:       expert_add_info_format(pinfo, tf, &ei_wccp_length_bad,",
          "1897:                              \"The Address length must be 4, but I found  %d for IPv4 addresses. Correcting this.\",",
          "",
          "[Removed Lines]",
          "1894:         wmem_alloc(pinfo->pool, wccp_wccp_address_table.table_length * 4);",
          "",
          "[Added Lines]",
          "1894:         wmem_alloc0(pinfo->pool, wccp_wccp_address_table.table_length * 4);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1902:   case 2:",
          "1903:     if (wccp_wccp_address_table.table_ipv6 == NULL)",
          "1904:       wccp_wccp_address_table.table_ipv6 = (struct e_in6_addr *)",
          "1906:     if (address_length != 16) {",
          "1907:       expert_add_info_format(pinfo, tf, &ei_wccp_length_bad,",
          "1908:                              \"The Address length must be 16, but I found %d for IPv6 addresses.  Correcting this\",",
          "",
          "[Removed Lines]",
          "1905:         wmem_alloc(pinfo->pool, wccp_wccp_address_table.table_length * sizeof(struct e_in6_addr));",
          "",
          "[Added Lines]",
          "1905:         wmem_alloc0(pinfo->pool, wccp_wccp_address_table.table_length * sizeof(struct e_in6_addr));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a159cedd5bc3a39c29f9a9952b5f202cb6565f0b",
      "candidate_info": {
        "commit_hash": "a159cedd5bc3a39c29f9a9952b5f202cb6565f0b",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/a159cedd5bc3a39c29f9a9952b5f202cb6565f0b",
        "files": [
          "epan/dissectors/packet-wccp.c"
        ],
        "message": "WCCP: Remove uneeded check (pinfo & info_tree)\n\nRemove also some false positive Dereference of null pointer\n\nChange-Id: I09687993531827c6e4f5178f3414ddd9a2702038\nReviewed-on: https://code.wireshark.org/review/5506\nPetri-Dish: Alexis La Goutte <alexis.lagoutte@gmail.com>\nReviewed-by: Evan Huus <eapache@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Alexis La Goutte <alexis.lagoutte@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-wccp.c||epan/dissectors/packet-wccp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-wccp.c||epan/dissectors/packet-wccp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-wccp.c||epan/dissectors/packet-wccp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-wccp.c||epan/dissectors/packet-wccp.c": [
          "File: epan/dissectors/packet-wccp.c -> epan/dissectors/packet-wccp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1871:   wccp_wccp_address_table.in_use = TRUE;",
          "1876:   if (length < 2*4)",
          "1877:     return length - 2*4;",
          "1880:   wccp_wccp_address_table.family = tvb_get_ntohs(tvb,offset);",
          "1883:                         offset, 2, ENC_BIG_ENDIAN);",
          "1884:   EAT_AND_CHECK(2,2);",
          "1886:   address_length = tvb_get_ntohs(tvb,offset);",
          "1889:   EAT_AND_CHECK(2,2);",
          "1891:   wccp_wccp_address_table.table_length =  tvb_get_ntohl(tvb,offset);",
          "1896:   EAT(4);",
          "",
          "[Removed Lines]",
          "1873:   if (info_tree)",
          "1874:     tf = proto_tree_get_parent(info_tree);",
          "1881:   if (pinfo && info_tree)",
          "1882:     proto_tree_add_item(info_tree, hf_address_table_family, tvb,",
          "1887:   if (info_tree)",
          "1888:     proto_tree_add_item(info_tree, hf_address_table_address_length, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "1892:   if (pinfo && info_tree) {",
          "1893:     tf = proto_tree_add_item(info_tree, hf_address_table_length, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1894:     element_tree = proto_item_add_subtree(tf, ett_table_element);",
          "1895:   }",
          "",
          "[Added Lines]",
          "1879:   proto_tree_add_item(info_tree, hf_address_table_family, tvb,",
          "1884:   proto_tree_add_item(info_tree, hf_address_table_address_length, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "1888:   tf = proto_tree_add_item(info_tree, hf_address_table_length, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "1889:   element_tree = proto_item_add_subtree(tf, ett_table_element);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1901:     if (wccp_wccp_address_table.table_ipv4 == NULL)",
          "1902:       wccp_wccp_address_table.table_ipv4 = (guint32 *)",
          "1903:         wmem_alloc(pinfo->pool, wccp_wccp_address_table.table_length * 4);",
          "1905:       expert_add_info_format(pinfo, tf, &ei_wccp_length_bad,",
          "1906:                              \"The Address length must be 4, but I found  %d for IPv4 addresses. Correcting this.\",",
          "1907:                              address_length);",
          "",
          "[Removed Lines]",
          "1904:     if ((address_length != 4) && (pinfo && info_tree)) {",
          "",
          "[Added Lines]",
          "1899:     if (address_length != 4) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1912:     if (wccp_wccp_address_table.table_ipv6 == NULL)",
          "1913:       wccp_wccp_address_table.table_ipv6 = (struct e_in6_addr *)",
          "1914:         wmem_alloc(pinfo->pool, wccp_wccp_address_table.table_length * sizeof(struct e_in6_addr));",
          "1916:       expert_add_info_format(pinfo, tf, &ei_wccp_length_bad,",
          "1917:                              \"The Address length must be 16, but I found %d for IPv6 addresses.  Correcting this\",",
          "1918:                              address_length);",
          "",
          "[Removed Lines]",
          "1915:     if ((address_length != 16) && (pinfo && info_tree)) {",
          "",
          "[Added Lines]",
          "1910:     if (address_length != 16) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1920:     }",
          "1921:     break;",
          "1922:   default:",
          "1925:                     \"Unknown address family: %d\", wccp_wccp_address_table.family);",
          "1927:   };",
          "",
          "[Removed Lines]",
          "1923:     if (pinfo && info_tree) {",
          "1924:       expert_add_info_format(pinfo, tf, &ei_wccp_address_table_family_unknown,",
          "1926:     }",
          "",
          "[Added Lines]",
          "1918:     expert_add_info_format(pinfo, tf, &ei_wccp_address_table_family_unknown,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1935:     if (length < address_length) {",
          "1940:       wccp_wccp_address_table.in_use = FALSE;",
          "",
          "[Removed Lines]",
          "1936:       if (pinfo && tf)",
          "1937:         expert_add_info_format(pinfo, tf, &ei_wccp_length_bad, \"Ran out of space to decode\");",
          "",
          "[Added Lines]",
          "1929:       expert_add_info_format(pinfo, tf, &ei_wccp_length_bad, \"Ran out of space to decode\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}