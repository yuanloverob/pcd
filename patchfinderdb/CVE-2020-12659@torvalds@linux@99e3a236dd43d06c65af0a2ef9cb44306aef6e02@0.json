{
  "cve_id": "CVE-2020-12659",
  "cve_desc": "An issue was discovered in the Linux kernel before 5.6.7. xdp_umem_reg in net/xdp/xdp_umem.c has an out-of-bounds write (by a user with the CAP_NET_ADMIN capability) because of a lack of headroom validation.",
  "repo": "torvalds/linux",
  "patch_hash": "99e3a236dd43d06c65af0a2ef9cb44306aef6e02",
  "patch_info": {
    "commit_hash": "99e3a236dd43d06c65af0a2ef9cb44306aef6e02",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/99e3a236dd43d06c65af0a2ef9cb44306aef6e02",
    "files": [
      "net/xdp/xdp_umem.c"
    ],
    "message": "xsk: Add missing check on user supplied headroom size\n\nAdd a check that the headroom cannot be larger than the available\nspace in the chunk. In the current code, a malicious user can set the\nheadroom to a value larger than the chunk size minus the fixed XDP\nheadroom. That way packets with a length larger than the supported\nsize in the umem could get accepted and result in an out-of-bounds\nwrite.\n\nFixes: c0c77d8fb787 (\"xsk: add user memory registration support sockopt\")\nReported-by: Bui Quang Minh <minhquangbui99@gmail.com>\nSigned-off-by: Magnus Karlsson <magnus.karlsson@intel.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nLink: https://bugzilla.kernel.org/show_bug.cgi?id=207225\nLink: https://lore.kernel.org/bpf/1586849715-23490-1-git-send-email-magnus.karlsson@intel.com",
    "before_after_code_files": [
      "net/xdp/xdp_umem.c||net/xdp/xdp_umem.c"
    ]
  },
  "patch_diff": {
    "net/xdp/xdp_umem.c||net/xdp/xdp_umem.c": [
      "File: net/xdp/xdp_umem.c -> net/xdp/xdp_umem.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "343:  u32 chunk_size = mr->chunk_size, headroom = mr->headroom;",
      "344:  unsigned int chunks, chunks_per_page;",
      "345:  u64 addr = mr->addr, size = mr->len;",
      "348:  if (chunk_size < XDP_UMEM_MIN_CHUNK_SIZE || chunk_size > PAGE_SIZE) {",
      "",
      "[Removed Lines]",
      "346:  int size_chk, err;",
      "",
      "[Added Lines]",
      "346:  int err;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "382:    return -EINVAL;",
      "383:  }",
      "387:   return -EINVAL;",
      "389:  umem->address = (unsigned long)addr;",
      "",
      "[Removed Lines]",
      "385:  size_chk = chunk_size - headroom - XDP_PACKET_HEADROOM;",
      "386:  if (size_chk < 0)",
      "",
      "[Added Lines]",
      "385:  if (headroom >= chunk_size - XDP_PACKET_HEADROOM)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "624676e788992e4da8de1fad93bfe51563a7f9a0",
      "candidate_info": {
        "commit_hash": "624676e788992e4da8de1fad93bfe51563a7f9a0",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/624676e788992e4da8de1fad93bfe51563a7f9a0",
        "files": [
          "net/xdp/xdp_umem.c"
        ],
        "message": "xdp: xdp_umem: replace kmap on vmap for umem map\n\nFor 64-bit there is no reason to use vmap/vunmap, so use page_address\nas it was initially. For 32 bits, in some apps, like in samples\nxdpsock_user.c when number of pgs in use is quite big, the kmap\nmemory can be not enough, despite on this, kmap looks like is\ndeprecated in such cases as it can block and should be used rather\nfor dynamic mm.\n\nSigned-off-by: Ivan Khoronzhuk <ivan.khoronzhuk@linaro.org>\nAcked-by: Jonathan Lemon <jonathan.lemon@gmail.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>",
        "before_after_code_files": [
          "net/xdp/xdp_umem.c||net/xdp/xdp_umem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/xdp/xdp_umem.c||net/xdp/xdp_umem.c"
          ],
          "candidate": [
            "net/xdp/xdp_umem.c||net/xdp/xdp_umem.c"
          ]
        }
      },
      "candidate_diff": {
        "net/xdp/xdp_umem.c||net/xdp/xdp_umem.c": [
          "File: net/xdp/xdp_umem.c -> net/xdp/xdp_umem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: #include <linux/netdevice.h>",
          "15: #include <linux/rtnetlink.h>",
          "16: #include <linux/idr.h>",
          "19: #include \"xdp_umem.h\"",
          "20: #include \"xsk_queue.h\"",
          "",
          "[Removed Lines]",
          "17: #include <linux/highmem.h>",
          "",
          "[Added Lines]",
          "17: #include <linux/vmalloc.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "178:  unsigned int i;",
          "180:  for (i = 0; i < umem->npgs; i++)",
          "182: }",
          "184: static void xdp_umem_unpin_pages(struct xdp_umem *umem)",
          "",
          "[Removed Lines]",
          "181:   kunmap(umem->pgs[i]);",
          "",
          "[Added Lines]",
          "181:   if (PageHighMem(umem->pgs[i]))",
          "182:    vunmap(umem->pages[i].addr);",
          "183: }",
          "185: static int xdp_umem_map_pages(struct xdp_umem *umem)",
          "186: {",
          "187:  unsigned int i;",
          "188:  void *addr;",
          "190:  for (i = 0; i < umem->npgs; i++) {",
          "191:   if (PageHighMem(umem->pgs[i]))",
          "192:    addr = vmap(&umem->pgs[i], 1, VM_MAP, PAGE_KERNEL);",
          "193:   else",
          "194:    addr = page_address(umem->pgs[i]);",
          "196:   if (!addr) {",
          "197:    xdp_umem_unmap_pages(umem);",
          "198:    return -ENOMEM;",
          "199:   }",
          "201:   umem->pages[i].addr = addr;",
          "202:  }",
          "204:  return 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "320:  u32 chunk_size = mr->chunk_size, headroom = mr->headroom;",
          "321:  unsigned int chunks, chunks_per_page;",
          "322:  u64 addr = mr->addr, size = mr->len;",
          "325:  if (chunk_size < XDP_UMEM_MIN_CHUNK_SIZE || chunk_size > PAGE_SIZE) {",
          "",
          "[Removed Lines]",
          "323:  int size_chk, err, i;",
          "",
          "[Added Lines]",
          "346:  int size_chk, err;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "386:   goto out_account;",
          "387:  }",
          "394: out_account:",
          "395:  xdp_umem_unaccount_pages(umem);",
          "",
          "[Removed Lines]",
          "389:  for (i = 0; i < umem->npgs; i++)",
          "390:   umem->pages[i].addr = kmap(umem->pgs[i]);",
          "392:  return 0;",
          "",
          "[Added Lines]",
          "412:  err = xdp_umem_map_pages(umem);",
          "413:  if (!err)",
          "414:   return 0;",
          "416:  kfree(umem->pages);",
          "",
          "---------------"
        ]
      }
    }
  ]
}